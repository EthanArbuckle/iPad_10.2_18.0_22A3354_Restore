uint64_t MuxedAlphaDecoder_CopySupportedPropertyDictionary(uint64_t a1, uint64_t a2)
{
  const __CFAllocator *v4;
  CFDictionaryRef v5;
  uint64_t DerivedStorage;
  const void *v7;
  uint64_t v8;
  __CFDictionary *Mutable;
  CFTypeRef cf;
  CFTypeRef v12;
  __CFDictionary *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  cf = 0;
  v12 = 0;
  v13 = 0;
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v5 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  VTVideoDecoderGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v7 = *(const void **)(DerivedStorage + 40);
    if (v7)
    {
      v8 = VTSessionCopySupportedPropertyDictionary(v7, (CFDictionaryRef *)&cf);
      if ((_DWORD)v8)
      {
        Mutable = 0;
      }
      else
      {
        Mutable = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E0C9AEB8], MEMORY[0x1E0C9B3A0]);
        CFDictionarySetValue(Mutable, CFSTR("SublayerDecoderSpecification"), v5);
        v12 = cf;
        v13 = Mutable;
        FigCFCreateCombinedDictionary();
      }
    }
    else
    {
      Mutable = 0;
      v8 = 4294954393;
    }
  }
  else
  {
    Mutable = 0;
    v8 = 4294954394;
  }
  if (cf)
    CFRelease(cf);
  if (Mutable)
    CFRelease(Mutable);
  if (v5)
    CFRelease(v5);
  return v8;
}

uint64_t MuxedAlphaDecoder_FinishDelayedFrames(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  dispatch_time_t v5;

  VTVideoDecoderGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v2 = VTDecompressionSessionFinishDelayedFrames(*(VTDecompressionSessionRef *)(DerivedStorage + 40));
  VTDecompressionSessionFinishDelayedFrames(*(VTDecompressionSessionRef *)(DerivedStorage + 72));
  if (*(_QWORD *)(DerivedStorage + 104))
  {
    v3 = 2;
    do
    {
      v4 = *(NSObject **)(DerivedStorage + 104);
      v5 = dispatch_time(0, 1000000000 * v3);
      v3 *= 2;
    }
    while (dispatch_group_wait(v4, v5));
  }
  return v2;
}

uint64_t alphadecoder_createSubLayerVTDecompressionSession(uint64_t a1, int a2, const void *a3, const opaqueCMFormatDescription *a4, uint64_t a5, int a6, VTSessionRef *a7, BOOL *a8)
{
  _BOOL4 v14;
  uint64_t DerivedStorage;
  unint64_t Dimensions;
  uint64_t PixelBufferAttributesDictionary;
  int v18;
  const __CFAllocator *v19;
  const __CFDictionary *Mutable;
  CFTypeRef v21;
  uint64_t v22;
  BOOL v23;
  CFTypeID v24;
  uint64_t v25;
  int valuePtr;
  CFTypeRef propertyValueOut;
  VTSessionRef session;
  CFTypeRef cf;

  v14 = a2 != 0;
  VTVideoDecoderGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  session = 0;
  cf = 0;
  propertyValueOut = 0;
  valuePtr = -1;
  Dimensions = (unint64_t)CMVideoFormatDescriptionGetDimensions(*(CMVideoFormatDescriptionRef *)(DerivedStorage + 16));
  PixelBufferAttributesDictionary = alphadecoder_createPixelBufferAttributesDictionary(Dimensions, HIDWORD(Dimensions), a5, a6, (__CFDictionary **)&cf);
  if ((_DWORD)PixelBufferAttributesDictionary)
  {
    v25 = PixelBufferAttributesDictionary;
    Mutable = 0;
    goto LABEL_15;
  }
  v18 = 2 * v14;
  v19 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (a8)
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!Mutable)
    {
      v25 = FigSignalErrorAt();
      goto LABEL_15;
    }
    FigCFDictionarySetInt32();
    FigCFDictionarySetBoolean();
  }
  else
  {
    Mutable = 0;
  }
  v21 = cf;
  v22 = VTDecompressionSessionCreateWithOptions((uint64_t)v19, a4, a3, (const __CFDictionary *)cf, 0, Mutable, (uint64_t *)&session);
  if (!(_DWORD)v22)
  {
    if (VTSessionCopyProperty(session, CFSTR("WriteDirectlyToPlanesOfTargetCVPixelBuffer"), v19, &propertyValueOut))
      v23 = 1;
    else
      v23 = propertyValueOut == 0;
    if (!v23)
    {
      v24 = CFGetTypeID(propertyValueOut);
      if (v24 == CFNumberGetTypeID())
      {
        CFNumberGetValue((CFNumberRef)propertyValueOut, kCFNumberSInt32Type, &valuePtr);
        if (a8)
          *a8 = v18 == valuePtr;
      }
    }
    v25 = 0;
    *a7 = session;
    session = 0;
LABEL_15:
    v21 = cf;
    if (!cf)
      goto LABEL_17;
    goto LABEL_16;
  }
  v25 = v22;
  if (v21)
LABEL_16:
    CFRelease(v21);
LABEL_17:
  if (Mutable)
    CFRelease(Mutable);
  if (session)
    CFRelease(session);
  if (propertyValueOut)
    CFRelease(propertyValueOut);
  return v25;
}

uint64_t alphadecoder_createPixelBufferAttributesDictionary(uint64_t a1, uint64_t a2, uint64_t a3, int a4, __CFDictionary **a5)
{
  uint64_t v6;
  const __CFAllocator *v8;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v10;
  CFMutableArrayRef v11;
  CFMutableArrayRef v12;
  CFDictionaryRef v13;
  uint64_t v15;

  LODWORD(v6) = a4;
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return FigSignalErrorAt();
  v10 = Mutable;
  v11 = CFArrayCreateMutable(v8, 0, MEMORY[0x1E0C9B378]);
  if (v11)
  {
    v12 = v11;
    if ((int)v6 >= 1)
    {
      v6 = v6;
      do
      {
        a3 += 4;
        FigCFArrayAppendInt32();
        --v6;
      }
      while (v6);
    }
    CFDictionarySetValue(v10, (const void *)*MEMORY[0x1E0CA9040], v12);
    CFRelease(v12);
    FigCFDictionarySetInt32();
    FigCFDictionarySetInt32();
    v13 = CFDictionaryCreate(v8, 0, 0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFDictionarySetValue(v10, (const void *)*MEMORY[0x1E0CA8FF0], v13);
    *a5 = v10;
    if (v13)
      CFRelease(v13);
    return 0;
  }
  else
  {
    v15 = FigSignalErrorAt();
    CFRelease(v10);
    return v15;
  }
}

CFDictionaryRef alphadecoder_copyPixelBufferAttributesFromDecompressionSession(uint64_t a1)
{
  CFDictionaryRef PixelBufferAttributes;
  CFDictionaryRef v2;
  CVPixelBufferPoolRef pool;

  pool = 0;
  if (VTDecompressionSessionCopyProperty(a1, CFSTR("PixelBufferPool"), (const __CFAllocator *)*MEMORY[0x1E0C9AE00], (uint64_t *)&pool))
  {
    v2 = 0;
  }
  else
  {
    PixelBufferAttributes = CVPixelBufferPoolGetPixelBufferAttributes(pool);
    v2 = PixelBufferAttributes;
    if (PixelBufferAttributes)
      CFRetain(PixelBufferAttributes);
    else
      FigSignalErrorAt();
  }
  if (pool)
    CFRelease(pool);
  return v2;
}

uint64_t alphadecoder_createDerivedSampleBuffer(opaqueCMSampleBuffer *a1, CMBlockBufferRef theBuffer, const opaqueCMFormatDescription *a3, CMSampleBufferRef *a4)
{
  uint64_t result;
  uint64_t v9;
  const __CFArray *SampleAttachmentsArray;
  const __CFDictionary *ValueAtIndex;
  const __CFArray *v12;
  void *v13;
  uint64_t v14;
  size_t sampleSizeArray;
  CMSampleTimingInfo timingInfoOut;
  CMSampleBufferRef sampleBufferOut;

  sampleBufferOut = 0;
  *(_OWORD *)&timingInfoOut.duration.value = *MEMORY[0x1E0CA2E18];
  timingInfoOut.duration.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  timingInfoOut.presentationTimeStamp = timingInfoOut.duration;
  timingInfoOut.decodeTimeStamp = timingInfoOut.duration;
  sampleSizeArray = CMBlockBufferGetDataLength(theBuffer);
  result = CMSampleBufferGetSampleTimingInfo(a1, 0, &timingInfoOut);
  if ((_DWORD)result)
  {
    if ((_DWORD)result != -12736)
      return result;
    v9 = CMSampleBufferCreateReady((CFAllocatorRef)*MEMORY[0x1E0C9AE00], theBuffer, a3, 1, 0, 0, 1, &sampleSizeArray, &sampleBufferOut);
  }
  else
  {
    v9 = CMSampleBufferCreateReady((CFAllocatorRef)*MEMORY[0x1E0C9AE00], theBuffer, a3, 1, 1, &timingInfoOut, 1, &sampleSizeArray, &sampleBufferOut);
  }
  if ((_DWORD)v9)
  {
    v14 = v9;
    if (sampleBufferOut)
      CFRelease(sampleBufferOut);
    return v14;
  }
  else
  {
    CMPropagateAttachments(a1, sampleBufferOut);
    SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(a1, 0);
    if (SampleAttachmentsArray)
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0);
      v12 = CMSampleBufferGetSampleAttachmentsArray(sampleBufferOut, 1u);
      v13 = (void *)CFArrayGetValueAtIndex(v12, 0);
      CFDictionaryApplyFunction(ValueAtIndex, (CFDictionaryApplierFunction)alphadecoder_dictionarySetValue, v13);
    }
    FigSampleBufferGetDecryptor();
    FigSampleBufferSetDecryptor();
    result = 0;
    *a4 = sampleBufferOut;
  }
  return result;
}

uint64_t alphadecoder_mergeBaseAndAlpha(__CVBuffer *a1, int a2, CVPixelBufferRef pixelBuffer)
{
  const __CFDictionary *DescriptionWithPixelFormatType;
  const __CFArray *Value;
  const __CFArray *v7;
  CFTypeID v8;
  uint64_t v11;

  if (CVPixelBufferGetPixelFormatType(pixelBuffer) == 1982882104
    || CVPixelBufferGetPixelFormatType(pixelBuffer) == 2016436536
    || CVPixelBufferGetPixelFormatType(pixelBuffer) == 1983013176
    || CVPixelBufferGetPixelFormatType(pixelBuffer) == 2016567608
    || CVPixelBufferGetPixelFormatType(pixelBuffer) == 1983144248
    || CVPixelBufferGetPixelFormatType(pixelBuffer) == 2016698680)
  {
    CVPixelBufferGetWidth(pixelBuffer);
    CVPixelBufferGetHeight(pixelBuffer);
    CVPixelBufferGetPixelFormatType(a1);
    DescriptionWithPixelFormatType = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
    if (DescriptionWithPixelFormatType
      && (Value = (const __CFArray *)CFDictionaryGetValue(DescriptionWithPixelFormatType, (const void *)*MEMORY[0x1E0CA91B0])) != 0&& (v7 = Value, v8 = CFGetTypeID(Value), v8 == CFArrayGetTypeID())&& CFArrayGetCount(v7) > 1)
    {
      CFArrayGetValueAtIndex(v7, 0);
      FigCFDictionaryGetInt32IfPresent();
      CFArrayGetValueAtIndex(v7, 1);
      FigCFDictionaryGetInt32IfPresent();
    }
    else
    {
      v11 = FigSignalErrorAt();
      if ((_DWORD)v11)
        return v11;
    }
    return FigSignalErrorAt();
  }
  return 4294954394;
}

void alphadecoder_emitDecodedFrame(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, __CVBuffer *a5)
{
  uint64_t DerivedStorage;

  VTVideoDecoderGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  VTDecoderSessionEmitDecodedFrame(*(uint64_t **)(DerivedStorage + 8), a2, a3, a4, a5);
  --*(_DWORD *)(DerivedStorage + 120);
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(DerivedStorage + 112));
  dispatch_group_leave(*(dispatch_group_t *)(DerivedStorage + 104));
}

void alphadecoder_dictionarySetValue(void *key, void *value, CFMutableDictionaryRef theDict)
{
  CFDictionarySetValue(theDict, key, value);
}

uint64_t alphadecoder_transferPlane(__CVBuffer *a1, size_t a2, __CVBuffer *a3, size_t a4, uint64_t a5)
{
  size_t WidthOfPlane;
  size_t HeightOfPlane;
  char *BaseAddressOfPlane;
  size_t BytesPerRowOfPlane;
  char *v14;
  size_t v15;
  size_t v16;
  size_t v17;

  WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, a2);
  HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, a2);
  if (CVPixelBufferGetWidthOfPlane(a3, a4) != WidthOfPlane)
    return FigSignalErrorAt();
  if (CVPixelBufferGetHeightOfPlane(a3, a4) != HeightOfPlane)
    return FigSignalErrorAt();
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, a2);
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, a2);
  v14 = (char *)CVPixelBufferGetBaseAddressOfPlane(a3, a4);
  v15 = CVPixelBufferGetBytesPerRowOfPlane(a3, a4);
  v16 = WidthOfPlane * a5;
  if (v16 > BytesPerRowOfPlane)
    return FigSignalErrorAt();
  v17 = v15;
  if (v16 > v15)
    return FigSignalErrorAt();
  for (; HeightOfPlane; --HeightOfPlane)
  {
    memcpy(v14, BaseAddressOfPlane, v16);
    BaseAddressOfPlane += BytesPerRowOfPlane;
    v14 += v17;
  }
  return 0;
}

uint64_t VTHDRImageStatisticsGenerationSessionGetTypeID()
{
  MEMORY[0x1940281CC](&VTHDRImageStatisticsGenerationSessionGetTypeID_sRegisterVTHDRImageStatisticsGenerationSessionOnce, registerVTHDRImageStatisticsGenerationSession);
  return sVTHDRImageStatisticsGenerationSessionID;
}

uint64_t registerVTHDRImageStatisticsGenerationSession()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sVTHDRImageStatisticsGenerationSessionID = result;
  return result;
}

uint64_t VTHDRImageStatisticsGenerationSessionCreate(uint64_t a1, const void *a2, uint64_t *a3)
{
  uint64_t Instance;
  uint64_t v6;
  id v7;
  uint64_t v8;
  CFTypeID v9;
  int v10;
  uint64_t v12;

  if (a3)
  {
    MEMORY[0x1940281CC](&VTHDRImageStatisticsGenerationSessionGetTypeID_sRegisterVTHDRImageStatisticsGenerationSessionOnce, registerVTHDRImageStatisticsGenerationSession);
    Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      v6 = Instance;
      v7 = MTLCreateSystemDefaultDevice();
      *(_QWORD *)(v6 + 200) = v7;
      if (!v7 || (v8 = objc_msgSend(v7, "newCommandQueue"), (*(_QWORD *)(v6 + 208) = v8) == 0))
      {
LABEL_14:
        v12 = FigSignalErrorAt();
        CFRelease((CFTypeRef)v6);
        return v12;
      }
      *(_DWORD *)(v6 + 184) = 0;
      if (a2)
      {
        v9 = CFGetTypeID(a2);
        if (v9 == CFDictionaryGetTypeID())
        {
          FigCFDictionaryGetValue();
          if (FigCFEqual())
          {
            v10 = 1;
          }
          else
          {
            if (!FigCFEqual())
              goto LABEL_12;
            v10 = 2;
          }
          *(_DWORD *)(v6 + 184) = v10;
        }
      }
LABEL_12:
      CVMetalTextureCacheCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, *(id *)(v6 + 200), 0, (CVMetalTextureCacheRef *)(v6 + 32));
      if (*(_QWORD *)(v6 + 32))
      {
        *a3 = v6;
        return 0;
      }
      goto LABEL_14;
    }
  }
  return FigSignalErrorAt();
}

uint64_t VTHDRImageStatisticsGenerationSessionCreateStatistics(uint64_t a1, void *a2, float *a3, float *a4, float *a5, float *a6)
{
  CFTypeID v12;
  CFTypeID v13;
  CFTypeRef v14;
  int v15;
  int v16;
  int v17;
  const __CFDictionary *v18;
  double Width;
  double Height;
  OSType PixelFormatType;
  unsigned int v22;
  __CVBuffer *v23;
  CFIndex Length;
  CFIndex v25;
  const UInt8 *BytePtr;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  MTLPixelFormat v31;
  void *v32;
  void *v38;
  uint64_t v39;
  CFTypeRef v40;
  double x;
  double y;
  double v43;
  double v44;
  void *v45;
  const __CFAllocator *v46;
  __CVMetalTextureCache *v47;
  size_t v48;
  size_t v49;
  id Texture;
  id v51;
  uint64_t v52;
  void *v53;
  void *v54;
  int v55;
  uint64_t v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  uint64_t v61;
  float v62;
  double v63;
  double v64;
  double v65;
  long double v66;
  long double v67;
  double v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  float *v76;
  float **v77;
  float **v78;
  uint64_t v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float *v87;
  float *v88;
  float *v89;
  float **v90;
  uint64_t v91;
  float *v92;
  float *v93;
  float v94;
  uint64_t v95;
  float v96;
  uint64_t v97;
  float v98;
  float v99;
  uint64_t v100;
  int v101;
  int v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  float v106;
  unsigned int v107;
  int v108;
  int v109;
  float *v110;
  float *v111;
  uint64_t v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  uint64_t v122;
  const __CFDictionary *v123;
  float *v124;
  float *v125;
  float *v126;
  float *v127;
  CGRect rect;
  CFDataRef theData;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  __int128 v134;
  CVMetalTextureRef textureOut;
  CGRect v136;

  theData = 0;
  if (!a1
    || (v12 = CFGetTypeID((CFTypeRef)a1),
        MEMORY[0x1940281CC](&VTHDRImageStatisticsGenerationSessionGetTypeID_sRegisterVTHDRImageStatisticsGenerationSessionOnce, registerVTHDRImageStatisticsGenerationSession), v12 != sVTHDRImageStatisticsGenerationSessionID)|| !a2|| (v13 = CFGetTypeID(a2), v13 != CVPixelBufferGetTypeID())|| !a3|| !a4|| !a5|| !a6)
  {
    v30 = FigSignalErrorAt();
    v18 = 0;
    v14 = 0;
    goto LABEL_179;
  }
  v14 = CVBufferCopyAttachment((CVBufferRef)a2, (CFStringRef)*MEMORY[0x1E0CA8E98], 0);
  v15 = FigCFEqual();
  v16 = FigCFEqual();
  if (!(v16 | v15))
  {
    v30 = FigSignalErrorAt();
    v18 = 0;
    goto LABEL_179;
  }
  v17 = v16;
  v127 = a3;
  v18 = (const __CFDictionary *)CVBufferCopyAttachment((CVBufferRef)a2, (CFStringRef)*MEMORY[0x1E0CA8E80], 0);
  Width = (double)CVPixelBufferGetWidth((CVPixelBufferRef)a2);
  Height = (double)CVPixelBufferGetHeight((CVPixelBufferRef)a2);
  rect.origin.x = 0.0;
  rect.origin.y = 0.0;
  rect.size.width = Width;
  rect.size.height = Height;
  PixelFormatType = CVPixelBufferGetPixelFormatType((CVPixelBufferRef)a2);
  if (v18)
  {
    if (!CGRectMakeWithDictionaryRepresentation(v18, &rect))
      goto LABEL_33;
    rect = CGRectStandardize(rect);
    v136 = CGRectIntegral(rect);
    Width = v136.size.width;
    Height = v136.size.height;
    rect = v136;
  }
  else
  {
    v136.origin.y = 0.0;
    v136.origin.x = 0.0;
  }
  v125 = a5;
  v126 = a6;
  v124 = a4;
  if (*(_DWORD *)(a1 + 184) == 2)
  {
    v22 = 0;
    v23 = (__CVBuffer *)a2;
    goto LABEL_35;
  }
  if (vthisgsPixelTransferToIntermediateBuffer((VTPixelTransferSessionRef *)a1, (CVPixelBufferRef)a2, v18, &theData, v136.origin.x, v136.origin.y, Width, Height))
  {
    v22 = 0;
    v23 = (__CVBuffer *)a2;
    goto LABEL_32;
  }
  if (!theData || (Length = CFDataGetLength(theData), v25 = Length, Length != 768) && Length != 3072 && Length != 1536)
  {
    v22 = 0;
LABEL_31:
    v23 = *(__CVBuffer **)(a1 + 24);
    PixelFormatType = 1111970369;
LABEL_32:
    if (*(_DWORD *)(a1 + 184) != 1)
    {
LABEL_35:
      if (PixelFormatType != 1111970369)
      {
        if (PixelFormatType == 1815162994)
        {
          v31 = MTLPixelFormatRGB10A2Unorm;
          goto LABEL_43;
        }
        if (PixelFormatType == 1380411457)
        {
          v31 = MTLPixelFormatRGBA16Float;
LABEL_43:
          if (!objc_opt_class())
          {
            v29 = FigSignalErrorAt();
            if ((_DWORD)v29)
              goto LABEL_34;
          }
          v32 = *(void **)(a1 + 216);
          v123 = v18;
          if (*(_QWORD *)(a1 + 192) != v31 || !v32 || !*(_QWORD *)(a1 + 224))
          {

            *(_QWORD *)(a1 + 216) = 0;
            *(_QWORD *)(a1 + 224) = 0;
            v130 = 256;
            v131 = 0;
            v132 = 0;
            v133 = 0;
            __asm { FMOV            V0.4S, #1.0 }
            v134 = _Q0;
            v38 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CC6E60]), "initWithDevice:histogramInfo:", *(_QWORD *)(a1 + 200), &v130);
            *(_QWORD *)(a1 + 224) = v38;
            if (!v38)
              goto LABEL_190;
            if (objc_msgSend(v38, "histogramSizeForSourceFormat:", v31) != 3072)
            {
              v40 = v14;
              v122 = FigSignalErrorAt();
              if ((_DWORD)v122)
              {
                v30 = v122;
                goto LABEL_195;
              }
LABEL_52:
              x = rect.origin.x;
              y = rect.origin.y;
              v43 = rect.size.width;
              v44 = rect.size.height;
              textureOut = 0;
              v45 = (void *)MEMORY[0x194028B74]();
              v46 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
              v47 = *(__CVMetalTextureCache **)(a1 + 32);
              v48 = CVPixelBufferGetWidth(v23);
              v49 = CVPixelBufferGetHeight(v23);
              CVMetalTextureCacheCreateTextureFromImage(v46, v47, v23, 0, v31, v48, v49, 0, &textureOut);
              if (textureOut
                && (Texture = CVMetalTextureGetTexture(textureOut)) != 0
                && (v51 = Texture, (v52 = objc_msgSend(*(id *)(a1 + 208), "commandBuffer")) != 0))
              {
                v53 = (void *)v52;
                v54 = *(void **)(a1 + 224);
                v130 = (unint64_t)x;
                v131 = (unint64_t)y;
                v132 = 0;
                v133 = (unint64_t)v43;
                v55 = 1;
                *(_QWORD *)&v134 = (unint64_t)v44;
                *((_QWORD *)&v134 + 1) = 1;
                objc_msgSend(v54, "setClipRectSource:", &v130);
                objc_msgSend(*(id *)(a1 + 224), "encodeToCommandBuffer:sourceTexture:histogram:histogramOffset:", v53, v51, *(_QWORD *)(a1 + 216), 0);
                objc_msgSend(v53, "commit");
                objc_msgSend(v53, "waitUntilCompleted");
                objc_autoreleasePoolPop(v45);
                v27 = objc_msgSend(*(id *)(a1 + 216), "contents");
                v30 = 0;
                v22 = 256;
              }
              else
              {
                objc_autoreleasePoolPop(v45);
                v27 = 0;
                v55 = 0;
                v30 = 4294954392;
              }
              if (textureOut)
                CFRelease(textureOut);
              if (v55)
              {
                v14 = v40;
                v18 = v123;
                if (v27)
                  goto LABEL_60;
                goto LABEL_33;
              }
LABEL_195:
              v14 = v40;
              v18 = v123;
              goto LABEL_179;
            }
            v39 = objc_msgSend(*(id *)(a1 + 200), "newBufferWithLength:options:", 3072, 0);
            *(_QWORD *)(a1 + 216) = v39;
            if (!v39)
            {
LABEL_190:
              v30 = 4294954392;
              goto LABEL_179;
            }
            *(_QWORD *)(a1 + 192) = v31;
          }
          v40 = v14;
          goto LABEL_52;
        }
        v29 = vthisgsPixelTransferToIntermediateBuffer((VTPixelTransferSessionRef *)a1, (CVPixelBufferRef)a2, v18, 0, rect.origin.x, rect.origin.y, rect.size.width, rect.size.height);
        if ((_DWORD)v29)
          goto LABEL_34;
        v23 = *(__CVBuffer **)(a1 + 24);
      }
      v31 = MTLPixelFormatBGRA8Unorm;
      goto LABEL_43;
    }
LABEL_33:
    v29 = FigSignalErrorAt();
LABEL_34:
    v30 = v29;
    goto LABEL_179;
  }
  BytePtr = CFDataGetBytePtr(theData);
  v27 = (uint64_t)BytePtr;
  if (v25 == 1536)
    v28 = 128;
  else
    v28 = 256;
  if (v25 == 768)
    v22 = 64;
  else
    v22 = v28;
  if (!BytePtr)
    goto LABEL_31;
LABEL_60:
  v56 = v22;
  if (v22 == 64)
  {
    if (v17)
    {
      if (!*(_QWORD *)(a1 + 56))
        goto LABEL_76;
    }
    else if (!*(_QWORD *)(a1 + 40))
    {
      goto LABEL_76;
    }
LABEL_115:
    v72 = v27 + 4 * v56;
    v73 = v27 + 4 * (2 * v56);
    v74 = (unint64_t)(rect.size.width * rect.size.height);
    goto LABEL_116;
  }
  if (v22 == 128)
  {
    if (v17)
    {
      if (!*(_QWORD *)(a1 + 104))
        goto LABEL_76;
    }
    else if (!*(_QWORD *)(a1 + 88))
    {
      goto LABEL_76;
    }
LABEL_125:
    v72 = v27 + 4 * v56;
    v73 = v27 + 1024;
    v74 = (unint64_t)(rect.size.width * rect.size.height);
    v90 = (float **)(a1 + 88);
    if (v17)
      v90 = (float **)(a1 + 104);
    v77 = (float **)(a1 + 96);
    if (v17)
      v77 = (float **)(a1 + 112);
    v78 = (float **)(a1 + 120);
    if (v17)
      v78 = (float **)(a1 + 128);
    v79 = 128;
    goto LABEL_132;
  }
  if (v17)
  {
    if (*(_QWORD *)(a1 + 152))
      goto LABEL_103;
  }
  else if (*(_QWORD *)(a1 + 136))
  {
    goto LABEL_103;
  }
LABEL_76:
  v57 = malloc_type_calloc(v22, 4uLL, 0x100004052888210uLL);
  v58 = malloc_type_calloc(v22, 4uLL, 0x100004052888210uLL);
  v59 = malloc_type_calloc(v22, 4uLL, 0x100004052888210uLL);
  v60 = v59;
  if (!v57 || !v58 || !v59)
  {
    free(v57);
    free(v58);
    free(v60);
    goto LABEL_190;
  }
  if (v22)
  {
    v61 = 0;
    do
    {
      v62 = (float)(int)v61 / (float)(v56 - 1);
      if (v17)
      {
        v63 = v62 + 0.0;
        if (v63 < 0.0)
          v63 = 0.0;
        if (v63 <= 0.5)
        {
          v64 = v63 * v63;
          v65 = 3.0;
        }
        else
        {
          v64 = exp((v63 + -0.55991073) / 0.17883277) + 0.28466892;
          v65 = 12.0;
        }
        v66 = v64 / v65 * (pow(v64 / v65, 0.2) * 1000.0) / 10000.0;
        if (v66 < 0.0)
          v66 = 0.0;
        v67 = pow(v66, 0.159301758);
        v68 = (v67 * 18.8515625 + 0.8359375) / (v67 * 18.6875 + 1.0);
        if (v68 < 0.0)
          v68 = 0.0;
        v62 = pow(v68, 78.84375);
      }
      *((float *)v57 + v61) = v62;
      *((float *)v58 + v61++) = v62 * v62;
    }
    while (v56 != v61);
    if ((_DWORD)v56 == 64)
    {
      if (v17)
      {
        *(_QWORD *)(a1 + 56) = v57;
        *(_QWORD *)(a1 + 64) = v58;
        v69 = (_QWORD *)(a1 + 80);
      }
      else
      {
        *(_QWORD *)(a1 + 40) = v57;
        *(_QWORD *)(a1 + 48) = v58;
        v69 = (_QWORD *)(a1 + 72);
      }
      *v69 = v60;
      goto LABEL_115;
    }
    if ((_DWORD)v56 == 128)
    {
      if (v17)
      {
        *(_QWORD *)(a1 + 104) = v57;
        *(_QWORD *)(a1 + 112) = v58;
        v70 = (_QWORD *)(a1 + 128);
      }
      else
      {
        *(_QWORD *)(a1 + 88) = v57;
        *(_QWORD *)(a1 + 96) = v58;
        v70 = (_QWORD *)(a1 + 120);
      }
      *v70 = v60;
      goto LABEL_125;
    }
  }
  if (v17)
  {
    *(_QWORD *)(a1 + 152) = v57;
    *(_QWORD *)(a1 + 160) = v58;
    v71 = (_QWORD *)(a1 + 176);
  }
  else
  {
    *(_QWORD *)(a1 + 136) = v57;
    *(_QWORD *)(a1 + 144) = v58;
    v71 = (_QWORD *)(a1 + 168);
  }
  *v71 = v60;
LABEL_103:
  v72 = v27 + 4 * v56;
  v73 = v27 + 4 * (2 * v56);
  v74 = (unint64_t)(rect.size.width * rect.size.height);
  if ((_DWORD)v56 == 64)
  {
LABEL_116:
    v90 = (float **)(a1 + 40);
    if (v17)
      v90 = (float **)(a1 + 56);
    v77 = (float **)(a1 + 48);
    if (v17)
      v77 = (float **)(a1 + 64);
    v78 = (float **)(a1 + 72);
    if (v17)
      v78 = (float **)(a1 + 80);
    v79 = 64;
LABEL_132:
    v76 = *v90;
LABEL_133:
    v91 = 0;
    v92 = *v77;
    v93 = *v78;
    v94 = 0.0;
    do
    {
      v94 = v94 + (float)((float)*(unsigned int *)(v27 + 4 * v91) * v76[v91]);
      ++v91;
    }
    while (v79 != v91);
    v95 = 0;
    v96 = 0.0;
    do
    {
      v96 = v96 + (float)((float)*(unsigned int *)(v72 + 4 * v95) * v76[v95]);
      ++v95;
    }
    while (v79 != v95);
    v97 = 0;
    v98 = (float)v74;
    v99 = 0.0;
    do
    {
      v99 = v99 + (float)((float)*(unsigned int *)(v73 + 4 * v97) * v76[v97]);
      ++v97;
    }
    while (v79 != v97);
    if ((_DWORD)v56)
    {
      v100 = 0;
      v101 = -1;
      v102 = -1;
      do
      {
        v103 = *(_DWORD *)(v27 + 4 * v100);
        v104 = *(_DWORD *)(v72 + 4 * v100);
        v105 = *(_DWORD *)(v73 + 4 * v100);
        v106 = ((float)((float)v103 / v98) + (float)((float)v104 / v98) + (float)((float)v105 / v98)) / 3.0;
        v93[v100] = v106;
        if (v103 > v104)
          v104 = 1;
        else
          v103 = v104;
        if (v103 <= v105)
          v107 = v105;
        else
          v107 = v104;
        if (v102 == -1)
          v108 = v100;
        else
          v108 = v102;
        if (v107)
        {
          v102 = v108;
          v101 = v100;
        }
        ++v100;
      }
      while (v79 != v100);
      v88 = v125;
      v87 = v126;
      v89 = v124;
      if (v102 == -1)
      {
        v83 = *v76;
        if (v101 == -1)
          v110 = v76;
        else
          v110 = &v76[v101];
      }
      else
      {
        if (v101 == -1)
          v109 = 0;
        else
          v109 = v101;
        v83 = v76[v102];
        v110 = &v76[v109];
      }
    }
    else
    {
      v83 = *v76;
      v110 = v76;
      v88 = v125;
      v87 = v126;
      v89 = v124;
    }
    v84 = v94 / v98;
    v82 = *v110;
    v80 = 0.0;
    v111 = v93;
    v112 = v79;
    v85 = v96 / v98;
    do
    {
      v113 = *v111++;
      v114 = v113;
      v115 = *v76++;
      v80 = v80 + (float)(v114 * v115);
      --v112;
    }
    while (v112);
    v86 = 0.0;
    do
    {
      v116 = *v93++;
      v117 = v116;
      v118 = *v92++;
      v86 = v86 + (float)(v117 * v118);
      --v79;
    }
    while (v79);
    v81 = v99 / v98;
    goto LABEL_167;
  }
  v75 = 152;
  if (!v17)
    v75 = 136;
  v76 = *(float **)(a1 + v75);
  v77 = (float **)(a1 + 144);
  if (v17)
    v77 = (float **)(a1 + 160);
  v78 = (float **)(a1 + 168);
  if (v17)
    v78 = (float **)(a1 + 176);
  if ((_DWORD)v56)
  {
    v79 = v56;
    goto LABEL_133;
  }
  v80 = 0.0;
  v81 = 0.0 / (float)v74;
  v82 = *v76;
  v83 = *v76;
  v84 = v81;
  v85 = v81;
  v86 = 0.0;
  v88 = v125;
  v87 = v126;
  v89 = v124;
LABEL_167:
  v30 = 0;
  if (v84 <= v85)
    v119 = v85;
  else
    v119 = v84;
  if (v119 > v81)
    v81 = v119;
  v120 = v86 - (float)(v80 * v80);
  if (v120 <= 0.0)
    v120 = 0.0;
  if (v81 >= v82)
    v81 = v82;
  if (v83 > v81)
    v81 = v83;
  *v127 = v81;
  *v89 = v83;
  *v88 = v82;
  *v87 = sqrtf(v120);
LABEL_179:
  if (theData)
    CFRelease(theData);
  if (v14)
    CFRelease(v14);
  if (v18)
    CFRelease(v18);
  return v30;
}

uint64_t vthisgsPixelTransferToIntermediateBuffer(VTPixelTransferSessionRef *pixelTransferSessionOut, CVPixelBufferRef pixelBuffer, CFDictionaryRef a3, void *a4, double a5, double a6, double a7, double a8)
{
  VTPixelTransferSessionRef *v15;
  const __CFAllocator **v16;
  uint64_t v17;
  size_t Width;
  size_t Height;
  __CVBuffer *v20;
  CFTypeRef *v21;
  VTPixelTransferSessionRef v22;
  __CFDictionary *Mutable;
  CFMutableDictionaryRef v24;
  const __CFAllocator *v25;
  const CFDictionaryKeyCallBacks *v26;
  const CFDictionaryValueCallBacks *v27;
  uint64_t v28;
  int v29;
  double v30;
  CFDictionaryRef DictionaryRepresentation;
  CFDictionaryRef v32;
  VTPixelTransferSessionRef v33;
  const __CFString *v34;
  CFDictionaryRef v35;
  uint64_t v36;
  uint64_t v37;
  CGRect v40;
  CGRect v41;

  v15 = pixelTransferSessionOut + 2;
  v16 = (const __CFAllocator **)MEMORY[0x1E0C9AE00];
  if (!pixelTransferSessionOut[2])
  {
    v17 = VTPixelTransferSessionCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v15);
    if ((_DWORD)v17)
      return v17;
  }
  Width = CVPixelBufferGetWidth(pixelBuffer);
  Height = CVPixelBufferGetHeight(pixelBuffer);
  v22 = pixelTransferSessionOut[3];
  v21 = (CFTypeRef *)(pixelTransferSessionOut + 3);
  v20 = v22;
  if (v22)
  {
    if (Width == CVPixelBufferGetWidth(v20) && Height == CVPixelBufferGetHeight((CVPixelBufferRef)*v21))
    {
      if (*v21)
      {
        Mutable = 0;
        v24 = 0;
        goto LABEL_11;
      }
    }
    else if (*v21)
    {
      CFRelease(*v21);
      *v21 = 0;
    }
  }
  v25 = *v16;
  v26 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v27 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  Mutable = CFDictionaryCreateMutable(v25, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v24 = CFDictionaryCreateMutable(v25, 0, v26, v27);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA8FF0], v24);
  v28 = CVPixelBufferCreate(v25, Width, Height, 0x42475241u, Mutable, (CVPixelBufferRef *)v21);
  if ((_DWORD)v28)
  {
    v37 = v28;
    DictionaryRepresentation = 0;
    v32 = 0;
    if (!Mutable)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_11:
  if (CVPixelBufferGetPixelFormatType(pixelBuffer) == 1882468912 && (v29 = (int)a5 % 6, v29 >= 1))
  {
    v40.origin.x = (double)((int)a5 - v29);
    v40.origin.y = (double)(int)a6;
    v40.size.width = (double)(v29 + (int)a7);
    v30 = (double)(int)a8;
    v40.size.height = v30;
    DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v40);
    if (a4)
    {
      v41.origin.x = (double)v29;
      v41.size.width = (double)(int)a7;
      v41.origin.y = 0.0;
      v41.size.height = v30;
      v32 = CGRectCreateDictionaryRepresentation(v41);
    }
    else
    {
      v32 = 0;
    }
    a3 = DictionaryRepresentation;
  }
  else
  {
    DictionaryRepresentation = 0;
    v32 = 0;
  }
  VTSessionSetProperty(*v15, CFSTR("SourceCropRectangle"), a3);
  VTSessionSetProperty(*v15, CFSTR("DestinationRectangle"), a3);
  v33 = *v15;
  v34 = CFSTR("EnableHistogram");
  if (a4)
  {
    VTSessionSetProperty(v33, CFSTR("EnableHistogram"), (CFTypeRef)*MEMORY[0x1E0C9AE50]);
    v33 = *v15;
    v34 = CFSTR("HistogramRectangle");
    v35 = v32;
  }
  else
  {
    v35 = (CFDictionaryRef)*MEMORY[0x1E0C9AE40];
  }
  VTSessionSetProperty(v33, v34, v35);
  CVBufferPropagateAttachments(pixelBuffer, (CVBufferRef)*v21);
  v36 = VTPixelTransferSessionTransferImage(*v15, pixelBuffer, (CVPixelBufferRef)*v21);
  v37 = v36;
  if (a4 && !(_DWORD)v36)
    VTSessionCopyProperty(*v15, CFSTR("HistogramData"), (CFAllocatorRef)*MEMORY[0x1E0C9AE00], a4);
  if (!Mutable)
    goto LABEL_26;
LABEL_25:
  CFRelease(Mutable);
LABEL_26:
  if (v24)
    CFRelease(v24);
  if (DictionaryRepresentation)
    CFRelease(DictionaryRepresentation);
  if (v32)
    CFRelease(v32);
  return v37;
}

double vtHDRImageStatisticsGenerationSessionInit(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 224) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void vtHDRImageStatisticsGenerationSessionFinalize(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  v2 = *(const void **)(a1 + 16);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 24);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(a1 + 32);
  if (v4)
    CFRelease(v4);
  free(*(void **)(a1 + 40));
  free(*(void **)(a1 + 56));
  free(*(void **)(a1 + 48));
  free(*(void **)(a1 + 64));
  free(*(void **)(a1 + 72));
  free(*(void **)(a1 + 80));
  free(*(void **)(a1 + 88));
  free(*(void **)(a1 + 104));
  free(*(void **)(a1 + 96));
  free(*(void **)(a1 + 112));
  free(*(void **)(a1 + 120));
  free(*(void **)(a1 + 128));
  free(*(void **)(a1 + 136));
  free(*(void **)(a1 + 152));
  free(*(void **)(a1 + 144));
  free(*(void **)(a1 + 160));
  free(*(void **)(a1 + 168));
  free(*(void **)(a1 + 176));

}

CFTypeRef vtHDRImageStatisticsGenerationSessionCopyFormattingDesc()
{
  return CFRetain(CFSTR("[VTHDRImageStatisticsGenerationSession]"));
}

__CFString *vtHDRImageStatisticsGenerationSessionCopyDebugDesc(const void *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  CFAllocatorRef v4;

  v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  v4 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<VTHDRImageStatisticsGenerationSession %p [%p]>{}"), a1, v4);
  return Mutable;
}

uint64_t VTPixelBlitterColorHandlingOptimized_setup(int a1, CFDictionaryRef theDict, int a3, const __CFDictionary *a4, const __CFDictionary *a5, int a6, int a7, _QWORD *a8, _QWORD *a9, uint64_t a10, void (__cdecl **a11)(void *))
{
  const void **v18;
  const __CFString *Value;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char MaxLogicalCoreCount;
  __CFDictionary *v25;
  CGColorConversionInfoRef v26;
  uint64_t v27;
  const __CFAllocator *v28;
  __CFDictionary *MutableCopy;
  const void *v30;
  uint64_t v31;
  uint64_t *v33;
  int v34;
  uint64_t *v35;
  uint64_t *v36;
  int8x8_t v37;
  int8x8_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  unsigned __int16 v44;
  char v45;
  char v46;
  int v47;
  int v48;
  int v49;
  unsigned int v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  unsigned __int16 v57;
  int v58;
  char v59;
  int v60;
  int v61;
  int8x8_t v62;
  int v63;
  __int16 v64;
  int v65;
  uint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  int8x8_t *v69;
  char *v70;
  float (*v71)(__int128 *, float);
  uint64_t i;
  int v78;
  int v79;
  int32x4_t v80;
  int32x4_t v81;
  float v82;
  float v83;
  int IntegerCodePointForString;
  int v85;
  float32x4_t v86;
  int v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  int v95;
  float v96;
  float v97;
  float v98;
  uint64_t v99;
  char v100;
  char v101;
  char v102;
  char v103;
  _QWORD *v104;
  const CGColorConversionInfo *v105;
  unsigned int v106;
  int32x4_t v107;
  const __CFString *v108;
  const __CFString *v109;
  _QWORD v110[4];
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  char v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  char v138;
  CFTypeRef cf;
  CGColorSpaceRef v140;
  uint64_t v141;
  char *v142;
  char *v143;
  char *v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  uint64_t v169;

  v169 = *MEMORY[0x1E0C80C00];
  v18 = (const void **)MEMORY[0x1E0CA8EE8];
  if (theDict)
    Value = (const __CFString *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CA8EE8]);
  else
    Value = 0;
  if (a4)
    v109 = (const __CFString *)CFDictionaryGetValue(a4, *v18);
  else
    v109 = 0;
  v108 = Value;
  v20 = 0;
  v141 = 0;
  v140 = 0;
  cf = 0;
  v167 = 0u;
  v168 = 0u;
  v165 = 0u;
  v166 = 0u;
  v163 = 0u;
  v164 = 0u;
  v161 = 0u;
  v162 = 0u;
  v159 = 0u;
  v160 = 0u;
  v157 = 0u;
  v158 = 0u;
  v155 = 0u;
  v156 = 0u;
  v153 = 0u;
  v154 = 0u;
  v151 = 0u;
  v152 = 0u;
  v149 = 0u;
  v150 = 0u;
  v147 = 0u;
  v148 = 0u;
  v145 = 0u;
  v146 = 0u;
  v143 = 0;
  v142 = 0;
  v144 = 0;
  v135 = 0;
  v136 = &v135;
  v137 = 0x2000000000;
  v138 = 0;
  v131 = 0;
  v132 = &v131;
  v133 = 0x2000000000;
  v134 = 0;
  v127 = 0;
  v128 = &v127;
  v129 = 0x2000000000;
  v130 = 0;
  v123 = 0;
  v124 = &v123;
  v125 = 0x2000000000;
  v126 = 0;
  v119 = 0;
  v120 = &v119;
  v121 = 0x2000000000;
  v122 = 0;
  v115 = 0;
  v116 = &v115;
  v117 = 0x2000000000;
  v118 = 0;
  v111 = 0;
  v112 = &v111;
  v113 = 0x2000000000;
  v114 = 0;
  v110[0] = 0;
  v110[1] = v110;
  v110[2] = 0x2000000000;
  v110[3] = 0;
  do
  {
    v21 = (char *)&v145 + v20;
    *(_QWORD *)v21 = 0;
    *(_OWORD *)(v21 + 8) = xmmword_1928E1650;
    *((_DWORD *)v21 + 6) = 1065353216;
    *(_OWORD *)(v21 + 28) = 0uLL;
    *(_OWORD *)(v21 + 44) = 0uLL;
    *(_OWORD *)(v21 + 60) = 0uLL;
    *(_OWORD *)(v21 + 76) = 0uLL;
    *(_OWORD *)(v21 + 92) = 0uLL;
    v20 += 128;
    *(_OWORD *)(v21 + 108) = 0uLL;
  }
  while (v20 != 384);
  if ((getVectorCapabilities_didCheck & 1) == 0)
    getVectorCapabilities_didCheck = 1;
  if (a8)
  {
    v22 = (char *)malloc_type_calloc(1uLL, 0x180A4uLL, 0xDA67D0BBuLL);
    v23 = v22;
    if (!v22)
    {
      v27 = FigSignalErrorAt();
      goto LABEL_301;
    }
    v142 = v22 + 164;
    v143 = v22 + 16548;
    v144 = v22 + 32932;
    if (a7)
      MaxLogicalCoreCount = 1;
    else
      MaxLogicalCoreCount = FigThreadGetMaxLogicalCoreCount();
    v23[162] = MaxLogicalCoreCount;
  }
  else
  {
    v23 = 0;
  }
  v25 = 0;
  v26 = 0;
  if (!theDict || !a4)
    goto LABEL_25;
  v27 = VTCreateColorSpacesFromDictionaries(theDict, a4, &v140, &cf);
  if (!(_DWORD)v27)
  {
    v28 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    if (a5)
      MutableCopy = CFDictionaryCreateMutableCopy(v28, 0, a5);
    else
      MutableCopy = CFDictionaryCreateMutable(v28, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v25 = MutableCopy;
    CFDictionarySetValue(MutableCopy, CFSTR("kCGUseLegacyHDREcosystem"), (const void *)*MEMORY[0x1E0C9AE50]);
    v30 = (const void *)*MEMORY[0x1E0C9AE40];
    CFDictionarySetValue(v25, CFSTR("kCGPQEETF3DLut"), (const void *)*MEMORY[0x1E0C9AE40]);
    CFDictionarySetValue(v25, CFSTR("kCGHLGSceneMapping3DLut"), v30);
    v26 = CGColorConversionInfoCreateFromList(v25, v140, kCGColorConversionTransformFromSpace, kCGRenderingIntentDefault, cf, 1, 0, 0);
    CGColorConversionInfoIterateFunctionsWithCallbacks();
LABEL_25:
    if (*((_BYTE *)v116 + 24) || *((_BYTE *)v120 + 24))
    {
      v31 = 4294954396;
      goto LABEL_28;
    }
    v33 = v128;
    v34 = *((unsigned __int8 *)v128 + 24);
    v105 = v26;
    if (v23 && !*((_BYTE *)v128 + 24))
    {
      *(_OWORD *)(v23 + 72) = xmmword_1928E1660;
      *(_OWORD *)(v23 + 88) = xmmword_1928E1660;
      *((_DWORD *)v23 + 26) = 1065353216;
      v34 = *((unsigned __int8 *)v33 + 24);
    }
    v35 = v136;
    v36 = v124;
    v106 = VTPixelBlitterSetupAssignBlitter(a1, a3, *((unsigned __int8 *)v136 + 24), *((unsigned __int8 *)v132 + 24), v34, *((unsigned __int8 *)v124 + 24), &v141);
    if (!a8)
      goto LABEL_296;
    if (a1 > 1936077875)
    {
      if (a1 <= 1982882103)
      {
        if (a1 <= 1952854575)
        {
          if (a1 <= 1937126451)
          {
            if (a1 != 1936077876)
            {
              if (a1 != 1937125936)
              {
                v39 = 1937125938;
                goto LABEL_74;
              }
LABEL_112:
              v45 = 0;
              v46 = 0;
              v23[124] = 16;
              *((_DWORD *)v23 + 32) = 0xFFFF;
              v47 = -2147479552;
              goto LABEL_113;
            }
            goto LABEL_111;
          }
          if (a1 == 1937126452)
            goto LABEL_112;
          if (a1 == 1949458803)
            goto LABEL_107;
          v48 = 1949589875;
          goto LABEL_106;
        }
        if (a1 > 1953903151)
        {
          if (a1 == 1953903152 || a1 == 1953903154)
            goto LABEL_107;
          v48 = 1953903668;
LABEL_106:
          if (a1 == v48)
          {
LABEL_107:
            v45 = 0;
            v46 = 0;
            v23[124] = 12;
            *((_DWORD *)v23 + 32) = 4095;
            v47 = 134217984;
            goto LABEL_113;
          }
LABEL_132:
          v46 = 0;
          v23[124] = 0;
          *((_DWORD *)v23 + 32) = 0;
          *((_DWORD *)v23 + 35) = 0;
          goto LABEL_122;
        }
        if (a1 == 1952854576 || a1 == 1952854578)
        {
LABEL_102:
          v46 = 0;
          v23[124] = 12;
          *((_DWORD *)v23 + 32) = 4095;
          v50 = 0x8000000;
LABEL_121:
          *((_DWORD *)v23 + 35) = v50;
LABEL_122:
          v51 = 956302336;
          v45 = 1;
          goto LABEL_137;
        }
        v43 = 1952855092;
LABEL_101:
        if (a1 != v43)
          goto LABEL_132;
        goto LABEL_102;
      }
      if (a1 <= 2016686641)
      {
        if (a1 <= 1999843441)
        {
          if (a1 != 1982882104 && a1 != 1983013176)
          {
            v41 = 1983144248;
            goto LABEL_84;
          }
LABEL_85:
          v45 = 0;
          v46 = 0;
          v23[124] = 8;
          *((_DWORD *)v23 + 32) = 255;
          v47 = 8388624;
LABEL_113:
          *((_DWORD *)v23 + 35) = v47;
          v51 = 956302336;
          goto LABEL_137;
        }
        if (a1 != 1999843442)
        {
          if (a1 != 2016567667)
          {
            v44 = 12848;
LABEL_96:
            if (a1 != (v44 | 0x78340000))
              goto LABEL_132;
            goto LABEL_97;
          }
          goto LABEL_97;
        }
        goto LABEL_124;
      }
      if (a1 <= 2019963439)
      {
        if (a1 != 2016686642 && a1 != 2016687156)
        {
          v44 = 24947;
          goto LABEL_96;
        }
LABEL_97:
        v45 = 0;
        v46 = 0;
        v23[124] = 10;
        *((_DWORD *)v23 + 32) = 1023;
        v47 = 33554496;
        goto LABEL_113;
      }
      if (a1 != 2019963440 && a1 != 2019963442 && a1 != 2019963956)
        goto LABEL_132;
LABEL_117:
      v46 = 0;
      v23[124] = 10;
      *((_DWORD *)v23 + 32) = 1023;
      v50 = 0x2000000;
      goto LABEL_121;
    }
    if (a1 > 1278226741)
    {
      if (a1 > 1815162993)
      {
        if (a1 > 1932812658)
        {
          if (a1 == 1932812659)
            goto LABEL_112;
          if (a1 != 1936077360 && a1 != 1936077362)
            goto LABEL_132;
          goto LABEL_111;
        }
        if (a1 == 1815162994)
        {
          *((_WORD *)v23 + 70) = 0;
          v23[124] = 10;
          v52 = 1023;
LABEL_134:
          *((_DWORD *)v23 + 32) = v52;
          goto LABEL_135;
        }
        if (a1 != 1815491698)
        {
          v39 = 1932681587;
LABEL_74:
          if (a1 != v39)
            goto LABEL_132;
          goto LABEL_112;
        }
      }
      else
      {
        if (a1 <= 1380411456)
        {
          if (a1 != 1278226742)
          {
            if (a1 == 1380401729)
            {
              v23[124] = 8;
              v40 = 255;
            }
            else
            {
              if (a1 != 1380410945)
                goto LABEL_132;
              v23[124] = 32;
              v40 = -1;
            }
            goto LABEL_127;
          }
LABEL_111:
          v46 = 0;
          v23[124] = 16;
          *((_DWORD *)v23 + 32) = 0xFFFF;
          v50 = 0x80000000;
          goto LABEL_121;
        }
        if (a1 != 1380411457)
        {
          if (a1 == 1647534392)
          {
LABEL_124:
            v23[124] = 10;
            if (*((_BYTE *)v35 + 24))
            {
              *((_WORD *)v23 + 70) = 0;
              *((_DWORD *)v23 + 32) = 1023;
              v51 = 0x3F40603039802411;
LABEL_136:
              v45 = 1;
              v46 = 1;
LABEL_137:
              v104 = a8;
              v101 = v45;
              v103 = v46;
              if (a3 > 1936077875)
              {
                if (a3 > 1983000885)
                {
                  if (a3 <= 2016687155)
                  {
                    if (a3 > 1999843441)
                    {
                      if (a3 > 2016686639)
                      {
                        if (a3 == 2016686640)
                        {
LABEL_221:
                          v100 = 0;
                          v102 = 0;
                          v23[132] = 10;
                          *((_DWORD *)v23 + 34) = 1023;
                          *((_QWORD *)v23 + 18) = 0x4003AC02000040;
                          *((_WORD *)v23 + 76) = 960;
                          v62 = (int8x8_t)1149222912;
                          goto LABEL_251;
                        }
                        v53 = 2016686642;
                        goto LABEL_220;
                      }
                      if (a3 != 1999843442)
                      {
                        v53 = 2016567667;
LABEL_220:
                        if (a3 == v53)
                          goto LABEL_221;
                        goto LABEL_249;
                      }
                      goto LABEL_211;
                    }
                    if (a3 != 1983000886)
                    {
                      if (a3 != 1983013176)
                      {
                        v58 = 1983144248;
                        goto LABEL_235;
                      }
LABEL_236:
                      v100 = 0;
                      v102 = 0;
                      v23[132] = 8;
                      *((_DWORD *)v23 + 34) = 255;
                      *((_QWORD *)v23 + 18) = 0x1000EB00800010;
                      *((_WORD *)v23 + 76) = 240;
                      v62 = (int8x8_t)1132396544;
                      goto LABEL_251;
                    }
LABEL_207:
                    v100 = 0;
                    v102 = 0;
                    v23[132] = 16;
                    *((_DWORD *)v23 + 34) = 0xFFFF;
                    *((_QWORD *)v23 + 18) = 0x1000EB0080001000;
                    *((_WORD *)v23 + 76) = -4096;
                    v62 = (int8x8_t)1199570688;
                    goto LABEL_251;
                  }
                  if (a3 <= 2019963441)
                  {
                    if (a3 == 2016687156 || a3 == 2016698739)
                      goto LABEL_221;
                    v57 = 12848;
LABEL_195:
                    if (a3 != (v57 | 0x78660000))
                      goto LABEL_249;
                    goto LABEL_226;
                  }
                  if (a3 <= 2037741157)
                  {
                    if (a3 != 2019963442)
                    {
                      v57 = 13364;
                      goto LABEL_195;
                    }
LABEL_226:
                    v102 = 0;
                    v23[132] = 10;
                    *((_DWORD *)v23 + 34) = 1023;
                    *((_QWORD *)v23 + 18) = 0x3FF02000000;
                    *((_WORD *)v23 + 76) = 1023;
                    v62 = (int8x8_t)1149222912;
                    goto LABEL_238;
                  }
                  if (a3 != 2037741158)
                  {
                    v58 = 2037741171;
LABEL_235:
                    if (a3 == v58)
                      goto LABEL_236;
LABEL_249:
                    v100 = 0;
                    v102 = 0;
                    v23[132] = 0;
                    *((_DWORD *)v23 + 34) = 0;
                    *((_QWORD *)v23 + 18) = 0;
                    *((_WORD *)v23 + 76) = 0;
                    goto LABEL_250;
                  }
LABEL_237:
                  v102 = 0;
                  v23[132] = 8;
                  *((_DWORD *)v23 + 34) = 255;
                  *((_QWORD *)v23 + 18) = 0xFF00800000;
                  *((_WORD *)v23 + 76) = 255;
                  v62 = (int8x8_t)1132396544;
                  goto LABEL_238;
                }
                if (a3 > 1952854575)
                {
                  if (a3 > 1953903151)
                  {
                    if (a3 <= 1953903667)
                    {
                      if (a3 == 1953903152)
                        goto LABEL_229;
                      v55 = 1953903154;
                      goto LABEL_205;
                    }
                    if (a3 != 1953903668)
                    {
                      v58 = 1982882104;
                      goto LABEL_235;
                    }
                    goto LABEL_229;
                  }
                  if (a3 == 1952854576 || a3 == 1952854578)
                  {
LABEL_225:
                    v102 = 0;
                    v23[132] = 12;
                    *((_DWORD *)v23 + 34) = 4095;
                    *((_QWORD *)v23 + 18) = 0xFFF08000000;
                    *((_WORD *)v23 + 76) = 4095;
                    v62 = (int8x8_t)1166012416;
LABEL_238:
                    v100 = 1;
                    goto LABEL_251;
                  }
                  v60 = 1952855092;
LABEL_224:
                  if (a3 != v60)
                    goto LABEL_249;
                  goto LABEL_225;
                }
                if (a3 > 1937126451)
                {
                  if (a3 == 1937126452)
                    goto LABEL_207;
                  if (a3 != 1949458803)
                  {
                    v55 = 1949589875;
LABEL_205:
                    if (a3 != v55)
                      goto LABEL_249;
                  }
LABEL_229:
                  v100 = 0;
                  v102 = 0;
                  v23[132] = 12;
                  *((_DWORD *)v23 + 34) = 4095;
                  *((_QWORD *)v23 + 18) = 0x1000EB008000100;
                  *((_WORD *)v23 + 76) = 3840;
                  v62 = (int8x8_t)1166012416;
                  goto LABEL_251;
                }
                if (a3 != 1936077876)
                {
                  if (a3 == 1937125936)
                    goto LABEL_207;
                  v56 = 1937125938;
LABEL_172:
                  if (a3 != v56)
                    goto LABEL_249;
                  goto LABEL_207;
                }
                goto LABEL_232;
              }
              if (a3 <= 1278226741)
              {
                if (a3 <= 875704949)
                {
                  if (a3 > 875704421)
                  {
                    if (a3 == 875704422)
                      goto LABEL_237;
                    if (a3 == 875704438)
                      goto LABEL_236;
                    v54 = 875704934;
LABEL_200:
                    if (a3 != v54)
                      goto LABEL_249;
                    goto LABEL_237;
                  }
                  if (a3 != 32)
                  {
                    if (a3 != 846624102)
                    {
                      v58 = 846624121;
                      goto LABEL_235;
                    }
                    goto LABEL_237;
                  }
                  v100 = 0;
                  v23[132] = 8;
                  *((_DWORD *)v23 + 34) = 255;
                  v65 = 197121;
                }
                else
                {
                  if (a3 <= 1111970368)
                  {
                    if (a3 == 875704950)
                      goto LABEL_236;
                    if (a3 != 875836518)
                    {
                      v58 = 875836534;
                      goto LABEL_235;
                    }
                    goto LABEL_237;
                  }
                  if (a3 > 1278226735)
                  {
                    if (a3 == 1278226736)
                      goto LABEL_226;
                    v60 = 1278226738;
                    goto LABEL_224;
                  }
                  if (a3 != 1111970369)
                  {
                    v54 = 1278226488;
                    goto LABEL_200;
                  }
                  v100 = 0;
                  v23[132] = 8;
                  *((_DWORD *)v23 + 34) = 255;
                  v65 = 50331906;
                }
                goto LABEL_242;
              }
              if (a3 > 1647719520)
              {
                if (a3 > 1932681586)
                {
                  if (a3 <= 1936077359)
                  {
                    if (a3 == 1932681587)
                      goto LABEL_207;
                    v56 = 1932812659;
                    goto LABEL_172;
                  }
                  if (a3 != 1936077360 && a3 != 1936077362)
                    goto LABEL_249;
LABEL_232:
                  v102 = 0;
                  v23[132] = 16;
                  *((_DWORD *)v23 + 34) = 0xFFFF;
                  *((_QWORD *)v23 + 18) = 0xFFFF80000000;
                  *((_WORD *)v23 + 76) = -1;
                  v62 = (int8x8_t)1199570688;
                  goto LABEL_238;
                }
                switch(a3)
                {
                  case 1647719521:
                    v100 = 0;
                    v23[132] = 16;
                    *((_DWORD *)v23 + 34) = 0xFFFF;
                    v61 = 197121;
                    break;
                  case 1815162994:
                    v100 = 0;
                    *((_WORD *)v23 + 72) = 0;
                    v23[132] = 10;
                    *((_DWORD *)v23 + 34) = 1023;
                    v62 = (int8x8_t)1149222912;
                    goto LABEL_246;
                  case 1815491698:
                    v100 = 0;
                    v23[132] = 16;
                    *((_DWORD *)v23 + 34) = 0xFFFF;
                    v61 = 50462976;
                    break;
                  default:
                    goto LABEL_249;
                }
                *(_DWORD *)(v23 + 158) = v61;
                v62 = (int8x8_t)1199570688;
LABEL_246:
                v102 = 1;
                goto LABEL_251;
              }
              if (a3 > 1380411456)
              {
                if (a3 != 1380411457)
                {
                  if (a3 != 1630697081)
                  {
                    if (a3 == 1647534392)
                    {
LABEL_211:
                      v37.i32[0] = 0;
                      v100 = 0;
                      v38.i32[0] = *((unsigned __int8 *)v36 + 24);
                      v62 = vbsl_s8(vdup_lane_s8(vceq_s8(v38, v37), 0), (int8x8_t)1149222912, (int8x8_t)0x43C0000043FF8000);
                      if (*((_BYTE *)v36 + 24))
                        v63 = 1023;
                      else
                        v63 = 511;
                      if (*((_BYTE *)v36 + 24))
                        v64 = 0;
                      else
                        v64 = 384;
                      *((_WORD *)v23 + 72) = v64;
                      *((_DWORD *)v23 + 34) = v63;
                      v23[132] = 10;
                      goto LABEL_246;
                    }
                    goto LABEL_249;
                  }
                  goto LABEL_236;
                }
                v100 = 0;
                v59 = 16;
              }
              else
              {
                if (a3 == 1278226742)
                  goto LABEL_232;
                if (a3 == 1380401729)
                {
                  v100 = 0;
                  v23[132] = 8;
                  *((_DWORD *)v23 + 34) = 255;
                  v65 = 50462976;
LABEL_242:
                  *(_DWORD *)(v23 + 158) = v65;
                  v62 = (int8x8_t)1132396544;
                  goto LABEL_246;
                }
                if (a3 != 1380410945)
                  goto LABEL_249;
                v100 = 0;
                v59 = 32;
              }
              v23[132] = v59;
              v102 = 1;
              *((_DWORD *)v23 + 34) = 1;
              *(_DWORD *)(v23 + 158) = 50462976;
LABEL_250:
              v62 = (int8x8_t)1065353216;
LABEL_251:
              v66 = v112;
              LODWORD(v67) = *((unsigned __int8 *)v112 + 24);
              if (*((_BYTE *)v112 + 24))
              {
                v68 = 0;
                do
                {
                  if (v68 == (_DWORD)v67 - 1)
                  {
                    v69 = (int8x8_t *)(&v145 + 8 * v68);
                    v69[1].i32[0] = 956302336;
                    v69[2] = v62;
                  }
                  else if ((_DWORD)v68)
                  {
                    if ((_DWORD)v68 == 1)
                    {
                      *((_QWORD *)&v153 + 1) = 956302336;
                      LODWORD(v154) = 1065353216;
                    }
                  }
                  else
                  {
                    *((_QWORD *)&v145 + 1) = v51;
                    LODWORD(v146) = 1174403072;
                  }
                  v70 = (&v142)[v68];
                  v71 = (float (*)(__int128 *, float))*((_QWORD *)&v145 + 16 * v68);
                  if (v71)
                  {
                    for (i = 0; i != 0x2000; ++i)
                    {
                      _S0 = v71(&v145 + 8 * v68, (float)(int)i);
                      __asm { FCVT            H0, S0 }
                      *(_WORD *)&v70[2 * i] = LOWORD(_S0);
                    }
                    v66 = v112;
                  }
                  else
                  {
                    bzero((&v142)[v68], 0x4000uLL);
                  }
                  ++v68;
                  v67 = *((unsigned __int8 *)v66 + 24);
                }
                while (v68 < v67);
              }
              if ((v103 & 1) == 0)
              {
                v78 = v23[124];
                v79 = FigCFEqual();
                v81.i64[0] = 0xBEB032983FB374BCLL;
                v82 = 1.772;
                v83 = -0.71414;
                if (!v79)
                {
                  v107 = v81;
                  IntegerCodePointForString = CVYCbCrMatrixGetIntegerCodePointForString(v108);
                  v81 = v107;
                  if (IntegerCodePointForString != 5)
                  {
                    if (FigCFEqual())
                    {
                      v81.i64[0] = 0xBE2880953FBCBFB1;
                      v82 = 1.8814;
                      v83 = -0.57135;
                    }
                    else
                    {
                      if (!FigCFEqual())
                        goto LABEL_299;
                      v81.i64[0] = 0xBE3FD1DD3FC9930CLL;
                      v82 = 1.8556;
                      v83 = -0.46812;
                    }
                  }
                }
                v106 = 0;
                v80.i32[1] = 0;
                *(_QWORD *)v23 = 1065353216;
                *((_DWORD *)v23 + 2) = v81.i32[0];
                *((_DWORD *)v23 + 3) = 1065353216;
                *((_DWORD *)v23 + 4) = v81.i32[1];
                *((float *)v23 + 5) = v83;
                *((_DWORD *)v23 + 6) = 1065353216;
                *((float *)v23 + 7) = v82;
                *((_DWORD *)v23 + 8) = 0;
                if ((v101 & 1) == 0)
                {
                  v106 = 0;
                  if (v78 >= 16)
                    v85 = 16;
                  else
                    v85 = v78;
                  if (v85 <= 8)
                    v85 = 8;
                  *(float *)v80.i32 = (float)~(-1 << v85);
                  *(float32x2_t *)v80.i8 = vdiv_f32(vcvt_f32_s32(vadd_s32((int32x2_t)vshl_u32((uint32x2_t)0xDB000000E0, (uint32x2_t)vdup_n_s32(v85 - 8)), (int32x2_t)-1)), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v80.i8, 0));
                  v86 = vdivq_f32((float32x4_t)vtrn1q_s32((int32x4_t)xmmword_1928E1670, vzip1q_s32(v81, v80)), (float32x4_t)vzip1q_s32(v80, vdupq_lane_s32(*(int32x2_t *)v80.i8, 0)));
                  *(_DWORD *)v23 = v86.i32[2];
                  *((_DWORD *)v23 + 6) = v86.i32[2];
                  *(float32x4_t *)(v23 + 4) = v86;
                  *((float *)v23 + 5) = v83 / *(float *)v80.i32;
                  *((float *)v23 + 7) = v82 / *(float *)v80.i32;
                  *((_DWORD *)v23 + 8) = v86.i32[0];
                }
              }
              if ((v102 & 1) != 0)
              {
LABEL_294:
                v99 = v141;
                if (v141)
                {
                  *v104 = v23;
                  *a9 = v99;
                  *a11 = VTPixelBlitterColorHandlingOptimized_cleanup;
                  v23 = 0;
LABEL_296:
                  v26 = v105;
                  v31 = v106;
                  goto LABEL_28;
                }
                v31 = 4294954396;
                goto LABEL_298;
              }
              v87 = v23[132];
              v88 = -0.081312;
              v89 = -0.41869;
              v90 = -0.33126;
              v91 = -0.16874;
              v92 = 0.114;
              v93 = 0.587;
              v94 = 0.299;
              if (FigCFEqual() || CVYCbCrMatrixGetIntegerCodePointForString(v109) == 5)
              {
LABEL_286:
                *((float *)v23 + 9) = v94;
                *((float *)v23 + 10) = v93;
                *((float *)v23 + 11) = v92;
                *((float *)v23 + 12) = v91;
                *((float *)v23 + 13) = v90;
                *((_QWORD *)v23 + 7) = 0x3F0000003F000000;
                *((float *)v23 + 16) = v89;
                *((float *)v23 + 17) = v88;
                if ((v100 & 1) != 0)
                {
                  v106 = 0;
                }
                else
                {
                  v106 = 0;
                  if (v87 >= 16)
                    v95 = 16;
                  else
                    v95 = v87;
                  if (v95 <= 8)
                    LOBYTE(v95) = 8;
                  v96 = (float)~(-1 << v95);
                  v97 = (float)((219 << (v95 - 8)) - 1) / v96;
                  v98 = (float)((224 << (v95 - 8)) - 1) / v96;
                  *((float *)v23 + 9) = v97 * v94;
                  *((float *)v23 + 10) = v97 * v93;
                  *((float *)v23 + 15) = v98 * 0.5;
                  *((float *)v23 + 16) = v98 * v89;
                  *((float *)v23 + 11) = v97 * v92;
                  *((float *)v23 + 12) = v98 * v91;
                  *((float *)v23 + 13) = v98 * v90;
                  *((float *)v23 + 14) = v98 * 0.5;
                  *((float *)v23 + 17) = v98 * v88;
                }
                goto LABEL_294;
              }
              if (FigCFEqual())
              {
                v88 = -0.040215;
                v89 = -0.45979;
                v90 = -0.36037;
                v91 = -0.13963;
                v92 = 0.059302;
                v93 = 0.678;
                v94 = 0.2627;
                goto LABEL_286;
              }
              if (FigCFEqual())
              {
                v88 = -0.045847;
                v89 = -0.45415;
                v90 = -0.38543;
                v91 = -0.11457;
                v92 = 0.0722;
                v93 = 0.7152;
                v94 = 0.2126;
                goto LABEL_286;
              }
LABEL_299:
              v31 = 4294954391;
LABEL_298:
              v26 = v105;
              goto LABEL_28;
            }
            *((_WORD *)v23 + 70) = 384;
            v52 = 511;
            goto LABEL_134;
          }
          if (a1 != 1647719521)
            goto LABEL_132;
          v23[124] = 16;
          v49 = 0xFFFF;
          goto LABEL_130;
        }
      }
      v23[124] = 16;
      v40 = 0xFFFF;
LABEL_127:
      *((_DWORD *)v23 + 32) = v40;
      v42 = 50462976;
LABEL_131:
      *(_DWORD *)(v23 + 154) = v42;
LABEL_135:
      v51 = 956302336;
      goto LABEL_136;
    }
    if (a1 <= 875836517)
    {
      if (a1 <= 875704437)
      {
        if (a1 == 32)
        {
          v23[124] = 8;
          v49 = 255;
LABEL_130:
          *((_DWORD *)v23 + 32) = v49;
          v42 = 197121;
          goto LABEL_131;
        }
        if (a1 != 875704422)
          goto LABEL_132;
      }
      else
      {
        if (a1 == 875704438)
          goto LABEL_85;
        if (a1 != 875704934)
        {
          v41 = 875704950;
LABEL_84:
          if (a1 != v41)
            goto LABEL_132;
          goto LABEL_85;
        }
      }
    }
    else if (a1 > 1278226487)
    {
      if (a1 != 1278226488)
      {
        if (a1 != 1278226736)
        {
          v43 = 1278226738;
          goto LABEL_101;
        }
        goto LABEL_117;
      }
    }
    else if (a1 != 875836518)
    {
      if (a1 == 875836534)
        goto LABEL_85;
      if (a1 != 1111970369)
        goto LABEL_132;
      v23[124] = 8;
      *((_DWORD *)v23 + 32) = 255;
      v42 = 50331906;
      goto LABEL_131;
    }
    v46 = 0;
    v23[124] = 8;
    *((_DWORD *)v23 + 32) = 255;
    v50 = 0x800000;
    goto LABEL_121;
  }
LABEL_301:
  v31 = v27;
  v25 = 0;
  v26 = 0;
LABEL_28:
  free(v23);
  if (v140)
    CFRelease(v140);
  if (cf)
    CFRelease(cf);
  if (v26)
    CFRelease(v26);
  if (v25)
    CFRelease(v25);
  _Block_object_dispose(v110, 8);
  _Block_object_dispose(&v111, 8);
  _Block_object_dispose(&v115, 8);
  _Block_object_dispose(&v119, 8);
  _Block_object_dispose(&v123, 8);
  _Block_object_dispose(&v127, 8);
  _Block_object_dispose(&v131, 8);
  _Block_object_dispose(&v135, 8);
  return v31;
}

float vtptsPixelOpTrcType0(float *a1, int8x16_t a2, int8x16_t a3)
{
  int8x16_t v4;
  float v5;
  float v7;

  *(float *)a2.i32 = -(float)(a1[3] - (float)(*(float *)a2.i32 * a1[2]));
  a3.i32[0] = 1.0;
  v4.i64[0] = 0x8000000080000000;
  v4.i64[1] = 0x8000000080000000;
  v7 = *(float *)vbslq_s8(v4, a3, a2).i32;
  v5 = pow(fabsf(*(float *)a2.i32), a1[6]);
  return a1[5] + (float)((float)(v7 * v5) * a1[4]);
}

float vtptsPixelOpTrcType1(float *a1, float a2, int8x16_t a3, double a4, int8x16_t a5)
{
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  long double v11;
  int8x16_t v12;
  int8x16_t v14;

  v5 = a1[4];
  v6 = a1[5];
  v8 = a1[7];
  v7 = a1[8];
  *(float *)a5.i32 = -(float)(a1[3] - (float)(a2 * a1[2]));
  v9 = fabsf(*(float *)a5.i32);
  if (v9 >= (float)(v7 / v8))
  {
    v14 = a5;
    v11 = pow((float)(v7 + (float)(v8 * v9)), a1[6]);
    a5 = v14;
    a3.i32[1] = 0;
    v10 = v11 + 0.0;
  }
  else
  {
    v10 = (float)(v9 * 0.0) + 0.0;
  }
  a3.i32[0] = 1.0;
  v12.i64[0] = 0x8000000080000000;
  v12.i64[1] = 0x8000000080000000;
  return v6 + (float)((float)(*(float *)vbslq_s8(v12, a3, a5).i32 * v10) * v5);
}

float vtptsPixelOpTrcType2(float *a1, float a2, int8x16_t a3, double a4, int8x16_t a5)
{
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  long double v11;
  int8x16_t v12;
  int8x16_t v14;

  v5 = a1[4];
  v6 = a1[5];
  v8 = a1[7];
  v7 = a1[8];
  *(float *)a5.i32 = -(float)(a1[3] - (float)(a2 * a1[2]));
  v9 = fabsf(*(float *)a5.i32);
  if (v9 >= (float)(v7 / v8))
  {
    v14 = a5;
    v11 = pow((float)(v7 + (float)(v8 * v9)), a1[6]);
    a5 = v14;
    a3.i32[1] = 0;
    v10 = v11 + 0.0;
  }
  else
  {
    v10 = -(float)(a1[9] - (float)(v9 * 0.0));
  }
  a3.i32[0] = 1.0;
  v12.i64[0] = 0x8000000080000000;
  v12.i64[1] = 0x8000000080000000;
  return v6 + (float)((float)(*(float *)vbslq_s8(v12, a3, a5).i32 * v10) * v5);
}

float vtptsPixelOpTrcType3(float *a1, float a2, int8x16_t a3, double a4, double a5, int8x16_t a6)
{
  float v6;
  float v7;
  float v8;
  float v9;
  long double v10;
  int8x16_t v11;
  int8x16_t v13;

  v6 = a1[4];
  v7 = a1[5];
  *(float *)a6.i32 = -(float)(a1[3] - (float)(a2 * a1[2]));
  v8 = fabsf(*(float *)a6.i32);
  if (v8 >= a1[10])
  {
    v13 = a6;
    v10 = pow((float)(a1[8] + (float)(a1[7] * v8)), a1[6]);
    a6 = v13;
    a3.i32[1] = 0;
    v9 = v10 + 0.0;
  }
  else
  {
    v9 = (float)(a1[9] * v8) + 0.0;
  }
  a3.i32[0] = 1.0;
  v11.i64[0] = 0x8000000080000000;
  v11.i64[1] = 0x8000000080000000;
  return v7 + (float)((float)(*(float *)vbslq_s8(v11, a3, a6).i32 * v9) * v6);
}

float vtptsPixelOpTrcType4(float *a1, float a2, int8x16_t a3, double a4, int8x16_t a5)
{
  float v6;
  float v7;
  long double v8;
  int8x16_t v9;
  int8x16_t v11;

  *(float *)a5.i32 = -(float)(a1[3] - (float)(a2 * a1[2]));
  v6 = fabsf(*(float *)a5.i32);
  if (v6 >= a1[10])
  {
    v11 = a5;
    v8 = pow((float)(a1[8] + (float)(a1[7] * v6)), a1[6]);
    a5 = v11;
    *(double *)a3.i64 = a1[11];
    v7 = v8 + *(double *)a3.i64;
  }
  else
  {
    v7 = a1[12] + (float)(a1[9] * v6);
  }
  a3.i32[0] = 1.0;
  v9.i64[0] = 0x8000000080000000;
  v9.i64[1] = 0x8000000080000000;
  return a1[5] + (float)((float)(*(float *)vbslq_s8(v9, a3, a5).i32 * v7) * a1[4]);
}

float vtptsPixelOpPQEOTF(float *a1, int8x16_t a2)
{
  float v3;
  int8x16_t v4;
  int8x16_t v5;
  int8x16_t v7;

  *(float *)a2.i32 = -(float)(a1[3] - (float)(*(float *)a2.i32 * a1[2]));
  v7 = a2;
  v3 = powf(fabsf(*(float *)a2.i32), a1[7]);
  v4.i32[0] = 1.0;
  v5.i64[0] = 0x8000000080000000;
  v5.i64[1] = 0x8000000080000000;
  return a1[5]
       + (float)((float)(*(float *)vbslq_s8(v5, v4, v7).i32
                       * powf(fmaxf(v3 - a1[9], 0.0) / (float)(a1[10] - (float)(a1[11] * v3)), a1[8]))
               * a1[4]);
}

float vtptsPixelOpPQInvEOTF(float *a1, int8x16_t a2, int8x16_t a3)
{
  int8x16_t v4;
  float v5;
  float v6;
  float v8;

  *(float *)a2.i32 = -(float)(a1[3] - (float)(*(float *)a2.i32 * a1[2]));
  a3.i32[0] = 1.0;
  v4.i64[0] = 0x8000000080000000;
  v4.i64[1] = 0x8000000080000000;
  v8 = *(float *)vbslq_s8(v4, a3, a2).i32;
  v5 = powf(a1[12] * fabsf(*(float *)a2.i32), a1[7]);
  v6 = (float)(a1[9] + (float)(a1[10] * v5)) / ((float)(v5 * a1[11]) + 1.0);
  return a1[5] + (float)((float)(v8 * powf(v6, a1[8])) * a1[4]);
}

float vtptsPixelOpHLGInvOETF(float *a1, float a2)
{
  float v3;
  float v4;

  v3 = (float)(a1[2] * a2) - a1[3];
  if (v3 >= 0.5)
    v4 = (exp((float)((float)(v3 + -0.55991) / 0.17883)) + 0.284668922) * 0.0833333358;
  else
    v4 = (float)(v3 * v3) * 0.33333;
  return a1[5] + (float)(v4 * a1[4]);
}

float vtptsPixelOpHLGOETF(float *a1, float a2, int8x16_t a3, double a4, int8x16_t a5)
{
  float v6;
  double v7;
  long double v8;
  double v9;
  float v10;
  int8x16_t v11;
  int8x16_t v13;

  *(float *)a5.i32 = -(float)(a1[3] - (float)(a2 * a1[2]));
  v6 = a1[11] * fabsf(*(float *)a5.i32);
  if (v6 <= a1[10])
  {
    a3.i64[0] = 3.0;
    v9 = sqrt(v6 * 3.0);
  }
  else
  {
    v7 = a1[7];
    v13 = a5;
    v8 = log(-(a1[8] - v6 * 12.0));
    a5 = v13;
    *(double *)a3.i64 = a1[9];
    v9 = *(double *)a3.i64 + v7 * v8;
  }
  v10 = v9;
  a3.i32[0] = 1.0;
  v11.i64[0] = 0x8000000080000000;
  v11.i64[1] = 0x8000000080000000;
  return a1[5] + (float)((float)(*(float *)vbslq_s8(v11, a3, a5).i32 * v10) * a1[4]);
}

float vtptsLumaScalingPow(float *a1, float a2)
{
  float v2;
  float v3;
  float v4;
  double v5;

  v2 = a1[2];
  v3 = a1[3];
  v4 = -(float)(v3 - (float)(a2 * v2));
  if (v4 == 0.0)
    v4 = -(v3 - v2 * 0.5);
  v5 = a1[7];
  return a1[5] + pow(v4, a1[6]) * v5 * a1[4];
}

float vtptsPQToneMappingPow(float *a1, float a2)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v18;
  float v19;

  v3 = -(float)(a1[3] - (float)(a2 * a1[2]));
  v4 = a1[14];
  v6 = a1[15];
  v5 = a1[16];
  v7 = a1[18];
  v8 = a1[19];
  v9 = a1[17];
  v10 = a1[22];
  v19 = a1[21];
  v18 = a1[13];
  v11 = powf(v3 / 8191.0, v18);
  v12 = (float)(powf((float)(v6 + (float)(v5 * v11)) / (float)((float)(v9 * v11) + 1.0), v4) - v8) / (float)(v7 - v8);
  if (v12 >= v10)
  {
    v13 = (float)(v12 - v10) * a1[23];
    v12 = (1.0 - v10) * (float)(v13 - (float)((float)(v13 * (float)(v13 + v13)) - (float)((float)(v13 * v13) * v13)))
        + ((float)-(float)((float)(v13 * (float)(v13 * 3.0)) - (float)((float)(v13 * (float)(v13 + v13)) * v13)) + 1.0)
        * v10
        + (float)(a1[20] * (float)((float)(v13 * (float)(v13 * 3.0)) + (float)((float)(v13 * (float)(v13 * -2.0)) * v13)));
  }
  if (v12 >= 0.0)
  {
    if (v12 >= 1.0)
      v14 = v12;
    else
      v14 = v12
          + (float)((float)((float)(1.0 - v12) * (float)((float)(1.0 - v12) * (float)(v19 * (float)(1.0 - v12))))
                  * (float)(1.0 - v12));
  }
  else
  {
    v14 = v19;
  }
  v15 = 0.0;
  if (v3 != 0.0)
  {
    v16 = powf(v8 + (float)(v14 * (float)(v7 - v8)), 1.0 / v4);
    v15 = (float)((float)(powf(fmaxf(v16 - v6, 0.0) / (float)(v5 - (float)(v9 * v16)), 1.0 / v18) * 10000.0) / v3)
        * 8191.0;
  }
  return a1[5] + (float)(v15 * a1[4]);
}

uint64_t VTPixelBlitterSetupAssignBlitter(int a1, int a2, int a3, int a4, int a5, int a6, _QWORD *a7)
{
  void *v8;
  uint64_t result;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  BOOL v23;
  int v24;
  int v25;
  int v26;
  int v27;
  BOOL v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  BOOL v35;
  int v36;
  int v37;
  int v38;
  BOOL v39;
  int v40;
  BOOL v41;
  int v42;
  BOOL v43;
  int v44;
  BOOL v45;
  int v46;
  BOOL v47;
  int v48;
  BOOL v49;
  int v50;
  BOOL v51;
  int v52;
  BOOL v53;
  int v54;
  int v55;
  int v56;
  int v57;
  BOOL v58;
  int v59;
  BOOL v60;
  int v61;
  BOOL v62;
  int v63;
  BOOL v64;
  int v65;
  BOOL v66;
  int v67;
  BOOL v68;
  int v69;
  BOOL v70;
  int v71;
  BOOL v72;
  int v73;
  BOOL v74;
  int v75;
  BOOL v76;
  int v77;
  BOOL v78;
  int v79;
  BOOL v80;
  int v81;
  BOOL v82;
  int v83;
  BOOL v84;
  int v85;
  BOOL v86;
  int v87;
  BOOL v88;
  int v89;
  BOOL v90;
  int v91;
  BOOL v92;
  int v93;
  BOOL v94;
  int v95;
  BOOL v96;
  int v97;
  BOOL v98;
  int v99;
  BOOL v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  BOOL v106;
  int v107;
  int v108;
  BOOL v109;
  int v110;
  BOOL v111;
  int v112;
  BOOL v113;
  int v114;
  int v115;
  int v116;
  BOOL v117;
  int v118;
  BOOL v119;
  int v120;
  BOOL v121;
  int v122;
  BOOL v123;
  int v124;
  BOOL v125;
  int v126;
  BOOL v127;
  int v128;
  BOOL v129;
  int v130;
  BOOL v131;
  int v132;
  BOOL v133;
  int v134;
  BOOL v135;
  int v136;
  int v137;
  int v138;
  BOOL v139;
  int v140;
  BOOL v141;
  int v142;
  BOOL v143;
  int v144;
  BOOL v145;
  int v146;
  BOOL v147;
  int v148;
  BOOL v149;
  int v150;
  BOOL v151;
  int v152;
  BOOL v153;
  int v154;
  BOOL v155;
  int v156;
  int v157;
  int v158;
  BOOL v159;
  int v160;
  BOOL v161;
  int v162;
  BOOL v163;
  int v164;
  BOOL v165;
  int v166;
  BOOL v167;
  int v168;
  BOOL v169;
  int v170;
  BOOL v171;
  int v172;
  BOOL v173;
  int v174;
  BOOL v175;
  int v176;
  BOOL v177;
  int v178;
  BOOL v179;
  int v180;
  BOOL v181;
  int v182;
  BOOL v183;
  int v184;
  BOOL v185;
  int v186;
  BOOL v187;
  int v188;
  BOOL v189;
  int v190;
  BOOL v191;
  int v192;
  BOOL v193;
  int v194;
  BOOL v195;
  int v196;
  BOOL v197;
  int v198;
  BOOL v199;
  int v200;
  BOOL v201;
  int v202;
  BOOL v203;
  int v204;
  BOOL v205;
  int v206;
  BOOL v207;
  int v208;
  BOOL v209;
  int v210;
  BOOL v211;
  int v212;
  BOOL v213;
  int v214;
  BOOL v215;
  int v216;
  BOOL v217;
  int v218;
  BOOL v219;
  int v220;
  BOOL v221;
  int v222;
  BOOL v223;
  int v224;
  BOOL v225;
  int v226;
  BOOL v227;
  int v228;
  BOOL v229;
  int v230;
  BOOL v231;
  int v232;
  BOOL v233;
  int v234;
  BOOL v235;
  int v236;
  BOOL v237;
  int v238;
  BOOL v239;
  int v240;
  BOOL v241;
  int v242;
  BOOL v243;
  int v244;
  BOOL v245;
  int v246;
  BOOL v247;
  int v248;
  BOOL v249;
  int v250;
  BOOL v251;
  int v252;
  BOOL v253;
  int v254;
  BOOL v255;
  int v256;
  BOOL v257;
  int v258;
  BOOL v259;
  int v260;
  BOOL v261;
  int v262;
  BOOL v263;
  int v264;
  BOOL v265;
  int v266;
  BOOL v267;
  int v268;
  BOOL v269;
  int v270;
  BOOL v271;
  int v272;
  BOOL v273;
  int v274;
  BOOL v275;
  int v276;
  BOOL v277;
  int v278;
  BOOL v279;
  int v280;
  BOOL v281;
  int v282;
  BOOL v283;
  int v284;
  BOOL v285;
  int v286;
  BOOL v287;
  int v288;
  BOOL v289;
  int v290;
  BOOL v291;
  int v292;
  BOOL v293;
  int v294;
  BOOL v295;
  int v296;
  BOOL v297;
  int v298;
  BOOL v299;
  int v300;
  BOOL v301;
  int v302;
  BOOL v303;
  int v304;
  BOOL v305;
  int v306;
  BOOL v307;
  int v308;
  BOOL v309;
  int v310;
  BOOL v311;
  int v312;
  int v313;
  BOOL v314;
  int v315;
  BOOL v316;
  int v317;
  BOOL v318;
  int v319;
  BOOL v320;
  int v321;
  BOOL v322;
  int v323;
  BOOL v324;
  int v325;
  BOOL v326;
  int v327;
  BOOL v328;
  int v329;
  BOOL v330;
  int v331;
  int v332;
  int v333;
  int v334;
  int v335;
  BOOL v336;
  int v337;
  BOOL v338;
  int v339;
  BOOL v340;
  int v341;
  BOOL v342;
  int v343;
  BOOL v344;
  int v345;
  BOOL v346;
  int v347;
  int v348;
  int v349;
  int v350;
  int v351;
  BOOL v352;
  int v353;
  BOOL v354;
  int v355;
  BOOL v356;
  int v357;
  BOOL v358;
  int v359;
  BOOL v360;
  int v361;
  BOOL v362;
  int v363;
  BOOL v364;
  int v365;
  BOOL v366;
  int v367;
  BOOL v368;
  int v369;
  BOOL v370;
  int v371;
  BOOL v372;
  int v373;
  BOOL v374;
  int v375;
  BOOL v376;
  int v377;
  BOOL v378;
  int v379;
  BOOL v380;
  int v381;
  BOOL v382;
  int v383;
  BOOL v384;
  int v385;
  BOOL v386;
  int v387;
  BOOL v388;
  int v389;
  BOOL v390;
  int v391;
  BOOL v392;
  int v393;
  BOOL v394;
  int v395;
  BOOL v396;
  int v397;
  BOOL v398;
  int v399;
  BOOL v400;
  int v401;
  BOOL v402;
  int v403;
  BOOL v404;
  int v405;
  BOOL v406;
  int v407;
  BOOL v408;
  int v409;
  BOOL v410;
  int v411;
  BOOL v412;
  int v413;
  BOOL v414;
  int v415;
  BOOL v416;
  int v417;
  BOOL v418;
  int v419;
  BOOL v420;
  int v421;
  BOOL v422;
  int v423;
  BOOL v424;
  int v425;
  BOOL v426;
  int v427;
  BOOL v428;
  int v429;
  BOOL v430;
  int v431;
  BOOL v432;
  int v433;
  BOOL v434;
  int v435;
  BOOL v436;
  int v437;
  BOOL v438;
  int v439;
  BOOL v440;
  int v441;
  BOOL v442;
  int v443;
  BOOL v444;
  int v445;
  BOOL v446;
  int v447;
  BOOL v448;
  int v449;
  BOOL v450;
  int v451;
  BOOL v452;
  int v453;
  BOOL v454;
  int v455;
  BOOL v456;
  int v457;
  BOOL v458;
  int v459;
  BOOL v460;
  int v461;
  BOOL v462;
  int v463;
  BOOL v464;
  int v465;
  BOOL v466;
  int v467;
  BOOL v468;
  int v469;
  BOOL v470;
  int v471;
  BOOL v472;
  int v473;
  BOOL v474;
  int v475;
  BOOL v476;
  int v477;
  BOOL v478;
  int v479;
  BOOL v480;
  int v481;
  BOOL v482;
  int v483;
  BOOL v484;
  int v485;
  BOOL v486;
  int v487;
  BOOL v488;
  int v489;
  BOOL v490;
  int v491;
  BOOL v492;
  int v493;
  BOOL v494;
  int v495;
  BOOL v496;
  int v497;
  BOOL v498;
  int v499;
  BOOL v500;
  int v501;
  BOOL v502;
  int v503;
  BOOL v504;
  int v505;
  BOOL v506;
  int v507;
  BOOL v508;
  int v509;
  BOOL v510;
  int v511;
  BOOL v512;
  int v513;
  BOOL v514;
  int v515;
  BOOL v516;
  int v517;
  BOOL v518;
  int v519;
  BOOL v520;
  int v521;
  BOOL v522;
  int v523;
  BOOL v524;
  int v525;
  BOOL v526;
  int v527;
  BOOL v528;
  int v529;
  BOOL v530;
  int v531;
  BOOL v532;
  int v533;
  BOOL v534;
  int v535;
  BOOL v536;
  int v537;
  BOOL v538;
  int v539;
  BOOL v540;
  int v541;
  BOOL v542;
  int v543;
  BOOL v544;
  int v545;
  BOOL v546;
  int v547;
  BOOL v548;
  int v549;
  BOOL v550;
  int v551;
  BOOL v552;
  int v553;
  BOOL v554;
  int v555;
  BOOL v556;
  int v557;
  BOOL v558;
  int v559;
  BOOL v560;
  int v561;
  BOOL v562;
  int v563;
  BOOL v564;
  int v565;
  BOOL v566;
  int v567;
  BOOL v568;
  int v569;
  BOOL v570;
  int v571;
  BOOL v572;
  int v573;
  BOOL v574;
  int v575;
  BOOL v576;
  int v577;
  BOOL v578;
  int v579;
  BOOL v580;
  int v581;
  BOOL v582;
  int v583;
  BOOL v584;
  int v585;
  BOOL v586;
  int v587;
  BOOL v588;
  int v589;
  BOOL v590;
  int v591;
  BOOL v592;
  int v593;
  BOOL v594;
  int v595;
  BOOL v596;
  int v597;
  BOOL v598;
  int v599;
  BOOL v600;
  int v601;
  BOOL v602;
  int v603;
  BOOL v604;
  int v605;
  BOOL v606;
  int v607;
  BOOL v608;
  int v609;
  BOOL v610;
  int v611;
  BOOL v612;
  int v613;
  BOOL v614;
  int v615;
  BOOL v616;
  int v617;
  BOOL v618;
  int v619;
  BOOL v620;
  int v621;
  BOOL v622;
  int v623;
  BOOL v624;
  int v625;
  BOOL v626;
  int v627;
  BOOL v628;
  int v629;
  BOOL v630;
  int v631;
  BOOL v632;
  int v633;
  BOOL v634;
  int v635;
  BOOL v636;
  int v637;
  BOOL v638;
  int v639;
  BOOL v640;
  int v641;
  BOOL v642;
  int v643;
  BOOL v644;
  int v645;
  BOOL v646;
  int v647;
  BOOL v648;
  int v649;
  BOOL v650;
  int v651;
  BOOL v652;
  int v653;
  BOOL v654;
  int v655;
  BOOL v656;
  int v657;
  BOOL v658;
  int v659;
  BOOL v660;
  int v661;
  BOOL v662;
  int v663;
  BOOL v664;
  int v665;
  BOOL v666;
  int v667;
  BOOL v668;
  int v669;
  BOOL v670;
  int v671;
  BOOL v672;
  int v673;
  BOOL v674;
  int v675;
  BOOL v676;
  int v677;
  BOOL v678;
  int v679;
  BOOL v680;
  int v681;
  BOOL v682;
  int v683;
  BOOL v684;
  int v685;
  BOOL v686;
  int v687;
  BOOL v688;
  int v689;
  BOOL v690;
  int v691;
  BOOL v692;
  int v693;
  BOOL v694;
  int v695;
  BOOL v696;
  int v697;
  BOOL v698;
  int v699;
  BOOL v700;
  int v701;
  BOOL v702;
  int v703;
  BOOL v704;
  int v705;
  BOOL v706;
  int v707;
  BOOL v708;
  int v709;
  BOOL v710;
  int v711;
  BOOL v712;
  int v713;
  BOOL v714;
  int v715;
  BOOL v716;
  int v717;
  BOOL v718;
  int v719;
  BOOL v720;
  int v721;
  BOOL v722;
  int v723;
  BOOL v724;
  int v725;
  BOOL v726;
  int v727;
  BOOL v728;
  int v729;
  BOOL v730;
  int v731;
  BOOL v732;
  int v733;
  BOOL v734;
  int v735;
  BOOL v736;
  int v737;
  BOOL v738;
  int v739;
  BOOL v740;
  int v741;
  BOOL v742;
  int v743;
  BOOL v744;
  int v745;
  BOOL v746;
  int v747;
  BOOL v748;
  int v749;
  BOOL v750;
  int v751;
  BOOL v752;
  int v753;
  BOOL v754;
  int v755;
  BOOL v756;
  int v757;
  BOOL v758;
  int v759;
  BOOL v760;
  int v761;
  BOOL v762;
  int v763;
  BOOL v764;
  int v765;
  BOOL v766;
  int v767;
  BOOL v768;
  int v769;
  BOOL v770;
  int v771;
  BOOL v772;
  int v773;
  BOOL v774;
  int v775;
  BOOL v776;
  int v777;
  BOOL v778;
  int v779;
  BOOL v780;
  int v781;
  BOOL v782;
  int v783;
  BOOL v784;
  int v785;
  BOOL v786;
  int v787;
  BOOL v788;
  int v789;
  BOOL v790;
  int v791;
  BOOL v792;
  int v793;
  BOOL v794;
  int v795;
  BOOL v796;
  int v797;
  BOOL v798;
  int v799;
  BOOL v800;
  int v801;
  BOOL v802;
  int v803;
  BOOL v804;
  int v805;
  BOOL v806;
  int v807;
  BOOL v808;
  int v809;
  BOOL v810;
  int v811;
  BOOL v812;
  int v813;
  BOOL v814;
  int v815;
  BOOL v816;
  int v817;
  BOOL v818;
  int v819;
  BOOL v820;
  int v821;
  BOOL v822;
  int v823;
  BOOL v824;
  int v825;
  BOOL v826;
  int v827;
  BOOL v828;
  int v829;
  BOOL v830;
  int v831;
  BOOL v832;
  int v833;
  BOOL v834;
  int v835;
  BOOL v836;
  int v837;
  BOOL v838;
  int v839;
  BOOL v840;
  int v841;
  BOOL v842;
  int v843;
  BOOL v844;
  int v845;
  BOOL v846;
  int v847;
  BOOL v848;
  int v849;
  BOOL v850;
  int v851;

  v8 = 0;
  result = 4294954396;
  if (a1 <= 1936077875)
  {
    if (a1 <= 1380401728)
    {
      if (a1 > 875836533)
      {
        if (a1 > 1278226735)
        {
          if ((a1 - 1278226736) > 6 || ((1 << (a1 - 48)) & 0x45) == 0)
            goto LABEL_6559;
          goto LABEL_82;
        }
        if (a1 == 875836534)
        {
LABEL_55:
          v8 = 0;
          if (a2 > 1937125937)
          {
            if (a2 > 1983013175)
            {
              if (a2 > 2016687155)
              {
                if (a2 > 2019963441)
                {
                  if (a2 > 2037741157)
                  {
                    if (a2 != 2037741158 && a2 != 2037741171)
                      goto LABEL_6559;
                    if (a3)
                      v307 = a4 == 0;
                    else
                      v307 = 1;
                    v308 = !v307;
                    if (!v307 && a5 && a6)
                      goto LABEL_2548;
                    if (a5)
                      v308 = 0;
                    if (v308 == 1 && a6)
                    {
LABEL_2548:
                      result = 0;
                      v8 = vt_Copy_444vf_TRC_Tone_Mat_TRC_yuvsf;
                      goto LABEL_6559;
                    }
                    if (a3)
                      v582 = a4 == 0;
                    else
                      v582 = 0;
                    v583 = !v582;
                    if (a6 && !v583 && !a5 || a5 && v583 != 1 && a6)
                    {
                      result = 0;
                      v8 = vt_Copy_444vf_TRC_Mat_TRC_yuvsf;
                      goto LABEL_6559;
                    }
                    result = 0;
                    v313 = a4 | a3 | a5 | a6;
                    v8 = vt_Copy_444vf_rgb_yuvsf;
                    goto LABEL_6557;
                  }
                  if (a2 != 2019963442)
                  {
                    if (a2 != 2019963956)
                      goto LABEL_6559;
LABEL_1534:
                    if (a3)
                      v179 = a4 == 0;
                    else
                      v179 = 1;
                    v180 = !v179;
                    if (v179 || !a5 || !a6)
                    {
                      if (a5)
                        v180 = 0;
                      if (v180 != 1 || !a6)
                      {
LABEL_2272:
                        if (a3)
                          v277 = a4 == 0;
                        else
                          v277 = 0;
                        v278 = !v277;
                        if (a6 && !v278 && !a5 || a5 && v278 != 1 && a6)
                        {
                          result = 0;
                          v8 = vt_Copy_444vf_TRC_Mat_TRC_xf444;
                          goto LABEL_6559;
                        }
                        result = 0;
                        v313 = a4 | a3 | a5 | a6;
                        v8 = vt_Copy_444vf_rgb_xf444;
                        goto LABEL_6557;
                      }
                    }
LABEL_1665:
                    result = 0;
                    v8 = vt_Copy_444vf_TRC_Tone_Mat_TRC_xf444;
                    goto LABEL_6559;
                  }
LABEL_1472:
                  if (a3)
                    v171 = a4 == 0;
                  else
                    v171 = 1;
                  v172 = !v171;
                  if (v171 || !a5 || !a6)
                  {
                    if (a5)
                      v172 = 0;
                    if (v172 != 1 || !a6)
                    {
LABEL_2259:
                      if (a3)
                        v275 = a4 == 0;
                      else
                        v275 = 0;
                      v276 = !v275;
                      if (a6 && !v276 && !a5 || a5 && v276 != 1 && a6)
                      {
                        result = 0;
                        v8 = vt_Copy_444vf_TRC_Mat_TRC_xf422;
                        goto LABEL_6559;
                      }
                      result = 0;
                      v313 = a4 | a3 | a5 | a6;
                      v8 = vt_Copy_444vf_rgb_xf422;
                      goto LABEL_6557;
                    }
                  }
LABEL_1651:
                  result = 0;
                  v8 = vt_Copy_444vf_TRC_Tone_Mat_TRC_xf422;
                  goto LABEL_6559;
                }
                if (a2 == 2016687156 || a2 == 2016698739)
                  goto LABEL_1534;
                if (a2 != 2019963440)
                  goto LABEL_6559;
LABEL_1486:
                if (a3)
                  v173 = a4 == 0;
                else
                  v173 = 1;
                v174 = !v173;
                if (v173 || !a5 || !a6)
                {
                  if (a5)
                    v174 = 0;
                  if (v174 != 1 || !a6)
                  {
LABEL_2784:
                    if (a3)
                      v346 = a4 == 0;
                    else
                      v346 = 0;
                    v347 = !v346;
                    if (a6 && !v347 && !a5 || a5 && v347 != 1 && a6)
                    {
                      result = 0;
                      v8 = vt_Copy_444vf_TRC_Mat_TRC_xf420;
                      goto LABEL_6559;
                    }
                    result = 0;
                    v313 = a4 | a3 | a5 | a6;
                    v8 = vt_Copy_444vf_rgb_xf420;
                    goto LABEL_6557;
                  }
                }
LABEL_1565:
                result = 0;
                v8 = vt_Copy_444vf_TRC_Tone_Mat_TRC_xf420;
                goto LABEL_6559;
              }
              if (a2 <= 2016567666)
              {
                if (a2 != 1983013176)
                {
                  if (a2 != 1983144248)
                  {
                    v34 = 1999843442;
LABEL_897:
                    if (a2 != v34)
                      goto LABEL_6559;
LABEL_1596:
                    if (a3)
                      v187 = a4 == 0;
                    else
                      v187 = 1;
                    v188 = !v187;
                    if (!v187 && a5 && a6)
                      goto LABEL_1609;
                    if (a5)
                      v188 = 0;
                    if (v188 == 1 && a6)
                    {
LABEL_1609:
                      result = 0;
                      v8 = vt_Copy_444vf_TRC_Tone_Mat_TRC_l10r;
                      goto LABEL_6559;
                    }
                    if (a3)
                      v442 = a4 == 0;
                    else
                      v442 = 0;
                    v443 = !v442;
                    if (a6 && !v443 && !a5 || a5 && v443 != 1 && a6)
                    {
                      result = 0;
                      v8 = vt_Copy_444vf_TRC_Mat_TRC_l10r;
                      goto LABEL_6559;
                    }
                    result = 0;
                    v313 = a4 | a3 | a5 | a6;
                    v8 = vt_Copy_444vf_rgb_l10r;
                    goto LABEL_6557;
                  }
LABEL_903:
                  if (a3)
                    v106 = a4 == 0;
                  else
                    v106 = 1;
                  v107 = !v106;
                  if (!v106 && a5 && a6)
                    goto LABEL_916;
                  if (a5)
                    v107 = 0;
                  if (v107 == 1 && a6)
                  {
LABEL_916:
                    result = 0;
                    v8 = vt_Copy_444vf_TRC_Tone_Mat_TRC_444vf;
                    goto LABEL_6559;
                  }
                  if (a3)
                    v434 = a4 == 0;
                  else
                    v434 = 0;
                  v435 = !v434;
                  if (a6 && !v435 && !a5 || a5 && v435 != 1 && a6)
                  {
                    result = 0;
                    v8 = vt_Copy_444vf_TRC_Mat_TRC_444vf;
                    goto LABEL_6559;
                  }
                  result = 0;
                  v313 = a4 | a3 | a5 | a6;
                  v8 = vt_Copy_444vf_rgb_444vf;
                  goto LABEL_6557;
                }
                goto LABEL_1434;
              }
              if (a2 == 2016567667)
                goto LABEL_1472;
              if (a2 == 2016686640)
                goto LABEL_1486;
              v33 = 2016686642;
LABEL_1471:
              if (a2 != v33)
                goto LABEL_6559;
              goto LABEL_1472;
            }
            if (a2 <= 1952855091)
            {
              if (a2 > 1949589874)
              {
                if (a2 == 1949589875)
                  goto LABEL_1534;
                if (a2 == 1952854576)
                  goto LABEL_1486;
                v33 = 1952854578;
                goto LABEL_1471;
              }
              if (a2 != 1937125938)
              {
                if (a2 != 1937126452)
                {
                  v33 = 1949458803;
                  goto LABEL_1471;
                }
LABEL_1652:
                if (a3)
                  v195 = a4 == 0;
                else
                  v195 = 1;
                v196 = !v195;
                if (v195 || !a5 || !a6)
                {
                  if (a5)
                    v196 = 0;
                  if (v196 != 1 || !a6)
                    goto LABEL_2272;
                }
                goto LABEL_1665;
              }
LABEL_1638:
              if (a3)
                v193 = a4 == 0;
              else
                v193 = 1;
              v194 = !v193;
              if (v193 || !a5 || !a6)
              {
                if (a5)
                  v194 = 0;
                if (v194 != 1 || !a6)
                  goto LABEL_2259;
              }
              goto LABEL_1651;
            }
            if (a2 <= 1953903667)
            {
              if (a2 == 1952855092)
                goto LABEL_1534;
              if (a2 == 1953903152)
                goto LABEL_1486;
              v33 = 1953903154;
              goto LABEL_1471;
            }
            if (a2 == 1953903668)
              goto LABEL_1534;
            if (a2 != 1982882104)
            {
              if (a2 != 1983000886)
                goto LABEL_6559;
              if (a3)
                v177 = a4 == 0;
              else
                v177 = 1;
              v178 = !v177;
              if (!v177 && a5 && a6)
                goto LABEL_1533;
              if (a5)
                v178 = 0;
              if (v178 == 1 && a6)
              {
LABEL_1533:
                result = 0;
                v8 = vt_Copy_444vf_TRC_Tone_Mat_TRC_v216;
                goto LABEL_6559;
              }
              if (a3)
                v686 = a4 == 0;
              else
                v686 = 0;
              v687 = !v686;
              if (a6 && !v687 && !a5 || a5 && v687 != 1 && a6)
              {
                result = 0;
                v8 = vt_Copy_444vf_TRC_Mat_TRC_v216;
                goto LABEL_6559;
              }
              result = 0;
              v313 = a4 | a3 | a5 | a6;
              v8 = vt_Copy_444vf_rgb_v216;
              goto LABEL_6557;
            }
LABEL_1624:
            if (a3)
              v191 = a4 == 0;
            else
              v191 = 1;
            v192 = !v191;
            if (!v191 && a5 && a6)
              goto LABEL_1637;
            if (a5)
              v192 = 0;
            if (v192 == 1 && a6)
            {
LABEL_1637:
              result = 0;
              v8 = vt_Copy_444vf_TRC_Tone_Mat_TRC_420vf;
              goto LABEL_6559;
            }
            if (a3)
              v446 = a4 == 0;
            else
              v446 = 0;
            v447 = !v446;
            if (a6 && !v447 && !a5 || a5 && v447 != 1 && a6)
            {
              result = 0;
              v8 = vt_Copy_444vf_TRC_Mat_TRC_420vf;
              goto LABEL_6559;
            }
            result = 0;
            v313 = a4 | a3 | a5 | a6;
            v8 = vt_Copy_444vf_rgb_420vf;
            goto LABEL_6557;
          }
          if (a2 <= 1380411456)
          {
            if (a2 > 875704949)
            {
              if (a2 <= 1111970368)
              {
                if (a2 != 875704950)
                {
                  if (a2 != 875836518 && a2 != 875836534)
                    goto LABEL_6559;
                  goto LABEL_903;
                }
LABEL_1434:
                if (a3)
                  v167 = a4 == 0;
                else
                  v167 = 1;
                v168 = !v167;
                if (!v167 && a5 && a6)
                  goto LABEL_1447;
                if (a5)
                  v168 = 0;
                if (v168 == 1 && a6)
                {
LABEL_1447:
                  result = 0;
                  v8 = vt_Copy_444vf_TRC_Tone_Mat_TRC_422vf;
                  goto LABEL_6559;
                }
                if (a3)
                  v436 = a4 == 0;
                else
                  v436 = 0;
                v437 = !v436;
                if (a6 && !v437 && !a5 || a5 && v437 != 1 && a6)
                {
                  result = 0;
                  v8 = vt_Copy_444vf_TRC_Mat_TRC_422vf;
                  goto LABEL_6559;
                }
                result = 0;
                v313 = a4 | a3 | a5 | a6;
                v8 = vt_Copy_444vf_rgb_422vf;
                goto LABEL_6557;
              }
              if (a2 != 1111970369 && a2 != 1380401729)
              {
                if (a2 != 1380410945)
                  goto LABEL_6559;
                if (a3)
                  v175 = a4 == 0;
                else
                  v175 = 1;
                v176 = !v175;
                if (!v175 && a5 && a6)
                  goto LABEL_1516;
                if (a5)
                  v176 = 0;
                if (v176 == 1 && a6)
                {
LABEL_1516:
                  result = 0;
                  v8 = vt_Copy_444vf_TRC_Tone_Mat_TRC_RGfA;
                  goto LABEL_6559;
                }
                if (a3)
                  v684 = a4 == 0;
                else
                  v684 = 0;
                v685 = !v684;
                if (a6 && !v685 && !a5 || a5 && v685 != 1 && a6)
                {
                  result = 0;
                  v8 = vt_Copy_444vf_TRC_Mat_TRC_RGfA;
                  goto LABEL_6559;
                }
                result = 0;
                v313 = a4 | a3 | a5 | a6;
                v8 = vt_Copy_444vf_rgb_RGfA;
                goto LABEL_6557;
              }
            }
            else
            {
              if (a2 > 875704421)
              {
                if (a2 != 875704422 && a2 != 875704438)
                {
                  if (a2 != 875704934)
                    goto LABEL_6559;
                  goto LABEL_1434;
                }
                goto LABEL_1624;
              }
              if (a2 != 32)
              {
                if (a2 != 846624102 && a2 != 846624121)
                  goto LABEL_6559;
                goto LABEL_1582;
              }
            }
            if (a3)
              v189 = a4 == 0;
            else
              v189 = 1;
            v190 = !v189;
            if (!v189 && a5 && a6)
              goto LABEL_1623;
            if (a5)
              v190 = 0;
            if (v190 == 1 && a6)
            {
LABEL_1623:
              result = 0;
              v8 = vt_Copy_444vf_TRC_Tone_Mat_TRC_BGRA;
              goto LABEL_6559;
            }
            if (a3)
              v444 = a4 == 0;
            else
              v444 = 0;
            v445 = !v444;
            if (a6 && !v445 && !a5 || a5 && v445 != 1 && a6)
            {
              result = 0;
              v8 = vt_Copy_444vf_TRC_Mat_TRC_BGRA;
              goto LABEL_6559;
            }
            result = 0;
            v313 = a4 | a3 | a5 | a6;
            v8 = vt_Copy_444vf_rgb_BGRA;
            goto LABEL_6557;
          }
          if (a2 > 1932681586)
          {
            if (a2 > 1936077361)
            {
              if (a2 == 1936077362)
                goto LABEL_1638;
              if (a2 == 1936077876)
                goto LABEL_1652;
              v108 = 1937125936;
            }
            else
            {
              if (a2 == 1932681587)
                goto LABEL_1638;
              if (a2 == 1932812659)
                goto LABEL_1652;
              v108 = 1936077360;
            }
            if (a2 != v108)
              goto LABEL_6559;
            if (a3)
              v181 = a4 == 0;
            else
              v181 = 1;
            v182 = !v181;
            if (v181 || !a5 || !a6)
            {
              if (a5)
                v182 = 0;
              if (v182 != 1 || !a6)
                goto LABEL_2784;
            }
            goto LABEL_1565;
          }
          if (a2 > 1647719520)
          {
            if (a2 == 1647719521)
            {
              if (a3)
                v422 = a4 == 0;
              else
                v422 = 1;
              v423 = !v422;
              if (!v422 && a5 && a6)
                goto LABEL_3365;
              if (a5)
                v423 = 0;
              if (v423 == 1 && a6)
              {
LABEL_3365:
                result = 0;
                v8 = vt_Copy_444vf_TRC_Tone_Mat_TRC_b64a;
                goto LABEL_6559;
              }
              if (a3)
                v690 = a4 == 0;
              else
                v690 = 0;
              v691 = !v690;
              if (a6 && !v691 && !a5 || a5 && v691 != 1 && a6)
              {
                result = 0;
                v8 = vt_Copy_444vf_TRC_Mat_TRC_b64a;
                goto LABEL_6559;
              }
              result = 0;
              v313 = a4 | a3 | a5 | a6;
              v8 = vt_Copy_444vf_rgb_b64a;
              goto LABEL_6557;
            }
            if (a2 != 1815162994)
            {
              if (a2 != 1815491698)
                goto LABEL_6559;
              if (a3)
                v169 = a4 == 0;
              else
                v169 = 1;
              v170 = !v169;
              if (!v169 && a5 && a6)
                goto LABEL_1467;
              if (a5)
                v170 = 0;
              if (v170 == 1 && a6)
              {
LABEL_1467:
                result = 0;
                v8 = vt_Copy_444vf_TRC_Tone_Mat_TRC_l64r;
                goto LABEL_6559;
              }
              if (a3)
                v682 = a4 == 0;
              else
                v682 = 0;
              v683 = !v682;
              if (a6 && !v683 && !a5 || a5 && v683 != 1 && a6)
              {
                result = 0;
                v8 = vt_Copy_444vf_TRC_Mat_TRC_l64r;
                goto LABEL_6559;
              }
              result = 0;
              v313 = a4 | a3 | a5 | a6;
              v8 = vt_Copy_444vf_rgb_l64r;
              goto LABEL_6557;
            }
            goto LABEL_1596;
          }
          if (a2 == 1380411457)
          {
            if (a3)
              v420 = a4 == 0;
            else
              v420 = 1;
            v421 = !v420;
            if (!v420 && a5 && a6)
              goto LABEL_3351;
            if (a5)
              v421 = 0;
            if (v421 == 1 && a6)
            {
LABEL_3351:
              result = 0;
              v8 = vt_Copy_444vf_TRC_Tone_Mat_TRC_RGhA;
              goto LABEL_6559;
            }
            if (a3)
              v688 = a4 == 0;
            else
              v688 = 0;
            v689 = !v688;
            if (a6 && !v689 && !a5 || a5 && v689 != 1 && a6)
            {
              result = 0;
              v8 = vt_Copy_444vf_TRC_Mat_TRC_RGhA;
              goto LABEL_6559;
            }
            result = 0;
            v313 = a4 | a3 | a5 | a6;
            v8 = vt_Copy_444vf_rgb_RGhA;
            goto LABEL_6557;
          }
          if (a2 != 1630697081)
          {
            v34 = 1647534392;
            goto LABEL_897;
          }
LABEL_1582:
          if (a3)
            v185 = a4 == 0;
          else
            v185 = 1;
          v186 = !v185;
          if (!v185 && a5 && a6)
            goto LABEL_1595;
          if (a5)
            v186 = 0;
          if (v186 == 1 && a6)
          {
LABEL_1595:
            result = 0;
            v8 = vt_Copy_444vf_TRC_Tone_Mat_TRC_2vuyf;
            goto LABEL_6559;
          }
          if (a3)
            v440 = a4 == 0;
          else
            v440 = 0;
          v441 = !v440;
          if (a6 && !v441 && !a5 || a5 && v441 != 1 && a6)
          {
            result = 0;
            v8 = vt_Copy_444vf_TRC_Mat_TRC_2vuyf;
            goto LABEL_6559;
          }
          result = 0;
          v313 = a4 | a3 | a5 | a6;
          v8 = vt_Copy_444vf_rgb_2vuyf;
          goto LABEL_6557;
        }
        if (a1 == 1111970369)
          goto LABEL_179;
        v11 = 1278226488;
      }
      else
      {
        if (a1 <= 875704933)
        {
          if (a1 != 32)
          {
            if (a1 != 875704422 && a1 != 875704438)
              goto LABEL_6559;
            goto LABEL_120;
          }
LABEL_179:
          v8 = 0;
          if (a2 > 1936077875)
          {
            if (a2 > 1983000885)
            {
              if (a2 <= 2016687155)
              {
                if (a2 > 1999843441)
                {
                  if (a2 <= 2016686639)
                  {
                    if (a2 != 1999843442)
                    {
                      v20 = 2016567667;
                      goto LABEL_2938;
                    }
LABEL_2463:
                    if (a3)
                      v297 = a4 == 0;
                    else
                      v297 = 1;
                    v298 = !v297;
                    if (!v297 && a5 && a6)
                      goto LABEL_2476;
                    if (a5)
                      v298 = 0;
                    if (v298 == 1 && a6)
                    {
LABEL_2476:
                      result = 0;
                      v8 = vt_Copy_BGRA_TRC_Tone_Mat_TRC_l10r;
                      goto LABEL_6559;
                    }
                    if (a3)
                      v568 = a4 == 0;
                    else
                      v568 = 0;
                    v569 = !v568;
                    if (a6 && !v569 && !a5 || a5 && v569 != 1 && a6)
                    {
                      result = 0;
                      v8 = vt_Copy_BGRA_TRC_Mat_TRC_l10r;
                      goto LABEL_6559;
                    }
                    result = 0;
                    v313 = a4 | a3 | a5 | a6;
                    v8 = vt_Copy_BGRA_rgb_l10r;
                    goto LABEL_6557;
                  }
                  if (a2 != 2016686640)
                  {
                    v20 = 2016686642;
LABEL_2938:
                    if (a2 != v20)
                      goto LABEL_6559;
                    goto LABEL_2939;
                  }
                  goto LABEL_2953;
                }
                if (a2 == 1983000886)
                {
                  if (a3)
                    v498 = a4 == 0;
                  else
                    v498 = 1;
                  v499 = !v498;
                  if (!v498 && a5 && a6)
                    goto LABEL_3992;
                  if (a5)
                    v499 = 0;
                  if (v499 == 1 && a6)
                  {
LABEL_3992:
                    result = 0;
                    v8 = vt_Copy_BGRA_TRC_Tone_Mat_TRC_v216;
                    goto LABEL_6559;
                  }
                  if (a3)
                    v770 = a4 == 0;
                  else
                    v770 = 0;
                  v771 = !v770;
                  if (a6 && !v771 && !a5 || a5 && v771 != 1 && a6)
                  {
                    result = 0;
                    v8 = vt_Copy_BGRA_TRC_Mat_TRC_v216;
                    goto LABEL_6559;
                  }
                  result = 0;
                  v313 = a4 | a3 | a5 | a6;
                  v8 = vt_Copy_BGRA_rgb_v216;
                  goto LABEL_6557;
                }
                if (a2 != 1983013176)
                {
                  v22 = 1983144248;
                  goto LABEL_2312;
                }
                goto LABEL_2395;
              }
              if (a2 > 2019963441)
              {
                if (a2 > 2037741157)
                {
                  if (a2 != 2037741158 && a2 != 2037741171)
                    goto LABEL_6559;
                  if (a3)
                    v390 = a4 == 0;
                  else
                    v390 = 1;
                  v391 = !v390;
                  if (!v390 && a5 && a6)
                    goto LABEL_3150;
                  if (a5)
                    v391 = 0;
                  if (v391 == 1 && a6)
                  {
LABEL_3150:
                    result = 0;
                    v8 = vt_Copy_BGRA_TRC_Tone_Mat_TRC_yuvsf;
                    goto LABEL_6559;
                  }
                  if (a3)
                    v672 = a4 == 0;
                  else
                    v672 = 0;
                  v673 = !v672;
                  if (a6 && !v673 && !a5 || a5 && v673 != 1 && a6)
                  {
                    result = 0;
                    v8 = vt_Copy_BGRA_TRC_Mat_TRC_yuvsf;
                    goto LABEL_6559;
                  }
                  result = 0;
                  v313 = a4 | a3 | a5 | a6;
                  v8 = vt_Copy_BGRA_rgb_yuvsf;
                  goto LABEL_6557;
                }
                if (a2 == 2019963442)
                {
LABEL_2939:
                  if (a3)
                    v364 = a4 == 0;
                  else
                    v364 = 1;
                  v365 = !v364;
                  if (v364 || !a5 || !a6)
                  {
                    if (a5)
                      v365 = 0;
                    if (v365 != 1 || !a6)
                    {
LABEL_3106:
                      if (a3)
                        v386 = a4 == 0;
                      else
                        v386 = 0;
                      v387 = !v386;
                      if (a6 && !v387 && !a5 || a5 && v387 != 1 && a6)
                      {
                        result = 0;
                        v8 = vt_Copy_BGRA_TRC_Mat_TRC_xf422;
                        goto LABEL_6559;
                      }
                      result = 0;
                      v313 = a4 | a3 | a5 | a6;
                      v8 = vt_Copy_BGRA_rgb_xf422;
                      goto LABEL_6557;
                    }
                  }
LABEL_3105:
                  result = 0;
                  v8 = vt_Copy_BGRA_TRC_Tone_Mat_TRC_xf422;
                  goto LABEL_6559;
                }
                v116 = 2019963956;
                goto LABEL_2999;
              }
              if (a2 != 2016687156 && a2 != 2016698739)
              {
                if (a2 != 2019963440)
                  goto LABEL_6559;
                goto LABEL_2953;
              }
LABEL_3000:
              if (a3)
                v372 = a4 == 0;
              else
                v372 = 1;
              v373 = !v372;
              if (!v372 && a5 && a6)
                goto LABEL_3013;
              if (a5)
                v373 = 0;
              if (v373 == 1 && a6)
              {
LABEL_3013:
                result = 0;
                v8 = vt_Copy_BGRA_TRC_Tone_Mat_TRC_xf444;
                goto LABEL_6559;
              }
LABEL_3014:
              if (a3)
                v374 = a4 == 0;
              else
                v374 = 0;
              v375 = !v374;
              if (a6 && !v375 && !a5 || a5 && v375 != 1 && a6)
              {
                result = 0;
                v8 = vt_Copy_BGRA_TRC_Mat_TRC_xf444;
                goto LABEL_6559;
              }
              result = 0;
              v313 = a4 | a3 | a5 | a6;
              v8 = vt_Copy_BGRA_rgb_xf444;
              goto LABEL_6557;
            }
            if (a2 > 1952854575)
            {
              if (a2 <= 1953903151)
              {
                if (a2 == 1952854576)
                  goto LABEL_2953;
                if (a2 == 1952854578)
                  goto LABEL_2939;
                v116 = 1952855092;
                goto LABEL_2999;
              }
              if (a2 <= 1953903667)
              {
                if (a2 != 1953903152)
                {
                  v20 = 1953903154;
                  goto LABEL_2938;
                }
LABEL_2953:
                if (a3)
                  v366 = a4 == 0;
                else
                  v366 = 1;
                v367 = !v366;
                if (v366 || !a5 || !a6)
                {
                  if (a5)
                    v367 = 0;
                  if (v367 != 1 || !a6)
                  {
LABEL_3325:
                    if (a3)
                      v418 = a4 == 0;
                    else
                      v418 = 0;
                    v419 = !v418;
                    if (a6 && !v419 && !a5 || a5 && v419 != 1 && a6)
                    {
                      result = 0;
                      v8 = vt_Copy_BGRA_TRC_Mat_TRC_xf420;
                      goto LABEL_6559;
                    }
                    result = 0;
                    v313 = a4 | a3 | a5 | a6;
                    v8 = vt_Copy_BGRA_rgb_xf420;
                    goto LABEL_6557;
                  }
                }
LABEL_3178:
                result = 0;
                v8 = vt_Copy_BGRA_TRC_Tone_Mat_TRC_xf420;
                goto LABEL_6559;
              }
              if (a2 == 1953903668)
                goto LABEL_3000;
              if (a2 != 1982882104)
                goto LABEL_6559;
LABEL_3045:
              if (a3)
                v378 = a4 == 0;
              else
                v378 = 1;
              v379 = !v378;
              if (!v378 && a5 && a6)
                goto LABEL_3058;
              if (a5)
                v379 = 0;
              if (v379 == 1 && a6)
              {
LABEL_3058:
                result = 0;
                v8 = vt_Copy_BGRA_TRC_Tone_Mat_TRC_420vf;
                goto LABEL_6559;
              }
              if (a3)
                v580 = a4 == 0;
              else
                v580 = 0;
              v581 = !v580;
              if (a6 && !v581 && !a5 || a5 && v581 != 1 && a6)
              {
                result = 0;
                v8 = vt_Copy_BGRA_TRC_Mat_TRC_420vf;
                goto LABEL_6559;
              }
              result = 0;
              v313 = a4 | a3 | a5 | a6;
              v8 = vt_Copy_BGRA_rgb_420vf;
              goto LABEL_6557;
            }
            if (a2 > 1937126451)
            {
              if (a2 != 1937126452)
              {
                if (a2 == 1949458803)
                  goto LABEL_2939;
                v116 = 1949589875;
LABEL_2999:
                if (a2 != v116)
                  goto LABEL_6559;
                goto LABEL_3000;
              }
            }
            else if (a2 != 1936077876)
            {
              if (a2 != 1937125936)
              {
                v158 = 1937125938;
                goto LABEL_3091;
              }
              goto LABEL_3165;
            }
            goto LABEL_2429;
          }
          if (a2 > 1278226741)
          {
            if (a2 > 1647719520)
            {
              if (a2 <= 1932681586)
              {
                if (a2 == 1647719521)
                {
                  if (a3)
                    v506 = a4 == 0;
                  else
                    v506 = 1;
                  v507 = !v506;
                  if (!v506 && a5 && a6)
                    goto LABEL_4046;
                  if (a5)
                    v507 = 0;
                  if (v507 == 1 && a6)
                  {
LABEL_4046:
                    result = 0;
                    v8 = vt_Copy_BGRA_TRC_Tone_Mat_TRC_b64a;
                    goto LABEL_6559;
                  }
                  if (a3)
                    v774 = a4 == 0;
                  else
                    v774 = 0;
                  v775 = !v774;
                  if (a6 && !v775 && !a5 || a5 && v775 != 1 && a6)
                  {
                    result = 0;
                    v8 = vt_Copy_BGRA_TRC_Mat_TRC_b64a;
                    goto LABEL_6559;
                  }
                  result = 0;
                  v313 = a4 | a3 | a5 | a6;
                  v8 = vt_Copy_BGRA_rgb_b64a;
                  goto LABEL_6557;
                }
                if (a2 != 1815162994)
                {
                  if (a2 != 1815491698)
                    goto LABEL_6559;
                  if (a3)
                    v285 = a4 == 0;
                  else
                    v285 = 1;
                  v286 = !v285;
                  if (!v285 && a5 && a6)
                    goto LABEL_2366;
                  if (a5)
                    v286 = 0;
                  if (v286 == 1 && a6)
                  {
LABEL_2366:
                    result = 0;
                    v8 = vt_Copy_BGRA_TRC_Tone_Mat_TRC_l64r;
                    goto LABEL_6559;
                  }
                  if (a3)
                    v750 = a4 == 0;
                  else
                    v750 = 0;
                  v751 = !v750;
                  if (a6 && !v751 && !a5 || a5 && v751 != 1 && a6)
                  {
                    result = 0;
                    v8 = vt_Copy_BGRA_TRC_Mat_TRC_l64r;
                    goto LABEL_6559;
                  }
                  result = 0;
                  v313 = a4 | a3 | a5 | a6;
                  v8 = vt_Copy_BGRA_rgb_l64r;
                  goto LABEL_6557;
                }
                goto LABEL_2463;
              }
              if (a2 > 1936077359)
              {
                if (a2 != 1936077360)
                {
                  v158 = 1936077362;
LABEL_3091:
                  if (a2 != v158)
                    goto LABEL_6559;
LABEL_3092:
                  if (a3)
                    v384 = a4 == 0;
                  else
                    v384 = 1;
                  v385 = !v384;
                  if (v384 || !a5 || !a6)
                  {
                    if (a5)
                      v385 = 0;
                    if (v385 != 1 || !a6)
                      goto LABEL_3106;
                  }
                  goto LABEL_3105;
                }
LABEL_3165:
                if (a3)
                  v394 = a4 == 0;
                else
                  v394 = 1;
                v395 = !v394;
                if (v394 || !a5 || !a6)
                {
                  if (a5)
                    v395 = 0;
                  if (v395 != 1 || !a6)
                    goto LABEL_3325;
                }
                goto LABEL_3178;
              }
              if (a2 == 1932681587)
                goto LABEL_3092;
              if (a2 != 1932812659)
                goto LABEL_6559;
LABEL_2429:
              if (a3)
                v293 = a4 == 0;
              else
                v293 = 1;
              v294 = !v293;
              if (!v293 && a5 && a6)
                goto LABEL_3013;
              if (a5)
                v294 = 0;
              if (v294 == 1 && a6)
                goto LABEL_3013;
              goto LABEL_3014;
            }
            if (a2 > 1380411456)
            {
              if (a2 == 1380411457)
              {
                if (a3)
                  v510 = a4 == 0;
                else
                  v510 = 1;
                v511 = !v510;
                if (!v510 && a5 && a6)
                  goto LABEL_4074;
                if (a5)
                  v511 = 0;
                if (v511 == 1 && a6)
                {
LABEL_4074:
                  result = 0;
                  v8 = vt_Copy_BGRA_TRC_Tone_Mat_TRC_RGhA;
                  goto LABEL_6559;
                }
                if (a3)
                  v778 = a4 == 0;
                else
                  v778 = 0;
                v779 = !v778;
                if (a6 && !v779 && !a5 || a5 && v779 != 1 && a6)
                {
                  result = 0;
                  v8 = vt_Copy_BGRA_TRC_Mat_TRC_RGhA;
                  goto LABEL_6559;
                }
                result = 0;
                v313 = a4 | a3 | a5 | a6;
                v8 = vt_Copy_BGRA_rgb_RGhA;
                goto LABEL_6557;
              }
              if (a2 != 1630697081)
              {
                if (a2 != 1647534392)
                  goto LABEL_6559;
                goto LABEL_2463;
              }
LABEL_2519:
              if (a3)
                v305 = a4 == 0;
              else
                v305 = 1;
              v306 = !v305;
              if (!v305 && a5 && a6)
                goto LABEL_2532;
              if (a5)
                v306 = 0;
              if (v306 == 1 && a6)
              {
LABEL_2532:
                result = 0;
                v8 = vt_Copy_BGRA_TRC_Tone_Mat_TRC_2vuyf;
                goto LABEL_6559;
              }
              if (a3)
                v576 = a4 == 0;
              else
                v576 = 0;
              v577 = !v576;
              if (a6 && !v577 && !a5 || a5 && v577 != 1 && a6)
              {
                result = 0;
                v8 = vt_Copy_BGRA_TRC_Mat_TRC_2vuyf;
                goto LABEL_6559;
              }
              result = 0;
              v313 = a4 | a3 | a5 | a6;
              v8 = vt_Copy_BGRA_rgb_2vuyf;
              goto LABEL_6557;
            }
            if (a2 == 1278226742)
              goto LABEL_2429;
            if (a2 != 1380401729)
            {
              if (a2 != 1380410945)
                goto LABEL_6559;
              if (a3)
                v161 = a4 == 0;
              else
                v161 = 1;
              v162 = !v161;
              if (!v161 && a5 && a6)
                goto LABEL_1356;
              if (a5)
                v162 = 0;
              if (v162 == 1 && a6)
              {
LABEL_1356:
                result = 0;
                v8 = vt_Copy_BGRA_TRC_Tone_Mat_TRC_RGfA;
                goto LABEL_6559;
              }
              if (a3)
                v746 = a4 == 0;
              else
                v746 = 0;
              v747 = !v746;
              if (a6 && !v747 && !a5 || a5 && v747 != 1 && a6)
              {
                result = 0;
                v8 = vt_Copy_BGRA_TRC_Mat_TRC_RGfA;
                goto LABEL_6559;
              }
              result = 0;
              v313 = a4 | a3 | a5 | a6;
              v8 = vt_Copy_BGRA_rgb_RGfA;
              goto LABEL_6557;
            }
          }
          else
          {
            if (a2 > 875704949)
            {
              if (a2 <= 1111970368)
              {
                if (a2 != 875704950)
                {
                  if (a2 == 875836518)
                  {
LABEL_2313:
                    if (a3)
                      v281 = a4 == 0;
                    else
                      v281 = 1;
                    v282 = !v281;
                    if (!v281 && a5 && a6)
                      goto LABEL_2326;
                    if (a5)
                      v282 = 0;
                    if (v282 == 1 && a6)
                    {
LABEL_2326:
                      result = 0;
                      v8 = vt_Copy_BGRA_TRC_Tone_Mat_TRC_444vf;
                      goto LABEL_6559;
                    }
                    if (a3)
                      v502 = a4 == 0;
                    else
                      v502 = 0;
                    v503 = !v502;
                    if (a6 && !v503 && !a5 || a5 && v503 != 1 && a6)
                    {
                      result = 0;
                      v8 = vt_Copy_BGRA_TRC_Mat_TRC_444vf;
                      goto LABEL_6559;
                    }
                    result = 0;
                    v313 = a4 | a3 | a5 | a6;
                    v8 = vt_Copy_BGRA_rgb_444vf;
                    goto LABEL_6557;
                  }
                  v22 = 875836534;
LABEL_2312:
                  if (a2 != v22)
                    goto LABEL_6559;
                  goto LABEL_2313;
                }
LABEL_2395:
                if (a3)
                  v289 = a4 == 0;
                else
                  v289 = 1;
                v290 = !v289;
                if (!v289 && a5 && a6)
                  goto LABEL_2408;
                if (a5)
                  v290 = 0;
                if (v290 == 1 && a6)
                {
LABEL_2408:
                  result = 0;
                  v8 = vt_Copy_BGRA_TRC_Tone_Mat_TRC_422vf;
                  goto LABEL_6559;
                }
                if (a3)
                  v564 = a4 == 0;
                else
                  v564 = 0;
                v565 = !v564;
                if (a6 && !v565 && !a5 || a5 && v565 != 1 && a6)
                {
                  result = 0;
                  v8 = vt_Copy_BGRA_TRC_Mat_TRC_422vf;
                  goto LABEL_6559;
                }
                result = 0;
                v313 = a4 | a3 | a5 | a6;
                v8 = vt_Copy_BGRA_rgb_422vf;
                goto LABEL_6557;
              }
              if (a2 > 1278226735)
              {
                if (a2 == 1278226736)
                  goto LABEL_3000;
                v116 = 1278226738;
                goto LABEL_2999;
              }
              if (a2 != 1111970369)
              {
                v22 = 1278226488;
                goto LABEL_2312;
              }
              goto LABEL_2491;
            }
            if (a2 > 875704421)
            {
              if (a2 != 875704422 && a2 != 875704438)
              {
                if (a2 != 875704934)
                  goto LABEL_6559;
                goto LABEL_2395;
              }
              goto LABEL_3045;
            }
            if (a2 != 32)
            {
              if (a2 != 846624102 && a2 != 846624121)
                goto LABEL_6559;
              goto LABEL_2519;
            }
          }
LABEL_2491:
          if (a3)
            v301 = a4 == 0;
          else
            v301 = 1;
          v302 = !v301;
          if (!v301 && a5 && a6)
            goto LABEL_2504;
          if (a5)
            v302 = 0;
          if (v302 == 1 && a6)
          {
LABEL_2504:
            result = 0;
            v8 = vt_Copy_BGRA_TRC_Tone_Mat_TRC_BGRA;
            goto LABEL_6559;
          }
          if (a3)
            v572 = a4 == 0;
          else
            v572 = 0;
          v573 = !v572;
          if (a6 && !v573 && !a5 || a5 && v573 != 1 && a6)
          {
            result = 0;
            v8 = vt_Copy_BGRA_TRC_Mat_TRC_BGRA;
            goto LABEL_6559;
          }
          result = 0;
          v313 = a4 | a3 | a5 | a6;
          v8 = vt_Copy_BGRA_rgb_BGRA;
          goto LABEL_6557;
        }
        if (a1 == 875704934 || a1 == 875704950)
          goto LABEL_128;
        v11 = 875836518;
      }
LABEL_54:
      if (a1 != v11)
        goto LABEL_6559;
      goto LABEL_55;
    }
    if (a1 > 1815162993)
    {
      if (a1 > 1932812658)
      {
        if (a1 == 1932812659)
          goto LABEL_82;
        if (a1 == 1936077360)
          goto LABEL_98;
        v10 = 1936077362;
LABEL_70:
        if (a1 != v10)
          goto LABEL_6559;
LABEL_90:
        v8 = 0;
        if (a2 > 1937125937)
        {
          if (a2 > 1983013175)
          {
            if (a2 > 2016687155)
            {
              if (a2 > 2019963441)
              {
                if (a2 > 2037741157)
                {
                  if (a2 != 2037741158 && a2 != 2037741171)
                    goto LABEL_6559;
                  if (a3)
                    v141 = a4 == 0;
                  else
                    v141 = 1;
                  v142 = !v141;
                  if (!v141 && a5 && a6)
                    goto LABEL_1205;
                  if (a5)
                    v142 = 0;
                  if (v142 == 1 && a6)
                  {
LABEL_1205:
                    result = 0;
                    v8 = vt_Copy_xf422_TRC_Tone_Mat_TRC_yuvsf;
                    goto LABEL_6559;
                  }
                  if (a3)
                    v400 = a4 == 0;
                  else
                    v400 = 0;
                  v401 = !v400;
                  if (a6 && !v401 && !a5 || a5 && v401 != 1 && a6)
                  {
                    result = 0;
                    v8 = vt_Copy_xf422_TRC_Mat_TRC_yuvsf;
                    goto LABEL_6559;
                  }
                  result = 0;
                  v313 = a4 | a3 | a5 | a6;
                  v8 = vt_Copy_xf422_rgb_yuvsf;
                  goto LABEL_6557;
                }
                if (a2 != 2019963442)
                {
                  if (a2 != 2019963956)
                    goto LABEL_6559;
LABEL_724:
                  if (a3)
                    v82 = a4 == 0;
                  else
                    v82 = 1;
                  v83 = !v82;
                  if (v82 || !a5 || !a6)
                  {
                    if (a5)
                      v83 = 0;
                    if (v83 != 1 || !a6)
                    {
LABEL_954:
                      if (a3)
                        v113 = a4 == 0;
                      else
                        v113 = 0;
                      v114 = !v113;
                      if (a6 && !v114 && !a5 || a5 && v114 != 1 && a6)
                      {
                        result = 0;
                        v8 = vt_Copy_xf422_TRC_Mat_TRC_xf444;
                        goto LABEL_6559;
                      }
                      result = 0;
                      v313 = a4 | a3 | a5 | a6;
                      v8 = vt_Copy_xf422_rgb_xf444;
                      goto LABEL_6557;
                    }
                  }
LABEL_868:
                  result = 0;
                  v8 = vt_Copy_xf422_TRC_Tone_Mat_TRC_xf444;
                  goto LABEL_6559;
                }
LABEL_662:
                if (a3)
                  v74 = a4 == 0;
                else
                  v74 = 1;
                v75 = !v74;
                if (v74 || !a5 || !a6)
                {
                  if (a5)
                    v75 = 0;
                  if (v75 != 1 || !a6)
                  {
LABEL_941:
                    if (a3)
                      v111 = a4 == 0;
                    else
                      v111 = 0;
                    v112 = !v111;
                    if (a6 && !v112 && !a5 || a5 && v112 != 1 && a6)
                    {
                      result = 0;
                      v8 = vt_Copy_xf422_TRC_Mat_TRC_xf422;
                      goto LABEL_6559;
                    }
                    result = 0;
                    v313 = a4 | a3 | a5 | a6;
                    v8 = vt_Copy_xf422_rgb_xf422;
                    goto LABEL_6557;
                  }
                }
LABEL_854:
                result = 0;
                v8 = vt_Copy_xf422_TRC_Tone_Mat_TRC_xf422;
                goto LABEL_6559;
              }
              if (a2 == 2016687156 || a2 == 2016698739)
                goto LABEL_724;
              if (a2 != 2019963440)
                goto LABEL_6559;
LABEL_676:
              if (a3)
                v76 = a4 == 0;
              else
                v76 = 1;
              v77 = !v76;
              if (v76 || !a5 || !a6)
              {
                if (a5)
                  v77 = 0;
                if (v77 != 1 || !a6)
                {
LABEL_1357:
                  if (a3)
                    v163 = a4 == 0;
                  else
                    v163 = 0;
                  v164 = !v163;
                  if (a6 && !v164 && !a5 || a5 && v164 != 1 && a6)
                  {
                    result = 0;
                    v8 = vt_Copy_xf422_TRC_Mat_TRC_xf420;
                    goto LABEL_6559;
                  }
                  result = 0;
                  v313 = a4 | a3 | a5 | a6;
                  v8 = vt_Copy_xf422_rgb_xf420;
                  goto LABEL_6557;
                }
              }
LABEL_755:
              result = 0;
              v8 = vt_Copy_xf422_TRC_Tone_Mat_TRC_xf420;
              goto LABEL_6559;
            }
            if (a2 <= 2016567666)
            {
              if (a2 != 1983013176)
              {
                if (a2 != 1983144248)
                {
                  v18 = 1999843442;
LABEL_265:
                  if (a2 != v18)
                    goto LABEL_6559;
LABEL_769:
                  if (a3)
                    v88 = a4 == 0;
                  else
                    v88 = 1;
                  v89 = !v88;
                  if (!v88 && a5 && a6)
                    goto LABEL_782;
                  if (a5)
                    v89 = 0;
                  if (v89 == 1 && a6)
                  {
LABEL_782:
                    result = 0;
                    v8 = vt_Copy_xf422_TRC_Tone_Mat_TRC_l10r;
                    goto LABEL_6559;
                  }
                  if (a3)
                    v314 = a4 == 0;
                  else
                    v314 = 0;
                  v315 = !v314;
                  if (a6 && !v315 && !a5 || a5 && v315 != 1 && a6)
                  {
                    result = 0;
                    v8 = vt_Copy_xf422_TRC_Mat_TRC_l10r;
                    goto LABEL_6559;
                  }
                  result = 0;
                  v313 = a4 | a3 | a5 | a6;
                  v8 = vt_Copy_xf422_rgb_l10r;
                  goto LABEL_6557;
                }
                if (a3)
                  v241 = a4 == 0;
                else
                  v241 = 1;
                v242 = !v241;
                if (!v241 && a5 && a6)
                  goto LABEL_2040;
                if (a5)
                  v242 = 0;
                if (v242 == 1 && a6)
                {
LABEL_2040:
                  result = 0;
                  v8 = vt_Copy_xf422_TRC_Tone_Mat_TRC_444vf;
                  goto LABEL_6559;
                }
LABEL_2642:
                if (a3)
                  v324 = a4 == 0;
                else
                  v324 = 0;
                v325 = !v324;
                if (a6 && !v325 && !a5 || a5 && v325 != 1 && a6)
                {
                  result = 0;
                  v8 = vt_Copy_xf422_TRC_Mat_TRC_444vf;
                  goto LABEL_6559;
                }
                result = 0;
                v313 = a4 | a3 | a5 | a6;
                v8 = vt_Copy_xf422_rgb_444vf;
                goto LABEL_6557;
              }
              goto LABEL_624;
            }
            if (a2 == 2016567667)
              goto LABEL_662;
            if (a2 == 2016686640)
              goto LABEL_676;
            v17 = 2016686642;
LABEL_661:
            if (a2 != v17)
              goto LABEL_6559;
            goto LABEL_662;
          }
          if (a2 <= 1952855091)
          {
            if (a2 > 1949589874)
            {
              if (a2 == 1949589875)
                goto LABEL_724;
              if (a2 == 1952854576)
                goto LABEL_676;
              v17 = 1952854578;
              goto LABEL_661;
            }
            if (a2 != 1937125938)
            {
              if (a2 != 1937126452)
              {
                v17 = 1949458803;
                goto LABEL_661;
              }
LABEL_855:
              if (a3)
                v100 = a4 == 0;
              else
                v100 = 1;
              v101 = !v100;
              if (v100 || !a5 || !a6)
              {
                if (a5)
                  v101 = 0;
                if (v101 != 1 || !a6)
                  goto LABEL_954;
              }
              goto LABEL_868;
            }
LABEL_841:
            if (a3)
              v98 = a4 == 0;
            else
              v98 = 1;
            v99 = !v98;
            if (v98 || !a5 || !a6)
            {
              if (a5)
                v99 = 0;
              if (v99 != 1 || !a6)
                goto LABEL_941;
            }
            goto LABEL_854;
          }
          if (a2 <= 1953903667)
          {
            if (a2 == 1952855092)
              goto LABEL_724;
            if (a2 == 1953903152)
              goto LABEL_676;
            v17 = 1953903154;
            goto LABEL_661;
          }
          if (a2 == 1953903668)
            goto LABEL_724;
          if (a2 != 1982882104)
          {
            if (a2 != 1983000886)
              goto LABEL_6559;
            if (a3)
              v80 = a4 == 0;
            else
              v80 = 1;
            v81 = !v80;
            if (!v80 && a5 && a6)
              goto LABEL_723;
            if (a5)
              v81 = 0;
            if (v81 == 1 && a6)
            {
LABEL_723:
              result = 0;
              v8 = vt_Copy_xf422_TRC_Tone_Mat_TRC_v216;
              goto LABEL_6559;
            }
            if (a3)
              v532 = a4 == 0;
            else
              v532 = 0;
            v533 = !v532;
            if (a6 && !v533 && !a5 || a5 && v533 != 1 && a6)
            {
              result = 0;
              v8 = vt_Copy_xf422_TRC_Mat_TRC_v216;
              goto LABEL_6559;
            }
            result = 0;
            v313 = a4 | a3 | a5 | a6;
            v8 = vt_Copy_xf422_rgb_v216;
            goto LABEL_6557;
          }
LABEL_827:
          if (a3)
            v96 = a4 == 0;
          else
            v96 = 1;
          v97 = !v96;
          if (!v96 && a5 && a6)
            goto LABEL_840;
          if (a5)
            v97 = 0;
          if (v97 == 1 && a6)
          {
LABEL_840:
            result = 0;
            v8 = vt_Copy_xf422_TRC_Tone_Mat_TRC_420vf;
            goto LABEL_6559;
          }
          if (a3)
            v320 = a4 == 0;
          else
            v320 = 0;
          v321 = !v320;
          if (a6 && !v321 && !a5 || a5 && v321 != 1 && a6)
          {
            result = 0;
            v8 = vt_Copy_xf422_TRC_Mat_TRC_420vf;
            goto LABEL_6559;
          }
          result = 0;
          v313 = a4 | a3 | a5 | a6;
          v8 = vt_Copy_xf422_rgb_420vf;
          goto LABEL_6557;
        }
        if (a2 > 1380411456)
        {
          if (a2 > 1932681586)
          {
            if (a2 > 1936077361)
            {
              if (a2 == 1936077362)
                goto LABEL_841;
              if (a2 == 1936077876)
                goto LABEL_855;
              v30 = 1937125936;
            }
            else
            {
              if (a2 == 1932681587)
                goto LABEL_841;
              if (a2 == 1932812659)
                goto LABEL_855;
              v30 = 1936077360;
            }
            if (a2 != v30)
              goto LABEL_6559;
            if (a3)
              v84 = a4 == 0;
            else
              v84 = 1;
            v85 = !v84;
            if (v84 || !a5 || !a6)
            {
              if (a5)
                v85 = 0;
              if (v85 != 1 || !a6)
                goto LABEL_1357;
            }
            goto LABEL_755;
          }
          if (a2 > 1647719520)
          {
            if (a2 == 1647719521)
            {
              if (a3)
                v257 = a4 == 0;
              else
                v257 = 1;
              v258 = !v257;
              if (!v257 && a5 && a6)
                goto LABEL_2148;
              if (a5)
                v258 = 0;
              if (v258 == 1 && a6)
              {
LABEL_2148:
                result = 0;
                v8 = vt_Copy_xf422_TRC_Tone_Mat_TRC_b64a;
                goto LABEL_6559;
              }
              if (a3)
                v552 = a4 == 0;
              else
                v552 = 0;
              v553 = !v552;
              if (a6 && !v553 && !a5 || a5 && v553 != 1 && a6)
              {
                result = 0;
                v8 = vt_Copy_xf422_TRC_Mat_TRC_b64a;
                goto LABEL_6559;
              }
              result = 0;
              v313 = a4 | a3 | a5 | a6;
              v8 = vt_Copy_xf422_rgb_b64a;
              goto LABEL_6557;
            }
            if (a2 != 1815162994)
            {
              if (a2 != 1815491698)
                goto LABEL_6559;
              if (a3)
                v72 = a4 == 0;
              else
                v72 = 1;
              v73 = !v72;
              if (!v72 && a5 && a6)
                goto LABEL_657;
              if (a5)
                v73 = 0;
              if (v73 == 1 && a6)
              {
LABEL_657:
                result = 0;
                v8 = vt_Copy_xf422_TRC_Tone_Mat_TRC_l64r;
                goto LABEL_6559;
              }
              if (a3)
                v528 = a4 == 0;
              else
                v528 = 0;
              v529 = !v528;
              if (a6 && !v529 && !a5 || a5 && v529 != 1 && a6)
              {
                result = 0;
                v8 = vt_Copy_xf422_TRC_Mat_TRC_l64r;
                goto LABEL_6559;
              }
              result = 0;
              v313 = a4 | a3 | a5 | a6;
              v8 = vt_Copy_xf422_rgb_l64r;
              goto LABEL_6557;
            }
            goto LABEL_769;
          }
          if (a2 == 1380411457)
          {
            if (a3)
              v237 = a4 == 0;
            else
              v237 = 1;
            v238 = !v237;
            if (!v237 && a5 && a6)
              goto LABEL_2013;
            if (a5)
              v238 = 0;
            if (v238 == 1 && a6)
            {
LABEL_2013:
              result = 0;
              v8 = vt_Copy_xf422_TRC_Tone_Mat_TRC_RGhA;
              goto LABEL_6559;
            }
            if (a3)
              v546 = a4 == 0;
            else
              v546 = 0;
            v547 = !v546;
            if (a6 && !v547 && !a5 || a5 && v547 != 1 && a6)
            {
              result = 0;
              v8 = vt_Copy_xf422_TRC_Mat_TRC_RGhA;
              goto LABEL_6559;
            }
            result = 0;
            v313 = a4 | a3 | a5 | a6;
            v8 = vt_Copy_xf422_rgb_RGhA;
            goto LABEL_6557;
          }
          if (a2 != 1630697081)
          {
            v18 = 1647534392;
            goto LABEL_265;
          }
LABEL_783:
          if (a3)
            v90 = a4 == 0;
          else
            v90 = 1;
          v91 = !v90;
          if (!v90 && a5 && a6)
            goto LABEL_796;
          if (a5)
            v91 = 0;
          if (v91 == 1 && a6)
          {
LABEL_796:
            result = 0;
            v8 = vt_Copy_xf422_TRC_Tone_Mat_TRC_2vuyf;
            goto LABEL_6559;
          }
          if (a3)
            v316 = a4 == 0;
          else
            v316 = 0;
          v317 = !v316;
          if (a6 && !v317 && !a5 || a5 && v317 != 1 && a6)
          {
            result = 0;
            v8 = vt_Copy_xf422_TRC_Mat_TRC_2vuyf;
            goto LABEL_6559;
          }
          result = 0;
          v313 = a4 | a3 | a5 | a6;
          v8 = vt_Copy_xf422_rgb_2vuyf;
          goto LABEL_6557;
        }
        if (a2 > 875704949)
        {
          if (a2 <= 1111970368)
          {
            if (a2 != 875704950)
            {
              if (a2 != 875836518 && a2 != 875836534)
                goto LABEL_6559;
              if (a3)
                v28 = a4 == 0;
              else
                v28 = 1;
              v29 = !v28;
              if (!v28 && a5 && a6)
                goto LABEL_2040;
              if (a5)
                v29 = 0;
              if (v29 == 1 && a6)
                goto LABEL_2040;
              goto LABEL_2642;
            }
LABEL_624:
            if (a3)
              v70 = a4 == 0;
            else
              v70 = 1;
            v71 = !v70;
            if (!v70 && a5 && a6)
              goto LABEL_637;
            if (a5)
              v71 = 0;
            if (v71 == 1 && a6)
            {
LABEL_637:
              result = 0;
              v8 = vt_Copy_xf422_TRC_Tone_Mat_TRC_422vf;
              goto LABEL_6559;
            }
            if (a3)
              v311 = a4 == 0;
            else
              v311 = 0;
            v312 = !v311;
            if (a6 && !v312 && !a5 || a5 && v312 != 1 && a6)
            {
              result = 0;
              v8 = vt_Copy_xf422_TRC_Mat_TRC_422vf;
              goto LABEL_6559;
            }
            result = 0;
            v313 = a4 | a3 | a5 | a6;
            v8 = vt_Copy_xf422_rgb_422vf;
            goto LABEL_6557;
          }
          if (a2 != 1111970369 && a2 != 1380401729)
          {
            if (a2 != 1380410945)
              goto LABEL_6559;
            if (a3)
              v78 = a4 == 0;
            else
              v78 = 1;
            v79 = !v78;
            if (!v78 && a5 && a6)
              goto LABEL_706;
            if (a5)
              v79 = 0;
            if (v79 == 1 && a6)
            {
LABEL_706:
              result = 0;
              v8 = vt_Copy_xf422_TRC_Tone_Mat_TRC_RGfA;
              goto LABEL_6559;
            }
            if (a3)
              v530 = a4 == 0;
            else
              v530 = 0;
            v531 = !v530;
            if (a6 && !v531 && !a5 || a5 && v531 != 1 && a6)
            {
              result = 0;
              v8 = vt_Copy_xf422_TRC_Mat_TRC_RGfA;
              goto LABEL_6559;
            }
            result = 0;
            v313 = a4 | a3 | a5 | a6;
            v8 = vt_Copy_xf422_rgb_RGfA;
            goto LABEL_6557;
          }
        }
        else
        {
          if (a2 > 875704421)
          {
            if (a2 != 875704422 && a2 != 875704438)
            {
              if (a2 != 875704934)
                goto LABEL_6559;
              goto LABEL_624;
            }
            goto LABEL_827;
          }
          if (a2 != 32)
          {
            if (a2 != 846624102 && a2 != 846624121)
              goto LABEL_6559;
            goto LABEL_783;
          }
        }
        if (a1 == 1932681587 || a1 == 2016567667 || a1 == 1949458803)
        {
          if (a3)
            v94 = a4 == 0;
          else
            v94 = 1;
          v95 = !v94;
          if (v94 || !a5 || !a6)
          {
            if (a5)
              v95 = 0;
            if (v95 != 1 || !a6)
            {
LABEL_2682:
              if (a3)
                v330 = a4 == 0;
              else
                v330 = 0;
              v331 = !v330;
              if (a6 && !v331 && !a5 || a5 && v331 != 1 && a6)
              {
                result = 0;
                v8 = vt_Copy_xf422_TRC_Mat_TRC_BGRA;
                goto LABEL_6559;
              }
              result = 0;
              v313 = a4 | a3 | a5 | a6;
              v8 = vt_Copy_xf422_rgb_BGRA;
              goto LABEL_6557;
            }
          }
        }
        else
        {
          if (a3)
            v318 = a4 == 0;
          else
            v318 = 1;
          v319 = !v318;
          if (v318 || !a5 || !a6)
          {
            if (a5)
              v319 = 0;
            if (v319 != 1 || !a6)
              goto LABEL_2682;
          }
        }
        result = 0;
        v8 = vt_Copy_xf422_TRC_Tone_Mat_TRC_BGRA;
        goto LABEL_6559;
      }
      if (a1 == 1815162994)
        goto LABEL_136;
      if (a1 != 1815491698)
      {
        v10 = 1932681587;
        goto LABEL_70;
      }
      v8 = 0;
      if (a2 > 1936077875)
      {
        if (a2 > 1983000885)
        {
          if (a2 <= 2016687155)
          {
            if (a2 > 1999843441)
            {
              if (a2 <= 2016686639)
              {
                if (a2 != 1999843442)
                {
                  v31 = 2016567667;
                  goto LABEL_4626;
                }
LABEL_3934:
                if (a3)
                  v492 = a4 == 0;
                else
                  v492 = 1;
                v493 = !v492;
                if (!v492 && a5 && a6)
                  goto LABEL_3947;
                if (a5)
                  v493 = 0;
                if (v493 == 1 && a6)
                {
LABEL_3947:
                  result = 0;
                  v8 = vt_Copy_l64r_TRC_Tone_Mat_TRC_l10r;
                  goto LABEL_6559;
                }
                if (a3)
                  v764 = a4 == 0;
                else
                  v764 = 0;
                v765 = !v764;
                if (a6 && !v765 && !a5 || a5 && v765 != 1 && a6)
                {
                  result = 0;
                  v8 = vt_Copy_l64r_TRC_Mat_TRC_l10r;
                  goto LABEL_6559;
                }
                result = 0;
                v313 = a4 | a3 | a5 | a6;
                v8 = vt_Copy_l64r_rgb_l10r;
                goto LABEL_6557;
              }
              if (a2 != 2016686640)
              {
                v31 = 2016686642;
LABEL_4626:
                if (a2 != v31)
                  goto LABEL_6559;
                goto LABEL_4627;
              }
              goto LABEL_4641;
            }
            if (a2 == 1983000886)
            {
              if (a3)
                v696 = a4 == 0;
              else
                v696 = 1;
              v697 = !v696;
              if (!v696 && a5 && a6)
                goto LABEL_5410;
              if (a5)
                v697 = 0;
              if (v697 == 1 && a6)
              {
LABEL_5410:
                result = 0;
                v8 = vt_Copy_l64r_TRC_Tone_Mat_TRC_v216;
                goto LABEL_6559;
              }
              if (a3)
                v832 = a4 == 0;
              else
                v832 = 0;
              v833 = !v832;
              if (a6 && !v833 && !a5 || a5 && v833 != 1 && a6)
              {
                result = 0;
                v8 = vt_Copy_l64r_TRC_Mat_TRC_v216;
                goto LABEL_6559;
              }
              result = 0;
              v313 = a4 | a3 | a5 | a6;
              v8 = vt_Copy_l64r_rgb_v216;
              goto LABEL_6557;
            }
            if (a2 != 1983013176)
            {
              v104 = 1983144248;
              goto LABEL_3632;
            }
            goto LABEL_3798;
          }
          if (a2 > 2019963441)
          {
            if (a2 > 2037741157)
            {
              if (a2 != 2037741158 && a2 != 2037741171)
                goto LABEL_6559;
              if (a3)
                v644 = a4 == 0;
              else
                v644 = 1;
              v645 = !v644;
              if (!v644 && a5 && a6)
                goto LABEL_5037;
              if (a5)
                v645 = 0;
              if (v645 == 1 && a6)
              {
LABEL_5037:
                result = 0;
                v8 = vt_Copy_l64r_TRC_Tone_Mat_TRC_yuvsf;
                goto LABEL_6559;
              }
              if (a3)
                v808 = a4 == 0;
              else
                v808 = 0;
              v809 = !v808;
              if (a6 && !v809 && !a5 || a5 && v809 != 1 && a6)
              {
                result = 0;
                v8 = vt_Copy_l64r_TRC_Mat_TRC_yuvsf;
                goto LABEL_6559;
              }
              result = 0;
              v313 = a4 | a3 | a5 | a6;
              v8 = vt_Copy_l64r_rgb_yuvsf;
              goto LABEL_6557;
            }
            if (a2 == 2019963442)
            {
LABEL_4627:
              if (a3)
                v592 = a4 == 0;
              else
                v592 = 1;
              v593 = !v592;
              if (v592 || !a5 || !a6)
              {
                if (a5)
                  v593 = 0;
                if (v593 != 1 || !a6)
                {
LABEL_4947:
                  if (a3)
                    v634 = a4 == 0;
                  else
                    v634 = 0;
                  v635 = !v634;
                  if (a6 && !v635 && !a5 || a5 && v635 != 1 && a6)
                  {
                    result = 0;
                    v8 = vt_Copy_l64r_TRC_Mat_TRC_xf422;
                    goto LABEL_6559;
                  }
                  result = 0;
                  v313 = a4 | a3 | a5 | a6;
                  v8 = vt_Copy_l64r_rgb_xf422;
                  goto LABEL_6557;
                }
              }
LABEL_4946:
              result = 0;
              v8 = vt_Copy_l64r_TRC_Tone_Mat_TRC_xf422;
              goto LABEL_6559;
            }
            v334 = 2019963956;
            goto LABEL_4748;
          }
          if (a2 != 2016687156 && a2 != 2016698739)
          {
            if (a2 != 2019963440)
              goto LABEL_6559;
            goto LABEL_4641;
          }
LABEL_4749:
          if (a3)
            v608 = a4 == 0;
          else
            v608 = 1;
          v609 = !v608;
          if (!v608 && a5 && a6)
            goto LABEL_4762;
          if (a5)
            v609 = 0;
          if (v609 == 1 && a6)
          {
LABEL_4762:
            result = 0;
            v8 = vt_Copy_l64r_TRC_Tone_Mat_TRC_xf444;
            goto LABEL_6559;
          }
LABEL_4763:
          if (a3)
            v610 = a4 == 0;
          else
            v610 = 0;
          v611 = !v610;
          if (a6 && !v611 && !a5 || a5 && v611 != 1 && a6)
          {
            result = 0;
            v8 = vt_Copy_l64r_TRC_Mat_TRC_xf444;
            goto LABEL_6559;
          }
          result = 0;
          v313 = a4 | a3 | a5 | a6;
          v8 = vt_Copy_l64r_rgb_xf444;
          goto LABEL_6557;
        }
        if (a2 > 1952854575)
        {
          if (a2 <= 1953903151)
          {
            if (a2 == 1952854576)
              goto LABEL_4641;
            if (a2 == 1952854578)
              goto LABEL_4627;
            v334 = 1952855092;
            goto LABEL_4748;
          }
          if (a2 <= 1953903667)
          {
            if (a2 != 1953903152)
            {
              v31 = 1953903154;
              goto LABEL_4626;
            }
LABEL_4641:
            if (a3)
              v594 = a4 == 0;
            else
              v594 = 1;
            v595 = !v594;
            if (v594 || !a5 || !a6)
            {
              if (a5)
                v595 = 0;
              if (v595 != 1 || !a6)
              {
LABEL_5267:
                if (a3)
                  v678 = a4 == 0;
                else
                  v678 = 0;
                v679 = !v678;
                if (a6 && !v679 && !a5 || a5 && v679 != 1 && a6)
                {
                  result = 0;
                  v8 = vt_Copy_l64r_TRC_Mat_TRC_xf420;
                  goto LABEL_6559;
                }
                result = 0;
                v313 = a4 | a3 | a5 | a6;
                v8 = vt_Copy_l64r_rgb_xf420;
                goto LABEL_6557;
              }
            }
LABEL_5095:
            result = 0;
            v8 = vt_Copy_l64r_TRC_Tone_Mat_TRC_xf420;
            goto LABEL_6559;
          }
          if (a2 == 1953903668)
            goto LABEL_4749;
          if (a2 != 1982882104)
            goto LABEL_6559;
LABEL_4840:
          if (a3)
            v620 = a4 == 0;
          else
            v620 = 1;
          v621 = !v620;
          if (!v620 && a5 && a6)
            goto LABEL_4853;
          if (a5)
            v621 = 0;
          if (v621 == 1 && a6)
          {
LABEL_4853:
            result = 0;
            v8 = vt_Copy_l64r_TRC_Tone_Mat_TRC_420vf;
            goto LABEL_6559;
          }
          if (a3)
            v800 = a4 == 0;
          else
            v800 = 0;
          v801 = !v800;
          if (a6 && !v801 && !a5 || a5 && v801 != 1 && a6)
          {
            result = 0;
            v8 = vt_Copy_l64r_TRC_Mat_TRC_420vf;
            goto LABEL_6559;
          }
          result = 0;
          v313 = a4 | a3 | a5 | a6;
          v8 = vt_Copy_l64r_rgb_420vf;
          goto LABEL_6557;
        }
        if (a2 > 1937126451)
        {
          if (a2 != 1937126452)
          {
            if (a2 == 1949458803)
              goto LABEL_4627;
            v334 = 1949589875;
LABEL_4748:
            if (a2 != v334)
              goto LABEL_6559;
            goto LABEL_4749;
          }
        }
        else if (a2 != 1936077876)
        {
          if (a2 != 1937125936)
          {
            v350 = 1937125938;
            goto LABEL_4932;
          }
          goto LABEL_5082;
        }
        goto LABEL_3866;
      }
      if (a2 > 1278226741)
      {
        if (a2 > 1647719520)
        {
          if (a2 <= 1932681586)
          {
            if (a2 == 1647719521)
            {
              if (a3)
                v712 = a4 == 0;
              else
                v712 = 1;
              v713 = !v712;
              if (!v712 && a5 && a6)
                goto LABEL_5518;
              if (a5)
                v713 = 0;
              if (v713 == 1 && a6)
              {
LABEL_5518:
                result = 0;
                v8 = vt_Copy_l64r_TRC_Tone_Mat_TRC_b64a;
                goto LABEL_6559;
              }
              if (a3)
                v840 = a4 == 0;
              else
                v840 = 0;
              v841 = !v840;
              if (a6 && !v841 && !a5 || a5 && v841 != 1 && a6)
              {
                result = 0;
                v8 = vt_Copy_l64r_TRC_Mat_TRC_b64a;
                goto LABEL_6559;
              }
              result = 0;
              v313 = a4 | a3 | a5 | a6;
              v8 = vt_Copy_l64r_rgb_b64a;
              goto LABEL_6557;
            }
            if (a2 != 1815162994)
            {
              if (a2 != 1815491698)
                goto LABEL_6559;
              if (a3)
                v468 = a4 == 0;
              else
                v468 = 1;
              v469 = !v468;
              if (!v468 && a5 && a6)
                goto LABEL_3727;
              if (a5)
                v469 = 0;
              if (v469 == 1 && a6)
              {
LABEL_3727:
                result = 0;
                v8 = vt_Copy_l64r_TRC_Tone_Mat_TRC_l64r;
                goto LABEL_6559;
              }
              if (a3)
                v824 = a4 == 0;
              else
                v824 = 0;
              v825 = !v824;
              if (a6 && !v825 && !a5 || a5 && v825 != 1 && a6)
              {
                result = 0;
                v8 = vt_Copy_l64r_TRC_Mat_TRC_l64r;
                goto LABEL_6559;
              }
              result = 0;
              v313 = a4 | a3 | a5 | a6;
              v8 = vt_Copy_l64r_rgb_l64r;
              goto LABEL_6557;
            }
            goto LABEL_3934;
          }
          if (a2 > 1936077359)
          {
            if (a2 != 1936077360)
            {
              v350 = 1936077362;
LABEL_4932:
              if (a2 != v350)
                goto LABEL_6559;
LABEL_4933:
              if (a3)
                v632 = a4 == 0;
              else
                v632 = 1;
              v633 = !v632;
              if (v632 || !a5 || !a6)
              {
                if (a5)
                  v633 = 0;
                if (v633 != 1 || !a6)
                  goto LABEL_4947;
              }
              goto LABEL_4946;
            }
LABEL_5082:
            if (a3)
              v652 = a4 == 0;
            else
              v652 = 1;
            v653 = !v652;
            if (v652 || !a5 || !a6)
            {
              if (a5)
                v653 = 0;
              if (v653 != 1 || !a6)
                goto LABEL_5267;
            }
            goto LABEL_5095;
          }
          if (a2 == 1932681587)
            goto LABEL_4933;
          if (a2 != 1932812659)
            goto LABEL_6559;
LABEL_3866:
          if (a3)
            v484 = a4 == 0;
          else
            v484 = 1;
          v485 = !v484;
          if (!v484 && a5 && a6)
            goto LABEL_4762;
          if (a5)
            v485 = 0;
          if (v485 == 1 && a6)
            goto LABEL_4762;
          goto LABEL_4763;
        }
        if (a2 > 1380411456)
        {
          if (a2 == 1380411457)
          {
            if (a3)
              v720 = a4 == 0;
            else
              v720 = 1;
            v721 = !v720;
            if (!v720 && a5 && a6)
              goto LABEL_5574;
            if (a5)
              v721 = 0;
            if (v721 == 1 && a6)
            {
LABEL_5574:
              result = 0;
              v8 = vt_Copy_l64r_TRC_Tone_Mat_TRC_RGhA;
              goto LABEL_6559;
            }
            if (a3)
              v848 = a4 == 0;
            else
              v848 = 0;
            v849 = !v848;
            if (a6 && !v849 && !a5 || a5 && v849 != 1 && a6)
            {
              result = 0;
              v8 = vt_Copy_l64r_TRC_Mat_TRC_RGhA;
              goto LABEL_6559;
            }
            result = 0;
            v313 = a4 | a3 | a5 | a6;
            v8 = vt_Copy_l64r_rgb_RGhA;
            goto LABEL_6557;
          }
          if (a2 != 1630697081)
          {
            if (a2 != 1647534392)
              goto LABEL_6559;
            goto LABEL_3934;
          }
LABEL_4159:
          if (a3)
            v524 = a4 == 0;
          else
            v524 = 1;
          v525 = !v524;
          if (!v524 && a5 && a6)
            goto LABEL_4172;
          if (a5)
            v525 = 0;
          if (v525 == 1 && a6)
          {
LABEL_4172:
            result = 0;
            v8 = vt_Copy_l64r_TRC_Tone_Mat_TRC_2vuyf;
            goto LABEL_6559;
          }
          if (a3)
            v792 = a4 == 0;
          else
            v792 = 0;
          v793 = !v792;
          if (a6 && !v793 && !a5 || a5 && v793 != 1 && a6)
          {
            result = 0;
            v8 = vt_Copy_l64r_TRC_Mat_TRC_2vuyf;
            goto LABEL_6559;
          }
          result = 0;
          v313 = a4 | a3 | a5 | a6;
          v8 = vt_Copy_l64r_rgb_2vuyf;
          goto LABEL_6557;
        }
        if (a2 == 1278226742)
          goto LABEL_3866;
        if (a2 != 1380401729)
        {
          if (a2 != 1380410945)
            goto LABEL_6559;
          if (a3)
            v356 = a4 == 0;
          else
            v356 = 1;
          v357 = !v356;
          if (!v356 && a5 && a6)
            goto LABEL_2886;
          if (a5)
            v357 = 0;
          if (v357 == 1 && a6)
          {
LABEL_2886:
            result = 0;
            v8 = vt_Copy_l64r_TRC_Tone_Mat_TRC_RGfA;
            goto LABEL_6559;
          }
          if (a3)
            v816 = a4 == 0;
          else
            v816 = 0;
          v817 = !v816;
          if (a6 && !v817 && !a5 || a5 && v817 != 1 && a6)
          {
            result = 0;
            v8 = vt_Copy_l64r_TRC_Mat_TRC_RGfA;
            goto LABEL_6559;
          }
          result = 0;
          v313 = a4 | a3 | a5 | a6;
          v8 = vt_Copy_l64r_rgb_RGfA;
          goto LABEL_6557;
        }
      }
      else
      {
        if (a2 > 875704949)
        {
          if (a2 <= 1111970368)
          {
            if (a2 != 875704950)
            {
              if (a2 == 875836518)
              {
LABEL_3633:
                if (a3)
                  v460 = a4 == 0;
                else
                  v460 = 1;
                v461 = !v460;
                if (!v460 && a5 && a6)
                  goto LABEL_3646;
                if (a5)
                  v461 = 0;
                if (v461 == 1 && a6)
                {
LABEL_3646:
                  result = 0;
                  v8 = vt_Copy_l64r_TRC_Tone_Mat_TRC_444vf;
                  goto LABEL_6559;
                }
                if (a3)
                  v704 = a4 == 0;
                else
                  v704 = 0;
                v705 = !v704;
                if (a6 && !v705 && !a5 || a5 && v705 != 1 && a6)
                {
                  result = 0;
                  v8 = vt_Copy_l64r_TRC_Mat_TRC_444vf;
                  goto LABEL_6559;
                }
                result = 0;
                v313 = a4 | a3 | a5 | a6;
                v8 = vt_Copy_l64r_rgb_444vf;
                goto LABEL_6557;
              }
              v104 = 875836534;
LABEL_3632:
              if (a2 != v104)
                goto LABEL_6559;
              goto LABEL_3633;
            }
LABEL_3798:
            if (a3)
              v476 = a4 == 0;
            else
              v476 = 1;
            v477 = !v476;
            if (!v476 && a5 && a6)
              goto LABEL_3811;
            if (a5)
              v477 = 0;
            if (v477 == 1 && a6)
            {
LABEL_3811:
              result = 0;
              v8 = vt_Copy_l64r_TRC_Tone_Mat_TRC_422vf;
              goto LABEL_6559;
            }
            if (a3)
              v756 = a4 == 0;
            else
              v756 = 0;
            v757 = !v756;
            if (a6 && !v757 && !a5 || a5 && v757 != 1 && a6)
            {
              result = 0;
              v8 = vt_Copy_l64r_TRC_Mat_TRC_422vf;
              goto LABEL_6559;
            }
            result = 0;
            v313 = a4 | a3 | a5 | a6;
            v8 = vt_Copy_l64r_rgb_422vf;
            goto LABEL_6557;
          }
          if (a2 > 1278226735)
          {
            if (a2 == 1278226736)
              goto LABEL_4749;
            v334 = 1278226738;
            goto LABEL_4748;
          }
          if (a2 != 1111970369)
          {
            v104 = 1278226488;
            goto LABEL_3632;
          }
          goto LABEL_4103;
        }
        if (a2 > 875704421)
        {
          if (a2 != 875704422 && a2 != 875704438)
          {
            if (a2 != 875704934)
              goto LABEL_6559;
            goto LABEL_3798;
          }
          goto LABEL_4840;
        }
        if (a2 != 32)
        {
          if (a2 != 846624102 && a2 != 846624121)
            goto LABEL_6559;
          goto LABEL_4159;
        }
      }
LABEL_4103:
      if (a3)
        v516 = a4 == 0;
      else
        v516 = 1;
      v517 = !v516;
      if (!v516 && a5 && a6)
        goto LABEL_4116;
      if (a5)
        v517 = 0;
      if (v517 == 1 && a6)
      {
LABEL_4116:
        result = 0;
        v8 = vt_Copy_l64r_TRC_Tone_Mat_TRC_BGRA;
        goto LABEL_6559;
      }
      if (a3)
        v784 = a4 == 0;
      else
        v784 = 0;
      v785 = !v784;
      if (a6 && !v785 && !a5 || a5 && v785 != 1 && a6)
      {
        result = 0;
        v8 = vt_Copy_l64r_TRC_Mat_TRC_BGRA;
        goto LABEL_6559;
      }
      result = 0;
      v313 = a4 | a3 | a5 | a6;
      v8 = vt_Copy_l64r_rgb_BGRA;
      goto LABEL_6557;
    }
    if (a1 > 1380411456)
    {
      if (a1 != 1380411457)
      {
        if (a1 == 1647534392)
          goto LABEL_136;
        if (a1 != 1647719521)
          goto LABEL_6559;
        v8 = 0;
        if (a2 > 1936077875)
        {
          if (a2 > 1983000885)
          {
            if (a2 <= 2016687155)
            {
              if (a2 > 1999843441)
              {
                if (a2 <= 2016686639)
                {
                  if (a2 != 1999843442)
                  {
                    v13 = 2016567667;
                    goto LABEL_4564;
                  }
LABEL_3900:
                  if (a3)
                    v488 = a4 == 0;
                  else
                    v488 = 1;
                  v489 = !v488;
                  if (!v488 && a5 && a6)
                    goto LABEL_3913;
                  if (a5)
                    v489 = 0;
                  if (v489 == 1 && a6)
                  {
LABEL_3913:
                    result = 0;
                    v8 = vt_Copy_b64a_TRC_Tone_Mat_TRC_l10r;
                    goto LABEL_6559;
                  }
                  if (a3)
                    v760 = a4 == 0;
                  else
                    v760 = 0;
                  v761 = !v760;
                  if (a6 && !v761 && !a5 || a5 && v761 != 1 && a6)
                  {
                    result = 0;
                    v8 = vt_Copy_b64a_TRC_Mat_TRC_l10r;
                    goto LABEL_6559;
                  }
                  result = 0;
                  v313 = a4 | a3 | a5 | a6;
                  v8 = vt_Copy_b64a_rgb_l10r;
                  goto LABEL_6557;
                }
                if (a2 != 2016686640)
                {
                  v13 = 2016686642;
LABEL_4564:
                  if (a2 != v13)
                    goto LABEL_6559;
                  goto LABEL_4565;
                }
                goto LABEL_4579;
              }
              if (a2 == 1983000886)
              {
                if (a3)
                  v692 = a4 == 0;
                else
                  v692 = 1;
                v693 = !v692;
                if (!v692 && a5 && a6)
                  goto LABEL_5382;
                if (a5)
                  v693 = 0;
                if (v693 == 1 && a6)
                {
LABEL_5382:
                  result = 0;
                  v8 = vt_Copy_b64a_TRC_Tone_Mat_TRC_v216;
                  goto LABEL_6559;
                }
                if (a3)
                  v828 = a4 == 0;
                else
                  v828 = 0;
                v829 = !v828;
                if (a6 && !v829 && !a5 || a5 && v829 != 1 && a6)
                {
                  result = 0;
                  v8 = vt_Copy_b64a_TRC_Mat_TRC_v216;
                  goto LABEL_6559;
                }
                result = 0;
                v313 = a4 | a3 | a5 | a6;
                v8 = vt_Copy_b64a_rgb_v216;
                goto LABEL_6557;
              }
              if (a2 != 1983013176)
              {
                v102 = 1983144248;
                goto LABEL_3596;
              }
              goto LABEL_3764;
            }
            if (a2 > 2019963441)
            {
              if (a2 > 2037741157)
              {
                if (a2 != 2037741158 && a2 != 2037741171)
                  goto LABEL_6559;
                if (a3)
                  v640 = a4 == 0;
                else
                  v640 = 1;
                v641 = !v640;
                if (!v640 && a5 && a6)
                  goto LABEL_5005;
                if (a5)
                  v641 = 0;
                if (v641 == 1 && a6)
                {
LABEL_5005:
                  result = 0;
                  v8 = vt_Copy_b64a_TRC_Tone_Mat_TRC_yuvsf;
                  goto LABEL_6559;
                }
                if (a3)
                  v804 = a4 == 0;
                else
                  v804 = 0;
                v805 = !v804;
                if (a6 && !v805 && !a5 || a5 && v805 != 1 && a6)
                {
                  result = 0;
                  v8 = vt_Copy_b64a_TRC_Mat_TRC_yuvsf;
                  goto LABEL_6559;
                }
                result = 0;
                v313 = a4 | a3 | a5 | a6;
                v8 = vt_Copy_b64a_rgb_yuvsf;
                goto LABEL_6557;
              }
              if (a2 == 2019963442)
              {
LABEL_4565:
                if (a3)
                  v584 = a4 == 0;
                else
                  v584 = 1;
                v585 = !v584;
                if (v584 || !a5 || !a6)
                {
                  if (a5)
                    v585 = 0;
                  if (v585 != 1 || !a6)
                  {
LABEL_4887:
                    if (a3)
                      v626 = a4 == 0;
                    else
                      v626 = 0;
                    v627 = !v626;
                    if (a6 && !v627 && !a5 || a5 && v627 != 1 && a6)
                    {
                      result = 0;
                      v8 = vt_Copy_b64a_TRC_Mat_TRC_xf422;
                      goto LABEL_6559;
                    }
                    result = 0;
                    v313 = a4 | a3 | a5 | a6;
                    v8 = vt_Copy_b64a_rgb_xf422;
                    goto LABEL_6557;
                  }
                }
LABEL_4886:
                result = 0;
                v8 = vt_Copy_b64a_TRC_Tone_Mat_TRC_xf422;
                goto LABEL_6559;
              }
              v332 = 2019963956;
              goto LABEL_4688;
            }
            if (a2 != 2016687156 && a2 != 2016698739)
            {
              if (a2 != 2019963440)
                goto LABEL_6559;
              goto LABEL_4579;
            }
LABEL_4689:
            if (a3)
              v600 = a4 == 0;
            else
              v600 = 1;
            v601 = !v600;
            if (!v600 && a5 && a6)
              goto LABEL_4702;
            if (a5)
              v601 = 0;
            if (v601 == 1 && a6)
            {
LABEL_4702:
              result = 0;
              v8 = vt_Copy_b64a_TRC_Tone_Mat_TRC_xf444;
              goto LABEL_6559;
            }
LABEL_4703:
            if (a3)
              v602 = a4 == 0;
            else
              v602 = 0;
            v603 = !v602;
            if (a6 && !v603 && !a5 || a5 && v603 != 1 && a6)
            {
              result = 0;
              v8 = vt_Copy_b64a_TRC_Mat_TRC_xf444;
              goto LABEL_6559;
            }
            result = 0;
            v313 = a4 | a3 | a5 | a6;
            v8 = vt_Copy_b64a_rgb_xf444;
            goto LABEL_6557;
          }
          if (a2 > 1952854575)
          {
            if (a2 <= 1953903151)
            {
              if (a2 == 1952854576)
                goto LABEL_4579;
              if (a2 == 1952854578)
                goto LABEL_4565;
              v332 = 1952855092;
              goto LABEL_4688;
            }
            if (a2 <= 1953903667)
            {
              if (a2 != 1953903152)
              {
                v13 = 1953903154;
                goto LABEL_4564;
              }
LABEL_4579:
              if (a3)
                v586 = a4 == 0;
              else
                v586 = 1;
              v587 = !v586;
              if (v586 || !a5 || !a6)
              {
                if (a5)
                  v587 = 0;
                if (v587 != 1 || !a6)
                {
LABEL_5241:
                  if (a3)
                    v674 = a4 == 0;
                  else
                    v674 = 0;
                  v675 = !v674;
                  if (a6 && !v675 && !a5 || a5 && v675 != 1 && a6)
                  {
                    result = 0;
                    v8 = vt_Copy_b64a_TRC_Mat_TRC_xf420;
                    goto LABEL_6559;
                  }
                  result = 0;
                  v313 = a4 | a3 | a5 | a6;
                  v8 = vt_Copy_b64a_rgb_xf420;
                  goto LABEL_6557;
                }
              }
LABEL_5067:
              result = 0;
              v8 = vt_Copy_b64a_TRC_Tone_Mat_TRC_xf420;
              goto LABEL_6559;
            }
            if (a2 == 1953903668)
              goto LABEL_4689;
            if (a2 != 1982882104)
              goto LABEL_6559;
LABEL_4808:
            if (a3)
              v616 = a4 == 0;
            else
              v616 = 1;
            v617 = !v616;
            if (!v616 && a5 && a6)
              goto LABEL_4821;
            if (a5)
              v617 = 0;
            if (v617 == 1 && a6)
            {
LABEL_4821:
              result = 0;
              v8 = vt_Copy_b64a_TRC_Tone_Mat_TRC_420vf;
              goto LABEL_6559;
            }
            if (a3)
              v796 = a4 == 0;
            else
              v796 = 0;
            v797 = !v796;
            if (a6 && !v797 && !a5 || a5 && v797 != 1 && a6)
            {
              result = 0;
              v8 = vt_Copy_b64a_TRC_Mat_TRC_420vf;
              goto LABEL_6559;
            }
            result = 0;
            v313 = a4 | a3 | a5 | a6;
            v8 = vt_Copy_b64a_rgb_420vf;
            goto LABEL_6557;
          }
          if (a2 > 1937126451)
          {
            if (a2 != 1937126452)
            {
              if (a2 == 1949458803)
                goto LABEL_4565;
              v332 = 1949589875;
LABEL_4688:
              if (a2 != v332)
                goto LABEL_6559;
              goto LABEL_4689;
            }
          }
          else if (a2 != 1936077876)
          {
            if (a2 != 1937125936)
            {
              v348 = 1937125938;
              goto LABEL_4872;
            }
            goto LABEL_5054;
          }
          goto LABEL_3832;
        }
        if (a2 > 1278226741)
        {
          if (a2 > 1647719520)
          {
            if (a2 <= 1932681586)
            {
              if (a2 == 1647719521)
              {
                if (a3)
                  v708 = a4 == 0;
                else
                  v708 = 1;
                v709 = !v708;
                if (!v708 && a5 && a6)
                  goto LABEL_5490;
                if (a5)
                  v709 = 0;
                if (v709 == 1 && a6)
                {
LABEL_5490:
                  result = 0;
                  v8 = vt_Copy_b64a_TRC_Tone_Mat_TRC_b64a;
                  goto LABEL_6559;
                }
                if (a3)
                  v836 = a4 == 0;
                else
                  v836 = 0;
                v837 = !v836;
                if (a6 && !v837 && !a5 || a5 && v837 != 1 && a6)
                {
                  result = 0;
                  v8 = vt_Copy_b64a_TRC_Mat_TRC_b64a;
                  goto LABEL_6559;
                }
                result = 0;
                v313 = a4 | a3 | a5 | a6;
                v8 = vt_Copy_b64a_rgb_b64a;
                goto LABEL_6557;
              }
              if (a2 != 1815162994)
              {
                if (a2 != 1815491698)
                  goto LABEL_6559;
                if (a3)
                  v464 = a4 == 0;
                else
                  v464 = 1;
                v465 = !v464;
                if (!v464 && a5 && a6)
                  goto LABEL_3693;
                if (a5)
                  v465 = 0;
                if (v465 == 1 && a6)
                {
LABEL_3693:
                  result = 0;
                  v8 = vt_Copy_b64a_TRC_Tone_Mat_TRC_l64r;
                  goto LABEL_6559;
                }
                if (a3)
                  v820 = a4 == 0;
                else
                  v820 = 0;
                v821 = !v820;
                if (a6 && !v821 && !a5 || a5 && v821 != 1 && a6)
                {
                  result = 0;
                  v8 = vt_Copy_b64a_TRC_Mat_TRC_l64r;
                  goto LABEL_6559;
                }
                result = 0;
                v313 = a4 | a3 | a5 | a6;
                v8 = vt_Copy_b64a_rgb_l64r;
                goto LABEL_6557;
              }
              goto LABEL_3900;
            }
            if (a2 > 1936077359)
            {
              if (a2 != 1936077360)
              {
                v348 = 1936077362;
LABEL_4872:
                if (a2 != v348)
                  goto LABEL_6559;
LABEL_4873:
                if (a3)
                  v624 = a4 == 0;
                else
                  v624 = 1;
                v625 = !v624;
                if (v624 || !a5 || !a6)
                {
                  if (a5)
                    v625 = 0;
                  if (v625 != 1 || !a6)
                    goto LABEL_4887;
                }
                goto LABEL_4886;
              }
LABEL_5054:
              if (a3)
                v648 = a4 == 0;
              else
                v648 = 1;
              v649 = !v648;
              if (v648 || !a5 || !a6)
              {
                if (a5)
                  v649 = 0;
                if (v649 != 1 || !a6)
                  goto LABEL_5241;
              }
              goto LABEL_5067;
            }
            if (a2 == 1932681587)
              goto LABEL_4873;
            if (a2 != 1932812659)
              goto LABEL_6559;
LABEL_3832:
            if (a3)
              v480 = a4 == 0;
            else
              v480 = 1;
            v481 = !v480;
            if (!v480 && a5 && a6)
              goto LABEL_4702;
            if (a5)
              v481 = 0;
            if (v481 == 1 && a6)
              goto LABEL_4702;
            goto LABEL_4703;
          }
          if (a2 > 1380411456)
          {
            if (a2 == 1380411457)
            {
              if (a3)
                v716 = a4 == 0;
              else
                v716 = 1;
              v717 = !v716;
              if (!v716 && a5 && a6)
                goto LABEL_5546;
              if (a5)
                v717 = 0;
              if (v717 == 1 && a6)
              {
LABEL_5546:
                result = 0;
                v8 = vt_Copy_b64a_TRC_Tone_Mat_TRC_RGhA;
                goto LABEL_6559;
              }
              if (a3)
                v844 = a4 == 0;
              else
                v844 = 0;
              v845 = !v844;
              if (a6 && !v845 && !a5 || a5 && v845 != 1 && a6)
              {
                result = 0;
                v8 = vt_Copy_b64a_TRC_Mat_TRC_RGhA;
                goto LABEL_6559;
              }
              result = 0;
              v313 = a4 | a3 | a5 | a6;
              v8 = vt_Copy_b64a_rgb_RGhA;
              goto LABEL_6557;
            }
            if (a2 != 1630697081)
            {
              if (a2 != 1647534392)
                goto LABEL_6559;
              goto LABEL_3900;
            }
LABEL_4131:
            if (a3)
              v520 = a4 == 0;
            else
              v520 = 1;
            v521 = !v520;
            if (!v520 && a5 && a6)
              goto LABEL_4144;
            if (a5)
              v521 = 0;
            if (v521 == 1 && a6)
            {
LABEL_4144:
              result = 0;
              v8 = vt_Copy_b64a_TRC_Tone_Mat_TRC_2vuyf;
              goto LABEL_6559;
            }
            if (a3)
              v788 = a4 == 0;
            else
              v788 = 0;
            v789 = !v788;
            if (a6 && !v789 && !a5 || a5 && v789 != 1 && a6)
            {
              result = 0;
              v8 = vt_Copy_b64a_TRC_Mat_TRC_2vuyf;
              goto LABEL_6559;
            }
            result = 0;
            v313 = a4 | a3 | a5 | a6;
            v8 = vt_Copy_b64a_rgb_2vuyf;
            goto LABEL_6557;
          }
          if (a2 == 1278226742)
            goto LABEL_3832;
          if (a2 != 1380401729)
          {
            if (a2 != 1380410945)
              goto LABEL_6559;
            if (a3)
              v352 = a4 == 0;
            else
              v352 = 1;
            v353 = !v352;
            if (!v352 && a5 && a6)
              goto LABEL_2850;
            if (a5)
              v353 = 0;
            if (v353 == 1 && a6)
            {
LABEL_2850:
              result = 0;
              v8 = vt_Copy_b64a_TRC_Tone_Mat_TRC_RGfA;
              goto LABEL_6559;
            }
            if (a3)
              v812 = a4 == 0;
            else
              v812 = 0;
            v813 = !v812;
            if (a6 && !v813 && !a5 || a5 && v813 != 1 && a6)
            {
              result = 0;
              v8 = vt_Copy_b64a_TRC_Mat_TRC_RGfA;
              goto LABEL_6559;
            }
            result = 0;
            v313 = a4 | a3 | a5 | a6;
            v8 = vt_Copy_b64a_rgb_RGfA;
            goto LABEL_6557;
          }
        }
        else
        {
          if (a2 > 875704949)
          {
            if (a2 <= 1111970368)
            {
              if (a2 != 875704950)
              {
                if (a2 == 875836518)
                {
LABEL_3597:
                  if (a3)
                    v456 = a4 == 0;
                  else
                    v456 = 1;
                  v457 = !v456;
                  if (!v456 && a5 && a6)
                    goto LABEL_3610;
                  if (a5)
                    v457 = 0;
                  if (v457 == 1 && a6)
                  {
LABEL_3610:
                    result = 0;
                    v8 = vt_Copy_b64a_TRC_Tone_Mat_TRC_444vf;
                    goto LABEL_6559;
                  }
                  if (a3)
                    v700 = a4 == 0;
                  else
                    v700 = 0;
                  v701 = !v700;
                  if (a6 && !v701 && !a5 || a5 && v701 != 1 && a6)
                  {
                    result = 0;
                    v8 = vt_Copy_b64a_TRC_Mat_TRC_444vf;
                    goto LABEL_6559;
                  }
                  result = 0;
                  v313 = a4 | a3 | a5 | a6;
                  v8 = vt_Copy_b64a_rgb_444vf;
                  goto LABEL_6557;
                }
                v102 = 875836534;
LABEL_3596:
                if (a2 != v102)
                  goto LABEL_6559;
                goto LABEL_3597;
              }
LABEL_3764:
              if (a3)
                v472 = a4 == 0;
              else
                v472 = 1;
              v473 = !v472;
              if (!v472 && a5 && a6)
                goto LABEL_3777;
              if (a5)
                v473 = 0;
              if (v473 == 1 && a6)
              {
LABEL_3777:
                result = 0;
                v8 = vt_Copy_b64a_TRC_Tone_Mat_TRC_422vf;
                goto LABEL_6559;
              }
              if (a3)
                v752 = a4 == 0;
              else
                v752 = 0;
              v753 = !v752;
              if (a6 && !v753 && !a5 || a5 && v753 != 1 && a6)
              {
                result = 0;
                v8 = vt_Copy_b64a_TRC_Mat_TRC_422vf;
                goto LABEL_6559;
              }
              result = 0;
              v313 = a4 | a3 | a5 | a6;
              v8 = vt_Copy_b64a_rgb_422vf;
              goto LABEL_6557;
            }
            if (a2 > 1278226735)
            {
              if (a2 == 1278226736)
                goto LABEL_4689;
              v332 = 1278226738;
              goto LABEL_4688;
            }
            if (a2 != 1111970369)
            {
              v102 = 1278226488;
              goto LABEL_3596;
            }
            goto LABEL_4075;
          }
          if (a2 > 875704421)
          {
            if (a2 != 875704422 && a2 != 875704438)
            {
              if (a2 != 875704934)
                goto LABEL_6559;
              goto LABEL_3764;
            }
            goto LABEL_4808;
          }
          if (a2 != 32)
          {
            if (a2 != 846624102 && a2 != 846624121)
              goto LABEL_6559;
            goto LABEL_4131;
          }
        }
LABEL_4075:
        if (a3)
          v512 = a4 == 0;
        else
          v512 = 1;
        v513 = !v512;
        if (!v512 && a5 && a6)
          goto LABEL_4088;
        if (a5)
          v513 = 0;
        if (v513 == 1 && a6)
        {
LABEL_4088:
          result = 0;
          v8 = vt_Copy_b64a_TRC_Tone_Mat_TRC_BGRA;
          goto LABEL_6559;
        }
        if (a3)
          v780 = a4 == 0;
        else
          v780 = 0;
        v781 = !v780;
        if (a6 && !v781 && !a5 || a5 && v781 != 1 && a6)
        {
          result = 0;
          v8 = vt_Copy_b64a_TRC_Mat_TRC_BGRA;
          goto LABEL_6559;
        }
        result = 0;
        v313 = a4 | a3 | a5 | a6;
        v8 = vt_Copy_b64a_rgb_BGRA;
        goto LABEL_6557;
      }
      v8 = 0;
      if (a2 > 1936077875)
      {
        if (a2 > 1983000885)
        {
          if (a2 <= 2016687155)
          {
            if (a2 > 1999843441)
            {
              if (a2 <= 2016686639)
              {
                if (a2 != 1999843442)
                {
                  v32 = 2016567667;
                  goto LABEL_4657;
                }
LABEL_3951:
                if (a3)
                  v494 = a4 == 0;
                else
                  v494 = 1;
                v495 = !v494;
                if (!v494 && a5 && a6)
                  goto LABEL_3964;
                if (a5)
                  v495 = 0;
                if (v495 == 1 && a6)
                {
LABEL_3964:
                  result = 0;
                  v8 = vt_Copy_RGhA_TRC_Tone_Mat_TRC_l10r;
                  goto LABEL_6559;
                }
                if (a3)
                  v766 = a4 == 0;
                else
                  v766 = 0;
                v767 = !v766;
                if (a6 && !v767 && !a5 || a5 && v767 != 1 && a6)
                {
                  result = 0;
                  v8 = vt_Copy_RGhA_TRC_Mat_TRC_l10r;
                  goto LABEL_6559;
                }
                result = 0;
                v313 = a4 | a3 | a5 | a6;
                v8 = vt_Copy_RGhA_rgb_l10r;
                goto LABEL_6557;
              }
              if (a2 != 2016686640)
              {
                v32 = 2016686642;
LABEL_4657:
                if (a2 != v32)
                  goto LABEL_6559;
                goto LABEL_4658;
              }
              goto LABEL_4672;
            }
            if (a2 == 1983000886)
            {
              if (a3)
                v698 = a4 == 0;
              else
                v698 = 1;
              v699 = !v698;
              if (!v698 && a5 && a6)
                goto LABEL_5424;
              if (a5)
                v699 = 0;
              if (v699 == 1 && a6)
              {
LABEL_5424:
                result = 0;
                v8 = vt_Copy_RGhA_TRC_Tone_Mat_TRC_v216;
                goto LABEL_6559;
              }
              if (a3)
                v834 = a4 == 0;
              else
                v834 = 0;
              v835 = !v834;
              if (a6 && !v835 && !a5 || a5 && v835 != 1 && a6)
              {
                result = 0;
                v8 = vt_Copy_RGhA_TRC_Mat_TRC_v216;
                goto LABEL_6559;
              }
              result = 0;
              v313 = a4 | a3 | a5 | a6;
              v8 = vt_Copy_RGhA_rgb_v216;
              goto LABEL_6557;
            }
            if (a2 != 1983013176)
            {
              v105 = 1983144248;
              goto LABEL_3650;
            }
            goto LABEL_3815;
          }
          if (a2 > 2019963441)
          {
            if (a2 > 2037741157)
            {
              if (a2 != 2037741158 && a2 != 2037741171)
                goto LABEL_6559;
              if (a3)
                v646 = a4 == 0;
              else
                v646 = 1;
              v647 = !v646;
              if (!v646 && a5 && a6)
                goto LABEL_5053;
              if (a5)
                v647 = 0;
              if (v647 == 1 && a6)
              {
LABEL_5053:
                result = 0;
                v8 = vt_Copy_RGhA_TRC_Tone_Mat_TRC_yuvsf;
                goto LABEL_6559;
              }
              if (a3)
                v810 = a4 == 0;
              else
                v810 = 0;
              v811 = !v810;
              if (a6 && !v811 && !a5 || a5 && v811 != 1 && a6)
              {
                result = 0;
                v8 = vt_Copy_RGhA_TRC_Mat_TRC_yuvsf;
                goto LABEL_6559;
              }
              result = 0;
              v313 = a4 | a3 | a5 | a6;
              v8 = vt_Copy_RGhA_rgb_yuvsf;
              goto LABEL_6557;
            }
            if (a2 == 2019963442)
            {
LABEL_4658:
              if (a3)
                v596 = a4 == 0;
              else
                v596 = 1;
              v597 = !v596;
              if (v596 || !a5 || !a6)
              {
                if (a5)
                  v597 = 0;
                if (v597 != 1 || !a6)
                {
LABEL_4977:
                  if (a3)
                    v638 = a4 == 0;
                  else
                    v638 = 0;
                  v639 = !v638;
                  if (a6 && !v639 && !a5 || a5 && v639 != 1 && a6)
                  {
                    result = 0;
                    v8 = vt_Copy_RGhA_TRC_Mat_TRC_xf422;
                    goto LABEL_6559;
                  }
                  result = 0;
                  v313 = a4 | a3 | a5 | a6;
                  v8 = vt_Copy_RGhA_rgb_xf422;
                  goto LABEL_6557;
                }
              }
LABEL_4976:
              result = 0;
              v8 = vt_Copy_RGhA_TRC_Tone_Mat_TRC_xf422;
              goto LABEL_6559;
            }
            v335 = 2019963956;
            goto LABEL_4778;
          }
          if (a2 != 2016687156 && a2 != 2016698739)
          {
            if (a2 != 2019963440)
              goto LABEL_6559;
            goto LABEL_4672;
          }
LABEL_4779:
          if (a3)
            v612 = a4 == 0;
          else
            v612 = 1;
          v613 = !v612;
          if (!v612 && a5 && a6)
            goto LABEL_4792;
          if (a5)
            v613 = 0;
          if (v613 == 1 && a6)
          {
LABEL_4792:
            result = 0;
            v8 = vt_Copy_RGhA_TRC_Tone_Mat_TRC_xf444;
            goto LABEL_6559;
          }
LABEL_4793:
          if (a3)
            v614 = a4 == 0;
          else
            v614 = 0;
          v615 = !v614;
          if (a6 && !v615 && !a5 || a5 && v615 != 1 && a6)
          {
            result = 0;
            v8 = vt_Copy_RGhA_TRC_Mat_TRC_xf444;
            goto LABEL_6559;
          }
          result = 0;
          v313 = a4 | a3 | a5 | a6;
          v8 = vt_Copy_RGhA_rgb_xf444;
          goto LABEL_6557;
        }
        if (a2 > 1952854575)
        {
          if (a2 <= 1953903151)
          {
            if (a2 == 1952854576)
              goto LABEL_4672;
            if (a2 == 1952854578)
              goto LABEL_4658;
            v335 = 1952855092;
            goto LABEL_4778;
          }
          if (a2 <= 1953903667)
          {
            if (a2 != 1953903152)
            {
              v32 = 1953903154;
              goto LABEL_4657;
            }
LABEL_4672:
            if (a3)
              v598 = a4 == 0;
            else
              v598 = 1;
            v599 = !v598;
            if (v598 || !a5 || !a6)
            {
              if (a5)
                v599 = 0;
              if (v599 != 1 || !a6)
              {
LABEL_5280:
                if (a3)
                  v680 = a4 == 0;
                else
                  v680 = 0;
                v681 = !v680;
                if (a6 && !v681 && !a5 || a5 && v681 != 1 && a6)
                {
                  result = 0;
                  v8 = vt_Copy_RGhA_TRC_Mat_TRC_xf420;
                  goto LABEL_6559;
                }
                result = 0;
                v313 = a4 | a3 | a5 | a6;
                v8 = vt_Copy_RGhA_rgb_xf420;
                goto LABEL_6557;
              }
            }
LABEL_5109:
            result = 0;
            v8 = vt_Copy_RGhA_TRC_Tone_Mat_TRC_xf420;
            goto LABEL_6559;
          }
          if (a2 == 1953903668)
            goto LABEL_4779;
          if (a2 != 1982882104)
            goto LABEL_6559;
LABEL_4856:
          if (a3)
            v622 = a4 == 0;
          else
            v622 = 1;
          v623 = !v622;
          if (!v622 && a5 && a6)
            goto LABEL_4869;
          if (a5)
            v623 = 0;
          if (v623 == 1 && a6)
          {
LABEL_4869:
            result = 0;
            v8 = vt_Copy_RGhA_TRC_Tone_Mat_TRC_420vf;
            goto LABEL_6559;
          }
          if (a3)
            v802 = a4 == 0;
          else
            v802 = 0;
          v803 = !v802;
          if (a6 && !v803 && !a5 || a5 && v803 != 1 && a6)
          {
            result = 0;
            v8 = vt_Copy_RGhA_TRC_Mat_TRC_420vf;
            goto LABEL_6559;
          }
          result = 0;
          v313 = a4 | a3 | a5 | a6;
          v8 = vt_Copy_RGhA_rgb_420vf;
          goto LABEL_6557;
        }
        if (a2 > 1937126451)
        {
          if (a2 != 1937126452)
          {
            if (a2 == 1949458803)
              goto LABEL_4658;
            v335 = 1949589875;
LABEL_4778:
            if (a2 != v335)
              goto LABEL_6559;
            goto LABEL_4779;
          }
        }
        else if (a2 != 1936077876)
        {
          if (a2 != 1937125936)
          {
            v351 = 1937125938;
            goto LABEL_4962;
          }
          goto LABEL_5096;
        }
        goto LABEL_3883;
      }
      if (a2 > 1278226741)
      {
        if (a2 > 1647719520)
        {
          if (a2 <= 1932681586)
          {
            if (a2 == 1647719521)
            {
              if (a3)
                v714 = a4 == 0;
              else
                v714 = 1;
              v715 = !v714;
              if (!v714 && a5 && a6)
                goto LABEL_5532;
              if (a5)
                v715 = 0;
              if (v715 == 1 && a6)
              {
LABEL_5532:
                result = 0;
                v8 = vt_Copy_RGhA_TRC_Tone_Mat_TRC_b64a;
                goto LABEL_6559;
              }
              if (a3)
                v842 = a4 == 0;
              else
                v842 = 0;
              v843 = !v842;
              if (a6 && !v843 && !a5 || a5 && v843 != 1 && a6)
              {
                result = 0;
                v8 = vt_Copy_RGhA_TRC_Mat_TRC_b64a;
                goto LABEL_6559;
              }
              result = 0;
              v313 = a4 | a3 | a5 | a6;
              v8 = vt_Copy_RGhA_rgb_b64a;
              goto LABEL_6557;
            }
            if (a2 != 1815162994)
            {
              if (a2 != 1815491698)
                goto LABEL_6559;
              if (a3)
                v470 = a4 == 0;
              else
                v470 = 1;
              v471 = !v470;
              if (!v470 && a5 && a6)
                goto LABEL_3744;
              if (a5)
                v471 = 0;
              if (v471 == 1 && a6)
              {
LABEL_3744:
                result = 0;
                v8 = vt_Copy_RGhA_TRC_Tone_Mat_TRC_l64r;
                goto LABEL_6559;
              }
              if (a3)
                v826 = a4 == 0;
              else
                v826 = 0;
              v827 = !v826;
              if (a6 && !v827 && !a5 || a5 && v827 != 1 && a6)
              {
                result = 0;
                v8 = vt_Copy_RGhA_TRC_Mat_TRC_l64r;
                goto LABEL_6559;
              }
              result = 0;
              v313 = a4 | a3 | a5 | a6;
              v8 = vt_Copy_RGhA_rgb_l64r;
              goto LABEL_6557;
            }
            goto LABEL_3951;
          }
          if (a2 > 1936077359)
          {
            if (a2 != 1936077360)
            {
              v351 = 1936077362;
LABEL_4962:
              if (a2 != v351)
                goto LABEL_6559;
LABEL_4963:
              if (a3)
                v636 = a4 == 0;
              else
                v636 = 1;
              v637 = !v636;
              if (v636 || !a5 || !a6)
              {
                if (a5)
                  v637 = 0;
                if (v637 != 1 || !a6)
                  goto LABEL_4977;
              }
              goto LABEL_4976;
            }
LABEL_5096:
            if (a3)
              v654 = a4 == 0;
            else
              v654 = 1;
            v655 = !v654;
            if (v654 || !a5 || !a6)
            {
              if (a5)
                v655 = 0;
              if (v655 != 1 || !a6)
                goto LABEL_5280;
            }
            goto LABEL_5109;
          }
          if (a2 == 1932681587)
            goto LABEL_4963;
          if (a2 != 1932812659)
            goto LABEL_6559;
LABEL_3883:
          if (a3)
            v486 = a4 == 0;
          else
            v486 = 1;
          v487 = !v486;
          if (!v486 && a5 && a6)
            goto LABEL_4792;
          if (a5)
            v487 = 0;
          if (v487 == 1 && a6)
            goto LABEL_4792;
          goto LABEL_4793;
        }
        if (a2 > 1380411456)
        {
          if (a2 == 1380411457)
          {
            if (a3)
              v722 = a4 == 0;
            else
              v722 = 1;
            v723 = !v722;
            if (!v722 && a5 && a6)
              goto LABEL_5588;
            if (a5)
              v723 = 0;
            if (v723 == 1 && a6)
            {
LABEL_5588:
              result = 0;
              v8 = vt_Copy_RGhA_TRC_Tone_Mat_TRC_RGhA;
              goto LABEL_6559;
            }
            if (a3)
              v850 = a4 == 0;
            else
              v850 = 0;
            v851 = !v850;
            if (a6 && !v851 && !a5 || a5 && v851 != 1 && a6)
            {
              result = 0;
              v8 = vt_Copy_RGhA_TRC_Mat_TRC_RGhA;
              goto LABEL_6559;
            }
            result = 0;
            v313 = a4 | a3 | a5 | a6;
            v8 = vt_Copy_RGhA_rgb_RGhA;
            goto LABEL_6557;
          }
          if (a2 != 1630697081)
          {
            if (a2 != 1647534392)
              goto LABEL_6559;
            goto LABEL_3951;
          }
LABEL_4173:
          if (a3)
            v526 = a4 == 0;
          else
            v526 = 1;
          v527 = !v526;
          if (!v526 && a5 && a6)
            goto LABEL_4186;
          if (a5)
            v527 = 0;
          if (v527 == 1 && a6)
          {
LABEL_4186:
            result = 0;
            v8 = vt_Copy_RGhA_TRC_Tone_Mat_TRC_2vuyf;
            goto LABEL_6559;
          }
          if (a3)
            v794 = a4 == 0;
          else
            v794 = 0;
          v795 = !v794;
          if (a6 && !v795 && !a5 || a5 && v795 != 1 && a6)
          {
            result = 0;
            v8 = vt_Copy_RGhA_TRC_Mat_TRC_2vuyf;
            goto LABEL_6559;
          }
          result = 0;
          v313 = a4 | a3 | a5 | a6;
          v8 = vt_Copy_RGhA_rgb_2vuyf;
          goto LABEL_6557;
        }
        if (a2 == 1278226742)
          goto LABEL_3883;
        if (a2 != 1380401729)
        {
          if (a2 != 1380410945)
            goto LABEL_6559;
          if (a3)
            v358 = a4 == 0;
          else
            v358 = 1;
          v359 = !v358;
          if (!v358 && a5 && a6)
            goto LABEL_2904;
          if (a5)
            v359 = 0;
          if (v359 == 1 && a6)
          {
LABEL_2904:
            result = 0;
            v8 = vt_Copy_RGhA_TRC_Tone_Mat_TRC_RGfA;
            goto LABEL_6559;
          }
          if (a3)
            v818 = a4 == 0;
          else
            v818 = 0;
          v819 = !v818;
          if (a6 && !v819 && !a5 || a5 && v819 != 1 && a6)
          {
            result = 0;
            v8 = vt_Copy_RGhA_TRC_Mat_TRC_RGfA;
            goto LABEL_6559;
          }
          result = 0;
          v313 = a4 | a3 | a5 | a6;
          v8 = vt_Copy_RGhA_rgb_RGfA;
          goto LABEL_6557;
        }
      }
      else
      {
        if (a2 > 875704949)
        {
          if (a2 <= 1111970368)
          {
            if (a2 != 875704950)
            {
              if (a2 == 875836518)
              {
LABEL_3651:
                if (a3)
                  v462 = a4 == 0;
                else
                  v462 = 1;
                v463 = !v462;
                if (!v462 && a5 && a6)
                  goto LABEL_3664;
                if (a5)
                  v463 = 0;
                if (v463 == 1 && a6)
                {
LABEL_3664:
                  result = 0;
                  v8 = vt_Copy_RGhA_TRC_Tone_Mat_TRC_444vf;
                  goto LABEL_6559;
                }
                if (a3)
                  v706 = a4 == 0;
                else
                  v706 = 0;
                v707 = !v706;
                if (a6 && !v707 && !a5 || a5 && v707 != 1 && a6)
                {
                  result = 0;
                  v8 = vt_Copy_RGhA_TRC_Mat_TRC_444vf;
                  goto LABEL_6559;
                }
                result = 0;
                v313 = a4 | a3 | a5 | a6;
                v8 = vt_Copy_RGhA_rgb_444vf;
                goto LABEL_6557;
              }
              v105 = 875836534;
LABEL_3650:
              if (a2 != v105)
                goto LABEL_6559;
              goto LABEL_3651;
            }
LABEL_3815:
            if (a3)
              v478 = a4 == 0;
            else
              v478 = 1;
            v479 = !v478;
            if (!v478 && a5 && a6)
              goto LABEL_3828;
            if (a5)
              v479 = 0;
            if (v479 == 1 && a6)
            {
LABEL_3828:
              result = 0;
              v8 = vt_Copy_RGhA_TRC_Tone_Mat_TRC_422vf;
              goto LABEL_6559;
            }
            if (a3)
              v758 = a4 == 0;
            else
              v758 = 0;
            v759 = !v758;
            if (a6 && !v759 && !a5 || a5 && v759 != 1 && a6)
            {
              result = 0;
              v8 = vt_Copy_RGhA_TRC_Mat_TRC_422vf;
              goto LABEL_6559;
            }
            result = 0;
            v313 = a4 | a3 | a5 | a6;
            v8 = vt_Copy_RGhA_rgb_422vf;
            goto LABEL_6557;
          }
          if (a2 > 1278226735)
          {
            if (a2 == 1278226736)
              goto LABEL_4779;
            v335 = 1278226738;
            goto LABEL_4778;
          }
          if (a2 != 1111970369)
          {
            v105 = 1278226488;
            goto LABEL_3650;
          }
          goto LABEL_4117;
        }
        if (a2 > 875704421)
        {
          if (a2 != 875704422 && a2 != 875704438)
          {
            if (a2 != 875704934)
              goto LABEL_6559;
            goto LABEL_3815;
          }
          goto LABEL_4856;
        }
        if (a2 != 32)
        {
          if (a2 != 846624102 && a2 != 846624121)
            goto LABEL_6559;
          goto LABEL_4173;
        }
      }
LABEL_4117:
      if (a3)
        v518 = a4 == 0;
      else
        v518 = 1;
      v519 = !v518;
      if (!v518 && a5 && a6)
        goto LABEL_4130;
      if (a5)
        v519 = 0;
      if (v519 == 1 && a6)
      {
LABEL_4130:
        result = 0;
        v8 = vt_Copy_RGhA_TRC_Tone_Mat_TRC_BGRA;
        goto LABEL_6559;
      }
      if (a3)
        v786 = a4 == 0;
      else
        v786 = 0;
      v787 = !v786;
      if (a6 && !v787 && !a5 || a5 && v787 != 1 && a6)
      {
        result = 0;
        v8 = vt_Copy_RGhA_TRC_Mat_TRC_BGRA;
        goto LABEL_6559;
      }
      result = 0;
      v313 = a4 | a3 | a5 | a6;
      v8 = vt_Copy_RGhA_rgb_BGRA;
      goto LABEL_6557;
    }
    if (a1 == 1380401729)
      goto LABEL_179;
    if (a1 != 1380410945)
      goto LABEL_6559;
    v8 = 0;
    if (a2 > 1936077875)
    {
      if (a2 > 1983000885)
      {
        if (a2 <= 2016687155)
        {
          if (a2 > 1999843441)
          {
            if (a2 <= 2016686639)
            {
              if (a2 != 1999843442)
              {
                v19 = 2016567667;
                goto LABEL_4595;
              }
LABEL_3917:
              if (a3)
                v490 = a4 == 0;
              else
                v490 = 1;
              v491 = !v490;
              if (!v490 && a5 && a6)
                goto LABEL_3930;
              if (a5)
                v491 = 0;
              if (v491 == 1 && a6)
              {
LABEL_3930:
                result = 0;
                v8 = vt_Copy_RGfA_TRC_Tone_Mat_TRC_l10r;
                goto LABEL_6559;
              }
              if (a3)
                v762 = a4 == 0;
              else
                v762 = 0;
              v763 = !v762;
              if (a6 && !v763 && !a5 || a5 && v763 != 1 && a6)
              {
                result = 0;
                v8 = vt_Copy_RGfA_TRC_Mat_TRC_l10r;
                goto LABEL_6559;
              }
              result = 0;
              v313 = a4 | a3 | a5 | a6;
              v8 = vt_Copy_RGfA_rgb_l10r;
              goto LABEL_6557;
            }
            if (a2 != 2016686640)
            {
              v19 = 2016686642;
LABEL_4595:
              if (a2 != v19)
                goto LABEL_6559;
              goto LABEL_4596;
            }
            goto LABEL_4610;
          }
          if (a2 == 1983000886)
          {
            if (a3)
              v694 = a4 == 0;
            else
              v694 = 1;
            v695 = !v694;
            if (!v694 && a5 && a6)
              goto LABEL_5396;
            if (a5)
              v695 = 0;
            if (v695 == 1 && a6)
            {
LABEL_5396:
              result = 0;
              v8 = vt_Copy_RGfA_TRC_Tone_Mat_TRC_v216;
              goto LABEL_6559;
            }
            if (a3)
              v830 = a4 == 0;
            else
              v830 = 0;
            v831 = !v830;
            if (a6 && !v831 && !a5 || a5 && v831 != 1 && a6)
            {
              result = 0;
              v8 = vt_Copy_RGfA_TRC_Mat_TRC_v216;
              goto LABEL_6559;
            }
            result = 0;
            v313 = a4 | a3 | a5 | a6;
            v8 = vt_Copy_RGfA_rgb_v216;
            goto LABEL_6557;
          }
          if (a2 != 1983013176)
          {
            v103 = 1983144248;
            goto LABEL_3614;
          }
          goto LABEL_3781;
        }
        if (a2 > 2019963441)
        {
          if (a2 > 2037741157)
          {
            if (a2 != 2037741158 && a2 != 2037741171)
              goto LABEL_6559;
            if (a3)
              v642 = a4 == 0;
            else
              v642 = 1;
            v643 = !v642;
            if (!v642 && a5 && a6)
              goto LABEL_5021;
            if (a5)
              v643 = 0;
            if (v643 == 1 && a6)
            {
LABEL_5021:
              result = 0;
              v8 = vt_Copy_RGfA_TRC_Tone_Mat_TRC_yuvsf;
              goto LABEL_6559;
            }
            if (a3)
              v806 = a4 == 0;
            else
              v806 = 0;
            v807 = !v806;
            if (a6 && !v807 && !a5 || a5 && v807 != 1 && a6)
            {
              result = 0;
              v8 = vt_Copy_RGfA_TRC_Mat_TRC_yuvsf;
              goto LABEL_6559;
            }
            result = 0;
            v313 = a4 | a3 | a5 | a6;
            v8 = vt_Copy_RGfA_rgb_yuvsf;
            goto LABEL_6557;
          }
          if (a2 == 2019963442)
          {
LABEL_4596:
            if (a3)
              v588 = a4 == 0;
            else
              v588 = 1;
            v589 = !v588;
            if (v588 || !a5 || !a6)
            {
              if (a5)
                v589 = 0;
              if (v589 != 1 || !a6)
              {
LABEL_4917:
                if (a3)
                  v630 = a4 == 0;
                else
                  v630 = 0;
                v631 = !v630;
                if (a6 && !v631 && !a5 || a5 && v631 != 1 && a6)
                {
                  result = 0;
                  v8 = vt_Copy_RGfA_TRC_Mat_TRC_xf422;
                  goto LABEL_6559;
                }
                result = 0;
                v313 = a4 | a3 | a5 | a6;
                v8 = vt_Copy_RGfA_rgb_xf422;
                goto LABEL_6557;
              }
            }
LABEL_4916:
            result = 0;
            v8 = vt_Copy_RGfA_TRC_Tone_Mat_TRC_xf422;
            goto LABEL_6559;
          }
          v333 = 2019963956;
          goto LABEL_4718;
        }
        if (a2 != 2016687156 && a2 != 2016698739)
        {
          if (a2 != 2019963440)
            goto LABEL_6559;
          goto LABEL_4610;
        }
LABEL_4719:
        if (a3)
          v604 = a4 == 0;
        else
          v604 = 1;
        v605 = !v604;
        if (!v604 && a5 && a6)
          goto LABEL_4732;
        if (a5)
          v605 = 0;
        if (v605 == 1 && a6)
        {
LABEL_4732:
          result = 0;
          v8 = vt_Copy_RGfA_TRC_Tone_Mat_TRC_xf444;
          goto LABEL_6559;
        }
LABEL_4733:
        if (a3)
          v606 = a4 == 0;
        else
          v606 = 0;
        v607 = !v606;
        if (a6 && !v607 && !a5 || a5 && v607 != 1 && a6)
        {
          result = 0;
          v8 = vt_Copy_RGfA_TRC_Mat_TRC_xf444;
          goto LABEL_6559;
        }
        result = 0;
        v313 = a4 | a3 | a5 | a6;
        v8 = vt_Copy_RGfA_rgb_xf444;
        goto LABEL_6557;
      }
      if (a2 > 1952854575)
      {
        if (a2 <= 1953903151)
        {
          if (a2 == 1952854576)
            goto LABEL_4610;
          if (a2 == 1952854578)
            goto LABEL_4596;
          v333 = 1952855092;
          goto LABEL_4718;
        }
        if (a2 <= 1953903667)
        {
          if (a2 != 1953903152)
          {
            v19 = 1953903154;
            goto LABEL_4595;
          }
LABEL_4610:
          if (a3)
            v590 = a4 == 0;
          else
            v590 = 1;
          v591 = !v590;
          if (v590 || !a5 || !a6)
          {
            if (a5)
              v591 = 0;
            if (v591 != 1 || !a6)
            {
LABEL_5254:
              if (a3)
                v676 = a4 == 0;
              else
                v676 = 0;
              v677 = !v676;
              if (a6 && !v677 && !a5 || a5 && v677 != 1 && a6)
              {
                result = 0;
                v8 = vt_Copy_RGfA_TRC_Mat_TRC_xf420;
                goto LABEL_6559;
              }
              result = 0;
              v313 = a4 | a3 | a5 | a6;
              v8 = vt_Copy_RGfA_rgb_xf420;
              goto LABEL_6557;
            }
          }
LABEL_5081:
          result = 0;
          v8 = vt_Copy_RGfA_TRC_Tone_Mat_TRC_xf420;
          goto LABEL_6559;
        }
        if (a2 == 1953903668)
          goto LABEL_4719;
        if (a2 != 1982882104)
          goto LABEL_6559;
LABEL_4824:
        if (a3)
          v618 = a4 == 0;
        else
          v618 = 1;
        v619 = !v618;
        if (!v618 && a5 && a6)
          goto LABEL_4837;
        if (a5)
          v619 = 0;
        if (v619 == 1 && a6)
        {
LABEL_4837:
          result = 0;
          v8 = vt_Copy_RGfA_TRC_Tone_Mat_TRC_420vf;
          goto LABEL_6559;
        }
        if (a3)
          v798 = a4 == 0;
        else
          v798 = 0;
        v799 = !v798;
        if (a6 && !v799 && !a5 || a5 && v799 != 1 && a6)
        {
          result = 0;
          v8 = vt_Copy_RGfA_TRC_Mat_TRC_420vf;
          goto LABEL_6559;
        }
        result = 0;
        v313 = a4 | a3 | a5 | a6;
        v8 = vt_Copy_RGfA_rgb_420vf;
        goto LABEL_6557;
      }
      if (a2 > 1937126451)
      {
        if (a2 != 1937126452)
        {
          if (a2 == 1949458803)
            goto LABEL_4596;
          v333 = 1949589875;
LABEL_4718:
          if (a2 != v333)
            goto LABEL_6559;
          goto LABEL_4719;
        }
      }
      else if (a2 != 1936077876)
      {
        if (a2 != 1937125936)
        {
          v349 = 1937125938;
          goto LABEL_4902;
        }
        goto LABEL_5068;
      }
      goto LABEL_3849;
    }
    if (a2 > 1278226741)
    {
      if (a2 > 1647719520)
      {
        if (a2 <= 1932681586)
        {
          if (a2 == 1647719521)
          {
            if (a3)
              v710 = a4 == 0;
            else
              v710 = 1;
            v711 = !v710;
            if (!v710 && a5 && a6)
              goto LABEL_5504;
            if (a5)
              v711 = 0;
            if (v711 == 1 && a6)
            {
LABEL_5504:
              result = 0;
              v8 = vt_Copy_RGfA_TRC_Tone_Mat_TRC_b64a;
              goto LABEL_6559;
            }
            if (a3)
              v838 = a4 == 0;
            else
              v838 = 0;
            v839 = !v838;
            if (a6 && !v839 && !a5 || a5 && v839 != 1 && a6)
            {
              result = 0;
              v8 = vt_Copy_RGfA_TRC_Mat_TRC_b64a;
              goto LABEL_6559;
            }
            result = 0;
            v313 = a4 | a3 | a5 | a6;
            v8 = vt_Copy_RGfA_rgb_b64a;
            goto LABEL_6557;
          }
          if (a2 != 1815162994)
          {
            if (a2 != 1815491698)
              goto LABEL_6559;
            if (a3)
              v466 = a4 == 0;
            else
              v466 = 1;
            v467 = !v466;
            if (!v466 && a5 && a6)
              goto LABEL_3710;
            if (a5)
              v467 = 0;
            if (v467 == 1 && a6)
            {
LABEL_3710:
              result = 0;
              v8 = vt_Copy_RGfA_TRC_Tone_Mat_TRC_l64r;
              goto LABEL_6559;
            }
            if (a3)
              v822 = a4 == 0;
            else
              v822 = 0;
            v823 = !v822;
            if (a6 && !v823 && !a5 || a5 && v823 != 1 && a6)
            {
              result = 0;
              v8 = vt_Copy_RGfA_TRC_Mat_TRC_l64r;
              goto LABEL_6559;
            }
            result = 0;
            v313 = a4 | a3 | a5 | a6;
            v8 = vt_Copy_RGfA_rgb_l64r;
            goto LABEL_6557;
          }
          goto LABEL_3917;
        }
        if (a2 > 1936077359)
        {
          if (a2 != 1936077360)
          {
            v349 = 1936077362;
LABEL_4902:
            if (a2 != v349)
              goto LABEL_6559;
LABEL_4903:
            if (a3)
              v628 = a4 == 0;
            else
              v628 = 1;
            v629 = !v628;
            if (v628 || !a5 || !a6)
            {
              if (a5)
                v629 = 0;
              if (v629 != 1 || !a6)
                goto LABEL_4917;
            }
            goto LABEL_4916;
          }
LABEL_5068:
          if (a3)
            v650 = a4 == 0;
          else
            v650 = 1;
          v651 = !v650;
          if (v650 || !a5 || !a6)
          {
            if (a5)
              v651 = 0;
            if (v651 != 1 || !a6)
              goto LABEL_5254;
          }
          goto LABEL_5081;
        }
        if (a2 == 1932681587)
          goto LABEL_4903;
        if (a2 != 1932812659)
          goto LABEL_6559;
LABEL_3849:
        if (a3)
          v482 = a4 == 0;
        else
          v482 = 1;
        v483 = !v482;
        if (!v482 && a5 && a6)
          goto LABEL_4732;
        if (a5)
          v483 = 0;
        if (v483 == 1 && a6)
          goto LABEL_4732;
        goto LABEL_4733;
      }
      if (a2 > 1380411456)
      {
        if (a2 == 1380411457)
        {
          if (a3)
            v718 = a4 == 0;
          else
            v718 = 1;
          v719 = !v718;
          if (!v718 && a5 && a6)
            goto LABEL_5560;
          if (a5)
            v719 = 0;
          if (v719 == 1 && a6)
          {
LABEL_5560:
            result = 0;
            v8 = vt_Copy_RGfA_TRC_Tone_Mat_TRC_RGhA;
            goto LABEL_6559;
          }
          if (a3)
            v846 = a4 == 0;
          else
            v846 = 0;
          v847 = !v846;
          if (a6 && !v847 && !a5 || a5 && v847 != 1 && a6)
          {
            result = 0;
            v8 = vt_Copy_RGfA_TRC_Mat_TRC_RGhA;
            goto LABEL_6559;
          }
          result = 0;
          v313 = a4 | a3 | a5 | a6;
          v8 = vt_Copy_RGfA_rgb_RGhA;
          goto LABEL_6557;
        }
        if (a2 != 1630697081)
        {
          if (a2 != 1647534392)
            goto LABEL_6559;
          goto LABEL_3917;
        }
LABEL_4145:
        if (a3)
          v522 = a4 == 0;
        else
          v522 = 1;
        v523 = !v522;
        if (!v522 && a5 && a6)
          goto LABEL_4158;
        if (a5)
          v523 = 0;
        if (v523 == 1 && a6)
        {
LABEL_4158:
          result = 0;
          v8 = vt_Copy_RGfA_TRC_Tone_Mat_TRC_2vuyf;
          goto LABEL_6559;
        }
        if (a3)
          v790 = a4 == 0;
        else
          v790 = 0;
        v791 = !v790;
        if (a6 && !v791 && !a5 || a5 && v791 != 1 && a6)
        {
          result = 0;
          v8 = vt_Copy_RGfA_TRC_Mat_TRC_2vuyf;
          goto LABEL_6559;
        }
        result = 0;
        v313 = a4 | a3 | a5 | a6;
        v8 = vt_Copy_RGfA_rgb_2vuyf;
        goto LABEL_6557;
      }
      if (a2 == 1278226742)
        goto LABEL_3849;
      if (a2 != 1380401729)
      {
        if (a2 != 1380410945)
          goto LABEL_6559;
        if (a3)
          v354 = a4 == 0;
        else
          v354 = 1;
        v355 = !v354;
        if (!v354 && a5 && a6)
          goto LABEL_2868;
        if (a5)
          v355 = 0;
        if (v355 == 1 && a6)
        {
LABEL_2868:
          result = 0;
          v8 = vt_Copy_RGfA_TRC_Tone_Mat_TRC_RGfA;
          goto LABEL_6559;
        }
        if (a3)
          v814 = a4 == 0;
        else
          v814 = 0;
        v815 = !v814;
        if (a6 && !v815 && !a5 || a5 && v815 != 1 && a6)
        {
          result = 0;
          v8 = vt_Copy_RGfA_TRC_Mat_TRC_RGfA;
          goto LABEL_6559;
        }
        result = 0;
        v313 = a4 | a3 | a5 | a6;
        v8 = vt_Copy_RGfA_rgb_RGfA;
        goto LABEL_6557;
      }
    }
    else
    {
      if (a2 > 875704949)
      {
        if (a2 <= 1111970368)
        {
          if (a2 != 875704950)
          {
            if (a2 == 875836518)
            {
LABEL_3615:
              if (a3)
                v458 = a4 == 0;
              else
                v458 = 1;
              v459 = !v458;
              if (!v458 && a5 && a6)
                goto LABEL_3628;
              if (a5)
                v459 = 0;
              if (v459 == 1 && a6)
              {
LABEL_3628:
                result = 0;
                v8 = vt_Copy_RGfA_TRC_Tone_Mat_TRC_444vf;
                goto LABEL_6559;
              }
              if (a3)
                v702 = a4 == 0;
              else
                v702 = 0;
              v703 = !v702;
              if (a6 && !v703 && !a5 || a5 && v703 != 1 && a6)
              {
                result = 0;
                v8 = vt_Copy_RGfA_TRC_Mat_TRC_444vf;
                goto LABEL_6559;
              }
              result = 0;
              v313 = a4 | a3 | a5 | a6;
              v8 = vt_Copy_RGfA_rgb_444vf;
              goto LABEL_6557;
            }
            v103 = 875836534;
LABEL_3614:
            if (a2 != v103)
              goto LABEL_6559;
            goto LABEL_3615;
          }
LABEL_3781:
          if (a3)
            v474 = a4 == 0;
          else
            v474 = 1;
          v475 = !v474;
          if (!v474 && a5 && a6)
            goto LABEL_3794;
          if (a5)
            v475 = 0;
          if (v475 == 1 && a6)
          {
LABEL_3794:
            result = 0;
            v8 = vt_Copy_RGfA_TRC_Tone_Mat_TRC_422vf;
            goto LABEL_6559;
          }
          if (a3)
            v754 = a4 == 0;
          else
            v754 = 0;
          v755 = !v754;
          if (a6 && !v755 && !a5 || a5 && v755 != 1 && a6)
          {
            result = 0;
            v8 = vt_Copy_RGfA_TRC_Mat_TRC_422vf;
            goto LABEL_6559;
          }
          result = 0;
          v313 = a4 | a3 | a5 | a6;
          v8 = vt_Copy_RGfA_rgb_422vf;
          goto LABEL_6557;
        }
        if (a2 > 1278226735)
        {
          if (a2 == 1278226736)
            goto LABEL_4719;
          v333 = 1278226738;
          goto LABEL_4718;
        }
        if (a2 != 1111970369)
        {
          v103 = 1278226488;
          goto LABEL_3614;
        }
        goto LABEL_4089;
      }
      if (a2 > 875704421)
      {
        if (a2 != 875704422 && a2 != 875704438)
        {
          if (a2 != 875704934)
            goto LABEL_6559;
          goto LABEL_3781;
        }
        goto LABEL_4824;
      }
      if (a2 != 32)
      {
        if (a2 != 846624102 && a2 != 846624121)
          goto LABEL_6559;
        goto LABEL_4145;
      }
    }
LABEL_4089:
    if (a3)
      v514 = a4 == 0;
    else
      v514 = 1;
    v515 = !v514;
    if (!v514 && a5 && a6)
      goto LABEL_4102;
    if (a5)
      v515 = 0;
    if (v515 == 1 && a6)
    {
LABEL_4102:
      result = 0;
      v8 = vt_Copy_RGfA_TRC_Tone_Mat_TRC_BGRA;
      goto LABEL_6559;
    }
    if (a3)
      v782 = a4 == 0;
    else
      v782 = 0;
    v783 = !v782;
    if (a6 && !v783 && !a5 || a5 && v783 != 1 && a6)
    {
      result = 0;
      v8 = vt_Copy_RGfA_TRC_Mat_TRC_BGRA;
      goto LABEL_6559;
    }
    result = 0;
    v313 = a4 | a3 | a5 | a6;
    v8 = vt_Copy_RGfA_rgb_BGRA;
    goto LABEL_6557;
  }
  if (a1 > 1982882103)
  {
    if (a1 > 2016686641)
    {
      if (a1 > 2019963439)
      {
        if (a1 == 2019963440)
          goto LABEL_98;
        if (a1 == 2019963442)
          goto LABEL_90;
        v12 = 2019963956;
      }
      else
      {
        if (a1 == 2016686642)
          goto LABEL_90;
        if (a1 == 2016687156)
        {
LABEL_82:
          v8 = 0;
          if (a2 > 1937125937)
          {
            if (a2 > 1983013175)
            {
              if (a2 > 2016687155)
              {
                if (a2 > 2019963441)
                {
                  if (a2 > 2037741157)
                  {
                    if (a2 != 2037741158 && a2 != 2037741171)
                      goto LABEL_6559;
                    if (a3)
                      v109 = a4 == 0;
                    else
                      v109 = 1;
                    v110 = !v109;
                    if (!v109 && a5 && a6)
                      goto LABEL_940;
                    if (a5)
                      v110 = 0;
                    if (v110 == 1 && a6)
                    {
LABEL_940:
                      result = 0;
                      v8 = vt_Copy_xf444_TRC_Tone_Mat_TRC_yuvsf;
                      goto LABEL_6559;
                    }
                    if (a3)
                      v342 = a4 == 0;
                    else
                      v342 = 0;
                    v343 = !v342;
                    if (a6 && !v343 && !a5 || a5 && v343 != 1 && a6)
                    {
                      result = 0;
                      v8 = vt_Copy_xf444_TRC_Mat_TRC_yuvsf;
                      goto LABEL_6559;
                    }
                    result = 0;
                    v313 = a4 | a3 | a5 | a6;
                    v8 = vt_Copy_xf444_rgb_yuvsf;
                    goto LABEL_6557;
                  }
                  if (a2 != 2019963442)
                  {
                    if (a2 != 2019963956)
                      goto LABEL_6559;
LABEL_480:
                    if (a3)
                      v51 = a4 == 0;
                    else
                      v51 = 1;
                    v52 = !v51;
                    if (v51 || !a5 || !a6)
                    {
                      if (a5)
                        v52 = 0;
                      if (v52 != 1 || !a6)
                      {
LABEL_797:
                        if (a3)
                          v92 = a4 == 0;
                        else
                          v92 = 0;
                        v93 = !v92;
                        if (a6 && !v93 && !a5 || a5 && v93 != 1 && a6)
                        {
                          result = 0;
                          v8 = vt_Copy_xf444_TRC_Mat_TRC_xf444;
                          goto LABEL_6559;
                        }
                        result = 0;
                        v313 = a4 | a3 | a5 | a6;
                        v8 = vt_Copy_xf444_rgb_xf444;
                        goto LABEL_6557;
                      }
                    }
LABEL_616:
                    result = 0;
                    v8 = vt_Copy_xf444_TRC_Tone_Mat_TRC_xf444;
                    goto LABEL_6559;
                  }
LABEL_418:
                  if (a3)
                    v43 = a4 == 0;
                  else
                    v43 = 1;
                  v44 = !v43;
                  if (v43 || !a5 || !a6)
                  {
                    if (a5)
                      v44 = 0;
                    if (v44 != 1 || !a6)
                    {
LABEL_756:
                      if (a3)
                        v86 = a4 == 0;
                      else
                        v86 = 0;
                      v87 = !v86;
                      if (a6 && !v87 && !a5 || a5 && v87 != 1 && a6)
                      {
                        result = 0;
                        v8 = vt_Copy_xf444_TRC_Mat_TRC_xf422;
                        goto LABEL_6559;
                      }
                      result = 0;
                      v313 = a4 | a3 | a5 | a6;
                      v8 = vt_Copy_xf444_rgb_xf422;
                      goto LABEL_6557;
                    }
                  }
LABEL_602:
                  result = 0;
                  v8 = vt_Copy_xf444_TRC_Tone_Mat_TRC_xf422;
                  goto LABEL_6559;
                }
                if (a2 == 2016687156 || a2 == 2016698739)
                  goto LABEL_480;
                if (a2 != 2019963440)
                  goto LABEL_6559;
LABEL_432:
                if (a3)
                  v45 = a4 == 0;
                else
                  v45 = 1;
                v46 = !v45;
                if (v45 || !a5 || !a6)
                {
                  if (a5)
                    v46 = 0;
                  if (v46 != 1 || !a6)
                  {
LABEL_1290:
                    if (a3)
                      v155 = a4 == 0;
                    else
                      v155 = 0;
                    v156 = !v155;
                    if (a6 && !v156 && !a5 || a5 && v156 != 1 && a6)
                    {
                      result = 0;
                      v8 = vt_Copy_xf444_TRC_Mat_TRC_xf420;
                      goto LABEL_6559;
                    }
                    result = 0;
                    v313 = a4 | a3 | a5 | a6;
                    v8 = vt_Copy_xf444_rgb_xf420;
                    goto LABEL_6557;
                  }
                }
LABEL_511:
                result = 0;
                v8 = vt_Copy_xf444_TRC_Tone_Mat_TRC_xf420;
                goto LABEL_6559;
              }
              if (a2 <= 2016567666)
              {
                if (a2 != 1983013176)
                {
                  if (a2 != 1983144248)
                  {
                    v16 = 1999843442;
LABEL_209:
                    if (a2 != v16)
                      goto LABEL_6559;
LABEL_530:
                    if (a3)
                      v58 = a4 == 0;
                    else
                      v58 = 1;
                    v59 = !v58;
                    if (!v58 && a5 && a6)
                      goto LABEL_543;
                    if (a5)
                      v59 = 0;
                    if (v59 == 1 && a6)
                    {
LABEL_543:
                      result = 0;
                      v8 = vt_Copy_xf444_TRC_Tone_Mat_TRC_l10r;
                      goto LABEL_6559;
                    }
                    if (a3)
                      v249 = a4 == 0;
                    else
                      v249 = 0;
                    v250 = !v249;
                    if (a6 && !v250 && !a5 || a5 && v250 != 1 && a6)
                    {
                      result = 0;
                      v8 = vt_Copy_xf444_TRC_Mat_TRC_l10r;
                      goto LABEL_6559;
                    }
                    result = 0;
                    v313 = a4 | a3 | a5 | a6;
                    v8 = vt_Copy_xf444_rgb_l10r;
                    goto LABEL_6557;
                  }
LABEL_215:
                  if (a3)
                    v23 = a4 == 0;
                  else
                    v23 = 1;
                  v24 = !v23;
                  if (!v23 && a5 && a6)
                    goto LABEL_228;
                  if (a5)
                    v24 = 0;
                  if (v24 == 1 && a6)
                  {
LABEL_228:
                    result = 0;
                    v8 = vt_Copy_xf444_TRC_Tone_Mat_TRC_444vf;
                    goto LABEL_6559;
                  }
                  if (a3)
                    v239 = a4 == 0;
                  else
                    v239 = 0;
                  v240 = !v239;
                  if (a6 && !v240 && !a5 || a5 && v240 != 1 && a6)
                  {
                    result = 0;
                    v8 = vt_Copy_xf444_TRC_Mat_TRC_444vf;
                    goto LABEL_6559;
                  }
                  result = 0;
                  v313 = a4 | a3 | a5 | a6;
                  v8 = vt_Copy_xf444_rgb_444vf;
                  goto LABEL_6557;
                }
                goto LABEL_352;
              }
              if (a2 == 2016567667)
                goto LABEL_418;
              if (a2 == 2016686640)
                goto LABEL_432;
              v15 = 2016686642;
LABEL_417:
              if (a2 != v15)
                goto LABEL_6559;
              goto LABEL_418;
            }
            if (a2 <= 1952855091)
            {
              if (a2 > 1949589874)
              {
                if (a2 == 1949589875)
                  goto LABEL_480;
                if (a2 == 1952854576)
                  goto LABEL_432;
                v15 = 1952854578;
                goto LABEL_417;
              }
              if (a2 != 1937125938)
              {
                if (a2 != 1937126452)
                {
                  v15 = 1949458803;
                  goto LABEL_417;
                }
LABEL_603:
                if (a3)
                  v68 = a4 == 0;
                else
                  v68 = 1;
                v69 = !v68;
                if (v68 || !a5 || !a6)
                {
                  if (a5)
                    v69 = 0;
                  if (v69 != 1 || !a6)
                    goto LABEL_797;
                }
                goto LABEL_616;
              }
LABEL_589:
              if (a3)
                v66 = a4 == 0;
              else
                v66 = 1;
              v67 = !v66;
              if (v66 || !a5 || !a6)
              {
                if (a5)
                  v67 = 0;
                if (v67 != 1 || !a6)
                  goto LABEL_756;
              }
              goto LABEL_602;
            }
            if (a2 <= 1953903667)
            {
              if (a2 == 1952855092)
                goto LABEL_480;
              if (a2 == 1953903152)
                goto LABEL_432;
              v15 = 1953903154;
              goto LABEL_417;
            }
            if (a2 == 1953903668)
              goto LABEL_480;
            if (a2 != 1982882104)
            {
              if (a2 != 1983000886)
                goto LABEL_6559;
              if (a3)
                v49 = a4 == 0;
              else
                v49 = 1;
              v50 = !v49;
              if (!v49 && a5 && a6)
                goto LABEL_479;
              if (a5)
                v50 = 0;
              if (v50 == 1 && a6)
              {
LABEL_479:
                result = 0;
                v8 = vt_Copy_xf444_TRC_Tone_Mat_TRC_v216;
                goto LABEL_6559;
              }
              if (a3)
                v428 = a4 == 0;
              else
                v428 = 0;
              v429 = !v428;
              if (a6 && !v429 && !a5 || a5 && v429 != 1 && a6)
              {
                result = 0;
                v8 = vt_Copy_xf444_TRC_Mat_TRC_v216;
                goto LABEL_6559;
              }
              result = 0;
              v313 = a4 | a3 | a5 | a6;
              v8 = vt_Copy_xf444_rgb_v216;
              goto LABEL_6557;
            }
LABEL_575:
            if (a3)
              v64 = a4 == 0;
            else
              v64 = 1;
            v65 = !v64;
            if (!v64 && a5 && a6)
              goto LABEL_588;
            if (a5)
              v65 = 0;
            if (v65 == 1 && a6)
            {
LABEL_588:
              result = 0;
              v8 = vt_Copy_xf444_TRC_Tone_Mat_TRC_420vf;
              goto LABEL_6559;
            }
            if (a3)
              v255 = a4 == 0;
            else
              v255 = 0;
            v256 = !v255;
            if (a6 && !v256 && !a5 || a5 && v256 != 1 && a6)
            {
              result = 0;
              v8 = vt_Copy_xf444_TRC_Mat_TRC_420vf;
              goto LABEL_6559;
            }
            result = 0;
            v313 = a4 | a3 | a5 | a6;
            v8 = vt_Copy_xf444_rgb_420vf;
            goto LABEL_6557;
          }
          if (a2 > 1380411456)
          {
            if (a2 > 1932681586)
            {
              if (a2 > 1936077361)
              {
                if (a2 == 1936077362)
                  goto LABEL_589;
                if (a2 == 1936077876)
                  goto LABEL_603;
                v25 = 1937125936;
              }
              else
              {
                if (a2 == 1932681587)
                  goto LABEL_589;
                if (a2 == 1932812659)
                  goto LABEL_603;
                v25 = 1936077360;
              }
              if (a2 != v25)
                goto LABEL_6559;
              if (a3)
                v53 = a4 == 0;
              else
                v53 = 1;
              v54 = !v53;
              if (v53 || !a5 || !a6)
              {
                if (a5)
                  v54 = 0;
                if (v54 != 1 || !a6)
                  goto LABEL_1290;
              }
              goto LABEL_511;
            }
            if (a2 > 1647719520)
            {
              if (a2 == 1647719521)
              {
                if (a3)
                  v199 = a4 == 0;
                else
                  v199 = 1;
                v200 = !v199;
                if (!v199 && a5 && a6)
                  goto LABEL_1693;
                if (a5)
                  v200 = 0;
                if (v200 == 1 && a6)
                {
LABEL_1693:
                  result = 0;
                  v8 = vt_Copy_xf444_TRC_Tone_Mat_TRC_b64a;
                  goto LABEL_6559;
                }
                if (a3)
                  v450 = a4 == 0;
                else
                  v450 = 0;
                v451 = !v450;
                if (a6 && !v451 && !a5 || a5 && v451 != 1 && a6)
                {
                  result = 0;
                  v8 = vt_Copy_xf444_TRC_Mat_TRC_b64a;
                  goto LABEL_6559;
                }
                result = 0;
                v313 = a4 | a3 | a5 | a6;
                v8 = vt_Copy_xf444_rgb_b64a;
                goto LABEL_6557;
              }
              if (a2 != 1815162994)
              {
                if (a2 != 1815491698)
                  goto LABEL_6559;
                if (a3)
                  v39 = a4 == 0;
                else
                  v39 = 1;
                v40 = !v39;
                if (!v39 && a5 && a6)
                  goto LABEL_395;
                if (a5)
                  v40 = 0;
                if (v40 == 1 && a6)
                {
LABEL_395:
                  result = 0;
                  v8 = vt_Copy_xf444_TRC_Tone_Mat_TRC_l64r;
                  goto LABEL_6559;
                }
                if (a3)
                  v424 = a4 == 0;
                else
                  v424 = 0;
                v425 = !v424;
                if (a6 && !v425 && !a5 || a5 && v425 != 1 && a6)
                {
                  result = 0;
                  v8 = vt_Copy_xf444_TRC_Mat_TRC_l64r;
                  goto LABEL_6559;
                }
                result = 0;
                v313 = a4 | a3 | a5 | a6;
                v8 = vt_Copy_xf444_rgb_l64r;
                goto LABEL_6557;
              }
              goto LABEL_530;
            }
            if (a2 == 1380411457)
            {
              if (a3)
                v197 = a4 == 0;
              else
                v197 = 1;
              v198 = !v197;
              if (!v197 && a5 && a6)
                goto LABEL_1679;
              if (a5)
                v198 = 0;
              if (v198 == 1 && a6)
              {
LABEL_1679:
                result = 0;
                v8 = vt_Copy_xf444_TRC_Tone_Mat_TRC_RGhA;
                goto LABEL_6559;
              }
              if (a3)
                v448 = a4 == 0;
              else
                v448 = 0;
              v449 = !v448;
              if (a6 && !v449 && !a5 || a5 && v449 != 1 && a6)
              {
                result = 0;
                v8 = vt_Copy_xf444_TRC_Mat_TRC_RGhA;
                goto LABEL_6559;
              }
              result = 0;
              v313 = a4 | a3 | a5 | a6;
              v8 = vt_Copy_xf444_rgb_RGhA;
              goto LABEL_6557;
            }
            if (a2 != 1630697081)
            {
              v16 = 1647534392;
              goto LABEL_209;
            }
LABEL_544:
            if (a3)
              v60 = a4 == 0;
            else
              v60 = 1;
            v61 = !v60;
            if (!v60 && a5 && a6)
              goto LABEL_557;
            if (a5)
              v61 = 0;
            if (v61 == 1 && a6)
            {
LABEL_557:
              result = 0;
              v8 = vt_Copy_xf444_TRC_Tone_Mat_TRC_2vuyf;
              goto LABEL_6559;
            }
            if (a3)
              v251 = a4 == 0;
            else
              v251 = 0;
            v252 = !v251;
            if (a6 && !v252 && !a5 || a5 && v252 != 1 && a6)
            {
              result = 0;
              v8 = vt_Copy_xf444_TRC_Mat_TRC_2vuyf;
              goto LABEL_6559;
            }
            result = 0;
            v313 = a4 | a3 | a5 | a6;
            v8 = vt_Copy_xf444_rgb_2vuyf;
            goto LABEL_6557;
          }
          if (a2 > 875704949)
          {
            if (a2 <= 1111970368)
            {
              if (a2 != 875704950)
              {
                if (a2 != 875836518 && a2 != 875836534)
                  goto LABEL_6559;
                goto LABEL_215;
              }
LABEL_352:
              if (a3)
                v35 = a4 == 0;
              else
                v35 = 1;
              v36 = !v35;
              if (!v35 && a5 && a6)
                goto LABEL_365;
              if (a5)
                v36 = 0;
              if (v36 == 1 && a6)
              {
LABEL_365:
                result = 0;
                v8 = vt_Copy_xf444_TRC_Tone_Mat_TRC_422vf;
                goto LABEL_6559;
              }
              if (a3)
                v243 = a4 == 0;
              else
                v243 = 0;
              v244 = !v243;
              if (a6 && !v244 && !a5 || a5 && v244 != 1 && a6)
              {
                result = 0;
                v8 = vt_Copy_xf444_TRC_Mat_TRC_422vf;
                goto LABEL_6559;
              }
              result = 0;
              v313 = a4 | a3 | a5 | a6;
              v8 = vt_Copy_xf444_rgb_422vf;
              goto LABEL_6557;
            }
            if (a2 != 1111970369 && a2 != 1380401729)
            {
              if (a2 != 1380410945)
                goto LABEL_6559;
              if (a3)
                v47 = a4 == 0;
              else
                v47 = 1;
              v48 = !v47;
              if (!v47 && a5 && a6)
                goto LABEL_462;
              if (a5)
                v48 = 0;
              if (v48 == 1 && a6)
              {
LABEL_462:
                result = 0;
                v8 = vt_Copy_xf444_TRC_Tone_Mat_TRC_RGfA;
                goto LABEL_6559;
              }
              if (a3)
                v426 = a4 == 0;
              else
                v426 = 0;
              v427 = !v426;
              if (a6 && !v427 && !a5 || a5 && v427 != 1 && a6)
              {
                result = 0;
                v8 = vt_Copy_xf444_TRC_Mat_TRC_RGfA;
                goto LABEL_6559;
              }
              result = 0;
              v313 = a4 | a3 | a5 | a6;
              v8 = vt_Copy_xf444_rgb_RGfA;
              goto LABEL_6557;
            }
          }
          else
          {
            if (a2 > 875704421)
            {
              if (a2 != 875704422 && a2 != 875704438)
              {
                if (a2 != 875704934)
                  goto LABEL_6559;
                goto LABEL_352;
              }
              goto LABEL_575;
            }
            if (a2 != 32)
            {
              if (a2 != 846624102 && a2 != 846624121)
                goto LABEL_6559;
              goto LABEL_544;
            }
          }
          if (a1 == 1932812659 || a1 == 2016698739 || a1 == 1949589875)
          {
            if (a3)
              v62 = a4 == 0;
            else
              v62 = 1;
            v63 = !v62;
            if (v62 || !a5 || !a6)
            {
              if (a5)
                v63 = 0;
              if (v63 != 1 || !a6)
              {
LABEL_2246:
                if (a3)
                  v273 = a4 == 0;
                else
                  v273 = 0;
                v274 = !v273;
                if (a6 && !v274 && !a5 || a5 && v274 != 1 && a6)
                {
                  result = 0;
                  v8 = vt_Copy_xf444_TRC_Mat_TRC_BGRA;
                  goto LABEL_6559;
                }
                result = 0;
                v313 = a4 | a3 | a5 | a6;
                v8 = vt_Copy_xf444_rgb_BGRA;
                goto LABEL_6557;
              }
            }
          }
          else
          {
            if (a3)
              v253 = a4 == 0;
            else
              v253 = 1;
            v254 = !v253;
            if (v253 || !a5 || !a6)
            {
              if (a5)
                v254 = 0;
              if (v254 != 1 || !a6)
                goto LABEL_2246;
            }
          }
          result = 0;
          v8 = vt_Copy_xf444_TRC_Tone_Mat_TRC_BGRA;
          goto LABEL_6559;
        }
        v12 = 2016698739;
      }
LABEL_81:
      if (a1 != v12)
        goto LABEL_6559;
      goto LABEL_82;
    }
    if (a1 <= 1999843441)
    {
      if (a1 != 1982882104)
      {
        if (a1 != 1983013176)
        {
          v11 = 1983144248;
          goto LABEL_54;
        }
LABEL_128:
        v8 = 0;
        if (a2 > 1937125937)
        {
          if (a2 > 1983013175)
          {
            if (a2 > 2016687155)
            {
              if (a2 > 2019963441)
              {
                if (a2 > 2037741157)
                {
                  if (a2 != 2037741158 && a2 != 2037741171)
                    goto LABEL_6559;
                  if (a3)
                    v338 = a4 == 0;
                  else
                    v338 = 1;
                  v339 = !v338;
                  if (!v338 && a5 && a6)
                    goto LABEL_2742;
                  if (a5)
                    v339 = 0;
                  if (v339 == 1 && a6)
                  {
LABEL_2742:
                    result = 0;
                    v8 = vt_Copy_422vf_TRC_Tone_Mat_TRC_yuvsf;
                    goto LABEL_6559;
                  }
                  if (a3)
                    v664 = a4 == 0;
                  else
                    v664 = 0;
                  v665 = !v664;
                  if (a6 && !v665 && !a5 || a5 && v665 != 1 && a6)
                  {
                    result = 0;
                    v8 = vt_Copy_422vf_TRC_Mat_TRC_yuvsf;
                    goto LABEL_6559;
                  }
                  result = 0;
                  v313 = a4 | a3 | a5 | a6;
                  v8 = vt_Copy_422vf_rgb_yuvsf;
                  goto LABEL_6557;
                }
                if (a2 != 2019963442)
                {
                  if (a2 != 2019963956)
                    goto LABEL_6559;
LABEL_1908:
                  if (a3)
                    v225 = a4 == 0;
                  else
                    v225 = 1;
                  v226 = !v225;
                  if (v225 || !a5 || !a6)
                  {
                    if (a5)
                      v226 = 0;
                    if (v226 != 1 || !a6)
                    {
LABEL_2668:
                      if (a3)
                        v328 = a4 == 0;
                      else
                        v328 = 0;
                      v329 = !v328;
                      if (a6 && !v329 && !a5 || a5 && v329 != 1 && a6)
                      {
                        result = 0;
                        v8 = vt_Copy_422vf_TRC_Mat_TRC_xf444;
                        goto LABEL_6559;
                      }
                      result = 0;
                      v313 = a4 | a3 | a5 | a6;
                      v8 = vt_Copy_422vf_rgb_xf444;
                      goto LABEL_6557;
                    }
                  }
LABEL_2245:
                  result = 0;
                  v8 = vt_Copy_422vf_TRC_Tone_Mat_TRC_xf444;
                  goto LABEL_6559;
                }
LABEL_1812:
                if (a3)
                  v213 = a4 == 0;
                else
                  v213 = 1;
                v214 = !v213;
                if (v213 || !a5 || !a6)
                {
                  if (a5)
                    v214 = 0;
                  if (v214 != 1 || !a6)
                  {
LABEL_2655:
                    if (a3)
                      v326 = a4 == 0;
                    else
                      v326 = 0;
                    v327 = !v326;
                    if (a6 && !v327 && !a5 || a5 && v327 != 1 && a6)
                    {
                      result = 0;
                      v8 = vt_Copy_422vf_TRC_Mat_TRC_xf422;
                      goto LABEL_6559;
                    }
                    result = 0;
                    v313 = a4 | a3 | a5 | a6;
                    v8 = vt_Copy_422vf_rgb_xf422;
                    goto LABEL_6557;
                  }
                }
LABEL_2231:
                result = 0;
                v8 = vt_Copy_422vf_TRC_Tone_Mat_TRC_xf422;
                goto LABEL_6559;
              }
              if (a2 == 2016687156 || a2 == 2016698739)
                goto LABEL_1908;
              if (a2 != 2019963440)
                goto LABEL_6559;
LABEL_1826:
              if (a3)
                v215 = a4 == 0;
              else
                v215 = 1;
              v216 = !v215;
              if (v215 || !a5 || !a6)
              {
                if (a5)
                  v216 = 0;
                if (v216 != 1 || !a6)
                {
LABEL_3298:
                  if (a3)
                    v414 = a4 == 0;
                  else
                    v414 = 0;
                  v415 = !v414;
                  if (a6 && !v415 && !a5 || a5 && v415 != 1 && a6)
                  {
                    result = 0;
                    v8 = vt_Copy_422vf_TRC_Mat_TRC_xf420;
                    goto LABEL_6559;
                  }
                  result = 0;
                  v313 = a4 | a3 | a5 | a6;
                  v8 = vt_Copy_422vf_rgb_xf420;
                  goto LABEL_6557;
                }
              }
LABEL_1971:
              result = 0;
              v8 = vt_Copy_422vf_TRC_Tone_Mat_TRC_xf420;
              goto LABEL_6559;
            }
            if (a2 <= 2016567666)
            {
              if (a2 != 1983013176)
              {
                if (a2 != 1983144248)
                {
                  v56 = 1999843442;
LABEL_989:
                  if (a2 != v56)
                    goto LABEL_6559;
LABEL_1986:
                  if (a3)
                    v235 = a4 == 0;
                  else
                    v235 = 1;
                  v236 = !v235;
                  if (!v235 && a5 && a6)
                    goto LABEL_1999;
                  if (a5)
                    v236 = 0;
                  if (v236 == 1 && a6)
                  {
LABEL_1999:
                    result = 0;
                    v8 = vt_Copy_422vf_TRC_Tone_Mat_TRC_l10r;
                    goto LABEL_6559;
                  }
                  if (a3)
                    v544 = a4 == 0;
                  else
                    v544 = 0;
                  v545 = !v544;
                  if (a6 && !v545 && !a5 || a5 && v545 != 1 && a6)
                  {
                    result = 0;
                    v8 = vt_Copy_422vf_TRC_Mat_TRC_l10r;
                    goto LABEL_6559;
                  }
                  result = 0;
                  v313 = a4 | a3 | a5 | a6;
                  v8 = vt_Copy_422vf_rgb_l10r;
                  goto LABEL_6557;
                }
LABEL_1033:
                if (a3)
                  v121 = a4 == 0;
                else
                  v121 = 1;
                v122 = !v121;
                if (!v121 && a5 && a6)
                  goto LABEL_1046;
                if (a5)
                  v122 = 0;
                if (v122 == 1 && a6)
                {
LABEL_1046:
                  result = 0;
                  v8 = vt_Copy_422vf_TRC_Tone_Mat_TRC_444vf;
                  goto LABEL_6559;
                }
                if (a3)
                  v536 = a4 == 0;
                else
                  v536 = 0;
                v537 = !v536;
                if (a6 && !v537 && !a5 || a5 && v537 != 1 && a6)
                {
                  result = 0;
                  v8 = vt_Copy_422vf_TRC_Mat_TRC_444vf;
                  goto LABEL_6559;
                }
                result = 0;
                v313 = a4 | a3 | a5 | a6;
                v8 = vt_Copy_422vf_rgb_444vf;
                goto LABEL_6557;
              }
              goto LABEL_1722;
            }
            if (a2 == 2016567667)
              goto LABEL_1812;
            if (a2 == 2016686640)
              goto LABEL_1826;
            v38 = 2016686642;
LABEL_1811:
            if (a2 != v38)
              goto LABEL_6559;
            goto LABEL_1812;
          }
          if (a2 <= 1952855091)
          {
            if (a2 > 1949589874)
            {
              if (a2 == 1949589875)
                goto LABEL_1908;
              if (a2 == 1952854576)
                goto LABEL_1826;
              v38 = 1952854578;
              goto LABEL_1811;
            }
            if (a2 != 1937125938)
            {
              if (a2 != 1937126452)
              {
                v38 = 1949458803;
                goto LABEL_1811;
              }
LABEL_2232:
              if (a3)
                v271 = a4 == 0;
              else
                v271 = 1;
              v272 = !v271;
              if (v271 || !a5 || !a6)
              {
                if (a5)
                  v272 = 0;
                if (v272 != 1 || !a6)
                  goto LABEL_2668;
              }
              goto LABEL_2245;
            }
LABEL_2218:
            if (a3)
              v269 = a4 == 0;
            else
              v269 = 1;
            v270 = !v269;
            if (v269 || !a5 || !a6)
            {
              if (a5)
                v270 = 0;
              if (v270 != 1 || !a6)
                goto LABEL_2655;
            }
            goto LABEL_2231;
          }
          if (a2 <= 1953903667)
          {
            if (a2 == 1952855092)
              goto LABEL_1908;
            if (a2 == 1953903152)
              goto LABEL_1826;
            v38 = 1953903154;
            goto LABEL_1811;
          }
          if (a2 == 1953903668)
            goto LABEL_1908;
          if (a2 != 1982882104)
          {
            if (a2 != 1983000886)
              goto LABEL_6559;
            if (a3)
              v223 = a4 == 0;
            else
              v223 = 1;
            v224 = !v223;
            if (!v223 && a5 && a6)
              goto LABEL_1907;
            if (a5)
              v224 = 0;
            if (v224 == 1 && a6)
            {
LABEL_1907:
              result = 0;
              v8 = vt_Copy_422vf_TRC_Tone_Mat_TRC_v216;
              goto LABEL_6559;
            }
            if (a3)
              v734 = a4 == 0;
            else
              v734 = 0;
            v735 = !v734;
            if (a6 && !v735 && !a5 || a5 && v735 != 1 && a6)
            {
              result = 0;
              v8 = vt_Copy_422vf_TRC_Mat_TRC_v216;
              goto LABEL_6559;
            }
            result = 0;
            v313 = a4 | a3 | a5 | a6;
            v8 = vt_Copy_422vf_rgb_v216;
            goto LABEL_6557;
          }
LABEL_2204:
          if (a3)
            v267 = a4 == 0;
          else
            v267 = 1;
          v268 = !v267;
          if (!v267 && a5 && a6)
            goto LABEL_2217;
          if (a5)
            v268 = 0;
          if (v268 == 1 && a6)
          {
LABEL_2217:
            result = 0;
            v8 = vt_Copy_422vf_TRC_Tone_Mat_TRC_420vf;
            goto LABEL_6559;
          }
          if (a3)
            v560 = a4 == 0;
          else
            v560 = 0;
          v561 = !v560;
          if (a6 && !v561 && !a5 || a5 && v561 != 1 && a6)
          {
            result = 0;
            v8 = vt_Copy_422vf_TRC_Mat_TRC_420vf;
            goto LABEL_6559;
          }
          result = 0;
          v313 = a4 | a3 | a5 | a6;
          v8 = vt_Copy_422vf_rgb_420vf;
          goto LABEL_6557;
        }
        if (a2 <= 1380411456)
        {
          if (a2 > 875704949)
          {
            if (a2 <= 1111970368)
            {
              if (a2 != 875704950)
              {
                if (a2 != 875836518 && a2 != 875836534)
                  goto LABEL_6559;
                goto LABEL_1033;
              }
LABEL_1722:
              if (a3)
                v203 = a4 == 0;
              else
                v203 = 1;
              v204 = !v203;
              if (!v203 && a5 && a6)
                goto LABEL_1735;
              if (a5)
                v204 = 0;
              if (v204 == 1 && a6)
              {
LABEL_1735:
                result = 0;
                v8 = vt_Copy_422vf_TRC_Tone_Mat_TRC_422vf;
                goto LABEL_6559;
              }
              if (a3)
                v540 = a4 == 0;
              else
                v540 = 0;
              v541 = !v540;
              if (a6 && !v541 && !a5 || a5 && v541 != 1 && a6)
              {
                result = 0;
                v8 = vt_Copy_422vf_TRC_Mat_TRC_422vf;
                goto LABEL_6559;
              }
              result = 0;
              v313 = a4 | a3 | a5 | a6;
              v8 = vt_Copy_422vf_rgb_422vf;
              goto LABEL_6557;
            }
            if (a2 != 1111970369 && a2 != 1380401729)
            {
              if (a2 != 1380410945)
                goto LABEL_6559;
              if (a3)
                v219 = a4 == 0;
              else
                v219 = 1;
              v220 = !v219;
              if (!v219 && a5 && a6)
                goto LABEL_1873;
              if (a5)
                v220 = 0;
              if (v220 == 1 && a6)
              {
LABEL_1873:
                result = 0;
                v8 = vt_Copy_422vf_TRC_Tone_Mat_TRC_RGfA;
                goto LABEL_6559;
              }
              if (a3)
                v730 = a4 == 0;
              else
                v730 = 0;
              v731 = !v730;
              if (a6 && !v731 && !a5 || a5 && v731 != 1 && a6)
              {
                result = 0;
                v8 = vt_Copy_422vf_TRC_Mat_TRC_RGfA;
                goto LABEL_6559;
              }
              result = 0;
              v313 = a4 | a3 | a5 | a6;
              v8 = vt_Copy_422vf_rgb_RGfA;
              goto LABEL_6557;
            }
          }
          else
          {
            if (a2 > 875704421)
            {
              if (a2 != 875704422 && a2 != 875704438)
              {
                if (a2 != 875704934)
                  goto LABEL_6559;
                goto LABEL_1722;
              }
              goto LABEL_2204;
            }
            if (a2 != 32)
            {
              if (a2 != 846624102 && a2 != 846624121)
                goto LABEL_6559;
              goto LABEL_2068;
            }
          }
          if (a3)
            v263 = a4 == 0;
          else
            v263 = 1;
          v264 = !v263;
          if (!v263 && a5 && a6)
            goto LABEL_2189;
          if (a5)
            v264 = 0;
          if (v264 == 1 && a6)
          {
LABEL_2189:
            result = 0;
            v8 = vt_Copy_422vf_TRC_Tone_Mat_TRC_BGRA;
            goto LABEL_6559;
          }
          if (a3)
            v556 = a4 == 0;
          else
            v556 = 0;
          v557 = !v556;
          if (a6 && !v557 && !a5 || a5 && v557 != 1 && a6)
          {
            result = 0;
            v8 = vt_Copy_422vf_TRC_Mat_TRC_BGRA;
            goto LABEL_6559;
          }
          result = 0;
          v313 = a4 | a3 | a5 | a6;
          v8 = vt_Copy_422vf_rgb_BGRA;
          goto LABEL_6557;
        }
        if (a2 > 1932681586)
        {
          if (a2 > 1936077361)
          {
            if (a2 == 1936077362)
              goto LABEL_2218;
            if (a2 == 1936077876)
              goto LABEL_2232;
            v138 = 1937125936;
          }
          else
          {
            if (a2 == 1932681587)
              goto LABEL_2218;
            if (a2 == 1932812659)
              goto LABEL_2232;
            v138 = 1936077360;
          }
          if (a2 != v138)
            goto LABEL_6559;
          if (a3)
            v231 = a4 == 0;
          else
            v231 = 1;
          v232 = !v231;
          if (v231 || !a5 || !a6)
          {
            if (a5)
              v232 = 0;
            if (v232 != 1 || !a6)
              goto LABEL_3298;
          }
          goto LABEL_1971;
        }
        if (a2 > 1647719520)
        {
          if (a2 == 1647719521)
          {
            if (a3)
              v454 = a4 == 0;
            else
              v454 = 1;
            v455 = !v454;
            if (!v454 && a5 && a6)
              goto LABEL_3580;
            if (a5)
              v455 = 0;
            if (v455 == 1 && a6)
            {
LABEL_3580:
              result = 0;
              v8 = vt_Copy_422vf_TRC_Tone_Mat_TRC_b64a;
              goto LABEL_6559;
            }
            if (a3)
              v742 = a4 == 0;
            else
              v742 = 0;
            v743 = !v742;
            if (a6 && !v743 && !a5 || a5 && v743 != 1 && a6)
            {
              result = 0;
              v8 = vt_Copy_422vf_TRC_Mat_TRC_b64a;
              goto LABEL_6559;
            }
            result = 0;
            v313 = a4 | a3 | a5 | a6;
            v8 = vt_Copy_422vf_rgb_b64a;
            goto LABEL_6557;
          }
          if (a2 != 1815162994)
          {
            if (a2 != 1815491698)
              goto LABEL_6559;
            if (a3)
              v207 = a4 == 0;
            else
              v207 = 1;
            v208 = !v207;
            if (!v207 && a5 && a6)
              goto LABEL_1775;
            if (a5)
              v208 = 0;
            if (v208 == 1 && a6)
            {
LABEL_1775:
              result = 0;
              v8 = vt_Copy_422vf_TRC_Tone_Mat_TRC_l64r;
              goto LABEL_6559;
            }
            if (a3)
              v726 = a4 == 0;
            else
              v726 = 0;
            v727 = !v726;
            if (a6 && !v727 && !a5 || a5 && v727 != 1 && a6)
            {
              result = 0;
              v8 = vt_Copy_422vf_TRC_Mat_TRC_l64r;
              goto LABEL_6559;
            }
            result = 0;
            v313 = a4 | a3 | a5 | a6;
            v8 = vt_Copy_422vf_rgb_l64r;
            goto LABEL_6557;
          }
          goto LABEL_1986;
        }
        if (a2 == 1380411457)
        {
          if (a3)
            v432 = a4 == 0;
          else
            v432 = 1;
          v433 = !v432;
          if (!v432 && a5 && a6)
            goto LABEL_3435;
          if (a5)
            v433 = 0;
          if (v433 == 1 && a6)
          {
LABEL_3435:
            result = 0;
            v8 = vt_Copy_422vf_TRC_Tone_Mat_TRC_RGhA;
            goto LABEL_6559;
          }
          if (a3)
            v738 = a4 == 0;
          else
            v738 = 0;
          v739 = !v738;
          if (a6 && !v739 && !a5 || a5 && v739 != 1 && a6)
          {
            result = 0;
            v8 = vt_Copy_422vf_TRC_Mat_TRC_RGhA;
            goto LABEL_6559;
          }
          result = 0;
          v313 = a4 | a3 | a5 | a6;
          v8 = vt_Copy_422vf_rgb_RGhA;
          goto LABEL_6557;
        }
        if (a2 != 1630697081)
        {
          v56 = 1647534392;
          goto LABEL_989;
        }
LABEL_2068:
        if (a3)
          v247 = a4 == 0;
        else
          v247 = 1;
        v248 = !v247;
        if (!v247 && a5 && a6)
          goto LABEL_2081;
        if (a5)
          v248 = 0;
        if (v248 == 1 && a6)
        {
LABEL_2081:
          result = 0;
          v8 = vt_Copy_422vf_TRC_Tone_Mat_TRC_2vuyf;
          goto LABEL_6559;
        }
        if (a3)
          v550 = a4 == 0;
        else
          v550 = 0;
        v551 = !v550;
        if (a6 && !v551 && !a5 || a5 && v551 != 1 && a6)
        {
          result = 0;
          v8 = vt_Copy_422vf_TRC_Mat_TRC_2vuyf;
          goto LABEL_6559;
        }
        result = 0;
        v313 = a4 | a3 | a5 | a6;
        v8 = vt_Copy_422vf_rgb_2vuyf;
        goto LABEL_6557;
      }
LABEL_120:
      v8 = 0;
      if (a2 > 1937125937)
      {
        if (a2 > 1983013175)
        {
          if (a2 > 2016687155)
          {
            if (a2 > 2019963441)
            {
              if (a2 > 2037741157)
              {
                if (a2 != 2037741158 && a2 != 2037741171)
                  goto LABEL_6559;
                if (a3)
                  v336 = a4 == 0;
                else
                  v336 = 1;
                v337 = !v336;
                if (!v336 && a5 && a6)
                  goto LABEL_2726;
                if (a5)
                  v337 = 0;
                if (v337 == 1 && a6)
                {
LABEL_2726:
                  result = 0;
                  v8 = vt_Copy_420vf_TRC_Tone_Mat_TRC_yuvsf;
                  goto LABEL_6559;
                }
                if (a3)
                  v662 = a4 == 0;
                else
                  v662 = 0;
                v663 = !v662;
                if (a6 && !v663 && !a5 || a5 && v663 != 1 && a6)
                {
                  result = 0;
                  v8 = vt_Copy_420vf_TRC_Mat_TRC_yuvsf;
                  goto LABEL_6559;
                }
                result = 0;
                v313 = a4 | a3 | a5 | a6;
                v8 = vt_Copy_420vf_rgb_yuvsf;
                goto LABEL_6557;
              }
              if (a2 != 2019963442)
              {
                if (a2 != 2019963956)
                  goto LABEL_6559;
                goto LABEL_1940;
              }
LABEL_1780:
              if (a3)
                v209 = a4 == 0;
              else
                v209 = 1;
              v210 = !v209;
              if (!v209 && a5 && a6)
                goto LABEL_1793;
              if (a5)
                v210 = 0;
              if (v210 == 1 && a6)
              {
LABEL_1793:
                result = 0;
                v8 = vt_Copy_420vf_TRC_Tone_Mat_TRC_xf422;
                goto LABEL_6559;
              }
              if (a3)
                v309 = a4 == 0;
              else
                v309 = 0;
              v310 = !v309;
              if (a6 && !v310 && !a5 || a5 && v310 != 1 && a6)
              {
                result = 0;
                v8 = vt_Copy_420vf_TRC_Mat_TRC_xf422;
                goto LABEL_6559;
              }
              result = 0;
              v313 = a4 | a3 | a5 | a6;
              v8 = vt_Copy_420vf_rgb_xf422;
              goto LABEL_6557;
            }
            if (a2 != 2016687156 && a2 != 2016698739)
            {
              if (a2 != 2019963440)
                goto LABEL_6559;
              goto LABEL_1794;
            }
LABEL_1940:
            if (a3)
              v229 = a4 == 0;
            else
              v229 = 1;
            v230 = !v229;
            if (!v229 && a5 && a6)
              goto LABEL_1953;
            if (a5)
              v230 = 0;
            if (v230 == 1 && a6)
            {
LABEL_1953:
              result = 0;
              v8 = vt_Copy_420vf_TRC_Tone_Mat_TRC_xf444;
              goto LABEL_6559;
            }
            if (a3)
              v322 = a4 == 0;
            else
              v322 = 0;
            v323 = !v322;
            if (a6 && !v323 && !a5 || a5 && v323 != 1 && a6)
            {
              result = 0;
              v8 = vt_Copy_420vf_TRC_Mat_TRC_xf444;
              goto LABEL_6559;
            }
            result = 0;
            v313 = a4 | a3 | a5 | a6;
            v8 = vt_Copy_420vf_rgb_xf444;
            goto LABEL_6557;
          }
          if (a2 <= 2016567666)
          {
            if (a2 != 1983013176)
            {
              if (a2 != 1983144248)
              {
                v55 = 1999843442;
LABEL_983:
                if (a2 != v55)
                  goto LABEL_6559;
LABEL_1972:
                if (a3)
                  v233 = a4 == 0;
                else
                  v233 = 1;
                v234 = !v233;
                if (!v233 && a5 && a6)
                  goto LABEL_1985;
                if (a5)
                  v234 = 0;
                if (v234 == 1 && a6)
                {
LABEL_1985:
                  result = 0;
                  v8 = vt_Copy_420vf_TRC_Tone_Mat_TRC_l10r;
                  goto LABEL_6559;
                }
                if (a3)
                  v542 = a4 == 0;
                else
                  v542 = 0;
                v543 = !v542;
                if (a6 && !v543 && !a5 || a5 && v543 != 1 && a6)
                {
                  result = 0;
                  v8 = vt_Copy_420vf_TRC_Mat_TRC_l10r;
                  goto LABEL_6559;
                }
                result = 0;
                v313 = a4 | a3 | a5 | a6;
                v8 = vt_Copy_420vf_rgb_l10r;
                goto LABEL_6557;
              }
LABEL_1015:
              if (a3)
                v119 = a4 == 0;
              else
                v119 = 1;
              v120 = !v119;
              if (!v119 && a5 && a6)
                goto LABEL_1028;
              if (a5)
                v120 = 0;
              if (v120 == 1 && a6)
              {
LABEL_1028:
                result = 0;
                v8 = vt_Copy_420vf_TRC_Tone_Mat_TRC_444vf;
                goto LABEL_6559;
              }
              if (a3)
                v534 = a4 == 0;
              else
                v534 = 0;
              v535 = !v534;
              if (a6 && !v535 && !a5 || a5 && v535 != 1 && a6)
              {
                result = 0;
                v8 = vt_Copy_420vf_TRC_Mat_TRC_444vf;
                goto LABEL_6559;
              }
              result = 0;
              v313 = a4 | a3 | a5 | a6;
              v8 = vt_Copy_420vf_rgb_444vf;
              goto LABEL_6557;
            }
            goto LABEL_1705;
          }
          if (a2 == 2016567667)
            goto LABEL_1780;
          if (a2 == 2016686640)
          {
LABEL_1794:
            if (a3)
              v211 = a4 == 0;
            else
              v211 = 1;
            v212 = !v211;
            if (v211 || !a5 || !a6)
            {
              if (a5)
                v212 = 0;
              if (v212 != 1 || !a6)
              {
LABEL_3285:
                if (a3)
                  v412 = a4 == 0;
                else
                  v412 = 0;
                v413 = !v412;
                if (a6 && !v413 && !a5 || a5 && v413 != 1 && a6)
                {
                  result = 0;
                  v8 = vt_Copy_420vf_TRC_Mat_TRC_xf420;
                  goto LABEL_6559;
                }
                result = 0;
                v313 = a4 | a3 | a5 | a6;
                v8 = vt_Copy_420vf_rgb_xf420;
                goto LABEL_6557;
              }
            }
LABEL_1939:
            result = 0;
            v8 = vt_Copy_420vf_TRC_Tone_Mat_TRC_xf420;
            goto LABEL_6559;
          }
          v37 = 2016686642;
LABEL_1779:
          if (a2 != v37)
            goto LABEL_6559;
          goto LABEL_1780;
        }
        if (a2 <= 1952855091)
        {
          if (a2 > 1949589874)
          {
            if (a2 == 1949589875)
              goto LABEL_1940;
            if (a2 == 1952854576)
              goto LABEL_1794;
            v37 = 1952854578;
          }
          else
          {
            if (a2 == 1937125938)
              goto LABEL_1780;
            if (a2 == 1937126452)
              goto LABEL_1940;
            v37 = 1949458803;
          }
          goto LABEL_1779;
        }
        if (a2 <= 1953903667)
        {
          if (a2 == 1952855092)
            goto LABEL_1940;
          if (a2 == 1953903152)
            goto LABEL_1794;
          v37 = 1953903154;
          goto LABEL_1779;
        }
        if (a2 == 1953903668)
          goto LABEL_1940;
        if (a2 != 1982882104)
        {
          if (a2 != 1983000886)
            goto LABEL_6559;
          if (a3)
            v221 = a4 == 0;
          else
            v221 = 1;
          v222 = !v221;
          if (!v221 && a5 && a6)
            goto LABEL_1890;
          if (a5)
            v222 = 0;
          if (v222 == 1 && a6)
          {
LABEL_1890:
            result = 0;
            v8 = vt_Copy_420vf_TRC_Tone_Mat_TRC_v216;
            goto LABEL_6559;
          }
          if (a3)
            v732 = a4 == 0;
          else
            v732 = 0;
          v733 = !v732;
          if (a6 && !v733 && !a5 || a5 && v733 != 1 && a6)
          {
            result = 0;
            v8 = vt_Copy_420vf_TRC_Mat_TRC_v216;
            goto LABEL_6559;
          }
          result = 0;
          v313 = a4 | a3 | a5 | a6;
          v8 = vt_Copy_420vf_rgb_v216;
          goto LABEL_6557;
        }
LABEL_2190:
        if (a3)
          v265 = a4 == 0;
        else
          v265 = 1;
        v266 = !v265;
        if (!v265 && a5 && a6)
          goto LABEL_2203;
        if (a5)
          v266 = 0;
        if (v266 == 1 && a6)
        {
LABEL_2203:
          result = 0;
          v8 = vt_Copy_420vf_TRC_Tone_Mat_TRC_420vf;
          goto LABEL_6559;
        }
        if (a3)
          v558 = a4 == 0;
        else
          v558 = 0;
        v559 = !v558;
        if (a6 && !v559 && !a5 || a5 && v559 != 1 && a6)
        {
          result = 0;
          v8 = vt_Copy_420vf_TRC_Mat_TRC_420vf;
          goto LABEL_6559;
        }
        result = 0;
        v313 = a4 | a3 | a5 | a6;
        v8 = vt_Copy_420vf_rgb_420vf;
        goto LABEL_6557;
      }
      if (a2 <= 1380411456)
      {
        if (a2 > 875704949)
        {
          if (a2 <= 1111970368)
          {
            if (a2 != 875704950)
            {
              if (a2 != 875836518 && a2 != 875836534)
                goto LABEL_6559;
              goto LABEL_1015;
            }
LABEL_1705:
            if (a3)
              v201 = a4 == 0;
            else
              v201 = 1;
            v202 = !v201;
            if (!v201 && a5 && a6)
              goto LABEL_1718;
            if (a5)
              v202 = 0;
            if (v202 == 1 && a6)
            {
LABEL_1718:
              result = 0;
              v8 = vt_Copy_420vf_TRC_Tone_Mat_TRC_422vf;
              goto LABEL_6559;
            }
            if (a3)
              v538 = a4 == 0;
            else
              v538 = 0;
            v539 = !v538;
            if (a6 && !v539 && !a5 || a5 && v539 != 1 && a6)
            {
              result = 0;
              v8 = vt_Copy_420vf_TRC_Mat_TRC_422vf;
              goto LABEL_6559;
            }
            result = 0;
            v313 = a4 | a3 | a5 | a6;
            v8 = vt_Copy_420vf_rgb_422vf;
            goto LABEL_6557;
          }
          if (a2 != 1111970369 && a2 != 1380401729)
          {
            if (a2 != 1380410945)
              goto LABEL_6559;
            if (a3)
              v217 = a4 == 0;
            else
              v217 = 1;
            v218 = !v217;
            if (!v217 && a5 && a6)
              goto LABEL_1856;
            if (a5)
              v218 = 0;
            if (v218 == 1 && a6)
            {
LABEL_1856:
              result = 0;
              v8 = vt_Copy_420vf_TRC_Tone_Mat_TRC_RGfA;
              goto LABEL_6559;
            }
            if (a3)
              v728 = a4 == 0;
            else
              v728 = 0;
            v729 = !v728;
            if (a6 && !v729 && !a5 || a5 && v729 != 1 && a6)
            {
              result = 0;
              v8 = vt_Copy_420vf_TRC_Mat_TRC_RGfA;
              goto LABEL_6559;
            }
            result = 0;
            v313 = a4 | a3 | a5 | a6;
            v8 = vt_Copy_420vf_rgb_RGfA;
            goto LABEL_6557;
          }
        }
        else
        {
          if (a2 > 875704421)
          {
            if (a2 != 875704422 && a2 != 875704438)
            {
              if (a2 != 875704934)
                goto LABEL_6559;
              goto LABEL_1705;
            }
            goto LABEL_2190;
          }
          if (a2 != 32)
          {
            if (a2 != 846624102 && a2 != 846624121)
              goto LABEL_6559;
            goto LABEL_2054;
          }
        }
        if (a3)
          v261 = a4 == 0;
        else
          v261 = 1;
        v262 = !v261;
        if (!v261 && a5 && a6)
          goto LABEL_2175;
        if (a5)
          v262 = 0;
        if (v262 == 1 && a6)
        {
LABEL_2175:
          result = 0;
          v8 = vt_Copy_420vf_TRC_Tone_Mat_TRC_BGRA;
          goto LABEL_6559;
        }
        if (a3)
          v554 = a4 == 0;
        else
          v554 = 0;
        v555 = !v554;
        if (a6 && !v555 && !a5 || a5 && v555 != 1 && a6)
        {
          result = 0;
          v8 = vt_Copy_420vf_TRC_Mat_TRC_BGRA;
          goto LABEL_6559;
        }
        result = 0;
        v313 = a4 | a3 | a5 | a6;
        v8 = vt_Copy_420vf_rgb_BGRA;
        goto LABEL_6557;
      }
      if (a2 > 1932681586)
      {
        if (a2 > 1936077361)
        {
          if (a2 == 1936077362)
            goto LABEL_1780;
          if (a2 == 1936077876)
            goto LABEL_1940;
          v137 = 1937125936;
        }
        else
        {
          if (a2 == 1932681587)
            goto LABEL_1780;
          if (a2 == 1932812659)
            goto LABEL_1940;
          v137 = 1936077360;
        }
        if (a2 != v137)
          goto LABEL_6559;
        if (a3)
          v227 = a4 == 0;
        else
          v227 = 1;
        v228 = !v227;
        if (v227 || !a5 || !a6)
        {
          if (a5)
            v228 = 0;
          if (v228 != 1 || !a6)
            goto LABEL_3285;
        }
        goto LABEL_1939;
      }
      if (a2 > 1647719520)
      {
        if (a2 == 1647719521)
        {
          if (a3)
            v452 = a4 == 0;
          else
            v452 = 1;
          v453 = !v452;
          if (!v452 && a5 && a6)
            goto LABEL_3566;
          if (a5)
            v453 = 0;
          if (v453 == 1 && a6)
          {
LABEL_3566:
            result = 0;
            v8 = vt_Copy_420vf_TRC_Tone_Mat_TRC_b64a;
            goto LABEL_6559;
          }
          if (a3)
            v740 = a4 == 0;
          else
            v740 = 0;
          v741 = !v740;
          if (a6 && !v741 && !a5 || a5 && v741 != 1 && a6)
          {
            result = 0;
            v8 = vt_Copy_420vf_TRC_Mat_TRC_b64a;
            goto LABEL_6559;
          }
          result = 0;
          v313 = a4 | a3 | a5 | a6;
          v8 = vt_Copy_420vf_rgb_b64a;
          goto LABEL_6557;
        }
        if (a2 != 1815162994)
        {
          if (a2 != 1815491698)
            goto LABEL_6559;
          if (a3)
            v205 = a4 == 0;
          else
            v205 = 1;
          v206 = !v205;
          if (!v205 && a5 && a6)
            goto LABEL_1758;
          if (a5)
            v206 = 0;
          if (v206 == 1 && a6)
          {
LABEL_1758:
            result = 0;
            v8 = vt_Copy_420vf_TRC_Tone_Mat_TRC_l64r;
            goto LABEL_6559;
          }
          if (a3)
            v724 = a4 == 0;
          else
            v724 = 0;
          v725 = !v724;
          if (a6 && !v725 && !a5 || a5 && v725 != 1 && a6)
          {
            result = 0;
            v8 = vt_Copy_420vf_TRC_Mat_TRC_l64r;
            goto LABEL_6559;
          }
          result = 0;
          v313 = a4 | a3 | a5 | a6;
          v8 = vt_Copy_420vf_rgb_l64r;
          goto LABEL_6557;
        }
        goto LABEL_1972;
      }
      if (a2 == 1380411457)
      {
        if (a3)
          v430 = a4 == 0;
        else
          v430 = 1;
        v431 = !v430;
        if (!v430 && a5 && a6)
          goto LABEL_3421;
        if (a5)
          v431 = 0;
        if (v431 == 1 && a6)
        {
LABEL_3421:
          result = 0;
          v8 = vt_Copy_420vf_TRC_Tone_Mat_TRC_RGhA;
          goto LABEL_6559;
        }
        if (a3)
          v736 = a4 == 0;
        else
          v736 = 0;
        v737 = !v736;
        if (a6 && !v737 && !a5 || a5 && v737 != 1 && a6)
        {
          result = 0;
          v8 = vt_Copy_420vf_TRC_Mat_TRC_RGhA;
          goto LABEL_6559;
        }
        result = 0;
        v313 = a4 | a3 | a5 | a6;
        v8 = vt_Copy_420vf_rgb_RGhA;
        goto LABEL_6557;
      }
      if (a2 != 1630697081)
      {
        v55 = 1647534392;
        goto LABEL_983;
      }
LABEL_2054:
      if (a3)
        v245 = a4 == 0;
      else
        v245 = 1;
      v246 = !v245;
      if (!v245 && a5 && a6)
        goto LABEL_2067;
      if (a5)
        v246 = 0;
      if (v246 == 1 && a6)
      {
LABEL_2067:
        result = 0;
        v8 = vt_Copy_420vf_TRC_Tone_Mat_TRC_2vuyf;
        goto LABEL_6559;
      }
      if (a3)
        v548 = a4 == 0;
      else
        v548 = 0;
      v549 = !v548;
      if (a6 && !v549 && !a5 || a5 && v549 != 1 && a6)
      {
        result = 0;
        v8 = vt_Copy_420vf_TRC_Mat_TRC_2vuyf;
        goto LABEL_6559;
      }
      result = 0;
      v313 = a4 | a3 | a5 | a6;
      v8 = vt_Copy_420vf_rgb_2vuyf;
      goto LABEL_6557;
    }
    if (a1 != 1999843442)
    {
      if (a1 == 2016567667)
        goto LABEL_90;
      if (a1 != 2016686640)
        goto LABEL_6559;
      goto LABEL_98;
    }
LABEL_136:
    v8 = 0;
    if (a2 > 1936077875)
    {
      if (a2 > 1983000885)
      {
        if (a2 <= 2016687155)
        {
          if (a2 > 1999843441)
          {
            if (a2 <= 2016686639)
            {
              if (a2 != 1999843442)
              {
                v14 = 2016567667;
                goto LABEL_2907;
              }
LABEL_2446:
              if (a3)
                v295 = a4 == 0;
              else
                v295 = 1;
              v296 = !v295;
              if (!v295 && a5 && a6)
                goto LABEL_2459;
              if (a5)
                v296 = 0;
              if (v296 == 1 && a6)
              {
LABEL_2459:
                result = 0;
                v8 = vt_Copy_l10r_TRC_Tone_Mat_TRC_l10r;
                goto LABEL_6559;
              }
              if (a3)
                v566 = a4 == 0;
              else
                v566 = 0;
              v567 = !v566;
              if (a6 && !v567 && !a5 || a5 && v567 != 1 && a6)
              {
                result = 0;
                v8 = vt_Copy_l10r_TRC_Mat_TRC_l10r;
                goto LABEL_6559;
              }
              result = 0;
              v313 = a4 | a3 | a5 | a6;
              v8 = vt_Copy_l10r_rgb_l10r;
              goto LABEL_6557;
            }
            if (a2 != 2016686640)
            {
              v14 = 2016686642;
LABEL_2907:
              if (a2 != v14)
                goto LABEL_6559;
              goto LABEL_2908;
            }
            goto LABEL_2922;
          }
          if (a2 == 1983000886)
          {
            if (a3)
              v496 = a4 == 0;
            else
              v496 = 1;
            v497 = !v496;
            if (!v496 && a5 && a6)
              goto LABEL_3978;
            if (a5)
              v497 = 0;
            if (v497 == 1 && a6)
            {
LABEL_3978:
              result = 0;
              v8 = vt_Copy_l10r_TRC_Tone_Mat_TRC_v216;
              goto LABEL_6559;
            }
            if (a3)
              v768 = a4 == 0;
            else
              v768 = 0;
            v769 = !v768;
            if (a6 && !v769 && !a5 || a5 && v769 != 1 && a6)
            {
              result = 0;
              v8 = vt_Copy_l10r_TRC_Mat_TRC_v216;
              goto LABEL_6559;
            }
            result = 0;
            v313 = a4 | a3 | a5 | a6;
            v8 = vt_Copy_l10r_rgb_v216;
            goto LABEL_6557;
          }
          if (a2 != 1983013176)
          {
            v21 = 1983144248;
            goto LABEL_2294;
          }
          goto LABEL_2378;
        }
        if (a2 > 2019963441)
        {
          if (a2 > 2037741157)
          {
            if (a2 != 2037741158 && a2 != 2037741171)
              goto LABEL_6559;
            if (a3)
              v388 = a4 == 0;
            else
              v388 = 1;
            v389 = !v388;
            if (!v388 && a5 && a6)
              goto LABEL_3134;
            if (a5)
              v389 = 0;
            if (v389 == 1 && a6)
            {
LABEL_3134:
              result = 0;
              v8 = vt_Copy_l10r_TRC_Tone_Mat_TRC_yuvsf;
              goto LABEL_6559;
            }
            if (a3)
              v670 = a4 == 0;
            else
              v670 = 0;
            v671 = !v670;
            if (a6 && !v671 && !a5 || a5 && v671 != 1 && a6)
            {
              result = 0;
              v8 = vt_Copy_l10r_TRC_Mat_TRC_yuvsf;
              goto LABEL_6559;
            }
            result = 0;
            v313 = a4 | a3 | a5 | a6;
            v8 = vt_Copy_l10r_rgb_yuvsf;
            goto LABEL_6557;
          }
          if (a2 == 2019963442)
          {
LABEL_2908:
            if (a3)
              v360 = a4 == 0;
            else
              v360 = 1;
            v361 = !v360;
            if (v360 || !a5 || !a6)
            {
              if (a5)
                v361 = 0;
              if (v361 != 1 || !a6)
              {
LABEL_3076:
                if (a3)
                  v382 = a4 == 0;
                else
                  v382 = 0;
                v383 = !v382;
                if (a6 && !v383 && !a5 || a5 && v383 != 1 && a6)
                {
                  result = 0;
                  v8 = vt_Copy_l10r_TRC_Mat_TRC_xf422;
                  goto LABEL_6559;
                }
                result = 0;
                v313 = a4 | a3 | a5 | a6;
                v8 = vt_Copy_l10r_rgb_xf422;
                goto LABEL_6557;
              }
            }
LABEL_3075:
            result = 0;
            v8 = vt_Copy_l10r_TRC_Tone_Mat_TRC_xf422;
            goto LABEL_6559;
          }
          v115 = 2019963956;
          goto LABEL_2969;
        }
        if (a2 != 2016687156 && a2 != 2016698739)
        {
          if (a2 != 2019963440)
            goto LABEL_6559;
          goto LABEL_2922;
        }
LABEL_2970:
        if (a3)
          v368 = a4 == 0;
        else
          v368 = 1;
        v369 = !v368;
        if (!v368 && a5 && a6)
          goto LABEL_2983;
        if (a5)
          v369 = 0;
        if (v369 == 1 && a6)
        {
LABEL_2983:
          result = 0;
          v8 = vt_Copy_l10r_TRC_Tone_Mat_TRC_xf444;
          goto LABEL_6559;
        }
LABEL_2984:
        if (a3)
          v370 = a4 == 0;
        else
          v370 = 0;
        v371 = !v370;
        if (a6 && !v371 && !a5 || a5 && v371 != 1 && a6)
        {
          result = 0;
          v8 = vt_Copy_l10r_TRC_Mat_TRC_xf444;
          goto LABEL_6559;
        }
        result = 0;
        v313 = a4 | a3 | a5 | a6;
        v8 = vt_Copy_l10r_rgb_xf444;
        goto LABEL_6557;
      }
      if (a2 > 1952854575)
      {
        if (a2 <= 1953903151)
        {
          if (a2 == 1952854576)
            goto LABEL_2922;
          if (a2 == 1952854578)
            goto LABEL_2908;
          v115 = 1952855092;
          goto LABEL_2969;
        }
        if (a2 <= 1953903667)
        {
          if (a2 != 1953903152)
          {
            v14 = 1953903154;
            goto LABEL_2907;
          }
LABEL_2922:
          if (a3)
            v362 = a4 == 0;
          else
            v362 = 1;
          v363 = !v362;
          if (v362 || !a5 || !a6)
          {
            if (a5)
              v363 = 0;
            if (v363 != 1 || !a6)
            {
LABEL_3312:
              if (a3)
                v416 = a4 == 0;
              else
                v416 = 0;
              v417 = !v416;
              if (a6 && !v417 && !a5 || a5 && v417 != 1 && a6)
              {
                result = 0;
                v8 = vt_Copy_l10r_TRC_Mat_TRC_xf420;
                goto LABEL_6559;
              }
              result = 0;
              v313 = a4 | a3 | a5 | a6;
              v8 = vt_Copy_l10r_rgb_xf420;
              goto LABEL_6557;
            }
          }
LABEL_3164:
          result = 0;
          v8 = vt_Copy_l10r_TRC_Tone_Mat_TRC_xf420;
          goto LABEL_6559;
        }
        if (a2 == 1953903668)
          goto LABEL_2970;
        if (a2 != 1982882104)
          goto LABEL_6559;
LABEL_3029:
        if (a3)
          v376 = a4 == 0;
        else
          v376 = 1;
        v377 = !v376;
        if (!v376 && a5 && a6)
          goto LABEL_3042;
        if (a5)
          v377 = 0;
        if (v377 == 1 && a6)
        {
LABEL_3042:
          result = 0;
          v8 = vt_Copy_l10r_TRC_Tone_Mat_TRC_420vf;
          goto LABEL_6559;
        }
        if (a3)
          v578 = a4 == 0;
        else
          v578 = 0;
        v579 = !v578;
        if (a6 && !v579 && !a5 || a5 && v579 != 1 && a6)
        {
          result = 0;
          v8 = vt_Copy_l10r_TRC_Mat_TRC_420vf;
          goto LABEL_6559;
        }
        result = 0;
        v313 = a4 | a3 | a5 | a6;
        v8 = vt_Copy_l10r_rgb_420vf;
        goto LABEL_6557;
      }
      if (a2 > 1937126451)
      {
        if (a2 != 1937126452)
        {
          if (a2 == 1949458803)
            goto LABEL_2908;
          v115 = 1949589875;
LABEL_2969:
          if (a2 != v115)
            goto LABEL_6559;
          goto LABEL_2970;
        }
      }
      else if (a2 != 1936077876)
      {
        if (a2 != 1937125936)
        {
          v157 = 1937125938;
          goto LABEL_3061;
        }
        goto LABEL_3151;
      }
      goto LABEL_2412;
    }
    if (a2 > 1278226741)
    {
      if (a2 > 1647719520)
      {
        if (a2 <= 1932681586)
        {
          if (a2 == 1647719521)
          {
            if (a3)
              v504 = a4 == 0;
            else
              v504 = 1;
            v505 = !v504;
            if (!v504 && a5 && a6)
              goto LABEL_4032;
            if (a5)
              v505 = 0;
            if (v505 == 1 && a6)
            {
LABEL_4032:
              result = 0;
              v8 = vt_Copy_l10r_TRC_Tone_Mat_TRC_b64a;
              goto LABEL_6559;
            }
            if (a3)
              v772 = a4 == 0;
            else
              v772 = 0;
            v773 = !v772;
            if (a6 && !v773 && !a5 || a5 && v773 != 1 && a6)
            {
              result = 0;
              v8 = vt_Copy_l10r_TRC_Mat_TRC_b64a;
              goto LABEL_6559;
            }
            result = 0;
            v313 = a4 | a3 | a5 | a6;
            v8 = vt_Copy_l10r_rgb_b64a;
            goto LABEL_6557;
          }
          if (a2 != 1815162994)
          {
            if (a2 != 1815491698)
              goto LABEL_6559;
            if (a3)
              v283 = a4 == 0;
            else
              v283 = 1;
            v284 = !v283;
            if (!v283 && a5 && a6)
              goto LABEL_2349;
            if (a5)
              v284 = 0;
            if (v284 == 1 && a6)
            {
LABEL_2349:
              result = 0;
              v8 = vt_Copy_l10r_TRC_Tone_Mat_TRC_l64r;
              goto LABEL_6559;
            }
            if (a3)
              v748 = a4 == 0;
            else
              v748 = 0;
            v749 = !v748;
            if (a6 && !v749 && !a5 || a5 && v749 != 1 && a6)
            {
              result = 0;
              v8 = vt_Copy_l10r_TRC_Mat_TRC_l64r;
              goto LABEL_6559;
            }
            result = 0;
            v313 = a4 | a3 | a5 | a6;
            v8 = vt_Copy_l10r_rgb_l64r;
            goto LABEL_6557;
          }
          goto LABEL_2446;
        }
        if (a2 > 1936077359)
        {
          if (a2 != 1936077360)
          {
            v157 = 1936077362;
LABEL_3061:
            if (a2 != v157)
              goto LABEL_6559;
LABEL_3062:
            if (a3)
              v380 = a4 == 0;
            else
              v380 = 1;
            v381 = !v380;
            if (v380 || !a5 || !a6)
            {
              if (a5)
                v381 = 0;
              if (v381 != 1 || !a6)
                goto LABEL_3076;
            }
            goto LABEL_3075;
          }
LABEL_3151:
          if (a3)
            v392 = a4 == 0;
          else
            v392 = 1;
          v393 = !v392;
          if (v392 || !a5 || !a6)
          {
            if (a5)
              v393 = 0;
            if (v393 != 1 || !a6)
              goto LABEL_3312;
          }
          goto LABEL_3164;
        }
        if (a2 == 1932681587)
          goto LABEL_3062;
        if (a2 != 1932812659)
          goto LABEL_6559;
LABEL_2412:
        if (a3)
          v291 = a4 == 0;
        else
          v291 = 1;
        v292 = !v291;
        if (!v291 && a5 && a6)
          goto LABEL_2983;
        if (a5)
          v292 = 0;
        if (v292 == 1 && a6)
          goto LABEL_2983;
        goto LABEL_2984;
      }
      if (a2 > 1380411456)
      {
        if (a2 == 1380411457)
        {
          if (a3)
            v508 = a4 == 0;
          else
            v508 = 1;
          v509 = !v508;
          if (!v508 && a5 && a6)
            goto LABEL_4060;
          if (a5)
            v509 = 0;
          if (v509 == 1 && a6)
          {
LABEL_4060:
            result = 0;
            v8 = vt_Copy_l10r_TRC_Tone_Mat_TRC_RGhA;
            goto LABEL_6559;
          }
          if (a3)
            v776 = a4 == 0;
          else
            v776 = 0;
          v777 = !v776;
          if (a6 && !v777 && !a5 || a5 && v777 != 1 && a6)
          {
            result = 0;
            v8 = vt_Copy_l10r_TRC_Mat_TRC_RGhA;
            goto LABEL_6559;
          }
          result = 0;
          v313 = a4 | a3 | a5 | a6;
          v8 = vt_Copy_l10r_rgb_RGhA;
          goto LABEL_6557;
        }
        if (a2 != 1630697081)
        {
          if (a2 != 1647534392)
            goto LABEL_6559;
          goto LABEL_2446;
        }
LABEL_2505:
        if (a3)
          v303 = a4 == 0;
        else
          v303 = 1;
        v304 = !v303;
        if (!v303 && a5 && a6)
          goto LABEL_2518;
        if (a5)
          v304 = 0;
        if (v304 == 1 && a6)
        {
LABEL_2518:
          result = 0;
          v8 = vt_Copy_l10r_TRC_Tone_Mat_TRC_2vuyf;
          goto LABEL_6559;
        }
        if (a3)
          v574 = a4 == 0;
        else
          v574 = 0;
        v575 = !v574;
        if (a6 && !v575 && !a5 || a5 && v575 != 1 && a6)
        {
          result = 0;
          v8 = vt_Copy_l10r_TRC_Mat_TRC_2vuyf;
          goto LABEL_6559;
        }
        result = 0;
        v313 = a4 | a3 | a5 | a6;
        v8 = vt_Copy_l10r_rgb_2vuyf;
        goto LABEL_6557;
      }
      if (a2 == 1278226742)
        goto LABEL_2412;
      if (a2 != 1380401729)
      {
        if (a2 != 1380410945)
          goto LABEL_6559;
        if (a3)
          v159 = a4 == 0;
        else
          v159 = 1;
        v160 = !v159;
        if (!v159 && a5 && a6)
          goto LABEL_1338;
        if (a5)
          v160 = 0;
        if (v160 == 1 && a6)
        {
LABEL_1338:
          result = 0;
          v8 = vt_Copy_l10r_TRC_Tone_Mat_TRC_RGfA;
          goto LABEL_6559;
        }
        if (a3)
          v744 = a4 == 0;
        else
          v744 = 0;
        v745 = !v744;
        if (a6 && !v745 && !a5 || a5 && v745 != 1 && a6)
        {
          result = 0;
          v8 = vt_Copy_l10r_TRC_Mat_TRC_RGfA;
          goto LABEL_6559;
        }
        result = 0;
        v313 = a4 | a3 | a5 | a6;
        v8 = vt_Copy_l10r_rgb_RGfA;
        goto LABEL_6557;
      }
    }
    else
    {
      if (a2 > 875704949)
      {
        if (a2 <= 1111970368)
        {
          if (a2 != 875704950)
          {
            if (a2 == 875836518)
            {
LABEL_2295:
              if (a3)
                v279 = a4 == 0;
              else
                v279 = 1;
              v280 = !v279;
              if (!v279 && a5 && a6)
                goto LABEL_2308;
              if (a5)
                v280 = 0;
              if (v280 == 1 && a6)
              {
LABEL_2308:
                result = 0;
                v8 = vt_Copy_l10r_TRC_Tone_Mat_TRC_444vf;
                goto LABEL_6559;
              }
              if (a3)
                v500 = a4 == 0;
              else
                v500 = 0;
              v501 = !v500;
              if (a6 && !v501 && !a5 || a5 && v501 != 1 && a6)
              {
                result = 0;
                v8 = vt_Copy_l10r_TRC_Mat_TRC_444vf;
                goto LABEL_6559;
              }
              result = 0;
              v313 = a4 | a3 | a5 | a6;
              v8 = vt_Copy_l10r_rgb_444vf;
              goto LABEL_6557;
            }
            v21 = 875836534;
LABEL_2294:
            if (a2 != v21)
              goto LABEL_6559;
            goto LABEL_2295;
          }
LABEL_2378:
          if (a3)
            v287 = a4 == 0;
          else
            v287 = 1;
          v288 = !v287;
          if (!v287 && a5 && a6)
            goto LABEL_2391;
          if (a5)
            v288 = 0;
          if (v288 == 1 && a6)
          {
LABEL_2391:
            result = 0;
            v8 = vt_Copy_l10r_TRC_Tone_Mat_TRC_422vf;
            goto LABEL_6559;
          }
          if (a3)
            v562 = a4 == 0;
          else
            v562 = 0;
          v563 = !v562;
          if (a6 && !v563 && !a5 || a5 && v563 != 1 && a6)
          {
            result = 0;
            v8 = vt_Copy_l10r_TRC_Mat_TRC_422vf;
            goto LABEL_6559;
          }
          result = 0;
          v313 = a4 | a3 | a5 | a6;
          v8 = vt_Copy_l10r_rgb_422vf;
          goto LABEL_6557;
        }
        if (a2 > 1278226735)
        {
          if (a2 == 1278226736)
            goto LABEL_2970;
          v115 = 1278226738;
          goto LABEL_2969;
        }
        if (a2 != 1111970369)
        {
          v21 = 1278226488;
          goto LABEL_2294;
        }
        goto LABEL_2477;
      }
      if (a2 > 875704421)
      {
        if (a2 != 875704422 && a2 != 875704438)
        {
          if (a2 != 875704934)
            goto LABEL_6559;
          goto LABEL_2378;
        }
        goto LABEL_3029;
      }
      if (a2 != 32)
      {
        if (a2 != 846624102 && a2 != 846624121)
          goto LABEL_6559;
        goto LABEL_2505;
      }
    }
LABEL_2477:
    if (a3)
      v299 = a4 == 0;
    else
      v299 = 1;
    v300 = !v299;
    if (!v299 && a5 && a6)
      goto LABEL_2490;
    if (a5)
      v300 = 0;
    if (v300 == 1 && a6)
    {
LABEL_2490:
      result = 0;
      v8 = vt_Copy_l10r_TRC_Tone_Mat_TRC_BGRA;
      goto LABEL_6559;
    }
    if (a3)
      v570 = a4 == 0;
    else
      v570 = 0;
    v571 = !v570;
    if (a6 && !v571 && !a5 || a5 && v571 != 1 && a6)
    {
      result = 0;
      v8 = vt_Copy_l10r_TRC_Mat_TRC_BGRA;
      goto LABEL_6559;
    }
    result = 0;
    v313 = a4 | a3 | a5 | a6;
    v8 = vt_Copy_l10r_rgb_BGRA;
    goto LABEL_6557;
  }
  if (a1 > 1952854575)
  {
    if (a1 > 1953903151)
    {
      if (a1 == 1953903152)
        goto LABEL_98;
      if (a1 == 1953903154)
        goto LABEL_90;
      v12 = 1953903668;
    }
    else
    {
      if (a1 == 1952854576)
        goto LABEL_98;
      if (a1 == 1952854578)
        goto LABEL_90;
      v12 = 1952855092;
    }
    goto LABEL_81;
  }
  if (a1 > 1937126451)
  {
    if (a1 == 1937126452)
      goto LABEL_82;
    if (a1 == 1949458803)
      goto LABEL_90;
    v12 = 1949589875;
    goto LABEL_81;
  }
  if (a1 == 1936077876)
    goto LABEL_82;
  if (a1 != 1937125936)
  {
    v10 = 1937125938;
    goto LABEL_70;
  }
LABEL_98:
  v8 = 0;
  if (a2 <= 1937125937)
  {
    if (a2 <= 1380411456)
    {
      if (a2 > 875704949)
      {
        if (a2 <= 1111970368)
        {
          if (a2 != 875704950)
          {
            if (a2 != 875836518 && a2 != 875836534)
              goto LABEL_6559;
            goto LABEL_400;
          }
LABEL_994:
          if (a3)
            v117 = a4 == 0;
          else
            v117 = 1;
          v118 = !v117;
          if (!v117 && a5 && a6)
            goto LABEL_1007;
          if (a5)
            v118 = 0;
          if (v118 == 1 && a6)
          {
LABEL_1007:
            result = 0;
            v8 = vt_Copy_xf420_TRC_Tone_Mat_TRC_422vf;
            goto LABEL_6559;
          }
          if (a3)
            v398 = a4 == 0;
          else
            v398 = 0;
          v399 = !v398;
          if (a6 && !v399 && !a5 || a5 && v399 != 1 && a6)
          {
            result = 0;
            v8 = vt_Copy_xf420_TRC_Mat_TRC_422vf;
            goto LABEL_6559;
          }
          result = 0;
          v313 = a4 | a3 | a5 | a6;
          v8 = vt_Copy_xf420_rgb_422vf;
          goto LABEL_6557;
        }
        if (a2 != 1111970369 && a2 != 1380401729)
        {
          if (a2 != 1380410945)
            goto LABEL_6559;
          if (a3)
            v129 = a4 == 0;
          else
            v129 = 1;
          v130 = !v129;
          if (!v129 && a5 && a6)
            goto LABEL_1120;
          if (a5)
            v130 = 0;
          if (v130 == 1 && a6)
          {
LABEL_1120:
            result = 0;
            v8 = vt_Copy_xf420_TRC_Tone_Mat_TRC_RGfA;
            goto LABEL_6559;
          }
          if (a3)
            v658 = a4 == 0;
          else
            v658 = 0;
          v659 = !v658;
          if (a6 && !v659 && !a5 || a5 && v659 != 1 && a6)
          {
            result = 0;
            v8 = vt_Copy_xf420_TRC_Mat_TRC_RGfA;
            goto LABEL_6559;
          }
          result = 0;
          v313 = a4 | a3 | a5 | a6;
          v8 = vt_Copy_xf420_rgb_RGfA;
          goto LABEL_6557;
        }
      }
      else
      {
        if (a2 > 875704421)
        {
          if (a2 != 875704422 && a2 != 875704438)
          {
            if (a2 != 875704934)
              goto LABEL_6559;
            goto LABEL_994;
          }
          goto LABEL_1248;
        }
        if (a2 != 32)
        {
          if (a2 != 846624102 && a2 != 846624121)
            goto LABEL_6559;
          goto LABEL_1220;
        }
      }
      if (a3)
        v147 = a4 == 0;
      else
        v147 = 1;
      v148 = !v147;
      if (!v147 && a5 && a6)
        goto LABEL_1247;
      if (a5)
        v148 = 0;
      if (v148 == 1 && a6)
      {
LABEL_1247:
        result = 0;
        v8 = vt_Copy_xf420_TRC_Tone_Mat_TRC_BGRA;
        goto LABEL_6559;
      }
      if (a3)
        v406 = a4 == 0;
      else
        v406 = 0;
      v407 = !v406;
      if (a6 && !v407 && !a5 || a5 && v407 != 1 && a6)
      {
        result = 0;
        v8 = vt_Copy_xf420_TRC_Mat_TRC_BGRA;
        goto LABEL_6559;
      }
      result = 0;
      v313 = a4 | a3 | a5 | a6;
      v8 = vt_Copy_xf420_rgb_BGRA;
      goto LABEL_6557;
    }
    if (a2 > 1932681586)
    {
      if (a2 > 1936077361)
      {
        if (a2 == 1936077362)
          goto LABEL_1262;
        if (a2 == 1936077876)
          goto LABEL_1276;
        v57 = 1937125936;
      }
      else
      {
        if (a2 == 1932681587)
          goto LABEL_1262;
        if (a2 == 1932812659)
          goto LABEL_1276;
        v57 = 1936077360;
      }
      if (a2 != v57)
        goto LABEL_6559;
      if (a3)
        v139 = a4 == 0;
      else
        v139 = 1;
      v140 = !v139;
      if (v139 || !a5 || !a6)
      {
        if (a5)
          v140 = 0;
        if (v140 != 1 || !a6)
          goto LABEL_2149;
      }
      goto LABEL_1189;
    }
    if (a2 > 1647719520)
    {
      if (a2 == 1647719521)
      {
        if (a3)
          v344 = a4 == 0;
        else
          v344 = 1;
        v345 = !v344;
        if (!v344 && a5 && a6)
          goto LABEL_2783;
        if (a5)
          v345 = 0;
        if (v345 == 1 && a6)
        {
LABEL_2783:
          result = 0;
          v8 = vt_Copy_xf420_TRC_Tone_Mat_TRC_b64a;
          goto LABEL_6559;
        }
        if (a3)
          v668 = a4 == 0;
        else
          v668 = 0;
        v669 = !v668;
        if (a6 && !v669 && !a5 || a5 && v669 != 1 && a6)
        {
          result = 0;
          v8 = vt_Copy_xf420_TRC_Mat_TRC_b64a;
          goto LABEL_6559;
        }
        result = 0;
        v313 = a4 | a3 | a5 | a6;
        v8 = vt_Copy_xf420_rgb_b64a;
        goto LABEL_6557;
      }
      if (a2 != 1815162994)
      {
        if (a2 != 1815491698)
          goto LABEL_6559;
        if (a3)
          v123 = a4 == 0;
        else
          v123 = 1;
        v124 = !v123;
        if (!v123 && a5 && a6)
          goto LABEL_1063;
        if (a5)
          v124 = 0;
        if (v124 == 1 && a6)
        {
LABEL_1063:
          result = 0;
          v8 = vt_Copy_xf420_TRC_Tone_Mat_TRC_l64r;
          goto LABEL_6559;
        }
        if (a3)
          v656 = a4 == 0;
        else
          v656 = 0;
        v657 = !v656;
        if (a6 && !v657 && !a5 || a5 && v657 != 1 && a6)
        {
          result = 0;
          v8 = vt_Copy_xf420_TRC_Mat_TRC_l64r;
          goto LABEL_6559;
        }
        result = 0;
        v313 = a4 | a3 | a5 | a6;
        v8 = vt_Copy_xf420_rgb_l64r;
        goto LABEL_6557;
      }
      goto LABEL_1206;
    }
    if (a2 == 1380411457)
    {
      if (a3)
        v340 = a4 == 0;
      else
        v340 = 1;
      v341 = !v340;
      if (!v340 && a5 && a6)
        goto LABEL_2756;
      if (a5)
        v341 = 0;
      if (v341 == 1 && a6)
      {
LABEL_2756:
        result = 0;
        v8 = vt_Copy_xf420_TRC_Tone_Mat_TRC_RGhA;
        goto LABEL_6559;
      }
      if (a3)
        v666 = a4 == 0;
      else
        v666 = 0;
      v667 = !v666;
      if (a6 && !v667 && !a5 || a5 && v667 != 1 && a6)
      {
        result = 0;
        v8 = vt_Copy_xf420_TRC_Mat_TRC_RGhA;
        goto LABEL_6559;
      }
      result = 0;
      v313 = a4 | a3 | a5 | a6;
      v8 = vt_Copy_xf420_rgb_RGhA;
      goto LABEL_6557;
    }
    if (a2 != 1630697081)
    {
      v27 = 1647534392;
      goto LABEL_347;
    }
LABEL_1220:
    if (a3)
      v145 = a4 == 0;
    else
      v145 = 1;
    v146 = !v145;
    if (!v145 && a5 && a6)
      goto LABEL_1233;
    if (a5)
      v146 = 0;
    if (v146 == 1 && a6)
    {
LABEL_1233:
      result = 0;
      v8 = vt_Copy_xf420_TRC_Tone_Mat_TRC_2vuyf;
      goto LABEL_6559;
    }
    if (a3)
      v404 = a4 == 0;
    else
      v404 = 0;
    v405 = !v404;
    if (a6 && !v405 && !a5 || a5 && v405 != 1 && a6)
    {
      result = 0;
      v8 = vt_Copy_xf420_TRC_Mat_TRC_2vuyf;
      goto LABEL_6559;
    }
    result = 0;
    v313 = a4 | a3 | a5 | a6;
    v8 = vt_Copy_xf420_rgb_2vuyf;
    goto LABEL_6557;
  }
  if (a2 <= 1983013175)
  {
    if (a2 <= 1952855091)
    {
      if (a2 > 1949589874)
      {
        if (a2 == 1949589875)
          goto LABEL_1138;
        if (a2 == 1952854576)
          goto LABEL_1082;
        v26 = 1952854578;
        goto LABEL_1067;
      }
      if (a2 != 1937125938)
      {
        if (a2 != 1937126452)
        {
          v26 = 1949458803;
          goto LABEL_1067;
        }
LABEL_1276:
        if (a3)
          v153 = a4 == 0;
        else
          v153 = 1;
        v154 = !v153;
        if (v153 || !a5 || !a6)
        {
          if (a5)
            v154 = 0;
          if (v154 != 1 || !a6)
          {
            if (a3)
              v410 = a4 == 0;
            else
              v410 = 0;
            v411 = !v410;
            if ((!a6 || v411 || a5) && (!a5 || v411 == 1 || !a6))
              goto LABEL_3366;
LABEL_3284:
            result = 0;
            v8 = vt_Copy_xf420_TRC_Mat_TRC_xf444;
            goto LABEL_6559;
          }
        }
LABEL_1289:
        result = 0;
        v8 = vt_Copy_xf420_TRC_Tone_Mat_TRC_xf444;
        goto LABEL_6559;
      }
LABEL_1262:
      if (a3)
        v151 = a4 == 0;
      else
        v151 = 1;
      v152 = !v151;
      if (v151 || !a5 || !a6)
      {
        if (a5)
          v152 = 0;
        if (v152 != 1 || !a6)
          goto LABEL_1370;
      }
      goto LABEL_1275;
    }
    if (a2 <= 1953903667)
    {
      if (a2 == 1952855092)
        goto LABEL_1138;
      if (a2 == 1953903152)
        goto LABEL_1082;
      v26 = 1953903154;
      goto LABEL_1067;
    }
    if (a2 == 1953903668)
      goto LABEL_1138;
    if (a2 != 1982882104)
    {
      if (a2 != 1983000886)
        goto LABEL_6559;
      if (a3)
        v131 = a4 == 0;
      else
        v131 = 1;
      v132 = !v131;
      if (!v131 && a5 && a6)
        goto LABEL_1137;
      if (a5)
        v132 = 0;
      if (v132 == 1 && a6)
      {
LABEL_1137:
        result = 0;
        v8 = vt_Copy_xf420_TRC_Tone_Mat_TRC_v216;
        goto LABEL_6559;
      }
      if (a3)
        v660 = a4 == 0;
      else
        v660 = 0;
      v661 = !v660;
      if (a6 && !v661 && !a5 || a5 && v661 != 1 && a6)
      {
        result = 0;
        v8 = vt_Copy_xf420_TRC_Mat_TRC_v216;
        goto LABEL_6559;
      }
      result = 0;
      v313 = a4 | a3 | a5 | a6;
      v8 = vt_Copy_xf420_rgb_v216;
      goto LABEL_6557;
    }
LABEL_1248:
    if (a3)
      v149 = a4 == 0;
    else
      v149 = 1;
    v150 = !v149;
    if (!v149 && a5 && a6)
      goto LABEL_1261;
    if (a5)
      v150 = 0;
    if (v150 == 1 && a6)
    {
LABEL_1261:
      result = 0;
      v8 = vt_Copy_xf420_TRC_Tone_Mat_TRC_420vf;
      goto LABEL_6559;
    }
    if (a3)
      v408 = a4 == 0;
    else
      v408 = 0;
    v409 = !v408;
    if (a6 && !v409 && !a5 || a5 && v409 != 1 && a6)
    {
      result = 0;
      v8 = vt_Copy_xf420_TRC_Mat_TRC_420vf;
      goto LABEL_6559;
    }
    result = 0;
    v313 = a4 | a3 | a5 | a6;
    v8 = vt_Copy_xf420_rgb_420vf;
    goto LABEL_6557;
  }
  if (a2 <= 2016687155)
  {
    if (a2 <= 2016567666)
    {
      if (a2 != 1983013176)
      {
        if (a2 != 1983144248)
        {
          v27 = 1999843442;
LABEL_347:
          if (a2 != v27)
            goto LABEL_6559;
LABEL_1206:
          if (a3)
            v143 = a4 == 0;
          else
            v143 = 1;
          v144 = !v143;
          if (!v143 && a5 && a6)
            goto LABEL_1219;
          if (a5)
            v144 = 0;
          if (v144 == 1 && a6)
          {
LABEL_1219:
            result = 0;
            v8 = vt_Copy_xf420_TRC_Tone_Mat_TRC_l10r;
            goto LABEL_6559;
          }
          if (a3)
            v402 = a4 == 0;
          else
            v402 = 0;
          v403 = !v402;
          if (a6 && !v403 && !a5 || a5 && v403 != 1 && a6)
          {
            result = 0;
            v8 = vt_Copy_xf420_TRC_Mat_TRC_l10r;
            goto LABEL_6559;
          }
          result = 0;
          v313 = a4 | a3 | a5 | a6;
          v8 = vt_Copy_xf420_rgb_l10r;
          goto LABEL_6557;
        }
LABEL_400:
        if (a3)
          v41 = a4 == 0;
        else
          v41 = 1;
        v42 = !v41;
        if (!v41 && a5 && a6)
          goto LABEL_413;
        if (a5)
          v42 = 0;
        if (v42 == 1 && a6)
        {
LABEL_413:
          result = 0;
          v8 = vt_Copy_xf420_TRC_Tone_Mat_TRC_444vf;
          goto LABEL_6559;
        }
        if (a3)
          v396 = a4 == 0;
        else
          v396 = 0;
        v397 = !v396;
        if (a6 && !v397 && !a5 || a5 && v397 != 1 && a6)
        {
          result = 0;
          v8 = vt_Copy_xf420_TRC_Mat_TRC_444vf;
          goto LABEL_6559;
        }
        result = 0;
        v313 = a4 | a3 | a5 | a6;
        v8 = vt_Copy_xf420_rgb_444vf;
        goto LABEL_6557;
      }
      goto LABEL_994;
    }
    if (a2 == 2016567667)
      goto LABEL_1068;
    if (a2 == 2016686640)
    {
LABEL_1082:
      if (a3)
        v127 = a4 == 0;
      else
        v127 = 1;
      v128 = !v127;
      if (v127 || !a5 || !a6)
      {
        if (a5)
          v128 = 0;
        if (v128 != 1 || !a6)
        {
LABEL_2149:
          if (a3)
            v259 = a4 == 0;
          else
            v259 = 0;
          v260 = !v259;
          if (a6 && !v260 && !a5 || a5 && v260 != 1 && a6)
          {
            result = 0;
            v8 = vt_Copy_xf420_TRC_Mat_TRC_xf420;
            goto LABEL_6559;
          }
          result = 0;
          v313 = a4 | a3 | a5 | a6;
          v8 = vt_Copy_xf420_rgb_xf420;
          goto LABEL_6557;
        }
      }
LABEL_1189:
      result = 0;
      v8 = vt_Copy_xf420_TRC_Tone_Mat_TRC_xf420;
      goto LABEL_6559;
    }
    v26 = 2016686642;
LABEL_1067:
    if (a2 != v26)
      goto LABEL_6559;
    goto LABEL_1068;
  }
  if (a2 <= 2019963441)
  {
    if (a2 == 2016687156 || a2 == 2016698739)
      goto LABEL_1138;
    if (a2 != 2019963440)
      goto LABEL_6559;
    goto LABEL_1082;
  }
  if (a2 > 2037741157)
  {
    if (a2 != 2037741158 && a2 != 2037741171)
      goto LABEL_6559;
    if (a3)
      v183 = a4 == 0;
    else
      v183 = 1;
    v184 = !v183;
    if (!v183 && a5 && a6)
      goto LABEL_1581;
    if (a5)
      v184 = 0;
    if (v184 == 1 && a6)
    {
LABEL_1581:
      result = 0;
      v8 = vt_Copy_xf420_TRC_Tone_Mat_TRC_yuvsf;
      goto LABEL_6559;
    }
    if (a3)
      v438 = a4 == 0;
    else
      v438 = 0;
    v439 = !v438;
    if (a6 && !v439 && !a5 || a5 && v439 != 1 && a6)
    {
      result = 0;
      v8 = vt_Copy_xf420_TRC_Mat_TRC_yuvsf;
      goto LABEL_6559;
    }
    result = 0;
    v313 = a4 | a3 | a5 | a6;
    v8 = vt_Copy_xf420_rgb_yuvsf;
    goto LABEL_6557;
  }
  if (a2 == 2019963442)
  {
LABEL_1068:
    if (a3)
      v125 = a4 == 0;
    else
      v125 = 1;
    v126 = !v125;
    if (v125 || !a5 || !a6)
    {
      if (a5)
        v126 = 0;
      if (v126 != 1 || !a6)
      {
LABEL_1370:
        if (a3)
          v165 = a4 == 0;
        else
          v165 = 0;
        v166 = !v165;
        if (a6 && !v166 && !a5 || a5 && v166 != 1 && a6)
        {
          result = 0;
          v8 = vt_Copy_xf420_TRC_Mat_TRC_xf422;
          goto LABEL_6559;
        }
        result = 0;
        v313 = a4 | a3 | a5 | a6;
        v8 = vt_Copy_xf420_rgb_xf422;
        goto LABEL_6557;
      }
    }
LABEL_1275:
    result = 0;
    v8 = vt_Copy_xf420_TRC_Tone_Mat_TRC_xf422;
    goto LABEL_6559;
  }
  if (a2 != 2019963956)
    goto LABEL_6559;
LABEL_1138:
  if (a3)
    v133 = a4 == 0;
  else
    v133 = 1;
  v134 = !v133;
  if (!v133 && a5 && a6)
    goto LABEL_1289;
  if (a5)
    v134 = 0;
  if (v134 == 1 && a6)
    goto LABEL_1289;
  if (a3)
    v135 = a4 == 0;
  else
    v135 = 0;
  v136 = !v135;
  if (a6 && !v136 && !a5 || a5 && v136 != 1 && a6)
    goto LABEL_3284;
LABEL_3366:
  result = 0;
  v313 = a4 | a3 | a5 | a6;
  v8 = vt_Copy_xf420_rgb_xf444;
LABEL_6557:
  if (v313)
    v8 = 0;
LABEL_6559:
  if (a7)
    *a7 = v8;
  return result;
}

uint64_t yuvto32ARGB2111(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t result;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  __int16 *v18;
  int *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  int v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  int v31;
  int v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  int v35;
  int v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  int v39;
  unsigned __int8 *v40;
  int v41;
  int v42;
  int v43;
  unsigned __int8 *v44;

  v4 = *a2;
  v3 = a2[1];
  v5 = a2[2];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a3 + 16);
  v8 = 7;
  v9 = *(_QWORD *)(a1 + 32);
  result = 25231;
  do
  {
    v11 = v8;
    v12 = 1;
    v13 = v4;
    v14 = v6;
    do
    {
      v15 = 0;
      v16 = 0;
      v17 = v12;
      v4 = v13 - 128;
      do
      {
        v18 = (__int16 *)(v13 + 2 * v16);
        v19 = (int *)(v14 + 4 * v16);
        v20 = *(__int16 *)(v3 + v16);
        v21 = *(__int16 *)(v5 + v16);
        v22 = (-11262 * v20 - 23406 * v21) >> 15;
        v23 = v20 + ((25231 * v20) >> 15);
        v24 = v21 + ((13173 * v21) >> 15);
        v25 = *v18;
        v26 = (unsigned __int8 *)(v7 + ((v24 + v25) >> 4));
        if (v24 + v25 < -10240)
          v26 = (unsigned __int8 *)(v7 - 256);
        if (v24 + v25 <= 10240)
          v27 = v26;
        else
          v27 = (unsigned __int8 *)(v7 + 256);
        v28 = *v27;
        v29 = (unsigned __int8 *)(v7 + ((v22 + v25) >> 4));
        if (v22 + v25 < -10240)
          v29 = (unsigned __int8 *)(v7 - 256);
        if (v22 + v25 <= 10240)
          v30 = v29;
        else
          v30 = (unsigned __int8 *)(v7 + 256);
        v31 = *v30;
        v32 = v23 + v25;
        v33 = (unsigned __int8 *)(v7 + (v32 >> 4));
        if (v32 < -10240)
          v33 = (unsigned __int8 *)(v7 - 256);
        if (v32 <= 10240)
          v34 = v33;
        else
          v34 = (unsigned __int8 *)(v7 + 256);
        *v19 = (v31 << 16) | (v28 << 8) | (*v34 << 24) | 0xFF;
        v35 = v18[1];
        v36 = v24 + v35;
        v37 = (unsigned __int8 *)(v7 + (v36 >> 4));
        if (v36 < -10240)
          v37 = (unsigned __int8 *)(v7 - 256);
        if (v36 <= 10240)
          v38 = v37;
        else
          v38 = (unsigned __int8 *)(v7 + 256);
        v39 = v22 + v35;
        v40 = (unsigned __int8 *)(v7 + 256);
        if (v39 <= 10240)
        {
          v40 = (unsigned __int8 *)(v7 - 256);
          if (v39 >= -10240)
            v40 = (unsigned __int8 *)(v7 + (v39 >> 4));
        }
        v41 = *v38;
        v42 = *v40;
        v43 = v23 + v35;
        v44 = (unsigned __int8 *)(v7 + 256);
        if (v43 <= 10240)
        {
          v44 = (unsigned __int8 *)(v7 - 256);
          if (v43 >= -10240)
            v44 = (unsigned __int8 *)(v7 + (v43 >> 4));
        }
        v19[1] = (v42 << 16) | (v41 << 8) | (*v44 << 24) | 0xFF;
        v4 += 4;
        v16 += 2;
        v15 -= 8;
      }
      while ((_DWORD)v16 != 8);
      v13 = v4 + 240;
      v12 = v17 - 1;
      v3 += v16;
      v14 -= v15;
      v5 += v16;
    }
    while (v17);
    v6 += v9;
    v8 = v11 - 1;
  }
  while (v11);
  return result;
}

uint64_t yto32ARGBOne(uint64_t a1, __int16 **a2, uint64_t a3)
{
  int v3;
  __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  int v9;
  int v10;
  unsigned __int8 *v11;

  v3 = 0;
  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(a1 + 32);
  do
  {
    result = 0;
    do
    {
      v10 = *v4++;
      v9 = v10;
      v11 = (unsigned __int8 *)(v6 + 256);
      if (v10 <= 10240)
      {
        v11 = (unsigned __int8 *)(v6 + (v9 >> 4));
        if (v9 < -10240)
          v11 = (unsigned __int8 *)(v6 - 256);
      }
      *(_DWORD *)(v5 + result) = (16843008 * *v11) | 0xFF;
      result += 4;
    }
    while ((_DWORD)result != 32);
    v5 += v7;
    ++v3;
  }
  while (v3 != 8);
  return result;
}

uint64_t yuvto32ARGBOne(uint64_t a1, __int16 **a2, uint64_t a3)
{
  __int16 *v3;
  __int16 *v4;
  __int16 *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  int v22;
  unsigned __int8 *v23;
  int v24;
  unsigned __int8 *v25;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a3 + 16);
  v8 = 7;
  v9 = *(_QWORD *)(a1 + 32);
  result = 25231;
  do
  {
    v11 = 0;
    v12 = v8;
    do
    {
      v14 = *v3++;
      v13 = v14;
      v16 = *v4++;
      v15 = v16;
      v17 = *v5++;
      v18 = (-11262 * v15 - 23406 * v17) >> 15;
      v19 = v17 + v13 + ((13173 * v17) >> 15);
      v20 = (unsigned __int8 *)(v7 + (v19 >> 4));
      if (v19 < -10240)
        v20 = (unsigned __int8 *)(v7 - 256);
      if (v19 <= 10240)
        v21 = v20;
      else
        v21 = (unsigned __int8 *)(v7 + 256);
      v22 = v18 + v13;
      v23 = (unsigned __int8 *)(v7 + 256);
      if (v22 <= 10240)
      {
        v23 = (unsigned __int8 *)(v7 - 256);
        if (v22 >= -10240)
          v23 = (unsigned __int8 *)(v7 + (v22 >> 4));
      }
      v24 = v15 + v13 + ((25231 * v15) >> 15);
      v25 = (unsigned __int8 *)(v7 + 256);
      if (v24 <= 10240)
      {
        v25 = (unsigned __int8 *)(v7 - 256);
        if (v24 >= -10240)
          v25 = (unsigned __int8 *)(v7 + (v24 >> 4));
      }
      *(_DWORD *)(v6 + v11) = (*v23 << 16) | (*v21 << 8) | (*v25 << 24) | 0xFF;
      v11 += 4;
    }
    while ((_DWORD)v11 != 32);
    v6 += v9;
    v8 = v12 - 1;
  }
  while (v12);
  return result;
}

uint64_t yuvto32ARGB(uint64_t a1, __int16 **a2, uint64_t a3)
{
  __int16 *v3;
  __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int *v8;
  uint64_t result;
  __int16 *v10;
  int v11;
  int *v12;
  int v13;
  int *v14;
  unsigned int v15;
  __int16 *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  __int16 *v23;
  int v24;
  int v25;
  unsigned __int8 *v26;
  int v27;
  unsigned __int8 *v28;
  int v29;
  unsigned __int8 *v30;
  int v31;

  v3 = *a2;
  v4 = a2[1];
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a3 + 16);
  v7 = 7;
  v8 = *(int **)(a1 + 16);
  result = 13173;
  v10 = *a2;
  do
  {
    v11 = v7;
    v3 += 16;
    v12 = (int *)((char *)v8 + v5);
    v13 = 7;
    v14 = v8;
    do
    {
      v15 = 0;
      v16 = v4;
      v17 = v13;
      v18 = *v4;
      v19 = v4[8];
      v20 = (-11262 * v18 - 23406 * v19) >> 15;
      v21 = v18 + ((25231 * v18) >> 15);
      v22 = v19 + ((13173 * v19) >> 15);
      do
      {
        if (v15 >= 2)
          v23 = v3;
        else
          v23 = v10;
        v24 = *v23;
        v25 = v22 + v24;
        v26 = (unsigned __int8 *)(v6 + 256);
        if (v22 + v24 <= 10240)
        {
          v26 = (unsigned __int8 *)(v6 - 256);
          if (v25 >= -10240)
            v26 = (unsigned __int8 *)(v6 + (v25 >> 4));
        }
        v27 = v20 + v24;
        v28 = (unsigned __int8 *)(v6 + 256);
        if (v20 + v24 <= 10240)
        {
          v28 = (unsigned __int8 *)(v6 - 256);
          if (v27 >= -10240)
            v28 = (unsigned __int8 *)(v6 + (v27 >> 4));
        }
        v29 = v21 + v24;
        v30 = (unsigned __int8 *)(v6 + 256);
        if (v29 <= 10240)
        {
          v30 = (unsigned __int8 *)(v6 + (v29 >> 4));
          if (v29 < -10240)
            v30 = (unsigned __int8 *)(v6 - 256);
        }
        v31 = (*v28 << 16) | (*v26 << 8) | (*v30 << 24) | 0xFF;
        if (v15 > 1)
          *v12++ = v31;
        else
          *v14++ = v31;
        v10 += v15 < 2;
        v3 += v15++ > 1;
      }
      while (v15 != 4);
      v4 = v16 + 1;
      v13 = v17 - 1;
    }
    while (v17);
    v4 = v16 + 9;
    v10 += 16;
    v8 = (int *)((char *)v8 + 2 * v5);
    v7 = v11 - 1;
  }
  while (v11);
  return result;
}

__int16 *yuvto32ARGBTab(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 *result;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  _DWORD *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned __int8 *v22;
  int v23;
  int v24;
  int v25;
  unsigned __int8 *v26;
  int v27;
  int v28;
  unsigned __int8 *v29;
  int v30;
  int v31;
  unsigned __int8 *v32;
  int v33;
  int v34;
  unsigned __int8 *v35;
  int v36;
  int v37;
  unsigned __int8 *v38;
  int v39;
  int v40;
  unsigned __int8 *v41;
  int v42;
  int v43;
  unsigned __int8 *v44;
  int v45;
  int v46;
  unsigned __int8 *v47;
  int v48;
  int v49;
  unsigned __int8 *v50;
  int v51;
  int v52;
  unsigned __int8 *v53;
  int v54;
  unsigned __int8 *v55;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = a3[2];
  v5 = *a3;
  v6 = *a3 + 1024;
  v7 = *a3 + 2048;
  v8 = *a3 + 3072;
  v9 = *(_QWORD *)(a1 + 16) + 4;
  v11 = *a2;
  result = (__int16 *)a2[1];
  v12 = 7;
  v13 = *a2;
  do
  {
    v14 = 0;
    v15 = v12;
    v16 = v11 + 32;
    result += 8;
    v17 = (_DWORD *)v9;
    do
    {
      v18 = (*result + 16) >> 5;
      v19 = *(__int16 *)(v8 + 2 * v18);
      v20 = *(__int16 *)(v13 + v14);
      v21 = v20 + v19;
      v22 = (unsigned __int8 *)(v4 + 256);
      if (v20 + v19 <= 10240)
      {
        v22 = (unsigned __int8 *)(v4 - 256);
        if (v21 >= -10240)
          v22 = (unsigned __int8 *)(v4 + (v21 >> 4));
      }
      v23 = (*(result - 8) + 16) >> 5;
      v24 = *(__int16 *)(v6 + 2 * v18) + *(__int16 *)(v5 + 2 * v23);
      v25 = v24 + v20;
      v26 = (unsigned __int8 *)(v4 + 256);
      if (v24 + v20 <= 10240)
      {
        v26 = (unsigned __int8 *)(v4 - 256);
        if (v25 >= -10240)
          v26 = (unsigned __int8 *)(v4 + (v25 >> 4));
      }
      v27 = *(__int16 *)(v7 + 2 * v23);
      v28 = v20 + v27;
      v29 = (unsigned __int8 *)(v4 + 256);
      if (v28 <= 10240)
      {
        v29 = (unsigned __int8 *)(v4 - 256);
        if (v28 >= -10240)
          v29 = (unsigned __int8 *)(v4 + (v28 >> 4));
      }
      *(v17 - 1) = (*v26 << 16) | (*v22 << 8) | (*v29 << 24) | 0xFF;
      v30 = *(__int16 *)(v13 + v14 + 2);
      v31 = v30 + v19;
      v32 = (unsigned __int8 *)(v4 + 256);
      if (v30 + v19 <= 10240)
      {
        v32 = (unsigned __int8 *)(v4 - 256);
        if (v31 >= -10240)
          v32 = (unsigned __int8 *)(v4 + (v31 >> 4));
      }
      v33 = *v32;
      v34 = v24 + v30;
      v35 = (unsigned __int8 *)(v4 + 256);
      if (v24 + v30 <= 10240)
      {
        v35 = (unsigned __int8 *)(v4 - 256);
        if (v34 >= -10240)
          v35 = (unsigned __int8 *)(v4 + (v34 >> 4));
      }
      v36 = *v35;
      v37 = v30 + v27;
      v38 = (unsigned __int8 *)(v4 + 256);
      if (v37 <= 10240)
      {
        v38 = (unsigned __int8 *)(v4 - 256);
        if (v37 >= -10240)
          v38 = (unsigned __int8 *)(v4 + (v37 >> 4));
      }
      *v17 = (v36 << 16) | (v33 << 8) | (*v38 << 24) | 0xFF;
      v39 = *(__int16 *)(v16 + v14);
      v40 = v39 + v19;
      v41 = (unsigned __int8 *)(v4 + 256);
      if (v39 + v19 <= 10240)
      {
        v41 = (unsigned __int8 *)(v4 - 256);
        if (v40 >= -10240)
          v41 = (unsigned __int8 *)(v4 + (v40 >> 4));
      }
      v42 = *v41;
      v43 = v24 + v39;
      v44 = (unsigned __int8 *)(v4 + 256);
      if (v24 + v39 <= 10240)
      {
        v44 = (unsigned __int8 *)(v4 - 256);
        if (v43 >= -10240)
          v44 = (unsigned __int8 *)(v4 + (v43 >> 4));
      }
      v45 = *v44;
      v46 = v39 + v27;
      v47 = (unsigned __int8 *)(v4 + 256);
      if (v46 <= 10240)
      {
        v47 = (unsigned __int8 *)(v4 - 256);
        if (v46 >= -10240)
          v47 = (unsigned __int8 *)(v4 + (v46 >> 4));
      }
      *(_DWORD *)((char *)v17 + v3 - 4) = (v45 << 16) | (v42 << 8) | (*v47 << 24) | 0xFF;
      v48 = *(__int16 *)(v16 + v14 + 2);
      v49 = v48 + v19;
      v50 = (unsigned __int8 *)(v4 + 256);
      if (v49 <= 10240)
      {
        v50 = (unsigned __int8 *)(v4 - 256);
        if (v49 >= -10240)
          v50 = (unsigned __int8 *)(v4 + (v49 >> 4));
      }
      v51 = *v50;
      v52 = v24 + v48;
      v53 = (unsigned __int8 *)(v4 + 256);
      if (v52 <= 10240)
      {
        v53 = (unsigned __int8 *)(v4 - 256);
        if (v52 >= -10240)
          v53 = (unsigned __int8 *)(v4 + (v52 >> 4));
      }
      v54 = v48 + v27;
      v55 = (unsigned __int8 *)(v4 + 256);
      if (v54 <= 10240)
      {
        v55 = (unsigned __int8 *)(v4 - 256);
        if (v54 >= -10240)
          v55 = (unsigned __int8 *)(v4 + (v54 >> 4));
      }
      *(_DWORD *)((char *)v17 + v3) = (*v53 << 16) | (v51 << 8) | (*v55 << 24) | 0xFF;
      v14 += 4;
      v17 += 2;
      ++result;
    }
    while ((_DWORD)v14 != 32);
    v13 += v14 + 32;
    v12 = v15 - 1;
    v9 += 2 * v3;
    v11 = v16 + v14;
  }
  while (v15);
  return result;
}

uint64_t yuvto32BGRA2111(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t result;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  __int16 *v18;
  unsigned int *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  int v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  int v31;
  int v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  int v35;
  int v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  int v39;
  unsigned __int8 *v40;
  int v41;
  int v42;
  int v43;
  unsigned __int8 *v44;

  v4 = *a2;
  v3 = a2[1];
  v5 = a2[2];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a3 + 16);
  v8 = 7;
  v9 = *(_QWORD *)(a1 + 32);
  result = 25231;
  do
  {
    v11 = v8;
    v12 = 1;
    v13 = v4;
    v14 = v6;
    do
    {
      v15 = 0;
      v16 = 0;
      v17 = v12;
      v4 = v13 - 128;
      do
      {
        v18 = (__int16 *)(v13 + 2 * v16);
        v19 = (unsigned int *)(v14 + 4 * v16);
        v20 = *(__int16 *)(v3 + v16);
        v21 = *(__int16 *)(v5 + v16);
        v22 = (-11262 * v20 - 23406 * v21) >> 15;
        v23 = v20 + ((25231 * v20) >> 15);
        v24 = v21 + ((13173 * v21) >> 15);
        v25 = *v18;
        v26 = (unsigned __int8 *)(v7 + ((v24 + v25) >> 4));
        if (v24 + v25 < -10240)
          v26 = (unsigned __int8 *)(v7 - 256);
        if (v24 + v25 <= 10240)
          v27 = v26;
        else
          v27 = (unsigned __int8 *)(v7 + 256);
        v28 = *v27;
        v29 = (unsigned __int8 *)(v7 + ((v22 + v25) >> 4));
        if (v22 + v25 < -10240)
          v29 = (unsigned __int8 *)(v7 - 256);
        if (v22 + v25 <= 10240)
          v30 = v29;
        else
          v30 = (unsigned __int8 *)(v7 + 256);
        v31 = *v30;
        v32 = v23 + v25;
        v33 = (unsigned __int8 *)(v7 + (v32 >> 4));
        if (v32 < -10240)
          v33 = (unsigned __int8 *)(v7 - 256);
        if (v32 <= 10240)
          v34 = v33;
        else
          v34 = (unsigned __int8 *)(v7 + 256);
        *v19 = (v31 << 8) | (v28 << 16) | *v34 | 0xFF000000;
        v35 = v18[1];
        v36 = v24 + v35;
        v37 = (unsigned __int8 *)(v7 + (v36 >> 4));
        if (v36 < -10240)
          v37 = (unsigned __int8 *)(v7 - 256);
        if (v36 <= 10240)
          v38 = v37;
        else
          v38 = (unsigned __int8 *)(v7 + 256);
        v39 = v22 + v35;
        v40 = (unsigned __int8 *)(v7 + 256);
        if (v39 <= 10240)
        {
          v40 = (unsigned __int8 *)(v7 - 256);
          if (v39 >= -10240)
            v40 = (unsigned __int8 *)(v7 + (v39 >> 4));
        }
        v41 = *v38;
        v42 = *v40;
        v43 = v23 + v35;
        v44 = (unsigned __int8 *)(v7 + 256);
        if (v43 <= 10240)
        {
          v44 = (unsigned __int8 *)(v7 - 256);
          if (v43 >= -10240)
            v44 = (unsigned __int8 *)(v7 + (v43 >> 4));
        }
        v19[1] = (v42 << 8) | (v41 << 16) | *v44 | 0xFF000000;
        v4 += 4;
        v16 += 2;
        v15 -= 8;
      }
      while ((_DWORD)v16 != 8);
      v13 = v4 + 240;
      v12 = v17 - 1;
      v3 += v16;
      v14 -= v15;
      v5 += v16;
    }
    while (v17);
    v6 += v9;
    v8 = v11 - 1;
  }
  while (v11);
  return result;
}

uint64_t yto32BGRAOne(uint64_t a1, __int16 **a2, uint64_t a3)
{
  int v3;
  __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  int v9;
  int v10;
  unsigned __int8 *v11;

  v3 = 0;
  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(a1 + 32);
  do
  {
    result = 0;
    do
    {
      v10 = *v4++;
      v9 = v10;
      v11 = (unsigned __int8 *)(v6 + 256);
      if (v10 <= 10240)
      {
        v11 = (unsigned __int8 *)(v6 + (v9 >> 4));
        if (v9 < -10240)
          v11 = (unsigned __int8 *)(v6 - 256);
      }
      *(_DWORD *)(v5 + result) = (65793 * *v11) | 0xFF000000;
      result += 4;
    }
    while ((_DWORD)result != 32);
    v5 += v7;
    ++v3;
  }
  while (v3 != 8);
  return result;
}

uint64_t yuvto32BGRAOne(uint64_t a1, __int16 **a2, uint64_t a3)
{
  __int16 *v3;
  __int16 *v4;
  __int16 *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  int v22;
  unsigned __int8 *v23;
  int v24;
  unsigned __int8 *v25;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a3 + 16);
  v8 = 7;
  v9 = *(_QWORD *)(a1 + 32);
  result = 25231;
  do
  {
    v11 = 0;
    v12 = v8;
    do
    {
      v14 = *v3++;
      v13 = v14;
      v16 = *v4++;
      v15 = v16;
      v17 = *v5++;
      v18 = (-11262 * v15 - 23406 * v17) >> 15;
      v19 = v17 + v13 + ((13173 * v17) >> 15);
      v20 = (unsigned __int8 *)(v7 + (v19 >> 4));
      if (v19 < -10240)
        v20 = (unsigned __int8 *)(v7 - 256);
      if (v19 <= 10240)
        v21 = v20;
      else
        v21 = (unsigned __int8 *)(v7 + 256);
      v22 = v18 + v13;
      v23 = (unsigned __int8 *)(v7 + 256);
      if (v22 <= 10240)
      {
        v23 = (unsigned __int8 *)(v7 - 256);
        if (v22 >= -10240)
          v23 = (unsigned __int8 *)(v7 + (v22 >> 4));
      }
      v24 = v15 + v13 + ((25231 * v15) >> 15);
      v25 = (unsigned __int8 *)(v7 + 256);
      if (v24 <= 10240)
      {
        v25 = (unsigned __int8 *)(v7 - 256);
        if (v24 >= -10240)
          v25 = (unsigned __int8 *)(v7 + (v24 >> 4));
      }
      *(_DWORD *)(v6 + v11) = (*v23 << 8) | (*v21 << 16) | *v25 | 0xFF000000;
      v11 += 4;
    }
    while ((_DWORD)v11 != 32);
    v6 += v9;
    v8 = v12 - 1;
  }
  while (v12);
  return result;
}

uint64_t yuvto32BGRA(uint64_t a1, __int16 **a2, uint64_t a3)
{
  __int16 *v3;
  __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int *v8;
  uint64_t result;
  __int16 *v10;
  int v11;
  unsigned int *v12;
  int v13;
  unsigned int *v14;
  unsigned int v15;
  __int16 *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  __int16 *v23;
  int v24;
  int v25;
  unsigned __int8 *v26;
  int v27;
  unsigned __int8 *v28;
  int v29;
  unsigned __int8 *v30;
  unsigned int v31;

  v3 = *a2;
  v4 = a2[1];
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a3 + 16);
  v7 = 7;
  v8 = *(unsigned int **)(a1 + 16);
  result = 13173;
  v10 = *a2;
  do
  {
    v11 = v7;
    v3 += 16;
    v12 = (unsigned int *)((char *)v8 + v5);
    v13 = 7;
    v14 = v8;
    do
    {
      v15 = 0;
      v16 = v4;
      v17 = v13;
      v18 = *v4;
      v19 = v4[8];
      v20 = (-11262 * v18 - 23406 * v19) >> 15;
      v21 = v18 + ((25231 * v18) >> 15);
      v22 = v19 + ((13173 * v19) >> 15);
      do
      {
        if (v15 >= 2)
          v23 = v3;
        else
          v23 = v10;
        v24 = *v23;
        v25 = v22 + v24;
        v26 = (unsigned __int8 *)(v6 + 256);
        if (v22 + v24 <= 10240)
        {
          v26 = (unsigned __int8 *)(v6 - 256);
          if (v25 >= -10240)
            v26 = (unsigned __int8 *)(v6 + (v25 >> 4));
        }
        v27 = v20 + v24;
        v28 = (unsigned __int8 *)(v6 + 256);
        if (v20 + v24 <= 10240)
        {
          v28 = (unsigned __int8 *)(v6 - 256);
          if (v27 >= -10240)
            v28 = (unsigned __int8 *)(v6 + (v27 >> 4));
        }
        v29 = v21 + v24;
        v30 = (unsigned __int8 *)(v6 + 256);
        if (v29 <= 10240)
        {
          v30 = (unsigned __int8 *)(v6 + (v29 >> 4));
          if (v29 < -10240)
            v30 = (unsigned __int8 *)(v6 - 256);
        }
        v31 = (*v28 << 8) | (*v26 << 16) | *v30 | 0xFF000000;
        if (v15 > 1)
          *v12++ = v31;
        else
          *v14++ = v31;
        v10 += v15 < 2;
        v3 += v15++ > 1;
      }
      while (v15 != 4);
      v4 = v16 + 1;
      v13 = v17 - 1;
    }
    while (v17);
    v4 = v16 + 9;
    v10 += 16;
    v8 = (unsigned int *)((char *)v8 + 2 * v5);
    v7 = v11 - 1;
  }
  while (v11);
  return result;
}

__int16 *yuvto32BGRATab(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 *result;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  _DWORD *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned __int8 *v22;
  int v23;
  int v24;
  int v25;
  unsigned __int8 *v26;
  int v27;
  int v28;
  unsigned __int8 *v29;
  int v30;
  int v31;
  unsigned __int8 *v32;
  int v33;
  int v34;
  unsigned __int8 *v35;
  int v36;
  int v37;
  unsigned __int8 *v38;
  int v39;
  int v40;
  unsigned __int8 *v41;
  int v42;
  int v43;
  unsigned __int8 *v44;
  int v45;
  int v46;
  unsigned __int8 *v47;
  int v48;
  int v49;
  unsigned __int8 *v50;
  int v51;
  int v52;
  unsigned __int8 *v53;
  int v54;
  unsigned __int8 *v55;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = a3[2];
  v5 = *a3;
  v6 = *a3 + 1024;
  v7 = *a3 + 2048;
  v8 = *a3 + 3072;
  v9 = *(_QWORD *)(a1 + 16) + 4;
  v11 = *a2;
  result = (__int16 *)a2[1];
  v12 = 7;
  v13 = *a2;
  do
  {
    v14 = 0;
    v15 = v12;
    v16 = v11 + 32;
    result += 8;
    v17 = (_DWORD *)v9;
    do
    {
      v18 = (*result + 16) >> 5;
      v19 = *(__int16 *)(v8 + 2 * v18);
      v20 = *(__int16 *)(v13 + v14);
      v21 = v20 + v19;
      v22 = (unsigned __int8 *)(v4 + 256);
      if (v20 + v19 <= 10240)
      {
        v22 = (unsigned __int8 *)(v4 - 256);
        if (v21 >= -10240)
          v22 = (unsigned __int8 *)(v4 + (v21 >> 4));
      }
      v23 = (*(result - 8) + 16) >> 5;
      v24 = *(__int16 *)(v6 + 2 * v18) + *(__int16 *)(v5 + 2 * v23);
      v25 = v24 + v20;
      v26 = (unsigned __int8 *)(v4 + 256);
      if (v24 + v20 <= 10240)
      {
        v26 = (unsigned __int8 *)(v4 - 256);
        if (v25 >= -10240)
          v26 = (unsigned __int8 *)(v4 + (v25 >> 4));
      }
      v27 = *(__int16 *)(v7 + 2 * v23);
      v28 = v20 + v27;
      v29 = (unsigned __int8 *)(v4 + 256);
      if (v28 <= 10240)
      {
        v29 = (unsigned __int8 *)(v4 - 256);
        if (v28 >= -10240)
          v29 = (unsigned __int8 *)(v4 + (v28 >> 4));
      }
      *(v17 - 1) = (*v26 << 8) | (*v22 << 16) | *v29 | 0xFF000000;
      v30 = *(__int16 *)(v13 + v14 + 2);
      v31 = v30 + v19;
      v32 = (unsigned __int8 *)(v4 + 256);
      if (v30 + v19 <= 10240)
      {
        v32 = (unsigned __int8 *)(v4 - 256);
        if (v31 >= -10240)
          v32 = (unsigned __int8 *)(v4 + (v31 >> 4));
      }
      v33 = *v32;
      v34 = v24 + v30;
      v35 = (unsigned __int8 *)(v4 + 256);
      if (v24 + v30 <= 10240)
      {
        v35 = (unsigned __int8 *)(v4 - 256);
        if (v34 >= -10240)
          v35 = (unsigned __int8 *)(v4 + (v34 >> 4));
      }
      v36 = *v35;
      v37 = v30 + v27;
      v38 = (unsigned __int8 *)(v4 + 256);
      if (v37 <= 10240)
      {
        v38 = (unsigned __int8 *)(v4 - 256);
        if (v37 >= -10240)
          v38 = (unsigned __int8 *)(v4 + (v37 >> 4));
      }
      *v17 = (v36 << 8) | (v33 << 16) | *v38 | 0xFF000000;
      v39 = *(__int16 *)(v16 + v14);
      v40 = v39 + v19;
      v41 = (unsigned __int8 *)(v4 + 256);
      if (v39 + v19 <= 10240)
      {
        v41 = (unsigned __int8 *)(v4 - 256);
        if (v40 >= -10240)
          v41 = (unsigned __int8 *)(v4 + (v40 >> 4));
      }
      v42 = *v41;
      v43 = v24 + v39;
      v44 = (unsigned __int8 *)(v4 + 256);
      if (v24 + v39 <= 10240)
      {
        v44 = (unsigned __int8 *)(v4 - 256);
        if (v43 >= -10240)
          v44 = (unsigned __int8 *)(v4 + (v43 >> 4));
      }
      v45 = *v44;
      v46 = v39 + v27;
      v47 = (unsigned __int8 *)(v4 + 256);
      if (v46 <= 10240)
      {
        v47 = (unsigned __int8 *)(v4 - 256);
        if (v46 >= -10240)
          v47 = (unsigned __int8 *)(v4 + (v46 >> 4));
      }
      *(_DWORD *)((char *)v17 + v3 - 4) = (v45 << 8) | (v42 << 16) | *v47 | 0xFF000000;
      v48 = *(__int16 *)(v16 + v14 + 2);
      v49 = v48 + v19;
      v50 = (unsigned __int8 *)(v4 + 256);
      if (v49 <= 10240)
      {
        v50 = (unsigned __int8 *)(v4 - 256);
        if (v49 >= -10240)
          v50 = (unsigned __int8 *)(v4 + (v49 >> 4));
      }
      v51 = *v50;
      v52 = v24 + v48;
      v53 = (unsigned __int8 *)(v4 + 256);
      if (v52 <= 10240)
      {
        v53 = (unsigned __int8 *)(v4 - 256);
        if (v52 >= -10240)
          v53 = (unsigned __int8 *)(v4 + (v52 >> 4));
      }
      v54 = v48 + v27;
      v55 = (unsigned __int8 *)(v4 + 256);
      if (v54 <= 10240)
      {
        v55 = (unsigned __int8 *)(v4 - 256);
        if (v54 >= -10240)
          v55 = (unsigned __int8 *)(v4 + (v54 >> 4));
      }
      *(_DWORD *)((char *)v17 + v3) = (*v53 << 8) | (v51 << 16) | *v55 | 0xFF000000;
      v14 += 4;
      v17 += 2;
      ++result;
    }
    while ((_DWORD)v14 != 32);
    v13 += v14 + 32;
    v12 = v15 - 1;
    v9 += 2 * v3;
    v11 = v16 + v14;
  }
  while (v15);
  return result;
}

void UpdatePinAndGammaTables(uint64_t a1, int a2)
{
  _BYTE *v4;
  float v5;
  float v6;
  uint64_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int v10;
  uint64_t v11;
  float v12;
  float v13;
  float v14;
  float v15;
  uint64_t v16;
  int v17;
  unsigned int i;
  uint64_t v19;
  _BYTE *v20;
  unsigned int v21;
  int j;
  int v23;
  unsigned int v24;

  v4 = (_BYTE *)(a1 + 4440);
  v5 = *(float *)(a1 + 4424) / *(float *)(a1 + 4428);
  v6 = 0.0;
  if (v5 >= 0.0)
  {
    v6 = *(float *)(a1 + 4424) / *(float *)(a1 + 4428);
    if (v5 > 4.0)
      v6 = 4.0;
  }
  if (*(float *)(a1 + 4432) == v6)
  {
    v10 = *(_DWORD *)(a1 + 4436);
  }
  else
  {
    if (v6 == 1.0)
    {
      v7 = 0;
      v8 = (int8x16_t)xmmword_1928E1710;
      v9.i64[0] = 0x1010101010101010;
      v9.i64[1] = 0x1010101010101010;
      do
      {
        *(int8x16_t *)&v4[v7] = v8;
        v7 += 16;
        v8 = vaddq_s8(v8, v9);
      }
      while (v7 != 256);
    }
    else
    {
      v11 = 0;
      v12 = pow(0.200000003, v6);
      v13 = v12 / 0.2;
      do
      {
        v14 = (float)(int)v11 / 255.0;
        if (v14 <= 0.2)
          v15 = v13 * v14;
        else
          v15 = pow(v14, v6);
        v4[v11++] = (v15 * 255.0);
      }
      while (v11 != 255);
      v4[255] = -1;
    }
    v10 = 0;
    *(float *)(a1 + 4432) = v6;
    *(_DWORD *)(a1 + 4436) = 0;
  }
  *(_QWORD *)(a1 + 3208) = &unk_1928E19A0;
  if (v10 != a2)
  {
    if (a2 == 1)
    {
      *(_QWORD *)(a1 + 3216) = a1 + 5336;
      v16 = a1 + 4697;
      v17 = 384;
      do
      {
        *(_BYTE *)(v16++ - 1) = *v4;
        --v17;
      }
      while (v17);
      for (i = 1; i != 512; ++i)
        *(_BYTE *)(v16++ - 1) = v4[(unint64_t)i >> 1];
      v19 = 0;
      *(_BYTE *)(v16 - 1) = v4[255];
      do
        *(_BYTE *)(v16 + v19++) = v4[255];
      while ((_DWORD)v19 != 384);
    }
    if ((a2 & 0xFFFFFFFE) == 2)
    {
      v20 = (_BYTE *)(a1 + 4696);
      *(_QWORD *)(a1 + 3232) = a1 + 5336;
      *(_QWORD *)(a1 + 3240) = a1 + 5336;
      *(_QWORD *)(a1 + 3224) = &unk_1928E1EA1;
      if (a2 == 3)
        v21 = 239;
      else
        v21 = 255;
      for (j = -639; j != 641; ++j)
      {
        v23 = 16 * (a2 != 3) + ((28142 * (j >> 1) + 3618560) >> 15);
        v24 = v23 & ~(v23 >> 31);
        if (v24 >= v21)
          v24 = v21;
        if (v23 > v21)
          v23 = v24;
        *v20++ = v4[v23];
      }
    }
    *(_DWORD *)(a1 + 4436) = a2;
  }
}

uint64_t yto2vuyOne(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned __int8 *v10;
  int v11;
  unsigned __int8 *v12;
  uint64_t result;

  v3 = 0;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *a2;
  v6 = *(_QWORD *)(a3 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  do
  {
    v8 = 0;
    do
    {
      v9 = *(__int16 *)(v5 + v8);
      v10 = (unsigned __int8 *)(v6 + 256);
      if (v9 <= 10240)
      {
        v10 = (unsigned __int8 *)(v6 - 256);
        if (v9 >= -10240)
          v10 = (unsigned __int8 *)(v6 + (v9 >> 4));
      }
      v11 = *(__int16 *)(v5 + v8 + 2);
      v12 = (unsigned __int8 *)(v6 + 256);
      if (v11 <= 10240)
      {
        v12 = (unsigned __int8 *)(v6 - 256);
        if (v11 >= -10240)
          v12 = (unsigned __int8 *)(v6 + (v11 >> 4));
      }
      result = (*v12 << 24) | (*v10 << 8) | 0x800080u;
      *(_DWORD *)(v4 + v8) = result;
      v8 += 4;
    }
    while ((_DWORD)v8 != 16);
    v4 += v7;
    ++v3;
    v5 += v8;
  }
  while (v3 != 8);
  return result;
}

uint64_t yuv411to2vuy(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 *v10;
  int v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  unsigned __int8 *v18;
  int v19;
  unsigned __int8 *v20;
  int v21;
  unsigned __int8 *v22;
  int v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  unsigned __int8 *v27;
  int v28;
  int v29;
  unsigned __int8 *v30;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(a3 + 32);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = 2 * v6;
  v8 = v3 + v6;
  v9 = *a2;
  v10 = (__int16 *)a2[1];
  v11 = 7;
  result = 10240;
  v13 = *a2;
  do
  {
    v14 = 0;
    v15 = v11;
    v16 = v9 + 32;
    v10 += 8;
    do
    {
      v17 = *(v10 - 8);
      v18 = (unsigned __int8 *)(v4 + 256);
      if (v17 <= 10240)
      {
        v18 = (unsigned __int8 *)(v4 + (v17 >> 4));
        if (v17 < -10240)
          v18 = (unsigned __int8 *)(v4 - 256);
      }
      v19 = *v10;
      v20 = (unsigned __int8 *)(v4 + 256);
      if (v19 <= 10240)
      {
        v20 = (unsigned __int8 *)(v4 + (v19 >> 4));
        if (v19 < -10240)
          v20 = (unsigned __int8 *)(v4 - 256);
      }
      v21 = *(__int16 *)(v13 + v14);
      v22 = (unsigned __int8 *)(v5 + 256);
      if (v21 <= 10240)
      {
        v22 = (unsigned __int8 *)(v5 - 256);
        if (v21 >= -10240)
          v22 = (unsigned __int8 *)(v5 + (v21 >> 4));
      }
      v23 = *(__int16 *)(v13 + v14 + 2);
      v24 = (unsigned __int8 *)(v5 + 256);
      if (v23 <= 10240)
      {
        v24 = (unsigned __int8 *)(v5 - 256);
        if (v23 >= -10240)
          v24 = (unsigned __int8 *)(v5 + (v23 >> 4));
      }
      v25 = *v18 | (*v20 << 16);
      *(_DWORD *)(v3 + v14) = (*v24 << 24) | (*v22 << 8) | v25;
      v26 = *(__int16 *)(v16 + v14);
      v27 = (unsigned __int8 *)(v5 + 256);
      if (v26 <= 10240)
      {
        v27 = (unsigned __int8 *)(v5 - 256);
        if (v26 >= -10240)
          v27 = (unsigned __int8 *)(v5 + (v26 >> 4));
      }
      v28 = *v27;
      v29 = *(__int16 *)(v16 + v14 + 2);
      v30 = (unsigned __int8 *)(v5 + 256);
      if (v29 <= 10240)
      {
        v30 = (unsigned __int8 *)(v5 - 256);
        if (v29 >= -10240)
          v30 = (unsigned __int8 *)(v5 + (v29 >> 4));
      }
      *(_DWORD *)(v8 + v14) = (*v30 << 24) | (v28 << 8) | v25;
      v14 += 4;
      ++v10;
    }
    while ((_DWORD)v14 != 32);
    v3 += v7;
    v13 += v14 + 32;
    v11 = v15 - 1;
    v8 += v7;
    v9 = v16 + v14;
  }
  while (v15);
  return result;
}

uint64_t yuv422to2vuy(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  __int16 *v3;
  uint64_t v4;
  __int16 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  __int16 *v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  int v22;
  int v23;
  int v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  int v27;
  int v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  int v31;
  int v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  uint64_t v35;

  v4 = *a2;
  v3 = (__int16 *)a2[1];
  v5 = (__int16 *)a2[2];
  v6 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(a3 + 32);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 32);
  result = v7 + 256;
  v11 = 7;
  do
  {
    v12 = v11;
    v13 = 1;
    v14 = v8;
    do
    {
      v15 = 0;
      v16 = v13;
      do
      {
        v18 = *v3++;
        v17 = v18;
        v19 = (__int16 *)(v4 + v15);
        v20 = (unsigned __int8 *)(v6 + (v18 >> 4));
        if (v18 < -10240)
          v20 = (unsigned __int8 *)(v6 - 256);
        if (v17 <= 10240)
          v21 = v20;
        else
          v21 = (unsigned __int8 *)(v6 + 256);
        v22 = *v21;
        v24 = *v5++;
        v23 = v24;
        v25 = (unsigned __int8 *)(v6 + (v24 >> 4));
        if (v24 < -10240)
          v25 = (unsigned __int8 *)(v6 - 256);
        if (v23 <= 10240)
          v26 = v25;
        else
          v26 = (unsigned __int8 *)(v6 + 256);
        v27 = *v26;
        v28 = *v19;
        v29 = (unsigned __int8 *)(v7 + (v28 >> 4));
        if (v28 < -10240)
          v29 = (unsigned __int8 *)(v7 - 256);
        if (v28 <= 10240)
          v30 = v29;
        else
          v30 = (unsigned __int8 *)(v7 + 256);
        v31 = *v30;
        v32 = v19[1];
        v33 = (unsigned __int8 *)(v7 + (v32 >> 4));
        if (v32 < -10240)
          v33 = (unsigned __int8 *)(v7 - 256);
        if (v32 <= 10240)
          v34 = v33;
        else
          v34 = (unsigned __int8 *)(v7 + 256);
        *(_DWORD *)(v14 + v15) = v22 | (v27 << 16) | (v31 << 8) | (*v34 << 24);
        v15 += 4;
      }
      while ((_DWORD)v15 != 16);
      v35 = v4 + v15;
      v4 += v15 + 112;
      v13 = v16 - 1;
      v14 += v15;
    }
    while (v16);
    v4 = v35 - 128;
    v8 += v9;
    v11 = v12 - 1;
  }
  while (v12);
  return result;
}

uint64_t yuvto2vuyOne(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  int v19;
  int v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  int v23;
  int v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;

  v3 = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = a2[2];
  v7 = *(_QWORD *)(a3 + 24);
  v8 = *(_QWORD *)(a3 + 32);
  v9 = *(_QWORD *)(a1 + 16);
  result = *(_QWORD *)(a1 + 32);
  do
  {
    v11 = 0;
    do
    {
      v12 = *(__int16 *)(v4 + v11);
      v13 = (unsigned __int8 *)(v8 + (v12 >> 4));
      if (v12 < -10240)
        v13 = (unsigned __int8 *)(v8 - 256);
      if (v12 <= 10240)
        v14 = v13;
      else
        v14 = (unsigned __int8 *)(v8 + 256);
      v15 = *v14;
      v16 = *(__int16 *)(v4 + v11 + 2);
      v17 = (unsigned __int8 *)(v8 + (v16 >> 4));
      if (v16 < -10240)
        v17 = (unsigned __int8 *)(v8 - 256);
      if (v16 <= 10240)
        v18 = v17;
      else
        v18 = (unsigned __int8 *)(v8 + 256);
      v19 = *v18;
      v20 = *(__int16 *)(v5 + v11 + 2) + *(__int16 *)(v5 + v11);
      v21 = (unsigned __int8 *)(v7 + (v20 >> 5));
      if (v20 < -20480)
        v21 = (unsigned __int8 *)(v7 - 256);
      if (v20 <= 20481)
        v22 = v21;
      else
        v22 = (unsigned __int8 *)(v7 + 256);
      v23 = *v22;
      v24 = *(__int16 *)(v6 + v11 + 2) + *(__int16 *)(v6 + v11);
      v25 = (unsigned __int8 *)(v7 + (v24 >> 5));
      if (v24 < -20480)
        v25 = (unsigned __int8 *)(v7 - 256);
      if (v24 <= 20481)
        v26 = v25;
      else
        v26 = (unsigned __int8 *)(v7 + 256);
      *(_DWORD *)(v9 + v11) = (v15 << 8) | (v19 << 24) | v23 | (*v26 << 16);
      v11 += 4;
    }
    while ((_DWORD)v11 != 16);
    v9 += result;
    ++v3;
    v6 += v11;
    v5 += v11;
    v4 += v11;
  }
  while (v3 != 8);
  return result;
}

uint64_t ytoY420One(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  __int16 *v15;
  int v16;
  _BYTE *v17;
  _BYTE *v18;
  int v19;
  char *v20;
  _BYTE *v21;
  char v22;
  int v23;

  v3 = 0;
  v4 = *a2;
  v5 = *(_QWORD *)(a3 + 32);
  v6 = a1[2];
  v7 = a1[4];
  v8 = (_DWORD *)a1[12];
  v9 = (_DWORD *)a1[22];
  v10 = a1[14];
  v11 = a1[24];
  result = v5 + 256;
  do
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (__int16 *)(v4 + 2 * v14);
      v16 = *v15;
      v17 = (_BYTE *)(v5 + (v16 >> 4));
      if (v16 < -10240)
        v17 = (_BYTE *)(v5 - 256);
      if (v16 <= 10240)
        v18 = v17;
      else
        v18 = (_BYTE *)(v5 + 256);
      v19 = v15[1];
      v20 = (char *)(v5 + 256);
      if (v19 <= 10240)
      {
        v20 = (char *)(v5 - 256);
        if (v19 >= -10240)
          v20 = (char *)(v5 + (v19 >> 4));
      }
      v21 = (_BYTE *)(v6 + v14);
      v22 = *v20;
      *v21 = *v18;
      v21[1] = v22;
      v14 += 2;
      v13 -= 4;
    }
    while ((_DWORD)v14 != 8);
    v6 += v7;
    ++v3;
    v4 -= v13;
  }
  while (v3 != 8);
  v23 = 4;
  do
  {
    *v8 = -2139062144;
    *v9 = -2139062144;
    v8 = (_DWORD *)((char *)v8 + v10);
    v9 = (_DWORD *)((char *)v9 + v11);
    --v23;
  }
  while (v23);
  return result;
}

uint64_t yuv411toY420(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  __int16 *v22;
  int v23;
  int v24;
  char *v25;
  char *v26;
  char v27;
  char *v28;
  char *v29;
  char v30;
  __int16 *v31;
  int v32;
  char *v33;
  char *v34;
  char v35;
  int v36;
  char *v37;
  char *v38;
  char v39;
  _BYTE *v40;
  int v41;
  _BYTE *v42;
  _BYTE *v43;
  int v44;
  char *v45;
  char v46;
  _BYTE *v47;

  v4 = *a2;
  v3 = a2[1];
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(a3 + 32);
  v7 = a1[2];
  v8 = a1[4];
  v9 = a1[12];
  v10 = a1[22];
  v11 = a1[14];
  v12 = 2 * v8;
  v13 = v7 + v8;
  result = a1[24];
  v15 = 7;
  v16 = *a2;
  do
  {
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = v15;
    v21 = v4 + 32;
    do
    {
      v22 = (__int16 *)(v16 + 2 * v19);
      v23 = *(__int16 *)(v3 + v19);
      v24 = *(__int16 *)(v3 + v19 + 16);
      v25 = (char *)(v5 + (v23 >> 4));
      if (v23 < -10240)
        v25 = (char *)(v5 - 256);
      if (v23 <= 10240)
        v26 = v25;
      else
        v26 = (char *)(v5 + 256);
      v27 = *v26;
      v28 = (char *)(v5 + (v24 >> 4));
      if (v24 < -10240)
        v28 = (char *)(v5 - 256);
      if (v24 <= 10240)
        v29 = v28;
      else
        v29 = (char *)(v5 + 256);
      v30 = *v29;
      *(_BYTE *)(v9 + v18) = v27;
      *(_BYTE *)(v10 + v18) = v30;
      v31 = (__int16 *)(v21 + 2 * v19);
      v32 = *v22;
      v33 = (char *)(v6 + (v32 >> 4));
      if (v32 < -10240)
        v33 = (char *)(v6 - 256);
      if (v32 <= 10240)
        v34 = v33;
      else
        v34 = (char *)(v6 + 256);
      v35 = *v34;
      v36 = v22[1];
      v37 = (char *)(v6 + (v36 >> 4));
      if (v36 < -10240)
        v37 = (char *)(v6 - 256);
      if (v36 <= 10240)
        v38 = v37;
      else
        v38 = (char *)(v6 + 256);
      v39 = *v38;
      v40 = (_BYTE *)(v7 + v19);
      *v40 = v35;
      v40[1] = v39;
      v41 = *v31;
      v42 = (_BYTE *)(v6 + (v41 >> 4));
      if (v41 < -10240)
        v42 = (_BYTE *)(v6 - 256);
      if (v41 <= 10240)
        v43 = v42;
      else
        v43 = (_BYTE *)(v6 + 256);
      v44 = v31[1];
      v45 = (char *)(v6 + 256);
      if (v44 <= 10240)
      {
        v45 = (char *)(v6 - 256);
        if (v44 >= -10240)
          v45 = (char *)(v6 + (v44 >> 4));
      }
      v46 = *v45;
      v47 = (_BYTE *)(v13 + v19);
      *v47 = *v43;
      v47[1] = v46;
      v19 += 2;
      ++v18;
      v17 -= 4;
    }
    while ((_DWORD)v19 != 16);
    v3 += v19 + 16;
    v16 = v16 - v17 + 32;
    v7 += v12;
    v9 += v11;
    v10 += result;
    v15 = v20 - 1;
    v13 += v12;
    v4 = v21 - v17;
  }
  while (v20);
  return result;
}

uint64_t yuv422toY420(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t result;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _BYTE *v22;
  __int16 *v23;
  int v24;
  char *v25;
  char v26;
  int v27;
  char *v28;
  char v29;
  int v30;
  char *v31;
  char *v32;
  char v33;
  int v34;
  char *v35;
  char *v36;
  char v37;
  int v38;
  char *v39;
  char *v40;
  int v41;
  char *v42;
  _BYTE *v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;

  v4 = *a2;
  v3 = a2[1];
  v5 = a2[2];
  v6 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(a3 + 32);
  v8 = a1[2];
  v9 = (_BYTE *)a1[12];
  v10 = (_BYTE *)a1[22];
  v47 = a1[14];
  v46 = a1[24];
  result = a1[4];
  v12 = 3;
  do
  {
    v13 = v12;
    v14 = v8 + result;
    v15 = 1;
    v16 = v10;
    v17 = v9;
    v18 = v8;
    v19 = v4;
    do
    {
      v20 = 0;
      v21 = v15;
      v4 = v19 - 112;
      do
      {
        v22 = (_BYTE *)(v18 + v20);
        v23 = (__int16 *)(v19 + 2 * v20);
        v24 = *(__int16 *)(v3 + v20);
        v25 = (char *)(v6 + (v24 >> 4));
        if (v24 < -10240)
          v25 = (char *)(v6 - 256);
        if (v24 > 10240)
          v25 = (char *)(v6 + 256);
        v26 = *v25;
        v27 = *(__int16 *)(v5 + v20);
        v28 = (char *)(v6 + (v27 >> 4));
        if (v27 < -10240)
          v28 = (char *)(v6 - 256);
        if (v27 > 10240)
          v28 = (char *)(v6 + 256);
        v29 = *v28;
        *v17++ = v26;
        *v16++ = v29;
        v30 = *v23;
        v31 = (char *)(v7 + (v30 >> 4));
        if (v30 < -10240)
          v31 = (char *)(v7 - 256);
        if (v30 <= 10240)
          v32 = v31;
        else
          v32 = (char *)(v7 + 256);
        v33 = *v32;
        v34 = v23[1];
        v35 = (char *)(v7 + (v34 >> 4));
        if (v34 < -10240)
          v35 = (char *)(v7 - 256);
        if (v34 <= 10240)
          v36 = v35;
        else
          v36 = (char *)(v7 + 256);
        v37 = *v36;
        *v22 = v33;
        v22[1] = v37;
        v38 = v23[8];
        v39 = (char *)(v7 + (v38 >> 4));
        if (v38 < -10240)
          v39 = (char *)(v7 - 256);
        if (v38 <= 10240)
          v40 = v39;
        else
          v40 = (char *)(v7 + 256);
        v41 = v23[9];
        v42 = (char *)(v7 + 256);
        if (v41 <= 10240)
        {
          v42 = (char *)(v7 - 256);
          if (v41 >= -10240)
            v42 = (char *)(v7 + (v41 >> 4));
        }
        v43 = (_BYTE *)(v14 + v20);
        v44 = *v40;
        v45 = *v42;
        *v43 = v44;
        v43[1] = v45;
        v20 += 2;
        v4 += 4;
      }
      while ((_DWORD)v20 != 8);
      v19 = v4 + 224;
      v15 = v21 - 1;
      v14 += v20;
      v18 += v20;
      v5 += v20;
      v3 += v20;
    }
    while (v21);
    v3 += 16;
    v5 += 16;
    v8 += 2 * result;
    v9 += v47;
    v10 += v46;
    v12 = v13 - 1;
  }
  while (v13);
  return result;
}

uint64_t yuvtoY420One(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _BYTE *v18;
  __int16 *v19;
  int v20;
  char *v21;
  char *v22;
  char v23;
  int v24;
  char *v25;
  char *v26;
  char v27;
  int v28;
  char *v29;
  char *v30;
  char v31;
  int v32;
  char *v33;
  char *v34;
  char v35;
  int v36;
  _BYTE *v37;
  _BYTE *v38;
  int v39;
  char *v40;
  _BYTE *v41;
  char v42;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(a3 + 32);
  v8 = (_BYTE *)a1[2];
  v9 = a1[4];
  v10 = a1[12];
  v11 = a1[22];
  v12 = a1[14];
  result = a1[24];
  v14 = 3;
  do
  {
    v15 = 0;
    v16 = 0;
    v17 = v14;
    v18 = v8;
    do
    {
      v19 = (__int16 *)(v3 + v16);
      v20 = *(__int16 *)(v4 + v16 + 2)
          + *(__int16 *)(v4 + v16)
          + *(__int16 *)(v4 + v16 + 16)
          + *(__int16 *)(v4 + v16 + 18);
      v21 = (char *)(v6 + (v20 >> 6));
      if (v20 < -40960)
        v21 = (char *)(v6 - 256);
      if (v20 <= 40963)
        v22 = v21;
      else
        v22 = (char *)(v6 + 256);
      v23 = *v22;
      v24 = *(__int16 *)(v5 + v16 + 2)
          + *(__int16 *)(v5 + v16)
          + *(__int16 *)(v5 + v16 + 16)
          + *(__int16 *)(v5 + v16 + 18);
      v25 = (char *)(v6 + (v24 >> 6));
      if (v24 < -40960)
        v25 = (char *)(v6 - 256);
      if (v24 <= 40963)
        v26 = v25;
      else
        v26 = (char *)(v6 + 256);
      v27 = *v26;
      *(_BYTE *)(v10 + v15) = v23;
      *(_BYTE *)(v11 + v15) = v27;
      v28 = *v19;
      v29 = (char *)(v7 + (v28 >> 4));
      if (v28 < -10240)
        v29 = (char *)(v7 - 256);
      if (v28 <= 10240)
        v30 = v29;
      else
        v30 = (char *)(v7 + 256);
      v31 = *v30;
      v32 = v19[1];
      v33 = (char *)(v7 + (v32 >> 4));
      if (v32 < -10240)
        v33 = (char *)(v7 - 256);
      if (v32 <= 10240)
        v34 = v33;
      else
        v34 = (char *)(v7 + 256);
      v35 = *v34;
      *v18 = v31;
      v18[1] = v35;
      v36 = v19[8];
      v37 = (_BYTE *)(v7 + (v36 >> 4));
      if (v36 < -10240)
        v37 = (_BYTE *)(v7 - 256);
      if (v36 <= 10240)
        v38 = v37;
      else
        v38 = (_BYTE *)(v7 + 256);
      v39 = v19[9];
      v40 = (char *)(v7 + 256);
      if (v39 <= 10240)
      {
        v40 = (char *)(v7 - 256);
        if (v39 >= -10240)
          v40 = (char *)(v7 + (v39 >> 4));
      }
      v41 = &v18[v9];
      v18 += 2;
      v42 = *v40;
      *v41 = *v38;
      v41[1] = v42;
      v16 += 4;
      ++v15;
    }
    while ((_DWORD)v16 != 16);
    v3 += v16 + 16;
    v4 += v16 + 16;
    v5 += v16 + 16;
    v8 += 2 * v9;
    v10 += result;
    v11 += v12;
    v14 = v17 - 1;
  }
  while (v17);
  return result;
}

double yto420vOne(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 *v12;
  int v13;
  _BYTE *v14;
  _BYTE *v15;
  int v16;
  char *v17;
  _BYTE *v18;
  char v19;
  double result;
  _QWORD *v21;

  v3 = 0;
  v4 = *a2;
  v5 = *(_QWORD *)(a3 + 32);
  v6 = a1[2];
  v7 = a1[4];
  v8 = (_QWORD *)a1[12];
  v9 = a1[14];
  do
  {
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = (__int16 *)(v4 + 2 * v11);
      v13 = *v12;
      v14 = (_BYTE *)(v5 + (v13 >> 4));
      if (v13 < -10240)
        v14 = (_BYTE *)(v5 - 256);
      if (v13 <= 10240)
        v15 = v14;
      else
        v15 = (_BYTE *)(v5 + 256);
      v16 = v12[1];
      v17 = (char *)(v5 + 256);
      if (v16 <= 10240)
      {
        v17 = (char *)(v5 - 256);
        if (v16 >= -10240)
          v17 = (char *)(v5 + (v16 >> 4));
      }
      v18 = (_BYTE *)(v6 + v11);
      v19 = *v17;
      *v18 = *v15;
      v18[1] = v19;
      v11 += 2;
      v10 -= 4;
    }
    while ((_DWORD)v11 != 8);
    v6 += v7;
    ++v3;
    v4 -= v10;
  }
  while (v3 != 8);
  result = -2.93744652e-306;
  *v8 = 0x8080808080808080;
  *(_QWORD *)((char *)v8 + v9) = 0x8080808080808080;
  v21 = (_QWORD *)((char *)v8 + v9 + v9);
  *v21 = 0x8080808080808080;
  *(_QWORD *)((char *)v21 + v9) = 0x8080808080808080;
  return result;
}

uint64_t yuv411to420v(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  _BYTE *v19;
  __int16 *v20;
  __int16 *v21;
  int v22;
  int v23;
  char *v24;
  char *v25;
  char v26;
  char *v27;
  char *v28;
  char v29;
  int v30;
  char *v31;
  char *v32;
  char v33;
  int v34;
  char *v35;
  char *v36;
  char v37;
  _BYTE *v38;
  int v39;
  _BYTE *v40;
  _BYTE *v41;
  int v42;
  char *v43;
  char v44;
  _BYTE *v45;

  v3 = *a2;
  v4 = a2[1];
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(a3 + 32);
  v7 = a1[2];
  v8 = a1[4];
  v9 = a1[12];
  v10 = 2 * v8;
  v11 = v7 + v8;
  result = a1[14];
  v13 = 7;
  v14 = v3;
  do
  {
    v15 = 0;
    v16 = 0;
    v17 = v13;
    v18 = v3 + 32;
    do
    {
      v19 = (_BYTE *)(v9 + v16);
      v20 = (__int16 *)(v14 + 2 * v16);
      v21 = (__int16 *)(v18 + 2 * v16);
      v22 = *(__int16 *)(v4 + v16);
      v23 = *(__int16 *)(v4 + v16 + 16);
      v24 = (char *)(v5 + (v22 >> 4));
      if (v22 < -10240)
        v24 = (char *)(v5 - 256);
      if (v22 <= 10240)
        v25 = v24;
      else
        v25 = (char *)(v5 + 256);
      v26 = *v25;
      v27 = (char *)(v5 + (v23 >> 4));
      if (v23 < -10240)
        v27 = (char *)(v5 - 256);
      if (v23 <= 10240)
        v28 = v27;
      else
        v28 = (char *)(v5 + 256);
      v29 = *v28;
      *v19 = v26;
      v19[1] = v29;
      v30 = *v20;
      v31 = (char *)(v6 + (v30 >> 4));
      if (v30 < -10240)
        v31 = (char *)(v6 - 256);
      if (v30 <= 10240)
        v32 = v31;
      else
        v32 = (char *)(v6 + 256);
      v33 = *v32;
      v34 = v20[1];
      v35 = (char *)(v6 + (v34 >> 4));
      if (v34 < -10240)
        v35 = (char *)(v6 - 256);
      if (v34 <= 10240)
        v36 = v35;
      else
        v36 = (char *)(v6 + 256);
      v37 = *v36;
      v38 = (_BYTE *)(v7 + v16);
      *v38 = v33;
      v38[1] = v37;
      v39 = *v21;
      v40 = (_BYTE *)(v6 + (v39 >> 4));
      if (v39 < -10240)
        v40 = (_BYTE *)(v6 - 256);
      if (v39 <= 10240)
        v41 = v40;
      else
        v41 = (_BYTE *)(v6 + 256);
      v42 = v21[1];
      v43 = (char *)(v6 + 256);
      if (v42 <= 10240)
      {
        v43 = (char *)(v6 - 256);
        if (v42 >= -10240)
          v43 = (char *)(v6 + (v42 >> 4));
      }
      v44 = *v43;
      v45 = (_BYTE *)(v11 + v16);
      *v45 = *v41;
      v45[1] = v44;
      v16 += 2;
      v15 -= 4;
    }
    while ((_DWORD)v16 != 16);
    v4 += v16 + 16;
    v14 = v14 - v15 + 32;
    v7 += v10;
    v9 += result;
    v13 = v17 - 1;
    v11 += v10;
    v3 = v18 - v15;
  }
  while (v17);
  return result;
}

uint64_t yuv422to420v(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _BYTE *v21;
  _BYTE *v22;
  __int16 *v23;
  int v24;
  char *v25;
  char *v26;
  char v27;
  int v28;
  char *v29;
  char *v30;
  char v31;
  int v32;
  char *v33;
  char *v34;
  char v35;
  int v36;
  char *v37;
  char *v38;
  char v39;
  int v40;
  _BYTE *v41;
  _BYTE *v42;
  int v43;
  char *v44;
  _BYTE *v45;
  char v46;

  v4 = *a2;
  v3 = a2[1];
  v5 = a2[2];
  v6 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(a3 + 32);
  v8 = a1[2];
  v9 = a1[4];
  v10 = a1[12];
  result = a1[14];
  v12 = 3;
  do
  {
    v13 = v12;
    v14 = v8 + v9;
    v15 = 1;
    v16 = v10;
    v17 = v8;
    v18 = v4;
    do
    {
      v19 = 0;
      v20 = v15;
      v4 = v18 - 112;
      do
      {
        v21 = (_BYTE *)(v16 + v19);
        v22 = (_BYTE *)(v17 + v19);
        v23 = (__int16 *)(v18 + 2 * v19);
        v24 = *(__int16 *)(v3 + v19);
        v25 = (char *)(v6 + (v24 >> 4));
        if (v24 < -10240)
          v25 = (char *)(v6 - 256);
        if (v24 <= 10240)
          v26 = v25;
        else
          v26 = (char *)(v6 + 256);
        v27 = *v26;
        v28 = *(__int16 *)(v5 + v19);
        v29 = (char *)(v6 + (v28 >> 4));
        if (v28 < -10240)
          v29 = (char *)(v6 - 256);
        if (v28 <= 10240)
          v30 = v29;
        else
          v30 = (char *)(v6 + 256);
        v31 = *v30;
        *v21 = v27;
        v21[1] = v31;
        v32 = *v23;
        v33 = (char *)(v7 + (v32 >> 4));
        if (v32 < -10240)
          v33 = (char *)(v7 - 256);
        if (v32 <= 10240)
          v34 = v33;
        else
          v34 = (char *)(v7 + 256);
        v35 = *v34;
        v36 = v23[1];
        v37 = (char *)(v7 + (v36 >> 4));
        if (v36 < -10240)
          v37 = (char *)(v7 - 256);
        if (v36 <= 10240)
          v38 = v37;
        else
          v38 = (char *)(v7 + 256);
        v39 = *v38;
        *v22 = v35;
        v22[1] = v39;
        v40 = v23[8];
        v41 = (_BYTE *)(v7 + (v40 >> 4));
        if (v40 < -10240)
          v41 = (_BYTE *)(v7 - 256);
        if (v40 <= 10240)
          v42 = v41;
        else
          v42 = (_BYTE *)(v7 + 256);
        v43 = v23[9];
        v44 = (char *)(v7 + 256);
        if (v43 <= 10240)
        {
          v44 = (char *)(v7 - 256);
          if (v43 >= -10240)
            v44 = (char *)(v7 + (v43 >> 4));
        }
        v45 = (_BYTE *)(v14 + v19);
        v46 = *v44;
        *v45 = *v42;
        v45[1] = v46;
        v19 += 2;
        v4 += 4;
      }
      while ((_DWORD)v19 != 8);
      v18 = v4 + 224;
      v15 = v20 - 1;
      v16 += v19;
      v14 += v19;
      v17 += v19;
      v5 += v19;
      v3 += v19;
    }
    while (v20);
    v3 += 16;
    v5 += 16;
    v8 += 2 * v9;
    v10 += result;
    v12 = v13 - 1;
  }
  while (v13);
  return result;
}

uint64_t yuvto420vOne(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _BYTE *v18;
  __int16 *v19;
  int v20;
  char *v21;
  char *v22;
  char v23;
  int v24;
  char *v25;
  char *v26;
  char v27;
  int v28;
  char *v29;
  char *v30;
  char v31;
  int v32;
  char *v33;
  char *v34;
  char v35;
  _BYTE *v36;
  int v37;
  _BYTE *v38;
  _BYTE *v39;
  int v40;
  char *v41;
  char v42;
  _BYTE *v43;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(a3 + 32);
  v8 = a1[2];
  v9 = a1[4];
  v10 = a1[12];
  v11 = 2 * v9;
  v12 = v8 + v9;
  result = a1[14];
  v14 = 3;
  do
  {
    v15 = 0;
    v16 = v14;
    v17 = -16;
    do
    {
      v18 = (_BYTE *)(v10 + v15);
      v19 = (__int16 *)(v3 + 2 * v15);
      v20 = *(__int16 *)(v4 + 2 * v15 + 2)
          + *(__int16 *)(v4 + 2 * v15)
          + *(__int16 *)(v4 + 2 * v15 + 16)
          + *(__int16 *)(v4 + 2 * v15 + 18);
      v21 = (char *)(v6 + (v20 >> 6));
      if (v20 < -40960)
        v21 = (char *)(v6 - 256);
      if (v20 <= 40963)
        v22 = v21;
      else
        v22 = (char *)(v6 + 256);
      v23 = *v22;
      v24 = *(__int16 *)(v5 + 2 * v15 + 2)
          + *(__int16 *)(v5 + 2 * v15)
          + *(__int16 *)(v5 + 2 * v15 + 16)
          + *(__int16 *)(v5 + 2 * v15 + 18);
      v25 = (char *)(v6 + (v24 >> 6));
      if (v24 < -40960)
        v25 = (char *)(v6 - 256);
      if (v24 <= 40963)
        v26 = v25;
      else
        v26 = (char *)(v6 + 256);
      v27 = *v26;
      *v18 = v23;
      v18[1] = v27;
      v28 = *v19;
      v29 = (char *)(v7 + (v28 >> 4));
      if (v28 < -10240)
        v29 = (char *)(v7 - 256);
      if (v28 <= 10240)
        v30 = v29;
      else
        v30 = (char *)(v7 + 256);
      v31 = *v30;
      v32 = v19[1];
      v33 = (char *)(v7 + (v32 >> 4));
      if (v32 < -10240)
        v33 = (char *)(v7 - 256);
      if (v32 <= 10240)
        v34 = v33;
      else
        v34 = (char *)(v7 + 256);
      v35 = *v34;
      v36 = (_BYTE *)(v8 + v15);
      *v36 = v31;
      v36[1] = v35;
      v37 = v19[8];
      v38 = (_BYTE *)(v7 + (v37 >> 4));
      if (v37 < -10240)
        v38 = (_BYTE *)(v7 - 256);
      if (v37 <= 10240)
        v39 = v38;
      else
        v39 = (_BYTE *)(v7 + 256);
      v40 = v19[9];
      v41 = (char *)(v7 + 256);
      if (v40 <= 10240)
      {
        v41 = (char *)(v7 - 256);
        if (v40 >= -10240)
          v41 = (char *)(v7 + (v40 >> 4));
      }
      v42 = *v41;
      v43 = (_BYTE *)(v12 + v15);
      *v43 = *v39;
      v43[1] = v42;
      v15 += 2;
      v17 -= 4;
    }
    while ((_DWORD)v15 != 8);
    v3 -= v17;
    v4 -= v17;
    v8 += v11;
    v5 -= v17;
    v10 += result;
    v14 = v16 - 1;
    v12 += v11;
  }
  while (v16);
  return result;
}

uint64_t UpsampleThenContinue(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char *v12;
  uint64_t *v13;
  uint64_t i;
  uint64_t j;
  uint64_t v16;
  _QWORD *v17;
  unsigned int v18;
  int v19;
  int v21;
  int v22;
  _QWORD v23[3];
  _OWORD v24[2];
  uint64_t v25;
  char v26;
  uint64_t v27;

  v4 = result;
  v5 = 0;
  v27 = *MEMORY[0x1E0C80C00];
  v25 = 0;
  memset(v24, 0, sizeof(v24));
  memset(v23, 0, sizeof(v23));
  v19 = *(__int16 *)(a3 + 58);
  v21 = v19 >> 4;
  v6 = (uint64_t *)(result + 16);
  do
  {
    v7 = *v6;
    v6 += 10;
    v23[v5++] = v7;
  }
  while (v5 != 3);
  v18 = v19 & 0xF;
  if ((v19 & 0xF) != 0)
  {
    v8 = 0;
    v9 = a3 + 62;
    do
    {
      v22 = v8;
      if (v19 >= 16)
      {
        LOWORD(v10) = 0;
        do
        {
          if (*(__int16 *)(a3 + 56) >= 1)
          {
            v11 = 0;
            v12 = &v26;
            v13 = a2;
            do
            {
              *((_QWORD *)v24 + v11) = FilterBlock((__int16)(*(char *)(v9 + v11) | (unsigned __int16)(*(_WORD *)(a3 + 58) << 8)), v12, v13, (__int16)v10, (__int16)v22, v21 - 1, v18 - 1);
              v12 += 128;
              ++v11;
              ++v13;
            }
            while (v11 < *(__int16 *)(a3 + 56));
          }
          result = (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t))(a3 + 48))(v4, v24, a3);
          for (i = 0; i != 240; i += 80)
            *(_QWORD *)(v4 + i + 16) += *(_QWORD *)(v4 + i + 56);
          v10 = (__int16)(v10 + 1);
        }
        while (v10 < v21);
      }
      for (j = 0; j != 240; j += 80)
        *(_QWORD *)(v4 + j + 16) += *(_QWORD *)(v4 + j + 64) - *(_QWORD *)(v4 + j + 56) * v21;
      v8 = v22 + 1;
    }
    while (v18 > (unsigned __int16)(v22 + 1));
  }
  v16 = 0;
  v17 = (_QWORD *)(v4 + 16);
  do
  {
    *v17 = v23[v16];
    v17 += 10;
    ++v16;
  }
  while (v16 != 3);
  return result;
}

uint64_t VTParavirtualizedJPEGSessionGetTypeID()
{
  MEMORY[0x1940281CC](&VTParavirtualizedJPEGSessionGetTypeID_onceToken, RegisterVTParavirtualizedJPEGSession);
  return sVTParavirtualizedJPEGSessionTypeID;
}

uint64_t RegisterVTParavirtualizedJPEGSession()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sVTParavirtualizedJPEGSessionTypeID = result;
  return result;
}

uint64_t VTParavirtualizedJPEGSessionCreate(uint64_t a1, uint64_t *a2)
{
  uint64_t Instance;
  uint64_t v4;
  const __CFUUID *v5;
  uint64_t v6;
  uint64_t SInt32;
  uint64_t v8;
  unsigned int v10;
  CFTypeRef v11;
  CFTypeRef v12;
  CFTypeRef v13;
  CFTypeRef cf;

  MEMORY[0x1940281CC](&VTParavirtualizedJPEGSessionGetTypeID_onceToken, RegisterVTParavirtualizedJPEGSession);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return 4294954392;
  v4 = Instance;
  v5 = CFUUIDCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  *(CFUUIDBytes *)(v4 + 16) = CFUUIDGetUUIDBytes(v5);
  v6 = VTParavirtualizationGuestInstallHandlerForUUID((CFUUIDBytes *)(v4 + 16), &__block_literal_global_8, 0);
  if ((_DWORD)v6)
  {
    v8 = v6;
  }
  else
  {
    v13 = 0;
    cf = 0;
    v11 = 0;
    v12 = 0;
    SInt32 = VTParavirtualizationCreateMessageAndByteStream(1784897904, 1, v4 + 16, 0, (CMBlockBufferRef *)&v13, &v12);
    if ((_DWORD)SInt32
      || (SInt32 = VTParavirtualizationGuestSendMessageToHostAndCopyReplySync((OpaqueCMBlockBuffer *)v13, &cf),
          (_DWORD)SInt32)
      || (v10 = 0,
          SInt32 = VTParavirtualizationMessageGetSInt32((OpaqueCMBlockBuffer *)cf, 744845938, &v10),
          (_DWORD)SInt32))
    {
      v8 = SInt32;
    }
    else
    {
      v8 = v10;
      if (!v10)
      {
        v8 = VTParavirtualizationMessageCopyCFDictionary((OpaqueCMBlockBuffer *)cf, 745169761, &v11);
        if (!(_DWORD)v8)
        {
          *(_QWORD *)(v4 + 32) = v11;
          v11 = 0;
        }
      }
    }
    if (cf)
      CFRelease(cf);
    if (v13)
      CFRelease(v13);
    if (v12)
      CFRelease(v12);
    if (v11)
      CFRelease(v11);
    if (a2 && !(_DWORD)v8)
    {
      *a2 = v4;
      if (!v5)
        return v8;
      goto LABEL_25;
    }
  }
  CFRelease((CFTypeRef)v4);
  if (v5)
LABEL_25:
    CFRelease(v5);
  return v8;
}

uint64_t VTParavirtualizedJPEGSessionCopyCapabilities(CFDictionaryRef *a1, CFDictionaryRef *a2)
{
  const __CFAllocator *v4;
  CFDictionaryRef Copy;
  uint64_t result;

  if (!a1)
    return 4294954394;
  if (!a2)
    return 0;
  v4 = CFGetAllocator(a1);
  Copy = CFDictionaryCreateCopy(v4, a1[4]);
  result = 0;
  *a2 = Copy;
  return result;
}

uint64_t VTParavirtualizedJPEGSessionEncodeImage(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef cf, _DWORD *a5)
{
  uint64_t v5;
  CFTypeID v11;
  uint64_t appended;
  uint64_t UInt32;
  int v15;
  unsigned int v16;
  CFTypeRef v17;
  CFTypeRef v18;
  CFTypeRef cfa;
  _QWORD v20[3];

  v20[2] = *MEMORY[0x1E0C80C00];
  v18 = 0;
  cfa = 0;
  v17 = 0;
  v5 = 4294954394;
  if (a1 && a2 && a3 && cf)
  {
    v11 = CFGetTypeID(cf);
    if (v11 == CFDictionaryGetTypeID())
    {
      appended = VTParavirtualizationCreateMessageAndByteStream(1785032291, 1, a1 + 16, 0, (CMBlockBufferRef *)&v18, &v17);
      if ((_DWORD)appended
        || (appended = VTParavirtualizationMessageAppendCFDictionary(v17, 745172847, cf), (_DWORD)appended)
        || (v20[0] = a2,
            v20[1] = a3,
            appended = VTParavirtualizationGuestSendMessageWithIOSurfacesToHostAndCopyReplySync((OpaqueCMBlockBuffer *)v18, (uint64_t)v20, 2, &cfa), (_DWORD)appended)|| (v16 = 0, appended = VTParavirtualizationMessageGetSInt32((OpaqueCMBlockBuffer *)cfa, 744845938, &v16), (_DWORD)appended))
      {
        v5 = appended;
      }
      else
      {
        v5 = v16;
        if (!v16)
        {
          v15 = 0;
          UInt32 = VTParavirtualizationMessageGetUInt32((OpaqueCMBlockBuffer *)cfa, 745170291, &v15);
          v5 = UInt32;
          if (a5)
          {
            if (!(_DWORD)UInt32)
              *a5 = v15;
          }
        }
      }
    }
    else
    {
      v5 = 4294954394;
    }
  }
  if (cfa)
    CFRelease(cfa);
  if (v18)
    CFRelease(v18);
  if (v17)
    CFRelease(v17);
  return v5;
}

uint64_t VTParavirtualizedJPEGSessionDecodeImage(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef cf)
{
  uint64_t v4;
  CFTypeID v9;
  uint64_t appended;
  CFTypeRef v11;
  unsigned int SInt32;
  unsigned int v14;
  CFTypeRef v15;
  CFTypeRef v16;
  CFTypeRef cfa;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x1E0C80C00];
  v16 = 0;
  cfa = 0;
  v15 = 0;
  v4 = 4294954394;
  if (a1 && a2 && a3 && cf)
  {
    v9 = CFGetTypeID(cf);
    if (v9 == CFDictionaryGetTypeID())
    {
      appended = VTParavirtualizationCreateMessageAndByteStream(1784964451, 1, a1 + 16, 0, (CMBlockBufferRef *)&v16, &v15);
      if ((_DWORD)appended
        || (appended = VTParavirtualizationMessageAppendCFDictionary(v15, 745172847, cf), (_DWORD)appended))
      {
        v4 = appended;
      }
      else
      {
        v18[0] = a2;
        v18[1] = a3;
        v4 = VTParavirtualizationGuestSendMessageWithIOSurfacesToHostAndCopyReplySync((OpaqueCMBlockBuffer *)v16, (uint64_t)v18, 2, &cfa);
        v11 = cfa;
        if (!(_DWORD)v4)
        {
          v14 = 0;
          SInt32 = VTParavirtualizationMessageGetSInt32((OpaqueCMBlockBuffer *)cfa, 744845938, &v14);
          if (SInt32)
            v4 = SInt32;
          else
            v4 = v14;
          v11 = cfa;
        }
        if (v11)
          CFRelease(v11);
      }
    }
    else
    {
      v4 = 4294954394;
    }
  }
  if (v16)
    CFRelease(v16);
  if (v15)
    CFRelease(v15);
  return v4;
}

_QWORD *PVJPEGSessionClass_Init(_QWORD *result)
{
  result[2] = 0;
  result[3] = 0;
  result[4] = 0;
  return result;
}

uint64_t PVJPEGSessionClass_Finalize(uint64_t result)
{
  uint64_t v1;
  const void *v2;

  if (result)
  {
    v1 = result;
    v2 = *(const void **)(result + 32);
    if (v2)
    {
      CFRelease(v2);
      *(_QWORD *)(v1 + 32) = 0;
    }
    return VTParavirtualizationGuestRemoveHandlerForUUID((CFUUIDBytes *)(v1 + 16));
  }
  return result;
}

CFTypeRef PVJPEGSessionClass_CopyFormattingDesc()
{
  return CFRetain(CFSTR("[VTParavirtualizedJPEGSession]"));
}

__CFString *PVJPEGSessionClass_CopyDebugDescription(unsigned __int8 *a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<VTParavirtualizedJPEGSession %p UUID %02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x>"), a1, a1[16], a1[17], a1[18], a1[19], a1[20], a1[21], a1[22], a1[23], a1[24], a1[25], a1[26], a1[27], a1[28], a1[29], a1[30],
    a1[31]);
  return Mutable;
}

uint64_t JPEGVideoDecoder_CreateInstance(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;

  VTVideoDecoderGetClassID();
  v4 = CMDerivedObjectCreate();
  FigSignalErrorAt();
  *a3 = 0;
  return v4;
}

uint64_t JPEGVideoDecoder_Invalidate()
{
  _BYTE *DerivedStorage;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage)
    *DerivedStorage = 1;
  return 0;
}

uint64_t JPEGVideoDecoder_Finalize()
{
  uint64_t DerivedStorage;
  uint64_t i;
  void *v2;
  uint64_t j;
  void *v4;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  DisposeDecodeTable(DerivedStorage + 8);
  DisposeDecodeTable(DerivedStorage + 32);
  DisposeDecodeTable(DerivedStorage + 56);
  DisposeDecodeTable(DerivedStorage + 80);
  DisposeDecodeTable(DerivedStorage + 3944);
  DisposeDecodeTable(DerivedStorage + 3968);
  DisposeDecodeTable(DerivedStorage + 3992);
  DisposeDecodeTable(DerivedStorage + 4016);
  for (i = 0; i != 32; i += 8)
  {
    v2 = *(void **)(DerivedStorage + 4040 + i);
    if (v2)
      free(v2);
  }
  for (j = 0; j != 32; j += 8)
  {
    v4 = *(void **)(DerivedStorage + 4072 + j);
    if (v4)
      free(v4);
  }
  *(_QWORD *)(DerivedStorage + 6000) = 0;
  result = FigFormatDescriptionRelease();
  *(_QWORD *)(DerivedStorage + 6008) = 0;
  return result;
}

__CFString *JPEGVideoDecoder_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<JPEGVideoDecoder %p>"), a1);
  return Mutable;
}

uint64_t JPEGVideoDecoder_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  CFNumberRef v7;
  const void *v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, CFSTR("ReducedFrameDelivery")))
  {
    v7 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberDoubleType, (const void *)(DerivedStorage + 6016));
    *a4 = v7;
    if (!v7)
      return FigSignalErrorAt();
  }
  else
  {
    if (CFEqual(a2, CFSTR("SuggestedQualityOfServiceTiers")))
    {
      MEMORY[0x1940281CC](&sCreateSuggestedQualityOfServiceTiersOnce, jpeg_createSuggestedQualityOfServiceTiers);
      v8 = (const void *)sJPEGVideoDecoderSuggestedQualityOfServiceTiers;
      if (!sJPEGVideoDecoderSuggestedQualityOfServiceTiers)
        return FigSignalErrorAt();
    }
    else
    {
      if (!CFEqual(a2, CFSTR("ContentHasInterframeDependencies")))
        return FigSignalErrorAt();
      v8 = (const void *)*MEMORY[0x1E0C9AE40];
    }
    *a4 = CFRetain(v8);
  }
  return 0;
}

uint64_t JPEGVideoDecoder_SetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  CFTypeID TypeID;
  uint64_t result;
  double valuePtr;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!CFEqual(a2, CFSTR("ReducedFrameDelivery")))
  {
    CFEqual(a2, CFSTR("SuggestedQualityOfServiceTiers"));
    return FigSignalErrorAt();
  }
  if (!a3)
    return FigSignalErrorAt();
  TypeID = CFNumberGetTypeID();
  if (TypeID != CFGetTypeID(a3))
    return FigSignalErrorAt();
  valuePtr = 1.0;
  CFNumberGetValue((CFNumberRef)a3, kCFNumberDoubleType, &valuePtr);
  if (valuePtr < 0.0 || valuePtr > 1.0)
    return FigSignalErrorAt();
  result = 0;
  *(double *)(DerivedStorage + 6016) = valuePtr;
  return result;
}

void jpeg_createSuggestedQualityOfServiceTiers()
{
  uint64_t i;
  const void *v1;
  const void *v2[6];

  v2[5] = *(const void **)MEMORY[0x1E0C80C00];
  v2[0] = jpeg_createQualityOfServiceTier(1.0);
  v2[1] = jpeg_createQualityOfServiceTier(0.5);
  v2[2] = jpeg_createQualityOfServiceTier(0.333333333);
  v2[3] = jpeg_createQualityOfServiceTier(0.2);
  v2[4] = jpeg_createQualityOfServiceTier(0.1);
  sJPEGVideoDecoderSuggestedQualityOfServiceTiers = (uint64_t)CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v2, 5, MEMORY[0x1E0C9B378]);
  if (!sJPEGVideoDecoderSuggestedQualityOfServiceTiers)
    FigSignalErrorAt();
  for (i = 0; i != 5; ++i)
  {
    v1 = v2[i];
    if (v1)
      CFRelease(v1);
  }
}

CFDictionaryRef jpeg_createQualityOfServiceTier(double a1)
{
  const __CFAllocator *v1;
  CFDictionaryRef v2;
  void *values;
  void *keys;
  double valuePtr;

  valuePtr = a1;
  keys = CFSTR("ReducedFrameDelivery");
  v1 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberDoubleType, &valuePtr);
  if (!values
    || (v2 = CFDictionaryCreate(v1, (const void **)&keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0])) == 0)
  {
    FigSignalErrorAt();
    v2 = 0;
  }
  if (values)
    CFRelease(values);
  return v2;
}

uint64_t JPEGVideoDecoder_StartSession(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  const opaqueCMFormatDescription *v4;
  CMVideoDimensions Dimensions;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v7;
  CFMutableArrayRef v8;
  __CFArray *v9;
  uint64_t i;
  CFNumberRef v11;
  CFNumberRef v12;
  int v13;
  int v14;
  __CFArray *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  VTVideoDecoderGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v17 = xmmword_1928E2148;
  v18 = 0x3432307679343230;
  *(_QWORD *)(DerivedStorage + 6000) = a2;
  FigFormatDescriptionRelease();
  v4 = (const opaqueCMFormatDescription *)FigFormatDescriptionRetain();
  *(_QWORD *)(DerivedStorage + 6008) = v4;
  Dimensions = CMVideoFormatDescriptionGetDimensions(v4);
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return 4294954392;
  v7 = Mutable;
  v8 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  if (!v8)
  {
    v16 = v7;
LABEL_13:
    CFRelease(v16);
    return 4294954392;
  }
  v9 = v8;
  for (i = 0; i != 24; i += 4)
  {
    v11 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)&v17 + i);
    if (!v11)
    {
      CFRelease(v7);
      v16 = v9;
      goto LABEL_13;
    }
    v12 = v11;
    CFArrayAppendValue(v9, v11);
    CFRelease(v12);
  }
  CFDictionaryAddValue(v7, (const void *)*MEMORY[0x1E0CA9040], v9);
  CFRelease(v9);
  addNumberToDictionary(v7, (const void *)*MEMORY[0x1E0CA90E0], Dimensions.width);
  addNumberToDictionary(v7, (const void *)*MEMORY[0x1E0CA8FD8], Dimensions.height);
  v13 = -Dimensions.width;
  v14 = -Dimensions.height & 0xF;
  if ((v13 & 0xF) != 0)
    addNumberToDictionary(v7, (const void *)*MEMORY[0x1E0CA8FB8], v13 & 0xF);
  if (v14)
    addNumberToDictionary(v7, (const void *)*MEMORY[0x1E0CA8FA0], v14);
  VTDecoderSessionSetPixelBufferAttributes(*(uint64_t **)(DerivedStorage + 6000), v7);
  CFRelease(v7);
  return 0;
}

uint64_t JPEGVideoDecoder_DecodeFrame(uint64_t a1, const void *a2, opaqueCMSampleBuffer *a3, uint64_t a4, _DWORD *a5)
{
  uint64_t DerivedStorage;
  OpaqueCMBlockBuffer *DataBuffer;
  size_t DataLength;
  const __CFArray *SampleAttachmentsArray;
  const __CFDictionary *ValueAtIndex;
  const void *Value;
  const void *v14;
  CFTypeID TypeID;
  double v16;
  uint64_t v17;
  double v18;
  CMVideoDimensions Dimensions;
  OpaqueCMBlockBuffer *v20;
  __CVPixelBufferPool *PixelBufferPool;
  uint64_t v22;
  int v23;
  char *v24;
  size_t v25;
  uint64_t v26;
  uint64_t v27;
  int32_t height;
  int32_t width;
  CVPixelBufferRef pixelBufferOut;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  char *dataPointerOut;
  CMBlockBufferRef blockBufferOut;

  VTVideoDecoderGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  DataBuffer = CMSampleBufferGetDataBuffer(a3);
  DataLength = CMBlockBufferGetDataLength(DataBuffer);
  dataPointerOut = 0;
  blockBufferOut = 0;
  v36 = 0;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  pixelBufferOut = 0;
  SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(a3, 0);
  if (SampleAttachmentsArray
    && (ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0)) != 0
    && (Value = CFDictionaryGetValue(ValueAtIndex, (const void *)*MEMORY[0x1E0CA25D8])) != 0
    && (v14 = Value, TypeID = CFBooleanGetTypeID(), TypeID == CFGetTypeID(v14))
    && CFBooleanGetValue((CFBooleanRef)v14)
    || (v16 = *(double *)(DerivedStorage + 6016) + *(double *)(DerivedStorage + 6024),
        *(double *)(DerivedStorage + 6024) = v16,
        v16 < 1.0))
  {
    v17 = 0;
    *a5 |= 2u;
    goto LABEL_28;
  }
  v18 = v16 + -1.0;
  if (v18 >= 1.0)
    v18 = 1.0;
  *(double *)(DerivedStorage + 6024) = v18;
  Dimensions = CMVideoFormatDescriptionGetDimensions(*(CMVideoFormatDescriptionRef *)(DerivedStorage + 6008));
  if (CMBlockBufferIsRangeContiguous(DataBuffer, 0, 0))
  {
    v20 = (OpaqueCMBlockBuffer *)CFRetain(DataBuffer);
    blockBufferOut = v20;
  }
  else
  {
    v17 = CMBlockBufferCreateContiguous((CFAllocatorRef)*MEMORY[0x1E0C9AE00], DataBuffer, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, DataLength, 0, &blockBufferOut);
    if ((_DWORD)v17)
      goto LABEL_27;
    v20 = blockBufferOut;
  }
  CMBlockBufferGetDataPointer(v20, 0, 0, 0, &dataPointerOut);
  PixelBufferPool = (__CVPixelBufferPool *)VTDecoderSessionGetPixelBufferPool(*(uint64_t **)(DerivedStorage + 6000));
  v22 = CVPixelBufferPoolCreatePixelBuffer(0, PixelBufferPool, &pixelBufferOut);
  if ((_DWORD)v22)
  {
    v17 = v22;
    FigSignalErrorAt();
LABEL_27:
    FigSignalErrorAt();
    goto LABEL_28;
  }
  VTDecoderSessionTrace(*(_QWORD *)(DerivedStorage + 6000));
  v17 = CVPixelBufferLockBaseAddress(pixelBufferOut, 0);
  if ((_DWORD)v17)
    goto LABEL_27;
  v36 = 0;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  if (*(_DWORD *)(DerivedStorage + 4108) == 1835692130)
    v23 = -1;
  else
    v23 = 255;
  DWORD1(v33) = v23;
  v24 = dataPointerOut;
  v25 = CMBlockBufferGetDataLength(blockBufferOut);
  jpeg_setupreadbuffer((uint64_t)&v32, (uint64_t)v24, v25);
  height = Dimensions.height;
  width = Dimensions.width;
  reset_DC_pred(DerivedStorage + 8);
  v17 = jpeg_predecompress(DerivedStorage + 8, (uint64_t)&v32, &width, &height, 0, 1);
  if ((_DWORD)v17
    || ((v26 = DerivedStorage + 8, !*(_BYTE *)(DerivedStorage + 4136))
      ? (v27 = jpeg_decompress(v26, (uint64_t)&v32, pixelBufferOut, Dimensions.width, Dimensions.height, 0))
      : (v27 = jpeg_decompressProgressive(v26, (uint64_t)&v32, pixelBufferOut, Dimensions.width, Dimensions.height)),
        v17 = v27,
        (_DWORD)v27))
  {
    FigSignalErrorAt();
  }
  CVPixelBufferUnlockBaseAddress(pixelBufferOut, 0);
  VTDecoderSessionTrace(*(_QWORD *)(DerivedStorage + 6000));
  if ((_DWORD)v17)
    goto LABEL_27;
LABEL_28:
  if (pixelBufferOut
    && (CVPixelBufferGetPixelFormatType(pixelBufferOut) == 1111970369
     || CVPixelBufferGetPixelFormatType(pixelBufferOut) == 32))
  {
    CVBufferSetAttachment(pixelBufferOut, (CFStringRef)*MEMORY[0x1E0CA8CA8], (CFTypeRef)*MEMORY[0x1E0C9AE50], kCVAttachmentMode_ShouldPropagate);
  }
  VTDecoderSessionEmitDecodedFrame(*(uint64_t **)(DerivedStorage + 6000), a2, v17, *a5, pixelBufferOut);
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  CVPixelBufferRelease(pixelBufferOut);
  return v17;
}

uint64_t JPEGVideoDecoder_CopySupportedPropertyDictionary(uint64_t a1, CFTypeRef *a2)
{
  MEMORY[0x1940281CC](&sCreateSupportedPropertyDictionaryOnce_1, jpeg_createSupportedPropertyDictionary);
  if (!a2 || !sJPEGVideoDecoderSupportedPropertyDictionary)
    return FigSignalErrorAt();
  *a2 = CFRetain((CFTypeRef)sJPEGVideoDecoderSupportedPropertyDictionary);
  return 0;
}

void addNumberToDictionary(__CFDictionary *a1, const void *a2, int a3)
{
  CFNumberRef v5;
  CFNumberRef v6;
  int valuePtr;

  valuePtr = a3;
  v5 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  if (v5)
  {
    v6 = v5;
    CFDictionaryAddValue(a1, a2, v5);
    CFRelease(v6);
  }
}

void jpeg_createSupportedPropertyDictionary()
{
  const __CFAllocator *v0;
  CFNumberRef v1;
  CFNumberRef v2;
  CFNumberRef v3;
  CFNumberRef v4;
  CFDictionaryRef v5;
  CFDictionaryRef v6;
  CFDictionaryRef v7;
  CFDictionaryRef v8;
  CFNumberRef v9;
  int v10;
  int valuePtr;
  void *values;
  const __CFString *v13;
  CFNumberRef v14;
  CFNumberRef v15;
  uint64_t v16;
  void *keys;
  const __CFString *v18;
  const __CFString *v19;
  const __CFString *v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v21 = 0;
  v16 = 0;
  valuePtr = 0;
  v10 = 1;
  keys = CFSTR("PropertyType");
  v18 = CFSTR("ReadWriteStatus");
  values = CFSTR("Number");
  v13 = CFSTR("ReadWrite");
  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v1 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
  if (!v1)
  {
    FigSignalErrorAt();
    return;
  }
  v2 = v1;
  v19 = CFSTR("SupportedValueMinimum");
  v14 = v1;
  v3 = CFNumberCreate(v0, kCFNumberIntType, &v10);
  if (!v3)
  {
    FigSignalErrorAt();
    v9 = v2;
LABEL_19:
    CFRelease(v9);
    return;
  }
  v4 = v3;
  v20 = CFSTR("SupportedValueMaximum");
  v15 = v3;
  v5 = CFDictionaryCreate(v0, (const void **)&keys, (const void **)&values, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v5)
  {
    v8 = 0;
    v6 = 0;
LABEL_12:
    FigSignalErrorAt();
    goto LABEL_13;
  }
  v6 = CFDictionaryCreate(v0, 0, 0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v6)
  {
    v8 = 0;
    goto LABEL_12;
  }
  keys = CFSTR("PropertyType");
  v18 = CFSTR("ReadWriteStatus");
  values = CFSTR("Boolean");
  v13 = CFSTR("ReadOnly");
  v7 = CFDictionaryCreate(v0, (const void **)&keys, (const void **)&values, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v8 = v7;
  if (!v7)
    goto LABEL_12;
  keys = CFSTR("ReducedFrameDelivery");
  v18 = CFSTR("SuggestedQualityOfServiceTiers");
  values = v5;
  v13 = (const __CFString *)v6;
  v19 = CFSTR("ContentHasInterframeDependencies");
  v14 = v7;
  sJPEGVideoDecoderSupportedPropertyDictionary = (uint64_t)CFDictionaryCreate(v0, (const void **)&keys, (const void **)&values, 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!sJPEGVideoDecoderSupportedPropertyDictionary)
    goto LABEL_12;
LABEL_13:
  CFRelease(v2);
  CFRelease(v4);
  if (v5)
    CFRelease(v5);
  if (v6)
    CFRelease(v6);
  if (v8)
  {
    v9 = v8;
    goto LABEL_19;
  }
}

uint64_t initSharedDGlobals()
{
  uint64_t result;

  result = InitDecodeTables(sJPEGSharedDGlobals);
  didInitSharedDGlobals = 1;
  return result;
}

uint64_t TestIPBVideoDecoder_CreateInstance()
{
  uint64_t v0;

  VTVideoDecoderGetClassID();
  v0 = CMDerivedObjectCreate();
  FigSignalErrorAt();
  return v0;
}

uint64_t TestIPBVideoDecoder_Finalize()
{
  _QWORD *DerivedStorage;
  const void *v1;
  uint64_t result;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v1 = (const void *)DerivedStorage[68];
  if (v1)
  {
    CFRelease(v1);
    DerivedStorage[68] = 0;
  }
  *DerivedStorage = 0;
  DerivedStorage[1] = 0;
  result = FigFormatDescriptionRelease();
  DerivedStorage[2] = 0;
  return result;
}

__CFString *TestIPBVideoDecoder_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<TestIPBVideoDecoder %p>"), a1);
  return Mutable;
}

uint64_t TestIPBVideoDecoder_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  const void *SInt32;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, CFSTR("RequestedMVHEVCVideoLayerIDs")))
  {
    SInt32 = *(const void **)(DerivedStorage + 544);
    if (SInt32)
      SInt32 = CFRetain(SInt32);
    goto LABEL_6;
  }
  if (CFEqual(a2, CFSTR("ThreadCount")))
  {
    SInt32 = (const void *)FigCFNumberCreateSInt32();
LABEL_6:
    *a4 = SInt32;
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t TestIPBVideoDecoder_SetProperty(uint64_t a1, const void *a2, const __CFArray *a3)
{
  uint64_t DerivedStorage;
  CFTypeID v6;
  const void *v7;
  CFTypeID v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, CFSTR("RequestedMVHEVCVideoLayerIDs")))
  {
    if (!a3 || (v6 = CFGetTypeID(a3), v6 == CFArrayGetTypeID()))
    {
      v7 = *(const void **)(DerivedStorage + 544);
      if (v7)
      {
        CFRelease(v7);
        *(_QWORD *)(DerivedStorage + 544) = 0;
      }
      if (a3)
        *(_QWORD *)(DerivedStorage + 544) = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a3);
      return 0;
    }
  }
  else if (CFEqual(a2, CFSTR("ThreadCount")))
  {
    if (a3)
    {
      v8 = CFGetTypeID(a3);
      if (v8 == CFNumberGetTypeID())
        return 0;
    }
  }
  return FigSignalErrorAt();
}

uint64_t TestIPBVideoDecoder_StartSession(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  const opaqueCMFormatDescription *v4;
  CMVideoDimensions Dimensions;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v7;
  CFMutableArrayRef v8;
  __CFArray *v9;
  uint64_t v10;
  char i;
  char v12;
  CFNumberRef v13;
  CFNumberRef v14;
  __CFArray *v15;
  _QWORD v17[2];

  v17[1] = *MEMORY[0x1E0C80C00];
  VTVideoDecoderGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v17[0] = 0x4247524100000020;
  *(_QWORD *)DerivedStorage = a2;
  FigFormatDescriptionRelease();
  v4 = (const opaqueCMFormatDescription *)FigFormatDescriptionRetain();
  *(_QWORD *)(DerivedStorage + 16) = v4;
  Dimensions = CMVideoFormatDescriptionGetDimensions(v4);
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v7 = Mutable;
    v8 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    if (v8)
    {
      v9 = v8;
      v10 = 0;
      for (i = 1; ; i = 0)
      {
        v12 = i;
        v13 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)v17 + 4 * v10);
        if (!v13)
          break;
        v14 = v13;
        CFArrayAppendValue(v9, v13);
        CFRelease(v14);
        v10 = 1;
        if ((v12 & 1) == 0)
        {
          CFDictionaryAddValue(v7, (const void *)*MEMORY[0x1E0CA9040], v9);
          CFRelease(v9);
          addNumberToDictionary(v7, (const void *)*MEMORY[0x1E0CA90E0], Dimensions.width);
          addNumberToDictionary(v7, (const void *)*MEMORY[0x1E0CA8FD8], Dimensions.height);
          CMFormatDescriptionGetExtensions(*(CMFormatDescriptionRef *)(DerivedStorage + 16));
          FigCFDictionaryGetBooleanIfPresent();
          *(_DWORD *)(DerivedStorage + 552) = 0;
          VTDecoderSessionSetPixelBufferAttributes(*(uint64_t **)DerivedStorage, v7);
          CFRelease(v7);
          return 0;
        }
      }
      CFRelease(v7);
      v15 = v9;
    }
    else
    {
      v15 = v7;
    }
    CFRelease(v15);
  }
  return 4294954392;
}

uint64_t TestIPBVideoDecoder_DecodeFrame(uint64_t a1, const void *a2, opaqueCMSampleBuffer *a3, uint64_t a4, unsigned int *a5)
{
  uint64_t DerivedStorage;
  OpaqueCMBlockBuffer *DataBuffer;
  size_t DataLength;
  const __CFArray *SampleAttachmentsArray;
  const __CFDictionary *ValueAtIndex;
  const __CFBoolean *Value;
  const __CFBoolean *v14;
  CFTypeID TypeID;
  const __CFNumber *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  OpaqueCMBlockBuffer *v20;
  uint64_t FrameStrings;
  uint64_t v22;
  __CFArray *Mutable;
  __CFArray *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  const __CFArray *v29;
  CFIndex Count;
  const __CFAllocator *v31;
  const CFArrayCallBacks *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  CFTypeRef v36;
  unsigned int *v37;
  CFTypeRef v38;
  CFTypeRef v39;
  CFTypeRef cf;
  char *dataPointerOut;
  CMBlockBufferRef blockBufferOut;
  _OWORD v43[16];
  char v44;
  _BYTE v45[272];
  unsigned __int8 v46[272];
  unsigned __int8 v47[272];
  unsigned __int8 __dst[264];
  uint64_t valuePtr;
  uint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  VTVideoDecoderGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  DataBuffer = CMSampleBufferGetDataBuffer(a3);
  DataLength = CMBlockBufferGetDataLength(DataBuffer);
  dataPointerOut = 0;
  blockBufferOut = 0;
  v39 = 0;
  cf = 0;
  v38 = 0;
  SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(a3, 0);
  if (SampleAttachmentsArray)
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0);
    if (ValueAtIndex)
    {
      Value = (const __CFBoolean *)CFDictionaryGetValue(ValueAtIndex, (const void *)*MEMORY[0x1E0CA25D8]);
      if (Value)
      {
        v14 = Value;
        TypeID = CFBooleanGetTypeID();
        if (TypeID == CFGetTypeID(v14))
          CFBooleanGetValue(v14);
      }
    }
  }
  memset(__dst, 0, 257);
  memset(v47, 0, 257);
  memset(v46, 0, 257);
  memset(v45, 0, 257);
  v44 = 0;
  memset(v43, 0, sizeof(v43));
  v16 = (const __CFNumber *)CMGetAttachment(a3, CFSTR("IPBFrameDelay"), 0);
  if (v16)
  {
    valuePtr = 0;
    CFNumberGetValue(v16, kCFNumberCFIndexType, &valuePtr);
    v17 = 1000 * valuePtr;
    if ((unint64_t)(valuePtr - 1) >= 0x418937)
      v17 = 0;
  }
  else
  {
    v17 = 0;
  }
  v18 = *(_DWORD *)(DerivedStorage + 540);
  if (v18 <= v17)
    v19 = v17;
  else
    v19 = v18;
  if (CMBlockBufferIsRangeContiguous(DataBuffer, 0, 0))
  {
    v20 = (OpaqueCMBlockBuffer *)CFRetain(DataBuffer);
    blockBufferOut = v20;
  }
  else
  {
    v25 = CMBlockBufferCreateContiguous((CFAllocatorRef)*MEMORY[0x1E0C9AE00], DataBuffer, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, DataLength, 0, &blockBufferOut);
    if ((_DWORD)v25)
    {
      v22 = v25;
      Mutable = 0;
      v24 = 0;
      goto LABEL_22;
    }
    v20 = blockBufferOut;
  }
  CMBlockBufferGetDataPointer(v20, 0, 0, 0, &dataPointerOut);
  VTDecoderSessionTrace(*(_QWORD *)DerivedStorage);
  FrameStrings = IPB_GetFrameStrings((unsigned __int8 *)dataPointerOut, DataLength, __dst, v47, v46, v45);
  if ((_DWORD)FrameStrings)
    goto LABEL_17;
  FrameStrings = IPB_SimulatePrediction((unsigned __int8 *)(DerivedStorage + 24), (unsigned __int8 *)(DerivedStorage + 281), (_BYTE *)(DerivedStorage + 538), __dst, v47, (unsigned __int8 *)v43);
  if ((_DWORD)FrameStrings)
    goto LABEL_17;
  __dst[__dst[0] + 1] = 0;
  v47[v47[0] + 1] = 0;
  v46[v46[0] + 1] = 0;
  v45[v45[0] + 1] = 0;
  *((_BYTE *)v43 + LOBYTE(v43[0]) + 1) = 0;
  if ((_DWORD)v19)
    snprintf((char *)&valuePtr, 0x20uLL, " (delayed %u ms)", v19 / 0x3E8);
  IPB_AreStringsDifferent(v45, (unsigned __int8 *)v43);
  v29 = *(const __CFArray **)(DerivedStorage + 544);
  if (!v29)
  {
    FrameStrings = testipb_CreatePixelBufferAndDrawFrame(DerivedStorage, a2, __dst, v47, v46, v45, (unsigned __int8 *)v43, 0, 0, &cf);
LABEL_17:
    v22 = FrameStrings;
    Mutable = 0;
    v24 = 0;
    goto LABEL_18;
  }
  v37 = a5;
  Count = CFArrayGetCount(v29);
  v31 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v32 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v24 = CFArrayCreateMutable(v31, 0, v32);
  if (Count >= 1)
  {
    v33 = 0;
    while (1)
    {
      FigCFArrayGetInt32AtIndex();
      v50 = 0;
      valuePtr = 0;
      valuePtr = FigTagMakeWithSInt64Value();
      v50 = v34;
      v35 = FigTagCollectionCreate();
      if ((_DWORD)v35)
        break;
      v35 = testipb_CreatePixelBufferAndDrawFrame(DerivedStorage, a2, __dst, v47, v46, v45, (unsigned __int8 *)v43, 1, 0, &cf);
      if ((_DWORD)v35)
        break;
      v36 = cf;
      CFArrayAppendValue(v24, cf);
      if (v36)
      {
        CFRelease(v36);
        cf = 0;
      }
      CFArrayAppendValue(Mutable, v39);
      if (v39)
      {
        CFRelease(v39);
        v39 = 0;
      }
      if (Count == ++v33)
        goto LABEL_51;
    }
    v22 = v35;
    goto LABEL_55;
  }
LABEL_51:
  v22 = MEMORY[0x194028160](v31, Mutable, v24, &v38);
  if ((_DWORD)v22)
  {
LABEL_55:
    a5 = v37;
    goto LABEL_22;
  }
  a5 = v37;
LABEL_18:
  VTDecoderSessionTrace(*(_QWORD *)DerivedStorage);
  if ((_DWORD)v19)
    MEMORY[0x1940281E4](v19);
LABEL_22:
  v26 = *(uint64_t **)DerivedStorage;
  v27 = *a5;
  if (*(_QWORD *)(DerivedStorage + 544))
    VTDecoderSessionEmitDecodedMultiImageFrame(v26, a2, v22, v27, (OpaqueCMTaggedBufferGroup *)v38);
  else
    VTDecoderSessionEmitDecodedFrame(v26, a2, v22, v27, (__CVBuffer *)cf);
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  if (cf)
    CFRelease(cf);
  VTDecoderSessionCleanUpAfterDecode();
  if (Mutable)
    CFRelease(Mutable);
  if (v24)
    CFRelease(v24);
  if (v39)
    CFRelease(v39);
  if (v38)
    CFRelease(v38);
  return v22;
}

uint64_t TestIPBVideoDecoder_CopySupportedPropertyDictionary(uint64_t a1, CFTypeRef *a2)
{
  if (sTestIPBCreateSupportedPropertyDictionaryOnce == -1)
  {
    if (!a2)
      return FigSignalErrorAt();
  }
  else
  {
    dispatch_once_f(&sTestIPBCreateSupportedPropertyDictionaryOnce, 0, (dispatch_function_t)testipb_createSupportedPropertyDictionary);
    if (!a2)
      return FigSignalErrorAt();
  }
  if (sTestIPBVideoDecoderSupportedPropertyDictionary)
  {
    *a2 = CFRetain((CFTypeRef)sTestIPBVideoDecoderSupportedPropertyDictionary);
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t testipb_CreatePixelBufferAndDrawFrame(uint64_t a1, const void *a2, unsigned __int8 *a3, _BYTE *a4, _BYTE *a5, _BYTE *a6, unsigned __int8 *a7, int a8, int a9, _QWORD *a10)
{
  uint64_t v17;
  uint64_t v18;
  __CVBuffer *v19;
  int v20;
  int Width;
  int v22;
  int Height;
  int v24;
  int v25;
  OSType PixelFormatType;
  int v27;
  int v28;
  int v29;
  unsigned __int8 *v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  _BYTE *v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  __CVBuffer *v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  int v52;
  char *v53;
  int v54;
  int v55;
  int v56;
  __CVBuffer *v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  int v69;
  char *v70;
  unsigned __int8 *v71;
  _BYTE *v72;
  int v73;
  uint64_t v74;
  int v75;
  char *v76;
  int v77;
  int v79;
  int v80;
  int v81;
  int v82;
  unsigned __int8 *v83;
  int v84;
  int v85;
  int v86;
  int v87;
  __CVBuffer *v88;
  _BYTE *v89;
  int v90;
  unsigned __int8 *v91;
  _BYTE *v92;
  _BYTE *v93;
  CVPixelBufferRef v94;
  __int16 v95;

  v94 = 0;
  v17 = VTDecoderSessionCreatePixelBuffer(*(uint64_t **)a1, a2, &v94);
  if ((_DWORD)v17)
  {
    v18 = v17;
    FigSignalErrorAt();
    if (v94)
      CFRelease(v94);
    return v18;
  }
  v83 = a3;
  v93 = a4;
  v89 = a5;
  CVPixelBufferLockBaseAddress(v94, 0);
  v19 = v94;
  v20 = *(_DWORD *)(a1 + 552);
  Width = CVPixelBufferGetWidth(v94);
  v80 = Width;
  if (Width >= 0)
    v22 = Width;
  else
    v22 = Width + 1;
  v86 = v22;
  Height = CVPixelBufferGetHeight(v19);
  v24 = Height;
  if (Height >= 0)
    v25 = Height;
  else
    v25 = Height + 1;
  v85 = v25;
  PixelFormatType = CVPixelBufferGetPixelFormatType(v19);
  if (PixelFormatType == 1111970369)
    v27 = -3342388;
  else
    v27 = -855651073;
  if (PixelFormatType == 1111970369)
    v28 = -3381760;
  else
    v28 = 6737151;
  if (PixelFormatType == 1111970369)
    v29 = -16750900;
  else
    v29 = -865730305;
  v84 = v29;
  v30 = a7;
  if (PixelFormatType == 1111970369)
    v31 = -52429;
  else
    v31 = 859045887;
  if (PixelFormatType == 1111970369)
    v32 = -16777216;
  else
    v32 = 255;
  v81 = v28;
  v82 = v32;
  v90 = a8;
  if (PixelFormatType == 1111970369)
    v33 = -52;
  else
    v33 = -855638017;
  if (PixelFormatType == 1111970369)
    v34 = -13057;
  else
    v34 = -3342337;
  if (PixelFormatType == 1111970369)
    v35 = -3342337;
  else
    v35 = -13057;
  if (PixelFormatType == 1111970369)
    v36 = -3381505;
  else
    v36 = -10040065;
  v79 = v36;
  v91 = v30;
  v92 = a6;
  v37 = IPB_AreStringsDifferent(a6, v30);
  if (a9 == 1)
    v38 = v34;
  else
    v38 = v27;
  if (a9 == 2)
    v38 = v35;
  v39 = v89;
  if (!a9)
    v38 = v33;
  v40 = v90;
  if (!v90)
    v38 = v27;
  v41 = v37;
  if (v37)
    v42 = v31;
  else
    v42 = v38;
  v88 = v19;
  v18 = testipb_FillRectOfPixelBuffer(v19, v42, 0, 0, 0, 0);
  if ((_DWORD)v18)
    goto LABEL_118;
  v43 = v86 >> 1;
  v87 = v85 >> 1;
  if (v20 == 1)
  {
    v44 = 1;
    v45 = v88;
    v46 = v35;
    v47 = v43;
    v48 = 0;
    v49 = v43;
    v50 = 0;
  }
  else
  {
    v44 = v20;
    if (v20 != 2)
      goto LABEL_55;
    v45 = v88;
    v46 = v35;
    v47 = 0;
    v48 = v85 >> 1;
    v49 = 0;
    v50 = v85 >> 1;
  }
  v18 = testipb_FillRectOfPixelBuffer(v45, v46, v47, v48, v49, v50);
  if ((_DWORD)v18)
    goto LABEL_118;
LABEL_55:
  v51 = *v89;
  if (*v89)
  {
    v52 = 0;
    v53 = v89 + 1;
    do
    {
      v54 = *v53++;
      v52 = v54 + 10 * v52 - 48;
      --v51;
    }
    while (v51);
  }
  else
  {
    v52 = 0;
  }
  if (v44 == 1)
  {
    v55 = v52 % v43;
    v18 = testipb_FillRectOfPixelBuffer(v88, v84, v52 % v43, 0, 2, 136);
    if ((_DWORD)v18)
      goto LABEL_118;
    v18 = testipb_FillRectOfPixelBuffer(v88, v84, v55 + v43, 0, 2, 136);
    if ((_DWORD)v18)
      goto LABEL_118;
    v56 = v41 ? v82 : v81;
    v18 = testipb_DrawCharsToPixelBuffer(v88, v56, 10, 10, 4, (uint64_t)(v83 + 1), *v83);
    if ((_DWORD)v18)
      goto LABEL_118;
    v18 = testipb_DrawCharsToPixelBuffer(v88, v56, 34, 10, 4, (uint64_t)(v93 + 1), *v93);
    if ((_DWORD)v18)
      goto LABEL_118;
    v18 = testipb_DrawCharsToPixelBuffer(v88, v56, v43 + 10, 10, 4, (uint64_t)(v83 + 1), *v83);
    if ((_DWORD)v18)
      goto LABEL_118;
    v18 = testipb_DrawCharsToPixelBuffer(v88, v56, v43 + 34, 10, 4, (uint64_t)(v93 + 1), *v93);
    if ((_DWORD)v18)
      goto LABEL_118;
    v18 = testipb_DrawCharsToPixelBuffer(v88, v56, 10, 60, 1, (uint64_t)"display#:", 9);
    if ((_DWORD)v18)
      goto LABEL_118;
    v18 = testipb_DrawCharsToPixelBuffer(v88, v56, 64, 48, 4, (uint64_t)(v89 + 1), *v89);
    if ((_DWORD)v18)
      goto LABEL_118;
    v18 = testipb_DrawCharsToPixelBuffer(v88, v56, v43 + 10, 60, 1, (uint64_t)"display#:", 9);
    if ((_DWORD)v18)
      goto LABEL_118;
    v18 = testipb_DrawCharsToPixelBuffer(v88, v56, v43 + 64, 48, 4, (uint64_t)(v89 + 1), *v89);
    if ((_DWORD)v18)
      goto LABEL_118;
    v18 = testipb_DrawCharsToPixelBuffer(v88, v79, 10, v87 + 20, 4, (uint64_t)"LEFT", 4);
    if ((_DWORD)v18)
      goto LABEL_118;
    v57 = v88;
    v58 = v79;
    v59 = v43 + 10;
    v60 = v87 + 20;
LABEL_92:
    v18 = testipb_DrawCharsToPixelBuffer(v57, v58, v59, v60, 4, (uint64_t)"RIGHT", 5);
    if (!v90)
    {
LABEL_117:
      v40 = v90;
      v39 = v89;
      goto LABEL_118;
    }
    goto LABEL_112;
  }
  v61 = v52 % 100;
  v62 = 3 * v61;
  if (v44 == 2)
  {
    v63 = v24 / 4 - 10;
    v18 = testipb_FillRectOfPixelBuffer(v88, v84, v62, 0, 2, v63);
    if ((_DWORD)v18)
      goto LABEL_118;
    v18 = testipb_FillRectOfPixelBuffer(v88, v84, v62, v87 + 2, 2, v63);
    if ((_DWORD)v18)
      goto LABEL_118;
    v64 = v41 ? v82 : v81;
    v18 = testipb_DrawCharsToPixelBuffer(v88, v64, 10, 10, 4, (uint64_t)(v83 + 1), *v83);
    if ((_DWORD)v18)
      goto LABEL_118;
    v18 = testipb_DrawCharsToPixelBuffer(v88, v64, 34, 10, 4, (uint64_t)(v93 + 1), *v93);
    if ((_DWORD)v18)
      goto LABEL_118;
    v18 = testipb_DrawCharsToPixelBuffer(v88, v64, 10, v87 + 10, 4, (uint64_t)(v83 + 1), *v83);
    if ((_DWORD)v18)
      goto LABEL_118;
    v18 = testipb_DrawCharsToPixelBuffer(v88, v64, 34, v87 + 10, 4, (uint64_t)(v93 + 1), *v93);
    if ((_DWORD)v18)
      goto LABEL_118;
    v18 = testipb_DrawCharsToPixelBuffer(v88, v64, v80 - 70 - 24 * *v89, 60, 1, (uint64_t)"display#:", 9);
    if ((_DWORD)v18)
      goto LABEL_118;
    v18 = testipb_DrawCharsToPixelBuffer(v88, v64, v80 - 10 - 24 * *v89, 48, 4, (uint64_t)(v89 + 1), *v89);
    if ((_DWORD)v18)
      goto LABEL_118;
    v18 = testipb_DrawCharsToPixelBuffer(v88, v64, v80 - 70 - 24 * *v89, v87 + 60, 1, (uint64_t)"display#:", 9);
    if ((_DWORD)v18)
      goto LABEL_118;
    v18 = testipb_DrawCharsToPixelBuffer(v88, v64, v80 - 10 - 24 * *v89, v87 + 48, 4, (uint64_t)(v89 + 1), *v89);
    if ((_DWORD)v18)
      goto LABEL_118;
    v18 = testipb_DrawCharsToPixelBuffer(v88, v79, 10, 48, 4, (uint64_t)"LEFT", 4);
    if ((_DWORD)v18)
      goto LABEL_118;
    v57 = v88;
    v58 = v79;
    v59 = 10;
    v60 = v87 + 48;
    goto LABEL_92;
  }
  v18 = testipb_FillRectOfPixelBuffer(v88, v84, 3 * v61, 0, 3, 136);
  if ((_DWORD)v18)
    goto LABEL_118;
  v65 = v41 ? v82 : v81;
  v18 = testipb_DrawCharsToPixelBuffer(v88, v65, 10, 10, 8, (uint64_t)(v83 + 1), *v83);
  if ((_DWORD)v18)
    goto LABEL_118;
  v18 = testipb_DrawCharsToPixelBuffer(v88, v65, 58, 10, 8, (uint64_t)(v93 + 1), *v93);
  if ((_DWORD)v18)
    goto LABEL_118;
  v18 = testipb_DrawCharsToPixelBuffer(v88, v65, -48 * *v89 + 214, 105, 1, (uint64_t)"display number:", 15);
  if ((_DWORD)v18)
    goto LABEL_118;
  v18 = testipb_DrawCharsToPixelBuffer(v88, v65, -48 * *v89 + 310, 80, 8, (uint64_t)(v89 + 1), *v89);
  if ((_DWORD)v18)
    goto LABEL_118;
  v18 = testipb_DrawCharsToPixelBuffer(v88, v82, 10, 140, 1, (uint64_t)"intended prediction:", 20);
  if ((_DWORD)v18)
    goto LABEL_118;
  v18 = testipb_DrawCharsToPixelBuffer(v88, v82, 10, 152, 1, (uint64_t)(a6 + 1), *a6);
  if ((_DWORD)v18)
    goto LABEL_118;
  v66 = *a6;
  if (v66 >= 0x33)
  {
    v18 = testipb_DrawCharsToPixelBuffer(v88, v82, 10, 164, 1, (uint64_t)(a6 + 51), v66 - 50);
    if ((_DWORD)v18)
      goto LABEL_118;
  }
  v18 = testipb_DrawCharsToPixelBuffer(v88, v82, 10, 190, 1, (uint64_t)"actual prediction:", 18);
  if ((_DWORD)v18)
    goto LABEL_118;
  v18 = testipb_DrawCharsToPixelBuffer(v88, v82, 10, 202, 1, (uint64_t)(v91 + 1), *v91);
  if ((_DWORD)v18)
    goto LABEL_118;
  v67 = *v91;
  if (v67 < 0x33)
    v18 = 0;
  else
    v18 = testipb_DrawCharsToPixelBuffer(v88, v82, 10, 214, 1, (uint64_t)(v91 + 51), v67 - 50);
  if (!v90)
    goto LABEL_117;
LABEL_112:
  v40 = v90;
  v39 = v89;
  if (!(_DWORD)v18)
  {
    v95 = 8224;
    if (a9 >= 10)
      LOBYTE(v95) = (a9 / 0xAu - 10 * ((429496730 * (unint64_t)(a9 / 0xAu)) >> 32)) | 0x30;
    HIBYTE(v95) = a9 % 10 + 48;
    v18 = testipb_DrawCharsToPixelBuffer(v88, v79, 238, 10, 1, (uint64_t)"video layer:", 12);
    if (!(_DWORD)v18)
      v18 = testipb_DrawCharsToPixelBuffer(v88, v79, 238, 20, 6, (uint64_t)&v95, 2);
    goto LABEL_117;
  }
LABEL_118:
  CVPixelBufferUnlockBaseAddress(v94, 0);
  v68 = *v93;
  if (*v93)
  {
    v69 = 0;
    v70 = v93 + 1;
    v71 = v91;
    v72 = v92;
    do
    {
      v73 = *v70++;
      v69 = v73 + 10 * v69 - 48;
      --v68;
    }
    while (v68);
  }
  else
  {
    v69 = 0;
    v71 = v91;
    v72 = v92;
  }
  testipb_setIntBufferAttachment(v94, CFSTR("DecodeNumber"), v69);
  v74 = *v39;
  if (*v39)
  {
    v75 = 0;
    v76 = v39 + 1;
    do
    {
      v77 = *v76++;
      v75 = v77 + 10 * v75 - 48;
      --v74;
    }
    while (v74);
  }
  else
  {
    v75 = 0;
  }
  testipb_setIntBufferAttachment(v94, CFSTR("DisplayNumber"), v75);
  if (IPB_AreStringsDifferent(v72, v71))
    CVBufferSetAttachment(v94, CFSTR("BadPrediction"), (CFTypeRef)*MEMORY[0x1E0C9AE50], kCVAttachmentMode_ShouldPropagate);
  if (v40)
    testipb_setIntBufferAttachment(v94, CFSTR("VideoLayerID"), a9);
  *a10 = v94;
  return v18;
}

void testipb_setIntBufferAttachment(__CVBuffer *a1, const __CFString *a2, int a3)
{
  CFNumberRef v5;
  CFNumberRef v6;
  __IOSurface *IOSurface;
  int valuePtr;

  valuePtr = a3;
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
  if (v5)
  {
    v6 = v5;
    CVBufferSetAttachment(a1, a2, v5, kCVAttachmentMode_ShouldPropagate);
    IOSurface = CVPixelBufferGetIOSurface(a1);
    if (IOSurface)
      IOSurfaceSetValue(IOSurface, a2, v6);
    CFRelease(v6);
  }
}

uint64_t testipb_FillRectOfPixelBuffer(__CVBuffer *a1, int a2, int a3, int a4, int a5, int a6)
{
  int Width;
  int Height;
  char *BaseAddress;
  size_t BytesPerRow;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  char *v26;
  char *v27;
  int v28;

  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
  BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  v16 = 0;
  if (a5)
    v17 = a5;
  else
    v17 = Width;
  if (a6)
    v18 = a6;
  else
    v18 = Height;
  if (Width >= a3 && Height >= a4)
  {
    v19 = v17 + a3;
    if (v17 + a3 < 0)
      return 0;
    v20 = v18 + a4;
    if (v18 + a4 < 0)
      return 0;
    v21 = a3 & ~(a3 >> 31);
    if (a3 >= 0)
      v19 = v17;
    v22 = a4 & ~(a4 >> 31);
    if (a4 >= 0)
      v20 = v18;
    v23 = (int)(v19 + v21) <= Width ? v19 : Width - v21;
    v24 = v20 + (int)v22 <= Height ? v20 : Height - v22;
    if (v24 < 1)
    {
      return 0;
    }
    else
    {
      v25 = v24 + v22;
      v26 = &BaseAddress[4 * v21 + BytesPerRow * v22];
      while (v23 < 1)
      {
LABEL_28:
        v16 = 0;
        v26 += BytesPerRow;
        LODWORD(v22) = v22 + 1;
        if ((int)v22 >= v25)
          return v16;
      }
      v27 = v26;
      v28 = a3 & ~(a3 >> 31);
      while (1)
      {
        v16 = 4294954387;
        if (v27 >= &BaseAddress[BytesPerRow * Height] || v26 < BaseAddress)
          break;
        *(_DWORD *)v27 = a2;
        v27 += 4;
        if (++v28 >= (int)(v23 + v21))
          goto LABEL_28;
      }
    }
  }
  return v16;
}

uint64_t testipb_DrawCharsToPixelBuffer(__CVBuffer *a1, int a2, int a3, int a4, int a5, uint64_t a6, int a7)
{
  int Width;
  int Height;
  char *BaseAddress;
  size_t BytesPerRow;
  int v18;
  int v19;
  int v20;
  int v21;
  char *v22;
  int v23;
  char *v24;
  uint64_t v25;

  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
  BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  v18 = Height - a4;
  v19 = 6 * a5 * a7;
  if (Width - a3 >= v19)
    v20 = 6 * a5 * a7;
  else
    v20 = Width - a3;
  if (v18 >= 9 * a5)
    v18 = 9 * a5;
  if (v18 < 1)
    return 0;
  v21 = 0;
  v22 = &BaseAddress[4 * a3 + BytesPerRow * a4];
  if (v19 >= (uint64_t)(Width - a3))
    v19 = Width - a3;
  while (v20 < 1)
  {
LABEL_16:
    v22 += BytesPerRow;
    if (++v21 == v18)
      return 0;
  }
  v23 = 0;
  v24 = v22;
  while (1)
  {
    v25 = 4294954387;
    if (v24 >= &BaseAddress[BytesPerRow * Height] || v22 < BaseAddress)
      return v25;
    if (((kGlyphs_0[9 * *(char *)(a6 + v23 / a5 / 6) - 288 + v21 / a5] << (v23 / a5 % 6)) & 0x80) != 0)
      *(_DWORD *)v24 = a2;
    v24 += 4;
    if (v19 == ++v23)
      goto LABEL_16;
  }
}

void testipb_createSupportedPropertyDictionary()
{
  const __CFAllocator *v0;
  CFDictionaryRef v1;
  CFDictionaryRef v2;
  void *values[5];
  void *keys[6];

  keys[5] = *(void **)MEMORY[0x1E0C80C00];
  memset(&keys[2], 0, 24);
  memset(&values[2], 0, 24);
  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v1 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v1)
  {
    v2 = v1;
    keys[0] = CFSTR("ThreadCount");
    keys[1] = CFSTR("RequestedMVHEVCVideoLayerIDs");
    values[0] = v1;
    values[1] = v1;
    sTestIPBVideoDecoderSupportedPropertyDictionary = (uint64_t)CFDictionaryCreate(v0, (const void **)keys, (const void **)values, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!sTestIPBVideoDecoderSupportedPropertyDictionary)
      FigSignalErrorAt();
    CFRelease(v2);
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t validateIBPString(_BYTE *a1)
{
  uint64_t v1;
  char *v2;
  int v3;
  int v4;
  uint64_t v5;
  unsigned int v7;
  BOOL v8;
  int v9;

  v1 = *a1;
  if (!*a1)
    return 0;
  v2 = a1 + 1;
  while (1)
  {
    v4 = *v2++;
    v3 = v4;
    v5 = (1 << (v4 - 32)) & 0x902044BFF2009;
    if ((v4 - 32) > 0x33 || v5 == 0)
    {
      v7 = v3 - 98;
      v8 = v7 > 0x11;
      v9 = (1 << v7) & 0x24081;
      if (v8 || v9 == 0)
        break;
    }
    if (!--v1)
      return 0;
  }
  return 4294954387;
}

uint64_t IPB_GetFrameStrings(unsigned __int8 *__src, unint64_t a2, _BYTE *__dst, unsigned __int8 *a4, unsigned __int8 *a5, _BYTE *a6)
{
  unint64_t v8;
  unint64_t v13;
  uint64_t result;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  int v21;
  unint64_t v22;
  unsigned __int8 *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  int v28;
  unint64_t v29;

  if (a2)
  {
    v8 = *__src;
    if (v8 < a2)
    {
      v13 = v8 + 1;
      memmove(__dst, __src, v8 + 1);
      result = validateIBPString(__dst);
      if ((_DWORD)result)
        return result;
      v15 = a2 - v13;
      if (a2 != v13)
      {
        v16 = (char *)&__src[v13];
        v17 = *v16;
        if (v15 > v17)
        {
          v18 = v17 + 1;
          memmove(a4, v16, v17 + 1);
          v19 = *a4;
          if (*a4)
          {
            v20 = a4 + 1;
            while (1)
            {
              v21 = *v20++;
              if ((v21 - 48) >= 0xA)
                break;
              if (!--v19)
                goto LABEL_10;
            }
          }
          else
          {
LABEL_10:
            v22 = v15 - v18;
            if (v15 != v18)
            {
              v23 = (unsigned __int8 *)&v16[v18];
              v24 = v16[v18];
              if (v22 > v24)
              {
                v25 = v24 + 1;
                memmove(a5, v23, v24 + 1);
                v26 = *a5;
                if (*a5)
                {
                  v27 = a5 + 1;
                  while (1)
                  {
                    v28 = *v27++;
                    if ((v28 - 48) >= 0xA)
                      break;
                    if (!--v26)
                      goto LABEL_16;
                  }
                }
                else
                {
LABEL_16:
                  if (v22 != v25)
                  {
                    v29 = v23[v25];
                    if (v22 - v25 > v29)
                    {
                      memmove(a6, &v23[v25], v29 + 1);
                      return validateIBPString(a6);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return 4294954387;
}

uint64_t IPB_MakeDataFromFrameStrings(char *a1, _QWORD *a2, unsigned __int8 *__src, unsigned __int8 *a4, unsigned __int8 *a5, unsigned __int8 *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  memmove(a1, __src, *__src + 1);
  v12 = *__src;
  memmove(&a1[v12 + 1], a4, *a4 + 1);
  v13 = v12 + *a4 + 2;
  memmove(&a1[v13], a5, *a5 + 1);
  v14 = v13 + *a5 + 1;
  memmove(&a1[v14], a6, *a6 + 1);
  *a2 = v14 + *a6 + 1;
  return 0;
}

_BYTE *IPB_ClearStr(_BYTE *result)
{
  *result = 0;
  return result;
}

void *IPB_AppendCStr(_BYTE *a1, char *__s)
{
  int v4;
  char v5;
  void *result;

  v4 = strlen(__s);
  v5 = v4;
  result = memmove(&a1[*a1 + 1], __s, v4);
  *a1 += v5;
  return result;
}

uint64_t IPB_SimulatePrediction(unsigned __int8 *a1, unsigned __int8 *a2, _BYTE *a3, unsigned __int8 *a4, unsigned __int8 *a5, unsigned __int8 *a6)
{
  int v12;
  _BYTE *v13;
  uint64_t result;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (*a4 != 1)
    return 4294954387;
  v13 = a4 + 1;
  v12 = (char)a4[1];
  result = 4294954387;
  if (v12 > 79)
  {
    if (v12 == 80)
    {
      if (*a3)
      {
        IPB_AppendCStr(a1, "->");
        v17 = *a1;
      }
      else
      {
        v17 = 0;
        *a1 = 0;
      }
      memmove(&a1[v17 + 1], a2 + 1, *a2);
      *a1 += *a2;
      *a6 = 0;
      memmove(a6 + 1, a1 + 1, *a1);
      *a6 += *a1;
      *a2 = 0;
      memmove(a2 + 1, v13, *a4);
      v19 = *a4;
      *a2 = v19;
      memmove(&a2[v19 + 1], a5 + 1, *a5);
      result = 0;
      *a2 += *a5;
      *a3 = 1;
      return result;
    }
    if (v12 != 98)
      return result;
LABEL_10:
    *a6 = 0;
    memmove(a6 + 1, a1 + 1, *a1);
    *a6 += *a1;
    if (*a3)
    {
      v16 = "->";
    }
    else
    {
      if (*v13 == 98)
      {
        *a6 = 0;
LABEL_22:
        memmove(&a6[*a6 + 1], a2 + 1, *a2);
        result = 0;
        *a6 += *a2;
        return result;
      }
      v16 = "; ";
    }
    IPB_AppendCStr(a6, v16);
    goto LABEL_22;
  }
  if (v12 == 66)
    goto LABEL_10;
  if (v12 == 73)
  {
    *a6 = 0;
    if (*a3)
    {
      IPB_AppendCStr(a1, "->");
      v15 = *a1;
    }
    else
    {
      v15 = 0;
      *a1 = 0;
    }
    memmove(&a1[v15 + 1], a2 + 1, *a2);
    *a1 += *a2;
    *a2 = 0;
    memmove(a2 + 1, v13, *a4);
    v18 = *a4;
    *a2 = v18;
    memmove(&a2[v18 + 1], a5 + 1, *a5);
    result = 0;
    *a2 += *a5;
    *a3 = 0;
  }
  return result;
}

uint64_t IPB_AreStringsDifferent(_BYTE *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  int v6;
  int v7;

  v2 = *a1;
  if ((_DWORD)v2 == *a2)
  {
    if (!*a1)
      return 0;
    v3 = a1 + 1;
    v4 = a2 + 1;
    while (1)
    {
      v6 = *v3++;
      v5 = v6;
      v7 = *v4++;
      if (v5 != v7)
        break;
      if (!--v2)
        return 0;
    }
  }
  return 1;
}

uint64_t vt_Copy_422vf_TRC_Tone_Mat_TRC_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Tone_Mat_TRC_420vf_GCD);
  return 0;
}

char *vt_Copy_422vf_TRC_Tone_Mat_TRC_420vf_GCD(char *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  unsigned int v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  unsigned int v41;
  float v42;
  float v43;
  float v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  float v54;
  float v55;
  float v56;
  float v57;
  _BYTE *v58;
  char *v59;
  _BYTE *v60;
  size_t v61;
  _BYTE *v62;
  _BYTE *v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  BOOL v80;
  float v81;
  unsigned int v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  unsigned int v107;
  float v120;
  float v121;
  float v122;
  float v127;
  float v128;
  float v133;
  float v134;
  float v135;
  float v140;
  float v141;
  float v142;
  float v144;
  float v145;
  float v146;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v155;
  float v158;
  float v159;
  float v160;
  float v161;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v190;
  float v191;
  float v192;
  char v193;
  float v194;
  float v195;
  char v196;
  float v197;
  float v198;
  char v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  float v206;
  float v207;
  uint64_t v208;
  float v209;
  float v210;
  float v211;
  float v212;
  float v213;
  float v214;
  float v215;
  float v216;
  float v217;
  float v218;
  float v219;
  float v220;
  float v221;
  float v222;
  float v223;
  float v224;
  float v225;
  float v226;
  float v227;
  float v228;
  float v229;
  float v230;
  float v231;
  float v232;
  float v233;
  float v234;
  float v235;
  float v236;
  float v237;
  float v238;
  float v239;

  v5 = *(_QWORD *)(result + 28);
  v6 = 2 * *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = *(_QWORD *)(result + 36);
    v12 = *(_QWORD *)(result + 44) + 2 * v7;
    v13 = 2 * v8 - 2 * v7;
    v14 = *((_QWORD *)result + 14);
    v15 = (_QWORD *)*((_QWORD *)result + 16);
    v16 = *((_QWORD *)result + 15) + 2 * (*((_QWORD *)result + 13) * a2 / v6);
    v17 = *((_QWORD *)result + 19);
    v19 = (_QWORD *)*((_QWORD *)result + 7);
    v18 = (uint64_t *)*((_QWORD *)result + 8);
    v20 = (uint64_t *)*((_QWORD *)result + 17);
    v21 = *v18;
    v22 = v18[1];
    v23 = v18[2];
    v208 = v19[2];
    v24 = (char *)(v208 + v23 * v12 + v11);
    v25 = *v20;
    v26 = v20[1];
    v27 = v20[2];
    v28 = v15[2];
    v29 = (char *)(v28 + v27 * v16 + v14);
    *(float *)&v30 = 8191.0 / (float)*(unsigned int *)(v17 + 128);
    LOWORD(a5) = *(_WORD *)(v17 + 140);
    v31 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v17 + 142);
    v32 = (float)LODWORD(a5);
    v33 = *(float *)&v30 * *(float *)v17;
    v34 = *(float *)&v30 * *(float *)(v17 + 8);
    v35 = *(float *)&v30 * *(float *)(v17 + 16);
    v36 = *(float *)&v30 * *(float *)(v17 + 20);
    v37 = *(float *)&v30 * *(float *)(v17 + 28);
    LOWORD(v30) = *(_WORD *)(v17 + 144);
    v38 = (float)v30;
    LOWORD(v30) = *(_WORD *)(v17 + 146);
    v39 = (float)v30;
    LOWORD(v30) = *(_WORD *)(v17 + 148);
    v40 = (float)v30;
    LOWORD(v30) = *(_WORD *)(v17 + 150);
    *(float *)&v41 = (float)v30;
    v239 = *(float *)&v41;
    LOWORD(v41) = *(_WORD *)(v17 + 152);
    v42 = (float)v41;
    v231 = *(float *)(v17 + 40);
    v232 = *(float *)(v17 + 36);
    v229 = *(float *)(v17 + 48) * 0.25;
    v230 = *(float *)(v17 + 44);
    v227 = *(float *)(v17 + 56) * 0.25;
    v228 = *(float *)(v17 + 52) * 0.25;
    v225 = *(float *)(v17 + 64) * 0.25;
    v226 = *(float *)(v17 + 60) * 0.25;
    v43 = *(float *)(v17 + 72);
    v223 = *(float *)(v17 + 68) * 0.25;
    v224 = v43;
    v221 = *(float *)(v17 + 80);
    v222 = *(float *)(v17 + 76);
    v219 = *(float *)(v17 + 88);
    v220 = *(float *)(v17 + 84);
    v217 = *(float *)(v17 + 96);
    v218 = *(float *)(v17 + 92);
    v216 = *(float *)(v17 + 100);
    v44 = *(float *)(v17 + 104);
    v214 = v44;
    v45 = v17 + 164;
    v46 = v19[1];
    v47 = (_BYTE *)(*v19 + *v18 * v12 + v11);
    result = (char *)(v46 + v22 * v12 + v11);
    v48 = v17 + 16548;
    if (!v46)
      result = 0;
    v49 = *v15 + v25 * v16;
    v50 = v15[1] + v26 * (v16 / 2);
    v51 = v17 + 32932;
    v52 = (_BYTE *)(v49 + v14);
    v53 = v50 + v14;
    v54 = *(float *)(v17 + 108);
    v55 = *(float *)(v17 + 112);
    v57 = *(float *)(v17 + 116);
    v56 = *(float *)(v17 + 120);
    v237 = (float)LODWORD(a5);
    v238 = v31;
    v235 = v34;
    v236 = v33;
    v233 = v42;
    v234 = v39;
    v215 = v37;
    v212 = v35;
    v213 = v36;
    v210 = v54;
    v211 = v55;
    v209 = v57;
    do
    {
      v58 = &v52[v25];
      v59 = &result[v22];
      v60 = &v47[v21];
      if (v10)
      {
        v61 = 0;
        v62 = &v47[v21];
        v63 = &v52[v25];
        do
        {
          LOBYTE(v44) = result[v61 + 1];
          v64 = (float)LODWORD(v44) - v32;
          v65 = v34 * v64;
          LOBYTE(v43) = *v47;
          v66 = v33 * (float)((float)LODWORD(v43) - v31);
          v67 = (float)(v34 * v64) + v66;
          v68 = 8191.0;
          if (v67 <= 8191.0)
          {
            v68 = (float)(v34 * v64) + v66;
            if (v67 < 0.0)
              v68 = 0.0;
          }
          LOBYTE(v67) = result[v61];
          v69 = (float)LODWORD(v67) - v32;
          v70 = (float)(v36 * v64) + (float)(v69 * v35);
          v71 = 8191.0;
          if ((float)(v66 + v70) <= 8191.0)
          {
            v71 = v66 + v70;
            if ((float)(v66 + v70) < 0.0)
              v71 = 0.0;
          }
          v72 = v37 * v69;
          v73 = v72 + v66;
          v74 = 8191.0;
          if (v73 <= 8191.0)
          {
            v74 = v73;
            if (v73 < 0.0)
              v74 = 0.0;
          }
          LOBYTE(v73) = v47[1];
          v75 = v33 * (float)((float)LODWORD(v73) - v31);
          v76 = v65 + v75;
          v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            v77 = v76;
            if (v76 < 0.0)
              v77 = 0.0;
          }
          v78 = 8191.0;
          if ((float)(v70 + v75) <= 8191.0)
          {
            v78 = v70 + v75;
            if ((float)(v70 + v75) < 0.0)
              v78 = 0.0;
          }
          v79 = v72 + v75;
          v80 = (float)(v72 + v75) <= 8191.0;
          v81 = 8191.0;
          if (v80)
          {
            v81 = v79;
            if (v79 < 0.0)
              v81 = 0.0;
          }
          LOBYTE(v79) = v59[v61 + 1];
          *(float *)&v82 = (float)LODWORD(v79);
          v83 = *(float *)&v82 - v32;
          v84 = v34 * (float)(*(float *)&v82 - v32);
          LOBYTE(v82) = *v62;
          v85 = v33 * (float)((float)v82 - v31);
          v86 = 8191.0;
          if ((float)(v84 + v85) <= 8191.0)
          {
            v86 = v84 + v85;
            if ((float)(v84 + v85) < 0.0)
              v86 = 0.0;
          }
          LOBYTE(v42) = v59[v61];
          v87 = (float)LODWORD(v42) - v32;
          v88 = (float)(v36 * v83) + (float)(v87 * v35);
          v89 = 8191.0;
          if ((float)(v85 + v88) <= 8191.0)
          {
            v89 = v85 + v88;
            if ((float)(v85 + v88) < 0.0)
              v89 = 0.0;
          }
          v90 = v37 * v87;
          v91 = v90 + v85;
          v80 = (float)(v90 + v85) <= 8191.0;
          v92 = 8191.0;
          if (v80)
          {
            v92 = v91;
            if (v91 < 0.0)
              v92 = 0.0;
          }
          LOBYTE(v72) = v62[1];
          v93 = v33 * (float)((float)LODWORD(v72) - v31);
          v94 = v84 + v93;
          v80 = (float)(v84 + v93) <= 8191.0;
          v95 = 8191.0;
          if (v80)
          {
            v95 = v94;
            if (v94 < 0.0)
              v95 = 0.0;
          }
          v96 = v88 + v93;
          v97 = 8191.0;
          if (v96 <= 8191.0)
          {
            v97 = v96;
            if (v96 < 0.0)
              v97 = 0.0;
          }
          v98 = v90 + v93;
          v99 = 8191.0;
          if (v98 <= 8191.0)
          {
            v99 = v98;
            if (v98 < 0.0)
              v99 = 0.0;
          }
          _H20 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v68, 0.0), 8191.0)));
          __asm { FCVT            S28, H20 }
          _H20 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          v107 = llroundf(fminf(fmaxf(v74, 0.0), 8191.0));
          __asm { FCVT            S19, H20 }
          _H20 = *(_WORD *)(v45 + 2 * v107);
          __asm { FCVT            S30, H20 }
          _H22 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          _H23 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          _H20 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          _H5 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          _H6 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          _H7 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v95, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v97, 0.0), 8191.0)));
          _H4 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v99, 0.0), 8191.0)));
          v120 = fmaxf(_S28, fmaxf(_S19, _S30));
          v121 = (float)((float)((float)(v55 * _S19) + (float)(v54 * _S28)) + (float)(v57 * _S30)) + (float)(v56 * v120);
          v122 = 8191.0;
          if (v121 <= 8191.0)
          {
            v122 = (float)((float)((float)(v55 * _S19) + (float)(v54 * _S28)) + (float)(v57 * _S30))
                 + (float)(v56 * v120);
            if (v121 < 0.0)
              v122 = 0.0;
          }
          __asm
          {
            FCVT            S3, H22
            FCVT            S17, H23
            FCVT            S21, H20
          }
          _H22 = *(_WORD *)(v48 + 2 * llroundf(v122));
          v127 = (float)((float)((float)(v55 * _S17) + (float)(v54 * _S3)) + (float)(v57 * _S21))
               + (float)(v56 * fmaxf(_S3, fmaxf(_S17, _S21)));
          v128 = 8191.0;
          if (v127 <= 8191.0)
          {
            v128 = v127;
            if (v127 < 0.0)
              v128 = 0.0;
          }
          __asm
          {
            FCVT            S8, H5
            FCVT            S9, H6
            FCVT            S10, H7
          }
          _H5 = *(_WORD *)(v48 + 2 * llroundf(v128));
          v133 = fmaxf(_S8, fmaxf(_S9, _S10));
          v134 = (float)((float)((float)(v55 * _S9) + (float)(v54 * _S8)) + (float)(v57 * _S10)) + (float)(v56 * v133);
          v135 = 8191.0;
          if (v134 <= 8191.0)
          {
            v135 = (float)((float)((float)(v55 * _S9) + (float)(v54 * _S8)) + (float)(v57 * _S10)) + (float)(v56 * v133);
            if (v134 < 0.0)
              v135 = 0.0;
          }
          __asm
          {
            FCVT            S23, H1
            FCVT            S29, H2
            FCVT            S31, H4
            FCVT            S1, H22
          }
          v140 = _S28 * _S1;
          v141 = _S19 * _S1;
          v142 = _S30 * _S1;
          __asm { FCVT            S1, H5 }
          v144 = _S3 * _S1;
          v145 = _S17 * _S1;
          v146 = _S21 * _S1;
          LOWORD(_S1) = *(_WORD *)(v48 + 2 * llroundf(v135));
          __asm { FCVT            S2, H1 }
          v148 = _S8 * _S2;
          v149 = _S9 * _S2;
          v150 = _S10 * _S2;
          v151 = (float)((float)((float)(v55 * _S29) + (float)(v54 * _S23)) + (float)(v57 * _S31))
               + (float)(v56 * fmaxf(_S23, fmaxf(_S29, _S31)));
          v152 = 8191.0;
          if (v151 <= 8191.0)
          {
            v152 = v151;
            if (v151 < 0.0)
              v152 = 0.0;
          }
          _H17 = *(_WORD *)(v48 + 2 * llroundf(v152));
          __asm { FCVT            S17, H17 }
          v155 = _S23 * _S17;
          _S22 = _S29 * _S17;
          _S17 = _S31 * _S17;
          v158 = (float)((float)(v222 * v141) + (float)(v140 * v224)) + (float)(v142 * v221);
          v159 = (float)((float)(v219 * v141) + (float)(v140 * v220)) + (float)(v142 * v218);
          v160 = (float)((float)(v216 * v141) + (float)(v140 * v217)) + (float)(v142 * v214);
          v161 = (float)((float)(v222 * v145) + (float)(v144 * v224)) + (float)(v146 * v221);
          _S20 = (float)((float)(v219 * v145) + (float)(v144 * v220)) + (float)(v146 * v218);
          v163 = (float)((float)(v216 * v145) + (float)(v144 * v217)) + (float)(v146 * v214);
          v164 = (float)((float)(v222 * v149) + (float)(v148 * v224)) + (float)(v150 * v221);
          v165 = (float)((float)(v219 * v149) + (float)(v148 * v220)) + (float)(v150 * v218);
          v166 = (float)((float)(v216 * v149) + (float)(v148 * v217)) + (float)(v150 * v214);
          v167 = (float)((float)(v222 * _S22) + (float)(v155 * v224)) + (float)(_S17 * v221);
          v168 = (float)((float)(v219 * _S22) + (float)(v155 * v220)) + (float)(_S17 * v218);
          _S21 = (float)((float)(v216 * _S22) + (float)(v155 * v217)) + (float)(_S17 * v214);
          _H1 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v158, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          _H2 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v159, 0.0), 8191.0)));
          __asm { FCVT            S4, H2 }
          _H2 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v160, 0.0), 8191.0)));
          __asm { FCVT            S5, H2 }
          _H2 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v161, 0.0), 8191.0)));
          __asm { FCVT            S6, H2 }
          _H2 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(_S20, 0.0), 8191.0)));
          _H3 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v163, 0.0), 8191.0)));
          __asm
          {
            FCVT            S2, H2
            FCVT            S7, H3
          }
          _H3 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v164, 0.0), 8191.0)));
          __asm { FCVT            S19, H3 }
          _H3 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v165, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          LOWORD(_S17) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v166, 0.0), 8191.0)));
          __asm { FCVT            S17, H17 }
          LOWORD(_S20) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v167, 0.0), 8191.0)));
          __asm { FCVT            S20, H20 }
          LOWORD(_S22) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v168, 0.0), 8191.0)));
          LOWORD(_S21) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(_S21, 0.0), 8191.0)));
          __asm
          {
            FCVT            S22, H22
            FCVT            S21, H21
          }
          v190 = (float)((float)((float)(v231 * _S4) + (float)(v232 * _S1)) + (float)(v230 * _S5)) + v38;
          if (v190 < v38)
            v191 = v38;
          else
            v191 = (float)((float)((float)(v231 * _S4) + (float)(v232 * _S1)) + (float)(v230 * _S5)) + v38;
          v80 = v190 <= v40;
          v192 = (float)((float)((float)(v231 * _S2) + (float)(v232 * _S6)) + (float)(v230 * _S7)) + v38;
          if (!v80)
            v191 = v40;
          v193 = llroundf(v191);
          if (v192 < v38)
            v194 = v38;
          else
            v194 = (float)((float)((float)(v231 * _S2) + (float)(v232 * _S6)) + (float)(v230 * _S7)) + v38;
          v80 = v192 <= v40;
          v195 = (float)((float)((float)(v231 * _S3) + (float)(v232 * _S19)) + (float)(v230 * _S17)) + v38;
          if (!v80)
            v194 = v40;
          v196 = llroundf(v194);
          if (v195 < v38)
            v197 = v38;
          else
            v197 = (float)((float)((float)(v231 * _S3) + (float)(v232 * _S19)) + (float)(v230 * _S17)) + v38;
          v80 = v195 <= v40;
          v198 = (float)((float)((float)(v231 * _S22) + (float)(v232 * _S20)) + (float)(v230 * _S21)) + v38;
          if (!v80)
            v197 = v40;
          v199 = llroundf(v197);
          if (v198 < v38)
            v200 = v38;
          else
            v200 = (float)((float)((float)(v231 * _S22) + (float)(v232 * _S20)) + (float)(v230 * _S21)) + v38;
          if (v198 <= v40)
            v201 = v200;
          else
            v201 = v40;
          v202 = (float)((float)(_S1 + _S6) + _S19) + _S20;
          v203 = (float)((float)(_S4 + _S2) + _S3) + _S22;
          *v52 = v193;
          v52[1] = v196;
          *v63 = v199;
          v63[1] = llroundf(v201);
          v204 = (float)(_S5 + _S7) + _S17;
          v42 = v233;
          v43 = v204 + _S21;
          v205 = (float)((float)(v234 + (float)(v202 * v229)) + (float)(v203 * v228)) + (float)(v43 * v227);
          v206 = v233;
          if (v205 <= v233)
          {
            v206 = (float)((float)(v234 + (float)(v202 * v229)) + (float)(v203 * v228)) + (float)(v43 * v227);
            if (v205 < v239)
              v206 = v239;
          }
          v207 = (float)((float)(v234 + (float)(v202 * v226)) + (float)(v203 * v225)) + (float)(v43 * v223);
          *(_BYTE *)(v53 + v61) = llroundf(v206);
          v44 = v233;
          v32 = v237;
          v31 = v238;
          v34 = v235;
          v33 = v236;
          v35 = v212;
          v36 = v213;
          v37 = v215;
          if (v207 <= v233)
          {
            v44 = v207;
            if (v207 < v239)
              v44 = v239;
          }
          v47 += 2;
          v62 += 2;
          v52 += 2;
          v63 += 2;
          *(_BYTE *)(v53 + v61 + 1) = llroundf(v44);
          v61 += 2;
          v54 = v210;
          v55 = v211;
          v57 = v209;
        }
        while (v10 > v61);
      }
      v47 = &v60[v21];
      result = &v59[v22];
      v52 = &v58[v25];
      v53 += v26;
      v9 += 2;
    }
    while (v13 > v9);
    if (v208 && v28)
    {
      do
      {
        result = (char *)memcpy(v29, v24, v10);
        v24 += v23;
        v29 += v27;
        --v13;
      }
      while (v13);
    }
    else if (v28)
    {
      do
      {
        if (v10)
          result = (char *)memset(v29, 255, v10);
        v29 += v27;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Mat_TRC_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Mat_TRC_420vf_GCD);
  return 0;
}

char *vt_Copy_422vf_TRC_Mat_TRC_420vf_GCD(char *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  unsigned int v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  unsigned int v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  uint64_t v59;
  _BYTE *v60;
  char *v61;
  _BYTE *v62;
  size_t v63;
  _BYTE *v64;
  _BYTE *v65;
  unsigned int v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  BOOL v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  unsigned int v121;
  float v133;
  float v134;
  float v137;
  float v138;
  float v139;
  float v140;
  float v142;
  float v143;
  float v157;
  float v158;
  float v159;
  char v160;
  float v161;
  float v162;
  char v163;
  float v164;
  float v165;
  char v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float v182;
  float v183;
  float v184;
  float v185;
  float v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;

  v5 = *(_QWORD *)(result + 28);
  v6 = 2 * *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = *(_QWORD *)(result + 36);
    v12 = *(_QWORD *)(result + 44) + 2 * v7;
    v13 = 2 * v8 - 2 * v7;
    v14 = *((_QWORD *)result + 14);
    v15 = (_QWORD *)*((_QWORD *)result + 16);
    v16 = *((_QWORD *)result + 15) + 2 * (*((_QWORD *)result + 13) * a2 / v6);
    v17 = *((_QWORD *)result + 19);
    v19 = (_QWORD *)*((_QWORD *)result + 7);
    v18 = (uint64_t *)*((_QWORD *)result + 8);
    v20 = (uint64_t *)*((_QWORD *)result + 17);
    v21 = *v18;
    v22 = v18[1];
    v23 = v18[2];
    v24 = v19[2];
    v25 = (char *)(v24 + v23 * v12 + v11);
    v26 = *v20;
    v27 = v20[1];
    v28 = v20[2];
    v29 = v15[2];
    v30 = (char *)(v29 + v28 * v16 + v14);
    *(float *)&v31 = 8191.0 / (float)*(unsigned int *)(v17 + 128);
    LOWORD(a5) = *(_WORD *)(v17 + 140);
    v32 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v17 + 142);
    v33 = (float)LODWORD(a5);
    v34 = *(float *)&v31 * *(float *)v17;
    v35 = *(float *)&v31 * *(float *)(v17 + 8);
    v36 = *(float *)&v31 * *(float *)(v17 + 16);
    v37 = *(float *)&v31 * *(float *)(v17 + 20);
    v38 = *(float *)&v31 * *(float *)(v17 + 28);
    LOWORD(v31) = *(_WORD *)(v17 + 144);
    v39 = (float)v31;
    LOWORD(v31) = *(_WORD *)(v17 + 146);
    v40 = (float)v31;
    LOWORD(v31) = *(_WORD *)(v17 + 148);
    v41 = (float)v31;
    LOWORD(v31) = *(_WORD *)(v17 + 150);
    *(float *)&v42 = (float)v31;
    v191 = *(float *)&v42;
    LOWORD(v42) = *(_WORD *)(v17 + 152);
    v43 = (float)v42;
    v183 = *(float *)(v17 + 40);
    v184 = *(float *)(v17 + 36);
    v181 = *(float *)(v17 + 48) * 0.25;
    v182 = *(float *)(v17 + 44);
    v179 = *(float *)(v17 + 56) * 0.25;
    v180 = *(float *)(v17 + 52) * 0.25;
    v177 = *(float *)(v17 + 64) * 0.25;
    v178 = *(float *)(v17 + 60) * 0.25;
    v44 = *(float *)(v17 + 68) * 0.25;
    v175 = v44;
    v176 = *(float *)(v17 + 72);
    v46 = *(float *)(v17 + 76);
    v45 = *(float *)(v17 + 80);
    v47 = *(float *)(v17 + 84);
    v48 = *(float *)(v17 + 88);
    v49 = *(float *)(v17 + 92);
    v50 = *(float *)(v17 + 96);
    v51 = *(float *)(v17 + 100);
    v52 = *(float *)(v17 + 104);
    v53 = v19[1];
    v54 = (_BYTE *)(*v19 + v21 * v12 + v11);
    result = (char *)(v53 + v22 * v12 + v11);
    v55 = v17 + 16548;
    v56 = v17 + 164;
    if (!v53)
      result = 0;
    v57 = v15[1];
    v58 = (_BYTE *)(*v15 + v26 * v16 + v14);
    v59 = v57 + v27 * (v16 / 2) + v14;
    v189 = v35;
    v190 = (float)LODWORD(a5);
    v187 = v38;
    v188 = v36;
    v185 = v43;
    v186 = v40;
    do
    {
      v60 = &v58[v26];
      v61 = &result[v22];
      v62 = &v54[v21];
      if (v10)
      {
        v63 = 0;
        v64 = &v54[v21];
        v65 = &v58[v26];
        do
        {
          LOBYTE(v44) = result[v63 + 1];
          *(float *)&v66 = (float)LODWORD(v44);
          v67 = *(float *)&v66 - v33;
          v68 = v35 * (float)(*(float *)&v66 - v33);
          LOBYTE(v66) = *v54;
          v69 = v34 * (float)((float)v66 - v32);
          v70 = v68 + v69;
          v71 = 8191.0;
          if ((float)(v68 + v69) <= 8191.0)
          {
            v71 = v68 + v69;
            if (v70 < 0.0)
              v71 = 0.0;
          }
          LOBYTE(v70) = result[v63];
          v72 = (float)LODWORD(v70) - v33;
          v73 = (float)(v37 * v67) + (float)(v72 * v36);
          v74 = 8191.0;
          if ((float)(v69 + v73) <= 8191.0)
          {
            v74 = v69 + v73;
            if ((float)(v69 + v73) < 0.0)
              v74 = 0.0;
          }
          v75 = v38 * v72;
          v76 = v75 + v69;
          v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            v77 = v76;
            if (v76 < 0.0)
              v77 = 0.0;
          }
          LOBYTE(v76) = v54[1];
          v78 = v34 * (float)((float)LODWORD(v76) - v32);
          v79 = 8191.0;
          if ((float)(v68 + v78) <= 8191.0)
          {
            v79 = v68 + v78;
            if ((float)(v68 + v78) < 0.0)
              v79 = 0.0;
          }
          v80 = v73 + v78;
          v81 = 8191.0;
          if ((float)(v73 + v78) <= 8191.0)
          {
            v81 = v73 + v78;
            if (v80 < 0.0)
              v81 = 0.0;
          }
          v82 = v75 + v78;
          v83 = 8191.0;
          if (v82 <= 8191.0)
          {
            v83 = v82;
            if (v82 < 0.0)
              v83 = 0.0;
          }
          LOBYTE(v80) = v61[v63 + 1];
          v84 = (float)LODWORD(v80) - v33;
          v85 = v35 * v84;
          LOBYTE(v68) = *v64;
          v86 = v34 * (float)((float)LODWORD(v68) - v32);
          v87 = 8191.0;
          if ((float)((float)(v35 * v84) + v86) <= 8191.0)
          {
            v87 = (float)(v35 * v84) + v86;
            if (v87 < 0.0)
              v87 = 0.0;
          }
          LOBYTE(v82) = v61[v63];
          v88 = (float)LODWORD(v82) - v33;
          v89 = (float)(v37 * v84) + (float)(v88 * v36);
          v90 = 8191.0;
          if ((float)(v86 + v89) <= 8191.0)
          {
            v90 = v86 + v89;
            if ((float)(v86 + v89) < 0.0)
              v90 = 0.0;
          }
          v91 = v38 * v88;
          v92 = v91 + v86;
          v93 = (float)(v91 + v86) <= 8191.0;
          v94 = 8191.0;
          if (v93)
          {
            v94 = v92;
            if (v92 < 0.0)
              v94 = 0.0;
          }
          LOBYTE(v35) = v64[1];
          v95 = v34 * (float)((float)LODWORD(v35) - v32);
          v96 = v85 + v95;
          v93 = (float)(v85 + v95) <= 8191.0;
          v97 = 8191.0;
          if (v93)
          {
            v97 = v96;
            if (v96 < 0.0)
              v97 = 0.0;
          }
          v98 = v89 + v95;
          v99 = 8191.0;
          if (v98 <= 8191.0)
          {
            v99 = v98;
            if (v98 < 0.0)
              v99 = 0.0;
          }
          v100 = v34;
          v101 = v32;
          v102 = v91 + v95;
          v103 = 8191.0;
          if (v102 <= 8191.0)
          {
            v103 = v102;
            if (v102 < 0.0)
              v103 = 0.0;
          }
          _H1 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          _H2 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H24 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          _H25 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          _H26 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          __asm
          {
            FCVT            S26, H26
            FCVT            S27, H27
          }
          _H19 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          v121 = llroundf(fminf(fmaxf(v90, 0.0), 8191.0));
          __asm { FCVT            S4, H19 }
          _H19 = *(_WORD *)(v56 + 2 * v121);
          __asm { FCVT            S19, H19 }
          _H5 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H6 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v97, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H7 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v99, 0.0), 8191.0)));
          _H17 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v103, 0.0), 8191.0)));
          __asm
          {
            FCVT            S7, H7
            FCVT            S17, H17
          }
          v133 = (float)((float)(v46 * _S2) + (float)(_S1 * v176)) + (float)(_S24 * v45);
          v134 = (float)((float)(v48 * _S2) + (float)(_S1 * v47)) + (float)(_S24 * v49);
          _S1 = (float)((float)(v51 * _S2) + (float)(_S1 * v50)) + (float)(_S24 * v52);
          _S2 = (float)((float)(v46 * _S26) + (float)(_S25 * v176)) + (float)(_S27 * v45);
          v137 = (float)((float)(v48 * _S26) + (float)(_S25 * v47)) + (float)(_S27 * v49);
          v138 = (float)((float)(v51 * _S26) + (float)(_S25 * v50)) + (float)(_S27 * v52);
          v139 = (float)((float)(v46 * _S19) + (float)(_S4 * v176)) + (float)(_S5 * v45);
          v140 = (float)((float)(v48 * _S19) + (float)(_S4 * v47)) + (float)(_S5 * v49);
          _S3 = (float)((float)(v51 * _S19) + (float)(_S4 * v50)) + (float)(_S5 * v52);
          v142 = (float)((float)(v46 * _S7) + (float)(_S6 * v176)) + (float)(_S17 * v45);
          v143 = (float)((float)(v48 * _S7) + (float)(_S6 * v47)) + (float)(_S17 * v49);
          _S17 = (float)((float)(v51 * _S7) + (float)(_S6 * v50)) + (float)(_S17 * v52);
          LOWORD(_S4) = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v133, 0.0), 8191.0)));
          __asm { FCVT            S19, H4 }
          LOWORD(_S4) = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v134, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          LOWORD(_S1) = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          __asm { FCVT            S5, H1 }
          LOWORD(_S1) = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(_S2, 0.0), 8191.0)));
          __asm { FCVT            S6, H1 }
          LOWORD(_S1) = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v137, 0.0), 8191.0)));
          LOWORD(_S2) = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v138, 0.0), 8191.0)));
          __asm
          {
            FCVT            S25, H1
            FCVT            S24, H2
          }
          LOWORD(_S1) = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v139, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          LOWORD(_S2) = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v140, 0.0), 8191.0)));
          __asm { FCVT            S7, H2 }
          LOWORD(_S2) = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          __asm { FCVT            S26, H2 }
          LOWORD(_S2) = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v142, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          LOWORD(_S3) = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v143, 0.0), 8191.0)));
          LOWORD(_S17) = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(_S17, 0.0), 8191.0)));
          __asm
          {
            FCVT            S3, H3
            FCVT            S17, H17
          }
          v157 = (float)((float)((float)(v183 * _S4) + (float)(v184 * _S19)) + (float)(v182 * _S5)) + v39;
          if (v157 < v39)
            v158 = v39;
          else
            v158 = (float)((float)((float)(v183 * _S4) + (float)(v184 * _S19)) + (float)(v182 * _S5)) + v39;
          v93 = v157 <= v41;
          v159 = (float)((float)((float)(v183 * _S25) + (float)(v184 * _S6)) + (float)(v182 * _S24)) + v39;
          if (!v93)
            v158 = v41;
          v160 = llroundf(v158);
          if (v159 < v39)
            v161 = v39;
          else
            v161 = (float)((float)((float)(v183 * _S25) + (float)(v184 * _S6)) + (float)(v182 * _S24)) + v39;
          v93 = v159 <= v41;
          v162 = (float)((float)((float)(v183 * _S7) + (float)(v184 * _S1)) + (float)(v182 * _S26)) + v39;
          if (!v93)
            v161 = v41;
          v163 = llroundf(v161);
          if (v162 < v39)
            v164 = v39;
          else
            v164 = (float)((float)((float)(v183 * _S7) + (float)(v184 * _S1)) + (float)(v182 * _S26)) + v39;
          v93 = v162 <= v41;
          v165 = (float)((float)((float)(v183 * _S3) + (float)(v184 * _S2)) + (float)(v182 * _S17)) + v39;
          if (!v93)
            v164 = v41;
          v166 = llroundf(v164);
          if (v165 < v39)
            v167 = v39;
          else
            v167 = (float)((float)((float)(v183 * _S3) + (float)(v184 * _S2)) + (float)(v182 * _S17)) + v39;
          if (v165 <= v41)
            v168 = v167;
          else
            v168 = v41;
          v169 = (float)((float)(_S19 + _S6) + _S1) + _S2;
          v170 = (float)((float)(_S4 + _S25) + _S7) + _S3;
          *v58 = v160;
          v58[1] = v163;
          *v65 = v166;
          v65[1] = llroundf(v168);
          v171 = (float)((float)(_S5 + _S24) + _S26) + _S17;
          v172 = (float)((float)(v186 + (float)(v169 * v181)) + (float)(v170 * v180)) + (float)(v171 * v179);
          v173 = v185;
          if (v172 <= v185)
          {
            v173 = (float)((float)(v186 + (float)(v169 * v181)) + (float)(v170 * v180)) + (float)(v171 * v179);
            if (v172 < v191)
              v173 = v191;
          }
          v174 = (float)((float)(v186 + (float)(v169 * v178)) + (float)(v170 * v177)) + (float)(v171 * v175);
          *(_BYTE *)(v59 + v63) = llroundf(v173);
          v44 = v185;
          v32 = v101;
          v35 = v189;
          v33 = v190;
          v34 = v100;
          if (v174 <= v185)
          {
            v44 = v174;
            if (v174 < v191)
              v44 = v191;
          }
          v54 += 2;
          v64 += 2;
          v58 += 2;
          v65 += 2;
          *(_BYTE *)(v59 + v63 + 1) = llroundf(v44);
          v63 += 2;
          v38 = v187;
          v36 = v188;
        }
        while (v10 > v63);
      }
      v54 = &v62[v21];
      result = &v61[v22];
      v58 = &v60[v26];
      v59 += v27;
      v9 += 2;
    }
    while (v13 > v9);
    if (v24 && v29)
    {
      do
      {
        result = (char *)memcpy(v30, v25, v10);
        v25 += v23;
        v30 += v28;
        --v13;
      }
      while (v13);
    }
    else if (v29)
    {
      do
      {
        if (v10)
          result = (char *)memset(v30, 255, v10);
        v30 += v28;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_rgb_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_rgb_420vf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_422vf_rgb_420vf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, double a5, float a6, float a7)
{
  float v7;
  float v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  char *v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  uint64_t v74;
  unsigned __int8 *v75;
  uint64_t v76;
  _BYTE *v77;
  size_t v78;
  _BYTE *v79;
  unsigned __int8 *v80;
  unsigned int v81;
  float v82;
  float v83;
  unsigned int v84;
  float v85;
  unsigned int v86;
  float v87;
  unsigned int v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  BOOL v109;
  float v110;
  unsigned __int8 v111;
  float v112;
  float v113;
  unsigned __int8 v114;
  float v115;
  unsigned __int8 v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;

  v14 = *(_QWORD *)(result + 28);
  v15 = 2 * *result;
  v16 = v14 * a2 / v15;
  v17 = (v14 + v14 * a2) / v15;
  if (2 * v17 != 2 * v16)
  {
    v18 = 0;
    v19 = *(_QWORD *)(result + 20);
    v20 = *(_QWORD *)(result + 36);
    v21 = *(_QWORD *)(result + 44) + 2 * v16;
    v22 = 2 * v17 - 2 * v16;
    v23 = *((_QWORD *)result + 14);
    v24 = (_QWORD *)*((_QWORD *)result + 16);
    v25 = *((_QWORD *)result + 15) + 2 * (*((_QWORD *)result + 13) * a2 / v15);
    v26 = *((_QWORD *)result + 19);
    v28 = (_QWORD *)*((_QWORD *)result + 7);
    v27 = (uint64_t *)*((_QWORD *)result + 8);
    v29 = (uint64_t *)*((_QWORD *)result + 17);
    v30 = *v27;
    v31 = v27[1];
    v32 = v27[2];
    v33 = v28[2];
    v34 = (char *)(v33 + v32 * v21 + v20);
    v35 = *v29;
    v36 = v29[1];
    v37 = v29[2];
    v38 = v24[2];
    v39 = (float)*(unsigned int *)(v26 + 136) / (float)*(unsigned int *)(v26 + 128);
    LOWORD(a6) = *(_WORD *)(v26 + 140);
    LOWORD(a7) = *(_WORD *)(v26 + 142);
    v40 = *(float *)v26;
    v41 = *(float *)(v26 + 8);
    v42 = *(float *)(v26 + 16);
    v43 = *(float *)(v26 + 20);
    v44 = *(float *)(v26 + 28);
    LOWORD(v9) = *(_WORD *)(v26 + 144);
    LOWORD(v10) = *(_WORD *)(v26 + 146);
    LOWORD(v11) = *(_WORD *)(v26 + 148);
    LOWORD(v12) = *(_WORD *)(v26 + 150);
    LOWORD(v13) = *(_WORD *)(v26 + 152);
    v45 = *(float *)(v26 + 36);
    v46 = *(float *)(v26 + 40);
    v47 = *(float *)(v26 + 44);
    v48 = *(float *)(v26 + 48);
    v49 = *(float *)(v26 + 52);
    v50 = *(float *)(v26 + 56);
    v51 = *(float *)(v26 + 60);
    v52 = *(float *)(v26 + 64);
    v53 = *(float *)(v26 + 68);
    v54 = v28[1];
    v55 = (_BYTE *)(*v28 + v30 * v21 + v20);
    v56 = v54 + v31 * v21 + v20;
    v57 = (char *)(v38 + v37 * v25 + v23);
    v58 = (float)LODWORD(a6);
    v59 = (float)LODWORD(a7);
    v60 = v39 * v40;
    v61 = v39 * v41;
    v62 = v39 * v42;
    v63 = v39 * v43;
    v64 = v39 * v44;
    v65 = (float)v9;
    v66 = (float)v10;
    v67 = (float)v11;
    v68 = (float)v12;
    v69 = (float)v13;
    v70 = 0.25;
    v124 = v49 * 0.25;
    v125 = v48 * 0.25;
    v123 = v50 * 0.25;
    v71 = v51 * 0.25;
    v72 = v52 * 0.25;
    v73 = v53 * 0.25;
    if (!v54)
      v56 = 0;
    result = (unsigned __int8 *)(*v24 + v35 * v25 + v23);
    v74 = v24[1] + v36 * (v25 / 2) + v23;
    do
    {
      v75 = &result[v35];
      v76 = v56 + v31;
      v77 = &v55[v30];
      if (v19)
      {
        v78 = 0;
        v79 = &v55[v30];
        v80 = &result[v35];
        do
        {
          LOBYTE(v53) = *(_BYTE *)(v56 + v78);
          *(float *)&v81 = (float)LODWORD(v53) - v59;
          LOBYTE(v70) = *(_BYTE *)(v56 + v78 + 1);
          v82 = (float)LODWORD(v70) - v59;
          v83 = v61 * v82;
          *(float *)&v84 = v63 * v82;
          v85 = *(float *)&v84 + (float)(*(float *)&v81 * v62);
          *(float *)&v86 = v64 * *(float *)&v81;
          LOBYTE(v81) = *v55;
          v87 = v60 * (float)((float)v81 - v58);
          LOBYTE(v84) = v55[1];
          *(float *)&v88 = v60 * (float)((float)v84 - v58);
          v89 = v83 + v87;
          v90 = v87 + v85;
          v91 = *(float *)&v86 + v87;
          v92 = v83 + *(float *)&v88;
          v93 = v85 + *(float *)&v88;
          v94 = *(float *)&v86 + *(float *)&v88;
          LOBYTE(v86) = *(_BYTE *)(v76 + v78);
          v95 = (float)v86 - v59;
          LOBYTE(v88) = *(_BYTE *)(v76 + v78 + 1);
          v96 = (float)v88 - v59;
          v97 = v61 * v96;
          v98 = (float)(v63 * v96) + (float)(v95 * v62);
          v99 = v64 * v95;
          LOBYTE(v7) = *v79;
          v100 = v60 * (float)((float)LODWORD(v7) - v58);
          LOBYTE(v8) = v79[1];
          v101 = v60 * (float)((float)LODWORD(v8) - v58);
          v102 = v97 + v100;
          v103 = v100 + v98;
          v7 = v99 + v100;
          v104 = v97 + v101;
          v105 = v98 + v101;
          v106 = v99 + v101;
          v107 = (float)((float)((float)(v46 * v90) + (float)(v45 * v89)) + (float)(v47 * v91)) + v65;
          if (v107 < v65)
            v108 = v65;
          else
            v108 = (float)((float)((float)(v46 * v90) + (float)(v45 * v89)) + (float)(v47 * v91)) + v65;
          v109 = v107 <= v67;
          v110 = (float)((float)((float)(v46 * v93) + (float)(v45 * v92)) + (float)(v47 * v94)) + v65;
          if (!v109)
            v108 = v67;
          v111 = llroundf(v108);
          if (v110 < v65)
            v112 = v65;
          else
            v112 = (float)((float)((float)(v46 * v93) + (float)(v45 * v92)) + (float)(v47 * v94)) + v65;
          v109 = v110 <= v67;
          v113 = (float)((float)((float)(v46 * v103) + (float)(v45 * v102)) + (float)(v47 * v7)) + v65;
          if (!v109)
            v112 = v67;
          v114 = llroundf(v112);
          if (v113 < v65)
            v115 = v65;
          else
            v115 = (float)((float)((float)(v46 * v103) + (float)(v45 * v102)) + (float)(v47 * v7)) + v65;
          v109 = v113 <= v67;
          v8 = (float)((float)((float)(v46 * v105) + (float)(v45 * v104)) + (float)(v47 * v106)) + v65;
          if (!v109)
            v115 = v67;
          v116 = llroundf(v115);
          if (v8 < v65)
            v117 = v65;
          else
            v117 = (float)((float)((float)(v46 * v105) + (float)(v45 * v104)) + (float)(v47 * v106)) + v65;
          if (v8 > v67)
            v117 = v67;
          v118 = (float)((float)(v89 + v92) + v102) + v104;
          v119 = (float)((float)(v90 + v93) + v103) + v105;
          *result = v111;
          result[1] = v114;
          *v80 = v116;
          v80[1] = llroundf(v117);
          v120 = (float)((float)(v91 + v94) + v7) + v106;
          v121 = (float)((float)(v66 + (float)(v118 * v125)) + (float)(v119 * v124)) + (float)(v120 * v123);
          v122 = v69;
          if (v121 <= v69)
          {
            v122 = (float)((float)(v66 + (float)(v118 * v125)) + (float)(v119 * v124)) + (float)(v120 * v123);
            if (v121 < v68)
              v122 = v68;
          }
          v70 = (float)((float)(v66 + (float)(v118 * v71)) + (float)(v119 * v72)) + (float)(v120 * v73);
          *(_BYTE *)(v74 + v78) = llroundf(v122);
          v53 = v69;
          if (v70 <= v69)
          {
            v53 = v70;
            if (v70 < v68)
              v53 = v68;
          }
          v55 += 2;
          v79 += 2;
          result += 2;
          v80 += 2;
          *(_BYTE *)(v74 + v78 + 1) = llroundf(v53);
          v78 += 2;
        }
        while (v19 > v78);
      }
      v55 = &v77[v30];
      v56 = v76 + v31;
      result = &v75[v35];
      v74 += v36;
      v18 += 2;
    }
    while (v22 > v18);
    if (v33 && v38)
    {
      do
      {
        result = (unsigned __int8 *)memcpy(v57, v34, v19);
        v34 += v32;
        v57 += v37;
        --v22;
      }
      while (v22);
    }
    else if (v38)
    {
      do
      {
        if (v19)
          result = (unsigned __int8 *)memset(v57, 255, v19);
        v57 += v37;
        --v22;
      }
      while (v22);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Tone_Mat_TRC_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Tone_Mat_TRC_xf420_GCD);
  return 0;
}

_QWORD *vt_Copy_422vf_TRC_Tone_Mat_TRC_xf420_GCD(_QWORD *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  unsigned int v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  unsigned int v40;
  float v41;
  float v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  unsigned int v48;
  char v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char v58;
  float v59;
  float v60;
  float v61;
  float v62;
  char *v63;
  uint64_t v64;
  _BYTE *v65;
  unint64_t v66;
  _BYTE *v67;
  char *v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  BOOL v85;
  float v86;
  unsigned int v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  unsigned int v111;
  float v124;
  float v125;
  float v126;
  float v131;
  float v132;
  float v137;
  float v138;
  float v139;
  float v144;
  float v145;
  float v146;
  float v148;
  float v149;
  float v150;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v159;
  float v161;
  float v162;
  float v163;
  float v164;
  float v167;
  float v168;
  float v169;
  float v171;
  float v172;
  float v173;
  unsigned int v191;
  float v194;
  float v195;
  float v196;
  unsigned int v197;
  float v198;
  float v199;
  unsigned int v200;
  float v201;
  float v202;
  unsigned int v203;
  float v204;
  float v205;
  float v206;
  float v207;
  float v208;
  float v209;
  _WORD *v210;
  float v211;
  uint64_t v212;
  unint64_t v213;
  _WORD *v214;
  unsigned __int8 *v215;
  __int16 v216;
  uint64_t v217;
  uint64_t v218;
  float v219;
  float v220;
  float v221;
  float v222;
  float v223;
  float v224;
  float v225;
  float v226;
  float v227;
  float v228;
  float v229;
  float v230;
  float v231;
  float v232;
  float v233;
  float v234;
  float v235;
  float v236;
  float v237;
  float v238;
  float v239;
  float v240;
  float v241;
  float v242;
  float v243;
  float v244;
  float v245;
  float v246;
  float v247;
  float v248;

  v5 = *(_QWORD *)((char *)result + 28);
  v6 = 2 * *(unsigned __int8 *)result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)((char *)result + 20);
    v11 = *(_QWORD *)((char *)result + 36);
    v12 = *(_QWORD *)((char *)result + 44) + 2 * v7;
    v13 = 2 * v8 - 2 * v7;
    v14 = result[14];
    v15 = (uint64_t *)result[16];
    v16 = result[15] + 2 * (result[13] * a2 / v6);
    v17 = result[19];
    v18 = (_QWORD *)result[7];
    v19 = (uint64_t *)result[8];
    v20 = (uint64_t *)result[17];
    v21 = *v19;
    v22 = v19[1];
    v23 = v19[2];
    v218 = v18[2];
    v24 = (unsigned __int8 *)(v218 + v23 * v12 + v11);
    v25 = *v20;
    v26 = v20[1];
    v27 = v20[2];
    v217 = v15[2];
    v28 = (char *)(v217 + v27 * v16 + 2 * v14);
    *(float *)&v29 = 8191.0 / (float)*(unsigned int *)(v17 + 128);
    LOWORD(a5) = *(_WORD *)(v17 + 140);
    v30 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v17 + 142);
    v31 = (float)LODWORD(a5);
    v32 = *(float *)&v29 * *(float *)v17;
    v33 = *(float *)&v29 * *(float *)(v17 + 8);
    v34 = *(float *)&v29 * *(float *)(v17 + 16);
    v35 = *(float *)&v29 * *(float *)(v17 + 20);
    v36 = *(float *)&v29 * *(float *)(v17 + 28);
    LOWORD(v29) = *(_WORD *)(v17 + 144);
    v37 = (float)v29;
    LOWORD(v29) = *(_WORD *)(v17 + 146);
    v38 = (float)v29;
    LOWORD(v29) = *(_WORD *)(v17 + 148);
    v39 = (float)v29;
    LOWORD(v29) = *(_WORD *)(v17 + 150);
    *(float *)&v40 = (float)v29;
    v248 = *(float *)&v40;
    LOWORD(v40) = *(_WORD *)(v17 + 152);
    v41 = (float)v40;
    v240 = *(float *)(v17 + 40);
    v241 = *(float *)(v17 + 36);
    v238 = *(float *)(v17 + 48) * 0.25;
    v239 = *(float *)(v17 + 44);
    v236 = *(float *)(v17 + 56) * 0.25;
    v237 = *(float *)(v17 + 52) * 0.25;
    v234 = *(float *)(v17 + 64) * 0.25;
    v235 = *(float *)(v17 + 60) * 0.25;
    v42 = *(float *)(v17 + 72);
    v232 = *(float *)(v17 + 68) * 0.25;
    v233 = v42;
    v230 = *(float *)(v17 + 80);
    v231 = *(float *)(v17 + 76);
    v228 = *(float *)(v17 + 88);
    v229 = *(float *)(v17 + 84);
    v226 = *(float *)(v17 + 96);
    v227 = *(float *)(v17 + 92);
    v43 = *(float *)(v17 + 104);
    v224 = v43;
    v225 = *(float *)(v17 + 100);
    v44 = v17 + 164;
    result = (_QWORD *)(v17 + 16548);
    v45 = v18[1];
    v46 = (_BYTE *)(*v18 + v21 * v12 + v11);
    v47 = v45 + v22 * v12 + v11;
    if (!v45)
      v47 = 0;
    v48 = *(unsigned __int8 *)(v17 + 132);
    v49 = 16 - v48;
    _CF = v48 >= 0x11;
    v52 = *v15;
    v51 = v15[1];
    v53 = v52 + v25 * v16;
    if (_CF)
      v49 = 0;
    v54 = v51 + v20[1] * (v16 / 2);
    v55 = v17 + 32932;
    v56 = (char *)(v53 + 2 * v14);
    v57 = v54 + 2 * v14;
    v58 = v49;
    v59 = *(float *)(v17 + 108);
    v60 = *(float *)(v17 + 112);
    v62 = *(float *)(v17 + 116);
    v61 = *(float *)(v17 + 120);
    v246 = (float)LODWORD(a5);
    v247 = v30;
    v244 = v33;
    v245 = v32;
    v242 = v41;
    v243 = v38;
    v222 = v35;
    v223 = v36;
    v220 = v60;
    v221 = v34;
    v219 = v59;
    do
    {
      v63 = &v56[v25];
      v64 = v47 + v22;
      v65 = &v46[v21];
      if (v10)
      {
        v66 = 0;
        v67 = &v46[v21];
        v68 = &v56[v25];
        do
        {
          LOBYTE(v43) = *(_BYTE *)(v47 + v66 + 1);
          v69 = (float)LODWORD(v43) - v31;
          v70 = v33 * v69;
          LOBYTE(v42) = *v46;
          v71 = v32 * (float)((float)LODWORD(v42) - v30);
          v72 = (float)(v33 * v69) + v71;
          v73 = 8191.0;
          if (v72 <= 8191.0)
          {
            v73 = (float)(v33 * v69) + v71;
            if (v72 < 0.0)
              v73 = 0.0;
          }
          LOBYTE(v72) = *(_BYTE *)(v47 + v66);
          v74 = (float)LODWORD(v72) - v31;
          v75 = (float)(v35 * v69) + (float)(v74 * v34);
          v76 = 8191.0;
          if ((float)(v71 + v75) <= 8191.0)
          {
            v76 = v71 + v75;
            if ((float)(v71 + v75) < 0.0)
              v76 = 0.0;
          }
          v77 = v36 * v74;
          v78 = v77 + v71;
          v79 = 8191.0;
          if (v78 <= 8191.0)
          {
            v79 = v78;
            if (v78 < 0.0)
              v79 = 0.0;
          }
          LOBYTE(v78) = v46[1];
          v80 = v32 * (float)((float)LODWORD(v78) - v30);
          v81 = v70 + v80;
          v82 = 8191.0;
          if (v81 <= 8191.0)
          {
            v82 = v81;
            if (v81 < 0.0)
              v82 = 0.0;
          }
          v83 = 8191.0;
          if ((float)(v75 + v80) <= 8191.0)
          {
            v83 = v75 + v80;
            if ((float)(v75 + v80) < 0.0)
              v83 = 0.0;
          }
          v84 = v77 + v80;
          v85 = (float)(v77 + v80) <= 8191.0;
          v86 = 8191.0;
          if (v85)
          {
            v86 = v84;
            if (v84 < 0.0)
              v86 = 0.0;
          }
          LOBYTE(v84) = *(_BYTE *)(v64 + v66 + 1);
          *(float *)&v87 = (float)LODWORD(v84);
          v88 = *(float *)&v87 - v31;
          v89 = v33 * (float)(*(float *)&v87 - v31);
          LOBYTE(v87) = *v67;
          v90 = v32 * (float)((float)v87 - v30);
          v91 = 8191.0;
          if ((float)(v89 + v90) <= 8191.0)
          {
            v91 = v89 + v90;
            if ((float)(v89 + v90) < 0.0)
              v91 = 0.0;
          }
          LOBYTE(v41) = *(_BYTE *)(v64 + v66);
          v92 = (float)LODWORD(v41) - v31;
          v93 = (float)(v35 * v88) + (float)(v92 * v34);
          v94 = 8191.0;
          if ((float)(v90 + v93) <= 8191.0)
          {
            v94 = v90 + v93;
            if ((float)(v90 + v93) < 0.0)
              v94 = 0.0;
          }
          v95 = v36 * v92;
          v96 = v95 + v90;
          v85 = (float)(v95 + v90) <= 8191.0;
          v97 = 8191.0;
          if (v85)
          {
            v97 = v96;
            if (v96 < 0.0)
              v97 = 0.0;
          }
          LOBYTE(v77) = v67[1];
          v98 = v32 * (float)((float)LODWORD(v77) - v30);
          v99 = v89 + v98;
          v85 = (float)(v89 + v98) <= 8191.0;
          v100 = 8191.0;
          if (v85)
          {
            v100 = v99;
            if (v99 < 0.0)
              v100 = 0.0;
          }
          v101 = v93 + v98;
          v102 = 8191.0;
          if (v101 <= 8191.0)
          {
            v102 = v101;
            if (v101 < 0.0)
              v102 = 0.0;
          }
          v103 = v95 + v98;
          v104 = 8191.0;
          if (v103 <= 8191.0)
          {
            v104 = v103;
            if (v103 < 0.0)
              v104 = 0.0;
          }
          _H20 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S28, H20 }
          _H20 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          v111 = llroundf(fminf(fmaxf(v79, 0.0), 8191.0));
          __asm { FCVT            S19, H20 }
          _H20 = *(_WORD *)(v44 + 2 * v111);
          __asm { FCVT            S30, H20 }
          _H22 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          _H23 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          _H20 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          _H5 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          _H6 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          _H7 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v97, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v100, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v102, 0.0), 8191.0)));
          _H4 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v104, 0.0), 8191.0)));
          v124 = fmaxf(_S28, fmaxf(_S19, _S30));
          v125 = (float)((float)((float)(v60 * _S19) + (float)(v59 * _S28)) + (float)(v62 * _S30)) + (float)(v61 * v124);
          v126 = 8191.0;
          if (v125 <= 8191.0)
          {
            v126 = (float)((float)((float)(v60 * _S19) + (float)(v59 * _S28)) + (float)(v62 * _S30))
                 + (float)(v61 * v124);
            if (v125 < 0.0)
              v126 = 0.0;
          }
          __asm
          {
            FCVT            S3, H22
            FCVT            S17, H23
            FCVT            S21, H20
          }
          _H22 = *((_WORD *)result + llroundf(v126));
          v131 = (float)((float)((float)(v60 * _S17) + (float)(v59 * _S3)) + (float)(v62 * _S21))
               + (float)(v61 * fmaxf(_S3, fmaxf(_S17, _S21)));
          v132 = 8191.0;
          if (v131 <= 8191.0)
          {
            v132 = v131;
            if (v131 < 0.0)
              v132 = 0.0;
          }
          __asm
          {
            FCVT            S8, H5
            FCVT            S9, H6
            FCVT            S10, H7
          }
          _H5 = *((_WORD *)result + llroundf(v132));
          v137 = fmaxf(_S8, fmaxf(_S9, _S10));
          v138 = (float)((float)((float)(v60 * _S9) + (float)(v59 * _S8)) + (float)(v62 * _S10)) + (float)(v61 * v137);
          v139 = 8191.0;
          if (v138 <= 8191.0)
          {
            v139 = (float)((float)((float)(v60 * _S9) + (float)(v59 * _S8)) + (float)(v62 * _S10)) + (float)(v61 * v137);
            if (v138 < 0.0)
              v139 = 0.0;
          }
          __asm
          {
            FCVT            S23, H1
            FCVT            S29, H2
            FCVT            S31, H4
            FCVT            S1, H22
          }
          v144 = _S28 * _S1;
          v145 = _S19 * _S1;
          v146 = _S30 * _S1;
          __asm { FCVT            S1, H5 }
          v148 = _S3 * _S1;
          v149 = _S17 * _S1;
          v150 = _S21 * _S1;
          LOWORD(_S1) = *((_WORD *)result + llroundf(v139));
          __asm { FCVT            S2, H1 }
          v152 = _S8 * _S2;
          v153 = _S9 * _S2;
          v154 = _S10 * _S2;
          v155 = (float)((float)((float)(v60 * _S29) + (float)(v59 * _S23)) + (float)(v62 * _S31))
               + (float)(v61 * fmaxf(_S23, fmaxf(_S29, _S31)));
          v156 = 8191.0;
          if (v155 <= 8191.0)
          {
            v156 = v155;
            if (v155 < 0.0)
              v156 = 0.0;
          }
          _H17 = *((_WORD *)result + llroundf(v156));
          __asm { FCVT            S17, H17 }
          v159 = _S23 * _S17;
          _S22 = _S29 * _S17;
          v161 = _S31 * _S17;
          v162 = (float)((float)(v231 * v145) + (float)(v144 * v233)) + (float)(v146 * v230);
          v163 = (float)((float)(v228 * v145) + (float)(v144 * v229)) + (float)(v146 * v227);
          v164 = (float)((float)(v225 * v145) + (float)(v144 * v226)) + (float)(v146 * v224);
          _S19 = (float)((float)(v231 * v149) + (float)(v148 * v233)) + (float)(v150 * v230);
          _S20 = (float)((float)(v228 * v149) + (float)(v148 * v229)) + (float)(v150 * v227);
          v167 = (float)((float)(v225 * v149) + (float)(v148 * v226)) + (float)(v150 * v224);
          v168 = (float)((float)(v231 * v153) + (float)(v152 * v233)) + (float)(v154 * v230);
          v169 = (float)((float)(v228 * v153) + (float)(v152 * v229)) + (float)(v154 * v227);
          _S3 = (float)((float)(v225 * v153) + (float)(v152 * v226)) + (float)(v154 * v224);
          v171 = (float)((float)(v231 * _S22) + (float)(v159 * v233)) + (float)(v161 * v230);
          v172 = (float)((float)(v228 * _S22) + (float)(v159 * v229)) + (float)(v161 * v227);
          v173 = (float)((float)(v225 * _S22) + (float)(v159 * v226)) + (float)(v161 * v224);
          _H1 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v162, 0.0), 8191.0)));
          __asm { FCVT            S4, H1 }
          _H1 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v163, 0.0), 8191.0)));
          __asm { FCVT            S5, H1 }
          _H1 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v164, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0)));
          __asm
          {
            FCVT            S1, H1
            FCVT            S6, H2
          }
          _H2 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(_S20, 0.0), 8191.0)));
          __asm { FCVT            S17, H2 }
          _H2 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v167, 0.0), 8191.0)));
          __asm { FCVT            S7, H2 }
          _H2 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v168, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          LOWORD(_S19) = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v169, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          LOWORD(_S3) = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          LOWORD(_S20) = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v171, 0.0), 8191.0)));
          __asm
          {
            FCVT            S3, H3
            FCVT            S20, H20
          }
          LOWORD(_S22) = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v172, 0.0), 8191.0)));
          v191 = llroundf(fminf(fmaxf(v173, 0.0), 8191.0));
          __asm { FCVT            S21, H22 }
          LOWORD(_S22) = *(_WORD *)(v55 + 2 * v191);
          __asm { FCVT            S22, H22 }
          v194 = (float)((float)((float)(v240 * _S5) + (float)(v241 * _S4)) + (float)(v239 * _S1)) + v37;
          if (v194 < v37)
            v195 = v37;
          else
            v195 = (float)((float)((float)(v240 * _S5) + (float)(v241 * _S4)) + (float)(v239 * _S1)) + v37;
          v85 = v194 <= v39;
          v196 = (float)((float)((float)(v240 * _S17) + (float)(v241 * _S6)) + (float)(v239 * _S7)) + v37;
          if (!v85)
            v195 = v39;
          v197 = llroundf(v195);
          if (v196 < v37)
            v198 = v37;
          else
            v198 = (float)((float)((float)(v240 * _S17) + (float)(v241 * _S6)) + (float)(v239 * _S7)) + v37;
          v85 = v196 <= v39;
          v199 = (float)((float)((float)(v240 * _S19) + (float)(v241 * _S2)) + (float)(v239 * _S3)) + v37;
          if (!v85)
            v198 = v39;
          v200 = llroundf(v198);
          if (v199 < v37)
            v201 = v37;
          else
            v201 = (float)((float)((float)(v240 * _S19) + (float)(v241 * _S2)) + (float)(v239 * _S3)) + v37;
          v85 = v199 <= v39;
          v202 = (float)((float)((float)(v240 * _S21) + (float)(v241 * _S20)) + (float)(v239 * _S22)) + v37;
          if (!v85)
            v201 = v39;
          v203 = llroundf(v201);
          if (v202 < v37)
            v204 = v37;
          else
            v204 = (float)((float)((float)(v240 * _S21) + (float)(v241 * _S20)) + (float)(v239 * _S22)) + v37;
          if (v202 <= v39)
            v205 = v204;
          else
            v205 = v39;
          v206 = (float)((float)(_S4 + _S6) + _S2) + _S20;
          v207 = (float)((float)(_S5 + _S17) + _S19) + _S21;
          *(_WORD *)v56 = v197 << v58;
          *((_WORD *)v56 + 1) = v200 << v58;
          *(_WORD *)v68 = v203 << v58;
          *((_WORD *)v68 + 1) = llroundf(v205) << v58;
          v41 = v242;
          v208 = (float)((float)(_S1 + _S7) + _S3) + _S22;
          v209 = (float)((float)(v243 + (float)(v206 * v238)) + (float)(v207 * v237)) + (float)(v208 * v236);
          v42 = v242;
          if (v209 <= v242)
          {
            v42 = (float)((float)(v243 + (float)(v206 * v238)) + (float)(v207 * v237)) + (float)(v208 * v236);
            if (v209 < v248)
              v42 = v248;
          }
          v210 = (_WORD *)(v57 + 2 * v66);
          v211 = (float)((float)(v243 + (float)(v206 * v235)) + (float)(v207 * v234)) + (float)(v208 * v232);
          *v210 = llroundf(v42) << v58;
          v43 = v242;
          v31 = v246;
          v30 = v247;
          v33 = v244;
          v32 = v245;
          v34 = v221;
          v35 = v222;
          v36 = v223;
          if (v211 <= v242)
          {
            v43 = v211;
            if (v211 < v248)
              v43 = v248;
          }
          v46 += 2;
          v67 += 2;
          v56 += 4;
          v68 += 4;
          v210[1] = llroundf(v43) << v58;
          v66 += 2;
          v59 = v219;
          v60 = v220;
        }
        while (v10 > v66);
      }
      v46 = &v65[v21];
      v47 = v64 + v22;
      v56 = &v63[v25];
      v57 += v26;
      v9 += 2;
    }
    while (v13 > v9);
    if (v218 && v217)
    {
      v212 = 0;
      do
      {
        if (v10)
        {
          v213 = v10;
          v214 = v28;
          v215 = v24;
          do
          {
            v216 = *v215++;
            *v214++ = v216 | (v216 << 8);
            --v213;
          }
          while (v213);
        }
        v24 += v23;
        v28 += v27;
        ++v212;
      }
      while (v212 != v13);
    }
    else if (v217)
    {
      do
      {
        if (v10)
          result = memset(v28, 255, 2 * v10);
        v28 += v27;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Mat_TRC_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Mat_TRC_xf420_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_422vf_TRC_Mat_TRC_xf420_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  unsigned int v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  unsigned int v41;
  float v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  char *v50;
  char v51;
  uint64_t v52;
  char v53;
  char *v54;
  uint64_t v55;
  unsigned __int8 *v56;
  unint64_t v57;
  unsigned __int8 *v58;
  char *v59;
  unsigned int v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  BOOL v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v125;
  float v126;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  unsigned int v141;
  float v150;
  float v151;
  float v152;
  unsigned int v153;
  float v154;
  float v155;
  unsigned int v156;
  float v157;
  float v158;
  unsigned int v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  _WORD *v167;
  float v168;
  uint64_t v169;
  unint64_t v170;
  _WORD *v171;
  unsigned __int8 *v172;
  __int16 v173;
  uint64_t v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float v182;
  float v183;
  float v184;
  float v185;
  float v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float v198;
  float v199;

  v5 = *(_QWORD *)(result + 28);
  v6 = 2 * *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = *(_QWORD *)(result + 36);
    v12 = *(_QWORD *)(result + 44) + 2 * v7;
    v13 = 2 * v8 - 2 * v7;
    v14 = *((_QWORD *)result + 14);
    v15 = (_QWORD *)*((_QWORD *)result + 16);
    v16 = *((_QWORD *)result + 15) + 2 * (*((_QWORD *)result + 13) * a2 / v6);
    v17 = *((_QWORD *)result + 19);
    v18 = (_QWORD *)*((_QWORD *)result + 7);
    v19 = (uint64_t *)*((_QWORD *)result + 8);
    v20 = (uint64_t *)*((_QWORD *)result + 17);
    v21 = *v19;
    v22 = v19[1];
    v23 = v19[2];
    v174 = v18[2];
    v24 = (unsigned __int8 *)(v174 + v23 * v12 + v11);
    v25 = *v20;
    v26 = v20[1];
    v27 = v20[2];
    v28 = v15[2];
    v29 = (char *)(v28 + v27 * v16 + 2 * v14);
    *(float *)&v30 = 8191.0 / (float)*(unsigned int *)(v17 + 128);
    LOWORD(a5) = *(_WORD *)(v17 + 140);
    v31 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v17 + 142);
    v32 = (float)LODWORD(a5);
    v33 = *(float *)&v30 * *(float *)v17;
    v34 = *(float *)&v30 * *(float *)(v17 + 8);
    v35 = *(float *)&v30 * *(float *)(v17 + 16);
    v36 = *(float *)&v30 * *(float *)(v17 + 20);
    v37 = *(float *)&v30 * *(float *)(v17 + 28);
    LOWORD(v30) = *(_WORD *)(v17 + 144);
    v38 = (float)v30;
    LOWORD(v30) = *(_WORD *)(v17 + 146);
    v39 = (float)v30;
    LOWORD(v30) = *(_WORD *)(v17 + 148);
    v40 = (float)v30;
    LOWORD(v30) = *(_WORD *)(v17 + 150);
    *(float *)&v41 = (float)v30;
    v199 = *(float *)&v41;
    LOWORD(v41) = *(_WORD *)(v17 + 152);
    v42 = (float)v41;
    v192 = *(float *)(v17 + 40);
    v193 = *(float *)(v17 + 36);
    v190 = *(float *)(v17 + 48) * 0.25;
    v191 = *(float *)(v17 + 44);
    v188 = *(float *)(v17 + 56) * 0.25;
    v189 = *(float *)(v17 + 52) * 0.25;
    v186 = *(float *)(v17 + 64) * 0.25;
    v187 = *(float *)(v17 + 60) * 0.25;
    v184 = *(float *)(v17 + 68) * 0.25;
    v185 = *(float *)(v17 + 72);
    v182 = *(float *)(v17 + 80);
    v183 = *(float *)(v17 + 76);
    v180 = *(float *)(v17 + 88);
    v181 = *(float *)(v17 + 84);
    v178 = *(float *)(v17 + 96);
    v179 = *(float *)(v17 + 92);
    v43 = *(float *)(v17 + 104);
    v176 = v43;
    v177 = *(float *)(v17 + 100);
    v44 = v17 + 164;
    v45 = v18[1];
    result = (unsigned __int8 *)(*v18 + v21 * v12 + v11);
    v46 = v45 + v22 * v12 + v11;
    v47 = v17 + 16548;
    if (!v45)
      v46 = 0;
    v48 = *(unsigned __int8 *)(v17 + 132);
    v49 = v15[1];
    v50 = (char *)(*v15 + v25 * v16 + 2 * v14);
    if (v48 >= 0x11)
      v51 = 0;
    else
      v51 = 16 - v48;
    v52 = v49 + v26 * (v16 / 2) + 2 * v14;
    v53 = v51;
    v197 = v33;
    v198 = (float)LODWORD(a5);
    v195 = v39;
    v196 = v34;
    v194 = v42;
    v175 = v37;
    do
    {
      v54 = &v50[v25];
      v55 = v46 + v22;
      v56 = &result[v21];
      if (v10)
      {
        v57 = 0;
        v58 = &result[v21];
        v59 = &v50[v25];
        do
        {
          LOBYTE(v43) = *(_BYTE *)(v46 + v57 + 1);
          *(float *)&v60 = (float)LODWORD(v43);
          v61 = *(float *)&v60 - v32;
          v62 = v34 * (float)(*(float *)&v60 - v32);
          LOBYTE(v60) = *result;
          v63 = v33 * (float)((float)v60 - v31);
          v64 = v62 + v63;
          v65 = 8191.0;
          if ((float)(v62 + v63) <= 8191.0)
          {
            v65 = v62 + v63;
            if (v64 < 0.0)
              v65 = 0.0;
          }
          LOBYTE(v64) = *(_BYTE *)(v46 + v57);
          v66 = (float)LODWORD(v64) - v32;
          v67 = (float)(v36 * v61) + (float)(v66 * v35);
          v68 = 8191.0;
          if ((float)(v63 + v67) <= 8191.0)
          {
            v68 = v63 + v67;
            if ((float)(v63 + v67) < 0.0)
              v68 = 0.0;
          }
          v69 = v37 * v66;
          v70 = v69 + v63;
          v71 = 8191.0;
          if (v70 <= 8191.0)
          {
            v71 = v70;
            if (v70 < 0.0)
              v71 = 0.0;
          }
          LOBYTE(v70) = result[1];
          v72 = v33 * (float)((float)LODWORD(v70) - v31);
          v73 = 8191.0;
          if ((float)(v62 + v72) <= 8191.0)
          {
            v73 = v62 + v72;
            if ((float)(v62 + v72) < 0.0)
              v73 = 0.0;
          }
          v74 = v67 + v72;
          v75 = 8191.0;
          if ((float)(v67 + v72) <= 8191.0)
          {
            v75 = v67 + v72;
            if (v74 < 0.0)
              v75 = 0.0;
          }
          v76 = v69 + v72;
          v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            v77 = v76;
            if (v76 < 0.0)
              v77 = 0.0;
          }
          LOBYTE(v74) = *(_BYTE *)(v55 + v57 + 1);
          v78 = (float)LODWORD(v74) - v32;
          v79 = v34 * v78;
          LOBYTE(v62) = *v58;
          v80 = v33 * (float)((float)LODWORD(v62) - v31);
          v81 = 8191.0;
          if ((float)((float)(v34 * v78) + v80) <= 8191.0)
          {
            v81 = (float)(v34 * v78) + v80;
            if (v81 < 0.0)
              v81 = 0.0;
          }
          LOBYTE(v76) = *(_BYTE *)(v55 + v57);
          v82 = (float)LODWORD(v76) - v32;
          v83 = (float)(v36 * v78) + (float)(v82 * v35);
          v84 = 8191.0;
          if ((float)(v80 + v83) <= 8191.0)
          {
            v84 = v80 + v83;
            if ((float)(v80 + v83) < 0.0)
              v84 = 0.0;
          }
          v85 = v37 * v82;
          v86 = v85 + v80;
          v87 = (float)(v85 + v80) <= 8191.0;
          v88 = 8191.0;
          if (v87)
          {
            v88 = v86;
            if (v86 < 0.0)
              v88 = 0.0;
          }
          LOBYTE(v34) = v58[1];
          v89 = v33 * (float)((float)LODWORD(v34) - v31);
          v90 = v79 + v89;
          v87 = (float)(v79 + v89) <= 8191.0;
          v91 = 8191.0;
          if (v87)
          {
            v91 = v90;
            if (v90 < 0.0)
              v91 = 0.0;
          }
          v92 = v83 + v89;
          v93 = 8191.0;
          if (v92 <= 8191.0)
          {
            v93 = v92;
            if (v92 < 0.0)
              v93 = 0.0;
          }
          v94 = v31;
          v95 = v85 + v89;
          v96 = 8191.0;
          if (v95 <= 8191.0)
          {
            v96 = v95;
            if (v95 < 0.0)
              v96 = 0.0;
          }
          _H1 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v65, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          _H2 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v68, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H24 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          _H25 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm
          {
            FCVT            S24, H24
            FCVT            S25, H25
          }
          _H26 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          _H19 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          _H4 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H5 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          _H6 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          __asm
          {
            FCVT            S5, H5
            FCVT            S6, H6
          }
          _H7 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          _H17 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v96, 0.0), 8191.0)));
          __asm { FCVT            S17, H17 }
          v125 = (float)((float)(v183 * _S2) + (float)(_S1 * v185)) + (float)(_S24 * v182);
          v126 = (float)((float)(v180 * _S2) + (float)(_S1 * v181)) + (float)(_S24 * v179);
          _S1 = (float)((float)(v177 * _S2) + (float)(_S1 * v178)) + (float)(_S24 * v176);
          _S2 = (float)((float)(v183 * _S26) + (float)(_S25 * v185)) + (float)(_S27 * v182);
          _S3 = (float)((float)(v180 * _S26) + (float)(_S25 * v181)) + (float)(_S27 * v179);
          v130 = (float)((float)(v177 * _S26) + (float)(_S25 * v178)) + (float)(_S27 * v176);
          v131 = (float)((float)(v183 * _S4) + (float)(_S19 * v185)) + (float)(_S5 * v182);
          v132 = (float)((float)(v180 * _S4) + (float)(_S19 * v181)) + (float)(_S5 * v179);
          v133 = (float)((float)(v177 * _S4) + (float)(_S19 * v178)) + (float)(_S5 * v176);
          v134 = (float)((float)(v183 * _S7) + (float)(_S6 * v185)) + (float)(_S17 * v182);
          v135 = (float)((float)(v180 * _S7) + (float)(_S6 * v181)) + (float)(_S17 * v179);
          v136 = (float)((float)(v177 * _S7) + (float)(_S6 * v178)) + (float)(_S17 * v176);
          LOWORD(_S4) = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v125, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          LOWORD(_S5) = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v126, 0.0), 8191.0)));
          __asm { FCVT            S19, H5 }
          LOWORD(_S1) = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          LOWORD(_S2) = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(_S2, 0.0), 8191.0)));
          __asm
          {
            FCVT            S5, H1
            FCVT            S24, H2
          }
          LOWORD(_S1) = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          v141 = llroundf(fminf(fmaxf(v130, 0.0), 8191.0));
          __asm { FCVT            S25, H1 }
          LOWORD(_S1) = *(_WORD *)(v47 + 2 * v141);
          __asm { FCVT            S6, H1 }
          LOWORD(_S1) = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v131, 0.0), 8191.0)));
          __asm { FCVT            S7, H1 }
          LOWORD(_S1) = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v132, 0.0), 8191.0)));
          __asm { FCVT            S26, H1 }
          LOWORD(_S1) = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v133, 0.0), 8191.0)));
          LOWORD(_S2) = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v134, 0.0), 8191.0)));
          __asm
          {
            FCVT            S27, H1
            FCVT            S1, H2
          }
          LOWORD(_S2) = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v135, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          LOWORD(_S3) = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v136, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          v150 = (float)((float)((float)(v192 * _S19) + (float)(v193 * _S4)) + (float)(v191 * _S5)) + v38;
          if (v150 < v38)
            v151 = v38;
          else
            v151 = (float)((float)((float)(v192 * _S19) + (float)(v193 * _S4)) + (float)(v191 * _S5)) + v38;
          v87 = v150 <= v40;
          v152 = (float)((float)((float)(v192 * _S25) + (float)(v193 * _S24)) + (float)(v191 * _S6)) + v38;
          if (!v87)
            v151 = v40;
          v153 = llroundf(v151);
          if (v152 < v38)
            v154 = v38;
          else
            v154 = (float)((float)((float)(v192 * _S25) + (float)(v193 * _S24)) + (float)(v191 * _S6)) + v38;
          v87 = v152 <= v40;
          v155 = (float)((float)((float)(v192 * _S26) + (float)(v193 * _S7)) + (float)(v191 * _S27)) + v38;
          if (!v87)
            v154 = v40;
          v156 = llroundf(v154);
          if (v155 < v38)
            v157 = v38;
          else
            v157 = (float)((float)((float)(v192 * _S26) + (float)(v193 * _S7)) + (float)(v191 * _S27)) + v38;
          v87 = v155 <= v40;
          v158 = (float)((float)((float)(v192 * _S2) + (float)(v193 * _S1)) + (float)(v191 * _S3)) + v38;
          if (!v87)
            v157 = v40;
          v159 = llroundf(v157);
          if (v158 < v38)
            v160 = v38;
          else
            v160 = (float)((float)((float)(v192 * _S2) + (float)(v193 * _S1)) + (float)(v191 * _S3)) + v38;
          if (v158 <= v40)
            v161 = v160;
          else
            v161 = v40;
          v162 = (float)((float)(_S4 + _S24) + _S7) + _S1;
          v163 = (float)((float)(_S19 + _S25) + _S26) + _S2;
          *(_WORD *)v50 = v153 << v53;
          *((_WORD *)v50 + 1) = v156 << v53;
          *(_WORD *)v59 = v159 << v53;
          *((_WORD *)v59 + 1) = llroundf(v161) << v53;
          v164 = (float)((float)(_S5 + _S6) + _S27) + _S3;
          v165 = (float)((float)(v195 + (float)(v162 * v190)) + (float)(v163 * v189)) + (float)(v164 * v188);
          v166 = v194;
          if (v165 <= v194)
          {
            v166 = (float)((float)(v195 + (float)(v162 * v190)) + (float)(v163 * v189)) + (float)(v164 * v188);
            if (v165 < v199)
              v166 = v199;
          }
          v167 = (_WORD *)(v52 + 2 * v57);
          v168 = (float)((float)(v195 + (float)(v162 * v187)) + (float)(v163 * v186)) + (float)(v164 * v184);
          *v167 = llroundf(v166) << v53;
          v43 = v194;
          v31 = v94;
          v32 = v198;
          v34 = v196;
          v37 = v175;
          if (v168 <= v194)
          {
            v43 = v168;
            if (v168 < v199)
              v43 = v199;
          }
          result += 2;
          v58 += 2;
          v50 += 4;
          v59 += 4;
          v167[1] = llroundf(v43) << v53;
          v57 += 2;
          v33 = v197;
        }
        while (v10 > v57);
      }
      result = &v56[v21];
      v46 = v55 + v22;
      v50 = &v54[v25];
      v52 += v26;
      v9 += 2;
    }
    while (v13 > v9);
    if (v174 && v28)
    {
      v169 = 0;
      do
      {
        if (v10)
        {
          v170 = v10;
          v171 = v29;
          v172 = v24;
          do
          {
            v173 = *v172++;
            *v171++ = v173 | (v173 << 8);
            --v170;
          }
          while (v170);
        }
        v24 += v23;
        v29 += v27;
        ++v169;
      }
      while (v169 != v13);
    }
    else if (v28)
    {
      do
      {
        if (v10)
          result = (unsigned __int8 *)memset(v29, 255, 2 * v10);
        v29 += v27;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_rgb_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_rgb_xf420_GCD);
  return 0;
}

char *vt_Copy_422vf_rgb_xf420_GCD(char *result, uint64_t a2)
{
  float v2;
  float v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  char *v33;
  unsigned int v34;
  unsigned int v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  unsigned int v56;
  uint64_t v57;
  char *v58;
  char v59;
  uint64_t v60;
  char v61;
  char *v62;
  char *v63;
  _BYTE *v64;
  unint64_t v65;
  _BYTE *v66;
  char *v67;
  unsigned int v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  _WORD *v105;
  uint64_t v106;
  unint64_t v107;
  _WORD *v108;
  unsigned __int8 *v109;
  __int16 v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;

  v6 = *(_QWORD *)(result + 28);
  v7 = 2 * *result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (2 * v9 != 2 * v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)(result + 20);
    v12 = *(_QWORD *)(result + 36);
    v13 = *(_QWORD *)(result + 44) + 2 * v8;
    v14 = 2 * v9 - 2 * v8;
    v15 = *((_QWORD *)result + 14);
    v16 = (_QWORD *)*((_QWORD *)result + 16);
    v17 = *((_QWORD *)result + 15) + 2 * (*((_QWORD *)result + 13) * a2 / v7);
    v18 = *((_QWORD *)result + 19);
    v20 = (_QWORD *)*((_QWORD *)result + 7);
    v19 = (uint64_t *)*((_QWORD *)result + 8);
    v21 = (uint64_t *)*((_QWORD *)result + 17);
    v22 = *v19;
    v23 = v19[1];
    v24 = v19[2];
    v25 = v20[1];
    v26 = v20[2];
    v27 = (unsigned __int8 *)(v26 + v24 * v13 + v12);
    v28 = *v21;
    v29 = v21[1];
    v30 = v21[2];
    v31 = v16[2];
    v32 = (_BYTE *)(*v20 + v22 * v13 + v12);
    result = (char *)(v25 + v23 * v13 + v12);
    v33 = (char *)(v31 + v30 * v17 + 2 * v15);
    *(float *)&v34 = (float)*(unsigned int *)(v18 + 128);
    *(float *)&v35 = (float)*(unsigned int *)(v18 + 136);
    v36 = *(float *)&v35 / *(float *)&v34;
    LOWORD(v34) = *(_WORD *)(v18 + 140);
    v37 = (float)v34;
    LOWORD(v35) = *(_WORD *)(v18 + 142);
    v38 = (float)v35;
    v39 = v36 * *(float *)v18;
    v40 = v36 * *(float *)(v18 + 8);
    v41 = v36 * *(float *)(v18 + 16);
    v42 = v36 * *(float *)(v18 + 20);
    v43 = *(float *)(v18 + 28);
    v44 = v36 * v43;
    LOWORD(v43) = *(_WORD *)(v18 + 144);
    v45 = (float)LODWORD(v43);
    LOWORD(v4) = *(_WORD *)(v18 + 146);
    v46 = (float)v4;
    LOWORD(v5) = *(_WORD *)(v18 + 148);
    v47 = (float)v5;
    LOWORD(v5) = *(_WORD *)(v18 + 150);
    v48 = (float)v5;
    LOWORD(v5) = *(_WORD *)(v18 + 152);
    v49 = (float)v5;
    v50 = *(float *)(v18 + 36);
    v51 = *(float *)(v18 + 40);
    v52 = *(float *)(v18 + 44);
    v53 = 0.25;
    v114 = *(float *)(v18 + 52) * 0.25;
    v115 = *(float *)(v18 + 48) * 0.25;
    v112 = *(float *)(v18 + 60) * 0.25;
    v113 = *(float *)(v18 + 56) * 0.25;
    v111 = *(float *)(v18 + 64) * 0.25;
    v54 = *(float *)(v18 + 68);
    v55 = v54 * 0.25;
    if (!v25)
      result = 0;
    v56 = *(unsigned __int8 *)(v18 + 132);
    v57 = v16[1];
    v58 = (char *)(*v16 + v28 * v17 + 2 * v15);
    if (v56 >= 0x11)
      v59 = 0;
    else
      v59 = 16 - v56;
    v60 = v57 + v29 * (v17 / 2) + 2 * v15;
    v61 = v59;
    do
    {
      v62 = &v58[v28];
      v63 = &result[v23];
      v64 = &v32[v22];
      if (v11)
      {
        v65 = 0;
        v66 = &v32[v22];
        v67 = &v58[v28];
        do
        {
          LOBYTE(v54) = result[v65];
          *(float *)&v68 = (float)LODWORD(v54) - v38;
          LOBYTE(v53) = result[v65 + 1];
          v69 = (float)LODWORD(v53) - v38;
          v70 = v40 * v69;
          v71 = (float)(v42 * v69) + (float)(*(float *)&v68 * v41);
          v72 = v44 * *(float *)&v68;
          LOBYTE(v68) = *v32;
          v73 = v39 * (float)((float)v68 - v37);
          v74 = v70 + v73;
          v75 = v73 + v71;
          v76 = v72 + v73;
          v77 = (float)((float)((float)(v51 * (float)(v73 + v71)) + (float)(v50 * (float)(v70 + v73)))
                      + (float)(v52 * (float)(v72 + v73)))
              + v45;
          v78 = v47;
          if (v77 <= v47)
          {
            v78 = v77;
            if (v77 < v45)
              v78 = v45;
          }
          LOBYTE(v77) = v32[1];
          v79 = v39 * (float)((float)LODWORD(v77) - v37);
          v80 = v70 + v79;
          v81 = v71 + v79;
          v82 = v72 + v79;
          LOBYTE(v72) = v63[v65];
          LOBYTE(v71) = v63[v65 + 1];
          LOBYTE(v2) = *v66;
          LOBYTE(v3) = v66[1];
          v83 = (float)((float)((float)(v51 * v81) + (float)(v50 * v80)) + (float)(v52 * v82)) + v45;
          *(_WORD *)v58 = llroundf(v78) << v61;
          v84 = v47;
          if (v83 <= v47)
          {
            v84 = (float)((float)((float)(v51 * v81) + (float)(v50 * v80)) + (float)(v52 * v82)) + v45;
            if (v83 < v45)
              v84 = v45;
          }
          v85 = (float)LODWORD(v72) - v38;
          v86 = (float)LODWORD(v71) - v38;
          v87 = v40 * v86;
          v88 = (float)(v42 * v86) + (float)(v85 * v41);
          v89 = v44 * v85;
          v90 = v39 * (float)((float)LODWORD(v2) - v37);
          v91 = v87 + v90;
          v92 = v90 + v88;
          v2 = v89 + v90;
          v93 = (float)((float)((float)(v51 * (float)(v90 + v88)) + (float)(v50 * (float)(v87 + v90)))
                      + (float)(v52 * (float)(v89 + v90)))
              + v45;
          *((_WORD *)v58 + 1) = llroundf(v84) << v61;
          v94 = v47;
          if (v93 <= v47)
          {
            v94 = v93;
            if (v93 < v45)
              v94 = v45;
          }
          v95 = v39 * (float)((float)LODWORD(v3) - v37);
          v96 = v87 + v95;
          v97 = v88 + v95;
          v3 = v89 + v95;
          v98 = (float)((float)((float)(v51 * v97) + (float)(v50 * (float)(v87 + v95)))
                      + (float)(v52 * (float)(v89 + v95)))
              + v45;
          *(_WORD *)v67 = llroundf(v94) << v61;
          v99 = v47;
          if (v98 <= v47)
          {
            v99 = v98;
            if (v98 < v45)
              v99 = v45;
          }
          *((_WORD *)v67 + 1) = llroundf(v99) << v61;
          v100 = (float)((float)(v74 + v80) + v91) + v96;
          v101 = (float)((float)(v75 + v81) + v92) + v97;
          v102 = (float)((float)(v76 + v82) + v2) + v3;
          v103 = (float)((float)(v46 + (float)(v100 * v115)) + (float)(v101 * v114)) + (float)(v102 * v113);
          v104 = v49;
          if (v103 <= v49)
          {
            v104 = (float)((float)(v46 + (float)(v100 * v115)) + (float)(v101 * v114)) + (float)(v102 * v113);
            if (v103 < v48)
              v104 = v48;
          }
          v105 = (_WORD *)(v60 + 2 * v65);
          v53 = (float)((float)(v46 + (float)(v100 * v112)) + (float)(v101 * v111)) + (float)(v102 * v55);
          *v105 = llroundf(v104) << v61;
          v54 = v49;
          if (v53 <= v49)
          {
            v54 = v53;
            if (v53 < v48)
              v54 = v48;
          }
          v32 += 2;
          v66 += 2;
          v58 += 4;
          v67 += 4;
          v105[1] = llroundf(v54) << v61;
          v65 += 2;
        }
        while (v11 > v65);
      }
      v32 = &v64[v22];
      result = &v63[v23];
      v58 = &v62[v28];
      v60 += v29;
      v10 += 2;
    }
    while (v14 > v10);
    if (v26 && v31)
    {
      v106 = 0;
      do
      {
        if (v11)
        {
          v107 = v11;
          v108 = v33;
          v109 = v27;
          do
          {
            v110 = *v109++;
            *v108++ = v110 | (v110 << 8);
            --v107;
          }
          while (v107);
        }
        v27 += v24;
        v33 += v30;
        ++v106;
      }
      while (v106 != v14);
    }
    else if (v31)
    {
      do
      {
        if (v11)
          result = (char *)memset(v33, 255, 2 * v11);
        v33 += v30;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Tone_Mat_TRC_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v20 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v18 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Tone_Mat_TRC_422vf_GCD);
  return 0;
}

_QWORD *vt_Copy_422vf_TRC_Tone_Mat_TRC_422vf_GCD(_QWORD *result, uint64_t a2, double a3, float a4, double a5, float a6)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  float v33;
  float v34;
  float v35;
  unsigned int v36;
  float v37;
  float v38;
  float v39;
  unsigned int v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  _BYTE *v67;
  float v68;
  float v69;
  float v70;
  float v71;
  size_t v72;
  _BYTE *v73;
  _BYTE *v74;
  float v75;
  unsigned int v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  BOOL v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v108;
  float v109;
  float v110;
  float v115;
  float v116;
  float v118;
  float v119;
  float v120;
  float v125;
  float v126;
  float v127;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;

  v6 = *(_QWORD *)((char *)result + 28);
  v7 = *(unsigned __int8 *)result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)((char *)result + 20);
    v12 = *(_QWORD *)((char *)result + 36);
    v13 = v8 + *(_QWORD *)((char *)result + 44);
    v14 = v9 - v8;
    v15 = result[14];
    v16 = result[13] * a2 / v7;
    v17 = (_QWORD *)result[16];
    v18 = v16 + result[15];
    v19 = result[19];
    v20 = (_QWORD *)result[7];
    v21 = (uint64_t *)result[8];
    v22 = (uint64_t *)result[17];
    v23 = *v21;
    v24 = v21[1];
    v25 = v21[2];
    v26 = v20[2];
    v27 = (char *)(v26 + v25 * v13 + v12);
    v28 = *v22;
    v29 = v22[1];
    v30 = v22[2];
    v31 = v17[2];
    v32 = (char *)(v31 + v30 * v18 + v15);
    LOWORD(a4) = *(_WORD *)(v19 + 140);
    LOWORD(a6) = *(_WORD *)(v19 + 142);
    v33 = 8191.0 / (float)*(unsigned int *)(v19 + 128);
    v34 = (float)LODWORD(a6);
    v160 = v33 * *(float *)v19;
    v161 = (float)LODWORD(a4);
    v157 = v33 * *(float *)(v19 + 16);
    v158 = v33 * *(float *)(v19 + 8);
    v35 = v33 * *(float *)(v19 + 20);
    *(float *)&v36 = v33 * *(float *)(v19 + 28);
    v155 = *(float *)&v36;
    v156 = v35;
    LOWORD(v36) = *(_WORD *)(v19 + 144);
    v37 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v19 + 146);
    v38 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v19 + 148);
    v39 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v19 + 150);
    *(float *)&v40 = (float)v36;
    v159 = *(float *)&v40;
    LOWORD(v40) = *(_WORD *)(v19 + 152);
    v41 = (float)v40;
    v42 = *(float *)(v19 + 36);
    v43 = *(float *)(v19 + 40);
    v44 = *(float *)(v19 + 44);
    v153 = *(float *)(v19 + 52) * 0.5;
    v154 = *(float *)(v19 + 48) * 0.5;
    v151 = *(float *)(v19 + 60) * 0.5;
    v152 = *(float *)(v19 + 56) * 0.5;
    v45 = *(float *)(v19 + 72);
    v46 = *(float *)(v19 + 68) * 0.5;
    v149 = v46;
    v150 = *(float *)(v19 + 64) * 0.5;
    v48 = *(float *)(v19 + 76);
    v47 = *(float *)(v19 + 80);
    v49 = *(float *)(v19 + 84);
    v50 = *(float *)(v19 + 88);
    v51 = *(float *)(v19 + 92);
    v52 = *(float *)(v19 + 96);
    v53 = *(float *)(v19 + 100);
    v54 = *(float *)(v19 + 104);
    v55 = v19 + 164;
    v56 = v19 + 16548;
    v57 = v17[1];
    _ZF = v57 == 0;
    v59 = v57 + v29 * v18;
    v60 = *v17 + v28 * v18;
    v61 = v19 + 32932;
    result = (_QWORD *)(v59 + v15);
    if (_ZF)
      result = 0;
    v62 = (_BYTE *)(v60 + v15);
    v65 = v20;
    v64 = *v20;
    v63 = v65[1];
    _ZF = v63 == 0;
    v66 = v63 + v24 * v13 + v12;
    if (_ZF)
      v66 = 0;
    v67 = (_BYTE *)(v64 + v23 * v13 + v12);
    v69 = *(float *)(v19 + 108);
    v68 = *(float *)(v19 + 112);
    v70 = *(float *)(v19 + 116);
    v71 = *(float *)(v19 + 120);
    do
    {
      if (v11)
      {
        v72 = 0;
        v73 = v67;
        v74 = v62;
        do
        {
          LOBYTE(v46) = *(_BYTE *)(v66 + v72 + 1);
          v75 = (float)LODWORD(v46) - v34;
          v76 = LODWORD(v158);
          v77 = v158 * v75;
          LOBYTE(v76) = *v73;
          v78 = v160 * (float)((float)v76 - v161);
          v79 = (float)(v158 * v75) + v78;
          v80 = 8191.0;
          if (v79 <= 8191.0)
          {
            v80 = (float)(v158 * v75) + v78;
            if (v79 < 0.0)
              v80 = 0.0;
          }
          LOBYTE(v79) = *(_BYTE *)(v66 + v72);
          v81 = v34;
          v82 = (float)LODWORD(v79) - v34;
          v83 = (float)(v156 * v75) + (float)(v82 * v157);
          v84 = 8191.0;
          if ((float)(v78 + v83) <= 8191.0)
          {
            v84 = v78 + v83;
            if ((float)(v78 + v83) < 0.0)
              v84 = 0.0;
          }
          v85 = v155 * v82;
          v86 = v85 + v78;
          v87 = (float)(v85 + v78) <= 8191.0;
          v88 = 8191.0;
          if (v87)
          {
            v88 = v86;
            if (v86 < 0.0)
              v88 = 0.0;
          }
          LOBYTE(v86) = v73[1];
          v89 = v160 * (float)((float)LODWORD(v86) - v161);
          v90 = v77 + v89;
          v87 = (float)(v77 + v89) <= 8191.0;
          v91 = 8191.0;
          if (v87)
          {
            v91 = v90;
            if (v90 < 0.0)
              v91 = 0.0;
          }
          v92 = v83 + v89;
          v87 = (float)(v83 + v89) <= 8191.0;
          v93 = 8191.0;
          if (v87)
          {
            v93 = v92;
            if (v92 < 0.0)
              v93 = 0.0;
          }
          v94 = v85 + v89;
          v87 = (float)(v85 + v89) <= 8191.0;
          v95 = 8191.0;
          if (v87)
          {
            v95 = v94;
            if (v94 < 0.0)
              v95 = 0.0;
          }
          _H0 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S24, H0 }
          _H0 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm { FCVT            S25, H0 }
          _H0 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          __asm { FCVT            S26, H0 }
          _H19 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          _H28 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v95, 0.0), 8191.0)));
          v108 = fmaxf(_S24, fmaxf(_S25, _S26));
          v109 = (float)((float)((float)(v68 * _S25) + (float)(v69 * _S24)) + (float)(v70 * _S26)) + (float)(v71 * v108);
          v110 = 8191.0;
          if (v109 <= 8191.0)
          {
            v110 = (float)((float)((float)(v68 * _S25) + (float)(v69 * _S24)) + (float)(v70 * _S26))
                 + (float)(v71 * v108);
            if (v109 < 0.0)
              v110 = 0.0;
          }
          __asm
          {
            FCVT            S27, H19
            FCVT            S28, H28
            FCVT            S30, H30
          }
          _H19 = *(_WORD *)(v56 + 2 * llroundf(v110));
          v115 = (float)((float)((float)(v68 * _S28) + (float)(v69 * _S27)) + (float)(v70 * _S30))
               + (float)(v71 * fmaxf(_S27, fmaxf(_S28, _S30)));
          v116 = 8191.0;
          if (v115 <= 8191.0)
          {
            v116 = v115;
            if (v115 < 0.0)
              v116 = 0.0;
          }
          __asm { FCVT            S0, H19 }
          v118 = _S24 * _S0;
          v119 = _S25 * _S0;
          v120 = _S26 * _S0;
          _H1 = *(_WORD *)(v56 + 2 * llroundf(v116));
          __asm { FCVT            S1, H1 }
          _S25 = _S27 * _S1;
          _S26 = _S28 * _S1;
          v125 = _S30 * _S1;
          v126 = (float)((float)(v48 * v119) + (float)(v118 * v45)) + (float)(v120 * v47);
          v127 = (float)((float)(v50 * v119) + (float)(v118 * v49)) + (float)(v120 * v51);
          _S0 = (float)((float)(v53 * v119) + (float)(v118 * v52)) + (float)(v120 * v54);
          _S19 = (float)((float)(v48 * _S26) + (float)(_S25 * v45)) + (float)(v125 * v47);
          _S24 = (float)((float)(v50 * _S26) + (float)(_S25 * v49)) + (float)(v125 * v51);
          _S1 = (float)((float)(v53 * _S26) + (float)(_S25 * v52)) + (float)(v125 * v54);
          LOWORD(_S25) = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v126, 0.0), 8191.0)));
          LOWORD(_S26) = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v127, 0.0), 8191.0)));
          __asm
          {
            FCVT            S25, H25
            FCVT            S26, H26
          }
          LOWORD(_S0) = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          LOWORD(_S19) = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          LOWORD(_S24) = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(_S24, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          LOWORD(_S1) = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          v138 = (float)((float)((float)(v43 * _S26) + (float)(v42 * _S25)) + (float)(v44 * _S0)) + v37;
          v139 = (float)((float)((float)(v43 * _S24) + (float)(v42 * _S19)) + (float)(v44 * _S1)) + v37;
          if (v138 < v37)
            v140 = v37;
          else
            v140 = (float)((float)((float)(v43 * _S26) + (float)(v42 * _S25)) + (float)(v44 * _S0)) + v37;
          if (v138 <= v39)
            v141 = v140;
          else
            v141 = v39;
          *v74 = llroundf(v141);
          if (v139 < v37)
            v142 = v37;
          else
            v142 = (float)((float)((float)(v43 * _S24) + (float)(v42 * _S19)) + (float)(v44 * _S1)) + v37;
          if (v139 > v39)
            v142 = v39;
          v74[1] = llroundf(v142);
          v143 = _S25 + _S19;
          v144 = _S26 + _S24;
          v145 = _S0 + _S1;
          v146 = (float)((float)(v38 + (float)(v143 * v154)) + (float)(v144 * v153))
               + (float)((float)(_S0 + _S1) * v152);
          v147 = v41;
          if (v146 <= v41)
          {
            v147 = v146;
            if (v146 < v159)
              v147 = v159;
          }
          v148 = (float)((float)(v38 + (float)(v143 * v151)) + (float)(v144 * v150)) + (float)(v145 * v149);
          *((_BYTE *)result + v72) = llroundf(v147);
          v46 = v41;
          if (v148 <= v41)
          {
            v46 = v148;
            if (v148 < v159)
              v46 = v159;
          }
          *((_BYTE *)result + v72 + 1) = llroundf(v46);
          v72 += 2;
          v73 += 2;
          v74 += 2;
          v34 = v81;
        }
        while (v11 > v72);
      }
      v67 += v23;
      v66 += v24;
      v62 += v28;
      result = (_QWORD *)((char *)result + v29);
      ++v10;
    }
    while (v10 != v14);
    if (v26 && v31)
    {
      do
      {
        result = memcpy(v32, v27, v11);
        v27 += v25;
        v32 += v30;
        --v14;
      }
      while (v14);
    }
    else if (v31)
    {
      do
      {
        if (v11)
          result = memset(v32, 255, v11);
        v32 += v30;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Mat_TRC_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v20 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v18 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Mat_TRC_422vf_GCD);
  return 0;
}

_QWORD *vt_Copy_422vf_TRC_Mat_TRC_422vf_GCD(_QWORD *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  float v32;
  float v33;
  float v34;
  float v35;
  unsigned int v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  size_t v65;
  _BYTE *v66;
  _BYTE *v67;
  float v68;
  unsigned int v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  BOOL v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v104;
  float v105;
  float v109;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;

  v6 = *(_QWORD *)((char *)result + 28);
  v7 = *(unsigned __int8 *)result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)((char *)result + 20);
    v12 = *(_QWORD *)((char *)result + 36);
    v13 = v8 + *(_QWORD *)((char *)result + 44);
    v14 = v9 - v8;
    v15 = result[14];
    v16 = (uint64_t *)result[16];
    v17 = result[13] * a2 / v7 + result[15];
    v18 = result[19];
    v19 = (uint64_t *)result[7];
    v20 = (uint64_t *)result[8];
    v21 = (uint64_t *)result[17];
    v22 = *v20;
    v23 = v20[1];
    v24 = v20[2];
    v25 = v19[2];
    v26 = (char *)(v25 + v24 * v13 + v12);
    v27 = *v21;
    v28 = v21[1];
    v29 = v21[2];
    v30 = v16[2];
    v31 = (char *)(v30 + v29 * v17 + v15);
    LOWORD(a5) = *(_WORD *)(v18 + 140);
    LOWORD(a6) = *(_WORD *)(v18 + 142);
    v32 = 8191.0 / (float)*(unsigned int *)(v18 + 128);
    v33 = (float)LODWORD(a5);
    v34 = (float)LODWORD(a6);
    v35 = v32 * *(float *)v18;
    v134 = v32 * *(float *)(v18 + 16);
    v135 = v32 * *(float *)(v18 + 8);
    v132 = v32 * *(float *)(v18 + 28);
    *(float *)&v36 = v132;
    v133 = v32 * *(float *)(v18 + 20);
    LOWORD(v36) = *(_WORD *)(v18 + 144);
    v37 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v18 + 146);
    v38 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v18 + 148);
    v39 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v18 + 150);
    v40 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v18 + 152);
    v41 = (float)v36;
    v42 = *(float *)(v18 + 36);
    v43 = *(float *)(v18 + 40);
    v44 = *(float *)(v18 + 44);
    v130 = *(float *)(v18 + 52) * 0.5;
    v131 = *(float *)(v18 + 48) * 0.5;
    v128 = *(float *)(v18 + 60) * 0.5;
    v129 = *(float *)(v18 + 56) * 0.5;
    v127 = *(float *)(v18 + 64) * 0.5;
    v45 = *(float *)(v18 + 68);
    v46 = *(float *)(v18 + 72);
    v47 = v45 * 0.5;
    v49 = *(float *)(v18 + 76);
    v48 = *(float *)(v18 + 80);
    v50 = *(float *)(v18 + 84);
    v51 = *(float *)(v18 + 88);
    v52 = *(float *)(v18 + 92);
    v53 = *(float *)(v18 + 96);
    v54 = *(float *)(v18 + 100);
    v55 = *(float *)(v18 + 104);
    v56 = v18 + 164;
    v57 = v18 + 16548;
    v59 = *v16;
    v58 = v16[1];
    v60 = v58 + v28 * v17 + v15;
    if (!v58)
      v60 = 0;
    result = (_QWORD *)(v59 + v27 * v17 + v15);
    v62 = *v19;
    v61 = v19[1];
    v63 = v61 + v23 * v13 + v12;
    if (!v61)
      v63 = 0;
    v64 = (_BYTE *)(v62 + v22 * v13 + v12);
    do
    {
      if (v11)
      {
        v65 = 0;
        v66 = v64;
        v67 = result;
        do
        {
          LOBYTE(v45) = *(_BYTE *)(v63 + v65 + 1);
          v68 = (float)LODWORD(v45) - v34;
          v69 = LODWORD(v135);
          v70 = v135 * v68;
          LOBYTE(v69) = *v66;
          v71 = v35 * (float)((float)v69 - v33);
          v72 = (float)(v135 * v68) + v71;
          v73 = 8191.0;
          if (v72 <= 8191.0)
          {
            v73 = (float)(v135 * v68) + v71;
            if (v72 < 0.0)
              v73 = 0.0;
          }
          LOBYTE(v72) = *(_BYTE *)(v63 + v65);
          v74 = (float)LODWORD(v72) - v34;
          v75 = (float)(v133 * v68) + (float)(v74 * v134);
          v76 = 8191.0;
          if ((float)(v71 + v75) <= 8191.0)
          {
            v76 = v71 + v75;
            if ((float)(v71 + v75) < 0.0)
              v76 = 0.0;
          }
          v77 = v132 * v74;
          v78 = v77 + v71;
          v79 = (float)(v77 + v71) <= 8191.0;
          v80 = 8191.0;
          if (v79)
          {
            v80 = v78;
            if (v78 < 0.0)
              v80 = 0.0;
          }
          LOBYTE(v78) = v66[1];
          v81 = v35 * (float)((float)LODWORD(v78) - v33);
          v82 = v70 + v81;
          v83 = 8191.0;
          if (v82 <= 8191.0)
          {
            v83 = v82;
            if (v82 < 0.0)
              v83 = 0.0;
          }
          v84 = v75 + v81;
          v79 = (float)(v75 + v81) <= 8191.0;
          v85 = 8191.0;
          if (v79)
          {
            v85 = v84;
            if (v84 < 0.0)
              v85 = 0.0;
          }
          v86 = v77 + v81;
          v79 = (float)(v77 + v81) <= 8191.0;
          v87 = 8191.0;
          if (v79)
          {
            v87 = v86;
            if (v86 < 0.0)
              v87 = 0.0;
          }
          _H4 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          _H5 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm
          {
            FCVT            S4, H4
            FCVT            S5, H5
          }
          _H6 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H7 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          _H24 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          _H25 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          v104 = (float)((float)(v49 * _S5) + (float)(_S4 * v46)) + (float)(_S6 * v48);
          v105 = (float)((float)(v51 * _S5) + (float)(_S4 * v50)) + (float)(_S6 * v52);
          _S4 = (float)((float)(v54 * _S5) + (float)(_S4 * v53)) + (float)(_S6 * v55);
          _S5 = (float)((float)(v49 * _S24) + (float)(_S7 * v46)) + (float)(_S25 * v48);
          _S6 = (float)((float)(v51 * _S24) + (float)(_S7 * v50)) + (float)(_S25 * v52);
          v109 = (float)((float)(v54 * _S24) + (float)(_S7 * v53)) + (float)(_S25 * v55);
          LOWORD(_S24) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v104, 0.0), 8191.0)));
          LOWORD(_S25) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v105, 0.0), 8191.0)));
          __asm
          {
            FCVT            S24, H24
            FCVT            S25, H25
          }
          LOWORD(_S4) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(_S4, 0.0), 8191.0)));
          __asm { FCVT            S26, H4 }
          LOWORD(_S4) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          LOWORD(_S5) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v109, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          v116 = (float)((float)((float)(v43 * _S25) + (float)(v42 * _S24)) + (float)(v44 * _S26)) + v37;
          v117 = (float)((float)((float)(v43 * _S5) + (float)(v42 * _S4)) + (float)(v44 * _S6)) + v37;
          if (v116 < v37)
            v118 = v37;
          else
            v118 = (float)((float)((float)(v43 * _S25) + (float)(v42 * _S24)) + (float)(v44 * _S26)) + v37;
          if (v116 <= v39)
            v119 = v118;
          else
            v119 = v39;
          *v67 = llroundf(v119);
          if (v117 < v37)
            v120 = v37;
          else
            v120 = (float)((float)((float)(v43 * _S5) + (float)(v42 * _S4)) + (float)(v44 * _S6)) + v37;
          if (v117 > v39)
            v120 = v39;
          v67[1] = llroundf(v120);
          v121 = _S24 + _S4;
          v122 = _S25 + _S5;
          v123 = _S26 + _S6;
          v124 = (float)((float)(v38 + (float)(v121 * v131)) + (float)(v122 * v130)) + (float)(v123 * v129);
          v125 = v41;
          if (v124 <= v41)
          {
            v125 = (float)((float)(v38 + (float)(v121 * v131)) + (float)(v122 * v130)) + (float)(v123 * v129);
            if (v124 < v40)
              v125 = v40;
          }
          v45 = (float)((float)(v38 + (float)(v121 * v128)) + (float)(v122 * v127)) + (float)(v123 * v47);
          *(_BYTE *)(v60 + v65) = llroundf(v125);
          v126 = v41;
          if (v45 <= v41)
          {
            v126 = v45;
            if (v45 < v40)
              v126 = v40;
          }
          *(_BYTE *)(v60 + v65 + 1) = llroundf(v126);
          v65 += 2;
          v66 += 2;
          v67 += 2;
        }
        while (v11 > v65);
      }
      v64 += v22;
      v63 += v23;
      result = (_QWORD *)((char *)result + v27);
      v60 += v28;
      ++v10;
    }
    while (v10 != v14);
    if (v25 && v30)
    {
      do
      {
        result = memcpy(v31, v26, v11);
        v26 += v24;
        v31 += v29;
        --v14;
      }
      while (v14);
    }
    else if (v30)
    {
      do
      {
        if (v11)
          result = memset(v31, 255, v11);
        v31 += v29;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_rgb_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v20 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v18 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_rgb_422vf_GCD);
  return 0;
}

_QWORD *vt_Copy_422vf_rgb_422vf_GCD(_QWORD *result, uint64_t a2, double a3, double a4, float a5)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  float v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  unsigned int v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  size_t v68;
  _BYTE *v69;
  _BYTE *v70;
  unsigned int v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;

  v10 = *(_QWORD *)((char *)result + 28);
  v11 = *(unsigned __int8 *)result;
  v12 = v10 * a2 / v11;
  v13 = (v10 + v10 * a2) / v11;
  if (v13 != v12)
  {
    v14 = 0;
    v15 = *(_QWORD *)((char *)result + 20);
    v16 = *(_QWORD *)((char *)result + 36);
    v17 = v12 + *(_QWORD *)((char *)result + 44);
    v18 = v13 - v12;
    v19 = result[14];
    v20 = (uint64_t *)result[16];
    v21 = result[13] * a2 / v11 + result[15];
    v22 = result[19];
    v24 = (uint64_t *)result[7];
    v23 = (uint64_t *)result[8];
    v25 = (uint64_t *)result[17];
    v26 = *v23;
    v27 = v23[1];
    v28 = v23[2];
    v29 = v24[2];
    v30 = (char *)(v29 + v28 * v17 + v16);
    v31 = *v25;
    v32 = v25[1];
    v33 = v25[2];
    v34 = v20[2];
    v35 = (char *)(v34 + v33 * v21 + v19);
    *(float *)&v36 = (float)*(unsigned int *)(v22 + 136);
    LOWORD(a5) = *(_WORD *)(v22 + 140);
    v37 = *(float *)&v36 / (float)*(unsigned int *)(v22 + 128);
    v38 = (float)LODWORD(a5);
    LOWORD(v36) = *(_WORD *)(v22 + 142);
    v39 = (float)v36;
    v40 = v37 * *(float *)v22;
    v41 = v37 * *(float *)(v22 + 8);
    v42 = v37 * *(float *)(v22 + 16);
    v43 = v37 * *(float *)(v22 + 20);
    v44 = *(float *)(v22 + 28);
    v45 = v37 * v44;
    LOWORD(v44) = *(_WORD *)(v22 + 144);
    v46 = (float)LODWORD(v44);
    LOWORD(v5) = *(_WORD *)(v22 + 146);
    v47 = (float)v5;
    LOWORD(v6) = *(_WORD *)(v22 + 148);
    v48 = (float)v6;
    LOWORD(v7) = *(_WORD *)(v22 + 150);
    v49 = (float)v7;
    LOWORD(v8) = *(_WORD *)(v22 + 152);
    v50 = (float)v8;
    v51 = *(float *)(v22 + 36);
    v52 = *(float *)(v22 + 40);
    v53 = *(float *)(v22 + 44);
    v54 = *(float *)(v22 + 48) * 0.5;
    v55 = *(float *)(v22 + 52) * 0.5;
    v56 = *(float *)(v22 + 56) * 0.5;
    v57 = *(float *)(v22 + 60) * 0.5;
    v58 = *(float *)(v22 + 64) * 0.5;
    v59 = *(float *)(v22 + 68);
    v60 = v59 * 0.5;
    v62 = *v20;
    v61 = v20[1];
    v63 = v61 + v32 * v21 + v19;
    if (!v61)
      v63 = 0;
    v64 = (_BYTE *)(v62 + v31 * v21 + v19);
    v66 = *v24;
    v65 = v24[1];
    v67 = v65 + v27 * v17 + v16;
    if (!v65)
      v67 = 0;
    result = (_QWORD *)(v66 + v26 * v17 + v16);
    do
    {
      if (v15)
      {
        v68 = 0;
        v69 = result;
        v70 = v64;
        do
        {
          LOBYTE(v59) = *(_BYTE *)(v67 + v68);
          *(float *)&v71 = (float)LODWORD(v59) - v39;
          LOBYTE(v9) = *(_BYTE *)(v67 + v68 + 1);
          v72 = (float)LODWORD(v9) - v39;
          v73 = v41 * v72;
          v74 = (float)(v43 * v72) + (float)(*(float *)&v71 * v42);
          v75 = v45 * *(float *)&v71;
          LOBYTE(v71) = *v69;
          v76 = v40 * (float)((float)v71 - v38);
          v77 = (float)(v41 * v72) + v76;
          v78 = v76 + v74;
          v79 = v75 + v76;
          v80 = (float)((float)((float)(v52 * v78) + (float)(v51 * v77)) + (float)(v53 * v79)) + v46;
          v81 = v48;
          if (v80 <= v48)
          {
            v81 = (float)((float)((float)(v52 * v78) + (float)(v51 * v77)) + (float)(v53 * v79)) + v46;
            if (v80 < v46)
              v81 = v46;
          }
          LOBYTE(v80) = v69[1];
          v82 = v40 * (float)((float)LODWORD(v80) - v38);
          v83 = v73 + v82;
          v84 = v74 + v82;
          v85 = v75 + v82;
          v86 = (float)((float)((float)(v52 * v84) + (float)(v51 * v83)) + (float)(v53 * (float)(v75 + v82))) + v46;
          *v70 = llroundf(v81);
          v87 = v48;
          if (v86 <= v48)
          {
            v87 = v86;
            if (v86 < v46)
              v87 = v46;
          }
          v70[1] = llroundf(v87);
          v88 = v77 + v83;
          v89 = v78 + v84;
          v90 = v79 + v85;
          v91 = (float)((float)(v47 + (float)(v88 * v54)) + (float)(v89 * v55)) + (float)(v90 * v56);
          v92 = v50;
          if (v91 <= v50)
          {
            v92 = (float)((float)(v47 + (float)(v88 * v54)) + (float)(v89 * v55)) + (float)(v90 * v56);
            if (v91 < v49)
              v92 = v49;
          }
          v59 = (float)((float)(v47 + (float)(v88 * v57)) + (float)(v89 * v58)) + (float)(v90 * v60);
          *(_BYTE *)(v63 + v68) = llroundf(v92);
          v9 = v50;
          if (v59 <= v50)
          {
            v9 = v59;
            if (v59 < v49)
              v9 = v49;
          }
          *(_BYTE *)(v63 + v68 + 1) = llroundf(v9);
          v68 += 2;
          v69 += 2;
          v70 += 2;
        }
        while (v15 > v68);
      }
      result = (_QWORD *)((char *)result + v26);
      v67 += v27;
      v64 += v31;
      v63 += v32;
      ++v14;
    }
    while (v14 != v18);
    if (v29 && v34)
    {
      do
      {
        result = memcpy(v35, v30, v15);
        v30 += v28;
        v35 += v33;
        --v18;
      }
      while (v18);
    }
    else if (v34)
    {
      do
      {
        if (v15)
          result = memset(v35, 255, v15);
        v35 += v33;
        --v18;
      }
      while (v18);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Tone_Mat_TRC_2vuyf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Tone_Mat_TRC_2vuyf_GCD);
  return 0;
}

_QWORD *vt_Copy_422vf_TRC_Tone_Mat_TRC_2vuyf_GCD(_QWORD *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  _WORD *v18;
  uint64_t v19;
  size_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  float v33;
  float v34;
  float v35;
  unsigned int v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  _BYTE *v62;
  float v63;
  float v64;
  float v65;
  float v66;
  size_t v67;
  _BYTE *v68;
  _WORD *v69;
  _BYTE *v70;
  float v71;
  unsigned int v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  BOOL v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v104;
  float v105;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v118;
  float v119;
  float v120;
  float v122;
  float v124;
  float v125;
  float v128;
  float v129;
  unsigned int v135;
  float v136;
  float v138;
  float v139;
  float v140;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  char v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;

  v5 = *(_QWORD *)((char *)result + 28);
  v6 = *(unsigned __int8 *)result;
  v7 = v5 * a2 / v6;
  v8 = v5 + v5 * a2;
  v9 = result[14];
  v10 = result[13] * a2 / v6;
  v11 = (_QWORD *)result[16];
  v12 = v10 + result[15];
  v13 = (uint64_t *)result[17];
  v14 = v13[1];
  v15 = v11[1];
  v16 = (char *)(v15 + v14 * v12 + v9);
  v17 = v8 / v6;
  if (v15)
    v18 = (_WORD *)(v15 + v14 * v12 + v9);
  else
    v18 = 0;
  if (v17 != v7)
  {
    v19 = 0;
    v20 = *(_QWORD *)((char *)result + 20);
    v21 = *(_QWORD *)((char *)result + 36);
    v22 = v7 + *(_QWORD *)((char *)result + 44);
    v23 = v17 - v7;
    v24 = result[19];
    v25 = (_QWORD *)result[7];
    v26 = (uint64_t *)result[8];
    v27 = *v26;
    v28 = v26[1];
    v29 = v26[2];
    v30 = v25[2];
    v31 = (char *)(v30 + v29 * v22 + v21);
    v32 = *v13;
    LOWORD(a4) = *(_WORD *)(v24 + 140);
    LOWORD(a5) = *(_WORD *)(v24 + 142);
    v33 = 8191.0 / (float)*(unsigned int *)(v24 + 128);
    v34 = (float)LODWORD(a5);
    v165 = v33 * *(float *)v24;
    v166 = (float)LODWORD(a4);
    v163 = v33 * *(float *)(v24 + 16);
    v164 = v33 * *(float *)(v24 + 8);
    v35 = v33 * *(float *)(v24 + 20);
    *(float *)&v36 = v33 * *(float *)(v24 + 28);
    v161 = *(float *)&v36;
    v162 = v35;
    LOWORD(v36) = *(_WORD *)(v24 + 144);
    v37 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v24 + 146);
    v38 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v24 + 148);
    v39 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v24 + 150);
    v40 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v24 + 152);
    v41 = (float)v36;
    v42 = *(float *)(v24 + 36);
    v43 = *(float *)(v24 + 40);
    v44 = *(float *)(v24 + 44);
    v159 = *(float *)(v24 + 48) * 0.5;
    v160 = v38;
    v157 = *(float *)(v24 + 56) * 0.5;
    v158 = *(float *)(v24 + 52) * 0.5;
    v155 = *(float *)(v24 + 64) * 0.5;
    v156 = *(float *)(v24 + 60) * 0.5;
    v45 = *(float *)(v24 + 72);
    v46 = *(float *)(v24 + 68) * 0.5;
    v154 = v46;
    v48 = *(float *)(v24 + 76);
    v47 = *(float *)(v24 + 80);
    v49 = *(float *)(v24 + 84);
    v50 = *(float *)(v24 + 88);
    v51 = *(float *)(v24 + 92);
    v52 = *(float *)(v24 + 96);
    v53 = *(float *)(v24 + 100);
    v54 = *(float *)(v24 + 104);
    v55 = v24 + 164;
    v56 = v24 + 16548;
    v57 = *v11 + v32 * v12;
    v58 = v24 + 32932;
    v59 = (_BYTE *)(v57 + v9);
    v60 = v25[1];
    _ZF = v60 == 0;
    result = (_QWORD *)(v60 + v28 * v22 + v21);
    if (_ZF)
      result = 0;
    v62 = (_BYTE *)(*v25 + v27 * v22 + v21);
    v64 = *(float *)(v24 + 108);
    v63 = *(float *)(v24 + 112);
    v65 = *(float *)(v24 + 116);
    v66 = *(float *)(v24 + 120);
    do
    {
      if (v20)
      {
        v67 = 0;
        v68 = v62;
        v69 = v18;
        v70 = v59;
        do
        {
          LOBYTE(v46) = *((_BYTE *)result + v67 + 1);
          v71 = (float)LODWORD(v46) - v34;
          v72 = LODWORD(v164);
          v73 = v164 * v71;
          LOBYTE(v72) = *v68;
          v74 = v165 * (float)((float)v72 - v166);
          v75 = (float)(v164 * v71) + v74;
          v76 = 8191.0;
          if (v75 <= 8191.0)
          {
            v76 = (float)(v164 * v71) + v74;
            if (v75 < 0.0)
              v76 = 0.0;
          }
          LOBYTE(v75) = *((_BYTE *)result + v67);
          v77 = v34;
          v78 = (float)LODWORD(v75) - v34;
          v79 = (float)(v162 * v71) + (float)(v78 * v163);
          v80 = 8191.0;
          if ((float)(v74 + v79) <= 8191.0)
          {
            v80 = v74 + v79;
            if ((float)(v74 + v79) < 0.0)
              v80 = 0.0;
          }
          v81 = v161 * v78;
          v82 = (float)(v161 * v78) + v74;
          v83 = 8191.0;
          if (v82 <= 8191.0)
          {
            v83 = v82;
            if (v82 < 0.0)
              v83 = 0.0;
          }
          LOBYTE(v82) = v68[1];
          v84 = v165 * (float)((float)LODWORD(v82) - v166);
          v85 = v73 + v84;
          v86 = (float)(v73 + v84) <= 8191.0;
          v87 = 8191.0;
          if (v86)
          {
            v87 = v85;
            if (v85 < 0.0)
              v87 = 0.0;
          }
          v88 = v79 + v84;
          v86 = (float)(v79 + v84) <= 8191.0;
          v89 = 8191.0;
          if (v86)
          {
            v89 = v88;
            if (v88 < 0.0)
              v89 = 0.0;
          }
          v90 = v81 + v84;
          v86 = (float)(v81 + v84) <= 8191.0;
          v91 = 8191.0;
          if (v86)
          {
            v91 = v90;
            if (v90 < 0.0)
              v91 = 0.0;
          }
          _H0 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S24, H0 }
          _H0 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S25, H0 }
          _H0 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          __asm { FCVT            S26, H0 }
          _H1 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          v104 = (float)((float)((float)(v63 * _S25) + (float)(v64 * _S24)) + (float)(v65 * _S26))
               + (float)(v66 * fmaxf(_S24, fmaxf(_S25, _S26)));
          v105 = 8191.0;
          if (v104 <= 8191.0)
          {
            v105 = v104;
            if (v104 < 0.0)
              v105 = 0.0;
          }
          __asm
          {
            FCVT            S28, H1
            FCVT            S30, H27
            FCVT            S1, H2
          }
          _H0 = *(_WORD *)(v56 + 2 * llroundf(v105));
          __asm { FCVT            S0, H0 }
          v111 = _S24 * _S0;
          v112 = _S25 * _S0;
          v113 = _S26 * _S0;
          v114 = (float)((float)((float)(v63 * _S30) + (float)(v64 * _S28)) + (float)(v65 * _S1))
               + (float)(v66 * fmaxf(_S28, fmaxf(_S30, _S1)));
          v115 = 8191.0;
          if (v114 <= 8191.0)
          {
            v115 = v114;
            if (v114 < 0.0)
              v115 = 0.0;
          }
          _H0 = *(_WORD *)(v56 + 2 * llroundf(v115));
          __asm { FCVT            S0, H0 }
          v118 = _S28 * _S0;
          v119 = _S30 * _S0;
          v120 = _S1 * _S0;
          _S1 = (float)((float)(v48 * v112) + (float)(v111 * v45)) + (float)(v113 * v47);
          v122 = (float)((float)(v50 * v112) + (float)(v111 * v49)) + (float)(v113 * v51);
          _S24 = (float)((float)(v53 * v112) + (float)(v111 * v52)) + (float)(v113 * v54);
          v124 = (float)(v48 * v119) + (float)(v118 * v45);
          v125 = (float)(v50 * v119) + (float)(v118 * v49);
          _S2 = (float)(v53 * v119) + (float)(v118 * v52);
          _S25 = v124 + (float)(v120 * v47);
          v128 = v125 + (float)(v120 * v51);
          LOWORD(_S1) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          v129 = _S2 + (float)(v120 * v54);
          __asm { FCVT            S1, H1 }
          LOWORD(_S2) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v122, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          LOWORD(_S24) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(_S24, 0.0), 8191.0)));
          __asm { FCVT            S27, H24 }
          LOWORD(_S24) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(_S25, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          LOWORD(_S25) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v128, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          v135 = llroundf(fminf(fmaxf(v129, 0.0), 8191.0));
          v136 = (float)(v43 * _S2) + (float)(v42 * _S1);
          _S1 = _S1 + _S24;
          v138 = _S2 + _S25;
          v139 = (float)(v160 + (float)(_S1 * v159)) + (float)(v138 * v158);
          v140 = (float)(v160 + (float)(_S1 * v156)) + (float)(v138 * v155);
          LOWORD(_S1) = *(_WORD *)(v58 + 2 * v135);
          __asm { FCVT            S1, H1 }
          v142 = v136 + (float)(v44 * _S27);
          v143 = _S27 + _S1;
          v144 = v139 + (float)(v143 * v157);
          v145 = v140 + (float)(v143 * v154);
          if (v144 < v40)
            v146 = v40;
          else
            v146 = v144;
          v147 = v142 + v37;
          if (v144 <= v41)
            v148 = v146;
          else
            v148 = v41;
          v149 = llroundf(v148);
          if (v147 < v37)
            v150 = v37;
          else
            v150 = v147;
          *v70 = v149;
          if (v147 <= v39)
            v151 = v150;
          else
            v151 = v39;
          v70[1] = llroundf(v151);
          v152 = v41;
          if (v145 <= v41)
          {
            v152 = v145;
            if (v145 < v40)
              v152 = v40;
          }
          v153 = (float)((float)((float)(v43 * _S25) + (float)(v42 * _S24)) + (float)(v44 * _S1)) + v37;
          v70[2] = llroundf(v152);
          v46 = v39;
          if (v153 <= v39)
          {
            v46 = v153;
            if (v153 < v37)
              v46 = v37;
          }
          v70[3] = llroundf(v46);
          v34 = v77;
          if (v69)
            *v69++ = 0;
          v67 += 2;
          v68 += 2;
          v70 += 4;
        }
        while (v20 > v67);
      }
      v62 += v27;
      result = (_QWORD *)((char *)result + v28);
      v59 += v32;
      ++v19;
    }
    while (v19 != v23);
    if (v30 && v18)
    {
      do
      {
        result = memcpy(v16, v31, v20);
        v31 += v29;
        v16 += v14;
        --v23;
      }
      while (v23);
    }
    else if (v18)
    {
      do
      {
        if (v20)
          result = memset(v16, 255, v20);
        v16 += v14;
        --v23;
      }
      while (v23);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Mat_TRC_2vuyf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Mat_TRC_2vuyf_GCD);
  return 0;
}

_QWORD *vt_Copy_422vf_TRC_Mat_TRC_2vuyf_GCD(_QWORD *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  _WORD *v19;
  uint64_t v20;
  size_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  float v34;
  float v35;
  float v36;
  float v37;
  unsigned int v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  size_t v64;
  _BYTE *v65;
  _WORD *v66;
  _BYTE *v67;
  float v68;
  unsigned int v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  BOOL v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  unsigned int v102;
  float v104;
  float v106;
  float v107;
  float v108;
  float v111;
  float v112;
  unsigned int v118;
  float v119;
  float v121;
  float v122;
  float v123;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  char v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;

  v6 = *(_QWORD *)((char *)result + 28);
  v7 = *(unsigned __int8 *)result;
  v8 = v6 * a2 / v7;
  v9 = v6 + v6 * a2;
  v10 = result[14];
  v11 = result[13] * a2 / v7;
  v12 = (_QWORD *)result[16];
  v13 = v11 + result[15];
  v14 = (uint64_t *)result[17];
  v15 = v14[1];
  v16 = v12[1];
  v17 = (char *)(v16 + v15 * v13 + v10);
  v18 = v9 / v7;
  if (v16)
    v19 = (_WORD *)(v16 + v15 * v13 + v10);
  else
    v19 = 0;
  if (v18 != v8)
  {
    v20 = 0;
    v21 = *(_QWORD *)((char *)result + 20);
    v22 = *(_QWORD *)((char *)result + 36);
    v23 = v8 + *(_QWORD *)((char *)result + 44);
    v24 = v18 - v8;
    v25 = result[19];
    v26 = (_QWORD *)result[7];
    v27 = (uint64_t *)result[8];
    v28 = *v27;
    v29 = v27[1];
    v30 = v27[2];
    v31 = v26[2];
    v32 = (char *)(v31 + v30 * v23 + v22);
    v33 = *v14;
    LOWORD(a5) = *(_WORD *)(v25 + 140);
    LOWORD(a6) = *(_WORD *)(v25 + 142);
    v34 = 8191.0 / (float)*(unsigned int *)(v25 + 128);
    v35 = (float)LODWORD(a5);
    v36 = (float)LODWORD(a6);
    v37 = v34 * *(float *)v25;
    v141 = v34 * *(float *)(v25 + 16);
    v142 = v34 * *(float *)(v25 + 8);
    v139 = v34 * *(float *)(v25 + 28);
    *(float *)&v38 = v139;
    v140 = v34 * *(float *)(v25 + 20);
    LOWORD(v38) = *(_WORD *)(v25 + 144);
    v39 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v25 + 146);
    v40 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v25 + 148);
    v41 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v25 + 150);
    v42 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v25 + 152);
    v43 = (float)v38;
    v44 = *(float *)(v25 + 36);
    v45 = *(float *)(v25 + 40);
    v46 = *(float *)(v25 + 44);
    v137 = *(float *)(v25 + 52) * 0.5;
    v138 = *(float *)(v25 + 48) * 0.5;
    v135 = *(float *)(v25 + 60) * 0.5;
    v136 = *(float *)(v25 + 56) * 0.5;
    v47 = *(float *)(v25 + 64) * 0.5;
    v48 = *(float *)(v25 + 68);
    v49 = *(float *)(v25 + 72);
    v50 = v48 * 0.5;
    v52 = *(float *)(v25 + 76);
    v51 = *(float *)(v25 + 80);
    v53 = *(float *)(v25 + 84);
    v54 = *(float *)(v25 + 88);
    v55 = *(float *)(v25 + 92);
    v56 = *(float *)(v25 + 96);
    v57 = *(float *)(v25 + 100);
    v58 = *(float *)(v25 + 104);
    v59 = v25 + 16548;
    v60 = v25 + 164;
    v61 = (_BYTE *)(*v12 + v33 * v13 + v10);
    v62 = v26[1];
    if (v62)
      v63 = v62 + v29 * v23 + v22;
    else
      v63 = 0;
    result = (_QWORD *)(*v26 + v28 * v23 + v22);
    do
    {
      if (v21)
      {
        v64 = 0;
        v65 = result;
        v66 = v19;
        v67 = v61;
        do
        {
          LOBYTE(v48) = *(_BYTE *)(v63 + v64 + 1);
          v68 = (float)LODWORD(v48) - v36;
          v69 = LODWORD(v142);
          v70 = v142 * v68;
          LOBYTE(v69) = *v65;
          v71 = v37 * (float)((float)v69 - v35);
          v72 = (float)(v142 * v68) + v71;
          v73 = 8191.0;
          if (v72 <= 8191.0)
          {
            v73 = (float)(v142 * v68) + v71;
            if (v72 < 0.0)
              v73 = 0.0;
          }
          LOBYTE(v72) = *(_BYTE *)(v63 + v64);
          v74 = (float)LODWORD(v72) - v36;
          v75 = (float)(v140 * v68) + (float)(v74 * v141);
          v76 = 8191.0;
          if ((float)(v71 + v75) <= 8191.0)
          {
            v76 = v71 + v75;
            if ((float)(v71 + v75) < 0.0)
              v76 = 0.0;
          }
          v77 = v139 * v74;
          v78 = v77 + v71;
          v79 = (float)(v77 + v71) <= 8191.0;
          v80 = 8191.0;
          if (v79)
          {
            v80 = v78;
            if (v78 < 0.0)
              v80 = 0.0;
          }
          LOBYTE(v78) = v65[1];
          v81 = v37 * (float)((float)LODWORD(v78) - v35);
          v82 = v70 + v81;
          v83 = 8191.0;
          if (v82 <= 8191.0)
          {
            v83 = v82;
            if (v82 < 0.0)
              v83 = 0.0;
          }
          v84 = v75 + v81;
          v79 = (float)(v75 + v81) <= 8191.0;
          v85 = 8191.0;
          if (v79)
          {
            v85 = v84;
            if (v84 < 0.0)
              v85 = 0.0;
          }
          v86 = v77 + v81;
          v79 = (float)(v77 + v81) <= 8191.0;
          v87 = 8191.0;
          if (v79)
          {
            v87 = v86;
            if (v86 < 0.0)
              v87 = 0.0;
          }
          _H4 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H5 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H6 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H7 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          _H24 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          v102 = llroundf(fminf(fmaxf(v87, 0.0), 8191.0));
          _S25 = (float)((float)(v52 * _S5) + (float)(_S4 * v49)) + (float)(_S6 * v51);
          v104 = (float)((float)(v54 * _S5) + (float)(_S4 * v53)) + (float)(_S6 * v55);
          _S4 = (float)((float)(v57 * _S5) + (float)(_S4 * v56)) + (float)(_S6 * v58);
          v106 = (float)(v52 * _S24) + (float)(_S7 * v49);
          v107 = (float)(v54 * _S24) + (float)(_S7 * v53);
          v108 = (float)(v57 * _S24) + (float)(_S7 * v56);
          LOWORD(_S24) = *(_WORD *)(v60 + 2 * v102);
          __asm { FCVT            S24, H24 }
          _S5 = v106 + (float)(_S24 * v51);
          v111 = v107 + (float)(_S24 * v55);
          LOWORD(_S25) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(_S25, 0.0), 8191.0)));
          v112 = v108 + (float)(_S24 * v58);
          __asm { FCVT            S24, H25 }
          LOWORD(_S25) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v104, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          LOWORD(_S4) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(_S4, 0.0), 8191.0)));
          __asm { FCVT            S26, H4 }
          LOWORD(_S4) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          LOWORD(_S5) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v111, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          v118 = llroundf(fminf(fmaxf(v112, 0.0), 8191.0));
          v119 = (float)(v45 * _S25) + (float)(v44 * _S24);
          _S6 = _S24 + _S4;
          v121 = _S25 + _S5;
          v122 = (float)(v40 + (float)((float)(_S24 + _S4) * v138)) + (float)(v121 * v137);
          v123 = (float)(v40 + (float)(_S6 * v135)) + (float)(v121 * v47);
          LOWORD(_S6) = *(_WORD *)(v59 + 2 * v118);
          __asm { FCVT            S6, H6 }
          v125 = v119 + (float)(v46 * _S26);
          v126 = v122 + (float)((float)(_S26 + _S6) * v136);
          v127 = v123 + (float)((float)(_S26 + _S6) * v50);
          if (v126 < v42)
            v128 = v42;
          else
            v128 = v126;
          v79 = v126 <= v43;
          v129 = v125 + v39;
          if (!v79)
            v128 = v43;
          v130 = llroundf(v128);
          if (v129 < v39)
            v131 = v39;
          else
            v131 = v125 + v39;
          *v67 = v130;
          if (v129 <= v41)
            v132 = v131;
          else
            v132 = v41;
          v67[1] = llroundf(v132);
          v133 = v43;
          if (v127 <= v43)
          {
            v133 = v127;
            if (v127 < v42)
              v133 = v42;
          }
          v48 = (float)((float)((float)(v45 * _S5) + (float)(v44 * _S4)) + (float)(v46 * _S6)) + v39;
          v67[2] = llroundf(v133);
          v134 = v41;
          if (v48 <= v41)
          {
            v134 = v48;
            if (v48 < v39)
              v134 = v39;
          }
          v67[3] = llroundf(v134);
          if (v66)
            *v66++ = 0;
          v64 += 2;
          v65 += 2;
          v67 += 4;
        }
        while (v21 > v64);
      }
      result = (_QWORD *)((char *)result + v28);
      v63 += v29;
      v61 += v33;
      ++v20;
    }
    while (v20 != v24);
    if (v31 && v19)
    {
      do
      {
        result = memcpy(v17, v32, v21);
        v32 += v30;
        v17 += v15;
        --v24;
      }
      while (v24);
    }
    else if (v19)
    {
      do
      {
        if (v21)
          result = memset(v17, 255, v21);
        v17 += v15;
        --v24;
      }
      while (v24);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_rgb_2vuyf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_rgb_2vuyf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_422vf_rgb_2vuyf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, double a5, float a6, float a7)
{
  float v7;
  float v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  _WORD *v25;
  uint64_t v26;
  size_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  char *v43;
  uint64_t v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int8 *v67;
  size_t v68;
  _BYTE *v69;
  _WORD *v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;

  v14 = *(_QWORD *)(result + 28);
  v15 = *result;
  v16 = v14 * a2 / v15;
  v17 = *((_QWORD *)result + 14);
  v18 = (_QWORD *)*((_QWORD *)result + 16);
  v19 = *((_QWORD *)result + 13) * a2 / v15 + *((_QWORD *)result + 15);
  v20 = (uint64_t *)*((_QWORD *)result + 17);
  v21 = v20[1];
  v22 = v18[1];
  v23 = (char *)(v22 + v21 * v19 + v17);
  v24 = (v14 + v14 * a2) / v15;
  if (v22)
    v25 = (_WORD *)(v22 + v21 * v19 + v17);
  else
    v25 = 0;
  if (v24 != v16)
  {
    v26 = 0;
    v27 = *(_QWORD *)(result + 20);
    v28 = *(_QWORD *)(result + 36);
    v29 = v16 + *(_QWORD *)(result + 44);
    v30 = v24 - v16;
    v31 = *((_QWORD *)result + 19);
    v32 = (_QWORD *)*((_QWORD *)result + 7);
    v33 = (uint64_t *)*((_QWORD *)result + 8);
    v34 = *v33;
    v35 = v33[1];
    v36 = v33[2];
    v37 = v32[2];
    LOWORD(a6) = *(_WORD *)(v31 + 140);
    LOWORD(a7) = *(_WORD *)(v31 + 142);
    v38 = (float)*(unsigned int *)(v31 + 136) / (float)*(unsigned int *)(v31 + 128);
    LOWORD(v9) = *(_WORD *)(v31 + 144);
    LOWORD(v10) = *(_WORD *)(v31 + 146);
    LOWORD(v11) = *(_WORD *)(v31 + 148);
    LOWORD(v12) = *(_WORD *)(v31 + 150);
    LOWORD(v13) = *(_WORD *)(v31 + 152);
    v39 = *(float *)(v31 + 36);
    v40 = *(float *)(v31 + 40);
    v41 = *(float *)(v31 + 44);
    v42 = *(float *)(v31 + 68);
    v43 = (char *)(v37 + v36 * v29 + v28);
    v44 = *v20;
    v45 = (float)LODWORD(a6);
    v46 = (float)LODWORD(a7);
    v47 = v38 * *(float *)v31;
    v48 = v38 * *(float *)(v31 + 8);
    v49 = v38 * *(float *)(v31 + 16);
    v50 = v38 * *(float *)(v31 + 20);
    v51 = v38 * *(float *)(v31 + 28);
    v52 = (float)v9;
    v53 = (float)v10;
    v54 = (float)v11;
    v55 = (float)v12;
    v56 = (float)v13;
    v57 = 0.5;
    v58 = *(float *)(v31 + 48) * 0.5;
    v59 = *(float *)(v31 + 52) * 0.5;
    v60 = *(float *)(v31 + 56) * 0.5;
    v61 = *(float *)(v31 + 60) * 0.5;
    v62 = *(float *)(v31 + 64) * 0.5;
    v63 = v42 * 0.5;
    v64 = (_BYTE *)(*v18 + v44 * v19 + v17);
    v65 = v32[1];
    result = (unsigned __int8 *)(v65 + v35 * v29 + v28);
    if (v65)
      v66 = v65 + v35 * v29 + v28;
    else
      v66 = 0;
    v67 = (unsigned __int8 *)(*v32 + v34 * v29 + v28);
    do
    {
      if (v27)
      {
        v68 = 0;
        result = v67;
        v69 = v64;
        v70 = v25;
        do
        {
          LOBYTE(v42) = *(_BYTE *)(v66 + v68);
          v71 = (float)LODWORD(v42) - v46;
          LOBYTE(v57) = *(_BYTE *)(v66 + v68 + 1);
          v72 = (float)LODWORD(v57) - v46;
          v73 = v48 * v72;
          v74 = (float)(v50 * v72) + (float)(v71 * v49);
          v75 = v51 * v71;
          LOBYTE(v7) = *result;
          v76 = v47 * (float)((float)LODWORD(v7) - v45);
          LOBYTE(v8) = result[1];
          v77 = v47 * (float)((float)LODWORD(v8) - v45);
          v78 = v73 + v76;
          v79 = v76 + v74;
          v80 = v75 + v76;
          v81 = v73 + v77;
          v82 = v74 + v77;
          v83 = v75 + v77;
          v84 = (float)((float)((float)(v40 * v79) + (float)(v39 * v78)) + (float)(v41 * v80)) + v52;
          v42 = (float)((float)((float)(v40 * v82) + (float)(v39 * v81)) + (float)(v41 * v83)) + v52;
          v85 = v78 + v81;
          v86 = v79 + v82;
          v87 = (float)(v53 + (float)(v85 * v58)) + (float)(v86 * v59);
          v7 = v80 + v83;
          v8 = v87 + (float)(v7 * v60);
          v88 = (float)(v53 + (float)(v85 * v61)) + (float)(v86 * v62);
          if (v8 < v55)
            v89 = v55;
          else
            v89 = v87 + (float)(v7 * v60);
          if (v8 > v56)
            v89 = v56;
          v90 = v88 + (float)(v7 * v63);
          *v69 = llroundf(v89);
          if (v84 < v52)
            v91 = v52;
          else
            v91 = v84;
          if (v84 > v54)
            v91 = v54;
          v69[1] = llroundf(v91);
          if (v90 < v55)
            v92 = v55;
          else
            v92 = v90;
          if (v90 <= v56)
            v93 = v92;
          else
            v93 = v56;
          v69[2] = llroundf(v93);
          v57 = v54;
          if (v42 <= v54)
          {
            v57 = v42;
            if (v42 < v52)
              v57 = v52;
          }
          v69[3] = llroundf(v57);
          if (v70)
            *v70++ = 0;
          v68 += 2;
          result += 2;
          v69 += 4;
        }
        while (v27 > v68);
      }
      v67 += v34;
      v66 += v35;
      v64 += v44;
      ++v26;
    }
    while (v26 != v30);
    if (v37 && v25)
    {
      do
      {
        result = (unsigned __int8 *)memcpy(v23, v43, v27);
        v43 += v36;
        v23 += v21;
        --v30;
      }
      while (v30);
    }
    else if (v25)
    {
      do
      {
        if (v27)
          result = (unsigned __int8 *)memset(v23, 255, v27);
        v23 += v21;
        --v30;
      }
      while (v30);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Tone_Mat_TRC_yuvsf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Tone_Mat_TRC_yuvsf_GCD);
  return 0;
}

_QWORD *vt_Copy_422vf_TRC_Tone_Mat_TRC_yuvsf_GCD(_QWORD *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  _WORD *v18;
  uint64_t v19;
  size_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  float v33;
  float v34;
  float v35;
  unsigned int v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  _BYTE *v62;
  float v63;
  float v64;
  float v65;
  float v66;
  size_t v67;
  _BYTE *v68;
  _WORD *v69;
  _BYTE *v70;
  float v71;
  unsigned int v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  BOOL v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v104;
  float v105;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v118;
  float v119;
  float v120;
  float v122;
  float v124;
  float v125;
  float v128;
  float v129;
  unsigned int v132;
  unsigned int v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  char v149;
  float v150;
  float v151;
  char v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;

  v5 = *(_QWORD *)((char *)result + 28);
  v6 = *(unsigned __int8 *)result;
  v7 = v5 * a2 / v6;
  v8 = v5 + v5 * a2;
  v9 = result[14];
  v10 = result[13] * a2 / v6;
  v11 = (_QWORD *)result[16];
  v12 = v10 + result[15];
  v13 = (uint64_t *)result[17];
  v14 = v13[1];
  v15 = v11[1];
  v16 = (char *)(v15 + v14 * v12 + v9);
  v17 = v8 / v6;
  if (v15)
    v18 = (_WORD *)(v15 + v14 * v12 + v9);
  else
    v18 = 0;
  if (v17 != v7)
  {
    v19 = 0;
    v20 = *(_QWORD *)((char *)result + 20);
    v21 = *(_QWORD *)((char *)result + 36);
    v22 = v7 + *(_QWORD *)((char *)result + 44);
    v23 = v17 - v7;
    v24 = result[19];
    v25 = (_QWORD *)result[7];
    v26 = (uint64_t *)result[8];
    v27 = *v26;
    v28 = v26[1];
    v29 = v26[2];
    v30 = v25[2];
    v31 = (char *)(v30 + v29 * v22 + v21);
    v32 = *v13;
    LOWORD(a4) = *(_WORD *)(v24 + 140);
    LOWORD(a5) = *(_WORD *)(v24 + 142);
    v33 = 8191.0 / (float)*(unsigned int *)(v24 + 128);
    v34 = (float)LODWORD(a5);
    v167 = v33 * *(float *)v24;
    v168 = (float)LODWORD(a4);
    v165 = v33 * *(float *)(v24 + 16);
    v166 = v33 * *(float *)(v24 + 8);
    v35 = v33 * *(float *)(v24 + 20);
    *(float *)&v36 = v33 * *(float *)(v24 + 28);
    v163 = *(float *)&v36;
    v164 = v35;
    LOWORD(v36) = *(_WORD *)(v24 + 144);
    v37 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v24 + 146);
    v38 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v24 + 148);
    v39 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v24 + 150);
    v40 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v24 + 152);
    v41 = (float)v36;
    v42 = *(float *)(v24 + 36);
    v43 = *(float *)(v24 + 40);
    v44 = *(float *)(v24 + 44);
    v161 = *(float *)(v24 + 48) * 0.5;
    v162 = v38;
    v159 = *(float *)(v24 + 56) * 0.5;
    v160 = *(float *)(v24 + 52) * 0.5;
    v157 = *(float *)(v24 + 64) * 0.5;
    v158 = *(float *)(v24 + 60) * 0.5;
    v45 = *(float *)(v24 + 72);
    v46 = *(float *)(v24 + 68) * 0.5;
    v156 = v46;
    v48 = *(float *)(v24 + 76);
    v47 = *(float *)(v24 + 80);
    v49 = *(float *)(v24 + 84);
    v50 = *(float *)(v24 + 88);
    v51 = *(float *)(v24 + 92);
    v52 = *(float *)(v24 + 96);
    v53 = *(float *)(v24 + 100);
    v54 = *(float *)(v24 + 104);
    v55 = v24 + 164;
    v56 = v24 + 16548;
    v57 = *v11 + v32 * v12;
    v58 = v24 + 32932;
    v59 = (_BYTE *)(v57 + v9);
    v60 = v25[1];
    _ZF = v60 == 0;
    result = (_QWORD *)(v60 + v28 * v22 + v21);
    if (_ZF)
      result = 0;
    v62 = (_BYTE *)(*v25 + v27 * v22 + v21);
    v64 = *(float *)(v24 + 108);
    v63 = *(float *)(v24 + 112);
    v65 = *(float *)(v24 + 116);
    v66 = *(float *)(v24 + 120);
    do
    {
      if (v20)
      {
        v67 = 0;
        v68 = v62;
        v69 = v18;
        v70 = v59;
        do
        {
          LOBYTE(v46) = *((_BYTE *)result + v67 + 1);
          v71 = (float)LODWORD(v46) - v34;
          v72 = LODWORD(v166);
          v73 = v166 * v71;
          LOBYTE(v72) = *v68;
          v74 = v167 * (float)((float)v72 - v168);
          v75 = (float)(v166 * v71) + v74;
          v76 = 8191.0;
          if (v75 <= 8191.0)
          {
            v76 = (float)(v166 * v71) + v74;
            if (v75 < 0.0)
              v76 = 0.0;
          }
          LOBYTE(v75) = *((_BYTE *)result + v67);
          v77 = v34;
          v78 = (float)LODWORD(v75) - v34;
          v79 = (float)(v164 * v71) + (float)(v78 * v165);
          v80 = 8191.0;
          if ((float)(v74 + v79) <= 8191.0)
          {
            v80 = v74 + v79;
            if ((float)(v74 + v79) < 0.0)
              v80 = 0.0;
          }
          v81 = v163 * v78;
          v82 = (float)(v163 * v78) + v74;
          v83 = 8191.0;
          if (v82 <= 8191.0)
          {
            v83 = v82;
            if (v82 < 0.0)
              v83 = 0.0;
          }
          LOBYTE(v82) = v68[1];
          v84 = v167 * (float)((float)LODWORD(v82) - v168);
          v85 = v73 + v84;
          v86 = (float)(v73 + v84) <= 8191.0;
          v87 = 8191.0;
          if (v86)
          {
            v87 = v85;
            if (v85 < 0.0)
              v87 = 0.0;
          }
          v88 = v79 + v84;
          v86 = (float)(v79 + v84) <= 8191.0;
          v89 = 8191.0;
          if (v86)
          {
            v89 = v88;
            if (v88 < 0.0)
              v89 = 0.0;
          }
          v90 = v81 + v84;
          v86 = (float)(v81 + v84) <= 8191.0;
          v91 = 8191.0;
          if (v86)
          {
            v91 = v90;
            if (v90 < 0.0)
              v91 = 0.0;
          }
          _H0 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S24, H0 }
          _H0 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S25, H0 }
          _H0 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          __asm { FCVT            S26, H0 }
          _H1 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          v104 = (float)((float)((float)(v63 * _S25) + (float)(v64 * _S24)) + (float)(v65 * _S26))
               + (float)(v66 * fmaxf(_S24, fmaxf(_S25, _S26)));
          v105 = 8191.0;
          if (v104 <= 8191.0)
          {
            v105 = v104;
            if (v104 < 0.0)
              v105 = 0.0;
          }
          __asm
          {
            FCVT            S28, H1
            FCVT            S30, H27
            FCVT            S1, H2
          }
          _H0 = *(_WORD *)(v56 + 2 * llroundf(v105));
          __asm { FCVT            S0, H0 }
          v111 = _S24 * _S0;
          v112 = _S25 * _S0;
          v113 = _S26 * _S0;
          v114 = (float)((float)((float)(v63 * _S30) + (float)(v64 * _S28)) + (float)(v65 * _S1))
               + (float)(v66 * fmaxf(_S28, fmaxf(_S30, _S1)));
          v115 = 8191.0;
          if (v114 <= 8191.0)
          {
            v115 = v114;
            if (v114 < 0.0)
              v115 = 0.0;
          }
          _H0 = *(_WORD *)(v56 + 2 * llroundf(v115));
          __asm { FCVT            S0, H0 }
          v118 = _S28 * _S0;
          v119 = _S30 * _S0;
          v120 = _S1 * _S0;
          _S1 = (float)((float)(v48 * v112) + (float)(v111 * v45)) + (float)(v113 * v47);
          v122 = (float)((float)(v50 * v112) + (float)(v111 * v49)) + (float)(v113 * v51);
          _S24 = (float)((float)(v53 * v112) + (float)(v111 * v52)) + (float)(v113 * v54);
          v124 = (float)(v48 * v119) + (float)(v118 * v45);
          v125 = (float)(v50 * v119) + (float)(v118 * v49);
          _S2 = (float)(v53 * v119) + (float)(v118 * v52);
          _S25 = v124 + (float)(v120 * v47);
          v128 = v125 + (float)(v120 * v51);
          v129 = _S2 + (float)(v120 * v54);
          LOWORD(_S1) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          LOWORD(_S2) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v122, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          v132 = llroundf(fminf(fmaxf(_S24, 0.0), 8191.0));
          LOWORD(_S24) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(_S25, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          LOWORD(_S25) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v128, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          v135 = llroundf(fminf(fmaxf(v129, 0.0), 8191.0));
          v136 = (float)(v43 * _S2) + (float)(v42 * _S1);
          v137 = (float)(v43 * _S25) + (float)(v42 * _S24);
          v138 = _S1 + _S24;
          LOWORD(_S24) = *(_WORD *)(v58 + 2 * v132);
          v139 = _S2 + _S25;
          LOWORD(_S25) = *(_WORD *)(v58 + 2 * v135);
          __asm
          {
            FCVT            S24, H24
            FCVT            S25, H25
          }
          v142 = (float)(v136 + (float)(v44 * _S24)) + v37;
          v143 = v137 + (float)(v44 * _S25);
          v144 = _S24 + _S25;
          v145 = (float)(v162 + (float)(v138 * v161)) + (float)(v139 * v160);
          v146 = (float)(v162 + (float)(v138 * v158)) + (float)(v139 * v157);
          if (v142 < v37)
            v147 = v37;
          else
            v147 = v142;
          v86 = v142 <= v39;
          v148 = v145 + (float)(v144 * v159);
          if (!v86)
            v147 = v39;
          v149 = llroundf(v147);
          if (v148 < v40)
            v150 = v40;
          else
            v150 = v145 + (float)(v144 * v159);
          if (v148 <= v41)
            v151 = v150;
          else
            v151 = v41;
          v152 = llroundf(v151);
          v153 = v146 + (float)(v144 * v156);
          if ((float)(v143 + v37) < v37)
            v154 = v37;
          else
            v154 = v143 + v37;
          *v70 = v149;
          v70[1] = v152;
          if ((float)(v143 + v37) <= v39)
            v155 = v154;
          else
            v155 = v39;
          v70[2] = llroundf(v155);
          v46 = v41;
          if (v153 <= v41)
          {
            v46 = v153;
            if (v153 < v40)
              v46 = v40;
          }
          v70[3] = llroundf(v46);
          v34 = v77;
          if (v69)
            *v69++ = 0;
          v67 += 2;
          v68 += 2;
          v70 += 4;
        }
        while (v20 > v67);
      }
      v62 += v27;
      result = (_QWORD *)((char *)result + v28);
      v59 += v32;
      ++v19;
    }
    while (v19 != v23);
    if (v30 && v18)
    {
      do
      {
        result = memcpy(v16, v31, v20);
        v31 += v29;
        v16 += v14;
        --v23;
      }
      while (v23);
    }
    else if (v18)
    {
      do
      {
        if (v20)
          result = memset(v16, 255, v20);
        v16 += v14;
        --v23;
      }
      while (v23);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Mat_TRC_yuvsf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Mat_TRC_yuvsf_GCD);
  return 0;
}

_QWORD *vt_Copy_422vf_TRC_Mat_TRC_yuvsf_GCD(_QWORD *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  _WORD *v19;
  uint64_t v20;
  size_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  float v34;
  float v35;
  float v36;
  float v37;
  unsigned int v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  size_t v64;
  _BYTE *v65;
  _WORD *v66;
  _BYTE *v67;
  float v68;
  unsigned int v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  BOOL v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  unsigned int v102;
  float v104;
  float v106;
  float v107;
  float v108;
  float v111;
  float v112;
  unsigned int v115;
  unsigned int v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  char v132;
  float v133;
  char v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;

  v6 = *(_QWORD *)((char *)result + 28);
  v7 = *(unsigned __int8 *)result;
  v8 = v6 * a2 / v7;
  v9 = v6 + v6 * a2;
  v10 = result[14];
  v11 = result[13] * a2 / v7;
  v12 = (_QWORD *)result[16];
  v13 = v11 + result[15];
  v14 = (uint64_t *)result[17];
  v15 = v14[1];
  v16 = v12[1];
  v17 = (char *)(v16 + v15 * v13 + v10);
  v18 = v9 / v7;
  if (v16)
    v19 = (_WORD *)(v16 + v15 * v13 + v10);
  else
    v19 = 0;
  if (v18 != v8)
  {
    v20 = 0;
    v21 = *(_QWORD *)((char *)result + 20);
    v22 = *(_QWORD *)((char *)result + 36);
    v23 = v8 + *(_QWORD *)((char *)result + 44);
    v24 = v18 - v8;
    v25 = result[19];
    v26 = (_QWORD *)result[7];
    v27 = (uint64_t *)result[8];
    v28 = *v27;
    v29 = v27[1];
    v30 = v27[2];
    v31 = v26[2];
    v32 = (char *)(v31 + v30 * v23 + v22);
    v33 = *v14;
    LOWORD(a5) = *(_WORD *)(v25 + 140);
    LOWORD(a6) = *(_WORD *)(v25 + 142);
    v34 = 8191.0 / (float)*(unsigned int *)(v25 + 128);
    v35 = (float)LODWORD(a5);
    v36 = (float)LODWORD(a6);
    v37 = v34 * *(float *)v25;
    v144 = v34 * *(float *)(v25 + 16);
    v145 = v34 * *(float *)(v25 + 8);
    v142 = v34 * *(float *)(v25 + 28);
    *(float *)&v38 = v142;
    v143 = v34 * *(float *)(v25 + 20);
    LOWORD(v38) = *(_WORD *)(v25 + 144);
    v39 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v25 + 146);
    v40 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v25 + 148);
    v41 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v25 + 150);
    v42 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v25 + 152);
    v43 = (float)v38;
    v44 = *(float *)(v25 + 36);
    v45 = *(float *)(v25 + 40);
    v46 = *(float *)(v25 + 44);
    v140 = *(float *)(v25 + 52) * 0.5;
    v141 = *(float *)(v25 + 48) * 0.5;
    v138 = *(float *)(v25 + 60) * 0.5;
    v139 = *(float *)(v25 + 56) * 0.5;
    v47 = *(float *)(v25 + 64) * 0.5;
    v48 = *(float *)(v25 + 68);
    v49 = *(float *)(v25 + 72);
    v50 = v48 * 0.5;
    v52 = *(float *)(v25 + 76);
    v51 = *(float *)(v25 + 80);
    v53 = *(float *)(v25 + 84);
    v54 = *(float *)(v25 + 88);
    v55 = *(float *)(v25 + 92);
    v56 = *(float *)(v25 + 96);
    v57 = *(float *)(v25 + 100);
    v58 = *(float *)(v25 + 104);
    v59 = v25 + 16548;
    v60 = v25 + 164;
    v61 = (_BYTE *)(*v12 + v33 * v13 + v10);
    v62 = v26[1];
    if (v62)
      v63 = v62 + v29 * v23 + v22;
    else
      v63 = 0;
    result = (_QWORD *)(*v26 + v28 * v23 + v22);
    do
    {
      if (v21)
      {
        v64 = 0;
        v65 = result;
        v66 = v19;
        v67 = v61;
        do
        {
          LOBYTE(v48) = *(_BYTE *)(v63 + v64 + 1);
          v68 = (float)LODWORD(v48) - v36;
          v69 = LODWORD(v145);
          v70 = v145 * v68;
          LOBYTE(v69) = *v65;
          v71 = v37 * (float)((float)v69 - v35);
          v72 = (float)(v145 * v68) + v71;
          v73 = 8191.0;
          if (v72 <= 8191.0)
          {
            v73 = (float)(v145 * v68) + v71;
            if (v72 < 0.0)
              v73 = 0.0;
          }
          LOBYTE(v72) = *(_BYTE *)(v63 + v64);
          v74 = (float)LODWORD(v72) - v36;
          v75 = (float)(v143 * v68) + (float)(v74 * v144);
          v76 = 8191.0;
          if ((float)(v71 + v75) <= 8191.0)
          {
            v76 = v71 + v75;
            if ((float)(v71 + v75) < 0.0)
              v76 = 0.0;
          }
          v77 = v142 * v74;
          v78 = v77 + v71;
          v79 = (float)(v77 + v71) <= 8191.0;
          v80 = 8191.0;
          if (v79)
          {
            v80 = v78;
            if (v78 < 0.0)
              v80 = 0.0;
          }
          LOBYTE(v78) = v65[1];
          v81 = v37 * (float)((float)LODWORD(v78) - v35);
          v82 = v70 + v81;
          v83 = 8191.0;
          if (v82 <= 8191.0)
          {
            v83 = v82;
            if (v82 < 0.0)
              v83 = 0.0;
          }
          v84 = v75 + v81;
          v79 = (float)(v75 + v81) <= 8191.0;
          v85 = 8191.0;
          if (v79)
          {
            v85 = v84;
            if (v84 < 0.0)
              v85 = 0.0;
          }
          v86 = v77 + v81;
          v79 = (float)(v77 + v81) <= 8191.0;
          v87 = 8191.0;
          if (v79)
          {
            v87 = v86;
            if (v86 < 0.0)
              v87 = 0.0;
          }
          _H4 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H5 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H6 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H7 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          _H24 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          v102 = llroundf(fminf(fmaxf(v87, 0.0), 8191.0));
          _S25 = (float)((float)(v52 * _S5) + (float)(_S4 * v49)) + (float)(_S6 * v51);
          v104 = (float)((float)(v54 * _S5) + (float)(_S4 * v53)) + (float)(_S6 * v55);
          _S4 = (float)((float)(v57 * _S5) + (float)(_S4 * v56)) + (float)(_S6 * v58);
          v106 = (float)(v52 * _S24) + (float)(_S7 * v49);
          v107 = (float)(v54 * _S24) + (float)(_S7 * v53);
          v108 = (float)(v57 * _S24) + (float)(_S7 * v56);
          LOWORD(_S24) = *(_WORD *)(v60 + 2 * v102);
          __asm { FCVT            S24, H24 }
          _S5 = v106 + (float)(_S24 * v51);
          v111 = v107 + (float)(_S24 * v55);
          v112 = v108 + (float)(_S24 * v58);
          LOWORD(_S24) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(_S25, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          LOWORD(_S25) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v104, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          v115 = llroundf(fminf(fmaxf(_S4, 0.0), 8191.0));
          LOWORD(_S4) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          LOWORD(_S5) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v111, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          v118 = llroundf(fminf(fmaxf(v112, 0.0), 8191.0));
          v119 = (float)(v45 * _S25) + (float)(v44 * _S24);
          v120 = (float)(v45 * _S5) + (float)(v44 * _S4);
          v121 = _S24 + _S4;
          LOWORD(_S24) = *(_WORD *)(v59 + 2 * v115);
          v122 = _S25 + _S5;
          LOWORD(_S25) = *(_WORD *)(v59 + 2 * v118);
          __asm
          {
            FCVT            S24, H24
            FCVT            S25, H25
          }
          v125 = (float)(v119 + (float)(v46 * _S24)) + v39;
          v126 = v120 + (float)(v46 * _S25);
          v127 = _S24 + _S25;
          v128 = (float)(v40 + (float)(v121 * v141)) + (float)(v122 * v140);
          v129 = (float)(v40 + (float)(v121 * v138)) + (float)(v122 * v47);
          if (v125 < v39)
            v130 = v39;
          else
            v130 = v125;
          v79 = v125 <= v41;
          v131 = v128 + (float)(v127 * v139);
          if (!v79)
            v130 = v41;
          v132 = llroundf(v130);
          if (v131 < v42)
            v133 = v42;
          else
            v133 = v128 + (float)(v127 * v139);
          if (v131 > v43)
            v133 = v43;
          v134 = llroundf(v133);
          v48 = v129 + (float)(v127 * v50);
          if ((float)(v126 + v39) < v39)
            v135 = v39;
          else
            v135 = v126 + v39;
          *v67 = v132;
          v67[1] = v134;
          if ((float)(v126 + v39) <= v41)
            v136 = v135;
          else
            v136 = v41;
          v67[2] = llroundf(v136);
          v137 = v43;
          if (v48 <= v43)
          {
            v137 = v48;
            if (v48 < v42)
              v137 = v42;
          }
          v67[3] = llroundf(v137);
          if (v66)
            *v66++ = 0;
          v64 += 2;
          v65 += 2;
          v67 += 4;
        }
        while (v21 > v64);
      }
      result = (_QWORD *)((char *)result + v28);
      v63 += v29;
      v61 += v33;
      ++v20;
    }
    while (v20 != v24);
    if (v31 && v19)
    {
      do
      {
        result = memcpy(v17, v32, v21);
        v32 += v30;
        v17 += v15;
        --v24;
      }
      while (v24);
    }
    else if (v19)
    {
      do
      {
        if (v21)
          result = memset(v17, 255, v21);
        v17 += v15;
        --v24;
      }
      while (v24);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_rgb_yuvsf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_rgb_yuvsf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_422vf_rgb_yuvsf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, double a5, float a6, float a7)
{
  float v7;
  float v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  _WORD *v25;
  uint64_t v26;
  size_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  char *v43;
  uint64_t v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int8 *v67;
  size_t v68;
  _BYTE *v69;
  _WORD *v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;

  v14 = *(_QWORD *)(result + 28);
  v15 = *result;
  v16 = v14 * a2 / v15;
  v17 = *((_QWORD *)result + 14);
  v18 = (_QWORD *)*((_QWORD *)result + 16);
  v19 = *((_QWORD *)result + 13) * a2 / v15 + *((_QWORD *)result + 15);
  v20 = (uint64_t *)*((_QWORD *)result + 17);
  v21 = v20[1];
  v22 = v18[1];
  v23 = (char *)(v22 + v21 * v19 + v17);
  v24 = (v14 + v14 * a2) / v15;
  if (v22)
    v25 = (_WORD *)(v22 + v21 * v19 + v17);
  else
    v25 = 0;
  if (v24 != v16)
  {
    v26 = 0;
    v27 = *(_QWORD *)(result + 20);
    v28 = *(_QWORD *)(result + 36);
    v29 = v16 + *(_QWORD *)(result + 44);
    v30 = v24 - v16;
    v31 = *((_QWORD *)result + 19);
    v32 = (_QWORD *)*((_QWORD *)result + 7);
    v33 = (uint64_t *)*((_QWORD *)result + 8);
    v34 = *v33;
    v35 = v33[1];
    v36 = v33[2];
    v37 = v32[2];
    LOWORD(a6) = *(_WORD *)(v31 + 140);
    LOWORD(a7) = *(_WORD *)(v31 + 142);
    v38 = (float)*(unsigned int *)(v31 + 136) / (float)*(unsigned int *)(v31 + 128);
    LOWORD(v9) = *(_WORD *)(v31 + 144);
    LOWORD(v10) = *(_WORD *)(v31 + 146);
    LOWORD(v11) = *(_WORD *)(v31 + 148);
    LOWORD(v12) = *(_WORD *)(v31 + 150);
    LOWORD(v13) = *(_WORD *)(v31 + 152);
    v39 = *(float *)(v31 + 36);
    v40 = *(float *)(v31 + 40);
    v41 = *(float *)(v31 + 44);
    v42 = *(float *)(v31 + 68);
    v43 = (char *)(v37 + v36 * v29 + v28);
    v44 = *v20;
    v45 = (float)LODWORD(a6);
    v46 = (float)LODWORD(a7);
    v47 = v38 * *(float *)v31;
    v48 = v38 * *(float *)(v31 + 8);
    v49 = v38 * *(float *)(v31 + 16);
    v50 = v38 * *(float *)(v31 + 20);
    v51 = v38 * *(float *)(v31 + 28);
    v52 = (float)v9;
    v53 = (float)v10;
    v54 = (float)v11;
    v55 = (float)v12;
    v56 = (float)v13;
    v57 = 0.5;
    v58 = *(float *)(v31 + 48) * 0.5;
    v59 = *(float *)(v31 + 52) * 0.5;
    v60 = *(float *)(v31 + 56) * 0.5;
    v61 = *(float *)(v31 + 60) * 0.5;
    v62 = *(float *)(v31 + 64) * 0.5;
    v63 = v42 * 0.5;
    v64 = (_BYTE *)(*v18 + v44 * v19 + v17);
    v65 = v32[1];
    result = (unsigned __int8 *)(v65 + v35 * v29 + v28);
    if (v65)
      v66 = v65 + v35 * v29 + v28;
    else
      v66 = 0;
    v67 = (unsigned __int8 *)(*v32 + v34 * v29 + v28);
    do
    {
      if (v27)
      {
        v68 = 0;
        result = v67;
        v69 = v64;
        v70 = v25;
        do
        {
          LOBYTE(v42) = *(_BYTE *)(v66 + v68);
          v71 = (float)LODWORD(v42) - v46;
          LOBYTE(v57) = *(_BYTE *)(v66 + v68 + 1);
          v72 = (float)LODWORD(v57) - v46;
          v73 = v48 * v72;
          v74 = (float)(v50 * v72) + (float)(v71 * v49);
          v75 = v51 * v71;
          LOBYTE(v7) = *result;
          v76 = v47 * (float)((float)LODWORD(v7) - v45);
          LOBYTE(v8) = result[1];
          v77 = v47 * (float)((float)LODWORD(v8) - v45);
          v78 = v73 + v76;
          v79 = v76 + v74;
          v80 = v75 + v76;
          v81 = v73 + v77;
          v82 = v74 + v77;
          v83 = v75 + v77;
          v84 = (float)((float)((float)(v40 * v79) + (float)(v39 * v78)) + (float)(v41 * (float)(v75 + v76))) + v52;
          v7 = (float)((float)((float)(v40 * v82) + (float)(v39 * v81)) + (float)(v41 * v83)) + v52;
          v85 = v78 + v81;
          v86 = v79 + v82;
          v87 = (float)(v53 + (float)((float)(v78 + v81) * v58)) + (float)(v86 * v59);
          v88 = v80 + v83;
          v89 = v87 + (float)((float)(v80 + v83) * v60);
          if (v84 < v52)
            v90 = v52;
          else
            v90 = v84;
          if (v84 > v54)
            v90 = v54;
          *v69 = llroundf(v90);
          if (v89 < v55)
            v91 = v55;
          else
            v91 = v89;
          if (v89 <= v56)
            v92 = v91;
          else
            v92 = v56;
          v69[1] = llroundf(v92);
          v8 = v54;
          if (v7 <= v54)
          {
            v8 = v7;
            if (v7 < v52)
              v8 = v52;
          }
          v42 = (float)((float)(v53 + (float)(v85 * v61)) + (float)(v86 * v62)) + (float)(v88 * v63);
          v69[2] = llroundf(v8);
          v57 = v56;
          if (v42 <= v56)
          {
            v57 = v42;
            if (v42 < v55)
              v57 = v55;
          }
          v69[3] = llroundf(v57);
          if (v70)
            *v70++ = 0;
          v68 += 2;
          result += 2;
          v69 += 4;
        }
        while (v27 > v68);
      }
      v67 += v34;
      v66 += v35;
      v64 += v44;
      ++v26;
    }
    while (v26 != v30);
    if (v37 && v25)
    {
      do
      {
        result = (unsigned __int8 *)memcpy(v23, v43, v27);
        v43 += v36;
        v23 += v21;
        --v30;
      }
      while (v30);
    }
    else if (v25)
    {
      do
      {
        if (v27)
          result = (unsigned __int8 *)memset(v23, 255, v27);
        v23 += v21;
        --v30;
      }
      while (v30);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Tone_Mat_TRC_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v20 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v18 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Tone_Mat_TRC_xf422_GCD);
  return 0;
}

_QWORD *vt_Copy_422vf_TRC_Tone_Mat_TRC_xf422_GCD(_QWORD *result, uint64_t a2, double a3, float a4, double a5, float a6)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  float v32;
  float v33;
  float v34;
  unsigned int v35;
  float v36;
  float v37;
  float v38;
  unsigned int v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  uint64_t v54;
  unsigned int v55;
  char v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _WORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE *v67;
  char v68;
  float v69;
  float v70;
  float v71;
  float v72;
  unint64_t v73;
  _BYTE *v74;
  _WORD *v75;
  float v76;
  unsigned int v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  unsigned int v87;
  float v88;
  float v89;
  BOOL v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v111;
  float v112;
  float v117;
  float v118;
  float v120;
  float v122;
  float v126;
  float v127;
  float v128;
  float v129;
  float v131;
  float v132;
  float v133;
  float v140;
  float v141;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  _WORD *v152;
  float v153;
  float v154;
  uint64_t v155;
  unint64_t v156;
  _WORD *v157;
  unsigned __int8 *v158;
  __int16 v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;

  v6 = *(_QWORD *)((char *)result + 28);
  v7 = *(unsigned __int8 *)result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)((char *)result + 20);
    v12 = *(_QWORD *)((char *)result + 36);
    v13 = v8 + *(_QWORD *)((char *)result + 44);
    v14 = v9 - v8;
    v15 = result[14];
    v16 = (_QWORD *)result[16];
    v17 = result[13] * a2 / v7 + result[15];
    v18 = result[19];
    v19 = (uint64_t *)result[7];
    v20 = (uint64_t *)result[8];
    v21 = (uint64_t *)result[17];
    v22 = *v20;
    v23 = v20[1];
    v24 = v20[2];
    v25 = v19[2];
    v26 = (unsigned __int8 *)(v25 + v24 * v13 + v12);
    v27 = *v21;
    v28 = v21[1];
    v29 = v21[2];
    v30 = v16[2];
    v31 = (char *)(v30 + v29 * v17 + 2 * v15);
    LOWORD(a4) = *(_WORD *)(v18 + 140);
    LOWORD(a6) = *(_WORD *)(v18 + 142);
    v32 = 8191.0 / (float)*(unsigned int *)(v18 + 128);
    v33 = (float)LODWORD(a6);
    v171 = v32 * *(float *)v18;
    v172 = (float)LODWORD(a4);
    v168 = v32 * *(float *)(v18 + 16);
    v169 = v32 * *(float *)(v18 + 8);
    v34 = v32 * *(float *)(v18 + 20);
    *(float *)&v35 = v32 * *(float *)(v18 + 28);
    v166 = *(float *)&v35;
    v167 = v34;
    LOWORD(v35) = *(_WORD *)(v18 + 144);
    v36 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v18 + 146);
    v37 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v18 + 148);
    v38 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v18 + 150);
    *(float *)&v39 = (float)v35;
    v170 = *(float *)&v39;
    LOWORD(v39) = *(_WORD *)(v18 + 152);
    v40 = (float)v39;
    v41 = *(float *)(v18 + 36);
    v42 = *(float *)(v18 + 40);
    v43 = *(float *)(v18 + 44);
    v164 = *(float *)(v18 + 52) * 0.5;
    v165 = *(float *)(v18 + 48) * 0.5;
    v162 = *(float *)(v18 + 60) * 0.5;
    v163 = *(float *)(v18 + 56) * 0.5;
    v44 = *(float *)(v18 + 72);
    v45 = *(float *)(v18 + 68) * 0.5;
    v160 = v45;
    v161 = *(float *)(v18 + 64) * 0.5;
    v47 = *(float *)(v18 + 76);
    v46 = *(float *)(v18 + 80);
    v48 = *(float *)(v18 + 84);
    v49 = *(float *)(v18 + 88);
    v50 = *(float *)(v18 + 92);
    v51 = *(float *)(v18 + 96);
    v52 = *(float *)(v18 + 100);
    v53 = *(float *)(v18 + 104);
    v54 = v18 + 164;
    result = (_QWORD *)(v18 + 16548);
    v55 = *(unsigned __int8 *)(v18 + 132);
    if (v55 >= 0x11)
      v56 = 0;
    else
      v56 = 16 - v55;
    v57 = v16[1];
    _ZF = v57 == 0;
    v59 = v57 + v28 * v17;
    v60 = *v16 + v27 * v17;
    v61 = v18 + 32932;
    v62 = v59 + 2 * v15;
    if (_ZF)
      v62 = 0;
    v63 = (_WORD *)(v60 + 2 * v15);
    v65 = *v19;
    v64 = v19[1];
    v66 = v64 + v23 * v13 + v12;
    if (!v64)
      v66 = 0;
    v67 = (_BYTE *)(v65 + v22 * v13 + v12);
    v68 = v56;
    v70 = *(float *)(v18 + 108);
    v69 = *(float *)(v18 + 112);
    v71 = *(float *)(v18 + 116);
    v72 = *(float *)(v18 + 120);
    do
    {
      if (v11)
      {
        v73 = 0;
        v74 = v67;
        v75 = v63;
        do
        {
          LOBYTE(v45) = *(_BYTE *)(v66 + v73 + 1);
          v76 = (float)LODWORD(v45) - v33;
          v77 = LODWORD(v169);
          v78 = v169 * v76;
          LOBYTE(v77) = *v74;
          v79 = (float)v77 - v172;
          v80 = v171 * v79;
          v81 = (float)(v169 * v76) + (float)(v171 * v79);
          v82 = 8191.0;
          if (v81 <= 8191.0)
          {
            v82 = (float)(v169 * v76) + (float)(v171 * v79);
            if (v81 < 0.0)
              v82 = 0.0;
          }
          LOBYTE(v79) = *(_BYTE *)(v66 + v73);
          v83 = v33;
          v84 = (float)LODWORD(v79) - v33;
          v85 = (float)(v167 * v76) + (float)(v84 * v168);
          v86 = 8191.0;
          if ((float)(v80 + v85) <= 8191.0)
          {
            v86 = v80 + v85;
            if ((float)(v80 + v85) < 0.0)
              v86 = 0.0;
          }
          v87 = LODWORD(v166);
          v88 = v166 * v84;
          v89 = v88 + v80;
          v90 = (float)(v88 + v80) <= 8191.0;
          v91 = 8191.0;
          if (v90)
          {
            v91 = v89;
            if (v89 < 0.0)
              v91 = 0.0;
          }
          LOBYTE(v87) = v74[1];
          v92 = v171 * (float)((float)v87 - v172);
          v93 = v78 + v92;
          v94 = 8191.0;
          if (v93 <= 8191.0)
          {
            v94 = v93;
            if (v93 < 0.0)
              v94 = 0.0;
          }
          v95 = v85 + v92;
          v90 = (float)(v85 + v92) <= 8191.0;
          v96 = 8191.0;
          if (v90)
          {
            v96 = v95;
            if (v95 < 0.0)
              v96 = 0.0;
          }
          v97 = v88 + v92;
          v90 = (float)(v88 + v92) <= 8191.0;
          v98 = 8191.0;
          if (v90)
          {
            v98 = v97;
            if (v97 < 0.0)
              v98 = 0.0;
          }
          _H0 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          __asm { FCVT            S24, H0 }
          _H0 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          __asm { FCVT            S25, H0 }
          _H0 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          __asm { FCVT            S26, H0 }
          _H19 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          _H28 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v96, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          v111 = (float)((float)((float)(v69 * _S25) + (float)(v70 * _S24)) + (float)(v71 * _S26))
               + (float)(v72 * fmaxf(_S24, fmaxf(_S25, _S26)));
          v112 = 8191.0;
          if (v111 <= 8191.0)
          {
            v112 = v111;
            if (v111 < 0.0)
              v112 = 0.0;
          }
          __asm
          {
            FCVT            S27, H19
            FCVT            S28, H28
            FCVT            S30, H30
          }
          _H19 = *((_WORD *)result + llroundf(v112));
          v117 = (float)((float)((float)(v69 * _S28) + (float)(v70 * _S27)) + (float)(v71 * _S30))
               + (float)(v72 * fmaxf(_S27, fmaxf(_S28, _S30)));
          v118 = 8191.0;
          if (v117 <= 8191.0)
          {
            v118 = v117;
            if (v117 < 0.0)
              v118 = 0.0;
          }
          __asm { FCVT            S18, H19 }
          v120 = _S24 * _S18;
          _S24 = _S25 * _S18;
          v122 = _S26 * _S18;
          _H0 = *((_WORD *)result + llroundf(v118));
          __asm { FCVT            S0, H0 }
          _S25 = _S27 * _S0;
          v126 = _S28 * _S0;
          v127 = _S30 * _S0;
          v128 = (float)((float)(v47 * _S24) + (float)(v120 * v44)) + (float)(v122 * v46);
          v129 = (float)((float)(v49 * _S24) + (float)(v120 * v48)) + (float)(v122 * v50);
          _S18 = (float)((float)(v52 * _S24) + (float)(v120 * v51)) + (float)(v122 * v53);
          v131 = (float)((float)(v47 * v126) + (float)(_S25 * v44)) + (float)(v127 * v46);
          v132 = (float)((float)(v49 * v126) + (float)(_S25 * v48)) + (float)(v127 * v50);
          v133 = (float)((float)(v52 * v126) + (float)(_S25 * v51)) + (float)(v127 * v53);
          LOWORD(_S24) = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v128, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          LOWORD(_S25) = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v129, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          LOWORD(_S18) = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(_S18, 0.0), 8191.0)));
          __asm { FCVT            S26, H18 }
          _H19 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v131, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v132, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v133, 0.0), 8191.0)));
          v140 = (float)((float)((float)(v42 * _S25) + (float)(v41 * _S24)) + (float)(v43 * _S26)) + v36;
          v141 = v38;
          if (v140 <= v38)
          {
            v141 = (float)((float)((float)(v42 * _S25) + (float)(v41 * _S24)) + (float)(v43 * _S26)) + v36;
            if (v140 < v36)
              v141 = v36;
          }
          __asm
          {
            FCVT            S28, H19
            FCVT            S27, H27
            FCVT            S19, H30
          }
          v145 = (float)((float)((float)(v42 * _S27) + (float)(v41 * _S28)) + (float)(v43 * _S19)) + v36;
          *v75 = llroundf(v141) << v68;
          v146 = v38;
          if (v145 <= v38)
          {
            v146 = (float)((float)((float)(v42 * _S27) + (float)(v41 * _S28)) + (float)(v43 * _S19)) + v36;
            if (v145 < v36)
              v146 = v36;
          }
          v75[1] = llroundf(v146) << v68;
          v147 = _S24 + _S28;
          v148 = _S25 + _S27;
          v149 = _S26 + _S19;
          v150 = (float)((float)(v37 + (float)(v147 * v165)) + (float)(v148 * v164)) + (float)(v149 * v163);
          v151 = v40;
          if (v150 <= v40)
          {
            v151 = (float)((float)(v37 + (float)(v147 * v165)) + (float)(v148 * v164)) + (float)(v149 * v163);
            if (v150 < v170)
              v151 = v170;
          }
          v152 = (_WORD *)(v62 + 2 * v73);
          v45 = (float)(v37 + (float)(v147 * v162)) + (float)(v148 * v161);
          v153 = v45 + (float)(v149 * v160);
          *v152 = llroundf(v151) << v68;
          v154 = v40;
          if (v153 <= v40)
          {
            v45 = v170;
            v154 = v153;
            if (v153 < v170)
              v154 = v170;
          }
          v152[1] = llroundf(v154) << v68;
          v73 += 2;
          v74 += 2;
          v75 += 2;
          v33 = v83;
        }
        while (v11 > v73);
      }
      v67 += v22;
      v66 += v23;
      v63 = (_WORD *)((char *)v63 + v27);
      v62 += v28;
      ++v10;
    }
    while (v10 != v14);
    if (v25 && v30)
    {
      v155 = 0;
      do
      {
        if (v11)
        {
          v156 = v11;
          v157 = v31;
          v158 = v26;
          do
          {
            v159 = *v158++;
            *v157++ = v159 | (v159 << 8);
            --v156;
          }
          while (v156);
        }
        v26 += v24;
        v31 += v29;
        ++v155;
      }
      while (v155 != v14);
    }
    else if (v30)
    {
      do
      {
        if (v11)
          result = memset(v31, 255, 2 * v11);
        v31 += v29;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Mat_TRC_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v20 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v18 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Mat_TRC_xf422_GCD);
  return 0;
}

_QWORD *vt_Copy_422vf_TRC_Mat_TRC_xf422_GCD(_QWORD *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  float v33;
  float v34;
  float v35;
  float v36;
  unsigned int v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  uint64_t v56;
  unsigned int v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE *v66;
  char v67;
  unint64_t v68;
  _BYTE *v69;
  _WORD *v70;
  float v71;
  unsigned int v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  BOOL v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v107;
  float v108;
  float v110;
  float v111;
  float v112;
  float v119;
  float v120;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  _WORD *v131;
  float v132;
  uint64_t v133;
  unint64_t v134;
  _WORD *v135;
  unsigned __int8 *v136;
  __int16 v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;

  v6 = *(_QWORD *)((char *)result + 28);
  v7 = *(unsigned __int8 *)result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)((char *)result + 20);
    v12 = *(_QWORD *)((char *)result + 36);
    v13 = v8 + *(_QWORD *)((char *)result + 44);
    v14 = v9 - v8;
    v15 = result[14];
    v16 = result[13] * a2 / v7;
    v17 = (uint64_t *)result[16];
    v18 = v16 + result[15];
    v19 = result[19];
    v20 = (uint64_t *)result[7];
    v21 = (uint64_t *)result[8];
    v22 = (uint64_t *)result[17];
    v23 = *v21;
    v24 = v21[1];
    v25 = v21[2];
    v26 = v20[2];
    v27 = (unsigned __int8 *)(v26 + v25 * v13 + v12);
    v28 = *v22;
    v29 = v22[1];
    v30 = v22[2];
    v31 = v17[2];
    v32 = (char *)(v31 + v30 * v18 + 2 * v15);
    LOWORD(a5) = *(_WORD *)(v19 + 140);
    LOWORD(a6) = *(_WORD *)(v19 + 142);
    v33 = 8191.0 / (float)*(unsigned int *)(v19 + 128);
    v34 = (float)LODWORD(a5);
    v35 = (float)LODWORD(a6);
    v36 = v33 * *(float *)v19;
    v146 = v33 * *(float *)(v19 + 16);
    v147 = v33 * *(float *)(v19 + 8);
    v144 = v33 * *(float *)(v19 + 28);
    *(float *)&v37 = v144;
    v145 = v33 * *(float *)(v19 + 20);
    LOWORD(v37) = *(_WORD *)(v19 + 144);
    v38 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v19 + 146);
    v39 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v19 + 148);
    v40 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v19 + 150);
    v41 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v19 + 152);
    v42 = (float)v37;
    v43 = *(float *)(v19 + 36);
    v44 = *(float *)(v19 + 40);
    v45 = *(float *)(v19 + 44);
    v142 = *(float *)(v19 + 52) * 0.5;
    v143 = *(float *)(v19 + 48) * 0.5;
    v140 = *(float *)(v19 + 60) * 0.5;
    v141 = *(float *)(v19 + 56) * 0.5;
    v46 = *(float *)(v19 + 72);
    v47 = *(float *)(v19 + 68) * 0.5;
    v138 = v47;
    v139 = *(float *)(v19 + 64) * 0.5;
    v49 = *(float *)(v19 + 76);
    v48 = *(float *)(v19 + 80);
    v50 = *(float *)(v19 + 84);
    v51 = *(float *)(v19 + 88);
    v52 = *(float *)(v19 + 92);
    v53 = *(float *)(v19 + 96);
    v54 = *(float *)(v19 + 100);
    v55 = *(float *)(v19 + 104);
    v56 = v19 + 164;
    result = (_QWORD *)(v19 + 16548);
    v57 = *(unsigned __int8 *)(v19 + 132);
    if (v57 >= 0x11)
      v58 = 0;
    else
      v58 = 16 - v57;
    v60 = *v17;
    v59 = v17[1];
    v61 = v59 + v29 * v18 + 2 * v15;
    if (!v59)
      v61 = 0;
    v62 = v60 + v28 * v18 + 2 * v15;
    v64 = *v20;
    v63 = v20[1];
    v65 = v63 + v24 * v13 + v12;
    if (!v63)
      v65 = 0;
    v66 = (_BYTE *)(v64 + v23 * v13 + v12);
    v67 = v58;
    do
    {
      if (v11)
      {
        v68 = 0;
        v69 = v66;
        v70 = (_WORD *)v62;
        do
        {
          LOBYTE(v47) = *(_BYTE *)(v65 + v68 + 1);
          v71 = (float)LODWORD(v47) - v35;
          v72 = LODWORD(v147);
          v73 = v147 * v71;
          LOBYTE(v72) = *v69;
          v74 = v36 * (float)((float)v72 - v34);
          v75 = (float)(v147 * v71) + v74;
          v76 = 8191.0;
          if (v75 <= 8191.0)
          {
            v76 = (float)(v147 * v71) + v74;
            if (v75 < 0.0)
              v76 = 0.0;
          }
          LOBYTE(v75) = *(_BYTE *)(v65 + v68);
          v77 = (float)LODWORD(v75) - v35;
          v78 = (float)(v145 * v71) + (float)(v77 * v146);
          v79 = 8191.0;
          if ((float)(v74 + v78) <= 8191.0)
          {
            v79 = v74 + v78;
            if ((float)(v74 + v78) < 0.0)
              v79 = 0.0;
          }
          v80 = v144 * v77;
          v81 = v80 + v74;
          v82 = (float)(v80 + v74) <= 8191.0;
          v83 = 8191.0;
          if (v82)
          {
            v83 = v81;
            if (v81 < 0.0)
              v83 = 0.0;
          }
          LOBYTE(v81) = v69[1];
          v84 = v36 * (float)((float)LODWORD(v81) - v34);
          v85 = v73 + v84;
          v82 = (float)(v73 + v84) <= 8191.0;
          v86 = 8191.0;
          if (v82)
          {
            v86 = v85;
            if (v85 < 0.0)
              v86 = 0.0;
          }
          v87 = v78 + v84;
          v82 = (float)(v78 + v84) <= 8191.0;
          v88 = 8191.0;
          if (v82)
          {
            v88 = v87;
            if (v87 < 0.0)
              v88 = 0.0;
          }
          v89 = v80 + v84;
          v82 = (float)(v80 + v84) <= 8191.0;
          v90 = 8191.0;
          if (v82)
          {
            v90 = v89;
            if (v89 < 0.0)
              v90 = 0.0;
          }
          _H4 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H5 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H6 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H7 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          _H18 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          __asm
          {
            FCVT            S7, H7
            FCVT            S18, H18
          }
          _H24 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          v107 = (float)((float)(v49 * _S5) + (float)(_S4 * v46)) + (float)(_S6 * v48);
          v108 = (float)((float)(v51 * _S5) + (float)(_S4 * v50)) + (float)(_S6 * v52);
          _S6 = (float)((float)(v54 * _S5) + (float)(_S4 * v53)) + (float)(_S6 * v55);
          v110 = (float)((float)(v49 * _S18) + (float)(_S7 * v46)) + (float)(_S24 * v48);
          v111 = (float)((float)(v51 * _S18) + (float)(_S7 * v50)) + (float)(_S24 * v52);
          v112 = (float)((float)(v54 * _S18) + (float)(_S7 * v53)) + (float)(_S24 * v55);
          LOWORD(_S4) = *((_WORD *)result + llroundf(fminf(fmaxf(v107, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          LOWORD(_S5) = *((_WORD *)result + llroundf(fminf(fmaxf(v108, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = *((_WORD *)result + llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H7 = *((_WORD *)result + llroundf(fminf(fmaxf(v110, 0.0), 8191.0)));
          _H24 = *((_WORD *)result + llroundf(fminf(fmaxf(v111, 0.0), 8191.0)));
          _H26 = *((_WORD *)result + llroundf(fminf(fmaxf(v112, 0.0), 8191.0)));
          v119 = (float)((float)((float)(v44 * _S5) + (float)(v43 * _S4)) + (float)(v45 * _S6)) + v38;
          v120 = v40;
          if (v119 <= v40)
          {
            v120 = (float)((float)((float)(v44 * _S5) + (float)(v43 * _S4)) + (float)(v45 * _S6)) + v38;
            if (v119 < v38)
              v120 = v38;
          }
          __asm
          {
            FCVT            S25, H7
            FCVT            S24, H24
            FCVT            S7, H26
          }
          v124 = (float)((float)((float)(v44 * _S24) + (float)(v43 * _S25)) + (float)(v45 * _S7)) + v38;
          *v70 = llroundf(v120) << v67;
          v125 = v40;
          if (v124 <= v40)
          {
            v125 = (float)((float)((float)(v44 * _S24) + (float)(v43 * _S25)) + (float)(v45 * _S7)) + v38;
            if (v124 < v38)
              v125 = v38;
          }
          v70[1] = llroundf(v125) << v67;
          v126 = _S4 + _S25;
          v127 = _S5 + _S24;
          v128 = _S6 + _S7;
          v129 = (float)((float)(v39 + (float)(v126 * v143)) + (float)(v127 * v142)) + (float)(v128 * v141);
          v130 = v42;
          if (v129 <= v42)
          {
            v130 = (float)((float)(v39 + (float)(v126 * v143)) + (float)(v127 * v142)) + (float)(v128 * v141);
            if (v129 < v41)
              v130 = v41;
          }
          v131 = (_WORD *)(v61 + 2 * v68);
          v47 = (float)((float)(v39 + (float)(v126 * v140)) + (float)(v127 * v139)) + (float)(v128 * v138);
          *v131 = llroundf(v130) << v67;
          v132 = v42;
          if (v47 <= v42)
          {
            v132 = v47;
            if (v47 < v41)
              v132 = v41;
          }
          v131[1] = llroundf(v132) << v67;
          v68 += 2;
          v69 += 2;
          v70 += 2;
        }
        while (v11 > v68);
      }
      v66 += v23;
      v65 += v24;
      v62 += v28;
      v61 += v29;
      ++v10;
    }
    while (v10 != v14);
    if (v26 && v31)
    {
      v133 = 0;
      do
      {
        if (v11)
        {
          v134 = v11;
          v135 = v32;
          v136 = v27;
          do
          {
            v137 = *v136++;
            *v135++ = v137 | (v137 << 8);
            --v134;
          }
          while (v134);
        }
        v27 += v25;
        v32 += v30;
        ++v133;
      }
      while (v133 != v14);
    }
    else if (v31)
    {
      do
      {
        if (v11)
          result = memset(v32, 255, 2 * v11);
        v32 += v30;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_rgb_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v20 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v18 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_rgb_xf422_GCD);
  return 0;
}

_QWORD *vt_Copy_422vf_rgb_xf422_GCD(_QWORD *result, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  float v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  unsigned int v33;
  unsigned int v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  unsigned int v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE *v67;
  char v68;
  unint64_t v69;
  _BYTE *v70;
  _WORD *v71;
  unsigned int v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  _WORD *v94;
  uint64_t v95;
  unint64_t v96;
  _WORD *v97;
  unsigned __int8 *v98;
  __int16 v99;

  v7 = *(_QWORD *)((char *)result + 28);
  v8 = *(unsigned __int8 *)result;
  v9 = v7 * a2 / v8;
  v10 = (v7 + v7 * a2) / v8;
  if (v10 != v9)
  {
    v11 = 0;
    v12 = *(_QWORD *)((char *)result + 20);
    v13 = *(_QWORD *)((char *)result + 36);
    v14 = v9 + *(_QWORD *)((char *)result + 44);
    v15 = v10 - v9;
    v16 = result[14];
    v17 = (uint64_t *)result[16];
    v18 = result[13] * a2 / v8 + result[15];
    v19 = result[19];
    v20 = (uint64_t *)result[7];
    v21 = (uint64_t *)result[8];
    v22 = (uint64_t *)result[17];
    v23 = *v21;
    v24 = v21[1];
    v25 = v21[2];
    v26 = v20[2];
    v27 = (unsigned __int8 *)(v26 + v25 * v14 + v13);
    v28 = *v22;
    v29 = v22[1];
    v30 = v22[2];
    v31 = v17[2];
    v32 = (char *)(v31 + v30 * v18 + 2 * v16);
    *(float *)&v33 = (float)*(unsigned int *)(v19 + 128);
    *(float *)&v34 = (float)*(unsigned int *)(v19 + 136);
    v35 = *(float *)&v34 / *(float *)&v33;
    LOWORD(v33) = *(_WORD *)(v19 + 140);
    v36 = (float)v33;
    LOWORD(v34) = *(_WORD *)(v19 + 142);
    v37 = (float)v34;
    v38 = v35 * *(float *)v19;
    v39 = v35 * *(float *)(v19 + 8);
    v40 = v35 * *(float *)(v19 + 16);
    v41 = v35 * *(float *)(v19 + 20);
    v42 = *(float *)(v19 + 28);
    v43 = v35 * v42;
    LOWORD(v42) = *(_WORD *)(v19 + 144);
    v44 = (float)LODWORD(v42);
    LOWORD(v2) = *(_WORD *)(v19 + 146);
    v45 = (float)v2;
    LOWORD(v3) = *(_WORD *)(v19 + 148);
    v46 = (float)v3;
    LOWORD(v4) = *(_WORD *)(v19 + 150);
    v47 = (float)v4;
    LOWORD(v5) = *(_WORD *)(v19 + 152);
    v48 = (float)v5;
    v49 = *(float *)(v19 + 36);
    v50 = *(float *)(v19 + 40);
    v51 = *(float *)(v19 + 44);
    v52 = *(float *)(v19 + 48) * 0.5;
    v53 = *(float *)(v19 + 52) * 0.5;
    v54 = *(float *)(v19 + 56) * 0.5;
    v55 = *(float *)(v19 + 60) * 0.5;
    v56 = *(float *)(v19 + 64) * 0.5;
    v57 = *(float *)(v19 + 68);
    v58 = v57 * 0.5;
    v59 = *(unsigned __int8 *)(v19 + 132);
    v60 = 16 - v59;
    if (v59 >= 0x11)
      v60 = 0;
    v62 = *v17;
    v61 = v17[1];
    v63 = v61 + v29 * v18 + 2 * v16;
    if (!v61)
      v63 = 0;
    result = (_QWORD *)(v62 + v28 * v18 + 2 * v16);
    v65 = *v20;
    v64 = v20[1];
    v66 = v64 + v24 * v14 + v13;
    if (!v64)
      v66 = 0;
    v67 = (_BYTE *)(v65 + v23 * v14 + v13);
    v68 = v60;
    do
    {
      if (v12)
      {
        v69 = 0;
        v70 = v67;
        v71 = result;
        do
        {
          LOBYTE(v57) = *(_BYTE *)(v66 + v69);
          *(float *)&v72 = (float)LODWORD(v57) - v37;
          LOBYTE(v6) = *(_BYTE *)(v66 + v69 + 1);
          v73 = (float)LODWORD(v6) - v37;
          v74 = v39 * v73;
          v75 = (float)(v41 * v73) + (float)(*(float *)&v72 * v40);
          v76 = v43 * *(float *)&v72;
          LOBYTE(v72) = *v70;
          v77 = v38 * (float)((float)v72 - v36);
          v78 = (float)(v39 * v73) + v77;
          v79 = v77 + v75;
          v80 = v76 + v77;
          v81 = (float)((float)((float)(v50 * v79) + (float)(v49 * v78)) + (float)(v51 * v80)) + v44;
          v82 = v46;
          if (v81 <= v46)
          {
            v82 = (float)((float)((float)(v50 * v79) + (float)(v49 * v78)) + (float)(v51 * v80)) + v44;
            if (v81 < v44)
              v82 = v44;
          }
          LOBYTE(v81) = v70[1];
          v83 = v38 * (float)((float)LODWORD(v81) - v36);
          v84 = v74 + v83;
          v85 = v75 + v83;
          v86 = v76 + v83;
          v87 = (float)((float)((float)(v50 * v85) + (float)(v49 * v84)) + (float)(v51 * (float)(v76 + v83))) + v44;
          *v71 = llroundf(v82) << v68;
          v88 = v46;
          if (v87 <= v46)
          {
            v88 = v87;
            if (v87 < v44)
              v88 = v44;
          }
          v71[1] = llroundf(v88) << v68;
          v89 = v78 + v84;
          v90 = v79 + v85;
          v91 = v80 + v86;
          v92 = (float)((float)(v45 + (float)(v89 * v52)) + (float)(v90 * v53)) + (float)(v91 * v54);
          v93 = v48;
          if (v92 <= v48)
          {
            v93 = (float)((float)(v45 + (float)(v89 * v52)) + (float)(v90 * v53)) + (float)(v91 * v54);
            if (v92 < v47)
              v93 = v47;
          }
          v94 = (_WORD *)(v63 + 2 * v69);
          v57 = (float)((float)(v45 + (float)(v89 * v55)) + (float)(v90 * v56)) + (float)(v91 * v58);
          *v94 = llroundf(v93) << v68;
          v6 = v48;
          if (v57 <= v48)
          {
            v6 = v57;
            if (v57 < v47)
              v6 = v47;
          }
          v94[1] = llroundf(v6) << v68;
          v69 += 2;
          v70 += 2;
          v71 += 2;
        }
        while (v12 > v69);
      }
      v67 += v23;
      v66 += v24;
      result = (_QWORD *)((char *)result + v28);
      v63 += v29;
      ++v11;
    }
    while (v11 != v15);
    if (v26 && v31)
    {
      v95 = 0;
      do
      {
        if (v12)
        {
          v96 = v12;
          v97 = v32;
          v98 = v27;
          do
          {
            v99 = *v98++;
            *v97++ = v99 | (v99 << 8);
            --v96;
          }
          while (v96);
        }
        v27 += v25;
        v32 += v30;
        ++v95;
      }
      while (v95 != v15);
    }
    else if (v31)
    {
      do
      {
        if (v12)
          result = memset(v32, 255, 2 * v12);
        v32 += v30;
        --v15;
      }
      while (v15);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Tone_Mat_TRC_v216(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Tone_Mat_TRC_v216_GCD);
  return 0;
}

_QWORD *vt_Copy_422vf_TRC_Tone_Mat_TRC_v216_GCD(_QWORD *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  float v32;
  float v33;
  float v34;
  unsigned int v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  _BYTE *v60;
  float v61;
  float v62;
  float v63;
  float v64;
  unint64_t v65;
  _BYTE *v66;
  _DWORD *v67;
  _WORD *v68;
  float v69;
  unsigned int v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  BOOL v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v102;
  float v103;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v116;
  float v117;
  float v118;
  float v120;
  float v122;
  float v123;
  float v126;
  float v127;
  unsigned int v133;
  float v134;
  float v136;
  float v137;
  float v138;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  __int16 v147;
  float v148;
  float v149;
  float v150;
  float v151;
  uint64_t v152;
  unint64_t v153;
  _WORD *v154;
  unsigned __int8 *v155;
  __int16 v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;

  v5 = *(_QWORD *)((char *)result + 28);
  v6 = *(unsigned __int8 *)result;
  v7 = v5 * a2 / v6;
  v8 = v5 + v5 * a2;
  v9 = result[14];
  v10 = (_QWORD *)result[16];
  v11 = result[13] * a2 / v6 + result[15];
  v12 = (uint64_t *)result[17];
  v13 = v12[1];
  v14 = v10[1];
  v15 = (char *)(v14 + v13 * v11 + 2 * v9);
  v16 = v8 / v6;
  if (v14)
    v17 = v14 + v13 * v11 + 2 * v9;
  else
    v17 = 0;
  if (v16 != v7)
  {
    v18 = 0;
    v19 = *(_QWORD *)((char *)result + 20);
    v20 = *(_QWORD *)((char *)result + 36);
    v21 = v7 + *(_QWORD *)((char *)result + 44);
    v22 = v16 - v7;
    v23 = result[19];
    v24 = (_QWORD *)result[7];
    v25 = (uint64_t *)result[8];
    v26 = *v25;
    v27 = v25[1];
    v28 = v25[2];
    v29 = v24[2];
    v30 = (unsigned __int8 *)(v29 + v28 * v21 + v20);
    v31 = *v12;
    LOWORD(a4) = *(_WORD *)(v23 + 140);
    LOWORD(a5) = *(_WORD *)(v23 + 142);
    v32 = 8191.0 / (float)*(unsigned int *)(v23 + 128);
    v33 = (float)LODWORD(a5);
    v168 = v32 * *(float *)v23;
    v169 = (float)LODWORD(a4);
    v166 = v32 * *(float *)(v23 + 16);
    v167 = v32 * *(float *)(v23 + 8);
    v34 = v32 * *(float *)(v23 + 20);
    *(float *)&v35 = v32 * *(float *)(v23 + 28);
    v164 = *(float *)&v35;
    v165 = v34;
    LOWORD(v35) = *(_WORD *)(v23 + 144);
    v36 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v23 + 146);
    v37 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v23 + 148);
    v38 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v23 + 150);
    v39 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v23 + 152);
    v40 = (float)v35;
    v41 = *(float *)(v23 + 36);
    v42 = *(float *)(v23 + 40);
    v43 = *(float *)(v23 + 44);
    v162 = *(float *)(v23 + 48) * 0.5;
    v163 = v37;
    v160 = *(float *)(v23 + 56) * 0.5;
    v161 = *(float *)(v23 + 52) * 0.5;
    v158 = *(float *)(v23 + 64) * 0.5;
    v159 = *(float *)(v23 + 60) * 0.5;
    v44 = *(float *)(v23 + 72);
    v45 = *(float *)(v23 + 68) * 0.5;
    v157 = v45;
    v47 = *(float *)(v23 + 76);
    v46 = *(float *)(v23 + 80);
    v48 = *(float *)(v23 + 84);
    v49 = *(float *)(v23 + 88);
    v50 = *(float *)(v23 + 92);
    v51 = *(float *)(v23 + 96);
    v52 = *(float *)(v23 + 100);
    v53 = *(float *)(v23 + 104);
    v54 = v23 + 164;
    v55 = v23 + 16548;
    result = (_QWORD *)(v23 + 32932);
    v56 = *v10 + v31 * v11 + 2 * v9;
    v57 = v24[1];
    _ZF = v57 == 0;
    v59 = v57 + v27 * v21 + v20;
    if (_ZF)
      v59 = 0;
    v60 = (_BYTE *)(*v24 + v26 * v21 + v20);
    v62 = *(float *)(v23 + 108);
    v61 = *(float *)(v23 + 112);
    v63 = *(float *)(v23 + 116);
    v64 = *(float *)(v23 + 120);
    do
    {
      if (v19)
      {
        v65 = 0;
        v66 = v60;
        v67 = (_DWORD *)v17;
        v68 = (_WORD *)v56;
        do
        {
          LOBYTE(v45) = *(_BYTE *)(v59 + v65 + 1);
          v69 = (float)LODWORD(v45) - v33;
          v70 = LODWORD(v167);
          v71 = v167 * v69;
          LOBYTE(v70) = *v66;
          v72 = v168 * (float)((float)v70 - v169);
          v73 = (float)(v167 * v69) + v72;
          v74 = 8191.0;
          if (v73 <= 8191.0)
          {
            v74 = (float)(v167 * v69) + v72;
            if (v73 < 0.0)
              v74 = 0.0;
          }
          LOBYTE(v73) = *(_BYTE *)(v59 + v65);
          v75 = v33;
          v76 = (float)LODWORD(v73) - v33;
          v77 = (float)(v165 * v69) + (float)(v76 * v166);
          v78 = 8191.0;
          if ((float)(v72 + v77) <= 8191.0)
          {
            v78 = v72 + v77;
            if ((float)(v72 + v77) < 0.0)
              v78 = 0.0;
          }
          v79 = v164 * v76;
          v80 = (float)(v164 * v76) + v72;
          v81 = 8191.0;
          if (v80 <= 8191.0)
          {
            v81 = v80;
            if (v80 < 0.0)
              v81 = 0.0;
          }
          LOBYTE(v80) = v66[1];
          v82 = v168 * (float)((float)LODWORD(v80) - v169);
          v83 = v71 + v82;
          v84 = (float)(v71 + v82) <= 8191.0;
          v85 = 8191.0;
          if (v84)
          {
            v85 = v83;
            if (v83 < 0.0)
              v85 = 0.0;
          }
          v86 = v77 + v82;
          v84 = (float)(v77 + v82) <= 8191.0;
          v87 = 8191.0;
          if (v84)
          {
            v87 = v86;
            if (v86 < 0.0)
              v87 = 0.0;
          }
          v88 = v79 + v82;
          v84 = (float)(v79 + v82) <= 8191.0;
          v89 = 8191.0;
          if (v84)
          {
            v89 = v88;
            if (v88 < 0.0)
              v89 = 0.0;
          }
          _H0 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          __asm { FCVT            S24, H0 }
          _H0 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          __asm { FCVT            S25, H0 }
          _H0 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          __asm { FCVT            S26, H0 }
          _H1 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          v102 = (float)((float)((float)(v61 * _S25) + (float)(v62 * _S24)) + (float)(v63 * _S26))
               + (float)(v64 * fmaxf(_S24, fmaxf(_S25, _S26)));
          v103 = 8191.0;
          if (v102 <= 8191.0)
          {
            v103 = v102;
            if (v102 < 0.0)
              v103 = 0.0;
          }
          __asm
          {
            FCVT            S28, H1
            FCVT            S30, H27
            FCVT            S1, H2
          }
          _H0 = *(_WORD *)(v55 + 2 * llroundf(v103));
          __asm { FCVT            S0, H0 }
          v109 = _S24 * _S0;
          v110 = _S25 * _S0;
          v111 = _S26 * _S0;
          v112 = (float)((float)((float)(v61 * _S30) + (float)(v62 * _S28)) + (float)(v63 * _S1))
               + (float)(v64 * fmaxf(_S28, fmaxf(_S30, _S1)));
          v113 = 8191.0;
          if (v112 <= 8191.0)
          {
            v113 = v112;
            if (v112 < 0.0)
              v113 = 0.0;
          }
          _H0 = *(_WORD *)(v55 + 2 * llroundf(v113));
          __asm { FCVT            S0, H0 }
          v116 = _S28 * _S0;
          v117 = _S30 * _S0;
          v118 = _S1 * _S0;
          _S1 = (float)((float)(v47 * v110) + (float)(v109 * v44)) + (float)(v111 * v46);
          v120 = (float)((float)(v49 * v110) + (float)(v109 * v48)) + (float)(v111 * v50);
          _S24 = (float)((float)(v52 * v110) + (float)(v109 * v51)) + (float)(v111 * v53);
          v122 = (float)(v47 * v117) + (float)(v116 * v44);
          v123 = (float)(v49 * v117) + (float)(v116 * v48);
          _S2 = (float)(v52 * v117) + (float)(v116 * v51);
          _S25 = v122 + (float)(v118 * v46);
          v126 = v123 + (float)(v118 * v50);
          LOWORD(_S1) = *((_WORD *)result + llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          v127 = _S2 + (float)(v118 * v53);
          __asm { FCVT            S1, H1 }
          LOWORD(_S2) = *((_WORD *)result + llroundf(fminf(fmaxf(v120, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          LOWORD(_S24) = *((_WORD *)result + llroundf(fminf(fmaxf(_S24, 0.0), 8191.0)));
          __asm { FCVT            S27, H24 }
          LOWORD(_S24) = *((_WORD *)result + llroundf(fminf(fmaxf(_S25, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          LOWORD(_S25) = *((_WORD *)result + llroundf(fminf(fmaxf(v126, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          v133 = llroundf(fminf(fmaxf(v127, 0.0), 8191.0));
          v134 = (float)(v42 * _S2) + (float)(v41 * _S1);
          _S1 = _S1 + _S24;
          v136 = _S2 + _S25;
          v137 = (float)(v163 + (float)(_S1 * v162)) + (float)(v136 * v161);
          v138 = (float)(v163 + (float)(_S1 * v159)) + (float)(v136 * v158);
          LOWORD(_S1) = *((_WORD *)result + v133);
          __asm { FCVT            S1, H1 }
          v140 = v134 + (float)(v43 * _S27);
          v141 = _S27 + _S1;
          v142 = v137 + (float)(v141 * v160);
          v143 = v138 + (float)(v141 * v157);
          if (v142 < v36)
            v144 = v36;
          else
            v144 = v142;
          v145 = v140 + v36;
          if (v142 <= v38)
            v146 = v144;
          else
            v146 = v38;
          v147 = llroundf(v146);
          if (v145 < v39)
            v148 = v39;
          else
            v148 = v145;
          *v68 = v147;
          if (v145 <= v40)
            v149 = v148;
          else
            v149 = v40;
          v68[1] = llroundf(v149);
          v150 = v38;
          if (v143 <= v38)
          {
            v150 = v143;
            if (v143 < v36)
              v150 = v36;
          }
          v151 = (float)((float)((float)(v42 * _S25) + (float)(v41 * _S24)) + (float)(v43 * _S1)) + v36;
          v68[2] = llroundf(v150);
          v45 = v40;
          if (v151 <= v40)
          {
            v45 = v151;
            if (v151 < v39)
              v45 = v39;
          }
          v68[3] = llroundf(v45);
          v33 = v75;
          if (v67)
            *v67++ = 0;
          v65 += 2;
          v66 += 2;
          v68 += 4;
        }
        while (v19 > v65);
      }
      v60 += v26;
      v59 += v27;
      v56 += v31;
      ++v18;
    }
    while (v18 != v22);
    if (v29 && v17)
    {
      v152 = 0;
      do
      {
        if (v19)
        {
          v153 = v19;
          v154 = v15;
          v155 = v30;
          do
          {
            v156 = *v155++;
            *v154++ = v156 | (v156 << 8);
            --v153;
          }
          while (v153);
        }
        v30 += v28;
        v15 += v13;
        ++v152;
      }
      while (v152 != v22);
    }
    else if (v17)
    {
      do
      {
        if (v19)
          result = memset(v15, 255, 2 * v19);
        v15 += v13;
        --v22;
      }
      while (v22);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Mat_TRC_v216(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Mat_TRC_v216_GCD);
  return 0;
}

_QWORD *vt_Copy_422vf_TRC_Mat_TRC_v216_GCD(_QWORD *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  uint64_t v32;
  float v33;
  float v34;
  float v35;
  float v36;
  unsigned int v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  unint64_t v63;
  _BYTE *v64;
  _DWORD *v65;
  _WORD *v66;
  float v67;
  unsigned int v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  BOOL v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  unsigned int v101;
  float v103;
  float v105;
  float v106;
  float v107;
  float v110;
  float v111;
  unsigned int v117;
  float v118;
  float v120;
  float v121;
  float v122;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  __int16 v129;
  float v130;
  float v131;
  float v132;
  float v133;
  uint64_t v134;
  unint64_t v135;
  _WORD *v136;
  unsigned __int8 *v137;
  __int16 v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;

  v6 = *(_QWORD *)((char *)result + 28);
  v7 = *(unsigned __int8 *)result;
  v8 = v6 * a2 / v7;
  v9 = v6 + v6 * a2;
  v10 = result[14];
  v11 = (_QWORD *)result[16];
  v12 = result[13] * a2 / v7 + result[15];
  v13 = (uint64_t *)result[17];
  v14 = v13[1];
  v15 = v11[1];
  v16 = (char *)(v15 + v14 * v12 + 2 * v10);
  v17 = v9 / v7;
  if (v15)
    v18 = v15 + v14 * v12 + 2 * v10;
  else
    v18 = 0;
  if (v17 != v8)
  {
    v19 = 0;
    v20 = *(_QWORD *)((char *)result + 20);
    v21 = *(_QWORD *)((char *)result + 36);
    v22 = v8 + *(_QWORD *)((char *)result + 44);
    v23 = v17 - v8;
    v24 = result[19];
    v25 = (_QWORD *)result[7];
    v26 = (uint64_t *)result[8];
    v27 = *v26;
    v28 = v26[1];
    v29 = v26[2];
    v30 = v25[2];
    v31 = (unsigned __int8 *)(v30 + v29 * v22 + v21);
    v32 = *v13;
    LOWORD(a5) = *(_WORD *)(v24 + 140);
    LOWORD(a6) = *(_WORD *)(v24 + 142);
    v33 = 8191.0 / (float)*(unsigned int *)(v24 + 128);
    v34 = (float)LODWORD(a5);
    v35 = (float)LODWORD(a6);
    v36 = v33 * *(float *)v24;
    v145 = v33 * *(float *)(v24 + 16);
    v146 = v33 * *(float *)(v24 + 8);
    v143 = v33 * *(float *)(v24 + 28);
    *(float *)&v37 = v143;
    v144 = v33 * *(float *)(v24 + 20);
    LOWORD(v37) = *(_WORD *)(v24 + 144);
    v38 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v24 + 146);
    v39 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v24 + 148);
    v40 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v24 + 150);
    v41 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v24 + 152);
    v42 = (float)v37;
    v43 = *(float *)(v24 + 36);
    v44 = *(float *)(v24 + 40);
    v45 = *(float *)(v24 + 44);
    v141 = *(float *)(v24 + 52) * 0.5;
    v142 = *(float *)(v24 + 48) * 0.5;
    v139 = *(float *)(v24 + 60) * 0.5;
    v140 = *(float *)(v24 + 56) * 0.5;
    v46 = *(float *)(v24 + 64) * 0.5;
    v47 = *(float *)(v24 + 68);
    v48 = *(float *)(v24 + 72);
    v49 = v47 * 0.5;
    v51 = *(float *)(v24 + 76);
    v50 = *(float *)(v24 + 80);
    v52 = *(float *)(v24 + 84);
    v53 = *(float *)(v24 + 88);
    v54 = *(float *)(v24 + 92);
    v55 = *(float *)(v24 + 96);
    v56 = *(float *)(v24 + 100);
    v57 = *(float *)(v24 + 104);
    v58 = v24 + 16548;
    v59 = v24 + 164;
    result = (_QWORD *)(*v11 + v32 * v12 + 2 * v10);
    v60 = v25[1];
    if (v60)
      v61 = v60 + v28 * v22 + v21;
    else
      v61 = 0;
    v62 = (_BYTE *)(*v25 + v27 * v22 + v21);
    do
    {
      if (v20)
      {
        v63 = 0;
        v64 = v62;
        v65 = (_DWORD *)v18;
        v66 = result;
        do
        {
          LOBYTE(v47) = *(_BYTE *)(v61 + v63 + 1);
          v67 = (float)LODWORD(v47) - v35;
          v68 = LODWORD(v146);
          v69 = v146 * v67;
          LOBYTE(v68) = *v64;
          v70 = v36 * (float)((float)v68 - v34);
          v71 = (float)(v146 * v67) + v70;
          v72 = 8191.0;
          if (v71 <= 8191.0)
          {
            v72 = (float)(v146 * v67) + v70;
            if (v71 < 0.0)
              v72 = 0.0;
          }
          LOBYTE(v71) = *(_BYTE *)(v61 + v63);
          v73 = (float)LODWORD(v71) - v35;
          v74 = (float)(v144 * v67) + (float)(v73 * v145);
          v75 = 8191.0;
          if ((float)(v70 + v74) <= 8191.0)
          {
            v75 = v70 + v74;
            if ((float)(v70 + v74) < 0.0)
              v75 = 0.0;
          }
          v76 = v143 * v73;
          v77 = v76 + v70;
          v78 = (float)(v76 + v70) <= 8191.0;
          v79 = 8191.0;
          if (v78)
          {
            v79 = v77;
            if (v77 < 0.0)
              v79 = 0.0;
          }
          LOBYTE(v77) = v64[1];
          v80 = v36 * (float)((float)LODWORD(v77) - v34);
          v81 = v69 + v80;
          v82 = 8191.0;
          if (v81 <= 8191.0)
          {
            v82 = v81;
            if (v81 < 0.0)
              v82 = 0.0;
          }
          v83 = v74 + v80;
          v78 = (float)(v74 + v80) <= 8191.0;
          v84 = 8191.0;
          if (v78)
          {
            v84 = v83;
            if (v83 < 0.0)
              v84 = 0.0;
          }
          v85 = v76 + v80;
          v78 = (float)(v76 + v80) <= 8191.0;
          v86 = 8191.0;
          if (v78)
          {
            v86 = v85;
            if (v85 < 0.0)
              v86 = 0.0;
          }
          _H4 = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H5 = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H6 = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H7 = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          _H24 = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          v101 = llroundf(fminf(fmaxf(v86, 0.0), 8191.0));
          _S25 = (float)((float)(v51 * _S5) + (float)(_S4 * v48)) + (float)(_S6 * v50);
          v103 = (float)((float)(v53 * _S5) + (float)(_S4 * v52)) + (float)(_S6 * v54);
          _S4 = (float)((float)(v56 * _S5) + (float)(_S4 * v55)) + (float)(_S6 * v57);
          v105 = (float)(v51 * _S24) + (float)(_S7 * v48);
          v106 = (float)(v53 * _S24) + (float)(_S7 * v52);
          v107 = (float)(v56 * _S24) + (float)(_S7 * v55);
          LOWORD(_S24) = *(_WORD *)(v59 + 2 * v101);
          __asm { FCVT            S24, H24 }
          _S5 = v105 + (float)(_S24 * v50);
          v110 = v106 + (float)(_S24 * v54);
          LOWORD(_S25) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(_S25, 0.0), 8191.0)));
          v111 = v107 + (float)(_S24 * v57);
          __asm { FCVT            S24, H25 }
          LOWORD(_S25) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v103, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          LOWORD(_S4) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(_S4, 0.0), 8191.0)));
          __asm { FCVT            S26, H4 }
          LOWORD(_S4) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          LOWORD(_S5) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v110, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          v117 = llroundf(fminf(fmaxf(v111, 0.0), 8191.0));
          v118 = (float)(v44 * _S25) + (float)(v43 * _S24);
          _S6 = _S24 + _S4;
          v120 = _S25 + _S5;
          v121 = (float)(v39 + (float)((float)(_S24 + _S4) * v142)) + (float)(v120 * v141);
          v122 = (float)(v39 + (float)(_S6 * v139)) + (float)(v120 * v46);
          LOWORD(_S6) = *(_WORD *)(v58 + 2 * v117);
          __asm { FCVT            S6, H6 }
          v124 = v118 + (float)(v45 * _S26);
          v125 = v121 + (float)((float)(_S26 + _S6) * v140);
          v126 = v122 + (float)((float)(_S26 + _S6) * v49);
          if (v125 < v38)
            v127 = v38;
          else
            v127 = v125;
          v78 = v125 <= v40;
          v128 = v124 + v38;
          if (!v78)
            v127 = v40;
          v129 = llroundf(v127);
          if (v128 < v41)
            v130 = v41;
          else
            v130 = v124 + v38;
          *v66 = v129;
          if (v128 <= v42)
            v131 = v130;
          else
            v131 = v42;
          v66[1] = llroundf(v131);
          v132 = v40;
          if (v126 <= v40)
          {
            v132 = v126;
            if (v126 < v38)
              v132 = v38;
          }
          v47 = (float)((float)((float)(v44 * _S5) + (float)(v43 * _S4)) + (float)(v45 * _S6)) + v38;
          v66[2] = llroundf(v132);
          v133 = v42;
          if (v47 <= v42)
          {
            v133 = v47;
            if (v47 < v41)
              v133 = v41;
          }
          v66[3] = llroundf(v133);
          if (v65)
            *v65++ = 0;
          v63 += 2;
          v64 += 2;
          v66 += 4;
        }
        while (v20 > v63);
      }
      v62 += v27;
      v61 += v28;
      result = (_QWORD *)((char *)result + v32);
      ++v19;
    }
    while (v19 != v23);
    if (v30 && v18)
    {
      v134 = 0;
      do
      {
        if (v20)
        {
          v135 = v20;
          v136 = v16;
          v137 = v31;
          do
          {
            v138 = *v137++;
            *v136++ = v138 | (v138 << 8);
            --v135;
          }
          while (v135);
        }
        v31 += v29;
        v16 += v14;
        ++v134;
      }
      while (v134 != v23);
    }
    else if (v18)
    {
      do
      {
        if (v20)
          result = memset(v16, 255, 2 * v20);
        v16 += v14;
        --v23;
      }
      while (v23);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_rgb_v216(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_rgb_v216_GCD);
  return 0;
}

_QWORD *vt_Copy_422vf_rgb_v216_GCD(_QWORD *result, uint64_t a2, double a3, double a4, double a5, float a6, float a7)
{
  float v7;
  float v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  unsigned __int8 *v54;
  uint64_t v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  _BYTE *v79;
  _WORD *v80;
  _DWORD *v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  uint64_t v105;
  unint64_t v106;
  _WORD *v107;
  unsigned __int8 *v108;
  __int16 v109;

  v14 = *(_QWORD *)((char *)result + 28);
  v15 = *(unsigned __int8 *)result;
  v16 = v14 * a2 / v15;
  v17 = v14 + v14 * a2;
  v18 = result[14];
  v19 = (_QWORD *)result[16];
  v20 = result[13] * a2 / v15 + result[15];
  v21 = (uint64_t *)result[17];
  v22 = v21[1];
  v23 = v19[1];
  v24 = (char *)(v23 + v22 * v20 + 2 * v18);
  v25 = v17 / v15;
  if (v23)
    v26 = v23 + v22 * v20 + 2 * v18;
  else
    v26 = 0;
  if (v25 != v16)
  {
    v27 = 0;
    v28 = *(_QWORD *)((char *)result + 20);
    v29 = *(_QWORD *)((char *)result + 36);
    v30 = v16 + *(_QWORD *)((char *)result + 44);
    v31 = v25 - v16;
    v32 = result[19];
    v33 = (_QWORD *)result[7];
    v34 = (uint64_t *)result[8];
    v35 = *v34;
    v36 = v34[1];
    v37 = v34[2];
    v38 = v33[2];
    LOWORD(a6) = *(_WORD *)(v32 + 140);
    LOWORD(a7) = *(_WORD *)(v32 + 142);
    v39 = *(float *)v32;
    v40 = (float)*(unsigned int *)(v32 + 136) / (float)*(unsigned int *)(v32 + 128);
    v41 = *(float *)(v32 + 8);
    v42 = *(float *)(v32 + 16);
    v43 = *(float *)(v32 + 20);
    v44 = *(float *)(v32 + 28);
    LOWORD(v9) = *(_WORD *)(v32 + 144);
    LOWORD(v10) = *(_WORD *)(v32 + 146);
    LOWORD(v11) = *(_WORD *)(v32 + 148);
    LOWORD(v12) = *(_WORD *)(v32 + 150);
    LOWORD(v13) = *(_WORD *)(v32 + 152);
    v45 = *(float *)(v32 + 36);
    v46 = *(float *)(v32 + 40);
    v47 = *(float *)(v32 + 44);
    v48 = *(float *)(v32 + 48);
    v49 = *(float *)(v32 + 52);
    v50 = *(float *)(v32 + 56);
    v51 = *(float *)(v32 + 60);
    v52 = *(float *)(v32 + 64);
    v53 = *(float *)(v32 + 68);
    v54 = (unsigned __int8 *)(v38 + v37 * v30 + v29);
    v55 = *v21;
    v56 = (float)LODWORD(a6);
    v57 = (float)LODWORD(a7);
    v58 = v40 * v39;
    v59 = v40 * v41;
    v60 = v40 * v42;
    v61 = v40 * v43;
    v62 = v40 * v44;
    v63 = (float)v9;
    v64 = (float)v10;
    v65 = (float)v11;
    v66 = (float)v12;
    v67 = (float)v13;
    v68 = 0.5;
    v69 = v48 * 0.5;
    v70 = v49 * 0.5;
    v71 = v50 * 0.5;
    v72 = v51 * 0.5;
    v73 = v52 * 0.5;
    v74 = v53 * 0.5;
    v75 = *v19 + v55 * v20 + 2 * v18;
    v76 = v33[1];
    if (v76)
      v77 = v76 + v36 * v30 + v29;
    else
      v77 = 0;
    result = (_QWORD *)(*v33 + v35 * v30 + v29);
    do
    {
      if (v28)
      {
        v78 = 0;
        v79 = result;
        v80 = (_WORD *)v75;
        v81 = (_DWORD *)v26;
        do
        {
          LOBYTE(v53) = *(_BYTE *)(v77 + v78);
          v82 = (float)LODWORD(v53) - v57;
          LOBYTE(v68) = *(_BYTE *)(v77 + v78 + 1);
          v83 = (float)LODWORD(v68) - v57;
          v84 = v59 * v83;
          v85 = (float)(v61 * v83) + (float)(v82 * v60);
          v86 = v62 * v82;
          LOBYTE(v7) = *v79;
          v87 = v58 * (float)((float)LODWORD(v7) - v56);
          LOBYTE(v8) = v79[1];
          v88 = v58 * (float)((float)LODWORD(v8) - v56);
          v89 = v84 + v87;
          v90 = v87 + v85;
          v91 = v86 + v87;
          v92 = v84 + v88;
          v93 = v85 + v88;
          v94 = v86 + v88;
          v95 = (float)((float)((float)(v46 * v90) + (float)(v45 * v89)) + (float)(v47 * v91)) + v63;
          v53 = (float)((float)((float)(v46 * v93) + (float)(v45 * v92)) + (float)(v47 * v94)) + v63;
          v96 = v89 + v92;
          v97 = v90 + v93;
          v98 = (float)(v64 + (float)(v96 * v69)) + (float)(v97 * v70);
          v7 = v91 + v94;
          v8 = v98 + (float)(v7 * v71);
          v99 = (float)(v64 + (float)(v96 * v72)) + (float)(v97 * v73);
          if (v8 < v63)
            v100 = v63;
          else
            v100 = v98 + (float)(v7 * v71);
          if (v8 > v65)
            v100 = v65;
          v101 = v99 + (float)(v7 * v74);
          *v80 = llroundf(v100);
          if (v95 < v66)
            v102 = v66;
          else
            v102 = v95;
          if (v95 > v67)
            v102 = v67;
          v80[1] = llroundf(v102);
          if (v101 < v63)
            v103 = v63;
          else
            v103 = v101;
          if (v101 <= v65)
            v104 = v103;
          else
            v104 = v65;
          v80[2] = llroundf(v104);
          v68 = v67;
          if (v53 <= v67)
          {
            v68 = v53;
            if (v53 < v66)
              v68 = v66;
          }
          v80[3] = llroundf(v68);
          if (v81)
            *v81++ = 0;
          v78 += 2;
          v79 += 2;
          v80 += 4;
        }
        while (v28 > v78);
      }
      result = (_QWORD *)((char *)result + v35);
      v77 += v36;
      v75 += v55;
      ++v27;
    }
    while (v27 != v31);
    if (v38 && v26)
    {
      v105 = 0;
      do
      {
        if (v28)
        {
          v106 = v28;
          v107 = v24;
          v108 = v54;
          do
          {
            v109 = *v108++;
            *v107++ = v109 | (v109 << 8);
            --v106;
          }
          while (v106);
        }
        v54 += v37;
        v24 += v22;
        ++v105;
      }
      while (v105 != v31);
    }
    else if (v26)
    {
      do
      {
        if (v28)
          result = memset(v24, 255, 2 * v28);
        v24 += v22;
        --v31;
      }
      while (v31);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Tone_Mat_TRC_444vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Tone_Mat_TRC_444vf_GCD);
  return 0;
}

_QWORD *vt_Copy_422vf_TRC_Tone_Mat_TRC_444vf_GCD(_QWORD *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  float v32;
  float v33;
  float v34;
  unsigned int v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _BYTE *v66;
  float v67;
  float v68;
  float v69;
  float v70;
  size_t v71;
  _BYTE *v72;
  _BYTE *v73;
  _BYTE *v74;
  float v75;
  unsigned int v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  BOOL v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v108;
  float v109;
  float v110;
  float v115;
  float v116;
  float v118;
  float v119;
  float v120;
  float v124;
  float v125;
  float v126;
  float v127;
  float v129;
  float v130;
  float v131;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;

  v5 = *(_QWORD *)((char *)result + 28);
  v6 = *(unsigned __int8 *)result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)((char *)result + 20);
    v11 = *(_QWORD *)((char *)result + 36);
    v12 = v7 + *(_QWORD *)((char *)result + 44);
    v13 = v8 - v7;
    v14 = result[14];
    v15 = result[13] * a2 / v6;
    v16 = (_QWORD *)result[16];
    v17 = v15 + result[15];
    v18 = result[19];
    v19 = (_QWORD *)result[7];
    v20 = (uint64_t *)result[8];
    v21 = (uint64_t *)result[17];
    v22 = *v20;
    v23 = v20[1];
    v24 = v20[2];
    v25 = v19[2];
    v26 = (char *)(v25 + v24 * v12 + v11);
    v27 = *v21;
    v28 = v21[1];
    v29 = v21[2];
    v30 = v16[2];
    v31 = (char *)(v30 + v29 * v17 + v14);
    LOWORD(a4) = *(_WORD *)(v18 + 140);
    LOWORD(a5) = *(_WORD *)(v18 + 142);
    v32 = 8191.0 / (float)*(unsigned int *)(v18 + 128);
    v33 = (float)LODWORD(a5);
    v162 = v32 * *(float *)v18;
    v163 = (float)LODWORD(a4);
    v153 = v32 * *(float *)(v18 + 16);
    v154 = v32 * *(float *)(v18 + 8);
    v34 = v32 * *(float *)(v18 + 20);
    *(float *)&v35 = v32 * *(float *)(v18 + 28);
    v151 = *(float *)&v35;
    v152 = v34;
    LOWORD(v35) = *(_WORD *)(v18 + 144);
    v36 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v18 + 146);
    v37 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v18 + 148);
    v38 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v18 + 150);
    v39 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v18 + 152);
    v40 = (float)v35;
    v41 = *(float *)(v18 + 36);
    v42 = *(float *)(v18 + 40);
    v43 = *(float *)(v18 + 44);
    v160 = *(float *)(v18 + 48);
    v161 = v39;
    v158 = *(float *)(v18 + 56);
    v159 = *(float *)(v18 + 52);
    v156 = *(float *)(v18 + 64);
    v157 = *(float *)(v18 + 60);
    _S0 = *(float *)(v18 + 68);
    v45 = *(float *)(v18 + 72);
    v155 = _S0;
    v47 = *(float *)(v18 + 76);
    v46 = *(float *)(v18 + 80);
    v48 = *(float *)(v18 + 84);
    v49 = *(float *)(v18 + 88);
    v50 = *(float *)(v18 + 92);
    v51 = *(float *)(v18 + 96);
    v52 = *(float *)(v18 + 100);
    v53 = *(float *)(v18 + 104);
    v54 = v18 + 164;
    v55 = v18 + 16548;
    v56 = v16[1];
    _ZF = v56 == 0;
    v58 = v56 + v28 * v17;
    v59 = *v16 + v27 * v17;
    v60 = v18 + 32932;
    result = (_QWORD *)(v58 + v14);
    if (_ZF)
      result = 0;
    v61 = (_BYTE *)(v59 + v14);
    v64 = v19;
    v63 = *v19;
    v62 = v64[1];
    _ZF = v62 == 0;
    v65 = v62 + v23 * v12 + v11;
    if (_ZF)
      v65 = 0;
    v66 = (_BYTE *)(v63 + v22 * v12 + v11);
    v68 = *(float *)(v18 + 108);
    v67 = *(float *)(v18 + 112);
    v69 = *(float *)(v18 + 116);
    v70 = *(float *)(v18 + 120);
    do
    {
      if (v10)
      {
        v71 = 0;
        v72 = v66;
        v73 = v61;
        v74 = result;
        do
        {
          LOBYTE(_S0) = *(_BYTE *)(v65 + v71 + 1);
          v75 = (float)LODWORD(_S0) - v33;
          v76 = LODWORD(v154);
          v77 = v154 * v75;
          LOBYTE(v76) = *v72;
          v78 = v162 * (float)((float)v76 - v163);
          v79 = (float)(v154 * v75) + v78;
          v80 = 8191.0;
          if (v79 <= 8191.0)
          {
            v80 = (float)(v154 * v75) + v78;
            if (v79 < 0.0)
              v80 = 0.0;
          }
          LOBYTE(v79) = *(_BYTE *)(v65 + v71);
          v81 = v33;
          v82 = (float)LODWORD(v79) - v33;
          v83 = (float)(v152 * v75) + (float)(v82 * v153);
          v84 = 8191.0;
          if ((float)(v78 + v83) <= 8191.0)
          {
            v84 = v78 + v83;
            if ((float)(v78 + v83) < 0.0)
              v84 = 0.0;
          }
          v85 = v151 * v82;
          v86 = v85 + v78;
          v87 = (float)(v85 + v78) <= 8191.0;
          v88 = 8191.0;
          if (v87)
          {
            v88 = v86;
            if (v86 < 0.0)
              v88 = 0.0;
          }
          LOBYTE(v86) = v72[1];
          v89 = v162 * (float)((float)LODWORD(v86) - v163);
          v90 = v77 + v89;
          v87 = (float)(v77 + v89) <= 8191.0;
          v91 = 8191.0;
          if (v87)
          {
            v91 = v90;
            if (v90 < 0.0)
              v91 = 0.0;
          }
          v92 = v83 + v89;
          v87 = (float)(v83 + v89) <= 8191.0;
          v93 = 8191.0;
          if (v87)
          {
            v93 = v92;
            if (v92 < 0.0)
              v93 = 0.0;
          }
          v94 = v85 + v89;
          v87 = (float)(v85 + v89) <= 8191.0;
          v95 = 8191.0;
          if (v87)
          {
            v95 = v94;
            if (v94 < 0.0)
              v95 = 0.0;
          }
          _H0 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S1, H0 }
          _H0 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm { FCVT            S2, H0 }
          _H0 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          __asm { FCVT            S26, H0 }
          _H19 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          _H28 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v95, 0.0), 8191.0)));
          v108 = fmaxf(_S1, fmaxf(_S2, _S26));
          v109 = (float)((float)((float)(v67 * _S2) + (float)(v68 * _S1)) + (float)(v69 * _S26)) + (float)(v70 * v108);
          v110 = 8191.0;
          if (v109 <= 8191.0)
          {
            v110 = (float)((float)((float)(v67 * _S2) + (float)(v68 * _S1)) + (float)(v69 * _S26)) + (float)(v70 * v108);
            if (v109 < 0.0)
              v110 = 0.0;
          }
          __asm
          {
            FCVT            S27, H19
            FCVT            S28, H28
            FCVT            S29, H29
          }
          _H19 = *(_WORD *)(v55 + 2 * llroundf(v110));
          v115 = (float)((float)((float)(v67 * _S28) + (float)(v68 * _S27)) + (float)(v69 * _S29))
               + (float)(v70 * fmaxf(_S27, fmaxf(_S28, _S29)));
          v116 = 8191.0;
          if (v115 <= 8191.0)
          {
            v116 = v115;
            if (v115 < 0.0)
              v116 = 0.0;
          }
          __asm { FCVT            S0, H19 }
          v118 = _S1 * _S0;
          v119 = _S2 * _S0;
          v120 = _S26 * _S0;
          _H19 = *(_WORD *)(v55 + 2 * llroundf(v116));
          __asm { FCVT            S19, H19 }
          _S24 = _S27 * _S19;
          v124 = _S28 * _S19;
          v125 = _S29 * _S19;
          v126 = (float)((float)(v47 * v119) + (float)(v118 * v45)) + (float)(v120 * v46);
          v127 = (float)((float)(v49 * v119) + (float)(v118 * v48)) + (float)(v120 * v50);
          _S0 = (float)((float)(v52 * v119) + (float)(v118 * v51)) + (float)(v120 * v53);
          v129 = (float)((float)(v47 * v124) + (float)(_S24 * v45)) + (float)(v125 * v46);
          v130 = (float)((float)(v49 * v124) + (float)(_S24 * v48)) + (float)(v125 * v50);
          v131 = (float)((float)(v52 * v124) + (float)(_S24 * v51)) + (float)(v125 * v53);
          LOWORD(_S24) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v126, 0.0), 8191.0)));
          __asm { FCVT            S27, H24 }
          LOWORD(_S24) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v127, 0.0), 8191.0)));
          __asm { FCVT            S28, H24 }
          LOWORD(_S0) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          __asm { FCVT            S29, H0 }
          _H0 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v129, 0.0), 8191.0)));
          _H24 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v130, 0.0), 8191.0)));
          _H26 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v131, 0.0), 8191.0)));
          v138 = (float)((float)((float)(v42 * _S28) + (float)(v41 * _S27)) + (float)(v43 * _S29)) + v36;
          v139 = v38;
          if (v138 <= v38)
          {
            v139 = (float)((float)((float)(v42 * _S28) + (float)(v41 * _S27)) + (float)(v43 * _S29)) + v36;
            if (v138 < v36)
              v139 = v36;
          }
          *v73 = llroundf(v139);
          if (v74)
          {
            v140 = (float)((float)(v37 + (float)(_S27 * v160)) + (float)(_S28 * v159)) + (float)(_S29 * v158);
            v141 = v40;
            if (v140 <= v40)
            {
              v141 = (float)((float)(v37 + (float)(_S27 * v160)) + (float)(_S28 * v159)) + (float)(_S29 * v158);
              if (v140 < v161)
                v141 = v161;
            }
            v142 = (float)((float)(v37 + (float)(_S27 * v157)) + (float)(_S28 * v156)) + (float)(_S29 * v155);
            *v74 = llroundf(v141);
            v143 = v40;
            if (v142 <= v40)
            {
              v143 = (float)((float)(v37 + (float)(_S27 * v157)) + (float)(_S28 * v156)) + (float)(_S29 * v155);
              if (v142 < v161)
                v143 = v161;
            }
            v74[1] = llroundf(v143);
            v74 += 2;
          }
          v33 = v81;
          __asm
          {
            FCVT            S0, H0
            FCVT            S2, H24
            FCVT            S26, H26
          }
          v146 = (float)((float)((float)(v42 * _S2) + (float)(v41 * _S0)) + (float)(v43 * _S26)) + v36;
          v147 = v38;
          if (v146 <= v38)
          {
            v147 = (float)((float)((float)(v42 * _S2) + (float)(v41 * _S0)) + (float)(v43 * _S26)) + v36;
            if (v146 < v36)
              v147 = v36;
          }
          v73[1] = llroundf(v147);
          if (v74)
          {
            v148 = (float)((float)(v37 + (float)(_S0 * v160)) + (float)(_S2 * v159)) + (float)(_S26 * v158);
            v149 = v40;
            if (v148 <= v40)
            {
              v149 = (float)((float)(v37 + (float)(_S0 * v160)) + (float)(_S2 * v159)) + (float)(_S26 * v158);
              if (v148 < v161)
                v149 = v161;
            }
            _S0 = (float)((float)(v37 + (float)(_S0 * v157)) + (float)(_S2 * v156)) + (float)(_S26 * v155);
            *v74 = llroundf(v149);
            v150 = v40;
            if (_S0 <= v40)
            {
              v150 = _S0;
              if (_S0 < v161)
                v150 = v161;
            }
            v74[1] = llroundf(v150);
            v74 += 2;
          }
          v71 += 2;
          v72 += 2;
          v73 += 2;
        }
        while (v10 > v71);
      }
      v66 += v22;
      v65 += v23;
      v61 += v27;
      result = (_QWORD *)((char *)result + v28);
      ++v9;
    }
    while (v9 != v13);
    if (v25 && v30)
    {
      do
      {
        result = memcpy(v31, v26, v10);
        v26 += v24;
        v31 += v29;
        --v13;
      }
      while (v13);
    }
    else if (v30)
    {
      do
      {
        if (v10)
          result = memset(v31, 255, v10);
        v31 += v29;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Mat_TRC_444vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Mat_TRC_444vf_GCD);
  return 0;
}

_QWORD *vt_Copy_422vf_TRC_Mat_TRC_444vf_GCD(_QWORD *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  float v32;
  float v33;
  float v34;
  float v35;
  unsigned int v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  size_t v65;
  _BYTE *v66;
  _BYTE *v67;
  _BYTE *v68;
  float v69;
  unsigned int v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  unsigned int v88;
  float v89;
  float v100;
  float v101;
  float v106;
  float v107;
  float v114;
  float v115;
  float v116;
  float v120;
  float v121;
  float v122;
  float v123;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;

  v6 = *(_QWORD *)((char *)result + 28);
  v7 = *(unsigned __int8 *)result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)((char *)result + 20);
    v12 = *(_QWORD *)((char *)result + 36);
    v13 = v8 + *(_QWORD *)((char *)result + 44);
    v14 = v9 - v8;
    v15 = result[14];
    v16 = (uint64_t *)result[16];
    v17 = result[13] * a2 / v7 + result[15];
    v18 = result[19];
    v19 = (uint64_t *)result[7];
    v20 = (uint64_t *)result[8];
    v21 = (uint64_t *)result[17];
    v22 = *v20;
    v23 = v20[1];
    v24 = v20[2];
    v25 = v19[2];
    v26 = (char *)(v25 + v24 * v13 + v12);
    v27 = *v21;
    v28 = v21[1];
    v29 = v21[2];
    v30 = v16[2];
    v31 = (char *)(v30 + v29 * v17 + v15);
    LOWORD(a5) = *(_WORD *)(v18 + 140);
    LOWORD(a6) = *(_WORD *)(v18 + 142);
    v32 = 8191.0 / (float)*(unsigned int *)(v18 + 128);
    v33 = (float)LODWORD(a5);
    v34 = (float)LODWORD(a6);
    v35 = v32 * *(float *)v18;
    v133 = v32 * *(float *)(v18 + 16);
    v134 = v32 * *(float *)(v18 + 8);
    v131 = v32 * *(float *)(v18 + 28);
    *(float *)&v36 = v131;
    v132 = v32 * *(float *)(v18 + 20);
    LOWORD(v36) = *(_WORD *)(v18 + 144);
    v37 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v18 + 146);
    v38 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v18 + 148);
    v39 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v18 + 150);
    v40 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v18 + 152);
    v41 = (float)v36;
    v42 = *(float *)(v18 + 36);
    v43 = *(float *)(v18 + 40);
    v44 = *(float *)(v18 + 44);
    v138 = *(float *)(v18 + 52);
    v139 = *(float *)(v18 + 48);
    v136 = *(float *)(v18 + 60);
    v137 = *(float *)(v18 + 56);
    _S4 = *(float *)(v18 + 64);
    v46 = *(float *)(v18 + 68);
    v135 = _S4;
    v47 = *(float *)(v18 + 72);
    v48 = *(float *)(v18 + 76);
    v49 = *(float *)(v18 + 80);
    v50 = *(float *)(v18 + 84);
    v51 = *(float *)(v18 + 88);
    v52 = *(float *)(v18 + 92);
    v53 = *(float *)(v18 + 96);
    v54 = *(float *)(v18 + 100);
    v55 = *(float *)(v18 + 104);
    v56 = v18 + 164;
    v57 = v18 + 16548;
    v59 = *v16;
    v58 = v16[1];
    v60 = (_BYTE *)(v58 + v28 * v17 + v15);
    if (!v58)
      v60 = 0;
    result = (_QWORD *)(v59 + v27 * v17 + v15);
    v62 = *v19;
    v61 = v19[1];
    v63 = v61 + v23 * v13 + v12;
    if (!v61)
      v63 = 0;
    v64 = (_BYTE *)(v62 + v22 * v13 + v12);
    do
    {
      if (v11)
      {
        v65 = 0;
        v66 = v64;
        v67 = result;
        v68 = v60;
        do
        {
          LOBYTE(_S4) = *(_BYTE *)(v63 + v65 + 1);
          v69 = (float)LODWORD(_S4) - v34;
          v70 = LODWORD(v134);
          v71 = v134 * v69;
          LOBYTE(v70) = *v66;
          v72 = v35 * (float)((float)v70 - v33);
          v73 = (float)(v134 * v69) + v72;
          v74 = 8191.0;
          if (v73 <= 8191.0)
          {
            v74 = (float)(v134 * v69) + v72;
            if (v73 < 0.0)
              v74 = 0.0;
          }
          LOBYTE(v73) = *(_BYTE *)(v63 + v65);
          v75 = (float)LODWORD(v73) - v34;
          v76 = (float)(v132 * v69) + (float)(v75 * v133);
          v77 = 8191.0;
          if ((float)(v72 + v76) <= 8191.0)
          {
            v77 = v72 + v76;
            if ((float)(v72 + v76) < 0.0)
              v77 = 0.0;
          }
          v78 = v131 * v75;
          v79 = (float)(v131 * v75) + v72;
          v80 = 8191.0;
          if (v79 <= 8191.0)
          {
            v80 = v79;
            if (v79 < 0.0)
              v80 = 0.0;
          }
          LOBYTE(v79) = v66[1];
          v81 = v35 * (float)((float)LODWORD(v79) - v33);
          v82 = v71 + v81;
          if (v82 < 0.0)
            v83 = 0.0;
          else
            v83 = v82;
          if (v82 > 8191.0)
            v83 = 8191.0;
          v84 = v76 + v81;
          if ((float)(v76 + v81) < 0.0)
            v85 = 0.0;
          else
            v85 = v76 + v81;
          if (v84 <= 8191.0)
            v86 = v85;
          else
            v86 = 8191.0;
          if ((float)(v78 + v81) < 0.0)
            v87 = 0.0;
          else
            v87 = v78 + v81;
          v88 = llroundf(fminf(fmaxf(v74, 0.0), 8191.0));
          if ((float)(v78 + v81) <= 8191.0)
            v89 = v87;
          else
            v89 = 8191.0;
          _H4 = *(_WORD *)(v56 + 2 * v88);
          __asm { FCVT            S4, H4 }
          _H5 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H6 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          v100 = (float)((float)(v48 * _S5) + (float)(_S4 * v47)) + (float)(_S6 * v49);
          v101 = (float)((float)(v51 * _S5) + (float)(_S4 * v50)) + (float)(_S6 * v52);
          _S6 = (float)((float)(v54 * _S5) + (float)(_S4 * v53)) + (float)(_S6 * v55);
          LOWORD(_S4) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v100, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          LOWORD(_S5) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v101, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          v106 = (float)((float)((float)(v43 * _S5) + (float)(v42 * _S4)) + (float)(v44 * _S6)) + v37;
          v107 = v39;
          if (v106 <= v39)
          {
            v107 = (float)((float)((float)(v43 * _S5) + (float)(v42 * _S4)) + (float)(v44 * _S6)) + v37;
            if (v106 < v37)
              v107 = v37;
          }
          _H7 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          _H24 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          _H25 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          v114 = (float)((float)(v48 * _S24) + (float)(_S7 * v47)) + (float)(_S25 * v49);
          v115 = (float)((float)(v51 * _S24) + (float)(_S7 * v50)) + (float)(_S25 * v52);
          v116 = (float)((float)(v54 * _S24) + (float)(_S7 * v53)) + (float)(_S25 * v55);
          _H7 = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v114, 0.0), 8191.0)));
          _H24 = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v115, 0.0), 8191.0)));
          _H25 = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v116, 0.0), 8191.0)));
          *v67 = llroundf(v107);
          if (v68)
          {
            v120 = (float)((float)(v38 + (float)(_S4 * v139)) + (float)(_S5 * v138)) + (float)(_S6 * v137);
            v121 = v41;
            if (v120 <= v41)
            {
              v121 = (float)((float)(v38 + (float)(_S4 * v139)) + (float)(_S5 * v138)) + (float)(_S6 * v137);
              if (v120 < v40)
                v121 = v40;
            }
            v122 = (float)((float)(v38 + (float)(_S4 * v136)) + (float)(_S5 * v135)) + (float)(_S6 * v46);
            *v68 = llroundf(v121);
            v123 = v41;
            if (v122 <= v41)
            {
              v123 = v122;
              if (v122 < v40)
                v123 = v40;
            }
            v68[1] = llroundf(v123);
            v68 += 2;
          }
          __asm
          {
            FCVT            S4, H7
            FCVT            S5, H24
            FCVT            S6, H25
          }
          v126 = (float)((float)((float)(v43 * _S5) + (float)(v42 * _S4)) + (float)(v44 * _S6)) + v37;
          v127 = v39;
          if (v126 <= v39)
          {
            v127 = (float)((float)((float)(v43 * _S5) + (float)(v42 * _S4)) + (float)(v44 * _S6)) + v37;
            if (v126 < v37)
              v127 = v37;
          }
          v67[1] = llroundf(v127);
          if (v68)
          {
            v128 = (float)((float)(v38 + (float)(_S4 * v139)) + (float)(_S5 * v138)) + (float)(_S6 * v137);
            v129 = v41;
            if (v128 <= v41)
            {
              v129 = (float)((float)(v38 + (float)(_S4 * v139)) + (float)(_S5 * v138)) + (float)(_S6 * v137);
              if (v128 < v40)
                v129 = v40;
            }
            _S4 = (float)((float)(v38 + (float)(_S4 * v136)) + (float)(_S5 * v135)) + (float)(_S6 * v46);
            *v68 = llroundf(v129);
            v130 = v41;
            if (_S4 <= v41)
            {
              v130 = _S4;
              if (_S4 < v40)
                v130 = v40;
            }
            v68[1] = llroundf(v130);
            v68 += 2;
          }
          v65 += 2;
          v66 += 2;
          v67 += 2;
        }
        while (v11 > v65);
      }
      v64 += v22;
      v63 += v23;
      result = (_QWORD *)((char *)result + v27);
      v60 += v28;
      ++v10;
    }
    while (v10 != v14);
    if (v25 && v30)
    {
      do
      {
        result = memcpy(v31, v26, v11);
        v26 += v24;
        v31 += v29;
        --v14;
      }
      while (v14);
    }
    else if (v30)
    {
      do
      {
        if (v11)
          result = memset(v31, 255, v11);
        v31 += v29;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_rgb_444vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_rgb_444vf_GCD);
  return 0;
}

_QWORD *vt_Copy_422vf_rgb_444vf_GCD(_QWORD *result, uint64_t a2, double a3, double a4, float a5)
{
  float v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  float v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  size_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  unsigned int v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  size_t v68;
  _BYTE *v69;
  _BYTE *v70;
  _BYTE *v71;
  unsigned int v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;

  v11 = *(_QWORD *)((char *)result + 28);
  v12 = *(unsigned __int8 *)result;
  v13 = v11 * a2 / v12;
  v14 = (v11 + v11 * a2) / v12;
  if (v14 != v13)
  {
    v15 = 0;
    v16 = *(_QWORD *)((char *)result + 20);
    v17 = *(_QWORD *)((char *)result + 36);
    v18 = v13 + *(_QWORD *)((char *)result + 44);
    v19 = v14 - v13;
    v20 = result[14];
    v21 = (uint64_t *)result[16];
    v22 = result[13] * a2 / v12 + result[15];
    v23 = result[19];
    v25 = (uint64_t *)result[7];
    v24 = (uint64_t *)result[8];
    v26 = (uint64_t *)result[17];
    v27 = *v24;
    v28 = v24[1];
    v29 = v24[2];
    v30 = v25[2];
    v31 = (char *)(v30 + v29 * v18 + v17);
    v32 = *v26;
    v33 = v26[1];
    v34 = v26[2];
    v35 = v21[2];
    v36 = (char *)(v35 + v34 * v22 + v20);
    *(float *)&v37 = (float)*(unsigned int *)(v23 + 136);
    LOWORD(a5) = *(_WORD *)(v23 + 140);
    v38 = *(float *)&v37 / (float)*(unsigned int *)(v23 + 128);
    v39 = (float)LODWORD(a5);
    LOWORD(v37) = *(_WORD *)(v23 + 142);
    v40 = (float)v37;
    v41 = v38 * *(float *)v23;
    v42 = v38 * *(float *)(v23 + 8);
    v43 = v38 * *(float *)(v23 + 16);
    v44 = v38 * *(float *)(v23 + 20);
    v45 = *(float *)(v23 + 28);
    v46 = v38 * v45;
    LOWORD(v45) = *(_WORD *)(v23 + 144);
    v47 = (float)LODWORD(v45);
    LOWORD(v6) = *(_WORD *)(v23 + 146);
    v48 = (float)v6;
    LOWORD(v7) = *(_WORD *)(v23 + 148);
    v49 = (float)v7;
    LOWORD(v8) = *(_WORD *)(v23 + 150);
    v50 = (float)v8;
    LOWORD(v9) = *(_WORD *)(v23 + 152);
    v51 = (float)v9;
    v52 = *(float *)(v23 + 36);
    v53 = *(float *)(v23 + 40);
    v54 = *(float *)(v23 + 44);
    v55 = *(float *)(v23 + 48);
    v56 = *(float *)(v23 + 52);
    v57 = *(float *)(v23 + 56);
    v58 = *(float *)(v23 + 60);
    v59 = *(float *)(v23 + 64);
    v60 = *(float *)(v23 + 68);
    v62 = *v21;
    v61 = v21[1];
    v63 = (_BYTE *)(v61 + v33 * v22 + v20);
    if (!v61)
      v63 = 0;
    v64 = (_BYTE *)(v62 + v32 * v22 + v20);
    v66 = *v25;
    v65 = v25[1];
    v67 = v65 + v28 * v18 + v17;
    if (!v65)
      v67 = 0;
    result = (_QWORD *)(v66 + v27 * v18 + v17);
    do
    {
      if (v16)
      {
        v68 = 0;
        v69 = result;
        v70 = v64;
        v71 = v63;
        do
        {
          LOBYTE(v10) = *(_BYTE *)(v67 + v68);
          *(float *)&v72 = (float)LODWORD(v10);
          v73 = *(float *)&v72 - v40;
          LOBYTE(v72) = *(_BYTE *)(v67 + v68 + 1);
          v74 = (float)v72 - v40;
          v75 = v42 * v74;
          v76 = (float)(v44 * v74) + (float)(v73 * v43);
          v77 = v46 * v73;
          LOBYTE(v5) = *v69;
          v78 = v41 * (float)((float)LODWORD(v5) - v39);
          v79 = v75 + v78;
          v80 = v78 + v76;
          v81 = v77 + v78;
          v82 = (float)((float)((float)(v53 * (float)(v78 + v76)) + (float)(v52 * (float)(v75 + v78)))
                      + (float)(v54 * (float)(v77 + v78)))
              + v47;
          v83 = v49;
          if (v82 <= v49)
          {
            v83 = v82;
            if (v82 < v47)
              v83 = v47;
          }
          LOBYTE(v82) = v69[1];
          *v70 = llroundf(v83);
          if (v71)
          {
            v84 = (float)((float)(v48 + (float)(v79 * v55)) + (float)(v80 * v56)) + (float)(v81 * v57);
            v85 = v51;
            if (v84 <= v51)
            {
              v85 = (float)((float)(v48 + (float)(v79 * v55)) + (float)(v80 * v56)) + (float)(v81 * v57);
              if (v84 < v50)
                v85 = v50;
            }
            v86 = (float)((float)(v48 + (float)(v79 * v58)) + (float)(v80 * v59)) + (float)(v81 * v60);
            *v71 = llroundf(v85);
            v87 = v51;
            if (v86 <= v51)
            {
              if (v86 < v50)
                v87 = v50;
              else
                v87 = v86;
            }
            v71[1] = llroundf(v87);
            v71 += 2;
          }
          v88 = v41 * (float)((float)LODWORD(v82) - v39);
          v10 = v75 + v88;
          v89 = v76 + v88;
          v90 = v77 + v88;
          v91 = (float)((float)((float)(v53 * v89) + (float)(v52 * v10)) + (float)(v54 * v90)) + v47;
          v5 = v49;
          if (v91 <= v49)
          {
            v5 = (float)((float)((float)(v53 * v89) + (float)(v52 * v10)) + (float)(v54 * v90)) + v47;
            if (v91 < v47)
              v5 = v47;
          }
          v70[1] = llroundf(v5);
          if (v71)
          {
            v92 = (float)((float)(v48 + (float)(v10 * v55)) + (float)(v89 * v56)) + (float)(v90 * v57);
            v5 = v51;
            if (v92 <= v51)
            {
              v5 = (float)((float)(v48 + (float)(v10 * v55)) + (float)(v89 * v56)) + (float)(v90 * v57);
              if (v92 < v50)
                v5 = v50;
            }
            v10 = (float)((float)(v48 + (float)(v10 * v58)) + (float)(v89 * v59)) + (float)(v90 * v60);
            *v71 = llroundf(v5);
            v93 = v51;
            if (v10 <= v51)
            {
              v93 = v10;
              if (v10 < v50)
                v93 = v50;
            }
            v71[1] = llroundf(v93);
            v71 += 2;
          }
          v68 += 2;
          v69 += 2;
          v70 += 2;
        }
        while (v16 > v68);
      }
      result = (_QWORD *)((char *)result + v27);
      v67 += v28;
      v64 += v32;
      v63 += v33;
      ++v15;
    }
    while (v15 != v19);
    if (v30 && v35)
    {
      do
      {
        result = memcpy(v36, v31, v16);
        v31 += v29;
        v36 += v34;
        --v19;
      }
      while (v19);
    }
    else if (v35)
    {
      do
      {
        if (v16)
          result = memset(v36, 255, v16);
        v36 += v34;
        --v19;
      }
      while (v19);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Tone_Mat_TRC_xf444(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Tone_Mat_TRC_xf444_GCD);
  return 0;
}

_QWORD *vt_Copy_422vf_TRC_Tone_Mat_TRC_xf444_GCD(_QWORD *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  float v31;
  float v32;
  float v33;
  unsigned int v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  uint64_t v53;
  unsigned int v54;
  char v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _WORD *v61;
  _WORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE *v66;
  char v67;
  float v68;
  float v69;
  float v70;
  float v71;
  unint64_t v72;
  _BYTE *v73;
  _WORD *v74;
  _WORD *v75;
  float v76;
  unsigned int v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  BOOL v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v109;
  float v110;
  float v111;
  float v116;
  float v117;
  float v119;
  float v120;
  float v121;
  float v125;
  float v126;
  float v127;
  float v128;
  float v130;
  float v131;
  float v132;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  uint64_t v152;
  unint64_t v153;
  _WORD *v154;
  unsigned __int8 *v155;
  __int16 v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;

  v5 = *(_QWORD *)((char *)result + 28);
  v6 = *(unsigned __int8 *)result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)((char *)result + 20);
    v11 = *(_QWORD *)((char *)result + 36);
    v12 = v7 + *(_QWORD *)((char *)result + 44);
    v13 = v8 - v7;
    v14 = result[14];
    v15 = (_QWORD *)result[16];
    v16 = result[13] * a2 / v6 + result[15];
    v17 = result[19];
    v18 = (uint64_t *)result[7];
    v19 = (uint64_t *)result[8];
    v20 = (uint64_t *)result[17];
    v21 = *v19;
    v22 = v19[1];
    v23 = v19[2];
    v24 = v18[2];
    v25 = (unsigned __int8 *)(v24 + v23 * v12 + v11);
    v26 = *v20;
    v27 = v20[1];
    v28 = v20[2];
    v29 = v15[2];
    v30 = (char *)(v29 + v28 * v16 + 2 * v14);
    LOWORD(a4) = *(_WORD *)(v17 + 140);
    LOWORD(a5) = *(_WORD *)(v17 + 142);
    v31 = 8191.0 / (float)*(unsigned int *)(v17 + 128);
    v32 = (float)LODWORD(a5);
    v168 = v31 * *(float *)v17;
    v169 = (float)LODWORD(a4);
    v159 = v31 * *(float *)(v17 + 16);
    v160 = v31 * *(float *)(v17 + 8);
    v33 = v31 * *(float *)(v17 + 20);
    *(float *)&v34 = v31 * *(float *)(v17 + 28);
    v157 = *(float *)&v34;
    v158 = v33;
    LOWORD(v34) = *(_WORD *)(v17 + 144);
    v35 = (float)v34;
    LOWORD(v34) = *(_WORD *)(v17 + 146);
    v36 = (float)v34;
    LOWORD(v34) = *(_WORD *)(v17 + 148);
    v37 = (float)v34;
    LOWORD(v34) = *(_WORD *)(v17 + 150);
    v38 = (float)v34;
    LOWORD(v34) = *(_WORD *)(v17 + 152);
    v39 = (float)v34;
    v40 = *(float *)(v17 + 36);
    v41 = *(float *)(v17 + 40);
    v42 = *(float *)(v17 + 44);
    v166 = *(float *)(v17 + 48);
    v167 = v38;
    v164 = *(float *)(v17 + 56);
    v165 = *(float *)(v17 + 52);
    v162 = *(float *)(v17 + 64);
    v163 = *(float *)(v17 + 60);
    _S0 = *(float *)(v17 + 68);
    v44 = *(float *)(v17 + 72);
    v161 = _S0;
    v46 = *(float *)(v17 + 76);
    v45 = *(float *)(v17 + 80);
    v47 = *(float *)(v17 + 84);
    v48 = *(float *)(v17 + 88);
    v49 = *(float *)(v17 + 92);
    v50 = *(float *)(v17 + 96);
    v51 = *(float *)(v17 + 100);
    v52 = *(float *)(v17 + 104);
    v53 = v17 + 164;
    result = (_QWORD *)(v17 + 16548);
    v54 = *(unsigned __int8 *)(v17 + 132);
    if (v54 >= 0x11)
      v55 = 0;
    else
      v55 = 16 - v54;
    v56 = v15[1];
    _ZF = v56 == 0;
    v58 = v56 + v27 * v16;
    v59 = *v15 + v26 * v16;
    v60 = v17 + 32932;
    v61 = (_WORD *)(v58 + 2 * v14);
    if (_ZF)
      v61 = 0;
    v62 = (_WORD *)(v59 + 2 * v14);
    v64 = *v18;
    v63 = v18[1];
    v65 = v63 + v22 * v12 + v11;
    if (!v63)
      v65 = 0;
    v66 = (_BYTE *)(v64 + v21 * v12 + v11);
    v67 = v55;
    v69 = *(float *)(v17 + 108);
    v68 = *(float *)(v17 + 112);
    v70 = *(float *)(v17 + 116);
    v71 = *(float *)(v17 + 120);
    do
    {
      if (v10)
      {
        v72 = 0;
        v73 = v66;
        v74 = v62;
        v75 = v61;
        do
        {
          LOBYTE(_S0) = *(_BYTE *)(v65 + v72 + 1);
          v76 = (float)LODWORD(_S0) - v32;
          v77 = LODWORD(v160);
          v78 = v160 * v76;
          LOBYTE(v77) = *v73;
          v79 = v168 * (float)((float)v77 - v169);
          v80 = (float)(v160 * v76) + v79;
          v81 = 8191.0;
          if (v80 <= 8191.0)
          {
            v81 = (float)(v160 * v76) + v79;
            if (v80 < 0.0)
              v81 = 0.0;
          }
          LOBYTE(v80) = *(_BYTE *)(v65 + v72);
          v82 = v32;
          v83 = (float)LODWORD(v80) - v32;
          v84 = (float)(v158 * v76) + (float)(v83 * v159);
          v85 = 8191.0;
          if ((float)(v79 + v84) <= 8191.0)
          {
            v85 = v79 + v84;
            if ((float)(v79 + v84) < 0.0)
              v85 = 0.0;
          }
          v86 = v157 * v83;
          v87 = v86 + v79;
          v88 = (float)(v86 + v79) <= 8191.0;
          v89 = 8191.0;
          if (v88)
          {
            v89 = v87;
            if (v87 < 0.0)
              v89 = 0.0;
          }
          LOBYTE(v87) = v73[1];
          v90 = v168 * (float)((float)LODWORD(v87) - v169);
          v91 = v78 + v90;
          v88 = (float)(v78 + v90) <= 8191.0;
          v92 = 8191.0;
          if (v88)
          {
            v92 = v91;
            if (v91 < 0.0)
              v92 = 0.0;
          }
          v93 = v84 + v90;
          v88 = (float)(v84 + v90) <= 8191.0;
          v94 = 8191.0;
          if (v88)
          {
            v94 = v93;
            if (v93 < 0.0)
              v94 = 0.0;
          }
          v95 = v86 + v90;
          v88 = (float)(v86 + v90) <= 8191.0;
          v96 = 8191.0;
          if (v88)
          {
            v96 = v95;
            if (v95 < 0.0)
              v96 = 0.0;
          }
          _H0 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          __asm { FCVT            S1, H0 }
          _H0 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          __asm { FCVT            S2, H0 }
          _H0 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          __asm { FCVT            S26, H0 }
          _H19 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          _H28 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v96, 0.0), 8191.0)));
          v109 = fmaxf(_S1, fmaxf(_S2, _S26));
          v110 = (float)((float)((float)(v68 * _S2) + (float)(v69 * _S1)) + (float)(v70 * _S26)) + (float)(v71 * v109);
          v111 = 8191.0;
          if (v110 <= 8191.0)
          {
            v111 = (float)((float)((float)(v68 * _S2) + (float)(v69 * _S1)) + (float)(v70 * _S26)) + (float)(v71 * v109);
            if (v110 < 0.0)
              v111 = 0.0;
          }
          __asm
          {
            FCVT            S27, H19
            FCVT            S28, H28
            FCVT            S29, H29
          }
          _H19 = *((_WORD *)result + llroundf(v111));
          v116 = (float)((float)((float)(v68 * _S28) + (float)(v69 * _S27)) + (float)(v70 * _S29))
               + (float)(v71 * fmaxf(_S27, fmaxf(_S28, _S29)));
          v117 = 8191.0;
          if (v116 <= 8191.0)
          {
            v117 = v116;
            if (v116 < 0.0)
              v117 = 0.0;
          }
          __asm { FCVT            S0, H19 }
          v119 = _S1 * _S0;
          v120 = _S2 * _S0;
          v121 = _S26 * _S0;
          _H19 = *((_WORD *)result + llroundf(v117));
          __asm { FCVT            S19, H19 }
          _S24 = _S27 * _S19;
          v125 = _S28 * _S19;
          v126 = _S29 * _S19;
          v127 = (float)((float)(v46 * v120) + (float)(v119 * v44)) + (float)(v121 * v45);
          v128 = (float)((float)(v48 * v120) + (float)(v119 * v47)) + (float)(v121 * v49);
          _S0 = (float)((float)(v51 * v120) + (float)(v119 * v50)) + (float)(v121 * v52);
          v130 = (float)((float)(v46 * v125) + (float)(_S24 * v44)) + (float)(v126 * v45);
          v131 = (float)((float)(v48 * v125) + (float)(_S24 * v47)) + (float)(v126 * v49);
          v132 = (float)((float)(v51 * v125) + (float)(_S24 * v50)) + (float)(v126 * v52);
          LOWORD(_S24) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v127, 0.0), 8191.0)));
          __asm { FCVT            S27, H24 }
          LOWORD(_S24) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v128, 0.0), 8191.0)));
          __asm { FCVT            S28, H24 }
          LOWORD(_S0) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          __asm { FCVT            S29, H0 }
          _H0 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v130, 0.0), 8191.0)));
          _H24 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v131, 0.0), 8191.0)));
          _H26 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v132, 0.0), 8191.0)));
          v139 = (float)((float)((float)(v41 * _S28) + (float)(v40 * _S27)) + (float)(v42 * _S29)) + v35;
          v140 = v37;
          if (v139 <= v37)
          {
            v140 = (float)((float)((float)(v41 * _S28) + (float)(v40 * _S27)) + (float)(v42 * _S29)) + v35;
            if (v139 < v35)
              v140 = v35;
          }
          *v74 = llroundf(v140) << v67;
          if (v75)
          {
            v141 = (float)((float)(v36 + (float)(_S27 * v166)) + (float)(_S28 * v165)) + (float)(_S29 * v164);
            v142 = v39;
            if (v141 <= v39)
            {
              v142 = (float)((float)(v36 + (float)(_S27 * v166)) + (float)(_S28 * v165)) + (float)(_S29 * v164);
              if (v141 < v167)
                v142 = v167;
            }
            v143 = (float)((float)(v36 + (float)(_S27 * v163)) + (float)(_S28 * v162)) + (float)(_S29 * v161);
            *v75 = llroundf(v142) << v67;
            v144 = v39;
            if (v143 <= v39)
            {
              v144 = (float)((float)(v36 + (float)(_S27 * v163)) + (float)(_S28 * v162)) + (float)(_S29 * v161);
              if (v143 < v167)
                v144 = v167;
            }
            v75[1] = llroundf(v144) << v67;
            v75 += 2;
          }
          v32 = v82;
          __asm
          {
            FCVT            S0, H0
            FCVT            S2, H24
            FCVT            S26, H26
          }
          v147 = (float)((float)((float)(v41 * _S2) + (float)(v40 * _S0)) + (float)(v42 * _S26)) + v35;
          v148 = v37;
          if (v147 <= v37)
          {
            v148 = (float)((float)((float)(v41 * _S2) + (float)(v40 * _S0)) + (float)(v42 * _S26)) + v35;
            if (v147 < v35)
              v148 = v35;
          }
          v74[1] = llroundf(v148) << v67;
          if (v75)
          {
            v149 = (float)((float)(v36 + (float)(_S0 * v166)) + (float)(_S2 * v165)) + (float)(_S26 * v164);
            v150 = v39;
            if (v149 <= v39)
            {
              v150 = (float)((float)(v36 + (float)(_S0 * v166)) + (float)(_S2 * v165)) + (float)(_S26 * v164);
              if (v149 < v167)
                v150 = v167;
            }
            _S0 = (float)((float)(v36 + (float)(_S0 * v163)) + (float)(_S2 * v162)) + (float)(_S26 * v161);
            *v75 = llroundf(v150) << v67;
            v151 = v39;
            if (_S0 <= v39)
            {
              v151 = _S0;
              if (_S0 < v167)
                v151 = v167;
            }
            v75[1] = llroundf(v151) << v67;
            v75 += 2;
          }
          v72 += 2;
          v73 += 2;
          v74 += 2;
        }
        while (v10 > v72);
      }
      v66 += v21;
      v65 += v22;
      v62 = (_WORD *)((char *)v62 + v26);
      v61 = (_WORD *)((char *)v61 + v27);
      ++v9;
    }
    while (v9 != v13);
    if (v24 && v29)
    {
      v152 = 0;
      do
      {
        if (v10)
        {
          v153 = v10;
          v154 = v30;
          v155 = v25;
          do
          {
            v156 = *v155++;
            *v154++ = v156 | (v156 << 8);
            --v153;
          }
          while (v153);
        }
        v25 += v23;
        v30 += v28;
        ++v152;
      }
      while (v152 != v13);
    }
    else if (v29)
    {
      do
      {
        if (v10)
          result = memset(v30, 255, 2 * v10);
        v30 += v28;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Mat_TRC_xf444(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Mat_TRC_xf444_GCD);
  return 0;
}

_QWORD *vt_Copy_422vf_TRC_Mat_TRC_xf444_GCD(_QWORD *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  float v33;
  float v34;
  float v35;
  float v36;
  unsigned int v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  uint64_t v57;
  unsigned int v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE *v67;
  char v68;
  unint64_t v69;
  _BYTE *v70;
  _WORD *v71;
  _WORD *v72;
  float v73;
  unsigned int v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  unsigned int v92;
  float v93;
  float v104;
  float v105;
  float v110;
  float v111;
  float v118;
  float v119;
  float v120;
  float v124;
  float v125;
  float v126;
  float v127;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  uint64_t v135;
  unint64_t v136;
  _WORD *v137;
  unsigned __int8 *v138;
  __int16 v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;

  v6 = *(_QWORD *)((char *)result + 28);
  v7 = *(unsigned __int8 *)result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)((char *)result + 20);
    v12 = *(_QWORD *)((char *)result + 36);
    v13 = v8 + *(_QWORD *)((char *)result + 44);
    v14 = v9 - v8;
    v15 = result[14];
    v16 = result[13] * a2 / v7;
    v17 = (uint64_t *)result[16];
    v18 = v16 + result[15];
    v19 = result[19];
    v20 = (uint64_t *)result[7];
    v21 = (uint64_t *)result[8];
    v22 = (uint64_t *)result[17];
    v23 = *v21;
    v24 = v21[1];
    v25 = v21[2];
    v26 = v20[2];
    v27 = (unsigned __int8 *)(v26 + v25 * v13 + v12);
    v28 = *v22;
    v29 = v22[1];
    v30 = v22[2];
    v31 = v17[2];
    v32 = (char *)(v31 + v30 * v18 + 2 * v15);
    LOWORD(a5) = *(_WORD *)(v19 + 140);
    LOWORD(a6) = *(_WORD *)(v19 + 142);
    v33 = 8191.0 / (float)*(unsigned int *)(v19 + 128);
    v34 = (float)LODWORD(a5);
    v35 = (float)LODWORD(a6);
    v36 = v33 * *(float *)v19;
    v142 = v33 * *(float *)(v19 + 16);
    v143 = v33 * *(float *)(v19 + 8);
    v140 = v33 * *(float *)(v19 + 28);
    *(float *)&v37 = v140;
    v141 = v33 * *(float *)(v19 + 20);
    LOWORD(v37) = *(_WORD *)(v19 + 144);
    v38 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v19 + 146);
    v39 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v19 + 148);
    v40 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v19 + 150);
    v41 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v19 + 152);
    v42 = (float)v37;
    v43 = *(float *)(v19 + 36);
    v44 = *(float *)(v19 + 40);
    v45 = *(float *)(v19 + 44);
    v147 = *(float *)(v19 + 52);
    v148 = *(float *)(v19 + 48);
    v145 = *(float *)(v19 + 60);
    v146 = *(float *)(v19 + 56);
    _S4 = *(float *)(v19 + 64);
    v47 = *(float *)(v19 + 68);
    v144 = _S4;
    v48 = *(float *)(v19 + 72);
    v49 = *(float *)(v19 + 76);
    v50 = *(float *)(v19 + 80);
    v51 = *(float *)(v19 + 84);
    v52 = *(float *)(v19 + 88);
    v53 = *(float *)(v19 + 92);
    v54 = *(float *)(v19 + 96);
    v55 = *(float *)(v19 + 100);
    v56 = *(float *)(v19 + 104);
    v57 = v19 + 164;
    result = (_QWORD *)(v19 + 16548);
    v58 = *(unsigned __int8 *)(v19 + 132);
    if (v58 >= 0x11)
      v59 = 0;
    else
      v59 = 16 - v58;
    v61 = *v17;
    v60 = v17[1];
    v62 = v60 + v29 * v18 + 2 * v15;
    if (!v60)
      v62 = 0;
    v63 = v61 + v28 * v18 + 2 * v15;
    v65 = *v20;
    v64 = v20[1];
    v66 = v64 + v24 * v13 + v12;
    if (!v64)
      v66 = 0;
    v67 = (_BYTE *)(v65 + v23 * v13 + v12);
    v68 = v59;
    do
    {
      if (v11)
      {
        v69 = 0;
        v70 = v67;
        v71 = (_WORD *)v63;
        v72 = (_WORD *)v62;
        do
        {
          LOBYTE(_S4) = *(_BYTE *)(v66 + v69 + 1);
          v73 = (float)LODWORD(_S4) - v35;
          v74 = LODWORD(v143);
          v75 = v143 * v73;
          LOBYTE(v74) = *v70;
          v76 = v36 * (float)((float)v74 - v34);
          v77 = (float)(v143 * v73) + v76;
          v78 = 8191.0;
          if (v77 <= 8191.0)
          {
            v78 = (float)(v143 * v73) + v76;
            if (v77 < 0.0)
              v78 = 0.0;
          }
          LOBYTE(v77) = *(_BYTE *)(v66 + v69);
          v79 = (float)LODWORD(v77) - v35;
          v80 = (float)(v141 * v73) + (float)(v79 * v142);
          v81 = 8191.0;
          if ((float)(v76 + v80) <= 8191.0)
          {
            v81 = v76 + v80;
            if ((float)(v76 + v80) < 0.0)
              v81 = 0.0;
          }
          v82 = v140 * v79;
          v83 = (float)(v140 * v79) + v76;
          v84 = 8191.0;
          if (v83 <= 8191.0)
          {
            v84 = v83;
            if (v83 < 0.0)
              v84 = 0.0;
          }
          LOBYTE(v83) = v70[1];
          v85 = v36 * (float)((float)LODWORD(v83) - v34);
          v86 = v75 + v85;
          if (v86 < 0.0)
            v87 = 0.0;
          else
            v87 = v86;
          if (v86 > 8191.0)
            v87 = 8191.0;
          v88 = v80 + v85;
          if ((float)(v80 + v85) < 0.0)
            v89 = 0.0;
          else
            v89 = v80 + v85;
          if (v88 <= 8191.0)
            v90 = v89;
          else
            v90 = 8191.0;
          if ((float)(v82 + v85) < 0.0)
            v91 = 0.0;
          else
            v91 = v82 + v85;
          v92 = llroundf(fminf(fmaxf(v78, 0.0), 8191.0));
          if ((float)(v82 + v85) <= 8191.0)
            v93 = v91;
          else
            v93 = 8191.0;
          _H4 = *(_WORD *)(v57 + 2 * v92);
          __asm { FCVT            S4, H4 }
          _H5 = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H6 = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          v104 = (float)((float)(v49 * _S5) + (float)(_S4 * v48)) + (float)(_S6 * v50);
          v105 = (float)((float)(v52 * _S5) + (float)(_S4 * v51)) + (float)(_S6 * v53);
          _S6 = (float)((float)(v55 * _S5) + (float)(_S4 * v54)) + (float)(_S6 * v56);
          LOWORD(_S4) = *((_WORD *)result + llroundf(fminf(fmaxf(v104, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          LOWORD(_S5) = *((_WORD *)result + llroundf(fminf(fmaxf(v105, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = *((_WORD *)result + llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          v110 = (float)((float)((float)(v44 * _S5) + (float)(v43 * _S4)) + (float)(v45 * _S6)) + v38;
          v111 = v40;
          if (v110 <= v40)
          {
            v111 = (float)((float)((float)(v44 * _S5) + (float)(v43 * _S4)) + (float)(v45 * _S6)) + v38;
            if (v110 < v38)
              v111 = v38;
          }
          _H7 = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          _H24 = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          _H25 = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          v118 = (float)((float)(v49 * _S24) + (float)(_S7 * v48)) + (float)(_S25 * v50);
          v119 = (float)((float)(v52 * _S24) + (float)(_S7 * v51)) + (float)(_S25 * v53);
          v120 = (float)((float)(v55 * _S24) + (float)(_S7 * v54)) + (float)(_S25 * v56);
          _H7 = *((_WORD *)result + llroundf(fminf(fmaxf(v118, 0.0), 8191.0)));
          _H24 = *((_WORD *)result + llroundf(fminf(fmaxf(v119, 0.0), 8191.0)));
          _H25 = *((_WORD *)result + llroundf(fminf(fmaxf(v120, 0.0), 8191.0)));
          *v71 = llroundf(v111) << v68;
          if (v72)
          {
            v124 = (float)((float)(v39 + (float)(_S4 * v148)) + (float)(_S5 * v147)) + (float)(_S6 * v146);
            v125 = v42;
            if (v124 <= v42)
            {
              v125 = (float)((float)(v39 + (float)(_S4 * v148)) + (float)(_S5 * v147)) + (float)(_S6 * v146);
              if (v124 < v41)
                v125 = v41;
            }
            v126 = (float)((float)(v39 + (float)(_S4 * v145)) + (float)(_S5 * v144)) + (float)(_S6 * v47);
            *v72 = llroundf(v125) << v68;
            v127 = v42;
            if (v126 <= v42)
            {
              v127 = v126;
              if (v126 < v41)
                v127 = v41;
            }
            v72[1] = llroundf(v127) << v68;
            v72 += 2;
          }
          __asm
          {
            FCVT            S4, H7
            FCVT            S5, H24
            FCVT            S6, H25
          }
          v130 = (float)((float)((float)(v44 * _S5) + (float)(v43 * _S4)) + (float)(v45 * _S6)) + v38;
          v131 = v40;
          if (v130 <= v40)
          {
            v131 = (float)((float)((float)(v44 * _S5) + (float)(v43 * _S4)) + (float)(v45 * _S6)) + v38;
            if (v130 < v38)
              v131 = v38;
          }
          v71[1] = llroundf(v131) << v68;
          if (v72)
          {
            v132 = (float)((float)(v39 + (float)(_S4 * v148)) + (float)(_S5 * v147)) + (float)(_S6 * v146);
            v133 = v42;
            if (v132 <= v42)
            {
              v133 = (float)((float)(v39 + (float)(_S4 * v148)) + (float)(_S5 * v147)) + (float)(_S6 * v146);
              if (v132 < v41)
                v133 = v41;
            }
            _S4 = (float)((float)(v39 + (float)(_S4 * v145)) + (float)(_S5 * v144)) + (float)(_S6 * v47);
            *v72 = llroundf(v133) << v68;
            v134 = v42;
            if (_S4 <= v42)
            {
              v134 = _S4;
              if (_S4 < v41)
                v134 = v41;
            }
            v72[1] = llroundf(v134) << v68;
            v72 += 2;
          }
          v69 += 2;
          v70 += 2;
          v71 += 2;
        }
        while (v11 > v69);
      }
      v67 += v23;
      v66 += v24;
      v63 += v28;
      v62 += v29;
      ++v10;
    }
    while (v10 != v14);
    if (v26 && v31)
    {
      v135 = 0;
      do
      {
        if (v11)
        {
          v136 = v11;
          v137 = v32;
          v138 = v27;
          do
          {
            v139 = *v138++;
            *v137++ = v139 | (v139 << 8);
            --v136;
          }
          while (v136);
        }
        v27 += v25;
        v32 += v30;
        ++v135;
      }
      while (v135 != v14);
    }
    else if (v31)
    {
      do
      {
        if (v11)
          result = memset(v32, 255, 2 * v11);
        v32 += v30;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_rgb_xf444(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_rgb_xf444_GCD);
  return 0;
}

_QWORD *vt_Copy_422vf_rgb_xf444_GCD(_QWORD *result, uint64_t a2)
{
  float v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  float v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unsigned int v34;
  unsigned int v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  unsigned int v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE *v67;
  char v68;
  unint64_t v69;
  _BYTE *v70;
  _WORD *v71;
  _WORD *v72;
  unsigned int v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  uint64_t v95;
  unint64_t v96;
  _WORD *v97;
  unsigned __int8 *v98;
  __int16 v99;

  v8 = *(_QWORD *)((char *)result + 28);
  v9 = *(unsigned __int8 *)result;
  v10 = v8 * a2 / v9;
  v11 = (v8 + v8 * a2) / v9;
  if (v11 != v10)
  {
    v12 = 0;
    v13 = *(_QWORD *)((char *)result + 20);
    v14 = *(_QWORD *)((char *)result + 36);
    v15 = v10 + *(_QWORD *)((char *)result + 44);
    v16 = v11 - v10;
    v17 = result[14];
    v18 = (uint64_t *)result[16];
    v19 = result[13] * a2 / v9 + result[15];
    v20 = result[19];
    v21 = (uint64_t *)result[7];
    v22 = (uint64_t *)result[8];
    v23 = (uint64_t *)result[17];
    v24 = *v22;
    v25 = v22[1];
    v26 = v22[2];
    v27 = v21[2];
    v28 = (unsigned __int8 *)(v27 + v26 * v15 + v14);
    v29 = *v23;
    v30 = v23[1];
    v31 = v23[2];
    v32 = v18[2];
    v33 = (char *)(v32 + v31 * v19 + 2 * v17);
    *(float *)&v34 = (float)*(unsigned int *)(v20 + 128);
    *(float *)&v35 = (float)*(unsigned int *)(v20 + 136);
    v36 = *(float *)&v35 / *(float *)&v34;
    LOWORD(v34) = *(_WORD *)(v20 + 140);
    v37 = (float)v34;
    LOWORD(v35) = *(_WORD *)(v20 + 142);
    v38 = (float)v35;
    v39 = v36 * *(float *)v20;
    v40 = v36 * *(float *)(v20 + 8);
    v41 = v36 * *(float *)(v20 + 16);
    v42 = v36 * *(float *)(v20 + 20);
    v43 = *(float *)(v20 + 28);
    v44 = v36 * v43;
    LOWORD(v43) = *(_WORD *)(v20 + 144);
    v45 = (float)LODWORD(v43);
    LOWORD(v3) = *(_WORD *)(v20 + 146);
    v46 = (float)v3;
    LOWORD(v4) = *(_WORD *)(v20 + 148);
    v47 = (float)v4;
    LOWORD(v5) = *(_WORD *)(v20 + 150);
    v48 = (float)v5;
    LOWORD(v6) = *(_WORD *)(v20 + 152);
    v49 = (float)v6;
    v50 = *(float *)(v20 + 36);
    v51 = *(float *)(v20 + 40);
    v52 = *(float *)(v20 + 44);
    v53 = *(float *)(v20 + 48);
    v54 = *(float *)(v20 + 52);
    v55 = *(float *)(v20 + 56);
    v56 = *(float *)(v20 + 60);
    v57 = *(float *)(v20 + 64);
    v58 = *(float *)(v20 + 68);
    v59 = *(unsigned __int8 *)(v20 + 132);
    v60 = 16 - v59;
    if (v59 >= 0x11)
      v60 = 0;
    v62 = *v18;
    v61 = v18[1];
    v63 = v61 + v30 * v19 + 2 * v17;
    if (!v61)
      v63 = 0;
    result = (_QWORD *)(v62 + v29 * v19 + 2 * v17);
    v65 = *v21;
    v64 = v21[1];
    v66 = v64 + v25 * v15 + v14;
    if (!v64)
      v66 = 0;
    v67 = (_BYTE *)(v65 + v24 * v15 + v14);
    v68 = v60;
    do
    {
      if (v13)
      {
        v69 = 0;
        v70 = v67;
        v71 = result;
        v72 = (_WORD *)v63;
        do
        {
          LOBYTE(v7) = *(_BYTE *)(v66 + v69);
          *(float *)&v73 = (float)LODWORD(v7);
          v74 = *(float *)&v73 - v38;
          LOBYTE(v73) = *(_BYTE *)(v66 + v69 + 1);
          v75 = (float)v73 - v38;
          v76 = v40 * v75;
          v77 = (float)(v42 * v75) + (float)(v74 * v41);
          v78 = v44 * v74;
          LOBYTE(v2) = *v70;
          v79 = v39 * (float)((float)LODWORD(v2) - v37);
          v80 = v76 + v79;
          v81 = v79 + v77;
          v82 = v78 + v79;
          v83 = (float)((float)((float)(v51 * (float)(v79 + v77)) + (float)(v50 * (float)(v76 + v79)))
                      + (float)(v52 * (float)(v78 + v79)))
              + v45;
          v84 = v47;
          if (v83 <= v47)
          {
            v84 = v83;
            if (v83 < v45)
              v84 = v45;
          }
          LOBYTE(v83) = v70[1];
          *v71 = llroundf(v84) << v68;
          if (v72)
          {
            v85 = (float)((float)(v46 + (float)(v80 * v53)) + (float)(v81 * v54)) + (float)(v82 * v55);
            v86 = v49;
            if (v85 <= v49)
            {
              v86 = (float)((float)(v46 + (float)(v80 * v53)) + (float)(v81 * v54)) + (float)(v82 * v55);
              if (v85 < v48)
                v86 = v48;
            }
            v87 = (float)((float)(v46 + (float)(v80 * v56)) + (float)(v81 * v57)) + (float)(v82 * v58);
            *v72 = llroundf(v86) << v68;
            v88 = v49;
            if (v87 <= v49)
            {
              if (v87 < v48)
                v88 = v48;
              else
                v88 = v87;
            }
            v72[1] = llroundf(v88) << v68;
            v72 += 2;
          }
          v89 = v39 * (float)((float)LODWORD(v83) - v37);
          v7 = v76 + v89;
          v90 = v77 + v89;
          v91 = v78 + v89;
          v92 = (float)((float)((float)(v51 * v90) + (float)(v50 * v7)) + (float)(v52 * v91)) + v45;
          v2 = v47;
          if (v92 <= v47)
          {
            v2 = (float)((float)((float)(v51 * v90) + (float)(v50 * v7)) + (float)(v52 * v91)) + v45;
            if (v92 < v45)
              v2 = v45;
          }
          v71[1] = llroundf(v2) << v68;
          if (v72)
          {
            v93 = (float)((float)(v46 + (float)(v7 * v53)) + (float)(v90 * v54)) + (float)(v91 * v55);
            v2 = v49;
            if (v93 <= v49)
            {
              v2 = (float)((float)(v46 + (float)(v7 * v53)) + (float)(v90 * v54)) + (float)(v91 * v55);
              if (v93 < v48)
                v2 = v48;
            }
            v7 = (float)((float)(v46 + (float)(v7 * v56)) + (float)(v90 * v57)) + (float)(v91 * v58);
            *v72 = llroundf(v2) << v68;
            v94 = v49;
            if (v7 <= v49)
            {
              v94 = v7;
              if (v7 < v48)
                v94 = v48;
            }
            v72[1] = llroundf(v94) << v68;
            v72 += 2;
          }
          v69 += 2;
          v70 += 2;
          v71 += 2;
        }
        while (v13 > v69);
      }
      v67 += v24;
      v66 += v25;
      result = (_QWORD *)((char *)result + v29);
      v63 += v30;
      ++v12;
    }
    while (v12 != v16);
    if (v27 && v32)
    {
      v95 = 0;
      do
      {
        if (v13)
        {
          v96 = v13;
          v97 = v33;
          v98 = v28;
          do
          {
            v99 = *v98++;
            *v97++ = v99 | (v99 << 8);
            --v96;
          }
          while (v96);
        }
        v28 += v26;
        v33 += v31;
        ++v95;
      }
      while (v95 != v16);
    }
    else if (v32)
    {
      do
      {
        if (v13)
          result = memset(v33, 255, 2 * v13);
        v33 += v31;
        --v16;
      }
      while (v16);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Tone_Mat_TRC_BGRA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Tone_Mat_TRC_BGRA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_422vf_TRC_Tone_Mat_TRC_BGRA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  unint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  char *v63;
  unsigned int v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  BOOL v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  char v84;
  char v85;
  float v87;
  unsigned int v94;
  float v101;
  float v102;
  float v107;
  float v108;
  float v110;
  float v111;
  float v113;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  char v129;
  char v130;
  float v132;
  uint64_t v139;

  v6 = *(_QWORD *)(result + 28);
  v7 = *result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)(result + 20);
    v12 = v8 + *(_QWORD *)(result + 44);
    v13 = v9 - v8;
    v14 = *((_QWORD *)result + 19);
    v15 = (uint64_t *)*((_QWORD *)result + 7);
    v16 = (uint64_t *)*((_QWORD *)result + 8);
    v17 = *v16;
    v18 = v16[1];
    v19 = v16[2];
    v20 = **((_QWORD **)result + 17);
    *(float *)&v21 = (float)*(unsigned int *)(v14 + 128);
    v22 = 8191.0 / *(float *)&v21;
    LOWORD(v21) = *(_WORD *)(v14 + 140);
    v23 = (float)v21;
    LOWORD(a5) = *(_WORD *)(v14 + 142);
    v24 = (float)LODWORD(a5);
    v25 = v22 * *(float *)v14;
    v26 = v22 * *(float *)(v14 + 8);
    v27 = v22 * *(float *)(v14 + 16);
    v28 = v22 * *(float *)(v14 + 20);
    v29 = v22 * *(float *)(v14 + 28);
    v30 = *(float *)(v14 + 72);
    v31 = *(float *)(v14 + 76);
    v32 = *(float *)(v14 + 80);
    v33 = *(float *)(v14 + 84);
    v34 = *(float *)(v14 + 88);
    v35 = *(float *)(v14 + 92);
    v36 = *(float *)(v14 + 96);
    v37 = *(float *)(v14 + 100);
    v38 = v14 + 164;
    v39 = v14 + 16548;
    v40 = v14 + 32932;
    v41 = *(float *)(v14 + 104);
    v42 = *(float *)(v14 + 108);
    v43 = *(float *)(v14 + 112);
    v44 = *(float *)(v14 + 116);
    v45 = *(float *)(v14 + 120);
    v46 = (_QWORD *)*((_QWORD *)result + 16);
    v47 = *((_QWORD *)result + 14);
    v48 = *((_QWORD *)result + 13) * a2 / v7 + *((_QWORD *)result + 15);
    v49 = *(_QWORD *)(result + 36);
    result = (unsigned __int8 *)*(unsigned __int8 *)(v14 + 161);
    v50 = *(unsigned __int8 *)(v14 + 160);
    v51 = *(unsigned __int8 *)(v14 + 159);
    v52 = *(unsigned __int8 *)(v14 + 158);
    v53 = *v46 + v48 * v20 + 4 * v47;
    v54 = v15[2];
    if (v54)
      v55 = (char *)(v54 + v19 * v12 + v49);
    else
      v55 = 0;
    v57 = *v15;
    v56 = v15[1];
    v58 = v56 + v18 * v12 + v49;
    if (!v56)
      v58 = 0;
    v59 = (_BYTE *)(v57 + v17 * v12 + v49);
    do
    {
      if (v11)
      {
        v60 = 0;
        v61 = v59;
        v62 = v53;
        v63 = v55;
        do
        {
          LOBYTE(_S30) = *(_BYTE *)(v58 + v60 + 1);
          *(float *)&v64 = (float)LODWORD(_S30);
          v65 = *(float *)&v64 - v24;
          v66 = v26 * (float)(*(float *)&v64 - v24);
          LOBYTE(v64) = *v61;
          v67 = v25 * (float)((float)v64 - v23);
          v68 = v66 + v67;
          v69 = 8191.0;
          if ((float)(v66 + v67) <= 8191.0)
          {
            v69 = v66 + v67;
            if (v68 < 0.0)
              v69 = 0.0;
          }
          LOBYTE(v68) = *(_BYTE *)(v58 + v60);
          v70 = (float)LODWORD(v68) - v24;
          v71 = (float)(v28 * v65) + (float)(v70 * v27);
          v72 = 8191.0;
          if ((float)(v67 + v71) <= 8191.0)
          {
            v72 = v67 + v71;
            if ((float)(v67 + v71) < 0.0)
              v72 = 0.0;
          }
          v73 = v29 * v70;
          v74 = (float)(v29 * v70) + v67;
          v75 = 8191.0;
          if (v74 <= 8191.0)
          {
            v75 = v74;
            if (v74 < 0.0)
              v75 = 0.0;
          }
          LOBYTE(v74) = v61[1];
          v76 = v25 * (float)((float)LODWORD(v74) - v23);
          v77 = v66 + v76;
          v78 = (float)(v66 + v76) <= 8191.0;
          v79 = 8191.0;
          if (v78)
          {
            v79 = v77;
            if (v77 < 0.0)
              v79 = 0.0;
          }
          v80 = v71 + v76;
          v81 = 8191.0;
          if (v80 <= 8191.0)
          {
            v81 = v80;
            if (v80 < 0.0)
              v81 = 0.0;
          }
          v82 = v73 + v76;
          v78 = (float)(v73 + v76) <= 8191.0;
          v83 = 8191.0;
          if (v78)
          {
            v83 = v82;
            if (v82 < 0.0)
              v83 = 0.0;
          }
          if (v63)
          {
            v84 = *v63;
            v85 = v63[1];
            v63 += 2;
          }
          else
          {
            v84 = 0;
            v85 = 0;
          }
          _S10 = fmaxf(v69, 0.0);
          v87 = 8191.0;
          LOWORD(_S10) = *(_WORD *)(v38 + 2 * llroundf(fminf(_S10, 8191.0)));
          __asm { FCVT            S10, H10 }
          _H31 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          v94 = llroundf(fminf(fmaxf(v75, 0.0), 8191.0));
          __asm { FCVT            S8, H31 }
          _H31 = *(_WORD *)(v38 + 2 * v94);
          __asm { FCVT            S31, H31 }
          _H9 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          v101 = (float)((float)((float)(v43 * _S8) + (float)(v42 * _S10)) + (float)(v44 * _S31))
               + (float)(v45 * fmaxf(_S10, fmaxf(_S8, _S31)));
          v102 = 8191.0;
          if (v101 <= 8191.0)
          {
            v102 = v101;
            if (v101 < 0.0)
              v102 = 0.0;
          }
          __asm
          {
            FCVT            S9, H9
            FCVT            S11, H11
            FCVT            S12, H12
          }
          _H13 = *(_WORD *)(v39 + 2 * llroundf(v102));
          v107 = fmaxf(_S9, fmaxf(_S11, _S12));
          v108 = (float)((float)((float)(v43 * _S11) + (float)(v42 * _S9)) + (float)(v44 * _S12)) + (float)(v45 * v107);
          if (v108 <= 8191.0)
          {
            v87 = (float)((float)((float)(v43 * _S11) + (float)(v42 * _S9)) + (float)(v44 * _S12)) + (float)(v45 * v107);
            if (v108 < 0.0)
              v87 = 0.0;
          }
          __asm { FCVT            S13, H13 }
          v110 = _S10 * _S13;
          v111 = _S8 * _S13;
          _H30 = *(_WORD *)(v39 + 2 * llroundf(v87));
          v113 = _S31 * _S13;
          __asm { FCVT            S30, H30 }
          v115 = _S9 * _S30;
          v116 = _S11 * _S30;
          v117 = _S12 * _S30;
          v118 = (float)((float)(v31 * v111) + (float)(v110 * v30)) + (float)(v113 * v32);
          v119 = (float)((float)(v34 * v111) + (float)(v110 * v33)) + (float)(v113 * v35);
          v120 = (float)((float)(v37 * v111) + (float)(v110 * v36)) + (float)(v113 * v41);
          v121 = (float)((float)(v31 * v116) + (float)(v115 * v30)) + (float)(v117 * v32);
          v122 = (float)((float)(v34 * v116) + (float)(v115 * v33)) + (float)(v117 * v35);
          v123 = (float)((float)(v37 * v116) + (float)(v115 * v36)) + (float)(v117 * v41);
          _H11 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v118, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v119, 0.0), 8191.0)));
          _H9 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v120, 0.0), 8191.0)));
          _H8 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v121, 0.0), 8191.0)));
          _H31 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v122, 0.0), 8191.0)));
          _S30 = fminf(fmaxf(v123, 0.0), 8191.0);
          LOWORD(_S30) = *(_WORD *)(v40 + 2 * llroundf(_S30));
          if (v63)
            v129 = v84;
          else
            v129 = -1;
          if (v63)
            v130 = v85;
          else
            v130 = -1;
          __asm { FCVT            S12, H11 }
          v132 = 255.0;
          if (_S12 <= 255.0)
          {
            v132 = _S12;
            if (_S12 < 0.0)
              v132 = 0.0;
          }
          *(_BYTE *)(v62 + v52) = llroundf(v132);
          __asm { FCVT            S12, H10 }
          _S11 = 255.0;
          if (_S12 <= 255.0)
          {
            if (_S12 >= 0.0)
              __asm { FCVT            S11, H10 }
            else
              _S11 = 0.0;
          }
          *(_BYTE *)(v62 + v51) = llroundf(_S11);
          __asm { FCVT            S11, H9 }
          _S10 = 255.0;
          if (_S11 <= 255.0)
          {
            if (_S11 >= 0.0)
              __asm { FCVT            S10, H9 }
            else
              _S10 = 0.0;
          }
          *(_BYTE *)(v62 + v50) = llroundf(_S10);
          result[v62] = v129;
          __asm { FCVT            S10, H8 }
          _S9 = 255.0;
          if (_S10 <= 255.0)
          {
            if (_S10 >= 0.0)
              __asm { FCVT            S9, H8 }
            else
              _S9 = 0.0;
          }
          v139 = v62 + 4;
          *(_BYTE *)(v62 + 4 + v52) = llroundf(_S9);
          __asm { FCVT            S9, H31 }
          _S8 = 255.0;
          if (_S9 <= 255.0)
          {
            if (_S9 >= 0.0)
              __asm { FCVT            S8, H31 }
            else
              _S8 = 0.0;
          }
          *(_BYTE *)(v139 + v51) = llroundf(_S8);
          __asm { FCVT            S8, H30 }
          _S31 = 255.0;
          if (_S8 <= 255.0)
          {
            if (_S8 >= 0.0)
              __asm { FCVT            S31, H30 }
            else
              _S31 = 0.0;
          }
          *(_BYTE *)(v139 + v50) = llroundf(_S31);
          result[v139] = v130;
          v62 += 8;
          v60 += 2;
          v61 += 2;
        }
        while (v11 > v60);
      }
      v59 += v17;
      v58 += v18;
      v55 += v19;
      v53 += v20;
      ++v10;
    }
    while (v10 != v13);
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Mat_TRC_BGRA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Mat_TRC_BGRA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_422vf_TRC_Mat_TRC_BGRA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  unint64_t v55;
  _BYTE *v56;
  uint64_t v57;
  char *v58;
  unsigned int v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  BOOL v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  char v79;
  char v80;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  char v108;
  char v109;
  float v111;
  uint64_t v118;

  v6 = *(_QWORD *)(result + 28);
  v7 = *result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)(result + 20);
    v12 = v8 + *(_QWORD *)(result + 44);
    v13 = v9 - v8;
    v14 = *((_QWORD *)result + 19);
    v15 = (uint64_t *)*((_QWORD *)result + 7);
    v16 = (uint64_t *)*((_QWORD *)result + 8);
    v17 = *v16;
    v18 = v16[1];
    v19 = v16[2];
    v20 = **((_QWORD **)result + 17);
    *(float *)&v21 = (float)*(unsigned int *)(v14 + 128);
    v22 = 8191.0 / *(float *)&v21;
    LOWORD(v21) = *(_WORD *)(v14 + 140);
    v23 = (float)v21;
    LOWORD(a5) = *(_WORD *)(v14 + 142);
    v24 = (float)LODWORD(a5);
    v25 = v22 * *(float *)v14;
    v26 = v22 * *(float *)(v14 + 8);
    v27 = v22 * *(float *)(v14 + 16);
    v28 = v22 * *(float *)(v14 + 20);
    v29 = v22 * *(float *)(v14 + 28);
    v30 = *(float *)(v14 + 72);
    v31 = *(float *)(v14 + 76);
    v32 = *(float *)(v14 + 80);
    v33 = *(float *)(v14 + 84);
    v34 = *(float *)(v14 + 88);
    v35 = *(float *)(v14 + 92);
    v36 = *(float *)(v14 + 96);
    v37 = *(float *)(v14 + 100);
    v38 = *(float *)(v14 + 104);
    v39 = v14 + 164;
    v40 = v14 + 16548;
    v41 = (_QWORD *)*((_QWORD *)result + 16);
    v42 = *((_QWORD *)result + 14);
    v43 = *((_QWORD *)result + 13) * a2 / v7 + *((_QWORD *)result + 15);
    v44 = *(_QWORD *)(result + 36);
    v45 = *(unsigned __int8 *)(v14 + 161);
    result = (unsigned __int8 *)*(unsigned __int8 *)(v14 + 160);
    v46 = *(unsigned __int8 *)(v14 + 159);
    v47 = *(unsigned __int8 *)(v14 + 158);
    v48 = *v41 + v43 * v20 + 4 * v42;
    v49 = v15[2];
    if (v49)
      v50 = (char *)(v49 + v19 * v12 + v44);
    else
      v50 = 0;
    v52 = *v15;
    v51 = v15[1];
    v53 = v51 + v18 * v12 + v44;
    if (!v51)
      v53 = 0;
    v54 = (_BYTE *)(v52 + v17 * v12 + v44);
    do
    {
      if (v11)
      {
        v55 = 0;
        v56 = v54;
        v57 = v48;
        v58 = v50;
        do
        {
          LOBYTE(_S26) = *(_BYTE *)(v53 + v55 + 1);
          *(float *)&v59 = (float)LODWORD(_S26);
          v60 = *(float *)&v59 - v24;
          v61 = v26 * (float)(*(float *)&v59 - v24);
          LOBYTE(v59) = *v56;
          v62 = v25 * (float)((float)v59 - v23);
          v63 = v61 + v62;
          v64 = 8191.0;
          if ((float)(v61 + v62) <= 8191.0)
          {
            v64 = v61 + v62;
            if (v63 < 0.0)
              v64 = 0.0;
          }
          LOBYTE(v63) = *(_BYTE *)(v53 + v55);
          v65 = (float)LODWORD(v63) - v24;
          v66 = (float)(v28 * v60) + (float)(v65 * v27);
          v67 = 8191.0;
          if ((float)(v62 + v66) <= 8191.0)
          {
            v67 = v62 + v66;
            if ((float)(v62 + v66) < 0.0)
              v67 = 0.0;
          }
          v68 = v29 * v65;
          v69 = v68 + v62;
          v70 = (float)(v68 + v62) <= 8191.0;
          v71 = 8191.0;
          if (v70)
          {
            v71 = v69;
            if (v69 < 0.0)
              v71 = 0.0;
          }
          LOBYTE(v69) = v56[1];
          v72 = v25 * (float)((float)LODWORD(v69) - v23);
          v73 = v61 + v72;
          v70 = (float)(v61 + v72) <= 8191.0;
          v74 = 8191.0;
          if (v70)
          {
            v74 = v73;
            if (v73 < 0.0)
              v74 = 0.0;
          }
          v75 = v66 + v72;
          v70 = (float)(v66 + v72) <= 8191.0;
          v76 = 8191.0;
          if (v70)
          {
            v76 = v75;
            if (v75 < 0.0)
              v76 = 0.0;
          }
          v77 = v68 + v72;
          v78 = 8191.0;
          if (v77 <= 8191.0)
          {
            if (v77 < 0.0)
              v78 = 0.0;
            else
              v78 = v77;
          }
          if (v58)
          {
            v79 = *v58;
            v80 = v58[1];
            v58 += 2;
          }
          else
          {
            v79 = 0;
            v80 = 0;
          }
          _H26 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v64, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v67, 0.0), 8191.0)));
          _H28 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          __asm
          {
            FCVT            S27, H27
            FCVT            S28, H28
          }
          _H29 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          _H30 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S30, H30 }
          _H31 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          __asm { FCVT            S31, H31 }
          v97 = (float)((float)(v31 * _S27) + (float)(_S26 * v30)) + (float)(_S28 * v32);
          v98 = (float)((float)(v34 * _S27) + (float)(_S26 * v33)) + (float)(_S28 * v35);
          v99 = (float)((float)(v37 * _S27) + (float)(_S26 * v36)) + (float)(_S28 * v38);
          v100 = (float)((float)(v31 * _S30) + (float)(_S29 * v30)) + (float)(_S31 * v32);
          v101 = (float)((float)(v34 * _S30) + (float)(_S29 * v33)) + (float)(_S31 * v35);
          v102 = (float)((float)(v37 * _S30) + (float)(_S29 * v36)) + (float)(_S31 * v38);
          _H8 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v97, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v99, 0.0), 8191.0)));
          _H28 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v100, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v101, 0.0), 8191.0)));
          _S26 = fminf(fmaxf(v102, 0.0), 8191.0);
          LOWORD(_S26) = *(_WORD *)(v40 + 2 * llroundf(_S26));
          if (v58)
            v108 = v79;
          else
            v108 = -1;
          if (v58)
            v109 = v80;
          else
            v109 = -1;
          __asm { FCVT            S8, H8 }
          v111 = 255.0;
          if (_S8 <= 255.0)
          {
            v111 = _S8;
            if (_S8 < 0.0)
              v111 = 0.0;
          }
          *(_BYTE *)(v57 + v47) = llroundf(v111);
          __asm { FCVT            S8, H30 }
          _S31 = 255.0;
          if (_S8 <= 255.0)
          {
            if (_S8 >= 0.0)
              __asm { FCVT            S31, H30 }
            else
              _S31 = 0.0;
          }
          *(_BYTE *)(v57 + v46) = llroundf(_S31);
          __asm { FCVT            S31, H29 }
          _S30 = 255.0;
          if (_S31 <= 255.0)
          {
            if (_S31 >= 0.0)
              __asm { FCVT            S30, H29 }
            else
              _S30 = 0.0;
          }
          result[v57] = llroundf(_S30);
          *(_BYTE *)(v57 + v45) = v108;
          __asm { FCVT            S30, H28 }
          _S29 = 255.0;
          if (_S30 <= 255.0)
          {
            if (_S30 >= 0.0)
              __asm { FCVT            S29, H28 }
            else
              _S29 = 0.0;
          }
          v118 = v57 + 4;
          *(_BYTE *)(v57 + 4 + v47) = llroundf(_S29);
          __asm { FCVT            S29, H27 }
          _S28 = 255.0;
          if (_S29 <= 255.0)
          {
            if (_S29 >= 0.0)
              __asm { FCVT            S28, H27 }
            else
              _S28 = 0.0;
          }
          *(_BYTE *)(v118 + v46) = llroundf(_S28);
          __asm { FCVT            S28, H26 }
          _S27 = 255.0;
          if (_S28 <= 255.0)
          {
            if (_S28 >= 0.0)
              __asm { FCVT            S27, H26 }
            else
              _S27 = 0.0;
          }
          result[v118] = llroundf(_S27);
          *(_BYTE *)(v118 + v45) = v109;
          v57 += 8;
          v55 += 2;
          v56 += 2;
        }
        while (v11 > v55);
      }
      v54 += v17;
      v53 += v18;
      v50 += v19;
      v48 += v20;
      ++v10;
    }
    while (v10 != v13);
  }
  return result;
}

uint64_t vt_Copy_422vf_rgb_BGRA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_rgb_BGRA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_422vf_rgb_BGRA_GCD(unsigned __int8 *result, uint64_t a2)
{
  float v2;
  float v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  unint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  char *v46;
  char v47;
  char v48;
  unsigned int v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  char v57;
  char v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  uint64_t v70;
  float v71;

  v4 = *(_QWORD *)(result + 28);
  v5 = *result;
  v6 = v4 * a2 / v5;
  v7 = (v4 + v4 * a2) / v5;
  if (v7 != v6)
  {
    v8 = 0;
    v9 = *(_QWORD *)(result + 20);
    v10 = v6 + *(_QWORD *)(result + 44);
    v11 = v7 - v6;
    v12 = *((_QWORD *)result + 19);
    v13 = (uint64_t *)*((_QWORD *)result + 7);
    v14 = (uint64_t *)*((_QWORD *)result + 8);
    v15 = *v14;
    v16 = v14[1];
    v17 = v14[2];
    v18 = **((_QWORD **)result + 17);
    *(float *)&v19 = (float)*(unsigned int *)(v12 + 128);
    *(float *)&v20 = (float)*(unsigned int *)(v12 + 136);
    v21 = *(float *)&v20 / *(float *)&v19;
    LOWORD(v19) = *(_WORD *)(v12 + 140);
    v22 = (float)v19;
    LOWORD(v20) = *(_WORD *)(v12 + 142);
    v23 = (float)v20;
    v24 = v21 * *(float *)v12;
    v25 = v21 * *(float *)(v12 + 8);
    v26 = v21 * *(float *)(v12 + 16);
    v27 = v21 * *(float *)(v12 + 20);
    v28 = v21 * *(float *)(v12 + 28);
    v29 = (_QWORD *)*((_QWORD *)result + 16);
    v30 = *((_QWORD *)result + 14);
    v31 = *((_QWORD *)result + 13) * a2 / v5 + *((_QWORD *)result + 15);
    v32 = *(_QWORD *)(result + 36);
    v33 = *(unsigned __int8 *)(v12 + 161);
    v34 = *(unsigned __int8 *)(v12 + 160);
    v35 = *(unsigned __int8 *)(v12 + 159);
    result = (unsigned __int8 *)*(unsigned __int8 *)(v12 + 158);
    v36 = *v29 + v31 * v18 + 4 * v30;
    v37 = v13[2];
    if (v37)
      v38 = (char *)(v37 + v17 * v10 + v32);
    else
      v38 = 0;
    v40 = *v13;
    v39 = v13[1];
    v41 = v39 + v16 * v10 + v32;
    if (!v39)
      v41 = 0;
    v42 = (_BYTE *)(v40 + v15 * v10 + v32);
    do
    {
      if (v9)
      {
        v43 = 0;
        v44 = v42;
        v45 = v36;
        v46 = v38;
        do
        {
          if (v46)
          {
            v47 = *v46;
            v48 = v46[1];
            v46 += 2;
          }
          else
          {
            v47 = 0;
            v48 = 0;
          }
          LOBYTE(v2) = *(_BYTE *)(v41 + v43);
          *(float *)&v49 = (float)LODWORD(v2);
          v50 = *(float *)&v49 - v23;
          LOBYTE(v49) = *(_BYTE *)(v41 + v43 + 1);
          v51 = (float)v49 - v23;
          v52 = v25 * v51;
          v53 = (float)(v27 * v51) + (float)(v50 * v26);
          LOBYTE(v3) = *v44;
          v55 = (float)LODWORD(v3) - v22;
          v54 = v24 * v55;
          LOBYTE(v55) = v44[1];
          v56 = v52 + v54;
          if (v46)
            v57 = v47;
          else
            v57 = -1;
          if (v46)
            v58 = v48;
          else
            v58 = -1;
          if (v56 < 0.0)
            v59 = 0.0;
          else
            v59 = v52 + v54;
          if (v56 <= 255.0)
            v60 = v59;
          else
            v60 = 255.0;
          result[v45] = llroundf(v60);
          v61 = 255.0;
          if ((float)(v54 + v53) <= 255.0)
          {
            v61 = v54 + v53;
            if ((float)(v54 + v53) < 0.0)
              v61 = 0.0;
          }
          v62 = v28 * v50;
          v3 = v24 * (float)((float)LODWORD(v55) - v22);
          v63 = v62 + v54;
          v64 = v52 + v3;
          *(_BYTE *)(v45 + v35) = llroundf(v61);
          v65 = v53 + v3;
          if (v63 < 0.0)
            v66 = 0.0;
          else
            v66 = v63;
          if (v63 <= 255.0)
            v67 = v66;
          else
            v67 = 255.0;
          *(_BYTE *)(v45 + v34) = llroundf(v67);
          *(_BYTE *)(v45 + v33) = v57;
          if (v64 < 0.0)
            v68 = 0.0;
          else
            v68 = v64;
          if (v64 <= 255.0)
            v69 = v68;
          else
            v69 = 255.0;
          v70 = v45 + 4;
          result[v45 + 4] = llroundf(v69);
          v71 = 255.0;
          if (v65 <= 255.0)
          {
            v71 = v65;
            if (v65 < 0.0)
              v71 = 0.0;
          }
          *(_BYTE *)(v70 + v35) = llroundf(v71);
          v2 = 255.0;
          if ((float)(v62 + v3) <= 255.0)
          {
            v2 = v62 + v3;
            if ((float)(v62 + v3) < 0.0)
              v2 = 0.0;
          }
          *(_BYTE *)(v70 + v34) = llroundf(v2);
          *(_BYTE *)(v70 + v33) = v58;
          v45 += 8;
          v43 += 2;
          v44 += 2;
        }
        while (v9 > v43);
      }
      v42 += v15;
      v41 += v16;
      v38 += v17;
      v36 += v18;
      ++v8;
    }
    while (v8 != v11);
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Tone_Mat_TRC_l10r(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Tone_Mat_TRC_l10r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_422vf_TRC_Tone_Mat_TRC_l10r_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _BYTE *v51;
  unint64_t v52;
  _BYTE *v53;
  unsigned int *v54;
  unsigned __int8 *v55;
  float v56;
  unsigned int v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  BOOL v70;
  float v71;
  float v72;
  float v73;
  float v74;
  unsigned int v75;
  unsigned int v76;
  float v78;
  float v89;
  float v90;
  float v95;
  float v96;
  float v98;
  float v99;
  float v100;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v118;
  unsigned int v119;
  float v120;
  unsigned int v121;
  float v123;
  float v124;
  float v125;
  float v127;
  float v128;
  float v130;
  float v131;
  unsigned int v133;
  unsigned int v134;
  float v135;
  unsigned int v136;
  float v137;
  float v138;
  float v140;
  float v141;
  float v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int v146;
  float v147;
  float v148;

  v5 = *(_QWORD *)(result + 28);
  v6 = *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = v7 + *(_QWORD *)(result + 44);
    v12 = v8 - v7;
    v13 = *((_QWORD *)result + 19);
    v14 = (_QWORD *)*((_QWORD *)result + 7);
    v15 = (uint64_t *)*((_QWORD *)result + 8);
    v16 = *v15;
    v17 = v15[1];
    v18 = v15[2];
    v19 = **((_QWORD **)result + 17);
    *(float *)&v20 = (float)*(unsigned int *)(v13 + 128);
    v26 = 8191.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    v21 = (float)v20;
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    v22 = (float)LODWORD(a5);
    v23 = v26 * *(float *)v13;
    v147 = v26 * *(float *)(v13 + 16);
    v148 = v26 * *(float *)(v13 + 8);
    v24 = v26 * *(float *)(v13 + 20);
    v25 = v26 * *(float *)(v13 + 28);
    LOWORD(v26) = *(_WORD *)(v13 + 144);
    v27 = (float)LODWORD(v26);
    v28 = *(float *)(v13 + 72);
    v29 = *(float *)(v13 + 76);
    v30 = *(float *)(v13 + 80);
    v31 = *(float *)(v13 + 84);
    v32 = *(float *)(v13 + 88);
    v33 = *(float *)(v13 + 92);
    v34 = *(float *)(v13 + 96);
    v35 = *(float *)(v13 + 100);
    v36 = v13 + 164;
    v37 = v13 + 16548;
    v38 = v13 + 32932;
    v39 = *(float *)(v13 + 104);
    v40 = *(float *)(v13 + 108);
    v41 = *(float *)(v13 + 112);
    v42 = *(float *)(v13 + 116);
    v43 = *(float *)(v13 + 120);
    v44 = *(_QWORD *)(result + 36);
    result = (unsigned __int8 *)(**((_QWORD **)result + 16)
                               + (*((_QWORD *)result + 13) * a2 / v6 + *((_QWORD *)result + 15)) * v19
                               + 16 * *((_QWORD *)result + 14));
    v45 = v14[2];
    if (v45)
      v46 = (unsigned __int8 *)(v45 + v18 * v11 + v44);
    else
      v46 = 0;
    v49 = v14;
    v48 = *v14;
    v47 = v49[1];
    if (v47)
      v50 = v47 + v17 * v11 + v44;
    else
      v50 = 0;
    v51 = (_BYTE *)(v48 + v16 * v11 + v44);
    do
    {
      if (v10)
      {
        v52 = 0;
        v53 = v51;
        v54 = (unsigned int *)result;
        v55 = v46;
        do
        {
          LOBYTE(v26) = *(_BYTE *)(v50 + v52 + 1);
          v56 = (float)LODWORD(v26) - v22;
          v57 = LODWORD(v148);
          v58 = v148 * v56;
          LOBYTE(v57) = *v53;
          v59 = v23 * (float)((float)v57 - v21);
          v60 = (float)(v148 * v56) + v59;
          v61 = 8191.0;
          if (v60 <= 8191.0)
          {
            v61 = (float)(v148 * v56) + v59;
            if (v60 < 0.0)
              v61 = 0.0;
          }
          LOBYTE(v60) = *(_BYTE *)(v50 + v52);
          v62 = (float)LODWORD(v60) - v22;
          v63 = (float)(v24 * v56) + (float)(v62 * v147);
          v64 = 8191.0;
          if ((float)(v59 + v63) <= 8191.0)
          {
            v64 = v59 + v63;
            if ((float)(v59 + v63) < 0.0)
              v64 = 0.0;
          }
          v65 = v25 * v62;
          v66 = (float)(v25 * v62) + v59;
          v67 = 8191.0;
          if (v66 <= 8191.0)
          {
            v67 = v66;
            if (v66 < 0.0)
              v67 = 0.0;
          }
          LOBYTE(v66) = v53[1];
          v68 = v23 * (float)((float)LODWORD(v66) - v21);
          v69 = v58 + v68;
          v70 = (float)(v58 + v68) <= 8191.0;
          v71 = 8191.0;
          if (v70)
          {
            v71 = v69;
            if (v69 < 0.0)
              v71 = 0.0;
          }
          v72 = 8191.0;
          if ((float)(v63 + v68) <= 8191.0)
          {
            v72 = v63 + v68;
            if ((float)(v63 + v68) < 0.0)
              v72 = 0.0;
          }
          v73 = v65 + v68;
          v70 = (float)(v65 + v68) <= 8191.0;
          v74 = 8191.0;
          if (v70)
          {
            v74 = v73;
            if (v73 < 0.0)
              v74 = 0.0;
          }
          if (v55)
          {
            v75 = *v55;
            v76 = v55[1];
            v55 += 2;
          }
          else
          {
            v75 = 0;
            v76 = 0;
          }
          _S4 = fmaxf(v61, 0.0);
          v78 = 8191.0;
          LOWORD(_S4) = *(_WORD *)(v36 + 2 * llroundf(fminf(_S4, 8191.0)));
          __asm { FCVT            S13, H4 }
          LOWORD(_S4) = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v64, 0.0), 8191.0)));
          __asm { FCVT            S10, H4 }
          LOWORD(_S4) = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v67, 0.0), 8191.0)));
          __asm { FCVT            S11, H4 }
          _H8 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          _H14 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          _H15 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          v89 = (float)((float)((float)(v41 * _S10) + (float)(v40 * _S13)) + (float)(v42 * _S11))
              + (float)(v43 * fmaxf(_S13, fmaxf(_S10, _S11)));
          v90 = 8191.0;
          if (v89 <= 8191.0)
          {
            v90 = v89;
            if (v89 < 0.0)
              v90 = 0.0;
          }
          __asm
          {
            FCVT            S12, H8
            FCVT            S14, H14
            FCVT            S15, H15
          }
          _H8 = *(_WORD *)(v37 + 2 * llroundf(v90));
          v95 = fmaxf(_S12, fmaxf(_S14, _S15));
          v96 = (float)((float)((float)(v41 * _S14) + (float)(v40 * _S12)) + (float)(v42 * _S15)) + (float)(v43 * v95);
          if (v96 <= 8191.0)
          {
            v78 = (float)((float)((float)(v41 * _S14) + (float)(v40 * _S12)) + (float)(v42 * _S15)) + (float)(v43 * v95);
            if (v96 < 0.0)
              v78 = 0.0;
          }
          __asm { FCVT            S4, H8 }
          v98 = _S13 * _S4;
          v99 = _S10 * _S4;
          v100 = _S11 * _S4;
          _H9 = *(_WORD *)(v37 + 2 * llroundf(v78));
          __asm { FCVT            S9, H9 }
          v103 = _S12 * _S9;
          v104 = _S14 * _S9;
          v105 = _S15 * _S9;
          v106 = (float)((float)(v29 * v99) + (float)(v98 * v28)) + (float)(v100 * v30);
          v107 = (float)((float)(v32 * v99) + (float)(v98 * v31)) + (float)(v100 * v33);
          v108 = (float)((float)(v35 * v99) + (float)(v98 * v34)) + (float)(v100 * v39);
          v109 = (float)((float)(v29 * v104) + (float)(v103 * v28)) + (float)(v105 * v30);
          v110 = (float)((float)(v32 * v104) + (float)(v103 * v31)) + (float)(v105 * v33);
          v111 = (float)((float)(v35 * v104) + (float)(v103 * v34)) + (float)(v105 * v39);
          _H12 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v106, 0.0), 8191.0)));
          _H14 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v107, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v108, 0.0), 8191.0)));
          _H9 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v109, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v110, 0.0), 8191.0)));
          _H13 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v111, 0.0), 8191.0)));
          if (v55)
          {
            v118 = (double)v75 * 3.0 / 255.0;
            v119 = llroundf(v118);
            v120 = (double)v76 * 3.0 / 255.0;
            v121 = llroundf(v120);
          }
          else
          {
            v119 = 3;
            v121 = 3;
          }
          __asm { FCVT            S4, H11 }
          v123 = v27 + _S4;
          v124 = 1023.0;
          v125 = 1023.0;
          if (v123 <= 1023.0)
          {
            v125 = v123;
            if (v123 < 0.0)
              v125 = 0.0;
          }
          __asm { FCVT            S4, H14 }
          v127 = v27 + _S4;
          v128 = 1023.0;
          if (v127 <= 1023.0)
          {
            v128 = v127;
            if (v127 < 0.0)
              v128 = 0.0;
          }
          __asm { FCVT            S4, H12 }
          v130 = v27 + _S4;
          v131 = 1023.0;
          if (v130 <= 1023.0)
          {
            v131 = v130;
            if (v130 < 0.0)
              v131 = 0.0;
          }
          __asm { FCVT            S4, H13 }
          v133 = llroundf(v125);
          v134 = llroundf(v131);
          v135 = (float)v119;
          v136 = llroundf(v128) << 10;
          if (v135 > 3.0)
            v135 = 3.0;
          *v54 = v136 | v133 | (llroundf(v135) << 30) | (v134 << 20);
          v137 = v27 + _S4;
          v138 = 1023.0;
          if (v137 <= 1023.0)
          {
            v138 = v137;
            if (v137 < 0.0)
              v138 = 0.0;
          }
          __asm { FCVT            S4, H10 }
          v140 = v27 + _S4;
          v141 = 1023.0;
          if (v140 <= 1023.0)
          {
            v141 = v140;
            if (v140 < 0.0)
              v141 = 0.0;
          }
          __asm { FCVT            S4, H9 }
          v143 = v27 + _S4;
          if (v143 <= 1023.0)
          {
            v124 = v143;
            if (v143 < 0.0)
              v124 = 0.0;
          }
          v144 = llroundf(v138);
          v145 = llroundf(v141) << 10;
          v146 = llroundf(v124);
          v26 = (float)v121;
          if ((float)v121 > 3.0)
            v26 = 3.0;
          v54[1] = v145 | v144 | (llroundf(v26) << 30) | (v146 << 20);
          v52 += 2;
          v53 += 2;
          v54 += 2;
        }
        while (v10 > v52);
      }
      v51 += v16;
      v50 += v17;
      v46 += v18;
      result += v19;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Mat_TRC_l10r(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Mat_TRC_l10r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_422vf_TRC_Mat_TRC_l10r_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  float v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _BYTE *v50;
  unint64_t v51;
  _BYTE *v52;
  _DWORD *v53;
  unsigned __int8 *v54;
  unsigned int v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  BOOL v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  unsigned int v75;
  unsigned int v76;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v105;
  unsigned int v106;
  float v107;
  unsigned int v108;
  float v110;
  float v111;
  float v112;
  float v114;
  float v115;
  float v117;
  float v118;
  unsigned int v120;
  unsigned int v121;
  float v122;
  unsigned int v123;
  float v124;
  float v125;
  float v127;
  float v128;
  float v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;

  v6 = *(_QWORD *)(result + 28);
  v7 = *result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)(result + 20);
    v12 = v8 + *(_QWORD *)(result + 44);
    v13 = v9 - v8;
    v14 = *((_QWORD *)result + 19);
    v15 = (_QWORD *)*((_QWORD *)result + 7);
    v16 = (uint64_t *)*((_QWORD *)result + 8);
    v17 = *v16;
    v18 = v16[1];
    v19 = v16[2];
    v20 = **((_QWORD **)result + 17);
    *(float *)&v21 = (float)*(unsigned int *)(v14 + 128);
    v22 = 8191.0 / *(float *)&v21;
    LOWORD(v21) = *(_WORD *)(v14 + 140);
    v23 = (float)v21;
    LOWORD(a5) = *(_WORD *)(v14 + 142);
    v24 = (float)LODWORD(a5);
    v25 = v22 * *(float *)v14;
    v26 = v22 * *(float *)(v14 + 8);
    v27 = v22 * *(float *)(v14 + 16);
    v28 = v22 * *(float *)(v14 + 20);
    v29 = *(float *)(v14 + 28);
    v30 = v22 * v29;
    LOWORD(v29) = *(_WORD *)(v14 + 144);
    v31 = (float)LODWORD(v29);
    v32 = *(float *)(v14 + 72);
    v33 = *(float *)(v14 + 76);
    v34 = *(float *)(v14 + 80);
    v35 = *(float *)(v14 + 84);
    v36 = *(float *)(v14 + 88);
    v37 = *(float *)(v14 + 92);
    v38 = *(float *)(v14 + 96);
    v39 = *(float *)(v14 + 100);
    v40 = *(float *)(v14 + 104);
    v41 = v14 + 164;
    v42 = v14 + 16548;
    v43 = *(_QWORD *)(result + 36);
    v44 = **((_QWORD **)result + 16)
        + (*((_QWORD *)result + 13) * a2 / v7 + *((_QWORD *)result + 15)) * v20
        + 16 * *((_QWORD *)result + 14);
    v45 = v15[2];
    if (v45)
      result = (unsigned __int8 *)(v45 + v19 * v12 + v43);
    else
      result = 0;
    v48 = v15;
    v47 = *v15;
    v46 = v48[1];
    if (v46)
      v49 = v46 + v18 * v12 + v43;
    else
      v49 = 0;
    v50 = (_BYTE *)(v47 + v17 * v12 + v43);
    do
    {
      if (v11)
      {
        v51 = 0;
        v52 = v50;
        v53 = (_DWORD *)v44;
        v54 = result;
        do
        {
          LOBYTE(v5) = *(_BYTE *)(v49 + v51 + 1);
          *(float *)&v55 = (float)LODWORD(v5);
          v56 = *(float *)&v55 - v24;
          v57 = v26 * (float)(*(float *)&v55 - v24);
          LOBYTE(v55) = *v52;
          v58 = v25 * (float)((float)v55 - v23);
          v59 = v57 + v58;
          v60 = 8191.0;
          if ((float)(v57 + v58) <= 8191.0)
          {
            v60 = v57 + v58;
            if (v59 < 0.0)
              v60 = 0.0;
          }
          LOBYTE(v59) = *(_BYTE *)(v49 + v51);
          v61 = (float)LODWORD(v59) - v24;
          v62 = (float)(v28 * v56) + (float)(v61 * v27);
          v63 = 8191.0;
          if ((float)(v58 + v62) <= 8191.0)
          {
            v63 = v58 + v62;
            if ((float)(v58 + v62) < 0.0)
              v63 = 0.0;
          }
          v64 = v30 * v61;
          v65 = v64 + v58;
          v66 = (float)(v64 + v58) <= 8191.0;
          v67 = 8191.0;
          if (v66)
          {
            v67 = v65;
            if (v65 < 0.0)
              v67 = 0.0;
          }
          LOBYTE(v65) = v52[1];
          v68 = v25 * (float)((float)LODWORD(v65) - v23);
          v69 = v57 + v68;
          v66 = (float)(v57 + v68) <= 8191.0;
          v70 = 8191.0;
          if (v66)
          {
            v70 = v69;
            if (v69 < 0.0)
              v70 = 0.0;
          }
          v71 = v62 + v68;
          v66 = (float)(v62 + v68) <= 8191.0;
          v72 = 8191.0;
          if (v66)
          {
            v72 = v71;
            if (v71 < 0.0)
              v72 = 0.0;
          }
          v73 = v64 + v68;
          v74 = 8191.0;
          if (v73 <= 8191.0)
          {
            if (v73 < 0.0)
              v74 = 0.0;
            else
              v74 = v73;
          }
          if (v54)
          {
            v75 = *v54;
            v76 = v54[1];
            v54 += 2;
          }
          else
          {
            v75 = 0;
            v76 = 0;
          }
          _H29 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v60, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v63, 0.0), 8191.0)));
          __asm
          {
            FCVT            S29, H29
            FCVT            S30, H30
          }
          _H31 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v67, 0.0), 8191.0)));
          __asm { FCVT            S31, H31 }
          _H8 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          __asm { FCVT            S8, H8 }
          _H9 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm { FCVT            S9, H9 }
          _H10 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          v93 = (float)((float)(v33 * _S30) + (float)(_S29 * v32)) + (float)(_S31 * v34);
          v94 = (float)((float)(v36 * _S30) + (float)(_S29 * v35)) + (float)(_S31 * v37);
          v95 = (float)((float)(v39 * _S30) + (float)(_S29 * v38)) + (float)(_S31 * v40);
          v96 = (float)((float)(v33 * _S9) + (float)(_S8 * v32)) + (float)(_S10 * v34);
          v97 = (float)((float)(v36 * _S9) + (float)(_S8 * v35)) + (float)(_S10 * v37);
          v98 = (float)((float)(v39 * _S9) + (float)(_S8 * v38)) + (float)(_S10 * v40);
          _H8 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          _H31 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v95, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v96, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v97, 0.0), 8191.0)));
          _H9 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          if (v54)
          {
            v105 = (double)v75 * 3.0 / 255.0;
            v106 = llroundf(v105);
            v107 = (double)v76 * 3.0 / 255.0;
            v108 = llroundf(v107);
          }
          else
          {
            v106 = 3;
            v108 = 3;
          }
          __asm { FCVT            S31, H31 }
          v110 = v31 + _S31;
          v111 = 1023.0;
          v112 = 1023.0;
          if (v110 <= 1023.0)
          {
            v112 = v110;
            if (v110 < 0.0)
              v112 = 0.0;
          }
          __asm { FCVT            S10, H10 }
          v114 = v31 + _S10;
          v66 = (float)(v31 + _S10) <= 1023.0;
          v115 = 1023.0;
          if (v66)
          {
            v115 = v114;
            if (v114 < 0.0)
              v115 = 0.0;
          }
          __asm { FCVT            S8, H8 }
          v117 = v31 + _S8;
          v66 = (float)(v31 + _S8) <= 1023.0;
          v118 = 1023.0;
          if (v66)
          {
            v118 = v117;
            if (v117 < 0.0)
              v118 = 0.0;
          }
          __asm { FCVT            S9, H9 }
          v120 = llroundf(v112);
          v121 = llroundf(v118);
          v122 = (float)v106;
          v123 = llroundf(v115) << 10;
          if (v122 > 3.0)
            v122 = 3.0;
          *v53 = v123 | v120 | (llroundf(v122) << 30) | (v121 << 20);
          v124 = v31 + _S9;
          v125 = 1023.0;
          if (v124 <= 1023.0)
          {
            v125 = v124;
            if (v124 < 0.0)
              v125 = 0.0;
          }
          __asm { FCVT            S30, H30 }
          v127 = v31 + _S30;
          v66 = (float)(v31 + _S30) <= 1023.0;
          v128 = 1023.0;
          if (v66)
          {
            v128 = v127;
            if (v127 < 0.0)
              v128 = 0.0;
          }
          __asm { FCVT            S29, H29 }
          v130 = v31 + _S29;
          if (v130 <= 1023.0)
          {
            v111 = v130;
            if (v130 < 0.0)
              v111 = 0.0;
          }
          v131 = llroundf(v125);
          v132 = llroundf(v128) << 10;
          v133 = llroundf(v111);
          v5 = (float)v108;
          if ((float)v108 > 3.0)
            v5 = 3.0;
          v53[1] = v132 | v131 | (llroundf(v5) << 30) | (v133 << 20);
          v51 += 2;
          v52 += 2;
          v53 += 2;
        }
        while (v11 > v51);
      }
      v50 += v17;
      v49 += v18;
      result += v19;
      v44 += v20;
      ++v10;
    }
    while (v10 != v13);
  }
  return result;
}

uint64_t vt_Copy_422vf_rgb_l10r(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_rgb_l10r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_422vf_rgb_l10r_GCD(unsigned __int8 *result, uint64_t a2)
{
  double v2;
  unint64_t v3;
  float v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _BYTE *v43;
  _DWORD *v44;
  _BYTE *v45;
  float v46;
  unsigned int v47;
  unsigned int v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  unsigned int v62;
  unsigned int v63;
  float v64;
  float v65;
  float v66;
  unsigned int v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;

  v5 = *(_QWORD *)(result + 28);
  v6 = *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = v7 + *(_QWORD *)(result + 44);
    v12 = v8 - v7;
    v13 = *((_QWORD *)result + 19);
    v15 = (uint64_t *)*((_QWORD *)result + 7);
    v14 = (uint64_t *)*((_QWORD *)result + 8);
    v16 = *v14;
    v17 = v14[1];
    v18 = v14[2];
    v19 = **((_QWORD **)result + 17);
    *(float *)&v20 = (float)*(unsigned int *)(v13 + 128);
    *(float *)&v21 = (float)*(unsigned int *)(v13 + 136);
    v22 = *(float *)&v21 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    v23 = (float)v20;
    LOWORD(v21) = *(_WORD *)(v13 + 142);
    v24 = (float)v21;
    v25 = v22 * *(float *)v13;
    v26 = v22 * *(float *)(v13 + 8);
    v27 = v22 * *(float *)(v13 + 16);
    v28 = v22 * *(float *)(v13 + 20);
    v29 = *(float *)(v13 + 28);
    v30 = v22 * v29;
    LOWORD(v29) = *(_WORD *)(v13 + 144);
    v31 = (float)LODWORD(v29);
    v32 = *((_QWORD *)result + 14);
    v33 = (_QWORD *)*((_QWORD *)result + 16);
    v34 = *((_QWORD *)result + 13) * a2 / v6 + *((_QWORD *)result + 15);
    v35 = *(_QWORD *)(result + 36);
    v36 = *v33 + v34 * v19 + 16 * v32;
    v37 = v15[2];
    if (v37)
      v38 = (_BYTE *)(v37 + v18 * v11 + v35);
    else
      v38 = 0;
    v40 = *v15;
    v39 = v15[1];
    v41 = v39 + v17 * v11 + v35;
    if (!v39)
      v41 = 0;
    result = (unsigned __int8 *)(v40 + v16 * v11 + v35);
    do
    {
      if (v10)
      {
        v42 = 0;
        v43 = result;
        v44 = (_DWORD *)v36;
        v45 = v38;
        do
        {
          if (v45)
          {
            LOBYTE(v2) = *v45;
            LOBYTE(v3) = v45[1];
            v45 += 2;
            v46 = (double)*(unint64_t *)&v2 * 3.0 / 255.0;
            v47 = llroundf(v46);
            v2 = (double)v3 * 3.0 / 255.0;
            *(float *)&v2 = v2;
            v48 = llroundf(*(float *)&v2);
          }
          else
          {
            v47 = 3;
            v48 = 3;
          }
          LOBYTE(v2) = *(_BYTE *)(v41 + v42);
          v49 = (float)LODWORD(v2) - v24;
          v50 = v30 * v49;
          LOBYTE(v4) = *v43;
          v51 = v25 * (float)((float)LODWORD(v4) - v23);
          v52 = (float)((float)(v30 * v49) + v51) + v31;
          v53 = 1023.0;
          if (v52 <= 1023.0)
          {
            v53 = (float)((float)(v30 * v49) + v51) + v31;
            if (v52 < 0.0)
              v53 = 0.0;
          }
          LOBYTE(v52) = *(_BYTE *)(v41 + v42 + 1);
          v54 = (float)LODWORD(v52) - v24;
          v55 = (float)(v28 * v54) + (float)(v49 * v27);
          v56 = (float)(v51 + v55) + v31;
          v57 = 1023.0;
          if (v56 <= 1023.0)
          {
            v57 = (float)(v51 + v55) + v31;
            if (v56 < 0.0)
              v57 = 0.0;
          }
          v58 = v26 * v54;
          LOBYTE(v54) = v43[1];
          v59 = v25 * (float)((float)LODWORD(v54) - v23);
          v60 = v55 + v59;
          v61 = v50 + v59;
          v62 = llroundf(v53);
          v63 = llroundf(v57) << 10;
          v64 = (float)(v58 + v51) + v31;
          if (v64 < 0.0)
            v65 = 0.0;
          else
            v65 = v64;
          if (v64 <= 1023.0)
            v66 = v65;
          else
            v66 = 1023.0;
          v67 = llroundf(v66);
          v68 = (float)v47;
          if ((float)v47 > 3.0)
            v68 = 3.0;
          *v44 = v63 | v62 | (llroundf(v68) << 30) | (v67 << 20);
          v69 = v61 + v31;
          if (v69 < 0.0)
            v70 = 0.0;
          else
            v70 = v69;
          if (v69 <= 1023.0)
            v71 = v70;
          else
            v71 = 1023.0;
          v4 = 1023.0;
          if ((float)(v60 + v31) <= 1023.0)
          {
            v4 = v60 + v31;
            if ((float)(v60 + v31) < 0.0)
              v4 = 0.0;
          }
          v72 = (float)(v58 + v59) + v31;
          LODWORD(v3) = 1149222912;
          if (v72 <= 1023.0)
          {
            *(float *)&v3 = v72;
            if (v72 < 0.0)
              LODWORD(v3) = 0;
          }
          v73 = llroundf(v71);
          v74 = llroundf(v4) << 10;
          v75 = llroundf(*(float *)&v3);
          *(float *)&v2 = (float)v48;
          if ((float)v48 > 3.0)
            *(float *)&v2 = 3.0;
          v44[1] = v74 | v73 | (llroundf(*(float *)&v2) << 30) | (v75 << 20);
          v42 += 2;
          v43 += 2;
          v44 += 2;
        }
        while (v10 > v42);
      }
      result += v16;
      v41 += v17;
      v38 += v18;
      v36 += v19;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Tone_Mat_TRC_l64r(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Tone_Mat_TRC_l64r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_422vf_TRC_Tone_Mat_TRC_l64r_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _BYTE *v53;
  unint64_t v54;
  _BYTE *v55;
  _WORD *v56;
  unsigned __int8 *v57;
  unsigned int v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  BOOL v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  __int16 v78;
  __int16 v79;
  float v81;
  float v94;
  float v95;
  float v100;
  float v101;
  float v103;
  float v104;
  float v105;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  __int16 v123;
  __int16 v124;
  __int16 v125;
  float v126;
  float v127;
  float v130;
  float v133;
  float v136;
  float v139;

  v6 = *(_QWORD *)(result + 28);
  v7 = *result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)(result + 20);
    v12 = v8 + *(_QWORD *)(result + 44);
    v13 = v9 - v8;
    v14 = *((_QWORD *)result + 19);
    v15 = (_QWORD *)*((_QWORD *)result + 7);
    v16 = (uint64_t *)*((_QWORD *)result + 8);
    v17 = *v16;
    v18 = v16[1];
    v19 = v16[2];
    v20 = **((_QWORD **)result + 17);
    *(float *)&v21 = (float)*(unsigned int *)(v14 + 128);
    v22 = 8191.0 / *(float *)&v21;
    LOWORD(v21) = *(_WORD *)(v14 + 140);
    v23 = (float)v21;
    LOWORD(a5) = *(_WORD *)(v14 + 142);
    v24 = (float)LODWORD(a5);
    v25 = v22 * *(float *)v14;
    v26 = v22 * *(float *)(v14 + 8);
    v27 = v22 * *(float *)(v14 + 16);
    v28 = v22 * *(float *)(v14 + 20);
    v29 = v22 * *(float *)(v14 + 28);
    v30 = *(float *)(v14 + 72);
    v31 = *(float *)(v14 + 76);
    v32 = *(float *)(v14 + 80);
    v33 = *(float *)(v14 + 84);
    v34 = *(float *)(v14 + 88);
    v35 = *(float *)(v14 + 92);
    v36 = *(float *)(v14 + 96);
    v37 = *(float *)(v14 + 100);
    v38 = v14 + 164;
    v39 = v14 + 16548;
    v40 = v14 + 32932;
    v41 = *(float *)(v14 + 104);
    v42 = *(float *)(v14 + 108);
    v43 = *(float *)(v14 + 112);
    v44 = *(float *)(v14 + 116);
    v45 = *(float *)(v14 + 120);
    v46 = *(_QWORD *)(result + 36);
    result = (unsigned __int8 *)(**((_QWORD **)result + 16)
                               + (*((_QWORD *)result + 13) * a2 / v7 + *((_QWORD *)result + 15)) * v20
                               + 8 * *((_QWORD *)result + 14));
    v47 = v15[2];
    if (v47)
      v48 = (unsigned __int8 *)(v47 + v19 * v12 + v46);
    else
      v48 = 0;
    v51 = v15;
    v50 = *v15;
    v49 = v51[1];
    if (v49)
      v52 = v49 + v18 * v12 + v46;
    else
      v52 = 0;
    v53 = (_BYTE *)(v50 + v17 * v12 + v46);
    do
    {
      if (v11)
      {
        v54 = 0;
        v55 = v53;
        v56 = result;
        v57 = v48;
        do
        {
          LOBYTE(_S30) = *(_BYTE *)(v52 + v54 + 1);
          *(float *)&v58 = (float)LODWORD(_S30);
          v59 = *(float *)&v58 - v24;
          v60 = v26 * (float)(*(float *)&v58 - v24);
          LOBYTE(v58) = *v55;
          v61 = v25 * (float)((float)v58 - v23);
          v62 = v60 + v61;
          v63 = 8191.0;
          if ((float)(v60 + v61) <= 8191.0)
          {
            v63 = v60 + v61;
            if (v62 < 0.0)
              v63 = 0.0;
          }
          LOBYTE(v62) = *(_BYTE *)(v52 + v54);
          v64 = (float)LODWORD(v62) - v24;
          v65 = (float)(v28 * v59) + (float)(v64 * v27);
          v66 = 8191.0;
          if ((float)(v61 + v65) <= 8191.0)
          {
            v66 = v61 + v65;
            if ((float)(v61 + v65) < 0.0)
              v66 = 0.0;
          }
          v67 = v29 * v64;
          v68 = (float)(v29 * v64) + v61;
          v69 = 8191.0;
          if (v68 <= 8191.0)
          {
            v69 = v68;
            if (v68 < 0.0)
              v69 = 0.0;
          }
          LOBYTE(v68) = v55[1];
          v70 = v25 * (float)((float)LODWORD(v68) - v23);
          v71 = v60 + v70;
          v72 = (float)(v60 + v70) <= 8191.0;
          v73 = 8191.0;
          if (v72)
          {
            v73 = v71;
            if (v71 < 0.0)
              v73 = 0.0;
          }
          v74 = v65 + v70;
          v75 = 8191.0;
          if (v74 <= 8191.0)
          {
            v75 = v74;
            if (v74 < 0.0)
              v75 = 0.0;
          }
          v76 = v67 + v70;
          v72 = (float)(v67 + v70) <= 8191.0;
          v77 = 8191.0;
          if (v72)
          {
            v77 = v76;
            if (v76 < 0.0)
              v77 = 0.0;
          }
          if (v57)
          {
            v78 = *v57;
            v79 = v57[1];
            v57 += 2;
          }
          else
          {
            v78 = 0;
            v79 = 0;
          }
          _S10 = fmaxf(v63, 0.0);
          v81 = 8191.0;
          LOWORD(_S10) = *(_WORD *)(v38 + 2 * llroundf(fminf(_S10, 8191.0)));
          __asm { FCVT            S10, H10 }
          _H31 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v66, 0.0), 8191.0)));
          __asm { FCVT            S31, H31 }
          _H8 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v69, 0.0), 8191.0)));
          __asm { FCVT            S8, H8 }
          _H9 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          v94 = (float)((float)((float)(v43 * _S31) + (float)(v42 * _S10)) + (float)(v44 * _S8))
              + (float)(v45 * fmaxf(_S10, fmaxf(_S31, _S8)));
          v95 = 8191.0;
          if (v94 <= 8191.0)
          {
            v95 = v94;
            if (v94 < 0.0)
              v95 = 0.0;
          }
          __asm
          {
            FCVT            S9, H9
            FCVT            S11, H11
            FCVT            S12, H12
          }
          _H13 = *(_WORD *)(v39 + 2 * llroundf(v95));
          v100 = fmaxf(_S9, fmaxf(_S11, _S12));
          v101 = (float)((float)((float)(v43 * _S11) + (float)(v42 * _S9)) + (float)(v44 * _S12)) + (float)(v45 * v100);
          if (v101 <= 8191.0)
          {
            v81 = (float)((float)((float)(v43 * _S11) + (float)(v42 * _S9)) + (float)(v44 * _S12)) + (float)(v45 * v100);
            if (v101 < 0.0)
              v81 = 0.0;
          }
          __asm { FCVT            S13, H13 }
          v103 = _S10 * _S13;
          v104 = _S31 * _S13;
          v105 = _S8 * _S13;
          _H30 = *(_WORD *)(v39 + 2 * llroundf(v81));
          __asm { FCVT            S30, H30 }
          v108 = _S9 * _S30;
          v109 = _S11 * _S30;
          v110 = _S12 * _S30;
          v111 = (float)((float)(v31 * v104) + (float)(v103 * v30)) + (float)(v105 * v32);
          v112 = (float)((float)(v34 * v104) + (float)(v103 * v33)) + (float)(v105 * v35);
          v113 = (float)((float)(v37 * v104) + (float)(v103 * v36)) + (float)(v105 * v41);
          v114 = (float)((float)(v31 * v109) + (float)(v108 * v30)) + (float)(v110 * v32);
          v115 = (float)((float)(v34 * v109) + (float)(v108 * v33)) + (float)(v110 * v35);
          v116 = (float)((float)(v37 * v109) + (float)(v108 * v36)) + (float)(v110 * v41);
          _H13 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v111, 0.0), 8191.0)));
          __asm { FCVT            S12, H13 }
          _H11 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v112, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v113, 0.0), 8191.0)));
          _H9 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v114, 0.0), 8191.0)));
          _H8 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v115, 0.0), 8191.0)));
          _S30 = fminf(fmaxf(v116, 0.0), 8191.0);
          LOWORD(_S30) = *(_WORD *)(v40 + 2 * llroundf(_S30));
          v123 = v78 | (v78 << 8);
          if (v57)
            v124 = v123;
          else
            v124 = -1;
          v125 = v79 | (v79 << 8);
          if (!v57)
            v125 = -1;
          v126 = 65535.0;
          v127 = 65535.0;
          if (_S12 <= 65535.0)
          {
            __asm { FCVT            S13, H13 }
            v127 = _S12;
            if (_S13 < 0.0)
              v127 = 0.0;
          }
          __asm { FCVT            S13, H11 }
          *v56 = llroundf(v127);
          v130 = 65535.0;
          if (_S13 <= 65535.0)
          {
            __asm { FCVT            S11, H11 }
            v130 = _S13;
            if (_S11 < 0.0)
              v130 = 0.0;
          }
          __asm { FCVT            S13, H10 }
          v56[1] = llroundf(v130);
          v133 = 65535.0;
          if (_S13 <= 65535.0)
          {
            __asm { FCVT            S10, H10 }
            v133 = _S13;
            if (_S10 < 0.0)
              v133 = 0.0;
          }
          __asm { FCVT            S10, H9 }
          v56[2] = llroundf(v133);
          v56[3] = v124;
          v136 = 65535.0;
          if (_S10 <= 65535.0)
          {
            __asm { FCVT            S9, H9 }
            v136 = _S10;
            if (_S9 < 0.0)
              v136 = 0.0;
          }
          __asm { FCVT            S10, H8 }
          v56[4] = llroundf(v136);
          v139 = 65535.0;
          if (_S10 <= 65535.0)
          {
            __asm { FCVT            S8, H8 }
            v139 = _S10;
            if (_S8 < 0.0)
              v139 = 0.0;
          }
          __asm { FCVT            S8, H30 }
          v56[5] = llroundf(v139);
          if (_S8 <= 65535.0)
          {
            __asm { FCVT            S30, H30 }
            v126 = _S8;
            if (_S30 < 0.0)
              v126 = 0.0;
          }
          v56[6] = llroundf(v126);
          v56[7] = v125;
          v54 += 2;
          v55 += 2;
          v56 += 8;
        }
        while (v11 > v54);
      }
      v53 += v17;
      v52 += v18;
      v48 += v19;
      result += v20;
      ++v10;
    }
    while (v10 != v13);
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Mat_TRC_l64r(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Mat_TRC_l64r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_422vf_TRC_Mat_TRC_l64r_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _BYTE *v48;
  unint64_t v49;
  _BYTE *v50;
  _WORD *v51;
  unsigned __int8 *v52;
  unsigned int v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  BOOL v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  __int16 v73;
  __int16 v74;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  __int16 v103;
  __int16 v104;
  __int16 v105;
  float v106;
  float v107;
  float v110;
  float v113;
  float v116;
  float v119;

  v6 = *(_QWORD *)(result + 28);
  v7 = *result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)(result + 20);
    v12 = v8 + *(_QWORD *)(result + 44);
    v13 = v9 - v8;
    v14 = *((_QWORD *)result + 19);
    v15 = (_QWORD *)*((_QWORD *)result + 7);
    v16 = (uint64_t *)*((_QWORD *)result + 8);
    v17 = *v16;
    v18 = v16[1];
    v19 = v16[2];
    v20 = **((_QWORD **)result + 17);
    *(float *)&v21 = (float)*(unsigned int *)(v14 + 128);
    v22 = 8191.0 / *(float *)&v21;
    LOWORD(v21) = *(_WORD *)(v14 + 140);
    v23 = (float)v21;
    LOWORD(a5) = *(_WORD *)(v14 + 142);
    v24 = (float)LODWORD(a5);
    v25 = v22 * *(float *)v14;
    v26 = v22 * *(float *)(v14 + 8);
    v27 = v22 * *(float *)(v14 + 16);
    v28 = v22 * *(float *)(v14 + 20);
    v29 = v22 * *(float *)(v14 + 28);
    v30 = *(float *)(v14 + 72);
    v31 = *(float *)(v14 + 76);
    v32 = *(float *)(v14 + 80);
    v33 = *(float *)(v14 + 84);
    v34 = *(float *)(v14 + 88);
    v35 = *(float *)(v14 + 92);
    v36 = *(float *)(v14 + 96);
    v37 = *(float *)(v14 + 100);
    v38 = *(float *)(v14 + 104);
    v39 = v14 + 164;
    v40 = v14 + 16548;
    v41 = *(_QWORD *)(result + 36);
    v42 = **((_QWORD **)result + 16)
        + (*((_QWORD *)result + 13) * a2 / v7 + *((_QWORD *)result + 15)) * v20
        + 8 * *((_QWORD *)result + 14);
    v43 = v15[2];
    if (v43)
      result = (unsigned __int8 *)(v43 + v19 * v12 + v41);
    else
      result = 0;
    v46 = v15;
    v45 = *v15;
    v44 = v46[1];
    if (v44)
      v47 = v44 + v18 * v12 + v41;
    else
      v47 = 0;
    v48 = (_BYTE *)(v45 + v17 * v12 + v41);
    do
    {
      if (v11)
      {
        v49 = 0;
        v50 = v48;
        v51 = (_WORD *)v42;
        v52 = result;
        do
        {
          LOBYTE(_S26) = *(_BYTE *)(v47 + v49 + 1);
          *(float *)&v53 = (float)LODWORD(_S26);
          v54 = *(float *)&v53 - v24;
          v55 = v26 * (float)(*(float *)&v53 - v24);
          LOBYTE(v53) = *v50;
          v56 = v25 * (float)((float)v53 - v23);
          v57 = v55 + v56;
          v58 = 8191.0;
          if ((float)(v55 + v56) <= 8191.0)
          {
            v58 = v55 + v56;
            if (v57 < 0.0)
              v58 = 0.0;
          }
          LOBYTE(v57) = *(_BYTE *)(v47 + v49);
          v59 = (float)LODWORD(v57) - v24;
          v60 = (float)(v28 * v54) + (float)(v59 * v27);
          v61 = 8191.0;
          if ((float)(v56 + v60) <= 8191.0)
          {
            v61 = v56 + v60;
            if ((float)(v56 + v60) < 0.0)
              v61 = 0.0;
          }
          v62 = v29 * v59;
          v63 = v62 + v56;
          v64 = (float)(v62 + v56) <= 8191.0;
          v65 = 8191.0;
          if (v64)
          {
            v65 = v63;
            if (v63 < 0.0)
              v65 = 0.0;
          }
          LOBYTE(v63) = v50[1];
          v66 = v25 * (float)((float)LODWORD(v63) - v23);
          v67 = v55 + v66;
          v64 = (float)(v55 + v66) <= 8191.0;
          v68 = 8191.0;
          if (v64)
          {
            v68 = v67;
            if (v67 < 0.0)
              v68 = 0.0;
          }
          v69 = v60 + v66;
          v64 = (float)(v60 + v66) <= 8191.0;
          v70 = 8191.0;
          if (v64)
          {
            v70 = v69;
            if (v69 < 0.0)
              v70 = 0.0;
          }
          v71 = v62 + v66;
          v72 = 8191.0;
          if (v71 <= 8191.0)
          {
            if (v71 < 0.0)
              v72 = 0.0;
            else
              v72 = v71;
          }
          if (v52)
          {
            v73 = *v52;
            v74 = v52[1];
            v52 += 2;
          }
          else
          {
            v73 = 0;
            v74 = 0;
          }
          _H26 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v58, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v61, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          _H28 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v65, 0.0), 8191.0)));
          __asm { FCVT            S28, H28 }
          _H29 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v68, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          __asm
          {
            FCVT            S29, H29
            FCVT            S30, H30
          }
          _H31 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm { FCVT            S31, H31 }
          v91 = (float)((float)(v31 * _S27) + (float)(_S26 * v30)) + (float)(_S28 * v32);
          v92 = (float)((float)(v34 * _S27) + (float)(_S26 * v33)) + (float)(_S28 * v35);
          v93 = (float)((float)(v37 * _S27) + (float)(_S26 * v36)) + (float)(_S28 * v38);
          v94 = (float)((float)(v31 * _S30) + (float)(_S29 * v30)) + (float)(_S31 * v32);
          v95 = (float)((float)(v34 * _S30) + (float)(_S29 * v33)) + (float)(_S31 * v35);
          v96 = (float)((float)(v37 * _S30) + (float)(_S29 * v36)) + (float)(_S31 * v38);
          _H9 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          __asm { FCVT            S8, H9 }
          _H31 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          _H28 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v95, 0.0), 8191.0)));
          _S26 = fminf(fmaxf(v96, 0.0), 8191.0);
          LOWORD(_S26) = *(_WORD *)(v40 + 2 * llroundf(_S26));
          v103 = v73 | (v73 << 8);
          if (v52)
            v104 = v103;
          else
            v104 = -1;
          v105 = v74 | (v74 << 8);
          if (!v52)
            v105 = -1;
          v106 = 65535.0;
          v107 = 65535.0;
          if (_S8 <= 65535.0)
          {
            __asm { FCVT            S9, H9 }
            v107 = _S8;
            if (_S9 < 0.0)
              v107 = 0.0;
          }
          __asm { FCVT            S9, H31 }
          *v51 = llroundf(v107);
          v110 = 65535.0;
          if (_S9 <= 65535.0)
          {
            __asm { FCVT            S31, H31 }
            v110 = _S9;
            if (_S31 < 0.0)
              v110 = 0.0;
          }
          __asm { FCVT            S9, H30 }
          v51[1] = llroundf(v110);
          v113 = 65535.0;
          if (_S9 <= 65535.0)
          {
            __asm { FCVT            S30, H30 }
            v113 = _S9;
            if (_S30 < 0.0)
              v113 = 0.0;
          }
          __asm { FCVT            S30, H29 }
          v51[2] = llroundf(v113);
          v51[3] = v104;
          v116 = 65535.0;
          if (_S30 <= 65535.0)
          {
            __asm { FCVT            S29, H29 }
            v116 = _S30;
            if (_S29 < 0.0)
              v116 = 0.0;
          }
          __asm { FCVT            S30, H28 }
          v51[4] = llroundf(v116);
          v119 = 65535.0;
          if (_S30 <= 65535.0)
          {
            __asm { FCVT            S28, H28 }
            v119 = _S30;
            if (_S28 < 0.0)
              v119 = 0.0;
          }
          __asm { FCVT            S28, H26 }
          v51[5] = llroundf(v119);
          if (_S28 <= 65535.0)
          {
            __asm { FCVT            S26, H26 }
            v106 = _S28;
            if (_S26 < 0.0)
              v106 = 0.0;
          }
          v51[6] = llroundf(v106);
          v51[7] = v105;
          v49 += 2;
          v50 += 2;
          v51 += 8;
        }
        while (v11 > v49);
      }
      v48 += v17;
      v47 += v18;
      result += v19;
      v42 += v20;
      ++v10;
    }
    while (v10 != v13);
  }
  return result;
}

uint64_t vt_Copy_422vf_rgb_l64r(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_rgb_l64r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_422vf_rgb_l64r_GCD(unsigned __int8 *result, uint64_t a2)
{
  float v2;
  float v3;
  float v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _BYTE *v41;
  _WORD *v42;
  unsigned __int8 *v43;
  __int16 v44;
  __int16 v45;
  unsigned int v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  __int16 v54;
  __int16 v55;
  __int16 v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;

  v5 = *(_QWORD *)(result + 28);
  v6 = *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = v7 + *(_QWORD *)(result + 44);
    v12 = v8 - v7;
    v13 = *((_QWORD *)result + 19);
    v15 = (uint64_t *)*((_QWORD *)result + 7);
    v14 = (uint64_t *)*((_QWORD *)result + 8);
    v16 = *v14;
    v17 = v14[1];
    v18 = v14[2];
    v19 = **((_QWORD **)result + 17);
    *(float *)&v20 = (float)*(unsigned int *)(v13 + 128);
    *(float *)&v21 = (float)*(unsigned int *)(v13 + 136);
    v22 = *(float *)&v21 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    v23 = (float)v20;
    LOWORD(v21) = *(_WORD *)(v13 + 142);
    v24 = (float)v21;
    v25 = v22 * *(float *)v13;
    v26 = v22 * *(float *)(v13 + 8);
    v27 = v22 * *(float *)(v13 + 16);
    v28 = v22 * *(float *)(v13 + 20);
    v29 = v22 * *(float *)(v13 + 28);
    v30 = *((_QWORD *)result + 14);
    v31 = (_QWORD *)*((_QWORD *)result + 16);
    v32 = *((_QWORD *)result + 13) * a2 / v6 + *((_QWORD *)result + 15);
    v33 = *(_QWORD *)(result + 36);
    v34 = *v31 + v32 * v19 + 8 * v30;
    v35 = v15[2];
    if (v35)
      v36 = (unsigned __int8 *)(v35 + v18 * v11 + v33);
    else
      v36 = 0;
    v38 = *v15;
    v37 = v15[1];
    v39 = v37 + v17 * v11 + v33;
    if (!v37)
      v39 = 0;
    result = (unsigned __int8 *)(v38 + v16 * v11 + v33);
    do
    {
      if (v10)
      {
        v40 = 0;
        v41 = result;
        v42 = (_WORD *)v34;
        v43 = v36;
        do
        {
          if (v43)
          {
            v44 = *v43;
            v45 = v43[1];
            v43 += 2;
          }
          else
          {
            v44 = 0;
            v45 = 0;
          }
          LOBYTE(v2) = *(_BYTE *)(v39 + v40);
          *(float *)&v46 = (float)LODWORD(v2);
          v47 = *(float *)&v46 - v24;
          LOBYTE(v46) = *(_BYTE *)(v39 + v40 + 1);
          v48 = (float)v46 - v24;
          v49 = v26 * v48;
          v50 = (float)(v28 * v48) + (float)(v47 * v27);
          LOBYTE(v3) = *v41;
          v51 = v25 * (float)((float)LODWORD(v3) - v23);
          LOBYTE(v4) = v41[1];
          v52 = v49 + v51;
          v53 = v51 + v50;
          v54 = v44 | (v44 << 8);
          if (v43)
            v55 = v54;
          else
            v55 = -1;
          v56 = v45 | (v45 << 8);
          if (!v43)
            v56 = -1;
          if (v52 < 0.0)
            v57 = 0.0;
          else
            v57 = v49 + v51;
          if (v52 <= 65535.0)
            v58 = v57;
          else
            v58 = 65535.0;
          *v42 = llroundf(v58);
          v59 = 65535.0;
          if (v53 <= 65535.0)
          {
            v59 = v51 + v50;
            if (v53 < 0.0)
              v59 = 0.0;
          }
          v60 = v29 * v47;
          v4 = v25 * (float)((float)LODWORD(v4) - v23);
          v61 = v60 + v51;
          v62 = v49 + v4;
          v42[1] = llroundf(v59);
          if (v61 < 0.0)
            v63 = 0.0;
          else
            v63 = v61;
          if (v61 <= 65535.0)
            v64 = v63;
          else
            v64 = 65535.0;
          v65 = v50 + v4;
          v42[2] = llroundf(v64);
          v42[3] = v55;
          if (v62 < 0.0)
            v3 = 0.0;
          else
            v3 = v62;
          if (v62 <= 65535.0)
            v66 = v3;
          else
            v66 = 65535.0;
          v42[4] = llroundf(v66);
          v67 = 65535.0;
          if (v65 <= 65535.0)
          {
            v67 = v65;
            if (v65 < 0.0)
              v67 = 0.0;
          }
          v68 = v60 + v4;
          v42[5] = llroundf(v67);
          v2 = 65535.0;
          if (v68 <= 65535.0)
          {
            v2 = v68;
            if (v68 < 0.0)
              v2 = 0.0;
          }
          v42[6] = llroundf(v2);
          v42[7] = v56;
          v40 += 2;
          v41 += 2;
          v42 += 8;
        }
        while (v10 > v40);
      }
      result += v16;
      v39 += v17;
      v36 += v18;
      v34 += v19;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Tone_Mat_TRC_b64a(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Tone_Mat_TRC_b64a_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_422vf_TRC_Tone_Mat_TRC_b64a_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  float v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _BYTE *v52;
  unint64_t v53;
  _BYTE *v54;
  _WORD *v55;
  unsigned __int8 *v56;
  unsigned int v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  BOOL v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  int v77;
  int v78;
  float v80;
  float v93;
  float v94;
  float v99;
  float v100;
  float v102;
  float v103;
  float v104;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  int v123;
  unsigned int v124;
  unsigned int v125;
  float v126;
  float v129;
  float v132;
  unsigned int v134;
  float v136;
  float v139;
  float v143;

  v6 = *(_QWORD *)(result + 28);
  v7 = *result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)(result + 20);
    v12 = v8 + *(_QWORD *)(result + 44);
    v13 = v9 - v8;
    v14 = *((_QWORD *)result + 19);
    v15 = (_QWORD *)*((_QWORD *)result + 7);
    v16 = (uint64_t *)*((_QWORD *)result + 8);
    v17 = *v16;
    v18 = v16[1];
    v19 = v16[2];
    v20 = **((_QWORD **)result + 17);
    *(float *)&v21 = (float)*(unsigned int *)(v14 + 128);
    v22 = 8191.0 / *(float *)&v21;
    LOWORD(v21) = *(_WORD *)(v14 + 140);
    v23 = (float)v21;
    LOWORD(a5) = *(_WORD *)(v14 + 142);
    v24 = (float)LODWORD(a5);
    v25 = v22 * *(float *)v14;
    v143 = v22 * *(float *)(v14 + 8);
    v26 = v22 * *(float *)(v14 + 16);
    v27 = v22 * *(float *)(v14 + 20);
    v28 = v22 * *(float *)(v14 + 28);
    v29 = *(float *)(v14 + 72);
    v30 = *(float *)(v14 + 76);
    v31 = *(float *)(v14 + 80);
    v32 = *(float *)(v14 + 84);
    v33 = *(float *)(v14 + 88);
    v34 = *(float *)(v14 + 92);
    v35 = *(float *)(v14 + 96);
    v36 = *(float *)(v14 + 100);
    v37 = v14 + 164;
    v38 = v14 + 16548;
    v39 = v14 + 32932;
    v40 = *(float *)(v14 + 104);
    v41 = *(float *)(v14 + 108);
    v42 = *(float *)(v14 + 112);
    v43 = *(float *)(v14 + 116);
    v44 = *(float *)(v14 + 120);
    v45 = *(_QWORD *)(result + 36);
    result = (unsigned __int8 *)(**((_QWORD **)result + 16)
                               + (*((_QWORD *)result + 13) * a2 / v7 + *((_QWORD *)result + 15)) * v20
                               + 8 * *((_QWORD *)result + 14));
    v46 = v15[2];
    if (v46)
      v47 = (unsigned __int8 *)(v46 + v19 * v12 + v45);
    else
      v47 = 0;
    v50 = v15;
    v49 = *v15;
    v48 = v50[1];
    if (v48)
      v51 = v48 + v18 * v12 + v45;
    else
      v51 = 0;
    v52 = (_BYTE *)(v49 + v17 * v12 + v45);
    do
    {
      if (v11)
      {
        v53 = 0;
        v54 = v52;
        v55 = result;
        v56 = v47;
        do
        {
          LOBYTE(v5) = *(_BYTE *)(v51 + v53 + 1);
          *(float *)&v57 = (float)LODWORD(v5);
          v58 = *(float *)&v57 - v24;
          v59 = v143 * (float)(*(float *)&v57 - v24);
          LOBYTE(v57) = *v54;
          v60 = v25 * (float)((float)v57 - v23);
          v61 = v59 + v60;
          v62 = 8191.0;
          if ((float)(v59 + v60) <= 8191.0)
          {
            v62 = v59 + v60;
            if (v61 < 0.0)
              v62 = 0.0;
          }
          LOBYTE(v61) = *(_BYTE *)(v51 + v53);
          v63 = (float)LODWORD(v61) - v24;
          v64 = (float)(v27 * v58) + (float)(v63 * v26);
          v65 = 8191.0;
          if ((float)(v60 + v64) <= 8191.0)
          {
            v65 = v60 + v64;
            if ((float)(v60 + v64) < 0.0)
              v65 = 0.0;
          }
          v66 = v28 * v63;
          v67 = (float)(v28 * v63) + v60;
          v68 = 8191.0;
          if (v67 <= 8191.0)
          {
            v68 = v67;
            if (v67 < 0.0)
              v68 = 0.0;
          }
          LOBYTE(v67) = v54[1];
          v69 = v25 * (float)((float)LODWORD(v67) - v23);
          v70 = v59 + v69;
          v71 = (float)(v59 + v69) <= 8191.0;
          v72 = 8191.0;
          if (v71)
          {
            v72 = v70;
            if (v70 < 0.0)
              v72 = 0.0;
          }
          v73 = v64 + v69;
          v74 = 8191.0;
          if (v73 <= 8191.0)
          {
            v74 = v73;
            if (v73 < 0.0)
              v74 = 0.0;
          }
          v75 = v66 + v69;
          v71 = (float)(v66 + v69) <= 8191.0;
          v76 = 8191.0;
          if (v71)
          {
            v76 = v75;
            if (v75 < 0.0)
              v76 = 0.0;
          }
          if (v56)
          {
            v77 = *v56;
            v78 = v56[1];
            v56 += 2;
          }
          else
          {
            v77 = 0;
            v78 = 0;
          }
          _S10 = fmaxf(v62, 0.0);
          v80 = 8191.0;
          LOWORD(_S10) = *(_WORD *)(v37 + 2 * llroundf(fminf(_S10, 8191.0)));
          __asm { FCVT            S10, H10 }
          _H31 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v65, 0.0), 8191.0)));
          __asm { FCVT            S31, H31 }
          _H8 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v68, 0.0), 8191.0)));
          __asm { FCVT            S8, H8 }
          _H9 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          v93 = (float)((float)((float)(v42 * _S31) + (float)(v41 * _S10)) + (float)(v43 * _S8))
              + (float)(v44 * fmaxf(_S10, fmaxf(_S31, _S8)));
          v94 = 8191.0;
          if (v93 <= 8191.0)
          {
            v94 = v93;
            if (v93 < 0.0)
              v94 = 0.0;
          }
          __asm
          {
            FCVT            S9, H9
            FCVT            S11, H11
            FCVT            S12, H12
          }
          _H13 = *(_WORD *)(v38 + 2 * llroundf(v94));
          v99 = fmaxf(_S9, fmaxf(_S11, _S12));
          v100 = (float)((float)((float)(v42 * _S11) + (float)(v41 * _S9)) + (float)(v43 * _S12)) + (float)(v44 * v99);
          if (v100 <= 8191.0)
          {
            v80 = (float)((float)((float)(v42 * _S11) + (float)(v41 * _S9)) + (float)(v43 * _S12)) + (float)(v44 * v99);
            if (v100 < 0.0)
              v80 = 0.0;
          }
          __asm { FCVT            S13, H13 }
          v102 = _S10 * _S13;
          v103 = _S31 * _S13;
          v104 = _S8 * _S13;
          _H30 = *(_WORD *)(v38 + 2 * llroundf(v80));
          __asm { FCVT            S30, H30 }
          v107 = _S9 * _S30;
          v108 = _S11 * _S30;
          v109 = _S12 * _S30;
          v110 = (float)((float)(v30 * v103) + (float)(v102 * v29)) + (float)(v104 * v31);
          v111 = (float)((float)(v33 * v103) + (float)(v102 * v32)) + (float)(v104 * v34);
          v112 = (float)((float)(v36 * v103) + (float)(v102 * v35)) + (float)(v104 * v40);
          v113 = (float)((float)(v30 * v108) + (float)(v107 * v29)) + (float)(v109 * v31);
          v114 = (float)((float)(v33 * v108) + (float)(v107 * v32)) + (float)(v109 * v34);
          v115 = (float)((float)(v36 * v108) + (float)(v107 * v35)) + (float)(v109 * v40);
          _H14 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v110, 0.0), 8191.0)));
          __asm { FCVT            S13, H14 }
          _H11 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v111, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v112, 0.0), 8191.0)));
          _H9 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v113, 0.0), 8191.0)));
          _H8 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v114, 0.0), 8191.0)));
          _H31 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v115, 0.0), 8191.0)));
          v123 = v77 | (v77 << 8);
          if (v56)
            v124 = v123;
          else
            v124 = -1;
          v125 = v78 | (v78 << 8);
          if (!v56)
            v125 = -1;
          v5 = 65535.0;
          v126 = 65535.0;
          if (_S13 <= 65535.0)
          {
            __asm { FCVT            S4, H14 }
            v126 = _S13;
            if (_S4 < 0.0)
              v126 = 0.0;
          }
          __asm { FCVT            S14, H11 }
          v129 = 65535.0;
          if (_S14 <= 65535.0)
          {
            __asm { FCVT            S4, H11 }
            v129 = _S14;
            if (_S4 < 0.0)
              v129 = 0.0;
          }
          __asm { FCVT            S14, H10 }
          v132 = 65535.0;
          if (_S14 <= 65535.0)
          {
            __asm { FCVT            S4, H10 }
            v132 = _S14;
            if (_S4 < 0.0)
              v132 = 0.0;
          }
          v134 = llroundf(v132);
          __asm { FCVT            S11, H9 }
          *v55 = bswap32(v124) >> 16;
          v55[1] = __rev16(llroundf(v126));
          v55[2] = __rev16(llroundf(v129));
          v55[3] = __rev16(v134);
          v136 = 65535.0;
          if (_S11 <= 65535.0)
          {
            __asm { FCVT            S4, H9 }
            v136 = _S11;
            if (_S4 < 0.0)
              v136 = 0.0;
          }
          __asm { FCVT            S11, H8 }
          v139 = 65535.0;
          if (_S11 <= 65535.0)
          {
            __asm { FCVT            S4, H8 }
            v139 = _S11;
            if (_S4 < 0.0)
              v139 = 0.0;
          }
          __asm { FCVT            S8, H31 }
          if (_S8 <= 65535.0)
          {
            __asm { FCVT            S4, H31 }
            v5 = _S8;
            if (_S4 < 0.0)
              v5 = 0.0;
          }
          v55[4] = bswap32(v125) >> 16;
          v55[5] = __rev16(llroundf(v136));
          v55[6] = __rev16(llroundf(v139));
          v55[7] = __rev16(llroundf(v5));
          v53 += 2;
          v54 += 2;
          v55 += 8;
        }
        while (v11 > v53);
      }
      v52 += v17;
      v51 += v18;
      v47 += v19;
      result += v20;
      ++v10;
    }
    while (v10 != v13);
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Mat_TRC_b64a(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Mat_TRC_b64a_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_422vf_TRC_Mat_TRC_b64a_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  float v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _BYTE *v48;
  unint64_t v49;
  _BYTE *v50;
  _WORD *v51;
  unsigned __int8 *v52;
  unsigned int v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  BOOL v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  int v73;
  int v74;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  unsigned int v96;
  float v97;
  int v105;
  unsigned int v106;
  unsigned int v107;
  float v108;
  float v111;
  float v114;
  unsigned int v116;
  float v118;
  float v121;

  v6 = *(_QWORD *)(result + 28);
  v7 = *result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)(result + 20);
    v12 = v8 + *(_QWORD *)(result + 44);
    v13 = v9 - v8;
    v14 = *((_QWORD *)result + 19);
    v15 = (_QWORD *)*((_QWORD *)result + 7);
    v16 = (uint64_t *)*((_QWORD *)result + 8);
    v17 = *v16;
    v18 = v16[1];
    v19 = v16[2];
    v20 = **((_QWORD **)result + 17);
    *(float *)&v21 = (float)*(unsigned int *)(v14 + 128);
    v22 = 8191.0 / *(float *)&v21;
    LOWORD(v21) = *(_WORD *)(v14 + 140);
    v23 = (float)v21;
    LOWORD(a5) = *(_WORD *)(v14 + 142);
    v24 = (float)LODWORD(a5);
    v25 = v22 * *(float *)v14;
    v26 = v22 * *(float *)(v14 + 8);
    v27 = v22 * *(float *)(v14 + 16);
    v28 = v22 * *(float *)(v14 + 20);
    v29 = v22 * *(float *)(v14 + 28);
    v30 = *(float *)(v14 + 72);
    v31 = *(float *)(v14 + 76);
    v32 = *(float *)(v14 + 80);
    v33 = *(float *)(v14 + 84);
    v34 = *(float *)(v14 + 88);
    v35 = *(float *)(v14 + 92);
    v36 = *(float *)(v14 + 96);
    v37 = *(float *)(v14 + 100);
    v38 = *(float *)(v14 + 104);
    v39 = v14 + 164;
    v40 = v14 + 16548;
    v41 = *(_QWORD *)(result + 36);
    v42 = **((_QWORD **)result + 16)
        + (*((_QWORD *)result + 13) * a2 / v7 + *((_QWORD *)result + 15)) * v20
        + 8 * *((_QWORD *)result + 14);
    v43 = v15[2];
    if (v43)
      result = (unsigned __int8 *)(v43 + v19 * v12 + v41);
    else
      result = 0;
    v46 = v15;
    v45 = *v15;
    v44 = v46[1];
    if (v44)
      v47 = v44 + v18 * v12 + v41;
    else
      v47 = 0;
    v48 = (_BYTE *)(v45 + v17 * v12 + v41);
    do
    {
      if (v11)
      {
        v49 = 0;
        v50 = v48;
        v51 = (_WORD *)v42;
        v52 = result;
        do
        {
          LOBYTE(v5) = *(_BYTE *)(v47 + v49 + 1);
          *(float *)&v53 = (float)LODWORD(v5);
          v54 = *(float *)&v53 - v24;
          v55 = v26 * (float)(*(float *)&v53 - v24);
          LOBYTE(v53) = *v50;
          v56 = v25 * (float)((float)v53 - v23);
          v57 = v55 + v56;
          v58 = 8191.0;
          if ((float)(v55 + v56) <= 8191.0)
          {
            v58 = v55 + v56;
            if (v57 < 0.0)
              v58 = 0.0;
          }
          LOBYTE(v57) = *(_BYTE *)(v47 + v49);
          v59 = (float)LODWORD(v57) - v24;
          v60 = (float)(v28 * v54) + (float)(v59 * v27);
          v61 = 8191.0;
          if ((float)(v56 + v60) <= 8191.0)
          {
            v61 = v56 + v60;
            if ((float)(v56 + v60) < 0.0)
              v61 = 0.0;
          }
          v62 = v29 * v59;
          v63 = v62 + v56;
          v64 = (float)(v62 + v56) <= 8191.0;
          v65 = 8191.0;
          if (v64)
          {
            v65 = v63;
            if (v63 < 0.0)
              v65 = 0.0;
          }
          LOBYTE(v63) = v50[1];
          v66 = v25 * (float)((float)LODWORD(v63) - v23);
          v67 = v55 + v66;
          v64 = (float)(v55 + v66) <= 8191.0;
          v68 = 8191.0;
          if (v64)
          {
            v68 = v67;
            if (v67 < 0.0)
              v68 = 0.0;
          }
          v69 = v60 + v66;
          v64 = (float)(v60 + v66) <= 8191.0;
          v70 = 8191.0;
          if (v64)
          {
            v70 = v69;
            if (v69 < 0.0)
              v70 = 0.0;
          }
          v71 = v62 + v66;
          v72 = 8191.0;
          if (v71 <= 8191.0)
          {
            if (v71 < 0.0)
              v72 = 0.0;
            else
              v72 = v71;
          }
          if (v52)
          {
            v73 = *v52;
            v74 = v52[1];
            v52 += 2;
          }
          else
          {
            v73 = 0;
            v74 = 0;
          }
          _H26 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v58, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v61, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          _H28 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v65, 0.0), 8191.0)));
          __asm { FCVT            S28, H28 }
          _H29 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v68, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          __asm
          {
            FCVT            S29, H29
            FCVT            S30, H30
          }
          _H31 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm { FCVT            S31, H31 }
          v91 = (float)((float)(v31 * _S27) + (float)(_S26 * v30)) + (float)(_S28 * v32);
          v92 = (float)((float)(v34 * _S27) + (float)(_S26 * v33)) + (float)(_S28 * v35);
          v93 = (float)((float)(v37 * _S27) + (float)(_S26 * v36)) + (float)(_S28 * v38);
          v94 = (float)((float)(v31 * _S30) + (float)(_S29 * v30)) + (float)(_S31 * v32);
          v95 = (float)((float)(v34 * _S30) + (float)(_S29 * v33)) + (float)(_S31 * v35);
          v96 = llroundf(fminf(fmaxf(v91, 0.0), 8191.0));
          v97 = (float)((float)(v37 * _S30) + (float)(_S29 * v36)) + (float)(_S31 * v38);
          _H10 = *(_WORD *)(v40 + 2 * v96);
          __asm { FCVT            S9, H10 }
          _H31 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          _H28 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v95, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v97, 0.0), 8191.0)));
          v105 = v73 | (v73 << 8);
          if (v52)
            v106 = v105;
          else
            v106 = -1;
          v107 = v74 | (v74 << 8);
          if (!v52)
            v107 = -1;
          v5 = 65535.0;
          v108 = 65535.0;
          if (_S9 <= 65535.0)
          {
            __asm { FCVT            S8, H10 }
            _NF = _S8 < 0.0;
            v108 = _S9;
            if (_NF)
              v108 = 0.0;
          }
          __asm { FCVT            S10, H31 }
          v111 = 65535.0;
          if (_S10 <= 65535.0)
          {
            __asm { FCVT            S31, H31 }
            v111 = _S10;
            if (_S31 < 0.0)
              v111 = 0.0;
          }
          __asm { FCVT            S10, H30 }
          v114 = 65535.0;
          if (_S10 <= 65535.0)
          {
            __asm { FCVT            S30, H30 }
            v114 = _S10;
            if (_S30 < 0.0)
              v114 = 0.0;
          }
          v116 = llroundf(v114);
          __asm { FCVT            S31, H29 }
          *v51 = bswap32(v106) >> 16;
          v51[1] = __rev16(llroundf(v108));
          v51[2] = __rev16(llroundf(v111));
          v51[3] = __rev16(v116);
          v118 = 65535.0;
          if (_S31 <= 65535.0)
          {
            __asm { FCVT            S29, H29 }
            v118 = _S31;
            if (_S29 < 0.0)
              v118 = 0.0;
          }
          __asm { FCVT            S31, H28 }
          v121 = 65535.0;
          if (_S31 <= 65535.0)
          {
            __asm { FCVT            S28, H28 }
            v121 = _S31;
            if (_S28 < 0.0)
              v121 = 0.0;
          }
          __asm { FCVT            S28, H27 }
          if (_S28 <= 65535.0)
          {
            __asm { FCVT            S26, H27 }
            _NF = _S26 < 0.0;
            v5 = _S28;
            if (_NF)
              v5 = 0.0;
          }
          v51[4] = bswap32(v107) >> 16;
          v51[5] = __rev16(llroundf(v118));
          v51[6] = __rev16(llroundf(v121));
          v51[7] = __rev16(llroundf(v5));
          v49 += 2;
          v50 += 2;
          v51 += 8;
        }
        while (v11 > v49);
      }
      v48 += v17;
      v47 += v18;
      result += v19;
      v42 += v20;
      ++v10;
    }
    while (v10 != v13);
  }
  return result;
}

uint64_t vt_Copy_422vf_rgb_b64a(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_rgb_b64a_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_422vf_rgb_b64a_GCD(unsigned __int8 *result, uint64_t a2)
{
  float v2;
  float v3;
  float v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _BYTE *v41;
  _WORD *v42;
  unsigned __int8 *v43;
  int v44;
  int v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  unsigned int v63;
  float v64;
  unsigned int v65;
  float v66;
  float v67;

  v5 = *(_QWORD *)(result + 28);
  v6 = *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = v7 + *(_QWORD *)(result + 44);
    v12 = v8 - v7;
    v13 = *((_QWORD *)result + 19);
    v15 = (uint64_t *)*((_QWORD *)result + 7);
    v14 = (uint64_t *)*((_QWORD *)result + 8);
    v16 = *v14;
    v17 = v14[1];
    v18 = v14[2];
    v19 = **((_QWORD **)result + 17);
    *(float *)&v20 = (float)*(unsigned int *)(v13 + 128);
    *(float *)&v21 = (float)*(unsigned int *)(v13 + 136);
    v22 = *(float *)&v21 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    v23 = (float)v20;
    LOWORD(v21) = *(_WORD *)(v13 + 142);
    v24 = (float)v21;
    v25 = v22 * *(float *)v13;
    v26 = v22 * *(float *)(v13 + 8);
    v27 = v22 * *(float *)(v13 + 16);
    v28 = v22 * *(float *)(v13 + 20);
    v29 = v22 * *(float *)(v13 + 28);
    v30 = *((_QWORD *)result + 14);
    v31 = (_QWORD *)*((_QWORD *)result + 16);
    v32 = *((_QWORD *)result + 13) * a2 / v6 + *((_QWORD *)result + 15);
    v33 = *(_QWORD *)(result + 36);
    v34 = *v31 + v32 * v19 + 8 * v30;
    v35 = v15[2];
    if (v35)
      v36 = (unsigned __int8 *)(v35 + v18 * v11 + v33);
    else
      v36 = 0;
    v38 = *v15;
    v37 = v15[1];
    v39 = v37 + v17 * v11 + v33;
    if (!v37)
      v39 = 0;
    result = (unsigned __int8 *)(v38 + v16 * v11 + v33);
    do
    {
      if (v10)
      {
        v40 = 0;
        v41 = result;
        v42 = (_WORD *)v34;
        v43 = v36;
        do
        {
          if (v43)
          {
            v44 = *v43;
            v45 = v43[1];
            v43 += 2;
          }
          else
          {
            v44 = 0;
            v45 = 0;
          }
          LOBYTE(v2) = *(_BYTE *)(v39 + v40);
          v46 = (float)LODWORD(v2) - v24;
          LOBYTE(v3) = *(_BYTE *)(v39 + v40 + 1);
          v47 = (float)LODWORD(v3) - v24;
          v48 = v26 * v47;
          v49 = (float)(v28 * v47) + (float)(v46 * v27);
          LOBYTE(v4) = *v41;
          v50 = v25 * (float)((float)LODWORD(v4) - v23);
          v51 = v48 + v50;
          v52 = v50 + v49;
          v53 = v44 | (v44 << 8);
          if (v43)
            v54 = v53;
          else
            v54 = -1;
          v55 = v45 | (v45 << 8);
          if (!v43)
            v55 = -1;
          if (v51 < 0.0)
            v56 = 0.0;
          else
            v56 = v48 + v50;
          if (v51 <= 65535.0)
            v57 = v56;
          else
            v57 = 65535.0;
          v58 = 65535.0;
          if (v52 <= 65535.0)
          {
            v58 = v50 + v49;
            if (v52 < 0.0)
              v58 = 0.0;
          }
          v59 = v29 * v46;
          LOBYTE(v52) = v41[1];
          v60 = v25 * (float)((float)LODWORD(v52) - v23);
          v61 = v59 + v50;
          v62 = v48 + v60;
          v63 = llroundf(v57);
          v64 = v49 + v60;
          v65 = llroundf(v58);
          if (v61 < 0.0)
            v66 = 0.0;
          else
            v66 = v61;
          if (v61 > 65535.0)
            v66 = 65535.0;
          *v42 = bswap32(v54) >> 16;
          v42[1] = __rev16(v63);
          v42[2] = __rev16(v65);
          v42[3] = __rev16(llroundf(v66));
          if (v62 < 0.0)
            v3 = 0.0;
          else
            v3 = v62;
          if (v62 > 65535.0)
            v3 = 65535.0;
          v67 = 65535.0;
          if (v64 <= 65535.0)
          {
            v67 = v64;
            if (v64 < 0.0)
              v67 = 0.0;
          }
          v4 = v59 + v60;
          v2 = 65535.0;
          if (v4 <= 65535.0)
          {
            v2 = v4;
            if (v4 < 0.0)
              v2 = 0.0;
          }
          v42[4] = bswap32(v55) >> 16;
          v42[5] = __rev16(llroundf(v3));
          v42[6] = __rev16(llroundf(v67));
          v42[7] = __rev16(llroundf(v2));
          v40 += 2;
          v41 += 2;
          v42 += 8;
        }
        while (v10 > v40);
      }
      result += v16;
      v39 += v17;
      v36 += v18;
      v34 += v19;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Tone_Mat_TRC_RGhA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Tone_Mat_TRC_RGhA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_422vf_TRC_Tone_Mat_TRC_RGhA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _BYTE *v53;
  unint64_t v54;
  _BYTE *v55;
  _WORD *v56;
  unsigned __int8 *v57;
  unsigned int v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  BOOL v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  unsigned int v78;
  unsigned int v79;
  float v81;
  float v94;
  float v95;
  float v100;
  float v101;
  float v103;
  float v104;
  float v105;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  __int16 v117;
  __int16 v118;
  __int16 v119;
  float v122;
  float v123;

  v6 = *(_QWORD *)(result + 28);
  v7 = *result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)(result + 20);
    v12 = v8 + *(_QWORD *)(result + 44);
    v13 = v9 - v8;
    v14 = *((_QWORD *)result + 19);
    v15 = (_QWORD *)*((_QWORD *)result + 7);
    v16 = (uint64_t *)*((_QWORD *)result + 8);
    v17 = *v16;
    v18 = v16[1];
    v19 = v16[2];
    v20 = **((_QWORD **)result + 17);
    *(float *)&v21 = (float)*(unsigned int *)(v14 + 128);
    v22 = 8191.0 / *(float *)&v21;
    LOWORD(v21) = *(_WORD *)(v14 + 140);
    v23 = (float)v21;
    LOWORD(a5) = *(_WORD *)(v14 + 142);
    v24 = (float)LODWORD(a5);
    v25 = v22 * *(float *)v14;
    v26 = v22 * *(float *)(v14 + 8);
    v27 = v22 * *(float *)(v14 + 16);
    v28 = v22 * *(float *)(v14 + 20);
    v29 = v22 * *(float *)(v14 + 28);
    v30 = *(float *)(v14 + 72);
    v31 = *(float *)(v14 + 76);
    v32 = *(float *)(v14 + 80);
    v33 = *(float *)(v14 + 84);
    v34 = *(float *)(v14 + 88);
    v35 = *(float *)(v14 + 92);
    v36 = *(float *)(v14 + 96);
    v37 = *(float *)(v14 + 100);
    v38 = v14 + 164;
    v39 = v14 + 16548;
    v40 = v14 + 32932;
    v41 = *(float *)(v14 + 104);
    v42 = *(float *)(v14 + 108);
    v43 = *(float *)(v14 + 112);
    v44 = *(float *)(v14 + 116);
    v45 = *(float *)(v14 + 120);
    v46 = *(_QWORD *)(result + 36);
    result = (unsigned __int8 *)(**((_QWORD **)result + 16)
                               + (*((_QWORD *)result + 13) * a2 / v7 + *((_QWORD *)result + 15)) * v20
                               + 8 * *((_QWORD *)result + 14));
    v47 = v15[2];
    if (v47)
      v48 = (unsigned __int8 *)(v47 + v19 * v12 + v46);
    else
      v48 = 0;
    v51 = v15;
    v50 = *v15;
    v49 = v51[1];
    if (v49)
      v52 = v49 + v18 * v12 + v46;
    else
      v52 = 0;
    v53 = (_BYTE *)(v50 + v17 * v12 + v46);
    do
    {
      if (v11)
      {
        v54 = 0;
        v55 = v53;
        v56 = result;
        v57 = v48;
        do
        {
          LOBYTE(v5) = *(_BYTE *)(v52 + v54 + 1);
          *(float *)&v58 = (float)v5;
          v59 = *(float *)&v58 - v24;
          v60 = v26 * (float)(*(float *)&v58 - v24);
          LOBYTE(v58) = *v55;
          v61 = v25 * (float)((float)v58 - v23);
          v62 = v60 + v61;
          v63 = 8191.0;
          if ((float)(v60 + v61) <= 8191.0)
          {
            v63 = v60 + v61;
            if (v62 < 0.0)
              v63 = 0.0;
          }
          LOBYTE(v62) = *(_BYTE *)(v52 + v54);
          v64 = (float)LODWORD(v62) - v24;
          v65 = (float)(v28 * v59) + (float)(v64 * v27);
          v66 = 8191.0;
          if ((float)(v61 + v65) <= 8191.0)
          {
            v66 = v61 + v65;
            if ((float)(v61 + v65) < 0.0)
              v66 = 0.0;
          }
          v67 = v29 * v64;
          v68 = (float)(v29 * v64) + v61;
          v69 = 8191.0;
          if (v68 <= 8191.0)
          {
            v69 = v68;
            if (v68 < 0.0)
              v69 = 0.0;
          }
          LOBYTE(v68) = v55[1];
          v70 = v25 * (float)((float)LODWORD(v68) - v23);
          v71 = v60 + v70;
          v72 = (float)(v60 + v70) <= 8191.0;
          v73 = 8191.0;
          if (v72)
          {
            v73 = v71;
            if (v71 < 0.0)
              v73 = 0.0;
          }
          v74 = v65 + v70;
          v75 = 8191.0;
          if (v74 <= 8191.0)
          {
            v75 = v74;
            if (v74 < 0.0)
              v75 = 0.0;
          }
          v76 = v67 + v70;
          v72 = (float)(v67 + v70) <= 8191.0;
          v77 = 8191.0;
          if (v72)
          {
            v77 = v76;
            if (v76 < 0.0)
              v77 = 0.0;
          }
          if (v57)
          {
            v78 = *v57;
            v79 = v57[1];
            v57 += 2;
          }
          else
          {
            v78 = 0;
            v79 = 0;
          }
          _S10 = fmaxf(v63, 0.0);
          v81 = 8191.0;
          LOWORD(_S10) = *(_WORD *)(v38 + 2 * llroundf(fminf(_S10, 8191.0)));
          __asm { FCVT            S10, H10 }
          _H31 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v66, 0.0), 8191.0)));
          __asm { FCVT            S31, H31 }
          _H8 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v69, 0.0), 8191.0)));
          __asm { FCVT            S8, H8 }
          _H9 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          v94 = (float)((float)((float)(v43 * _S31) + (float)(v42 * _S10)) + (float)(v44 * _S8))
              + (float)(v45 * fmaxf(_S10, fmaxf(_S31, _S8)));
          v95 = 8191.0;
          if (v94 <= 8191.0)
          {
            v95 = v94;
            if (v94 < 0.0)
              v95 = 0.0;
          }
          __asm
          {
            FCVT            S9, H9
            FCVT            S11, H11
            FCVT            S12, H12
          }
          _H13 = *(_WORD *)(v39 + 2 * llroundf(v95));
          v100 = fmaxf(_S9, fmaxf(_S11, _S12));
          v101 = (float)((float)((float)(v43 * _S11) + (float)(v42 * _S9)) + (float)(v44 * _S12)) + (float)(v45 * v100);
          if (v101 <= 8191.0)
          {
            v81 = (float)((float)((float)(v43 * _S11) + (float)(v42 * _S9)) + (float)(v44 * _S12)) + (float)(v45 * v100);
            if (v101 < 0.0)
              v81 = 0.0;
          }
          __asm { FCVT            S13, H13 }
          v103 = _S10 * _S13;
          v104 = _S31 * _S13;
          v105 = _S8 * _S13;
          _H30 = *(_WORD *)(v39 + 2 * llroundf(v81));
          __asm { FCVT            S30, H30 }
          v108 = _S9 * _S30;
          v109 = _S11 * _S30;
          v110 = _S12 * _S30;
          v111 = (float)((float)(v31 * v104) + (float)(v103 * v30)) + (float)(v105 * v32);
          v112 = (float)((float)(v34 * v104) + (float)(v103 * v33)) + (float)(v105 * v35);
          v113 = (float)((float)(v37 * v104) + (float)(v103 * v36)) + (float)(v105 * v41);
          v114 = (float)((float)(v31 * v109) + (float)(v108 * v30)) + (float)(v110 * v32);
          v115 = (float)((float)(v34 * v109) + (float)(v108 * v33)) + (float)(v110 * v35);
          v116 = (float)((float)(v37 * v109) + (float)(v108 * v36)) + (float)(v110 * v41);
          LOWORD(v108) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v111, 0.0), 8191.0)));
          LOWORD(v109) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v112, 0.0), 8191.0)));
          v122 = fminf(fmaxf(v113, 0.0), 8191.0);
          LOWORD(v122) = *(_WORD *)(v40 + 2 * llroundf(v122));
          v117 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v114, 0.0), 8191.0)));
          v118 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v115, 0.0), 8191.0)));
          v119 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v116, 0.0), 8191.0)));
          _S12 = (float)v78 * 0.0039216;
          __asm { FCVT            H12, S12 }
          _S13 = (float)v79 * 0.0039216;
          __asm { FCVT            H13, S13 }
          *v56 = LOWORD(v108);
          v56[1] = LOWORD(v109);
          v56[2] = LOWORD(v122);
          LOWORD(v122) = 15360;
          if (v57)
            v123 = _S12;
          else
            v123 = v122;
          v56[3] = LOWORD(v123);
          v56[4] = v117;
          v56[5] = v118;
          v56[6] = v119;
          if (v57)
            *(float *)&v5 = _S13;
          else
            *(float *)&v5 = v122;
          v56[7] = v5;
          v54 += 2;
          v55 += 2;
          v56 += 8;
        }
        while (v11 > v54);
      }
      v53 += v17;
      v52 += v18;
      v48 += v19;
      result += v20;
      ++v10;
    }
    while (v10 != v13);
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Mat_TRC_RGhA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Mat_TRC_RGhA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_422vf_TRC_Mat_TRC_RGhA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  float v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _BYTE *v48;
  unint64_t v49;
  _BYTE *v50;
  _WORD *v51;
  unsigned __int8 *v52;
  unsigned int v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  BOOL v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  unsigned int v73;
  unsigned int v74;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  __int16 v97;
  __int16 v98;
  __int16 v99;
  float v102;

  v6 = *(_QWORD *)(result + 28);
  v7 = *result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)(result + 20);
    v12 = v8 + *(_QWORD *)(result + 44);
    v13 = v9 - v8;
    v14 = *((_QWORD *)result + 19);
    v15 = (_QWORD *)*((_QWORD *)result + 7);
    v16 = (uint64_t *)*((_QWORD *)result + 8);
    v17 = *v16;
    v18 = v16[1];
    v19 = v16[2];
    v20 = **((_QWORD **)result + 17);
    *(float *)&v21 = (float)*(unsigned int *)(v14 + 128);
    v22 = 8191.0 / *(float *)&v21;
    LOWORD(v21) = *(_WORD *)(v14 + 140);
    v23 = (float)v21;
    LOWORD(a5) = *(_WORD *)(v14 + 142);
    v24 = (float)LODWORD(a5);
    v25 = v22 * *(float *)v14;
    v26 = v22 * *(float *)(v14 + 8);
    v27 = v22 * *(float *)(v14 + 16);
    v28 = v22 * *(float *)(v14 + 20);
    v29 = v22 * *(float *)(v14 + 28);
    v30 = *(float *)(v14 + 72);
    v31 = *(float *)(v14 + 76);
    v32 = *(float *)(v14 + 80);
    v33 = *(float *)(v14 + 84);
    v34 = *(float *)(v14 + 88);
    v35 = *(float *)(v14 + 92);
    v36 = *(float *)(v14 + 96);
    v37 = *(float *)(v14 + 100);
    v38 = *(float *)(v14 + 104);
    v39 = v14 + 164;
    v40 = v14 + 16548;
    v41 = *(_QWORD *)(result + 36);
    v42 = **((_QWORD **)result + 16)
        + (*((_QWORD *)result + 13) * a2 / v7 + *((_QWORD *)result + 15)) * v20
        + 8 * *((_QWORD *)result + 14);
    v43 = v15[2];
    if (v43)
      result = (unsigned __int8 *)(v43 + v19 * v12 + v41);
    else
      result = 0;
    v46 = v15;
    v45 = *v15;
    v44 = v46[1];
    if (v44)
      v47 = v44 + v18 * v12 + v41;
    else
      v47 = 0;
    v48 = (_BYTE *)(v45 + v17 * v12 + v41);
    do
    {
      if (v11)
      {
        v49 = 0;
        v50 = v48;
        v51 = (_WORD *)v42;
        v52 = result;
        do
        {
          LOBYTE(v5) = *(_BYTE *)(v47 + v49 + 1);
          *(float *)&v53 = (float)LODWORD(v5);
          v54 = *(float *)&v53 - v24;
          v55 = v26 * (float)(*(float *)&v53 - v24);
          LOBYTE(v53) = *v50;
          v56 = v25 * (float)((float)v53 - v23);
          v57 = v55 + v56;
          v58 = 8191.0;
          if ((float)(v55 + v56) <= 8191.0)
          {
            v58 = v55 + v56;
            if (v57 < 0.0)
              v58 = 0.0;
          }
          LOBYTE(v57) = *(_BYTE *)(v47 + v49);
          v59 = (float)LODWORD(v57) - v24;
          v60 = (float)(v28 * v54) + (float)(v59 * v27);
          v61 = 8191.0;
          if ((float)(v56 + v60) <= 8191.0)
          {
            v61 = v56 + v60;
            if ((float)(v56 + v60) < 0.0)
              v61 = 0.0;
          }
          v62 = v29 * v59;
          v63 = v62 + v56;
          v64 = (float)(v62 + v56) <= 8191.0;
          v65 = 8191.0;
          if (v64)
          {
            v65 = v63;
            if (v63 < 0.0)
              v65 = 0.0;
          }
          LOBYTE(v63) = v50[1];
          v66 = v25 * (float)((float)LODWORD(v63) - v23);
          v67 = v55 + v66;
          v64 = (float)(v55 + v66) <= 8191.0;
          v68 = 8191.0;
          if (v64)
          {
            v68 = v67;
            if (v67 < 0.0)
              v68 = 0.0;
          }
          v69 = v60 + v66;
          v64 = (float)(v60 + v66) <= 8191.0;
          v70 = 8191.0;
          if (v64)
          {
            v70 = v69;
            if (v69 < 0.0)
              v70 = 0.0;
          }
          v71 = v62 + v66;
          v72 = 8191.0;
          if (v71 <= 8191.0)
          {
            v72 = v71;
            if (v71 < 0.0)
              v72 = 0.0;
          }
          if (v52)
          {
            v73 = *v52;
            v74 = v52[1];
            v52 += 2;
          }
          else
          {
            v73 = 0;
            v74 = 0;
          }
          _H26 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v58, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v61, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          _H28 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v65, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v68, 0.0), 8191.0)));
          __asm
          {
            FCVT            S28, H28
            FCVT            S29, H29
          }
          _H30 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          __asm { FCVT            S30, H30 }
          _H31 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm { FCVT            S31, H31 }
          v91 = (float)((float)(v31 * _S27) + (float)(_S26 * v30)) + (float)(_S28 * v32);
          v92 = (float)((float)(v34 * _S27) + (float)(_S26 * v33)) + (float)(_S28 * v35);
          v93 = (float)((float)(v37 * _S27) + (float)(_S26 * v36)) + (float)(_S28 * v38);
          v94 = (float)((float)(v31 * _S30) + (float)(_S29 * v30)) + (float)(_S31 * v32);
          v95 = (float)((float)(v34 * _S30) + (float)(_S29 * v33)) + (float)(_S31 * v35);
          v96 = (float)((float)(v37 * _S30) + (float)(_S29 * v36)) + (float)(_S31 * v38);
          LOWORD(_S30) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          LOWORD(_S31) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          v5 = fminf(fmaxf(v93, 0.0), 8191.0);
          LOWORD(v5) = *(_WORD *)(v40 + 2 * llroundf(v5));
          v97 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          v98 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v95, 0.0), 8191.0)));
          v99 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v96, 0.0), 8191.0)));
          _S8 = (float)v73 * 0.0039216;
          __asm { FCVT            H8, S8 }
          _S9 = (float)v74 * 0.0039216;
          __asm { FCVT            H9, S9 }
          *v51 = LOWORD(_S30);
          v51[1] = LOWORD(_S31);
          v51[2] = LOWORD(v5);
          LOWORD(v5) = 15360;
          if (v52)
            v102 = _S8;
          else
            v102 = v5;
          v51[3] = LOWORD(v102);
          v51[4] = v97;
          v51[5] = v98;
          v51[6] = v99;
          if (v52)
            v5 = _S9;
          v51[7] = LOWORD(v5);
          v49 += 2;
          v50 += 2;
          v51 += 8;
        }
        while (v11 > v49);
      }
      v48 += v17;
      v47 += v18;
      result += v19;
      v42 += v20;
      ++v10;
    }
    while (v10 != v13);
  }
  return result;
}

uint64_t vt_Copy_422vf_rgb_RGhA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_rgb_RGhA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_422vf_rgb_RGhA_GCD(unsigned __int8 *result, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _BYTE *v43;
  _WORD *v44;
  unsigned __int8 *v45;
  unsigned int v46;
  unsigned int v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;

  v7 = *(_QWORD *)(result + 28);
  v8 = *result;
  v9 = v7 * a2 / v8;
  v10 = (v7 + v7 * a2) / v8;
  if (v10 != v9)
  {
    v11 = 0;
    v12 = *(_QWORD *)(result + 20);
    v13 = v9 + *(_QWORD *)(result + 44);
    v14 = v10 - v9;
    v15 = *((_QWORD *)result + 19);
    v17 = (uint64_t *)*((_QWORD *)result + 7);
    v16 = (uint64_t *)*((_QWORD *)result + 8);
    v18 = *v16;
    v19 = v16[1];
    v20 = v16[2];
    v21 = **((_QWORD **)result + 17);
    *(float *)&v22 = (float)*(unsigned int *)(v15 + 128);
    v23 = 1.0;
    v24 = 1.0 / *(float *)&v22;
    LOWORD(v22) = *(_WORD *)(v15 + 140);
    v25 = (float)v22;
    LOWORD(v23) = *(_WORD *)(v15 + 142);
    v26 = (float)v23;
    v27 = v24 * *(float *)v15;
    v28 = v24 * *(float *)(v15 + 8);
    v29 = v24 * *(float *)(v15 + 16);
    v30 = v24 * *(float *)(v15 + 20);
    v31 = v24 * *(float *)(v15 + 28);
    v32 = *((_QWORD *)result + 14);
    v33 = (_QWORD *)*((_QWORD *)result + 16);
    v34 = *((_QWORD *)result + 13) * a2 / v8 + *((_QWORD *)result + 15);
    v35 = *(_QWORD *)(result + 36);
    v36 = *v33 + v34 * v21 + 8 * v32;
    v37 = v17[2];
    if (v37)
      v38 = (unsigned __int8 *)(v37 + v20 * v13 + v35);
    else
      v38 = 0;
    v40 = *v17;
    v39 = v17[1];
    v41 = v39 + v19 * v13 + v35;
    if (!v39)
      v41 = 0;
    result = (unsigned __int8 *)(v40 + v18 * v13 + v35);
    LOWORD(v2) = 15360;
    do
    {
      if (v12)
      {
        v42 = 0;
        v43 = result;
        v44 = (_WORD *)v36;
        v45 = v38;
        do
        {
          if (v45)
          {
            v46 = *v45;
            v47 = v45[1];
            v45 += 2;
          }
          else
          {
            v46 = 0;
            v47 = 0;
          }
          LOBYTE(v3) = *(_BYTE *)(v41 + v42);
          v48 = (float)v3 - v26;
          LOBYTE(_S18) = *(_BYTE *)(v41 + v42 + 1);
          v49 = (float)LODWORD(_S18) - v26;
          v50 = v28 * v49;
          v51 = (float)(v30 * v49) + (float)(v48 * v29);
          v52 = v31 * v48;
          LOBYTE(v5) = *v43;
          v53 = v27 * (float)((float)v5 - v25);
          LOBYTE(_S21) = v43[1];
          v54 = v27 * (float)((float)LODWORD(_S21) - v25);
          _S22 = v50 + v53;
          _S23 = v53 + v51;
          _S20 = v52 + v53;
          _S19 = v50 + v54;
          _S18 = v51 + v54;
          _S17 = v52 + v54;
          _S21 = (float)v46 * 0.0039216;
          __asm { FCVT            H21, S21 }
          _S24 = (float)v47 * 0.0039216;
          __asm
          {
            FCVT            H24, S24
            FCVT            H22, S22
          }
          *v44 = LOWORD(_S22);
          __asm { FCVT            H22, S23 }
          v44[1] = LOWORD(_S22);
          __asm { FCVT            H20, S20 }
          v44[2] = LOWORD(_S20);
          if (v45)
            *(float *)&v5 = _S21;
          else
            v5 = v2;
          v44[3] = v5;
          __asm { FCVT            H19, S19 }
          v44[4] = _H19;
          __asm { FCVT            H18, S18 }
          v44[5] = LOWORD(_S18);
          __asm { FCVT            H17, S17 }
          v44[6] = _H17;
          if (_ZF)
            v3 = v2;
          else
            *(float *)&v3 = _S24;
          v44[7] = v3;
          v42 += 2;
          v43 += 2;
          v44 += 8;
        }
        while (v12 > v42);
      }
      result += v18;
      v41 += v19;
      v38 += v20;
      v36 += v21;
      ++v11;
    }
    while (v11 != v14);
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Tone_Mat_TRC_RGfA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Tone_Mat_TRC_RGfA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_422vf_TRC_Tone_Mat_TRC_RGfA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _BYTE *v52;
  unint64_t v53;
  _BYTE *v54;
  unsigned __int8 *v55;
  unsigned __int8 *v56;
  unsigned int v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  BOOL v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  unsigned int v77;
  unsigned int v78;
  float v80;
  float v93;
  float v94;
  float v99;
  float v100;
  float v102;
  float v103;
  float v104;
  float v109;
  float v110;
  float v111;
  float v121;
  float v122;
  float v123;

  v6 = *(_QWORD *)(result + 28);
  v7 = *result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)(result + 20);
    v12 = v8 + *(_QWORD *)(result + 44);
    v13 = v9 - v8;
    v14 = *((_QWORD *)result + 19);
    v15 = (_QWORD *)*((_QWORD *)result + 7);
    v16 = (uint64_t *)*((_QWORD *)result + 8);
    v17 = *v16;
    v18 = v16[1];
    v19 = v16[2];
    v20 = **((_QWORD **)result + 17);
    *(float *)&v21 = (float)*(unsigned int *)(v14 + 128);
    v22 = 8191.0 / *(float *)&v21;
    LOWORD(v21) = *(_WORD *)(v14 + 140);
    v23 = (float)v21;
    LOWORD(a5) = *(_WORD *)(v14 + 142);
    v24 = (float)LODWORD(a5);
    v25 = v22 * *(float *)v14;
    v123 = v22 * *(float *)(v14 + 8);
    v26 = v22 * *(float *)(v14 + 16);
    v27 = v22 * *(float *)(v14 + 20);
    v28 = v22 * *(float *)(v14 + 28);
    v29 = *(float *)(v14 + 72);
    v30 = *(float *)(v14 + 76);
    v31 = *(float *)(v14 + 80);
    v32 = *(float *)(v14 + 84);
    v33 = *(float *)(v14 + 88);
    v34 = *(float *)(v14 + 92);
    v35 = *(float *)(v14 + 96);
    v36 = *(float *)(v14 + 100);
    v37 = v14 + 164;
    v38 = v14 + 16548;
    v39 = v14 + 32932;
    v40 = *(float *)(v14 + 104);
    v41 = *(float *)(v14 + 108);
    v42 = *(float *)(v14 + 112);
    v43 = *(float *)(v14 + 116);
    v44 = *(float *)(v14 + 120);
    v45 = *(_QWORD *)(result + 36);
    result = (unsigned __int8 *)(**((_QWORD **)result + 16)
                               + (*((_QWORD *)result + 13) * a2 / v7 + *((_QWORD *)result + 15)) * v20
                               + 16 * *((_QWORD *)result + 14));
    v46 = v15[2];
    if (v46)
      v47 = (unsigned __int8 *)(v46 + v19 * v12 + v45);
    else
      v47 = 0;
    v50 = v15;
    v49 = *v15;
    v48 = v50[1];
    if (v48)
      v51 = v48 + v18 * v12 + v45;
    else
      v51 = 0;
    v52 = (_BYTE *)(v49 + v17 * v12 + v45);
    do
    {
      if (v11)
      {
        v53 = 0;
        v54 = v52;
        v55 = result;
        v56 = v47;
        do
        {
          LOBYTE(_S31) = *(_BYTE *)(v51 + v53 + 1);
          *(float *)&v57 = (float)_S31;
          v58 = *(float *)&v57 - v24;
          v59 = v123 * (float)(*(float *)&v57 - v24);
          LOBYTE(v57) = *v54;
          v60 = v25 * (float)((float)v57 - v23);
          v61 = v59 + v60;
          v62 = 8191.0;
          if ((float)(v59 + v60) <= 8191.0)
          {
            v62 = v59 + v60;
            if (v61 < 0.0)
              v62 = 0.0;
          }
          LOBYTE(v61) = *(_BYTE *)(v51 + v53);
          v63 = (float)LODWORD(v61) - v24;
          v64 = (float)(v27 * v58) + (float)(v63 * v26);
          v65 = 8191.0;
          if ((float)(v60 + v64) <= 8191.0)
          {
            v65 = v60 + v64;
            if ((float)(v60 + v64) < 0.0)
              v65 = 0.0;
          }
          v66 = v28 * v63;
          v67 = (float)(v28 * v63) + v60;
          v68 = 8191.0;
          if (v67 <= 8191.0)
          {
            v68 = v67;
            if (v67 < 0.0)
              v68 = 0.0;
          }
          LOBYTE(v67) = v54[1];
          v69 = v25 * (float)((float)LODWORD(v67) - v23);
          v70 = v59 + v69;
          v71 = (float)(v59 + v69) <= 8191.0;
          v72 = 8191.0;
          if (v71)
          {
            v72 = v70;
            if (v70 < 0.0)
              v72 = 0.0;
          }
          v73 = v64 + v69;
          v74 = 8191.0;
          if (v73 <= 8191.0)
          {
            v74 = v73;
            if (v73 < 0.0)
              v74 = 0.0;
          }
          v75 = v66 + v69;
          v71 = (float)(v66 + v69) <= 8191.0;
          v76 = 8191.0;
          if (v71)
          {
            v76 = v75;
            if (v75 < 0.0)
              v76 = 0.0;
          }
          if (v56)
          {
            v77 = *v56;
            v78 = v56[1];
            v56 += 2;
          }
          else
          {
            v77 = 0;
            v78 = 0;
          }
          _S11 = fmaxf(v62, 0.0);
          v80 = 8191.0;
          LOWORD(_S11) = *(_WORD *)(v37 + 2 * llroundf(fminf(_S11, 8191.0)));
          __asm { FCVT            S11, H11 }
          _H8 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v65, 0.0), 8191.0)));
          __asm { FCVT            S8, H8 }
          _H9 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v68, 0.0), 8191.0)));
          __asm { FCVT            S9, H9 }
          _H10 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          _H13 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          v93 = (float)((float)((float)(v42 * _S8) + (float)(v41 * _S11)) + (float)(v43 * _S9))
              + (float)(v44 * fmaxf(_S11, fmaxf(_S8, _S9)));
          v94 = 8191.0;
          if (v93 <= 8191.0)
          {
            v94 = v93;
            if (v93 < 0.0)
              v94 = 0.0;
          }
          __asm
          {
            FCVT            S10, H10
            FCVT            S12, H12
            FCVT            S13, H13
          }
          _H14 = *(_WORD *)(v38 + 2 * llroundf(v94));
          v99 = fmaxf(_S10, fmaxf(_S12, _S13));
          v100 = (float)((float)((float)(v42 * _S12) + (float)(v41 * _S10)) + (float)(v43 * _S13)) + (float)(v44 * v99);
          if (v100 <= 8191.0)
          {
            v80 = (float)((float)((float)(v42 * _S12) + (float)(v41 * _S10)) + (float)(v43 * _S13)) + (float)(v44 * v99);
            if (v100 < 0.0)
              v80 = 0.0;
          }
          __asm { FCVT            S4, H14 }
          v102 = _S11 * _S4;
          v103 = _S8 * _S4;
          v104 = _S9 * _S4;
          _H31 = *(_WORD *)(v38 + 2 * llroundf(v80));
          __asm { FCVT            S31, H31 }
          _S9 = _S10 * _S31;
          _S10 = _S12 * _S31;
          v109 = _S13 * _S31;
          v110 = (float)((float)(v30 * v103) + (float)(v102 * v29)) + (float)(v104 * v31);
          v111 = (float)((float)(v33 * v103) + (float)(v102 * v32)) + (float)(v104 * v34);
          _S4 = (float)((float)(v36 * v103) + (float)(v102 * v35)) + (float)(v104 * v40);
          _S8 = (float)((float)(v30 * _S10) + (float)(_S9 * v29)) + (float)(v109 * v31);
          _S11 = (float)((float)(v33 * _S10) + (float)(_S9 * v32)) + (float)(v109 * v34);
          _S31 = (float)((float)(v36 * _S10) + (float)(_S9 * v35)) + (float)(v109 * v40);
          LOWORD(_S9) = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v110, 0.0), 8191.0)));
          __asm { FCVT            S9, H9 }
          LOWORD(_S10) = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v111, 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          LOWORD(_S4) = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(_S4, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          LOWORD(_S8) = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(_S8, 0.0), 8191.0)));
          __asm { FCVT            S8, H8 }
          LOWORD(_S11) = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(_S11, 0.0), 8191.0)));
          LOWORD(_S31) = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(_S31, 0.0), 8191.0)));
          __asm
          {
            FCVT            S11, H11
            FCVT            S31, H31
          }
          v121 = (float)v77 * 0.0039216;
          if (!v56)
            v121 = 1.0;
          *(_DWORD *)v55 = _S9;
          *((_DWORD *)v55 + 1) = _S10;
          *((_DWORD *)v55 + 2) = _S4;
          *((float *)v55 + 3) = v121;
          if (v56)
            v122 = (float)v78 * 0.0039216;
          else
            v122 = 1.0;
          *((_DWORD *)v55 + 4) = _S8;
          *((_DWORD *)v55 + 5) = _S11;
          *((_DWORD *)v55 + 6) = _S31;
          *((float *)v55 + 7) = v122;
          v53 += 2;
          v54 += 2;
          v55 += 32;
        }
        while (v11 > v53);
      }
      v52 += v17;
      v51 += v18;
      v47 += v19;
      result += v20;
      ++v10;
    }
    while (v10 != v13);
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Mat_TRC_RGfA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Mat_TRC_RGfA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_422vf_TRC_Mat_TRC_RGfA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  float v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _BYTE *v48;
  unint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  unsigned __int8 *v52;
  unsigned int v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  BOOL v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  unsigned int v73;
  unsigned int v74;
  float v91;
  float v92;
  float v103;

  v6 = *(_QWORD *)(result + 28);
  v7 = *result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)(result + 20);
    v12 = v8 + *(_QWORD *)(result + 44);
    v13 = v9 - v8;
    v14 = *((_QWORD *)result + 19);
    v15 = (_QWORD *)*((_QWORD *)result + 7);
    v16 = (uint64_t *)*((_QWORD *)result + 8);
    v17 = *v16;
    v18 = v16[1];
    v19 = v16[2];
    v20 = **((_QWORD **)result + 17);
    *(float *)&v21 = (float)*(unsigned int *)(v14 + 128);
    v22 = 8191.0 / *(float *)&v21;
    LOWORD(v21) = *(_WORD *)(v14 + 140);
    v23 = (float)v21;
    LOWORD(a5) = *(_WORD *)(v14 + 142);
    v24 = (float)LODWORD(a5);
    v25 = v22 * *(float *)v14;
    v26 = v22 * *(float *)(v14 + 8);
    v27 = v22 * *(float *)(v14 + 16);
    v28 = v22 * *(float *)(v14 + 20);
    v29 = v22 * *(float *)(v14 + 28);
    v30 = *(float *)(v14 + 72);
    v31 = *(float *)(v14 + 76);
    v32 = *(float *)(v14 + 80);
    v33 = *(float *)(v14 + 84);
    v34 = *(float *)(v14 + 88);
    v35 = *(float *)(v14 + 92);
    v36 = *(float *)(v14 + 96);
    v37 = *(float *)(v14 + 100);
    v38 = *(float *)(v14 + 104);
    v39 = v14 + 164;
    v40 = v14 + 16548;
    v41 = *(_QWORD *)(result + 36);
    v42 = **((_QWORD **)result + 16)
        + (*((_QWORD *)result + 13) * a2 / v7 + *((_QWORD *)result + 15)) * v20
        + 16 * *((_QWORD *)result + 14);
    v43 = v15[2];
    if (v43)
      result = (unsigned __int8 *)(v43 + v19 * v12 + v41);
    else
      result = 0;
    v46 = v15;
    v45 = *v15;
    v44 = v46[1];
    if (v44)
      v47 = v44 + v18 * v12 + v41;
    else
      v47 = 0;
    v48 = (_BYTE *)(v45 + v17 * v12 + v41);
    do
    {
      if (v11)
      {
        v49 = 0;
        v50 = v48;
        v51 = v42;
        v52 = result;
        do
        {
          LOBYTE(v5) = *(_BYTE *)(v47 + v49 + 1);
          *(float *)&v53 = (float)LODWORD(v5);
          v54 = *(float *)&v53 - v24;
          v55 = v26 * (float)(*(float *)&v53 - v24);
          LOBYTE(v53) = *v50;
          v56 = v25 * (float)((float)v53 - v23);
          v57 = v55 + v56;
          v58 = 8191.0;
          if ((float)(v55 + v56) <= 8191.0)
          {
            v58 = v55 + v56;
            if (v57 < 0.0)
              v58 = 0.0;
          }
          LOBYTE(v57) = *(_BYTE *)(v47 + v49);
          v59 = (float)LODWORD(v57) - v24;
          v60 = (float)(v28 * v54) + (float)(v59 * v27);
          v61 = 8191.0;
          if ((float)(v56 + v60) <= 8191.0)
          {
            v61 = v56 + v60;
            if ((float)(v56 + v60) < 0.0)
              v61 = 0.0;
          }
          v62 = v29 * v59;
          v63 = v62 + v56;
          v64 = (float)(v62 + v56) <= 8191.0;
          v65 = 8191.0;
          if (v64)
          {
            v65 = v63;
            if (v63 < 0.0)
              v65 = 0.0;
          }
          LOBYTE(v63) = v50[1];
          v66 = v25 * (float)((float)LODWORD(v63) - v23);
          v67 = v55 + v66;
          v64 = (float)(v55 + v66) <= 8191.0;
          v68 = 8191.0;
          if (v64)
          {
            v68 = v67;
            if (v67 < 0.0)
              v68 = 0.0;
          }
          v69 = v60 + v66;
          v64 = (float)(v60 + v66) <= 8191.0;
          v70 = 8191.0;
          if (v64)
          {
            v70 = v69;
            if (v69 < 0.0)
              v70 = 0.0;
          }
          v71 = v62 + v66;
          v72 = 8191.0;
          if (v71 <= 8191.0)
          {
            v72 = v71;
            if (v71 < 0.0)
              v72 = 0.0;
          }
          if (v52)
          {
            v73 = *v52;
            v74 = v52[1];
            v52 += 2;
          }
          else
          {
            v73 = 0;
            v74 = 0;
          }
          _H27 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v58, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          _H28 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v61, 0.0), 8191.0)));
          __asm { FCVT            S28, H28 }
          _H29 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v65, 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          _H30 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v68, 0.0), 8191.0)));
          __asm { FCVT            S30, H30 }
          _H31 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          _H8 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm
          {
            FCVT            S31, H31
            FCVT            S8, H8
          }
          v91 = (float)((float)(v31 * _S28) + (float)(_S27 * v30)) + (float)(_S29 * v32);
          v92 = (float)((float)(v34 * _S28) + (float)(_S27 * v33)) + (float)(_S29 * v35);
          _S27 = (float)((float)(v37 * _S28) + (float)(_S27 * v36)) + (float)(_S29 * v38);
          _S28 = (float)((float)(v31 * _S31) + (float)(_S30 * v30)) + (float)(_S8 * v32);
          _S29 = (float)((float)(v34 * _S31) + (float)(_S30 * v33)) + (float)(_S8 * v35);
          _S30 = (float)((float)(v37 * _S31) + (float)(_S30 * v36)) + (float)(_S8 * v38);
          LOWORD(_S31) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          __asm { FCVT            S31, H31 }
          LOWORD(_S8) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          __asm { FCVT            S8, H8 }
          LOWORD(_S27) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(_S27, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          LOWORD(_S28) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(_S28, 0.0), 8191.0)));
          __asm { FCVT            S28, H28 }
          LOWORD(_S29) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(_S29, 0.0), 8191.0)));
          LOWORD(_S30) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(_S30, 0.0), 8191.0)));
          __asm
          {
            FCVT            S29, H29
            FCVT            S30, H30
          }
          v103 = (float)v73 * 0.0039216;
          if (!v52)
            v103 = 1.0;
          *(_DWORD *)v51 = _S31;
          *(_DWORD *)(v51 + 4) = _S8;
          *(_DWORD *)(v51 + 8) = _S27;
          *(float *)(v51 + 12) = v103;
          if (v52)
            v5 = (float)v74 * 0.0039216;
          else
            v5 = 1.0;
          *(_DWORD *)(v51 + 16) = _S28;
          *(_DWORD *)(v51 + 20) = _S29;
          *(_DWORD *)(v51 + 24) = _S30;
          *(float *)(v51 + 28) = v5;
          v49 += 2;
          v50 += 2;
          v51 += 32;
        }
        while (v11 > v49);
      }
      v48 += v17;
      v47 += v18;
      result += v19;
      v42 += v20;
      ++v10;
    }
    while (v10 != v13);
  }
  return result;
}

uint64_t vt_Copy_422vf_rgb_RGfA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_rgb_RGfA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_422vf_rgb_RGfA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  float v5;
  float v6;
  float v7;
  float v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _BYTE *v44;
  float *v45;
  unsigned __int8 *v46;
  unsigned int v47;
  unsigned int v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;

  v9 = *(_QWORD *)(result + 28);
  v10 = *result;
  v11 = v9 * a2 / v10;
  v12 = (v9 + v9 * a2) / v10;
  if (v12 != v11)
  {
    v13 = 0;
    v14 = *(_QWORD *)(result + 20);
    v15 = v11 + *(_QWORD *)(result + 44);
    v16 = v12 - v11;
    v17 = *((_QWORD *)result + 19);
    v19 = (uint64_t *)*((_QWORD *)result + 7);
    v18 = (uint64_t *)*((_QWORD *)result + 8);
    v20 = *v18;
    v21 = v18[1];
    v22 = v18[2];
    v23 = **((_QWORD **)result + 17);
    *(float *)&v24 = (float)*(unsigned int *)(v17 + 128);
    v25 = 1.0 / *(float *)&v24;
    LOWORD(v24) = *(_WORD *)(v17 + 140);
    v26 = (float)v24;
    LOWORD(a5) = *(_WORD *)(v17 + 142);
    v27 = (float)LODWORD(a5);
    v28 = v25 * *(float *)v17;
    v29 = v25 * *(float *)(v17 + 8);
    v30 = v25 * *(float *)(v17 + 16);
    v31 = v25 * *(float *)(v17 + 20);
    v32 = v25 * *(float *)(v17 + 28);
    v33 = *((_QWORD *)result + 14);
    v34 = (_QWORD *)*((_QWORD *)result + 16);
    v35 = *((_QWORD *)result + 13) * a2 / v10 + *((_QWORD *)result + 15);
    v36 = *(_QWORD *)(result + 36);
    v37 = *v34 + v35 * v23 + 16 * v33;
    v38 = v19[2];
    if (v38)
      v39 = (unsigned __int8 *)(v38 + v22 * v15 + v36);
    else
      v39 = 0;
    v41 = *v19;
    v40 = v19[1];
    v42 = v40 + v21 * v15 + v36;
    if (!v40)
      v42 = 0;
    result = (unsigned __int8 *)(v41 + v20 * v15 + v36);
    do
    {
      if (v14)
      {
        v43 = 0;
        v44 = result;
        v45 = (float *)v37;
        v46 = v39;
        do
        {
          if (v46)
          {
            v47 = *v46;
            v48 = v46[1];
            v46 += 2;
          }
          else
          {
            v47 = 0;
            v48 = 0;
          }
          LOBYTE(v5) = *(_BYTE *)(v42 + v43);
          v49 = (float)LODWORD(v5) - v27;
          LOBYTE(v6) = *(_BYTE *)(v42 + v43 + 1);
          v50 = (float)LODWORD(v6) - v27;
          v51 = v29 * v50;
          v52 = (float)(v31 * v50) + (float)(v49 * v30);
          v53 = v32 * v49;
          LOBYTE(v7) = *v44;
          v54 = v28 * (float)((float)LODWORD(v7) - v26);
          LOBYTE(v8) = v44[1];
          v55 = v28 * (float)((float)LODWORD(v8) - v26);
          v56 = v51 + v54;
          v57 = v54 + v52;
          v58 = v53 + v54;
          v59 = v51 + v55;
          v6 = v52 + v55;
          v5 = v53 + v55;
          v8 = (float)v47 * 0.0039216;
          if (!v46)
            v8 = 1.0;
          *v45 = v56;
          v45[1] = v57;
          v45[2] = v58;
          v45[3] = v8;
          if (v46)
            v7 = (float)v48 * 0.0039216;
          else
            v7 = 1.0;
          v45[4] = v59;
          v45[5] = v6;
          v45[6] = v5;
          v45[7] = v7;
          v43 += 2;
          v44 += 2;
          v45 += 8;
        }
        while (v14 > v43);
      }
      result += v20;
      v42 += v21;
      v39 += v22;
      v37 += v23;
      ++v13;
    }
    while (v13 != v16);
  }
  return result;
}

uint64_t VTCMSessionIsSupported()
{
  if (VTCMSessionIsSupported_onceToken != -1)
    dispatch_once_f(&VTCMSessionIsSupported_onceToken, &VTCMSessionIsSupported_cmSessionIsSupported, (dispatch_function_t)vt_checkCMSessionIsSupported);
  return VTCMSessionIsSupported_cmSessionIsSupported;
}

_BYTE *vt_checkCMSessionIsSupported(_BYTE *result)
{
  BOOL v1;
  BOOL v3;

  if (MEMORY[0x1E0D483C0])
    v1 = MEMORY[0x1E0D483B0] == 0;
  else
    v1 = 1;
  v3 = v1 || MEMORY[0x1E0D48358] == 0 || MEMORY[0x1E0D48330] == 0;
  if (!v3
    && *MEMORY[0x1E0D48EA8]
    && *MEMORY[0x1E0D492C8]
    && *MEMORY[0x1E0D49360]
    && *MEMORY[0x1E0D493D8]
    && *MEMORY[0x1E0D49500]
    && *MEMORY[0x1E0D495D0]
    && *MEMORY[0x1E0D495E0])
  {
    if (*MEMORY[0x1E0D486D0])
      *result = 1;
  }
  return result;
}

uint64_t CMSessionAddResource(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  if (a4)
    *a4 = 0;
  return 0;
}

uint64_t CMSessionRemoveResource()
{
  return 0;
}

uint64_t vt_Copy_BGRA_TRC_Tone_Mat_TRC_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Tone_Mat_TRC_420vf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_TRC_Tone_Mat_TRC_420vf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  unsigned int v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  float v34;
  float v35;
  uint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  unsigned __int8 *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 *v50;
  _BYTE *v51;
  uint64_t v52;
  unsigned __int8 *v53;
  unint64_t v54;
  unsigned __int8 *v55;
  _BYTE *v56;
  unsigned __int8 *v57;
  float v59;
  float v69;
  float v70;
  float v71;
  float v78;
  float v79;
  float v80;
  unsigned int v81;
  float v84;
  float v89;
  float v90;
  unsigned int v94;
  float v100;
  float v101;
  float v102;
  float v105;
  float v106;
  float v107;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  unsigned __int8 v115;
  unsigned __int8 v116;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v131;
  float v132;
  unsigned __int8 v152;
  unsigned __int8 v153;
  float v154;
  float v155;
  BOOL v156;
  float v157;
  char v158;
  float v159;
  float v160;
  char v161;
  float v162;
  float v163;
  char v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float v182;
  float v183;
  float v184;
  float v185;
  float v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float v198;

  v7 = *(_QWORD *)(result + 28);
  v8 = 2 * *result;
  v9 = v7 * a2 / v8;
  v10 = (v7 + v7 * a2) / v8;
  if (2 * v10 != 2 * v9)
  {
    v11 = 0;
    v12 = *(_QWORD *)(result + 20);
    v13 = *(_QWORD *)(result + 44) + 2 * v9;
    v174 = 2 * v10 - 2 * v9;
    v14 = *((_QWORD *)result + 19);
    v15 = (uint64_t *)*((_QWORD *)result + 17);
    v16 = **((_QWORD **)result + 8);
    v17 = *v15;
    v18 = v15[1];
    v19 = v15[2];
    v20 = 8191.0 / (float)*(unsigned int *)(v14 + 128);
    LOWORD(a5) = *(_WORD *)(v14 + 144);
    v21 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v14 + 146);
    v22 = (float)LODWORD(a6);
    LOWORD(a6) = *(_WORD *)(v14 + 148);
    v23 = (float)LODWORD(a6);
    LOWORD(a6) = *(_WORD *)(v14 + 150);
    *(float *)&v24 = (float)LODWORD(a6);
    v198 = *(float *)&v24;
    LOWORD(v24) = *(_WORD *)(v14 + 152);
    v25 = (float)v24;
    v194 = *(float *)(v14 + 40);
    v195 = *(float *)(v14 + 36);
    v192 = *(float *)(v14 + 48) * 0.25;
    v193 = *(float *)(v14 + 44);
    v190 = *(float *)(v14 + 56) * 0.25;
    v191 = *(float *)(v14 + 52) * 0.25;
    v188 = *(float *)(v14 + 64) * 0.25;
    v189 = *(float *)(v14 + 60) * 0.25;
    v26 = *(float *)(v14 + 72);
    v186 = *(float *)(v14 + 68) * 0.25;
    v187 = v26;
    v184 = *(float *)(v14 + 80);
    v185 = *(float *)(v14 + 76);
    v182 = *(float *)(v14 + 88);
    v183 = *(float *)(v14 + 84);
    v180 = *(float *)(v14 + 96);
    v181 = *(float *)(v14 + 92);
    v27 = *(float *)(v14 + 100);
    v28 = *(float *)(v14 + 104);
    v29 = *(float *)(v14 + 108);
    v178 = v28;
    v179 = v27;
    v30 = v14 + 164;
    v31 = v14 + 16548;
    v32 = v14 + 32932;
    v33 = *(float *)(v14 + 112);
    v34 = *(float *)(v14 + 116);
    v35 = *(float *)(v14 + 120);
    v36 = *((_QWORD *)result + 14);
    v37 = *((_QWORD *)result + 13) * a2;
    v38 = (_QWORD *)*((_QWORD *)result + 16);
    v39 = *((_QWORD *)result + 15) + 2 * (v37 / v8);
    result = (unsigned __int8 *)(**((_QWORD **)result + 7) + v16 * v13 + 4 * *(_QWORD *)(result + 36));
    v40 = v38[1];
    v41 = (_BYTE *)(*v38 + v39 * v17 + v36);
    v42 = v38[2];
    if (v42)
      v43 = (unsigned __int8 *)(v42 + v39 * v19 + v36);
    else
      v43 = 0;
    v44 = *(unsigned __int8 *)(v14 + 157);
    v45 = *(unsigned __int8 *)(v14 + 156);
    v172 = v18;
    v173 = v17;
    v46 = v40 + v39 / 2 * v18;
    v47 = *(unsigned __int8 *)(v14 + 155);
    v48 = *(unsigned __int8 *)(v14 + 154);
    v49 = v46 + v36;
    v171 = v19;
    v196 = v25;
    v197 = v22;
    v175 = v33;
    v176 = v34;
    v177 = v29;
    do
    {
      v50 = &v43[v19];
      v51 = &v41[v17];
      v52 = v16;
      v53 = &result[v16];
      if (v12)
      {
        v54 = 0;
        v55 = v50;
        v56 = &v41[v17];
        v57 = &result[v16];
        do
        {
          LOBYTE(v28) = result[v48];
          LOBYTE(v27) = result[v47];
          LOBYTE(v26) = result[v45];
          _H3 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v20 * (float)LODWORD(v28), 0.0), 8191.0)));
          v59 = v20 * (float)LODWORD(v26);
          __asm { FCVT            S14, H3 }
          _H3 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v20 * (float)LODWORD(v27), 0.0), 8191.0)));
          __asm { FCVT            S15, H3 }
          _H3 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v59, 0.0), 8191.0)));
          __asm { FCVT            S18, H3 }
          v69 = fmaxf(_S14, fmaxf(_S15, _S18));
          v70 = (float)((float)((float)(v33 * _S15) + (float)(v29 * _S14)) + (float)(v34 * _S18)) + (float)(v35 * v69);
          v71 = 8191.0;
          if (v70 <= 8191.0)
          {
            v71 = (float)((float)((float)(v33 * _S15) + (float)(v29 * _S14)) + (float)(v34 * _S18)) + (float)(v35 * v69);
            if (v70 < 0.0)
              v71 = 0.0;
          }
          LOBYTE(v70) = result[v48 + 4];
          LOBYTE(v69) = result[v47 + 4];
          LOBYTE(v59) = result[v45 + 4];
          _H3 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v20 * (float)LODWORD(v70), 0.0), 8191.0)));
          __asm { FCVT            S20, H3 }
          _H3 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v20 * (float)LODWORD(v69), 0.0), 8191.0)));
          __asm { FCVT            S21, H3 }
          _H3 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v20 * (float)LODWORD(v59), 0.0), 8191.0)));
          __asm { FCVT            S22, H3 }
          v78 = fmaxf(_S20, fmaxf(_S21, _S22));
          v79 = (float)((float)((float)(v33 * _S21) + (float)(v29 * _S20)) + (float)(v34 * _S22)) + (float)(v35 * v78);
          v80 = 8191.0;
          if (v79 <= 8191.0)
          {
            v80 = (float)((float)((float)(v33 * _S21) + (float)(v29 * _S20)) + (float)(v34 * _S22)) + (float)(v35 * v78);
            if (v79 < 0.0)
              v80 = 0.0;
          }
          LOBYTE(v79) = v57[v48];
          LOBYTE(v78) = v57[v47];
          *(float *)&v81 = (float)LODWORD(v78);
          _S6 = v20 * *(float *)&v81;
          LOBYTE(v81) = v57[v45];
          _H3 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v20 * (float)LODWORD(v79), 0.0), 8191.0)));
          v84 = v20 * (float)v81;
          __asm { FCVT            S5, H3 }
          _H3 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          LOWORD(_S6) = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm { FCVT            S7, H6 }
          v89 = (float)((float)((float)(v33 * _S3) + (float)(v29 * _S5)) + (float)(v34 * _S7))
              + (float)(v35 * fmaxf(_S5, fmaxf(_S3, _S7)));
          v90 = 8191.0;
          if (v89 <= 8191.0)
          {
            v90 = v89;
            if (v89 < 0.0)
              v90 = 0.0;
          }
          LOBYTE(v89) = v57[v48 + 4];
          LOBYTE(v22) = v57[v47 + 4];
          LOBYTE(v6) = v57[v45 + 4];
          _H16 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v20 * (float)LODWORD(v89), 0.0), 8191.0)));
          __asm { FCVT            S16, H16 }
          _H17 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v20 * (float)LODWORD(v22), 0.0), 8191.0)));
          v94 = llroundf(fminf(fmaxf(v20 * (float)v6, 0.0), 8191.0));
          __asm { FCVT            S23, H17 }
          _H17 = *(_WORD *)(v30 + 2 * v94);
          __asm { FCVT            S25, H17 }
          _H17 = *(_WORD *)(v31 + 2 * llroundf(v71));
          __asm { FCVT            S19, H17 }
          v100 = _S14 * _S19;
          v101 = _S15 * _S19;
          v102 = _S18 * _S19;
          _H18 = *(_WORD *)(v31 + 2 * llroundf(v80));
          __asm { FCVT            S18, H18 }
          v105 = _S20 * _S18;
          v106 = _S21 * _S18;
          v107 = _S22 * _S18;
          _H6 = *(_WORD *)(v31 + 2 * llroundf(v90));
          __asm { FCVT            S6, H6 }
          v110 = _S5 * _S6;
          v111 = _S3 * _S6;
          v112 = _S7 * _S6;
          v113 = (float)((float)((float)(v33 * _S23) + (float)(v29 * _S16)) + (float)(v34 * _S25))
               + (float)(v35 * fmaxf(_S16, fmaxf(_S23, _S25)));
          v114 = 8191.0;
          if (v113 <= 8191.0)
          {
            v114 = v113;
            if (v113 < 0.0)
              v114 = 0.0;
          }
          v115 = result[v44];
          v116 = v57[v44];
          _H6 = *(_WORD *)(v31 + 2 * llroundf(v114));
          __asm { FCVT            S6, H6 }
          _S7 = _S16 * _S6;
          v120 = _S23 * _S6;
          v121 = _S25 * _S6;
          v122 = (float)((float)(v185 * v101) + (float)(v100 * v187)) + (float)(v102 * v184);
          v123 = (float)((float)(v182 * v101) + (float)(v100 * v183)) + (float)(v102 * v181);
          v124 = (float)((float)(v179 * v101) + (float)(v100 * v180)) + (float)(v102 * v178);
          v125 = (float)((float)(v185 * v106) + (float)(v105 * v187)) + (float)(v107 * v184);
          v126 = (float)((float)(v182 * v106) + (float)(v105 * v183)) + (float)(v107 * v181);
          v127 = (float)((float)(v179 * v106) + (float)(v105 * v180)) + (float)(v107 * v178);
          v128 = (float)((float)(v185 * v111) + (float)(v110 * v187)) + (float)(v112 * v184);
          v129 = (float)((float)(v182 * v111) + (float)(v110 * v183)) + (float)(v112 * v181);
          _S3 = (float)((float)(v179 * v111) + (float)(v110 * v180)) + (float)(v112 * v178);
          v131 = (float)((float)(v185 * v120) + (float)(_S7 * v187)) + (float)(v121 * v184);
          v132 = (float)((float)(v182 * v120) + (float)(_S7 * v183)) + (float)(v121 * v181);
          _S6 = (float)((float)(v179 * v120) + (float)(_S7 * v180)) + (float)(v121 * v178);
          _H5 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v122, 0.0), 8191.0)));
          __asm { FCVT            S18, H5 }
          _H5 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v123, 0.0), 8191.0)));
          __asm { FCVT            S19, H5 }
          _H5 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v124, 0.0), 8191.0)));
          __asm { FCVT            S20, H5 }
          _H5 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v125, 0.0), 8191.0)));
          LOWORD(_S7) = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v126, 0.0), 8191.0)));
          __asm
          {
            FCVT            S22, H5
            FCVT            S21, H7
          }
          _H5 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v127, 0.0), 8191.0)));
          __asm { FCVT            S24, H5 }
          _H5 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v128, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          LOWORD(_S7) = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v129, 0.0), 8191.0)));
          __asm { FCVT            S14, H7 }
          LOWORD(_S3) = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          __asm { FCVT            S15, H3 }
          LOWORD(_S3) = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v131, 0.0), 8191.0)));
          LOWORD(_S7) = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v132, 0.0), 8191.0)));
          __asm
          {
            FCVT            S3, H3
            FCVT            S7, H7
          }
          LOWORD(_S6) = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          if (v43)
          {
            v152 = result[v44 + 4];
          }
          else
          {
            v116 = 0;
            v115 = 0;
            v152 = 0;
          }
          if (v43)
            v153 = v57[v44 + 4];
          else
            v153 = 0;
          v6 = LODWORD(v195);
          v154 = (float)((float)((float)(v194 * _S19) + (float)(v195 * _S18)) + (float)(v193 * _S20)) + v21;
          if (v154 < v21)
            v155 = v21;
          else
            v155 = (float)((float)((float)(v194 * _S19) + (float)(v195 * _S18)) + (float)(v193 * _S20)) + v21;
          v156 = v154 <= v23;
          v157 = (float)((float)((float)(v194 * _S21) + (float)(v195 * _S22)) + (float)(v193 * _S24)) + v21;
          if (!v156)
            v155 = v23;
          v158 = llroundf(v155);
          if (v157 < v21)
            v159 = v21;
          else
            v159 = (float)((float)((float)(v194 * _S21) + (float)(v195 * _S22)) + (float)(v193 * _S24)) + v21;
          v156 = v157 <= v23;
          v160 = (float)((float)((float)(v194 * _S14) + (float)(v195 * _S5)) + (float)(v193 * _S15)) + v21;
          if (!v156)
            v159 = v23;
          v161 = llroundf(v159);
          if (v160 < v21)
            v162 = v21;
          else
            v162 = (float)((float)((float)(v194 * _S14) + (float)(v195 * _S5)) + (float)(v193 * _S15)) + v21;
          v156 = v160 <= v23;
          v163 = (float)((float)((float)(v194 * _S7) + (float)(v195 * _S3)) + (float)(v193 * _S6)) + v21;
          if (!v156)
            v162 = v23;
          v164 = llroundf(v162);
          if (v163 < v21)
            v165 = v21;
          else
            v165 = (float)((float)((float)(v194 * _S7) + (float)(v195 * _S3)) + (float)(v193 * _S6)) + v21;
          if (v163 <= v23)
            v166 = v165;
          else
            v166 = v23;
          v167 = (float)((float)(_S18 + _S22) + _S5) + _S3;
          v168 = (float)((float)(_S19 + _S21) + _S14) + _S7;
          *v41 = v158;
          v41[1] = v161;
          *v56 = v164;
          v56[1] = llroundf(v166);
          v22 = v197;
          v26 = (float)((float)(_S20 + _S24) + _S15) + _S6;
          v169 = (float)((float)(v197 + (float)(v167 * v192)) + (float)(v168 * v191)) + (float)(v26 * v190);
          v170 = v196;
          if (v169 <= v196)
          {
            v170 = (float)((float)(v197 + (float)(v167 * v192)) + (float)(v168 * v191)) + (float)(v26 * v190);
            if (v169 < v198)
              v170 = v198;
          }
          v28 = (float)((float)(v197 + (float)(v167 * v189)) + (float)(v168 * v188)) + (float)(v26 * v186);
          *(_BYTE *)(v49 + v54) = llroundf(v170);
          v27 = v196;
          if (v28 <= v196)
          {
            v27 = v28;
            if (v28 < v198)
              v27 = v198;
          }
          *(_BYTE *)(v49 + v54 + 1) = llroundf(v27);
          v34 = v176;
          v29 = v177;
          if (v43)
          {
            *v43 = v115;
            v43[1] = v152;
            v43 += 2;
            *v55 = v116;
            v55[1] = v153;
            v55 += 2;
          }
          v33 = v175;
          result += 8;
          v57 += 8;
          v41 += 2;
          v56 += 2;
          v54 += 2;
        }
        while (v12 > v54);
      }
      result = &v53[v52];
      v16 = v52;
      v17 = v173;
      v41 = &v51[v173];
      v49 += v172;
      v19 = v171;
      v43 = &v50[v171];
      v11 += 2;
    }
    while (v174 > v11);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Mat_TRC_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Mat_TRC_420vf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_TRC_Mat_TRC_420vf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  float v8;
  float v9;
  unsigned int v14;
  unsigned int v15;
  float v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  float v29;
  unsigned int v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  unsigned __int8 *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 *v58;
  _BYTE *v59;
  uint64_t v60;
  unint64_t v61;
  unsigned __int8 *v62;
  _BYTE *v63;
  uint64_t v64;
  unsigned __int8 v65;
  unsigned __int8 v66;
  unsigned int v67;
  float v96;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v104;
  float v105;
  unsigned int v106;
  unsigned __int8 v116;
  unsigned __int8 v117;
  float v118;
  float v119;
  BOOL v120;
  float v121;
  char v122;
  float v123;
  float v124;
  char v125;
  float v126;
  float v127;
  char v128;
  float v129;
  float v130;
  float v131;
  float v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;

  v17 = *(_QWORD *)(result + 28);
  v18 = 2 * *result;
  v19 = v17 * a2 / v18;
  v20 = (v17 + v17 * a2) / v18;
  if (2 * v20 != 2 * v19)
  {
    v21 = 0;
    v22 = *(_QWORD *)(result + 20);
    v135 = 2 * v20 - 2 * v19;
    v23 = *((_QWORD *)result + 19);
    v24 = (uint64_t *)*((_QWORD *)result + 17);
    v25 = **((_QWORD **)result + 8);
    v26 = *v24;
    v27 = v24[2];
    v28 = 8191.0 / (float)*(unsigned int *)(v23 + 128);
    LOWORD(a5) = *(_WORD *)(v23 + 144);
    v29 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v23 + 146);
    *(float *)&v30 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v23 + 148);
    v31 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v23 + 150);
    v148 = (float)LODWORD(a6);
    v149 = (float)LODWORD(a8);
    LOWORD(v30) = *(_WORD *)(v23 + 152);
    v146 = *(float *)(v23 + 36);
    v147 = (float)v30;
    v144 = *(float *)(v23 + 44);
    v145 = *(float *)(v23 + 40);
    v32 = 0.25;
    v142 = *(float *)(v23 + 52) * 0.25;
    v143 = *(float *)(v23 + 48) * 0.25;
    v33 = *(float *)(v23 + 64);
    v140 = *(float *)(v23 + 60) * 0.25;
    v141 = *(float *)(v23 + 56) * 0.25;
    v34 = *(float *)(v23 + 68);
    v138 = *(float *)(v23 + 72);
    v139 = v33 * 0.25;
    v35 = *(float *)(v23 + 80);
    v136 = *(float *)(v23 + 76);
    v137 = v34 * 0.25;
    v36 = *(float *)(v23 + 84);
    v37 = *(float *)(v23 + 88);
    v38 = *(float *)(v23 + 92);
    v39 = *(float *)(v23 + 96);
    v41 = *(float *)(v23 + 100);
    v40 = *(float *)(v23 + 104);
    v42 = v23 + 164;
    v43 = v23 + 16548;
    v44 = *((_QWORD *)result + 14);
    v45 = (_QWORD *)*((_QWORD *)result + 16);
    v46 = *((_QWORD *)result + 15) + 2 * (*((_QWORD *)result + 13) * a2 / v18);
    v47 = **((_QWORD **)result + 7) + v25 * (*(_QWORD *)(result + 44) + 2 * v19) + 4 * *(_QWORD *)(result + 36);
    v48 = v45[1];
    v49 = (_BYTE *)(*v45 + v46 * *v24 + v44);
    v50 = v45[2];
    if (v50)
      v51 = (unsigned __int8 *)(v50 + v46 * v27 + v44);
    else
      v51 = 0;
    result = (unsigned __int8 *)*(unsigned __int8 *)(v23 + 157);
    v52 = *(unsigned __int8 *)(v23 + 156);
    if (v46 >= 0)
      v53 = v46;
    else
      v53 = v46 + 1;
    v133 = v24[2];
    v134 = v24[1];
    v54 = v48 + (v53 >> 1) * v134;
    v55 = *(unsigned __int8 *)(v23 + 155);
    v56 = *(unsigned __int8 *)(v23 + 154);
    v57 = v54 + v44;
    do
    {
      v58 = &v51[v27];
      v59 = &v49[v26];
      v60 = v47 + v25;
      if (v22)
      {
        v61 = 0;
        v62 = &v51[v27];
        v63 = &v49[v26];
        v64 = v47 + v25;
        do
        {
          LOBYTE(v34) = *(_BYTE *)(v47 + v56);
          LOBYTE(v32) = *(_BYTE *)(v47 + v55);
          LOBYTE(v33) = *(_BYTE *)(v47 + v52);
          LOBYTE(v8) = *(_BYTE *)(v47 + 4 + v56);
          LOBYTE(v9) = *(_BYTE *)(v47 + 4 + v55);
          LOBYTE(_S12) = *(_BYTE *)(v47 + 4 + v52);
          v65 = result[v47 + 4];
          LOBYTE(_S13) = *(_BYTE *)(v64 + v56);
          LOBYTE(_S14) = *(_BYTE *)(v64 + v55);
          LOBYTE(_S15) = *(_BYTE *)(v64 + v52);
          v66 = result[v64];
          LOBYTE(v14) = *(_BYTE *)(v64 + 4 + v56);
          LOBYTE(v15) = *(_BYTE *)(v64 + 4 + v55);
          LOBYTE(v16) = *(_BYTE *)(v64 + 4 + v52);
          v67 = llroundf(fminf(fmaxf(v28 * (float)LODWORD(v34), 0.0), 8191.0));
          _S18 = v28 * (float)LODWORD(v16);
          _H24 = *(_WORD *)(v42 + 2 * v67);
          __asm { FCVT            S24, H24 }
          _H19 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v28 * (float)LODWORD(v32), 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          _H20 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v28 * (float)LODWORD(v33), 0.0), 8191.0)));
          __asm { FCVT            S20, H20 }
          _H10 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v28 * (float)LODWORD(v8), 0.0), 8191.0)));
          _H11 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v28 * (float)LODWORD(v9), 0.0), 8191.0)));
          __asm
          {
            FCVT            S10, H10
            FCVT            S11, H11
          }
          _H12 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v28 * (float)LODWORD(_S12), 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          _H13 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v28 * (float)LODWORD(_S13), 0.0), 8191.0)));
          __asm { FCVT            S13, H13 }
          _H14 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v28 * (float)LODWORD(_S14), 0.0), 8191.0)));
          __asm { FCVT            S14, H14 }
          _H15 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v28 * (float)LODWORD(_S15), 0.0), 8191.0)));
          __asm { FCVT            S15, H15 }
          _H21 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v28 * (float)v14, 0.0), 8191.0)));
          _H22 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v28 * (float)v15, 0.0), 8191.0)));
          __asm
          {
            FCVT            S21, H21
            FCVT            S22, H22
          }
          LOWORD(_S18) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(_S18, 0.0), 8191.0)));
          __asm { FCVT            S18, H18 }
          v96 = (float)((float)(v136 * _S19) + (float)(_S24 * v138)) + (float)(_S20 * v35);
          _S3 = (float)((float)(v37 * _S19) + (float)(_S24 * v36)) + (float)(_S20 * v38);
          v98 = (float)((float)(v41 * _S19) + (float)(_S24 * v39)) + (float)(_S20 * v40);
          v99 = (float)((float)(v136 * _S11) + (float)(_S10 * v138)) + (float)(_S12 * v35);
          v16 = (float)((float)(v37 * _S11) + (float)(_S10 * v36)) + (float)(_S12 * v38);
          v100 = (float)((float)(v41 * _S11) + (float)(_S10 * v39)) + (float)(_S12 * v40);
          v101 = (float)((float)(v136 * _S14) + (float)(_S13 * v138)) + (float)(_S15 * v35);
          v102 = (float)((float)(v37 * _S14) + (float)(_S13 * v36)) + (float)(_S15 * v38);
          _S6 = (float)((float)(v41 * _S14) + (float)(_S13 * v39)) + (float)(_S15 * v40);
          v104 = (float)((float)(v136 * _S22) + (float)(_S21 * v138)) + (float)(_S18 * v35);
          v105 = (float)((float)(v37 * _S22) + (float)(_S21 * v36)) + (float)(_S18 * v38);
          v106 = llroundf(fminf(fmaxf(v96, 0.0), 8191.0));
          _S5 = (float)((float)(v41 * _S22) + (float)(_S21 * v39)) + (float)(_S18 * v40);
          LOWORD(_S18) = *(_WORD *)(v43 + 2 * v106);
          __asm { FCVT            S10, H18 }
          LOWORD(_S3) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          __asm { FCVT            S11, H3 }
          LOWORD(_S3) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          __asm { FCVT            S12, H3 }
          LOWORD(_S3) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v99, 0.0), 8191.0)));
          LOWORD(_S18) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v16, 0.0), 8191.0)));
          __asm
          {
            FCVT            S14, H3
            FCVT            S13, H18
          }
          LOWORD(_S3) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v100, 0.0), 8191.0)));
          __asm { FCVT            S15, H3 }
          LOWORD(_S3) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v101, 0.0), 8191.0)));
          __asm { FCVT            S18, H3 }
          LOWORD(_S3) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v102, 0.0), 8191.0)));
          __asm { FCVT            S19, H3 }
          LOWORD(_S3) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          __asm { FCVT            S20, H3 }
          LOWORD(_S3) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v104, 0.0), 8191.0)));
          LOWORD(_S6) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v105, 0.0), 8191.0)));
          __asm
          {
            FCVT            S3, H3
            FCVT            S6, H6
          }
          LOWORD(_S5) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          if (v51)
          {
            v116 = result[v47];
          }
          else
          {
            v66 = 0;
            v116 = 0;
          }
          if (v51)
          {
            v117 = result[v64 + 4];
          }
          else
          {
            v65 = 0;
            v117 = 0;
          }
          v14 = LODWORD(v145);
          v15 = LODWORD(v144);
          v118 = (float)((float)((float)(v145 * _S11) + (float)(v146 * _S10)) + (float)(v144 * _S12)) + v29;
          if (v118 < v29)
            v119 = v29;
          else
            v119 = (float)((float)((float)(v145 * _S11) + (float)(v146 * _S10)) + (float)(v144 * _S12)) + v29;
          v120 = v118 <= v31;
          v121 = (float)((float)((float)(v145 * _S13) + (float)(v146 * _S14)) + (float)(v144 * _S15)) + v29;
          if (!v120)
            v119 = v31;
          v122 = llroundf(v119);
          if (v121 < v29)
            v123 = v29;
          else
            v123 = (float)((float)((float)(v145 * _S13) + (float)(v146 * _S14)) + (float)(v144 * _S15)) + v29;
          v120 = v121 <= v31;
          v124 = (float)((float)((float)(v145 * _S19) + (float)(v146 * _S18)) + (float)(v144 * _S20)) + v29;
          if (!v120)
            v123 = v31;
          v125 = llroundf(v123);
          if (v124 < v29)
            v126 = v29;
          else
            v126 = (float)((float)((float)(v145 * _S19) + (float)(v146 * _S18)) + (float)(v144 * _S20)) + v29;
          v120 = v124 <= v31;
          v127 = (float)((float)((float)(v145 * _S6) + (float)(v146 * _S3)) + (float)(v144 * _S5)) + v29;
          if (!v120)
            v126 = v31;
          v128 = llroundf(v126);
          if (v127 < v29)
            v129 = v29;
          else
            v129 = (float)((float)((float)(v145 * _S6) + (float)(v146 * _S3)) + (float)(v144 * _S5)) + v29;
          if (v127 <= v31)
            v130 = v129;
          else
            v130 = v31;
          v131 = (float)((float)(_S10 + _S14) + _S18) + _S3;
          v132 = (float)((float)(_S11 + _S13) + _S19) + _S6;
          *v49 = v122;
          v49[1] = v125;
          *v63 = v128;
          v63[1] = llroundf(v130);
          v33 = (float)((float)(_S12 + _S15) + _S20) + _S5;
          v9 = (float)((float)(v148 + (float)(v131 * v143)) + (float)(v132 * v142)) + (float)(v33 * v141);
          v8 = v147;
          if (v9 <= v147)
          {
            v8 = (float)((float)(v148 + (float)(v131 * v143)) + (float)(v132 * v142)) + (float)(v33 * v141);
            if (v9 < v149)
              v8 = v149;
          }
          v34 = (float)((float)(v148 + (float)(v131 * v140)) + (float)(v132 * v139)) + (float)(v33 * v137);
          *(_BYTE *)(v57 + v61) = llroundf(v8);
          v32 = v147;
          if (v34 <= v147)
          {
            v32 = v34;
            if (v34 < v149)
              v32 = v149;
          }
          *(_BYTE *)(v57 + v61 + 1) = llroundf(v32);
          if (v51)
          {
            *v51 = v116;
            v51[1] = v65;
            v51 += 2;
            *v62 = v66;
            v62[1] = v117;
            v62 += 2;
          }
          v47 += 8;
          v64 += 8;
          v49 += 2;
          v63 += 2;
          v61 += 2;
        }
        while (v22 > v61);
      }
      v47 = v60 + v25;
      v49 = &v59[v26];
      v27 = v133;
      v57 += v134;
      v51 = &v58[v133];
      v21 += 2;
    }
    while (v135 > v21);
  }
  return result;
}

uint64_t vt_Copy_BGRA_rgb_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_rgb_420vf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_rgb_420vf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  _BYTE *v63;
  uint64_t v64;
  unint64_t v65;
  _BYTE *v66;
  _BYTE *v67;
  uint64_t v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  char v74;
  char v75;
  char v76;
  char v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  char v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;

  v19 = *(_QWORD *)(result + 28);
  v20 = 2 * *result;
  v21 = v19 * a2 / v20;
  v22 = (v19 + v19 * a2) / v20;
  if (2 * v22 != 2 * v21)
  {
    v23 = 0;
    v24 = *(_QWORD *)(result + 20);
    v25 = *(_QWORD *)(result + 44) + 2 * v21;
    v26 = 2 * v22 - 2 * v21;
    v27 = *((_QWORD *)result + 19);
    v28 = (uint64_t *)*((_QWORD *)result + 17);
    v29 = **((_QWORD **)result + 8);
    v30 = *v28;
    v31 = v28[1];
    v32 = v28[2];
    *(float *)&v33 = (float)*(unsigned int *)(v27 + 136);
    v34 = *(float *)&v33 / (float)*(unsigned int *)(v27 + 128);
    LOWORD(v33) = *(_WORD *)(v27 + 144);
    v35 = (float)v33;
    LOWORD(a5) = *(_WORD *)(v27 + 146);
    v36 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v27 + 148);
    v37 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v27 + 150);
    v38 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v27 + 152);
    v39 = (float)LODWORD(a8);
    v40 = *(float *)(v27 + 36);
    v41 = *(float *)(v27 + 40);
    v42 = *(float *)(v27 + 44);
    v43 = *(float *)(v27 + 48) * 0.25;
    v44 = *(float *)(v27 + 52) * 0.25;
    v45 = *(float *)(v27 + 56) * 0.25;
    v46 = *(float *)(v27 + 60) * 0.25;
    v47 = *(float *)(v27 + 64) * 0.25;
    v48 = *(float *)(v27 + 68);
    v49 = v48 * 0.25;
    v50 = *((_QWORD *)result + 14);
    v51 = (_QWORD *)*((_QWORD *)result + 16);
    v52 = *((_QWORD *)result + 15) + 2 * (*((_QWORD *)result + 13) * a2 / v20);
    v53 = **((_QWORD **)result + 7) + v29 * v25 + 4 * *(_QWORD *)(result + 36);
    v54 = (_BYTE *)(*v51 + v52 * v30 + v50);
    v55 = v51[2];
    if (v55)
      v56 = (_BYTE *)(v55 + v52 * v32 + v50);
    else
      v56 = 0;
    v57 = *(unsigned __int8 *)(v27 + 157);
    result = (unsigned __int8 *)*(unsigned __int8 *)(v27 + 156);
    v58 = v51[1] + v52 / 2 * v31;
    v59 = *(unsigned __int8 *)(v27 + 155);
    v60 = *(unsigned __int8 *)(v27 + 154);
    v61 = v58 + v50;
    do
    {
      v62 = &v56[v32];
      v63 = &v54[v30];
      v64 = v53 + v29;
      if (v24)
      {
        v65 = 0;
        v66 = &v56[v32];
        v67 = &v54[v30];
        v68 = v53 + v29;
        do
        {
          LOBYTE(v48) = *(_BYTE *)(v53 + v60);
          v69 = v34 * (float)LODWORD(v48);
          LOBYTE(v11) = *(_BYTE *)(v53 + v59);
          v70 = v34 * (float)LODWORD(v11);
          LOBYTE(v12) = result[v53];
          v71 = v34 * (float)LODWORD(v12);
          LOBYTE(v13) = *(_BYTE *)(v53 + 4 + v60);
          v72 = v34 * (float)LODWORD(v13);
          LOBYTE(v14) = *(_BYTE *)(v53 + 4 + v59);
          v73 = v34 * (float)LODWORD(v14);
          LOBYTE(v15) = result[v53 + 4];
          v15 = v34 * (float)LODWORD(v15);
          v74 = *(_BYTE *)(v53 + 4 + v57);
          LOBYTE(v16) = *(_BYTE *)(v68 + v60);
          v16 = v34 * (float)LODWORD(v16);
          LOBYTE(v17) = *(_BYTE *)(v68 + v59);
          v17 = v34 * (float)LODWORD(v17);
          LOBYTE(v18) = result[v68];
          v18 = v34 * (float)LODWORD(v18);
          v75 = *(_BYTE *)(v68 + v57);
          LOBYTE(v8) = *(_BYTE *)(v68 + 4 + v60);
          LOBYTE(v9) = *(_BYTE *)(v68 + 4 + v59);
          v8 = v34 * (float)LODWORD(v8);
          v9 = v34 * (float)LODWORD(v9);
          LOBYTE(v10) = result[v68 + 4];
          v10 = v34 * (float)LODWORD(v10);
          if (v56)
          {
            v76 = *(_BYTE *)(v53 + v57);
          }
          else
          {
            v75 = 0;
            v76 = 0;
          }
          if (v56)
          {
            v77 = *(_BYTE *)(v68 + 4 + v57);
          }
          else
          {
            v74 = 0;
            v77 = 0;
          }
          v78 = (float)((float)((float)(v41 * v70) + (float)(v40 * v69)) + (float)(v42 * v71)) + v35;
          v79 = (float)((float)((float)(v41 * v73) + (float)(v40 * v72)) + (float)(v42 * v15)) + v35;
          v80 = (float)((float)((float)(v41 * v17) + (float)(v40 * v16)) + (float)(v42 * v18)) + v35;
          if (v78 < v35)
            v82 = v35;
          else
            v82 = (float)((float)((float)(v41 * v70) + (float)(v40 * v69)) + (float)(v42 * v71)) + v35;
          if (v78 <= v37)
            v83 = v82;
          else
            v83 = v37;
          *v54 = llroundf(v83);
          if (v79 < v35)
            v84 = v35;
          else
            v84 = (float)((float)((float)(v41 * v73) + (float)(v40 * v72)) + (float)(v42 * v15)) + v35;
          if (v79 > v37)
            v84 = v37;
          v85 = llroundf(v84);
          v81 = (float)((float)(v41 * v9) + (float)(v40 * v8)) + (float)(v42 * v10);
          v86 = v81 + v35;
          v54[1] = v85;
          if (v80 < v35)
            v87 = v35;
          else
            v87 = (float)((float)((float)(v41 * v17) + (float)(v40 * v16)) + (float)(v42 * v18)) + v35;
          if (v80 > v37)
            v87 = v37;
          *v67 = llroundf(v87);
          if (v86 < v35)
            v88 = v35;
          else
            v88 = v81 + v35;
          if (v86 <= v37)
            v89 = v88;
          else
            v89 = v37;
          v67[1] = llroundf(v89);
          v90 = (float)((float)(v69 + v72) + v16) + v8;
          v91 = (float)((float)(v70 + v73) + v17) + v9;
          v12 = (float)((float)(v71 + v15) + v18) + v10;
          v14 = (float)((float)(v36 + (float)(v90 * v43)) + (float)(v91 * v44)) + (float)(v12 * v45);
          v13 = v39;
          if (v14 <= v39)
          {
            v13 = (float)((float)(v36 + (float)(v90 * v43)) + (float)(v91 * v44)) + (float)(v12 * v45);
            if (v14 < v38)
              v13 = v38;
          }
          v48 = (float)((float)(v36 + (float)(v90 * v46)) + (float)(v91 * v47)) + (float)(v12 * v49);
          *(_BYTE *)(v61 + v65) = llroundf(v13);
          v11 = v39;
          if (v48 <= v39)
          {
            v11 = v48;
            if (v48 < v38)
              v11 = v38;
          }
          *(_BYTE *)(v61 + v65 + 1) = llroundf(v11);
          if (v56)
          {
            *v56 = v76;
            v56[1] = v74;
            v56 += 2;
            *v66 = v75;
            v66[1] = v77;
            v66 += 2;
          }
          v53 += 8;
          v68 += 8;
          v54 += 2;
          v67 += 2;
          v65 += 2;
        }
        while (v24 > v65);
      }
      v53 = v64 + v29;
      v54 = &v63[v30];
      v61 += v31;
      v56 = &v62[v32];
      v23 += 2;
    }
    while (v26 > v23);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Tone_Mat_TRC_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Tone_Mat_TRC_xf420_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_TRC_Tone_Mat_TRC_xf420_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  unsigned int v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  float v33;
  float v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  unsigned int v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  float v56;
  float v66;
  float v67;
  float v68;
  float v75;
  float v76;
  float v77;
  unsigned int v78;
  float v81;
  float v86;
  float v87;
  float v88;
  unsigned int v89;
  float v90;
  float v92;
  float v100;
  float v101;
  float v102;
  float v105;
  float v106;
  float v107;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v117;
  float v118;
  float v120;
  float v121;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v147;
  float v148;
  BOOL v149;
  float v150;
  unsigned int v151;
  float v152;
  float v153;
  unsigned int v154;
  float v155;
  float v156;
  unsigned int v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  _WORD *v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float v182;
  float v183;
  float v184;
  float v185;
  float v186;
  float v187;
  float v188;

  v6 = *(_QWORD *)(result + 28);
  v7 = 2 * *result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (2 * v9 != 2 * v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)(result + 20);
    v12 = *(_QWORD *)(result + 44) + 2 * v8;
    v13 = 2 * v9 - 2 * v8;
    v14 = *((_QWORD *)result + 19);
    v15 = (uint64_t *)*((_QWORD *)result + 17);
    v16 = **((_QWORD **)result + 8);
    v17 = *v15;
    v18 = v15[1];
    v19 = 8191.0 / (float)*(unsigned int *)(v14 + 128);
    LOWORD(a5) = *(_WORD *)(v14 + 144);
    v20 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v14 + 146);
    v21 = (float)LODWORD(a6);
    LOWORD(a6) = *(_WORD *)(v14 + 148);
    v22 = (float)LODWORD(a6);
    LOWORD(a6) = *(_WORD *)(v14 + 150);
    *(float *)&v23 = (float)LODWORD(a6);
    v188 = *(float *)&v23;
    LOWORD(v23) = *(_WORD *)(v14 + 152);
    v24 = (float)v23;
    v184 = *(float *)(v14 + 40);
    v185 = *(float *)(v14 + 36);
    v182 = *(float *)(v14 + 48) * 0.25;
    v183 = *(float *)(v14 + 44);
    v180 = *(float *)(v14 + 56) * 0.25;
    v181 = *(float *)(v14 + 52) * 0.25;
    v178 = *(float *)(v14 + 64) * 0.25;
    v179 = *(float *)(v14 + 60) * 0.25;
    v25 = *(float *)(v14 + 72);
    v176 = *(float *)(v14 + 68) * 0.25;
    v177 = v25;
    v174 = *(float *)(v14 + 80);
    v175 = *(float *)(v14 + 76);
    v172 = *(float *)(v14 + 88);
    v173 = *(float *)(v14 + 84);
    v170 = *(float *)(v14 + 96);
    v171 = *(float *)(v14 + 92);
    v26 = *(float *)(v14 + 100);
    v27 = *(float *)(v14 + 104);
    v28 = *(float *)(v14 + 108);
    v168 = v27;
    v169 = v26;
    v29 = v14 + 164;
    v30 = v14 + 16548;
    v31 = v14 + 32932;
    v32 = *(float *)(v14 + 112);
    v33 = *(float *)(v14 + 116);
    v34 = *(float *)(v14 + 120);
    v35 = *((_QWORD *)result + 14);
    v36 = *((_QWORD *)result + 13) * a2 / v7;
    v37 = (_QWORD *)*((_QWORD *)result + 16);
    v38 = *((_QWORD *)result + 15) + 2 * v36;
    v39 = **((_QWORD **)result + 7) + v16 * v12 + 4 * *(_QWORD *)(result + 36);
    v40 = v37[1];
    v41 = (char *)(*v37 + v38 * v17 + 2 * v35);
    v42 = *(unsigned __int8 *)(v14 + 132);
    if (v42 >= 0x11)
      v43 = 0;
    else
      v43 = 16 - v42;
    result = (unsigned __int8 *)*(unsigned __int8 *)(v14 + 156);
    if (v38 >= 0)
      v44 = v38;
    else
      v44 = v38 + 1;
    v45 = v40 + (v44 >> 1) * v18;
    v46 = *(unsigned __int8 *)(v14 + 155);
    v47 = *(unsigned __int8 *)(v14 + 154);
    v48 = v45 + 2 * v35;
    v49 = v43;
    v186 = v24;
    v187 = v21;
    v166 = v32;
    v167 = v28;
    v165 = v33;
    do
    {
      v50 = &v41[v17];
      v51 = v39 + v16;
      if (v11)
      {
        v52 = 0;
        v53 = v39 + v16;
        v54 = &v41[v17];
        do
        {
          LOBYTE(v27) = *(_BYTE *)(v39 + v47);
          LOBYTE(v26) = *(_BYTE *)(v39 + v46);
          LOBYTE(v25) = result[v39];
          _H3 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v19 * (float)LODWORD(v27), 0.0), 8191.0)));
          v56 = v19 * (float)LODWORD(v25);
          __asm { FCVT            S14, H3 }
          _H3 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v19 * (float)LODWORD(v26), 0.0), 8191.0)));
          __asm { FCVT            S15, H3 }
          _H3 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v56, 0.0), 8191.0)));
          __asm { FCVT            S18, H3 }
          v66 = fmaxf(_S14, fmaxf(_S15, _S18));
          v67 = (float)((float)((float)(v32 * _S15) + (float)(v28 * _S14)) + (float)(v33 * _S18)) + (float)(v34 * v66);
          v68 = 8191.0;
          if (v67 <= 8191.0)
          {
            v68 = (float)((float)((float)(v32 * _S15) + (float)(v28 * _S14)) + (float)(v33 * _S18)) + (float)(v34 * v66);
            if (v67 < 0.0)
              v68 = 0.0;
          }
          LOBYTE(v67) = *(_BYTE *)(v39 + 4 + v47);
          LOBYTE(v66) = *(_BYTE *)(v39 + 4 + v46);
          LOBYTE(v56) = result[v39 + 4];
          _H3 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v19 * (float)LODWORD(v67), 0.0), 8191.0)));
          __asm { FCVT            S20, H3 }
          _H3 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v19 * (float)LODWORD(v66), 0.0), 8191.0)));
          __asm { FCVT            S21, H3 }
          _H3 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v19 * (float)LODWORD(v56), 0.0), 8191.0)));
          __asm { FCVT            S22, H3 }
          v75 = fmaxf(_S20, fmaxf(_S21, _S22));
          v76 = (float)((float)((float)(v32 * _S21) + (float)(v28 * _S20)) + (float)(v33 * _S22)) + (float)(v34 * v75);
          v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            v77 = (float)((float)((float)(v32 * _S21) + (float)(v28 * _S20)) + (float)(v33 * _S22)) + (float)(v34 * v75);
            if (v76 < 0.0)
              v77 = 0.0;
          }
          LOBYTE(v76) = *(_BYTE *)(v53 + v47);
          LOBYTE(v75) = *(_BYTE *)(v53 + v46);
          *(float *)&v78 = (float)LODWORD(v75);
          _S6 = v19 * *(float *)&v78;
          LOBYTE(v78) = result[v53];
          _H3 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v19 * (float)LODWORD(v76), 0.0), 8191.0)));
          v81 = v19 * (float)v78;
          __asm { FCVT            S5, H3 }
          _H3 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          LOWORD(_S6) = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          __asm { FCVT            S7, H6 }
          v86 = fmaxf(_S5, fmaxf(_S3, _S7));
          v87 = (float)((float)((float)(v32 * _S3) + (float)(v28 * _S5)) + (float)(v33 * _S7)) + (float)(v34 * v86);
          v88 = 8191.0;
          if (v87 <= 8191.0)
          {
            v88 = (float)((float)((float)(v32 * _S3) + (float)(v28 * _S5)) + (float)(v33 * _S7)) + (float)(v34 * v86);
            if (v87 < 0.0)
              v88 = 0.0;
          }
          LOBYTE(v87) = *(_BYTE *)(v53 + 4 + v47);
          LOBYTE(v86) = *(_BYTE *)(v53 + 4 + v46);
          *(float *)&v89 = (float)LODWORD(v86);
          v90 = v19 * *(float *)&v89;
          LOBYTE(v89) = result[v53 + 4];
          _H6 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v19 * (float)LODWORD(v87), 0.0), 8191.0)));
          v92 = v19 * (float)v89;
          __asm { FCVT            S16, H6 }
          _H6 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          __asm { FCVT            S23, H6 }
          _H6 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          __asm { FCVT            S25, H6 }
          _H6 = *(_WORD *)(v30 + 2 * llroundf(v68));
          __asm { FCVT            S19, H6 }
          v100 = _S14 * _S19;
          v101 = _S15 * _S19;
          v102 = _S18 * _S19;
          _H18 = *(_WORD *)(v30 + 2 * llroundf(v77));
          __asm { FCVT            S18, H18 }
          v105 = _S20 * _S18;
          v106 = _S21 * _S18;
          v107 = _S22 * _S18;
          _H17 = *(_WORD *)(v30 + 2 * llroundf(v88));
          __asm { FCVT            S17, H17 }
          v110 = _S5 * _S17;
          v111 = _S3 * _S17;
          v112 = _S7 * _S17;
          v113 = (float)((float)((float)(v32 * _S23) + (float)(v28 * _S16)) + (float)(v33 * _S25))
               + (float)(v34 * fmaxf(_S16, fmaxf(_S23, _S25)));
          v114 = 8191.0;
          if (v113 <= 8191.0)
          {
            v114 = v113;
            if (v113 < 0.0)
              v114 = 0.0;
          }
          _H7 = *(_WORD *)(v30 + 2 * llroundf(v114));
          __asm { FCVT            S7, H7 }
          v117 = _S16 * _S7;
          v118 = _S23 * _S7;
          _S7 = _S25 * _S7;
          v120 = (float)((float)(v175 * v101) + (float)(v100 * v177)) + (float)(v102 * v174);
          v121 = (float)((float)(v172 * v101) + (float)(v100 * v173)) + (float)(v102 * v171);
          _S6 = (float)((float)(v169 * v101) + (float)(v100 * v170)) + (float)(v102 * v168);
          v123 = (float)((float)(v175 * v106) + (float)(v105 * v177)) + (float)(v107 * v174);
          v124 = (float)((float)(v172 * v106) + (float)(v105 * v173)) + (float)(v107 * v171);
          v125 = (float)((float)(v169 * v106) + (float)(v105 * v170)) + (float)(v107 * v168);
          v126 = (float)((float)(v175 * v111) + (float)(v110 * v177)) + (float)(v112 * v174);
          v127 = (float)((float)(v172 * v111) + (float)(v110 * v173)) + (float)(v112 * v171);
          _S3 = (float)((float)(v169 * v111) + (float)(v110 * v170)) + (float)(v112 * v168);
          _H5 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v120, 0.0), 8191.0)));
          __asm { FCVT            S18, H5 }
          _H5 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v121, 0.0), 8191.0)));
          __asm { FCVT            S19, H5 }
          _H5 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          LOWORD(_S6) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v123, 0.0), 8191.0)));
          __asm
          {
            FCVT            S20, H5
            FCVT            S21, H6
          }
          _H5 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v124, 0.0), 8191.0)));
          __asm { FCVT            S24, H5 }
          _H5 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v125, 0.0), 8191.0)));
          __asm { FCVT            S22, H5 }
          _H5 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v126, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v127, 0.0), 8191.0)));
          __asm { FCVT            S14, H6 }
          LOWORD(_S3) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          LOWORD(_S6) = *(_WORD *)(v31
                                 + 2
                                 * llroundf(fminf(fmaxf((float)((float)(v175 * v118) + (float)(v117 * v177)) + (float)(_S7 * v174), 0.0), 8191.0)));
          __asm
          {
            FCVT            S15, H3
            FCVT            S3, H6
          }
          LOWORD(_S6) = *(_WORD *)(v31
                                 + 2
                                 * llroundf(fminf(fmaxf((float)((float)(v172 * v118) + (float)(v117 * v173)) + (float)(_S7 * v171), 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          LOWORD(_S7) = *(_WORD *)(v31
                                 + 2
                                 * llroundf(fminf(fmaxf((float)((float)(v169 * v118) + (float)(v117 * v170)) + (float)(_S7 * v168), 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          v147 = (float)((float)((float)(v184 * _S19) + (float)(v185 * _S18)) + (float)(v183 * _S20)) + v20;
          if (v147 < v20)
            v148 = v20;
          else
            v148 = (float)((float)((float)(v184 * _S19) + (float)(v185 * _S18)) + (float)(v183 * _S20)) + v20;
          v149 = v147 <= v22;
          v150 = (float)((float)((float)(v184 * _S24) + (float)(v185 * _S21)) + (float)(v183 * _S22)) + v20;
          if (!v149)
            v148 = v22;
          v151 = llroundf(v148);
          if (v150 < v20)
            v152 = v20;
          else
            v152 = (float)((float)((float)(v184 * _S24) + (float)(v185 * _S21)) + (float)(v183 * _S22)) + v20;
          v149 = v150 <= v22;
          v153 = (float)((float)((float)(v184 * _S14) + (float)(v185 * _S5)) + (float)(v183 * _S15)) + v20;
          if (!v149)
            v152 = v22;
          v154 = llroundf(v152);
          if (v153 < v20)
            v155 = v20;
          else
            v155 = (float)((float)((float)(v184 * _S14) + (float)(v185 * _S5)) + (float)(v183 * _S15)) + v20;
          v149 = v153 <= v22;
          v156 = (float)((float)((float)(v184 * _S6) + (float)(v185 * _S3)) + (float)(v183 * _S7)) + v20;
          if (!v149)
            v155 = v22;
          v157 = llroundf(v155);
          if (v156 < v20)
            v158 = v20;
          else
            v158 = (float)((float)((float)(v184 * _S6) + (float)(v185 * _S3)) + (float)(v183 * _S7)) + v20;
          if (v156 <= v22)
            v159 = v158;
          else
            v159 = v22;
          v160 = (float)((float)(_S18 + _S21) + _S5) + _S3;
          v161 = (float)((float)(_S19 + _S24) + _S14) + _S6;
          *(_WORD *)v41 = v151 << v49;
          *((_WORD *)v41 + 1) = v154 << v49;
          *(_WORD *)v54 = v157 << v49;
          *((_WORD *)v54 + 1) = llroundf(v159) << v49;
          v25 = (float)((float)(_S20 + _S22) + _S15) + _S7;
          v162 = (float)((float)(v187 + (float)(v160 * v182)) + (float)(v161 * v181)) + (float)(v25 * v180);
          v163 = v186;
          if (v162 <= v186)
          {
            v163 = (float)((float)(v187 + (float)(v160 * v182)) + (float)(v161 * v181)) + (float)(v25 * v180);
            if (v162 < v188)
              v163 = v188;
          }
          v164 = (_WORD *)(v48 + 2 * v52);
          v26 = (float)((float)(v187 + (float)(v160 * v179)) + (float)(v161 * v178)) + (float)(v25 * v176);
          *v164 = llroundf(v163) << v49;
          v27 = v186;
          if (v26 <= v186)
          {
            v27 = v26;
            if (v26 < v188)
              v27 = v188;
          }
          v39 += 8;
          v53 += 8;
          v41 += 4;
          v54 += 4;
          v164[1] = llroundf(v27) << v49;
          v52 += 2;
          v32 = v166;
          v28 = v167;
          v33 = v165;
        }
        while (v11 > v52);
      }
      v39 = v51 + v16;
      v41 = &v50[v17];
      v48 += v18;
      v10 += 2;
    }
    while (v13 > v10);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Mat_TRC_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Mat_TRC_xf420_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_TRC_Mat_TRC_xf420_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  float v9;
  float v10;
  unsigned int v15;
  unsigned int v16;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  unsigned __int8 *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unsigned __int8 *v66;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v111;
  float v112;
  BOOL v113;
  float v114;
  unsigned int v115;
  float v116;
  float v117;
  unsigned int v118;
  float v119;
  float v120;
  unsigned int v121;
  float v122;
  float v123;
  float v124;
  float v125;
  _WORD *v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;

  v18 = *(_QWORD *)(result + 28);
  v19 = 2 * *result;
  v20 = v18 * a2 / v19;
  v21 = (v18 + v18 * a2) / v19;
  if (2 * v21 != 2 * v20)
  {
    v22 = 0;
    v23 = *(_QWORD *)(result + 20);
    v24 = *(_QWORD *)(result + 44) + 2 * v20;
    v25 = 2 * v21 - 2 * v20;
    v26 = *((_QWORD *)result + 19);
    v27 = (uint64_t *)*((_QWORD *)result + 17);
    v28 = **((_QWORD **)result + 8);
    v29 = *v27;
    v30 = v27[1];
    v31 = 8191.0 / (float)*(unsigned int *)(v26 + 128);
    LOWORD(a5) = *(_WORD *)(v26 + 144);
    v32 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v26 + 146);
    LOWORD(a7) = *(_WORD *)(v26 + 148);
    v33 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v26 + 150);
    v138 = (float)LODWORD(a8);
    LOWORD(a9) = *(_WORD *)(v26 + 152);
    v139 = (float)LODWORD(a9);
    v140 = (float)LODWORD(a6);
    v136 = *(float *)(v26 + 40);
    v137 = *(float *)(v26 + 36);
    v34 = 0.25;
    v134 = *(float *)(v26 + 48) * 0.25;
    v135 = *(float *)(v26 + 44);
    v132 = *(float *)(v26 + 56) * 0.25;
    v133 = *(float *)(v26 + 52) * 0.25;
    v35 = *(float *)(v26 + 64);
    v130 = v35 * 0.25;
    v131 = *(float *)(v26 + 60) * 0.25;
    v36 = *(float *)(v26 + 68);
    v128 = v36 * 0.25;
    v129 = *(float *)(v26 + 72);
    v37 = *(float *)(v26 + 80);
    v127 = *(float *)(v26 + 76);
    v38 = *(float *)(v26 + 84);
    v39 = *(float *)(v26 + 88);
    v40 = *(float *)(v26 + 92);
    v41 = *(float *)(v26 + 96);
    v43 = *(float *)(v26 + 100);
    v42 = *(float *)(v26 + 104);
    v44 = v26 + 164;
    v45 = v26 + 16548;
    v46 = *((_QWORD *)result + 14);
    v47 = *((_QWORD *)result + 13) * a2 / v19;
    v48 = (uint64_t *)*((_QWORD *)result + 16);
    v49 = *((_QWORD *)result + 15) + 2 * v47;
    v50 = **((_QWORD **)result + 7) + v28 * v24 + 4 * *(_QWORD *)(result + 36);
    v52 = *v48;
    v51 = v48[1];
    result = (unsigned __int8 *)(v52 + v49 * v29 + 2 * v46);
    v53 = *(unsigned __int8 *)(v26 + 132);
    if (v53 >= 0x11)
      v54 = 0;
    else
      v54 = 16 - v53;
    v55 = *(unsigned __int8 *)(v26 + 156);
    if (v49 >= 0)
      v56 = v49;
    else
      v56 = v49 + 1;
    v57 = v51 + (v56 >> 1) * v30;
    v58 = *(unsigned __int8 *)(v26 + 155);
    v59 = *(unsigned __int8 *)(v26 + 154);
    v60 = v57 + 2 * v46;
    v61 = v54;
    do
    {
      v62 = &result[v29];
      v63 = v50 + v28;
      if (v23)
      {
        v64 = 0;
        v65 = v50 + v28;
        v66 = &result[v29];
        do
        {
          LOBYTE(v36) = *(_BYTE *)(v50 + v59);
          LOBYTE(v34) = *(_BYTE *)(v50 + v58);
          LOBYTE(v35) = *(_BYTE *)(v50 + v55);
          LOBYTE(v9) = *(_BYTE *)(v50 + 4 + v59);
          LOBYTE(v10) = *(_BYTE *)(v50 + 4 + v58);
          LOBYTE(_S12) = *(_BYTE *)(v50 + 4 + v55);
          LOBYTE(_S13) = *(_BYTE *)(v65 + v59);
          LOBYTE(_S14) = *(_BYTE *)(v65 + v58);
          LOBYTE(_S15) = *(_BYTE *)(v65 + v55);
          LOBYTE(v15) = *(_BYTE *)(v65 + 4 + v59);
          LOBYTE(v16) = *(_BYTE *)(v65 + 4 + v58);
          LOBYTE(_S24) = *(_BYTE *)(v65 + 4 + v55);
          _H18 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v31 * (float)LODWORD(v36), 0.0), 8191.0)));
          __asm { FCVT            S18, H18 }
          _H19 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v31 * (float)LODWORD(v34), 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          _H20 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v31 * (float)LODWORD(v35), 0.0), 8191.0)));
          _H10 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v31 * (float)LODWORD(v9), 0.0), 8191.0)));
          __asm
          {
            FCVT            S20, H20
            FCVT            S10, H10
          }
          _H11 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v31 * (float)LODWORD(v10), 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          _H12 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v31 * (float)LODWORD(_S12), 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          _H13 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v31 * (float)LODWORD(_S13), 0.0), 8191.0)));
          __asm { FCVT            S13, H13 }
          _H14 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v31 * (float)LODWORD(_S14), 0.0), 8191.0)));
          __asm { FCVT            S14, H14 }
          _H15 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v31 * (float)LODWORD(_S15), 0.0), 8191.0)));
          _H21 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v31 * (float)v15, 0.0), 8191.0)));
          __asm
          {
            FCVT            S15, H15
            FCVT            S21, H21
          }
          _H22 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v31 * (float)v16, 0.0), 8191.0)));
          __asm { FCVT            S22, H22 }
          _H24 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v31 * (float)LODWORD(_S24), 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          _S5 = (float)((float)(v127 * _S19) + (float)(_S18 * v129)) + (float)(_S20 * v37);
          _S3 = (float)((float)(v39 * _S19) + (float)(_S18 * v38)) + (float)(_S20 * v40);
          v96 = (float)((float)(v43 * _S19) + (float)(_S18 * v41)) + (float)(_S20 * v42);
          v97 = (float)((float)(v127 * _S11) + (float)(_S10 * v129)) + (float)(_S12 * v37);
          v98 = (float)((float)(v39 * _S11) + (float)(_S10 * v38)) + (float)(_S12 * v40);
          v99 = (float)((float)(v43 * _S11) + (float)(_S10 * v41)) + (float)(_S12 * v42);
          v100 = (float)((float)(v127 * _S14) + (float)(_S13 * v129)) + (float)(_S15 * v37);
          v101 = (float)((float)(v39 * _S14) + (float)(_S13 * v38)) + (float)(_S15 * v40);
          _S6 = (float)((float)(v43 * _S14) + (float)(_S13 * v41)) + (float)(_S15 * v42);
          LOWORD(_S5) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S10, H5 }
          LOWORD(_S3) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          __asm { FCVT            S11, H3 }
          LOWORD(_S3) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v96, 0.0), 8191.0)));
          LOWORD(_S5) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v97, 0.0), 8191.0)));
          __asm
          {
            FCVT            S12, H3
            FCVT            S13, H5
          }
          LOWORD(_S3) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          __asm { FCVT            S15, H3 }
          LOWORD(_S3) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v99, 0.0), 8191.0)));
          __asm { FCVT            S14, H3 }
          LOWORD(_S3) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v100, 0.0), 8191.0)));
          __asm { FCVT            S18, H3 }
          LOWORD(_S3) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v101, 0.0), 8191.0)));
          __asm { FCVT            S19, H3 }
          LOWORD(_S3) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          LOWORD(_S5) = *(_WORD *)(v45
                                 + 2
                                 * llroundf(fminf(fmaxf((float)((float)(v127 * _S22) + (float)(_S21 * v129)) + (float)(_S24 * v37), 0.0), 8191.0)));
          __asm
          {
            FCVT            S20, H3
            FCVT            S3, H5
          }
          LOWORD(_S5) = *(_WORD *)(v45
                                 + 2
                                 * llroundf(fminf(fmaxf((float)((float)(v39 * _S22) + (float)(_S21 * v38)) + (float)(_S24 * v40), 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = *(_WORD *)(v45
                                 + 2
                                 * llroundf(fminf(fmaxf((float)((float)(v43 * _S22) + (float)(_S21 * v41)) + (float)(_S24 * v42), 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          v15 = LODWORD(v136);
          v16 = LODWORD(v135);
          v111 = (float)((float)((float)(v136 * _S11) + (float)(v137 * _S10)) + (float)(v135 * _S12)) + v32;
          if (v111 < v32)
            v112 = v32;
          else
            v112 = (float)((float)((float)(v136 * _S11) + (float)(v137 * _S10)) + (float)(v135 * _S12)) + v32;
          v113 = v111 <= v33;
          v114 = (float)((float)((float)(v136 * _S15) + (float)(v137 * _S13)) + (float)(v135 * _S14)) + v32;
          if (!v113)
            v112 = v33;
          v115 = llroundf(v112);
          if (v114 < v32)
            v116 = v32;
          else
            v116 = (float)((float)((float)(v136 * _S15) + (float)(v137 * _S13)) + (float)(v135 * _S14)) + v32;
          v113 = v114 <= v33;
          v117 = (float)((float)((float)(v136 * _S19) + (float)(v137 * _S18)) + (float)(v135 * _S20)) + v32;
          if (!v113)
            v116 = v33;
          v118 = llroundf(v116);
          if (v117 < v32)
            v119 = v32;
          else
            v119 = (float)((float)((float)(v136 * _S19) + (float)(v137 * _S18)) + (float)(v135 * _S20)) + v32;
          v113 = v117 <= v33;
          v120 = (float)((float)((float)(v136 * _S5) + (float)(v137 * _S3)) + (float)(v135 * _S6)) + v32;
          if (!v113)
            v119 = v33;
          v121 = llroundf(v119);
          if (v120 < v32)
            v122 = v32;
          else
            v122 = (float)((float)((float)(v136 * _S5) + (float)(v137 * _S3)) + (float)(v135 * _S6)) + v32;
          if (v120 <= v33)
            v123 = v122;
          else
            v123 = v33;
          v124 = (float)((float)(_S10 + _S13) + _S18) + _S3;
          v125 = (float)((float)(_S11 + _S15) + _S19) + _S5;
          *(_WORD *)result = v115 << v61;
          *((_WORD *)result + 1) = v118 << v61;
          *(_WORD *)v66 = v121 << v61;
          *((_WORD *)v66 + 1) = llroundf(v123) << v61;
          v9 = v139;
          v35 = (float)((float)(_S12 + _S14) + _S20) + _S6;
          v10 = (float)((float)(v140 + (float)(v124 * v134)) + (float)(v125 * v133)) + (float)(v35 * v132);
          if (v10 <= v139)
          {
            v9 = (float)((float)(v140 + (float)(v124 * v134)) + (float)(v125 * v133)) + (float)(v35 * v132);
            if (v10 < v138)
              v9 = v138;
          }
          v126 = (_WORD *)(v60 + 2 * v64);
          v34 = (float)((float)(v140 + (float)(v124 * v131)) + (float)(v125 * v130)) + (float)(v35 * v128);
          *v126 = llroundf(v9) << v61;
          v36 = v139;
          if (v34 <= v139)
          {
            v36 = v34;
            if (v34 < v138)
              v36 = v138;
          }
          v50 += 8;
          v65 += 8;
          result += 4;
          v66 += 4;
          v126[1] = llroundf(v36) << v61;
          v64 += 2;
        }
        while (v23 > v64);
      }
      v50 = v63 + v28;
      result = &v62[v29];
      v60 += v30;
      v22 += 2;
    }
    while (v25 > v22);
  }
  return result;
}

uint64_t vt_Copy_BGRA_rgb_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_rgb_xf420_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_rgb_xf420_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  unsigned int v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char *v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  _WORD *v85;

  v17 = *(_QWORD *)(result + 28);
  v18 = 2 * *result;
  v19 = v17 * a2 / v18;
  v20 = (v17 + v17 * a2) / v18;
  if (2 * v20 != 2 * v19)
  {
    v21 = 0;
    v22 = *(_QWORD *)(result + 20);
    v23 = *(_QWORD *)(result + 44) + 2 * v19;
    v24 = 2 * v20 - 2 * v19;
    v25 = *((_QWORD *)result + 19);
    v26 = (uint64_t *)*((_QWORD *)result + 17);
    v27 = **((_QWORD **)result + 8);
    v28 = *v26;
    v29 = v26[1];
    *(float *)&v30 = (float)*(unsigned int *)(v25 + 136);
    v31 = *(float *)&v30 / (float)*(unsigned int *)(v25 + 128);
    LOWORD(v30) = *(_WORD *)(v25 + 144);
    v32 = (float)v30;
    LOWORD(a5) = *(_WORD *)(v25 + 146);
    v33 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v25 + 148);
    v34 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v25 + 150);
    v35 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v25 + 152);
    v36 = (float)LODWORD(a8);
    v37 = *(float *)(v25 + 36);
    v38 = *(float *)(v25 + 40);
    v39 = *(float *)(v25 + 44);
    v40 = *(float *)(v25 + 48) * 0.25;
    v41 = *(float *)(v25 + 52) * 0.25;
    v42 = *(float *)(v25 + 56) * 0.25;
    v43 = *(float *)(v25 + 60) * 0.25;
    v44 = *(float *)(v25 + 64) * 0.25;
    v45 = *(float *)(v25 + 68);
    v46 = v45 * 0.25;
    v47 = *((_QWORD *)result + 14);
    v48 = (uint64_t *)*((_QWORD *)result + 16);
    v49 = *((_QWORD *)result + 15) + 2 * (*((_QWORD *)result + 13) * a2 / v18);
    v50 = **((_QWORD **)result + 7) + v27 * v23 + 4 * *(_QWORD *)(result + 36);
    v51 = *v48;
    v52 = v48[1];
    v53 = (char *)(v51 + v49 * v28 + 2 * v47);
    v54 = *(unsigned __int8 *)(v25 + 132);
    if (v54 >= 0x11)
      v55 = 0;
    else
      v55 = 16 - v54;
    v56 = *(unsigned __int8 *)(v25 + 156);
    if (v49 >= 0)
      v57 = v49;
    else
      v57 = v49 + 1;
    v58 = v52 + (v57 >> 1) * v29;
    v59 = *(unsigned __int8 *)(v25 + 155);
    result = (unsigned __int8 *)*(unsigned __int8 *)(v25 + 154);
    v60 = v58 + 2 * v47;
    v61 = v55;
    do
    {
      v62 = &v53[v28];
      v63 = v50 + v27;
      if (v22)
      {
        v64 = 0;
        v65 = v50 + v27;
        v66 = &v53[v28];
        do
        {
          LOBYTE(v45) = result[v50];
          v67 = v31 * (float)LODWORD(v45);
          LOBYTE(v11) = *(_BYTE *)(v50 + v59);
          v68 = v31 * (float)LODWORD(v11);
          LOBYTE(v12) = *(_BYTE *)(v50 + v56);
          v69 = v31 * (float)LODWORD(v12);
          LOBYTE(v13) = result[v50 + 4];
          v70 = v31 * (float)LODWORD(v13);
          LOBYTE(v14) = *(_BYTE *)(v50 + 4 + v59);
          LOBYTE(v15) = *(_BYTE *)(v50 + 4 + v56);
          v71 = v31 * (float)LODWORD(v14);
          v72 = v31 * (float)LODWORD(v15);
          LOBYTE(v15) = result[v65];
          v15 = v31 * (float)LODWORD(v15);
          LOBYTE(v16) = *(_BYTE *)(v65 + v59);
          LOBYTE(v8) = *(_BYTE *)(v65 + v56);
          v73 = v31 * (float)LODWORD(v16);
          v16 = v31 * (float)LODWORD(v8);
          LOBYTE(v8) = result[v65 + 4];
          v8 = v31 * (float)LODWORD(v8);
          LOBYTE(v9) = *(_BYTE *)(v65 + 4 + v59);
          v9 = v31 * (float)LODWORD(v9);
          LOBYTE(v10) = *(_BYTE *)(v65 + 4 + v56);
          v10 = v31 * (float)LODWORD(v10);
          v74 = (float)((float)((float)(v38 * v68) + (float)(v37 * v67)) + (float)(v39 * v69)) + v32;
          v75 = (float)((float)((float)(v38 * v71) + (float)(v37 * v70)) + (float)(v39 * v72)) + v32;
          v76 = (float)((float)((float)(v38 * v73) + (float)(v37 * v15)) + (float)(v39 * v16)) + v32;
          v77 = (float)((float)((float)(v38 * v9) + (float)(v37 * v8)) + (float)(v39 * v10)) + v32;
          if (v74 < v32)
            v78 = v32;
          else
            v78 = (float)((float)((float)(v38 * v68) + (float)(v37 * v67)) + (float)(v39 * v69)) + v32;
          if (v74 <= v34)
            v79 = v78;
          else
            v79 = v34;
          *(_WORD *)v53 = llroundf(v79) << v61;
          if (v75 < v32)
            v80 = v32;
          else
            v80 = (float)((float)((float)(v38 * v71) + (float)(v37 * v70)) + (float)(v39 * v72)) + v32;
          if (v75 > v34)
            v80 = v34;
          *((_WORD *)v53 + 1) = llroundf(v80) << v61;
          if (v76 < v32)
            v81 = v32;
          else
            v81 = (float)((float)((float)(v38 * v73) + (float)(v37 * v15)) + (float)(v39 * v16)) + v32;
          if (v76 > v34)
            v81 = v34;
          *(_WORD *)v66 = llroundf(v81) << v61;
          if (v77 < v32)
            v82 = v32;
          else
            v82 = (float)((float)((float)(v38 * v9) + (float)(v37 * v8)) + (float)(v39 * v10)) + v32;
          if (v77 > v34)
            v82 = v34;
          *((_WORD *)v66 + 1) = llroundf(v82) << v61;
          v83 = (float)((float)(v67 + v70) + v15) + v8;
          v84 = (float)((float)(v68 + v71) + v73) + v9;
          v12 = (float)((float)(v69 + v72) + v16) + v10;
          v14 = (float)((float)(v33 + (float)(v83 * v40)) + (float)(v84 * v41)) + (float)(v12 * v42);
          v13 = v36;
          if (v14 <= v36)
          {
            v13 = (float)((float)(v33 + (float)(v83 * v40)) + (float)(v84 * v41)) + (float)(v12 * v42);
            if (v14 < v35)
              v13 = v35;
          }
          v85 = (_WORD *)(v60 + 2 * v64);
          v11 = (float)((float)(v33 + (float)(v83 * v43)) + (float)(v84 * v44)) + (float)(v12 * v46);
          *v85 = llroundf(v13) << v61;
          v45 = v36;
          if (v11 <= v36)
          {
            v45 = v11;
            if (v11 < v35)
              v45 = v35;
          }
          v50 += 8;
          v65 += 8;
          v53 += 4;
          v66 += 4;
          v85[1] = llroundf(v45) << v61;
          v64 += 2;
        }
        while (v22 > v64);
      }
      v50 = v63 + v27;
      v53 = &v62[v28];
      v60 += v29;
      v21 += 2;
    }
    while (v24 > v21);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Tone_Mat_TRC_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v20 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v18 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Tone_Mat_TRC_422vf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_TRC_Tone_Mat_TRC_422vf_GCD(unsigned __int8 *result, uint64_t a2)
{
  float v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  float v19;
  float v20;
  float v21;
  float v22;
  unsigned int v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float v43;
  float v44;
  float v45;
  float v46;
  uint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int8 *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  unint64_t v61;
  unsigned __int8 *v62;
  _BYTE *v63;
  uint64_t v64;
  float v75;
  float v76;
  unsigned int v77;
  float v78;
  float v80;
  float v86;
  float v87;
  float v90;
  float v91;
  float v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  float v99;
  float v101;
  float v104;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;

  v3 = *(_QWORD *)(result + 28);
  v4 = *result;
  v5 = v3 * a2 / v4;
  v6 = (v3 + v3 * a2) / v4;
  if (v6 != v5)
  {
    v7 = 0;
    v8 = *(_QWORD *)(result + 20);
    v9 = v5 + *(_QWORD *)(result + 44);
    v10 = v6 - v5;
    v11 = *((_QWORD *)result + 19);
    v12 = (uint64_t *)*((_QWORD *)result + 17);
    v13 = (_QWORD *)*((_QWORD *)result + 7);
    v14 = **((_QWORD **)result + 8);
    v15 = *v12;
    v16 = v12[1];
    v17 = v12[2];
    *(float *)&v18 = (float)*(unsigned int *)(v11 + 128);
    v19 = 8191.0 / *(float *)&v18;
    LOWORD(v18) = *(_WORD *)(v11 + 144);
    v20 = (float)v18;
    LOWORD(v18) = *(_WORD *)(v11 + 146);
    v21 = (float)v18;
    LOWORD(v18) = *(_WORD *)(v11 + 148);
    v22 = (float)v18;
    LOWORD(v18) = *(_WORD *)(v11 + 150);
    *(float *)&v23 = (float)v18;
    v130 = *(float *)&v23;
    LOWORD(v23) = *(_WORD *)(v11 + 152);
    v24 = (float)v23;
    v25 = *(float *)(v11 + 36);
    v26 = *(float *)(v11 + 40);
    v27 = *(float *)(v11 + 44);
    v28 = 0.5;
    v129 = *(float *)(v11 + 48) * 0.5;
    v128 = *(float *)(v11 + 52) * 0.5;
    v127 = *(float *)(v11 + 56) * 0.5;
    v29 = *(float *)(v11 + 64);
    v126 = *(float *)(v11 + 60) * 0.5;
    v125 = v29 * 0.5;
    v30 = *(float *)(v11 + 72);
    v31 = *(float *)(v11 + 68) * 0.5;
    v124 = v31;
    v32 = *(float *)(v11 + 76);
    v33 = *(float *)(v11 + 80);
    v34 = *(float *)(v11 + 84);
    v35 = *(float *)(v11 + 88);
    v36 = *(float *)(v11 + 92);
    v37 = *(float *)(v11 + 96);
    v39 = *(float *)(v11 + 100);
    v38 = *(float *)(v11 + 104);
    v40 = v11 + 164;
    v41 = v11 + 16548;
    v42 = v11 + 32932;
    v43 = *(float *)(v11 + 108);
    v44 = *(float *)(v11 + 112);
    v45 = *(float *)(v11 + 116);
    v46 = *(float *)(v11 + 120);
    v47 = (uint64_t *)*((_QWORD *)result + 16);
    v48 = *((_QWORD *)result + 14);
    v49 = *((_QWORD *)result + 13) * a2 / v4 + *((_QWORD *)result + 15);
    v50 = *(_QWORD *)(result + 36);
    result = (unsigned __int8 *)*(unsigned __int8 *)(v11 + 157);
    v51 = *(unsigned __int8 *)(v11 + 156);
    v52 = *(unsigned __int8 *)(v11 + 155);
    v53 = *(unsigned __int8 *)(v11 + 154);
    v54 = v47[2];
    if (v54)
      v55 = (unsigned __int8 *)(v54 + v49 * v17 + v48);
    else
      v55 = 0;
    v57 = *v47;
    v56 = v47[1];
    v58 = v56 + v49 * v16 + v48;
    if (!v56)
      v58 = 0;
    v59 = (_BYTE *)(v57 + v49 * v15 + v48);
    v60 = *v13 + v14 * v9 + 4 * v50;
    do
    {
      if (v8)
      {
        v61 = 0;
        v62 = v55;
        v63 = v59;
        v64 = v60;
        do
        {
          LOBYTE(v31) = *(_BYTE *)(v64 + v53);
          LOBYTE(v28) = *(_BYTE *)(v64 + v52);
          LOBYTE(v29) = *(_BYTE *)(v64 + v51);
          _H0 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v19 * (float)LODWORD(v31), 0.0), 8191.0)));
          __asm { FCVT            S14, H0 }
          _H0 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v19 * (float)LODWORD(v28), 0.0), 8191.0)));
          __asm { FCVT            S15, H0 }
          _H0 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v19 * (float)LODWORD(v29), 0.0), 8191.0)));
          __asm { FCVT            S18, H0 }
          v75 = (float)((float)((float)(v44 * _S15) + (float)(v43 * _S14)) + (float)(v45 * _S18))
              + (float)(v46 * fmaxf(_S14, fmaxf(_S15, _S18)));
          v76 = 8191.0;
          if (v75 <= 8191.0)
          {
            v76 = v75;
            if (v75 < 0.0)
              v76 = 0.0;
          }
          LOBYTE(v75) = *(_BYTE *)(v64 + 4 + v53);
          LOBYTE(v2) = *(_BYTE *)(v64 + 4 + v52);
          *(float *)&v77 = (float)LODWORD(v2);
          v78 = v19 * *(float *)&v77;
          LOBYTE(v77) = *(_BYTE *)(v64 + 4 + v51);
          _H0 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v19 * (float)LODWORD(v75), 0.0), 8191.0)));
          v80 = v19 * (float)v77;
          __asm { FCVT            S20, H0 }
          _H0 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          __asm { FCVT            S21, H0 }
          _H0 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S22, H0 }
          v86 = (float)((float)((float)(v44 * _S21) + (float)(v43 * _S20)) + (float)(v45 * _S22))
              + (float)(v46 * fmaxf(_S20, fmaxf(_S21, _S22)));
          v87 = 8191.0;
          if (v86 <= 8191.0)
          {
            v87 = v86;
            if (v86 < 0.0)
              v87 = 0.0;
          }
          _H0 = *(_WORD *)(v41 + 2 * llroundf(v76));
          __asm { FCVT            S0, H0 }
          v90 = _S14 * _S0;
          v91 = _S15 * _S0;
          v92 = _S18 * _S0;
          v93 = result[v64];
          v94 = result[v64 + 4];
          _H18 = *(_WORD *)(v41 + 2 * llroundf(v87));
          __asm { FCVT            S18, H18 }
          _S20 = _S20 * _S18;
          _S21 = _S21 * _S18;
          v99 = _S22 * _S18;
          _S22 = (float)((float)(v32 * v91) + (float)(v90 * v30)) + (float)(v92 * v33);
          v101 = (float)((float)(v35 * v91) + (float)(v90 * v34)) + (float)(v92 * v36);
          _S0 = (float)((float)(v39 * v91) + (float)(v90 * v37)) + (float)(v92 * v38);
          _S19 = (float)((float)(v32 * _S21) + (float)(_S20 * v30)) + (float)(v99 * v33);
          v104 = (float)((float)(v35 * _S21) + (float)(_S20 * v34)) + (float)(v99 * v36);
          _S18 = (float)((float)(v39 * _S21) + (float)(_S20 * v37)) + (float)(v99 * v38);
          LOWORD(_S20) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(_S22, 0.0), 8191.0)));
          LOWORD(_S21) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v101, 0.0), 8191.0)));
          __asm
          {
            FCVT            S20, H20
            FCVT            S21, H21
          }
          LOWORD(_S0) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          LOWORD(_S19) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          LOWORD(_S22) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v104, 0.0), 8191.0)));
          __asm { FCVT            S22, H22 }
          LOWORD(_S18) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(_S18, 0.0), 8191.0)));
          __asm { FCVT            S24, H18 }
          v112 = (float)((float)((float)(v26 * _S21) + (float)(v25 * _S20)) + (float)(v27 * _S0)) + v20;
          v113 = (float)((float)((float)(v26 * _S22) + (float)(v25 * _S19)) + (float)(v27 * _S24)) + v20;
          if (v112 < v20)
            v114 = v20;
          else
            v114 = (float)((float)((float)(v26 * _S21) + (float)(v25 * _S20)) + (float)(v27 * _S0)) + v20;
          if (v112 <= v22)
            v115 = v114;
          else
            v115 = v22;
          *v63 = llroundf(v115);
          if (v113 < v20)
            v116 = v20;
          else
            v116 = (float)((float)((float)(v26 * _S22) + (float)(v25 * _S19)) + (float)(v27 * _S24)) + v20;
          if (v113 > v22)
            v116 = v22;
          v63[1] = llroundf(v116);
          v117 = _S20 + _S19;
          v118 = v21 + (float)((float)(_S20 + _S19) * v129);
          v119 = _S21 + _S22;
          v120 = v118 + (float)((float)(_S21 + _S22) * v128);
          v2 = _S0 + _S24;
          v121 = v120 + (float)((float)(_S0 + _S24) * v127);
          v122 = v24;
          if (v121 <= v24)
          {
            v122 = v121;
            if (v121 < v130)
              v122 = v130;
          }
          v123 = (float)(v21 + (float)(v117 * v126)) + (float)(v119 * v125);
          v29 = v124;
          v28 = v123 + (float)(v2 * v124);
          *(_BYTE *)(v58 + v61) = llroundf(v122);
          v31 = v24;
          if (v28 <= v24)
          {
            v31 = v28;
            if (v28 < v130)
              v31 = v130;
          }
          *(_BYTE *)(v58 + v61 + 1) = llroundf(v31);
          if (v62)
          {
            *v62 = v93;
            v62[1] = v94;
            v62 += 2;
          }
          v64 += 8;
          v61 += 2;
          v63 += 2;
        }
        while (v8 > v61);
      }
      v60 += v14;
      v59 += v15;
      v58 += v16;
      v55 += v17;
      ++v7;
    }
    while (v7 != v10);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Mat_TRC_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v20 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v18 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Mat_TRC_422vf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_TRC_Mat_TRC_422vf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  _BYTE *v70;
  char v71;
  char v72;
  float v94;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;

  v15 = *(_QWORD *)(result + 28);
  v16 = *result;
  v17 = v15 * a2 / v16;
  v18 = (v15 + v15 * a2) / v16;
  if (v18 != v17)
  {
    v19 = 0;
    v20 = *(_QWORD *)(result + 20);
    v21 = v17 + *(_QWORD *)(result + 44);
    v22 = v18 - v17;
    v23 = *((_QWORD *)result + 19);
    v24 = (uint64_t *)*((_QWORD *)result + 17);
    v25 = (_QWORD *)*((_QWORD *)result + 7);
    v26 = **((_QWORD **)result + 8);
    v27 = *v24;
    v28 = v24[1];
    v29 = v24[2];
    v30 = 8191.0 / (float)*(unsigned int *)(v23 + 128);
    LOWORD(a5) = *(_WORD *)(v23 + 144);
    v31 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v23 + 146);
    v32 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v23 + 148);
    v33 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v23 + 150);
    v34 = (float)LODWORD(a8);
    LOWORD(a9) = *(_WORD *)(v23 + 152);
    v35 = (float)LODWORD(a9);
    v36 = *(float *)(v23 + 36);
    v37 = *(float *)(v23 + 40);
    v38 = *(float *)(v23 + 44);
    v107 = *(float *)(v23 + 52) * 0.5;
    v108 = *(float *)(v23 + 48) * 0.5;
    v106 = *(float *)(v23 + 56) * 0.5;
    v39 = *(float *)(v23 + 60) * 0.5;
    v40 = *(float *)(v23 + 64) * 0.5;
    v41 = *(float *)(v23 + 72);
    v42 = *(float *)(v23 + 68) * 0.5;
    v43 = *(float *)(v23 + 76);
    v44 = *(float *)(v23 + 80);
    v45 = *(float *)(v23 + 84);
    v46 = *(float *)(v23 + 88);
    v47 = *(float *)(v23 + 92);
    v48 = *(float *)(v23 + 96);
    v50 = *(float *)(v23 + 100);
    v49 = *(float *)(v23 + 104);
    v51 = v23 + 164;
    v52 = v23 + 16548;
    v53 = (uint64_t *)*((_QWORD *)result + 16);
    v54 = *((_QWORD *)result + 14);
    v55 = *((_QWORD *)result + 13) * a2 / v16 + *((_QWORD *)result + 15);
    v56 = *(_QWORD *)(result + 36);
    v57 = *(unsigned __int8 *)(v23 + 157);
    result = (unsigned __int8 *)*(unsigned __int8 *)(v23 + 156);
    v58 = *(unsigned __int8 *)(v23 + 155);
    v59 = *(unsigned __int8 *)(v23 + 154);
    v60 = v53[2];
    if (v60)
      v61 = (_BYTE *)(v60 + v55 * v29 + v54);
    else
      v61 = 0;
    v63 = *v53;
    v62 = v53[1];
    v64 = v62 + v55 * v28 + v54;
    if (!v62)
      v64 = 0;
    v65 = (_BYTE *)(v63 + v55 * v27 + v54);
    v66 = *v25 + v26 * v21 + 4 * v56;
    do
    {
      if (v20)
      {
        v67 = 0;
        v68 = v66;
        v69 = v61;
        v70 = v65;
        do
        {
          LOBYTE(v9) = *(_BYTE *)(v68 + v59);
          LOBYTE(v10) = *(_BYTE *)(v68 + v58);
          LOBYTE(v11) = result[v68];
          v71 = *(_BYTE *)(v68 + v57);
          LOBYTE(v12) = *(_BYTE *)(v68 + 4 + v59);
          LOBYTE(v13) = *(_BYTE *)(v68 + 4 + v58);
          LOBYTE(v14) = result[v68 + 4];
          v72 = *(_BYTE *)(v68 + 4 + v57);
          _H10 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v30 * (float)LODWORD(v9), 0.0), 8191.0)));
          _H11 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v30 * (float)LODWORD(v10), 0.0), 8191.0)));
          __asm
          {
            FCVT            S10, H10
            FCVT            S11, H11
          }
          _H12 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v30 * (float)LODWORD(v11), 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          _H13 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v30 * (float)LODWORD(v12), 0.0), 8191.0)));
          __asm { FCVT            S13, H13 }
          _H14 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v30 * (float)LODWORD(v13), 0.0), 8191.0)));
          __asm { FCVT            S14, H14 }
          _H15 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v30 * (float)LODWORD(v14), 0.0), 8191.0)));
          __asm { FCVT            S15, H15 }
          _S18 = (float)((float)(v43 * _S11) + (float)(_S10 * v41)) + (float)(_S12 * v44);
          _S19 = (float)((float)(v46 * _S11) + (float)(_S10 * v45)) + (float)(_S12 * v47);
          _S10 = (float)((float)(v50 * _S11) + (float)(_S10 * v48)) + (float)(_S12 * v49);
          _S11 = (float)((float)(v43 * _S14) + (float)(_S13 * v41)) + (float)(_S15 * v44);
          _S12 = (float)((float)(v46 * _S14) + (float)(_S13 * v45)) + (float)(_S15 * v47);
          v94 = (float)((float)(v50 * _S14) + (float)(_S13 * v48)) + (float)(_S15 * v49);
          LOWORD(_S18) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S18, 0.0), 8191.0)));
          LOWORD(_S19) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0)));
          __asm
          {
            FCVT            S18, H18
            FCVT            S19, H19
          }
          LOWORD(_S10) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S10, 0.0), 8191.0)));
          __asm { FCVT            S14, H10 }
          LOWORD(_S10) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S11, 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          LOWORD(_S11) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S12, 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          LOWORD(_S12) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          v101 = (float)((float)((float)(v37 * _S19) + (float)(v36 * _S18)) + (float)(v38 * _S14)) + v31;
          v14 = (float)((float)((float)(v37 * _S11) + (float)(v36 * _S10)) + (float)(v38 * _S12)) + v31;
          if (v101 < v31)
            v102 = v31;
          else
            v102 = (float)((float)((float)(v37 * _S19) + (float)(v36 * _S18)) + (float)(v38 * _S14)) + v31;
          if (v101 > v33)
            v102 = v33;
          *v70 = llroundf(v102);
          if (v14 < v31)
            v103 = v31;
          else
            v103 = (float)((float)((float)(v37 * _S11) + (float)(v36 * _S10)) + (float)(v38 * _S12)) + v31;
          if (v14 > v33)
            v103 = v33;
          v70[1] = llroundf(v103);
          v104 = _S18 + _S10;
          v105 = _S19 + _S11;
          v11 = _S14 + _S12;
          v13 = (float)((float)(v32 + (float)(v104 * v108)) + (float)(v105 * v107)) + (float)(v11 * v106);
          v12 = v35;
          if (v13 <= v35)
          {
            v12 = (float)((float)(v32 + (float)(v104 * v108)) + (float)(v105 * v107)) + (float)(v11 * v106);
            if (v13 < v34)
              v12 = v34;
          }
          v9 = (float)((float)(v32 + (float)(v104 * v39)) + (float)(v105 * v40)) + (float)(v11 * v42);
          *(_BYTE *)(v64 + v67) = llroundf(v12);
          v10 = v35;
          if (v9 <= v35)
          {
            v10 = v9;
            if (v9 < v34)
              v10 = v34;
          }
          *(_BYTE *)(v64 + v67 + 1) = llroundf(v10);
          if (v69)
          {
            *v69 = v71;
            v69[1] = v72;
            v69 += 2;
          }
          v68 += 8;
          v67 += 2;
          v70 += 2;
        }
        while (v20 > v67);
      }
      v66 += v26;
      v65 += v27;
      v64 += v28;
      v61 += v29;
      ++v19;
    }
    while (v19 != v22);
  }
  return result;
}

uint64_t vt_Copy_BGRA_rgb_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v20 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v18 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_rgb_422vf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_rgb_422vf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  BOOL v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  _BYTE *v64;
  float v65;
  float v66;
  float v67;
  char v68;
  float v69;
  float v70;
  char v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;

  v13 = *(_QWORD *)(result + 28);
  v14 = *result;
  v15 = v13 * a2 / v14;
  v16 = (v13 + v13 * a2) / v14;
  if (v16 != v15)
  {
    v17 = 0;
    v18 = *(_QWORD *)(result + 20);
    v19 = v15 + *(_QWORD *)(result + 44);
    v20 = v16 - v15;
    v21 = *((_QWORD *)result + 19);
    v22 = (uint64_t *)*((_QWORD *)result + 17);
    v23 = (_QWORD *)*((_QWORD *)result + 7);
    v24 = **((_QWORD **)result + 8);
    v25 = *v22;
    v26 = v22[1];
    v27 = v22[2];
    *(float *)&v28 = (float)*(unsigned int *)(v21 + 136);
    v29 = *(float *)&v28 / (float)*(unsigned int *)(v21 + 128);
    LOWORD(v28) = *(_WORD *)(v21 + 144);
    v30 = (float)v28;
    LOWORD(a5) = *(_WORD *)(v21 + 146);
    v31 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v21 + 148);
    v32 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v21 + 150);
    v33 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v21 + 152);
    v34 = (float)LODWORD(a8);
    v35 = *(float *)(v21 + 36);
    v36 = *(float *)(v21 + 40);
    v37 = *(float *)(v21 + 44);
    v38 = *(float *)(v21 + 48) * 0.5;
    v39 = *(float *)(v21 + 52) * 0.5;
    v40 = *(float *)(v21 + 56) * 0.5;
    v41 = *(float *)(v21 + 60) * 0.5;
    v42 = *(float *)(v21 + 64) * 0.5;
    v43 = *(float *)(v21 + 68);
    v44 = v43 * 0.5;
    v45 = (_QWORD *)*((_QWORD *)result + 16);
    v46 = *((_QWORD *)result + 14);
    v47 = *((_QWORD *)result + 13) * a2 / v14 + *((_QWORD *)result + 15);
    v48 = *(_QWORD *)(result + 36);
    v49 = *(unsigned __int8 *)(v21 + 157);
    v50 = *(unsigned __int8 *)(v21 + 156);
    v51 = *(unsigned __int8 *)(v21 + 155);
    result = (unsigned __int8 *)*(unsigned __int8 *)(v21 + 154);
    v52 = v45[2];
    if (v52)
      v53 = (_BYTE *)(v52 + v47 * v27 + v46);
    else
      v53 = 0;
    v56 = v45;
    v55 = *v45;
    v54 = v56[1];
    v57 = v54 == 0;
    v58 = v54 + v47 * v26 + v46;
    if (v57)
      v58 = 0;
    v59 = (_BYTE *)(v55 + v47 * v25 + v46);
    v60 = *v23 + v24 * v19 + 4 * v48;
    do
    {
      if (v18)
      {
        v61 = 0;
        v62 = v60;
        v63 = v53;
        v64 = v59;
        do
        {
          LOBYTE(v43) = result[v62];
          LOBYTE(v8) = *(_BYTE *)(v62 + v51);
          v65 = v29 * (float)LODWORD(v43);
          v66 = v29 * (float)LODWORD(v8);
          LOBYTE(v9) = *(_BYTE *)(v62 + v50);
          v67 = v29 * (float)LODWORD(v9);
          v68 = *(_BYTE *)(v62 + v49);
          LOBYTE(v10) = result[v62 + 4];
          v69 = v29 * (float)LODWORD(v10);
          LOBYTE(v11) = *(_BYTE *)(v62 + 4 + v51);
          v70 = v29 * (float)LODWORD(v11);
          LOBYTE(v12) = *(_BYTE *)(v62 + 4 + v50);
          v12 = v29 * (float)LODWORD(v12);
          v71 = *(_BYTE *)(v62 + 4 + v49);
          v72 = (float)((float)((float)(v36 * v66) + (float)(v35 * v65)) + (float)(v37 * v67)) + v30;
          v73 = (float)((float)((float)(v36 * v70) + (float)(v35 * v69)) + (float)(v37 * v12)) + v30;
          if (v72 < v30)
            v74 = v30;
          else
            v74 = (float)((float)((float)(v36 * v66) + (float)(v35 * v65)) + (float)(v37 * v67)) + v30;
          if (v72 <= v32)
            v75 = v74;
          else
            v75 = v32;
          *v64 = llroundf(v75);
          if (v73 < v30)
            v76 = v30;
          else
            v76 = (float)((float)((float)(v36 * v70) + (float)(v35 * v69)) + (float)(v37 * v12)) + v30;
          if (v73 > v32)
            v76 = v32;
          v64[1] = llroundf(v76);
          v77 = v65 + v69;
          v78 = v66 + v70;
          v9 = v67 + v12;
          v11 = (float)((float)(v31 + (float)(v77 * v38)) + (float)(v78 * v39)) + (float)(v9 * v40);
          v10 = v34;
          if (v11 <= v34)
          {
            v10 = (float)((float)(v31 + (float)(v77 * v38)) + (float)(v78 * v39)) + (float)(v9 * v40);
            if (v11 < v33)
              v10 = v33;
          }
          v43 = (float)((float)(v31 + (float)(v77 * v41)) + (float)(v78 * v42)) + (float)(v9 * v44);
          *(_BYTE *)(v58 + v61) = llroundf(v10);
          v8 = v34;
          if (v43 <= v34)
          {
            v8 = v43;
            if (v43 < v33)
              v8 = v33;
          }
          *(_BYTE *)(v58 + v61 + 1) = llroundf(v8);
          if (v63)
          {
            *v63 = v68;
            v63[1] = v71;
            v63 += 2;
          }
          v62 += 8;
          v61 += 2;
          v64 += 2;
        }
        while (v18 > v61);
      }
      v60 += v24;
      v59 += v25;
      v58 += v26;
      v53 += v27;
      ++v17;
    }
    while (v17 != v20);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Tone_Mat_TRC_2vuyf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Tone_Mat_TRC_2vuyf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_TRC_Tone_Mat_TRC_2vuyf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  float v9;
  float v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  uint64_t v53;
  uint64_t v54;
  float v55;
  float v56;
  float v57;
  float v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _BYTE *v64;
  _BYTE *v65;
  uint64_t v66;
  float v77;
  float v78;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v94;
  float v95;
  float v97;
  float v98;
  float v100;
  float v101;
  float v102;
  float v104;
  float v105;
  unsigned int v111;
  float v112;
  float v113;
  float v114;
  float v116;
  float v117;
  float v118;
  float v119;
  BOOL v120;
  float v121;
  char v122;
  float v123;
  char v124;
  char v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;

  v11 = *(_QWORD *)(result + 28);
  v12 = *result;
  v13 = v11 * a2 / v12;
  v14 = *((_QWORD *)result + 14);
  v15 = (_QWORD *)*((_QWORD *)result + 16);
  v16 = *((_QWORD *)result + 13) * a2 / v12 + *((_QWORD *)result + 15);
  v17 = (uint64_t *)*((_QWORD *)result + 17);
  v18 = (v11 + v11 * a2) / v12;
  v19 = (_BYTE *)v15[1];
  if (v19)
    v19 += v17[1] * v16 + v14;
  if (v18 != v13)
  {
    v20 = 0;
    v21 = *(_QWORD *)(result + 44);
    v22 = v13 + v21;
    v23 = **((_QWORD **)result + 8);
    v24 = *v17;
    v25 = *((_QWORD *)result + 19);
    v26 = *v15 + v24 * v16;
    v27 = *(_QWORD *)(result + 20);
    v28 = v18 + v21;
    v29 = **((_QWORD **)result + 7) + v23 * v22 + 4 * *(_QWORD *)(result + 36);
    v30 = (_BYTE *)(v26 + v14);
    v31 = v28 - v22;
    LOWORD(a5) = *(_WORD *)(v25 + 144);
    LOWORD(a6) = *(_WORD *)(v25 + 146);
    LOWORD(a7) = *(_WORD *)(v25 + 148);
    LOWORD(a8) = *(_WORD *)(v25 + 150);
    LOWORD(a9) = *(_WORD *)(v25 + 152);
    v32 = 8191.0 / (float)*(unsigned int *)(v25 + 128);
    v33 = (float)LODWORD(a5);
    v34 = (float)LODWORD(a6);
    v35 = (float)LODWORD(a7);
    v36 = (float)LODWORD(a8);
    v37 = (float)LODWORD(a9);
    v38 = *(float *)(v25 + 36);
    v39 = *(float *)(v25 + 40);
    v40 = *(float *)(v25 + 44);
    v41 = 0.5;
    v131 = *(float *)(v25 + 48) * 0.5;
    v130 = *(float *)(v25 + 52) * 0.5;
    v129 = *(float *)(v25 + 56) * 0.5;
    v42 = *(float *)(v25 + 64);
    v128 = *(float *)(v25 + 60) * 0.5;
    v127 = v42 * 0.5;
    v43 = *(float *)(v25 + 72);
    v44 = *(float *)(v25 + 68) * 0.5;
    v126 = v44;
    v45 = *(float *)(v25 + 76);
    v46 = *(float *)(v25 + 80);
    v47 = *(float *)(v25 + 84);
    v48 = *(float *)(v25 + 88);
    v49 = *(float *)(v25 + 92);
    v50 = *(float *)(v25 + 96);
    v52 = *(float *)(v25 + 100);
    v51 = *(float *)(v25 + 104);
    v53 = v25 + 164;
    v54 = v25 + 16548;
    result = (unsigned __int8 *)(v25 + 32932);
    v55 = *(float *)(v25 + 108);
    v56 = *(float *)(v25 + 112);
    v57 = *(float *)(v25 + 116);
    v58 = *(float *)(v25 + 120);
    v59 = *(unsigned __int8 *)(v25 + 157);
    v60 = *(unsigned __int8 *)(v25 + 156);
    v61 = *(unsigned __int8 *)(v25 + 155);
    v62 = *(unsigned __int8 *)(v25 + 154);
    do
    {
      if (v27)
      {
        v63 = 0;
        v64 = v19;
        v65 = v30;
        v66 = v29;
        do
        {
          LOBYTE(v44) = *(_BYTE *)(v66 + v62);
          LOBYTE(v41) = *(_BYTE *)(v66 + v61);
          LOBYTE(v42) = *(_BYTE *)(v66 + v60);
          _H0 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v32 * (float)LODWORD(v44), 0.0), 8191.0)));
          __asm { FCVT            S14, H0 }
          _H0 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v32 * (float)LODWORD(v41), 0.0), 8191.0)));
          __asm { FCVT            S15, H0 }
          _H0 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v32 * (float)LODWORD(v42), 0.0), 8191.0)));
          __asm { FCVT            S18, H0 }
          v77 = (float)((float)((float)(v56 * _S15) + (float)(v55 * _S14)) + (float)(v57 * _S18))
              + (float)(v58 * fmaxf(_S14, fmaxf(_S15, _S18)));
          v78 = 8191.0;
          if (v77 <= 8191.0)
          {
            v78 = v77;
            if (v77 < 0.0)
              v78 = 0.0;
          }
          LOBYTE(v77) = *(_BYTE *)(v66 + 4 + v62);
          LOBYTE(v9) = *(_BYTE *)(v66 + 4 + v61);
          LOBYTE(v10) = *(_BYTE *)(v66 + 4 + v60);
          _H19 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v32 * (float)LODWORD(v77), 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          _H20 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v32 * (float)LODWORD(v9), 0.0), 8191.0)));
          _H21 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v32 * (float)LODWORD(v10), 0.0), 8191.0)));
          __asm
          {
            FCVT            S22, H20
            FCVT            S21, H21
          }
          _H0 = *(_WORD *)(v54 + 2 * llroundf(v78));
          __asm { FCVT            S0, H0 }
          v87 = _S14 * _S0;
          v88 = _S15 * _S0;
          v89 = _S18 * _S0;
          v90 = (float)((float)((float)(v56 * _S22) + (float)(v55 * _S19)) + (float)(v57 * _S21))
              + (float)(v58 * fmaxf(_S19, fmaxf(_S22, _S21)));
          v91 = 8191.0;
          if (v90 <= 8191.0)
          {
            v91 = v90;
            if (v90 < 0.0)
              v91 = 0.0;
          }
          _H18 = *(_WORD *)(v54 + 2 * llroundf(v91));
          __asm { FCVT            S18, H18 }
          v94 = _S19 * _S18;
          v95 = _S22 * _S18;
          _S18 = _S21 * _S18;
          v97 = (float)((float)(v45 * v88) + (float)(v87 * v43)) + (float)(v89 * v46);
          v98 = (float)((float)(v48 * v88) + (float)(v87 * v47)) + (float)(v89 * v49);
          _S0 = (float)((float)(v52 * v88) + (float)(v87 * v50)) + (float)(v89 * v51);
          v100 = (float)(v45 * v95) + (float)(v94 * v43);
          v101 = (float)(v48 * v95) + (float)(v94 * v47);
          v102 = (float)(v52 * v95) + (float)(v94 * v50);
          _S20 = v100 + (float)(_S18 * v46);
          v104 = v101 + (float)(_S18 * v49);
          v105 = v102 + (float)(_S18 * v51);
          LOWORD(_S18) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v97, 0.0), 8191.0))];
          __asm { FCVT            S21, H18 }
          LOWORD(_S18) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0))];
          __asm { FCVT            S22, H18 }
          LOWORD(_S0) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0))];
          __asm { FCVT            S15, H0 }
          LOWORD(_S0) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(_S20, 0.0), 8191.0))];
          LOWORD(_S20) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v104, 0.0), 8191.0))];
          __asm
          {
            FCVT            S18, H0
            FCVT            S14, H20
          }
          v111 = llroundf(fminf(fmaxf(v105, 0.0), 8191.0));
          v112 = (float)(v39 * _S22) + (float)(v38 * _S21);
          v113 = (float)(v34 + (float)((float)(_S21 + _S18) * v131)) + (float)((float)(_S22 + _S14) * v130);
          v114 = (float)(v34 + (float)((float)(_S21 + _S18) * v128)) + (float)((float)(_S22 + _S14) * v127);
          LOWORD(_S0) = *(_WORD *)&result[2 * v111];
          __asm { FCVT            S0, H0 }
          v116 = v112 + (float)(v40 * _S15);
          v117 = v113 + (float)((float)(_S15 + _S0) * v129);
          v118 = v114 + (float)((float)(_S15 + _S0) * v126);
          if (v117 < v36)
            v119 = v36;
          else
            v119 = v117;
          v120 = v117 <= v37;
          v121 = v116 + v33;
          if (!v120)
            v119 = v37;
          v122 = llroundf(v119);
          if (v121 < v33)
            v123 = v33;
          else
            v123 = v116 + v33;
          v124 = *(_BYTE *)(v66 + v59);
          v125 = *(_BYTE *)(v66 + 4 + v59);
          *v65 = v122;
          if (v121 <= v35)
            v9 = v123;
          else
            v9 = v35;
          v65[1] = llroundf(v9);
          v10 = v37;
          if (v118 <= v37)
          {
            v10 = v118;
            if (v118 < v36)
              v10 = v36;
          }
          v42 = v39 * _S14;
          v44 = (float)((float)((float)(v39 * _S14) + (float)(v38 * _S18)) + (float)(v40 * _S0)) + v33;
          v65[2] = llroundf(v10);
          v41 = v35;
          if (v44 <= v35)
          {
            v41 = v44;
            if (v44 < v33)
              v41 = v33;
          }
          v65[3] = llroundf(v41);
          if (v64)
          {
            *v64 = v124;
            v64[1] = v125;
            v64 += 2;
          }
          v66 += 8;
          v63 += 2;
          v65 += 4;
        }
        while (v27 > v63);
      }
      v29 += v23;
      v30 += v24;
      ++v20;
    }
    while (v20 != v31);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Mat_TRC_2vuyf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Mat_TRC_2vuyf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_TRC_Mat_TRC_2vuyf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  float v9;
  float v10;
  float v12;
  float v13;
  float v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unsigned __int8 *v65;
  _BYTE *v66;
  unsigned int v67;
  float v68;
  unsigned int v83;
  float v87;
  float v88;
  float v89;
  float v91;
  float v92;
  float v93;
  unsigned int v99;
  float v100;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  char v109;
  float v110;
  unsigned __int8 v111;
  unsigned __int8 v112;
  float v113;
  float v114;

  v15 = *(_QWORD *)(result + 28);
  v16 = *result;
  v17 = v15 * a2 / v16;
  v18 = *((_QWORD *)result + 14);
  v19 = (_QWORD *)*((_QWORD *)result + 16);
  v20 = *((_QWORD *)result + 13) * a2 / v16 + *((_QWORD *)result + 15);
  v21 = (uint64_t *)*((_QWORD *)result + 17);
  v22 = (v15 + v15 * a2) / v16;
  v23 = (unsigned __int8 *)v19[1];
  if (v23)
    v23 += v21[1] * v20 + v18;
  if (v22 != v17)
  {
    v24 = 0;
    v25 = *(_QWORD *)(result + 44);
    v26 = v17 + v25;
    v27 = **((_QWORD **)result + 8);
    v28 = *v21;
    v29 = *((_QWORD *)result + 19);
    v30 = *v19 + v28 * v20;
    v31 = *(_QWORD *)(result + 20);
    v32 = v22 + v25;
    v33 = **((_QWORD **)result + 7) + v27 * v26 + 4 * *(_QWORD *)(result + 36);
    v34 = (_BYTE *)(v30 + v18);
    v35 = v32 - v26;
    LOWORD(a5) = *(_WORD *)(v29 + 144);
    LOWORD(a6) = *(_WORD *)(v29 + 146);
    LOWORD(a7) = *(_WORD *)(v29 + 148);
    LOWORD(a8) = *(_WORD *)(v29 + 150);
    LOWORD(a9) = *(_WORD *)(v29 + 152);
    v36 = 8191.0 / (float)*(unsigned int *)(v29 + 128);
    v37 = (float)LODWORD(a5);
    v38 = (float)LODWORD(a6);
    v39 = (float)LODWORD(a7);
    v40 = (float)LODWORD(a8);
    v41 = (float)LODWORD(a9);
    v42 = *(float *)(v29 + 36);
    v43 = *(float *)(v29 + 40);
    v44 = *(float *)(v29 + 44);
    v113 = *(float *)(v29 + 52) * 0.5;
    v114 = *(float *)(v29 + 48) * 0.5;
    v45 = *(float *)(v29 + 56) * 0.5;
    v46 = *(float *)(v29 + 60) * 0.5;
    v47 = *(float *)(v29 + 64) * 0.5;
    v48 = *(float *)(v29 + 72);
    v49 = *(float *)(v29 + 68) * 0.5;
    v50 = *(float *)(v29 + 76);
    v51 = *(float *)(v29 + 80);
    v52 = *(float *)(v29 + 84);
    v53 = *(float *)(v29 + 88);
    v54 = *(float *)(v29 + 92);
    v55 = *(float *)(v29 + 96);
    v57 = *(float *)(v29 + 100);
    v56 = *(float *)(v29 + 104);
    v58 = v29 + 164;
    v59 = v29 + 16548;
    result = (unsigned __int8 *)*(unsigned __int8 *)(v29 + 157);
    v60 = *(unsigned __int8 *)(v29 + 156);
    v61 = *(unsigned __int8 *)(v29 + 155);
    v62 = *(unsigned __int8 *)(v29 + 154);
    do
    {
      if (v31)
      {
        v63 = 0;
        v64 = v33;
        v65 = v23;
        v66 = v34;
        do
        {
          LOBYTE(v9) = *(_BYTE *)(v64 + v62);
          LOBYTE(v10) = *(_BYTE *)(v64 + v61);
          LOBYTE(_S12) = *(_BYTE *)(v64 + v60);
          LOBYTE(v12) = *(_BYTE *)(v64 + 4 + v62);
          LOBYTE(v13) = *(_BYTE *)(v64 + 4 + v61);
          LOBYTE(v14) = *(_BYTE *)(v64 + 4 + v60);
          v67 = llroundf(fminf(fmaxf(v36 * (float)LODWORD(v9), 0.0), 8191.0));
          v68 = v36 * (float)LODWORD(v14);
          _H15 = *(_WORD *)(v58 + 2 * v67);
          __asm { FCVT            S15, H15 }
          _H11 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v36 * (float)LODWORD(v10), 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          _H12 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v36 * (float)LODWORD(_S12), 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          _H13 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v36 * (float)LODWORD(v12), 0.0), 8191.0)));
          _H14 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v36 * (float)LODWORD(v13), 0.0), 8191.0)));
          __asm
          {
            FCVT            S13, H13
            FCVT            S14, H14
          }
          v83 = llroundf(fminf(fmaxf(v68, 0.0), 8191.0));
          _S10 = (float)((float)(v50 * _S11) + (float)(_S15 * v48)) + (float)(_S12 * v51);
          _S18 = (float)((float)(v53 * _S11) + (float)(_S15 * v52)) + (float)(_S12 * v54);
          _S11 = (float)((float)(v57 * _S11) + (float)(_S15 * v55)) + (float)(_S12 * v56);
          v87 = (float)(v50 * _S14) + (float)(_S13 * v48);
          v88 = (float)(v53 * _S14) + (float)(_S13 * v52);
          v89 = (float)(v57 * _S14) + (float)(_S13 * v55);
          LOWORD(_S14) = *(_WORD *)(v58 + 2 * v83);
          __asm { FCVT            S14, H14 }
          v91 = v87 + (float)(_S14 * v51);
          v92 = v88 + (float)(_S14 * v54);
          v93 = v89 + (float)(_S14 * v56);
          LOWORD(_S10) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(_S10, 0.0), 8191.0)));
          __asm { FCVT            S14, H10 }
          LOWORD(_S18) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(_S18, 0.0), 8191.0)));
          __asm { FCVT            S18, H18 }
          LOWORD(_S10) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(_S11, 0.0), 8191.0)));
          __asm { FCVT            S19, H10 }
          LOWORD(_S10) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          LOWORD(_S11) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          __asm
          {
            FCVT            S10, H10
            FCVT            S11, H11
          }
          v99 = llroundf(fminf(fmaxf(v93, 0.0), 8191.0));
          v100 = (float)(v43 * _S18) + (float)(v42 * _S14);
          _S12 = _S14 + _S10;
          v102 = _S18 + _S11;
          v103 = (float)(v38 + (float)((float)(_S14 + _S10) * v114)) + (float)(v102 * v113);
          v104 = (float)(v38 + (float)(_S12 * v46)) + (float)(v102 * v47);
          LOWORD(_S12) = *(_WORD *)(v59 + 2 * v99);
          __asm { FCVT            S12, H12 }
          v14 = v100 + (float)(v44 * _S19);
          v105 = _S19 + _S12;
          v106 = v103 + (float)(v105 * v45);
          v12 = v104 + (float)(v105 * v49);
          if (v106 < v40)
            v107 = v40;
          else
            v107 = v106;
          v108 = v14 + v37;
          if (v106 > v41)
            v107 = v41;
          v109 = llroundf(v107);
          if (v108 < v37)
            v110 = v37;
          else
            v110 = v14 + v37;
          v111 = result[v64];
          v112 = result[v64 + 4];
          *v66 = v109;
          if (v108 > v39)
            v110 = v39;
          v66[1] = llroundf(v110);
          v13 = v41;
          if (v12 <= v41)
          {
            v13 = v12;
            if (v12 < v40)
              v13 = v40;
          }
          v9 = (float)((float)((float)(v43 * _S11) + (float)(v42 * _S10)) + (float)(v44 * _S12)) + v37;
          v66[2] = llroundf(v13);
          v10 = v39;
          if (v9 <= v39)
          {
            v10 = v9;
            if (v9 < v37)
              v10 = v37;
          }
          v66[3] = llroundf(v10);
          if (v65)
          {
            *v65 = v111;
            v65[1] = v112;
            v65 += 2;
          }
          v64 += 8;
          v63 += 2;
          v66 += 4;
        }
        while (v31 > v63);
      }
      v33 += v27;
      v34 += v28;
      ++v24;
    }
    while (v24 != v35);
  }
  return result;
}

uint64_t vt_Copy_BGRA_rgb_2vuyf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_rgb_2vuyf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_rgb_2vuyf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  float v8;
  float v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  _BYTE *v53;
  unsigned int v54;
  float v55;
  unsigned int v56;
  float v57;
  char v58;
  float v59;
  float v60;
  float v61;
  char v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;

  v10 = *(_QWORD *)(result + 28);
  v11 = *result;
  v12 = v10 * a2 / v11;
  v13 = *((_QWORD *)result + 14);
  v14 = (_QWORD *)*((_QWORD *)result + 16);
  v15 = *((_QWORD *)result + 13) * a2 / v11 + *((_QWORD *)result + 15);
  v16 = (uint64_t *)*((_QWORD *)result + 17);
  v17 = (v10 + v10 * a2) / v11;
  v18 = (_BYTE *)v14[1];
  if (v18)
    v18 += v16[1] * v15 + v13;
  if (v17 != v12)
  {
    v19 = 0;
    v20 = *(_QWORD *)(result + 44);
    v21 = v12 + v20;
    v22 = **((_QWORD **)result + 8);
    v23 = *v16;
    v24 = *v14 + v23 * v15;
    v25 = *((_QWORD *)result + 19);
    v26 = *(_QWORD *)(result + 20);
    v27 = v17 + v20;
    v28 = **((_QWORD **)result + 7) + v22 * v21 + 4 * *(_QWORD *)(result + 36);
    v29 = (_BYTE *)(v24 + v13);
    v30 = v27 - v21;
    LOWORD(a5) = *(_WORD *)(v25 + 144);
    LOWORD(a6) = *(_WORD *)(v25 + 146);
    v31 = (float)*(unsigned int *)(v25 + 136) / (float)*(unsigned int *)(v25 + 128);
    v32 = (float)LODWORD(a5);
    v33 = (float)LODWORD(a6);
    LOWORD(a6) = *(_WORD *)(v25 + 148);
    v34 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v25 + 150);
    v35 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v25 + 152);
    v36 = (float)LODWORD(a8);
    v37 = *(float *)(v25 + 36);
    v38 = *(float *)(v25 + 40);
    v39 = *(float *)(v25 + 44);
    v40 = *(float *)(v25 + 48) * 0.5;
    v41 = *(float *)(v25 + 52) * 0.5;
    v42 = *(float *)(v25 + 56) * 0.5;
    v43 = *(float *)(v25 + 60) * 0.5;
    v44 = *(float *)(v25 + 64) * 0.5;
    v45 = *(float *)(v25 + 68);
    v46 = v45 * 0.5;
    v47 = *(unsigned __int8 *)(v25 + 157);
    v48 = *(unsigned __int8 *)(v25 + 156);
    result = (unsigned __int8 *)*(unsigned __int8 *)(v25 + 155);
    v49 = *(unsigned __int8 *)(v25 + 154);
    do
    {
      if (v26)
      {
        v50 = 0;
        v51 = v28;
        v52 = v18;
        v53 = v29;
        do
        {
          LOBYTE(v45) = *(_BYTE *)(v51 + v49);
          *(float *)&v54 = (float)LODWORD(v45);
          v55 = v31 * *(float *)&v54;
          LOBYTE(v54) = result[v51];
          *(float *)&v56 = (float)v54;
          v57 = v31 * *(float *)&v56;
          LOBYTE(v56) = *(_BYTE *)(v51 + v48);
          v58 = *(_BYTE *)(v51 + v47);
          LOBYTE(v8) = *(_BYTE *)(v51 + 4 + v49);
          v59 = v31 * (float)v56;
          v60 = v31 * (float)LODWORD(v8);
          LOBYTE(v8) = result[v51 + 4];
          v61 = v31 * (float)LODWORD(v8);
          LOBYTE(v9) = *(_BYTE *)(v51 + 4 + v48);
          v62 = *(_BYTE *)(v51 + 4 + v47);
          v9 = v31 * (float)LODWORD(v9);
          v63 = (float)((float)((float)(v38 * v57) + (float)(v37 * v55)) + (float)(v39 * v59)) + v32;
          v64 = v55 + v60;
          v65 = v57 + v61;
          v66 = v59 + v9;
          v67 = (float)((float)(v33 + (float)(v64 * v40)) + (float)(v65 * v41)) + (float)(v66 * v42);
          v68 = (float)((float)(v33 + (float)(v64 * v43)) + (float)(v65 * v44)) + (float)(v66 * v46);
          if (v67 < v35)
            v69 = v35;
          else
            v69 = v67;
          if (v67 > v36)
            v69 = v36;
          *v53 = llroundf(v69);
          if (v63 < v32)
            v70 = v32;
          else
            v70 = v63;
          if (v63 > v34)
            v70 = v34;
          v53[1] = llroundf(v70);
          v71 = v36;
          if (v68 <= v36)
          {
            v71 = v68;
            if (v68 < v35)
              v71 = v35;
          }
          v45 = (float)((float)((float)(v38 * v61) + (float)(v37 * v60)) + (float)(v39 * v9)) + v32;
          v53[2] = llroundf(v71);
          v8 = v34;
          if (v45 <= v34)
          {
            v8 = v45;
            if (v45 < v32)
              v8 = v32;
          }
          v53[3] = llroundf(v8);
          if (v52)
          {
            *v52 = v58;
            v52[1] = v62;
            v52 += 2;
          }
          v51 += 8;
          v50 += 2;
          v53 += 4;
        }
        while (v26 > v50);
      }
      v28 += v22;
      v29 += v23;
      ++v19;
    }
    while (v19 != v30);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Tone_Mat_TRC_yuvsf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Tone_Mat_TRC_yuvsf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_TRC_Tone_Mat_TRC_yuvsf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  uint64_t v51;
  uint64_t v52;
  float v53;
  float v54;
  float v55;
  float v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _BYTE *v62;
  _BYTE *v63;
  uint64_t v64;
  float v75;
  float v76;
  float v77;
  unsigned int v78;
  float v80;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v95;
  float v96;
  float v97;
  float v99;
  float v101;
  float v102;
  float v105;
  float v106;
  unsigned int v109;
  unsigned int v112;
  float v113;
  float v114;
  float v115;
  float v117;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  char v128;
  float v129;
  float v130;
  char v131;
  char v132;
  char v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;

  v9 = *(_QWORD *)(result + 28);
  v10 = *result;
  v11 = v9 * a2 / v10;
  v12 = *((_QWORD *)result + 14);
  v13 = (_QWORD *)*((_QWORD *)result + 16);
  v14 = *((_QWORD *)result + 13) * a2 / v10 + *((_QWORD *)result + 15);
  v15 = (uint64_t *)*((_QWORD *)result + 17);
  v16 = (v9 + v9 * a2) / v10;
  v17 = (_BYTE *)v13[1];
  if (v17)
    v17 += v15[1] * v14 + v12;
  if (v16 != v11)
  {
    v18 = 0;
    v19 = *(_QWORD *)(result + 44);
    v20 = v11 + v19;
    v21 = **((_QWORD **)result + 8);
    v22 = *v15;
    v23 = *((_QWORD *)result + 19);
    v24 = *v13 + v22 * v14;
    v25 = *(_QWORD *)(result + 20);
    v26 = v16 + v19;
    v27 = **((_QWORD **)result + 7) + v21 * v20 + 4 * *(_QWORD *)(result + 36);
    v28 = (_BYTE *)(v24 + v12);
    v29 = v26 - v20;
    LOWORD(a5) = *(_WORD *)(v23 + 144);
    LOWORD(a6) = *(_WORD *)(v23 + 146);
    LOWORD(a7) = *(_WORD *)(v23 + 148);
    LOWORD(a8) = *(_WORD *)(v23 + 150);
    LOWORD(a9) = *(_WORD *)(v23 + 152);
    v30 = 8191.0 / (float)*(unsigned int *)(v23 + 128);
    v31 = (float)LODWORD(a5);
    v32 = (float)LODWORD(a6);
    v33 = (float)LODWORD(a7);
    v34 = (float)LODWORD(a8);
    v35 = (float)LODWORD(a9);
    v36 = *(float *)(v23 + 36);
    v37 = *(float *)(v23 + 40);
    v38 = *(float *)(v23 + 44);
    v39 = 0.5;
    v139 = *(float *)(v23 + 48) * 0.5;
    v138 = *(float *)(v23 + 52) * 0.5;
    v137 = *(float *)(v23 + 56) * 0.5;
    v40 = *(float *)(v23 + 64);
    v136 = *(float *)(v23 + 60) * 0.5;
    v135 = v40 * 0.5;
    v41 = *(float *)(v23 + 72);
    v42 = *(float *)(v23 + 68) * 0.5;
    v134 = v42;
    v43 = *(float *)(v23 + 76);
    v44 = *(float *)(v23 + 80);
    v45 = *(float *)(v23 + 84);
    v46 = *(float *)(v23 + 88);
    v47 = *(float *)(v23 + 92);
    v48 = *(float *)(v23 + 96);
    v50 = *(float *)(v23 + 100);
    v49 = *(float *)(v23 + 104);
    v51 = v23 + 164;
    v52 = v23 + 16548;
    result = (unsigned __int8 *)(v23 + 32932);
    v53 = *(float *)(v23 + 108);
    v54 = *(float *)(v23 + 112);
    v55 = *(float *)(v23 + 116);
    v56 = *(float *)(v23 + 120);
    v57 = *(unsigned __int8 *)(v23 + 157);
    v58 = *(unsigned __int8 *)(v23 + 156);
    v59 = *(unsigned __int8 *)(v23 + 155);
    v60 = *(unsigned __int8 *)(v23 + 154);
    do
    {
      if (v25)
      {
        v61 = 0;
        v62 = v17;
        v63 = v28;
        v64 = v27;
        do
        {
          LOBYTE(v42) = *(_BYTE *)(v64 + v60);
          LOBYTE(v39) = *(_BYTE *)(v64 + v59);
          LOBYTE(v40) = *(_BYTE *)(v64 + v58);
          _H0 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v30 * (float)LODWORD(v42), 0.0), 8191.0)));
          __asm { FCVT            S14, H0 }
          _H0 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v30 * (float)LODWORD(v39), 0.0), 8191.0)));
          __asm { FCVT            S15, H0 }
          _H0 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v30 * (float)LODWORD(v40), 0.0), 8191.0)));
          __asm { FCVT            S18, H0 }
          v75 = (float)((float)(v54 * _S15) + (float)(v53 * _S14)) + (float)(v55 * _S18);
          v76 = v75 + (float)(v56 * fmaxf(_S14, fmaxf(_S15, _S18)));
          v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            v77 = v76;
            if (v76 < 0.0)
              v77 = 0.0;
          }
          LOBYTE(v75) = *(_BYTE *)(v64 + 4 + v60);
          LOBYTE(v76) = *(_BYTE *)(v64 + 4 + v59);
          *(float *)&v78 = (float)LODWORD(v76);
          _S21 = v30 * *(float *)&v78;
          LOBYTE(v78) = *(_BYTE *)(v64 + 4 + v58);
          v80 = v30 * (float)v78;
          _H0 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v30 * (float)LODWORD(v75), 0.0), 8191.0)));
          __asm { FCVT            S19, H0 }
          _H0 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(_S21, 0.0), 8191.0)));
          LOWORD(_S21) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm
          {
            FCVT            S22, H0
            FCVT            S21, H21
          }
          _H0 = *(_WORD *)(v52 + 2 * llroundf(v77));
          __asm { FCVT            S0, H0 }
          v88 = _S14 * _S0;
          v89 = _S15 * _S0;
          v90 = _S18 * _S0;
          v91 = (float)((float)((float)(v54 * _S22) + (float)(v53 * _S19)) + (float)(v55 * _S21))
              + (float)(v56 * fmaxf(_S19, fmaxf(_S22, _S21)));
          v92 = 8191.0;
          if (v91 <= 8191.0)
          {
            v92 = v91;
            if (v91 < 0.0)
              v92 = 0.0;
          }
          _H0 = *(_WORD *)(v52 + 2 * llroundf(v92));
          __asm { FCVT            S0, H0 }
          v95 = _S19 * _S0;
          v96 = _S22 * _S0;
          v97 = _S21 * _S0;
          _S21 = (float)((float)(v43 * v89) + (float)(v88 * v41)) + (float)(v90 * v44);
          v99 = (float)((float)(v46 * v89) + (float)(v88 * v45)) + (float)(v90 * v47);
          _S18 = (float)((float)(v50 * v89) + (float)(v88 * v48)) + (float)(v90 * v49);
          v101 = (float)(v43 * v96) + (float)(v95 * v41);
          v102 = (float)(v46 * v96) + (float)(v95 * v45);
          _S19 = (float)(v50 * v96) + (float)(v95 * v48);
          _S20 = v101 + (float)(v97 * v44);
          v105 = v102 + (float)(v97 * v47);
          v106 = _S19 + (float)(v97 * v49);
          LOWORD(_S19) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(_S21, 0.0), 8191.0))];
          __asm { FCVT            S19, H19 }
          LOWORD(_S21) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v99, 0.0), 8191.0))];
          __asm { FCVT            S21, H21 }
          v109 = llroundf(fminf(fmaxf(_S18, 0.0), 8191.0));
          LOWORD(_S18) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(_S20, 0.0), 8191.0))];
          __asm { FCVT            S18, H18 }
          LOWORD(_S20) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v105, 0.0), 8191.0))];
          __asm { FCVT            S20, H20 }
          v112 = llroundf(fminf(fmaxf(v106, 0.0), 8191.0));
          v113 = (float)(v37 * _S21) + (float)(v36 * _S19);
          v114 = (float)(v37 * _S20) + (float)(v36 * _S18);
          v115 = _S19 + _S18;
          LOWORD(_S19) = *(_WORD *)&result[2 * v109];
          __asm { FCVT            S19, H19 }
          v117 = _S21 + _S20;
          LOWORD(_S21) = *(_WORD *)&result[2 * v112];
          __asm { FCVT            S21, H21 }
          v119 = v113 + (float)(v38 * _S19);
          v120 = v114 + (float)(v38 * _S21);
          v121 = _S19 + _S21;
          v122 = (float)(v32 + (float)(v115 * v139)) + (float)(v117 * v138);
          v123 = (float)(v32 + (float)(v115 * v136)) + (float)(v117 * v135);
          v124 = v119 + v31;
          v125 = v122 + (float)(v121 * v137);
          v39 = v123 + (float)(v121 * v134);
          if (v124 < v31)
            v126 = v31;
          else
            v126 = v124;
          if (v124 <= v33)
            v127 = v126;
          else
            v127 = v33;
          v128 = llroundf(v127);
          if (v125 < v34)
            v129 = v34;
          else
            v129 = v125;
          v130 = v120 + v31;
          if (v125 > v35)
            v129 = v35;
          v131 = llroundf(v129);
          if (v130 < v31)
            v42 = v31;
          else
            v42 = v120 + v31;
          v132 = *(_BYTE *)(v64 + v57);
          v133 = *(_BYTE *)(v64 + 4 + v57);
          *v63 = v128;
          v63[1] = v131;
          if (v130 > v33)
            v42 = v33;
          v63[2] = llroundf(v42);
          v40 = v35;
          if (v39 <= v35)
          {
            v40 = v39;
            if (v39 < v34)
              v40 = v34;
          }
          v63[3] = llroundf(v40);
          if (v62)
          {
            *v62 = v132;
            v62[1] = v133;
            v62 += 2;
          }
          v64 += 8;
          v61 += 2;
          v63 += 4;
        }
        while (v25 > v61);
      }
      v27 += v21;
      v28 += v22;
      ++v18;
    }
    while (v18 != v29);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Mat_TRC_yuvsf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Mat_TRC_yuvsf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_TRC_Mat_TRC_yuvsf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unsigned __int8 *v66;
  _BYTE *v67;
  unsigned int v81;
  float v85;
  float v86;
  float v87;
  float v90;
  float v91;
  unsigned int v94;
  unsigned int v97;
  float v98;
  float v99;
  float v100;
  float v102;
  float v104;
  float v105;
  char v106;
  float v107;
  float v108;
  char v109;
  float v110;
  unsigned __int8 v111;
  unsigned __int8 v112;
  float v113;

  v15 = *(_QWORD *)(result + 28);
  v16 = *result;
  v17 = v15 * a2 / v16;
  v18 = *((_QWORD *)result + 14);
  v19 = (_QWORD *)*((_QWORD *)result + 16);
  v20 = *((_QWORD *)result + 13) * a2 / v16 + *((_QWORD *)result + 15);
  v21 = (uint64_t *)*((_QWORD *)result + 17);
  v22 = (v15 + v15 * a2) / v16;
  v23 = (unsigned __int8 *)v19[1];
  if (v23)
    v23 += v21[1] * v20 + v18;
  if (v22 != v17)
  {
    v24 = 0;
    v25 = *(_QWORD *)(result + 44);
    v26 = v17 + v25;
    v27 = **((_QWORD **)result + 8);
    v28 = *v21;
    v29 = *((_QWORD *)result + 19);
    v30 = *v19 + v28 * v20;
    v31 = *(_QWORD *)(result + 20);
    v32 = v22 + v25;
    v33 = **((_QWORD **)result + 7) + v27 * v26 + 4 * *(_QWORD *)(result + 36);
    v34 = (_BYTE *)(v30 + v18);
    v35 = v32 - v26;
    LOWORD(a5) = *(_WORD *)(v29 + 144);
    LOWORD(a6) = *(_WORD *)(v29 + 146);
    LOWORD(a7) = *(_WORD *)(v29 + 148);
    LOWORD(a8) = *(_WORD *)(v29 + 150);
    LOWORD(a9) = *(_WORD *)(v29 + 152);
    v36 = 8191.0 / (float)*(unsigned int *)(v29 + 128);
    v37 = (float)LODWORD(a5);
    v38 = (float)LODWORD(a6);
    v39 = (float)LODWORD(a7);
    v40 = (float)LODWORD(a8);
    v41 = (float)LODWORD(a9);
    v42 = *(float *)(v29 + 36);
    v43 = *(float *)(v29 + 40);
    v44 = *(float *)(v29 + 44);
    v113 = *(float *)(v29 + 48) * 0.5;
    v45 = *(float *)(v29 + 52) * 0.5;
    v46 = *(float *)(v29 + 56) * 0.5;
    v47 = *(float *)(v29 + 60) * 0.5;
    v48 = *(float *)(v29 + 64) * 0.5;
    v49 = *(float *)(v29 + 72);
    v50 = *(float *)(v29 + 68) * 0.5;
    v51 = *(float *)(v29 + 76);
    v52 = *(float *)(v29 + 80);
    v53 = *(float *)(v29 + 84);
    v54 = *(float *)(v29 + 88);
    v55 = *(float *)(v29 + 92);
    v56 = *(float *)(v29 + 96);
    v58 = *(float *)(v29 + 100);
    v57 = *(float *)(v29 + 104);
    v59 = v29 + 164;
    v60 = v29 + 16548;
    result = (unsigned __int8 *)*(unsigned __int8 *)(v29 + 157);
    v61 = *(unsigned __int8 *)(v29 + 156);
    v62 = *(unsigned __int8 *)(v29 + 155);
    v63 = *(unsigned __int8 *)(v29 + 154);
    do
    {
      if (v31)
      {
        v64 = 0;
        v65 = v33;
        v66 = v23;
        v67 = v34;
        do
        {
          LOBYTE(v9) = *(_BYTE *)(v65 + v63);
          LOBYTE(v10) = *(_BYTE *)(v65 + v62);
          LOBYTE(v11) = *(_BYTE *)(v65 + v61);
          LOBYTE(v12) = *(_BYTE *)(v65 + 4 + v63);
          LOBYTE(v13) = *(_BYTE *)(v65 + 4 + v62);
          LOBYTE(v14) = *(_BYTE *)(v65 + 4 + v61);
          _H10 = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v36 * (float)LODWORD(v9), 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          _H11 = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v36 * (float)LODWORD(v10), 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          _H12 = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v36 * (float)LODWORD(v11), 0.0), 8191.0)));
          _H13 = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v36 * (float)LODWORD(v12), 0.0), 8191.0)));
          __asm
          {
            FCVT            S12, H12
            FCVT            S13, H13
          }
          _H14 = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v36 * (float)LODWORD(v13), 0.0), 8191.0)));
          v81 = llroundf(fminf(fmaxf(v36 * (float)LODWORD(v14), 0.0), 8191.0));
          __asm { FCVT            S14, H14 }
          v14 = (float)((float)(v51 * _S11) + (float)(_S10 * v49)) + (float)(_S12 * v52);
          _S18 = (float)((float)(v54 * _S11) + (float)(_S10 * v53)) + (float)(_S12 * v55);
          _S10 = (float)((float)(v58 * _S11) + (float)(_S10 * v56)) + (float)(_S12 * v57);
          v85 = (float)(v51 * _S14) + (float)(_S13 * v49);
          v86 = (float)(v54 * _S14) + (float)(_S13 * v53);
          v87 = (float)(v58 * _S14) + (float)(_S13 * v56);
          LOWORD(_S14) = *(_WORD *)(v59 + 2 * v81);
          __asm { FCVT            S14, H14 }
          _S11 = v85 + (float)(_S14 * v52);
          v90 = v86 + (float)(_S14 * v55);
          v91 = v87 + (float)(_S14 * v57);
          LOWORD(_S14) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v14, 0.0), 8191.0)));
          __asm { FCVT            S14, H14 }
          LOWORD(_S18) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S18, 0.0), 8191.0)));
          __asm { FCVT            S18, H18 }
          v94 = llroundf(fminf(fmaxf(_S10, 0.0), 8191.0));
          LOWORD(_S10) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S11, 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          LOWORD(_S11) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          v97 = llroundf(fminf(fmaxf(v91, 0.0), 8191.0));
          v98 = (float)(v43 * _S18) + (float)(v42 * _S14);
          v99 = (float)(v43 * _S11) + (float)(v42 * _S10);
          v100 = _S14 + _S10;
          LOWORD(_S14) = *(_WORD *)(v60 + 2 * v94);
          __asm { FCVT            S14, H14 }
          v102 = _S18 + _S11;
          LOWORD(_S11) = *(_WORD *)(v60 + 2 * v97);
          __asm { FCVT            S11, H11 }
          v12 = v99 + (float)(v44 * _S11);
          v104 = _S14 + _S11;
          v11 = (float)(v98 + (float)(v44 * _S14)) + v37;
          v13 = (float)((float)(v38 + (float)(v100 * v113)) + (float)(v102 * v45)) + (float)(v104 * v46);
          v9 = (float)((float)(v38 + (float)(v100 * v47)) + (float)(v102 * v48)) + (float)(v104 * v50);
          if (v11 < v37)
            v105 = v37;
          else
            v105 = v11;
          if (v11 > v39)
            v105 = v39;
          v106 = llroundf(v105);
          if (v13 < v40)
            v107 = v40;
          else
            v107 = v13;
          v108 = v12 + v37;
          if (v13 > v41)
            v107 = v41;
          v109 = llroundf(v107);
          if (v108 < v37)
            v110 = v37;
          else
            v110 = v12 + v37;
          v111 = result[v65];
          v112 = result[v65 + 4];
          *v67 = v106;
          v67[1] = v109;
          if (v108 > v39)
            v110 = v39;
          v67[2] = llroundf(v110);
          v10 = v41;
          if (v9 <= v41)
          {
            v10 = v9;
            if (v9 < v40)
              v10 = v40;
          }
          v67[3] = llroundf(v10);
          if (v66)
          {
            *v66 = v111;
            v66[1] = v112;
            v66 += 2;
          }
          v65 += 8;
          v64 += 2;
          v67 += 4;
        }
        while (v31 > v64);
      }
      v33 += v27;
      v34 += v28;
      ++v24;
    }
    while (v24 != v35);
  }
  return result;
}

uint64_t vt_Copy_BGRA_rgb_yuvsf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_rgb_yuvsf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_rgb_yuvsf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  _BYTE *v56;
  float v57;
  float v58;
  float v59;
  char v60;
  float v61;
  char v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;

  v13 = *(_QWORD *)(result + 28);
  v14 = *result;
  v15 = v13 * a2 / v14;
  v16 = *((_QWORD *)result + 14);
  v17 = (_QWORD *)*((_QWORD *)result + 16);
  v18 = *((_QWORD *)result + 13) * a2 / v14 + *((_QWORD *)result + 15);
  v19 = (uint64_t *)*((_QWORD *)result + 17);
  v20 = (v13 + v13 * a2) / v14;
  v21 = (_BYTE *)v17[1];
  if (v21)
    v21 += v19[1] * v18 + v16;
  if (v20 != v15)
  {
    v22 = 0;
    v23 = *(_QWORD *)(result + 44);
    v24 = v15 + v23;
    v25 = **((_QWORD **)result + 8);
    v26 = *v19;
    v27 = *v17 + v26 * v18;
    v28 = *((_QWORD *)result + 19);
    v29 = *(_QWORD *)(result + 20);
    v30 = v20 + v23;
    v31 = **((_QWORD **)result + 7) + v25 * v24 + 4 * *(_QWORD *)(result + 36);
    v32 = (_BYTE *)(v27 + v16);
    v33 = v30 - v24;
    LOWORD(a5) = *(_WORD *)(v28 + 144);
    LOWORD(a6) = *(_WORD *)(v28 + 146);
    v34 = (float)*(unsigned int *)(v28 + 136) / (float)*(unsigned int *)(v28 + 128);
    v35 = (float)LODWORD(a5);
    v36 = (float)LODWORD(a6);
    LOWORD(a6) = *(_WORD *)(v28 + 148);
    v37 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v28 + 150);
    v38 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v28 + 152);
    v39 = (float)LODWORD(a8);
    v40 = *(float *)(v28 + 36);
    v41 = *(float *)(v28 + 40);
    v42 = *(float *)(v28 + 44);
    v43 = *(float *)(v28 + 48) * 0.5;
    v44 = *(float *)(v28 + 52) * 0.5;
    v45 = *(float *)(v28 + 56) * 0.5;
    v46 = *(float *)(v28 + 60) * 0.5;
    v47 = *(float *)(v28 + 64) * 0.5;
    v48 = *(float *)(v28 + 68);
    v49 = v48 * 0.5;
    v50 = *(unsigned __int8 *)(v28 + 157);
    v51 = *(unsigned __int8 *)(v28 + 156);
    result = (unsigned __int8 *)*(unsigned __int8 *)(v28 + 155);
    v52 = *(unsigned __int8 *)(v28 + 154);
    do
    {
      if (v29)
      {
        v53 = 0;
        v54 = v31;
        v55 = v21;
        v56 = v32;
        do
        {
          LOBYTE(v48) = *(_BYTE *)(v54 + v52);
          v57 = v34 * (float)LODWORD(v48);
          LOBYTE(v8) = result[v54];
          LOBYTE(v9) = *(_BYTE *)(v54 + v51);
          v58 = v34 * (float)LODWORD(v8);
          v59 = v34 * (float)LODWORD(v9);
          v60 = *(_BYTE *)(v54 + v50);
          LOBYTE(v10) = *(_BYTE *)(v54 + 4 + v52);
          v61 = v34 * (float)LODWORD(v10);
          LOBYTE(v11) = result[v54 + 4];
          v11 = v34 * (float)LODWORD(v11);
          LOBYTE(v12) = *(_BYTE *)(v54 + 4 + v51);
          v12 = v34 * (float)LODWORD(v12);
          v62 = *(_BYTE *)(v54 + 4 + v50);
          v63 = (float)((float)((float)(v41 * v58) + (float)(v40 * v57)) + (float)(v42 * v59)) + v35;
          v64 = (float)((float)((float)(v41 * v11) + (float)(v40 * v61)) + (float)(v42 * v12)) + v35;
          v65 = v57 + v61;
          v66 = v58 + v11;
          v9 = v59 + v12;
          v10 = (float)((float)(v36 + (float)(v65 * v43)) + (float)(v66 * v44)) + (float)(v9 * v45);
          v67 = (float)(v36 + (float)(v65 * v46)) + (float)(v66 * v47);
          if (v63 < v35)
            v68 = v35;
          else
            v68 = v63;
          if (v63 > v37)
            v68 = v37;
          v48 = v67 + (float)(v9 * v49);
          *v56 = llroundf(v68);
          if (v10 < v38)
            v69 = v38;
          else
            v69 = v10;
          if (v10 > v39)
            v69 = v39;
          v56[1] = llroundf(v69);
          if (v64 < v35)
            v70 = v35;
          else
            v70 = v64;
          if (v64 > v37)
            v70 = v37;
          v56[2] = llroundf(v70);
          v8 = v39;
          if (v48 <= v39)
          {
            v8 = v48;
            if (v48 < v38)
              v8 = v38;
          }
          v56[3] = llroundf(v8);
          if (v55)
          {
            *v55 = v60;
            v55[1] = v62;
            v55 += 2;
          }
          v54 += 8;
          v53 += 2;
          v56 += 4;
        }
        while (v29 > v53);
      }
      v31 += v25;
      v32 += v26;
      ++v22;
    }
    while (v22 != v33);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Tone_Mat_TRC_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v20 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v18 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Tone_Mat_TRC_xf422_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_TRC_Tone_Mat_TRC_xf422_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  float v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float v46;
  float v47;
  float v48;
  float v49;
  uint64_t *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unsigned int v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  unint64_t v67;
  _WORD *v68;
  _WORD *v69;
  uint64_t v70;
  float v81;
  float v82;
  float v83;
  float v90;
  float v91;
  float v95;
  unsigned int v97;
  float v98;
  float v102;
  float v103;
  __int16 v104;
  __int16 v105;
  float v109;
  float v110;
  float v111;
  float v112;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  _WORD *v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;

  v9 = *(_QWORD *)(result + 28);
  v10 = *result;
  v11 = v9 * a2 / v10;
  v12 = (v9 + v9 * a2) / v10;
  if (v12 != v11)
  {
    v13 = 0;
    v14 = *(_QWORD *)(result + 20);
    v15 = v11 + *(_QWORD *)(result + 44);
    v16 = v12 - v11;
    v17 = *((_QWORD *)result + 19);
    v18 = (uint64_t *)*((_QWORD *)result + 17);
    v19 = (_QWORD *)*((_QWORD *)result + 7);
    v20 = **((_QWORD **)result + 8);
    v21 = *v18;
    v22 = v18[1];
    v23 = v18[2];
    v24 = 8191.0 / (float)*(unsigned int *)(v17 + 128);
    LOWORD(a5) = *(_WORD *)(v17 + 144);
    v25 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v17 + 146);
    v26 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v17 + 148);
    v27 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v17 + 150);
    v130 = (float)LODWORD(a8);
    LOWORD(a8) = *(_WORD *)(v17 + 152);
    v28 = (float)LODWORD(a8);
    v29 = *(float *)(v17 + 40);
    v131 = *(float *)(v17 + 36);
    v30 = *(float *)(v17 + 44);
    v31 = 0.5;
    v129 = *(float *)(v17 + 48) * 0.5;
    v128 = *(float *)(v17 + 52) * 0.5;
    v127 = *(float *)(v17 + 56) * 0.5;
    v32 = *(float *)(v17 + 64);
    v126 = *(float *)(v17 + 60) * 0.5;
    v125 = v32 * 0.5;
    v33 = *(float *)(v17 + 68);
    v34 = *(float *)(v17 + 72);
    v124 = v33 * 0.5;
    v35 = *(float *)(v17 + 76);
    v36 = *(float *)(v17 + 80);
    v37 = *(float *)(v17 + 84);
    v38 = *(float *)(v17 + 88);
    v39 = *(float *)(v17 + 92);
    v40 = *(float *)(v17 + 96);
    v42 = *(float *)(v17 + 100);
    v41 = *(float *)(v17 + 104);
    v43 = v17 + 164;
    v44 = v17 + 16548;
    v45 = v17 + 32932;
    v46 = *(float *)(v17 + 108);
    v47 = *(float *)(v17 + 112);
    v48 = *(float *)(v17 + 116);
    v49 = *(float *)(v17 + 120);
    v50 = (uint64_t *)*((_QWORD *)result + 16);
    v51 = *((_QWORD *)result + 14);
    v52 = *((_QWORD *)result + 13) * a2 / v10 + *((_QWORD *)result + 15);
    v53 = *(_QWORD *)(result + 36);
    v54 = *(unsigned __int8 *)(v17 + 132);
    if (v54 >= 0x11)
      v55 = 0;
    else
      v55 = 16 - v54;
    result = (unsigned __int8 *)*(unsigned __int8 *)(v17 + 157);
    v56 = *(unsigned __int8 *)(v17 + 156);
    v57 = *(unsigned __int8 *)(v17 + 155);
    v58 = *(unsigned __int8 *)(v17 + 154);
    v59 = v50[2];
    if (v59)
      v60 = v59 + v52 * v23 + 2 * v51;
    else
      v60 = 0;
    v62 = *v50;
    v61 = v50[1];
    v63 = v61 + v52 * v22 + 2 * v51;
    if (!v61)
      v63 = 0;
    v64 = v62 + v52 * v21 + 2 * v51;
    v65 = *v19 + v20 * v15 + 4 * v53;
    v66 = v55;
    do
    {
      if (v14)
      {
        v67 = 0;
        v68 = (_WORD *)v60;
        v69 = (_WORD *)v64;
        v70 = v65;
        do
        {
          LOBYTE(v33) = *(_BYTE *)(v70 + v58);
          LOBYTE(v31) = *(_BYTE *)(v70 + v57);
          LOBYTE(v32) = *(_BYTE *)(v70 + v56);
          _H5 = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v24 * (float)LODWORD(v33), 0.0), 8191.0)));
          __asm { FCVT            S15, H5 }
          _H5 = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v24 * (float)LODWORD(v31), 0.0), 8191.0)));
          __asm { FCVT            S18, H5 }
          _H5 = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v24 * (float)LODWORD(v32), 0.0), 8191.0)));
          __asm { FCVT            S19, H5 }
          v81 = (float)((float)(v47 * _S18) + (float)(v46 * _S15)) + (float)(v48 * _S19);
          v82 = v81 + (float)(v49 * fmaxf(_S15, fmaxf(_S18, _S19)));
          v83 = 8191.0;
          if (v82 <= 8191.0)
          {
            v83 = v82;
            if (v82 < 0.0)
              v83 = 0.0;
          }
          LOBYTE(v81) = *(_BYTE *)(v70 + 4 + v58);
          LOBYTE(v82) = *(_BYTE *)(v70 + 4 + v57);
          LOBYTE(v8) = *(_BYTE *)(v70 + 4 + v56);
          _H5 = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v24 * (float)LODWORD(v81), 0.0), 8191.0)));
          __asm { FCVT            S14, H5 }
          _H5 = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v24 * (float)LODWORD(v82), 0.0), 8191.0)));
          __asm { FCVT            S20, H5 }
          _H5 = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v24 * (float)LODWORD(v8), 0.0), 8191.0)));
          __asm { FCVT            S21, H5 }
          v90 = (float)((float)((float)(v47 * _S20) + (float)(v46 * _S14)) + (float)(v48 * _S21))
              + (float)(v49 * fmaxf(_S14, fmaxf(_S20, _S21)));
          v91 = 8191.0;
          if (v90 <= 8191.0)
          {
            v91 = v90;
            if (v90 < 0.0)
              v91 = 0.0;
          }
          _H22 = *(_WORD *)(v44 + 2 * llroundf(v83));
          __asm { FCVT            S22, H22 }
          _S18 = _S18 * _S22;
          v95 = _S19 * _S22;
          _S3 = (float)((float)(v38 * _S18) + (float)((float)(_S15 * _S22) * v37)) + (float)(v95 * v39);
          v97 = llroundf(fminf(fmaxf((float)((float)(v35 * _S18) + (float)((float)(_S15 * _S22) * v34)) + (float)(v95 * v36), 0.0), 8191.0));
          v98 = (float)((float)(v42 * _S18) + (float)((float)(_S15 * _S22) * v40)) + (float)(v95 * v41);
          LOWORD(_S18) = *(_WORD *)(v45 + 2 * v97);
          __asm { FCVT            S15, H18 }
          LOWORD(_S3) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          __asm { FCVT            S18, H3 }
          LOWORD(_S3) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          __asm { FCVT            S19, H3 }
          v102 = (float)((float)((float)(v29 * _S18) + (float)(v131 * _S15)) + (float)(v30 * _S19)) + v25;
          v103 = v27;
          if (v102 <= v27)
          {
            v103 = (float)((float)((float)(v29 * _S18) + (float)(v131 * _S15)) + (float)(v30 * _S19)) + v25;
            if (v102 < v25)
              v103 = v25;
          }
          v104 = result[v70];
          v105 = result[v70 + 4];
          _H3 = *(_WORD *)(v44 + 2 * llroundf(v91));
          __asm { FCVT            S3, H3 }
          _S5 = _S14 * _S3;
          v109 = _S20 * _S3;
          v110 = _S21 * _S3;
          v111 = (float)((float)(v35 * v109) + (float)(_S5 * v34)) + (float)(v110 * v36);
          v112 = (float)((float)(v38 * v109) + (float)(_S5 * v37)) + (float)(v110 * v39);
          _S3 = (float)((float)(v42 * v109) + (float)(_S5 * v40)) + (float)(v110 * v41);
          LOWORD(_S5) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v111, 0.0), 8191.0)));
          __asm { FCVT            S20, H5 }
          LOWORD(_S5) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v112, 0.0), 8191.0)));
          LOWORD(_S3) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          __asm
          {
            FCVT            S22, H5
            FCVT            S21, H3
          }
          v117 = (float)((float)((float)(v29 * _S22) + (float)(v131 * _S20)) + (float)(v30 * _S21)) + v25;
          *v69 = llroundf(v103) << v66;
          v118 = v27;
          if (v117 <= v27)
          {
            v118 = (float)((float)((float)(v29 * _S22) + (float)(v131 * _S20)) + (float)(v30 * _S21)) + v25;
            if (v117 < v25)
              v118 = v25;
          }
          v69[1] = llroundf(v118) << v66;
          v119 = _S15 + _S20;
          v120 = _S18 + _S22;
          v121 = _S19 + _S21;
          v122 = (float)((float)(v26 + (float)(v119 * v129)) + (float)(v120 * v128)) + (float)(v121 * v127);
          v8 = v28;
          if (v122 <= v28)
          {
            v8 = (float)((float)(v26 + (float)(v119 * v129)) + (float)(v120 * v128)) + (float)(v121 * v127);
            if (v122 < v130)
              v8 = v130;
          }
          v123 = (_WORD *)(v63 + 2 * v67);
          v33 = v124;
          v31 = (float)((float)(v26 + (float)(v119 * v126)) + (float)(v120 * v125)) + (float)(v121 * v124);
          *v123 = llroundf(v8) << v66;
          v32 = v28;
          if (v31 <= v28)
          {
            v32 = v31;
            if (v31 < v130)
              v32 = v130;
          }
          v123[1] = llroundf(v32) << v66;
          if (v68)
          {
            *v68 = v104 | (v104 << 8);
            v68[1] = v105 | (v105 << 8);
            v68 += 2;
          }
          v70 += 8;
          v67 += 2;
          v69 += 2;
        }
        while (v14 > v67);
      }
      v65 += v20;
      v64 += v21;
      v63 += v22;
      v60 += v23;
      ++v13;
    }
    while (v13 != v16);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Mat_TRC_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v20 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v18 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Mat_TRC_xf422_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_TRC_Mat_TRC_xf422_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  float v9;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unsigned int v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  unint64_t v68;
  uint64_t v69;
  _WORD *v70;
  _WORD *v71;
  unsigned int v72;
  float v83;
  float v84;
  float v90;
  float v91;
  __int16 v92;
  __int16 v93;
  float v100;
  float v102;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  _WORD *v111;
  float v112;
  float v113;
  float v114;

  v11 = *(_QWORD *)(result + 28);
  v12 = *result;
  v13 = v11 * a2 / v12;
  v14 = (v11 + v11 * a2) / v12;
  if (v14 != v13)
  {
    v15 = 0;
    v16 = *(_QWORD *)(result + 20);
    v17 = v13 + *(_QWORD *)(result + 44);
    v18 = v14 - v13;
    v19 = *((_QWORD *)result + 19);
    v20 = (uint64_t *)*((_QWORD *)result + 17);
    v21 = (_QWORD *)*((_QWORD *)result + 7);
    v22 = **((_QWORD **)result + 8);
    v23 = *v20;
    v24 = v20[1];
    v25 = v20[2];
    v26 = 8191.0 / (float)*(unsigned int *)(v19 + 128);
    LOWORD(a5) = *(_WORD *)(v19 + 144);
    v27 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v19 + 146);
    v28 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v19 + 148);
    v29 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v19 + 150);
    v30 = (float)LODWORD(a8);
    LOWORD(a9) = *(_WORD *)(v19 + 152);
    v31 = (float)LODWORD(a9);
    v32 = *(float *)(v19 + 36);
    v33 = *(float *)(v19 + 40);
    v34 = *(float *)(v19 + 44);
    v35 = 0.5;
    v113 = *(float *)(v19 + 52) * 0.5;
    v114 = *(float *)(v19 + 48) * 0.5;
    v112 = *(float *)(v19 + 56) * 0.5;
    v36 = *(float *)(v19 + 60) * 0.5;
    v37 = *(float *)(v19 + 64) * 0.5;
    v38 = *(float *)(v19 + 68);
    v39 = *(float *)(v19 + 72);
    v40 = v38 * 0.5;
    v41 = *(float *)(v19 + 76);
    v42 = *(float *)(v19 + 80);
    v43 = *(float *)(v19 + 84);
    v44 = *(float *)(v19 + 88);
    v45 = *(float *)(v19 + 92);
    v46 = *(float *)(v19 + 96);
    v48 = *(float *)(v19 + 100);
    v47 = *(float *)(v19 + 104);
    v49 = v19 + 164;
    v50 = v19 + 16548;
    v51 = (uint64_t *)*((_QWORD *)result + 16);
    v52 = *((_QWORD *)result + 14);
    v53 = *((_QWORD *)result + 13) * a2 / v12 + *((_QWORD *)result + 15);
    v54 = *(_QWORD *)(result + 36);
    v55 = *(unsigned __int8 *)(v19 + 132);
    if (v55 >= 0x11)
      v56 = 0;
    else
      v56 = 16 - v55;
    v57 = *(unsigned __int8 *)(v19 + 157);
    result = (unsigned __int8 *)*(unsigned __int8 *)(v19 + 156);
    v58 = *(unsigned __int8 *)(v19 + 155);
    v59 = *(unsigned __int8 *)(v19 + 154);
    v60 = v51[2];
    if (v60)
      v61 = v60 + v53 * v25 + 2 * v52;
    else
      v61 = 0;
    v63 = *v51;
    v62 = v51[1];
    v64 = v62 + v53 * v24 + 2 * v52;
    if (!v62)
      v64 = 0;
    v65 = v63 + v53 * v23 + 2 * v52;
    v66 = *v21 + v22 * v17 + 4 * v54;
    v67 = v56;
    do
    {
      if (v16)
      {
        v68 = 0;
        v69 = v66;
        v70 = (_WORD *)v61;
        v71 = (_WORD *)v65;
        do
        {
          LOBYTE(v38) = *(_BYTE *)(v69 + v59);
          LOBYTE(v35) = *(_BYTE *)(v69 + v58);
          LOBYTE(v9) = result[v69];
          v72 = llroundf(fminf(fmaxf(v26 * (float)LODWORD(v38), 0.0), 8191.0));
          _S18 = v26 * (float)LODWORD(v9);
          _H10 = *(_WORD *)(v49 + 2 * v72);
          __asm { FCVT            S10, H10 }
          _H19 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v26 * (float)LODWORD(v35), 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          LOWORD(_S18) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(_S18, 0.0), 8191.0)));
          __asm { FCVT            S18, H18 }
          v83 = (float)((float)(v41 * _S19) + (float)(_S10 * v39)) + (float)(_S18 * v42);
          v84 = (float)((float)(v44 * _S19) + (float)(_S10 * v43)) + (float)(_S18 * v45);
          _S18 = (float)((float)(v48 * _S19) + (float)(_S10 * v46)) + (float)(_S18 * v47);
          LOWORD(_S19) = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          __asm { FCVT            S10, H19 }
          _S19 = fminf(fmaxf(v84, 0.0), 8191.0);
          LOWORD(_S19) = *(_WORD *)(v50 + 2 * llroundf(_S19));
          __asm { FCVT            S11, H19 }
          LOWORD(_S18) = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(_S18, 0.0), 8191.0)));
          __asm { FCVT            S12, H18 }
          v90 = (float)((float)((float)(v33 * _S11) + (float)(v32 * _S10)) + (float)(v34 * _S12)) + v27;
          v91 = v29;
          if (v90 <= v29)
          {
            v91 = (float)((float)((float)(v33 * _S11) + (float)(v32 * _S10)) + (float)(v34 * _S12)) + v27;
            if (v90 < v27)
              v91 = v27;
          }
          v92 = *(unsigned __int8 *)(v69 + v57);
          LOBYTE(v90) = *(_BYTE *)(v69 + 4 + v59);
          LOBYTE(_S19) = *(_BYTE *)(v69 + 4 + v58);
          LOBYTE(_S14) = result[v69 + 4];
          v93 = *(unsigned __int8 *)(v69 + 4 + v57);
          _H18 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v26 * (float)LODWORD(v90), 0.0), 8191.0)));
          __asm { FCVT            S18, H18 }
          _H19 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v26 * (float)LODWORD(_S19), 0.0), 8191.0)));
          _H14 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v26 * (float)LODWORD(_S14), 0.0), 8191.0)));
          __asm
          {
            FCVT            S19, H19
            FCVT            S14, H14
          }
          v100 = (float)((float)(v41 * _S19) + (float)(_S18 * v39)) + (float)(_S14 * v42);
          _S20 = (float)((float)(v44 * _S19) + (float)(_S18 * v43)) + (float)(_S14 * v45);
          v102 = (float)((float)(v48 * _S19) + (float)(_S18 * v46)) + (float)(_S14 * v47);
          LOWORD(_S19) = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v100, 0.0), 8191.0)));
          __asm { FCVT            S14, H19 }
          LOWORD(_S19) = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(_S20, 0.0), 8191.0)));
          LOWORD(_S20) = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v102, 0.0), 8191.0)));
          __asm
          {
            FCVT            S18, H19
            FCVT            S15, H20
          }
          v105 = (float)((float)((float)(v33 * _S18) + (float)(v32 * _S14)) + (float)(v34 * _S15)) + v27;
          *v71 = llroundf(v91) << v67;
          v106 = v29;
          if (v105 <= v29)
          {
            v106 = (float)((float)((float)(v33 * _S18) + (float)(v32 * _S14)) + (float)(v34 * _S15)) + v27;
            if (v105 < v27)
              v106 = v27;
          }
          v71[1] = llroundf(v106) << v67;
          v9 = _S10 + _S14;
          v107 = _S11 + _S18;
          v108 = _S12 + _S15;
          v109 = (float)((float)(v28 + (float)(v9 * v114)) + (float)(v107 * v113))
               + (float)((float)(_S12 + _S15) * v112);
          v110 = v31;
          if (v109 <= v31)
          {
            v110 = v109;
            if (v109 < v30)
              v110 = v30;
          }
          v111 = (_WORD *)(v64 + 2 * v68);
          v38 = (float)((float)(v28 + (float)(v9 * v36)) + (float)(v107 * v37)) + (float)(v108 * v40);
          *v111 = llroundf(v110) << v67;
          v35 = v31;
          if (v38 <= v31)
          {
            v35 = v38;
            if (v38 < v30)
              v35 = v30;
          }
          v111[1] = llroundf(v35) << v67;
          if (v70)
          {
            *v70 = v92 | (v92 << 8);
            v70[1] = v93 | (v93 << 8);
            v70 += 2;
          }
          v69 += 8;
          v68 += 2;
          v71 += 2;
        }
        while (v16 > v68);
      }
      v66 += v22;
      v65 += v23;
      v64 += v24;
      v61 += v25;
      ++v15;
    }
    while (v15 != v18);
  }
  return result;
}

uint64_t vt_Copy_BGRA_rgb_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v20 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v18 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_rgb_xf422_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_rgb_xf422_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  float v8;
  float v9;
  float v10;
  float v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unsigned int v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  unint64_t v63;
  uint64_t v64;
  _WORD *v65;
  _WORD *v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  __int16 v72;
  float v73;
  float v74;
  __int16 v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  _WORD *v81;

  v12 = *(_QWORD *)(result + 28);
  v13 = *result;
  v14 = v12 * a2 / v13;
  v15 = (v12 + v12 * a2) / v13;
  if (v15 != v14)
  {
    v16 = 0;
    v17 = *(_QWORD *)(result + 20);
    v18 = v14 + *(_QWORD *)(result + 44);
    v19 = v15 - v14;
    v20 = *((_QWORD *)result + 19);
    v21 = (uint64_t *)*((_QWORD *)result + 17);
    v22 = (_QWORD *)*((_QWORD *)result + 7);
    v23 = **((_QWORD **)result + 8);
    v24 = *v21;
    v25 = v21[1];
    v26 = v21[2];
    *(float *)&v27 = (float)*(unsigned int *)(v20 + 136);
    v28 = *(float *)&v27 / (float)*(unsigned int *)(v20 + 128);
    LOWORD(v27) = *(_WORD *)(v20 + 144);
    v29 = (float)v27;
    LOWORD(a5) = *(_WORD *)(v20 + 146);
    v30 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v20 + 148);
    v31 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v20 + 150);
    v32 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v20 + 152);
    v33 = (float)LODWORD(a8);
    v34 = *(float *)(v20 + 36);
    v35 = *(float *)(v20 + 40);
    v36 = *(float *)(v20 + 44);
    v37 = *(float *)(v20 + 48) * 0.5;
    v38 = *(float *)(v20 + 52) * 0.5;
    v39 = *(float *)(v20 + 56) * 0.5;
    v40 = *(float *)(v20 + 60) * 0.5;
    v41 = *(float *)(v20 + 64) * 0.5;
    v42 = *(float *)(v20 + 68);
    v43 = v42 * 0.5;
    v44 = (_QWORD *)*((_QWORD *)result + 16);
    v45 = *((_QWORD *)result + 14);
    v46 = *((_QWORD *)result + 13) * a2 / v13 + *((_QWORD *)result + 15);
    v47 = *(_QWORD *)(result + 36);
    v48 = *(unsigned __int8 *)(v20 + 132);
    if (v48 >= 0x11)
      v49 = 0;
    else
      v49 = 16 - v48;
    v50 = *(unsigned __int8 *)(v20 + 157);
    v51 = *(unsigned __int8 *)(v20 + 156);
    v52 = *(unsigned __int8 *)(v20 + 155);
    result = (unsigned __int8 *)*(unsigned __int8 *)(v20 + 154);
    v53 = v44[2];
    if (v53)
      v54 = v53 + v46 * v26 + 2 * v45;
    else
      v54 = 0;
    v57 = v44;
    v56 = *v44;
    v55 = v57[1];
    v58 = v55 == 0;
    v59 = v55 + v46 * v25 + 2 * v45;
    if (v58)
      v59 = 0;
    v60 = v56 + v46 * v24 + 2 * v45;
    v61 = *v22 + v23 * v18 + 4 * v47;
    v62 = v49;
    do
    {
      if (v17)
      {
        v63 = 0;
        v64 = v61;
        v65 = (_WORD *)v54;
        v66 = (_WORD *)v60;
        do
        {
          LOBYTE(v42) = result[v64];
          v67 = v28 * (float)LODWORD(v42);
          LOBYTE(v8) = *(_BYTE *)(v64 + v52);
          v68 = v28 * (float)LODWORD(v8);
          LOBYTE(v9) = *(_BYTE *)(v64 + v51);
          v69 = v28 * (float)LODWORD(v9);
          v70 = (float)((float)((float)(v35 * v68) + (float)(v34 * v67)) + (float)(v36 * v69)) + v29;
          v71 = v31;
          if (v70 <= v31)
          {
            v71 = (float)((float)((float)(v35 * v68) + (float)(v34 * v67)) + (float)(v36 * v69)) + v29;
            if (v70 < v29)
              v71 = v29;
          }
          v72 = *(unsigned __int8 *)(v64 + v50);
          LOBYTE(v70) = result[v64 + 4];
          v73 = v28 * (float)LODWORD(v70);
          LOBYTE(v10) = *(_BYTE *)(v64 + 4 + v52);
          v74 = v28 * (float)LODWORD(v10);
          LOBYTE(v11) = *(_BYTE *)(v64 + 4 + v51);
          v11 = v28 * (float)LODWORD(v11);
          v75 = *(unsigned __int8 *)(v64 + 4 + v50);
          v76 = (float)((float)((float)(v35 * v74) + (float)(v34 * v73)) + (float)(v36 * v11)) + v29;
          *v66 = llroundf(v71) << v62;
          v77 = v31;
          if (v76 <= v31)
          {
            v77 = (float)((float)((float)(v35 * v74) + (float)(v34 * v73)) + (float)(v36 * v11)) + v29;
            if (v76 < v29)
              v77 = v29;
          }
          v66[1] = llroundf(v77) << v62;
          v78 = v67 + v73;
          v79 = v68 + v74;
          v9 = v69 + v11;
          v10 = (float)((float)(v30 + (float)(v78 * v37)) + (float)(v79 * v38)) + (float)(v9 * v39);
          v80 = v33;
          if (v10 <= v33)
          {
            v80 = (float)((float)(v30 + (float)(v78 * v37)) + (float)(v79 * v38)) + (float)(v9 * v39);
            if (v10 < v32)
              v80 = v32;
          }
          v81 = (_WORD *)(v59 + 2 * v63);
          v42 = (float)((float)(v30 + (float)(v78 * v40)) + (float)(v79 * v41)) + (float)(v9 * v43);
          *v81 = llroundf(v80) << v62;
          v8 = v33;
          if (v42 <= v33)
          {
            v8 = v42;
            if (v42 < v32)
              v8 = v32;
          }
          v81[1] = llroundf(v8) << v62;
          if (v65)
          {
            *v65 = v72 | (v72 << 8);
            v65[1] = v75 | (v75 << 8);
            v65 += 2;
          }
          v64 += 8;
          v63 += 2;
          v66 += 2;
        }
        while (v17 > v63);
      }
      v61 += v23;
      v60 += v24;
      v59 += v25;
      v54 += v26;
      ++v16;
    }
    while (v16 != v19);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Tone_Mat_TRC_v216(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Tone_Mat_TRC_v216_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_TRC_Tone_Mat_TRC_v216_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  float v9;
  float v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  _WORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _WORD *v30;
  uint64_t v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  uint64_t v53;
  uint64_t v54;
  float v55;
  float v56;
  float v57;
  float v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _WORD *v64;
  _WORD *v65;
  uint64_t v66;
  float v77;
  float v78;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v94;
  float v95;
  float v97;
  float v98;
  float v100;
  float v101;
  float v102;
  float v104;
  float v105;
  unsigned int v111;
  float v112;
  float v113;
  float v114;
  float v116;
  float v117;
  float v118;
  float v119;
  BOOL v120;
  float v121;
  __int16 v122;
  float v123;
  __int16 v124;
  __int16 v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;

  v11 = *(_QWORD *)(result + 28);
  v12 = *result;
  v13 = v11 * a2 / v12;
  v14 = *((_QWORD *)result + 14);
  v15 = (_QWORD *)*((_QWORD *)result + 16);
  v16 = *((_QWORD *)result + 13) * a2 / v12 + *((_QWORD *)result + 15);
  v17 = (uint64_t *)*((_QWORD *)result + 17);
  v18 = (v11 + v11 * a2) / v12;
  v19 = (_WORD *)v15[1];
  if (v19)
    v19 = (_WORD *)((char *)v19 + 2 * v14 + v17[1] * v16);
  if (v18 != v13)
  {
    v20 = 0;
    v21 = *(_QWORD *)(result + 44);
    v22 = v13 + v21;
    v23 = **((_QWORD **)result + 8);
    v24 = *v17;
    v25 = *((_QWORD *)result + 19);
    v26 = *v15 + v24 * v16;
    v27 = *(_QWORD *)(result + 20);
    v28 = v18 + v21;
    v29 = **((_QWORD **)result + 7) + v23 * v22 + 4 * *(_QWORD *)(result + 36);
    v30 = (_WORD *)(v26 + 2 * v14);
    v31 = v28 - v22;
    LOWORD(a5) = *(_WORD *)(v25 + 144);
    LOWORD(a6) = *(_WORD *)(v25 + 146);
    LOWORD(a7) = *(_WORD *)(v25 + 148);
    LOWORD(a8) = *(_WORD *)(v25 + 150);
    LOWORD(a9) = *(_WORD *)(v25 + 152);
    v32 = 8191.0 / (float)*(unsigned int *)(v25 + 128);
    v33 = (float)LODWORD(a5);
    v34 = (float)LODWORD(a6);
    v35 = (float)LODWORD(a7);
    v36 = (float)LODWORD(a8);
    v37 = (float)LODWORD(a9);
    v38 = *(float *)(v25 + 36);
    v39 = *(float *)(v25 + 40);
    v40 = *(float *)(v25 + 44);
    v41 = 0.5;
    v131 = *(float *)(v25 + 48) * 0.5;
    v130 = *(float *)(v25 + 52) * 0.5;
    v129 = *(float *)(v25 + 56) * 0.5;
    v42 = *(float *)(v25 + 64);
    v128 = *(float *)(v25 + 60) * 0.5;
    v127 = v42 * 0.5;
    v43 = *(float *)(v25 + 72);
    v44 = *(float *)(v25 + 68) * 0.5;
    v126 = v44;
    v45 = *(float *)(v25 + 76);
    v46 = *(float *)(v25 + 80);
    v47 = *(float *)(v25 + 84);
    v48 = *(float *)(v25 + 88);
    v49 = *(float *)(v25 + 92);
    v50 = *(float *)(v25 + 96);
    v52 = *(float *)(v25 + 100);
    v51 = *(float *)(v25 + 104);
    v53 = v25 + 164;
    v54 = v25 + 16548;
    result = (unsigned __int8 *)(v25 + 32932);
    v55 = *(float *)(v25 + 108);
    v56 = *(float *)(v25 + 112);
    v57 = *(float *)(v25 + 116);
    v58 = *(float *)(v25 + 120);
    v59 = *(unsigned __int8 *)(v25 + 157);
    v60 = *(unsigned __int8 *)(v25 + 156);
    v61 = *(unsigned __int8 *)(v25 + 155);
    v62 = *(unsigned __int8 *)(v25 + 154);
    do
    {
      if (v27)
      {
        v63 = 0;
        v64 = v19;
        v65 = v30;
        v66 = v29;
        do
        {
          LOBYTE(v44) = *(_BYTE *)(v66 + v62);
          LOBYTE(v41) = *(_BYTE *)(v66 + v61);
          LOBYTE(v42) = *(_BYTE *)(v66 + v60);
          _H0 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v32 * (float)LODWORD(v44), 0.0), 8191.0)));
          __asm { FCVT            S14, H0 }
          _H0 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v32 * (float)LODWORD(v41), 0.0), 8191.0)));
          __asm { FCVT            S15, H0 }
          _H0 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v32 * (float)LODWORD(v42), 0.0), 8191.0)));
          __asm { FCVT            S18, H0 }
          v77 = (float)((float)((float)(v56 * _S15) + (float)(v55 * _S14)) + (float)(v57 * _S18))
              + (float)(v58 * fmaxf(_S14, fmaxf(_S15, _S18)));
          v78 = 8191.0;
          if (v77 <= 8191.0)
          {
            v78 = v77;
            if (v77 < 0.0)
              v78 = 0.0;
          }
          LOBYTE(v77) = *(_BYTE *)(v66 + 4 + v62);
          LOBYTE(v9) = *(_BYTE *)(v66 + 4 + v61);
          LOBYTE(v10) = *(_BYTE *)(v66 + 4 + v60);
          _H19 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v32 * (float)LODWORD(v77), 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          _H20 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v32 * (float)LODWORD(v9), 0.0), 8191.0)));
          _H21 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v32 * (float)LODWORD(v10), 0.0), 8191.0)));
          __asm
          {
            FCVT            S22, H20
            FCVT            S21, H21
          }
          _H0 = *(_WORD *)(v54 + 2 * llroundf(v78));
          __asm { FCVT            S0, H0 }
          v87 = _S14 * _S0;
          v88 = _S15 * _S0;
          v89 = _S18 * _S0;
          v90 = (float)((float)((float)(v56 * _S22) + (float)(v55 * _S19)) + (float)(v57 * _S21))
              + (float)(v58 * fmaxf(_S19, fmaxf(_S22, _S21)));
          v91 = 8191.0;
          if (v90 <= 8191.0)
          {
            v91 = v90;
            if (v90 < 0.0)
              v91 = 0.0;
          }
          _H18 = *(_WORD *)(v54 + 2 * llroundf(v91));
          __asm { FCVT            S18, H18 }
          v94 = _S19 * _S18;
          v95 = _S22 * _S18;
          _S18 = _S21 * _S18;
          v97 = (float)((float)(v45 * v88) + (float)(v87 * v43)) + (float)(v89 * v46);
          v98 = (float)((float)(v48 * v88) + (float)(v87 * v47)) + (float)(v89 * v49);
          _S0 = (float)((float)(v52 * v88) + (float)(v87 * v50)) + (float)(v89 * v51);
          v100 = (float)(v45 * v95) + (float)(v94 * v43);
          v101 = (float)(v48 * v95) + (float)(v94 * v47);
          v102 = (float)(v52 * v95) + (float)(v94 * v50);
          _S20 = v100 + (float)(_S18 * v46);
          v104 = v101 + (float)(_S18 * v49);
          v105 = v102 + (float)(_S18 * v51);
          LOWORD(_S18) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v97, 0.0), 8191.0))];
          __asm { FCVT            S21, H18 }
          LOWORD(_S18) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0))];
          __asm { FCVT            S22, H18 }
          LOWORD(_S0) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0))];
          __asm { FCVT            S15, H0 }
          LOWORD(_S0) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(_S20, 0.0), 8191.0))];
          LOWORD(_S20) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v104, 0.0), 8191.0))];
          __asm
          {
            FCVT            S18, H0
            FCVT            S14, H20
          }
          v111 = llroundf(fminf(fmaxf(v105, 0.0), 8191.0));
          v112 = (float)(v39 * _S22) + (float)(v38 * _S21);
          v113 = (float)(v34 + (float)((float)(_S21 + _S18) * v131)) + (float)((float)(_S22 + _S14) * v130);
          v114 = (float)(v34 + (float)((float)(_S21 + _S18) * v128)) + (float)((float)(_S22 + _S14) * v127);
          LOWORD(_S0) = *(_WORD *)&result[2 * v111];
          __asm { FCVT            S0, H0 }
          v116 = v112 + (float)(v40 * _S15);
          v117 = v113 + (float)((float)(_S15 + _S0) * v129);
          v118 = v114 + (float)((float)(_S15 + _S0) * v126);
          if (v117 < v33)
            v119 = v33;
          else
            v119 = v117;
          v120 = v117 <= v35;
          v121 = v116 + v33;
          if (!v120)
            v119 = v35;
          v122 = llroundf(v119);
          if (v121 < v36)
            v123 = v36;
          else
            v123 = v116 + v33;
          v124 = *(unsigned __int8 *)(v66 + v59);
          v125 = *(unsigned __int8 *)(v66 + 4 + v59);
          *v65 = v122;
          if (v121 <= v37)
            v9 = v123;
          else
            v9 = v37;
          v65[1] = llroundf(v9);
          v10 = v35;
          if (v118 <= v35)
          {
            v10 = v118;
            if (v118 < v33)
              v10 = v33;
          }
          v42 = v39 * _S14;
          v44 = (float)((float)((float)(v39 * _S14) + (float)(v38 * _S18)) + (float)(v40 * _S0)) + v33;
          v65[2] = llroundf(v10);
          v41 = v37;
          if (v44 <= v37)
          {
            v41 = v44;
            if (v44 < v36)
              v41 = v36;
          }
          v65[3] = llroundf(v41);
          if (v64)
          {
            *v64 = v124 | (v124 << 8);
            v64[1] = v125 | (v125 << 8);
            v64 += 2;
          }
          v66 += 8;
          v63 += 2;
          v65 += 4;
        }
        while (v27 > v63);
      }
      v29 += v23;
      v30 = (_WORD *)((char *)v30 + v24);
      ++v20;
    }
    while (v20 != v31);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Mat_TRC_v216(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Mat_TRC_v216_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_TRC_Mat_TRC_v216_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  float v9;
  float v10;
  float v12;
  float v13;
  float v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  _WORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _WORD *v34;
  uint64_t v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  _WORD *v65;
  _WORD *v66;
  unsigned int v67;
  float v68;
  unsigned int v83;
  float v87;
  float v88;
  float v89;
  float v91;
  float v92;
  float v93;
  unsigned int v99;
  float v100;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  __int16 v109;
  float v110;
  __int16 v111;
  __int16 v112;
  float v113;
  float v114;

  v15 = *(_QWORD *)(result + 28);
  v16 = *result;
  v17 = v15 * a2 / v16;
  v18 = *((_QWORD *)result + 14);
  v19 = (_QWORD *)*((_QWORD *)result + 16);
  v20 = *((_QWORD *)result + 13) * a2 / v16 + *((_QWORD *)result + 15);
  v21 = (uint64_t *)*((_QWORD *)result + 17);
  v22 = (v15 + v15 * a2) / v16;
  v23 = (_WORD *)v19[1];
  if (v23)
    v23 = (_WORD *)((char *)v23 + 2 * v18 + v21[1] * v20);
  if (v22 != v17)
  {
    v24 = 0;
    v25 = *(_QWORD *)(result + 44);
    v26 = v17 + v25;
    v27 = **((_QWORD **)result + 8);
    v28 = *v21;
    v29 = *((_QWORD *)result + 19);
    v30 = *v19 + v28 * v20;
    v31 = *(_QWORD *)(result + 20);
    v32 = v22 + v25;
    v33 = **((_QWORD **)result + 7) + v27 * v26 + 4 * *(_QWORD *)(result + 36);
    v34 = (_WORD *)(v30 + 2 * v18);
    v35 = v32 - v26;
    LOWORD(a5) = *(_WORD *)(v29 + 144);
    LOWORD(a6) = *(_WORD *)(v29 + 146);
    LOWORD(a7) = *(_WORD *)(v29 + 148);
    LOWORD(a8) = *(_WORD *)(v29 + 150);
    LOWORD(a9) = *(_WORD *)(v29 + 152);
    v36 = 8191.0 / (float)*(unsigned int *)(v29 + 128);
    v37 = (float)LODWORD(a5);
    v38 = (float)LODWORD(a6);
    v39 = (float)LODWORD(a7);
    v40 = (float)LODWORD(a8);
    v41 = (float)LODWORD(a9);
    v42 = *(float *)(v29 + 36);
    v43 = *(float *)(v29 + 40);
    v44 = *(float *)(v29 + 44);
    v113 = *(float *)(v29 + 52) * 0.5;
    v114 = *(float *)(v29 + 48) * 0.5;
    v45 = *(float *)(v29 + 56) * 0.5;
    v46 = *(float *)(v29 + 60) * 0.5;
    v47 = *(float *)(v29 + 64) * 0.5;
    v48 = *(float *)(v29 + 72);
    v49 = *(float *)(v29 + 68) * 0.5;
    v50 = *(float *)(v29 + 76);
    v51 = *(float *)(v29 + 80);
    v52 = *(float *)(v29 + 84);
    v53 = *(float *)(v29 + 88);
    v54 = *(float *)(v29 + 92);
    v55 = *(float *)(v29 + 96);
    v57 = *(float *)(v29 + 100);
    v56 = *(float *)(v29 + 104);
    v58 = v29 + 164;
    v59 = v29 + 16548;
    result = (unsigned __int8 *)*(unsigned __int8 *)(v29 + 157);
    v60 = *(unsigned __int8 *)(v29 + 156);
    v61 = *(unsigned __int8 *)(v29 + 155);
    v62 = *(unsigned __int8 *)(v29 + 154);
    do
    {
      if (v31)
      {
        v63 = 0;
        v64 = v33;
        v65 = v23;
        v66 = v34;
        do
        {
          LOBYTE(v9) = *(_BYTE *)(v64 + v62);
          LOBYTE(v10) = *(_BYTE *)(v64 + v61);
          LOBYTE(_S12) = *(_BYTE *)(v64 + v60);
          LOBYTE(v12) = *(_BYTE *)(v64 + 4 + v62);
          LOBYTE(v13) = *(_BYTE *)(v64 + 4 + v61);
          LOBYTE(v14) = *(_BYTE *)(v64 + 4 + v60);
          v67 = llroundf(fminf(fmaxf(v36 * (float)LODWORD(v9), 0.0), 8191.0));
          v68 = v36 * (float)LODWORD(v14);
          _H15 = *(_WORD *)(v58 + 2 * v67);
          __asm { FCVT            S15, H15 }
          _H11 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v36 * (float)LODWORD(v10), 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          _H12 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v36 * (float)LODWORD(_S12), 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          _H13 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v36 * (float)LODWORD(v12), 0.0), 8191.0)));
          _H14 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v36 * (float)LODWORD(v13), 0.0), 8191.0)));
          __asm
          {
            FCVT            S13, H13
            FCVT            S14, H14
          }
          v83 = llroundf(fminf(fmaxf(v68, 0.0), 8191.0));
          _S10 = (float)((float)(v50 * _S11) + (float)(_S15 * v48)) + (float)(_S12 * v51);
          _S18 = (float)((float)(v53 * _S11) + (float)(_S15 * v52)) + (float)(_S12 * v54);
          _S11 = (float)((float)(v57 * _S11) + (float)(_S15 * v55)) + (float)(_S12 * v56);
          v87 = (float)(v50 * _S14) + (float)(_S13 * v48);
          v88 = (float)(v53 * _S14) + (float)(_S13 * v52);
          v89 = (float)(v57 * _S14) + (float)(_S13 * v55);
          LOWORD(_S14) = *(_WORD *)(v58 + 2 * v83);
          __asm { FCVT            S14, H14 }
          v91 = v87 + (float)(_S14 * v51);
          v92 = v88 + (float)(_S14 * v54);
          v93 = v89 + (float)(_S14 * v56);
          LOWORD(_S10) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(_S10, 0.0), 8191.0)));
          __asm { FCVT            S14, H10 }
          LOWORD(_S18) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(_S18, 0.0), 8191.0)));
          __asm { FCVT            S18, H18 }
          LOWORD(_S10) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(_S11, 0.0), 8191.0)));
          __asm { FCVT            S19, H10 }
          LOWORD(_S10) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          LOWORD(_S11) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          __asm
          {
            FCVT            S10, H10
            FCVT            S11, H11
          }
          v99 = llroundf(fminf(fmaxf(v93, 0.0), 8191.0));
          v100 = (float)(v43 * _S18) + (float)(v42 * _S14);
          _S12 = _S14 + _S10;
          v102 = _S18 + _S11;
          v103 = (float)(v38 + (float)((float)(_S14 + _S10) * v114)) + (float)(v102 * v113);
          v104 = (float)(v38 + (float)(_S12 * v46)) + (float)(v102 * v47);
          LOWORD(_S12) = *(_WORD *)(v59 + 2 * v99);
          __asm { FCVT            S12, H12 }
          v14 = v100 + (float)(v44 * _S19);
          v105 = _S19 + _S12;
          v106 = v103 + (float)(v105 * v45);
          v12 = v104 + (float)(v105 * v49);
          if (v106 < v37)
            v107 = v37;
          else
            v107 = v106;
          v108 = v14 + v37;
          if (v106 > v39)
            v107 = v39;
          v109 = llroundf(v107);
          if (v108 < v40)
            v110 = v40;
          else
            v110 = v14 + v37;
          v111 = result[v64];
          v112 = result[v64 + 4];
          *v66 = v109;
          if (v108 > v41)
            v110 = v41;
          v66[1] = llroundf(v110);
          v13 = v39;
          if (v12 <= v39)
          {
            v13 = v12;
            if (v12 < v37)
              v13 = v37;
          }
          v9 = (float)((float)((float)(v43 * _S11) + (float)(v42 * _S10)) + (float)(v44 * _S12)) + v37;
          v66[2] = llroundf(v13);
          v10 = v41;
          if (v9 <= v41)
          {
            v10 = v9;
            if (v9 < v40)
              v10 = v40;
          }
          v66[3] = llroundf(v10);
          if (v65)
          {
            *v65 = v111 | (v111 << 8);
            v65[1] = v112 | (v112 << 8);
            v65 += 2;
          }
          v64 += 8;
          v63 += 2;
          v66 += 4;
        }
        while (v31 > v63);
      }
      v33 += v27;
      v34 = (_WORD *)((char *)v34 + v28);
      ++v24;
    }
    while (v24 != v35);
  }
  return result;
}

uint64_t vt_Copy_BGRA_rgb_v216(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_rgb_v216_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_rgb_v216_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  float v8;
  float v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  _WORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _WORD *v29;
  uint64_t v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _WORD *v52;
  _WORD *v53;
  unsigned int v54;
  float v55;
  unsigned int v56;
  float v57;
  __int16 v58;
  float v59;
  float v60;
  float v61;
  __int16 v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;

  v10 = *(_QWORD *)(result + 28);
  v11 = *result;
  v12 = v10 * a2 / v11;
  v13 = *((_QWORD *)result + 14);
  v14 = (_QWORD *)*((_QWORD *)result + 16);
  v15 = *((_QWORD *)result + 13) * a2 / v11 + *((_QWORD *)result + 15);
  v16 = (uint64_t *)*((_QWORD *)result + 17);
  v17 = (v10 + v10 * a2) / v11;
  v18 = (_WORD *)v14[1];
  if (v18)
    v18 = (_WORD *)((char *)v18 + 2 * v13 + v16[1] * v15);
  if (v17 != v12)
  {
    v19 = 0;
    v20 = *(_QWORD *)(result + 44);
    v21 = v12 + v20;
    v22 = **((_QWORD **)result + 8);
    v23 = *v16;
    v24 = *v14 + v23 * v15;
    v25 = *((_QWORD *)result + 19);
    v26 = *(_QWORD *)(result + 20);
    v27 = v17 + v20;
    v28 = **((_QWORD **)result + 7) + v22 * v21 + 4 * *(_QWORD *)(result + 36);
    v29 = (_WORD *)(v24 + 2 * v13);
    v30 = v27 - v21;
    LOWORD(a5) = *(_WORD *)(v25 + 144);
    LOWORD(a6) = *(_WORD *)(v25 + 146);
    v31 = (float)*(unsigned int *)(v25 + 136) / (float)*(unsigned int *)(v25 + 128);
    v32 = (float)LODWORD(a5);
    v33 = (float)LODWORD(a6);
    LOWORD(a6) = *(_WORD *)(v25 + 148);
    v34 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v25 + 150);
    v35 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v25 + 152);
    v36 = (float)LODWORD(a8);
    v37 = *(float *)(v25 + 36);
    v38 = *(float *)(v25 + 40);
    v39 = *(float *)(v25 + 44);
    v40 = *(float *)(v25 + 48) * 0.5;
    v41 = *(float *)(v25 + 52) * 0.5;
    v42 = *(float *)(v25 + 56) * 0.5;
    v43 = *(float *)(v25 + 60) * 0.5;
    v44 = *(float *)(v25 + 64) * 0.5;
    v45 = *(float *)(v25 + 68);
    v46 = v45 * 0.5;
    v47 = *(unsigned __int8 *)(v25 + 157);
    v48 = *(unsigned __int8 *)(v25 + 156);
    result = (unsigned __int8 *)*(unsigned __int8 *)(v25 + 155);
    v49 = *(unsigned __int8 *)(v25 + 154);
    do
    {
      if (v26)
      {
        v50 = 0;
        v51 = v28;
        v52 = v18;
        v53 = v29;
        do
        {
          LOBYTE(v45) = *(_BYTE *)(v51 + v49);
          *(float *)&v54 = (float)LODWORD(v45);
          v55 = v31 * *(float *)&v54;
          LOBYTE(v54) = result[v51];
          *(float *)&v56 = (float)v54;
          v57 = v31 * *(float *)&v56;
          LOBYTE(v56) = *(_BYTE *)(v51 + v48);
          v58 = *(unsigned __int8 *)(v51 + v47);
          LOBYTE(v8) = *(_BYTE *)(v51 + 4 + v49);
          v59 = v31 * (float)v56;
          v60 = v31 * (float)LODWORD(v8);
          LOBYTE(v8) = result[v51 + 4];
          v61 = v31 * (float)LODWORD(v8);
          LOBYTE(v9) = *(_BYTE *)(v51 + 4 + v48);
          v62 = *(unsigned __int8 *)(v51 + 4 + v47);
          v9 = v31 * (float)LODWORD(v9);
          v63 = (float)((float)((float)(v38 * v57) + (float)(v37 * v55)) + (float)(v39 * v59)) + v32;
          v64 = v55 + v60;
          v65 = v57 + v61;
          v66 = v59 + v9;
          v67 = (float)((float)(v33 + (float)(v64 * v40)) + (float)(v65 * v41)) + (float)(v66 * v42);
          v68 = (float)((float)(v33 + (float)(v64 * v43)) + (float)(v65 * v44)) + (float)(v66 * v46);
          if (v67 < v32)
            v69 = v32;
          else
            v69 = v67;
          if (v67 > v34)
            v69 = v34;
          *v53 = llroundf(v69);
          if (v63 < v35)
            v70 = v35;
          else
            v70 = v63;
          if (v63 > v36)
            v70 = v36;
          v53[1] = llroundf(v70);
          v71 = v34;
          if (v68 <= v34)
          {
            v71 = v68;
            if (v68 < v32)
              v71 = v32;
          }
          v45 = (float)((float)((float)(v38 * v61) + (float)(v37 * v60)) + (float)(v39 * v9)) + v32;
          v53[2] = llroundf(v71);
          v8 = v36;
          if (v45 <= v36)
          {
            v8 = v45;
            if (v45 < v35)
              v8 = v35;
          }
          v53[3] = llroundf(v8);
          if (v52)
          {
            *v52 = v58 | (v58 << 8);
            v52[1] = v62 | (v62 << 8);
            v52 += 2;
          }
          v51 += 8;
          v50 += 2;
          v53 += 4;
        }
        while (v26 > v50);
      }
      v28 += v22;
      v29 = (_WORD *)((char *)v29 + v23);
      ++v19;
    }
    while (v19 != v30);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Tone_Mat_TRC_444vf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Tone_Mat_TRC_444vf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_TRC_Tone_Mat_TRC_444vf_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float v46;
  float v47;
  float v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int8 *v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE *v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int8 *v64;
  _BYTE *v65;
  _BYTE *v66;
  uint64_t v67;
  float v69;
  unsigned int v76;
  float v80;
  float v81;
  float v85;
  float v86;
  float v87;
  float v88;
  unsigned __int8 v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;

  v3 = *(_QWORD *)(result + 28);
  v4 = *result;
  v5 = v3 * a2 / v4;
  v6 = (v3 + v3 * a2) / v4;
  if (v6 != v5)
  {
    v7 = 0;
    v8 = *(_QWORD *)(result + 20);
    v9 = v5 + *(_QWORD *)(result + 44);
    v10 = v6 - v5;
    v11 = *((_QWORD *)result + 19);
    v12 = (uint64_t *)*((_QWORD *)result + 17);
    v13 = (_QWORD *)*((_QWORD *)result + 7);
    v14 = **((_QWORD **)result + 8);
    v15 = *v12;
    v16 = v12[1];
    v17 = v12[2];
    *(float *)&v18 = (float)*(unsigned int *)(v11 + 128);
    v19 = 8191.0 / *(float *)&v18;
    LOWORD(v18) = *(_WORD *)(v11 + 144);
    v20 = (float)v18;
    LOWORD(v18) = *(_WORD *)(v11 + 146);
    v21 = (float)v18;
    LOWORD(v18) = *(_WORD *)(v11 + 148);
    v22 = (float)v18;
    LOWORD(v18) = *(_WORD *)(v11 + 150);
    v23 = (float)v18;
    LOWORD(v18) = *(_WORD *)(v11 + 152);
    v24 = (float)v18;
    v25 = *(float *)(v11 + 36);
    v26 = *(float *)(v11 + 40);
    v28 = *(float *)(v11 + 44);
    v27 = *(float *)(v11 + 48);
    v96 = *(float *)(v11 + 52);
    v97 = v27;
    v29 = *(float *)(v11 + 56);
    v30 = *(float *)(v11 + 60);
    v95 = v29;
    v31 = *(float *)(v11 + 64);
    v32 = *(float *)(v11 + 68);
    v33 = *(float *)(v11 + 72);
    v34 = *(float *)(v11 + 76);
    v35 = *(float *)(v11 + 80);
    v36 = *(float *)(v11 + 84);
    v37 = *(float *)(v11 + 88);
    v38 = *(float *)(v11 + 92);
    v39 = *(float *)(v11 + 96);
    v40 = *(float *)(v11 + 100);
    v41 = *(float *)(v11 + 104);
    v42 = *(float *)(v11 + 108);
    v43 = v11 + 164;
    v44 = v11 + 16548;
    v45 = v11 + 32932;
    v46 = *(float *)(v11 + 112);
    v47 = *(float *)(v11 + 116);
    v48 = *(float *)(v11 + 120);
    v49 = (uint64_t *)*((_QWORD *)result + 16);
    v50 = *((_QWORD *)result + 14);
    v51 = *((_QWORD *)result + 13) * a2 / v4 + *((_QWORD *)result + 15);
    v52 = *(_QWORD *)(result + 36);
    result = (unsigned __int8 *)*(unsigned __int8 *)(v11 + 157);
    v53 = *(unsigned __int8 *)(v11 + 156);
    v54 = *(unsigned __int8 *)(v11 + 155);
    v55 = *(unsigned __int8 *)(v11 + 154);
    v56 = v49[2];
    if (v56)
      v57 = (unsigned __int8 *)(v56 + v51 * v17 + v50);
    else
      v57 = 0;
    v59 = *v49;
    v58 = v49[1];
    v60 = (_BYTE *)(v58 + v51 * v16 + v50);
    if (!v58)
      v60 = 0;
    v61 = (_BYTE *)(v59 + v51 * v15 + v50);
    v62 = *v13 + v14 * v9 + 4 * v52;
    do
    {
      if (v8)
      {
        v63 = v8;
        v64 = v57;
        v65 = v60;
        v66 = v61;
        v67 = v62;
        do
        {
          LOBYTE(v29) = *(_BYTE *)(v67 + v55);
          LOBYTE(v27) = *(_BYTE *)(v67 + v54);
          LOBYTE(_S18) = *(_BYTE *)(v67 + v53);
          _H0 = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v19 * (float)LODWORD(v29), 0.0), 8191.0)));
          v69 = v19 * (float)LODWORD(_S18);
          __asm { FCVT            S18, H0 }
          _H0 = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v19 * (float)LODWORD(v27), 0.0), 8191.0)));
          v76 = llroundf(fminf(fmaxf(v69, 0.0), 8191.0));
          __asm { FCVT            S14, H0 }
          _H0 = *(_WORD *)(v43 + 2 * v76);
          __asm { FCVT            S15, H0 }
          v80 = (float)((float)((float)(v46 * _S14) + (float)(v42 * _S18)) + (float)(v47 * _S15))
              + (float)(v48 * fmaxf(_S18, fmaxf(_S14, _S15)));
          v81 = 8191.0;
          if (v80 <= 8191.0)
          {
            v81 = v80;
            if (v80 < 0.0)
              v81 = 0.0;
          }
          _H0 = *(_WORD *)(v44 + 2 * llroundf(v81));
          __asm { FCVT            S0, H0 }
          _S6 = _S18 * _S0;
          v85 = _S14 * _S0;
          v86 = _S15 * _S0;
          v87 = (float)((float)(v34 * v85) + (float)(_S6 * v33)) + (float)(v86 * v35);
          v88 = (float)((float)(v37 * v85) + (float)(_S6 * v36)) + (float)(v86 * v38);
          _S0 = (float)((float)(v40 * v85) + (float)(_S6 * v39)) + (float)(v86 * v41);
          LOWORD(_S6) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          __asm { FCVT            S14, H6 }
          LOWORD(_S6) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          __asm { FCVT            S15, H6 }
          LOWORD(_S0) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          __asm { FCVT            S18, H0 }
          v29 = (float)((float)((float)(v26 * _S15) + (float)(v25 * _S14)) + (float)(v28 * _S18)) + v20;
          v27 = v22;
          if (v29 <= v22)
          {
            v27 = (float)((float)((float)(v26 * _S15) + (float)(v25 * _S14)) + (float)(v28 * _S18)) + v20;
            if (v29 < v20)
              v27 = v20;
          }
          v92 = result[v67];
          *v66++ = llroundf(v27);
          if (v65)
          {
            v93 = (float)((float)(v21 + (float)(_S14 * v97)) + (float)(_S15 * v96)) + (float)(_S18 * v95);
            v94 = v24;
            if (v93 <= v24)
            {
              v94 = (float)((float)(v21 + (float)(_S14 * v97)) + (float)(_S15 * v96)) + (float)(_S18 * v95);
              if (v93 < v23)
                v94 = v23;
            }
            v29 = (float)(v21 + (float)(_S14 * v30)) + (float)(_S15 * v31);
            _S18 = v29 + (float)(_S18 * v32);
            *v65 = llroundf(v94);
            v27 = v24;
            if (_S18 <= v24)
            {
              v27 = _S18;
              if (_S18 < v23)
                v27 = v23;
            }
            v65[1] = llroundf(v27);
            v65 += 2;
          }
          if (v64)
            *v64++ = v92;
          v67 += 4;
          --v63;
        }
        while (v63);
      }
      v62 += v14;
      v61 += v15;
      v60 += v16;
      v57 += v17;
      ++v7;
    }
    while (v7 != v10);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Mat_TRC_444vf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Mat_TRC_444vf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_TRC_Mat_TRC_444vf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  _BYTE *v70;
  _BYTE *v71;
  unsigned int v72;
  float v83;
  float v84;
  float v86;
  float v87;
  char v88;
  float v89;
  float v90;

  v12 = *(_QWORD *)(result + 28);
  v13 = *result;
  v14 = v12 * a2 / v13;
  v15 = (v12 + v12 * a2) / v13;
  if (v15 != v14)
  {
    v16 = 0;
    v17 = *(_QWORD *)(result + 20);
    v18 = v14 + *(_QWORD *)(result + 44);
    v19 = v15 - v14;
    v20 = *((_QWORD *)result + 19);
    v21 = (uint64_t *)*((_QWORD *)result + 17);
    v22 = (_QWORD *)*((_QWORD *)result + 7);
    v23 = **((_QWORD **)result + 8);
    v24 = *v21;
    v25 = v21[1];
    v26 = v21[2];
    v27 = 8191.0 / (float)*(unsigned int *)(v20 + 128);
    LOWORD(a5) = *(_WORD *)(v20 + 144);
    v28 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v20 + 146);
    v29 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v20 + 148);
    v30 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v20 + 150);
    v31 = (float)LODWORD(a8);
    LOWORD(a9) = *(_WORD *)(v20 + 152);
    v32 = (float)LODWORD(a9);
    v33 = *(float *)(v20 + 36);
    v34 = *(float *)(v20 + 40);
    v35 = *(float *)(v20 + 44);
    v36 = *(float *)(v20 + 48);
    v37 = *(float *)(v20 + 52);
    v38 = *(float *)(v20 + 56);
    v39 = *(float *)(v20 + 60);
    v40 = *(float *)(v20 + 64);
    v41 = *(float *)(v20 + 68);
    v42 = *(float *)(v20 + 72);
    v43 = *(float *)(v20 + 76);
    v44 = *(float *)(v20 + 80);
    v45 = *(float *)(v20 + 84);
    v46 = *(float *)(v20 + 88);
    v47 = *(float *)(v20 + 92);
    v48 = *(float *)(v20 + 96);
    v50 = *(float *)(v20 + 100);
    v49 = *(float *)(v20 + 104);
    v51 = v20 + 164;
    v52 = v20 + 16548;
    v53 = (uint64_t *)*((_QWORD *)result + 16);
    v54 = *((_QWORD *)result + 14);
    v55 = *((_QWORD *)result + 13) * a2 / v13 + *((_QWORD *)result + 15);
    v56 = *(_QWORD *)(result + 36);
    v57 = *(unsigned __int8 *)(v20 + 157);
    result = (unsigned __int8 *)*(unsigned __int8 *)(v20 + 156);
    v58 = *(unsigned __int8 *)(v20 + 155);
    v59 = *(unsigned __int8 *)(v20 + 154);
    v60 = v53[2];
    if (v60)
      v61 = (_BYTE *)(v60 + v55 * v26 + v54);
    else
      v61 = 0;
    v63 = *v53;
    v62 = v53[1];
    v64 = (_BYTE *)(v62 + v55 * v25 + v54);
    if (!v62)
      v64 = 0;
    v65 = (_BYTE *)(v63 + v55 * v24 + v54);
    v66 = *v22 + v23 * v18 + 4 * v56;
    do
    {
      if (v17)
      {
        v67 = v17;
        v68 = v66;
        v69 = v61;
        v70 = v64;
        v71 = v65;
        do
        {
          LOBYTE(_S10) = *(_BYTE *)(v68 + v59);
          LOBYTE(_S11) = *(_BYTE *)(v68 + v58);
          LOBYTE(_S12) = result[v68];
          v72 = llroundf(fminf(fmaxf(v27 * (float)LODWORD(_S10), 0.0), 8191.0));
          _S10 = v27 * (float)LODWORD(_S12);
          _H12 = *(_WORD *)(v51 + 2 * v72);
          __asm { FCVT            S12, H12 }
          _H11 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v27 * (float)LODWORD(_S11), 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          LOWORD(_S10) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(_S10, 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          v83 = (float)((float)(v43 * _S11) + (float)(_S12 * v42)) + (float)(_S10 * v44);
          v84 = (float)((float)(v46 * _S11) + (float)(_S12 * v45)) + (float)(_S10 * v47);
          _S12 = (float)((float)(v50 * _S11) + (float)(_S12 * v48)) + (float)(_S10 * v49);
          LOWORD(_S10) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          LOWORD(_S11) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          LOWORD(_S12) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S12, 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          v86 = (float)((float)((float)(v34 * _S11) + (float)(v33 * _S10)) + (float)(v35 * _S12)) + v28;
          v87 = v30;
          if (v86 <= v30)
          {
            v87 = (float)((float)((float)(v34 * _S11) + (float)(v33 * _S10)) + (float)(v35 * _S12)) + v28;
            if (v86 < v28)
              v87 = v28;
          }
          v88 = *(_BYTE *)(v68 + v57);
          *v71++ = llroundf(v87);
          if (v70)
          {
            v89 = (float)((float)(v29 + (float)(_S10 * v36)) + (float)(_S11 * v37)) + (float)(_S12 * v38);
            v90 = v32;
            if (v89 <= v32)
            {
              v90 = (float)((float)(v29 + (float)(_S10 * v36)) + (float)(_S11 * v37)) + (float)(_S12 * v38);
              if (v89 < v31)
                v90 = v31;
            }
            _S10 = (float)((float)(v29 + (float)(_S10 * v39)) + (float)(_S11 * v40)) + (float)(_S12 * v41);
            *v70 = llroundf(v90);
            _S11 = v32;
            if (_S10 <= v32)
            {
              _S11 = _S10;
              if (_S10 < v31)
                _S11 = v31;
            }
            v70[1] = llroundf(_S11);
            v70 += 2;
          }
          if (v69)
            *v69++ = v88;
          v68 += 4;
          --v67;
        }
        while (v67);
      }
      v66 += v23;
      v65 += v24;
      v64 += v25;
      v61 += v26;
      ++v16;
    }
    while (v16 != v19);
  }
  return result;
}

uint64_t vt_Copy_BGRA_rgb_444vf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_rgb_444vf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_rgb_444vf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  float v8;
  float v9;
  float v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  BOOL v54;
  _BYTE *v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE *v60;
  _BYTE *v61;
  _BYTE *v62;
  float v63;
  float v64;
  char v65;
  float v66;
  float v67;

  v11 = *(_QWORD *)(result + 28);
  v12 = *result;
  v13 = v11 * a2 / v12;
  v14 = (v11 + v11 * a2) / v12;
  if (v14 != v13)
  {
    v15 = 0;
    v16 = *(_QWORD *)(result + 20);
    v17 = v13 + *(_QWORD *)(result + 44);
    v18 = v14 - v13;
    v19 = *((_QWORD *)result + 19);
    v20 = (uint64_t *)*((_QWORD *)result + 17);
    v21 = (_QWORD *)*((_QWORD *)result + 7);
    v22 = **((_QWORD **)result + 8);
    v23 = *v20;
    v24 = v20[1];
    v25 = v20[2];
    *(float *)&v26 = (float)*(unsigned int *)(v19 + 136);
    v27 = *(float *)&v26 / (float)*(unsigned int *)(v19 + 128);
    LOWORD(v26) = *(_WORD *)(v19 + 144);
    v28 = (float)v26;
    LOWORD(a5) = *(_WORD *)(v19 + 146);
    v29 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v19 + 148);
    v30 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v19 + 150);
    v31 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v19 + 152);
    v32 = (float)LODWORD(a8);
    v33 = *(float *)(v19 + 36);
    v34 = *(float *)(v19 + 40);
    v35 = *(float *)(v19 + 44);
    v36 = *(float *)(v19 + 48);
    v37 = *(float *)(v19 + 52);
    v38 = *(float *)(v19 + 56);
    v39 = *(float *)(v19 + 60);
    v40 = *(float *)(v19 + 64);
    v41 = *(float *)(v19 + 68);
    v42 = (_QWORD *)*((_QWORD *)result + 16);
    v43 = *((_QWORD *)result + 14);
    v44 = *((_QWORD *)result + 13) * a2 / v12 + *((_QWORD *)result + 15);
    v45 = *(_QWORD *)(result + 36);
    v46 = *(unsigned __int8 *)(v19 + 157);
    v47 = *(unsigned __int8 *)(v19 + 156);
    v48 = *(unsigned __int8 *)(v19 + 155);
    result = (unsigned __int8 *)*(unsigned __int8 *)(v19 + 154);
    v49 = v42[2];
    if (v49)
      v50 = (_BYTE *)(v49 + v44 * v25 + v43);
    else
      v50 = 0;
    v53 = v42;
    v52 = *v42;
    v51 = v53[1];
    v54 = v51 == 0;
    v55 = (_BYTE *)(v51 + v44 * v24 + v43);
    if (v54)
      v55 = 0;
    v56 = (_BYTE *)(v52 + v44 * v23 + v43);
    v57 = *v21 + v22 * v17 + 4 * v45;
    do
    {
      if (v16)
      {
        v58 = v16;
        v59 = v57;
        v60 = v50;
        v61 = v55;
        v62 = v56;
        do
        {
          LOBYTE(v8) = result[v59];
          v8 = v27 * (float)LODWORD(v8);
          LOBYTE(v9) = *(_BYTE *)(v59 + v48);
          v9 = v27 * (float)LODWORD(v9);
          LOBYTE(v10) = *(_BYTE *)(v59 + v47);
          v10 = v27 * (float)LODWORD(v10);
          v63 = (float)((float)((float)(v34 * v9) + (float)(v33 * v8)) + (float)(v35 * v10)) + v28;
          v64 = v30;
          if (v63 <= v30)
          {
            v64 = (float)((float)((float)(v34 * v9) + (float)(v33 * v8)) + (float)(v35 * v10)) + v28;
            if (v63 < v28)
              v64 = v28;
          }
          v65 = *(_BYTE *)(v59 + v46);
          *v62++ = llroundf(v64);
          if (v61)
          {
            v66 = (float)((float)(v29 + (float)(v8 * v36)) + (float)(v9 * v37)) + (float)(v10 * v38);
            v67 = v32;
            if (v66 <= v32)
            {
              v67 = (float)((float)(v29 + (float)(v8 * v36)) + (float)(v9 * v37)) + (float)(v10 * v38);
              if (v66 < v31)
                v67 = v31;
            }
            v8 = (float)((float)(v29 + (float)(v8 * v39)) + (float)(v9 * v40)) + (float)(v10 * v41);
            *v61 = llroundf(v67);
            v9 = v32;
            if (v8 <= v32)
            {
              v9 = v8;
              if (v8 < v31)
                v9 = v31;
            }
            v61[1] = llroundf(v9);
            v61 += 2;
          }
          if (v60)
            *v60++ = v65;
          v59 += 4;
          --v58;
        }
        while (v58);
      }
      v57 += v22;
      v56 += v23;
      v55 += v24;
      v50 += v25;
      ++v15;
    }
    while (v15 != v18);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Tone_Mat_TRC_xf444(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Tone_Mat_TRC_xf444_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_TRC_Tone_Mat_TRC_xf444_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float v46;
  float v47;
  float v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unsigned int v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  _WORD *v67;
  _WORD *v68;
  _WORD *v69;
  uint64_t v70;
  float v72;
  unsigned int v79;
  float v83;
  float v84;
  float v88;
  float v89;
  float v90;
  float v91;
  __int16 v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;

  v3 = *(_QWORD *)(result + 28);
  v4 = *result;
  v5 = v3 * a2 / v4;
  v6 = (v3 + v3 * a2) / v4;
  if (v6 != v5)
  {
    v7 = 0;
    v8 = *(_QWORD *)(result + 20);
    v9 = v5 + *(_QWORD *)(result + 44);
    v10 = v6 - v5;
    v11 = *((_QWORD *)result + 19);
    v12 = (uint64_t *)*((_QWORD *)result + 17);
    v13 = (_QWORD *)*((_QWORD *)result + 7);
    v14 = **((_QWORD **)result + 8);
    v15 = *v12;
    v16 = v12[1];
    v17 = v12[2];
    *(float *)&v18 = (float)*(unsigned int *)(v11 + 128);
    v19 = 8191.0 / *(float *)&v18;
    LOWORD(v18) = *(_WORD *)(v11 + 144);
    v20 = (float)v18;
    LOWORD(v18) = *(_WORD *)(v11 + 146);
    v21 = (float)v18;
    LOWORD(v18) = *(_WORD *)(v11 + 148);
    v22 = (float)v18;
    LOWORD(v18) = *(_WORD *)(v11 + 150);
    v23 = (float)v18;
    LOWORD(v18) = *(_WORD *)(v11 + 152);
    v24 = (float)v18;
    v25 = *(float *)(v11 + 36);
    v26 = *(float *)(v11 + 40);
    v28 = *(float *)(v11 + 44);
    v27 = *(float *)(v11 + 48);
    v99 = *(float *)(v11 + 52);
    v100 = v27;
    v29 = *(float *)(v11 + 56);
    v30 = *(float *)(v11 + 60);
    v98 = v29;
    v31 = *(float *)(v11 + 64);
    v32 = *(float *)(v11 + 68);
    v33 = *(float *)(v11 + 72);
    v34 = *(float *)(v11 + 76);
    v35 = *(float *)(v11 + 80);
    v36 = *(float *)(v11 + 84);
    v37 = *(float *)(v11 + 88);
    v38 = *(float *)(v11 + 92);
    v39 = *(float *)(v11 + 96);
    v40 = *(float *)(v11 + 100);
    v41 = *(float *)(v11 + 104);
    v42 = *(float *)(v11 + 108);
    v43 = v11 + 164;
    v44 = v11 + 16548;
    v45 = v11 + 32932;
    v46 = *(float *)(v11 + 112);
    v47 = *(float *)(v11 + 116);
    v48 = *(float *)(v11 + 120);
    v49 = (uint64_t *)*((_QWORD *)result + 16);
    v50 = *((_QWORD *)result + 14);
    v51 = *((_QWORD *)result + 13) * a2 / v4 + *((_QWORD *)result + 15);
    v52 = *(_QWORD *)(result + 36);
    v53 = *(unsigned __int8 *)(v11 + 132);
    if (v53 >= 0x11)
      v54 = 0;
    else
      v54 = 16 - v53;
    result = (unsigned __int8 *)*(unsigned __int8 *)(v11 + 157);
    v55 = *(unsigned __int8 *)(v11 + 156);
    v56 = *(unsigned __int8 *)(v11 + 155);
    v57 = *(unsigned __int8 *)(v11 + 154);
    v58 = v49[2];
    if (v58)
      v59 = v58 + v51 * v17 + 2 * v50;
    else
      v59 = 0;
    v61 = *v49;
    v60 = v49[1];
    v62 = v60 + v51 * v16 + 2 * v50;
    if (!v60)
      v62 = 0;
    v63 = v61 + v51 * v15 + 2 * v50;
    v64 = *v13 + v14 * v9 + 4 * v52;
    v65 = v54;
    do
    {
      if (v8)
      {
        v66 = v8;
        v67 = (_WORD *)v59;
        v68 = (_WORD *)v62;
        v69 = (_WORD *)v63;
        v70 = v64;
        do
        {
          LOBYTE(v29) = *(_BYTE *)(v70 + v57);
          LOBYTE(v27) = *(_BYTE *)(v70 + v56);
          LOBYTE(_S18) = *(_BYTE *)(v70 + v55);
          _H0 = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v19 * (float)LODWORD(v29), 0.0), 8191.0)));
          v72 = v19 * (float)LODWORD(_S18);
          __asm { FCVT            S18, H0 }
          _H0 = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v19 * (float)LODWORD(v27), 0.0), 8191.0)));
          v79 = llroundf(fminf(fmaxf(v72, 0.0), 8191.0));
          __asm { FCVT            S14, H0 }
          _H0 = *(_WORD *)(v43 + 2 * v79);
          __asm { FCVT            S15, H0 }
          v83 = (float)((float)((float)(v46 * _S14) + (float)(v42 * _S18)) + (float)(v47 * _S15))
              + (float)(v48 * fmaxf(_S18, fmaxf(_S14, _S15)));
          v84 = 8191.0;
          if (v83 <= 8191.0)
          {
            v84 = v83;
            if (v83 < 0.0)
              v84 = 0.0;
          }
          _H0 = *(_WORD *)(v44 + 2 * llroundf(v84));
          __asm { FCVT            S0, H0 }
          _S6 = _S18 * _S0;
          v88 = _S14 * _S0;
          v89 = _S15 * _S0;
          v90 = (float)((float)(v34 * v88) + (float)(_S6 * v33)) + (float)(v89 * v35);
          v91 = (float)((float)(v37 * v88) + (float)(_S6 * v36)) + (float)(v89 * v38);
          _S0 = (float)((float)(v40 * v88) + (float)(_S6 * v39)) + (float)(v89 * v41);
          LOWORD(_S6) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          __asm { FCVT            S14, H6 }
          LOWORD(_S6) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          __asm { FCVT            S15, H6 }
          LOWORD(_S0) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          __asm { FCVT            S18, H0 }
          v29 = (float)((float)((float)(v26 * _S15) + (float)(v25 * _S14)) + (float)(v28 * _S18)) + v20;
          v27 = v22;
          if (v29 <= v22)
          {
            v27 = (float)((float)((float)(v26 * _S15) + (float)(v25 * _S14)) + (float)(v28 * _S18)) + v20;
            if (v29 < v20)
              v27 = v20;
          }
          v95 = result[v70];
          *v69++ = llroundf(v27) << v65;
          if (v68)
          {
            v96 = (float)((float)(v21 + (float)(_S14 * v100)) + (float)(_S15 * v99)) + (float)(_S18 * v98);
            v97 = v24;
            if (v96 <= v24)
            {
              v97 = (float)((float)(v21 + (float)(_S14 * v100)) + (float)(_S15 * v99)) + (float)(_S18 * v98);
              if (v96 < v23)
                v97 = v23;
            }
            v29 = (float)(v21 + (float)(_S14 * v30)) + (float)(_S15 * v31);
            _S18 = v29 + (float)(_S18 * v32);
            *v68 = llroundf(v97) << v65;
            v27 = v24;
            if (_S18 <= v24)
            {
              v27 = _S18;
              if (_S18 < v23)
                v27 = v23;
            }
            v68[1] = llroundf(v27) << v65;
            v68 += 2;
          }
          if (v67)
            *v67++ = v95 | (v95 << 8);
          v70 += 4;
          --v66;
        }
        while (v66);
      }
      v64 += v14;
      v63 += v15;
      v62 += v16;
      v59 += v17;
      ++v7;
    }
    while (v7 != v10);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Mat_TRC_xf444(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Mat_TRC_xf444_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_TRC_Mat_TRC_xf444_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unsigned int v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  _WORD *v72;
  _WORD *v73;
  _WORD *v74;
  unsigned int v75;
  float v86;
  float v87;
  float v89;
  float v90;
  __int16 v91;
  float v92;
  float v93;

  v12 = *(_QWORD *)(result + 28);
  v13 = *result;
  v14 = v12 * a2 / v13;
  v15 = (v12 + v12 * a2) / v13;
  if (v15 != v14)
  {
    v16 = 0;
    v17 = *(_QWORD *)(result + 20);
    v18 = v14 + *(_QWORD *)(result + 44);
    v19 = v15 - v14;
    v20 = *((_QWORD *)result + 19);
    v21 = (uint64_t *)*((_QWORD *)result + 17);
    v22 = (_QWORD *)*((_QWORD *)result + 7);
    v23 = **((_QWORD **)result + 8);
    v24 = *v21;
    v25 = v21[1];
    v26 = v21[2];
    v27 = 8191.0 / (float)*(unsigned int *)(v20 + 128);
    LOWORD(a5) = *(_WORD *)(v20 + 144);
    v28 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v20 + 146);
    v29 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v20 + 148);
    v30 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v20 + 150);
    v31 = (float)LODWORD(a8);
    LOWORD(a9) = *(_WORD *)(v20 + 152);
    v32 = (float)LODWORD(a9);
    v33 = *(float *)(v20 + 36);
    v34 = *(float *)(v20 + 40);
    v35 = *(float *)(v20 + 44);
    v36 = *(float *)(v20 + 48);
    v37 = *(float *)(v20 + 52);
    v38 = *(float *)(v20 + 56);
    v39 = *(float *)(v20 + 60);
    v40 = *(float *)(v20 + 64);
    v41 = *(float *)(v20 + 68);
    v42 = *(float *)(v20 + 72);
    v43 = *(float *)(v20 + 76);
    v44 = *(float *)(v20 + 80);
    v45 = *(float *)(v20 + 84);
    v46 = *(float *)(v20 + 88);
    v47 = *(float *)(v20 + 92);
    v48 = *(float *)(v20 + 96);
    v50 = *(float *)(v20 + 100);
    v49 = *(float *)(v20 + 104);
    v51 = v20 + 164;
    v52 = v20 + 16548;
    v53 = (uint64_t *)*((_QWORD *)result + 16);
    v54 = *((_QWORD *)result + 14);
    v55 = *((_QWORD *)result + 13) * a2 / v13 + *((_QWORD *)result + 15);
    v56 = *(_QWORD *)(result + 36);
    v57 = *(unsigned __int8 *)(v20 + 132);
    if (v57 >= 0x11)
      v58 = 0;
    else
      v58 = 16 - v57;
    v59 = *(unsigned __int8 *)(v20 + 157);
    result = (unsigned __int8 *)*(unsigned __int8 *)(v20 + 156);
    v60 = *(unsigned __int8 *)(v20 + 155);
    v61 = *(unsigned __int8 *)(v20 + 154);
    v62 = v53[2];
    if (v62)
      v63 = v62 + v55 * v26 + 2 * v54;
    else
      v63 = 0;
    v65 = *v53;
    v64 = v53[1];
    v66 = v64 + v55 * v25 + 2 * v54;
    if (!v64)
      v66 = 0;
    v67 = v65 + v55 * v24 + 2 * v54;
    v68 = *v22 + v23 * v18 + 4 * v56;
    v69 = v58;
    do
    {
      if (v17)
      {
        v70 = v17;
        v71 = v68;
        v72 = (_WORD *)v63;
        v73 = (_WORD *)v66;
        v74 = (_WORD *)v67;
        do
        {
          LOBYTE(_S10) = *(_BYTE *)(v71 + v61);
          LOBYTE(_S11) = *(_BYTE *)(v71 + v60);
          LOBYTE(_S12) = result[v71];
          v75 = llroundf(fminf(fmaxf(v27 * (float)LODWORD(_S10), 0.0), 8191.0));
          _S10 = v27 * (float)LODWORD(_S12);
          _H12 = *(_WORD *)(v51 + 2 * v75);
          __asm { FCVT            S12, H12 }
          _H11 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v27 * (float)LODWORD(_S11), 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          LOWORD(_S10) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(_S10, 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          v86 = (float)((float)(v43 * _S11) + (float)(_S12 * v42)) + (float)(_S10 * v44);
          v87 = (float)((float)(v46 * _S11) + (float)(_S12 * v45)) + (float)(_S10 * v47);
          _S12 = (float)((float)(v50 * _S11) + (float)(_S12 * v48)) + (float)(_S10 * v49);
          LOWORD(_S10) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          LOWORD(_S11) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          LOWORD(_S12) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S12, 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          v89 = (float)((float)((float)(v34 * _S11) + (float)(v33 * _S10)) + (float)(v35 * _S12)) + v28;
          v90 = v30;
          if (v89 <= v30)
          {
            v90 = (float)((float)((float)(v34 * _S11) + (float)(v33 * _S10)) + (float)(v35 * _S12)) + v28;
            if (v89 < v28)
              v90 = v28;
          }
          v91 = *(unsigned __int8 *)(v71 + v59);
          *v74++ = llroundf(v90) << v69;
          if (v73)
          {
            v92 = (float)((float)(v29 + (float)(_S10 * v36)) + (float)(_S11 * v37)) + (float)(_S12 * v38);
            v93 = v32;
            if (v92 <= v32)
            {
              v93 = (float)((float)(v29 + (float)(_S10 * v36)) + (float)(_S11 * v37)) + (float)(_S12 * v38);
              if (v92 < v31)
                v93 = v31;
            }
            _S10 = (float)((float)(v29 + (float)(_S10 * v39)) + (float)(_S11 * v40)) + (float)(_S12 * v41);
            *v73 = llroundf(v93) << v69;
            _S11 = v32;
            if (_S10 <= v32)
            {
              _S11 = _S10;
              if (_S10 < v31)
                _S11 = v31;
            }
            v73[1] = llroundf(_S11) << v69;
            v73 += 2;
          }
          if (v72)
            *v72++ = v91 | (v91 << 8);
          v71 += 4;
          --v70;
        }
        while (v70);
      }
      v68 += v23;
      v67 += v24;
      v66 += v25;
      v63 += v26;
      ++v16;
    }
    while (v16 != v19);
  }
  return result;
}

uint64_t vt_Copy_BGRA_rgb_xf444(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_rgb_xf444_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_rgb_xf444_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  float v8;
  float v9;
  float v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unsigned int v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  _WORD *v63;
  _WORD *v64;
  _WORD *v65;
  float v66;
  float v67;
  __int16 v68;
  float v69;
  float v70;

  v11 = *(_QWORD *)(result + 28);
  v12 = *result;
  v13 = v11 * a2 / v12;
  v14 = (v11 + v11 * a2) / v12;
  if (v14 != v13)
  {
    v15 = 0;
    v16 = *(_QWORD *)(result + 20);
    v17 = v13 + *(_QWORD *)(result + 44);
    v18 = v14 - v13;
    v19 = *((_QWORD *)result + 19);
    v20 = (uint64_t *)*((_QWORD *)result + 17);
    v21 = (_QWORD *)*((_QWORD *)result + 7);
    v22 = **((_QWORD **)result + 8);
    v23 = *v20;
    v24 = v20[1];
    v25 = v20[2];
    *(float *)&v26 = (float)*(unsigned int *)(v19 + 136);
    v27 = *(float *)&v26 / (float)*(unsigned int *)(v19 + 128);
    LOWORD(v26) = *(_WORD *)(v19 + 144);
    v28 = (float)v26;
    LOWORD(a5) = *(_WORD *)(v19 + 146);
    v29 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v19 + 148);
    v30 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v19 + 150);
    v31 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v19 + 152);
    v32 = (float)LODWORD(a8);
    v33 = *(float *)(v19 + 36);
    v34 = *(float *)(v19 + 40);
    v35 = *(float *)(v19 + 44);
    v36 = *(float *)(v19 + 48);
    v37 = *(float *)(v19 + 52);
    v38 = *(float *)(v19 + 56);
    v39 = *(float *)(v19 + 60);
    v40 = *(float *)(v19 + 64);
    v41 = *(float *)(v19 + 68);
    v42 = (_QWORD *)*((_QWORD *)result + 16);
    v43 = *((_QWORD *)result + 14);
    v44 = *((_QWORD *)result + 13) * a2 / v12 + *((_QWORD *)result + 15);
    v45 = *(_QWORD *)(result + 36);
    v46 = *(unsigned __int8 *)(v19 + 132);
    if (v46 >= 0x11)
      v47 = 0;
    else
      v47 = 16 - v46;
    v48 = *(unsigned __int8 *)(v19 + 157);
    v49 = *(unsigned __int8 *)(v19 + 156);
    v50 = *(unsigned __int8 *)(v19 + 155);
    result = (unsigned __int8 *)*(unsigned __int8 *)(v19 + 154);
    v51 = v42[2];
    if (v51)
      v52 = v51 + v44 * v25 + 2 * v43;
    else
      v52 = 0;
    v55 = v42;
    v54 = *v42;
    v53 = v55[1];
    v56 = v53 == 0;
    v57 = v53 + v44 * v24 + 2 * v43;
    if (v56)
      v57 = 0;
    v58 = v54 + v44 * v23 + 2 * v43;
    v59 = *v21 + v22 * v17 + 4 * v45;
    v60 = v47;
    do
    {
      if (v16)
      {
        v61 = v16;
        v62 = v59;
        v63 = (_WORD *)v52;
        v64 = (_WORD *)v57;
        v65 = (_WORD *)v58;
        do
        {
          LOBYTE(v8) = result[v62];
          v8 = v27 * (float)LODWORD(v8);
          LOBYTE(v9) = *(_BYTE *)(v62 + v50);
          v9 = v27 * (float)LODWORD(v9);
          LOBYTE(v10) = *(_BYTE *)(v62 + v49);
          v10 = v27 * (float)LODWORD(v10);
          v66 = (float)((float)((float)(v34 * v9) + (float)(v33 * v8)) + (float)(v35 * v10)) + v28;
          v67 = v30;
          if (v66 <= v30)
          {
            v67 = (float)((float)((float)(v34 * v9) + (float)(v33 * v8)) + (float)(v35 * v10)) + v28;
            if (v66 < v28)
              v67 = v28;
          }
          v68 = *(unsigned __int8 *)(v62 + v48);
          *v65++ = llroundf(v67) << v60;
          if (v64)
          {
            v69 = (float)((float)(v29 + (float)(v8 * v36)) + (float)(v9 * v37)) + (float)(v10 * v38);
            v70 = v32;
            if (v69 <= v32)
            {
              v70 = (float)((float)(v29 + (float)(v8 * v36)) + (float)(v9 * v37)) + (float)(v10 * v38);
              if (v69 < v31)
                v70 = v31;
            }
            v8 = (float)((float)(v29 + (float)(v8 * v39)) + (float)(v9 * v40)) + (float)(v10 * v41);
            *v64 = llroundf(v70) << v60;
            v9 = v32;
            if (v8 <= v32)
            {
              v9 = v8;
              if (v8 < v31)
                v9 = v31;
            }
            v64[1] = llroundf(v9) << v60;
            v64 += 2;
          }
          if (v63)
            *v63++ = v68 | (v68 << 8);
          v62 += 4;
          --v61;
        }
        while (v61);
      }
      v59 += v22;
      v58 += v23;
      v57 += v24;
      v52 += v25;
      ++v15;
    }
    while (v15 != v18);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Tone_Mat_TRC_BGRA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Tone_Mat_TRC_BGRA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_TRC_Tone_Mat_TRC_BGRA_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float v61;
  float v62;
  float v65;
  float v66;
  float v67;
  float v70;
  char v71;
  float v72;
  float v73;

  v5 = *(_QWORD *)(result + 28);
  v6 = *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = v7 + *(_QWORD *)(result + 44);
    v12 = v8 - v7;
    v13 = *((_QWORD *)result + 19);
    v14 = (_QWORD *)*((_QWORD *)result + 7);
    v15 = **((_QWORD **)result + 8);
    v16 = **((_QWORD **)result + 17);
    v17 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    v18 = *(float *)(v13 + 72);
    v19 = *(float *)(v13 + 76);
    v20 = *(float *)(v13 + 80);
    v21 = *(float *)(v13 + 84);
    v22 = *(float *)(v13 + 88);
    v23 = *(float *)(v13 + 92);
    v24 = *(float *)(v13 + 96);
    v25 = *(float *)(v13 + 100);
    v26 = v13 + 164;
    v27 = v13 + 16548;
    v28 = v13 + 32932;
    v29 = *(float *)(v13 + 104);
    v30 = *(float *)(v13 + 108);
    v31 = *(float *)(v13 + 112);
    v32 = *(float *)(v13 + 116);
    v33 = *(float *)(v13 + 120);
    v34 = (_QWORD *)*((_QWORD *)result + 16);
    v35 = *((_QWORD *)result + 14);
    v36 = *((_QWORD *)result + 13) * a2 / v6 + *((_QWORD *)result + 15);
    v37 = *(_QWORD *)(result + 36);
    v38 = *(unsigned __int8 *)(v13 + 161);
    v39 = *(unsigned __int8 *)(v13 + 160);
    result = (unsigned __int8 *)*(unsigned __int8 *)(v13 + 159);
    v40 = *(unsigned __int8 *)(v13 + 158);
    v41 = *(unsigned __int8 *)(v13 + 157);
    v42 = *(unsigned __int8 *)(v13 + 156);
    v43 = *v34 + v36 * v16;
    v44 = *(unsigned __int8 *)(v13 + 155);
    v45 = *(unsigned __int8 *)(v13 + 154);
    v46 = v43 + 4 * v35;
    v47 = *v14 + v15 * v11 + 4 * v37;
    do
    {
      if (v10)
      {
        v48 = v10;
        v49 = v47;
        v50 = v46;
        do
        {
          LOBYTE(_S24) = *(_BYTE *)(v49 + v45);
          LOBYTE(_S25) = *(_BYTE *)(v49 + v44);
          LOBYTE(_S26) = *(_BYTE *)(v49 + v42);
          _H24 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(_S24), 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          _H25 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(_S25), 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          _H26 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(_S26), 0.0), 8191.0)));
          __asm { FCVT            S27, H26 }
          v61 = (float)((float)((float)(v31 * _S25) + (float)(v30 * _S24)) + (float)(v32 * _S27))
              + (float)(v33 * fmaxf(_S24, fmaxf(_S25, _S27)));
          v62 = 8191.0;
          if (v61 <= 8191.0)
          {
            v62 = v61;
            if (v61 < 0.0)
              v62 = 0.0;
          }
          _H26 = *(_WORD *)(v27 + 2 * llroundf(v62));
          __asm { FCVT            S28, H26 }
          v65 = _S24 * _S28;
          v66 = _S25 * _S28;
          v67 = _S27 * _S28;
          _H27 = *(_WORD *)(v28
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v19 * v66) + (float)(v65 * v18)) + (float)((float)(_S27 * _S28) * v20), 0.0), 8191.0)));
          __asm { FCVT            S28, H27 }
          v70 = 255.0;
          if (_S28 <= 255.0)
          {
            v70 = _S28;
            if (_S28 < 0.0)
              v70 = 0.0;
          }
          v71 = *(_BYTE *)(v49 + v41);
          v72 = (float)((float)(v22 * v66) + (float)(v65 * v21)) + (float)(v67 * v23);
          v73 = (float)((float)(v25 * v66) + (float)(v65 * v24)) + (float)(v67 * v29);
          _H25 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          _S24 = fminf(fmaxf(v73, 0.0), 8191.0);
          LOWORD(_S24) = *(_WORD *)(v28 + 2 * llroundf(_S24));
          *(_BYTE *)(v50 + v40) = llroundf(v70);
          __asm { FCVT            S27, H25 }
          _S26 = 255.0;
          if (_S27 <= 255.0)
          {
            if (_S27 >= 0.0)
              __asm { FCVT            S26, H25 }
            else
              _S26 = 0.0;
          }
          result[v50] = llroundf(_S26);
          __asm { FCVT            S26, H24 }
          _S25 = 255.0;
          if (_S26 <= 255.0)
          {
            if (_S26 >= 0.0)
              __asm { FCVT            S25, H24 }
            else
              _S25 = 0.0;
          }
          v49 += 4;
          *(_BYTE *)(v50 + v39) = llroundf(_S25);
          *(_BYTE *)(v50 + v38) = v71;
          v50 += 4;
          --v48;
        }
        while (v48);
      }
      v47 += v15;
      v46 += v16;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Mat_TRC_BGRA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Mat_TRC_BGRA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_TRC_Mat_TRC_BGRA_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float v58;
  char v59;
  float v60;
  float v61;

  v5 = *(_QWORD *)(result + 28);
  v6 = *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = v7 + *(_QWORD *)(result + 44);
    v12 = v8 - v7;
    v13 = *((_QWORD *)result + 19);
    v14 = (_QWORD *)*((_QWORD *)result + 7);
    v15 = **((_QWORD **)result + 8);
    v16 = **((_QWORD **)result + 17);
    v17 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    v18 = *(float *)(v13 + 72);
    v19 = *(float *)(v13 + 76);
    v20 = *(float *)(v13 + 80);
    v21 = *(float *)(v13 + 84);
    v22 = *(float *)(v13 + 88);
    v23 = *(float *)(v13 + 92);
    v24 = *(float *)(v13 + 96);
    v25 = *(float *)(v13 + 100);
    v26 = *(float *)(v13 + 104);
    v27 = v13 + 164;
    v28 = v13 + 16548;
    v29 = (_QWORD *)*((_QWORD *)result + 16);
    v30 = *((_QWORD *)result + 14);
    v31 = *((_QWORD *)result + 13) * a2 / v6 + *((_QWORD *)result + 15);
    v32 = *(_QWORD *)(result + 36);
    v33 = *(unsigned __int8 *)(v13 + 161);
    v34 = *(unsigned __int8 *)(v13 + 160);
    v35 = *(unsigned __int8 *)(v13 + 159);
    result = (unsigned __int8 *)*(unsigned __int8 *)(v13 + 158);
    v36 = *(unsigned __int8 *)(v13 + 157);
    v37 = *(unsigned __int8 *)(v13 + 156);
    v38 = *v29 + v31 * v16;
    v39 = *(unsigned __int8 *)(v13 + 155);
    v40 = *(unsigned __int8 *)(v13 + 154);
    v41 = v38 + 4 * v30;
    v42 = *v14 + v15 * v11 + 4 * v32;
    do
    {
      if (v10)
      {
        v43 = v10;
        v44 = v42;
        v45 = v41;
        do
        {
          LOBYTE(_S20) = *(_BYTE *)(v44 + v40);
          LOBYTE(_S21) = *(_BYTE *)(v44 + v39);
          LOBYTE(_S22) = *(_BYTE *)(v44 + v37);
          _H20 = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(_S20), 0.0), 8191.0)));
          __asm { FCVT            S20, H20 }
          _H21 = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(_S21), 0.0), 8191.0)));
          __asm { FCVT            S21, H21 }
          _H22 = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(_S22), 0.0), 8191.0)));
          __asm { FCVT            S22, H22 }
          _H23 = *(_WORD *)(v28
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v19 * _S21) + (float)(_S20 * v18)) + (float)(_S22 * v20), 0.0), 8191.0)));
          __asm { FCVT            S24, H23 }
          v58 = 255.0;
          if (_S24 <= 255.0)
          {
            v58 = _S24;
            if (_S24 < 0.0)
              v58 = 0.0;
          }
          v59 = *(_BYTE *)(v44 + v36);
          v60 = (float)((float)(v22 * _S21) + (float)(_S20 * v21)) + (float)(_S22 * v23);
          v61 = (float)((float)(v25 * _S21) + (float)(_S20 * v24)) + (float)(_S22 * v26);
          _H21 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v60, 0.0), 8191.0)));
          _S20 = fminf(fmaxf(v61, 0.0), 8191.0);
          LOWORD(_S20) = *(_WORD *)(v28 + 2 * llroundf(_S20));
          result[v45] = llroundf(v58);
          __asm { FCVT            S23, H21 }
          _S22 = 255.0;
          if (_S23 <= 255.0)
          {
            if (_S23 >= 0.0)
              __asm { FCVT            S22, H21 }
            else
              _S22 = 0.0;
          }
          *(_BYTE *)(v45 + v35) = llroundf(_S22);
          __asm { FCVT            S22, H20 }
          _S21 = 255.0;
          if (_S22 <= 255.0)
          {
            if (_S22 >= 0.0)
              __asm { FCVT            S21, H20 }
            else
              _S21 = 0.0;
          }
          v44 += 4;
          *(_BYTE *)(v45 + v34) = llroundf(_S21);
          *(_BYTE *)(v45 + v33) = v59;
          v45 += 4;
          --v43;
        }
        while (v43);
      }
      v42 += v15;
      v41 += v16;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_BGRA_rgb_BGRA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_rgb_BGRA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_rgb_BGRA_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  float v34;
  float v35;
  char v36;
  float v37;
  float v38;
  char v39;
  float v40;

  v2 = *(_QWORD *)(result + 28);
  v3 = *result;
  v4 = v2 * a2 / v3;
  v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    v6 = 0;
    v7 = *(_QWORD *)(result + 20);
    v8 = v4 + *(_QWORD *)(result + 44);
    v9 = v5 - v4;
    v10 = *((_QWORD *)result + 19);
    v11 = (_QWORD *)*((_QWORD *)result + 16);
    v12 = (_QWORD *)*((_QWORD *)result + 7);
    v13 = **((_QWORD **)result + 8);
    v14 = **((_QWORD **)result + 17);
    v15 = (float)*(unsigned int *)(v10 + 136);
    v16 = v15 / (float)*(unsigned int *)(v10 + 128);
    v17 = *((_QWORD *)result + 14);
    v18 = *((_QWORD *)result + 13) * a2 / v3 + *((_QWORD *)result + 15);
    v19 = *(_QWORD *)(result + 36);
    v20 = *(unsigned __int8 *)(v10 + 161);
    v21 = *(unsigned __int8 *)(v10 + 160);
    v22 = *(unsigned __int8 *)(v10 + 159);
    v23 = *(unsigned __int8 *)(v10 + 158);
    v24 = *(unsigned __int8 *)(v10 + 157);
    result = (unsigned __int8 *)*(unsigned __int8 *)(v10 + 156);
    v25 = *v11 + v18 * v14;
    v26 = *(unsigned __int8 *)(v10 + 155);
    v27 = *(unsigned __int8 *)(v10 + 154);
    v28 = v25 + 4 * v17;
    v29 = *v12 + v13 * v8 + 4 * v19;
    do
    {
      if (v7)
      {
        v30 = v7;
        v31 = v29;
        v32 = v28;
        do
        {
          LOBYTE(v15) = *(_BYTE *)(v31 + v27);
          v33 = v16 * (float)LODWORD(v15);
          v34 = 255.0;
          if (v33 <= 255.0)
          {
            v34 = v33;
            if (v33 < 0.0)
              v34 = 0.0;
          }
          LOBYTE(v33) = *(_BYTE *)(v31 + v26);
          v35 = (float)LODWORD(v33);
          LOBYTE(v33) = result[v31];
          v36 = *(_BYTE *)(v31 + v24);
          v37 = v16 * v35;
          *(_BYTE *)(v32 + v23) = llroundf(v34);
          v38 = 255.0;
          if (v37 <= 255.0)
          {
            v38 = v37;
            if (v37 < 0.0)
              v38 = 0.0;
          }
          v39 = llroundf(v38);
          v40 = v16 * (float)LODWORD(v33);
          *(_BYTE *)(v32 + v22) = v39;
          v15 = 255.0;
          if (v40 <= 255.0)
          {
            v15 = v40;
            if (v40 < 0.0)
              v15 = 0.0;
          }
          v31 += 4;
          *(_BYTE *)(v32 + v21) = llroundf(v15);
          *(_BYTE *)(v32 + v20) = v36;
          v32 += 4;
          --v30;
        }
        while (v30);
      }
      v29 += v13;
      v28 += v14;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Tone_Mat_TRC_l10r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Tone_Mat_TRC_l10r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_TRC_Tone_Mat_TRC_l10r_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  float v5;
  float v6;
  float v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  uint64_t v49;
  unsigned int v57;
  float v61;
  float v62;
  float v65;
  float v66;
  float v67;
  float v70;
  BOOL v71;
  float v72;
  float v75;
  float v76;
  float v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;

  v8 = *(_QWORD *)(result + 28);
  v9 = *result;
  v10 = v8 * a2 / v9;
  v11 = (v8 + v8 * a2) / v9;
  if (v11 != v10)
  {
    v12 = 0;
    v13 = *(_QWORD *)(result + 20);
    v14 = v10 + *(_QWORD *)(result + 44);
    v15 = v11 - v10;
    v16 = *((_QWORD *)result + 19);
    v17 = (_QWORD *)*((_QWORD *)result + 7);
    v18 = **((_QWORD **)result + 8);
    v19 = **((_QWORD **)result + 17);
    v20 = 8191.0 / (float)*(unsigned int *)(v16 + 128);
    LOWORD(a5) = *(_WORD *)(v16 + 144);
    v21 = (float)LODWORD(a5);
    v22 = *(float *)(v16 + 72);
    v23 = *(float *)(v16 + 76);
    v24 = *(float *)(v16 + 80);
    v25 = *(float *)(v16 + 84);
    v26 = *(float *)(v16 + 88);
    v27 = *(float *)(v16 + 92);
    v28 = *(float *)(v16 + 96);
    v29 = *(float *)(v16 + 100);
    v30 = v16 + 164;
    v31 = v16 + 16548;
    v32 = v16 + 32932;
    v33 = *(float *)(v16 + 104);
    v34 = *(float *)(v16 + 108);
    v35 = *(float *)(v16 + 112);
    v36 = *(float *)(v16 + 116);
    v37 = *(float *)(v16 + 120);
    v38 = *((_QWORD *)result + 14);
    v39 = *((_QWORD *)result + 13) * a2 / v9 + *((_QWORD *)result + 15);
    v40 = *(_QWORD *)(result + 36);
    v41 = *(unsigned __int8 *)(v16 + 157);
    v42 = *(unsigned __int8 *)(v16 + 156);
    v43 = **((_QWORD **)result + 16) + v39 * v19;
    result = (unsigned __int8 *)*(unsigned __int8 *)(v16 + 155);
    v44 = *(unsigned __int8 *)(v16 + 154);
    v45 = (unsigned int *)(v43 + 16 * v38);
    v46 = *v17 + v18 * v14 + 4 * v40;
    do
    {
      if (v13)
      {
        v47 = v13;
        v48 = v45;
        v49 = v46;
        do
        {
          LOBYTE(v5) = *(_BYTE *)(v49 + v44);
          LOBYTE(v6) = result[v49];
          LOBYTE(v7) = *(_BYTE *)(v49 + v42);
          _H29 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v20 * (float)LODWORD(v5), 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          _H30 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v20 * (float)LODWORD(v6), 0.0), 8191.0)));
          v57 = llroundf(fminf(fmaxf(v20 * (float)LODWORD(v7), 0.0), 8191.0));
          __asm { FCVT            S31, H30 }
          _H30 = *(_WORD *)(v30 + 2 * v57);
          __asm { FCVT            S9, H30 }
          v61 = (float)((float)((float)(v35 * _S31) + (float)(v34 * _S29)) + (float)(v36 * _S9))
              + (float)(v37 * fmaxf(_S29, fmaxf(_S31, _S9)));
          v62 = 8191.0;
          if (v61 <= 8191.0)
          {
            v62 = v61;
            if (v61 < 0.0)
              v62 = 0.0;
          }
          _H30 = *(_WORD *)(v31 + 2 * llroundf(v62));
          __asm { FCVT            S10, H30 }
          v65 = _S29 * _S10;
          v66 = _S31 * _S10;
          v67 = _S9 * _S10;
          _H29 = *(_WORD *)(v32
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v29 * v66) + (float)((float)(_S29 * _S10) * v28))+ (float)((float)(_S9 * _S10) * v33), 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          v70 = v21 + _S29;
          v71 = (float)(v21 + _S29) <= 1023.0;
          v72 = 1023.0;
          if (v71)
          {
            v72 = v70;
            if (v70 < 0.0)
              v72 = 0.0;
          }
          _H9 = *(_WORD *)(v32
                         + 2
                         * llroundf(fminf(fmaxf((float)((float)(v26 * v66) + (float)(v65 * v25)) + (float)(v67 * v27), 0.0), 8191.0)));
          __asm { FCVT            S9, H9 }
          v75 = v21 + _S9;
          v71 = (float)(v21 + _S9) <= 1023.0;
          v76 = 1023.0;
          if (v71)
          {
            v76 = v75;
            if (v75 < 0.0)
              v76 = 0.0;
          }
          _H30 = *(_WORD *)(v32
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v23 * v66) + (float)(v65 * v22)) + (float)(v67 * v24), 0.0), 8191.0)));
          __asm { FCVT            S30, H30 }
          v79 = v21 + _S30;
          v71 = (float)(v21 + _S30) <= 1023.0;
          v6 = 1023.0;
          if (v71)
          {
            v6 = v79;
            if (v79 < 0.0)
              v6 = 0.0;
          }
          v7 = (double)*(unsigned __int8 *)(v49 + v41) * 3.0 / 255.0;
          v80 = llroundf(v72);
          v49 += 4;
          v81 = llroundf(v76) << 10;
          v82 = llroundf(v6);
          v5 = (float)llroundf(v7);
          if (v5 > 3.0)
            v5 = 3.0;
          *v48++ = v81 | v80 | (llroundf(v5) << 30) | (v82 << 20);
          --v47;
        }
        while (v47);
      }
      v46 += v18;
      v45 = (unsigned int *)((char *)v45 + v19);
      ++v12;
    }
    while (v12 != v15);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Mat_TRC_l10r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Mat_TRC_l10r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_TRC_Mat_TRC_l10r_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  float v5;
  float v6;
  double v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  float v45;
  unsigned int v47;
  float v59;
  BOOL v60;
  float v61;
  float v64;
  float v65;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;

  v8 = *(_QWORD *)(result + 28);
  v9 = *result;
  v10 = v8 * a2 / v9;
  v11 = (v8 + v8 * a2) / v9;
  if (v11 != v10)
  {
    v12 = 0;
    v13 = *(_QWORD *)(result + 20);
    v14 = v10 + *(_QWORD *)(result + 44);
    v15 = v11 - v10;
    v16 = *((_QWORD *)result + 19);
    v17 = (_QWORD *)*((_QWORD *)result + 7);
    v18 = **((_QWORD **)result + 8);
    v19 = **((_QWORD **)result + 17);
    v20 = 8191.0 / (float)*(unsigned int *)(v16 + 128);
    LOWORD(a5) = *(_WORD *)(v16 + 144);
    v21 = (float)LODWORD(a5);
    v22 = *(float *)(v16 + 72);
    v23 = *(float *)(v16 + 76);
    v24 = *(float *)(v16 + 80);
    v25 = *(float *)(v16 + 84);
    v26 = *(float *)(v16 + 88);
    v27 = *(float *)(v16 + 92);
    v28 = *(float *)(v16 + 96);
    v29 = *(float *)(v16 + 100);
    v30 = *(float *)(v16 + 104);
    v31 = v16 + 164;
    v32 = v16 + 16548;
    v33 = *((_QWORD *)result + 14);
    v34 = *((_QWORD *)result + 13) * a2 / v9 + *((_QWORD *)result + 15);
    v35 = *(_QWORD *)(result + 36);
    v36 = *(unsigned __int8 *)(v16 + 157);
    v37 = *(unsigned __int8 *)(v16 + 156);
    v38 = **((_QWORD **)result + 16) + v34 * v19;
    v39 = *(unsigned __int8 *)(v16 + 155);
    result = (unsigned __int8 *)*(unsigned __int8 *)(v16 + 154);
    v40 = (unsigned int *)(v38 + 16 * v33);
    v41 = *v17 + v18 * v14 + 4 * v35;
    do
    {
      if (v13)
      {
        v42 = v13;
        v43 = v41;
        v44 = v40;
        do
        {
          LOBYTE(v5) = result[v43];
          LOBYTE(v6) = *(_BYTE *)(v43 + v39);
          LOBYTE(v7) = *(_BYTE *)(v43 + v37);
          v45 = v20 * (float)LODWORD(v7);
          _H25 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v20 * (float)LODWORD(v5), 0.0), 8191.0)));
          v47 = llroundf(fminf(fmaxf(v20 * (float)LODWORD(v6), 0.0), 8191.0));
          __asm { FCVT            S26, H25 }
          _H25 = *(_WORD *)(v31 + 2 * v47);
          __asm { FCVT            S27, H25 }
          _H25 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v45, 0.0), 8191.0)));
          __asm { FCVT            S28, H25 }
          _H25 = *(_WORD *)(v32
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v29 * _S27) + (float)(_S26 * v28)) + (float)(_S28 * v30), 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          v59 = v21 + _S25;
          v60 = (float)(v21 + _S25) <= 1023.0;
          v61 = 1023.0;
          if (v60)
          {
            v61 = v59;
            if (v59 < 0.0)
              v61 = 0.0;
          }
          _H29 = *(_WORD *)(v32
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v26 * _S27) + (float)(_S26 * v25)) + (float)(_S28 * v27), 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          v64 = v21 + _S29;
          v60 = (float)(v21 + _S29) <= 1023.0;
          v65 = 1023.0;
          if (v60)
          {
            v65 = v64;
            if (v64 < 0.0)
              v65 = 0.0;
          }
          _H26 = *(_WORD *)(v32
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v23 * _S27) + (float)(_S26 * v22)) + (float)(_S28 * v24), 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          *(float *)&v7 = v21 + _S26;
          v60 = (float)(v21 + _S26) <= 1023.0;
          v6 = 1023.0;
          if (v60)
          {
            v6 = *(float *)&v7;
            if (*(float *)&v7 < 0.0)
              v6 = 0.0;
          }
          LOBYTE(v7) = *(_BYTE *)(v43 + v36);
          v43 += 4;
          v7 = (double)*(unint64_t *)&v7 * 3.0 / 255.0;
          *(float *)&v7 = v7;
          v68 = llroundf(v61);
          v69 = llroundf(v6);
          v5 = (float)llroundf(*(float *)&v7);
          v70 = llroundf(v65) << 10;
          if (v5 > 3.0)
            v5 = 3.0;
          *v44++ = v70 | v68 | (llroundf(v5) << 30) | (v69 << 20);
          --v42;
        }
        while (v42);
      }
      v41 += v18;
      v40 = (unsigned int *)((char *)v40 + v19);
      ++v12;
    }
    while (v12 != v15);
  }
  return result;
}

uint64_t vt_Copy_BGRA_rgb_l10r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_rgb_l10r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_rgb_l10r_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, float a10)
{
  float v10;
  float v11;
  double v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  float v25;
  float v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned int *v35;
  float v36;
  float v37;
  float v38;
  float v39;
  BOOL v40;
  float v41;
  unsigned int v42;
  unsigned int v43;
  float v44;
  float v45;
  unsigned int v46;
  float v47;
  float v48;
  unsigned int v49;
  float v50;
  unsigned int v51;

  v13 = *(_QWORD *)(result + 28);
  v14 = *result;
  v15 = v13 * a2 / v14;
  v16 = (v13 + v13 * a2) / v14;
  if (v16 != v15)
  {
    v17 = 0;
    v18 = *(_QWORD *)(result + 20);
    v19 = v15 + *(_QWORD *)(result + 44);
    v20 = v16 - v15;
    v21 = *((_QWORD *)result + 19);
    v22 = **((_QWORD **)result + 8);
    v23 = **((_QWORD **)result + 17);
    *(float *)&v24 = (float)*(unsigned int *)(v21 + 136);
    v25 = *(float *)&v24 / (float)*(unsigned int *)(v21 + 128);
    LOWORD(v24) = *(_WORD *)(v21 + 144);
    v26 = (float)v24;
    v27 = *((_QWORD *)result + 13) * a2 / v14 + *((_QWORD *)result + 15);
    v28 = *(unsigned __int8 *)(v21 + 157);
    v29 = *(unsigned __int8 *)(v21 + 156);
    v30 = *(unsigned __int8 *)(v21 + 155);
    v31 = *(unsigned __int8 *)(v21 + 154);
    v32 = **((_QWORD **)result + 16) + v27 * v23 + 16 * *((_QWORD *)result + 14);
    result = (unsigned __int8 *)(**((_QWORD **)result + 7) + v22 * v19 + 4 * *(_QWORD *)(result + 36));
    do
    {
      if (v18)
      {
        v33 = v18;
        v34 = result;
        v35 = (unsigned int *)v32;
        do
        {
          LOBYTE(a10) = v34[v31];
          LOBYTE(v10) = v34[v30];
          LOBYTE(v11) = v34[v29];
          v36 = v25 * (float)LODWORD(a10);
          v37 = (float)LODWORD(v10);
          LOBYTE(v12) = v34[v28];
          v12 = (double)*(unint64_t *)&v12 * 3.0 / 255.0;
          v38 = (float)(v25 * (float)LODWORD(v11)) + v26;
          if (v38 < 0.0)
            v39 = 0.0;
          else
            v39 = v38;
          v40 = v38 <= 1023.0;
          v41 = v12;
          if (v40)
            *(float *)&v12 = v39;
          else
            *(float *)&v12 = 1023.0;
          v42 = llroundf(*(float *)&v12);
          v43 = llroundf(v41);
          v44 = (float)(v25 * v37) + v26;
          if (v44 < 0.0)
            v11 = 0.0;
          else
            v11 = v44;
          if (v44 <= 1023.0)
            v45 = v11;
          else
            v45 = 1023.0;
          v46 = llroundf(v45);
          v47 = v36 + v26;
          if (v47 < 0.0)
            v48 = 0.0;
          else
            v48 = v47;
          v49 = v46 << 10;
          if (v47 <= 1023.0)
            v50 = v48;
          else
            v50 = 1023.0;
          v10 = (float)v43;
          v51 = llroundf(v50);
          if (v10 <= 3.0)
            a10 = v10;
          else
            a10 = 3.0;
          v34 += 4;
          *v35++ = v49 | v42 | (llroundf(a10) << 30) | (v51 << 20);
          --v33;
        }
        while (v33);
      }
      result += v22;
      v32 += v23;
      ++v17;
    }
    while (v17 != v20);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Tone_Mat_TRC_l64r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Tone_Mat_TRC_l64r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_TRC_Tone_Mat_TRC_l64r_GCD(unsigned __int8 *result, uint64_t a2)
{
  float v3;
  float v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _WORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _WORD *v45;
  float v56;
  float v57;
  float v60;
  float v61;
  float v62;
  float v65;
  __int16 v67;
  float v68;
  float v69;

  v5 = *(_QWORD *)(result + 28);
  v6 = *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = v7 + *(_QWORD *)(result + 44);
    v12 = v8 - v7;
    v13 = *((_QWORD *)result + 19);
    v14 = (_QWORD *)*((_QWORD *)result + 7);
    v15 = **((_QWORD **)result + 8);
    v16 = **((_QWORD **)result + 17);
    v17 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    v18 = *(float *)(v13 + 72);
    v19 = *(float *)(v13 + 76);
    v20 = *(float *)(v13 + 80);
    v21 = *(float *)(v13 + 84);
    v22 = *(float *)(v13 + 88);
    v23 = *(float *)(v13 + 92);
    v24 = *(float *)(v13 + 96);
    v25 = *(float *)(v13 + 100);
    v26 = v13 + 164;
    v27 = v13 + 16548;
    v28 = v13 + 32932;
    v29 = *(float *)(v13 + 104);
    v30 = *(float *)(v13 + 108);
    v31 = *(float *)(v13 + 112);
    v32 = *(float *)(v13 + 116);
    v33 = *(float *)(v13 + 120);
    v34 = *((_QWORD *)result + 14);
    v35 = *((_QWORD *)result + 13) * a2 / v6 + *((_QWORD *)result + 15);
    v36 = *(_QWORD *)(result + 36);
    v37 = *(unsigned __int8 *)(v13 + 157);
    v38 = *(unsigned __int8 *)(v13 + 156);
    v39 = **((_QWORD **)result + 16) + v35 * v16;
    result = (unsigned __int8 *)*(unsigned __int8 *)(v13 + 155);
    v40 = *(unsigned __int8 *)(v13 + 154);
    v41 = (_WORD *)(v39 + 8 * v34);
    v42 = *v14 + v15 * v11 + 4 * v36;
    do
    {
      if (v10)
      {
        v43 = v10;
        v44 = v42;
        v45 = v41;
        do
        {
          LOBYTE(_S25) = *(_BYTE *)(v44 + v40);
          LOBYTE(v3) = result[v44];
          LOBYTE(v4) = *(_BYTE *)(v44 + v38);
          _H25 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(_S25), 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          _H26 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(v3), 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(v4), 0.0), 8191.0)));
          __asm { FCVT            S28, H27 }
          v56 = (float)((float)((float)(v31 * _S26) + (float)(v30 * _S25)) + (float)(v32 * _S28))
              + (float)(v33 * fmaxf(_S25, fmaxf(_S26, _S28)));
          v57 = 8191.0;
          if (v56 <= 8191.0)
          {
            v57 = v56;
            if (v56 < 0.0)
              v57 = 0.0;
          }
          _H27 = *(_WORD *)(v27 + 2 * llroundf(v57));
          __asm { FCVT            S29, H27 }
          v60 = _S25 * _S29;
          v61 = _S26 * _S29;
          v62 = _S28 * _S29;
          _H30 = *(_WORD *)(v28
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v19 * v61) + (float)(v60 * v18)) + (float)((float)(_S28 * _S29) * v20), 0.0), 8191.0)));
          __asm { FCVT            S29, H30 }
          v65 = 65535.0;
          if (_S29 <= 65535.0)
          {
            __asm { FCVT            S28, H30 }
            _NF = _S28 < 0.0;
            v65 = _S29;
            if (_NF)
              v65 = 0.0;
          }
          v67 = *(unsigned __int8 *)(v44 + v37);
          v68 = (float)((float)(v22 * v61) + (float)(v60 * v21)) + (float)(v62 * v23);
          v69 = (float)((float)(v25 * v61) + (float)(v60 * v24)) + (float)(v62 * v29);
          _H26 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v68, 0.0), 8191.0)));
          _S25 = fminf(fmaxf(v69, 0.0), 8191.0);
          LOWORD(_S25) = *(_WORD *)(v28 + 2 * llroundf(_S25));
          __asm { FCVT            S29, H26 }
          *v45 = llroundf(v65);
          v4 = 65535.0;
          if (_S29 <= 65535.0)
          {
            __asm { FCVT            S26, H26 }
            v4 = _S29;
            if (_S26 < 0.0)
              v4 = 0.0;
          }
          __asm { FCVT            S28, H25 }
          v45[1] = llroundf(v4);
          v3 = 65535.0;
          if (_S28 <= 65535.0)
          {
            __asm { FCVT            S25, H25 }
            v3 = _S28;
            if (_S25 < 0.0)
              v3 = 0.0;
          }
          v44 += 4;
          v45[2] = llroundf(v3);
          v45[3] = v67 | (v67 << 8);
          v45 += 4;
          --v43;
        }
        while (v43);
      }
      v42 += v15;
      v41 = (_WORD *)((char *)v41 + v16);
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Mat_TRC_l64r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Mat_TRC_l64r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_TRC_Mat_TRC_l64r_GCD(unsigned __int8 *result, uint64_t a2)
{
  float v3;
  float v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _WORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _WORD *v40;
  float v53;
  __int16 v55;
  float v56;
  float v57;

  v5 = *(_QWORD *)(result + 28);
  v6 = *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = v7 + *(_QWORD *)(result + 44);
    v12 = v8 - v7;
    v13 = *((_QWORD *)result + 19);
    v14 = (_QWORD *)*((_QWORD *)result + 7);
    v15 = **((_QWORD **)result + 8);
    v16 = **((_QWORD **)result + 17);
    v17 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    v18 = *(float *)(v13 + 72);
    v19 = *(float *)(v13 + 76);
    v20 = *(float *)(v13 + 80);
    v21 = *(float *)(v13 + 84);
    v22 = *(float *)(v13 + 88);
    v23 = *(float *)(v13 + 92);
    v24 = *(float *)(v13 + 96);
    v25 = *(float *)(v13 + 100);
    v26 = *(float *)(v13 + 104);
    v27 = v13 + 164;
    v28 = v13 + 16548;
    v29 = *((_QWORD *)result + 14);
    v30 = *((_QWORD *)result + 13) * a2 / v6 + *((_QWORD *)result + 15);
    v31 = *(_QWORD *)(result + 36);
    v32 = *(unsigned __int8 *)(v13 + 157);
    v33 = *(unsigned __int8 *)(v13 + 156);
    v34 = **((_QWORD **)result + 16) + v30 * v16;
    v35 = *(unsigned __int8 *)(v13 + 155);
    result = (unsigned __int8 *)*(unsigned __int8 *)(v13 + 154);
    v36 = (_WORD *)(v34 + 8 * v29);
    v37 = *v14 + v15 * v11 + 4 * v31;
    do
    {
      if (v10)
      {
        v38 = v10;
        v39 = v37;
        v40 = v36;
        do
        {
          LOBYTE(_S21) = result[v39];
          LOBYTE(v3) = *(_BYTE *)(v39 + v35);
          LOBYTE(v4) = *(_BYTE *)(v39 + v33);
          _H21 = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(_S21), 0.0), 8191.0)));
          __asm { FCVT            S21, H21 }
          _H22 = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(v3), 0.0), 8191.0)));
          __asm { FCVT            S22, H22 }
          _H23 = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(v4), 0.0), 8191.0)));
          __asm { FCVT            S23, H23 }
          _H26 = *(_WORD *)(v28
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v19 * _S22) + (float)(_S21 * v18)) + (float)(_S23 * v20), 0.0), 8191.0)));
          __asm { FCVT            S25, H26 }
          v53 = 65535.0;
          if (_S25 <= 65535.0)
          {
            __asm { FCVT            S24, H26 }
            _NF = _S24 < 0.0;
            v53 = _S25;
            if (_NF)
              v53 = 0.0;
          }
          v55 = *(unsigned __int8 *)(v39 + v32);
          v56 = (float)((float)(v22 * _S22) + (float)(_S21 * v21)) + (float)(_S23 * v23);
          v57 = (float)((float)(v25 * _S22) + (float)(_S21 * v24)) + (float)(_S23 * v26);
          _H22 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v56, 0.0), 8191.0)));
          _S21 = fminf(fmaxf(v57, 0.0), 8191.0);
          LOWORD(_S21) = *(_WORD *)(v28 + 2 * llroundf(_S21));
          __asm { FCVT            S25, H22 }
          *v40 = llroundf(v53);
          v4 = 65535.0;
          if (_S25 <= 65535.0)
          {
            __asm { FCVT            S22, H22 }
            v4 = _S25;
            if (_S22 < 0.0)
              v4 = 0.0;
          }
          __asm { FCVT            S24, H21 }
          v40[1] = llroundf(v4);
          v3 = 65535.0;
          if (_S24 <= 65535.0)
          {
            __asm { FCVT            S21, H21 }
            v3 = _S24;
            if (_S21 < 0.0)
              v3 = 0.0;
          }
          v39 += 4;
          v40[2] = llroundf(v3);
          v40[3] = v55 | (v55 << 8);
          v40 += 4;
          --v38;
        }
        while (v38);
      }
      v37 += v15;
      v36 = (_WORD *)((char *)v36 + v16);
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_BGRA_rgb_l64r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_rgb_l64r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_rgb_l64r_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  _WORD *v25;
  float v26;
  float v27;
  float v28;
  __int16 v29;
  float v30;
  float v31;
  float v32;

  v5 = *(_QWORD *)(result + 28);
  v6 = *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = v7 + *(_QWORD *)(result + 44);
    v12 = v8 - v7;
    v13 = *((_QWORD *)result + 19);
    v14 = **((_QWORD **)result + 8);
    v15 = **((_QWORD **)result + 17);
    v16 = (float)*(unsigned int *)(v13 + 136) / (float)*(unsigned int *)(v13 + 128);
    v17 = *((_QWORD *)result + 13) * a2 / v6 + *((_QWORD *)result + 15);
    v18 = *(unsigned __int8 *)(v13 + 157);
    v19 = *(unsigned __int8 *)(v13 + 156);
    v20 = *(unsigned __int8 *)(v13 + 155);
    v21 = *(unsigned __int8 *)(v13 + 154);
    v22 = **((_QWORD **)result + 16) + v17 * v15 + 8 * *((_QWORD *)result + 14);
    result = (unsigned __int8 *)(**((_QWORD **)result + 7) + v14 * v11 + 4 * *(_QWORD *)(result + 36));
    do
    {
      if (v10)
      {
        v23 = v10;
        v24 = result;
        v25 = (_WORD *)v22;
        do
        {
          LOBYTE(a5) = v24[v21];
          v26 = v16 * (float)LODWORD(a5);
          v27 = 65535.0;
          if (v26 <= 65535.0)
          {
            v27 = v26;
            if (v26 < 0.0)
              v27 = 0.0;
          }
          LOBYTE(v26) = v24[v20];
          v28 = (float)LODWORD(v26);
          LOBYTE(v26) = v24[v19];
          v29 = v24[v18];
          v30 = v16 * v28;
          *v25 = llroundf(v27);
          v31 = 65535.0;
          if (v30 <= 65535.0)
          {
            v31 = v30;
            if (v30 < 0.0)
              v31 = 0.0;
          }
          v32 = v16 * (float)LODWORD(v26);
          v25[1] = llroundf(v31);
          a5 = 65535.0;
          if (v32 <= 65535.0)
          {
            a5 = v32;
            if (v32 < 0.0)
              a5 = 0.0;
          }
          v24 += 4;
          v25[2] = llroundf(a5);
          v25[3] = v29 | (v29 << 8);
          v25 += 4;
          --v23;
        }
        while (v23);
      }
      result += v14;
      v22 += v15;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Tone_Mat_TRC_b64a(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Tone_Mat_TRC_b64a_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_TRC_Tone_Mat_TRC_b64a_GCD(unsigned __int8 *result, uint64_t a2)
{
  float v2;
  float v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _WORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _WORD *v45;
  unsigned int v53;
  float v57;
  float v58;
  float v61;
  float v62;
  float v63;
  float v69;
  int v73;

  v5 = *(_QWORD *)(result + 28);
  v6 = *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = v7 + *(_QWORD *)(result + 44);
    v12 = v8 - v7;
    v13 = *((_QWORD *)result + 19);
    v14 = (_QWORD *)*((_QWORD *)result + 7);
    v15 = **((_QWORD **)result + 8);
    v16 = **((_QWORD **)result + 17);
    v17 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    v18 = *(float *)(v13 + 72);
    v19 = *(float *)(v13 + 76);
    v20 = *(float *)(v13 + 80);
    v21 = *(float *)(v13 + 84);
    v22 = *(float *)(v13 + 88);
    v23 = *(float *)(v13 + 92);
    v24 = *(float *)(v13 + 96);
    v25 = *(float *)(v13 + 100);
    v26 = v13 + 164;
    v27 = v13 + 16548;
    v28 = v13 + 32932;
    v29 = *(float *)(v13 + 104);
    v30 = *(float *)(v13 + 108);
    v31 = *(float *)(v13 + 112);
    v32 = *(float *)(v13 + 116);
    v33 = *(float *)(v13 + 120);
    v34 = *((_QWORD *)result + 14);
    v35 = *((_QWORD *)result + 13) * a2 / v6 + *((_QWORD *)result + 15);
    v36 = *(_QWORD *)(result + 36);
    v37 = *(unsigned __int8 *)(v13 + 157);
    v38 = *(unsigned __int8 *)(v13 + 156);
    v39 = **((_QWORD **)result + 16) + v35 * v16;
    result = (unsigned __int8 *)*(unsigned __int8 *)(v13 + 155);
    v40 = *(unsigned __int8 *)(v13 + 154);
    v41 = (_WORD *)(v39 + 8 * v34);
    v42 = *v14 + v15 * v11 + 4 * v36;
    do
    {
      if (v10)
      {
        v43 = v10;
        v44 = v42;
        v45 = v41;
        do
        {
          LOBYTE(v2) = *(_BYTE *)(v44 + v40);
          LOBYTE(v3) = result[v44];
          LOBYTE(_S27) = *(_BYTE *)(v44 + v38);
          _H25 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(v2), 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          _H26 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(v3), 0.0), 8191.0)));
          v53 = llroundf(fminf(fmaxf(v17 * (float)LODWORD(_S27), 0.0), 8191.0));
          __asm { FCVT            S27, H26 }
          _H26 = *(_WORD *)(v26 + 2 * v53);
          __asm { FCVT            S29, H26 }
          v57 = (float)((float)((float)(v31 * _S27) + (float)(v30 * _S25)) + (float)(v32 * _S29))
              + (float)(v33 * fmaxf(_S25, fmaxf(_S27, _S29)));
          v58 = 8191.0;
          if (v57 <= 8191.0)
          {
            v58 = v57;
            if (v57 < 0.0)
              v58 = 0.0;
          }
          _H26 = *(_WORD *)(v27 + 2 * llroundf(v58));
          __asm { FCVT            S30, H26 }
          v61 = _S25 * _S30;
          v62 = _S27 * _S30;
          v63 = _S29 * _S30;
          _H30 = *(_WORD *)(v28
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v19 * v62) + (float)((float)(_S25 * _S30) * v18))+ (float)((float)(_S29 * _S30) * v20), 0.0), 8191.0)));
          __asm { FCVT            S29, H30 }
          v2 = 65535.0;
          if (_S29 <= 65535.0)
          {
            __asm { FCVT            S25, H30 }
            _NF = _S25 < 0.0;
            v2 = _S29;
            if (_NF)
              v2 = 0.0;
          }
          _H31 = *(_WORD *)(v28
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v22 * v62) + (float)(v61 * v21)) + (float)(v63 * v23), 0.0), 8191.0)));
          __asm { FCVT            S30, H31 }
          v69 = 65535.0;
          if (_S30 <= 65535.0)
          {
            __asm { FCVT            S29, H31 }
            _NF = _S29 < 0.0;
            v69 = _S30;
            if (_NF)
              v69 = 0.0;
          }
          _H28 = *(_WORD *)(v28
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v25 * v62) + (float)(v61 * v24)) + (float)(v63 * v29), 0.0), 8191.0)));
          __asm { FCVT            S27, H28 }
          v3 = 65535.0;
          if (_S27 <= 65535.0)
          {
            __asm { FCVT            S26, H28 }
            _NF = _S26 < 0.0;
            v3 = _S27;
            if (_NF)
              v3 = 0.0;
          }
          v73 = *(unsigned __int8 *)(v44 + v37);
          v44 += 4;
          *v45 = __rev16(v73 | (v73 << 8));
          v45[1] = __rev16(llroundf(v2));
          v45[2] = __rev16(llroundf(v69));
          v45[3] = __rev16(llroundf(v3));
          v45 += 4;
          --v43;
        }
        while (v43);
      }
      v42 += v15;
      v41 = (_WORD *)((char *)v41 + v16);
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Mat_TRC_b64a(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Mat_TRC_b64a_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_TRC_Mat_TRC_b64a_GCD(unsigned __int8 *result, uint64_t a2)
{
  float v2;
  float v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _WORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _WORD *v40;
  float v41;
  unsigned int v43;
  float v58;
  int v62;

  v5 = *(_QWORD *)(result + 28);
  v6 = *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = v7 + *(_QWORD *)(result + 44);
    v12 = v8 - v7;
    v13 = *((_QWORD *)result + 19);
    v14 = (_QWORD *)*((_QWORD *)result + 7);
    v15 = **((_QWORD **)result + 8);
    v16 = **((_QWORD **)result + 17);
    v17 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    v18 = *(float *)(v13 + 72);
    v19 = *(float *)(v13 + 76);
    v20 = *(float *)(v13 + 80);
    v21 = *(float *)(v13 + 84);
    v22 = *(float *)(v13 + 88);
    v23 = *(float *)(v13 + 92);
    v24 = *(float *)(v13 + 96);
    v25 = *(float *)(v13 + 100);
    v26 = *(float *)(v13 + 104);
    v27 = v13 + 164;
    v28 = v13 + 16548;
    v29 = *((_QWORD *)result + 14);
    v30 = *((_QWORD *)result + 13) * a2 / v6 + *((_QWORD *)result + 15);
    v31 = *(_QWORD *)(result + 36);
    v32 = *(unsigned __int8 *)(v13 + 157);
    v33 = *(unsigned __int8 *)(v13 + 156);
    v34 = **((_QWORD **)result + 16) + v30 * v16;
    v35 = *(unsigned __int8 *)(v13 + 155);
    result = (unsigned __int8 *)*(unsigned __int8 *)(v13 + 154);
    v36 = (_WORD *)(v34 + 8 * v29);
    v37 = *v14 + v15 * v11 + 4 * v31;
    do
    {
      if (v10)
      {
        v38 = v10;
        v39 = v37;
        v40 = v36;
        do
        {
          LOBYTE(v2) = result[v39];
          LOBYTE(v3) = *(_BYTE *)(v39 + v35);
          LOBYTE(_S23) = *(_BYTE *)(v39 + v33);
          v41 = v17 * (float)LODWORD(_S23);
          _H21 = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(v2), 0.0), 8191.0)));
          v43 = llroundf(fminf(fmaxf(v17 * (float)LODWORD(v3), 0.0), 8191.0));
          __asm { FCVT            S22, H21 }
          _H21 = *(_WORD *)(v27 + 2 * v43);
          __asm { FCVT            S23, H21 }
          _H21 = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(v41, 0.0), 8191.0)));
          __asm { FCVT            S24, H21 }
          _H26 = *(_WORD *)(v28
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v19 * _S23) + (float)(_S22 * v18)) + (float)(_S24 * v20), 0.0), 8191.0)));
          __asm { FCVT            S25, H26 }
          v2 = 65535.0;
          if (_S25 <= 65535.0)
          {
            __asm { FCVT            S21, H26 }
            _NF = _S21 < 0.0;
            v2 = _S25;
            if (_NF)
              v2 = 0.0;
          }
          _H27 = *(_WORD *)(v28
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v22 * _S23) + (float)(_S22 * v21)) + (float)(_S24 * v23), 0.0), 8191.0)));
          __asm { FCVT            S26, H27 }
          v58 = 65535.0;
          if (_S26 <= 65535.0)
          {
            __asm { FCVT            S25, H27 }
            _NF = _S25 < 0.0;
            v58 = _S26;
            if (_NF)
              v58 = 0.0;
          }
          _H24 = *(_WORD *)(v28
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v25 * _S23) + (float)(_S22 * v24)) + (float)(_S24 * v26), 0.0), 8191.0)));
          __asm { FCVT            S23, H24 }
          v3 = 65535.0;
          if (_S23 <= 65535.0)
          {
            __asm { FCVT            S22, H24 }
            _NF = _S22 < 0.0;
            v3 = _S23;
            if (_NF)
              v3 = 0.0;
          }
          v62 = *(unsigned __int8 *)(v39 + v32);
          v39 += 4;
          *v40 = __rev16(v62 | (v62 << 8));
          v40[1] = __rev16(llroundf(v2));
          v40[2] = __rev16(llroundf(v58));
          v40[3] = __rev16(llroundf(v3));
          v40 += 4;
          --v38;
        }
        while (v38);
      }
      v37 += v15;
      v36 = (_WORD *)((char *)v36 + v16);
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_BGRA_rgb_b64a(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_rgb_b64a_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_rgb_b64a_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  _WORD *v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  int v31;

  v5 = *(_QWORD *)(result + 28);
  v6 = *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = v7 + *(_QWORD *)(result + 44);
    v12 = v8 - v7;
    v13 = *((_QWORD *)result + 19);
    v14 = **((_QWORD **)result + 8);
    v15 = **((_QWORD **)result + 17);
    v16 = (float)*(unsigned int *)(v13 + 136) / (float)*(unsigned int *)(v13 + 128);
    v17 = *((_QWORD *)result + 13) * a2 / v6 + *((_QWORD *)result + 15);
    v18 = *(unsigned __int8 *)(v13 + 157);
    v19 = *(unsigned __int8 *)(v13 + 156);
    v20 = *(unsigned __int8 *)(v13 + 155);
    v21 = *(unsigned __int8 *)(v13 + 154);
    v22 = **((_QWORD **)result + 16) + v17 * v15 + 8 * *((_QWORD *)result + 14);
    result = (unsigned __int8 *)(**((_QWORD **)result + 7) + v14 * v11 + 4 * *(_QWORD *)(result + 36));
    do
    {
      if (v10)
      {
        v23 = v10;
        v24 = result;
        v25 = (_WORD *)v22;
        do
        {
          LOBYTE(a5) = v24[v21];
          v26 = v16 * (float)LODWORD(a5);
          a5 = 65535.0;
          if (v26 <= 65535.0)
          {
            a5 = v26;
            if (v26 < 0.0)
              a5 = 0.0;
          }
          LOBYTE(v26) = v24[v20];
          v27 = v16 * (float)LODWORD(v26);
          v28 = 65535.0;
          if (v27 <= 65535.0)
          {
            v28 = v27;
            if (v27 < 0.0)
              v28 = 0.0;
          }
          LOBYTE(v27) = v24[v19];
          v29 = v16 * (float)LODWORD(v27);
          v30 = 65535.0;
          if (v29 <= 65535.0)
          {
            v30 = v29;
            if (v29 < 0.0)
              v30 = 0.0;
          }
          v31 = v24[v18];
          v24 += 4;
          *v25 = __rev16(v31 | (v31 << 8));
          v25[1] = __rev16(llroundf(a5));
          v25[2] = __rev16(llroundf(v28));
          v25[3] = __rev16(llroundf(v30));
          v25 += 4;
          --v23;
        }
        while (v23);
      }
      result += v14;
      v22 += v15;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Tone_Mat_TRC_RGhA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Tone_Mat_TRC_RGhA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_TRC_Tone_Mat_TRC_RGhA_GCD(unsigned __int8 *result, uint64_t a2)
{
  float v3;
  float v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _WORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _WORD *v45;
  float v56;
  float v57;
  unsigned int v58;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;

  v5 = *(_QWORD *)(result + 28);
  v6 = *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = v7 + *(_QWORD *)(result + 44);
    v12 = v8 - v7;
    v13 = *((_QWORD *)result + 19);
    v14 = (_QWORD *)*((_QWORD *)result + 7);
    v15 = **((_QWORD **)result + 8);
    v16 = **((_QWORD **)result + 17);
    v17 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    v18 = *(float *)(v13 + 72);
    v19 = *(float *)(v13 + 76);
    v20 = *(float *)(v13 + 80);
    v21 = *(float *)(v13 + 84);
    v22 = *(float *)(v13 + 88);
    v23 = *(float *)(v13 + 92);
    v24 = *(float *)(v13 + 96);
    v25 = *(float *)(v13 + 100);
    v26 = v13 + 164;
    v27 = v13 + 16548;
    v28 = v13 + 32932;
    v29 = *(float *)(v13 + 104);
    v30 = *(float *)(v13 + 108);
    v31 = *(float *)(v13 + 112);
    v32 = *(float *)(v13 + 116);
    v33 = *(float *)(v13 + 120);
    v34 = *((_QWORD *)result + 14);
    v35 = *((_QWORD *)result + 13) * a2 / v6 + *((_QWORD *)result + 15);
    v36 = *(_QWORD *)(result + 36);
    v37 = *(unsigned __int8 *)(v13 + 157);
    v38 = *(unsigned __int8 *)(v13 + 156);
    v39 = **((_QWORD **)result + 16) + v35 * v16;
    result = (unsigned __int8 *)*(unsigned __int8 *)(v13 + 155);
    v40 = *(unsigned __int8 *)(v13 + 154);
    v41 = (_WORD *)(v39 + 8 * v34);
    v42 = *v14 + v15 * v11 + 4 * v36;
    do
    {
      if (v10)
      {
        v43 = v10;
        v44 = v42;
        v45 = v41;
        do
        {
          LOBYTE(_S25) = *(_BYTE *)(v44 + v40);
          LOBYTE(v3) = result[v44];
          LOBYTE(v4) = *(_BYTE *)(v44 + v38);
          _H25 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(_S25), 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          _H26 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(v3), 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(v4), 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          v56 = (float)((float)((float)(v31 * _S26) + (float)(v30 * _S25)) + (float)(v32 * _S27))
              + (float)(v33 * fmaxf(_S25, fmaxf(_S26, _S27)));
          v57 = 8191.0;
          if (v56 <= 8191.0)
          {
            v57 = v56;
            if (v56 < 0.0)
              v57 = 0.0;
          }
          v58 = *(unsigned __int8 *)(v44 + v37);
          _H28 = *(_WORD *)(v27 + 2 * llroundf(v57));
          v44 += 4;
          __asm { FCVT            S28, H28 }
          v61 = _S25 * _S28;
          v62 = _S26 * _S28;
          v63 = _S27 * _S28;
          v64 = (float)((float)(v19 * v62) + (float)(v61 * v18)) + (float)(v63 * v20);
          v65 = (float)((float)(v22 * v62) + (float)(v61 * v21)) + (float)(v63 * v23);
          v66 = (float)((float)(v25 * v62) + (float)(v61 * v24)) + (float)(v63 * v29);
          v3 = fminf(fmaxf(v64, 0.0), 8191.0);
          LOWORD(v3) = *(_WORD *)(v28 + 2 * llroundf(v3));
          v4 = fminf(fmaxf(v65, 0.0), 8191.0);
          LOWORD(v4) = *(_WORD *)(v28 + 2 * llroundf(v4));
          _S25 = fminf(fmaxf(v66, 0.0), 8191.0);
          LOWORD(_S25) = *(_WORD *)(v28 + 2 * llroundf(_S25));
          _S28 = (float)v58 * 0.0039216;
          *v45 = LOWORD(v3);
          v45[1] = LOWORD(v4);
          v45[2] = LOWORD(_S25);
          __asm { FCVT            H25, S28 }
          v45[3] = LOWORD(_S25);
          v45 += 4;
          --v43;
        }
        while (v43);
      }
      v42 += v15;
      v41 = (_WORD *)((char *)v41 + v16);
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Mat_TRC_RGhA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Mat_TRC_RGhA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_TRC_Mat_TRC_RGhA_GCD(unsigned __int8 *result, uint64_t a2)
{
  float v3;
  float v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _WORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _WORD *v41;
  unsigned int v50;
  float v51;
  float v52;
  float v53;
  float v55;
  unsigned int v56;
  unsigned int v57;

  v6 = *(_QWORD *)(result + 28);
  v7 = *result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)(result + 20);
    v12 = v8 + *(_QWORD *)(result + 44);
    v13 = v9 - v8;
    v14 = *((_QWORD *)result + 19);
    v15 = (_QWORD *)*((_QWORD *)result + 7);
    v16 = **((_QWORD **)result + 8);
    v17 = **((_QWORD **)result + 17);
    v18 = 8191.0 / (float)*(unsigned int *)(v14 + 128);
    v19 = *(float *)(v14 + 72);
    v20 = *(float *)(v14 + 76);
    v21 = *(float *)(v14 + 80);
    v22 = *(float *)(v14 + 84);
    v23 = *(float *)(v14 + 88);
    v24 = *(float *)(v14 + 92);
    v25 = *(float *)(v14 + 96);
    v26 = *(float *)(v14 + 100);
    v27 = *(float *)(v14 + 104);
    v28 = v14 + 164;
    v29 = v14 + 16548;
    v30 = *((_QWORD *)result + 14);
    v31 = *((_QWORD *)result + 13) * a2 / v7 + *((_QWORD *)result + 15);
    v32 = *(_QWORD *)(result + 36);
    v33 = *(unsigned __int8 *)(v14 + 157);
    v34 = *(unsigned __int8 *)(v14 + 156);
    v35 = **((_QWORD **)result + 16) + v31 * v17;
    v36 = *(unsigned __int8 *)(v14 + 155);
    result = (unsigned __int8 *)*(unsigned __int8 *)(v14 + 154);
    v37 = (_WORD *)(v35 + 8 * v30);
    v38 = *v15 + v16 * v12 + 4 * v32;
    do
    {
      if (v11)
      {
        v39 = v11;
        v40 = v38;
        v41 = v37;
        do
        {
          LOBYTE(_S21) = result[v40];
          LOBYTE(v3) = *(_BYTE *)(v40 + v36);
          LOBYTE(v4) = *(_BYTE *)(v40 + v34);
          LOBYTE(_S24) = *(_BYTE *)(v40 + v33);
          v40 += 4;
          _H21 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v18 * (float)LODWORD(_S21), 0.0), 8191.0)));
          __asm { FCVT            S21, H21 }
          _H22 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v18 * (float)LODWORD(v3), 0.0), 8191.0)));
          __asm { FCVT            S22, H22 }
          v50 = llroundf(fminf(fmaxf(v18 * (float)LODWORD(v4), 0.0), 8191.0));
          v51 = (float)(v20 * _S22) + (float)(_S21 * v19);
          v52 = (float)(v23 * _S22) + (float)(_S21 * v22);
          v53 = (float)(v26 * _S22) + (float)(_S21 * v25);
          LOWORD(_S22) = *(_WORD *)(v28 + 2 * v50);
          __asm { FCVT            S22, H22 }
          v4 = v51 + (float)(_S22 * v21);
          v55 = v53 + (float)(_S22 * v27);
          v3 = fminf(fmaxf(v52 + (float)(_S22 * v24), 0.0), 8191.0);
          v56 = llroundf(v3);
          LOWORD(v3) = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v4, 0.0), 8191.0)));
          _S21 = fminf(fmaxf(v55, 0.0), 8191.0);
          v57 = llroundf(_S21);
          LOWORD(_S21) = *(_WORD *)(v29 + 2 * v56);
          LOWORD(v4) = *(_WORD *)(v29 + 2 * v57);
          _S24 = (float)LODWORD(_S24) * 0.0039216;
          *v41 = LOWORD(v3);
          v41[1] = LOWORD(_S21);
          v41[2] = LOWORD(v4);
          __asm { FCVT            H21, S24 }
          v41[3] = LOWORD(_S21);
          v41 += 4;
          --v39;
        }
        while (v39);
      }
      v38 += v16;
      v37 = (_WORD *)((char *)v37 + v17);
      ++v10;
    }
    while (v10 != v13);
  }
  return result;
}

uint64_t vt_Copy_BGRA_rgb_RGhA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_rgb_RGhA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_rgb_RGhA_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const float *v21;
  int32x4_t v22;
  float32x4_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  float16x4_t *v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  uint16x4_t v31;

  v2 = *(_QWORD *)(result + 28);
  v3 = *result;
  v4 = v2 * a2 / v3;
  v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    v6 = 0;
    v7 = *(_QWORD *)(result + 20);
    v8 = v4 + *(_QWORD *)(result + 44);
    v9 = v5 - v4;
    v10 = *((_QWORD *)result + 19);
    v11 = **((_QWORD **)result + 8);
    v12 = **((_QWORD **)result + 17);
    v13 = 1.0 / (float)*(unsigned int *)(v10 + 128);
    v14 = *((_QWORD *)result + 13) * a2 / v3 + *((_QWORD *)result + 15);
    v15 = *(unsigned __int8 *)(v10 + 157);
    v16 = *(unsigned __int8 *)(v10 + 156);
    v17 = *(unsigned __int8 *)(v10 + 155);
    v18 = *(unsigned __int8 *)(v10 + 154);
    v19 = **((_QWORD **)result + 16) + v14 * v12 + 8 * *((_QWORD *)result + 14);
    v20 = **((_QWORD **)result + 7) + v11 * v8;
    v21 = (const float *)&dword_1928DF484;
    v22 = (int32x4_t)vld1q_dup_f32(v21);
    result = (unsigned __int8 *)(v20 + 4 * *(_QWORD *)(result + 36));
    *(float *)v22.i32 = v13;
    v23 = (float32x4_t)vzip1q_s32(v22, v22);
    v23.f32[2] = v13;
    do
    {
      if (v7)
      {
        v24 = v7;
        v25 = result;
        v26 = (float16x4_t *)v19;
        do
        {
          v27 = &v25[v18];
          v28 = &v25[v17];
          v29 = &v25[v16];
          v30 = &v25[v15];
          v25 += 4;
          v31.i16[0] = *v27;
          v31.i16[1] = *v28;
          v31.i16[2] = *v29;
          v31.i16[3] = *v30;
          *v26++ = vcvt_f16_f32(vmulq_f32(v23, vcvtq_f32_u32(vmovl_u16(v31))));
          --v24;
        }
        while (v24);
      }
      result += v11;
      v19 += v12;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Tone_Mat_TRC_RGfA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Tone_Mat_TRC_RGfA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_TRC_Tone_Mat_TRC_RGfA_GCD(unsigned __int8 *result, uint64_t a2)
{
  float v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float v56;
  float v57;
  unsigned int v58;
  float v61;
  float v64;
  float v65;

  v5 = *(_QWORD *)(result + 28);
  v6 = *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = v7 + *(_QWORD *)(result + 44);
    v12 = v8 - v7;
    v13 = *((_QWORD *)result + 19);
    v14 = (_QWORD *)*((_QWORD *)result + 7);
    v15 = **((_QWORD **)result + 8);
    v16 = **((_QWORD **)result + 17);
    v17 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    v18 = *(float *)(v13 + 72);
    v19 = *(float *)(v13 + 76);
    v20 = *(float *)(v13 + 80);
    v21 = *(float *)(v13 + 84);
    v22 = *(float *)(v13 + 88);
    v23 = *(float *)(v13 + 92);
    v24 = *(float *)(v13 + 96);
    v25 = *(float *)(v13 + 100);
    v26 = v13 + 164;
    v27 = v13 + 16548;
    v28 = v13 + 32932;
    v29 = *(float *)(v13 + 104);
    v30 = *(float *)(v13 + 108);
    v31 = *(float *)(v13 + 112);
    v32 = *(float *)(v13 + 116);
    v33 = *(float *)(v13 + 120);
    v34 = *((_QWORD *)result + 14);
    v35 = *((_QWORD *)result + 13) * a2 / v6 + *((_QWORD *)result + 15);
    v36 = *(_QWORD *)(result + 36);
    v37 = *(unsigned __int8 *)(v13 + 157);
    v38 = *(unsigned __int8 *)(v13 + 156);
    v39 = **((_QWORD **)result + 16) + v35 * v16;
    result = (unsigned __int8 *)*(unsigned __int8 *)(v13 + 155);
    v40 = *(unsigned __int8 *)(v13 + 154);
    v41 = v39 + 16 * v34;
    v42 = *v14 + v15 * v11 + 4 * v36;
    do
    {
      if (v10)
      {
        v43 = v10;
        v44 = v42;
        v45 = v41;
        do
        {
          LOBYTE(_S25) = *(_BYTE *)(v44 + v40);
          LOBYTE(v3) = result[v44];
          LOBYTE(_S27) = *(_BYTE *)(v44 + v38);
          _H25 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v17 * (float)_S25, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          _H26 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(v3), 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v17 * (float)_S27, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          v56 = (float)((float)((float)(v31 * _S26) + (float)(v30 * _S25)) + (float)(v32 * _S27))
              + (float)(v33 * fmaxf(_S25, fmaxf(_S26, _S27)));
          v57 = 8191.0;
          if (v56 <= 8191.0)
          {
            v57 = v56;
            if (v56 < 0.0)
              v57 = 0.0;
          }
          v58 = *(unsigned __int8 *)(v44 + v37);
          v44 += 4;
          _H28 = *(_WORD *)(v27 + 2 * llroundf(v57));
          __asm { FCVT            S28, H28 }
          v61 = _S25 * _S28;
          _S26 = _S26 * _S28;
          _S27 = _S27 * _S28;
          v64 = (float)((float)(v19 * _S26) + (float)(v61 * v18)) + (float)(_S27 * v20);
          v65 = (float)((float)(v22 * _S26) + (float)(v61 * v21)) + (float)(_S27 * v23);
          _S25 = (float)((float)(v25 * _S26) + (float)(v61 * v24)) + (float)(_S27 * v29);
          LOWORD(_S26) = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v64, 0.0), 8191.0)));
          LOWORD(_S27) = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v65, 0.0), 8191.0)));
          __asm
          {
            FCVT            S26, H26
            FCVT            S27, H27
          }
          LOWORD(_S25) = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(_S25, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          *(_DWORD *)v45 = _S26;
          *(_DWORD *)(v45 + 4) = _S27;
          v3 = (float)v58 * 0.0039216;
          *(_DWORD *)(v45 + 8) = _S25;
          *(float *)(v45 + 12) = v3;
          v45 += 16;
          --v43;
        }
        while (v43);
      }
      v42 += v15;
      v41 += v16;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Mat_TRC_RGfA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Mat_TRC_RGfA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_TRC_Mat_TRC_RGfA_GCD(unsigned __int8 *result, uint64_t a2)
{
  float v2;
  float v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  float v53;
  unsigned int v54;
  float v55;
  unsigned int v56;

  v5 = *(_QWORD *)(result + 28);
  v6 = *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = v7 + *(_QWORD *)(result + 44);
    v12 = v8 - v7;
    v13 = *((_QWORD *)result + 19);
    v14 = (_QWORD *)*((_QWORD *)result + 7);
    v15 = **((_QWORD **)result + 8);
    v16 = **((_QWORD **)result + 17);
    v17 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    v18 = *(float *)(v13 + 72);
    v19 = *(float *)(v13 + 76);
    v20 = *(float *)(v13 + 80);
    v21 = *(float *)(v13 + 84);
    v22 = *(float *)(v13 + 88);
    v23 = *(float *)(v13 + 92);
    v24 = *(float *)(v13 + 96);
    v25 = *(float *)(v13 + 100);
    v26 = *(float *)(v13 + 104);
    v27 = v13 + 164;
    v28 = v13 + 16548;
    v29 = *((_QWORD *)result + 14);
    v30 = *((_QWORD *)result + 13) * a2 / v6 + *((_QWORD *)result + 15);
    v31 = *(_QWORD *)(result + 36);
    v32 = *(unsigned __int8 *)(v13 + 157);
    v33 = *(unsigned __int8 *)(v13 + 156);
    v34 = **((_QWORD **)result + 16) + v30 * v16;
    v35 = *(unsigned __int8 *)(v13 + 155);
    result = (unsigned __int8 *)*(unsigned __int8 *)(v13 + 154);
    v36 = v34 + 16 * v29;
    v37 = *v14 + v15 * v11 + 4 * v31;
    do
    {
      if (v10)
      {
        v38 = v10;
        v39 = v37;
        v40 = v36;
        do
        {
          LOBYTE(v2) = result[v39];
          LOBYTE(v3) = *(_BYTE *)(v39 + v35);
          LOBYTE(_S23) = *(_BYTE *)(v39 + v33);
          v41 = llroundf(fminf(fmaxf(v17 * (float)LODWORD(v2), 0.0), 8191.0));
          _S21 = v17 * (float)_S23;
          _H23 = *(_WORD *)(v27 + 2 * v41);
          __asm { FCVT            S23, H23 }
          _H22 = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(v3), 0.0), 8191.0)));
          __asm { FCVT            S22, H22 }
          LOWORD(_S21) = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(_S21, 0.0), 8191.0)));
          __asm { FCVT            S21, H21 }
          _S24 = (float)((float)(v19 * _S22) + (float)(_S23 * v18)) + (float)(_S21 * v20);
          v53 = (float)((float)(v22 * _S22) + (float)(_S23 * v21)) + (float)(_S21 * v23);
          *(float *)&v54 = (float)(v25 * _S22) + (float)(_S23 * v24);
          v55 = *(float *)&v54 + (float)(_S21 * v26);
          LOBYTE(v54) = *(_BYTE *)(v39 + v32);
          v39 += 4;
          LOWORD(_S23) = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(_S24, 0.0), 8191.0)));
          LOWORD(_S24) = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v53, 0.0), 8191.0)));
          __asm { FCVT            S23, H23 }
          v56 = llroundf(fminf(fmaxf(v55, 0.0), 8191.0));
          __asm { FCVT            S21, H24 }
          LOWORD(_S24) = *(_WORD *)(v28 + 2 * v56);
          __asm { FCVT            S24, H24 }
          v3 = (float)v54;
          *(_DWORD *)v40 = _S23;
          *(_DWORD *)(v40 + 4) = _S21;
          v2 = v3 * 0.0039216;
          *(_DWORD *)(v40 + 8) = _S24;
          *(float *)(v40 + 12) = v3 * 0.0039216;
          v40 += 16;
          --v38;
        }
        while (v38);
      }
      v37 += v15;
      v36 += v16;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_BGRA_rgb_RGfA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_rgb_RGfA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_rgb_RGfA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  float *v28;

  v8 = *(_QWORD *)(result + 28);
  v9 = *result;
  v10 = v8 * a2 / v9;
  v11 = (v8 + v8 * a2) / v9;
  if (v11 != v10)
  {
    v12 = 0;
    v13 = *(_QWORD *)(result + 20);
    v14 = v10 + *(_QWORD *)(result + 44);
    v15 = v11 - v10;
    v16 = *((_QWORD *)result + 19);
    v17 = **((_QWORD **)result + 8);
    v18 = **((_QWORD **)result + 17);
    v19 = 1.0 / (float)*(unsigned int *)(v16 + 128);
    v20 = *((_QWORD *)result + 13) * a2 / v9 + *((_QWORD *)result + 15);
    v21 = *(unsigned __int8 *)(v16 + 157);
    v22 = *(unsigned __int8 *)(v16 + 156);
    v23 = *(unsigned __int8 *)(v16 + 155);
    v24 = *(unsigned __int8 *)(v16 + 154);
    v25 = **((_QWORD **)result + 16) + v20 * v18 + 16 * *((_QWORD *)result + 14);
    result = (unsigned __int8 *)(**((_QWORD **)result + 7) + v17 * v14 + 4 * *(_QWORD *)(result + 36));
    do
    {
      if (v13)
      {
        v26 = v13;
        v27 = result;
        v28 = (float *)v25;
        do
        {
          LOBYTE(a5) = v27[v24];
          LOBYTE(a6) = v27[v23];
          a6 = v19 * (float)LODWORD(a6);
          LOBYTE(a7) = v27[v22];
          a7 = v19 * (float)LODWORD(a7);
          LOBYTE(a8) = v27[v21];
          v27 += 4;
          a8 = (float)LODWORD(a8);
          *v28 = v19 * (float)LODWORD(a5);
          v28[1] = a6;
          a5 = a8 * 0.0039216;
          v28[2] = a7;
          v28[3] = a8 * 0.0039216;
          v28 += 4;
          --v26;
        }
        while (v26);
      }
      result += v17;
      v25 += v18;
      ++v12;
    }
    while (v12 != v15);
  }
  return result;
}

uint64_t vt_Copy_l64r_TRC_Tone_Mat_TRC_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_TRC_Tone_Mat_TRC_420vf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_l64r_TRC_Tone_Mat_TRC_420vf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  unsigned int v24;
  float v25;
  float v26;
  float v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  float v33;
  float v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  _BYTE *v49;
  unsigned __int8 *v50;
  unint64_t v51;
  _BYTE *v52;
  _BYTE *v53;
  unsigned __int8 *v54;
  float v56;
  float v66;
  float v67;
  float v68;
  float v75;
  float v76;
  float v77;
  unsigned int v78;
  float v81;
  float v86;
  float v87;
  unsigned int v88;
  float v91;
  float v96;
  float v97;
  char v98;
  char v99;
  char v100;
  char v101;
  float v104;
  float v105;
  float v106;
  float v108;
  float v109;
  float v110;
  float v115;
  float v117;
  float v123;
  float v124;
  float v126;
  float v128;
  float v129;
  float v130;
  float v131;
  float v144;
  float v145;
  BOOL v146;
  float v147;
  char v148;
  float v149;
  float v150;
  char v151;
  float v152;
  float v153;
  char v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float v182;
  float v183;
  float v184;
  float v185;
  float v186;
  float v187;
  float v188;
  float v189;
  float v190;

  v7 = *(_QWORD *)(result + 28);
  v8 = 2 * *result;
  v9 = v7 * a2 / v8;
  v10 = (v7 + v7 * a2) / v8;
  if (2 * v10 != 2 * v9)
  {
    v11 = 0;
    v12 = *(_QWORD *)(result + 20);
    v13 = *(_QWORD *)(result + 44) + 2 * v9;
    v167 = 2 * v10 - 2 * v9;
    v14 = *((_QWORD *)result + 19);
    v15 = (uint64_t *)*((_QWORD *)result + 17);
    v16 = **((_QWORD **)result + 8);
    v17 = *v15;
    v18 = v15[1];
    v19 = v15[2];
    v20 = 8191.0 / (float)*(unsigned int *)(v14 + 128);
    LOWORD(a5) = *(_WORD *)(v14 + 144);
    v21 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v14 + 146);
    v22 = (float)LODWORD(a6);
    LOWORD(a6) = *(_WORD *)(v14 + 148);
    v23 = (float)LODWORD(a6);
    LOWORD(a6) = *(_WORD *)(v14 + 150);
    *(float *)&v24 = (float)LODWORD(a6);
    v189 = v22;
    v190 = *(float *)&v24;
    LOWORD(v24) = *(_WORD *)(v14 + 152);
    v187 = *(float *)(v14 + 36);
    v188 = (float)v24;
    v185 = *(float *)(v14 + 44);
    v186 = *(float *)(v14 + 40);
    v183 = *(float *)(v14 + 52) * 0.25;
    v184 = *(float *)(v14 + 48) * 0.25;
    v181 = *(float *)(v14 + 60) * 0.25;
    v182 = *(float *)(v14 + 56) * 0.25;
    v179 = *(float *)(v14 + 72);
    v180 = *(float *)(v14 + 64) * 0.25;
    v25 = *(float *)(v14 + 68) * 0.25;
    v177 = *(float *)(v14 + 76);
    v178 = v25;
    v175 = *(float *)(v14 + 84);
    v176 = *(float *)(v14 + 80);
    v173 = *(float *)(v14 + 92);
    v174 = *(float *)(v14 + 88);
    v26 = *(float *)(v14 + 96);
    v171 = *(float *)(v14 + 100);
    v172 = v26;
    v27 = *(float *)(v14 + 104);
    v28 = *(float *)(v14 + 108);
    v170 = v27;
    v29 = v14 + 164;
    v30 = v14 + 16548;
    v31 = v14 + 32932;
    v33 = *(float *)(v14 + 112);
    v32 = *(float *)(v14 + 116);
    v34 = *(float *)(v14 + 120);
    v35 = *((_QWORD *)result + 14);
    v36 = (_QWORD *)*((_QWORD *)result + 16);
    v37 = *((_QWORD *)result + 15) + 2 * (*((_QWORD *)result + 13) * a2 / v8);
    result = (unsigned __int8 *)(**((_QWORD **)result + 7) + v16 * v13 + 8 * *(_QWORD *)(result + 36));
    v38 = v36[1];
    v39 = (_BYTE *)(*v36 + v37 * v17 + v35);
    v40 = v36[2];
    if (v40)
      v41 = (_BYTE *)(v40 + v37 * v19 + v35);
    else
      v41 = 0;
    v42 = *(unsigned __int8 *)(v14 + 157);
    v43 = *(unsigned __int8 *)(v14 + 156);
    if (v37 >= 0)
      v44 = v37;
    else
      v44 = v37 + 1;
    v164 = v18;
    v165 = v17;
    v45 = *(unsigned __int8 *)(v14 + 155);
    v46 = *(unsigned __int8 *)(v14 + 154);
    v47 = v38 + (v44 >> 1) * v18 + v35;
    v168 = *(float *)(v14 + 112);
    v169 = *(float *)(v14 + 108);
    v166 = v16;
    v163 = v19;
    do
    {
      v48 = &v41[v19];
      v49 = &v39[v17];
      v50 = &result[v16];
      if (v12)
      {
        v51 = 0;
        v52 = &v41[v19];
        v53 = &v39[v17];
        v54 = &result[v16];
        do
        {
          LOWORD(v27) = *(_WORD *)&result[2 * v46];
          LOWORD(v26) = *(_WORD *)&result[2 * v45];
          LOWORD(v25) = *(_WORD *)&result[2 * v43];
          _H3 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v20 * (float)LODWORD(v27), 0.0), 8191.0)));
          v56 = v20 * (float)LODWORD(v25);
          __asm { FCVT            S14, H3 }
          _H3 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v20 * (float)LODWORD(v26), 0.0), 8191.0)));
          __asm { FCVT            S15, H3 }
          _H3 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v56, 0.0), 8191.0)));
          __asm { FCVT            S18, H3 }
          v66 = fmaxf(_S14, fmaxf(_S15, _S18));
          v67 = (float)((float)((float)(v33 * _S15) + (float)(v28 * _S14)) + (float)(v32 * _S18)) + (float)(v34 * v66);
          v68 = 8191.0;
          if (v67 <= 8191.0)
          {
            v68 = (float)((float)((float)(v33 * _S15) + (float)(v28 * _S14)) + (float)(v32 * _S18)) + (float)(v34 * v66);
            if (v67 < 0.0)
              v68 = 0.0;
          }
          LOWORD(v67) = *(_WORD *)&result[2 * v46 + 8];
          LOWORD(v66) = *(_WORD *)&result[2 * v45 + 8];
          LOWORD(v56) = *(_WORD *)&result[2 * v43 + 8];
          _H3 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v20 * (float)LODWORD(v67), 0.0), 8191.0)));
          __asm { FCVT            S20, H3 }
          _H3 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v20 * (float)LODWORD(v66), 0.0), 8191.0)));
          __asm { FCVT            S21, H3 }
          _H3 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v20 * (float)LODWORD(v56), 0.0), 8191.0)));
          __asm { FCVT            S22, H3 }
          v75 = fmaxf(_S20, fmaxf(_S21, _S22));
          v76 = (float)((float)((float)(v33 * _S21) + (float)(v28 * _S20)) + (float)(v32 * _S22)) + (float)(v34 * v75);
          v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            v77 = (float)((float)((float)(v33 * _S21) + (float)(v28 * _S20)) + (float)(v32 * _S22)) + (float)(v34 * v75);
            if (v76 < 0.0)
              v77 = 0.0;
          }
          LOWORD(v76) = *(_WORD *)&v54[2 * v46];
          LOWORD(v75) = *(_WORD *)&v54[2 * v45];
          *(float *)&v78 = (float)LODWORD(v75);
          _S6 = v20 * *(float *)&v78;
          LOWORD(v78) = *(_WORD *)&v54[2 * v43];
          _H3 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v20 * (float)LODWORD(v76), 0.0), 8191.0)));
          v81 = v20 * (float)v78;
          __asm { FCVT            S5, H3 }
          _H3 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          LOWORD(_S6) = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          __asm { FCVT            S7, H6 }
          v86 = (float)((float)((float)(v33 * _S3) + (float)(v28 * _S5)) + (float)(v32 * _S7))
              + (float)(v34 * fmaxf(_S5, fmaxf(_S3, _S7)));
          v87 = 8191.0;
          if (v86 <= 8191.0)
          {
            v87 = v86;
            if (v86 < 0.0)
              v87 = 0.0;
          }
          LOWORD(v86) = *(_WORD *)&v54[2 * v46 + 8];
          LOWORD(v6) = *(_WORD *)&v54[2 * v45 + 8];
          *(float *)&v88 = (float)v6;
          _S23 = v20 * *(float *)&v88;
          LOWORD(v88) = *(_WORD *)&v54[2 * v43 + 8];
          _H6 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v20 * (float)LODWORD(v86), 0.0), 8191.0)));
          v91 = v20 * (float)v88;
          __asm { FCVT            S17, H6 }
          _H6 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(_S23, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          LOWORD(_S23) = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          __asm { FCVT            S23, H23 }
          v96 = (float)((float)((float)(v33 * _S6) + (float)(v28 * _S17)) + (float)(v32 * _S23))
              + (float)(v34 * fmaxf(_S17, fmaxf(_S6, _S23)));
          v97 = 8191.0;
          if (v96 <= 8191.0)
          {
            v97 = v96;
            if (v96 < 0.0)
              v97 = 0.0;
          }
          if (v41)
          {
            v98 = llroundf((float)*(unsigned __int16 *)&result[2 * v42] * 0.0038911);
            v99 = llroundf((float)*(unsigned __int16 *)&result[2 * v42 + 8] * 0.0038911);
            v100 = llroundf((float)*(unsigned __int16 *)&v54[2 * v42] * 0.0038911);
            v101 = llroundf((float)*(unsigned __int16 *)&v54[2 * v42 + 8] * 0.0038911);
          }
          else
          {
            v100 = 0;
            v98 = 0;
            v99 = 0;
            v101 = 0;
          }
          _H19 = *(_WORD *)(v30 + 2 * llroundf(v68));
          __asm { FCVT            S19, H19 }
          v104 = _S14 * _S19;
          v105 = _S15 * _S19;
          v106 = _S18 * _S19;
          LOWORD(_S19) = *(_WORD *)(v30 + 2 * llroundf(v77));
          __asm { FCVT            S19, H19 }
          v108 = _S20 * _S19;
          v109 = _S21 * _S19;
          v110 = _S22 * _S19;
          _H16 = *(_WORD *)(v30 + 2 * llroundf(v87));
          __asm { FCVT            S16, H16 }
          _S5 = _S5 * _S16;
          _S3 = _S3 * _S16;
          v115 = _S7 * _S16;
          LOWORD(_S16) = *(_WORD *)(v30 + 2 * llroundf(v97));
          __asm { FCVT            S16, H16 }
          v117 = _S17 * _S16;
          _S6 = _S6 * _S16;
          _S16 = _S23 * _S16;
          _S22 = (float)((float)(v177 * v105) + (float)(v104 * v179)) + (float)(v106 * v176);
          _S23 = (float)((float)(v174 * v105) + (float)(v104 * v175)) + (float)(v106 * v173);
          _S18 = (float)((float)(v171 * v105) + (float)(v104 * v172)) + (float)(v106 * v170);
          v123 = (float)((float)(v177 * v109) + (float)(v108 * v179)) + (float)(v110 * v176);
          v124 = (float)((float)(v174 * v109) + (float)(v108 * v175)) + (float)(v110 * v173);
          _S19 = (float)((float)(v171 * v109) + (float)(v108 * v172)) + (float)(v110 * v170);
          v126 = (float)((float)(v177 * _S3) + (float)(_S5 * v179)) + (float)(v115 * v176);
          _S21 = (float)((float)(v174 * _S3) + (float)(_S5 * v175)) + (float)(v115 * v173);
          v128 = (float)((float)(v171 * _S3) + (float)(_S5 * v172)) + (float)(v115 * v170);
          v129 = (float)((float)(v177 * _S6) + (float)(v117 * v179)) + (float)(_S16 * v176);
          v130 = (float)((float)(v174 * _S6) + (float)(v117 * v175)) + (float)(_S16 * v173);
          v131 = (float)((float)(v171 * _S6) + (float)(v117 * v172)) + (float)(_S16 * v170);
          LOWORD(_S3) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(_S22, 0.0), 8191.0)));
          __asm { FCVT            S7, H3 }
          LOWORD(_S3) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(_S23, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          LOWORD(_S5) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(_S18, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v123, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          LOWORD(_S16) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v124, 0.0), 8191.0)));
          LOWORD(_S18) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0)));
          __asm
          {
            FCVT            S17, H16
            FCVT            S16, H18
          }
          LOWORD(_S18) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v126, 0.0), 8191.0)));
          __asm { FCVT            S20, H18 }
          LOWORD(_S18) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(_S21, 0.0), 8191.0)));
          __asm { FCVT            S18, H18 }
          LOWORD(_S19) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v128, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          LOWORD(_S21) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v129, 0.0), 8191.0)));
          __asm { FCVT            S21, H21 }
          LOWORD(_S22) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v130, 0.0), 8191.0)));
          LOWORD(_S23) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v131, 0.0), 8191.0)));
          __asm
          {
            FCVT            S22, H22
            FCVT            S23, H23
          }
          v144 = (float)((float)((float)(v186 * _S3) + (float)(v187 * _S7)) + (float)(v185 * _S5)) + v21;
          if (v144 < v21)
            v145 = v21;
          else
            v145 = (float)((float)((float)(v186 * _S3) + (float)(v187 * _S7)) + (float)(v185 * _S5)) + v21;
          v146 = v144 <= v23;
          v147 = (float)((float)((float)(v186 * _S17) + (float)(v187 * _S6)) + (float)(v185 * _S16)) + v21;
          if (!v146)
            v145 = v23;
          v148 = llroundf(v145);
          if (v147 < v21)
            v149 = v21;
          else
            v149 = (float)((float)((float)(v186 * _S17) + (float)(v187 * _S6)) + (float)(v185 * _S16)) + v21;
          v146 = v147 <= v23;
          v150 = (float)((float)((float)(v186 * _S18) + (float)(v187 * _S20)) + (float)(v185 * _S19)) + v21;
          if (!v146)
            v149 = v23;
          v151 = llroundf(v149);
          if (v150 < v21)
            v152 = v21;
          else
            v152 = (float)((float)((float)(v186 * _S18) + (float)(v187 * _S20)) + (float)(v185 * _S19)) + v21;
          v146 = v150 <= v23;
          v153 = (float)((float)((float)(v186 * _S22) + (float)(v187 * _S21)) + (float)(v185 * _S23)) + v21;
          if (!v146)
            v152 = v23;
          v154 = llroundf(v152);
          if (v153 < v21)
            v155 = v21;
          else
            v155 = (float)((float)((float)(v186 * _S22) + (float)(v187 * _S21)) + (float)(v185 * _S23)) + v21;
          if (v153 <= v23)
            v156 = v155;
          else
            v156 = v23;
          v157 = (float)((float)(_S7 + _S6) + _S20) + _S21;
          v158 = (float)((float)(_S3 + _S17) + _S18) + _S22;
          *v39 = v148;
          v39[1] = v151;
          *v53 = v154;
          v53[1] = llroundf(v156);
          HIWORD(v6) = HIWORD(v189);
          v159 = (float)((float)(_S5 + _S16) + _S19) + _S23;
          v160 = (float)((float)(v189 + (float)(v157 * v184)) + (float)(v158 * v183)) + (float)(v159 * v182);
          v161 = v188;
          if (v160 <= v188)
          {
            v161 = (float)((float)(v189 + (float)(v157 * v184)) + (float)(v158 * v183)) + (float)(v159 * v182);
            if (v160 < v190)
              v161 = v190;
          }
          v162 = (float)(v189 + (float)(v157 * v181)) + (float)(v158 * v180);
          HIWORD(v25) = HIWORD(v178);
          v27 = v162 + (float)(v159 * v178);
          *(_BYTE *)(v47 + v51) = llroundf(v161);
          v26 = v188;
          v33 = v168;
          v28 = v169;
          if (v27 <= v188)
          {
            v26 = v27;
            if (v27 < v190)
              v26 = v190;
          }
          *(_BYTE *)(v47 + v51 + 1) = llroundf(v26);
          if (v41)
          {
            *v41 = v98;
            v41[1] = v99;
            v41 += 2;
            *v52 = v100;
            v52[1] = v101;
            v52 += 2;
          }
          result += 16;
          v54 += 16;
          v39 += 2;
          v53 += 2;
          v51 += 2;
        }
        while (v12 > v51);
      }
      v17 = v165;
      v16 = v166;
      result = &v50[v166];
      v39 = &v49[v165];
      v19 = v163;
      v47 += v164;
      v41 = &v48[v163];
      v11 += 2;
    }
    while (v167 > v11);
  }
  return result;
}

uint64_t vt_Copy_l64r_TRC_Mat_TRC_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_TRC_Mat_TRC_420vf_GCD);
  return 0;
}

unint64_t vt_Copy_l64r_TRC_Mat_TRC_420vf_GCD(unint64_t result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  float v8;
  float v9;
  float v10;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  float v30;
  unsigned int v31;
  float v32;
  float v33;
  float v34;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  _BYTE *v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  float v68;
  char v69;
  float v70;
  char v71;
  float v72;
  char v73;
  char v74;
  float v102;
  float v103;
  float v105;
  float v106;
  float v117;
  float v118;
  BOOL v119;
  float v120;
  char v121;
  float v122;
  float v123;
  char v124;
  float v125;
  float v126;
  char v127;
  float v128;
  float v129;
  float v130;
  float v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;

  v16 = *(_QWORD *)(result + 28);
  v17 = 2 * *(unsigned __int8 *)result;
  v18 = v16 * a2 / v17;
  v19 = (v16 + v16 * a2) / v17;
  if (2 * v19 != 2 * v18)
  {
    v20 = 0;
    v21 = *(_QWORD *)(result + 20);
    v22 = *(_QWORD *)(result + 44) + 2 * v18;
    v135 = 2 * v19 - 2 * v18;
    v23 = *(_QWORD *)(result + 152);
    v24 = *(uint64_t **)(result + 136);
    v25 = **(_QWORD **)(result + 64);
    v26 = *v24;
    v27 = v24[1];
    v28 = v24[2];
    v29 = 8191.0 / (float)*(unsigned int *)(v23 + 128);
    LOWORD(a5) = *(_WORD *)(v23 + 144);
    v30 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v23 + 146);
    *(float *)&v31 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v23 + 148);
    v32 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v23 + 150);
    v148 = (float)LODWORD(a6);
    v149 = (float)LODWORD(a8);
    LOWORD(v31) = *(_WORD *)(v23 + 152);
    v146 = *(float *)(v23 + 36);
    v147 = (float)v31;
    v144 = *(float *)(v23 + 44);
    v145 = *(float *)(v23 + 40);
    v33 = 0.25;
    v34 = *(float *)(v23 + 56);
    v142 = *(float *)(v23 + 52) * 0.25;
    v143 = *(float *)(v23 + 48) * 0.25;
    _S22 = *(float *)(v23 + 64);
    v140 = *(float *)(v23 + 60) * 0.25;
    v141 = v34 * 0.25;
    v36 = *(float *)(v23 + 68);
    v138 = *(float *)(v23 + 72);
    v139 = _S22 * 0.25;
    v37 = *(float *)(v23 + 80);
    v136 = *(float *)(v23 + 76);
    v137 = v36 * 0.25;
    v38 = *(float *)(v23 + 84);
    v39 = *(float *)(v23 + 88);
    v40 = *(float *)(v23 + 92);
    v41 = *(float *)(v23 + 96);
    v43 = *(float *)(v23 + 100);
    v42 = *(float *)(v23 + 104);
    v44 = v23 + 164;
    v45 = v23 + 16548;
    v46 = *(_QWORD *)(result + 112);
    v47 = *(_QWORD **)(result + 128);
    v48 = *(_QWORD *)(result + 120) + 2 * (*(_QWORD *)(result + 104) * a2 / v17);
    v49 = **(_QWORD **)(result + 56) + v25 * v22 + 8 * *(_QWORD *)(result + 36);
    v50 = v47[1];
    v51 = (_BYTE *)(*v47 + v48 * v26 + v46);
    v52 = v47[2];
    if (v52)
      v53 = (_BYTE *)(v52 + v48 * v28 + v46);
    else
      v53 = 0;
    result = *(unsigned __int8 *)(v23 + 157);
    v54 = *(unsigned __int8 *)(v23 + 156);
    v133 = v27;
    v134 = v26;
    v55 = *(unsigned __int8 *)(v23 + 155);
    v56 = *(unsigned __int8 *)(v23 + 154);
    v57 = v50 + v48 / 2 * v27 + v46;
    v132 = v28;
    do
    {
      v58 = &v53[v28];
      v59 = &v51[v26];
      v60 = v25;
      v61 = v49 + v25;
      if (v21)
      {
        v62 = 0;
        v63 = v58;
        v64 = &v51[v26];
        v65 = v49 + v25;
        do
        {
          v66 = v49 + 8;
          v67 = v65 + 8;
          if (v53)
          {
            LOWORD(v36) = *(_WORD *)(v49 + 2 * result);
            HIWORD(v33) = 15231;
            v68 = (float)LODWORD(v36) * 0.0038911;
            v69 = llroundf(v68);
            LOWORD(v68) = *(_WORD *)(v66 + 2 * result);
            v70 = (float)LODWORD(v68) * 0.0038911;
            v71 = llroundf(v70);
            LOWORD(v70) = *(_WORD *)(v65 + 2 * result);
            v72 = (float)LODWORD(v70) * 0.0038911;
            v73 = llroundf(v72);
            LOWORD(v72) = *(_WORD *)(v67 + 2 * result);
            v36 = (float)LODWORD(v72) * 0.0038911;
            v74 = llroundf(v36);
          }
          else
          {
            v73 = 0;
            v69 = 0;
            v71 = 0;
            v74 = 0;
          }
          LOWORD(v36) = *(_WORD *)(v49 + 2 * v56);
          LOWORD(v33) = *(_WORD *)(v49 + 2 * v55);
          LOWORD(v8) = *(_WORD *)(v49 + 2 * v54);
          LOWORD(v9) = *(_WORD *)(v66 + 2 * v56);
          LOWORD(v10) = *(_WORD *)(v66 + 2 * v55);
          LOWORD(_S13) = *(_WORD *)(v66 + 2 * v54);
          LOWORD(_S14) = *(_WORD *)(v65 + 2 * v56);
          LOWORD(_S15) = *(_WORD *)(v65 + 2 * v55);
          LOWORD(v34) = *(_WORD *)(v65 + 2 * v54);
          LOWORD(_S21) = *(_WORD *)(v67 + 2 * v56);
          LOWORD(_S22) = *(_WORD *)(v67 + 2 * v55);
          LOWORD(_S24) = *(_WORD *)(v67 + 2 * v54);
          _H18 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v29 * (float)LODWORD(v36), 0.0), 8191.0)));
          __asm { FCVT            S18, H18 }
          _H19 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v29 * (float)LODWORD(v33), 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          _H10 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v29 * (float)LODWORD(v8), 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          _H11 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v29 * (float)LODWORD(v9), 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          _H12 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v29 * (float)LODWORD(v10), 0.0), 8191.0)));
          _H13 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v29 * (float)LODWORD(_S13), 0.0), 8191.0)));
          __asm
          {
            FCVT            S12, H12
            FCVT            S13, H13
          }
          _H14 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v29 * (float)LODWORD(_S14), 0.0), 8191.0)));
          __asm { FCVT            S14, H14 }
          _H15 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v29 * (float)LODWORD(_S15), 0.0), 8191.0)));
          __asm { FCVT            S15, H15 }
          _H20 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v29 * (float)LODWORD(v34), 0.0), 8191.0)));
          __asm { FCVT            S20, H20 }
          _H21 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v29 * (float)LODWORD(_S21), 0.0), 8191.0)));
          __asm { FCVT            S21, H21 }
          _H22 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v29 * (float)LODWORD(_S22), 0.0), 8191.0)));
          _H24 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v29 * (float)LODWORD(_S24), 0.0), 8191.0)));
          __asm
          {
            FCVT            S22, H22
            FCVT            S24, H24
          }
          _S5 = (float)((float)(v136 * _S19) + (float)(_S18 * v138)) + (float)(_S10 * v37);
          _S3 = (float)((float)(v39 * _S19) + (float)(_S18 * v38)) + (float)(_S10 * v40);
          v102 = (float)((float)(v43 * _S19) + (float)(_S18 * v41)) + (float)(_S10 * v42);
          v103 = (float)((float)(v136 * _S12) + (float)(_S11 * v138)) + (float)(_S13 * v37);
          _S7 = (float)((float)(v39 * _S12) + (float)(_S11 * v38)) + (float)(_S13 * v40);
          v105 = (float)((float)(v43 * _S12) + (float)(_S11 * v41)) + (float)(_S13 * v42);
          v106 = (float)((float)(v136 * _S15) + (float)(_S14 * v138)) + (float)(_S20 * v37);
          _S6 = (float)((float)(v39 * _S15) + (float)(_S14 * v38)) + (float)(_S20 * v40);
          v34 = (float)((float)(v43 * _S15) + (float)(_S14 * v41)) + (float)(_S20 * v42);
          LOWORD(_S5) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S12, H5 }
          LOWORD(_S3) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          __asm { FCVT            S10, H3 }
          LOWORD(_S3) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v102, 0.0), 8191.0)));
          __asm { FCVT            S11, H3 }
          LOWORD(_S3) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v103, 0.0), 8191.0)));
          __asm { FCVT            S13, H3 }
          LOWORD(_S3) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(_S7, 0.0), 8191.0)));
          LOWORD(_S5) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v105, 0.0), 8191.0)));
          __asm
          {
            FCVT            S15, H3
            FCVT            S14, H5
          }
          LOWORD(_S3) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v106, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          LOWORD(_S5) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          __asm { FCVT            S18, H5 }
          LOWORD(_S5) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v34, 0.0), 8191.0)));
          __asm { FCVT            S19, H5 }
          LOWORD(_S5) = *(_WORD *)(v45
                                 + 2
                                 * llroundf(fminf(fmaxf((float)((float)(v136 * _S22) + (float)(_S21 * v138)) + (float)(_S24 * v37), 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = *(_WORD *)(v45
                                 + 2
                                 * llroundf(fminf(fmaxf((float)((float)(v39 * _S22) + (float)(_S21 * v38)) + (float)(_S24 * v40), 0.0), 8191.0)));
          LOWORD(_S7) = *(_WORD *)(v45
                                 + 2
                                 * llroundf(fminf(fmaxf((float)((float)(v43 * _S22) + (float)(_S21 * v41)) + (float)(_S24 * v42), 0.0), 8191.0)));
          __asm
          {
            FCVT            S6, H6
            FCVT            S7, H7
          }
          HIWORD(_S21) = HIWORD(v145);
          HIWORD(v34) = HIWORD(v146);
          HIWORD(_S22) = HIWORD(v144);
          v117 = (float)((float)((float)(v145 * _S10) + (float)(v146 * _S12)) + (float)(v144 * _S11)) + v30;
          if (v117 < v30)
            v118 = v30;
          else
            v118 = (float)((float)((float)(v145 * _S10) + (float)(v146 * _S12)) + (float)(v144 * _S11)) + v30;
          v119 = v117 <= v32;
          v120 = (float)((float)((float)(v145 * _S15) + (float)(v146 * _S13)) + (float)(v144 * _S14)) + v30;
          if (!v119)
            v118 = v32;
          v121 = llroundf(v118);
          if (v120 < v30)
            v122 = v30;
          else
            v122 = (float)((float)((float)(v145 * _S15) + (float)(v146 * _S13)) + (float)(v144 * _S14)) + v30;
          v119 = v120 <= v32;
          v123 = (float)((float)((float)(v145 * _S18) + (float)(v146 * _S3)) + (float)(v144 * _S19)) + v30;
          if (!v119)
            v122 = v32;
          v124 = llroundf(v122);
          if (v123 < v30)
            v125 = v30;
          else
            v125 = (float)((float)((float)(v145 * _S18) + (float)(v146 * _S3)) + (float)(v144 * _S19)) + v30;
          v119 = v123 <= v32;
          v126 = (float)((float)((float)(v145 * _S6) + (float)(v146 * _S5)) + (float)(v144 * _S7)) + v30;
          if (!v119)
            v125 = v32;
          v127 = llroundf(v125);
          if (v126 < v30)
            v128 = v30;
          else
            v128 = (float)((float)((float)(v145 * _S6) + (float)(v146 * _S5)) + (float)(v144 * _S7)) + v30;
          if (v126 <= v32)
            v129 = v128;
          else
            v129 = v32;
          v10 = (float)((float)(_S12 + _S13) + _S3) + _S5;
          v130 = (float)((float)(_S10 + _S15) + _S18) + _S6;
          *v51 = v121;
          v51[1] = v124;
          *v64 = v127;
          v64[1] = llroundf(v129);
          v131 = (float)((float)(_S11 + _S14) + _S19) + _S7;
          v9 = (float)((float)(v148 + (float)(v10 * v143)) + (float)(v130 * v142)) + (float)(v131 * v141);
          v8 = v147;
          if (v9 <= v147)
          {
            v8 = (float)((float)(v148 + (float)(v10 * v143)) + (float)(v130 * v142)) + (float)(v131 * v141);
            if (v9 < v149)
              v8 = v149;
          }
          v36 = (float)((float)(v148 + (float)(v10 * v140)) + (float)(v130 * v139)) + (float)(v131 * v137);
          *(_BYTE *)(v57 + v62) = llroundf(v8);
          v33 = v147;
          if (v36 <= v147)
          {
            v33 = v36;
            if (v36 < v149)
              v33 = v149;
          }
          *(_BYTE *)(v57 + v62 + 1) = llroundf(v33);
          if (v53)
          {
            *v53 = v69;
            v53[1] = v71;
            v53 += 2;
            *v63 = v73;
            v63[1] = v74;
            v63 += 2;
          }
          v49 += 16;
          v65 += 16;
          v51 += 2;
          v64 += 2;
          v62 += 2;
        }
        while (v21 > v62);
      }
      v49 = v61 + v60;
      v25 = v60;
      v26 = v134;
      v51 = &v59[v134];
      v57 += v133;
      v53 = &v58[v132];
      v28 = v132;
      v20 += 2;
    }
    while (v135 > v20);
  }
  return result;
}

uint64_t vt_Copy_l64r_rgb_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_rgb_420vf_GCD);
  return 0;
}

unint64_t vt_Copy_l64r_rgb_420vf_GCD(unint64_t result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  _BYTE *v63;
  uint64_t v64;
  unint64_t v65;
  _BYTE *v66;
  _BYTE *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  float v71;
  char v72;
  float v73;
  char v74;
  float v75;
  char v76;
  char v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  char v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;

  v19 = *(_QWORD *)(result + 28);
  v20 = 2 * *(unsigned __int8 *)result;
  v21 = v19 * a2 / v20;
  v22 = (v19 + v19 * a2) / v20;
  if (2 * v22 != 2 * v21)
  {
    v23 = 0;
    v24 = *(_QWORD *)(result + 20);
    v25 = *(_QWORD *)(result + 44) + 2 * v21;
    v26 = 2 * v22 - 2 * v21;
    v27 = *(_QWORD *)(result + 152);
    v28 = *(uint64_t **)(result + 136);
    v29 = **(_QWORD **)(result + 64);
    v30 = *v28;
    v31 = v28[1];
    v32 = v28[2];
    *(float *)&v33 = (float)*(unsigned int *)(v27 + 136);
    v34 = *(float *)&v33 / (float)*(unsigned int *)(v27 + 128);
    LOWORD(v33) = *(_WORD *)(v27 + 144);
    v35 = (float)v33;
    LOWORD(a5) = *(_WORD *)(v27 + 146);
    v36 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v27 + 148);
    v37 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v27 + 150);
    v38 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v27 + 152);
    v39 = (float)LODWORD(a8);
    v40 = *(float *)(v27 + 36);
    v41 = *(float *)(v27 + 40);
    v42 = *(float *)(v27 + 44);
    v43 = *(float *)(v27 + 48) * 0.25;
    v44 = *(float *)(v27 + 52) * 0.25;
    v45 = *(float *)(v27 + 56) * 0.25;
    v46 = *(float *)(v27 + 60) * 0.25;
    v47 = *(float *)(v27 + 64) * 0.25;
    v48 = *(float *)(v27 + 68);
    v49 = v48 * 0.25;
    v50 = *(_QWORD *)(result + 112);
    v51 = *(_QWORD **)(result + 128);
    v52 = *(_QWORD *)(result + 120) + 2 * (*(_QWORD *)(result + 104) * a2 / v20);
    v53 = **(_QWORD **)(result + 56) + v29 * v25 + 8 * *(_QWORD *)(result + 36);
    v54 = (_BYTE *)(*v51 + v52 * v30 + v50);
    v55 = v51[2];
    if (v55)
      v56 = (_BYTE *)(v55 + v52 * v32 + v50);
    else
      v56 = 0;
    v57 = *(unsigned __int8 *)(v27 + 157);
    result = *(unsigned __int8 *)(v27 + 156);
    v58 = v51[1] + v52 / 2 * v31;
    v59 = *(unsigned __int8 *)(v27 + 155);
    v60 = *(unsigned __int8 *)(v27 + 154);
    v61 = v58 + v50;
    do
    {
      v62 = &v56[v32];
      v63 = &v54[v30];
      v64 = v53 + v29;
      if (v24)
      {
        v65 = 0;
        v66 = &v56[v32];
        v67 = &v54[v30];
        v68 = v53 + v29;
        do
        {
          v69 = v53 + 8;
          v70 = v68 + 8;
          if (v56)
          {
            LOWORD(v48) = *(_WORD *)(v53 + 2 * v57);
            HIWORD(v11) = 15231;
            v71 = (float)LODWORD(v48) * 0.0038911;
            v72 = llroundf(v71);
            LOWORD(v71) = *(_WORD *)(v69 + 2 * v57);
            v73 = (float)LODWORD(v71) * 0.0038911;
            v74 = llroundf(v73);
            LOWORD(v73) = *(_WORD *)(v68 + 2 * v57);
            v75 = (float)LODWORD(v73) * 0.0038911;
            v76 = llroundf(v75);
            LOWORD(v75) = *(_WORD *)(v70 + 2 * v57);
            v48 = (float)LODWORD(v75) * 0.0038911;
            v77 = llroundf(v48);
          }
          else
          {
            v76 = 0;
            v72 = 0;
            v74 = 0;
            v77 = 0;
          }
          LOWORD(v48) = *(_WORD *)(v53 + 2 * v60);
          v78 = v34 * (float)LODWORD(v48);
          LOWORD(v11) = *(_WORD *)(v53 + 2 * v59);
          v79 = v34 * (float)LODWORD(v11);
          LOWORD(v12) = *(_WORD *)(v53 + 2 * result);
          v80 = v34 * (float)LODWORD(v12);
          LOWORD(v13) = *(_WORD *)(v69 + 2 * v60);
          v81 = v34 * (float)LODWORD(v13);
          LOWORD(v14) = *(_WORD *)(v69 + 2 * v59);
          v82 = v34 * (float)LODWORD(v14);
          LOWORD(v15) = *(_WORD *)(v69 + 2 * result);
          v15 = v34 * (float)LODWORD(v15);
          LOWORD(v16) = *(_WORD *)(v68 + 2 * v60);
          v16 = v34 * (float)LODWORD(v16);
          LOWORD(v17) = *(_WORD *)(v68 + 2 * v59);
          v17 = v34 * (float)LODWORD(v17);
          LOWORD(v18) = *(_WORD *)(v68 + 2 * result);
          v18 = v34 * (float)LODWORD(v18);
          LOWORD(v8) = *(_WORD *)(v70 + 2 * v60);
          v8 = v34 * (float)LODWORD(v8);
          LOWORD(v9) = *(_WORD *)(v70 + 2 * v59);
          v9 = v34 * (float)LODWORD(v9);
          LOWORD(v10) = *(_WORD *)(v70 + 2 * result);
          v10 = v34 * (float)LODWORD(v10);
          v83 = (float)((float)((float)(v41 * v79) + (float)(v40 * v78)) + (float)(v42 * v80)) + v35;
          v84 = (float)((float)((float)(v41 * v82) + (float)(v40 * v81)) + (float)(v42 * v15)) + v35;
          v85 = (float)((float)((float)(v41 * v17) + (float)(v40 * v16)) + (float)(v42 * v18)) + v35;
          v86 = (float)((float)((float)(v41 * v9) + (float)(v40 * v8)) + (float)(v42 * v10)) + v35;
          if (v83 < v35)
            v87 = v35;
          else
            v87 = (float)((float)((float)(v41 * v79) + (float)(v40 * v78)) + (float)(v42 * v80)) + v35;
          if (v83 <= v37)
            v88 = v87;
          else
            v88 = v37;
          v89 = llroundf(v88);
          if (v84 < v35)
            v90 = v35;
          else
            v90 = (float)((float)((float)(v41 * v82) + (float)(v40 * v81)) + (float)(v42 * v15)) + v35;
          if (v84 > v37)
            v90 = v37;
          *v54 = v89;
          v54[1] = llroundf(v90);
          if (v85 < v35)
            v91 = v35;
          else
            v91 = (float)((float)((float)(v41 * v17) + (float)(v40 * v16)) + (float)(v42 * v18)) + v35;
          if (v85 > v37)
            v91 = v37;
          *v67 = llroundf(v91);
          if (v86 < v35)
            v92 = v35;
          else
            v92 = (float)((float)((float)(v41 * v9) + (float)(v40 * v8)) + (float)(v42 * v10)) + v35;
          if (v86 > v37)
            v92 = v37;
          v67[1] = llroundf(v92);
          v93 = (float)((float)(v78 + v81) + v16) + v8;
          v94 = (float)((float)(v79 + v82) + v17) + v9;
          v12 = (float)((float)(v80 + v15) + v18) + v10;
          v14 = (float)((float)(v36 + (float)(v93 * v43)) + (float)(v94 * v44)) + (float)(v12 * v45);
          v13 = v39;
          if (v14 <= v39)
          {
            v13 = (float)((float)(v36 + (float)(v93 * v43)) + (float)(v94 * v44)) + (float)(v12 * v45);
            if (v14 < v38)
              v13 = v38;
          }
          v48 = (float)((float)(v36 + (float)(v93 * v46)) + (float)(v94 * v47)) + (float)(v12 * v49);
          *(_BYTE *)(v61 + v65) = llroundf(v13);
          v11 = v39;
          if (v48 <= v39)
          {
            v11 = v48;
            if (v48 < v38)
              v11 = v38;
          }
          *(_BYTE *)(v61 + v65 + 1) = llroundf(v11);
          if (v56)
          {
            *v56 = v72;
            v56[1] = v74;
            v56 += 2;
            *v66 = v76;
            v66[1] = v77;
            v66 += 2;
          }
          v53 += 16;
          v68 += 16;
          v54 += 2;
          v67 += 2;
          v65 += 2;
        }
        while (v24 > v65);
      }
      v53 = v64 + v29;
      v54 = &v63[v30];
      v61 += v31;
      v56 = &v62[v32];
      v23 += 2;
    }
    while (v26 > v23);
  }
  return result;
}

uint64_t vt_Copy_l64r_TRC_Tone_Mat_TRC_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_TRC_Tone_Mat_TRC_xf420_GCD);
  return 0;
}

unint64_t vt_Copy_l64r_TRC_Tone_Mat_TRC_xf420_GCD(unint64_t result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  unsigned int v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  float v33;
  float v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  unsigned int v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  float v56;
  float v66;
  float v67;
  float v68;
  float v75;
  float v76;
  float v77;
  unsigned int v78;
  float v81;
  float v86;
  float v87;
  float v88;
  unsigned int v89;
  float v90;
  float v92;
  float v100;
  float v101;
  float v102;
  float v105;
  float v106;
  float v107;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v117;
  float v118;
  float v120;
  float v121;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v147;
  float v148;
  BOOL v149;
  float v150;
  unsigned int v151;
  float v152;
  float v153;
  unsigned int v154;
  float v155;
  float v156;
  unsigned int v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  _WORD *v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float v182;
  float v183;
  float v184;
  float v185;
  float v186;
  float v187;
  float v188;

  v6 = *(_QWORD *)(result + 28);
  v7 = 2 * *(unsigned __int8 *)result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (2 * v9 != 2 * v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)(result + 20);
    v12 = *(_QWORD *)(result + 44) + 2 * v8;
    v13 = 2 * v9 - 2 * v8;
    v14 = *(_QWORD *)(result + 152);
    v15 = *(uint64_t **)(result + 136);
    v16 = **(_QWORD **)(result + 64);
    v17 = *v15;
    v18 = v15[1];
    v19 = 8191.0 / (float)*(unsigned int *)(v14 + 128);
    LOWORD(a5) = *(_WORD *)(v14 + 144);
    v20 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v14 + 146);
    v21 = (float)LODWORD(a6);
    LOWORD(a6) = *(_WORD *)(v14 + 148);
    v22 = (float)LODWORD(a6);
    LOWORD(a6) = *(_WORD *)(v14 + 150);
    *(float *)&v23 = (float)LODWORD(a6);
    v188 = *(float *)&v23;
    LOWORD(v23) = *(_WORD *)(v14 + 152);
    v24 = (float)v23;
    v184 = *(float *)(v14 + 40);
    v185 = *(float *)(v14 + 36);
    v182 = *(float *)(v14 + 48) * 0.25;
    v183 = *(float *)(v14 + 44);
    v180 = *(float *)(v14 + 56) * 0.25;
    v181 = *(float *)(v14 + 52) * 0.25;
    v178 = *(float *)(v14 + 64) * 0.25;
    v179 = *(float *)(v14 + 60) * 0.25;
    v25 = *(float *)(v14 + 72);
    v176 = *(float *)(v14 + 68) * 0.25;
    v177 = v25;
    v174 = *(float *)(v14 + 80);
    v175 = *(float *)(v14 + 76);
    v172 = *(float *)(v14 + 88);
    v173 = *(float *)(v14 + 84);
    v170 = *(float *)(v14 + 96);
    v171 = *(float *)(v14 + 92);
    v26 = *(float *)(v14 + 100);
    v27 = *(float *)(v14 + 104);
    v28 = *(float *)(v14 + 108);
    v168 = v27;
    v169 = v26;
    v29 = v14 + 164;
    v30 = v14 + 16548;
    v31 = v14 + 32932;
    v32 = *(float *)(v14 + 112);
    v33 = *(float *)(v14 + 116);
    v34 = *(float *)(v14 + 120);
    v35 = *(_QWORD *)(result + 112);
    v36 = *(_QWORD *)(result + 104) * a2 / v7;
    v37 = *(_QWORD **)(result + 128);
    v38 = *(_QWORD *)(result + 120) + 2 * v36;
    v39 = **(_QWORD **)(result + 56) + v16 * v12 + 8 * *(_QWORD *)(result + 36);
    v40 = v37[1];
    v41 = (char *)(*v37 + v38 * v17 + 2 * v35);
    v42 = *(unsigned __int8 *)(v14 + 132);
    if (v42 >= 0x11)
      v43 = 0;
    else
      v43 = 16 - v42;
    result = *(unsigned __int8 *)(v14 + 156);
    if (v38 >= 0)
      v44 = v38;
    else
      v44 = v38 + 1;
    v45 = v40 + (v44 >> 1) * v18;
    v46 = *(unsigned __int8 *)(v14 + 155);
    v47 = *(unsigned __int8 *)(v14 + 154);
    v48 = v45 + 2 * v35;
    v49 = v43;
    v186 = v24;
    v187 = v21;
    v166 = v32;
    v167 = v28;
    v165 = v33;
    do
    {
      v50 = &v41[v17];
      v51 = v39 + v16;
      if (v11)
      {
        v52 = 0;
        v53 = v39 + v16;
        v54 = &v41[v17];
        do
        {
          LOWORD(v27) = *(_WORD *)(v39 + 2 * v47);
          LOWORD(v26) = *(_WORD *)(v39 + 2 * v46);
          LOWORD(v25) = *(_WORD *)(v39 + 2 * result);
          _H3 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v19 * (float)LODWORD(v27), 0.0), 8191.0)));
          v56 = v19 * (float)LODWORD(v25);
          __asm { FCVT            S14, H3 }
          _H3 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v19 * (float)LODWORD(v26), 0.0), 8191.0)));
          __asm { FCVT            S15, H3 }
          _H3 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v56, 0.0), 8191.0)));
          __asm { FCVT            S18, H3 }
          v66 = fmaxf(_S14, fmaxf(_S15, _S18));
          v67 = (float)((float)((float)(v32 * _S15) + (float)(v28 * _S14)) + (float)(v33 * _S18)) + (float)(v34 * v66);
          v68 = 8191.0;
          if (v67 <= 8191.0)
          {
            v68 = (float)((float)((float)(v32 * _S15) + (float)(v28 * _S14)) + (float)(v33 * _S18)) + (float)(v34 * v66);
            if (v67 < 0.0)
              v68 = 0.0;
          }
          LOWORD(v67) = *(_WORD *)(v39 + 8 + 2 * v47);
          LOWORD(v66) = *(_WORD *)(v39 + 8 + 2 * v46);
          LOWORD(v56) = *(_WORD *)(v39 + 8 + 2 * result);
          _H3 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v19 * (float)LODWORD(v67), 0.0), 8191.0)));
          __asm { FCVT            S20, H3 }
          _H3 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v19 * (float)LODWORD(v66), 0.0), 8191.0)));
          __asm { FCVT            S21, H3 }
          _H3 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v19 * (float)LODWORD(v56), 0.0), 8191.0)));
          __asm { FCVT            S22, H3 }
          v75 = fmaxf(_S20, fmaxf(_S21, _S22));
          v76 = (float)((float)((float)(v32 * _S21) + (float)(v28 * _S20)) + (float)(v33 * _S22)) + (float)(v34 * v75);
          v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            v77 = (float)((float)((float)(v32 * _S21) + (float)(v28 * _S20)) + (float)(v33 * _S22)) + (float)(v34 * v75);
            if (v76 < 0.0)
              v77 = 0.0;
          }
          LOWORD(v76) = *(_WORD *)(v53 + 2 * v47);
          LOWORD(v75) = *(_WORD *)(v53 + 2 * v46);
          *(float *)&v78 = (float)LODWORD(v75);
          _S6 = v19 * *(float *)&v78;
          LOWORD(v78) = *(_WORD *)(v53 + 2 * result);
          _H3 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v19 * (float)LODWORD(v76), 0.0), 8191.0)));
          v81 = v19 * (float)v78;
          __asm { FCVT            S5, H3 }
          _H3 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          LOWORD(_S6) = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          __asm { FCVT            S7, H6 }
          v86 = fmaxf(_S5, fmaxf(_S3, _S7));
          v87 = (float)((float)((float)(v32 * _S3) + (float)(v28 * _S5)) + (float)(v33 * _S7)) + (float)(v34 * v86);
          v88 = 8191.0;
          if (v87 <= 8191.0)
          {
            v88 = (float)((float)((float)(v32 * _S3) + (float)(v28 * _S5)) + (float)(v33 * _S7)) + (float)(v34 * v86);
            if (v87 < 0.0)
              v88 = 0.0;
          }
          LOWORD(v87) = *(_WORD *)(v53 + 8 + 2 * v47);
          LOWORD(v86) = *(_WORD *)(v53 + 8 + 2 * v46);
          *(float *)&v89 = (float)LODWORD(v86);
          v90 = v19 * *(float *)&v89;
          LOWORD(v89) = *(_WORD *)(v53 + 8 + 2 * result);
          _H6 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v19 * (float)LODWORD(v87), 0.0), 8191.0)));
          v92 = v19 * (float)v89;
          __asm { FCVT            S16, H6 }
          _H6 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          __asm { FCVT            S23, H6 }
          _H6 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          __asm { FCVT            S25, H6 }
          _H6 = *(_WORD *)(v30 + 2 * llroundf(v68));
          __asm { FCVT            S19, H6 }
          v100 = _S14 * _S19;
          v101 = _S15 * _S19;
          v102 = _S18 * _S19;
          _H18 = *(_WORD *)(v30 + 2 * llroundf(v77));
          __asm { FCVT            S18, H18 }
          v105 = _S20 * _S18;
          v106 = _S21 * _S18;
          v107 = _S22 * _S18;
          _H17 = *(_WORD *)(v30 + 2 * llroundf(v88));
          __asm { FCVT            S17, H17 }
          v110 = _S5 * _S17;
          v111 = _S3 * _S17;
          v112 = _S7 * _S17;
          v113 = (float)((float)((float)(v32 * _S23) + (float)(v28 * _S16)) + (float)(v33 * _S25))
               + (float)(v34 * fmaxf(_S16, fmaxf(_S23, _S25)));
          v114 = 8191.0;
          if (v113 <= 8191.0)
          {
            v114 = v113;
            if (v113 < 0.0)
              v114 = 0.0;
          }
          _H7 = *(_WORD *)(v30 + 2 * llroundf(v114));
          __asm { FCVT            S7, H7 }
          v117 = _S16 * _S7;
          v118 = _S23 * _S7;
          _S7 = _S25 * _S7;
          v120 = (float)((float)(v175 * v101) + (float)(v100 * v177)) + (float)(v102 * v174);
          v121 = (float)((float)(v172 * v101) + (float)(v100 * v173)) + (float)(v102 * v171);
          _S6 = (float)((float)(v169 * v101) + (float)(v100 * v170)) + (float)(v102 * v168);
          v123 = (float)((float)(v175 * v106) + (float)(v105 * v177)) + (float)(v107 * v174);
          v124 = (float)((float)(v172 * v106) + (float)(v105 * v173)) + (float)(v107 * v171);
          v125 = (float)((float)(v169 * v106) + (float)(v105 * v170)) + (float)(v107 * v168);
          v126 = (float)((float)(v175 * v111) + (float)(v110 * v177)) + (float)(v112 * v174);
          v127 = (float)((float)(v172 * v111) + (float)(v110 * v173)) + (float)(v112 * v171);
          _S3 = (float)((float)(v169 * v111) + (float)(v110 * v170)) + (float)(v112 * v168);
          _H5 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v120, 0.0), 8191.0)));
          __asm { FCVT            S18, H5 }
          _H5 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v121, 0.0), 8191.0)));
          __asm { FCVT            S19, H5 }
          _H5 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          LOWORD(_S6) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v123, 0.0), 8191.0)));
          __asm
          {
            FCVT            S20, H5
            FCVT            S21, H6
          }
          _H5 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v124, 0.0), 8191.0)));
          __asm { FCVT            S24, H5 }
          _H5 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v125, 0.0), 8191.0)));
          __asm { FCVT            S22, H5 }
          _H5 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v126, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v127, 0.0), 8191.0)));
          __asm { FCVT            S14, H6 }
          LOWORD(_S3) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          LOWORD(_S6) = *(_WORD *)(v31
                                 + 2
                                 * llroundf(fminf(fmaxf((float)((float)(v175 * v118) + (float)(v117 * v177)) + (float)(_S7 * v174), 0.0), 8191.0)));
          __asm
          {
            FCVT            S15, H3
            FCVT            S3, H6
          }
          LOWORD(_S6) = *(_WORD *)(v31
                                 + 2
                                 * llroundf(fminf(fmaxf((float)((float)(v172 * v118) + (float)(v117 * v173)) + (float)(_S7 * v171), 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          LOWORD(_S7) = *(_WORD *)(v31
                                 + 2
                                 * llroundf(fminf(fmaxf((float)((float)(v169 * v118) + (float)(v117 * v170)) + (float)(_S7 * v168), 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          v147 = (float)((float)((float)(v184 * _S19) + (float)(v185 * _S18)) + (float)(v183 * _S20)) + v20;
          if (v147 < v20)
            v148 = v20;
          else
            v148 = (float)((float)((float)(v184 * _S19) + (float)(v185 * _S18)) + (float)(v183 * _S20)) + v20;
          v149 = v147 <= v22;
          v150 = (float)((float)((float)(v184 * _S24) + (float)(v185 * _S21)) + (float)(v183 * _S22)) + v20;
          if (!v149)
            v148 = v22;
          v151 = llroundf(v148);
          if (v150 < v20)
            v152 = v20;
          else
            v152 = (float)((float)((float)(v184 * _S24) + (float)(v185 * _S21)) + (float)(v183 * _S22)) + v20;
          v149 = v150 <= v22;
          v153 = (float)((float)((float)(v184 * _S14) + (float)(v185 * _S5)) + (float)(v183 * _S15)) + v20;
          if (!v149)
            v152 = v22;
          v154 = llroundf(v152);
          if (v153 < v20)
            v155 = v20;
          else
            v155 = (float)((float)((float)(v184 * _S14) + (float)(v185 * _S5)) + (float)(v183 * _S15)) + v20;
          v149 = v153 <= v22;
          v156 = (float)((float)((float)(v184 * _S6) + (float)(v185 * _S3)) + (float)(v183 * _S7)) + v20;
          if (!v149)
            v155 = v22;
          v157 = llroundf(v155);
          if (v156 < v20)
            v158 = v20;
          else
            v158 = (float)((float)((float)(v184 * _S6) + (float)(v185 * _S3)) + (float)(v183 * _S7)) + v20;
          if (v156 <= v22)
            v159 = v158;
          else
            v159 = v22;
          v160 = (float)((float)(_S18 + _S21) + _S5) + _S3;
          v161 = (float)((float)(_S19 + _S24) + _S14) + _S6;
          *(_WORD *)v41 = v151 << v49;
          *((_WORD *)v41 + 1) = v154 << v49;
          *(_WORD *)v54 = v157 << v49;
          *((_WORD *)v54 + 1) = llroundf(v159) << v49;
          v25 = (float)((float)(_S20 + _S22) + _S15) + _S7;
          v162 = (float)((float)(v187 + (float)(v160 * v182)) + (float)(v161 * v181)) + (float)(v25 * v180);
          v163 = v186;
          if (v162 <= v186)
          {
            v163 = (float)((float)(v187 + (float)(v160 * v182)) + (float)(v161 * v181)) + (float)(v25 * v180);
            if (v162 < v188)
              v163 = v188;
          }
          v164 = (_WORD *)(v48 + 2 * v52);
          v26 = (float)((float)(v187 + (float)(v160 * v179)) + (float)(v161 * v178)) + (float)(v25 * v176);
          *v164 = llroundf(v163) << v49;
          v27 = v186;
          if (v26 <= v186)
          {
            v27 = v26;
            if (v26 < v188)
              v27 = v188;
          }
          v39 += 16;
          v53 += 16;
          v41 += 4;
          v54 += 4;
          v164[1] = llroundf(v27) << v49;
          v52 += 2;
          v32 = v166;
          v28 = v167;
          v33 = v165;
        }
        while (v11 > v52);
      }
      v39 = v51 + v16;
      v41 = &v50[v17];
      v48 += v18;
      v10 += 2;
    }
    while (v13 > v10);
  }
  return result;
}

uint64_t vt_Copy_l64r_TRC_Mat_TRC_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_TRC_Mat_TRC_xf420_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_l64r_TRC_Mat_TRC_xf420_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  float v9;
  float v10;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  unsigned __int8 *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unsigned __int8 *v66;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v109;
  float v110;
  BOOL v111;
  float v112;
  unsigned int v113;
  float v114;
  float v115;
  unsigned int v116;
  float v117;
  float v118;
  unsigned int v119;
  float v120;
  float v121;
  float v122;
  float v123;
  _WORD *v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;

  v18 = *(_QWORD *)(result + 28);
  v19 = 2 * *result;
  v20 = v18 * a2 / v19;
  v21 = (v18 + v18 * a2) / v19;
  if (2 * v21 != 2 * v20)
  {
    v22 = 0;
    v23 = *(_QWORD *)(result + 20);
    v24 = *(_QWORD *)(result + 44) + 2 * v20;
    v25 = 2 * v21 - 2 * v20;
    v26 = *((_QWORD *)result + 19);
    v27 = (uint64_t *)*((_QWORD *)result + 17);
    v28 = **((_QWORD **)result + 8);
    v29 = *v27;
    v30 = v27[1];
    v31 = 8191.0 / (float)*(unsigned int *)(v26 + 128);
    LOWORD(a5) = *(_WORD *)(v26 + 144);
    v32 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v26 + 146);
    LOWORD(a7) = *(_WORD *)(v26 + 148);
    v33 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v26 + 150);
    v136 = (float)LODWORD(a8);
    LOWORD(a9) = *(_WORD *)(v26 + 152);
    v137 = (float)LODWORD(a9);
    v138 = (float)LODWORD(a6);
    v134 = *(float *)(v26 + 40);
    v135 = *(float *)(v26 + 36);
    v34 = 0.25;
    v132 = *(float *)(v26 + 48) * 0.25;
    v133 = *(float *)(v26 + 44);
    v130 = *(float *)(v26 + 56) * 0.25;
    v131 = *(float *)(v26 + 52) * 0.25;
    v35 = *(float *)(v26 + 64);
    v128 = v35 * 0.25;
    v129 = *(float *)(v26 + 60) * 0.25;
    v36 = *(float *)(v26 + 68);
    v126 = v36 * 0.25;
    v127 = *(float *)(v26 + 72);
    v37 = *(float *)(v26 + 80);
    v125 = *(float *)(v26 + 76);
    v38 = *(float *)(v26 + 84);
    v39 = *(float *)(v26 + 88);
    v40 = *(float *)(v26 + 92);
    v41 = *(float *)(v26 + 96);
    v43 = *(float *)(v26 + 100);
    v42 = *(float *)(v26 + 104);
    v44 = v26 + 164;
    v45 = v26 + 16548;
    v46 = *((_QWORD *)result + 14);
    v47 = *((_QWORD *)result + 13) * a2 / v19;
    v48 = (uint64_t *)*((_QWORD *)result + 16);
    v49 = *((_QWORD *)result + 15) + 2 * v47;
    v50 = **((_QWORD **)result + 7) + v28 * v24 + 8 * *(_QWORD *)(result + 36);
    v52 = *v48;
    v51 = v48[1];
    result = (unsigned __int8 *)(v52 + v49 * v29 + 2 * v46);
    v53 = *(unsigned __int8 *)(v26 + 132);
    if (v53 >= 0x11)
      v54 = 0;
    else
      v54 = 16 - v53;
    v55 = *(unsigned __int8 *)(v26 + 156);
    if (v49 >= 0)
      v56 = v49;
    else
      v56 = v49 + 1;
    v57 = v51 + (v56 >> 1) * v30;
    v58 = *(unsigned __int8 *)(v26 + 155);
    v59 = *(unsigned __int8 *)(v26 + 154);
    v60 = v57 + 2 * v46;
    v61 = v54;
    do
    {
      v62 = &result[v29];
      v63 = v50 + v28;
      if (v23)
      {
        v64 = 0;
        v65 = v50 + v28;
        v66 = &result[v29];
        do
        {
          LOWORD(v36) = *(_WORD *)(v50 + 2 * v59);
          LOWORD(v34) = *(_WORD *)(v50 + 2 * v58);
          LOWORD(v35) = *(_WORD *)(v50 + 2 * v55);
          LOWORD(v9) = *(_WORD *)(v50 + 8 + 2 * v59);
          LOWORD(v10) = *(_WORD *)(v50 + 8 + 2 * v58);
          LOWORD(_S12) = *(_WORD *)(v50 + 8 + 2 * v55);
          LOWORD(_S13) = *(_WORD *)(v65 + 2 * v59);
          LOWORD(_S14) = *(_WORD *)(v65 + 2 * v58);
          LOWORD(_S15) = *(_WORD *)(v65 + 2 * v55);
          LOWORD(_S21) = *(_WORD *)(v65 + 8 + 2 * v59);
          LOWORD(_S22) = *(_WORD *)(v65 + 8 + 2 * v58);
          LOWORD(_S24) = *(_WORD *)(v65 + 8 + 2 * v55);
          _H18 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v31 * (float)LODWORD(v36), 0.0), 8191.0)));
          __asm { FCVT            S18, H18 }
          _H19 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v31 * (float)LODWORD(v34), 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          _H20 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v31 * (float)LODWORD(v35), 0.0), 8191.0)));
          _H10 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v31 * (float)LODWORD(v9), 0.0), 8191.0)));
          __asm
          {
            FCVT            S20, H20
            FCVT            S10, H10
          }
          _H11 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v31 * (float)LODWORD(v10), 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          _H12 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v31 * (float)LODWORD(_S12), 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          _H13 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v31 * (float)LODWORD(_S13), 0.0), 8191.0)));
          __asm { FCVT            S13, H13 }
          _H14 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v31 * (float)LODWORD(_S14), 0.0), 8191.0)));
          __asm { FCVT            S14, H14 }
          _H15 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v31 * (float)LODWORD(_S15), 0.0), 8191.0)));
          _H21 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v31 * (float)LODWORD(_S21), 0.0), 8191.0)));
          __asm
          {
            FCVT            S15, H15
            FCVT            S21, H21
          }
          _H22 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v31 * (float)LODWORD(_S22), 0.0), 8191.0)));
          __asm { FCVT            S22, H22 }
          _H24 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v31 * (float)LODWORD(_S24), 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          _S5 = (float)((float)(v125 * _S19) + (float)(_S18 * v127)) + (float)(_S20 * v37);
          _S3 = (float)((float)(v39 * _S19) + (float)(_S18 * v38)) + (float)(_S20 * v40);
          v94 = (float)((float)(v43 * _S19) + (float)(_S18 * v41)) + (float)(_S20 * v42);
          v95 = (float)((float)(v125 * _S11) + (float)(_S10 * v127)) + (float)(_S12 * v37);
          v96 = (float)((float)(v39 * _S11) + (float)(_S10 * v38)) + (float)(_S12 * v40);
          v97 = (float)((float)(v43 * _S11) + (float)(_S10 * v41)) + (float)(_S12 * v42);
          v98 = (float)((float)(v125 * _S14) + (float)(_S13 * v127)) + (float)(_S15 * v37);
          v99 = (float)((float)(v39 * _S14) + (float)(_S13 * v38)) + (float)(_S15 * v40);
          _S6 = (float)((float)(v43 * _S14) + (float)(_S13 * v41)) + (float)(_S15 * v42);
          LOWORD(_S5) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S10, H5 }
          LOWORD(_S3) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          __asm { FCVT            S11, H3 }
          LOWORD(_S3) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          LOWORD(_S5) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v95, 0.0), 8191.0)));
          __asm
          {
            FCVT            S12, H3
            FCVT            S13, H5
          }
          LOWORD(_S3) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v96, 0.0), 8191.0)));
          __asm { FCVT            S15, H3 }
          LOWORD(_S3) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v97, 0.0), 8191.0)));
          __asm { FCVT            S14, H3 }
          LOWORD(_S3) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          __asm { FCVT            S18, H3 }
          LOWORD(_S3) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v99, 0.0), 8191.0)));
          __asm { FCVT            S19, H3 }
          LOWORD(_S3) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          LOWORD(_S5) = *(_WORD *)(v45
                                 + 2
                                 * llroundf(fminf(fmaxf((float)((float)(v125 * _S22) + (float)(_S21 * v127)) + (float)(_S24 * v37), 0.0), 8191.0)));
          __asm
          {
            FCVT            S20, H3
            FCVT            S3, H5
          }
          LOWORD(_S5) = *(_WORD *)(v45
                                 + 2
                                 * llroundf(fminf(fmaxf((float)((float)(v39 * _S22) + (float)(_S21 * v38)) + (float)(_S24 * v40), 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = *(_WORD *)(v45
                                 + 2
                                 * llroundf(fminf(fmaxf((float)((float)(v43 * _S22) + (float)(_S21 * v41)) + (float)(_S24 * v42), 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          HIWORD(_S21) = HIWORD(v134);
          HIWORD(_S22) = HIWORD(v133);
          v109 = (float)((float)((float)(v134 * _S11) + (float)(v135 * _S10)) + (float)(v133 * _S12)) + v32;
          if (v109 < v32)
            v110 = v32;
          else
            v110 = (float)((float)((float)(v134 * _S11) + (float)(v135 * _S10)) + (float)(v133 * _S12)) + v32;
          v111 = v109 <= v33;
          v112 = (float)((float)((float)(v134 * _S15) + (float)(v135 * _S13)) + (float)(v133 * _S14)) + v32;
          if (!v111)
            v110 = v33;
          v113 = llroundf(v110);
          if (v112 < v32)
            v114 = v32;
          else
            v114 = (float)((float)((float)(v134 * _S15) + (float)(v135 * _S13)) + (float)(v133 * _S14)) + v32;
          v111 = v112 <= v33;
          v115 = (float)((float)((float)(v134 * _S19) + (float)(v135 * _S18)) + (float)(v133 * _S20)) + v32;
          if (!v111)
            v114 = v33;
          v116 = llroundf(v114);
          if (v115 < v32)
            v117 = v32;
          else
            v117 = (float)((float)((float)(v134 * _S19) + (float)(v135 * _S18)) + (float)(v133 * _S20)) + v32;
          v111 = v115 <= v33;
          v118 = (float)((float)((float)(v134 * _S5) + (float)(v135 * _S3)) + (float)(v133 * _S6)) + v32;
          if (!v111)
            v117 = v33;
          v119 = llroundf(v117);
          if (v118 < v32)
            v120 = v32;
          else
            v120 = (float)((float)((float)(v134 * _S5) + (float)(v135 * _S3)) + (float)(v133 * _S6)) + v32;
          if (v118 <= v33)
            v121 = v120;
          else
            v121 = v33;
          v122 = (float)((float)(_S10 + _S13) + _S18) + _S3;
          v123 = (float)((float)(_S11 + _S15) + _S19) + _S5;
          *(_WORD *)result = v113 << v61;
          *((_WORD *)result + 1) = v116 << v61;
          *(_WORD *)v66 = v119 << v61;
          *((_WORD *)v66 + 1) = llroundf(v121) << v61;
          v9 = v137;
          v35 = (float)((float)(_S12 + _S14) + _S20) + _S6;
          v10 = (float)((float)(v138 + (float)(v122 * v132)) + (float)(v123 * v131)) + (float)(v35 * v130);
          if (v10 <= v137)
          {
            v9 = (float)((float)(v138 + (float)(v122 * v132)) + (float)(v123 * v131)) + (float)(v35 * v130);
            if (v10 < v136)
              v9 = v136;
          }
          v124 = (_WORD *)(v60 + 2 * v64);
          v34 = (float)((float)(v138 + (float)(v122 * v129)) + (float)(v123 * v128)) + (float)(v35 * v126);
          *v124 = llroundf(v9) << v61;
          v36 = v137;
          if (v34 <= v137)
          {
            v36 = v34;
            if (v34 < v136)
              v36 = v136;
          }
          v50 += 16;
          v65 += 16;
          result += 4;
          v66 += 4;
          v124[1] = llroundf(v36) << v61;
          v64 += 2;
        }
        while (v23 > v64);
      }
      v50 = v63 + v28;
      result = &v62[v29];
      v60 += v30;
      v22 += 2;
    }
    while (v25 > v22);
  }
  return result;
}

uint64_t vt_Copy_l64r_rgb_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_rgb_xf420_GCD);
  return 0;
}

unint64_t vt_Copy_l64r_rgb_xf420_GCD(unint64_t result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  unsigned int v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char *v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  _WORD *v85;

  v17 = *(_QWORD *)(result + 28);
  v18 = 2 * *(unsigned __int8 *)result;
  v19 = v17 * a2 / v18;
  v20 = (v17 + v17 * a2) / v18;
  if (2 * v20 != 2 * v19)
  {
    v21 = 0;
    v22 = *(_QWORD *)(result + 20);
    v23 = *(_QWORD *)(result + 44) + 2 * v19;
    v24 = 2 * v20 - 2 * v19;
    v25 = *(_QWORD *)(result + 152);
    v26 = *(uint64_t **)(result + 136);
    v27 = **(_QWORD **)(result + 64);
    v28 = *v26;
    v29 = v26[1];
    *(float *)&v30 = (float)*(unsigned int *)(v25 + 136);
    v31 = *(float *)&v30 / (float)*(unsigned int *)(v25 + 128);
    LOWORD(v30) = *(_WORD *)(v25 + 144);
    v32 = (float)v30;
    LOWORD(a5) = *(_WORD *)(v25 + 146);
    v33 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v25 + 148);
    v34 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v25 + 150);
    v35 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v25 + 152);
    v36 = (float)LODWORD(a8);
    v37 = *(float *)(v25 + 36);
    v38 = *(float *)(v25 + 40);
    v39 = *(float *)(v25 + 44);
    v40 = *(float *)(v25 + 48) * 0.25;
    v41 = *(float *)(v25 + 52) * 0.25;
    v42 = *(float *)(v25 + 56) * 0.25;
    v43 = *(float *)(v25 + 60) * 0.25;
    v44 = *(float *)(v25 + 64) * 0.25;
    v45 = *(float *)(v25 + 68);
    v46 = v45 * 0.25;
    v47 = *(_QWORD *)(result + 112);
    v48 = *(uint64_t **)(result + 128);
    v49 = *(_QWORD *)(result + 120) + 2 * (*(_QWORD *)(result + 104) * a2 / v18);
    v50 = **(_QWORD **)(result + 56) + v27 * v23 + 8 * *(_QWORD *)(result + 36);
    v51 = *v48;
    v52 = v48[1];
    v53 = (char *)(v51 + v49 * v28 + 2 * v47);
    v54 = *(unsigned __int8 *)(v25 + 132);
    if (v54 >= 0x11)
      v55 = 0;
    else
      v55 = 16 - v54;
    v56 = *(unsigned __int8 *)(v25 + 156);
    if (v49 >= 0)
      v57 = v49;
    else
      v57 = v49 + 1;
    v58 = v52 + (v57 >> 1) * v29;
    v59 = *(unsigned __int8 *)(v25 + 155);
    result = *(unsigned __int8 *)(v25 + 154);
    v60 = v58 + 2 * v47;
    v61 = v55;
    do
    {
      v62 = &v53[v28];
      v63 = v50 + v27;
      if (v22)
      {
        v64 = 0;
        v65 = v50 + v27;
        v66 = &v53[v28];
        do
        {
          LOWORD(v45) = *(_WORD *)(v50 + 2 * result);
          v67 = v31 * (float)LODWORD(v45);
          LOWORD(v11) = *(_WORD *)(v50 + 2 * v59);
          v68 = v31 * (float)LODWORD(v11);
          LOWORD(v12) = *(_WORD *)(v50 + 2 * v56);
          v69 = v31 * (float)LODWORD(v12);
          LOWORD(v13) = *(_WORD *)(v50 + 8 + 2 * result);
          v70 = v31 * (float)LODWORD(v13);
          LOWORD(v14) = *(_WORD *)(v50 + 8 + 2 * v59);
          LOWORD(v15) = *(_WORD *)(v50 + 8 + 2 * v56);
          v71 = v31 * (float)LODWORD(v14);
          v72 = v31 * (float)LODWORD(v15);
          LOWORD(v15) = *(_WORD *)(v65 + 2 * result);
          v15 = v31 * (float)LODWORD(v15);
          LOWORD(v16) = *(_WORD *)(v65 + 2 * v59);
          LOWORD(v8) = *(_WORD *)(v65 + 2 * v56);
          v73 = v31 * (float)LODWORD(v16);
          v16 = v31 * (float)LODWORD(v8);
          LOWORD(v8) = *(_WORD *)(v65 + 8 + 2 * result);
          v8 = v31 * (float)LODWORD(v8);
          LOWORD(v9) = *(_WORD *)(v65 + 8 + 2 * v59);
          v9 = v31 * (float)LODWORD(v9);
          LOWORD(v10) = *(_WORD *)(v65 + 8 + 2 * v56);
          v10 = v31 * (float)LODWORD(v10);
          v74 = (float)((float)((float)(v38 * v68) + (float)(v37 * v67)) + (float)(v39 * v69)) + v32;
          v75 = (float)((float)((float)(v38 * v71) + (float)(v37 * v70)) + (float)(v39 * v72)) + v32;
          v76 = (float)((float)((float)(v38 * v73) + (float)(v37 * v15)) + (float)(v39 * v16)) + v32;
          v77 = (float)((float)((float)(v38 * v9) + (float)(v37 * v8)) + (float)(v39 * v10)) + v32;
          if (v74 < v32)
            v78 = v32;
          else
            v78 = (float)((float)((float)(v38 * v68) + (float)(v37 * v67)) + (float)(v39 * v69)) + v32;
          if (v74 <= v34)
            v79 = v78;
          else
            v79 = v34;
          *(_WORD *)v53 = llroundf(v79) << v61;
          if (v75 < v32)
            v80 = v32;
          else
            v80 = (float)((float)((float)(v38 * v71) + (float)(v37 * v70)) + (float)(v39 * v72)) + v32;
          if (v75 > v34)
            v80 = v34;
          *((_WORD *)v53 + 1) = llroundf(v80) << v61;
          if (v76 < v32)
            v81 = v32;
          else
            v81 = (float)((float)((float)(v38 * v73) + (float)(v37 * v15)) + (float)(v39 * v16)) + v32;
          if (v76 > v34)
            v81 = v34;
          *(_WORD *)v66 = llroundf(v81) << v61;
          if (v77 < v32)
            v82 = v32;
          else
            v82 = (float)((float)((float)(v38 * v9) + (float)(v37 * v8)) + (float)(v39 * v10)) + v32;
          if (v77 > v34)
            v82 = v34;
          *((_WORD *)v66 + 1) = llroundf(v82) << v61;
          v83 = (float)((float)(v67 + v70) + v15) + v8;
          v84 = (float)((float)(v68 + v71) + v73) + v9;
          v12 = (float)((float)(v69 + v72) + v16) + v10;
          v14 = (float)((float)(v33 + (float)(v83 * v40)) + (float)(v84 * v41)) + (float)(v12 * v42);
          v13 = v36;
          if (v14 <= v36)
          {
            v13 = (float)((float)(v33 + (float)(v83 * v40)) + (float)(v84 * v41)) + (float)(v12 * v42);
            if (v14 < v35)
              v13 = v35;
          }
          v85 = (_WORD *)(v60 + 2 * v64);
          v11 = (float)((float)(v33 + (float)(v83 * v43)) + (float)(v84 * v44)) + (float)(v12 * v46);
          *v85 = llroundf(v13) << v61;
          v45 = v36;
          if (v11 <= v36)
          {
            v45 = v11;
            if (v11 < v35)
              v45 = v35;
          }
          v50 += 16;
          v65 += 16;
          v53 += 4;
          v66 += 4;
          v85[1] = llroundf(v45) << v61;
          v64 += 2;
        }
        while (v22 > v64);
      }
      v50 = v63 + v27;
      v53 = &v62[v28];
      v60 += v29;
      v21 += 2;
    }
    while (v24 > v21);
  }
  return result;
}

uint64_t vt_Copy_l64r_TRC_Tone_Mat_TRC_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v20 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v18 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_TRC_Tone_Mat_TRC_422vf_GCD);
  return 0;
}

unint64_t vt_Copy_l64r_TRC_Tone_Mat_TRC_422vf_GCD(unint64_t result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float v45;
  float v46;
  float v47;
  float v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  unint64_t v63;
  _BYTE *v64;
  _BYTE *v65;
  uint64_t v66;
  float v77;
  float v78;
  float v79;
  unsigned int v80;
  float v81;
  float v83;
  float v89;
  float v90;
  char v91;
  char v92;
  float v95;
  float v96;
  float v97;
  float v102;
  float v104;
  float v107;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;

  v8 = *(_QWORD *)(result + 28);
  v9 = *(unsigned __int8 *)result;
  v10 = v8 * a2 / v9;
  v11 = (v8 + v8 * a2) / v9;
  if (v11 != v10)
  {
    v12 = 0;
    v13 = *(_QWORD *)(result + 20);
    v14 = v10 + *(_QWORD *)(result + 44);
    v15 = v11 - v10;
    v16 = *(_QWORD *)(result + 152);
    v17 = *(uint64_t **)(result + 136);
    v18 = *(_QWORD **)(result + 56);
    v19 = **(_QWORD **)(result + 64);
    v20 = *v17;
    v21 = v17[1];
    v22 = v17[2];
    v23 = 8191.0 / (float)*(unsigned int *)(v16 + 128);
    LOWORD(a5) = *(_WORD *)(v16 + 144);
    v24 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v16 + 146);
    v25 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v16 + 148);
    v26 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v16 + 150);
    v133 = (float)LODWORD(a8);
    LOWORD(a8) = *(_WORD *)(v16 + 152);
    v27 = (float)LODWORD(a8);
    v28 = *(float *)(v16 + 40);
    v132 = *(float *)(v16 + 36);
    v29 = *(float *)(v16 + 44);
    v30 = 0.5;
    v131 = *(float *)(v16 + 48) * 0.5;
    v130 = *(float *)(v16 + 52) * 0.5;
    v129 = *(float *)(v16 + 56) * 0.5;
    v31 = *(float *)(v16 + 64);
    v128 = *(float *)(v16 + 60) * 0.5;
    v127 = v31 * 0.5;
    v32 = *(float *)(v16 + 68);
    v33 = *(float *)(v16 + 72);
    v126 = v32 * 0.5;
    v34 = *(float *)(v16 + 76);
    v35 = *(float *)(v16 + 80);
    v36 = *(float *)(v16 + 84);
    v37 = *(float *)(v16 + 88);
    v38 = *(float *)(v16 + 92);
    v39 = *(float *)(v16 + 96);
    v41 = *(float *)(v16 + 100);
    v40 = *(float *)(v16 + 104);
    v42 = v16 + 164;
    v43 = v16 + 16548;
    v44 = v16 + 32932;
    v45 = *(float *)(v16 + 108);
    v46 = *(float *)(v16 + 112);
    v47 = *(float *)(v16 + 116);
    v48 = *(float *)(v16 + 120);
    v49 = *(uint64_t **)(result + 128);
    v50 = *(_QWORD *)(result + 112);
    v51 = *(_QWORD *)(result + 104) * a2 / v9 + *(_QWORD *)(result + 120);
    v52 = *(_QWORD *)(result + 36);
    result = *(unsigned __int8 *)(v16 + 157);
    v53 = *(unsigned __int8 *)(v16 + 156);
    v54 = *(unsigned __int8 *)(v16 + 155);
    v55 = *(unsigned __int8 *)(v16 + 154);
    v56 = v49[2];
    if (v56)
      v57 = (_BYTE *)(v56 + v51 * v22 + v50);
    else
      v57 = 0;
    v59 = *v49;
    v58 = v49[1];
    v60 = v58 + v51 * v21 + v50;
    if (!v58)
      v60 = 0;
    v61 = (_BYTE *)(v59 + v51 * v20 + v50);
    v62 = *v18 + v19 * v14 + 8 * v52;
    do
    {
      if (v13)
      {
        v63 = 0;
        v64 = v57;
        v65 = v61;
        v66 = v62;
        do
        {
          LOWORD(v32) = *(_WORD *)(v66 + 2 * v55);
          LOWORD(v30) = *(_WORD *)(v66 + 2 * v54);
          LOWORD(v31) = *(_WORD *)(v66 + 2 * v53);
          _H5 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v23 * (float)LODWORD(v32), 0.0), 8191.0)));
          __asm { FCVT            S14, H5 }
          _H5 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v23 * (float)LODWORD(v30), 0.0), 8191.0)));
          __asm { FCVT            S15, H5 }
          _H5 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v23 * (float)LODWORD(v31), 0.0), 8191.0)));
          __asm { FCVT            S18, H5 }
          v77 = (float)((float)(v46 * _S15) + (float)(v45 * _S14)) + (float)(v47 * _S18);
          v78 = v77 + (float)(v48 * fmaxf(_S14, fmaxf(_S15, _S18)));
          v79 = 8191.0;
          if (v78 <= 8191.0)
          {
            v79 = v78;
            if (v78 < 0.0)
              v79 = 0.0;
          }
          LOWORD(v77) = *(_WORD *)(v66 + 8 + 2 * v55);
          LOWORD(v78) = *(_WORD *)(v66 + 8 + 2 * v54);
          *(float *)&v80 = (float)LODWORD(v78);
          v81 = v23 * *(float *)&v80;
          LOWORD(v80) = *(_WORD *)(v66 + 8 + 2 * v53);
          _H5 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v23 * (float)LODWORD(v77), 0.0), 8191.0)));
          v83 = v23 * (float)v80;
          __asm { FCVT            S20, H5 }
          _H5 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          __asm { FCVT            S21, H5 }
          _H5 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          __asm { FCVT            S22, H5 }
          v89 = (float)((float)((float)(v46 * _S21) + (float)(v45 * _S20)) + (float)(v47 * _S22))
              + (float)(v48 * fmaxf(_S20, fmaxf(_S21, _S22)));
          v90 = 8191.0;
          if (v89 <= 8191.0)
          {
            v90 = v89;
            if (v89 < 0.0)
              v90 = 0.0;
          }
          if (v64)
          {
            v91 = llroundf((float)*(unsigned __int16 *)(v66 + 2 * result) * 0.0038911);
            v92 = llroundf((float)*(unsigned __int16 *)(v66 + 8 + 2 * result) * 0.0038911);
          }
          else
          {
            v91 = 0;
            v92 = 0;
          }
          _H3 = *(_WORD *)(v43 + 2 * llroundf(v79));
          __asm { FCVT            S3, H3 }
          v95 = _S14 * _S3;
          v96 = _S15 * _S3;
          v97 = _S18 * _S3;
          _H5 = *(_WORD *)(v43 + 2 * llroundf(v90));
          __asm { FCVT            S5, H5 }
          _S18 = _S20 * _S5;
          _S20 = _S21 * _S5;
          v102 = _S22 * _S5;
          _S21 = (float)((float)(v34 * v96) + (float)(v95 * v33)) + (float)(v97 * v35);
          v104 = (float)((float)(v37 * v96) + (float)(v95 * v36)) + (float)(v97 * v38);
          _S3 = (float)((float)(v41 * v96) + (float)(v95 * v39)) + (float)(v97 * v40);
          _S19 = (float)((float)(v34 * _S20) + (float)(_S18 * v33)) + (float)(v102 * v35);
          v107 = (float)((float)(v37 * _S20) + (float)(_S18 * v36)) + (float)(v102 * v38);
          _S5 = (float)((float)(v41 * _S20) + (float)(_S18 * v39)) + (float)(v102 * v40);
          LOWORD(_S18) = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(_S21, 0.0), 8191.0)));
          LOWORD(_S20) = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v104, 0.0), 8191.0)));
          __asm
          {
            FCVT            S18, H18
            FCVT            S20, H20
          }
          LOWORD(_S3) = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          LOWORD(_S19) = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          LOWORD(_S21) = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v107, 0.0), 8191.0)));
          __asm { FCVT            S21, H21 }
          LOWORD(_S5) = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          v115 = (float)((float)((float)(v28 * _S20) + (float)(v132 * _S18)) + (float)(v29 * _S3)) + v24;
          v116 = (float)((float)((float)(v28 * _S21) + (float)(v132 * _S19)) + (float)(v29 * _S5)) + v24;
          if (v115 < v24)
            v117 = v24;
          else
            v117 = (float)((float)((float)(v28 * _S20) + (float)(v132 * _S18)) + (float)(v29 * _S3)) + v24;
          if (v115 <= v26)
            v118 = v117;
          else
            v118 = v26;
          *v65 = llroundf(v118);
          if (v116 < v24)
            v119 = v24;
          else
            v119 = (float)((float)((float)(v28 * _S21) + (float)(v132 * _S19)) + (float)(v29 * _S5)) + v24;
          if (v116 > v26)
            v119 = v26;
          v65[1] = llroundf(v119);
          v120 = _S18 + _S19;
          v121 = _S20 + _S21;
          v122 = (float)(v25 + (float)(v120 * v131)) + (float)((float)(_S20 + _S21) * v130);
          v123 = _S3 + _S5;
          v124 = v122 + (float)((float)(_S3 + _S5) * v129);
          v125 = v27;
          if (v124 <= v27)
          {
            v125 = v124;
            if (v124 < v133)
              v125 = v133;
          }
          HIWORD(v32) = HIWORD(v126);
          v30 = (float)((float)(v25 + (float)(v120 * v128)) + (float)(v121 * v127)) + (float)(v123 * v126);
          *(_BYTE *)(v60 + v63) = llroundf(v125);
          v31 = v27;
          if (v30 <= v27)
          {
            v31 = v30;
            if (v30 < v133)
              v31 = v133;
          }
          *(_BYTE *)(v60 + v63 + 1) = llroundf(v31);
          if (v64)
          {
            *v64 = v91;
            v64[1] = v92;
            v64 += 2;
          }
          v66 += 16;
          v63 += 2;
          v65 += 2;
        }
        while (v13 > v63);
      }
      v62 += v19;
      v61 += v20;
      v60 += v21;
      v57 += v22;
      ++v12;
    }
    while (v12 != v15);
  }
  return result;
}

uint64_t vt_Copy_l64r_TRC_Mat_TRC_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v20 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v18 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_TRC_Mat_TRC_422vf_GCD);
  return 0;
}

unint64_t vt_Copy_l64r_TRC_Mat_TRC_422vf_GCD(unint64_t result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  _BYTE *v70;
  uint64_t v71;
  float v72;
  char v73;
  char v74;
  float v96;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;

  v15 = *(_QWORD *)(result + 28);
  v16 = *(unsigned __int8 *)result;
  v17 = v15 * a2 / v16;
  v18 = (v15 + v15 * a2) / v16;
  if (v18 != v17)
  {
    v19 = 0;
    v20 = *(_QWORD *)(result + 20);
    v21 = v17 + *(_QWORD *)(result + 44);
    v22 = v18 - v17;
    v23 = *(_QWORD *)(result + 152);
    v24 = *(uint64_t **)(result + 136);
    v25 = *(_QWORD **)(result + 56);
    v26 = **(_QWORD **)(result + 64);
    v27 = *v24;
    v28 = v24[1];
    v29 = v24[2];
    v30 = 8191.0 / (float)*(unsigned int *)(v23 + 128);
    LOWORD(a5) = *(_WORD *)(v23 + 144);
    v31 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v23 + 146);
    v32 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v23 + 148);
    v33 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v23 + 150);
    v34 = (float)LODWORD(a8);
    LOWORD(a9) = *(_WORD *)(v23 + 152);
    v35 = (float)LODWORD(a9);
    v36 = *(float *)(v23 + 36);
    v37 = *(float *)(v23 + 40);
    v38 = *(float *)(v23 + 44);
    v109 = *(float *)(v23 + 52) * 0.5;
    v110 = *(float *)(v23 + 48) * 0.5;
    v108 = *(float *)(v23 + 56) * 0.5;
    v39 = *(float *)(v23 + 60) * 0.5;
    v40 = *(float *)(v23 + 64) * 0.5;
    v41 = *(float *)(v23 + 72);
    v42 = *(float *)(v23 + 68) * 0.5;
    v43 = *(float *)(v23 + 76);
    v44 = *(float *)(v23 + 80);
    v45 = *(float *)(v23 + 84);
    v46 = *(float *)(v23 + 88);
    v47 = *(float *)(v23 + 92);
    v48 = *(float *)(v23 + 96);
    v50 = *(float *)(v23 + 100);
    v49 = *(float *)(v23 + 104);
    v51 = v23 + 164;
    v52 = v23 + 16548;
    v53 = *(uint64_t **)(result + 128);
    v54 = *(_QWORD *)(result + 112);
    v55 = *(_QWORD *)(result + 104) * a2 / v16 + *(_QWORD *)(result + 120);
    v56 = *(_QWORD *)(result + 36);
    v57 = *(unsigned __int8 *)(v23 + 157);
    result = *(unsigned __int8 *)(v23 + 156);
    v58 = *(unsigned __int8 *)(v23 + 155);
    v59 = *(unsigned __int8 *)(v23 + 154);
    v60 = v53[2];
    if (v60)
      v61 = (_BYTE *)(v60 + v55 * v29 + v54);
    else
      v61 = 0;
    v63 = *v53;
    v62 = v53[1];
    v64 = v62 + v55 * v28 + v54;
    if (!v62)
      v64 = 0;
    v65 = (_BYTE *)(v63 + v55 * v27 + v54);
    v66 = *v25 + v26 * v21 + 8 * v56;
    do
    {
      if (v20)
      {
        v67 = 0;
        v68 = v66;
        v69 = v61;
        v70 = v65;
        do
        {
          v71 = v68 + 8;
          if (v69)
          {
            LOWORD(v9) = *(_WORD *)(v68 + 2 * v57);
            HIWORD(v10) = 15231;
            v72 = (float)LODWORD(v9) * 0.0038911;
            v73 = llroundf(v72);
            LOWORD(v72) = *(_WORD *)(v71 + 2 * v57);
            v9 = (float)LODWORD(v72) * 0.0038911;
            v74 = llroundf(v9);
          }
          else
          {
            v73 = 0;
            v74 = 0;
          }
          LOWORD(v9) = *(_WORD *)(v68 + 2 * v59);
          LOWORD(v10) = *(_WORD *)(v68 + 2 * v58);
          LOWORD(v11) = *(_WORD *)(v68 + 2 * result);
          LOWORD(v12) = *(_WORD *)(v71 + 2 * v59);
          LOWORD(v13) = *(_WORD *)(v71 + 2 * v58);
          LOWORD(v14) = *(_WORD *)(v71 + 2 * result);
          _H10 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v30 * (float)LODWORD(v9), 0.0), 8191.0)));
          _H11 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v30 * (float)LODWORD(v10), 0.0), 8191.0)));
          __asm
          {
            FCVT            S10, H10
            FCVT            S11, H11
          }
          _H12 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v30 * (float)LODWORD(v11), 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          _H13 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v30 * (float)LODWORD(v12), 0.0), 8191.0)));
          __asm { FCVT            S13, H13 }
          _H14 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v30 * (float)LODWORD(v13), 0.0), 8191.0)));
          __asm { FCVT            S14, H14 }
          _H15 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v30 * (float)LODWORD(v14), 0.0), 8191.0)));
          __asm { FCVT            S15, H15 }
          _S18 = (float)((float)(v43 * _S11) + (float)(_S10 * v41)) + (float)(_S12 * v44);
          _S19 = (float)((float)(v46 * _S11) + (float)(_S10 * v45)) + (float)(_S12 * v47);
          _S10 = (float)((float)(v50 * _S11) + (float)(_S10 * v48)) + (float)(_S12 * v49);
          _S11 = (float)((float)(v43 * _S14) + (float)(_S13 * v41)) + (float)(_S15 * v44);
          _S12 = (float)((float)(v46 * _S14) + (float)(_S13 * v45)) + (float)(_S15 * v47);
          v96 = (float)((float)(v50 * _S14) + (float)(_S13 * v48)) + (float)(_S15 * v49);
          LOWORD(_S18) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S18, 0.0), 8191.0)));
          LOWORD(_S19) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0)));
          __asm
          {
            FCVT            S18, H18
            FCVT            S19, H19
          }
          LOWORD(_S10) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S10, 0.0), 8191.0)));
          __asm { FCVT            S14, H10 }
          LOWORD(_S10) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S11, 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          LOWORD(_S11) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S12, 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          LOWORD(_S12) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v96, 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          v103 = (float)((float)((float)(v37 * _S19) + (float)(v36 * _S18)) + (float)(v38 * _S14)) + v31;
          v14 = (float)((float)((float)(v37 * _S11) + (float)(v36 * _S10)) + (float)(v38 * _S12)) + v31;
          if (v103 < v31)
            v104 = v31;
          else
            v104 = (float)((float)((float)(v37 * _S19) + (float)(v36 * _S18)) + (float)(v38 * _S14)) + v31;
          if (v103 > v33)
            v104 = v33;
          *v70 = llroundf(v104);
          if (v14 < v31)
            v105 = v31;
          else
            v105 = (float)((float)((float)(v37 * _S11) + (float)(v36 * _S10)) + (float)(v38 * _S12)) + v31;
          if (v14 > v33)
            v105 = v33;
          v70[1] = llroundf(v105);
          v106 = _S18 + _S10;
          v107 = _S19 + _S11;
          v11 = _S14 + _S12;
          v13 = (float)((float)(v32 + (float)(v106 * v110)) + (float)(v107 * v109)) + (float)(v11 * v108);
          v12 = v35;
          if (v13 <= v35)
          {
            v12 = (float)((float)(v32 + (float)(v106 * v110)) + (float)(v107 * v109)) + (float)(v11 * v108);
            if (v13 < v34)
              v12 = v34;
          }
          v9 = (float)((float)(v32 + (float)(v106 * v39)) + (float)(v107 * v40)) + (float)(v11 * v42);
          *(_BYTE *)(v64 + v67) = llroundf(v12);
          v10 = v35;
          if (v9 <= v35)
          {
            v10 = v9;
            if (v9 < v34)
              v10 = v34;
          }
          *(_BYTE *)(v64 + v67 + 1) = llroundf(v10);
          if (v69)
          {
            *v69 = v73;
            v69[1] = v74;
            v69 += 2;
          }
          v68 += 16;
          v67 += 2;
          v70 += 2;
        }
        while (v20 > v67);
      }
      v66 += v26;
      v65 += v27;
      v64 += v28;
      v61 += v29;
      ++v19;
    }
    while (v19 != v22);
  }
  return result;
}

uint64_t vt_Copy_l64r_rgb_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v20 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v18 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_rgb_422vf_GCD);
  return 0;
}

unint64_t vt_Copy_l64r_rgb_422vf_GCD(unint64_t result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  BOOL v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  _BYTE *v64;
  uint64_t v65;
  float v66;
  char v67;
  char v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;

  v14 = *(_QWORD *)(result + 28);
  v15 = *(unsigned __int8 *)result;
  v16 = v14 * a2 / v15;
  v17 = (v14 + v14 * a2) / v15;
  if (v17 != v16)
  {
    v18 = 0;
    v19 = *(_QWORD *)(result + 20);
    v20 = v16 + *(_QWORD *)(result + 44);
    v21 = v17 - v16;
    v22 = *(_QWORD *)(result + 152);
    v23 = *(uint64_t **)(result + 136);
    v24 = *(_QWORD **)(result + 56);
    v25 = **(_QWORD **)(result + 64);
    v26 = *v23;
    v27 = v23[1];
    v28 = v23[2];
    *(float *)&v29 = (float)*(unsigned int *)(v22 + 136);
    v30 = *(float *)&v29 / (float)*(unsigned int *)(v22 + 128);
    LOWORD(v29) = *(_WORD *)(v22 + 144);
    v31 = (float)v29;
    LOWORD(a5) = *(_WORD *)(v22 + 146);
    v32 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v22 + 148);
    v33 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v22 + 150);
    v34 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v22 + 152);
    v35 = (float)LODWORD(a8);
    v36 = *(float *)(v22 + 36);
    v37 = *(float *)(v22 + 40);
    v38 = *(float *)(v22 + 44);
    v39 = *(float *)(v22 + 48) * 0.5;
    v40 = *(float *)(v22 + 52) * 0.5;
    v41 = *(float *)(v22 + 56) * 0.5;
    v42 = *(float *)(v22 + 60) * 0.5;
    v43 = *(float *)(v22 + 64) * 0.5;
    v44 = *(float *)(v22 + 68) * 0.5;
    v45 = *(_QWORD **)(result + 128);
    v46 = *(_QWORD *)(result + 112);
    v47 = *(_QWORD *)(result + 104) * a2 / v15 + *(_QWORD *)(result + 120);
    v48 = *(_QWORD *)(result + 36);
    v49 = *(unsigned __int8 *)(v22 + 157);
    v50 = *(unsigned __int8 *)(v22 + 156);
    v51 = *(unsigned __int8 *)(v22 + 155);
    result = *(unsigned __int8 *)(v22 + 154);
    v52 = v45[2];
    if (v52)
      v53 = (_BYTE *)(v52 + v47 * v28 + v46);
    else
      v53 = 0;
    v56 = v45;
    v55 = *v45;
    v54 = v56[1];
    v57 = v54 == 0;
    v58 = v54 + v47 * v27 + v46;
    if (v57)
      v58 = 0;
    v59 = (_BYTE *)(v55 + v47 * v26 + v46);
    v60 = *v24 + v25 * v20 + 8 * v48;
    do
    {
      if (v19)
      {
        v61 = 0;
        v62 = v60;
        v63 = v53;
        v64 = v59;
        do
        {
          v65 = v62 + 8;
          if (v63)
          {
            LOWORD(v8) = *(_WORD *)(v62 + 2 * v49);
            v66 = (float)LODWORD(v8) * 0.0038911;
            v67 = llroundf(v66);
            LOWORD(v66) = *(_WORD *)(v65 + 2 * v49);
            v8 = (float)LODWORD(v66) * 0.0038911;
            v68 = llroundf(v8);
          }
          else
          {
            v67 = 0;
            v68 = 0;
          }
          LOWORD(v8) = *(_WORD *)(v62 + 2 * result);
          v69 = v30 * (float)LODWORD(v8);
          LOWORD(v9) = *(_WORD *)(v62 + 2 * v51);
          v70 = v30 * (float)LODWORD(v9);
          LOWORD(v10) = *(_WORD *)(v62 + 2 * v50);
          v71 = v30 * (float)LODWORD(v10);
          LOWORD(v11) = *(_WORD *)(v65 + 2 * result);
          v72 = v30 * (float)LODWORD(v11);
          LOWORD(v12) = *(_WORD *)(v65 + 2 * v51);
          v73 = v30 * (float)LODWORD(v12);
          LOWORD(v13) = *(_WORD *)(v65 + 2 * v50);
          v13 = v30 * (float)LODWORD(v13);
          v74 = (float)((float)((float)(v37 * v70) + (float)(v36 * v69)) + (float)(v38 * v71)) + v31;
          v75 = (float)((float)((float)(v37 * v73) + (float)(v36 * v72)) + (float)(v38 * v13)) + v31;
          if (v74 < v31)
            v76 = v31;
          else
            v76 = (float)((float)((float)(v37 * v70) + (float)(v36 * v69)) + (float)(v38 * v71)) + v31;
          if (v74 <= v33)
            v77 = v76;
          else
            v77 = v33;
          *v64 = llroundf(v77);
          if (v75 < v31)
            v78 = v31;
          else
            v78 = (float)((float)((float)(v37 * v73) + (float)(v36 * v72)) + (float)(v38 * v13)) + v31;
          if (v75 > v33)
            v78 = v33;
          v64[1] = llroundf(v78);
          v79 = v69 + v72;
          v80 = v70 + v73;
          v10 = v71 + v13;
          v12 = (float)((float)(v32 + (float)(v79 * v39)) + (float)(v80 * v40)) + (float)(v10 * v41);
          v11 = v35;
          if (v12 <= v35)
          {
            v11 = (float)((float)(v32 + (float)(v79 * v39)) + (float)(v80 * v40)) + (float)(v10 * v41);
            if (v12 < v34)
              v11 = v34;
          }
          v8 = (float)((float)(v32 + (float)(v79 * v42)) + (float)(v80 * v43)) + (float)(v10 * v44);
          *(_BYTE *)(v58 + v61) = llroundf(v11);
          v9 = v35;
          if (v8 <= v35)
          {
            v9 = v8;
            if (v8 < v34)
              v9 = v34;
          }
          *(_BYTE *)(v58 + v61 + 1) = llroundf(v9);
          if (v63)
          {
            *v63 = v67;
            v63[1] = v68;
            v63 += 2;
          }
          v62 += 16;
          v61 += 2;
          v64 += 2;
        }
        while (v19 > v61);
      }
      v60 += v25;
      v59 += v26;
      v58 += v27;
      v53 += v28;
      ++v18;
    }
    while (v18 != v21);
  }
  return result;
}

uint64_t vt_Copy_l64r_TRC_Tone_Mat_TRC_2vuyf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_TRC_Tone_Mat_TRC_2vuyf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_l64r_TRC_Tone_Mat_TRC_2vuyf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, double a6, float a7, float a8, float a9, float a10)
{
  float v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  uint64_t v51;
  uint64_t v52;
  float v53;
  float v54;
  float v55;
  float v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _BYTE *v62;
  _BYTE *v63;
  uint64_t v64;
  float v75;
  float v76;
  unsigned int v77;
  float v78;
  float v80;
  float v86;
  float v87;
  char v88;
  char v89;
  float v92;
  float v93;
  float v94;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v105;
  float v106;
  float v107;
  unsigned int v109;
  unsigned int v113;
  float v114;
  float v116;
  float v117;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  char v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;

  v11 = *(_QWORD *)(result + 28);
  v12 = *result;
  v13 = v11 * a2 / v12;
  v14 = *((_QWORD *)result + 14);
  v15 = (_QWORD *)*((_QWORD *)result + 16);
  v16 = *((_QWORD *)result + 13) * a2 / v12 + *((_QWORD *)result + 15);
  v17 = (uint64_t *)*((_QWORD *)result + 17);
  v18 = (v11 + v11 * a2) / v12;
  v19 = (_BYTE *)v15[1];
  if (v19)
    v19 += v17[1] * v16 + v14;
  if (v18 != v13)
  {
    v20 = 0;
    v21 = *(_QWORD *)(result + 44);
    v22 = v13 + v21;
    v23 = **((_QWORD **)result + 8);
    v24 = *v17;
    v25 = *((_QWORD *)result + 19);
    v26 = *v15 + v24 * v16;
    v27 = *(_QWORD *)(result + 20);
    v28 = v18 + v21;
    v29 = **((_QWORD **)result + 7) + v23 * v22 + 8 * *(_QWORD *)(result + 36);
    v30 = (_BYTE *)(v26 + v14);
    v31 = v28 - v22;
    LOWORD(a5) = *(_WORD *)(v25 + 144);
    LOWORD(a7) = *(_WORD *)(v25 + 146);
    LOWORD(a8) = *(_WORD *)(v25 + 148);
    LOWORD(a9) = *(_WORD *)(v25 + 150);
    LOWORD(a10) = *(_WORD *)(v25 + 152);
    v32 = 8191.0 / (float)*(unsigned int *)(v25 + 128);
    v33 = (float)LODWORD(a5);
    v135 = (float)LODWORD(a7);
    v34 = (float)LODWORD(a8);
    v35 = (float)LODWORD(a9);
    v36 = (float)LODWORD(a10);
    v37 = *(float *)(v25 + 36);
    v38 = *(float *)(v25 + 40);
    v39 = *(float *)(v25 + 44);
    v40 = 0.5;
    v133 = *(float *)(v25 + 52) * 0.5;
    v134 = *(float *)(v25 + 48) * 0.5;
    _S19 = *(float *)(v25 + 64);
    v131 = *(float *)(v25 + 60) * 0.5;
    v132 = *(float *)(v25 + 56) * 0.5;
    v130 = _S19 * 0.5;
    v42 = *(float *)(v25 + 68) * 0.5;
    v128 = v42;
    v129 = *(float *)(v25 + 72);
    v43 = *(float *)(v25 + 76);
    v44 = *(float *)(v25 + 80);
    v45 = *(float *)(v25 + 84);
    v46 = *(float *)(v25 + 88);
    v47 = *(float *)(v25 + 92);
    v48 = *(float *)(v25 + 96);
    v50 = *(float *)(v25 + 100);
    v49 = *(float *)(v25 + 104);
    v51 = v25 + 164;
    v52 = v25 + 16548;
    result = (unsigned __int8 *)(v25 + 32932);
    v53 = *(float *)(v25 + 108);
    v54 = *(float *)(v25 + 112);
    v55 = *(float *)(v25 + 116);
    v56 = *(float *)(v25 + 120);
    v57 = *(unsigned __int8 *)(v25 + 157);
    v58 = *(unsigned __int8 *)(v25 + 156);
    v59 = *(unsigned __int8 *)(v25 + 155);
    v60 = *(unsigned __int8 *)(v25 + 154);
    do
    {
      if (v27)
      {
        v61 = 0;
        v62 = v19;
        v63 = v30;
        v64 = v29;
        do
        {
          LOWORD(v42) = *(_WORD *)(v64 + 2 * v60);
          LOWORD(v40) = *(_WORD *)(v64 + 2 * v59);
          LOWORD(_S19) = *(_WORD *)(v64 + 2 * v58);
          _H0 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v32 * (float)LODWORD(v42), 0.0), 8191.0)));
          __asm { FCVT            S14, H0 }
          _H0 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v32 * (float)LODWORD(v40), 0.0), 8191.0)));
          __asm { FCVT            S18, H0 }
          _H0 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v32 * (float)LODWORD(_S19), 0.0), 8191.0)));
          __asm { FCVT            S15, H0 }
          v75 = (float)((float)((float)(v54 * _S18) + (float)(v53 * _S14)) + (float)(v55 * _S15))
              + (float)(v56 * fmaxf(_S14, fmaxf(_S18, _S15)));
          v76 = 8191.0;
          if (v75 <= 8191.0)
          {
            v76 = v75;
            if (v75 < 0.0)
              v76 = 0.0;
          }
          LOWORD(v75) = *(_WORD *)(v64 + 8 + 2 * v60);
          LOWORD(v10) = *(_WORD *)(v64 + 8 + 2 * v59);
          *(float *)&v77 = (float)LODWORD(v10);
          v78 = v32 * *(float *)&v77;
          LOWORD(v77) = *(_WORD *)(v64 + 8 + 2 * v58);
          _H0 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v32 * (float)LODWORD(v75), 0.0), 8191.0)));
          v80 = v32 * (float)v77;
          __asm { FCVT            S20, H0 }
          _H0 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          __asm { FCVT            S21, H0 }
          _H0 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S22, H0 }
          v86 = (float)((float)((float)(v54 * _S21) + (float)(v53 * _S20)) + (float)(v55 * _S22))
              + (float)(v56 * fmaxf(_S20, fmaxf(_S21, _S22)));
          v87 = 8191.0;
          if (v86 <= 8191.0)
          {
            v87 = v86;
            if (v86 < 0.0)
              v87 = 0.0;
          }
          if (v62)
          {
            v88 = llroundf((float)*(unsigned __int16 *)(v64 + 2 * v57) * 0.0038911);
            v89 = llroundf((float)*(unsigned __int16 *)(v64 + 8 + 2 * v57) * 0.0038911);
          }
          else
          {
            v88 = 0;
            v89 = 0;
          }
          _H0 = *(_WORD *)(v52 + 2 * llroundf(v76));
          __asm { FCVT            S0, H0 }
          v92 = _S14 * _S0;
          v93 = _S18 * _S0;
          v94 = _S15 * _S0;
          _H19 = *(_WORD *)(v52 + 2 * llroundf(v87));
          __asm { FCVT            S19, H19 }
          v97 = _S20 * _S19;
          v98 = _S21 * _S19;
          v99 = _S22 * _S19;
          v100 = (float)((float)(v43 * v93) + (float)(v92 * v129)) + (float)(v94 * v44);
          v101 = (float)((float)(v46 * v93) + (float)(v92 * v45)) + (float)(v94 * v47);
          v102 = (float)((float)(v50 * v93) + (float)(v92 * v48)) + (float)(v94 * v49);
          _S7 = (float)(v43 * v98) + (float)(v97 * v129);
          _S18 = (float)(v46 * v98) + (float)(v97 * v45);
          v105 = (float)(v50 * v98) + (float)(v97 * v48);
          v106 = _S18 + (float)(v99 * v47);
          LOWORD(_S18) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v100, 0.0), 8191.0))];
          v107 = v105 + (float)(v99 * v49);
          __asm { FCVT            S22, H18 }
          LOWORD(_S18) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v101, 0.0), 8191.0))];
          v109 = llroundf(fminf(fmaxf(v102, 0.0), 8191.0));
          __asm { FCVT            S0, H18 }
          LOWORD(_S18) = *(_WORD *)&result[2 * v109];
          __asm { FCVT            S24, H18 }
          LOWORD(_S7) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(_S7 + (float)(v99 * v44), 0.0), 8191.0))];
          __asm { FCVT            S18, H7 }
          LOWORD(_S7) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v106, 0.0), 8191.0))];
          __asm { FCVT            S19, H7 }
          v113 = llroundf(fminf(fmaxf(v107, 0.0), 8191.0));
          v114 = (float)(v38 * _S0) + (float)(v37 * _S22);
          _S0 = _S0 + _S19;
          v116 = (float)(v135 + (float)((float)(_S22 + _S18) * v134)) + (float)(_S0 * v133);
          v117 = (float)(v135 + (float)((float)(_S22 + _S18) * v131)) + (float)(_S0 * v130);
          LOWORD(_S0) = *(_WORD *)&result[2 * v113];
          __asm { FCVT            S0, H0 }
          v119 = v114 + (float)(v39 * _S24);
          v120 = v116 + (float)((float)(_S24 + _S0) * v132);
          v10 = v117 + (float)((float)(_S24 + _S0) * v128);
          if (v120 < v35)
            v121 = v35;
          else
            v121 = v120;
          v122 = v119 + v33;
          if (v120 <= v36)
            v123 = v121;
          else
            v123 = v36;
          v124 = llroundf(v123);
          if (v122 < v33)
            v125 = v33;
          else
            v125 = v122;
          *v63 = v124;
          if (v122 <= v34)
            v126 = v125;
          else
            v126 = v34;
          v63[1] = llroundf(v126);
          v127 = v36;
          if (v10 <= v36)
          {
            v127 = v10;
            if (v10 < v35)
              v127 = v35;
          }
          v42 = (float)((float)((float)(v38 * _S19) + (float)(v37 * _S18)) + (float)(v39 * _S0)) + v33;
          v63[2] = llroundf(v127);
          v40 = v34;
          if (v42 <= v34)
          {
            v40 = v42;
            if (v42 < v33)
              v40 = v33;
          }
          v63[3] = llroundf(v40);
          if (v62)
          {
            *v62 = v88;
            v62[1] = v89;
            v62 += 2;
          }
          v64 += 16;
          v61 += 2;
          v63 += 4;
        }
        while (v27 > v61);
      }
      v29 += v23;
      v30 += v24;
      ++v20;
    }
    while (v20 != v31);
  }
  return result;
}

uint64_t vt_Copy_l64r_TRC_Mat_TRC_2vuyf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_TRC_Mat_TRC_2vuyf_GCD);
  return 0;
}

unint64_t vt_Copy_l64r_TRC_Mat_TRC_2vuyf_GCD(unint64_t result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  float v9;
  float v10;
  float v12;
  float v13;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  _BYTE *v66;
  uint64_t v67;
  float v68;
  char v69;
  char v70;
  unsigned int v85;
  float v89;
  float v90;
  float v91;
  float v94;
  float v95;
  unsigned int v100;
  float v101;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  char v110;
  float v111;
  float v112;
  float v113;

  v15 = *(_QWORD *)(result + 28);
  v16 = *(unsigned __int8 *)result;
  v17 = v15 * a2 / v16;
  v18 = *(_QWORD *)(result + 112);
  v19 = *(_QWORD **)(result + 128);
  v20 = *(_QWORD *)(result + 104) * a2 / v16 + *(_QWORD *)(result + 120);
  v21 = *(uint64_t **)(result + 136);
  v22 = (v15 + v15 * a2) / v16;
  v23 = (_BYTE *)v19[1];
  if (v23)
    v23 += v21[1] * v20 + v18;
  if (v22 != v17)
  {
    v24 = 0;
    v25 = *(_QWORD *)(result + 44);
    v26 = v17 + v25;
    v27 = **(_QWORD **)(result + 64);
    v28 = *v21;
    v29 = *(_QWORD *)(result + 152);
    v30 = *v19 + v28 * v20;
    v31 = *(_QWORD *)(result + 20);
    v32 = v22 + v25;
    v33 = **(_QWORD **)(result + 56) + v27 * v26 + 8 * *(_QWORD *)(result + 36);
    v34 = (_BYTE *)(v30 + v18);
    v35 = v32 - v26;
    LOWORD(a5) = *(_WORD *)(v29 + 144);
    LOWORD(a6) = *(_WORD *)(v29 + 146);
    LOWORD(a7) = *(_WORD *)(v29 + 148);
    LOWORD(a8) = *(_WORD *)(v29 + 150);
    LOWORD(a9) = *(_WORD *)(v29 + 152);
    v36 = 8191.0 / (float)*(unsigned int *)(v29 + 128);
    v37 = (float)LODWORD(a5);
    v38 = (float)LODWORD(a6);
    v39 = (float)LODWORD(a7);
    v40 = (float)LODWORD(a8);
    v41 = (float)LODWORD(a9);
    v42 = *(float *)(v29 + 36);
    v43 = *(float *)(v29 + 40);
    v44 = *(float *)(v29 + 44);
    v112 = *(float *)(v29 + 52) * 0.5;
    v113 = *(float *)(v29 + 48) * 0.5;
    v45 = *(float *)(v29 + 56) * 0.5;
    v46 = *(float *)(v29 + 60) * 0.5;
    v47 = *(float *)(v29 + 64) * 0.5;
    v48 = *(float *)(v29 + 72);
    v49 = *(float *)(v29 + 68) * 0.5;
    v50 = *(float *)(v29 + 76);
    v51 = *(float *)(v29 + 80);
    v52 = *(float *)(v29 + 84);
    v53 = *(float *)(v29 + 88);
    v54 = *(float *)(v29 + 92);
    v55 = *(float *)(v29 + 96);
    v57 = *(float *)(v29 + 100);
    v56 = *(float *)(v29 + 104);
    v58 = v29 + 164;
    v59 = v29 + 16548;
    result = *(unsigned __int8 *)(v29 + 157);
    v60 = *(unsigned __int8 *)(v29 + 156);
    v61 = *(unsigned __int8 *)(v29 + 155);
    v62 = *(unsigned __int8 *)(v29 + 154);
    do
    {
      if (v31)
      {
        v63 = 0;
        v64 = v33;
        v65 = v23;
        v66 = v34;
        do
        {
          v67 = v64 + 8;
          if (v65)
          {
            LOWORD(v9) = *(_WORD *)(v64 + 2 * result);
            HIWORD(v10) = 15231;
            v68 = (float)LODWORD(v9) * 0.0038911;
            v69 = llroundf(v68);
            LOWORD(v68) = *(_WORD *)(v67 + 2 * result);
            v9 = (float)LODWORD(v68) * 0.0038911;
            v70 = llroundf(v9);
          }
          else
          {
            v69 = 0;
            v70 = 0;
          }
          LOWORD(v9) = *(_WORD *)(v64 + 2 * v62);
          LOWORD(v10) = *(_WORD *)(v64 + 2 * v61);
          LOWORD(_S12) = *(_WORD *)(v64 + 2 * v60);
          LOWORD(v12) = *(_WORD *)(v67 + 2 * v62);
          LOWORD(v13) = *(_WORD *)(v67 + 2 * v61);
          LOWORD(_S15) = *(_WORD *)(v67 + 2 * v60);
          _H10 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v36 * (float)LODWORD(v9), 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          _H11 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v36 * (float)LODWORD(v10), 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          _H12 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v36 * (float)LODWORD(_S12), 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          _H13 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v36 * (float)LODWORD(v12), 0.0), 8191.0)));
          __asm { FCVT            S13, H13 }
          _H14 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v36 * (float)LODWORD(v13), 0.0), 8191.0)));
          __asm { FCVT            S14, H14 }
          v85 = llroundf(fminf(fmaxf(v36 * (float)LODWORD(_S15), 0.0), 8191.0));
          _S15 = (float)((float)(v50 * _S11) + (float)(_S10 * v48)) + (float)(_S12 * v51);
          _S18 = (float)((float)(v53 * _S11) + (float)(_S10 * v52)) + (float)(_S12 * v54);
          _S10 = (float)((float)(v57 * _S11) + (float)(_S10 * v55)) + (float)(_S12 * v56);
          v89 = (float)(v50 * _S14) + (float)(_S13 * v48);
          v90 = (float)(v53 * _S14) + (float)(_S13 * v52);
          v91 = (float)(v57 * _S14) + (float)(_S13 * v55);
          LOWORD(_S14) = *(_WORD *)(v58 + 2 * v85);
          __asm { FCVT            S14, H14 }
          _S11 = v89 + (float)(_S14 * v51);
          v94 = v90 + (float)(_S14 * v54);
          LOWORD(_S15) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(_S15, 0.0), 8191.0)));
          v95 = v91 + (float)(_S14 * v56);
          __asm { FCVT            S14, H15 }
          LOWORD(_S18) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(_S18, 0.0), 8191.0)));
          __asm { FCVT            S18, H18 }
          LOWORD(_S10) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(_S10, 0.0), 8191.0)));
          __asm { FCVT            S15, H10 }
          LOWORD(_S10) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(_S11, 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          LOWORD(_S11) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          v100 = llroundf(fminf(fmaxf(v95, 0.0), 8191.0));
          v101 = (float)(v43 * _S18) + (float)(v42 * _S14);
          _S12 = _S14 + _S10;
          v103 = _S18 + _S11;
          v104 = (float)(v38 + (float)((float)(_S14 + _S10) * v113)) + (float)(v103 * v112);
          v105 = (float)(v38 + (float)(_S12 * v46)) + (float)(v103 * v47);
          LOWORD(_S12) = *(_WORD *)(v59 + 2 * v100);
          __asm { FCVT            S12, H12 }
          v106 = v101 + (float)(v44 * _S15);
          v107 = v104 + (float)((float)(_S15 + _S12) * v45);
          v12 = v105 + (float)((float)(_S15 + _S12) * v49);
          if (v107 < v40)
            v108 = v40;
          else
            v108 = v107;
          v109 = v106 + v37;
          if (v107 > v41)
            v108 = v41;
          v110 = llroundf(v108);
          if (v109 < v37)
            v111 = v37;
          else
            v111 = v109;
          *v66 = v110;
          if (v109 > v39)
            v111 = v39;
          v66[1] = llroundf(v111);
          v13 = v41;
          if (v12 <= v41)
          {
            v13 = v12;
            if (v12 < v40)
              v13 = v40;
          }
          v9 = (float)((float)((float)(v43 * _S11) + (float)(v42 * _S10)) + (float)(v44 * _S12)) + v37;
          v66[2] = llroundf(v13);
          v10 = v39;
          if (v9 <= v39)
          {
            v10 = v9;
            if (v9 < v37)
              v10 = v37;
          }
          v66[3] = llroundf(v10);
          if (v65)
          {
            *v65 = v69;
            v65[1] = v70;
            v65 += 2;
          }
          v64 += 16;
          v63 += 2;
          v66 += 4;
        }
        while (v31 > v63);
      }
      v33 += v27;
      v34 += v28;
      ++v24;
    }
    while (v24 != v35);
  }
  return result;
}

uint64_t vt_Copy_l64r_rgb_2vuyf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_rgb_2vuyf_GCD);
  return 0;
}

unint64_t vt_Copy_l64r_rgb_2vuyf_GCD(unint64_t result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  float v8;
  float v9;
  float v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  _BYTE *v53;
  uint64_t v54;
  float v55;
  char v56;
  char v57;
  float v58;
  unsigned int v59;
  float v60;
  unsigned int v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;

  v11 = *(_QWORD *)(result + 28);
  v12 = *(unsigned __int8 *)result;
  v13 = v11 * a2 / v12;
  v14 = *(_QWORD *)(result + 112);
  v15 = *(_QWORD **)(result + 128);
  v16 = *(_QWORD *)(result + 104) * a2 / v12 + *(_QWORD *)(result + 120);
  v17 = *(uint64_t **)(result + 136);
  v18 = (v11 + v11 * a2) / v12;
  v19 = (_BYTE *)v15[1];
  if (v19)
    v19 += v17[1] * v16 + v14;
  if (v18 != v13)
  {
    v20 = 0;
    v21 = *(_QWORD *)(result + 44);
    v22 = v13 + v21;
    v23 = **(_QWORD **)(result + 64);
    v24 = *v17;
    v25 = *v15 + v24 * v16;
    v26 = *(_QWORD *)(result + 152);
    v27 = *(_QWORD *)(result + 20);
    v28 = v18 + v21;
    v29 = **(_QWORD **)(result + 56) + v23 * v22 + 8 * *(_QWORD *)(result + 36);
    v30 = (_BYTE *)(v25 + v14);
    v31 = v28 - v22;
    LOWORD(a5) = *(_WORD *)(v26 + 144);
    LOWORD(a6) = *(_WORD *)(v26 + 146);
    LOWORD(a7) = *(_WORD *)(v26 + 148);
    v32 = (float)*(unsigned int *)(v26 + 136) / (float)*(unsigned int *)(v26 + 128);
    v33 = (float)LODWORD(a5);
    v34 = (float)LODWORD(a6);
    v35 = (float)LODWORD(a7);
    LOWORD(a7) = *(_WORD *)(v26 + 150);
    v36 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v26 + 152);
    v37 = (float)LODWORD(a8);
    v38 = *(float *)(v26 + 36);
    v39 = *(float *)(v26 + 40);
    v40 = *(float *)(v26 + 44);
    v41 = *(float *)(v26 + 48) * 0.5;
    v42 = *(float *)(v26 + 52) * 0.5;
    v43 = *(float *)(v26 + 56) * 0.5;
    v44 = *(float *)(v26 + 60) * 0.5;
    v45 = *(float *)(v26 + 64) * 0.5;
    v46 = *(float *)(v26 + 68) * 0.5;
    v47 = *(unsigned __int8 *)(v26 + 157);
    v48 = *(unsigned __int8 *)(v26 + 156);
    result = *(unsigned __int8 *)(v26 + 155);
    v49 = *(unsigned __int8 *)(v26 + 154);
    do
    {
      if (v27)
      {
        v50 = 0;
        v51 = v29;
        v52 = v19;
        v53 = v30;
        do
        {
          v54 = v51 + 8;
          if (v52)
          {
            LOWORD(v8) = *(_WORD *)(v51 + 2 * v47);
            v55 = (float)LODWORD(v8) * 0.0038911;
            v56 = llroundf(v55);
            LOWORD(v55) = *(_WORD *)(v54 + 2 * v47);
            v8 = (float)LODWORD(v55) * 0.0038911;
            v57 = llroundf(v8);
          }
          else
          {
            v56 = 0;
            v57 = 0;
          }
          LOWORD(v8) = *(_WORD *)(v51 + 2 * v49);
          LOWORD(v9) = *(_WORD *)(v51 + 2 * result);
          v58 = v32 * (float)LODWORD(v8);
          *(float *)&v59 = (float)LODWORD(v9);
          v60 = v32 * (float)LODWORD(v9);
          LOWORD(v59) = *(_WORD *)(v51 + 2 * v48);
          *(float *)&v61 = (float)v59;
          v62 = v32 * *(float *)&v61;
          LOWORD(v61) = *(_WORD *)(v54 + 2 * v49);
          LOWORD(v9) = *(_WORD *)(v54 + 2 * result);
          v63 = v32 * (float)v61;
          v64 = v32 * (float)LODWORD(v9);
          LOWORD(v10) = *(_WORD *)(v54 + 2 * v48);
          v10 = v32 * (float)LODWORD(v10);
          v65 = (float)((float)((float)(v39 * v60) + (float)(v38 * v58)) + (float)(v40 * v62)) + v33;
          v66 = v58 + v63;
          v67 = v60 + v64;
          v68 = v62 + v10;
          v69 = (float)((float)(v34 + (float)(v66 * v41)) + (float)(v67 * v42)) + (float)(v68 * v43);
          v70 = (float)((float)(v34 + (float)(v66 * v44)) + (float)(v67 * v45)) + (float)(v68 * v46);
          if (v69 < v36)
            v71 = v36;
          else
            v71 = v69;
          if (v69 > v37)
            v71 = v37;
          *v53 = llroundf(v71);
          if (v65 < v33)
            v72 = v33;
          else
            v72 = v65;
          if (v65 > v35)
            v72 = v35;
          v53[1] = llroundf(v72);
          v73 = v37;
          if (v70 <= v37)
          {
            v73 = v70;
            if (v70 < v36)
              v73 = v36;
          }
          v8 = (float)((float)((float)(v39 * v64) + (float)(v38 * v63)) + (float)(v40 * v10)) + v33;
          v53[2] = llroundf(v73);
          v9 = v35;
          if (v8 <= v35)
          {
            v9 = v8;
            if (v8 < v33)
              v9 = v33;
          }
          v53[3] = llroundf(v9);
          if (v52)
          {
            *v52 = v56;
            v52[1] = v57;
            v52 += 2;
          }
          v51 += 16;
          v50 += 2;
          v53 += 4;
        }
        while (v27 > v50);
      }
      v29 += v23;
      v30 += v24;
      ++v20;
    }
    while (v20 != v31);
  }
  return result;
}

uint64_t vt_Copy_l64r_TRC_Tone_Mat_TRC_yuvsf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_TRC_Tone_Mat_TRC_yuvsf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_l64r_TRC_Tone_Mat_TRC_yuvsf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  float v9;
  float v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  uint64_t v51;
  uint64_t v52;
  float v53;
  float v54;
  float v55;
  float v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _BYTE *v62;
  _BYTE *v63;
  uint64_t v64;
  float v75;
  float v76;
  float v78;
  unsigned int v81;
  float v85;
  float v86;
  char v87;
  char v88;
  float v91;
  float v92;
  float v93;
  float v98;
  float v99;
  float v100;
  float v103;
  float v104;
  unsigned int v107;
  unsigned int v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v117;
  float v118;
  float v119;
  float v120;
  BOOL v121;
  float v122;
  char v123;
  float v124;
  char v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;

  v11 = *(_QWORD *)(result + 28);
  v12 = *result;
  v13 = v11 * a2 / v12;
  v14 = *((_QWORD *)result + 14);
  v15 = (_QWORD *)*((_QWORD *)result + 16);
  v16 = *((_QWORD *)result + 13) * a2 / v12 + *((_QWORD *)result + 15);
  v17 = (uint64_t *)*((_QWORD *)result + 17);
  v18 = (v11 + v11 * a2) / v12;
  v19 = (_BYTE *)v15[1];
  if (v19)
    v19 += v17[1] * v16 + v14;
  if (v18 != v13)
  {
    v20 = 0;
    v21 = *(_QWORD *)(result + 44);
    v22 = v13 + v21;
    v23 = **((_QWORD **)result + 8);
    v24 = *v17;
    v25 = *((_QWORD *)result + 19);
    v26 = *v15 + v24 * v16;
    v27 = *(_QWORD *)(result + 20);
    v28 = v18 + v21;
    v29 = **((_QWORD **)result + 7) + v23 * v22 + 8 * *(_QWORD *)(result + 36);
    v30 = (_BYTE *)(v26 + v14);
    v31 = v28 - v22;
    LOWORD(a5) = *(_WORD *)(v25 + 144);
    LOWORD(a6) = *(_WORD *)(v25 + 146);
    LOWORD(a7) = *(_WORD *)(v25 + 148);
    LOWORD(a8) = *(_WORD *)(v25 + 150);
    LOWORD(a9) = *(_WORD *)(v25 + 152);
    v32 = 8191.0 / (float)*(unsigned int *)(v25 + 128);
    v33 = (float)LODWORD(a5);
    v34 = (float)LODWORD(a7);
    v35 = (float)LODWORD(a8);
    v36 = (float)LODWORD(a9);
    v37 = *(float *)(v25 + 40);
    v133 = *(float *)(v25 + 36);
    v134 = (float)LODWORD(a6);
    v38 = *(float *)(v25 + 44);
    v39 = 0.5;
    v131 = *(float *)(v25 + 52) * 0.5;
    v132 = *(float *)(v25 + 48) * 0.5;
    v40 = *(float *)(v25 + 64);
    v129 = *(float *)(v25 + 60) * 0.5;
    v130 = *(float *)(v25 + 56) * 0.5;
    v41 = *(float *)(v25 + 72);
    v42 = *(float *)(v25 + 68) * 0.5;
    v127 = v42;
    v128 = v40 * 0.5;
    v43 = *(float *)(v25 + 76);
    v44 = *(float *)(v25 + 80);
    v45 = *(float *)(v25 + 84);
    v46 = *(float *)(v25 + 88);
    v47 = *(float *)(v25 + 92);
    v48 = *(float *)(v25 + 96);
    v50 = *(float *)(v25 + 100);
    v49 = *(float *)(v25 + 104);
    v51 = v25 + 164;
    v52 = v25 + 16548;
    result = (unsigned __int8 *)(v25 + 32932);
    v53 = *(float *)(v25 + 108);
    v54 = *(float *)(v25 + 112);
    v55 = *(float *)(v25 + 116);
    v56 = *(float *)(v25 + 120);
    v57 = *(unsigned __int8 *)(v25 + 157);
    v58 = *(unsigned __int8 *)(v25 + 156);
    v59 = *(unsigned __int8 *)(v25 + 155);
    v60 = *(unsigned __int8 *)(v25 + 154);
    do
    {
      if (v27)
      {
        v61 = 0;
        v62 = v19;
        v63 = v30;
        v64 = v29;
        do
        {
          LOWORD(v42) = *(_WORD *)(v64 + 2 * v60);
          LOWORD(v39) = *(_WORD *)(v64 + 2 * v59);
          LOWORD(v40) = *(_WORD *)(v64 + 2 * v58);
          _H0 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v32 * (float)LODWORD(v42), 0.0), 8191.0)));
          __asm { FCVT            S14, H0 }
          _H0 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v32 * (float)LODWORD(v39), 0.0), 8191.0)));
          __asm { FCVT            S15, H0 }
          _H0 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v32 * (float)LODWORD(v40), 0.0), 8191.0)));
          __asm { FCVT            S18, H0 }
          v75 = (float)((float)((float)(v54 * _S15) + (float)(v53 * _S14)) + (float)(v55 * _S18))
              + (float)(v56 * fmaxf(_S14, fmaxf(_S15, _S18)));
          v76 = 8191.0;
          if (v75 <= 8191.0)
          {
            v76 = v75;
            if (v75 < 0.0)
              v76 = 0.0;
          }
          LOWORD(v75) = *(_WORD *)(v64 + 8 + 2 * v60);
          LOWORD(v9) = *(_WORD *)(v64 + 8 + 2 * v59);
          LOWORD(v10) = *(_WORD *)(v64 + 8 + 2 * v58);
          _H0 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v32 * (float)LODWORD(v75), 0.0), 8191.0)));
          v78 = v32 * (float)LODWORD(v10);
          __asm { FCVT            S20, H0 }
          _H0 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v32 * (float)LODWORD(v9), 0.0), 8191.0)));
          v81 = llroundf(fminf(fmaxf(v78, 0.0), 8191.0));
          __asm { FCVT            S21, H0 }
          _H0 = *(_WORD *)(v51 + 2 * v81);
          __asm { FCVT            S22, H0 }
          v85 = (float)((float)((float)(v54 * _S21) + (float)(v53 * _S20)) + (float)(v55 * _S22))
              + (float)(v56 * fmaxf(_S20, fmaxf(_S21, _S22)));
          v86 = 8191.0;
          if (v85 <= 8191.0)
          {
            v86 = v85;
            if (v85 < 0.0)
              v86 = 0.0;
          }
          if (v62)
          {
            v87 = llroundf((float)*(unsigned __int16 *)(v64 + 2 * v57) * 0.0038911);
            v88 = llroundf((float)*(unsigned __int16 *)(v64 + 8 + 2 * v57) * 0.0038911);
          }
          else
          {
            v87 = 0;
            v88 = 0;
          }
          _H0 = *(_WORD *)(v52 + 2 * llroundf(v76));
          __asm { FCVT            S0, H0 }
          v91 = _S14 * _S0;
          v92 = _S15 * _S0;
          v93 = _S18 * _S0;
          _H18 = *(_WORD *)(v52 + 2 * llroundf(v86));
          __asm { FCVT            S18, H18 }
          _S19 = _S20 * _S18;
          _S20 = _S21 * _S18;
          v98 = _S22 * _S18;
          v99 = (float)((float)(v43 * v92) + (float)(v91 * v41)) + (float)(v93 * v44);
          v100 = (float)((float)(v46 * v92) + (float)(v91 * v45)) + (float)(v93 * v47);
          _S0 = (float)((float)(v50 * v92) + (float)(v91 * v48)) + (float)(v93 * v49);
          _S3 = (float)((float)(v43 * _S20) + (float)(_S19 * v41)) + (float)(v98 * v44);
          v103 = (float)((float)(v46 * _S20) + (float)(_S19 * v45)) + (float)(v98 * v47);
          v104 = (float)((float)(v50 * _S20) + (float)(_S19 * v48)) + (float)(v98 * v49);
          LOWORD(_S19) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v99, 0.0), 8191.0))];
          __asm { FCVT            S19, H19 }
          LOWORD(_S20) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v100, 0.0), 8191.0))];
          __asm { FCVT            S20, H20 }
          v107 = llroundf(fminf(fmaxf(_S0, 0.0), 8191.0));
          LOWORD(_S0) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0))];
          __asm { FCVT            S0, H0 }
          LOWORD(_S3) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v103, 0.0), 8191.0))];
          __asm { FCVT            S3, H3 }
          v110 = llroundf(fminf(fmaxf(v104, 0.0), 8191.0));
          v111 = (float)(v37 * _S20) + (float)(v133 * _S19);
          v112 = (float)(v37 * _S3) + (float)(v133 * _S0);
          v113 = _S19 + _S0;
          LOWORD(_S19) = *(_WORD *)&result[2 * v107];
          v114 = _S20 + _S3;
          LOWORD(_S20) = *(_WORD *)&result[2 * v110];
          __asm
          {
            FCVT            S19, H19
            FCVT            S20, H20
          }
          v117 = (float)(v111 + (float)(v38 * _S19)) + v33;
          v118 = v112 + (float)(v38 * _S20);
          v9 = _S19 + _S20;
          v10 = (float)(v134 + (float)(v113 * v132)) + (float)(v114 * v131);
          v119 = (float)(v134 + (float)(v113 * v129)) + (float)(v114 * v128);
          if (v117 < v33)
            v120 = v33;
          else
            v120 = v117;
          v121 = v117 <= v34;
          v122 = v10 + (float)(v9 * v130);
          if (!v121)
            v120 = v34;
          v123 = llroundf(v120);
          if (v122 < v35)
            v124 = v35;
          else
            v124 = v10 + (float)(v9 * v130);
          if (v122 > v36)
            v124 = v36;
          v125 = llroundf(v124);
          v42 = v119 + (float)(v9 * v127);
          if ((float)(v118 + v33) < v33)
            v126 = v33;
          else
            v126 = v118 + v33;
          *v63 = v123;
          v63[1] = v125;
          if ((float)(v118 + v33) <= v34)
            v39 = v126;
          else
            v39 = v34;
          v63[2] = llroundf(v39);
          v40 = v36;
          if (v42 <= v36)
          {
            v40 = v42;
            if (v42 < v35)
              v40 = v35;
          }
          v63[3] = llroundf(v40);
          if (v62)
          {
            *v62 = v87;
            v62[1] = v88;
            v62 += 2;
          }
          v64 += 16;
          v61 += 2;
          v63 += 4;
        }
        while (v27 > v61);
      }
      v29 += v23;
      v30 += v24;
      ++v20;
    }
    while (v20 != v31);
  }
  return result;
}

uint64_t vt_Copy_l64r_TRC_Mat_TRC_yuvsf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_TRC_Mat_TRC_yuvsf_GCD);
  return 0;
}

unint64_t vt_Copy_l64r_TRC_Mat_TRC_yuvsf_GCD(unint64_t result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  _BYTE *v66;
  _BYTE *v67;
  uint64_t v68;
  float v69;
  char v70;
  char v71;
  unsigned int v86;
  float v87;
  float v89;
  float v90;
  float v91;
  float v94;
  float v95;
  unsigned int v96;
  unsigned int v99;
  unsigned int v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v109;
  float v110;
  float v111;
  float v112;
  BOOL v113;
  char v114;
  float v115;
  char v116;
  float v117;
  float v118;

  v15 = *(_QWORD *)(result + 28);
  v16 = *(unsigned __int8 *)result;
  v17 = v15 * a2 / v16;
  v18 = *(_QWORD *)(result + 112);
  v19 = *(_QWORD **)(result + 128);
  v20 = *(_QWORD *)(result + 104) * a2 / v16 + *(_QWORD *)(result + 120);
  v21 = *(uint64_t **)(result + 136);
  v22 = (v15 + v15 * a2) / v16;
  v23 = (_BYTE *)v19[1];
  if (v23)
    v23 += v21[1] * v20 + v18;
  if (v22 != v17)
  {
    v24 = 0;
    v25 = *(_QWORD *)(result + 44);
    v26 = v17 + v25;
    v27 = **(_QWORD **)(result + 64);
    v28 = *v21;
    v29 = *(_QWORD *)(result + 152);
    v30 = *v19 + v28 * v20;
    v31 = *(_QWORD *)(result + 20);
    v32 = v22 + v25;
    v33 = **(_QWORD **)(result + 56) + v27 * v26 + 8 * *(_QWORD *)(result + 36);
    v34 = (_BYTE *)(v30 + v18);
    v35 = v32 - v26;
    LOWORD(a5) = *(_WORD *)(v29 + 144);
    LOWORD(a6) = *(_WORD *)(v29 + 146);
    LOWORD(a7) = *(_WORD *)(v29 + 148);
    LOWORD(a8) = *(_WORD *)(v29 + 150);
    LOWORD(a9) = *(_WORD *)(v29 + 152);
    v36 = 8191.0 / (float)*(unsigned int *)(v29 + 128);
    v37 = (float)LODWORD(a5);
    v38 = (float)LODWORD(a6);
    v39 = (float)LODWORD(a7);
    v40 = (float)LODWORD(a8);
    v41 = (float)LODWORD(a9);
    v42 = *(float *)(v29 + 36);
    v43 = *(float *)(v29 + 40);
    v44 = *(float *)(v29 + 44);
    v118 = *(float *)(v29 + 48) * 0.5;
    v45 = *(float *)(v29 + 52) * 0.5;
    v46 = *(float *)(v29 + 56) * 0.5;
    v47 = *(float *)(v29 + 60) * 0.5;
    v48 = *(float *)(v29 + 64) * 0.5;
    v49 = *(float *)(v29 + 72);
    v50 = *(float *)(v29 + 68) * 0.5;
    v51 = *(float *)(v29 + 76);
    v52 = *(float *)(v29 + 80);
    v53 = *(float *)(v29 + 84);
    v54 = *(float *)(v29 + 88);
    v55 = *(float *)(v29 + 92);
    v56 = *(float *)(v29 + 96);
    v58 = *(float *)(v29 + 100);
    v57 = *(float *)(v29 + 104);
    v59 = v29 + 164;
    v60 = v29 + 16548;
    result = *(unsigned __int8 *)(v29 + 157);
    v61 = *(unsigned __int8 *)(v29 + 156);
    v62 = *(unsigned __int8 *)(v29 + 155);
    v63 = *(unsigned __int8 *)(v29 + 154);
    do
    {
      if (v31)
      {
        v64 = 0;
        v65 = v33;
        v66 = v23;
        v67 = v34;
        do
        {
          v68 = v65 + 8;
          if (v66)
          {
            LOWORD(v9) = *(_WORD *)(v65 + 2 * result);
            HIWORD(v10) = 15231;
            v69 = (float)LODWORD(v9) * 0.0038911;
            v70 = llroundf(v69);
            LOWORD(v69) = *(_WORD *)(v68 + 2 * result);
            v9 = (float)LODWORD(v69) * 0.0038911;
            v71 = llroundf(v9);
          }
          else
          {
            v70 = 0;
            v71 = 0;
          }
          LOWORD(v9) = *(_WORD *)(v65 + 2 * v63);
          LOWORD(v10) = *(_WORD *)(v65 + 2 * v62);
          LOWORD(v11) = *(_WORD *)(v65 + 2 * v61);
          LOWORD(v12) = *(_WORD *)(v68 + 2 * v63);
          LOWORD(v13) = *(_WORD *)(v68 + 2 * v62);
          LOWORD(v14) = *(_WORD *)(v68 + 2 * v61);
          _H10 = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v36 * (float)LODWORD(v9), 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          _H11 = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v36 * (float)LODWORD(v10), 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          _H12 = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v36 * (float)LODWORD(v11), 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          _H13 = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v36 * (float)LODWORD(v12), 0.0), 8191.0)));
          __asm { FCVT            S13, H13 }
          _H14 = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v36 * (float)LODWORD(v13), 0.0), 8191.0)));
          __asm { FCVT            S14, H14 }
          v86 = llroundf(fminf(fmaxf(v36 * (float)LODWORD(v14), 0.0), 8191.0));
          v14 = (float)((float)(v51 * _S11) + (float)(_S10 * v49)) + (float)(_S12 * v52);
          v87 = (float)((float)(v54 * _S11) + (float)(_S10 * v53)) + (float)(_S12 * v55);
          _S10 = (float)((float)(v58 * _S11) + (float)(_S10 * v56)) + (float)(_S12 * v57);
          v89 = (float)(v51 * _S14) + (float)(_S13 * v49);
          v90 = (float)(v54 * _S14) + (float)(_S13 * v53);
          v91 = (float)(v58 * _S14) + (float)(_S13 * v56);
          LOWORD(_S14) = *(_WORD *)(v59 + 2 * v86);
          __asm { FCVT            S14, H14 }
          _S11 = v89 + (float)(_S14 * v52);
          v94 = v90 + (float)(_S14 * v55);
          v95 = v91 + (float)(_S14 * v57);
          LOWORD(_S14) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v14, 0.0), 8191.0)));
          v96 = llroundf(fminf(fmaxf(v87, 0.0), 8191.0));
          __asm { FCVT            S18, H14 }
          LOWORD(_S14) = *(_WORD *)(v60 + 2 * v96);
          __asm { FCVT            S14, H14 }
          v99 = llroundf(fminf(fmaxf(_S10, 0.0), 8191.0));
          LOWORD(_S10) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S11, 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          LOWORD(_S11) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          v102 = llroundf(fminf(fmaxf(v95, 0.0), 8191.0));
          v103 = (float)(v43 * _S14) + (float)(v42 * _S18);
          v104 = (float)(v43 * _S11) + (float)(v42 * _S10);
          v105 = _S18 + _S10;
          LOWORD(_S10) = *(_WORD *)(v60 + 2 * v99);
          v106 = _S14 + _S11;
          LOWORD(_S14) = *(_WORD *)(v60 + 2 * v102);
          __asm
          {
            FCVT            S10, H10
            FCVT            S14, H14
          }
          v109 = (float)(v103 + (float)(v44 * _S10)) + v37;
          v12 = v104 + (float)(v44 * _S14);
          v110 = _S10 + _S14;
          v13 = (float)(v38 + (float)(v105 * v118)) + (float)(v106 * v45);
          v111 = (float)(v38 + (float)(v105 * v47)) + (float)(v106 * v48);
          if (v109 < v37)
            v112 = v37;
          else
            v112 = v109;
          v113 = v109 <= v39;
          v11 = v13 + (float)(v110 * v46);
          if (!v113)
            v112 = v39;
          v114 = llroundf(v112);
          if (v11 < v40)
            v115 = v40;
          else
            v115 = v13 + (float)(v110 * v46);
          if (v11 > v41)
            v115 = v41;
          v116 = llroundf(v115);
          v9 = v111 + (float)(v110 * v50);
          if ((float)(v12 + v37) < v37)
            v117 = v37;
          else
            v117 = v12 + v37;
          *v67 = v114;
          v67[1] = v116;
          if ((float)(v12 + v37) > v39)
            v117 = v39;
          v67[2] = llroundf(v117);
          v10 = v41;
          if (v9 <= v41)
          {
            v10 = v9;
            if (v9 < v40)
              v10 = v40;
          }
          v67[3] = llroundf(v10);
          if (v66)
          {
            *v66 = v70;
            v66[1] = v71;
            v66 += 2;
          }
          v65 += 16;
          v64 += 2;
          v67 += 4;
        }
        while (v31 > v64);
      }
      v33 += v27;
      v34 += v28;
      ++v24;
    }
    while (v24 != v35);
  }
  return result;
}

uint64_t vt_Copy_l64r_rgb_yuvsf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_rgb_yuvsf_GCD);
  return 0;
}

unint64_t vt_Copy_l64r_rgb_yuvsf_GCD(unint64_t result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  _BYTE *v56;
  uint64_t v57;
  float v58;
  char v59;
  char v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;

  v14 = *(_QWORD *)(result + 28);
  v15 = *(unsigned __int8 *)result;
  v16 = v14 * a2 / v15;
  v17 = *(_QWORD *)(result + 112);
  v18 = *(_QWORD **)(result + 128);
  v19 = *(_QWORD *)(result + 104) * a2 / v15 + *(_QWORD *)(result + 120);
  v20 = *(uint64_t **)(result + 136);
  v21 = (v14 + v14 * a2) / v15;
  v22 = (_BYTE *)v18[1];
  if (v22)
    v22 += v20[1] * v19 + v17;
  if (v21 != v16)
  {
    v23 = 0;
    v24 = *(_QWORD *)(result + 44);
    v25 = v16 + v24;
    v26 = **(_QWORD **)(result + 64);
    v27 = *v20;
    v28 = *v18 + v27 * v19;
    v29 = *(_QWORD *)(result + 152);
    v30 = *(_QWORD *)(result + 20);
    v31 = v21 + v24;
    v32 = **(_QWORD **)(result + 56) + v26 * v25 + 8 * *(_QWORD *)(result + 36);
    v33 = (_BYTE *)(v28 + v17);
    v34 = v31 - v25;
    LOWORD(a5) = *(_WORD *)(v29 + 144);
    LOWORD(a6) = *(_WORD *)(v29 + 146);
    LOWORD(a7) = *(_WORD *)(v29 + 148);
    v35 = (float)*(unsigned int *)(v29 + 136) / (float)*(unsigned int *)(v29 + 128);
    v36 = (float)LODWORD(a5);
    v37 = (float)LODWORD(a6);
    v38 = (float)LODWORD(a7);
    LOWORD(a7) = *(_WORD *)(v29 + 150);
    v39 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v29 + 152);
    v40 = (float)LODWORD(a8);
    v41 = *(float *)(v29 + 36);
    v42 = *(float *)(v29 + 40);
    v43 = *(float *)(v29 + 44);
    v44 = *(float *)(v29 + 48) * 0.5;
    v45 = *(float *)(v29 + 52) * 0.5;
    v46 = *(float *)(v29 + 56) * 0.5;
    v47 = *(float *)(v29 + 60) * 0.5;
    v48 = *(float *)(v29 + 64) * 0.5;
    v49 = *(float *)(v29 + 68) * 0.5;
    v50 = *(unsigned __int8 *)(v29 + 157);
    v51 = *(unsigned __int8 *)(v29 + 156);
    result = *(unsigned __int8 *)(v29 + 155);
    v52 = *(unsigned __int8 *)(v29 + 154);
    do
    {
      if (v30)
      {
        v53 = 0;
        v54 = v32;
        v55 = v22;
        v56 = v33;
        do
        {
          v57 = v54 + 8;
          if (v55)
          {
            LOWORD(v8) = *(_WORD *)(v54 + 2 * v50);
            v58 = (float)LODWORD(v8) * 0.0038911;
            v59 = llroundf(v58);
            LOWORD(v58) = *(_WORD *)(v57 + 2 * v50);
            v8 = (float)LODWORD(v58) * 0.0038911;
            v60 = llroundf(v8);
          }
          else
          {
            v59 = 0;
            v60 = 0;
          }
          LOWORD(v8) = *(_WORD *)(v54 + 2 * v52);
          v61 = v35 * (float)LODWORD(v8);
          LOWORD(v9) = *(_WORD *)(v54 + 2 * result);
          v62 = v35 * (float)LODWORD(v9);
          LOWORD(v10) = *(_WORD *)(v54 + 2 * v51);
          v63 = v35 * (float)LODWORD(v10);
          LOWORD(v11) = *(_WORD *)(v57 + 2 * v52);
          v64 = v35 * (float)LODWORD(v11);
          LOWORD(v12) = *(_WORD *)(v57 + 2 * result);
          v12 = v35 * (float)LODWORD(v12);
          LOWORD(v13) = *(_WORD *)(v57 + 2 * v51);
          v13 = v35 * (float)LODWORD(v13);
          v65 = (float)((float)((float)(v42 * v62) + (float)(v41 * v61)) + (float)(v43 * v63)) + v36;
          v66 = (float)((float)((float)(v42 * v12) + (float)(v41 * v64)) + (float)(v43 * v13)) + v36;
          v67 = v61 + v64;
          v68 = v62 + v12;
          v10 = v63 + v13;
          v11 = (float)((float)(v37 + (float)(v67 * v44)) + (float)(v68 * v45)) + (float)(v10 * v46);
          v69 = (float)(v37 + (float)(v67 * v47)) + (float)(v68 * v48);
          if (v65 < v36)
            v70 = v36;
          else
            v70 = v65;
          if (v65 > v38)
            v70 = v38;
          v8 = v69 + (float)(v10 * v49);
          *v56 = llroundf(v70);
          if (v11 < v39)
            v71 = v39;
          else
            v71 = v11;
          if (v11 > v40)
            v71 = v40;
          v56[1] = llroundf(v71);
          if (v66 < v36)
            v72 = v36;
          else
            v72 = v66;
          if (v66 > v38)
            v72 = v38;
          v56[2] = llroundf(v72);
          v9 = v40;
          if (v8 <= v40)
          {
            v9 = v8;
            if (v8 < v39)
              v9 = v39;
          }
          v56[3] = llroundf(v9);
          if (v55)
          {
            *v55 = v59;
            v55[1] = v60;
            v55 += 2;
          }
          v54 += 16;
          v53 += 2;
          v56 += 4;
        }
        while (v30 > v53);
      }
      v32 += v26;
      v33 += v27;
      ++v23;
    }
    while (v23 != v34);
  }
  return result;
}

uint64_t vt_Copy_l64r_TRC_Tone_Mat_TRC_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v20 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v18 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_TRC_Tone_Mat_TRC_xf422_GCD);
  return 0;
}

unint64_t vt_Copy_l64r_TRC_Tone_Mat_TRC_xf422_GCD(unint64_t result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  float v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float v46;
  float v47;
  float v48;
  float v49;
  uint64_t *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unsigned int v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  unint64_t v67;
  _WORD *v68;
  _WORD *v69;
  uint64_t v70;
  float v81;
  float v82;
  float v83;
  float v90;
  float v91;
  float v95;
  unsigned int v97;
  float v98;
  float v102;
  float v103;
  __int16 v104;
  __int16 v105;
  float v109;
  float v110;
  float v111;
  float v112;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  _WORD *v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;

  v9 = *(_QWORD *)(result + 28);
  v10 = *(unsigned __int8 *)result;
  v11 = v9 * a2 / v10;
  v12 = (v9 + v9 * a2) / v10;
  if (v12 != v11)
  {
    v13 = 0;
    v14 = *(_QWORD *)(result + 20);
    v15 = v11 + *(_QWORD *)(result + 44);
    v16 = v12 - v11;
    v17 = *(_QWORD *)(result + 152);
    v18 = *(uint64_t **)(result + 136);
    v19 = *(_QWORD **)(result + 56);
    v20 = **(_QWORD **)(result + 64);
    v21 = *v18;
    v22 = v18[1];
    v23 = v18[2];
    v24 = 8191.0 / (float)*(unsigned int *)(v17 + 128);
    LOWORD(a5) = *(_WORD *)(v17 + 144);
    v25 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v17 + 146);
    v26 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v17 + 148);
    v27 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v17 + 150);
    v130 = (float)LODWORD(a8);
    LOWORD(a8) = *(_WORD *)(v17 + 152);
    v28 = (float)LODWORD(a8);
    v29 = *(float *)(v17 + 40);
    v131 = *(float *)(v17 + 36);
    v30 = *(float *)(v17 + 44);
    v31 = 0.5;
    v129 = *(float *)(v17 + 48) * 0.5;
    v128 = *(float *)(v17 + 52) * 0.5;
    v127 = *(float *)(v17 + 56) * 0.5;
    v32 = *(float *)(v17 + 64);
    v126 = *(float *)(v17 + 60) * 0.5;
    v125 = v32 * 0.5;
    v33 = *(float *)(v17 + 68);
    v34 = *(float *)(v17 + 72);
    v124 = v33 * 0.5;
    v35 = *(float *)(v17 + 76);
    v36 = *(float *)(v17 + 80);
    v37 = *(float *)(v17 + 84);
    v38 = *(float *)(v17 + 88);
    v39 = *(float *)(v17 + 92);
    v40 = *(float *)(v17 + 96);
    v42 = *(float *)(v17 + 100);
    v41 = *(float *)(v17 + 104);
    v43 = v17 + 164;
    v44 = v17 + 16548;
    v45 = v17 + 32932;
    v46 = *(float *)(v17 + 108);
    v47 = *(float *)(v17 + 112);
    v48 = *(float *)(v17 + 116);
    v49 = *(float *)(v17 + 120);
    v50 = *(uint64_t **)(result + 128);
    v51 = *(_QWORD *)(result + 112);
    v52 = *(_QWORD *)(result + 104) * a2 / v10 + *(_QWORD *)(result + 120);
    v53 = *(_QWORD *)(result + 36);
    v54 = *(unsigned __int8 *)(v17 + 132);
    if (v54 >= 0x11)
      v55 = 0;
    else
      v55 = 16 - v54;
    result = *(unsigned __int8 *)(v17 + 157);
    v56 = *(unsigned __int8 *)(v17 + 156);
    v57 = *(unsigned __int8 *)(v17 + 155);
    v58 = *(unsigned __int8 *)(v17 + 154);
    v59 = v50[2];
    if (v59)
      v60 = v59 + v52 * v23 + 2 * v51;
    else
      v60 = 0;
    v62 = *v50;
    v61 = v50[1];
    v63 = v61 + v52 * v22 + 2 * v51;
    if (!v61)
      v63 = 0;
    v64 = v62 + v52 * v21 + 2 * v51;
    v65 = *v19 + v20 * v15 + 8 * v53;
    v66 = v55;
    do
    {
      if (v14)
      {
        v67 = 0;
        v68 = (_WORD *)v60;
        v69 = (_WORD *)v64;
        v70 = v65;
        do
        {
          LOWORD(v33) = *(_WORD *)(v70 + 2 * v58);
          LOWORD(v31) = *(_WORD *)(v70 + 2 * v57);
          LOWORD(v32) = *(_WORD *)(v70 + 2 * v56);
          _H5 = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v24 * (float)LODWORD(v33), 0.0), 8191.0)));
          __asm { FCVT            S15, H5 }
          _H5 = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v24 * (float)LODWORD(v31), 0.0), 8191.0)));
          __asm { FCVT            S18, H5 }
          _H5 = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v24 * (float)LODWORD(v32), 0.0), 8191.0)));
          __asm { FCVT            S19, H5 }
          v81 = (float)((float)(v47 * _S18) + (float)(v46 * _S15)) + (float)(v48 * _S19);
          v82 = v81 + (float)(v49 * fmaxf(_S15, fmaxf(_S18, _S19)));
          v83 = 8191.0;
          if (v82 <= 8191.0)
          {
            v83 = v82;
            if (v82 < 0.0)
              v83 = 0.0;
          }
          LOWORD(v81) = *(_WORD *)(v70 + 8 + 2 * v58);
          LOWORD(v82) = *(_WORD *)(v70 + 8 + 2 * v57);
          LOWORD(v8) = *(_WORD *)(v70 + 8 + 2 * v56);
          _H5 = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v24 * (float)LODWORD(v81), 0.0), 8191.0)));
          __asm { FCVT            S14, H5 }
          _H5 = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v24 * (float)LODWORD(v82), 0.0), 8191.0)));
          __asm { FCVT            S20, H5 }
          _H5 = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v24 * (float)LODWORD(v8), 0.0), 8191.0)));
          __asm { FCVT            S21, H5 }
          v90 = (float)((float)((float)(v47 * _S20) + (float)(v46 * _S14)) + (float)(v48 * _S21))
              + (float)(v49 * fmaxf(_S14, fmaxf(_S20, _S21)));
          v91 = 8191.0;
          if (v90 <= 8191.0)
          {
            v91 = v90;
            if (v90 < 0.0)
              v91 = 0.0;
          }
          _H22 = *(_WORD *)(v44 + 2 * llroundf(v83));
          __asm { FCVT            S22, H22 }
          _S18 = _S18 * _S22;
          v95 = _S19 * _S22;
          _S3 = (float)((float)(v38 * _S18) + (float)((float)(_S15 * _S22) * v37)) + (float)(v95 * v39);
          v97 = llroundf(fminf(fmaxf((float)((float)(v35 * _S18) + (float)((float)(_S15 * _S22) * v34)) + (float)(v95 * v36), 0.0), 8191.0));
          v98 = (float)((float)(v42 * _S18) + (float)((float)(_S15 * _S22) * v40)) + (float)(v95 * v41);
          LOWORD(_S18) = *(_WORD *)(v45 + 2 * v97);
          __asm { FCVT            S15, H18 }
          LOWORD(_S3) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          __asm { FCVT            S18, H3 }
          LOWORD(_S3) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          __asm { FCVT            S19, H3 }
          v102 = (float)((float)((float)(v29 * _S18) + (float)(v131 * _S15)) + (float)(v30 * _S19)) + v25;
          v103 = v27;
          if (v102 <= v27)
          {
            v103 = (float)((float)((float)(v29 * _S18) + (float)(v131 * _S15)) + (float)(v30 * _S19)) + v25;
            if (v102 < v25)
              v103 = v25;
          }
          v104 = *(_WORD *)(v70 + 2 * result);
          v105 = *(_WORD *)(v70 + 8 + 2 * result);
          _H3 = *(_WORD *)(v44 + 2 * llroundf(v91));
          __asm { FCVT            S3, H3 }
          _S5 = _S14 * _S3;
          v109 = _S20 * _S3;
          v110 = _S21 * _S3;
          v111 = (float)((float)(v35 * v109) + (float)(_S5 * v34)) + (float)(v110 * v36);
          v112 = (float)((float)(v38 * v109) + (float)(_S5 * v37)) + (float)(v110 * v39);
          _S3 = (float)((float)(v42 * v109) + (float)(_S5 * v40)) + (float)(v110 * v41);
          LOWORD(_S5) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v111, 0.0), 8191.0)));
          __asm { FCVT            S20, H5 }
          LOWORD(_S5) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v112, 0.0), 8191.0)));
          LOWORD(_S3) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          __asm
          {
            FCVT            S22, H5
            FCVT            S21, H3
          }
          v117 = (float)((float)((float)(v29 * _S22) + (float)(v131 * _S20)) + (float)(v30 * _S21)) + v25;
          *v69 = llroundf(v103) << v66;
          v118 = v27;
          if (v117 <= v27)
          {
            v118 = (float)((float)((float)(v29 * _S22) + (float)(v131 * _S20)) + (float)(v30 * _S21)) + v25;
            if (v117 < v25)
              v118 = v25;
          }
          v69[1] = llroundf(v118) << v66;
          v119 = _S15 + _S20;
          v120 = _S18 + _S22;
          v121 = _S19 + _S21;
          v122 = (float)((float)(v26 + (float)(v119 * v129)) + (float)(v120 * v128)) + (float)(v121 * v127);
          v8 = v28;
          if (v122 <= v28)
          {
            v8 = (float)((float)(v26 + (float)(v119 * v129)) + (float)(v120 * v128)) + (float)(v121 * v127);
            if (v122 < v130)
              v8 = v130;
          }
          v123 = (_WORD *)(v63 + 2 * v67);
          HIWORD(v33) = HIWORD(v124);
          v31 = (float)((float)(v26 + (float)(v119 * v126)) + (float)(v120 * v125)) + (float)(v121 * v124);
          *v123 = llroundf(v8) << v66;
          v32 = v28;
          if (v31 <= v28)
          {
            v32 = v31;
            if (v31 < v130)
              v32 = v130;
          }
          v123[1] = llroundf(v32) << v66;
          if (v68)
          {
            *v68 = v104;
            v68[1] = v105;
            v68 += 2;
          }
          v70 += 16;
          v67 += 2;
          v69 += 2;
        }
        while (v14 > v67);
      }
      v65 += v20;
      v64 += v21;
      v63 += v22;
      v60 += v23;
      ++v13;
    }
    while (v13 != v16);
  }
  return result;
}

uint64_t vt_Copy_l64r_TRC_Mat_TRC_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v20 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v18 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_TRC_Mat_TRC_xf422_GCD);
  return 0;
}

unint64_t vt_Copy_l64r_TRC_Mat_TRC_xf422_GCD(unint64_t result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  float v9;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unsigned int v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  unint64_t v68;
  uint64_t v69;
  _WORD *v70;
  _WORD *v71;
  unsigned int v72;
  float v83;
  float v84;
  float v90;
  float v91;
  __int16 v92;
  __int16 v93;
  float v100;
  float v102;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  _WORD *v111;
  float v112;
  float v113;
  float v114;

  v11 = *(_QWORD *)(result + 28);
  v12 = *(unsigned __int8 *)result;
  v13 = v11 * a2 / v12;
  v14 = (v11 + v11 * a2) / v12;
  if (v14 != v13)
  {
    v15 = 0;
    v16 = *(_QWORD *)(result + 20);
    v17 = v13 + *(_QWORD *)(result + 44);
    v18 = v14 - v13;
    v19 = *(_QWORD *)(result + 152);
    v20 = *(uint64_t **)(result + 136);
    v21 = *(_QWORD **)(result + 56);
    v22 = **(_QWORD **)(result + 64);
    v23 = *v20;
    v24 = v20[1];
    v25 = v20[2];
    v26 = 8191.0 / (float)*(unsigned int *)(v19 + 128);
    LOWORD(a5) = *(_WORD *)(v19 + 144);
    v27 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v19 + 146);
    v28 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v19 + 148);
    v29 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v19 + 150);
    v30 = (float)LODWORD(a8);
    LOWORD(a9) = *(_WORD *)(v19 + 152);
    v31 = (float)LODWORD(a9);
    v32 = *(float *)(v19 + 36);
    v33 = *(float *)(v19 + 40);
    v34 = *(float *)(v19 + 44);
    v35 = 0.5;
    v113 = *(float *)(v19 + 52) * 0.5;
    v114 = *(float *)(v19 + 48) * 0.5;
    v112 = *(float *)(v19 + 56) * 0.5;
    v36 = *(float *)(v19 + 60) * 0.5;
    v37 = *(float *)(v19 + 64) * 0.5;
    v38 = *(float *)(v19 + 68);
    v39 = *(float *)(v19 + 72);
    v40 = v38 * 0.5;
    v41 = *(float *)(v19 + 76);
    v42 = *(float *)(v19 + 80);
    v43 = *(float *)(v19 + 84);
    v44 = *(float *)(v19 + 88);
    v45 = *(float *)(v19 + 92);
    v46 = *(float *)(v19 + 96);
    v48 = *(float *)(v19 + 100);
    v47 = *(float *)(v19 + 104);
    v49 = v19 + 164;
    v50 = v19 + 16548;
    v51 = *(uint64_t **)(result + 128);
    v52 = *(_QWORD *)(result + 112);
    v53 = *(_QWORD *)(result + 104) * a2 / v12 + *(_QWORD *)(result + 120);
    v54 = *(_QWORD *)(result + 36);
    v55 = *(unsigned __int8 *)(v19 + 132);
    if (v55 >= 0x11)
      v56 = 0;
    else
      v56 = 16 - v55;
    v57 = *(unsigned __int8 *)(v19 + 157);
    result = *(unsigned __int8 *)(v19 + 156);
    v58 = *(unsigned __int8 *)(v19 + 155);
    v59 = *(unsigned __int8 *)(v19 + 154);
    v60 = v51[2];
    if (v60)
      v61 = v60 + v53 * v25 + 2 * v52;
    else
      v61 = 0;
    v63 = *v51;
    v62 = v51[1];
    v64 = v62 + v53 * v24 + 2 * v52;
    if (!v62)
      v64 = 0;
    v65 = v63 + v53 * v23 + 2 * v52;
    v66 = *v21 + v22 * v17 + 8 * v54;
    v67 = v56;
    do
    {
      if (v16)
      {
        v68 = 0;
        v69 = v66;
        v70 = (_WORD *)v61;
        v71 = (_WORD *)v65;
        do
        {
          LOWORD(v38) = *(_WORD *)(v69 + 2 * v59);
          LOWORD(v35) = *(_WORD *)(v69 + 2 * v58);
          LOWORD(v9) = *(_WORD *)(v69 + 2 * result);
          v72 = llroundf(fminf(fmaxf(v26 * (float)LODWORD(v38), 0.0), 8191.0));
          _S18 = v26 * (float)LODWORD(v9);
          _H10 = *(_WORD *)(v49 + 2 * v72);
          __asm { FCVT            S10, H10 }
          _H19 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v26 * (float)LODWORD(v35), 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          LOWORD(_S18) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(_S18, 0.0), 8191.0)));
          __asm { FCVT            S18, H18 }
          v83 = (float)((float)(v41 * _S19) + (float)(_S10 * v39)) + (float)(_S18 * v42);
          v84 = (float)((float)(v44 * _S19) + (float)(_S10 * v43)) + (float)(_S18 * v45);
          _S18 = (float)((float)(v48 * _S19) + (float)(_S10 * v46)) + (float)(_S18 * v47);
          LOWORD(_S19) = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          __asm { FCVT            S10, H19 }
          _S19 = fminf(fmaxf(v84, 0.0), 8191.0);
          LOWORD(_S19) = *(_WORD *)(v50 + 2 * llroundf(_S19));
          __asm { FCVT            S11, H19 }
          LOWORD(_S18) = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(_S18, 0.0), 8191.0)));
          __asm { FCVT            S12, H18 }
          v90 = (float)((float)((float)(v33 * _S11) + (float)(v32 * _S10)) + (float)(v34 * _S12)) + v27;
          v91 = v29;
          if (v90 <= v29)
          {
            v91 = (float)((float)((float)(v33 * _S11) + (float)(v32 * _S10)) + (float)(v34 * _S12)) + v27;
            if (v90 < v27)
              v91 = v27;
          }
          v92 = *(_WORD *)(v69 + 2 * v57);
          LOWORD(v90) = *(_WORD *)(v69 + 8 + 2 * v59);
          LOWORD(_S19) = *(_WORD *)(v69 + 8 + 2 * v58);
          LOWORD(_S14) = *(_WORD *)(v69 + 8 + 2 * result);
          v93 = *(_WORD *)(v69 + 8 + 2 * v57);
          _H18 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v26 * (float)LODWORD(v90), 0.0), 8191.0)));
          __asm { FCVT            S18, H18 }
          _H19 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v26 * (float)LODWORD(_S19), 0.0), 8191.0)));
          _H14 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v26 * (float)LODWORD(_S14), 0.0), 8191.0)));
          __asm
          {
            FCVT            S19, H19
            FCVT            S14, H14
          }
          v100 = (float)((float)(v41 * _S19) + (float)(_S18 * v39)) + (float)(_S14 * v42);
          _S20 = (float)((float)(v44 * _S19) + (float)(_S18 * v43)) + (float)(_S14 * v45);
          v102 = (float)((float)(v48 * _S19) + (float)(_S18 * v46)) + (float)(_S14 * v47);
          LOWORD(_S19) = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v100, 0.0), 8191.0)));
          __asm { FCVT            S14, H19 }
          LOWORD(_S19) = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(_S20, 0.0), 8191.0)));
          LOWORD(_S20) = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v102, 0.0), 8191.0)));
          __asm
          {
            FCVT            S18, H19
            FCVT            S15, H20
          }
          v105 = (float)((float)((float)(v33 * _S18) + (float)(v32 * _S14)) + (float)(v34 * _S15)) + v27;
          *v71 = llroundf(v91) << v67;
          v106 = v29;
          if (v105 <= v29)
          {
            v106 = (float)((float)((float)(v33 * _S18) + (float)(v32 * _S14)) + (float)(v34 * _S15)) + v27;
            if (v105 < v27)
              v106 = v27;
          }
          v71[1] = llroundf(v106) << v67;
          v9 = _S10 + _S14;
          v107 = _S11 + _S18;
          v108 = _S12 + _S15;
          v109 = (float)((float)(v28 + (float)(v9 * v114)) + (float)(v107 * v113))
               + (float)((float)(_S12 + _S15) * v112);
          v110 = v31;
          if (v109 <= v31)
          {
            v110 = v109;
            if (v109 < v30)
              v110 = v30;
          }
          v111 = (_WORD *)(v64 + 2 * v68);
          v38 = (float)((float)(v28 + (float)(v9 * v36)) + (float)(v107 * v37)) + (float)(v108 * v40);
          *v111 = llroundf(v110) << v67;
          v35 = v31;
          if (v38 <= v31)
          {
            v35 = v38;
            if (v38 < v30)
              v35 = v30;
          }
          v111[1] = llroundf(v35) << v67;
          if (v70)
          {
            *v70 = v92;
            v70[1] = v93;
            v70 += 2;
          }
          v69 += 16;
          v68 += 2;
          v71 += 2;
        }
        while (v16 > v68);
      }
      v66 += v22;
      v65 += v23;
      v64 += v24;
      v61 += v25;
      ++v15;
    }
    while (v15 != v18);
  }
  return result;
}

uint64_t vt_Copy_l64r_rgb_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v20 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v18 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_rgb_xf422_GCD);
  return 0;
}

unint64_t vt_Copy_l64r_rgb_xf422_GCD(unint64_t result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  float v8;
  float v9;
  float v10;
  float v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unsigned int v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  unint64_t v63;
  uint64_t v64;
  _WORD *v65;
  _WORD *v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  __int16 v72;
  float v73;
  float v74;
  __int16 v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  _WORD *v81;

  v12 = *(_QWORD *)(result + 28);
  v13 = *(unsigned __int8 *)result;
  v14 = v12 * a2 / v13;
  v15 = (v12 + v12 * a2) / v13;
  if (v15 != v14)
  {
    v16 = 0;
    v17 = *(_QWORD *)(result + 20);
    v18 = v14 + *(_QWORD *)(result + 44);
    v19 = v15 - v14;
    v20 = *(_QWORD *)(result + 152);
    v21 = *(uint64_t **)(result + 136);
    v22 = *(_QWORD **)(result + 56);
    v23 = **(_QWORD **)(result + 64);
    v24 = *v21;
    v25 = v21[1];
    v26 = v21[2];
    *(float *)&v27 = (float)*(unsigned int *)(v20 + 136);
    v28 = *(float *)&v27 / (float)*(unsigned int *)(v20 + 128);
    LOWORD(v27) = *(_WORD *)(v20 + 144);
    v29 = (float)v27;
    LOWORD(a5) = *(_WORD *)(v20 + 146);
    v30 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v20 + 148);
    v31 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v20 + 150);
    v32 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v20 + 152);
    v33 = (float)LODWORD(a8);
    v34 = *(float *)(v20 + 36);
    v35 = *(float *)(v20 + 40);
    v36 = *(float *)(v20 + 44);
    v37 = *(float *)(v20 + 48) * 0.5;
    v38 = *(float *)(v20 + 52) * 0.5;
    v39 = *(float *)(v20 + 56) * 0.5;
    v40 = *(float *)(v20 + 60) * 0.5;
    v41 = *(float *)(v20 + 64) * 0.5;
    v42 = *(float *)(v20 + 68);
    v43 = v42 * 0.5;
    v44 = *(_QWORD **)(result + 128);
    v45 = *(_QWORD *)(result + 112);
    v46 = *(_QWORD *)(result + 104) * a2 / v13 + *(_QWORD *)(result + 120);
    v47 = *(_QWORD *)(result + 36);
    v48 = *(unsigned __int8 *)(v20 + 132);
    if (v48 >= 0x11)
      v49 = 0;
    else
      v49 = 16 - v48;
    v50 = *(unsigned __int8 *)(v20 + 157);
    v51 = *(unsigned __int8 *)(v20 + 156);
    v52 = *(unsigned __int8 *)(v20 + 155);
    result = *(unsigned __int8 *)(v20 + 154);
    v53 = v44[2];
    if (v53)
      v54 = v53 + v46 * v26 + 2 * v45;
    else
      v54 = 0;
    v57 = v44;
    v56 = *v44;
    v55 = v57[1];
    v58 = v55 == 0;
    v59 = v55 + v46 * v25 + 2 * v45;
    if (v58)
      v59 = 0;
    v60 = v56 + v46 * v24 + 2 * v45;
    v61 = *v22 + v23 * v18 + 8 * v47;
    v62 = v49;
    do
    {
      if (v17)
      {
        v63 = 0;
        v64 = v61;
        v65 = (_WORD *)v54;
        v66 = (_WORD *)v60;
        do
        {
          LOWORD(v42) = *(_WORD *)(v64 + 2 * result);
          v67 = v28 * (float)LODWORD(v42);
          LOWORD(v8) = *(_WORD *)(v64 + 2 * v52);
          v68 = v28 * (float)LODWORD(v8);
          LOWORD(v9) = *(_WORD *)(v64 + 2 * v51);
          v69 = v28 * (float)LODWORD(v9);
          v70 = (float)((float)((float)(v35 * v68) + (float)(v34 * v67)) + (float)(v36 * v69)) + v29;
          v71 = v31;
          if (v70 <= v31)
          {
            v71 = (float)((float)((float)(v35 * v68) + (float)(v34 * v67)) + (float)(v36 * v69)) + v29;
            if (v70 < v29)
              v71 = v29;
          }
          v72 = *(_WORD *)(v64 + 2 * v50);
          LOWORD(v70) = *(_WORD *)(v64 + 8 + 2 * result);
          v73 = v28 * (float)LODWORD(v70);
          LOWORD(v10) = *(_WORD *)(v64 + 8 + 2 * v52);
          v74 = v28 * (float)LODWORD(v10);
          LOWORD(v11) = *(_WORD *)(v64 + 8 + 2 * v51);
          v11 = v28 * (float)LODWORD(v11);
          v75 = *(_WORD *)(v64 + 8 + 2 * v50);
          v76 = (float)((float)((float)(v35 * v74) + (float)(v34 * v73)) + (float)(v36 * v11)) + v29;
          *v66 = llroundf(v71) << v62;
          v77 = v31;
          if (v76 <= v31)
          {
            v77 = (float)((float)((float)(v35 * v74) + (float)(v34 * v73)) + (float)(v36 * v11)) + v29;
            if (v76 < v29)
              v77 = v29;
          }
          v66[1] = llroundf(v77) << v62;
          v78 = v67 + v73;
          v79 = v68 + v74;
          v9 = v69 + v11;
          v10 = (float)((float)(v30 + (float)(v78 * v37)) + (float)(v79 * v38)) + (float)(v9 * v39);
          v80 = v33;
          if (v10 <= v33)
          {
            v80 = (float)((float)(v30 + (float)(v78 * v37)) + (float)(v79 * v38)) + (float)(v9 * v39);
            if (v10 < v32)
              v80 = v32;
          }
          v81 = (_WORD *)(v59 + 2 * v63);
          v42 = (float)((float)(v30 + (float)(v78 * v40)) + (float)(v79 * v41)) + (float)(v9 * v43);
          *v81 = llroundf(v80) << v62;
          v8 = v33;
          if (v42 <= v33)
          {
            v8 = v42;
            if (v42 < v32)
              v8 = v32;
          }
          v81[1] = llroundf(v8) << v62;
          if (v65)
          {
            *v65 = v72;
            v65[1] = v75;
            v65 += 2;
          }
          v64 += 16;
          v63 += 2;
          v66 += 2;
        }
        while (v17 > v63);
      }
      v61 += v23;
      v60 += v24;
      v59 += v25;
      v54 += v26;
      ++v16;
    }
    while (v16 != v19);
  }
  return result;
}

uint64_t vt_Copy_l64r_TRC_Tone_Mat_TRC_v216(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_TRC_Tone_Mat_TRC_v216_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_l64r_TRC_Tone_Mat_TRC_v216_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  float v9;
  float v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  _WORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _WORD *v30;
  uint64_t v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  uint64_t v53;
  uint64_t v54;
  float v55;
  float v56;
  float v57;
  float v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _WORD *v64;
  _WORD *v65;
  uint64_t v66;
  float v77;
  float v78;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v94;
  float v95;
  float v97;
  float v98;
  float v100;
  float v101;
  float v102;
  float v104;
  float v105;
  unsigned int v111;
  float v112;
  float v113;
  float v114;
  float v116;
  float v117;
  float v118;
  float v119;
  BOOL v120;
  float v121;
  __int16 v122;
  float v123;
  __int16 v124;
  __int16 v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;

  v11 = *(_QWORD *)(result + 28);
  v12 = *result;
  v13 = v11 * a2 / v12;
  v14 = *((_QWORD *)result + 14);
  v15 = (_QWORD *)*((_QWORD *)result + 16);
  v16 = *((_QWORD *)result + 13) * a2 / v12 + *((_QWORD *)result + 15);
  v17 = (uint64_t *)*((_QWORD *)result + 17);
  v18 = (v11 + v11 * a2) / v12;
  v19 = (_WORD *)v15[1];
  if (v19)
    v19 = (_WORD *)((char *)v19 + 2 * v14 + v17[1] * v16);
  if (v18 != v13)
  {
    v20 = 0;
    v21 = *(_QWORD *)(result + 44);
    v22 = v13 + v21;
    v23 = **((_QWORD **)result + 8);
    v24 = *v17;
    v25 = *((_QWORD *)result + 19);
    v26 = *v15 + v24 * v16;
    v27 = *(_QWORD *)(result + 20);
    v28 = v18 + v21;
    v29 = **((_QWORD **)result + 7) + v23 * v22 + 8 * *(_QWORD *)(result + 36);
    v30 = (_WORD *)(v26 + 2 * v14);
    v31 = v28 - v22;
    LOWORD(a5) = *(_WORD *)(v25 + 144);
    LOWORD(a6) = *(_WORD *)(v25 + 146);
    LOWORD(a7) = *(_WORD *)(v25 + 148);
    LOWORD(a8) = *(_WORD *)(v25 + 150);
    LOWORD(a9) = *(_WORD *)(v25 + 152);
    v32 = 8191.0 / (float)*(unsigned int *)(v25 + 128);
    v33 = (float)LODWORD(a5);
    v34 = (float)LODWORD(a6);
    v35 = (float)LODWORD(a7);
    v36 = (float)LODWORD(a8);
    v37 = (float)LODWORD(a9);
    v38 = *(float *)(v25 + 36);
    v39 = *(float *)(v25 + 40);
    v40 = *(float *)(v25 + 44);
    v41 = 0.5;
    v131 = *(float *)(v25 + 48) * 0.5;
    v130 = *(float *)(v25 + 52) * 0.5;
    v129 = *(float *)(v25 + 56) * 0.5;
    v42 = *(float *)(v25 + 64);
    v128 = *(float *)(v25 + 60) * 0.5;
    v127 = v42 * 0.5;
    v43 = *(float *)(v25 + 72);
    v44 = *(float *)(v25 + 68) * 0.5;
    v126 = v44;
    v45 = *(float *)(v25 + 76);
    v46 = *(float *)(v25 + 80);
    v47 = *(float *)(v25 + 84);
    v48 = *(float *)(v25 + 88);
    v49 = *(float *)(v25 + 92);
    v50 = *(float *)(v25 + 96);
    v52 = *(float *)(v25 + 100);
    v51 = *(float *)(v25 + 104);
    v53 = v25 + 164;
    v54 = v25 + 16548;
    result = (unsigned __int8 *)(v25 + 32932);
    v55 = *(float *)(v25 + 108);
    v56 = *(float *)(v25 + 112);
    v57 = *(float *)(v25 + 116);
    v58 = *(float *)(v25 + 120);
    v59 = *(unsigned __int8 *)(v25 + 157);
    v60 = *(unsigned __int8 *)(v25 + 156);
    v61 = *(unsigned __int8 *)(v25 + 155);
    v62 = *(unsigned __int8 *)(v25 + 154);
    do
    {
      if (v27)
      {
        v63 = 0;
        v64 = v19;
        v65 = v30;
        v66 = v29;
        do
        {
          LOWORD(v44) = *(_WORD *)(v66 + 2 * v62);
          LOWORD(v41) = *(_WORD *)(v66 + 2 * v61);
          LOWORD(v42) = *(_WORD *)(v66 + 2 * v60);
          _H0 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v32 * (float)LODWORD(v44), 0.0), 8191.0)));
          __asm { FCVT            S14, H0 }
          _H0 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v32 * (float)LODWORD(v41), 0.0), 8191.0)));
          __asm { FCVT            S15, H0 }
          _H0 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v32 * (float)LODWORD(v42), 0.0), 8191.0)));
          __asm { FCVT            S18, H0 }
          v77 = (float)((float)((float)(v56 * _S15) + (float)(v55 * _S14)) + (float)(v57 * _S18))
              + (float)(v58 * fmaxf(_S14, fmaxf(_S15, _S18)));
          v78 = 8191.0;
          if (v77 <= 8191.0)
          {
            v78 = v77;
            if (v77 < 0.0)
              v78 = 0.0;
          }
          LOWORD(v77) = *(_WORD *)(v66 + 8 + 2 * v62);
          LOWORD(v9) = *(_WORD *)(v66 + 8 + 2 * v61);
          LOWORD(v10) = *(_WORD *)(v66 + 8 + 2 * v60);
          _H19 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v32 * (float)LODWORD(v77), 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          _H20 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v32 * (float)LODWORD(v9), 0.0), 8191.0)));
          _H21 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v32 * (float)LODWORD(v10), 0.0), 8191.0)));
          __asm
          {
            FCVT            S22, H20
            FCVT            S21, H21
          }
          _H0 = *(_WORD *)(v54 + 2 * llroundf(v78));
          __asm { FCVT            S0, H0 }
          v87 = _S14 * _S0;
          v88 = _S15 * _S0;
          v89 = _S18 * _S0;
          v90 = (float)((float)((float)(v56 * _S22) + (float)(v55 * _S19)) + (float)(v57 * _S21))
              + (float)(v58 * fmaxf(_S19, fmaxf(_S22, _S21)));
          v91 = 8191.0;
          if (v90 <= 8191.0)
          {
            v91 = v90;
            if (v90 < 0.0)
              v91 = 0.0;
          }
          _H18 = *(_WORD *)(v54 + 2 * llroundf(v91));
          __asm { FCVT            S18, H18 }
          v94 = _S19 * _S18;
          v95 = _S22 * _S18;
          _S18 = _S21 * _S18;
          v97 = (float)((float)(v45 * v88) + (float)(v87 * v43)) + (float)(v89 * v46);
          v98 = (float)((float)(v48 * v88) + (float)(v87 * v47)) + (float)(v89 * v49);
          _S0 = (float)((float)(v52 * v88) + (float)(v87 * v50)) + (float)(v89 * v51);
          v100 = (float)(v45 * v95) + (float)(v94 * v43);
          v101 = (float)(v48 * v95) + (float)(v94 * v47);
          v102 = (float)(v52 * v95) + (float)(v94 * v50);
          _S20 = v100 + (float)(_S18 * v46);
          v104 = v101 + (float)(_S18 * v49);
          v105 = v102 + (float)(_S18 * v51);
          LOWORD(_S18) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v97, 0.0), 8191.0))];
          __asm { FCVT            S21, H18 }
          LOWORD(_S18) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0))];
          __asm { FCVT            S22, H18 }
          LOWORD(_S0) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0))];
          __asm { FCVT            S15, H0 }
          LOWORD(_S0) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(_S20, 0.0), 8191.0))];
          LOWORD(_S20) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v104, 0.0), 8191.0))];
          __asm
          {
            FCVT            S18, H0
            FCVT            S14, H20
          }
          v111 = llroundf(fminf(fmaxf(v105, 0.0), 8191.0));
          v112 = (float)(v39 * _S22) + (float)(v38 * _S21);
          v113 = (float)(v34 + (float)((float)(_S21 + _S18) * v131)) + (float)((float)(_S22 + _S14) * v130);
          v114 = (float)(v34 + (float)((float)(_S21 + _S18) * v128)) + (float)((float)(_S22 + _S14) * v127);
          LOWORD(_S0) = *(_WORD *)&result[2 * v111];
          __asm { FCVT            S0, H0 }
          v116 = v112 + (float)(v40 * _S15);
          v117 = v113 + (float)((float)(_S15 + _S0) * v129);
          v118 = v114 + (float)((float)(_S15 + _S0) * v126);
          if (v117 < v33)
            v119 = v33;
          else
            v119 = v117;
          v120 = v117 <= v35;
          v121 = v116 + v33;
          if (!v120)
            v119 = v35;
          v122 = llroundf(v119);
          if (v121 < v36)
            v123 = v36;
          else
            v123 = v116 + v33;
          v124 = *(_WORD *)(v66 + 2 * v59);
          v125 = *(_WORD *)(v66 + 8 + 2 * v59);
          *v65 = v122;
          if (v121 <= v37)
            v9 = v123;
          else
            v9 = v37;
          v65[1] = llroundf(v9);
          v10 = v35;
          if (v118 <= v35)
          {
            v10 = v118;
            if (v118 < v33)
              v10 = v33;
          }
          v42 = v39 * _S14;
          v44 = (float)((float)((float)(v39 * _S14) + (float)(v38 * _S18)) + (float)(v40 * _S0)) + v33;
          v65[2] = llroundf(v10);
          v41 = v37;
          if (v44 <= v37)
          {
            v41 = v44;
            if (v44 < v36)
              v41 = v36;
          }
          v65[3] = llroundf(v41);
          if (v64)
          {
            *v64 = v124;
            v64[1] = v125;
            v64 += 2;
          }
          v66 += 16;
          v63 += 2;
          v65 += 4;
        }
        while (v27 > v63);
      }
      v29 += v23;
      v30 = (_WORD *)((char *)v30 + v24);
      ++v20;
    }
    while (v20 != v31);
  }
  return result;
}

uint64_t vt_Copy_l64r_TRC_Mat_TRC_v216(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_TRC_Mat_TRC_v216_GCD);
  return 0;
}

unint64_t vt_Copy_l64r_TRC_Mat_TRC_v216_GCD(unint64_t result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  float v9;
  float v10;
  float v12;
  float v13;
  float v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  _WORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _WORD *v34;
  uint64_t v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  _WORD *v65;
  _WORD *v66;
  unsigned int v67;
  float v68;
  unsigned int v83;
  float v87;
  float v88;
  float v89;
  float v91;
  float v92;
  float v93;
  unsigned int v99;
  float v100;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  __int16 v109;
  float v110;
  __int16 v111;
  __int16 v112;
  float v113;
  float v114;

  v15 = *(_QWORD *)(result + 28);
  v16 = *(unsigned __int8 *)result;
  v17 = v15 * a2 / v16;
  v18 = *(_QWORD *)(result + 112);
  v19 = *(_QWORD **)(result + 128);
  v20 = *(_QWORD *)(result + 104) * a2 / v16 + *(_QWORD *)(result + 120);
  v21 = *(uint64_t **)(result + 136);
  v22 = (v15 + v15 * a2) / v16;
  v23 = (_WORD *)v19[1];
  if (v23)
    v23 = (_WORD *)((char *)v23 + 2 * v18 + v21[1] * v20);
  if (v22 != v17)
  {
    v24 = 0;
    v25 = *(_QWORD *)(result + 44);
    v26 = v17 + v25;
    v27 = **(_QWORD **)(result + 64);
    v28 = *v21;
    v29 = *(_QWORD *)(result + 152);
    v30 = *v19 + v28 * v20;
    v31 = *(_QWORD *)(result + 20);
    v32 = v22 + v25;
    v33 = **(_QWORD **)(result + 56) + v27 * v26 + 8 * *(_QWORD *)(result + 36);
    v34 = (_WORD *)(v30 + 2 * v18);
    v35 = v32 - v26;
    LOWORD(a5) = *(_WORD *)(v29 + 144);
    LOWORD(a6) = *(_WORD *)(v29 + 146);
    LOWORD(a7) = *(_WORD *)(v29 + 148);
    LOWORD(a8) = *(_WORD *)(v29 + 150);
    LOWORD(a9) = *(_WORD *)(v29 + 152);
    v36 = 8191.0 / (float)*(unsigned int *)(v29 + 128);
    v37 = (float)LODWORD(a5);
    v38 = (float)LODWORD(a6);
    v39 = (float)LODWORD(a7);
    v40 = (float)LODWORD(a8);
    v41 = (float)LODWORD(a9);
    v42 = *(float *)(v29 + 36);
    v43 = *(float *)(v29 + 40);
    v44 = *(float *)(v29 + 44);
    v113 = *(float *)(v29 + 52) * 0.5;
    v114 = *(float *)(v29 + 48) * 0.5;
    v45 = *(float *)(v29 + 56) * 0.5;
    v46 = *(float *)(v29 + 60) * 0.5;
    v47 = *(float *)(v29 + 64) * 0.5;
    v48 = *(float *)(v29 + 72);
    v49 = *(float *)(v29 + 68) * 0.5;
    v50 = *(float *)(v29 + 76);
    v51 = *(float *)(v29 + 80);
    v52 = *(float *)(v29 + 84);
    v53 = *(float *)(v29 + 88);
    v54 = *(float *)(v29 + 92);
    v55 = *(float *)(v29 + 96);
    v57 = *(float *)(v29 + 100);
    v56 = *(float *)(v29 + 104);
    v58 = v29 + 164;
    v59 = v29 + 16548;
    result = *(unsigned __int8 *)(v29 + 157);
    v60 = *(unsigned __int8 *)(v29 + 156);
    v61 = *(unsigned __int8 *)(v29 + 155);
    v62 = *(unsigned __int8 *)(v29 + 154);
    do
    {
      if (v31)
      {
        v63 = 0;
        v64 = v33;
        v65 = v23;
        v66 = v34;
        do
        {
          LOWORD(v9) = *(_WORD *)(v64 + 2 * v62);
          LOWORD(v10) = *(_WORD *)(v64 + 2 * v61);
          LOWORD(_S12) = *(_WORD *)(v64 + 2 * v60);
          LOWORD(v12) = *(_WORD *)(v64 + 8 + 2 * v62);
          LOWORD(v13) = *(_WORD *)(v64 + 8 + 2 * v61);
          LOWORD(v14) = *(_WORD *)(v64 + 8 + 2 * v60);
          v67 = llroundf(fminf(fmaxf(v36 * (float)LODWORD(v9), 0.0), 8191.0));
          v68 = v36 * (float)LODWORD(v14);
          _H15 = *(_WORD *)(v58 + 2 * v67);
          __asm { FCVT            S15, H15 }
          _H11 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v36 * (float)LODWORD(v10), 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          _H12 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v36 * (float)LODWORD(_S12), 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          _H13 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v36 * (float)LODWORD(v12), 0.0), 8191.0)));
          _H14 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v36 * (float)LODWORD(v13), 0.0), 8191.0)));
          __asm
          {
            FCVT            S13, H13
            FCVT            S14, H14
          }
          v83 = llroundf(fminf(fmaxf(v68, 0.0), 8191.0));
          _S10 = (float)((float)(v50 * _S11) + (float)(_S15 * v48)) + (float)(_S12 * v51);
          _S18 = (float)((float)(v53 * _S11) + (float)(_S15 * v52)) + (float)(_S12 * v54);
          _S11 = (float)((float)(v57 * _S11) + (float)(_S15 * v55)) + (float)(_S12 * v56);
          v87 = (float)(v50 * _S14) + (float)(_S13 * v48);
          v88 = (float)(v53 * _S14) + (float)(_S13 * v52);
          v89 = (float)(v57 * _S14) + (float)(_S13 * v55);
          LOWORD(_S14) = *(_WORD *)(v58 + 2 * v83);
          __asm { FCVT            S14, H14 }
          v91 = v87 + (float)(_S14 * v51);
          v92 = v88 + (float)(_S14 * v54);
          v93 = v89 + (float)(_S14 * v56);
          LOWORD(_S10) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(_S10, 0.0), 8191.0)));
          __asm { FCVT            S14, H10 }
          LOWORD(_S18) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(_S18, 0.0), 8191.0)));
          __asm { FCVT            S18, H18 }
          LOWORD(_S10) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(_S11, 0.0), 8191.0)));
          __asm { FCVT            S19, H10 }
          LOWORD(_S10) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          LOWORD(_S11) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          __asm
          {
            FCVT            S10, H10
            FCVT            S11, H11
          }
          v99 = llroundf(fminf(fmaxf(v93, 0.0), 8191.0));
          v100 = (float)(v43 * _S18) + (float)(v42 * _S14);
          _S12 = _S14 + _S10;
          v102 = _S18 + _S11;
          v103 = (float)(v38 + (float)((float)(_S14 + _S10) * v114)) + (float)(v102 * v113);
          v104 = (float)(v38 + (float)(_S12 * v46)) + (float)(v102 * v47);
          LOWORD(_S12) = *(_WORD *)(v59 + 2 * v99);
          __asm { FCVT            S12, H12 }
          v14 = v100 + (float)(v44 * _S19);
          v105 = _S19 + _S12;
          v106 = v103 + (float)(v105 * v45);
          v12 = v104 + (float)(v105 * v49);
          if (v106 < v37)
            v107 = v37;
          else
            v107 = v106;
          v108 = v14 + v37;
          if (v106 > v39)
            v107 = v39;
          v109 = llroundf(v107);
          if (v108 < v40)
            v110 = v40;
          else
            v110 = v14 + v37;
          v111 = *(_WORD *)(v64 + 2 * result);
          v112 = *(_WORD *)(v64 + 8 + 2 * result);
          *v66 = v109;
          if (v108 > v41)
            v110 = v41;
          v66[1] = llroundf(v110);
          v13 = v39;
          if (v12 <= v39)
          {
            v13 = v12;
            if (v12 < v37)
              v13 = v37;
          }
          v9 = (float)((float)((float)(v43 * _S11) + (float)(v42 * _S10)) + (float)(v44 * _S12)) + v37;
          v66[2] = llroundf(v13);
          v10 = v41;
          if (v9 <= v41)
          {
            v10 = v9;
            if (v9 < v40)
              v10 = v40;
          }
          v66[3] = llroundf(v10);
          if (v65)
          {
            *v65 = v111;
            v65[1] = v112;
            v65 += 2;
          }
          v64 += 16;
          v63 += 2;
          v66 += 4;
        }
        while (v31 > v63);
      }
      v33 += v27;
      v34 = (_WORD *)((char *)v34 + v28);
      ++v24;
    }
    while (v24 != v35);
  }
  return result;
}

uint64_t vt_Copy_l64r_rgb_v216(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_rgb_v216_GCD);
  return 0;
}

unint64_t vt_Copy_l64r_rgb_v216_GCD(unint64_t result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  float v8;
  float v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  _WORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _WORD *v29;
  uint64_t v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _WORD *v52;
  _WORD *v53;
  unsigned int v54;
  float v55;
  unsigned int v56;
  float v57;
  __int16 v58;
  float v59;
  float v60;
  float v61;
  __int16 v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;

  v10 = *(_QWORD *)(result + 28);
  v11 = *(unsigned __int8 *)result;
  v12 = v10 * a2 / v11;
  v13 = *(_QWORD *)(result + 112);
  v14 = *(_QWORD **)(result + 128);
  v15 = *(_QWORD *)(result + 104) * a2 / v11 + *(_QWORD *)(result + 120);
  v16 = *(uint64_t **)(result + 136);
  v17 = (v10 + v10 * a2) / v11;
  v18 = (_WORD *)v14[1];
  if (v18)
    v18 = (_WORD *)((char *)v18 + 2 * v13 + v16[1] * v15);
  if (v17 != v12)
  {
    v19 = 0;
    v20 = *(_QWORD *)(result + 44);
    v21 = v12 + v20;
    v22 = **(_QWORD **)(result + 64);
    v23 = *v16;
    v24 = *v14 + v23 * v15;
    v25 = *(_QWORD *)(result + 152);
    v26 = *(_QWORD *)(result + 20);
    v27 = v17 + v20;
    v28 = **(_QWORD **)(result + 56) + v22 * v21 + 8 * *(_QWORD *)(result + 36);
    v29 = (_WORD *)(v24 + 2 * v13);
    v30 = v27 - v21;
    LOWORD(a5) = *(_WORD *)(v25 + 144);
    LOWORD(a6) = *(_WORD *)(v25 + 146);
    v31 = (float)*(unsigned int *)(v25 + 136) / (float)*(unsigned int *)(v25 + 128);
    v32 = (float)LODWORD(a5);
    v33 = (float)LODWORD(a6);
    LOWORD(a6) = *(_WORD *)(v25 + 148);
    v34 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v25 + 150);
    v35 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v25 + 152);
    v36 = (float)LODWORD(a8);
    v37 = *(float *)(v25 + 36);
    v38 = *(float *)(v25 + 40);
    v39 = *(float *)(v25 + 44);
    v40 = *(float *)(v25 + 48) * 0.5;
    v41 = *(float *)(v25 + 52) * 0.5;
    v42 = *(float *)(v25 + 56) * 0.5;
    v43 = *(float *)(v25 + 60) * 0.5;
    v44 = *(float *)(v25 + 64) * 0.5;
    v45 = *(float *)(v25 + 68);
    v46 = v45 * 0.5;
    v47 = *(unsigned __int8 *)(v25 + 157);
    v48 = *(unsigned __int8 *)(v25 + 156);
    result = *(unsigned __int8 *)(v25 + 155);
    v49 = *(unsigned __int8 *)(v25 + 154);
    do
    {
      if (v26)
      {
        v50 = 0;
        v51 = v28;
        v52 = v18;
        v53 = v29;
        do
        {
          LOWORD(v45) = *(_WORD *)(v51 + 2 * v49);
          *(float *)&v54 = (float)LODWORD(v45);
          v55 = v31 * *(float *)&v54;
          LOWORD(v54) = *(_WORD *)(v51 + 2 * result);
          *(float *)&v56 = (float)v54;
          v57 = v31 * *(float *)&v56;
          LOWORD(v56) = *(_WORD *)(v51 + 2 * v48);
          v58 = *(_WORD *)(v51 + 2 * v47);
          LOWORD(v8) = *(_WORD *)(v51 + 8 + 2 * v49);
          v59 = v31 * (float)v56;
          v60 = v31 * (float)LODWORD(v8);
          LOWORD(v8) = *(_WORD *)(v51 + 8 + 2 * result);
          v61 = v31 * (float)LODWORD(v8);
          LOWORD(v9) = *(_WORD *)(v51 + 8 + 2 * v48);
          v62 = *(_WORD *)(v51 + 8 + 2 * v47);
          v9 = v31 * (float)LODWORD(v9);
          v63 = (float)((float)((float)(v38 * v57) + (float)(v37 * v55)) + (float)(v39 * v59)) + v32;
          v64 = v55 + v60;
          v65 = v57 + v61;
          v66 = v59 + v9;
          v67 = (float)((float)(v33 + (float)(v64 * v40)) + (float)(v65 * v41)) + (float)(v66 * v42);
          v68 = (float)((float)(v33 + (float)(v64 * v43)) + (float)(v65 * v44)) + (float)(v66 * v46);
          if (v67 < v32)
            v69 = v32;
          else
            v69 = v67;
          if (v67 > v34)
            v69 = v34;
          *v53 = llroundf(v69);
          if (v63 < v35)
            v70 = v35;
          else
            v70 = v63;
          if (v63 > v36)
            v70 = v36;
          v53[1] = llroundf(v70);
          v71 = v34;
          if (v68 <= v34)
          {
            v71 = v68;
            if (v68 < v32)
              v71 = v32;
          }
          v45 = (float)((float)((float)(v38 * v61) + (float)(v37 * v60)) + (float)(v39 * v9)) + v32;
          v53[2] = llroundf(v71);
          v8 = v36;
          if (v45 <= v36)
          {
            v8 = v45;
            if (v45 < v35)
              v8 = v35;
          }
          v53[3] = llroundf(v8);
          if (v52)
          {
            *v52 = v58;
            v52[1] = v62;
            v52 += 2;
          }
          v51 += 16;
          v50 += 2;
          v53 += 4;
        }
        while (v26 > v50);
      }
      v28 += v22;
      v29 = (_WORD *)((char *)v29 + v23);
      ++v19;
    }
    while (v19 != v30);
  }
  return result;
}

uint64_t vt_Copy_l64r_TRC_Tone_Mat_TRC_444vf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_TRC_Tone_Mat_TRC_444vf_GCD);
  return 0;
}

unint64_t vt_Copy_l64r_TRC_Tone_Mat_TRC_444vf_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  float v45;
  float v46;
  uint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  _BYTE *v63;
  _BYTE *v64;
  uint64_t v65;
  float v67;
  unsigned int v74;
  float v78;
  float v79;
  float v83;
  float v84;
  float v85;
  float v86;
  unsigned int v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;

  v3 = *(_QWORD *)(result + 28);
  v4 = *(unsigned __int8 *)result;
  v5 = v3 * a2 / v4;
  v6 = (v3 + v3 * a2) / v4;
  if (v6 != v5)
  {
    v7 = 0;
    v8 = *(_QWORD *)(result + 20);
    v9 = v5 + *(_QWORD *)(result + 44);
    v10 = v6 - v5;
    v11 = *(_QWORD *)(result + 152);
    v12 = *(uint64_t **)(result + 136);
    v13 = *(_QWORD **)(result + 56);
    v14 = **(_QWORD **)(result + 64);
    v15 = *v12;
    v16 = v12[1];
    v17 = v12[2];
    *(float *)&v18 = (float)*(unsigned int *)(v11 + 128);
    v19 = 8191.0 / *(float *)&v18;
    LOWORD(v18) = *(_WORD *)(v11 + 144);
    v20 = (float)v18;
    LOWORD(v18) = *(_WORD *)(v11 + 146);
    v21 = (float)v18;
    LOWORD(v18) = *(_WORD *)(v11 + 148);
    v22 = (float)v18;
    LOWORD(v18) = *(_WORD *)(v11 + 150);
    v23 = (float)v18;
    LOWORD(v18) = *(_WORD *)(v11 + 152);
    v24 = (float)v18;
    v25 = *(float *)(v11 + 36);
    v26 = *(float *)(v11 + 40);
    v27 = *(float *)(v11 + 44);
    v96 = *(float *)(v11 + 52);
    v97 = *(float *)(v11 + 48);
    v28 = *(float *)(v11 + 56);
    v94 = *(float *)(v11 + 60);
    v95 = v28;
    v29 = *(float *)(v11 + 64);
    v30 = *(float *)(v11 + 68);
    v93 = v29;
    v31 = *(float *)(v11 + 72);
    v32 = *(float *)(v11 + 76);
    v33 = *(float *)(v11 + 80);
    v34 = *(float *)(v11 + 84);
    v35 = *(float *)(v11 + 88);
    v36 = *(float *)(v11 + 92);
    v37 = *(float *)(v11 + 96);
    v38 = *(float *)(v11 + 100);
    v39 = *(float *)(v11 + 104);
    v40 = *(float *)(v11 + 108);
    v41 = v11 + 164;
    v42 = v11 + 16548;
    v43 = v11 + 32932;
    v44 = *(float *)(v11 + 112);
    v45 = *(float *)(v11 + 116);
    v46 = *(float *)(v11 + 120);
    v47 = *(uint64_t **)(result + 128);
    v48 = *(_QWORD *)(result + 112);
    v49 = *(_QWORD *)(result + 104) * a2 / v4 + *(_QWORD *)(result + 120);
    v50 = *(_QWORD *)(result + 36);
    result = *(unsigned __int8 *)(v11 + 157);
    v51 = *(unsigned __int8 *)(v11 + 156);
    v52 = *(unsigned __int8 *)(v11 + 155);
    v53 = *(unsigned __int8 *)(v11 + 154);
    v54 = v47[2];
    if (v54)
      v55 = (_BYTE *)(v54 + v49 * v17 + v48);
    else
      v55 = 0;
    v57 = *v47;
    v56 = v47[1];
    v58 = (_BYTE *)(v56 + v49 * v16 + v48);
    if (!v56)
      v58 = 0;
    v59 = (_BYTE *)(v57 + v49 * v15 + v48);
    v60 = *v13 + v14 * v9 + 8 * v50;
    do
    {
      if (v8)
      {
        v61 = v8;
        v62 = v55;
        v63 = v58;
        v64 = v59;
        v65 = v60;
        do
        {
          LOWORD(v29) = *(_WORD *)(v65 + 2 * v53);
          LOWORD(v28) = *(_WORD *)(v65 + 2 * v52);
          LOWORD(_S18) = *(_WORD *)(v65 + 2 * v51);
          _H0 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v19 * (float)LODWORD(v29), 0.0), 8191.0)));
          v67 = v19 * (float)LODWORD(_S18);
          __asm { FCVT            S18, H0 }
          _H0 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v19 * (float)LODWORD(v28), 0.0), 8191.0)));
          v74 = llroundf(fminf(fmaxf(v67, 0.0), 8191.0));
          __asm { FCVT            S19, H0 }
          _H0 = *(_WORD *)(v41 + 2 * v74);
          __asm { FCVT            S15, H0 }
          v78 = (float)((float)((float)(v44 * _S19) + (float)(v40 * _S18)) + (float)(v45 * _S15))
              + (float)(v46 * fmaxf(_S18, fmaxf(_S19, _S15)));
          v79 = 8191.0;
          if (v78 <= 8191.0)
          {
            v79 = v78;
            if (v78 < 0.0)
              v79 = 0.0;
          }
          _H0 = *(_WORD *)(v42 + 2 * llroundf(v79));
          __asm { FCVT            S0, H0 }
          _S6 = _S18 * _S0;
          v83 = _S19 * _S0;
          v84 = _S15 * _S0;
          v85 = (float)((float)(v32 * v83) + (float)(_S6 * v31)) + (float)(v84 * v33);
          v86 = (float)((float)(v35 * v83) + (float)(_S6 * v34)) + (float)(v84 * v36);
          _S0 = (float)((float)(v38 * v83) + (float)(_S6 * v37)) + (float)(v84 * v39);
          LOWORD(_S6) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          __asm { FCVT            S15, H6 }
          LOWORD(_S6) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          __asm { FCVT            S18, H6 }
          LOWORD(_S0) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          __asm { FCVT            S19, H0 }
          v29 = (float)((float)((float)(v26 * _S18) + (float)(v25 * _S15)) + (float)(v27 * _S19)) + v20;
          v28 = v22;
          if (v29 <= v22)
          {
            v28 = (float)((float)((float)(v26 * _S18) + (float)(v25 * _S15)) + (float)(v27 * _S19)) + v20;
            if (v29 < v20)
              v28 = v20;
          }
          v90 = *(unsigned __int16 *)(v65 + 2 * result);
          *v64++ = llroundf(v28);
          if (v63)
          {
            v91 = (float)((float)(v21 + (float)(_S15 * v97)) + (float)(_S18 * v96)) + (float)(_S19 * v95);
            v92 = v24;
            if (v91 <= v24)
            {
              v92 = (float)((float)(v21 + (float)(_S15 * v97)) + (float)(_S18 * v96)) + (float)(_S19 * v95);
              if (v91 < v23)
                v92 = v23;
            }
            v29 = (float)(v21 + (float)(_S15 * v94)) + (float)(_S18 * v93);
            _S18 = v29 + (float)(_S19 * v30);
            *v63 = llroundf(v92);
            v28 = v24;
            if (_S18 <= v24)
            {
              v28 = v29 + (float)(_S19 * v30);
              if (_S18 < v23)
                v28 = v23;
            }
            v63[1] = llroundf(v28);
            v63 += 2;
          }
          if (v62)
          {
            v29 = (float)v90 * 0.0038911;
            *v62++ = llroundf(v29);
          }
          v65 += 8;
          --v61;
        }
        while (v61);
      }
      v60 += v14;
      v59 += v15;
      v58 += v16;
      v55 += v17;
      ++v7;
    }
    while (v7 != v10);
  }
  return result;
}

uint64_t vt_Copy_l64r_TRC_Mat_TRC_444vf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_TRC_Mat_TRC_444vf_GCD);
  return 0;
}

unint64_t vt_Copy_l64r_TRC_Mat_TRC_444vf_GCD(unint64_t result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  float v9;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE *v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE *v68;
  _BYTE *v69;
  _BYTE *v70;
  unsigned int v71;
  float v82;
  float v83;
  float v87;
  float v88;
  float v89;
  float v90;

  v11 = *(_QWORD *)(result + 28);
  v12 = *(unsigned __int8 *)result;
  v13 = v11 * a2 / v12;
  v14 = (v11 + v11 * a2) / v12;
  if (v14 != v13)
  {
    v15 = 0;
    v16 = *(_QWORD *)(result + 20);
    v17 = v13 + *(_QWORD *)(result + 44);
    v18 = v14 - v13;
    v19 = *(_QWORD *)(result + 152);
    v20 = *(uint64_t **)(result + 136);
    v21 = *(_QWORD **)(result + 56);
    v22 = **(_QWORD **)(result + 64);
    v23 = *v20;
    v24 = v20[1];
    v25 = v20[2];
    v26 = 8191.0 / (float)*(unsigned int *)(v19 + 128);
    LOWORD(a5) = *(_WORD *)(v19 + 144);
    v27 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v19 + 146);
    v28 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v19 + 148);
    v29 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v19 + 150);
    v30 = (float)LODWORD(a8);
    LOWORD(a9) = *(_WORD *)(v19 + 152);
    v31 = (float)LODWORD(a9);
    v32 = *(float *)(v19 + 36);
    v33 = *(float *)(v19 + 40);
    v35 = *(float *)(v19 + 44);
    v34 = *(float *)(v19 + 48);
    v90 = v34;
    v36 = *(float *)(v19 + 52);
    v37 = *(float *)(v19 + 56);
    v38 = *(float *)(v19 + 60);
    v39 = *(float *)(v19 + 64);
    v40 = *(float *)(v19 + 68);
    v41 = *(float *)(v19 + 72);
    v42 = *(float *)(v19 + 76);
    v43 = *(float *)(v19 + 80);
    v44 = *(float *)(v19 + 84);
    v45 = *(float *)(v19 + 88);
    v46 = *(float *)(v19 + 92);
    v47 = *(float *)(v19 + 96);
    v49 = *(float *)(v19 + 100);
    v48 = *(float *)(v19 + 104);
    v50 = v19 + 164;
    v51 = v19 + 16548;
    v52 = *(uint64_t **)(result + 128);
    v53 = *(_QWORD *)(result + 112);
    v54 = *(_QWORD *)(result + 104) * a2 / v12 + *(_QWORD *)(result + 120);
    v55 = *(_QWORD *)(result + 36);
    v56 = *(unsigned __int8 *)(v19 + 157);
    result = *(unsigned __int8 *)(v19 + 156);
    v57 = *(unsigned __int8 *)(v19 + 155);
    v58 = *(unsigned __int8 *)(v19 + 154);
    v59 = v52[2];
    if (v59)
      v60 = (_BYTE *)(v59 + v54 * v25 + v53);
    else
      v60 = 0;
    v62 = *v52;
    v61 = v52[1];
    v63 = (_BYTE *)(v61 + v54 * v24 + v53);
    if (!v61)
      v63 = 0;
    v64 = (_BYTE *)(v62 + v54 * v23 + v53);
    v65 = *v21 + v22 * v17 + 8 * v55;
    do
    {
      if (v16)
      {
        v66 = v16;
        v67 = v65;
        v68 = v60;
        v69 = v63;
        v70 = v64;
        do
        {
          LOWORD(v34) = *(_WORD *)(v67 + 2 * v58);
          LOWORD(v9) = *(_WORD *)(v67 + 2 * v57);
          LOWORD(_S12) = *(_WORD *)(v67 + 2 * result);
          v71 = llroundf(fminf(fmaxf(v26 * (float)LODWORD(v34), 0.0), 8191.0));
          _S6 = v26 * (float)LODWORD(_S12);
          _H12 = *(_WORD *)(v50 + 2 * v71);
          __asm { FCVT            S12, H12 }
          _H11 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v26 * (float)LODWORD(v9), 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          LOWORD(_S6) = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          v82 = (float)((float)(v42 * _S11) + (float)(_S12 * v41)) + (float)(_S6 * v43);
          v83 = (float)((float)(v45 * _S11) + (float)(_S12 * v44)) + (float)(_S6 * v46);
          _S6 = (float)((float)(v49 * _S11) + (float)(_S12 * v47)) + (float)(_S6 * v48);
          LOWORD(_S11) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          __asm { FCVT            S12, H11 }
          LOWORD(_S11) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          __asm { FCVT            S13, H11 }
          LOWORD(_S6) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          __asm { FCVT            S14, H6 }
          v34 = (float)((float)(v33 * _S13) + (float)(v32 * _S12)) + (float)(v35 * _S14);
          v9 = v34 + v27;
          v87 = v29;
          if ((float)(v34 + v27) <= v29)
          {
            v87 = v34 + v27;
            if (v9 < v27)
              v87 = v27;
          }
          LOWORD(v9) = *(_WORD *)(v67 + 2 * v56);
          *v70++ = llroundf(v87);
          if (v69)
          {
            v88 = (float)((float)(v28 + (float)(_S12 * v90)) + (float)(_S13 * v36)) + (float)(_S14 * v37);
            v34 = v31;
            if (v88 <= v31)
            {
              v34 = (float)((float)(v28 + (float)(_S12 * v90)) + (float)(_S13 * v36)) + (float)(_S14 * v37);
              if (v88 < v30)
                v34 = v30;
            }
            _S12 = (float)((float)(v28 + (float)(_S12 * v38)) + (float)(_S13 * v39)) + (float)(_S14 * v40);
            *v69 = llroundf(v34);
            v89 = v31;
            if (_S12 <= v31)
            {
              v89 = _S12;
              if (_S12 < v30)
                v89 = v30;
            }
            v69[1] = llroundf(v89);
            v69 += 2;
          }
          if (v68)
          {
            v34 = (float)LODWORD(v9) * 0.0038911;
            *v68++ = llroundf(v34);
          }
          v67 += 8;
          --v66;
        }
        while (v66);
      }
      v65 += v22;
      v64 += v23;
      v63 += v24;
      v60 += v25;
      ++v15;
    }
    while (v15 != v18);
  }
  return result;
}

uint64_t vt_Copy_l64r_rgb_444vf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_rgb_444vf_GCD);
  return 0;
}

unint64_t vt_Copy_l64r_rgb_444vf_GCD(unint64_t result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  float v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  BOOL v52;
  _BYTE *v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  _BYTE *v59;
  _BYTE *v60;
  unsigned int v61;
  float v62;
  unsigned int v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;

  v9 = *(_QWORD *)(result + 28);
  v10 = *(unsigned __int8 *)result;
  v11 = v9 * a2 / v10;
  v12 = (v9 + v9 * a2) / v10;
  if (v12 != v11)
  {
    v13 = 0;
    v14 = *(_QWORD *)(result + 20);
    v15 = v11 + *(_QWORD *)(result + 44);
    v16 = v12 - v11;
    v17 = *(_QWORD *)(result + 152);
    v18 = *(uint64_t **)(result + 136);
    v19 = *(_QWORD **)(result + 56);
    v20 = **(_QWORD **)(result + 64);
    v21 = *v18;
    v22 = v18[1];
    v23 = v18[2];
    *(float *)&v24 = (float)*(unsigned int *)(v17 + 136);
    v25 = *(float *)&v24 / (float)*(unsigned int *)(v17 + 128);
    LOWORD(v24) = *(_WORD *)(v17 + 144);
    v26 = (float)v24;
    LOWORD(a5) = *(_WORD *)(v17 + 146);
    v27 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v17 + 148);
    v28 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v17 + 150);
    v29 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v17 + 152);
    v30 = (float)LODWORD(a8);
    v31 = *(float *)(v17 + 36);
    v32 = *(float *)(v17 + 40);
    v33 = *(float *)(v17 + 44);
    v34 = *(float *)(v17 + 48);
    v35 = *(float *)(v17 + 52);
    v36 = *(float *)(v17 + 56);
    v37 = *(float *)(v17 + 60);
    v38 = *(float *)(v17 + 64);
    v39 = *(float *)(v17 + 68);
    v40 = *(_QWORD **)(result + 128);
    v41 = *(_QWORD *)(result + 112);
    v42 = *(_QWORD *)(result + 104) * a2 / v10 + *(_QWORD *)(result + 120);
    v43 = *(_QWORD *)(result + 36);
    v44 = *(unsigned __int8 *)(v17 + 157);
    v45 = *(unsigned __int8 *)(v17 + 156);
    v46 = *(unsigned __int8 *)(v17 + 155);
    result = *(unsigned __int8 *)(v17 + 154);
    v47 = v40[2];
    if (v47)
      v48 = (_BYTE *)(v47 + v42 * v23 + v41);
    else
      v48 = 0;
    v51 = v40;
    v50 = *v40;
    v49 = v51[1];
    v52 = v49 == 0;
    v53 = (_BYTE *)(v49 + v42 * v22 + v41);
    if (v52)
      v53 = 0;
    v54 = (_BYTE *)(v50 + v42 * v21 + v41);
    v55 = *v19 + v20 * v15 + 8 * v43;
    do
    {
      if (v14)
      {
        v56 = v14;
        v57 = v55;
        v58 = v48;
        v59 = v53;
        v60 = v54;
        do
        {
          LOWORD(v8) = *(_WORD *)(v57 + 2 * result);
          *(float *)&v61 = (float)LODWORD(v8);
          v62 = v25 * *(float *)&v61;
          LOWORD(v61) = *(_WORD *)(v57 + 2 * v46);
          *(float *)&v63 = (float)v61;
          v64 = v25 * *(float *)&v63;
          LOWORD(v63) = *(_WORD *)(v57 + 2 * v45);
          v65 = v25 * (float)v63;
          v8 = (float)((float)((float)(v32 * v64) + (float)(v31 * v62)) + (float)(v33 * v65)) + v26;
          v66 = v28;
          if (v8 <= v28)
          {
            v66 = (float)((float)((float)(v32 * v64) + (float)(v31 * v62)) + (float)(v33 * v65)) + v26;
            if (v8 < v26)
              v66 = v26;
          }
          LOWORD(v8) = *(_WORD *)(v57 + 2 * v44);
          *v60++ = llroundf(v66);
          if (v59)
          {
            v67 = (float)((float)(v27 + (float)(v62 * v34)) + (float)(v64 * v35)) + (float)(v65 * v36);
            v68 = v30;
            if (v67 <= v30)
            {
              v68 = (float)((float)(v27 + (float)(v62 * v34)) + (float)(v64 * v35)) + (float)(v65 * v36);
              if (v67 < v29)
                v68 = v29;
            }
            v69 = (float)((float)(v27 + (float)(v62 * v37)) + (float)(v64 * v38)) + (float)(v65 * v39);
            *v59 = llroundf(v68);
            v70 = v30;
            if (v69 <= v30)
            {
              v70 = v69;
              if (v69 < v29)
                v70 = v29;
            }
            v59[1] = llroundf(v70);
            v59 += 2;
          }
          if (v58)
          {
            v8 = (float)LODWORD(v8) * 0.0038911;
            *v58++ = llroundf(v8);
          }
          v57 += 8;
          --v56;
        }
        while (v56);
      }
      v55 += v20;
      v54 += v21;
      v53 += v22;
      v48 += v23;
      ++v13;
    }
    while (v13 != v16);
  }
  return result;
}

uint64_t vt_Copy_l64r_TRC_Tone_Mat_TRC_xf444(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_TRC_Tone_Mat_TRC_xf444_GCD);
  return 0;
}

unint64_t vt_Copy_l64r_TRC_Tone_Mat_TRC_xf444_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float v46;
  float v47;
  float v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unsigned int v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  _WORD *v67;
  _WORD *v68;
  _WORD *v69;
  uint64_t v70;
  float v72;
  unsigned int v79;
  float v83;
  float v84;
  float v88;
  float v89;
  float v90;
  float v91;
  __int16 v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;

  v3 = *(_QWORD *)(result + 28);
  v4 = *(unsigned __int8 *)result;
  v5 = v3 * a2 / v4;
  v6 = (v3 + v3 * a2) / v4;
  if (v6 != v5)
  {
    v7 = 0;
    v8 = *(_QWORD *)(result + 20);
    v9 = v5 + *(_QWORD *)(result + 44);
    v10 = v6 - v5;
    v11 = *(_QWORD *)(result + 152);
    v12 = *(uint64_t **)(result + 136);
    v13 = *(_QWORD **)(result + 56);
    v14 = **(_QWORD **)(result + 64);
    v15 = *v12;
    v16 = v12[1];
    v17 = v12[2];
    *(float *)&v18 = (float)*(unsigned int *)(v11 + 128);
    v19 = 8191.0 / *(float *)&v18;
    LOWORD(v18) = *(_WORD *)(v11 + 144);
    v20 = (float)v18;
    LOWORD(v18) = *(_WORD *)(v11 + 146);
    v21 = (float)v18;
    LOWORD(v18) = *(_WORD *)(v11 + 148);
    v22 = (float)v18;
    LOWORD(v18) = *(_WORD *)(v11 + 150);
    v23 = (float)v18;
    LOWORD(v18) = *(_WORD *)(v11 + 152);
    v24 = (float)v18;
    v25 = *(float *)(v11 + 36);
    v26 = *(float *)(v11 + 40);
    v28 = *(float *)(v11 + 44);
    v27 = *(float *)(v11 + 48);
    v99 = *(float *)(v11 + 52);
    v100 = v27;
    v29 = *(float *)(v11 + 56);
    v30 = *(float *)(v11 + 60);
    v98 = v29;
    v31 = *(float *)(v11 + 64);
    v32 = *(float *)(v11 + 68);
    v33 = *(float *)(v11 + 72);
    v34 = *(float *)(v11 + 76);
    v35 = *(float *)(v11 + 80);
    v36 = *(float *)(v11 + 84);
    v37 = *(float *)(v11 + 88);
    v38 = *(float *)(v11 + 92);
    v39 = *(float *)(v11 + 96);
    v40 = *(float *)(v11 + 100);
    v41 = *(float *)(v11 + 104);
    v42 = *(float *)(v11 + 108);
    v43 = v11 + 164;
    v44 = v11 + 16548;
    v45 = v11 + 32932;
    v46 = *(float *)(v11 + 112);
    v47 = *(float *)(v11 + 116);
    v48 = *(float *)(v11 + 120);
    v49 = *(uint64_t **)(result + 128);
    v50 = *(_QWORD *)(result + 112);
    v51 = *(_QWORD *)(result + 104) * a2 / v4 + *(_QWORD *)(result + 120);
    v52 = *(_QWORD *)(result + 36);
    v53 = *(unsigned __int8 *)(v11 + 132);
    if (v53 >= 0x11)
      v54 = 0;
    else
      v54 = 16 - v53;
    result = *(unsigned __int8 *)(v11 + 157);
    v55 = *(unsigned __int8 *)(v11 + 156);
    v56 = *(unsigned __int8 *)(v11 + 155);
    v57 = *(unsigned __int8 *)(v11 + 154);
    v58 = v49[2];
    if (v58)
      v59 = v58 + v51 * v17 + 2 * v50;
    else
      v59 = 0;
    v61 = *v49;
    v60 = v49[1];
    v62 = v60 + v51 * v16 + 2 * v50;
    if (!v60)
      v62 = 0;
    v63 = v61 + v51 * v15 + 2 * v50;
    v64 = *v13 + v14 * v9 + 8 * v52;
    v65 = v54;
    do
    {
      if (v8)
      {
        v66 = v8;
        v67 = (_WORD *)v59;
        v68 = (_WORD *)v62;
        v69 = (_WORD *)v63;
        v70 = v64;
        do
        {
          LOWORD(v29) = *(_WORD *)(v70 + 2 * v57);
          LOWORD(v27) = *(_WORD *)(v70 + 2 * v56);
          LOWORD(_S18) = *(_WORD *)(v70 + 2 * v55);
          _H0 = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v19 * (float)LODWORD(v29), 0.0), 8191.0)));
          v72 = v19 * (float)LODWORD(_S18);
          __asm { FCVT            S18, H0 }
          _H0 = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v19 * (float)LODWORD(v27), 0.0), 8191.0)));
          v79 = llroundf(fminf(fmaxf(v72, 0.0), 8191.0));
          __asm { FCVT            S14, H0 }
          _H0 = *(_WORD *)(v43 + 2 * v79);
          __asm { FCVT            S15, H0 }
          v83 = (float)((float)((float)(v46 * _S14) + (float)(v42 * _S18)) + (float)(v47 * _S15))
              + (float)(v48 * fmaxf(_S18, fmaxf(_S14, _S15)));
          v84 = 8191.0;
          if (v83 <= 8191.0)
          {
            v84 = v83;
            if (v83 < 0.0)
              v84 = 0.0;
          }
          _H0 = *(_WORD *)(v44 + 2 * llroundf(v84));
          __asm { FCVT            S0, H0 }
          _S6 = _S18 * _S0;
          v88 = _S14 * _S0;
          v89 = _S15 * _S0;
          v90 = (float)((float)(v34 * v88) + (float)(_S6 * v33)) + (float)(v89 * v35);
          v91 = (float)((float)(v37 * v88) + (float)(_S6 * v36)) + (float)(v89 * v38);
          _S0 = (float)((float)(v40 * v88) + (float)(_S6 * v39)) + (float)(v89 * v41);
          LOWORD(_S6) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          __asm { FCVT            S14, H6 }
          LOWORD(_S6) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          __asm { FCVT            S15, H6 }
          LOWORD(_S0) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          __asm { FCVT            S18, H0 }
          v29 = (float)((float)((float)(v26 * _S15) + (float)(v25 * _S14)) + (float)(v28 * _S18)) + v20;
          v27 = v22;
          if (v29 <= v22)
          {
            v27 = (float)((float)((float)(v26 * _S15) + (float)(v25 * _S14)) + (float)(v28 * _S18)) + v20;
            if (v29 < v20)
              v27 = v20;
          }
          v95 = *(_WORD *)(v70 + 2 * result);
          *v69++ = llroundf(v27) << v65;
          if (v68)
          {
            v96 = (float)((float)(v21 + (float)(_S14 * v100)) + (float)(_S15 * v99)) + (float)(_S18 * v98);
            v97 = v24;
            if (v96 <= v24)
            {
              v97 = (float)((float)(v21 + (float)(_S14 * v100)) + (float)(_S15 * v99)) + (float)(_S18 * v98);
              if (v96 < v23)
                v97 = v23;
            }
            v29 = (float)(v21 + (float)(_S14 * v30)) + (float)(_S15 * v31);
            _S18 = v29 + (float)(_S18 * v32);
            *v68 = llroundf(v97) << v65;
            v27 = v24;
            if (_S18 <= v24)
            {
              v27 = _S18;
              if (_S18 < v23)
                v27 = v23;
            }
            v68[1] = llroundf(v27) << v65;
            v68 += 2;
          }
          if (v67)
            *v67++ = v95;
          v70 += 8;
          --v66;
        }
        while (v66);
      }
      v64 += v14;
      v63 += v15;
      v62 += v16;
      v59 += v17;
      ++v7;
    }
    while (v7 != v10);
  }
  return result;
}

uint64_t vt_Copy_l64r_TRC_Mat_TRC_xf444(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_TRC_Mat_TRC_xf444_GCD);
  return 0;
}

unint64_t vt_Copy_l64r_TRC_Mat_TRC_xf444_GCD(unint64_t result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unsigned int v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  _WORD *v72;
  _WORD *v73;
  _WORD *v74;
  unsigned int v75;
  float v86;
  float v87;
  float v89;
  float v90;
  __int16 v91;
  float v92;
  float v93;

  v12 = *(_QWORD *)(result + 28);
  v13 = *(unsigned __int8 *)result;
  v14 = v12 * a2 / v13;
  v15 = (v12 + v12 * a2) / v13;
  if (v15 != v14)
  {
    v16 = 0;
    v17 = *(_QWORD *)(result + 20);
    v18 = v14 + *(_QWORD *)(result + 44);
    v19 = v15 - v14;
    v20 = *(_QWORD *)(result + 152);
    v21 = *(uint64_t **)(result + 136);
    v22 = *(_QWORD **)(result + 56);
    v23 = **(_QWORD **)(result + 64);
    v24 = *v21;
    v25 = v21[1];
    v26 = v21[2];
    v27 = 8191.0 / (float)*(unsigned int *)(v20 + 128);
    LOWORD(a5) = *(_WORD *)(v20 + 144);
    v28 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v20 + 146);
    v29 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v20 + 148);
    v30 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v20 + 150);
    v31 = (float)LODWORD(a8);
    LOWORD(a9) = *(_WORD *)(v20 + 152);
    v32 = (float)LODWORD(a9);
    v33 = *(float *)(v20 + 36);
    v34 = *(float *)(v20 + 40);
    v35 = *(float *)(v20 + 44);
    v36 = *(float *)(v20 + 48);
    v37 = *(float *)(v20 + 52);
    v38 = *(float *)(v20 + 56);
    v39 = *(float *)(v20 + 60);
    v40 = *(float *)(v20 + 64);
    v41 = *(float *)(v20 + 68);
    v42 = *(float *)(v20 + 72);
    v43 = *(float *)(v20 + 76);
    v44 = *(float *)(v20 + 80);
    v45 = *(float *)(v20 + 84);
    v46 = *(float *)(v20 + 88);
    v47 = *(float *)(v20 + 92);
    v48 = *(float *)(v20 + 96);
    v50 = *(float *)(v20 + 100);
    v49 = *(float *)(v20 + 104);
    v51 = v20 + 164;
    v52 = v20 + 16548;
    v53 = *(uint64_t **)(result + 128);
    v54 = *(_QWORD *)(result + 112);
    v55 = *(_QWORD *)(result + 104) * a2 / v13 + *(_QWORD *)(result + 120);
    v56 = *(_QWORD *)(result + 36);
    v57 = *(unsigned __int8 *)(v20 + 132);
    if (v57 >= 0x11)
      v58 = 0;
    else
      v58 = 16 - v57;
    v59 = *(unsigned __int8 *)(v20 + 157);
    result = *(unsigned __int8 *)(v20 + 156);
    v60 = *(unsigned __int8 *)(v20 + 155);
    v61 = *(unsigned __int8 *)(v20 + 154);
    v62 = v53[2];
    if (v62)
      v63 = v62 + v55 * v26 + 2 * v54;
    else
      v63 = 0;
    v65 = *v53;
    v64 = v53[1];
    v66 = v64 + v55 * v25 + 2 * v54;
    if (!v64)
      v66 = 0;
    v67 = v65 + v55 * v24 + 2 * v54;
    v68 = *v22 + v23 * v18 + 8 * v56;
    v69 = v58;
    do
    {
      if (v17)
      {
        v70 = v17;
        v71 = v68;
        v72 = (_WORD *)v63;
        v73 = (_WORD *)v66;
        v74 = (_WORD *)v67;
        do
        {
          LOWORD(_S10) = *(_WORD *)(v71 + 2 * v61);
          LOWORD(_S11) = *(_WORD *)(v71 + 2 * v60);
          LOWORD(_S12) = *(_WORD *)(v71 + 2 * result);
          v75 = llroundf(fminf(fmaxf(v27 * (float)LODWORD(_S10), 0.0), 8191.0));
          _S10 = v27 * (float)LODWORD(_S12);
          _H12 = *(_WORD *)(v51 + 2 * v75);
          __asm { FCVT            S12, H12 }
          _H11 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v27 * (float)LODWORD(_S11), 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          LOWORD(_S10) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(_S10, 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          v86 = (float)((float)(v43 * _S11) + (float)(_S12 * v42)) + (float)(_S10 * v44);
          v87 = (float)((float)(v46 * _S11) + (float)(_S12 * v45)) + (float)(_S10 * v47);
          _S12 = (float)((float)(v50 * _S11) + (float)(_S12 * v48)) + (float)(_S10 * v49);
          LOWORD(_S10) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          LOWORD(_S11) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          LOWORD(_S12) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S12, 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          v89 = (float)((float)((float)(v34 * _S11) + (float)(v33 * _S10)) + (float)(v35 * _S12)) + v28;
          v90 = v30;
          if (v89 <= v30)
          {
            v90 = (float)((float)((float)(v34 * _S11) + (float)(v33 * _S10)) + (float)(v35 * _S12)) + v28;
            if (v89 < v28)
              v90 = v28;
          }
          v91 = *(_WORD *)(v71 + 2 * v59);
          *v74++ = llroundf(v90) << v69;
          if (v73)
          {
            v92 = (float)((float)(v29 + (float)(_S10 * v36)) + (float)(_S11 * v37)) + (float)(_S12 * v38);
            v93 = v32;
            if (v92 <= v32)
            {
              v93 = (float)((float)(v29 + (float)(_S10 * v36)) + (float)(_S11 * v37)) + (float)(_S12 * v38);
              if (v92 < v31)
                v93 = v31;
            }
            _S10 = (float)((float)(v29 + (float)(_S10 * v39)) + (float)(_S11 * v40)) + (float)(_S12 * v41);
            *v73 = llroundf(v93) << v69;
            _S11 = v32;
            if (_S10 <= v32)
            {
              _S11 = _S10;
              if (_S10 < v31)
                _S11 = v31;
            }
            v73[1] = llroundf(_S11) << v69;
            v73 += 2;
          }
          if (v72)
            *v72++ = v91;
          v71 += 8;
          --v70;
        }
        while (v70);
      }
      v68 += v23;
      v67 += v24;
      v66 += v25;
      v63 += v26;
      ++v16;
    }
    while (v16 != v19);
  }
  return result;
}

uint64_t vt_Copy_l64r_rgb_xf444(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_rgb_xf444_GCD);
  return 0;
}

unint64_t vt_Copy_l64r_rgb_xf444_GCD(unint64_t result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  float v8;
  float v9;
  float v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unsigned int v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  _WORD *v63;
  _WORD *v64;
  _WORD *v65;
  float v66;
  float v67;
  __int16 v68;
  float v69;
  float v70;

  v11 = *(_QWORD *)(result + 28);
  v12 = *(unsigned __int8 *)result;
  v13 = v11 * a2 / v12;
  v14 = (v11 + v11 * a2) / v12;
  if (v14 != v13)
  {
    v15 = 0;
    v16 = *(_QWORD *)(result + 20);
    v17 = v13 + *(_QWORD *)(result + 44);
    v18 = v14 - v13;
    v19 = *(_QWORD *)(result + 152);
    v20 = *(uint64_t **)(result + 136);
    v21 = *(_QWORD **)(result + 56);
    v22 = **(_QWORD **)(result + 64);
    v23 = *v20;
    v24 = v20[1];
    v25 = v20[2];
    *(float *)&v26 = (float)*(unsigned int *)(v19 + 136);
    v27 = *(float *)&v26 / (float)*(unsigned int *)(v19 + 128);
    LOWORD(v26) = *(_WORD *)(v19 + 144);
    v28 = (float)v26;
    LOWORD(a5) = *(_WORD *)(v19 + 146);
    v29 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v19 + 148);
    v30 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v19 + 150);
    v31 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v19 + 152);
    v32 = (float)LODWORD(a8);
    v33 = *(float *)(v19 + 36);
    v34 = *(float *)(v19 + 40);
    v35 = *(float *)(v19 + 44);
    v36 = *(float *)(v19 + 48);
    v37 = *(float *)(v19 + 52);
    v38 = *(float *)(v19 + 56);
    v39 = *(float *)(v19 + 60);
    v40 = *(float *)(v19 + 64);
    v41 = *(float *)(v19 + 68);
    v42 = *(_QWORD **)(result + 128);
    v43 = *(_QWORD *)(result + 112);
    v44 = *(_QWORD *)(result + 104) * a2 / v12 + *(_QWORD *)(result + 120);
    v45 = *(_QWORD *)(result + 36);
    v46 = *(unsigned __int8 *)(v19 + 132);
    if (v46 >= 0x11)
      v47 = 0;
    else
      v47 = 16 - v46;
    v48 = *(unsigned __int8 *)(v19 + 157);
    v49 = *(unsigned __int8 *)(v19 + 156);
    v50 = *(unsigned __int8 *)(v19 + 155);
    result = *(unsigned __int8 *)(v19 + 154);
    v51 = v42[2];
    if (v51)
      v52 = v51 + v44 * v25 + 2 * v43;
    else
      v52 = 0;
    v55 = v42;
    v54 = *v42;
    v53 = v55[1];
    v56 = v53 == 0;
    v57 = v53 + v44 * v24 + 2 * v43;
    if (v56)
      v57 = 0;
    v58 = v54 + v44 * v23 + 2 * v43;
    v59 = *v21 + v22 * v17 + 8 * v45;
    v60 = v47;
    do
    {
      if (v16)
      {
        v61 = v16;
        v62 = v59;
        v63 = (_WORD *)v52;
        v64 = (_WORD *)v57;
        v65 = (_WORD *)v58;
        do
        {
          LOWORD(v8) = *(_WORD *)(v62 + 2 * result);
          v8 = v27 * (float)LODWORD(v8);
          LOWORD(v9) = *(_WORD *)(v62 + 2 * v50);
          v9 = v27 * (float)LODWORD(v9);
          LOWORD(v10) = *(_WORD *)(v62 + 2 * v49);
          v10 = v27 * (float)LODWORD(v10);
          v66 = (float)((float)((float)(v34 * v9) + (float)(v33 * v8)) + (float)(v35 * v10)) + v28;
          v67 = v30;
          if (v66 <= v30)
          {
            v67 = (float)((float)((float)(v34 * v9) + (float)(v33 * v8)) + (float)(v35 * v10)) + v28;
            if (v66 < v28)
              v67 = v28;
          }
          v68 = *(_WORD *)(v62 + 2 * v48);
          *v65++ = llroundf(v67) << v60;
          if (v64)
          {
            v69 = (float)((float)(v29 + (float)(v8 * v36)) + (float)(v9 * v37)) + (float)(v10 * v38);
            v70 = v32;
            if (v69 <= v32)
            {
              v70 = (float)((float)(v29 + (float)(v8 * v36)) + (float)(v9 * v37)) + (float)(v10 * v38);
              if (v69 < v31)
                v70 = v31;
            }
            v8 = (float)((float)(v29 + (float)(v8 * v39)) + (float)(v9 * v40)) + (float)(v10 * v41);
            *v64 = llroundf(v70) << v60;
            v9 = v32;
            if (v8 <= v32)
            {
              v9 = v8;
              if (v8 < v31)
                v9 = v31;
            }
            v64[1] = llroundf(v9) << v60;
            v64 += 2;
          }
          if (v63)
            *v63++ = v68;
          v62 += 8;
          --v61;
        }
        while (v61);
      }
      v59 += v22;
      v58 += v23;
      v57 += v24;
      v52 += v25;
      ++v15;
    }
    while (v15 != v18);
  }
  return result;
}

uint64_t vt_Copy_l64r_TRC_Tone_Mat_TRC_BGRA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_TRC_Tone_Mat_TRC_BGRA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_l64r_TRC_Tone_Mat_TRC_BGRA_GCD(unsigned __int8 *result, uint64_t a2)
{
  float v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float v61;
  float v62;
  float v65;
  float v66;
  float v67;
  float v70;
  unsigned int v71;
  float v72;
  float v73;

  v5 = *(_QWORD *)(result + 28);
  v6 = *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = v7 + *(_QWORD *)(result + 44);
    v12 = v8 - v7;
    v13 = *((_QWORD *)result + 19);
    v14 = (_QWORD *)*((_QWORD *)result + 7);
    v15 = **((_QWORD **)result + 8);
    v16 = **((_QWORD **)result + 17);
    v17 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    v18 = *(float *)(v13 + 72);
    v19 = *(float *)(v13 + 76);
    v20 = *(float *)(v13 + 80);
    v21 = *(float *)(v13 + 84);
    v22 = *(float *)(v13 + 88);
    v23 = *(float *)(v13 + 92);
    v24 = *(float *)(v13 + 96);
    v25 = *(float *)(v13 + 100);
    v26 = v13 + 164;
    v27 = v13 + 16548;
    v28 = v13 + 32932;
    v29 = *(float *)(v13 + 104);
    v30 = *(float *)(v13 + 108);
    v31 = *(float *)(v13 + 112);
    v32 = *(float *)(v13 + 116);
    v33 = *(float *)(v13 + 120);
    v34 = (_QWORD *)*((_QWORD *)result + 16);
    v35 = *((_QWORD *)result + 14);
    v36 = *((_QWORD *)result + 13) * a2 / v6 + *((_QWORD *)result + 15);
    v37 = *(_QWORD *)(result + 36);
    v38 = *(unsigned __int8 *)(v13 + 161);
    v39 = *(unsigned __int8 *)(v13 + 160);
    result = (unsigned __int8 *)*(unsigned __int8 *)(v13 + 159);
    v40 = *(unsigned __int8 *)(v13 + 158);
    v41 = *(unsigned __int8 *)(v13 + 157);
    v42 = *(unsigned __int8 *)(v13 + 156);
    v43 = *v34 + v36 * v16;
    v44 = *(unsigned __int8 *)(v13 + 155);
    v45 = *(unsigned __int8 *)(v13 + 154);
    v46 = v43 + 4 * v35;
    v47 = *v14 + v15 * v11 + 8 * v37;
    do
    {
      if (v10)
      {
        v48 = v10;
        v49 = v47;
        v50 = v46;
        do
        {
          LOWORD(v2) = *(_WORD *)(v49 + 2 * v45);
          LOWORD(_S26) = *(_WORD *)(v49 + 2 * v44);
          LOWORD(_S27) = *(_WORD *)(v49 + 2 * v42);
          _H25 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(v2), 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          _H26 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(_S26), 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(_S27), 0.0), 8191.0)));
          __asm { FCVT            S28, H27 }
          v61 = (float)((float)((float)(v31 * _S26) + (float)(v30 * _S25)) + (float)(v32 * _S28))
              + (float)(v33 * fmaxf(_S25, fmaxf(_S26, _S28)));
          v62 = 8191.0;
          if (v61 <= 8191.0)
          {
            v62 = v61;
            if (v61 < 0.0)
              v62 = 0.0;
          }
          _H27 = *(_WORD *)(v27 + 2 * llroundf(v62));
          __asm { FCVT            S29, H27 }
          v65 = _S25 * _S29;
          v66 = _S26 * _S29;
          v67 = _S28 * _S29;
          _H28 = *(_WORD *)(v28
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v19 * v66) + (float)(v65 * v18)) + (float)((float)(_S28 * _S29) * v20), 0.0), 8191.0)));
          __asm { FCVT            S29, H28 }
          v70 = 255.0;
          if (_S29 <= 255.0)
          {
            v70 = _S29;
            if (_S29 < 0.0)
              v70 = 0.0;
          }
          v71 = *(unsigned __int16 *)(v49 + 2 * v41);
          v72 = (float)((float)(v22 * v66) + (float)(v65 * v21)) + (float)(v67 * v23);
          v73 = (float)((float)(v25 * v66) + (float)(v65 * v24)) + (float)(v67 * v29);
          _H26 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          _H25 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          *(_BYTE *)(v50 + v40) = llroundf(v70);
          __asm { FCVT            S28, H26 }
          _S27 = 255.0;
          if (_S28 <= 255.0)
          {
            if (_S28 >= 0.0)
              __asm { FCVT            S27, H26 }
            else
              _S27 = 0.0;
          }
          result[v50] = llroundf(_S27);
          __asm { FCVT            S27, H25 }
          _S26 = 255.0;
          if (_S27 <= 255.0)
          {
            if (_S27 >= 0.0)
              __asm { FCVT            S26, H25 }
            else
              _S26 = 0.0;
          }
          v49 += 8;
          v2 = (float)v71 * 0.0038911;
          *(_BYTE *)(v50 + v39) = llroundf(_S26);
          *(_BYTE *)(v50 + v38) = llroundf(v2);
          v50 += 4;
          --v48;
        }
        while (v48);
      }
      v47 += v15;
      v46 += v16;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_l64r_TRC_Mat_TRC_BGRA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_TRC_Mat_TRC_BGRA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_l64r_TRC_Mat_TRC_BGRA_GCD(unsigned __int8 *result, uint64_t a2)
{
  float v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float v58;
  float v59;
  float v60;
  float v62;

  v5 = *(_QWORD *)(result + 28);
  v6 = *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = v7 + *(_QWORD *)(result + 44);
    v12 = v8 - v7;
    v13 = *((_QWORD *)result + 19);
    v14 = (_QWORD *)*((_QWORD *)result + 7);
    v15 = **((_QWORD **)result + 8);
    v16 = **((_QWORD **)result + 17);
    v17 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    v18 = *(float *)(v13 + 72);
    v19 = *(float *)(v13 + 76);
    v20 = *(float *)(v13 + 80);
    v21 = *(float *)(v13 + 84);
    v22 = *(float *)(v13 + 88);
    v23 = *(float *)(v13 + 92);
    v24 = *(float *)(v13 + 96);
    v25 = *(float *)(v13 + 100);
    v26 = *(float *)(v13 + 104);
    v27 = v13 + 164;
    v28 = v13 + 16548;
    v29 = (_QWORD *)*((_QWORD *)result + 16);
    v30 = *((_QWORD *)result + 14);
    v31 = *((_QWORD *)result + 13) * a2 / v6 + *((_QWORD *)result + 15);
    v32 = *(_QWORD *)(result + 36);
    v33 = *(unsigned __int8 *)(v13 + 161);
    v34 = *(unsigned __int8 *)(v13 + 160);
    v35 = *(unsigned __int8 *)(v13 + 159);
    result = (unsigned __int8 *)*(unsigned __int8 *)(v13 + 158);
    v36 = *(unsigned __int8 *)(v13 + 157);
    v37 = *(unsigned __int8 *)(v13 + 156);
    v38 = *v29 + v31 * v16;
    v39 = *(unsigned __int8 *)(v13 + 155);
    v40 = *(unsigned __int8 *)(v13 + 154);
    v41 = v38 + 4 * v30;
    v42 = *v14 + v15 * v11 + 8 * v32;
    do
    {
      if (v10)
      {
        v43 = v10;
        v44 = v42;
        v45 = v41;
        do
        {
          LOWORD(v2) = *(_WORD *)(v44 + 2 * v40);
          LOWORD(_S22) = *(_WORD *)(v44 + 2 * v39);
          LOWORD(_S23) = *(_WORD *)(v44 + 2 * v37);
          _H21 = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(v2), 0.0), 8191.0)));
          __asm { FCVT            S21, H21 }
          _H22 = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(_S22), 0.0), 8191.0)));
          __asm { FCVT            S22, H22 }
          _H23 = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(_S23), 0.0), 8191.0)));
          __asm { FCVT            S23, H23 }
          _H24 = *(_WORD *)(v28
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v19 * _S22) + (float)(_S21 * v18)) + (float)(_S23 * v20), 0.0), 8191.0)));
          __asm { FCVT            S25, H24 }
          v58 = 255.0;
          if (_S25 <= 255.0)
          {
            v58 = _S25;
            if (_S25 < 0.0)
              v58 = 0.0;
          }
          v59 = (float)((float)(v22 * _S22) + (float)(_S21 * v21)) + (float)(_S23 * v23);
          v60 = (float)((float)(v25 * _S22) + (float)(_S21 * v24)) + (float)(_S23 * v26);
          _S22 = fminf(fmaxf(v59, 0.0), 8191.0);
          _H23 = *(_WORD *)(v28 + 2 * llroundf(_S22));
          v62 = fminf(fmaxf(v60, 0.0), 8191.0);
          LOWORD(_S22) = *(_WORD *)(v28 + 2 * llroundf(v62));
          LOWORD(v62) = *(_WORD *)(v44 + 2 * v36);
          result[v45] = llroundf(v58);
          __asm { FCVT            S25, H23 }
          _S24 = 255.0;
          if (_S25 <= 255.0)
          {
            if (_S25 >= 0.0)
              __asm { FCVT            S24, H23 }
            else
              _S24 = 0.0;
          }
          *(_BYTE *)(v45 + v35) = llroundf(_S24);
          __asm { FCVT            S24, H22 }
          _S23 = 255.0;
          if (_S24 <= 255.0)
          {
            if (_S24 >= 0.0)
              __asm { FCVT            S23, H22 }
            else
              _S23 = 0.0;
          }
          v44 += 8;
          v2 = (float)LODWORD(v62) * 0.0038911;
          *(_BYTE *)(v45 + v34) = llroundf(_S23);
          *(_BYTE *)(v45 + v33) = llroundf(v2);
          v45 += 4;
          --v43;
        }
        while (v43);
      }
      v42 += v15;
      v41 += v16;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_l64r_rgb_BGRA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_rgb_BGRA_GCD);
  return 0;
}

unint64_t vt_Copy_l64r_rgb_BGRA_GCD(unint64_t result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  char v41;
  float v42;

  v6 = *(_QWORD *)(result + 28);
  v7 = *(unsigned __int8 *)result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)(result + 20);
    v12 = v8 + *(_QWORD *)(result + 44);
    v13 = v9 - v8;
    v14 = *(_QWORD *)(result + 152);
    v15 = *(_QWORD **)(result + 128);
    v16 = *(_QWORD **)(result + 56);
    v17 = **(_QWORD **)(result + 64);
    v18 = **(_QWORD **)(result + 136);
    v19 = (float)*(unsigned int *)(v14 + 136) / (float)*(unsigned int *)(v14 + 128);
    v20 = *(_QWORD *)(result + 112);
    v21 = *(_QWORD *)(result + 104) * a2 / v7 + *(_QWORD *)(result + 120);
    v22 = *(_QWORD *)(result + 36);
    v23 = *(unsigned __int8 *)(v14 + 161);
    v24 = *(unsigned __int8 *)(v14 + 160);
    v25 = *(unsigned __int8 *)(v14 + 159);
    v26 = *(unsigned __int8 *)(v14 + 158);
    v27 = *(unsigned __int8 *)(v14 + 157);
    result = *(unsigned __int8 *)(v14 + 156);
    v28 = *v15 + v21 * v18;
    v29 = *(unsigned __int8 *)(v14 + 155);
    v30 = *(unsigned __int8 *)(v14 + 154);
    v31 = v28 + 4 * v20;
    v32 = *v16 + v17 * v12 + 8 * v22;
    do
    {
      if (v11)
      {
        v33 = v11;
        v34 = v32;
        v35 = v31;
        do
        {
          LOWORD(a5) = *(_WORD *)(v34 + 2 * v30);
          v36 = v19 * (float)LODWORD(a5);
          v37 = 255.0;
          if (v36 <= 255.0)
          {
            v37 = v36;
            if (v36 < 0.0)
              v37 = 0.0;
          }
          LOWORD(v36) = *(_WORD *)(v34 + 2 * v29);
          v38 = (float)LODWORD(v36);
          LOWORD(a6) = *(_WORD *)(v34 + 2 * result);
          LOWORD(v36) = *(_WORD *)(v34 + 2 * v27);
          v39 = v19 * v38;
          *(_BYTE *)(v35 + v26) = llroundf(v37);
          v40 = 255.0;
          if (v39 <= 255.0)
          {
            v40 = v39;
            if (v39 < 0.0)
              v40 = 0.0;
          }
          v41 = llroundf(v40);
          v42 = v19 * (float)LODWORD(a6);
          *(_BYTE *)(v35 + v25) = v41;
          a6 = 255.0;
          if (v42 <= 255.0)
          {
            a6 = v42;
            if (v42 < 0.0)
              a6 = 0.0;
          }
          v34 += 8;
          a5 = (float)LODWORD(v36) * 0.0038911;
          *(_BYTE *)(v35 + v24) = llroundf(a6);
          *(_BYTE *)(v35 + v23) = llroundf(a5);
          v35 += 4;
          --v33;
        }
        while (v33);
      }
      v32 += v17;
      v31 += v18;
      ++v10;
    }
    while (v10 != v13);
  }
  return result;
}

uint64_t vt_Copy_l64r_TRC_Tone_Mat_TRC_l10r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_TRC_Tone_Mat_TRC_l10r_GCD);
  return 0;
}

unint64_t vt_Copy_l64r_TRC_Tone_Mat_TRC_l10r_GCD(unint64_t result, uint64_t a2, double a3, double a4, float a5)
{
  float v5;
  float v6;
  float v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  uint64_t v49;
  unsigned int v57;
  float v61;
  float v62;
  float v65;
  float v66;
  float v67;
  float v70;
  BOOL v71;
  float v72;
  float v75;
  float v76;
  float v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;

  v8 = *(_QWORD *)(result + 28);
  v9 = *(unsigned __int8 *)result;
  v10 = v8 * a2 / v9;
  v11 = (v8 + v8 * a2) / v9;
  if (v11 != v10)
  {
    v12 = 0;
    v13 = *(_QWORD *)(result + 20);
    v14 = v10 + *(_QWORD *)(result + 44);
    v15 = v11 - v10;
    v16 = *(_QWORD *)(result + 152);
    v17 = *(_QWORD **)(result + 56);
    v18 = **(_QWORD **)(result + 64);
    v19 = **(_QWORD **)(result + 136);
    v20 = 8191.0 / (float)*(unsigned int *)(v16 + 128);
    LOWORD(a5) = *(_WORD *)(v16 + 144);
    v21 = (float)LODWORD(a5);
    v22 = *(float *)(v16 + 72);
    v23 = *(float *)(v16 + 76);
    v24 = *(float *)(v16 + 80);
    v25 = *(float *)(v16 + 84);
    v26 = *(float *)(v16 + 88);
    v27 = *(float *)(v16 + 92);
    v28 = *(float *)(v16 + 96);
    v29 = *(float *)(v16 + 100);
    v30 = v16 + 164;
    v31 = v16 + 16548;
    v32 = v16 + 32932;
    v33 = *(float *)(v16 + 104);
    v34 = *(float *)(v16 + 108);
    v35 = *(float *)(v16 + 112);
    v36 = *(float *)(v16 + 116);
    v37 = *(float *)(v16 + 120);
    v38 = *(_QWORD *)(result + 112);
    v39 = *(_QWORD *)(result + 104) * a2 / v9 + *(_QWORD *)(result + 120);
    v40 = *(_QWORD *)(result + 36);
    v41 = *(unsigned __int8 *)(v16 + 157);
    v42 = *(unsigned __int8 *)(v16 + 156);
    v43 = **(_QWORD **)(result + 128) + v39 * v19;
    result = *(unsigned __int8 *)(v16 + 155);
    v44 = *(unsigned __int8 *)(v16 + 154);
    v45 = (unsigned int *)(v43 + 16 * v38);
    v46 = *v17 + v18 * v14 + 8 * v40;
    do
    {
      if (v13)
      {
        v47 = v13;
        v48 = v45;
        v49 = v46;
        do
        {
          LOWORD(v5) = *(_WORD *)(v49 + 2 * v44);
          LOWORD(v6) = *(_WORD *)(v49 + 2 * result);
          LOWORD(v7) = *(_WORD *)(v49 + 2 * v42);
          _H29 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v20 * (float)LODWORD(v5), 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          _H30 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v20 * (float)LODWORD(v6), 0.0), 8191.0)));
          v57 = llroundf(fminf(fmaxf(v20 * (float)LODWORD(v7), 0.0), 8191.0));
          __asm { FCVT            S31, H30 }
          _H30 = *(_WORD *)(v30 + 2 * v57);
          __asm { FCVT            S9, H30 }
          v61 = (float)((float)((float)(v35 * _S31) + (float)(v34 * _S29)) + (float)(v36 * _S9))
              + (float)(v37 * fmaxf(_S29, fmaxf(_S31, _S9)));
          v62 = 8191.0;
          if (v61 <= 8191.0)
          {
            v62 = v61;
            if (v61 < 0.0)
              v62 = 0.0;
          }
          _H30 = *(_WORD *)(v31 + 2 * llroundf(v62));
          __asm { FCVT            S10, H30 }
          v65 = _S29 * _S10;
          v66 = _S31 * _S10;
          v67 = _S9 * _S10;
          _H29 = *(_WORD *)(v32
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v29 * v66) + (float)((float)(_S29 * _S10) * v28))+ (float)((float)(_S9 * _S10) * v33), 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          v70 = v21 + _S29;
          v71 = (float)(v21 + _S29) <= 1023.0;
          v72 = 1023.0;
          if (v71)
          {
            v72 = v70;
            if (v70 < 0.0)
              v72 = 0.0;
          }
          _H9 = *(_WORD *)(v32
                         + 2
                         * llroundf(fminf(fmaxf((float)((float)(v26 * v66) + (float)(v65 * v25)) + (float)(v67 * v27), 0.0), 8191.0)));
          __asm { FCVT            S9, H9 }
          v75 = v21 + _S9;
          v71 = (float)(v21 + _S9) <= 1023.0;
          v76 = 1023.0;
          if (v71)
          {
            v76 = v75;
            if (v75 < 0.0)
              v76 = 0.0;
          }
          _H30 = *(_WORD *)(v32
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v23 * v66) + (float)(v65 * v22)) + (float)(v67 * v24), 0.0), 8191.0)));
          __asm { FCVT            S30, H30 }
          v79 = v21 + _S30;
          v71 = (float)(v21 + _S30) <= 1023.0;
          v6 = 1023.0;
          if (v71)
          {
            v6 = v79;
            if (v79 < 0.0)
              v6 = 0.0;
          }
          v7 = (double)*(unsigned __int16 *)(v49 + 2 * v41) * 3.0 / 65535.0;
          v80 = llroundf(v72);
          v49 += 8;
          v81 = llroundf(v76) << 10;
          v82 = llroundf(v6);
          v5 = (float)llroundf(v7);
          if (v5 > 3.0)
            v5 = 3.0;
          *v48++ = v81 | v80 | (llroundf(v5) << 30) | (v82 << 20);
          --v47;
        }
        while (v47);
      }
      v46 += v18;
      v45 = (unsigned int *)((char *)v45 + v19);
      ++v12;
    }
    while (v12 != v15);
  }
  return result;
}

uint64_t vt_Copy_l64r_TRC_Mat_TRC_l10r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_TRC_Mat_TRC_l10r_GCD);
  return 0;
}

unint64_t vt_Copy_l64r_TRC_Mat_TRC_l10r_GCD(unint64_t result, uint64_t a2, double a3, double a4, float a5)
{
  float v5;
  float v6;
  double v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  float v45;
  unsigned int v47;
  float v59;
  BOOL v60;
  float v61;
  float v64;
  float v65;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;

  v8 = *(_QWORD *)(result + 28);
  v9 = *(unsigned __int8 *)result;
  v10 = v8 * a2 / v9;
  v11 = (v8 + v8 * a2) / v9;
  if (v11 != v10)
  {
    v12 = 0;
    v13 = *(_QWORD *)(result + 20);
    v14 = v10 + *(_QWORD *)(result + 44);
    v15 = v11 - v10;
    v16 = *(_QWORD *)(result + 152);
    v17 = *(_QWORD **)(result + 56);
    v18 = **(_QWORD **)(result + 64);
    v19 = **(_QWORD **)(result + 136);
    v20 = 8191.0 / (float)*(unsigned int *)(v16 + 128);
    LOWORD(a5) = *(_WORD *)(v16 + 144);
    v21 = (float)LODWORD(a5);
    v22 = *(float *)(v16 + 72);
    v23 = *(float *)(v16 + 76);
    v24 = *(float *)(v16 + 80);
    v25 = *(float *)(v16 + 84);
    v26 = *(float *)(v16 + 88);
    v27 = *(float *)(v16 + 92);
    v28 = *(float *)(v16 + 96);
    v29 = *(float *)(v16 + 100);
    v30 = *(float *)(v16 + 104);
    v31 = v16 + 164;
    v32 = v16 + 16548;
    v33 = *(_QWORD *)(result + 112);
    v34 = *(_QWORD *)(result + 104) * a2 / v9 + *(_QWORD *)(result + 120);
    v35 = *(_QWORD *)(result + 36);
    v36 = *(unsigned __int8 *)(v16 + 157);
    v37 = *(unsigned __int8 *)(v16 + 156);
    v38 = **(_QWORD **)(result + 128) + v34 * v19;
    v39 = *(unsigned __int8 *)(v16 + 155);
    result = *(unsigned __int8 *)(v16 + 154);
    v40 = (unsigned int *)(v38 + 16 * v33);
    v41 = *v17 + v18 * v14 + 8 * v35;
    do
    {
      if (v13)
      {
        v42 = v13;
        v43 = v41;
        v44 = v40;
        do
        {
          LOWORD(v5) = *(_WORD *)(v43 + 2 * result);
          LOWORD(v6) = *(_WORD *)(v43 + 2 * v39);
          LOWORD(v7) = *(_WORD *)(v43 + 2 * v37);
          v45 = v20 * (float)LODWORD(v7);
          _H25 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v20 * (float)LODWORD(v5), 0.0), 8191.0)));
          v47 = llroundf(fminf(fmaxf(v20 * (float)LODWORD(v6), 0.0), 8191.0));
          __asm { FCVT            S26, H25 }
          _H25 = *(_WORD *)(v31 + 2 * v47);
          __asm { FCVT            S27, H25 }
          _H25 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v45, 0.0), 8191.0)));
          __asm { FCVT            S28, H25 }
          _H25 = *(_WORD *)(v32
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v29 * _S27) + (float)(_S26 * v28)) + (float)(_S28 * v30), 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          v59 = v21 + _S25;
          v60 = (float)(v21 + _S25) <= 1023.0;
          v61 = 1023.0;
          if (v60)
          {
            v61 = v59;
            if (v59 < 0.0)
              v61 = 0.0;
          }
          _H29 = *(_WORD *)(v32
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v26 * _S27) + (float)(_S26 * v25)) + (float)(_S28 * v27), 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          v64 = v21 + _S29;
          v60 = (float)(v21 + _S29) <= 1023.0;
          v65 = 1023.0;
          if (v60)
          {
            v65 = v64;
            if (v64 < 0.0)
              v65 = 0.0;
          }
          _H26 = *(_WORD *)(v32
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v23 * _S27) + (float)(_S26 * v22)) + (float)(_S28 * v24), 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          *(float *)&v7 = v21 + _S26;
          v60 = (float)(v21 + _S26) <= 1023.0;
          v6 = 1023.0;
          if (v60)
          {
            v6 = *(float *)&v7;
            if (*(float *)&v7 < 0.0)
              v6 = 0.0;
          }
          LOWORD(v7) = *(_WORD *)(v43 + 2 * v36);
          v43 += 8;
          v7 = (double)*(unint64_t *)&v7 * 3.0 / 65535.0;
          *(float *)&v7 = v7;
          v68 = llroundf(v61);
          v69 = llroundf(v6);
          v5 = (float)llroundf(*(float *)&v7);
          v70 = llroundf(v65) << 10;
          if (v5 > 3.0)
            v5 = 3.0;
          *v44++ = v70 | v68 | (llroundf(v5) << 30) | (v69 << 20);
          --v42;
        }
        while (v42);
      }
      v41 += v18;
      v40 = (unsigned int *)((char *)v40 + v19);
      ++v12;
    }
    while (v12 != v15);
  }
  return result;
}

uint64_t vt_Copy_l64r_rgb_l10r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_rgb_l10r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_l64r_rgb_l10r_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, float a10)
{
  float v10;
  float v11;
  double v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  float v25;
  float v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned int *v35;
  float v36;
  float v37;
  float v38;
  float v39;
  BOOL v40;
  float v41;
  unsigned int v42;
  unsigned int v43;
  float v44;
  float v45;
  unsigned int v46;
  float v47;
  float v48;
  unsigned int v49;
  float v50;
  unsigned int v51;

  v13 = *(_QWORD *)(result + 28);
  v14 = *result;
  v15 = v13 * a2 / v14;
  v16 = (v13 + v13 * a2) / v14;
  if (v16 != v15)
  {
    v17 = 0;
    v18 = *(_QWORD *)(result + 20);
    v19 = v15 + *(_QWORD *)(result + 44);
    v20 = v16 - v15;
    v21 = *((_QWORD *)result + 19);
    v22 = **((_QWORD **)result + 8);
    v23 = **((_QWORD **)result + 17);
    *(float *)&v24 = (float)*(unsigned int *)(v21 + 136);
    v25 = *(float *)&v24 / (float)*(unsigned int *)(v21 + 128);
    LOWORD(v24) = *(_WORD *)(v21 + 144);
    v26 = (float)v24;
    v27 = *((_QWORD *)result + 13) * a2 / v14 + *((_QWORD *)result + 15);
    v28 = *(unsigned __int8 *)(v21 + 157);
    v29 = *(unsigned __int8 *)(v21 + 156);
    v30 = *(unsigned __int8 *)(v21 + 155);
    v31 = *(unsigned __int8 *)(v21 + 154);
    v32 = **((_QWORD **)result + 16) + v27 * v23 + 16 * *((_QWORD *)result + 14);
    result = (unsigned __int8 *)(**((_QWORD **)result + 7) + v22 * v19 + 8 * *(_QWORD *)(result + 36));
    do
    {
      if (v18)
      {
        v33 = v18;
        v34 = result;
        v35 = (unsigned int *)v32;
        do
        {
          LOWORD(a10) = *(_WORD *)&v34[2 * v31];
          LOWORD(v10) = *(_WORD *)&v34[2 * v30];
          LOWORD(v11) = *(_WORD *)&v34[2 * v29];
          v36 = v25 * (float)LODWORD(a10);
          v37 = (float)LODWORD(v10);
          LOWORD(v12) = *(_WORD *)&v34[2 * v28];
          v12 = (double)*(unint64_t *)&v12 * 3.0 / 65535.0;
          v38 = (float)(v25 * (float)LODWORD(v11)) + v26;
          if (v38 < 0.0)
            v39 = 0.0;
          else
            v39 = v38;
          v40 = v38 <= 1023.0;
          v41 = v12;
          if (v40)
            *(float *)&v12 = v39;
          else
            *(float *)&v12 = 1023.0;
          v42 = llroundf(*(float *)&v12);
          v43 = llroundf(v41);
          v44 = (float)(v25 * v37) + v26;
          if (v44 < 0.0)
            v11 = 0.0;
          else
            v11 = v44;
          if (v44 <= 1023.0)
            v45 = v11;
          else
            v45 = 1023.0;
          v46 = llroundf(v45);
          v47 = v36 + v26;
          if (v47 < 0.0)
            v48 = 0.0;
          else
            v48 = v47;
          v49 = v46 << 10;
          if (v47 <= 1023.0)
            v50 = v48;
          else
            v50 = 1023.0;
          v10 = (float)v43;
          v51 = llroundf(v50);
          if (v10 <= 3.0)
            a10 = v10;
          else
            a10 = 3.0;
          v34 += 8;
          *v35++ = v49 | v42 | (llroundf(a10) << 30) | (v51 << 20);
          --v33;
        }
        while (v33);
      }
      result += v22;
      v32 += v23;
      ++v17;
    }
    while (v17 != v20);
  }
  return result;
}

uint64_t vt_Copy_l64r_TRC_Tone_Mat_TRC_l64r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_TRC_Tone_Mat_TRC_l64r_GCD);
  return 0;
}

unint64_t vt_Copy_l64r_TRC_Tone_Mat_TRC_l64r_GCD(unint64_t result, uint64_t a2)
{
  float v3;
  float v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _WORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _WORD *v45;
  float v56;
  float v57;
  float v60;
  float v61;
  float v62;
  float v65;
  __int16 v67;
  float v68;
  float v69;

  v5 = *(_QWORD *)(result + 28);
  v6 = *(unsigned __int8 *)result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = v7 + *(_QWORD *)(result + 44);
    v12 = v8 - v7;
    v13 = *(_QWORD *)(result + 152);
    v14 = *(_QWORD **)(result + 56);
    v15 = **(_QWORD **)(result + 64);
    v16 = **(_QWORD **)(result + 136);
    v17 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    v18 = *(float *)(v13 + 72);
    v19 = *(float *)(v13 + 76);
    v20 = *(float *)(v13 + 80);
    v21 = *(float *)(v13 + 84);
    v22 = *(float *)(v13 + 88);
    v23 = *(float *)(v13 + 92);
    v24 = *(float *)(v13 + 96);
    v25 = *(float *)(v13 + 100);
    v26 = v13 + 164;
    v27 = v13 + 16548;
    v28 = v13 + 32932;
    v29 = *(float *)(v13 + 104);
    v30 = *(float *)(v13 + 108);
    v31 = *(float *)(v13 + 112);
    v32 = *(float *)(v13 + 116);
    v33 = *(float *)(v13 + 120);
    v34 = *(_QWORD *)(result + 112);
    v35 = *(_QWORD *)(result + 104) * a2 / v6 + *(_QWORD *)(result + 120);
    v36 = *(_QWORD *)(result + 36);
    v37 = *(unsigned __int8 *)(v13 + 157);
    v38 = *(unsigned __int8 *)(v13 + 156);
    v39 = **(_QWORD **)(result + 128) + v35 * v16;
    result = *(unsigned __int8 *)(v13 + 155);
    v40 = *(unsigned __int8 *)(v13 + 154);
    v41 = (_WORD *)(v39 + 8 * v34);
    v42 = *v14 + v15 * v11 + 8 * v36;
    do
    {
      if (v10)
      {
        v43 = v10;
        v44 = v42;
        v45 = v41;
        do
        {
          LOWORD(_S25) = *(_WORD *)(v44 + 2 * v40);
          LOWORD(v3) = *(_WORD *)(v44 + 2 * result);
          LOWORD(v4) = *(_WORD *)(v44 + 2 * v38);
          _H25 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(_S25), 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          _H26 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(v3), 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(v4), 0.0), 8191.0)));
          __asm { FCVT            S28, H27 }
          v56 = (float)((float)((float)(v31 * _S26) + (float)(v30 * _S25)) + (float)(v32 * _S28))
              + (float)(v33 * fmaxf(_S25, fmaxf(_S26, _S28)));
          v57 = 8191.0;
          if (v56 <= 8191.0)
          {
            v57 = v56;
            if (v56 < 0.0)
              v57 = 0.0;
          }
          _H27 = *(_WORD *)(v27 + 2 * llroundf(v57));
          __asm { FCVT            S29, H27 }
          v60 = _S25 * _S29;
          v61 = _S26 * _S29;
          v62 = _S28 * _S29;
          _H30 = *(_WORD *)(v28
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v19 * v61) + (float)(v60 * v18)) + (float)((float)(_S28 * _S29) * v20), 0.0), 8191.0)));
          __asm { FCVT            S29, H30 }
          v65 = 65535.0;
          if (_S29 <= 65535.0)
          {
            __asm { FCVT            S28, H30 }
            _NF = _S28 < 0.0;
            v65 = _S29;
            if (_NF)
              v65 = 0.0;
          }
          v67 = *(_WORD *)(v44 + 2 * v37);
          v68 = (float)((float)(v22 * v61) + (float)(v60 * v21)) + (float)(v62 * v23);
          v69 = (float)((float)(v25 * v61) + (float)(v60 * v24)) + (float)(v62 * v29);
          _H26 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v68, 0.0), 8191.0)));
          _S25 = fminf(fmaxf(v69, 0.0), 8191.0);
          LOWORD(_S25) = *(_WORD *)(v28 + 2 * llroundf(_S25));
          __asm { FCVT            S29, H26 }
          *v45 = llroundf(v65);
          v4 = 65535.0;
          if (_S29 <= 65535.0)
          {
            __asm { FCVT            S26, H26 }
            v4 = _S29;
            if (_S26 < 0.0)
              v4 = 0.0;
          }
          __asm { FCVT            S28, H25 }
          v45[1] = llroundf(v4);
          v3 = 65535.0;
          if (_S28 <= 65535.0)
          {
            __asm { FCVT            S25, H25 }
            v3 = _S28;
            if (_S25 < 0.0)
              v3 = 0.0;
          }
          v44 += 8;
          v45[2] = llroundf(v3);
          v45[3] = v67;
          v45 += 4;
          --v43;
        }
        while (v43);
      }
      v42 += v15;
      v41 = (_WORD *)((char *)v41 + v16);
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_l64r_TRC_Mat_TRC_l64r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_TRC_Mat_TRC_l64r_GCD);
  return 0;
}

unint64_t vt_Copy_l64r_TRC_Mat_TRC_l64r_GCD(unint64_t result, uint64_t a2)
{
  float v3;
  float v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _WORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _WORD *v40;
  float v53;
  __int16 v55;
  float v56;
  float v57;

  v5 = *(_QWORD *)(result + 28);
  v6 = *(unsigned __int8 *)result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = v7 + *(_QWORD *)(result + 44);
    v12 = v8 - v7;
    v13 = *(_QWORD *)(result + 152);
    v14 = *(_QWORD **)(result + 56);
    v15 = **(_QWORD **)(result + 64);
    v16 = **(_QWORD **)(result + 136);
    v17 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    v18 = *(float *)(v13 + 72);
    v19 = *(float *)(v13 + 76);
    v20 = *(float *)(v13 + 80);
    v21 = *(float *)(v13 + 84);
    v22 = *(float *)(v13 + 88);
    v23 = *(float *)(v13 + 92);
    v24 = *(float *)(v13 + 96);
    v25 = *(float *)(v13 + 100);
    v26 = *(float *)(v13 + 104);
    v27 = v13 + 164;
    v28 = v13 + 16548;
    v29 = *(_QWORD *)(result + 112);
    v30 = *(_QWORD *)(result + 104) * a2 / v6 + *(_QWORD *)(result + 120);
    v31 = *(_QWORD *)(result + 36);
    v32 = *(unsigned __int8 *)(v13 + 157);
    v33 = *(unsigned __int8 *)(v13 + 156);
    v34 = **(_QWORD **)(result + 128) + v30 * v16;
    v35 = *(unsigned __int8 *)(v13 + 155);
    result = *(unsigned __int8 *)(v13 + 154);
    v36 = (_WORD *)(v34 + 8 * v29);
    v37 = *v14 + v15 * v11 + 8 * v31;
    do
    {
      if (v10)
      {
        v38 = v10;
        v39 = v37;
        v40 = v36;
        do
        {
          LOWORD(_S21) = *(_WORD *)(v39 + 2 * result);
          LOWORD(v3) = *(_WORD *)(v39 + 2 * v35);
          LOWORD(v4) = *(_WORD *)(v39 + 2 * v33);
          _H21 = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(_S21), 0.0), 8191.0)));
          __asm { FCVT            S21, H21 }
          _H22 = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(v3), 0.0), 8191.0)));
          __asm { FCVT            S22, H22 }
          _H23 = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(v4), 0.0), 8191.0)));
          __asm { FCVT            S23, H23 }
          _H26 = *(_WORD *)(v28
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v19 * _S22) + (float)(_S21 * v18)) + (float)(_S23 * v20), 0.0), 8191.0)));
          __asm { FCVT            S25, H26 }
          v53 = 65535.0;
          if (_S25 <= 65535.0)
          {
            __asm { FCVT            S24, H26 }
            _NF = _S24 < 0.0;
            v53 = _S25;
            if (_NF)
              v53 = 0.0;
          }
          v55 = *(_WORD *)(v39 + 2 * v32);
          v56 = (float)((float)(v22 * _S22) + (float)(_S21 * v21)) + (float)(_S23 * v23);
          v57 = (float)((float)(v25 * _S22) + (float)(_S21 * v24)) + (float)(_S23 * v26);
          _H22 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v56, 0.0), 8191.0)));
          _S21 = fminf(fmaxf(v57, 0.0), 8191.0);
          LOWORD(_S21) = *(_WORD *)(v28 + 2 * llroundf(_S21));
          __asm { FCVT            S25, H22 }
          *v40 = llroundf(v53);
          v4 = 65535.0;
          if (_S25 <= 65535.0)
          {
            __asm { FCVT            S22, H22 }
            v4 = _S25;
            if (_S22 < 0.0)
              v4 = 0.0;
          }
          __asm { FCVT            S24, H21 }
          v40[1] = llroundf(v4);
          v3 = 65535.0;
          if (_S24 <= 65535.0)
          {
            __asm { FCVT            S21, H21 }
            v3 = _S24;
            if (_S21 < 0.0)
              v3 = 0.0;
          }
          v39 += 8;
          v40[2] = llroundf(v3);
          v40[3] = v55;
          v40 += 4;
          --v38;
        }
        while (v38);
      }
      v37 += v15;
      v36 = (_WORD *)((char *)v36 + v16);
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_l64r_rgb_l64r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_rgb_l64r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_l64r_rgb_l64r_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  _WORD *v25;
  float v26;
  float v27;
  float v28;
  __int16 v29;
  float v30;
  float v31;
  float v32;

  v5 = *(_QWORD *)(result + 28);
  v6 = *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = v7 + *(_QWORD *)(result + 44);
    v12 = v8 - v7;
    v13 = *((_QWORD *)result + 19);
    v14 = **((_QWORD **)result + 8);
    v15 = **((_QWORD **)result + 17);
    v16 = (float)*(unsigned int *)(v13 + 136) / (float)*(unsigned int *)(v13 + 128);
    v17 = *((_QWORD *)result + 13) * a2 / v6 + *((_QWORD *)result + 15);
    v18 = *(unsigned __int8 *)(v13 + 157);
    v19 = *(unsigned __int8 *)(v13 + 156);
    v20 = *(unsigned __int8 *)(v13 + 155);
    v21 = *(unsigned __int8 *)(v13 + 154);
    v22 = **((_QWORD **)result + 16) + v17 * v15 + 8 * *((_QWORD *)result + 14);
    result = (unsigned __int8 *)(**((_QWORD **)result + 7) + v14 * v11 + 8 * *(_QWORD *)(result + 36));
    do
    {
      if (v10)
      {
        v23 = v10;
        v24 = result;
        v25 = (_WORD *)v22;
        do
        {
          LOWORD(a5) = *(_WORD *)&v24[2 * v21];
          v26 = v16 * (float)LODWORD(a5);
          v27 = 65535.0;
          if (v26 <= 65535.0)
          {
            v27 = v26;
            if (v26 < 0.0)
              v27 = 0.0;
          }
          LOWORD(v26) = *(_WORD *)&v24[2 * v20];
          v28 = (float)LODWORD(v26);
          LOWORD(v26) = *(_WORD *)&v24[2 * v19];
          v29 = *(_WORD *)&v24[2 * v18];
          v30 = v16 * v28;
          *v25 = llroundf(v27);
          v31 = 65535.0;
          if (v30 <= 65535.0)
          {
            v31 = v30;
            if (v30 < 0.0)
              v31 = 0.0;
          }
          v32 = v16 * (float)LODWORD(v26);
          v25[1] = llroundf(v31);
          a5 = 65535.0;
          if (v32 <= 65535.0)
          {
            a5 = v32;
            if (v32 < 0.0)
              a5 = 0.0;
          }
          v24 += 8;
          v25[2] = llroundf(a5);
          v25[3] = v29;
          v25 += 4;
          --v23;
        }
        while (v23);
      }
      result += v14;
      v22 += v15;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_l64r_TRC_Tone_Mat_TRC_b64a(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_TRC_Tone_Mat_TRC_b64a_GCD);
  return 0;
}

unint64_t vt_Copy_l64r_TRC_Tone_Mat_TRC_b64a_GCD(unint64_t result, uint64_t a2)
{
  float v2;
  float v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _WORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _WORD *v45;
  unsigned int v53;
  float v57;
  float v58;
  float v61;
  float v62;
  float v63;
  float v69;
  unsigned int v73;

  v5 = *(_QWORD *)(result + 28);
  v6 = *(unsigned __int8 *)result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = v7 + *(_QWORD *)(result + 44);
    v12 = v8 - v7;
    v13 = *(_QWORD *)(result + 152);
    v14 = *(_QWORD **)(result + 56);
    v15 = **(_QWORD **)(result + 64);
    v16 = **(_QWORD **)(result + 136);
    v17 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    v18 = *(float *)(v13 + 72);
    v19 = *(float *)(v13 + 76);
    v20 = *(float *)(v13 + 80);
    v21 = *(float *)(v13 + 84);
    v22 = *(float *)(v13 + 88);
    v23 = *(float *)(v13 + 92);
    v24 = *(float *)(v13 + 96);
    v25 = *(float *)(v13 + 100);
    v26 = v13 + 164;
    v27 = v13 + 16548;
    v28 = v13 + 32932;
    v29 = *(float *)(v13 + 104);
    v30 = *(float *)(v13 + 108);
    v31 = *(float *)(v13 + 112);
    v32 = *(float *)(v13 + 116);
    v33 = *(float *)(v13 + 120);
    v34 = *(_QWORD *)(result + 112);
    v35 = *(_QWORD *)(result + 104) * a2 / v6 + *(_QWORD *)(result + 120);
    v36 = *(_QWORD *)(result + 36);
    v37 = *(unsigned __int8 *)(v13 + 157);
    v38 = *(unsigned __int8 *)(v13 + 156);
    v39 = **(_QWORD **)(result + 128) + v35 * v16;
    result = *(unsigned __int8 *)(v13 + 155);
    v40 = *(unsigned __int8 *)(v13 + 154);
    v41 = (_WORD *)(v39 + 8 * v34);
    v42 = *v14 + v15 * v11 + 8 * v36;
    do
    {
      if (v10)
      {
        v43 = v10;
        v44 = v42;
        v45 = v41;
        do
        {
          LOWORD(v2) = *(_WORD *)(v44 + 2 * v40);
          LOWORD(v3) = *(_WORD *)(v44 + 2 * result);
          LOWORD(_S27) = *(_WORD *)(v44 + 2 * v38);
          _H25 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(v2), 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          _H26 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(v3), 0.0), 8191.0)));
          v53 = llroundf(fminf(fmaxf(v17 * (float)LODWORD(_S27), 0.0), 8191.0));
          __asm { FCVT            S27, H26 }
          _H26 = *(_WORD *)(v26 + 2 * v53);
          __asm { FCVT            S29, H26 }
          v57 = (float)((float)((float)(v31 * _S27) + (float)(v30 * _S25)) + (float)(v32 * _S29))
              + (float)(v33 * fmaxf(_S25, fmaxf(_S27, _S29)));
          v58 = 8191.0;
          if (v57 <= 8191.0)
          {
            v58 = v57;
            if (v57 < 0.0)
              v58 = 0.0;
          }
          _H26 = *(_WORD *)(v27 + 2 * llroundf(v58));
          __asm { FCVT            S30, H26 }
          v61 = _S25 * _S30;
          v62 = _S27 * _S30;
          v63 = _S29 * _S30;
          _H30 = *(_WORD *)(v28
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v19 * v62) + (float)((float)(_S25 * _S30) * v18))+ (float)((float)(_S29 * _S30) * v20), 0.0), 8191.0)));
          __asm { FCVT            S29, H30 }
          v2 = 65535.0;
          if (_S29 <= 65535.0)
          {
            __asm { FCVT            S25, H30 }
            _NF = _S25 < 0.0;
            v2 = _S29;
            if (_NF)
              v2 = 0.0;
          }
          _H31 = *(_WORD *)(v28
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v22 * v62) + (float)(v61 * v21)) + (float)(v63 * v23), 0.0), 8191.0)));
          __asm { FCVT            S30, H31 }
          v69 = 65535.0;
          if (_S30 <= 65535.0)
          {
            __asm { FCVT            S29, H31 }
            _NF = _S29 < 0.0;
            v69 = _S30;
            if (_NF)
              v69 = 0.0;
          }
          _H28 = *(_WORD *)(v28
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v25 * v62) + (float)(v61 * v24)) + (float)(v63 * v29), 0.0), 8191.0)));
          __asm { FCVT            S27, H28 }
          v3 = 65535.0;
          if (_S27 <= 65535.0)
          {
            __asm { FCVT            S26, H28 }
            _NF = _S26 < 0.0;
            v3 = _S27;
            if (_NF)
              v3 = 0.0;
          }
          v73 = *(unsigned __int16 *)(v44 + 2 * v37);
          v44 += 8;
          *v45 = __rev16(v73);
          v45[1] = __rev16(llroundf(v2));
          v45[2] = __rev16(llroundf(v69));
          v45[3] = __rev16(llroundf(v3));
          v45 += 4;
          --v43;
        }
        while (v43);
      }
      v42 += v15;
      v41 = (_WORD *)((char *)v41 + v16);
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_l64r_TRC_Mat_TRC_b64a(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_TRC_Mat_TRC_b64a_GCD);
  return 0;
}

unint64_t vt_Copy_l64r_TRC_Mat_TRC_b64a_GCD(unint64_t result, uint64_t a2)
{
  float v2;
  float v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _WORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _WORD *v40;
  float v41;
  unsigned int v43;
  float v58;
  unsigned int v62;

  v5 = *(_QWORD *)(result + 28);
  v6 = *(unsigned __int8 *)result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = v7 + *(_QWORD *)(result + 44);
    v12 = v8 - v7;
    v13 = *(_QWORD *)(result + 152);
    v14 = *(_QWORD **)(result + 56);
    v15 = **(_QWORD **)(result + 64);
    v16 = **(_QWORD **)(result + 136);
    v17 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    v18 = *(float *)(v13 + 72);
    v19 = *(float *)(v13 + 76);
    v20 = *(float *)(v13 + 80);
    v21 = *(float *)(v13 + 84);
    v22 = *(float *)(v13 + 88);
    v23 = *(float *)(v13 + 92);
    v24 = *(float *)(v13 + 96);
    v25 = *(float *)(v13 + 100);
    v26 = *(float *)(v13 + 104);
    v27 = v13 + 164;
    v28 = v13 + 16548;
    v29 = *(_QWORD *)(result + 112);
    v30 = *(_QWORD *)(result + 104) * a2 / v6 + *(_QWORD *)(result + 120);
    v31 = *(_QWORD *)(result + 36);
    v32 = *(unsigned __int8 *)(v13 + 157);
    v33 = *(unsigned __int8 *)(v13 + 156);
    v34 = **(_QWORD **)(result + 128) + v30 * v16;
    v35 = *(unsigned __int8 *)(v13 + 155);
    result = *(unsigned __int8 *)(v13 + 154);
    v36 = (_WORD *)(v34 + 8 * v29);
    v37 = *v14 + v15 * v11 + 8 * v31;
    do
    {
      if (v10)
      {
        v38 = v10;
        v39 = v37;
        v40 = v36;
        do
        {
          LOWORD(v2) = *(_WORD *)(v39 + 2 * result);
          LOWORD(v3) = *(_WORD *)(v39 + 2 * v35);
          LOWORD(_S23) = *(_WORD *)(v39 + 2 * v33);
          v41 = v17 * (float)LODWORD(_S23);
          _H21 = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(v2), 0.0), 8191.0)));
          v43 = llroundf(fminf(fmaxf(v17 * (float)LODWORD(v3), 0.0), 8191.0));
          __asm { FCVT            S22, H21 }
          _H21 = *(_WORD *)(v27 + 2 * v43);
          __asm { FCVT            S23, H21 }
          _H21 = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(v41, 0.0), 8191.0)));
          __asm { FCVT            S24, H21 }
          _H26 = *(_WORD *)(v28
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v19 * _S23) + (float)(_S22 * v18)) + (float)(_S24 * v20), 0.0), 8191.0)));
          __asm { FCVT            S25, H26 }
          v2 = 65535.0;
          if (_S25 <= 65535.0)
          {
            __asm { FCVT            S21, H26 }
            _NF = _S21 < 0.0;
            v2 = _S25;
            if (_NF)
              v2 = 0.0;
          }
          _H27 = *(_WORD *)(v28
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v22 * _S23) + (float)(_S22 * v21)) + (float)(_S24 * v23), 0.0), 8191.0)));
          __asm { FCVT            S26, H27 }
          v58 = 65535.0;
          if (_S26 <= 65535.0)
          {
            __asm { FCVT            S25, H27 }
            _NF = _S25 < 0.0;
            v58 = _S26;
            if (_NF)
              v58 = 0.0;
          }
          _H24 = *(_WORD *)(v28
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v25 * _S23) + (float)(_S22 * v24)) + (float)(_S24 * v26), 0.0), 8191.0)));
          __asm { FCVT            S23, H24 }
          v3 = 65535.0;
          if (_S23 <= 65535.0)
          {
            __asm { FCVT            S22, H24 }
            _NF = _S22 < 0.0;
            v3 = _S23;
            if (_NF)
              v3 = 0.0;
          }
          v62 = *(unsigned __int16 *)(v39 + 2 * v32);
          v39 += 8;
          *v40 = __rev16(v62);
          v40[1] = __rev16(llroundf(v2));
          v40[2] = __rev16(llroundf(v58));
          v40[3] = __rev16(llroundf(v3));
          v40 += 4;
          --v38;
        }
        while (v38);
      }
      v37 += v15;
      v36 = (_WORD *)((char *)v36 + v16);
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_l64r_rgb_b64a(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_rgb_b64a_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_l64r_rgb_b64a_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  _WORD *v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  unsigned int v31;

  v5 = *(_QWORD *)(result + 28);
  v6 = *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = v7 + *(_QWORD *)(result + 44);
    v12 = v8 - v7;
    v13 = *((_QWORD *)result + 19);
    v14 = **((_QWORD **)result + 8);
    v15 = **((_QWORD **)result + 17);
    v16 = (float)*(unsigned int *)(v13 + 136) / (float)*(unsigned int *)(v13 + 128);
    v17 = *((_QWORD *)result + 13) * a2 / v6 + *((_QWORD *)result + 15);
    v18 = *(unsigned __int8 *)(v13 + 157);
    v19 = *(unsigned __int8 *)(v13 + 156);
    v20 = *(unsigned __int8 *)(v13 + 155);
    v21 = *(unsigned __int8 *)(v13 + 154);
    v22 = **((_QWORD **)result + 16) + v17 * v15 + 8 * *((_QWORD *)result + 14);
    result = (unsigned __int8 *)(**((_QWORD **)result + 7) + v14 * v11 + 8 * *(_QWORD *)(result + 36));
    do
    {
      if (v10)
      {
        v23 = v10;
        v24 = result;
        v25 = (_WORD *)v22;
        do
        {
          LOWORD(a5) = *(_WORD *)&v24[2 * v21];
          v26 = v16 * (float)LODWORD(a5);
          a5 = 65535.0;
          if (v26 <= 65535.0)
          {
            a5 = v26;
            if (v26 < 0.0)
              a5 = 0.0;
          }
          LOWORD(v26) = *(_WORD *)&v24[2 * v20];
          v27 = v16 * (float)LODWORD(v26);
          v28 = 65535.0;
          if (v27 <= 65535.0)
          {
            v28 = v27;
            if (v27 < 0.0)
              v28 = 0.0;
          }
          LOWORD(v27) = *(_WORD *)&v24[2 * v19];
          v29 = v16 * (float)LODWORD(v27);
          v30 = 65535.0;
          if (v29 <= 65535.0)
          {
            v30 = v29;
            if (v29 < 0.0)
              v30 = 0.0;
          }
          v31 = *(unsigned __int16 *)&v24[2 * v18];
          v24 += 8;
          *v25 = __rev16(v31);
          v25[1] = __rev16(llroundf(a5));
          v25[2] = __rev16(llroundf(v28));
          v25[3] = __rev16(llroundf(v30));
          v25 += 4;
          --v23;
        }
        while (v23);
      }
      result += v14;
      v22 += v15;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_l64r_TRC_Tone_Mat_TRC_RGhA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_TRC_Tone_Mat_TRC_RGhA_GCD);
  return 0;
}

unint64_t vt_Copy_l64r_TRC_Tone_Mat_TRC_RGhA_GCD(unint64_t result, uint64_t a2)
{
  float v3;
  float v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _WORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _WORD *v45;
  float v56;
  float v57;
  unsigned int v58;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;

  v5 = *(_QWORD *)(result + 28);
  v6 = *(unsigned __int8 *)result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = v7 + *(_QWORD *)(result + 44);
    v12 = v8 - v7;
    v13 = *(_QWORD *)(result + 152);
    v14 = *(_QWORD **)(result + 56);
    v15 = **(_QWORD **)(result + 64);
    v16 = **(_QWORD **)(result + 136);
    v17 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    v18 = *(float *)(v13 + 72);
    v19 = *(float *)(v13 + 76);
    v20 = *(float *)(v13 + 80);
    v21 = *(float *)(v13 + 84);
    v22 = *(float *)(v13 + 88);
    v23 = *(float *)(v13 + 92);
    v24 = *(float *)(v13 + 96);
    v25 = *(float *)(v13 + 100);
    v26 = v13 + 164;
    v27 = v13 + 16548;
    v28 = v13 + 32932;
    v29 = *(float *)(v13 + 104);
    v30 = *(float *)(v13 + 108);
    v31 = *(float *)(v13 + 112);
    v32 = *(float *)(v13 + 116);
    v33 = *(float *)(v13 + 120);
    v34 = *(_QWORD *)(result + 112);
    v35 = *(_QWORD *)(result + 104) * a2 / v6 + *(_QWORD *)(result + 120);
    v36 = *(_QWORD *)(result + 36);
    v37 = *(unsigned __int8 *)(v13 + 157);
    v38 = *(unsigned __int8 *)(v13 + 156);
    v39 = **(_QWORD **)(result + 128) + v35 * v16;
    result = *(unsigned __int8 *)(v13 + 155);
    v40 = *(unsigned __int8 *)(v13 + 154);
    v41 = (_WORD *)(v39 + 8 * v34);
    v42 = *v14 + v15 * v11 + 8 * v36;
    do
    {
      if (v10)
      {
        v43 = v10;
        v44 = v42;
        v45 = v41;
        do
        {
          LOWORD(_S25) = *(_WORD *)(v44 + 2 * v40);
          LOWORD(v3) = *(_WORD *)(v44 + 2 * result);
          LOWORD(v4) = *(_WORD *)(v44 + 2 * v38);
          _H25 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(_S25), 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          _H26 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(v3), 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(v4), 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          v56 = (float)((float)((float)(v31 * _S26) + (float)(v30 * _S25)) + (float)(v32 * _S27))
              + (float)(v33 * fmaxf(_S25, fmaxf(_S26, _S27)));
          v57 = 8191.0;
          if (v56 <= 8191.0)
          {
            v57 = v56;
            if (v56 < 0.0)
              v57 = 0.0;
          }
          v58 = *(unsigned __int16 *)(v44 + 2 * v37);
          _H28 = *(_WORD *)(v27 + 2 * llroundf(v57));
          v44 += 8;
          __asm { FCVT            S28, H28 }
          v61 = _S25 * _S28;
          v62 = _S26 * _S28;
          v63 = _S27 * _S28;
          v64 = (float)((float)(v19 * v62) + (float)(v61 * v18)) + (float)(v63 * v20);
          v65 = (float)((float)(v22 * v62) + (float)(v61 * v21)) + (float)(v63 * v23);
          v66 = (float)((float)(v25 * v62) + (float)(v61 * v24)) + (float)(v63 * v29);
          v3 = fminf(fmaxf(v64, 0.0), 8191.0);
          v4 = fminf(fmaxf(v65, 0.0), 8191.0);
          LOWORD(v4) = *(_WORD *)(v28 + 2 * llroundf(v4));
          _S25 = fminf(fmaxf(v66, 0.0), 8191.0);
          LOWORD(_S25) = *(_WORD *)(v28 + 2 * llroundf(_S25));
          _S28 = (float)v58 * 0.000015259;
          *v45 = *(_WORD *)(v28 + 2 * llroundf(v3));
          v45[1] = LOWORD(v4);
          v45[2] = LOWORD(_S25);
          __asm { FCVT            H25, S28 }
          v45[3] = LOWORD(_S25);
          v45 += 4;
          --v43;
        }
        while (v43);
      }
      v42 += v15;
      v41 = (_WORD *)((char *)v41 + v16);
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_l64r_TRC_Mat_TRC_RGhA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_TRC_Mat_TRC_RGhA_GCD);
  return 0;
}

unint64_t vt_Copy_l64r_TRC_Mat_TRC_RGhA_GCD(unint64_t result, uint64_t a2)
{
  float v3;
  float v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _WORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _WORD *v41;
  unsigned int v50;
  float v51;
  float v52;
  float v53;
  float v55;
  unsigned int v56;
  unsigned int v57;

  v6 = *(_QWORD *)(result + 28);
  v7 = *(unsigned __int8 *)result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)(result + 20);
    v12 = v8 + *(_QWORD *)(result + 44);
    v13 = v9 - v8;
    v14 = *(_QWORD *)(result + 152);
    v15 = *(_QWORD **)(result + 56);
    v16 = **(_QWORD **)(result + 64);
    v17 = **(_QWORD **)(result + 136);
    v18 = 8191.0 / (float)*(unsigned int *)(v14 + 128);
    v19 = *(float *)(v14 + 72);
    v20 = *(float *)(v14 + 76);
    v21 = *(float *)(v14 + 80);
    v22 = *(float *)(v14 + 84);
    v23 = *(float *)(v14 + 88);
    v24 = *(float *)(v14 + 92);
    v25 = *(float *)(v14 + 96);
    v26 = *(float *)(v14 + 100);
    v27 = *(float *)(v14 + 104);
    v28 = v14 + 164;
    v29 = v14 + 16548;
    v30 = *(_QWORD *)(result + 112);
    v31 = *(_QWORD *)(result + 104) * a2 / v7 + *(_QWORD *)(result + 120);
    v32 = *(_QWORD *)(result + 36);
    v33 = *(unsigned __int8 *)(v14 + 157);
    v34 = *(unsigned __int8 *)(v14 + 156);
    v35 = **(_QWORD **)(result + 128) + v31 * v17;
    v36 = *(unsigned __int8 *)(v14 + 155);
    result = *(unsigned __int8 *)(v14 + 154);
    v37 = (_WORD *)(v35 + 8 * v30);
    v38 = *v15 + v16 * v12 + 8 * v32;
    do
    {
      if (v11)
      {
        v39 = v11;
        v40 = v38;
        v41 = v37;
        do
        {
          LOWORD(_S21) = *(_WORD *)(v40 + 2 * result);
          LOWORD(v3) = *(_WORD *)(v40 + 2 * v36);
          LOWORD(v4) = *(_WORD *)(v40 + 2 * v34);
          LOWORD(_S24) = *(_WORD *)(v40 + 2 * v33);
          v40 += 8;
          _H21 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v18 * (float)LODWORD(_S21), 0.0), 8191.0)));
          __asm { FCVT            S21, H21 }
          _H22 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v18 * (float)LODWORD(v3), 0.0), 8191.0)));
          __asm { FCVT            S22, H22 }
          v50 = llroundf(fminf(fmaxf(v18 * (float)LODWORD(v4), 0.0), 8191.0));
          v51 = (float)(v20 * _S22) + (float)(_S21 * v19);
          v52 = (float)(v23 * _S22) + (float)(_S21 * v22);
          v53 = (float)(v26 * _S22) + (float)(_S21 * v25);
          LOWORD(_S22) = *(_WORD *)(v28 + 2 * v50);
          __asm { FCVT            S22, H22 }
          v4 = v51 + (float)(_S22 * v21);
          v55 = v53 + (float)(_S22 * v27);
          v3 = fminf(fmaxf(v52 + (float)(_S22 * v24), 0.0), 8191.0);
          v56 = llroundf(v3);
          LOWORD(v3) = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v4, 0.0), 8191.0)));
          _S21 = fminf(fmaxf(v55, 0.0), 8191.0);
          v57 = llroundf(_S21);
          LOWORD(_S21) = *(_WORD *)(v29 + 2 * v56);
          LOWORD(v4) = *(_WORD *)(v29 + 2 * v57);
          _S24 = (float)LODWORD(_S24) * 0.000015259;
          *v41 = LOWORD(v3);
          v41[1] = LOWORD(_S21);
          v41[2] = LOWORD(v4);
          __asm { FCVT            H21, S24 }
          v41[3] = LOWORD(_S21);
          v41 += 4;
          --v39;
        }
        while (v39);
      }
      v38 += v16;
      v37 = (_WORD *)((char *)v37 + v17);
      ++v10;
    }
    while (v10 != v13);
  }
  return result;
}

uint64_t vt_Copy_l64r_rgb_RGhA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_rgb_RGhA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_l64r_rgb_RGhA_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const float *v21;
  int32x4_t v22;
  float32x4_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  float16x4_t *v26;
  __int16 *v27;
  __int16 *v28;
  __int16 *v29;
  uint16x4_t v30;

  v2 = *(_QWORD *)(result + 28);
  v3 = *result;
  v4 = v2 * a2 / v3;
  v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    v6 = 0;
    v7 = *(_QWORD *)(result + 20);
    v8 = v4 + *(_QWORD *)(result + 44);
    v9 = v5 - v4;
    v10 = *((_QWORD *)result + 19);
    v11 = **((_QWORD **)result + 8);
    v12 = **((_QWORD **)result + 17);
    v13 = 1.0 / (float)*(unsigned int *)(v10 + 128);
    v14 = *((_QWORD *)result + 13) * a2 / v3 + *((_QWORD *)result + 15);
    v15 = *(unsigned __int8 *)(v10 + 157);
    v16 = *(unsigned __int8 *)(v10 + 156);
    v17 = *(unsigned __int8 *)(v10 + 155);
    v18 = *(unsigned __int8 *)(v10 + 154);
    v19 = **((_QWORD **)result + 16) + v14 * v12 + 8 * *((_QWORD *)result + 14);
    v20 = **((_QWORD **)result + 7) + v11 * v8;
    v21 = (const float *)&dword_1928E24C4;
    v22 = (int32x4_t)vld1q_dup_f32(v21);
    result = (unsigned __int8 *)(v20 + 8 * *(_QWORD *)(result + 36));
    *(float *)v22.i32 = v13;
    v23 = (float32x4_t)vzip1q_s32(v22, v22);
    v23.f32[2] = v13;
    do
    {
      if (v7)
      {
        v24 = v7;
        v25 = result;
        v26 = (float16x4_t *)v19;
        do
        {
          v27 = (__int16 *)&v25[2 * v17];
          v28 = (__int16 *)&v25[2 * v16];
          v29 = (__int16 *)&v25[2 * v15];
          v30.i16[0] = *(_WORD *)&v25[2 * v18];
          v25 += 8;
          v30.i16[1] = *v27;
          v30.i16[2] = *v28;
          v30.i16[3] = *v29;
          *v26++ = vcvt_f16_f32(vmulq_f32(v23, vcvtq_f32_u32(vmovl_u16(v30))));
          --v24;
        }
        while (v24);
      }
      result += v11;
      v19 += v12;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_l64r_TRC_Tone_Mat_TRC_RGfA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_TRC_Tone_Mat_TRC_RGfA_GCD);
  return 0;
}

unint64_t vt_Copy_l64r_TRC_Tone_Mat_TRC_RGfA_GCD(unint64_t result, uint64_t a2)
{
  float v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float v56;
  float v57;
  unsigned int v58;
  float v61;
  float v64;
  float v65;

  v5 = *(_QWORD *)(result + 28);
  v6 = *(unsigned __int8 *)result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = v7 + *(_QWORD *)(result + 44);
    v12 = v8 - v7;
    v13 = *(_QWORD *)(result + 152);
    v14 = *(_QWORD **)(result + 56);
    v15 = **(_QWORD **)(result + 64);
    v16 = **(_QWORD **)(result + 136);
    v17 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    v18 = *(float *)(v13 + 72);
    v19 = *(float *)(v13 + 76);
    v20 = *(float *)(v13 + 80);
    v21 = *(float *)(v13 + 84);
    v22 = *(float *)(v13 + 88);
    v23 = *(float *)(v13 + 92);
    v24 = *(float *)(v13 + 96);
    v25 = *(float *)(v13 + 100);
    v26 = v13 + 164;
    v27 = v13 + 16548;
    v28 = v13 + 32932;
    v29 = *(float *)(v13 + 104);
    v30 = *(float *)(v13 + 108);
    v31 = *(float *)(v13 + 112);
    v32 = *(float *)(v13 + 116);
    v33 = *(float *)(v13 + 120);
    v34 = *(_QWORD *)(result + 112);
    v35 = *(_QWORD *)(result + 104) * a2 / v6 + *(_QWORD *)(result + 120);
    v36 = *(_QWORD *)(result + 36);
    v37 = *(unsigned __int8 *)(v13 + 157);
    v38 = *(unsigned __int8 *)(v13 + 156);
    v39 = **(_QWORD **)(result + 128) + v35 * v16;
    result = *(unsigned __int8 *)(v13 + 155);
    v40 = *(unsigned __int8 *)(v13 + 154);
    v41 = v39 + 16 * v34;
    v42 = *v14 + v15 * v11 + 8 * v36;
    do
    {
      if (v10)
      {
        v43 = v10;
        v44 = v42;
        v45 = v41;
        do
        {
          LOWORD(_S25) = *(_WORD *)(v44 + 2 * v40);
          LOWORD(v3) = *(_WORD *)(v44 + 2 * result);
          LOWORD(_S27) = *(_WORD *)(v44 + 2 * v38);
          _H25 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v17 * (float)_S25, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          _H26 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(v3), 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v17 * (float)_S27, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          v56 = (float)((float)((float)(v31 * _S26) + (float)(v30 * _S25)) + (float)(v32 * _S27))
              + (float)(v33 * fmaxf(_S25, fmaxf(_S26, _S27)));
          v57 = 8191.0;
          if (v56 <= 8191.0)
          {
            v57 = v56;
            if (v56 < 0.0)
              v57 = 0.0;
          }
          v58 = *(unsigned __int16 *)(v44 + 2 * v37);
          v44 += 8;
          _H28 = *(_WORD *)(v27 + 2 * llroundf(v57));
          __asm { FCVT            S28, H28 }
          v61 = _S25 * _S28;
          _S26 = _S26 * _S28;
          _S27 = _S27 * _S28;
          v64 = (float)((float)(v19 * _S26) + (float)(v61 * v18)) + (float)(_S27 * v20);
          v65 = (float)((float)(v22 * _S26) + (float)(v61 * v21)) + (float)(_S27 * v23);
          _S25 = (float)((float)(v25 * _S26) + (float)(v61 * v24)) + (float)(_S27 * v29);
          LOWORD(_S26) = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v64, 0.0), 8191.0)));
          LOWORD(_S27) = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v65, 0.0), 8191.0)));
          __asm
          {
            FCVT            S26, H26
            FCVT            S27, H27
          }
          LOWORD(_S25) = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(_S25, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          *(_DWORD *)v45 = _S26;
          *(_DWORD *)(v45 + 4) = _S27;
          v3 = (float)v58 * 0.000015259;
          *(_DWORD *)(v45 + 8) = _S25;
          *(float *)(v45 + 12) = v3;
          v45 += 16;
          --v43;
        }
        while (v43);
      }
      v42 += v15;
      v41 += v16;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_l64r_TRC_Mat_TRC_RGfA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_TRC_Mat_TRC_RGfA_GCD);
  return 0;
}

unint64_t vt_Copy_l64r_TRC_Mat_TRC_RGfA_GCD(unint64_t result, uint64_t a2)
{
  float v2;
  float v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  float v53;
  unsigned int v54;
  float v55;
  unsigned int v56;

  v5 = *(_QWORD *)(result + 28);
  v6 = *(unsigned __int8 *)result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = v7 + *(_QWORD *)(result + 44);
    v12 = v8 - v7;
    v13 = *(_QWORD *)(result + 152);
    v14 = *(_QWORD **)(result + 56);
    v15 = **(_QWORD **)(result + 64);
    v16 = **(_QWORD **)(result + 136);
    v17 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    v18 = *(float *)(v13 + 72);
    v19 = *(float *)(v13 + 76);
    v20 = *(float *)(v13 + 80);
    v21 = *(float *)(v13 + 84);
    v22 = *(float *)(v13 + 88);
    v23 = *(float *)(v13 + 92);
    v24 = *(float *)(v13 + 96);
    v25 = *(float *)(v13 + 100);
    v26 = *(float *)(v13 + 104);
    v27 = v13 + 164;
    v28 = v13 + 16548;
    v29 = *(_QWORD *)(result + 112);
    v30 = *(_QWORD *)(result + 104) * a2 / v6 + *(_QWORD *)(result + 120);
    v31 = *(_QWORD *)(result + 36);
    v32 = *(unsigned __int8 *)(v13 + 157);
    v33 = *(unsigned __int8 *)(v13 + 156);
    v34 = **(_QWORD **)(result + 128) + v30 * v16;
    v35 = *(unsigned __int8 *)(v13 + 155);
    result = *(unsigned __int8 *)(v13 + 154);
    v36 = v34 + 16 * v29;
    v37 = *v14 + v15 * v11 + 8 * v31;
    do
    {
      if (v10)
      {
        v38 = v10;
        v39 = v37;
        v40 = v36;
        do
        {
          LOWORD(v2) = *(_WORD *)(v39 + 2 * result);
          LOWORD(v3) = *(_WORD *)(v39 + 2 * v35);
          LOWORD(_S23) = *(_WORD *)(v39 + 2 * v33);
          v41 = llroundf(fminf(fmaxf(v17 * (float)LODWORD(v2), 0.0), 8191.0));
          _S21 = v17 * (float)_S23;
          _H23 = *(_WORD *)(v27 + 2 * v41);
          __asm { FCVT            S23, H23 }
          _H22 = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(v3), 0.0), 8191.0)));
          __asm { FCVT            S22, H22 }
          LOWORD(_S21) = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(_S21, 0.0), 8191.0)));
          __asm { FCVT            S21, H21 }
          _S24 = (float)((float)(v19 * _S22) + (float)(_S23 * v18)) + (float)(_S21 * v20);
          v53 = (float)((float)(v22 * _S22) + (float)(_S23 * v21)) + (float)(_S21 * v23);
          *(float *)&v54 = (float)(v25 * _S22) + (float)(_S23 * v24);
          v55 = *(float *)&v54 + (float)(_S21 * v26);
          LOWORD(v54) = *(_WORD *)(v39 + 2 * v32);
          v39 += 8;
          LOWORD(_S23) = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(_S24, 0.0), 8191.0)));
          LOWORD(_S24) = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v53, 0.0), 8191.0)));
          __asm { FCVT            S23, H23 }
          v56 = llroundf(fminf(fmaxf(v55, 0.0), 8191.0));
          __asm { FCVT            S21, H24 }
          LOWORD(_S24) = *(_WORD *)(v28 + 2 * v56);
          __asm { FCVT            S24, H24 }
          v3 = (float)v54;
          *(_DWORD *)v40 = _S23;
          *(_DWORD *)(v40 + 4) = _S21;
          v2 = v3 * 0.000015259;
          *(_DWORD *)(v40 + 8) = _S24;
          *(float *)(v40 + 12) = v3 * 0.000015259;
          v40 += 16;
          --v38;
        }
        while (v38);
      }
      v37 += v15;
      v36 += v16;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_l64r_rgb_RGfA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_rgb_RGfA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_l64r_rgb_RGfA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  float *v28;

  v8 = *(_QWORD *)(result + 28);
  v9 = *result;
  v10 = v8 * a2 / v9;
  v11 = (v8 + v8 * a2) / v9;
  if (v11 != v10)
  {
    v12 = 0;
    v13 = *(_QWORD *)(result + 20);
    v14 = v10 + *(_QWORD *)(result + 44);
    v15 = v11 - v10;
    v16 = *((_QWORD *)result + 19);
    v17 = **((_QWORD **)result + 8);
    v18 = **((_QWORD **)result + 17);
    v19 = 1.0 / (float)*(unsigned int *)(v16 + 128);
    v20 = *((_QWORD *)result + 13) * a2 / v9 + *((_QWORD *)result + 15);
    v21 = *(unsigned __int8 *)(v16 + 157);
    v22 = *(unsigned __int8 *)(v16 + 156);
    v23 = *(unsigned __int8 *)(v16 + 155);
    v24 = *(unsigned __int8 *)(v16 + 154);
    v25 = **((_QWORD **)result + 16) + v20 * v18 + 16 * *((_QWORD *)result + 14);
    result = (unsigned __int8 *)(**((_QWORD **)result + 7) + v17 * v14 + 8 * *(_QWORD *)(result + 36));
    do
    {
      if (v13)
      {
        v26 = v13;
        v27 = result;
        v28 = (float *)v25;
        do
        {
          LOWORD(a5) = *(_WORD *)&v27[2 * v24];
          LOWORD(a6) = *(_WORD *)&v27[2 * v23];
          a6 = v19 * (float)LODWORD(a6);
          LOWORD(a7) = *(_WORD *)&v27[2 * v22];
          a7 = v19 * (float)LODWORD(a7);
          LOWORD(a8) = *(_WORD *)&v27[2 * v21];
          v27 += 8;
          a8 = (float)LODWORD(a8);
          *v28 = v19 * (float)LODWORD(a5);
          v28[1] = a6;
          a5 = a8 * 0.000015259;
          v28[2] = a7;
          v28[3] = a8 * 0.000015259;
          v28 += 4;
          --v26;
        }
        while (v26);
      }
      result += v17;
      v25 += v18;
      ++v12;
    }
    while (v12 != v15);
  }
  return result;
}

uint64_t VTLoadVideoDecodersPreferringInternalBundles()
{
  return vtLoadVideoDecodersGuts(1);
}

uint64_t vtLoadVideoDecodersGuts(int a1)
{
  vtTryToLoadVideoDecoder("/System/Library/VideoCodecs/H264SW.videocodec", "VCPAVCRegisterDecoder");
  vtTryToLoadVideoDecoder("/System/Library/VideoDecoders/VCH263.videodecoder", "VCH263Register");
  vtTryToLoadVideoDecoder("/System/Library/VideoDecoders/H264H2.videodecoder", "H264H2Register");
  vtTryToLoadVideoDecoder("/System/Library/VideoDecoders/MP4VH2.videodecoder", "MP4VH2Register");
  vtTryToLoadVideoDecoder("/System/Library/VideoDecoders/Slim.videodecoder", "SLIMRegister");
  vtTryToLoadVideoDecoder("/System/Library/VideoDecoders/JPEGH1.videodecoder", "JPEGH1Register");
  vtTryToLoadVideoDecoder("/System/Library/VideoDecoders/H264H4.videodecoder", "H264H4Register");
  vtTryToLoadVideoDecoder("/System/Library/VideoDecoders/MP4VH4.videodecoder", "MP4VH4Register");
  vtTryToLoadVideoDecoder("/System/Library/VideoDecoders/H264H6.videodecoder", "H264H6Register");
  vtTryToLoadVideoDecoder("/System/Library/VideoDecoders/MP4VH6.videodecoder", "MP4VH6Register");
  vtTryToLoadVideoDecoder("/System/Library/VideoDecoders/H264H8.videodecoder", "H264H8Register");
  vtTryToLoadVideoDecoder("/System/Library/VideoDecoders/MP4VH8.videodecoder", "MP4VH8Register");
  vtTryToLoadVideoDecoder("/System/Library/VideoDecoders/HEVCH8.videodecoder", "HEVCH8Register");
  vtTryToLoadVideoDecoder("/System/Library/VideoDecoders/H8.videodecoder", "H8Register");
  vtTryToLoadVideoDecoder("/System/Library/VideoCodecs/VCPHEVC.videocodec", "VCPHEVCRegisterDecoder");
  vtTryToLoadVideoDecoder("/System/Library/VideoDecoders/AVD.videodecoder", "AVDRegister");
  vtTryToLoadVideoDecoder("/System/Library/VideoDecoders/ExampleIPB.videodecoder", "ExampleIPBDecoderRegister");
  vtTryToLoadVideoDecoder("/System/Library/VideoDecoders/BritannicusDecoder.videodecoder", "BritannicusRegister");
  vtTryToLoadVideoDecoder("/System/Library/VideoDecoders/VCPMP4V.videodecoder", "VCPMP4VRegister");
  vtTryToLoadVideoDecoder("/System/Library/VideoDecoders/AppleProResSWDecoder.videodecoder", "ProResSWDecoderRegister");
  if (!a1
    || !vtTryToLoadVideoDecoder("/AppleInternal/Library/VideoCodecs/AppleProResHWDecoder-Dev.videodecoder", "ProResDecoderRegister"))
  {
    vtTryToLoadVideoDecoder("/System/Library/VideoDecoders/AppleProResHWDecoder.videodecoder", "ProResDecoderRegister");
  }
  vtTryToLoadVideoDecoder("/System/Library/VideoDecoders/AV1SW.videodecoder", "AV1RegisterDecoder");
  return vtTryToLoadVideoDecoder("/AppleInternal/Library/VideoCodecs/yzip.videocodec", "yzipRegisterDecoder");
}

uint64_t vtTryToLoadVideoDecoder(const char *a1, const char *a2)
{
  uint64_t result;

  result = (uint64_t)dlopen(a1, 4);
  if (result)
  {
    result = (uint64_t)dlsym((void *)result, a2);
    if (result)
    {
      ((void (*)(void))result)();
      return 1;
    }
  }
  return result;
}

void FigGetAlignmentForIOSurfaceOutputToDisplayService(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  io_registry_entry_t H3clcdService;
  io_object_t v6;
  int v7;
  const __CFDictionary *v8;
  const __CFDictionary *v9;
  const __CFNumber *Value;
  const __CFNumber *v11;
  CFTypeID v12;
  io_registry_entry_t v13;
  io_object_t v14;
  int v15;
  const __CFDictionary *v16;
  const __CFDictionary *v17;
  const __CFNumber *v18;
  const __CFNumber *v19;
  CFTypeID v20;
  uint64_t valuePtr;

  if (a2)
  {
    if ((planeBaseRequirement_checked & 1) == 0)
    {
      H3clcdService = getH3clcdService();
      if (H3clcdService)
      {
        v6 = H3clcdService;
        v7 = 64;
        valuePtr = 64;
        v8 = (const __CFDictionary *)IORegistryEntrySearchCFProperty(H3clcdService, "IOService", CFSTR("DisplayPipePlaneBaseAlignment"), 0, 0);
        if (v8)
        {
          v9 = v8;
          Value = (const __CFNumber *)CFDictionaryGetValue(v8, CFSTR("PlaneBaseAlignmentLinear"));
          if (Value)
          {
            v11 = Value;
            v12 = CFGetTypeID(Value);
            if (v12 == CFNumberGetTypeID())
              CFNumberGetValue(v11, kCFNumberLongLongType, &valuePtr);
          }
          CFRelease(v9);
          v7 = valuePtr;
        }
        planeBaseRequirement_requirement = v7;
        IOObjectRelease(v6);
      }
      planeBaseRequirement_checked = 1;
    }
    *a2 = planeBaseRequirement_requirement;
  }
  if (a3)
  {
    if ((strideRequirement_checked & 1) == 0)
    {
      v13 = getH3clcdService();
      if (v13)
      {
        v14 = v13;
        v15 = 64;
        valuePtr = 64;
        v16 = (const __CFDictionary *)IORegistryEntrySearchCFProperty(v13, "IOService", CFSTR("DisplayPipeStrideRequirements"), 0, 0);
        if (v16)
        {
          v17 = v16;
          v18 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("StrideLinearHorizontal"));
          if (v18)
          {
            v19 = v18;
            v20 = CFGetTypeID(v18);
            if (v20 == CFNumberGetTypeID())
              CFNumberGetValue(v19, kCFNumberLongLongType, &valuePtr);
          }
          CFRelease(v17);
          v15 = valuePtr;
        }
        strideRequirement_requirement = v15;
        IOObjectRelease(v14);
      }
      strideRequirement_checked = 1;
    }
    *a3 = strideRequirement_requirement;
  }
}

void FigGetAlignmentForIOSurfaceOutput(_DWORD *a1, _DWORD *a2)
{
  FigGetAlignmentForIOSurfaceOutputToDisplayService((uint64_t)a1, a1, a2);
}

uint64_t FigGetNumberOfScalerCores()
{
  _OWORD v1[4];
  __int128 v2;
  __int128 v3;
  uint64_t v4;

  v4 = 0;
  v2 = 0u;
  v3 = 0u;
  memset(v1, 0, sizeof(v1));
  scalerCapabilities((uint64_t)v1);
  return DWORD2(v2);
}

uint64_t scalerCapabilities(uint64_t result)
{
  uint64_t v1;
  mach_port_t v2;
  const __CFDictionary *v3;
  io_object_t v4;
  const __CFDictionary *v5;
  const __CFDictionary *v6;
  const __CFNumber *Value;
  const __CFNumber *v8;
  CFTypeID v9;
  const __CFNumber *v10;
  const __CFNumber *v11;
  CFTypeID v12;
  const __CFNumber *v13;
  const __CFNumber *v14;
  CFTypeID v15;
  const __CFNumber *v16;
  const __CFNumber *v17;
  CFTypeID v18;
  const __CFNumber *v19;
  const __CFNumber *v20;
  CFTypeID v21;
  const __CFNumber *v22;
  const __CFNumber *v23;
  CFTypeID v24;
  const __CFNumber *v25;
  const __CFNumber *v26;
  CFTypeID v27;
  const __CFNumber *v28;
  const __CFNumber *v29;
  CFTypeID v30;
  const __CFNumber *v31;
  const __CFNumber *v32;
  CFTypeID v33;
  const __CFNumber *v34;
  const __CFNumber *v35;
  CFTypeID v36;
  const __CFNumber *v37;
  const __CFNumber *v38;
  CFTypeID v39;
  const __CFNumber *v40;
  const __CFNumber *v41;
  CFTypeID v42;
  const __CFNumber *v43;
  const __CFNumber *v44;
  CFTypeID v45;
  const __CFNumber *v46;
  const __CFNumber *v47;
  CFTypeID v48;
  const __CFNumber *v49;
  const __CFNumber *v50;
  CFTypeID v51;
  const __CFNumber *v52;
  const __CFNumber *v53;
  CFTypeID v54;
  const __CFNumber *v55;
  const __CFNumber *v56;
  CFTypeID v57;
  const __CFNumber *v58;
  const __CFNumber *v59;
  CFTypeID v60;
  const __CFNumber *v61;
  const __CFNumber *v62;
  CFTypeID v63;
  const __CFNumber *v64;
  const __CFNumber *v65;
  CFTypeID v66;
  const __CFNumber *v67;
  const __CFNumber *v68;
  CFTypeID v69;
  const __CFNumber *v70;
  const __CFNumber *v71;
  CFTypeID v72;
  const __CFNumber *v73;
  const __CFNumber *v74;
  CFTypeID v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t valuePtr;
  uint64_t v92;

  v1 = result;
  if ((scalerCapabilities_checked & 1) == 0)
  {
    v2 = *MEMORY[0x1E0CBBAA8];
    v3 = IOServiceMatching("AppleM2ScalerCSCDriver");
    result = IOServiceGetMatchingService(v2, v3);
    if ((_DWORD)result)
    {
      v4 = result;
      valuePtr = 0;
      v92 = 0;
      v89 = 0;
      v90 = 0;
      v87 = 0;
      v88 = 0;
      scalerCapabilities_flagCropping = 1;
      v5 = (const __CFDictionary *)IORegistryEntrySearchCFProperty(result, "IOService", CFSTR("IOSurfaceAcceleratorCapabilitiesDict"), 0, 0);
      if (v5)
      {
        v6 = v5;
        Value = (const __CFNumber *)CFDictionaryGetValue(v5, CFSTR("IOSurfaceAcceleratorFormatInInterleaved422"));
        if (Value)
        {
          v8 = Value;
          v9 = CFGetTypeID(Value);
          if (v9 == CFNumberGetTypeID())
          {
            CFNumberGetValue(v8, kCFNumberLongLongType, &valuePtr);
            if (valuePtr)
              scalerCapabilities_flagYUVS = 1;
          }
        }
        v10 = (const __CFNumber *)CFDictionaryGetValue(v6, CFSTR("IOSurfaceAcceleratorCapabilitiesIdentityCSC"));
        if (v10)
        {
          v11 = v10;
          v12 = CFGetTypeID(v10);
          if (v12 == CFNumberGetTypeID())
          {
            CFNumberGetValue(v11, kCFNumberLongLongType, &v90);
            if (v90)
              scalerCapabilities_flagRangeConversion = 1;
          }
        }
        v13 = (const __CFNumber *)CFDictionaryGetValue(v6, CFSTR("kSurfaceAcceleratorCapabilitiesColorManager"));
        if (v13)
        {
          v14 = v13;
          v15 = CFGetTypeID(v13);
          if (v15 == CFNumberGetTypeID())
          {
            CFNumberGetValue(v14, kCFNumberLongLongType, &v89);
            if (v89)
              scalerCapabilities_flagColorConversion = 1;
          }
        }
        v16 = (const __CFNumber *)CFDictionaryGetValue(v6, CFSTR("IOSurfaceAcceleratorCapabilitiesHDR"));
        if (v16)
        {
          v17 = v16;
          v18 = CFGetTypeID(v16);
          if (v18 == CFNumberGetTypeID())
          {
            CFNumberGetValue(v17, kCFNumberLongLongType, &v88);
            if (v88)
              scalerCapabilities_flagHDR = 1;
          }
        }
        v19 = (const __CFNumber *)CFDictionaryGetValue(v6, CFSTR("IOSurfaceAcceleratorCapabilitiesFractionalDimensions"));
        if (v19)
        {
          v20 = v19;
          v21 = CFGetTypeID(v19);
          if (v21 == CFNumberGetTypeID())
          {
            v86 = 0;
            CFNumberGetValue(v20, kCFNumberLongLongType, &v86);
            if (v86)
              scalerCapabilities_flagFractionalDimensionsSupport = 1;
          }
        }
        v22 = (const __CFNumber *)CFDictionaryGetValue(v6, CFSTR("IOSurfaceAcceleratorCapabilitiesMaxSourceWidth"));
        if (v22)
        {
          v23 = v22;
          v24 = CFGetTypeID(v22);
          if (v24 == CFNumberGetTypeID())
            CFNumberGetValue(v23, kCFNumberLongLongType, &scalerCapabilities_maxSourceWidthVal);
        }
        v25 = (const __CFNumber *)CFDictionaryGetValue(v6, CFSTR("IOSurfaceAcceleratorCapabilitiesMaxSourceHeight"));
        if (v25)
        {
          v26 = v25;
          v27 = CFGetTypeID(v25);
          if (v27 == CFNumberGetTypeID())
            CFNumberGetValue(v26, kCFNumberLongLongType, &scalerCapabilities_maxSourceHeightVal);
        }
        v28 = (const __CFNumber *)CFDictionaryGetValue(v6, CFSTR("IOSurfaceAcceleratorCapabilitiesMaxDestWidth"));
        if (v28)
        {
          v29 = v28;
          v30 = CFGetTypeID(v28);
          if (v30 == CFNumberGetTypeID())
            CFNumberGetValue(v29, kCFNumberLongLongType, &scalerCapabilities_maxDestWidthVal);
        }
        v31 = (const __CFNumber *)CFDictionaryGetValue(v6, CFSTR("IOSurfaceAcceleratorCapabilitiesMaxDestHeight"));
        if (v31)
        {
          v32 = v31;
          v33 = CFGetTypeID(v31);
          if (v33 == CFNumberGetTypeID())
            CFNumberGetValue(v32, kCFNumberLongLongType, &scalerCapabilities_maxDestHeightVal);
        }
        v34 = (const __CFNumber *)CFDictionaryGetValue(v6, CFSTR("IOSurfaceAcceleratorScalerVersion"));
        if (v34)
        {
          v35 = v34;
          v36 = CFGetTypeID(v34);
          if (v36 == CFNumberGetTypeID())
          {
            CFNumberGetValue(v35, kCFNumberLongLongType, &v87);
            if (v87 >= 262151)
              scalerCapabilities_numScalerCores = 1;
          }
        }
        v37 = (const __CFNumber *)CFDictionaryGetValue(v6, CFSTR("IOSurfaceAcceleratorFormatInRGBA8888"));
        if (v37)
        {
          v38 = v37;
          v39 = CFGetTypeID(v37);
          if (v39 == CFNumberGetTypeID())
          {
            CFNumberGetValue(v38, kCFNumberLongLongType, &valuePtr);
            if (valuePtr)
              scalerCapabilities_flagRGBA = 1;
          }
        }
        v40 = (const __CFNumber *)CFDictionaryGetValue(v6, CFSTR("IOSurfaceAcceleratorFormatInARGB2101010"));
        if (v40)
        {
          v41 = v40;
          v42 = CFGetTypeID(v40);
          if (v42 == CFNumberGetTypeID())
          {
            CFNumberGetValue(v41, kCFNumberLongLongType, &valuePtr);
            if (valuePtr)
              scalerCapabilities_flagInw30r = 1;
          }
        }
        v43 = (const __CFNumber *)CFDictionaryGetValue(v6, CFSTR("IOSurfaceAcceleratorFormatOutARGB2101010"));
        if (v43)
        {
          v44 = v43;
          v45 = CFGetTypeID(v43);
          if (v45 == CFNumberGetTypeID())
          {
            CFNumberGetValue(v44, kCFNumberLongLongType, &valuePtr);
            if (valuePtr)
              scalerCapabilities_flagOutw30r = 1;
          }
        }
        v46 = (const __CFNumber *)CFDictionaryGetValue(v6, CFSTR("IOSurfaceAcceleratorFormatInARGB8101010"));
        if (v46)
        {
          v47 = v46;
          v48 = CFGetTypeID(v46);
          if (v48 == CFNumberGetTypeID())
          {
            CFNumberGetValue(v47, kCFNumberLongLongType, &valuePtr);
            if (valuePtr)
              scalerCapabilities_flagInb3a8 = 1;
          }
        }
        v49 = (const __CFNumber *)CFDictionaryGetValue(v6, CFSTR("IOSurfaceAcceleratorFormatOutARGB8101010"));
        if (v49)
        {
          v50 = v49;
          v51 = CFGetTypeID(v49);
          if (v51 == CFNumberGetTypeID())
          {
            CFNumberGetValue(v50, kCFNumberLongLongType, &valuePtr);
            if (valuePtr)
              scalerCapabilities_flagOutb3a8 = 1;
          }
        }
        v52 = (const __CFNumber *)CFDictionaryGetValue(v6, CFSTR("IOSurfaceAcceleratorFormatIn1PlaneYCBCR10444"));
        if (v52)
        {
          v53 = v52;
          v54 = CFGetTypeID(v52);
          if (v54 == CFNumberGetTypeID())
          {
            CFNumberGetValue(v53, kCFNumberLongLongType, &valuePtr);
            if (valuePtr)
              scalerCapabilities_flagIn1PlaneYCBCR10Bit444 = 1;
          }
        }
        if (FigCFDictionaryGetInt64IfPresent() && valuePtr)
          scalerCapabilities_flagInLumaOnlyL008 = 1;
        if (FigCFDictionaryGetInt64IfPresent() && valuePtr)
          scalerCapabilities_flagInLumaOnlyL010 = 1;
        if (FigCFDictionaryGetInt64IfPresent() && valuePtr)
          scalerCapabilities_flagInLumaOnlyL016 = 1;
        v55 = (const __CFNumber *)CFDictionaryGetValue(v6, CFSTR("IOSurfaceAcceleratorFormatOut1PlaneYCBCR10444"));
        if (v55)
        {
          v56 = v55;
          v57 = CFGetTypeID(v55);
          if (v57 == CFNumberGetTypeID())
          {
            CFNumberGetValue(v56, kCFNumberLongLongType, &valuePtr);
            if (valuePtr)
              scalerCapabilities_flagOut1PlaneYCBCR10Bit444 = 1;
          }
        }
        v58 = (const __CFNumber *)CFDictionaryGetValue(v6, CFSTR("IOSurfaceAcceleratorFormatIn2Planes42010"));
        if (v58)
        {
          v59 = v58;
          v60 = CFGetTypeID(v58);
          if (v60 == CFNumberGetTypeID())
          {
            CFNumberGetValue(v59, kCFNumberLongLongType, &valuePtr);
            if (valuePtr)
              scalerCapabilities_flagIn2PlanesYCBCR10Bit420 = 1;
          }
        }
        v61 = (const __CFNumber *)CFDictionaryGetValue(v6, CFSTR("IOSurfaceAcceleratorFormatOut2Planes42010"));
        if (v61)
        {
          v62 = v61;
          v63 = CFGetTypeID(v61);
          if (v63 == CFNumberGetTypeID())
          {
            CFNumberGetValue(v62, kCFNumberLongLongType, &valuePtr);
            if (valuePtr)
              scalerCapabilities_flagOut2PlanesYCBCR10Bit420 = 1;
          }
        }
        v64 = (const __CFNumber *)CFDictionaryGetValue(v6, CFSTR("IOSurfaceAcceleratorFormatIn2Planes42210"));
        if (v64)
        {
          v65 = v64;
          v66 = CFGetTypeID(v64);
          if (v66 == CFNumberGetTypeID())
          {
            CFNumberGetValue(v65, kCFNumberLongLongType, &valuePtr);
            if (valuePtr)
              scalerCapabilities_flagIn2PlanesYCBCR10Bit422 = 1;
          }
        }
        v67 = (const __CFNumber *)CFDictionaryGetValue(v6, CFSTR("IOSurfaceAcceleratorFormatOut2Planes42210"));
        if (v67)
        {
          v68 = v67;
          v69 = CFGetTypeID(v67);
          if (v69 == CFNumberGetTypeID())
          {
            CFNumberGetValue(v68, kCFNumberLongLongType, &valuePtr);
            if (valuePtr)
              scalerCapabilities_flagOut2PlanesYCBCR10Bit422 = 1;
          }
        }
        v70 = (const __CFNumber *)CFDictionaryGetValue(v6, CFSTR("IOSurfaceAcceleratorFormatIn2Planes44410"));
        if (v70)
        {
          v71 = v70;
          v72 = CFGetTypeID(v70);
          if (v72 == CFNumberGetTypeID())
          {
            CFNumberGetValue(v71, kCFNumberLongLongType, &valuePtr);
            if (valuePtr)
              scalerCapabilities_flagIn2PlanesYCBCR10Bit444 = 1;
          }
        }
        v73 = (const __CFNumber *)CFDictionaryGetValue(v6, CFSTR("IOSurfaceAcceleratorFormatOut2Planes44410"));
        if (v73)
        {
          v74 = v73;
          v75 = CFGetTypeID(v73);
          if (v75 == CFNumberGetTypeID())
          {
            CFNumberGetValue(v74, kCFNumberLongLongType, &valuePtr);
            if (valuePtr)
              scalerCapabilities_flagOut2PlanesYCBCR10Bit444 = 1;
          }
        }
        if (FigCFDictionaryGetInt64IfPresent() && valuePtr)
          scalerCapabilities_flagInMediaCompression = 1;
        if (FigCFDictionaryGetInt64IfPresent() && valuePtr)
          scalerCapabilities_flagOutMediaCompression = 1;
        if (FigCFDictionaryGetInt64IfPresent() && valuePtr)
          scalerCapabilities_flagInterchangeCompression = 1;
        if (FigCFDictionaryGetInt64IfPresent() && valuePtr)
          scalerCapabilities_flagInterchangeLossyCompression = 1;
        if (FigCFDictionaryGetInt64IfPresent() && valuePtr)
          scalerCapabilities_flagOutLumaOnlyL008 = 1;
        if (FigCFDictionaryGetInt64IfPresent() && valuePtr)
          scalerCapabilities_flagOutLumaOnlyL010 = 1;
        if (FigCFDictionaryGetInt64IfPresent() && valuePtr)
          scalerCapabilities_flagOutLumaOnlyL016 = 1;
        if (FigCFDictionaryGetInt64IfPresent() && valuePtr)
          scalerCapabilities_flag12bitYCbCr = 1;
        if (FigCFDictionaryGetInt64IfPresent() && valuePtr)
          scalerCapabilities_flag16bitYCbCr = 1;
        if (FigCFDictionaryGetInt64IfPresent() && valuePtr)
          scalerCapabilities_flagYCbCrAlpha = 1;
        if (FigCFDictionaryGetInt64IfPresent() && v92)
          *(float *)&scalerCapabilities_maxWidthScaleFactorVal = (float)v92;
        if (FigCFDictionaryGetInt64IfPresent() && v92)
          *(float *)&scalerCapabilities_minWidthScaleFactorVal = 1.0 / (float)v92;
        if (FigCFDictionaryGetInt64IfPresent() && v92)
          *(float *)&scalerCapabilities_maxHeightScaleFactorVal = (float)v92;
        if (FigCFDictionaryGetInt64IfPresent() && v92)
        {
          *(float *)&v76 = 1.0 / (float)v92;
          scalerCapabilities_minHeightScaleFactorVal = v76;
        }
        else
        {
          v76 = scalerCapabilities_minHeightScaleFactorVal;
        }
        v77 = scalerCapabilities_minWidthScaleFactorVal;
        if (*(float *)&scalerCapabilities_minWidthScaleFactorVal < *(float *)&v76)
        {
          scalerCapabilities_minWidthScaleFactorVal = v76;
          v77 = v76;
        }
        if (*(float *)&v76 < *(float *)&v77)
          scalerCapabilities_minHeightScaleFactorVal = v77;
        if (*(float *)&scalerCapabilities_maxWidthScaleFactorVal <= *(float *)&scalerCapabilities_maxHeightScaleFactorVal)
        {
          if (*(float *)&scalerCapabilities_maxHeightScaleFactorVal > *(float *)&scalerCapabilities_maxWidthScaleFactorVal)
            scalerCapabilities_maxHeightScaleFactorVal = scalerCapabilities_maxWidthScaleFactorVal;
        }
        else
        {
          scalerCapabilities_maxWidthScaleFactorVal = scalerCapabilities_maxHeightScaleFactorVal;
        }
        if (FigCFDictionaryGetInt64IfPresent() && v92)
          scalerCapabilities_vTapsVal = v92;
        if (FigCFDictionaryGetInt64IfPresent() && v92)
          scalerCapabilities_hTapsVal = v92;
        if (FigCFDictionaryGetInt64IfPresent() && v92)
          scalerCapabilities_vPhasesVal = v92;
        if (FigCFDictionaryGetInt64IfPresent() && v92)
          scalerCapabilities_hPhasesVal = v92;
        if (FigCFDictionaryGetInt64IfPresent() && v92)
          scalerCapabilities_prePointBitsVal = v92;
        if (FigCFDictionaryGetInt64IfPresent() && v92)
          scalerCapabilities_postPointBitsVal = v92;
        CFRelease(v6);
      }
      result = IOObjectRelease(v4);
    }
    scalerCapabilities_checked = 1;
  }
  if (v1)
  {
    *(_BYTE *)v1 = scalerCapabilities_flagCropping;
    *(_BYTE *)(v1 + 1) = scalerCapabilities_flagColorConversion;
    *(_BYTE *)(v1 + 16) = scalerCapabilities_flagHDR;
    *(_BYTE *)(v1 + 17) = scalerCapabilities_flagFractionalDimensionsSupport;
    *(_BYTE *)(v1 + 2) = scalerCapabilities_flagYUVS;
    *(_BYTE *)(v1 + 3) = scalerCapabilities_flagRGBA;
    *(_BYTE *)(v1 + 4) = scalerCapabilities_flagInw30r & scalerCapabilities_flagOutw30r & 1;
    *(_BYTE *)(v1 + 5) = scalerCapabilities_flagInb3a8 & scalerCapabilities_flagOutb3a8 & 1;
    *(_BYTE *)(v1 + 9) = scalerCapabilities_flagIn1PlaneYCBCR10Bit444 & scalerCapabilities_flagOut1PlaneYCBCR10Bit444 & 1;
    *(_BYTE *)(v1 + 10) = scalerCapabilities_flagIn2PlanesYCBCR10Bit420 & scalerCapabilities_flagOut2PlanesYCBCR10Bit420 & 1;
    *(_BYTE *)(v1 + 11) = scalerCapabilities_flagIn2PlanesYCBCR10Bit422 & scalerCapabilities_flagOut2PlanesYCBCR10Bit422 & 1;
    *(_BYTE *)(v1 + 12) = scalerCapabilities_flagIn2PlanesYCBCR10Bit444 & scalerCapabilities_flagOut2PlanesYCBCR10Bit444 & 1;
    *(_BYTE *)(v1 + 13) = scalerCapabilities_flagInMediaCompression & scalerCapabilities_flagOutMediaCompression & 1;
    *(_BYTE *)(v1 + 14) = scalerCapabilities_flagInterchangeCompression;
    *(_BYTE *)(v1 + 76) = scalerCapabilities_flagInterchangeLossyCompression;
    *(_BYTE *)(v1 + 6) = scalerCapabilities_flagInLumaOnlyL008 & scalerCapabilities_flagOutLumaOnlyL008 & 1;
    *(_BYTE *)(v1 + 7) = scalerCapabilities_flagInLumaOnlyL010 & scalerCapabilities_flagOutLumaOnlyL010 & 1;
    *(_BYTE *)(v1 + 8) = scalerCapabilities_flagInLumaOnlyL016 & scalerCapabilities_flagOutLumaOnlyL016 & 1;
    *(_BYTE *)(v1 + 15) = scalerCapabilities_flagRangeConversion;
    *(_BYTE *)(v1 + 77) = scalerCapabilities_flag12bitYCbCr;
    *(_BYTE *)(v1 + 78) = scalerCapabilities_flag16bitYCbCr;
    *(_BYTE *)(v1 + 79) = scalerCapabilities_flagYCbCrAlpha;
    v78 = scalerCapabilities_maxSourceHeightVal;
    *(_QWORD *)(v1 + 24) = scalerCapabilities_maxSourceWidthVal;
    *(_QWORD *)(v1 + 32) = v78;
    v79 = scalerCapabilities_maxDestHeightVal;
    *(_QWORD *)(v1 + 40) = scalerCapabilities_maxDestWidthVal;
    *(_QWORD *)(v1 + 48) = v79;
    v80 = scalerCapabilities_minWidthScaleFactorVal;
    *(_DWORD *)(v1 + 56) = scalerCapabilities_maxWidthScaleFactorVal;
    *(_DWORD *)(v1 + 60) = v80;
    v81 = scalerCapabilities_minHeightScaleFactorVal;
    *(_DWORD *)(v1 + 64) = scalerCapabilities_maxHeightScaleFactorVal;
    *(_DWORD *)(v1 + 68) = v81;
    if (scalerCapabilities_numScalerCores)
      v82 = 2;
    else
      v82 = 1;
    *(_DWORD *)(v1 + 72) = v82;
    v83 = scalerCapabilities_hTapsVal;
    *(_DWORD *)(v1 + 80) = scalerCapabilities_vTapsVal;
    *(_DWORD *)(v1 + 84) = v83;
    v84 = scalerCapabilities_hPhasesVal;
    *(_DWORD *)(v1 + 88) = scalerCapabilities_vPhasesVal;
    *(_DWORD *)(v1 + 92) = v84;
    v85 = scalerCapabilities_postPointBitsVal;
    *(_DWORD *)(v1 + 96) = scalerCapabilities_prePointBitsVal;
    *(_DWORD *)(v1 + 100) = v85;
  }
  return result;
}

uint64_t FigGetIOSurfaceAcceleratorCapabilityFractionalDimensions()
{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  v7 = 0;
  v5 = 0u;
  v6 = 0u;
  v3 = 0u;
  v4 = 0u;
  v1 = 0u;
  v2 = 0u;
  scalerCapabilities((uint64_t)&v1);
  return BYTE1(v2);
}

uint64_t FigGetCacheModeForCPUProcessing()
{
  return 768;
}

CFDictionaryRef FigCreateIOSurfacePropertiesDictionaryWithCacheMode(int a1)
{
  CFNumberRef v1;
  CFDictionaryRef v2;
  int valuePtr;
  void *values[2];
  void *keys[3];

  keys[2] = *(void **)MEMORY[0x1E0C80C00];
  valuePtr = a1;
  keys[1] = 0;
  values[1] = 0;
  v1 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  keys[0] = *(void **)MEMORY[0x1E0CBBF10];
  values[0] = v1;
  v2 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v1)
    CFRelease(v1);
  return v2;
}

uint64_t FigCreatePixelBufferAttributesWithIOSurfaceSupport(const void *a1, int a2, __CFDictionary **a3)
{
  __CFDictionary *v6;
  CFAllocatorRef *v7;
  CFTypeRef Value;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  CFTypeRef v17;
  CFTypeID v18;
  void *ArrayWithCacheModes;
  uint64_t v20;
  CFDictionaryRef v21;
  char v22;
  __CFDictionary *MutableCopy;
  __CFDictionary *v25;
  __CFDictionary *v26;
  void *values;
  void *keys[2];

  keys[1] = *(void **)MEMORY[0x1E0C80C00];
  if (a3)
  {
    if (VTAvoidIOSurfaceBackings())
    {
      if (a1)
        v6 = (__CFDictionary *)CFRetain(a1);
      else
        v6 = 0;
      v20 = 0;
      *a3 = v6;
      return v20;
    }
    v7 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
    if (a1)
    {
      Value = CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x1E0CA8FF0]);
      v9 = (void *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x1E0CA8F80]);
      if (Value)
      {
        v17 = CFRetain(Value);
        if (!v9)
          goto LABEL_8;
        goto LABEL_17;
      }
    }
    else
    {
      v9 = 0;
    }
    values = 0;
    keys[0] = 0;
    v21 = CFDictionaryCreate(*v7, (const void **)keys, (const void **)&values, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!v21)
      return FigSignalErrorAt();
    v17 = v21;
    Value = 0;
    if (!v9)
    {
LABEL_8:
      if (v17)
      {
        v18 = CFGetTypeID(v17);
        if (v18 == CFDictionaryGetTypeID())
        {
          if (CFDictionaryGetValue((CFDictionaryRef)v17, (const void *)*MEMORY[0x1E0CBBF10]))
          {
            ArrayWithCacheModes = 0;
LABEL_28:
            if (Value == v17 && v9 == ArrayWithCacheModes)
            {
              if (a1)
                v26 = (__CFDictionary *)CFRetain(a1);
              else
                v26 = 0;
              v20 = 0;
              *a3 = v26;
              if (!v17)
                goto LABEL_47;
              goto LABEL_46;
            }
            v22 = 1;
            v9 = ArrayWithCacheModes;
LABEL_33:
            MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
            if (MutableCopy)
            {
              v25 = MutableCopy;
              CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E0CA8FF0], v17);
              if (v9)
                CFDictionarySetValue(v25, (const void *)*MEMORY[0x1E0CA8F80], v9);
              if ((v22 & 1) == 0)
                CFDictionarySetValue(v25, CFSTR("PreferRealTimeCacheModeIfEveryoneDoes"), (const void *)*MEMORY[0x1E0C9AE50]);
              v20 = 0;
              *a3 = v25;
              if (!v17)
                goto LABEL_47;
              goto LABEL_46;
            }
            v20 = FigSignalErrorAt();
            if (!v17)
            {
LABEL_47:
              if (v9)
                CFRelease(v9);
              return v20;
            }
LABEL_46:
            CFRelease(v17);
            goto LABEL_47;
          }
        }
      }
      if ((a2 - 1) >= 4)
      {
        if (a2)
        {
          if (a2 != 5)
            goto LABEL_50;
          if (displayRequiresRealTimeCacheMode_sCheckOnce != -1)
            dispatch_once(&displayRequiresRealTimeCacheMode_sCheckOnce, &__block_literal_global_9);
          if (displayRequiresRealTimeCacheMode_isTrueUCEnabled)
          {
            v22 = 0;
            v9 = 0;
            goto LABEL_33;
          }
        }
        ArrayWithCacheModes = createArrayWithCacheModes(1024, v10, v11, v12, v13, v14, v15, v16, 1280);
      }
      else
      {
        ArrayWithCacheModes = createArrayWithCacheModes(768, v10, v11, v12, v13, v14, v15, v16, 0);
      }
      if (ArrayWithCacheModes)
        goto LABEL_28;
LABEL_50:
      v20 = FigSignalErrorAt();
      ArrayWithCacheModes = 0;
      if ((_DWORD)v20)
      {
        v9 = 0;
        if (!v17)
          goto LABEL_47;
        goto LABEL_46;
      }
      goto LABEL_28;
    }
LABEL_17:
    ArrayWithCacheModes = (void *)CFRetain(v9);
    goto LABEL_28;
  }
  return FigSignalErrorAt();
}

__CFArray *FigCreatePixelBufferCacheModeArray(int a1)
{
  const __CFAllocator *v2;
  __CFArray *Mutable;
  uint64_t i;
  int v5;
  CFNumberRef v7;
  CFNumberRef v8;
  CFNumberRef v9;
  CFNumberRef v10;
  int valuePtr;
  int v13;

  valuePtr = 768;
  v13 = a1;
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
  {
    FigSignalErrorAt();
    return Mutable;
  }
  for (i = 0; i != 6; ++i)
  {
    v5 = dword_1928E25A0[i];
    if (v5 != a1 && i != 3)
      appendIntToArray(v5, Mutable);
  }
  if (a1 != 768)
  {
    v7 = CFNumberCreate(v2, kCFNumberSInt32Type, &valuePtr);
    if (!v7)
    {
LABEL_15:
      FigSignalErrorAt();
      CFRelease(Mutable);
      return 0;
    }
    v8 = v7;
    CFArrayInsertValueAtIndex(Mutable, 0, v7);
    CFRelease(v8);
  }
  v9 = CFNumberCreate(v2, kCFNumberSInt32Type, &v13);
  if (!v9)
    goto LABEL_15;
  v10 = v9;
  CFArrayInsertValueAtIndex(Mutable, 0, v9);
  CFRelease(v10);
  return Mutable;
}

uint64_t appendIntToArray(int a1, __CFArray *a2)
{
  CFNumberRef v3;
  CFNumberRef v4;
  int valuePtr;

  valuePtr = a1;
  v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  if (!v3)
    return FigSignalErrorAt();
  v4 = v3;
  CFArrayAppendValue(a2, v3);
  CFRelease(v4);
  return 0;
}

uint64_t FigCreateIOSurfaceBackedCVPixelBufferWithAttributes(int a1, int a2, OSType a3, CFDictionaryRef theDict, CVPixelBufferRef *a5)
{
  CFAllocatorRef *v9;
  CFMutableDictionaryRef MutableCopy;
  __CFDictionary *v11;
  CFDictionaryRef IOSurfacePropertiesDictionary;
  CFDictionaryRef v13;
  uint64_t v14;

  v9 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (theDict)
    MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, theDict);
  else
    MutableCopy = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v11 = MutableCopy;
  IOSurfacePropertiesDictionary = FigCreateIOSurfacePropertiesDictionary();
  if (IOSurfacePropertiesDictionary)
  {
    v13 = IOSurfacePropertiesDictionary;
    if (!VTAvoidIOSurfaceBackings())
      CFDictionarySetValue(v11, (const void *)*MEMORY[0x1E0CA8FF0], v13);
    CFRelease(v13);
  }
  v14 = CVPixelBufferCreate(*v9, a1, a2, a3, v11, a5);
  CFRelease(v11);
  return v14;
}

uint64_t FigCreateProtectedIOSurfaceBackedCVPixelBufferWithAttributes(int a1, int a2, OSType a3, uint64_t a4, uint64_t a5, CVPixelBufferRef *a6)
{
  const __CFAllocator *v11;
  __CFDictionary *MutableCopy;
  CFDictionaryRef IOSurfacePropertiesDictionary;
  const void *v14;
  uint64_t v15;

  v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  IOSurfacePropertiesDictionary = FigCreateIOSurfacePropertiesDictionary();
  v14 = (const void *)FigCFDictionaryCreateMutableCopy();
  if (a5)
    FigCFDictionarySetInt64();
  CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E0CA8FF0], v14);
  v15 = CVPixelBufferCreate(v11, a1, a2, a3, MutableCopy, a6);
  if (MutableCopy)
    CFRelease(MutableCopy);
  if (IOSurfacePropertiesDictionary)
    CFRelease(IOSurfacePropertiesDictionary);
  if (v14)
    CFRelease(v14);
  return v15;
}

uint64_t getH3clcdService()
{
  mach_port_t v0;
  const __CFDictionary *v1;
  uint64_t result;
  const __CFDictionary *v3;
  const __CFDictionary *v4;

  v0 = *MEMORY[0x1E0CBBAA8];
  v1 = IOServiceMatching("AppleCLCD");
  result = IOServiceGetMatchingService(v0, v1);
  if (!(_DWORD)result)
  {
    v3 = IOServiceMatching("AppleCLCD2");
    result = IOServiceGetMatchingService(v0, v3);
    if (!(_DWORD)result)
    {
      v4 = IOServiceMatching("AppleRGBOUT");
      return IOServiceGetMatchingService(v0, v4);
    }
  }
  return result;
}

uint64_t __displayRequiresRealTimeCacheMode_block_invoke()
{
  uint64_t result;
  size_t v1;
  int v2;

  v2 = 0;
  v1 = 4;
  result = sysctlbyname("hw.optional.ucnormal_mem", &v2, &v1, 0, 0);
  if (!(_DWORD)result)
    displayRequiresRealTimeCacheMode_isTrueUCEnabled = v2 != 0;
  return result;
}

CFMutableArrayRef createArrayWithCacheModes(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CFMutableArrayRef Mutable;
  int *v11;
  int *v13;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    if (appendIntToArray(a1, Mutable))
    {
LABEL_6:
      CFRelease(Mutable);
      return 0;
    }
    else
    {
      v13 = (int *)&a9;
      while (1)
      {
        v11 = v13;
        v13 += 2;
        if (*v11 < 0)
          break;
        if (appendIntToArray(*v11, Mutable))
          goto LABEL_6;
      }
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  return Mutable;
}

uint64_t figIOSurfaceAcceleratedPixelTransfer_Transfer(int a1, int a2, CVPixelBufferRef pixelBuffer, uint64_t a4, __CVBuffer *a5)
{
  uint64_t v6;

  CVPixelBufferGetIOSurface(pixelBuffer);
  CVPixelBufferGetIOSurface(a5);
  v6 = IOSurfaceAcceleratorTransferSurface();
  if ((_DWORD)v6)
    FigSignalErrorAt();
  return v6;
}

IOSurfaceRef figIOSurfaceAcceleratedPixelTransfer_ValidateM2(__CVBuffer *a1, __CVBuffer *a2)
{
  size_t Width;
  size_t Height;
  size_t v6;
  size_t v7;
  OSType PixelFormatType;
  OSType v9;
  OSType v10;
  _BOOL4 v11;
  _BOOL4 v14;
  const __CFString *v15;
  CFTypeRef v16;
  const __CFString *v17;
  CFTypeRef v18;
  CFTypeRef v19;
  CFTypeRef v20;
  const void *v21;
  _BOOL4 v22;
  IOSurfaceRef result;
  IOSurfaceRef IOSurface;
  int v25;
  int v26;
  int v27;
  int v28;
  unint64_t v29;
  _BOOL4 v30;
  _BOOL4 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v38 = 0;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  v6 = CVPixelBufferGetWidth(a2);
  v7 = CVPixelBufferGetHeight(a2);
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  v9 = CVPixelBufferGetPixelFormatType(a2);
  v10 = v9;
  v11 = 0;
  v29 = v6;
  if (Width >= v6 && Height >= v7)
    v11 = v9 == 1111970369 || (v9 & 0xFFFFFFEF) == 875704422;
  v31 = v11;
  scalerCapabilities((uint64_t)&v32);
  v14 = (PixelFormatType & 0xFFFFFFEF) != 0x34323066 || v10 != 1111970369;
  if ((Height & 1) == 0)
    v14 = 1;
  if (Height != v7)
    v14 = 1;
  v30 = v14;
  v15 = (const __CFString *)*MEMORY[0x1E0CA8E98];
  v16 = CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8E98], 0);
  v17 = (const __CFString *)*MEMORY[0x1E0CA8D68];
  v18 = CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8D68], 0);
  v19 = CVBufferCopyAttachment(a2, v15, 0);
  v20 = CVBufferCopyAttachment(a2, v17, 0);
  v21 = v20;
  if (v10 == 1380411457 && v16 && v19 && v18 && v20)
  {
    v22 = FigCFEqual() && FigCFEqual() || FigCFEqual() != 0;
  }
  else
  {
    v22 = 1;
    if (!v16)
    {
      if (!v18)
        goto LABEL_30;
      goto LABEL_29;
    }
  }
  CFRelease(v16);
  if (v18)
LABEL_29:
    CFRelease(v18);
LABEL_30:
  if (v19)
    CFRelease(v19);
  if (v21)
    CFRelease(v21);
  result = CVPixelBufferGetIOSurface(a1);
  if (result)
  {
    IOSurface = CVPixelBufferGetIOSurface(a2);
    result = 0;
    if (IOSurface)
    {
      if (Width >= 0x10 && Height >= 0x10)
      {
        v25 = v30 && v31;
        v26 = Width <= 0x4000 && v30 && v31;
        if (Width > *((_QWORD *)&v33 + 1) && !v26)
          return 0;
        if (Height <= (unint64_t)v34)
        {
          result = 0;
          if (v29 < 0x10 || v7 < 0x10)
            return result;
        }
        else
        {
          result = 0;
          v27 = Height <= 0x4000 && v30 && v31;
          if (v27 != 1 || v29 < 0x10 || v7 <= 0xF)
            return result;
        }
        v28 = v29 <= 0x4000 && v30 && v31;
        if (v29 > *((_QWORD *)&v34 + 1) && !v28)
          return 0;
        if (v7 > 0x4000)
          v25 = 0;
        if (v7 <= (unint64_t)v35)
          v25 = 1;
        return (IOSurfaceRef)(v25 & v22);
      }
    }
  }
  return result;
}

uint64_t getSubSampling(OSType pixelFormat)
{
  const __CFDictionary *v1;
  const __CFDictionary *v2;
  const __CFArray *Value;
  const __CFArray *v4;
  CFTypeID v5;
  CFIndex v6;
  const void *ValueAtIndex;
  CFTypeID v8;

  v1 = CVPixelFormatDescriptionCreateWithPixelFormatType((CFAllocatorRef)*MEMORY[0x1E0C9AE00], pixelFormat);
  if (v1)
  {
    v2 = v1;
    Value = (const __CFArray *)CFDictionaryGetValue(v1, (const void *)*MEMORY[0x1E0CA91B0]);
    if (Value)
    {
      v4 = Value;
      v5 = CFGetTypeID(Value);
      if (v5 == CFArrayGetTypeID() && CFArrayGetCount(v4) >= 1)
      {
        v6 = 0;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v4, v6);
          if (ValueAtIndex)
          {
            v8 = CFGetTypeID(ValueAtIndex);
            if (v8 == CFDictionaryGetTypeID())
              FigCFDictionaryGetInt32IfPresent();
          }
          ++v6;
        }
        while (CFArrayGetCount(v4) > v6);
      }
    }
    FigCFDictionaryGetInt32IfPresent();
    CFRelease(v2);
  }
  return 1;
}

BOOL figPixelFormatTypeContainsYCbCr(OSType pixelFormat)
{
  const __CFDictionary *v1;
  const __CFDictionary *v2;
  const void *v3;
  _BOOL8 v4;

  v1 = CVPixelFormatDescriptionCreateWithPixelFormatType((CFAllocatorRef)*MEMORY[0x1E0C9AE00], pixelFormat);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = (const void *)*MEMORY[0x1E0C9AE50];
  v4 = v3 == CFDictionaryGetValue(v1, (const void *)*MEMORY[0x1E0CA9188]);
  CFRelease(v2);
  return v4;
}

uint64_t isH3Platform()
{
  mach_port_t v0;
  const __CFDictionary *v1;
  io_service_t MatchingService;
  io_object_t v3;
  const __CFDictionary *v4;
  const __CFDictionary *v5;
  const __CFNumber *Value;
  const __CFNumber *v7;
  CFTypeID v8;
  uint64_t valuePtr;

  if ((isH3Platform_checked & 1) == 0)
  {
    v0 = *MEMORY[0x1E0CBBAA8];
    v1 = IOServiceMatching("AppleM2ScalerCSCDriver");
    MatchingService = IOServiceGetMatchingService(v0, v1);
    if (MatchingService)
    {
      v3 = MatchingService;
      valuePtr = 0;
      v4 = (const __CFDictionary *)IORegistryEntrySearchCFProperty(MatchingService, "IOService", CFSTR("IOSurfaceAcceleratorCapabilitiesDict"), 0, 0);
      if (v4)
      {
        v5 = v4;
        Value = (const __CFNumber *)CFDictionaryGetValue(v4, CFSTR("IOSurfaceAcceleratorScalerVersion"));
        if (Value)
        {
          v7 = Value;
          v8 = CFGetTypeID(Value);
          if (v8 == CFNumberGetTypeID())
          {
            CFNumberGetValue(v7, kCFNumberLongLongType, &valuePtr);
            if (valuePtr == 131079 || valuePtr == 131074)
              isH3Platform_isH3Platform = 1;
          }
        }
        CFRelease(v5);
      }
      IOObjectRelease(v3);
    }
    isH3Platform_checked = 1;
  }
  return isH3Platform_isH3Platform;
}

void _initAsgFilter(int a1, uint64_t a2, char a3, char a4, unsigned int *a5, double a6)
{
  int v6;
  unint64_t v8;
  int v9;
  uint64_t v10;
  double v11;
  int v12;
  int v13;
  uint64_t v14;
  size_t v15;
  unsigned int *v16;
  double *v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v29;
  __int16 v30;
  uint64_t v31;
  unsigned int *v32;
  double v33;
  unsigned int v34;
  uint64_t v35;
  double v36;
  double v37;
  unint64_t v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  size_t v44;
  unsigned int *v45;
  uint64_t v46;
  double v47;
  double v48;
  double v49;
  double v50;
  uint64_t v51;

  v45 = a5;
  v51 = *MEMORY[0x1E0C80C00];
  v46 = a2;
  if ((int)a2 >= 0)
    v6 = a2;
  else
    v6 = a2 + 1;
  if (a1 >= 1)
  {
    v8 = 0;
    v9 = v6 >> 1;
    v10 = v46;
    v44 = 8 * v46;
    v39 = (double)a1;
    v38 = a1 >> 1;
    v37 = 0.5 / a6 + -0.5;
    v36 = (double)v9;
    v50 = (double)(int)v46;
    v47 = (double)(int)v46 * -0.5;
    v48 = (double)(int)v46 * 0.5;
    v11 = (double)(unint64_t)(1 << a4);
    v40 = v9;
    v12 = ~(-1 << (a4 + a3));
    v43 = 1 << a4;
    v41 = v9 * a1;
    v42 = a1;
    v13 = -v9;
    v14 = 4 * a1;
    v15 = v44;
    v49 = 3.14159265;
    v16 = v45;
    do
    {
      MEMORY[0x1E0C80A78]();
      v17 = (double *)((char *)&v35 - ((v15 + 15) & 0xFFFFFFFF0));
      bzero(v17, v44);
      if (a6 == 1.0)
      {
        v17[v40] = 1.0;
        v18 = 1.0;
      }
      else
      {
        if ((int)v46 < 1)
          goto LABEL_29;
        v19 = 0;
        v20 = (double)(int)v8 / v39;
        if (v8 >= v38)
          v20 = v20 + -1.0;
        v21 = v37 + v20;
        v22 = v37 + v20 + v36;
        v23 = fmin(v22, v50 - v22 + -1.0);
        v18 = 0.0;
        do
        {
          if (vabdd_f64((float)(int)v19, v22) <= v23)
          {
            v24 = ((double)(v13 + (int)v19) - v21) * a6;
            v25 = v24 * v49;
            v26 = cos(v24 * v49 / v50);
            v27 = 1.0;
            if (v24 != 0.0)
            {
              v27 = 0.0;
              if (v48 > v24 && v47 < v24)
              {
                v29 = 1.0;
                if (a6 < 1.0)
                  v29 = v26;
                v27 = sin(v25) / v25 * (v26 * (v26 * (v26 * v29)));
              }
            }
            v17[v19] = v27;
            v18 = v18 + v27;
          }
          else
          {
            v17[v19] = 0.0;
          }
          ++v19;
        }
        while (v10 != v19);
      }
      if ((int)v46 >= 1)
      {
        v30 = 0;
        v31 = v10;
        v32 = v16;
        do
        {
          v33 = *v17++;
          v34 = llround(v33 / v18 * v11) & v12;
          *v32 = v34;
          v30 += v34;
          v32 = (unsigned int *)((char *)v32 + v14);
          --v31;
        }
        while (v31);
        goto LABEL_30;
      }
LABEL_29:
      v30 = 0;
LABEL_30:
      v45[v8 + v41] = (unsigned __int16)(v43 - v30 + v45[v8 + v41]);
      ++v8;
      ++v16;
    }
    while (v8 != v42);
  }
}

uint64_t VTDecompressionSessionServerStartXPC()
{
  CFMutableDictionaryRef Mutable;
  uint64_t v1;

  FigKTraceInit();
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  FigCFDictionarySetInt32();
  VTVideoCodecService_ShouldUseSeparateCodecProcessForDecode();
  v1 = FigXPCServerStart();
  if (Mutable)
    CFRelease(Mutable);
  return v1;
}

uint64_t dssxpc_ReplyingMessageHandler(uint64_t a1, void *a2)
{
  uint64_t OpCode;
  audit_token_t token;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
    return OpCode;
  *(_QWORD *)token.val = 0;
  xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E0CA36A0]);
  OpCode = FigXPCServerLookupAndRetainAssociatedObject();
  if ((_DWORD)OpCode)
    return OpCode;
  else
    return 4294949605;
}

uint64_t tddss_NoReplyMessageHandler(uint64_t a1, void *a2)
{
  uint64_t OpCode;

  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
    return OpCode;
  xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E0CA36A0]);
  OpCode = FigXPCServerLookupAndRetainAssociatedObject();
  if ((_DWORD)OpCode)
    return OpCode;
  else
    return 4294949605;
}

uint64_t tddss_MakeEnqueueDecision()
{
  return 0;
}

uint64_t dss_ServerSetupEventLink()
{
  return FigOSEventLinkServerSetCallbacks();
}

void VTDecompressionSessionXPCServer_ServiceConnectionHandler()
{
  CFMutableDictionaryRef Mutable;

  if (VTVideoCodecService_ShouldUseSeparateCodecProcessForDecode())
  {
    FigKTraceInit();
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    FigCFDictionarySetInt32();
    VTVideoCodecService_ShouldUseSeparateCodecProcessForDecode();
    FigXPCServerStartWithClientXPCConnection();
    if (Mutable)
      CFRelease(Mutable);
  }
}

uint64_t dssxpc_DecodeFrame_XPCMessage(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  uint64_t Cryptor;
  uint64_t uint64;
  int v10;
  OpaqueVTDecompressionSession *v11;
  const void *v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  uint64_t v16;
  const void *v17;
  _QWORD v19[11];
  int v20;
  CFTypeRef v21;
  CFTypeRef cf;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;

  v23 = 0;
  v24 = &v23;
  v25 = 0x2000000000;
  v26 = 0;
  v21 = 0;
  cf = 0;
  if (*(_BYTE *)(a3 + 114))
  {
    v16 = 4294954393;
  }
  else
  {
    Cryptor = FigXPCServerCopyMemoryRecipient();
    if ((_DWORD)Cryptor
      || (Cryptor = FigXPCMessageCopyCMSampleBufferWithLastCryptor(), (_DWORD)Cryptor)
      || (uint64 = xpc_dictionary_get_uint64(a4, "FrameRefCon"),
          v10 = xpc_dictionary_get_uint64(a4, "DecoderFlags"),
          Cryptor = FigXPCMessageCopyCFDictionary(),
          (_DWORD)Cryptor))
    {
      v16 = Cryptor;
    }
    else
    {
      if (xpc_dictionary_get_BOOL(a4, "RequiresMultiImageOutputHandler"))
      {
        v11 = *(OpaqueVTDecompressionSession **)(a3 + 56);
        if (!*((_QWORD *)v11 + 14))
          VTDecompressionSessionSetMultiImageCallback(v11, (VTDecompressionOutputMultiImageCallback)DecompressionMultiImageOutputCallback, (void *)a3);
      }
      FigXPCRetain();
      if (a2)
        CFRetain(a2);
      v12 = (const void *)v24[3];
      if (v12)
        CFRetain(v12);
      v13 = *(_QWORD *)(a3 + 24);
      v14 = *(NSObject **)(a3 + 88);
      v15 = *(NSObject **)(a3 + 96);
      v19[0] = MEMORY[0x1E0C809B0];
      v19[1] = 0x40000000;
      v19[2] = __dssxpc_DecodeFrame_XPCMessage_block_invoke;
      v19[3] = &unk_1E2F632B0;
      v19[4] = &v23;
      v19[5] = a2;
      v20 = v10;
      v19[6] = cf;
      v19[7] = uint64;
      v19[8] = v13;
      v19[9] = 0;
      v19[10] = a1;
      dispatch_group_async(v14, v15, v19);
      v16 = 0;
    }
  }
  v17 = (const void *)v24[3];
  if (v17)
    CFRelease(v17);
  if (v21)
    CFRelease(v21);
  if (cf)
    CFRelease(cf);
  _Block_object_dispose(&v23, 8);
  return v16;
}

uint64_t dssxpc_DecodeTile(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  uint64_t uint64;
  int v9;
  uint64_t v10;
  xpc_object_t value;
  __IOSurface *v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  CVPixelBufferRef v16;
  void *v17;
  uint64_t v18;
  NSObject *v19;
  NSObject *v20;
  uint64_t v22;
  uint64_t v23;
  _QWORD block[10];
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  CFTypeRef v33;
  CVPixelBufferRef pixelBufferOut;
  CFTypeRef v35;

  pixelBufferOut = 0;
  v35 = 0;
  v33 = 0;
  if (!a2)
  {
    v14 = 0;
    goto LABEL_34;
  }
  if (*(_BYTE *)(a3 + 114))
  {
    v12 = 0;
    v14 = 4294954393;
    goto LABEL_23;
  }
  v7 = FigXPCServerCopyMemoryRecipient();
  if ((_DWORD)v7 || (v7 = VTCopyCMSampleBufferFromXPCMessage(), (_DWORD)v7))
  {
    v14 = v7;
LABEL_34:
    v12 = 0;
    goto LABEL_23;
  }
  uint64 = xpc_dictionary_get_uint64(a4, "FrameRefCon");
  v9 = xpc_dictionary_get_uint64(a4, "DecoderFlags");
  v10 = xpc_dictionary_get_uint64(a4, "TileCropOffsetXY");
  v23 = xpc_dictionary_get_uint64(a4, "TileCropDimensionWH");
  v22 = xpc_dictionary_get_uint64(a4, "OffsetInImageBufferXY");
  value = xpc_dictionary_get_value(a4, "CanvasioSurface");
  if (value)
  {
    v12 = IOSurfaceLookupFromXPCObject(value);
    if (v12)
    {
      v13 = v10;
      v14 = CVPixelBufferCreateWithIOSurface((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v12, 0, &pixelBufferOut);
      v15 = *(const void **)(a3 + 120);
      v16 = pixelBufferOut;
      *(_QWORD *)(a3 + 120) = pixelBufferOut;
      if (v16)
        CFRetain(v16);
      if (v15)
        CFRelease(v15);
      v10 = v13;
    }
    else
    {
      v14 = 0;
    }
    v17 = pixelBufferOut;
  }
  else
  {
    v17 = *(void **)(a3 + 120);
    if (v17)
      v17 = (void *)CFRetain(v17);
    v14 = 0;
    v12 = 0;
    pixelBufferOut = (CVPixelBufferRef)v17;
  }
  if (v17)
  {
    FigXPCRetain();
    if (v35)
      CFRetain(v35);
    if (pixelBufferOut)
      CFRetain(pixelBufferOut);
    CFRetain(a2);
    v18 = *(_QWORD *)(a3 + 24);
    v19 = *(NSObject **)(a3 + 88);
    v20 = *(NSObject **)(a3 + 96);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __dssxpc_DecodeTile_block_invoke;
    block[3] = &__block_descriptor_tmp_71;
    block[4] = a2;
    block[5] = v35;
    v26 = HIDWORD(v10);
    v27 = v10;
    v28 = HIDWORD(v23);
    v29 = v23;
    v30 = HIDWORD(v22);
    v31 = v22;
    v32 = v9;
    block[6] = pixelBufferOut;
    block[7] = uint64;
    block[8] = v18;
    block[9] = a1;
    dispatch_group_async(v19, v20, block);
  }
LABEL_23:
  if (v35)
    CFRelease(v35);
  if (v12)
    CFRelease(v12);
  if (pixelBufferOut)
    CFRelease(pixelBufferOut);
  if (v33)
    CFRelease(v33);
  return v14;
}

uint64_t dssxpc_CopySupportedPropertyDictionary(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  CFTypeRef cf;

  cf = 0;
  if (*(_BYTE *)(a2 + 114))
    return 4294954393;
  if (*(_BYTE *)(a2 + 32))
    VTTileDecompressionSessionCopySupportedPropertyDictionary(a1, &cf);
  else
    VTDecompressionSessionCopySupportedPropertyDictionary(a1, &cf);
  v2 = FigXPCMessageSetCFDictionary();
  if (cf)
    CFRelease(cf);
  return v2;
}

uint64_t dssxpc_CopySerializableProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  CFTypeRef cf;

  cf = 0;
  if (*(_BYTE *)(a2 + 114))
    return 4294954393;
  if (*(_BYTE *)(a2 + 32))
    v2 = VTTileDecompressionSessionCopySerializableProperties(a1, 0, &cf);
  else
    v2 = VTDecompressionSessionCopySerializableProperties(a1, 0, &cf);
  v3 = v2;
  if (!(_DWORD)v2)
    v3 = FigXPCMessageSetCFDictionary();
  if (cf)
    CFRelease(cf);
  return v3;
}

uint64_t dssxpc_CopyProperty(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  CFTypeRef cf;

  cf = 0;
  if (*(_BYTE *)(a2 + 114))
    return 4294954393;
  v2 = FigXPCMessageCopyCFString();
  if (!(_DWORD)v2)
    return FigSignalErrorAt();
  return v2;
}

uint64_t dssxpc_SetProperty(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_BYTE *)(a2 + 114))
    return 4294954393;
  v2 = FigXPCMessageCopyCFObject();
  if (!(_DWORD)v2)
  {
    v2 = FigXPCMessageCopyCFString();
    if (!(_DWORD)v2)
      return FigSignalErrorAt();
  }
  return v2;
}

uint64_t dssxpc_SetProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (*(_BYTE *)(a2 + 114))
    return 4294954393;
  v4 = FigXPCMessageCopyCFDictionary();
  if (!(_DWORD)v4)
  {
    if (*(_BYTE *)(a2 + 32))
      return VTTileDecompressionSessionSetProperties(a1, 0);
    else
      return VTDecompressionSessionSetProperties(a1, 0);
  }
  return v4;
}

uint64_t dssxpc_FinishDelayedFrames(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  _QWORD block[7];

  if (*(_BYTE *)(a3 + 114))
    return 4294954393;
  FigXPCRetain();
  if (a2)
    CFRetain(a2);
  v6 = *(_QWORD *)(a3 + 24);
  v7 = *(NSObject **)(a3 + 88);
  v8 = *(NSObject **)(a3 + 96);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __dssxpc_FinishDelayedFrames_block_invoke;
  block[3] = &__block_descriptor_tmp_72;
  block[4] = a2;
  block[5] = v6;
  block[6] = a1;
  dispatch_group_async(v7, v8, block);
  return 0;
}

uint64_t dssxpc_FinishDelayedTiles(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  _QWORD block[7];

  if (*(_BYTE *)(a3 + 114))
    return 4294954393;
  FigXPCRetain();
  if (a2)
    CFRetain(a2);
  v6 = *(_QWORD *)(a3 + 24);
  v7 = *(NSObject **)(a3 + 88);
  v8 = *(NSObject **)(a3 + 96);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __dssxpc_FinishDelayedTiles_block_invoke;
  block[3] = &__block_descriptor_tmp_73;
  block[4] = a2;
  block[5] = v6;
  block[6] = a1;
  dispatch_group_async(v7, v8, block);
  return 0;
}

uint64_t dssxpc_WaitForAsynchronousFrames(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  _QWORD block[7];

  if (*(_BYTE *)(a3 + 114))
    return 4294954393;
  FigXPCRetain();
  if (a2)
    CFRetain(a2);
  v6 = *(_QWORD *)(a3 + 24);
  v7 = *(NSObject **)(a3 + 88);
  v8 = *(NSObject **)(a3 + 96);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __dssxpc_WaitForAsynchronousFrames_block_invoke;
  block[3] = &__block_descriptor_tmp_74;
  block[4] = a2;
  block[5] = v6;
  block[6] = a1;
  dispatch_group_async(v7, v8, block);
  return 0;
}

uint64_t dssxpc_CanAcceptFormatDescription(OpaqueVTDecompressionSession *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6;
  BOOL v7;

  if (*(_BYTE *)(a2 + 114))
    return 4294954393;
  v6 = FigXPCMessageCopyFormatDescription();
  if (!(_DWORD)v6)
  {
    v7 = VTDecompressionSessionCanAcceptFormatDescription(a1, 0) != 0;
    xpc_dictionary_set_BOOL(a4, "CanacceptFormat", v7);
  }
  return v6;
}

uint64_t dssxpc_CopyBlackPixelBuffer(int a1, VTDecompressionSessionRef session, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  CFTypeRef v5;
  CFTypeRef v7;
  CFTypeRef cf;

  v7 = 0;
  cf = 0;
  if (*(_BYTE *)(a3 + 114))
    return 4294954393;
  v3 = VTDecompressionSessionCopyBlackPixelBuffer(session, (CVPixelBufferRef *)&v7);
  if ((_DWORD)v3)
  {
    v4 = v3;
  }
  else
  {
    v4 = dssxpc_copyPixelBufferOriginForConnection();
    v5 = cf;
    if (!(_DWORD)v4)
    {
      v4 = FigPixelBufferOriginSetPixelBufferInXPCMessage();
      v5 = cf;
    }
    if (v5)
      CFRelease(v5);
  }
  if (v7)
    CFRelease(v7);
  return v4;
}

uint64_t dssxpc_GetMinOutputPresentationTimeStampOfFramesBeingDecoded(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *MEMORY[0x1E0CA2E18];
  v4 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  if (*(_BYTE *)(a2 + 114))
    return 4294954393;
  VTDecompressionSessionGetMinOutputPresentationTimeStampOfFramesBeingDecoded(a1, &v3);
  return FigXPCMessageSetCMTime();
}

uint64_t dssxpc_GetMinAndMaxOutputPresentationTimeStampOfFramesBeingDecoded(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  CMTime v3;
  CMTime v4;

  v4 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v3 = v4;
  if (*(_BYTE *)(a2 + 114))
    return 4294954393;
  result = VTDecompressionSessionGetMinAndMaxOutputPresentationTimeStampOfFramesBeingDecoded(a1, &v4, &v3);
  if (!(_DWORD)result)
  {
    result = FigXPCMessageSetCMTime();
    if (!(_DWORD)result)
      return FigXPCMessageSetCMTime();
  }
  return result;
}

void DecompressionOutputCallback(uint64_t a1, uint64_t a2, int a3, unsigned int a4, uint64_t a5, __int128 *a6, __int128 *a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const __CFAllocator *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  CFTypeRef cf[2];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, CMBlockBufferRef);
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  CFTypeRef v33;
  int v34;
  unsigned int v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  CFTypeRef v40;
  xpc_object_t v41;
  CFTypeRef v42;
  CFTypeRef v43;
  CFTypeRef v44[2];

  v40 = 0;
  v41 = 0;
  if (*(_BYTE *)(a1 + 113) || *(_BYTE *)(a1 + 114) || dssxpc_copyPixelBufferOriginForConnection())
    goto LABEL_42;
  if ((a4 & 2) != 0)
    goto LABEL_37;
  cf[0] = 0;
  v43 = 0;
  v44[0] = 0;
  v42 = 0;
  v14 = MEMORY[0x1940281A8]();
  if (dssxpc_ensureEventLinkIfSupported_onceToken != -1)
    dispatch_once(&dssxpc_ensureEventLinkIfSupported_onceToken, &__block_literal_global_49);
  v23 = a2;
  MEMORY[0x1940280C4](*(_QWORD *)(a1 + 152));
  if (*(_BYTE *)(a1 + 145))
  {
    v15 = 0;
    if (dssxpc_maxNumberOfEmitFrameEventLinksToCreatePerSession_onceToken != -1)
      dispatch_once(&dssxpc_maxNumberOfEmitFrameEventLinksToCreatePerSession_onceToken, &__block_literal_global_55_0);
    while (v15 < dssxpc_maxNumberOfEmitFrameEventLinksToCreatePerSession_maxEventLinkCount)
    {
      v16 = a1 + 8 * v15;
      v17 = *(_QWORD *)(v16 + 160);
      if (v14 == *(_QWORD *)(v16 + 240))
        goto LABEL_25;
      if (!v17)
        goto LABEL_15;
      ++v15;
    }
  }
  else
  {
    v15 = 0;
LABEL_15:
    v17 = 0;
    if (!*(_BYTE *)(a1 + 144) || !dssxpc_ensureEventLinkIfSupported_prefersEventLink)
      goto LABEL_25;
    v18 = *(_QWORD *)(a1 + 56);
    if (v18)
    {
      v19 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      if (!VTDecompressionSessionCopyProperty(v18, CFSTR("DecoderEmitsFramesFromConsistentThread"), (const __CFAllocator *)*MEMORY[0x1E0C9AE00], (uint64_t *)cf)&& cf[0] == (CFTypeRef)*MEMORY[0x1E0C9AE50]&& !VTDecompressionSessionCopyProperty(*(_QWORD *)(a1 + 56), CFSTR("MachThreadPriorityForThreadEmittingFrames"), v19, (uint64_t *)v44)&& (int)FigCFNumberGetSInt32() >= 1)
      {
        FigXPCServerCopyMemoryOrigin();
        FigXPCServerCopyMemoryRecipient();
        v20 = a1 + 8 * v15;
        v17 = 0;
        if (!FigXPCServerCreateAssociatedEventLinkForConnection())
        {
          v17 = 0;
          *(_QWORD *)(v20 + 240) = v14;
        }
        goto LABEL_25;
      }
    }
  }
  v17 = 0;
LABEL_25:
  *(_BYTE *)(a1 + 145) = 1;
  MEMORY[0x1940280D0](*(_QWORD *)(a1 + 152));
  if (v43)
    CFRelease(v43);
  a2 = v23;
  if (v42)
    CFRelease(v42);
  if (cf[0])
    CFRelease(cf[0]);
  if (v44[0])
    CFRelease(v44[0]);
  if (v17)
  {
    v26 = MEMORY[0x1E0C809B0];
    v27 = 0x40000000;
    v28 = __DecompressionOutputCallback_block_invoke;
    v29 = &__block_descriptor_tmp_16;
    v34 = a3;
    v35 = a4;
    v30 = a1;
    v31 = v23;
    v36 = *a6;
    v37 = *((_QWORD *)a6 + 2);
    v38 = *a7;
    v39 = *((_QWORD *)a7 + 2);
    v32 = a5;
    v33 = v40;
    v21 = FigOSEventLinkRemoteFillMessageBufferThenSendItAndHandleReply();
    if (!v21)
      goto LABEL_42;
    if (v21 == -19428)
    {
      FigOSEventLinkRemoteInvalidate();
      goto LABEL_42;
    }
  }
LABEL_37:
  if (!FigXPCCreateBasicMessage())
  {
    FigPixelBufferOriginSetPixelBufferInXPCMessage();
    xpc_dictionary_set_int64(v41, "Result", a3);
    xpc_dictionary_set_uint64(v41, "DecoderFlags", a4);
    xpc_dictionary_set_uint64(v41, "FrameRefCon", a2);
    *(_OWORD *)cf = *a6;
    v25 = *((_QWORD *)a6 + 2);
    FigXPCMessageSetCMTime();
    *(_OWORD *)cf = *a7;
    v25 = *((_QWORD *)a7 + 2);
    FigXPCMessageSetCMTime();
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 128), v41);
    if (!*(_BYTE *)(a1 + 114))
    {
      v22 = 1;
      do
      {
        if (FigSemaphoreWaitRelative() != -12792)
          break;
        v22 *= 2;
      }
      while (!*(_BYTE *)(a1 + 114));
    }
  }
LABEL_42:
  FigXPCRelease();
  if (v40)
    CFRelease(v40);
}

uint64_t dssxpc_decompressionSessionClientRecordCreate()
{
  if (dssxpc_dscr_GetTypeID_once != -1)
    dispatch_once(&dssxpc_dscr_GetTypeID_once, &__block_literal_global_60);
  return _CFRuntimeCreateInstance();
}

uint64_t dssxpc_InitializeClient(uint64_t a1, int a2, uint64_t a3, void *a4, const void *a5, const void *a6, uint64_t a7)
{
  xpc_object_t v12;
  CFTypeRef v13;
  CFTypeRef v14;
  unsigned int UInt32;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  int valuePtr;

  valuePtr = a2;
  *(_QWORD *)(a1 + 16) = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v12 = xpc_retain(a4);
  *(_DWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 114) = 0;
  *(_WORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = v12;
  if (a5)
    v13 = CFRetain(a5);
  else
    v13 = 0;
  *(_QWORD *)(a1 + 56) = v13;
  if (a6)
    v14 = CFRetain(a6);
  else
    v14 = 0;
  *(_QWORD *)(a1 + 64) = v14;
  *(_QWORD *)(a1 + 104) = FigSemaphoreCreate();
  *(_QWORD *)(a1 + 88) = dispatch_group_create();
  if (!a7 || (UInt32 = FigCFNumberGetUInt32(), UInt32 > 0x30) || UInt32 == 5)
    v16 = (uint64_t)dispatch_queue_create("DecompressionSessionMessageQueue", 0);
  else
    v16 = FigDispatchQueueCreateWithPriority();
  *(_QWORD *)(a1 + 96) = v16;
  if (!v16)
    return FigSignalErrorAt();
  v17 = FigOSTransactionCreateWithProcessName();
  *(_QWORD *)(a1 + 136) = v17;
  if (!v17)
    return FigSignalErrorAt();
  v18 = FigSimpleMutexCreate();
  result = 0;
  *(_QWORD *)(a1 + 152) = v18;
  return result;
}

void dssxpc_DisposeClientRecord(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  dispatch_time_t v4;
  NSObject *v5;

  if (a1)
  {
    dssxpc_invalidateSession(a1);
    v2 = *(_QWORD *)(a1 + 40);
    if (v2 && *(_QWORD *)(v2 + 48))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
    }
    v3 = *(NSObject **)(a1 + 88);
    if (v3)
    {
      v4 = dispatch_time(0, 60000000000);
      dispatch_group_wait(v3, v4);
      dispatch_release(*(dispatch_object_t *)(a1 + 88));
      *(_QWORD *)(a1 + 88) = 0;
    }
    v5 = *(NSObject **)(a1 + 96);
    if (v5)
      dispatch_release(v5);
    *(_QWORD *)(a1 + 96) = 0;
    CFRelease((CFTypeRef)a1);
  }
}

BOOL dssxpc_NotificationFilter(int a1, int a2, CFTypeRef cf1)
{
  return CFEqual(cf1, CFSTR("FrameDecodeCompleted")) != 0;
}

void dssxpc_appStateChangeListener(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2)
  {
    if (a5)
    {
      FigCFDictionaryGetInt32IfPresent();
      *(_DWORD *)(a2 + 48) = 8;
    }
  }
}

uint64_t dssxpc_copyPixelBufferOriginForConnection()
{
  if (FigXPCServerGetConnectionRefcon())
    return FigPixelBufferOriginServerCopyPixelBufferOriginForObjectID();
  else
    return FigSignalErrorAt();
}

uint64_t __dssxpc_ensureEventLinkIfSupported_block_invoke()
{
  uint64_t result;

  result = FigGetCFPreferenceNumberWithDefault();
  dssxpc_ensureEventLinkIfSupported_prefersEventLink = result;
  return result;
}

uint64_t __dssxpc_maxNumberOfEmitFrameEventLinksToCreatePerSession_block_invoke()
{
  uint64_t result;
  int v1;

  result = FigGetCFPreferenceNumberWithDefault();
  if ((int)result >= 10)
    v1 = 10;
  else
    v1 = result;
  dssxpc_maxNumberOfEmitFrameEventLinksToCreatePerSession_maxEventLinkCount = v1;
  return result;
}

double dssxpc_dscr_Init(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 320) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void dssxpc_dscr_Finalize(_QWORD *a1)
{
  const void *v2;
  uint64_t v3;
  dispatch_time_t v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  NSObject *v9;
  NSObject *v10;
  const void *v11;
  void *v12;
  void *v13;
  uint64_t i;
  _QWORD *v15;
  const void *v16;
  const void *v17;
  _QWORD block[5];

  v2 = (const void *)a1[2];
  if (v2)
  {
    CFRelease(v2);
    a1[2] = 0;
  }
  v3 = a1[5];
  a1[5] = 0;
  if (v3)
  {
    v4 = dispatch_time(0, 30000000000);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __dssxpc_dscr_Finalize_block_invoke;
    block[3] = &__block_descriptor_tmp_61;
    block[4] = v3;
    dispatch_after(v4, MEMORY[0x1E0C80D38], block);
  }
  v5 = (const void *)a1[7];
  if (v5)
  {
    CFRelease(v5);
    a1[7] = 0;
  }
  v6 = (const void *)a1[8];
  if (v6)
  {
    CFRelease(v6);
    a1[8] = 0;
  }
  v7 = (const void *)a1[9];
  if (v7)
  {
    CFRelease(v7);
    a1[9] = 0;
  }
  v8 = (const void *)a1[10];
  if (v8)
  {
    CFRelease(v8);
    a1[10] = 0;
  }
  v9 = a1[11];
  if (v9)
  {
    dispatch_release(v9);
    a1[11] = 0;
  }
  v10 = a1[12];
  if (v10)
  {
    dispatch_release(v10);
    a1[12] = 0;
  }
  FigSemaphoreDestroy();
  a1[13] = 0;
  v11 = (const void *)a1[15];
  if (v11)
  {
    CFRelease(v11);
    a1[15] = 0;
  }
  v12 = (void *)a1[16];
  if (v12)
  {
    a1[16] = 0;
    xpc_release(v12);
  }
  v13 = (void *)a1[17];
  if (v13)
  {
    os_release(v13);
    a1[17] = 0;
  }
  for (i = 0; i != 10; ++i)
  {
    v15 = &a1[i];
    v16 = (const void *)a1[i + 20];
    if (v16)
    {
      CFRelease(v16);
      v15[20] = 0;
    }
    v15[30] = 0;
  }
  if (a1[19])
  {
    FigSimpleMutexDestroy();
    a1[19] = 0;
  }
  v17 = (const void *)a1[40];
  if (v17)
  {
    CFRelease(v17);
    a1[40] = 0;
  }
}

CFStringRef dssxpc_dscr_CopyDebugDesc(uint64_t a1)
{
  const char *v1;
  uint64_t v2;

  v1 = "subTileSession";
  if (!*(_BYTE *)(a1 + 32))
    v1 = "subDecompressionSession";
  v2 = 64;
  if (!*(_BYTE *)(a1 + 32))
    v2 = 56;
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[ClientRecord %p] [isTile: %d, %s: %p, subSessionIsGone: %d]"), a1, *(unsigned __int8 *)(a1 + 32), v1, *(_QWORD *)(a1 + v2), *(unsigned __int8 *)(a1 + 114));
}

uint64_t vtInitializePerClientAudioSessionStorage()
{
  uint64_t result;

  gPerClientAudioSessionCache_0 = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], 0);
  result = FigSimpleMutexCreate();
  gPerClientAudioSessionCache_1 = result;
  return result;
}

uint64_t registerVTPerClientAudioSessionType()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sVTPerClientAudioSessionTypeID = result;
  return result;
}

double vtPerClientAudioSessionInit(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void vtPerClientAudioSessionFinalize(uint64_t a1)
{
  CFDataRef v2;
  const void *v3;

  if (gPerClientAudioSessionCache_0)
  {
    v2 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)(a1 + 16), 32);
    MEMORY[0x1940280C4](gPerClientAudioSessionCache_1);
    CFDictionaryRemoveValue((CFMutableDictionaryRef)gPerClientAudioSessionCache_0, v2);
    MEMORY[0x1940280D0](gPerClientAudioSessionCache_1);
  }
  else
  {
    v2 = 0;
  }
  v3 = *(const void **)(a1 + 48);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 48) = 0;
  }
  if (v2)
    CFRelease(v2);
}

void dssxpc_invalidateSession(uint64_t a1)
{
  const void *v2;
  unint64_t v3;
  const void *v4;
  unint64_t v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  _QWORD v9[6];

  v2 = *(const void **)(a1 + 56);
  if (v2)
    v3 = (unint64_t)CFRetain(v2);
  else
    v3 = 0;
  v4 = *(const void **)(a1 + 64);
  if (v4)
    v5 = (unint64_t)CFRetain(v4);
  else
    v5 = 0;
  if (v3 | v5)
  {
    v6 = 0;
    *(_BYTE *)(a1 + 114) = 1;
    do
    {
      if (*(_QWORD *)(a1 + 160 + v6))
        FigOSEventLinkRemoteInvalidate();
      v6 += 8;
    }
    while (v6 != 80);
    if (*(_QWORD *)(a1 + 104))
      FigSemaphoreSignal();
    v7 = *(NSObject **)(a1 + 88);
    v8 = *(NSObject **)(a1 + 96);
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 0x40000000;
    v9[2] = __dssxpc_invalidateSession_block_invoke;
    v9[3] = &__block_descriptor_tmp_69_0;
    v9[4] = v3;
    v9[5] = v5;
    dispatch_group_async(v7, v8, v9);
  }
}

void __dssxpc_invalidateSession_block_invoke(uint64_t a1)
{
  const void *v2;
  const void *v3;

  VTDecompressionSessionInvalidate(*(VTDecompressionSessionRef *)(a1 + 32));
  VTTileDecompressionSessionInvalidate(*(_QWORD *)(a1 + 40));
  v2 = *(const void **)(a1 + 32);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    CFRelease(v3);
}

void TileDecompressionOutputCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, unsigned int a8)
{
  uint64_t v12;

  if (!*(_BYTE *)(a1 + 113)
    && !*(_BYTE *)(a1 + 114)
    && !FigXPCCreateBasicMessage()
    && !dssxpc_copyPixelBufferOriginForConnection()
    && !FigPixelBufferOriginSetPixelBufferInXPCMessage())
  {
    xpc_dictionary_set_uint64(0, "FrameRefCon", a2);
    xpc_dictionary_set_int64(0, "Result", a7);
    xpc_dictionary_set_uint64(0, "DecoderFlags", a8);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 128), 0);
    if (!*(_BYTE *)(a1 + 114))
    {
      v12 = 1;
      do
      {
        if (FigSemaphoreWaitRelative() != -12792)
          break;
        v12 *= 2;
      }
      while (!*(_BYTE *)(a1 + 114));
    }
  }
  FigXPCRelease();
}

void DecompressionMultiImageOutputCallback(uint64_t a1, uint64_t a2, int a3, unsigned int a4, CMTaggedBufferGroupRef group)
{
  CMItemCount Count;
  int64_t v11;
  CFIndex v12;
  uint64_t v13;
  CMTagCollectionRef TagCollectionAtIndex;
  const void *v15;
  int v16;
  uint64_t v17;

  Count = CMTaggedBufferGroupGetCount(group);
  if (Count >= 6)
  {
    FigSignalErrorAt();
  }
  else if (!*(_BYTE *)(a1 + 113) && !*(_BYTE *)(a1 + 114))
  {
    v11 = Count;
    if (!FigXPCCreateBasicMessage())
    {
      xpc_dictionary_set_int64(0, "Result", a3);
      xpc_dictionary_set_uint64(0, "FrameRefCon", a2);
      xpc_dictionary_set_uint64(0, "DecoderFlags", a4);
      FigXPCMessageSetCMTime();
      FigXPCMessageSetCMTime();
      xpc_dictionary_set_uint64(0, "MultiImageCount", v11);
      if (!dssxpc_copyPixelBufferOriginForConnection())
      {
        if (v11 < 1)
        {
LABEL_13:
          xpc_connection_send_message(*(xpc_connection_t *)(a1 + 128), 0);
          if (!*(_BYTE *)(a1 + 114))
          {
            v17 = 1;
            do
            {
              if (FigSemaphoreWaitRelative() != -12792)
                break;
              v17 *= 2;
            }
            while (!*(_BYTE *)(a1 + 114));
          }
        }
        else
        {
          v12 = 0;
          v13 = *MEMORY[0x1E0C9AE00];
          while (1)
          {
            TagCollectionAtIndex = CMTaggedBufferGroupGetTagCollectionAtIndex(group, v12);
            v15 = (const void *)MEMORY[0x19402810C](TagCollectionAtIndex, v13);
            v16 = FigXPCMessageSetCFData();
            if (v15)
              CFRelease(v15);
            if (v16)
              break;
            FigTaggedBufferGroupGetCVPixelBufferAtIndex();
            if (FigPixelBufferOriginSetPixelBufferInXPCMessage())
              break;
            if (v11 == ++v12)
              goto LABEL_13;
          }
        }
      }
    }
  }
  FigXPCRelease();
}

uint64_t dss_EventLinkServerMessageHandler(uint64_t a1, uint64_t a2, OpaqueCMBlockBuffer *a3, OpaqueCMBlockBuffer *a4)
{
  uint64_t DataPointer;
  char *v7;
  size_t v8;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  size_t lengthAtOffsetOut;
  char *dataPointerOut;

  FigOSEventLinkServerGetAssociatedFigXPCServerXPCConnection();
  lengthAtOffsetOut = 0;
  dataPointerOut = 0;
  DataPointer = CMBlockBufferGetDataPointer(a3, 0, &lengthAtOffsetOut, 0, &dataPointerOut);
  if ((_DWORD)DataPointer)
    return DataPointer;
  v7 = dataPointerOut;
  if ((dataPointerOut & 7) != 0)
    return 4294949291;
  v8 = lengthAtOffsetOut;
  if (lengthAtOffsetOut <= 0x57)
    return 4294949290;
  lengthAtOffsetOut = 0;
  dataPointerOut = 0;
  DataPointer = CMBlockBufferGetDataPointer(a4, 0, &lengthAtOffsetOut, 0, &dataPointerOut);
  if ((_DWORD)DataPointer)
    return DataPointer;
  v10 = dataPointerOut;
  if ((dataPointerOut & 7) != 0)
    return 4294949291;
  if (lengthAtOffsetOut <= 0x57)
    return 4294949290;
  *((_QWORD *)dataPointerOut + 10) = 0;
  *((_OWORD *)v10 + 3) = 0u;
  *((_OWORD *)v10 + 4) = 0u;
  *((_OWORD *)v10 + 1) = 0u;
  *((_OWORD *)v10 + 2) = 0u;
  *(_OWORD *)v10 = 0u;
  v11 = dataPointerOut;
  v12 = FigXPCServerLookupAndRetainAssociatedObjectAndCFTypeRefcon();
  if ((_DWORD)v12)
    return v12;
  *((_DWORD *)v11 + 2) = *((_DWORD *)v7 + 2);
  *(_QWORD *)v11 = *(_QWORD *)v7;
  if (*((_DWORD *)v7 + 2) != 1684366182)
    return 0;
  lengthAtOffsetOut = 0;
  dataPointerOut = 0;
  if (MEMORY[0x72])
  {
    DataPointer = 4294954393;
    goto LABEL_28;
  }
  if (*((_QWORD *)v7 + 5) > v8 - 88)
  {
    v15 = FigSignalErrorAt();
LABEL_36:
    DataPointer = v15;
    goto LABEL_28;
  }
  v13 = *((_QWORD *)v7 + 2);
  v14 = *((unsigned int *)v7 + 6);
  if (v7[48] && !*(_QWORD *)(MEMORY[0x38] + 112))
    VTDecompressionSessionSetMultiImageCallback(MEMORY[0x38], (VTDecompressionOutputMultiImageCallback)DecompressionMultiImageOutputCallback, 0);
  v15 = FigXPCServerCopyMemoryRecipient();
  if ((_DWORD)v15)
    goto LABEL_36;
  if (*((_QWORD *)v7 + 4))
  {
    v15 = FigInMemoryDeserializerCopyCFDictionary();
    if ((_DWORD)v15)
      goto LABEL_36;
  }
  v16 = FigInMemoryDeserializerCopyCMSampleBuffer();
  v17 = (const void *)lengthAtOffsetOut;
  if (!(_DWORD)v16)
  {
    v16 = VTDecompressionSessionDecodeFrameWithOptions(0, (opaqueCMSampleBuffer *)lengthAtOffsetOut, v14, 0, v13, (int *)v11 + 4);
    v17 = (const void *)lengthAtOffsetOut;
    if (!(_DWORD)v16)
    {
      if (lengthAtOffsetOut)
      {
        CFRelease((CFTypeRef)lengthAtOffsetOut);
        lengthAtOffsetOut = 0;
      }
      DataPointer = FigMemoryRecipientAppendRecipientStateUpdateToIPCMessageData();
      v17 = (const void *)lengthAtOffsetOut;
      if (!lengthAtOffsetOut)
        goto LABEL_28;
      goto LABEL_27;
    }
  }
  DataPointer = v16;
  if (v17)
LABEL_27:
    CFRelease(v17);
LABEL_28:
  if (dataPointerOut)
    CFRelease(dataPointerOut);
  return DataPointer;
}

uint64_t vtdcr_Register()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sVTDecompressionSessionRemoteID = result;
  return result;
}

uint64_t VTDecompressionSessionRemote_Create(uint64_t a1, uint64_t a2, void *a3, const __CFDictionary *a4, const __CFDictionary *a5, _OWORD *a6, uint64_t *a7)
{
  uint64_t v11;
  uint64_t Instance;
  uint64_t v13;
  const __CFAllocator *v14;
  CFArrayRef v15;
  uint64_t SerializedAtomDataForFormatDescriptions;
  __CFDictionary *MutableCopy;
  __CFDictionary *v18;
  __CFDictionary *v19;
  uint64_t CFDataFromCFPropertyList;
  uint64_t v21;
  uint64_t v22;
  CFTypeRef v24;
  CFTypeRef v25;
  CFTypeRef cf;
  uint64_t v27;
  uint64_t v28;
  void *values;

  v28 = 0;
  values = a3;
  v27 = 0;
  v25 = 0;
  cf = 0;
  v24 = 0;
  v11 = vtdsr_oneTimeInitialization();
  if ((_DWORD)v11)
    goto LABEL_39;
  VTVideoCodecService_ShouldUseSeparateCodecProcessForDecode();
  MEMORY[0x1940281CC](&VTDecompressionSessionRemoteGetTypeID_sRegisterVTDecompressionSessionRemoteOnce, vtdcr_Register);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
  {
    v11 = FigSignalErrorAt();
LABEL_39:
    v21 = v11;
    v15 = 0;
    v19 = 0;
    goto LABEL_23;
  }
  v13 = Instance;
  *(_QWORD *)(Instance + 56) = FigCFWeakReferenceHolderCreateWithReferencedObject();
  *(_QWORD *)(v13 + 120) = dispatch_group_create();
  *(_QWORD *)(v13 + 112) = dispatch_queue_create("com.apple.coremedia.decompressionsession.clientcallback", 0);
  *(_QWORD *)(v13 + 104) = dispatch_queue_create("com.apple.coremedia.decompressionsession.pendingframequeue", 0);
  *(_QWORD *)(v13 + 136) = FigSemaphoreCreate();
  *(_QWORD *)(v13 + 160) = FigSemaphoreCreate();
  *(_QWORD *)(v13 + 200) = 1;
  *(_QWORD *)(v13 + 40) = FigSemaphoreCreate();
  if (a6)
    *(_OWORD *)(v13 + 72) = *a6;
  v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v15 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&values, 1, MEMORY[0x1E0C9B378]);
  if (!v15)
  {
    SerializedAtomDataForFormatDescriptions = FigSignalErrorAt();
    goto LABEL_41;
  }
  SerializedAtomDataForFormatDescriptions = FigRemote_CreateSerializedAtomDataForFormatDescriptions();
  if ((_DWORD)SerializedAtomDataForFormatDescriptions)
  {
LABEL_41:
    v21 = SerializedAtomDataForFormatDescriptions;
    goto LABEL_42;
  }
  if (a4)
  {
    if (!VTVideoCodecService_ShouldUseSeparateCodecProcessForDecode()
      || !CFDictionaryContainsKey(a4, CFSTR("CMSession")))
    {
      v19 = 0;
LABEL_13:
      CFDataFromCFPropertyList = FigCreateCFDataFromCFPropertyList();
      if ((_DWORD)CFDataFromCFPropertyList)
      {
LABEL_37:
        v21 = CFDataFromCFPropertyList;
        goto LABEL_43;
      }
      goto LABEL_16;
    }
    MutableCopy = CFDictionaryCreateMutableCopy(v14, 0, a4);
    if (MutableCopy)
    {
      v18 = MutableCopy;
      CFDictionaryRemoveValue(MutableCopy, CFSTR("CMSession"));
      v19 = v18;
      goto LABEL_13;
    }
    v21 = 0;
LABEL_42:
    v19 = 0;
LABEL_43:
    v22 = vtdsr_handleMachErrorsInternal(v13, v21);
    CFRelease((CFTypeRef)v13);
    if (!v15)
      goto LABEL_25;
    goto LABEL_24;
  }
  v19 = 0;
LABEL_16:
  CFDataFromCFPropertyList = vtdsr_createPixelBufferAttributesWithIOSurfaceSupport(a5, (__CFDictionary **)&v24);
  if ((_DWORD)CFDataFromCFPropertyList)
    goto LABEL_37;
  CFDataFromCFPropertyList = FigCreateCFDataFromCFPropertyList();
  if ((_DWORD)CFDataFromCFPropertyList)
    goto LABEL_37;
  *(_QWORD *)(v13 + 240) = 0;
  CFDataFromCFPropertyList = weakReferenceTable_AddPointerAndGetKey_0();
  if ((_DWORD)CFDataFromCFPropertyList)
    goto LABEL_37;
  CFDataFromCFPropertyList = FigRPCCreateServerConnectionForObjectUsingMachChannel();
  if ((_DWORD)CFDataFromCFPropertyList)
    goto LABEL_37;
  CFDataFromCFPropertyList = FigRPCGetServerConnectionInfo();
  if ((_DWORD)CFDataFromCFPropertyList)
    goto LABEL_37;
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  v21 = 0;
  if (!a7)
    goto LABEL_43;
  *a7 = v13;
LABEL_23:
  v22 = vtdsr_handleMachErrorsInternal(0, v21);
  if (v15)
LABEL_24:
    CFRelease(v15);
LABEL_25:
  if (v28 && v27)
    MEMORY[0x194029090](*MEMORY[0x1E0C83DA0]);
  if (cf)
    CFRelease(cf);
  if (v25)
    CFRelease(v25);
  if (v19)
    CFRelease(v19);
  if (v24)
    CFRelease(v24);
  return v22;
}

uint64_t vtdsr_oneTimeInitialization()
{
  uint64_t v0;
  _QWORD block[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2000000000;
  v6 = 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __vtdsr_oneTimeInitialization_block_invoke;
  block[3] = &unk_1E2F63528;
  block[4] = &v3;
  if (vtdsr_oneTimeInitialization_once != -1)
    dispatch_once(&vtdsr_oneTimeInitialization_once, block);
  v0 = *((unsigned int *)v4 + 6);
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t vtdsr_createPixelBufferAttributesWithIOSurfaceSupport(CFDictionaryRef theDict, __CFDictionary **a2)
{
  const void **v4;
  __CFDictionary *MutableCopyWithCFTypeCallbacks;
  CFDictionaryRef IOSurfacePropertiesDictionary;
  CFDictionaryRef v7;
  uint64_t result;

  if (!a2)
    return 4294954394;
  v4 = (const void **)MEMORY[0x1E0CA8FF0];
  if (theDict && CFDictionaryContainsKey(theDict, (const void *)*MEMORY[0x1E0CA8FF0]))
  {
    MutableCopyWithCFTypeCallbacks = (__CFDictionary *)CFRetain(theDict);
  }
  else
  {
    MutableCopyWithCFTypeCallbacks = (__CFDictionary *)FigCFDictionaryCreateMutableCopyWithCFTypeCallbacks();
    IOSurfacePropertiesDictionary = FigCreateIOSurfacePropertiesDictionary();
    if (IOSurfacePropertiesDictionary)
    {
      v7 = IOSurfacePropertiesDictionary;
      CFDictionarySetValue(MutableCopyWithCFTypeCallbacks, *v4, IOSurfacePropertiesDictionary);
      CFRelease(v7);
    }
  }
  result = 0;
  *a2 = MutableCopyWithCFTypeCallbacks;
  return result;
}

uint64_t weakReferenceTable_AddPointerAndGetKey_0()
{
  MEMORY[0x1940281CC](&gWeakReferenceTable_RemoteDecompressionSessionClientThreadOnce, weakReferenceTable_OneTimeInitialization_0);
  if (gWeakReferenceTable_RemoteDecompressionSessionClient)
    return FigCFWeakReferenceTableAddValueAndGetKey();
  else
    return FigSignalErrorAt();
}

void vtdsr_handleDeadServerConnection(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  _QWORD v7[7];
  _QWORD block[7];
  _QWORD v9[4];
  _QWORD v10[4];

  v10[0] = 0;
  v10[1] = v10;
  v10[2] = 0x2000000000;
  v10[3] = 0;
  v9[0] = 0;
  v9[1] = v9;
  v9[2] = 0x2000000000;
  v9[3] = 0;
  *(_BYTE *)(a2 + 28) = 1;
  v3 = *(NSObject **)(a2 + 104);
  v4 = MEMORY[0x1E0C809B0];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __vtdsr_handleDeadServerConnection_block_invoke;
  block[3] = &unk_1E2F635E0;
  block[5] = v9;
  block[6] = a2;
  block[4] = v10;
  dispatch_sync(v3, block);
  CFRetain((CFTypeRef)a2);
  v6 = *(NSObject **)(a2 + 112);
  v5 = *(NSObject **)(a2 + 120);
  v7[0] = v4;
  v7[1] = 0x40000000;
  v7[2] = __vtdsr_handleDeadServerConnection_block_invoke_2;
  v7[3] = &unk_1E2F63608;
  v7[4] = v9;
  v7[5] = v10;
  v7[6] = a2;
  dispatch_group_async(v5, v6, v7);
  _Block_object_dispose(v9, 8);
  _Block_object_dispose(v10, 8);
}

uint64_t vtdsr_handleMachErrorsInternal(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if ((int)a2 <= 268435458)
  {
    if ((_DWORD)a2 != -308 && (_DWORD)a2 != -303)
      goto LABEL_11;
  }
  else if ((a2 - 268435459) >= 2 && (_DWORD)a2 != 268451843)
  {
LABEL_11:
    v2 = a2;
LABEL_12:
    if (!VTVideoCodecService_ShouldUseSeparateCodecProcessForDecode())
      goto LABEL_15;
    return v2;
  }
  if (a1)
  {
    *(_BYTE *)(a1 + 28) = 1;
    v2 = 4294954385;
    goto LABEL_12;
  }
  if (!VTVideoCodecService_ShouldUseSeparateCodecProcessForDecode())
  {
    v2 = 4294954385;
LABEL_15:
    FigRPCKillServerOnTimeout();
    return v2;
  }
  return 4294954385;
}

uint64_t VTDecompressionSessionRemote_Invalidate(uint64_t result)
{
  uint64_t v1;
  int v2;
  NSObject *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  const void *v8;
  const void *v9;

  if (result)
  {
    v1 = result;
    if (!*(_BYTE *)(result + 52))
    {
      *(_BYTE *)(result + 52) = 1;
      v2 = *(_DWORD *)(result + 24);
      if (v2 && *(_QWORD *)(v1 + 56))
      {
        if (*(_QWORD *)(v1 + 224))
          VTDecompressionSessionRemote_FinishDelayedTiles(v1);
        else
          VTDecompressionSessionRemoteClient_Invalidate(v2);
        if (*(_QWORD *)(v1 + 112))
          vtdsr_dequeueAllPendingFramesAndCallbackClientForEach(v1, 1, 1);
      }
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      v3 = *(NSObject **)(v1 + 120);
      if (v3)
        dispatch_group_wait(v3, 0xFFFFFFFFFFFFFFFFLL);
      v4 = *(_DWORD *)(v1 + 24);
      if (v4)
      {
        v5 = VTDecompressionSessionRemoteClient_Destroy(v4);
        v6 = vtdsr_handleMachErrorsInternal(v1, v5);
      }
      else
      {
        v6 = 0;
      }
      FigRPCDisposeServerConnection();
      *(_QWORD *)(v1 + 16) = 0;
      v7 = *(const void **)(v1 + 64);
      if (v7)
      {
        CFRelease(v7);
        *(_QWORD *)(v1 + 64) = 0;
      }
      v8 = *(const void **)(v1 + 184);
      if (v8)
      {
        CFRelease(v8);
        *(_QWORD *)(v1 + 184) = 0;
      }
      v9 = *(const void **)(v1 + 192);
      if (v9)
      {
        CFRelease(v9);
        *(_QWORD *)(v1 + 192) = 0;
      }
      if (*(_QWORD *)(v1 + 240))
      {
        MEMORY[0x1940281CC](&gWeakReferenceTable_RemoteDecompressionSessionClientThreadOnce, weakReferenceTable_OneTimeInitialization_0);
        if (gWeakReferenceTable_RemoteDecompressionSessionClient)
        {
          FigCFWeakReferenceTableRemoveValue();
          *(_QWORD *)(v1 + 240) = 0;
        }
        else
        {
          FigSignalErrorAt();
        }
      }
      return vtdsr_handleMachErrorsInternal(v1, v6);
    }
  }
  return result;
}

uint64_t VTDecompressionSessionRemote_FinishDelayedTiles(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (*(_BYTE *)(a1 + 28) || !*(_QWORD *)(a1 + 16))
    return FigSignalErrorAt();
  v3 = VTDecompressionSessionRemoteClient_FinishDelayedTiles(*(_DWORD *)(a1 + 24));
  if ((_DWORD)v3)
  {
    v4 = v3;
  }
  else
  {
    FigSemaphoreWaitRelative();
    v4 = *(unsigned int *)(a1 + 168);
  }
  return vtdsr_handleMachErrorsInternal(a1, v4);
}

void vtdsr_dequeueAllPendingFramesAndCallbackClientForEach(uint64_t a1, char a2, int a3)
{
  NSObject *v5;
  NSObject *v6;
  _QWORD block[6];
  char v8;
  _QWORD v9[3];
  int v10;

  v9[0] = 0;
  v9[1] = v9;
  v9[2] = 0x2000000000;
  v10 = 0;
  v5 = *(NSObject **)(a1 + 120);
  v6 = *(NSObject **)(a1 + 112);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __vtdsr_dequeueAllPendingFramesAndCallbackClientForEach_block_invoke;
  block[3] = &unk_1E2F63550;
  v8 = a2;
  block[4] = v9;
  block[5] = a1;
  dispatch_group_async(v5, v6, block);
  if (a3)
    dispatch_group_wait(*(dispatch_group_t *)(a1 + 120), 0xFFFFFFFFFFFFFFFFLL);
  _Block_object_dispose(v9, 8);
}

uint64_t VTDecompressionSessionRemote_CopySupportedPropertyDictionary(uint64_t a1)
{
  uint64_t CFPropertyListFromData;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;

  v8 = 0;
  v7 = 0;
  v6 = 0;
  if (*(_BYTE *)(a1 + 28) || *(_BYTE *)(a1 + 52))
    return FigSignalErrorAt();
  CFPropertyListFromData = VTDecompressionSessionRemoteClient_CopySupportedPropertyDictionary(*(_DWORD *)(a1 + 24), &v7, &v6, &v8);
  if ((_DWORD)CFPropertyListFromData)
    goto LABEL_7;
  v4 = v8;
  if (!v8)
  {
    CFPropertyListFromData = FigCreateCFPropertyListFromData();
LABEL_7:
    v4 = CFPropertyListFromData;
  }
  v5 = vtdsr_handleMachErrorsInternal(a1, v4);
  if (v6)
    MEMORY[0x194029090](*MEMORY[0x1E0C83DA0], v7);
  return v5;
}

uint64_t VTDecompressionSessionRemote_CopySerializableProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t CFPropertyListFromData;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;

  v10 = 0;
  v9 = 0;
  v8 = 0;
  if (*(_BYTE *)(a1 + 28) || *(_BYTE *)(a1 + 52) || !a3)
    return FigSignalErrorAt();
  CFPropertyListFromData = VTDecompressionSessionRemoteClient_CopySerializableProperties(*(_DWORD *)(a1 + 24), &v9, &v8, &v10);
  if ((_DWORD)CFPropertyListFromData)
    goto LABEL_8;
  v6 = v10;
  if (!v10)
  {
    CFPropertyListFromData = FigCreateCFPropertyListFromData();
LABEL_8:
    v6 = CFPropertyListFromData;
  }
  v7 = vtdsr_handleMachErrorsInternal(a1, v6);
  if (v8)
    MEMORY[0x194029090](*MEMORY[0x1E0C83DA0], v9);
  return v7;
}

uint64_t VTDecompressionSessionRemote_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, _QWORD *a4)
{
  const void *v8;
  uint64_t v9;
  const void *v10;
  const void *v11;
  CFTypeRef v12;
  uint64_t v13;
  const __CFDictionary *CopyRemovingKeys;
  const char *CStringPtrAndBufferToFree;
  uint64_t CFPropertyListFromData;
  uint64_t v17;
  CFTypeRef v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  CFDictionaryRef pixelBufferAttributes;
  CFTypeRef v24;
  CFTypeRef cf[4];

  cf[3] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v22 = 0;
  v21 = 0;
  v20 = 0;
  if (*(_BYTE *)(a1 + 28) || *(_BYTE *)(a1 + 52))
    return FigSignalErrorAt();
  if (CFEqual(a2, CFSTR("PixelBufferPool")))
  {
    v24 = 0;
    cf[0] = 0;
    v8 = (const void *)*MEMORY[0x1E0CA8F88];
    cf[1] = *(CFTypeRef *)MEMORY[0x1E0CA9008];
    cf[2] = v8;
    v9 = VTDecompressionSessionRemote_CopyProperty(a1, CFSTR("PoolPixelBufferAttributesSeed"), a3, cf);
    if (!(_DWORD)v9)
    {
      if (FigCFEqual())
      {
LABEL_14:
        if (v24 && !*(_QWORD *)(a1 + 192))
        {
          CopyRemovingKeys = (const __CFDictionary *)FigCFDictionaryCreateCopyRemovingKeys();
          pixelBufferAttributes = 0;
          v17 = vtdsr_createPixelBufferAttributesWithIOSurfaceSupport(CopyRemovingKeys, &pixelBufferAttributes);
          if ((_DWORD)v17)
          {
            v13 = v17;
          }
          else
          {
            v13 = CVPixelBufferPoolCreate(a3, 0, pixelBufferAttributes, (CVPixelBufferPoolRef *)(a1 + 192));
            CFRelease(pixelBufferAttributes);
          }
          goto LABEL_24;
        }
        v13 = 0;
LABEL_17:
        CopyRemovingKeys = 0;
LABEL_24:
        if (cf[0])
          CFRelease(cf[0]);
        if (v24)
          CFRelease(v24);
        if (CopyRemovingKeys)
          CFRelease(CopyRemovingKeys);
        if (!(_DWORD)v13)
        {
          v18 = *(CFTypeRef *)(a1 + 192);
          if (v18)
            v18 = CFRetain(v18);
          v13 = 0;
          *a4 = v18;
        }
        goto LABEL_34;
      }
      v9 = VTDecompressionSessionRemote_CopyProperty(a1, CFSTR("PoolPixelBufferAttributes"), a3, &v24);
      if (!(_DWORD)v9)
      {
        v10 = *(const void **)(a1 + 192);
        if (v10)
        {
          CFRelease(v10);
          *(_QWORD *)(a1 + 192) = 0;
        }
        v11 = *(const void **)(a1 + 184);
        v12 = cf[0];
        *(CFTypeRef *)(a1 + 184) = cf[0];
        if (v12)
          CFRetain(v12);
        if (v11)
          CFRelease(v11);
        goto LABEL_14;
      }
    }
    v13 = v9;
    goto LABEL_17;
  }
  CStringPtrAndBufferToFree = (const char *)FigCFStringGetCStringPtrAndBufferToFree();
  CFPropertyListFromData = VTDecompressionSessionRemoteClient_CopyProperty(*(_DWORD *)(a1 + 24), CStringPtrAndBufferToFree, &v21, &v20, &v22);
  if ((_DWORD)CFPropertyListFromData)
    goto LABEL_21;
  v13 = v22;
  if (!v22)
  {
    CFPropertyListFromData = FigCreateCFPropertyListFromData();
LABEL_21:
    v13 = CFPropertyListFromData;
  }
LABEL_34:
  free(0);
  v19 = vtdsr_handleMachErrorsInternal(a1, v13);
  if (v20)
    MEMORY[0x194029090](*MEMORY[0x1E0C83DA0], v21);
  return v19;
}

uint64_t VTDecompressionSessionRemote_SetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v4;
  const char *CStringPtrAndBufferToFree;
  uint64_t CFDataFromCFPropertyList;
  mach_port_t v7;
  const UInt8 *BytePtr;
  unsigned int Length;
  unsigned int v10;
  uint64_t v11;
  unsigned int v13;

  v13 = 0;
  if (*(_BYTE *)(a1 + 28) || *(_BYTE *)(a1 + 52) || !a2 || !a3)
    return FigSignalErrorAt();
  if (FigCFEqual())
  {
    v4 = *(const void **)(a1 + 208);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(a1 + 208) = 0;
    }
  }
  CStringPtrAndBufferToFree = (const char *)FigCFStringGetCStringPtrAndBufferToFree();
  CFGetAllocator((CFTypeRef)a1);
  CFDataFromCFPropertyList = FigCreateCFDataFromCFPropertyList();
  if ((_DWORD)CFDataFromCFPropertyList)
  {
    v11 = CFDataFromCFPropertyList;
  }
  else
  {
    v7 = *(_DWORD *)(a1 + 24);
    BytePtr = CFDataGetBytePtr(0);
    Length = CFDataGetLength(0);
    v10 = VTDecompressionSessionRemoteClient_SetProperty(v7, CStringPtrAndBufferToFree, (uint64_t)BytePtr, Length, (int *)&v13);
    if (v10)
      v11 = v10;
    else
      v11 = v13;
  }
  free(0);
  return vtdsr_handleMachErrorsInternal(a1, v11);
}

uint64_t VTDecompressionSessionRemote_SetProperties(mach_port_t *cf, uint64_t a2)
{
  uint64_t CFDataFromCFPropertyList;
  mach_port_t v5;
  const UInt8 *BytePtr;
  int Length;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;

  v10 = 0;
  if (*((_BYTE *)cf + 28) || *((_BYTE *)cf + 52) || !a2)
    return FigSignalErrorAt();
  CFGetAllocator(cf);
  CFDataFromCFPropertyList = FigCreateCFDataFromCFPropertyList();
  if ((_DWORD)CFDataFromCFPropertyList)
  {
    v9 = CFDataFromCFPropertyList;
  }
  else
  {
    v5 = cf[6];
    BytePtr = CFDataGetBytePtr(0);
    Length = CFDataGetLength(0);
    v8 = VTDecompressionSessionRemoteClient_SetProperties(v5, (uint64_t)BytePtr, Length, (int *)&v10);
    if (v8)
      v9 = v8;
    else
      v9 = v10;
  }
  return vtdsr_handleMachErrorsInternal((uint64_t)cf, v9);
}

uint64_t VTDecompressionSessionRemote_SetMultiImageCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 && a2 && !*(_QWORD *)(a1 + 88))
  {
    *(_QWORD *)(a1 + 88) = a2;
    *(_QWORD *)(a1 + 96) = a3;
    return VTDecompressionSessionRemoteClient_EnableMIO(*(_DWORD *)(a1 + 24));
  }
  else
  {
    FigSignalErrorAt();
    return 0;
  }
}

uint64_t VTDecompressionSessionRemote_DecodeFrame(uint64_t a1, opaqueCMSampleBuffer *a2, int a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  return vtDecompressionSessionRemote_DecodeFrameCommon(a1, a2, a3, a4, a5, a6, 0, 0);
}

uint64_t vtDecompressionSessionRemote_DecodeFrameCommon(uint64_t a1, opaqueCMSampleBuffer *a2, int a3, uint64_t a4, uint64_t a5, _DWORD *a6, const void *a7, const void *a8)
{
  uint64_t SerializedAtomDataForSampleBufferWithOptions;
  uint64_t v18;
  uint64_t CFDataFromCFPropertyList;
  uint64_t *v20;
  uint64_t v21;
  NSObject *v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  const UInt8 *BytePtr;
  int Length;
  uint64_t v29;
  int v30;
  int v31;
  NSObject *v32;
  uint64_t v33;
  _QWORD v34[6];
  _QWORD block[6];
  CFDataRef theData;
  uint64_t v37;
  uint64_t v38;
  int v39;

  v39 = 0;
  v38 = 0;
  theData = 0;
  v37 = 0;
  if (*(_BYTE *)(a1 + 28) || *(_BYTE *)(a1 + 52))
    return FigSignalErrorAt();
  VTVideoCodecService_ShouldUseSeparateCodecProcessForDecode();
  SerializedAtomDataForSampleBufferWithOptions = FigRemote_CreateSerializedAtomDataForSampleBufferWithOptions();
  if ((_DWORD)SerializedAtomDataForSampleBufferWithOptions)
  {
    v18 = SerializedAtomDataForSampleBufferWithOptions;
    *(_QWORD *)(a1 + 176) = 0;
    goto LABEL_20;
  }
  *(_QWORD *)(a1 + 176) = (v37 + *MEMORY[0x1E0C85AD8] - 1) & -*MEMORY[0x1E0C85AD8];
  if (a4)
  {
    CFDataFromCFPropertyList = FigCreateCFDataFromCFPropertyList();
    if ((_DWORD)CFDataFromCFPropertyList)
    {
      v18 = CFDataFromCFPropertyList;
      goto LABEL_20;
    }
  }
  v20 = (uint64_t *)malloc_type_calloc(1uLL, 0x50uLL, 0x10A00405DCDF47BuLL);
  v21 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = v21 + 1;
  *v20 = v21;
  v20[1] = a5;
  v20[3] = (uint64_t)_Block_copy(a7);
  v20[4] = (uint64_t)_Block_copy(a8);
  v20[2] = CMSampleBufferGetNumSamples(a2);
  v22 = *(NSObject **)(a1 + 104);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __vtDecompressionSessionRemote_DecodeFrameCommon_block_invoke;
  block[3] = &__block_descriptor_tmp_16_2;
  block[4] = a1;
  block[5] = v20;
  dispatch_sync(v22, block);
  v23 = *(_DWORD *)(a1 + 24);
  v24 = v39;
  v25 = v38;
  v26 = v37;
  if (!theData)
  {
    BytePtr = 0;
    goto LABEL_12;
  }
  BytePtr = CFDataGetBytePtr(theData);
  if (!theData)
  {
LABEL_12:
    Length = 0;
    goto LABEL_13;
  }
  Length = CFDataGetLength(theData);
LABEL_13:
  v29 = VTDecompressionSessionRemoteClient_DecodeFrame(v23, v24, v25, v26, a3, (uint64_t)BytePtr, Length, *v20, a8 != 0);
  if ((_DWORD)v29)
  {
    v18 = v29;
  }
  else
  {
    FigSemaphoreWaitRelative();
    v18 = *(unsigned int *)(a1 + 152);
    v30 = *(_DWORD *)(a1 + 144);
    v31 = *(unsigned __int8 *)(a1 + 148);
    if ((v30 & 1) == 0)
      vtdsr_dequeueAllPendingFramesAndCallbackClientForEach(a1, 0, 1);
    if (a6)
      *a6 = v30;
    if (v31)
      goto LABEL_20;
  }
  v32 = *(NSObject **)(a1 + 104);
  v34[0] = MEMORY[0x1E0C809B0];
  v34[1] = 0x40000000;
  v34[2] = __vtDecompressionSessionRemote_DecodeFrameCommon_block_invoke_2;
  v34[3] = &__block_descriptor_tmp_17_2;
  v34[4] = a1;
  v34[5] = v20;
  dispatch_sync(v32, v34);
LABEL_20:
  v33 = vtdsr_handleMachErrorsInternal(a1, v18);
  FigMachPortReleaseSendRight_();
  if (v37)
    MEMORY[0x194029090](*MEMORY[0x1E0C83DA0], v38);
  if (theData)
    CFRelease(theData);
  return v33;
}

uint64_t VTDecompressionSessionRemote_DecodeFrameWithOutputHandler(uint64_t a1, opaqueCMSampleBuffer *a2, int a3, uint64_t a4, _DWORD *a5, unint64_t a6, unint64_t a7)
{
  if (a6 | a7)
    return vtDecompressionSessionRemote_DecodeFrameCommon(a1, a2, a3, a4, 0, a5, (const void *)a6, (const void *)a7);
  else
    return FigSignalErrorAt();
}

uint64_t VTDecompressionSessionRemoteCallbackServer_DecodeFrameReturn(uint64_t a1, uint64_t a2, int a3, char a4, int a5)
{
  uint64_t v8;
  const void *v9;

  v8 = weakReferenceTable_CopyPointerFromKey_0();
  if (v8)
  {
    v9 = (const void *)v8;
    *(_DWORD *)(v8 + 144) = a3;
    *(_DWORD *)(v8 + 152) = a5;
    *(_BYTE *)(v8 + 148) = a4;
    FigSemaphoreSignal();
    CFRelease(v9);
  }
  return 0;
}

uint64_t weakReferenceTable_CopyPointerFromKey_0()
{
  MEMORY[0x1940281CC](&gWeakReferenceTable_RemoteDecompressionSessionClientThreadOnce, weakReferenceTable_OneTimeInitialization_0);
  if (gWeakReferenceTable_RemoteDecompressionSessionClient)
    return FigCFWeakReferenceTableCopyValue();
  FigSignalErrorAt();
  return 0;
}

uint64_t VTDecompressionSessionRemote_WaitForAsynchronousFrames(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (*(_BYTE *)(a1 + 28) || !*(_QWORD *)(a1 + 16))
    return FigSignalErrorAt();
  v3 = VTDecompressionSessionRemoteClient_FinishDelayedFrames(*(_DWORD *)(a1 + 24));
  if ((_DWORD)v3)
  {
    v4 = v3;
  }
  else
  {
    FigSemaphoreWaitRelative();
    v4 = *(unsigned int *)(a1 + 168);
    if (!(_DWORD)v4)
    {
      FigSemaphoreWaitRelative();
      FigSemaphoreSignal();
      v4 = 0;
    }
  }
  return vtdsr_handleMachErrorsInternal(a1, v4);
}

uint64_t VTDecompressionSessionRemote_FinishDelayedFrames(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (*(_BYTE *)(a1 + 28) || *(_BYTE *)(a1 + 52))
    return FigSignalErrorAt();
  v3 = VTDecompressionSessionRemoteClient_FinishDelayedFrames(*(_DWORD *)(a1 + 24));
  if ((_DWORD)v3)
  {
    v4 = v3;
  }
  else
  {
    FigSemaphoreWaitRelative();
    v4 = *(unsigned int *)(a1 + 168);
  }
  return vtdsr_handleMachErrorsInternal(a1, v4);
}

uint64_t VTDecompressionSessionRemoteCallbackServer_FinishDelayedFramesReturn(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  const void *v5;

  v4 = weakReferenceTable_CopyPointerFromKey_0();
  if (v4)
  {
    v5 = (const void *)v4;
    *(_DWORD *)(v4 + 168) = a3;
    FigSemaphoreSignal();
    CFRelease(v5);
  }
  return 0;
}

uint64_t VTDecompressionSessionRemote_CanAcceptFormatDescription(uint64_t a1, void *a2)
{
  CFArrayRef v3;
  CFArrayRef v4;
  uint64_t SerializedAtomDataForFormatDescriptions;
  uint64_t v7;
  int v8;
  void *values;

  values = a2;
  v8 = 0;
  if (*(_BYTE *)(a1 + 28) || *(_BYTE *)(a1 + 52))
  {
    v7 = 0;
LABEL_10:
    vtdsr_handleMachErrorsInternal(a1, v7);
    return v8;
  }
  v3 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&values, 1, MEMORY[0x1E0C9B378]);
  if (!v3)
  {
    v7 = FigSignalErrorAt();
    goto LABEL_10;
  }
  v4 = v3;
  SerializedAtomDataForFormatDescriptions = FigRemote_CreateSerializedAtomDataForFormatDescriptions();
  if (!(_DWORD)SerializedAtomDataForFormatDescriptions)
    SerializedAtomDataForFormatDescriptions = VTDecompressionSessionRemoteClient_CanAcceptFormatDescription(*(_DWORD *)(a1 + 24), 0, 0, &v8);
  vtdsr_handleMachErrorsInternal(a1, SerializedAtomDataForFormatDescriptions);
  CFRelease(v4);
  return v8;
}

uint64_t VTDecompressionSessionRemote_CopyBlackPixelBuffer(uint64_t a1, CFTypeRef *a2)
{
  uint64_t PixelBufferFromSerializedAtomData;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  CFTypeRef cf;
  unsigned int v10;

  v10 = 0;
  cf = 0;
  v8 = 0;
  v7 = 0;
  v6 = 0;
  if (*(_BYTE *)(a1 + 28) || *(_BYTE *)(a1 + 52))
    return FigSignalErrorAt();
  PixelBufferFromSerializedAtomData = VTDecompressionSessionRemoteClient_CopyBlackPixelBuffer(*(_DWORD *)(a1 + 24), &v8, &v7, &v6, &v10);
  if ((_DWORD)PixelBufferFromSerializedAtomData)
  {
LABEL_16:
    v5 = PixelBufferFromSerializedAtomData;
    goto LABEL_9;
  }
  v5 = v10;
  if (!v10)
  {
    PixelBufferFromSerializedAtomData = FigRemote_CreatePixelBufferFromSerializedAtomData();
    if (!(_DWORD)PixelBufferFromSerializedAtomData)
    {
      v6 = 0;
      v5 = 0;
      if (a2)
      {
        *a2 = cf;
        cf = 0;
      }
      goto LABEL_9;
    }
    goto LABEL_16;
  }
LABEL_9:
  if (v8)
    FigMachPortReleaseSendRight_();
  if (v6)
    MEMORY[0x194029090](*MEMORY[0x1E0C83DA0], v7);
  if (cf)
    CFRelease(cf);
  return v5;
}

void VTDecompressionSessionRemote_GetMinOutputPresentationTimeStampOfFramesBeingDecoded(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t MinOutputPresentationTimeStampOfFramesBeingDecoded;
  NSObject *v5;
  int v6;
  uint64_t *v7;
  _QWORD block[7];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;

  v14 = 0;
  v15 = &v14;
  v16 = 0x2000000000;
  v17 = 0;
  v9 = 0;
  v10 = &v9;
  v11 = 0x3000000000;
  v12 = *MEMORY[0x1E0CA2E18];
  v13 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  if (*(_BYTE *)(a1 + 28) || *(_BYTE *)(a1 + 52))
  {
    MinOutputPresentationTimeStampOfFramesBeingDecoded = 0;
  }
  else if (*(_BYTE *)(a1 + 128))
  {
    MinOutputPresentationTimeStampOfFramesBeingDecoded = VTDecompressionSessionRemoteClient_GetMinOutputPresentationTimeStampOfFramesBeingDecoded(*(_DWORD *)(a1 + 24), (uint64_t)&v12);
    *((_DWORD *)v15 + 6) = MinOutputPresentationTimeStampOfFramesBeingDecoded;
  }
  else
  {
    v5 = *(NSObject **)(a1 + 112);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __VTDecompressionSessionRemote_GetMinOutputPresentationTimeStampOfFramesBeingDecoded_block_invoke;
    block[3] = &unk_1E2F63410;
    block[4] = &v14;
    block[5] = &v9;
    block[6] = a1;
    dispatch_sync(v5, block);
    MinOutputPresentationTimeStampOfFramesBeingDecoded = *((unsigned int *)v15 + 6);
  }
  v6 = vtdsr_handleMachErrorsInternal(a1, MinOutputPresentationTimeStampOfFramesBeingDecoded);
  *((_DWORD *)v15 + 6) = v6;
  v7 = v10;
  *(_OWORD *)a2 = *(_OWORD *)(v10 + 3);
  *(_QWORD *)(a2 + 16) = v7[5];
  _Block_object_dispose(&v9, 8);
  _Block_object_dispose(&v14, 8);
}

uint64_t VTDecompressionSessionRemote_GetMinAndMaxOutputPresentationTimeStampOfFramesBeingDecoded(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int MinAndMaxOutputPresentationTimeStampOfFramesBeingDecoded;
  uint64_t *v9;
  NSObject *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD block[9];
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD v18[3];
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD v22[3];
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  int v30;

  v27 = 0;
  v28 = &v27;
  v29 = 0x2000000000;
  v30 = 0;
  v23 = 0;
  v24 = &v23;
  v25 = 0x2000000000;
  v26 = 0;
  v19 = 0;
  v20 = &v19;
  v21 = 0x3000000000;
  memset(v22, 0, sizeof(v22));
  v15 = 0;
  v16 = &v15;
  v17 = 0x3000000000;
  memset(v18, 0, sizeof(v18));
  if (!*(_BYTE *)(a1 + 28) && !*(_BYTE *)(a1 + 52))
  {
    if (*(_BYTE *)(a1 + 128))
    {
      MinAndMaxOutputPresentationTimeStampOfFramesBeingDecoded = VTDecompressionSessionRemoteClient_GetMinAndMaxOutputPresentationTimeStampOfFramesBeingDecoded(*(_DWORD *)(a1 + 24), (uint64_t)v22, (uint64_t)v18, &v26);
      v9 = v28;
      *((_DWORD *)v28 + 6) = MinAndMaxOutputPresentationTimeStampOfFramesBeingDecoded;
      if (MinAndMaxOutputPresentationTimeStampOfFramesBeingDecoded)
        goto LABEL_14;
    }
    else
    {
      v10 = *(NSObject **)(a1 + 112);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = __VTDecompressionSessionRemote_GetMinAndMaxOutputPresentationTimeStampOfFramesBeingDecoded_block_invoke;
      block[3] = &unk_1E2F63438;
      block[4] = &v27;
      block[5] = &v19;
      block[6] = &v15;
      block[7] = &v23;
      block[8] = a1;
      dispatch_sync(v10, block);
      v9 = v28;
      if (*((_DWORD *)v28 + 6))
      {
LABEL_14:
        v4 = vtdsr_handleMachErrorsInternal(a1, *((unsigned int *)v9 + 6));
        *((_DWORD *)v28 + 6) = v4;
        goto LABEL_4;
      }
    }
    v11 = *((_DWORD *)v24 + 6);
    *((_DWORD *)v9 + 6) = v11;
    if (!v11)
    {
      if (a2)
      {
        v12 = v20[5];
        *(_OWORD *)a2 = *(_OWORD *)(v20 + 3);
        *(_QWORD *)(a2 + 16) = v12;
      }
      if (a3)
      {
        v13 = v16[5];
        *(_OWORD *)a3 = *(_OWORD *)(v16 + 3);
        *(_QWORD *)(a3 + 16) = v13;
      }
    }
    goto LABEL_14;
  }
  v4 = FigSignalErrorAt();
LABEL_4:
  _Block_object_dispose(&v15, 8);
  _Block_object_dispose(&v19, 8);
  _Block_object_dispose(&v23, 8);
  _Block_object_dispose(&v27, 8);
  return v4;
}

uint64_t VTTileDecompressionSessionRemote_Create(uint64_t a1, uint64_t a2, void *a3, const __CFDictionary *a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  uint64_t v11;
  uint64_t Instance;
  _QWORD *v13;
  const __CFAllocator *v14;
  CFArrayRef v15;
  uint64_t SerializedAtomDataForFormatDescriptions;
  __CFDictionary *MutableCopy;
  __CFDictionary *v18;
  __CFDictionary *v19;
  uint64_t Key_0;
  uint64_t v21;
  uint64_t v22;
  void *values;

  values = a3;
  v11 = vtdsr_oneTimeInitialization();
  if ((_DWORD)v11)
    goto LABEL_26;
  VTVideoCodecService_ShouldUseSeparateCodecProcessForDecode();
  MEMORY[0x1940281CC](&VTDecompressionSessionRemoteGetTypeID_sRegisterVTDecompressionSessionRemoteOnce, vtdcr_Register);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
  {
    v11 = FigSignalErrorAt();
LABEL_26:
    v21 = v11;
    v15 = 0;
    v19 = 0;
    goto LABEL_19;
  }
  v13 = (_QWORD *)Instance;
  *(_QWORD *)(Instance + 56) = FigCFWeakReferenceHolderCreateWithReferencedObject();
  v13[15] = dispatch_group_create();
  v13[14] = dispatch_queue_create("com.apple.coremedia.decompressionsession.clientcallback", 0);
  v13[13] = dispatch_queue_create("com.apple.coremedia.decompressionsession.pendingframequeue", 0);
  v13[17] = FigSemaphoreCreate();
  v13[20] = FigSemaphoreCreate();
  v13[25] = 1;
  v13[5] = FigSemaphoreCreate();
  v13[28] = a5;
  v13[29] = a6;
  v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v15 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&values, 1, MEMORY[0x1E0C9B378]);
  if (!v15)
  {
    SerializedAtomDataForFormatDescriptions = FigSignalErrorAt();
    goto LABEL_28;
  }
  SerializedAtomDataForFormatDescriptions = FigRemote_CreateSerializedAtomDataForFormatDescriptions();
  if ((_DWORD)SerializedAtomDataForFormatDescriptions)
  {
LABEL_28:
    v21 = SerializedAtomDataForFormatDescriptions;
    goto LABEL_29;
  }
  if (!a4)
  {
    v19 = 0;
LABEL_14:
    v13[30] = 0;
    Key_0 = weakReferenceTable_AddPointerAndGetKey_0();
    if ((_DWORD)Key_0)
      goto LABEL_24;
    Key_0 = FigRPCCreateServerConnectionForObjectUsingMachChannel();
    if ((_DWORD)Key_0)
      goto LABEL_24;
    Key_0 = FigRPCGetServerConnectionInfo();
    if ((_DWORD)Key_0)
      goto LABEL_24;
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
    v21 = 0;
    if (!a7)
      goto LABEL_30;
    *a7 = v13;
LABEL_19:
    v22 = vtdsr_handleMachErrorsInternal(0, v21);
    if (!v15)
      goto LABEL_21;
    goto LABEL_20;
  }
  if (!VTVideoCodecService_ShouldUseSeparateCodecProcessForDecode()
    || !CFDictionaryContainsKey(a4, CFSTR("CMSession")))
  {
    v19 = 0;
LABEL_11:
    Key_0 = FigCreateCFDataFromCFPropertyList();
    if ((_DWORD)Key_0)
    {
LABEL_24:
      v21 = Key_0;
      goto LABEL_30;
    }
    goto LABEL_14;
  }
  MutableCopy = CFDictionaryCreateMutableCopy(v14, 0, a4);
  if (MutableCopy)
  {
    v18 = MutableCopy;
    CFDictionaryRemoveValue(MutableCopy, CFSTR("CMSession"));
    v19 = v18;
    goto LABEL_11;
  }
  v21 = 0;
LABEL_29:
  v19 = 0;
LABEL_30:
  v22 = vtdsr_handleMachErrorsInternal((uint64_t)v13, v21);
  CFRelease(v13);
  if (v15)
LABEL_20:
    CFRelease(v15);
LABEL_21:
  if (v19)
    CFRelease(v19);
  return v22;
}

uint64_t VTDecompressionSessionRemote_DecodeTile(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5, uint64_t a6, int a7, uint64_t a8, _DWORD *a9)
{
  uint64_t SerializedAtomDataForSampleBuffer;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  CFTypeRef v22;
  uint64_t SerializedAtomDataForPixelBuffer;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  NSObject *v29;
  uint64_t v30;
  unsigned int *v31;
  uint64_t v32;
  const void *v33;
  _QWORD v34[6];
  _QWORD block[6];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v39 = 0;
  v40 = 0;
  v38 = 0;
  v36 = 0;
  v37 = 0;
  if (*(_BYTE *)(a1 + 28) || *(_BYTE *)(a1 + 52))
    return FigSignalErrorAt();
  SerializedAtomDataForSampleBuffer = FigRemote_CreateSerializedAtomDataForSampleBuffer();
  if ((_DWORD)SerializedAtomDataForSampleBuffer)
  {
    v18 = SerializedAtomDataForSampleBuffer;
    *(_QWORD *)(a1 + 176) = 0;
  }
  else
  {
    v19 = (_QWORD *)MEMORY[0x1E0C85AD8];
    *(_QWORD *)(a1 + 176) = (v38 + *MEMORY[0x1E0C85AD8] - 1) & -*MEMORY[0x1E0C85AD8];
    if (!FigCFEqual())
    {
      SerializedAtomDataForPixelBuffer = FigRemote_CreateSerializedAtomDataForPixelBuffer();
      if ((_DWORD)SerializedAtomDataForPixelBuffer)
      {
        v18 = SerializedAtomDataForPixelBuffer;
        *(_QWORD *)(a1 + 216) = 0;
        goto LABEL_19;
      }
      v32 = (v36 + *v19 - 1) & -*v19;
      v33 = *(const void **)(a1 + 208);
      *(_QWORD *)(a1 + 208) = a5;
      *(_QWORD *)(a1 + 216) = v32;
      if (a5)
        CFRetain(a5);
      if (v33)
        CFRelease(v33);
    }
    v20 = (uint64_t *)malloc_type_calloc(1uLL, 0x50uLL, 0x10A00405DCDF47BuLL);
    v21 = *(_QWORD *)(a1 + 200);
    *(_QWORD *)(a1 + 200) = v21 + 1;
    *v20 = v21;
    v20[1] = a8;
    if (a5)
      v22 = CFRetain(a5);
    else
      v22 = 0;
    v20[5] = (uint64_t)v22;
    v20[6] = a3;
    v20[7] = a4;
    v20[8] = a6;
    v20[2] = 1;
    v24 = *(NSObject **)(a1 + 104);
    v25 = MEMORY[0x1E0C809B0];
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __VTDecompressionSessionRemote_DecodeTile_block_invoke;
    block[3] = &__block_descriptor_tmp_7_4;
    block[4] = a1;
    block[5] = v20;
    dispatch_sync(v24, block);
    v26 = VTDecompressionSessionRemoteClient_DecodeTile(*(_DWORD *)(a1 + 24), SHIDWORD(v40), v39, v38, a3, a4, v40, v37, v36, a6, a7, *v20);
    if ((_DWORD)v26)
    {
      v18 = v26;
    }
    else
    {
      FigSemaphoreWaitRelative();
      v18 = *(unsigned int *)(a1 + 152);
      v27 = *(_DWORD *)(a1 + 144);
      v28 = *(unsigned __int8 *)(a1 + 148);
      if ((v27 & 1) == 0)
        vtdsr_dequeueAllPendingFramesAndCallbackClientForEach(a1, 0, 1);
      if (a9)
        *a9 = v27;
      if (v28)
        goto LABEL_19;
    }
    v29 = *(NSObject **)(a1 + 104);
    v34[0] = v25;
    v34[1] = 0x40000000;
    v34[2] = __VTDecompressionSessionRemote_DecodeTile_block_invoke_2;
    v34[3] = &__block_descriptor_tmp_8_0;
    v34[4] = a1;
    v34[5] = v20;
    dispatch_sync(v29, v34);
  }
LABEL_19:
  v30 = vtdsr_handleMachErrorsInternal(a1, v18);
  FigMachPortReleaseSendRight_();
  FigMachPortReleaseSendRight_();
  v31 = (unsigned int *)MEMORY[0x1E0C83DA0];
  if (v38)
    MEMORY[0x194029090](*MEMORY[0x1E0C83DA0], v39);
  if (v36)
    MEMORY[0x194029090](*v31, v37);
  return v30;
}

uint64_t VTDecompressionSessionRemoteCallbackServer_NotificationIsPending()
{
  uint64_t v0;
  uint64_t v1;
  const __CFAllocator *v3;
  unsigned int *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  const void *v8;
  CFStringRef v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  CFTypeRef cf;
  char cStr[512];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v13 = 1;
  v0 = weakReferenceTable_CopyPointerFromKey_0();
  if (v0)
  {
    v1 = v0;
    v12 = 0;
    if (!*(_BYTE *)(v0 + 52))
    {
      v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v4 = (unsigned int *)MEMORY[0x1E0C83DA0];
      do
      {
        v11 = 0;
        v10 = 0;
        v13 = 0;
        if (!VTDecompressionSessionRemoteClient_GetNextPendingNotification(*(_DWORD *)(v1 + 24), &v13, &v12, cStr, &v11, &v10))
        {
          v5 = v11;
          v6 = v10;
          cf = 0;
          if (!*(_BYTE *)(v1 + 52))
          {
            v7 = FigCFWeakReferenceHolderCopyReferencedObject();
            if (v7)
            {
              v8 = (const void *)v7;
              v9 = CFStringCreateWithCString(v3, cStr, 0);
              if (v9)
              {
                if (v5 && v6)
                  FigCreateCFPropertyListFromData();
                CMNotificationCenterGetDefaultLocalCenter();
                CMNotificationCenterPostNotification();
              }
              CFRelease(v8);
              if (cf)
                CFRelease(cf);
              if (v9)
                CFRelease(v9);
            }
          }
          MEMORY[0x194029090](*v4, v11, v10);
        }
      }
      while (v13);
    }
    CFRelease((CFTypeRef)v1);
  }
  return 0;
}

uint64_t VTDecompressionSessionRemoteCallbackServer_FrameIsPending()
{
  uint64_t v0;
  const void *v1;

  v0 = weakReferenceTable_CopyPointerFromKey_0();
  if (v0)
  {
    v1 = (const void *)v0;
    if (!*(_BYTE *)(v0 + 52))
      vtdsr_dequeueAllPendingFramesAndCallbackClientForEach(v0, 0, 0);
    CFRelease(v1);
  }
  return 0;
}

double vtdsr_Init(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 240) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void vtdsr_Finalize(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  const void *v5;
  const void *v6;

  VTDecompressionSessionRemote_Invalidate(a1);
  v2 = *(NSObject **)(a1 + 120);
  if (v2)
  {
    dispatch_group_wait(v2, 0xFFFFFFFFFFFFFFFFLL);
    dispatch_release(*(dispatch_object_t *)(a1 + 120));
  }
  v3 = *(NSObject **)(a1 + 112);
  if (v3)
    dispatch_release(v3);
  v4 = *(NSObject **)(a1 + 104);
  if (v4)
    dispatch_release(v4);
  FigSemaphoreDestroy();
  FigSemaphoreDestroy();
  FigSemaphoreDestroy();
  v5 = *(const void **)(a1 + 56);
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)(a1 + 208);
  if (v6)
    CFRelease(v6);
}

CFStringRef vtdsr_CopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[VTDecompressionSessionRemote %p]"), a1);
}

CFStringRef vtdsr_CopyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[VTDecompressionSessionRemote %p]"), a1);
}

uint64_t __vtdsr_oneTimeInitialization_block_invoke(uint64_t a1)
{
  uint64_t result;

  VTVideoCodecService_ShouldUseSeparateCodecProcessForDecode();
  result = FigRPCCreateRemoteClient();
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t weakReferenceTable_OneTimeInitialization_0()
{
  return FigCFWeakReferenceTableCreate();
}

void __vtdsr_dequeueAllPendingFramesAndCallbackClientForEach_block_invoke(uint64_t a1)
{
  int v2;
  const __CFAllocator *v3;
  const CFArrayCallBacks *v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v10;
  uint64_t v11;
  char *v12;
  const UInt8 *v13;
  CFIndex v14;
  CFDataRef v15;
  const void **v16;
  const void *v17;
  int v18;
  NSObject *v19;
  const void *v20;
  void (*v21)(uint64_t, uint64_t, uint64_t, uint64_t, CFTypeRef, __int128 *, __int128 *);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  CFTypeRef v26;
  uint64_t v27;
  const void *v28;
  int v29;
  uint64_t i;
  char *v31;
  const void *v32;
  const void *v33;
  const void *v34;
  const void *v35;
  void (*v36)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v37;
  void (*v38)(uint64_t, _QWORD, _QWORD, _QWORD, CFTypeRef, __int128 *, __int128 *);
  uint64_t v39;
  void (*v40)(void);
  void (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, _QWORD, _QWORD, const void *, _QWORD, __int128 *, __int128 *);
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  _QWORD block[13];
  CFTypeRef cf;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  void (*v84)(uint64_t, uint64_t);
  void (*v85)(uint64_t);
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  void (*v90)(uint64_t, uint64_t);
  void (*v91)(uint64_t);
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  _OWORD v105[2];
  __int128 v106;
  __int128 v107;
  _OWORD v108[2];
  __int128 v109;
  __int128 v110;
  _OWORD v111[2];
  __int128 v112;
  __int128 v113;
  _OWORD v114[2];
  uint64_t v115;

  v115 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 40) + 52) || *(_BYTE *)(a1 + 48))
  {
    v2 = 0;
    v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v4 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    v5 = (unsigned int *)MEMORY[0x1E0C83DA0];
    while (1)
    {
      v6 = *(_QWORD *)(a1 + 40);
      v98 = 0;
      v97 = 0;
      v93 = 0;
      v94 = &v93;
      v95 = 0x2000000000;
      v96 = 0;
      v87 = 0;
      v88 = &v87;
      v89 = 0x3002000000;
      v90 = __Block_byref_object_copy__0;
      v91 = __Block_byref_object_dispose__0;
      v92 = 0;
      v81 = 0;
      v82 = &v81;
      v83 = 0x3002000000;
      v84 = __Block_byref_object_copy__0;
      v85 = __Block_byref_object_dispose__0;
      v86 = 0;
      v77 = 0;
      v78 = &v77;
      v79 = 0x2000000000;
      v80 = 0;
      v73 = 0;
      v74 = &v73;
      v75 = 0x2000000000;
      v76 = 0;
      v69 = 0;
      v70 = &v69;
      v71 = 0x2000000000;
      v72 = 0;
      v65 = 0;
      v66 = &v65;
      v67 = 0x2000000000;
      v68 = 0;
      v64 = 0;
      v60 = 0;
      v61 = &v60;
      v62 = 0x2000000000;
      v63 = 0;
      v59 = 0;
      v58 = 0;
      v57 = 0;
      v55 = 0uLL;
      v56 = 0;
      v53 = 0uLL;
      v54 = 0;
      memset(v114, 0, sizeof(v114));
      v113 = 0u;
      v112 = 0u;
      memset(v111, 0, sizeof(v111));
      v110 = 0u;
      v109 = 0u;
      memset(v108, 0, sizeof(v108));
      v107 = 0u;
      v106 = 0u;
      memset(v105, 0, sizeof(v105));
      v104 = 0u;
      v103 = 0u;
      v102 = 0u;
      v101 = 0u;
      v99 = 0u;
      v100 = 0u;
      cf = 0;
      v7 = VTDecompressionSessionRemoteClient_DequeueNextPendingFrame(*(_DWORD *)(v6 + 24), &v97, &v96, (_DWORD *)&v64 + 1, &v64, &v59, &v58, &v57, &v99, (_QWORD *)&v99 + 1, &v100, (_QWORD *)&v100 + 1, &v101, &v103, (_QWORD *)&v103 + 1, &v104, (_QWORD *)&v104 + 1, v105, &v106,
             (_QWORD *)&v106 + 1,
             &v107,
             (_QWORD *)&v107 + 1,
             v108,
             &v109,
             (_QWORD *)&v109 + 1,
             &v110,
             (_QWORD *)&v110 + 1,
             v111,
             &v112,
             (_QWORD *)&v112 + 1,
             &v113,
             (_QWORD *)&v113 + 1,
             v114,
             (uint64_t)&v55,
             (uint64_t)&v53,
             &v98,
             (_DWORD *)&v98 + 1);
      if ((_DWORD)v7)
      {
        v8 = v7;
LABEL_94:
        Mutable = 0;
        v10 = 0;
        goto LABEL_47;
      }
      v8 = HIDWORD(v98);
      if (HIDWORD(v98))
        goto LABEL_94;
      if (v97)
        break;
      v8 = 0;
      Mutable = 0;
      v10 = 0;
LABEL_46:
      v2 = v98;
LABEL_47:
      v29 = vtdsr_handleMachErrorsInternal(v6, v8);
      if (v59)
        FigMachPortReleaseSendRight_();
      if (v57)
        MEMORY[0x194029090](*v5, v58);
      for (i = 0; i != 320; i += 64)
      {
        if (*(_DWORD *)((char *)&v99 + i))
          FigMachPortReleaseSendRight_();
        v31 = (char *)&v99 + i;
        if (*(_DWORD *)((char *)&v99 + i + 16))
          MEMORY[0x194029090](*v5, *((_QWORD *)v31 + 1));
        if (*((_DWORD *)v31 + 8))
          MEMORY[0x194029090](*v5, *(_QWORD *)((char *)&v100 + i + 8));
        v32 = *(const void **)((char *)&v102 + i);
        if (v32)
          CFRelease(v32);
        v33 = *(const void **)((char *)&v101 + i + 8);
        if (v33)
          CFRelease(v33);
        v34 = *(const void **)((char *)&v102 + i + 8);
        if (v34)
          CFRelease(v34);
      }
      if (Mutable)
        CFRelease(Mutable);
      if (v10)
        CFRelease(v10);
      if (cf)
        CFRelease(cf);
      v35 = (const void *)v61[3];
      v4 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
      if (v35)
        CFRelease(v35);
      _Block_release((const void *)v88[5]);
      _Block_release((const void *)v82[5]);
      _Block_object_dispose(&v60, 8);
      _Block_object_dispose(&v65, 8);
      _Block_object_dispose(&v69, 8);
      _Block_object_dispose(&v73, 8);
      _Block_object_dispose(&v77, 8);
      _Block_object_dispose(&v81, 8);
      _Block_object_dispose(&v87, 8);
      _Block_object_dispose(&v93, 8);
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v29;
      if (!v2 || *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
        return;
    }
    if (HIDWORD(v64))
      goto LABEL_28;
    if (v59 | v57)
    {
      HIDWORD(v64) = FigRemote_CreatePixelBufferFromSerializedAtomData();
      if (HIDWORD(v64))
        goto LABEL_28;
      v57 = 0;
    }
    if (v99 | v100)
    {
      Mutable = CFArrayCreateMutable(v3, 5, v4);
      if (Mutable)
      {
        v10 = CFArrayCreateMutable(v3, 5, v4);
        if (v10)
        {
          v11 = 0;
          while (1)
          {
            v12 = (char *)&v99 + v11;
            if (*(_DWORD *)((char *)&v99 + v11) | *(_DWORD *)((char *)&v99 + v11 + 16))
            {
              HIDWORD(v64) = FigRemote_CreatePixelBufferFromSerializedAtomData();
              if (HIDWORD(v64))
                break;
              *((_DWORD *)v12 + 4) = 0;
            }
            v13 = (const UInt8 *)*((_QWORD *)v12 + 3);
            if (v13)
            {
              v14 = *(unsigned int *)((char *)&v101 + v11);
              if ((_DWORD)v14)
              {
                v15 = CFDataCreate(v3, v13, v14);
                *(_QWORD *)((char *)&v101 + v11 + 8) = v15;
                if (!v15)
                {
                  v18 = FigSignalErrorAt();
                  goto LABEL_27;
                }
                HIDWORD(v64) = MEMORY[0x194028124](v15, v3, (char *)&v102 + v11);
                if (HIDWORD(v64))
                  break;
              }
            }
            v16 = (const void **)((char *)&v99 + v11);
            v17 = *(const void **)((char *)&v102 + v11);
            if (v17 && v16[7])
            {
              CFArrayAppendValue(Mutable, v17);
              CFArrayAppendValue(v10, v16[7]);
            }
            v11 += 64;
            if (v11 == 320)
            {
              v18 = MEMORY[0x194028160](v3, Mutable, v10, &cf);
LABEL_27:
              v8 = 0;
              HIDWORD(v64) = v18;
              goto LABEL_30;
            }
          }
          v8 = 0;
        }
        else
        {
          v8 = FigSignalErrorAt();
        }
LABEL_30:
        v19 = *(NSObject **)(v6 + 104);
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 0x40000000;
        block[2] = __vtdsr_dequeueNextPendingFrameAndCallbackClient_block_invoke;
        block[3] = &unk_1E2F63578;
        block[12] = v6;
        block[4] = &v93;
        block[5] = &v87;
        block[6] = &v81;
        block[7] = &v77;
        block[8] = &v73;
        block[9] = &v69;
        block[10] = &v60;
        block[11] = &v65;
        dispatch_sync(v19, block);
        if (!*((_BYTE *)v66 + 24))
        {
          v8 = 4294954385;
          goto LABEL_47;
        }
        *(_BYTE *)(v6 + 128) = 1;
        v20 = (const void *)v61[3];
        if (!v20)
        {
          v21 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, CFTypeRef, __int128 *, __int128 *))(v6 + 88);
          if (v21)
          {
            v22 = *(_QWORD *)(v6 + 96);
            v23 = v94[3];
            v24 = HIDWORD(v64);
            v25 = v64;
            v26 = cf;
            v49 = v55;
            v50 = v56;
            v47 = v53;
            v48 = v54;
            goto LABEL_40;
          }
          v37 = v82[5];
          if (v37)
          {
            v38 = *(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, CFTypeRef, __int128 *, __int128 *))(v37 + 16);
            v49 = v55;
            v50 = v56;
            v47 = v53;
            v48 = v54;
            v38(v37, HIDWORD(v64), v64, 0, cf, &v49, &v47);
            goto LABEL_41;
          }
        }
        if (!cf || *(_QWORD *)(v6 + 88) || v82[5])
        {
          v21 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, CFTypeRef, __int128 *, __int128 *))(v6 + 72);
          if (v21)
          {
            v22 = *(_QWORD *)(v6 + 80);
            v23 = v94[3];
            v24 = HIDWORD(v64);
            v25 = v64;
            v49 = v55;
            v50 = v56;
            v47 = v53;
            v48 = v54;
            v26 = v20;
LABEL_40:
            v21(v22, v23, v24, v25, v26, &v49, &v47);
LABEL_41:
            if (!FigAtomicDecrement32())
              FigSemaphoreSignal();
            v27 = FigCFWeakReferenceHolderCopyReferencedObject();
            if (v27)
            {
              v28 = (const void *)v27;
              CMNotificationCenterGetDefaultLocalCenter();
              CMNotificationCenterPostNotification();
              CFRelease(v28);
            }
            *(_BYTE *)(v6 + 128) = 0;
            goto LABEL_46;
          }
          v36 = *(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(v6 + 224);
          if (v36)
          {
            v36(*(_QWORD *)(v6 + 232), v94[3], v78[3], v74[3], v61[3], v70[3], HIDWORD(v64), v64);
            goto LABEL_41;
          }
          v39 = v88[5];
          if (!v39)
          {
            v44 = v82[5];
            if (v44)
            {
              v45 = *(void (**)(uint64_t, _QWORD, _QWORD, const void *, _QWORD, __int128 *, __int128 *))(v44 + 16);
              v49 = v55;
              v50 = v56;
              v47 = v53;
              v48 = v54;
              v45(v44, HIDWORD(v64), v64, v20, 0, &v49, &v47);
            }
            goto LABEL_41;
          }
          v40 = *(void (**)(void))(v39 + 16);
          v49 = v55;
          v50 = v56;
          v47 = v53;
          v48 = v54;
        }
        else
        {
          if (!HIDWORD(v64))
            HIDWORD(v64) = -17699;
          v41 = *(void (**)(uint64_t, uint64_t))(v6 + 72);
          if (v41)
          {
            v42 = *(_QWORD *)(v6 + 80);
            v43 = v94[3];
            v49 = *MEMORY[0x1E0CA2E18];
            v50 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
            v47 = v49;
            v48 = v50;
            v41(v42, v43);
            goto LABEL_41;
          }
          v46 = v88[5];
          if (!v46)
            goto LABEL_41;
          v40 = *(void (**)(void))(v46 + 16);
          v49 = *MEMORY[0x1E0CA2E18];
          v50 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
          v47 = v49;
          v48 = v50;
        }
        v40();
        goto LABEL_41;
      }
      v8 = FigSignalErrorAt();
LABEL_29:
      v10 = 0;
      goto LABEL_30;
    }
LABEL_28:
    v8 = 0;
    Mutable = 0;
    goto LABEL_29;
  }
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = FigSignalErrorAt();
}

void __Block_byref_object_copy__0(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 135);
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 135);
}

void __vtdsr_dequeueNextPendingFrameAndCallbackClient_block_invoke(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  v1 = *(_QWORD **)(a1[12] + 32);
  if (v1)
  {
    v3 = *(_QWORD *)(a1[4] + 8);
    while (*v1 != *(_QWORD *)(v3 + 24))
    {
      v1 = (_QWORD *)v1[9];
      if (!v1)
        return;
    }
    *(_QWORD *)(v3 + 24) = v1[1];
    *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40) = _Block_copy((const void *)v1[3]);
    *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40) = _Block_copy((const void *)v1[4]);
    *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24) = v1[6];
    *(_QWORD *)(*(_QWORD *)(a1[8] + 8) + 24) = v1[7];
    *(_QWORD *)(*(_QWORD *)(a1[9] + 8) + 24) = v1[8];
    v4 = v1[2] - 1;
    v1[2] = v4;
    v5 = v1[5];
    if (v5)
      *(_QWORD *)(*(_QWORD *)(a1[10] + 8) + 24) = v5;
    if (!v4)
    {
      _Block_release((const void *)v1[3]);
      _Block_release((const void *)v1[4]);
      v6 = a1[12];
      v9 = *(_QWORD **)(v6 + 32);
      v7 = (_QWORD *)(v6 + 32);
      v8 = v9;
      if (v9 != v1)
      {
        do
        {
          v10 = v8;
          v8 = (_QWORD *)v8[9];
        }
        while (v8 != v1);
        v7 = v10 + 9;
      }
      *v7 = v1[9];
      free(v1);
    }
    *(_BYTE *)(*(_QWORD *)(a1[11] + 8) + 24) = 1;
  }
}

_QWORD *__vtdsr_handleDeadServerConnection_block_invoke(_QWORD *result)
{
  *(_QWORD *)(*(_QWORD *)(result[4] + 8) + 24) = *(_QWORD *)(result[6] + 32);
  *(_QWORD *)(*(_QWORD *)(result[5] + 8) + 24) = *(_QWORD *)(*(_QWORD *)(result[4] + 8) + 24);
  *(_QWORD *)(result[6] + 32) = 0;
  return result;
}

void __vtdsr_handleDeadServerConnection_block_invoke_2(_QWORD *a1)
{
  uint64_t v2;
  __int128 *v3;
  _QWORD *v4;
  void (*v5)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, __int128 *, __int128 *);
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, __int128 *, __int128 *);
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t, _QWORD, __int128 *, __int128 *);
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  const void *v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  v2 = *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
  if (v2)
  {
    v3 = (__int128 *)MEMORY[0x1E0CA2E18];
    do
    {
      *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = v2;
      *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) + 72);
      v4 = (_QWORD *)a1[6];
      v5 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, __int128 *, __int128 *))v4[9];
      if (v5)
      {
        v6 = v4[10];
        v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) + 8);
        v22 = *v3;
        v23 = *((_QWORD *)v3 + 2);
        v20 = v22;
        v21 = v23;
        v5(v6, v7, 4294954385, 2, 0, &v22, &v20);
      }
      else
      {
        v8 = (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))v4[28];
        if (v8)
        {
          v9 = v4[29];
          v10 = *(_QWORD **)(*(_QWORD *)(a1[5] + 8) + 24);
          v8(v9, v10[1], v10[6], v10[7], 0, v10[8], 4294954385, 2);
        }
        else
        {
          v11 = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
          v12 = *(_QWORD *)(v11 + 32);
          if (v12)
          {
            v13 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, __int128 *, __int128 *))(v12 + 16);
            v22 = *v3;
            v23 = *((_QWORD *)v3 + 2);
            v20 = v22;
            v21 = v23;
            v13(v12, 4294954385, 2, 0, 0, &v22, &v20);
          }
          else
          {
            v14 = *(_QWORD *)(v11 + 24);
            if (v14)
            {
              v15 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, __int128 *, __int128 *))(v14 + 16);
              v22 = *v3;
              v23 = *((_QWORD *)v3 + 2);
              v20 = v22;
              v21 = v23;
              v15(v14, 4294954385, 2, 0, &v22, &v20);
            }
          }
        }
      }
      v16 = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
      v17 = *(const void **)(v16 + 40);
      if (v17)
      {
        CFRelease(v17);
        v16 = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
      }
      _Block_release(*(const void **)(v16 + 24));
      _Block_release(*(const void **)(*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) + 32));
      free(*(void **)(*(_QWORD *)(a1[5] + 8) + 24));
      if (!FigAtomicDecrement32())
        FigSemaphoreSignal();
      v2 = *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
    }
    while (v2);
  }
  v18 = a1[6];
  *(_DWORD *)(v18 + 144) = 0;
  *(_DWORD *)(v18 + 152) = 0;
  *(_BYTE *)(v18 + 148) = 0;
  *(_DWORD *)(v18 + 168) = 0;
  FigSemaphoreSignal();
  FigSemaphoreSignal();
  v19 = (const void *)a1[6];
  if (v19)
    CFRelease(v19);
}

uint64_t VTLoadVideoEncodersPreferringInternalBundles()
{
  return vtLoadVideoEncodersGuts(1);
}

uint64_t vtLoadVideoEncodersGuts(int a1)
{
  vtTryToLoadVideoDecoder("/System/Library/VideoEncoders/HEVCH9.videoencoder", "HEVCH9EncoderRegister");
  vtTryToLoadVideoDecoder("/System/Library/VideoEncoders/H9.videoencoder", "H9EncoderRegister");
  vtTryToLoadVideoDecoder("/System/Library/VideoCodecs/VCPHEVC.videocodec", "VCPHEVCRegisterEncoder");
  vtTryToLoadVideoDecoder("/System/Library/VideoEncoders/H264H9.videoencoder", "H264H9EncoderRegister");
  vtTryToLoadVideoDecoder("/System/Library/VideoEncoders/H264H7.videoencoder", "H264H7EncoderRegister");
  vtTryToLoadVideoDecoder("/System/Library/VideoEncoders/H264H4.videoencoder", "H264H4EncoderRegister");
  vtTryToLoadVideoDecoder("/System/Library/VideoEncoders/H264H2.videoencoder", "H264H2EncoderRegister");
  vtTryToLoadVideoDecoder("/System/Library/VideoEncoders/JPEGH1.videoencoder", "JPEGH1EncoderRegister");
  vtTryToLoadVideoDecoder("/System/Library/VideoEncoders/VCH263.videoencoder", "VCH263EncoderRegister");
  vtTryToLoadVideoDecoder("/System/Library/VideoEncoders/Slim.videoencoder", "SLIMEncoderRegister");
  vtTryToLoadVideoDecoder("/System/Library/VideoEncoders/ExampleIPB.videoencoder", "ExampleIPBEncoderRegister");
  if (FigServer_IsServerProcess())
    vtTryToLoadVideoDecoder("/System/Library/PrivateFrameworks/VideoProcessing.framework/VideoProcessing", "VPModuleInitialize");
  vtTryToLoadVideoDecoder("/System/Library/VideoEncoders/AppleProResSWEncoder.videoencoder", "ProResSWEncoderRegister");
  if (!a1
    || !vtTryToLoadVideoDecoder("/AppleInternal/Library/VideoCodecs/AppleProResHWEncoder-Dev.videoencoder", "ProResEncoderRegister"))
  {
    vtTryToLoadVideoDecoder("/System/Library/VideoEncoders/AppleProResHWEncoder.videoencoder", "ProResEncoderRegister");
  }
  return vtTryToLoadVideoDecoder("/AppleInternal/Library/VideoCodecs/yzip.videocodec", "yzipRegisterEncoder");
}

uint64_t vt_Copy_b64a_TRC_Tone_Mat_TRC_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_TRC_Tone_Mat_TRC_420vf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_TRC_Tone_Mat_TRC_420vf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  float v21;
  unsigned int v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  float v28;
  float v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  unsigned __int8 *v42;
  unint64_t v43;
  _BYTE *v44;
  _BYTE *v45;
  unsigned __int16 *v46;
  float v57;
  float v58;
  float v59;
  float v66;
  float v67;
  float v68;
  float v75;
  float v76;
  float v83;
  float v84;
  char v85;
  char v86;
  char v87;
  char v88;
  float v91;
  float v92;
  float v93;
  float v95;
  float v96;
  float v97;
  float v104;
  float v105;
  float v110;
  float v111;
  float v113;
  float v115;
  float v116;
  float v117;
  float v118;
  float v131;
  float v132;
  BOOL v133;
  float v134;
  char v135;
  float v136;
  float v137;
  char v138;
  float v139;
  float v140;
  char v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  unint64_t v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;

  v6 = *(_QWORD *)(result + 28);
  v7 = 2 * *result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (2 * v9 != 2 * v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)(result + 20);
    v151 = 2 * v9 - 2 * v8;
    v12 = *((_QWORD *)result + 19);
    v13 = (uint64_t *)*((_QWORD *)result + 17);
    v14 = **((_QWORD **)result + 8);
    v15 = *v13;
    v16 = v13[1];
    v17 = v13[2];
    v18 = 8191.0 / (float)*(unsigned int *)(v12 + 128);
    LOWORD(a5) = *(_WORD *)(v12 + 144);
    v19 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v12 + 146);
    v20 = (float)LODWORD(a6);
    LOWORD(a6) = *(_WORD *)(v12 + 148);
    v21 = (float)LODWORD(a6);
    LOWORD(a6) = *(_WORD *)(v12 + 150);
    *(float *)&v22 = (float)LODWORD(a6);
    v173 = v20;
    v174 = *(float *)&v22;
    LOWORD(v22) = *(_WORD *)(v12 + 152);
    v171 = *(float *)(v12 + 36);
    v172 = (float)v22;
    v169 = *(float *)(v12 + 44);
    v170 = *(float *)(v12 + 40);
    v167 = *(float *)(v12 + 52) * 0.25;
    v168 = *(float *)(v12 + 48) * 0.25;
    v165 = *(float *)(v12 + 60) * 0.25;
    v166 = *(float *)(v12 + 56) * 0.25;
    v163 = *(float *)(v12 + 72);
    v164 = *(float *)(v12 + 64) * 0.25;
    v161 = *(float *)(v12 + 76);
    v162 = *(float *)(v12 + 68) * 0.25;
    v159 = *(float *)(v12 + 84);
    v160 = *(float *)(v12 + 80);
    v157 = *(float *)(v12 + 92);
    v158 = *(float *)(v12 + 88);
    v155 = *(float *)(v12 + 100);
    v156 = *(float *)(v12 + 96);
    v23 = *(float *)(v12 + 108);
    v154 = *(float *)(v12 + 104);
    v24 = v12 + 164;
    v25 = v12 + 16548;
    v26 = v12 + 32932;
    v28 = *(float *)(v12 + 112);
    v27 = *(float *)(v12 + 116);
    v29 = *(float *)(v12 + 120);
    v30 = *((_QWORD *)result + 14);
    v31 = *((_QWORD *)result + 13) * a2 / v7;
    v32 = (_QWORD *)*((_QWORD *)result + 16);
    v33 = *((_QWORD *)result + 15) + 2 * v31;
    result = (unsigned __int8 *)(**((_QWORD **)result + 7)
                               + v14 * (*(_QWORD *)(result + 44) + 2 * v8)
                               + 8 * *(_QWORD *)(result + 36));
    v34 = v32[1];
    v35 = (_BYTE *)(*v32 + v33 * v15 + v30);
    v36 = v32[2];
    v37 = (_BYTE *)(v36 + v33 * v17 + v30);
    if (!v36)
      v37 = 0;
    if (v33 >= 0)
      v38 = v33;
    else
      v38 = v33 + 1;
    v39 = v34 + (v38 >> 1) * v16 + v30;
    v152 = v28;
    v153 = v23;
    do
    {
      v40 = &v37[v17];
      v41 = &v35[v15];
      v42 = &result[v14];
      if (v11)
      {
        v43 = 0;
        v44 = &v37[v17];
        v45 = &v35[v15];
        v46 = (unsigned __int16 *)&result[v14];
        do
        {
          _H3 = *(_WORD *)(v24
                         + 2
                         * llroundf(fminf(fmaxf(v18 * (float)(bswap32(*((unsigned __int16 *)result + 1)) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S14, H3 }
          _H3 = *(_WORD *)(v24
                         + 2
                         * llroundf(fminf(fmaxf(v18 * (float)(bswap32(*((unsigned __int16 *)result + 2)) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S15, H3 }
          _H3 = *(_WORD *)(v24
                         + 2
                         * llroundf(fminf(fmaxf(v18 * (float)(bswap32(*((unsigned __int16 *)result + 3)) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S18, H3 }
          v57 = fmaxf(_S14, fmaxf(_S15, _S18));
          v58 = (float)((float)((float)(v28 * _S15) + (float)(v23 * _S14)) + (float)(v27 * _S18)) + (float)(v29 * v57);
          v59 = 8191.0;
          if (v58 <= 8191.0)
          {
            v59 = (float)((float)((float)(v28 * _S15) + (float)(v23 * _S14)) + (float)(v27 * _S18)) + (float)(v29 * v57);
            if (v58 < 0.0)
              v59 = 0.0;
          }
          _H3 = *(_WORD *)(v24
                         + 2
                         * llroundf(fminf(fmaxf(v18 * (float)(bswap32(*((unsigned __int16 *)result + 5)) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S20, H3 }
          _H3 = *(_WORD *)(v24
                         + 2
                         * llroundf(fminf(fmaxf(v18 * (float)(bswap32(*((unsigned __int16 *)result + 6)) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S21, H3 }
          _H3 = *(_WORD *)(v24
                         + 2
                         * llroundf(fminf(fmaxf(v18 * (float)(bswap32(*((unsigned __int16 *)result + 7)) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S22, H3 }
          v66 = fmaxf(_S20, fmaxf(_S21, _S22));
          v67 = (float)((float)((float)(v28 * _S21) + (float)(v23 * _S20)) + (float)(v27 * _S22)) + (float)(v29 * v66);
          v68 = 8191.0;
          if (v67 <= 8191.0)
          {
            v68 = (float)((float)((float)(v28 * _S21) + (float)(v23 * _S20)) + (float)(v27 * _S22)) + (float)(v29 * v66);
            if (v67 < 0.0)
              v68 = 0.0;
          }
          _H3 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v18 * (float)(bswap32(v46[1]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S5, H3 }
          _H3 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v18 * (float)(bswap32(v46[2]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          _H6 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v18 * (float)(bswap32(v46[3]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S7, H6 }
          v75 = (float)((float)((float)(v28 * _S3) + (float)(v23 * _S5)) + (float)(v27 * _S7))
              + (float)(v29 * fmaxf(_S5, fmaxf(_S3, _S7)));
          v76 = 8191.0;
          if (v75 <= 8191.0)
          {
            v76 = v75;
            if (v75 < 0.0)
              v76 = 0.0;
          }
          _H6 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v18 * (float)(bswap32(v46[5]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S17, H6 }
          _H6 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v18 * (float)(bswap32(v46[6]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H23 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v18 * (float)(bswap32(v46[7]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S23, H23 }
          v83 = (float)((float)((float)(v28 * _S6) + (float)(v23 * _S17)) + (float)(v27 * _S23))
              + (float)(v29 * fmaxf(_S17, fmaxf(_S6, _S23)));
          v84 = 8191.0;
          if (v83 <= 8191.0)
          {
            v84 = v83;
            if (v83 < 0.0)
              v84 = 0.0;
          }
          if (v37)
          {
            v85 = llroundf((float)(bswap32(*(unsigned __int16 *)result) >> 16) * 0.0038911);
            v86 = llroundf((float)(bswap32(*((unsigned __int16 *)result + 4)) >> 16) * 0.0038911);
            v87 = llroundf((float)(bswap32(*v46) >> 16) * 0.0038911);
            v88 = llroundf((float)(bswap32(v46[4]) >> 16) * 0.0038911);
          }
          else
          {
            v87 = 0;
            v85 = 0;
            v86 = 0;
            v88 = 0;
          }
          _H19 = *(_WORD *)(v25 + 2 * llroundf(v59));
          __asm { FCVT            S19, H19 }
          v91 = _S14 * _S19;
          v92 = _S15 * _S19;
          v93 = _S18 * _S19;
          LOWORD(_S19) = *(_WORD *)(v25 + 2 * llroundf(v68));
          __asm { FCVT            S19, H19 }
          v95 = _S20 * _S19;
          v96 = _S21 * _S19;
          v97 = _S22 * _S19;
          _H16 = *(_WORD *)(v25 + 2 * llroundf(v76));
          __asm { FCVT            S16, H16 }
          _S5 = _S5 * _S16;
          _S3 = _S3 * _S16;
          _S7 = _S7 * _S16;
          LOWORD(_S16) = *(_WORD *)(v25 + 2 * llroundf(v84));
          __asm { FCVT            S16, H16 }
          v104 = _S17 * _S16;
          v105 = _S6 * _S16;
          _S16 = _S23 * _S16;
          _S22 = (float)((float)(v161 * v92) + (float)(v91 * v163)) + (float)(v93 * v160);
          _S23 = (float)((float)(v158 * v92) + (float)(v91 * v159)) + (float)(v93 * v157);
          _S18 = (float)((float)(v155 * v92) + (float)(v91 * v156)) + (float)(v93 * v154);
          v110 = (float)((float)(v161 * v96) + (float)(v95 * v163)) + (float)(v97 * v160);
          v111 = (float)((float)(v158 * v96) + (float)(v95 * v159)) + (float)(v97 * v157);
          _S19 = (float)((float)(v155 * v96) + (float)(v95 * v156)) + (float)(v97 * v154);
          v113 = (float)((float)(v161 * _S3) + (float)(_S5 * v163)) + (float)(_S7 * v160);
          _S21 = (float)((float)(v158 * _S3) + (float)(_S5 * v159)) + (float)(_S7 * v157);
          v115 = (float)((float)(v155 * _S3) + (float)(_S5 * v156)) + (float)(_S7 * v154);
          v116 = (float)((float)(v161 * v105) + (float)(v104 * v163)) + (float)(_S16 * v160);
          v117 = (float)((float)(v158 * v105) + (float)(v104 * v159)) + (float)(_S16 * v157);
          v118 = (float)((float)(v155 * v105) + (float)(v104 * v156)) + (float)(_S16 * v154);
          LOWORD(_S3) = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(_S22, 0.0), 8191.0)));
          __asm { FCVT            S6, H3 }
          LOWORD(_S3) = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(_S23, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          LOWORD(_S5) = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(_S18, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          LOWORD(_S7) = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v110, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          LOWORD(_S16) = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v111, 0.0), 8191.0)));
          LOWORD(_S18) = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0)));
          __asm
          {
            FCVT            S17, H16
            FCVT            S16, H18
          }
          LOWORD(_S18) = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v113, 0.0), 8191.0)));
          __asm { FCVT            S20, H18 }
          LOWORD(_S18) = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(_S21, 0.0), 8191.0)));
          __asm { FCVT            S18, H18 }
          LOWORD(_S19) = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v115, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          LOWORD(_S21) = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v116, 0.0), 8191.0)));
          __asm { FCVT            S21, H21 }
          LOWORD(_S22) = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v117, 0.0), 8191.0)));
          LOWORD(_S23) = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v118, 0.0), 8191.0)));
          __asm
          {
            FCVT            S22, H22
            FCVT            S23, H23
          }
          v131 = (float)((float)((float)(v170 * _S3) + (float)(v171 * _S6)) + (float)(v169 * _S5)) + v19;
          if (v131 < v19)
            v132 = v19;
          else
            v132 = (float)((float)((float)(v170 * _S3) + (float)(v171 * _S6)) + (float)(v169 * _S5)) + v19;
          v133 = v131 <= v21;
          v134 = (float)((float)((float)(v170 * _S17) + (float)(v171 * _S7)) + (float)(v169 * _S16)) + v19;
          if (!v133)
            v132 = v21;
          v135 = llroundf(v132);
          if (v134 < v19)
            v136 = v19;
          else
            v136 = (float)((float)((float)(v170 * _S17) + (float)(v171 * _S7)) + (float)(v169 * _S16)) + v19;
          v133 = v134 <= v21;
          v137 = (float)((float)((float)(v170 * _S18) + (float)(v171 * _S20)) + (float)(v169 * _S19)) + v19;
          if (!v133)
            v136 = v21;
          v138 = llroundf(v136);
          if (v137 < v19)
            v139 = v19;
          else
            v139 = (float)((float)((float)(v170 * _S18) + (float)(v171 * _S20)) + (float)(v169 * _S19)) + v19;
          v133 = v137 <= v21;
          v140 = (float)((float)((float)(v170 * _S22) + (float)(v171 * _S21)) + (float)(v169 * _S23)) + v19;
          if (!v133)
            v139 = v21;
          v141 = llroundf(v139);
          if (v140 < v19)
            v142 = v19;
          else
            v142 = (float)((float)((float)(v170 * _S22) + (float)(v171 * _S21)) + (float)(v169 * _S23)) + v19;
          if (v140 <= v21)
            v143 = v142;
          else
            v143 = v21;
          v144 = (float)((float)(_S6 + _S7) + _S20) + _S21;
          v145 = (float)((float)(_S3 + _S17) + _S18) + _S22;
          *v35 = v135;
          v35[1] = v138;
          *v45 = v141;
          v45[1] = llroundf(v143);
          v146 = (float)((float)(_S5 + _S16) + _S19) + _S23;
          v147 = (float)((float)(v173 + (float)(v144 * v168)) + (float)(v145 * v167)) + (float)(v146 * v166);
          v148 = v172;
          if (v147 <= v172)
          {
            v148 = (float)((float)(v173 + (float)(v144 * v168)) + (float)(v145 * v167)) + (float)(v146 * v166);
            if (v147 < v174)
              v148 = v174;
          }
          v149 = (float)((float)(v173 + (float)(v144 * v165)) + (float)(v145 * v164)) + (float)(v146 * v162);
          *(_BYTE *)(v39 + v43) = llroundf(v148);
          v150 = v172;
          v28 = v152;
          v23 = v153;
          if (v149 <= v172)
          {
            v150 = v149;
            if (v149 < v174)
              v150 = v174;
          }
          *(_BYTE *)(v39 + v43 + 1) = llroundf(v150);
          if (v37)
          {
            *v37 = v85;
            v37[1] = v86;
            v37 += 2;
            *v44 = v87;
            v44[1] = v88;
            v44 += 2;
          }
          result += 16;
          v46 += 8;
          v35 += 2;
          v45 += 2;
          v43 += 2;
        }
        while (v11 > v43);
      }
      result = &v42[v14];
      v35 = &v41[v15];
      v39 += v16;
      v37 = &v40[v17];
      v10 += 2;
    }
    while (v151 > v10);
  }
  return result;
}

uint64_t vt_Copy_b64a_TRC_Mat_TRC_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_TRC_Mat_TRC_420vf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_TRC_Mat_TRC_420vf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float v23;
  unsigned int v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unsigned __int16 *v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  unsigned __int8 *v46;
  char *v47;
  unint64_t v48;
  _BYTE *v49;
  unsigned __int8 *v50;
  unsigned __int16 *v51;
  char v52;
  char v53;
  char v54;
  char v55;
  float v86;
  float v87;
  float v89;
  float v90;
  float v92;
  float v105;
  float v106;
  BOOL v107;
  float v108;
  unsigned __int8 v109;
  float v110;
  float v111;
  unsigned __int8 v112;
  float v113;
  float v114;
  unsigned __int8 v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;

  v8 = *(_QWORD *)(result + 28);
  v9 = 2 * *result;
  v10 = v8 * a2 / v9;
  v11 = (v8 + v8 * a2) / v9;
  if (2 * v11 != 2 * v10)
  {
    v12 = 0;
    v13 = *(_QWORD *)(result + 20);
    v14 = *(_QWORD *)(result + 44) + 2 * v10;
    v15 = 2 * v11 - 2 * v10;
    v16 = *((_QWORD *)result + 19);
    v17 = (uint64_t *)*((_QWORD *)result + 17);
    v18 = **((_QWORD **)result + 8);
    v19 = *v17;
    v20 = v17[1];
    v21 = v17[2];
    v22 = 8191.0 / (float)*(unsigned int *)(v16 + 128);
    LOWORD(a5) = *(_WORD *)(v16 + 144);
    v23 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v16 + 146);
    *(float *)&v24 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v16 + 148);
    v25 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v16 + 150);
    v137 = (float)LODWORD(a6);
    v138 = (float)LODWORD(a8);
    LOWORD(v24) = *(_WORD *)(v16 + 152);
    v135 = *(float *)(v16 + 36);
    v136 = (float)v24;
    v133 = *(float *)(v16 + 44);
    v134 = *(float *)(v16 + 40);
    v131 = *(float *)(v16 + 52) * 0.25;
    v132 = *(float *)(v16 + 48) * 0.25;
    v129 = *(float *)(v16 + 60) * 0.25;
    v130 = *(float *)(v16 + 56) * 0.25;
    v127 = *(float *)(v16 + 72);
    v128 = *(float *)(v16 + 64) * 0.25;
    v26 = *(float *)(v16 + 80);
    v125 = *(float *)(v16 + 76);
    v126 = *(float *)(v16 + 68) * 0.25;
    v27 = *(float *)(v16 + 84);
    v28 = *(float *)(v16 + 88);
    v29 = *(float *)(v16 + 92);
    v30 = *(float *)(v16 + 96);
    v32 = *(float *)(v16 + 100);
    v31 = *(float *)(v16 + 104);
    v33 = v16 + 164;
    v34 = v16 + 16548;
    v35 = *((_QWORD *)result + 14);
    v36 = *((_QWORD *)result + 13) * a2 / v9;
    v37 = (_QWORD *)*((_QWORD *)result + 16);
    v38 = *((_QWORD *)result + 15) + 2 * v36;
    v39 = (unsigned __int16 *)(**((_QWORD **)result + 7) + v18 * v14 + 8 * *(_QWORD *)(result + 36));
    v40 = v37[1];
    result = (unsigned __int8 *)(*v37 + v38 * v19 + v35);
    v41 = v37[2];
    v42 = (_BYTE *)(v41 + v38 * v21 + v35);
    if (!v41)
      v42 = 0;
    if (v38 >= 0)
      v43 = v38;
    else
      v43 = v38 + 1;
    v44 = v40 + (v43 >> 1) * v20 + v35;
    do
    {
      v45 = &v42[v21];
      v46 = &result[v19];
      v47 = (char *)v39 + v18;
      if (v13)
      {
        v48 = 0;
        v49 = &v42[v21];
        v50 = &result[v19];
        v51 = (unsigned __int16 *)((char *)v39 + v18);
        do
        {
          if (v42)
          {
            v52 = llroundf((float)(bswap32(*v39) >> 16) * 0.0038911);
            v53 = llroundf((float)(bswap32(v39[4]) >> 16) * 0.0038911);
            v54 = llroundf((float)(bswap32(*v51) >> 16) * 0.0038911);
            v55 = llroundf((float)(bswap32(v51[4]) >> 16) * 0.0038911);
          }
          else
          {
            v54 = 0;
            v52 = 0;
            v53 = 0;
            v55 = 0;
          }
          _H18 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v22 * (float)(bswap32(v39[1]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S18, H18 }
          _H19 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v22 * (float)(bswap32(v39[2]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          _H10 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v22 * (float)(bswap32(v39[3]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          _H11 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v22 * (float)(bswap32(v39[5]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          _H12 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v22 * (float)(bswap32(v39[6]) >> 16), 0.0), 8191.0)));
          _H13 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v22 * (float)(bswap32(v39[7]) >> 16), 0.0), 8191.0)));
          __asm
          {
            FCVT            S12, H12
            FCVT            S13, H13
          }
          _H14 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v22 * (float)(bswap32(v51[1]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S14, H14 }
          _H15 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v22 * (float)(bswap32(v51[2]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S15, H15 }
          _H20 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v22 * (float)(bswap32(v51[3]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S20, H20 }
          _H21 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v22 * (float)(bswap32(v51[5]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S21, H21 }
          _H22 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v22 * (float)(bswap32(v51[6]) >> 16), 0.0), 8191.0)));
          _H24 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v22 * (float)(bswap32(v51[7]) >> 16), 0.0), 8191.0)));
          __asm
          {
            FCVT            S22, H22
            FCVT            S24, H24
          }
          _S5 = (float)((float)(v125 * _S19) + (float)(_S18 * v127)) + (float)(_S10 * v26);
          _S3 = (float)((float)(v28 * _S19) + (float)(_S18 * v27)) + (float)(_S10 * v29);
          v86 = (float)((float)(v32 * _S19) + (float)(_S18 * v30)) + (float)(_S10 * v31);
          v87 = (float)((float)(v125 * _S12) + (float)(_S11 * v127)) + (float)(_S13 * v26);
          _S7 = (float)((float)(v28 * _S12) + (float)(_S11 * v27)) + (float)(_S13 * v29);
          v89 = (float)((float)(v32 * _S12) + (float)(_S11 * v30)) + (float)(_S13 * v31);
          v90 = (float)((float)(v125 * _S15) + (float)(_S14 * v127)) + (float)(_S20 * v26);
          _S6 = (float)((float)(v28 * _S15) + (float)(_S14 * v27)) + (float)(_S20 * v29);
          v92 = (float)((float)(v32 * _S15) + (float)(_S14 * v30)) + (float)(_S20 * v31);
          LOWORD(_S5) = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S12, H5 }
          LOWORD(_S3) = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          __asm { FCVT            S10, H3 }
          LOWORD(_S3) = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          __asm { FCVT            S11, H3 }
          LOWORD(_S3) = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          __asm { FCVT            S13, H3 }
          LOWORD(_S3) = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(_S7, 0.0), 8191.0)));
          LOWORD(_S5) = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          __asm
          {
            FCVT            S15, H3
            FCVT            S14, H5
          }
          LOWORD(_S3) = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          LOWORD(_S5) = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          __asm { FCVT            S18, H5 }
          LOWORD(_S5) = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          __asm { FCVT            S19, H5 }
          LOWORD(_S5) = *(_WORD *)(v34
                                 + 2
                                 * llroundf(fminf(fmaxf((float)((float)(v125 * _S22) + (float)(_S21 * v127)) + (float)(_S24 * v26), 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = *(_WORD *)(v34
                                 + 2
                                 * llroundf(fminf(fmaxf((float)((float)(v28 * _S22) + (float)(_S21 * v27)) + (float)(_S24 * v29), 0.0), 8191.0)));
          LOWORD(_S7) = *(_WORD *)(v34
                                 + 2
                                 * llroundf(fminf(fmaxf((float)((float)(v32 * _S22) + (float)(_S21 * v30)) + (float)(_S24 * v31), 0.0), 8191.0)));
          __asm
          {
            FCVT            S6, H6
            FCVT            S7, H7
          }
          v105 = (float)((float)((float)(v134 * _S10) + (float)(v135 * _S12)) + (float)(v133 * _S11)) + v23;
          if (v105 < v23)
            v106 = v23;
          else
            v106 = (float)((float)((float)(v134 * _S10) + (float)(v135 * _S12)) + (float)(v133 * _S11)) + v23;
          v107 = v105 <= v25;
          v108 = (float)((float)((float)(v134 * _S15) + (float)(v135 * _S13)) + (float)(v133 * _S14)) + v23;
          if (!v107)
            v106 = v25;
          v109 = llroundf(v106);
          if (v108 < v23)
            v110 = v23;
          else
            v110 = (float)((float)((float)(v134 * _S15) + (float)(v135 * _S13)) + (float)(v133 * _S14)) + v23;
          v107 = v108 <= v25;
          v111 = (float)((float)((float)(v134 * _S18) + (float)(v135 * _S3)) + (float)(v133 * _S19)) + v23;
          if (!v107)
            v110 = v25;
          v112 = llroundf(v110);
          if (v111 < v23)
            v113 = v23;
          else
            v113 = (float)((float)((float)(v134 * _S18) + (float)(v135 * _S3)) + (float)(v133 * _S19)) + v23;
          v107 = v111 <= v25;
          v114 = (float)((float)((float)(v134 * _S6) + (float)(v135 * _S5)) + (float)(v133 * _S7)) + v23;
          if (!v107)
            v113 = v25;
          v115 = llroundf(v113);
          if (v114 < v23)
            v116 = v23;
          else
            v116 = (float)((float)((float)(v134 * _S6) + (float)(v135 * _S5)) + (float)(v133 * _S7)) + v23;
          if (v114 <= v25)
            v117 = v116;
          else
            v117 = v25;
          v118 = (float)((float)(_S12 + _S13) + _S3) + _S5;
          v119 = (float)((float)(_S10 + _S15) + _S18) + _S6;
          *result = v109;
          result[1] = v112;
          *v50 = v115;
          v50[1] = llroundf(v117);
          v120 = (float)((float)(_S11 + _S14) + _S19) + _S7;
          v121 = (float)((float)(v137 + (float)(v118 * v132)) + (float)(v119 * v131)) + (float)(v120 * v130);
          v122 = v136;
          if (v121 <= v136)
          {
            v122 = (float)((float)(v137 + (float)(v118 * v132)) + (float)(v119 * v131)) + (float)(v120 * v130);
            if (v121 < v138)
              v122 = v138;
          }
          v123 = (float)((float)(v137 + (float)(v118 * v129)) + (float)(v119 * v128)) + (float)(v120 * v126);
          *(_BYTE *)(v44 + v48) = llroundf(v122);
          v124 = v136;
          if (v123 <= v136)
          {
            v124 = v123;
            if (v123 < v138)
              v124 = v138;
          }
          *(_BYTE *)(v44 + v48 + 1) = llroundf(v124);
          if (v42)
          {
            *v42 = v52;
            v42[1] = v53;
            v42 += 2;
            *v49 = v54;
            v49[1] = v55;
            v49 += 2;
          }
          v39 += 8;
          v51 += 8;
          result += 2;
          v50 += 2;
          v48 += 2;
        }
        while (v13 > v48);
      }
      v39 = (unsigned __int16 *)&v47[v18];
      result = &v46[v19];
      v44 += v20;
      v42 = &v45[v21];
      v12 += 2;
    }
    while (v15 > v12);
  }
  return result;
}

uint64_t vt_Copy_b64a_rgb_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_rgb_420vf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_rgb_420vf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  unsigned __int16 *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  _BYTE *v49;
  char *v50;
  unint64_t v51;
  _BYTE *v52;
  _BYTE *v53;
  unsigned __int16 *v54;
  char v55;
  char v56;
  char v57;
  char v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  char v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;

  v8 = *(_QWORD *)(result + 28);
  v9 = 2 * *result;
  v10 = v8 * a2 / v9;
  v11 = (v8 + v8 * a2) / v9;
  if (2 * v11 != 2 * v10)
  {
    v12 = 0;
    v13 = *(_QWORD *)(result + 20);
    v14 = *(_QWORD *)(result + 44) + 2 * v10;
    v15 = 2 * v11 - 2 * v10;
    v16 = *((_QWORD *)result + 19);
    v17 = (uint64_t *)*((_QWORD *)result + 17);
    v18 = **((_QWORD **)result + 8);
    v19 = *v17;
    v20 = v17[1];
    v21 = v17[2];
    *(float *)&v22 = (float)*(unsigned int *)(v16 + 136);
    v23 = *(float *)&v22 / (float)*(unsigned int *)(v16 + 128);
    LOWORD(v22) = *(_WORD *)(v16 + 144);
    v24 = (float)v22;
    LOWORD(a5) = *(_WORD *)(v16 + 146);
    v25 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v16 + 148);
    v26 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v16 + 150);
    v27 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v16 + 152);
    v28 = (float)LODWORD(a8);
    v29 = *(float *)(v16 + 36);
    v30 = *(float *)(v16 + 40);
    v31 = *(float *)(v16 + 44);
    v32 = *(float *)(v16 + 48) * 0.25;
    v33 = *(float *)(v16 + 52) * 0.25;
    v34 = *(float *)(v16 + 56) * 0.25;
    v35 = *(float *)(v16 + 60) * 0.25;
    v36 = *(float *)(v16 + 64) * 0.25;
    v37 = *(float *)(v16 + 68) * 0.25;
    v38 = *((_QWORD *)result + 14);
    v39 = (_QWORD *)*((_QWORD *)result + 16);
    v40 = *((_QWORD *)result + 15) + 2 * (*((_QWORD *)result + 13) * a2 / v9);
    v41 = (unsigned __int16 *)(**((_QWORD **)result + 7) + v18 * v14 + 8 * *(_QWORD *)(result + 36));
    v42 = v39[1];
    v43 = (_BYTE *)(*v39 + v40 * v19 + v38);
    v44 = v39[2];
    v45 = (_BYTE *)(v44 + v40 * v21 + v38);
    if (!v44)
      v45 = 0;
    if (v40 >= 0)
      v46 = v40;
    else
      v46 = v40 + 1;
    v47 = v42 + (v46 >> 1) * v20 + v38;
    result = (unsigned __int8 *)&unk_1928E2000;
    do
    {
      v48 = &v45[v21];
      v49 = &v43[v19];
      v50 = (char *)v41 + v18;
      if (v13)
      {
        v51 = 0;
        v52 = &v45[v21];
        v53 = &v43[v19];
        v54 = (unsigned __int16 *)((char *)v41 + v18);
        do
        {
          if (v45)
          {
            v55 = llroundf((float)(bswap32(*v41) >> 16) * 0.0038911);
            v56 = llroundf((float)(bswap32(v41[4]) >> 16) * 0.0038911);
            v57 = llroundf((float)(bswap32(*v54) >> 16) * 0.0038911);
            v58 = llroundf((float)(bswap32(v54[4]) >> 16) * 0.0038911);
          }
          else
          {
            v57 = 0;
            v55 = 0;
            v56 = 0;
            v58 = 0;
          }
          v59 = v23 * (float)(bswap32(v41[1]) >> 16);
          v60 = v23 * (float)(bswap32(v41[2]) >> 16);
          v61 = v23 * (float)(bswap32(v41[3]) >> 16);
          v62 = v23 * (float)(bswap32(v41[5]) >> 16);
          v63 = v23 * (float)(bswap32(v41[6]) >> 16);
          v64 = v23 * (float)(bswap32(v41[7]) >> 16);
          v65 = v23 * (float)(bswap32(v54[1]) >> 16);
          v66 = v23 * (float)(bswap32(v54[2]) >> 16);
          v67 = v23 * (float)(bswap32(v54[3]) >> 16);
          v68 = v23 * (float)(bswap32(v54[5]) >> 16);
          v69 = v23 * (float)(bswap32(v54[6]) >> 16);
          v70 = v23 * (float)(bswap32(v54[7]) >> 16);
          v71 = (float)((float)((float)(v30 * v60) + (float)(v29 * v59)) + (float)(v31 * v61)) + v24;
          v72 = (float)((float)((float)(v30 * v63) + (float)(v29 * v62)) + (float)(v31 * v64)) + v24;
          v73 = (float)((float)((float)(v30 * v66) + (float)(v29 * v65)) + (float)(v31 * v67)) + v24;
          v74 = (float)((float)((float)(v30 * v69) + (float)(v29 * v68)) + (float)(v31 * v70)) + v24;
          if (v71 < v24)
            v75 = v24;
          else
            v75 = (float)((float)((float)(v30 * v60) + (float)(v29 * v59)) + (float)(v31 * v61)) + v24;
          if (v71 <= v26)
            v76 = v75;
          else
            v76 = v26;
          v77 = llroundf(v76);
          if (v72 < v24)
            v78 = v24;
          else
            v78 = (float)((float)((float)(v30 * v63) + (float)(v29 * v62)) + (float)(v31 * v64)) + v24;
          if (v72 > v26)
            v78 = v26;
          *v43 = v77;
          v43[1] = llroundf(v78);
          if (v73 < v24)
            v79 = v24;
          else
            v79 = (float)((float)((float)(v30 * v66) + (float)(v29 * v65)) + (float)(v31 * v67)) + v24;
          if (v73 > v26)
            v79 = v26;
          *v53 = llroundf(v79);
          if (v74 < v24)
            v80 = v24;
          else
            v80 = (float)((float)((float)(v30 * v69) + (float)(v29 * v68)) + (float)(v31 * v70)) + v24;
          if (v74 > v26)
            v80 = v26;
          v53[1] = llroundf(v80);
          v81 = (float)((float)(v59 + v62) + v65) + v68;
          v82 = (float)((float)(v60 + v63) + v66) + v69;
          v83 = (float)((float)(v61 + v64) + v67) + v70;
          v84 = (float)((float)(v25 + (float)(v81 * v32)) + (float)(v82 * v33)) + (float)(v83 * v34);
          v85 = v28;
          if (v84 <= v28)
          {
            v85 = (float)((float)(v25 + (float)(v81 * v32)) + (float)(v82 * v33)) + (float)(v83 * v34);
            if (v84 < v27)
              v85 = v27;
          }
          v86 = (float)((float)(v25 + (float)(v81 * v35)) + (float)(v82 * v36)) + (float)(v83 * v37);
          *(_BYTE *)(v47 + v51) = llroundf(v85);
          v87 = v28;
          if (v86 <= v28)
          {
            v87 = v86;
            if (v86 < v27)
              v87 = v27;
          }
          *(_BYTE *)(v47 + v51 + 1) = llroundf(v87);
          if (v45)
          {
            *v45 = v55;
            v45[1] = v56;
            v45 += 2;
            *v52 = v57;
            v52[1] = v58;
            v52 += 2;
          }
          v41 += 8;
          v54 += 8;
          v43 += 2;
          v53 += 2;
          v51 += 2;
        }
        while (v13 > v51);
      }
      v41 = (unsigned __int16 *)&v50[v18];
      v43 = &v49[v19];
      v47 += v20;
      v45 = &v48[v21];
      v12 += 2;
    }
    while (v15 > v12);
  }
  return result;
}

uint64_t vt_Copy_b64a_TRC_Tone_Mat_TRC_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_TRC_Tone_Mat_TRC_xf420_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_TRC_Tone_Mat_TRC_xf420_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  float v29;
  float v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unsigned __int16 *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  char *v43;
  unint64_t v44;
  unsigned __int16 *v45;
  unsigned __int8 *v46;
  float v57;
  float v58;
  float v59;
  float v66;
  float v67;
  float v68;
  float v75;
  float v76;
  float v77;
  float v86;
  float v87;
  float v88;
  float v91;
  float v92;
  float v93;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v104;
  float v105;
  float v106;
  float v107;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v115;
  float v116;
  float v117;
  unsigned int v134;
  float v137;
  float v138;
  BOOL v139;
  float v140;
  unsigned int v141;
  float v142;
  float v143;
  unsigned int v144;
  float v145;
  float v146;
  unsigned int v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  _WORD *v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;

  v6 = *(_QWORD *)(result + 28);
  v7 = 2 * *result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (2 * v9 != 2 * v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)(result + 20);
    v12 = *(_QWORD *)(result + 44) + 2 * v8;
    v13 = 2 * v9 - 2 * v8;
    v14 = *((_QWORD *)result + 19);
    v15 = (uint64_t *)*((_QWORD *)result + 17);
    v16 = **((_QWORD **)result + 8);
    v17 = *v15;
    v18 = v15[1];
    v19 = 8191.0 / (float)*(unsigned int *)(v14 + 128);
    LOWORD(a5) = *(_WORD *)(v14 + 144);
    v20 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v14 + 146);
    v21 = (float)LODWORD(a6);
    LOWORD(a6) = *(_WORD *)(v14 + 148);
    v22 = (float)LODWORD(a6);
    LOWORD(a6) = *(_WORD *)(v14 + 150);
    v23 = (float)LODWORD(a6);
    v181 = v23;
    LOWORD(v23) = *(_WORD *)(v14 + 152);
    v177 = *(float *)(v14 + 40);
    v178 = *(float *)(v14 + 36);
    v175 = *(float *)(v14 + 48) * 0.25;
    v176 = *(float *)(v14 + 44);
    v173 = *(float *)(v14 + 56) * 0.25;
    v174 = *(float *)(v14 + 52) * 0.25;
    v171 = *(float *)(v14 + 64) * 0.25;
    v172 = *(float *)(v14 + 60) * 0.25;
    v169 = *(float *)(v14 + 68) * 0.25;
    v170 = *(float *)(v14 + 72);
    v167 = *(float *)(v14 + 80);
    v168 = *(float *)(v14 + 76);
    v165 = *(float *)(v14 + 88);
    v166 = *(float *)(v14 + 84);
    v163 = *(float *)(v14 + 96);
    v164 = *(float *)(v14 + 92);
    v24 = *(float *)(v14 + 108);
    v161 = *(float *)(v14 + 104);
    v162 = *(float *)(v14 + 100);
    v25 = v14 + 164;
    v26 = v14 + 16548;
    v27 = v14 + 32932;
    v28 = *(float *)(v14 + 112);
    v29 = *(float *)(v14 + 116);
    v30 = *(float *)(v14 + 120);
    v31 = *((_QWORD *)result + 14);
    v32 = *((_QWORD *)result + 13) * a2 / v7;
    v33 = (uint64_t *)*((_QWORD *)result + 16);
    v34 = *((_QWORD *)result + 15) + 2 * v32;
    v35 = (unsigned __int16 *)(**((_QWORD **)result + 7) + v16 * v12 + 8 * *(_QWORD *)(result + 36));
    v36 = *v33;
    v37 = v33[1];
    result = (unsigned __int8 *)(v36 + v34 * v17 + 2 * v31);
    v38 = *(unsigned __int8 *)(v14 + 132);
    if (v38 >= 0x11)
      v39 = 0;
    else
      v39 = 16 - v38;
    if (v34 >= 0)
      v40 = v34;
    else
      v40 = v34 + 1;
    v41 = v37 + (v40 >> 1) * v18 + 2 * v31;
    v179 = (float)LODWORD(v23);
    v180 = v21;
    v159 = v24;
    v160 = v28;
    v158 = v29;
    do
    {
      v42 = &result[v17];
      v43 = (char *)v35 + v16;
      if (v11)
      {
        v44 = 0;
        v45 = (unsigned __int16 *)((char *)v35 + v16);
        v46 = &result[v17];
        do
        {
          _H3 = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v19 * (float)(bswap32(v35[1]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S14, H3 }
          _H3 = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v19 * (float)(bswap32(v35[2]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S15, H3 }
          _H3 = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v19 * (float)(bswap32(v35[3]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S18, H3 }
          v57 = fmaxf(_S14, fmaxf(_S15, _S18));
          v58 = (float)((float)((float)(v28 * _S15) + (float)(v24 * _S14)) + (float)(v29 * _S18)) + (float)(v30 * v57);
          v59 = 8191.0;
          if (v58 <= 8191.0)
          {
            v59 = (float)((float)((float)(v28 * _S15) + (float)(v24 * _S14)) + (float)(v29 * _S18)) + (float)(v30 * v57);
            if (v58 < 0.0)
              v59 = 0.0;
          }
          _H3 = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v19 * (float)(bswap32(v35[5]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S20, H3 }
          _H3 = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v19 * (float)(bswap32(v35[6]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S21, H3 }
          _H3 = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v19 * (float)(bswap32(v35[7]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S22, H3 }
          v66 = fmaxf(_S20, fmaxf(_S21, _S22));
          v67 = (float)((float)((float)(v28 * _S21) + (float)(v24 * _S20)) + (float)(v29 * _S22)) + (float)(v30 * v66);
          v68 = 8191.0;
          if (v67 <= 8191.0)
          {
            v68 = (float)((float)((float)(v28 * _S21) + (float)(v24 * _S20)) + (float)(v29 * _S22)) + (float)(v30 * v66);
            if (v67 < 0.0)
              v68 = 0.0;
          }
          _H3 = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v19 * (float)(bswap32(v45[1]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S5, H3 }
          _H3 = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v19 * (float)(bswap32(v45[2]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          _H6 = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v19 * (float)(bswap32(v45[3]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S7, H6 }
          v75 = fmaxf(_S5, fmaxf(_S3, _S7));
          v76 = (float)((float)((float)(v28 * _S3) + (float)(v24 * _S5)) + (float)(v29 * _S7)) + (float)(v30 * v75);
          v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            v77 = (float)((float)((float)(v28 * _S3) + (float)(v24 * _S5)) + (float)(v29 * _S7)) + (float)(v30 * v75);
            if (v76 < 0.0)
              v77 = 0.0;
          }
          _H6 = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v19 * (float)(bswap32(v45[5]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S16, H6 }
          _H6 = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v19 * (float)(bswap32(v45[6]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S23, H6 }
          _H6 = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v19 * (float)(bswap32(v45[7]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S25, H6 }
          _H6 = *(_WORD *)(v26 + 2 * llroundf(v59));
          __asm { FCVT            S19, H6 }
          v86 = _S14 * _S19;
          v87 = _S15 * _S19;
          v88 = _S18 * _S19;
          _H18 = *(_WORD *)(v26 + 2 * llroundf(v68));
          __asm { FCVT            S18, H18 }
          v91 = _S20 * _S18;
          v92 = _S21 * _S18;
          v93 = _S22 * _S18;
          _H17 = *(_WORD *)(v26 + 2 * llroundf(v77));
          __asm { FCVT            S17, H17 }
          v96 = _S5 * _S17;
          v97 = _S3 * _S17;
          v98 = _S7 * _S17;
          v99 = (float)((float)((float)(v28 * _S23) + (float)(v24 * _S16)) + (float)(v29 * _S25))
              + (float)(v30 * fmaxf(_S16, fmaxf(_S23, _S25)));
          v100 = 8191.0;
          if (v99 <= 8191.0)
          {
            v100 = v99;
            if (v99 < 0.0)
              v100 = 0.0;
          }
          _H7 = *(_WORD *)(v26 + 2 * llroundf(v100));
          __asm { FCVT            S7, H7 }
          _S16 = _S16 * _S7;
          v104 = _S23 * _S7;
          v105 = _S25 * _S7;
          v106 = (float)((float)(v168 * v87) + (float)(v86 * v170)) + (float)(v88 * v167);
          v107 = (float)((float)(v165 * v87) + (float)(v86 * v166)) + (float)(v88 * v164);
          _S6 = (float)((float)(v162 * v87) + (float)(v86 * v163)) + (float)(v88 * v161);
          v109 = (float)((float)(v168 * v92) + (float)(v91 * v170)) + (float)(v93 * v167);
          v110 = (float)((float)(v165 * v92) + (float)(v91 * v166)) + (float)(v93 * v164);
          v111 = (float)((float)(v162 * v92) + (float)(v91 * v163)) + (float)(v93 * v161);
          v112 = (float)((float)(v168 * v97) + (float)(v96 * v170)) + (float)(v98 * v167);
          v113 = (float)((float)(v165 * v97) + (float)(v96 * v166)) + (float)(v98 * v164);
          _S3 = (float)((float)(v162 * v97) + (float)(v96 * v163)) + (float)(v98 * v161);
          v115 = (float)((float)(v168 * v104) + (float)(_S16 * v170)) + (float)(v105 * v167);
          v116 = (float)((float)(v165 * v104) + (float)(_S16 * v166)) + (float)(v105 * v164);
          v117 = (float)((float)(v162 * v104) + (float)(_S16 * v163)) + (float)(v105 * v161);
          _H5 = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(v106, 0.0), 8191.0)));
          __asm { FCVT            S18, H5 }
          _H5 = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(v107, 0.0), 8191.0)));
          __asm { FCVT            S19, H5 }
          _H5 = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          LOWORD(_S6) = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(v109, 0.0), 8191.0)));
          __asm
          {
            FCVT            S20, H5
            FCVT            S21, H6
          }
          _H5 = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(v110, 0.0), 8191.0)));
          __asm { FCVT            S24, H5 }
          _H5 = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(v111, 0.0), 8191.0)));
          __asm { FCVT            S22, H5 }
          _H5 = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(v112, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(v113, 0.0), 8191.0)));
          __asm { FCVT            S14, H6 }
          LOWORD(_S3) = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          LOWORD(_S6) = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(v115, 0.0), 8191.0)));
          __asm
          {
            FCVT            S3, H3
            FCVT            S6, H6
          }
          LOWORD(_S16) = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(v116, 0.0), 8191.0)));
          v134 = llroundf(fminf(fmaxf(v117, 0.0), 8191.0));
          __asm { FCVT            S7, H16 }
          LOWORD(_S16) = *(_WORD *)(v27 + 2 * v134);
          __asm { FCVT            S16, H16 }
          v137 = (float)((float)((float)(v177 * _S19) + (float)(v178 * _S18)) + (float)(v176 * _S20)) + v20;
          if (v137 < v20)
            v138 = v20;
          else
            v138 = (float)((float)((float)(v177 * _S19) + (float)(v178 * _S18)) + (float)(v176 * _S20)) + v20;
          v139 = v137 <= v22;
          v140 = (float)((float)((float)(v177 * _S24) + (float)(v178 * _S21)) + (float)(v176 * _S22)) + v20;
          if (!v139)
            v138 = v22;
          v141 = llroundf(v138);
          if (v140 < v20)
            v142 = v20;
          else
            v142 = (float)((float)((float)(v177 * _S24) + (float)(v178 * _S21)) + (float)(v176 * _S22)) + v20;
          v139 = v140 <= v22;
          v143 = (float)((float)((float)(v177 * _S14) + (float)(v178 * _S5)) + (float)(v176 * _S3)) + v20;
          if (!v139)
            v142 = v22;
          v144 = llroundf(v142);
          if (v143 < v20)
            v145 = v20;
          else
            v145 = (float)((float)((float)(v177 * _S14) + (float)(v178 * _S5)) + (float)(v176 * _S3)) + v20;
          v139 = v143 <= v22;
          v146 = (float)((float)((float)(v177 * _S7) + (float)(v178 * _S6)) + (float)(v176 * _S16)) + v20;
          if (!v139)
            v145 = v22;
          v147 = llroundf(v145);
          if (v146 < v20)
            v148 = v20;
          else
            v148 = (float)((float)((float)(v177 * _S7) + (float)(v178 * _S6)) + (float)(v176 * _S16)) + v20;
          if (v146 <= v22)
            v149 = v148;
          else
            v149 = v22;
          v150 = (float)((float)(_S18 + _S21) + _S5) + _S6;
          v151 = (float)((float)(_S19 + _S24) + _S14) + _S7;
          *(_WORD *)result = v141 << v39;
          *((_WORD *)result + 1) = v144 << v39;
          *(_WORD *)v46 = v147 << v39;
          *((_WORD *)v46 + 1) = llroundf(v149) << v39;
          v152 = (float)((float)(_S20 + _S22) + _S3) + _S16;
          v153 = (float)((float)(v180 + (float)(v150 * v175)) + (float)(v151 * v174)) + (float)(v152 * v173);
          v154 = v179;
          if (v153 <= v179)
          {
            v154 = (float)((float)(v180 + (float)(v150 * v175)) + (float)(v151 * v174)) + (float)(v152 * v173);
            if (v153 < v181)
              v154 = v181;
          }
          v155 = (_WORD *)(v41 + 2 * v44);
          v156 = (float)((float)(v180 + (float)(v150 * v172)) + (float)(v151 * v171)) + (float)(v152 * v169);
          *v155 = llroundf(v154) << v39;
          v157 = v179;
          if (v156 <= v179)
          {
            v157 = v156;
            if (v156 < v181)
              v157 = v181;
          }
          v35 += 8;
          v45 += 8;
          result += 4;
          v46 += 4;
          v155[1] = llroundf(v157) << v39;
          v44 += 2;
          v24 = v159;
          v28 = v160;
          v29 = v158;
        }
        while (v11 > v44);
      }
      v35 = (unsigned __int16 *)&v43[v16];
      result = &v42[v17];
      v41 += v18;
      v10 += 2;
    }
    while (v13 > v10);
  }
  return result;
}

uint64_t vt_Copy_b64a_TRC_Mat_TRC_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_TRC_Mat_TRC_xf420_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_TRC_Mat_TRC_xf420_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  unsigned __int16 *v38;
  uint64_t v39;
  char *v40;
  unsigned int v41;
  char v42;
  uint64_t v43;
  char *v44;
  char *v45;
  unint64_t v46;
  unsigned __int16 *v47;
  char *v48;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v98;
  float v99;
  BOOL v100;
  float v101;
  unsigned int v102;
  float v103;
  float v104;
  unsigned int v105;
  float v106;
  float v107;
  unsigned int v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  unsigned __int8 *v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;

  v9 = *(_QWORD *)(result + 28);
  v10 = 2 * *result;
  v11 = v9 * a2 / v10;
  v12 = (v9 + v9 * a2) / v10;
  if (2 * v12 != 2 * v11)
  {
    v13 = 0;
    v14 = *(_QWORD *)(result + 20);
    v15 = *(_QWORD *)(result + 44) + 2 * v11;
    v16 = 2 * v12 - 2 * v11;
    v17 = *((_QWORD *)result + 19);
    v18 = (uint64_t *)*((_QWORD *)result + 17);
    v19 = **((_QWORD **)result + 8);
    v20 = *v18;
    v21 = v18[1];
    v22 = 8191.0 / (float)*(unsigned int *)(v17 + 128);
    LOWORD(a5) = *(_WORD *)(v17 + 144);
    v23 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v17 + 146);
    LOWORD(a7) = *(_WORD *)(v17 + 148);
    v24 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v17 + 150);
    v130 = (float)LODWORD(a8);
    LOWORD(a9) = *(_WORD *)(v17 + 152);
    v131 = (float)LODWORD(a9);
    v132 = (float)LODWORD(a6);
    v128 = *(float *)(v17 + 40);
    v129 = *(float *)(v17 + 36);
    v126 = *(float *)(v17 + 48) * 0.25;
    v127 = *(float *)(v17 + 44);
    v124 = *(float *)(v17 + 56) * 0.25;
    v125 = *(float *)(v17 + 52) * 0.25;
    v122 = *(float *)(v17 + 64) * 0.25;
    v123 = *(float *)(v17 + 60) * 0.25;
    v120 = *(float *)(v17 + 68) * 0.25;
    v121 = *(float *)(v17 + 72);
    v25 = *(float *)(v17 + 80);
    v119 = *(float *)(v17 + 76);
    v26 = *(float *)(v17 + 84);
    v27 = *(float *)(v17 + 88);
    v28 = *(float *)(v17 + 92);
    v29 = *(float *)(v17 + 96);
    v31 = *(float *)(v17 + 100);
    v30 = *(float *)(v17 + 104);
    v32 = v17 + 164;
    v33 = v17 + 16548;
    v34 = *((_QWORD *)result + 14);
    v35 = *((_QWORD *)result + 13) * a2 / v10;
    v36 = (_QWORD *)*((_QWORD *)result + 16);
    v37 = *((_QWORD *)result + 15) + 2 * v35;
    v38 = (unsigned __int16 *)(**((_QWORD **)result + 7) + v19 * v15 + 8 * *(_QWORD *)(result + 36));
    v39 = v36[1];
    v40 = (char *)(*v36 + v37 * v20 + 2 * v34);
    v41 = *(unsigned __int8 *)(v17 + 132);
    if (v41 >= 0x11)
      v42 = 0;
    else
      v42 = 16 - v41;
    if (v37 >= 0)
      v43 = v37;
    else
      v43 = v37 + 1;
    result = (unsigned __int8 *)(v39 + (v43 >> 1) * v21 + 2 * v34);
    do
    {
      v44 = &v40[v20];
      v45 = (char *)v38 + v19;
      if (v14)
      {
        v46 = 0;
        v47 = (unsigned __int16 *)((char *)v38 + v19);
        v48 = &v40[v20];
        do
        {
          _H18 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v22 * (float)(bswap32(v38[1]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S18, H18 }
          _H19 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v22 * (float)(bswap32(v38[2]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          _H20 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v22 * (float)(bswap32(v38[3]) >> 16), 0.0), 8191.0)));
          _H10 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v22 * (float)(bswap32(v38[5]) >> 16), 0.0), 8191.0)));
          __asm
          {
            FCVT            S20, H20
            FCVT            S10, H10
          }
          _H11 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v22 * (float)(bswap32(v38[6]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          _H12 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v22 * (float)(bswap32(v38[7]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          _H13 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v22 * (float)(bswap32(v47[1]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S13, H13 }
          _H14 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v22 * (float)(bswap32(v47[2]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S14, H14 }
          _H15 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v22 * (float)(bswap32(v47[3]) >> 16), 0.0), 8191.0)));
          _H21 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v22 * (float)(bswap32(v47[5]) >> 16), 0.0), 8191.0)));
          __asm
          {
            FCVT            S15, H15
            FCVT            S21, H21
          }
          _H22 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v22 * (float)(bswap32(v47[6]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S22, H22 }
          _H24 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v22 * (float)(bswap32(v47[7]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          _S5 = (float)((float)(v119 * _S19) + (float)(_S18 * v121)) + (float)(_S20 * v25);
          _S3 = (float)((float)(v27 * _S19) + (float)(_S18 * v26)) + (float)(_S20 * v28);
          v79 = (float)((float)(v31 * _S19) + (float)(_S18 * v29)) + (float)(_S20 * v30);
          v80 = (float)((float)(v119 * _S11) + (float)(_S10 * v121)) + (float)(_S12 * v25);
          v81 = (float)((float)(v27 * _S11) + (float)(_S10 * v26)) + (float)(_S12 * v28);
          v82 = (float)((float)(v31 * _S11) + (float)(_S10 * v29)) + (float)(_S12 * v30);
          v83 = (float)((float)(v119 * _S14) + (float)(_S13 * v121)) + (float)(_S15 * v25);
          v84 = (float)((float)(v27 * _S14) + (float)(_S13 * v26)) + (float)(_S15 * v28);
          _S6 = (float)((float)(v31 * _S14) + (float)(_S13 * v29)) + (float)(_S15 * v30);
          LOWORD(_S5) = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S10, H5 }
          LOWORD(_S3) = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          __asm { FCVT            S11, H3 }
          LOWORD(_S3) = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          LOWORD(_S5) = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm
          {
            FCVT            S12, H3
            FCVT            S13, H5
          }
          LOWORD(_S3) = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          __asm { FCVT            S15, H3 }
          LOWORD(_S3) = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          __asm { FCVT            S14, H3 }
          LOWORD(_S3) = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          __asm { FCVT            S18, H3 }
          LOWORD(_S3) = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm { FCVT            S19, H3 }
          LOWORD(_S3) = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          LOWORD(_S5) = *(_WORD *)(v33
                                 + 2
                                 * llroundf(fminf(fmaxf((float)((float)(v119 * _S22) + (float)(_S21 * v121)) + (float)(_S24 * v25), 0.0), 8191.0)));
          __asm
          {
            FCVT            S20, H3
            FCVT            S3, H5
          }
          LOWORD(_S5) = *(_WORD *)(v33
                                 + 2
                                 * llroundf(fminf(fmaxf((float)((float)(v27 * _S22) + (float)(_S21 * v26)) + (float)(_S24 * v28), 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = *(_WORD *)(v33
                                 + 2
                                 * llroundf(fminf(fmaxf((float)((float)(v31 * _S22) + (float)(_S21 * v29)) + (float)(_S24 * v30), 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          v98 = (float)((float)((float)(v128 * _S11) + (float)(v129 * _S10)) + (float)(v127 * _S12)) + v23;
          if (v98 < v23)
            v99 = v23;
          else
            v99 = (float)((float)((float)(v128 * _S11) + (float)(v129 * _S10)) + (float)(v127 * _S12)) + v23;
          v100 = v98 <= v24;
          v101 = (float)((float)((float)(v128 * _S15) + (float)(v129 * _S13)) + (float)(v127 * _S14)) + v23;
          if (!v100)
            v99 = v24;
          v102 = llroundf(v99);
          if (v101 < v23)
            v103 = v23;
          else
            v103 = (float)((float)((float)(v128 * _S15) + (float)(v129 * _S13)) + (float)(v127 * _S14)) + v23;
          v100 = v101 <= v24;
          v104 = (float)((float)((float)(v128 * _S19) + (float)(v129 * _S18)) + (float)(v127 * _S20)) + v23;
          if (!v100)
            v103 = v24;
          v105 = llroundf(v103);
          if (v104 < v23)
            v106 = v23;
          else
            v106 = (float)((float)((float)(v128 * _S19) + (float)(v129 * _S18)) + (float)(v127 * _S20)) + v23;
          v100 = v104 <= v24;
          v107 = (float)((float)((float)(v128 * _S5) + (float)(v129 * _S3)) + (float)(v127 * _S6)) + v23;
          if (!v100)
            v106 = v24;
          v108 = llroundf(v106);
          if (v107 < v23)
            v109 = v23;
          else
            v109 = (float)((float)((float)(v128 * _S5) + (float)(v129 * _S3)) + (float)(v127 * _S6)) + v23;
          if (v107 <= v24)
            v110 = v109;
          else
            v110 = v24;
          v111 = (float)((float)(_S10 + _S13) + _S18) + _S3;
          v112 = (float)((float)(_S11 + _S15) + _S19) + _S5;
          *(_WORD *)v40 = v102 << v42;
          *((_WORD *)v40 + 1) = v105 << v42;
          *(_WORD *)v48 = v108 << v42;
          *((_WORD *)v48 + 1) = llroundf(v110) << v42;
          v113 = v131;
          v114 = (float)((float)(_S12 + _S14) + _S20) + _S6;
          v115 = (float)((float)(v132 + (float)(v111 * v126)) + (float)(v112 * v125)) + (float)(v114 * v124);
          if (v115 <= v131)
          {
            v113 = (float)((float)(v132 + (float)(v111 * v126)) + (float)(v112 * v125)) + (float)(v114 * v124);
            if (v115 < v130)
              v113 = v130;
          }
          v116 = &result[2 * v46];
          v117 = (float)((float)(v132 + (float)(v111 * v123)) + (float)(v112 * v122)) + (float)(v114 * v120);
          *(_WORD *)v116 = llroundf(v113) << v42;
          v118 = v131;
          if (v117 <= v131)
          {
            v118 = v117;
            if (v117 < v130)
              v118 = v130;
          }
          v38 += 8;
          v47 += 8;
          v40 += 4;
          v48 += 4;
          *((_WORD *)v116 + 1) = llroundf(v118) << v42;
          v46 += 2;
        }
        while (v14 > v46);
      }
      v38 = (unsigned __int16 *)&v45[v19];
      v40 = &v44[v20];
      result += v21;
      v13 += 2;
    }
    while (v16 > v13);
  }
  return result;
}

uint64_t vt_Copy_b64a_rgb_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_rgb_xf420_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_rgb_xf420_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  unsigned __int16 *v41;
  unsigned __int8 *v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char *v47;
  unint64_t v48;
  unsigned __int16 *v49;
  unsigned __int8 *v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  _WORD *v77;
  float v78;
  float v79;

  v8 = *(_QWORD *)(result + 28);
  v9 = 2 * *result;
  v10 = v8 * a2 / v9;
  v11 = (v8 + v8 * a2) / v9;
  if (2 * v11 != 2 * v10)
  {
    v12 = 0;
    v13 = *(_QWORD *)(result + 20);
    v14 = *(_QWORD *)(result + 44) + 2 * v10;
    v15 = 2 * v11 - 2 * v10;
    v16 = *((_QWORD *)result + 19);
    v17 = (uint64_t *)*((_QWORD *)result + 17);
    v18 = **((_QWORD **)result + 8);
    v19 = *v17;
    v20 = v17[1];
    *(float *)&v21 = (float)*(unsigned int *)(v16 + 136);
    v22 = *(float *)&v21 / (float)*(unsigned int *)(v16 + 128);
    LOWORD(v21) = *(_WORD *)(v16 + 144);
    v23 = (float)v21;
    LOWORD(a5) = *(_WORD *)(v16 + 146);
    v24 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v16 + 148);
    v25 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v16 + 150);
    v26 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v16 + 152);
    v27 = (float)LODWORD(a8);
    v28 = *(float *)(v16 + 36);
    v29 = *(float *)(v16 + 40);
    v30 = *(float *)(v16 + 44);
    v31 = *(float *)(v16 + 48) * 0.25;
    v32 = *(float *)(v16 + 52) * 0.25;
    v33 = *(float *)(v16 + 56) * 0.25;
    v34 = *(float *)(v16 + 60) * 0.25;
    v35 = *(float *)(v16 + 64) * 0.25;
    v36 = *(float *)(v16 + 68) * 0.25;
    v37 = *((_QWORD *)result + 14);
    v38 = *((_QWORD *)result + 13) * a2 / v9;
    v39 = (_QWORD *)*((_QWORD *)result + 16);
    v40 = *((_QWORD *)result + 15) + 2 * v38;
    v41 = (unsigned __int16 *)(**((_QWORD **)result + 7) + v18 * v14 + 8 * *(_QWORD *)(result + 36));
    v42 = (unsigned __int8 *)(*v39 + v40 * v19 + 2 * v37);
    LODWORD(v16) = *(unsigned __int8 *)(v16 + 132);
    v43 = 16 - v16;
    if (v16 >= 0x11)
      v43 = 0;
    if (v40 >= 0)
      v44 = v40;
    else
      v44 = v40 + 1;
    v45 = v39[1] + (v44 >> 1) * v20 + 2 * v37;
    v46 = v43;
    do
    {
      result = &v42[v19];
      v47 = (char *)v41 + v18;
      if (v13)
      {
        v48 = 0;
        v49 = (unsigned __int16 *)((char *)v41 + v18);
        v50 = &v42[v19];
        do
        {
          v51 = v22 * (float)(bswap32(v41[1]) >> 16);
          v52 = v22 * (float)(bswap32(v41[2]) >> 16);
          v53 = v22 * (float)(bswap32(v41[3]) >> 16);
          v54 = v22 * (float)(bswap32(v41[5]) >> 16);
          v55 = v22 * (float)(bswap32(v41[6]) >> 16);
          v56 = v22 * (float)(bswap32(v41[7]) >> 16);
          v57 = v22 * (float)(bswap32(v49[1]) >> 16);
          v58 = v22 * (float)(bswap32(v49[2]) >> 16);
          v59 = v22 * (float)(bswap32(v49[3]) >> 16);
          v60 = v22 * (float)(bswap32(v49[5]) >> 16);
          v61 = v22 * (float)(bswap32(v49[6]) >> 16);
          v62 = v22 * (float)(bswap32(v49[7]) >> 16);
          v63 = (float)((float)((float)(v29 * v52) + (float)(v28 * v51)) + (float)(v30 * v53)) + v23;
          v64 = (float)((float)((float)(v29 * v55) + (float)(v28 * v54)) + (float)(v30 * v56)) + v23;
          v65 = (float)((float)((float)(v29 * v58) + (float)(v28 * v57)) + (float)(v30 * v59)) + v23;
          v66 = (float)((float)((float)(v29 * v61) + (float)(v28 * v60)) + (float)(v30 * v62)) + v23;
          if (v63 < v23)
            v67 = v23;
          else
            v67 = (float)((float)((float)(v29 * v52) + (float)(v28 * v51)) + (float)(v30 * v53)) + v23;
          if (v63 <= v25)
            v68 = v67;
          else
            v68 = v25;
          *(_WORD *)v42 = llroundf(v68) << v46;
          if (v64 < v23)
            v69 = v23;
          else
            v69 = (float)((float)((float)(v29 * v55) + (float)(v28 * v54)) + (float)(v30 * v56)) + v23;
          if (v64 > v25)
            v69 = v25;
          *((_WORD *)v42 + 1) = llroundf(v69) << v46;
          if (v65 < v23)
            v70 = v23;
          else
            v70 = (float)((float)((float)(v29 * v58) + (float)(v28 * v57)) + (float)(v30 * v59)) + v23;
          if (v65 > v25)
            v70 = v25;
          *(_WORD *)v50 = llroundf(v70) << v46;
          if (v66 < v23)
            v71 = v23;
          else
            v71 = (float)((float)((float)(v29 * v61) + (float)(v28 * v60)) + (float)(v30 * v62)) + v23;
          if (v66 > v25)
            v71 = v25;
          *((_WORD *)v50 + 1) = llroundf(v71) << v46;
          v72 = (float)((float)(v51 + v54) + v57) + v60;
          v73 = (float)((float)(v52 + v55) + v58) + v61;
          v74 = (float)((float)(v53 + v56) + v59) + v62;
          v75 = (float)((float)(v24 + (float)(v72 * v31)) + (float)(v73 * v32)) + (float)(v74 * v33);
          v76 = v27;
          if (v75 <= v27)
          {
            v76 = (float)((float)(v24 + (float)(v72 * v31)) + (float)(v73 * v32)) + (float)(v74 * v33);
            if (v75 < v26)
              v76 = v26;
          }
          v77 = (_WORD *)(v45 + 2 * v48);
          v78 = (float)((float)(v24 + (float)(v72 * v34)) + (float)(v73 * v35)) + (float)(v74 * v36);
          *v77 = llroundf(v76) << v46;
          v79 = v27;
          if (v78 <= v27)
          {
            v79 = v78;
            if (v78 < v26)
              v79 = v26;
          }
          v41 += 8;
          v49 += 8;
          v42 += 4;
          v50 += 4;
          v77[1] = llroundf(v79) << v46;
          v48 += 2;
        }
        while (v13 > v48);
      }
      v41 = (unsigned __int16 *)&v47[v18];
      v42 = &result[v19];
      v45 += v20;
      v12 += 2;
    }
    while (v15 > v12);
  }
  return result;
}

uint64_t vt_Copy_b64a_TRC_Tone_Mat_TRC_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v20 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v18 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_TRC_Tone_Mat_TRC_422vf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_TRC_Tone_Mat_TRC_422vf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float v42;
  float v43;
  float v44;
  float v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v55;
  _BYTE *v56;
  uint64_t v57;
  unint64_t v58;
  _BYTE *v59;
  _BYTE *v60;
  unsigned __int16 *v61;
  float v71;
  float v72;
  float v79;
  float v80;
  char v81;
  char v82;
  float v85;
  float v86;
  float v87;
  float v92;
  float v94;
  float v97;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;

  v8 = *(_QWORD *)(result + 28);
  v9 = *result;
  v10 = v8 * a2 / v9;
  v11 = (v8 + v8 * a2) / v9;
  if (v11 != v10)
  {
    v12 = 0;
    v13 = *(_QWORD *)(result + 20);
    v14 = v10 + *(_QWORD *)(result + 44);
    v15 = v11 - v10;
    v16 = *((_QWORD *)result + 19);
    v17 = (uint64_t *)*((_QWORD *)result + 17);
    v18 = (_QWORD *)*((_QWORD *)result + 7);
    v19 = **((_QWORD **)result + 8);
    v20 = *v17;
    v21 = v17[1];
    v22 = v17[2];
    v23 = 8191.0 / (float)*(unsigned int *)(v16 + 128);
    LOWORD(a5) = *(_WORD *)(v16 + 144);
    v24 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v16 + 146);
    v25 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v16 + 148);
    v26 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v16 + 150);
    v125 = (float)LODWORD(a8);
    LOWORD(a8) = *(_WORD *)(v16 + 152);
    v27 = (float)LODWORD(a8);
    v28 = *(float *)(v16 + 40);
    v124 = *(float *)(v16 + 36);
    v29 = *(float *)(v16 + 44);
    v123 = *(float *)(v16 + 48) * 0.5;
    v122 = *(float *)(v16 + 52) * 0.5;
    v121 = *(float *)(v16 + 56) * 0.5;
    v120 = *(float *)(v16 + 60) * 0.5;
    v119 = *(float *)(v16 + 64) * 0.5;
    v30 = *(float *)(v16 + 72);
    v118 = *(float *)(v16 + 68) * 0.5;
    v31 = *(float *)(v16 + 76);
    v32 = *(float *)(v16 + 80);
    v33 = *(float *)(v16 + 84);
    v34 = *(float *)(v16 + 88);
    v35 = *(float *)(v16 + 92);
    v36 = *(float *)(v16 + 96);
    v38 = *(float *)(v16 + 100);
    v37 = *(float *)(v16 + 104);
    v39 = v16 + 164;
    v40 = v16 + 16548;
    v41 = v16 + 32932;
    v42 = *(float *)(v16 + 108);
    v43 = *(float *)(v16 + 112);
    v44 = *(float *)(v16 + 116);
    v45 = *(float *)(v16 + 120);
    v46 = *((_QWORD *)result + 14);
    v47 = (_QWORD *)*((_QWORD *)result + 16);
    v48 = *((_QWORD *)result + 13) * a2 / v9 + *((_QWORD *)result + 15);
    v49 = *(_QWORD *)(result + 36);
    v50 = v47[2];
    if (v50)
      result = (unsigned __int8 *)(v50 + v48 * v22 + v46);
    else
      result = 0;
    v53 = v47;
    v52 = *v47;
    v51 = v53[1];
    _ZF = v51 == 0;
    v55 = v51 + v48 * v21 + v46;
    if (_ZF)
      v55 = 0;
    v56 = (_BYTE *)(v52 + v48 * v20 + v46);
    v57 = *v18 + v19 * v14 + 8 * v49;
    do
    {
      if (v13)
      {
        v58 = 0;
        v59 = result;
        v60 = v56;
        v61 = (unsigned __int16 *)v57;
        do
        {
          _H5 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v23 * (float)(bswap32(v61[1]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S14, H5 }
          _H5 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v23 * (float)(bswap32(v61[2]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S15, H5 }
          _H5 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v23 * (float)(bswap32(v61[3]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S18, H5 }
          v71 = (float)((float)((float)(v43 * _S15) + (float)(v42 * _S14)) + (float)(v44 * _S18))
              + (float)(v45 * fmaxf(_S14, fmaxf(_S15, _S18)));
          v72 = 8191.0;
          if (v71 <= 8191.0)
          {
            v72 = v71;
            if (v71 < 0.0)
              v72 = 0.0;
          }
          _H5 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v23 * (float)(bswap32(v61[5]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S20, H5 }
          _H5 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v23 * (float)(bswap32(v61[6]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S21, H5 }
          _H5 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v23 * (float)(bswap32(v61[7]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S22, H5 }
          v79 = (float)((float)((float)(v43 * _S21) + (float)(v42 * _S20)) + (float)(v44 * _S22))
              + (float)(v45 * fmaxf(_S20, fmaxf(_S21, _S22)));
          v80 = 8191.0;
          if (v79 <= 8191.0)
          {
            v80 = v79;
            if (v79 < 0.0)
              v80 = 0.0;
          }
          if (v59)
          {
            v81 = llroundf((float)(bswap32(*v61) >> 16) * 0.0038911);
            v82 = llroundf((float)(bswap32(v61[4]) >> 16) * 0.0038911);
          }
          else
          {
            v81 = 0;
            v82 = 0;
          }
          _H3 = *(_WORD *)(v40 + 2 * llroundf(v72));
          __asm { FCVT            S3, H3 }
          v85 = _S14 * _S3;
          v86 = _S15 * _S3;
          v87 = _S18 * _S3;
          _H5 = *(_WORD *)(v40 + 2 * llroundf(v80));
          __asm { FCVT            S5, H5 }
          _S18 = _S20 * _S5;
          _S20 = _S21 * _S5;
          v92 = _S22 * _S5;
          _S21 = (float)((float)(v31 * v86) + (float)(v85 * v30)) + (float)(v87 * v32);
          v94 = (float)((float)(v34 * v86) + (float)(v85 * v33)) + (float)(v87 * v35);
          _S3 = (float)((float)(v38 * v86) + (float)(v85 * v36)) + (float)(v87 * v37);
          _S19 = (float)((float)(v31 * _S20) + (float)(_S18 * v30)) + (float)(v92 * v32);
          v97 = (float)((float)(v34 * _S20) + (float)(_S18 * v33)) + (float)(v92 * v35);
          _S5 = (float)((float)(v38 * _S20) + (float)(_S18 * v36)) + (float)(v92 * v37);
          LOWORD(_S18) = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(_S21, 0.0), 8191.0)));
          LOWORD(_S20) = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          __asm
          {
            FCVT            S18, H18
            FCVT            S20, H20
          }
          LOWORD(_S3) = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          LOWORD(_S19) = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          LOWORD(_S21) = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v97, 0.0), 8191.0)));
          __asm { FCVT            S21, H21 }
          LOWORD(_S5) = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          v105 = (float)((float)((float)(v28 * _S20) + (float)(v124 * _S18)) + (float)(v29 * _S3)) + v24;
          v106 = (float)((float)((float)(v28 * _S21) + (float)(v124 * _S19)) + (float)(v29 * _S5)) + v24;
          if (v105 < v24)
            v107 = v24;
          else
            v107 = (float)((float)((float)(v28 * _S20) + (float)(v124 * _S18)) + (float)(v29 * _S3)) + v24;
          if (v105 <= v26)
            v108 = v107;
          else
            v108 = v26;
          *v60 = llroundf(v108);
          if (v106 < v24)
            v109 = v24;
          else
            v109 = (float)((float)((float)(v28 * _S21) + (float)(v124 * _S19)) + (float)(v29 * _S5)) + v24;
          if (v106 > v26)
            v109 = v26;
          v60[1] = llroundf(v109);
          v110 = _S18 + _S19;
          v111 = _S20 + _S21;
          v112 = (float)(v25 + (float)(v110 * v123)) + (float)((float)(_S20 + _S21) * v122);
          v113 = _S3 + _S5;
          v114 = v112 + (float)((float)(_S3 + _S5) * v121);
          v115 = v27;
          if (v114 <= v27)
          {
            v115 = v114;
            if (v114 < v125)
              v115 = v125;
          }
          v116 = (float)((float)(v25 + (float)(v110 * v120)) + (float)(v111 * v119)) + (float)(v113 * v118);
          *(_BYTE *)(v55 + v58) = llroundf(v115);
          v117 = v27;
          if (v116 <= v27)
          {
            v117 = v116;
            if (v116 < v125)
              v117 = v125;
          }
          *(_BYTE *)(v55 + v58 + 1) = llroundf(v117);
          if (v59)
          {
            *v59 = v81;
            v59[1] = v82;
            v59 += 2;
          }
          v61 += 8;
          v58 += 2;
          v60 += 2;
        }
        while (v13 > v58);
      }
      v57 += v19;
      v56 += v20;
      v55 += v21;
      result += v22;
      ++v12;
    }
    while (v12 != v15);
  }
  return result;
}

uint64_t vt_Copy_b64a_TRC_Mat_TRC_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v20 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v18 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_TRC_Mat_TRC_422vf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_TRC_Mat_TRC_422vf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE *v56;
  uint64_t v57;
  unint64_t v58;
  unsigned __int16 *v59;
  _BYTE *v60;
  _BYTE *v61;
  char v62;
  char v63;
  float v84;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;

  v9 = *(_QWORD *)(result + 28);
  v10 = *result;
  v11 = v9 * a2 / v10;
  v12 = (v9 + v9 * a2) / v10;
  if (v12 != v11)
  {
    v13 = 0;
    v14 = *(_QWORD *)(result + 20);
    v15 = v11 + *(_QWORD *)(result + 44);
    v16 = v12 - v11;
    v17 = *((_QWORD *)result + 19);
    v18 = (uint64_t *)*((_QWORD *)result + 17);
    v19 = (_QWORD *)*((_QWORD *)result + 7);
    v20 = **((_QWORD **)result + 8);
    v21 = *v18;
    v22 = v18[1];
    v23 = v18[2];
    v24 = 8191.0 / (float)*(unsigned int *)(v17 + 128);
    LOWORD(a5) = *(_WORD *)(v17 + 144);
    v25 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v17 + 146);
    v26 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v17 + 148);
    v27 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v17 + 150);
    v28 = (float)LODWORD(a8);
    LOWORD(a9) = *(_WORD *)(v17 + 152);
    v29 = (float)LODWORD(a9);
    v30 = *(float *)(v17 + 36);
    v31 = *(float *)(v17 + 40);
    v32 = *(float *)(v17 + 44);
    v103 = *(float *)(v17 + 52) * 0.5;
    v104 = *(float *)(v17 + 48) * 0.5;
    v102 = *(float *)(v17 + 56) * 0.5;
    v33 = *(float *)(v17 + 60) * 0.5;
    v34 = *(float *)(v17 + 64) * 0.5;
    v35 = *(float *)(v17 + 72);
    v36 = *(float *)(v17 + 68) * 0.5;
    v37 = *(float *)(v17 + 76);
    v38 = *(float *)(v17 + 80);
    v39 = *(float *)(v17 + 84);
    v40 = *(float *)(v17 + 88);
    v41 = *(float *)(v17 + 92);
    v42 = *(float *)(v17 + 96);
    v44 = *(float *)(v17 + 100);
    v43 = *(float *)(v17 + 104);
    v45 = v17 + 164;
    v46 = v17 + 16548;
    v47 = *((_QWORD *)result + 14);
    v48 = (uint64_t *)*((_QWORD *)result + 16);
    v49 = *((_QWORD *)result + 13) * a2 / v10 + *((_QWORD *)result + 15);
    v50 = *(_QWORD *)(result + 36);
    v51 = v48[2];
    if (v51)
      v52 = (_BYTE *)(v51 + v49 * v23 + v47);
    else
      v52 = 0;
    v54 = *v48;
    v53 = *(_QWORD *)(*((_QWORD *)result + 16) + 8);
    _ZF = v53 == 0;
    result = (unsigned __int8 *)(v53 + v49 * v22 + v47);
    if (_ZF)
      result = 0;
    v56 = (_BYTE *)(v54 + v49 * v21 + v47);
    v57 = *v19 + v20 * v15 + 8 * v50;
    do
    {
      if (v14)
      {
        v58 = 0;
        v59 = (unsigned __int16 *)v57;
        v60 = v52;
        v61 = v56;
        do
        {
          if (v60)
          {
            v62 = llroundf((float)(bswap32(*v59) >> 16) * 0.0038911);
            v63 = llroundf((float)(bswap32(v59[4]) >> 16) * 0.0038911);
          }
          else
          {
            v62 = 0;
            v63 = 0;
          }
          _H10 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v24 * (float)(bswap32(v59[1]) >> 16), 0.0), 8191.0)));
          _H11 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v24 * (float)(bswap32(v59[2]) >> 16), 0.0), 8191.0)));
          __asm
          {
            FCVT            S10, H10
            FCVT            S11, H11
          }
          _H12 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v24 * (float)(bswap32(v59[3]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          _H13 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v24 * (float)(bswap32(v59[5]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S13, H13 }
          _H14 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v24 * (float)(bswap32(v59[6]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S14, H14 }
          _H15 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v24 * (float)(bswap32(v59[7]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S15, H15 }
          _S18 = (float)((float)(v37 * _S11) + (float)(_S10 * v35)) + (float)(_S12 * v38);
          _S19 = (float)((float)(v40 * _S11) + (float)(_S10 * v39)) + (float)(_S12 * v41);
          _S10 = (float)((float)(v44 * _S11) + (float)(_S10 * v42)) + (float)(_S12 * v43);
          _S11 = (float)((float)(v37 * _S14) + (float)(_S13 * v35)) + (float)(_S15 * v38);
          _S12 = (float)((float)(v40 * _S14) + (float)(_S13 * v39)) + (float)(_S15 * v41);
          v84 = (float)((float)(v44 * _S14) + (float)(_S13 * v42)) + (float)(_S15 * v43);
          LOWORD(_S18) = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(_S18, 0.0), 8191.0)));
          LOWORD(_S19) = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0)));
          __asm
          {
            FCVT            S18, H18
            FCVT            S19, H19
          }
          LOWORD(_S10) = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(_S10, 0.0), 8191.0)));
          __asm { FCVT            S14, H10 }
          LOWORD(_S10) = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(_S11, 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          LOWORD(_S11) = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(_S12, 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          LOWORD(_S12) = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          v91 = (float)((float)((float)(v31 * _S19) + (float)(v30 * _S18)) + (float)(v32 * _S14)) + v25;
          v92 = (float)((float)((float)(v31 * _S11) + (float)(v30 * _S10)) + (float)(v32 * _S12)) + v25;
          if (v91 < v25)
            v93 = v25;
          else
            v93 = (float)((float)((float)(v31 * _S19) + (float)(v30 * _S18)) + (float)(v32 * _S14)) + v25;
          if (v91 > v27)
            v93 = v27;
          *v61 = llroundf(v93);
          if (v92 < v25)
            v94 = v25;
          else
            v94 = (float)((float)((float)(v31 * _S11) + (float)(v30 * _S10)) + (float)(v32 * _S12)) + v25;
          if (v92 > v27)
            v94 = v27;
          v61[1] = llroundf(v94);
          v95 = _S18 + _S10;
          v96 = _S19 + _S11;
          v97 = _S14 + _S12;
          v98 = (float)((float)(v26 + (float)(v95 * v104)) + (float)(v96 * v103)) + (float)(v97 * v102);
          v99 = v29;
          if (v98 <= v29)
          {
            v99 = (float)((float)(v26 + (float)(v95 * v104)) + (float)(v96 * v103)) + (float)(v97 * v102);
            if (v98 < v28)
              v99 = v28;
          }
          v100 = (float)((float)(v26 + (float)(v95 * v33)) + (float)(v96 * v34)) + (float)(v97 * v36);
          result[v58] = llroundf(v99);
          v101 = v29;
          if (v100 <= v29)
          {
            v101 = v100;
            if (v100 < v28)
              v101 = v28;
          }
          result[v58 + 1] = llroundf(v101);
          if (v60)
          {
            *v60 = v62;
            v60[1] = v63;
            v60 += 2;
          }
          v59 += 8;
          v58 += 2;
          v61 += 2;
        }
        while (v14 > v58);
      }
      v57 += v20;
      v56 += v21;
      result += v22;
      v52 += v23;
      ++v13;
    }
    while (v13 != v16);
  }
  return result;
}

uint64_t vt_Copy_b64a_rgb_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v20 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v18 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_rgb_422vf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_rgb_422vf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  BOOL v49;
  uint64_t v50;
  _BYTE *v51;
  unint64_t v52;
  unsigned __int16 *v53;
  _BYTE *v54;
  _BYTE *v55;
  char v56;
  char v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;

  v8 = *(_QWORD *)(result + 28);
  v9 = *result;
  v10 = v8 * a2 / v9;
  v11 = (v8 + v8 * a2) / v9;
  if (v11 != v10)
  {
    v12 = 0;
    v13 = *(_QWORD *)(result + 20);
    v14 = v10 + *(_QWORD *)(result + 44);
    v15 = v11 - v10;
    v16 = *((_QWORD *)result + 19);
    v17 = (uint64_t *)*((_QWORD *)result + 17);
    v18 = (_QWORD *)*((_QWORD *)result + 7);
    v19 = **((_QWORD **)result + 8);
    v20 = *v17;
    v21 = v17[1];
    v22 = v17[2];
    *(float *)&v23 = (float)*(unsigned int *)(v16 + 136);
    v24 = *(float *)&v23 / (float)*(unsigned int *)(v16 + 128);
    LOWORD(v23) = *(_WORD *)(v16 + 144);
    v25 = (float)v23;
    LOWORD(a5) = *(_WORD *)(v16 + 146);
    v26 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v16 + 148);
    v27 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v16 + 150);
    v28 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v16 + 152);
    v29 = (float)LODWORD(a8);
    v30 = *(float *)(v16 + 36);
    v31 = *(float *)(v16 + 40);
    v32 = *(float *)(v16 + 44);
    v33 = *(float *)(v16 + 48) * 0.5;
    v34 = *(float *)(v16 + 52) * 0.5;
    v35 = *(float *)(v16 + 56) * 0.5;
    v36 = *(float *)(v16 + 60) * 0.5;
    v37 = *(float *)(v16 + 64) * 0.5;
    v38 = *(float *)(v16 + 68) * 0.5;
    v39 = *((_QWORD *)result + 14);
    v40 = *((_QWORD *)result + 13) * a2;
    v41 = (_QWORD *)*((_QWORD *)result + 16);
    v42 = v40 / v9 + *((_QWORD *)result + 15);
    v43 = *(_QWORD *)(result + 36);
    v44 = v41[2];
    if (v44)
      v45 = (_BYTE *)(v44 + v42 * v22 + v39);
    else
      v45 = 0;
    v48 = v41;
    v46 = *v41;
    v47 = v48[1];
    v49 = v47 == 0;
    v50 = v47 + v42 * v21 + v39;
    if (v49)
      v50 = 0;
    v51 = (_BYTE *)(v46 + v42 * v20 + v39);
    result = (unsigned __int8 *)(*v18 + v19 * v14 + 8 * v43);
    do
    {
      if (v13)
      {
        v52 = 0;
        v53 = (unsigned __int16 *)result;
        v54 = v45;
        v55 = v51;
        do
        {
          if (v54)
          {
            v56 = llroundf((float)(bswap32(*v53) >> 16) * 0.0038911);
            v57 = llroundf((float)(bswap32(v53[4]) >> 16) * 0.0038911);
          }
          else
          {
            v56 = 0;
            v57 = 0;
          }
          v58 = v24 * (float)(bswap32(v53[1]) >> 16);
          v59 = v24 * (float)(bswap32(v53[2]) >> 16);
          v60 = v24 * (float)(bswap32(v53[3]) >> 16);
          v61 = v24 * (float)(bswap32(v53[5]) >> 16);
          v62 = v24 * (float)(bswap32(v53[6]) >> 16);
          v63 = v24 * (float)(bswap32(v53[7]) >> 16);
          v64 = (float)((float)((float)(v31 * v59) + (float)(v30 * v58)) + (float)(v32 * v60)) + v25;
          v65 = (float)((float)((float)(v31 * v62) + (float)(v30 * v61)) + (float)(v32 * v63)) + v25;
          if (v64 < v25)
            v66 = v25;
          else
            v66 = (float)((float)((float)(v31 * v59) + (float)(v30 * v58)) + (float)(v32 * v60)) + v25;
          if (v64 <= v27)
            v67 = v66;
          else
            v67 = v27;
          *v55 = llroundf(v67);
          if (v65 < v25)
            v68 = v25;
          else
            v68 = (float)((float)((float)(v31 * v62) + (float)(v30 * v61)) + (float)(v32 * v63)) + v25;
          if (v65 > v27)
            v68 = v27;
          v55[1] = llroundf(v68);
          v69 = v58 + v61;
          v70 = v59 + v62;
          v71 = v60 + v63;
          v72 = (float)((float)(v26 + (float)(v69 * v33)) + (float)(v70 * v34)) + (float)(v71 * v35);
          v73 = v29;
          if (v72 <= v29)
          {
            v73 = (float)((float)(v26 + (float)(v69 * v33)) + (float)(v70 * v34)) + (float)(v71 * v35);
            if (v72 < v28)
              v73 = v28;
          }
          v74 = (float)((float)(v26 + (float)(v69 * v36)) + (float)(v70 * v37)) + (float)(v71 * v38);
          *(_BYTE *)(v50 + v52) = llroundf(v73);
          v75 = v29;
          if (v74 <= v29)
          {
            v75 = v74;
            if (v74 < v28)
              v75 = v28;
          }
          *(_BYTE *)(v50 + v52 + 1) = llroundf(v75);
          if (v54)
          {
            *v54 = v56;
            v54[1] = v57;
            v54 += 2;
          }
          v53 += 8;
          v52 += 2;
          v55 += 2;
        }
        while (v13 > v52);
      }
      result += v19;
      v51 += v20;
      v50 += v21;
      v45 += v22;
      ++v12;
    }
    while (v12 != v15);
  }
  return result;
}

uint64_t vt_Copy_b64a_TRC_Tone_Mat_TRC_2vuyf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_TRC_Tone_Mat_TRC_2vuyf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_TRC_Tone_Mat_TRC_2vuyf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  float v48;
  float v49;
  float v50;
  float v51;
  unint64_t v52;
  _BYTE *v53;
  _BYTE *v54;
  unsigned __int16 *v55;
  float v66;
  float v67;
  float v74;
  float v75;
  char v76;
  char v77;
  float v80;
  float v81;
  unsigned int v82;
  float v83;
  float v85;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v96;
  unsigned int v98;
  unsigned int v103;
  float v104;
  float v106;
  float v107;
  float v108;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  char v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;

  v9 = *(_QWORD *)(result + 28);
  v10 = *result;
  v11 = v9 * a2 / v10;
  v12 = *((_QWORD *)result + 14);
  v13 = (_QWORD *)*((_QWORD *)result + 16);
  v14 = *((_QWORD *)result + 13) * a2 / v10 + *((_QWORD *)result + 15);
  v15 = (uint64_t *)*((_QWORD *)result + 17);
  v16 = (v9 + v9 * a2) / v10;
  v17 = (_BYTE *)v13[1];
  if (v17)
    v17 += v15[1] * v14 + v12;
  if (v16 != v11)
  {
    v18 = 0;
    v19 = *(_QWORD *)(result + 44);
    v20 = v11 + v19;
    v21 = **((_QWORD **)result + 8);
    v22 = *v15;
    v23 = *v13 + v22 * v14;
    v24 = *((_QWORD *)result + 19);
    v25 = *(_QWORD *)(result + 20);
    v26 = v16 + v19;
    v27 = **((_QWORD **)result + 7) + v21 * v20 + 8 * *(_QWORD *)(result + 36);
    v28 = (_BYTE *)(v23 + v12);
    v29 = v26 - v20;
    LOWORD(a5) = *(_WORD *)(v24 + 144);
    LOWORD(a6) = *(_WORD *)(v24 + 146);
    LOWORD(a7) = *(_WORD *)(v24 + 148);
    LOWORD(a8) = *(_WORD *)(v24 + 150);
    LOWORD(a9) = *(_WORD *)(v24 + 152);
    v30 = 8191.0 / (float)*(unsigned int *)(v24 + 128);
    v31 = (float)LODWORD(a5);
    v32 = (float)LODWORD(a7);
    v33 = (float)LODWORD(a8);
    v34 = (float)LODWORD(a9);
    v35 = *(float *)(v24 + 36);
    v36 = *(float *)(v24 + 40);
    v37 = *(float *)(v24 + 44);
    v127 = *(float *)(v24 + 48) * 0.5;
    v128 = (float)LODWORD(a6);
    v125 = *(float *)(v24 + 56) * 0.5;
    v126 = *(float *)(v24 + 52) * 0.5;
    v123 = *(float *)(v24 + 64) * 0.5;
    v124 = *(float *)(v24 + 60) * 0.5;
    v121 = *(float *)(v24 + 68) * 0.5;
    v122 = *(float *)(v24 + 72);
    v38 = *(float *)(v24 + 76);
    v39 = *(float *)(v24 + 80);
    v40 = *(float *)(v24 + 84);
    v41 = *(float *)(v24 + 88);
    v42 = *(float *)(v24 + 92);
    v43 = *(float *)(v24 + 96);
    v45 = *(float *)(v24 + 100);
    v44 = *(float *)(v24 + 104);
    v46 = v24 + 164;
    v47 = v24 + 16548;
    result = (unsigned __int8 *)(v24 + 32932);
    v48 = *(float *)(v24 + 108);
    v49 = *(float *)(v24 + 112);
    v50 = *(float *)(v24 + 116);
    v51 = *(float *)(v24 + 120);
    do
    {
      if (v25)
      {
        v52 = 0;
        v53 = v17;
        v54 = v28;
        v55 = (unsigned __int16 *)v27;
        do
        {
          _H3 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v55[1]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S14, H3 }
          _H3 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v55[2]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S18, H3 }
          _H3 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v55[3]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S15, H3 }
          v66 = (float)((float)((float)(v49 * _S18) + (float)(v48 * _S14)) + (float)(v50 * _S15))
              + (float)(v51 * fmaxf(_S14, fmaxf(_S18, _S15)));
          v67 = 8191.0;
          if (v66 <= 8191.0)
          {
            v67 = v66;
            if (v66 < 0.0)
              v67 = 0.0;
          }
          _H3 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v55[5]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S20, H3 }
          _H3 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v55[6]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S21, H3 }
          _H3 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v55[7]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S22, H3 }
          v74 = (float)((float)((float)(v49 * _S21) + (float)(v48 * _S20)) + (float)(v50 * _S22))
              + (float)(v51 * fmaxf(_S20, fmaxf(_S21, _S22)));
          v75 = 8191.0;
          if (v74 <= 8191.0)
          {
            v75 = v74;
            if (v74 < 0.0)
              v75 = 0.0;
          }
          if (v53)
          {
            v76 = llroundf((float)(bswap32(*v55) >> 16) * 0.0038911);
            v77 = llroundf((float)(bswap32(v55[4]) >> 16) * 0.0038911);
          }
          else
          {
            v76 = 0;
            v77 = 0;
          }
          _H7 = *(_WORD *)(v47 + 2 * llroundf(v67));
          __asm { FCVT            S7, H7 }
          v80 = _S14 * _S7;
          v81 = _S18 * _S7;
          v82 = llroundf(v75);
          v83 = _S15 * _S7;
          LOWORD(_S7) = *(_WORD *)(v47 + 2 * v82);
          __asm { FCVT            S7, H7 }
          v85 = _S20 * _S7;
          _S21 = _S21 * _S7;
          v87 = _S22 * _S7;
          v88 = (float)((float)(v38 * v81) + (float)(v80 * v122)) + (float)(v83 * v39);
          v89 = (float)((float)(v41 * v81) + (float)(v80 * v40)) + (float)(v83 * v42);
          v90 = (float)((float)(v45 * v81) + (float)(v80 * v43)) + (float)(v83 * v44);
          v91 = (float)(v38 * _S21) + (float)(v85 * v122);
          v92 = (float)(v41 * _S21) + (float)(v85 * v40);
          v93 = (float)(v45 * _S21) + (float)(v85 * v43);
          _S18 = v91 + (float)(v87 * v39);
          _S19 = v92 + (float)(v87 * v42);
          LOWORD(_S21) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0))];
          v96 = v93 + (float)(v87 * v44);
          __asm { FCVT            S20, H21 }
          LOWORD(_S21) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0))];
          v98 = llroundf(fminf(fmaxf(v90, 0.0), 8191.0));
          __asm { FCVT            S3, H21 }
          LOWORD(_S21) = *(_WORD *)&result[2 * v98];
          __asm { FCVT            S21, H21 }
          LOWORD(_S18) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(_S18, 0.0), 8191.0))];
          __asm { FCVT            S18, H18 }
          LOWORD(_S19) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0))];
          __asm { FCVT            S19, H19 }
          v103 = llroundf(fminf(fmaxf(v96, 0.0), 8191.0));
          v104 = (float)(v36 * _S3) + (float)(v35 * _S20);
          _S20 = _S20 + _S18;
          v106 = _S3 + _S19;
          v107 = (float)(v128 + (float)(_S20 * v127)) + (float)(v106 * v126);
          v108 = (float)(v128 + (float)(_S20 * v124)) + (float)(v106 * v123);
          LOWORD(_S20) = *(_WORD *)&result[2 * v103];
          __asm { FCVT            S20, H20 }
          v110 = v104 + (float)(v37 * _S21);
          v111 = _S21 + _S20;
          v112 = v107 + (float)(v111 * v125);
          v113 = v108 + (float)(v111 * v121);
          if (v112 < v33)
            v114 = v33;
          else
            v114 = v112;
          v115 = v110 + v31;
          if (v112 > v34)
            v114 = v34;
          v116 = llroundf(v114);
          if (v115 < v31)
            v117 = v31;
          else
            v117 = v115;
          *v54 = v116;
          if (v115 > v32)
            v117 = v32;
          v54[1] = llroundf(v117);
          v118 = v34;
          if (v113 <= v34)
          {
            v118 = v113;
            if (v113 < v33)
              v118 = v33;
          }
          v119 = (float)((float)((float)(v36 * _S19) + (float)(v35 * _S18)) + (float)(v37 * _S20)) + v31;
          v54[2] = llroundf(v118);
          v120 = v32;
          if (v119 <= v32)
          {
            v120 = v119;
            if (v119 < v31)
              v120 = v31;
          }
          v54[3] = llroundf(v120);
          if (v53)
          {
            *v53 = v76;
            v53[1] = v77;
            v53 += 2;
          }
          v55 += 8;
          v52 += 2;
          v54 += 4;
        }
        while (v25 > v52);
      }
      v27 += v21;
      v28 += v22;
      ++v18;
    }
    while (v18 != v29);
  }
  return result;
}

uint64_t vt_Copy_b64a_TRC_Mat_TRC_2vuyf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_TRC_Mat_TRC_2vuyf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_TRC_Mat_TRC_2vuyf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  uint64_t v50;
  uint64_t v51;
  float v52;
  float v53;
  unint64_t v54;
  unsigned __int16 *v55;
  _BYTE *v56;
  _BYTE *v57;
  char v58;
  char v59;
  float v77;
  float v78;
  float v79;
  float v82;
  float v83;
  unsigned int v89;
  float v90;
  float v92;
  float v93;
  float v94;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  char v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;

  v9 = *(_QWORD *)(result + 28);
  v10 = *result;
  v11 = v9 * a2 / v10;
  v12 = *((_QWORD *)result + 14);
  v13 = (_QWORD *)*((_QWORD *)result + 16);
  v14 = *((_QWORD *)result + 13) * a2 / v10 + *((_QWORD *)result + 15);
  v15 = (uint64_t *)*((_QWORD *)result + 17);
  v16 = (v9 + v9 * a2) / v10;
  v17 = (_BYTE *)v13[1];
  if (v17)
    v17 += v15[1] * v14 + v12;
  if (v16 != v11)
  {
    v18 = 0;
    v19 = *(_QWORD *)(result + 44);
    v20 = v11 + v19;
    v21 = **((_QWORD **)result + 8);
    v22 = *v15;
    v23 = *v13 + v22 * v14;
    v24 = *((_QWORD *)result + 19);
    v25 = *(_QWORD *)(result + 20);
    v26 = v16 + v19;
    v27 = **((_QWORD **)result + 7) + v21 * v20 + 8 * *(_QWORD *)(result + 36);
    v28 = (_BYTE *)(v23 + v12);
    v29 = v26 - v20;
    LOWORD(a5) = *(_WORD *)(v24 + 144);
    LOWORD(a6) = *(_WORD *)(v24 + 146);
    LOWORD(a7) = *(_WORD *)(v24 + 148);
    LOWORD(a8) = *(_WORD *)(v24 + 150);
    LOWORD(a9) = *(_WORD *)(v24 + 152);
    v30 = 8191.0 / (float)*(unsigned int *)(v24 + 128);
    v31 = (float)LODWORD(a5);
    v32 = (float)LODWORD(a6);
    v33 = (float)LODWORD(a7);
    v34 = (float)LODWORD(a8);
    v35 = (float)LODWORD(a9);
    v36 = *(float *)(v24 + 36);
    v37 = *(float *)(v24 + 40);
    v38 = *(float *)(v24 + 44);
    v106 = *(float *)(v24 + 52) * 0.5;
    v107 = *(float *)(v24 + 48) * 0.5;
    v39 = *(float *)(v24 + 56) * 0.5;
    v40 = *(float *)(v24 + 60) * 0.5;
    v41 = *(float *)(v24 + 64) * 0.5;
    v42 = *(float *)(v24 + 72);
    v43 = *(float *)(v24 + 68) * 0.5;
    v44 = *(float *)(v24 + 76);
    v45 = *(float *)(v24 + 80);
    v46 = *(float *)(v24 + 84);
    v47 = *(float *)(v24 + 88);
    v48 = *(float *)(v24 + 92);
    v49 = *(float *)(v24 + 96);
    v50 = v24 + 164;
    v51 = v24 + 16548;
    result = (unsigned __int8 *)&unk_1928E2000;
    v52 = *(float *)(v24 + 100);
    v53 = *(float *)(v24 + 104);
    do
    {
      if (v25)
      {
        v54 = 0;
        v55 = (unsigned __int16 *)v27;
        v56 = v17;
        v57 = v28;
        do
        {
          if (v56)
          {
            v58 = llroundf((float)(bswap32(*v55) >> 16) * 0.0038911);
            v59 = llroundf((float)(bswap32(v55[4]) >> 16) * 0.0038911);
          }
          else
          {
            v58 = 0;
            v59 = 0;
          }
          _H10 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v55[1]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          _H11 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v55[2]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          _H12 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v55[3]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          _H13 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v55[5]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S13, H13 }
          _H14 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v55[6]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S14, H14 }
          _S15 = (float)((float)(v44 * _S11) + (float)(_S10 * v42)) + (float)(_S12 * v45);
          _S18 = (float)((float)(v47 * _S11) + (float)(_S10 * v46)) + (float)(_S12 * v48);
          _S10 = (float)((float)(v52 * _S11) + (float)(_S10 * v49)) + (float)(_S12 * v53);
          v77 = (float)(v44 * _S14) + (float)(_S13 * v42);
          v78 = (float)(v47 * _S14) + (float)(_S13 * v46);
          v79 = (float)(v52 * _S14) + (float)(_S13 * v49);
          LOWORD(_S14) = *(_WORD *)(v50 + 2
                                        * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v55[7]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S14, H14 }
          _S11 = v77 + (float)(_S14 * v45);
          v82 = v78 + (float)(_S14 * v48);
          LOWORD(_S15) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(_S15, 0.0), 8191.0)));
          v83 = v79 + (float)(_S14 * v53);
          __asm { FCVT            S14, H15 }
          LOWORD(_S18) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(_S18, 0.0), 8191.0)));
          __asm { FCVT            S18, H18 }
          LOWORD(_S10) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(_S10, 0.0), 8191.0)));
          __asm { FCVT            S15, H10 }
          LOWORD(_S10) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(_S11, 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          LOWORD(_S11) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          v89 = llroundf(fminf(fmaxf(v83, 0.0), 8191.0));
          v90 = (float)(v37 * _S18) + (float)(v36 * _S14);
          _S12 = _S14 + _S10;
          v92 = _S18 + _S11;
          v93 = (float)(v32 + (float)((float)(_S14 + _S10) * v107)) + (float)(v92 * v106);
          v94 = (float)(v32 + (float)(_S12 * v40)) + (float)(v92 * v41);
          LOWORD(_S12) = *(_WORD *)(v51 + 2 * v89);
          __asm { FCVT            S12, H12 }
          v96 = v90 + (float)(v38 * _S15);
          v97 = v93 + (float)((float)(_S15 + _S12) * v39);
          v98 = v94 + (float)((float)(_S15 + _S12) * v43);
          if (v97 < v34)
            v99 = v34;
          else
            v99 = v97;
          v100 = v96 + v31;
          if (v97 > v35)
            v99 = v35;
          v101 = llroundf(v99);
          if (v100 < v31)
            v102 = v31;
          else
            v102 = v100;
          *v57 = v101;
          if (v100 > v33)
            v102 = v33;
          v57[1] = llroundf(v102);
          v103 = v35;
          if (v98 <= v35)
          {
            v103 = v98;
            if (v98 < v34)
              v103 = v34;
          }
          v104 = (float)((float)((float)(v37 * _S11) + (float)(v36 * _S10)) + (float)(v38 * _S12)) + v31;
          v57[2] = llroundf(v103);
          v105 = v33;
          if (v104 <= v33)
          {
            v105 = v104;
            if (v104 < v31)
              v105 = v31;
          }
          v57[3] = llroundf(v105);
          if (v56)
          {
            *v56 = v58;
            v56[1] = v59;
            v56 += 2;
          }
          v55 += 8;
          v54 += 2;
          v57 += 4;
        }
        while (v25 > v54);
      }
      v27 += v21;
      v28 += v22;
      ++v18;
    }
    while (v18 != v29);
  }
  return result;
}

uint64_t vt_Copy_b64a_rgb_2vuyf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_rgb_2vuyf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_rgb_2vuyf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  unsigned int v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  unint64_t v45;
  unsigned __int16 *v46;
  _BYTE *v47;
  char v48;
  char v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;

  v8 = *(_QWORD *)(result + 28);
  v9 = *result;
  v10 = v8 * a2 / v9;
  v11 = *((_QWORD *)result + 14);
  v12 = (_QWORD *)*((_QWORD *)result + 16);
  v13 = *((_QWORD *)result + 13) * a2 / v9 + *((_QWORD *)result + 15);
  v14 = (uint64_t *)*((_QWORD *)result + 17);
  v15 = (v8 + v8 * a2) / v9;
  v16 = (_BYTE *)v12[1];
  if (v16)
    v16 += v14[1] * v13 + v11;
  if (v15 != v10)
  {
    v17 = 0;
    v18 = *(_QWORD *)(result + 44);
    v19 = v10 + v18;
    v20 = **((_QWORD **)result + 8);
    v21 = *v14;
    v22 = *v12 + v21 * v13;
    v23 = *((_QWORD *)result + 19);
    v24 = *(_QWORD *)(result + 20);
    v25 = v15 + v18;
    v26 = **((_QWORD **)result + 7) + v20 * v19 + 8 * *(_QWORD *)(result + 36);
    v27 = (unsigned __int8 *)(v22 + v11);
    v28 = v25 - v19;
    *(float *)&v29 = (float)*(unsigned int *)(v23 + 136);
    v30 = *(float *)&v29 / (float)*(unsigned int *)(v23 + 128);
    LOWORD(v29) = *(_WORD *)(v23 + 144);
    v31 = (float)v29;
    LOWORD(a5) = *(_WORD *)(v23 + 146);
    v32 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v23 + 148);
    v33 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v23 + 150);
    v34 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v23 + 152);
    v35 = (float)LODWORD(a8);
    v36 = *(float *)(v23 + 36);
    v37 = *(float *)(v23 + 40);
    v38 = *(float *)(v23 + 44);
    v39 = *(float *)(v23 + 48) * 0.5;
    v40 = *(float *)(v23 + 52) * 0.5;
    v41 = *(float *)(v23 + 56) * 0.5;
    v42 = *(float *)(v23 + 60) * 0.5;
    v43 = *(float *)(v23 + 64) * 0.5;
    v44 = *(float *)(v23 + 68) * 0.5;
    do
    {
      if (v24)
      {
        v45 = 0;
        v46 = (unsigned __int16 *)v26;
        v47 = v16;
        result = v27;
        do
        {
          if (v47)
          {
            v48 = llroundf((float)(bswap32(*v46) >> 16) * 0.0038911);
            v49 = llroundf((float)(bswap32(v46[4]) >> 16) * 0.0038911);
          }
          else
          {
            v48 = 0;
            v49 = 0;
          }
          v50 = v30 * (float)(bswap32(v46[1]) >> 16);
          v51 = v30 * (float)(bswap32(v46[2]) >> 16);
          v52 = v30 * (float)(bswap32(v46[3]) >> 16);
          v53 = v30 * (float)(bswap32(v46[5]) >> 16);
          v54 = v30 * (float)(bswap32(v46[6]) >> 16);
          v55 = v30 * (float)(bswap32(v46[7]) >> 16);
          v56 = (float)((float)((float)(v37 * v51) + (float)(v36 * v50)) + (float)(v38 * v52)) + v31;
          v57 = v50 + v53;
          v58 = v51 + v54;
          v59 = v52 + v55;
          v60 = (float)((float)(v32 + (float)(v57 * v39)) + (float)(v58 * v40)) + (float)(v59 * v41);
          v61 = (float)((float)(v32 + (float)(v57 * v42)) + (float)(v58 * v43)) + (float)(v59 * v44);
          if (v60 < v34)
            v62 = v34;
          else
            v62 = v60;
          if (v60 > v35)
            v62 = v35;
          *result = llroundf(v62);
          if (v56 < v31)
            v63 = v31;
          else
            v63 = v56;
          if (v56 > v33)
            v63 = v33;
          result[1] = llroundf(v63);
          v64 = v35;
          if (v61 <= v35)
          {
            v64 = v61;
            if (v61 < v34)
              v64 = v34;
          }
          v65 = (float)((float)((float)(v37 * v54) + (float)(v36 * v53)) + (float)(v38 * v55)) + v31;
          result[2] = llroundf(v64);
          v66 = v33;
          if (v65 <= v33)
          {
            v66 = v65;
            if (v65 < v31)
              v66 = v31;
          }
          result[3] = llroundf(v66);
          if (v47)
          {
            *v47 = v48;
            v47[1] = v49;
            v47 += 2;
          }
          v46 += 8;
          v45 += 2;
          result += 4;
        }
        while (v24 > v45);
      }
      v26 += v20;
      v27 += v21;
      ++v17;
    }
    while (v17 != v28);
  }
  return result;
}

uint64_t vt_Copy_b64a_TRC_Tone_Mat_TRC_yuvsf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_TRC_Tone_Mat_TRC_yuvsf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_TRC_Tone_Mat_TRC_yuvsf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  float v48;
  float v49;
  float v50;
  float v51;
  unint64_t v52;
  _BYTE *v53;
  _BYTE *v54;
  unsigned __int16 *v55;
  float v66;
  float v67;
  float v74;
  float v75;
  char v76;
  char v77;
  float v80;
  float v81;
  float v82;
  float v85;
  float v86;
  float v87;
  float v89;
  float v91;
  float v92;
  float v95;
  float v96;
  unsigned int v99;
  unsigned int v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  BOOL v115;
  float v116;
  char v117;
  float v118;
  float v119;
  char v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;

  v9 = *(_QWORD *)(result + 28);
  v10 = *result;
  v11 = v9 * a2 / v10;
  v12 = *((_QWORD *)result + 14);
  v13 = (_QWORD *)*((_QWORD *)result + 16);
  v14 = *((_QWORD *)result + 13) * a2 / v10 + *((_QWORD *)result + 15);
  v15 = (uint64_t *)*((_QWORD *)result + 17);
  v16 = (v9 + v9 * a2) / v10;
  v17 = (_BYTE *)v13[1];
  if (v17)
    v17 += v15[1] * v14 + v12;
  if (v16 != v11)
  {
    v18 = 0;
    v19 = *(_QWORD *)(result + 44);
    v20 = v11 + v19;
    v21 = **((_QWORD **)result + 8);
    v22 = *v15;
    v23 = *v13 + v22 * v14;
    v24 = *((_QWORD *)result + 19);
    v25 = *(_QWORD *)(result + 20);
    v26 = v16 + v19;
    v27 = **((_QWORD **)result + 7) + v21 * v20 + 8 * *(_QWORD *)(result + 36);
    v28 = (_BYTE *)(v23 + v12);
    v29 = v26 - v20;
    LOWORD(a5) = *(_WORD *)(v24 + 144);
    LOWORD(a6) = *(_WORD *)(v24 + 146);
    LOWORD(a7) = *(_WORD *)(v24 + 148);
    LOWORD(a8) = *(_WORD *)(v24 + 150);
    LOWORD(a9) = *(_WORD *)(v24 + 152);
    v30 = 8191.0 / (float)*(unsigned int *)(v24 + 128);
    v31 = (float)LODWORD(a5);
    v32 = (float)LODWORD(a7);
    v33 = (float)LODWORD(a8);
    v34 = (float)LODWORD(a9);
    v35 = *(float *)(v24 + 40);
    v131 = *(float *)(v24 + 36);
    v132 = (float)LODWORD(a6);
    v36 = *(float *)(v24 + 44);
    v129 = *(float *)(v24 + 52) * 0.5;
    v130 = *(float *)(v24 + 48) * 0.5;
    v127 = *(float *)(v24 + 60) * 0.5;
    v128 = *(float *)(v24 + 56) * 0.5;
    v37 = *(float *)(v24 + 72);
    v125 = *(float *)(v24 + 68) * 0.5;
    v126 = *(float *)(v24 + 64) * 0.5;
    v38 = *(float *)(v24 + 76);
    v39 = *(float *)(v24 + 80);
    v40 = *(float *)(v24 + 84);
    v41 = *(float *)(v24 + 88);
    v42 = *(float *)(v24 + 92);
    v43 = *(float *)(v24 + 96);
    v45 = *(float *)(v24 + 100);
    v44 = *(float *)(v24 + 104);
    v46 = v24 + 164;
    v47 = v24 + 16548;
    result = (unsigned __int8 *)(v24 + 32932);
    v48 = *(float *)(v24 + 108);
    v49 = *(float *)(v24 + 112);
    v50 = *(float *)(v24 + 116);
    v51 = *(float *)(v24 + 120);
    do
    {
      if (v25)
      {
        v52 = 0;
        v53 = v17;
        v54 = v28;
        v55 = (unsigned __int16 *)v27;
        do
        {
          _H3 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v55[1]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S14, H3 }
          _H3 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v55[2]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S15, H3 }
          _H3 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v55[3]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S18, H3 }
          v66 = (float)((float)((float)(v49 * _S15) + (float)(v48 * _S14)) + (float)(v50 * _S18))
              + (float)(v51 * fmaxf(_S14, fmaxf(_S15, _S18)));
          v67 = 8191.0;
          if (v66 <= 8191.0)
          {
            v67 = v66;
            if (v66 < 0.0)
              v67 = 0.0;
          }
          _H3 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v55[5]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S20, H3 }
          _H3 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v55[6]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S21, H3 }
          _H3 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v55[7]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S22, H3 }
          v74 = (float)((float)((float)(v49 * _S21) + (float)(v48 * _S20)) + (float)(v50 * _S22))
              + (float)(v51 * fmaxf(_S20, fmaxf(_S21, _S22)));
          v75 = 8191.0;
          if (v74 <= 8191.0)
          {
            v75 = v74;
            if (v74 < 0.0)
              v75 = 0.0;
          }
          if (v53)
          {
            v76 = llroundf((float)(bswap32(*v55) >> 16) * 0.0038911);
            v77 = llroundf((float)(bswap32(v55[4]) >> 16) * 0.0038911);
          }
          else
          {
            v76 = 0;
            v77 = 0;
          }
          _H7 = *(_WORD *)(v47 + 2 * llroundf(v67));
          __asm { FCVT            S7, H7 }
          v80 = _S14 * _S7;
          v81 = _S15 * _S7;
          v82 = _S18 * _S7;
          _H3 = *(_WORD *)(v47 + 2 * llroundf(v75));
          __asm { FCVT            S3, H3 }
          v85 = _S20 * _S3;
          v86 = _S21 * _S3;
          v87 = _S22 * _S3;
          _S21 = (float)((float)(v38 * v81) + (float)(v80 * v37)) + (float)(v82 * v39);
          v89 = (float)((float)(v41 * v81) + (float)(v80 * v40)) + (float)(v82 * v42);
          _S7 = (float)((float)(v45 * v81) + (float)(v80 * v43)) + (float)(v82 * v44);
          v91 = (float)(v38 * v86) + (float)(v85 * v37);
          v92 = (float)(v41 * v86) + (float)(v85 * v40);
          _S18 = (float)(v45 * v86) + (float)(v85 * v43);
          _S19 = v91 + (float)(v87 * v39);
          v95 = v92 + (float)(v87 * v42);
          v96 = _S18 + (float)(v87 * v44);
          LOWORD(_S18) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(_S21, 0.0), 8191.0))];
          __asm { FCVT            S18, H18 }
          LOWORD(_S21) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0))];
          __asm { FCVT            S21, H21 }
          v99 = llroundf(fminf(fmaxf(_S7, 0.0), 8191.0));
          LOWORD(_S7) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0))];
          __asm { FCVT            S7, H7 }
          LOWORD(_S19) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v95, 0.0), 8191.0))];
          __asm { FCVT            S19, H19 }
          v102 = llroundf(fminf(fmaxf(v96, 0.0), 8191.0));
          v103 = (float)(v35 * _S21) + (float)(v131 * _S18);
          v104 = (float)(v35 * _S19) + (float)(v131 * _S7);
          v105 = _S18 + _S7;
          LOWORD(_S18) = *(_WORD *)&result[2 * v99];
          v106 = _S21 + _S19;
          LOWORD(_S21) = *(_WORD *)&result[2 * v102];
          __asm
          {
            FCVT            S18, H18
            FCVT            S21, H21
          }
          v109 = (float)(v103 + (float)(v36 * _S18)) + v31;
          v110 = v104 + (float)(v36 * _S21);
          v111 = _S18 + _S21;
          v112 = (float)(v132 + (float)(v105 * v130)) + (float)(v106 * v129);
          v113 = (float)(v132 + (float)(v105 * v127)) + (float)(v106 * v126);
          if (v109 < v31)
            v114 = v31;
          else
            v114 = v109;
          v115 = v109 <= v32;
          v116 = v112 + (float)(v111 * v128);
          if (!v115)
            v114 = v32;
          v117 = llroundf(v114);
          if (v116 < v33)
            v118 = v33;
          else
            v118 = v112 + (float)(v111 * v128);
          if (v116 <= v34)
            v119 = v118;
          else
            v119 = v34;
          v120 = llroundf(v119);
          v121 = v113 + (float)(v111 * v125);
          if ((float)(v110 + v31) < v31)
            v122 = v31;
          else
            v122 = v110 + v31;
          *v54 = v117;
          v54[1] = v120;
          if ((float)(v110 + v31) <= v32)
            v123 = v122;
          else
            v123 = v32;
          v54[2] = llroundf(v123);
          v124 = v34;
          if (v121 <= v34)
          {
            v124 = v121;
            if (v121 < v33)
              v124 = v33;
          }
          v54[3] = llroundf(v124);
          if (v53)
          {
            *v53 = v76;
            v53[1] = v77;
            v53 += 2;
          }
          v55 += 8;
          v52 += 2;
          v54 += 4;
        }
        while (v25 > v52);
      }
      v27 += v21;
      v28 += v22;
      ++v18;
    }
    while (v18 != v29);
  }
  return result;
}

uint64_t vt_Copy_b64a_TRC_Mat_TRC_yuvsf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_TRC_Mat_TRC_yuvsf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_TRC_Mat_TRC_yuvsf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  uint64_t v51;
  uint64_t v52;
  float v53;
  float v54;
  unint64_t v55;
  unsigned __int16 *v56;
  _BYTE *v57;
  _BYTE *v58;
  char v59;
  char v60;
  float v75;
  float v76;
  float v78;
  float v79;
  float v80;
  float v83;
  float v84;
  unsigned int v85;
  unsigned int v88;
  unsigned int v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  BOOL v104;
  float v105;
  char v106;
  float v107;
  char v108;
  float v109;
  float v110;
  float v111;
  float v112;

  v9 = *(_QWORD *)(result + 28);
  v10 = *result;
  v11 = v9 * a2 / v10;
  v12 = *((_QWORD *)result + 14);
  v13 = (_QWORD *)*((_QWORD *)result + 16);
  v14 = *((_QWORD *)result + 13) * a2 / v10 + *((_QWORD *)result + 15);
  v15 = (uint64_t *)*((_QWORD *)result + 17);
  v16 = (v9 + v9 * a2) / v10;
  v17 = (_BYTE *)v13[1];
  if (v17)
    v17 += v15[1] * v14 + v12;
  if (v16 != v11)
  {
    v18 = 0;
    v19 = *(_QWORD *)(result + 44);
    v20 = v11 + v19;
    v21 = **((_QWORD **)result + 8);
    v22 = *v15;
    v23 = *v13 + v22 * v14;
    v24 = *((_QWORD *)result + 19);
    v25 = *(_QWORD *)(result + 20);
    v26 = v16 + v19;
    v27 = **((_QWORD **)result + 7) + v21 * v20 + 8 * *(_QWORD *)(result + 36);
    v28 = (_BYTE *)(v23 + v12);
    v29 = v26 - v20;
    LOWORD(a5) = *(_WORD *)(v24 + 144);
    LOWORD(a6) = *(_WORD *)(v24 + 146);
    LOWORD(a7) = *(_WORD *)(v24 + 148);
    LOWORD(a8) = *(_WORD *)(v24 + 150);
    LOWORD(a9) = *(_WORD *)(v24 + 152);
    v30 = 8191.0 / (float)*(unsigned int *)(v24 + 128);
    v31 = (float)LODWORD(a5);
    v32 = (float)LODWORD(a6);
    v33 = (float)LODWORD(a7);
    v34 = (float)LODWORD(a8);
    v35 = (float)LODWORD(a9);
    v36 = *(float *)(v24 + 36);
    v37 = *(float *)(v24 + 40);
    v38 = *(float *)(v24 + 44);
    v112 = *(float *)(v24 + 48) * 0.5;
    v39 = *(float *)(v24 + 52) * 0.5;
    v40 = *(float *)(v24 + 56) * 0.5;
    v41 = *(float *)(v24 + 60) * 0.5;
    v42 = *(float *)(v24 + 64) * 0.5;
    v43 = *(float *)(v24 + 72);
    v44 = *(float *)(v24 + 68) * 0.5;
    v45 = *(float *)(v24 + 76);
    v46 = *(float *)(v24 + 80);
    v47 = *(float *)(v24 + 84);
    v48 = *(float *)(v24 + 88);
    v49 = *(float *)(v24 + 92);
    v50 = *(float *)(v24 + 96);
    v51 = v24 + 164;
    v52 = v24 + 16548;
    result = (unsigned __int8 *)&unk_1928E2000;
    v53 = *(float *)(v24 + 100);
    v54 = *(float *)(v24 + 104);
    do
    {
      if (v25)
      {
        v55 = 0;
        v56 = (unsigned __int16 *)v27;
        v57 = v17;
        v58 = v28;
        do
        {
          if (v57)
          {
            v59 = llroundf((float)(bswap32(*v56) >> 16) * 0.0038911);
            v60 = llroundf((float)(bswap32(v56[4]) >> 16) * 0.0038911);
          }
          else
          {
            v59 = 0;
            v60 = 0;
          }
          _H10 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v56[1]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          _H11 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v56[2]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          _H12 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v56[3]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          _H13 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v56[5]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S13, H13 }
          _H14 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v56[6]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S14, H14 }
          v75 = (float)((float)(v45 * _S11) + (float)(_S10 * v43)) + (float)(_S12 * v46);
          v76 = (float)((float)(v48 * _S11) + (float)(_S10 * v47)) + (float)(_S12 * v49);
          _S10 = (float)((float)(v53 * _S11) + (float)(_S10 * v50)) + (float)(_S12 * v54);
          v78 = (float)(v45 * _S14) + (float)(_S13 * v43);
          v79 = (float)(v48 * _S14) + (float)(_S13 * v47);
          v80 = (float)(v53 * _S14) + (float)(_S13 * v50);
          LOWORD(_S14) = *(_WORD *)(v51 + 2
                                        * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v56[7]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S14, H14 }
          _S11 = v78 + (float)(_S14 * v46);
          v83 = v79 + (float)(_S14 * v49);
          v84 = v80 + (float)(_S14 * v54);
          LOWORD(_S14) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          v85 = llroundf(fminf(fmaxf(v76, 0.0), 8191.0));
          __asm { FCVT            S18, H14 }
          LOWORD(_S14) = *(_WORD *)(v52 + 2 * v85);
          __asm { FCVT            S14, H14 }
          v88 = llroundf(fminf(fmaxf(_S10, 0.0), 8191.0));
          LOWORD(_S10) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S11, 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          LOWORD(_S11) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          v91 = llroundf(fminf(fmaxf(v84, 0.0), 8191.0));
          v92 = (float)(v37 * _S14) + (float)(v36 * _S18);
          v93 = (float)(v37 * _S11) + (float)(v36 * _S10);
          v94 = _S18 + _S10;
          LOWORD(_S10) = *(_WORD *)(v52 + 2 * v88);
          v95 = _S14 + _S11;
          LOWORD(_S14) = *(_WORD *)(v52 + 2 * v91);
          __asm
          {
            FCVT            S10, H10
            FCVT            S14, H14
          }
          v98 = (float)(v92 + (float)(v38 * _S10)) + v31;
          v99 = v93 + (float)(v38 * _S14);
          v100 = _S10 + _S14;
          v101 = (float)(v32 + (float)(v94 * v112)) + (float)(v95 * v39);
          v102 = (float)(v32 + (float)(v94 * v41)) + (float)(v95 * v42);
          if (v98 < v31)
            v103 = v31;
          else
            v103 = v98;
          v104 = v98 <= v33;
          v105 = v101 + (float)(v100 * v40);
          if (!v104)
            v103 = v33;
          v106 = llroundf(v103);
          if (v105 < v34)
            v107 = v34;
          else
            v107 = v101 + (float)(v100 * v40);
          if (v105 > v35)
            v107 = v35;
          v108 = llroundf(v107);
          v109 = v102 + (float)(v100 * v44);
          if ((float)(v99 + v31) < v31)
            v110 = v31;
          else
            v110 = v99 + v31;
          *v58 = v106;
          v58[1] = v108;
          if ((float)(v99 + v31) > v33)
            v110 = v33;
          v58[2] = llroundf(v110);
          v111 = v35;
          if (v109 <= v35)
          {
            v111 = v109;
            if (v109 < v34)
              v111 = v34;
          }
          v58[3] = llroundf(v111);
          if (v57)
          {
            *v57 = v59;
            v57[1] = v60;
            v57 += 2;
          }
          v56 += 8;
          v55 += 2;
          v58 += 4;
        }
        while (v25 > v55);
      }
      v27 += v21;
      v28 += v22;
      ++v18;
    }
    while (v18 != v29);
  }
  return result;
}

uint64_t vt_Copy_b64a_rgb_yuvsf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_rgb_yuvsf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_rgb_yuvsf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  unsigned int v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  unint64_t v45;
  unsigned __int16 *v46;
  _BYTE *v47;
  char v48;
  char v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;

  v8 = *(_QWORD *)(result + 28);
  v9 = *result;
  v10 = v8 * a2 / v9;
  v11 = *((_QWORD *)result + 14);
  v12 = (_QWORD *)*((_QWORD *)result + 16);
  v13 = *((_QWORD *)result + 13) * a2 / v9 + *((_QWORD *)result + 15);
  v14 = (uint64_t *)*((_QWORD *)result + 17);
  v15 = (v8 + v8 * a2) / v9;
  v16 = (_BYTE *)v12[1];
  if (v16)
    v16 += v14[1] * v13 + v11;
  if (v15 != v10)
  {
    v17 = 0;
    v18 = *(_QWORD *)(result + 44);
    v19 = v10 + v18;
    v20 = **((_QWORD **)result + 8);
    v21 = *v14;
    v22 = *v12 + v21 * v13;
    v23 = *((_QWORD *)result + 19);
    v24 = *(_QWORD *)(result + 20);
    v25 = v15 + v18;
    v26 = **((_QWORD **)result + 7) + v20 * v19 + 8 * *(_QWORD *)(result + 36);
    v27 = (unsigned __int8 *)(v22 + v11);
    v28 = v25 - v19;
    *(float *)&v29 = (float)*(unsigned int *)(v23 + 136);
    v30 = *(float *)&v29 / (float)*(unsigned int *)(v23 + 128);
    LOWORD(v29) = *(_WORD *)(v23 + 144);
    v31 = (float)v29;
    LOWORD(a5) = *(_WORD *)(v23 + 146);
    v32 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v23 + 148);
    v33 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v23 + 150);
    v34 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v23 + 152);
    v35 = (float)LODWORD(a8);
    v36 = *(float *)(v23 + 36);
    v37 = *(float *)(v23 + 40);
    v38 = *(float *)(v23 + 44);
    v39 = *(float *)(v23 + 48) * 0.5;
    v40 = *(float *)(v23 + 52) * 0.5;
    v41 = *(float *)(v23 + 56) * 0.5;
    v42 = *(float *)(v23 + 60) * 0.5;
    v43 = *(float *)(v23 + 64) * 0.5;
    v44 = *(float *)(v23 + 68) * 0.5;
    do
    {
      if (v24)
      {
        v45 = 0;
        v46 = (unsigned __int16 *)v26;
        v47 = v16;
        result = v27;
        do
        {
          if (v47)
          {
            v48 = llroundf((float)(bswap32(*v46) >> 16) * 0.0038911);
            v49 = llroundf((float)(bswap32(v46[4]) >> 16) * 0.0038911);
          }
          else
          {
            v48 = 0;
            v49 = 0;
          }
          v50 = v30 * (float)(bswap32(v46[1]) >> 16);
          v51 = v30 * (float)(bswap32(v46[2]) >> 16);
          v52 = v30 * (float)(bswap32(v46[3]) >> 16);
          v53 = v30 * (float)(bswap32(v46[5]) >> 16);
          v54 = v30 * (float)(bswap32(v46[6]) >> 16);
          v55 = v30 * (float)(bswap32(v46[7]) >> 16);
          v56 = (float)((float)((float)(v37 * v51) + (float)(v36 * v50)) + (float)(v38 * v52)) + v31;
          v57 = (float)((float)((float)(v37 * v54) + (float)(v36 * v53)) + (float)(v38 * v55)) + v31;
          v58 = v50 + v53;
          v59 = v51 + v54;
          v60 = v52 + v55;
          v61 = (float)((float)(v32 + (float)(v58 * v39)) + (float)(v59 * v40)) + (float)(v60 * v41);
          v62 = (float)(v32 + (float)(v58 * v42)) + (float)(v59 * v43);
          if (v56 < v31)
            v63 = v31;
          else
            v63 = v56;
          if (v56 > v33)
            v63 = v33;
          v64 = v62 + (float)(v60 * v44);
          *result = llroundf(v63);
          if (v61 < v34)
            v65 = v34;
          else
            v65 = v61;
          if (v61 > v35)
            v65 = v35;
          result[1] = llroundf(v65);
          if (v57 < v31)
            v66 = v31;
          else
            v66 = v57;
          if (v57 > v33)
            v66 = v33;
          result[2] = llroundf(v66);
          v67 = v35;
          if (v64 <= v35)
          {
            v67 = v64;
            if (v64 < v34)
              v67 = v34;
          }
          result[3] = llroundf(v67);
          if (v47)
          {
            *v47 = v48;
            v47[1] = v49;
            v47 += 2;
          }
          v46 += 8;
          v45 += 2;
          result += 4;
        }
        while (v24 > v45);
      }
      v26 += v20;
      v27 += v21;
      ++v17;
    }
    while (v17 != v28);
  }
  return result;
}

uint64_t vt_Copy_b64a_TRC_Tone_Mat_TRC_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v20 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v18 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_TRC_Tone_Mat_TRC_xf422_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_TRC_Tone_Mat_TRC_xf422_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float v42;
  float v43;
  float v44;
  float v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  uint64_t v49;
  unsigned int v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  _WORD *v61;
  _WORD *v62;
  unsigned __int16 *v63;
  float v73;
  float v74;
  float v81;
  float v82;
  float v86;
  unsigned int v88;
  float v89;
  float v93;
  float v94;
  unsigned int v95;
  unsigned int v96;
  float v100;
  float v101;
  float v102;
  float v103;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  _WORD *v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;

  v8 = *(_QWORD *)(result + 28);
  v9 = *result;
  v10 = v8 * a2 / v9;
  v11 = (v8 + v8 * a2) / v9;
  if (v11 != v10)
  {
    v12 = 0;
    v13 = *(_QWORD *)(result + 20);
    v14 = v10 + *(_QWORD *)(result + 44);
    v15 = v11 - v10;
    v16 = *((_QWORD *)result + 19);
    v17 = (uint64_t *)*((_QWORD *)result + 17);
    v18 = (_QWORD *)*((_QWORD *)result + 7);
    v19 = **((_QWORD **)result + 8);
    v20 = *v17;
    v21 = v17[1];
    v22 = v17[2];
    v23 = 8191.0 / (float)*(unsigned int *)(v16 + 128);
    LOWORD(a5) = *(_WORD *)(v16 + 144);
    v24 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v16 + 146);
    v25 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v16 + 148);
    v26 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v16 + 150);
    v124 = (float)LODWORD(a8);
    LOWORD(a8) = *(_WORD *)(v16 + 152);
    v27 = (float)LODWORD(a8);
    v28 = *(float *)(v16 + 40);
    v125 = *(float *)(v16 + 36);
    v29 = *(float *)(v16 + 44);
    v123 = *(float *)(v16 + 48) * 0.5;
    v122 = *(float *)(v16 + 52) * 0.5;
    v121 = *(float *)(v16 + 56) * 0.5;
    v120 = *(float *)(v16 + 60) * 0.5;
    v119 = *(float *)(v16 + 64) * 0.5;
    v30 = *(float *)(v16 + 72);
    v118 = *(float *)(v16 + 68) * 0.5;
    v31 = *(float *)(v16 + 76);
    v32 = *(float *)(v16 + 80);
    v33 = *(float *)(v16 + 84);
    v34 = *(float *)(v16 + 88);
    v35 = *(float *)(v16 + 92);
    v36 = *(float *)(v16 + 96);
    v38 = *(float *)(v16 + 100);
    v37 = *(float *)(v16 + 104);
    v39 = v16 + 164;
    v40 = v16 + 16548;
    v41 = v16 + 32932;
    v42 = *(float *)(v16 + 108);
    v43 = *(float *)(v16 + 112);
    v44 = *(float *)(v16 + 116);
    v45 = *(float *)(v16 + 120);
    v46 = *((_QWORD *)result + 14);
    v47 = (_QWORD *)*((_QWORD *)result + 16);
    v48 = *((_QWORD *)result + 13) * a2 / v9 + *((_QWORD *)result + 15);
    v49 = *(_QWORD *)(result + 36);
    v50 = *(unsigned __int8 *)(v16 + 132);
    if (v50 >= 0x11)
      v51 = 0;
    else
      v51 = 16 - v50;
    v52 = v47[2];
    if (v52)
      result = (unsigned __int8 *)(v52 + v48 * v22 + 2 * v46);
    else
      result = 0;
    v55 = v47;
    v54 = *v47;
    v53 = v55[1];
    _ZF = v53 == 0;
    v57 = v53 + v48 * v21 + 2 * v46;
    if (_ZF)
      v57 = 0;
    v58 = v54 + v48 * v20 + 2 * v46;
    v59 = *v18 + v19 * v14 + 8 * v49;
    do
    {
      if (v13)
      {
        v60 = 0;
        v61 = result;
        v62 = (_WORD *)v58;
        v63 = (unsigned __int16 *)v59;
        do
        {
          _H5 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v23 * (float)(bswap32(v63[1]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S14, H5 }
          _H5 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v23 * (float)(bswap32(v63[2]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S18, H5 }
          _H5 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v23 * (float)(bswap32(v63[3]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S19, H5 }
          v73 = (float)((float)((float)(v43 * _S18) + (float)(v42 * _S14)) + (float)(v44 * _S19))
              + (float)(v45 * fmaxf(_S14, fmaxf(_S18, _S19)));
          v74 = 8191.0;
          if (v73 <= 8191.0)
          {
            v74 = v73;
            if (v73 < 0.0)
              v74 = 0.0;
          }
          _H5 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v23 * (float)(bswap32(v63[5]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S15, H5 }
          _H5 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v23 * (float)(bswap32(v63[6]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S20, H5 }
          _H5 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v23 * (float)(bswap32(v63[7]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S21, H5 }
          v81 = (float)((float)((float)(v43 * _S20) + (float)(v42 * _S15)) + (float)(v44 * _S21))
              + (float)(v45 * fmaxf(_S15, fmaxf(_S20, _S21)));
          v82 = 8191.0;
          if (v81 <= 8191.0)
          {
            v82 = v81;
            if (v81 < 0.0)
              v82 = 0.0;
          }
          _H22 = *(_WORD *)(v40 + 2 * llroundf(v74));
          __asm { FCVT            S22, H22 }
          _S18 = _S18 * _S22;
          v86 = _S19 * _S22;
          _S3 = (float)((float)(v34 * _S18) + (float)((float)(_S14 * _S22) * v33)) + (float)(v86 * v35);
          v88 = llroundf(fminf(fmaxf((float)((float)(v31 * _S18) + (float)((float)(_S14 * _S22) * v30)) + (float)(v86 * v32), 0.0), 8191.0));
          v89 = (float)((float)(v38 * _S18) + (float)((float)(_S14 * _S22) * v36)) + (float)(v86 * v37);
          LOWORD(_S18) = *(_WORD *)(v41 + 2 * v88);
          __asm { FCVT            S14, H18 }
          LOWORD(_S3) = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          __asm { FCVT            S18, H3 }
          LOWORD(_S3) = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          __asm { FCVT            S19, H3 }
          v93 = (float)((float)((float)(v28 * _S18) + (float)(v125 * _S14)) + (float)(v29 * _S19)) + v24;
          v94 = v26;
          if (v93 <= v26)
          {
            v94 = (float)((float)((float)(v28 * _S18) + (float)(v125 * _S14)) + (float)(v29 * _S19)) + v24;
            if (v93 < v24)
              v94 = v24;
          }
          v95 = *v63;
          v96 = v63[4];
          _H3 = *(_WORD *)(v40 + 2 * llroundf(v82));
          __asm { FCVT            S3, H3 }
          _S5 = _S15 * _S3;
          v100 = _S20 * _S3;
          v101 = _S21 * _S3;
          v102 = (float)((float)(v31 * v100) + (float)(_S5 * v30)) + (float)(v101 * v32);
          v103 = (float)((float)(v34 * v100) + (float)(_S5 * v33)) + (float)(v101 * v35);
          _S3 = (float)((float)(v38 * v100) + (float)(_S5 * v36)) + (float)(v101 * v37);
          LOWORD(_S5) = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v102, 0.0), 8191.0)));
          __asm { FCVT            S20, H5 }
          LOWORD(_S5) = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v103, 0.0), 8191.0)));
          LOWORD(_S3) = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          __asm
          {
            FCVT            S24, H5
            FCVT            S21, H3
          }
          v108 = (float)((float)((float)(v28 * _S24) + (float)(v125 * _S20)) + (float)(v29 * _S21)) + v24;
          *v62 = llroundf(v94) << v51;
          v109 = v26;
          if (v108 <= v26)
          {
            v109 = (float)((float)((float)(v28 * _S24) + (float)(v125 * _S20)) + (float)(v29 * _S21)) + v24;
            if (v108 < v24)
              v109 = v24;
          }
          v62[1] = llroundf(v109) << v51;
          v110 = _S14 + _S20;
          v111 = _S18 + _S24;
          v112 = _S19 + _S21;
          v113 = (float)((float)(v25 + (float)(v110 * v123)) + (float)(v111 * v122)) + (float)(v112 * v121);
          v114 = v27;
          if (v113 <= v27)
          {
            v114 = (float)((float)(v25 + (float)(v110 * v123)) + (float)(v111 * v122)) + (float)(v112 * v121);
            if (v113 < v124)
              v114 = v124;
          }
          v115 = (_WORD *)(v57 + 2 * v60);
          v116 = (float)((float)(v25 + (float)(v110 * v120)) + (float)(v111 * v119)) + (float)(v112 * v118);
          *v115 = llroundf(v114) << v51;
          v117 = v27;
          if (v116 <= v27)
          {
            v117 = v116;
            if (v116 < v124)
              v117 = v124;
          }
          v115[1] = llroundf(v117) << v51;
          if (v61)
          {
            *v61 = bswap32(v95) >> 16;
            v61[1] = bswap32(v96) >> 16;
            v61 += 2;
          }
          v63 += 8;
          v60 += 2;
          v62 += 2;
        }
        while (v13 > v60);
      }
      v59 += v19;
      v58 += v20;
      v57 += v21;
      result += v22;
      ++v12;
    }
    while (v12 != v15);
  }
  return result;
}

uint64_t vt_Copy_b64a_TRC_Mat_TRC_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v20 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v18 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_TRC_Mat_TRC_xf422_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_TRC_Mat_TRC_xf422_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  unsigned int v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unsigned __int16 *v61;
  _WORD *v62;
  _WORD *v63;
  float v73;
  float v74;
  float v79;
  float v80;
  unsigned int v81;
  unsigned int v82;
  float v89;
  float v91;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  unsigned __int8 *v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;

  v9 = *(_QWORD *)(result + 28);
  v10 = *result;
  v11 = v9 * a2 / v10;
  v12 = (v9 + v9 * a2) / v10;
  if (v12 != v11)
  {
    v13 = 0;
    v14 = *(_QWORD *)(result + 20);
    v15 = v11 + *(_QWORD *)(result + 44);
    v16 = v12 - v11;
    v17 = *((_QWORD *)result + 19);
    v18 = (uint64_t *)*((_QWORD *)result + 17);
    v19 = (_QWORD *)*((_QWORD *)result + 7);
    v20 = **((_QWORD **)result + 8);
    v21 = *v18;
    v22 = v18[1];
    v23 = v18[2];
    v24 = 8191.0 / (float)*(unsigned int *)(v17 + 128);
    LOWORD(a5) = *(_WORD *)(v17 + 144);
    v25 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v17 + 146);
    v26 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v17 + 148);
    v27 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v17 + 150);
    v28 = (float)LODWORD(a8);
    LOWORD(a9) = *(_WORD *)(v17 + 152);
    v29 = (float)LODWORD(a9);
    v30 = *(float *)(v17 + 36);
    v31 = *(float *)(v17 + 40);
    v32 = *(float *)(v17 + 44);
    v106 = *(float *)(v17 + 52) * 0.5;
    v107 = *(float *)(v17 + 48) * 0.5;
    v105 = *(float *)(v17 + 56) * 0.5;
    v33 = *(float *)(v17 + 60) * 0.5;
    v34 = *(float *)(v17 + 64) * 0.5;
    v35 = *(float *)(v17 + 72);
    v36 = *(float *)(v17 + 68) * 0.5;
    v37 = *(float *)(v17 + 76);
    v38 = *(float *)(v17 + 80);
    v39 = *(float *)(v17 + 84);
    v40 = *(float *)(v17 + 88);
    v41 = *(float *)(v17 + 92);
    v42 = *(float *)(v17 + 96);
    v44 = *(float *)(v17 + 100);
    v43 = *(float *)(v17 + 104);
    v45 = v17 + 164;
    v46 = v17 + 16548;
    v47 = *((_QWORD *)result + 14);
    v48 = (uint64_t *)*((_QWORD *)result + 16);
    v49 = *((_QWORD *)result + 13) * a2 / v10 + *((_QWORD *)result + 15);
    v50 = *(_QWORD *)(result + 36);
    v51 = *(unsigned __int8 *)(v17 + 132);
    if (v51 >= 0x11)
      v52 = 0;
    else
      v52 = 16 - v51;
    v53 = v48[2];
    if (v53)
      v54 = v53 + v49 * v23 + 2 * v47;
    else
      v54 = 0;
    v56 = *v48;
    v55 = *(_QWORD *)(*((_QWORD *)result + 16) + 8);
    _ZF = v55 == 0;
    result = (unsigned __int8 *)(v55 + v49 * v22 + 2 * v47);
    if (_ZF)
      result = 0;
    v58 = v56 + v49 * v21 + 2 * v47;
    v59 = *v19 + v20 * v15 + 8 * v50;
    do
    {
      if (v14)
      {
        v60 = 0;
        v61 = (unsigned __int16 *)v59;
        v62 = (_WORD *)v54;
        v63 = (_WORD *)v58;
        do
        {
          _H10 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v24 * (float)(bswap32(v61[1]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          _H19 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v24 * (float)(bswap32(v61[2]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          _H18 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v24 * (float)(bswap32(v61[3]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S18, H18 }
          v73 = (float)((float)(v37 * _S19) + (float)(_S10 * v35)) + (float)(_S18 * v38);
          v74 = (float)((float)(v40 * _S19) + (float)(_S10 * v39)) + (float)(_S18 * v41);
          _S18 = (float)((float)(v44 * _S19) + (float)(_S10 * v42)) + (float)(_S18 * v43);
          LOWORD(_S19) = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S10, H19 }
          LOWORD(_S19) = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          __asm { FCVT            S11, H19 }
          LOWORD(_S18) = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(_S18, 0.0), 8191.0)));
          __asm { FCVT            S12, H18 }
          v79 = (float)((float)((float)(v31 * _S11) + (float)(v30 * _S10)) + (float)(v32 * _S12)) + v25;
          v80 = v27;
          if (v79 <= v27)
          {
            v80 = (float)((float)((float)(v31 * _S11) + (float)(v30 * _S10)) + (float)(v32 * _S12)) + v25;
            if (v79 < v25)
              v80 = v25;
          }
          v81 = *v61;
          v82 = v61[4];
          _H18 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v24 * (float)(bswap32(v61[5]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S18, H18 }
          _H19 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v24 * (float)(bswap32(v61[6]) >> 16), 0.0), 8191.0)));
          _H14 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v24 * (float)(bswap32(v61[7]) >> 16), 0.0), 8191.0)));
          __asm
          {
            FCVT            S19, H19
            FCVT            S14, H14
          }
          v89 = (float)((float)(v37 * _S19) + (float)(_S18 * v35)) + (float)(_S14 * v38);
          _S20 = (float)((float)(v40 * _S19) + (float)(_S18 * v39)) + (float)(_S14 * v41);
          v91 = (float)((float)(v44 * _S19) + (float)(_S18 * v42)) + (float)(_S14 * v43);
          LOWORD(_S19) = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          __asm { FCVT            S14, H19 }
          LOWORD(_S19) = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(_S20, 0.0), 8191.0)));
          LOWORD(_S20) = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          __asm
          {
            FCVT            S18, H19
            FCVT            S15, H20
          }
          v95 = (float)((float)((float)(v31 * _S18) + (float)(v30 * _S14)) + (float)(v32 * _S15)) + v25;
          *v63 = llroundf(v80) << v52;
          v96 = v27;
          if (v95 <= v27)
          {
            v96 = (float)((float)((float)(v31 * _S18) + (float)(v30 * _S14)) + (float)(v32 * _S15)) + v25;
            if (v95 < v25)
              v96 = v25;
          }
          v63[1] = llroundf(v96) << v52;
          v97 = _S10 + _S14;
          v98 = _S11 + _S18;
          v99 = _S12 + _S15;
          v100 = (float)((float)(v26 + (float)(v97 * v107)) + (float)(v98 * v106))
               + (float)((float)(_S12 + _S15) * v105);
          v101 = v29;
          if (v100 <= v29)
          {
            v101 = v100;
            if (v100 < v28)
              v101 = v28;
          }
          v102 = &result[2 * v60];
          v103 = (float)((float)(v26 + (float)(v97 * v33)) + (float)(v98 * v34)) + (float)(v99 * v36);
          *(_WORD *)v102 = llroundf(v101) << v52;
          v104 = v29;
          if (v103 <= v29)
          {
            v104 = v103;
            if (v103 < v28)
              v104 = v28;
          }
          *((_WORD *)v102 + 1) = llroundf(v104) << v52;
          if (v62)
          {
            *v62 = bswap32(v81) >> 16;
            v62[1] = bswap32(v82) >> 16;
            v62 += 2;
          }
          v61 += 8;
          v60 += 2;
          v63 += 2;
        }
        while (v14 > v60);
      }
      v59 += v20;
      v58 += v21;
      result += v22;
      v54 += v23;
      ++v13;
    }
    while (v13 != v16);
  }
  return result;
}

uint64_t vt_Copy_b64a_rgb_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v20 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v18 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_rgb_xf422_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_rgb_xf422_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  unsigned int v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  unint64_t v55;
  unsigned __int16 *v56;
  _WORD *v57;
  _WORD *v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  unsigned int v64;
  unsigned int v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  _WORD *v76;
  float v77;
  float v78;

  v8 = *(_QWORD *)(result + 28);
  v9 = *result;
  v10 = v8 * a2 / v9;
  v11 = (v8 + v8 * a2) / v9;
  if (v11 != v10)
  {
    v12 = 0;
    v13 = *(_QWORD *)(result + 20);
    v14 = v10 + *(_QWORD *)(result + 44);
    v15 = v11 - v10;
    v16 = *((_QWORD *)result + 19);
    v17 = (uint64_t *)*((_QWORD *)result + 17);
    v18 = (_QWORD *)*((_QWORD *)result + 7);
    v19 = **((_QWORD **)result + 8);
    v20 = *v17;
    v21 = v17[1];
    v22 = v17[2];
    *(float *)&v23 = (float)*(unsigned int *)(v16 + 136);
    v24 = *(float *)&v23 / (float)*(unsigned int *)(v16 + 128);
    LOWORD(v23) = *(_WORD *)(v16 + 144);
    v25 = (float)v23;
    LOWORD(a5) = *(_WORD *)(v16 + 146);
    v26 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v16 + 148);
    v27 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v16 + 150);
    v28 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v16 + 152);
    v29 = (float)LODWORD(a8);
    v30 = *(float *)(v16 + 36);
    v31 = *(float *)(v16 + 40);
    v32 = *(float *)(v16 + 44);
    v33 = *(float *)(v16 + 48) * 0.5;
    v34 = *(float *)(v16 + 52) * 0.5;
    v35 = *(float *)(v16 + 56) * 0.5;
    v36 = *(float *)(v16 + 60) * 0.5;
    v37 = *(float *)(v16 + 64) * 0.5;
    v38 = *(float *)(v16 + 68) * 0.5;
    v39 = *((_QWORD *)result + 14);
    v40 = *((_QWORD *)result + 13) * a2;
    v41 = (_QWORD *)*((_QWORD *)result + 16);
    v42 = v40 / v9 + *((_QWORD *)result + 15);
    v43 = *(_QWORD *)(result + 36);
    v44 = *(unsigned __int8 *)(v16 + 132);
    if (v44 >= 0x11)
      v45 = 0;
    else
      v45 = 16 - v44;
    v46 = v41[2];
    if (v46)
      v47 = v46 + v42 * v22 + 2 * v39;
    else
      v47 = 0;
    v50 = v41;
    v48 = *v41;
    v49 = v50[1];
    v51 = v49 == 0;
    v52 = v49 + v42 * v21 + 2 * v39;
    if (v51)
      v52 = 0;
    v53 = v48 + v42 * v20 + 2 * v39;
    result = (unsigned __int8 *)(*v18 + v19 * v14 + 8 * v43);
    v54 = v45;
    do
    {
      if (v13)
      {
        v55 = 0;
        v56 = (unsigned __int16 *)result;
        v57 = (_WORD *)v47;
        v58 = (_WORD *)v53;
        do
        {
          v59 = v24 * (float)(bswap32(v56[1]) >> 16);
          v60 = v24 * (float)(bswap32(v56[2]) >> 16);
          v61 = v24 * (float)(bswap32(v56[3]) >> 16);
          v62 = (float)((float)((float)(v31 * v60) + (float)(v30 * v59)) + (float)(v32 * v61)) + v25;
          v63 = v27;
          if (v62 <= v27)
          {
            v63 = (float)((float)((float)(v31 * v60) + (float)(v30 * v59)) + (float)(v32 * v61)) + v25;
            if (v62 < v25)
              v63 = v25;
          }
          v64 = *v56;
          v65 = v56[4];
          v66 = v24 * (float)(bswap32(v56[5]) >> 16);
          v67 = v24 * (float)(bswap32(v56[6]) >> 16);
          v68 = v24 * (float)(bswap32(v56[7]) >> 16);
          v69 = (float)((float)((float)(v31 * v67) + (float)(v30 * v66)) + (float)(v32 * v68)) + v25;
          *v58 = llroundf(v63) << v54;
          v70 = v27;
          if (v69 <= v27)
          {
            v70 = (float)((float)((float)(v31 * v67) + (float)(v30 * v66)) + (float)(v32 * v68)) + v25;
            if (v69 < v25)
              v70 = v25;
          }
          v58[1] = llroundf(v70) << v54;
          v71 = v59 + v66;
          v72 = v60 + v67;
          v73 = v61 + v68;
          v74 = (float)((float)(v26 + (float)(v71 * v33)) + (float)(v72 * v34)) + (float)(v73 * v35);
          v75 = v29;
          if (v74 <= v29)
          {
            v75 = (float)((float)(v26 + (float)(v71 * v33)) + (float)(v72 * v34)) + (float)(v73 * v35);
            if (v74 < v28)
              v75 = v28;
          }
          v76 = (_WORD *)(v52 + 2 * v55);
          v77 = (float)((float)(v26 + (float)(v71 * v36)) + (float)(v72 * v37)) + (float)(v73 * v38);
          *v76 = llroundf(v75) << v54;
          v78 = v29;
          if (v77 <= v29)
          {
            v78 = v77;
            if (v77 < v28)
              v78 = v28;
          }
          v76[1] = llroundf(v78) << v54;
          if (v57)
          {
            *v57 = bswap32(v64) >> 16;
            v57[1] = bswap32(v65) >> 16;
            v57 += 2;
          }
          v56 += 8;
          v55 += 2;
          v58 += 2;
        }
        while (v13 > v55);
      }
      result += v19;
      v53 += v20;
      v52 += v21;
      v47 += v22;
      ++v12;
    }
    while (v12 != v15);
  }
  return result;
}

uint64_t vt_Copy_b64a_TRC_Tone_Mat_TRC_v216(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_TRC_Tone_Mat_TRC_v216_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_TRC_Tone_Mat_TRC_v216_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  _WORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _WORD *v28;
  uint64_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  uint64_t v48;
  uint64_t v49;
  float v50;
  float v51;
  float v52;
  float v53;
  unint64_t v54;
  _WORD *v55;
  _WORD *v56;
  unsigned __int16 *v57;
  float v68;
  float v69;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v85;
  float v86;
  float v87;
  float v89;
  float v91;
  float v92;
  float v95;
  float v96;
  unsigned int v102;
  float v103;
  float v105;
  float v106;
  float v107;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  __int16 v115;
  float v116;
  unsigned int v117;
  unsigned int v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;

  v9 = *(_QWORD *)(result + 28);
  v10 = *result;
  v11 = v9 * a2 / v10;
  v12 = *((_QWORD *)result + 14);
  v13 = (_QWORD *)*((_QWORD *)result + 16);
  v14 = *((_QWORD *)result + 13) * a2 / v10 + *((_QWORD *)result + 15);
  v15 = (uint64_t *)*((_QWORD *)result + 17);
  v16 = (v9 + v9 * a2) / v10;
  v17 = (_WORD *)v13[1];
  if (v17)
    v17 = (_WORD *)((char *)v17 + 2 * v12 + v15[1] * v14);
  if (v16 != v11)
  {
    v18 = 0;
    v19 = *(_QWORD *)(result + 44);
    v20 = v11 + v19;
    v21 = **((_QWORD **)result + 8);
    v22 = *v15;
    v23 = *v13 + v22 * v14;
    v24 = *((_QWORD *)result + 19);
    v25 = *(_QWORD *)(result + 20);
    v26 = v16 + v19;
    v27 = **((_QWORD **)result + 7) + v21 * v20 + 8 * *(_QWORD *)(result + 36);
    v28 = (_WORD *)(v23 + 2 * v12);
    v29 = v26 - v20;
    LOWORD(a5) = *(_WORD *)(v24 + 144);
    LOWORD(a6) = *(_WORD *)(v24 + 146);
    LOWORD(a7) = *(_WORD *)(v24 + 148);
    LOWORD(a8) = *(_WORD *)(v24 + 150);
    LOWORD(a9) = *(_WORD *)(v24 + 152);
    v30 = 8191.0 / (float)*(unsigned int *)(v24 + 128);
    v31 = (float)LODWORD(a5);
    v32 = (float)LODWORD(a6);
    v33 = (float)LODWORD(a7);
    v34 = (float)LODWORD(a8);
    v35 = (float)LODWORD(a9);
    v36 = *(float *)(v24 + 36);
    v37 = *(float *)(v24 + 40);
    v38 = *(float *)(v24 + 44);
    v128 = *(float *)(v24 + 48) * 0.5;
    v127 = *(float *)(v24 + 52) * 0.5;
    v126 = *(float *)(v24 + 56) * 0.5;
    v125 = *(float *)(v24 + 60) * 0.5;
    v124 = *(float *)(v24 + 64) * 0.5;
    v39 = *(float *)(v24 + 72);
    v123 = *(float *)(v24 + 68) * 0.5;
    v40 = *(float *)(v24 + 76);
    v41 = *(float *)(v24 + 80);
    v42 = *(float *)(v24 + 84);
    v43 = *(float *)(v24 + 88);
    v44 = *(float *)(v24 + 92);
    v45 = *(float *)(v24 + 96);
    v47 = *(float *)(v24 + 100);
    v46 = *(float *)(v24 + 104);
    v48 = v24 + 164;
    v49 = v24 + 16548;
    result = (unsigned __int8 *)(v24 + 32932);
    v50 = *(float *)(v24 + 108);
    v51 = *(float *)(v24 + 112);
    v52 = *(float *)(v24 + 116);
    v53 = *(float *)(v24 + 120);
    do
    {
      if (v25)
      {
        v54 = 0;
        v55 = v17;
        v56 = v28;
        v57 = (unsigned __int16 *)v27;
        do
        {
          _H0 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v57[1]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S14, H0 }
          _H0 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v57[2]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S15, H0 }
          _H0 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v57[3]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S18, H0 }
          v68 = (float)((float)((float)(v51 * _S15) + (float)(v50 * _S14)) + (float)(v52 * _S18))
              + (float)(v53 * fmaxf(_S14, fmaxf(_S15, _S18)));
          v69 = 8191.0;
          if (v68 <= 8191.0)
          {
            v69 = v68;
            if (v68 < 0.0)
              v69 = 0.0;
          }
          _H0 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v57[5]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S19, H0 }
          _H0 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v57[6]) >> 16), 0.0), 8191.0)));
          _H21 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v57[7]) >> 16), 0.0), 8191.0)));
          __asm
          {
            FCVT            S22, H0
            FCVT            S21, H21
          }
          _H0 = *(_WORD *)(v49 + 2 * llroundf(v69));
          __asm { FCVT            S0, H0 }
          v78 = _S14 * _S0;
          v79 = _S15 * _S0;
          v80 = _S18 * _S0;
          v81 = (float)((float)((float)(v51 * _S22) + (float)(v50 * _S19)) + (float)(v52 * _S21))
              + (float)(v53 * fmaxf(_S19, fmaxf(_S22, _S21)));
          v82 = 8191.0;
          if (v81 <= 8191.0)
          {
            v82 = v81;
            if (v81 < 0.0)
              v82 = 0.0;
          }
          _H0 = *(_WORD *)(v49 + 2 * llroundf(v82));
          __asm { FCVT            S0, H0 }
          v85 = _S19 * _S0;
          v86 = _S22 * _S0;
          v87 = _S21 * _S0;
          _S21 = (float)((float)(v40 * v79) + (float)(v78 * v39)) + (float)(v80 * v41);
          v89 = (float)((float)(v43 * v79) + (float)(v78 * v42)) + (float)(v80 * v44);
          _S18 = (float)((float)(v47 * v79) + (float)(v78 * v45)) + (float)(v80 * v46);
          v91 = (float)(v40 * v86) + (float)(v85 * v39);
          v92 = (float)(v43 * v86) + (float)(v85 * v42);
          _S19 = (float)(v47 * v86) + (float)(v85 * v45);
          _S20 = v91 + (float)(v87 * v41);
          v95 = v92 + (float)(v87 * v44);
          v96 = _S19 + (float)(v87 * v46);
          LOWORD(_S19) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(_S21, 0.0), 8191.0))];
          __asm { FCVT            S19, H19 }
          LOWORD(_S21) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0))];
          LOWORD(_S18) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(_S18, 0.0), 8191.0))];
          __asm
          {
            FCVT            S21, H21
            FCVT            S15, H18
          }
          LOWORD(_S18) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(_S20, 0.0), 8191.0))];
          __asm { FCVT            S18, H18 }
          LOWORD(_S20) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v95, 0.0), 8191.0))];
          __asm { FCVT            S14, H20 }
          v102 = llroundf(fminf(fmaxf(v96, 0.0), 8191.0));
          v103 = (float)(v37 * _S21) + (float)(v36 * _S19);
          _S19 = _S19 + _S18;
          v105 = _S21 + _S14;
          v106 = (float)(v32 + (float)(_S19 * v128)) + (float)(v105 * v127);
          v107 = (float)(v32 + (float)(_S19 * v125)) + (float)(v105 * v124);
          LOWORD(_S19) = *(_WORD *)&result[2 * v102];
          __asm { FCVT            S19, H19 }
          v109 = v103 + (float)(v38 * _S15);
          v110 = _S15 + _S19;
          v111 = v106 + (float)((float)(_S15 + _S19) * v126);
          v112 = v107 + (float)(v110 * v123);
          if (v111 < v31)
            v113 = v31;
          else
            v113 = v111;
          v114 = v109 + v31;
          if (v111 > v33)
            v113 = v33;
          v115 = llroundf(v113);
          if (v114 < v34)
            v116 = v34;
          else
            v116 = v114;
          v117 = *v57;
          v118 = v57[4];
          *v56 = v115;
          if (v114 <= v35)
            v119 = v116;
          else
            v119 = v35;
          v56[1] = llroundf(v119);
          v120 = v33;
          if (v112 <= v33)
          {
            v120 = v112;
            if (v112 < v31)
              v120 = v31;
          }
          v121 = (float)((float)(v37 * _S14) + (float)(v36 * _S18)) + (float)(v38 * _S19);
          v56[2] = llroundf(v120);
          v122 = v35;
          if ((float)(v121 + v31) <= v35)
          {
            v122 = v121 + v31;
            if ((float)(v121 + v31) < v34)
              v122 = v34;
          }
          v56[3] = llroundf(v122);
          if (v55)
          {
            *v55 = bswap32(v117) >> 16;
            v55[1] = bswap32(v118) >> 16;
            v55 += 2;
          }
          v57 += 8;
          v54 += 2;
          v56 += 4;
        }
        while (v25 > v54);
      }
      v27 += v21;
      v28 = (_WORD *)((char *)v28 + v22);
      ++v18;
    }
    while (v18 != v29);
  }
  return result;
}

uint64_t vt_Copy_b64a_TRC_Mat_TRC_v216(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_TRC_Mat_TRC_v216_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_TRC_Mat_TRC_v216_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  _WORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _WORD *v28;
  uint64_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  uint64_t v50;
  uint64_t v51;
  float v52;
  float v53;
  unsigned __int16 *v54;
  _WORD *v55;
  _WORD *v56;
  float v75;
  float v76;
  float v77;
  float v80;
  float v81;
  unsigned int v87;
  float v88;
  float v89;
  float v91;
  float v92;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  __int16 v100;
  float v101;
  unsigned int v102;
  unsigned int v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;

  v9 = *(_QWORD *)(result + 28);
  v10 = *result;
  v11 = v9 * a2 / v10;
  v12 = *((_QWORD *)result + 14);
  v13 = (_QWORD *)*((_QWORD *)result + 16);
  v14 = *((_QWORD *)result + 13) * a2 / v10 + *((_QWORD *)result + 15);
  v15 = (uint64_t *)*((_QWORD *)result + 17);
  v16 = (v9 + v9 * a2) / v10;
  v17 = (_WORD *)v13[1];
  if (v17)
    v17 = (_WORD *)((char *)v17 + 2 * v12 + v15[1] * v14);
  if (v16 != v11)
  {
    v18 = 0;
    v19 = *(_QWORD *)(result + 44);
    v20 = v11 + v19;
    v21 = **((_QWORD **)result + 8);
    v22 = *v15;
    v23 = *v13 + v22 * v14;
    v24 = *((_QWORD *)result + 19);
    v25 = *(_QWORD *)(result + 20);
    v26 = v16 + v19;
    v27 = **((_QWORD **)result + 7) + v21 * v20 + 8 * *(_QWORD *)(result + 36);
    v28 = (_WORD *)(v23 + 2 * v12);
    v29 = v26 - v20;
    LOWORD(a5) = *(_WORD *)(v24 + 144);
    LOWORD(a6) = *(_WORD *)(v24 + 146);
    LOWORD(a7) = *(_WORD *)(v24 + 148);
    LOWORD(a8) = *(_WORD *)(v24 + 150);
    LOWORD(a9) = *(_WORD *)(v24 + 152);
    v30 = 8191.0 / (float)*(unsigned int *)(v24 + 128);
    v31 = (float)LODWORD(a5);
    v32 = (float)LODWORD(a6);
    v33 = (float)LODWORD(a7);
    v34 = (float)LODWORD(a8);
    v35 = (float)LODWORD(a9);
    v36 = *(float *)(v24 + 36);
    v37 = *(float *)(v24 + 40);
    v38 = *(float *)(v24 + 44);
    v107 = *(float *)(v24 + 52) * 0.5;
    v108 = *(float *)(v24 + 48) * 0.5;
    v39 = *(float *)(v24 + 56) * 0.5;
    v40 = *(float *)(v24 + 60) * 0.5;
    v41 = *(float *)(v24 + 64) * 0.5;
    v42 = *(float *)(v24 + 72);
    v43 = *(float *)(v24 + 68) * 0.5;
    v44 = *(float *)(v24 + 76);
    v45 = *(float *)(v24 + 80);
    v46 = *(float *)(v24 + 84);
    v47 = *(float *)(v24 + 88);
    v48 = *(float *)(v24 + 92);
    v49 = *(float *)(v24 + 96);
    v50 = v24 + 164;
    v51 = v24 + 16548;
    v52 = *(float *)(v24 + 100);
    v53 = *(float *)(v24 + 104);
    do
    {
      if (v25)
      {
        result = 0;
        v54 = (unsigned __int16 *)v27;
        v55 = v17;
        v56 = v28;
        do
        {
          _H10 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v54[1]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          _H11 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v54[2]) >> 16), 0.0), 8191.0)));
          _H12 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v54[3]) >> 16), 0.0), 8191.0)));
          __asm
          {
            FCVT            S11, H11
            FCVT            S12, H12
          }
          _H13 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v54[5]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S13, H13 }
          _H14 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v54[6]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S14, H14 }
          _H15 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v30 * (float)(bswap32(v54[7]) >> 16), 0.0), 8191.0)));
          _S18 = (float)((float)(v44 * _S11) + (float)(_S10 * v42)) + (float)(_S12 * v45);
          _S19 = (float)((float)(v47 * _S11) + (float)(_S10 * v46)) + (float)(_S12 * v48);
          _S10 = (float)((float)(v52 * _S11) + (float)(_S10 * v49)) + (float)(_S12 * v53);
          v75 = (float)(v44 * _S14) + (float)(_S13 * v42);
          v76 = (float)(v47 * _S14) + (float)(_S13 * v46);
          v77 = (float)(v52 * _S14) + (float)(_S13 * v49);
          __asm { FCVT            S14, H15 }
          _S11 = v75 + (float)(_S14 * v45);
          v80 = v76 + (float)(_S14 * v48);
          v81 = v77 + (float)(_S14 * v53);
          LOWORD(_S18) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(_S18, 0.0), 8191.0)));
          __asm { FCVT            S18, H18 }
          LOWORD(_S19) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0)));
          LOWORD(_S10) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(_S10, 0.0), 8191.0)));
          __asm
          {
            FCVT            S19, H19
            FCVT            S14, H10
          }
          LOWORD(_S10) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(_S11, 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          LOWORD(_S11) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          v87 = llroundf(fminf(fmaxf(v81, 0.0), 8191.0));
          v88 = (float)(v37 * _S19) + (float)(v36 * _S18);
          v89 = _S18 + _S10;
          _S19 = _S19 + _S11;
          v91 = (float)(v32 + (float)(v89 * v108)) + (float)(_S19 * v107);
          v92 = (float)(v32 + (float)(v89 * v40)) + (float)(_S19 * v41);
          LOWORD(_S19) = *(_WORD *)(v51 + 2 * v87);
          __asm { FCVT            S12, H19 }
          v94 = v88 + (float)(v38 * _S14);
          v95 = _S14 + _S12;
          v96 = v91 + (float)((float)(_S14 + _S12) * v39);
          v97 = v92 + (float)(v95 * v43);
          if (v96 < v31)
            v98 = v31;
          else
            v98 = v96;
          v99 = v94 + v31;
          if (v96 > v33)
            v98 = v33;
          v100 = llroundf(v98);
          if (v99 < v34)
            v101 = v34;
          else
            v101 = v99;
          v102 = *v54;
          v103 = v54[4];
          *v56 = v100;
          if (v99 > v35)
            v101 = v35;
          v56[1] = llroundf(v101);
          v104 = v33;
          if (v97 <= v33)
          {
            v104 = v97;
            if (v97 < v31)
              v104 = v31;
          }
          v105 = (float)((float)((float)(v37 * _S11) + (float)(v36 * _S10)) + (float)(v38 * _S12)) + v31;
          v56[2] = llroundf(v104);
          v106 = v35;
          if (v105 <= v35)
          {
            v106 = v105;
            if (v105 < v34)
              v106 = v34;
          }
          v56[3] = llroundf(v106);
          if (v55)
          {
            *v55 = bswap32(v102) >> 16;
            v55[1] = bswap32(v103) >> 16;
            v55 += 2;
          }
          v54 += 8;
          result += 2;
          v56 += 4;
        }
        while (v25 > (unint64_t)result);
      }
      v27 += v21;
      v28 = (_WORD *)((char *)v28 + v22);
      ++v18;
    }
    while (v18 != v29);
  }
  return result;
}

uint64_t vt_Copy_b64a_rgb_v216(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_rgb_v216_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_rgb_v216_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  _WORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  unsigned int v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  unint64_t v45;
  unsigned __int16 *v46;
  _WORD *v47;
  unsigned int v48;
  float v49;
  float v50;
  float v51;
  unsigned int v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;

  v8 = *(_QWORD *)(result + 28);
  v9 = *result;
  v10 = v8 * a2 / v9;
  v11 = *((_QWORD *)result + 14);
  v12 = (_QWORD *)*((_QWORD *)result + 16);
  v13 = *((_QWORD *)result + 13) * a2 / v9 + *((_QWORD *)result + 15);
  v14 = (uint64_t *)*((_QWORD *)result + 17);
  v15 = (v8 + v8 * a2) / v9;
  v16 = (_WORD *)v12[1];
  if (v16)
    v16 = (_WORD *)((char *)v16 + 2 * v11 + v14[1] * v13);
  if (v15 != v10)
  {
    v17 = 0;
    v18 = *(_QWORD *)(result + 44);
    v19 = v10 + v18;
    v20 = **((_QWORD **)result + 8);
    v21 = *v14;
    v22 = *v12 + v21 * v13;
    v23 = *((_QWORD *)result + 19);
    v24 = *(_QWORD *)(result + 20);
    v25 = v15 + v18;
    v26 = **((_QWORD **)result + 7) + v20 * v19 + 8 * *(_QWORD *)(result + 36);
    v27 = (unsigned __int8 *)(v22 + 2 * v11);
    v28 = v25 - v19;
    *(float *)&v29 = (float)*(unsigned int *)(v23 + 136);
    v30 = *(float *)&v29 / (float)*(unsigned int *)(v23 + 128);
    LOWORD(v29) = *(_WORD *)(v23 + 144);
    v31 = (float)v29;
    LOWORD(a5) = *(_WORD *)(v23 + 146);
    v32 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v23 + 148);
    v33 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v23 + 150);
    v34 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v23 + 152);
    v35 = (float)LODWORD(a8);
    v36 = *(float *)(v23 + 36);
    v37 = *(float *)(v23 + 40);
    v38 = *(float *)(v23 + 44);
    v39 = *(float *)(v23 + 48) * 0.5;
    v40 = *(float *)(v23 + 52) * 0.5;
    v41 = *(float *)(v23 + 56) * 0.5;
    v42 = *(float *)(v23 + 60) * 0.5;
    v43 = *(float *)(v23 + 64) * 0.5;
    v44 = *(float *)(v23 + 68) * 0.5;
    do
    {
      if (v24)
      {
        v45 = 0;
        v46 = (unsigned __int16 *)v26;
        v47 = v16;
        result = v27;
        do
        {
          v48 = *v46;
          v49 = v30 * (float)(bswap32(v46[1]) >> 16);
          v50 = v30 * (float)(bswap32(v46[2]) >> 16);
          v51 = v30 * (float)(bswap32(v46[3]) >> 16);
          v52 = v46[4];
          v53 = v30 * (float)(bswap32(v46[5]) >> 16);
          v54 = v30 * (float)(bswap32(v46[6]) >> 16);
          v55 = v30 * (float)(bswap32(v46[7]) >> 16);
          v56 = (float)((float)((float)(v37 * v50) + (float)(v36 * v49)) + (float)(v38 * v51)) + v31;
          v57 = v49 + v53;
          v58 = v50 + v54;
          v59 = v51 + v55;
          v60 = (float)((float)(v32 + (float)(v57 * v39)) + (float)(v58 * v40)) + (float)(v59 * v41);
          v61 = (float)((float)(v32 + (float)(v57 * v42)) + (float)(v58 * v43)) + (float)(v59 * v44);
          if (v60 < v31)
            v62 = v31;
          else
            v62 = v60;
          if (v60 > v33)
            v62 = v33;
          *(_WORD *)result = llroundf(v62);
          if (v56 < v34)
            v63 = v34;
          else
            v63 = v56;
          if (v56 > v35)
            v63 = v35;
          *((_WORD *)result + 1) = llroundf(v63);
          v64 = v33;
          if (v61 <= v33)
          {
            v64 = v61;
            if (v61 < v31)
              v64 = v31;
          }
          v65 = (float)((float)((float)(v37 * v54) + (float)(v36 * v53)) + (float)(v38 * v55)) + v31;
          *((_WORD *)result + 2) = llroundf(v64);
          v66 = v35;
          if (v65 <= v35)
          {
            v66 = v65;
            if (v65 < v34)
              v66 = v34;
          }
          *((_WORD *)result + 3) = llroundf(v66);
          if (v47)
          {
            *v47 = bswap32(v48) >> 16;
            v47[1] = bswap32(v52) >> 16;
            v47 += 2;
          }
          v46 += 8;
          v45 += 2;
          result += 8;
        }
        while (v24 > v45);
      }
      v26 += v20;
      v27 += v21;
      ++v17;
    }
    while (v17 != v28);
  }
  return result;
}

uint64_t vt_Copy_b64a_TRC_Tone_Mat_TRC_444vf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_TRC_Tone_Mat_TRC_444vf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_TRC_Tone_Mat_TRC_444vf_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  float v42;
  float v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _BYTE *v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  _BYTE *v58;
  _BYTE *v59;
  unsigned __int16 *v60;
  float v70;
  float v71;
  float v75;
  float v76;
  float v77;
  float v78;
  float v83;
  float v84;
  unsigned int v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;

  v2 = *(_QWORD *)(result + 28);
  v3 = *result;
  v4 = v2 * a2 / v3;
  v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    v6 = 0;
    v7 = *(_QWORD *)(result + 20);
    v8 = v4 + *(_QWORD *)(result + 44);
    v9 = v5 - v4;
    v10 = *((_QWORD *)result + 19);
    v11 = (uint64_t *)*((_QWORD *)result + 17);
    v12 = (_QWORD *)*((_QWORD *)result + 7);
    v13 = **((_QWORD **)result + 8);
    v14 = *v11;
    v15 = v11[1];
    v16 = v11[2];
    *(float *)&v17 = (float)*(unsigned int *)(v10 + 128);
    v18 = 8191.0 / *(float *)&v17;
    LOWORD(v17) = *(_WORD *)(v10 + 144);
    v19 = (float)v17;
    LOWORD(v17) = *(_WORD *)(v10 + 146);
    v20 = (float)v17;
    LOWORD(v17) = *(_WORD *)(v10 + 148);
    v21 = (float)v17;
    LOWORD(v17) = *(_WORD *)(v10 + 150);
    v22 = (float)v17;
    LOWORD(v17) = *(_WORD *)(v10 + 152);
    v23 = (float)v17;
    v24 = *(float *)(v10 + 36);
    v25 = *(float *)(v10 + 40);
    v26 = *(float *)(v10 + 44);
    v94 = *(float *)(v10 + 52);
    v95 = *(float *)(v10 + 48);
    v92 = *(float *)(v10 + 60);
    v93 = *(float *)(v10 + 56);
    v27 = *(float *)(v10 + 68);
    v91 = *(float *)(v10 + 64);
    v28 = *(float *)(v10 + 72);
    v29 = *(float *)(v10 + 76);
    v30 = *(float *)(v10 + 80);
    v31 = *(float *)(v10 + 84);
    v32 = *(float *)(v10 + 88);
    v33 = *(float *)(v10 + 92);
    v34 = *(float *)(v10 + 96);
    v35 = *(float *)(v10 + 100);
    v36 = *(float *)(v10 + 104);
    v37 = *(float *)(v10 + 108);
    v38 = v10 + 164;
    v39 = v10 + 16548;
    v40 = v10 + 32932;
    v41 = *(float *)(v10 + 112);
    v42 = *(float *)(v10 + 116);
    v43 = *(float *)(v10 + 120);
    v44 = *((_QWORD *)result + 14);
    v45 = (_QWORD *)*((_QWORD *)result + 16);
    v46 = *((_QWORD *)result + 13) * a2 / v3 + *((_QWORD *)result + 15);
    v47 = *(_QWORD *)(result + 36);
    v48 = v45[2];
    if (v48)
      result = (unsigned __int8 *)(v48 + v46 * v16 + v44);
    else
      result = 0;
    v51 = v45;
    v50 = *v45;
    v49 = v51[1];
    _ZF = v49 == 0;
    v53 = (_BYTE *)(v49 + v46 * v15 + v44);
    if (_ZF)
      v53 = 0;
    v54 = (_BYTE *)(v50 + v46 * v14 + v44);
    v55 = *v12 + v13 * v8 + 8 * v47;
    do
    {
      if (v7)
      {
        v56 = v7;
        v57 = result;
        v58 = v53;
        v59 = v54;
        v60 = (unsigned __int16 *)v55;
        do
        {
          _H0 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v18 * (float)(bswap32(v60[1]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S18, H0 }
          _H0 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v18 * (float)(bswap32(v60[2]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S19, H0 }
          _H0 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v18 * (float)(bswap32(v60[3]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S15, H0 }
          v70 = (float)((float)((float)(v41 * _S19) + (float)(v37 * _S18)) + (float)(v42 * _S15))
              + (float)(v43 * fmaxf(_S18, fmaxf(_S19, _S15)));
          v71 = 8191.0;
          if (v70 <= 8191.0)
          {
            v71 = v70;
            if (v70 < 0.0)
              v71 = 0.0;
          }
          _H0 = *(_WORD *)(v39 + 2 * llroundf(v71));
          __asm { FCVT            S0, H0 }
          _S6 = _S18 * _S0;
          v75 = _S19 * _S0;
          v76 = _S15 * _S0;
          v77 = (float)((float)(v29 * v75) + (float)(_S6 * v28)) + (float)(v76 * v30);
          v78 = (float)((float)(v32 * v75) + (float)(_S6 * v31)) + (float)(v76 * v33);
          _S0 = (float)((float)(v35 * v75) + (float)(_S6 * v34)) + (float)(v76 * v36);
          LOWORD(_S6) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          __asm { FCVT            S15, H6 }
          LOWORD(_S6) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          __asm { FCVT            S18, H6 }
          LOWORD(_S0) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          __asm { FCVT            S19, H0 }
          v83 = (float)((float)((float)(v25 * _S18) + (float)(v24 * _S15)) + (float)(v26 * _S19)) + v19;
          v84 = v21;
          if (v83 <= v21)
          {
            v84 = (float)((float)((float)(v25 * _S18) + (float)(v24 * _S15)) + (float)(v26 * _S19)) + v19;
            if (v83 < v19)
              v84 = v19;
          }
          v85 = *v60;
          *v59++ = llroundf(v84);
          if (v58)
          {
            v86 = (float)((float)(v20 + (float)(_S15 * v95)) + (float)(_S18 * v94)) + (float)(_S19 * v93);
            v87 = v23;
            if (v86 <= v23)
            {
              v87 = (float)((float)(v20 + (float)(_S15 * v95)) + (float)(_S18 * v94)) + (float)(_S19 * v93);
              if (v86 < v22)
                v87 = v22;
            }
            v88 = (float)(v20 + (float)(_S15 * v92)) + (float)(_S18 * v91);
            v89 = v88 + (float)(_S19 * v27);
            *v58 = llroundf(v87);
            v90 = v23;
            if (v89 <= v23)
            {
              v90 = v88 + (float)(_S19 * v27);
              if (v89 < v22)
                v90 = v22;
            }
            v58[1] = llroundf(v90);
            v58 += 2;
          }
          if (v57)
            *v57++ = llroundf((float)(bswap32(v85) >> 16) * 0.0038911);
          v60 += 4;
          --v56;
        }
        while (v56);
      }
      v55 += v13;
      v54 += v14;
      v53 += v15;
      result += v16;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_b64a_TRC_Mat_TRC_444vf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_TRC_Mat_TRC_444vf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_TRC_Mat_TRC_444vf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int16 *v62;
  _BYTE *v63;
  _BYTE *v64;
  _BYTE *v65;
  float v75;
  float v76;
  float v81;
  float v82;
  unsigned int v83;
  float v84;
  float v85;
  float v86;
  float v87;

  v9 = *(_QWORD *)(result + 28);
  v10 = *result;
  v11 = v9 * a2 / v10;
  v12 = (v9 + v9 * a2) / v10;
  if (v12 != v11)
  {
    v13 = 0;
    v14 = *(_QWORD *)(result + 20);
    v15 = v11 + *(_QWORD *)(result + 44);
    v16 = v12 - v11;
    v17 = *((_QWORD *)result + 19);
    v18 = (uint64_t *)*((_QWORD *)result + 17);
    v19 = (_QWORD *)*((_QWORD *)result + 7);
    v20 = **((_QWORD **)result + 8);
    v21 = *v18;
    v22 = v18[1];
    v23 = v18[2];
    v24 = 8191.0 / (float)*(unsigned int *)(v17 + 128);
    LOWORD(a5) = *(_WORD *)(v17 + 144);
    v25 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v17 + 146);
    v26 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v17 + 148);
    v27 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v17 + 150);
    v28 = (float)LODWORD(a8);
    LOWORD(a9) = *(_WORD *)(v17 + 152);
    v29 = (float)LODWORD(a9);
    v30 = *(float *)(v17 + 36);
    v31 = *(float *)(v17 + 40);
    v32 = *(float *)(v17 + 44);
    v33 = *(float *)(v17 + 48);
    v34 = *(float *)(v17 + 52);
    v35 = *(float *)(v17 + 56);
    v36 = *(float *)(v17 + 60);
    v37 = *(float *)(v17 + 64);
    v38 = *(float *)(v17 + 68);
    v39 = *(float *)(v17 + 72);
    v40 = *(float *)(v17 + 76);
    v41 = *(float *)(v17 + 80);
    v42 = *(float *)(v17 + 84);
    v43 = *(float *)(v17 + 88);
    v44 = *(float *)(v17 + 92);
    v45 = *(float *)(v17 + 96);
    v47 = *(float *)(v17 + 100);
    v46 = *(float *)(v17 + 104);
    v48 = v17 + 164;
    v49 = v17 + 16548;
    v50 = *((_QWORD *)result + 14);
    v51 = (uint64_t *)*((_QWORD *)result + 16);
    v52 = *((_QWORD *)result + 13) * a2 / v10 + *((_QWORD *)result + 15);
    v53 = *(_QWORD *)(result + 36);
    v54 = v51[2];
    if (v54)
      v55 = (_BYTE *)(v54 + v52 * v23 + v50);
    else
      v55 = 0;
    v57 = *v51;
    v56 = *(_QWORD *)(*((_QWORD *)result + 16) + 8);
    _ZF = v56 == 0;
    result = (unsigned __int8 *)(v56 + v52 * v22 + v50);
    if (_ZF)
      result = 0;
    v59 = (_BYTE *)(v57 + v52 * v21 + v50);
    v60 = *v19 + v20 * v15 + 8 * v53;
    do
    {
      if (v14)
      {
        v61 = v14;
        v62 = (unsigned __int16 *)v60;
        v63 = v55;
        v64 = result;
        v65 = v59;
        do
        {
          _H13 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v24 * (float)(bswap32(v62[1]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S13, H13 }
          _H12 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v24 * (float)(bswap32(v62[2]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          _H11 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v24 * (float)(bswap32(v62[3]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          v75 = (float)((float)(v40 * _S12) + (float)(_S13 * v39)) + (float)(_S11 * v41);
          v76 = (float)((float)(v43 * _S12) + (float)(_S13 * v42)) + (float)(_S11 * v44);
          _S13 = (float)((float)(v47 * _S12) + (float)(_S13 * v45)) + (float)(_S11 * v46);
          LOWORD(_S11) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          LOWORD(_S12) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          LOWORD(_S13) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(_S13, 0.0), 8191.0)));
          __asm { FCVT            S13, H13 }
          v81 = (float)((float)((float)(v31 * _S12) + (float)(v30 * _S11)) + (float)(v32 * _S13)) + v25;
          v82 = v27;
          if (v81 <= v27)
          {
            v82 = (float)((float)((float)(v31 * _S12) + (float)(v30 * _S11)) + (float)(v32 * _S13)) + v25;
            if (v81 < v25)
              v82 = v25;
          }
          v83 = *v62;
          *v65++ = llroundf(v82);
          if (v64)
          {
            v84 = (float)((float)(v26 + (float)(_S11 * v33)) + (float)(_S12 * v34)) + (float)(_S13 * v35);
            v85 = v29;
            if (v84 <= v29)
            {
              v85 = (float)((float)(v26 + (float)(_S11 * v33)) + (float)(_S12 * v34)) + (float)(_S13 * v35);
              if (v84 < v28)
                v85 = v28;
            }
            v86 = (float)((float)(v26 + (float)(_S11 * v36)) + (float)(_S12 * v37)) + (float)(_S13 * v38);
            *v64 = llroundf(v85);
            v87 = v29;
            if (v86 <= v29)
            {
              v87 = v86;
              if (v86 < v28)
                v87 = v28;
            }
            v64[1] = llroundf(v87);
            v64 += 2;
          }
          if (v63)
            *v63++ = llroundf((float)(bswap32(v83) >> 16) * 0.0038911);
          v62 += 4;
          --v61;
        }
        while (v61);
      }
      v60 += v20;
      v59 += v21;
      result += v22;
      v55 += v23;
      ++v13;
    }
    while (v13 != v16);
  }
  return result;
}

uint64_t vt_Copy_b64a_rgb_444vf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_rgb_444vf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_rgb_444vf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  BOOL v49;
  _BYTE *v50;
  _BYTE *v51;
  uint64_t v52;
  unsigned __int16 *v53;
  _BYTE *v54;
  _BYTE *v55;
  _BYTE *v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  unsigned int v62;
  float v63;
  float v64;
  float v65;
  float v66;

  v8 = *(_QWORD *)(result + 28);
  v9 = *result;
  v10 = v8 * a2 / v9;
  v11 = (v8 + v8 * a2) / v9;
  if (v11 != v10)
  {
    v12 = 0;
    v13 = *(_QWORD *)(result + 20);
    v14 = v10 + *(_QWORD *)(result + 44);
    v15 = v11 - v10;
    v16 = *((_QWORD *)result + 19);
    v17 = (uint64_t *)*((_QWORD *)result + 17);
    v18 = (_QWORD *)*((_QWORD *)result + 7);
    v19 = **((_QWORD **)result + 8);
    v20 = *v17;
    v21 = v17[1];
    v22 = v17[2];
    *(float *)&v23 = (float)*(unsigned int *)(v16 + 136);
    v24 = *(float *)&v23 / (float)*(unsigned int *)(v16 + 128);
    LOWORD(v23) = *(_WORD *)(v16 + 144);
    v25 = (float)v23;
    LOWORD(a5) = *(_WORD *)(v16 + 146);
    v26 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v16 + 148);
    v27 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v16 + 150);
    v28 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v16 + 152);
    v29 = (float)LODWORD(a8);
    v30 = *(float *)(v16 + 36);
    v31 = *(float *)(v16 + 40);
    v32 = *(float *)(v16 + 44);
    v33 = *(float *)(v16 + 48);
    v34 = *(float *)(v16 + 52);
    v35 = *(float *)(v16 + 56);
    v36 = *(float *)(v16 + 60);
    v37 = *(float *)(v16 + 64);
    v38 = *(float *)(v16 + 68);
    v39 = *((_QWORD *)result + 14);
    v40 = *((_QWORD *)result + 13) * a2;
    v41 = (_QWORD *)*((_QWORD *)result + 16);
    v42 = v40 / v9 + *((_QWORD *)result + 15);
    v43 = *(_QWORD *)(result + 36);
    v44 = v41[2];
    if (v44)
      v45 = (_BYTE *)(v44 + v42 * v22 + v39);
    else
      v45 = 0;
    v48 = v41;
    v46 = *v41;
    v47 = v48[1];
    v49 = v47 == 0;
    v50 = (_BYTE *)(v47 + v42 * v21 + v39);
    if (v49)
      v50 = 0;
    v51 = (_BYTE *)(v46 + v42 * v20 + v39);
    result = (unsigned __int8 *)(*v18 + v19 * v14 + 8 * v43);
    do
    {
      if (v13)
      {
        v52 = v13;
        v53 = (unsigned __int16 *)result;
        v54 = v45;
        v55 = v50;
        v56 = v51;
        do
        {
          v57 = v24 * (float)(bswap32(v53[1]) >> 16);
          v58 = v24 * (float)(bswap32(v53[2]) >> 16);
          v59 = v24 * (float)(bswap32(v53[3]) >> 16);
          v60 = (float)((float)((float)(v31 * v58) + (float)(v30 * v57)) + (float)(v32 * v59)) + v25;
          v61 = v27;
          if (v60 <= v27)
          {
            v61 = (float)((float)((float)(v31 * v58) + (float)(v30 * v57)) + (float)(v32 * v59)) + v25;
            if (v60 < v25)
              v61 = v25;
          }
          v62 = *v53;
          *v56++ = llroundf(v61);
          if (v55)
          {
            v63 = (float)((float)(v26 + (float)(v57 * v33)) + (float)(v58 * v34)) + (float)(v59 * v35);
            v64 = v29;
            if (v63 <= v29)
            {
              v64 = (float)((float)(v26 + (float)(v57 * v33)) + (float)(v58 * v34)) + (float)(v59 * v35);
              if (v63 < v28)
                v64 = v28;
            }
            v65 = (float)((float)(v26 + (float)(v57 * v36)) + (float)(v58 * v37)) + (float)(v59 * v38);
            *v55 = llroundf(v64);
            v66 = v29;
            if (v65 <= v29)
            {
              v66 = v65;
              if (v65 < v28)
                v66 = v28;
            }
            v55[1] = llroundf(v66);
            v55 += 2;
          }
          if (v54)
            *v54++ = llroundf((float)(bswap32(v62) >> 16) * 0.0038911);
          v53 += 4;
          --v52;
        }
        while (v52);
      }
      result += v19;
      v51 += v20;
      v50 += v21;
      v45 += v22;
      ++v12;
    }
    while (v12 != v15);
  }
  return result;
}

uint64_t vt_Copy_b64a_TRC_Tone_Mat_TRC_xf444(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_TRC_Tone_Mat_TRC_xf444_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_TRC_Tone_Mat_TRC_xf444_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float v43;
  float v44;
  float v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  uint64_t v49;
  unsigned int v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _WORD *v61;
  _WORD *v62;
  _WORD *v63;
  unsigned __int16 *v64;
  float v74;
  float v75;
  float v79;
  float v80;
  float v81;
  float v82;
  float v87;
  float v88;
  unsigned int v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;

  v2 = *(_QWORD *)(result + 28);
  v3 = *result;
  v4 = v2 * a2 / v3;
  v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    v6 = 0;
    v7 = *(_QWORD *)(result + 20);
    v8 = v4 + *(_QWORD *)(result + 44);
    v9 = v5 - v4;
    v10 = *((_QWORD *)result + 19);
    v11 = (uint64_t *)*((_QWORD *)result + 17);
    v12 = (_QWORD *)*((_QWORD *)result + 7);
    v13 = **((_QWORD **)result + 8);
    v14 = *v11;
    v15 = v11[1];
    v16 = v11[2];
    *(float *)&v17 = (float)*(unsigned int *)(v10 + 128);
    v18 = 8191.0 / *(float *)&v17;
    LOWORD(v17) = *(_WORD *)(v10 + 144);
    v19 = (float)v17;
    LOWORD(v17) = *(_WORD *)(v10 + 146);
    v20 = (float)v17;
    LOWORD(v17) = *(_WORD *)(v10 + 148);
    v21 = (float)v17;
    LOWORD(v17) = *(_WORD *)(v10 + 150);
    v22 = (float)v17;
    LOWORD(v17) = *(_WORD *)(v10 + 152);
    v23 = (float)v17;
    v24 = *(float *)(v10 + 36);
    v25 = *(float *)(v10 + 40);
    v26 = *(float *)(v10 + 44);
    v95 = *(float *)(v10 + 52);
    v96 = *(float *)(v10 + 48);
    v27 = *(float *)(v10 + 60);
    v94 = *(float *)(v10 + 56);
    v28 = *(float *)(v10 + 64);
    v29 = *(float *)(v10 + 68);
    v30 = *(float *)(v10 + 72);
    v31 = *(float *)(v10 + 76);
    v32 = *(float *)(v10 + 80);
    v33 = *(float *)(v10 + 84);
    v34 = *(float *)(v10 + 88);
    v35 = *(float *)(v10 + 92);
    v36 = *(float *)(v10 + 96);
    v37 = *(float *)(v10 + 100);
    v38 = *(float *)(v10 + 104);
    v39 = *(float *)(v10 + 108);
    v40 = v10 + 164;
    v41 = v10 + 16548;
    v42 = v10 + 32932;
    v43 = *(float *)(v10 + 112);
    v44 = *(float *)(v10 + 116);
    v45 = *(float *)(v10 + 120);
    v46 = *((_QWORD *)result + 14);
    v47 = (_QWORD *)*((_QWORD *)result + 16);
    v48 = *((_QWORD *)result + 13) * a2 / v3 + *((_QWORD *)result + 15);
    v49 = *(_QWORD *)(result + 36);
    v50 = *(unsigned __int8 *)(v10 + 132);
    if (v50 >= 0x11)
      v51 = 0;
    else
      v51 = 16 - v50;
    v52 = v47[2];
    if (v52)
      result = (unsigned __int8 *)(v52 + v48 * v16 + 2 * v46);
    else
      result = 0;
    v55 = v47;
    v54 = *v47;
    v53 = v55[1];
    _ZF = v53 == 0;
    v57 = v53 + v48 * v15 + 2 * v46;
    if (_ZF)
      v57 = 0;
    v58 = v54 + v48 * v14 + 2 * v46;
    v59 = *v12 + v13 * v8 + 8 * v49;
    do
    {
      if (v7)
      {
        v60 = v7;
        v61 = result;
        v62 = (_WORD *)v57;
        v63 = (_WORD *)v58;
        v64 = (unsigned __int16 *)v59;
        do
        {
          _H0 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v18 * (float)(bswap32(v64[1]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S18, H0 }
          _H0 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v18 * (float)(bswap32(v64[2]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S14, H0 }
          _H0 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v18 * (float)(bswap32(v64[3]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S15, H0 }
          v74 = (float)((float)((float)(v43 * _S14) + (float)(v39 * _S18)) + (float)(v44 * _S15))
              + (float)(v45 * fmaxf(_S18, fmaxf(_S14, _S15)));
          v75 = 8191.0;
          if (v74 <= 8191.0)
          {
            v75 = v74;
            if (v74 < 0.0)
              v75 = 0.0;
          }
          _H0 = *(_WORD *)(v41 + 2 * llroundf(v75));
          __asm { FCVT            S0, H0 }
          _S6 = _S18 * _S0;
          v79 = _S14 * _S0;
          v80 = _S15 * _S0;
          v81 = (float)((float)(v31 * v79) + (float)(_S6 * v30)) + (float)(v80 * v32);
          v82 = (float)((float)(v34 * v79) + (float)(_S6 * v33)) + (float)(v80 * v35);
          _S0 = (float)((float)(v37 * v79) + (float)(_S6 * v36)) + (float)(v80 * v38);
          LOWORD(_S6) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          __asm { FCVT            S14, H6 }
          LOWORD(_S6) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          __asm { FCVT            S15, H6 }
          LOWORD(_S0) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          __asm { FCVT            S18, H0 }
          v87 = (float)((float)((float)(v25 * _S15) + (float)(v24 * _S14)) + (float)(v26 * _S18)) + v19;
          v88 = v21;
          if (v87 <= v21)
          {
            v88 = (float)((float)((float)(v25 * _S15) + (float)(v24 * _S14)) + (float)(v26 * _S18)) + v19;
            if (v87 < v19)
              v88 = v19;
          }
          v89 = *v64;
          *v63++ = llroundf(v88) << v51;
          if (v62)
          {
            v90 = (float)((float)(v20 + (float)(_S14 * v96)) + (float)(_S15 * v95)) + (float)(_S18 * v94);
            v91 = v23;
            if (v90 <= v23)
            {
              v91 = (float)((float)(v20 + (float)(_S14 * v96)) + (float)(_S15 * v95)) + (float)(_S18 * v94);
              if (v90 < v22)
                v91 = v22;
            }
            v92 = (float)((float)(v20 + (float)(_S14 * v27)) + (float)(_S15 * v28)) + (float)(_S18 * v29);
            *v62 = llroundf(v91) << v51;
            v93 = v23;
            if (v92 <= v23)
            {
              v93 = v92;
              if (v92 < v22)
                v93 = v22;
            }
            v62[1] = llroundf(v93) << v51;
            v62 += 2;
          }
          if (v61)
            *v61++ = bswap32(v89) >> 16;
          v64 += 4;
          --v60;
        }
        while (v60);
      }
      v59 += v13;
      v58 += v14;
      v57 += v15;
      result += v16;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_b64a_TRC_Mat_TRC_xf444(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_TRC_Mat_TRC_xf444_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_TRC_Mat_TRC_xf444_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  unsigned int v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int16 *v64;
  _WORD *v65;
  _WORD *v66;
  _WORD *v67;
  float v77;
  float v78;
  float v83;
  float v84;
  unsigned int v85;
  float v86;
  float v87;
  float v88;
  float v89;

  v9 = *(_QWORD *)(result + 28);
  v10 = *result;
  v11 = v9 * a2 / v10;
  v12 = (v9 + v9 * a2) / v10;
  if (v12 != v11)
  {
    v13 = 0;
    v14 = *(_QWORD *)(result + 20);
    v15 = v11 + *(_QWORD *)(result + 44);
    v16 = v12 - v11;
    v17 = *((_QWORD *)result + 19);
    v18 = (uint64_t *)*((_QWORD *)result + 17);
    v19 = (_QWORD *)*((_QWORD *)result + 7);
    v20 = **((_QWORD **)result + 8);
    v21 = *v18;
    v22 = v18[1];
    v23 = v18[2];
    v24 = 8191.0 / (float)*(unsigned int *)(v17 + 128);
    LOWORD(a5) = *(_WORD *)(v17 + 144);
    v25 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v17 + 146);
    v26 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v17 + 148);
    v27 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v17 + 150);
    v28 = (float)LODWORD(a8);
    LOWORD(a9) = *(_WORD *)(v17 + 152);
    v29 = (float)LODWORD(a9);
    v30 = *(float *)(v17 + 36);
    v31 = *(float *)(v17 + 40);
    v32 = *(float *)(v17 + 44);
    v33 = *(float *)(v17 + 48);
    v34 = *(float *)(v17 + 52);
    v35 = *(float *)(v17 + 56);
    v36 = *(float *)(v17 + 60);
    v37 = *(float *)(v17 + 64);
    v38 = *(float *)(v17 + 68);
    v39 = *(float *)(v17 + 72);
    v40 = *(float *)(v17 + 76);
    v41 = *(float *)(v17 + 80);
    v42 = *(float *)(v17 + 84);
    v43 = *(float *)(v17 + 88);
    v44 = *(float *)(v17 + 92);
    v45 = *(float *)(v17 + 96);
    v47 = *(float *)(v17 + 100);
    v46 = *(float *)(v17 + 104);
    v48 = v17 + 164;
    v49 = v17 + 16548;
    v50 = *((_QWORD *)result + 14);
    v51 = (uint64_t *)*((_QWORD *)result + 16);
    v52 = *((_QWORD *)result + 13) * a2 / v10 + *((_QWORD *)result + 15);
    v53 = *(_QWORD *)(result + 36);
    v54 = *(unsigned __int8 *)(v17 + 132);
    if (v54 >= 0x11)
      v55 = 0;
    else
      v55 = 16 - v54;
    v56 = v51[2];
    if (v56)
      v57 = v56 + v52 * v23 + 2 * v50;
    else
      v57 = 0;
    v59 = *v51;
    v58 = *(_QWORD *)(*((_QWORD *)result + 16) + 8);
    _ZF = v58 == 0;
    result = (unsigned __int8 *)(v58 + v52 * v22 + 2 * v50);
    if (_ZF)
      result = 0;
    v61 = v59 + v52 * v21 + 2 * v50;
    v62 = *v19 + v20 * v15 + 8 * v53;
    do
    {
      if (v14)
      {
        v63 = v14;
        v64 = (unsigned __int16 *)v62;
        v65 = (_WORD *)v57;
        v66 = result;
        v67 = (_WORD *)v61;
        do
        {
          _H12 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v24 * (float)(bswap32(v64[1]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          _H11 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v24 * (float)(bswap32(v64[2]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          _H10 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v24 * (float)(bswap32(v64[3]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          v77 = (float)((float)(v40 * _S11) + (float)(_S12 * v39)) + (float)(_S10 * v41);
          v78 = (float)((float)(v43 * _S11) + (float)(_S12 * v42)) + (float)(_S10 * v44);
          _S12 = (float)((float)(v47 * _S11) + (float)(_S12 * v45)) + (float)(_S10 * v46);
          LOWORD(_S10) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          LOWORD(_S11) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          LOWORD(_S12) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(_S12, 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          v83 = (float)((float)((float)(v31 * _S11) + (float)(v30 * _S10)) + (float)(v32 * _S12)) + v25;
          v84 = v27;
          if (v83 <= v27)
          {
            v84 = (float)((float)((float)(v31 * _S11) + (float)(v30 * _S10)) + (float)(v32 * _S12)) + v25;
            if (v83 < v25)
              v84 = v25;
          }
          v85 = *v64;
          *v67++ = llroundf(v84) << v55;
          if (v66)
          {
            v86 = (float)((float)(v26 + (float)(_S10 * v33)) + (float)(_S11 * v34)) + (float)(_S12 * v35);
            v87 = v29;
            if (v86 <= v29)
            {
              v87 = (float)((float)(v26 + (float)(_S10 * v33)) + (float)(_S11 * v34)) + (float)(_S12 * v35);
              if (v86 < v28)
                v87 = v28;
            }
            v88 = (float)((float)(v26 + (float)(_S10 * v36)) + (float)(_S11 * v37)) + (float)(_S12 * v38);
            *v66 = llroundf(v87) << v55;
            v89 = v29;
            if (v88 <= v29)
            {
              v89 = v88;
              if (v88 < v28)
                v89 = v28;
            }
            v66[1] = llroundf(v89) << v55;
            v66 += 2;
          }
          if (v65)
            *v65++ = bswap32(v85) >> 16;
          v64 += 4;
          --v63;
        }
        while (v63);
      }
      v62 += v20;
      v61 += v21;
      result += v22;
      v57 += v23;
      ++v13;
    }
    while (v13 != v16);
  }
  return result;
}

uint64_t vt_Copy_b64a_rgb_xf444(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_rgb_xf444_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_rgb_xf444_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  unsigned int v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  unsigned __int16 *v56;
  _WORD *v57;
  _WORD *v58;
  _WORD *v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  unsigned int v65;
  float v66;
  float v67;
  float v68;
  float v69;

  v8 = *(_QWORD *)(result + 28);
  v9 = *result;
  v10 = v8 * a2 / v9;
  v11 = (v8 + v8 * a2) / v9;
  if (v11 != v10)
  {
    v12 = 0;
    v13 = *(_QWORD *)(result + 20);
    v14 = v10 + *(_QWORD *)(result + 44);
    v15 = v11 - v10;
    v16 = *((_QWORD *)result + 19);
    v17 = (uint64_t *)*((_QWORD *)result + 17);
    v18 = (_QWORD *)*((_QWORD *)result + 7);
    v19 = **((_QWORD **)result + 8);
    v20 = *v17;
    v21 = v17[1];
    v22 = v17[2];
    *(float *)&v23 = (float)*(unsigned int *)(v16 + 136);
    v24 = *(float *)&v23 / (float)*(unsigned int *)(v16 + 128);
    LOWORD(v23) = *(_WORD *)(v16 + 144);
    v25 = (float)v23;
    LOWORD(a5) = *(_WORD *)(v16 + 146);
    v26 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v16 + 148);
    v27 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v16 + 150);
    v28 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v16 + 152);
    v29 = (float)LODWORD(a8);
    v30 = *(float *)(v16 + 36);
    v31 = *(float *)(v16 + 40);
    v32 = *(float *)(v16 + 44);
    v33 = *(float *)(v16 + 48);
    v34 = *(float *)(v16 + 52);
    v35 = *(float *)(v16 + 56);
    v36 = *(float *)(v16 + 60);
    v37 = *(float *)(v16 + 64);
    v38 = *(float *)(v16 + 68);
    v39 = *((_QWORD *)result + 14);
    v40 = *((_QWORD *)result + 13) * a2;
    v41 = (_QWORD *)*((_QWORD *)result + 16);
    v42 = v40 / v9 + *((_QWORD *)result + 15);
    v43 = *(_QWORD *)(result + 36);
    v44 = *(unsigned __int8 *)(v16 + 132);
    if (v44 >= 0x11)
      v45 = 0;
    else
      v45 = 16 - v44;
    v46 = v41[2];
    if (v46)
      v47 = v46 + v42 * v22 + 2 * v39;
    else
      v47 = 0;
    v50 = v41;
    v48 = *v41;
    v49 = v50[1];
    v51 = v49 == 0;
    v52 = v49 + v42 * v21 + 2 * v39;
    if (v51)
      v52 = 0;
    v53 = v48 + v42 * v20 + 2 * v39;
    result = (unsigned __int8 *)(*v18 + v19 * v14 + 8 * v43);
    v54 = v45;
    do
    {
      if (v13)
      {
        v55 = v13;
        v56 = (unsigned __int16 *)result;
        v57 = (_WORD *)v47;
        v58 = (_WORD *)v52;
        v59 = (_WORD *)v53;
        do
        {
          v60 = v24 * (float)(bswap32(v56[1]) >> 16);
          v61 = v24 * (float)(bswap32(v56[2]) >> 16);
          v62 = v24 * (float)(bswap32(v56[3]) >> 16);
          v63 = (float)((float)((float)(v31 * v61) + (float)(v30 * v60)) + (float)(v32 * v62)) + v25;
          v64 = v27;
          if (v63 <= v27)
          {
            v64 = (float)((float)((float)(v31 * v61) + (float)(v30 * v60)) + (float)(v32 * v62)) + v25;
            if (v63 < v25)
              v64 = v25;
          }
          v65 = *v56;
          *v59++ = llroundf(v64) << v54;
          if (v58)
          {
            v66 = (float)((float)(v26 + (float)(v60 * v33)) + (float)(v61 * v34)) + (float)(v62 * v35);
            v67 = v29;
            if (v66 <= v29)
            {
              v67 = (float)((float)(v26 + (float)(v60 * v33)) + (float)(v61 * v34)) + (float)(v62 * v35);
              if (v66 < v28)
                v67 = v28;
            }
            v68 = (float)((float)(v26 + (float)(v60 * v36)) + (float)(v61 * v37)) + (float)(v62 * v38);
            *v58 = llroundf(v67) << v54;
            v69 = v29;
            if (v68 <= v29)
            {
              v69 = v68;
              if (v68 < v28)
                v69 = v28;
            }
            v58[1] = llroundf(v69) << v54;
            v58 += 2;
          }
          if (v57)
            *v57++ = bswap32(v65) >> 16;
          v56 += 4;
          --v55;
        }
        while (v55);
      }
      result += v19;
      v53 += v20;
      v52 += v21;
      v47 += v22;
      ++v12;
    }
    while (v12 != v15);
  }
  return result;
}

uint64_t vt_Copy_b64a_TRC_Tone_Mat_TRC_BGRA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_TRC_Tone_Mat_TRC_BGRA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_TRC_Tone_Mat_TRC_BGRA_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int16 *v41;
  uint64_t v42;
  float v53;
  float v54;
  float v57;
  float v58;
  float v59;
  float v62;
  unsigned int v63;
  float v64;
  float v65;

  v2 = *(_QWORD *)(result + 28);
  v3 = *result;
  v4 = v2 * a2 / v3;
  v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    v6 = 0;
    v7 = *(_QWORD *)(result + 20);
    v8 = v4 + *(_QWORD *)(result + 44);
    v9 = v5 - v4;
    v10 = *((_QWORD *)result + 19);
    v11 = (_QWORD *)*((_QWORD *)result + 7);
    v12 = **((_QWORD **)result + 8);
    v13 = **((_QWORD **)result + 17);
    v14 = 8191.0 / (float)*(unsigned int *)(v10 + 128);
    v15 = *(float *)(v10 + 72);
    v16 = *(float *)(v10 + 76);
    v17 = *(float *)(v10 + 80);
    v18 = *(float *)(v10 + 84);
    v19 = *(float *)(v10 + 88);
    v20 = *(float *)(v10 + 92);
    v21 = *(float *)(v10 + 96);
    v22 = *(float *)(v10 + 100);
    v23 = v10 + 164;
    v24 = v10 + 16548;
    v25 = v10 + 32932;
    v26 = *(float *)(v10 + 104);
    v27 = *(float *)(v10 + 108);
    v28 = *(float *)(v10 + 112);
    v29 = *(float *)(v10 + 116);
    v30 = *(float *)(v10 + 120);
    v31 = *((_QWORD *)result + 14);
    v32 = *((_QWORD *)result + 13) * a2 / v3 + *((_QWORD *)result + 15);
    v33 = *(_QWORD *)(result + 36);
    v34 = *(unsigned __int8 *)(v10 + 161);
    v35 = *(unsigned __int8 *)(v10 + 160);
    v36 = **((_QWORD **)result + 16) + v32 * v13;
    result = (unsigned __int8 *)*(unsigned __int8 *)(v10 + 159);
    v37 = *(unsigned __int8 *)(v10 + 158);
    v38 = v36 + 4 * v31;
    v39 = *v11 + v12 * v8 + 8 * v33;
    do
    {
      if (v7)
      {
        v40 = v7;
        v41 = (unsigned __int16 *)v39;
        v42 = v38;
        do
        {
          _H25 = *(_WORD *)(v23 + 2 * llroundf(fminf(fmaxf(v14 * (float)(bswap32(v41[1]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          _H26 = *(_WORD *)(v23 + 2 * llroundf(fminf(fmaxf(v14 * (float)(bswap32(v41[2]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)(v23 + 2 * llroundf(fminf(fmaxf(v14 * (float)(bswap32(v41[3]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S28, H27 }
          v53 = (float)((float)((float)(v28 * _S26) + (float)(v27 * _S25)) + (float)(v29 * _S28))
              + (float)(v30 * fmaxf(_S25, fmaxf(_S26, _S28)));
          v54 = 8191.0;
          if (v53 <= 8191.0)
          {
            v54 = v53;
            if (v53 < 0.0)
              v54 = 0.0;
          }
          _H27 = *(_WORD *)(v24 + 2 * llroundf(v54));
          __asm { FCVT            S29, H27 }
          v57 = _S25 * _S29;
          v58 = _S26 * _S29;
          v59 = _S28 * _S29;
          _H28 = *(_WORD *)(v25
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v16 * v58) + (float)(v57 * v15)) + (float)((float)(_S28 * _S29) * v17), 0.0), 8191.0)));
          __asm { FCVT            S29, H28 }
          v62 = 255.0;
          if (_S29 <= 255.0)
          {
            v62 = _S29;
            if (_S29 < 0.0)
              v62 = 0.0;
          }
          v63 = *v41;
          v64 = (float)((float)(v19 * v58) + (float)(v57 * v18)) + (float)(v59 * v20);
          v65 = (float)((float)(v22 * v58) + (float)(v57 * v21)) + (float)(v59 * v26);
          _H26 = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v64, 0.0), 8191.0)));
          _H25 = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v65, 0.0), 8191.0)));
          *(_BYTE *)(v42 + v37) = llroundf(v62);
          __asm { FCVT            S28, H26 }
          _S27 = 255.0;
          if (_S28 <= 255.0)
          {
            if (_S28 >= 0.0)
              __asm { FCVT            S27, H26 }
            else
              _S27 = 0.0;
          }
          result[v42] = llroundf(_S27);
          __asm { FCVT            S27, H25 }
          _S26 = 255.0;
          if (_S27 <= 255.0)
          {
            if (_S27 >= 0.0)
              __asm { FCVT            S26, H25 }
            else
              _S26 = 0.0;
          }
          v41 += 4;
          *(_BYTE *)(v42 + v35) = llroundf(_S26);
          *(_BYTE *)(v42 + v34) = llroundf((float)(bswap32(v63) >> 16) * 0.0038911);
          v42 += 4;
          --v40;
        }
        while (v40);
      }
      v39 += v12;
      v38 += v13;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_b64a_TRC_Mat_TRC_BGRA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_TRC_Mat_TRC_BGRA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_TRC_Mat_TRC_BGRA_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int16 *v36;
  uint64_t v37;
  float v50;
  unsigned int v51;
  float v52;
  float v53;

  v2 = *(_QWORD *)(result + 28);
  v3 = *result;
  v4 = v2 * a2 / v3;
  v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    v6 = 0;
    v7 = *(_QWORD *)(result + 20);
    v8 = v4 + *(_QWORD *)(result + 44);
    v9 = v5 - v4;
    v10 = *((_QWORD *)result + 19);
    v11 = (_QWORD *)*((_QWORD *)result + 7);
    v12 = **((_QWORD **)result + 8);
    v13 = **((_QWORD **)result + 17);
    v14 = 8191.0 / (float)*(unsigned int *)(v10 + 128);
    v15 = *(float *)(v10 + 72);
    v16 = *(float *)(v10 + 76);
    v17 = *(float *)(v10 + 80);
    v18 = *(float *)(v10 + 84);
    v19 = *(float *)(v10 + 88);
    v20 = *(float *)(v10 + 92);
    v21 = *(float *)(v10 + 96);
    v22 = *(float *)(v10 + 100);
    v23 = *(float *)(v10 + 104);
    v24 = v10 + 164;
    v25 = v10 + 16548;
    v26 = *((_QWORD *)result + 14);
    v27 = *((_QWORD *)result + 13) * a2 / v3 + *((_QWORD *)result + 15);
    v28 = *(_QWORD *)(result + 36);
    v29 = *(unsigned __int8 *)(v10 + 161);
    v30 = *(unsigned __int8 *)(v10 + 160);
    v31 = **((_QWORD **)result + 16) + v27 * v13;
    v32 = *(unsigned __int8 *)(v10 + 159);
    result = (unsigned __int8 *)*(unsigned __int8 *)(v10 + 158);
    v33 = v31 + 4 * v26;
    v34 = *v11 + v12 * v8 + 8 * v28;
    do
    {
      if (v7)
      {
        v35 = v7;
        v36 = (unsigned __int16 *)v34;
        v37 = v33;
        do
        {
          _H21 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v14 * (float)(bswap32(v36[1]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S21, H21 }
          _H22 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v14 * (float)(bswap32(v36[2]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S22, H22 }
          _H23 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v14 * (float)(bswap32(v36[3]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S23, H23 }
          _H24 = *(_WORD *)(v25
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v16 * _S22) + (float)(_S21 * v15)) + (float)(_S23 * v17), 0.0), 8191.0)));
          __asm { FCVT            S25, H24 }
          v50 = 255.0;
          if (_S25 <= 255.0)
          {
            v50 = _S25;
            if (_S25 < 0.0)
              v50 = 0.0;
          }
          v51 = *v36;
          v52 = (float)((float)(v19 * _S22) + (float)(_S21 * v18)) + (float)(_S23 * v20);
          v53 = (float)((float)(v22 * _S22) + (float)(_S21 * v21)) + (float)(_S23 * v23);
          _H22 = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v52, 0.0), 8191.0)));
          _H21 = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v53, 0.0), 8191.0)));
          result[v37] = llroundf(v50);
          __asm { FCVT            S24, H22 }
          _S23 = 255.0;
          if (_S24 <= 255.0)
          {
            if (_S24 >= 0.0)
              __asm { FCVT            S23, H22 }
            else
              _S23 = 0.0;
          }
          *(_BYTE *)(v37 + v32) = llroundf(_S23);
          __asm { FCVT            S23, H21 }
          _S22 = 255.0;
          if (_S23 <= 255.0)
          {
            if (_S23 >= 0.0)
              __asm { FCVT            S22, H21 }
            else
              _S22 = 0.0;
          }
          v36 += 4;
          *(_BYTE *)(v37 + v30) = llroundf(_S22);
          *(_BYTE *)(v37 + v29) = llroundf((float)(bswap32(v51) >> 16) * 0.0038911);
          v37 += 4;
          --v35;
        }
        while (v35);
      }
      v34 += v12;
      v33 += v13;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_b64a_rgb_BGRA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_rgb_BGRA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_rgb_BGRA_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int16 *v21;
  uint64_t v22;
  float v23;
  float v24;
  unsigned int v25;
  unsigned int v26;
  float v27;
  float v28;
  float v29;
  float v30;

  v2 = *(_QWORD *)(result + 28);
  v3 = *result;
  v4 = v2 * a2 / v3;
  v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    v6 = 0;
    v7 = *(_QWORD *)(result + 20);
    v8 = v4 + *(_QWORD *)(result + 44);
    v9 = v5 - v4;
    v10 = *((_QWORD *)result + 19);
    v11 = **((_QWORD **)result + 8);
    v12 = **((_QWORD **)result + 17);
    v13 = (float)*(unsigned int *)(v10 + 136) / (float)*(unsigned int *)(v10 + 128);
    v14 = *((_QWORD *)result + 13) * a2 / v3 + *((_QWORD *)result + 15);
    v15 = *(unsigned __int8 *)(v10 + 161);
    v16 = *(unsigned __int8 *)(v10 + 160);
    v17 = *(unsigned __int8 *)(v10 + 159);
    v18 = *(unsigned __int8 *)(v10 + 158);
    v19 = **((_QWORD **)result + 16) + v14 * v12 + 4 * *((_QWORD *)result + 14);
    result = (unsigned __int8 *)(**((_QWORD **)result + 7) + v11 * v8 + 8 * *(_QWORD *)(result + 36));
    do
    {
      if (v7)
      {
        v20 = v7;
        v21 = (unsigned __int16 *)result;
        v22 = v19;
        do
        {
          v23 = v13 * (float)(bswap32(v21[1]) >> 16);
          v24 = 255.0;
          if (v23 <= 255.0)
          {
            v24 = v23;
            if (v23 < 0.0)
              v24 = 0.0;
          }
          v25 = v21[3];
          v26 = *v21;
          v27 = v13 * (float)(bswap32(v21[2]) >> 16);
          *(_BYTE *)(v22 + v18) = llroundf(v24);
          v28 = 255.0;
          if (v27 <= 255.0)
          {
            v28 = v27;
            if (v27 < 0.0)
              v28 = 0.0;
          }
          v29 = v13 * (float)(bswap32(v25) >> 16);
          *(_BYTE *)(v22 + v17) = llroundf(v28);
          v30 = 255.0;
          if (v29 <= 255.0)
          {
            v30 = v29;
            if (v29 < 0.0)
              v30 = 0.0;
          }
          v21 += 4;
          *(_BYTE *)(v22 + v16) = llroundf(v30);
          *(_BYTE *)(v22 + v15) = llroundf((float)(bswap32(v26) >> 16) * 0.0038911);
          v22 += 4;
          --v20;
        }
        while (v20);
      }
      result += v11;
      v19 += v12;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_b64a_TRC_Tone_Mat_TRC_l10r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_TRC_Tone_Mat_TRC_l10r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_TRC_Tone_Mat_TRC_l10r_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned __int16 *v37;
  float v48;
  float v49;
  float v52;
  float v53;
  float v54;
  float v57;
  BOOL v58;
  float v59;
  float v62;
  float v63;
  float v66;
  float v67;
  unsigned int v68;
  float v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  float v73;

  v5 = *(_QWORD *)(result + 28);
  v6 = *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(unsigned __int8 **)(result + 20);
    v11 = v7 + *(_QWORD *)(result + 44);
    v12 = v8 - v7;
    v13 = *((_QWORD *)result + 19);
    v14 = **((_QWORD **)result + 8);
    v15 = **((_QWORD **)result + 17);
    v16 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    LOWORD(a5) = *(_WORD *)(v13 + 144);
    v17 = (float)LODWORD(a5);
    v18 = *(float *)(v13 + 72);
    v19 = *(float *)(v13 + 76);
    v20 = *(float *)(v13 + 80);
    v21 = *(float *)(v13 + 84);
    v22 = *(float *)(v13 + 88);
    v23 = *(float *)(v13 + 92);
    v24 = *(float *)(v13 + 96);
    v25 = *(float *)(v13 + 100);
    v26 = v13 + 164;
    v27 = v13 + 16548;
    v28 = v13 + 32932;
    v29 = *(float *)(v13 + 104);
    v30 = *(float *)(v13 + 108);
    v31 = *(float *)(v13 + 112);
    v32 = *(float *)(v13 + 116);
    v33 = *(float *)(v13 + 120);
    v34 = **((_QWORD **)result + 16)
        + (*((_QWORD *)result + 13) * a2 / v6 + *((_QWORD *)result + 15)) * v15
        + 16 * *((_QWORD *)result + 14);
    v35 = **((_QWORD **)result + 7) + v14 * v11 + 8 * *(_QWORD *)(result + 36);
    result = (unsigned __int8 *)&unk_1928DF000;
    do
    {
      if (v10)
      {
        result = v10;
        v36 = (unsigned int *)v34;
        v37 = (unsigned __int16 *)v35;
        do
        {
          _H29 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v16 * (float)(bswap32(v37[1]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          _H30 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v16 * (float)(bswap32(v37[2]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S31, H30 }
          _H30 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v16 * (float)(bswap32(v37[3]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S9, H30 }
          v48 = (float)((float)((float)(v31 * _S31) + (float)(v30 * _S29)) + (float)(v32 * _S9))
              + (float)(v33 * fmaxf(_S29, fmaxf(_S31, _S9)));
          v49 = 8191.0;
          if (v48 <= 8191.0)
          {
            v49 = v48;
            if (v48 < 0.0)
              v49 = 0.0;
          }
          _H30 = *(_WORD *)(v27 + 2 * llroundf(v49));
          __asm { FCVT            S10, H30 }
          v52 = _S29 * _S10;
          v53 = _S31 * _S10;
          v54 = _S9 * _S10;
          _H29 = *(_WORD *)(v28
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v25 * v53) + (float)((float)(_S29 * _S10) * v24))+ (float)((float)(_S9 * _S10) * v29), 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          v57 = v17 + _S29;
          v58 = (float)(v17 + _S29) <= 1023.0;
          v59 = 1023.0;
          if (v58)
          {
            v59 = v57;
            if (v57 < 0.0)
              v59 = 0.0;
          }
          _H9 = *(_WORD *)(v28
                         + 2
                         * llroundf(fminf(fmaxf((float)((float)(v22 * v53) + (float)(v52 * v21)) + (float)(v54 * v23), 0.0), 8191.0)));
          __asm { FCVT            S9, H9 }
          v62 = v17 + _S9;
          v58 = (float)(v17 + _S9) <= 1023.0;
          v63 = 1023.0;
          if (v58)
          {
            v63 = v62;
            if (v62 < 0.0)
              v63 = 0.0;
          }
          _H30 = *(_WORD *)(v28
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v19 * v53) + (float)(v52 * v18)) + (float)(v54 * v20), 0.0), 8191.0)));
          __asm { FCVT            S30, H30 }
          v66 = v17 + _S30;
          v58 = (float)(v17 + _S30) <= 1023.0;
          v67 = 1023.0;
          if (v58)
          {
            v67 = v66;
            if (v66 < 0.0)
              v67 = 0.0;
          }
          v68 = *v37;
          v37 += 4;
          v69 = (double)(bswap32(v68) >> 16) * 3.0 / 65535.0;
          v70 = llroundf(v59);
          v71 = llroundf(v63) << 10;
          v72 = llroundf(v67);
          v73 = (float)llroundf(v69);
          if (v73 > 3.0)
            v73 = 3.0;
          *v36++ = v71 | v70 | (llroundf(v73) << 30) | (v72 << 20);
          --result;
        }
        while (result);
      }
      v35 += v14;
      v34 += v15;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_b64a_TRC_Mat_TRC_l10r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_TRC_Mat_TRC_l10r_GCD);
  return 0;
}

uint64_t vt_Copy_b64a_TRC_Mat_TRC_l10r_GCD(uint64_t result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  float v50;
  BOOL v51;
  float v52;
  float v55;
  float v56;
  float v59;
  float v60;
  unsigned int v61;
  float v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  float v66;

  v5 = *(_QWORD *)(result + 28);
  v6 = *(unsigned __int8 *)result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = v7 + *(_QWORD *)(result + 44);
    v12 = v8 - v7;
    v13 = *(_QWORD *)(result + 152);
    v14 = *(_QWORD **)(result + 56);
    v15 = **(_QWORD **)(result + 64);
    v16 = **(_QWORD **)(result + 136);
    v17 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    LOWORD(a5) = *(_WORD *)(v13 + 144);
    v18 = (float)LODWORD(a5);
    v19 = *(float *)(v13 + 72);
    v20 = *(float *)(v13 + 76);
    v21 = *(float *)(v13 + 80);
    v22 = *(float *)(v13 + 84);
    v23 = *(float *)(v13 + 88);
    v24 = *(float *)(v13 + 92);
    v25 = *(float *)(v13 + 96);
    v26 = *(float *)(v13 + 100);
    v27 = *(float *)(v13 + 104);
    v28 = v13 + 164;
    v29 = v13 + 16548;
    v30 = *(_QWORD *)(result + 112);
    v31 = *(_QWORD *)(result + 104) * a2 / v6;
    v33 = *(_QWORD *)(result + 120);
    v32 = *(_QWORD **)(result + 128);
    result = *(_QWORD *)(result + 36);
    v34 = *v32 + (v31 + v33) * v16 + 16 * v30;
    v35 = *v14 + v15 * v11 + 8 * result;
    do
    {
      if (v10)
      {
        v36 = v10;
        result = v35;
        v37 = (unsigned int *)v34;
        do
        {
          _H25 = *(_WORD *)(v28
                          + 2
                          * llroundf(fminf(fmaxf(v17 * (float)(bswap32(*(unsigned __int16 *)(result + 2)) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S26, H25 }
          _H25 = *(_WORD *)(v28
                          + 2
                          * llroundf(fminf(fmaxf(v17 * (float)(bswap32(*(unsigned __int16 *)(result + 4)) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S27, H25 }
          _H25 = *(_WORD *)(v28
                          + 2
                          * llroundf(fminf(fmaxf(v17 * (float)(bswap32(*(unsigned __int16 *)(result + 6)) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S28, H25 }
          _H25 = *(_WORD *)(v29
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v26 * _S27) + (float)(_S26 * v25)) + (float)(_S28 * v27), 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          v50 = v18 + _S25;
          v51 = (float)(v18 + _S25) <= 1023.0;
          v52 = 1023.0;
          if (v51)
          {
            v52 = v50;
            if (v50 < 0.0)
              v52 = 0.0;
          }
          _H29 = *(_WORD *)(v29
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v23 * _S27) + (float)(_S26 * v22)) + (float)(_S28 * v24), 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          v55 = v18 + _S29;
          v51 = (float)(v18 + _S29) <= 1023.0;
          v56 = 1023.0;
          if (v51)
          {
            v56 = v55;
            if (v55 < 0.0)
              v56 = 0.0;
          }
          _H26 = *(_WORD *)(v29
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v20 * _S27) + (float)(_S26 * v19)) + (float)(_S28 * v21), 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          v59 = v18 + _S26;
          v51 = (float)(v18 + _S26) <= 1023.0;
          v60 = 1023.0;
          if (v51)
          {
            v60 = v59;
            if (v59 < 0.0)
              v60 = 0.0;
          }
          v61 = *(unsigned __int16 *)result;
          result += 8;
          v62 = (double)(bswap32(v61) >> 16) * 3.0 / 65535.0;
          v63 = llroundf(v52);
          v64 = llroundf(v56) << 10;
          v65 = llroundf(v60);
          v66 = (float)llroundf(v62);
          if (v66 > 3.0)
            v66 = 3.0;
          *v37++ = v64 | v63 | (llroundf(v66) << 30) | (v65 << 20);
          --v36;
        }
        while (v36);
      }
      v35 += v15;
      v34 += v16;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_b64a_rgb_l10r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_rgb_l10r_GCD);
  return 0;
}

unint64_t vt_Copy_b64a_rgb_l10r_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  float v15;
  float v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int16 *v24;
  _DWORD *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  float v30;
  float v31;
  unsigned int v32;
  float v33;
  float v34;
  float v35;
  float v36;
  unsigned int v37;
  unsigned int v38;
  float v39;
  float v40;
  float v41;
  unsigned int v42;
  float v43;
  float v44;
  float v45;
  float v46;
  unsigned int v47;
  float v48;

  v2 = *(_QWORD *)(result + 28);
  v3 = *(unsigned __int8 *)result;
  v4 = v2 * a2 / v3;
  v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    v6 = 0;
    v7 = *(_QWORD *)(result + 20);
    v8 = v4 + *(_QWORD *)(result + 44);
    v9 = v5 - v4;
    v10 = *(_QWORD *)(result + 152);
    v11 = *(_QWORD **)(result + 56);
    v12 = **(_QWORD **)(result + 64);
    v13 = **(_QWORD **)(result + 136);
    *(float *)&v14 = (float)*(unsigned int *)(v10 + 136);
    v15 = *(float *)&v14 / (float)*(unsigned int *)(v10 + 128);
    LOWORD(v14) = *(_WORD *)(v10 + 144);
    v16 = (float)v14;
    v17 = *(_QWORD *)(result + 112);
    v18 = *(_QWORD *)(result + 104) * a2 / v3;
    v19 = *(_QWORD *)(result + 120);
    v20 = *(_QWORD **)(result + 128);
    result = *(_QWORD *)(result + 36);
    v21 = *v20 + (v18 + v19) * v13 + 16 * v17;
    v22 = *v11 + v12 * v8 + 8 * result;
    do
    {
      if (v7)
      {
        v23 = v7;
        v24 = (unsigned __int16 *)v22;
        v25 = (_DWORD *)v21;
        do
        {
          v26 = v24[1];
          v27 = v24[2];
          v28 = v24[3];
          v29 = *v24;
          v24 += 4;
          v30 = v15 * (float)(bswap32(v26) >> 16);
          v31 = v15 * (float)(bswap32(v27) >> 16);
          v32 = bswap32(v29) >> 16;
          v33 = (float)(v15 * (float)(bswap32(v28) >> 16)) + v16;
          if (v33 < 0.0)
            v34 = 0.0;
          else
            v34 = v33;
          if (v33 <= 1023.0)
            v36 = v34;
          else
            v36 = 1023.0;
          v35 = (double)v32 * 3.0 / 65535.0;
          v37 = llroundf(v35);
          v38 = llroundf(v36);
          v39 = v31 + v16;
          if (v39 < 0.0)
            v40 = 0.0;
          else
            v40 = v39;
          if (v39 <= 1023.0)
            v41 = v40;
          else
            v41 = 1023.0;
          v42 = llroundf(v41);
          v43 = v30 + v16;
          if (v43 < 0.0)
            v44 = 0.0;
          else
            v44 = v43;
          if (v43 <= 1023.0)
            v45 = v44;
          else
            v45 = 1023.0;
          v46 = (float)v37;
          v47 = llroundf(v45);
          if (v46 <= 3.0)
            v48 = v46;
          else
            v48 = 3.0;
          result = (v42 << 10) | v38 | (llroundf(v48) << 30) | (v47 << 20);
          *v25++ = result;
          --v23;
        }
        while (v23);
      }
      v22 += v12;
      v21 += v13;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_b64a_TRC_Tone_Mat_TRC_l64r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_TRC_Tone_Mat_TRC_l64r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_TRC_Tone_Mat_TRC_l64r_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int16 *v32;
  _WORD *v33;
  float v44;
  float v45;
  float v48;
  float v49;
  float v50;
  float v53;
  unsigned int v55;
  float v56;
  float v57;
  float v61;
  float v64;

  v2 = *(_QWORD *)(result + 28);
  v3 = *result;
  v4 = v2 * a2 / v3;
  v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    v6 = 0;
    v7 = *(unsigned __int8 **)(result + 20);
    v8 = v4 + *(_QWORD *)(result + 44);
    v9 = v5 - v4;
    v10 = *((_QWORD *)result + 19);
    v11 = **((_QWORD **)result + 8);
    v12 = **((_QWORD **)result + 17);
    v13 = 8191.0 / (float)*(unsigned int *)(v10 + 128);
    v14 = *(float *)(v10 + 72);
    v15 = *(float *)(v10 + 76);
    v16 = *(float *)(v10 + 80);
    v17 = *(float *)(v10 + 84);
    v18 = *(float *)(v10 + 88);
    v19 = *(float *)(v10 + 92);
    v20 = *(float *)(v10 + 96);
    v21 = *(float *)(v10 + 100);
    v22 = v10 + 164;
    v23 = v10 + 16548;
    v24 = v10 + 32932;
    v25 = *(float *)(v10 + 104);
    v26 = *(float *)(v10 + 108);
    v27 = *(float *)(v10 + 112);
    v28 = *(float *)(v10 + 116);
    v29 = *(float *)(v10 + 120);
    v30 = **((_QWORD **)result + 16)
        + (*((_QWORD *)result + 13) * a2 / v3 + *((_QWORD *)result + 15)) * v12
        + 8 * *((_QWORD *)result + 14);
    v31 = **((_QWORD **)result + 7) + v11 * v8 + 8 * *(_QWORD *)(result + 36);
    result = (unsigned __int8 *)&unk_1928DF000;
    do
    {
      if (v7)
      {
        result = v7;
        v32 = (unsigned __int16 *)v31;
        v33 = (_WORD *)v30;
        do
        {
          _H25 = *(_WORD *)(v22 + 2 * llroundf(fminf(fmaxf(v13 * (float)(bswap32(v32[1]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          _H26 = *(_WORD *)(v22 + 2 * llroundf(fminf(fmaxf(v13 * (float)(bswap32(v32[2]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)(v22 + 2 * llroundf(fminf(fmaxf(v13 * (float)(bswap32(v32[3]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S28, H27 }
          v44 = (float)((float)((float)(v27 * _S26) + (float)(v26 * _S25)) + (float)(v28 * _S28))
              + (float)(v29 * fmaxf(_S25, fmaxf(_S26, _S28)));
          v45 = 8191.0;
          if (v44 <= 8191.0)
          {
            v45 = v44;
            if (v44 < 0.0)
              v45 = 0.0;
          }
          _H27 = *(_WORD *)(v23 + 2 * llroundf(v45));
          __asm { FCVT            S29, H27 }
          v48 = _S25 * _S29;
          v49 = _S26 * _S29;
          v50 = _S28 * _S29;
          _H30 = *(_WORD *)(v24
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v15 * v49) + (float)(v48 * v14)) + (float)((float)(_S28 * _S29) * v16), 0.0), 8191.0)));
          __asm { FCVT            S29, H30 }
          v53 = 65535.0;
          if (_S29 <= 65535.0)
          {
            __asm { FCVT            S28, H30 }
            _NF = _S28 < 0.0;
            v53 = _S29;
            if (_NF)
              v53 = 0.0;
          }
          v55 = *v32;
          v56 = (float)((float)(v18 * v49) + (float)(v48 * v17)) + (float)(v50 * v19);
          v57 = (float)((float)(v21 * v49) + (float)(v48 * v20)) + (float)(v50 * v25);
          _H26 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v56, 0.0), 8191.0)));
          _H25 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v57, 0.0), 8191.0)));
          __asm { FCVT            S29, H26 }
          *v33 = llroundf(v53);
          v61 = 65535.0;
          if (_S29 <= 65535.0)
          {
            __asm { FCVT            S26, H26 }
            v61 = _S29;
            if (_S26 < 0.0)
              v61 = 0.0;
          }
          __asm { FCVT            S28, H25 }
          v33[1] = llroundf(v61);
          v64 = 65535.0;
          if (_S28 <= 65535.0)
          {
            __asm { FCVT            S25, H25 }
            v64 = _S28;
            if (_S25 < 0.0)
              v64 = 0.0;
          }
          v32 += 4;
          v33[2] = llroundf(v64);
          v33[3] = bswap32(v55) >> 16;
          v33 += 4;
          --result;
        }
        while (result);
      }
      v31 += v11;
      v30 += v12;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_b64a_TRC_Mat_TRC_l64r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_TRC_Mat_TRC_l64r_GCD);
  return 0;
}

uint64_t vt_Copy_b64a_TRC_Mat_TRC_l64r_GCD(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _WORD *v33;
  float v46;
  unsigned int v48;
  float v49;
  float v50;
  float v54;
  float v57;

  v2 = *(_QWORD *)(result + 28);
  v3 = *(unsigned __int8 *)result;
  v4 = v2 * a2 / v3;
  v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    v6 = 0;
    v7 = *(_QWORD *)(result + 20);
    v8 = v4 + *(_QWORD *)(result + 44);
    v9 = v5 - v4;
    v10 = *(_QWORD *)(result + 152);
    v11 = *(_QWORD **)(result + 56);
    v12 = **(_QWORD **)(result + 64);
    v13 = **(_QWORD **)(result + 136);
    v14 = 8191.0 / (float)*(unsigned int *)(v10 + 128);
    v15 = *(float *)(v10 + 72);
    v16 = *(float *)(v10 + 76);
    v17 = *(float *)(v10 + 80);
    v18 = *(float *)(v10 + 84);
    v19 = *(float *)(v10 + 88);
    v20 = *(float *)(v10 + 92);
    v21 = *(float *)(v10 + 96);
    v22 = *(float *)(v10 + 100);
    v23 = *(float *)(v10 + 104);
    v24 = v10 + 164;
    v25 = v10 + 16548;
    v26 = *(_QWORD *)(result + 112);
    v27 = *(_QWORD *)(result + 104) * a2 / v3;
    v29 = *(_QWORD *)(result + 120);
    v28 = *(_QWORD **)(result + 128);
    result = *(_QWORD *)(result + 36);
    v30 = *v28 + (v27 + v29) * v13 + 8 * v26;
    v31 = *v11 + v12 * v8 + 8 * result;
    do
    {
      if (v7)
      {
        v32 = v7;
        result = v31;
        v33 = (_WORD *)v30;
        do
        {
          _H21 = *(_WORD *)(v24
                          + 2
                          * llroundf(fminf(fmaxf(v14 * (float)(bswap32(*(unsigned __int16 *)(result + 2)) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S21, H21 }
          _H22 = *(_WORD *)(v24
                          + 2
                          * llroundf(fminf(fmaxf(v14 * (float)(bswap32(*(unsigned __int16 *)(result + 4)) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S22, H22 }
          _H23 = *(_WORD *)(v24
                          + 2
                          * llroundf(fminf(fmaxf(v14 * (float)(bswap32(*(unsigned __int16 *)(result + 6)) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S23, H23 }
          _H26 = *(_WORD *)(v25
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v16 * _S22) + (float)(_S21 * v15)) + (float)(_S23 * v17), 0.0), 8191.0)));
          __asm { FCVT            S25, H26 }
          v46 = 65535.0;
          if (_S25 <= 65535.0)
          {
            __asm { FCVT            S24, H26 }
            _NF = _S24 < 0.0;
            v46 = _S25;
            if (_NF)
              v46 = 0.0;
          }
          v48 = *(unsigned __int16 *)result;
          v49 = (float)((float)(v19 * _S22) + (float)(_S21 * v18)) + (float)(_S23 * v20);
          v50 = (float)((float)(v22 * _S22) + (float)(_S21 * v21)) + (float)(_S23 * v23);
          _H22 = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v49, 0.0), 8191.0)));
          _H21 = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v50, 0.0), 8191.0)));
          __asm { FCVT            S25, H22 }
          *v33 = llroundf(v46);
          v54 = 65535.0;
          if (_S25 <= 65535.0)
          {
            __asm { FCVT            S22, H22 }
            v54 = _S25;
            if (_S22 < 0.0)
              v54 = 0.0;
          }
          __asm { FCVT            S24, H21 }
          v33[1] = llroundf(v54);
          v57 = 65535.0;
          if (_S24 <= 65535.0)
          {
            __asm { FCVT            S21, H21 }
            v57 = _S24;
            if (_S21 < 0.0)
              v57 = 0.0;
          }
          result += 8;
          v33[2] = llroundf(v57);
          v33[3] = bswap32(v48) >> 16;
          v33 += 4;
          --v32;
        }
        while (v32);
      }
      v31 += v12;
      v30 += v13;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_b64a_rgb_l64r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_rgb_l64r_GCD);
  return 0;
}

unint64_t vt_Copy_b64a_rgb_l64r_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int16 *v21;
  _WORD *v22;
  unsigned int v23;
  float v24;
  float v25;
  unsigned int v26;
  unsigned int v27;
  float v28;
  float v29;
  float v30;
  float v31;

  v2 = *(_QWORD *)(result + 28);
  v3 = *(unsigned __int8 *)result;
  v4 = v2 * a2 / v3;
  v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    v6 = 0;
    v7 = *(_QWORD *)(result + 20);
    v8 = v4 + *(_QWORD *)(result + 44);
    v9 = v5 - v4;
    v10 = *(_QWORD **)(result + 56);
    v11 = **(_QWORD **)(result + 64);
    v12 = **(_QWORD **)(result + 136);
    v13 = (float)*(unsigned int *)(*(_QWORD *)(result + 152) + 136)
        / (float)*(unsigned int *)(*(_QWORD *)(result + 152) + 128);
    v14 = *(_QWORD *)(result + 112);
    v15 = *(_QWORD *)(result + 104) * a2 / v3;
    v16 = *(_QWORD *)(result + 120);
    v17 = *(_QWORD **)(result + 128);
    result = *(_QWORD *)(result + 36);
    v18 = *v17 + (v15 + v16) * v12 + 8 * v14;
    v19 = *v10 + v11 * v8 + 8 * result;
    do
    {
      if (v7)
      {
        v20 = v7;
        v21 = (unsigned __int16 *)v19;
        v22 = (_WORD *)v18;
        do
        {
          v23 = bswap32(v21[1]);
          v24 = v13 * (float)HIWORD(v23);
          v25 = 65535.0;
          if (v24 <= 65535.0)
          {
            v25 = v13 * (float)HIWORD(v23);
            if (v24 < 0.0)
              v25 = 0.0;
          }
          v26 = v21[3];
          v27 = *v21;
          v28 = v13 * (float)(bswap32(v21[2]) >> 16);
          *v22 = llroundf(v25);
          v29 = 65535.0;
          if (v28 <= 65535.0)
          {
            v29 = v28;
            if (v28 < 0.0)
              v29 = 0.0;
          }
          v30 = v13 * (float)(bswap32(v26) >> 16);
          v22[1] = llroundf(v29);
          v31 = 65535.0;
          if (v30 <= 65535.0)
          {
            v31 = v30;
            if (v30 < 0.0)
              v31 = 0.0;
          }
          result = bswap32(v27) >> 16;
          v21 += 4;
          v22[2] = llroundf(v31);
          v22[3] = result;
          v22 += 4;
          --v20;
        }
        while (v20);
      }
      v19 += v11;
      v18 += v12;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_b64a_TRC_Tone_Mat_TRC_b64a(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_TRC_Tone_Mat_TRC_b64a_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_TRC_Tone_Mat_TRC_b64a_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  __int16 *v32;
  _WORD *v33;
  float v44;
  float v45;
  float v48;
  float v49;
  float v50;
  float v53;
  float v57;
  float v61;
  __int16 v63;

  v2 = *(_QWORD *)(result + 28);
  v3 = *result;
  v4 = v2 * a2 / v3;
  v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    v6 = 0;
    v7 = *(unsigned __int8 **)(result + 20);
    v8 = v4 + *(_QWORD *)(result + 44);
    v9 = v5 - v4;
    v10 = *((_QWORD *)result + 19);
    v11 = **((_QWORD **)result + 8);
    v12 = **((_QWORD **)result + 17);
    v13 = 8191.0 / (float)*(unsigned int *)(v10 + 128);
    v14 = *(float *)(v10 + 72);
    v15 = *(float *)(v10 + 76);
    v16 = *(float *)(v10 + 80);
    v17 = *(float *)(v10 + 84);
    v18 = *(float *)(v10 + 88);
    v19 = *(float *)(v10 + 92);
    v20 = *(float *)(v10 + 96);
    v21 = *(float *)(v10 + 100);
    v22 = v10 + 164;
    v23 = v10 + 16548;
    v24 = v10 + 32932;
    v25 = *(float *)(v10 + 104);
    v26 = *(float *)(v10 + 108);
    v27 = *(float *)(v10 + 112);
    v28 = *(float *)(v10 + 116);
    v29 = *(float *)(v10 + 120);
    v30 = **((_QWORD **)result + 16)
        + (*((_QWORD *)result + 13) * a2 / v3 + *((_QWORD *)result + 15)) * v12
        + 8 * *((_QWORD *)result + 14);
    v31 = **((_QWORD **)result + 7) + v11 * v8 + 8 * *(_QWORD *)(result + 36);
    result = (unsigned __int8 *)&unk_1928DF000;
    do
    {
      if (v7)
      {
        result = v7;
        v32 = (__int16 *)v31;
        v33 = (_WORD *)v30;
        do
        {
          _H25 = *(_WORD *)(v22
                          + 2
                          * llroundf(fminf(fmaxf(v13 * (float)(bswap32((unsigned __int16)v32[1]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          _H26 = *(_WORD *)(v22
                          + 2
                          * llroundf(fminf(fmaxf(v13 * (float)(bswap32((unsigned __int16)v32[2]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S27, H26 }
          _H26 = *(_WORD *)(v22
                          + 2
                          * llroundf(fminf(fmaxf(v13 * (float)(bswap32((unsigned __int16)v32[3]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S29, H26 }
          v44 = (float)((float)((float)(v27 * _S27) + (float)(v26 * _S25)) + (float)(v28 * _S29))
              + (float)(v29 * fmaxf(_S25, fmaxf(_S27, _S29)));
          v45 = 8191.0;
          if (v44 <= 8191.0)
          {
            v45 = v44;
            if (v44 < 0.0)
              v45 = 0.0;
          }
          _H26 = *(_WORD *)(v23 + 2 * llroundf(v45));
          __asm { FCVT            S30, H26 }
          v48 = _S25 * _S30;
          v49 = _S27 * _S30;
          v50 = _S29 * _S30;
          _H30 = *(_WORD *)(v24
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v15 * v49) + (float)((float)(_S25 * _S30) * v14))+ (float)((float)(_S29 * _S30) * v16), 0.0), 8191.0)));
          __asm { FCVT            S29, H30 }
          v53 = 65535.0;
          if (_S29 <= 65535.0)
          {
            __asm { FCVT            S25, H30 }
            _NF = _S25 < 0.0;
            v53 = _S29;
            if (_NF)
              v53 = 0.0;
          }
          _H31 = *(_WORD *)(v24
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v18 * v49) + (float)(v48 * v17)) + (float)(v50 * v19), 0.0), 8191.0)));
          __asm { FCVT            S30, H31 }
          v57 = 65535.0;
          if (_S30 <= 65535.0)
          {
            __asm { FCVT            S29, H31 }
            _NF = _S29 < 0.0;
            v57 = _S30;
            if (_NF)
              v57 = 0.0;
          }
          _H28 = *(_WORD *)(v24
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v21 * v49) + (float)(v48 * v20)) + (float)(v50 * v25), 0.0), 8191.0)));
          __asm { FCVT            S27, H28 }
          v61 = 65535.0;
          if (_S27 <= 65535.0)
          {
            __asm { FCVT            S26, H28 }
            _NF = _S26 < 0.0;
            v61 = _S27;
            if (_NF)
              v61 = 0.0;
          }
          v63 = *v32;
          v32 += 4;
          *v33 = v63;
          v33[1] = __rev16(llroundf(v53));
          v33[2] = __rev16(llroundf(v57));
          v33[3] = __rev16(llroundf(v61));
          v33 += 4;
          --result;
        }
        while (result);
      }
      v31 += v11;
      v30 += v12;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_b64a_TRC_Mat_TRC_b64a(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_TRC_Mat_TRC_b64a_GCD);
  return 0;
}

uint64_t vt_Copy_b64a_TRC_Mat_TRC_b64a_GCD(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _WORD *v33;
  float v46;
  float v50;
  float v54;
  __int16 v56;

  v2 = *(_QWORD *)(result + 28);
  v3 = *(unsigned __int8 *)result;
  v4 = v2 * a2 / v3;
  v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    v6 = 0;
    v7 = *(_QWORD *)(result + 20);
    v8 = v4 + *(_QWORD *)(result + 44);
    v9 = v5 - v4;
    v10 = *(_QWORD *)(result + 152);
    v11 = *(_QWORD **)(result + 56);
    v12 = **(_QWORD **)(result + 64);
    v13 = **(_QWORD **)(result + 136);
    v14 = 8191.0 / (float)*(unsigned int *)(v10 + 128);
    v15 = *(float *)(v10 + 72);
    v16 = *(float *)(v10 + 76);
    v17 = *(float *)(v10 + 80);
    v18 = *(float *)(v10 + 84);
    v19 = *(float *)(v10 + 88);
    v20 = *(float *)(v10 + 92);
    v21 = *(float *)(v10 + 96);
    v22 = *(float *)(v10 + 100);
    v23 = *(float *)(v10 + 104);
    v24 = v10 + 164;
    v25 = v10 + 16548;
    v26 = *(_QWORD *)(result + 112);
    v27 = *(_QWORD *)(result + 104) * a2 / v3;
    v29 = *(_QWORD *)(result + 120);
    v28 = *(_QWORD **)(result + 128);
    result = *(_QWORD *)(result + 36);
    v30 = *v28 + (v27 + v29) * v13 + 8 * v26;
    v31 = *v11 + v12 * v8 + 8 * result;
    do
    {
      if (v7)
      {
        v32 = v7;
        result = v31;
        v33 = (_WORD *)v30;
        do
        {
          _H21 = *(_WORD *)(v24
                          + 2
                          * llroundf(fminf(fmaxf(v14 * (float)(bswap32(*(unsigned __int16 *)(result + 2)) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S22, H21 }
          _H21 = *(_WORD *)(v24
                          + 2
                          * llroundf(fminf(fmaxf(v14 * (float)(bswap32(*(unsigned __int16 *)(result + 4)) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S23, H21 }
          _H21 = *(_WORD *)(v24
                          + 2
                          * llroundf(fminf(fmaxf(v14 * (float)(bswap32(*(unsigned __int16 *)(result + 6)) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S24, H21 }
          _H26 = *(_WORD *)(v25
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v16 * _S23) + (float)(_S22 * v15)) + (float)(_S24 * v17), 0.0), 8191.0)));
          __asm { FCVT            S25, H26 }
          v46 = 65535.0;
          if (_S25 <= 65535.0)
          {
            __asm { FCVT            S21, H26 }
            _NF = _S21 < 0.0;
            v46 = _S25;
            if (_NF)
              v46 = 0.0;
          }
          _H27 = *(_WORD *)(v25
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v19 * _S23) + (float)(_S22 * v18)) + (float)(_S24 * v20), 0.0), 8191.0)));
          __asm { FCVT            S26, H27 }
          v50 = 65535.0;
          if (_S26 <= 65535.0)
          {
            __asm { FCVT            S25, H27 }
            _NF = _S25 < 0.0;
            v50 = _S26;
            if (_NF)
              v50 = 0.0;
          }
          _H24 = *(_WORD *)(v25
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v22 * _S23) + (float)(_S22 * v21)) + (float)(_S24 * v23), 0.0), 8191.0)));
          __asm { FCVT            S23, H24 }
          v54 = 65535.0;
          if (_S23 <= 65535.0)
          {
            __asm { FCVT            S22, H24 }
            _NF = _S22 < 0.0;
            v54 = _S23;
            if (_NF)
              v54 = 0.0;
          }
          v56 = *(_WORD *)result;
          result += 8;
          *v33 = v56;
          v33[1] = __rev16(llroundf(v46));
          v33[2] = __rev16(llroundf(v50));
          v33[3] = __rev16(llroundf(v54));
          v33 += 4;
          --v32;
        }
        while (v32);
      }
      v31 += v12;
      v30 += v13;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_b64a_rgb_b64a(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_rgb_b64a_GCD);
  return 0;
}

unint64_t vt_Copy_b64a_rgb_b64a_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int16 *v21;
  _WORD *v22;
  unsigned int v23;
  float v24;
  float v25;
  unsigned int v26;
  float v27;
  float v28;
  unsigned int v29;
  float v30;
  float v31;
  unsigned int v32;

  v2 = *(_QWORD *)(result + 28);
  v3 = *(unsigned __int8 *)result;
  v4 = v2 * a2 / v3;
  v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    v6 = 0;
    v7 = *(_QWORD *)(result + 20);
    v8 = v4 + *(_QWORD *)(result + 44);
    v9 = v5 - v4;
    v10 = *(_QWORD **)(result + 56);
    v11 = **(_QWORD **)(result + 64);
    v12 = **(_QWORD **)(result + 136);
    v13 = (float)*(unsigned int *)(*(_QWORD *)(result + 152) + 136)
        / (float)*(unsigned int *)(*(_QWORD *)(result + 152) + 128);
    v14 = *(_QWORD *)(result + 112);
    v15 = *(_QWORD *)(result + 104) * a2 / v3;
    v16 = *(_QWORD *)(result + 120);
    v17 = *(_QWORD **)(result + 128);
    result = *(_QWORD *)(result + 36);
    v18 = *v17 + (v15 + v16) * v12 + 8 * v14;
    v19 = *v10 + v11 * v8 + 8 * result;
    do
    {
      if (v7)
      {
        v20 = v7;
        v21 = (unsigned __int16 *)v19;
        v22 = (_WORD *)v18;
        do
        {
          v23 = bswap32(v21[1]);
          v24 = v13 * (float)HIWORD(v23);
          v25 = 65535.0;
          if (v24 <= 65535.0)
          {
            v25 = v13 * (float)HIWORD(v23);
            if (v24 < 0.0)
              v25 = 0.0;
          }
          v26 = bswap32(v21[2]);
          v27 = v13 * (float)HIWORD(v26);
          v28 = 65535.0;
          if (v27 <= 65535.0)
          {
            v28 = v13 * (float)HIWORD(v26);
            if (v27 < 0.0)
              v28 = 0.0;
          }
          v29 = bswap32(v21[3]);
          v30 = v13 * (float)HIWORD(v29);
          v31 = 65535.0;
          if (v30 <= 65535.0)
          {
            v31 = v13 * (float)HIWORD(v29);
            if (v30 < 0.0)
              v31 = 0.0;
          }
          v32 = *v21;
          v21 += 4;
          result = v32;
          *v22 = v32;
          v22[1] = __rev16(llroundf(v25));
          v22[2] = __rev16(llroundf(v28));
          v22[3] = __rev16(llroundf(v31));
          v22 += 4;
          --v20;
        }
        while (v20);
      }
      v19 += v11;
      v18 += v12;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_b64a_TRC_Tone_Mat_TRC_RGhA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_TRC_Tone_Mat_TRC_RGhA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_TRC_Tone_Mat_TRC_RGhA_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int16 *v32;
  _WORD *v33;
  float v44;
  float v45;
  unsigned int v46;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;

  v2 = *(_QWORD *)(result + 28);
  v3 = *result;
  v4 = v2 * a2 / v3;
  v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    v6 = 0;
    v7 = *(unsigned __int8 **)(result + 20);
    v8 = v4 + *(_QWORD *)(result + 44);
    v9 = v5 - v4;
    v10 = *((_QWORD *)result + 19);
    v11 = **((_QWORD **)result + 8);
    v12 = **((_QWORD **)result + 17);
    v13 = 8191.0 / (float)*(unsigned int *)(v10 + 128);
    v14 = *(float *)(v10 + 72);
    v15 = *(float *)(v10 + 76);
    v16 = *(float *)(v10 + 80);
    v17 = *(float *)(v10 + 84);
    v18 = *(float *)(v10 + 88);
    v19 = *(float *)(v10 + 92);
    v20 = *(float *)(v10 + 96);
    v21 = *(float *)(v10 + 100);
    v22 = v10 + 164;
    v23 = v10 + 16548;
    v24 = v10 + 32932;
    v25 = *(float *)(v10 + 104);
    v26 = *(float *)(v10 + 108);
    v27 = *(float *)(v10 + 112);
    v28 = *(float *)(v10 + 116);
    v29 = *(float *)(v10 + 120);
    v30 = **((_QWORD **)result + 16)
        + (*((_QWORD *)result + 13) * a2 / v3 + *((_QWORD *)result + 15)) * v12
        + 8 * *((_QWORD *)result + 14);
    v31 = **((_QWORD **)result + 7) + v11 * v8 + 8 * *(_QWORD *)(result + 36);
    result = (unsigned __int8 *)&unk_1928E2000;
    do
    {
      if (v7)
      {
        result = v7;
        v32 = (unsigned __int16 *)v31;
        v33 = (_WORD *)v30;
        do
        {
          _H25 = *(_WORD *)(v22 + 2 * llroundf(fminf(fmaxf(v13 * (float)(bswap32(v32[1]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          _H26 = *(_WORD *)(v22 + 2 * llroundf(fminf(fmaxf(v13 * (float)(bswap32(v32[2]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)(v22 + 2 * llroundf(fminf(fmaxf(v13 * (float)(bswap32(v32[3]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          v44 = (float)((float)((float)(v27 * _S26) + (float)(v26 * _S25)) + (float)(v28 * _S27))
              + (float)(v29 * fmaxf(_S25, fmaxf(_S26, _S27)));
          v45 = 8191.0;
          if (v44 <= 8191.0)
          {
            v45 = v44;
            if (v44 < 0.0)
              v45 = 0.0;
          }
          v46 = *v32;
          v32 += 4;
          _H28 = *(_WORD *)(v23 + 2 * llroundf(v45));
          __asm { FCVT            S28, H28 }
          v49 = _S25 * _S28;
          v50 = _S26 * _S28;
          v51 = _S27 * _S28;
          v52 = (float)((float)(v15 * v50) + (float)(v49 * v14)) + (float)(v51 * v16);
          v53 = (float)((float)(v18 * v50) + (float)(v49 * v17)) + (float)(v51 * v19);
          _S25 = (float)((float)(v21 * v50) + (float)(v49 * v20)) + (float)(v51 * v25);
          LOWORD(v50) = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v52, 0.0), 8191.0)));
          LOWORD(v51) = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v53, 0.0), 8191.0)));
          LOWORD(_S25) = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(_S25, 0.0), 8191.0)));
          _S28 = (float)(bswap32(v46) >> 16) * 0.000015259;
          *v33 = LOWORD(v50);
          v33[1] = LOWORD(v51);
          v33[2] = LOWORD(_S25);
          __asm { FCVT            H25, S28 }
          v33[3] = LOWORD(_S25);
          v33 += 4;
          --result;
        }
        while (result);
      }
      v31 += v11;
      v30 += v12;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_b64a_TRC_Mat_TRC_RGhA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_TRC_Mat_TRC_RGhA_GCD);
  return 0;
}

uint64_t vt_Copy_b64a_TRC_Mat_TRC_RGhA_GCD(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _WORD *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  float v48;
  float v49;
  unsigned int v51;

  v2 = *(_QWORD *)(result + 28);
  v3 = *(unsigned __int8 *)result;
  v4 = v2 * a2 / v3;
  v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    v6 = 0;
    v7 = *(_QWORD *)(result + 20);
    v8 = v4 + *(_QWORD *)(result + 44);
    v9 = v5 - v4;
    v10 = *(_QWORD *)(result + 152);
    v11 = *(_QWORD **)(result + 56);
    v12 = **(_QWORD **)(result + 64);
    v13 = **(_QWORD **)(result + 136);
    v14 = 8191.0 / (float)*(unsigned int *)(v10 + 128);
    v15 = *(float *)(v10 + 72);
    v16 = *(float *)(v10 + 76);
    v17 = *(float *)(v10 + 80);
    v18 = *(float *)(v10 + 84);
    v19 = *(float *)(v10 + 88);
    v20 = *(float *)(v10 + 92);
    v21 = *(float *)(v10 + 96);
    v22 = *(float *)(v10 + 100);
    v23 = *(float *)(v10 + 104);
    v24 = v10 + 164;
    v25 = v10 + 16548;
    v26 = *(_QWORD *)(result + 112);
    v27 = *(_QWORD *)(result + 104) * a2 / v3;
    v29 = *(_QWORD *)(result + 120);
    v28 = *(_QWORD **)(result + 128);
    result = *(_QWORD *)(result + 36);
    v30 = *v28 + (v27 + v29) * v13 + 8 * v26;
    v31 = *v11 + v12 * v8 + 8 * result;
    do
    {
      if (v7)
      {
        v32 = v7;
        result = v31;
        v33 = (_WORD *)v30;
        do
        {
          v34 = *(unsigned __int16 *)(result + 4);
          v35 = *(unsigned __int16 *)(result + 2);
          v36 = *(unsigned __int16 *)(result + 6);
          v37 = *(unsigned __int16 *)result;
          result += 8;
          _H21 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v14 * (float)(bswap32(v35) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S21, H21 }
          _H22 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v14 * (float)(bswap32(v34) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S22, H22 }
          _H23 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v14 * (float)(bswap32(v36) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S23, H23 }
          v48 = (float)((float)(v16 * _S22) + (float)(_S21 * v15)) + (float)(_S23 * v17);
          v49 = (float)((float)(v19 * _S22) + (float)(_S21 * v18)) + (float)(_S23 * v20);
          _S21 = (float)((float)(v22 * _S22) + (float)(_S21 * v21)) + (float)(_S23 * v23);
          LOWORD(_S22) = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v48, 0.0), 8191.0)));
          v51 = llroundf(fminf(fmaxf(_S21, 0.0), 8191.0));
          LOWORD(_S21) = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v49, 0.0), 8191.0)));
          LOWORD(_S23) = *(_WORD *)(v25 + 2 * v51);
          _S24 = (float)(bswap32(v37) >> 16) * 0.000015259;
          *v33 = LOWORD(_S22);
          v33[1] = LOWORD(_S21);
          v33[2] = LOWORD(_S23);
          __asm { FCVT            H21, S24 }
          v33[3] = LOWORD(_S21);
          v33 += 4;
          --v32;
        }
        while (v32);
      }
      v31 += v12;
      v30 += v13;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_b64a_rgb_RGhA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_rgb_RGhA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_rgb_RGhA_GCD(unsigned __int8 *result, uint64_t a2, double a3, int32x2_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int32x4_t v22;
  float32x4_t v23;
  uint64_t v24;
  int8x8_t *v25;
  int8x8_t *v26;
  int8x8_t v27;
  int8x8_t v28;

  v4 = *(_QWORD *)(result + 28);
  v5 = *result;
  v6 = v4 * a2 / v5;
  v7 = (v4 + v4 * a2) / v5;
  if (v7 != v6)
  {
    v8 = 0;
    v9 = *(_QWORD *)(result + 20);
    v10 = v6 + *(_QWORD *)(result + 44);
    v11 = v7 - v6;
    v12 = (_QWORD *)*((_QWORD *)result + 7);
    v13 = **((_QWORD **)result + 8);
    v14 = **((_QWORD **)result + 17);
    v15 = 1.0 / (float)*(unsigned int *)(*((_QWORD *)result + 19) + 128);
    v16 = *((_QWORD *)result + 14);
    v17 = *((_QWORD *)result + 13) * a2 / v5;
    v18 = *((_QWORD *)result + 15);
    v19 = (_QWORD *)*((_QWORD *)result + 16);
    result = *(unsigned __int8 **)(result + 36);
    v20 = *v19 + (v17 + v18) * v14 + 8 * v16;
    v21 = *v12 + v13 * v10 + 8 * (_QWORD)result;
    a4.i32[0] = 931135616;
    v22 = vdupq_lane_s32(a4, 0);
    *(float *)v22.i32 = v15;
    v23 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.i8, 0);
    v23.i32[0] = 931135616;
    do
    {
      if (v9)
      {
        v24 = v9;
        v25 = (int8x8_t *)v21;
        v26 = (int8x8_t *)v20;
        do
        {
          v27 = *v25++;
          v28 = (int8x8_t)vcvt_f16_f32(vmulq_f32(v23, vcvtq_f32_u32(vmovl_u16((uint16x4_t)vrev16_s8(v27)))));
          *v26++ = vext_s8(v28, v28, 2uLL);
          --v24;
        }
        while (v24);
      }
      v21 += v13;
      v20 += v14;
      ++v8;
    }
    while (v8 != v11);
  }
  return result;
}

uint64_t vt_Copy_b64a_TRC_Tone_Mat_TRC_RGfA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_TRC_Tone_Mat_TRC_RGfA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_TRC_Tone_Mat_TRC_RGfA_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int16 *v32;
  uint64_t v33;
  float v44;
  float v45;
  unsigned int v46;
  float v49;
  float v52;
  float v53;

  v2 = *(_QWORD *)(result + 28);
  v3 = *result;
  v4 = v2 * a2 / v3;
  v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    v6 = 0;
    v7 = *(unsigned __int8 **)(result + 20);
    v8 = v4 + *(_QWORD *)(result + 44);
    v9 = v5 - v4;
    v10 = *((_QWORD *)result + 19);
    v11 = **((_QWORD **)result + 8);
    v12 = **((_QWORD **)result + 17);
    v13 = 8191.0 / (float)*(unsigned int *)(v10 + 128);
    v14 = *(float *)(v10 + 72);
    v15 = *(float *)(v10 + 76);
    v16 = *(float *)(v10 + 80);
    v17 = *(float *)(v10 + 84);
    v18 = *(float *)(v10 + 88);
    v19 = *(float *)(v10 + 92);
    v20 = *(float *)(v10 + 96);
    v21 = *(float *)(v10 + 100);
    v22 = v10 + 164;
    v23 = v10 + 16548;
    v24 = v10 + 32932;
    v25 = *(float *)(v10 + 104);
    v26 = *(float *)(v10 + 108);
    v27 = *(float *)(v10 + 112);
    v28 = *(float *)(v10 + 116);
    v29 = *(float *)(v10 + 120);
    v30 = **((_QWORD **)result + 16)
        + (*((_QWORD *)result + 13) * a2 / v3 + *((_QWORD *)result + 15)) * v12
        + 16 * *((_QWORD *)result + 14);
    v31 = **((_QWORD **)result + 7) + v11 * v8 + 8 * *(_QWORD *)(result + 36);
    result = (unsigned __int8 *)&unk_1928E2000;
    do
    {
      if (v7)
      {
        result = v7;
        v32 = (unsigned __int16 *)v31;
        v33 = v30;
        do
        {
          _H25 = *(_WORD *)(v22 + 2 * llroundf(fminf(fmaxf(v13 * (float)(bswap32(v32[1]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          _H26 = *(_WORD *)(v22 + 2 * llroundf(fminf(fmaxf(v13 * (float)(bswap32(v32[2]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)(v22 + 2 * llroundf(fminf(fmaxf(v13 * (float)(bswap32(v32[3]) >> 16), 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          v44 = (float)((float)((float)(v27 * _S26) + (float)(v26 * _S25)) + (float)(v28 * _S27))
              + (float)(v29 * fmaxf(_S25, fmaxf(_S26, _S27)));
          v45 = 8191.0;
          if (v44 <= 8191.0)
          {
            v45 = v44;
            if (v44 < 0.0)
              v45 = 0.0;
          }
          v46 = *v32;
          v32 += 4;
          _H28 = *(_WORD *)(v23 + 2 * llroundf(v45));
          __asm { FCVT            S28, H28 }
          v49 = _S25 * _S28;
          _S26 = _S26 * _S28;
          _S27 = _S27 * _S28;
          v52 = (float)((float)(v15 * _S26) + (float)(v49 * v14)) + (float)(_S27 * v16);
          v53 = (float)((float)(v18 * _S26) + (float)(v49 * v17)) + (float)(_S27 * v19);
          _S25 = (float)((float)(v21 * _S26) + (float)(v49 * v20)) + (float)(_S27 * v25);
          LOWORD(_S26) = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v52, 0.0), 8191.0)));
          LOWORD(_S27) = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v53, 0.0), 8191.0)));
          __asm
          {
            FCVT            S26, H26
            FCVT            S27, H27
          }
          LOWORD(_S25) = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(_S25, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          *(_DWORD *)v33 = _S26;
          *(_DWORD *)(v33 + 4) = _S27;
          *(_DWORD *)(v33 + 8) = _S25;
          *(float *)(v33 + 12) = (float)(bswap32(v46) >> 16) * 0.000015259;
          v33 += 16;
          --result;
        }
        while (result);
      }
      v31 += v11;
      v30 += v12;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_b64a_TRC_Mat_TRC_RGfA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_TRC_Mat_TRC_RGfA_GCD);
  return 0;
}

uint64_t vt_Copy_b64a_TRC_Mat_TRC_RGfA_GCD(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  float v48;
  float v49;
  float v50;
  unsigned int v52;

  v2 = *(_QWORD *)(result + 28);
  v3 = *(unsigned __int8 *)result;
  v4 = v2 * a2 / v3;
  v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    v6 = 0;
    v7 = *(_QWORD *)(result + 20);
    v8 = v4 + *(_QWORD *)(result + 44);
    v9 = v5 - v4;
    v10 = *(_QWORD *)(result + 152);
    v11 = *(_QWORD **)(result + 56);
    v12 = **(_QWORD **)(result + 64);
    v13 = **(_QWORD **)(result + 136);
    v14 = 8191.0 / (float)*(unsigned int *)(v10 + 128);
    v15 = *(float *)(v10 + 72);
    v16 = *(float *)(v10 + 76);
    v17 = *(float *)(v10 + 80);
    v18 = *(float *)(v10 + 84);
    v19 = *(float *)(v10 + 88);
    v20 = *(float *)(v10 + 92);
    v21 = *(float *)(v10 + 96);
    v22 = *(float *)(v10 + 100);
    v23 = *(float *)(v10 + 104);
    v24 = v10 + 164;
    v25 = v10 + 16548;
    v26 = *(_QWORD *)(result + 112);
    v27 = *(_QWORD *)(result + 104) * a2 / v3;
    v29 = *(_QWORD *)(result + 120);
    v28 = *(_QWORD **)(result + 128);
    result = *(_QWORD *)(result + 36);
    v30 = *v28 + (v27 + v29) * v13 + 16 * v26;
    v31 = *v11 + v12 * v8 + 8 * result;
    do
    {
      if (v7)
      {
        v32 = v7;
        result = v31;
        v33 = v30;
        do
        {
          v34 = *(unsigned __int16 *)(result + 2);
          v35 = *(unsigned __int16 *)(result + 4);
          v36 = *(unsigned __int16 *)(result + 6);
          v37 = *(unsigned __int16 *)result;
          result += 8;
          _H22 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v14 * (float)(bswap32(v35) >> 16), 0.0), 8191.0)));
          _H23 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v14 * (float)(bswap32(v34) >> 16), 0.0), 8191.0)));
          _H21 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v14 * (float)(bswap32(v36) >> 16), 0.0), 8191.0)));
          __asm
          {
            FCVT            S23, H23
            FCVT            S22, H22
            FCVT            S21, H21
          }
          v48 = (float)((float)(v16 * _S22) + (float)(_S23 * v15)) + (float)(_S21 * v17);
          v49 = (float)((float)(v19 * _S22) + (float)(_S23 * v18)) + (float)(_S21 * v20);
          v50 = (float)((float)(v22 * _S22) + (float)(_S23 * v21)) + (float)(_S21 * v23);
          LOWORD(_S22) = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v48, 0.0), 8191.0)));
          LOWORD(_S23) = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v49, 0.0), 8191.0)));
          __asm { FCVT            S22, H22 }
          v52 = llroundf(fminf(fmaxf(v50, 0.0), 8191.0));
          __asm { FCVT            S21, H23 }
          LOWORD(_S23) = *(_WORD *)(v25 + 2 * v52);
          __asm { FCVT            S23, H23 }
          *(_DWORD *)v33 = _S22;
          *(_DWORD *)(v33 + 4) = _S21;
          *(_DWORD *)(v33 + 8) = _S23;
          *(float *)(v33 + 12) = (float)(bswap32(v37) >> 16) * 0.000015259;
          v33 += 16;
          --v32;
        }
        while (v32);
      }
      v31 += v12;
      v30 += v13;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_b64a_rgb_RGfA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_b64a_rgb_RGfA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_b64a_rgb_RGfA_GCD(unsigned __int8 *result, uint64_t a2, double a3, int32x2_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int32x4_t v22;
  float32x4_t v23;
  uint64_t v24;
  int8x8_t *v25;
  int8x16_t *v26;
  int8x8_t v27;
  int8x16_t v28;

  v4 = *(_QWORD *)(result + 28);
  v5 = *result;
  v6 = v4 * a2 / v5;
  v7 = (v4 + v4 * a2) / v5;
  if (v7 != v6)
  {
    v8 = 0;
    v9 = *(_QWORD *)(result + 20);
    v10 = v6 + *(_QWORD *)(result + 44);
    v11 = v7 - v6;
    v12 = (_QWORD *)*((_QWORD *)result + 7);
    v13 = **((_QWORD **)result + 8);
    v14 = **((_QWORD **)result + 17);
    v15 = 1.0 / (float)*(unsigned int *)(*((_QWORD *)result + 19) + 128);
    v16 = *((_QWORD *)result + 14);
    v17 = *((_QWORD *)result + 13) * a2 / v5;
    v18 = *((_QWORD *)result + 15);
    v19 = (_QWORD *)*((_QWORD *)result + 16);
    result = *(unsigned __int8 **)(result + 36);
    v20 = *v19 + (v17 + v18) * v14 + 16 * v16;
    v21 = *v12 + v13 * v10 + 8 * (_QWORD)result;
    a4.i32[0] = 931135616;
    v22 = vdupq_lane_s32(a4, 0);
    *(float *)v22.i32 = v15;
    v23 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.i8, 0);
    v23.i32[0] = 931135616;
    do
    {
      if (v9)
      {
        v24 = v9;
        v25 = (int8x8_t *)v21;
        v26 = (int8x16_t *)v20;
        do
        {
          v27 = *v25++;
          v28 = (int8x16_t)vmulq_f32(v23, vcvtq_f32_u32(vmovl_u16((uint16x4_t)vrev16_s8(v27))));
          *v26++ = vextq_s8(v28, v28, 4uLL);
          --v24;
        }
        while (v24);
      }
      v21 += v13;
      v20 += v14;
      ++v8;
    }
    while (v8 != v11);
  }
  return result;
}

CFTypeRef VTImageRotationSessionRetain(CFTypeRef cf)
{
  if (cf)
    CFRetain(cf);
  return cf;
}

void VTImageRotationSessionRelease(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

uint64_t VTImageRotationSessionCreate(const __CFAllocator *a1, int a2, VTPixelRotationSessionRef *pixelRotationSessionOut)
{
  uint64_t result;
  CFTypeRef *v6;

  if (a2 > 179)
  {
    if (a2 != 180 && a2 != 270)
      return FigSignalErrorAt();
  }
  else if (a2 && a2 != 90)
  {
    return FigSignalErrorAt();
  }
  if (pixelRotationSessionOut)
  {
    result = VTPixelRotationSessionCreate(a1, pixelRotationSessionOut);
    if ((_DWORD)result)
      return result;
    switch(a2)
    {
      case 90:
        v6 = (CFTypeRef *)&kVTRotation_CW90;
        break;
      case 270:
        v6 = (CFTypeRef *)&kVTRotation_CCW90;
        break;
      case 180:
        v6 = (CFTypeRef *)&kVTRotation_180;
        break;
      default:
LABEL_18:
        VTSessionSetProperty(*pixelRotationSessionOut, CFSTR("EnableGPUAcceleratedTransfer"), (CFTypeRef)*MEMORY[0x1E0C9AE40]);
        return 0;
    }
    if (*v6)
      VTSessionSetProperty(*pixelRotationSessionOut, CFSTR("Rotation"), *v6);
    goto LABEL_18;
  }
  return 0;
}

uint64_t vtCopyPlane(char *__src, uint64_t a2, char *__dst, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  size_t v12;

  if (a6)
  {
    v7 = a6;
    v12 = a7 * a5;
    do
    {
      memcpy(__dst, __src, v12);
      __src += a2;
      __dst += a4;
      --v7;
    }
    while (v7);
  }
  return 0;
}

vImage_Error vt_Rotate_8(vImagePixelCount *a1, vImagePixelCount *a2, size_t *a3, void **a4, size_t *a5, void **a6, int a7)
{
  uint64_t v10;
  vImagePixelCount v11;
  vImagePixelCount v12;
  size_t v13;
  void *v14;
  size_t v15;
  uint8_t v16;
  vImage_Buffer v18;
  vImage_Buffer src;

  v10 = (uint64_t)*a4;
  v11 = *a2;
  src.data = *a4;
  src.height = v11;
  v12 = *a1;
  v13 = *a3;
  src.width = v12;
  src.rowBytes = v13;
  v14 = *a6;
  v18.data = v14;
  v18.height = v11;
  v15 = *a5;
  v18.width = v12;
  v18.rowBytes = v15;
  if (a7 == 90)
  {
    v16 = 3;
LABEL_8:
    src.height = v12;
    src.width = v11;
    return vImageRotate90_Planar8(&src, &v18, v16, 0, 0);
  }
  if (a7 == 270)
  {
    v16 = 1;
    goto LABEL_8;
  }
  if (a7 != 180)
  {
    v16 = 0;
    return vImageRotate90_Planar8(&src, &v18, v16, 0, 0);
  }
  if ((void *)v10 != v14)
  {
    v16 = 2;
    return vImageRotate90_Planar8(&src, &v18, v16, 0, 0);
  }
  if ((v10 & 0xF) != 0 || (v13 & 0xF) != 0 || (v15 & 0xF) != 0 || (v12 & 0xF) != 0)
    vtRotatePixelRect180_1BPP_inplace(v10, v13, (char *)v10, v15, v12, v11);
  else
    vtRotatePixelRect180_1BPP_inplace_arm((unint64_t *)v10, v13, v10, v15, v12, v11);
  return 0;
}

uint64_t vtRotatePixelRect180_1BPP_inplace(uint64_t result, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v6 = (char *)(a5 + result + (a6 - 1) * a2 - 1);
  if (a6 >= 2)
  {
    v7 = (unint64_t)a6 >> 1;
    do
    {
      if (a5)
      {
        v8 = 0;
        v9 = a3;
        do
        {
          v10 = *v9;
          *v9++ = v6[v8];
          v6[v8--] = v10;
        }
        while (-a5 != v8);
      }
      v6 -= a2;
      a3 += a4;
    }
    while (v7-- > 1);
  }
  if ((a6 & 1) != 0 && (unint64_t)(a5 + 1) >= 3)
  {
    if (a5 >= 0)
      v12 = a5;
    else
      v12 = a5 + 1;
    v13 = v12 >> 1;
    do
    {
      v14 = *a3;
      *a3++ = *v6;
      *v6-- = v14;
      --v13;
    }
    while (v13);
  }
  return result;
}

vImage_Error vt_Rotate_8_90CW(vImagePixelCount *a1, vImagePixelCount *a2, uint64_t *a3, void **a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, void **a8)
{
  vImagePixelCount v8;
  vImagePixelCount v10;
  size_t v16;
  size_t v17;
  vImage_Error result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  BOOL v37;
  vImage_Buffer v38;
  vImage_Buffer src;

  v8 = *a1;
  if (*a1 != *a6)
    return 4294954382;
  v10 = *a2;
  if (*a2 != *a5)
    return 4294954382;
  src.data = *a4;
  src.height = v10;
  v16 = *a3;
  src.width = v8;
  src.rowBytes = v16;
  v38.data = *a8;
  v38.height = v8;
  v17 = *a7;
  v38.width = v10;
  v38.rowBytes = v17;
  result = vImageRotate90_Planar8(&src, &v38, 3u, 0, 0);
  if (result)
  {
    result = vtRotatePixelRect90CW_1BPP_arm((uint64_t)*a4, *a3, (uint64_t)*a8, *a7, *a5, *a6);
    if ((_DWORD)result)
    {
      v19 = *a5;
      if (*a5 >= 1)
      {
        v20 = *a7;
        v21 = *a6;
        v22 = *a7 << 6;
        v23 = -64 * *a3;
        v24 = (char *)*a8;
        v25 = (uint64_t)*a4 + (*a5 - 1) * *a3;
        v26 = -*a3;
        do
        {
          if (v21 >= 1)
          {
            if ((unint64_t)v19 >= 0x40)
              v27 = 64;
            else
              v27 = v19;
            v28 = v21;
            v29 = v24;
            v30 = v25;
            do
            {
              if ((unint64_t)v28 >= 0x40)
                v31 = 64;
              else
                v31 = v28;
              v32 = v27;
              v33 = v29;
              v34 = v30;
              do
              {
                v35 = 0;
                v36 = v33;
                do
                {
                  *v36 = *(_BYTE *)(v34 + v35);
                  v36 += v20;
                  ++v35;
                }
                while (v31 != v35);
                v34 += v26;
                ++v33;
                --v32;
              }
              while (v32);
              v30 += 64;
              v29 += v22;
              v37 = v28 <= 64;
              v28 -= 64;
            }
            while (!v37);
          }
          v25 += v23;
          v24 += 64;
          v37 = v19 <= 64;
          v19 -= 64;
        }
        while (!v37);
      }
      return 0;
    }
  }
  return result;
}

vImage_Error vt_Rotate_8_180(vImagePixelCount *a1, vImagePixelCount *a2, uint64_t *a3, int8x16_t **a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  vImagePixelCount v9;
  int8x16_t *v15;
  int8x16_t *v16;
  vImagePixelCount v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  vImage_Error result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  vImage_Buffer v31;
  vImage_Buffer src;

  v9 = *a1;
  if (*a1 != *a5)
    return 4294954382;
  v15 = *a4;
  v16 = (int8x16_t *)*a8;
  v17 = *a2;
  src.data = v15;
  src.height = v17;
  v18 = *a3;
  src.width = v9;
  src.rowBytes = v18;
  v19 = *a6;
  v31.data = v16;
  v31.height = v19;
  v20 = *a7;
  v31.width = v9;
  v31.rowBytes = v20;
  if (v15 == v16)
  {
    if ((v15 & 0xF) != 0
      || ((v18 | v15) & 0xF) != 0
      || ((v20 | v9) & 0xF) != 0)
    {
      vtRotatePixelRect180_1BPP_inplace((uint64_t)v15, v18, v15->i8, v20, v9, v19);
    }
    else
    {
      vtRotatePixelRect180_1BPP_inplace_arm((unint64_t *)v15, v18, (uint64_t)v15, v20, v9, v19);
    }
    return 0;
  }
  result = vImageRotate90_Planar8(&src, &v31, 2u, 0, 0);
  if (result)
  {
    result = vtRotatePixelRect180_1BPP_arm(*a4, *a3, *a8, *a7, *a5, *a6);
    if ((_DWORD)result)
    {
      v22 = *a6;
      if (*a6)
      {
        v23 = *a7;
        v24 = *a5;
        v25 = *a8;
        v26 = (uint64_t)(*a4)->i64 + *a5 + *a3 * (v22 - 1) - 1;
        v27 = -*a3;
        v28 = -*a5;
        do
        {
          if (v24)
          {
            v29 = 0;
            v30 = (_BYTE *)v25;
            do
              *v30++ = *(_BYTE *)(v26 + v29--);
            while (v28 != v29);
          }
          v26 += v27;
          v25 += v23;
          --v22;
        }
        while (v22);
      }
      return 0;
    }
  }
  return result;
}

vImage_Error vt_Rotate_8_90CCW(vImagePixelCount *a1, vImagePixelCount *a2, uint64_t *a3, void **a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, void **a8)
{
  vImagePixelCount v8;
  vImagePixelCount v10;
  size_t v16;
  size_t v17;
  vImage_Error result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  BOOL v38;
  vImage_Buffer v39;
  vImage_Buffer src;

  v8 = *a1;
  if (*a1 != *a6)
    return 4294954382;
  v10 = *a2;
  if (*a2 != *a5)
    return 4294954382;
  src.data = *a4;
  src.height = v10;
  v16 = *a3;
  src.width = v8;
  src.rowBytes = v16;
  v39.data = *a8;
  v39.height = v8;
  v17 = *a7;
  v39.width = v10;
  v39.rowBytes = v17;
  result = vImageRotate90_Planar8(&src, &v39, 1u, 0, 0);
  if (result)
  {
    result = vtRotatePixelRect90CCW_1BPP_arm((uint64_t)*a4, *a3, (uint64_t)*a8, *a7, *a5, *a6);
    if ((_DWORD)result)
    {
      v19 = *a5;
      if (*a5 >= 1)
      {
        v20 = *a3;
        v21 = *a7;
        v22 = *a6;
        v23 = *a7 << 6;
        v24 = *a3 << 6;
        v25 = (char *)*a8;
        v26 = (uint64_t)*a4 + *a6 - 1;
        do
        {
          if (v22 >= 1)
          {
            if ((unint64_t)v19 >= 0x40)
              v27 = 64;
            else
              v27 = v19;
            v28 = v22;
            v29 = v25;
            v30 = v26;
            do
            {
              if ((unint64_t)v28 >= 0x40)
                v31 = 64;
              else
                v31 = v28;
              v32 = -v31;
              v33 = v27;
              v34 = v29;
              v35 = v30;
              do
              {
                v36 = 0;
                v37 = v34;
                do
                {
                  *v37 = *(_BYTE *)(v35 + v36);
                  v37 += v21;
                  --v36;
                }
                while (v32 != v36);
                v35 += v20;
                ++v34;
                --v33;
              }
              while (v33);
              v30 -= 64;
              v29 += v23;
              v38 = v28 <= 64;
              v28 -= 64;
            }
            while (!v38);
          }
          v26 += v24;
          v25 += 64;
          v38 = v19 <= 64;
          v19 -= 64;
        }
        while (!v38);
      }
      return 0;
    }
  }
  return result;
}

vImage_Error vt_Rotate_16(vImagePixelCount *a1, vImagePixelCount *a2, size_t *a3, void **a4, size_t *a5, void **a6, int a7)
{
  vImagePixelCount v7;
  vImagePixelCount v8;
  size_t v9;
  size_t v10;
  uint8_t v11;
  vImage_Buffer v13;
  vImage_Buffer src;

  v7 = *a2;
  src.data = *a4;
  src.height = v7;
  v8 = *a1;
  v9 = *a3;
  src.width = v8;
  src.rowBytes = v9;
  v13.data = *a6;
  v13.height = v7;
  v10 = *a5;
  v13.width = v8;
  v13.rowBytes = v10;
  switch(a7)
  {
    case 270:
      src.height = v8;
      src.width = v7;
      v11 = 1;
      break;
    case 180:
      v11 = 2;
      break;
    case 90:
      src.height = v8;
      src.width = v7;
      v11 = 3;
      break;
    default:
      v11 = 0;
      break;
  }
  return vImageRotate90_Planar16U(&src, &v13, v11, 0, 0);
}

vImage_Error vt_Rotate_16_90CW(vImagePixelCount *a1, vImagePixelCount *a2, size_t *a3, void **a4, uint64_t *a5, uint64_t *a6, size_t *a7, void **a8)
{
  vImagePixelCount v8;
  vImagePixelCount v10;
  size_t v16;
  size_t v17;
  vImage_Error result;
  uint64_t v19;
  size_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _WORD *v33;
  uint64_t v34;
  uint64_t v35;
  _WORD *v36;
  BOOL v37;
  vImage_Buffer v38;
  vImage_Buffer src;

  v8 = *a1;
  if (*a1 != *a6)
    return 4294954382;
  v10 = *a2;
  if (*a2 != *a5)
    return 4294954382;
  src.data = *a4;
  src.height = v10;
  v16 = *a3;
  src.width = v8;
  src.rowBytes = v16;
  v38.data = *a8;
  v38.height = v8;
  v17 = *a7;
  v38.width = v10;
  v38.rowBytes = v17;
  result = vImageRotate90_Planar16U(&src, &v38, 3u, 0, 0);
  if (result)
  {
    v19 = *a5;
    if (*a5 >= 1)
    {
      v20 = *a7;
      v21 = *a6;
      v22 = *a7 << 6;
      v23 = -64 * *a3;
      v24 = (char *)*a8;
      v25 = (uint64_t)*a4 + (*a5 - 1) * *a3;
      v26 = -(uint64_t)*a3;
      do
      {
        if (v21 >= 1)
        {
          if ((unint64_t)v19 >= 0x40)
            v27 = 64;
          else
            v27 = v19;
          v28 = v21;
          v29 = v24;
          v30 = v25;
          do
          {
            if ((unint64_t)v28 >= 0x40)
              v31 = 64;
            else
              v31 = v28;
            v32 = v27;
            v33 = v29;
            v34 = v30;
            do
            {
              v35 = 0;
              v36 = v33;
              do
              {
                *v36 = *(_WORD *)(v34 + 2 * v35);
                v36 = (_WORD *)((char *)v36 + v20);
                ++v35;
              }
              while (v31 != v35);
              v34 += v26;
              ++v33;
              --v32;
            }
            while (v32);
            v30 += 128;
            v29 += v22;
            v37 = v28 <= 64;
            v28 -= 64;
          }
          while (!v37);
        }
        v25 += v23;
        v24 += 128;
        v37 = v19 <= 64;
        v19 -= 64;
      }
      while (!v37);
    }
    return 0;
  }
  return result;
}

vImage_Error vt_Rotate_16_180(vImagePixelCount *a1, vImagePixelCount *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  vImagePixelCount v9;
  uint64_t v15;
  void *v16;
  vImagePixelCount v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  vImage_Error result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  vImage_Buffer v30;
  vImage_Buffer src;

  v9 = *a1;
  if (*a1 != *a5)
    return 4294954382;
  v15 = *a4;
  v16 = (void *)*a8;
  v17 = *a2;
  src.data = (void *)v15;
  src.height = v17;
  v18 = *a3;
  src.width = v9;
  src.rowBytes = v18;
  v19 = *a6;
  v30.data = v16;
  v30.height = v19;
  v20 = *a7;
  v30.width = v9;
  v30.rowBytes = v20;
  if ((void *)v15 == v16)
  {
    if ((v15 & 0xF) != 0
      || ((v18 | v15) & 0xF) != 0
      || ((v20 | v9) & 0xF) != 0)
    {
      vtRotatePixelRect180_2BPP_inplace(v15, v18, (__int16 *)v15, v20, v9, v19);
    }
    else
    {
      vtRotatePixelRect180_2BPP_inplace_arm((int16x8_t *)v15, v18, v15, v20, v9, v19);
    }
    return 0;
  }
  result = vImageRotate90_Planar16U(&src, &v30, 2u, 0, 0);
  if (result)
  {
    result = vtRotatePixelRect180_2BPP_arm(*a4, *a3, *a8, *a7, *a5, *a6);
    if ((_DWORD)result)
    {
      v22 = *a6;
      if (*a6)
      {
        v23 = *a7;
        v24 = *a5;
        v25 = *a8;
        v26 = *a4 + 2 * *a5 + *a3 * (v22 - 1) - 2;
        v27 = -*a3;
        do
        {
          if (v24)
          {
            v28 = 0;
            for (i = 0; i != v24; ++i)
            {
              *(_WORD *)(v25 + 2 * i) = *(_WORD *)(v26 + v28);
              v28 -= 2;
            }
          }
          v26 += v27;
          v25 += v23;
          --v22;
        }
        while (v22);
      }
      return 0;
    }
  }
  return result;
}

uint64_t vtRotatePixelRect180_2BPP_inplace(uint64_t result, uint64_t a2, __int16 *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  __int16 v10;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;

  v6 = (__int16 *)(result + 2 * a5 + (a6 - 1) * a2 - 2);
  if (a6 >= 2)
  {
    v7 = (unint64_t)a6 >> 1;
    do
    {
      if (a5)
      {
        v8 = 0;
        for (i = 0; i != a5; ++i)
        {
          v10 = a3[i];
          a3[i] = v6[v8];
          v6[v8--] = v10;
        }
      }
      v6 = (__int16 *)((char *)v6 - a2);
      a3 = (__int16 *)((char *)a3 + a4);
    }
    while (v7-- > 1);
  }
  if ((a6 & 1) != 0 && (unint64_t)(a5 + 1) >= 3)
  {
    if (a5 >= 0)
      v12 = a5;
    else
      v12 = a5 + 1;
    v13 = v12 >> 1;
    do
    {
      v14 = *a3;
      *a3++ = *v6;
      *v6-- = v14;
      --v13;
    }
    while (v13);
  }
  return result;
}

vImage_Error vt_Rotate_16_90CCW(vImagePixelCount *a1, vImagePixelCount *a2, size_t *a3, void **a4, uint64_t *a5, uint64_t *a6, size_t *a7, void **a8)
{
  vImagePixelCount v8;
  vImagePixelCount v10;
  size_t v16;
  size_t v17;
  vImage_Error result;
  uint64_t v19;
  size_t v20;
  size_t v21;
  uint64_t v22;
  size_t v23;
  size_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _WORD *v34;
  uint64_t v35;
  uint64_t v36;
  _WORD *v37;
  BOOL v38;
  vImage_Buffer v39;
  vImage_Buffer src;

  v8 = *a1;
  if (*a1 != *a6)
    return 4294954382;
  v10 = *a2;
  if (*a2 != *a5)
    return 4294954382;
  src.data = *a4;
  src.height = v10;
  v16 = *a3;
  src.width = v8;
  src.rowBytes = v16;
  v39.data = *a8;
  v39.height = v8;
  v17 = *a7;
  v39.width = v10;
  v39.rowBytes = v17;
  result = vImageRotate90_Planar16U(&src, &v39, 1u, 0, 0);
  if (result)
  {
    v19 = *a5;
    if (*a5 >= 1)
    {
      v20 = *a3;
      v21 = *a7;
      v22 = *a6;
      v23 = *a7 << 6;
      v24 = *a3 << 6;
      v25 = (char *)*a8;
      v26 = (uint64_t)*a4 + 2 * *a6 - 2;
      do
      {
        if (v22 >= 1)
        {
          if ((unint64_t)v19 >= 0x40)
            v27 = 64;
          else
            v27 = v19;
          v28 = v22;
          v29 = v25;
          v30 = v26;
          do
          {
            if ((unint64_t)v28 >= 0x40)
              v31 = 64;
            else
              v31 = v28;
            v32 = -v31;
            v33 = v27;
            v34 = v29;
            v35 = v30;
            do
            {
              v36 = 0;
              v37 = v34;
              do
              {
                *v37 = *(_WORD *)(v35 + 2 * v36);
                v37 = (_WORD *)((char *)v37 + v21);
                --v36;
              }
              while (v32 != v36);
              v35 += v20;
              ++v34;
              --v33;
            }
            while (v33);
            v30 -= 128;
            v29 += v23;
            v38 = v28 <= 64;
            v28 -= 64;
          }
          while (!v38);
        }
        v26 += v24;
        v25 += 128;
        v38 = v19 <= 64;
        v19 -= 64;
      }
      while (!v38);
    }
    return 0;
  }
  return result;
}

vImage_Error vt_Rotate_32(vImagePixelCount *a1, vImagePixelCount *a2, size_t *a3, void **a4, size_t *a5, void **a6, int a7)
{
  vImagePixelCount v7;
  vImagePixelCount v8;
  size_t v9;
  size_t v10;
  uint8_t v11;
  vImage_Buffer dest;
  vImage_Buffer src;
  uint8_t backColor[4];

  *(_DWORD *)backColor = 255;
  v7 = *a2;
  src.data = *a4;
  src.height = v7;
  v8 = *a1;
  v9 = *a3;
  src.width = v8;
  src.rowBytes = v9;
  dest.data = *a6;
  dest.height = v7;
  v10 = *a5;
  dest.width = v8;
  dest.rowBytes = v10;
  switch(a7)
  {
    case 270:
      src.height = v8;
      src.width = v7;
      v11 = 1;
      break;
    case 180:
      v11 = 2;
      break;
    case 90:
      src.height = v8;
      src.width = v7;
      v11 = 3;
      break;
    default:
      v11 = 0;
      break;
  }
  return vImageRotate90_ARGB8888(&src, &dest, v11, backColor, 0);
}

vImage_Error vt_Rotate_32_90CW(vImagePixelCount *a1, vImagePixelCount *a2, size_t *a3, void **a4, uint64_t *a5, uint64_t *a6, size_t *a7, void **a8)
{
  vImagePixelCount v8;
  vImagePixelCount v10;
  size_t v16;
  size_t v17;
  vImage_Error result;
  uint64_t v19;
  size_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  BOOL v37;
  vImage_Buffer dest;
  vImage_Buffer src;
  uint8_t backColor[4];

  v8 = *a1;
  if (*a1 != *a6)
    return 4294954382;
  v10 = *a2;
  if (*a2 != *a5)
    return 4294954382;
  *(_DWORD *)backColor = 0;
  src.data = *a4;
  src.height = v10;
  v16 = *a3;
  src.width = v8;
  src.rowBytes = v16;
  dest.data = *a8;
  dest.height = v8;
  v17 = *a7;
  dest.width = v10;
  dest.rowBytes = v17;
  result = vImageRotate90_ARGB8888(&src, &dest, 3u, backColor, 0);
  if (result)
  {
    v19 = *a5;
    if (*a5 >= 1)
    {
      v20 = *a7;
      v21 = *a6;
      v22 = *a7 << 6;
      v23 = -64 * *a3;
      v24 = (char *)*a8;
      v25 = (uint64_t)*a4 + (*a5 - 1) * *a3;
      v26 = -(uint64_t)*a3;
      do
      {
        if (v21 >= 1)
        {
          if ((unint64_t)v19 >= 0x40)
            v27 = 64;
          else
            v27 = v19;
          v28 = v21;
          v29 = v24;
          v30 = v25;
          do
          {
            if ((unint64_t)v28 >= 0x40)
              v31 = 64;
            else
              v31 = v28;
            v32 = v27;
            v33 = v29;
            v34 = v30;
            do
            {
              v35 = 0;
              v36 = v33;
              do
              {
                *v36 = *(_DWORD *)(v34 + 4 * v35);
                v36 = (_DWORD *)((char *)v36 + v20);
                ++v35;
              }
              while (v31 != v35);
              v34 += v26;
              ++v33;
              --v32;
            }
            while (v32);
            v30 += 256;
            v29 += v22;
            v37 = v28 <= 64;
            v28 -= 64;
          }
          while (!v37);
        }
        v25 += v23;
        v24 += 256;
        v37 = v19 <= 64;
        v19 -= 64;
      }
      while (!v37);
    }
    return 0;
  }
  return result;
}

vImage_Error vt_Rotate_32_180(vImagePixelCount *a1, vImagePixelCount *a2, size_t *a3, void **a4, uint64_t *a5, vImagePixelCount *a6, size_t *a7, void **a8)
{
  vImagePixelCount v9;
  void *v15;
  void *v16;
  vImagePixelCount v17;
  size_t v18;
  vImagePixelCount v19;
  size_t v20;
  vImage_Error result;
  vImagePixelCount v22;
  size_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  vImage_Buffer dest;
  vImage_Buffer src;
  uint8_t backColor[4];

  v9 = *a1;
  if (*a1 != *a5)
    return 4294954382;
  v15 = *a4;
  v16 = *a8;
  *(_DWORD *)backColor = 0;
  v17 = *a2;
  src.data = v15;
  src.height = v17;
  v18 = *a3;
  src.width = v9;
  src.rowBytes = v18;
  v19 = *a6;
  dest.data = v16;
  dest.height = v19;
  v20 = *a7;
  dest.width = v9;
  dest.rowBytes = v20;
  if (v15 == v16)
  {
    vtRotatePixelRect180_4BPP_inplace((uint64_t)v15, v18, (int *)v15, v20, v9, v19);
  }
  else
  {
    result = vImageRotate90_ARGB8888(&src, &dest, 2u, backColor, 0);
    if (!result)
      return result;
    v22 = *a6;
    if (*a6)
    {
      v23 = *a7;
      v24 = *a5;
      v25 = (char *)*a8;
      v26 = (uint64_t)*a4 + 4 * *a5 + *a3 * (v22 - 1) - 4;
      v27 = -(uint64_t)*a3;
      do
      {
        if (v24)
        {
          v28 = 0;
          for (i = 0; i != v24; ++i)
          {
            *(_DWORD *)&v25[4 * i] = *(_DWORD *)(v26 + v28);
            v28 -= 4;
          }
        }
        v26 += v27;
        v25 += v23;
        --v22;
      }
      while (v22);
    }
  }
  return 0;
}

uint64_t vtRotatePixelRect180_4BPP_inplace(uint64_t result, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  int v10;
  uint64_t v12;
  uint64_t v13;
  int v14;

  v6 = (int *)(result + 2 * a5 + (a6 - 1) * a2 - 2);
  if (a6 >= 2)
  {
    v7 = (unint64_t)a6 >> 1;
    do
    {
      if (a5)
      {
        v8 = 0;
        for (i = 0; i != a5; ++i)
        {
          v10 = a3[i];
          a3[i] = v6[v8];
          v6[v8--] = v10;
        }
      }
      v6 = (int *)((char *)v6 - a2);
      a3 = (int *)((char *)a3 + a4);
    }
    while (v7-- > 1);
  }
  if ((a6 & 1) != 0 && (unint64_t)(a5 + 1) >= 3)
  {
    if (a5 >= 0)
      v12 = a5;
    else
      v12 = a5 + 1;
    v13 = v12 >> 1;
    do
    {
      v14 = *a3;
      *a3++ = *v6;
      *v6-- = v14;
      --v13;
    }
    while (v13);
  }
  return result;
}

vImage_Error vt_Rotate_32_90CCW(vImagePixelCount *a1, vImagePixelCount *a2, size_t *a3, void **a4, uint64_t *a5, uint64_t *a6, size_t *a7, void **a8)
{
  vImagePixelCount v8;
  vImagePixelCount v10;
  size_t v16;
  size_t v17;
  vImage_Error result;
  uint64_t v19;
  size_t v20;
  size_t v21;
  uint64_t v22;
  size_t v23;
  size_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  BOOL v38;
  vImage_Buffer dest;
  vImage_Buffer src;
  uint8_t backColor[4];

  v8 = *a1;
  if (*a1 != *a6)
    return 4294954382;
  v10 = *a2;
  if (*a2 != *a5)
    return 4294954382;
  *(_DWORD *)backColor = 0;
  src.data = *a4;
  src.height = v10;
  v16 = *a3;
  src.width = v8;
  src.rowBytes = v16;
  dest.data = *a8;
  dest.height = v8;
  v17 = *a7;
  dest.width = v10;
  dest.rowBytes = v17;
  result = vImageRotate90_ARGB8888(&src, &dest, 1u, backColor, 0);
  if (result)
  {
    v19 = *a5;
    if (*a5 >= 1)
    {
      v20 = *a3;
      v21 = *a7;
      v22 = *a6;
      v23 = *a7 << 6;
      v24 = *a3 << 6;
      v25 = (char *)*a8;
      v26 = (uint64_t)*a4 + 4 * *a6 - 4;
      do
      {
        if (v22 >= 1)
        {
          if ((unint64_t)v19 >= 0x40)
            v27 = 64;
          else
            v27 = v19;
          v28 = v22;
          v29 = v25;
          v30 = v26;
          do
          {
            if ((unint64_t)v28 >= 0x40)
              v31 = 64;
            else
              v31 = v28;
            v32 = -v31;
            v33 = v27;
            v34 = v29;
            v35 = v30;
            do
            {
              v36 = 0;
              v37 = v34;
              do
              {
                *v37 = *(_DWORD *)(v35 + 4 * v36);
                v37 = (_DWORD *)((char *)v37 + v21);
                --v36;
              }
              while (v32 != v36);
              v35 += v20;
              ++v34;
              --v33;
            }
            while (v33);
            v30 -= 256;
            v29 += v23;
            v38 = v28 <= 64;
            v28 -= 64;
          }
          while (!v38);
        }
        v26 += v24;
        v25 += 256;
        v38 = v19 <= 64;
        v19 -= 64;
      }
      while (!v38);
    }
    return 0;
  }
  return result;
}

vImage_Error vt_Rotate_64(vImagePixelCount *a1, vImagePixelCount *a2, size_t *a3, void **a4, size_t *a5, void **a6, int a7)
{
  vImagePixelCount v7;
  vImagePixelCount v8;
  size_t v9;
  size_t v10;
  uint8_t v11;
  vImage_Buffer v13;
  vImage_Buffer src;
  uint16_t backColor[4];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)backColor = 255;
  v7 = *a2;
  src.data = *a4;
  src.height = v7;
  v8 = *a1;
  v9 = *a3;
  src.width = v8;
  src.rowBytes = v9;
  v13.data = *a6;
  v13.height = v7;
  v10 = *a5;
  v13.width = v8;
  v13.rowBytes = v10;
  switch(a7)
  {
    case 270:
      src.height = v8;
      src.width = v7;
      v11 = 1;
      break;
    case 180:
      v11 = 2;
      break;
    case 90:
      src.height = v8;
      src.width = v7;
      v11 = 3;
      break;
    default:
      v11 = 0;
      break;
  }
  return vImageRotate90_ARGB16U(&src, &v13, v11, backColor, 0);
}

vImage_Error vt_Rotate_64_90CW(vImagePixelCount *a1, vImagePixelCount *a2, size_t *a3, void **a4, _QWORD *a5, _QWORD *a6, size_t *a7, void **a8)
{
  vImagePixelCount v8;
  vImagePixelCount v9;
  size_t v10;
  size_t v11;
  vImage_Buffer v13;
  vImage_Buffer src;
  uint16_t backColor[4];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  if (*a1 != *a6)
    return 4294954382;
  v9 = *a2;
  if (*a2 != *a5)
    return 4294954382;
  *(_QWORD *)backColor = 255;
  src.data = *a4;
  src.height = v9;
  v10 = *a3;
  src.width = v8;
  src.rowBytes = v10;
  v13.data = *a8;
  v13.height = v8;
  v11 = *a7;
  v13.width = v9;
  v13.rowBytes = v11;
  return vImageRotate90_ARGB16U(&src, &v13, 3u, backColor, 0);
}

vImage_Error vt_Rotate_64_180(vImagePixelCount *a1, vImagePixelCount *a2, size_t *a3, void **a4, _QWORD *a5, vImagePixelCount *a6, size_t *a7, void **a8)
{
  vImagePixelCount v8;
  vImagePixelCount v9;
  size_t v10;
  vImagePixelCount v11;
  size_t v12;
  vImage_Buffer v14;
  vImage_Buffer src;
  uint16_t backColor[4];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  if (*a1 != *a5)
    return 4294954382;
  *(_QWORD *)backColor = 255;
  v9 = *a2;
  src.data = *a4;
  src.height = v9;
  v10 = *a3;
  src.width = v8;
  src.rowBytes = v10;
  v11 = *a6;
  v14.data = *a8;
  v14.height = v11;
  v12 = *a7;
  v14.width = v8;
  v14.rowBytes = v12;
  return vImageRotate90_ARGB16U(&src, &v14, 2u, backColor, 0);
}

vImage_Error vt_Rotate_64_90CCW(vImagePixelCount *a1, vImagePixelCount *a2, size_t *a3, void **a4, _QWORD *a5, _QWORD *a6, size_t *a7, void **a8)
{
  vImagePixelCount v8;
  vImagePixelCount v9;
  size_t v10;
  size_t v11;
  vImage_Buffer v13;
  vImage_Buffer src;
  uint16_t backColor[4];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  if (*a1 != *a6)
    return 4294954382;
  v9 = *a2;
  if (*a2 != *a5)
    return 4294954382;
  *(_QWORD *)backColor = 255;
  src.data = *a4;
  src.height = v9;
  v10 = *a3;
  src.width = v8;
  src.rowBytes = v10;
  v13.data = *a8;
  v13.height = v8;
  v11 = *a7;
  v13.width = v9;
  v13.rowBytes = v11;
  return vImageRotate90_ARGB16U(&src, &v13, 1u, backColor, 0);
}

vImage_Error vt_Rotate_b3a8(vImagePixelCount *a1, vImagePixelCount *a2, size_t *a3, uint64_t a4, size_t *a5, uint64_t a6, int a7)
{
  vImagePixelCount v7;
  void *v8;
  vImagePixelCount width;
  size_t v10;
  size_t v11;
  void *v12;
  size_t v13;
  size_t v14;
  uint8_t v15;
  vImage_Error result;
  vImage_Buffer v17;
  vImage_Buffer dest;
  vImage_Buffer v19;
  vImage_Buffer src;
  uint8_t backColor[4];

  *(_DWORD *)backColor = 255;
  v7 = *a2;
  v8 = *(void **)(a4 + 8);
  src.data = *(void **)a4;
  src.height = v7;
  v10 = *a3;
  v11 = a3[1];
  src.width = *a1;
  width = src.width;
  src.rowBytes = v10;
  v19.data = v8;
  v19.height = v7;
  v19.width = src.width;
  v19.rowBytes = v11;
  v12 = *(void **)(a6 + 8);
  dest.data = *(void **)a6;
  dest.height = v7;
  v13 = *a5;
  v14 = a5[1];
  dest.width = src.width;
  dest.rowBytes = v13;
  v17.data = v12;
  v17.height = v7;
  v17.width = src.width;
  v17.rowBytes = v14;
  switch(a7)
  {
    case 270:
      src.height = src.width;
      src.width = v7;
      v15 = 1;
      goto LABEL_6;
    case 180:
      v15 = 2;
      break;
    case 90:
      src.height = src.width;
      src.width = v7;
      v15 = 3;
LABEL_6:
      v19.height = width;
      v19.width = v7;
      break;
    default:
      v15 = 0;
      break;
  }
  result = vImageRotate90_ARGB8888(&src, &dest, v15, backColor, 0);
  if (!(_DWORD)result)
    return vImageRotate90_Planar8(&v19, &v17, v15, 0, 0);
  return result;
}

vImage_Error vt_Rotate_b3a8_90CW(vImagePixelCount *a1, vImagePixelCount *a2, uint64_t a3, void **a4, uint64_t *a5, uint64_t *a6, uint64_t a7, void **a8)
{
  vImage_Error result;

  result = vt_Rotate_32_90CW(a1, a2, (size_t *)a3, a4, a5, a6, (size_t *)a7, a8);
  if (!(_DWORD)result)
    return vt_Rotate_8_90CW(a1 + 1, a2 + 1, (uint64_t *)(a3 + 8), a4 + 1, a5 + 1, a6 + 1, (uint64_t *)(a7 + 8), a8 + 1);
  return result;
}

vImage_Error vt_Rotate_b3a8_180(vImagePixelCount *a1, vImagePixelCount *a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  vImage_Error result;

  result = vt_Rotate_32_180(a1, a2, (size_t *)a3, (void **)a4, a5, (vImagePixelCount *)a6, (size_t *)a7, (void **)a8);
  if (!(_DWORD)result)
    return vt_Rotate_8_180(a1 + 1, a2 + 1, (uint64_t *)(a3 + 8), (int8x16_t **)(a4 + 8), a5 + 1, (uint64_t *)(a6 + 8), (uint64_t *)(a7 + 8), (uint64_t *)(a8 + 8));
  return result;
}

vImage_Error vt_Rotate_b3a8_90CCW(vImagePixelCount *a1, vImagePixelCount *a2, uint64_t a3, void **a4, uint64_t *a5, uint64_t *a6, uint64_t a7, void **a8)
{
  vImage_Error result;

  result = vt_Rotate_32_90CCW(a1, a2, (size_t *)a3, a4, a5, a6, (size_t *)a7, a8);
  if (!(_DWORD)result)
    return vt_Rotate_8_90CCW(a1 + 1, a2 + 1, (uint64_t *)(a3 + 8), a4 + 1, a5 + 1, a6 + 1, (uint64_t *)(a7 + 8), a8 + 1);
  return result;
}

uint64_t vt_Rotate_y420(_BYTE *a1, uint64_t a2, uint64_t a3, _QWORD *a4, _BYTE *a5, _QWORD *a6, int a7)
{
  int v14;
  uint64_t v15;
  vImage_Error v16;
  size_t v17;
  void *v18;
  size_t v19;
  void *v20;
  vImagePixelCount v21;
  vImagePixelCount v22;
  uint8_t v23;
  _BOOL4 v25;
  vImage_Buffer dest;
  vImage_Buffer src;

  if (*a4 != *a6 && a4[1] != a6[1] && a4[2] != a6[2])
  {
    v14 = 0;
    v25 = 0;
LABEL_21:
    v15 = 0;
    v16 = 0;
    while (1)
    {
      v17 = *(_QWORD *)(a3 + v15 * 8);
      v18 = (void *)a4[v15];
      v19 = *(_QWORD *)&a5[v15 * 8];
      v20 = (void *)a6[v15];
      v21 = *(_QWORD *)(a2 + v15 * 8);
      src.data = v18;
      src.height = v21;
      v22 = *(_QWORD *)&a1[v15 * 8];
      src.width = v22;
      src.rowBytes = v17;
      dest.data = v20;
      dest.height = v21;
      dest.width = v22;
      dest.rowBytes = v19;
      if (a7 == 90)
        break;
      if (a7 == 270)
      {
        v23 = 1;
LABEL_30:
        src.height = v22;
        src.width = v21;
        if ((v14 & 1) != 0)
          goto LABEL_36;
        goto LABEL_35;
      }
      if (a7 == 180)
      {
        if (v14)
        {
          if (v25)
            vtRotatePixelRect180_1BPP_inplace_arm((unint64_t *)v18, v17, (uint64_t)v20, v19, v22, v21);
          else
            vtRotatePixelRect180_1BPP_inplace((uint64_t)v18, v17, (char *)v20, v19, v22, v21);
          goto LABEL_36;
        }
        v23 = 2;
      }
      else
      {
        v23 = 0;
        if ((v14 & 1) != 0)
          goto LABEL_36;
      }
LABEL_35:
      v16 = vImageRotate90_Planar8(&src, &dest, v23, 0, 0);
LABEL_36:
      if (++v15 == 3)
        return v16;
    }
    v23 = 3;
    goto LABEL_30;
  }
  if (a7 == 180)
  {
    v25 = (*a4 & 0xFLL) == 0
       && (*(_BYTE *)a3 & 0xF) == 0
       && (a4[1] & 0xF) == 0
       && (*(_BYTE *)(a3 + 8) & 0xF) == 0
       && (a4[2] & 0xF) == 0
       && ((*(_DWORD *)(a3 + 16) | *a6) & 0xFLL) == 0
       && (*a5 & 0xF) == 0
       && (a6[1] & 0xF) == 0
       && (a5[8] & 0xF) == 0
       && (a6[2] & 0xF) == 0
       && (a5[16] & 0xF) == 0
       && (*a1 & 0xF) == 0
       && (a1[8] & 0xF) == 0
       && (a1[16] & 0xF) == 0;
    v14 = 1;
    goto LABEL_21;
  }
  return FigSignalErrorAt();
}

vImage_Error vt_Rotate_y420_90CW(vImagePixelCount *a1, vImagePixelCount *a2, uint64_t *a3, void **a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, void **a8)
{
  vImage_Error result;

  result = vt_Rotate_8_90CW(a1, a2, a3, a4, a5, a6, a7, a8);
  if (!(_DWORD)result)
  {
    result = vt_Rotate_8_90CW(a1 + 1, a2 + 1, a3 + 1, a4 + 1, a5 + 1, a6 + 1, a7 + 1, a8 + 1);
    if (!(_DWORD)result)
      return vt_Rotate_8_90CW(a1 + 2, a2 + 2, a3 + 2, a4 + 2, a5 + 2, a6 + 2, a7 + 2, a8 + 2);
  }
  return result;
}

vImage_Error vt_Rotate_y420_180(vImagePixelCount *a1, vImagePixelCount *a2, uint64_t *a3, int8x16_t **a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  vImage_Error result;

  result = vt_Rotate_8_180(a1, a2, a3, a4, a5, a6, a7, a8);
  if (!(_DWORD)result)
  {
    result = vt_Rotate_8_180(a1 + 1, a2 + 1, a3 + 1, a4 + 1, a5 + 1, a6 + 1, a7 + 1, a8 + 1);
    if (!(_DWORD)result)
      return vt_Rotate_8_180(a1 + 2, a2 + 2, a3 + 2, a4 + 2, a5 + 2, a6 + 2, a7 + 2, a8 + 2);
  }
  return result;
}

vImage_Error vt_Rotate_y420_90CCW(vImagePixelCount *a1, vImagePixelCount *a2, uint64_t *a3, void **a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, void **a8)
{
  vImage_Error result;

  result = vt_Rotate_8_90CCW(a1, a2, a3, a4, a5, a6, a7, a8);
  if (!(_DWORD)result)
  {
    result = vt_Rotate_8_90CCW(a1 + 1, a2 + 1, a3 + 1, a4 + 1, a5 + 1, a6 + 1, a7 + 1, a8 + 1);
    if (!(_DWORD)result)
      return vt_Rotate_8_90CCW(a1 + 2, a2 + 2, a3 + 2, a4 + 2, a5 + 2, a6 + 2, a7 + 2, a8 + 2);
  }
  return result;
}

vImage_Error vt_Rotate_420v(int64x2_t *a1, vImagePixelCount *a2, uint64_t a3, uint64_t *a4, int64x2_t *a5, uint64_t a6, int a7)
{
  uint64_t v11;
  void *v12;
  vImagePixelCount v13;
  vImagePixelCount v14;
  uint64_t v15;
  size_t v16;
  int64x2_t v17;
  vImagePixelCount v18;
  void *v19;
  void *v20;
  int64x2_t v21;
  uint8_t v22;
  int8x16_t v25;
  vImage_Error result;
  vImage_Buffer v27;
  vImage_Buffer dest;
  vImage_Buffer v29;
  vImage_Buffer src;

  v11 = *a4;
  v12 = (void *)a4[1];
  v13 = *a2;
  v14 = a2[1];
  src.data = (void *)*a4;
  src.height = v13;
  v15 = *(_QWORD *)a3;
  v16 = *(_QWORD *)(a3 + 8);
  src.rowBytes = *(_QWORD *)a3;
  v29.data = v12;
  v29.height = v14;
  v17 = *a1;
  v18 = a1->i64[0];
  src.width = a1->i64[0];
  v29.width = v17.u64[1];
  v29.rowBytes = v16;
  v20 = *(void **)a6;
  v19 = *(void **)(a6 + 8);
  dest.data = *(void **)a6;
  dest.height = v13;
  v27.data = v19;
  v27.height = v14;
  v21 = *a5;
  *(int64x2_t *)&dest.width = vzip1q_s64(v17, *a5);
  *(int64x2_t *)&v27.width = vzip2q_s64(v17, v21);
  switch(a7)
  {
    case 90:
      v22 = 3;
LABEL_13:
      src.height = v18;
      src.width = v13;
      v29.height = v17.u64[1];
      v29.width = v14;
      break;
    case 270:
      v22 = 1;
      goto LABEL_13;
    case 180:
      v22 = 2;
      if ((void *)v11 == v20 && v12 == v19)
      {
        v25 = (int8x16_t)vdupq_n_s64(0xFuLL);
        if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v21, v25)), (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v17, v25)))))) & 1) != 0|| ((v15 | v12) & 0xF) != 0|| (v11 & 0xF) != 0|| (v16 & 0xF) != 0)
        {
          vtRotatePixelRect180_1BPP_inplace(v11, v15, (char *)v11, v21.i64[0], v18, v13);
          vtRotatePixelRect180_2BPP_inplace(a4[1], *(_QWORD *)(a3 + 8), *(__int16 **)(a6 + 8), a5->i64[1], a1->i64[1], a2[1]);
        }
        else
        {
          vtRotatePixelRect180_1BPP_inplace_arm((unint64_t *)v11, v15, v11, v21.i64[0], v18, v13);
          vtRotatePixelRect180_2BPP_inplace_arm((int16x8_t *)a4[1], *(_QWORD *)(a3 + 8), *(_QWORD *)(a6 + 8), a5->i64[1], a1->i64[1], a2[1]);
        }
        return 0;
      }
      break;
    default:
      v22 = 0;
      break;
  }
  result = vImageRotate90_Planar8(&src, &dest, v22, 0, 0);
  if (!(_DWORD)result)
    return vImageRotate90_Planar16U(&v29, &v27, v22, 0, 0);
  return result;
}

vImage_Error vt_Rotate_420v_90CW(vImagePixelCount *a1, vImagePixelCount *a2, uint64_t a3, void **a4, uint64_t *a5, uint64_t *a6, uint64_t a7, void **a8)
{
  vImage_Error result;
  void **v17;
  void *v18;
  void **v19;
  void *v20;

  result = vt_Rotate_8_90CW(a1, a2, (uint64_t *)a3, a4, a5, a6, (uint64_t *)a7, a8);
  if (!(_DWORD)result)
  {
    result = vt_Rotate_16_90CW(a1 + 1, a2 + 1, (size_t *)(a3 + 8), a4 + 1, a5 + 1, a6 + 1, (size_t *)(a7 + 8), a8 + 1);
    if (!(_DWORD)result)
    {
      v18 = a4[2];
      v17 = a4 + 2;
      if (v18 && (v20 = a8[2], v19 = a8 + 2, v20))
        return vt_Rotate_8_90CW(a1 + 2, a2 + 2, (uint64_t *)(a3 + 16), v17, a5 + 2, a6 + 2, (uint64_t *)(a7 + 16), v19);
      else
        return 0;
    }
  }
  return result;
}

vImage_Error vt_Rotate_420v_180(vImagePixelCount *a1, vImagePixelCount *a2, uint64_t *a3, int8x16_t **a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  vImage_Error result;
  int8x16_t **v17;
  int8x16_t *v18;
  uint64_t *v19;
  uint64_t v20;

  result = vt_Rotate_8_180(a1, a2, a3, a4, a5, a6, a7, a8);
  if (!(_DWORD)result)
  {
    result = vt_Rotate_16_180(a1 + 1, a2 + 1, a3 + 1, (uint64_t *)a4 + 1, a5 + 1, a6 + 1, a7 + 1, a8 + 1);
    if (!(_DWORD)result)
    {
      v18 = a4[2];
      v17 = a4 + 2;
      if (v18 && (v20 = a8[2], v19 = a8 + 2, v20))
        return vt_Rotate_8_180(a1 + 2, a2 + 2, a3 + 2, v17, a5 + 2, a6 + 2, a7 + 2, v19);
      else
        return 0;
    }
  }
  return result;
}

vImage_Error vt_Rotate_420v_90CCW(vImagePixelCount *a1, vImagePixelCount *a2, uint64_t a3, void **a4, uint64_t *a5, uint64_t *a6, uint64_t a7, void **a8)
{
  vImage_Error result;
  void **v17;
  void *v18;
  void **v19;
  void *v20;

  result = vt_Rotate_8_90CCW(a1, a2, (uint64_t *)a3, a4, a5, a6, (uint64_t *)a7, a8);
  if (!(_DWORD)result)
  {
    result = vt_Rotate_16_90CCW(a1 + 1, a2 + 1, (size_t *)(a3 + 8), a4 + 1, a5 + 1, a6 + 1, (size_t *)(a7 + 8), a8 + 1);
    if (!(_DWORD)result)
    {
      v18 = a4[2];
      v17 = a4 + 2;
      if (v18 && (v20 = a8[2], v19 = a8 + 2, v20))
        return vt_Rotate_8_90CCW(a1 + 2, a2 + 2, (uint64_t *)(a3 + 16), v17, a5 + 2, a6 + 2, (uint64_t *)(a7 + 16), v19);
      else
        return 0;
    }
  }
  return result;
}

vImage_Error vt_Rotate_x420(int64x2_t *a1, vImagePixelCount *a2, uint64_t a3, uint64_t a4, int64x2_t *a5, uint64_t a6, int a7)
{
  int16x8_t *v11;
  void *v12;
  vImagePixelCount v13;
  vImagePixelCount v14;
  uint64_t v15;
  size_t v16;
  int64x2_t v17;
  vImagePixelCount v18;
  void *v19;
  int16x8_t *v20;
  int64x2_t v21;
  uint8_t v22;
  int8x16_t v25;
  vImage_Error result;
  vImage_Buffer v27;
  vImage_Buffer dest;
  vImage_Buffer v29;
  vImage_Buffer src;
  uint8_t backColor[4];

  *(_DWORD *)backColor = 255;
  v11 = *(int16x8_t **)a4;
  v12 = *(void **)(a4 + 8);
  v13 = *a2;
  v14 = a2[1];
  src.data = *(void **)a4;
  src.height = v13;
  v15 = *(_QWORD *)a3;
  v16 = *(_QWORD *)(a3 + 8);
  src.rowBytes = *(_QWORD *)a3;
  v29.data = v12;
  v29.height = v14;
  v17 = *a1;
  v18 = a1->i64[0];
  src.width = a1->i64[0];
  v29.width = v17.u64[1];
  v29.rowBytes = v16;
  v20 = *(int16x8_t **)a6;
  v19 = *(void **)(a6 + 8);
  dest.data = *(void **)a6;
  dest.height = v13;
  v27.data = v19;
  v27.height = v14;
  v21 = *a5;
  *(int64x2_t *)&dest.width = vzip1q_s64(v17, *a5);
  *(int64x2_t *)&v27.width = vzip2q_s64(v17, v21);
  switch(a7)
  {
    case 90:
      v22 = 3;
LABEL_13:
      src.height = v18;
      src.width = v13;
      v29.height = v17.u64[1];
      v29.width = v14;
      break;
    case 270:
      v22 = 1;
      goto LABEL_13;
    case 180:
      v22 = 2;
      if (v11 == v20 && v12 == v19)
      {
        v25 = (int8x16_t)vdupq_n_s64(0xFuLL);
        if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v21, v25)), (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v17, v25)))))) & 1) != 0|| ((v15 | v12) & 0xF) != 0|| (v11 & 0xF) != 0|| (v16 & 0xF) != 0)
        {
          vtRotatePixelRect180_2BPP_inplace((uint64_t)v11, v15, v11->i16, v21.i64[0], v18, v13);
        }
        else
        {
          vtRotatePixelRect180_2BPP_inplace_arm(v11, v15, (uint64_t)v11, v21.i64[0], v18, v13);
        }
        vtRotatePixelRect180_4BPP_inplace(*(_QWORD *)(a4 + 8), *(_QWORD *)(a3 + 8), *(int **)(a6 + 8), a5->i64[1], a1->i64[1], a2[1]);
        return 0;
      }
      break;
    default:
      v22 = 0;
      break;
  }
  result = vImageRotate90_Planar16U(&src, &dest, v22, 0, 0);
  if (!(_DWORD)result)
    return vImageRotate90_ARGB8888(&v29, &v27, v22, backColor, 0);
  return result;
}

vImage_Error vt_Rotate_x420_90CW(vImagePixelCount *a1, vImagePixelCount *a2, size_t *a3, void **a4, uint64_t *a5, uint64_t *a6, size_t *a7, void **a8)
{
  vImage_Error result;
  void **v17;
  void *v18;
  void **v19;
  void *v20;

  result = vt_Rotate_16_90CW(a1, a2, a3, a4, a5, a6, a7, a8);
  if (!(_DWORD)result)
  {
    result = vt_Rotate_32_90CW(a1 + 1, a2 + 1, a3 + 1, a4 + 1, a5 + 1, a6 + 1, a7 + 1, a8 + 1);
    if (!(_DWORD)result)
    {
      v18 = a4[2];
      v17 = a4 + 2;
      if (v18 && (v20 = a8[2], v19 = a8 + 2, v20))
        return vt_Rotate_16_90CW(a1 + 2, a2 + 2, a3 + 2, v17, a5 + 2, a6 + 2, a7 + 2, v19);
      else
        return 0;
    }
  }
  return result;
}

vImage_Error vt_Rotate_x420_180(vImagePixelCount *a1, vImagePixelCount *a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  vImage_Error result;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;

  result = vt_Rotate_16_180(a1, a2, (uint64_t *)a3, (uint64_t *)a4, a5, (uint64_t *)a6, (uint64_t *)a7, (uint64_t *)a8);
  if (!(_DWORD)result)
  {
    result = vt_Rotate_32_180(a1 + 1, a2 + 1, (size_t *)(a3 + 8), (void **)(a4 + 8), a5 + 1, (vImagePixelCount *)(a6 + 8), (size_t *)(a7 + 8), (void **)(a8 + 8));
    if (!(_DWORD)result)
    {
      v18 = *(_QWORD *)(a4 + 16);
      v17 = (uint64_t *)(a4 + 16);
      if (v18 && (v20 = *(_QWORD *)(a8 + 16), v19 = (uint64_t *)(a8 + 16), v20))
        return vt_Rotate_16_180(a1 + 2, a2 + 2, (uint64_t *)(a3 + 16), v17, a5 + 2, (uint64_t *)(a6 + 16), (uint64_t *)(a7 + 16), v19);
      else
        return 0;
    }
  }
  return result;
}

vImage_Error vt_Rotate_x420_90CCW(vImagePixelCount *a1, vImagePixelCount *a2, size_t *a3, void **a4, uint64_t *a5, uint64_t *a6, size_t *a7, void **a8)
{
  vImage_Error result;
  void **v17;
  void *v18;
  void **v19;
  void *v20;

  result = vt_Rotate_16_90CCW(a1, a2, a3, a4, a5, a6, a7, a8);
  if (!(_DWORD)result)
  {
    result = vt_Rotate_32_90CCW(a1 + 1, a2 + 1, a3 + 1, a4 + 1, a5 + 1, a6 + 1, a7 + 1, a8 + 1);
    if (!(_DWORD)result)
    {
      v18 = a4[2];
      v17 = a4 + 2;
      if (v18 && (v20 = a8[2], v19 = a8 + 2, v20))
        return vt_Rotate_16_90CCW(a1 + 2, a2 + 2, a3 + 2, v17, a5 + 2, a6 + 2, a7 + 2, v19);
      else
        return 0;
    }
  }
  return result;
}

uint64_t vt_Rotate_2vuy(uint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t *a4, uint64_t *a5, _BYTE **a6, int a7)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _BYTE *v12;

  v9 = *a3;
  v10 = *a4;
  v11 = *a5;
  v12 = *a6;
  switch(a7)
  {
    case 270:
      vtRotatePixelRect90CCW_2vuy(v10, v9, v12, v11, *a1, *a2);
      break;
    case 180:
      vtRotatePixelRect180_2vuy(v10, v9, v12, v11, *a1, *a2);
      break;
    case 90:
      vtRotatePixelRect90CW_2vuy(v10, v9, v12, v11, *a1, *a2);
      break;
  }
  return 0;
}

unint64_t vtRotatePixelRect90CW_2vuy(unint64_t result, uint64_t a2, _BYTE *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  _BYTE *v18;
  _BYTE *v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  BOOL v23;

  if (a5 >= 1)
  {
    v6 = result + (a5 - 1) * a2;
    v7 = -a2;
    v8 = -64 * a2;
    do
    {
      if (a6 >= 1)
      {
        if ((unint64_t)a5 >= 0x40)
          v9 = 64;
        else
          v9 = a5;
        v10 = a6;
        v11 = a3;
        v12 = (_BYTE *)v6;
        do
        {
          if ((unint64_t)v10 >= 0x40)
            result = 64;
          else
            result = v10;
          v13 = (2 * (int)result) & 0xFCLL;
          v14 = 1;
          v15 = v9;
          v16 = v11;
          v17 = v12;
          do
          {
            v18 = v17;
            v19 = v16;
            if (v14)
            {
              if (result >= 2)
              {
                v20 = 0;
                v19 = v16;
                do
                {
                  *v19 = v17[v20];
                  v19[1] = v17[v20 + 1];
                  v19[2] = v17[v20 + 2];
                  v21 = &v19[a4];
                  *v21 = v17[v20];
                  v21[1] = v17[v20 + 3];
                  v21[2] = v17[v20 + 2];
                  v19 = &v21[a4];
                  v20 += 4;
                }
                while (v13 != v20);
                v18 = &v17[v20];
              }
              if ((result & 1) != 0)
              {
                *v19 = *v18;
                v19[1] = v18[1];
                v19[2] = v18[2];
              }
            }
            else
            {
              if (result >= 2)
              {
                v22 = 0;
                v19 = v16;
                do
                {
                  v19[3] = v17[v22 + 1];
                  v19[a4 + 3] = v17[v22 + 3];
                  v19 += a4 + a4;
                  v22 += 4;
                }
                while (v13 != v22);
                v18 = &v17[v22];
              }
              if ((result & 1) != 0)
                v19[3] = v18[1];
              v16 += 4;
            }
            v17 += v7;
            v14 ^= 1u;
            --v15;
          }
          while (v15);
          v12 += 128;
          v11 += 64 * a4;
          v23 = v10 <= 64;
          v10 -= 64;
        }
        while (!v23);
      }
      v6 += v8;
      a3 += 128;
      v23 = a5 <= 64;
      a5 -= 64;
    }
    while (!v23);
  }
  return result;
}

uint64_t vtRotatePixelRect180_2vuy(uint64_t result, uint64_t a2, _BYTE *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;

  if (a5 >= 0)
    v6 = a5;
  else
    v6 = a5 + 1;
  if (a6)
  {
    v7 = v6 >> 1;
    v8 = result + 4 * v7 + (a6 - 1) * a2 - 4;
    do
    {
      v9 = a3;
      if ((unint64_t)(a5 + 1) >= 3)
      {
        v10 = 0;
        v9 = a3;
        v11 = v7;
        do
        {
          *v9 = *(_BYTE *)(v8 + v10);
          v9[1] = *(_BYTE *)(v8 + v10 + 3);
          v9[2] = *(_BYTE *)(v8 + v10 + 2);
          v9[3] = *(_BYTE *)(v8 + v10 + 1);
          v9 += 4;
          v10 -= 4;
          --v11;
        }
        while (v11);
      }
      if ((a5 & 1) != 0)
        *(_DWORD *)v9 = 276828288;
      v8 -= a2;
      a3 += a4;
      --a6;
    }
    while (a6);
  }
  return result;
}

void vtRotatePixelRect90CCW_2vuy(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  _BYTE *v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  _BYTE *v27;
  _BYTE *v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  int __pattern4;

  if (a5 >= 1)
  {
    v6 = a2 << 6;
    if (a6 >= 0)
      v7 = a6;
    else
      v7 = a6 + 1;
    v8 = a1 + 4 * (v7 >> 1);
    v9 = v8 - 4;
    v10 = (_BYTE *)(v8 - 1);
    v11 = a3;
    v12 = a5;
    do
    {
      if (a6 >= 1)
      {
        if ((unint64_t)v12 >= 0x40)
          v13 = 64;
        else
          v13 = v12;
        v14 = v10;
        v15 = a6;
        v16 = v11;
        v17 = v9;
        do
        {
          if ((unint64_t)v15 >= 0x40)
            v18 = 64;
          else
            v18 = v15;
          v19 = 1;
          v20 = v14;
          v21 = v13;
          v22 = v16;
          v23 = v17;
          do
          {
            if (v19)
            {
              if (v18 >= 2)
              {
                v24 = 0;
                v25 = v22;
                do
                {
                  *v25 = *(_BYTE *)(v23 + v24);
                  v25[1] = *(_BYTE *)(v23 + v24 + 3);
                  v25[2] = *(_BYTE *)(v23 + v24 + 2);
                  v26 = &v25[a4];
                  *v26 = *(_BYTE *)(v23 + v24);
                  v26[1] = *(_BYTE *)(v23 + v24 + 1);
                  v26[2] = *(_BYTE *)(v23 + v24 + 2);
                  v25 += a4 + a4;
                  v24 -= 4;
                }
                while (4 * (v18 >> 1) + v24);
              }
            }
            else
            {
              if (v18 >= 2)
              {
                v27 = v22 + 3;
                v28 = v20;
                v29 = v18 >> 1;
                do
                {
                  *v27 = *v28;
                  v27[a4] = *(v28 - 2);
                  v27 += 2 * a4;
                  v28 -= 4;
                  --v29;
                }
                while (v29);
              }
              v22 += 4;
            }
            v23 += a2;
            v19 ^= 1u;
            v20 += a2;
            --v21;
          }
          while (v21);
          v17 -= 128;
          v14 -= 128;
          v16 += 64 * a4;
          v30 = v15 <= 64;
          v15 -= 64;
        }
        while (!v30);
      }
      v9 += v6;
      v11 += 128;
      v10 += v6;
      v30 = v12 <= 64;
      v12 -= 64;
    }
    while (!v30);
  }
  if ((a6 & 1) != 0)
  {
    __pattern4 = 276828288;
    v31 = a5 + 2;
    if (a5 >= -1)
      v31 = a5 + 1;
    memset_pattern4(&a3[(a6 - 1) * a4], &__pattern4, (2 * v31) & 0xFFFFFFFFFFFFFFFCLL);
  }
}

