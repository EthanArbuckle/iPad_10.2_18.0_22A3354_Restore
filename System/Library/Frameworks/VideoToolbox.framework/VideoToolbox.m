void VTSelectAndCreateVideoDecoderInstance(int a1, int a2, CFDictionaryRef theDict)
{
  VTSelectAndCreateVideoDecoderInstanceInternal(a1, a2, (int)theDict, theDict);
}

void VTSelectAndCreateVideoDecoderInstanceInternal(int a1, int a2, int a3, CFDictionaryRef theDict)
{
  const void **v6;
  const void *v7;
  __CFDictionary *v8;
  __CFDictionary *v9;
  __CFDictionary *MutableCopy;
  const void *v11;

  v6 = (const void **)MEMORY[0x1E0C9AE50];
  if (theDict)
  {
    v7 = (const void *)*MEMORY[0x1E0C9AE40];
    if (v7 == CFDictionaryGetValue(theDict, CFSTR("EnableHardwareAcceleratedVideoDecoder")))
    {
      MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
      v8 = MutableCopy;
      if (!MutableCopy)
        goto LABEL_17;
      CFDictionaryRemoveValue(MutableCopy, CFSTR("EnableHardwareAcceleratedVideoDecoder"));
LABEL_10:
      v11 = *v6;
      if (v11 == CFDictionaryGetValue(theDict, CFSTR("RequireHardwareAcceleratedVideoDecoder"))
        && !CFDictionaryGetValue(theDict, CFSTR("EnableHardwareAcceleratedVideoDecoder")))
      {
        if (!v8)
        {
          v8 = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
          if (!v8)
            goto LABEL_17;
        }
        CFDictionarySetValue(v8, CFSTR("EnableHardwareAcceleratedVideoDecoder"), v11);
      }
LABEL_12:
      if (a1 == 1635135537)
      {
        FigCFDictionaryGetBooleanIfPresent();
        FigCFDictionaryGetBooleanIfPresent();
      }
      if (theDict)
      {
        if (!v8)
          CFRetain(theDict);
      }
LABEL_17:
      vtPopulateVideoDecoderRegistry();
    }
    if (CFDictionaryGetValue(theDict, CFSTR("EnableHardwareAcceleratedVideoDecoder")))
    {
      v8 = 0;
      goto LABEL_10;
    }
  }
  v9 = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  v8 = v9;
  if (!v9)
    goto LABEL_17;
  CFDictionarySetValue(v9, CFSTR("EnableHardwareAcceleratedVideoDecoder"), *v6);
  if (!theDict)
    goto LABEL_12;
  goto LABEL_10;
}

uint64_t VTLoadVideoDecoders()
{
  return vtLoadVideoDecodersGuts(0);
}

uint64_t VTRegisterVideoDecoder(unsigned int a1, uint64_t a2)
{
  return VTRegisterVideoDecoderWithInfo(a1, 0, a2);
}

uint64_t VTRegisterVideoDecoderWithInfo(unsigned int a1, const __CFDictionary *a2, uint64_t a3)
{
  const __CFAllocator *v6;
  CFStringRef v7;
  CFStringRef v8;
  const __CFString *Value;
  CFMutableDictionaryRef MutableCopy;
  __CFDictionary *Mutable;
  __CFString *v12;
  uint64_t v13;
  uint64_t v14;
  CFStringRef v15;
  CFNumberRef v16;
  uint64_t v17;
  CFNumberRef v18;
  int valuePtr;
  UInt8 bytes[4];

  valuePtr = 0;
  MEMORY[0x1940281CC](&sCreateVideoDecoderRegistryOnce, vtCreateVideoDecoderRegistry);
  *(_DWORD *)bytes = bswap32(a1);
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v7 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], bytes, 4, 0x600u, 0);
  if (!v7)
    return FigSignalErrorAt();
  v8 = v7;
  if (!a2)
  {
    Mutable = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
      goto LABEL_8;
LABEL_11:
    v13 = FigSignalErrorAt();
    v18 = (CFNumberRef)v8;
LABEL_19:
    CFRelease(v18);
    return v13;
  }
  Value = (const __CFString *)CFDictionaryGetValue(a2, CFSTR("CMClassImplementationID"));
  MutableCopy = CFDictionaryCreateMutableCopy(v6, 0, a2);
  if (!MutableCopy)
    goto LABEL_11;
  Mutable = MutableCopy;
  if (Value)
  {
    v12 = CFStringCreateMutableCopy(v6, 0, Value);
    CFStringAppendFormat(v12, 0, CFSTR(".%@"), v8);
    goto LABEL_9;
  }
LABEL_8:
  v14 = FigAtomicIncrement32();
  v12 = CFStringCreateMutable(v6, 0);
  CFStringAppendFormat(v12, 0, CFSTR("com.apple.videotoolbox.videodecoder.anon-%d"), v14);
LABEL_9:
  CFDictionarySetValue(Mutable, CFSTR("VTCodecType"), v8);
  v15 = CFStringCreateWithFormat(v6, 0, CFSTR("Dynamically Registered %@ Video Decoder"), v8);
  v16 = CFNumberCreate(v6, kCFNumberSInt32Type, &valuePtr);
  if (v16)
  {
    CFDictionaryAddValue(Mutable, CFSTR("VTRating"), v16);
    CFDictionarySetValue(Mutable, CFSTR("VTAllowSandboxedDecode"), (const void *)*MEMORY[0x1E0C9AE40]);
    v17 = vtRegisterVideoDecoderInternal(v15, v12, Mutable, a3, 0);
  }
  else
  {
    v17 = FigSignalErrorAt();
  }
  v13 = v17;
  if (v12)
    CFRelease(v12);
  CFRelease(Mutable);
  CFRelease(v8);
  if (v15)
    CFRelease(v15);
  if (v16)
  {
    v18 = v16;
    goto LABEL_19;
  }
  return v13;
}

CFDictionaryRef FigCreateIOSurfacePropertiesDictionary()
{
  mach_port_t *v0;
  uint64_t v1;
  io_object_t v2;
  int v3;
  uint64_t v4;
  mach_port_t v5;
  const __CFDictionary *v6;
  io_service_t MatchingService;
  char v8;
  CFNumberRef v9;
  CFDictionaryRef v10;
  CFIndex v11;
  int v13;
  void *values[2];
  void *keys[2];
  _DWORD valuePtr[4];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  keys[0] = 0;
  keys[1] = 0;
  values[0] = 0;
  values[1] = 0;
  v0 = (mach_port_t *)MEMORY[0x1E0CBBAA8];
  if ((hasMMU_checked & 1) == 0)
  {
    v13 = 16;
    v1 = IORegistryEntryFromPath(*MEMORY[0x1E0CBBAA8], "IODeviceTree:/arm-io");
    if ((_DWORD)v1)
    {
      v2 = v1;
      hasMMU_hasMMU = MEMORY[0x1940284C0](v1, "iommu-present", valuePtr, &v13) == 0;
      IOObjectRelease(v2);
    }
    hasMMU_checked = 1;
  }
  v3 = hasMMU_hasMMU;
  if ((hasVXD_checked & 1) == 0)
  {
    v4 = 0;
    v5 = *v0;
    while (1)
    {
      v6 = IOServiceMatching(hasVXD_vxdNames[v4]);
      MatchingService = IOServiceGetMatchingService(v5, v6);
      if (MatchingService)
        break;
      if (++v4 == 3)
        goto LABEL_11;
    }
    IOObjectRelease(MatchingService);
    hasVXD_hasSupport = 1;
LABEL_11:
    hasVXD_checked = 1;
  }
  v8 = hasVXD_hasSupport;
  MEMORY[0x1940281CC](&FigRegisterIOSurfacePixelTransferCapability_sOnlyRegisterOnce, FigRegisterIOSurfacePixelTransferCapabilityOnce);
  if (!v3)
  {
    keys[0] = *(void **)MEMORY[0x1E0CBC040];
    values[0] = CFSTR("PurpleGfxMem");
    v11 = 1;
    return CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)values, v11, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  }
  if ((v8 & 1) == 0)
  {
    v11 = 0;
    return CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)values, v11, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  }
  valuePtr[0] = 1024;
  v9 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
  keys[0] = *(void **)MEMORY[0x1E0CBBF10];
  values[0] = v9;
  v10 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v9)
    CFRelease(v9);
  return v10;
}

uint64_t FigRegisterIOSurfacePixelTransferCapabilityOnce()
{
  uint64_t result;
  int v1;
  int v2;
  mach_port_t v3;
  const __CFDictionary *v4;
  io_service_t MatchingService;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD v36[4];
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  _BYTE v40[24];
  __int16 v41;
  char v42;
  __int16 v43;
  char v44;
  _QWORD v45[11];
  _QWORD v46[23];
  _QWORD v47[15];
  _QWORD v48[8];

  v48[5] = *MEMORY[0x1E0C80C00];
  v39 = 0;
  v37 = 0u;
  v38 = 0u;
  memset(v36, 0, sizeof(v36));
  sUnsetYCbCrMatrix = CVYCbCrMatrixGetIntegerCodePointForString(0);
  sUnsetColorPrimaryMatrix = CVColorPrimariesGetIntegerCodePointForString(0);
  sUnsetTransferFunction = CVTransferFunctionGetIntegerCodePointForString(0);
  result = VTAvoidHardwarePixelTransfer();
  if (!(_DWORD)result)
  {
    scalerCapabilities((uint64_t)v36);
    v1 = LOBYTE(v36[0]) ? 15 : 13;
    v2 = BYTE1(v36[0]) ? v1 | 0x10 : v1;
    result = IOSurfaceAcceleratorCreate();
    if (!(_DWORD)result)
    {
      CFRelease(0);
      if ((hasH1CLCD_checked & 1) == 0)
      {
        v3 = *MEMORY[0x1E0CBBAA8];
        v4 = IOServiceMatching("AppleH1CLCD");
        MatchingService = IOServiceGetMatchingService(v3, v4);
        hasH1CLCD_hasH1CLCDService = MatchingService != 0;
        if (MatchingService)
          IOObjectRelease(MatchingService);
        hasH1CLCD_checked = 1;
      }
      if (hasH1CLCD_hasH1CLCDService)
      {
        VTRegisterPixelTransferCapability(2033463856, 0x32767579u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Validate, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Transfer, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(2033463856, 0x4C353635u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Validate, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Transfer, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(2037741171, 0x42475241u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Validate, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Transfer, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(2037741158, 0x42475241u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Validate, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Transfer, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(2037741158, 0x79343230u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Validate, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Transfer, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(2037741158, 0x66343230u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Validate, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Transfer, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(1111970369, 0x79757673u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Validate, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Transfer, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(1111970369, 0x79757666u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Validate, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Transfer, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(2033463856, 0x42475241u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Validate, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Transfer, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(875704438, 0x42475241u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Validate, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Transfer, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(875704422, 0x42475241u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Validate, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Transfer, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(875704422, 0x34323066u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Validate, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Transfer, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(1111970369, 0x42475241u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Validate, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Transfer, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(2037741171, 0x79757673u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Validate, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Transfer, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(2037741158, 0x79757666u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Validate, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Transfer, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        return VTRegisterPixelTransferCapability(2037741158, 0x34323066u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Validate, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Transfer, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      }
      VTRegisterPixelTransferCapability(875704438, 0x34323076u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      VTRegisterPixelTransferCapability(875704422, 0x34323066u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      VTRegisterPixelTransferCapability(1111970369, 0x42475241u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      VTRegisterPixelTransferCapability(875704438, 0x42475241u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      VTRegisterPixelTransferCapability(875704422, 0x42475241u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      VTRegisterPixelTransferCapability(1111970369, 0x34323076u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      VTRegisterPixelTransferCapability(1111970369, 0x34323066u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      VTRegisterPixelTransferCapability(875704950, 0x42475241u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      VTRegisterPixelTransferCapability(875704934, 0x42475241u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      VTRegisterPixelTransferCapability(1111970369, 0x34323276u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      VTRegisterPixelTransferCapability(1111970369, 0x34323266u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      VTRegisterPixelTransferCapability(875836534, 0x42475241u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      VTRegisterPixelTransferCapability(875836518, 0x42475241u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      VTRegisterPixelTransferCapability(1111970369, 0x34343476u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      VTRegisterPixelTransferCapability(1111970369, 0x34343466u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      VTRegisterPixelTransferCapability(875704422, 0x4C353635u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      VTRegisterPixelTransferCapability(1278555701, 0x4C353635u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      VTRegisterPixelTransferCapability(1815162994, 0x42475241u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      VTRegisterPixelTransferCapability(1380411457, 0x42475241u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      VTRegisterPixelTransferCapability(1380411457, 0x52476841u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      if (BYTE2(v36[0]))
      {
        VTRegisterPixelTransferCapability(1111970369, 0x79757673u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(1111970369, 0x79757666u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(2037741171, 0x42475241u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(2037741158, 0x42475241u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(2037741158, 0x4C353635u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(2037741158, 0x34323066u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(2037741158, 0x79757666u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(2037741171, 0x79757673u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(875704438, 0x34323276u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(875704422, 0x34323266u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      }
      if (HIBYTE(v36[0]))
      {
        VTRegisterPixelTransferCapability(875704422, 0x34323076u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(875704438, 0x34323066u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(875704438, 0x34323266u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(875704422, 0x34323276u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      }
      if (BYTE6(v36[0]))
      {
        VTRegisterPixelTransferCapability(1278226488, 0x4C303038u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(1278226488, 0x42475241u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      }
      if (BYTE8(v36[0]))
        VTRegisterPixelTransferCapability(1278226742, 0x4C303136u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      if (BYTE3(v36[0]))
      {
        VTRegisterPixelTransferCapability(875704422, 0x52474241u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(875836518, 0x52474241u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      }
      if (BYTE4(v36[0]))
      {
        VTRegisterPixelTransferCapability(1999843442, 0x77333072u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(1999843442, 0x42475241u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(1999843442, 0x34323076u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(1999843442, 0x34323066u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(1111970369, 0x77333072u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(875704438, 0x77333072u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(875704422, 0x77333072u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      }
      if (BYTE5(v36[0]))
        VTRegisterPixelTransferCapability(1647534392, 0x62336138u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      if (BYTE11(v36[0]))
      {
        VTRegisterPixelTransferCapability(2016686642, 0x78343232u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(2019963442, 0x78663232u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      }
      if (BYTE4(v36[0]))
      {
        v45[0] = 1815162994;
        memset(&v46[3], 0, 64);
        v6 = BYTE14(v36[0]);
        if (BYTE14(v36[0]))
        {
          HIDWORD(v45[0]) = 644624754;
          v7 = 2;
        }
        else
        {
          v7 = 1;
        }
        qmemcpy(v46, "v024f024v224f224v444f444", 24);
        v8 = BYTE11(v36[0]);
        if (BYTE11(v36[0]))
        {
          v46[3] = 0x7866323278343232;
          v9 = 8;
        }
        else
        {
          v9 = 6;
        }
        if (BYTE12(v36[0]))
        {
          *(_QWORD *)((char *)v46 + 4 * v9) = 0x7866343478343434;
          v9 += 2;
        }
        if (BYTE9(v36[0]))
        {
          *(_QWORD *)((char *)v46 + 4 * v9) = 0x7866347078343470;
          v9 += 2;
        }
        if (v6)
        {
          qmemcpy((char *)v46 + 4 * v9, "0v8&0f8&2v8&2f8&4v8&4f8&", 24);
          if (v8)
          {
            *((_DWORD *)&v46[3] + v9) = 645428786;
            v9 += 7;
          }
          else
          {
            v9 += 6;
          }
        }
        VTRegisterPixelTransferCapabilityMxN(v45, v7, (unsigned int *)v46, v9, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      }
      if (BYTE13(v36[0]))
      {
        VTRegisterPixelTransferCapabilityMxN(FigRegisterIOSurfacePixelTransferCapabilityOnce_compressedHTPCPixelFormatTypes, 18, FigRegisterIOSurfacePixelTransferCapabilityOnce_uncompressedPixelFormatTypes, 52, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapabilityMxN(FigRegisterIOSurfacePixelTransferCapabilityOnce_uncompressedPixelFormatTypes, 52, FigRegisterIOSurfacePixelTransferCapabilityOnce_compressedHTPCPixelFormatTypes, 18, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapabilityMxN(FigRegisterIOSurfacePixelTransferCapabilityOnce_compressedHTPCPixelFormatTypes, 18, FigRegisterIOSurfacePixelTransferCapabilityOnce_compressedHTPCPixelFormatTypes, 18, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      }
      if (BYTE14(v36[0]))
      {
        qmemcpy(v46, "0v8&2v8&4v8&0f8&2f8&4f8&0vx&2vx&4vx&0fx&2fx&4fx&0wx&2wx&4wx&p44&p4f&0vs&2vs&4vs&0vt&2vt&4vt&s4x&s4t&s4s&s2x&s2t&s2s&80v&82v&84v&0fh&2fh&4fh&80x&82x&84x&r3w&AGB&AhR&83b&h0L&80L&01L&61L&", sizeof(v46));
        if (BYTE12(v37))
        {
          qmemcpy(v47, "0v8-0f8-0v8/0f8/0v8|0f8|0vx-0fx-0vx/0fx/0vx|0fx|2vx-2fx-2vx/2fx/2vx|2fx|h0L-h0L/h0L|AhR-AhR/AhR|AGB-AGB/AGB|0fh-0fh/0fh|", sizeof(v47));
          v10 = 76;
        }
        else
        {
          v10 = 46;
        }
        VTRegisterPixelTransferCapabilityMxN(v46, v10, FigRegisterIOSurfacePixelTransferCapabilityOnce_uncompressedPixelFormatTypes, 52, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapabilityMxN(FigRegisterIOSurfacePixelTransferCapabilityOnce_uncompressedPixelFormatTypes, 52, (unsigned int *)v46, v10, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapabilityMxN(v46, v10, (unsigned int *)v46, v10, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      }
      qmemcpy(v46, "v024v224v444f024f224f444024p224p444p02fp22fp44fp02wp22wp44wp024x02fx02wx444x44fx44wxp44xp4fxr03wARGB8a3b", 104);
      v11 = HIBYTE(v37);
      if (HIBYTE(v37))
      {
        LODWORD(v46[15]) = 2016698739;
        *(_OWORD *)&v46[13] = *(_OWORD *)"8a0v8a2v8a4vsa2xsa4x";
        if (BYTE13(v37))
        {
          qmemcpy((char *)&v46[15] + 4, "02vt22vt44vtsa2tsa4t", 20);
          v12 = 36;
        }
        else
        {
          v12 = 31;
        }
      }
      else if (BYTE13(v37))
      {
        qmemcpy(&v46[13], "02vt22vt44vt", 12);
        v12 = 29;
      }
      else
      {
        v12 = 26;
      }
      if (BYTE14(v37))
      {
        qmemcpy((char *)v46 + 4 * v12, "02vs22vs44vs", 12);
        if (v11)
        {
          *(_QWORD *)((char *)&v46[1] + 4 * v12 + 4) = 0x7334617373326173;
          v12 += 5;
        }
        else
        {
          v12 += 3;
        }
      }
      result = VTRegisterPixelTransferCapabilityMxN(v46, v12, (unsigned int *)v46, v12, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      if (BYTE7(v36[0]))
        result = VTRegisterPixelTransferCapability(1278226736, 0x4C303130u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      if (BYTE10(v36[0]) && BYTE11(v36[0]))
        result = VTRegisterPixelTransferCapability(1882468912, 0x70343232u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      v13 = BYTE9(v36[0]);
      if (BYTE9(v36[0]))
      {
        qmemcpy(v45, "p44xp4fxp4wx", 12);
        v43 = 257;
        v44 = 1;
        v41 = 0;
        v42 = 0;
        v14 = 3;
      }
      else
      {
        v14 = 0;
      }
      v15 = BYTE12(v36[0]);
      if (BYTE12(v36[0]))
      {
        *(_OWORD *)((char *)v45 + 4 * v14) = xmmword_1928E24F0;
        v16 = v14 | 4;
        *(_QWORD *)((char *)v45 + 4 * v16) = 0x7077343470663434;
        *(_DWORD *)((char *)&v43 + v14) = 16843009;
        *((_BYTE *)&v43 + v16) = 1;
        v17 = v14 + 5;
        *((_BYTE *)&v43 + v17) = 1;
        *(_DWORD *)((char *)&v41 + v14) = 0;
        *((_BYTE *)&v41 + v16) = 0;
        *((_BYTE *)&v41 + v17) = 0;
        v14 += 6;
      }
      if (BYTE11(v36[0]))
      {
        *(_OWORD *)((char *)v45 + 4 * v14) = xmmword_1928E2500;
        v18 = v14 + 4;
        *(_QWORD *)((char *)v45 + 4 * v18) = 0x7077323270663232;
        *(_DWORD *)((char *)&v43 + v14) = 0;
        *(__int16 *)((char *)&v43 + v18) = 0;
        *(_DWORD *)((char *)&v41 + v14) = 16843009;
        *(__int16 *)((char *)&v41 + v18) = 257;
        v14 += 6;
      }
      if (BYTE10(v36[0]))
      {
        *(_OWORD *)((char *)v45 + 4 * v14) = xmmword_1928E2510;
        v19 = v14 + 4;
        *(_QWORD *)((char *)v45 + 4 * v19) = 0x7077323070663230;
        *(_DWORD *)((char *)&v43 + v14) = 0;
        *(__int16 *)((char *)&v43 + v19) = 0;
        *(_DWORD *)((char *)&v41 + v14) = 0;
        *(__int16 *)((char *)&v41 + v19) = 0;
        v14 += 6;
      }
      else if (!v14)
      {
LABEL_92:
        if (v13 && v15)
        {
          v31 = 0;
          qmemcpy(v48, "p44xp4fxp4wx024p02fp02wp", 24);
          qmemcpy(v40, "444x44fx44wx024x02fx02wx", sizeof(v40));
          do
          {
            v32 = *(_DWORD *)((char *)v48 + v31);
            v33 = *(_DWORD *)&v40[v31];
            VTRegisterPixelTransferCapability(v32, v33, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
            result = VTRegisterPixelTransferCapability(v33, v32, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
            v31 += 4;
          }
          while (v31 != 24);
        }
        return result;
      }
      v20 = 0;
      v34 = v14;
      do
      {
        if (BYTE4(v36[0]))
        {
          LODWORD(v48[0]) = 1999843442;
          v21 = 1;
        }
        else
        {
          v21 = 0;
        }
        v22 = *((_DWORD *)v45 + v20);
        v23 = *((unsigned __int8 *)&v43 + v20);
        v24 = *((unsigned __int8 *)&v41 + v20);
        qmemcpy((char *)v48 + 4 * v21, "ARGBv024f024", 12);
        v25 = v21 + 3;
        if (v24)
        {
          v26 = 4 * v25;
          v25 = v21 + 5;
          *(_QWORD *)((char *)v48 + v26) = 0x3432326634323276;
        }
        v35 = v20;
        if (v23)
        {
          v27 = 4 * v25;
          v25 += 2;
          *(_QWORD *)((char *)v48 + v27) = 0x3434346634343476;
        }
        v28 = 0;
        v29 = 4 * v25;
        do
        {
          v30 = *(_DWORD *)((char *)v48 + v28);
          VTRegisterPixelTransferCapability(v22, v30, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
          VTRegisterPixelTransferCapability(v30, v22, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
          v28 += 4;
        }
        while (v29 != v28);
        result = VTRegisterPixelTransferCapability(v22, v22, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        v20 = v35 + 1;
      }
      while (v35 + 1 != v34);
      v13 = BYTE9(v36[0]);
      v15 = BYTE12(v36[0]);
      goto LABEL_92;
    }
  }
  return result;
}

uint64_t VTRegisterPixelTransferCapability(int a1, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned int v8;
  int v9;

  v9 = a1;
  v8 = a2;
  return VTRegisterPixelTransferCapabilityMxN(&v9, 1, &v8, 1, a3, a4, a5, a6, a7);
}

OSStatus VTDecompressionSessionCreate(CFAllocatorRef allocator, CMVideoFormatDescriptionRef videoFormatDescription, CFDictionaryRef videoDecoderSpecification, CFDictionaryRef destinationImageBufferAttributes, const VTDecompressionOutputCallbackRecord *outputCallback, VTDecompressionSessionRef *decompressionSessionOut)
{
  return VTDecompressionSessionCreateWithOptions((uint64_t)allocator, videoFormatDescription, videoDecoderSpecification, destinationImageBufferAttributes, outputCallback, 0, (uint64_t *)decompressionSessionOut);
}

void RegisterVTDecompressionSession()
{
  sVTDecompressionSessionID = _CFRuntimeRegisterClass();
  sVTDecompressionSessionPropertyCallbacks = 0;
  unk_1ECED8FC0 = VTDecompressionSessionCopySupportedPropertyDictionary;
  qword_1ECED8FC8 = (uint64_t)VTDecompressionSessionSetProperty;
  unk_1ECED8FD0 = VTDecompressionSessionCopyProperty;
  qword_1ECED8FD8 = (uint64_t)VTDecompressionSessionSetProperties;
  unk_1ECED8FE0 = VTDecompressionSessionCopySerializableProperties;
  VTSessionRegisterCallbacksForTypeID(&sVTDecompressionSessionPropertyCallbacks, (const void *)sVTDecompressionSessionID);
}

void VTSessionRegisterCallbacksForTypeID(_QWORD *a1, const void *a2)
{
  const __CFDictionary *Mutable;

  MEMORY[0x1940281CC](&sVTSessionCallbacksMutexCreateOnce, vtCreateSessionCallbacksMutexOnce);
  MEMORY[0x1940280C4](sVTSessionCallbacksMutex);
  if (!*a1
    && a1[1]
    && a1[2]
    && a1[3]
    && a1[4]
    && a1[5]
    && ((Mutable = (const __CFDictionary *)sVTSessionCallbacksPerTypeID) != 0
     || (Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0),
         (sVTSessionCallbacksPerTypeID = (uint64_t)Mutable) != 0))
    && !CFDictionaryGetCountOfKey(Mutable, a2))
  {
    CFDictionarySetValue((CFMutableDictionaryRef)sVTSessionCallbacksPerTypeID, a2, a1);
  }
  else
  {
    FigSignalErrorAt();
  }
  JUMPOUT(0x1940280D0);
}

uint64_t vtCreateSessionCallbacksMutexOnce()
{
  uint64_t result;

  result = FigSimpleMutexCreate();
  sVTSessionCallbacksMutex = result;
  return result;
}

double vtDecompressionSessionInit(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 160) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t VTVideoDecoderGetClassID()
{
  MEMORY[0x1940281CC](&VTVideoDecoderGetClassID_sRegisterVTVideoDecoderTypeOnce, RegisterVTVideoDecoderType);
  return sVTVideoDecoderClassID;
}

uint64_t RegisterVTVideoDecoderType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t vtDecompressionSubDuctAllocate(const __CFAllocator *a1, _QWORD *a2)
{
  _OWORD *v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t result;

  *a2 = 0;
  v3 = CFAllocatorAllocate(a1, 304, 0);
  if (!v3)
    return 4294954392;
  v4 = v3;
  v3[17] = 0u;
  v3[18] = 0u;
  v3[15] = 0u;
  v3[16] = 0u;
  v3[13] = 0u;
  v3[14] = 0u;
  v3[11] = 0u;
  v3[12] = 0u;
  v3[9] = 0u;
  v3[10] = 0u;
  v3[7] = 0u;
  v3[8] = 0u;
  v3[5] = 0u;
  v3[6] = 0u;
  v3[3] = 0u;
  v3[4] = 0u;
  v3[1] = 0u;
  v3[2] = 0u;
  *v3 = 0u;
  v5 = FigSimpleMutexCreate();
  result = 0;
  *((_QWORD *)v4 + 13) = v5;
  *((_DWORD *)v4 + 19) = 1;
  *((_BYTE *)v4 + 144) = 1;
  *a2 = v4;
  return result;
}

uint64_t VTDecoderSessionSetPixelBufferAttributes(uint64_t *a1, const void *a2)
{
  uint64_t v2;
  const void *v4;

  if (!a1)
    return FigSignalErrorAt();
  v2 = *a1;
  if (!*a1)
    return FigSignalErrorAt();
  MEMORY[0x1940280C4](*(_QWORD *)(v2 + 104));
  if (a2)
    CFRetain(a2);
  v4 = *(const void **)(v2 + 56);
  if (v4)
    CFRelease(v4);
  *(_QWORD *)(v2 + 56) = a2;
  ++*(_DWORD *)(v2 + 76);
  MEMORY[0x1940280D0](*(_QWORD *)(v2 + 104));
  return 0;
}

uint64_t VTDecoderSessionGetPixelBufferPool(uint64_t *a1)
{
  return vtDecoderSessionGetSubDuctPixelBufferPool(a1, 1);
}

CVPixelBufferPoolRef *VTBuildPixelBufferPools(const __CFAllocator *a1, const __CFDictionary *a2, const __CFDictionary *a3, uint64_t a4, CVPixelBufferPoolRef *a5, CVPixelBufferPoolRef *a6)
{
  return vtBuildPixelBufferPoolsCommon(a1, a2, a3, 0, a4, 0, 0, 0, 0, 0, a5, a6, 0, 0);
}

uint64_t vtCreateUsablePixelBufferAttributes(const __CFAllocator *a1, uint64_t a2, CFDictionaryRef theDict, const __CFDictionary *a4, int a5, __CFDictionary **a6, char *a7)
{
  const void *Value;
  const void *v11;
  const void *v12;
  BOOL v13;
  _BOOL4 v14;
  int v15;
  BOOL v16;
  const void *v17;
  int IntIfPresent;
  int v19;
  BOOL v20;
  const void *v23;
  int v24;
  const __CFDictionary *v25;
  __CFDictionary *MutableCopy;
  CFTypeID TypeID;
  CFTypeID v28;
  char v29;
  void *v30;
  const void *v31;
  __CFArray *v32;
  CFMutableArrayRef ReorderedPixelFormatArray;
  CFMutableDictionaryRef Mutable;
  char v35;
  const void *v36;
  const void *v37;
  char *v38;
  const void *v39;
  uint64_t v40;
  const void *v41;
  const void *v42;
  const void *v43;
  char v44;
  const void *v45;
  const void *v46;
  CFTypeID v47;
  CFTypeID v48;
  const void *v49;
  __CFArray *v50;
  uint64_t v51;
  const void *v52;
  void *v53;
  void *v54;
  CFTypeID v55;
  CFTypeID v56;
  CFIndex Count;
  CFIndex v58;
  CFIndex v59;
  void *ValueAtIndex;
  CFTypeID v61;
  CFTypeID v62;
  __CFDictionary *v63;
  const void *v64;
  int v65;
  CFTypeID v66;
  CFIndex v67;
  const void *v68;
  uint64_t v69;
  const void *v70;
  char v71;
  CFNumberRef v72;
  _BOOL4 IsPixelFormatCompatibleWithAttributes;
  char v74;
  uint64_t v75;
  const void *v76;
  const void *v77;
  const void *v78;
  const void *v79;
  uint64_t v80;
  const void *v82;
  const void *v84;
  const void *v85;
  CFTypeRef cf;
  char *cfa;
  int valuePtr;
  uint64_t v92;

  if (theDict)
  {
    cf = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CA9040]);
    Value = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CA90E0]);
    v11 = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CA8FD8]);
  }
  else
  {
    cf = 0;
    Value = 0;
    v11 = 0;
  }
  if (a4)
  {
    v12 = (const void *)*MEMORY[0x1E0CA8FF0];
    v84 = Value;
    v13 = CFDictionaryContainsKey(a4, (const void *)*MEMORY[0x1E0CA8FF0])
       && (!theDict || !CFDictionaryContainsKey(theDict, v12));
    v17 = v11;
    if (CFDictionaryContainsKey(a4, v12))
    {
      v92 = 0;
      CFDictionaryGetValue(a4, v12);
      if (theDict)
        CFDictionaryGetValue(theDict, v12);
      IntIfPresent = FigCFDictionaryGetIntIfPresent();
      v19 = FigCFDictionaryGetIntIfPresent();
      if (IntIfPresent)
        v20 = HIDWORD(v92) == 0;
      else
        v20 = 1;
      v15 = !v20 && v19 == 0 && (_DWORD)v92 == 0;
    }
    else
    {
      v15 = 0;
    }
    v23 = (const void *)*MEMORY[0x1E0CA8F80];
    v24 = CFDictionaryContainsKey(a4, (const void *)*MEMORY[0x1E0CA8F80]);
    v14 = v24 != 0;
    if (theDict && v24)
    {
      if (CFDictionaryContainsKey(theDict, v23))
      {
        v14 = 0;
      }
      else
      {
        v25 = (const __CFDictionary *)CFDictionaryGetValue(theDict, v12);
        if (v25)
          v14 = CFDictionaryContainsKey(v25, (const void *)*MEMORY[0x1E0CBBF10]) == 0;
        else
          v14 = 1;
      }
    }
    v16 = CFDictionaryContainsKey(a4, (const void *)*MEMORY[0x1E0CA9000]) != 0;
    v11 = v17;
    Value = v84;
    if (v13)
      goto LABEL_45;
  }
  else
  {
    v14 = 0;
    v13 = 0;
    v15 = 0;
    v16 = 0;
  }
  if (theDict && cf && Value && v11)
  {
    MutableCopy = CFDictionaryCreateMutableCopy(a1, 0, theDict);
    if (MutableCopy)
    {
      if (a5)
      {
        TypeID = CFArrayGetTypeID();
        v28 = CFGetTypeID(cf);
        v29 = 0;
        v30 = 0;
        if (!a4 || TypeID != v28)
        {
          ReorderedPixelFormatArray = 0;
          goto LABEL_131;
        }
        v31 = (const void *)*MEMORY[0x1E0CA9040];
        v32 = (__CFArray *)CFDictionaryGetValue(a4, (const void *)*MEMORY[0x1E0CA9040]);
        ReorderedPixelFormatArray = vtCreateReorderedPixelFormatArray(a1, (CFArrayRef)cf, v32);
        if (ReorderedPixelFormatArray)
        {
          CFDictionarySetValue(MutableCopy, v31, ReorderedPixelFormatArray);
          v30 = 0;
          v29 = 1;
LABEL_131:
          if (VTAvoidIOSurfaceBackings())
            CFDictionaryRemoveValue(MutableCopy, (const void *)*MEMORY[0x1E0CA8FF0]);
          v51 = 0;
          *a6 = MutableCopy;
          MutableCopy = 0;
LABEL_134:
          if (!a7)
            goto LABEL_136;
          goto LABEL_135;
        }
        v30 = 0;
      }
      else
      {
        v30 = 0;
        ReorderedPixelFormatArray = 0;
      }
      v29 = 0;
      goto LABEL_131;
    }
LABEL_70:
    v30 = 0;
    ReorderedPixelFormatArray = 0;
    v29 = 0;
    v51 = 4294954392;
    if (!a7)
      goto LABEL_136;
LABEL_135:
    *a7 = v29;
    goto LABEL_136;
  }
LABEL_45:
  if (theDict)
    Mutable = CFDictionaryCreateMutableCopy(a1, 0, theDict);
  else
    Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  MutableCopy = Mutable;
  if (!Mutable)
    goto LABEL_70;
  v82 = v11;
  v35 = !v13;
  if (!a4)
    v35 = 1;
  if ((v35 & 1) == 0)
  {
    v36 = (const void *)*MEMORY[0x1E0CA8FF0];
    v37 = CFDictionaryGetValue(a4, (const void *)*MEMORY[0x1E0CA8FF0]);
    CFDictionarySetValue(MutableCopy, v36, v37);
  }
  if (a4 && v15)
  {
    v38 = a7;
    v39 = (const void *)*MEMORY[0x1E0CA8FF0];
    CFDictionaryGetValue(a4, (const void *)*MEMORY[0x1E0CA8FF0]);
    CFDictionaryGetValue(MutableCopy, v39);
    v40 = FigCFDictionaryCreateMutableCopy();
    if (!v40)
    {
      v51 = FigSignalErrorAt();
      v30 = 0;
      ReorderedPixelFormatArray = 0;
      v29 = 0;
      if (a7)
        goto LABEL_135;
      goto LABEL_136;
    }
    v41 = (const void *)v40;
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValue();
    CFRelease(v41);
    a7 = v38;
  }
  if (a4 && v14)
  {
    v42 = (const void *)*MEMORY[0x1E0CA8F80];
    v43 = CFDictionaryGetValue(a4, (const void *)*MEMORY[0x1E0CA8F80]);
    CFDictionarySetValue(MutableCopy, v42, v43);
  }
  v44 = !v16;
  if (!a4)
    v44 = 1;
  if ((v44 & 1) == 0)
  {
    v45 = (const void *)*MEMORY[0x1E0CA9000];
    v46 = CFDictionaryGetValue(a4, (const void *)*MEMORY[0x1E0CA9000]);
    CFDictionarySetValue(MutableCopy, v45, v46);
  }
  if (!cf)
  {
    v85 = Value;
    cfa = a7;
    if (a4)
    {
      v52 = (const void *)*MEMORY[0x1E0CA9040];
      v53 = (void *)CFDictionaryGetValue(a4, (const void *)*MEMORY[0x1E0CA9040]);
      if (v53)
      {
        v54 = v53;
        v55 = CFNumberGetTypeID();
        if (v55 == CFGetTypeID(v54))
        {
          if (vtIsPixelFormatCompatibleWithAttributes(v54, (uint64_t)theDict))
          {
            v30 = (void *)CFRetain(v54);
LABEL_93:
            if (v30)
            {
              CFDictionaryAddValue(MutableCopy, v52, v30);
LABEL_110:
              ReorderedPixelFormatArray = 0;
              v29 = 0;
              a7 = cfa;
              Value = v85;
              goto LABEL_117;
            }
          }
        }
        else
        {
          v56 = CFArrayGetTypeID();
          if (v56 == CFGetTypeID(v54))
          {
            Count = CFArrayGetCount((CFArrayRef)v54);
            if (Count >= 1)
            {
              v58 = Count;
              v59 = 0;
              v30 = 0;
              while (1)
              {
                ValueAtIndex = (void *)CFArrayGetValueAtIndex((CFArrayRef)v54, v59);
                v61 = CFNumberGetTypeID();
                if (v61 == CFGetTypeID(ValueAtIndex)
                  && vtIsPixelFormatCompatibleWithAttributes(ValueAtIndex, (uint64_t)theDict))
                {
                  if (!v30)
                  {
                    v30 = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
                    if (!v30)
                      goto LABEL_111;
                  }
                  CFArrayAppendValue((CFMutableArrayRef)v30, ValueAtIndex);
                }
                if (v58 == ++v59)
                  goto LABEL_93;
              }
            }
          }
        }
        v62 = CFGetTypeID(v54);
        if (v62 == CFNumberGetTypeID())
        {
          if (vtPixelFormatRequiresRGhAFallback(v54))
            goto LABEL_97;
        }
        else
        {
          v66 = CFGetTypeID(v54);
          if (v66 == CFArrayGetTypeID() && CFArrayGetCount((CFArrayRef)v54) >= 1)
          {
            v67 = 0;
            while (1)
            {
              v68 = CFArrayGetValueAtIndex((CFArrayRef)v54, v67);
              if (vtPixelFormatRequiresRGhAFallback(v68))
                break;
              if (CFArrayGetCount((CFArrayRef)v54) <= ++v67)
                goto LABEL_103;
            }
LABEL_97:
            v63 = MutableCopy;
            v64 = v52;
            v65 = 1380411457;
LABEL_114:
            v75 = vtAddNumberToCFDictionary(v63, v64, v65);
            v29 = 0;
            v30 = 0;
            ReorderedPixelFormatArray = 0;
            a7 = cfa;
            Value = v85;
            if ((_DWORD)v75)
            {
              v51 = v75;
              ReorderedPixelFormatArray = 0;
              if (cfa)
                goto LABEL_135;
              goto LABEL_136;
            }
            goto LABEL_117;
          }
        }
      }
    }
LABEL_103:
    v69 = 0;
    v70 = (const void *)*MEMORY[0x1E0CA9040];
    v71 = 1;
    while (1)
    {
      valuePtr = dword_1928DFE88[v69];
      v72 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      v30 = v72;
      if (!v72)
        break;
      IsPixelFormatCompatibleWithAttributes = vtIsPixelFormatCompatibleWithAttributes(v72, (uint64_t)theDict);
      if (IsPixelFormatCompatibleWithAttributes)
        CFDictionaryAddValue(MutableCopy, v70, v30);
      CFRelease(v30);
      v74 = !IsPixelFormatCompatibleWithAttributes & v71;
      v69 = 1;
      v71 = 0;
      if ((v74 & 1) == 0)
      {
        if (IsPixelFormatCompatibleWithAttributes)
        {
          v30 = 0;
          goto LABEL_110;
        }
        v63 = MutableCopy;
        v64 = v70;
        v65 = 32;
        goto LABEL_114;
      }
    }
LABEL_111:
    ReorderedPixelFormatArray = 0;
    v29 = 0;
    v51 = 4294954392;
    a7 = cfa;
    if (cfa)
      goto LABEL_135;
    goto LABEL_136;
  }
  if (!a5)
  {
    v30 = 0;
    ReorderedPixelFormatArray = 0;
LABEL_83:
    v29 = 0;
    goto LABEL_117;
  }
  v47 = CFArrayGetTypeID();
  v48 = CFGetTypeID(cf);
  v29 = 0;
  v30 = 0;
  ReorderedPixelFormatArray = 0;
  if (a4 && v47 == v48)
  {
    v49 = (const void *)*MEMORY[0x1E0CA9040];
    v50 = (__CFArray *)CFDictionaryGetValue(a4, (const void *)*MEMORY[0x1E0CA9040]);
    ReorderedPixelFormatArray = vtCreateReorderedPixelFormatArray(a1, (CFArrayRef)cf, v50);
    if (ReorderedPixelFormatArray)
    {
      CFDictionarySetValue(MutableCopy, v49, ReorderedPixelFormatArray);
      v30 = 0;
      v29 = 1;
      goto LABEL_117;
    }
    v30 = 0;
    goto LABEL_83;
  }
LABEL_117:
  if (Value)
    goto LABEL_118;
  v77 = (const void *)*MEMORY[0x1E0CA90E0];
  if (a4)
  {
    v78 = CFDictionaryGetValue(a4, (const void *)*MEMORY[0x1E0CA90E0]);
    if (v78)
    {
      CFDictionaryAddValue(MutableCopy, v77, v78);
      if (v82)
        goto LABEL_131;
      v76 = (const void *)*MEMORY[0x1E0CA8FD8];
      goto LABEL_125;
    }
  }
  v80 = vtAddNumberToCFDictionary(MutableCopy, v77, a2);
  if (!(_DWORD)v80)
  {
LABEL_118:
    if (v82)
      goto LABEL_131;
    v76 = (const void *)*MEMORY[0x1E0CA8FD8];
    if (!a4)
    {
LABEL_130:
      v51 = vtAddNumberToCFDictionary(MutableCopy, v76, SHIDWORD(a2));
      if ((_DWORD)v51)
        goto LABEL_134;
      goto LABEL_131;
    }
LABEL_125:
    v79 = CFDictionaryGetValue(a4, v76);
    if (v79)
    {
      CFDictionaryAddValue(MutableCopy, v76, v79);
      goto LABEL_131;
    }
    goto LABEL_130;
  }
  v51 = v80;
  if (a7)
    goto LABEL_135;
LABEL_136:
  if (MutableCopy)
    CFRelease(MutableCopy);
  if (v30)
    CFRelease(v30);
  if (ReorderedPixelFormatArray)
    CFRelease(ReorderedPixelFormatArray);
  return v51;
}

void vtDecompressionDuctFinalize(CFAllocatorRef allocator, void *ptr)
{
  uint64_t v4;
  void (*v5)(uint64_t);
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;

  if (ptr)
  {
    v4 = *((_QWORD *)ptr + 1);
    if (v4)
    {
      v5 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v5)
        v5(v4);
      CFRelease(*((CFTypeRef *)ptr + 1));
      *((_QWORD *)ptr + 1) = 0;
    }
    v6 = (const void *)*((_QWORD *)ptr + 6);
    if (v6)
    {
      CFRelease(v6);
      *((_QWORD *)ptr + 6) = 0;
    }
    v7 = (const void *)*((_QWORD *)ptr + 8);
    if (v7)
    {
      CFRelease(v7);
      *((_QWORD *)ptr + 8) = 0;
    }
    if (*((_QWORD *)ptr + 9))
    {
      FigSimpleMutexDestroy();
      *((_QWORD *)ptr + 9) = 0;
    }
    v8 = (const void *)*((_QWORD *)ptr + 10);
    if (v8)
    {
      CFRelease(v8);
      *((_QWORD *)ptr + 10) = 0;
    }
    *((_QWORD *)ptr + 12) = 0;
    v9 = (const void *)*((_QWORD *)ptr + 11);
    if (v9)
    {
      CFRelease(v9);
      *((_QWORD *)ptr + 11) = 0;
    }
    v10 = (const void *)*((_QWORD *)ptr + 22);
    if (v10)
    {
      CFRelease(v10);
      *((_QWORD *)ptr + 22) = 0;
    }
    CFAllocatorDeallocate(allocator, ptr);
  }
}

void vtDecompressionSubDuctFinalize(const __CFAllocator *a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t);
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;

  if (a2)
  {
    v4 = *(_QWORD *)(a2 + 8);
    if (v4)
    {
      v5 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v5)
        v5(v4);
      CFRelease(*(CFTypeRef *)(a2 + 8));
      *(_QWORD *)(a2 + 8) = 0;
    }
    vtDecompressionSubDuctFinishAsynchronousTransfers(a2);
    v6 = *(const void **)(a2 + 112);
    if (v6)
    {
      CFRelease(v6);
      *(_QWORD *)(a2 + 112) = 0;
    }
    v7 = *(const void **)(a2 + 120);
    if (v7)
    {
      CFRelease(v7);
      *(_QWORD *)(a2 + 120) = 0;
    }
    v8 = *(const void **)(a2 + 16);
    if (v8)
    {
      CFRelease(v8);
      *(_QWORD *)(a2 + 16) = 0;
    }
    v9 = *(const void **)(a2 + 296);
    if (v9)
    {
      CFRelease(v9);
      *(_QWORD *)(a2 + 296) = 0;
    }
    v10 = *(const void **)(a2 + 264);
    if (v10)
    {
      CFRelease(v10);
      *(_QWORD *)(a2 + 264) = 0;
    }
    v11 = *(const void **)(a2 + 64);
    if (v11)
    {
      CFRelease(v11);
      *(_QWORD *)(a2 + 64) = 0;
    }
    v12 = *(const void **)(a2 + 136);
    if (v12)
    {
      CFRelease(v12);
      *(_QWORD *)(a2 + 136) = 0;
    }
    *(_QWORD *)(a2 + 192) = 0;
    CVPixelBufferPoolRelease(*(CVPixelBufferPoolRef *)(a2 + 88));
    *(_QWORD *)(a2 + 88) = 0;
    CVPixelBufferPoolRelease(*(CVPixelBufferPoolRef *)(a2 + 96));
    *(_QWORD *)(a2 + 96) = 0;
    v13 = *(const void **)(a2 + 128);
    if (v13)
      CFRelease(v13);
    *(_QWORD *)(a2 + 128) = 0;
    v14 = *(const void **)(a2 + 56);
    if (v14)
    {
      CFRelease(v14);
      *(_QWORD *)(a2 + 56) = 0;
    }
    if (*(_QWORD *)(a2 + 104))
    {
      FigSimpleMutexDestroy();
      *(_QWORD *)(a2 + 104) = 0;
    }
    v15 = *(const void **)(a2 + 176);
    if (v15)
    {
      CFRelease(v15);
      *(_QWORD *)(a2 + 176) = 0;
    }
    v16 = *(const void **)(a2 + 184);
    if (v16)
    {
      CFRelease(v16);
      *(_QWORD *)(a2 + 184) = 0;
    }
    v17 = *(const void **)(a2 + 248);
    if (v17)
    {
      CFRelease(v17);
      *(_QWORD *)(a2 + 248) = 0;
    }
    v18 = *(const void **)(a2 + 200);
    if (v18)
    {
      CFRelease(v18);
      *(_QWORD *)(a2 + 200) = 0;
    }
    v19 = *(const void **)(a2 + 208);
    if (v19)
    {
      CFRelease(v19);
      *(_QWORD *)(a2 + 208) = 0;
    }
    v20 = *(const void **)(a2 + 216);
    if (v20)
    {
      CFRelease(v20);
      *(_QWORD *)(a2 + 216) = 0;
    }
    v21 = *(const void **)(a2 + 224);
    if (v21)
    {
      CFRelease(v21);
      *(_QWORD *)(a2 + 224) = 0;
    }
    v22 = *(const void **)(a2 + 232);
    if (v22)
    {
      CFRelease(v22);
      *(_QWORD *)(a2 + 232) = 0;
    }
    v23 = *(const void **)(a2 + 280);
    if (v23)
    {
      CFRelease(v23);
      *(_QWORD *)(a2 + 280) = 0;
    }
    v24 = *(const void **)(a2 + 288);
    if (v24)
    {
      CFRelease(v24);
      *(_QWORD *)(a2 + 288) = 0;
    }
    CFAllocatorDeallocate(a1, (void *)a2);
  }
}

OSStatus VTSessionCopyProperty(VTSessionRef session, CFStringRef propertyKey, CFAllocatorRef allocator, void *propertyValueOut)
{
  const void *v8;
  uint64_t (**CallbacksWithTypeID)(VTSessionRef, CFStringRef, CFAllocatorRef, void *);

  if (session
    && (v8 = (const void *)CFGetTypeID(session),
        CallbacksWithTypeID = (uint64_t (**)(VTSessionRef, CFStringRef, CFAllocatorRef, void *))VTSessionGetCallbacksWithTypeID(v8),
        propertyKey)
    && propertyValueOut
    && CallbacksWithTypeID)
  {
    return CallbacksWithTypeID[3](session, propertyKey, allocator, propertyValueOut);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

const void *VTSessionGetCallbacksWithTypeID(const void *a1)
{
  const void *Value;

  MEMORY[0x1940281CC](&sVTSessionCallbacksMutexCreateOnce, vtCreateSessionCallbacksMutexOnce);
  MEMORY[0x1940280C4](sVTSessionCallbacksMutex);
  if (sVTSessionCallbacksPerTypeID)
    Value = CFDictionaryGetValue((CFDictionaryRef)sVTSessionCallbacksPerTypeID, a1);
  else
    Value = 0;
  MEMORY[0x1940280D0](sVTSessionCallbacksMutex);
  return Value;
}

uint64_t VTDecompressionSessionCopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const __CFAllocator *v12;
  __int128 *p_valuePtr;
  CFNumberType v14;
  void *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, const void *, const __CFAllocator *, uint64_t *);
  uint64_t v18;
  const CFStringRef *v19;
  CFStringRef v20;
  int v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, const void *, const __CFAllocator *, uint64_t *);
  __int128 valuePtr;
  uint64_t v25;

  *a4 = 0;
  if (*(_BYTE *)(a1 + 16))
    return FigSignalErrorAt();
  v9 = *(_QWORD *)(a1 + 24);
  if (v9)
    return VTDecompressionSessionRemoteBridge_CopyProperty(v9, a2, a3, a4);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  if (!vtDecompressionSessionIsPropertyHandledByVideoToolbox(a2))
    goto LABEL_36;
  if (vtDecompressionSessionIsPropertySupportedBySubDuct(a2))
  {
    if (v11)
      return vtDecompressionSubDuctCopyProperty(v11, a2, (uint64_t)a3, a4);
    v16 = *(_QWORD *)(v10 + 8);
    v17 = *(uint64_t (**)(uint64_t, const void *, const __CFAllocator *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                            + 48);
    if (v17)
      return v17(v16, a2, a3, a4);
    return 4294954514;
  }
  if (CFEqual(CFSTR("NumberOfFramesBeingDecoded"), a2))
  {
    LODWORD(valuePtr) = *(_DWORD *)(*(_QWORD *)v10 + 64);
    v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    p_valuePtr = &valuePtr;
    v14 = kCFNumberIntType;
LABEL_11:
    v15 = CFNumberCreate(v12, v14, p_valuePtr);
LABEL_18:
    v18 = (uint64_t)v15;
LABEL_19:
    result = 0;
    *a4 = v18;
    return result;
  }
  if (CFEqual(CFSTR("MinOutputPresentationTimeStampOfFramesBeingDecoded"), a2))
  {
    valuePtr = *MEMORY[0x1E0CA2E18];
    v25 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    vtDecompressionDuctGetMinOutputPresentationTimeStampOfFramesBeingDecoded(v10, &valuePtr);
  }
  if (CFEqual(CFSTR("MaxOutputPresentationTimeStampOfFramesBeingDecoded"), a2))
  {
    valuePtr = *MEMORY[0x1E0CA2E18];
    v25 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    vtDecompressionDuctGetMaxOutputPresentationTimeStampOfFramesBeingDecoded(v10, &valuePtr);
  }
  if (CFEqual(CFSTR("UsingSandboxedVideoDecoder"), a2))
  {
    v19 = (const CFStringRef *)MEMORY[0x1E0C9AE40];
    if (!v11)
      v19 = (const CFStringRef *)MEMORY[0x1E0C9AE50];
LABEL_23:
    v20 = *v19;
LABEL_24:
    v15 = (void *)CFRetain(v20);
    goto LABEL_18;
  }
  if (CFEqual(CFSTR("OnlyTheseFrames"), a2))
  {
    if (*(_BYTE *)(v10 + 104))
    {
      switch(*(_DWORD *)(v10 + 108))
      {
        case 0:
          v19 = &kVTDecompressionProperty_OnlyTheseFrames_AllFrames;
          goto LABEL_23;
        case 1:
          v19 = &kVTDecompressionProperty_OnlyTheseFrames_NonDroppableFrames;
          goto LABEL_23;
        case 2:
          v19 = &kVTDecompressionProperty_OnlyTheseFrames_IFrames;
          goto LABEL_23;
        case 3:
          v19 = &kVTDecompressionProperty_OnlyTheseFrames_KeyFrames;
          goto LABEL_23;
        default:
          return FigSignalErrorAt();
      }
    }
    goto LABEL_36;
  }
  if (CFEqual(CFSTR("ReducedFrameDelivery"), a2))
  {
    if (*(_BYTE *)(v10 + 104))
    {
      v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      p_valuePtr = (__int128 *)(v10 + 120);
      v14 = kCFNumberDoubleType;
      goto LABEL_11;
    }
    goto LABEL_36;
  }
  if (CFEqual(CFSTR("SuggestedQualityOfServiceTiers"), a2))
  {
    if (*(_BYTE *)(v10 + 104))
    {
      MEMORY[0x1940281CC](&sVTCreateSuggestedQualityOfServiceTiersOnce, vtCreateSuggestedQualityOfServiceTiers);
      v20 = (CFStringRef)sVTVideoDecoderSuggestedQualityOfServiceTiers;
      if (!sVTVideoDecoderSuggestedQualityOfServiceTiers)
        return FigSignalErrorAt();
      goto LABEL_24;
    }
LABEL_36:
    *(_QWORD *)&valuePtr = 0;
    VTDecompressionSessionCopySupportedPropertyDictionary(a1, &valuePtr);
    if (!(_QWORD)valuePtr)
      return 4294954396;
    v21 = CFDictionaryContainsKey((CFDictionaryRef)valuePtr, a2);
    CFRelease((CFTypeRef)valuePtr);
    if (!v21)
      return 4294954396;
    v22 = *(_QWORD *)(v10 + 8);
    v23 = *(uint64_t (**)(uint64_t, const void *, const __CFAllocator *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                            + 48);
    if (v23)
      return v23(v22, a2, a3, a4);
    return 4294954514;
  }
  result = CFEqual(CFSTR("PowerLogSessionID"), a2);
  if ((_DWORD)result)
  {
    v20 = *(CFStringRef *)(v10 + 176);
    if (!v20)
    {
      v18 = 0;
      goto LABEL_19;
    }
    goto LABEL_24;
  }
  return result;
}

BOOL vtDecompressionSessionIsPropertyHandledByVideoToolbox(const void *a1)
{
  MEMORY[0x1940281CC](&sCreatePropertiesHandledByVideoToolboxOnce_0, vtDecompressionSessionCreatePropertiesHandledByVideoToolbox);
  return sVTDecompressionSessionPropertiesHandledByVideoToolbox
      && CFDictionaryContainsKey((CFDictionaryRef)sVTDecompressionSessionPropertiesHandledByVideoToolbox, a1);
}

void vtDecompressionSessionCreatePropertiesHandledByVideoToolbox()
{
  const __CFAllocator *v0;
  CFDictionaryRef v1;
  CFDictionaryRef v2;
  __CFDictionary *Mutable;
  CFArrayRef v4;
  uint64_t i;
  const void *v6;
  __CFDictionary *v7;
  uint64_t v8;
  void *values;
  CFDictionaryRef FrameTypesArrayElement;
  CFDictionaryRef v11;
  CFDictionaryRef v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v1 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v1)
  {
    v2 = v1;
    Mutable = CFDictionaryCreateMutable(v0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    sVTDecompressionSessionPropertiesHandledByVideoToolboxDuct = (uint64_t)Mutable;
    if (!Mutable)
      goto LABEL_18;
    CFDictionarySetValue(Mutable, CFSTR("NumberOfFramesBeingDecoded"), v2);
    CFDictionarySetValue((CFMutableDictionaryRef)sVTDecompressionSessionPropertiesHandledByVideoToolboxDuct, CFSTR("MinOutputPresentationTimeStampOfFramesBeingDecoded"), v2);
    CFDictionarySetValue((CFMutableDictionaryRef)sVTDecompressionSessionPropertiesHandledByVideoToolboxDuct, CFSTR("MaxOutputPresentationTimeStampOfFramesBeingDecoded"), v2);
    CFDictionarySetValue((CFMutableDictionaryRef)sVTDecompressionSessionPropertiesHandledByVideoToolboxDuct, CFSTR("UsingSandboxedVideoDecoder"), v2);
    values = vtCreateFrameTypesArrayElement(CFSTR("AllFrames"));
    FrameTypesArrayElement = vtCreateFrameTypesArrayElement(CFSTR("NonDroppableFrames"));
    v11 = vtCreateFrameTypesArrayElement(CFSTR("IFrames"));
    v12 = vtCreateFrameTypesArrayElement(CFSTR("KeyFrames"));
    v4 = CFArrayCreate(v0, (const void **)&values, 4, MEMORY[0x1E0C9B378]);
    if (!v4)
      FigSignalErrorAt();
    for (i = 0; i != 32; i += 8)
    {
      v6 = *(void **)((char *)&values + i);
      if (v6)
        CFRelease(v6);
    }
    CFDictionarySetValue((CFMutableDictionaryRef)sVTDecompressionSessionPropertiesHandledByVideoToolboxDuct, CFSTR("OnlyTheseFrames"), v4);
    CFDictionarySetValue((CFMutableDictionaryRef)sVTDecompressionSessionPropertiesHandledByVideoToolboxDuct, CFSTR("ReducedFrameDelivery"), v2);
    CFDictionarySetValue((CFMutableDictionaryRef)sVTDecompressionSessionPropertiesHandledByVideoToolboxDuct, CFSTR("SuggestedQualityOfServiceTiers"), v2);
    CFDictionarySetValue((CFMutableDictionaryRef)sVTDecompressionSessionPropertiesHandledByVideoToolboxDuct, CFSTR("PowerLogSessionID"), v2);
    CFDictionarySetValue((CFMutableDictionaryRef)sVTDecompressionSessionPropertiesHandledByVideoToolboxDuct, CFSTR("TemporalLevelLimit"), v2);
    if (v4)
      CFRelease(v4);
    v7 = CFDictionaryCreateMutable(v0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    sVTDecompressionSessionPropertiesHandledByVideoToolboxSubDuct = (uint64_t)v7;
    if (!v7)
      goto LABEL_18;
    CFDictionarySetValue(v7, CFSTR("PixelBufferPool"), v2);
    CFDictionarySetValue((CFMutableDictionaryRef)sVTDecompressionSessionPropertiesHandledByVideoToolboxSubDuct, CFSTR("OutputPoolRequestedMinimumBufferCount"), v2);
    CFDictionarySetValue((CFMutableDictionaryRef)sVTDecompressionSessionPropertiesHandledByVideoToolboxSubDuct, CFSTR("PixelBufferPoolIsShared"), v2);
    CFDictionarySetValue((CFMutableDictionaryRef)sVTDecompressionSessionPropertiesHandledByVideoToolboxSubDuct, CFSTR("MaxAgeForOutputPixelBufferPool"), v2);
    CFDictionarySetValue((CFMutableDictionaryRef)sVTDecompressionSessionPropertiesHandledByVideoToolboxSubDuct, CFSTR("PixelTransferProperties"), v2);
    CFDictionarySetValue((CFMutableDictionaryRef)sVTDecompressionSessionPropertiesHandledByVideoToolboxSubDuct, CFSTR("PoolPixelBufferAttributesSeed"), v2);
    CFDictionarySetValue((CFMutableDictionaryRef)sVTDecompressionSessionPropertiesHandledByVideoToolboxSubDuct, CFSTR("PoolPixelBufferAttributes"), v2);
    CFDictionarySetValue((CFMutableDictionaryRef)sVTDecompressionSessionPropertiesHandledByVideoToolboxSubDuct, CFSTR("ClientPID"), v2);
    CFDictionarySetValue((CFMutableDictionaryRef)sVTDecompressionSessionPropertiesHandledByVideoToolboxSubDuct, CFSTR("ThrottleForBackground"), v2);
    CFDictionarySetValue((CFMutableDictionaryRef)sVTDecompressionSessionPropertiesHandledByVideoToolboxSubDuct, CFSTR("RealTime"), v2);
    CFDictionarySetValue((CFMutableDictionaryRef)sVTDecompressionSessionPropertiesHandledByVideoToolboxSubDuct, CFSTR("ColorPrimaries"), v2);
    CFDictionarySetValue((CFMutableDictionaryRef)sVTDecompressionSessionPropertiesHandledByVideoToolboxSubDuct, CFSTR("TransferFunction"), v2);
    CFDictionarySetValue((CFMutableDictionaryRef)sVTDecompressionSessionPropertiesHandledByVideoToolboxSubDuct, CFSTR("YCbCrMatrix"), v2);
    CFDictionarySetValue((CFMutableDictionaryRef)sVTDecompressionSessionPropertiesHandledByVideoToolboxSubDuct, CFSTR("ICCProfile"), v2);
    CFDictionarySetValue((CFMutableDictionaryRef)sVTDecompressionSessionPropertiesHandledByVideoToolboxSubDuct, CFSTR("MaximizePowerEfficiency"), v2);
    CFDictionarySetValue((CFMutableDictionaryRef)sVTDecompressionSessionPropertiesHandledByVideoToolboxSubDuct, CFSTR("GeneratePerFrameHDRDisplayMetadata"), v2);
    CFDictionarySetValue((CFMutableDictionaryRef)sVTDecompressionSessionPropertiesHandledByVideoToolboxSubDuct, CFSTR("NumberOfFramesInDecoder"), v2);
    CFDictionarySetValue((CFMutableDictionaryRef)sVTDecompressionSessionPropertiesHandledByVideoToolboxSubDuct, CFSTR("MinFrameIDOfFramesInDecoder"), v2);
    CFDictionarySetValue((CFMutableDictionaryRef)sVTDecompressionSessionPropertiesHandledByVideoToolboxSubDuct, CFSTR("MaxFrameIDOfFramesInDecoder"), v2);
    values = 0;
    FrameTypesArrayElement = 0;
    if (sVTDecompressionSessionPropertiesHandledByVideoToolboxDuct)
    {
      values = (void *)sVTDecompressionSessionPropertiesHandledByVideoToolboxDuct;
      v8 = 1;
    }
    else
    {
      v8 = 0;
    }
    if (sVTDecompressionSessionPropertiesHandledByVideoToolboxSubDuct)
      *(&values + v8) = (void *)sVTDecompressionSessionPropertiesHandledByVideoToolboxSubDuct;
    if (FigCFCreateCombinedDictionary())
LABEL_18:
      FigSignalErrorAt();
    CFRelease(v2);
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t VTDecompressionSessionCopySupportedPropertyDictionary(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, CFTypeRef *);
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  CFTypeRef v9;
  CFTypeRef cf;
  _QWORD v11[3];

  v11[2] = *MEMORY[0x1E0C80C00];
  v9 = 0;
  cf = 0;
  v11[0] = 0;
  v11[1] = 0;
  *a2 = 0;
  if (*(_BYTE *)(a1 + 16))
    return FigSignalErrorAt();
  if (*(_QWORD *)(a1 + 24))
    return VTDecompressionSessionRemoteBridge_CopySupportedPropertyDictionary(*(_QWORD *)(a1 + 24));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v4 = *(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v4 || ((v5 = v4(v3, &cf), (_DWORD)v5 != -12782) ? (v6 = (_DWORD)v5 == 0) : (v6 = 1), v6))
  {
    v8 = vtDecompressionSessionCopyPropertiesHandledByVideoToolbox(&v9);
    if (!(_DWORD)v8)
    {
      if (cf)
      {
        v11[0] = cf;
        v7 = 1;
      }
      else
      {
        v7 = 0;
      }
      if (v9)
        v11[v7] = v9;
      v8 = FigCFCreateCombinedDictionary();
    }
  }
  else
  {
    v8 = v5;
    FigSignalErrorAt();
  }
  if (cf)
    CFRelease(cf);
  if (v9)
    CFRelease(v9);
  return v8;
}

OSStatus VTPixelTransferSessionCreate(CFAllocatorRef allocator, VTPixelTransferSessionRef *pixelTransferSessionOut)
{
  uint64_t Instance;
  uint64_t v5;
  uint64_t *v6;
  OSStatus v7;
  int64x2_t v8;
  uint64_t v9;

  FigKTraceInit();
  if (!pixelTransferSessionOut)
    return -12902;
  MEMORY[0x1940281CC](&VTPixelTransferSessionGetTypeID_sRegisterVTPixelTransferSessionOnce, RegisterVTPixelTransferSession);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return -12904;
  v5 = Instance;
  *(_QWORD *)(Instance + 32) = 0;
  v6 = (uint64_t *)(Instance + 32);
  if (initDefaultsCommon_onceToken != -1)
    dispatch_once_f(&initDefaultsCommon_onceToken, 0, (dispatch_function_t)vtAllowTransferCapabilityCommonOnce);
  if (sAllowPixelTransferChain)
  {
    v7 = VTPixelTransferChainCreate((uint64_t)allocator, v6);
    if (initDefaultsCommon_onceToken != -1)
      dispatch_once_f(&initDefaultsCommon_onceToken, 0, (dispatch_function_t)vtAllowTransferCapabilityCommonOnce);
  }
  else
  {
    v7 = 0;
  }
  *(_BYTE *)(v5 + 40) = sAllowPixelTransferGraph;
  *(_BYTE *)(v5 + 41) = sAllowPixelTransferFallbacks;
  v8 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *(int64x2_t *)(v5 + 72) = v8;
  *(int64x2_t *)(v5 + 120) = v8;
  *(_BYTE *)(v5 + 769) = 1;
  *(_BYTE *)(v5 + 787) = 0;
  *(_WORD *)(v5 + 785) = 256;
  *(_BYTE *)(v5 + 788) = sAllowSoftwareTransferSession;
  v9 = *MEMORY[0x1E0C9AE00];
  *(_QWORD *)(v5 + 1176) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *(_OWORD *)(v5 + 1224) = 0u;
  if (!VTAvoidHardwarePixelTransfer())
    v7 = VTMetalTransferSessionCreate(v9, 0, v5 + 1160);
  *pixelTransferSessionOut = (VTPixelTransferSessionRef)v5;
  return v7;
}

void RegisterVTPixelTransferSession()
{
  sVTPixelTransferSessionID = _CFRuntimeRegisterClass();
  sVTPixelTransferSessionPropertyCallbacks = 0;
  unk_1ECED9000 = VTPixelTransferSessionCopySupportedPropertyDictionary;
  qword_1ECED9008 = (uint64_t)VTPixelTransferSessionSetProperty;
  unk_1ECED9010 = VTPixelTransferSessionCopyProperty;
  qword_1ECED9018 = (uint64_t)VTPixelTransferSessionSetProperties;
  unk_1ECED9020 = VTPixelTransferSessionCopySerializableProperties;
  VTSessionRegisterCallbacksForTypeID(&sVTPixelTransferSessionPropertyCallbacks, (const void *)sVTPixelTransferSessionID);
}

void vtPixelTransferSessionInit(uint64_t a1)
{
  bzero((void *)(a1 + 16), 0x4C8uLL);
}

OSStatus VTDecompressionSessionDecodeFrame(VTDecompressionSessionRef session, CMSampleBufferRef sampleBuffer, VTDecodeFrameFlags decodeFlags, void *sourceFrameRefCon, VTDecodeInfoFlags *infoFlagsOut)
{
  return VTDecompressionSessionDecodeFrameWithOptions((uint64_t)session, sampleBuffer, *(uint64_t *)&decodeFlags, 0, (uint64_t)sourceFrameRefCon, (int *)infoFlagsOut);
}

uint64_t vtDecompressionDuctDecodeSingleFrame(uint64_t a1, CMSampleBufferRef sbuf, uint64_t a3, uint64_t a4, uint64_t a5, CMTimeEpoch a6, CMTimeValue a7, uint64_t a8)
{
  uint64_t v15;
  const __CFArray *SampleAttachmentsArray;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v18;
  CFTypeID v19;
  __CFDictionary *v20;
  const __CFAllocator *v21;
  char *v22;
  uint64_t v23;
  const __CFArray *v24;
  const __CFDictionary *v25;
  const __CFDictionary *v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  double v32;
  char v33;
  int v34;
  int v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t (*v38)(uint64_t, char *, CMSampleBufferRef, uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t (*v40)(uint64_t, char *, CMSampleBufferRef, uint64_t, uint64_t);
  const __CFDictionary *v41;
  double v43;
  int v44;
  CMTime v46;
  CMTime v47;
  CMTime v48;
  uint64_t v49;
  CFDictionaryValueCallBacks valueCallBacks;
  CMTime value[3];
  const __CFDictionary *v52;
  uint64_t v53;
  CMTime time2;
  __int16 v55;
  int v56;
  void *v57;
  __int16 v58;
  unsigned __int8 v59;
  int v60;

  v15 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(sbuf, 0);
  if (!SampleAttachmentsArray)
    goto LABEL_5;
  ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0);
  v18 = ValueAtIndex;
  if (!ValueAtIndex)
    goto LABEL_6;
  v19 = CFGetTypeID(ValueAtIndex);
  if (v19 == CFDictionaryGetTypeID())
    v18 = (const __CFDictionary *)CFDictionaryGetValue(v18, (const void *)*MEMORY[0x1E0CA25E8]);
  else
LABEL_5:
    v18 = 0;
LABEL_6:
  v49 = 0;
  if ((a3 & 2) == 0)
    ++*(_DWORD *)(a1 + 184);
  FigCFDictionaryGetInt64IfPresent();
  MEMORY[0x1940280C4](*(_QWORD *)(a1 + 72));
  CMSampleBufferGetOutputPresentationTimeStamp(&v48, sbuf);
  CMSampleBufferGetOutputDuration(&v47, sbuf);
  v53 = 0;
  if (FigAtomicIncrement32() == 1)
    FigSemaphoreWaitRelative();
  v20 = *(__CFDictionary **)(a1 + 48);
  if (v20)
    goto LABEL_12;
  valueCallBacks.version = 0;
  valueCallBacks.retain = (CFDictionaryRetainCallBack)vtCloneDuctFrameTrackingInfo;
  valueCallBacks.copyDescription = 0;
  valueCallBacks.equal = 0;
  valueCallBacks.release = (CFDictionaryReleaseCallBack)vtFreeDuctFrameTrackingInfo;
  v21 = CFGetAllocator(*(CFTypeRef *)a1);
  v20 = CFDictionaryCreateMutable(v21, 0, 0, &valueCallBacks);
  *(_QWORD *)(a1 + 48) = v20;
  if (v20)
  {
LABEL_12:
    v22 = *(char **)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v22 + 1;
    value[1] = v48;
    value[2] = v47;
    v52 = v18;
    LOBYTE(v53) = 0;
    value[0].value = a7;
    *(_QWORD *)&value[0].timescale = a5;
    value[0].epoch = a6;
    CFDictionaryAddValue(v20, v22, value);
    v23 = 0;
  }
  else
  {
    v22 = 0;
    v23 = 4294954392;
  }
  MEMORY[0x1940280D0](*(_QWORD *)(a1 + 72));
  if (*(_BYTE *)(a1 + 104))
  {
    v60 = 0;
    v24 = CMSampleBufferGetSampleAttachmentsArray(sbuf, 0);
    if (!v24 || (v25 = (const __CFDictionary *)CFArrayGetValueAtIndex(v24, 0)) == 0)
    {
      *(_BYTE *)(a1 + 136) = 0;
      *(_DWORD *)(a1 + 140) = 0x7FFFFFFF;
      CMSampleBufferGetPresentationTimeStamp(value, sbuf);
      *(CMTime *)(a1 + 148) = value[0];
      goto LABEL_60;
    }
    v26 = v25;
    v59 = 1;
    v58 = 0;
    v57 = 0;
    v56 = 0;
    v55 = 0;
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    v27 = HIBYTE(v58);
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetIntIfPresent();
    CFDictionaryGetValueIfPresent(v26, (const void *)*MEMORY[0x1E0CA2600], (const void **)&v57);
    if (v57)
      FigCFDictionaryGetIntIfPresent();
    v28 = v58;
    if (v27 && !(_BYTE)v58 || (*(_BYTE *)(a1 + 144) = 0, v27))
    {
      v29 = 0;
    }
    else
    {
      v29 = 1;
      if (v56 == 21 || v56 == 16)
      {
        LOBYTE(v58) = 1;
        v29 = 0;
        v28 = 1;
        if (*(_BYTE *)(a1 + 136))
          *(_BYTE *)(a1 + 144) = 1;
      }
    }
    if (v60 > *(_DWORD *)(a1 + 112))
      goto LABEL_41;
    v30 = *(_DWORD *)(a1 + 108);
    switch(v30)
    {
      case 3:
        v31 = v29;
        break;
      case 2:
        if (v28)
          v31 = 1;
        else
          v31 = v29;
        break;
      case 1:
        v31 = v59;
        break;
      default:
        v31 = 1;
        goto LABEL_40;
    }
    if (!v31)
      goto LABEL_42;
LABEL_40:
    v32 = *(double *)(a1 + 120) + *(double *)(a1 + 128);
    *(double *)(a1 + 128) = v32;
    if (v32 >= 1.0)
    {
      v43 = v32 + -1.0;
      if (v43 >= 1.0)
        v43 = 1.0;
      *(double *)(a1 + 128) = v43;
      if (*(_BYTE *)(a1 + 144))
      {
        memset(value, 0, 24);
        CMSampleBufferGetPresentationTimeStamp(value, sbuf);
        *(_OWORD *)&valueCallBacks.version = *(_OWORD *)&value[0].value;
        valueCallBacks.release = (CFDictionaryReleaseCallBack)value[0].epoch;
        time2 = *(CMTime *)(a1 + 148);
        if (CMTimeCompare((CMTime *)&valueCallBacks, &time2) < 1)
          v31 = 0;
      }
      if (v31 && HIBYTE(v55) && v60 <= *(_DWORD *)(a1 + 140))
        *(_DWORD *)(a1 + 140) = 0x7FFFFFFF;
      if (v31)
      {
        if ((_BYTE)v55)
        {
          v44 = *(_DWORD *)(a1 + 140);
          if (v60 == v44 && v44 != 0x7FFFFFFF)
            *(_DWORD *)(a1 + 140) = v60 + 1;
        }
      }
LABEL_42:
      if (*(_BYTE *)(a1 + 136))
        v33 = v29;
      else
        v33 = 1;
      if ((v33 & 1) == 0 && !(_BYTE)v58 && v60 >= *(_DWORD *)(a1 + 140))
        v31 = 0;
      if ((_BYTE)v58)
        v34 = 1;
      else
        v34 = v29;
      if (v34 == 1)
      {
        *(_BYTE *)(a1 + 136) = 0;
        *(_DWORD *)(a1 + 140) = 0x7FFFFFFF;
        CMSampleBufferGetPresentationTimeStamp(value, sbuf);
        *(CMTime *)(a1 + 148) = value[0];
      }
      else if (!v31 && v59)
      {
        *(_BYTE *)(a1 + 136) = 1;
        v35 = *(_DWORD *)(a1 + 140);
        if (v35 >= v60)
          v35 = v60;
        *(_DWORD *)(a1 + 140) = v35;
        goto LABEL_81;
      }
      if (v31)
        goto LABEL_60;
LABEL_81:
      vtDecompressionDuctEmitDecodedFrame((uint64_t *)a1, v22, v23, 2, 0, 0);
      return v23;
    }
LABEL_41:
    v31 = 0;
    goto LABEL_42;
  }
LABEL_60:
  if (v15)
  {
    MEMORY[0x1940280C4](*(_QWORD *)(v15 + 104));
    if (vtDecompressionSubDuctTrackFrameEnteringCodec(v15, v22, a3, v49))
      FigSignalErrorAt();
    MEMORY[0x1940280D0](*(_QWORD *)(v15 + 104));
  }
  if (*MEMORY[0x1E0CA1FC0] == 1)
  {
    CMSampleBufferGetOutputPresentationTimeStamp(&v46, sbuf);
    value[0] = v46;
    CMTimeGetSeconds(value);
    kdebug_trace();
  }
  if (!a4
    || (v36 = *(_QWORD *)(a1 + 8), v37 = *(_QWORD **)(CMBaseObjectGetVTable() + 16), *v37 < 4uLL)
    || (v38 = (uint64_t (*)(uint64_t, char *, CMSampleBufferRef, uint64_t, uint64_t, uint64_t))v37[11]) == 0
    || (v23 = v38(v36, v22, sbuf, a3, a4, a8), (_DWORD)v23 == -12782))
  {
    v39 = *(_QWORD *)(a1 + 8);
    v40 = *(uint64_t (**)(uint64_t, char *, CMSampleBufferRef, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                         + 16);
    if (!v40)
      goto LABEL_76;
    v23 = v40(v39, v22, sbuf, a3, a8);
  }
  if ((_DWORD)v23 != -17690)
  {
    if (!(_DWORD)v23)
    {
      if ((a3 & 9) != 0)
        return 0;
LABEL_77:
      v41 = *(const __CFDictionary **)(a1 + 48);
      if (v41)
        CFDictionaryGetValue(v41, v22);
      return 0;
    }
LABEL_76:
    FigSignalErrorAt();
    goto LABEL_77;
  }
  return v23;
}

_OWORD *vtCloneDuctFrameTrackingInfo(const __CFAllocator *a1, uint64_t a2)
{
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  CFTypeRef v8;

  v3 = CFAllocatorAllocate(a1, 88, 0);
  v4 = *(_OWORD *)(a2 + 16);
  *v3 = *(_OWORD *)a2;
  v3[1] = v4;
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 48);
  v7 = *(_OWORD *)(a2 + 64);
  *((_QWORD *)v3 + 10) = *(_QWORD *)(a2 + 80);
  v3[3] = v6;
  v3[4] = v7;
  v3[2] = v5;
  v8 = *(CFTypeRef *)(a2 + 72);
  if (v8)
    v8 = CFRetain(v8);
  *((_QWORD *)v3 + 9) = v8;
  *((_QWORD *)v3 + 1) = _Block_copy(*(const void **)(a2 + 8));
  *((_QWORD *)v3 + 2) = _Block_copy(*(const void **)(a2 + 16));
  return v3;
}

uint64_t vtDecompressionSubDuctTrackFrameEnteringCodec(uint64_t a1, void *key, int a3, uint64_t a4)
{
  __CFDictionary *v8;
  const __CFAllocator *v9;
  CFDictionaryValueCallBacks v11;
  _QWORD value[3];

  value[0] = 0;
  v8 = *(__CFDictionary **)(a1 + 112);
  if (!v8)
  {
    v11.version = 0;
    v11.retain = (CFDictionaryRetainCallBack)vtCloneSubDuctFrameTrackingInfo;
    v11.copyDescription = 0;
    v11.equal = 0;
    v11.release = (CFDictionaryReleaseCallBack)vtFreeSubDuctFrameTrackingInfo;
    v9 = CFGetAllocator(*(CFTypeRef *)a1);
    v8 = CFDictionaryCreateMutable(v9, 0, 0, &v11);
    *(_QWORD *)(a1 + 112) = v8;
    if (!v8)
      return 4294954392;
  }
  if (*(_BYTE *)(a1 + 257))
  {
    if (!*(_BYTE *)(a1 + 258))
    {
      FigPowerReduceUtilitySFI();
      v8 = *(__CFDictionary **)(a1 + 112);
    }
  }
  LODWORD(value[0]) = a3;
  value[1] = *(_QWORD *)(a1 + 16);
  value[2] = a4;
  CFDictionaryAddValue(v8, key, value);
  return 0;
}

_QWORD *vtCloneSubDuctFrameTrackingInfo(const __CFAllocator *a1, __int128 *a2)
{
  _QWORD *v3;
  __int128 v4;
  CFTypeRef v5;

  v3 = CFAllocatorAllocate(a1, 24, 0);
  v4 = *a2;
  v3[2] = *((_QWORD *)a2 + 2);
  *(_OWORD *)v3 = v4;
  v5 = (CFTypeRef)*((_QWORD *)a2 + 1);
  if (v5)
    v5 = CFRetain(v5);
  v3[1] = v5;
  return v3;
}

uint64_t VTDecoderSessionEmitDecodedFrame(uint64_t *a1, const void *a2, uint64_t a3, uint64_t a4, __CVBuffer *a5)
{
  return vtDecoderSessionEmitDecodedFrameCommon(a1, a2, a3, a4, a5, 0);
}

void vtCopyAttachments(CFDictionaryRef theDict, __CVBuffer *a2, __CFDictionary *a3, void *key, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  const __CFString **v12;
  const __CFString *v13;
  const void *Value;
  const void *v15;
  void **v16;
  const __CFString **v17;
  _QWORD *v18;

  v17 = (const __CFString **)&a9;
  if (key)
  {
    do
    {
      v12 = v17;
      v18 = v17 + 1;
      v13 = *v12;
      Value = CFDictionaryGetValue(theDict, key);
      if (Value)
      {
        v15 = Value;
        if (vtCVBufferAttachmentEmpty(a2, v13))
          CFDictionarySetValue(a3, v13, v15);
      }
      v16 = (void **)v18;
      v17 = (const __CFString **)(v18 + 1);
      key = *v16;
    }
    while (*v16);
  }
}

void vtFreeSubDuctFrameTrackingInfo(CFAllocatorRef allocator, _QWORD *ptr)
{
  const void *v4;

  v4 = (const void *)ptr[1];
  if (v4)
  {
    CFRelease(v4);
    ptr[1] = 0;
  }
  CFAllocatorDeallocate(allocator, ptr);
}

uint64_t vtDecompressionSubDuctEmitTransferredFrame(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, __CVBuffer *a5, uint64_t a6)
{
  uint64_t *v6;

  if (*(_QWORD *)a1 && (v6 = *(uint64_t **)(*(_QWORD *)a1 + 32)) != 0)
    return vtDecompressionDuctEmitDecodedFrame(v6, a2, a3, a4, a5, a6);
  else
    return FigSignalErrorAt();
}

uint64_t vtDecompressionDuctEmitDecodedFrame(uint64_t *a1, const void *a2, uint64_t a3, uint64_t a4, __CVBuffer *a5, uint64_t a6)
{
  const __CFDictionary *v12;
  char *Value;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int128 *, __int128 *);
  void (*v21)(uint64_t, uint64_t, uint64_t, uint64_t, __CVBuffer *, __int128 *, __int128 *);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __CVBuffer *v26;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t result;
  void (*v29)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, __int128 *, __int128 *);
  void (*v30)(uint64_t, uint64_t, uint64_t, _QWORD, __int128 *, __int128 *);
  const __CFDictionary *v31;
  NSObject *v32;
  void (*v33)(uint64_t, uint64_t, uint64_t, __CVBuffer *, _QWORD, __int128 *, __int128 *);
  void (*v34)(uint64_t, uint64_t, uint64_t, __CVBuffer *, __int128 *, __int128 *);
  os_log_type_t type[16];
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  MEMORY[0x1940280C4](a1[9]);
  v12 = (const __CFDictionary *)a1[6];
  if (!v12 || (Value = (char *)CFDictionaryGetValue(v12, a2)) == 0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return MEMORY[0x1940280D0](a1[9]);
  }
  if (Value[80])
    return MEMORY[0x1940280D0](a1[9]);
  Value[80] = 1;
  v14 = *(_QWORD *)Value;
  v37 = *(_OWORD *)(Value + 24);
  v38 = *((_QWORD *)Value + 5);
  *(_OWORD *)type = *((_OWORD *)Value + 3);
  v15 = (const void *)*((_QWORD *)Value + 9);
  v36 = *((_QWORD *)Value + 8);
  v16 = *((_QWORD *)Value + 1);
  v17 = *((_QWORD *)Value + 2);
  MEMORY[0x1940280D0](a1[9]);
  if (v15)
    CVBufferSetAttachment(a5, (CFStringRef)*MEMORY[0x1E0CA8E00], v15, kCVAttachmentMode_ShouldPropagate);
  v18 = *a1;
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int128 *, __int128 *))(*a1 + 112);
  v19 = *(_QWORD *)(*a1 + 120);
  if (!v17 && a6 && !v20)
  {
    v21 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __CVBuffer *, __int128 *, __int128 *))(v18 + 96);
    if (!v21)
    {
      if (v16)
      {
        v30 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, __int128 *, __int128 *))(v16 + 16);
        v41 = *MEMORY[0x1E0CA2E18];
        v42 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
        v39 = v41;
        v40 = v42;
        v30(v16, 4294949597, a4, 0, &v41, &v39);
      }
      goto LABEL_23;
    }
    v22 = *(_QWORD *)(v18 + 104);
    v41 = *MEMORY[0x1E0CA2E18];
    v42 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    v39 = v41;
    v40 = v42;
    v23 = v14;
    v24 = 4294949597;
    v25 = a4;
    v26 = 0;
LABEL_11:
    v21(v22, v23, v24, v25, v26, &v41, &v39);
LABEL_23:
    if (a5)
      ++*((_DWORD *)a1 + 47);
    goto LABEL_25;
  }
  if (a5 || !v20)
  {
    if (a5 || !v17)
    {
      v21 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __CVBuffer *, __int128 *, __int128 *))(v18 + 96);
      if (!v21)
      {
        if (v17)
        {
          v33 = *(void (**)(uint64_t, uint64_t, uint64_t, __CVBuffer *, _QWORD, __int128 *, __int128 *))(v17 + 16);
          v41 = v37;
          v42 = v38;
          v39 = *(_OWORD *)type;
          v40 = v36;
          v33(v17, a3, a4, a5, 0, &v41, &v39);
        }
        else if (v16)
        {
          v34 = *(void (**)(uint64_t, uint64_t, uint64_t, __CVBuffer *, __int128 *, __int128 *))(v16 + 16);
          v41 = v37;
          v42 = v38;
          v39 = *(_OWORD *)type;
          v40 = v36;
          v34(v16, a3, a4, a5, &v41, &v39);
        }
        goto LABEL_23;
      }
      v22 = *(_QWORD *)(v18 + 104);
      v41 = v37;
      v42 = v38;
      v39 = *(_OWORD *)type;
      v40 = v36;
      v23 = v14;
      v24 = a3;
      v25 = a4;
      v26 = a5;
      goto LABEL_11;
    }
    v29 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, __int128 *, __int128 *))(v17 + 16);
    v41 = v37;
    v42 = v38;
    v39 = *(_OWORD *)type;
    v40 = v36;
    v29(v17, a3, a4, 0, a6, &v41, &v39);
  }
  else
  {
    v41 = v37;
    v42 = v38;
    v39 = *(_OWORD *)type;
    v40 = v36;
    v20(v19, v14, a3, a4, a6, &v41, &v39);
  }
LABEL_25:
  MEMORY[0x1940280C4](a1[9]);
  v31 = (const __CFDictionary *)a1[6];
  if (v31 && CFDictionaryGetValue(v31, a2))
  {
    CFDictionaryRemoveValue((CFMutableDictionaryRef)a1[6], a2);
    if (!FigAtomicDecrement32())
      FigSemaphoreSignal();
  }
  else
  {
    v32 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  result = MEMORY[0x1940280D0](a1[9]);
  if (!*((_BYTE *)a1 + 172))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return CMNotificationCenterPostNotification();
  }
  return result;
}

void vtFreeDuctFrameTrackingInfo(const __CFAllocator *a1, uint64_t a2)
{
  const void *v4;

  v4 = *(const void **)(a2 + 72);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a2 + 72) = 0;
  }
  _Block_release(*(const void **)(a2 + 8));
  _Block_release(*(const void **)(a2 + 16));
  CFAllocatorDeallocate(a1, (void *)a2);
}

uint64_t vtDecompressionSessionIsPropertySupportedBySubDuct(const void *a1)
{
  uint64_t result;

  MEMORY[0x1940281CC](&sCreatePropertiesHandledByVideoToolboxOnce_0, vtDecompressionSessionCreatePropertiesHandledByVideoToolbox);
  result = sVTDecompressionSessionPropertiesHandledByVideoToolboxSubDuct;
  if (sVTDecompressionSessionPropertiesHandledByVideoToolboxSubDuct)
    return CFDictionaryContainsKey((CFDictionaryRef)sVTDecompressionSessionPropertiesHandledByVideoToolboxSubDuct, a1);
  return result;
}

void vtDecompressionDuctGetMinOutputPresentationTimeStampOfFramesBeingDecoded(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  const __CFDictionary *v5;

  v4 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)a2 = *MEMORY[0x1E0CA2E18];
  a2[2] = *(_QWORD *)(v4 + 16);
  MEMORY[0x1940280C4](*(_QWORD *)(a1 + 72));
  v5 = *(const __CFDictionary **)(a1 + 48);
  if (v5)
    CFDictionaryApplyFunction(v5, (CFDictionaryApplierFunction)vtDuctFrameTrackingInfoFindMinPTS, a2);
  JUMPOUT(0x1940280D0);
}

void VTDecompressionSessionInvalidate(VTDecompressionSessionRef session)
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v8;
  const __CFAllocator *v9;
  const __CFAllocator *v10;

  if (session && !*((_BYTE *)session + 16))
  {
    if (*((_QWORD *)session + 3))
    {
      FigStopForwardingMediaServicesProcessDeathNotification();
      VTDecompressionSessionRemoteBridge_Invalidate(*((_QWORD *)session + 3));
    }
    else
    {
      v2 = *((_QWORD *)session + 4);
      if (v2 && *(_QWORD *)(v2 + 8))
      {
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterRemoveWeakListener();
        v3 = *(_QWORD *)(*((_QWORD *)session + 4) + 8);
        if (v3)
        {
          v4 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
          if (v4)
            v4(v3);
        }
        VTDecompressionSessionWaitForAsynchronousFrames(session);
        CFRelease(*(CFTypeRef *)(*((_QWORD *)session + 4) + 8));
        *(_QWORD *)(*((_QWORD *)session + 4) + 8) = 0;
      }
      v5 = *((_QWORD *)session + 5);
      if (v5)
      {
        vtDecompressionSubDuctFinishAsynchronousTransfers(v5);
        v6 = *((_QWORD *)session + 5);
        *(_QWORD *)v6 = 0;
        if (*(_DWORD *)(v6 + 240))
        {
          if (*((_QWORD *)session + 4))
          {
            Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            if (Mutable)
            {
              v8 = Mutable;
              CMFormatDescriptionGetMediaSubType(*(CMFormatDescriptionRef *)(*((_QWORD *)session + 4) + 80));
              FigVideoFormatDescriptionContainsHDR();
              CMVideoFormatDescriptionGetDimensions(*(CMVideoFormatDescriptionRef *)(*((_QWORD *)session + 4) + 80));
              CFAbsoluteTimeGetCurrent();
              if (*(_QWORD *)(*((_QWORD *)session + 4) + 176))
                FigCFDictionarySetValue();
              FigCFDictionarySetInt32();
              FigCFDictionarySetInt32();
              if (*(_DWORD *)(*((_QWORD *)session + 4) + 192))
                FigCFDictionarySetInt32();
              FigCFDictionarySetInt32();
              FigCFDictionarySetInt32();
              FigCFDictionarySetInt32();
              FigCFDictionarySetInt32();
              FigCFDictionarySetInt32();
              FigCFDictionarySetInt32();
              FigPlaybackLogPowerEvent();
              CFRelease(v8);
            }
          }
        }
      }
      v9 = CFGetAllocator(session);
      vtDecompressionDuctFinalize(v9, *((void **)session + 4));
      *((_QWORD *)session + 4) = 0;
      v10 = CFGetAllocator(session);
      vtDecompressionSubDuctFinalize(v10, *((_QWORD *)session + 5));
      *((_QWORD *)session + 5) = 0;
    }
    *((_BYTE *)session + 16) = 1;
  }
}

void vtDecompressionSessionFinalize(OpaqueVTDecompressionSession *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  void *v7;

  VTDecompressionSessionInvalidate(a1);
  v2 = (const void *)*((_QWORD *)a1 + 3);
  if (v2)
  {
    CFRelease(v2);
    *((_QWORD *)a1 + 3) = 0;
  }
  v3 = (const void *)*((_QWORD *)a1 + 10);
  if (v3)
  {
    CFRelease(v3);
    *((_QWORD *)a1 + 10) = 0;
  }
  v4 = (const void *)*((_QWORD *)a1 + 11);
  if (v4)
  {
    CFRelease(v4);
    *((_QWORD *)a1 + 11) = 0;
  }
  v5 = (const void *)*((_QWORD *)a1 + 16);
  if (v5)
  {
    CFRelease(v5);
    *((_QWORD *)a1 + 16) = 0;
  }
  v6 = (const void *)*((_QWORD *)a1 + 17);
  if (v6)
  {
    CFRelease(v6);
    *((_QWORD *)a1 + 17) = 0;
  }
  if (*((_QWORD *)a1 + 9))
  {
    FigSemaphoreDestroy();
    *((_QWORD *)a1 + 9) = 0;
  }
  v7 = (void *)*((_QWORD *)a1 + 19);
  if (v7)
  {
    os_release(v7);
    *((_QWORD *)a1 + 19) = 0;
  }
}

void VTPixelTransferSessionInvalidate(VTPixelTransferSessionRef session)
{
  const void *v2;
  const void *v3;
  uint64_t v4;
  void (*v5)(_QWORD);
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  void *v14;
  void *v15;
  __CVBuffer *v16;
  uint64_t v17;
  char *v18;
  void *v19;
  uint64_t v20;
  char *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  const void *v26;
  const void *v27;
  const void *v28;
  const void *v29;
  const void *v30;
  const void *v31;
  const void *v32;
  const void *v33;
  const void *v34;
  const void *v35;
  const void *v36;
  const void *v37;
  const void *v38;
  const void *v39;
  const void *v40;
  const void *v41;
  const void *v42;
  const void *v43;
  const void *v44;
  const void *v45;
  const void *v46;
  const void *v47;
  const void *v48;
  const void *v49;
  const void *v50;
  const void *v51;
  const void *v52;
  const void *v53;
  const void *v54;
  const void *v55;
  const void *v56;
  const void *v57;
  void (*v58)(_QWORD);

  if (session && !*((_BYTE *)session + 16))
  {
    v2 = (const void *)*((_QWORD *)session + 3);
    if (v2)
    {
      CFRelease(v2);
      *((_QWORD *)session + 3) = 0;
    }
    v3 = (const void *)*((_QWORD *)session + 4);
    if (v3)
    {
      CFRelease(v3);
      *((_QWORD *)session + 4) = 0;
    }
    v4 = *((_QWORD *)session + 94);
    if (v4)
    {
      v5 = *(void (**)(_QWORD))(v4 + 64);
      if (v5)
        v5(*((_QWORD *)session + 95));
      *((_QWORD *)session + 94) = 0;
      *((_QWORD *)session + 95) = 0;
    }
    v6 = (const void *)*((_QWORD *)session + 102);
    if (v6)
    {
      CFRelease(v6);
      *((_QWORD *)session + 102) = 0;
    }
    v7 = (const void *)*((_QWORD *)session + 103);
    if (v7)
    {
      CFRelease(v7);
      *((_QWORD *)session + 103) = 0;
    }
    v8 = (const void *)*((_QWORD *)session + 19);
    if (v8)
    {
      CFRelease(v8);
      *((_QWORD *)session + 19) = 0;
    }
    v9 = (const void *)*((_QWORD *)session + 20);
    if (v9)
    {
      CFRelease(v9);
      *((_QWORD *)session + 20) = 0;
    }
    v10 = (const void *)*((_QWORD *)session + 24);
    if (v10)
    {
      CFRelease(v10);
      *((_QWORD *)session + 24) = 0;
    }
    v11 = (const void *)*((_QWORD *)session + 25);
    if (v11)
    {
      CFRelease(v11);
      *((_QWORD *)session + 25) = 0;
    }
    v12 = (const void *)*((_QWORD *)session + 6);
    if (v12)
    {
      CFRelease(v12);
      *((_QWORD *)session + 6) = 0;
    }
    v13 = (const void *)*((_QWORD *)session + 101);
    if (v13)
    {
      CFRelease(v13);
      *((_QWORD *)session + 101) = 0;
    }
    v14 = (void *)*((_QWORD *)session + 91);
    if (v14)
    {
      free(v14);
      *((_QWORD *)session + 91) = 0;
    }
    v15 = (void *)*((_QWORD *)session + 92);
    if (v15)
    {
      free(v15);
      *((_QWORD *)session + 92) = 0;
    }
    v16 = (__CVBuffer *)*((_QWORD *)session + 29);
    if (v16)
    {
      CVPixelBufferRelease(v16);
      *((_QWORD *)session + 29) = 0;
    }
    v17 = 0;
    v18 = (char *)session + 288;
    do
    {
      v19 = *(void **)&v18[v17];
      if (v19)
      {
        free(v19);
        *(_QWORD *)&v18[v17] = 0;
      }
      v17 += 32;
    }
    while (v17 != 128);
    v20 = 0;
    v21 = (char *)session + 416;
    do
    {
      v22 = *(void **)&v21[v20];
      if (v22)
      {
        free(v22);
        *(_QWORD *)&v21[v20] = 0;
      }
      v20 += 32;
    }
    while (v20 != 128);
    v23 = (void *)*((_QWORD *)session + 68);
    if (v23)
    {
      free(v23);
      *((_QWORD *)session + 68) = 0;
    }
    v24 = (void *)*((_QWORD *)session + 69);
    if (v24)
    {
      free(v24);
      *((_QWORD *)session + 69) = 0;
    }
    v25 = (void *)*((_QWORD *)session + 70);
    if (v25)
    {
      free(v25);
      *((_QWORD *)session + 70) = 0;
    }
    v26 = (const void *)*((_QWORD *)session + 122);
    if (v26)
    {
      CFRelease(v26);
      *((_QWORD *)session + 122) = 0;
    }
    v27 = (const void *)*((_QWORD *)session + 125);
    if (v27)
    {
      CFRelease(v27);
      *((_QWORD *)session + 125) = 0;
    }
    v28 = (const void *)*((_QWORD *)session + 116);
    if (v28)
    {
      CFRelease(v28);
      *((_QWORD *)session + 116) = 0;
    }
    v29 = (const void *)*((_QWORD *)session + 117);
    if (v29)
    {
      CFRelease(v29);
      *((_QWORD *)session + 117) = 0;
    }
    v30 = (const void *)*((_QWORD *)session + 126);
    if (v30)
    {
      CFRelease(v30);
      *((_QWORD *)session + 126) = 0;
    }
    VTPixelTransferSessionInvalidate(*((VTPixelTransferSessionRef *)session + 128));
    VTPixelTransferSessionInvalidate(*((VTPixelTransferSessionRef *)session + 129));
    v31 = (const void *)*((_QWORD *)session + 118);
    if (v31)
    {
      CFRelease(v31);
      *((_QWORD *)session + 118) = 0;
    }
    v32 = (const void *)*((_QWORD *)session + 128);
    if (v32)
    {
      CFRelease(v32);
      *((_QWORD *)session + 128) = 0;
    }
    v33 = (const void *)*((_QWORD *)session + 129);
    if (v33)
    {
      CFRelease(v33);
      *((_QWORD *)session + 129) = 0;
    }
    v34 = (const void *)*((_QWORD *)session + 130);
    if (v34)
    {
      CFRelease(v34);
      *((_QWORD *)session + 130) = 0;
    }
    v35 = (const void *)*((_QWORD *)session + 131);
    if (v35)
    {
      CFRelease(v35);
      *((_QWORD *)session + 131) = 0;
    }
    v36 = (const void *)*((_QWORD *)session + 132);
    if (v36)
    {
      CFRelease(v36);
      *((_QWORD *)session + 132) = 0;
    }
    v37 = (const void *)*((_QWORD *)session + 133);
    if (v37)
    {
      CFRelease(v37);
      *((_QWORD *)session + 133) = 0;
    }
    *((_DWORD *)session + 254) = 0;
    v38 = (const void *)*((_QWORD *)session + 123);
    if (v38)
    {
      CFRelease(v38);
      *((_QWORD *)session + 123) = 0;
    }
    v39 = (const void *)*((_QWORD *)session + 124);
    if (v39)
    {
      CFRelease(v39);
      *((_QWORD *)session + 124) = 0;
    }
    v40 = (const void *)*((_QWORD *)session + 119);
    if (v40)
    {
      CFRelease(v40);
      *((_QWORD *)session + 119) = 0;
    }
    v41 = (const void *)*((_QWORD *)session + 120);
    if (v41)
    {
      CFRelease(v41);
      *((_QWORD *)session + 120) = 0;
    }
    v42 = (const void *)*((_QWORD *)session + 121);
    if (v42)
    {
      CFRelease(v42);
      *((_QWORD *)session + 121) = 0;
    }
    v43 = (const void *)*((_QWORD *)session + 135);
    if (v43)
    {
      CFRelease(v43);
      *((_QWORD *)session + 135) = 0;
    }
    v44 = (const void *)*((_QWORD *)session + 136);
    if (v44)
    {
      CFRelease(v44);
      *((_QWORD *)session + 136) = 0;
    }
    v45 = (const void *)*((_QWORD *)session + 134);
    if (v45)
    {
      CFRelease(v45);
      *((_QWORD *)session + 134) = 0;
    }
    v46 = (const void *)*((_QWORD *)session + 137);
    if (v46)
    {
      CFRelease(v46);
      *((_QWORD *)session + 137) = 0;
    }
    v47 = (const void *)*((_QWORD *)session + 138);
    if (v47)
    {
      CFRelease(v47);
      *((_QWORD *)session + 138) = 0;
    }
    v48 = (const void *)*((_QWORD *)session + 139);
    if (v48)
    {
      CFRelease(v48);
      *((_QWORD *)session + 139) = 0;
    }
    v49 = (const void *)*((_QWORD *)session + 99);
    if (v49)
    {
      CFRelease(v49);
      *((_QWORD *)session + 99) = 0;
    }
    v50 = (const void *)*((_QWORD *)session + 100);
    if (v50)
    {
      CFRelease(v50);
      *((_QWORD *)session + 100) = 0;
    }
    v51 = (const void *)*((_QWORD *)session + 149);
    if (v51)
    {
      CFRelease(v51);
      *((_QWORD *)session + 149) = 0;
    }
    v52 = (const void *)*((_QWORD *)session + 150);
    if (v52)
    {
      CFRelease(v52);
      *((_QWORD *)session + 150) = 0;
    }
    v53 = (const void *)*((_QWORD *)session + 151);
    if (v53)
    {
      CFRelease(v53);
      *((_QWORD *)session + 151) = 0;
    }
    v54 = (const void *)*((_QWORD *)session + 152);
    if (v54)
    {
      CFRelease(v54);
      *((_QWORD *)session + 152) = 0;
    }
    v55 = (const void *)*((_QWORD *)session + 97);
    if (v55)
    {
      CFRelease(v55);
      *((_QWORD *)session + 97) = 0;
    }
    v56 = (const void *)*((_QWORD *)session + 146);
    if (v56)
    {
      CFRelease(v56);
      *((_QWORD *)session + 146) = 0;
    }
    v57 = (const void *)*((_QWORD *)session + 147);
    if (v57)
    {
      CFRelease(v57);
      *((_QWORD *)session + 147) = 0;
    }
    v58 = (void (*)(_QWORD))*((_QWORD *)session + 90);
    if (v58)
    {
      v58(*((_QWORD *)session + 89));
      *(_OWORD *)((char *)session + 712) = 0u;
    }
    *((_QWORD *)session + 144) = 0;
    *((_BYTE *)session + 16) = 1;
  }
}

void vtPixelTransferSessionFinalize(OpaqueVTPixelTransferSession *a1)
{
  const void *v2;

  VTPixelTransferSessionInvalidate(a1);
  v2 = (const void *)*((_QWORD *)a1 + 145);
  if (v2)
  {
    CFRelease(v2);
    *((_QWORD *)a1 + 145) = 0;
  }
}

void VTSelectAndCreateVideoEncoderInstance(int a1, int a2, CFTypeRef cf, int a4)
{
  VTSelectAndCreateVideoEncoderInstanceInternal(a1, a2, (int)cf, cf, 0, a4, 0, 0, 0);
}

uint64_t VTLoadVideoEncoders()
{
  return vtLoadVideoEncodersGuts(0);
}

uint64_t VTRegisterVideoEncoder(unsigned int a1, uint64_t a2)
{
  return VTRegisterVideoEncoderWithInfo(a1, 0, a2);
}

uint64_t VTVideoEncoderGetClassID()
{
  MEMORY[0x1940281CC](&VTVideoEncoderGetClassID_sRegisterVTVideoEncoderTypeOnce, RegisterVTVideoEncoderType);
  return sVTVideoEncoderClassID;
}

uint64_t RegisterVTVideoEncoderType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigCreateIOSurfaceBackedCVPixelBuffer(int a1, int a2, OSType a3, CVPixelBufferRef *a4)
{
  return FigCreateIOSurfaceBackedCVPixelBufferWithAttributes(a1, a2, a3, 0, a4);
}

OSStatus VTPixelTransferSessionTransferImage(VTPixelTransferSessionRef session, CVPixelBufferRef sourceBuffer, CVPixelBufferRef destinationBuffer)
{
  OSStatus v4;
  OSType PixelFormatType;
  OSType v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _DWORD *v10;

  v4 = 0;
  if (sourceBuffer && destinationBuffer)
  {
    CVPixelBufferGetWidth(sourceBuffer);
    CVPixelBufferGetWidth(destinationBuffer);
    CVPixelBufferGetHeight(sourceBuffer);
    CVPixelBufferGetHeight(destinationBuffer);
    PixelFormatType = CVPixelBufferGetPixelFormatType(sourceBuffer);
    printable4CC(PixelFormatType);
    v8 = CVPixelBufferGetPixelFormatType(destinationBuffer);
    printable4CC(v8);
    if (session && FigAtomicIncrement32() != 1)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v10 = (_DWORD *)MEMORY[0x1E0CA1FC0];
    if (*MEMORY[0x1E0CA1FC0] == 1)
      kdebug_trace();
    v4 = _VTPixelTransferSessionTransferImage((uint64_t)session, sourceBuffer, destinationBuffer);
    if (*v10 == 1)
      kdebug_trace();
  }
  if (session)
    FigAtomicDecrement32();
  return v4;
}

void FigRegisterIOSurfacePixelTransferCapability()
{
  JUMPOUT(0x1940281CCLL);
}

uint64_t vtBufferGetCleanRect(int a1, int a2, const void *a3, int *a4, int *a5, int *a6, int *a7, int *a8, int *a9)
{
  CFTypeID TypeID;
  const __CFNumber *Value;
  const __CFNumber *v18;
  CFTypeID v19;
  const __CFNumber *v20;
  const __CFNumber *v21;
  CFTypeID v22;
  const __CFNumber *v23;
  const __CFNumber *v24;
  CFTypeID v25;
  float v26;
  int v27;
  const __CFNumber *v28;
  const __CFNumber *v29;
  CFTypeID v30;
  int v31;
  int v32;
  int v33;
  uint64_t result;
  uint64_t v36;
  uint64_t valuePtr;

  if (!a3)
    goto LABEL_22;
  TypeID = CFDictionaryGetTypeID();
  if (TypeID != CFGetTypeID(a3))
    goto LABEL_22;
  Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a3, (const void *)*MEMORY[0x1E0CA8D60]);
  if (!Value)
    goto LABEL_22;
  v18 = Value;
  v19 = CFGetTypeID(Value);
  if (v19 != CFNumberGetTypeID())
    goto LABEL_22;
  v36 = 0;
  valuePtr = 0;
  CFNumberGetValue(v18, kCFNumberSInt32Type, (char *)&valuePtr + 4);
  v20 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a3, (const void *)*MEMORY[0x1E0CA8D40]);
  if (!v20)
    goto LABEL_22;
  v21 = v20;
  v22 = CFGetTypeID(v20);
  if (v22 != CFNumberGetTypeID())
    goto LABEL_22;
  CFNumberGetValue(v21, kCFNumberSInt32Type, &valuePtr);
  v23 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a3, (const void *)*MEMORY[0x1E0CA8D48]);
  if (v23 && (v24 = v23, v25 = CFGetTypeID(v23), v25 == CFNumberGetTypeID()))
  {
    CFNumberGetValue(v24, kCFNumberFloatType, (char *)&v36 + 4);
    v26 = *((float *)&v36 + 1);
  }
  else
  {
    HIDWORD(v36) = 0;
    v26 = 0.0;
  }
  v27 = (int)(float)(v26 + (float)((float)(a1 - HIDWORD(valuePtr)) * 0.5));
  v28 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a3, (const void *)*MEMORY[0x1E0CA8D58]);
  if (v28 && (v29 = v28, v30 = CFGetTypeID(v28), v30 == CFNumberGetTypeID()))
    CFNumberGetValue(v29, kCFNumberFloatType, &v36);
  else
    LODWORD(v36) = 0;
  if ((v27 & 0x80000000) == 0
    && (v31 = HIDWORD(valuePtr), SHIDWORD(valuePtr) >= 1)
    && HIDWORD(valuePtr) + v27 <= a1
    && (v32 = valuePtr,
        v33 = (int)(float)(*(float *)&v36 + (float)((float)(a2 - valuePtr) * 0.5)),
        (v33 & 0x80000000) == 0)
    && (int)valuePtr >= 1
    && (int)valuePtr + v33 <= a2)
  {
    result = 1;
  }
  else
  {
LABEL_22:
    v27 = 0;
    v33 = 0;
    result = 0;
    v32 = a2;
    v31 = a1;
  }
  *a4 = a1;
  *a5 = a2;
  *a6 = v27;
  *a7 = v33;
  *a8 = v31;
  *a9 = v32;
  return result;
}

uint64_t vtRoundCleanRectToPixelBlockBoundary(uint64_t result, int a2, int a3, _QWORD *a4, _QWORD *a5, uint64_t *a6, uint64_t *a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  if ((int)result <= 1983000879)
  {
    if ((int)result <= 875704437)
    {
      if ((_DWORD)result == 846624121)
        goto LABEL_16;
      v7 = 875704422;
    }
    else
    {
      if ((_DWORD)result == 875704438 || (_DWORD)result == 1630697081)
        goto LABEL_16;
      v7 = 1714696752;
    }
    goto LABEL_15;
  }
  if ((int)result <= 2037741157)
  {
    if ((_DWORD)result == 1983000880 || (_DWORD)result == 1983000886)
      goto LABEL_16;
    v7 = 2033463856;
LABEL_15:
    if ((_DWORD)result != v7)
      return result;
    goto LABEL_16;
  }
  if ((result - 2037741158) > 0xF || ((1 << (result - 102)) & 0xA001) == 0)
    return result;
LABEL_16:
  if ((*a4 & 1) != 0)
  {
    --*a4;
    v8 = *a6 + 1;
    *a6 = v8;
    if ((v8 & 1) == 0)
      goto LABEL_24;
  }
  else
  {
    v8 = *a6;
    if ((*a6 & 1) == 0)
      goto LABEL_24;
  }
  if (v8 < a2)
    v9 = v8 + 1;
  else
    v9 = a2;
  *a6 = v9;
LABEL_24:
  if ((int)result > 1714696751)
  {
    if ((_DWORD)result != 2033463856)
    {
      v10 = 1714696752;
LABEL_29:
      if ((_DWORD)result != v10)
        return result;
    }
  }
  else if ((_DWORD)result != 875704422)
  {
    v10 = 875704438;
    goto LABEL_29;
  }
  if ((*a5 & 1) != 0)
  {
    --*a5;
    v11 = *a7 + 1;
    *a7 = v11;
    if ((v11 & 1) == 0)
      return result;
  }
  else
  {
    v11 = *a7;
    if ((*a7 & 1) == 0)
      return result;
  }
  if (v11 < a3)
    v12 = v11 + 1;
  else
    v12 = a3;
  *a7 = v12;
  return result;
}

IOSurfaceRef figIOSurfaceAcceleratedPixelTransfer_Validate(__CVBuffer *a1, __CVBuffer *a2)
{
  IOSurfaceRef result;

  result = CVPixelBufferGetIOSurface(a1);
  if (result)
  {
    result = CVPixelBufferGetIOSurface(a2);
    if (result)
    {
      if (CVPixelBufferGetWidth(a1) > 0x1000
        || CVPixelBufferGetHeight(a1) > 0x1000
        || CVPixelBufferGetWidth(a2) > 0x1000)
      {
        return 0;
      }
      else
      {
        return (IOSurfaceRef)(CVPixelBufferGetHeight(a2) <= 0x1000);
      }
    }
  }
  return result;
}

uint64_t figIOSurfaceAcceleratedPixelTransfer_Open(uint64_t a1, const __CFDictionary *a2, __CVBuffer *a3, uint64_t a4, __CVBuffer *a5, uint64_t a6, _QWORD *a7)
{
  _DWORD *v11;
  _DWORD *v12;
  const __CFAllocator *v13;
  uint64_t v14;
  uint64_t v15;
  const __CFString *Value;
  const __CFString *v18;
  const __CFString *v19;
  _BOOL4 v20;
  uint64_t IntegerCodePointForString;
  uint64_t v22;
  uint64_t v23;
  const __CFDictionary *v24;
  const __CFDictionary *v25;
  const void *v26;
  BOOL v27;
  const __CFString *v28;
  const __CFString *v29;

  v11 = malloc_type_calloc(1uLL, 0xF8uLL, 0x10200400C9AEB86uLL);
  if (!v11)
    return FigSignalErrorAt();
  v12 = v11;
  v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v14 = IOSurfaceAcceleratorCreate();
  if (!(_DWORD)v14)
  {
    v12[43] = CVPixelBufferGetPixelFormatType(a3);
    v12[44] = CVPixelBufferGetPixelFormatType(a5);
    *((_QWORD *)v12 + 23) = getSubSampling(v12[43]);
    *((_QWORD *)v12 + 24) = getSubSampling(v12[43]);
    *((_QWORD *)v12 + 25) = getSubSampling(v12[44]);
    *((_QWORD *)v12 + 26) = getSubSampling(v12[44]);
    if (a2)
    {
      Value = (const __CFString *)CFDictionaryGetValue(a2, CFSTR("DestinationYCbCrMatrix"));
      v18 = (const __CFString *)CFDictionaryGetValue(a2, CFSTR("DestinationColorPrimaries"));
      v19 = (const __CFString *)CFDictionaryGetValue(a2, CFSTR("DestinationTransferFunction"));
      v20 = Value == 0;
      if (Value)
        IntegerCodePointForString = CVYCbCrMatrixGetIntegerCodePointForString(Value);
      else
        IntegerCodePointForString = 0;
      *((_QWORD *)v12 + 27) = IntegerCodePointForString;
      if (v18)
        v23 = CVColorPrimariesGetIntegerCodePointForString(v18);
      else
        v23 = 0;
      *((_QWORD *)v12 + 28) = v23;
      if (v19)
        v22 = CVTransferFunctionGetIntegerCodePointForString(v19);
      else
        v22 = 0;
    }
    else
    {
      v22 = 0;
      *((_QWORD *)v12 + 27) = 0;
      *((_QWORD *)v12 + 28) = 0;
      v20 = 1;
    }
    *((_QWORD *)v12 + 29) = v22;
    *((_BYTE *)v12 + 240) = figPixelFormatTypeContainsYCbCr(v12[43]);
    *((_BYTE *)v12 + 241) = figPixelFormatTypeContainsYCbCr(v12[44]);
    v24 = CVPixelFormatDescriptionCreateWithPixelFormatType(v13, v12[44]);
    if (v24)
    {
      v25 = v24;
      v26 = (const void *)*MEMORY[0x1E0C9AE50];
      v27 = v26 == CFDictionaryGetValue(v24, (const void *)*MEMORY[0x1E0CA9178]);
      CFRelease(v25);
    }
    else
    {
      v27 = 0;
    }
    *((_BYTE *)v12 + 242) = v27;
    if (v20 && *((_BYTE *)v12 + 241) && *((_BYTE *)v12 + 240))
    {
      v28 = (const __CFString *)CVBufferCopyAttachment(a3, (CFStringRef)*MEMORY[0x1E0CA8EE8], 0);
      if (v28)
      {
        v29 = v28;
        *((_QWORD *)v12 + 27) = CVYCbCrMatrixGetIntegerCodePointForString(v28);
        *a7 = v12;
        CFRelease(v29);
        return 0;
      }
      v15 = 0;
      *((_QWORD *)v12 + 27) = 0;
    }
    else
    {
      v15 = 0;
    }
    *a7 = v12;
    return v15;
  }
  v15 = v14;
  FigSignalErrorAt();
  free(v12);
  return v15;
}

uint64_t figIOSurfaceAcceleratedPixelTransfer_TransferM2(uint64_t a1, const __CFDictionary *a2, CVPixelBufferRef texture, double *a4, void *a5, double *a6)
{
  __CVBuffer *v11;
  CFTypeID v12;
  CFTypeID v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  const void *v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  CFTypeRef v24;
  const void *v25;
  const void *Value;
  uint64_t v27;
  const void *v28;
  _BOOL4 v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float64x2_t *v35;
  void **v36;
  __CFDictionary *Mutable;
  CFTypeID v38;
  size_t v39;
  size_t Height;
  char v41;
  double v42;
  char v43;
  double *v44;
  size_t Width;
  size_t v46;
  OSType PixelFormatType;
  unsigned __int8 SubSampling;
  size_t v49;
  uint64_t v50;
  double v51;
  double v52;
  float v53;
  double v54;
  float v55;
  unint64_t v56;
  _BOOL4 v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  float v63;
  unint64_t v64;
  int v65;
  uint64_t v66;
  float v67;
  unint64_t v68;
  float v69;
  float64_t v70;
  float v71;
  uint64_t v72;
  unint64_t v73;
  float v74;
  unint64_t v75;
  BOOL v76;
  float v77;
  _BOOL4 v78;
  unint64_t v79;
  unint64_t v80;
  float v81;
  float v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  double v88;
  double v89;
  float v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  float v94;
  int v95;
  double v96;
  float v97;
  unsigned int v98;
  float v99;
  unsigned int v100;
  unint64_t v101;
  int v103;
  OSType v104;
  int v105;
  __CVBuffer *v106;
  OSType v107;
  uint64_t ProtectionOptions;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  BOOL v113;
  int v114;
  unsigned __int8 v115;
  BOOL v116;
  char v117;
  BOOL v118;
  char v119;
  __CVBuffer *v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int *v124;
  unsigned int *v125;
  double v126;
  double v127;
  unsigned int *v128;
  unsigned int *v129;
  double v130;
  uint64_t v131;
  int v132;
  int v133;
  __CVBuffer *v134;
  uint64_t v135;
  const void *v136;
  uint64_t v137;
  unsigned __int8 v140;
  BOOL v141;
  char v142;
  BOOL v143;
  char v144;
  int v145;
  int v146;
  uint64_t v147;
  double v148;
  double v149;
  signed int v150;
  size_t PlaneCount;
  int v152;
  uint64_t DescriptionWithPixelFormatType;
  const __CFDictionary *v154;
  int IntIfPresent;
  const void *v156;
  const __CFArray *v157;
  const __CFArray *v158;
  CFTypeID v159;
  CFIndex v160;
  int v161;
  const void *ValueAtIndex;
  CFTypeID v163;
  int x_low;
  int v165;
  size_t v166;
  char v167;
  char v168;
  size_t WidthOfPlane;
  __CVBuffer *v170;
  unint64_t v171;
  size_t HeightOfPlane;
  size_t i;
  size_t v174;
  size_t v175;
  size_t BytesPerRowOfPlane;
  char *BaseAddressOfPlane;
  char *v178;
  char *v179;
  size_t v180;
  char *v181;
  size_t v182;
  char *v183;
  size_t v184;
  void *v185;
  unsigned int *__dst;
  const __CFDictionary *dict;
  __CFData *v188;
  uint64_t v189;
  CFTypeRef v190;
  void *v191;
  uint64_t v192;
  void *key;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  float64x2_t *v197;
  int v198;
  __CVBuffer *pixelBuffer;
  unint64_t v200;
  unint64_t v201;
  char v202;
  __CVBuffer *v203;
  unsigned __int8 v204;
  double *v205;
  uint64_t v206;
  uint64_t v207;
  __CFDictionary *theDict;
  CGRect rect;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  int v216;
  UInt8 *bytes;
  UInt8 *v218;
  UInt8 *v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  int v227;
  CVPixelBufferRef texturea;
  __int16 v229;
  uint64x2_t v230;
  __int128 v231;
  __int128 v232;
  uint64_t v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  int v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  int v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  int v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  uint64_t v264;
  uint64_t v265;

  v264 = 0;
  v262 = 0u;
  v263 = 0u;
  v260 = 0u;
  v261 = 0u;
  v258 = 0u;
  v259 = 0u;
  v257 = 0;
  v256 = 0u;
  v255 = 0u;
  v254 = 0u;
  v253 = 0u;
  v252 = 0u;
  v251 = 0u;
  v250 = 0u;
  v249 = 0;
  v248 = 0u;
  v247 = 0u;
  v246 = 0u;
  v245 = 0u;
  v244 = 0u;
  v243 = 0u;
  v242 = 0u;
  v241 = 0;
  v240 = 0u;
  v239 = 0u;
  v238 = 0u;
  v237 = 0u;
  v236 = 0u;
  v235 = 0u;
  v234 = 0u;
  v233 = 116;
  v11 = CVPixelBufferRetain(texture);
  v232 = 0u;
  v231 = 0u;
  v230 = 0u;
  v229 = 0;
  if (!texture)
    goto LABEL_273;
  v12 = CFGetTypeID(texture);
  if (v12 != CVPixelBufferGetTypeID())
    goto LABEL_273;
  if (!a5)
    goto LABEL_273;
  v13 = CFGetTypeID(a5);
  if (v13 != CVPixelBufferGetTypeID()
    || (v205 = a6, CVPixelBufferGetPixelFormatType(texture) != *(_DWORD *)(a1 + 172))
    || CVPixelBufferGetPixelFormatType((CVPixelBufferRef)a5) != *(_DWORD *)(a1 + 176)
    || (v14 = a4[2], v14 < 0.0)
    || a4[3] < 0.0
    || (v15 = v14 + a4[4], v15 > (double)CVPixelBufferGetWidth(texture))
    || (v16 = a4[3] + a4[5], v16 > (double)CVPixelBufferGetHeight(texture))
    || (v17 = a6[2], v17 < 0.0)
    || a6[3] < 0.0
    || (v18 = v17 + a6[4], v18 > (double)CVPixelBufferGetWidth((CVPixelBufferRef)a5))
    || (v19 = a6[3] + a6[5], v19 > (double)CVPixelBufferGetHeight((CVPixelBufferRef)a5)))
  {
LABEL_273:
    v135 = FigSignalErrorAt();
    Mutable = 0;
    if (v11)
      goto LABEL_214;
    goto LABEL_215;
  }
  v197 = (float64x2_t *)a4;
  v20 = (const void *)*MEMORY[0x1E0C9AE50];
  v21 = (const void *)*MEMORY[0x1E0C9AE40];
  scalerCapabilities((uint64_t)&v258);
  CVPixelBufferGetIOSurface(texture);
  IOSurfaceGetBulkAttachments();
  v204 = BYTE10(v253);
  v207 = BYTE11(v253);
  v206 = BYTE12(v253);
  CVPixelBufferGetIOSurface((CVPixelBufferRef)a5);
  IOSurfaceGetBulkAttachments();
  v22 = BYTE11(v245);
  v23 = BYTE12(v245);
  v24 = CVBufferCopyAttachment(v11, (CFStringRef)*MEMORY[0x1E0CA8E48], 0);
  pixelBuffer = (__CVBuffer *)a5;
  v190 = v24;
  if (!a2)
  {
    v28 = 0;
    v188 = 0;
    dict = 0;
    v198 = 0;
    Value = v20;
    v27 = a1;
    goto LABEL_34;
  }
  v25 = v21;
  Value = v20;
  v27 = a1;
  if (CFDictionaryContainsKey(a2, CFSTR("ServiceEnableHighSpeedTransfer")))
    Value = CFDictionaryGetValue(a2, CFSTR("ServiceEnableHighSpeedTransfer"));
  if (CFDictionaryContainsKey(a2, CFSTR("ServiceDisableDither")))
    v25 = CFDictionaryGetValue(a2, CFSTR("ServiceDisableDither"));
  FigCFDictionaryGetBooleanIfPresent();
  if (CFDictionaryContainsKey(a2, CFSTR("ServiceHistogramData")))
    v188 = (__CFData *)CFDictionaryGetValue(a2, CFSTR("ServiceHistogramData"));
  else
    v188 = 0;
  v29 = FigCFDictionaryGetBooleanValue() == (_QWORD)v20;
  v198 = (FigCFDictionaryGetBooleanValue() == (_QWORD)v20) | (2 * v29);
  if (CFDictionaryContainsKey(a2, CFSTR("Rotation")))
  {
    CFDictionaryGetValue(a2, CFSTR("Rotation"));
    if (FigCFEqual())
    {
      v30 = v198 | 4;
    }
    else
    {
      if (!FigCFEqual())
      {
        v145 = FigCFEqual();
        v146 = v198;
        if (v145)
          v146 = v198 ^ 7;
        v198 = v146;
        goto LABEL_30;
      }
      v30 = v198 ^ 3;
    }
    v198 = v30;
  }
LABEL_30:
  if (CFDictionaryContainsKey(a2, CFSTR("ServiceHistogramRectangle")))
    dict = (const __CFDictionary *)CFDictionaryGetValue(a2, CFSTR("ServiceHistogramRectangle"));
  else
    dict = 0;
  v21 = v25;
  FigCFDictionaryGetBooleanIfPresent();
  v28 = CFDictionaryGetValue(a2, CFSTR("ReducedPrecisionFractionalOffsets"));
  v24 = v190;
LABEL_34:
  v31 = *(_QWORD *)(v27 + 224);
  v196 = *(_QWORD *)(v27 + 216);
  BYTE10(v245) = v196;
  if (v24
    || !v31
    || v31 == sUnsetColorPrimaryMatrix
    || (v34 = *(_QWORD *)(v27 + 232)) == 0
    || (v33 = sUnsetTransferFunction, v34 == sUnsetTransferFunction))
  {
    if (!v31 || v31 == sUnsetColorPrimaryMatrix)
    {
      BYTE11(v245) = 0;
      v31 = BYTE11(v253);
    }
    else
    {
      v31 = 0;
    }
    v32 = *(_QWORD *)(v27 + 232);
    v33 = sUnsetTransferFunction;
    if (!v32 || v32 == sUnsetTransferFunction)
    {
      BYTE12(v245) = 0;
      v34 = BYTE12(v253);
    }
    else
    {
      v34 = 0;
    }
  }
  if (!*(_BYTE *)(v27 + 242) || v31 && v31 != sUnsetColorPrimaryMatrix || v34 && v34 != v33)
  {
    v189 = 0;
LABEL_49:
    v35 = v197;
    goto LABEL_50;
  }
  v189 = 0;
  if ((_DWORD)v22 && sUnsetColorPrimaryMatrix != v22)
  {
    BYTE11(v237) = v22;
    BYTE11(v245) = 0;
    v189 = 64;
  }
  if (!(_DWORD)v23)
    goto LABEL_49;
  v35 = v197;
  if (v33 != v23)
  {
    v189 |= 0x80uLL;
    BYTE12(v237) = v23;
    BYTE12(v245) = 0;
  }
LABEL_50:
  v194 = v34;
  v195 = v31;
  v36 = (void **)MEMORY[0x1E0D3A340];
  if (Value != v20)
  {
    if (v21 != v20)
    {
      Mutable = 0;
      goto LABEL_62;
    }
LABEL_60:
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    goto LABEL_61;
  }
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0D3A248], v20);
  if (v21 != v20)
    goto LABEL_62;
  if (!Mutable)
    goto LABEL_60;
LABEL_61:
  FigCFDictionarySetInt32();
LABEL_62:
  if (BYTE1(v259))
  {
    if (v28)
    {
      v38 = CFGetTypeID(v28);
      if (v38 == CFBooleanGetTypeID())
      {
        if (!Mutable)
          Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        CFDictionarySetValue(Mutable, CFSTR("ReducedPrecisionFractionalOffsets"), v28);
      }
    }
  }
  if (v188 && !Mutable)
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CVPixelBufferGetIOSurface(texture);
  IOSurfaceBindAccel();
  v39 = CVPixelBufferGetWidth(pixelBuffer) & -*(_QWORD *)(v27 + 200);
  Height = CVPixelBufferGetHeight(pixelBuffer);
  v41 = 0;
  key = (void *)*MEMORY[0x1E0D3A330];
  v200 = Height & -*(_QWORD *)(v27 + 208);
  v201 = v39;
  v42 = (double)v39;
  v191 = *v36;
  v185 = (void *)*MEMORY[0x1E0CA91B0];
  v192 = v27 + 24;
  v43 = 1;
  while (1)
  {
    v44 = v205;
    if (HIBYTE(v229))
    {
      Width = CVPixelBufferGetWidth(v11);
      v46 = CVPixelBufferGetHeight(v11);
      if (!Width)
        goto LABEL_205;
    }
    else
    {
      if ((v41 & 1) != 0)
      {
        PixelFormatType = CVPixelBufferGetPixelFormatType(v11);
        SubSampling = getSubSampling(PixelFormatType);
        LOBYTE(PixelFormatType) = getSubSampling(PixelFormatType);
        Width = CVPixelBufferGetWidth(v11) & -(uint64_t)SubSampling;
        v49 = CVPixelBufferGetHeight(v11);
        v50 = PixelFormatType;
      }
      else
      {
        Width = CVPixelBufferGetWidth(v11) & -*(_QWORD *)(v27 + 184);
        v49 = CVPixelBufferGetHeight(v11);
        v50 = *(_QWORD *)(v27 + 192);
      }
      v46 = v49 & -v50;
      if (!Width)
        goto LABEL_205;
    }
    if (!v46 || !v201 || !v200)
      goto LABEL_205;
    v230 = 0uLL;
    *(_QWORD *)&v231 = Width << 16;
    *((_QWORD *)&v231 + 1) = v46 << 16;
    if ((v43 & 1) != 0)
    {
      v51 = v35[1].f64[0];
      if (v51 > 0.0 || v35[2].f64[0] < (double)Width || v35[1].f64[1] > 0.0 || v35[2].f64[1] < (double)v46)
      {
        v52 = v35[2].f64[0];
        v53 = v52;
        Width = vcvtas_u32_f32(v53);
        if (HIBYTE(v229))
        {
          v54 = v35[2].f64[1];
          v55 = v54;
          v46 = vcvtas_u32_f32(v55);
          v230 = vcvtq_n_u64_f64(v35[1], 0x10uLL);
          *(_QWORD *)&v231 = vcvtd_n_u64_f64(v52, 0x10uLL);
          v56 = vcvtd_n_u64_f64(v54, 0x10uLL);
        }
        else
        {
          v58 = v35[2].f64[1];
          v60 = *(_QWORD *)(v27 + 184);
          v59 = *(_QWORD *)(v27 + 192);
          isH3Platform();
          isH3Platform();
          v61 = *(_DWORD *)(v27 + 172);
          v62 = *(_QWORD *)(v27 + 184);
          v63 = v35[1].f64[0];
          v64 = vcvtas_u32_f32(v63);
          if (isH3Platform() || v61 == 2037741171 || v61 == 2037741158)
            v64 &= -v62;
          v230.i64[0] = (unint64_t)v64 << 16;
          v65 = *(_DWORD *)(a1 + 172);
          v66 = *(_QWORD *)(a1 + 192);
          v67 = v35[1].f64[1];
          v68 = vcvtas_u32_f32(v67);
          if (isH3Platform())
          {
            if (v65 == 2037741171 || v65 == 2037741158)
              LODWORD(v68) = v68 & 0xFFFFFFFE;
            else
              v68 &= -v66;
          }
          Width &= -v60;
          v69 = v58;
          v46 = vcvtas_u32_f32(v69) & -v59;
          v230.i64[1] = (unint64_t)v68 << 16;
          *(_QWORD *)&v231 = Width << 16;
          v56 = v46 << 16;
          v51 = v35[1].f64[0];
          v52 = v35[2].f64[0];
          v27 = a1;
          v44 = v205;
        }
        *((_QWORD *)&v231 + 1) = v56;
        if (v51 + v52 > (double)CVPixelBufferGetWidth(v11)
          || (v70 = v35[1].f64[1] + v35[2].f64[1], v70 > (double)CVPixelBufferGetHeight(v11)))
        {
LABEL_205:
          v135 = FigSignalErrorAt();
          v106 = pixelBuffer;
LABEL_209:
          v137 = v189;
          v136 = v190;
          if (!v190)
            goto LABEL_211;
LABEL_210:
          CFRelease(v136);
          goto LABEL_211;
        }
      }
      v57 = v198 != 0;
    }
    else
    {
      v57 = 0;
    }
    v203 = v11;
    if (v57)
    {
      if (!Mutable)
        Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      FigCFDictionarySetInt32();
    }
    else if (v198 && Mutable)
    {
      CFDictionaryRemoveValue(Mutable, key);
    }
    v202 = v43;
    v71 = v44[4];
    v72 = -*(_QWORD *)(v27 + 200);
    v73 = vcvtas_u32_f32(v71) & v72;
    v74 = v44[5];
    v75 = vcvtas_u32_f32(v74) & -*(_QWORD *)(v27 + 208);
    v76 = Width == v73 && v46 == v75;
    theDict = Mutable;
    if (v76)
    {
      *(_QWORD *)&v232 = 0;
      v80 = Width;
      v75 = v46;
      v86 = Width;
      v87 = v46;
      *((_QWORD *)&v232 + 1) = __PAIR64__(v46, Width);
    }
    else
    {
      v77 = (float)v73 / (float)Width;
      v78 = v77 > *((float *)&v261 + 2);
      v79 = v72 & (unint64_t)(float)(*((float *)&v261 + 2) * (float)Width);
      if (v77 <= *((float *)&v261 + 2))
        v80 = v73;
      else
        v80 = v79;
      if (v77 < *((float *)&v261 + 3))
      {
        v80 = (vcvtps_u32_f32(*((float *)&v261 + 3) * (float)Width) + *(_QWORD *)(v27 + 200) - 1) & -*(_QWORD *)(v27 + 200);
        v78 = 1;
      }
      v81 = (float)v46;
      v82 = (float)v75 / (float)v46;
      if (v82 > *(float *)&v262)
      {
        v75 = -*(_QWORD *)(v27 + 208) & (unint64_t)(float)(*(float *)&v262 * v81);
        v78 = 1;
      }
      if (v82 < *((float *)&v262 + 1))
      {
        v83 = *(_QWORD *)(v27 + 208);
        v84 = vcvtps_u32_f32(*((float *)&v262 + 1) * v81) + v83 - 1;
        v85 = -v83;
        v75 = v84 & v85;
        *(_QWORD *)&v232 = 0;
        DWORD2(v232) = v80;
        HIDWORD(v232) = v84 & v85;
LABEL_139:
        v103 = 1;
        v98 = v80;
        v100 = v75;
LABEL_141:
        if (v80 < v98)
          goto LABEL_206;
        v87 = v100;
        v86 = v98;
        if (v75 < v100)
          goto LABEL_206;
        goto LABEL_143;
      }
      *(_QWORD *)&v232 = 0;
      *((_QWORD *)&v232 + 1) = __PAIR64__(v75, v80);
      if (v78)
        goto LABEL_139;
      v86 = v80;
      v87 = v75;
    }
    v88 = v44[2];
    v89 = v44[3];
    if (v88 <= 0.0 && v89 >= v42 && v44[5] >= (double)v200)
    {
      v103 = 0;
      v98 = v86;
      v100 = v87;
      goto LABEL_141;
    }
    v90 = v88;
    LODWORD(v232) = -*(_DWORD *)(v27 + 200) & vcvtas_u32_f32(v90);
    v91 = *(_DWORD *)(v27 + 176);
    v92 = *(_QWORD *)(v27 + 208);
    if (!isH3Platform() || (LODWORD(v93) = -2, v91 != 2037741158) && v91 != 2037741171)
      v93 = -v92;
    v94 = v89;
    v95 = vcvtas_u32_f32(v94);
    v96 = v205[5];
    v97 = v205[4];
    v98 = vcvtas_u32_f32(v97) & -*(_DWORD *)(v27 + 200);
    DWORD1(v232) = v93 & v95;
    DWORD2(v232) = v98;
    v99 = v96;
    v100 = vcvtas_u32_f32(v99) & -*(_DWORD *)(v27 + 208);
    HIDWORD(v232) = v100;
    v101 = v100 + (v93 & v95);
    if (v201 < v232 + v98 || v200 < v101)
    {
LABEL_206:
      v135 = FigSignalErrorAt();
      v11 = v203;
      v106 = pixelBuffer;
      goto LABEL_219;
    }
    v103 = 0;
LABEL_143:
    if ((_BYTE)v229)
    {
      *(_QWORD *)&v215 = 0;
      v213 = 0u;
      v214 = 0u;
      v211 = 0u;
      v212 = 0u;
      memset(&rect, 0, sizeof(rect));
      scalerCapabilities((uint64_t)&rect);
      if ((v214 & 1) == 0)
        goto LABEL_145;
      if (SDWORD1(v214) < (int)v214)
        goto LABEL_145;
      if ((BYTE4(v214) & 1) == 0)
        goto LABEL_145;
      v124 = (unsigned int *)malloc_type_calloc(2 * (DWORD2(v214) * (int)v214 + HIDWORD(v214) * DWORD1(v214)), 4uLL, 0x100004052888210uLL);
      if (!v124)
        goto LABEL_145;
      v125 = v124;
      v126 = (double)v100 / (double)v46;
      v127 = (double)v98;
      v128 = &v124[DWORD2(v214) * (int)v214];
      v129 = &v128[DWORD2(v214) * (int)v214];
      __dst = &v129[HIDWORD(v214) * DWORD1(v214)];
      v130 = v127 / (double)Width;
      _initAsgFilter(SDWORD2(v214), v214, v215, SBYTE4(v215), v124, v126);
      memcpy(v128, v125, 4 * DWORD2(v214) * (int)v214);
      v131 = SDWORD1(v214) >= (int)v214 ? v214 : DWORD1(v214);
      v132 = SDWORD1(v214) >= (int)v214 ? DWORD1(v214) - v214 : DWORD1(v214) - (int)v214 + 1;
      _initAsgFilter(SHIDWORD(v214), v131, v215, SBYTE4(v215), &v129[(v132 >> 1) * HIDWORD(v214)], v130);
      memcpy(__dst, v129, 4 * HIDWORD(v214) * DWORD1(v214));
      v133 = IOSurfaceAcceleratorSetCustomFilter();
      free(v125);
      if (v133)
LABEL_145:
        CFDictionaryRemoveValue(theDict, v191);
    }
    if ((v202 & 1) != 0
      && *(_BYTE *)(a1 + 240)
      && *(_BYTE *)(a1 + 241)
      && v204
      && sUnsetYCbCrMatrix != v204
      && v196 != v204
      && v195 == v207
      && v194 == v206)
    {
      v104 = 1111970369;
      v105 = 1;
      v106 = pixelBuffer;
      goto LABEL_157;
    }
    v106 = pixelBuffer;
    v107 = CVPixelBufferGetPixelFormatType(pixelBuffer);
    if (!v103)
    {
      if (v196 == sUnsetYCbCrMatrix || v196 == 0)
        v140 = v204;
      else
        v140 = v196;
      v141 = v195 == sUnsetColorPrimaryMatrix || v195 == 0;
      v142 = v207;
      if (!v141)
        v142 = v195;
      v143 = v194 == sUnsetTransferFunction || v194 == 0;
      BYTE10(v245) = v140;
      BYTE11(v245) = v142;
      v144 = v206;
      if (!v143)
        v144 = v194;
      BYTE12(v245) = v144;
      CVPixelBufferGetIOSurface(pixelBuffer);
      IOSurfaceSetBulkAttachments2();
      v11 = v203;
      Mutable = theDict;
      v137 = v189;
      if (!v188)
        goto LABEL_251;
      if (!dict)
        goto LABEL_250;
      memset(&rect, 0, sizeof(rect));
      if (CGRectMakeWithDictionaryRepresentation(dict, &rect))
      {
        rect = CGRectStandardize(rect);
        CGRectIntegral(rect);
LABEL_250:
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
LABEL_251:
        CVPixelBufferGetIOSurface(v203);
        CVPixelBufferGetIOSurface(pixelBuffer);
        v147 = IOSurfaceAcceleratorTransformSurface();
        if ((_DWORD)v147)
        {
          v135 = v147;
          v216 = 0;
          v214 = 0u;
          v215 = 0u;
          v212 = 0u;
          v213 = 0u;
          v211 = 0u;
          memset(&rect, 0, sizeof(rect));
          CVPixelBufferGetIOSurface(v203);
          IOSurfaceGetBulkAttachments();
          FigSignalErrorAt();
          goto LABEL_345;
        }
        v148 = v205[4];
        v149 = v205[5];
        v150 = CVPixelBufferGetPixelFormatType(pixelBuffer);
        PlaneCount = CVPixelBufferGetPlaneCount(pixelBuffer);
        if (v150 <= 1952854577)
        {
          if (v150 <= 1936077359)
          {
            if (v150 <= 875704933)
            {
              if (v150 == 875704422)
                goto LABEL_287;
              v152 = 875704438;
            }
            else
            {
              if (v150 == 875704934 || v150 == 875704950)
                goto LABEL_287;
              v152 = 1932681587;
            }
          }
          else if (v150 > 1937125937)
          {
            if (v150 == 1937125938 || v150 == 1949458803)
              goto LABEL_287;
            v152 = 1952854576;
          }
          else
          {
            if (v150 == 1936077360 || v150 == 1936077362)
              goto LABEL_287;
            v152 = 1937125936;
          }
        }
        else if (v150 > 2016567607)
        {
          if (v150 > 2016686641)
          {
            if (v150 == 2016686642 || v150 == 2019963442)
              goto LABEL_287;
            v152 = 2019963440;
          }
          else
          {
            if (v150 == 2016567608 || v150 == 2016567667)
              goto LABEL_287;
            v152 = 2016686640;
          }
        }
        else
        {
          if (v150 <= 1982882103)
          {
            if (v150 != 1952854578 && v150 != 1953903152)
            {
              v152 = 1953903154;
              goto LABEL_286;
            }
LABEL_287:
            DescriptionWithPixelFormatType = CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
            if (DescriptionWithPixelFormatType)
            {
              v154 = (const __CFDictionary *)DescriptionWithPixelFormatType;
              LODWORD(rect.origin.x) = 1;
              LODWORD(v220) = 1;
              IntIfPresent = FigCFDictionaryGetIntIfPresent();
              v156 = v185;
              if (!(IntIfPresent | FigCFDictionaryGetIntIfPresent())
                && (v157 = (const __CFArray *)CFDictionaryGetValue(v154, v185)) != 0
                && (v158 = v157, v159 = CFGetTypeID(v157), v159 == CFArrayGetTypeID())
                && CFArrayGetCount(v158) >= 1)
              {
                v160 = 0;
                v161 = 0;
                do
                {
                  ValueAtIndex = CFArrayGetValueAtIndex(v158, v160);
                  if (ValueAtIndex)
                  {
                    v163 = CFGetTypeID(ValueAtIndex);
                    if (v163 == CFDictionaryGetTypeID())
                    {
                      LODWORD(texturea) = 0;
                      v265 = 0;
                      FigCFDictionaryGetIntIfPresent();
                      FigCFDictionaryGetIntIfPresent();
                      if ((int)texturea > SLODWORD(rect.origin.x))
                        LODWORD(rect.origin.x) = (_DWORD)texturea;
                      if (SHIDWORD(v265) > (int)v220)
                        LODWORD(v220) = HIDWORD(v265);
                      LODWORD(v265) = 0;
                      FigCFDictionaryGetInt32IfPresent();
                      if ((int)v265 > v161)
                        v161 = v265;
                    }
                  }
                  ++v160;
                }
                while (CFArrayGetCount(v158) > v160);
                v106 = pixelBuffer;
                if (!v161)
                {
                  x_low = LODWORD(rect.origin.x);
                  v165 = v220;
                  v156 = v185;
                  goto LABEL_305;
                }
              }
              else
              {
                x_low = LODWORD(rect.origin.x);
                v165 = v220;
LABEL_305:
                CFDictionaryGetValue(v154, v156);
                if (PlaneCount)
                {
                  v166 = 0;
                  v167 = 0;
                  v168 = 0;
                  do
                  {
                    WidthOfPlane = CVPixelBufferGetWidthOfPlane(v106, v166);
                    v170 = v106;
                    v171 = WidthOfPlane;
                    HeightOfPlane = CVPixelBufferGetHeightOfPlane(v170, v166);
                    if (x_low == 2 && ((v171 > 1) & v171 & (v148 == (double)v171)) != 0)
                      v168 = 1;
                    v106 = pixelBuffer;
                    if (v165 == 2
                      && ((HeightOfPlane > 1) & HeightOfPlane & (v149 == (double)HeightOfPlane)) != 0)
                    {
                      v167 = 1;
                    }
                    ++v166;
                  }
                  while (PlaneCount != v166);
                }
                else
                {
                  v168 = 0;
                  v167 = 0;
                }
                if (v168 | v167)
                {
                  CVPixelBufferLockBaseAddress(v106, 0);
                  if (PlaneCount)
                  {
                    for (i = 0; i != PlaneCount; ++i)
                    {
                      v174 = CVPixelBufferGetWidthOfPlane(pixelBuffer, i);
                      v175 = CVPixelBufferGetHeightOfPlane(pixelBuffer, i);
                      BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, i);
                      BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, i);
                      if (!BaseAddressOfPlane)
                        break;
                      v178 = BaseAddressOfPlane;
                      if (v168 && v174 >= 2)
                      {
                        LODWORD(rect.origin.x) = 0;
                        FigCFArrayGetValueAtIndex();
                        FigCFDictionaryGetIntIfPresent();
                        if (LODWORD(rect.origin.x) == 32)
                        {
                          if (v175)
                          {
                            v181 = &v178[4 * v174 - 4];
                            v182 = v175;
                            do
                            {
                              *(_DWORD *)v181 = *((_DWORD *)v181 - 1);
                              v181 += BytesPerRowOfPlane;
                              --v182;
                            }
                            while (v182);
                          }
                        }
                        else if (LODWORD(rect.origin.x) == 16)
                        {
                          if (v175)
                          {
                            v183 = &v178[2 * v174 - 2];
                            v184 = v175;
                            do
                            {
                              *(_WORD *)v183 = *((_WORD *)v183 - 1);
                              v183 += BytesPerRowOfPlane;
                              --v184;
                            }
                            while (v184);
                          }
                        }
                        else if (LODWORD(rect.origin.x) == 8 && v175)
                        {
                          v179 = &v178[v174 - 1];
                          v180 = v175;
                          do
                          {
                            *v179 = *(v179 - 1);
                            v179 += BytesPerRowOfPlane;
                            --v180;
                          }
                          while (v180);
                        }
                      }
                      if (v167 && v175 >= 2)
                        memcpy(&v178[(v175 - 1) * BytesPerRowOfPlane], &v178[(v175 - 2) * BytesPerRowOfPlane], BytesPerRowOfPlane);
                    }
                  }
                  v106 = pixelBuffer;
                  CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
                  v11 = v203;
                }
              }
            }
LABEL_341:
            if (!v188)
            {
              v135 = 0;
              goto LABEL_209;
            }
            bzero(&rect, 0x620uLL);
            CFDataSetLength(v188, 0);
            v137 = v189;
            if (!IOSurfaceAcceleratorGetHistogram())
            {
              CFDataAppendBytes(v188, bytes, 4 * LODWORD(rect.origin.x));
              CFDataAppendBytes(v188, v218, 4 * LODWORD(rect.origin.x));
              CFDataAppendBytes(v188, v219, 4 * LODWORD(rect.origin.x));
            }
            v135 = 0;
LABEL_345:
            v136 = v190;
            if (v190)
              goto LABEL_210;
            goto LABEL_211;
          }
          if (v150 == 1982882104 || v150 == 1983013176)
            goto LABEL_287;
          v152 = 2016436536;
        }
LABEL_286:
        if (v150 == v152)
          goto LABEL_287;
        goto LABEL_341;
      }
      v135 = FigSignalErrorAt();
      goto LABEL_345;
    }
    v104 = v107;
    v105 = 0;
LABEL_157:
    v216 = 0;
    v214 = 0u;
    v215 = 0u;
    v212 = 0u;
    v213 = 0u;
    v211 = 0u;
    memset(&rect, 0, sizeof(rect));
    CVPixelBufferGetIOSurface(v106);
    ProtectionOptions = IOSurfaceGetProtectionOptions();
    v109 = ProtectionOptions;
    v110 = *(unsigned int *)(a1 + 168);
    if ((int)v110 < 1)
    {
LABEL_164:
      texturea = 0;
    }
    else
    {
      v111 = v192;
      while (*(_QWORD *)(v111 - 8) != (int)v80
           || *(_QWORD *)v111 != (int)v75
           || *(_DWORD *)(v111 + 8) != v104
           || *(_QWORD *)(v111 + 16) != ProtectionOptions)
      {
        v111 += 40;
        if (!--v110)
          goto LABEL_164;
      }
      v134 = *(__CVBuffer **)(v111 - 16);
      texturea = v134;
      if (v134)
      {
        CVPixelBufferRetain(v134);
        v11 = v203;
        Mutable = theDict;
        v27 = a1;
        v35 = v197;
        goto LABEL_188;
      }
    }
    v112 = FigCreateProtectedIOSurfaceBackedCVPixelBufferWithAttributes(v86, v87, v104, 0, v109, &texturea);
    v11 = v203;
    v35 = v197;
    if ((_DWORD)v112)
      break;
    if (v196)
      v113 = v196 == sUnsetYCbCrMatrix;
    else
      v113 = 1;
    if (v113)
      v114 = 1;
    else
      v114 = v105;
    if (v114)
      v115 = v204;
    else
      v115 = v196;
    v116 = v195 == sUnsetColorPrimaryMatrix || v195 == 0;
    v117 = v207;
    if (!v116)
      v117 = v195;
    v118 = v194 == sUnsetTransferFunction || v194 == 0;
    BYTE10(v212) = v115;
    BYTE11(v212) = v117;
    v119 = v206;
    if (!v118)
      v119 = v194;
    BYTE12(v212) = v119;
    CVPixelBufferGetIOSurface(texturea);
    IOSurfaceSetBulkAttachments2();
    v120 = texturea;
    Mutable = theDict;
    v27 = a1;
    if (texturea)
    {
      v121 = *(_DWORD *)(a1 + 168);
      if (v121 <= 3)
      {
        v122 = a1 + 40 * v121;
        *(_QWORD *)(v122 + 8) = CVPixelBufferRetain(texturea);
        *(_QWORD *)(v122 + 16) = CVPixelBufferGetWidth(v120);
        *(_QWORD *)(v122 + 24) = CVPixelBufferGetHeight(v120);
        *(_DWORD *)(v122 + 32) = CVPixelBufferGetPixelFormatType(v120);
        CVPixelBufferGetIOSurface(v120);
        *(_QWORD *)(v122 + 40) = IOSurfaceGetProtectionOptions();
        ++*(_DWORD *)(a1 + 168);
      }
    }
LABEL_188:
    CVPixelBufferGetIOSurface(v11);
    CVPixelBufferGetIOSurface(texturea);
    v123 = IOSurfaceAcceleratorTransformSurface();
    if ((_DWORD)v123)
    {
      v135 = v123;
      v227 = 0;
      v226 = 0u;
      v225 = 0u;
      v224 = 0u;
      v223 = 0u;
      v222 = 0u;
      v221 = 0u;
      v220 = 0u;
      CVPixelBufferGetIOSurface(v11);
      IOSurfaceGetBulkAttachments();
      FigSignalErrorAt();
      if (texturea)
        CFRelease(texturea);
      goto LABEL_209;
    }
    CVPixelBufferRelease(v11);
    v43 = 0;
    v11 = texturea;
    v204 = BYTE10(v212);
    v207 = BYTE11(v212);
    v41 = 1;
    v206 = BYTE12(v212);
  }
  v135 = v112;
  FigSignalErrorAt();
LABEL_219:
  v137 = v189;
  v136 = v190;
  Mutable = theDict;
  if (v190)
    goto LABEL_210;
LABEL_211:
  if (v137)
  {
    CVPixelBufferGetIOSurface(v106);
    IOSurfaceSetBulkAttachments2();
  }
  if (v11)
LABEL_214:
    CVPixelBufferRelease(v11);
LABEL_215:
  if (Mutable)
    CFRelease(Mutable);
  return v135;
}

uint64_t vtPixelTransferSession_EnsurePixelFormatPixelBlockInfoArray(OSType a1, size_t count, _QWORD *a3)
{
  uint64_t result;
  char *v7;
  void *v8;
  unint64_t v9;
  char *v10;

  if (*a3)
    return 0;
  v7 = (char *)malloc_type_calloc(count, 0x70uLL, 0x100004081F0E799uLL);
  v8 = v7;
  if (count)
  {
    v9 = 0;
    v10 = v7;
    while (1)
    {
      result = VTBlackFillGetPixelFormatPixelBlockInfo(a1, v9, v10, (_QWORD *)v10 + 1, (_QWORD *)v10 + 2, (_QWORD *)v10 + 3, (_QWORD *)v10 + 4, v10 + 105, v10 + 40, v10 + 104, v10 + 106, v10 + 110);
      if ((_DWORD)result)
        break;
      ++v9;
      v10 += 112;
      if (count == v9)
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    result = 0;
    *a3 = v8;
  }
  return result;
}

void figIOSurfaceAcceleratedPixelTransfer_Close(_DWORD *a1)
{
  const void *v2;
  int v3;
  uint64_t v4;
  CVPixelBufferRef *v5;

  if (a1)
  {
    v2 = *(const void **)a1;
    if (v2)
    {
      CFRelease(v2);
      *(_QWORD *)a1 = 0;
    }
    v3 = a1[42];
    if (v3 >= 1)
    {
      v4 = 0;
      v5 = (CVPixelBufferRef *)(a1 + 2);
      do
      {
        if (*v5)
        {
          CVPixelBufferRelease(*v5);
          *v5 = 0;
          v3 = a1[42];
        }
        ++v4;
        v5 += 5;
      }
      while (v4 < v3);
    }
    free(a1);
  }
}

OSStatus VTSessionSetProperty(VTSessionRef session, CFStringRef propertyKey, CFTypeRef propertyValue)
{
  const void *v6;
  uint64_t (**CallbacksWithTypeID)(VTSessionRef, CFStringRef, CFTypeRef);

  if (session
    && (v6 = (const void *)CFGetTypeID(session),
        CallbacksWithTypeID = (uint64_t (**)(VTSessionRef, CFStringRef, CFTypeRef))VTSessionGetCallbacksWithTypeID(v6),
        propertyKey)
    && CallbacksWithTypeID)
  {
    return CallbacksWithTypeID[2](session, propertyKey, propertyValue);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t VTPixelTransferSessionSetProperty(uint64_t a1, const __CFString *a2, const void *a3)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v8;

  if (!a1)
    return _VTPixelTransferSessionSetProperty(0, a2, a3);
  if (FigAtomicIncrement32() != 1)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v8 = _VTPixelTransferSessionSetProperty(a1, a2, a3);
  FigAtomicDecrement32();
  return v8;
}

unint64_t *vt_Copy_yuvs_2vuy_arm(unint64_t *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;

  if (a3 && a4)
  {
    do
    {
      v4 = a3 >> 3;
      if (a3 >> 3)
      {
        do
        {
          v6 = *result;
          v7 = result[1];
          result += 2;
          *a2 = __rev16(v6);
          a2[1] = __rev16(v7);
          a2 += 2;
          --v4;
        }
        while (v4);
        v5 = a3 & 7;
        if ((a3 & 7) == 0)
          goto LABEL_8;
      }
      else
      {
        v5 = a3;
      }
      do
      {
        v8 = *(_DWORD *)result;
        result = (unint64_t *)((char *)result + 4);
        *(_DWORD *)a2 = __rev16(v8);
        a2 = (_QWORD *)((char *)a2 + 4);
        --v5;
      }
      while (v5);
LABEL_8:
      --a4;
    }
    while (a4);
  }
  return result;
}

const char *vt_Copy_yuvs_420v_arm(const char *result, int8x16_t **a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  int8x16_t *v6;
  int8x16_t *v7;
  int64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  __int8 *v17;
  char v18;
  __int8 *v19;
  __int8 v20;
  __int8 *v21;
  __int8 v22;
  __int8 v23;
  uint64_t v24;
  int64_t v25;
  unsigned __int128 v26;
  _WORD *v27;
  __int16 v28;
  __int8 *v29;
  __int16 v30;
  BOOL v31;
  int8x16x2_t v32;

  v6 = a2[1];
  v7 = *a2;
  v8 = a3 & 0xFFFFFFFFFFFFFFFELL;
  if (v8)
  {
    v9 = a4;
    v10 = a4 & 0xFFFFFFFFFFFFFFFELL;
    if (v10)
    {
      v11 = a6[1];
      v12 = a5 - 2 * v8;
      v13 = *a6 - v8;
      v14 = v11 - v8;
LABEL_4:
      v15 = v8 >> 4;
      if (v8 >> 4)
      {
        do
        {
          v32 = vld2q_s8(result);
          result += 32;
          *v7++ = v32.val[0];
          *v6++ = v32.val[1];
          --v15;
        }
        while (v15);
        v16 = v8 & 0xF;
        if ((v8 & 0xF) == 0)
          goto LABEL_9;
      }
      else
      {
        v16 = v8;
      }
      do
      {
        v18 = *result;
        v17 = (__int8 *)(result + 1);
        v7->i8[0] = v18;
        v19 = &v7->i8[1];
        v20 = *v17++;
        v6->i8[0] = v20;
        v21 = &v6->i8[1];
        v22 = *v17++;
        *v19 = v22;
        v7 = (int8x16_t *)(v19 + 1);
        v23 = *v17;
        result = v17 + 1;
        *v21 = v23;
        v6 = (int8x16_t *)(v21 + 1);
        v16 -= 2;
      }
      while (v16);
LABEL_9:
      result += v12;
      v7 = (int8x16_t *)((char *)v7 + v13);
      v6 = (int8x16_t *)((char *)v6 + v14);
      do
      {
        v24 = v8 >> 4;
        if (v8 >> 4)
        {
          do
          {
            v26 = (unsigned __int128)vld2q_s8(result);
            result += 32;
            *v7++ = (int8x16_t)v26;
            --v24;
          }
          while (v24);
          v25 = v8 & 7;
          if ((v8 & 7) == 0)
            goto LABEL_15;
        }
        else
        {
          v25 = v8;
        }
        do
        {
          v28 = *(_WORD *)result;
          v27 = result + 2;
          v7->i8[0] = v28;
          v29 = &v7->i8[1];
          v30 = *v27;
          result = (const char *)(v27 + 1);
          *v29 = v30;
          v7 = (int8x16_t *)(v29 + 1);
          v25 -= 2;
        }
        while (v25);
LABEL_15:
        result += v12;
        v7 = (int8x16_t *)((char *)v7 + v13);
        v10 -= 2;
        if (v10)
          goto LABEL_4;
        v31 = (v9 & 1) == 0;
        v9 = 0;
        v10 = 2;
      }
      while (!v31);
    }
  }
  return result;
}

const char *vt_Copy_yuvs_420v_avg_arm(const char *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint8x16_t *v6;
  int8x16_t *v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  int8x16_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  unsigned __int8 *v18;
  char v19;
  __int8 *v20;
  unsigned __int8 *v21;
  char v22;
  __int8 *v23;
  int v24;
  int v25;
  int v26;
  __int8 *v27;
  int v28;
  int v29;
  int v30;
  int64_t v31;
  int64_t v32;
  uint64_t v33;
  int64_t v34;
  __int8 *v35;
  char v36;
  __int8 *v37;
  __int8 v38;
  __int8 *v39;
  __int8 v40;
  __int8 v41;
  int8x16x2_t v42;
  int8x16x2_t v43;
  int8x16x2_t v44;

  v6 = *(uint8x16_t **)(a2 + 8);
  v7 = *(int8x16_t **)a2;
  v8 = a3 & 0xFFFFFFFFFFFFFFFELL;
  if (!v8 || a4 < 2)
    return result;
  v9 = a6[1];
  v10 = *a6;
  v11 = &result[a5];
  v12 = (int8x16_t *)((char *)v7 + v10);
  v13 = a5 - 2 * v8;
  v14 = v10 - v8;
  v15 = v9 - v8;
  do
  {
    v16 = v8 >> 4;
    if (!(v8 >> 4))
    {
      v17 = v8;
      do
      {
LABEL_8:
        v19 = *result;
        v18 = (unsigned __int8 *)(result + 1);
        v7->i8[0] = v19;
        v20 = &v7->i8[1];
        v22 = *v11;
        v21 = (unsigned __int8 *)(v11 + 1);
        v12->i8[0] = v22;
        v23 = &v12->i8[1];
        v25 = *v18++;
        v24 = v25;
        v26 = *v21++;
        v6->i8[0] = (v24 + v26) >> 1;
        v27 = &v6->i8[1];
        LOBYTE(v26) = *v18++;
        *v20 = v26;
        v7 = (int8x16_t *)(v20 + 1);
        LOBYTE(v26) = *v21++;
        *v23 = v26;
        v12 = (int8x16_t *)(v23 + 1);
        v29 = *v18;
        result = (const char *)(v18 + 1);
        v28 = v29;
        v30 = *v21;
        v11 = (const char *)(v21 + 1);
        *v27 = (v28 + v30) >> 1;
        v6 = (uint8x16_t *)(v27 + 1);
        v17 -= 2;
      }
      while (v17);
      goto LABEL_9;
    }
    do
    {
      v42 = vld2q_s8(result);
      result += 32;
      v44 = vld2q_s8(v11);
      v11 += 32;
      *v7++ = v42.val[0];
      *v12++ = v44.val[0];
      *v6++ = vhaddq_u8((uint8x16_t)v42.val[1], (uint8x16_t)v44.val[1]);
      --v16;
    }
    while (v16);
    v17 = v8 & 0xF;
    if ((v8 & 0xF) != 0)
      goto LABEL_8;
LABEL_9:
    v31 = v11 - result;
    result = &v11[v13];
    v11 += v13 + v31;
    v32 = (char *)v12 - (char *)v7;
    v7 = (int8x16_t *)((char *)v12 + v14);
    v12 = (int8x16_t *)((char *)v12 + v14 + v32);
    v6 = (uint8x16_t *)((char *)v6 + v15);
    a4 -= 2;
    if (!a4)
      return result;
  }
  while (a4 != 1);
  v33 = v8 >> 4;
  if (!(v8 >> 4))
  {
    v34 = v8;
    goto LABEL_15;
  }
  do
  {
    v43 = vld2q_s8(result);
    result += 32;
    *v7++ = v43.val[0];
    *v6++ = (uint8x16_t)v43.val[1];
    --v33;
  }
  while (v33);
  v34 = v8 & 0xF;
  if ((v8 & 0xF) != 0)
  {
    do
    {
LABEL_15:
      v36 = *result;
      v35 = (__int8 *)(result + 1);
      v7->i8[0] = v36;
      v37 = &v7->i8[1];
      v38 = *v35++;
      v6->i8[0] = v38;
      v39 = &v6->i8[1];
      v40 = *v35++;
      *v37 = v40;
      v7 = (int8x16_t *)(v37 + 1);
      v41 = *v35;
      result = v35 + 1;
      *v39 = v41;
      v6 = (uint8x16_t *)(v39 + 1);
      v34 -= 2;
    }
    while (v34);
  }
  result += v13;
  return result;
}

uint64_t vt_Has_yuvs_420v_arm()
{
  return 1;
}

int8x16_t *vt_Copy_420v_yuvs_arm(int8x16_t **a1, char *a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6)
{
  int8x16_t *v6;
  int8x16_t *result;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  __int8 *v15;
  char v16;
  __int8 *v17;
  __int8 *v18;
  __int8 v19;
  __int8 v20;
  __int8 v21;
  int8x16_t *v22;
  int8x16_t *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  int64_t v27;
  __int8 *v28;
  char v29;
  __int8 *v30;
  __int8 *v31;
  __int8 v32;
  __int8 v33;
  __int8 v34;
  int8x16x2_t v35;
  int8x16x2_t v36;

  v6 = a1[1];
  result = *a1;
  v8 = a3 & 0xFFFFFFFFFFFFFFFELL;
  if (v8)
  {
    v9 = a4 & 0xFFFFFFFFFFFFFFFELL;
    if (v9)
    {
      v10 = a5[1];
      v11 = *a5 - v8;
      v12 = a6 - 2 * v8;
      while (1)
      {
        v13 = v8 >> 4;
        if (!(v8 >> 4))
          break;
        do
        {
          v35.val[0] = *result++;
          v35.val[1] = *v6++;
          vst2q_s8(a2, v35);
          a2 += 32;
          --v13;
        }
        while (v13);
        v14 = v8 & 0xF;
        if ((v8 & 0xF) != 0)
          goto LABEL_8;
LABEL_9:
        v22 = (int8x16_t *)((char *)result + v11);
        v23 = (int8x16_t *)((char *)v6 - v8);
        v24 = &a2[v12];
        v25 = v9 - 1;
        v26 = v8 >> 4;
        if (v8 >> 4)
        {
          do
          {
            v36.val[0] = *v22++;
            v36.val[1] = *v23++;
            vst2q_s8(v24, v36);
            v24 += 32;
            --v26;
          }
          while (v26);
          v27 = v8 & 0xF;
          if ((v8 & 0xF) == 0)
            goto LABEL_14;
        }
        else
        {
          v27 = v8;
        }
        do
        {
          v29 = v22->i8[0];
          v28 = &v22->i8[1];
          *v24 = v29;
          v30 = v24 + 1;
          v32 = v23->i8[0];
          v31 = &v23->i8[1];
          *v30++ = v32;
          v33 = *v28;
          v22 = (int8x16_t *)(v28 + 1);
          *v30++ = v33;
          v34 = *v31;
          v23 = (int8x16_t *)(v31 + 1);
          *v30 = v34;
          v24 = v30 + 1;
          v27 -= 2;
        }
        while (v27);
LABEL_14:
        result = (int8x16_t *)((char *)v22 + v11);
        v6 = (int8x16_t *)((char *)v23 + v10 - v8);
        a2 = &v24[v12];
        v9 = v25 - 1;
        if (!v9)
          return result;
      }
      v14 = v8;
      do
      {
LABEL_8:
        v16 = result->i8[0];
        v15 = &result->i8[1];
        *a2 = v16;
        v17 = a2 + 1;
        v19 = v6->i8[0];
        v18 = &v6->i8[1];
        *v17++ = v19;
        v20 = *v15;
        result = (int8x16_t *)(v15 + 1);
        *v17++ = v20;
        v21 = *v18;
        v6 = (int8x16_t *)(v18 + 1);
        *v17 = v21;
        a2 = v17 + 1;
        v14 -= 2;
      }
      while (v14);
      goto LABEL_9;
    }
  }
  return result;
}

__n128 *vt_Copy_420v_yuvs_interp_arm(__n128 **a1, char *a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, __n128 a7)
{
  int8x16_t *v7;
  __n128 *result;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int8x16_t *v13;
  int8x16_t *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  int8x16_t v19;
  int8x16_t v20;
  unsigned __int8 *v21;
  char v22;
  unsigned __int8 *v23;
  __int8 *v24;
  char v25;
  __int8 *v26;
  __int8 *v27;
  int8x8_t v28;
  __int8 *v29;
  int8x8_t v30;
  unsigned __int8 v31;
  __int8 v32;
  int8x8_t v33;
  int8x16x2_t v34;

  v7 = (int8x16_t *)a1[1];
  result = *a1;
  v9 = a3 & 0xFFFFFFFFFFFFFFFELL;
  if (v9)
  {
    v10 = a4 & 0xFFFFFFFFFFFFFFFELL;
    if (v10)
    {
      v11 = a5[1];
      v12 = *a5;
      v13 = (int8x16_t *)((char *)result + v12);
      v14 = (int8x16_t *)((char *)v7 + v11);
      v15 = &a2[a6];
      v16 = v11 - v9;
      do
      {
        v17 = v9 >> 4;
        if (v9 >> 4)
        {
          do
          {
            a7 = *result++;
            v19 = *v7++;
            v20 = *v14++;
            v34.val[1] = vrhaddq_s8(v19, v20);
            vst2q_s8(a2, *(int8x16x2_t *)a7.n128_u64);
            a2 += 32;
            v34.val[0] = *v13++;
            vst2q_s8(v15, v34);
            v15 += 32;
            --v17;
          }
          while (v17);
          v18 = v9 & 0xF;
          if ((v9 & 0xF) == 0)
            goto LABEL_9;
        }
        else
        {
          v18 = v9;
        }
        do
        {
          v22 = result->n128_u8[0];
          v21 = &result->n128_u8[1];
          *a2 = v22;
          v23 = (unsigned __int8 *)(a2 + 1);
          v25 = v13->i8[0];
          v24 = &v13->i8[1];
          *v15 = v25;
          v26 = v15 + 1;
          a7.n128_u8[0] = v7->i8[0];
          v27 = &v7->i8[1];
          v28 = (int8x8_t)0x101010101010101;
          v28.i8[0] = v14->i8[0];
          v29 = &v14->i8[1];
          v30 = vhadd_s8(vqadd_s8((int8x8_t)a7.n128_u64[0], (int8x8_t)0x101010101010101), v28);
          *v23++ = v30.i8[0];
          *v26++ = v30.i8[0];
          v31 = *v21;
          result = (__n128 *)(v21 + 1);
          *v23++ = v31;
          v32 = *v24;
          v13 = (int8x16_t *)(v24 + 1);
          *v26++ = v32;
          v30.i8[0] = *v27;
          v7 = (int8x16_t *)(v27 + 1);
          v33 = (int8x8_t)0x101010101010101;
          v33.i8[0] = *v29;
          v14 = (int8x16_t *)(v29 + 1);
          a7.n128_u64[0] = (unint64_t)vhadd_s8(vqadd_s8(v30, (int8x8_t)0x101010101010101), v33);
          *v23 = a7.n128_u8[0];
          a2 = (char *)(v23 + 1);
          *v26 = a7.n128_u8[0];
          v15 = v26 + 1;
          v18 -= 2;
        }
        while (v18);
LABEL_9:
        result = (__n128 *)((char *)result + 2 * v12 - v9);
        v13 = (int8x16_t *)((char *)result + v12);
        v7 = (int8x16_t *)((char *)v7 + v16);
        v14 = (int8x16_t *)((char *)v14 + v16);
        a2 = &a2[2 * a6 + -2 * v9];
        v15 = &a2[a6];
        v10 -= 2;
      }
      while (v10);
    }
  }
  return result;
}

uint64_t vt_Has_420v_yuvs_arm()
{
  return 1;
}

uint8x16_t *vt_Copy_420v_yuvf_arm(uint8x16_t **a1, int8x16_t *a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, double a7, double a8, double a9, uint32x4_t a10, uint32x4_t a11)
{
  uint8x16_t *v11;
  uint8x16_t *result;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint16x8_t v19;
  uint16x8_t v20;
  uint8x16_t v21;
  uint64_t v22;
  int64_t v23;
  uint8x16_t v24;
  uint8x16_t v25;
  uint8x16_t v26;
  uint8x16_t v27;
  uint16x8_t v28;
  uint16x8_t v29;
  uint16x8_t v30;
  uint16x8_t v31;
  __int8 *v32;

  v11 = a1[1];
  result = *a1;
  v13 = a3 & 0xFFFFFFFFFFFFFFFELL;
  if (v13)
  {
    v14 = a4 & 0xFFFFFFFFFFFFFFFELL;
    if (v14)
    {
      v15 = a5[1];
      v16 = *a5 - v13;
      v17 = a6 - 2 * v13;
      v18 = 0;
      v19 = (uint16x8_t)vdupq_n_s16(0x950Bu);
      v20 = (uint16x8_t)vdupq_n_s16(0x91B7u);
      v21 = (uint8x16_t)vdupq_n_s8(0x10u);
      do
      {
        v22 = v13 >> 4;
        if (v13 >> 4)
        {
          do
          {
            v24 = *result++;
            v25 = *v11++;
            v26 = vqsubq_u8(v24, v21);
            v27 = vqsubq_u8(v25, v21);
            v28 = vmovl_u8(*(uint8x8_t *)v26.i8);
            v29 = vmovl_high_u8(v26);
            v30 = vmovl_u8(*(uint8x8_t *)v27.i8);
            v31 = vmovl_high_u8(v27);
            a10 = (uint32x4_t)vqmovn_high_u16(vqmovn_u16(vqrshrn_high_n_u32(vqrshrn_n_u32(vmull_u16(*(uint16x4_t *)v28.i8, *(uint16x4_t *)v19.i8), 0xFuLL), vmull_high_u16(v28, v19), 0xFuLL)), vqrshrn_high_n_u32(vqrshrn_n_u32(vmull_u16(*(uint16x4_t *)v29.i8, *(uint16x4_t *)v19.i8), 0xFuLL), vmull_high_u16(v29, v19), 0xFuLL));
            a11 = (uint32x4_t)vqmovn_high_u16(vqmovn_u16(vqrshrn_high_n_u32(vqrshrn_n_u32(vmull_u16(*(uint16x4_t *)v30.i8, *(uint16x4_t *)v20.i8), 0xFuLL), vmull_high_u16(v30, v20), 0xFuLL)), vqrshrn_high_n_u32(vqrshrn_n_u32(vmull_u16(*(uint16x4_t *)v31.i8, *(uint16x4_t *)v20.i8), 0xFuLL), vmull_high_u16(v31, v20), 0xFuLL));
            *a2 = vzip1q_s8((int8x16_t)a10, (int8x16_t)a11);
            a2[1] = vzip2q_s8((int8x16_t)a10, (int8x16_t)a11);
            a2 += 2;
            --v22;
          }
          while (v22);
          v23 = v13 & 0xF;
          if ((v13 & 0xF) == 0)
            goto LABEL_9;
        }
        else
        {
          v23 = v13;
        }
        do
        {
          a10.i16[0] = result->i16[0];
          result = (uint8x16_t *)((char *)result + 2);
          a11.i16[0] = v11->i16[0];
          v11 = (uint8x16_t *)((char *)v11 + 2);
          a10 = vmull_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(vqsub_u8(*(uint8x8_t *)a10.i8, *(uint8x8_t *)v21.i8)), *(uint16x4_t *)v19.i8);
          a11 = vmull_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(vqsub_u8(*(uint8x8_t *)a11.i8, *(uint8x8_t *)v21.i8)), *(uint16x4_t *)v20.i8);
          *(uint16x4_t *)a10.i8 = vqrshrn_n_u32(a10, 0xFuLL);
          *(uint16x4_t *)a11.i8 = vqrshrn_n_u32(a11, 0xFuLL);
          *(uint8x8_t *)a10.i8 = vqmovn_u16((uint16x8_t)a10);
          *(uint8x8_t *)a11.i8 = vqmovn_u16((uint16x8_t)a11);
          a2->i8[0] = a10.i8[0];
          a2->i8[1] = a11.i8[0];
          v32 = &a2->i8[2];
          *v32 = a10.i8[1];
          v32[1] = a11.i8[1];
          a2 = (int8x16_t *)(v32 + 2);
          v23 -= 2;
        }
        while (v23);
LABEL_9:
        result = (uint8x16_t *)((char *)result + v16);
        v18 ^= v15;
        v11 = (uint8x16_t *)((char *)v11 + v15 - v13 - v18);
        a2 = (int8x16_t *)((char *)a2 + v17);
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Has_420v_yuvf_arm()
{
  return 1;
}

_DWORD *vt_Copy_420v_y420_Chroma_arm(_DWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  int8x8_t *v11;
  int8x8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  __int16 v24;
  int8x8x2_t v25;

  v6 = *(_QWORD *)(a5 + 8);
  v7 = *(_QWORD *)(a6 + 16);
  v8 = *(_QWORD *)(a6 + 8);
  v9 = a3 & 0xFFFFFFFFFFFFFFFELL;
  if (v9)
  {
    v10 = a4 & 0xFFFFFFFFFFFFFFFELL;
    if (v10)
    {
      result = (_DWORD *)*((_QWORD *)result + 1);
      v11 = *(int8x8_t **)(a2 + 16);
      v12 = *(int8x8_t **)(a2 + 8);
      v13 = v6 - v9;
      v14 = v8 - (v9 >> 1);
      v15 = v7 - (v9 >> 1);
      for (i = v10 >> 1; i; --i)
      {
        v17 = v9 >> 4;
        if (v9 >> 4)
        {
          do
          {
            v25 = vld2_s8((const char *)result);
            result += 4;
            *v12++ = v25.val[0];
            *v11++ = v25.val[1];
            --v17;
          }
          while (v17);
          v18 = v9 & 0xF;
          if ((v9 & 0xF) == 0)
            goto LABEL_13;
          if ((v9 & 0xFu) >= 8uLL)
          {
            v19 = 1;
            do
            {
              v22 = *result;
              v20 = result + 1;
              v21 = v22;
              v23 = *v20;
              result = v20 + 1;
              v12->i32[0] = v21 | (BYTE2(v21) << 8) | (v23 << 16) | (BYTE2(v23) << 24);
              v12 = (int8x8_t *)((char *)v12 + 4);
              v11->i32[0] = BYTE1(v21) | (HIBYTE(v21) << 8) | (BYTE1(v23) << 16) | (HIBYTE(v23) << 24);
              v11 = (int8x8_t *)((char *)v11 + 4);
              --v19;
            }
            while (v19);
            v18 = v9 & 7;
            if ((v9 & 7) == 0)
              goto LABEL_13;
          }
        }
        else
        {
          v18 = v9;
        }
        do
        {
          v24 = *(_WORD *)result;
          result = (_DWORD *)((char *)result + 2);
          v12->i8[0] = v24;
          v12 = (int8x8_t *)((char *)v12 + 1);
          v11->i8[0] = HIBYTE(v24);
          v11 = (int8x8_t *)((char *)v11 + 1);
          v18 -= 2;
        }
        while (v18);
LABEL_13:
        result = (_DWORD *)((char *)result + v13);
        v12 = (int8x8_t *)((char *)v12 + v14);
        v11 = (int8x8_t *)((char *)v11 + v15);
      }
    }
  }
  return result;
}

uint64_t vt_Has_420v_y420_arm()
{
  return 1;
}

_QWORD *vt_Copy_420f_420v_arm(_QWORD *result, int8x16_t **a2, uint64_t a3, uint64_t a4, _QWORD *a5, _QWORD *a6, uint16x4_t a7)
{
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  int8x16_t *v10;
  uint64_t v11;
  int16x8_t v12;
  uint64_t i;
  uint8x16_t v14;
  uint8x16_t v15;
  uint16x8_t v16;
  uint16x8_t v17;
  uint16x8_t v18;
  uint16x8_t v19;
  uint64_t v20;
  int32x2_t v21;
  uint64_t v22;
  uint8x16_t *v23;
  uint64_t v24;
  int8x16_t *v25;
  uint64_t v26;
  uint64_t j;
  uint64_t k;
  uint8x16_t v29;
  uint8x16_t v30;
  uint16x8_t v31;
  uint16x8_t v32;
  uint16x8_t v33;
  uint16x8_t v34;
  uint64_t v35;
  int32x2_t v36;
  int32x2_t v37;

  if (a4)
  {
    v7 = a4;
    v8 = (_OWORD *)*result;
    v9 = *a5 - a3;
    v10 = *a2;
    v11 = *a6 - a3;
    a7.i32[0] = 56284;
    v12 = vdupq_n_s16(0x1000u);
    do
    {
      for (i = a3 >> 5; i; --i)
      {
        v14 = *(uint8x16_t *)v8;
        v15 = *((uint8x16_t *)v8 + 1);
        v8 += 2;
        v16 = vmovl_u8(*(uint8x8_t *)v14.i8);
        v17 = vmovl_high_u8(v14);
        v18 = vmovl_u8(*(uint8x8_t *)v15.i8);
        v19 = vmovl_high_u8(v15);
        *v10 = vaddhn_high_s16(vaddhn_s16(vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmull_lane_u16(*(uint16x4_t *)v16.i8, a7, 0), 8uLL), (int32x4_t)vmull_high_lane_u16(v16, a7, 0), 8uLL), v12), vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmull_lane_u16(*(uint16x4_t *)v17.i8, a7, 0), 8uLL), (int32x4_t)vmull_high_lane_u16(v17, a7, 0), 8uLL), v12);
        v10[1] = vaddhn_high_s16(vaddhn_s16(vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmull_lane_u16(*(uint16x4_t *)v18.i8, a7, 0), 8uLL), (int32x4_t)vmull_high_lane_u16(v18, a7, 0), 8uLL), v12), vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmull_lane_u16(*(uint16x4_t *)v19.i8, a7, 0), 8uLL), (int32x4_t)vmull_high_lane_u16(v19, a7, 0), 8uLL), v12);
        v10 += 2;
      }
      v20 = a3 & 0x1F;
      if ((a3 & 0x1F) != 0)
      {
        do
        {
          v21 = (int32x2_t)*(unsigned __int8 *)v8;
          v8 = (_OWORD *)((char *)v8 + 1);
          v10->i8[0] = vaddhn_s16((int16x8_t)*(unint64_t *)&vshrn_n_s64((int64x2_t)*(unint64_t *)&vmul_s32(v21, (int32x2_t)a7), 8uLL), v12).u8[0];
          v10 = (int8x16_t *)((char *)v10 + 1);
          --v20;
        }
        while (v20);
      }
      v8 = (_OWORD *)((char *)v8 + v9);
      v10 = (int8x16_t *)((char *)v10 + v11);
      --v7;
    }
    while (v7);
    v22 = a3 >> 1;
    v23 = (uint8x16_t *)result[1];
    v24 = a5[1] - 2 * v22;
    v25 = a2[1];
    v26 = a6[1] - 2 * v22;
    a7.i32[0] = 57569;
    for (j = a4 >> 1; j; --j)
    {
      for (k = v22 >> 4; k; --k)
      {
        v29 = *v23;
        v30 = v23[1];
        v23 += 2;
        v31 = vmovl_u8(*(uint8x8_t *)v29.i8);
        v32 = vmovl_high_u8(v29);
        v33 = vmovl_u8(*(uint8x8_t *)v30.i8);
        v34 = vmovl_high_u8(v30);
        *v25 = vaddhn_high_s16(vaddhn_s16(vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmull_lane_u16(*(uint16x4_t *)v31.i8, a7, 0), 8uLL), (int32x4_t)vmull_high_lane_u16(v31, a7, 0), 8uLL), v12), vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmull_lane_u16(*(uint16x4_t *)v32.i8, a7, 0), 8uLL), (int32x4_t)vmull_high_lane_u16(v32, a7, 0), 8uLL), v12);
        v25[1] = vaddhn_high_s16(vaddhn_s16(vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmull_lane_u16(*(uint16x4_t *)v33.i8, a7, 0), 8uLL), (int32x4_t)vmull_high_lane_u16(v33, a7, 0), 8uLL), v12), vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmull_lane_u16(*(uint16x4_t *)v34.i8, a7, 0), 8uLL), (int32x4_t)vmull_high_lane_u16(v34, a7, 0), 8uLL), v12);
        v25 += 2;
      }
      v35 = v22 & 0xF;
      if ((v22 & 0xF) != 0)
      {
        do
        {
          v36 = (int32x2_t)v23->u8[0];
          v37 = (int32x2_t)v23->u8[1];
          v23 = (uint8x16_t *)((char *)v23 + 2);
          v25->i8[0] = vaddq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)(unint64_t)vmul_s32(v36, *(int32x2_t *)&a7), 8uLL), *(int32x4_t *)&v12).i8[1];
          v25->i8[1] = vaddq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)(unint64_t)vmul_s32(v37, *(int32x2_t *)&a7), 8uLL), *(int32x4_t *)&v12).i8[1];
          v25 = (int8x16_t *)((char *)v25 + 2);
          --v35;
        }
        while (v35);
      }
      v23 = (uint8x16_t *)((char *)v23 + v24);
      v25 = (int8x16_t *)((char *)v25 + v26);
    }
  }
  return result;
}

uint64_t vt_Has_420f_420v_arm()
{
  return 1;
}

uint64_t vt_Copy_BGRA_yuvs_arm(uint64_t a1, uint64_t a2, _QWORD *a3, unsigned __int8 **a4, _QWORD *a5, char **a6, uint64_t a7, int32x2_t a8, double a9, int16x8_t a10, double a11, int16x4_t a12)
{
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  char *v15;
  __int32 *v16;
  int16x8_t v17;
  int16x4_t v18;
  uint64_t i;
  const char *v20;
  int8x8_t v21;
  int8x8_t v22;
  uint64_t j;
  unsigned __int8 *v24;
  unsigned __int16 v25;
  __int16 v26;
  int16x8_t v27;
  int16x8_t v28;
  int32x4_t v29;
  int8x8x4_t v31;
  int8x8x4_t v32;
  int8x8x4_t v33;

  if (a2)
  {
    v12 = *a3 - 4 * a1;
    v13 = *a4;
    v14 = *a5 - 2 * a1;
    v15 = *a6;
    v16 = (__int32 *)(a7 + 4);
    a8.i32[1] = *v16;
    *(int32x2_t *)v17.i8 = vshl_n_s32(a8, 1uLL);
    v17.i32[0] = *--v16;
    v16 += 2;
    v17.i16[4] = *(_WORD *)v16;
    v16 = (__int32 *)((char *)v16 + 2);
    v17.i16[5] = *(_WORD *)v16;
    v16 = (__int32 *)((char *)v16 + 2);
    v17.i16[6] = *(_WORD *)v16;
    v16 = (__int32 *)((char *)v16 + 2);
    v17.i16[7] = *(_WORD *)v16;
    v16 = (__int32 *)((char *)v16 + 2);
    v18.i16[0] = *(_WORD *)v16;
    v16 = (__int32 *)((char *)v16 + 2);
    v18.i16[1] = *(_WORD *)v16;
    v18.i32[1] = *(__int32 *)((char *)v16 + 2);
    do
    {
      for (i = a1 >> 4; i; v15 += 32)
      {
        v31 = vld4_s8((const char *)v13);
        v20 = (const char *)(v13 + 32);
        v32 = vld4_s8(v20);
        v13 = (unsigned __int8 *)(v20 + 32);
        a10 = (int16x8_t)vmovl_u8((uint8x8_t)v31.val[0]);
        *(uint16x8_t *)v31.val[1].i8 = vmovl_u8((uint8x8_t)v31.val[1]);
        *(uint16x8_t *)v31.val[2].i8 = vmovl_u8((uint8x8_t)v31.val[2]);
        *(uint16x8_t *)v32.val[0].i8 = vmovl_u8((uint8x8_t)v32.val[0]);
        *(uint16x8_t *)v32.val[1].i8 = vmovl_u8((uint8x8_t)v32.val[1]);
        *(uint16x8_t *)v32.val[2].i8 = vmovl_u8((uint8x8_t)v32.val[2]);
        v21 = vmovn_s16(vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vdupq_lane_s32(*(int32x2_t *)v17.i8, 0), *(int16x4_t *)a10.i8, v17, 6), (int16x4_t)v31.val[1], v17, 5), (int16x4_t)v31.val[2], v17, 4), 0xFuLL), vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vdupq_lane_s32(*(int32x2_t *)v17.i8, 0), a10, v17, 6), *(int16x8_t *)v31.val[1].i8, v17, 5), *(int16x8_t *)v31.val[2].i8,
                    v17,
                    4),
                  0xFuLL));
        v22 = vmovn_s16(vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vdupq_lane_s32(*(int32x2_t *)v17.i8, 0), (int16x4_t)v32.val[0], v17, 6), (int16x4_t)v32.val[1], v17, 5), (int16x4_t)v32.val[2], v17, 4), 0xFuLL), vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vdupq_lane_s32(*(int32x2_t *)v17.i8, 0), *(int16x8_t *)v32.val[0].i8, v17, 6), *(int16x8_t *)v32.val[1].i8, v17, 5), *(int16x8_t *)v32.val[2].i8,
                    v17,
                    4),
                  0xFuLL));
        v33.val[0] = vuzp1_s8(v21, v22);
        v33.val[2] = vuzp2_s8(v21, v22);
        a10.i64[0] = vpaddq_s16(a10, a10).u64[0];
        v32.val[0] = (int8x8_t)vpaddq_s16(*(int16x8_t *)v32.val[0].i8, *(int16x8_t *)v32.val[0].i8).u64[0];
        v31.val[1] = (int8x8_t)vpaddq_s16(*(int16x8_t *)v31.val[1].i8, *(int16x8_t *)v31.val[1].i8).u64[0];
        v32.val[1] = (int8x8_t)vpaddq_s16(*(int16x8_t *)v32.val[1].i8, *(int16x8_t *)v32.val[1].i8).u64[0];
        a12 = (int16x4_t)vpaddq_s16(*(int16x8_t *)v31.val[2].i8, *(int16x8_t *)v31.val[2].i8).u64[0];
        v32.val[2] = (int8x8_t)vpaddq_s16(*(int16x8_t *)v32.val[2].i8, *(int16x8_t *)v32.val[2].i8).u64[0];
        v33.val[1] = vmovn_s16(vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vdupq_lane_s32(*(int32x2_t *)v17.i8, 1), *(int16x4_t *)a10.i8, v18, 1), (int16x4_t)v31.val[1], v18, 0), a12, v17, 7), 0x10uLL), vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vdupq_lane_s32(*(int32x2_t *)v17.i8, 1), (int16x4_t)v32.val[0], v18, 1), (int16x4_t)v32.val[1], v18, 0), (int16x4_t)v32.val[2],
                           v17,
                           7),
                         0x10uLL));
        v33.val[3] = vmovn_s16(vshrn_high_n_s32(vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vdupq_lane_s32(*(int32x2_t *)v17.i8, 1), *(int16x4_t *)a10.i8, v18, 3), (int16x4_t)v31.val[1], v18, 2), a12, v18, 1), 0x10uLL), vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vdupq_lane_s32(*(int32x2_t *)v17.i8, 1), (int16x4_t)v32.val[0], v18, 3), (int16x4_t)v32.val[1], v18, 2), (int16x4_t)v32.val[2],
                           v18,
                           1),
                         0x10uLL));
        --i;
        vst4_s8(v15, v33);
      }
      for (j = (a1 >> 1) & 7; j; v15 += 4)
      {
        a10.i8[0] = *v13;
        LOBYTE(v25) = v13[1];
        a12.i8[0] = v13[2];
        LOBYTE(v26) = v13[3];
        v24 = v13 + 4;
        a10.i8[1] = *v24;
        HIBYTE(v25) = v24[1];
        a12.i8[1] = v24[2];
        HIBYTE(v26) = v24[3];
        v13 = v24 + 4;
        a10.i16[2] = v25;
        a12.i16[2] = v26;
        v27 = (int16x8_t)vmovl_u8(*(uint8x8_t *)a10.i8);
        v28 = (int16x8_t)vmovl_u8((uint8x8_t)a12);
        v29 = vmlal_high_laneq_s16(vmlal_laneq_s16(vdupq_lane_s32(*(int32x2_t *)v17.i8, 0), *(int16x4_t *)v27.i8, v17, 6), v27, v17, 5);
        a10 = (int16x8_t)vpaddlq_s16(v27);
        v29.i64[0] = vmlal_laneq_s16(v29, *(int16x4_t *)v28.i8, v17, 4).u64[0];
        a12 = (int16x4_t)vpaddlq_s16(v28).u64[0];
        *(int32x2_t *)v29.i8 = vshr_n_s32(*(int32x2_t *)v29.i8, 0xFuLL);
        --j;
        *v15 = v29.i8[0];
        v15[1] = vshrn_n_s32(vmlal_laneq_s16(vmlal_high_lane_s16(vmlal_lane_s16(vdupq_lane_s32(*(int32x2_t *)v17.i8, 1), *(int16x4_t *)a10.i8, v18, 1), a10, v18, 0), a12, v17, 7), 0x10uLL).u8[0];
        v15[2] = v29.i8[4];
        v15[3] = vshrn_n_s32(vmlal_lane_s16(vmlal_high_lane_s16(vmlal_lane_s16(vdupq_lane_s32(*(int32x2_t *)v17.i8, 1), *(int16x4_t *)a10.i8, v18, 3), a10, v18, 2), a12, v18, 1), 0x10uLL).u8[0];
      }
      v13 += v12;
      v15 += v14;
      --a2;
    }
    while (a2);
  }
  return 0;
}

uint64_t vt_Has_BGRA_yuvs_arm()
{
  return 1;
}

uint64_t vtPixelTransferSession_InvokeBlitter(unint64_t a1, unint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5, CVPixelBufferRef pixelBuffer, __CVBuffer *a7, uint64_t a8, uint64_t a9)
{
  size_t PlaneCount;
  OSType PixelFormatType;
  uint64_t v19;
  size_t v20;
  OSType v21;
  uint64_t v22;
  _OWORD v24[2];
  _OWORD v25[2];
  _OWORD v26[2];
  _OWORD v27[2];
  _OWORD v28[2];
  _OWORD v29[2];
  _OWORD v30[2];
  _OWORD v31[2];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  memset(v31, 0, sizeof(v31));
  memset(v30, 0, sizeof(v30));
  memset(v29, 0, sizeof(v29));
  memset(v28, 0, sizeof(v28));
  memset(v27, 0, sizeof(v27));
  memset(v26, 0, sizeof(v26));
  memset(v25, 0, sizeof(v25));
  memset(v24, 0, sizeof(v24));
  PlaneCount = 1;
  CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
  CVPixelBufferLockBaseAddress(a7, 0);
  if (CVPixelBufferIsPlanar(pixelBuffer))
    PlaneCount = CVPixelBufferGetPlaneCount(pixelBuffer);
  PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  v19 = vtPixelTransferSession_EnsurePixelFormatPixelBlockInfoArray(PixelFormatType, PlaneCount, a4);
  if (!(_DWORD)v19)
  {
    v19 = vtPixelTransferSession_PrepareBlitterParameters(pixelBuffer, PlaneCount, a8, a4, (uint64_t *)v30, v29, (uint64_t *)v31, (size_t *)v28);
    if (!(_DWORD)v19)
    {
      v20 = CVPixelBufferIsPlanar(a7) ? CVPixelBufferGetPlaneCount(a7) : 1;
      v21 = CVPixelBufferGetPixelFormatType(a7);
      v19 = vtPixelTransferSession_EnsurePixelFormatPixelBlockInfoArray(v21, v20, a5);
      if (!(_DWORD)v19)
      {
        v19 = vtPixelTransferSession_PrepareBlitterParameters(a7, v20, a9, a5, (uint64_t *)v26, v25, (uint64_t *)v27, (size_t *)v24);
        if (!(_DWORD)v19)
        {
          if (a1 | a2)
          {
            if (a2)
              v22 = ((uint64_t (*)(uint64_t, uint64_t, _OWORD *, _OWORD *, _OWORD *, uint64_t, _OWORD *, _OWORD *, _OWORD *))a2)(a3, a8, v30, v31, v28, a9, v26, v27, v24);
            else
              v22 = ((uint64_t (*)(_QWORD, _QWORD, _OWORD *, _OWORD *, _OWORD *, _OWORD *))a1)(*(_QWORD *)(a8 + 16), *(_QWORD *)(a8 + 24), v31, v29, v27, v25);
            v19 = v22;
          }
          else
          {
            v19 = 4294954391;
          }
        }
      }
    }
  }
  CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
  CVPixelBufferUnlockBaseAddress(a7, 0);
  return v19;
}

uint64_t vtPixelTransferSession_PrepareBlitterParameters(__CVBuffer *a1, size_t a2, uint64_t a3, _QWORD *a4, uint64_t *a5, _QWORD *a6, uint64_t *a7, size_t *a8)
{
  OSType PixelFormatType;
  uint64_t result;
  _QWORD *v18;
  _BYTE *BaseAddressOfPlane;
  char *v20;
  char *v21;
  size_t v22;
  size_t v23;
  _BYTE *v24;
  _BYTE *v25;
  void *BaseAddress;
  size_t DataSize;
  size_t v28;
  size_t v29;
  void *v30;
  size_t BytesPerRowOfPlane;
  BOOL v32;
  _QWORD *v33;
  uint64_t v34;

  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  result = vtPixelTransferSession_EnsurePixelFormatPixelBlockInfoArray(PixelFormatType, a2, a4);
  if ((_DWORD)result)
    return result;
  v18 = (_QWORD *)*a4;
  if (!CVPixelBufferIsPlanar(a1))
  {
    BaseAddress = CVPixelBufferGetBaseAddress(a1);
    *a5 = (uint64_t)BaseAddress;
    *a6 = BaseAddress;
    *a7 = CVPixelBufferGetBytesPerRow(a1);
    DataSize = CVPixelBufferGetDataSize(a1);
    *a8 = DataSize;
    if (*a5)
    {
      v28 = DataSize;
      result = 4294954394;
      if (!*a7 || !v28)
        return result;
      goto LABEL_20;
    }
    return 4294954394;
  }
  v34 = a3;
  BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  v20 = (char *)((_BYTE *)CVPixelBufferGetBaseAddress(a1) - BaseAddressOfPlane);
  v21 = &v20[CVPixelBufferGetDataSize(a1)];
  v22 = a2 - 1;
  if (a2 == 1)
  {
    *a8 = (size_t)v21;
    a3 = v34;
    goto LABEL_13;
  }
  v33 = v18;
  v23 = 0;
  do
  {
    v24 = CVPixelBufferGetBaseAddressOfPlane(a1, v23 + 1);
    v25 = CVPixelBufferGetBaseAddressOfPlane(a1, v23);
    a8[v23] = v24 - v25;
    v21 -= v24 - v25;
    ++v23;
  }
  while (v22 != v23);
  a8[v22] = (size_t)v21;
  a3 = v34;
  v18 = v33;
  if (a2)
  {
LABEL_13:
    v29 = 0;
    do
    {
      v30 = CVPixelBufferGetBaseAddressOfPlane(a1, v29);
      a5[v29] = (uint64_t)v30;
      a6[v29] = v30;
      BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, v29);
      a7[v29] = BytesPerRowOfPlane;
      v32 = !a5[v29] || BytesPerRowOfPlane == 0;
      if (v32 || !a8[v29])
        return 4294954394;
    }
    while (a2 != ++v29);
  }
LABEL_20:
  if (*(_QWORD *)(a3 + 40) || *(_QWORD *)(a3 + 32))
    vtPixelTransferSession_PrepareOffsets(a2, a3, v18, a7, a5, a6);
  return 0;
}

uint64_t vt_CopyAvg_yuvs_420v_vec(uint64_t a1, uint64_t a2, uint64_t *a3, const char **a4, uint64_t *a5, uint64_t a6)
{
  vt_Copy_yuvs_420v_avg_arm(*a4, a6, a1, a2, *a3, a5);
  return 0;
}

OSStatus VTCompressionSessionCreate(CFAllocatorRef allocator, int32_t width, int32_t height, CMVideoCodecType codecType, CFDictionaryRef encoderSpecification, CFDictionaryRef sourceImageBufferAttributes, CFAllocatorRef compressedDataAllocator, VTCompressionOutputCallback outputCallback, void *outputCallbackRefCon, VTCompressionSessionRef *compressionSessionOut)
{
  return VTCompressionSessionCreateWithOptions((uint64_t)allocator, *(uint64_t *)&width, *(uint64_t *)&height, codecType, encoderSpecification, sourceImageBufferAttributes, (uint64_t)compressedDataAllocator, (uint64_t)outputCallback, (uint64_t)outputCallbackRefCon, 0, (uint64_t *)compressionSessionOut);
}

void RegisterVTCompressionSession()
{
  sVTCompressionSessionID = _CFRuntimeRegisterClass();
  sVTCompressionSessionPropertyCallbacks = 0;
  unk_1ECED8F80 = VTCompressionSessionCopySupportedPropertyDictionary;
  qword_1ECED8F88 = (uint64_t)VTCompressionSessionSetProperty;
  unk_1ECED8F90 = VTCompressionSessionCopyProperty;
  qword_1ECED8F98 = (uint64_t)VTCompressionSessionSetProperties;
  unk_1ECED8FA0 = VTCompressionSessionCopySerializableProperties;
  VTSessionRegisterCallbacksForTypeID(&sVTCompressionSessionPropertyCallbacks, (const void *)sVTCompressionSessionID);
}

void vtCompressionSessionInit(uint64_t a1)
{
  bzero((void *)(a1 + 16), 0x368uLL);
}

uint64_t VTEncoderSessionSetPixelBufferAttributes(uint64_t *a1, const void *a2)
{
  uint64_t v2;
  const void *v4;

  if (!a1)
    return FigSignalErrorAt();
  v2 = *a1;
  if (!*a1 || *(_DWORD *)(v2 + 16) == 2)
    return FigSignalErrorAt();
  MEMORY[0x1940280C4](*(_QWORD *)(v2 + 464));
  if (a2)
    CFRetain(a2);
  v4 = *(const void **)(v2 + 472);
  if (v4)
    CFRelease(v4);
  *(_QWORD *)(v2 + 472) = a2;
  ++*(_DWORD *)(v2 + 480);
  MEMORY[0x1940280D0](*(_QWORD *)(v2 + 464));
  return 0;
}

OSStatus VTSessionSetProperties(VTSessionRef session, CFDictionaryRef propertyDictionary)
{
  const void *v4;
  uint64_t (**CallbacksWithTypeID)(VTSessionRef, CFDictionaryRef);
  uint64_t (**v6)(VTSessionRef, CFDictionaryRef);
  CFTypeID v7;

  if (session
    && (v4 = (const void *)CFGetTypeID(session),
        CallbacksWithTypeID = (uint64_t (**)(VTSessionRef, CFDictionaryRef))VTSessionGetCallbacksWithTypeID(v4),
        propertyDictionary)
    && (v6 = CallbacksWithTypeID) != 0
    && (v7 = CFGetTypeID(propertyDictionary), v7 == CFDictionaryGetTypeID()))
  {
    return v6[4](session, propertyDictionary);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t VTCompressionSessionSetProperties(uint64_t a1, CFDictionaryRef theDict)
{
  uint64_t v4;
  int v6;
  int v7;
  const __CFDictionary *v8;
  const __CFDictionary *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, char *);
  int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, const __CFDictionary *);
  void (__cdecl *v16)(const void *, const void *, void *);
  uint64_t *v17;
  const __CFDictionary *v18;
  const void *Value;
  const void *v20;
  const __CFNumber *v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 context;
  __int128 v26;

  v23 = a1;
  v24 = 0;
  if (!a1 || *(_DWORD *)(a1 + 16) == 2)
  {
    LODWORD(v24) = FigSignalErrorAt();
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4)
      return VTCompressionSessionRemote_SetProperties(v4, theDict);
    if (theDict)
    {
      context = 0u;
      v26 = 0u;
      v6 = vtCompressionSessionCopyPropertiesHandledByVideoToolbox((CFTypeRef *)&context);
      if (v6)
      {
        v7 = v6;
      }
      else
      {
        v10 = *(_QWORD *)(a1 + 432);
        v11 = *(uint64_t (**)(uint64_t, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
        if (!v11 || ((v12 = v11(v10, (char *)&context + 8), v12 != -12782) ? (v13 = v12 == 0) : (v13 = 1), v13))
        {
          CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)vtCompressionSessionAddPropertyToPartition, &context);
          v7 = 0;
          v9 = (const __CFDictionary *)*((_QWORD *)&v26 + 1);
          v8 = (const __CFDictionary *)v26;
          goto LABEL_16;
        }
        v7 = v12;
        FigSignalErrorAt();
      }
      v8 = 0;
      v9 = 0;
LABEL_16:
      if ((_QWORD)context)
        CFRelease((CFTypeRef)context);
      if (*((_QWORD *)&context + 1))
        CFRelease(*((CFTypeRef *)&context + 1));
      LODWORD(v24) = v7;
      if (!v7)
      {
        if (v8)
          CFDictionaryApplyFunction(v8, (CFDictionaryApplierFunction)vtCompressionSessionSetOneProperty, &v23);
        if (v9)
        {
          v14 = *(_QWORD *)(a1 + 432);
          v15 = *(uint64_t (**)(uint64_t, const __CFDictionary *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                          + 40);
          if (v15 && (LODWORD(v24) = v15(v14, v9), (_DWORD)v24 != -12782))
          {
            if (!*(_BYTE *)(a1 + 794) && *(_BYTE *)(a1 + 795))
              CFDictionaryApplyFunction(v9, (CFDictionaryApplierFunction)vtCompressionSessionValidateOneProperty, &v23);
            if (CFDictionaryContainsKey(v9, CFSTR("ProfileLevel")))
            {
              Value = CFDictionaryGetValue(v9, CFSTR("ProfileLevel"));
              v20 = *(const void **)(a1 + 560);
              if (v20 != Value)
              {
                *(_QWORD *)(a1 + 560) = Value;
                if (Value)
                  CFRetain(Value);
                if (v20)
                  CFRelease(v20);
              }
            }
            if (CFDictionaryContainsKey(v9, CFSTR("OutputBitDepth")))
            {
              v21 = (const __CFNumber *)CFDictionaryGetValue(v9, CFSTR("OutputBitDepth"));
              v22 = (_DWORD *)(a1 + 568);
              if (v21)
                CFNumberGetValue(v21, kCFNumberSInt32Type, v22);
              else
                *v22 = 0;
            }
            FigCFDictionaryGetFloatIfPresent();
            v16 = (void (__cdecl *)(const void *, const void *, void *))vtCoreAnalyticsSaveUserConfiguredCompressionProperty;
            v18 = v9;
            v17 = (uint64_t *)a1;
          }
          else
          {
            LODWORD(v24) = 0;
            v16 = (void (__cdecl *)(const void *, const void *, void *))vtCompressionSessionSetOneProperty;
            v17 = &v23;
            v18 = v9;
          }
          CFDictionaryApplyFunction(v18, v16, v17);
        }
      }
      if (v8)
        CFRelease(v8);
      if (v9)
        CFRelease(v9);
    }
  }
  return v24;
}

OSStatus VTCompressionSessionEncodeFrame(VTCompressionSessionRef session, CVImageBufferRef imageBuffer, CMTime *presentationTimeStamp, CMTime *duration, CFDictionaryRef frameProperties, void *sourceFrameRefcon, VTEncodeInfoFlags *infoFlagsOut)
{
  uint64_t v14;
  __int128 v16;
  CMTimeEpoch v17;
  __int128 v18;
  CMTimeEpoch epoch;

  if (!session || !imageBuffer || *((_DWORD *)session + 4))
    return FigSignalErrorAt();
  if (!*((_BYTE *)session + 529))
    FigPowerReduceUtilitySFI();
  v14 = *((_QWORD *)session + 3);
  if (v14)
  {
    v18 = *(_OWORD *)&presentationTimeStamp->value;
    epoch = presentationTimeStamp->epoch;
    v16 = *(_OWORD *)&duration->value;
    v17 = duration->epoch;
    return VTCompressionSessionRemote_EncodeFrame(v14, (uint64_t)imageBuffer, 0, (uint64_t)&v18, &v16, (uint64_t)frameProperties, (uint64_t)sourceFrameRefcon, infoFlagsOut);
  }
  if (!*((_QWORD *)session + 10))
    return FigSignalErrorAt();
  v18 = *(_OWORD *)&presentationTimeStamp->value;
  epoch = presentationTimeStamp->epoch;
  v16 = *(_OWORD *)&duration->value;
  v17 = duration->epoch;
  return vtCompressionSessionEncodeFrameCommon((uint64_t)session, imageBuffer, 0, (uint64_t)&v18, &v16, frameProperties, 0, (uint64_t)sourceFrameRefcon, infoFlagsOut);
}

void vtCompressionSessionConfirmSpatialAndColorProperties(uint64_t a1)
{
  _BOOL4 IsPropertyHandledByVideoEncoder;
  _QWORD *v3;
  uint64_t v4;
  unsigned int (*v5)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  int v6;
  uint64_t v7;
  unsigned int (*v8)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  CFTypeRef v9;
  CFTypeRef v10;
  uint64_t v11;
  unsigned int (*v12)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  CFTypeRef v13;
  CFTypeRef v14;
  uint64_t v15;
  unsigned int (*v16)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  CFTypeRef v17;
  CFTypeRef v18;
  uint64_t v19;
  unsigned int (*v20)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  CFTypeRef v21;
  CFTypeRef v22;
  uint64_t v23;
  unsigned int (*v24)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  CFTypeRef v25;
  CFTypeRef v26;
  uint64_t v27;
  unsigned int (*v28)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  const void *v29;
  const void *v30;
  NSObject *v31;
  const void *v32;
  NSObject *v33;
  uint64_t v34;
  unsigned int (*v35)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v36;
  unsigned int (*v37)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v38;
  unsigned int (*v39)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v40;
  unsigned int (*v41)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v42;
  unsigned int (*v43)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  CFTypeRef v44;
  CFTypeRef v45;
  int v46;
  const void *v47;
  CFTypeRef v48;
  CFTypeRef v49;
  CFTypeRef v50;
  CFTypeRef v51;
  CFTypeRef v52;
  CFTypeRef v53;
  int v54;
  const void *v55;
  CFTypeRef v56;
  CFTypeRef v57;
  int v58;
  const void *v59;
  CFTypeRef v60;
  CFTypeRef v61;
  int v62;
  const void *v63;
  CFTypeRef v64;
  CFTypeRef v65;
  int v66;
  const void *v67;
  CFTypeRef v68;
  CFTypeRef v69;
  CFTypeRef v70;
  CFTypeRef v71;
  CFTypeRef v72;
  CFTypeRef v73;
  CFTypeRef v74;
  CFTypeRef v75;
  CFTypeRef cf;
  CFTypeRef cf1;
  CFTypeRef v78;
  CFTypeRef v79;

  v78 = 0;
  v79 = 0;
  cf = 0;
  cf1 = 0;
  v74 = 0;
  v75 = 0;
  v72 = 0;
  v73 = 0;
  v70 = 0;
  v71 = 0;
  v68 = 0;
  v69 = 0;
  IsPropertyHandledByVideoEncoder = vtCompressionSessionIsPropertyHandledByVideoEncoder(a1, CFSTR("PixelAspectRatio"));
  v3 = (_QWORD *)MEMORY[0x1E0C9AE00];
  if (!IsPropertyHandledByVideoEncoder)
    goto LABEL_4;
  v4 = *(_QWORD *)(a1 + 432);
  v5 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
  if (!v5)
    goto LABEL_4;
  if (v5(v4, CFSTR("PixelAspectRatio"), *v3, &v79))
    goto LABEL_4;
  v48 = v79;
  v49 = *(CFTypeRef *)(a1 + 136);
  if (v79 == v49)
    goto LABEL_4;
  if (!v79 || !v49)
    goto LABEL_140;
  if (CFEqual(v79, *(CFTypeRef *)(a1 + 136)))
  {
LABEL_4:
    v6 = 0;
    goto LABEL_5;
  }
  v49 = *(CFTypeRef *)(a1 + 136);
  v48 = v79;
LABEL_140:
  *(_QWORD *)(a1 + 136) = v48;
  if (v48)
    CFRetain(v48);
  if (v49)
    CFRelease(v49);
  v6 = 1;
LABEL_5:
  if (vtCompressionSessionIsPropertyHandledByVideoEncoder(a1, CFSTR("CleanAperture")))
  {
    v7 = *(_QWORD *)(a1 + 432);
    v8 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
    if (v8)
    {
      if (!v8(v7, CFSTR("CleanAperture"), *v3, &v78))
      {
        v9 = v78;
        v10 = *(CFTypeRef *)(a1 + 144);
        if (v78 != v10)
        {
          if (v78 && v10)
          {
            if (CFEqual(v78, *(CFTypeRef *)(a1 + 144)))
              goto LABEL_18;
            v10 = *(CFTypeRef *)(a1 + 144);
            v9 = v78;
          }
          *(_QWORD *)(a1 + 144) = v9;
          if (v9)
            CFRetain(v9);
          if (v10)
            CFRelease(v10);
          v6 = 1;
        }
      }
    }
  }
LABEL_18:
  if (vtCompressionSessionIsPropertyHandledByVideoEncoder(a1, CFSTR("FieldCount")))
  {
    v11 = *(_QWORD *)(a1 + 432);
    v12 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 48);
    if (v12)
    {
      if (!v12(v11, CFSTR("FieldCount"), *v3, &cf1))
      {
        v13 = cf1;
        v14 = *(CFTypeRef *)(a1 + 152);
        if (cf1 != v14)
        {
          if (cf1 && v14)
          {
            if (CFEqual(cf1, *(CFTypeRef *)(a1 + 152)))
              goto LABEL_31;
            v14 = *(CFTypeRef *)(a1 + 152);
            v13 = cf1;
          }
          *(_QWORD *)(a1 + 152) = v13;
          if (v13)
            CFRetain(v13);
          if (v14)
            CFRelease(v14);
          v6 = 1;
        }
      }
    }
  }
LABEL_31:
  if (vtCompressionSessionIsPropertyHandledByVideoEncoder(a1, CFSTR("FieldDetail")))
  {
    v15 = *(_QWORD *)(a1 + 432);
    v16 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 48);
    if (v16)
    {
      if (!v16(v15, CFSTR("FieldDetail"), *v3, &cf))
      {
        v17 = cf;
        v18 = *(CFTypeRef *)(a1 + 160);
        if (cf != v18)
        {
          if (cf && v18)
          {
            if (CFEqual(cf, *(CFTypeRef *)(a1 + 160)))
              goto LABEL_44;
            v18 = *(CFTypeRef *)(a1 + 160);
            v17 = cf;
          }
          *(_QWORD *)(a1 + 160) = v17;
          if (v17)
            CFRetain(v17);
          if (v18)
            CFRelease(v18);
          v6 = 1;
        }
      }
    }
  }
LABEL_44:
  if (!vtCompressionSessionIsIPT(a1))
  {
    if (vtCompressionSessionIsPropertyHandledByVideoEncoder(a1, CFSTR("ColorPrimaries")))
    {
      v34 = *(_QWORD *)(a1 + 432);
      v35 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                            + 48);
      if (v35)
      {
        if (!v35(v34, CFSTR("ColorPrimaries"), *v3, &v75))
        {
          v52 = v75;
          v53 = *(CFTypeRef *)(a1 + 176);
          if (v75 != v53)
          {
            v54 = 0;
            if (v75 && v53)
            {
              v54 = CFEqual(v75, v53);
              v52 = v75;
            }
            if (!v54 && v52)
            {
              v55 = *(const void **)(a1 + 176);
              *(_QWORD *)(a1 + 176) = v52;
              CFRetain(v52);
              if (v55)
                CFRelease(v55);
              v6 = 1;
            }
          }
        }
      }
    }
    if (vtCompressionSessionIsPropertyHandledByVideoEncoder(a1, CFSTR("TransferFunction")))
    {
      v36 = *(_QWORD *)(a1 + 432);
      v37 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                            + 48);
      if (v37)
      {
        if (!v37(v36, CFSTR("TransferFunction"), *v3, &v74))
        {
          v56 = v74;
          v57 = *(CFTypeRef *)(a1 + 184);
          if (v74 != v57)
          {
            v58 = 0;
            if (v74 && v57)
            {
              v58 = CFEqual(v74, v57);
              v56 = v74;
            }
            if (!v58 && v56)
            {
              v59 = *(const void **)(a1 + 184);
              *(_QWORD *)(a1 + 184) = v56;
              CFRetain(v56);
              if (v59)
                CFRelease(v59);
              v6 = 1;
            }
          }
        }
      }
    }
    if (vtCompressionSessionIsPropertyHandledByVideoEncoder(a1, CFSTR("GammaLevel")))
    {
      v38 = *(_QWORD *)(a1 + 432);
      v39 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                            + 48);
      if (v39)
      {
        if (!v39(v38, CFSTR("GammaLevel"), *v3, &v68))
        {
          v60 = v68;
          v61 = *(CFTypeRef *)(a1 + 192);
          if (v68 != v61)
          {
            v62 = 0;
            if (v68 && v61)
            {
              v62 = CFEqual(v68, v61);
              v60 = v68;
            }
            if (!v62 && v60)
            {
              v63 = *(const void **)(a1 + 192);
              *(_QWORD *)(a1 + 192) = v60;
              CFRetain(v60);
              if (v63)
                CFRelease(v63);
              v6 = 1;
            }
          }
        }
      }
    }
    if (vtCompressionSessionIsPropertyHandledByVideoEncoder(a1, CFSTR("YCbCrMatrix")))
    {
      v40 = *(_QWORD *)(a1 + 432);
      v41 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                            + 48);
      if (v41)
      {
        if (!v41(v40, CFSTR("YCbCrMatrix"), *v3, &v73))
        {
          v64 = v73;
          v65 = *(CFTypeRef *)(a1 + 200);
          if (v73 != v65)
          {
            v66 = 0;
            if (v73 && v65)
            {
              v66 = CFEqual(v73, v65);
              v64 = v73;
            }
            if (!v66 && v64)
            {
              v67 = *(const void **)(a1 + 200);
              *(_QWORD *)(a1 + 200) = v64;
              CFRetain(v64);
              if (v67)
                CFRelease(v67);
              v6 = 1;
            }
          }
        }
      }
    }
    if (vtCompressionSessionIsPropertyHandledByVideoEncoder(a1, CFSTR("ICCProfile")))
    {
      v42 = *(_QWORD *)(a1 + 432);
      v43 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                            + 48);
      if (v43)
      {
        if (!v43(v42, CFSTR("ICCProfile"), *v3, &v72))
        {
          v44 = v72;
          v45 = *(CFTypeRef *)(a1 + 208);
          if (v72 != v45)
          {
            v46 = 0;
            if (v72 && v45)
            {
              v46 = CFEqual(v72, v45);
              v44 = v72;
            }
            if (!v46 && v44)
            {
              v47 = *(const void **)(a1 + 208);
              *(_QWORD *)(a1 + 208) = v44;
              CFRetain(v44);
              if (v47)
                CFRelease(v47);
              v6 = 1;
            }
          }
        }
      }
    }
  }
  if (vtCompressionSessionIsPropertyHandledByVideoEncoder(a1, CFSTR("MasteringDisplayColorVolume")))
  {
    v19 = *(_QWORD *)(a1 + 432);
    v20 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 48);
    if (v20)
    {
      if (!v20(v19, CFSTR("MasteringDisplayColorVolume"), *v3, &v71))
      {
        v21 = v71;
        v22 = *(CFTypeRef *)(a1 + 216);
        if (v71 != v22)
        {
          if (v71 && v22)
          {
            if (CFEqual(v71, *(CFTypeRef *)(a1 + 216)))
              goto LABEL_58;
            v22 = *(CFTypeRef *)(a1 + 216);
            v21 = v71;
          }
          *(_QWORD *)(a1 + 216) = v21;
          if (v21)
            CFRetain(v21);
          if (v22)
            CFRelease(v22);
          v6 = 1;
        }
      }
    }
  }
LABEL_58:
  if (vtCompressionSessionIsPropertyHandledByVideoEncoder(a1, CFSTR("ContentLightLevelInfo")))
  {
    v23 = *(_QWORD *)(a1 + 432);
    v24 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 48);
    if (v24)
    {
      if (!v24(v23, CFSTR("ContentLightLevelInfo"), *v3, &v70))
      {
        v25 = v70;
        v26 = *(CFTypeRef *)(a1 + 224);
        if (v70 != v26)
        {
          if (!v70 || !v26)
            goto LABEL_66;
          if (!CFEqual(v70, *(CFTypeRef *)(a1 + 224)))
          {
            v26 = *(CFTypeRef *)(a1 + 224);
            v25 = v70;
LABEL_66:
            *(_QWORD *)(a1 + 224) = v25;
            if (v25)
              CFRetain(v25);
            if (v26)
              CFRelease(v26);
            v6 = 1;
          }
        }
      }
    }
  }
  if (!vtCompressionSessionIsPropertyHandledByVideoEncoder(a1, CFSTR("AmbientViewingEnvironment")))
    goto LABEL_74;
  v27 = *(_QWORD *)(a1 + 432);
  v28 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
  if (!v28)
    goto LABEL_74;
  if (v28(v27, CFSTR("AmbientViewingEnvironment"), *v3, &v69))
    goto LABEL_74;
  v50 = v69;
  v51 = *(CFTypeRef *)(a1 + 656);
  if (v69 == v51)
    goto LABEL_74;
  if (!v69 || !v51)
    goto LABEL_150;
  if (CFEqual(v69, *(CFTypeRef *)(a1 + 656)))
  {
LABEL_74:
    if (!v6)
      goto LABEL_86;
    goto LABEL_75;
  }
  v51 = *(CFTypeRef *)(a1 + 656);
  v50 = v69;
LABEL_150:
  *(_QWORD *)(a1 + 656) = v50;
  if (v50)
    CFRetain(v50);
  if (v51)
    CFRelease(v51);
LABEL_75:
  dispatch_group_wait(*(dispatch_group_t *)(a1 + 272), 0xFFFFFFFFFFFFFFFFLL);
  v29 = *(const void **)(a1 + 384);
  if (v29)
  {
    CFRelease(v29);
    *(_QWORD *)(a1 + 384) = 0;
  }
  v30 = *(const void **)(a1 + 376);
  if (v30)
  {
    CFRelease(v30);
    *(_QWORD *)(a1 + 376) = 0;
  }
  v31 = *(NSObject **)(a1 + 344);
  if (v31)
  {
    dispatch_release(v31);
    *(_QWORD *)(a1 + 344) = 0;
  }
  *(_QWORD *)(a1 + 352) = 0;
  v32 = *(const void **)(a1 + 504);
  if (v32)
  {
    CFRelease(v32);
    *(_QWORD *)(a1 + 504) = 0;
  }
  v33 = *(NSObject **)(a1 + 312);
  if (v33)
  {
    dispatch_release(v33);
    *(_QWORD *)(a1 + 312) = 0;
  }
  *(_QWORD *)(a1 + 320) = 0;
LABEL_86:
  if (v79)
    CFRelease(v79);
  if (v78)
    CFRelease(v78);
  if (cf1)
    CFRelease(cf1);
  if (cf)
    CFRelease(cf);
  if (v75)
    CFRelease(v75);
  if (v74)
    CFRelease(v74);
  if (v68)
    CFRelease(v68);
  if (v73)
    CFRelease(v73);
  if (v72)
    CFRelease(v72);
  if (v71)
    CFRelease(v71);
  if (v70)
    CFRelease(v70);
  if (v69)
    CFRelease(v69);
  *(_BYTE *)(a1 + 256) = 0;
}

BOOL vtCompressionSessionIsPropertyHandledByVideoEncoder(uint64_t a1, const void *a2)
{
  uint64_t v3;
  void (*v4)(uint64_t, CFDictionaryRef *);
  _BOOL8 v5;
  CFDictionaryRef theDict;

  theDict = 0;
  v3 = *(_QWORD *)(a1 + 432);
  v4 = *(void (**)(uint64_t, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (!v4)
    return 0;
  v4(v3, &theDict);
  if (!theDict)
    return 0;
  v5 = CFDictionaryContainsKey(theDict, a2) != 0;
  if (theDict)
    CFRelease(theDict);
  return v5;
}

_QWORD *vtCloneCompressionFrameTrackingInfo(const __CFAllocator *a1, uint64_t a2)
{
  _QWORD *v3;
  CFTypeRef v4;

  v3 = CFAllocatorAllocate(a1, 40, 0);
  v4 = *(CFTypeRef *)(a2 + 8);
  *v3 = *(_QWORD *)a2;
  if (v4)
    v4 = CFRetain(v4);
  v3[1] = v4;
  v3[2] = _Block_copy(*(const void **)(a2 + 16));
  return v3;
}

uint64_t VTEncoderSessionCreateVideoFormatDescription(uint64_t *a1, CMVideoCodecType a2, unsigned int a3, int a4, const __CFDictionary *a5, CMVideoFormatDescriptionRef *a6)
{
  uint64_t v6;
  const __CFDictionary *v8;
  const __CFDictionary *v12;
  uint64_t v13;
  const __CFData *v14;
  const void *v15;
  const __CFDictionary *v16;
  uint64_t Count;
  CFIndex v18;
  const __CFAllocator *v19;
  __CFDictionary *MutableCopy;
  uint64_t UpdatedHVCCWithAdditionalHEVCParameterSets;
  const __CFAllocator *v23;
  const void *v24;
  CMVideoFormatDescriptionRef v25;
  __CFDictionary *v26[3];
  void *value;
  CFIndex Length;
  const UInt8 *BytePtr;

  v26[0] = 0;
  if (!a1)
    return FigSignalErrorAt();
  v6 = *a1;
  if (!*a1 || *(_DWORD *)(v6 + 16) == 2)
    return FigSignalErrorAt();
  v8 = a5;
  vtCompressionSessionCopyFallbackVideoFormatDescriptionExtensions(*a1, a5, v26);
  if (*(_BYTE *)(v6 + 676))
  {
    v12 = v26[0];
    v13 = vtCompressionSessionAddDolbyVisionVideoFormatDescriptionExtensions(v6, a3, a4, v26[0]);
    if ((_DWORD)v13)
      goto LABEL_35;
    if (*(_BYTE *)(v6 + 676) == 5)
      a2 = 1685481521;
  }
  if (!*(_BYTE *)(v6 + 641))
  {
    v12 = v26[0];
    goto LABEL_25;
  }
  v12 = v26[0];
  if (!*(_BYTE *)(v6 + 640)
    || *(_BYTE *)(v6 + 642)
    || !v26[0]
    || (value = 0, (v14 = *(const __CFData **)(v6 + 664)) == 0))
  {
LABEL_25:
    if (v12)
      v8 = v12;
    v23 = CFGetAllocator((CFTypeRef)v6);
    v13 = CMVideoFormatDescriptionCreate(v23, a2, a3, a4, v8, a6);
    if (!(_DWORD)v13)
    {
      v24 = *(const void **)(v6 + 32);
      v25 = *a6;
      *(_QWORD *)(v6 + 32) = *a6;
      if (v25)
        CFRetain(v25);
      if (v24)
        CFRelease(v24);
      UpdatedHVCCWithAdditionalHEVCParameterSets = 0;
      if (!v12)
        return UpdatedHVCCWithAdditionalHEVCParameterSets;
      goto LABEL_33;
    }
LABEL_35:
    UpdatedHVCCWithAdditionalHEVCParameterSets = v13;
    if (!v12)
      return UpdatedHVCCWithAdditionalHEVCParameterSets;
    goto LABEL_33;
  }
  v26[1] = 0;
  v26[2] = 0;
  BytePtr = CFDataGetBytePtr(v14);
  Length = CFDataGetLength(*(CFDataRef *)(v6 + 664));
  v15 = (const void *)*MEMORY[0x1E0CA2240];
  v16 = (const __CFDictionary *)CFDictionaryGetValue(v12, (const void *)*MEMORY[0x1E0CA2240]);
  Count = FigCFDictionaryGetCount();
  if (v16)
  {
    v18 = Count;
    v19 = CFGetAllocator((CFTypeRef)v6);
    MutableCopy = CFDictionaryCreateMutableCopy(v19, v18, v16);
    if (CFDictionaryGetValue(MutableCopy, CFSTR("hvcC")))
    {
      CFGetAllocator((CFTypeRef)v6);
      UpdatedHVCCWithAdditionalHEVCParameterSets = FigVideoFormatDescriptionCreateUpdatedHVCCWithAdditionalHEVCParameterSets();
      if (!(_DWORD)UpdatedHVCCWithAdditionalHEVCParameterSets)
      {
        CFDictionarySetValue(MutableCopy, CFSTR("hvcC"), value);
        CFDictionarySetValue(v12, v15, MutableCopy);
      }
      if (MutableCopy)
        goto LABEL_18;
    }
    else
    {
      UpdatedHVCCWithAdditionalHEVCParameterSets = FigSignalErrorAt();
      if (MutableCopy)
LABEL_18:
        CFRelease(MutableCopy);
    }
  }
  else
  {
    UpdatedHVCCWithAdditionalHEVCParameterSets = 0;
  }
  if (value)
    CFRelease(value);
  if (!(_DWORD)UpdatedHVCCWithAdditionalHEVCParameterSets)
    goto LABEL_25;
LABEL_33:
  CFRelease(v12);
  return UpdatedHVCCWithAdditionalHEVCParameterSets;
}

uint64_t VTEncoderSessionEmitEncodedFrame(uint64_t *a1, const void *a2, uint64_t a3, unsigned int a4, opaqueCMSampleBuffer *a5)
{
  uint64_t v5;
  unsigned __int8 *Value;
  int v9;
  uint64_t Info;
  CMSampleBufferRef v11;
  BOOL v12;
  CMItemCount NumSamples;
  opaqueCMSampleBuffer *v14;
  CMSampleBufferRef v15;
  void (*v16)(_QWORD, uint64_t, uint64_t, _QWORD, CMSampleBufferRef);
  uint64_t v18;
  uint64_t v19;
  CFTypeRef cf;
  const __CFData *v21;
  uint64_t v22;
  CMSampleBufferRef sbuf;
  unsigned int v24;

  v24 = a4;
  v22 = 0;
  sbuf = a5;
  cf = 0;
  v21 = 0;
  v19 = 0;
  if (!a1)
    return FigSignalErrorAt();
  v5 = *a1;
  if (!*a1 || *(_DWORD *)(v5 + 16) == 2)
    return FigSignalErrorAt();
  if ((_DWORD)a3)
    sbuf = 0;
  if (*(_BYTE *)(v5 + 794))
  {
    MEMORY[0x1940280C4](*(_QWORD *)(v5 + 104));
    Value = (unsigned __int8 *)CFDictionaryGetValue(*(CFDictionaryRef *)(v5 + 128), a2);
    if (Value)
    {
      v9 = Value[32];
      MEMORY[0x1940280D0](*(_QWORD *)(v5 + 104));
      if (v9)
        VTRateControlSessionBeforeEmitEncodedFrame(*(_QWORD *)(v5 + 800));
    }
    else
    {
      v18 = FigSignalErrorAt();
      MEMORY[0x1940280D0](*(_QWORD *)(v5 + 104));
      if ((_DWORD)v18)
        return v18;
    }
  }
  Info = vtCompressionSessionTrackFrameGetInfo(v5, a2, &v19, &v21, &v22);
  if (!(_DWORD)Info)
  {
    v11 = sbuf;
    if (!sbuf
      || (*MEMORY[0x1E0C9AE50] == *(_QWORD *)(v5 + 576) ? (v12 = v21 == 0) : (v12 = 1),
          v12 || !*(_BYTE *)(v5 + 676) || (NumSamples = CMSampleBufferGetNumSamples(sbuf), v11 = sbuf, NumSamples != 1)))
    {
      v14 = 0;
      goto LABEL_21;
    }
    Info = VTHDRMetadataGenerationSessionInsertData(*(_QWORD *)(v5 + 616), sbuf, v21, &cf);
    if (!(_DWORD)Info)
    {
      v14 = (opaqueCMSampleBuffer *)cf;
      v11 = sbuf;
LABEL_21:
      if (v14)
        v15 = v14;
      else
        v15 = v11;
      v16 = *(void (**)(_QWORD, uint64_t, uint64_t, _QWORD, CMSampleBufferRef))(v5 + 80);
      if (v16)
      {
        v16(*(_QWORD *)(v5 + 88), v22, a3, v24, v15);
      }
      else if (v19)
      {
        (*(void (**)(void))(v19 + 16))();
      }
      ++*(_DWORD *)(v5 + 828);
      if (cf)
        CFRelease(cf);
      MEMORY[0x1940280C4](*(_QWORD *)(v5 + 104));
      if (CFDictionaryGetValue(*(CFDictionaryRef *)(v5 + 128), a2))
      {
        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v5 + 128), a2);
        v18 = 0;
        --*(_DWORD *)(v5 + 120);
      }
      else
      {
        v18 = FigSignalErrorAt();
      }
      MEMORY[0x1940280D0](*(_QWORD *)(v5 + 104));
      return v18;
    }
  }
  return Info;
}

void vtFreeCompressionFrameTrackingInfo(const __CFAllocator *a1, uint64_t a2)
{
  const void *v4;

  v4 = *(const void **)(a2 + 8);
  if (v4)
    CFRelease(v4);
  _Block_release(*(const void **)(a2 + 16));
  CFAllocatorDeallocate(a1, (void *)a2);
}

OSStatus VTCompressionSessionCompleteFrames(VTCompressionSessionRef session, CMTime *completeUntilPresentationTimeStamp)
{
  uint64_t v3;
  OSStatus v4;
  NSObject *v5;
  NSObject *v6;
  _DWORD *v7;
  CMTime v9;
  _DWORD *v10;

  v10 = 0;
  if (!session || *((_DWORD *)session + 4) == 2)
  {
    v4 = FigSignalErrorAt();
LABEL_10:
    vtCompressionSessionPipelineContextInvalidate((uint64_t *)&v10);
    return v4;
  }
  v3 = *((_QWORD *)session + 3);
  if (!v3)
  {
    v9 = *completeUntilPresentationTimeStamp;
    vtCompressionSessionPipelineCreateContext(session, 0, 0, 0, 0, 0, (__int128 *)&v9.value, MEMORY[0x1E0CA2E18], 0, 0, &v10);
    v5 = *((_QWORD *)session + 34);
    if (v5)
      dispatch_group_wait(v5, 0xFFFFFFFFFFFFFFFFLL);
    v6 = *((_QWORD *)session + 36);
    v7 = v10;
    if (v6)
      dispatch_sync_f(v6, v10, (dispatch_function_t)vtCompressionSessionCompleteFramesWork);
    v4 = v7[28];
    goto LABEL_10;
  }
  v9 = *completeUntilPresentationTimeStamp;
  return VTCompressionSessionRemote_CompleteFrames(v3, (uint64_t)&v9);
}

void VTCompressionSessionInvalidate(VTCompressionSessionRef session)
{
  const void *v2;
  _QWORD *v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  void (*v7)(uint64_t);
  const void *v8;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v10;

  if (session && !*((_DWORD *)session + 4))
  {
    *((_DWORD *)session + 4) = 1;
    v2 = (const void *)*((_QWORD *)session + 101);
    if (v2)
    {
      CFRelease(v2);
      *((_QWORD *)session + 101) = 0;
    }
    v3 = (_QWORD *)*((_QWORD *)session + 3);
    if (v3)
    {
      VTCompressionSessionRemote_Invalidate(v3);
    }
    else
    {
      if (*((_BYTE *)session + 794))
      {
        v4 = *((_QWORD *)session + 100);
        if (v4)
          VTRateControlSessionCompleteFrames(v4);
      }
      v5 = *((_QWORD *)session + 34);
      if (v5)
        dispatch_group_wait(v5, 0xFFFFFFFFFFFFFFFFLL);
      if (*((_QWORD *)session + 54))
      {
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterRemoveWeakListener();
        v6 = *((_QWORD *)session + 54);
        if (v6)
        {
          v7 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
          if (v7)
            v7(v6);
        }
      }
      VTPixelTransferSessionInvalidate(*((VTPixelTransferSessionRef *)session + 63));
      VTPixelTransferSessionInvalidate(*((VTPixelTransferSessionRef *)session + 47));
      v8 = (const void *)*((_QWORD *)session + 100);
      if (v8)
      {
        CFRelease(v8);
        *((_QWORD *)session + 100) = 0;
      }
      if (*((_DWORD *)session + 134))
      {
        Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (Mutable)
        {
          v10 = Mutable;
          if (*((_QWORD *)session + 4))
            FigVideoFormatDescriptionContainsHDR();
          CFAbsoluteTimeGetCurrent();
          if (*((_QWORD *)session + 102))
            FigCFDictionarySetValue();
          FigCFDictionarySetInt32();
          FigCFDictionarySetInt32();
          if (*((_DWORD *)session + 208))
            FigCFDictionarySetInt32();
          FigCFDictionarySetInt32();
          FigCFDictionarySetInt32();
          FigCFDictionarySetInt32();
          FigCFDictionarySetInt32();
          FigCFDictionarySetInt32();
          FigCFDictionarySetInt32();
          FigPlaybackLogPowerEvent();
          CFRelease(v10);
        }
      }
    }
    *((_DWORD *)session + 4) = 2;
  }
}

void vtCompressionSessionFinalize(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  const void *v28;
  const void *v29;
  const void *v30;
  const void *v31;
  const void *v32;
  const void *v33;
  const void *v34;
  const void *v35;
  const void *v36;
  const void *v37;
  const void *v38;
  const void *v39;
  const void *v40;
  NSObject *v41;
  NSObject *v42;
  NSObject *v43;
  NSObject *v44;
  const void *v45;
  const void *v46;
  const void *v47;
  const void *v48;
  const void *v49;
  const void *v50;
  const void *v51;
  const void *v52;
  const void *v53;

  VTCompressionSessionInvalidate((VTCompressionSessionRef)a1);
  v2 = *(const void **)(a1 + 432);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 432) = 0;
  }
  v3 = *(const void **)(a1 + 472);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 472) = 0;
  }
  v4 = *(const void **)(a1 + 488);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 488) = 0;
  }
  v5 = *(const void **)(a1 + 496);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(a1 + 496) = 0;
  }
  v6 = *(const void **)(a1 + 376);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(a1 + 376) = 0;
  }
  v7 = *(const void **)(a1 + 504);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(a1 + 504) = 0;
  }
  v8 = *(const void **)(a1 + 520);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(a1 + 520) = 0;
  }
  FigSimpleMutexDestroy();
  *(_QWORD *)(a1 + 464) = 0;
  v9 = *(const void **)(a1 + 128);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(a1 + 128) = 0;
  }
  FigSimpleMutexDestroy();
  *(_QWORD *)(a1 + 104) = 0;
  v10 = *(const void **)(a1 + 136);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(a1 + 136) = 0;
  }
  v11 = *(const void **)(a1 + 144);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(a1 + 144) = 0;
  }
  v12 = *(const void **)(a1 + 152);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(a1 + 152) = 0;
  }
  v13 = *(const void **)(a1 + 160);
  if (v13)
  {
    CFRelease(v13);
    *(_QWORD *)(a1 + 160) = 0;
  }
  v14 = *(const void **)(a1 + 168);
  if (v14)
  {
    CFRelease(v14);
    *(_QWORD *)(a1 + 168) = 0;
  }
  v15 = *(const void **)(a1 + 176);
  if (v15)
  {
    CFRelease(v15);
    *(_QWORD *)(a1 + 176) = 0;
  }
  v16 = *(const void **)(a1 + 184);
  if (v16)
  {
    CFRelease(v16);
    *(_QWORD *)(a1 + 184) = 0;
  }
  v17 = *(const void **)(a1 + 192);
  if (v17)
  {
    CFRelease(v17);
    *(_QWORD *)(a1 + 192) = 0;
  }
  v18 = *(const void **)(a1 + 200);
  if (v18)
  {
    CFRelease(v18);
    *(_QWORD *)(a1 + 200) = 0;
  }
  v19 = *(const void **)(a1 + 208);
  if (v19)
  {
    CFRelease(v19);
    *(_QWORD *)(a1 + 208) = 0;
  }
  v20 = *(const void **)(a1 + 216);
  if (v20)
  {
    CFRelease(v20);
    *(_QWORD *)(a1 + 216) = 0;
  }
  v21 = *(const void **)(a1 + 224);
  if (v21)
  {
    CFRelease(v21);
    *(_QWORD *)(a1 + 224) = 0;
  }
  v22 = *(const void **)(a1 + 384);
  if (v22)
  {
    CFRelease(v22);
    *(_QWORD *)(a1 + 384) = 0;
  }
  v23 = *(const void **)(a1 + 232);
  if (v23)
  {
    CFRelease(v23);
    *(_QWORD *)(a1 + 232) = 0;
  }
  v24 = *(const void **)(a1 + 240);
  if (v24)
  {
    CFRelease(v24);
    *(_QWORD *)(a1 + 240) = 0;
  }
  v25 = *(const void **)(a1 + 248);
  if (v25)
  {
    CFRelease(v25);
    *(_QWORD *)(a1 + 248) = 0;
  }
  v26 = *(const void **)(a1 + 616);
  if (v26)
  {
    CFRelease(v26);
    *(_QWORD *)(a1 + 616) = 0;
  }
  v27 = *(const void **)(a1 + 632);
  if (v27)
  {
    CFRelease(v27);
    *(_QWORD *)(a1 + 632) = 0;
  }
  v28 = *(const void **)(a1 + 656);
  if (v28)
  {
    CFRelease(v28);
    *(_QWORD *)(a1 + 656) = 0;
  }
  v29 = *(const void **)(a1 + 664);
  if (v29)
  {
    CFRelease(v29);
    *(_QWORD *)(a1 + 664) = 0;
  }
  v30 = *(const void **)(a1 + 560);
  if (v30)
  {
    CFRelease(v30);
    *(_QWORD *)(a1 + 560) = 0;
  }
  v31 = *(const void **)(a1 + 624);
  if (v31)
  {
    CFRelease(v31);
    *(_QWORD *)(a1 + 624) = 0;
  }
  v32 = *(const void **)(a1 + 696);
  if (v32)
  {
    CFRelease(v32);
    *(_QWORD *)(a1 + 696) = 0;
  }
  v33 = *(const void **)(a1 + 704);
  if (v33)
  {
    CFRelease(v33);
    *(_QWORD *)(a1 + 704) = 0;
  }
  v34 = *(const void **)(a1 + 712);
  if (v34)
  {
    CFRelease(v34);
    *(_QWORD *)(a1 + 712) = 0;
  }
  v35 = *(const void **)(a1 + 728);
  if (v35)
  {
    CFRelease(v35);
    *(_QWORD *)(a1 + 728) = 0;
  }
  v36 = *(const void **)(a1 + 264);
  if (v36)
  {
    CFRelease(v36);
    *(_QWORD *)(a1 + 264) = 0;
  }
  v37 = *(const void **)(a1 + 32);
  if (v37)
  {
    CFRelease(v37);
    *(_QWORD *)(a1 + 32) = 0;
  }
  v38 = *(const void **)(a1 + 56);
  if (v38)
  {
    CFRelease(v38);
    *(_QWORD *)(a1 + 56) = 0;
  }
  v39 = *(const void **)(a1 + 64);
  if (v39)
  {
    CFRelease(v39);
    *(_QWORD *)(a1 + 64) = 0;
  }
  v40 = *(const void **)(a1 + 72);
  if (v40)
  {
    CFRelease(v40);
    *(_QWORD *)(a1 + 72) = 0;
  }
  VTEncoderSessionTeardown(a1 + 392);
  FigSemaphoreDestroy();
  *(_QWORD *)(a1 + 304) = 0;
  FigSemaphoreDestroy();
  *(_QWORD *)(a1 + 336) = 0;
  FigSemaphoreDestroy();
  *(_QWORD *)(a1 + 360) = 0;
  v41 = *(NSObject **)(a1 + 312);
  if (v41)
  {
    dispatch_release(v41);
    *(_QWORD *)(a1 + 312) = 0;
  }
  v42 = *(NSObject **)(a1 + 288);
  if (v42)
  {
    dispatch_release(v42);
    *(_QWORD *)(a1 + 288) = 0;
  }
  v43 = *(NSObject **)(a1 + 344);
  if (v43)
  {
    dispatch_release(v43);
    *(_QWORD *)(a1 + 344) = 0;
  }
  v44 = *(NSObject **)(a1 + 272);
  if (v44)
  {
    dispatch_release(v44);
    *(_QWORD *)(a1 + 272) = 0;
  }
  v45 = *(const void **)(a1 + 456);
  if (v45)
  {
    CFRelease(v45);
    *(_QWORD *)(a1 + 456) = 0;
  }
  free(*(void **)(a1 + 784));
  *(_QWORD *)(a1 + 784) = 0;
  v46 = *(const void **)(a1 + 760);
  if (v46)
  {
    CFRelease(v46);
    *(_QWORD *)(a1 + 760) = 0;
  }
  v47 = *(const void **)(a1 + 24);
  if (v47)
  {
    CFRelease(v47);
    *(_QWORD *)(a1 + 24) = 0;
  }
  v48 = *(const void **)(a1 + 816);
  if (v48)
  {
    CFRelease(v48);
    *(_QWORD *)(a1 + 816) = 0;
  }
  v49 = *(const void **)(a1 + 848);
  if (v49)
  {
    CFRelease(v49);
    *(_QWORD *)(a1 + 848) = 0;
  }
  v50 = *(const void **)(a1 + 856);
  if (v50)
  {
    CFRelease(v50);
    *(_QWORD *)(a1 + 856) = 0;
  }
  v51 = *(const void **)(a1 + 864);
  if (v51)
  {
    CFRelease(v51);
    *(_QWORD *)(a1 + 864) = 0;
  }
  v52 = *(const void **)(a1 + 872);
  if (v52)
  {
    CFRelease(v52);
    *(_QWORD *)(a1 + 872) = 0;
  }
  v53 = *(const void **)(a1 + 880);
  if (v53)
  {
    CFRelease(v53);
    *(_QWORD *)(a1 + 880) = 0;
  }
}

CFTypeRef VTCopyRegistryKeyValueForDeviceIOService(const __CFString *a1, const __CFString *a2)
{
  const char *CStringPtr;
  __CFDictionary *Value;
  CFMutableDictionaryRef Mutable;
  const void *v7;
  CFTypeRef v8;
  char v9;
  io_object_t v10;
  mach_port_t v11;
  const __CFDictionary *v12;
  io_registry_entry_t v14;
  io_iterator_t existing;

  existing = 0;
  CStringPtr = CFStringGetCStringPtr(a1, 0x8000100u);
  MEMORY[0x1940281CC](&gInitializeDeviceGroupAndCacheOnce, vtInitializeDeviceGroupsAndCache);
  MEMORY[0x1940280C4](gVTIORegistryKeyServiceCache_1);
  Value = (__CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)gVTIORegistryKeyServiceCache_0, a1);
  if (Value)
  {
    Mutable = Value;
    CFRetain(Value);
  }
  else
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFDictionaryAddValue((CFMutableDictionaryRef)gVTIORegistryKeyServiceCache_0, a1, Mutable);
    if (!Mutable)
    {
      v10 = 0;
      v8 = 0;
      v9 = 1;
      goto LABEL_10;
    }
  }
  if (CFDictionaryContainsKey(Mutable, a2))
  {
    v7 = CFDictionaryGetValue(Mutable, a2);
    if (v7)
    {
      v8 = CFRetain(v7);
      v9 = 0;
      v10 = 0;
      goto LABEL_10;
    }
    goto LABEL_8;
  }
  v11 = *MEMORY[0x1E0CBBAA8];
  v12 = IOServiceNameMatching(CStringPtr);
  if (IOServiceGetMatchingServices(v11, v12, &existing))
  {
LABEL_8:
    v9 = 0;
    v10 = 0;
LABEL_9:
    v8 = 0;
    goto LABEL_10;
  }
  v14 = IOIteratorNext(existing);
  v10 = v14;
  if (!v14)
  {
    v9 = 0;
    goto LABEL_9;
  }
  v8 = IORegistryEntrySearchCFProperty(v14, "IOService", a2, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1u);
  if (!v8)
  {
    if (*MEMORY[0x1E0C9B0D0])
      v8 = CFRetain((CFTypeRef)*MEMORY[0x1E0C9B0D0]);
    else
      v8 = 0;
  }
  CFDictionaryAddValue(Mutable, a2, v8);
  v9 = 0;
LABEL_10:
  if (existing)
    IOObjectRelease(existing);
  if (v10)
    IOObjectRelease(v10);
  MEMORY[0x1940280D0](gVTIORegistryKeyServiceCache_1);
  if ((v9 & 1) == 0)
    CFRelease(Mutable);
  return v8;
}

uint64_t vtInitializeDeviceGroupsAndCache()
{
  uint64_t result;

  gVTIORegistryKeyServiceCache_0 = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  result = FigSimpleMutexCreate();
  gVTIORegistryKeyServiceCache_1 = result;
  return result;
}

BOOL VTDoesIOServiceSupportRegistryKey(const __CFString *a1, const __CFString *a2)
{
  CFTypeRef v2;
  const void *v3;
  _BOOL8 v4;

  v2 = VTCopyRegistryKeyValueForDeviceIOService(a1, a2);
  if (!v2)
    return 0;
  v3 = v2;
  v4 = FigCFEqual() == 0;
  CFRelease(v3);
  return v4;
}

uint64_t vt_Copy_x422_v210(_BYTE *a1, _OWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, __int128 *a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t MaxLogicalCoreCount;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  NSObject *global_queue;
  _OWORD v27[6];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  if (a1)
  {
    MaxLogicalCoreCount = FigThreadGetMaxLogicalCoreCount();
    v16 = a2[1];
    v27[0] = *a2;
    v27[1] = v16;
    v17 = *a6;
    v18 = a6[1];
    v27[2] = a2[2];
    v27[3] = v17;
    v19 = a6[2];
    v27[4] = v18;
    v27[5] = v19;
    v20 = a4[1];
    v21 = *a3;
    v22 = a3[1];
    v28 = *a4;
    v29 = v21;
    v30 = v20;
    v31 = v22;
    v23 = *a7;
    v32 = *a8;
    v33 = v23;
    v34 = 0;
    BYTE4(v34) = *a1;
    if (a1[1] && (v24 = MaxLogicalCoreCount, MaxLogicalCoreCount >= 2))
    {
      global_queue = dispatch_get_global_queue(0, 0);
      dispatch_apply_f(v24, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_x422_v210_internal);
    }
    else
    {
      vt_Copy_x422_v210_internal((uint64_t)v27);
    }
  }
  return 0;
}

uint64_t vt_Copy_x422_v210_internal(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int16x8_t v24;
  const __int16 *v25;
  const __int16 *v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int32x4_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int8x16_t v41;
  int8x16_t v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int16x8x3_t v52;
  int16x8x3_t v53;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 88);
  v50 = *(_QWORD *)(a1 + 112);
  v51 = *(_QWORD *)(a1 + 96);
  v4 = *(_QWORD *)(a1 + 128);
  v47 = *(_QWORD *)(a1 + 120);
  v48 = *(_QWORD *)(a1 + 104);
  v46 = *(_QWORD *)(a1 + 136);
  v5 = *(_QWORD *)(a1 + 80);
  v6 = v5 + 2;
  if (v5 + 1 >= 0)
    v7 = v5 + 1;
  else
    v7 = v5 + 2;
  v49 = *(unsigned __int8 *)(a1 + 148);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  if (v8 >= -1)
    v10 = v8 + 1;
  else
    v10 = v8 + 2;
  result = FigAtomicIncrement32();
  v16 = (result - 1);
  if (v2 > v16)
  {
    v17 = v46 + v3 * v4;
    v18 = (v7 & 0xFFFFFFFFFFFFFFFELL) / 6;
    v19 = (2 * v10) & 0xFFFFFFFFFFFFFFFCLL;
    v20 = v48 + v9 * v51 + v19;
    v21 = v47 + v50 * v9 + v19;
    v22 = v17 + 24 * v18;
    v23 = v5 - 1;
    v24 = 0uLL;
    do
    {
      v25 = (const __int16 *)(v20 + v16 * v51);
      v26 = (const __int16 *)(v21 + v16 * v50);
      v27 = v22 + v16 * v4;
      if (v6 >= 3)
      {
        if (v23 >= 2)
        {
          v33 = *(_DWORD *)(v27 + 8);
          v28 = 2;
        }
        else
        {
          v29 = *(unsigned __int16 *)v25 >> 6;
          v30 = *((unsigned __int16 *)v25 + 1) >> 6;
          v31 = *(unsigned __int16 *)v26;
          v32 = *((unsigned __int16 *)v26 + 1) >> 6;
          v25 += 2;
          v26 += 2;
          *(_DWORD *)(v27 + 4) = (16 * v31) & 0xFFC00 | *(_DWORD *)(v27 + 4) & 0x3F | ((v29 & 0x3FF) << 20);
          v33 = v32 & 0xFFF003FF | ((v30 & 0x3FF) << 10);
          v28 = 4;
        }
        v34 = *(unsigned __int16 *)v25 >> 6;
        v35 = *((unsigned __int16 *)v25 + 1) >> 6;
        v36 = *(unsigned __int16 *)v26;
        v37 = *((unsigned __int16 *)v26 + 1) >> 6;
        v25 += 2;
        v26 += 2;
        *(_DWORD *)(v27 + 8) = (v36 << 14) & 0x3FF00000 | v33 & 0xFFFFF;
        *(_DWORD *)(v27 + 12) = v34 & 0xC00003FF | ((v37 & 0x3FF) << 10) & 0xC00FFFFF | ((v35 & 0x3FF) << 20);
        v27 += 16;
      }
      else
      {
        v28 = 0;
      }
      if (v49)
      {
        while (v1 - 23 > v28)
        {
          v52 = vld3q_s16(v25);
          v25 += 24;
          *(int16x4_t *)v12.i8 = vmovn_s32((int32x4_t)v52.val[0]);
          v38 = (int32x4_t)vzip1q_s16(vuzp2q_s16(v52.val[0], v52.val[0]), v24);
          *(int16x4_t *)v13.i8 = vmovn_s32((int32x4_t)v52.val[1]);
          v39 = vzip1q_s16(vuzp2q_s16(v52.val[1], v52.val[0]), v24);
          *(int16x4_t *)v14.i8 = vmovn_s32((int32x4_t)v52.val[2]);
          v52.val[0] = vzip1q_s16(vuzp2q_s16(v52.val[2], v52.val[0]), v24);
          v52.val[2] = (int16x8_t)vshlq_n_s32((int32x4_t)vzip1q_s16(v12, v24), 4uLL);
          v53 = vld3q_s16(v26);
          v26 += 24;
          v52.val[1] = (int16x8_t)vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)vzip1q_s16(v13, v24), 6uLL), (int8x16_t)vshlq_n_s32((int32x4_t)vzip1q_s16(v14, v24), 0xEuLL));
          v12 = (int16x8_t)vshlq_n_s32(v38, 4uLL);
          v40 = (int16x8_t)vshrq_n_u32((uint32x4_t)v39, 6uLL);
          v52.val[0] = (int16x8_t)vorrq_s8((int8x16_t)v40, (int8x16_t)vshlq_n_s32((int32x4_t)v52.val[0], 0xEuLL));
          *(int16x4_t *)v40.i8 = vmovn_s32((int32x4_t)v53.val[0]);
          v13 = vzip1q_s16(vuzp2q_s16(v53.val[0], v52.val[0]), v24);
          *(int16x4_t *)v39.i8 = vmovn_s32((int32x4_t)v53.val[1]);
          v14 = vzip1q_s16(vuzp2q_s16(v53.val[1], v52.val[0]), v24);
          *(int16x4_t *)v15.i8 = vmovn_s32((int32x4_t)v53.val[2]);
          v53.val[0] = vzip1q_s16(vuzp2q_s16(v53.val[2], v52.val[0]), v24);
          v53.val[2] = (int16x8_t)vorrq_s8(vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)vzip1q_s16(v40, v24), 6uLL), (int8x16_t)v52.val[2]), (int8x16_t)vshlq_n_s32((int32x4_t)vzip1q_s16(v39, v24), 0xEuLL));
          v15 = (int16x8_t)vorrq_s8((int8x16_t)v52.val[1], (int8x16_t)vshlq_n_s32((int32x4_t)vzip1q_s16(v15, v24), 4uLL));
          v41 = vorrq_s8(vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v13, 6uLL), (int8x16_t)v12), (int8x16_t)vshlq_n_s32((int32x4_t)v14, 0xEuLL));
          v42 = vorrq_s8((int8x16_t)v52.val[0], (int8x16_t)vshlq_n_s32((int32x4_t)v53.val[0], 4uLL));
          vst4q_f32((float *)v27, *(float32x4x4_t *)(&v15 - 1));
          v27 += 64;
          v28 += 24;
        }
      }
      while (v28 < v1)
      {
        v44 = *((unsigned __int16 *)v25 + 1) >> 6;
        *(_DWORD *)v27 = (*(unsigned __int16 *)v26 >> 6) & 0xC00003FF | (((*(unsigned __int16 *)v25 >> 6) & 0x3FF) << 10) & 0xC00FFFFF | (((*((unsigned __int16 *)v26 + 1) >> 6) & 0x3FF) << 20);
        *(_DWORD *)(v27 + 4) = v44;
        if (v28 + 2 >= v1)
          break;
        v45 = (*((unsigned __int16 *)v26 + 3) >> 6) & 0xFFF003FF | (((*((unsigned __int16 *)v25 + 3) >> 6) & 0x3FF) << 10);
        *(_DWORD *)(v27 + 4) = (*((unsigned __int16 *)v25 + 2) << 14) & 0x3FF00000 | (((*((unsigned __int16 *)v26 + 2) >> 6) & 0x3FF) << 10) | v44;
        *(_DWORD *)(v27 + 8) = v45;
        if (v28 + 4 >= v1)
          break;
        v43 = (*((unsigned __int16 *)v25 + 4) >> 6) & 0xC00003FF | (((*((unsigned __int16 *)v26 + 5) >> 6) & 0x3FF) << 10) & 0xC00FFFFF | (((*((unsigned __int16 *)v25 + 5) >> 6) & 0x3FF) << 20);
        v28 += 6;
        *(_DWORD *)(v27 + 8) = v45 & 0xC00FFFFF | (((*((unsigned __int16 *)v26 + 4) >> 6) & 0x3FF) << 20);
        *(_DWORD *)(v27 + 12) = v43;
        v25 += 6;
        v26 += 6;
        v27 += 16;
      }
      result = FigAtomicIncrement32();
      v16 = (result - 1);
      v24 = 0uLL;
    }
    while (v2 > v16);
  }
  return result;
}

uint64_t vt_Copy_v210_x422(_BYTE *a1, _OWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, __int128 *a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t MaxLogicalCoreCount;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  NSObject *global_queue;
  _OWORD v27[6];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  if (a1)
  {
    MaxLogicalCoreCount = FigThreadGetMaxLogicalCoreCount();
    v16 = a2[1];
    v27[0] = *a2;
    v27[1] = v16;
    v17 = *a6;
    v18 = a6[1];
    v27[2] = a2[2];
    v27[3] = v17;
    v19 = a6[2];
    v27[4] = v18;
    v27[5] = v19;
    v20 = *a3;
    v28 = *a4;
    v29 = v20;
    v21 = a8[1];
    v22 = *a7;
    v23 = a7[1];
    v30 = *a8;
    v31 = v22;
    v32 = v21;
    v33 = v23;
    v34 = 0;
    BYTE4(v34) = *a1;
    if (a1[1] && (v24 = MaxLogicalCoreCount, MaxLogicalCoreCount >= 2))
    {
      global_queue = dispatch_get_global_queue(0, 0);
      dispatch_apply_f(v24, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_v210_x422_internal);
    }
    else
    {
      vt_Copy_v210_x422_internal((uint64_t)v27);
    }
  }
  return 0;
}

uint64_t vt_Copy_v210_x422_internal(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int16 *v19;
  __int16 *v20;
  unint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  float v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int16x8x3_t v35;
  float32x4x4_t v36;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 88);
  v33 = *(_QWORD *)(a1 + 112);
  v34 = *(_QWORD *)(a1 + 96);
  v4 = *(_QWORD *)(a1 + 128);
  v30 = *(_QWORD *)(a1 + 120);
  v31 = *(_QWORD *)(a1 + 104);
  v29 = *(_QWORD *)(a1 + 136);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = v5 + 2;
  if (v5 + 1 >= 0)
    v8 = v5 + 1;
  else
    v8 = v5 + 2;
  v32 = *(unsigned __int8 *)(a1 + 148);
  v9 = *(_QWORD *)(a1 + 80);
  if (v9 >= -1)
    v10 = v9 + 1;
  else
    v10 = v9 + 2;
  result = FigAtomicIncrement32();
  v12 = (result - 1);
  if (v2 > v12)
  {
    v13 = v31 + v6 * v34 + 24 * ((v8 & 0xFFFFFFFFFFFFFFFELL) / 6);
    v14 = (2 * v10) & 0xFFFFFFFFFFFFFFFCLL;
    v15 = v30 + v3 * v33 + v14;
    v16 = v29 + v4 * v3 + v14;
    v17 = v5 - 1;
    do
    {
      v18 = v13 + v12 * v34;
      v19 = (__int16 *)(v15 + v12 * v33);
      v20 = (__int16 *)(v16 + v12 * v4);
      if (v7 >= 3)
      {
        v23 = *(_DWORD *)(v18 + 8);
        v22 = *(_DWORD *)(v18 + 12);
        if (v17 > 1)
        {
          v21 = 2;
        }
        else
        {
          v24 = *(_DWORD *)(v18 + 4);
          *v19 = (v24 >> 14) & 0xFFC0;
          *v20 = (v24 >> 4) & 0xFFC0;
          v19[1] = (v23 >> 4) & 0xFFC0;
          v20[1] = (_WORD)v23 << 6;
          v19 += 2;
          v20 += 2;
          v21 = 4;
        }
        v18 += 16;
        *v19 = (_WORD)v22 << 6;
        *v20 = (v23 >> 14) & 0xFFC0;
        v19[1] = (v22 >> 14) & 0xFFC0;
        v20[1] = (v22 >> 4) & 0xFFC0;
        v19 += 2;
        v20 += 2;
      }
      else
      {
        v21 = 0;
      }
      if (v32)
      {
        while (v1 - 23 > v21)
        {
          v36 = vld4q_f32((const float *)v18);
          v18 += 64;
          v35.val[0] = (int16x8_t)(*(_OWORD *)&vtrn1q_s16((int16x8_t)vshrq_n_u32((uint32x4_t)v36.val[0], 4uLL), (int16x8_t)vshrq_n_u32((uint32x4_t)v36.val[2], 4uLL)) & __PAIR128__(0xFFC0FFC0FFC0FFC0, 0xFFC0FFC0FFC0FFC0));
          v35.val[1] = (int16x8_t)(*(_OWORD *)&vshlq_n_s32((int32x4_t)vtrn1q_s16((int16x8_t)v36.val[1], (int16x8_t)v36.val[3]), 6uLL) & __PAIR128__(0xFFC0FFC0FFC0FFC0, 0xFFC0FFC0FFC0FFC0));
          v35.val[2] = (int16x8_t)(*(_OWORD *)&vtrn1q_s16((int16x8_t)vshrq_n_u32((uint32x4_t)v36.val[1], 0xEuLL), (int16x8_t)vshrq_n_u32((uint32x4_t)v36.val[3], 0xEuLL)) & __PAIR128__(0xFFC0FFC0FFC0FFC0, 0xFFC0FFC0FFC0FFC0));
          vst3q_s16(v19, v35);
          v19 += 24;
          v35.val[0] = (int16x8_t)(*(_OWORD *)&vshlq_n_s32((int32x4_t)vtrn1q_s16((int16x8_t)v36.val[0], (int16x8_t)v36.val[2]), 6uLL) & __PAIR128__(0xFFC0FFC0FFC0FFC0, 0xFFC0FFC0FFC0FFC0));
          v35.val[1] = (int16x8_t)(*(_OWORD *)&vtrn1q_s16((int16x8_t)vshrq_n_u32((uint32x4_t)v36.val[0], 0xEuLL), (int16x8_t)vshrq_n_u32((uint32x4_t)v36.val[2], 0xEuLL)) & __PAIR128__(0xFFC0FFC0FFC0FFC0, 0xFFC0FFC0FFC0FFC0));
          v35.val[2] = (int16x8_t)(*(_OWORD *)&vtrn1q_s16((int16x8_t)vshrq_n_u32((uint32x4_t)v36.val[1], 4uLL), (int16x8_t)vshrq_n_u32((uint32x4_t)v36.val[3], 4uLL)) & __PAIR128__(0xFFC0FFC0FFC0FFC0, 0xFFC0FFC0FFC0FFC0));
          vst3q_s16(v20, v35);
          v20 += 24;
          v21 += 24;
        }
      }
      while (v21 < v1)
      {
        v27 = *(float *)v18;
        v26 = *(_DWORD *)(v18 + 4);
        *v19 = (*(_DWORD *)v18 >> 4) & 0xFFC0;
        *v20 = LOWORD(v27) << 6;
        v19[1] = (_WORD)v26 << 6;
        v20[1] = (LODWORD(v27) >> 14) & 0xFFC0;
        if (v21 + 2 >= v1)
          break;
        v28 = *(_DWORD *)(v18 + 8);
        v19[2] = (v26 >> 14) & 0xFFC0;
        v20[2] = (v26 >> 4) & 0xFFC0;
        v19[3] = (v28 >> 4) & 0xFFC0;
        v20[3] = (_WORD)v28 << 6;
        if (v21 + 4 >= v1)
          break;
        v25 = *(_DWORD *)(v18 + 12);
        v19[4] = (_WORD)v25 << 6;
        v20[4] = (v28 >> 14) & 0xFFC0;
        v21 += 6;
        v19[5] = (v25 >> 14) & 0xFFC0;
        v20[5] = (v25 >> 4) & 0xFFC0;
        v18 += 16;
        v19 += 6;
        v20 += 6;
      }
      result = FigAtomicIncrement32();
      v12 = (result - 1);
    }
    while (v2 > v12);
  }
  return result;
}

uint64_t VTGetDefaultYCbCrMatrixWithNoHints()
{
  return *MEMORY[0x1E0CA8F18];
}

uint64_t VTGetDefaultColorAttributesWithHints(int a1, uint64_t a2, unint64_t a3, unint64_t a4, _QWORD *a5, _QWORD *a6, _QWORD *a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;

  if (a1 == 1785750887 || a1 == 1246774599)
  {
    v13 = *MEMORY[0x1E0CA8DA0];
    v14 = *MEMORY[0x1E0CA8EB0];
    v15 = *MEMORY[0x1E0CA8F10];
    v16 = 1;
    if (!a2)
      goto LABEL_11;
  }
  else
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    if (!a2)
      goto LABEL_11;
  }
  if (a1 != 1246774599 && a1 != 1785750887)
  {
    if (FigCFEqual())
    {
      v17 = (uint64_t *)MEMORY[0x1E0CA8F18];
LABEL_19:
      v18 = (uint64_t *)MEMORY[0x1E0CA8EB0];
      v19 = (uint64_t *)MEMORY[0x1E0CA8D88];
LABEL_31:
      v13 = *v19;
      v14 = *v18;
      goto LABEL_46;
    }
    if (FigCFEqual())
    {
      v17 = (uint64_t *)MEMORY[0x1E0CA8F00];
      v18 = (uint64_t *)MEMORY[0x1E0CA8EA0];
LABEL_27:
      v19 = (uint64_t *)MEMORY[0x1E0CA8D80];
      goto LABEL_31;
    }
    if (FigCFEqual())
    {
      v17 = (uint64_t *)MEMORY[0x1E0CA8F10];
      v18 = (uint64_t *)MEMORY[0x1E0CA8EB0];
    }
    else
    {
      if (FigCFEqual())
      {
        v17 = (uint64_t *)MEMORY[0x1E0CA8F10];
        goto LABEL_19;
      }
      if (FigCFEqual())
      {
        v17 = (uint64_t *)MEMORY[0x1E0CA8F18];
        v18 = (uint64_t *)MEMORY[0x1E0CA8EC8];
      }
      else
      {
        if (!FigCFEqual())
        {
          if (FigCFEqual())
          {
            v17 = (uint64_t *)MEMORY[0x1E0CA8F00];
            v18 = (uint64_t *)MEMORY[0x1E0CA8EC8];
          }
          else
          {
            if (!FigCFEqual())
            {
              v16 = 0;
              if (a3)
                goto LABEL_12;
LABEL_43:
              if (v16)
                goto LABEL_47;
              v13 = *MEMORY[0x1E0CA8D88];
              v14 = *MEMORY[0x1E0CA8EB0];
              goto LABEL_45;
            }
            v17 = (uint64_t *)MEMORY[0x1E0CA8F00];
            v18 = (uint64_t *)MEMORY[0x1E0CA8EA8];
          }
          goto LABEL_27;
        }
        v17 = (uint64_t *)MEMORY[0x1E0CA8F18];
        v18 = (uint64_t *)MEMORY[0x1E0CA8EA8];
      }
    }
    v19 = (uint64_t *)MEMORY[0x1E0CA8D98];
    goto LABEL_31;
  }
LABEL_11:
  if (!a3)
    goto LABEL_43;
LABEL_12:
  if (!a4 || v16)
    goto LABEL_43;
  if (a3 != 704 || a4 != 576)
  {
    v14 = *MEMORY[0x1E0CA8EB0];
    if (a3 <= 0x2C0 && a4 <= 0x240)
    {
      v13 = *MEMORY[0x1E0CA8DA0];
      goto LABEL_23;
    }
    v13 = *MEMORY[0x1E0CA8D88];
LABEL_45:
    v17 = (uint64_t *)MEMORY[0x1E0CA8F18];
    goto LABEL_46;
  }
  v13 = *MEMORY[0x1E0CA8D78];
  v14 = *MEMORY[0x1E0CA8EB0];
LABEL_23:
  v17 = (uint64_t *)MEMORY[0x1E0CA8F10];
LABEL_46:
  v15 = *v17;
LABEL_47:
  if (a5)
    *a5 = v13;
  if (a6)
    *a6 = v14;
  if (a7)
    *a7 = v15;
  return 0;
}

uint64_t VTGetDefaultYCbCrMatrixWithDimensionHints(unint64_t a1, unint64_t a2)
{
  uint64_t v2;

  v2 = MEMORY[0x1E0CA8F18];
  if (a1)
  {
    if (a2)
    {
      v2 = MEMORY[0x1E0CA8F10];
      if ((a1 != 704 || a2 != 576) && (a2 >= 0x241 || a1 >= 0x2C1))
        v2 = MEMORY[0x1E0CA8F18];
    }
  }
  return *(_QWORD *)v2;
}

uint64_t VTGetDefaultYCbCrMatrixWithColorSpaceNameAndDimensionHints(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v4;

  v4 = 0;
  VTGetDefaultColorAttributesWithHints(0, a1, a2, a3, 0, 0, &v4);
  return v4;
}

uint64_t VTVPParavirtualizedHEVCVideoEncoder_CreateInstance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __CFDictionary *Mutable;
  uint64_t InstanceWithSpecification;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(Mutable, CFSTR("VTHostEncoderID"), CFSTR("com.apple.videotoolbox.videoencoder.ave.hevc"));
  InstanceWithSpecification = ParavirtualizedVideoEncoder_CreateInstanceWithSpecification(1752589105, (uint64_t)CFSTR("paravirtualized:com.apple.videotoolbox.videoencoder.ave.hevc"), (uint64_t)Mutable, a2, a3);
  if (Mutable)
    CFRelease(Mutable);
  return InstanceWithSpecification;
}

uint64_t VTVPParavirtualizedH264VideoEncoder_CreateInstance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __CFDictionary *Mutable;
  uint64_t InstanceWithSpecification;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(Mutable, CFSTR("VTHostEncoderID"), CFSTR("com.apple.videotoolbox.videoencoder.ave.avc"));
  InstanceWithSpecification = ParavirtualizedVideoEncoder_CreateInstanceWithSpecification(1635148593, (uint64_t)CFSTR("paravirtualized:com.apple.videotoolbox.videoencoder.ave.avc"), (uint64_t)Mutable, a2, a3);
  if (Mutable)
    CFRelease(Mutable);
  return InstanceWithSpecification;
}

uint64_t getPixelFormatCharacteristics(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  uint64_t result;
  const __CFDictionary *v6;
  char v7;
  const __CFArray *Value;
  const __CFArray *v9;
  CFTypeID v10;
  CFIndex Count;
  CFIndex v12;
  CFIndex i;

  result = CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
  if (result)
  {
    v6 = (const __CFDictionary *)result;
    if (a2)
    {
      FigCFDictionaryGetInt32IfPresent();
      *a2 = 0;
    }
    if (a3)
    {
      FigCFDictionaryGetBooleanIfPresent();
      FigCFDictionaryGetBooleanIfPresent();
      FigCFDictionaryGetBooleanIfPresent();
      CFDictionaryGetValue(v6, (const void *)*MEMORY[0x1E0CA9120]);
      if (FigCFEqual())
      {
        v7 = 8;
      }
      else if (FigCFEqual())
      {
        v7 = 4;
      }
      else if (FigCFEqual())
      {
        v7 = 12;
      }
      else
      {
        v7 = 0;
      }
      if (!FigCFDictionaryGetInt16IfPresent() || !FigCFDictionaryGetInt16IfPresent())
      {
        Value = (const __CFArray *)CFDictionaryGetValue(v6, (const void *)*MEMORY[0x1E0CA91B0]);
        if (Value)
        {
          v9 = Value;
          v10 = CFGetTypeID(Value);
          if (v10 == CFArrayGetTypeID())
          {
            Count = CFArrayGetCount(v9);
            if (Count >= 1)
            {
              v12 = Count;
              for (i = 0; i != v12; ++i)
              {
                CFArrayGetValueAtIndex(v9, i);
                if (FigCFDictionaryGetInt16IfPresent()
                  && FigCFDictionaryGetInt16IfPresent())
                {
                  break;
                }
              }
            }
          }
        }
      }
      FigCFDictionaryGetBooleanIfPresent();
      *a3 = v7 | 0x10;
    }
    return 1;
  }
  return result;
}

uint64_t VTPixelTransferGraphGetCurrentDimensions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  __int128 v13;
  __int128 v14;

  v6 = *(double *)(a4 + 108);
  if ((*(_BYTE *)(a4 + 20) & 4) != 0)
    v7 = *(double *)(a4 + 108);
  else
    v7 = *(double *)(a4 + 116);
  if ((*(_BYTE *)(a4 + 20) & 4) != 0)
    v6 = *(double *)(a4 + 116);
  v8 = v7;
  v9 = v6;
  if ((*(_BYTE *)(a1 + 4) & 1) == 0)
  {
    v9 = *(double *)(a4 + 60);
    v8 = *(double *)(a4 + 68);
  }
  if ((*(_BYTE *)(a2 + 4) & 1) != 0)
    v10 = v7;
  else
    v10 = v8;
  if ((*(_BYTE *)(a2 + 4) & 1) == 0)
    v6 = v9;
  if ((*(_BYTE *)(a1 + 4) & 4) != 0)
    v11 = v9;
  else
    v11 = v8;
  if ((*(_BYTE *)(a1 + 4) & 4) == 0)
    v8 = v9;
  if ((*(_BYTE *)(a2 + 4) & 4) != 0)
    v12 = v6;
  else
    v12 = v10;
  if ((*(_BYTE *)(a2 + 4) & 4) != 0)
    v6 = v10;
  if (a5)
  {
    if ((*(_BYTE *)(a1 + 4) & 0x20) != 0)
    {
      v13 = *(_OWORD *)(a4 + 60);
      *(_OWORD *)a5 = *(_OWORD *)(a4 + 44);
      *(_OWORD *)(a5 + 16) = v13;
      if (!a6)
        return 0;
      goto LABEL_29;
    }
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(double *)(a5 + 16) = v8;
    *(double *)(a5 + 24) = v11;
  }
  if (!a6)
    return 0;
LABEL_29:
  if (*(_QWORD *)a2 == *(_QWORD *)(a4 + 16))
  {
    v14 = *(_OWORD *)(a4 + 108);
    *(_OWORD *)a6 = *(_OWORD *)(a4 + 92);
    *(_OWORD *)(a6 + 16) = v14;
  }
  else
  {
    *(_QWORD *)a6 = 0;
    *(_QWORD *)(a6 + 8) = 0;
    *(double *)(a6 + 16) = v6;
    *(double *)(a6 + 24) = v12;
  }
  return 0;
}

uint64_t VTPixelTransferGraphBuildChain(uint64_t a1, char a2, double *a3, unsigned int a4, char a5, double *a6, int a7, int a8, char a9, char a10, char a11, char a12, uint64_t a13, const void *a14, __int16 a15, uint64_t a16, uint64_t a17, char a18, char a19, unsigned __int16 a20,unsigned __int16 a21,uint64_t a22,CFTypeRef *a23)
{
  double v27;
  double v28;
  const __CFString *Value;
  const __CFString *v30;
  unsigned __int8 IntegerCodePointForString;
  int v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  BOOL v37;
  const __CFAllocator *v38;
  unint64_t *v39;
  const void *MutableCopy;
  char v41;
  void *v42;
  uint64_t v43;
  uint64_t i;
  _QWORD *v45;
  const void *v46;
  const void **v48;
  double *v49;
  int v50;
  const void **v51;
  float v52;
  float v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t DynamicServiceList;
  uint64_t v65;
  uint64_t v66;
  int *v67;
  int v68;
  uint64_t v69;
  int *v70;
  int v71;
  int v72;
  unint64_t v73;
  double *v74;
  unint64_t v75;
  double *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  __int128 v83;
  uint64_t v84;
  uint64_t *v85;
  __int128 v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  __int128 v90;
  uint64_t (*v91)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, CFTypeRef *);
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  unint64_t *v96;
  _BYTE *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  char v101;
  BOOL v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  char *v106;
  unint64_t v107;
  char *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  const void *v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  unsigned __int8 v119;
  double *v122;
  _QWORD *v123;
  uint64_t allocator;
  CFAllocatorRef allocatora[2];
  unint64_t v126;
  _BYTE *v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  CFTypeRef cf[2];
  _BYTE v133[112];
  CFTypeRef v134[2];
  __int128 v135;
  __int128 v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  CFTypeRef v143;
  _OWORD v144[6];

  v28 = a6[4];
  v27 = a6[5];
  Value = (const __CFString *)FigCFDictionaryGetValue();
  v30 = (const __CFString *)FigCFDictionaryGetValue();
  LOBYTE(Value) = CVYCbCrMatrixGetIntegerCodePointForString(Value);
  IntegerCodePointForString = CVYCbCrMatrixGetIntegerCodePointForString(v30);
  v143 = 0;
  v32 = a1;
  v142 = a1 | 0x2000000000;
  BYTE5(v142) = (_BYTE)Value;
  v141 = a4;
  v119 = IntegerCodePointForString;
  BYTE5(v141) = IntegerCodePointForString;
  memset(&v133[16], 0, 96);
  v135 = 0u;
  v136 = 0u;
  *(_OWORD *)v134 = 0u;
  *(_OWORD *)cf = 0u;
  *(_OWORD *)v133 = 0u;
  v133[8] = a2;
  v133[9] = a5;
  v133[10] = (a10 != 0) | (2 * (a11 != 0)) | (4 * (a12 != 0));
  v33 = *((_OWORD *)a3 + 1);
  *(_OWORD *)&v133[12] = *(_OWORD *)a3;
  *(_OWORD *)&v133[28] = v33;
  v122 = a3;
  *(_OWORD *)&v133[44] = *((_OWORD *)a3 + 2);
  v34 = *(_OWORD *)a6;
  v35 = *((_OWORD *)a6 + 1);
  *(_OWORD *)&v133[92] = *((_OWORD *)a6 + 2);
  *(_OWORD *)&v133[76] = v35;
  *(_OWORD *)&v133[60] = v34;
  v37 = a7 == 90 || a7 == 270;
  v133[108] = v37;
  v133[109] = a19;
  v134[1] = a14;
  LOWORD(v135) = a15;
  *((_QWORD *)&v135 + 1) = a16;
  *(_QWORD *)&v136 = a17;
  *(_DWORD *)((char *)&v136 + 9) = __PAIR32__(a21, a20);
  v137 = a22;
  v138 = 0;
  v139 = 0;
  v140 = 0;
  v131 = 0;
  v129 = 0uLL;
  v130 = 0uLL;
  v128 = 0uLL;
  v38 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v39 = (unint64_t *)CFAllocatorAllocate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 160176, 0);
  bzero(v39, 0x271B0uLL);
  if (!v39)
  {
    v42 = 0;
    v43 = 4294954305;
    goto LABEL_28;
  }
  CFAbsoluteTimeGetCurrent();
  if (a13)
    MutableCopy = (const void *)FigCFDictionaryCreateMutableCopy();
  else
    MutableCopy = CFDictionaryCreateMutable(v38, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v134[0] = MutableCopy;
  if (!MutableCopy)
  {
    v42 = 0;
    v43 = 0;
    goto LABEL_20;
  }
  if (!getPixelFormatCharacteristics(a1, (_BYTE *)&v142 + 6, (_BYTE *)&v142 + 7)
    || !getPixelFormatCharacteristics(v141, (_BYTE *)&v141 + 6, (_BYTE *)&v141 + 7))
  {
    v42 = 0;
    goto LABEL_19;
  }
  if ((v142 & 0x200000000000000) == 0)
    BYTE5(v142) = 0;
  if ((v141 & 0x200000000000000) == 0)
  {
    v41 = 0;
LABEL_40:
    BYTE5(v141) = v41;
    goto LABEL_41;
  }
  if (BYTE5(v142) && BYTE5(v141) && !a18 && BYTE5(v142) == v119)
  {
    v41 = 1;
    BYTE5(v142) = 1;
    goto LABEL_40;
  }
LABEL_41:
  if (a7 == 90)
  {
    BYTE4(v141) |= 0xCu;
    v27 = a6[4];
    v28 = a6[5];
    v48 = (const void **)&kVTRotation_CW90;
LABEL_45:
    v49 = v122;
    v50 = a8;
LABEL_46:
    CFDictionarySetValue((CFMutableDictionaryRef)v134[0], CFSTR("Rotation"), *v48);
    goto LABEL_47;
  }
  if (a7 == 270)
  {
    BYTE4(v141) |= 0x14u;
    v27 = a6[4];
    v28 = a6[5];
    v48 = (const void **)&kVTRotation_CCW90;
    goto LABEL_45;
  }
  v49 = v122;
  v50 = a8;
  if (a7 == 180)
  {
    BYTE4(v141) |= 0x18u;
    v48 = (const void **)&kVTRotation_180;
    goto LABEL_46;
  }
LABEL_47:
  v51 = (const void **)MEMORY[0x1E0C9AE50];
  if (v50)
  {
    BYTE4(v141) ^= 0x10u;
    CFDictionarySetValue((CFMutableDictionaryRef)v134[0], CFSTR("FlipHorizontalOrientation"), (const void *)*MEMORY[0x1E0C9AE50]);
  }
  v52 = v28;
  if (a9)
  {
    BYTE4(v141) ^= 8u;
    CFDictionarySetValue((CFMutableDictionaryRef)v134[0], CFSTR("FlipVerticalOrientation"), *v51);
  }
  if (v49[4] != v52 || (v53 = v27, v49[5] != v53))
    BYTE4(v141) |= 1u;
  if (a18)
    BYTE4(v141) |= 2u;
  if ((v133[10] & 2) != 0)
  {
    LOBYTE(v131) = VTMetalTransferSessionCanAcceptSource1xWithSession(a22, v32);
    if ((v141 & 0x100000000) != 0)
      BYTE1(v131) = VTMetalTransferSessionCanDoHighQualityScaling(a22, v32);
  }
  v54 = v141;
  v55 = v142;
  cf[1] = (CFTypeRef)v142;
  *(_QWORD *)v133 = v141;
  v56 = (LODWORD(cf[1]) ^ BYTE4(cf[1]) ^ ((unint64_t)cf[1] >> 36) & 0xFF0) % 0x4E35;
  v57 = v39[v56];
  if (v57)
  {
    while ((v142 & 0xFF00FFFFFFFFLL | ((unint64_t)BYTE4(v142) << 32)) != (*(_QWORD *)v57 & 0xFFFFFFFFFFFFLL))
    {
      if (v56 + 1 <= 0x4E34)
        ++v56;
      else
        v56 = 0;
      v57 = v39[v56];
      if (!v57)
        goto LABEL_65;
    }
  }
  else
  {
LABEL_65:
    v58 = v39[20021] + 1;
    v39[20021] = v58;
    if (v58 > 0x4E34 || (v59 = (char *)CFAllocatorAllocate(v38, 80, 0)) == 0)
    {
      v42 = 0;
      v43 = 0;
      v127 = 0;
      goto LABEL_20;
    }
    v57 = (uint64_t)v59;
    *(_QWORD *)v59 = v55;
    *(_OWORD *)(v59 + 24) = 0u;
    *(_OWORD *)(v59 + 40) = 0u;
    *((_QWORD *)v59 + 1) = -1;
    *((_QWORD *)v59 + 2) = 0;
    *((_QWORD *)v59 + 8) = 0;
    *((_QWORD *)v59 + 9) = 0;
    v39[v56] = (unint64_t)v59;
    v54 = v141;
  }
  v127 = (_BYTE *)v57;
  v60 = (v54 ^ BYTE4(v54) ^ (v54 >> 36) & 0xFF0) % 0x4E35;
  v61 = v39[v60];
  if (v61)
  {
    while ((v54 & 0xFF00FFFFFFFFLL | ((unint64_t)BYTE4(v54) << 32)) != (*(_QWORD *)v61 & 0xFFFFFFFFFFFFLL))
    {
      if (v60 + 1 <= 0x4E34)
        ++v60;
      else
        v60 = 0;
      v61 = v39[v60];
      if (!v61)
        goto LABEL_74;
    }
  }
  else
  {
LABEL_74:
    v62 = v39[20021] + 1;
    v39[20021] = v62;
    if (v62 > 0x4E34 || (v63 = (char *)CFAllocatorAllocate(v38, 80, 0)) == 0)
    {
      v42 = 0;
      v43 = 0;
      goto LABEL_20;
    }
    v61 = (uint64_t)v63;
    *(_QWORD *)v63 = v54;
    *(_OWORD *)(v63 + 24) = 0u;
    *(_OWORD *)(v63 + 40) = 0u;
    *((_QWORD *)v63 + 1) = -1;
    *((_QWORD *)v63 + 2) = 0;
    *((_QWORD *)v63 + 8) = 0;
    *((_QWORD *)v63 + 9) = 0;
    v39[v60] = (unint64_t)v63;
  }
  if (a10
    && (memset(&v144[2], 0, 40), VTPixelTransferSessionGetDynamicServiceList())
    && (DynamicServiceList = VTPixelTransferSessionGetDynamicServiceList()) != 0)
  {
    v65 = DynamicServiceList;
    while (1)
    {
      v66 = *(_QWORD *)v65;
      if (*(uint64_t *)v65 >= 1)
      {
        v67 = *(int **)(v65 + 8);
        while (1)
        {
          v68 = *v67++;
          if (v68 == *(_DWORD *)v57)
            break;
          if (!--v66)
            goto LABEL_90;
        }
        v69 = *(_QWORD *)(v65 + 16);
        if (v69 >= 1)
          break;
      }
LABEL_90:
      v65 = *(_QWORD *)(v65 + 72);
      if (!v65)
        goto LABEL_91;
    }
    v70 = *(int **)(v65 + 24);
    while (1)
    {
      v71 = *v70;
      v70 += 2;
      if (v71 == *(_DWORD *)v61)
        break;
      if (!--v69)
        goto LABEL_90;
    }
    if ((*(_DWORD *)(v65 + 32) & 8) != 0)
      v114 = 1;
    else
      v114 = 4;
    DWORD2(v144[2]) = v114;
    *(_OWORD *)allocatora = *(_OWORD *)(v65 + 48);
    *(_OWORD *)((char *)v144 + 8) = *(_OWORD *)allocatora;
    v115 = *(_QWORD *)(v65 + 64);
    *(_QWORD *)&v144[0] = vtPixelTransferAppendDynamicNodeCallback;
    *((_QWORD *)&v144[1] + 1) = v115;
    v144[3] = vdupq_n_s64(0x64uLL);
    LOBYTE(v144[4]) = 0;
    v116 = vtPixelTransferGraphEdgeCost(v57, v61, (uint64_t)v144, (uint64_t)cf);
    v73 = v116;
    if (v116 == -1)
    {
      v72 = 0;
    }
    else
    {
      *(_QWORD *)(v61 + 8) = v116;
      *(_QWORD *)(v61 + 16) = vtPixelTransferAppendDynamicNodeCallback;
      *(CFAllocatorRef *)(v61 + 24) = allocatora[0];
      *(_QWORD *)(v61 + 32) = *(_QWORD *)(v65 + 56);
      *(_QWORD *)(v61 + 40) = *(_QWORD *)(v65 + 64);
      *(_BYTE *)(v61 + 56) = 0;
      *(_QWORD *)(v61 + 64) = v57;
      v72 = 1;
    }
  }
  else
  {
LABEL_91:
    v72 = 0;
    v73 = -1;
  }
  allocator = (uint64_t)v38;
  if (!a11)
    goto LABEL_102;
  memset((char *)v144 + 8, 0, 64);
  v74 = (double *)&v133[92];
  if ((*(_BYTE *)(v61 + 4) & 1) == 0)
    v74 = (double *)&v133[44];
  v75 = (unint64_t)*v74;
  v76 = (double *)&v133[52];
  if ((*(_BYTE *)(v61 + 4) & 1) != 0)
    v76 = (double *)&v133[100];
  if ((unint64_t)*v76 * v75 >= 0x9C41
    && VTMetalTransferSessionCanTransferWithSession(v137, *(_DWORD *)v57, *(_DWORD *)v61, *(_BYTE *)(v61 + 4) & 1, 0)
    && (*(_QWORD *)&v144[0] = vtPixelTransferAppendMetalNodeCallback,
        DWORD2(v144[2]) = 2,
        v144[3] = vdupq_n_s64(0xC8uLL),
        LOBYTE(v144[4]) = 0,
        v77 = vtPixelTransferGraphEdgeCost(v57, v61, (uint64_t)v144, (uint64_t)cf),
        v77 != -1))
  {
    if (v77 < v73)
    {
      *(_QWORD *)(v61 + 8) = v77;
      *(_QWORD *)(v61 + 16) = vtPixelTransferAppendMetalNodeCallback;
      *(_BYTE *)(v61 + 56) = 0;
      *(_QWORD *)(v61 + 64) = v57;
    }
  }
  else
  {
LABEL_102:
    if (!v72)
    {
      if ((v133[10] & 2) != 0)
        VTMetalTransferSessionInitializeDestinationArray(cf);
      FigPriorityQueueCreate();
      if (!v143)
      {
        v43 = FigSignalErrorAt();
        v42 = 0;
        goto LABEL_20;
      }
      v95 = 0;
      *((_QWORD *)v127 + 1) = -1;
      v96 = v39 + 20021;
      do
      {
        v126 = 0;
        memset(v144, 0, 72);
        LOBYTE(v128) = 0;
        *((_QWORD *)&v128 + 1) = VTPixelTransferSessionGetDynamicServiceList();
        LODWORD(v129) = 0;
        WORD2(v129) = 0;
        v130 = 0uLL;
        *((_QWORD *)&v129 + 1) = 0;
        if ((v133[10] & 2) != 0)
        {
          LOBYTE(v131) = VTMetalTransferSessionCanAcceptSource1xWithSession(a22, *(_DWORD *)v127);
          if (((BYTE4(v141) ^ BYTE4(v126)) & 1) != 0)
            BYTE1(v131) = VTMetalTransferSessionCanDoHighQualityScaling(a22, *(_DWORD *)v127);
        }
        while (vtPixelTransferGraphNextEdgeIterator(v127, (uint64_t)&v126, (uint64_t)v144, (uint64_t)&v128, cf))
        {
          v97 = v127;
          v98 = vtPixelTransferGraphEdgeCost((uint64_t)v127, (uint64_t)&v126, (uint64_t)v144, (uint64_t)cf);
          v99 = v98;
          if ((v95 & 1) == 0
            || ((v100 = *((_QWORD *)v97 + 1), !__CFADD__(v98, v100)) ? (v101 = 0) : (v101 = 1),
                (v102 = __CFADD__(v100, v98), v103 = v100 + v98, v102) ? (v99 = -1) : (v99 = v103),
                (v101 & 1) == 0))
          {
            if (v99 != -1)
            {
              v104 = v126;
              v105 = (v126 ^ BYTE4(v126) ^ (v126 >> 36) & 0xFF0) % 0x4E35;
              v106 = (char *)v39[v105];
              if (v106)
              {
                while ((v126 & 0xFF00FFFFFFFFLL | ((unint64_t)BYTE4(v126) << 32)) != (*(_QWORD *)v106 & 0xFFFFFFFFFFFFLL))
                {
                  if (v105 + 1 <= 0x4E34)
                    ++v105;
                  else
                    v105 = 0;
                  v106 = (char *)v39[v105];
                  if (!v106)
                    goto LABEL_139;
                }
                v109 = *((_QWORD *)v106 + 1);
              }
              else
              {
LABEL_139:
                v107 = *v96 + 1;
                *v96 = v107;
                if (v107 > 0x4E34 || (v108 = (char *)CFAllocatorAllocate(v38, 80, 0)) == 0)
                {
                  v42 = 0;
                  v43 = 0;
                  goto LABEL_20;
                }
                v106 = v108;
                *(_QWORD *)v108 = v104;
                *(_OWORD *)(v108 + 24) = 0u;
                *(_OWORD *)(v108 + 40) = 0u;
                v109 = -1;
                *((_QWORD *)v108 + 1) = -1;
                *((_QWORD *)v108 + 2) = 0;
                *((_QWORD *)v108 + 8) = 0;
                *((_QWORD *)v108 + 9) = 0;
                v39[v105] = (unint64_t)v108;
              }
              if (v99 < v109)
              {
                v110 = *((_QWORD *)v106 + 9);
                v111 = *(_QWORD *)&v144[0];
                *((_QWORD *)v106 + 1) = v99;
                *((_QWORD *)v106 + 2) = v111;
                v112 = *(_OWORD *)((char *)&v144[1] + 8);
                *(_OWORD *)(v106 + 24) = *(_OWORD *)((char *)v144 + 8);
                *(_OWORD *)(v106 + 40) = v112;
                v106[56] = v144[4] & 1;
                *((_QWORD *)v106 + 8) = v127;
                if (v110)
                  FigPriorityQueueTokenUpdatePriority();
                else
                  FigPriorityQueueInsertItemAndCreateUpdateToken();
              }
            }
          }
          memset(v144, 0, 72);
        }
        FigPriorityQueueGetItem();
        if (!v127 || v127 == (_BYTE *)v61)
          break;
        v113 = (const void *)*((_QWORD *)v127 + 9);
        if (v113)
        {
          CFRelease(v113);
          *((_QWORD *)v127 + 9) = 0;
        }
        FigPriorityQueueRemoveItem();
        v95 = 1;
      }
      while (v127);
    }
  }
  CFAbsoluteTimeGetCurrent();
  if (!*(_QWORD *)(v61 + 64))
  {
    v42 = 0;
    goto LABEL_156;
  }
  v78 = 0;
  v79 = 0;
  v80 = v61;
  do
  {
    v80 = *(_QWORD *)(v80 + 64);
    ++v79;
    v78 += 7;
  }
  while (v80 != v57);
  v81 = CFAllocatorAllocate(v38, v78 * 8 + 56, 0);
  if (v81)
  {
    *v81 = &v142;
    v82 = &v81[v78];
    v82[1] = *(_QWORD *)(v57 + 16);
    v83 = *(_OWORD *)(v57 + 40);
    *((_OWORD *)v82 + 1) = *(_OWORD *)(v57 + 24);
    *((_OWORD *)v82 + 2) = v83;
    *((_BYTE *)v82 + 48) = *(_BYTE *)(v57 + 56);
    v84 = (int)v79;
    do
    {
      v85 = &v81[7 * v84];
      *v85 = v61;
      --v84;
      *(v85 - 6) = *(_QWORD *)(v61 + 16);
      v86 = *(_OWORD *)(v61 + 24);
      *(_OWORD *)(v85 - 3) = *(_OWORD *)(v61 + 40);
      *(_OWORD *)(v85 - 5) = v86;
      *((_BYTE *)v85 - 8) = *(_BYTE *)(v61 + 56);
      v61 = *(_QWORD *)(v61 + 64);
    }
    while (v61 != v57);
    v87 = 0;
    v123 = v81;
    v88 = v81;
    v89 = v79;
    while (v89)
    {
      memset((char *)&v144[2] + 8, 0, 32);
      v90 = *((_OWORD *)v88 + 2);
      *(_OWORD *)((char *)v144 + 8) = *((_OWORD *)v88 + 1);
      *(_OWORD *)((char *)&v144[1] + 8) = v90;
      v91 = (uint64_t (*)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, CFTypeRef *))v88[1];
      *(_QWORD *)&v144[0] = v91;
      LOBYTE(v144[4]) = *((_BYTE *)v88 + 48);
      v92 = *v88;
      v93 = v88[7];
      if (!cf[0])
      {
        v94 = VTPixelTransferChainCreate(allocator, (uint64_t *)cf);
        if ((_DWORD)v94)
          goto LABEL_115;
        v91 = *(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, CFTypeRef *))&v144[0];
      }
      v94 = v91(v92, v93, v144, v87, v79, cf);
      --v89;
      v88 += 7;
      v87 = (v87 + 1);
      if ((_DWORD)v94)
      {
LABEL_115:
        v43 = v94;
        v42 = v123;
        v38 = (const __CFAllocator *)allocator;
        goto LABEL_20;
      }
    }
    v42 = v123;
    v38 = (const __CFAllocator *)allocator;
LABEL_156:
    if (VTPixelTransferChainHasNodes((const __CFArray *)cf[0]))
    {
      v43 = 0;
      *a23 = cf[0];
      cf[0] = 0;
      goto LABEL_20;
    }
LABEL_19:
    v43 = 4294954391;
    goto LABEL_20;
  }
  v42 = 0;
  v43 = 4294954305;
LABEL_20:
  for (i = 0; i != 20021; ++i)
  {
    v45 = (_QWORD *)v39[i];
    if (v45)
    {
      v46 = (const void *)v45[9];
      if (v46)
      {
        CFRelease(v46);
        *(_QWORD *)(v39[i] + 72) = 0;
        v45 = (_QWORD *)v39[i];
      }
      CFAllocatorDeallocate(v38, v45);
    }
  }
  CFAllocatorDeallocate(v38, v39);
  if (v143)
    CFRelease(v143);
LABEL_28:
  if (cf[0])
    CFRelease(cf[0]);
  if (v134[0])
    CFRelease(v134[0]);
  VTMetalTransferSessionCleanupDestinationArray((uint64_t)cf);
  if (v42)
    CFAllocatorDeallocate(v38, v42);
  return v43;
}

uint64_t nodeInfoCompare(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  _BOOL8 v5;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  v4 = v2 >= v3;
  v5 = v2 > v3;
  if (v4)
    return v5;
  else
    return -1;
}

uint64_t vtPixelTransferGraphNextEdgeIterator(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  char v10;
  uint64_t result;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  int *v15;
  int v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  int v44;
  char v45;
  unsigned int v46;
  unsigned int v47;
  char v48;
  char v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  unint64_t v56;
  BOOL v57;
  char v58;
  char *v59;

  v10 = a5[26];
  if ((v10 & 1) != 0 && !*(_BYTE *)a4)
  {
    v17 = *(unint64_t **)(a4 + 8);
    if (!v17)
    {
LABEL_32:
      *(_BYTE *)a4 = 1;
      *(_QWORD *)(a4 + 32) = 0;
      *(_QWORD *)(a4 + 40) = 0;
      *(_QWORD *)(a4 + 24) = 0;
      v10 = a5[26];
      if ((v10 & 2) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
    v18 = (unint64_t *)(a4 + 24);
    while (1)
    {
      v19 = *v18;
      while (1)
      {
        v20 = v17[1];
        if (*(_DWORD *)(v20 + 4 * v19) == *(_DWORD *)a1)
          break;
        v21 = *v17;
        v22 = v19 + 1;
        while (1)
        {
          *v18 = v22;
          if (v22 >= v21)
            break;
          v23 = *(_DWORD *)(v20 + 4 * v22++);
          if (v23 == *(_DWORD *)a1)
            goto LABEL_25;
        }
        v19 = 0;
        v17 = (unint64_t *)v17[9];
        *(_QWORD *)(a4 + 8) = v17;
        *v18 = 0;
        *(_QWORD *)(a4 + 32) = 0;
        if (!v17)
          goto LABEL_32;
      }
LABEL_25:
      if (*(_QWORD *)(a4 + 40) <= 0x3FuLL)
        break;
LABEL_30:
      v26 = *(_QWORD *)(a4 + 32) + 1;
      *(_QWORD *)(a4 + 32) = v26;
      *(_QWORD *)(a4 + 40) = 0;
      if (v26 >= v17[2])
      {
        *v18 = 0;
        *(_QWORD *)(a4 + 32) = 0;
        v17 = (unint64_t *)v17[9];
        *(_QWORD *)(a4 + 8) = v17;
        if (!v17)
          goto LABEL_32;
      }
    }
    while (1)
    {
      v24 = a1[4] & 0x1F;
      *(_BYTE *)(a2 + 4) = v24;
      v25 = *(_QWORD *)(a4 + 40);
      if ((v25 & ~a5[20] & 7) == 0 && (a1[4] & v25 & 7) == 0)
        break;
      *(_QWORD *)(a4 + 40) = v25 + 1;
      if ((unint64_t)(v25 + 1) >= 0x40)
      {
        v17 = *(unint64_t **)(a4 + 8);
        goto LABEL_30;
      }
    }
    if ((v25 & 1) != 0)
    {
      v24 |= 1u;
      *(_BYTE *)(a2 + 4) = v24;
      v25 = *(_QWORD *)(a4 + 40);
      if ((v25 & 2) == 0)
      {
LABEL_42:
        if ((v25 & 4) == 0)
          goto LABEL_43;
        goto LABEL_50;
      }
    }
    else if ((v25 & 2) == 0)
    {
      goto LABEL_42;
    }
    v24 |= 2u;
    *(_BYTE *)(a2 + 4) = v24;
    v25 = *(_QWORD *)(a4 + 40);
    if ((v25 & 4) == 0)
    {
LABEL_43:
      if ((v25 & 8) == 0)
        goto LABEL_44;
      goto LABEL_51;
    }
LABEL_50:
    v24 |= 4u;
    *(_BYTE *)(a2 + 4) = v24;
    v25 = *(_QWORD *)(a4 + 40);
    if ((v25 & 8) == 0)
    {
LABEL_44:
      if ((v25 & 0x10) == 0)
        goto LABEL_46;
      goto LABEL_45;
    }
LABEL_51:
    v24 ^= 8u;
    *(_BYTE *)(a2 + 4) = v24;
    v25 = *(_QWORD *)(a4 + 40);
    if ((v25 & 0x10) == 0)
    {
LABEL_46:
      *(_QWORD *)(a4 + 40) = v25 + 1;
      *(_DWORD *)a2 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 8) + 24) + 8 * *(_QWORD *)(a4 + 32));
      *(_BYTE *)(a2 + 6) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a4 + 8) + 24) + 8 * *(_QWORD *)(a4 + 32) + 4);
      v27 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a4 + 8) + 24) + 8 * *(_QWORD *)(a4 + 32) + 5);
      *(_BYTE *)(a2 + 7) = v27;
      if ((v27 & 2) == 0)
      {
        v28 = 0;
LABEL_104:
        *(_BYTE *)(a2 + 5) = v28;
        v52 = *(_QWORD *)(a4 + 8);
        if ((*(_DWORD *)(v52 + 32) & 8) != 0)
          v53 = 1;
        else
          v53 = 4;
        *(_DWORD *)(a3 + 40) = v53;
        v54 = *(_QWORD *)(v52 + 48);
        *(_QWORD *)a3 = vtPixelTransferAppendDynamicNodeCallback;
        *(_QWORD *)(a3 + 8) = v54;
        *(_QWORD *)(a3 + 16) = *(_QWORD *)(*(_QWORD *)(a4 + 8) + 56);
        *(_QWORD *)(a3 + 24) = *(_QWORD *)(*(_QWORD *)(a4 + 8) + 64);
        *(int64x2_t *)(a3 + 48) = vdupq_n_s64(0x64uLL);
        *(_BYTE *)(a3 + 64) = 0;
        return 1;
      }
      if ((a5[23] & 3) == 1)
      {
        if ((a1[7] & 2) == 0)
        {
          v28 = 1;
          goto LABEL_104;
        }
        v51 = a1 + 5;
      }
      else
      {
        v51 = a5 + 21;
      }
      v28 = *v51;
      goto LABEL_104;
    }
LABEL_45:
    *(_BYTE *)(a2 + 4) = v24 ^ 0x10;
    v25 = *(_QWORD *)(a4 + 40);
    goto LABEL_46;
  }
  if ((a5[26] & 2) == 0)
    goto LABEL_5;
LABEL_4:
  if (!*(_BYTE *)(a4 + 16))
  {
    result = VTPixelTransferSessionGetNextMetalBlitter(a1, a2, a3, a4, (uint64_t)a5);
    if ((_DWORD)result)
      return result;
    *(_BYTE *)(a4 + 16) = 1;
    *(_QWORD *)(a4 + 32) = 0;
    *(_QWORD *)(a4 + 40) = 0;
    *(_QWORD *)(a4 + 24) = 0;
    v10 = a5[26];
  }
LABEL_5:
  if ((v10 & 4) == 0)
    return 0;
  if (!*(_BYTE *)(a4 + 17))
  {
    result = VTPixelTransferSessionGetNextSoftwareBlitter((uint64_t)a1, a2, a3, a4);
    if ((_DWORD)result)
      return result;
    *(_BYTE *)(a4 + 17) = 1;
    *(_QWORD *)(a4 + 32) = 0;
    *(_QWORD *)(a4 + 40) = 0;
    *(_QWORD *)(a4 + 24) = 0;
  }
  if (!*(_BYTE *)(a4 + 18))
  {
    result = VTPixelTransferSessionGetNextVImageBlitter((uint64_t)a1, a2, a3, a4);
    if ((_DWORD)result)
      return result;
    *(_BYTE *)(a4 + 18) = 1;
    *(_QWORD *)(a4 + 32) = 0;
    *(_QWORD *)(a4 + 40) = 0;
    *(_QWORD *)(a4 + 24) = 0;
  }
  if (!*(_BYTE *)(a4 + 19))
  {
    v12 = (_QWORD *)(a4 + 24);
    v13 = *(_QWORD *)(a4 + 24);
    if (v13 <= 0x2E)
    {
      v14 = v13 + 1;
      v15 = (int *)((char *)&sSrcColorOptimizedPixelFormatArray + 8 * v13);
      while (1)
      {
        v16 = *v15;
        v15 += 2;
        if (v16 == *(_DWORD *)a1)
          break;
        *v12 = v14++;
        if (v14 == 48)
          goto LABEL_64;
      }
      v29 = *(_QWORD *)(a4 + 32);
      if (v29 <= 0x34)
      {
        v30 = *(_QWORD *)(a4 + 40) < 3uLL;
        while (!v30)
        {
LABEL_63:
          *(_QWORD *)(a4 + 32) = ++v29;
          *(_QWORD *)(a4 + 40) = 0;
          v30 = 1;
          if (v29 >= 0x35)
            goto LABEL_64;
        }
        while (1)
        {
          v31 = a1[4] & 0x1F;
          *(_BYTE *)(a2 + 4) = v31;
          v32 = *(_QWORD *)(a4 + 40);
          if ((v32 & ~(unint64_t)a5[20]) == 0 && (v32 & a1[4]) == 0)
            break;
          v33 = v32 + 1;
          *(_QWORD *)(a4 + 40) = v33;
          if (v33 >= 3)
          {
            v29 = *(_QWORD *)(a4 + 32);
            goto LABEL_63;
          }
        }
        if ((v32 & 2) != 0)
        {
          *(_BYTE *)(a2 + 4) = v31 | 2;
          v32 = *(_QWORD *)(a4 + 40);
        }
        v55 = *((_DWORD *)&sDstColorOptimizedPixelFormatArray + 2 * *(_QWORD *)(a4 + 32));
        *(_QWORD *)(a4 + 40) = v32 + 1;
        *(_DWORD *)a2 = v55;
        *(_BYTE *)(a2 + 6) = *((_BYTE *)&sDstColorOptimizedPixelFormatArray + 8 * *(_QWORD *)(a4 + 32) + 4);
        v56 = *(_QWORD *)(a4 + 32);
        *(_BYTE *)(a2 + 7) = *((_BYTE *)&sDstColorOptimizedPixelFormatArray + 8 * v56 + 5);
        v57 = *(_DWORD *)a1 == v55 && ((a1[4] >> 5) & 1) == 0;
        if (v56 < 0xA)
        {
          v58 = 0;
LABEL_123:
          *(_BYTE *)(a2 + 5) = v58;
          *(_QWORD *)a3 = vtPixelTransferAppendColorProcessingBlitterNodeCallback;
          *(_DWORD *)(a3 + 40) = 4;
          *(int64x2_t *)(a3 + 48) = vdupq_n_s64(0x136uLL);
          *(_BYTE *)(a3 + 64) |= v57;
          return 1;
        }
        if ((a5[23] & 3) == 1)
        {
          if ((a1[7] & 2) == 0)
          {
            v58 = 1;
            goto LABEL_123;
          }
          v59 = a1 + 5;
        }
        else
        {
          v59 = a5 + 21;
        }
        v58 = *v59;
        goto LABEL_123;
      }
    }
LABEL_64:
    *(_DWORD *)a2 = 0;
    *(_QWORD *)(a3 + 64) = 0;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_BYTE *)(a4 + 19) = 1;
    *(_QWORD *)(a4 + 32) = 0;
    *(_QWORD *)(a4 + 40) = 0;
    *v12 = 0;
  }
  if (*(_BYTE *)(a4 + 20))
    goto LABEL_79;
  v34 = *(_QWORD *)(a4 + 32);
  if (v34)
  {
    if (v34 > 0x66)
    {
LABEL_78:
      *(_DWORD *)a2 = 0;
      *(_QWORD *)(a3 + 64) = 0;
      *(_OWORD *)(a3 + 32) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_BYTE *)(a4 + 20) = 1;
      *(_QWORD *)(a4 + 32) = 0;
      *(_QWORD *)(a4 + 40) = 0;
      *(_QWORD *)(a4 + 24) = 0;
LABEL_79:
      if ((a5[20] & 0x1C) == 0 || *(_BYTE *)(a4 + 21))
        return 0;
      v41 = *(_QWORD *)(a4 + 32);
      if (v41 > 0xB3)
      {
LABEL_82:
        result = 0;
        *(_DWORD *)a2 = 0;
        *(_QWORD *)(a3 + 64) = 0;
        *(_OWORD *)(a3 + 32) = 0u;
        *(_OWORD *)(a3 + 48) = 0u;
        *(_OWORD *)a3 = 0u;
        *(_OWORD *)(a3 + 16) = 0u;
        *(_BYTE *)(a4 + 21) = 1;
        *(_QWORD *)(a4 + 32) = 0;
        *(_QWORD *)(a4 + 40) = 0;
        *(_QWORD *)(a4 + 24) = 0;
        return result;
      }
      v42 = v41 + 1;
      v43 = (char *)&vtRotationBlitterTable + 40 * v41;
      while (1)
      {
        v44 = *(_DWORD *)v43;
        if (*(_DWORD *)v43 == *(_DWORD *)a1)
          break;
        *(_QWORD *)(a4 + 32) = v42++;
        v43 += 40;
        if (v42 == 181)
        {
          v44 = 1983000886;
          if (*(_DWORD *)a1 != 1983000886)
            goto LABEL_82;
          v43 = (char *)&unk_1E2F22E60;
          break;
        }
      }
      v45 = v43[16];
      if (v45)
        v45 = ((a1[4] >> 5) & 1) == 0;
      *(_DWORD *)a2 = v44;
      *(_WORD *)(a2 + 6) = *((_WORD *)v43 + 2);
      *(_BYTE *)(a2 + 5) = a1[5];
      v46 = a1[4];
      LOBYTE(v47) = v46 & 0xDF;
      *(_BYTE *)(a2 + 4) = v46 & 0xDF;
      v48 = v43[6];
      if ((v48 & 4) != 0)
      {
        v47 = ((2 * v46) & 0x10 | v46 & 0xFFFFFFC7 | (v46 >> 1) & 8) ^ 4;
        *(_BYTE *)(a2 + 4) = ((2 * v46) & 0x10 | v46 & 0xC7 | (v46 >> 1) & 8) ^ 4;
      }
      if ((v48 & 0x18) != 0)
      {
        if ((v48 & 0x10) != 0)
          LOBYTE(v47) = v47 ^ 0x10;
        if ((v48 & 8) != 0)
          v49 = v47 ^ 8;
        else
          v49 = v47;
        *(_BYTE *)(a2 + 4) = v49;
      }
      v50 = *((_QWORD *)v43 + 1);
      *(_QWORD *)a3 = VTPixelTransferAppendSoftwareRotationNodeCallback;
      *(_QWORD *)(a3 + 8) = v50;
      *(_DWORD *)(a3 + 40) = 4;
      *(_OWORD *)(a3 + 48) = *(_OWORD *)(v43 + 24);
      *(_BYTE *)(a3 + 64) |= v45;
      goto LABEL_100;
    }
    v35 = &VTPixelGraphScalerTable[32 * v34];
  }
  else
  {
    v35 = "800L800L\b";
    v36 = 1;
    while (*(_DWORD *)v35 != *(_DWORD *)a1)
    {
      *(_QWORD *)(a4 + 32) = v36++;
      v35 += 32;
      if (v36 == 104)
      {
        v35 = "AfGRAfGR ";
        break;
      }
    }
  }
  if (*(_DWORD *)v35 != *(_DWORD *)a1)
    goto LABEL_78;
  *(_DWORD *)a2 = *((_DWORD *)v35 + 1);
  *(_BYTE *)(a2 + 6) = v35[8];
  *(_BYTE *)(a2 + 7) = v35[10];
  if ((a5[20] & 1) != 0)
    v37 = a1[4] & 0x1E | 1;
  else
    v37 = a1[4] & 0x1F;
  *(_BYTE *)(a2 + 4) = v37;
  *(_BYTE *)(a2 + 5) = a1[5];
  v38 = *((_QWORD *)v35 + 2);
  *(_QWORD *)a3 = vtPixelTransferAppendScalerNodeCallback;
  *(_QWORD *)(a3 + 8) = v38;
  *(_DWORD *)(a3 + 40) = 4;
  v39 = *((_QWORD *)v35 + 3);
  *(_QWORD *)&v40 = v39;
  *((_QWORD *)&v40 + 1) = HIDWORD(v39);
  *(_OWORD *)(a3 + 48) = v40;
  *(_BYTE *)(a3 + 64) = 0;
LABEL_100:
  ++*(_QWORD *)(a4 + 32);
  return 1;
}

uint64_t vtPixelTransferGraphEdgeCost(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  int v16;
  _BOOL4 v17;
  BOOL v18;
  unsigned int v19;
  BOOL v20;
  BOOL v21;
  BOOL v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint32x4_t v30;
  int64x2_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int64x2_t v34;
  int64x2_t v35;
  uint64_t v36;

  v4 = *(unsigned __int8 *)(a2 + 4);
  v5 = 60;
  if ((v4 & 1) != 0)
    v5 = 108;
  v6 = 68;
  if ((v4 & 1) != 0)
    v6 = 116;
  v7 = *(_DWORD *)(a3 + 40);
  if ((v7 & *(_BYTE *)(a4 + 26)) == 0)
    return -1;
  v8 = *(unsigned __int8 *)(a2 + 6);
  v9 = (unint64_t)*(double *)(a4 + v5);
  v10 = (unint64_t)*(double *)(a4 + v6);
  if ((v7 - 1) > 1)
    goto LABEL_27;
  if ((a4 + 8 == a1
     || *(_DWORD *)(a4 + 8) == *(_DWORD *)a1
     && *(unsigned __int8 *)(a4 + 12) == *(unsigned __int8 *)(a1 + 4)
     && *(unsigned __int8 *)(a4 + 13) == *(unsigned __int8 *)(a1 + 5))
    && !*(_BYTE *)(a4 + 24)
    || (a4 + 16 == a2
     || *(_DWORD *)(a4 + 16) == *(_DWORD *)a2
     && *(unsigned __int8 *)(a4 + 20) == v4
     && *(unsigned __int8 *)(a4 + 21) == *(unsigned __int8 *)(a2 + 5))
    && !*(_BYTE *)(a4 + 25))
  {
    return -1;
  }
  if (v7 == 1)
  {
    v11 = 0;
    if ((v4 & 2) == 0 || (*(_BYTE *)(a1 + 4) & 2) != 0)
    {
LABEL_28:
      if (*(_BYTE *)(a1 + 6))
        goto LABEL_29;
      goto LABEL_55;
    }
    if (!*(_BYTE *)(a4 + 125))
    {
LABEL_27:
      v11 = 0;
      goto LABEL_28;
    }
    return -1;
  }
  if (!*(_QWORD *)(a4 + 176))
    return -1;
  v12 = v10 * v9;
  if (v10 * v9 > 0x9C40)
    goto LABEL_27;
  if ((v4 & 1) != 0)
  {
    v11 = 630 * v12;
    if (*(_BYTE *)(a1 + 6))
    {
LABEL_29:
      if (*(_BYTE *)(a2 + 6) && *(unsigned __int8 *)(a1 + 6) > v8)
      {
        v13 = *(unsigned __int8 *)(a4 + 14);
        v14 = *(unsigned __int8 *)(a4 + 22);
        if (*(_BYTE *)(a4 + 14))
          v15 = v14 == 0;
        else
          v15 = 1;
        v16 = !v15;
        v17 = v13 > v14;
        v18 = (v16 & v17) == 0;
        if ((v16 & v17) != 0)
          v19 = *(unsigned __int8 *)(a4 + 22);
        else
          v19 = *(unsigned __int8 *)(a4 + 14);
        if (v18)
          v13 = *(unsigned __int8 *)(a4 + 22);
        v20 = !v13 || v13 >= v8;
        v21 = !v20;
        v22 = v19 <= v8 || v19 == 0;
        v23 = -1;
        if (!v22 || v21)
          return v23;
      }
    }
  }
  else
  {
    v11 = 130 * v12;
    if (*(_BYTE *)(a1 + 6))
      goto LABEL_29;
  }
LABEL_55:
  v24 = *(unsigned __int8 *)(a2 + 7);
  if ((*(_BYTE *)(a1 + 7) & 0x30u) < (v24 & 0x30u) && (v24 & 0x30u) > (*(_BYTE *)(a4 + 23) & 0x30u))
    return -1;
  v25 = *(unsigned __int8 *)(a4 + 15);
  if ((v25 & 0x40) != 0 && (v24 & 0x40) == 0 && (*(_BYTE *)(a4 + 23) & 0x40) != 0)
    return -1;
  if ((~v25 & 3) != 0 && (~v24 & 3) == 0 && (*(_BYTE *)(a4 + 23) & 3) != 3)
    return -1;
  if ((*(_BYTE *)(a3 + 64) & 1) != 0)
    v26 = v11;
  else
    v26 = v11 + 1000;
  v27 = v10 * v9;
  if (*(_DWORD *)a2 == *(_DWORD *)(a4 + 16))
    v28 = 0;
  else
    v28 = 600 * v27;
  v29 = *(unsigned __int8 *)(a4 + 20) ^ v4;
  v30 = vmovl_u16((uint16x4_t)vceqz_s16((int16x4_t)vand_s8((int8x8_t)vdup_n_s16(v29), (int8x8_t)0x8000400020001)));
  v31.i64[0] = v30.u32[0];
  v31.i64[1] = v30.u32[1];
  v32 = (int8x16_t)vshrq_n_s64(vshlq_n_s64(v31, 0x38uLL), 0x38uLL);
  v31.i64[0] = v30.u32[2];
  v31.i64[1] = v30.u32[3];
  v33 = (int8x16_t)vdupq_n_s64(600 * v27);
  v34 = (int64x2_t)vbicq_s8(v33, (int8x16_t)vshrq_n_s64(vshlq_n_s64(v31, 0x38uLL), 0x38uLL));
  v35 = (int64x2_t)vbicq_s8(v33, v32);
  if ((v29 & 0x10) != 0)
    v36 = 600 * v27;
  else
    v36 = 0;
  return vaddvq_s64(vaddq_s64(v35, v34)) + v26 + v28 + v36 + *(_QWORD *)(a3 + 48) + v27 * *(_QWORD *)(a3 + 56);
}

uint64_t vtPixelTransferAppendDynamicNodeCallback(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v7;
  int v8;
  int v9;
  const CFStringRef *v10;
  int v11;
  int v12;
  _BOOL4 v13;
  const CFStringRef *v14;
  const CFStringRef *v15;
  int v16;
  int v17;
  __CFString **v18;
  __CFString *v19;
  __CFDictionary *MutableCopy;
  __CFDictionary *v21;
  uint64_t PixelBufferPoolAttributes;
  CFTypeRef v23;
  uint64_t appended;
  CFTypeRef cf;
  __int128 v27;
  double v28[4];

  cf = 0;
  v7 = *((unsigned __int8 *)a2 + 4) ^ *(unsigned __int8 *)(a1 + 4);
  v8 = (v7 >> 4) & 1;
  v9 = v7 & 0x18;
  v10 = &kVTRotation_180;
  if (v9 == 24)
    v11 = 0;
  else
    v11 = (v7 >> 4) & 1;
  if (v9 == 24)
    v12 = 0;
  else
    v12 = (v7 >> 3) & 1;
  if (v9 != 24)
    v10 = &kVTRotation_0;
  v13 = (v7 & 8) == 0;
  if (v8)
    v13 = 0;
  v14 = &kVTRotation_CCW90;
  if (!v8)
    v14 = &kVTRotation_CW90;
  if (v9 == 24)
    v13 = 0;
  else
    v8 = 0;
  if (v9 == 24)
    v15 = &kVTRotation_CW90;
  else
    v15 = v14;
  if ((v7 & 4) != 0)
    v16 = v8;
  else
    v16 = v11;
  if ((v7 & 4) != 0)
    v17 = v13;
  else
    v17 = v12;
  if ((v7 & 4) != 0)
    v18 = (__CFString **)v15;
  else
    v18 = (__CFString **)v10;
  v27 = 0u;
  *(_OWORD *)v28 = 0u;
  v19 = *v18;
  VTPixelTransferGraphGetCurrentDimensions(a1, (uint64_t)a2, a3, a6, 0, (uint64_t)&v27);
  MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (!MutableCopy)
    return 0;
  v21 = MutableCopy;
  if (v19 == CFSTR("Rotation0"))
    CFDictionaryRemoveValue(MutableCopy, CFSTR("Rotation"));
  else
    FigCFDictionarySetValue();
  if (v16)
    FigCFDictionarySetValue();
  else
    CFDictionaryRemoveValue(v21, CFSTR("FlipHorizontalOrientation"));
  if (v17)
  {
    FigCFDictionarySetValue();
    if ((v7 & 2) == 0)
    {
LABEL_37:
      CFDictionaryRemoveValue(v21, CFSTR("DestinationColorPrimaries"));
      CFDictionaryRemoveValue(v21, CFSTR("DestinationTransferFunction"));
      goto LABEL_40;
    }
  }
  else
  {
    CFDictionaryRemoveValue(v21, CFSTR("FlipVerticalOrientation"));
    if ((v7 & 2) == 0)
      goto LABEL_37;
  }
  FigCFDictionaryGetValue();
  FigCFDictionaryGetValue();
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
LABEL_40:
  PixelBufferPoolAttributes = VTPixelTransferChainCreatePixelBufferPoolAttributes(*a2, (unint64_t)v28[0], (unint64_t)v28[1], (CFMutableDictionaryRef *)&cf);
  v23 = cf;
  if ((_DWORD)PixelBufferPoolAttributes)
  {
    appended = PixelBufferPoolAttributes;
    if (!cf)
      goto LABEL_43;
    goto LABEL_42;
  }
  appended = vtPixelTransferChainAppendDynamicNode();
  v23 = cf;
  if (cf)
LABEL_42:
    CFRelease(v23);
LABEL_43:
  CFRelease(v21);
  return appended;
}

uint64_t vtPixelTransferAppendColorProcessingBlitterNodeCallback(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  CFStringRef StringForIntegerCodePoint;
  CFStringRef v11;
  uint64_t v12;
  __CFDictionary *MutableCopy;
  const __CFAllocator *v14;
  __CFDictionary *Mutable;
  BOOL v16;
  const void **v17;
  uint64_t PixelBufferPoolAttributes;
  uint64_t appended;
  __int128 v21;
  __int128 v22;
  CFTypeRef cf;
  void (*v24)(void);
  uint64_t v25;
  uint64_t v26;

  v25 = 0;
  v26 = 0;
  v24 = 0;
  StringForIntegerCodePoint = CVYCbCrMatrixGetStringForIntegerCodePoint(*(unsigned __int8 *)(a1 + 5));
  v11 = CVYCbCrMatrixGetStringForIntegerCodePoint(*((unsigned __int8 *)a2 + 5));
  cf = 0;
  v21 = 0u;
  v22 = 0u;
  VTPixelTransferGraphGetCurrentDimensions(a1, (uint64_t)a2, v12, a6, 0, (uint64_t)&v21);
  MutableCopy = 0;
  v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (((*((unsigned __int8 *)a2 + 4) ^ *(unsigned __int8 *)(a1 + 4)) & 2) == 0
    || (Mutable = (__CFDictionary *)FigCFDictionaryCreateMutableCopy(),
        MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy(),
        !Mutable))
  {
    Mutable = CFDictionaryCreateMutable(v14, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  }
  if (!MutableCopy)
    MutableCopy = CFDictionaryCreateMutable(v14, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
    v16 = MutableCopy == 0;
  else
    v16 = 1;
  if (v16)
  {
    appended = 4294954392;
  }
  else
  {
    v17 = (const void **)MEMORY[0x1E0CA8EE8];
    if (StringForIntegerCodePoint)
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA8EE8], StringForIntegerCodePoint);
    if (v11)
      CFDictionarySetValue(MutableCopy, *v17, v11);
    PixelBufferPoolAttributes = VTPixelBlitterColorHandlingOptimized_setup(*(_DWORD *)a1, Mutable, *a2, MutableCopy, 0, *(unsigned __int8 *)(a6 + 170), *(unsigned __int8 *)(a6 + 171), &v26, &v25, a3 + 32, (void (__cdecl **)(void *))&v24);
    if ((_DWORD)PixelBufferPoolAttributes
      || (PixelBufferPoolAttributes = VTPixelTransferChainCreatePixelBufferPoolAttributes(*a2, (unint64_t)*(double *)&v22, (unint64_t)*((double *)&v22 + 1), (CFMutableDictionaryRef *)&cf), (_DWORD)PixelBufferPoolAttributes))
    {
      appended = PixelBufferPoolAttributes;
    }
    else
    {
      appended = VTPixelTransferChainAppendSoftwareNode();
      if (!(_DWORD)appended)
        v26 = 0;
    }
  }
  if (cf)
    CFRelease(cf);
  if (v26)
    v24();
  if (Mutable)
    CFRelease(Mutable);
  if (MutableCopy)
    CFRelease(MutableCopy);
  return appended;
}

uint64_t vtPixelTransferAppendScalerNodeCallback(int *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t appended;
  uint64_t v10;
  __int128 v12;
  int64x2_t v13;
  int64x2_t v14;
  _OWORD v15[3];
  float64x2_t v16;
  float64x2_t v17;
  _OWORD v18[8];
  _OWORD v19[9];
  uint64_t v20;
  CFMutableDictionaryRef v21;

  v21 = 0;
  v20 = 0;
  memset(v19, 0, sizeof(v19));
  v17 = 0u;
  memset(v18, 0, sizeof(v18));
  v16 = 0u;
  memset(v15, 0, sizeof(v15));
  v13 = 0u;
  v14 = 0u;
  v12 = 0u;
  VTPixelTransferGraphGetCurrentDimensions((uint64_t)a1, (uint64_t)a2, a3, a6, 0, (uint64_t)&v16);
  appended = VTPixelTransferChainCreatePixelBufferPoolAttributes(*a2, (unint64_t)v17.f64[0], (unint64_t)v17.f64[1], &v21);
  if (!(_DWORD)appended)
  {
    VTConvertFloatRectToIntRect(a6 + 28, (uint64_t)v15);
    VTConvertFloatRectToIntRect(a6 + 76, (uint64_t)&v12);
    v13 = vcvtq_s64_f64(vcvtq_f64_f32(vrnda_f32(vcvt_f32_f64(v17))));
    v14 = vcvtq_s64_f64(vcvtq_f64_f32(vrnda_f32(vcvt_f32_f64(v16))));
    vtAllocatePlanarBuffersCommon(*a1, (uint64_t)v15, (uint64_t)v18);
    vtAllocatePlanarBuffersCommon(*a2, (uint64_t)&v12, (uint64_t)v19);
    appended = VTPixelTransferChainAppendScalerNode();
  }
  v10 = appended;
  vtFreePlanarBuffers((uint64_t)v18);
  vtFreePlanarBuffers((uint64_t)v19);
  if (v21)
    CFRelease(v21);
  return v10;
}

uint64_t vtCompressionSession_handleSessionTerminatedNotification()
{
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

CFTypeID VTCompressionSessionGetTypeID(void)
{
  MEMORY[0x1940281CC](&VTCompressionSessionGetTypeID_sRegisterVTCompressionSessionOnce, RegisterVTCompressionSession);
  return sVTCompressionSessionID;
}

uint64_t VTCompressionSessionCreateWithOptions(uint64_t a1, uint64_t a2, uint64_t a3, int a4, const __CFDictionary *a5, const void *a6, uint64_t a7, uint64_t a8, uint64_t a9, const __CFDictionary *a10, uint64_t *a11)
{
  uint64_t *v11;
  uint64_t Instance;
  uint64_t v20;
  const void *Value;
  void *v22;
  pid_t v24;
  const __CFAllocator *v25;
  size_t v26;
  const void *v27;
  const __CFBoolean *v28;
  CFTypeID TypeID;
  const __CFBoolean *v30;
  const __CFBoolean *v31;
  const void *v32;
  CFTypeID v33;
  _BOOL4 v34;
  BOOL v35;
  int v36;
  CFTypeRef v37;
  const __CFDictionary *v38;
  const __CFDictionary *MutableCopy;
  CFTypeRef v40;
  uint64_t v41;
  int v42;
  unsigned __int16 v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const __CFDictionary *v51;
  uint64_t v52;
  uint64_t v53;
  char v55;
  unint64_t buffer;
  uint64_t v57;
  uint64_t v58;

  v11 = a11;
  v58 = *MEMORY[0x1E0C80C00];
  v55 = 0;
  if (!a11)
    return FigSignalErrorAt();
  if ((int)a2 < 1)
    return FigSignalErrorAt();
  if ((int)a3 <= 0)
    return FigSignalErrorAt();
  *a11 = 0;
  MEMORY[0x1940281CC](&VTCompressionSessionGetTypeID_sRegisterVTCompressionSessionOnce, RegisterVTCompressionSession);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v20 = Instance;
  Value = (const void *)FigCFDictionaryGetValue();
  v53 = a7;
  v52 = a8;
  if (Value)
  {
    v22 = (void *)CFRetain(Value);
LABEL_11:
    v27 = v22;
    goto LABEL_12;
  }
  v24 = getpid();
  proc_name(v24, &buffer, 0x21u);
  LOBYTE(v57) = 0;
  if ((_BYTE)buffer)
  {
    v25 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v26 = strnlen((const char *)&buffer, 0x21uLL);
    v22 = (void *)CFStringCreateWithBytes(v25, (const UInt8 *)&buffer, v26, 0x8000100u, 0);
    goto LABEL_11;
  }
  v27 = 0;
LABEL_12:
  v51 = a5;
  if (a5)
  {
    v28 = (const __CFBoolean *)CFDictionaryGetValue(a5, CFSTR("RequiredLowLatency"));
    if (v28)
    {
      TypeID = CFBooleanGetTypeID();
      if (TypeID == CFGetTypeID(v28))
        LODWORD(v28) = CFBooleanGetValue(v28);
      else
        LODWORD(v28) = 0;
    }
    v30 = (const __CFBoolean *)CFDictionaryGetValue(a5, CFSTR("EnableLowLatencyRateControl"));
    if (v30)
    {
      v31 = v30;
      v32 = v27;
      v33 = CFBooleanGetTypeID();
      if (v33 == CFGetTypeID(v31))
      {
        v27 = v32;
        if ((_DWORD)v28)
          LOBYTE(v28) = 1;
        else
          LODWORD(v28) = CFBooleanGetValue(v31) != 0;
      }
      else
      {
        v27 = v32;
      }
      a5 = v51;
    }
    v11 = a11;
  }
  else
  {
    LOBYTE(v28) = 0;
  }
  *(_BYTE *)(v20 + 794) = (_BYTE)v28;
  if (a10)
    v34 = CFDictionaryGetValue(a10, CFSTR("AllowClientProcessEncode")) == (const void *)*MEMORY[0x1E0C9AE50];
  else
    v34 = 0;
  if (VTVideoCodecService_ShouldUseSeparateCodecProcessForEncode())
  {
    if (FigServer_IsVideocodecd())
      goto LABEL_36;
  }
  else if (FigServer_IsServerProcess())
  {
    goto LABEL_36;
  }
  if (!v34 && !VTShouldRunVideoEncodersInProcess())
  {
    v47 = *(unsigned __int8 *)(v20 + 794);
    v48 = VTCompressionSessionRemote_Create(v20, a1, a2, a3, a4, a5, (uint64_t)a6, v53, (uint64_t)v27, v52, a9, (uint64_t *)(v20 + 24));
    if ((_DWORD)v48)
    {
      v50 = v48;
      MutableCopy = 0;
      goto LABEL_78;
    }
    MutableCopy = 0;
    if (v47)
      *(_QWORD *)(v20 + 808) = VTRateControlReactionObserverCreate(v20, (uint64_t)vtRateControlReactionObserverCallback);
    if (*(_QWORD *)(v20 + 432))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      v49 = FigNotificationCenterAddWeakListener();
      if ((_DWORD)v49)
        goto LABEL_87;
    }
    v50 = 0;
    *(CFAbsoluteTime *)(v20 + 840) = CFAbsoluteTimeGetCurrent();
    *v11 = v20;
    v20 = 0;
    goto LABEL_78;
  }
LABEL_36:
  buffer = 0;
  if (VTRateControlGetVersion((uint64_t *)&buffer))
    v35 = 0;
  else
    v35 = buffer > 0x6C;
  v36 = v35;
  *(_BYTE *)(v20 + 795) = v36;
  if (!*(_BYTE *)(v20 + 794) && !v36)
  {
    v37 = 0;
    v38 = a5;
    if (!a5)
    {
LABEL_53:
      *(_QWORD *)(v20 + 56) = v37;
      *(_DWORD *)(v20 + 40) = a2;
      *(_DWORD *)(v20 + 44) = a3;
      *(_DWORD *)(v20 + 48) = a4;
      if (a6)
        v40 = CFRetain(a6);
      else
        v40 = 0;
      *(_QWORD *)(v20 + 64) = v40;
      *(_QWORD *)(v20 + 80) = v52;
      *(_QWORD *)(v20 + 88) = a9;
      *(_QWORD *)(v20 + 104) = FigSimpleMutexCreate();
      *(_QWORD *)(v20 + 112) = 1;
      *(_DWORD *)(v20 + 120) = 0;
      *(_QWORD *)(v20 + 464) = FigSimpleMutexCreate();
      *(_DWORD *)(v20 + 480) = 1;
      *(_BYTE *)(v20 + 256) = 1;
      v41 = *(_QWORD *)(v20 + 440);
      VTEncoderSessionCreateTimeStampQueue(v20 + 392);
      *(_QWORD *)(v20 + 312) = 0;
      *(_QWORD *)(v20 + 320) = 0;
      *(_QWORD *)(v20 + 288) = 0;
      *(_QWORD *)(v20 + 296) = vtCompressionSessionCompressionWork;
      *(_QWORD *)(v20 + 272) = dispatch_group_create();
      *(_QWORD *)(v20 + 280) = 0;
      *(_WORD *)(v20 + 528) = 1;
      *(_QWORD *)(v20 + 532) = 0;
      *(_DWORD *)(v20 + 16) = 0;
      if (vtCompressionSessionStoreHDRDefaultWrites_onceToken != -1)
        dispatch_once(&vtCompressionSessionStoreHDRDefaultWrites_onceToken, &__block_literal_global);
      v42 = vtCompressionSessionStoreHDRDefaultWrites_hdrEnabled;
      *(_BYTE *)(v20 + 552) = vtCompressionSessionStoreHDRDefaultWrites_hdrEnabled;
      *(_BYTE *)(v20 + 553) = vtCompressionSessionStoreHDRDefaultWrites_hdrAlwaysGenerateStats;
      *(_BYTE *)(v20 + 641) = vtCompressionSessionStoreHDRDefaultWrites_enableAmbientViewingEnvironment;
      *(_BYTE *)(v20 + 644) = vtCompressionSessionStoreHDRDefaultWrites_generateDM4;
      if (a4 <= 1634743415)
      {
        if (a4 == 1634742376 || a4 == 1634742888)
          goto LABEL_70;
        v43 = 13416;
      }
      else
      {
        if ((a4 - 1634755432) <= 0xB && ((1 << (a4 - 104)) & 0x8C1) != 0
          || (a4 - 1634759272) <= 6 && ((1 << (a4 - 104)) & 0x51) != 0)
        {
          goto LABEL_70;
        }
        v43 = 13432;
      }
      if (a4 != (v43 | 0x61700000) && v42)
      {
        v44 = 0;
        goto LABEL_71;
      }
LABEL_70:
      v44 = *MEMORY[0x1E0C9AE40];
LABEL_71:
      *(_QWORD *)(v20 + 576) = v44;
      *(_BYTE *)(v20 + 608) = 0;
      *(_QWORD *)(v20 + 616) = 0;
      v45 = MEMORY[0x1E0CA2E18];
      *(_OWORD *)(v20 + 584) = *MEMORY[0x1E0CA2E18];
      *(_QWORD *)(v20 + 600) = *(_QWORD *)(v45 + 16);
      *(_QWORD *)(v20 + 560) = 0;
      *(_DWORD *)(v20 + 568) = 0;
      *(_WORD *)(v20 + 642) = 0;
      *(_QWORD *)(v20 + 680) = 0;
      *(_WORD *)(v20 + 792) = 256;
      *(_OWORD *)(v20 + 624) = 0u;
      *(_OWORD *)(v20 + 656) = 0u;
      *(_QWORD *)(v20 + 669) = 0;
      v46 = CFGetAllocator((CFTypeRef)v20);
      VTSelectAndCreateVideoEncoderInstanceInternal(a4, v46, 0, *(CFTypeRef *)(v20 + 56), v41, v20 + 432, (int)&v55, v20 + 440, v20 + 456);
    }
LABEL_52:
    v37 = CFRetain(v38);
    goto LABEL_53;
  }
  CFGetAllocator((CFTypeRef)*MEMORY[0x1E0C9AE00]);
  MutableCopy = (const __CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (MutableCopy)
  {
    if (!VTRateControlSessionCreate(a1, a2, a3, a4, (uint64_t)MutableCopy, (uint64_t)a6, 0, (uint64_t)vtRateControlSessionBeforeEncodeCallback, (uint64_t)vtCompressionSessionCompleteFramesCallback, (_QWORD *)(v20 + 800)))
    {
      *(_QWORD *)(*(_QWORD *)(v20 + 800) + 24) = v20;
      if (*(_BYTE *)(v20 + 794) && !CFDictionaryGetValue(MutableCopy, CFSTR("EncoderUsage")))
        FigCFDictionarySetInt32();
      v38 = MutableCopy;
      goto LABEL_52;
    }
    v49 = FigSignalErrorAt();
LABEL_87:
    v50 = v49;
    goto LABEL_78;
  }
  FigSignalErrorAt();
  v50 = 0;
LABEL_78:
  if (v27)
    CFRelease(v27);
  if (MutableCopy)
    CFRelease(MutableCopy);
  if (v20)
    CFRelease((CFTypeRef)v20);
  return v50;
}

void vtRateControlSessionBeforeEncodeCallback(uint64_t a1, const void *a2, uint64_t a3, __int128 *a4, __int128 *a5, uint64_t a6, const __CFDictionary *a7, uint64_t a8, char a9)
{
  uint64_t v10;
  _QWORD *Value;
  unint64_t v19;
  unsigned int (*v20)(unint64_t, const __CFDictionary *);
  uint64_t v21;
  uint64_t (*v22)(uint64_t, const void *, uint64_t, __int128 *, __int128 *, uint64_t, int *);
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  __int128 v31;
  uint64_t v32;
  __int128 context;
  uint64_t v34;

  v30 = 0;
  v29 = a1;
  v10 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1 || *(_DWORD *)(v10 + 16) == 2)
  {
    v23 = FigSignalErrorAt();
    goto LABEL_12;
  }
  MEMORY[0x1940280C4](*(_QWORD *)(v10 + 104));
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v10 + 128), a2);
  if (Value)
  {
    Value[3] = a8;
    *((_BYTE *)Value + 32) = 1;
  }
  else
  {
    FigSignalErrorAt();
  }
  MEMORY[0x1940280D0](*(_QWORD *)(v10 + 104));
  if ((a9 & 1) == 0)
  {
    if (a7)
    {
      v19 = *(_QWORD *)(v10 + 432);
      context = v19;
      v20 = *(unsigned int (**)(unint64_t, const __CFDictionary *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 16)
                                                                                    + 40);
      if (!v20 || v20(v19, a7) == -12782)
      {
        DWORD2(context) = 0;
        CFDictionaryApplyFunction(a7, (CFDictionaryApplierFunction)vtEncoderSetOneProperty, &context);
      }
    }
    v21 = *(_QWORD *)(v10 + 432);
    v27 = *a4;
    v28 = *((_QWORD *)a4 + 2);
    v25 = *a5;
    v26 = *((_QWORD *)a5 + 2);
    v22 = *(uint64_t (**)(uint64_t, const void *, uint64_t, __int128 *, __int128 *, uint64_t, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (!v22)
    {
      v24 = 4294954514;
LABEL_13:
      vtCompressionSessionPipelineContextHandleError((uint64_t *)a1, v24);
LABEL_14:
      if (!v10)
        goto LABEL_19;
      goto LABEL_17;
    }
    context = v27;
    v34 = v28;
    v31 = v25;
    v32 = v26;
    v23 = v22(v21, a2, a3, &context, &v31, a6, &v30);
LABEL_12:
    v24 = v23;
    if (!(_DWORD)v23)
      goto LABEL_14;
    goto LABEL_13;
  }
  VTEncoderSessionEmitEncodedFrame((uint64_t *)(v10 + 392), a2, 0, 2u, 0);
LABEL_17:
  if (*(_BYTE *)(a1 + 116))
    FigSemaphoreSignal();
LABEL_19:
  vtCompressionSessionPipelineContextInvalidate(&v29);
}

uint64_t vtCompressionSessionCompleteFramesCallback(uint64_t *a1, __int128 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t (*v5)(uint64_t, __int128 *);
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  v2 = *a1;
  if (!*a1 || *(_DWORD *)(v2 + 16) == 2)
    return FigSignalErrorAt();
  v3 = *(_QWORD *)(v2 + 432);
  v6 = *a2;
  v7 = *((_QWORD *)a2 + 2);
  result = CMBaseObjectGetVTable();
  v5 = *(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)(result + 16) + 24);
  if (v5)
  {
    v8 = v6;
    v9 = v7;
    return v5(v3, &v8);
  }
  return result;
}

uint64_t VTEncoderSessionCreateTimeStampQueue(uint64_t a1)
{
  const void *v2;
  const __CFAllocator *v3;
  CFMutableArrayRef v4;
  uint64_t v5;
  uint64_t result;
  CFArrayCallBacks callBacks;

  callBacks.version = 0;
  callBacks.retain = (CFArrayRetainCallBack)vtTimeStampRetain;
  callBacks.release = (CFArrayReleaseCallBack)vtTimeStampRelease;
  callBacks.copyDescription = (CFArrayCopyDescriptionCallBack)vtTimeStampCopyDescription;
  callBacks.equal = 0;
  v2 = *(const void **)a1;
  if (v2)
    v3 = CFGetAllocator(v2);
  else
    v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v4 = CFArrayCreateMutable(v3, 0, &callBacks);
  *(_QWORD *)(a1 + 16) = v4;
  if (!v4)
    return FigSignalErrorAt();
  v5 = FigSimpleMutexCreate();
  result = 0;
  *(_QWORD *)(a1 + 24) = v5;
  return result;
}

void vtCompressionSessionCompressionWork(uint64_t a1)
{
  uint64_t v1;
  __CVBuffer *CVPixelBufferAtIndex;
  OpaqueCMTaggedBufferGroup *v4;
  const __CFDictionary *v5;
  const void *v6;
  CGFloat v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  CFTypeRef v11;
  uint64_t DataFromStatisticsDictionary;
  uint64_t v13;
  _QWORD *v14;
  uint64_t (*v15)(uint64_t, const void *, OpaqueCMTaggedBufferGroup *, CGPoint *, CGRect *, const __CFDictionary *, int *);
  uint64_t v16;
  const void *v17;
  OpaqueCMTaggedBufferGroup *v18;
  uint64_t Info;
  unsigned int v20;
  uint64_t v21;
  uint64_t updated;
  uint64_t v23;
  BOOL v24;
  uint64_t *v25;
  const void *v26;
  int v27;
  CFTypeRef v28;
  const __CFDictionary *v29;
  _OWORD *v30;
  float v31;
  CFTypeRef v32;
  float v33;
  BOOL v34;
  float v35;
  double Width;
  double Height;
  const void *v38;
  int v39;
  uint64_t DataFromStatistics;
  uint64_t v41;
  int v42;
  const void *Value;
  uint64_t v44;
  CFTypeRef v45;
  const void *v46;
  CFTypeRef v47;
  const void *v48;
  CFTypeRef v49;
  const void *v50;
  const void *v51;
  CFTypeRef v52;
  const void *v53;
  CFTypeRef v54;
  const void *v55;
  CFTypeRef v56;
  _QWORD *v57;
  CFTypeRef v58;
  const void *v59;
  uint64_t v60;
  uint64_t (*v61)(uint64_t, const __CFString *, const void *);
  __CFDictionary *theDict;
  CFTypeRef v63;
  double v64;
  CGFloat v65;
  unsigned int v66;
  unsigned int v67;
  const void *v68;
  int v69;
  uint64_t *v70;
  CGRect time2;
  float v72;
  uint64_t v73;
  CMTime rhs;
  CFTypeRef cf;
  CGFloat v76;
  unsigned int v77;
  CGFloat v78;
  unsigned int v79;
  CGPoint time1;
  __int128 time1_16;
  __int128 v82;
  int v83;
  double v84;
  _QWORD v85[10];

  *(_QWORD *)((char *)&v85[7] + 4) = *MEMORY[0x1E0C80C00];
  v70 = (uint64_t *)a1;
  v69 = 0;
  v1 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
    goto LABEL_141;
  if (*(_DWORD *)(v1 + 16) == 2)
    goto LABEL_141;
  CVPixelBufferAtIndex = *(__CVBuffer **)(a1 + 32);
  v4 = *(OpaqueCMTaggedBufferGroup **)(a1 + 40);
  if (*(_OWORD *)(a1 + 32) == 0)
    goto LABEL_141;
  v5 = *(const __CFDictionary **)(a1 + 48);
  v78 = *(double *)(a1 + 56);
  v66 = *(_DWORD *)(a1 + 68);
  v79 = *(_DWORD *)(a1 + 64);
  v65 = *(double *)(a1 + 72);
  v76 = *(double *)(a1 + 80);
  v77 = *(_DWORD *)(a1 + 88);
  v6 = *(const void **)(a1 + 104);
  if (!v6)
  {
LABEL_141:
    DataFromStatisticsDictionary = FigSignalErrorAt();
    goto LABEL_37;
  }
  v67 = *(_DWORD *)(a1 + 92);
  v7 = *(double *)(a1 + 96);
  v8 = *(_QWORD *)(v1 + 576);
  v9 = *MEMORY[0x1E0C9AE40];
  v10 = (uint64_t *)MEMORY[0x1E0C9AE50];
  if (v8 != *MEMORY[0x1E0C9AE40])
  {
    if (vtCompressionSessionIsHLG())
    {
      if (vtCompressionSessionIsDolbyCompatible(v1))
      {
        v8 = *v10;
        *(_QWORD *)(v1 + 576) = *v10;
      }
      else
      {
        *(_QWORD *)(v1 + 576) = v9;
        v8 = v9;
      }
    }
    else
    {
      v8 = *(_QWORD *)(v1 + 576);
    }
  }
  if (*v10 != v8)
  {
    v11 = 0;
    goto LABEL_13;
  }
  v68 = 0;
  Info = vtCompressionSessionTrackFrameGetInfo(v1, v6, 0, &v68, 0);
  if ((_DWORD)Info)
  {
    DataFromStatisticsDictionary = Info;
    v11 = 0;
    goto LABEL_35;
  }
  if (CVPixelBufferAtIndex)
  {
    v20 = v67;
  }
  else
  {
    v20 = v67;
    if (v4)
    {
      if (CMTaggedBufferGroupGetCount(v4) < 1)
        CVPixelBufferAtIndex = 0;
      else
        CVPixelBufferAtIndex = (__CVBuffer *)FigTaggedBufferGroupGetCVPixelBufferAtIndex();
    }
  }
  v26 = v68;
  cf = 0;
  v27 = *(_DWORD *)(v1 + 672);
  if (!v27)
  {
    vtCompressionSessionSetHDRFormat(v1);
    v27 = *(_DWORD *)(v1 + 672);
  }
  if ((v27 - 1) < 2)
  {
    if ((v20 & 1) != 0
      && (time1 = (CGPoint)*MEMORY[0x1E0CA2E68],
          *(_QWORD *)&time1_16 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16),
          time2.origin.x = v76,
          *(_QWORD *)&time2.origin.y = __PAIR64__(v20, v77),
          time2.size.width = v7,
          CMTimeCompare((CMTime *)&time1, (CMTime *)&time2) < 0))
    {
      time1.x = v76;
      *(_QWORD *)&time1.y = __PAIR64__(v20, v77);
      *(CGFloat *)&time1_16 = v7;
      v31 = 1.0 / CMTimeGetSeconds((CMTime *)&time1);
      VTHDRMetadataGenerationSessionSetFramesPerSecond(*(_QWORD *)(v1 + 616), v31);
    }
    else
    {
      if ((v66 & 1) == 0)
        goto LABEL_75;
      v30 = (_OWORD *)(v1 + 584);
      v31 = 0.0;
      if ((*(_BYTE *)(v1 + 596) & 1) != 0)
      {
        time1 = (CGPoint)0;
        *(_QWORD *)&time1_16 = 0;
        time2.origin.x = v78;
        *(_QWORD *)&time2.origin.y = __PAIR64__(v66, v79);
        time2.size.width = v65;
        *(_OWORD *)&rhs.value = *v30;
        rhs.epoch = *(_QWORD *)(v1 + 600);
        CMTimeSubtract((CMTime *)&time1, (CMTime *)&time2, &rhs);
        time2.origin = (CGPoint)*MEMORY[0x1E0CA2E68];
        time2.size.width = *(CGFloat *)(MEMORY[0x1E0CA2E68] + 16);
        *(CGPoint *)&rhs.value = time1;
        rhs.epoch = time1_16;
        if (CMTimeCompare((CMTime *)&time2, &rhs) < 0)
        {
          time2.origin = time1;
          *(_QWORD *)&time2.size.width = time1_16;
          v31 = 1.0 / CMTimeGetSeconds((CMTime *)&time2);
          VTHDRMetadataGenerationSessionSetFramesPerSecond(*(_QWORD *)(v1 + 616), v31);
        }
      }
      *(CGFloat *)v30 = v78;
      *(_DWORD *)(v1 + 592) = v79;
      *(_DWORD *)(v1 + 596) = v66;
      *(CGFloat *)(v1 + 600) = v65;
    }
    if (v31 > 0.0)
    {
      v33 = *(float *)(v1 + 680);
      v34 = v33 == 0.0;
      if (v33 <= 0.0)
      {
        v35 = -v31;
        if (!v34)
          v35 = v31;
        *(float *)(v1 + 680) = v35;
      }
    }
LABEL_75:
    v64 = v7;
    Width = (double)CVPixelBufferGetWidth(CVPixelBufferAtIndex);
    Height = (double)CVPixelBufferGetHeight(CVPixelBufferAtIndex);
    v38 = (const void *)*MEMORY[0x1E0CA8E80];
    v29 = (const __CFDictionary *)CVBufferCopyAttachment(CVPixelBufferAtIndex, (CFStringRef)*MEMORY[0x1E0CA8E80], 0);
    if (*(_BYTE *)(v1 + 553))
      goto LABEL_76;
    v63 = v26;
    if (!v5
      || (Value = CFDictionaryGetValue(v5, CFSTR("HDRImageStatistics"))) == 0
      || (v44 = VTHDRMetadataGenerationSessionCreateDataFromStatisticsDictionary(*(_QWORD *)(v1 + 616), *(_DWORD *)(v1 + 672) == 2, *(_BYTE *)(v1 + 644), (uint64_t)Value, 0, Width, Height), !(_DWORD)v44))
    {
      if (!*(_BYTE *)(v1 + 608))
      {
LABEL_76:
        v7 = v64;
        if (cf)
          goto LABEL_120;
LABEL_77:
        LODWORD(rhs.value) = 0;
        v73 = 0;
        v72 = 0.0;
        memset((char *)v85 + 4, 0, 44);
        v82 = 0u;
        v83 = 0;
        time1 = (CGPoint)0;
        time1_16 = 0u;
        BYTE2(v85[5]) = 1;
        v84 = Width;
        *(double *)v85 = Height;
        LOBYTE(v85[5]) = *(_BYTE *)(v1 + 644);
        v39 = *(_DWORD *)(v1 + 672);
        if (v39 != 2)
        {
          if (v39 == 1)
          {
            memset(&time2, 0, sizeof(time2));
            DataFromStatistics = VTHDRImageStatisticsGenerationSessionCreateStatistics(*(_QWORD *)(v1 + 624), CVPixelBufferAtIndex, (float *)&v73, (float *)&rhs, (float *)&v73 + 1, &v72);
            if (!(_DWORD)DataFromStatistics)
            {
              time1.x = *(float *)&rhs.value;
              time1.y = *((float *)&v73 + 1);
              *(double *)&time1_16 = *(float *)&v73;
              if (*(_BYTE *)(v1 + 644))
              {
                *((double *)&time1_16 + 1) = v72;
                *(double *)&v82 = *(float *)&v73;
                BYTE4(v85[5]) = 1;
              }
              if (v29)
              {
                CGRectMakeWithDictionaryRepresentation(v29, &time2);
                *(CGRect *)&v85[1] = time2;
                BYTE5(v85[5]) = 1;
              }
              BYTE2(v85[5]) = 1;
              v41 = *(_QWORD *)(v1 + 616);
              v42 = 0;
LABEL_94:
              DataFromStatistics = VTHDRMetadataGenerationSessionCreateDataFromStatistics(v41, v42, 1, (uint64_t)&time1, 0);
              if (!(_DWORD)DataFromStatistics)
                goto LABEL_120;
            }
          }
          else
          {
            DataFromStatistics = FigSignalErrorAt();
          }
          DataFromStatisticsDictionary = DataFromStatistics;
LABEL_98:
          if (cf)
            CFRelease(cf);
          v11 = 0;
          goto LABEL_121;
        }
        v41 = *(_QWORD *)(v1 + 616);
        v42 = 1;
        goto LABEL_94;
      }
      if (cf)
      {
        v7 = v64;
        goto LABEL_120;
      }
      theDict = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (theDict)
      {
        v46 = (const void *)*MEMORY[0x1E0CA8E08];
        v47 = CVBufferCopyAttachment(CVPixelBufferAtIndex, (CFStringRef)*MEMORY[0x1E0CA8E08], 0);
        if (v47)
        {
          v48 = v47;
          CFDictionarySetValue(theDict, v46, v47);
          CFRelease(v48);
        }
        v49 = CVBufferCopyAttachment(CVPixelBufferAtIndex, CFSTR("Filtered"), 0);
        if (v49)
        {
          v50 = v49;
          CFDictionarySetValue(theDict, CFSTR("Filtered"), v49);
          CFRelease(v50);
        }
        v51 = (const void *)*MEMORY[0x1E0CA8E10];
        v52 = CVBufferCopyAttachment(CVPixelBufferAtIndex, (CFStringRef)*MEMORY[0x1E0CA8E10], 0);
        if (v52)
        {
          v53 = v52;
          CFDictionarySetValue(theDict, v51, v52);
          CFRelease(v53);
        }
        v54 = CVBufferCopyAttachment(CVPixelBufferAtIndex, CFSTR("Raw"), 0);
        if (v54)
        {
          v55 = v54;
          CFDictionarySetValue(theDict, CFSTR("Raw"), v54);
          CFRelease(v55);
        }
        if (CFDictionaryGetCount(theDict))
        {
          if (v29)
            CFDictionarySetValue(theDict, v38, v29);
          DataFromStatisticsDictionary = VTHDRMetadataGenerationSessionCreateDataFromStatisticsDictionary(*(_QWORD *)(v1 + 616), *(_DWORD *)(v1 + 672) == 2, *(_BYTE *)(v1 + 644), (uint64_t)theDict, 0, Width, Height);
          CFRelease(theDict);
          if ((_DWORD)DataFromStatisticsDictionary)
            goto LABEL_146;
        }
        else
        {
          CFRelease(theDict);
        }
      }
      else
      {
        FigSignalErrorAt();
      }
      v7 = v64;
      if (cf)
        goto LABEL_120;
      v56 = v63;
      if (v63)
        v56 = CFRetain(v63);
      cf = v56;
      if (v56)
        goto LABEL_120;
      goto LABEL_77;
    }
    DataFromStatisticsDictionary = v44;
LABEL_146:
    v7 = v64;
    goto LABEL_98;
  }
  if (v27 == 3)
  {
    if (!*(_QWORD *)(v1 + 216))
    {
      v32 = CVBufferCopyAttachment(CVPixelBufferAtIndex, CFSTR("MasteringDisplayColorVolume"), 0);
      *(_QWORD *)(v1 + 216) = v32;
      if (!v32)
      {
        time1 = (CGPoint)xmmword_1928DF2B0;
        *(_QWORD *)&time1_16 = 0x500000080969800;
        *(_QWORD *)(v1 + 216) = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)&time1, 24);
      }
    }
    if (!*(_QWORD *)(v1 + 224))
    {
      v45 = CVBufferCopyAttachment(CVPixelBufferAtIndex, CFSTR("ContentLightLevelInfo"), 0);
      v29 = 0;
      *(_QWORD *)(v1 + 224) = v45;
      if (!v45)
      {
        LODWORD(time1.x) = -1878923261;
        v29 = 0;
        *(_QWORD *)(v1 + 224) = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)&time1, 4);
      }
      goto LABEL_120;
    }
    goto LABEL_68;
  }
  if (v27 != 4
    || *(_QWORD *)(v1 + 656)
    || (v28 = CVBufferCopyAttachment(CVPixelBufferAtIndex, (CFStringRef)*MEMORY[0x1E0CA8CC8], 0)) == 0)
  {
LABEL_68:
    v29 = 0;
    goto LABEL_120;
  }
  v29 = 0;
  *(_QWORD *)(v1 + 656) = v28;
LABEL_120:
  DataFromStatisticsDictionary = 0;
  v11 = cf;
  cf = 0;
LABEL_121:
  if (v29)
    CFRelease(v29);
  if ((_DWORD)DataFromStatisticsDictionary)
    goto LABEL_35;
  MEMORY[0x1940280C4](*(_QWORD *)(v1 + 104));
  v57 = CFDictionaryGetValue(*(CFDictionaryRef *)(v1 + 128), v6);
  if (v57)
  {
    v58 = (CFTypeRef)v57[1];
    if (v58 != v11)
    {
      v57[1] = v11;
      if (v11)
        CFRetain(v11);
      if (v58)
        CFRelease(v58);
    }
    MEMORY[0x1940280D0](*(_QWORD *)(v1 + 104));
  }
  else
  {
    DataFromStatisticsDictionary = FigSignalErrorAt();
    MEMORY[0x1940280D0](*(_QWORD *)(v1 + 104));
    if ((_DWORD)DataFromStatisticsDictionary)
      goto LABEL_35;
  }
  if (*(_BYTE *)(v1 + 641))
  {
    DataFromStatisticsDictionary = 0;
    if (!*(_BYTE *)(v1 + 640) || !v5)
      goto LABEL_14;
    if (CFDictionaryContainsKey(v5, CFSTR("AmbientViewingEnvironment")))
    {
      v59 = CFDictionaryGetValue(v5, CFSTR("AmbientViewingEnvironment"));
      if (!FigCFEqual())
      {
        updated = vtCompressionSessionUpdateAmbientViewingEnvironment(v1, v59);
        if ((_DWORD)updated)
          goto LABEL_33;
        if (*(_BYTE *)(v1 + 642))
        {
          v60 = *(_QWORD *)(v1 + 432);
          v61 = *(uint64_t (**)(uint64_t, const __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 56);
          if (v61)
            DataFromStatisticsDictionary = v61(v60, CFSTR("AmbientViewingEnvironment"), v59);
          else
            DataFromStatisticsDictionary = 4294954514;
          goto LABEL_14;
        }
      }
    }
  }
LABEL_13:
  DataFromStatisticsDictionary = 0;
LABEL_14:
  if (!*(_QWORD *)(v1 + 880))
    *(_QWORD *)(v1 + 880) = CVBufferCopyAttachment(CVPixelBufferAtIndex, CFSTR("LogTransferFunction"), 0);
  if (v4)
  {
    if (*(_BYTE *)(v1 + 794))
      goto LABEL_35;
    v13 = *(_QWORD *)(v1 + 432);
    v14 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
    if (*v14 >= 4uLL)
    {
      v15 = (uint64_t (*)(uint64_t, const void *, OpaqueCMTaggedBufferGroup *, CGPoint *, CGRect *, const __CFDictionary *, int *))v14[21];
      if (v15)
      {
        time1.x = v78;
        *(_QWORD *)&time1.y = __PAIR64__(v66, v79);
        *(CGFloat *)&time1_16 = v65;
        time2.origin.x = v76;
        *(_QWORD *)&time2.origin.y = __PAIR64__(v67, v77);
        time2.size.width = v7;
        v16 = v13;
        v17 = v6;
        v18 = v4;
LABEL_32:
        updated = v15(v16, v17, v18, &time1, &time2, v5, &v69);
        goto LABEL_33;
      }
    }
  }
  else
  {
    if (*(_BYTE *)(v1 + 794))
    {
      v21 = *(_QWORD *)(v1 + 800);
      *(_QWORD *)(v21 + 72) = a1;
      time1.x = v78;
      *(_QWORD *)&time1.y = __PAIR64__(v66, v79);
      *(CGFloat *)&time1_16 = v65;
      time2.origin.x = v76;
      *(_QWORD *)&time2.origin.y = __PAIR64__(v67, v77);
      time2.size.width = v7;
      updated = VTRateControlSessionBeforeEncodeFrame(v21, (uint64_t)v6, (uint64_t)CVPixelBufferAtIndex, (__int128 *)&time1, (__int128 *)&time2);
      if ((_DWORD)updated)
      {
LABEL_33:
        DataFromStatisticsDictionary = updated;
        goto LABEL_35;
      }
      if (*(_BYTE *)(v1 + 794))
      {
        DataFromStatisticsDictionary = 0;
        goto LABEL_35;
      }
    }
    v23 = *(_QWORD *)(v1 + 432);
    v15 = *(uint64_t (**)(uint64_t, const void *, OpaqueCMTaggedBufferGroup *, CGPoint *, CGRect *, const __CFDictionary *, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (v15)
    {
      time1.x = v78;
      *(_QWORD *)&time1.y = __PAIR64__(v66, v79);
      *(CGFloat *)&time1_16 = v65;
      time2.origin.x = v76;
      *(_QWORD *)&time2.origin.y = __PAIR64__(v67, v77);
      time2.size.width = v7;
      v16 = v23;
      v17 = v6;
      v18 = CVPixelBufferAtIndex;
      goto LABEL_32;
    }
  }
  DataFromStatisticsDictionary = 4294954514;
LABEL_35:
  if (v11)
    CFRelease(v11);
LABEL_37:
  if (*(_BYTE *)(v1 + 794))
    v24 = (_DWORD)DataFromStatisticsDictionary == 0;
  else
    v24 = 0;
  if (!v24)
  {
    v25 = v70;
    if ((_DWORD)DataFromStatisticsDictionary)
      vtCompressionSessionPipelineContextHandleError(v70, DataFromStatisticsDictionary);
    if (*((_BYTE *)v25 + 116))
      FigSemaphoreSignal();
    vtCompressionSessionPipelineContextInvalidate((uint64_t *)&v70);
  }
}

uint64_t VTCompressionSessionCopyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, const void *, uint64_t, _QWORD *);
  CFTypeRef *v14;
  const void *v15;
  const void *v16;
  const void *PixelBufferAttributes;
  __CVPixelBufferPool *v18;
  const void **v19;
  int v20;
  const __CFAllocator *v21;
  const void *v22;
  const void **v23;

  *a4 = 0;
  if (!a1 || *(_DWORD *)(a1 + 16) == 2)
    return FigSignalErrorAt();
  v8 = *(_QWORD *)(a1 + 24);
  if (v8)
    return VTCompressionSessionRemote_CopyProperty(v8);
  if (*(_BYTE *)(a1 + 794) && vtCompressionSessionIsPropertyHandledByRateControl(a1, a2))
    return VTRateControlSessionCopyProperty(*(_QWORD *)(a1 + 800), (uint64_t)a2, a3, a4);
  if (!vtCompressionSessionIsPropertyHandledByVideoToolbox(a2))
  {
    if (!vtCompressionSessionIsPropertyHandledByVideoEncoder(a1, a2))
      return 4294954396;
    goto LABEL_14;
  }
  if (CFEqual(CFSTR("NumberOfPendingFrames"), a2))
  {
    MEMORY[0x1940280C4](*(_QWORD *)(a1 + 104));
    *a4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, (const void *)(a1 + 120));
    v10 = *(_QWORD *)(a1 + 104);
LABEL_11:
    MEMORY[0x1940280D0](v10);
    return 0;
  }
  if (CFEqual(CFSTR("PixelBufferPoolIsShared"), a2))
  {
    MEMORY[0x1940280C4](*(_QWORD *)(a1 + 464));
    v11 = vtCompressionSessionEnsurePixelBufferPoolsAreUpToDate(a1, 0, 0);
    MEMORY[0x1940280D0](*(_QWORD *)(a1 + 464));
    if ((_DWORD)v11)
      return v11;
    v14 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    if (*(_QWORD *)(a1 + 488) != *(_QWORD *)(a1 + 496))
      v14 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    v15 = CFRetain(*v14);
LABEL_21:
    *a4 = v15;
    return v11;
  }
  if (CFEqual(CFSTR("VideoEncoderPixelBufferAttributes"), a2))
  {
    MEMORY[0x1940280C4](*(_QWORD *)(a1 + 464));
    v16 = *(const void **)(a1 + 472);
    if (!v16)
    {
LABEL_27:
      v10 = *(_QWORD *)(a1 + 464);
      goto LABEL_11;
    }
LABEL_26:
    *a4 = CFRetain(v16);
    goto LABEL_27;
  }
  if (CFEqual(CFSTR("PoolPixelBufferAttributesSeed"), a2))
  {
    MEMORY[0x1940280C4](*(_QWORD *)(a1 + 464));
    v11 = vtCompressionSessionEnsurePixelBufferPoolsAreUpToDate(a1, 0, 0);
    if ((_DWORD)v11)
    {
LABEL_34:
      MEMORY[0x1940280D0](*(_QWORD *)(a1 + 464));
      return v11;
    }
    PixelBufferAttributes = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, (const void *)(a1 + 484));
LABEL_31:
    *a4 = PixelBufferAttributes;
    goto LABEL_34;
  }
  if (CFEqual(CFSTR("PoolPixelBufferAttributes"), a2))
  {
    MEMORY[0x1940280C4](*(_QWORD *)(a1 + 464));
    v11 = vtCompressionSessionEnsurePixelBufferPoolsAreUpToDate(a1, 0, 0);
    if ((_DWORD)v11)
      goto LABEL_34;
    v18 = *(__CVPixelBufferPool **)(a1 + 496);
    if (!v18)
      v18 = *(__CVPixelBufferPool **)(a1 + 488);
    PixelBufferAttributes = CVPixelBufferPoolGetPixelBufferAttributes(v18);
    if (PixelBufferAttributes)
      PixelBufferAttributes = CFRetain(PixelBufferAttributes);
    goto LABEL_31;
  }
  if (CFEqual(CFSTR("PixelTransferProperties"), a2))
  {
    MEMORY[0x1940280C4](*(_QWORD *)(a1 + 464));
    v16 = *(const void **)(a1 + 520);
    if (!v16)
      goto LABEL_27;
    goto LABEL_26;
  }
  if (CFEqual(CFSTR("MaximizePowerEfficiency"), a2))
  {
    v19 = (const void **)MEMORY[0x1E0C9AE50];
    if (*(_BYTE *)(a1 + 529) != 1)
      v19 = (const void **)MEMORY[0x1E0C9AE40];
    goto LABEL_53;
  }
  if (CFEqual(CFSTR("AllowCompressedPixelFormats"), a2))
  {
    if (*(_BYTE *)(a1 + 792) == 1 || !*(_BYTE *)(a1 + 793))
      v19 = (const void **)MEMORY[0x1E0C9AE40];
    else
      v19 = (const void **)MEMORY[0x1E0C9AE50];
LABEL_53:
    v15 = *v19;
LABEL_54:
    v15 = CFRetain(v15);
LABEL_55:
    v11 = 0;
    goto LABEL_21;
  }
  if (!CFEqual(CFSTR("PixelAspectRatio"), a2)
    && !CFEqual(CFSTR("CleanAperture"), a2)
    && !CFEqual(CFSTR("FieldCount"), a2)
    && !CFEqual(CFSTR("FieldDetail"), a2)
    && !CFEqual(CFSTR("ComponentRange"), a2)
    && !CFEqual(CFSTR("ColorPrimaries"), a2)
    && !CFEqual(CFSTR("TransferFunction"), a2)
    && !CFEqual(CFSTR("YCbCrMatrix"), a2)
    && !CFEqual(CFSTR("ICCProfile"), a2)
    && !CFEqual(CFSTR("MasteringDisplayColorVolume"), a2)
    && !CFEqual(CFSTR("ContentLightLevelInfo"), a2)
    && !CFEqual(CFSTR("MultiPassStorage"), a2)
    && !CFEqual(CFSTR("AuxiliaryTypeInfo"), a2)
    && !CFEqual(CFSTR("ChromaLocationTopField"), a2)
    && !CFEqual(CFSTR("ChromaLocationBottomField"), a2)
    && !CFEqual(CFSTR("HasLeftStereoEyeView"), a2)
    && !CFEqual(CFSTR("HasRightStereoEyeView"), a2)
    && !CFEqual(CFSTR("HasEyeViewsReversed"), a2)
    && !CFEqual(CFSTR("HasAdditionalViews"), a2)
    && !CFEqual(CFSTR("HeroEye"), a2)
    && !CFEqual(CFSTR("ProjectionKind"), a2)
    && !CFEqual(CFSTR("ViewPackingKind"), a2)
    && !CFEqual(CFSTR("TransportIdentifier"), a2)
    && !CFEqual(CFSTR("WarpKind"), a2)
    && !CFEqual(CFSTR("StereoCameraBaseline"), a2)
    && !CFEqual(CFSTR("HorizontalDisparityAdjustment"), a2)
    && !CFEqual(CFSTR("HorizontalFieldOfView"), a2)
    && !CFEqual(CFSTR("PowerLogSessionID"), a2))
  {
    if (CFEqual(CFSTR("RealTime"), a2))
    {
      v15 = *(const void **)(a1 + 544);
      if (!v15)
        goto LABEL_55;
    }
    else if (CFEqual(CFSTR("AllowPixelTransfer"), a2))
    {
      if (*(_BYTE *)(a1 + 528))
        v23 = (const void **)MEMORY[0x1E0C9AE50];
      else
        v23 = (const void **)MEMORY[0x1E0C9AE40];
      v15 = *v23;
      if (!*v23)
        goto LABEL_55;
    }
    else
    {
      if (!CFEqual(CFSTR("EncoderID"), a2))
        return 0;
      v15 = *(const void **)(a1 + 456);
      if (!v15)
        goto LABEL_55;
    }
    goto LABEL_54;
  }
  if (!*(_BYTE *)(a1 + 96)
    && FigVideoCodecTypeIsHEVCFlavor(*(_DWORD *)(a1 + 48))
    && (CFEqual(CFSTR("ColorPrimaries"), a2)
     || CFEqual(CFSTR("TransferFunction"), a2)
     || CFEqual(CFSTR("YCbCrMatrix"), a2)))
  {
    if (!vtCompressionSessionIsIPT(a1))
    {
      if ((!CFEqual(CFSTR("ColorPrimaries"), a2) || (v15 = *(const void **)(a1 + 176)) == 0)
        && (!CFEqual(CFSTR("TransferFunction"), a2) || (v15 = *(const void **)(a1 + 184)) == 0))
      {
        if (!CFEqual(CFSTR("YCbCrMatrix"), a2))
          return 0;
        v15 = *(const void **)(a1 + 200);
        if (!v15)
          return 0;
      }
      goto LABEL_54;
    }
    goto LABEL_94;
  }
  if (vtCompressionSessionIsPropertyHandledByVideoEncoder(a1, a2))
  {
LABEL_14:
    v12 = *(_QWORD *)(a1 + 432);
    v13 = *(uint64_t (**)(uint64_t, const void *, uint64_t, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 48);
    if (v13)
      return v13(v12, a2, a3, a4);
    return 4294954514;
  }
  if (CFEqual(CFSTR("PixelAspectRatio"), a2))
  {
    v15 = *(const void **)(a1 + 136);
    if (!v15)
      return 0;
    goto LABEL_54;
  }
  if (CFEqual(CFSTR("CleanAperture"), a2))
  {
    v15 = *(const void **)(a1 + 144);
    if (!v15)
      return 0;
    goto LABEL_54;
  }
  if (CFEqual(CFSTR("FieldCount"), a2))
  {
    v15 = *(const void **)(a1 + 152);
    if (!v15)
      return 0;
    goto LABEL_54;
  }
  if (CFEqual(CFSTR("FieldDetail"), a2))
  {
    v15 = *(const void **)(a1 + 160);
    if (!v15)
      return 0;
    goto LABEL_54;
  }
  if (CFEqual(CFSTR("ComponentRange"), a2))
  {
    v15 = *(const void **)(a1 + 168);
    if (!v15)
      return 0;
    goto LABEL_54;
  }
  if (CFEqual(CFSTR("ColorPrimaries"), a2))
  {
    if (!*(_QWORD *)(a1 + 176))
      return 0;
    if (!vtCompressionSessionIsIPT(a1))
    {
      v15 = *(const void **)(a1 + 176);
      goto LABEL_54;
    }
LABEL_94:
    v11 = 0;
    *a4 = 0;
    return v11;
  }
  if (CFEqual(CFSTR("TransferFunction"), a2))
  {
    if (!*(_QWORD *)(a1 + 184))
      return 0;
    if (!vtCompressionSessionIsIPT(a1))
    {
      v15 = *(const void **)(a1 + 184);
      goto LABEL_54;
    }
    goto LABEL_94;
  }
  if (CFEqual(CFSTR("GammaLevel"), a2))
  {
    v15 = *(const void **)(a1 + 192);
    if (!v15)
      return 0;
    goto LABEL_54;
  }
  if (CFEqual(CFSTR("YCbCrMatrix"), a2))
  {
    if (!*(_QWORD *)(a1 + 200))
      return 0;
    if (!vtCompressionSessionIsIPT(a1))
    {
      v15 = *(const void **)(a1 + 200);
      goto LABEL_54;
    }
    goto LABEL_94;
  }
  if (CFEqual(CFSTR("AmbientViewingEnvironment"), a2))
  {
    v15 = *(const void **)(a1 + 656);
    if (!v15)
      return 0;
    goto LABEL_54;
  }
  if (CFEqual(CFSTR("ICCProfile"), a2))
  {
    v15 = *(const void **)(a1 + 208);
    if (!v15)
      return 0;
    goto LABEL_54;
  }
  if (CFEqual(CFSTR("MasteringDisplayColorVolume"), a2))
  {
    v15 = *(const void **)(a1 + 216);
    if (!v15)
      return 0;
    goto LABEL_54;
  }
  if (CFEqual(CFSTR("ContentLightLevelInfo"), a2))
  {
    v15 = *(const void **)(a1 + 224);
    if (!v15)
      return 0;
    goto LABEL_54;
  }
  if (!CFEqual(CFSTR("MultiPassStorage"), a2))
  {
    if (CFEqual(CFSTR("AuxiliaryTypeInfo"), a2))
    {
      v15 = *(const void **)(a1 + 232);
      if (!v15)
        return 0;
      goto LABEL_54;
    }
    if (CFEqual(CFSTR("ChromaLocationTopField"), a2))
    {
      v15 = *(const void **)(a1 + 240);
      if (!v15)
        return 0;
      goto LABEL_54;
    }
    if (CFEqual(CFSTR("ChromaLocationBottomField"), a2))
    {
      v15 = *(const void **)(a1 + 248);
      if (!v15)
        return 0;
      goto LABEL_54;
    }
    if (CFEqual(CFSTR("HasLeftStereoEyeView"), a2))
    {
      v19 = (const void **)MEMORY[0x1E0C9AE50];
      v20 = *(unsigned __int8 *)(a1 + 688);
    }
    else if (CFEqual(CFSTR("HasRightStereoEyeView"), a2))
    {
      v19 = (const void **)MEMORY[0x1E0C9AE50];
      v20 = *(unsigned __int8 *)(a1 + 689);
    }
    else if (CFEqual(CFSTR("HasEyeViewsReversed"), a2))
    {
      v19 = (const void **)MEMORY[0x1E0C9AE50];
      v20 = *(unsigned __int8 *)(a1 + 690);
    }
    else
    {
      if (!CFEqual(CFSTR("HasAdditionalViews"), a2))
      {
        if (CFEqual(CFSTR("HeroEye"), a2))
        {
          v15 = *(const void **)(a1 + 696);
          if (!v15)
            goto LABEL_55;
          goto LABEL_54;
        }
        if (CFEqual(CFSTR("ProjectionKind"), a2))
        {
          v15 = *(const void **)(a1 + 704);
          if (!v15)
            goto LABEL_55;
          goto LABEL_54;
        }
        if (CFEqual(CFSTR("ViewPackingKind"), a2))
        {
          v15 = *(const void **)(a1 + 712);
          if (!v15)
            goto LABEL_55;
          goto LABEL_54;
        }
        if (CFEqual(CFSTR("TransportIdentifier"), a2))
        {
          if (!*(_BYTE *)(a1 + 720))
            return 0;
          v21 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          v22 = (const void *)(a1 + 724);
        }
        else
        {
          if (CFEqual(CFSTR("WarpKind"), a2))
          {
            v15 = *(const void **)(a1 + 728);
            if (!v15)
              goto LABEL_55;
            goto LABEL_54;
          }
          if (CFEqual(CFSTR("StereoCameraBaseline"), a2))
          {
            if (!*(_BYTE *)(a1 + 736))
              return 0;
            v21 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            v22 = (const void *)(a1 + 740);
          }
          else
          {
            if (!CFEqual(CFSTR("HorizontalDisparityAdjustment"), a2))
            {
              if (CFEqual(CFSTR("HorizontalFieldOfView"), a2))
              {
                v15 = *(const void **)(a1 + 264);
                if (!v15)
                  return 0;
              }
              else
              {
                if (!CFEqual(CFSTR("PowerLogSessionID"), a2))
                  return 0;
                v15 = *(const void **)(a1 + 816);
                if (!v15)
                  goto LABEL_55;
              }
              goto LABEL_54;
            }
            if (!*(_BYTE *)(a1 + 744))
              return 0;
            v21 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            v22 = (const void *)(a1 + 748);
          }
        }
        v15 = CFNumberCreate(v21, kCFNumberSInt32Type, v22);
        goto LABEL_55;
      }
      v19 = (const void **)MEMORY[0x1E0C9AE50];
      v20 = *(unsigned __int8 *)(a1 + 691);
    }
    if (!v20)
      v19 = (const void **)MEMORY[0x1E0C9AE40];
    goto LABEL_53;
  }
  return FigSignalErrorAt();
}

uint64_t vtRateControlReactionObserverCallback(uint64_t a1, int a2)
{
  const __CFNumber **v2;

  if (!a1 || *(_DWORD *)(a1 + 16))
    return FigSignalErrorAt();
  v2 = (const __CFNumber **)MEMORY[0x1E0C9AE50];
  if (!a2)
    v2 = (const __CFNumber **)MEMORY[0x1E0C9AE40];
  return VTCompressionSessionSetProperty(a1, CFSTR("AVCaptureDeviceReactionEffectsInProgress"), *v2);
}

uint64_t VTCompressionSessionCopySupportedPropertyDictionary(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, CFTypeRef *);
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CFTypeRef cf;
  CFTypeRef v14;
  CFTypeRef v15;
  _QWORD v16[4];

  v16[3] = *MEMORY[0x1E0C80C00];
  v14 = 0;
  v15 = 0;
  cf = 0;
  memset(v16, 0, 24);
  *a2 = 0;
  if (!a1 || *(_DWORD *)(a1 + 16) == 2)
  {
    v12 = FigSignalErrorAt();
    goto LABEL_32;
  }
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
    return VTCompressionSessionRemote_CopySupportedPropertyDictionary(v4);
  v6 = *(_QWORD *)(a1 + 432);
  v7 = *(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (v7)
  {
    v8 = v7(v6, &v15);
    if ((_DWORD)v8 != -12782 && (_DWORD)v8 != 0)
      goto LABEL_13;
  }
  if (!*(_BYTE *)(a1 + 794))
    goto LABEL_16;
  v8 = VTRateControlSessionCopySupportedPropertyDictionary(*(_QWORD *)(a1 + 800), &cf);
  if (!(_DWORD)v8)
  {
    if (cf)
    {
      v16[0] = cf;
      v11 = 1;
LABEL_17:
      v12 = vtCompressionSessionCopyPropertiesHandledByVideoToolbox(&v14);
      if (!(_DWORD)v12)
      {
        if (v15)
          v16[v11++] = v15;
        if (v14)
          v16[v11] = v14;
        v12 = FigCFCreateCombinedDictionary();
        if (!(_DWORD)v12)
        {
          v10 = 0;
          *a2 = 0;
          goto LABEL_24;
        }
      }
LABEL_32:
      v10 = v12;
      goto LABEL_24;
    }
LABEL_16:
    v11 = 0;
    goto LABEL_17;
  }
LABEL_13:
  v10 = v8;
  FigSignalErrorAt();
LABEL_24:
  if (cf)
    CFRelease(cf);
  if (v15)
    CFRelease(v15);
  if (v14)
    CFRelease(v14);
  return v10;
}

uint64_t vtCompressionSessionCopyPropertiesHandledByVideoToolbox(CFTypeRef *a1)
{
  MEMORY[0x1940281CC](&sCreatePropertiesHandledByVideoToolboxOnce, vtCompressionSessionCreatePropertiesHandledByVideoToolbox);
  if (!a1 || !sVTCompressionSessionPropertiesHandledByVideoToolbox)
    return FigSignalErrorAt();
  *a1 = CFRetain((CFTypeRef)sVTCompressionSessionPropertiesHandledByVideoToolbox);
  return 0;
}

uint64_t vtCompressionSessionIsPropertySupported(uint64_t a1, const void *a2)
{
  uint64_t v3;
  CFDictionaryRef theDict;

  theDict = 0;
  VTCompressionSessionCopySupportedPropertyDictionary(a1, &theDict);
  if (!theDict)
    return 0;
  v3 = CFDictionaryContainsKey(theDict, a2);
  CFRelease(theDict);
  return v3;
}

uint64_t VTCompressionSessionSetProperty(uint64_t a1, void *value, const __CFNumber *a3)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, void *, const __CFNumber *);
  uint64_t updated;
  const __CFNumber *v11;
  CFNumberRef v12;
  _DWORD *v13;
  const __CFNumber *v14;
  CFNumberType v15;
  CFTypeID TypeID;
  const void *v17;
  const __CFAllocator *v18;
  CFDictionaryRef Copy;
  uint64_t HasLeftStereoEyeView;
  const void *v21;
  NSObject *v22;
  const void *v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, void *, const __CFNumber *);
  uint64_t v27;
  uint64_t (*v28)(uint64_t, void *, const __CFNumber *);
  const void *v29;
  const __CFNumber *v30;
  const void *v31;
  const void *v32;
  const void *v33;
  CFTypeID v34;
  void *v35;
  CFTypeID v36;
  uint64_t v37;
  _QWORD *v38;
  CFTypeID v39;
  CFTypeID v40;
  void *v41;
  const void *v42;
  CFTypeID v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t, void *, const __CFNumber *);
  CFTypeID v46;
  uint64_t v47;
  BOOL v48;
  CFNumberRef v49;
  uint64_t v50;
  void (*v51)(uint64_t, const __CFString *, CFNumberRef);
  int valuePtr;

  if (!a1 || *(_DWORD *)(a1 + 16) == 2)
    return FigSignalErrorAt();
  v6 = *(_QWORD *)(a1 + 24);
  if (v6)
    return VTCompressionSessionRemote_SetProperty(v6, value, (uint64_t)a3);
  vtCoreAnalyticsSaveUserConfiguredCompressionProperty(value, (uint64_t)a3, a1);
  if (*(_BYTE *)(a1 + 794) && vtCompressionSessionIsPropertyHandledByRateControl(a1, value))
    return VTRateControlSessionSetProperty(*(_QWORD *)(a1 + 800));
  if (!vtCompressionSessionIsPropertyHandledByVideoToolbox(value))
  {
    if (!vtCompressionSessionIsPropertyHandledByVideoEncoder(a1, value))
      return FigSignalErrorAt();
    if (!*(_BYTE *)(a1 + 794) && *(_BYTE *)(a1 + 795) && vtCompressionSessionIsPropertyHandledByRateControl(a1, value))
      VTRateControlSessionSetProperty(*(_QWORD *)(a1 + 800));
    v8 = *(_QWORD *)(a1 + 432);
    v9 = *(uint64_t (**)(uint64_t, void *, const __CFNumber *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v9)
      updated = v9(v8, value, a3);
    else
      updated = 4294954514;
    if (!CFEqual(CFSTR("AverageDataRate"), value)
      && !CFEqual(CFSTR("AverageBitRate"), value)
      && !CFEqual(CFSTR("ConvergenceDurationForAverageDataRate"), value)
      && !CFEqual(CFSTR("DataRateLimits"), value)
      && !CFEqual(CFSTR("MoreFramesBeforeStart"), value)
      && !CFEqual(CFSTR("MoreFramesAfterEnd"), value)
      && !CFEqual(CFSTR("RequestedMaxEncoderLatency"), value)
      && !CFEqual(CFSTR("SourceFrameCount"), value)
      && !CFEqual(CFSTR("ExpectedFrameRate"), value)
      && !CFEqual(CFSTR("ExpectedDuration"), value))
    {
      *(_BYTE *)(a1 + 256) = 1;
    }
    if (CFEqual(CFSTR("ProfileLevel"), value))
    {
      v11 = *(const __CFNumber **)(a1 + 560);
      if (v11 == a3)
        return updated;
      *(_QWORD *)(a1 + 560) = a3;
      if (a3)
        CFRetain(a3);
      if (!v11)
        return updated;
      v12 = v11;
LABEL_37:
      CFRelease(v12);
      return updated;
    }
    if (CFEqual(CFSTR("ExpectedFrameRate"), value))
    {
      v13 = (_DWORD *)(a1 + 680);
      if (a3)
      {
        v14 = a3;
        v15 = kCFNumberFloat32Type;
LABEL_47:
        CFNumberGetValue(v14, v15, v13);
        return updated;
      }
    }
    else
    {
      if (!CFEqual(CFSTR("OutputBitDepth"), value))
        return updated;
      v13 = (_DWORD *)(a1 + 568);
      if (a3)
      {
        v14 = a3;
        v15 = kCFNumberSInt32Type;
        goto LABEL_47;
      }
    }
    *v13 = 0;
    return updated;
  }
  if (CFEqual(CFSTR("PixelBufferPoolIsShared"), value)
    || CFEqual(CFSTR("VideoEncoderPixelBufferAttributes"), value)
    || CFEqual(CFSTR("PoolPixelBufferAttributesSeed"), value)
    || CFEqual(CFSTR("PoolPixelBufferAttributes"), value)
    || CFEqual(CFSTR("NumberOfPendingFrames"), value))
  {
    return FigSignalErrorAt();
  }
  if (CFEqual(CFSTR("PixelTransferProperties"), value))
  {
    if (!a3 || (TypeID = CFDictionaryGetTypeID(), TypeID == CFGetTypeID(a3)))
    {
      MEMORY[0x1940280C4](*(_QWORD *)(a1 + 464));
      v17 = *(const void **)(a1 + 520);
      if (v17)
        CFRelease(v17);
      if (a3)
      {
        v18 = CFGetAllocator((CFTypeRef)a1);
        Copy = CFDictionaryCreateCopy(v18, a3);
      }
      else
      {
        Copy = 0;
      }
      *(_QWORD *)(a1 + 520) = Copy;
      FigCFDictionaryGetBooleanIfPresent();
      dispatch_group_wait(*(dispatch_group_t *)(a1 + 272), 0xFFFFFFFFFFFFFFFFLL);
      v21 = *(const void **)(a1 + 504);
      if (v21)
      {
        CFRelease(v21);
        *(_QWORD *)(a1 + 504) = 0;
      }
      v22 = *(NSObject **)(a1 + 312);
      if (v22)
      {
        dispatch_release(v22);
        *(_QWORD *)(a1 + 312) = 0;
      }
      *(_QWORD *)(a1 + 320) = 0;
      v23 = *(const void **)(a1 + 376);
      if (v23)
      {
        CFRelease(v23);
        *(_QWORD *)(a1 + 376) = 0;
      }
      v24 = *(NSObject **)(a1 + 344);
      if (v24)
      {
        dispatch_release(v24);
        *(_QWORD *)(a1 + 344) = 0;
      }
      *(_QWORD *)(a1 + 352) = 0;
      MEMORY[0x1940280D0](*(_QWORD *)(a1 + 464));
LABEL_101:
      if (vtCompressionSessionIsPropertyHandledByVideoEncoder(a1, value))
        goto LABEL_102;
      return 0;
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(CFSTR("PixelAspectRatio"), value)
    || CFEqual(CFSTR("CleanAperture"), value)
    || CFEqual(CFSTR("FieldCount"), value)
    || CFEqual(CFSTR("FieldDetail"), value)
    || CFEqual(CFSTR("ComponentRange"), value)
    || CFEqual(CFSTR("ColorPrimaries"), value)
    || CFEqual(CFSTR("TransferFunction"), value)
    || CFEqual(CFSTR("GammaLevel"), value)
    || CFEqual(CFSTR("YCbCrMatrix"), value)
    || CFEqual(CFSTR("ICCProfile"), value)
    || CFEqual(CFSTR("MasteringDisplayColorVolume"), value)
    || CFEqual(CFSTR("ContentLightLevelInfo"), value)
    || CFEqual(CFSTR("MultiPassStorage"), value)
    || CFEqual(CFSTR("AuxiliaryTypeInfo"), value)
    || CFEqual(CFSTR("ChromaLocationTopField"), value)
    || CFEqual(CFSTR("ChromaLocationBottomField"), value)
    || CFEqual(CFSTR("AmbientViewingEnvironment"), value)
    || CFEqual(CFSTR("PrepareEncodedSampleBuffersForPaddedWrites"), value)
    || CFEqual(CFSTR("HasLeftStereoEyeView"), value)
    || CFEqual(CFSTR("HasRightStereoEyeView"), value)
    || CFEqual(CFSTR("HasEyeViewsReversed"), value)
    || CFEqual(CFSTR("HasAdditionalViews"), value)
    || CFEqual(CFSTR("HeroEye"), value)
    || CFEqual(CFSTR("ProjectionKind"), value)
    || CFEqual(CFSTR("ViewPackingKind"), value)
    || CFEqual(CFSTR("TransportIdentifier"), value)
    || CFEqual(CFSTR("WarpKind"), value)
    || CFEqual(CFSTR("StereoCameraBaseline"), value)
    || CFEqual(CFSTR("HorizontalDisparityAdjustment"), value)
    || CFEqual(CFSTR("HorizontalFieldOfView"), value)
    || CFEqual(CFSTR("PowerLogSessionID"), value))
  {
    if (CFEqual(CFSTR("PixelAspectRatio"), value))
    {
      HasLeftStereoEyeView = vtCompressionSessionValidatePixelAspectRatio((uint64_t)a3);
      goto LABEL_113;
    }
    if (CFEqual(CFSTR("CleanAperture"), value))
    {
      HasLeftStereoEyeView = vtCompressionSessionValidateCleanAperture(a1, a3);
      goto LABEL_113;
    }
    if (CFEqual(CFSTR("FieldCount"), value))
    {
      HasLeftStereoEyeView = vtCompressionSessionValidateFieldCount((uint64_t)a3);
      goto LABEL_113;
    }
    if (CFEqual(CFSTR("FieldDetail"), value))
    {
      HasLeftStereoEyeView = vtCompressionSessionValidateFieldDetail(a3);
      goto LABEL_113;
    }
    if (CFEqual(CFSTR("ComponentRange"), value))
    {
      HasLeftStereoEyeView = vtCompressionSessionValidatePixelFormatComponentRange(a3);
      goto LABEL_113;
    }
    if (CFEqual(CFSTR("ColorPrimaries"), value))
    {
      updated = vtCompressionSessionValidateColorPrimaries(a3);
      if ((_DWORD)updated)
        return updated;
      v30 = *(const __CFNumber **)(a1 + 176);
      if (v30 == a3)
        goto LABEL_114;
      *(_QWORD *)(a1 + 176) = a3;
      if (a3)
        goto LABEL_146;
LABEL_147:
      if (v30)
        CFRelease(v30);
      v31 = *(const void **)(a1 + 384);
      if (v31)
      {
        CFRelease(v31);
        *(_QWORD *)(a1 + 384) = 0;
      }
      goto LABEL_114;
    }
    if (CFEqual(CFSTR("TransferFunction"), value))
    {
      updated = vtCompressionSessionValidateTransferFunction(a3);
      if ((_DWORD)updated)
        return updated;
      v30 = *(const __CFNumber **)(a1 + 184);
      if (v30 == a3)
        goto LABEL_114;
      *(_QWORD *)(a1 + 184) = a3;
      if (!a3)
        goto LABEL_147;
LABEL_146:
      CFRetain(a3);
      goto LABEL_147;
    }
    if (CFEqual(CFSTR("GammaLevel"), value))
    {
      updated = vtCompressionSessionValidateGammaLevel((uint64_t)a3);
      if ((_DWORD)updated)
        return updated;
      v30 = *(const __CFNumber **)(a1 + 192);
      if (v30 == a3)
        goto LABEL_114;
      *(_QWORD *)(a1 + 192) = a3;
      if (!a3)
        goto LABEL_147;
      goto LABEL_146;
    }
    if (CFEqual(CFSTR("YCbCrMatrix"), value))
    {
      updated = vtCompressionSessionValidateYCbCrMatrix(a3);
      if ((_DWORD)updated)
        return updated;
      v30 = *(const __CFNumber **)(a1 + 200);
      if (v30 == a3)
        goto LABEL_114;
      *(_QWORD *)(a1 + 200) = a3;
      if (!a3)
        goto LABEL_147;
      goto LABEL_146;
    }
    if (CFEqual(CFSTR("ICCProfile"), value))
    {
      updated = vtCompressionSessionValidateICCProfile(a3);
      if ((_DWORD)updated)
        return updated;
      v30 = *(const __CFNumber **)(a1 + 208);
      if (v30 == a3)
        goto LABEL_114;
      *(_QWORD *)(a1 + 208) = a3;
      if (!a3)
        goto LABEL_147;
      goto LABEL_146;
    }
    if (CFEqual(CFSTR("MasteringDisplayColorVolume"), value))
    {
      HasLeftStereoEyeView = vtCompressionSessionValidateMasteringDisplayColorVolume(a3);
      goto LABEL_113;
    }
    if (CFEqual(CFSTR("ContentLightLevelInfo"), value))
    {
      HasLeftStereoEyeView = vtCompressionSessionValidateContentLightLevelInfo(a3);
      goto LABEL_113;
    }
    if (CFEqual(CFSTR("AmbientViewingEnvironment"), value))
    {
      HasLeftStereoEyeView = vtCompressionSessionValidateAmbientViewingEnvironment(a3);
      goto LABEL_113;
    }
    if (CFEqual(CFSTR("MultiPassStorage"), value))
    {
      HasLeftStereoEyeView = vtCompressionSessionValidateMultiPassStorage(a3);
      goto LABEL_113;
    }
    if (CFEqual(CFSTR("AuxiliaryTypeInfo"), value))
    {
      HasLeftStereoEyeView = vtCompressionSessionValidateAuxiliaryTypeInfo(a3);
      goto LABEL_113;
    }
    if (CFEqual(CFSTR("ChromaLocationTopField"), value) || CFEqual(CFSTR("ChromaLocationBottomField"), value))
    {
      HasLeftStereoEyeView = vtCompressionSessionValidateChromaLocation(a3);
      goto LABEL_113;
    }
    if (CFEqual(CFSTR("PrepareEncodedSampleBuffersForPaddedWrites"), value))
    {
      HasLeftStereoEyeView = vtCompressionSessionValidatePrepareEncodedSampleBuffersForPaddedWrites(a3);
      goto LABEL_113;
    }
    if (CFEqual(CFSTR("HasLeftStereoEyeView"), value)
      || CFEqual(CFSTR("HasRightStereoEyeView"), value)
      || CFEqual(CFSTR("HasEyeViewsReversed"), value)
      || CFEqual(CFSTR("HasAdditionalViews"), value))
    {
      HasLeftStereoEyeView = vtCompressionSessionValidateHasLeftStereoEyeView(a3);
      goto LABEL_113;
    }
    if (CFEqual(CFSTR("HeroEye"), value)
      || CFEqual(CFSTR("ProjectionKind"), value)
      || CFEqual(CFSTR("ViewPackingKind"), value))
    {
      goto LABEL_264;
    }
    if (!CFEqual(CFSTR("TransportIdentifier"), value))
    {
      if (CFEqual(CFSTR("WarpKind"), value))
      {
LABEL_264:
        HasLeftStereoEyeView = vtCompressionSessionValidateHeroEye(a3);
        goto LABEL_113;
      }
      if (!CFEqual(CFSTR("StereoCameraBaseline"), value)
        && !CFEqual(CFSTR("HorizontalDisparityAdjustment"), value)
        && !CFEqual(CFSTR("HorizontalFieldOfView"), value))
      {
        if (!CFEqual(CFSTR("PowerLogSessionID"), value))
          goto LABEL_114;
        HasLeftStereoEyeView = vtCompressionSessionValidatePowerLogSessionID(a3);
        goto LABEL_113;
      }
    }
    HasLeftStereoEyeView = vtCompressionSessionValidateTransportIdentifier(a3);
LABEL_113:
    updated = HasLeftStereoEyeView;
    if ((_DWORD)HasLeftStereoEyeView)
      return updated;
LABEL_114:
    if (vtCompressionSessionIsPropertyHandledByVideoEncoder(a1, value))
    {
      if (*(_BYTE *)(a1 + 96) == 1
        || !FigVideoCodecTypeIsHEVCFlavor(*(_DWORD *)(a1 + 48))
        || !CFEqual(CFSTR("ColorPrimaries"), value)
        && !CFEqual(CFSTR("TransferFunction"), value)
        && !CFEqual(CFSTR("YCbCrMatrix"), value))
      {
        v27 = *(_QWORD *)(a1 + 432);
        v28 = *(uint64_t (**)(uint64_t, void *, const __CFNumber *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 56);
        if (!v28)
        {
          updated = 4294954514;
          goto LABEL_131;
        }
        updated = v28(v27, value, a3);
        if ((_DWORD)updated)
        {
LABEL_131:
          *(_BYTE *)(a1 + 256) = 1;
          return updated;
        }
        if (CFEqual(CFSTR("MultiPassStorage"), value))
        {
          v29 = *(const void **)(a1 + 760);
          *(_QWORD *)(a1 + 760) = a3;
          if (!a3)
            goto LABEL_128;
LABEL_127:
          CFRetain(a3);
          goto LABEL_128;
        }
      }
LABEL_130:
      updated = 0;
      goto LABEL_131;
    }
    if (CFEqual(CFSTR("PixelAspectRatio"), value))
    {
      v29 = *(const void **)(a1 + 136);
      *(_QWORD *)(a1 + 136) = a3;
      if (!a3)
        goto LABEL_128;
      goto LABEL_127;
    }
    if (CFEqual(CFSTR("CleanAperture"), value))
    {
      v29 = *(const void **)(a1 + 144);
      *(_QWORD *)(a1 + 144) = a3;
      if (a3)
        goto LABEL_127;
      goto LABEL_128;
    }
    if (CFEqual(CFSTR("FieldCount"), value))
    {
      v29 = *(const void **)(a1 + 152);
      *(_QWORD *)(a1 + 152) = a3;
      if (a3)
        goto LABEL_127;
      goto LABEL_128;
    }
    if (CFEqual(CFSTR("FieldDetail"), value))
    {
      v29 = *(const void **)(a1 + 160);
      *(_QWORD *)(a1 + 160) = a3;
      if (a3)
        goto LABEL_127;
      goto LABEL_128;
    }
    if (CFEqual(CFSTR("ComponentRange"), value))
    {
      v29 = *(const void **)(a1 + 168);
      *(_QWORD *)(a1 + 168) = a3;
      if (a3)
        goto LABEL_127;
      goto LABEL_128;
    }
    if (CFEqual(CFSTR("ColorPrimaries"), value))
    {
      v32 = *(const void **)(a1 + 176);
      *(_QWORD *)(a1 + 176) = a3;
      if (!a3)
        goto LABEL_162;
      goto LABEL_161;
    }
    if (CFEqual(CFSTR("TransferFunction"), value))
    {
      v32 = *(const void **)(a1 + 184);
      *(_QWORD *)(a1 + 184) = a3;
      if (!a3)
        goto LABEL_162;
LABEL_161:
      CFRetain(a3);
      goto LABEL_162;
    }
    if (CFEqual(CFSTR("GammaLevel"), value))
    {
      v32 = *(const void **)(a1 + 192);
      *(_QWORD *)(a1 + 192) = a3;
      if (a3)
        goto LABEL_161;
    }
    else if (CFEqual(CFSTR("YCbCrMatrix"), value))
    {
      v32 = *(const void **)(a1 + 200);
      *(_QWORD *)(a1 + 200) = a3;
      if (a3)
        goto LABEL_161;
    }
    else if (CFEqual(CFSTR("ICCProfile"), value))
    {
      v32 = *(const void **)(a1 + 208);
      *(_QWORD *)(a1 + 208) = a3;
      if (a3)
        goto LABEL_161;
    }
    else if (CFEqual(CFSTR("MasteringDisplayColorVolume"), value))
    {
      v32 = *(const void **)(a1 + 216);
      *(_QWORD *)(a1 + 216) = a3;
      if (a3)
        goto LABEL_161;
    }
    else
    {
      if (!CFEqual(CFSTR("ContentLightLevelInfo"), value))
      {
        if (CFEqual(CFSTR("AmbientViewingEnvironment"), value))
        {
          v29 = *(const void **)(a1 + 656);
          *(_QWORD *)(a1 + 656) = a3;
          if (a3)
            goto LABEL_127;
          goto LABEL_128;
        }
        if (CFEqual(CFSTR("MultiPassStorage"), value))
          return FigSignalErrorAt();
        if (CFEqual(CFSTR("AuxiliaryTypeInfo"), value))
        {
          v29 = *(const void **)(a1 + 232);
          *(_QWORD *)(a1 + 232) = a3;
          if (a3)
            goto LABEL_127;
          goto LABEL_128;
        }
        if (CFEqual(CFSTR("ChromaLocationTopField"), value))
        {
          v29 = *(const void **)(a1 + 240);
          *(_QWORD *)(a1 + 240) = a3;
          if (a3)
            goto LABEL_127;
          goto LABEL_128;
        }
        if (CFEqual(CFSTR("ChromaLocationBottomField"), value))
        {
          v29 = *(const void **)(a1 + 248);
          *(_QWORD *)(a1 + 248) = a3;
          if (a3)
            goto LABEL_127;
          goto LABEL_128;
        }
        if (CFEqual(CFSTR("PrepareEncodedSampleBuffersForPaddedWrites"), value))
        {
          if (a3 && (v34 = CFGetTypeID(a3), v34 == CFBooleanGetTypeID()))
          {
            updated = 0;
            *(_BYTE *)(a1 + 424) = CFBooleanGetValue(a3);
          }
          else
          {
            updated = FigSignalErrorAt();
          }
          goto LABEL_131;
        }
        if (CFEqual(CFSTR("HasLeftStereoEyeView"), value))
        {
          updated = 0;
          *(_BYTE *)(a1 + 688) = *MEMORY[0x1E0C9AE50] == (_QWORD)a3;
          goto LABEL_131;
        }
        if (CFEqual(CFSTR("HasRightStereoEyeView"), value))
        {
          updated = 0;
          *(_BYTE *)(a1 + 689) = *MEMORY[0x1E0C9AE50] == (_QWORD)a3;
          goto LABEL_131;
        }
        if (CFEqual(CFSTR("HasEyeViewsReversed"), value))
        {
          updated = 0;
          *(_BYTE *)(a1 + 690) = *MEMORY[0x1E0C9AE50] == (_QWORD)a3;
          goto LABEL_131;
        }
        if (CFEqual(CFSTR("HasAdditionalViews"), value))
        {
          updated = 0;
          *(_BYTE *)(a1 + 691) = *MEMORY[0x1E0C9AE50] == (_QWORD)a3;
          goto LABEL_131;
        }
        if (CFEqual(CFSTR("HeroEye"), value))
        {
          v29 = *(const void **)(a1 + 696);
          *(_QWORD *)(a1 + 696) = a3;
          if (a3)
            goto LABEL_127;
          goto LABEL_128;
        }
        if (CFEqual(CFSTR("ProjectionKind"), value))
        {
          v29 = *(const void **)(a1 + 704);
          *(_QWORD *)(a1 + 704) = a3;
          if (a3)
            goto LABEL_127;
          goto LABEL_128;
        }
        if (CFEqual(CFSTR("ViewPackingKind"), value))
        {
          v29 = *(const void **)(a1 + 712);
          *(_QWORD *)(a1 + 712) = a3;
          if (a3)
            goto LABEL_127;
          goto LABEL_128;
        }
        if (CFEqual(CFSTR("TransportIdentifier"), value))
        {
          if (!a3)
          {
            updated = 0;
            *(_BYTE *)(a1 + 720) = 0;
            goto LABEL_131;
          }
          *(_BYTE *)(a1 + 720) = 1;
          v35 = (void *)(a1 + 724);
        }
        else
        {
          if (CFEqual(CFSTR("WarpKind"), value))
          {
            v29 = *(const void **)(a1 + 728);
            *(_QWORD *)(a1 + 728) = a3;
            if (a3)
              goto LABEL_127;
            goto LABEL_128;
          }
          if (CFEqual(CFSTR("StereoCameraBaseline"), value))
          {
            if (!a3)
            {
              updated = 0;
              *(_BYTE *)(a1 + 736) = 0;
              goto LABEL_131;
            }
            *(_BYTE *)(a1 + 736) = 1;
            v35 = (void *)(a1 + 740);
          }
          else
          {
            if (!CFEqual(CFSTR("HorizontalDisparityAdjustment"), value))
            {
              if (CFEqual(CFSTR("HorizontalFieldOfView"), value))
              {
                v29 = *(const void **)(a1 + 264);
                *(_QWORD *)(a1 + 264) = a3;
                if (a3)
                  goto LABEL_127;
              }
              else
              {
                if (!CFEqual(CFSTR("PowerLogSessionID"), value))
                  goto LABEL_130;
                v29 = *(const void **)(a1 + 816);
                *(_QWORD *)(a1 + 816) = a3;
                if (a3)
                  goto LABEL_127;
              }
LABEL_128:
              if (v29)
                CFRelease(v29);
              goto LABEL_130;
            }
            if (!a3)
            {
              updated = 0;
              *(_BYTE *)(a1 + 744) = 0;
              goto LABEL_131;
            }
            *(_BYTE *)(a1 + 744) = 1;
            v35 = (void *)(a1 + 748);
          }
        }
        CFNumberGetValue(a3, kCFNumberSInt32Type, v35);
        goto LABEL_130;
      }
      v32 = *(const void **)(a1 + 224);
      *(_QWORD *)(a1 + 224) = a3;
      if (a3)
        goto LABEL_161;
    }
LABEL_162:
    if (v32)
      CFRelease(v32);
    v33 = *(const void **)(a1 + 384);
    if (v33)
    {
      CFRelease(v33);
      updated = 0;
      *(_QWORD *)(a1 + 384) = 0;
      goto LABEL_131;
    }
    goto LABEL_130;
  }
  if (CFEqual(CFSTR("MaximizePowerEfficiency"), value))
  {
    if (a3)
    {
      v36 = CFGetTypeID(a3);
      if (v36 == CFBooleanGetTypeID())
      {
        *(_BYTE *)(a1 + 529) = CFBooleanGetValue(a3);
        goto LABEL_101;
      }
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(CFSTR("HDRMetadataInsertionMode"), value))
  {
    if (!*(_BYTE *)(a1 + 552))
      return 0;
    if (*(_BYTE *)(a1 + 96))
      return FigSignalErrorAt();
    v37 = vtCompressionSessionValidateHDRMetadata(a1, a3);
    if (!(_DWORD)v37)
    {
      updated = 0;
      if (FigCFEqual())
        v38 = (_QWORD *)MEMORY[0x1E0C9AE50];
      else
        v38 = (_QWORD *)MEMORY[0x1E0C9AE40];
      *(_QWORD *)(a1 + 576) = *v38;
      return updated;
    }
    return v37;
  }
  if (CFEqual(CFSTR("PreserveDynamicHDRMetadata"), value))
  {
    updated = 0;
    if (!a3 || !*(_BYTE *)(a1 + 552))
      return updated;
    v39 = CFGetTypeID(a3);
    if (v39 == CFBooleanGetTypeID())
    {
      updated = 0;
      *(_BYTE *)(a1 + 608) = CFBooleanGetValue(a3);
      return updated;
    }
    return 0;
  }
  if (!CFEqual(CFSTR("AmbientViewingEnvironment"), value))
  {
    if (!CFEqual(CFSTR("FigThreadPriority"), value)
      && !CFEqual(CFSTR("ClientPID"), value)
      && !CFEqual(CFSTR("RealTime"), value))
    {
      if (!CFEqual(CFSTR("AllowPixelTransfer"), value))
        return 0;
      if (a3)
      {
        v46 = CFGetTypeID(a3);
        if (v46 == CFBooleanGetTypeID())
        {
          updated = 0;
          *(_BYTE *)(a1 + 528) = (const __CFNumber *)*MEMORY[0x1E0C9AE50] == a3;
          return updated;
        }
      }
      return FigSignalErrorAt();
    }
    if (a3)
    {
      v40 = CFNumberGetTypeID();
      if (v40 == CFGetTypeID(a3))
      {
        if (CFEqual(CFSTR("FigThreadPriority"), value))
        {
          v41 = (void *)(a1 + 532);
        }
        else
        {
          if (!CFEqual(CFSTR("ClientPID"), value))
          {
LABEL_337:
            if (*(_QWORD *)(a1 + 504))
            {
              if (CFEqual(CFSTR("ClientPID"), value))
                VTSessionSetProperty(*(VTSessionRef *)(a1 + 504), CFSTR("ClientPID"), a3);
              if (CFEqual(CFSTR("RealTime"), value))
                VTSessionSetProperty(*(VTSessionRef *)(a1 + 504), CFSTR("RealTime"), a3);
            }
            if (*(_QWORD *)(a1 + 376))
            {
              if (CFEqual(CFSTR("ClientPID"), value))
                VTSessionSetProperty(*(VTSessionRef *)(a1 + 376), CFSTR("ClientPID"), a3);
              if (CFEqual(CFSTR("RealTime"), value))
                VTSessionSetProperty(*(VTSessionRef *)(a1 + 376), CFSTR("RealTime"), a3);
            }
            updated = vtCompressionSessionDispatchQueuesUpdatePriorityAndClientPID((_QWORD *)a1);
            if ((_DWORD)updated)
              return updated;
            if (vtCompressionSessionIsPropertyHandledByVideoEncoder(a1, value))
            {
              v44 = *(_QWORD *)(a1 + 432);
              v45 = *(uint64_t (**)(uint64_t, void *, const __CFNumber *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 56);
              updated = v45 ? v45(v44, value, a3) : 4294954514;
            }
            else
            {
              updated = 0;
            }
            if (!CFEqual(CFSTR("RealTime"), value)
              || !vtCompressionSessionIsPropertyHandledByVideoEncoder(a1, CFSTR("FigThreadPriority"))
              || *(_DWORD *)(a1 + 532))
            {
              return updated;
            }
            v47 = *(_QWORD *)(a1 + 544);
            if (*MEMORY[0x1E0C9AE50] == v47)
            {
              valuePtr = 0;
            }
            else
            {
              v48 = *MEMORY[0x1E0C9AE40] == v47;
              valuePtr = 8 * v48;
              if (!v48)
                return updated;
            }
            v49 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
            v50 = *(_QWORD *)(a1 + 432);
            v51 = *(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 56);
            if (v51)
              v51(v50, CFSTR("FigThreadPriority"), v49);
            if (!v49)
              return updated;
            v12 = v49;
            goto LABEL_37;
          }
          v41 = (void *)(a1 + 536);
        }
        CFNumberGetValue(a3, kCFNumberSInt32Type, v41);
        goto LABEL_337;
      }
      if (!CFEqual(CFSTR("RealTime"), value))
        return FigSignalErrorAt();
      v43 = CFGetTypeID(a3);
      if (v43 != CFBooleanGetTypeID())
        goto LABEL_337;
      v42 = *(const void **)(a1 + 544);
      *(_QWORD *)(a1 + 544) = a3;
      CFRetain(a3);
    }
    else
    {
      if (!CFEqual(CFSTR("RealTime"), value))
        return FigSignalErrorAt();
      v42 = *(const void **)(a1 + 544);
      *(_QWORD *)(a1 + 544) = 0;
    }
    if (v42)
      CFRelease(v42);
    goto LABEL_337;
  }
  if (!*(_BYTE *)(a1 + 641))
    return 0;
  *(_BYTE *)(a1 + 642) = vtCompressionSessionIsPropertyHandledByVideoEncoder(a1, value);
  v37 = vtCompressionSessionUpdateAmbientViewingEnvironment(a1, a3);
  if (!*(_BYTE *)(a1 + 642))
    return v37;
LABEL_102:
  v25 = *(_QWORD *)(a1 + 432);
  v26 = *(uint64_t (**)(uint64_t, void *, const __CFNumber *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v26)
    return 4294954514;
  return v26(v25, value, a3);
}

uint64_t vtCoreAnalyticsSaveUserConfiguredCompressionProperty(void *value, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = *(_QWORD *)(a3 + 864);
  if (result)
  {
    result = CFSetContainsValue((CFSetRef)result, value);
    if ((_DWORD)result)
      return FigCFDictionarySetValue();
  }
  return result;
}

BOOL vtCompressionSessionIsPropertyHandledByRateControl(uint64_t a1, const void *a2)
{
  _BOOL8 v3;
  CFDictionaryRef theDict;

  theDict = 0;
  VTRateControlSessionCopySupportedPropertyDictionary(*(_QWORD *)(a1 + 800), &theDict);
  if (!theDict)
    return 0;
  v3 = CFDictionaryContainsKey(theDict, a2) != 0;
  if (theDict)
    CFRelease(theDict);
  return v3;
}

BOOL vtCompressionSessionIsPropertyHandledByVideoToolbox(const void *a1)
{
  _BOOL8 v2;
  CFDictionaryRef theDict;

  theDict = 0;
  vtCompressionSessionCopyPropertiesHandledByVideoToolbox((CFTypeRef *)&theDict);
  if (!theDict)
    return 0;
  v2 = CFDictionaryContainsKey(theDict, a1) != 0;
  if (theDict)
    CFRelease(theDict);
  return v2;
}

uint64_t vtCompressionSessionValidatePixelAspectRatio(uint64_t result)
{
  const __CFDictionary *v1;
  CFTypeID TypeID;
  const void *Value;
  const void *v4;
  const void *v5;
  CFTypeID v6;
  CFTypeID v7;
  uint64_t valuePtr;

  if (result)
  {
    v1 = (const __CFDictionary *)result;
    TypeID = CFDictionaryGetTypeID();
    if (TypeID == CFGetTypeID(v1))
    {
      Value = CFDictionaryGetValue(v1, (const void *)*MEMORY[0x1E0CA8E60]);
      v4 = CFDictionaryGetValue(v1, (const void *)*MEMORY[0x1E0CA8E70]);
      valuePtr = 0;
      if (Value
        && (v5 = v4, v6 = CFNumberGetTypeID(), v6 == CFGetTypeID(Value))
        && (CFNumberGetValue((CFNumberRef)Value, kCFNumberIntType, (char *)&valuePtr + 4), SHIDWORD(valuePtr) > 0)
        && v5
        && (v7 = CFNumberGetTypeID(), v7 == CFGetTypeID(v5))
        && (CFNumberGetValue((CFNumberRef)v5, kCFNumberIntType, &valuePtr), (int)valuePtr > 0))
      {
        return 0;
      }
      else
      {
        return FigSignalErrorAt();
      }
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t vtCompressionSessionValidateCleanAperture(uint64_t a1, const void *a2)
{
  CFTypeID TypeID;
  unsigned int v5;
  int64_t v6;
  unsigned int v7;
  int64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (!a2)
    return 0;
  TypeID = CFDictionaryGetTypeID();
  if (TypeID != CFGetTypeID(a2))
    return FigSignalErrorAt();
  v12 = 0;
  v13 = 0;
  v10 = 0;
  v11 = 0;
  vtReadRationalOrIntegerFromDictionary((const __CFDictionary *)a2, (const void *)*MEMORY[0x1E0CA22F8], (const void *)*MEMORY[0x1E0CA8D60], (char *)&v13 + 4, &v13);
  vtReadRationalOrIntegerFromDictionary((const __CFDictionary *)a2, (const void *)*MEMORY[0x1E0CA22C8], (const void *)*MEMORY[0x1E0CA8D40], (char *)&v12 + 4, &v12);
  vtReadRationalOrIntegerFromDictionary((const __CFDictionary *)a2, (const void *)*MEMORY[0x1E0CA22D8], (const void *)*MEMORY[0x1E0CA8D48], (char *)&v11 + 4, &v11);
  vtReadRationalOrIntegerFromDictionary((const __CFDictionary *)a2, (const void *)*MEMORY[0x1E0CA22E8], (const void *)*MEMORY[0x1E0CA8D58], (char *)&v10 + 4, &v10);
  if (SHIDWORD(v13) >= 1 && SHIDWORD(v12) >= 1)
  {
    if ((_DWORD)v13)
    {
      if ((_DWORD)v12)
      {
        if ((_DWORD)v11)
        {
          if ((_DWORD)v10)
          {
            v5 = *(_DWORD *)(a1 + 40) * v13 - HIDWORD(v13);
            v6 = SHIDWORD(v11) * (unint64_t)(2 * v13);
            if (v6 <= (uint64_t)(v11 * (unint64_t)v5)
              && v6 >= -(uint64_t)(v11 * (unint64_t)v5))
            {
              v7 = *(_DWORD *)(a1 + 44) * v12 - HIDWORD(v12);
              v8 = SHIDWORD(v10) * (unint64_t)(2 * v12);
              if (v8 <= (uint64_t)(v10 * (unint64_t)v7)
                && v8 >= -(uint64_t)(v10 * (unint64_t)v7))
              {
                return 0;
              }
            }
          }
        }
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t vtCompressionSessionValidateFieldCount(uint64_t result)
{
  const __CFNumber *v1;
  CFTypeID TypeID;
  int valuePtr;

  if (result)
  {
    v1 = (const __CFNumber *)result;
    TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(v1))
    {
      valuePtr = 0;
      CFNumberGetValue(v1, kCFNumberIntType, &valuePtr);
      result = 0;
      if ((valuePtr - 3) <= 0xFFFFFFFD)
        return FigSignalErrorAt();
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t vtCompressionSessionValidateFieldDetail(const void *a1)
{
  if (!a1
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0CA8DF0])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0CA8DE8])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0CA8DD8])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0CA8DE0]))
  {
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t vtCompressionSessionValidatePixelFormatComponentRange(const void *a1)
{
  if (!a1 || CFEqual(a1, CFSTR("FullRange")) || CFEqual(a1, CFSTR("VideoRange")) || CFEqual(a1, CFSTR("WideRange")))
    return 0;
  else
    return FigSignalErrorAt();
}

uint64_t vtCompressionSessionValidateColorPrimaries(const void *a1)
{
  if (!a1
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0CA8D88])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0CA8D78])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0CA8DA0])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0CA2118])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0CA2108])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0CA20F8])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0CA2120]))
  {
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t vtCompressionSessionValidateTransferFunction(const void *a1)
{
  if (!a1
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0CA8EB0])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0CA8EC0])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0CA8ED8])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0CA2310])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0CA2340])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0CA2338])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0CA2318])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0CA2328])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0CA2350]))
  {
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t vtCompressionSessionValidateGammaLevel(uint64_t result)
{
  const __CFNumber *v1;
  CFTypeID TypeID;
  double valuePtr;

  if (result)
  {
    v1 = (const __CFNumber *)result;
    TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(v1))
    {
      valuePtr = 0.0;
      CFNumberGetValue(v1, kCFNumberDoubleType, &valuePtr);
      if (valuePtr <= 0.0)
        return FigSignalErrorAt();
      else
        return 0;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t vtCompressionSessionValidateYCbCrMatrix(const void *a1)
{
  if (!a1
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0CA8F18])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0CA8F10])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0CA8F30])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0CA2360])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0CA8EF8]))
  {
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t vtCompressionSessionValidateICCProfile(const void *a1)
{
  CFTypeID TypeID;

  if (!a1)
    return 0;
  TypeID = CFDataGetTypeID();
  if (TypeID == CFGetTypeID(a1))
    return 0;
  else
    return FigSignalErrorAt();
}

uint64_t vtCompressionSessionValidateMasteringDisplayColorVolume(const void *a1)
{
  CFTypeID TypeID;

  if (!a1)
    return 0;
  TypeID = CFDataGetTypeID();
  if (TypeID == CFGetTypeID(a1) && CFDataGetLength((CFDataRef)a1) == 24)
    return 0;
  else
    return FigSignalErrorAt();
}

uint64_t vtCompressionSessionValidateContentLightLevelInfo(const void *a1)
{
  CFTypeID TypeID;

  if (!a1)
    return 0;
  TypeID = CFDataGetTypeID();
  if (TypeID == CFGetTypeID(a1) && CFDataGetLength((CFDataRef)a1) == 4)
    return 0;
  else
    return FigSignalErrorAt();
}

uint64_t vtCompressionSessionValidateAmbientViewingEnvironment(const void *a1)
{
  CFTypeID TypeID;

  if (!a1)
    return 0;
  TypeID = CFDataGetTypeID();
  if (TypeID == CFGetTypeID(a1) && CFDataGetLength((CFDataRef)a1) == 8)
    return 0;
  else
    return FigSignalErrorAt();
}

uint64_t vtCompressionSessionValidateMultiPassStorage(const void *a1)
{
  CFTypeID TypeID;

  if (!a1)
    return 0;
  TypeID = VTMultiPassStorageGetTypeID();
  if (TypeID == CFGetTypeID(a1))
    return 0;
  else
    return FigSignalErrorAt();
}

uint64_t vtCompressionSessionValidateAuxiliaryTypeInfo(const void *a1)
{
  CFTypeID TypeID;

  if (!a1)
    return 0;
  TypeID = CFStringGetTypeID();
  if (TypeID == CFGetTypeID(a1))
    return 0;
  else
    return FigSignalErrorAt();
}

uint64_t vtCompressionSessionValidateChromaLocation(const void *a1)
{
  if (!a1
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0CA8D10])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0CA8D00])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0CA8D20])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0CA8D18])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0CA8CF8])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0CA8CF0])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0CA8D08]))
  {
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t vtCompressionSessionValidatePrepareEncodedSampleBuffersForPaddedWrites(const void *a1)
{
  CFTypeID TypeID;

  if (!a1)
    return 4294954394;
  TypeID = CFBooleanGetTypeID();
  if (TypeID == CFGetTypeID(a1))
    return 0;
  else
    return FigSignalErrorAt();
}

uint64_t vtCompressionSessionValidateHasLeftStereoEyeView(const void *a1)
{
  CFTypeID v1;

  if (!a1)
    return 4294954394;
  v1 = CFGetTypeID(a1);
  if (v1 == CFBooleanGetTypeID())
    return 0;
  else
    return FigSignalErrorAt();
}

uint64_t vtCompressionSessionValidateHeroEye(const void *a1)
{
  CFTypeID v1;

  if (!a1)
    return 0;
  v1 = CFGetTypeID(a1);
  if (v1 == CFStringGetTypeID())
    return 0;
  else
    return FigSignalErrorAt();
}

uint64_t vtCompressionSessionValidateTransportIdentifier(const void *a1)
{
  CFTypeID v1;

  if (!a1)
    return 0;
  v1 = CFGetTypeID(a1);
  if (v1 == CFNumberGetTypeID())
    return 0;
  else
    return FigSignalErrorAt();
}

uint64_t vtCompressionSessionValidatePowerLogSessionID(const void *a1)
{
  CFTypeID v1;

  if (!a1)
    return 4294954394;
  v1 = CFGetTypeID(a1);
  if (v1 == CFStringGetTypeID())
    return 0;
  else
    return FigSignalErrorAt();
}

uint64_t FigVideoCodecTypeIsHEVCFlavor(int a1)
{
  uint64_t result;
  int v3;

  result = 1;
  if (a1 <= 1836415072)
  {
    if (a1 > 1751479856)
    {
      if (a1 == 1751479857)
        return result;
      v3 = 1752589105;
    }
    else
    {
      if (a1 == 1667790435)
        return result;
      v3 = 1718908520;
    }
    goto LABEL_13;
  }
  if (a1 <= 1902667125)
  {
    if (a1 == 1836415073)
      return result;
    v3 = 1869117027;
    goto LABEL_13;
  }
  if (a1 != 1902667126 && a1 != 1902671459)
  {
    v3 = 1902998904;
LABEL_13:
    if (a1 != v3)
      return 0;
  }
  return result;
}

uint64_t vtCompressionSessionValidateHDRMetadata(uint64_t a1, const void *a2)
{
  CFTypeID TypeID;
  int v5;
  unsigned __int16 v6;
  int v7;
  unsigned int v8;

  if (!a2)
    return 0;
  TypeID = CFStringGetTypeID();
  if (TypeID != CFGetTypeID(a2) || !FigCFEqual() && !FigCFEqual())
    return FigSignalErrorAt();
  v5 = *(_DWORD *)(a1 + 48);
  if (v5 > 1685481520)
  {
    if (v5 <= 1869117026)
    {
      if (v5 > 1751479856)
      {
        if (v5 == 1751479857 || v5 == 1752589105)
          return 0;
        v7 = 1836415073;
      }
      else
      {
        if (v5 == 1685481521 || v5 == 1685481573)
          return 0;
        v7 = 1718908520;
      }
    }
    else
    {
      if (v5 > 1902407031)
      {
        if (v5 > 1902671458)
        {
          if (v5 != 1902671459)
          {
            v7 = 1902998904;
            goto LABEL_39;
          }
        }
        else if (v5 != 1902407032)
        {
          v7 = 1902667126;
          goto LABEL_39;
        }
        return 0;
      }
      if (v5 == 1869117027 || v5 == 1902405681)
        return 0;
      v7 = 1902405733;
    }
  }
  else if (v5 > 1634759271)
  {
    if (v5 <= 1667524656)
    {
      v8 = v5 - 1634759272;
      if (v8 <= 6 && ((1 << v8) & 0x51) != 0)
        return 0;
      return FigSignalErrorAt();
    }
    if (v5 == 1667524657 || v5 == 1667790435)
      return 0;
    v7 = 1684895096;
  }
  else
  {
    if (v5 > 1634743415)
    {
      if ((v5 - 1634755432) <= 0xB && ((1 << (v5 - 104)) & 0x8C1) != 0)
        return 0;
      v6 = 13432;
    }
    else
    {
      if (v5 == 1634742376 || v5 == 1634742888)
        return 0;
      v6 = 13416;
    }
    v7 = v6 | 0x61700000;
  }
LABEL_39:
  if (v5 == v7)
    return 0;
  return FigSignalErrorAt();
}

uint64_t vtCompressionSessionUpdateAmbientViewingEnvironment(uint64_t a1, CFTypeRef cf)
{
  CFTypeID v4;
  const void *v5;
  CFIndex Length;
  const void *v7;
  uint64_t result;
  const void *v9;
  const void *v10;

  if (cf)
  {
    v4 = CFGetTypeID(cf);
    if (v4 == CFDataGetTypeID())
    {
      v5 = *(const void **)(a1 + 656);
      *(_QWORD *)(a1 + 656) = cf;
      CFRetain(cf);
      if (v5)
        CFRelease(v5);
      Length = CFDataGetLength((CFDataRef)cf);
      CFDataGetBytePtr((CFDataRef)cf);
      if (Length == 8 || (result = FigSignalErrorAt(), !(_DWORD)result))
      {
        v7 = *(const void **)(a1 + 664);
        if (v7)
          CFRelease(v7);
        result = FigHEVCBridge_CreateAmbientViewingEnvironmentSEINAL();
        if (!(_DWORD)result)
          *(_BYTE *)(a1 + 640) = 1;
      }
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  else
  {
    v9 = *(const void **)(a1 + 656);
    if (v9)
    {
      CFRelease(v9);
      *(_QWORD *)(a1 + 656) = 0;
    }
    v10 = *(const void **)(a1 + 664);
    if (v10)
    {
      CFRelease(v10);
      *(_QWORD *)(a1 + 664) = 0;
    }
    result = 0;
    *(_BYTE *)(a1 + 640) = 0;
  }
  return result;
}

uint64_t vtCompressionSessionDispatchQueuesUpdatePriorityAndClientPID(_QWORD *a1)
{
  uint64_t result;

  if (!a1[36] || (result = FigDispatchQueueSetPriorityAndClientPID(), !(_DWORD)result))
  {
    if (!a1[39] || (result = FigDispatchQueueSetPriorityAndClientPID(), !(_DWORD)result))
    {
      result = a1[43];
      if (result)
        return FigDispatchQueueSetPriorityAndClientPID();
    }
  }
  return result;
}

uint64_t vtCompressionSessionEnsurePixelBufferPoolsAreUpToDate(uint64_t a1, __CVBuffer *a2, CMTaggedBufferGroupRef group)
{
  __CVBuffer *CVPixelBufferAtIndex;
  _BOOL4 v5;
  uint64_t v6;
  const __CFDictionary *v7;
  __CFDictionary *v8;
  const void *v9;
  CFAllocatorRef *v10;
  const void **v11;
  const void **v12;
  const __CFDictionary *v13;
  const void *v14;
  CFMutableDictionaryRef Mutable;
  const __CFAllocator *v16;
  CFNumberRef v17;
  CFNumberRef v18;
  CFNumberRef v19;
  CFDictionaryRef v20;
  const __CFDictionary *v21;
  const void *v22;
  CFAllocatorRef v23;
  uint64_t v24;
  const __CFDictionary *MutableCopy;
  const void *v26;
  __CFDictionary *v27;
  const void *v28;
  const void *v29;
  const void *v30;
  const void *v31;
  const void *v32;
  uint64_t Count;
  void *v34;
  const __CFArray *Value;
  const __CFArray *v36;
  CFTypeID v37;
  const void *v38;
  const void *v39;
  const void *v40;
  CFTypeID v41;
  uint64_t v42;
  CFTypeID v43;
  uint64_t v44;
  char v45;
  OSType PixelFormatType;
  CFIndex v47;
  CFMutableArrayRef v48;
  __CFArray *v49;
  CFIndex v50;
  int v51;
  const __CFNumber *ValueAtIndex;
  const __CFNumber *v53;
  CFTypeID v54;
  uint64_t v55;
  const void *v56;
  const __CFArray *v57;
  const __CFArray *v58;
  CFTypeID v59;
  CFIndex v60;
  __CFArray *v61;
  CFTypeID v62;
  CFIndex v63;
  const __CFNumber *v64;
  const __CFNumber *v65;
  CFTypeID v66;
  const __CFAllocator *v67;
  int v68;
  CFTypeRef *v69;
  CVPixelBufferPoolRef *v70;
  CFTypeRef v71;
  uint64_t v73;
  const __CFDictionary *v74;
  void *key;
  const __CFAllocator *allocator;
  CFTypeRef cf;
  OSType Width;
  int Height;
  OSType valuePtr;

  CVPixelBufferAtIndex = a2;
  cf = 0;
  if (!a2 && group)
  {
    if (CMTaggedBufferGroupGetCount(group) < 1)
    {
      CVPixelBufferAtIndex = 0;
      goto LABEL_12;
    }
    CVPixelBufferAtIndex = (__CVBuffer *)FigTaggedBufferGroupGetCVPixelBufferAtIndex();
  }
  if (CVPixelBufferAtIndex)
  {
    v5 = *(_OWORD *)(a1 + 64) == 0;
    if (*(_QWORD *)(a1 + 72) && !CVPixelBufferIsCompatibleWithAttributes())
      v5 = 1;
    if (v5)
      goto LABEL_16;
    goto LABEL_13;
  }
LABEL_12:
  v5 = 0;
LABEL_13:
  if (*(_DWORD *)(a1 + 484) == *(_DWORD *)(a1 + 480))
  {
    v6 = 0;
    v7 = 0;
LABEL_15:
    v8 = 0;
    goto LABEL_105;
  }
LABEL_16:
  v9 = *(const void **)(a1 + 64);
  v10 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  v11 = (const void **)MEMORY[0x1E0CA8FD8];
  v12 = (const void **)MEMORY[0x1E0CA90E0];
  if (!v9 || (v13 = (const __CFDictionary *)CFRetain(v9)) == 0)
  {
    if (CVPixelBufferAtIndex)
    {
      Mutable = *(CFMutableDictionaryRef *)(a1 + 72);
      if (v5)
      {
        if (Mutable)
        {
          CFRelease(*(CFTypeRef *)(a1 + 72));
          *(_QWORD *)(a1 + 72) = 0;
        }
      }
      else if (Mutable)
      {
LABEL_30:
        v7 = (const __CFDictionary *)CFRetain(Mutable);
        goto LABEL_32;
      }
      v16 = *v10;
      Mutable = CFDictionaryCreateMutable(*v10, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      valuePtr = CVPixelBufferGetPixelFormatType(CVPixelBufferAtIndex);
      v17 = CFNumberCreate(v16, kCFNumberSInt32Type, &valuePtr);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA9040], v17);
      CFRelease(v17);
      Height = CVPixelBufferGetHeight(CVPixelBufferAtIndex);
      v18 = CFNumberCreate(v16, kCFNumberSInt32Type, &Height);
      CFDictionarySetValue(Mutable, *v11, v18);
      CFRelease(v18);
      Width = CVPixelBufferGetWidth(CVPixelBufferAtIndex);
      v19 = CFNumberCreate(v16, kCFNumberSInt32Type, &Width);
      CFDictionarySetValue(Mutable, *v12, v19);
      CFRelease(v19);
      if (CVPixelBufferGetIOSurface(CVPixelBufferAtIndex))
      {
        v20 = CFDictionaryCreate(v16, 0, 0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA8FF0], v20);
        CFRelease(v20);
        v21 = CVPixelBufferCopyCreationAttributes(CVPixelBufferAtIndex);
        v22 = (const void *)*MEMORY[0x1E0CA9000];
        if (CFDictionaryGetValue(v21, (const void *)*MEMORY[0x1E0CA9000]))
          CFDictionarySetValue(Mutable, v22, (const void *)*MEMORY[0x1E0C9AE50]);
        CFRelease(v21);
      }
      *(_QWORD *)(a1 + 72) = Mutable;
      if (Mutable)
        goto LABEL_30;
    }
    v7 = 0;
    goto LABEL_32;
  }
  v7 = v13;
  v14 = *(const void **)(a1 + 72);
  if (v14)
  {
    CFRelease(v14);
    *(_QWORD *)(a1 + 72) = 0;
  }
LABEL_32:
  v23 = *v10;
  v24 = VTCreatePixelBufferPoolAttributesWithName(*v10, *(unsigned int *)(a1 + 536), CFSTR("encode"), (__CFDictionary **)&cf);
  if ((_DWORD)v24)
  {
    v6 = v24;
    goto LABEL_15;
  }
  allocator = v23;
  MutableCopy = (const __CFDictionary *)FigCFDictionaryCreateMutableCopy();
  v8 = MutableCopy;
  if (*(_QWORD *)(a1 + 176)
    || *(_QWORD *)(a1 + 184)
    || *(_QWORD *)(a1 + 200)
    || *(_QWORD *)(a1 + 240)
    || *(_QWORD *)(a1 + 248))
  {
    v26 = (const void *)*MEMORY[0x1E0CA8C68];
    CFDictionaryGetValue(MutableCopy, (const void *)*MEMORY[0x1E0CA8C68]);
    v27 = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
    if (!vtCompressionSessionIsIPT(a1))
    {
      v28 = *(const void **)(a1 + 176);
      if (v28)
        CFDictionarySetValue(v27, (const void *)*MEMORY[0x1E0CA8D68], v28);
      v29 = *(const void **)(a1 + 184);
      if (v29)
        CFDictionarySetValue(v27, (const void *)*MEMORY[0x1E0CA8E98], v29);
      v30 = *(const void **)(a1 + 200);
      if (v30)
        CFDictionarySetValue(v27, (const void *)*MEMORY[0x1E0CA8EE8], v30);
    }
    v31 = *(const void **)(a1 + 240);
    if (v31)
      CFDictionarySetValue(v27, (const void *)*MEMORY[0x1E0CA8CE8], v31);
    v32 = *(const void **)(a1 + 248);
    if (v32)
      CFDictionarySetValue(v27, (const void *)*MEMORY[0x1E0CA8CE0], v32);
    CFDictionarySetValue(v8, v26, v27);
    if (v27)
      CFRelease(v27);
  }
  valuePtr = 0;
  Height = 0;
  Count = FigCFDictionaryGetCount();
  if (!CVPixelBufferAtIndex)
    goto LABEL_75;
  if (!Count)
    goto LABEL_75;
  v34 = (void *)*MEMORY[0x1E0CA9040];
  Value = (const __CFArray *)CFDictionaryGetValue(v8, (const void *)*MEMORY[0x1E0CA9040]);
  if (!Value)
    goto LABEL_75;
  v36 = Value;
  v37 = CFGetTypeID(Value);
  if (v37 != CFArrayGetTypeID())
    goto LABEL_75;
  v38 = CFDictionaryGetValue(v8, *v12);
  v39 = CFDictionaryGetValue(v8, *v11);
  if (!v38)
    goto LABEL_60;
  v40 = v39;
  v41 = CFGetTypeID(v38);
  v42 = 0;
  if (v41 == CFNumberGetTypeID() && v40)
  {
    v43 = CFGetTypeID(v40);
    if (v43 == CFNumberGetTypeID())
    {
      CFNumberGetValue((CFNumberRef)v38, kCFNumberIntType, &valuePtr);
      CFNumberGetValue((CFNumberRef)v40, kCFNumberIntType, &Height);
      v42 = (int)valuePtr;
      goto LABEL_61;
    }
LABEL_60:
    v42 = 0;
  }
LABEL_61:
  key = v34;
  v45 = 1;
  if (CVPixelBufferGetWidth(CVPixelBufferAtIndex) == v42)
  {
    v44 = Height;
    if (CVPixelBufferGetHeight(CVPixelBufferAtIndex) == v44)
      v45 = 0;
  }
  PixelFormatType = CVPixelBufferGetPixelFormatType(CVPixelBufferAtIndex);
  v47 = CFArrayGetCount(v36);
  v48 = CFArrayCreateMutable(allocator, v47, MEMORY[0x1E0C9B378]);
  if (v48)
  {
    v49 = v48;
    v74 = v7;
    if (CFArrayGetCount(v36) >= 1)
    {
      v50 = 0;
      v51 = 0;
      do
      {
        ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v36, v50);
        if (ValueAtIndex)
        {
          v53 = ValueAtIndex;
          v54 = CFGetTypeID(ValueAtIndex);
          if (v54 == CFNumberGetTypeID())
          {
            Width = 0;
            CFNumberGetValue(v53, kCFNumberSInt32Type, &Width);
            if (VTPixelTransferSessionCanTransfer(PixelFormatType, Width, v45))
              CFArrayInsertValueAtIndex(v49, v51++, v53);
            else
              CFArrayAppendValue(v49, v53);
          }
        }
        ++v50;
      }
      while (CFArrayGetCount(v36) > v50);
    }
    CFDictionarySetValue(v8, key, v49);
    CFRelease(v49);
    v7 = v74;
  }
  else
  {
    v73 = FigSignalErrorAt();
    if ((_DWORD)v73)
    {
      v6 = v73;
      goto LABEL_105;
    }
  }
LABEL_75:
  v55 = *(_QWORD *)(a1 + 168);
  if (!v55)
    goto LABEL_96;
  if (!CFDictionaryGetCount(v8))
    goto LABEL_96;
  v56 = (const void *)*MEMORY[0x1E0CA9040];
  v57 = (const __CFArray *)CFDictionaryGetValue(v8, (const void *)*MEMORY[0x1E0CA9040]);
  if (!v57)
    goto LABEL_96;
  v58 = v57;
  v59 = CFGetTypeID(v57);
  if (v59 == CFArrayGetTypeID())
  {
    v60 = CFArrayGetCount(v58);
    v61 = CFArrayCreateMutableCopy(allocator, v60, v58);
    if (!v61)
      goto LABEL_96;
  }
  else
  {
    v62 = CFGetTypeID(v58);
    if (v62 != CFNumberGetTypeID())
      goto LABEL_96;
    v61 = CFArrayCreateMutable(allocator, 1, MEMORY[0x1E0C9B378]);
    CFArrayAppendValue(v61, v58);
    if (!v61)
      goto LABEL_96;
  }
  if (CFArrayGetCount(v61))
  {
    if (CFArrayGetCount(v61) >= 1)
    {
      v63 = 0;
      do
      {
        v64 = (const __CFNumber *)CFArrayGetValueAtIndex(v61, v63);
        if (v64
          && (v65 = v64, v66 = CFGetTypeID(v64), v66 == CFNumberGetTypeID())
          && (valuePtr = 0,
              CFNumberGetValue(v65, kCFNumberSInt32Type, &valuePtr),
              !vtCompressionSessionDoesPixelFormatHaveDesiredColorRange(valuePtr, v55)))
        {
          CFArrayRemoveValueAtIndex(v61, v63);
        }
        else
        {
          ++v63;
        }
      }
      while (v63 < CFArrayGetCount(v61));
    }
    if (!CFArrayGetCount(v61))
    {
      v6 = FigSignalErrorAt();
      CFRelease(v61);
      if ((_DWORD)v6)
        goto LABEL_105;
      goto LABEL_96;
    }
    CFDictionarySetValue(v8, v56, v61);
  }
  CFRelease(v61);
LABEL_96:
  v67 = CFGetAllocator((CFTypeRef)a1);
  v68 = *(unsigned __int8 *)(a1 + 792);
  if (v68 != 1)
    LOBYTE(v68) = *(_BYTE *)(a1 + 793) == 0;
  v69 = (CFTypeRef *)(a1 + 496);
  v70 = VTBuildPixelBufferPools2(v67, v7, v8, (const __CFDictionary *)cf, *(_QWORD *)(a1 + 40), 0, 0, 0, 0, v68, (CVPixelBufferPoolRef *)(a1 + 496), (CVPixelBufferPoolRef *)(a1 + 488), 0, 0);
  if ((_DWORD)v70)
  {
    v6 = (uint64_t)v70;
    FigSignalErrorAt();
  }
  else
  {
    *(_DWORD *)(a1 + 484) = *(_DWORD *)(a1 + 480);
    if (*(_QWORD *)(a1 + 488))
    {
      v6 = 0;
    }
    else
    {
      v71 = *v69;
      if (*v69)
        v71 = CFRetain(v71);
      v6 = 0;
      *(_QWORD *)(a1 + 488) = v71;
    }
  }
LABEL_105:
  if (cf)
    CFRelease(cf);
  if (v7)
    CFRelease(v7);
  if (v8)
    CFRelease(v8);
  return v6;
}

BOOL vtCompressionSessionIsIPT(uint64_t a1)
{
  return !*(_QWORD *)(a1 + 176) && FigCFEqual() && FigCFEqual();
}

uint64_t vtCompressionSessionSetOneProperty(void *value, const __CFNumber *a2, uint64_t a3)
{
  uint64_t result;

  result = VTCompressionSessionSetProperty(*(_QWORD *)a3, value, a2);
  if (!*(_DWORD *)(a3 + 8))
    *(_DWORD *)(a3 + 8) = result;
  return result;
}

uint64_t vtCompressionSessionValidateOneProperty(const void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;

  result = vtCompressionSessionIsPropertyHandledByRateControl(*a3, a1);
  if ((_DWORD)result)
    return VTRateControlSessionSetProperty(*(_QWORD *)(*a3 + 800));
  return result;
}

uint64_t VTCompressionSessionCopySerializableProperties(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, _QWORD *);

  *a3 = 0;
  if (!a1 || *(_DWORD *)(a1 + 16) == 2)
    return FigSignalErrorAt();
  if (*(_QWORD *)(a1 + 24))
    return VTCompressionSessionRemote_CopySerializableProperties(*(_QWORD *)(a1 + 24));
  v6 = *(_QWORD *)(a1 + 432);
  v7 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (!v7)
    return 0;
  result = v7(v6, a2, a3);
  if ((_DWORD)result == -12782)
    return 0;
  return result;
}

CVPixelBufferPoolRef VTCompressionSessionGetPixelBufferPool(VTCompressionSessionRef session)
{
  _QWORD *v2;
  int v4;

  if (!session || *((_DWORD *)session + 4) == 2)
  {
    if (FigSignalErrorAt())
      return 0;
  }
  else
  {
    v2 = (_QWORD *)*((_QWORD *)session + 3);
    if (v2)
      return (CVPixelBufferPoolRef)VTCompressionSessionRemote_GetPixelBufferPool(v2);
    MEMORY[0x1940280C4](*((_QWORD *)session + 58));
    v4 = vtCompressionSessionEnsurePixelBufferPoolsAreUpToDate((uint64_t)session, 0, 0);
    MEMORY[0x1940280D0](*((_QWORD *)session + 58));
    if (v4)
      return 0;
  }
  return (CVPixelBufferPoolRef)*((_QWORD *)session + 62);
}

OSStatus VTCompressionSessionPrepareToEncodeFrames(VTCompressionSessionRef session)
{
  if (!session)
    return FigSignalErrorAt();
  if (*((_QWORD *)session + 3))
    return VTCompressionSessionRemote_PrepareToEncodeFrames(*((_QWORD *)session + 3));
  return vtCompressionSessionPrepareToEncodeFramesInternal((uint64_t)session);
}

uint64_t vtCompressionSessionPrepareToEncodeFramesInternal(uint64_t a1)
{
  uint64_t v1;
  int v3;
  int v4;
  unsigned __int16 v5;
  int v6;
  CFAllocatorRef *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, const __CFString *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, const __CFString *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, const __CFString *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, const __CFString *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, const __CFString *, uint64_t);
  uint64_t v24;
  void (*v25)(uint64_t, const __CFString *, CFAllocatorRef, CFArrayRef *);
  CFIndex Count;
  CFArrayRef v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t (*v31)(uint64_t);
  const __CFString *v32;
  int valuePtr;
  const __CFNumber *propertyValueOut;
  CFArrayRef theArray[5];

  v1 = 0;
  propertyValueOut = 0;
  valuePtr = 0;
  if (*(_BYTE *)(a1 + 96))
    return v1;
  if (!*(_QWORD *)(a1 + 576))
  {
    v3 = *(_DWORD *)(a1 + 48);
    if (v3 > 1836415072)
    {
      if (v3 > 1902407031)
      {
        if (v3 > 1902671458)
        {
          if (v3 == 1902998904)
            goto LABEL_28;
          v5 = 30307;
        }
        else
        {
          if (v3 == 1902407032)
            goto LABEL_28;
          v5 = 25974;
        }
        v4 = v5 | 0x71680000;
      }
      else if (v3 > 1902405680)
      {
        if (v3 == 1902405681)
          goto LABEL_28;
        v4 = 1902405733;
      }
      else
      {
        if (v3 == 1836415073)
          goto LABEL_28;
        v4 = 1869117027;
      }
    }
    else if (v3 > 1685481572)
    {
      if (v3 > 1751479856)
      {
        if (v3 == 1751479857)
          goto LABEL_28;
        v4 = 1752589105;
      }
      else
      {
        if (v3 == 1685481573)
          goto LABEL_28;
        v4 = 1718908520;
      }
    }
    else if (v3 > 1684895095)
    {
      if (v3 == 1684895096)
        goto LABEL_28;
      v4 = 1685481521;
    }
    else
    {
      if (v3 == 1667524657)
        goto LABEL_28;
      v4 = 1667790435;
    }
    if (v3 != v4)
    {
LABEL_29:
      *(_QWORD *)(a1 + 576) = *MEMORY[0x1E0C9AE40];
      goto LABEL_30;
    }
LABEL_28:
    if (vtCompressionSessionIsDolbyCompatible(a1))
      goto LABEL_30;
    goto LABEL_29;
  }
LABEL_30:
  if (!vtCompressionSessionIsIPT(a1))
  {
    if (*(_QWORD *)(a1 + 176))
    {
      if (vtCompressionSessionIsPropertyHandledByVideoEncoder(a1, CFSTR("ColorPrimaries")))
      {
        v9 = *(_QWORD *)(a1 + 432);
        v10 = *(_QWORD *)(a1 + 176);
        v11 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 56);
        if (v11)
          v11(v9, CFSTR("ColorPrimaries"), v10);
      }
    }
    if (*(_QWORD *)(a1 + 184))
    {
      if (vtCompressionSessionIsPropertyHandledByVideoEncoder(a1, CFSTR("TransferFunction")))
      {
        v12 = *(_QWORD *)(a1 + 432);
        v13 = *(_QWORD *)(a1 + 184);
        v14 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 56);
        if (v14)
          v14(v12, CFSTR("TransferFunction"), v13);
      }
    }
    if (*(_QWORD *)(a1 + 192))
    {
      if (vtCompressionSessionIsPropertyHandledByVideoEncoder(a1, CFSTR("GammaLevel")))
      {
        v15 = *(_QWORD *)(a1 + 432);
        v16 = *(_QWORD *)(a1 + 192);
        v17 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 56);
        if (v17)
          v17(v15, CFSTR("GammaLevel"), v16);
      }
    }
    if (*(_QWORD *)(a1 + 200))
    {
      if (vtCompressionSessionIsPropertyHandledByVideoEncoder(a1, CFSTR("YCbCrMatrix")))
      {
        v18 = *(_QWORD *)(a1 + 432);
        v19 = *(_QWORD *)(a1 + 200);
        v20 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 56);
        if (v20)
          v20(v18, CFSTR("YCbCrMatrix"), v19);
      }
    }
    if (*(_QWORD *)(a1 + 208))
    {
      if (vtCompressionSessionIsPropertyHandledByVideoEncoder(a1, CFSTR("ICCProfile")))
      {
        v21 = *(_QWORD *)(a1 + 432);
        v22 = *(_QWORD *)(a1 + 208);
        v23 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 56);
        if (v23)
          v23(v21, CFSTR("ICCProfile"), v22);
      }
    }
  }
  v6 = *(_DWORD *)(a1 + 48);
  v7 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (v6 <= 1836415072)
  {
    if (v6 > 1751479856)
    {
      if (v6 == 1751479857)
        goto LABEL_64;
      v8 = 1752589105;
    }
    else
    {
      if (v6 == 1667790435)
        goto LABEL_64;
      v8 = 1718908520;
    }
  }
  else
  {
    if (v6 > 1902667125)
    {
      if (v6 != 1902667126 && v6 != 1902998904)
      {
        v8 = 1902671459;
        goto LABEL_63;
      }
LABEL_64:
      theArray[0] = 0;
      v24 = *(_QWORD *)(a1 + 432);
      v25 = *(void (**)(uint64_t, const __CFString *, CFAllocatorRef, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                             + 48);
      if (v25 && (v25(v24, CFSTR("MVHEVCVideoLayerIDs"), *v7, theArray), theArray[0]))
      {
        Count = CFArrayGetCount(theArray[0]);
        v27 = theArray[0];
        *(_BYTE *)(a1 + 752) = Count > 1;
        if (v27)
          CFRelease(v27);
      }
      else
      {
        *(_BYTE *)(a1 + 752) = 0;
      }
      goto LABEL_69;
    }
    if (v6 == 1836415073)
      goto LABEL_64;
    v8 = 1869117027;
  }
LABEL_63:
  if (v6 == v8)
    goto LABEL_64;
LABEL_69:
  if (*(_BYTE *)(a1 + 794) || *(_BYTE *)(a1 + 795))
  {
    v28 = VTRateControlSessionBeforePrepareToEncodeFrames(*(_QWORD *)(a1 + 800));
    if ((_DWORD)v28)
      return v28;
  }
  v29 = *(_QWORD *)(a1 + 432);
  v30 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
  if (*v30 < 2uLL || (v31 = (uint64_t (*)(uint64_t))v30[7]) == 0 || (v1 = v31(v29), (_DWORD)v1 == -12782))
    v1 = 0;
  VTSessionCopyProperty((VTSessionRef)a1, CFSTR("AverageBitRate"), *v7, &propertyValueOut);
  if (propertyValueOut && CFNumberGetValue(propertyValueOut, kCFNumberFloat32Type, &valuePtr))
    *(_DWORD *)(a1 + 684) = valuePtr;
  v32 = *(const __CFString **)(a1 + 848);
  if (!v32
    || !CFStringHasPrefix(v32, CFSTR("VTEncoderXPCServ"))
    && !CFStringHasPrefix(*(CFStringRef *)(a1 + 848), CFSTR("simpleVTCompress"))
    && !CFStringHasPrefix(*(CFStringRef *)(a1 + 848), CFSTR("remakeMovie"))
    && !CFStringHasPrefix(*(CFStringRef *)(a1 + 848), CFSTR("avexporttest")))
  {
    CFRetain((CFTypeRef)a1);
    theArray[0] = (CFArrayRef)MEMORY[0x1E0C809B0];
    theArray[1] = (CFArrayRef)0x40000000;
    theArray[2] = (CFArrayRef)__vtCompressionSessionSendConfigToCoreAnalytics_block_invoke;
    theArray[3] = (CFArrayRef)&__block_descriptor_tmp_69;
    theArray[4] = (CFArrayRef)a1;
    if ((analytics_send_event_lazy() & 1) == 0)
      CFRelease((CFTypeRef)a1);
  }
  *(_BYTE *)(a1 + 96) = 1;
  if (propertyValueOut)
    CFRelease(propertyValueOut);
  return v1;
}

uint64_t vtCompressionSessionEncodeFrameCommon(uint64_t a1, __CVBuffer *a2, OpaqueCMTaggedBufferGroup *a3, uint64_t a4, __int128 *a5, const void *a6, uint64_t a7, uint64_t a8, _DWORD *a9)
{
  uint64_t v16;
  __CVBuffer *v17;
  uint64_t v18;
  uint64_t v19;
  CMItemCount Count;
  CMItemCount v21;
  uint64_t v22;
  __CVBuffer *CVPixelBufferAtIndex;
  uint64_t v24;
  __CFDictionary *Mutable;
  void (**v26)(uint64_t);
  NSObject **v27;
  uint64_t v28;
  uint64_t v29;
  const __CFAllocator *v30;
  const __CFDictionary *PixelBufferAttributes;
  char v32;
  __CVBuffer *v33;
  const __CFArray *Value;
  const __CFArray *v35;
  CFTypeID v36;
  CFTypeID v37;
  OSType PixelFormatType;
  const void *v39;
  const __CFDictionary *v40;
  const __CFAllocator *v41;
  const void *v42;
  const __CFDictionary *v43;
  CFDictionaryRef v44;
  uint64_t v45;
  const __CFAllocator *v46;
  CFDictionaryRef v47;
  const void *v48;
  uint64_t v49;
  const void *v50;
  const void *v51;
  const void *v52;
  const void *v53;
  uint64_t v54;
  CMItemCount v55;
  CMItemCount v56;
  uint64_t v57;
  void *v58;
  __CFDictionary *v59;
  void (**v60)(uint64_t);
  NSObject **v61;
  OpaqueCMTaggedBufferGroup *v62;
  __CVBuffer *v63;
  _QWORD *v64;
  _BOOL4 DoesFrameRequireIOSurfaceSynchronization;
  uint64_t v66;
  void (*v67)(uint64_t);
  NSObject *v68;
  char v69;
  const __CFAllocator *v70;
  const void *v71;
  const void *v72;
  const void *v73;
  const void *v74;
  const void *v75;
  uint64_t v76;
  uint64_t v77;
  const __CFAllocator *v78;
  uint64_t v79;
  int v80;
  unsigned __int16 v81;
  char v82;
  __CVBuffer *v83;
  CFTypeRef v84;
  const void *v85;
  __CFDictionary *v86;
  uint64_t v87;
  uint64_t v88;
  NSObject *v89;
  void (*v90)(uint64_t);
  const void *v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(uint64_t, const __CFString *, uint64_t);
  __CFDictionary *v95;
  const __CFAllocator *v96;
  char *v97;
  const void *v98;
  const void *v99;
  const void *v100;
  void *v101;
  uint64_t v102;
  const void *v103;
  void (*v104)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD);
  int v106;
  __IOSurface *IOSurface;
  NSObject *v108;
  uint64_t AmbientViewingEnvironmentSEINAL;
  void (*v110)(uint64_t);
  uint64_t v111;
  void (*v112)(uint64_t, const __CFString *, uint64_t);
  void (*v113)(uint64_t);
  NSObject *v114;
  const void *v115;
  uint64_t v116;
  CFDictionaryRef cf;
  __CFDictionary *v118;
  char v119;
  uint64_t v120;
  int v121;
  CFTypeRef v122;
  __int128 v124;
  void (__cdecl *v125)(CFAllocatorRef, const void *);
  __int128 v126;
  uint64_t v127;
  void *context;
  int v129;
  int v130;
  CFDictionaryValueCallBacks values;
  __int128 valuePtr;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;

  v136 = *MEMORY[0x1E0C80C00];
  if (!a1 || *(_DWORD *)(a1 + 16))
  {
    v102 = FigSignalErrorAt();
    if (!(_DWORD)v102)
      return v102;
    goto LABEL_161;
  }
  if (a9)
    *a9 = 0;
  ++*(_DWORD *)(a1 + 824);
  v16 = vtCompressionSessionPrepareToEncodeFramesInternal(a1);
  if ((_DWORD)v16)
  {
    v102 = v16;
LABEL_161:
    v104 = *(void (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 80);
    if (v104)
    {
      v104(*(_QWORD *)(a1 + 88), a8, v102, 0, 0);
    }
    else if (a7)
    {
      (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a7 + 16))(a7, v102, 0, 0);
    }
    ++*(_DWORD *)(a1 + 828);
    return v102;
  }
  if (a9)
    *a9 |= 1u;
  v126 = *(_OWORD *)a4;
  v127 = *(_QWORD *)(a4 + 16);
  v124 = *a5;
  v125 = (void (__cdecl *)(CFAllocatorRef, const void *))*((_QWORD *)a5 + 2);
  context = 0;
  MEMORY[0x1940280C4](*(_QWORD *)(a1 + 464));
  v17 = a2;
  if (!*(_QWORD *)(a1 + 288))
  {
    v18 = FigDispatchQueueCreateWithPriorityAndClientPID();
    *(_QWORD *)(a1 + 288) = v18;
    if (!v18)
      goto LABEL_196;
  }
  if (*(_BYTE *)(a1 + 256))
    vtCompressionSessionConfirmSpatialAndColorProperties(a1);
  v115 = a6;
  if (!a3)
  {
    if (!a2)
      goto LABEL_28;
    v19 = *(_QWORD *)(a1 + 472);
LABEL_23:
    v121 = 0;
    if (!vtIsPixelBufferCompatibleWithAttributes((_QWORD *)a1, a2, v19))
      goto LABEL_24;
LABEL_29:
    if (!vtDoesFrameRequireIOSurfaceSynchronization(v17, a3))
    {
      v119 = 0;
      cf = 0;
      v118 = 0;
      v26 = (void (**)(uint64_t))(a1 + 296);
      v27 = (NSObject **)(a1 + 288);
      goto LABEL_72;
    }
    *(_QWORD *)(a1 + 328) = vtCompressionSessionIOSurfaceSynchronizationWork;
    if (*(_QWORD *)(a1 + 312)
      || (v28 = FigDispatchQueueCreateWithPriorityAndClientPID(), (*(_QWORD *)(a1 + 312) = v28) != 0))
    {
      v119 = 0;
      cf = 0;
      v118 = 0;
      v26 = (void (**)(uint64_t))(a1 + 328);
      v27 = (NSObject **)(a1 + 312);
      goto LABEL_72;
    }
    goto LABEL_196;
  }
  if (!*(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 168))
    goto LABEL_196;
  v19 = *(_QWORD *)(a1 + 472);
  if (a2)
    goto LABEL_23;
  Count = CMTaggedBufferGroupGetCount(a3);
  if (Count < 1)
  {
LABEL_28:
    v121 = 1;
    goto LABEL_29;
  }
  v21 = Count;
  v22 = 0;
  while (1)
  {
    CVPixelBufferAtIndex = (__CVBuffer *)FigTaggedBufferGroupGetCVPixelBufferAtIndex();
    if (CVPixelBufferAtIndex)
    {
      if (!vtIsPixelBufferCompatibleWithAttributes((_QWORD *)a1, CVPixelBufferAtIndex, v19))
        break;
    }
    if (v21 == ++v22)
    {
      v121 = 1;
      v17 = a2;
      goto LABEL_29;
    }
  }
  v121 = 1;
  v17 = a2;
LABEL_24:
  if (*(_BYTE *)(a1 + 528) != 1)
    goto LABEL_196;
  v24 = vtCompressionSessionEnsurePixelBufferPoolsAreUpToDate(a1, v17, a3);
  if ((_DWORD)v24)
    goto LABEL_197;
  if (!*(_QWORD *)(a1 + 504))
  {
    *(_QWORD *)(a1 + 320) = vtCompressionSessionPixelTransferSessionWork;
    if (*(_QWORD *)(a1 + 312)
      || (v29 = FigDispatchQueueCreateWithPriorityAndClientPID(), (*(_QWORD *)(a1 + 312) = v29) != 0))
    {
      v30 = CFGetAllocator((CFTypeRef)a1);
      v24 = VTPixelTransferSessionCreate(v30, (VTPixelTransferSessionRef *)(a1 + 504));
      if ((_DWORD)v24)
        goto LABEL_197;
      LODWORD(valuePtr) = 0;
      PixelBufferAttributes = CVPixelBufferPoolGetPixelBufferAttributes(*(CVPixelBufferPoolRef *)(a1 + 488));
      v32 = v121 ^ 1;
      if (!a3)
        v32 = 1;
      v33 = a2;
      if ((v32 & 1) == 0)
      {
        if (CMTaggedBufferGroupGetCount(a3) < 1)
        {
          v33 = 0;
          if (!PixelBufferAttributes)
            goto LABEL_55;
LABEL_46:
          Value = (const __CFArray *)CFDictionaryGetValue(PixelBufferAttributes, (const void *)*MEMORY[0x1E0CA9040]);
          if (!Value)
          {
LABEL_56:
            v17 = a2;
            goto LABEL_57;
          }
          v35 = Value;
          v36 = CFGetTypeID(Value);
          if (v36 == CFArrayGetTypeID() && CFArrayGetCount(v35) > 0)
          {
            LODWORD(Value) = FigCFArrayGetInt32AtIndex();
            v17 = a2;
            if (!(_DWORD)Value)
            {
LABEL_57:
              *(_BYTE *)(a1 + 512) = (_BYTE)Value;
              v39 = *(const void **)(a1 + 504);
              if (!v39)
                goto LABEL_27;
              v40 = *(const __CFDictionary **)(a1 + 520);
              if (!v40 || (v24 = VTSessionSetProperties(v39, v40), !(_DWORD)v24))
              {
                v41 = CFGetAllocator((CFTypeRef)a1);
                Mutable = CFDictionaryCreateMutable(v41, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                FigCFDictionarySetInt32();
                v42 = *(const void **)(a1 + 544);
                if (v42)
                  CFDictionarySetValue(Mutable, CFSTR("RealTime"), v42);
                v43 = *(const __CFDictionary **)(a1 + 136);
                if (v43)
                {
                  v44 = 0;
                }
                else
                {
                  v130 = 1;
                  v129 = 1;
                  v45 = *MEMORY[0x1E0CA8E70];
                  *(_QWORD *)&valuePtr = *MEMORY[0x1E0CA8E60];
                  *((_QWORD *)&valuePtr + 1) = v45;
                  v46 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
                  values.version = (CFIndex)CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &v130);
                  values.retain = (CFDictionaryRetainCallBack)CFNumberCreate(v46, kCFNumberIntType, &v129);
                  v44 = CFDictionaryCreate(v46, (const void **)&valuePtr, (const void **)&values, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                  CFRelease((CFTypeRef)values.version);
                  CFRelease(values.retain);
                  v43 = *(const __CFDictionary **)(a1 + 136);
                }
                cf = v44;
                if (v43)
                  v47 = v43;
                else
                  v47 = v44;
                CFDictionarySetValue(Mutable, CFSTR("DestinationPixelAspectRatio"), v47);
                v48 = *(const void **)(a1 + 144);
                if (v48)
                  CFDictionarySetValue(Mutable, CFSTR("DestinationCleanAperture"), v48);
                v49 = VTSessionSetProperties(*(VTSessionRef *)(a1 + 504), Mutable);
                if (!(_DWORD)v49)
                  goto LABEL_71;
                v102 = v49;
                v118 = Mutable;
LABEL_198:
                v59 = 0;
                goto LABEL_199;
              }
LABEL_197:
              v102 = v24;
              cf = 0;
              v118 = 0;
              goto LABEL_198;
            }
LABEL_53:
            PixelFormatType = CVPixelBufferGetPixelFormatType(v33);
            LOBYTE(Value) = VTPixelTransferSessionCanTransfer(PixelFormatType, valuePtr, 0);
            goto LABEL_57;
          }
          v37 = CFGetTypeID(v35);
          if (v37 == CFNumberGetTypeID())
          {
            CFNumberGetValue(v35, kCFNumberSInt32Type, &valuePtr);
            v17 = a2;
            goto LABEL_53;
          }
LABEL_55:
          LOBYTE(Value) = 0;
          goto LABEL_56;
        }
        v33 = (__CVBuffer *)FigTaggedBufferGroupGetCVPixelBufferAtIndex();
      }
      if (!PixelBufferAttributes)
        goto LABEL_55;
      goto LABEL_46;
    }
LABEL_196:
    v24 = FigSignalErrorAt();
    goto LABEL_197;
  }
LABEL_27:
  cf = 0;
  Mutable = 0;
LABEL_71:
  v118 = Mutable;
  v26 = (void (**)(uint64_t))(a1 + 320);
  v27 = (NSObject **)(a1 + 312);
  v119 = 1;
LABEL_72:
  v116 = a8;
  v114 = *v27;
  v113 = *v26;
  v50 = *(const void **)(a1 + 176);
  v51 = *(const void **)(a1 + 184);
  v52 = *(const void **)(a1 + 200);
  v53 = *(const void **)(a1 + 208);
  v54 = *(_QWORD *)(a1 + 168);
  if (!v121)
  {
    if (!vtIsPixelBufferCompatibleWithColorPropertiesAndDoesPixelBufferHaveDesiredColorRange(v17, v50, v51, v52, v53, (CGColorSpaceRef *)(a1 + 384), v54))goto LABEL_85;
LABEL_81:
    if ((v119 & 1) != 0)
    {
      v59 = 0;
      v60 = (void (**)(uint64_t))(a1 + 320);
      v61 = (NSObject **)(a1 + 312);
      a8 = v116;
      v62 = a3;
      v63 = a2;
      v64 = (_QWORD *)MEMORY[0x1E0C9AE50];
    }
    else
    {
      v63 = a2;
      DoesFrameRequireIOSurfaceSynchronization = vtDoesFrameRequireIOSurfaceSynchronization(a2, a3);
      v64 = (_QWORD *)MEMORY[0x1E0C9AE50];
      v59 = 0;
      if (DoesFrameRequireIOSurfaceSynchronization)
      {
        v60 = (void (**)(uint64_t))(a1 + 328);
        v61 = (NSObject **)(a1 + 312);
        a8 = v116;
        v62 = a3;
      }
      else
      {
        v60 = (void (**)(uint64_t))(a1 + 296);
        a8 = v116;
        v62 = a3;
        v61 = (NSObject **)(a1 + 288);
      }
    }
    goto LABEL_112;
  }
  if (!a3)
    goto LABEL_81;
  v55 = CMTaggedBufferGroupGetCount(a3);
  if (v55 < 1)
    goto LABEL_81;
  v56 = v55;
  v57 = 0;
  while (1)
  {
    v58 = (void *)FigTaggedBufferGroupGetCVPixelBufferAtIndex();
    if (v58)
    {
      if (!vtIsPixelBufferCompatibleWithColorPropertiesAndDoesPixelBufferHaveDesiredColorRange(v58, v50, v51, v52, v53, (CGColorSpaceRef *)(a1 + 384), v54))break;
    }
    if (v56 == ++v57)
      goto LABEL_81;
  }
LABEL_85:
  if (*(_BYTE *)(a1 + 528) != 1)
  {
    v102 = FigSignalErrorAt();
    v59 = 0;
    a8 = v116;
    goto LABEL_199;
  }
  v63 = a2;
  v66 = vtCompressionSessionEnsurePixelBufferPoolsAreUpToDate(a1, a2, a3);
  a8 = v116;
  if ((_DWORD)v66)
  {
LABEL_205:
    v102 = v66;
    goto LABEL_198;
  }
  if (*(_QWORD *)(a1 + 376))
  {
    v59 = 0;
    v62 = a3;
    v64 = (_QWORD *)MEMORY[0x1E0C9AE50];
    v67 = v113;
    v68 = v114;
LABEL_110:
    if ((v119 & 1) != 0)
      goto LABEL_113;
    v60 = (void (**)(uint64_t))(a1 + 352);
    v61 = (NSObject **)(a1 + 344);
LABEL_112:
    v68 = *v61;
    v67 = *v60;
LABEL_113:
    MEMORY[0x1940280D0](*(_QWORD *)(a1 + 464));
    if (*v64 == *(_QWORD *)(a1 + 576))
    {
      v82 = v121 ^ 1;
      if (!v62)
        v82 = 1;
      v83 = v63;
      if ((v82 & 1) == 0)
      {
        if (CMTaggedBufferGroupGetCount(v62) < 1)
          v83 = 0;
        else
          v83 = (__CVBuffer *)FigTaggedBufferGroupGetCVPixelBufferAtIndex();
      }
      v106 = *(_DWORD *)(a1 + 672);
      if (!v106)
      {
        vtCompressionSessionSetHDRFormat(a1);
        v106 = *(_DWORD *)(a1 + 672);
      }
      if ((v106 - 1) > 1 || *(_BYTE *)(a1 + 553) || *(_BYTE *)(a1 + 608) != 1)
      {
        v122 = 0;
      }
      else
      {
        IOSurface = CVPixelBufferGetIOSurface(v83);
        v122 = IOSurfaceCopyValue(IOSurface, CFSTR("DolbyVisionRPUData"));
      }
      if (*(_BYTE *)(a1 + 641) && *(_DWORD *)(a1 + 672) == 1)
      {
        v108 = v68;
        *(_BYTE *)(a1 + 640) = 1;
        if (!*(_QWORD *)(a1 + 656))
        {
          *(_QWORD *)&valuePtr = 0x4240133DA0E92F00;
          *(_QWORD *)(a1 + 656) = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)&valuePtr, 8);
        }
        if (!*(_QWORD *)(a1 + 664))
        {
          AmbientViewingEnvironmentSEINAL = FigHEVCBridge_CreateAmbientViewingEnvironmentSEINAL();
          if ((_DWORD)AmbientViewingEnvironmentSEINAL)
          {
            v102 = AmbientViewingEnvironmentSEINAL;
            goto LABEL_168;
          }
        }
        if (*(_BYTE *)(a1 + 642) && !*(_BYTE *)(a1 + 643))
        {
          v110 = v67;
          *(_BYTE *)(a1 + 643) = 1;
          v111 = *(_QWORD *)(a1 + 432);
          v120 = *(_QWORD *)(a1 + 656);
          v112 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 56);
          if (v112)
            v112(v111, CFSTR("AmbientViewingEnvironment"), v120);
          v67 = v110;
        }
        v68 = v108;
      }
    }
    else
    {
      v122 = 0;
    }
    v80 = *(_DWORD *)(a1 + 48);
    if (v80 <= 1634743415)
    {
      if (v80 == 1634742376 || v80 == 1634742888)
        goto LABEL_131;
      v81 = 13416;
    }
    else
    {
      if ((v80 - 1634755432) <= 0xB && ((1 << (v80 - 104)) & 0x8C1) != 0
        || (v80 - 1634759272) <= 6 && ((1 << (v80 - 104)) & 0x51) != 0)
      {
        goto LABEL_131;
      }
      v81 = 13432;
    }
    if (v80 != (v81 | 0x61700000))
    {
LABEL_140:
      v134 = 0;
      v135 = 0;
      MEMORY[0x1940280C4](*(_QWORD *)(a1 + 104));
      v95 = *(__CFDictionary **)(a1 + 128);
      if (v95)
        goto LABEL_142;
      values.version = 0;
      values.retain = (CFDictionaryRetainCallBack)vtCloneCompressionFrameTrackingInfo;
      values.copyDescription = 0;
      values.equal = 0;
      values.release = (CFDictionaryReleaseCallBack)vtFreeCompressionFrameTrackingInfo;
      v96 = CFGetAllocator((CFTypeRef)a1);
      v95 = CFDictionaryCreateMutable(v96, 0, 0, &values);
      *(_QWORD *)(a1 + 128) = v95;
      if (v95)
      {
LABEL_142:
        v97 = *(char **)(a1 + 112);
        *(_QWORD *)(a1 + 112) = v97 + 1;
        LOBYTE(v135) = 0;
        *(_QWORD *)&valuePtr = a8;
        *((_QWORD *)&valuePtr + 1) = v122;
        v133 = a7;
        CFDictionaryAddValue(v95, v97, &valuePtr);
        ++*(_DWORD *)(a1 + 120);
        MEMORY[0x1940280D0](*(_QWORD *)(a1 + 104));
        v98 = *(const void **)(a1 + 504);
        v99 = *(const void **)(a1 + 376);
        v100 = *(const void **)(a1 + 488);
        valuePtr = v126;
        v133 = v127;
        *(_OWORD *)&values.version = v124;
        values.release = v125;
        vtCompressionSessionPipelineCreateContext((const void *)a1, v63, v62, v98, v99, v100, &valuePtr, (__int128 *)&values.version, v115, (uint64_t)v97, &context);
        if (*(void (**)(uint64_t))(a1 + 280) != v67)
          dispatch_group_wait(*(dispatch_group_t *)(a1 + 272), 0xFFFFFFFFFFFFFFFFLL);
        dispatch_group_enter(*(dispatch_group_t *)(a1 + 272));
        if (!*(_DWORD *)(a1 + 16) && v68)
        {
          if (v67 == vtCompressionSessionCompressionWork)
          {
            v101 = context;
            *((_BYTE *)context + 116) = 0;
            dispatch_sync_f(v68, v101, (dispatch_function_t)vtCompressionSessionCompressionWork);
            goto LABEL_150;
          }
          if (v67)
          {
            FigSemaphoreWaitRelative();
            dispatch_group_async_f(*(dispatch_group_t *)(a1 + 272), v68, context, (dispatch_function_t)v67);
LABEL_150:
            v102 = 0;
            *(_QWORD *)(a1 + 280) = v67;
            goto LABEL_151;
          }
        }
        v102 = FigSignalErrorAt();
LABEL_151:
        v103 = v122;
        dispatch_group_leave(*(dispatch_group_t *)(a1 + 272));
        if (!(_DWORD)v102)
          goto LABEL_152;
        goto LABEL_169;
      }
      MEMORY[0x1940280D0](*(_QWORD *)(a1 + 104));
      v102 = 4294954392;
LABEL_168:
      v103 = v122;
      goto LABEL_169;
    }
LABEL_131:
    if (v63)
    {
      if (!*(_BYTE *)(a1 + 643))
      {
        v84 = CVBufferCopyAttachment(v63, (CFStringRef)*MEMORY[0x1E0CA8CC8], 0);
        if (v84)
        {
          v85 = v84;
          v86 = v59;
          v87 = a7;
          v88 = a8;
          v89 = v68;
          v90 = v67;
          *(_BYTE *)(a1 + 643) = 1;
          *(_BYTE *)(a1 + 640) = 1;
          v91 = *(const void **)(a1 + 656);
          *(_QWORD *)(a1 + 656) = v84;
          CFRetain(v84);
          if (v91)
            CFRelease(v91);
          if (*(_BYTE *)(a1 + 642))
          {
            v92 = *(_QWORD *)(a1 + 432);
            v93 = *(_QWORD *)(a1 + 656);
            v94 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 56);
            if (v94)
              v94(v92, CFSTR("AmbientViewingEnvironment"), v93);
          }
          CFRelease(v85);
          v63 = a2;
          v67 = v90;
          v68 = v89;
          a8 = v88;
          a7 = v87;
          v59 = v86;
        }
      }
    }
    goto LABEL_140;
  }
  *(_QWORD *)&valuePtr = 0;
  v69 = v119 ^ 1;
  if (!*(_BYTE *)(a1 + 512))
    v69 = 1;
  v62 = a3;
  v64 = (_QWORD *)MEMORY[0x1E0C9AE50];
  v67 = v113;
  v68 = v114;
  if ((v69 & 1) != 0)
  {
    *(_QWORD *)(a1 + 352) = vtCompressionSessionColorSyncWork;
    v77 = FigDispatchQueueCreateWithPriorityAndClientPID();
    *(_QWORD *)(a1 + 344) = v77;
    if (v77)
    {
      v78 = CFGetAllocator((CFTypeRef)a1);
      v66 = VTPixelTransferSessionCreate(v78, (VTPixelTransferSessionRef *)&valuePtr);
      if (!(_DWORD)v66)
      {
        v79 = valuePtr;
        *(_QWORD *)(a1 + 376) = valuePtr;
        v68 = v114;
        if (v79)
          goto LABEL_94;
LABEL_109:
        v59 = 0;
        goto LABEL_110;
      }
    }
    else
    {
      v66 = FigSignalErrorAt();
    }
    goto LABEL_205;
  }
  *(_QWORD *)&valuePtr = *(_QWORD *)(a1 + 504);
  if (!(_QWORD)valuePtr)
    goto LABEL_109;
LABEL_94:
  v70 = CFGetAllocator((CFTypeRef)a1);
  v59 = CFDictionaryCreateMutable(v70, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  FigCFDictionarySetInt32();
  v71 = *(const void **)(a1 + 544);
  if (v71)
    CFDictionarySetValue(v59, CFSTR("RealTime"), v71);
  v72 = *(const void **)(a1 + 176);
  if (v72)
    CFDictionarySetValue(v59, CFSTR("DestinationColorPrimaries"), v72);
  v73 = *(const void **)(a1 + 184);
  if (v73)
    CFDictionarySetValue(v59, CFSTR("DestinationTransferFunction"), v73);
  v74 = *(const void **)(a1 + 200);
  if (v74)
    CFDictionarySetValue(v59, CFSTR("DestinationYCbCrMatrix"), v74);
  v75 = *(const void **)(a1 + 208);
  if (v75)
    CFDictionarySetValue(v59, CFSTR("DestinationICCProfile"), v75);
  v76 = VTSessionSetProperties((VTSessionRef)valuePtr, v59);
  if (!(_DWORD)v76)
  {
    v68 = v114;
    goto LABEL_110;
  }
  v102 = v76;
LABEL_199:
  MEMORY[0x1940280D0](*(_QWORD *)(a1 + 464));
  v103 = 0;
  if (!(_DWORD)v102)
  {
LABEL_152:
    if (!v103)
      goto LABEL_154;
    goto LABEL_153;
  }
LABEL_169:
  vtCompressionSessionPipelineContextInvalidate((uint64_t *)&context);
  if (v103)
LABEL_153:
    CFRelease(v103);
LABEL_154:
  if (cf)
    CFRelease(cf);
  if (v118)
    CFRelease(v118);
  if (v59)
    CFRelease(v59);
  if ((_DWORD)v102)
    goto LABEL_161;
  return v102;
}

OSStatus VTCompressionSessionEncodeFrameWithOutputHandler(VTCompressionSessionRef session, CVImageBufferRef imageBuffer, CMTime *presentationTimeStamp, CMTime *duration, CFDictionaryRef frameProperties, VTEncodeInfoFlags *infoFlagsOut, VTCompressionOutputHandler outputHandler)
{
  uint64_t v14;
  __int128 v16;
  CMTimeEpoch v17;
  __int128 v18;
  CMTimeEpoch epoch;

  if (!outputHandler || !session || !imageBuffer || *((_DWORD *)session + 4))
    return FigSignalErrorAt();
  if (!*((_BYTE *)session + 529))
    FigPowerReduceUtilitySFI();
  v14 = *((_QWORD *)session + 3);
  if (v14)
  {
    v18 = *(_OWORD *)&presentationTimeStamp->value;
    epoch = presentationTimeStamp->epoch;
    v16 = *(_OWORD *)&duration->value;
    v17 = duration->epoch;
    return VTCompressionSessionRemote_EncodeFrameWithOutputHandler(v14, (uint64_t)imageBuffer, 0, (uint64_t)&v18, &v16, (uint64_t)frameProperties, infoFlagsOut, outputHandler);
  }
  if (*((_QWORD *)session + 10))
    return FigSignalErrorAt();
  v18 = *(_OWORD *)&presentationTimeStamp->value;
  epoch = presentationTimeStamp->epoch;
  v16 = *(_OWORD *)&duration->value;
  v17 = duration->epoch;
  return vtCompressionSessionEncodeFrameCommon((uint64_t)session, imageBuffer, 0, (uint64_t)&v18, &v16, frameProperties, (uint64_t)outputHandler, 0, infoFlagsOut);
}

Boolean VTIsStereoMVHEVCEncodeSupported(void)
{
  return 1;
}

OSStatus VTCompressionSessionEncodeMultiImageFrame(VTCompressionSessionRef session, CMTaggedBufferGroupRef taggedBufferGroup, CMTime *presentationTimeStamp, CMTime *duration, CFDictionaryRef frameProperties, void *sourceFrameRefcon, VTEncodeInfoFlags *infoFlagsOut)
{
  uint64_t v14;
  __int128 v16;
  CMTimeEpoch v17;
  __int128 v18;
  CMTimeEpoch epoch;

  if (!session || !taggedBufferGroup || !CMTaggedBufferGroupGetCount(taggedBufferGroup) || *((_DWORD *)session + 4))
    return FigSignalErrorAt();
  if (!*((_BYTE *)session + 529))
    FigPowerReduceUtilitySFI();
  v14 = *((_QWORD *)session + 3);
  if (v14)
  {
    v18 = *(_OWORD *)&presentationTimeStamp->value;
    epoch = presentationTimeStamp->epoch;
    v16 = *(_OWORD *)&duration->value;
    v17 = duration->epoch;
    return VTCompressionSessionRemote_EncodeFrame(v14, 0, taggedBufferGroup, (uint64_t)&v18, &v16, (uint64_t)frameProperties, (uint64_t)sourceFrameRefcon, infoFlagsOut);
  }
  if (!*((_QWORD *)session + 10))
    return FigSignalErrorAt();
  v18 = *(_OWORD *)&presentationTimeStamp->value;
  epoch = presentationTimeStamp->epoch;
  v16 = *(_OWORD *)&duration->value;
  v17 = duration->epoch;
  return vtCompressionSessionEncodeFrameCommon((uint64_t)session, 0, taggedBufferGroup, (uint64_t)&v18, &v16, frameProperties, 0, (uint64_t)sourceFrameRefcon, infoFlagsOut);
}

OSStatus VTCompressionSessionEncodeMultiImageFrameWithOutputHandler(VTCompressionSessionRef session, CMTaggedBufferGroupRef taggedBufferGroup, CMTime *presentationTimeStamp, CMTime *duration, CFDictionaryRef frameProperties, VTEncodeInfoFlags *infoFlagsOut, VTCompressionOutputHandler outputHandler)
{
  uint64_t v14;
  __int128 v16;
  CMTimeEpoch v17;
  __int128 v18;
  CMTimeEpoch epoch;

  if (!outputHandler
    || !session
    || !taggedBufferGroup
    || !CMTaggedBufferGroupGetCount(taggedBufferGroup)
    || *((_DWORD *)session + 4))
  {
    return FigSignalErrorAt();
  }
  if (!*((_BYTE *)session + 529))
    FigPowerReduceUtilitySFI();
  v14 = *((_QWORD *)session + 3);
  if (v14)
  {
    v18 = *(_OWORD *)&presentationTimeStamp->value;
    epoch = presentationTimeStamp->epoch;
    v16 = *(_OWORD *)&duration->value;
    v17 = duration->epoch;
    return VTCompressionSessionRemote_EncodeFrameWithOutputHandler(v14, 0, taggedBufferGroup, (uint64_t)&v18, &v16, (uint64_t)frameProperties, infoFlagsOut, outputHandler);
  }
  if (*((_QWORD *)session + 10))
    return FigSignalErrorAt();
  v18 = *(_OWORD *)&presentationTimeStamp->value;
  epoch = presentationTimeStamp->epoch;
  v16 = *(_OWORD *)&duration->value;
  v17 = duration->epoch;
  return vtCompressionSessionEncodeFrameCommon((uint64_t)session, 0, taggedBufferGroup, (uint64_t)&v18, &v16, frameProperties, (uint64_t)outputHandler, 0, infoFlagsOut);
}

uint64_t vtCompressionSessionPipelineCreateContext(const void *a1, const void *a2, const void *a3, const void *a4, const void *a5, const void *a6, __int128 *a7, __int128 *a8, const void *a9, uint64_t a10, _QWORD *a11)
{
  char *v19;
  CFTypeRef v20;
  CFTypeRef v21;
  CFTypeRef v22;
  CFTypeRef v23;
  CFTypeRef v24;
  CFTypeRef v25;
  __int128 v26;
  __int128 v27;
  uint64_t result;

  v19 = (char *)malloc_type_calloc(1uLL, 0x78uLL, 0x10600409A072D91uLL);
  if (v19)
  {
    if (a1)
      v20 = CFRetain(a1);
    else
      v20 = 0;
    *(_QWORD *)v19 = v20;
    if (a2)
      v21 = CFRetain(a2);
    else
      v21 = 0;
    *((_QWORD *)v19 + 4) = v21;
    if (a3)
      v22 = CFRetain(a3);
    else
      v22 = 0;
    *((_QWORD *)v19 + 5) = v22;
    if (a4)
      v23 = CFRetain(a4);
    else
      v23 = 0;
    *((_QWORD *)v19 + 1) = v23;
    if (a5)
      v24 = CFRetain(a5);
    else
      v24 = 0;
    *((_QWORD *)v19 + 2) = v24;
    if (a6)
      v25 = CFRetain(a6);
    else
      v25 = 0;
    *((_QWORD *)v19 + 3) = v25;
    v26 = *a7;
    *((_QWORD *)v19 + 9) = *((_QWORD *)a7 + 2);
    *(_OWORD *)(v19 + 56) = v26;
    v27 = *a8;
    *((_QWORD *)v19 + 12) = *((_QWORD *)a8 + 2);
    *((_OWORD *)v19 + 5) = v27;
    if (a9)
      result = (uint64_t)CFRetain(a9);
    else
      result = 0;
    *((_QWORD *)v19 + 6) = result;
    *((_QWORD *)v19 + 13) = a10;
    *((_DWORD *)v19 + 28) = 0;
    v19[116] = 1;
  }
  else
  {
    result = FigSignalErrorAt();
  }
  *a11 = v19;
  return result;
}

uint64_t vtCompressionSessionCompleteFramesWork(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, __int128 *);
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  if (!a1)
    return FigSignalErrorAt();
  v2 = *a1;
  if (!*a1 || *(_DWORD *)(v2 + 16) == 2)
  {
    result = FigSignalErrorAt();
  }
  else
  {
    v3 = *(_QWORD *)(v2 + 432);
    v6 = *(_OWORD *)(a1 + 7);
    v7 = a1[9];
    v4 = *(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v4)
    {
      v8 = v6;
      v9 = v7;
      result = v4(v3, &v8);
    }
    else
    {
      result = 4294954514;
    }
  }
  *((_DWORD *)a1 + 28) = result;
  return result;
}

void vtCompressionSessionPipelineContextInvalidate(uint64_t *a1)
{
  uint64_t v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  const void *v11;

  if (a1)
  {
    v2 = *a1;
    if (*a1)
    {
      if (*(_QWORD *)v2)
      {
        CFRelease(*(CFTypeRef *)v2);
        *(_QWORD *)v2 = 0;
      }
      v3 = *(const void **)(v2 + 32);
      if (v3)
      {
        CFRelease(v3);
        *(_QWORD *)(v2 + 32) = 0;
      }
      v4 = *(const void **)(v2 + 40);
      if (v4)
      {
        CFRelease(v4);
        *(_QWORD *)(v2 + 40) = 0;
      }
      v5 = *(const void **)(v2 + 8);
      if (v5)
      {
        CFRelease(v5);
        *(_QWORD *)(v2 + 8) = 0;
      }
      v6 = *(const void **)(v2 + 16);
      if (v6)
      {
        CFRelease(v6);
        *(_QWORD *)(v2 + 16) = 0;
      }
      v7 = *(const void **)(v2 + 24);
      if (v7)
      {
        CFRelease(v7);
        *(_QWORD *)(v2 + 24) = 0;
      }
      v8 = MEMORY[0x1E0CA2E18];
      v9 = *MEMORY[0x1E0CA2E18];
      *(_OWORD *)(v2 + 56) = *MEMORY[0x1E0CA2E18];
      v10 = *(_QWORD *)(v8 + 16);
      *(_QWORD *)(v2 + 72) = v10;
      *(_OWORD *)(v2 + 80) = v9;
      *(_QWORD *)(v2 + 96) = v10;
      v11 = *(const void **)(v2 + 48);
      if (v11)
        CFRelease(v11);
      free((void *)v2);
      *a1 = 0;
    }
  }
}

uint64_t VTVideoEncoderGetTypeID()
{
  MEMORY[0x1940281CC](&VTVideoEncoderGetClassID_sRegisterVTVideoEncoderTypeOnce, RegisterVTVideoEncoderType);
  return CMBaseClassGetCFTypeID();
}

void vtCompressionSessionCopyFallbackVideoFormatDescriptionExtensions(uint64_t cf, const __CFDictionary *a2, __CFDictionary **a3)
{
  const __CFAllocator *v6;
  const __CFDictionary *MutableCopy;
  __CFDictionary *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void **v18;
  const void *v19;
  const void **v20;
  const void *v21;
  const void **v22;
  const void *v23;
  const void **v24;
  const void *v25;
  const void *v26;
  const void *v27;
  const void *v28;
  const void *v29;
  const void *v30;
  const void *v31;
  const void *v32;
  const void *v33;
  const void *v34;
  const void *v35;

  if (*(_BYTE *)(cf + 256))
    vtCompressionSessionConfirmSpatialAndColorProperties(cf);
  if (*(_QWORD *)(cf + 136)
    || *(_QWORD *)(cf + 144)
    || *(_QWORD *)(cf + 152)
    || *(_QWORD *)(cf + 160)
    || *(_QWORD *)(cf + 176)
    || *(_QWORD *)(cf + 184)
    || *(_QWORD *)(cf + 192)
    || *(_QWORD *)(cf + 200)
    || *(_QWORD *)(cf + 208)
    || *(_QWORD *)(cf + 216)
    || *(_QWORD *)(cf + 224)
    || *(_QWORD *)(cf + 232)
    || *(_QWORD *)(cf + 656)
    || *(_BYTE *)(cf + 688)
    || *(_BYTE *)(cf + 689)
    || *(_BYTE *)(cf + 690)
    || *(_BYTE *)(cf + 691)
    || *(_QWORD *)(cf + 696)
    || *(_QWORD *)(cf + 704)
    || *(_QWORD *)(cf + 712)
    || *(_BYTE *)(cf + 720)
    || *(_QWORD *)(cf + 728)
    || *(_BYTE *)(cf + 736)
    || *(_BYTE *)(cf + 744)
    || *(_QWORD *)(cf + 264)
    || *(_QWORD *)(cf + 880))
  {
    v6 = CFGetAllocator((CFTypeRef)cf);
    if (a2)
      MutableCopy = CFDictionaryCreateMutableCopy(v6, 0, a2);
    else
      MutableCopy = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v8 = MutableCopy;
    if (*(_QWORD *)(cf + 136))
    {
      v9 = (const void *)*MEMORY[0x1E0CA8E68];
      if (!CFDictionaryContainsKey(MutableCopy, (const void *)*MEMORY[0x1E0CA8E68]))
        CFDictionarySetValue(v8, v9, *(const void **)(cf + 136));
    }
    if (*(_QWORD *)(cf + 144))
    {
      v10 = (const void *)*MEMORY[0x1E0CA8D50];
      if (!CFDictionaryContainsKey(v8, (const void *)*MEMORY[0x1E0CA8D50]))
        CFDictionarySetValue(v8, v10, *(const void **)(cf + 144));
    }
    if (*(_QWORD *)(cf + 152))
    {
      v11 = (const void *)*MEMORY[0x1E0CA8DC8];
      if (!CFDictionaryContainsKey(v8, (const void *)*MEMORY[0x1E0CA8DC8]))
        CFDictionarySetValue(v8, v11, *(const void **)(cf + 152));
    }
    if (*(_QWORD *)(cf + 160))
    {
      v12 = (const void *)*MEMORY[0x1E0CA8DD0];
      if (!CFDictionaryContainsKey(v8, (const void *)*MEMORY[0x1E0CA8DD0]))
        CFDictionarySetValue(v8, v12, *(const void **)(cf + 160));
    }
    if (!vtCompressionSessionIsIPT(cf))
    {
      if (*(_QWORD *)(cf + 176))
      {
        v31 = (const void *)*MEMORY[0x1E0CA8D68];
        if (!CFDictionaryContainsKey(v8, (const void *)*MEMORY[0x1E0CA8D68]))
          CFDictionarySetValue(v8, v31, *(const void **)(cf + 176));
      }
      if (*(_QWORD *)(cf + 184))
      {
        v32 = (const void *)*MEMORY[0x1E0CA8E98];
        if (!CFDictionaryContainsKey(v8, (const void *)*MEMORY[0x1E0CA8E98]))
          CFDictionarySetValue(v8, v32, *(const void **)(cf + 184));
      }
      if (*(_QWORD *)(cf + 192))
      {
        v33 = (const void *)*MEMORY[0x1E0CA8DF8];
        if (!CFDictionaryContainsKey(v8, (const void *)*MEMORY[0x1E0CA8DF8]))
          CFDictionarySetValue(v8, v33, *(const void **)(cf + 192));
      }
      if (*(_QWORD *)(cf + 200))
      {
        v34 = (const void *)*MEMORY[0x1E0CA8EE8];
        if (!CFDictionaryContainsKey(v8, (const void *)*MEMORY[0x1E0CA8EE8]))
          CFDictionarySetValue(v8, v34, *(const void **)(cf + 200));
      }
      if (*(_QWORD *)(cf + 208))
      {
        v35 = (const void *)*MEMORY[0x1E0CA2210];
        if (!CFDictionaryContainsKey(v8, (const void *)*MEMORY[0x1E0CA2210]))
          CFDictionarySetValue(v8, v35, *(const void **)(cf + 208));
      }
    }
    if (*(_QWORD *)(cf + 216))
    {
      v13 = (const void *)*MEMORY[0x1E0CA2220];
      if (!CFDictionaryContainsKey(v8, (const void *)*MEMORY[0x1E0CA2220]))
        CFDictionarySetValue(v8, v13, *(const void **)(cf + 216));
    }
    if (*(_QWORD *)(cf + 224))
    {
      v14 = (const void *)*MEMORY[0x1E0CA21A8];
      if (!CFDictionaryContainsKey(v8, (const void *)*MEMORY[0x1E0CA21A8]))
        CFDictionarySetValue(v8, v14, *(const void **)(cf + 224));
    }
    if (*(_QWORD *)(cf + 232))
    {
      v15 = (const void *)*MEMORY[0x1E0CA2158];
      if (!CFDictionaryContainsKey(v8, (const void *)*MEMORY[0x1E0CA2158]))
        CFDictionarySetValue(v8, v15, *(const void **)(cf + 232));
    }
    if (*(_QWORD *)(cf + 656))
    {
      v16 = (const void *)*MEMORY[0x1E0CA2150];
      if (!CFDictionaryContainsKey(v8, (const void *)*MEMORY[0x1E0CA2150]))
        CFDictionarySetValue(v8, v16, *(const void **)(cf + 656));
    }
    if (*(_BYTE *)(cf + 688))
    {
      v17 = (const void *)*MEMORY[0x1E0CA4A38];
      if (!CFDictionaryContainsKey(v8, (const void *)*MEMORY[0x1E0CA4A38]))
      {
        v18 = (const void **)MEMORY[0x1E0C9AE50];
        if (!*(_BYTE *)(cf + 688))
          v18 = (const void **)MEMORY[0x1E0C9AE40];
        CFDictionarySetValue(v8, v17, *v18);
      }
    }
    if (*(_BYTE *)(cf + 689))
    {
      v19 = (const void *)*MEMORY[0x1E0CA4A40];
      if (!CFDictionaryContainsKey(v8, (const void *)*MEMORY[0x1E0CA4A40]))
      {
        v20 = (const void **)MEMORY[0x1E0C9AE50];
        if (!*(_BYTE *)(cf + 689))
          v20 = (const void **)MEMORY[0x1E0C9AE40];
        CFDictionarySetValue(v8, v19, *v20);
      }
    }
    if (*(_BYTE *)(cf + 690))
    {
      v21 = (const void *)*MEMORY[0x1E0CA4A30];
      if (!CFDictionaryContainsKey(v8, (const void *)*MEMORY[0x1E0CA4A30]))
      {
        v22 = (const void **)MEMORY[0x1E0C9AE50];
        if (!*(_BYTE *)(cf + 690))
          v22 = (const void **)MEMORY[0x1E0C9AE40];
        CFDictionarySetValue(v8, v21, *v22);
      }
    }
    if (*(_BYTE *)(cf + 691))
    {
      v23 = (const void *)*MEMORY[0x1E0CA4A28];
      if (!CFDictionaryContainsKey(v8, (const void *)*MEMORY[0x1E0CA4A28]))
      {
        v24 = (const void **)MEMORY[0x1E0C9AE50];
        if (!*(_BYTE *)(cf + 691))
          v24 = (const void **)MEMORY[0x1E0C9AE40];
        CFDictionarySetValue(v8, v23, *v24);
      }
    }
    if (*(_QWORD *)(cf + 696))
    {
      v25 = (const void *)*MEMORY[0x1E0CA4A48];
      if (!CFDictionaryContainsKey(v8, (const void *)*MEMORY[0x1E0CA4A48]))
        CFDictionarySetValue(v8, v25, *(const void **)(cf + 696));
    }
    if (*(_QWORD *)(cf + 704))
    {
      v26 = (const void *)*MEMORY[0x1E0CA4A60];
      if (!CFDictionaryContainsKey(v8, (const void *)*MEMORY[0x1E0CA4A60]))
        CFDictionarySetValue(v8, v26, *(const void **)(cf + 704));
    }
    if (*(_QWORD *)(cf + 712))
    {
      v27 = (const void *)*MEMORY[0x1E0CA4A80];
      if (!CFDictionaryContainsKey(v8, (const void *)*MEMORY[0x1E0CA4A80]))
        CFDictionarySetValue(v8, v27, *(const void **)(cf + 712));
    }
    if (*(_BYTE *)(cf + 720) && !CFDictionaryContainsKey(v8, (const void *)*MEMORY[0x1E0CA4A70]))
      FigCFDictionarySetInt32();
    if (*(_QWORD *)(cf + 728))
    {
      v28 = (const void *)*MEMORY[0x1E0CA4A88];
      if (!CFDictionaryContainsKey(v8, (const void *)*MEMORY[0x1E0CA4A88]))
        CFDictionarySetValue(v8, v28, *(const void **)(cf + 728));
    }
    if (*(_BYTE *)(cf + 736) && !CFDictionaryContainsKey(v8, (const void *)*MEMORY[0x1E0CA49F8]))
      FigCFDictionarySetInt32();
    if (*(_BYTE *)(cf + 744) && !CFDictionaryContainsKey(v8, (const void *)*MEMORY[0x1E0CA4A50]))
      FigCFDictionarySetInt32();
    if (*(_QWORD *)(cf + 264))
    {
      v29 = (const void *)*MEMORY[0x1E0CA2208];
      if (!CFDictionaryContainsKey(v8, (const void *)*MEMORY[0x1E0CA2208]))
        CFDictionarySetValue(v8, v29, *(const void **)(cf + 264));
    }
    if (*(_QWORD *)(cf + 880))
    {
      v30 = (const void *)*MEMORY[0x1E0CA2218];
      if (!CFDictionaryContainsKey(v8, (const void *)*MEMORY[0x1E0CA2218]))
        CFDictionarySetValue(v8, v30, *(const void **)(cf + 880));
    }
  }
  else
  {
    v8 = 0;
  }
  *a3 = v8;
}

uint64_t vtCompressionSessionAddDolbyVisionVideoFormatDescriptionExtensions(uint64_t a1, unsigned int a2, int a3, const __CFDictionary *a4)
{
  int v4;
  char v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  unsigned __int8 v17;
  const __CFAllocator *v18;
  CFDataRef v19;
  const __CFString *v20;
  CFDataRef v21;
  const void *v22;
  const __CFDictionary *Value;
  const __CFDictionary *v24;
  CFIndex Count;
  __CFDictionary *MutableCopy;
  __CFDictionary *v27;
  __CFDictionary *v28;
  char v30;
  UInt8 bytes[2];
  char v32;
  char v33;
  char v34;
  uint64_t v35;
  _QWORD v36[3];

  *(_QWORD *)((char *)&v36[1] + 3) = *MEMORY[0x1E0C80C00];
  if (!a4)
    return FigSignalErrorAt();
  v4 = *(char *)(a1 + 676);
  if (v4 != 8 && v4 != 5)
    return 0;
  v36[0] = 0;
  v35 = 0;
  *(_DWORD *)((char *)v36 + 7) = 0;
  if (v4 == 5)
  {
    v7 = 0;
  }
  else
  {
    if (v4 != 8)
      return 0;
    v7 = 64;
  }
  v8 = *(float *)(a1 + 680);
  v9 = *(_QWORD *)(a1 + 560);
  if (v8 != 0.0)
  {
    if (v8 < 0.0)
      v8 = -v8;
    if (v9)
      goto LABEL_13;
LABEL_59:
    v17 = 13;
    goto LABEL_50;
  }
  *(_DWORD *)(a1 + 680) = 1106247680;
  v8 = 30.0;
  if (!v9)
    goto LABEL_59;
LABEL_13:
  v30 = v7;
  v10 = 0;
  v11 = *(float *)(a1 + 684);
  v12 = vcvtps_u32_f32(v8 * (float)(a3 * a2));
  v13 = a2;
  v14 = &qword_1928DF2D0;
  do
  {
    v15 = v10;
    if (*(v14 - 1) >= v13 && *(v14 - 2) >= v12)
    {
      if (FigCFEqual()
        || FigCFEqual()
        || FigCFEqual()
        || FigCFEqual()
        || FigCFEqual()
        || FigCFEqual()
        || FigCFEqual()
        || FigCFEqual()
        || FigCFEqual()
        || FigCFEqual()
        || FigCFEqual()
        || FigCFEqual()
        || FigCFEqual()
        || FigCFEqual()
        || FigCFEqual())
      {
        v16 = *v14;
      }
      else
      {
        if (!FigCFEqual()
          && !FigCFEqual()
          && !FigCFEqual()
          && !FigCFEqual()
          && !FigCFEqual()
          && !FigCFEqual()
          && !FigCFEqual()
          && !FigCFEqual()
          && !FigCFEqual()
          && !FigCFEqual()
          && !FigCFEqual()
          && !FigCFEqual()
          && !FigCFEqual())
        {
          goto LABEL_33;
        }
        v16 = v14[1];
      }
      if (v11 <= (float)v16)
        break;
    }
LABEL_33:
    v10 = v15 + 1;
    v14 += 4;
  }
  while (v15 != 12);
  v17 = v15 + 1;
  v7 = v30;
LABEL_50:
  *(_WORD *)bytes = 1;
  v32 = (v17 >> 5) | (2 * v4);
  v33 = (8 * v17) | 5;
  v34 = v7;
  v18 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v19 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], bytes, 24);
  if (v4 >= 8)
    v20 = CFSTR("dvvC");
  else
    v20 = CFSTR("dvcC");
  if (v19)
  {
    v21 = v19;
    v22 = (const void *)*MEMORY[0x1E0CA2240];
    Value = (const __CFDictionary *)CFDictionaryGetValue(a4, (const void *)*MEMORY[0x1E0CA2240]);
    if (Value)
    {
      v24 = Value;
      Count = CFDictionaryGetCount(Value);
      MutableCopy = CFDictionaryCreateMutableCopy(v18, Count, v24);
    }
    else
    {
      MutableCopy = CFDictionaryCreateMutable(v18, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    }
    v27 = MutableCopy;
    if (MutableCopy)
    {
      CFDictionarySetValue(MutableCopy, v20, v21);
      CFDictionarySetValue(a4, v22, v27);
      CFRelease(v21);
      v28 = v27;
    }
    else
    {
      v28 = v21;
    }
    CFRelease(v28);
  }
  return 0;
}

uint64_t VTEncoderSessionCreateVideoFormatDescriptionFromHEVCParameterSets(uint64_t *a1, size_t a2, const void *a3, const void *a4, int a5, const __CFDictionary *a6, CMFormatDescriptionRef *a7)
{
  uint64_t v7;
  __CFDictionary *Mutable;
  const __CFDictionary *v15;
  uint64_t v16;
  const void *v17;
  CFPropertyListRef Extension;
  const void *v19;
  CFTypeID v20;
  CMVideoDimensions Dimensions;
  const void *v22;
  CMFormatDescriptionRef v23;
  uint64_t v24;
  CMFormatDescriptionRef v25;
  CMFormatDescriptionRef desc;
  __CFDictionary *v28;

  desc = 0;
  v28 = 0;
  if (!a1)
    return FigSignalErrorAt();
  v7 = *a1;
  if (!*a1 || *(_DWORD *)(v7 + 16) == 2)
  {
    v24 = FigSignalErrorAt();
    Mutable = 0;
    goto LABEL_29;
  }
  vtCompressionSessionCopyFallbackVideoFormatDescriptionExtensions(*a1, a6, &v28);
  Mutable = v28;
  if (v28)
    v15 = v28;
  else
    v15 = a6;
  v16 = vtCreateVideoFomatDescriptionFromHEVCParameterSets((CFDataRef *)v7, a2, a3, a4, a5, v15, &desc);
  if ((_DWORD)v16)
    goto LABEL_28;
  if (!*(_BYTE *)(v7 + 676))
    goto LABEL_17;
  v17 = (const void *)*MEMORY[0x1E0CA2240];
  Extension = CMFormatDescriptionGetExtension(desc, (CFStringRef)*MEMORY[0x1E0CA2240]);
  if (!Extension || (v19 = Extension, v20 = CFGetTypeID(Extension), v20 != CFDictionaryGetTypeID()))
  {
    v24 = 4294954384;
LABEL_29:
    v25 = desc;
LABEL_30:
    if (v25)
      CFRelease(v25);
    goto LABEL_32;
  }
  if (!Mutable)
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v28 = Mutable;
    if (!Mutable)
    {
      v16 = FigSignalErrorAt();
LABEL_28:
      v24 = v16;
      goto LABEL_29;
    }
  }
  CFDictionarySetValue(Mutable, v17, v19);
  Dimensions = CMVideoFormatDescriptionGetDimensions(desc);
  v16 = vtCompressionSessionAddDolbyVisionVideoFormatDescriptionExtensions(v7, Dimensions.width, Dimensions.height, Mutable);
  if ((_DWORD)v16)
    goto LABEL_28;
  if (desc)
  {
    CFRelease(desc);
    desc = 0;
  }
  v16 = vtCreateVideoFomatDescriptionFromHEVCParameterSets((CFDataRef *)v7, a2, a3, a4, a5, Mutable, &desc);
  if ((_DWORD)v16)
    goto LABEL_28;
LABEL_17:
  v22 = *(const void **)(v7 + 32);
  v23 = desc;
  *(_QWORD *)(v7 + 32) = desc;
  if (v23)
    CFRetain(v23);
  if (v22)
    CFRelease(v22);
  v24 = 0;
  v25 = desc;
  if (!a7 || !desc)
    goto LABEL_30;
  v24 = 0;
  *a7 = desc;
  desc = 0;
LABEL_32:
  if (Mutable)
    CFRelease(Mutable);
  return v24;
}

uint64_t vtCreateVideoFomatDescriptionFromHEVCParameterSets(CFDataRef *cf, size_t a2, const void *a3, const void *a4, int a5, const __CFDictionary *a6, CMFormatDescriptionRef *a7)
{
  size_t v12;
  void *v14;
  void *v15;
  const __CFAllocator *v16;
  uint64_t v17;
  uint64_t v18;
  void *v20;

  v12 = a2;
  if (*((_BYTE *)cf + 641) && *((_BYTE *)cf + 640) && !*((_BYTE *)cf + 642) && cf[83])
  {
    if (a2 >> 61
      || a2 == 0x1FFFFFFFFFFFFFFFLL
      || 8 * a2 == -8
      || (v20 = malloc_type_malloc(8 * a2 + 8, 0x5CC9CBA6uLL)) == 0)
    {
      v18 = FigSignalErrorAt();
      v14 = 0;
      v15 = 0;
      goto LABEL_7;
    }
    v14 = v20;
    v15 = malloc_type_malloc(8 * v12 + 8, 0x5CC9CBA6uLL);
    if (!v15)
    {
      v17 = FigSignalErrorAt();
      goto LABEL_6;
    }
    memcpy(v14, a3, 8 * v12);
    memcpy(v15, a4, 8 * v12);
    *((_QWORD *)v14 + v12) = CFDataGetBytePtr(cf[83]);
    *((_QWORD *)v15 + v12++) = CFDataGetLength(cf[83]);
    a4 = v15;
    a3 = v14;
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  v16 = CFGetAllocator(cf);
  v17 = CMVideoFormatDescriptionCreateFromHEVCParameterSets(v16, v12, (const uint8_t *const *)a3, (const size_t *)a4, a5, a6, a7);
LABEL_6:
  v18 = v17;
LABEL_7:
  free(v15);
  free(v14);
  return v18;
}

uint64_t VTEncoderSessionCreateMVHEVCThreeDimensionalReferenceDisplaysInfoSEIWithDefaults(uint64_t a1, __int16 a2, __int16 a3)
{
  uint64_t v6;
  void *v7;
  uint64_t ThreeDimensionalReferenceDisplaysInfoSEI;
  uint64_t v9;

  v6 = FigHEVCBridge_AllocThreeDimensionalReferenceDisplaysInfo();
  v7 = (void *)v6;
  if (!v6)
  {
    ThreeDimensionalReferenceDisplaysInfoSEI = FigSignalErrorAt();
    goto LABEL_4;
  }
  if (a1)
  {
    *(_BYTE *)v6 = 31;
    *(_WORD *)(v6 + 8) = a2;
    *(_WORD *)(v6 + 10) = a3;
    ThreeDimensionalReferenceDisplaysInfoSEI = FigHEVCBridge_CreateThreeDimensionalReferenceDisplaysInfoSEI();
LABEL_4:
    v9 = ThreeDimensionalReferenceDisplaysInfoSEI;
    free(v7);
    return v9;
  }
  return FigSignalErrorAt();
}

uint64_t vtCompressionSessionTrackFrameGetInfo(uint64_t a1, const void *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  _QWORD *Value;
  uint64_t v11;

  MEMORY[0x1940280C4](*(_QWORD *)(a1 + 104));
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 128), a2);
  if (Value)
  {
    if (a5)
      *a5 = *Value;
    if (a4)
      *a4 = Value[1];
    v11 = 0;
    if (a3)
      *a3 = Value[2];
  }
  else
  {
    v11 = FigSignalErrorAt();
  }
  MEMORY[0x1940280D0](*(_QWORD *)(a1 + 104));
  return v11;
}

_QWORD *vtTimeStampRetain(uint64_t a1, __int128 *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  __int128 v5;

  v3 = malloc_type_malloc(0x18uLL, 0x1000040504FFAC1uLL);
  v4 = v3;
  if (v3)
  {
    v5 = *a2;
    v3[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v5;
  }
  else
  {
    FigSignalErrorAt();
  }
  return v4;
}

void vtTimeStampRelease(int a1, void *a2)
{
  free(a2);
}

CFStringRef vtTimeStampCopyDescription(CMTime *a1)
{
  const __CFAllocator *v1;
  CMTime v3;

  v1 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v3 = *a1;
  return CMTimeCopyDescription(v1, &v3);
}

uint64_t VTEncoderSessionTeardown(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 16);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 16) = 0;
  }
  FigSimpleMutexDestroy();
  *(_QWORD *)(a1 + 24) = 0;
  return FigCommonMemoryPoolReleaseAndClear();
}

uint64_t VTEncoderSessionEnqueuePresentationTimeStamp(uint64_t a1, _DWORD *a2)
{
  if (!a1 || (a2[3] & 0x1D) != 1)
    return FigSignalErrorAt();
  MEMORY[0x1940280C4](*(_QWORD *)(a1 + 24));
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 16), a2);
  MEMORY[0x1940280D0](*(_QWORD *)(a1 + 24));
  return 0;
}

uint64_t VTEncoderSessionCreateCMBlockBuffer(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t result;

  if (!a1)
    return FigSignalErrorAt();
  if ((*(_QWORD *)(a1 + 8) || (v5 = FigCopyCommonMemoryPool(), (*(_QWORD *)(a1 + 8) = v5) != 0))
    && (result = FigMemoryPoolCreateBlockBufferWithOptions(), (_DWORD)result))
  {
    if (!a3)
      return result;
  }
  else
  {
    result = FigSignalErrorAt();
    if (!a3)
      return result;
  }
  *a3 = 0;
  return result;
}

uint64_t VTEncoderSessionDequeueDecodeTimeStamp(uint64_t a1, uint64_t a2)
{
  _QWORD *ValueAtIndex;
  uint64_t v5;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  v8 = *MEMORY[0x1E0CA2E18];
  v9 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  if (!a1)
    return FigSignalErrorAt();
  MEMORY[0x1940280C4](*(_QWORD *)(a1 + 24));
  if (CFArrayGetCount(*(CFArrayRef *)(a1 + 16)) < 1)
  {
    v7 = FigSignalErrorAt();
    MEMORY[0x1940280D0](*(_QWORD *)(a1 + 24));
    return v7;
  }
  else
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), 0);
    if (ValueAtIndex)
    {
      v5 = 0;
      v8 = *(_OWORD *)ValueAtIndex;
      v9 = ValueAtIndex[2];
    }
    else
    {
      v5 = FigSignalErrorAt();
    }
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 16), 0);
    MEMORY[0x1940280D0](*(_QWORD *)(a1 + 24));
    if (a2)
    {
      *(_OWORD *)a2 = v8;
      *(_QWORD *)(a2 + 16) = v9;
    }
    return v5;
  }
}

uint64_t VTEncoderSessionSetTimeRangesForNextPass(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  unint64_t v4;
  CMTimeFlags v6;
  CMTimeValue v7;
  CMTimeEpoch v8;
  CMTimeScale v9;
  CMTimeFlags v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;
  CMTimeFlags v14;
  CMTimeFlags v15;
  CMTimeValue v16;
  CMTimeScale v17;
  void *v19;
  void *__src;
  unint64_t v21;
  uint64_t v22;
  CMTime time2;
  CMTimeRange range;
  CMTime v25;
  CMTimeValue v26;
  CMTimeScale v27;
  CMTimeValue v28;
  CMTimeScale v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v28 = *MEMORY[0x1E0CA2E40];
  v29 = *(_DWORD *)(MEMORY[0x1E0CA2E40] + 8);
  if (!a1)
    return FigSignalErrorAt();
  v3 = *a1;
  if (!*a1)
    return FigSignalErrorAt();
  if (*(_DWORD *)(v3 + 16) == 2)
    return FigSignalErrorAt();
  v4 = a2;
  if (a2 <= 0)
    return FigSignalErrorAt();
  v6 = *(_DWORD *)(MEMORY[0x1E0CA2E40] + 12);
  v8 = *(_QWORD *)(MEMORY[0x1E0CA2E40] + 16);
  v7 = *(_QWORD *)(MEMORY[0x1E0CA2E40] + 24);
  v9 = *(_DWORD *)(MEMORY[0x1E0CA2E40] + 32);
  v10 = *(_DWORD *)(MEMORY[0x1E0CA2E40] + 36);
  v11 = *(_QWORD *)(MEMORY[0x1E0CA2E40] + 40);
  v12 = *(void **)(v3 + 784);
  if (v12)
  {
    *(_QWORD *)(v3 + 776) = 0;
    free(v12);
    *(_QWORD *)(v3 + 784) = 0;
  }
  v21 = v4;
  v22 = v3;
  __src = a3;
  v13 = a3 + 5;
  do
  {
    v14 = v6;
    v26 = *(v13 - 5);
    v6 = *((_DWORD *)v13 - 7);
    v27 = *((_DWORD *)v13 - 8);
    if ((v6 & 1) == 0)
      return FigSignalErrorAt();
    v15 = v10;
    v10 = *((_DWORD *)v13 - 1);
    if ((v10 & 1) == 0)
      return FigSignalErrorAt();
    if (*v13)
      return FigSignalErrorAt();
    v16 = v7;
    v7 = *(v13 - 2);
    if (v7 < 0)
      return FigSignalErrorAt();
    if ((v6 & 0x1D) != 1)
      return FigSignalErrorAt();
    if (*(v13 - 3))
      return FigSignalErrorAt();
    if ((*((_DWORD *)v13 - 1) & 0x1D) != 1)
      return FigSignalErrorAt();
    v17 = *((_DWORD *)v13 - 2);
    if ((v14 & 1) != 0 && (v15 & 1) != 0 && !v11 && (v16 & 0x8000000000000000) == 0)
    {
      memset(&v25, 0, sizeof(v25));
      range.start.value = v28;
      range.start.timescale = v29;
      range.start.flags = v14;
      range.start.epoch = v8;
      range.duration.value = v16;
      range.duration.timescale = v9;
      range.duration.flags = v15;
      range.duration.epoch = 0;
      CMTimeRangeGetEnd(&v25, &range);
      range.start = v25;
      time2.value = v26;
      time2.timescale = v27;
      time2.flags = v6;
      time2.epoch = 0;
      if (CMTimeCompare(&range.start, &time2) > 0)
        return FigSignalErrorAt();
    }
    v11 = 0;
    v8 = 0;
    v13 += 6;
    v28 = v26;
    v29 = v27;
    v9 = v17;
    --v4;
  }
  while (v4);
  *(_QWORD *)(v22 + 776) = v21;
  if (v21 >= 0x555555555555556)
  {
    *(_QWORD *)(v22 + 784) = 0;
    return 4294954392;
  }
  v19 = malloc_type_malloc(48 * v21, 0x5CC9CBA6uLL);
  *(_QWORD *)(v22 + 784) = v19;
  if (!v19)
    return 4294954392;
  memcpy(v19, __src, 48 * *(_QWORD *)(v22 + 776));
  return 0;
}

OSStatus VTCompressionSessionBeginPass(VTCompressionSessionRef session, VTCompressionSessionOptionFlags beginPassFlags, uint32_t *reserved)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint32_t *);

  if (!session || *((_DWORD *)session + 4) == 2)
    return FigSignalErrorAt();
  v4 = *(_QWORD *)&beginPassFlags;
  if (*((_QWORD *)session + 3))
    return VTCompressionSessionRemote_BeginPass(*((_QWORD *)session + 3), beginPassFlags, reserved);
  if (!*((_QWORD *)session + 95) || *((_DWORD *)session + 192))
    return FigSignalErrorAt();
  *((_DWORD *)session + 192) = 1;
  v6 = *((_QWORD *)session + 54);
  v7 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
  if (*v7 >= 2uLL && (v8 = (uint64_t (*)(uint64_t, uint64_t, uint32_t *))v7[8]) != 0)
    return v8(v6, v4, reserved);
  else
    return -12782;
}

OSStatus VTCompressionSessionEndPass(VTCompressionSessionRef session, Boolean *furtherPassesRequestedOut, uint32_t *reserved)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v8)(uint64_t, Boolean *, uint32_t *);

  if (!session || *((_DWORD *)session + 4) == 2)
    return FigSignalErrorAt();
  if (*((_QWORD *)session + 3))
    return VTCompressionSessionRemote_EndPass(*((_QWORD *)session + 3), (BOOL *)furtherPassesRequestedOut, reserved);
  if (!*((_QWORD *)session + 95) || *((_DWORD *)session + 192) != 1)
    return FigSignalErrorAt();
  *((_DWORD *)session + 192) = 2;
  v6 = *((_QWORD *)session + 54);
  v7 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
  if (*v7 >= 2uLL && (v8 = (uint64_t (*)(uint64_t, Boolean *, uint32_t *))v7[9]) != 0)
    return v8(v6, furtherPassesRequestedOut, reserved);
  else
    return -12782;
}

OSStatus VTCompressionSessionGetTimeRangesForNextPass(VTCompressionSessionRef session, CMItemCount *timeRangeCountOut, const CMTimeRange **timeRangeArrayOut)
{
  const CMTimeRange *v4;
  CMItemCount v5;

  if (!session || *((_DWORD *)session + 4) == 2)
    return FigSignalErrorAt();
  if (*((_QWORD *)session + 3))
    return VTCompressionSessionRemote_GetTimeRangesForNextPass(*((_QWORD *)session + 3), timeRangeCountOut, timeRangeArrayOut);
  if (!*((_QWORD *)session + 95))
    return FigSignalErrorAt();
  v4 = (const CMTimeRange *)*((_QWORD *)session + 98);
  if (!v4)
    return FigSignalErrorAt();
  v5 = *((_QWORD *)session + 97);
  if (v5 <= 0 || !timeRangeCountOut || !timeRangeArrayOut || *((_DWORD *)session + 192) != 2)
    return FigSignalErrorAt();
  *((_DWORD *)session + 192) = 0;
  *timeRangeCountOut = v5;
  *timeRangeArrayOut = v4;
  return 0;
}

uint64_t VTDistributedCompressionGetSegmentRanges(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  _QWORD *v12;
  uint64_t (*v13)(_QWORD, uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t);
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _OWORD v19[3];

  if ((int)a4 <= 0 || !a5 || !a6)
    return FigSignalErrorAt();
  v11 = VTCreateVideoEncoderInstanceFromEncoderID(a1);
  if ((_DWORD)v11)
    return v11;
  v16 = *a3;
  v17 = a3[1];
  v18 = a3[2];
  v12 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
  if (*v12 < 2uLL)
    return 4294954514;
  v13 = (uint64_t (*)(_QWORD, uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t))v12[15];
  if (!v13)
    return 4294954514;
  v19[0] = v16;
  v19[1] = v17;
  v19[2] = v18;
  return v13(0, a2, v19, a4, a5, a6);
}

uint64_t VTDistributedCompressionGetSegmentsToReencode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t (*v11)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t);

  if ((int)a3 > 0)
  {
    if (!a4 || !a5)
      return FigSignalErrorAt();
    v9 = VTCreateVideoEncoderInstanceFromEncoderID(a1);
    if (!(_DWORD)v9)
    {
      v10 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
      if (*v10 < 2uLL)
        return 4294954514;
      v11 = (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))v10[16];
      if (!v11)
        return 4294954514;
      return v11(0, a2, a3, a4, a5);
    }
    return v9;
  }
  return FigSignalErrorAt();
}

CFDictionaryRef VTCreateDictionaryRepresentationForMovedRect(double a1, double a2, double a3, double a4, double a5, double a6)
{
  const __CFAllocator *v6;
  CFDictionaryRef v7;
  double v9;
  double v10;
  double valuePtr;
  double v12;
  double v13;
  double v14;
  void *values;
  CFTypeRef cf;
  CFTypeRef v17;
  CFTypeRef v18;
  CFTypeRef v19;
  CFTypeRef v20;
  void *keys[2];
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  valuePtr = a1;
  v12 = a2;
  v13 = a3;
  v14 = a4;
  v9 = a6;
  v10 = a5;
  *(_OWORD *)keys = xmmword_1E2F22E88;
  v22 = *(_OWORD *)&off_1E2F22E98;
  v23 = xmmword_1E2F22EA8;
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberCGFloatType, &valuePtr);
  cf = CFNumberCreate(v6, kCFNumberCGFloatType, &v12);
  v17 = CFNumberCreate(v6, kCFNumberCGFloatType, &v13);
  v18 = CFNumberCreate(v6, kCFNumberCGFloatType, &v14);
  v19 = CFNumberCreate(v6, kCFNumberCGFloatType, &v10);
  v20 = CFNumberCreate(v6, kCFNumberCGFloatType, &v9);
  v7 = CFDictionaryCreate(v6, (const void **)keys, (const void **)&values, 6, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFRelease(values);
  CFRelease(cf);
  CFRelease(v17);
  CFRelease(v18);
  CFRelease(v19);
  CFRelease(v20);
  return v7;
}

double VTMakeMovedRectWithDictionaryRepresentation(const __CFDictionary *a1, void *a2, void *a3)
{
  const __CFNumber *Value;
  const __CFNumber *v7;
  const __CFNumber *v8;
  const __CFNumber *v9;
  const __CFNumber *v10;
  const __CFNumber *v11;
  const __CFNumber *v12;
  CFTypeID TypeID;
  CFTypeID v14;
  CFTypeID v15;
  CFTypeID v16;
  CFTypeID v17;
  CFTypeID v18;
  __int128 v20;
  __int128 v21;

  v20 = 0u;
  v21 = 0u;
  Value = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("X"));
  v7 = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("Y"));
  v8 = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("Width"));
  v9 = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("Height"));
  v10 = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("DX"));
  v11 = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("DY"));
  if (Value)
  {
    v12 = v11;
    TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(Value))
    {
      if (v7)
      {
        v14 = CFNumberGetTypeID();
        if (v14 == CFGetTypeID(v7))
        {
          if (v8)
          {
            v15 = CFNumberGetTypeID();
            if (v15 == CFGetTypeID(v8))
            {
              if (v9)
              {
                v16 = CFNumberGetTypeID();
                if (v16 == CFGetTypeID(v9))
                {
                  if (v10)
                  {
                    v17 = CFNumberGetTypeID();
                    if (v17 == CFGetTypeID(v10))
                    {
                      if (v12)
                      {
                        v18 = CFNumberGetTypeID();
                        if (v18 == CFGetTypeID(v12))
                        {
                          CFNumberGetValue(Value, kCFNumberCGFloatType, &v20);
                          CFNumberGetValue(v7, kCFNumberCGFloatType, (char *)&v20 + 8);
                          CFNumberGetValue(v8, kCFNumberCGFloatType, &v21);
                          CFNumberGetValue(v9, kCFNumberCGFloatType, (char *)&v21 + 8);
                          if (a2)
                            CFNumberGetValue(v10, kCFNumberCGFloatType, a2);
                          if (a3)
                            CFNumberGetValue(v12, kCFNumberCGFloatType, a3);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return *(double *)&v20;
}

CFTypeRef vtCompressionSessionCopyFormattingDesc()
{
  return CFRetain(CFSTR("[VTCompressionSession]"));
}

__CFString *vtCompressionSessionCopyDebugDesc(uint64_t a1)
{
  unsigned int v1;
  const __CFAllocator *v4;
  __CFString *Mutable;
  unsigned int v6;
  CFAllocatorRef v7;
  unsigned int v8;

  v1 = *(_DWORD *)(a1 + 48);
  v8 = v1;
  if (*(_QWORD *)(a1 + 24))
    return (__CFString *)CFRetain(CFSTR("[VTCompressionSession]"));
  v4 = CFGetAllocator((CFTypeRef)a1);
  Mutable = CFStringCreateMutable(v4, 0);
  if (v1 > 0xA)
  {
    if (v1 > 0x28)
    {
      v8 = bswap32(v1);
    }
    else
    {
      v6 = *(_DWORD *)(a1 + 48);
      LOBYTE(v8) = v6 / 0xA + 48;
      *(_WORD *)((char *)&v8 + 1) = (v6 % 0xA) | 0x30;
    }
  }
  else
  {
    LOWORD(v8) = (*(_BYTE *)(a1 + 48) + 48);
  }
  v7 = CFGetAllocator((CFTypeRef)a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<VTCompressionSession %p [%p]>{%d x %d '%.4s', videoEncoder:%p, sourcePixelBufferAttributes:%p, encoderPixelBufferAttributes:%p, sourcePixelBufferPool:%p, pixelTransferBufferPool:%p, outputCallback:%p, outputCallbackRefCon:%p, pendingFrameCount:%d}"), a1, v7, *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44), &v8, *(_QWORD *)(a1 + 432), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 472), *(_QWORD *)(a1 + 496), *(_QWORD *)(a1 + 488), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(unsigned int *)(a1 + 120));
  return Mutable;
}

uint64_t __vtCompressionSessionStoreHDRDefaultWrites_block_invoke()
{
  uint64_t result;

  vtCompressionSessionStoreHDRDefaultWrites_hdrEnabled = FigGetCFPreferenceNumberWithDefault();
  vtCompressionSessionStoreHDRDefaultWrites_hdrAlwaysGenerateStats = FigGetCFPreferenceNumberWithDefault();
  vtCompressionSessionStoreHDRDefaultWrites_enableAmbientViewingEnvironment = FigGetCFPreferenceNumberWithDefault();
  result = FigGetCFPreferenceNumberWithDefault();
  vtCompressionSessionStoreHDRDefaultWrites_generateDM4 = result;
  return result;
}

uint64_t vtCoreAnalyticsSaveTrackedVideoEncoderSpecificationProperty(void *value, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = *(_QWORD *)(a3 + 856);
  if (result)
  {
    result = CFSetContainsValue((CFSetRef)result, value);
    if ((_DWORD)result)
      return FigCFDictionarySetValue();
  }
  return result;
}

void vtCompressionSessionCreatePropertiesHandledByVideoToolbox()
{
  const __CFAllocator *v0;
  CFDictionaryRef v1;
  CFDictionaryRef v2;
  void *values[40];
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  void *keys[35];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  v7 = 0;
  v6 = 0u;
  v5 = 0u;
  v4 = 0u;
  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v1 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v1)
  {
    v2 = v1;
    keys[0] = CFSTR("PixelBufferPoolIsShared");
    keys[1] = CFSTR("VideoEncoderPixelBufferAttributes");
    values[0] = v1;
    values[1] = v1;
    keys[2] = CFSTR("PoolPixelBufferAttributesSeed");
    keys[3] = CFSTR("PoolPixelBufferAttributes");
    values[2] = v1;
    values[3] = v1;
    keys[4] = CFSTR("NumberOfPendingFrames");
    keys[5] = CFSTR("PixelTransferProperties");
    values[4] = v1;
    values[5] = v1;
    keys[6] = CFSTR("PixelAspectRatio");
    keys[7] = CFSTR("CleanAperture");
    values[6] = v1;
    values[7] = v1;
    keys[8] = CFSTR("FieldCount");
    keys[9] = CFSTR("FieldDetail");
    values[8] = v1;
    values[9] = v1;
    keys[10] = CFSTR("ComponentRange");
    keys[11] = CFSTR("ColorPrimaries");
    values[10] = v1;
    values[11] = v1;
    keys[12] = CFSTR("TransferFunction");
    keys[13] = CFSTR("GammaLevel");
    values[12] = v1;
    values[13] = v1;
    keys[14] = CFSTR("YCbCrMatrix");
    keys[15] = CFSTR("ICCProfile");
    values[14] = v1;
    values[15] = v1;
    keys[16] = CFSTR("MasteringDisplayColorVolume");
    keys[17] = CFSTR("ContentLightLevelInfo");
    values[16] = v1;
    values[17] = v1;
    keys[18] = CFSTR("FigThreadPriority");
    keys[19] = CFSTR("ClientPID");
    values[18] = v1;
    values[19] = v1;
    keys[20] = CFSTR("MultiPassStorage");
    keys[21] = CFSTR("RealTime");
    values[20] = v1;
    values[21] = v1;
    keys[22] = CFSTR("AllowPixelTransfer");
    keys[23] = CFSTR("EncoderID");
    values[22] = v1;
    values[23] = v1;
    keys[24] = CFSTR("MaximizePowerEfficiency");
    keys[25] = CFSTR("AuxiliaryTypeInfo");
    values[24] = v1;
    values[25] = v1;
    keys[26] = CFSTR("ChromaLocationTopField");
    keys[27] = CFSTR("ChromaLocationBottomField");
    values[26] = v1;
    values[27] = v1;
    keys[28] = CFSTR("HDRMetadataInsertionMode");
    keys[29] = CFSTR("PreserveDynamicHDRMetadata");
    values[28] = v1;
    values[29] = v1;
    keys[30] = CFSTR("AmbientViewingEnvironment");
    keys[31] = CFSTR("PrepareEncodedSampleBuffersForPaddedWrites");
    values[30] = v1;
    values[31] = v1;
    keys[32] = CFSTR("AllowCompressedPixelFormats");
    keys[33] = CFSTR("HasLeftStereoEyeView");
    values[32] = v1;
    values[33] = v1;
    keys[34] = CFSTR("HasRightStereoEyeView");
    *(_QWORD *)&v9 = CFSTR("HasEyeViewsReversed");
    values[34] = v1;
    values[35] = v1;
    *((_QWORD *)&v9 + 1) = CFSTR("HasAdditionalViews");
    *(_QWORD *)&v10 = CFSTR("HeroEye");
    values[36] = v1;
    values[37] = v1;
    *((_QWORD *)&v10 + 1) = CFSTR("ProjectionKind");
    *(_QWORD *)&v11 = CFSTR("ViewPackingKind");
    values[38] = v1;
    values[39] = v1;
    *((_QWORD *)&v11 + 1) = CFSTR("TransportIdentifier");
    *(_QWORD *)&v12 = CFSTR("WarpKind");
    *(_QWORD *)&v4 = v1;
    *((_QWORD *)&v4 + 1) = v1;
    *((_QWORD *)&v12 + 1) = CFSTR("StereoCameraBaseline");
    *(_QWORD *)&v13 = CFSTR("HorizontalDisparityAdjustment");
    *(_QWORD *)&v5 = v1;
    *((_QWORD *)&v5 + 1) = v1;
    *((_QWORD *)&v13 + 1) = CFSTR("HorizontalFieldOfView");
    *(_QWORD *)&v14 = CFSTR("PowerLogSessionID");
    *(_QWORD *)&v6 = v1;
    *((_QWORD *)&v6 + 1) = v1;
    sVTCompressionSessionPropertiesHandledByVideoToolbox = (uint64_t)CFDictionaryCreate(v0, (const void **)keys, (const void **)values, 46, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!sVTCompressionSessionPropertiesHandledByVideoToolbox)
      FigSignalErrorAt();
    CFRelease(v2);
  }
  else
  {
    FigSignalErrorAt();
  }
}

CFTypeID vtReadRationalOrIntegerFromDictionary(const __CFDictionary *a1, const void *a2, const void *a3, void *a4, _DWORD *a5)
{
  const void *Value;
  const void *v10;
  CFTypeID v11;
  const __CFNumber *ValueAtIndex;
  const __CFNumber *v13;
  const __CFNumber *v14;
  CFTypeID v15;
  CFTypeID v16;
  CFTypeID result;
  const void *v18;
  CFTypeID TypeID;

  Value = CFDictionaryGetValue(a1, a2);
  if (Value
    && (v10 = Value, v11 = CFArrayGetTypeID(), v11 == CFGetTypeID(v10))
    && CFArrayGetCount((CFArrayRef)v10) == 2
    && (ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)v10, 0),
        v13 = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)v10, 1),
        ValueAtIndex)
    && (v14 = v13, v15 = CFNumberGetTypeID(), v15 == CFGetTypeID(ValueAtIndex))
    && v14
    && (v16 = CFNumberGetTypeID(), v16 == CFGetTypeID(v14)))
  {
    CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, a4);
    return CFNumberGetValue(v14, kCFNumberSInt32Type, a5);
  }
  else
  {
    result = (CFTypeID)CFDictionaryGetValue(a1, a3);
    if (result)
    {
      v18 = (const void *)result;
      TypeID = CFNumberGetTypeID();
      result = CFGetTypeID(v18);
      if (TypeID == result)
      {
        result = CFNumberGetValue((CFNumberRef)v18, kCFNumberSInt32Type, a4);
        *a5 = 1;
      }
    }
  }
  return result;
}

uint64_t vtCompressionSessionDoesPixelFormatHaveDesiredColorRange(uint64_t a1, uint64_t a2)
{
  const __CFDictionary *DescriptionWithPixelFormatType;

  if (a2
    && (DescriptionWithPixelFormatType = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType()) != 0
    && CFDictionaryGetValue(DescriptionWithPixelFormatType, (const void *)*MEMORY[0x1E0CA9120]))
  {
    return FigCFEqual();
  }
  else
  {
    return 1;
  }
}

void vtCompressionSessionAddPropertyToPartition(void *key, const void *a2, CFDictionaryRef *a3)
{
  __CFDictionary *Mutable;
  const __CFDictionary *v7;

  if (CFDictionaryContainsKey(*a3, key))
  {
    Mutable = a3[2];
    if (!Mutable)
    {
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      a3[2] = Mutable;
    }
LABEL_8:
    CFDictionarySetValue(Mutable, key, a2);
    return;
  }
  v7 = a3[1];
  if (v7 && CFDictionaryContainsKey(v7, key))
  {
    Mutable = a3[3];
    if (!Mutable)
    {
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      a3[3] = Mutable;
    }
    goto LABEL_8;
  }
}

BOOL vtCompressionSessionIsHLG()
{
  return FigCFEqual() && FigCFEqual() && FigCFEqual();
}

uint64_t vtCompressionSessionIsDolbyCompatible(uint64_t a1)
{
  int v1;
  uint64_t result;

  v1 = *(_DWORD *)(a1 + 568);
  if (v1 != 10 && v1 != 0)
    return 0;
  result = FigCFEqual();
  if ((_DWORD)result)
    return *(_BYTE *)(a1 + 752) == 0;
  return result;
}

uint64_t vtCompressionSessionPipelineContextHandleError(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *a1;
  if (!*a1 || *(_DWORD *)(v2 + 16) == 2)
    return FigSignalErrorAt();
  else
    return VTEncoderSessionEmitEncodedFrame((uint64_t *)(v2 + 392), (const void *)a1[13], a2, 0, 0);
}

uint64_t vtCompressionSessionSetHDRFormat(uint64_t a1)
{
  uint64_t result;
  char v3;
  int v4;
  BOOL v5;
  int v8;

  result = vtCompressionSessionIsDolbyCompatible(a1);
  if ((_DWORD)result)
  {
    result = vtCompressionSessionIsHLG();
    if ((_DWORD)result)
    {
      *(_DWORD *)(a1 + 672) = 1;
      v3 = 8;
      goto LABEL_16;
    }
    result = vtCompressionSessionIsIPT(a1);
    if ((_DWORD)result)
    {
      *(_DWORD *)(a1 + 672) = 2;
      v3 = 5;
LABEL_16:
      *(_BYTE *)(a1 + 676) = v3;
      if (*MEMORY[0x1E0C9AE50] == *(_QWORD *)(a1 + 576))
        return vtCompressionSessionInitializeDolbyHDRSessions(a1);
      return result;
    }
    result = vtCompressionSessionIsPQ();
    if (!(_DWORD)result)
      return result;
    goto LABEL_27;
  }
  v4 = *(_DWORD *)(a1 + 48);
  if (v4 > 1634743415)
  {
    v5 = (v4 - 1634755432) > 0xB || ((1 << (v4 - 104)) & 0x8C1) == 0;
    if (v5 && ((v4 - 1634759272) > 6 || ((1 << (v4 - 104)) & 0x51) == 0) && v4 != 1634743416)
      return result;
LABEL_26:
    result = vtCompressionSessionIsPQ();
    if (!(_DWORD)result)
    {
      result = vtCompressionSessionIsHLG();
      if (!(_DWORD)result)
        return result;
      v8 = 4;
      goto LABEL_30;
    }
LABEL_27:
    v8 = 3;
LABEL_30:
    *(_DWORD *)(a1 + 672) = v8;
    return result;
  }
  if (v4 == 1634742376 || v4 == 1634742888 || v4 == 1634743400)
    goto LABEL_26;
  return result;
}

uint64_t vtCompressionSessionInitializeDolbyHDRSessions(uint64_t a1)
{
  const __CFAllocator *v2;
  uint64_t *v3;
  uint64_t result;
  uint64_t v5;
  CFTypeRef v6;
  unsigned int (*v7)(uint64_t, const __CFString *, CFTypeRef);
  CFTypeRef cf;
  UInt8 bytes[8];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 576) = *MEMORY[0x1E0C9AE40];
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v3 = (uint64_t *)(a1 + 616);
  result = VTHDRMetadataGenerationSessionCreate(*MEMORY[0x1E0C9AE00], 4, 0, (uint64_t *)(a1 + 616));
  if (!(_DWORD)result)
  {
    cf = 0;
    result = VTHDRMetadataGenerationSessionCreatePaddingNALUForEncoder(*v3, (const __CFData **)&cf);
    if (!(_DWORD)result)
    {
      if (!cf)
        goto LABEL_16;
      if (vtCompressionSessionIsPropertyHandledByVideoEncoder(a1, CFSTR("InsertTrailingBytes")))
      {
        v5 = *(_QWORD *)(a1 + 432);
        v6 = cf;
        v7 = *(unsigned int (**)(uint64_t, const __CFString *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 56);
        if (v7 && !v7(v5, CFSTR("InsertTrailingBytes"), v6))
          *(_QWORD *)(a1 + 632) = CFRetain(cf);
        if (cf)
          CFRelease(cf);
      }
      if (!*(_BYTE *)(a1 + 641) || *(_DWORD *)(a1 + 672) != 1)
        goto LABEL_16;
      *(_BYTE *)(a1 + 640) = 1;
      *(_BYTE *)(a1 + 642) = vtCompressionSessionIsPropertyHandledByVideoEncoder(a1, CFSTR("AmbientViewingEnvironment"));
      if (!*(_QWORD *)(a1 + 656))
      {
        *(_QWORD *)bytes = 0x4240133DA0E92F00;
        *(_QWORD *)(a1 + 656) = CFDataCreate(v2, bytes, 8);
      }
      if (*(_QWORD *)(a1 + 664) || (result = FigHEVCBridge_CreateAmbientViewingEnvironmentSEINAL(), !(_DWORD)result))
      {
LABEL_16:
        result = VTHDRImageStatisticsGenerationSessionCreate(0, 0, (uint64_t *)(a1 + 624));
        if (!(_DWORD)result)
          *(_QWORD *)(a1 + 576) = *MEMORY[0x1E0C9AE50];
      }
    }
  }
  return result;
}

BOOL vtCompressionSessionIsPQ()
{
  return FigCFEqual() && FigCFEqual() && FigCFEqual();
}

uint64_t vtEncoderSetOneProperty(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t result;

  v6 = *a3;
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v7)
    result = v7(v6, a1, a2);
  else
    result = 4294954514;
  if (!*((_DWORD *)a3 + 2))
    *((_DWORD *)a3 + 2) = result;
  return result;
}

void *__vtCompressionSessionSendConfigToCoreAnalytics_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t empty;
  void *v9;
  const __CFAllocator *v10;
  const __CFArray *Value;
  const __CFArray *v12;
  CFTypeID v13;
  CFIndex Count;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  CFIndex v18;
  float v19;
  float v20;
  CFStringRef *v21;
  void *BytesFromCFString;
  void *v23;
  void *v24;
  CFTypeRef propertyValueOut;
  __int16 v27;
  int data;
  tm v29;
  timeval v30;
  CC_LONG len[2];
  CC_SHA256_CTX __str;
  unsigned __int8 md[2];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(v2 + 56);
  v4 = *(unsigned int *)(v2 + 48);
  v5 = *(int *)(v2 + 44);
  v6 = *(int *)(v2 + 40);
  v7 = *(_QWORD *)(v2 + 760);
  v27 = 0;
  propertyValueOut = 0;
  empty = xpc_dictionary_create_empty();
  v9 = empty;
  if (empty)
  {
    xpc_dictionary_set_uint64(empty, "CodecType", v4);
    xpc_dictionary_set_uint64(v9, "Width", v6);
    xpc_dictionary_set_uint64(v9, "Height", v5);
    if (v3)
    {
      if (FigCFDictionaryGetBooleanIfPresent())
        xpc_dictionary_set_BOOL(v9, "EnableHardware", HIBYTE(v27) != 0);
      if (FigCFDictionaryGetBooleanIfPresent())
        xpc_dictionary_set_BOOL(v9, "RequireHardware", (_BYTE)v27 != 0);
      if (FigCFDictionaryGetValue())
        xpc_dictionary_set_BOOL(v9, "RequireEncoderID", 1);
    }
    if (FigCFDictionaryGetValue())
      FigXPCMessageSetCFString();
    if (FigCFDictionaryGetValue())
      FigXPCMessageSetCFString();
    if (FigCFDictionaryGetValue())
      FigXPCMessageSetCFString();
    propertyValueOut = (CFTypeRef)FigCFDictionaryGetValue();
    if (propertyValueOut)
      FigXPCMessageSetCFString();
    if (FigCFDictionaryGetInt32IfPresent())
      xpc_dictionary_set_uint64(v9, "AverageBitRate", 0);
    if (FigCFDictionaryGetFloat32IfPresent())
      xpc_dictionary_set_double(v9, "ExpectedFrameRate", 0.0);
    if (FigCFDictionaryGetFloat32IfPresent())
      xpc_dictionary_set_double(v9, "Quality", 0.0);
    if (FigCFDictionaryGetBooleanIfPresent())
      xpc_dictionary_set_BOOL(v9, "RealTime", 0);
    if (FigCFDictionaryGetBooleanIfPresent())
      xpc_dictionary_set_BOOL(v9, "MaximizePowerEfficiency", 0);
    if (FigCFDictionaryGetBooleanIfPresent())
      xpc_dictionary_set_BOOL(v9, "PrioritizeEncodingSpeedOverQuality", 0);
    if (FigCFDictionaryGetInt32IfPresent())
      xpc_dictionary_set_uint64(v9, "ConstantBitRate", 0);
    if (FigCFDictionaryGetBooleanIfPresent())
      xpc_dictionary_set_BOOL(v9, "AllowFrameReordering", 0);
    if (FigCFDictionaryGetFloat32IfPresent())
      xpc_dictionary_set_double(v9, "MaxKeyFrameIntervalDuration", 0.0);
    if (FigCFDictionaryGetBooleanIfPresent())
      xpc_dictionary_set_BOOL(v9, "AllowTemporalCompression", 0);
    if (FigCFDictionaryGetFloat32IfPresent())
      xpc_dictionary_set_double(v9, "BaseLayerFrameRate", 0.0);
    if (FigCFDictionaryGetInt32IfPresent())
      xpc_dictionary_set_uint64(v9, "OutputBitDepth", 0);
    v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    if (VTSessionCopyProperty(*(VTSessionRef *)(a1 + 32), CFSTR("EncoderID"), (CFAllocatorRef)*MEMORY[0x1E0C9AE00], &propertyValueOut)|| !propertyValueOut)
    {
      FigSignalErrorAt();
    }
    else
    {
      FigXPCMessageSetCFString();
      if (propertyValueOut)
        CFRelease(propertyValueOut);
    }
    Value = (const __CFArray *)FigCFDictionaryGetValue();
    if (Value)
    {
      v12 = Value;
      v13 = CFGetTypeID(Value);
      if (v13 == CFArrayGetTypeID())
      {
        Count = CFArrayGetCount(v12);
        v15 = Count >= 0 ? Count : Count + 1;
        if (Count >= 2)
        {
          v16 = 0;
          v17 = v15 >> 1;
          v18 = 1;
          do
          {
            memset(&__str, 0, 64);
            snprintf((char *)&__str, 0x40uLL, "DataRateLimitsSize%d", v16);
            CFArrayGetValueAtIndex(v12, v18 - 1);
            FigCFNumberGetFloat32();
            xpc_dictionary_set_double(v9, (const char *)&__str, v19);
            snprintf((char *)&__str, 0x40uLL, "DataRateLimitsSeconds%d", v16);
            CFArrayGetValueAtIndex(v12, v18);
            FigCFNumberGetFloat32();
            xpc_dictionary_set_double(v9, (const char *)&__str, v20);
            ++v16;
            v18 += 2;
          }
          while (v17 != v16);
        }
      }
    }
    propertyValueOut = (CFTypeRef)FigCFDictionaryGetValue();
    if (propertyValueOut)
      FigXPCMessageSetCFString();
    if (v7)
      xpc_dictionary_set_BOOL(v9, "Multipass", 1);
    v21 = *(CFStringRef **)(a1 + 32);
    if (!v21[106])
      goto LABEL_71;
    if (CFStringGetLength(v21[106]))
    {
      if (vtCompressionSessionGetDeviceSerialNumber_sGetDeviceSerialNumberOnce != -1)
        dispatch_once(&vtCompressionSessionGetDeviceSerialNumber_sGetDeviceSerialNumberOnce, &__block_literal_global_71);
      if (vtCompressionSessionGetDeviceSerialNumber_sDeviceSerialNumber)
      {
        *(_QWORD *)len = 0;
        BytesFromCFString = (void *)FigCreateBytesFromCFString();
        if (*(_QWORD *)len)
        {
          v30.tv_sec = 0;
          *(_QWORD *)&v30.tv_usec = 0;
          memset(&v29, 0, sizeof(v29));
          gettimeofday(&v30, 0);
          localtime_r(&v30.tv_sec, &v29);
          data = v29.tm_yday + 366 * v29.tm_year;
          memset(&__str, 0, sizeof(__str));
          CC_SHA256_Init(&__str);
          CC_SHA256_Update(&__str, BytesFromCFString, len[0]);
          CC_SHA256_Update(&__str, &data, 4u);
          v23 = (void *)FigCreateBytesFromCFString();
          if (v23)
          {
            v24 = v23;
            CC_SHA256_Update(&__str, v23, len[0]);
            CFAllocatorDeallocate(v10, v24);
            CC_SHA256_Final(md, &__str);
            vtCompressionSessionCoreAnalyticsShouldReportBundleID_shouldReport = *(unsigned __int16 *)md < 0x290u;
          }
        }
        if (BytesFromCFString)
          CFAllocatorDeallocate(v10, BytesFromCFString);
      }
    }
    if (vtCompressionSessionCoreAnalyticsShouldReportBundleID_shouldReport)
      FigXPCMessageSetCFString();
  }
  v21 = *(CFStringRef **)(a1 + 32);
  if (v21)
LABEL_71:
    CFRelease(v21);
  return v9;
}

uint64_t __vtCompressionSessionGetDeviceSerialNumber_block_invoke()
{
  mach_port_t v0;
  const __CFDictionary *v1;
  uint64_t result;
  io_object_t v3;

  v0 = *MEMORY[0x1E0CBBAA8];
  v1 = IOServiceMatching("IOPlatformExpertDevice");
  result = IOServiceGetMatchingService(v0, v1);
  if ((_DWORD)result)
  {
    v3 = result;
    vtCompressionSessionGetDeviceSerialNumber_sDeviceSerialNumber = (uint64_t)IORegistryEntryCreateCFProperty(result, CFSTR("IOPlatformSerialNumber"), (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
    return IOObjectRelease(v3);
  }
  return result;
}

BOOL vtDoesFrameRequireIOSurfaceSynchronization(__CVBuffer *a1, CMTaggedBufferGroupRef group)
{
  CMItemCount Count;
  CMItemCount v4;
  uint64_t v5;
  __CVBuffer *CVPixelBufferAtIndex;

  if (a1)
    return vtDoesPixelBufferRequireIOSurfaceSynchronization(a1);
  if (!group)
    return 0;
  Count = CMTaggedBufferGroupGetCount(group);
  if (Count < 1)
    return 0;
  v4 = Count;
  v5 = 0;
  while (1)
  {
    CVPixelBufferAtIndex = (__CVBuffer *)FigTaggedBufferGroupGetCVPixelBufferAtIndex();
    if (CVPixelBufferAtIndex)
    {
      if (vtDoesPixelBufferRequireIOSurfaceSynchronization(CVPixelBufferAtIndex))
        break;
    }
    if (v4 == ++v5)
      return 0;
  }
  return 1;
}

void vtCompressionSessionIOSurfaceSynchronizationWork(uint64_t a1)
{
  __CVBuffer *v2;
  uint64_t v3;
  uint64_t Work;
  uint64_t v5;
  CMItemCount Count;
  CMItemCount v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  if (*(_QWORD *)a1)
  {
    if (*(_DWORD *)(*(_QWORD *)a1 + 16) != 2)
    {
      v2 = *(__CVBuffer **)(a1 + 32);
      if (*(_OWORD *)(a1 + 32) != 0)
      {
        if (v2)
        {
          if (CVPixelBufferGetIOSurface(v2) && *(_BYTE *)(a1 + 116) == 1)
          {
            v3 = IOSurfaceBindAccel();
            if ((_DWORD)v3)
            {
LABEL_24:
              v5 = v3;
LABEL_10:
              vtCompressionSessionPipelineContextHandleError((uint64_t *)a1, v5);
              FigSemaphoreSignal();
LABEL_11:
              vtCompressionSessionPipelineContextInvalidate(&v10);
              return;
            }
            goto LABEL_8;
          }
        }
        else if (*(_BYTE *)(a1 + 116) == 1)
        {
          if (!*(_QWORD *)(a1 + 40)
            || (Count = CMTaggedBufferGroupGetCount(*(CMTaggedBufferGroupRef *)(a1 + 40)), Count < 1))
          {
LABEL_8:
            Work = vtCompressionSessionPipelineContextPerformNextWork((uint64_t *)a1, 1);
            goto LABEL_9;
          }
          v7 = Count;
          v8 = 0;
          while (FigTaggedBufferGroupGetCVPixelBufferAtIndex())
          {
            if (CVPixelBufferGetIOSurface(0))
            {
              v3 = IOSurfaceBindAccel();
              if ((_DWORD)v3)
                goto LABEL_24;
            }
            if (v7 == ++v8)
              goto LABEL_8;
          }
        }
      }
    }
    Work = FigSignalErrorAt();
LABEL_9:
    v5 = Work;
    if (!(_DWORD)Work)
    {
      FigSemaphoreSignal();
      return;
    }
    goto LABEL_10;
  }
  v9 = FigSignalErrorAt();
  if ((_DWORD)v9)
  {
    vtCompressionSessionPipelineContextHandleError((uint64_t *)a1, v9);
    goto LABEL_11;
  }
}

void vtCompressionSessionPixelTransferSessionWork(uint64_t a1)
{
  uint64_t v1;
  __CVBuffer *v3;
  OpaqueCMTaggedBufferGroup *v4;
  __CVPixelBufferPool *v5;
  OpaqueVTPixelTransferSession *v6;
  const __CFAllocator *v7;
  uint64_t v8;
  uint64_t v9;
  __CFArray *Mutable;
  CFMutableArrayRef v11;
  CMItemCount Count;
  const __CFAllocator *v13;
  CFIndex i;
  CMTagCollectionRef TagCollectionAtIndex;
  CFMutableArrayRef v16;
  const void *v17;
  uint64_t v18;
  __CFArray *v19;
  uint64_t CVPixelBufferAtIndex;
  __CVBuffer *v21;
  const __CFAllocator *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t Work;
  const __CFAllocator *v26;
  __CFArray *v27;
  CFTypeRef cf;
  CVPixelBufferRef pixelBufferOut;
  uint64_t *v30;

  pixelBufferOut = 0;
  v30 = (uint64_t *)a1;
  cf = 0;
  v1 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1
    || *(_DWORD *)(v1 + 16) == 2
    || (v3 = *(__CVBuffer **)(a1 + 32), v4 = *(OpaqueCMTaggedBufferGroup **)(a1 + 40), *(_OWORD *)(a1 + 32) == 0)
    || (v5 = *(__CVPixelBufferPool **)(a1 + 24)) == 0
    || (v6 = *(OpaqueVTPixelTransferSession **)(a1 + 8)) == 0
    || *(_BYTE *)(a1 + 116) != 1)
  {
    Work = FigSignalErrorAt();
    v11 = 0;
    Mutable = 0;
    goto LABEL_30;
  }
  MEMORY[0x1940280C4](*(_QWORD *)(v1 + 464));
  if (v3)
  {
    v7 = CFGetAllocator((CFTypeRef)v1);
    v8 = CVPixelBufferPoolCreatePixelBuffer(v7, v5, &pixelBufferOut);
    if (!(_DWORD)v8)
    {
      v9 = VTPixelTransferSessionTransferImage(v6, v3, pixelBufferOut);
      Mutable = 0;
      if (!(_DWORD)v9)
      {
        v11 = 0;
LABEL_29:
        MEMORY[0x1940280D0](*(_QWORD *)(v1 + 464));
        vtCompressionSessionPipelineContextSetBuffer(a1, pixelBufferOut, cf);
        Work = vtCompressionSessionPipelineContextPerformNextWork((uint64_t *)a1, 1);
        goto LABEL_30;
      }
      Work = v9;
      v11 = 0;
      goto LABEL_48;
    }
    Work = v8;
    Mutable = 0;
  }
  else
  {
    if (!v4)
    {
      Mutable = 0;
      v11 = 0;
      goto LABEL_29;
    }
    Count = CMTaggedBufferGroupGetCount(v4);
    v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Count, MEMORY[0x1E0C9B378]);
    if (Mutable)
    {
      if (Count < 1)
      {
        v11 = CFArrayCreateMutable(v13, Count, MEMORY[0x1E0C9B378]);
        if (v11)
        {
LABEL_28:
          v24 = MEMORY[0x194028160](v13, Mutable, v11, &cf);
          if (!(_DWORD)v24)
            goto LABEL_29;
          Work = v24;
          goto LABEL_48;
        }
      }
      else
      {
        for (i = 0; i != Count; ++i)
        {
          TagCollectionAtIndex = CMTaggedBufferGroupGetTagCollectionAtIndex(v4, i);
          CFArrayAppendValue(Mutable, TagCollectionAtIndex);
        }
        v16 = CFArrayCreateMutable(v13, Count, MEMORY[0x1E0C9B378]);
        if (v16)
        {
          v11 = v16;
          v26 = v13;
          v27 = Mutable;
          v17 = (const void *)v1;
          v18 = 0;
          while (1)
          {
            v19 = v11;
            CVPixelBufferAtIndex = FigTaggedBufferGroupGetCVPixelBufferAtIndex();
            if (!CVPixelBufferAtIndex)
              break;
            v21 = (__CVBuffer *)CVPixelBufferAtIndex;
            v22 = CFGetAllocator(v17);
            v23 = CVPixelBufferPoolCreatePixelBuffer(v22, v5, &pixelBufferOut);
            if ((_DWORD)v23)
              goto LABEL_47;
            v23 = VTPixelTransferSessionTransferImage(v6, v21, pixelBufferOut);
            if ((_DWORD)v23)
              goto LABEL_47;
            v11 = v19;
            CFArrayAppendValue(v19, pixelBufferOut);
            if (pixelBufferOut)
            {
              CFRelease(pixelBufferOut);
              pixelBufferOut = 0;
            }
            if (Count == ++v18)
            {
              v1 = (uint64_t)v17;
              v13 = v26;
              Mutable = v27;
              goto LABEL_28;
            }
          }
          v23 = FigSignalErrorAt();
LABEL_47:
          Work = v23;
          v1 = (uint64_t)v17;
          v11 = v19;
          Mutable = v27;
          goto LABEL_48;
        }
      }
    }
    Work = FigSignalErrorAt();
  }
  v11 = 0;
LABEL_48:
  MEMORY[0x1940280D0](*(_QWORD *)(v1 + 464));
LABEL_30:
  if (pixelBufferOut)
    CFRelease(pixelBufferOut);
  if (cf)
    CFRelease(cf);
  if (Mutable)
    CFRelease(Mutable);
  if (v11)
    CFRelease(v11);
  if ((_DWORD)Work)
  {
    vtCompressionSessionPipelineContextHandleError(v30, Work);
    if (v1)
      FigSemaphoreSignal();
    vtCompressionSessionPipelineContextInvalidate((uint64_t *)&v30);
  }
  else if (v1)
  {
    FigSemaphoreSignal();
  }
}

void vtCompressionSessionColorSyncWork(uint64_t a1)
{
  uint64_t v1;
  __CVBuffer *v3;
  OpaqueCMTaggedBufferGroup *v4;
  __CVPixelBufferPool *v5;
  OpaqueVTPixelTransferSession *v6;
  const __CFAllocator *v7;
  uint64_t v8;
  uint64_t v9;
  __CFArray *Mutable;
  CFMutableArrayRef v11;
  CMItemCount Count;
  const __CFAllocator *v13;
  CFIndex i;
  CMTagCollectionRef TagCollectionAtIndex;
  CFMutableArrayRef v16;
  const void *v17;
  uint64_t v18;
  __CFArray *v19;
  uint64_t CVPixelBufferAtIndex;
  __CVBuffer *v21;
  const __CFAllocator *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t Work;
  const __CFAllocator *v26;
  __CFArray *v27;
  CFTypeRef cf;
  CVPixelBufferRef pixelBufferOut;
  uint64_t *v30;

  pixelBufferOut = 0;
  v30 = (uint64_t *)a1;
  cf = 0;
  v1 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1
    || *(_DWORD *)(v1 + 16) == 2
    || (v3 = *(__CVBuffer **)(a1 + 32), v4 = *(OpaqueCMTaggedBufferGroup **)(a1 + 40), *(_OWORD *)(a1 + 32) == 0)
    || (v5 = *(__CVPixelBufferPool **)(a1 + 24)) == 0
    || (v6 = *(OpaqueVTPixelTransferSession **)(a1 + 16)) == 0
    || *(_BYTE *)(a1 + 116) != 1)
  {
    Work = FigSignalErrorAt();
    v11 = 0;
    Mutable = 0;
    goto LABEL_30;
  }
  MEMORY[0x1940280C4](*(_QWORD *)(v1 + 464));
  if (v3)
  {
    v7 = CFGetAllocator((CFTypeRef)v1);
    v8 = CVPixelBufferPoolCreatePixelBuffer(v7, v5, &pixelBufferOut);
    if (!(_DWORD)v8)
    {
      v9 = VTPixelTransferSessionTransferImage(v6, v3, pixelBufferOut);
      Mutable = 0;
      if (!(_DWORD)v9)
      {
        v11 = 0;
LABEL_29:
        MEMORY[0x1940280D0](*(_QWORD *)(v1 + 464));
        vtCompressionSessionPipelineContextSetBuffer(a1, pixelBufferOut, cf);
        Work = vtCompressionSessionPipelineContextPerformNextWork((uint64_t *)a1, 0);
        goto LABEL_30;
      }
      Work = v9;
      v11 = 0;
      goto LABEL_48;
    }
    Work = v8;
    Mutable = 0;
  }
  else
  {
    if (!v4)
    {
      Mutable = 0;
      v11 = 0;
      goto LABEL_29;
    }
    Count = CMTaggedBufferGroupGetCount(v4);
    v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Count, MEMORY[0x1E0C9B378]);
    if (Mutable)
    {
      if (Count < 1)
      {
        v11 = CFArrayCreateMutable(v13, Count, MEMORY[0x1E0C9B378]);
        if (v11)
        {
LABEL_28:
          v24 = MEMORY[0x194028160](v13, Mutable, v11, &cf);
          if (!(_DWORD)v24)
            goto LABEL_29;
          Work = v24;
          goto LABEL_48;
        }
      }
      else
      {
        for (i = 0; i != Count; ++i)
        {
          TagCollectionAtIndex = CMTaggedBufferGroupGetTagCollectionAtIndex(v4, i);
          CFArrayAppendValue(Mutable, TagCollectionAtIndex);
        }
        v16 = CFArrayCreateMutable(v13, Count, MEMORY[0x1E0C9B378]);
        if (v16)
        {
          v11 = v16;
          v26 = v13;
          v27 = Mutable;
          v17 = (const void *)v1;
          v18 = 0;
          while (1)
          {
            v19 = v11;
            CVPixelBufferAtIndex = FigTaggedBufferGroupGetCVPixelBufferAtIndex();
            if (!CVPixelBufferAtIndex)
              break;
            v21 = (__CVBuffer *)CVPixelBufferAtIndex;
            v22 = CFGetAllocator(v17);
            v23 = CVPixelBufferPoolCreatePixelBuffer(v22, v5, &pixelBufferOut);
            if ((_DWORD)v23)
              goto LABEL_47;
            v23 = VTPixelTransferSessionTransferImage(v6, v21, pixelBufferOut);
            if ((_DWORD)v23)
              goto LABEL_47;
            v11 = v19;
            CFArrayAppendValue(v19, pixelBufferOut);
            if (pixelBufferOut)
            {
              CFRelease(pixelBufferOut);
              pixelBufferOut = 0;
            }
            if (Count == ++v18)
            {
              v1 = (uint64_t)v17;
              v13 = v26;
              Mutable = v27;
              goto LABEL_28;
            }
          }
          v23 = FigSignalErrorAt();
LABEL_47:
          Work = v23;
          v1 = (uint64_t)v17;
          v11 = v19;
          Mutable = v27;
          goto LABEL_48;
        }
      }
    }
    Work = FigSignalErrorAt();
  }
  v11 = 0;
LABEL_48:
  MEMORY[0x1940280D0](*(_QWORD *)(v1 + 464));
LABEL_30:
  if (pixelBufferOut)
    CFRelease(pixelBufferOut);
  if (cf)
    CFRelease(cf);
  if (Mutable)
    CFRelease(Mutable);
  if (v11)
    CFRelease(v11);
  if ((_DWORD)Work)
  {
    vtCompressionSessionPipelineContextHandleError(v30, Work);
    if (v1)
      FigSemaphoreSignal();
    vtCompressionSessionPipelineContextInvalidate((uint64_t *)&v30);
  }
  else if (v1)
  {
    FigSemaphoreSignal();
  }
}

uint64_t vtIsPixelBufferCompatibleWithAttributes(_QWORD *a1, __CVBuffer *a2, uint64_t a3)
{
  const __CFDictionary *v5;
  const void *Value;
  const __CFDictionary *v7;
  const void *v8;
  uint64_t v9;
  const __CFDictionary *v11;
  const __CFDictionary *v12;
  CFTypeRef v13;
  CFTypeRef v14;
  BOOL v15;

  if (a3 && !CVPixelBufferIsCompatibleWithAttributes())
    return 0;
  v5 = (const __CFDictionary *)a1[65];
  if (!v5)
    return 1;
  Value = CFDictionaryGetValue(v5, CFSTR("ScalingMode"));
  if (Value && !CFEqual(Value, CFSTR("Normal")))
  {
    v11 = (const __CFDictionary *)CVBufferCopyAttachment(a2, (CFStringRef)*MEMORY[0x1E0CA8E68], 0);
    v7 = v11;
    v12 = (const __CFDictionary *)a1[17];
    if (v11 != v12
      && (!vtIsPixelAspectRatioSquare(v11) || !vtIsPixelAspectRatioSquare(v12))
      && !FigCFEqual())
    {
      v9 = 0;
      v8 = 0;
      goto LABEL_8;
    }
    v13 = CVBufferCopyAttachment(a2, (CFStringRef)*MEMORY[0x1E0CA8D50], 0);
    v8 = v13;
    v14 = (CFTypeRef)a1[18];
    if (v13 != v14)
    {
      v15 = !v13 || v14 == 0;
      if (v15 || !CFEqual(v13, v14))
      {
        v9 = 0;
        goto LABEL_8;
      }
    }
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = 1;
LABEL_8:
  if (v7)
    CFRelease(v7);
  if (v8)
    CFRelease(v8);
  return v9;
}

uint64_t vtIsPixelAspectRatioSquare(const __CFDictionary *a1)
{
  if (!a1)
    return 1;
  CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E0CA8E60]);
  CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E0CA8E70]);
  return FigCFEqual();
}

BOOL vtDoesPixelBufferRequireIOSurfaceSynchronization(__CVBuffer *a1)
{
  return CVPixelBufferGetIOSurface(a1) && (IOSurfaceNeedsBindAccel() & 1) != 0;
}

uint64_t vtCompressionSessionPipelineContextPerformNextWork(uint64_t *a1, int a2)
{
  uint64_t v2;
  void (__cdecl *v4)(void *);
  NSObject *v5;

  v2 = *a1;
  if (!*a1)
    return FigSignalErrorAt();
  v5 = *(NSObject **)(v2 + 288);
  v4 = *(void (__cdecl **)(void *))(v2 + 296);
  if (a2)
  {
    if (*(_QWORD *)(v2 + 344))
    {
      v4 = *(void (__cdecl **)(void *))(v2 + 352);
      v5 = *(NSObject **)(v2 + 344);
    }
  }
  FigSemaphoreWaitRelative();
  dispatch_group_async_f(*(dispatch_group_t *)(v2 + 272), v5, a1, v4);
  return 0;
}

void vtCompressionSessionPipelineContextSetBuffer(uint64_t a1, CFTypeRef cf, CFTypeRef a3)
{
  const void *v5;
  const void *v6;

  v5 = *(const void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = cf;
  if (cf)
    CFRetain(cf);
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = a3;
  if (a3)
    CFRetain(a3);
  if (v6)
    CFRelease(v6);
}

uint64_t vtIsPixelBufferCompatibleWithColorPropertiesAndDoesPixelBufferHaveDesiredColorRange(void *a1, const void *a2, const void *a3, const void *a4, const void *a5, CGColorSpaceRef *a6, uint64_t a7)
{
  uint64_t result;
  uint64_t PixelFormatType;

  result = VTIsPixelBufferCompatibleWithColorProperties(a1, a2, a3, a4, a5, a6);
  if ((_DWORD)result)
  {
    PixelFormatType = CVPixelBufferGetPixelFormatType((CVPixelBufferRef)a1);
    return vtCompressionSessionDoesPixelFormatHaveDesiredColorRange(PixelFormatType, a7) != 0;
  }
  return result;
}

CFTypeRef VTVideoEncoderCopyFormattingDesc()
{
  return CFRetain(CFSTR("[VTVideoEncoder]"));
}

uint64_t VTCompressionSessionServerStart()
{
  VTVideoCodecService_ShouldUseSeparateCodecProcessForEncode();
  return FigRPCStartServerUsingMachChannel();
}

uint64_t VTCompressionSessionRemoteServer_Destroy(uint64_t a1)
{
  void *v2;

  v2 = 0;
  vtcss_findClientFromCommandPort(a1, (uint64_t)&v2);
  vtcss_finalizeClient(v2);
  return 0;
}

uint64_t VTCompressionSessionRemoteServer_Create(uint64_t a1, int a2, __int128 *a3, uint64_t a4, unsigned int a5, unsigned int a6, int a7, uint64_t a8, int a9, uint64_t a10, unsigned int a11, const __CFDictionary *a12, unsigned int a13, const char *a14, _DWORD *a15, _QWORD *a16, uint64_t *a17, _DWORD *a18)
{
  const __CFDictionary *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t ClientPIDFromAuditToken;
  void *v26;
  const __CFAllocator *v27;
  CFStringRef v28;
  int CFPropertyListFromData;
  int v30;
  __CFDictionary *Mutable;
  _QWORD *v32;
  void *v33;
  _QWORD *v34;
  __int128 v35;
  int v36;
  int v37;
  CFNumberRef v38;
  int v39;
  unsigned int *v40;
  uint64_t v42;
  CFStringRef v45;
  CFTypeRef cf;
  void *value;
  CFTypeRef v49;
  __int128 valuePtr;
  __int128 v51;

  v22 = a12;
  v23 = a11;
  v24 = a3[1];
  valuePtr = *a3;
  v51 = v24;
  ClientPIDFromAuditToken = FigServer_GetClientPIDFromAuditToken();
  v49 = 0;
  v26 = (void *)FigOSTransactionCreateWithProcessName();
  if (!v26)
  {
    v39 = FigSignalErrorAt();
    v33 = 0;
    goto LABEL_22;
  }
  v42 = a4;
  cf = 0;
  value = 0;
  *a15 = 0;
  *a16 = 0;
  *a17 = 0;
  v27 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (a14)
    v28 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a14, 0x8000100u);
  else
    v28 = 0;
  v45 = v28;
  FigProcessInfoCreateWithDetails();
  if (a9)
  {
    CFPropertyListFromData = FigCreateCFPropertyListFromData();
    if (CFPropertyListFromData)
      goto LABEL_45;
  }
  if (a11)
  {
    v30 = FigCreateCFPropertyListFromData();
    if (v30)
    {
      v39 = v30;
      v33 = 0;
      v22 = 0;
      goto LABEL_22;
    }
  }
  if (!a13)
  {
    v22 = 0;
    goto LABEL_14;
  }
  CFPropertyListFromData = FigCreateCFPropertyListFromData();
  if (CFPropertyListFromData)
  {
LABEL_45:
    v39 = CFPropertyListFromData;
    v33 = 0;
    v22 = 0;
    goto LABEL_50;
  }
  Mutable = CFDictionaryCreateMutable(v27, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v22 = Mutable;
  if (!Mutable)
  {
    v39 = 0;
    v33 = 0;
    goto LABEL_50;
  }
  CFDictionaryAddValue(Mutable, CFSTR("ClientName"), 0);
LABEL_14:
  v32 = malloc_type_calloc(1uLL, 0xC8uLL, 0x10E0040B5F696F2uLL);
  v33 = v32;
  if (!v32)
  {
    v39 = FigSignalErrorAt();
    goto LABEL_50;
  }
  v32[24] = v26;
  v34 = v32 + 10;
  v35 = a3[1];
  valuePtr = *a3;
  v51 = v35;
  v36 = VTFigAudioSessionCreate(&valuePtr, ClientPIDFromAuditToken, (uint64_t)CFSTR("VTCompressionSessionClient"), (CFTypeRef *)v32 + 10);
  if (v36
    || (v36 = VTCompressionSessionCreateWithOptions((uint64_t)v27, a5, a6, a7, 0, 0, (uint64_t)v27, (uint64_t)CompressionOutputCallback, (uint64_t)v33, v22, (uint64_t *)&v49)) != 0)
  {
    v39 = v36;
    v26 = 0;
LABEL_50:
    v23 = a11;
    goto LABEL_22;
  }
  v37 = vtcss_initializeClient((uint64_t)v33, v49, 0, 0, 0, a2, v42, ClientPIDFromAuditToken, 0, (uint64_t)"VTCompressionSession", (uint64_t)a15, a16);
  if (v37 || *v34 && (CMNotificationCenterGetDefaultLocalCenter(), (v37 = CMNotificationCenterAddListener()) != 0))
  {
    v39 = v37;
    v26 = 0;
  }
  else
  {
    LODWORD(valuePtr) = ClientPIDFromAuditToken;
    v38 = CFNumberCreate(v27, kCFNumberSInt32Type, &valuePtr);
    VTSessionSetProperty(v49, CFSTR("ClientPID"), v38);
    CFRelease(v38);
    v39 = 0;
    v26 = 0;
    *a17 = FigRemote_GetServerTimeoutToken();
  }
  v23 = a11;
LABEL_22:
  if (value)
    CFRelease(value);
  if (v22)
    CFRelease(v22);
  if (cf)
    CFRelease(cf);
  if (v45)
    CFRelease(v45);
  if (v26)
    os_release(v26);
  if (v49)
    CFRelease(v49);
  if (v39)
    vtcss_finalizeClient(v33);
  FigMachPortReleaseSendRight_();
  v40 = (unsigned int *)MEMORY[0x1E0C83DA0];
  if (a9)
    MEMORY[0x194029090](*MEMORY[0x1E0C83DA0], a8);
  if ((_DWORD)v23)
    MEMORY[0x194029090](*v40, a10, v23);
  if (a13)
    MEMORY[0x194029090](*v40, a12, a13);
  *a18 = v39;
  return 0;
}

void CompressionOutputCallback(uint64_t a1, uint64_t a2, int a3, int a4, const void *a5)
{
  _QWORD *v10;
  uint64_t v11;
  CFTypeRef v12;

  if (!*(_BYTE *)(a1 + 176))
  {
    v10 = malloc_type_calloc(1uLL, 0x30uLL, 0x10E00405F1B3371uLL);
    if (v10)
    {
      v11 = (uint64_t)v10;
      v10[1] = a2;
      *((_DWORD *)v10 + 4) = a3;
      *((_DWORD *)v10 + 5) = a4;
      v10[3] = 0;
      if (a5)
        v12 = CFRetain(a5);
      else
        v12 = 0;
      *(_QWORD *)(v11 + 32) = v12;
      *(_QWORD *)(v11 + 40) = 0;
      vtcss_enqueueFrame(a1, v11);
    }
    else
    {
      FigSignalErrorAt();
    }
  }
}

uint64_t vtcss_initializeClient(uint64_t a1, CFTypeRef cf, const void *a3, const void *a4, const void *a5, int a6, uint64_t a7, int a8, CFTypeRef cfa, uint64_t a10, uint64_t a11, _QWORD *a12)
{
  CFTypeRef v19;
  CFTypeRef v20;
  CFTypeRef v21;
  CFTypeRef v22;
  CFTypeRef v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v19 = cfa;
  *(_DWORD *)(a1 + 64) = a8;
  if (cfa)
    v19 = CFRetain(cfa);
  *(_QWORD *)(a1 + 72) = v19;
  if (cf)
    v20 = CFRetain(cf);
  else
    v20 = 0;
  *(_QWORD *)(a1 + 8) = v20;
  if (a3)
    v21 = CFRetain(a3);
  else
    v21 = 0;
  *(_QWORD *)(a1 + 16) = v21;
  if (a4)
    v22 = CFRetain(a4);
  else
    v22 = 0;
  *(_QWORD *)(a1 + 96) = v22;
  if (a5)
    v23 = CFRetain(a5);
  else
    v23 = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 24) = v23;
  *(_DWORD *)(a1 + 40) = a6;
  *(_QWORD *)(a1 + 48) = a7;
  *(_QWORD *)(a1 + 120) = a1 + 112;
  *(_QWORD *)(a1 + 136) = dispatch_queue_create("CompressionSessionQueuedFrames", 0);
  *(_QWORD *)(a1 + 160) = dispatch_queue_create("CompressionSessionAsyncMessageHandlerQueue", 0);
  *(_QWORD *)(a1 + 168) = dispatch_group_create();
  *(_BYTE *)(a1 + 144) = 1;
  *(_QWORD *)(a1 + 152) = FigSemaphoreCreate();
  if (*(_QWORD *)(a1 + 192) || (v24 = FigOSTransactionCreate(), (*(_QWORD *)(a1 + 192) = v24) != 0))
  {
    v25 = FigRPCCreateClientConnection();
    if ((_DWORD)v25)
    {
      v26 = v25;
    }
    else
    {
      v26 = FigRPCGetConnectionInfo();
      if (!(_DWORD)v26)
        *a12 = 0;
    }
  }
  else
  {
    v26 = FigSignalErrorAt();
  }
  FigMachPortReleaseSendRight_();
  return v26;
}

void vtcss_appStateChangeListener(int a1, uint64_t a2, int a3, int a4, CFDictionaryRef theDict)
{
  const __CFNumber *Value;
  const void *v7;
  CFTypeRef v8;
  const void *v9;
  CFTypeRef v10;
  NSObject *v11;
  unsigned int valuePtr;

  valuePtr = 0;
  Value = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0D492C8]);
  if (!Value)
    goto LABEL_7;
  CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
  if (valuePtr > 0x20)
  {
LABEL_16:
    *(_DWORD *)(a2 + 88) = valuePtr;
    return;
  }
  if (((1 << valuePtr) & 0x100000016) == 0)
  {
    if (((1 << valuePtr) & 0x10101) != 0)
    {
LABEL_7:
      *(_DWORD *)(a2 + 88) = 8;
      return;
    }
    goto LABEL_16;
  }
  v7 = *(const void **)(a2 + 8);
  if (v7)
    v8 = CFRetain(v7);
  else
    v8 = 0;
  v9 = *(const void **)(a2 + 16);
  if (!v9)
  {
    v10 = 0;
    if (!v8)
      goto LABEL_13;
LABEL_15:
    v11 = *(NSObject **)(a2 + 160);
    dispatch_retain(*(dispatch_object_t *)(a2 + 168));
    dispatch_retain(v11);
    *(_DWORD *)(a2 + 88) = valuePtr;
    *(_BYTE *)(a2 + 177) = 1;
    FigRPCExecuteByServerAsync();
    return;
  }
  v10 = CFRetain(v9);
  if (v8)
    goto LABEL_15;
LABEL_13:
  if (valuePtr == 1 && v10)
    goto LABEL_15;
  if (v10)
    CFRelease(v10);
}

void vtcss_finalizeClient(void *a1)
{
  uint64_t v2;
  OpaqueVTCompressionSession *v3;
  OpaqueVTMultiPassStorage *v4;
  uint64_t v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  void *v17;
  _QWORD block[5];

  if (a1)
  {
    v3 = (OpaqueVTCompressionSession *)*((_QWORD *)a1 + 1);
    v2 = *((_QWORD *)a1 + 2);
    v4 = (OpaqueVTMultiPassStorage *)*((_QWORD *)a1 + 12);
    v5 = *((_QWORD *)a1 + 3);
    *((_BYTE *)a1 + 176) = 1;
    if (*((_QWORD *)a1 + 19) && *((_QWORD *)a1 + 21))
    {
      FigSemaphoreSignal();
      FigSemaphoreSignal();
      dispatch_group_wait(*((dispatch_group_t *)a1 + 21), 0xFFFFFFFFFFFFFFFFLL);
    }
    if (*((_QWORD *)a1 + 10))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
      v6 = (const void *)*((_QWORD *)a1 + 10);
      if (v6)
      {
        CFRelease(v6);
        *((_QWORD *)a1 + 10) = 0;
      }
    }
    FigRPCDisposeClientConnection();
    if (v3)
    {
      VTCompressionSessionInvalidate(v3);
      v7 = (const void *)*((_QWORD *)a1 + 1);
      if (v7)
      {
        CFRelease(v7);
        *((_QWORD *)a1 + 1) = 0;
      }
    }
    if (v4)
    {
      VTMultiPassStorageClose(v4);
      v8 = (const void *)*((_QWORD *)a1 + 12);
      if (v8)
      {
        CFRelease(v8);
        *((_QWORD *)a1 + 12) = 0;
      }
    }
    if (v2)
    {
      VTTileCompressionSessionInvalidate(v2);
      v9 = (const void *)*((_QWORD *)a1 + 2);
      if (v9)
      {
        CFRelease(v9);
        *((_QWORD *)a1 + 2) = 0;
      }
    }
    if (v5)
    {
      VTMotionEstimationSessionInvalidate(v5);
      v10 = (const void *)*((_QWORD *)a1 + 3);
      if (v10)
      {
        CFRelease(v10);
        *((_QWORD *)a1 + 3) = 0;
      }
    }
    v11 = *((_QWORD *)a1 + 17);
    if (v11)
    {
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = __vtcss_finalizeClient_block_invoke;
      block[3] = &__block_descriptor_tmp_22;
      block[4] = a1;
      dispatch_sync(v11, block);
      dispatch_release(*((dispatch_object_t *)a1 + 17));
    }
    v12 = *((_QWORD *)a1 + 21);
    if (v12)
      dispatch_release(v12);
    v13 = *((_QWORD *)a1 + 20);
    if (v13)
      dispatch_release(v13);
    FigSemaphoreDestroy();
    v14 = (const void *)*((_QWORD *)a1 + 4);
    if (v14)
    {
      CFRelease(v14);
      *((_QWORD *)a1 + 4) = 0;
    }
    v15 = (const void *)*((_QWORD *)a1 + 23);
    if (v15)
    {
      CFRelease(v15);
      *((_QWORD *)a1 + 23) = 0;
    }
    FigServer_RememberProcessInfoForAFewSeconds();
    v16 = (const void *)*((_QWORD *)a1 + 9);
    if (v16)
    {
      CFRelease(v16);
      *((_QWORD *)a1 + 9) = 0;
    }
    v17 = (void *)*((_QWORD *)a1 + 24);
    if (v17)
      os_release(v17);
    *((_QWORD *)a1 + 24) = 0;
    *((_OWORD *)a1 + 10) = 0u;
    *((_OWORD *)a1 + 11) = 0u;
    *((_OWORD *)a1 + 8) = 0u;
    *((_OWORD *)a1 + 9) = 0u;
    *((_OWORD *)a1 + 6) = 0u;
    *((_OWORD *)a1 + 7) = 0u;
    *((_OWORD *)a1 + 4) = 0u;
    *((_OWORD *)a1 + 5) = 0u;
    *((_OWORD *)a1 + 2) = 0u;
    *((_OWORD *)a1 + 3) = 0u;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    free(a1);
  }
}

uint64_t vtcss_findClientFromCommandPort(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = FigRPCLookupClientConnection();
  if (!(_DWORD)result)
  {
    result = FigRPCGetConnectionInfo();
    if (a2)
    {
      if (!(_DWORD)result)
      {
        if (*(_QWORD *)a2)
        {
          if (*(_BYTE *)(*(_QWORD *)a2 + 177))
            return 4294954393;
          else
            return 0;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t VTCompressionSessionRemoteServer_PrepareToEncodeFrames(uint64_t a1)
{
  int ClientFromCommandPort;
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  _QWORD block[6];
  uint64_t v7;

  v7 = 0;
  ClientFromCommandPort = vtcss_findClientFromCommandPort(a1, (uint64_t)&v7);
  if (!ClientFromCommandPort)
  {
    if (v7)
    {
      v2 = *(_QWORD *)(v7 + 8);
      v4 = *(NSObject **)(v7 + 160);
      v3 = *(NSObject **)(v7 + 168);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = __VTCompressionSessionRemoteServer_PrepareToEncodeFrames_block_invoke;
      block[3] = &__block_descriptor_tmp_0;
      block[4] = v2;
      block[5] = v7;
      dispatch_group_async(v3, v4, block);
      return 0;
    }
    ClientFromCommandPort = FigSignalErrorAt();
  }
  if (ClientFromCommandPort && v7)
    VTCompressionSessionRemoteCallbackClient_PrepareToEncodeFramesReturn(*(_DWORD *)(v7 + 40), *(_QWORD *)(v7 + 48), ClientFromCommandPort);
  return 0;
}

uint64_t VTCompressionSessionRemoteServer_EncodeFrame(uint64_t a1, int a2, uint64_t a3, int a4, int a5, uint64_t a6, int a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12, uint64_t a13, int a14, int a15, uint64_t a16, int a17, uint64_t a18, int a19, int a20,uint64_t a21,int a22,uint64_t a23,int a24,int a25,uint64_t a26,int a27,uint64_t a28,unsigned int a29,__int128 *a30,__int128 *a31,uint64_t a32,int a33,uint64_t a34)
{
  uint64_t v35;
  int ClientFromCommandPort;
  uint64_t v37;
  uint64_t v38;
  const __CFAllocator *v39;
  __CFArray *Mutable;
  __CFArray *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  int CFPropertyListFromData;
  uint64_t *v46;
  const UInt8 *v47;
  CFIndex v48;
  CFDataRef v49;
  uint64_t v50;
  const void *v51;
  uint64_t v52;
  NSObject *v53;
  NSObject *v54;
  uint64_t v55;
  int v57;
  uint64_t v58;
  _QWORD v59[2];
  void (*v60)(uint64_t);
  void *v61;
  uint64_t *v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  _QWORD v72[4];
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  int v91;
  int v92;
  uint64_t v93;
  int v94;
  int v95;
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  int v100;
  int v101;
  uint64_t v102;
  int v103;
  int v104;
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  int v109;
  int v110;
  uint64_t v111;
  int v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD v116[4];
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD block[11];
  __int128 v126;
  uint64_t v127;
  __int128 v128;
  uint64_t v129;
  uint64_t v130;

  v130 = *MEMORY[0x1E0C80C00];
  v120 = a4;
  v92 = 0;
  v95 = 0;
  v91 = a5;
  v97 = 0u;
  v98 = 0u;
  v99 = 0u;
  v101 = 0;
  v104 = 0;
  v106 = 0u;
  v107 = 0u;
  v108 = 0u;
  v110 = 0;
  v113 = 0;
  v93 = a6;
  v94 = a7;
  v96 = a8;
  LODWORD(v97) = a9;
  DWORD2(v97) = a10;
  *(_QWORD *)&v98 = a11;
  DWORD2(v98) = a12;
  *(_QWORD *)&v99 = a13;
  DWORD2(v99) = a14;
  v100 = a15;
  v102 = a16;
  v103 = a17;
  v105 = a18;
  LODWORD(v106) = a19;
  DWORD2(v106) = a20;
  *(_QWORD *)&v107 = a21;
  DWORD2(v107) = a22;
  *(_QWORD *)&v108 = a23;
  DWORD2(v108) = a24;
  v109 = a25;
  v111 = a26;
  v112 = a27;
  v90 = 0xE000000000;
  v114 = a28;
  v115 = a29;
  v80 = 0u;
  v81 = 0u;
  v82 = 0u;
  v83 = 0u;
  v84 = 0u;
  v85 = 0u;
  v86 = 0u;
  v60 = __VTCompressionSessionRemoteServer_EncodeFrame_block_invoke;
  v61 = &unk_1E2F249A8;
  v117 = 0;
  v118 = &v117;
  v62 = &v117;
  v116[0] = 0;
  v116[1] = v116;
  v72[0] = 0;
  v72[1] = v72;
  v63 = v116;
  v64 = v72;
  v88 = 0;
  v89 = &v88;
  v77 = 0;
  v78 = &v77;
  v65 = &v88;
  v66 = &v77;
  v121 = 0;
  v122 = &v121;
  v123 = 0x2000000000;
  v124 = 0;
  v119 = 0x2000000000;
  v116[2] = 0x2000000000;
  v116[3] = 0;
  v79 = 0x9000000000;
  v87 = 0;
  v73 = 0;
  v74 = &v73;
  v75 = 0x2000000000;
  v76 = 0;
  v72[2] = 0x2000000000;
  v72[3] = 0;
  v67 = &v73;
  v35 = MEMORY[0x1E0C809B0];
  v59[0] = MEMORY[0x1E0C809B0];
  v59[1] = 0x40000000;
  v70 = a2;
  v71 = a33;
  v68 = a3;
  v69 = a32;
  ClientFromCommandPort = vtcss_findClientFromCommandPort(a1, (uint64_t)&v124);
  if (!ClientFromCommandPort)
  {
    v37 = v122[3];
    if (!v37)
    {
      Mutable = 0;
      v41 = 0;
      goto LABEL_37;
    }
    v38 = *(_QWORD *)(v37 + 8);
    if (!(a2 | *((_DWORD *)v118 + 6)))
    {
LABEL_6:
      if (!*((_DWORD *)v89 + 6) && !*((_DWORD *)v89 + 10))
      {
        Mutable = 0;
        v41 = 0;
        if (a33)
        {
LABEL_24:
          CFPropertyListFromData = FigCreateCFPropertyListFromData();
          if (CFPropertyListFromData)
          {
LABEL_33:
            v57 = CFPropertyListFromData;
            goto LABEL_38;
          }
        }
LABEL_25:
        v52 = v122[3];
        v54 = *(NSObject **)(v52 + 160);
        v53 = *(NSObject **)(v52 + 168);
        block[0] = v35;
        block[1] = 0x40000000;
        block[2] = __VTCompressionSessionRemoteServer_EncodeFrame_block_invoke_2;
        block[3] = &unk_1E2F249D0;
        v129 = *((_QWORD *)a31 + 2);
        v126 = *a30;
        v55 = *((_QWORD *)a30 + 2);
        v128 = *a31;
        block[6] = &v73;
        block[7] = v72;
        v127 = v55;
        block[9] = v38;
        block[10] = a34;
        block[8] = v116;
        block[4] = v59;
        block[5] = &v121;
        dispatch_group_async(v53, v54, block);
        goto LABEL_26;
      }
      v39 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 5, MEMORY[0x1E0C9B378]);
      if (Mutable)
      {
        v41 = CFArrayCreateMutable(v39, 5, MEMORY[0x1E0C9B378]);
        if (v41)
        {
          v42 = 0;
          v43 = 5;
          while (1)
          {
            v44 = v89;
            if (LODWORD(v89[v42 + 3]) | LODWORD(v89[v42 + 5]))
            {
              CFPropertyListFromData = FigRemote_CreatePixelBufferFromSerializedAtomData();
              if (CFPropertyListFromData)
                goto LABEL_33;
              LODWORD(v89[v42 + 5]) = 0;
              v44 = v89;
            }
            v46 = &v44[v42];
            v47 = (const UInt8 *)v46[6];
            if (v47)
            {
              v48 = *((unsigned int *)v46 + 14);
              if ((_DWORD)v48)
              {
                v49 = CFDataCreate(v39, v47, v48);
                v78[v43 - 2] = (uint64_t)v49;
                v50 = v78[v43 - 2];
                if (!v50)
                  break;
                CFPropertyListFromData = MEMORY[0x194028124](v50, v39, &v78[v43 - 1]);
                if (CFPropertyListFromData)
                  goto LABEL_33;
              }
            }
            v51 = (const void *)v78[v43 - 1];
            if (v51 && v78[v43])
            {
              CFArrayAppendValue(Mutable, v51);
              CFArrayAppendValue(v41, (const void *)v78[v43]);
            }
            v43 += 3;
            v42 += 5;
            if (v43 == 20)
            {
              CFPropertyListFromData = MEMORY[0x194028160](v39, Mutable, v41, v74 + 3);
              if (CFPropertyListFromData)
                goto LABEL_33;
              v35 = MEMORY[0x1E0C809B0];
              if (!a33)
                goto LABEL_25;
              goto LABEL_24;
            }
          }
        }
      }
      else
      {
        v41 = 0;
      }
LABEL_37:
      v57 = FigSignalErrorAt();
      if (!v57)
        goto LABEL_26;
      goto LABEL_38;
    }
    ClientFromCommandPort = FigRemote_CreatePixelBufferFromSerializedAtomData();
    if (!ClientFromCommandPort)
    {
      *((_DWORD *)v118 + 6) = 0;
      goto LABEL_6;
    }
  }
  v57 = ClientFromCommandPort;
  v41 = 0;
  Mutable = 0;
LABEL_38:
  v60((uint64_t)v59);
  v58 = v122[3];
  if (v58)
    VTCompressionSessionRemoteCallbackClient_EncodeReturn(*(_DWORD *)(v58 + 40), *(_QWORD *)(v58 + 48), 0, 0, v57);
LABEL_26:
  if (Mutable)
    CFRelease(Mutable);
  if (v41)
    CFRelease(v41);
  _Block_object_dispose(v72, 8);
  _Block_object_dispose(&v73, 8);
  _Block_object_dispose(&v77, 8);
  _Block_object_dispose(&v88, 8);
  _Block_object_dispose(v116, 8);
  _Block_object_dispose(&v117, 8);
  _Block_object_dispose(&v121, 8);
  return 0;
}

uint64_t VTCompressionSessionRemoteServer_DequeueNextPendingEncodedFrame(uint64_t a1, _DWORD *a2, _QWORD *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _QWORD *a7, _DWORD *a8, _DWORD *a9, int *a10, vm_address_t *a11, _DWORD *a12, _DWORD *a13)
{
  _DWORD *v13;
  int ClientFromCommandPort;
  BOOL v20;
  int v21;
  NSObject *v22;
  int v23;
  uint64_t v24;
  int SerializedAtomDataForSampleBuffer;
  int v26;
  vm_size_t Length;
  int CFDataFromCFPropertyList;
  kern_return_t v29;
  void *v30;
  const UInt8 *BytePtr;
  _DWORD *v33;
  vm_address_t address;
  CFDataRef theData;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  _QWORD block[7];
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;

  v13 = a8;
  v40 = 0;
  v39 = 0;
  v37 = 0;
  v38 = 0;
  address = 0;
  theData = 0;
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  *a7 = 0;
  *a8 = 0;
  *a9 = 0;
  *a10 = 1;
  ClientFromCommandPort = vtcss_findClientFromCommandPort(a1, (uint64_t)&v40);
  v20 = ClientFromCommandPort != -12903 || v40 == 0;
  if (!v20 || (v21 = ClientFromCommandPort) == 0)
  {
    if (v40)
    {
      v33 = v13;
      v46 = 0;
      v47 = &v46;
      v48 = 0x2000000000;
      v49 = 0;
      v42 = 0;
      v43 = &v42;
      v44 = 0x2000000000;
      v45 = 0;
      v22 = *(NSObject **)(v40 + 136);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = __vtcss_dequeueFrame_block_invoke;
      block[3] = &unk_1E2F24B50;
      block[5] = &v42;
      block[6] = v40;
      block[4] = &v46;
      dispatch_sync(v22, block);
      v23 = *((unsigned __int8 *)v43 + 24);
      v24 = v47[3];
      _Block_object_dispose(&v42, 8);
      _Block_object_dispose(&v46, 8);
      if (!v24)
      {
        LODWORD(Length) = 0;
        *a2 = 0;
LABEL_21:
        v21 = 0;
        *a9 = v23;
        goto LABEL_22;
      }
      if (*(_QWORD *)(v24 + 32))
      {
        SerializedAtomDataForSampleBuffer = FigRemote_CreateSerializedAtomDataForSampleBuffer();
        if (!SerializedAtomDataForSampleBuffer)
        {
          v26 = 1;
LABEL_17:
          *(_QWORD *)(v40 + 56) = (v37 + *MEMORY[0x1E0C85AD8] - 1) & -*MEMORY[0x1E0C85AD8];
          *a10 = v26;
          goto LABEL_18;
        }
      }
      else
      {
        if (!*(_QWORD *)(v24 + 40))
        {
LABEL_18:
          CFDataFromCFPropertyList = FigCreateCFDataFromCFPropertyList();
          if (CFDataFromCFPropertyList)
          {
            v21 = CFDataFromCFPropertyList;
            LODWORD(Length) = 0;
            goto LABEL_22;
          }
          Length = CFDataGetLength(theData);
          v29 = vm_allocate(*MEMORY[0x1E0C83DA0], &address, Length, 1560281089);
          if (v29)
          {
            v21 = v29;
            goto LABEL_22;
          }
          v30 = (void *)address;
          BytePtr = CFDataGetBytePtr(theData);
          memcpy(v30, BytePtr, Length);
          *a2 = 1;
          *a3 = *(_QWORD *)(v24 + 8);
          *a4 = *(_DWORD *)(v24 + 16);
          *a5 = *(_DWORD *)(v24 + 20);
          goto LABEL_21;
        }
        SerializedAtomDataForSampleBuffer = FigRemote_CreateSerializedAtomDataForPixelBuffer();
        if (!SerializedAtomDataForSampleBuffer)
        {
          v26 = 0;
          goto LABEL_17;
        }
      }
      v21 = SerializedAtomDataForSampleBuffer;
      LODWORD(Length) = 0;
      *(_QWORD *)(v40 + 56) = 0;
LABEL_22:
      v13 = v33;
      goto LABEL_23;
    }
    v21 = FigSignalErrorAt();
  }
  v24 = 0;
  LODWORD(Length) = 0;
LABEL_23:
  vtcss_freeQueuedFrame((_QWORD *)v24);
  if (theData)
    CFRelease(theData);
  *a6 = v39;
  *a7 = v38;
  *v13 = v37;
  if (a11)
    *a11 = address;
  if (a12)
    *a12 = Length;
  if (a13)
    *a13 = v21;
  return 0;
}

void vtcss_freeQueuedFrame(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  if (a1)
  {
    v2 = (const void *)a1[3];
    if (v2)
    {
      CFRelease(v2);
      a1[3] = 0;
    }
    v3 = (const void *)a1[4];
    if (v3)
    {
      CFRelease(v3);
      a1[4] = 0;
    }
    v4 = (const void *)a1[5];
    if (v4)
      CFRelease(v4);
    free(a1);
  }
}

uint64_t VTCompressionSessionRemoteServer_CopySupportedPropertyDictionary(uint64_t a1, _QWORD *a2, _DWORD *a3, kern_return_t *a4)
{
  kern_return_t ClientFromCommandPort;
  uint64_t v8;
  kern_return_t v9;
  uint64_t v10;
  const void *v11;
  kern_return_t v12;
  vm_size_t Length;
  kern_return_t v14;
  void *v15;
  const UInt8 *BytePtr;
  vm_address_t v18;
  CFDataRef theData;
  CFDictionaryRef supportedPropertyDictionaryOut;
  _QWORD *v21;

  supportedPropertyDictionaryOut = 0;
  v21 = 0;
  v18 = 0;
  theData = 0;
  *a2 = 0;
  *a3 = 0;
  ClientFromCommandPort = vtcss_findClientFromCommandPort(a1, (uint64_t)&v21);
  if (ClientFromCommandPort)
    goto LABEL_22;
  if (!v21)
  {
    ClientFromCommandPort = FigSignalErrorAt();
    goto LABEL_22;
  }
  v8 = v21[1];
  if (v8)
  {
    v9 = VTCompressionSessionCopySupportedPropertyDictionary(v8, &supportedPropertyDictionaryOut);
  }
  else
  {
    v10 = v21[2];
    if (v10)
    {
      v9 = VTTileCompressionSessionCopySupportedPropertyDictionary(v10, &supportedPropertyDictionaryOut);
    }
    else
    {
      v11 = (const void *)v21[3];
      if (v11)
        v9 = VTSessionCopySupportedPropertyDictionary(v11, &supportedPropertyDictionaryOut);
      else
        v9 = FigSignalErrorAt();
    }
  }
  v12 = v9;
  if (v9)
    goto LABEL_23;
  ClientFromCommandPort = FigCreateCFDataFromCFPropertyList();
  if (ClientFromCommandPort)
  {
LABEL_22:
    v12 = ClientFromCommandPort;
LABEL_23:
    LODWORD(Length) = 0;
    goto LABEL_14;
  }
  Length = CFDataGetLength(theData);
  v14 = vm_allocate(*MEMORY[0x1E0C83DA0], &v18, Length, 1560281089);
  if (v14)
  {
    v12 = v14;
  }
  else
  {
    v15 = (void *)v18;
    BytePtr = CFDataGetBytePtr(theData);
    memcpy(v15, BytePtr, Length);
    v12 = 0;
  }
LABEL_14:
  if (supportedPropertyDictionaryOut)
    CFRelease(supportedPropertyDictionaryOut);
  if (theData)
    CFRelease(theData);
  *a2 = v18;
  *a3 = Length;
  if (a4)
    *a4 = v12;
  return 0;
}

uint64_t VTCompressionSessionRemoteServer_CopySerializableProperties(uint64_t a1, _QWORD *a2, _DWORD *a3, kern_return_t *a4)
{
  kern_return_t ClientFromCommandPort;
  uint64_t v8;
  kern_return_t v9;
  uint64_t v10;
  const void *v11;
  kern_return_t v12;
  vm_size_t Length;
  kern_return_t v14;
  void *v15;
  const UInt8 *BytePtr;
  vm_address_t v18;
  CFDataRef theData;
  CFDictionaryRef dictionaryOut;
  _QWORD *v21;

  dictionaryOut = 0;
  v21 = 0;
  v18 = 0;
  theData = 0;
  *a2 = 0;
  *a3 = 0;
  ClientFromCommandPort = vtcss_findClientFromCommandPort(a1, (uint64_t)&v21);
  if (ClientFromCommandPort)
    goto LABEL_22;
  if (!v21)
  {
    ClientFromCommandPort = FigSignalErrorAt();
    goto LABEL_22;
  }
  v8 = v21[1];
  if (v8)
  {
    v9 = VTCompressionSessionCopySerializableProperties(v8, *MEMORY[0x1E0C9AE00], &dictionaryOut);
  }
  else
  {
    v10 = v21[2];
    if (v10)
    {
      v9 = VTTileCompressionSessionCopySerializableProperties(v10, *MEMORY[0x1E0C9AE00], &dictionaryOut);
    }
    else
    {
      v11 = (const void *)v21[3];
      if (v11)
        v9 = VTSessionCopySerializableProperties(v11, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], &dictionaryOut);
      else
        v9 = FigSignalErrorAt();
    }
  }
  v12 = v9;
  if (v9)
    goto LABEL_23;
  ClientFromCommandPort = FigCreateCFDataFromCFPropertyList();
  if (ClientFromCommandPort)
  {
LABEL_22:
    v12 = ClientFromCommandPort;
LABEL_23:
    LODWORD(Length) = 0;
    goto LABEL_14;
  }
  Length = CFDataGetLength(theData);
  v14 = vm_allocate(*MEMORY[0x1E0C83DA0], &v18, Length, 1560281089);
  if (v14)
  {
    v12 = v14;
  }
  else
  {
    v15 = (void *)v18;
    BytePtr = CFDataGetBytePtr(theData);
    memcpy(v15, BytePtr, Length);
    v12 = 0;
  }
LABEL_14:
  if (dictionaryOut)
    CFRelease(dictionaryOut);
  if (theData)
    CFRelease(theData);
  *a2 = v18;
  *a3 = Length;
  if (a4)
    *a4 = v12;
  return 0;
}

uint64_t VTCompressionSessionRemoteServer_CopyProperty(uint64_t a1, const char *a2, _QWORD *a3, _DWORD *a4, kern_return_t *a5)
{
  kern_return_t ClientFromCommandPort;
  const __CFAllocator *v10;
  CFStringRef v11;
  __CFString *v12;
  uint64_t v13;
  kern_return_t v14;
  uint64_t v15;
  const void *v16;
  kern_return_t v17;
  kern_return_t CFDataFromCFPropertyList;
  vm_size_t Length;
  kern_return_t v20;
  void *v21;
  const UInt8 *BytePtr;
  vm_address_t v24;
  CFDataRef theData;
  CFTypeRef propertyValueOut;
  _QWORD *v27;

  propertyValueOut = 0;
  v27 = 0;
  v24 = 0;
  theData = 0;
  *a3 = 0;
  *a4 = 0;
  ClientFromCommandPort = vtcss_findClientFromCommandPort(a1, (uint64_t)&v27);
  if (ClientFromCommandPort)
    goto LABEL_23;
  if (!v27
    || (v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00],
        (v11 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0)) == 0))
  {
    ClientFromCommandPort = FigSignalErrorAt();
LABEL_23:
    v17 = ClientFromCommandPort;
    LODWORD(Length) = 0;
    goto LABEL_17;
  }
  v12 = (__CFString *)v11;
  v13 = v27[1];
  if (v13)
  {
    v14 = VTCompressionSessionCopyProperty(v13, v12, (uint64_t)v10, &propertyValueOut);
  }
  else
  {
    v15 = v27[2];
    if (v15)
    {
      v14 = VTTileCompressionSessionCopyProperty(v15, v12, (uint64_t)v10, &propertyValueOut);
    }
    else
    {
      v16 = (const void *)v27[3];
      if (v16)
        v14 = VTSessionCopyProperty(v16, v12, v10, &propertyValueOut);
      else
        v14 = FigSignalErrorAt();
    }
  }
  v17 = v14;
  if (v14)
    goto LABEL_25;
  CFDataFromCFPropertyList = FigCreateCFDataFromCFPropertyList();
  if (CFDataFromCFPropertyList)
  {
    v17 = CFDataFromCFPropertyList;
LABEL_25:
    LODWORD(Length) = 0;
    goto LABEL_15;
  }
  Length = CFDataGetLength(theData);
  v20 = vm_allocate(*MEMORY[0x1E0C83DA0], &v24, Length, 1560281089);
  if (v20)
  {
    v17 = v20;
  }
  else
  {
    v21 = (void *)v24;
    BytePtr = CFDataGetBytePtr(theData);
    memcpy(v21, BytePtr, Length);
    v17 = 0;
  }
LABEL_15:
  CFRelease(v12);
  if (propertyValueOut)
    CFRelease(propertyValueOut);
LABEL_17:
  if (theData)
    CFRelease(theData);
  *a3 = v24;
  *a4 = Length;
  if (a5)
    *a5 = v17;
  return 0;
}

uint64_t VTCompressionSessionRemoteServer_SetMultiPassStorage(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int ClientFromCommandPort;
  uint64_t v6;
  const __CFNumber *v7;
  int v8;
  uint64_t v10;
  uint64_t v11;

  v10 = 0;
  v11 = 0;
  ClientFromCommandPort = vtcss_findClientFromCommandPort(a1, (uint64_t)&v11);
  if (!ClientFromCommandPort)
  {
    if (!v11)
      goto LABEL_10;
    v6 = *(_QWORD *)(v11 + 8);
    if (!(_DWORD)a2)
    {
      v7 = 0;
      goto LABEL_8;
    }
    ClientFromCommandPort = vtcss_findClientFromCommandPort(a2, (uint64_t)&v10);
    if (!ClientFromCommandPort)
    {
      if (v10)
      {
        v7 = *(const __CFNumber **)(v10 + 96);
LABEL_8:
        ClientFromCommandPort = VTCompressionSessionSetProperty(v6, CFSTR("MultiPassStorage"), v7);
        goto LABEL_9;
      }
LABEL_10:
      ClientFromCommandPort = FigSignalErrorAt();
    }
  }
LABEL_9:
  v8 = ClientFromCommandPort;
  FigMachPortReleaseSendRight_();
  *a3 = v8;
  return 0;
}

uint64_t VTCompressionSessionRemoteServer_SetProperty(uint64_t a1, const char *a2, uint64_t a3, unsigned int a4, _DWORD *a5)
{
  int ClientFromCommandPort;
  __CFString *v10;
  int CFPropertyListFromData;
  int v12;
  _QWORD *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  int v18;
  _QWORD *v20;

  v20 = 0;
  ClientFromCommandPort = vtcss_findClientFromCommandPort(a1, (uint64_t)&v20);
  if (!ClientFromCommandPort)
  {
    if (v20)
    {
      v10 = (__CFString *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0);
      if (!v10)
        goto LABEL_14;
      CFPropertyListFromData = FigCreateCFPropertyListFromData();
      if (CFPropertyListFromData)
        goto LABEL_15;
      v12 = FigCFEqual();
      v13 = v20;
      if (v12)
      {
        v14 = (const void *)v20[23];
        if (v14)
        {
          CFRelease(v14);
          v13 = v20;
          v20[23] = 0;
        }
      }
      v15 = v13[1];
      if (v15)
      {
        CFPropertyListFromData = VTCompressionSessionSetProperty(v15, v10, 0);
        goto LABEL_15;
      }
      v16 = v13[2];
      if (v16)
      {
        CFPropertyListFromData = VTTileCompressionSessionSetProperty(v16, v10, 0);
        goto LABEL_15;
      }
      v17 = (const void *)v13[3];
      if (v17)
        CFPropertyListFromData = VTSessionSetProperty(v17, v10, 0);
      else
LABEL_14:
        CFPropertyListFromData = FigSignalErrorAt();
LABEL_15:
      v18 = CFPropertyListFromData;
      if (!a4)
        goto LABEL_17;
      goto LABEL_16;
    }
    ClientFromCommandPort = FigSignalErrorAt();
  }
  v18 = ClientFromCommandPort;
  v10 = 0;
  if (a4)
LABEL_16:
    MEMORY[0x194029090](*MEMORY[0x1E0C83DA0], a3, a4);
LABEL_17:
  if (v10)
    CFRelease(v10);
  if (a5)
    *a5 = v18;
  return 0;
}

uint64_t VTCompressionSessionRemoteServer_SetProperties(uint64_t a1, uint64_t a2, unsigned int a3, _DWORD *a4)
{
  int ClientFromCommandPort;
  CFTypeID TypeID;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  int v12;
  _QWORD *v14;

  v14 = 0;
  ClientFromCommandPort = vtcss_findClientFromCommandPort(a1, (uint64_t)&v14);
  if (!ClientFromCommandPort)
  {
    if (!v14)
      goto LABEL_11;
    ClientFromCommandPort = FigCreateCFPropertyListFromData();
    if (ClientFromCommandPort)
      goto LABEL_12;
    TypeID = CFDictionaryGetTypeID();
    if (TypeID != CFGetTypeID(0))
      goto LABEL_11;
    v9 = v14[1];
    if (v9)
    {
      ClientFromCommandPort = VTCompressionSessionSetProperties(v9, 0);
      goto LABEL_12;
    }
    v10 = v14[2];
    if (v10)
    {
      ClientFromCommandPort = VTTileCompressionSessionSetProperties(v10, 0);
      goto LABEL_12;
    }
    v11 = (const void *)v14[3];
    if (v11)
      ClientFromCommandPort = VTSessionSetProperties(v11, 0);
    else
LABEL_11:
      ClientFromCommandPort = FigSignalErrorAt();
  }
LABEL_12:
  v12 = ClientFromCommandPort;
  if (a3)
    MEMORY[0x194029090](*MEMORY[0x1E0C83DA0], a2, a3);
  if (a4)
    *a4 = v12;
  return 0;
}

uint64_t VTCompressionSessionRemoteServer_CompleteFrames(uint64_t a1, __int128 *a2)
{
  int ClientFromCommandPort;
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  uint64_t v8;
  _QWORD block[6];
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v8 = 0;
  ClientFromCommandPort = vtcss_findClientFromCommandPort(a1, (uint64_t)&v8);
  if (!ClientFromCommandPort)
  {
    if (v8)
    {
      v4 = *(_QWORD *)(v8 + 8);
      v6 = *(NSObject **)(v8 + 160);
      v5 = *(NSObject **)(v8 + 168);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = __VTCompressionSessionRemoteServer_CompleteFrames_block_invoke;
      block[3] = &__block_descriptor_tmp_7;
      block[4] = v8;
      block[5] = v4;
      v10 = *a2;
      v11 = *((_QWORD *)a2 + 2);
      dispatch_group_async(v5, v6, block);
      return 0;
    }
    ClientFromCommandPort = FigSignalErrorAt();
  }
  if (ClientFromCommandPort && v8)
    VTCompressionSessionRemoteCallbackClient_CompleteFramesReturn(*(_DWORD *)(v8 + 40), *(_QWORD *)(v8 + 48), ClientFromCommandPort);
  return 0;
}

uint64_t VTCompressionSessionRemoteServer_BeginPass(uint64_t a1, VTCompressionSessionOptionFlags a2, uint32_t *a3, _DWORD *a4)
{
  int ClientFromCommandPort;
  uint64_t v9;

  v9 = 0;
  *a3 = 0;
  ClientFromCommandPort = vtcss_findClientFromCommandPort(a1, (uint64_t)&v9);
  if (!ClientFromCommandPort)
  {
    if (!v9)
    {
      ClientFromCommandPort = FigSignalErrorAt();
      if (!a4)
        return 0;
      goto LABEL_5;
    }
    ClientFromCommandPort = VTCompressionSessionBeginPass(*(VTCompressionSessionRef *)(v9 + 8), a2, a3);
  }
  if (a4)
LABEL_5:
    *a4 = ClientFromCommandPort;
  return 0;
}

uint64_t VTCompressionSessionRemoteServer_EndPass(uint64_t a1, _DWORD *a2, uint32_t *a3, _DWORD *a4)
{
  int ClientFromCommandPort;
  Boolean furtherPassesRequestedOut;
  uint64_t v10;

  v10 = 0;
  furtherPassesRequestedOut = 0;
  *a2 = 0;
  *a3 = 0;
  ClientFromCommandPort = vtcss_findClientFromCommandPort(a1, (uint64_t)&v10);
  if (!ClientFromCommandPort)
  {
    if (!v10)
    {
      ClientFromCommandPort = FigSignalErrorAt();
      if (!a4)
        return 0;
      goto LABEL_6;
    }
    ClientFromCommandPort = VTCompressionSessionEndPass(*(VTCompressionSessionRef *)(v10 + 8), &furtherPassesRequestedOut, a3);
    if (!ClientFromCommandPort)
      *a2 = furtherPassesRequestedOut == 1;
  }
  if (a4)
LABEL_6:
    *a4 = ClientFromCommandPort;
  return 0;
}

uint64_t VTCompressionSessionRemoteServer_GetTimeRangesForNextPass(uint64_t a1, CMItemCount *a2, _QWORD *a3, _DWORD *a4, _DWORD *a5)
{
  int ClientFromCommandPort;
  CMItemCount v10;
  vm_size_t v11;
  void *v13;
  CMTimeRange *timeRangeArrayOut;
  CMItemCount timeRangeCountOut;
  uint64_t v16;

  timeRangeCountOut = 0;
  v16 = 0;
  v13 = 0;
  timeRangeArrayOut = 0;
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  ClientFromCommandPort = vtcss_findClientFromCommandPort(a1, (uint64_t)&v16);
  if (!ClientFromCommandPort)
  {
    if (!v16)
    {
      ClientFromCommandPort = FigSignalErrorAt();
      if (!a5)
        return 0;
      goto LABEL_9;
    }
    ClientFromCommandPort = VTCompressionSessionGetTimeRangesForNextPass(*(VTCompressionSessionRef *)(v16 + 8), &timeRangeCountOut, (const CMTimeRange **)&timeRangeArrayOut);
    if (!ClientFromCommandPort)
    {
      v10 = timeRangeCountOut;
      if (timeRangeCountOut >= 1)
      {
        v11 = (48 * timeRangeCountOut);
        ClientFromCommandPort = vm_allocate(*MEMORY[0x1E0C83DA0], (vm_address_t *)&v13, v11, 1560281089);
        if (ClientFromCommandPort)
          goto LABEL_8;
        memcpy(v13, timeRangeArrayOut, v11);
        *a3 = v13;
        *a4 = v11;
        v10 = timeRangeCountOut;
      }
      ClientFromCommandPort = 0;
      *a2 = v10;
    }
  }
LABEL_8:
  if (a5)
LABEL_9:
    *a5 = ClientFromCommandPort;
  return 0;
}

uint64_t VTCompressionSessionRemoteServer_MultiPassStorageCreate(uint64_t a1, int a2, _OWORD *a3, uint64_t a4, const char *a5, unsigned int a6, _OWORD *a7, uint64_t a8, unsigned int a9, const char *a10, _DWORD *a11, _QWORD *a12, uint64_t *a13, _DWORD *a14)
{
  __int128 v17;
  int ClientPIDFromAuditToken;
  const __CFAllocator *v19;
  CFStringRef v20;
  const __CFString *v21;
  const __CFURL *v22;
  int CFPropertyListFromData;
  void *v24;
  __int128 v25;
  int v26;
  int v27;
  unsigned int *v28;
  CFStringRef cf;
  unsigned int v33;
  const char *v34;
  CMTimeRange timeRange;
  CFTypeRef v37;
  CFDictionaryRef v38;
  VTMultiPassStorageRef multiPassStorageOut;

  v17 = a3[1];
  *(_OWORD *)&timeRange.start.value = *a3;
  *(_OWORD *)&timeRange.start.epoch = v17;
  ClientPIDFromAuditToken = FigServer_GetClientPIDFromAuditToken();
  v38 = 0;
  multiPassStorageOut = 0;
  v37 = 0;
  *a11 = 0;
  *a12 = 0;
  *a13 = 0;
  v19 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (a10)
    v20 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a10, 0x8000100u);
  else
    v20 = 0;
  FigProcessInfoCreateWithDetails();
  v34 = a5;
  v33 = a6;
  cf = v20;
  if (!a6)
  {
    v21 = 0;
    v22 = 0;
    if (!a9)
      goto LABEL_13;
    goto LABEL_12;
  }
  if (!a5 || a5[a6 - 1])
  {
    v27 = FigSignalErrorAt();
    v21 = 0;
LABEL_37:
    v22 = 0;
LABEL_40:
    v24 = 0;
    goto LABEL_17;
  }
  v21 = CFStringCreateWithFileSystemRepresentation(v19, a5);
  if (!v21)
  {
    v27 = FigSignalErrorAt();
    goto LABEL_37;
  }
  v22 = CFURLCreateWithString(v19, v21, 0);
  if (!v22)
  {
    CFPropertyListFromData = FigSignalErrorAt();
LABEL_39:
    v27 = CFPropertyListFromData;
    goto LABEL_40;
  }
  if (a9)
  {
LABEL_12:
    CFPropertyListFromData = FigCreateCFPropertyListFromData();
    if (!CFPropertyListFromData)
      goto LABEL_13;
    goto LABEL_39;
  }
LABEL_13:
  v24 = malloc_type_calloc(1uLL, 0xC8uLL, 0x10E0040B5F696F2uLL);
  if (!v24)
  {
    v26 = FigSignalErrorAt();
    goto LABEL_34;
  }
  v25 = a7[1];
  *(_OWORD *)&timeRange.start.value = *a7;
  *(_OWORD *)&timeRange.start.epoch = v25;
  *(_OWORD *)&timeRange.duration.timescale = a7[2];
  v26 = VTMultiPassStorageCreate(v19, v22, &timeRange, v38, &multiPassStorageOut);
  if (v26)
  {
LABEL_34:
    v27 = v26;
    goto LABEL_17;
  }
  v27 = vtcss_initializeClient((uint64_t)v24, 0, 0, multiPassStorageOut, 0, a2, a4, ClientPIDFromAuditToken, v37, (uint64_t)"VTMultiPassStorage", (uint64_t)a11, a12);
  if (!v27)
    *a13 = FigRemote_GetServerTimeoutToken();
LABEL_17:
  if (multiPassStorageOut)
    CFRelease(multiPassStorageOut);
  if (v38)
    CFRelease(v38);
  if (v22)
    CFRelease(v22);
  if (v21)
    CFRelease(v21);
  if (cf)
    CFRelease(cf);
  if (v37)
    CFRelease(v37);
  if (v27)
    vtcss_finalizeClient(v24);
  FigMachPortReleaseSendRight_();
  v28 = (unsigned int *)MEMORY[0x1E0C83DA0];
  MEMORY[0x194029090](*MEMORY[0x1E0C83DA0], v34, v33);
  MEMORY[0x194029090](*v28, a8, a9);
  *a14 = v27;
  return 0;
}

uint64_t VTCompressionSessionRemoteServer_MultiPassStorageDestroy(uint64_t a1)
{
  void *v2;

  v2 = 0;
  vtcss_findClientFromCommandPort(a1, (uint64_t)&v2);
  if (!v2)
    return FigSignalErrorAt();
  vtcss_finalizeClient(v2);
  return 0;
}

uint64_t VTCompressionSessionRemoteServer_MultiPassStorageSetIdentifier(uint64_t a1, const char *a2, _DWORD *a3)
{
  int ClientFromCommandPort;
  uint64_t v6;
  CFStringRef v7;
  CFStringRef v8;
  int v9;
  uint64_t v11;

  v11 = 0;
  ClientFromCommandPort = vtcss_findClientFromCommandPort(a1, (uint64_t)&v11);
  if (ClientFromCommandPort)
  {
LABEL_8:
    v9 = ClientFromCommandPort;
    if (!a3)
      return 0;
    goto LABEL_5;
  }
  if (!v11
    || (v6 = *(_QWORD *)(v11 + 96), (v7 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0)) == 0))
  {
    ClientFromCommandPort = FigSignalErrorAt();
    goto LABEL_8;
  }
  v8 = v7;
  v9 = VTMultiPassStorageSetIdentifier(v6, v7);
  CFRelease(v8);
  if (a3)
LABEL_5:
    *a3 = v9;
  return 0;
}

uint64_t VTCompressionSessionRemoteServer_MultiPassStorageCopyIdentifier(uint64_t a1, char *a2)
{
  const __CFString *v3;
  const __CFString *v4;
  uint64_t v6;

  v6 = 0;
  *a2 = 0;
  if (!vtcss_findClientFromCommandPort(a1, (uint64_t)&v6))
  {
    if (v6)
    {
      v3 = VTMultiPassStorageCopyIdentifier(*(_QWORD *)(v6 + 96));
      if (v3)
      {
        v4 = v3;
        CFStringGetCString(v3, a2, 512, 0);
        CFRelease(v4);
      }
    }
    else
    {
      FigSignalErrorAt();
    }
  }
  return 0;
}

uint64_t VTCompressionSessionRemoteServer_MultiPassStorageSetDataAtTimeStamp(uint64_t a1, uint64_t a2, int a3, const UInt8 *a4, unsigned int a5, _DWORD *a6)
{
  int ClientFromCommandPort;
  uint64_t v12;
  const __CFData *v13;
  int v14;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = 0;
  ClientFromCommandPort = vtcss_findClientFromCommandPort(a1, (uint64_t)&v18);
  if (!ClientFromCommandPort)
  {
    if (v18)
    {
      v12 = *(_QWORD *)(v18 + 96);
      if (a5)
        v13 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a4, a5);
      else
        v13 = 0;
      v16 = *(_OWORD *)a2;
      v17 = *(_QWORD *)(a2 + 16);
      v14 = VTMultiPassStorageSetDataAtTimeStamp(v12, &v16, a3, v13);
      if (v13)
        CFRelease(v13);
      if (a5)
        goto LABEL_9;
      goto LABEL_10;
    }
    ClientFromCommandPort = FigSignalErrorAt();
  }
  v14 = ClientFromCommandPort;
  if (a5)
LABEL_9:
    MEMORY[0x194029090](*MEMORY[0x1E0C83DA0], a4, a5);
LABEL_10:
  if (a6)
    *a6 = v14;
  return 0;
}

uint64_t VTCompressionSessionRemoteServer_MultiPassStorageGetTimeStamp(uint64_t a1, uint64_t a2, const char *a3, _QWORD *a4, _DWORD *a5)
{
  int ClientFromCommandPort;
  uint64_t v10;
  int TimeStamp;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  ClientFromCommandPort = vtcss_findClientFromCommandPort(a1, (uint64_t)&v15);
  if (ClientFromCommandPort)
  {
LABEL_11:
    TimeStamp = ClientFromCommandPort;
    if (!a5)
      return 0;
    goto LABEL_8;
  }
  if (!v15
    || (v10 = *(_QWORD *)(v15 + 96), a3)
    && (a3 = (const char *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a3, 0)) == 0)
  {
    ClientFromCommandPort = FigSignalErrorAt();
    goto LABEL_11;
  }
  v13 = *(_OWORD *)a2;
  v14 = *(_QWORD *)(a2 + 16);
  TimeStamp = VTMultiPassStorageGetTimeStamp(v10, &v13, a3, (uint64_t)a4);
  if (a3)
    CFRelease(a3);
  if (a5)
LABEL_8:
    *a5 = TimeStamp;
  return 0;
}

uint64_t VTCompressionSessionRemoteServer_MultiPassStorageGetTimeStampAndDuration(uint64_t a1, __int128 *a2, const char *a3, _QWORD *a4, _QWORD *a5, _DWORD *a6)
{
  int ClientFromCommandPort;
  uint64_t v12;
  int TimeStampAndDuration;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  ClientFromCommandPort = vtcss_findClientFromCommandPort(a1, (uint64_t)&v17);
  if (ClientFromCommandPort)
  {
LABEL_11:
    TimeStampAndDuration = ClientFromCommandPort;
    if (!a6)
      return 0;
    goto LABEL_8;
  }
  if (!v17
    || (v12 = *(_QWORD *)(v17 + 96), a3)
    && (a3 = (const char *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a3, 0)) == 0)
  {
    ClientFromCommandPort = FigSignalErrorAt();
    goto LABEL_11;
  }
  v15 = *a2;
  v16 = *((_QWORD *)a2 + 2);
  TimeStampAndDuration = VTMultiPassStorageGetTimeStampAndDuration(v12, (uint64_t)&v15, a3, (uint64_t)a4, (uint64_t)a5);
  if (a3)
    CFRelease(a3);
  if (a6)
LABEL_8:
    *a6 = TimeStampAndDuration;
  return 0;
}

uint64_t VTCompressionSessionRemoteServer_MultiPassStorageCopyDataAtTimeStamp(uint64_t a1, uint64_t a2, int a3, _QWORD *a4, _DWORD *a5, _DWORD *a6)
{
  int ClientFromCommandPort;
  uint64_t v12;
  int v13;
  CFDataRef v14;
  BOOL v15;
  void *v16;
  vm_size_t Length;
  const UInt8 *BytePtr;
  __int128 v20;
  uint64_t v21;
  vm_address_t address;
  CFDataRef theData;
  uint64_t v24;

  theData = 0;
  v24 = 0;
  address = 0;
  *a4 = 0;
  *a5 = 0;
  ClientFromCommandPort = vtcss_findClientFromCommandPort(a1, (uint64_t)&v24);
  if (ClientFromCommandPort)
  {
LABEL_17:
    v13 = ClientFromCommandPort;
    *a4 = 0;
    *a5 = 0;
    if (!a6)
      return 0;
    goto LABEL_14;
  }
  if (!v24)
  {
    ClientFromCommandPort = FigSignalErrorAt();
    goto LABEL_17;
  }
  v12 = *(_QWORD *)(v24 + 96);
  v20 = *(_OWORD *)a2;
  v21 = *(_QWORD *)(a2 + 16);
  v13 = VTMultiPassStorageCopyDataAtTimeStamp(v12, &v20, a3, &theData);
  v14 = theData;
  if (v13)
    v15 = 1;
  else
    v15 = theData == 0;
  if (v15)
  {
    v16 = 0;
    LODWORD(Length) = 0;
  }
  else
  {
    Length = CFDataGetLength(theData);
    v13 = vm_allocate(*MEMORY[0x1E0C83DA0], &address, Length, 1560281089);
    v16 = (void *)address;
    v14 = theData;
    if (!v13)
    {
      BytePtr = CFDataGetBytePtr(theData);
      memcpy(v16, BytePtr, Length);
      v16 = (void *)address;
      v14 = theData;
    }
  }
  *a4 = v16;
  *a5 = Length;
  if (v14)
    CFRelease(v14);
  if (a6)
LABEL_14:
    *a6 = v13;
  return 0;
}

uint64_t VTCompressionSessionRemoteServer_TileCreate(uint64_t a1, int a2, __int128 *a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, uint64_t a9, unsigned int a10, const char *a11, _DWORD *a12, _QWORD *a13, uint64_t *a14, _DWORD *a15)
{
  __int128 v20;
  uint64_t ClientPIDFromAuditToken;
  uint64_t *v22;
  int CFPropertyListFromData;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  void *v27;
  _QWORD *v28;
  __int128 v29;
  int v30;
  const __CFAllocator *v31;
  CFStringRef v32;
  int v33;
  CFNumberRef v34;
  int v35;
  unsigned int *v36;
  CFStringRef v39;
  unsigned int v41;
  uint64_t v42;
  VTSessionRef session;
  __int128 valuePtr;
  __int128 v45;

  v20 = a3[1];
  valuePtr = *a3;
  v45 = v20;
  ClientPIDFromAuditToken = FigServer_GetClientPIDFromAuditToken();
  session = 0;
  *a12 = 0;
  *a13 = 0;
  *a14 = 0;
  v22 = (uint64_t *)MEMORY[0x1E0C9AE00];
  if (a11)
    v39 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a11, 0x8000100u);
  else
    v39 = 0;
  v42 = a7;
  v41 = a8;
  if (a8)
  {
    CFPropertyListFromData = FigCreateCFPropertyListFromData();
    if (CFPropertyListFromData)
    {
      v35 = CFPropertyListFromData;
      v27 = 0;
LABEL_26:
      v24 = a10;
      goto LABEL_28;
    }
  }
  v24 = a10;
  if (!a10 || (v25 = FigCreateCFPropertyListFromData()) == 0)
  {
    v26 = malloc_type_calloc(1uLL, 0xC8uLL, 0x10E0040B5F696F2uLL);
    v27 = v26;
    if (!v26)
    {
      v35 = FigSignalErrorAt();
      goto LABEL_28;
    }
    v28 = v26 + 10;
    v29 = a3[1];
    valuePtr = *a3;
    v45 = v29;
    v30 = VTFigAudioSessionCreate(&valuePtr, ClientPIDFromAuditToken, (uint64_t)CFSTR("VTCompressionSessionClient"), (CFTypeRef *)v26 + 10);
    if (!v30)
    {
      v31 = (const __CFAllocator *)*v22;
      v30 = VTTileCompressionSessionCreate(*v22, a5, a6, 0, 0, *v22, (uint64_t)TileCompressionOutputCallback, (uint64_t)v27, (uint64_t *)&session);
      if (!v30)
      {
        v32 = v39;
        FigProcessInfoCreateWithDetails();
        v33 = vtcss_initializeClient((uint64_t)v27, 0, session, 0, 0, a2, a4, ClientPIDFromAuditToken, 0, (uint64_t)"VTTileCompressionSession", (uint64_t)a12, a13);
        if (v33
          || *v28 && (CMNotificationCenterGetDefaultLocalCenter(), (v33 = CMNotificationCenterAddListener()) != 0))
        {
          v35 = v33;
        }
        else
        {
          LODWORD(valuePtr) = ClientPIDFromAuditToken;
          v34 = CFNumberCreate(v31, kCFNumberSInt32Type, &valuePtr);
          VTSessionSetProperty(session, CFSTR("ClientPID"), v34);
          CFRelease(v34);
          v35 = 0;
          *a14 = FigRemote_GetServerTimeoutToken();
        }
        v24 = a10;
        if (v39)
          goto LABEL_16;
        goto LABEL_17;
      }
    }
    v35 = v30;
    goto LABEL_26;
  }
  v35 = v25;
  v27 = 0;
LABEL_28:
  v32 = v39;
  if (v39)
LABEL_16:
    CFRelease(v32);
LABEL_17:
  if (session)
    CFRelease(session);
  if (v35)
    vtcss_finalizeClient(v27);
  FigMachPortReleaseSendRight_();
  v36 = (unsigned int *)MEMORY[0x1E0C83DA0];
  MEMORY[0x194029090](*MEMORY[0x1E0C83DA0], v42, v41);
  MEMORY[0x194029090](*v36, a9, v24);
  *a15 = v35;
  return 0;
}

void TileCompressionOutputCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, const void *a7)
{
  _QWORD *v12;
  uint64_t v13;
  CFTypeRef v14;

  if (!*(_BYTE *)(a1 + 176))
  {
    v12 = malloc_type_calloc(1uLL, 0x30uLL, 0x10E00405F1B3371uLL);
    if (v12)
    {
      v13 = (uint64_t)v12;
      v12[1] = a2;
      *((_DWORD *)v12 + 4) = a5;
      *((_DWORD *)v12 + 5) = a6;
      v12[3] = 0;
      if (a7)
        v14 = CFRetain(a7);
      else
        v14 = 0;
      *(_QWORD *)(v13 + 32) = v14;
      *(_QWORD *)(v13 + 40) = 0;
      vtcss_enqueueFrame(a1, v13);
    }
    else
    {
      FigSignalErrorAt();
    }
  }
}

uint64_t VTCompressionSessionRemoteServer_PrepareToEncodeTiles(uint64_t a1, int a2)
{
  BOOL v2;
  int ClientFromCommandPort;
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  _QWORD block[7];
  BOOL v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v13 = 0;
  v14 = 0;
  v2 = a2 != 0;
  v10 = 0;
  v11 = &v10;
  v12 = 0x2000000000;
  ClientFromCommandPort = vtcss_findClientFromCommandPort(a1, (uint64_t)&v14);
  if (!ClientFromCommandPort)
  {
    if (v14)
    {
      v4 = *(_QWORD *)(v14 + 16);
      v6 = *(NSObject **)(v14 + 160);
      v5 = *(NSObject **)(v14 + 168);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = __VTCompressionSessionRemoteServer_PrepareToEncodeTiles_block_invoke;
      block[3] = &unk_1E2F24A18;
      v9 = v2;
      block[4] = &v10;
      block[5] = v4;
      block[6] = v14;
      dispatch_group_async(v5, v6, block);
      goto LABEL_4;
    }
    ClientFromCommandPort = FigSignalErrorAt();
  }
  if (ClientFromCommandPort && v14)
    VTCompressionSessionRemoteCallbackClient_PrepareToEncodeTilesReturn(*(_DWORD *)(v14 + 40), *(_QWORD *)(v14 + 48), v11[3], ClientFromCommandPort);
LABEL_4:
  _Block_object_dispose(&v10, 8);
  return 0;
}

uint64_t VTCompressionSessionRemoteServer_EncodeTile(uint64_t a1, int a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, uint64_t a9)
{
  int ClientFromCommandPort;
  uint64_t v17;
  const void *v18;
  CFTypeRef v19;
  int CFPropertyListFromData;
  CFTypeRef v21;
  NSObject *v22;
  NSObject *v23;
  int v25;
  unsigned int *v26;
  _QWORD v27[13];
  int v28;
  int v29;
  unsigned int v30;
  CFTypeRef v31;
  CFTypeRef v32;
  uint64_t v33;

  v32 = 0;
  v33 = 0;
  v31 = 0;
  ClientFromCommandPort = vtcss_findClientFromCommandPort(a1, (uint64_t)&v33);
  if (ClientFromCommandPort)
    goto LABEL_18;
  if (!v33)
    goto LABEL_19;
  v17 = *(_QWORD *)(v33 + 16);
  if (!(a4 | a2))
  {
    v19 = *(CFTypeRef *)(v33 + 184);
    if (v19)
      v19 = CFRetain(v19);
    v32 = v19;
    if (v19)
      goto LABEL_8;
LABEL_19:
    v25 = FigSignalErrorAt();
    if (!v25)
      return 0;
    goto LABEL_22;
  }
  ClientFromCommandPort = FigRemote_CreatePixelBufferFromSerializedAtomData();
  if (ClientFromCommandPort)
  {
LABEL_18:
    v25 = ClientFromCommandPort;
    goto LABEL_22;
  }
  v18 = *(const void **)(v33 + 184);
  *(_QWORD *)(v33 + 184) = v32;
  if (v18)
    CFRelease(v18);
  v19 = v32;
  if (!v32)
    goto LABEL_19;
LABEL_8:
  if (!a8)
  {
    v21 = 0;
    goto LABEL_16;
  }
  CFPropertyListFromData = FigCreateCFPropertyListFromData();
  if (!CFPropertyListFromData)
  {
    v21 = v31;
    v19 = v32;
LABEL_16:
    v22 = *(NSObject **)(v33 + 160);
    v23 = *(NSObject **)(v33 + 168);
    v27[0] = MEMORY[0x1E0C809B0];
    v27[1] = 0x40000000;
    v27[2] = __VTCompressionSessionRemoteServer_EncodeTile_block_invoke;
    v27[3] = &__block_descriptor_tmp_11;
    v27[4] = v33;
    v27[5] = v17;
    v27[11] = a5;
    v27[12] = a6;
    v27[6] = v19;
    v27[7] = v21;
    v28 = a2;
    v29 = 0;
    v27[8] = a9;
    v27[9] = a3;
    v30 = a8;
    v27[10] = a7;
    dispatch_group_async(v23, v22, v27);
    return 0;
  }
  v25 = CFPropertyListFromData;
  a4 = 0;
LABEL_22:
  if (a2)
    FigMachPortReleaseSendRight_();
  v26 = (unsigned int *)MEMORY[0x1E0C83DA0];
  if (a4)
    MEMORY[0x194029090](*MEMORY[0x1E0C83DA0], a3, a4);
  if (a8)
    MEMORY[0x194029090](*v26, a7, a8);
  if (v32)
    CFRelease(v32);
  if (v31)
    CFRelease(v31);
  if (v33)
    VTCompressionSessionRemoteCallbackClient_EncodeReturn(*(_DWORD *)(v33 + 40), *(_QWORD *)(v33 + 48), 0, 0, v25);
  return 0;
}

uint64_t VTCompressionSessionRemoteServer_CompleteTiles(uint64_t a1)
{
  int ClientFromCommandPort;
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  _QWORD block[6];
  uint64_t v7;

  v7 = 0;
  ClientFromCommandPort = vtcss_findClientFromCommandPort(a1, (uint64_t)&v7);
  if (!ClientFromCommandPort)
  {
    if (v7)
    {
      v2 = *(_QWORD *)(v7 + 16);
      v4 = *(NSObject **)(v7 + 160);
      v3 = *(NSObject **)(v7 + 168);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = __VTCompressionSessionRemoteServer_CompleteTiles_block_invoke;
      block[3] = &__block_descriptor_tmp_12;
      block[4] = v7;
      block[5] = v2;
      dispatch_group_async(v3, v4, block);
      return 0;
    }
    ClientFromCommandPort = FigSignalErrorAt();
  }
  if (ClientFromCommandPort && v7)
    VTCompressionSessionRemoteCallbackClient_CompleteFramesReturn(*(_DWORD *)(v7 + 40), *(_QWORD *)(v7 + 48), ClientFromCommandPort);
  return 0;
}

uint64_t VTCompressionSessionRemoteServer_MotionEstimationCreate(uint64_t a1, int a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, const char *a9, _DWORD *a10, _QWORD *a11, uint64_t *a12, _DWORD *a13)
{
  __int128 v17;
  int ClientPIDFromAuditToken;
  uint64_t *v19;
  CFStringRef v20;
  int CFPropertyListFromData;
  void *v22;
  const __CFAllocator *v23;
  int v24;
  int v25;
  CFNumberRef v26;
  unsigned int v30;
  uint64_t v31;
  int valuePtr;
  CFTypeRef v33;
  CFTypeRef cf;
  VTSessionRef session[2];
  __int128 v36;

  v17 = a3[1];
  *(_OWORD *)session = *a3;
  v36 = v17;
  ClientPIDFromAuditToken = FigServer_GetClientPIDFromAuditToken();
  cf = 0;
  session[0] = 0;
  v33 = 0;
  *a10 = 0;
  *a11 = 0;
  *a12 = 0;
  v19 = (uint64_t *)MEMORY[0x1E0C9AE00];
  if (a9)
    v20 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a9, 0x8000100u);
  else
    v20 = 0;
  v31 = a7;
  v30 = a8;
  if (a8)
  {
    CFPropertyListFromData = FigCreateCFPropertyListFromData();
    if (CFPropertyListFromData)
    {
      v25 = CFPropertyListFromData;
      v22 = 0;
      goto LABEL_10;
    }
  }
  v22 = malloc_type_calloc(1uLL, 0xC8uLL, 0x10E0040B5F696F2uLL);
  if (!v22)
  {
    v24 = FigSignalErrorAt();
    goto LABEL_22;
  }
  v23 = (const __CFAllocator *)*v19;
  v24 = VTMotionEstimationSessionCreate(*v19, cf, a5, a6, (uint64_t *)session);
  if (v24)
  {
LABEL_22:
    v25 = v24;
    goto LABEL_10;
  }
  FigProcessInfoCreateWithDetails();
  v25 = vtcss_initializeClient((uint64_t)v22, 0, 0, 0, session[0], a2, a4, ClientPIDFromAuditToken, v33, (uint64_t)"VTMotionEstimationSession", (uint64_t)a10, a11);
  if (!v25)
  {
    valuePtr = ClientPIDFromAuditToken;
    v26 = CFNumberCreate(v23, kCFNumberSInt32Type, &valuePtr);
    VTSessionSetProperty(session[0], CFSTR("ClientPID"), v26);
    CFRelease(v26);
    *a12 = FigRemote_GetServerTimeoutToken();
  }
LABEL_10:
  if (v20)
    CFRelease(v20);
  if (session[0])
    CFRelease(session[0]);
  if (cf)
    CFRelease(cf);
  if (v33)
    CFRelease(v33);
  if (v25)
    vtcss_finalizeClient(v22);
  FigMachPortReleaseSendRight_();
  MEMORY[0x194029090](*MEMORY[0x1E0C83DA0], v31, v30);
  *a13 = v25;
  return 0;
}

uint64_t VTCompressionSessionRemoteServer_MotionEstimationCopySourcePixelBufferAttributes(uint64_t a1, _QWORD *a2, _DWORD *a3, kern_return_t *a4)
{
  kern_return_t ClientFromCommandPort;
  vm_size_t Length;
  kern_return_t v9;
  void *v10;
  const UInt8 *BytePtr;
  kern_return_t v12;
  vm_address_t v14;
  CFDataRef theData;
  CFTypeRef cf;
  uint64_t v17;

  cf = 0;
  v17 = 0;
  v14 = 0;
  theData = 0;
  *a2 = 0;
  *a3 = 0;
  ClientFromCommandPort = vtcss_findClientFromCommandPort(a1, (uint64_t)&v17);
  if (ClientFromCommandPort)
    goto LABEL_15;
  if (!v17)
  {
    ClientFromCommandPort = FigSignalErrorAt();
LABEL_15:
    v12 = ClientFromCommandPort;
    LODWORD(Length) = 0;
    goto LABEL_7;
  }
  ClientFromCommandPort = VTMotionEstimationSessionCopySourcePixelBufferAttributes(*(_QWORD **)(v17 + 24), (CFDictionaryRef *)&cf);
  if (ClientFromCommandPort)
    goto LABEL_15;
  ClientFromCommandPort = FigCreateCFDataFromCFPropertyList();
  if (ClientFromCommandPort)
    goto LABEL_15;
  Length = CFDataGetLength(theData);
  v9 = vm_allocate(*MEMORY[0x1E0C83DA0], &v14, Length, 1560281089);
  if (v9)
  {
    v12 = v9;
  }
  else
  {
    v10 = (void *)v14;
    BytePtr = CFDataGetBytePtr(theData);
    memcpy(v10, BytePtr, Length);
    v12 = 0;
  }
LABEL_7:
  if (cf)
    CFRelease(cf);
  if (theData)
    CFRelease(theData);
  *a2 = v14;
  *a3 = Length;
  if (a4)
    *a4 = v12;
  return 0;
}

uint64_t VTCompressionSessionRemoteServer_EstimateMotion(uint64_t a1, int a2, uint64_t a3, unsigned int a4, int a5, uint64_t a6, unsigned int a7)
{
  int ClientFromCommandPort;
  int v15;
  unsigned int *v16;
  uint64_t v17;
  CFTypeRef v18;
  CFTypeRef cf;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;

  v20 = 0;
  v21 = &v20;
  v22 = 0x2000000000;
  v23 = 0;
  v18 = 0;
  cf = 0;
  ClientFromCommandPort = vtcss_findClientFromCommandPort(a1, (uint64_t)&v23);
  if (ClientFromCommandPort
    || v21[3] && a4 | a2 && (ClientFromCommandPort = FigRemote_CreatePixelBufferFromSerializedAtomData()) != 0)
  {
    v15 = ClientFromCommandPort;
  }
  else
  {
    v15 = FigSignalErrorAt();
    if (!v15)
      goto LABEL_6;
  }
  if (a2)
    FigMachPortReleaseSendRight_();
  v16 = (unsigned int *)MEMORY[0x1E0C83DA0];
  if (a4)
    MEMORY[0x194029090](*MEMORY[0x1E0C83DA0], a3, a4);
  if (a5)
    FigMachPortReleaseSendRight_();
  if (a7)
    MEMORY[0x194029090](*v16, a6, a7);
  v17 = v21[3];
  if (v17)
    VTCompressionSessionRemoteCallbackClient_EncodeReturn(*(_DWORD *)(v17 + 40), *(_QWORD *)(v17 + 48), 0, 0, v15);
LABEL_6:
  _Block_object_dispose(&v20, 8);
  return 0;
}

void vtcss_enqueueFrame(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  _QWORD block[7];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 0;
  v3 = *(NSObject **)(a1 + 136);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __vtcss_enqueueFrame_block_invoke;
  block[3] = &unk_1E2F24B78;
  block[5] = a2;
  block[6] = a1;
  block[4] = &v5;
  dispatch_sync(v3, block);
  if (!*(_BYTE *)(a1 + 176))
  {
    if (*((_BYTE *)v6 + 24))
      VTCompressionSessionRemoteCallbackClient_FrameIsPending(*(_DWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
    while (*(_BYTE *)(a1 + 144) && !*(_BYTE *)(a1 + 176) && FigSemaphoreWaitRelative() == -12792)
      ;
  }
  _Block_object_dispose(&v5, 8);
}

uint64_t VTCompressionSessionRemoteServer_CompleteMotionEstimation(uint64_t a1)
{
  int ClientFromCommandPort;
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  _QWORD block[6];
  uint64_t v7;

  v7 = 0;
  ClientFromCommandPort = vtcss_findClientFromCommandPort(a1, (uint64_t)&v7);
  if (!ClientFromCommandPort)
  {
    if (v7)
    {
      v2 = *(_QWORD *)(v7 + 24);
      v4 = *(NSObject **)(v7 + 160);
      v3 = *(NSObject **)(v7 + 168);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = __VTCompressionSessionRemoteServer_CompleteMotionEstimation_block_invoke;
      block[3] = &__block_descriptor_tmp_17;
      block[4] = v7;
      block[5] = v2;
      dispatch_group_async(v3, v4, block);
      return 0;
    }
    ClientFromCommandPort = FigSignalErrorAt();
  }
  if (ClientFromCommandPort && v7)
    VTCompressionSessionRemoteCallbackClient_CompleteFramesReturn(*(_DWORD *)(v7 + 40), *(_QWORD *)(v7 + 48), ClientFromCommandPort);
  return 0;
}

uint64_t VTCompressionSessionRemoteServer_GetNextPendingNotification(uint64_t a1, _DWORD *a2, _QWORD *a3, char *a4, vm_address_t *a5, unsigned int *a6)
{
  uint64_t PendingNotification;
  const char *CStringPtrAndBufferToFree;
  unsigned int Length;
  uint64_t v12;
  void *v13;
  const UInt8 *BytePtr;
  uint64_t v16;
  void *v17;
  CFDataRef theData;
  CFTypeRef v19;
  CFTypeRef cf;

  v16 = 0;
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  vtcss_findClientFromCommandPort(a1, (uint64_t)&v16);
  if (!v16)
    return 0;
  v19 = 0;
  cf = 0;
  v17 = 0;
  theData = 0;
  PendingNotification = FigRPCFetchNextPendingNotification();
  if ((_DWORD)PendingNotification)
  {
    v12 = PendingNotification;
  }
  else
  {
    FigCreateCFDataFromCFPropertyList();
    CStringPtrAndBufferToFree = (const char *)FigCFStringGetCStringPtrAndBufferToFree();
    if (CStringPtrAndBufferToFree)
      strlcpy(a4, CStringPtrAndBufferToFree, 0x200uLL);
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    if (v19)
    {
      CFRelease(v19);
      v19 = 0;
    }
    if (theData)
    {
      Length = CFDataGetLength(theData);
      *a6 = Length;
      v12 = vm_allocate(*MEMORY[0x1E0C83DA0], a5, Length, 1560281089);
      if (!(_DWORD)v12)
      {
        v13 = (void *)*a5;
        BytePtr = CFDataGetBytePtr(theData);
        memcpy(v13, BytePtr, *a6);
      }
    }
    else
    {
      v12 = 0;
      *a5 = 0;
      *a6 = 0;
    }
  }
  free(v17);
  if (theData)
    CFRelease(theData);
  return v12;
}

void __vtcss_appStateChangeListener_block_invoke(uint64_t a1)
{
  NSObject *v1;
  NSObject *v2;
  _QWORD v3[4];
  __int128 v4;
  NSObject *v5;
  NSObject *v6;

  v2 = *(NSObject **)(a1 + 32);
  v1 = *(NSObject **)(a1 + 40);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = __vtcss_appStateChangeListener_block_invoke_2;
  v3[3] = &__block_descriptor_tmp_20;
  v4 = *(_OWORD *)(a1 + 48);
  v5 = v2;
  v6 = v1;
  dispatch_group_async(v2, v1, v3);
}

void __vtcss_appStateChangeListener_block_invoke_2(uint64_t a1)
{
  const void *v2;
  const void *v3;
  NSObject *v4;
  NSObject *v5;

  VTCompressionSessionInvalidate(*(VTCompressionSessionRef *)(a1 + 32));
  VTTileCompressionSessionInvalidate(*(_QWORD *)(a1 + 40));
  v2 = *(const void **)(a1 + 32);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    CFRelease(v3);
  v4 = *(NSObject **)(a1 + 48);
  if (v4)
    dispatch_release(v4);
  v5 = *(NSObject **)(a1 + 56);
  if (v5)
    dispatch_release(v5);
}

void __vtcss_finalizeClient_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  v1 = *(_QWORD *)(a1 + 32);
  v4 = *(uint64_t **)(v1 + 112);
  v2 = (uint64_t *)(v1 + 112);
  v3 = v4;
  if (v4)
  {
    do
    {
      v6 = *v3;
      *v2 = *v3;
      if (!v6)
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 120) = *(_QWORD *)(a1 + 32) + 112;
      FigSemaphoreSignal();
      vtcss_freeQueuedFrame(v3);
      v7 = *(_QWORD *)(a1 + 32);
      v8 = *(uint64_t **)(v7 + 112);
      v2 = (uint64_t *)(v7 + 112);
      v3 = v8;
    }
    while (v8);
  }
}

uint64_t __vtcss_dequeueFrame_block_invoke(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *(_QWORD *)(*(_QWORD *)(result + 48) + 112);
  v1 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24);
  if (v1)
  {
    v2 = result;
    v3 = *(_QWORD *)(result + 48);
    v4 = *(uint64_t **)(v3 + 112);
    if (v4 == v1)
    {
      v8 = *v1;
      *(_QWORD *)(v3 + 112) = v8;
      if (v8)
        goto LABEL_9;
      v7 = *(_QWORD *)(result + 48);
      v5 = (uint64_t *)(v7 + 112);
    }
    else
    {
      do
      {
        v5 = v4;
        v4 = (uint64_t *)*v4;
      }
      while (v4 != v1);
      v6 = *v1;
      *v5 = v6;
      if (v6)
        goto LABEL_9;
      v7 = *(_QWORD *)(result + 48);
    }
    *(_QWORD *)(v7 + 120) = v5;
LABEL_9:
    result = FigSemaphoreSignal();
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 24) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 112) != 0;
    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 24))
      *(_BYTE *)(*(_QWORD *)(v2 + 48) + 128) = 0;
  }
  return result;
}

uint64_t __vtcss_enqueueFrame_block_invoke(uint64_t result)
{
  **(_QWORD **)(result + 40) = 0;
  **(_QWORD **)(*(_QWORD *)(result + 48) + 120) = *(_QWORD *)(result + 40);
  *(_QWORD *)(*(_QWORD *)(result + 48) + 120) = *(_QWORD *)(result + 40);
  if (!*(_BYTE *)(*(_QWORD *)(result + 48) + 128))
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
    *(_BYTE *)(*(_QWORD *)(result + 48) + 128) = 1;
  }
  return result;
}

uint64_t vt_Copy_32ARGB_2vuyITU601(unint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  _BYTE *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  uint64_t v22;
  uint64_t v23;

  if (a2)
  {
    v6 = 0;
    v22 = *a5;
    v23 = *a3;
    v7 = (_BYTE *)*a6;
    if (a1 >> 1 <= 1)
      v8 = 1;
    else
      v8 = a1 >> 1;
    v9 = *a4 + 3;
    do
    {
      if (a1 >= 2)
      {
        v10 = (unsigned __int8 *)v9;
        v11 = v8;
        v12 = v7;
        do
        {
          v13 = *(v10 - 2);
          v14 = *(v10 - 1);
          v15 = *v10;
          v16 = v10[2];
          v17 = v10[3];
          v18 = v10[4];
          v19 = (8414 * v13 + 540672 + 16519 * v14 + 3208 * v15) >> 15;
          v20 = v16 + v13;
          *v12 = (8421376 - 9534 * v14 + 16767682 * v17 + 16772360 * v20 + 14392 * (v18 + v15)) >> 16;
          v12[1] = v19;
          v12[2] = (8421376 - 12051 * v14 - 2340 * v15 + 16765165 * v17 + 16774876 * v18 + 14392 * v20) >> 16;
          v12[3] = (8414 * v16 + 540672 + 16519 * v17 + 3208 * v18) >> 15;
          v12 += 4;
          v10 += 8;
          --v11;
        }
        while (v11);
      }
      v7 += v22;
      ++v6;
      v9 += v23;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_2vuyITU601(unint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  _BYTE *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  uint64_t v22;
  uint64_t v23;

  if (a2)
  {
    v6 = 0;
    v22 = *a5;
    v23 = *a3;
    v7 = (_BYTE *)*a6;
    if (a1 >> 1 <= 1)
      v8 = 1;
    else
      v8 = a1 >> 1;
    v9 = *a4 + 4;
    do
    {
      if (a1 >= 2)
      {
        v10 = (unsigned __int8 *)v9;
        v11 = v8;
        v12 = v7;
        do
        {
          v13 = *(v10 - 2);
          v14 = *(v10 - 3);
          v15 = *(v10 - 4);
          v16 = v10[2];
          v17 = v10[1];
          v18 = *v10;
          v10 += 8;
          v19 = (8414 * v13 + 540672 + 16519 * v14 + 3208 * v15) >> 15;
          v20 = v16 + v13;
          *v12 = (8421376 - 9534 * v14 + 16767682 * v17 + 16772360 * v20 + 14392 * (v18 + v15)) >> 16;
          v12[1] = v19;
          v12[2] = (8421376 - 12051 * v14 - 2340 * v15 + 16765165 * v17 + 16774876 * v18 + 14392 * v20) >> 16;
          v12[3] = (8414 * v16 + 540672 + 16519 * v17 + 3208 * v18) >> 15;
          v12 += 4;
          --v11;
        }
        while (v11);
      }
      v7 += v22;
      ++v6;
      v9 += v23;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_24RGB_2vuyITU601(unint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  _BYTE *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  _BYTE *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  uint64_t v22;
  uint64_t v23;

  if (a2)
  {
    v6 = 0;
    v22 = *a5;
    v23 = *a3;
    v7 = (_BYTE *)*a6;
    v8 = *a4;
    if (a1 >> 1 <= 1)
      v9 = 1;
    else
      v9 = a1 >> 1;
    do
    {
      if (a1 >= 2)
      {
        v10 = v9;
        v11 = v8;
        v12 = v7;
        do
        {
          v13 = *v11;
          v14 = v11[1];
          v15 = v11[2];
          v16 = v11[3];
          v17 = v11[4];
          v18 = v11[5];
          v19 = (8414 * v13 + 540672 + 16519 * v14 + 3208 * v15) >> 15;
          v20 = v16 + v13;
          *v12 = (8421376 - 9534 * v14 + 16767682 * v17 + 16772360 * v20 + 14392 * (v18 + v15)) >> 16;
          v12[1] = v19;
          v12[2] = (8421376 - 12051 * v14 - 2340 * v15 + 16765165 * v17 + 16774876 * v18 + 14392 * v20) >> 16;
          v12[3] = (8414 * v16 + 540672 + 16519 * v17 + 3208 * v18) >> 15;
          v11 += 6;
          v12 += 4;
          --v10;
        }
        while (v10);
      }
      v8 += v23;
      v7 += v22;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_8GRAYSCALE_2vuyITU601(unint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  _BYTE *v13;
  unsigned __int8 *v14;
  unsigned int v15;
  unsigned int v16;

  if (a2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v9 = a1 >> 1;
    v10 = (_BYTE *)*a6;
    v11 = *a4;
    if (a1 >> 1 <= 1)
      v9 = 1;
    do
    {
      if (a1 >= 2)
      {
        v12 = v9;
        v13 = v10;
        v14 = v11;
        do
        {
          v15 = (28141 * (*v14 ^ 0xFFu) + 540672) >> 15;
          v16 = 28141 * (v14[1] ^ 0xFF) + 540672;
          *v13 = 0x80;
          v13[1] = v15;
          v13[2] = 0x80;
          v13[3] = v16 >> 15;
          v14 += 2;
          v13 += 4;
          --v12;
        }
        while (v12);
      }
      v11 += v7;
      v10 += v8;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_32ARGB_yuvsITU601(unint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  _BYTE *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  uint64_t v22;
  uint64_t v23;

  if (a2)
  {
    v6 = 0;
    v22 = *a5;
    v23 = *a3;
    v7 = (_BYTE *)*a6;
    if (a1 >> 1 <= 1)
      v8 = 1;
    else
      v8 = a1 >> 1;
    v9 = *a4 + 3;
    do
    {
      if (a1 >= 2)
      {
        v10 = (unsigned __int8 *)v9;
        v11 = v8;
        v12 = v7;
        do
        {
          v13 = *(v10 - 2);
          v14 = *(v10 - 1);
          v15 = *v10;
          v16 = v10[2];
          v17 = v10[3];
          v18 = v10[4];
          v19 = (8414 * v13 + 540672 + 16519 * v14 + 3208 * v15) >> 15;
          v20 = v16 + v13;
          *v12 = v19;
          v12[1] = (8421376 - 9534 * v14 + 16767682 * v17 + 16772360 * v20 + 14392 * (v18 + v15)) >> 16;
          v12[2] = (8414 * v16 + 540672 + 16519 * v17 + 3208 * v18) >> 15;
          v12[3] = (8421376 - 12051 * v14 - 2340 * v15 + 16765165 * v17 + 16774876 * v18 + 14392 * v20) >> 16;
          v12 += 4;
          v10 += 8;
          --v11;
        }
        while (v11);
      }
      v7 += v22;
      ++v6;
      v9 += v23;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_yuvsITU601(unint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  _BYTE *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  uint64_t v22;
  uint64_t v23;

  if (a2)
  {
    v6 = 0;
    v22 = *a5;
    v23 = *a3;
    v7 = (_BYTE *)*a6;
    if (a1 >> 1 <= 1)
      v8 = 1;
    else
      v8 = a1 >> 1;
    v9 = *a4 + 4;
    do
    {
      if (a1 >= 2)
      {
        v10 = (unsigned __int8 *)v9;
        v11 = v8;
        v12 = v7;
        do
        {
          v13 = *(v10 - 2);
          v14 = *(v10 - 3);
          v15 = *(v10 - 4);
          v16 = v10[2];
          v17 = v10[1];
          v18 = *v10;
          v10 += 8;
          v19 = (8414 * v13 + 540672 + 16519 * v14 + 3208 * v15) >> 15;
          v20 = v16 + v13;
          *v12 = v19;
          v12[1] = (8421376 - 9534 * v14 + 16767682 * v17 + 16772360 * v20 + 14392 * (v18 + v15)) >> 16;
          v12[2] = (8414 * v16 + 540672 + 16519 * v17 + 3208 * v18) >> 15;
          v12[3] = (8421376 - 12051 * v14 - 2340 * v15 + 16765165 * v17 + 16774876 * v18 + 14392 * v20) >> 16;
          v12 += 4;
          --v11;
        }
        while (v11);
      }
      v7 += v22;
      ++v6;
      v9 += v23;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_24RGB_yuvsITU601(unint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  _BYTE *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  _BYTE *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  uint64_t v22;
  uint64_t v23;

  if (a2)
  {
    v6 = 0;
    v22 = *a5;
    v23 = *a3;
    v7 = (_BYTE *)*a6;
    v8 = *a4;
    if (a1 >> 1 <= 1)
      v9 = 1;
    else
      v9 = a1 >> 1;
    do
    {
      if (a1 >= 2)
      {
        v10 = v9;
        v11 = v8;
        v12 = v7;
        do
        {
          v13 = *v11;
          v14 = v11[1];
          v15 = v11[2];
          v16 = v11[3];
          v17 = v11[4];
          v18 = v11[5];
          v19 = (8414 * v13 + 540672 + 16519 * v14 + 3208 * v15) >> 15;
          v20 = v16 + v13;
          *v12 = v19;
          v12[1] = (8421376 - 9534 * v14 + 16767682 * v17 + 16772360 * v20 + 14392 * (v18 + v15)) >> 16;
          v12[2] = (8414 * v16 + 540672 + 16519 * v17 + 3208 * v18) >> 15;
          v12[3] = (8421376 - 12051 * v14 - 2340 * v15 + 16765165 * v17 + 16774876 * v18 + 14392 * v20) >> 16;
          v11 += 6;
          v12 += 4;
          --v10;
        }
        while (v10);
      }
      v8 += v23;
      v7 += v22;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_8GRAYSCALE_yuvsITU601(unint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  _BYTE *v13;
  unsigned __int8 *v14;
  unsigned int v15;

  if (a2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v9 = a1 >> 1;
    v10 = (_BYTE *)*a6;
    v11 = *a4;
    if (a1 >> 1 <= 1)
      v9 = 1;
    do
    {
      if (a1 >= 2)
      {
        v12 = v9;
        v13 = v10;
        v14 = v11;
        do
        {
          v15 = 28141 * (v14[1] ^ 0xFF) + 540672;
          *v13 = (28141 * (*v14 ^ 0xFFu) + 540672) >> 15;
          v13[1] = 0x80;
          v13[2] = v15 >> 15;
          v13[3] = 0x80;
          v14 += 2;
          v13 += 4;
          --v12;
        }
        while (v12);
      }
      v11 += v7;
      v10 += v8;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_32ARGB_a2vyITU601(unint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (a2)
  {
    v6 = 0;
    v26 = *a5;
    v27 = *a3;
    v7 = a5[1];
    v9 = (_BYTE *)*a6;
    v8 = (_BYTE *)a6[1];
    if (a1 >> 1 <= 1)
      v10 = 1;
    else
      v10 = a1 >> 1;
    v25 = v10;
    v11 = (_BYTE *)*a4;
    do
    {
      if (a1 >= 2)
      {
        v12 = v25;
        v13 = v8;
        v14 = v9;
        v15 = v11;
        do
        {
          *v13 = *v15;
          v13[1] = v15[4];
          v16 = v15[1];
          v17 = v15[2];
          v18 = v15[3];
          v19 = v15[5];
          v20 = v15[6];
          v21 = v15[7];
          v22 = (8414 * v16 + 540672 + 16519 * v17 + 3208 * v18) >> 15;
          v23 = v19 + v16;
          *v14 = (8421376 - 9534 * v17 + 16767682 * v20 + 16772360 * v23 + 14392 * (v21 + v18)) >> 16;
          v14[1] = v22;
          v14[2] = (8421376 - 12051 * v17 - 2340 * v18 + 16765165 * v20 + 16774876 * v21 + 14392 * v23) >> 16;
          v14[3] = (8414 * v19 + 540672 + 16519 * v20 + 3208 * v21) >> 15;
          v13 += 2;
          v15 += 8;
          v14 += 4;
          --v12;
        }
        while (v12);
      }
      v8 += v7;
      v11 += v27;
      v9 += v26;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_a2vyITU601(unint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  _BYTE *v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (a2)
  {
    v6 = 0;
    v26 = *a5;
    v27 = *a3;
    if (a1 >> 1 <= 1)
      v7 = 1;
    else
      v7 = a1 >> 1;
    v25 = a5[1];
    v8 = *a4 + 3;
    v10 = (_BYTE *)*a6;
    v9 = (_BYTE *)a6[1];
    do
    {
      if (a1 >= 2)
      {
        v12 = (_BYTE *)v8;
        v13 = v7;
        v14 = v9;
        v15 = v10;
        do
        {
          *v14 = *v12;
          v14[1] = v12[4];
          v16 = *(v12 - 1);
          v17 = *(v12 - 2);
          v18 = *(v12 - 3);
          v19 = v12[3];
          v20 = v12[2];
          v21 = v12[1];
          v22 = (8414 * v16 + 540672 + 16519 * v17 + 3208 * v18) >> 15;
          v23 = v19 + v16;
          *v15 = (8421376 - 9534 * v17 + 16767682 * v20 + 16772360 * v23 + 14392 * (v21 + v18)) >> 16;
          v15[1] = v22;
          v15[2] = (8421376 - 12051 * v17 - 2340 * v18 + 16765165 * v20 + 16774876 * v21 + 14392 * v23) >> 16;
          v15[3] = (8414 * v19 + 540672 + 16519 * v20 + 3208 * v21) >> 15;
          v15 += 4;
          v12 += 8;
          v14 += 2;
          --v13;
        }
        while (v13);
      }
      v9 += v25;
      v10 += v26;
      ++v6;
      v8 += v27;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_24RGB_a2vyITU601(unint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  _WORD *v11;
  _BYTE *v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _WORD *v27;

  if (a2)
  {
    v6 = 0;
    v25 = *a5;
    v26 = *a3;
    v7 = (_BYTE *)*a6;
    v27 = (_WORD *)a6[1];
    if (a1 >> 1 <= 1)
      v8 = 1;
    else
      v8 = a1 >> 1;
    v23 = v8;
    v24 = a5[1];
    v9 = *a4;
    do
    {
      if (a1 >= 2)
      {
        v10 = v23;
        v11 = v27;
        v12 = v7;
        v13 = v9;
        do
        {
          *v11++ = -1;
          v14 = *v13;
          v15 = v13[1];
          v16 = v13[2];
          v17 = v13[3];
          v18 = v13[4];
          v19 = v13[5];
          v20 = (8414 * v14 + 540672 + 16519 * v15 + 3208 * v16) >> 15;
          v21 = v17 + v14;
          *v12 = (8421376 - 9534 * v15 + 16767682 * v18 + 16772360 * v21 + 14392 * (v19 + v16)) >> 16;
          v12[1] = v20;
          v12[2] = (8421376 - 12051 * v15 - 2340 * v16 + 16765165 * v18 + 16774876 * v19 + 14392 * v21) >> 16;
          v12[3] = (8414 * v17 + 540672 + 16519 * v18 + 3208 * v19) >> 15;
          v13 += 6;
          v12 += 4;
          --v10;
        }
        while (v10);
      }
      v27 = (_WORD *)((char *)v27 + v24);
      v9 += v26;
      v7 += v25;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_8GRAYSCALE_a2vyITU601(unint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  unsigned int v17;
  unsigned int v18;

  if (a2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v9 = a5[1];
    v10 = a1 >> 1;
    v12 = (_BYTE *)*a6;
    v11 = a6[1];
    v13 = *a4;
    if (a1 >> 1 <= 1)
      v10 = 1;
    do
    {
      if (a1 >= 2)
      {
        v14 = 0;
        v15 = v10;
        v16 = v12;
        do
        {
          *(_WORD *)(v11 + v14) = -1;
          v17 = (28141 * (*(unsigned __int8 *)(v13 + v14) ^ 0xFFu) + 540672) >> 15;
          v18 = (28141 * (*(unsigned __int8 *)(v13 + v14 + 1) ^ 0xFFu) + 540672) >> 15;
          *v16 = 0x80;
          v16[1] = v17;
          v16[2] = 0x80;
          v16[3] = v18;
          v14 += 2;
          v16 += 4;
          --v15;
        }
        while (v15);
      }
      v11 += v9;
      v13 += v7;
      v12 += v8;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_yuvfITU601(unint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  _BYTE *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v20;
  uint64_t v21;

  if (a2)
  {
    v6 = 0;
    v20 = *a5;
    v21 = *a3;
    v7 = (_BYTE *)*a6;
    if (a1 >> 1 <= 1)
      v8 = 1;
    else
      v8 = a1 >> 1;
    v9 = *a4 + 4;
    do
    {
      if (a1 >= 2)
      {
        v10 = (unsigned __int8 *)v9;
        v11 = v8;
        v12 = v7;
        do
        {
          v13 = *(v10 - 2);
          v14 = *(v10 - 3);
          v15 = *(v10 - 4);
          v16 = v10[2];
          v17 = v10[1];
          v18 = *v10;
          v10 += 8;
          *v12 = (19235 * v14 + 9798 * v13 + 3736 * v15 + 0x4000) >> 15;
          v12[1] = (8421376 - 10854 * v14 + 16766362 * v17 + 16771688 * (v16 + v13) + ((v18 + v15) << 14)) >> 16;
          v12[2] = (19235 * v17 + 9798 * v16 + 3736 * v18 + 0x4000) >> 15;
          v12[3] = ((v13 << 14)
                                + 8421376
                                - 13719 * v14
                                - 2663 * v15
                                + (v16 << 14)
                                + 16763497 * v17
                                + 16774553 * v18) >> 16;
          v12 += 4;
          --v11;
        }
        while (v11);
      }
      v7 += v20;
      ++v6;
      v9 += v21;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_32ARGB_2vuyITU709(unint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  _BYTE *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  uint64_t v22;
  uint64_t v23;

  if (a2)
  {
    v6 = 0;
    v22 = *a5;
    v23 = *a3;
    v7 = (_BYTE *)*a6;
    if (a1 >> 1 <= 1)
      v8 = 1;
    else
      v8 = a1 >> 1;
    v9 = *a4 + 3;
    do
    {
      if (a1 >= 2)
      {
        v10 = (unsigned __int8 *)v9;
        v11 = v8;
        v12 = v7;
        do
        {
          v13 = *(v10 - 2);
          v14 = *(v10 - 1);
          v15 = *v10;
          v16 = v10[2];
          v17 = v10[3];
          v18 = v10[4];
          v19 = (5983 * v13 + 540672 + 20127 * v14 + 2032 * v15) >> 15;
          v20 = v16 + v13;
          *v12 = (8421376 - 11093 * v14 + 16766123 * v17 + 16773919 * v20 + 14392 * (v18 + v15)) >> 16;
          v12[1] = v19;
          v12[2] = (8421376 - 13072 * v14 - 1319 * v15 + 16764144 * v17 + 16775897 * v18 + 14392 * v20) >> 16;
          v12[3] = (5983 * v16 + 540672 + 20127 * v17 + 2032 * v18) >> 15;
          v12 += 4;
          v10 += 8;
          --v11;
        }
        while (v11);
      }
      v7 += v22;
      ++v6;
      v9 += v23;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_2vuyITU709(unint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  _BYTE *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  uint64_t v22;
  uint64_t v23;

  if (a2)
  {
    v6 = 0;
    v22 = *a5;
    v23 = *a3;
    v7 = (_BYTE *)*a6;
    if (a1 >> 1 <= 1)
      v8 = 1;
    else
      v8 = a1 >> 1;
    v9 = *a4 + 4;
    do
    {
      if (a1 >= 2)
      {
        v10 = (unsigned __int8 *)v9;
        v11 = v8;
        v12 = v7;
        do
        {
          v13 = *(v10 - 2);
          v14 = *(v10 - 3);
          v15 = *(v10 - 4);
          v16 = v10[2];
          v17 = v10[1];
          v18 = *v10;
          v10 += 8;
          v19 = (5983 * v13 + 540672 + 20127 * v14 + 2032 * v15) >> 15;
          v20 = v16 + v13;
          *v12 = (8421376 - 11093 * v14 + 16766123 * v17 + 16773919 * v20 + 14392 * (v18 + v15)) >> 16;
          v12[1] = v19;
          v12[2] = (8421376 - 13072 * v14 - 1319 * v15 + 16764144 * v17 + 16775897 * v18 + 14392 * v20) >> 16;
          v12[3] = (5983 * v16 + 540672 + 20127 * v17 + 2032 * v18) >> 15;
          v12 += 4;
          --v11;
        }
        while (v11);
      }
      v7 += v22;
      ++v6;
      v9 += v23;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_24RGB_2vuyITU709(unint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  _BYTE *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  _BYTE *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  uint64_t v22;
  uint64_t v23;

  if (a2)
  {
    v6 = 0;
    v22 = *a5;
    v23 = *a3;
    v7 = (_BYTE *)*a6;
    v8 = *a4;
    if (a1 >> 1 <= 1)
      v9 = 1;
    else
      v9 = a1 >> 1;
    do
    {
      if (a1 >= 2)
      {
        v10 = v9;
        v11 = v8;
        v12 = v7;
        do
        {
          v13 = *v11;
          v14 = v11[1];
          v15 = v11[2];
          v16 = v11[3];
          v17 = v11[4];
          v18 = v11[5];
          v19 = (5983 * v13 + 540672 + 20127 * v14 + 2032 * v15) >> 15;
          v20 = v16 + v13;
          *v12 = (8421376 - 11093 * v14 + 16766123 * v17 + 16773919 * v20 + 14392 * (v18 + v15)) >> 16;
          v12[1] = v19;
          v12[2] = (8421376 - 13072 * v14 - 1319 * v15 + 16764144 * v17 + 16775897 * v18 + 14392 * v20) >> 16;
          v12[3] = (5983 * v16 + 540672 + 20127 * v17 + 2032 * v18) >> 15;
          v11 += 6;
          v12 += 4;
          --v10;
        }
        while (v10);
      }
      v8 += v23;
      v7 += v22;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_8GRAYSCALE_2vuyITU709(unint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  _BYTE *v13;
  unsigned __int8 *v14;
  unsigned int v15;
  unsigned int v16;

  if (a2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v9 = a1 >> 1;
    v10 = (_BYTE *)*a6;
    v11 = *a4;
    if (a1 >> 1 <= 1)
      v9 = 1;
    do
    {
      if (a1 >= 2)
      {
        v12 = v9;
        v13 = v10;
        v14 = v11;
        do
        {
          v15 = (28142 * (*v14 ^ 0xFFu) + 540672) >> 15;
          v16 = 28142 * (v14[1] ^ 0xFF) + 540672;
          *v13 = 0x80;
          v13[1] = v15;
          v13[2] = 0x80;
          v13[3] = v16 >> 15;
          v14 += 2;
          v13 += 4;
          --v12;
        }
        while (v12);
      }
      v11 += v7;
      v10 += v8;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_32ARGB_yuvsITU709(unint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  _BYTE *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  uint64_t v22;
  uint64_t v23;

  if (a2)
  {
    v6 = 0;
    v22 = *a5;
    v23 = *a3;
    v7 = (_BYTE *)*a6;
    if (a1 >> 1 <= 1)
      v8 = 1;
    else
      v8 = a1 >> 1;
    v9 = *a4 + 3;
    do
    {
      if (a1 >= 2)
      {
        v10 = (unsigned __int8 *)v9;
        v11 = v8;
        v12 = v7;
        do
        {
          v13 = *(v10 - 2);
          v14 = *(v10 - 1);
          v15 = *v10;
          v16 = v10[2];
          v17 = v10[3];
          v18 = v10[4];
          v19 = (5983 * v13 + 540672 + 20127 * v14 + 2032 * v15) >> 15;
          v20 = v16 + v13;
          *v12 = v19;
          v12[1] = (8421376 - 11093 * v14 + 16766123 * v17 + 16773919 * v20 + 14392 * (v18 + v15)) >> 16;
          v12[2] = (5983 * v16 + 540672 + 20127 * v17 + 2032 * v18) >> 15;
          v12[3] = (8421376 - 13072 * v14 - 1319 * v15 + 16764144 * v17 + 16775897 * v18 + 14392 * v20) >> 16;
          v12 += 4;
          v10 += 8;
          --v11;
        }
        while (v11);
      }
      v7 += v22;
      ++v6;
      v9 += v23;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_yuvsITU709(unint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  _BYTE *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  uint64_t v22;
  uint64_t v23;

  if (a2)
  {
    v6 = 0;
    v22 = *a5;
    v23 = *a3;
    v7 = (_BYTE *)*a6;
    if (a1 >> 1 <= 1)
      v8 = 1;
    else
      v8 = a1 >> 1;
    v9 = *a4 + 4;
    do
    {
      if (a1 >= 2)
      {
        v10 = (unsigned __int8 *)v9;
        v11 = v8;
        v12 = v7;
        do
        {
          v13 = *(v10 - 2);
          v14 = *(v10 - 3);
          v15 = *(v10 - 4);
          v16 = v10[2];
          v17 = v10[1];
          v18 = *v10;
          v10 += 8;
          v19 = (5983 * v13 + 540672 + 20127 * v14 + 2032 * v15) >> 15;
          v20 = v16 + v13;
          *v12 = v19;
          v12[1] = (8421376 - 11093 * v14 + 16766123 * v17 + 16773919 * v20 + 14392 * (v18 + v15)) >> 16;
          v12[2] = (5983 * v16 + 540672 + 20127 * v17 + 2032 * v18) >> 15;
          v12[3] = (8421376 - 13072 * v14 - 1319 * v15 + 16764144 * v17 + 16775897 * v18 + 14392 * v20) >> 16;
          v12 += 4;
          --v11;
        }
        while (v11);
      }
      v7 += v22;
      ++v6;
      v9 += v23;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_24RGB_yuvsITU709(unint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  _BYTE *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  _BYTE *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  uint64_t v22;
  uint64_t v23;

  if (a2)
  {
    v6 = 0;
    v22 = *a5;
    v23 = *a3;
    v7 = (_BYTE *)*a6;
    v8 = *a4;
    if (a1 >> 1 <= 1)
      v9 = 1;
    else
      v9 = a1 >> 1;
    do
    {
      if (a1 >= 2)
      {
        v10 = v9;
        v11 = v8;
        v12 = v7;
        do
        {
          v13 = *v11;
          v14 = v11[1];
          v15 = v11[2];
          v16 = v11[3];
          v17 = v11[4];
          v18 = v11[5];
          v19 = (5983 * v13 + 540672 + 20127 * v14 + 2032 * v15) >> 15;
          v20 = v16 + v13;
          *v12 = v19;
          v12[1] = (8421376 - 11093 * v14 + 16766123 * v17 + 16773919 * v20 + 14392 * (v18 + v15)) >> 16;
          v12[2] = (5983 * v16 + 540672 + 20127 * v17 + 2032 * v18) >> 15;
          v12[3] = (8421376 - 13072 * v14 - 1319 * v15 + 16764144 * v17 + 16775897 * v18 + 14392 * v20) >> 16;
          v11 += 6;
          v12 += 4;
          --v10;
        }
        while (v10);
      }
      v8 += v23;
      v7 += v22;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_8GRAYSCALE_yuvsITU709(unint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  _BYTE *v13;
  unsigned __int8 *v14;
  unsigned int v15;

  if (a2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v9 = a1 >> 1;
    v10 = (_BYTE *)*a6;
    v11 = *a4;
    if (a1 >> 1 <= 1)
      v9 = 1;
    do
    {
      if (a1 >= 2)
      {
        v12 = v9;
        v13 = v10;
        v14 = v11;
        do
        {
          v15 = 28142 * (v14[1] ^ 0xFF) + 540672;
          *v13 = (28142 * (*v14 ^ 0xFFu) + 540672) >> 15;
          v13[1] = 0x80;
          v13[2] = v15 >> 15;
          v13[3] = 0x80;
          v14 += 2;
          v13 += 4;
          --v12;
        }
        while (v12);
      }
      v11 += v7;
      v10 += v8;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_32ARGB_a2vyITU709(unint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (a2)
  {
    v6 = 0;
    v26 = *a5;
    v27 = *a3;
    v7 = a5[1];
    v9 = (_BYTE *)*a6;
    v8 = (_BYTE *)a6[1];
    if (a1 >> 1 <= 1)
      v10 = 1;
    else
      v10 = a1 >> 1;
    v25 = v10;
    v11 = (_BYTE *)*a4;
    do
    {
      if (a1 >= 2)
      {
        v12 = v25;
        v13 = v8;
        v14 = v9;
        v15 = v11;
        do
        {
          *v13 = *v15;
          v13[1] = v15[4];
          v16 = v15[1];
          v17 = v15[2];
          v18 = v15[3];
          v19 = v15[5];
          v20 = v15[6];
          v21 = v15[7];
          v22 = (5983 * v16 + 540672 + 20127 * v17 + 2032 * v18) >> 15;
          v23 = v19 + v16;
          *v14 = (8421376 - 11093 * v17 + 16766123 * v20 + 16773919 * v23 + 14392 * (v21 + v18)) >> 16;
          v14[1] = v22;
          v14[2] = (8421376 - 13072 * v17 - 1319 * v18 + 16764144 * v20 + 16775897 * v21 + 14392 * v23) >> 16;
          v14[3] = (5983 * v19 + 540672 + 20127 * v20 + 2032 * v21) >> 15;
          v13 += 2;
          v15 += 8;
          v14 += 4;
          --v12;
        }
        while (v12);
      }
      v8 += v7;
      v11 += v27;
      v9 += v26;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_a2vyITU709(unint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  _BYTE *v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (a2)
  {
    v6 = 0;
    v26 = *a5;
    v27 = *a3;
    if (a1 >> 1 <= 1)
      v7 = 1;
    else
      v7 = a1 >> 1;
    v25 = a5[1];
    v8 = *a4 + 3;
    v10 = (_BYTE *)*a6;
    v9 = (_BYTE *)a6[1];
    do
    {
      if (a1 >= 2)
      {
        v12 = (_BYTE *)v8;
        v13 = v7;
        v14 = v9;
        v15 = v10;
        do
        {
          *v14 = *v12;
          v14[1] = v12[4];
          v16 = *(v12 - 1);
          v17 = *(v12 - 2);
          v18 = *(v12 - 3);
          v19 = v12[3];
          v20 = v12[2];
          v21 = v12[1];
          v22 = (5983 * v16 + 540672 + 20127 * v17 + 2032 * v18) >> 15;
          v23 = v19 + v16;
          *v15 = (8421376 - 11093 * v17 + 16766123 * v20 + 16773919 * v23 + 14392 * (v21 + v18)) >> 16;
          v15[1] = v22;
          v15[2] = (8421376 - 13072 * v17 - 1319 * v18 + 16764144 * v20 + 16775897 * v21 + 14392 * v23) >> 16;
          v15[3] = (5983 * v19 + 540672 + 20127 * v20 + 2032 * v21) >> 15;
          v15 += 4;
          v12 += 8;
          v14 += 2;
          --v13;
        }
        while (v13);
      }
      v9 += v25;
      v10 += v26;
      ++v6;
      v8 += v27;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_24RGB_a2vyITU709(unint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  _WORD *v11;
  _BYTE *v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _WORD *v27;

  if (a2)
  {
    v6 = 0;
    v25 = *a5;
    v26 = *a3;
    v7 = (_BYTE *)*a6;
    v27 = (_WORD *)a6[1];
    if (a1 >> 1 <= 1)
      v8 = 1;
    else
      v8 = a1 >> 1;
    v23 = v8;
    v24 = a5[1];
    v9 = *a4;
    do
    {
      if (a1 >= 2)
      {
        v10 = v23;
        v11 = v27;
        v12 = v7;
        v13 = v9;
        do
        {
          *v11++ = -1;
          v14 = *v13;
          v15 = v13[1];
          v16 = v13[2];
          v17 = v13[3];
          v18 = v13[4];
          v19 = v13[5];
          v20 = (5983 * v14 + 540672 + 20127 * v15 + 2032 * v16) >> 15;
          v21 = v17 + v14;
          *v12 = (8421376 - 11093 * v15 + 16766123 * v18 + 16773919 * v21 + 14392 * (v19 + v16)) >> 16;
          v12[1] = v20;
          v12[2] = (8421376 - 13072 * v15 - 1319 * v16 + 16764144 * v18 + 16775897 * v19 + 14392 * v21) >> 16;
          v12[3] = (5983 * v17 + 540672 + 20127 * v18 + 2032 * v19) >> 15;
          v13 += 6;
          v12 += 4;
          --v10;
        }
        while (v10);
      }
      v27 = (_WORD *)((char *)v27 + v24);
      v9 += v26;
      v7 += v25;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_8GRAYSCALE_a2vyITU709(unint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  unsigned int v17;
  unsigned int v18;

  if (a2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v9 = a5[1];
    v10 = a1 >> 1;
    v12 = (_BYTE *)*a6;
    v11 = a6[1];
    v13 = *a4;
    if (a1 >> 1 <= 1)
      v10 = 1;
    do
    {
      if (a1 >= 2)
      {
        v14 = 0;
        v15 = v10;
        v16 = v12;
        do
        {
          *(_WORD *)(v11 + v14) = -1;
          v17 = (28142 * (*(unsigned __int8 *)(v13 + v14) ^ 0xFFu) + 540672) >> 15;
          v18 = (28142 * (*(unsigned __int8 *)(v13 + v14 + 1) ^ 0xFFu) + 540672) >> 15;
          *v16 = 0x80;
          v16[1] = v17;
          v16[2] = 0x80;
          v16[3] = v18;
          v14 += 2;
          v16 += 4;
          --v15;
        }
        while (v15);
      }
      v11 += v9;
      v13 += v7;
      v12 += v8;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_yuvfITU709(unint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  _BYTE *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v20;
  uint64_t v21;

  if (a2)
  {
    v6 = 0;
    v20 = *a5;
    v21 = *a3;
    v7 = (_BYTE *)*a6;
    if (a1 >> 1 <= 1)
      v8 = 1;
    else
      v8 = a1 >> 1;
    v9 = *a4 + 4;
    do
    {
      if (a1 >= 2)
      {
        v10 = (unsigned __int8 *)v9;
        v11 = v8;
        v12 = v7;
        do
        {
          v13 = *(v10 - 2);
          v14 = *(v10 - 3);
          v15 = *(v10 - 4);
          v16 = v10[2];
          v17 = v10[1];
          v18 = *v10;
          v10 += 8;
          *v12 = (23436 * v14 + 6966 * v13 + 2366 * v15 + 0x4000) >> 15;
          v12[1] = (8421376 - 12629 * v14 + 16764587 * v17 + 16773463 * (v16 + v13) + ((v18 + v15) << 14)) >> 16;
          v12[2] = (23436 * v17 + 6966 * v16 + 2366 * v18 + 0x4000) >> 15;
          v12[3] = ((v13 << 14)
                                + 8421376
                                - 14881 * v14
                                - 1501 * v15
                                + (v16 << 14)
                                + 16762335 * v17
                                + 16775715 * v18) >> 16;
          v12 += 4;
          --v11;
        }
        while (v11);
      }
      v7 += v20;
      ++v6;
      v9 += v21;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_32ARGB_2vuyITU2020(unint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  _BYTE *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  uint64_t v22;
  uint64_t v23;

  if (a2)
  {
    v6 = 0;
    v22 = *a5;
    v23 = *a3;
    v7 = (_BYTE *)*a6;
    if (a1 >> 1 <= 1)
      v8 = 1;
    else
      v8 = a1 >> 1;
    v9 = *a4 + 3;
    do
    {
      if (a1 >= 2)
      {
        v10 = (unsigned __int8 *)v9;
        v11 = v8;
        v12 = v7;
        do
        {
          v13 = *(v10 - 2);
          v14 = *(v10 - 1);
          v15 = *v10;
          v16 = v10[2];
          v17 = v10[3];
          v18 = v10[4];
          v19 = (7371 * v13 + 540672 + 19024 * v14 + 1664 * v15) >> 15;
          v20 = v16 + v13;
          *v12 = (8421376 - 10342 * v14 + 16766874 * v17 + 16773210 * v20 + 14350 * (v18 + v15)) >> 16;
          v12[1] = v19;
          v12[2] = (8421376 - 13195 * v14 - 1153 * v15 + 16764021 * v17 + 16776063 * v18 + 14350 * v20) >> 16;
          v12[3] = (7371 * v16 + 540672 + 19024 * v17 + 1664 * v18) >> 15;
          v12 += 4;
          v10 += 8;
          --v11;
        }
        while (v11);
      }
      v7 += v22;
      ++v6;
      v9 += v23;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_2vuyITU2020(unint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  _BYTE *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  uint64_t v22;
  uint64_t v23;

  if (a2)
  {
    v6 = 0;
    v22 = *a5;
    v23 = *a3;
    v7 = (_BYTE *)*a6;
    if (a1 >> 1 <= 1)
      v8 = 1;
    else
      v8 = a1 >> 1;
    v9 = *a4 + 4;
    do
    {
      if (a1 >= 2)
      {
        v10 = (unsigned __int8 *)v9;
        v11 = v8;
        v12 = v7;
        do
        {
          v13 = *(v10 - 2);
          v14 = *(v10 - 3);
          v15 = *(v10 - 4);
          v16 = v10[2];
          v17 = v10[1];
          v18 = *v10;
          v10 += 8;
          v19 = (7371 * v13 + 540672 + 19024 * v14 + 1664 * v15) >> 15;
          v20 = v16 + v13;
          *v12 = (8421376 - 10342 * v14 + 16766874 * v17 + 16773210 * v20 + 14350 * (v18 + v15)) >> 16;
          v12[1] = v19;
          v12[2] = (8421376 - 13195 * v14 - 1153 * v15 + 16764021 * v17 + 16776063 * v18 + 14350 * v20) >> 16;
          v12[3] = (7371 * v16 + 540672 + 19024 * v17 + 1664 * v18) >> 15;
          v12 += 4;
          --v11;
        }
        while (v11);
      }
      v7 += v22;
      ++v6;
      v9 += v23;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_24RGB_2vuyITU2020(unint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  _BYTE *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  _BYTE *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  uint64_t v22;
  uint64_t v23;

  if (a2)
  {
    v6 = 0;
    v22 = *a5;
    v23 = *a3;
    v7 = (_BYTE *)*a6;
    v8 = *a4;
    if (a1 >> 1 <= 1)
      v9 = 1;
    else
      v9 = a1 >> 1;
    do
    {
      if (a1 >= 2)
      {
        v10 = v9;
        v11 = v8;
        v12 = v7;
        do
        {
          v13 = *v11;
          v14 = v11[1];
          v15 = v11[2];
          v16 = v11[3];
          v17 = v11[4];
          v18 = v11[5];
          v19 = (7371 * v13 + 540672 + 19024 * v14 + 1664 * v15) >> 15;
          v20 = v16 + v13;
          *v12 = (8421376 - 10342 * v14 + 16766874 * v17 + 16773210 * v20 + 14350 * (v18 + v15)) >> 16;
          v12[1] = v19;
          v12[2] = (8421376 - 13195 * v14 - 1153 * v15 + 16764021 * v17 + 16776063 * v18 + 14350 * v20) >> 16;
          v12[3] = (7371 * v16 + 540672 + 19024 * v17 + 1664 * v18) >> 15;
          v11 += 6;
          v12 += 4;
          --v10;
        }
        while (v10);
      }
      v8 += v23;
      v7 += v22;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_8GRAYSCALE_2vuyITU2020(unint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  _BYTE *v13;
  unsigned __int8 *v14;
  unsigned int v15;
  unsigned int v16;

  if (a2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v9 = a1 >> 1;
    v10 = (_BYTE *)*a6;
    v11 = *a4;
    if (a1 >> 1 <= 1)
      v9 = 1;
    do
    {
      if (a1 >= 2)
      {
        v12 = v9;
        v13 = v10;
        v14 = v11;
        do
        {
          v15 = (28059 * (*v14 ^ 0xFFu) + 540672) >> 15;
          v16 = 28059 * (v14[1] ^ 0xFF) + 540672;
          *v13 = 0x80;
          v13[1] = v15;
          v13[2] = 0x80;
          v13[3] = v16 >> 15;
          v14 += 2;
          v13 += 4;
          --v12;
        }
        while (v12);
      }
      v11 += v7;
      v10 += v8;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_32ARGB_yuvsITU2020(unint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  _BYTE *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  uint64_t v22;
  uint64_t v23;

  if (a2)
  {
    v6 = 0;
    v22 = *a5;
    v23 = *a3;
    v7 = (_BYTE *)*a6;
    if (a1 >> 1 <= 1)
      v8 = 1;
    else
      v8 = a1 >> 1;
    v9 = *a4 + 3;
    do
    {
      if (a1 >= 2)
      {
        v10 = (unsigned __int8 *)v9;
        v11 = v8;
        v12 = v7;
        do
        {
          v13 = *(v10 - 2);
          v14 = *(v10 - 1);
          v15 = *v10;
          v16 = v10[2];
          v17 = v10[3];
          v18 = v10[4];
          v19 = (7371 * v13 + 540672 + 19024 * v14 + 1664 * v15) >> 15;
          v20 = v16 + v13;
          *v12 = v19;
          v12[1] = (8421376 - 10342 * v14 + 16766874 * v17 + 16773210 * v20 + 14350 * (v18 + v15)) >> 16;
          v12[2] = (7371 * v16 + 540672 + 19024 * v17 + 1664 * v18) >> 15;
          v12[3] = (8421376 - 13195 * v14 - 1153 * v15 + 16764021 * v17 + 16776063 * v18 + 14350 * v20) >> 16;
          v12 += 4;
          v10 += 8;
          --v11;
        }
        while (v11);
      }
      v7 += v22;
      ++v6;
      v9 += v23;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_yuvsITU2020(unint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  _BYTE *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  uint64_t v22;
  uint64_t v23;

  if (a2)
  {
    v6 = 0;
    v22 = *a5;
    v23 = *a3;
    v7 = (_BYTE *)*a6;
    if (a1 >> 1 <= 1)
      v8 = 1;
    else
      v8 = a1 >> 1;
    v9 = *a4 + 4;
    do
    {
      if (a1 >= 2)
      {
        v10 = (unsigned __int8 *)v9;
        v11 = v8;
        v12 = v7;
        do
        {
          v13 = *(v10 - 2);
          v14 = *(v10 - 3);
          v15 = *(v10 - 4);
          v16 = v10[2];
          v17 = v10[1];
          v18 = *v10;
          v10 += 8;
          v19 = (7371 * v13 + 540672 + 19024 * v14 + 1664 * v15) >> 15;
          v20 = v16 + v13;
          *v12 = v19;
          v12[1] = (8421376 - 10342 * v14 + 16766874 * v17 + 16773210 * v20 + 14350 * (v18 + v15)) >> 16;
          v12[2] = (7371 * v16 + 540672 + 19024 * v17 + 1664 * v18) >> 15;
          v12[3] = (8421376 - 13195 * v14 - 1153 * v15 + 16764021 * v17 + 16776063 * v18 + 14350 * v20) >> 16;
          v12 += 4;
          --v11;
        }
        while (v11);
      }
      v7 += v22;
      ++v6;
      v9 += v23;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_24RGB_yuvsITU2020(unint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  _BYTE *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  _BYTE *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  uint64_t v22;
  uint64_t v23;

  if (a2)
  {
    v6 = 0;
    v22 = *a5;
    v23 = *a3;
    v7 = (_BYTE *)*a6;
    v8 = *a4;
    if (a1 >> 1 <= 1)
      v9 = 1;
    else
      v9 = a1 >> 1;
    do
    {
      if (a1 >= 2)
      {
        v10 = v9;
        v11 = v8;
        v12 = v7;
        do
        {
          v13 = *v11;
          v14 = v11[1];
          v15 = v11[2];
          v16 = v11[3];
          v17 = v11[4];
          v18 = v11[5];
          v19 = (7371 * v13 + 540672 + 19024 * v14 + 1664 * v15) >> 15;
          v20 = v16 + v13;
          *v12 = v19;
          v12[1] = (8421376 - 10342 * v14 + 16766874 * v17 + 16773210 * v20 + 14350 * (v18 + v15)) >> 16;
          v12[2] = (7371 * v16 + 540672 + 19024 * v17 + 1664 * v18) >> 15;
          v12[3] = (8421376 - 13195 * v14 - 1153 * v15 + 16764021 * v17 + 16776063 * v18 + 14350 * v20) >> 16;
          v11 += 6;
          v12 += 4;
          --v10;
        }
        while (v10);
      }
      v8 += v23;
      v7 += v22;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_8GRAYSCALE_yuvsITU2020(unint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  _BYTE *v13;
  unsigned __int8 *v14;
  unsigned int v15;

  if (a2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v9 = a1 >> 1;
    v10 = (_BYTE *)*a6;
    v11 = *a4;
    if (a1 >> 1 <= 1)
      v9 = 1;
    do
    {
      if (a1 >= 2)
      {
        v12 = v9;
        v13 = v10;
        v14 = v11;
        do
        {
          v15 = 28059 * (v14[1] ^ 0xFF) + 540672;
          *v13 = (28059 * (*v14 ^ 0xFFu) + 540672) >> 15;
          v13[1] = 0x80;
          v13[2] = v15 >> 15;
          v13[3] = 0x80;
          v14 += 2;
          v13 += 4;
          --v12;
        }
        while (v12);
      }
      v11 += v7;
      v10 += v8;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_32ARGB_a2vyITU2020(unint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (a2)
  {
    v6 = 0;
    v26 = *a5;
    v27 = *a3;
    v7 = a5[1];
    v9 = (_BYTE *)*a6;
    v8 = (_BYTE *)a6[1];
    if (a1 >> 1 <= 1)
      v10 = 1;
    else
      v10 = a1 >> 1;
    v25 = v10;
    v11 = (_BYTE *)*a4;
    do
    {
      if (a1 >= 2)
      {
        v12 = v25;
        v13 = v8;
        v14 = v9;
        v15 = v11;
        do
        {
          *v13 = *v15;
          v13[1] = v15[4];
          v16 = v15[1];
          v17 = v15[2];
          v18 = v15[3];
          v19 = v15[5];
          v20 = v15[6];
          v21 = v15[7];
          v22 = (7371 * v16 + 540672 + 19024 * v17 + 1664 * v18) >> 15;
          v23 = v19 + v16;
          *v14 = (8421376 - 10342 * v17 + 16766874 * v20 + 16773210 * v23 + 14350 * (v21 + v18)) >> 16;
          v14[1] = v22;
          v14[2] = (8421376 - 13195 * v17 - 1153 * v18 + 16764021 * v20 + 16776063 * v21 + 14350 * v23) >> 16;
          v14[3] = (7371 * v19 + 540672 + 19024 * v20 + 1664 * v21) >> 15;
          v13 += 2;
          v15 += 8;
          v14 += 4;
          --v12;
        }
        while (v12);
      }
      v8 += v7;
      v11 += v27;
      v9 += v26;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_a2vyITU2020(unint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  _BYTE *v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (a2)
  {
    v6 = 0;
    v26 = *a5;
    v27 = *a3;
    if (a1 >> 1 <= 1)
      v7 = 1;
    else
      v7 = a1 >> 1;
    v25 = a5[1];
    v8 = *a4 + 3;
    v10 = (_BYTE *)*a6;
    v9 = (_BYTE *)a6[1];
    do
    {
      if (a1 >= 2)
      {
        v12 = (_BYTE *)v8;
        v13 = v7;
        v14 = v9;
        v15 = v10;
        do
        {
          *v14 = *v12;
          v14[1] = v12[4];
          v16 = *(v12 - 1);
          v17 = *(v12 - 2);
          v18 = *(v12 - 3);
          v19 = v12[3];
          v20 = v12[2];
          v21 = v12[1];
          v22 = (7371 * v16 + 540672 + 19024 * v17 + 1664 * v18) >> 15;
          v23 = v19 + v16;
          *v15 = (8421376 - 10342 * v17 + 16766874 * v20 + 16773210 * v23 + 14350 * (v21 + v18)) >> 16;
          v15[1] = v22;
          v15[2] = (8421376 - 13195 * v17 - 1153 * v18 + 16764021 * v20 + 16776063 * v21 + 14350 * v23) >> 16;
          v15[3] = (7371 * v19 + 540672 + 19024 * v20 + 1664 * v21) >> 15;
          v15 += 4;
          v12 += 8;
          v14 += 2;
          --v13;
        }
        while (v13);
      }
      v9 += v25;
      v10 += v26;
      ++v6;
      v8 += v27;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_24RGB_a2vyITU2020(unint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  _WORD *v11;
  _BYTE *v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _WORD *v27;

  if (a2)
  {
    v6 = 0;
    v25 = *a5;
    v26 = *a3;
    v7 = (_BYTE *)*a6;
    v27 = (_WORD *)a6[1];
    if (a1 >> 1 <= 1)
      v8 = 1;
    else
      v8 = a1 >> 1;
    v23 = v8;
    v24 = a5[1];
    v9 = *a4;
    do
    {
      if (a1 >= 2)
      {
        v10 = v23;
        v11 = v27;
        v12 = v7;
        v13 = v9;
        do
        {
          *v11++ = -1;
          v14 = *v13;
          v15 = v13[1];
          v16 = v13[2];
          v17 = v13[3];
          v18 = v13[4];
          v19 = v13[5];
          v20 = (7371 * v14 + 540672 + 19024 * v15 + 1664 * v16) >> 15;
          v21 = v17 + v14;
          *v12 = (8421376 - 10342 * v15 + 16766874 * v18 + 16773210 * v21 + 14350 * (v19 + v16)) >> 16;
          v12[1] = v20;
          v12[2] = (8421376 - 13195 * v15 - 1153 * v16 + 16764021 * v18 + 16776063 * v19 + 14350 * v21) >> 16;
          v12[3] = (7371 * v17 + 540672 + 19024 * v18 + 1664 * v19) >> 15;
          v13 += 6;
          v12 += 4;
          --v10;
        }
        while (v10);
      }
      v27 = (_WORD *)((char *)v27 + v24);
      v9 += v26;
      v7 += v25;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_8GRAYSCALE_a2vyITU2020(unint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  unsigned int v17;
  unsigned int v18;

  if (a2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v9 = a5[1];
    v10 = a1 >> 1;
    v12 = (_BYTE *)*a6;
    v11 = a6[1];
    v13 = *a4;
    if (a1 >> 1 <= 1)
      v10 = 1;
    do
    {
      if (a1 >= 2)
      {
        v14 = 0;
        v15 = v10;
        v16 = v12;
        do
        {
          *(_WORD *)(v11 + v14) = -1;
          v17 = (28059 * (*(unsigned __int8 *)(v13 + v14) ^ 0xFFu) + 540672) >> 15;
          v18 = (28059 * (*(unsigned __int8 *)(v13 + v14 + 1) ^ 0xFFu) + 540672) >> 15;
          *v16 = 0x80;
          v16[1] = v17;
          v16[2] = 0x80;
          v16[3] = v18;
          v14 += 2;
          v16 += 4;
          --v15;
        }
        while (v15);
      }
      v11 += v9;
      v13 += v7;
      v12 += v8;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_yuvfITU2020(unint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  _BYTE *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v20;
  uint64_t v21;

  if (a2)
  {
    v6 = 0;
    v20 = *a5;
    v21 = *a3;
    v7 = (_BYTE *)*a6;
    if (a1 >> 1 <= 1)
      v8 = 1;
    else
      v8 = a1 >> 1;
    v9 = *a4 + 4;
    do
    {
      if (a1 >= 2)
      {
        v10 = (unsigned __int8 *)v9;
        v11 = v8;
        v12 = v7;
        do
        {
          v13 = *(v10 - 2);
          v14 = *(v10 - 3);
          v15 = *(v10 - 4);
          v16 = v10[2];
          v17 = v10[1];
          v18 = *v10;
          v10 += 8;
          *v12 = (22217 * v14 + 8608 * v13 + 1943 * v15 + 0x4000) >> 15;
          v12[1] = (8421376 - 11808 * v14 + 16765408 * v17 + 16772642 * (v16 + v13) + ((v18 + v15) << 14)) >> 16;
          v12[2] = (22217 * v17 + 8608 * v16 + 1943 * v18 + 0x4000) >> 15;
          v12[3] = ((v13 << 14)
                                + 8421376
                                - 15065 * v14
                                - 1317 * v15
                                + (v16 << 14)
                                + 16762151 * v17
                                + 16775899 * v18) >> 16;
          v12 += 4;
          --v11;
        }
        while (v11);
      }
      v7 += v20;
      ++v6;
      v9 += v21;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_420vf_TRC_Tone_Mat_TRC_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Tone_Mat_TRC_420vf_GCD);
  return 0;
}

_QWORD *vt_Copy_420vf_TRC_Tone_Mat_TRC_420vf_GCD(_QWORD *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  unsigned int v38;
  float v39;
  float v40;
  float v41;
  unsigned int v42;
  float v43;
  float v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  float v54;
  float v55;
  float v56;
  float v57;
  _BYTE *v58;
  _BYTE *v59;
  size_t v60;
  _BYTE *v61;
  _BYTE *v62;
  float v63;
  unsigned int v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  BOOL v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v112;
  float v113;
  float v118;
  float v119;
  float v124;
  float v125;
  float v126;
  float v131;
  float v132;
  float v133;
  float v135;
  float v136;
  float v137;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v176;
  float v177;
  float v178;
  char v179;
  float v180;
  float v181;
  char v182;
  float v183;
  float v184;
  char v185;
  float v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float v198;
  float v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  float v206;
  float v207;
  float v208;
  float v209;
  float v210;
  float v211;
  float v212;
  float v213;
  float v214;
  float v215;
  float v216;
  float v217;
  float v218;
  float v219;
  float v220;
  float v221;
  float v222;
  float v223;

  v7 = *(_QWORD *)((char *)result + 28);
  v8 = 2 * *(unsigned __int8 *)result;
  v9 = v7 * a2 / v8;
  v10 = (v7 + v7 * a2) / v8;
  if (2 * v10 != 2 * v9)
  {
    v11 = 0;
    v12 = *(_QWORD *)((char *)result + 20);
    v13 = *(_QWORD *)((char *)result + 36);
    v14 = *(_QWORD *)((char *)result + 44) + 2 * v9;
    v15 = 2 * v10 - 2 * v9;
    v16 = result[14];
    v17 = (_QWORD *)result[16];
    v18 = result[15] + 2 * (result[13] * a2 / v8);
    v19 = result[19];
    v20 = (_QWORD *)result[7];
    v21 = (uint64_t *)result[8];
    v22 = (uint64_t *)result[17];
    v23 = *v21;
    v24 = v21[1];
    v25 = v21[2];
    v26 = v20[2];
    v27 = (char *)(v26 + v25 * v14 + v13);
    v28 = *v22;
    v29 = v22[1];
    v30 = v22[2];
    v31 = v17[2];
    v32 = (char *)(v31 + v30 * v18 + v16);
    LOWORD(a5) = *(_WORD *)(v19 + 140);
    LOWORD(a6) = *(_WORD *)(v19 + 142);
    v33 = 8191.0 / (float)*(unsigned int *)(v19 + 128);
    v34 = (float)LODWORD(a5);
    v35 = (float)LODWORD(a6);
    v36 = v33 * *(float *)v19;
    v219 = v33 * *(float *)(v19 + 16);
    v220 = v33 * *(float *)(v19 + 8);
    v37 = v33 * *(float *)(v19 + 20);
    *(float *)&v38 = v33 * *(float *)(v19 + 28);
    v217 = *(float *)&v38;
    v218 = v37;
    LOWORD(v38) = *(_WORD *)(v19 + 144);
    v39 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v19 + 146);
    v40 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v19 + 148);
    v41 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v19 + 150);
    *(float *)&v42 = (float)v38;
    v223 = *(float *)&v42;
    LOWORD(v42) = *(_WORD *)(v19 + 152);
    v43 = (float)v42;
    v213 = *(float *)(v19 + 40);
    v214 = *(float *)(v19 + 36);
    v211 = *(float *)(v19 + 48) * 0.25;
    v212 = *(float *)(v19 + 44);
    v209 = *(float *)(v19 + 56) * 0.25;
    v210 = *(float *)(v19 + 52) * 0.25;
    v207 = *(float *)(v19 + 64) * 0.25;
    v208 = *(float *)(v19 + 60) * 0.25;
    v205 = *(float *)(v19 + 68) * 0.25;
    v206 = *(float *)(v19 + 72);
    v203 = *(float *)(v19 + 80);
    v204 = *(float *)(v19 + 76);
    v201 = *(float *)(v19 + 88);
    v202 = *(float *)(v19 + 84);
    v199 = *(float *)(v19 + 96);
    v200 = *(float *)(v19 + 92);
    v44 = *(float *)(v19 + 104);
    v197 = v44;
    v198 = *(float *)(v19 + 100);
    v45 = v19 + 164;
    v46 = v19 + 16548;
    v47 = *v17 + v28 * v18;
    v48 = v17[1] + v29 * (v18 / 2);
    v49 = v19 + 32932;
    v50 = (_BYTE *)(v47 + v16);
    result = (_QWORD *)(v48 + v16);
    v51 = v20[1];
    v52 = (_BYTE *)(*v20 + v23 * v14 + v13);
    v53 = v51 + v24 * (v14 / 2) + v13;
    v54 = *(float *)(v19 + 108);
    v55 = *(float *)(v19 + 112);
    v56 = *(float *)(v19 + 116);
    v57 = *(float *)(v19 + 120);
    v221 = (float)LODWORD(a6);
    v222 = (float)LODWORD(a5);
    v215 = v43;
    v216 = v40;
    v195 = v55;
    v196 = v36;
    v194 = v54;
    do
    {
      v58 = &v52[v23];
      v59 = &v50[v28];
      if (v12)
      {
        v60 = 0;
        v61 = &v52[v23];
        v62 = &v50[v28];
        do
        {
          LOBYTE(v44) = *(_BYTE *)(v53 + v60 + 1);
          v63 = (float)LODWORD(v44) - v35;
          v64 = LODWORD(v220);
          v65 = v220 * v63;
          LOBYTE(v64) = *v52;
          v66 = v36 * (float)((float)v64 - v34);
          v67 = (float)(v220 * v63) + v66;
          v68 = 8191.0;
          if (v67 <= 8191.0)
          {
            v68 = (float)(v220 * v63) + v66;
            if (v67 < 0.0)
              v68 = 0.0;
          }
          LOBYTE(v67) = *(_BYTE *)(v53 + v60);
          v69 = (float)LODWORD(v67) - v35;
          v70 = (float)(v218 * v63) + (float)(v69 * v219);
          v71 = 8191.0;
          if ((float)(v66 + v70) <= 8191.0)
          {
            v71 = v66 + v70;
            if ((float)(v66 + v70) < 0.0)
              v71 = 0.0;
          }
          v72 = v217 * v69;
          v73 = (float)(v217 * v69) + v66;
          v74 = 8191.0;
          if (v73 <= 8191.0)
          {
            v74 = v73;
            if (v73 < 0.0)
              v74 = 0.0;
          }
          LOBYTE(v73) = v52[1];
          v75 = v36 * (float)((float)LODWORD(v73) - v34);
          v76 = 8191.0;
          if ((float)(v65 + v75) <= 8191.0)
          {
            v76 = v65 + v75;
            if ((float)(v65 + v75) < 0.0)
              v76 = 0.0;
          }
          v77 = 8191.0;
          if ((float)(v70 + v75) <= 8191.0)
          {
            v77 = v70 + v75;
            if ((float)(v70 + v75) < 0.0)
              v77 = 0.0;
          }
          v78 = v72 + v75;
          v79 = 8191.0;
          if (v78 <= 8191.0)
          {
            v79 = v78;
            if (v78 < 0.0)
              v79 = 0.0;
          }
          LOBYTE(v78) = *v61;
          v80 = v36 * (float)((float)LODWORD(v78) - v34);
          v81 = 8191.0;
          if ((float)(v65 + v80) <= 8191.0)
          {
            v81 = v65 + v80;
            if ((float)(v65 + v80) < 0.0)
              v81 = 0.0;
          }
          v82 = 8191.0;
          if ((float)(v70 + v80) <= 8191.0)
          {
            v82 = v70 + v80;
            if ((float)(v70 + v80) < 0.0)
              v82 = 0.0;
          }
          v83 = v72 + v80;
          v84 = 8191.0;
          if (v83 <= 8191.0)
          {
            v84 = v83;
            if (v83 < 0.0)
              v84 = 0.0;
          }
          LOBYTE(_S22) = v61[1];
          v85 = v36 * (float)((float)LODWORD(_S22) - v34);
          v86 = v65 + v85;
          v87 = (float)(v65 + v85) <= 8191.0;
          v88 = 8191.0;
          if (v87)
          {
            v88 = v86;
            if (v86 < 0.0)
              v88 = 0.0;
          }
          v89 = v70 + v85;
          v87 = (float)(v70 + v85) <= 8191.0;
          v90 = 8191.0;
          if (v87)
          {
            v90 = v89;
            if (v89 < 0.0)
              v90 = 0.0;
          }
          v91 = v72 + v85;
          v92 = 8191.0;
          if (v91 <= 8191.0)
          {
            v92 = v91;
            if (v91 < 0.0)
              v92 = 0.0;
          }
          _H19 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v68, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          _H20 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          __asm { FCVT            S24, H20 }
          _H20 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          __asm { FCVT            S25, H20 }
          _H28 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          _H23 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          _H20 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          _H17 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          _H26 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          _H21 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          _H3 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          v112 = (float)((float)((float)(v55 * _S24) + (float)(v54 * _S19)) + (float)(v56 * _S25))
               + (float)(v57 * fmaxf(_S19, fmaxf(_S24, _S25)));
          v113 = 8191.0;
          if (v112 <= 8191.0)
          {
            v113 = v112;
            if (v112 < 0.0)
              v113 = 0.0;
          }
          __asm
          {
            FCVT            S27, H28
            FCVT            S28, H23
            FCVT            S30, H20
          }
          _H22 = *(_WORD *)(v46 + 2 * llroundf(v113));
          v118 = (float)((float)((float)(v55 * _S28) + (float)(v54 * _S27)) + (float)(v56 * _S30))
               + (float)(v57 * fmaxf(_S27, fmaxf(_S28, _S30)));
          v119 = 8191.0;
          if (v118 <= 8191.0)
          {
            v119 = v118;
            if (v118 < 0.0)
              v119 = 0.0;
          }
          __asm
          {
            FCVT            S8, H17
            FCVT            S9, H26
            FCVT            S10, H21
          }
          _H17 = *(_WORD *)(v46 + 2 * llroundf(v119));
          v124 = fmaxf(_S8, fmaxf(_S9, _S10));
          v125 = (float)((float)((float)(v55 * _S9) + (float)(v54 * _S8)) + (float)(v56 * _S10)) + (float)(v57 * v124);
          v126 = 8191.0;
          if (v125 <= 8191.0)
          {
            v126 = (float)((float)((float)(v55 * _S9) + (float)(v54 * _S8)) + (float)(v56 * _S10)) + (float)(v57 * v124);
            if (v125 < 0.0)
              v126 = 0.0;
          }
          __asm
          {
            FCVT            S26, H1
            FCVT            S29, H2
            FCVT            S31, H3
            FCVT            S1, H22
          }
          v131 = _S19 * _S1;
          v132 = _S24 * _S1;
          v133 = _S25 * _S1;
          __asm { FCVT            S1, H17 }
          v135 = _S27 * _S1;
          v136 = _S28 * _S1;
          v137 = _S30 * _S1;
          LOWORD(_S1) = *(_WORD *)(v46 + 2 * llroundf(v126));
          __asm { FCVT            S2, H1 }
          v139 = _S8 * _S2;
          v140 = _S9 * _S2;
          v141 = _S10 * _S2;
          v142 = (float)((float)((float)(v55 * _S29) + (float)(v54 * _S26)) + (float)(v56 * _S31))
               + (float)(v57 * fmaxf(_S26, fmaxf(_S29, _S31)));
          v143 = 8191.0;
          if (v142 <= 8191.0)
          {
            v143 = v142;
            if (v142 < 0.0)
              v143 = 0.0;
          }
          _H24 = *(_WORD *)(v46 + 2 * llroundf(v143));
          __asm { FCVT            S24, H24 }
          v146 = _S26 * _S24;
          v147 = _S29 * _S24;
          v148 = _S31 * _S24;
          v149 = (float)((float)(v204 * v132) + (float)(v131 * v206)) + (float)(v133 * v203);
          v150 = (float)((float)(v201 * v132) + (float)(v131 * v202)) + (float)(v133 * v200);
          _S20 = (float)((float)(v198 * v132) + (float)(v131 * v199)) + (float)(v133 * v197);
          _S22 = (float)((float)(v204 * v136) + (float)(v135 * v206)) + (float)(v137 * v203);
          _S23 = (float)((float)(v201 * v136) + (float)(v135 * v202)) + (float)(v137 * v200);
          _S19 = (float)((float)(v198 * v136) + (float)(v135 * v199)) + (float)(v137 * v197);
          v155 = (float)((float)(v204 * v140) + (float)(v139 * v206)) + (float)(v141 * v203);
          v156 = (float)((float)(v201 * v140) + (float)(v139 * v202)) + (float)(v141 * v200);
          v157 = (float)((float)(v198 * v140) + (float)(v139 * v199)) + (float)(v141 * v197);
          v158 = (float)((float)(v204 * v147) + (float)(v146 * v206)) + (float)(v148 * v203);
          v159 = (float)((float)(v201 * v147) + (float)(v146 * v202)) + (float)(v148 * v200);
          _S26 = (float)((float)(v198 * v147) + (float)(v146 * v199)) + (float)(v148 * v197);
          _H1 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v149, 0.0), 8191.0)));
          __asm { FCVT            S3, H1 }
          _H1 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v150, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          _H2 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(_S20, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H17 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(_S22, 0.0), 8191.0)));
          __asm { FCVT            S17, H17 }
          LOWORD(_S20) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(_S23, 0.0), 8191.0)));
          LOWORD(_S19) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0)));
          __asm
          {
            FCVT            S21, H20
            FCVT            S19, H19
          }
          LOWORD(_S20) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v155, 0.0), 8191.0)));
          __asm { FCVT            S20, H20 }
          LOWORD(_S22) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v156, 0.0), 8191.0)));
          __asm { FCVT            S24, H22 }
          LOWORD(_S22) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v157, 0.0), 8191.0)));
          __asm { FCVT            S25, H22 }
          LOWORD(_S22) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v158, 0.0), 8191.0)));
          __asm { FCVT            S22, H22 }
          LOWORD(_S23) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v159, 0.0), 8191.0)));
          LOWORD(_S26) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(_S26, 0.0), 8191.0)));
          __asm
          {
            FCVT            S23, H23
            FCVT            S26, H26
          }
          v176 = (float)((float)((float)(v213 * _S1) + (float)(v214 * _S3)) + (float)(v212 * _S2)) + v39;
          if (v176 < v39)
            v177 = v39;
          else
            v177 = (float)((float)((float)(v213 * _S1) + (float)(v214 * _S3)) + (float)(v212 * _S2)) + v39;
          v87 = v176 <= v41;
          v178 = (float)((float)((float)(v213 * _S21) + (float)(v214 * _S17)) + (float)(v212 * _S19)) + v39;
          if (!v87)
            v177 = v41;
          v179 = llroundf(v177);
          if (v178 < v39)
            v180 = v39;
          else
            v180 = (float)((float)((float)(v213 * _S21) + (float)(v214 * _S17)) + (float)(v212 * _S19)) + v39;
          v87 = v178 <= v41;
          v181 = (float)((float)((float)(v213 * _S24) + (float)(v214 * _S20)) + (float)(v212 * _S25)) + v39;
          if (!v87)
            v180 = v41;
          v182 = llroundf(v180);
          if (v181 < v39)
            v183 = v39;
          else
            v183 = (float)((float)((float)(v213 * _S24) + (float)(v214 * _S20)) + (float)(v212 * _S25)) + v39;
          v87 = v181 <= v41;
          v184 = (float)((float)((float)(v213 * _S23) + (float)(v214 * _S22)) + (float)(v212 * _S26)) + v39;
          if (!v87)
            v183 = v41;
          v185 = llroundf(v183);
          if (v184 < v39)
            v186 = v39;
          else
            v186 = (float)((float)((float)(v213 * _S23) + (float)(v214 * _S22)) + (float)(v212 * _S26)) + v39;
          if (v184 <= v41)
            v187 = v186;
          else
            v187 = v41;
          v188 = (float)((float)(_S3 + _S17) + _S20) + _S22;
          v189 = (float)((float)(_S1 + _S21) + _S24) + _S23;
          *v50 = v179;
          v50[1] = v182;
          *v62 = v185;
          v62[1] = llroundf(v187);
          v190 = (float)((float)(_S2 + _S19) + _S25) + _S26;
          v191 = (float)((float)(v216 + (float)(v188 * v211)) + (float)(v189 * v210)) + (float)(v190 * v209);
          v192 = v215;
          if (v191 <= v215)
          {
            v192 = (float)((float)(v216 + (float)(v188 * v211)) + (float)(v189 * v210)) + (float)(v190 * v209);
            if (v191 < v223)
              v192 = v223;
          }
          v193 = (float)((float)(v216 + (float)(v188 * v208)) + (float)(v189 * v207)) + (float)(v190 * v205);
          *((_BYTE *)result + v60) = llroundf(v192);
          v44 = v215;
          v34 = v222;
          v36 = v196;
          if (v193 <= v215)
          {
            v44 = v193;
            if (v193 < v223)
              v44 = v223;
          }
          v52 += 2;
          v61 += 2;
          v50 += 2;
          v62 += 2;
          *((_BYTE *)result + v60 + 1) = llroundf(v44);
          v60 += 2;
          v35 = v221;
          v54 = v194;
          v55 = v195;
        }
        while (v12 > v60);
      }
      v52 = &v58[v23];
      v53 += v24;
      v50 = &v59[v28];
      result = (_QWORD *)((char *)result + v29);
      v11 += 2;
    }
    while (v15 > v11);
    if (v26 && v31)
    {
      do
      {
        result = memcpy(v32, v27, v12);
        v27 += v25;
        v32 += v30;
        --v15;
      }
      while (v15);
    }
    else if (v31)
    {
      do
      {
        if (v12)
          result = memset(v32, 255, v12);
        v32 += v30;
        --v15;
      }
      while (v15);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Mat_TRC_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Mat_TRC_420vf_GCD);
  return 0;
}

_QWORD *vt_Copy_420vf_TRC_Mat_TRC_420vf_GCD(_QWORD *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  unsigned int v37;
  float v38;
  float v39;
  float v40;
  unsigned int v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE *v60;
  uint64_t v61;
  _BYTE *v62;
  _BYTE *v63;
  size_t v64;
  _BYTE *v65;
  _BYTE *v66;
  float v67;
  unsigned int v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  unsigned int v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  BOOL v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  unsigned int v120;
  float v132;
  float v133;
  float v138;
  float v141;
  float v142;
  float v143;
  float v156;
  float v157;
  float v158;
  char v159;
  float v160;
  float v161;
  char v162;
  float v163;
  float v164;
  char v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float v182;
  float v183;
  float v184;
  float v185;
  float v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;

  v6 = *(_QWORD *)((char *)result + 28);
  v7 = 2 * *(unsigned __int8 *)result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (2 * v9 != 2 * v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)((char *)result + 20);
    v12 = *(_QWORD *)((char *)result + 36);
    v13 = *(_QWORD *)((char *)result + 44) + 2 * v8;
    v14 = 2 * v9 - 2 * v8;
    v15 = result[14];
    v16 = (_QWORD *)result[16];
    v17 = result[15] + 2 * (result[13] * a2 / v7);
    v18 = result[19];
    v19 = (_QWORD *)result[7];
    v20 = (uint64_t *)result[8];
    v21 = (uint64_t *)result[17];
    v22 = *v20;
    v23 = v20[1];
    v24 = v20[2];
    v25 = v19[2];
    v26 = (char *)(v25 + v24 * v13 + v12);
    v27 = *v21;
    v28 = v21[1];
    v29 = v21[2];
    v30 = v16[2];
    v31 = (char *)(v30 + v29 * v17 + v15);
    LOWORD(a5) = *(_WORD *)(v18 + 140);
    LOWORD(a6) = *(_WORD *)(v18 + 142);
    v32 = 8191.0 / (float)*(unsigned int *)(v18 + 128);
    v33 = (float)LODWORD(a5);
    v34 = (float)LODWORD(a6);
    v35 = v32 * *(float *)v18;
    v188 = v32 * *(float *)(v18 + 16);
    v189 = v32 * *(float *)(v18 + 8);
    v36 = v32 * *(float *)(v18 + 20);
    *(float *)&v37 = v32 * *(float *)(v18 + 28);
    v186 = *(float *)&v37;
    v187 = v36;
    LOWORD(v37) = *(_WORD *)(v18 + 144);
    v38 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v18 + 146);
    v39 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v18 + 148);
    v40 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v18 + 150);
    *(float *)&v41 = (float)v37;
    v191 = *(float *)&v41;
    LOWORD(v41) = *(_WORD *)(v18 + 152);
    v42 = (float)v41;
    v182 = *(float *)(v18 + 40);
    v183 = *(float *)(v18 + 36);
    v180 = *(float *)(v18 + 48) * 0.25;
    v181 = *(float *)(v18 + 44);
    v178 = *(float *)(v18 + 56) * 0.25;
    v179 = *(float *)(v18 + 52) * 0.25;
    v176 = *(float *)(v18 + 64) * 0.25;
    v177 = *(float *)(v18 + 60) * 0.25;
    v43 = *(float *)(v18 + 72);
    v44 = *(float *)(v18 + 68) * 0.25;
    v175 = v44;
    v46 = *(float *)(v18 + 76);
    v45 = *(float *)(v18 + 80);
    v47 = *(float *)(v18 + 84);
    v48 = *(float *)(v18 + 88);
    v49 = *(float *)(v18 + 92);
    v50 = *(float *)(v18 + 96);
    v51 = *(float *)(v18 + 100);
    v52 = *(float *)(v18 + 104);
    v53 = v18 + 164;
    v54 = v18 + 16548;
    v55 = v16[1];
    v56 = (_BYTE *)(*v16 + v27 * v17 + v15);
    if (v17 >= 0)
      v57 = v17;
    else
      v57 = v17 + 1;
    v58 = v55 + v28 * (v57 >> 1);
    v59 = v19[1];
    v60 = (_BYTE *)(*v19 + v22 * v13 + v12);
    result = (_QWORD *)(v58 + v15);
    v61 = v59 + v23 * (v13 / 2) + v12;
    v190 = v35;
    v184 = v42;
    v185 = v39;
    do
    {
      v62 = &v60[v22];
      v63 = &v56[v27];
      if (v11)
      {
        v64 = 0;
        v65 = &v60[v22];
        v66 = &v56[v27];
        do
        {
          LOBYTE(v44) = *(_BYTE *)(v61 + v64 + 1);
          v67 = (float)LODWORD(v44) - v34;
          v68 = LODWORD(v189);
          v69 = v189 * v67;
          LOBYTE(v68) = *v60;
          v70 = (float)v68 - v33;
          v71 = v35 * v70;
          v72 = (float)(v189 * v67) + (float)(v35 * v70);
          v73 = 8191.0;
          if (v72 <= 8191.0)
          {
            v73 = (float)(v189 * v67) + (float)(v35 * v70);
            if (v72 < 0.0)
              v73 = 0.0;
          }
          LOBYTE(v70) = *(_BYTE *)(v61 + v64);
          v74 = (float)LODWORD(v70) - v34;
          v75 = (float)(v187 * v67) + (float)(v74 * v188);
          v76 = 8191.0;
          if ((float)(v71 + v75) <= 8191.0)
          {
            v76 = v71 + v75;
            if ((float)(v71 + v75) < 0.0)
              v76 = 0.0;
          }
          v77 = LODWORD(v186);
          v78 = v186 * v74;
          v79 = (float)(v186 * v74) + v71;
          v80 = 8191.0;
          if (v79 <= 8191.0)
          {
            v80 = v79;
            if (v79 < 0.0)
              v80 = 0.0;
          }
          LOBYTE(v77) = v60[1];
          v81 = (float)v77 - v33;
          v82 = v35 * v81;
          v83 = v69 + (float)(v35 * v81);
          v84 = 8191.0;
          if (v83 <= 8191.0)
          {
            v84 = v69 + (float)(v35 * v81);
            if (v83 < 0.0)
              v84 = 0.0;
          }
          v85 = v75 + v82;
          v86 = 8191.0;
          if ((float)(v75 + v82) <= 8191.0)
          {
            v86 = v75 + v82;
            if (v85 < 0.0)
              v86 = 0.0;
          }
          v87 = v78 + v82;
          v88 = 8191.0;
          if (v87 <= 8191.0)
          {
            v88 = v87;
            if (v87 < 0.0)
              v88 = 0.0;
          }
          LOBYTE(v81) = *v65;
          v89 = v35 * (float)((float)LODWORD(v81) - v33);
          v90 = 8191.0;
          if ((float)(v69 + v89) <= 8191.0)
          {
            v90 = v69 + v89;
            if ((float)(v69 + v89) < 0.0)
              v90 = 0.0;
          }
          v91 = 8191.0;
          if ((float)(v75 + v89) <= 8191.0)
          {
            v91 = v75 + v89;
            if ((float)(v75 + v89) < 0.0)
              v91 = 0.0;
          }
          v92 = v78 + v89;
          v93 = (float)(v78 + v89) <= 8191.0;
          v94 = 8191.0;
          if (v93)
          {
            v94 = v92;
            if (v92 < 0.0)
              v94 = 0.0;
          }
          LOBYTE(v85) = v65[1];
          v95 = v35 * (float)((float)LODWORD(v85) - v33);
          v96 = v69 + v95;
          v93 = (float)(v69 + v95) <= 8191.0;
          v97 = 8191.0;
          if (v93)
          {
            v97 = v96;
            if (v96 < 0.0)
              v97 = 0.0;
          }
          v98 = v75 + v95;
          v93 = (float)(v75 + v95) <= 8191.0;
          v99 = 8191.0;
          if (v93)
          {
            v99 = v98;
            if (v98 < 0.0)
              v99 = 0.0;
          }
          v100 = v34;
          v101 = v78 + v95;
          v102 = 8191.0;
          if (v101 <= 8191.0)
          {
            v102 = v101;
            if (v101 < 0.0)
              v102 = 0.0;
          }
          _H4 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H5 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H6 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H17 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm { FCVT            S17, H17 }
          _H19 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          _H24 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          __asm
          {
            FCVT            S19, H19
            FCVT            S24, H24
          }
          _H27 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          v120 = llroundf(fminf(fmaxf(v91, 0.0), 8191.0));
          __asm { FCVT            S1, H27 }
          _H27 = *(_WORD *)(v53 + 2 * v120);
          __asm { FCVT            S27, H27 }
          _H2 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H7 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v97, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          _H25 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v99, 0.0), 8191.0)));
          _H26 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v102, 0.0), 8191.0)));
          __asm
          {
            FCVT            S25, H25
            FCVT            S26, H26
          }
          v132 = (float)((float)(v46 * _S5) + (float)(_S4 * v43)) + (float)(_S6 * v45);
          v133 = (float)((float)(v48 * _S5) + (float)(_S4 * v47)) + (float)(_S6 * v49);
          _S4 = (float)((float)(v51 * _S5) + (float)(_S4 * v50)) + (float)(_S6 * v52);
          _S6 = (float)((float)(v46 * _S19) + (float)(_S17 * v43)) + (float)(_S24 * v45);
          _S3 = (float)((float)(v48 * _S19) + (float)(_S17 * v47)) + (float)(_S24 * v49);
          _S17 = (float)((float)(v51 * _S19) + (float)(_S17 * v50)) + (float)(_S24 * v52);
          v138 = (float)((float)(v46 * _S27) + (float)(_S1 * v43)) + (float)(_S2 * v45);
          _S21 = (float)((float)(v48 * _S27) + (float)(_S1 * v47)) + (float)(_S2 * v49);
          _S1 = (float)((float)(v51 * _S27) + (float)(_S1 * v50)) + (float)(_S2 * v52);
          v141 = (float)((float)(v46 * _S25) + (float)(_S7 * v43)) + (float)(_S26 * v45);
          v142 = (float)((float)(v48 * _S25) + (float)(_S7 * v47)) + (float)(_S26 * v49);
          v143 = (float)((float)(v51 * _S25) + (float)(_S7 * v50)) + (float)(_S26 * v52);
          LOWORD(_S2) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v132, 0.0), 8191.0)));
          __asm { FCVT            S5, H2 }
          LOWORD(_S2) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v133, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          LOWORD(_S4) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(_S4, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          LOWORD(_S6) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          LOWORD(_S3) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          LOWORD(_S7) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(_S17, 0.0), 8191.0)));
          __asm
          {
            FCVT            S19, H3
            FCVT            S7, H7
          }
          LOWORD(_S3) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v138, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          LOWORD(_S17) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(_S21, 0.0), 8191.0)));
          __asm { FCVT            S24, H17 }
          LOWORD(_S1) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          __asm { FCVT            S25, H1 }
          LOWORD(_S1) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v141, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          LOWORD(_S17) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v142, 0.0), 8191.0)));
          LOWORD(_S21) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v143, 0.0), 8191.0)));
          __asm
          {
            FCVT            S17, H17
            FCVT            S21, H21
          }
          v156 = (float)((float)((float)(v182 * _S2) + (float)(v183 * _S5)) + (float)(v181 * _S4)) + v38;
          if (v156 < v38)
            v157 = v38;
          else
            v157 = (float)((float)((float)(v182 * _S2) + (float)(v183 * _S5)) + (float)(v181 * _S4)) + v38;
          v93 = v156 <= v40;
          v158 = (float)((float)((float)(v182 * _S19) + (float)(v183 * _S6)) + (float)(v181 * _S7)) + v38;
          if (!v93)
            v157 = v40;
          v159 = llroundf(v157);
          if (v158 < v38)
            v160 = v38;
          else
            v160 = (float)((float)((float)(v182 * _S19) + (float)(v183 * _S6)) + (float)(v181 * _S7)) + v38;
          v93 = v158 <= v40;
          v161 = (float)((float)((float)(v182 * _S24) + (float)(v183 * _S3)) + (float)(v181 * _S25)) + v38;
          if (!v93)
            v160 = v40;
          v162 = llroundf(v160);
          if (v161 < v38)
            v163 = v38;
          else
            v163 = (float)((float)((float)(v182 * _S24) + (float)(v183 * _S3)) + (float)(v181 * _S25)) + v38;
          v93 = v161 <= v40;
          v164 = (float)((float)((float)(v182 * _S17) + (float)(v183 * _S1)) + (float)(v181 * _S21)) + v38;
          if (!v93)
            v163 = v40;
          v165 = llroundf(v163);
          if (v164 < v38)
            v166 = v38;
          else
            v166 = (float)((float)((float)(v182 * _S17) + (float)(v183 * _S1)) + (float)(v181 * _S21)) + v38;
          if (v164 <= v40)
            v167 = v166;
          else
            v167 = v40;
          v168 = (float)((float)(_S5 + _S6) + _S3) + _S1;
          v169 = (float)((float)(_S2 + _S19) + _S24) + _S17;
          *v56 = v159;
          v56[1] = v162;
          *v66 = v165;
          v66[1] = llroundf(v167);
          v170 = (float)((float)(_S4 + _S7) + _S25) + _S21;
          v171 = (float)((float)(v185 + (float)(v168 * v180)) + (float)(v169 * v179)) + (float)(v170 * v178);
          v172 = v184;
          if (v171 <= v184)
          {
            v172 = (float)((float)(v185 + (float)(v168 * v180)) + (float)(v169 * v179)) + (float)(v170 * v178);
            if (v171 < v191)
              v172 = v191;
          }
          v44 = (float)(v185 + (float)(v168 * v177)) + (float)(v169 * v176);
          v173 = v44 + (float)(v170 * v175);
          *((_BYTE *)result + v64) = llroundf(v172);
          v174 = v184;
          v34 = v100;
          if (v173 <= v184)
          {
            v44 = v191;
            v174 = v173;
            if (v173 < v191)
              v174 = v191;
          }
          v60 += 2;
          v65 += 2;
          v56 += 2;
          v66 += 2;
          *((_BYTE *)result + v64 + 1) = llroundf(v174);
          v64 += 2;
          v35 = v190;
        }
        while (v11 > v64);
      }
      v60 = &v62[v22];
      v61 += v23;
      v56 = &v63[v27];
      result = (_QWORD *)((char *)result + v28);
      v10 += 2;
    }
    while (v14 > v10);
    if (v25 && v30)
    {
      do
      {
        result = memcpy(v31, v26, v11);
        v26 += v24;
        v31 += v29;
        --v14;
      }
      while (v14);
    }
    else if (v30)
    {
      do
      {
        if (v11)
          result = memset(v31, 255, v11);
        v31 += v29;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_rgb_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_rgb_420vf_GCD);
  return 0;
}

_QWORD *vt_Copy_420vf_rgb_420vf_GCD(_QWORD *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  float v6;
  float v7;
  float v8;
  float v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  float v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE *v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE *v70;
  _BYTE *v71;
  size_t v72;
  _BYTE *v73;
  _BYTE *v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  BOOL v96;
  float v97;
  char v98;
  float v99;
  float v100;
  char v101;
  float v102;
  float v103;
  char v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;

  v15 = *(_QWORD *)((char *)result + 28);
  v16 = 2 * *(unsigned __int8 *)result;
  v17 = v15 * a2 / v16;
  v18 = (v15 + v15 * a2) / v16;
  if (2 * v18 != 2 * v17)
  {
    v19 = 0;
    v20 = *(_QWORD *)((char *)result + 20);
    v21 = *(_QWORD *)((char *)result + 36);
    v22 = *(_QWORD *)((char *)result + 44) + 2 * v17;
    v23 = 2 * v18 - 2 * v17;
    v24 = result[14];
    v25 = (_QWORD *)result[16];
    v26 = result[15] + 2 * (result[13] * a2 / v16);
    v27 = result[19];
    v29 = (_QWORD *)result[7];
    v28 = (uint64_t *)result[8];
    v30 = (uint64_t *)result[17];
    v31 = *v28;
    v32 = v28[1];
    v33 = v28[2];
    v34 = v29[2];
    v35 = (char *)(v34 + v33 * v22 + v21);
    v36 = *v30;
    v37 = v30[1];
    v38 = v30[2];
    v39 = v25[2];
    v40 = (char *)(v39 + v38 * v26 + v24);
    LOWORD(a5) = *(_WORD *)(v27 + 140);
    LOWORD(a6) = *(_WORD *)(v27 + 142);
    v41 = (float)*(unsigned int *)(v27 + 136) / (float)*(unsigned int *)(v27 + 128);
    v42 = (float)LODWORD(a5);
    v43 = (float)LODWORD(a6);
    v44 = v41 * *(float *)v27;
    v112 = v41 * *(float *)(v27 + 16);
    v113 = v41 * *(float *)(v27 + 8);
    v111 = v41 * *(float *)(v27 + 20);
    v45 = *(float *)(v27 + 28);
    v46 = v41 * v45;
    LOWORD(v45) = *(_WORD *)(v27 + 144);
    v47 = (float)LODWORD(v45);
    LOWORD(v10) = *(_WORD *)(v27 + 146);
    v48 = (float)v10;
    LOWORD(v11) = *(_WORD *)(v27 + 148);
    v49 = (float)v11;
    LOWORD(v12) = *(_WORD *)(v27 + 150);
    v50 = (float)v12;
    LOWORD(v13) = *(_WORD *)(v27 + 152);
    v51 = (float)v13;
    v52 = *(float *)(v27 + 36);
    v53 = *(float *)(v27 + 40);
    v54 = *(float *)(v27 + 44);
    v55 = *(float *)(v27 + 48) * 0.25;
    v56 = *(float *)(v27 + 52) * 0.25;
    v57 = *(float *)(v27 + 56) * 0.25;
    v58 = *(float *)(v27 + 60) * 0.25;
    v59 = *(float *)(v27 + 64) * 0.25;
    v60 = *(float *)(v27 + 68);
    v61 = v60 * 0.25;
    v62 = v25[1];
    v63 = (_BYTE *)(*v25 + v36 * v26 + v24);
    if (v26 >= 0)
      v64 = v26;
    else
      v64 = v26 + 1;
    v65 = v62 + v37 * (v64 >> 1);
    v66 = v29[1];
    v67 = (_BYTE *)(*v29 + v31 * v22 + v21);
    v68 = v65 + v24;
    if (v22 >= 0)
      v69 = v22;
    else
      v69 = v22 + 1;
    result = (_QWORD *)(v66 + v32 * (v69 >> 1) + v21);
    do
    {
      v70 = &v67[v31];
      v71 = &v63[v36];
      if (v20)
      {
        v72 = 0;
        v73 = &v67[v31];
        v74 = &v63[v36];
        do
        {
          LOBYTE(v60) = *((_BYTE *)result + v72);
          v75 = (float)LODWORD(v60) - v43;
          LOBYTE(v14) = *((_BYTE *)result + v72 + 1);
          v76 = (float)LODWORD(v14) - v43;
          v77 = v113 * v76;
          v78 = (float)(v111 * v76) + (float)(v75 * v112);
          v79 = v46 * v75;
          LOBYTE(v6) = *v67;
          v80 = v44 * (float)((float)LODWORD(v6) - v42);
          LOBYTE(v7) = v67[1];
          v81 = v44 * (float)((float)LODWORD(v7) - v42);
          LOBYTE(v8) = *v73;
          v82 = v44 * (float)((float)LODWORD(v8) - v42);
          LOBYTE(v9) = v73[1];
          v83 = v44 * (float)((float)LODWORD(v9) - v42);
          v84 = v77 + v80;
          v85 = v80 + v78;
          v86 = v79 + v80;
          v87 = v77 + v81;
          v88 = v78 + v81;
          v89 = v79 + v81;
          v90 = v77 + v82;
          v91 = v78 + v82;
          v8 = v79 + v82;
          v92 = v77 + v83;
          v93 = v78 + v83;
          v9 = v79 + v83;
          v94 = (float)((float)((float)(v53 * v85) + (float)(v52 * v84)) + (float)(v54 * v86)) + v47;
          if (v94 < v47)
            v95 = v47;
          else
            v95 = (float)((float)((float)(v53 * v85) + (float)(v52 * v84)) + (float)(v54 * v86)) + v47;
          v96 = v94 <= v49;
          v97 = (float)((float)((float)(v53 * v88) + (float)(v52 * v87)) + (float)(v54 * v89)) + v47;
          if (!v96)
            v95 = v49;
          v98 = llroundf(v95);
          if (v97 < v47)
            v99 = v47;
          else
            v99 = (float)((float)((float)(v53 * v88) + (float)(v52 * v87)) + (float)(v54 * v89)) + v47;
          v96 = v97 <= v49;
          v100 = (float)((float)((float)(v53 * v91) + (float)(v52 * v90)) + (float)(v54 * v8)) + v47;
          if (!v96)
            v99 = v49;
          v101 = llroundf(v99);
          if (v100 < v47)
            v102 = v47;
          else
            v102 = (float)((float)((float)(v53 * v91) + (float)(v52 * v90)) + (float)(v54 * v8)) + v47;
          v96 = v100 <= v49;
          v103 = (float)((float)((float)(v53 * v93) + (float)(v52 * v92)) + (float)(v54 * v9)) + v47;
          if (!v96)
            v102 = v49;
          v104 = llroundf(v102);
          if (v103 < v47)
            v105 = v47;
          else
            v105 = (float)((float)((float)(v53 * v93) + (float)(v52 * v92)) + (float)(v54 * v9)) + v47;
          if (v103 > v49)
            v105 = v49;
          v106 = (float)((float)(v84 + v87) + v90) + v92;
          v107 = (float)((float)(v85 + v88) + v91) + v93;
          *v63 = v98;
          v63[1] = v101;
          *v74 = v104;
          v74[1] = llroundf(v105);
          v108 = (float)(v48 + (float)(v106 * v55)) + (float)(v107 * v56);
          v109 = (float)((float)(v86 + v89) + v8) + v9;
          v7 = v108 + (float)(v109 * v57);
          v6 = v51;
          if (v7 <= v51)
          {
            v6 = v108 + (float)(v109 * v57);
            if (v7 < v50)
              v6 = v50;
          }
          v110 = (float)(v48 + (float)(v106 * v58)) + (float)(v107 * v59);
          v14 = v110 + (float)(v109 * v61);
          *(_BYTE *)(v68 + v72) = llroundf(v6);
          v60 = v51;
          if (v14 <= v51)
          {
            v60 = v110 + (float)(v109 * v61);
            if (v14 < v50)
              v60 = v50;
          }
          v67 += 2;
          v73 += 2;
          v63 += 2;
          v74 += 2;
          *(_BYTE *)(v68 + v72 + 1) = llroundf(v60);
          v72 += 2;
        }
        while (v20 > v72);
      }
      v67 = &v70[v31];
      result = (_QWORD *)((char *)result + v32);
      v63 = &v71[v36];
      v68 += v37;
      v19 += 2;
    }
    while (v23 > v19);
    if (v34 && v39)
    {
      do
      {
        result = memcpy(v40, v35, v20);
        v35 += v33;
        v40 += v38;
        --v23;
      }
      while (v23);
    }
    else if (v39)
    {
      do
      {
        if (v20)
          result = memset(v40, 255, v20);
        v40 += v38;
        --v23;
      }
      while (v23);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Tone_Mat_TRC_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Tone_Mat_TRC_xf420_GCD);
  return 0;
}

_QWORD *vt_Copy_420vf_TRC_Tone_Mat_TRC_xf420_GCD(_QWORD *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  unsigned int v37;
  float v38;
  float v39;
  float v40;
  unsigned int v41;
  float v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  char *v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  float v56;
  float v57;
  float v58;
  float v59;
  _BYTE *v60;
  char *v61;
  unint64_t v62;
  _BYTE *v63;
  char *v64;
  float v65;
  unsigned int v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  BOOL v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v114;
  float v115;
  float v120;
  float v121;
  float v126;
  float v127;
  float v128;
  float v133;
  float v134;
  float v135;
  float v137;
  float v138;
  float v139;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v178;
  float v179;
  float v180;
  unsigned int v181;
  float v182;
  float v183;
  unsigned int v184;
  float v185;
  float v186;
  unsigned int v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;
  _WORD *v195;
  float v196;
  uint64_t v197;
  unint64_t v198;
  _WORD *v199;
  unsigned __int8 *v200;
  __int16 v201;
  uint64_t v202;
  float v203;
  float v204;
  float v205;
  float v206;
  float v207;
  float v208;
  float v209;
  float v210;
  float v211;
  float v212;
  float v213;
  float v214;
  float v215;
  float v216;
  float v217;
  float v218;
  float v219;
  float v220;
  float v221;
  float v222;
  float v223;
  float v224;
  float v225;
  float v226;
  float v227;
  float v228;
  float v229;
  float v230;
  float v231;
  float v232;

  v7 = *(_QWORD *)((char *)result + 28);
  v8 = 2 * *(unsigned __int8 *)result;
  v9 = v7 * a2 / v8;
  v10 = (v7 + v7 * a2) / v8;
  if (2 * v10 != 2 * v9)
  {
    v11 = 0;
    v12 = *(_QWORD *)((char *)result + 20);
    v13 = *(_QWORD *)((char *)result + 36);
    v14 = *(_QWORD *)((char *)result + 44) + 2 * v9;
    v15 = 2 * v10 - 2 * v9;
    v16 = result[14];
    v17 = (_QWORD *)result[16];
    v18 = result[15] + 2 * (result[13] * a2 / v8);
    v19 = result[19];
    v20 = (_QWORD *)result[7];
    v21 = (uint64_t *)result[8];
    v22 = (uint64_t *)result[17];
    v23 = *v21;
    v24 = v21[1];
    v25 = v21[2];
    v202 = v20[2];
    v26 = (unsigned __int8 *)(v202 + v25 * v14 + v13);
    v27 = *v22;
    v28 = v22[1];
    v29 = v22[2];
    v30 = v17[2];
    v31 = (char *)(v30 + v29 * v18 + 2 * v16);
    LOWORD(a5) = *(_WORD *)(v19 + 140);
    LOWORD(a6) = *(_WORD *)(v19 + 142);
    v32 = 8191.0 / (float)*(unsigned int *)(v19 + 128);
    v33 = (float)LODWORD(a5);
    v34 = (float)LODWORD(a6);
    v35 = v32 * *(float *)v19;
    v228 = v32 * *(float *)(v19 + 16);
    v229 = v32 * *(float *)(v19 + 8);
    v36 = v32 * *(float *)(v19 + 20);
    *(float *)&v37 = v32 * *(float *)(v19 + 28);
    v226 = *(float *)&v37;
    v227 = v36;
    LOWORD(v37) = *(_WORD *)(v19 + 144);
    v38 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v19 + 146);
    v39 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v19 + 148);
    v40 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v19 + 150);
    *(float *)&v41 = (float)v37;
    v232 = *(float *)&v41;
    LOWORD(v41) = *(_WORD *)(v19 + 152);
    v42 = (float)v41;
    v222 = *(float *)(v19 + 40);
    v223 = *(float *)(v19 + 36);
    v220 = *(float *)(v19 + 48) * 0.25;
    v221 = *(float *)(v19 + 44);
    v218 = *(float *)(v19 + 56) * 0.25;
    v219 = *(float *)(v19 + 52) * 0.25;
    v216 = *(float *)(v19 + 64) * 0.25;
    v217 = *(float *)(v19 + 60) * 0.25;
    v214 = *(float *)(v19 + 68) * 0.25;
    v215 = *(float *)(v19 + 72);
    v212 = *(float *)(v19 + 80);
    v213 = *(float *)(v19 + 76);
    v210 = *(float *)(v19 + 88);
    v211 = *(float *)(v19 + 84);
    v208 = *(float *)(v19 + 96);
    v209 = *(float *)(v19 + 92);
    v43 = *(float *)(v19 + 104);
    v206 = v43;
    v207 = *(float *)(v19 + 100);
    v44 = v19 + 164;
    result = (_QWORD *)(v19 + 16548);
    v45 = v19 + 32932;
    v46 = *(unsigned __int8 *)(v19 + 132);
    v47 = v17[1];
    v48 = (char *)(*v17 + v27 * v18 + 2 * v16);
    if (v46 >= 0x11)
      v49 = 0;
    else
      v49 = 16 - v46;
    v50 = v47 + v28 * (v18 / 2);
    v51 = v20[1];
    v52 = (_BYTE *)(*v20 + v23 * v14 + v13);
    v53 = v50 + 2 * v16;
    v54 = v51 + v24 * (v14 / 2) + v13;
    v55 = v49;
    v56 = *(float *)(v19 + 108);
    v57 = *(float *)(v19 + 112);
    v58 = *(float *)(v19 + 116);
    v59 = *(float *)(v19 + 120);
    v230 = (float)LODWORD(a6);
    v231 = (float)LODWORD(a5);
    v224 = v42;
    v225 = v39;
    v204 = v57;
    v205 = v35;
    v203 = v56;
    do
    {
      v60 = &v52[v23];
      v61 = &v48[v27];
      if (v12)
      {
        v62 = 0;
        v63 = &v52[v23];
        v64 = &v48[v27];
        do
        {
          LOBYTE(v43) = *(_BYTE *)(v54 + v62 + 1);
          v65 = (float)LODWORD(v43) - v34;
          v66 = LODWORD(v229);
          v67 = v229 * v65;
          LOBYTE(v66) = *v52;
          v68 = v35 * (float)((float)v66 - v33);
          v69 = (float)(v229 * v65) + v68;
          v70 = 8191.0;
          if (v69 <= 8191.0)
          {
            v70 = (float)(v229 * v65) + v68;
            if (v69 < 0.0)
              v70 = 0.0;
          }
          LOBYTE(v69) = *(_BYTE *)(v54 + v62);
          v71 = (float)LODWORD(v69) - v34;
          v72 = (float)(v227 * v65) + (float)(v71 * v228);
          v73 = 8191.0;
          if ((float)(v68 + v72) <= 8191.0)
          {
            v73 = v68 + v72;
            if ((float)(v68 + v72) < 0.0)
              v73 = 0.0;
          }
          v74 = v226 * v71;
          v75 = (float)(v226 * v71) + v68;
          v76 = 8191.0;
          if (v75 <= 8191.0)
          {
            v76 = v75;
            if (v75 < 0.0)
              v76 = 0.0;
          }
          LOBYTE(v75) = v52[1];
          v77 = v35 * (float)((float)LODWORD(v75) - v33);
          v78 = 8191.0;
          if ((float)(v67 + v77) <= 8191.0)
          {
            v78 = v67 + v77;
            if ((float)(v67 + v77) < 0.0)
              v78 = 0.0;
          }
          v79 = 8191.0;
          if ((float)(v72 + v77) <= 8191.0)
          {
            v79 = v72 + v77;
            if ((float)(v72 + v77) < 0.0)
              v79 = 0.0;
          }
          v80 = v74 + v77;
          v81 = 8191.0;
          if (v80 <= 8191.0)
          {
            v81 = v80;
            if (v80 < 0.0)
              v81 = 0.0;
          }
          LOBYTE(v80) = *v63;
          v82 = v35 * (float)((float)LODWORD(v80) - v33);
          v83 = 8191.0;
          if ((float)(v67 + v82) <= 8191.0)
          {
            v83 = v67 + v82;
            if ((float)(v67 + v82) < 0.0)
              v83 = 0.0;
          }
          v84 = 8191.0;
          if ((float)(v72 + v82) <= 8191.0)
          {
            v84 = v72 + v82;
            if ((float)(v72 + v82) < 0.0)
              v84 = 0.0;
          }
          v85 = v74 + v82;
          v86 = 8191.0;
          if (v85 <= 8191.0)
          {
            v86 = v85;
            if (v85 < 0.0)
              v86 = 0.0;
          }
          LOBYTE(_S22) = v63[1];
          v87 = v35 * (float)((float)LODWORD(_S22) - v33);
          v88 = v67 + v87;
          v89 = (float)(v67 + v87) <= 8191.0;
          v90 = 8191.0;
          if (v89)
          {
            v90 = v88;
            if (v88 < 0.0)
              v90 = 0.0;
          }
          v91 = v72 + v87;
          v89 = (float)(v72 + v87) <= 8191.0;
          v92 = 8191.0;
          if (v89)
          {
            v92 = v91;
            if (v91 < 0.0)
              v92 = 0.0;
          }
          v93 = v74 + v87;
          v94 = 8191.0;
          if (v93 <= 8191.0)
          {
            v94 = v93;
            if (v93 < 0.0)
              v94 = 0.0;
          }
          _H19 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          _H20 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S24, H20 }
          _H20 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S25, H20 }
          _H28 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          _H23 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          _H20 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          _H17 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          _H26 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          _H21 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          _H3 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          v114 = (float)((float)((float)(v57 * _S24) + (float)(v56 * _S19)) + (float)(v58 * _S25))
               + (float)(v59 * fmaxf(_S19, fmaxf(_S24, _S25)));
          v115 = 8191.0;
          if (v114 <= 8191.0)
          {
            v115 = v114;
            if (v114 < 0.0)
              v115 = 0.0;
          }
          __asm
          {
            FCVT            S27, H28
            FCVT            S28, H23
            FCVT            S30, H20
          }
          _H22 = *((_WORD *)result + llroundf(v115));
          v120 = (float)((float)((float)(v57 * _S28) + (float)(v56 * _S27)) + (float)(v58 * _S30))
               + (float)(v59 * fmaxf(_S27, fmaxf(_S28, _S30)));
          v121 = 8191.0;
          if (v120 <= 8191.0)
          {
            v121 = v120;
            if (v120 < 0.0)
              v121 = 0.0;
          }
          __asm
          {
            FCVT            S8, H17
            FCVT            S9, H26
            FCVT            S10, H21
          }
          _H17 = *((_WORD *)result + llroundf(v121));
          v126 = fmaxf(_S8, fmaxf(_S9, _S10));
          v127 = (float)((float)((float)(v57 * _S9) + (float)(v56 * _S8)) + (float)(v58 * _S10)) + (float)(v59 * v126);
          v128 = 8191.0;
          if (v127 <= 8191.0)
          {
            v128 = (float)((float)((float)(v57 * _S9) + (float)(v56 * _S8)) + (float)(v58 * _S10)) + (float)(v59 * v126);
            if (v127 < 0.0)
              v128 = 0.0;
          }
          __asm
          {
            FCVT            S26, H1
            FCVT            S29, H2
            FCVT            S31, H3
            FCVT            S1, H22
          }
          v133 = _S19 * _S1;
          v134 = _S24 * _S1;
          v135 = _S25 * _S1;
          __asm { FCVT            S1, H17 }
          v137 = _S27 * _S1;
          v138 = _S28 * _S1;
          v139 = _S30 * _S1;
          LOWORD(_S1) = *((_WORD *)result + llroundf(v128));
          __asm { FCVT            S2, H1 }
          v141 = _S8 * _S2;
          v142 = _S9 * _S2;
          v143 = _S10 * _S2;
          v144 = (float)((float)((float)(v57 * _S29) + (float)(v56 * _S26)) + (float)(v58 * _S31))
               + (float)(v59 * fmaxf(_S26, fmaxf(_S29, _S31)));
          v145 = 8191.0;
          if (v144 <= 8191.0)
          {
            v145 = v144;
            if (v144 < 0.0)
              v145 = 0.0;
          }
          _H24 = *((_WORD *)result + llroundf(v145));
          __asm { FCVT            S24, H24 }
          v148 = _S26 * _S24;
          v149 = _S29 * _S24;
          v150 = _S31 * _S24;
          v151 = (float)((float)(v213 * v134) + (float)(v133 * v215)) + (float)(v135 * v212);
          v152 = (float)((float)(v210 * v134) + (float)(v133 * v211)) + (float)(v135 * v209);
          _S20 = (float)((float)(v207 * v134) + (float)(v133 * v208)) + (float)(v135 * v206);
          _S22 = (float)((float)(v213 * v138) + (float)(v137 * v215)) + (float)(v139 * v212);
          _S23 = (float)((float)(v210 * v138) + (float)(v137 * v211)) + (float)(v139 * v209);
          _S19 = (float)((float)(v207 * v138) + (float)(v137 * v208)) + (float)(v139 * v206);
          v157 = (float)((float)(v213 * v142) + (float)(v141 * v215)) + (float)(v143 * v212);
          v158 = (float)((float)(v210 * v142) + (float)(v141 * v211)) + (float)(v143 * v209);
          v159 = (float)((float)(v207 * v142) + (float)(v141 * v208)) + (float)(v143 * v206);
          v160 = (float)((float)(v213 * v149) + (float)(v148 * v215)) + (float)(v150 * v212);
          v161 = (float)((float)(v210 * v149) + (float)(v148 * v211)) + (float)(v150 * v209);
          v162 = (float)((float)(v207 * v149) + (float)(v148 * v208)) + (float)(v150 * v206);
          _H1 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v151, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          _H2 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v152, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H3 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(_S20, 0.0), 8191.0)));
          _H17 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(_S22, 0.0), 8191.0)));
          __asm
          {
            FCVT            S3, H3
            FCVT            S17, H17
          }
          LOWORD(_S20) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(_S23, 0.0), 8191.0)));
          __asm { FCVT            S21, H20 }
          LOWORD(_S19) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          LOWORD(_S20) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v157, 0.0), 8191.0)));
          __asm { FCVT            S24, H20 }
          LOWORD(_S20) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v158, 0.0), 8191.0)));
          __asm { FCVT            S25, H20 }
          LOWORD(_S20) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v159, 0.0), 8191.0)));
          LOWORD(_S22) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v160, 0.0), 8191.0)));
          __asm
          {
            FCVT            S26, H20
            FCVT            S20, H22
          }
          LOWORD(_S22) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v161, 0.0), 8191.0)));
          __asm { FCVT            S22, H22 }
          LOWORD(_S23) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v162, 0.0), 8191.0)));
          __asm { FCVT            S23, H23 }
          v178 = (float)((float)((float)(v222 * _S2) + (float)(v223 * _S1)) + (float)(v221 * _S3)) + v38;
          if (v178 < v38)
            v179 = v38;
          else
            v179 = (float)((float)((float)(v222 * _S2) + (float)(v223 * _S1)) + (float)(v221 * _S3)) + v38;
          v89 = v178 <= v40;
          v180 = (float)((float)((float)(v222 * _S21) + (float)(v223 * _S17)) + (float)(v221 * _S19)) + v38;
          if (!v89)
            v179 = v40;
          v181 = llroundf(v179);
          if (v180 < v38)
            v182 = v38;
          else
            v182 = (float)((float)((float)(v222 * _S21) + (float)(v223 * _S17)) + (float)(v221 * _S19)) + v38;
          v89 = v180 <= v40;
          v183 = (float)((float)((float)(v222 * _S25) + (float)(v223 * _S24)) + (float)(v221 * _S26)) + v38;
          if (!v89)
            v182 = v40;
          v184 = llroundf(v182);
          if (v183 < v38)
            v185 = v38;
          else
            v185 = (float)((float)((float)(v222 * _S25) + (float)(v223 * _S24)) + (float)(v221 * _S26)) + v38;
          v89 = v183 <= v40;
          v186 = (float)((float)((float)(v222 * _S22) + (float)(v223 * _S20)) + (float)(v221 * _S23)) + v38;
          if (!v89)
            v185 = v40;
          v187 = llroundf(v185);
          if (v186 < v38)
            v188 = v38;
          else
            v188 = (float)((float)((float)(v222 * _S22) + (float)(v223 * _S20)) + (float)(v221 * _S23)) + v38;
          if (v186 <= v40)
            v189 = v188;
          else
            v189 = v40;
          v190 = (float)((float)(_S1 + _S17) + _S24) + _S20;
          v191 = (float)((float)(_S2 + _S21) + _S25) + _S22;
          *(_WORD *)v48 = v181 << v55;
          *((_WORD *)v48 + 1) = v184 << v55;
          *(_WORD *)v64 = v187 << v55;
          *((_WORD *)v64 + 1) = llroundf(v189) << v55;
          v192 = (float)((float)(_S3 + _S19) + _S26) + _S23;
          v193 = (float)((float)(v225 + (float)(v190 * v220)) + (float)(v191 * v219)) + (float)(v192 * v218);
          v194 = v224;
          if (v193 <= v224)
          {
            v194 = (float)((float)(v225 + (float)(v190 * v220)) + (float)(v191 * v219)) + (float)(v192 * v218);
            if (v193 < v232)
              v194 = v232;
          }
          v195 = (_WORD *)(v53 + 2 * v62);
          v196 = (float)((float)(v225 + (float)(v190 * v217)) + (float)(v191 * v216)) + (float)(v192 * v214);
          *v195 = llroundf(v194) << v55;
          v43 = v224;
          v33 = v231;
          v35 = v205;
          if (v196 <= v224)
          {
            v43 = v196;
            if (v196 < v232)
              v43 = v232;
          }
          v52 += 2;
          v63 += 2;
          v48 += 4;
          v64 += 4;
          v195[1] = llroundf(v43) << v55;
          v62 += 2;
          v34 = v230;
          v56 = v203;
          v57 = v204;
        }
        while (v12 > v62);
      }
      v52 = &v60[v23];
      v54 += v24;
      v48 = &v61[v27];
      v53 += v28;
      v11 += 2;
    }
    while (v15 > v11);
    if (v202 && v30)
    {
      v197 = 0;
      do
      {
        if (v12)
        {
          v198 = v12;
          v199 = v31;
          v200 = v26;
          do
          {
            v201 = *v200++;
            *v199++ = v201 | (v201 << 8);
            --v198;
          }
          while (v198);
        }
        v26 += v25;
        v31 += v29;
        ++v197;
      }
      while (v197 != v15);
    }
    else if (v30)
    {
      do
      {
        if (v12)
          result = memset(v31, 255, 2 * v12);
        v31 += v29;
        --v15;
      }
      while (v15);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Mat_TRC_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Mat_TRC_xf420_GCD);
  return 0;
}

_QWORD *vt_Copy_420vf_TRC_Mat_TRC_xf420_GCD(_QWORD *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  unsigned int v38;
  float v39;
  float v40;
  float v41;
  unsigned int v42;
  float v43;
  float v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  unsigned int v48;
  uint64_t v49;
  _BYTE *v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  _BYTE *v55;
  char *v56;
  unint64_t v57;
  _BYTE *v58;
  char *v59;
  float v60;
  unsigned int v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  unsigned int v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  BOOL v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v123;
  float v124;
  float v125;
  float v127;
  float v129;
  float v130;
  float v132;
  float v133;
  float v134;
  float v147;
  float v148;
  float v149;
  unsigned int v150;
  float v151;
  float v152;
  unsigned int v153;
  float v154;
  float v155;
  unsigned int v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  _WORD *v164;
  float v165;
  float v166;
  uint64_t v167;
  unint64_t v168;
  _WORD *v169;
  unsigned __int8 *v170;
  __int16 v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float v182;
  float v183;
  float v184;
  float v185;
  float v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;

  v6 = *(_QWORD *)((char *)result + 28);
  v7 = 2 * *(unsigned __int8 *)result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (2 * v9 != 2 * v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)((char *)result + 20);
    v12 = *(_QWORD *)((char *)result + 36);
    v13 = *(_QWORD *)((char *)result + 44) + 2 * v8;
    v14 = 2 * v9 - 2 * v8;
    v15 = result[14];
    v16 = result[13] * a2 / v7;
    v17 = (_QWORD *)result[16];
    v18 = result[15] + 2 * v16;
    v19 = result[19];
    v20 = (_QWORD *)result[7];
    v21 = (uint64_t *)result[8];
    v22 = (uint64_t *)result[17];
    v23 = *v21;
    v24 = v21[1];
    v25 = v21[2];
    v26 = v20[2];
    v27 = (unsigned __int8 *)(v26 + v25 * v13 + v12);
    v28 = *v22;
    v29 = v22[1];
    v30 = v22[2];
    v31 = v17[2];
    v32 = (char *)(v31 + v30 * v18 + 2 * v15);
    LOWORD(a5) = *(_WORD *)(v19 + 140);
    LOWORD(a6) = *(_WORD *)(v19 + 142);
    v33 = 8191.0 / (float)*(unsigned int *)(v19 + 128);
    v34 = (float)LODWORD(a5);
    v35 = (float)LODWORD(a6);
    v36 = v33 * *(float *)v19;
    v194 = v33 * *(float *)(v19 + 16);
    v195 = v33 * *(float *)(v19 + 8);
    v37 = v33 * *(float *)(v19 + 20);
    *(float *)&v38 = v33 * *(float *)(v19 + 28);
    v192 = *(float *)&v38;
    v193 = v37;
    LOWORD(v38) = *(_WORD *)(v19 + 144);
    v39 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v19 + 146);
    v40 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v19 + 148);
    v41 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v19 + 150);
    *(float *)&v42 = (float)v38;
    v196 = *(float *)&v42;
    LOWORD(v42) = *(_WORD *)(v19 + 152);
    v43 = (float)v42;
    v188 = *(float *)(v19 + 40);
    v189 = *(float *)(v19 + 36);
    v186 = *(float *)(v19 + 48) * 0.25;
    v187 = *(float *)(v19 + 44);
    v184 = *(float *)(v19 + 56) * 0.25;
    v185 = *(float *)(v19 + 52) * 0.25;
    v182 = *(float *)(v19 + 64) * 0.25;
    v183 = *(float *)(v19 + 60) * 0.25;
    v180 = *(float *)(v19 + 68) * 0.25;
    v181 = *(float *)(v19 + 72);
    v178 = *(float *)(v19 + 80);
    v179 = *(float *)(v19 + 76);
    v176 = *(float *)(v19 + 88);
    v177 = *(float *)(v19 + 84);
    v174 = *(float *)(v19 + 96);
    v175 = *(float *)(v19 + 92);
    v44 = *(float *)(v19 + 104);
    v172 = v44;
    v173 = *(float *)(v19 + 100);
    v45 = v19 + 164;
    result = (_QWORD *)(v19 + 16548);
    v46 = v17[1];
    v47 = (char *)(*v17 + v28 * v18 + 2 * v15);
    v48 = *(unsigned __int8 *)(v19 + 132);
    v49 = v20[1];
    v50 = (_BYTE *)(*v20 + v23 * v13 + v12);
    if (v48 >= 0x11)
      v51 = 0;
    else
      v51 = 16 - v48;
    v52 = v46 + v29 * (v18 / 2) + 2 * v15;
    v53 = v49 + v24 * (v13 / 2) + v12;
    v54 = v51;
    v190 = v43;
    v191 = v40;
    do
    {
      v55 = &v50[v23];
      v56 = &v47[v28];
      if (v11)
      {
        v57 = 0;
        v58 = &v50[v23];
        v59 = &v47[v28];
        do
        {
          LOBYTE(v44) = *(_BYTE *)(v53 + v57 + 1);
          v60 = (float)LODWORD(v44) - v35;
          v61 = LODWORD(v195);
          v62 = v195 * v60;
          LOBYTE(v61) = *v50;
          v63 = (float)v61 - v34;
          v64 = v36 * v63;
          v65 = (float)(v195 * v60) + (float)(v36 * v63);
          v66 = 8191.0;
          if (v65 <= 8191.0)
          {
            v66 = (float)(v195 * v60) + (float)(v36 * v63);
            if (v65 < 0.0)
              v66 = 0.0;
          }
          LOBYTE(v63) = *(_BYTE *)(v53 + v57);
          v67 = (float)LODWORD(v63) - v35;
          v68 = (float)(v193 * v60) + (float)(v67 * v194);
          v69 = 8191.0;
          if ((float)(v64 + v68) <= 8191.0)
          {
            v69 = v64 + v68;
            if ((float)(v64 + v68) < 0.0)
              v69 = 0.0;
          }
          v70 = LODWORD(v192);
          v71 = v192 * v67;
          v72 = (float)(v192 * v67) + v64;
          v73 = 8191.0;
          if (v72 <= 8191.0)
          {
            v73 = v72;
            if (v72 < 0.0)
              v73 = 0.0;
          }
          LOBYTE(v70) = v50[1];
          v74 = (float)v70 - v34;
          v75 = v36 * v74;
          v76 = v62 + (float)(v36 * v74);
          v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            v77 = v62 + (float)(v36 * v74);
            if (v76 < 0.0)
              v77 = 0.0;
          }
          v78 = v68 + v75;
          v79 = 8191.0;
          if ((float)(v68 + v75) <= 8191.0)
          {
            v79 = v68 + v75;
            if (v78 < 0.0)
              v79 = 0.0;
          }
          v80 = v71 + v75;
          v81 = 8191.0;
          if (v80 <= 8191.0)
          {
            v81 = v80;
            if (v80 < 0.0)
              v81 = 0.0;
          }
          LOBYTE(v74) = *v58;
          v82 = v36 * (float)((float)LODWORD(v74) - v34);
          v83 = 8191.0;
          if ((float)(v62 + v82) <= 8191.0)
          {
            v83 = v62 + v82;
            if ((float)(v62 + v82) < 0.0)
              v83 = 0.0;
          }
          v84 = 8191.0;
          if ((float)(v68 + v82) <= 8191.0)
          {
            v84 = v68 + v82;
            if ((float)(v68 + v82) < 0.0)
              v84 = 0.0;
          }
          v85 = v71 + v82;
          v86 = (float)(v71 + v82) <= 8191.0;
          v87 = 8191.0;
          if (v86)
          {
            v87 = v85;
            if (v85 < 0.0)
              v87 = 0.0;
          }
          LOBYTE(v78) = v58[1];
          v88 = v36 * (float)((float)LODWORD(v78) - v34);
          v89 = v62 + v88;
          v86 = (float)(v62 + v88) <= 8191.0;
          v90 = 8191.0;
          if (v86)
          {
            v90 = v89;
            if (v89 < 0.0)
              v90 = 0.0;
          }
          v91 = v68 + v88;
          v86 = (float)(v68 + v88) <= 8191.0;
          v92 = 8191.0;
          if (v86)
          {
            v92 = v91;
            if (v91 < 0.0)
              v92 = 0.0;
          }
          v93 = v71 + v88;
          v94 = 8191.0;
          if (v93 <= 8191.0)
          {
            v94 = v93;
            if (v93 < 0.0)
              v94 = 0.0;
          }
          _H4 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v66, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H5 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v69, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H6 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          _H17 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          __asm
          {
            FCVT            S6, H6
            FCVT            S17, H17
          }
          _H19 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          _H24 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          _H27 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          _H1 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          _H2 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          _H7 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          __asm
          {
            FCVT            S2, H2
            FCVT            S7, H7
          }
          _H25 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          _H26 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          v123 = (float)((float)(v179 * _S5) + (float)(_S4 * v181)) + (float)(_S6 * v178);
          v124 = (float)((float)(v176 * _S5) + (float)(_S4 * v177)) + (float)(_S6 * v175);
          v125 = (float)((float)(v173 * _S5) + (float)(_S4 * v174)) + (float)(_S6 * v172);
          _S3 = (float)((float)(v179 * _S19) + (float)(_S17 * v181)) + (float)(_S24 * v178);
          v127 = (float)((float)(v176 * _S19) + (float)(_S17 * v177)) + (float)(_S24 * v175);
          _S17 = (float)((float)(v173 * _S19) + (float)(_S17 * v174)) + (float)(_S24 * v172);
          v129 = (float)((float)(v179 * _S1) + (float)(_S27 * v181)) + (float)(_S2 * v178);
          v130 = (float)((float)(v176 * _S1) + (float)(_S27 * v177)) + (float)(_S2 * v175);
          _S1 = (float)((float)(v173 * _S1) + (float)(_S27 * v174)) + (float)(_S2 * v172);
          v132 = (float)((float)(v179 * _S25) + (float)(_S7 * v181)) + (float)(_S26 * v178);
          v133 = (float)((float)(v176 * _S25) + (float)(_S7 * v177)) + (float)(_S26 * v175);
          v134 = (float)((float)(v173 * _S25) + (float)(_S7 * v174)) + (float)(_S26 * v172);
          LOWORD(_S2) = *((_WORD *)result + llroundf(fminf(fmaxf(v123, 0.0), 8191.0)));
          __asm { FCVT            S4, H2 }
          LOWORD(_S2) = *((_WORD *)result + llroundf(fminf(fmaxf(v124, 0.0), 8191.0)));
          __asm { FCVT            S5, H2 }
          LOWORD(_S2) = *((_WORD *)result + llroundf(fminf(fmaxf(v125, 0.0), 8191.0)));
          LOWORD(_S3) = *((_WORD *)result + llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          __asm
          {
            FCVT            S2, H2
            FCVT            S6, H3
          }
          LOWORD(_S3) = *((_WORD *)result + llroundf(fminf(fmaxf(v127, 0.0), 8191.0)));
          __asm { FCVT            S19, H3 }
          LOWORD(_S3) = *((_WORD *)result + llroundf(fminf(fmaxf(_S17, 0.0), 8191.0)));
          __asm { FCVT            S7, H3 }
          LOWORD(_S3) = *((_WORD *)result + llroundf(fminf(fmaxf(v129, 0.0), 8191.0)));
          __asm { FCVT            S24, H3 }
          LOWORD(_S3) = *((_WORD *)result + llroundf(fminf(fmaxf(v130, 0.0), 8191.0)));
          __asm { FCVT            S25, H3 }
          LOWORD(_S1) = *((_WORD *)result + llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          LOWORD(_S3) = *((_WORD *)result + llroundf(fminf(fmaxf(v132, 0.0), 8191.0)));
          __asm
          {
            FCVT            S26, H1
            FCVT            S1, H3
          }
          LOWORD(_S3) = *((_WORD *)result + llroundf(fminf(fmaxf(v133, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          LOWORD(_S17) = *((_WORD *)result + llroundf(fminf(fmaxf(v134, 0.0), 8191.0)));
          __asm { FCVT            S17, H17 }
          v147 = (float)((float)((float)(v188 * _S5) + (float)(v189 * _S4)) + (float)(v187 * _S2)) + v39;
          if (v147 < v39)
            v148 = v39;
          else
            v148 = (float)((float)((float)(v188 * _S5) + (float)(v189 * _S4)) + (float)(v187 * _S2)) + v39;
          v86 = v147 <= v41;
          v149 = (float)((float)((float)(v188 * _S19) + (float)(v189 * _S6)) + (float)(v187 * _S7)) + v39;
          if (!v86)
            v148 = v41;
          v150 = llroundf(v148);
          if (v149 < v39)
            v151 = v39;
          else
            v151 = (float)((float)((float)(v188 * _S19) + (float)(v189 * _S6)) + (float)(v187 * _S7)) + v39;
          v86 = v149 <= v41;
          v152 = (float)((float)((float)(v188 * _S25) + (float)(v189 * _S24)) + (float)(v187 * _S26)) + v39;
          if (!v86)
            v151 = v41;
          v153 = llroundf(v151);
          if (v152 < v39)
            v154 = v39;
          else
            v154 = (float)((float)((float)(v188 * _S25) + (float)(v189 * _S24)) + (float)(v187 * _S26)) + v39;
          v86 = v152 <= v41;
          v155 = (float)((float)((float)(v188 * _S3) + (float)(v189 * _S1)) + (float)(v187 * _S17)) + v39;
          if (!v86)
            v154 = v41;
          v156 = llroundf(v154);
          if (v155 < v39)
            v157 = v39;
          else
            v157 = (float)((float)((float)(v188 * _S3) + (float)(v189 * _S1)) + (float)(v187 * _S17)) + v39;
          if (v155 <= v41)
            v158 = v157;
          else
            v158 = v41;
          v159 = (float)((float)(_S4 + _S6) + _S24) + _S1;
          v160 = (float)((float)(_S5 + _S19) + _S25) + _S3;
          *(_WORD *)v47 = v150 << v54;
          *((_WORD *)v47 + 1) = v153 << v54;
          *(_WORD *)v59 = v156 << v54;
          *((_WORD *)v59 + 1) = llroundf(v158) << v54;
          v161 = (float)((float)(_S2 + _S7) + _S26) + _S17;
          v162 = (float)((float)(v191 + (float)(v159 * v186)) + (float)(v160 * v185)) + (float)(v161 * v184);
          v163 = v190;
          if (v162 <= v190)
          {
            v163 = (float)((float)(v191 + (float)(v159 * v186)) + (float)(v160 * v185)) + (float)(v161 * v184);
            if (v162 < v196)
              v163 = v196;
          }
          v164 = (_WORD *)(v52 + 2 * v57);
          v44 = (float)(v191 + (float)(v159 * v183)) + (float)(v160 * v182);
          v165 = v44 + (float)(v161 * v180);
          *v164 = llroundf(v163) << v54;
          v166 = v190;
          if (v165 <= v190)
          {
            v44 = v196;
            v166 = v165;
            if (v165 < v196)
              v166 = v196;
          }
          v50 += 2;
          v58 += 2;
          v47 += 4;
          v59 += 4;
          v164[1] = llroundf(v166) << v54;
          v57 += 2;
        }
        while (v11 > v57);
      }
      v50 = &v55[v23];
      v53 += v24;
      v47 = &v56[v28];
      v52 += v29;
      v10 += 2;
    }
    while (v14 > v10);
    if (v26 && v31)
    {
      v167 = 0;
      do
      {
        if (v11)
        {
          v168 = v11;
          v169 = v32;
          v170 = v27;
          do
          {
            v171 = *v170++;
            *v169++ = v171 | (v171 << 8);
            --v168;
          }
          while (v168);
        }
        v27 += v25;
        v32 += v30;
        ++v167;
      }
      while (v167 != v14);
    }
    else if (v31)
    {
      do
      {
        if (v11)
          result = memset(v32, 255, 2 * v11);
        v32 += v30;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_rgb_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_rgb_xf420_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_420vf_rgb_xf420_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  unsigned int v28;
  unsigned int v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  unsigned int v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  uint64_t v51;
  char *v52;
  unsigned int v53;
  char v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  unsigned __int8 *v61;
  char *v62;
  unint64_t v63;
  unsigned __int8 *v64;
  char *v65;
  unsigned int v66;
  float v67;
  float v68;
  float v69;
  unsigned int v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  _WORD *v102;
  uint64_t v103;
  unint64_t v104;
  _WORD *v105;
  unsigned __int8 *v106;
  __int16 v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;

  v2 = *(_QWORD *)(result + 28);
  v3 = 2 * *result;
  v4 = v2 * a2 / v3;
  v5 = (v2 + v2 * a2) / v3;
  if (2 * v5 != 2 * v4)
  {
    v6 = 0;
    v7 = *(_QWORD *)(result + 20);
    v8 = *(_QWORD *)(result + 36);
    v9 = *(_QWORD *)(result + 44) + 2 * v4;
    v10 = 2 * v5 - 2 * v4;
    v11 = *((_QWORD *)result + 14);
    v12 = (_QWORD *)*((_QWORD *)result + 16);
    v13 = *((_QWORD *)result + 15) + 2 * (*((_QWORD *)result + 13) * a2 / v3);
    v14 = *((_QWORD *)result + 19);
    v15 = (uint64_t *)*((_QWORD *)result + 7);
    v16 = (uint64_t *)*((_QWORD *)result + 8);
    v17 = (uint64_t *)*((_QWORD *)result + 17);
    v18 = *v16;
    v19 = v16[1];
    v20 = v16[2];
    v21 = v15[2];
    v22 = (unsigned __int8 *)(v21 + v20 * v9 + v8);
    v23 = *v17;
    v24 = v17[1];
    v25 = v17[2];
    v26 = v12[2];
    v27 = (char *)(v26 + v25 * v13 + 2 * v11);
    *(float *)&v28 = (float)*(unsigned int *)(v14 + 128);
    *(float *)&v29 = (float)*(unsigned int *)(v14 + 136);
    v30 = *(float *)&v29 / *(float *)&v28;
    LOWORD(v28) = *(_WORD *)(v14 + 140);
    v31 = (float)v28;
    LOWORD(v29) = *(_WORD *)(v14 + 142);
    v32 = (float)v29;
    v33 = v30 * *(float *)v14;
    v111 = v30 * *(float *)(v14 + 16);
    v112 = v30 * *(float *)(v14 + 8);
    v34 = v30 * *(float *)(v14 + 20);
    *(float *)&v35 = v30 * *(float *)(v14 + 28);
    v109 = *(float *)&v35;
    v110 = v34;
    LOWORD(v35) = *(_WORD *)(v14 + 144);
    v36 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v14 + 146);
    v37 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v14 + 148);
    v38 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v14 + 150);
    v39 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v14 + 152);
    v40 = (float)v35;
    v41 = *(float *)(v14 + 36);
    v42 = *(float *)(v14 + 40);
    v43 = *(float *)(v14 + 44);
    v44 = 0.25;
    v108 = *(float *)(v14 + 48) * 0.25;
    v45 = *(float *)(v14 + 52) * 0.25;
    v46 = *(float *)(v14 + 56) * 0.25;
    v47 = *(float *)(v14 + 60) * 0.25;
    v48 = *(float *)(v14 + 64) * 0.25;
    v49 = *(float *)(v14 + 68);
    v50 = v49 * 0.25;
    v51 = v12[1];
    v52 = (char *)(*v12 + v23 * v13 + 2 * v11);
    v53 = *(unsigned __int8 *)(v14 + 132);
    v54 = 16 - v53;
    v55 = v53 >= 0x11;
    v56 = *v15;
    v57 = v15[1];
    result = (unsigned __int8 *)(v56 + v18 * v9 + v8);
    if (v55)
      v54 = 0;
    v58 = v51 + v24 * (v13 / 2) + 2 * v11;
    v59 = v57 + v19 * (v9 / 2) + v8;
    v60 = v54;
    do
    {
      v61 = &result[v18];
      v62 = &v52[v23];
      if (v7)
      {
        v63 = 0;
        v64 = &result[v18];
        v65 = &v52[v23];
        do
        {
          LOBYTE(v49) = *(_BYTE *)(v59 + v63);
          *(float *)&v66 = (float)LODWORD(v49) - v32;
          LOBYTE(v44) = *(_BYTE *)(v59 + v63 + 1);
          v67 = (float)LODWORD(v44) - v32;
          v68 = v112 * v67;
          v69 = (float)(v110 * v67) + (float)(*(float *)&v66 * v111);
          v70 = LODWORD(v109);
          v71 = v109 * *(float *)&v66;
          LOBYTE(v66) = *result;
          v72 = v33 * (float)((float)v66 - v31);
          v73 = v68 + v72;
          v74 = v72 + v69;
          v75 = v71 + v72;
          v76 = (float)((float)((float)(v42 * (float)(v72 + v69)) + (float)(v41 * (float)(v68 + v72)))
                      + (float)(v43 * (float)(v71 + v72)))
              + v36;
          v77 = v38;
          if (v76 <= v38)
          {
            v77 = v76;
            if (v76 < v36)
              v77 = v36;
          }
          LOBYTE(v76) = result[1];
          v79 = (float)LODWORD(v76) - v31;
          v78 = v33 * v79;
          LOBYTE(v79) = *v64;
          LOBYTE(v70) = v64[1];
          v80 = v68 + v78;
          v81 = v69 + v78;
          v82 = v71 + v78;
          v83 = (float)((float)((float)(v42 * (float)(v69 + v78)) + (float)(v41 * (float)(v68 + v78)))
                      + (float)(v43 * (float)(v71 + v78)))
              + v36;
          *(_WORD *)v52 = llroundf(v77) << v60;
          v84 = v38;
          if (v83 <= v38)
          {
            v84 = (float)((float)((float)(v42 * (float)(v69 + v78)) + (float)(v41 * (float)(v68 + v78)))
                        + (float)(v43 * (float)(v71 + v78)))
                + v36;
            if (v83 < v36)
              v84 = v36;
          }
          v85 = v33 * (float)((float)LODWORD(v79) - v31);
          v86 = v68 + v85;
          v87 = v69 + v85;
          v88 = v71 + v85;
          v89 = (float)((float)((float)(v42 * (float)(v69 + v85)) + (float)(v41 * (float)(v68 + v85)))
                      + (float)(v43 * (float)(v71 + v85)))
              + v36;
          *((_WORD *)v52 + 1) = llroundf(v84) << v60;
          v90 = v38;
          if (v89 <= v38)
          {
            v90 = v89;
            if (v89 < v36)
              v90 = v36;
          }
          v91 = v33 * (float)((float)v70 - v31);
          v92 = v68 + v91;
          v93 = v69 + v91;
          v94 = v71 + v91;
          v95 = (float)((float)((float)(v42 * v93) + (float)(v41 * v92)) + (float)(v43 * v94)) + v36;
          *(_WORD *)v65 = llroundf(v90) << v60;
          v96 = v38;
          if (v95 <= v38)
          {
            v96 = (float)((float)((float)(v42 * v93) + (float)(v41 * v92)) + (float)(v43 * v94)) + v36;
            if (v95 < v36)
              v96 = v36;
          }
          *((_WORD *)v65 + 1) = llroundf(v96) << v60;
          v97 = (float)((float)(v73 + v80) + v86) + v92;
          v98 = (float)((float)(v74 + v81) + v87) + v93;
          v99 = (float)((float)(v75 + v82) + v88) + v94;
          v100 = (float)((float)(v37 + (float)(v97 * v108)) + (float)(v98 * v45)) + (float)(v99 * v46);
          v101 = v40;
          if (v100 <= v40)
          {
            v101 = (float)((float)(v37 + (float)(v97 * v108)) + (float)(v98 * v45)) + (float)(v99 * v46);
            if (v100 < v39)
              v101 = v39;
          }
          v102 = (_WORD *)(v58 + 2 * v63);
          v44 = (float)((float)(v37 + (float)(v97 * v47)) + (float)(v98 * v48)) + (float)(v99 * v50);
          *v102 = llroundf(v101) << v60;
          v49 = v40;
          if (v44 <= v40)
          {
            v49 = v44;
            if (v44 < v39)
              v49 = v39;
          }
          result += 2;
          v64 += 2;
          v52 += 4;
          v65 += 4;
          v102[1] = llroundf(v49) << v60;
          v63 += 2;
        }
        while (v7 > v63);
      }
      result = &v61[v18];
      v59 += v19;
      v52 = &v62[v23];
      v58 += v24;
      v6 += 2;
    }
    while (v10 > v6);
    if (v21 && v26)
    {
      v103 = 0;
      do
      {
        if (v7)
        {
          v104 = v7;
          v105 = v27;
          v106 = v22;
          do
          {
            v107 = *v106++;
            *v105++ = v107 | (v107 << 8);
            --v104;
          }
          while (v104);
        }
        v22 += v20;
        v27 += v25;
        ++v103;
      }
      while (v103 != v10);
    }
    else if (v26)
    {
      do
      {
        if (v7)
          result = (unsigned __int8 *)memset(v27, 255, 2 * v7);
        v27 += v25;
        --v10;
      }
      while (v10);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Tone_Mat_TRC_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v12 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v11 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Tone_Mat_TRC_422vf_GCD);
  return 0;
}

char *vt_Copy_420vf_TRC_Tone_Mat_TRC_422vf_GCD(char *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  unsigned int v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  float v50;
  float v51;
  float v52;
  float v53;
  _BYTE *v54;
  char *v55;
  _BYTE *v56;
  size_t v57;
  _BYTE *v58;
  _BYTE *v59;
  float v60;
  unsigned int v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  BOOL v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v109;
  float v110;
  float v111;
  float v116;
  float v117;
  float v122;
  float v123;
  float v124;
  float v129;
  float v130;
  float v131;
  float v133;
  float v134;
  float v135;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v156;
  unsigned int v158;
  unsigned int v162;
  unsigned int v165;
  unsigned int v168;
  unsigned int v170;
  unsigned int v171;
  float v172;
  float v173;
  float v174;
  char v175;
  float v176;
  float v177;
  char v178;
  float v182;
  float v187;
  float v188;
  float v189;
  float v191;
  float v192;
  float v193;
  char v196;
  float v197;
  float v198;
  char v199;
  float v200;
  float v201;
  float v202;
  char v203;
  float v204;
  float v205;
  char v206;
  float v207;
  float v208;
  float v209;
  float v210;
  float v211;
  float v212;
  float v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  float v218;
  float v219;
  float v220;
  float v221;
  float v222;
  float v223;
  float v224;
  float v225;
  float v226;
  float v227;
  float v228;
  float v229;
  float v230;
  float v231;
  float v232;
  float v233;
  float v234;
  float v235;
  float v236;
  float v237;
  float v238;
  float v239;
  float v240;
  float v241;
  float v242;
  float v243;
  float v244;

  v6 = *(_QWORD *)(result + 28);
  v7 = 2 * *result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (2 * v9 != 2 * v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)(result + 20);
    v12 = *(_QWORD *)(result + 36);
    v13 = *(_QWORD *)(result + 44) + 2 * v8;
    v14 = 2 * v9 - 2 * v8;
    v15 = *((_QWORD *)result + 14);
    v16 = (_QWORD *)*((_QWORD *)result + 16);
    v17 = *((_QWORD *)result + 15) + 2 * (*((_QWORD *)result + 13) * a2 / v7);
    v18 = *((_QWORD *)result + 19);
    v19 = (_QWORD *)*((_QWORD *)result + 7);
    v20 = (uint64_t *)*((_QWORD *)result + 8);
    v21 = (uint64_t *)*((_QWORD *)result + 17);
    v22 = *v20;
    v23 = v20[1];
    v214 = v20[2];
    v217 = v19[2];
    v24 = (char *)(v217 + v214 * v13 + v12);
    v25 = *v21;
    v26 = v21[1];
    v215 = v21[2];
    v216 = v16[2];
    v27 = (char *)(v216 + v215 * v17 + v15);
    v28 = 8191.0 / (float)*(unsigned int *)(v18 + 128);
    LOWORD(a5) = *(_WORD *)(v18 + 140);
    v29 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v18 + 142);
    v30 = (float)LODWORD(a5);
    v31 = v28 * *(float *)v18;
    v240 = v28 * *(float *)(v18 + 16);
    v241 = v28 * *(float *)(v18 + 8);
    v32 = v28 * *(float *)(v18 + 20);
    *(float *)&v33 = v28 * *(float *)(v18 + 28);
    v238 = *(float *)&v33;
    v239 = v32;
    LOWORD(v33) = *(_WORD *)(v18 + 144);
    v34 = (float)v33;
    LOWORD(v33) = *(_WORD *)(v18 + 146);
    v35 = (float)v33;
    LOWORD(v33) = *(_WORD *)(v18 + 148);
    v36 = (float)v33;
    LOWORD(v33) = *(_WORD *)(v18 + 150);
    v37 = (float)v33;
    LOWORD(v33) = *(_WORD *)(v18 + 152);
    v38 = (float)v33;
    v235 = *(float *)(v18 + 40);
    v236 = *(float *)(v18 + 36);
    v233 = *(float *)(v18 + 48) * 0.5;
    v234 = *(float *)(v18 + 44);
    v231 = *(float *)(v18 + 56) * 0.5;
    v232 = *(float *)(v18 + 52) * 0.5;
    v39 = *(float *)(v18 + 60) * 0.5;
    v229 = *(float *)(v18 + 76);
    v230 = *(float *)(v18 + 72);
    v227 = *(float *)(v18 + 84);
    v228 = *(float *)(v18 + 80);
    v225 = *(float *)(v18 + 92);
    v226 = *(float *)(v18 + 88);
    v223 = *(float *)(v18 + 100);
    v224 = *(float *)(v18 + 96);
    v40 = *(float *)(v18 + 104);
    v222 = v40;
    v41 = v18 + 164;
    v42 = v16[1];
    v43 = (_BYTE *)(*v16 + *v21 * v17 + v15);
    result = (char *)(v42 + v26 * v17 + v15);
    v44 = v18 + 16548;
    if (!v42)
      result = 0;
    v45 = *v19 + v22 * v13;
    v46 = v19[1] + v20[1] * (v13 / 2);
    v47 = v18 + 32932;
    v48 = (_BYTE *)(v45 + v12);
    v49 = v46 + v12;
    v50 = *(float *)(v18 + 108);
    v51 = *(float *)(v18 + 112);
    v53 = *(float *)(v18 + 116);
    v52 = *(float *)(v18 + 120);
    v243 = (float)LODWORD(a5);
    v244 = v29;
    v242 = v31;
    v237 = v35;
    v220 = v51;
    v221 = v50;
    v218 = *(float *)(v18 + 64) * 0.5;
    v219 = *(float *)(v18 + 68) * 0.5;
    do
    {
      v54 = &v48[v22];
      v55 = &result[v26];
      v56 = &v43[v25];
      if (v11)
      {
        v57 = 0;
        v58 = &v48[v22];
        v59 = &v43[v25];
        do
        {
          LOBYTE(v40) = *(_BYTE *)(v49 + v57 + 1);
          v60 = (float)LODWORD(v40) - v30;
          v61 = LODWORD(v241);
          v62 = v241 * v60;
          LOBYTE(v61) = *v48;
          v63 = v31 * (float)((float)v61 - v29);
          v64 = (float)(v241 * v60) + v63;
          v65 = 8191.0;
          if (v64 <= 8191.0)
          {
            v65 = (float)(v241 * v60) + v63;
            if (v64 < 0.0)
              v65 = 0.0;
          }
          LOBYTE(v64) = *(_BYTE *)(v49 + v57);
          v66 = (float)LODWORD(v64) - v30;
          v67 = (float)(v239 * v60) + (float)(v66 * v240);
          v68 = 8191.0;
          if ((float)(v63 + v67) <= 8191.0)
          {
            v68 = v63 + v67;
            if ((float)(v63 + v67) < 0.0)
              v68 = 0.0;
          }
          v69 = v238 * v66;
          v70 = (float)(v238 * v66) + v63;
          v71 = 8191.0;
          if (v70 <= 8191.0)
          {
            v71 = v70;
            if (v70 < 0.0)
              v71 = 0.0;
          }
          LOBYTE(v70) = v48[1];
          v72 = v31 * (float)((float)LODWORD(v70) - v29);
          v73 = 8191.0;
          if ((float)(v62 + v72) <= 8191.0)
          {
            v73 = v62 + v72;
            if ((float)(v62 + v72) < 0.0)
              v73 = 0.0;
          }
          v74 = 8191.0;
          if ((float)(v67 + v72) <= 8191.0)
          {
            v74 = v67 + v72;
            if ((float)(v67 + v72) < 0.0)
              v74 = 0.0;
          }
          v75 = v69 + v72;
          v76 = (float)(v69 + v72) <= 8191.0;
          v77 = 8191.0;
          if (v76)
          {
            v77 = v75;
            if (v75 < 0.0)
              v77 = 0.0;
          }
          LOBYTE(v75) = *v58;
          v78 = v31 * (float)((float)LODWORD(v75) - v29);
          v79 = 8191.0;
          if ((float)(v62 + v78) <= 8191.0)
          {
            v79 = v62 + v78;
            if ((float)(v62 + v78) < 0.0)
              v79 = 0.0;
          }
          v80 = 8191.0;
          if ((float)(v67 + v78) <= 8191.0)
          {
            v80 = v67 + v78;
            if ((float)(v67 + v78) < 0.0)
              v80 = 0.0;
          }
          v81 = v69 + v78;
          v76 = (float)(v69 + v78) <= 8191.0;
          v82 = 8191.0;
          if (v76)
          {
            v82 = v81;
            if (v81 < 0.0)
              v82 = 0.0;
          }
          LOBYTE(_S23) = v58[1];
          v83 = v31 * (float)((float)LODWORD(_S23) - v29);
          v84 = v62 + v83;
          v76 = (float)(v62 + v83) <= 8191.0;
          v85 = 8191.0;
          if (v76)
          {
            v85 = v84;
            if (v84 < 0.0)
              v85 = 0.0;
          }
          v86 = v67 + v83;
          v76 = (float)(v67 + v83) <= 8191.0;
          v87 = 8191.0;
          if (v76)
          {
            v87 = v86;
            if (v86 < 0.0)
              v87 = 0.0;
          }
          v88 = v69 + v83;
          v89 = 8191.0;
          if (v88 <= 8191.0)
          {
            v89 = v88;
            if (v88 < 0.0)
              v89 = 0.0;
          }
          _H2 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v65, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H23 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v68, 0.0), 8191.0)));
          __asm { FCVT            S24, H23 }
          _H23 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          __asm { FCVT            S25, H23 }
          _H23 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          _H31 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          _H21 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          _H22 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          _H3 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          _H17 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          v109 = fmaxf(_S2, fmaxf(_S24, _S25));
          v110 = (float)((float)((float)(v51 * _S24) + (float)(v50 * _S2)) + (float)(v53 * _S25)) + (float)(v52 * v109);
          v111 = 8191.0;
          if (v110 <= 8191.0)
          {
            v111 = (float)((float)((float)(v51 * _S24) + (float)(v50 * _S2)) + (float)(v53 * _S25))
                 + (float)(v52 * v109);
            if (v110 < 0.0)
              v111 = 0.0;
          }
          __asm
          {
            FCVT            S26, H23
            FCVT            S28, H29
            FCVT            S30, H31
          }
          _H23 = *(_WORD *)(v44 + 2 * llroundf(v111));
          v116 = (float)((float)((float)(v51 * _S28) + (float)(v50 * _S26)) + (float)(v53 * _S30))
               + (float)(v52 * fmaxf(_S26, fmaxf(_S28, _S30)));
          v117 = 8191.0;
          if (v116 <= 8191.0)
          {
            v117 = v116;
            if (v116 < 0.0)
              v117 = 0.0;
          }
          __asm
          {
            FCVT            S9, H27
            FCVT            S10, H21
            FCVT            S11, H22
          }
          _H21 = *(_WORD *)(v44 + 2 * llroundf(v117));
          v122 = v52;
          v123 = (float)((float)((float)(v51 * _S10) + (float)(v50 * _S9)) + (float)(v53 * _S11))
               + (float)(v52 * fmaxf(_S9, fmaxf(_S10, _S11)));
          v124 = 8191.0;
          if (v123 <= 8191.0)
          {
            v124 = v123;
            if (v123 < 0.0)
              v124 = 0.0;
          }
          __asm
          {
            FCVT            S29, H1
            FCVT            S31, H3
            FCVT            S8, H17
            FCVT            S1, H23
          }
          v129 = _S2 * _S1;
          v130 = _S24 * _S1;
          v131 = _S25 * _S1;
          __asm { FCVT            S1, H21 }
          v133 = _S26 * _S1;
          v134 = _S28 * _S1;
          v135 = _S30 * _S1;
          LOWORD(_S1) = *(_WORD *)(v44 + 2 * llroundf(v124));
          __asm { FCVT            S2, H1 }
          v137 = _S9 * _S2;
          v138 = _S10 * _S2;
          v139 = _S11 * _S2;
          v140 = (float)((float)((float)(v51 * _S31) + (float)(v50 * _S29)) + (float)(v53 * _S8))
               + (float)(v122 * fmaxf(_S29, fmaxf(_S31, _S8)));
          v141 = 8191.0;
          if (v140 <= 8191.0)
          {
            v141 = v140;
            if (v140 < 0.0)
              v141 = 0.0;
          }
          _H25 = *(_WORD *)(v44 + 2 * llroundf(v141));
          __asm { FCVT            S25, H25 }
          v144 = _S29 * _S25;
          v145 = _S31 * _S25;
          v146 = _S8 * _S25;
          v147 = (float)((float)(v229 * v130) + (float)(v129 * v230)) + (float)(v131 * v228);
          v148 = (float)((float)(v226 * v130) + (float)(v129 * v227)) + (float)(v131 * v225);
          _S23 = (float)((float)(v223 * v130) + (float)(v129 * v224)) + (float)(v131 * v222);
          v150 = (float)((float)(v226 * v134) + (float)(v133 * v227)) + (float)(v135 * v225);
          v151 = llroundf(fminf(fmaxf(_S23, 0.0), 8191.0));
          v152 = llroundf(fminf(fmaxf((float)((float)(v229 * v134) + (float)(v133 * v230)) + (float)(v135 * v228), 0.0), 8191.0));
          LOWORD(_S23) = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v147, 0.0), 8191.0)));
          _H24 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v148, 0.0), 8191.0)));
          __asm
          {
            FCVT            S23, H23
            FCVT            S24, H24
          }
          v156 = llroundf(fminf(fmaxf((float)((float)(v223 * v134) + (float)(v133 * v224)) + (float)(v135 * v222), 0.0), 8191.0));
          _H17 = *(_WORD *)(v47 + 2 * v151);
          v158 = llroundf(fminf(fmaxf((float)((float)(v229 * v138) + (float)(v137 * v230)) + (float)(v139 * v228), 0.0), 8191.0));
          __asm { FCVT            S17, H17 }
          _H21 = *(_WORD *)(v47 + 2 * v152);
          __asm { FCVT            S21, H21 }
          v162 = llroundf(fminf(fmaxf((float)((float)(v226 * v138) + (float)(v137 * v227)) + (float)(v139 * v225), 0.0), 8191.0));
          _H22 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v150, 0.0), 8191.0)));
          __asm { FCVT            S22, H22 }
          v165 = llroundf(fminf(fmaxf((float)((float)(v223 * v138) + (float)(v137 * v224)) + (float)(v139 * v222), 0.0), 8191.0));
          _H1 = *(_WORD *)(v47 + 2 * v156);
          __asm { FCVT            S1, H1 }
          v168 = llroundf(fminf(fmaxf((float)((float)(v229 * v145) + (float)(v144 * v230)) + (float)(v146 * v228), 0.0), 8191.0));
          _H2 = *(_WORD *)(v47 + 2 * v158);
          v170 = llroundf(fminf(fmaxf((float)((float)(v226 * v145) + (float)(v144 * v227)) + (float)(v146 * v225), 0.0), 8191.0));
          v171 = llroundf(fminf(fmaxf((float)((float)(v223 * v145) + (float)(v144 * v224)) + (float)(v146 * v222), 0.0), 8191.0));
          v172 = (float)((float)((float)(v235 * _S24) + (float)(v236 * _S23)) + (float)(v234 * _S17)) + v34;
          if (v172 < v34)
            v173 = v34;
          else
            v173 = (float)((float)((float)(v235 * _S24) + (float)(v236 * _S23)) + (float)(v234 * _S17)) + v34;
          v76 = v172 <= v36;
          v174 = (float)((float)((float)(v235 * _S22) + (float)(v236 * _S21)) + (float)(v234 * _S1)) + v34;
          if (!v76)
            v173 = v36;
          v175 = llroundf(v173);
          if (v174 < v34)
            v176 = v34;
          else
            v176 = (float)((float)((float)(v235 * _S22) + (float)(v236 * _S21)) + (float)(v234 * _S1)) + v34;
          if (v174 <= v36)
            v177 = v176;
          else
            v177 = v36;
          v178 = llroundf(v177);
          _H3 = *(_WORD *)(v47 + 2 * v162);
          __asm
          {
            FCVT            S2, H2
            FCVT            S3, H3
          }
          v182 = _S23 + _S21;
          _H23 = *(_WORD *)(v47 + 2 * v165);
          __asm { FCVT            S23, H23 }
          _S22 = _S24 + _S22;
          _H24 = *(_WORD *)(v47 + 2 * v168);
          __asm { FCVT            S24, H24 }
          v187 = _S17 + _S1;
          v188 = (float)(v237 + (float)(v182 * v233)) + (float)(_S22 * v232);
          v189 = (float)(v237 + (float)(v182 * v39)) + (float)(_S22 * v218);
          LOWORD(_S22) = *(_WORD *)(v47 + 2 * v170);
          __asm { FCVT            S22, H22 }
          v191 = v188 + (float)(v187 * v231);
          v192 = v189 + (float)(v187 * v219);
          if (v191 < v37)
            v193 = v37;
          else
            v193 = v191;
          _H17 = *(_WORD *)(v47 + 2 * v171);
          __asm { FCVT            S17, H17 }
          if (!(_NF ^ _VF | _ZF))
            v193 = v38;
          v196 = llroundf(v193);
          if (v192 < v37)
            v197 = v37;
          else
            v197 = v192;
          if (v192 <= v38)
            v198 = v197;
          else
            v198 = v38;
          v199 = llroundf(v198);
          v200 = (float)((float)((float)(v235 * _S3) + (float)(v236 * _S2)) + (float)(v234 * _S23)) + v34;
          if (v200 < v34)
            v201 = v34;
          else
            v201 = (float)((float)((float)(v235 * _S3) + (float)(v236 * _S2)) + (float)(v234 * _S23)) + v34;
          v76 = v200 <= v36;
          v202 = (float)((float)((float)(v235 * _S22) + (float)(v236 * _S24)) + (float)(v234 * _S17)) + v34;
          if (!v76)
            v201 = v36;
          v203 = llroundf(v201);
          if (v202 < v34)
            v204 = v34;
          else
            v204 = (float)((float)((float)(v235 * _S22) + (float)(v236 * _S24)) + (float)(v234 * _S17)) + v34;
          if (v202 <= v36)
            v205 = v204;
          else
            v205 = v36;
          v206 = llroundf(v205);
          v207 = _S2 + _S24;
          *v43 = v175;
          v43[1] = v178;
          result[v57 + 1] = v199;
          result[v57] = v196;
          *v59 = v203;
          v59[1] = v206;
          v208 = _S3 + _S22;
          v209 = (float)(v237 + (float)(v207 * v233)) + (float)((float)(_S3 + _S22) * v232);
          v210 = _S23 + _S17;
          v211 = v209 + (float)((float)(_S23 + _S17) * v231);
          v212 = v38;
          if (v211 <= v38)
          {
            v212 = v211;
            if (v211 < v37)
              v212 = v37;
          }
          v213 = (float)((float)(v237 + (float)(v207 * v39)) + (float)(v208 * v218)) + (float)(v210 * v219);
          v55[v57] = llroundf(v212);
          v40 = v38;
          v29 = v244;
          v31 = v242;
          if (v213 <= v38)
          {
            v40 = v213;
            if (v213 < v37)
              v40 = v37;
          }
          v48 += 2;
          v58 += 2;
          v43 += 2;
          v59 += 2;
          v55[v57 + 1] = llroundf(v40);
          v57 += 2;
          v30 = v243;
          v51 = v220;
          v50 = v221;
          v52 = v122;
        }
        while (v11 > v57);
      }
      v48 = &v54[v22];
      v49 += v23;
      v43 = &v56[v25];
      result = &v55[v26];
      v10 += 2;
    }
    while (v14 > v10);
    if (v217 && v216)
    {
      do
      {
        result = (char *)memcpy(v27, v24, v11);
        v24 += v214;
        v27 += v215;
        --v14;
      }
      while (v14);
    }
    else if (v216)
    {
      do
      {
        if (v11)
          result = (char *)memset(v27, 255, v11);
        v27 += v215;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Mat_TRC_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v12 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v11 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Mat_TRC_422vf_GCD);
  return 0;
}

char *vt_Copy_420vf_TRC_Mat_TRC_422vf_GCD(char *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  unsigned int v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  _BYTE *v55;
  char *v56;
  _BYTE *v57;
  size_t v58;
  _BYTE *v59;
  _BYTE *v60;
  float v61;
  unsigned int v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  BOOL v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  unsigned int v121;
  float v123;
  float v127;
  float v128;
  float v129;
  float v131;
  float v132;
  float v133;
  float v135;
  float v136;
  float v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v144;
  unsigned int v146;
  unsigned int v148;
  unsigned int v150;
  unsigned int v151;
  float v152;
  float v153;
  float v154;
  char v155;
  float v156;
  float v157;
  char v158;
  float v162;
  float v168;
  float v169;
  float v170;
  float v172;
  float v173;
  float v174;
  char v177;
  float v178;
  float v179;
  char v180;
  float v181;
  float v182;
  float v183;
  char v184;
  float v185;
  float v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  float v195;
  float v196;
  float v197;
  float v198;
  float v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  float v206;
  float v207;
  float v208;
  float v209;
  float v210;

  v5 = *(_QWORD *)(result + 28);
  v6 = 2 * *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = *(_QWORD *)(result + 36);
    v12 = *(_QWORD *)(result + 44) + 2 * v7;
    v13 = 2 * v8 - 2 * v7;
    v14 = *((_QWORD *)result + 14);
    v15 = (_QWORD *)*((_QWORD *)result + 16);
    v16 = *((_QWORD *)result + 15) + 2 * (*((_QWORD *)result + 13) * a2 / v6);
    v17 = *((_QWORD *)result + 19);
    v18 = (_QWORD *)*((_QWORD *)result + 7);
    v19 = (uint64_t *)*((_QWORD *)result + 8);
    v20 = (uint64_t *)*((_QWORD *)result + 17);
    v21 = *v19;
    v22 = v19[1];
    v192 = v19[2];
    v194 = v18[2];
    v23 = (char *)(v194 + v192 * v12 + v11);
    v24 = *v20;
    v25 = v20[1];
    v26 = v20[2];
    v193 = v15[2];
    v27 = (char *)(v193 + v26 * v16 + v14);
    v28 = 8191.0 / (float)*(unsigned int *)(v17 + 128);
    LOWORD(a5) = *(_WORD *)(v17 + 140);
    v29 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v17 + 142);
    v30 = (float)LODWORD(a5);
    v31 = v28 * *(float *)v17;
    v205 = v28 * *(float *)(v17 + 16);
    v206 = v28 * *(float *)(v17 + 8);
    v32 = v28 * *(float *)(v17 + 20);
    *(float *)&v33 = v28 * *(float *)(v17 + 28);
    v203 = *(float *)&v33;
    v204 = v32;
    LOWORD(v33) = *(_WORD *)(v17 + 144);
    v34 = (float)v33;
    LOWORD(v33) = *(_WORD *)(v17 + 146);
    v35 = (float)v33;
    LOWORD(v33) = *(_WORD *)(v17 + 148);
    v36 = (float)v33;
    LOWORD(v33) = *(_WORD *)(v17 + 150);
    v37 = (float)v33;
    LOWORD(v33) = *(_WORD *)(v17 + 152);
    v38 = (float)v33;
    v200 = *(float *)(v17 + 40);
    v201 = *(float *)(v17 + 36);
    v198 = *(float *)(v17 + 52) * 0.5;
    v199 = *(float *)(v17 + 48) * 0.5;
    v196 = *(float *)(v17 + 44);
    v197 = *(float *)(v17 + 56) * 0.5;
    v209 = *(float *)(v17 + 64) * 0.5;
    v210 = *(float *)(v17 + 60) * 0.5;
    v195 = *(float *)(v17 + 72);
    v39 = *(float *)(v17 + 68) * 0.5;
    v208 = v39;
    v41 = *(float *)(v17 + 76);
    v40 = *(float *)(v17 + 80);
    v42 = *(float *)(v17 + 84);
    v43 = *(float *)(v17 + 88);
    v44 = *(float *)(v17 + 92);
    v45 = *(float *)(v17 + 96);
    v46 = *(float *)(v17 + 100);
    v47 = *(float *)(v17 + 104);
    v48 = v15[1];
    v49 = (_BYTE *)(*v15 + *v20 * v16 + v14);
    result = (char *)(v48 + v25 * v16 + v14);
    v50 = v17 + 16548;
    v51 = v17 + 164;
    if (!v48)
      result = 0;
    v52 = v18[1];
    v53 = (_BYTE *)(*v18 + v21 * v12 + v11);
    v54 = v52 + v19[1] * (v12 / 2) + v11;
    v207 = (float)LODWORD(a5);
    v202 = v35;
    do
    {
      v55 = &v53[v21];
      v56 = &result[v25];
      v57 = &v49[v24];
      if (v10)
      {
        v58 = 0;
        v59 = &v53[v21];
        v60 = &v49[v24];
        do
        {
          LOBYTE(v39) = *(_BYTE *)(v54 + v58 + 1);
          v61 = (float)LODWORD(v39) - v30;
          v62 = LODWORD(v206);
          v63 = v206 * v61;
          LOBYTE(v62) = *v53;
          v64 = v31 * (float)((float)v62 - v29);
          v65 = (float)(v206 * v61) + v64;
          v66 = 8191.0;
          if (v65 <= 8191.0)
          {
            v66 = (float)(v206 * v61) + v64;
            if (v65 < 0.0)
              v66 = 0.0;
          }
          LOBYTE(v65) = *(_BYTE *)(v54 + v58);
          v67 = (float)LODWORD(v65) - v30;
          v68 = (float)(v204 * v61) + (float)(v67 * v205);
          v69 = 8191.0;
          if ((float)(v64 + v68) <= 8191.0)
          {
            v69 = v64 + v68;
            if ((float)(v64 + v68) < 0.0)
              v69 = 0.0;
          }
          v70 = v203 * v67;
          v71 = (float)(v203 * v67) + v64;
          v72 = 8191.0;
          if (v71 <= 8191.0)
          {
            v72 = v71;
            if (v71 < 0.0)
              v72 = 0.0;
          }
          LOBYTE(v71) = v53[1];
          v73 = v31 * (float)((float)LODWORD(v71) - v29);
          v74 = 8191.0;
          if ((float)(v63 + v73) <= 8191.0)
          {
            v74 = v63 + v73;
            if ((float)(v63 + v73) < 0.0)
              v74 = 0.0;
          }
          v75 = v68 + v73;
          v76 = 8191.0;
          if ((float)(v68 + v73) <= 8191.0)
          {
            v76 = v68 + v73;
            if (v75 < 0.0)
              v76 = 0.0;
          }
          v77 = v70 + v73;
          v78 = 8191.0;
          if (v77 <= 8191.0)
          {
            v78 = v77;
            if (v77 < 0.0)
              v78 = 0.0;
          }
          LOBYTE(v77) = *v59;
          v79 = v29;
          v80 = v31;
          v81 = v31 * (float)((float)LODWORD(v77) - v29);
          v82 = 8191.0;
          if ((float)(v63 + v81) <= 8191.0)
          {
            v82 = v63 + v81;
            if ((float)(v63 + v81) < 0.0)
              v82 = 0.0;
          }
          v83 = 8191.0;
          if ((float)(v68 + v81) <= 8191.0)
          {
            v83 = v68 + v81;
            if ((float)(v68 + v81) < 0.0)
              v83 = 0.0;
          }
          v84 = v70 + v81;
          v85 = (float)(v70 + v81) <= 8191.0;
          v86 = 8191.0;
          if (v85)
          {
            v86 = v84;
            if (v84 < 0.0)
              v86 = 0.0;
          }
          LOBYTE(v75) = v59[1];
          v87 = v80 * (float)((float)LODWORD(v75) - v79);
          v88 = v63 + v87;
          v85 = (float)(v63 + v87) <= 8191.0;
          v89 = 8191.0;
          if (v85)
          {
            v89 = v88;
            if (v88 < 0.0)
              v89 = 0.0;
          }
          v90 = v68 + v87;
          v85 = (float)(v68 + v87) <= 8191.0;
          v91 = 8191.0;
          if (v85)
          {
            v91 = v90;
            if (v90 < 0.0)
              v91 = 0.0;
          }
          v92 = v70 + v87;
          if (v92 < 0.0)
            v93 = 0.0;
          else
            v93 = v92;
          if (v92 <= 8191.0)
            v94 = v93;
          else
            v94 = 8191.0;
          _H4 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v66, 0.0), 8191.0)));
          _H5 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v69, 0.0), 8191.0)));
          __asm
          {
            FCVT            S4, H4
            FCVT            S5, H5
          }
          _H7 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          _H24 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          _H25 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          _H26 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          _H17 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          __asm
          {
            FCVT            S27, H27
            FCVT            S17, H17
          }
          _H1 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          _H6 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H2 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          v121 = llroundf(fminf(fmaxf(v94, 0.0), 8191.0));
          _S3 = (float)((float)(v41 * _S5) + (float)(_S4 * v195)) + (float)(_S7 * v40);
          v123 = (float)((float)(v43 * _S5) + (float)(_S4 * v42)) + (float)(_S7 * v44);
          _S4 = (float)((float)(v46 * _S5) + (float)(_S4 * v45)) + (float)(_S7 * v47);
          _S5 = (float)((float)(v41 * _S25) + (float)(_S24 * v195)) + (float)(_S26 * v40);
          _S7 = (float)((float)(v43 * _S25) + (float)(_S24 * v42)) + (float)(_S26 * v44);
          v127 = (float)((float)(v46 * _S25) + (float)(_S24 * v45)) + (float)(_S26 * v47);
          v128 = (float)((float)(v41 * _S17) + (float)(_S27 * v195)) + (float)(_S1 * v40);
          v129 = (float)((float)(v43 * _S17) + (float)(_S27 * v42)) + (float)(_S1 * v44);
          _S1 = (float)((float)(v46 * _S17) + (float)(_S27 * v45)) + (float)(_S1 * v47);
          v131 = (float)(v41 * _S2) + (float)(_S6 * v195);
          v132 = (float)(v43 * _S2) + (float)(_S6 * v42);
          v133 = (float)(v46 * _S2) + (float)(_S6 * v45);
          LOWORD(_S6) = *(_WORD *)(v51 + 2 * v121);
          __asm { FCVT            S6, H6 }
          v135 = v131 + (float)(_S6 * v40);
          v136 = v132 + (float)(_S6 * v44);
          v137 = v133 + (float)(_S6 * v47);
          v138 = llroundf(fminf(fmaxf(_S4, 0.0), 8191.0));
          v139 = llroundf(fminf(fmaxf(_S5, 0.0), 8191.0));
          LOWORD(_S3) = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          LOWORD(_S4) = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v123, 0.0), 8191.0)));
          __asm
          {
            FCVT            S3, H3
            FCVT            S4, H4
          }
          LOWORD(_S5) = *(_WORD *)(v50 + 2 * v138);
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = *(_WORD *)(v50 + 2 * v139);
          __asm { FCVT            S6, H6 }
          v144 = llroundf(fminf(fmaxf(v129, 0.0), 8191.0));
          LOWORD(_S7) = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(_S7, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          v146 = llroundf(fminf(fmaxf(_S1, 0.0), 8191.0));
          LOWORD(_S1) = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v127, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          v148 = llroundf(fminf(fmaxf(v135, 0.0), 8191.0));
          _H17 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v128, 0.0), 8191.0)));
          v150 = llroundf(fminf(fmaxf(v136, 0.0), 8191.0));
          v151 = llroundf(fminf(fmaxf(v137, 0.0), 8191.0));
          v152 = (float)((float)((float)(v200 * _S4) + (float)(v201 * _S3)) + (float)(v196 * _S5)) + v34;
          if (v152 < v34)
            v153 = v34;
          else
            v153 = (float)((float)((float)(v200 * _S4) + (float)(v201 * _S3)) + (float)(v196 * _S5)) + v34;
          v85 = v152 <= v36;
          v154 = (float)((float)((float)(v200 * _S7) + (float)(v201 * _S6)) + (float)(v196 * _S1)) + v34;
          if (!v85)
            v153 = v36;
          v155 = llroundf(v153);
          if (v154 < v34)
            v156 = v34;
          else
            v156 = (float)((float)((float)(v200 * _S7) + (float)(v201 * _S6)) + (float)(v196 * _S1)) + v34;
          if (v154 <= v36)
            v157 = v156;
          else
            v157 = v36;
          v158 = llroundf(v157);
          _H2 = *(_WORD *)(v50 + 2 * v144);
          __asm
          {
            FCVT            S17, H17
            FCVT            S2, H2
          }
          v162 = _S3 + _S6;
          _H6 = *(_WORD *)(v50 + 2 * v146);
          __asm { FCVT            S6, H6 }
          _S4 = _S4 + _S7;
          _H7 = *(_WORD *)(v50 + 2 * v148);
          __asm { FCVT            S7, H7 }
          v168 = _S5 + _S1;
          v169 = (float)(v202 + (float)(v162 * v199)) + (float)(_S4 * v198);
          v170 = (float)(v202 + (float)(v162 * v210)) + (float)(_S4 * v209);
          LOWORD(_S4) = *(_WORD *)(v50 + 2 * v150);
          __asm { FCVT            S4, H4 }
          v172 = v169 + (float)(v168 * v197);
          v173 = v170 + (float)(v168 * v208);
          if (v172 < v37)
            v174 = v37;
          else
            v174 = v172;
          _H5 = *(_WORD *)(v50 + 2 * v151);
          __asm { FCVT            S5, H5 }
          if (!(_NF ^ _VF | _ZF))
            v174 = v38;
          v177 = llroundf(v174);
          if (v173 < v37)
            v178 = v37;
          else
            v178 = v173;
          if (v173 <= v38)
            v179 = v178;
          else
            v179 = v38;
          v180 = llroundf(v179);
          v181 = (float)((float)((float)(v200 * _S2) + (float)(v201 * _S17)) + (float)(v196 * _S6)) + v34;
          if (v181 < v34)
            v182 = v34;
          else
            v182 = (float)((float)((float)(v200 * _S2) + (float)(v201 * _S17)) + (float)(v196 * _S6)) + v34;
          v85 = v181 <= v36;
          v183 = (float)((float)((float)(v200 * _S4) + (float)(v201 * _S7)) + (float)(v196 * _S5)) + v34;
          if (!v85)
            v182 = v36;
          v184 = llroundf(v182);
          if (v183 < v34)
            v185 = v34;
          else
            v185 = (float)((float)((float)(v200 * _S4) + (float)(v201 * _S7)) + (float)(v196 * _S5)) + v34;
          if (v183 <= v36)
            v186 = v185;
          else
            v186 = v36;
          *v49 = v155;
          v49[1] = v158;
          result[v58 + 1] = v180;
          result[v58] = v177;
          *v60 = v184;
          v60[1] = llroundf(v186);
          v187 = _S2 + _S4;
          v188 = _S6 + _S5;
          v189 = (float)((float)(v202 + (float)((float)(_S17 + _S7) * v199)) + (float)(v187 * v198))
               + (float)((float)(_S6 + _S5) * v197);
          v190 = v38;
          if (v189 <= v38)
          {
            v190 = v189;
            if (v189 < v37)
              v190 = v37;
          }
          v191 = (float)((float)(v202 + (float)((float)(_S17 + _S7) * v210)) + (float)(v187 * v209))
               + (float)(v188 * v208);
          v56[v58] = llroundf(v190);
          v39 = v38;
          v29 = v79;
          v31 = v80;
          if (v191 <= v38)
          {
            v39 = v191;
            if (v191 < v37)
              v39 = v37;
          }
          v53 += 2;
          v59 += 2;
          v49 += 2;
          v60 += 2;
          v56[v58 + 1] = llroundf(v39);
          v58 += 2;
          v30 = v207;
        }
        while (v10 > v58);
      }
      v53 = &v55[v21];
      v54 += v22;
      v49 = &v57[v24];
      result = &v56[v25];
      v9 += 2;
    }
    while (v13 > v9);
    if (v194 && v193)
    {
      do
      {
        result = (char *)memcpy(v27, v23, v10);
        v23 += v192;
        v27 += v26;
        --v13;
      }
      while (v13);
    }
    else if (v193)
    {
      do
      {
        if (v10)
          result = (char *)memset(v27, 255, v10);
        v27 += v26;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_rgb_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v12 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v11 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_rgb_422vf_GCD);
  return 0;
}

_QWORD *vt_Copy_420vf_rgb_422vf_GCD(_QWORD *result, uint64_t a2, double a3, double a4, double a5, float a6, float a7)
{
  float v7;
  float v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  uint64_t v54;
  _BYTE *v55;
  char *v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  uint64_t v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE *v80;
  _BYTE *v81;
  size_t v82;
  _BYTE *v83;
  _BYTE *v84;
  unsigned int v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  BOOL v101;
  float v102;
  char v103;
  float v104;
  float v105;
  char v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;

  v14 = *(_QWORD *)((char *)result + 28);
  v15 = 2 * *(unsigned __int8 *)result;
  v16 = v14 * a2 / v15;
  v17 = (v14 + v14 * a2) / v15;
  if (2 * v17 != 2 * v16)
  {
    v18 = 0;
    v19 = *(_QWORD *)((char *)result + 20);
    v20 = *(_QWORD *)((char *)result + 36);
    v21 = *(_QWORD *)((char *)result + 44) + 2 * v16;
    v22 = 2 * v17 - 2 * v16;
    v23 = result[14];
    v24 = (_QWORD *)result[16];
    v25 = result[15] + 2 * (result[13] * a2 / v15);
    v26 = result[19];
    v28 = (_QWORD *)result[7];
    v27 = (uint64_t *)result[8];
    v29 = (uint64_t *)result[17];
    v30 = *v27;
    v31 = v27[1];
    v32 = v27[2];
    v33 = v28[2];
    v34 = *v29;
    v35 = v29[1];
    v36 = v29[2];
    v37 = v24[2];
    v38 = (char *)(v37 + v36 * v25 + v23);
    v39 = (float)*(unsigned int *)(v26 + 136) / (float)*(unsigned int *)(v26 + 128);
    LOWORD(a6) = *(_WORD *)(v26 + 140);
    LOWORD(a7) = *(_WORD *)(v26 + 142);
    v40 = *(float *)v26;
    v41 = *(float *)(v26 + 8);
    v42 = *(float *)(v26 + 16);
    v43 = *(float *)(v26 + 20);
    v44 = *(float *)(v26 + 28);
    LOWORD(v9) = *(_WORD *)(v26 + 144);
    LOWORD(v10) = *(_WORD *)(v26 + 146);
    LOWORD(v11) = *(_WORD *)(v26 + 148);
    LOWORD(v12) = *(_WORD *)(v26 + 150);
    LOWORD(v13) = *(_WORD *)(v26 + 152);
    v45 = *(float *)(v26 + 36);
    v46 = *(float *)(v26 + 40);
    v47 = *(float *)(v26 + 44);
    v48 = *(float *)(v26 + 48);
    v49 = *(float *)(v26 + 52);
    v50 = *(float *)(v26 + 56);
    v51 = *(float *)(v26 + 60);
    v52 = *(float *)(v26 + 64);
    v53 = *(float *)(v26 + 68);
    v54 = v24[1];
    v55 = (_BYTE *)(*v24 + v34 * v25 + v23);
    result = (_QWORD *)(v54 + v35 * v25 + v23);
    v56 = (char *)(v33 + v32 * v21 + v20);
    v57 = (float)LODWORD(a6);
    v58 = (float)LODWORD(a7);
    v59 = v39 * v40;
    v60 = v39 * v41;
    v61 = v39 * v42;
    v62 = v39 * v43;
    v63 = v39 * v44;
    v64 = (float)v9;
    v65 = (float)v10;
    v66 = (float)v11;
    v67 = (float)v12;
    v68 = (float)v13;
    v69 = v48 * 0.5;
    v70 = v49 * 0.5;
    v71 = v50 * 0.5;
    v72 = v51 * 0.5;
    v73 = v52 * 0.5;
    v74 = v53 * 0.5;
    if (!v54)
      result = 0;
    v75 = v28[1];
    v76 = (_BYTE *)(*v28 + v30 * v21 + v20);
    if (v21 >= 0)
      v77 = v21;
    else
      v77 = v21 + 1;
    v78 = v75 + v31 * (v77 >> 1) + v20;
    v79 = (uint64_t)result + v35 + 1;
    do
    {
      v80 = &v76[v30];
      v81 = &v55[v34];
      if (v19)
      {
        v82 = 0;
        v83 = &v76[v30];
        v84 = &v55[v34];
        do
        {
          LOBYTE(v53) = *(_BYTE *)(v78 + v82);
          *(float *)&v85 = (float)LODWORD(v53);
          v86 = *(float *)&v85 - v58;
          LOBYTE(v85) = *(_BYTE *)(v78 + v82 + 1);
          v87 = (float)v85 - v58;
          v88 = v60 * v87;
          v89 = (float)(v62 * v87) + (float)(v86 * v61);
          v90 = v63 * v86;
          LOBYTE(v7) = *v76;
          v91 = v59 * (float)((float)LODWORD(v7) - v57);
          LOBYTE(v8) = v76[1];
          v92 = v59 * (float)((float)LODWORD(v8) - v57);
          v93 = v88 + v91;
          v94 = v91 + v89;
          v95 = v90 + v91;
          v96 = v88 + v92;
          v97 = v89 + v92;
          v98 = v90 + v92;
          v99 = (float)((float)((float)(v46 * v94) + (float)(v45 * v93)) + (float)(v47 * v95)) + v64;
          if (v99 < v64)
            v100 = v64;
          else
            v100 = (float)((float)((float)(v46 * v94) + (float)(v45 * v93)) + (float)(v47 * v95)) + v64;
          v101 = v99 <= v66;
          v102 = (float)((float)((float)(v46 * v97) + (float)(v45 * v96)) + (float)(v47 * v98)) + v64;
          if (!v101)
            v100 = v66;
          v103 = llroundf(v100);
          if (v102 < v64)
            v104 = v64;
          else
            v104 = (float)((float)((float)(v46 * v97) + (float)(v45 * v96)) + (float)(v47 * v98)) + v64;
          if (v102 <= v66)
            v105 = v104;
          else
            v105 = v66;
          v106 = llroundf(v105);
          v107 = v93 + v96;
          LOBYTE(v96) = *v83;
          v108 = v59 * (float)((float)LODWORD(v96) - v57);
          v109 = v94 + v97;
          LOBYTE(v94) = v83[1];
          v110 = v95 + v98;
          v111 = (float)(v65 + (float)(v107 * v69)) + (float)(v109 * v70);
          v112 = (float)(v65 + (float)(v107 * v72)) + (float)(v109 * v73);
          v113 = v88 + v108;
          v114 = v111 + (float)(v110 * v71);
          v115 = v112 + (float)(v110 * v74);
          if (v114 < v67)
            v116 = v67;
          else
            v116 = v114;
          v117 = v89 + v108;
          v118 = v90 + v108;
          *v55 = v103;
          v55[1] = v106;
          if (v114 <= v68)
            v119 = v116;
          else
            v119 = v68;
          *((_BYTE *)result + v82) = llroundf(v119);
          if (v115 < v67)
            v120 = v67;
          else
            v120 = v115;
          if (v115 > v68)
            v120 = v68;
          *((_BYTE *)result + v82 + 1) = llroundf(v120);
          v121 = (float)((float)((float)(v46 * v117) + (float)(v45 * v113)) + (float)(v47 * v118)) + v64;
          v122 = v66;
          if (v121 <= v66)
          {
            v122 = (float)((float)((float)(v46 * v117) + (float)(v45 * v113)) + (float)(v47 * v118)) + v64;
            if (v121 < v64)
              v122 = v64;
          }
          v123 = v59 * (float)((float)LODWORD(v94) - v57);
          v124 = v88 + v123;
          v125 = v89 + v123;
          v126 = v90 + v123;
          v127 = (float)((float)((float)(v46 * v125) + (float)(v45 * v124)) + (float)(v47 * (float)(v90 + v123))) + v64;
          *v84 = llroundf(v122);
          v128 = v66;
          if (v127 <= v66)
          {
            v128 = v127;
            if (v127 < v64)
              v128 = v64;
          }
          v84[1] = llroundf(v128);
          v129 = v113 + v124;
          v130 = v117 + v125;
          v131 = v118 + v126;
          v8 = (float)((float)(v65 + (float)((float)(v113 + v124) * v69)) + (float)(v130 * v70)) + (float)(v131 * v71);
          v7 = v68;
          if (v8 <= v68)
          {
            v7 = v8;
            if (v8 < v67)
              v7 = v67;
          }
          v132 = (float)((float)(v65 + (float)(v129 * v72)) + (float)(v130 * v73)) + (float)(v131 * v74);
          *(_BYTE *)(v79 + v82 - 1) = llroundf(v7);
          v53 = v68;
          if (v132 <= v68)
          {
            v53 = v132;
            if (v132 < v67)
              v53 = v67;
          }
          v76 += 2;
          v83 += 2;
          v55 += 2;
          v84 += 2;
          *(_BYTE *)(v79 + v82) = llroundf(v53);
          v82 += 2;
        }
        while (v19 > v82);
      }
      v76 = &v80[v30];
      v78 += v31;
      v55 = &v81[v34];
      result = (_QWORD *)((char *)result + v35 + v35);
      v18 += 2;
      v79 += 2 * v35;
    }
    while (v22 > v18);
    if (v33 && v37)
    {
      do
      {
        result = memcpy(v38, v56, v19);
        v56 += v32;
        v38 += v36;
        --v22;
      }
      while (v22);
    }
    else if (v37)
    {
      do
      {
        if (v19)
          result = memset(v38, 255, v19);
        v38 += v36;
        --v22;
      }
      while (v22);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Tone_Mat_TRC_2vuyf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[3];
  v18 = a6[5];
  if ((v14 & 1) != 0)
  {
    ++v18;
    ++v14;
    if ((v11 & 1) != 0)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  v19 = a6[2];
  v20 = a6[4];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9)
    v12 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15)
    v21 = v19;
  else
    v21 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v18;
  if (v12 >= v21)
    v24 = v21;
  else
    v24 = v12;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Tone_Mat_TRC_2vuyf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_420vf_TRC_Tone_Mat_TRC_2vuyf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  _WORD *v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  unsigned int v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  float v57;
  float v58;
  _BYTE *v59;
  unsigned __int8 *v60;
  size_t v61;
  _BYTE *v62;
  _WORD *v63;
  unsigned __int8 *v64;
  _WORD *v65;
  float v66;
  unsigned int v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  BOOL v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v115;
  float v116;
  float v117;
  float v118;
  float v123;
  float v124;
  float v129;
  float v130;
  float v131;
  float v136;
  float v137;
  float v138;
  float v140;
  float v141;
  float v142;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v158;
  float v161;
  float v162;
  float v164;
  float v165;
  float v166;
  float v167;
  unsigned int v171;
  unsigned int v172;
  unsigned int v175;
  unsigned int v176;
  unsigned int v178;
  unsigned int v180;
  unsigned int v182;
  unsigned int v184;
  float v185;
  float v186;
  float v187;
  float v188;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;
  float v198;
  unsigned __int8 v199;
  float v200;
  float v202;
  float v203;
  float v204;
  float v211;
  float v212;
  float v213;
  float v214;
  float v215;
  float v216;
  float v217;
  float v218;
  float v219;
  float v220;
  float v221;
  float v222;
  float v223;
  float v224;
  float v225;
  float v226;
  float v227;
  float v228;
  float v229;
  float v230;
  float v231;
  float v232;
  float v233;
  float v234;
  float v235;
  float v236;
  float v237;
  float v238;
  float v239;
  float v240;
  float v241;
  float v242;
  float v243;
  float v244;
  float v245;

  v7 = *(_QWORD *)(result + 28);
  v8 = v7 * a2;
  v9 = 2 * *result;
  v10 = (v7 + v7 * a2) / v9;
  v11 = *((_QWORD *)result + 14);
  v12 = *((_QWORD *)result + 13) * a2 / v9;
  v13 = (_QWORD *)*((_QWORD *)result + 16);
  v14 = *((_QWORD *)result + 15) + 2 * v12;
  v15 = (uint64_t *)*((_QWORD *)result + 17);
  v16 = v15[1];
  v17 = v13[1];
  v18 = (char *)(v17 + v16 * v14 + v11);
  v19 = v8 / v9;
  if (v17)
    v20 = (_WORD *)(v17 + v16 * v14 + v11);
  else
    v20 = 0;
  if (2 * v10 != 2 * v19)
  {
    v21 = 0;
    v22 = *(_QWORD *)(result + 20);
    v23 = *(_QWORD *)(result + 36);
    v24 = *(_QWORD *)(result + 44) + 2 * v19;
    v25 = 2 * v10 - 2 * v19;
    v26 = *((_QWORD *)result + 19);
    v27 = (_QWORD *)*((_QWORD *)result + 7);
    v28 = (uint64_t *)*((_QWORD *)result + 8);
    v29 = *v28;
    v30 = v28[1];
    v31 = v28[2];
    v32 = v27[2];
    v33 = (char *)(v32 + v31 * v24 + v23);
    v34 = *v15;
    LOWORD(a5) = *(_WORD *)(v26 + 140);
    LOWORD(a6) = *(_WORD *)(v26 + 142);
    v35 = 8191.0 / (float)*(unsigned int *)(v26 + 128);
    v36 = (float)LODWORD(a5);
    v37 = (float)LODWORD(a6);
    v38 = v35 * *(float *)v26;
    v243 = v35 * *(float *)(v26 + 16);
    v244 = v35 * *(float *)(v26 + 8);
    v39 = v35 * *(float *)(v26 + 20);
    *(float *)&v40 = v35 * *(float *)(v26 + 28);
    v241 = *(float *)&v40;
    v242 = v39;
    LOWORD(v40) = *(_WORD *)(v26 + 144);
    v41 = (float)v40;
    LOWORD(v40) = *(_WORD *)(v26 + 146);
    v42 = (float)v40;
    LOWORD(v40) = *(_WORD *)(v26 + 148);
    v43 = (float)v40;
    LOWORD(v40) = *(_WORD *)(v26 + 150);
    v44 = (float)v40;
    LOWORD(v40) = *(_WORD *)(v26 + 152);
    v45 = (float)v40;
    v46 = *(float *)(v26 + 40);
    v47 = *(float *)(v26 + 48) * 0.5;
    v48 = *(float *)(v26 + 52) * 0.5;
    v49 = *(float *)(v26 + 56) * 0.5;
    v50 = *(float *)(v26 + 64) * 0.5;
    v236 = *(float *)(v26 + 72);
    v233 = *(float *)(v26 + 80);
    v234 = *(float *)(v26 + 76);
    v231 = *(float *)(v26 + 88);
    v232 = *(float *)(v26 + 84);
    v230 = *(float *)(v26 + 92);
    v229 = *(float *)(v26 + 96);
    v228 = *(float *)(v26 + 100);
    v226 = *(float *)(v26 + 104);
    v51 = v26 + 164;
    v52 = v26 + 16548;
    v53 = *v13 + v34 * v14;
    v54 = v26 + 32932;
    result = (unsigned __int8 *)(v53 + v11);
    v55 = (_BYTE *)(*v27 + v29 * v24 + v23);
    v56 = v27[1] + v30 * (v24 / 2) + v23;
    v224 = *(float *)(v26 + 112);
    v225 = *(float *)(v26 + 108);
    v57 = *(float *)(v26 + 116);
    v58 = *(float *)(v26 + 120);
    v222 = *(float *)(v26 + 36);
    v223 = v57;
    v245 = (float)LODWORD(a6);
    v239 = v38;
    v240 = v42;
    v238 = (float)LODWORD(a5);
    v237 = *(float *)(v26 + 44);
    v235 = *(float *)(v26 + 68) * 0.5;
    v227 = *(float *)(v26 + 60) * 0.5;
    v221 = v43;
    do
    {
      v59 = &v55[v29];
      v60 = &result[v34];
      if (v22)
      {
        v61 = 0;
        v62 = &v55[v29];
        v63 = (_WORD *)((char *)v20 + v16);
        v64 = &result[v34];
        v65 = v20;
        do
        {
          LOBYTE(v57) = *(_BYTE *)(v56 + v61 + 1);
          v66 = (float)LODWORD(v57) - v37;
          v67 = LODWORD(v244);
          v68 = v244 * v66;
          LOBYTE(v67) = *v55;
          v69 = v38 * (float)((float)v67 - v36);
          v70 = (float)(v244 * v66) + v69;
          v71 = 8191.0;
          if (v70 <= 8191.0)
          {
            v71 = (float)(v244 * v66) + v69;
            if (v70 < 0.0)
              v71 = 0.0;
          }
          LOBYTE(v70) = *(_BYTE *)(v56 + v61);
          v72 = (float)LODWORD(v70) - v37;
          v73 = (float)(v242 * v66) + (float)(v72 * v243);
          v74 = 8191.0;
          if ((float)(v69 + v73) <= 8191.0)
          {
            v74 = v69 + v73;
            if ((float)(v69 + v73) < 0.0)
              v74 = 0.0;
          }
          v75 = v241 * v72;
          v76 = (float)(v241 * v72) + v69;
          v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            v77 = v76;
            if (v76 < 0.0)
              v77 = 0.0;
          }
          LOBYTE(v76) = v55[1];
          v78 = v38 * (float)((float)LODWORD(v76) - v36);
          v79 = 8191.0;
          if ((float)(v68 + v78) <= 8191.0)
          {
            v79 = v68 + v78;
            if ((float)(v68 + v78) < 0.0)
              v79 = 0.0;
          }
          v80 = 8191.0;
          if ((float)(v73 + v78) <= 8191.0)
          {
            v80 = v73 + v78;
            if ((float)(v73 + v78) < 0.0)
              v80 = 0.0;
          }
          v81 = v75 + v78;
          v82 = (float)(v75 + v78) <= 8191.0;
          v83 = 8191.0;
          if (v82)
          {
            v83 = v81;
            if (v81 < 0.0)
              v83 = 0.0;
          }
          LOBYTE(v81) = *v62;
          v84 = v38 * (float)((float)LODWORD(v81) - v36);
          v85 = 8191.0;
          if ((float)(v68 + v84) <= 8191.0)
          {
            v85 = v68 + v84;
            if ((float)(v68 + v84) < 0.0)
              v85 = 0.0;
          }
          v86 = 8191.0;
          if ((float)(v73 + v84) <= 8191.0)
          {
            v86 = v73 + v84;
            if ((float)(v73 + v84) < 0.0)
              v86 = 0.0;
          }
          v87 = v75 + v84;
          v82 = (float)(v75 + v84) <= 8191.0;
          v88 = 8191.0;
          if (v82)
          {
            v88 = v87;
            if (v87 < 0.0)
              v88 = 0.0;
          }
          LOBYTE(v6) = v62[1];
          v89 = v38 * (float)((float)v6 - v36);
          v90 = v68 + v89;
          v82 = (float)(v68 + v89) <= 8191.0;
          v91 = 8191.0;
          if (v82)
          {
            v91 = v90;
            if (v90 < 0.0)
              v91 = 0.0;
          }
          v92 = v73 + v89;
          v82 = (float)(v73 + v89) <= 8191.0;
          v93 = 8191.0;
          if (v82)
          {
            v93 = v92;
            if (v92 < 0.0)
              v93 = 0.0;
          }
          v94 = v75 + v89;
          v95 = 8191.0;
          if (v94 <= 8191.0)
          {
            v95 = v94;
            if (v94 < 0.0)
              v95 = 0.0;
          }
          _H2 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H23 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          __asm { FCVT            S24, H23 }
          _H23 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          __asm { FCVT            S25, H23 }
          _H23 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          _H31 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          _H21 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          _H22 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          _H3 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          _H17 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v95, 0.0), 8191.0)));
          v115 = fmaxf(_S2, fmaxf(_S24, _S25));
          v116 = (float)((float)((float)(v224 * _S24) + (float)(v225 * _S2)) + (float)(v223 * _S25))
               + (float)(v58 * v115);
          v117 = 8191.0;
          if (v116 <= 8191.0)
          {
            v117 = (float)((float)((float)(v224 * _S24) + (float)(v225 * _S2)) + (float)(v223 * _S25))
                 + (float)(v58 * v115);
            if (v116 < 0.0)
              v117 = 0.0;
          }
          v118 = v46;
          __asm
          {
            FCVT            S26, H23
            FCVT            S28, H29
            FCVT            S30, H31
          }
          _H23 = *(_WORD *)(v52 + 2 * llroundf(v117));
          v123 = (float)((float)((float)(v224 * _S28) + (float)(v225 * _S26)) + (float)(v223 * _S30))
               + (float)(v58 * fmaxf(_S26, fmaxf(_S28, _S30)));
          v124 = 8191.0;
          if (v123 <= 8191.0)
          {
            v124 = v123;
            if (v123 < 0.0)
              v124 = 0.0;
          }
          __asm
          {
            FCVT            S9, H27
            FCVT            S10, H21
            FCVT            S11, H22
          }
          _H21 = *(_WORD *)(v52 + 2 * llroundf(v124));
          v129 = v58;
          v130 = (float)((float)((float)(v224 * _S10) + (float)(v225 * _S9)) + (float)(v223 * _S11))
               + (float)(v58 * fmaxf(_S9, fmaxf(_S10, _S11)));
          v131 = 8191.0;
          if (v130 <= 8191.0)
          {
            v131 = v130;
            if (v130 < 0.0)
              v131 = 0.0;
          }
          __asm
          {
            FCVT            S29, H1
            FCVT            S31, H3
            FCVT            S8, H17
            FCVT            S1, H23
          }
          v136 = _S2 * _S1;
          v137 = _S24 * _S1;
          v138 = _S25 * _S1;
          __asm { FCVT            S1, H21 }
          v140 = _S26 * _S1;
          v141 = _S28 * _S1;
          v142 = _S30 * _S1;
          LOWORD(_S1) = *(_WORD *)(v52 + 2 * llroundf(v131));
          __asm { FCVT            S2, H1 }
          v144 = _S9 * _S2;
          v145 = _S10 * _S2;
          v146 = _S11 * _S2;
          v147 = (float)((float)((float)(v224 * _S31) + (float)(v225 * _S29)) + (float)(v223 * _S8))
               + (float)(v129 * fmaxf(_S29, fmaxf(_S31, _S8)));
          v148 = 8191.0;
          if (v147 <= 8191.0)
          {
            v148 = v147;
            if (v147 < 0.0)
              v148 = 0.0;
          }
          _H25 = *(_WORD *)(v52 + 2 * llroundf(v148));
          __asm { FCVT            S25, H25 }
          v151 = _S29 * _S25;
          v152 = _S31 * _S25;
          v153 = _S8 * _S25;
          v154 = (float)((float)(v234 * v137) + (float)(v136 * v236)) + (float)(v138 * v233);
          v155 = (float)((float)(v231 * v137) + (float)(v136 * v232)) + (float)(v138 * v230);
          v156 = (float)((float)(v228 * v137) + (float)(v136 * v229)) + (float)(v138 * v226);
          _S24 = (float)((float)(v234 * v141) + (float)(v140 * v236)) + (float)(v142 * v233);
          v158 = (float)((float)(v231 * v141) + (float)(v140 * v232)) + (float)(v142 * v230);
          _S21 = (float)((float)(v228 * v141) + (float)(v140 * v229)) + (float)(v142 * v226);
          _S22 = (float)((float)(v234 * v145) + (float)(v144 * v236)) + (float)(v146 * v233);
          v161 = (float)((float)(v231 * v145) + (float)(v144 * v232)) + (float)(v146 * v230);
          v162 = (float)((float)(v228 * v145) + (float)(v144 * v229)) + (float)(v146 * v226);
          _S3 = (float)(v231 * v152) + (float)(v151 * v232);
          v164 = (float)(v228 * v152) + (float)(v151 * v229);
          v165 = (float)((float)(v234 * v152) + (float)(v151 * v236)) + (float)(v153 * v233);
          v166 = _S3 + (float)(v153 * v230);
          v167 = v164 + (float)(v153 * v226);
          _H1 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v154, 0.0), 8191.0)));
          __asm { FCVT            S29, H1 }
          _H1 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v155, 0.0), 8191.0)));
          v171 = llroundf(fminf(fmaxf(_S24, 0.0), 8191.0));
          LOWORD(_S24) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v156, 0.0), 8191.0)));
          v172 = llroundf(fminf(fmaxf(v158, 0.0), 8191.0));
          LOWORD(_S3) = *(_WORD *)(v54 + 2 * v171);
          __asm
          {
            FCVT            S27, H1
            FCVT            S17, H3
          }
          v175 = llroundf(fminf(fmaxf(_S21, 0.0), 8191.0));
          LOWORD(_S21) = *(_WORD *)(v54 + 2 * v172);
          v176 = llroundf(fminf(fmaxf(_S22, 0.0), 8191.0));
          LOWORD(_S22) = *(_WORD *)(v54 + 2 * v175);
          _H1 = *(_WORD *)(v54 + 2 * v176);
          v178 = llroundf(fminf(fmaxf(v162, 0.0), 8191.0));
          _H2 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v161, 0.0), 8191.0)));
          v180 = llroundf(fminf(fmaxf(v165, 0.0), 8191.0));
          _H3 = *(_WORD *)(v54 + 2 * v178);
          v182 = llroundf(fminf(fmaxf(v166, 0.0), 8191.0));
          __asm { FCVT            S23, H21 }
          v184 = llroundf(fminf(fmaxf(v167, 0.0), 8191.0));
          v46 = v118;
          v185 = (float)(v118 * _S27) + (float)(v222 * _S29);
          v186 = _S27 + _S23;
          v187 = (float)(v240 + (float)((float)(_S29 + _S17) * v47)) + (float)(v186 * v48);
          v188 = (float)(v240 + (float)((float)(_S29 + _S17) * v227)) + (float)(v186 * v50);
          _H21 = *(_WORD *)(v54 + 2 * v180);
          __asm
          {
            FCVT            S24, H24
            FCVT            S25, H22
          }
          v192 = v185 + (float)(v237 * _S24);
          v193 = _S24 + _S25;
          v194 = v187 + (float)((float)(_S24 + _S25) * v49);
          v195 = v188 + (float)(v193 * v235);
          if (v194 < v44)
            v196 = v44;
          else
            v196 = v194;
          v82 = v194 <= v45;
          _H22 = *(_WORD *)(v54 + 2 * v182);
          v198 = v192 + v41;
          if (!v82)
            v196 = v45;
          v199 = llroundf(v196);
          if (v198 < v41)
            v200 = v41;
          else
            v200 = v192 + v41;
          v82 = v198 <= v221;
          _H24 = *(_WORD *)(v54 + 2 * v184);
          *result = v199;
          if (!v82)
            v200 = v221;
          result[1] = llroundf(v200);
          v202 = v45;
          if (v195 <= v45)
          {
            v202 = v195;
            if (v195 < v44)
              v202 = v44;
          }
          v203 = (float)((float)((float)(v118 * _S23) + (float)(v222 * _S17)) + (float)(v237 * _S25)) + v41;
          result[2] = llroundf(v202);
          v204 = v221;
          v36 = v238;
          v38 = v239;
          v58 = v129;
          if (v203 <= v221)
          {
            if (v203 < v41)
              v204 = v41;
            else
              v204 = v203;
          }
          result[3] = llroundf(v204);
          if (v65)
            *v65++ = 0;
          __asm
          {
            FCVT            S17, H1
            FCVT            S23, H2
            FCVT            S25, H3
            FCVT            S1, H21
            FCVT            S3, H22
            FCVT            S2, H24
          }
          v211 = (float)((float)((float)(v118 * _S23) + (float)(v222 * _S17)) + (float)(v237 * _S25)) + v41;
          v212 = _S17 + _S1;
          v213 = _S23 + _S3;
          v214 = (float)((float)(v240 + (float)(v212 * v47)) + (float)(v213 * v48)) + (float)((float)(_S25 + _S2) * v49);
          v215 = (float)((float)(v240 + (float)(v212 * v227)) + (float)(v213 * v50))
               + (float)((float)(_S25 + _S2) * v235);
          if (v214 < v44)
            *(float *)&v6 = v44;
          else
            *(float *)&v6 = v214;
          if (v214 <= v45)
            v216 = *(float *)&v6;
          else
            v216 = v45;
          *v64 = llroundf(v216);
          if (v211 < v41)
            v217 = v41;
          else
            v217 = v211;
          if (v211 <= v221)
            v218 = v217;
          else
            v218 = v221;
          v64[1] = llroundf(v218);
          v219 = v45;
          if (v215 <= v45)
          {
            v219 = v215;
            if (v215 < v44)
              v219 = v44;
          }
          v57 = (float)((float)((float)(v118 * _S3) + (float)(v222 * _S1)) + (float)(v237 * _S2)) + v41;
          v64[2] = llroundf(v219);
          v220 = v221;
          if (v57 <= v221)
          {
            v220 = v57;
            if (v57 < v41)
              v220 = v41;
          }
          v64[3] = llroundf(v220);
          v37 = v245;
          if (v63)
            *v63++ = 0;
          v55 += 2;
          v62 += 2;
          result += 4;
          v64 += 4;
          v61 += 2;
        }
        while (v22 > v61);
      }
      v55 = &v59[v29];
      v56 += v30;
      result = &v60[v34];
      v21 += 2;
    }
    while (v25 > v21);
    if (v32 && v20)
    {
      do
      {
        result = (unsigned __int8 *)memcpy(v18, v33, v22);
        v33 += v31;
        v18 += v16;
        --v25;
      }
      while (v25);
    }
    else if (v20)
    {
      do
      {
        if (v22)
          result = (unsigned __int8 *)memset(v18, 255, v22);
        v18 += v16;
        --v25;
      }
      while (v25);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Mat_TRC_2vuyf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[3];
  v18 = a6[5];
  if ((v14 & 1) != 0)
  {
    ++v18;
    ++v14;
    if ((v11 & 1) != 0)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  v19 = a6[2];
  v20 = a6[4];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9)
    v12 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15)
    v21 = v19;
  else
    v21 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v18;
  if (v12 >= v21)
    v24 = v21;
  else
    v24 = v12;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Mat_TRC_2vuyf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_420vf_TRC_Mat_TRC_2vuyf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  _WORD *v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  unsigned int v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 *v56;
  _BYTE *v57;
  size_t v58;
  unsigned __int8 *v59;
  _WORD *v60;
  _BYTE *v61;
  _WORD *v62;
  float v63;
  unsigned int v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  BOOL v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  unsigned int v115;
  unsigned int v123;
  float v125;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v134;
  float v135;
  float v137;
  float v138;
  float v139;
  unsigned int v141;
  unsigned int v148;
  unsigned int v150;
  float v154;
  float v155;
  float v156;
  float v157;
  float v159;
  float v160;
  char v161;
  float v162;
  float v164;
  float v165;
  float v166;
  float v167;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float v182;
  float v183;
  float v184;
  float v185;
  float v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float v198;
  float v199;
  float v200;
  float v201;
  float v202;

  v6 = *(_QWORD *)(result + 28);
  v7 = v6 * a2;
  v8 = 2 * *result;
  v9 = (v6 + v6 * a2) / v8;
  v10 = *((_QWORD *)result + 14);
  v11 = (_QWORD *)*((_QWORD *)result + 16);
  v12 = *((_QWORD *)result + 15) + 2 * (*((_QWORD *)result + 13) * a2 / v8);
  v13 = (uint64_t *)*((_QWORD *)result + 17);
  v14 = v13[1];
  v15 = v11[1];
  v16 = (char *)(v15 + v14 * v12 + v10);
  v17 = v7 / v8;
  if (v15)
    v18 = (_WORD *)(v15 + v14 * v12 + v10);
  else
    v18 = 0;
  if (2 * v9 != 2 * v17)
  {
    v19 = 0;
    v20 = *(_QWORD *)(result + 20);
    v21 = *(_QWORD *)(result + 36);
    v22 = *(_QWORD *)(result + 44) + 2 * v17;
    v23 = 2 * v9 - 2 * v17;
    v24 = *((_QWORD *)result + 19);
    v25 = (_QWORD *)*((_QWORD *)result + 7);
    v26 = (uint64_t *)*((_QWORD *)result + 8);
    v27 = *v26;
    v28 = v26[1];
    v29 = v26[2];
    v30 = v25[2];
    v31 = (char *)(v30 + v29 * v22 + v21);
    v32 = *v13;
    LOWORD(a5) = *(_WORD *)(v24 + 140);
    LOWORD(a6) = *(_WORD *)(v24 + 142);
    v33 = 8191.0 / (float)*(unsigned int *)(v24 + 128);
    v34 = (float)LODWORD(a5);
    v35 = (float)LODWORD(a6);
    v36 = v33 * *(float *)v24;
    v198 = v33 * *(float *)(v24 + 16);
    v199 = v33 * *(float *)(v24 + 8);
    v37 = v33 * *(float *)(v24 + 20);
    *(float *)&v38 = v33 * *(float *)(v24 + 28);
    v196 = *(float *)&v38;
    v197 = v37;
    LOWORD(v38) = *(_WORD *)(v24 + 144);
    v39 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v24 + 146);
    v40 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v24 + 148);
    v41 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v24 + 150);
    v42 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v24 + 152);
    v43 = (float)v38;
    v44 = *(float *)(v24 + 36);
    v45 = *(float *)(v24 + 40);
    v46 = *(float *)(v24 + 44);
    v47 = *(float *)(v24 + 48) * 0.5;
    v48 = *(float *)(v24 + 52) * 0.5;
    v49 = *(float *)(v24 + 56) * 0.5;
    v201 = *(float *)(v24 + 64) * 0.5;
    v202 = *(float *)(v24 + 60) * 0.5;
    v200 = *(float *)(v24 + 68) * 0.5;
    v194 = *(float *)(v24 + 76);
    v195 = *(float *)(v24 + 72);
    v192 = *(float *)(v24 + 84);
    v193 = *(float *)(v24 + 80);
    v190 = *(float *)(v24 + 92);
    v191 = *(float *)(v24 + 88);
    v189 = *(float *)(v24 + 96);
    v187 = *(float *)(v24 + 100);
    v50 = *(float *)(v24 + 104);
    v185 = v50;
    v51 = v24 + 16548;
    v52 = v24 + 164;
    v53 = (_BYTE *)(*v11 + v32 * v12 + v10);
    result = (unsigned __int8 *)(*v25 + v27 * v22 + v21);
    if (v22 >= 0)
      v54 = v22;
    else
      v54 = v22 + 1;
    v55 = v25[1] + v28 * (v54 >> 1) + v21;
    v188 = v46;
    v186 = v40;
    v184 = v36;
    do
    {
      v56 = &result[v27];
      v57 = &v53[v32];
      if (v20)
      {
        v58 = 0;
        v59 = &result[v27];
        v60 = (_WORD *)((char *)v18 + v14);
        v61 = &v53[v32];
        v62 = v18;
        do
        {
          LOBYTE(v50) = *(_BYTE *)(v55 + v58 + 1);
          v63 = (float)LODWORD(v50) - v35;
          v64 = LODWORD(v199);
          v65 = v199 * v63;
          LOBYTE(v64) = *result;
          v66 = v36 * (float)((float)v64 - v34);
          v67 = (float)(v199 * v63) + v66;
          v68 = 8191.0;
          if (v67 <= 8191.0)
          {
            v68 = (float)(v199 * v63) + v66;
            if (v67 < 0.0)
              v68 = 0.0;
          }
          LOBYTE(v67) = *(_BYTE *)(v55 + v58);
          v69 = (float)LODWORD(v67) - v35;
          v70 = (float)(v197 * v63) + (float)(v69 * v198);
          v71 = 8191.0;
          if ((float)(v66 + v70) <= 8191.0)
          {
            v71 = v66 + v70;
            if ((float)(v66 + v70) < 0.0)
              v71 = 0.0;
          }
          v72 = v196 * v69;
          v73 = (float)(v196 * v69) + v66;
          v74 = 8191.0;
          if (v73 <= 8191.0)
          {
            v74 = v73;
            if (v73 < 0.0)
              v74 = 0.0;
          }
          LOBYTE(v73) = result[1];
          v75 = v36 * (float)((float)LODWORD(v73) - v34);
          v76 = 8191.0;
          if ((float)(v65 + v75) <= 8191.0)
          {
            v76 = v65 + v75;
            if ((float)(v65 + v75) < 0.0)
              v76 = 0.0;
          }
          v77 = v70 + v75;
          v78 = 8191.0;
          if ((float)(v70 + v75) <= 8191.0)
          {
            v78 = v70 + v75;
            if (v77 < 0.0)
              v78 = 0.0;
          }
          v79 = v72 + v75;
          v80 = 8191.0;
          if (v79 <= 8191.0)
          {
            v80 = v79;
            if (v79 < 0.0)
              v80 = 0.0;
          }
          LOBYTE(v79) = *v59;
          v81 = v36 * (float)((float)LODWORD(v79) - v34);
          v82 = 8191.0;
          if ((float)(v65 + v81) <= 8191.0)
          {
            v82 = v65 + v81;
            if ((float)(v65 + v81) < 0.0)
              v82 = 0.0;
          }
          v83 = 8191.0;
          if ((float)(v70 + v81) <= 8191.0)
          {
            v83 = v70 + v81;
            if ((float)(v70 + v81) < 0.0)
              v83 = 0.0;
          }
          v84 = v72 + v81;
          v85 = (float)(v72 + v81) <= 8191.0;
          v86 = 8191.0;
          if (v85)
          {
            v86 = v84;
            if (v84 < 0.0)
              v86 = 0.0;
          }
          LOBYTE(v77) = v59[1];
          v87 = v36 * (float)((float)LODWORD(v77) - v34);
          v88 = v65 + v87;
          v85 = (float)(v65 + v87) <= 8191.0;
          v89 = 8191.0;
          if (v85)
          {
            v89 = v88;
            if (v88 < 0.0)
              v89 = 0.0;
          }
          v90 = v35;
          v91 = v70 + v87;
          v85 = (float)(v70 + v87) <= 8191.0;
          v92 = 8191.0;
          if (v85)
          {
            v92 = v91;
            if (v91 < 0.0)
              v92 = 0.0;
          }
          v93 = v34;
          v94 = v72 + v87;
          v95 = 8191.0;
          if (v94 <= 8191.0)
          {
            v95 = v94;
            if (v94 < 0.0)
              v95 = 0.0;
          }
          _H3 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v68, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          _H4 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H5 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H2 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H6 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H26 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          __asm
          {
            FCVT            S26, H26
            FCVT            S27, H27
          }
          _H17 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          v115 = llroundf(fminf(fmaxf(v86, 0.0), 8191.0));
          __asm { FCVT            S1, H17 }
          _H17 = *(_WORD *)(v52 + 2 * v115);
          __asm { FCVT            S17, H17 }
          _H7 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          _H24 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          v123 = llroundf(fminf(fmaxf(v95, 0.0), 8191.0));
          _S25 = (float)((float)(v194 * _S4) + (float)(_S3 * v195)) + (float)(_S5 * v193);
          v125 = (float)((float)(v191 * _S4) + (float)(_S3 * v192)) + (float)(_S5 * v190);
          _S3 = (float)((float)(v187 * _S4) + (float)(_S3 * v189)) + (float)(_S5 * v185);
          v127 = (float)((float)(v194 * _S6) + (float)(_S2 * v195)) + (float)(_S26 * v193);
          v128 = (float)((float)(v191 * _S6) + (float)(_S2 * v192)) + (float)(_S26 * v190);
          v129 = (float)((float)(v187 * _S6) + (float)(_S2 * v189)) + (float)(_S26 * v185);
          v130 = (float)((float)(v194 * _S1) + (float)(_S27 * v195)) + (float)(_S17 * v193);
          v131 = (float)((float)(v191 * _S1) + (float)(_S27 * v192)) + (float)(_S17 * v190);
          v132 = (float)((float)(v187 * _S1) + (float)(_S27 * v189)) + (float)(_S17 * v185);
          _S1 = (float)(v194 * _S24) + (float)(_S7 * v195);
          v134 = (float)(v191 * _S24) + (float)(_S7 * v192);
          v135 = (float)(v187 * _S24) + (float)(_S7 * v189);
          LOWORD(_S24) = *(_WORD *)(v52 + 2 * v123);
          __asm { FCVT            S24, H24 }
          v137 = _S1 + (float)(_S24 * v193);
          v138 = v134 + (float)(_S24 * v190);
          v139 = v135 + (float)(_S24 * v185);
          LOWORD(_S1) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(_S25, 0.0), 8191.0)));
          __asm { FCVT            S24, H1 }
          LOWORD(_S1) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v125, 0.0), 8191.0)));
          LOWORD(_S25) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          v141 = llroundf(fminf(fmaxf(v128, 0.0), 8191.0));
          LOWORD(_S3) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v127, 0.0), 8191.0)));
          __asm
          {
            FCVT            S28, H1
            FCVT            S5, H3
          }
          LOWORD(_S3) = *(_WORD *)(v51 + 2 * v141);
          _H21 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v129, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v130, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v131, 0.0), 8191.0)));
          _H4 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v132, 0.0), 8191.0)));
          v148 = llroundf(fminf(fmaxf(v138, 0.0), 8191.0));
          __asm { FCVT            S3, H3 }
          v150 = llroundf(fminf(fmaxf(v139, 0.0), 8191.0));
          _H6 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v137, 0.0), 8191.0)));
          __asm
          {
            FCVT            S26, H25
            FCVT            S25, H21
          }
          v154 = (float)((float)(v45 * _S28) + (float)(v44 * _S24)) + (float)(v188 * _S26);
          v155 = (float)((float)(v186 + (float)((float)(_S24 + _S5) * v47)) + (float)((float)(_S28 + _S3) * v48))
               + (float)((float)(_S26 + _S25) * v49);
          v156 = (float)((float)(v186 + (float)((float)(_S24 + _S5) * v202)) + (float)((float)(_S28 + _S3) * v201))
               + (float)((float)(_S26 + _S25) * v200);
          if (v155 < v42)
            v157 = v42;
          else
            v157 = v155;
          v85 = v155 <= v43;
          _H7 = *(_WORD *)(v51 + 2 * v148);
          v159 = v154 + v39;
          if (v85)
            v160 = v157;
          else
            v160 = v43;
          v161 = llroundf(v160);
          if (v159 < v39)
            v162 = v39;
          else
            v162 = v159;
          _H24 = *(_WORD *)(v51 + 2 * v150);
          *v53 = v161;
          if (v159 <= v41)
            v164 = v162;
          else
            v164 = v41;
          v53[1] = llroundf(v164);
          v165 = v43;
          if (v156 <= v43)
          {
            v165 = v156;
            if (v156 < v42)
              v165 = v42;
          }
          v166 = (float)((float)((float)(v45 * _S3) + (float)(v44 * _S5)) + (float)(v188 * _S25)) + v39;
          v53[2] = llroundf(v165);
          v167 = v41;
          if (v166 <= v41)
          {
            if (v166 < v39)
              v167 = v39;
            else
              v167 = v166;
          }
          v53[3] = llroundf(v167);
          v34 = v93;
          if (v62)
            *v62++ = 0;
          v35 = v90;
          v36 = v184;
          __asm
          {
            FCVT            S5, H1
            FCVT            S17, H2
            FCVT            S4, H4
            FCVT            S1, H6
            FCVT            S3, H7
            FCVT            S2, H24
          }
          v174 = (float)((float)((float)(v45 * _S17) + (float)(v44 * _S5)) + (float)(v188 * _S4)) + v39;
          v175 = _S5 + _S1;
          v176 = _S17 + _S3;
          v177 = _S4 + _S2;
          v178 = (float)((float)(v186 + (float)(v175 * v47)) + (float)(v176 * v48)) + (float)(v177 * v49);
          v179 = (float)((float)(v186 + (float)(v175 * v202)) + (float)(v176 * v201)) + (float)(v177 * v200);
          if (v178 < v42)
            v180 = v42;
          else
            v180 = v178;
          if (v178 > v43)
            v180 = v43;
          *v61 = llroundf(v180);
          if (v174 < v39)
            v181 = v39;
          else
            v181 = v174;
          if (v174 > v41)
            v181 = v41;
          v61[1] = llroundf(v181);
          v182 = v43;
          if (v179 <= v43)
          {
            v182 = v179;
            if (v179 < v42)
              v182 = v42;
          }
          v50 = (float)((float)((float)(v45 * _S3) + (float)(v44 * _S1)) + (float)(v188 * _S2)) + v39;
          v61[2] = llroundf(v182);
          v183 = v41;
          if (v50 <= v41)
          {
            v183 = v50;
            if (v50 < v39)
              v183 = v39;
          }
          v61[3] = llroundf(v183);
          if (v60)
            *v60++ = 0;
          result += 2;
          v59 += 2;
          v53 += 4;
          v61 += 4;
          v58 += 2;
        }
        while (v20 > v58);
      }
      result = &v56[v27];
      v55 += v28;
      v53 = &v57[v32];
      v19 += 2;
    }
    while (v23 > v19);
    if (v30 && v18)
    {
      do
      {
        result = (unsigned __int8 *)memcpy(v16, v31, v20);
        v31 += v29;
        v16 += v14;
        --v23;
      }
      while (v23);
    }
    else if (v18)
    {
      do
      {
        if (v20)
          result = (unsigned __int8 *)memset(v16, 255, v20);
        v16 += v14;
        --v23;
      }
      while (v23);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_rgb_2vuyf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[3];
  v18 = a6[5];
  if ((v14 & 1) != 0)
  {
    ++v18;
    ++v14;
    if ((v11 & 1) != 0)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  v19 = a6[2];
  v20 = a6[4];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9)
    v12 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15)
    v21 = v19;
  else
    v21 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v18;
  if (v12 >= v21)
    v24 = v21;
  else
    v24 = v12;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_rgb_2vuyf_GCD);
  return 0;
}

_QWORD *vt_Copy_420vf_rgb_2vuyf_GCD(_QWORD *result, uint64_t a2, double a3, double a4, double a5, float a6, float a7)
{
  float v7;
  float v8;
  unsigned int v9;
  float v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  _WORD *v26;
  unint64_t v27;
  size_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  _BYTE *v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  size_t v66;
  _BYTE *v67;
  _WORD *v68;
  _BYTE *v69;
  _WORD *v70;
  unsigned int v71;
  float v72;
  float v73;
  unsigned int v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;

  v14 = *(_QWORD *)((char *)result + 28);
  v15 = v14 * a2;
  v16 = 2 * *(unsigned __int8 *)result;
  v17 = (v14 + v14 * a2) / v16;
  v18 = result[14];
  v19 = (_QWORD *)result[16];
  v20 = result[15] + 2 * (result[13] * a2 / v16);
  v21 = (uint64_t *)result[17];
  v22 = v21[1];
  v23 = v19[1];
  v24 = (char *)(v23 + v22 * v20 + v18);
  v25 = v15 / v16;
  if (v23)
    v26 = (_WORD *)(v23 + v22 * v20 + v18);
  else
    v26 = 0;
  if (2 * v17 != 2 * v25)
  {
    v27 = 0;
    v28 = *(_QWORD *)((char *)result + 20);
    v29 = *(_QWORD *)((char *)result + 36);
    v30 = *(_QWORD *)((char *)result + 44) + 2 * v25;
    v31 = 2 * v17 - 2 * v25;
    v32 = result[19];
    v33 = (_QWORD *)result[7];
    v34 = (uint64_t *)result[8];
    v35 = *v34;
    v36 = v34[1];
    v37 = v34[2];
    v38 = v33[2];
    v39 = (char *)(v38 + v37 * v30 + v29);
    v40 = *v21;
    LOWORD(a6) = *(_WORD *)(v32 + 140);
    LOWORD(a7) = *(_WORD *)(v32 + 142);
    v41 = (float)*(unsigned int *)(v32 + 136) / (float)*(unsigned int *)(v32 + 128);
    LOWORD(v9) = *(_WORD *)(v32 + 144);
    LOWORD(v10) = *(_WORD *)(v32 + 146);
    LOWORD(v11) = *(_WORD *)(v32 + 148);
    LOWORD(v12) = *(_WORD *)(v32 + 150);
    LOWORD(v13) = *(_WORD *)(v32 + 152);
    v42 = *(float *)(v32 + 36);
    v43 = *(float *)(v32 + 40);
    v44 = *(float *)(v32 + 44);
    v45 = (float)LODWORD(a6);
    v46 = (float)LODWORD(a7);
    v47 = v41 * *(float *)v32;
    v118 = v41 * *(float *)(v32 + 8);
    v117 = v41 * *(float *)(v32 + 16);
    v116 = v41 * *(float *)(v32 + 20);
    v48 = v41 * *(float *)(v32 + 28);
    v49 = (float)v9;
    v50 = (float)LODWORD(v10);
    v51 = (float)v11;
    v52 = (float)v12;
    v53 = (float)v13;
    v54 = 0.5;
    v55 = *(float *)(v32 + 48) * 0.5;
    v56 = *(float *)(v32 + 52) * 0.5;
    v57 = *(float *)(v32 + 56) * 0.5;
    v58 = *(float *)(v32 + 60) * 0.5;
    v59 = *(float *)(v32 + 64) * 0.5;
    v60 = *(float *)(v32 + 68) * 0.5;
    v61 = (_BYTE *)(*v19 + v40 * v20 + v18);
    v62 = (_BYTE *)(*v33 + v35 * v30 + v29);
    if (v30 >= 0)
      v63 = v30;
    else
      v63 = v30 + 1;
    v64 = v33[1] + v36 * (v63 >> 1) + v29;
    do
    {
      v65 = &v62[v35];
      result = &v61[v40];
      if (v28)
      {
        v66 = 0;
        v67 = &v62[v35];
        v68 = v26;
        v69 = &v61[v40];
        v70 = (_WORD *)((char *)v26 + v22);
        do
        {
          LOBYTE(v54) = *(_BYTE *)(v64 + v66);
          *(float *)&v71 = (float)LODWORD(v54) - v46;
          LOBYTE(v10) = *(_BYTE *)(v64 + v66 + 1);
          v72 = (float)LODWORD(v10) - v46;
          v73 = v118 * v72;
          *(float *)&v74 = v116 * v72;
          v75 = *(float *)&v74 + (float)(*(float *)&v71 * v117);
          v76 = v48 * *(float *)&v71;
          LOBYTE(v71) = *v62;
          v77 = v47 * (float)((float)v71 - v45);
          LOBYTE(v74) = v62[1];
          v78 = v47 * (float)((float)v74 - v45);
          LOBYTE(v8) = *v67;
          LOBYTE(v7) = v67[1];
          v79 = v73 + v77;
          v80 = v77 + v75;
          v81 = v76 + v77;
          v82 = v73 + v78;
          v83 = v75 + v78;
          v84 = v76 + v78;
          v85 = (float)((float)((float)(v43 * (float)(v77 + v75)) + (float)(v42 * (float)(v73 + v77)))
                      + (float)(v44 * (float)(v76 + v77)))
              + v49;
          v86 = v79 + (float)(v73 + v78);
          v87 = v80 + (float)(v75 + v78);
          v88 = v81 + (float)(v76 + v78);
          v89 = (float)((float)(v50 + (float)(v86 * v55)) + (float)(v87 * v56)) + (float)(v88 * v57);
          if (v89 < v52)
            v90 = v52;
          else
            v90 = (float)((float)(v50 + (float)(v86 * v55)) + (float)(v87 * v56)) + (float)(v88 * v57);
          if (v89 > v53)
            v90 = v53;
          *v61 = llroundf(v90);
          v91 = v51;
          if (v85 <= v51)
          {
            v91 = v85;
            if (v85 < v49)
              v91 = v49;
          }
          v92 = (float)((float)(v50 + (float)(v86 * v58)) + (float)(v87 * v59)) + (float)(v88 * v60);
          v61[1] = llroundf(v91);
          v93 = v53;
          if (v92 <= v53)
          {
            v93 = v92;
            if (v92 < v52)
              v93 = v52;
          }
          v94 = (float)((float)((float)(v43 * v83) + (float)(v42 * v82)) + (float)(v44 * v84)) + v49;
          v61[2] = llroundf(v93);
          v95 = v51;
          if (v94 <= v51)
          {
            if (v94 < v49)
              v95 = v49;
            else
              v95 = (float)((float)((float)(v43 * v83) + (float)(v42 * v82)) + (float)(v44 * v84)) + v49;
          }
          v61[3] = llroundf(v95);
          if (v68)
            *v68++ = 0;
          v96 = v47 * (float)((float)LODWORD(v8) - v45);
          v97 = v47 * (float)((float)LODWORD(v7) - v45);
          v98 = v73 + v96;
          v99 = v75 + v96;
          v100 = v76 + v96;
          v101 = v73 + v97;
          v102 = v75 + v97;
          v103 = v76 + v97;
          v104 = (float)((float)((float)(v43 * v99) + (float)(v42 * v98)) + (float)(v44 * v100)) + v49;
          v105 = (float)((float)((float)(v43 * v102) + (float)(v42 * v101)) + (float)(v44 * v103)) + v49;
          v106 = v98 + v101;
          v8 = v50 + (float)(v106 * v55);
          v107 = v99 + v102;
          v7 = v8 + (float)(v107 * v56);
          v108 = v100 + v103;
          v109 = v7 + (float)(v108 * v57);
          v10 = (float)(v50 + (float)(v106 * v58)) + (float)(v107 * v59);
          if (v109 < v52)
            v110 = v52;
          else
            v110 = v7 + (float)(v108 * v57);
          if (v109 <= v53)
            v111 = v110;
          else
            v111 = v53;
          v112 = v10 + (float)(v108 * v60);
          *v69 = llroundf(v111);
          if (v104 < v49)
            v113 = v49;
          else
            v113 = v104;
          if (v104 > v51)
            v113 = v51;
          v69[1] = llroundf(v113);
          if (v112 < v52)
            v114 = v52;
          else
            v114 = v112;
          if (v112 <= v53)
            v115 = v114;
          else
            v115 = v53;
          v69[2] = llroundf(v115);
          v54 = v51;
          if (v105 <= v51)
          {
            v54 = v105;
            if (v105 < v49)
              v54 = v49;
          }
          v69[3] = llroundf(v54);
          if (v70)
            *v70++ = 0;
          v62 += 2;
          v67 += 2;
          v61 += 4;
          v69 += 4;
          v66 += 2;
        }
        while (v28 > v66);
      }
      v62 = &v65[v35];
      v64 += v36;
      v61 = (char *)result + v40;
      v27 += 2;
    }
    while (v31 > v27);
    if (v38 && v26)
    {
      do
      {
        result = memcpy(v24, v39, v28);
        v39 += v37;
        v24 += v22;
        --v31;
      }
      while (v31);
    }
    else if (v26)
    {
      do
      {
        if (v28)
          result = memset(v24, 255, v28);
        v24 += v22;
        --v31;
      }
      while (v31);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Tone_Mat_TRC_yuvsf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[3];
  v18 = a6[5];
  if ((v14 & 1) != 0)
  {
    ++v18;
    ++v14;
    if ((v11 & 1) != 0)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  v19 = a6[2];
  v20 = a6[4];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9)
    v12 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15)
    v21 = v19;
  else
    v21 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v18;
  if (v12 >= v21)
    v24 = v21;
  else
    v24 = v12;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Tone_Mat_TRC_yuvsf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_420vf_TRC_Tone_Mat_TRC_yuvsf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  float v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  _WORD *v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  unsigned int v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  float v56;
  float v57;
  _BYTE *v58;
  unsigned __int8 *v59;
  size_t v60;
  _BYTE *v61;
  _WORD *v62;
  unsigned __int8 *v63;
  _WORD *v64;
  float v65;
  unsigned int v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  BOOL v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v123;
  float v124;
  float v129;
  float v130;
  float v131;
  float v136;
  float v137;
  float v138;
  float v140;
  float v141;
  float v142;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v184;
  float v185;
  float v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  float v206;
  float v207;
  float v208;
  float v209;
  float v210;
  float v211;
  float v212;
  float v213;
  float v214;
  float v215;
  float v216;
  float v217;
  float v218;
  float v219;
  float v220;
  float v221;
  float v222;
  float v223;
  float v224;
  float v225;
  float v226;
  float v227;
  float v228;
  float v229;
  float v230;
  float v231;
  float v232;
  float v233;
  float v234;

  v7 = *(_QWORD *)(result + 28);
  v8 = v7 * a2;
  v9 = 2 * *result;
  v10 = (v7 + v7 * a2) / v9;
  v11 = *((_QWORD *)result + 14);
  v12 = *((_QWORD *)result + 13) * a2 / v9;
  v13 = (_QWORD *)*((_QWORD *)result + 16);
  v14 = *((_QWORD *)result + 15) + 2 * v12;
  v15 = (uint64_t *)*((_QWORD *)result + 17);
  v16 = v15[1];
  v17 = v13[1];
  v18 = (char *)(v17 + v16 * v14 + v11);
  v19 = v8 / v9;
  if (v17)
    v20 = (_WORD *)(v17 + v16 * v14 + v11);
  else
    v20 = 0;
  if (2 * v10 != 2 * v19)
  {
    v21 = 0;
    v22 = *(_QWORD *)(result + 20);
    v23 = *(_QWORD *)(result + 36);
    v24 = *(_QWORD *)(result + 44) + 2 * v19;
    v25 = 2 * v10 - 2 * v19;
    v26 = *((_QWORD *)result + 19);
    v27 = (_QWORD *)*((_QWORD *)result + 7);
    v28 = (uint64_t *)*((_QWORD *)result + 8);
    v29 = *v28;
    v30 = v28[1];
    v31 = v28[2];
    v32 = v27[2];
    v33 = (char *)(v32 + v31 * v24 + v23);
    v34 = *v15;
    LOWORD(a5) = *(_WORD *)(v26 + 140);
    LOWORD(a6) = *(_WORD *)(v26 + 142);
    v35 = 8191.0 / (float)*(unsigned int *)(v26 + 128);
    v36 = (float)LODWORD(a5);
    v37 = (float)LODWORD(a6);
    v38 = v35 * *(float *)v26;
    v232 = v35 * *(float *)(v26 + 16);
    v233 = v35 * *(float *)(v26 + 8);
    v39 = v35 * *(float *)(v26 + 20);
    *(float *)&v40 = v35 * *(float *)(v26 + 28);
    v230 = *(float *)&v40;
    v231 = v39;
    LOWORD(v40) = *(_WORD *)(v26 + 144);
    v41 = (float)v40;
    LOWORD(v40) = *(_WORD *)(v26 + 146);
    v42 = (float)v40;
    LOWORD(v40) = *(_WORD *)(v26 + 148);
    v43 = (float)v40;
    LOWORD(v40) = *(_WORD *)(v26 + 150);
    v44 = (float)v40;
    LOWORD(v40) = *(_WORD *)(v26 + 152);
    v45 = (float)v40;
    v46 = *(float *)(v26 + 36);
    v47 = *(float *)(v26 + 40);
    v48 = *(float *)(v26 + 52) * 0.5;
    v225 = *(float *)(v26 + 72);
    v222 = *(float *)(v26 + 80);
    v223 = *(float *)(v26 + 76);
    v220 = *(float *)(v26 + 88);
    v221 = *(float *)(v26 + 84);
    v218 = *(float *)(v26 + 96);
    v219 = *(float *)(v26 + 92);
    v217 = *(float *)(v26 + 100);
    v49 = *(float *)(v26 + 108);
    v215 = *(float *)(v26 + 104);
    v50 = v26 + 164;
    v51 = v26 + 16548;
    v52 = *v13 + v34 * v14;
    v53 = v26 + 32932;
    result = (unsigned __int8 *)(v52 + v11);
    v54 = (_BYTE *)(*v27 + v29 * v24 + v23);
    v55 = v27[1] + v30 * (v24 / 2) + v23;
    v56 = *(float *)(v26 + 112);
    v57 = *(float *)(v26 + 120);
    v210 = v57;
    v211 = *(float *)(v26 + 116);
    v234 = (float)LODWORD(a6);
    v228 = (float)LODWORD(a5);
    v229 = v38;
    v227 = *(float *)(v26 + 60) * 0.5;
    v226 = *(float *)(v26 + 64) * 0.5;
    v224 = *(float *)(v26 + 68) * 0.5;
    v216 = *(float *)(v26 + 48) * 0.5;
    v213 = *(float *)(v26 + 56) * 0.5;
    v214 = *(float *)(v26 + 44);
    v212 = v42;
    do
    {
      v58 = &v54[v29];
      v59 = &result[v34];
      if (v22)
      {
        v60 = 0;
        v61 = &v54[v29];
        v62 = (_WORD *)((char *)v20 + v16);
        v63 = &result[v34];
        v64 = v20;
        do
        {
          LOBYTE(v57) = *(_BYTE *)(v55 + v60 + 1);
          v65 = (float)LODWORD(v57) - v37;
          v66 = LODWORD(v233);
          v67 = v233 * v65;
          LOBYTE(v66) = *v54;
          v68 = v38 * (float)((float)v66 - v36);
          v69 = (float)(v233 * v65) + v68;
          v70 = 8191.0;
          if (v69 <= 8191.0)
          {
            v70 = (float)(v233 * v65) + v68;
            if (v69 < 0.0)
              v70 = 0.0;
          }
          LOBYTE(v69) = *(_BYTE *)(v55 + v60);
          v71 = (float)LODWORD(v69) - v37;
          v72 = (float)(v231 * v65) + (float)(v71 * v232);
          v73 = 8191.0;
          if ((float)(v68 + v72) <= 8191.0)
          {
            v73 = v68 + v72;
            if ((float)(v68 + v72) < 0.0)
              v73 = 0.0;
          }
          v74 = v230 * v71;
          v75 = (float)(v230 * v71) + v68;
          v76 = 8191.0;
          if (v75 <= 8191.0)
          {
            v76 = v75;
            if (v75 < 0.0)
              v76 = 0.0;
          }
          LOBYTE(v75) = v54[1];
          v77 = v38 * (float)((float)LODWORD(v75) - v36);
          v78 = 8191.0;
          if ((float)(v67 + v77) <= 8191.0)
          {
            v78 = v67 + v77;
            if ((float)(v67 + v77) < 0.0)
              v78 = 0.0;
          }
          v79 = 8191.0;
          if ((float)(v72 + v77) <= 8191.0)
          {
            v79 = v72 + v77;
            if ((float)(v72 + v77) < 0.0)
              v79 = 0.0;
          }
          v80 = v74 + v77;
          v81 = (float)(v74 + v77) <= 8191.0;
          v82 = 8191.0;
          if (v81)
          {
            v82 = v80;
            if (v80 < 0.0)
              v82 = 0.0;
          }
          LOBYTE(v80) = *v61;
          v83 = v38 * (float)((float)LODWORD(v80) - v36);
          v84 = 8191.0;
          if ((float)(v67 + v83) <= 8191.0)
          {
            v84 = v67 + v83;
            if ((float)(v67 + v83) < 0.0)
              v84 = 0.0;
          }
          v85 = 8191.0;
          if ((float)(v72 + v83) <= 8191.0)
          {
            v85 = v72 + v83;
            if ((float)(v72 + v83) < 0.0)
              v85 = 0.0;
          }
          v86 = v74 + v83;
          v81 = (float)(v74 + v83) <= 8191.0;
          v87 = 8191.0;
          if (v81)
          {
            v87 = v86;
            if (v86 < 0.0)
              v87 = 0.0;
          }
          LOBYTE(v6) = v61[1];
          v88 = v38 * (float)((float)LODWORD(v6) - v36);
          v89 = v67 + v88;
          v81 = (float)(v67 + v88) <= 8191.0;
          v90 = 8191.0;
          if (v81)
          {
            v90 = v89;
            if (v89 < 0.0)
              v90 = 0.0;
          }
          v91 = v72 + v88;
          v81 = (float)(v72 + v88) <= 8191.0;
          v92 = 8191.0;
          if (v81)
          {
            v92 = v91;
            if (v91 < 0.0)
              v92 = 0.0;
          }
          v93 = v74 + v88;
          v94 = 8191.0;
          if (v93 <= 8191.0)
          {
            v94 = v93;
            if (v93 < 0.0)
              v94 = 0.0;
          }
          _H2 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H23 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S24, H23 }
          _H23 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S25, H23 }
          _H23 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          _H31 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          _H21 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          _H22 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          _H3 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          _H17 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          v114 = fmaxf(_S2, fmaxf(_S24, _S25));
          v115 = (float)((float)((float)(v56 * _S24) + (float)(v49 * _S2)) + (float)(v211 * _S25))
               + (float)(v210 * v114);
          v116 = 8191.0;
          if (v115 <= 8191.0)
          {
            v116 = (float)((float)((float)(v56 * _S24) + (float)(v49 * _S2)) + (float)(v211 * _S25))
                 + (float)(v210 * v114);
            if (v115 < 0.0)
              v116 = 0.0;
          }
          v117 = v47;
          v118 = v46;
          __asm
          {
            FCVT            S26, H23
            FCVT            S28, H29
            FCVT            S30, H31
          }
          _H23 = *(_WORD *)(v51 + 2 * llroundf(v116));
          v123 = (float)((float)((float)(v56 * _S28) + (float)(v49 * _S26)) + (float)(v211 * _S30))
               + (float)(v210 * fmaxf(_S26, fmaxf(_S28, _S30)));
          v124 = 8191.0;
          if (v123 <= 8191.0)
          {
            v124 = v123;
            if (v123 < 0.0)
              v124 = 0.0;
          }
          __asm
          {
            FCVT            S9, H27
            FCVT            S10, H21
            FCVT            S11, H22
          }
          _H21 = *(_WORD *)(v51 + 2 * llroundf(v124));
          v129 = fmaxf(_S9, fmaxf(_S10, _S11));
          v130 = (float)((float)((float)(v56 * _S10) + (float)(v49 * _S9)) + (float)(v211 * _S11))
               + (float)(v210 * v129);
          v131 = 8191.0;
          if (v130 <= 8191.0)
          {
            v131 = (float)((float)((float)(v56 * _S10) + (float)(v49 * _S9)) + (float)(v211 * _S11))
                 + (float)(v210 * v129);
            if (v130 < 0.0)
              v131 = 0.0;
          }
          __asm
          {
            FCVT            S29, H1
            FCVT            S31, H3
            FCVT            S8, H17
            FCVT            S1, H23
          }
          v136 = _S2 * _S1;
          v137 = _S24 * _S1;
          v138 = _S25 * _S1;
          __asm { FCVT            S1, H21 }
          v140 = _S26 * _S1;
          v141 = _S28 * _S1;
          v142 = _S30 * _S1;
          LOWORD(_S1) = *(_WORD *)(v51 + 2 * llroundf(v131));
          __asm { FCVT            S2, H1 }
          v144 = _S9 * _S2;
          v145 = _S10 * _S2;
          v146 = _S11 * _S2;
          v147 = (float)((float)((float)(v56 * _S31) + (float)(v49 * _S29)) + (float)(v211 * _S8))
               + (float)(v210 * fmaxf(_S29, fmaxf(_S31, _S8)));
          v148 = 8191.0;
          if (v147 <= 8191.0)
          {
            v148 = v147;
            if (v147 < 0.0)
              v148 = 0.0;
          }
          _H25 = *(_WORD *)(v51 + 2 * llroundf(v148));
          __asm { FCVT            S25, H25 }
          v151 = _S29 * _S25;
          v152 = _S31 * _S25;
          v153 = _S8 * _S25;
          v154 = (float)((float)(v223 * v137) + (float)(v136 * v225)) + (float)(v138 * v222);
          v155 = (float)((float)(v220 * v137) + (float)(v136 * v221)) + (float)(v138 * v219);
          v156 = (float)((float)(v217 * v137) + (float)(v136 * v218)) + (float)(v138 * v215);
          v157 = (float)((float)(v223 * v141) + (float)(v140 * v225)) + (float)(v142 * v222);
          v158 = (float)((float)(v220 * v141) + (float)(v140 * v221)) + (float)(v142 * v219);
          v159 = (float)((float)(v217 * v141) + (float)(v140 * v218)) + (float)(v142 * v215);
          v160 = (float)((float)(v223 * v145) + (float)(v144 * v225)) + (float)(v146 * v222);
          v161 = (float)((float)(v220 * v145) + (float)(v144 * v221)) + (float)(v146 * v219);
          v162 = (float)((float)(v217 * v145) + (float)(v144 * v218)) + (float)(v146 * v215);
          v163 = (float)((float)(v223 * v152) + (float)(v151 * v225)) + (float)(v153 * v222);
          v164 = (float)((float)(v220 * v152) + (float)(v151 * v221)) + (float)(v153 * v219);
          v165 = (float)((float)(v217 * v152) + (float)(v151 * v218)) + (float)(v153 * v215);
          _H1 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v154, 0.0), 8191.0)));
          __asm { FCVT            S29, H1 }
          _H1 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v155, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v156, 0.0), 8191.0)));
          __asm
          {
            FCVT            S30, H1
            FCVT            S9, H2
          }
          _H1 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v157, 0.0), 8191.0)));
          __asm { FCVT            S24, H1 }
          _H1 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v158, 0.0), 8191.0)));
          __asm { FCVT            S25, H1 }
          _H1 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v159, 0.0), 8191.0)));
          __asm { FCVT            S26, H1 }
          _H1 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v160, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v161, 0.0), 8191.0)));
          _H3 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v162, 0.0), 8191.0)));
          _H17 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v163, 0.0), 8191.0)));
          _H21 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v164, 0.0), 8191.0)));
          _H22 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v165, 0.0), 8191.0)));
          v47 = v117;
          v46 = v118;
          v184 = (float)((float)((float)(v117 * _S30) + (float)(v118 * _S29)) + (float)(v214 * _S9)) + v41;
          v185 = _S29 + _S24;
          if (v184 < v41)
            v186 = v41;
          else
            v186 = (float)((float)((float)(v117 * _S30) + (float)(v118 * _S29)) + (float)(v214 * _S9)) + v41;
          v81 = v184 <= v43;
          v187 = _S30 + _S25;
          v188 = (float)((float)(v212 + (float)(v185 * v216)) + (float)((float)(_S30 + _S25) * v48))
               + (float)((float)(_S9 + _S26) * v213);
          if (!v81)
            v186 = v43;
          *result = llroundf(v186);
          v189 = v45;
          if (v188 <= v45)
          {
            v189 = v188;
            if (v188 < v44)
              v189 = v44;
          }
          v190 = (float)((float)((float)(v117 * _S25) + (float)(v118 * _S24)) + (float)(v214 * _S26)) + v41;
          result[1] = llroundf(v189);
          v191 = v43;
          v36 = v228;
          v38 = v229;
          if (v190 <= v43)
          {
            v191 = v190;
            if (v190 < v41)
              v191 = v41;
          }
          v192 = (float)((float)(v212 + (float)(v185 * v227)) + (float)(v187 * v226))
               + (float)((float)(_S9 + _S26) * v224);
          result[2] = llroundf(v191);
          v193 = v45;
          if (v192 <= v45)
          {
            if (v192 < v44)
              v193 = v44;
            else
              v193 = v192;
          }
          result[3] = llroundf(v193);
          if (v64)
            *v64++ = 0;
          __asm
          {
            FCVT            S1, H1
            FCVT            S2, H2
            FCVT            S3, H3
            FCVT            S17, H17
            FCVT            S21, H21
            FCVT            S22, H22
          }
          v6 = (float)((float)((float)(v117 * _S2) + (float)(v118 * _S1)) + (float)(v214 * _S3)) + v41;
          v200 = (float)((float)((float)(v117 * _S21) + (float)(v118 * _S17)) + (float)(v214 * _S22)) + v41;
          v201 = _S1 + _S17;
          v202 = _S2 + _S21;
          v203 = _S3 + _S22;
          v204 = (float)((float)(v212 + (float)(v201 * v216)) + (float)(v202 * v48)) + (float)(v203 * v213);
          v205 = (float)(v212 + (float)(v201 * v227)) + (float)(v202 * v226);
          if (v6 < v41)
            v206 = v41;
          else
            v206 = v6;
          if (v6 > v43)
            v206 = v43;
          v57 = v205 + (float)(v203 * v224);
          *v63 = llroundf(v206);
          if (v204 < v44)
            v207 = v44;
          else
            v207 = v204;
          if (v204 > v45)
            v207 = v45;
          v63[1] = llroundf(v207);
          if (v200 < v41)
            v208 = v41;
          else
            v208 = v200;
          if (v200 > v43)
            v208 = v43;
          v63[2] = llroundf(v208);
          v209 = v45;
          if (v57 <= v45)
          {
            v209 = v57;
            if (v57 < v44)
              v209 = v44;
          }
          v63[3] = llroundf(v209);
          v37 = v234;
          if (v62)
            *v62++ = 0;
          v54 += 2;
          v61 += 2;
          result += 4;
          v63 += 4;
          v60 += 2;
        }
        while (v22 > v60);
      }
      v54 = &v58[v29];
      v55 += v30;
      result = &v59[v34];
      v21 += 2;
    }
    while (v25 > v21);
    if (v32 && v20)
    {
      do
      {
        result = (unsigned __int8 *)memcpy(v18, v33, v22);
        v33 += v31;
        v18 += v16;
        --v25;
      }
      while (v25);
    }
    else if (v20)
    {
      do
      {
        if (v22)
          result = (unsigned __int8 *)memset(v18, 255, v22);
        v18 += v16;
        --v25;
      }
      while (v25);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Mat_TRC_yuvsf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[3];
  v18 = a6[5];
  if ((v14 & 1) != 0)
  {
    ++v18;
    ++v14;
    if ((v11 & 1) != 0)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  v19 = a6[2];
  v20 = a6[4];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9)
    v12 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15)
    v21 = v19;
  else
    v21 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v18;
  if (v12 >= v21)
    v24 = v21;
  else
    v24 = v12;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Mat_TRC_yuvsf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_420vf_TRC_Mat_TRC_yuvsf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  _WORD *v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  unsigned int v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 *v60;
  _BYTE *v61;
  size_t v62;
  unsigned __int8 *v63;
  _WORD *v64;
  _BYTE *v65;
  _WORD *v66;
  float v67;
  unsigned int v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  BOOL v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v126;
  float v127;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float v182;
  float v183;
  float v184;
  float v185;
  float v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;

  v6 = *(_QWORD *)(result + 28);
  v7 = v6 * a2;
  v8 = 2 * *result;
  v9 = (v6 + v6 * a2) / v8;
  v10 = *((_QWORD *)result + 14);
  v11 = (_QWORD *)*((_QWORD *)result + 16);
  v12 = *((_QWORD *)result + 15) + 2 * (*((_QWORD *)result + 13) * a2 / v8);
  v13 = (uint64_t *)*((_QWORD *)result + 17);
  v14 = v13[1];
  v15 = v11[1];
  v16 = (char *)(v15 + v14 * v12 + v10);
  v17 = v7 / v8;
  if (v15)
    v18 = (_WORD *)(v15 + v14 * v12 + v10);
  else
    v18 = 0;
  if (2 * v9 != 2 * v17)
  {
    v19 = 0;
    v20 = *(_QWORD *)(result + 20);
    v21 = *(_QWORD *)(result + 36);
    v22 = *(_QWORD *)(result + 44) + 2 * v17;
    v23 = 2 * v9 - 2 * v17;
    v24 = *((_QWORD *)result + 19);
    v25 = (_QWORD *)*((_QWORD *)result + 7);
    v26 = (uint64_t *)*((_QWORD *)result + 8);
    v27 = *v26;
    v28 = v26[1];
    v29 = v26[2];
    v30 = v25[2];
    v31 = (char *)(v30 + v29 * v22 + v21);
    v32 = *v13;
    LOWORD(a5) = *(_WORD *)(v24 + 140);
    LOWORD(a6) = *(_WORD *)(v24 + 142);
    v33 = 8191.0 / (float)*(unsigned int *)(v24 + 128);
    v34 = (float)LODWORD(a5);
    v35 = (float)LODWORD(a6);
    v36 = v33 * *(float *)v24;
    v186 = v33 * *(float *)(v24 + 16);
    v187 = v33 * *(float *)(v24 + 8);
    v37 = v33 * *(float *)(v24 + 20);
    *(float *)&v38 = v33 * *(float *)(v24 + 28);
    v184 = *(float *)&v38;
    v185 = v37;
    LOWORD(v38) = *(_WORD *)(v24 + 144);
    v39 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v24 + 146);
    v40 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v24 + 148);
    v41 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v24 + 150);
    v42 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v24 + 152);
    v43 = (float)v38;
    v193 = *(float *)(v24 + 36);
    v194 = v40;
    v191 = *(float *)(v24 + 44);
    v192 = *(float *)(v24 + 40);
    v189 = *(float *)(v24 + 52) * 0.5;
    v190 = *(float *)(v24 + 48) * 0.5;
    v188 = *(float *)(v24 + 56) * 0.5;
    v44 = *(float *)(v24 + 60) * 0.5;
    v45 = *(float *)(v24 + 64) * 0.5;
    v181 = *(float *)(v24 + 72);
    v46 = *(float *)(v24 + 68) * 0.5;
    v47 = *(float *)(v24 + 76);
    v48 = *(float *)(v24 + 80);
    v179 = v47;
    v49 = *(float *)(v24 + 84);
    v50 = *(float *)(v24 + 88);
    v51 = *(float *)(v24 + 92);
    v52 = *(float *)(v24 + 96);
    v53 = *(float *)(v24 + 100);
    v54 = *(float *)(v24 + 104);
    v55 = v24 + 16548;
    v56 = v24 + 164;
    v57 = (_BYTE *)(*v11 + v32 * v12 + v10);
    result = (unsigned __int8 *)(*v25 + v27 * v22 + v21);
    if (v22 >= 0)
      v58 = v22;
    else
      v58 = v22 + 1;
    v59 = v25[1] + v28 * (v58 >> 1) + v21;
    v178 = (float)LODWORD(a6);
    v182 = v45;
    v183 = v44;
    v180 = v46;
    do
    {
      v60 = &result[v27];
      v61 = &v57[v32];
      if (v20)
      {
        v62 = 0;
        v63 = &result[v27];
        v64 = (_WORD *)((char *)v18 + v14);
        v65 = &v57[v32];
        v66 = v18;
        do
        {
          LOBYTE(v47) = *(_BYTE *)(v59 + v62 + 1);
          v67 = (float)LODWORD(v47) - v35;
          v68 = LODWORD(v187);
          v69 = v187 * v67;
          LOBYTE(v68) = *result;
          v70 = v36 * (float)((float)v68 - v34);
          v71 = (float)(v187 * v67) + v70;
          v72 = 8191.0;
          if (v71 <= 8191.0)
          {
            v72 = (float)(v187 * v67) + v70;
            if (v71 < 0.0)
              v72 = 0.0;
          }
          LOBYTE(v71) = *(_BYTE *)(v59 + v62);
          v73 = (float)LODWORD(v71) - v35;
          v74 = (float)(v185 * v67) + (float)(v73 * v186);
          v75 = 8191.0;
          if ((float)(v70 + v74) <= 8191.0)
          {
            v75 = v70 + v74;
            if ((float)(v70 + v74) < 0.0)
              v75 = 0.0;
          }
          v76 = v184 * v73;
          v77 = (float)(v184 * v73) + v70;
          v78 = 8191.0;
          if (v77 <= 8191.0)
          {
            v78 = v77;
            if (v77 < 0.0)
              v78 = 0.0;
          }
          LOBYTE(v77) = result[1];
          v79 = v36 * (float)((float)LODWORD(v77) - v34);
          v80 = 8191.0;
          if ((float)(v69 + v79) <= 8191.0)
          {
            v80 = v69 + v79;
            if ((float)(v69 + v79) < 0.0)
              v80 = 0.0;
          }
          v81 = v74 + v79;
          v82 = 8191.0;
          if ((float)(v74 + v79) <= 8191.0)
          {
            v82 = v74 + v79;
            if (v81 < 0.0)
              v82 = 0.0;
          }
          v83 = v76 + v79;
          v84 = 8191.0;
          if (v83 <= 8191.0)
          {
            v84 = v83;
            if (v83 < 0.0)
              v84 = 0.0;
          }
          LOBYTE(v83) = *v63;
          v85 = v36 * (float)((float)LODWORD(v83) - v34);
          v86 = 8191.0;
          if ((float)(v69 + v85) <= 8191.0)
          {
            v86 = v69 + v85;
            if ((float)(v69 + v85) < 0.0)
              v86 = 0.0;
          }
          v87 = 8191.0;
          if ((float)(v74 + v85) <= 8191.0)
          {
            v87 = v74 + v85;
            if ((float)(v74 + v85) < 0.0)
              v87 = 0.0;
          }
          v88 = v76 + v85;
          v89 = (float)(v76 + v85) <= 8191.0;
          v90 = 8191.0;
          if (v89)
          {
            v90 = v88;
            if (v88 < 0.0)
              v90 = 0.0;
          }
          LOBYTE(v81) = v63[1];
          v91 = v36 * (float)((float)LODWORD(v81) - v34);
          v92 = v69 + v91;
          v89 = (float)(v69 + v91) <= 8191.0;
          v93 = 8191.0;
          if (v89)
          {
            v93 = v92;
            if (v92 < 0.0)
              v93 = 0.0;
          }
          v94 = v74 + v91;
          v89 = (float)(v74 + v91) <= 8191.0;
          v95 = 8191.0;
          if (v89)
          {
            v95 = v94;
            if (v94 < 0.0)
              v95 = 0.0;
          }
          v96 = v76 + v91;
          v97 = 8191.0;
          if (v96 <= 8191.0)
          {
            v97 = v96;
            if (v96 < 0.0)
              v97 = 0.0;
          }
          _H3 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          _H4 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          _H5 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          __asm
          {
            FCVT            S4, H4
            FCVT            S5, H5
          }
          _H2 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H6 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H20 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm { FCVT            S20, H20 }
          _H26 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          __asm
          {
            FCVT            S27, H27
            FCVT            S1, H1
          }
          _H7 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          _H24 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v95, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          _H25 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v97, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          v126 = (float)((float)(v179 * _S4) + (float)(_S3 * v181)) + (float)(_S5 * v48);
          v127 = (float)((float)(v50 * _S4) + (float)(_S3 * v49)) + (float)(_S5 * v51);
          _S3 = (float)((float)(v53 * _S4) + (float)(_S3 * v52)) + (float)(_S5 * v54);
          v129 = (float)((float)(v179 * _S6) + (float)(_S2 * v181)) + (float)(_S20 * v48);
          v130 = (float)((float)(v50 * _S6) + (float)(_S2 * v49)) + (float)(_S20 * v51);
          v131 = (float)((float)(v53 * _S6) + (float)(_S2 * v52)) + (float)(_S20 * v54);
          v132 = (float)((float)(v179 * _S27) + (float)(_S26 * v181)) + (float)(_S1 * v48);
          v133 = (float)((float)(v50 * _S27) + (float)(_S26 * v49)) + (float)(_S1 * v51);
          v134 = (float)((float)(v53 * _S27) + (float)(_S26 * v52)) + (float)(_S1 * v54);
          v135 = (float)((float)(v179 * _S24) + (float)(_S7 * v181)) + (float)(_S25 * v48);
          v136 = (float)((float)(v50 * _S24) + (float)(_S7 * v49)) + (float)(_S25 * v51);
          v137 = (float)((float)(v53 * _S24) + (float)(_S7 * v52)) + (float)(_S25 * v54);
          LOWORD(_S1) = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v126, 0.0), 8191.0)));
          __asm { FCVT            S28, H1 }
          LOWORD(_S1) = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v127, 0.0), 8191.0)));
          LOWORD(_S3) = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          __asm
          {
            FCVT            S30, H1
            FCVT            S23, H3
          }
          LOWORD(_S1) = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v129, 0.0), 8191.0)));
          __asm { FCVT            S24, H1 }
          LOWORD(_S1) = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v130, 0.0), 8191.0)));
          __asm { FCVT            S25, H1 }
          LOWORD(_S1) = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v131, 0.0), 8191.0)));
          __asm { FCVT            S26, H1 }
          _H2 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v132, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v133, 0.0), 8191.0)));
          _H4 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v134, 0.0), 8191.0)));
          _H5 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v135, 0.0), 8191.0)));
          _H6 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v136, 0.0), 8191.0)));
          _H7 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v137, 0.0), 8191.0)));
          v150 = (float)((float)((float)(v192 * _S30) + (float)(v193 * _S28)) + (float)(v191 * _S23)) + v39;
          v151 = _S28 + _S24;
          if (v150 < v39)
            v152 = v39;
          else
            v152 = (float)((float)((float)(v192 * _S30) + (float)(v193 * _S28)) + (float)(v191 * _S23)) + v39;
          v153 = _S30 + _S25;
          v154 = (float)((float)(v194 + (float)(v151 * v190)) + (float)((float)(_S30 + _S25) * v189))
               + (float)((float)(_S23 + _S26) * v188);
          if (v150 <= v41)
            v155 = v152;
          else
            v155 = v41;
          *v57 = llroundf(v155);
          v156 = v43;
          if (v154 <= v43)
          {
            v156 = v154;
            if (v154 < v42)
              v156 = v42;
          }
          v157 = (float)((float)((float)(v192 * _S25) + (float)(v193 * _S24)) + (float)(v191 * _S26)) + v39;
          v57[1] = llroundf(v156);
          v158 = v41;
          if (v157 <= v41)
          {
            v158 = v157;
            if (v157 < v39)
              v158 = v39;
          }
          v159 = (float)((float)(v194 + (float)(v151 * v183)) + (float)(v153 * v182))
               + (float)((float)(_S23 + _S26) * v180);
          v57[2] = llroundf(v158);
          v160 = v43;
          if (v159 <= v43)
          {
            if (v159 < v42)
              v160 = v42;
            else
              v160 = v159;
          }
          v57[3] = llroundf(v160);
          if (v66)
            *v66++ = 0;
          v35 = v178;
          __asm
          {
            FCVT            S2, H2
            FCVT            S1, H1
            FCVT            S3, H4
            FCVT            S4, H5
            FCVT            S5, H6
            FCVT            S6, H7
          }
          v167 = (float)((float)((float)(v192 * _S1) + (float)(v193 * _S2)) + (float)(v191 * _S3)) + v39;
          v168 = (float)((float)((float)(v192 * _S5) + (float)(v193 * _S4)) + (float)(v191 * _S6)) + v39;
          v169 = _S2 + _S4;
          v170 = _S1 + _S5;
          v171 = _S3 + _S6;
          v172 = (float)((float)(v194 + (float)(v169 * v190)) + (float)(v170 * v189)) + (float)(v171 * v188);
          v173 = (float)(v194 + (float)(v169 * v183)) + (float)(v170 * v182);
          if (v167 < v39)
            v174 = v39;
          else
            v174 = v167;
          if (v167 > v41)
            v174 = v41;
          v47 = v173 + (float)(v171 * v180);
          *v65 = llroundf(v174);
          if (v172 < v42)
            v175 = v42;
          else
            v175 = v172;
          if (v172 > v43)
            v175 = v43;
          v65[1] = llroundf(v175);
          if (v168 < v39)
            v176 = v39;
          else
            v176 = v168;
          if (v168 > v41)
            v176 = v41;
          v65[2] = llroundf(v176);
          v177 = v43;
          if (v47 <= v43)
          {
            v177 = v47;
            if (v47 < v42)
              v177 = v42;
          }
          v65[3] = llroundf(v177);
          if (v64)
            *v64++ = 0;
          result += 2;
          v63 += 2;
          v57 += 4;
          v65 += 4;
          v62 += 2;
        }
        while (v20 > v62);
      }
      result = &v60[v27];
      v59 += v28;
      v57 = &v61[v32];
      v19 += 2;
    }
    while (v23 > v19);
    if (v30 && v18)
    {
      do
      {
        result = (unsigned __int8 *)memcpy(v16, v31, v20);
        v31 += v29;
        v16 += v14;
        --v23;
      }
      while (v23);
    }
    else if (v18)
    {
      do
      {
        if (v20)
          result = (unsigned __int8 *)memset(v16, 255, v20);
        v16 += v14;
        --v23;
      }
      while (v23);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_rgb_yuvsf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[3];
  v18 = a6[5];
  if ((v14 & 1) != 0)
  {
    ++v18;
    ++v14;
    if ((v11 & 1) != 0)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  v19 = a6[2];
  v20 = a6[4];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9)
    v12 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15)
    v21 = v19;
  else
    v21 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v18;
  if (v12 >= v21)
    v24 = v21;
  else
    v24 = v12;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_rgb_yuvsf_GCD);
  return 0;
}

_QWORD *vt_Copy_420vf_rgb_yuvsf_GCD(_QWORD *result, uint64_t a2, double a3, double a4, double a5, float a6, float a7)
{
  float v7;
  float v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  _WORD *v26;
  unint64_t v27;
  size_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  _BYTE *v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  size_t v66;
  _BYTE *v67;
  _WORD *v68;
  _BYTE *v69;
  _WORD *v70;
  unsigned int v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  unsigned int v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;

  v14 = *(_QWORD *)((char *)result + 28);
  v15 = v14 * a2;
  v16 = 2 * *(unsigned __int8 *)result;
  v17 = (v14 + v14 * a2) / v16;
  v18 = result[14];
  v19 = (_QWORD *)result[16];
  v20 = result[15] + 2 * (result[13] * a2 / v16);
  v21 = (uint64_t *)result[17];
  v22 = v21[1];
  v23 = v19[1];
  v24 = (char *)(v23 + v22 * v20 + v18);
  v25 = v15 / v16;
  if (v23)
    v26 = (_WORD *)(v23 + v22 * v20 + v18);
  else
    v26 = 0;
  if (2 * v17 != 2 * v25)
  {
    v27 = 0;
    v28 = *(_QWORD *)((char *)result + 20);
    v29 = *(_QWORD *)((char *)result + 36);
    v30 = *(_QWORD *)((char *)result + 44) + 2 * v25;
    v31 = 2 * v17 - 2 * v25;
    v32 = result[19];
    v33 = (_QWORD *)result[7];
    v34 = (uint64_t *)result[8];
    v35 = *v34;
    v36 = v34[1];
    v37 = v34[2];
    v38 = v33[2];
    v39 = (char *)(v38 + v37 * v30 + v29);
    v40 = *v21;
    LOWORD(a6) = *(_WORD *)(v32 + 140);
    LOWORD(a7) = *(_WORD *)(v32 + 142);
    v41 = (float)*(unsigned int *)(v32 + 136) / (float)*(unsigned int *)(v32 + 128);
    LOWORD(v9) = *(_WORD *)(v32 + 144);
    LOWORD(v10) = *(_WORD *)(v32 + 146);
    LOWORD(v11) = *(_WORD *)(v32 + 148);
    LOWORD(v12) = *(_WORD *)(v32 + 150);
    LOWORD(v13) = *(_WORD *)(v32 + 152);
    v42 = *(float *)(v32 + 36);
    v43 = *(float *)(v32 + 40);
    v44 = *(float *)(v32 + 44);
    v45 = *(float *)(v32 + 68);
    v46 = (float)LODWORD(a6);
    v47 = (float)LODWORD(a7);
    v48 = v41 * *(float *)v32;
    v116 = v41 * *(float *)(v32 + 8);
    v115 = v41 * *(float *)(v32 + 16);
    v114 = v41 * *(float *)(v32 + 20);
    v49 = v41 * *(float *)(v32 + 28);
    v50 = (float)v9;
    v51 = (float)v10;
    v52 = (float)v11;
    v53 = (float)v12;
    v54 = (float)v13;
    v55 = *(float *)(v32 + 48) * 0.5;
    v56 = *(float *)(v32 + 52) * 0.5;
    v57 = *(float *)(v32 + 56) * 0.5;
    v58 = *(float *)(v32 + 60) * 0.5;
    v59 = *(float *)(v32 + 64) * 0.5;
    v60 = v45 * 0.5;
    v61 = (_BYTE *)(*v19 + v40 * v20 + v18);
    v62 = (_BYTE *)(*v33 + v35 * v30 + v29);
    if (v30 >= 0)
      v63 = v30;
    else
      v63 = v30 + 1;
    v64 = v33[1] + v36 * (v63 >> 1) + v29;
    do
    {
      v65 = &v62[v35];
      result = &v61[v40];
      if (v28)
      {
        v66 = 0;
        v67 = &v62[v35];
        v68 = v26;
        v69 = &v61[v40];
        v70 = (_WORD *)((char *)v26 + v22);
        do
        {
          LOBYTE(v45) = *(_BYTE *)(v64 + v66);
          *(float *)&v71 = (float)LODWORD(v45);
          v72 = *(float *)&v71 - v47;
          LOBYTE(v71) = *(_BYTE *)(v64 + v66 + 1);
          v73 = (float)v71 - v47;
          v74 = v116 * v73;
          v75 = (float)(v114 * v73) + (float)(v72 * v115);
          v76 = v49 * v72;
          LOBYTE(v7) = *v62;
          *(float *)&v77 = (float)LODWORD(v7) - v46;
          v78 = v48 * *(float *)&v77;
          LOBYTE(v77) = v62[1];
          v80 = (float)v77 - v46;
          v79 = v48 * v80;
          LOBYTE(v8) = *v67;
          LOBYTE(v80) = v67[1];
          v81 = v78 + v75;
          v82 = v76 + v78;
          v83 = v76 + v79;
          v84 = (float)((float)((float)(v43 * (float)(v78 + v75)) + (float)(v42 * (float)(v74 + v78)))
                      + (float)(v44 * (float)(v76 + v78)))
              + v50;
          v85 = (float)((float)((float)(v43 * (float)(v75 + v79)) + (float)(v42 * (float)(v74 + v79)))
                      + (float)(v44 * (float)(v76 + v79)))
              + v50;
          v86 = (float)(v74 + v78) + (float)(v74 + v79);
          v87 = v81 + (float)(v75 + v79);
          v88 = v82 + v83;
          v89 = (float)((float)(v51 + (float)(v86 * v55)) + (float)(v87 * v56)) + (float)((float)(v82 + v83) * v57);
          if (v84 < v50)
            v90 = v50;
          else
            v90 = v84;
          if (v84 > v52)
            v90 = v52;
          *v61 = llroundf(v90);
          if (v89 < v53)
            v91 = v53;
          else
            v91 = v89;
          if (v89 <= v54)
            v92 = v91;
          else
            v92 = v54;
          v61[1] = llroundf(v92);
          v93 = v52;
          if (v85 <= v52)
          {
            v93 = v85;
            if (v85 < v50)
              v93 = v50;
          }
          v94 = (float)((float)(v51 + (float)(v86 * v58)) + (float)(v87 * v59)) + (float)(v88 * v60);
          v61[2] = llroundf(v93);
          v95 = v54;
          if (v94 <= v54)
          {
            if (v94 < v53)
              v95 = v53;
            else
              v95 = v94;
          }
          v61[3] = llroundf(v95);
          if (v68)
            *v68++ = 0;
          v96 = v48 * (float)((float)LODWORD(v8) - v46);
          v97 = v48 * (float)((float)LODWORD(v80) - v46);
          v98 = v74 + v96;
          v99 = v75 + v96;
          v100 = v76 + v96;
          v101 = v74 + v97;
          v102 = v75 + v97;
          v103 = v76 + v97;
          v104 = (float)((float)((float)(v43 * v99) + (float)(v42 * v98)) + (float)(v44 * v100)) + v50;
          v7 = (float)((float)((float)(v43 * v102) + (float)(v42 * v101)) + (float)(v44 * v103)) + v50;
          v105 = v98 + v101;
          v106 = v99 + v102;
          v107 = v100 + v103;
          v108 = (float)((float)(v51 + (float)(v105 * v55)) + (float)(v106 * v56)) + (float)((float)(v100 + v103) * v57);
          if (v104 < v50)
            v109 = v50;
          else
            v109 = v104;
          if (v104 > v52)
            v109 = v52;
          *v69 = llroundf(v109);
          if (v108 < v53)
            v110 = v53;
          else
            v110 = v108;
          if (v108 <= v54)
            v111 = v110;
          else
            v111 = v54;
          v69[1] = llroundf(v111);
          v8 = v52;
          if (v7 <= v52)
          {
            v8 = v7;
            if (v7 < v50)
              v8 = v50;
          }
          v112 = (float)(v51 + (float)(v105 * v58)) + (float)(v106 * v59);
          v45 = v112 + (float)(v107 * v60);
          v69[2] = llroundf(v8);
          v113 = v54;
          if (v45 <= v54)
          {
            v113 = v112 + (float)(v107 * v60);
            if (v45 < v53)
              v113 = v53;
          }
          v69[3] = llroundf(v113);
          if (v70)
            *v70++ = 0;
          v62 += 2;
          v67 += 2;
          v61 += 4;
          v69 += 4;
          v66 += 2;
        }
        while (v28 > v66);
      }
      v62 = &v65[v35];
      v64 += v36;
      v61 = (char *)result + v40;
      v27 += 2;
    }
    while (v31 > v27);
    if (v38 && v26)
    {
      do
      {
        result = memcpy(v24, v39, v28);
        v39 += v37;
        v24 += v22;
        --v31;
      }
      while (v31);
    }
    else if (v26)
    {
      do
      {
        if (v28)
          result = memset(v24, 255, v28);
        v24 += v22;
        --v31;
      }
      while (v31);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Tone_Mat_TRC_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v12 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v11 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Tone_Mat_TRC_xf422_GCD);
  return 0;
}

_QWORD *vt_Copy_420vf_TRC_Tone_Mat_TRC_xf422_GCD(_QWORD *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  unsigned int v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  char v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  _WORD *v63;
  float v64;
  float v65;
  float v66;
  _BYTE *v67;
  char *v68;
  unint64_t v69;
  _WORD *v70;
  _BYTE *v71;
  char *v72;
  float v73;
  unsigned int v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  BOOL v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v121;
  float v122;
  float v123;
  float v128;
  float v129;
  float v134;
  float v135;
  float v136;
  float v141;
  float v142;
  float v144;
  float v145;
  float v146;
  float v148;
  float v149;
  float v152;
  float v153;
  float v154;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v183;
  float v184;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;
  float v200;
  float v201;
  float v204;
  float v205;
  float v206;
  float v207;
  float v208;
  float v209;
  float v210;
  uint64_t v211;
  unint64_t v212;
  _WORD *v213;
  unsigned __int8 *v214;
  __int16 v215;
  uint64_t v216;
  float v217;
  float v218;
  float v219;
  float v220;
  float v221;
  float v222;
  float v223;
  float v224;
  float v225;
  float v226;
  float v227;
  float v228;
  float v229;
  float v230;
  float v231;
  float v232;
  float v233;
  float v234;
  float v235;
  float v236;
  float v237;
  float v238;
  float v239;
  float v240;
  float v241;

  v6 = *(_QWORD *)((char *)result + 28);
  v7 = 2 * *(unsigned __int8 *)result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (2 * v9 != 2 * v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)((char *)result + 20);
    v12 = *(_QWORD *)((char *)result + 36);
    v13 = *(_QWORD *)((char *)result + 44) + 2 * v8;
    v14 = 2 * v9 - 2 * v8;
    v15 = result[14];
    v16 = result[13] * a2 / v7;
    v17 = (_QWORD *)result[16];
    v18 = result[15] + 2 * v16;
    v19 = result[19];
    v20 = (uint64_t *)result[7];
    v21 = (uint64_t *)result[8];
    v22 = (uint64_t *)result[17];
    v23 = *v21;
    v24 = v21[1];
    v25 = v21[2];
    v216 = v20[2];
    v26 = (unsigned __int8 *)(v216 + v25 * v13 + v12);
    v27 = *v22;
    v28 = v22[1];
    v29 = v22[2];
    v30 = v17[2];
    v31 = (char *)(v30 + v29 * v18 + 2 * v15);
    v32 = 8191.0 / (float)*(unsigned int *)(v19 + 128);
    LOWORD(a5) = *(_WORD *)(v19 + 140);
    v33 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v19 + 142);
    v34 = (float)LODWORD(a5);
    v35 = v32 * *(float *)v19;
    v239 = v32 * *(float *)(v19 + 16);
    v240 = v32 * *(float *)(v19 + 8);
    v36 = v32 * *(float *)(v19 + 20);
    *(float *)&v37 = v32 * *(float *)(v19 + 28);
    v237 = *(float *)&v37;
    v238 = v36;
    LOWORD(v37) = *(_WORD *)(v19 + 144);
    v38 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v19 + 146);
    v39 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v19 + 148);
    v40 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v19 + 150);
    v41 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v19 + 152);
    v42 = (float)v37;
    v43 = *(float *)(v19 + 44);
    v44 = *(float *)(v19 + 48) * 0.5;
    v45 = *(float *)(v19 + 56) * 0.5;
    v46 = *(float *)(v19 + 60) * 0.5;
    v47 = *(float *)(v19 + 68) * 0.5;
    v230 = *(float *)(v19 + 76);
    v231 = *(float *)(v19 + 72);
    v228 = *(float *)(v19 + 84);
    v229 = *(float *)(v19 + 80);
    v227 = *(float *)(v19 + 88);
    v226 = *(float *)(v19 + 92);
    v225 = *(float *)(v19 + 96);
    v223 = *(float *)(v19 + 100);
    v221 = *(float *)(v19 + 104);
    v48 = v19 + 164;
    result = (_QWORD *)(v19 + 16548);
    v49 = v17[1];
    v50 = (char *)(*v17 + v27 * v18 + 2 * v15);
    v51 = v49 + v28 * v18 + 2 * v15;
    if (v49)
      v52 = v51;
    else
      v52 = 0;
    v53 = *(unsigned __int8 *)(v19 + 132);
    v54 = 16 - v53;
    _CF = v53 >= 0x11;
    v57 = *v20;
    v56 = v20[1];
    v58 = v57 + v23 * v13;
    if (_CF)
      v54 = 0;
    v59 = v56 + v24 * (v13 / 2);
    v60 = v19 + 32932;
    v61 = (_BYTE *)(v58 + v12);
    v62 = v59 + v12;
    v63 = (_WORD *)(v52 + 2);
    v64 = *(float *)(v19 + 108);
    v65 = *(float *)(v19 + 112);
    v66 = *(float *)(v19 + 120);
    v217 = v66;
    v218 = *(float *)(v19 + 116);
    v241 = (float)LODWORD(a5);
    v235 = v41;
    v236 = v39;
    v233 = v33;
    v234 = *(float *)(v19 + 36);
    v232 = *(float *)(v19 + 64) * 0.5;
    v224 = v35;
    v222 = *(float *)(v19 + 40);
    v220 = *(float *)(v19 + 52) * 0.5;
    v219 = v65;
    do
    {
      v67 = &v61[v23];
      v68 = &v50[v27];
      if (v11)
      {
        v69 = 0;
        v70 = v63;
        v71 = &v61[v23];
        v72 = &v50[v27];
        do
        {
          LOBYTE(v66) = *(_BYTE *)(v62 + v69 + 1);
          v73 = (float)LODWORD(v66) - v34;
          v74 = LODWORD(v240);
          v75 = v240 * v73;
          LOBYTE(v74) = *v61;
          v76 = v35 * (float)((float)v74 - v33);
          v77 = (float)(v240 * v73) + v76;
          v78 = 8191.0;
          if (v77 <= 8191.0)
          {
            v78 = (float)(v240 * v73) + v76;
            if (v77 < 0.0)
              v78 = 0.0;
          }
          LOBYTE(v77) = *(_BYTE *)(v62 + v69);
          v79 = (float)LODWORD(v77) - v34;
          v80 = (float)(v238 * v73) + (float)(v79 * v239);
          v81 = 8191.0;
          if ((float)(v76 + v80) <= 8191.0)
          {
            v81 = v76 + v80;
            if ((float)(v76 + v80) < 0.0)
              v81 = 0.0;
          }
          v82 = v237 * v79;
          v83 = (float)(v237 * v79) + v76;
          v84 = 8191.0;
          if (v83 <= 8191.0)
          {
            v84 = v83;
            if (v83 < 0.0)
              v84 = 0.0;
          }
          LOBYTE(v83) = v61[1];
          v85 = v35 * (float)((float)LODWORD(v83) - v33);
          v86 = 8191.0;
          if ((float)(v75 + v85) <= 8191.0)
          {
            v86 = v75 + v85;
            if ((float)(v75 + v85) < 0.0)
              v86 = 0.0;
          }
          v87 = 8191.0;
          if ((float)(v80 + v85) <= 8191.0)
          {
            v87 = v80 + v85;
            if ((float)(v80 + v85) < 0.0)
              v87 = 0.0;
          }
          v88 = v82 + v85;
          v89 = (float)(v82 + v85) <= 8191.0;
          v90 = 8191.0;
          if (v89)
          {
            v90 = v88;
            if (v88 < 0.0)
              v90 = 0.0;
          }
          LOBYTE(v88) = *v71;
          v91 = v35 * (float)((float)LODWORD(v88) - v33);
          v92 = 8191.0;
          if ((float)(v75 + v91) <= 8191.0)
          {
            v92 = v75 + v91;
            if ((float)(v75 + v91) < 0.0)
              v92 = 0.0;
          }
          v93 = 8191.0;
          if ((float)(v80 + v91) <= 8191.0)
          {
            v93 = v80 + v91;
            if ((float)(v80 + v91) < 0.0)
              v93 = 0.0;
          }
          v94 = v82 + v91;
          v89 = (float)(v82 + v91) <= 8191.0;
          v95 = 8191.0;
          if (v89)
          {
            v95 = v94;
            if (v94 < 0.0)
              v95 = 0.0;
          }
          LOBYTE(_S22) = v71[1];
          v96 = v35 * (float)((float)LODWORD(_S22) - v33);
          v97 = v75 + v96;
          v89 = (float)(v75 + v96) <= 8191.0;
          v98 = 8191.0;
          if (v89)
          {
            v98 = v97;
            if (v97 < 0.0)
              v98 = 0.0;
          }
          v99 = v80 + v96;
          v89 = (float)(v80 + v96) <= 8191.0;
          v100 = 8191.0;
          if (v89)
          {
            v100 = v99;
            if (v99 < 0.0)
              v100 = 0.0;
          }
          v101 = v82 + v96;
          v102 = 8191.0;
          if (v101 <= 8191.0)
          {
            v102 = v101;
            if (v101 < 0.0)
              v102 = 0.0;
          }
          _H2 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H22 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          __asm { FCVT            S24, H22 }
          _H22 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm { FCVT            S25, H22 }
          _H27 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          _H31 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          _H8 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          _H22 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          _H23 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v95, 0.0), 8191.0)));
          _H19 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          _H21 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v100, 0.0), 8191.0)));
          _H26 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v102, 0.0), 8191.0)));
          v121 = fmaxf(_S2, fmaxf(_S24, _S25));
          v122 = (float)((float)((float)(v65 * _S24) + (float)(v64 * _S2)) + (float)(v218 * _S25))
               + (float)(v217 * v121);
          v123 = 8191.0;
          if (v122 <= 8191.0)
          {
            v123 = (float)((float)((float)(v65 * _S24) + (float)(v64 * _S2)) + (float)(v218 * _S25))
                 + (float)(v217 * v121);
            if (v122 < 0.0)
              v123 = 0.0;
          }
          __asm
          {
            FCVT            S1, H27
            FCVT            S3, H31
            FCVT            S17, H8
          }
          _H27 = *((_WORD *)result + llroundf(v123));
          v128 = (float)((float)((float)(v65 * _S3) + (float)(v64 * _S1)) + (float)(v218 * _S17))
               + (float)(v217 * fmaxf(_S1, fmaxf(_S3, _S17)));
          v129 = 8191.0;
          if (v128 <= 8191.0)
          {
            v129 = v128;
            if (v128 < 0.0)
              v129 = 0.0;
          }
          __asm
          {
            FCVT            S28, H30
            FCVT            S22, H22
            FCVT            S23, H23
          }
          _H29 = *((_WORD *)result + llroundf(v129));
          v134 = (float)((float)((float)(v65 * _S22) + (float)(v64 * _S28)) + (float)(v218 * _S23))
               + (float)(v217 * fmaxf(_S28, fmaxf(_S22, _S23)));
          v135 = 8191.0;
          if (v134 <= 8191.0)
          {
            v135 = v134;
            if (v134 < 0.0)
              v135 = 0.0;
          }
          v136 = v44;
          __asm
          {
            FCVT            S19, H19
            FCVT            S21, H21
            FCVT            S26, H26
          }
          _H30 = *((_WORD *)result + llroundf(v135));
          v141 = (float)((float)((float)(v65 * _S21) + (float)(v64 * _S19)) + (float)(v218 * _S26))
               + (float)(v217 * fmaxf(_S19, fmaxf(_S21, _S26)));
          v142 = 8191.0;
          if (v141 <= 8191.0)
          {
            v142 = v141;
            if (v141 < 0.0)
              v142 = 0.0;
          }
          __asm { FCVT            S27, H27 }
          v144 = _S2 * _S27;
          v145 = _S24 * _S27;
          v146 = _S25 * _S27;
          __asm { FCVT            S27, H29 }
          v148 = _S1 * _S27;
          v149 = _S3 * _S27;
          _S17 = _S17 * _S27;
          __asm { FCVT            S27, H30 }
          v152 = _S28 * _S27;
          v153 = _S22 * _S27;
          v154 = _S23 * _S27;
          LOWORD(_S27) = *((_WORD *)result + llroundf(v142));
          __asm { FCVT            S27, H27 }
          v156 = _S19 * _S27;
          v157 = _S21 * _S27;
          v158 = _S26 * _S27;
          v159 = (float)((float)(v230 * v145) + (float)(v144 * v231)) + (float)(v146 * v229);
          v160 = (float)((float)(v227 * v145) + (float)(v144 * v228)) + (float)(v146 * v226);
          _S2 = (float)((float)(v223 * v145) + (float)(v144 * v225)) + (float)(v146 * v221);
          v162 = (float)((float)(v230 * v149) + (float)(v148 * v231)) + (float)(_S17 * v229);
          v163 = (float)((float)(v227 * v149) + (float)(v148 * v228)) + (float)(_S17 * v226);
          v164 = (float)((float)(v223 * v149) + (float)(v148 * v225)) + (float)(_S17 * v221);
          v165 = (float)((float)(v230 * v153) + (float)(v152 * v231)) + (float)(v154 * v229);
          v166 = (float)((float)(v227 * v153) + (float)(v152 * v228)) + (float)(v154 * v226);
          v167 = (float)((float)(v223 * v153) + (float)(v152 * v225)) + (float)(v154 * v221);
          v168 = (float)((float)(v230 * v157) + (float)(v156 * v231)) + (float)(v158 * v229);
          v169 = (float)((float)(v227 * v157) + (float)(v156 * v228)) + (float)(v158 * v226);
          v170 = (float)((float)(v223 * v157) + (float)(v156 * v225)) + (float)(v158 * v221);
          LOWORD(_S17) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v159, 0.0), 8191.0)));
          __asm { FCVT            S21, H17 }
          LOWORD(_S17) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v160, 0.0), 8191.0)));
          __asm { FCVT            S25, H17 }
          LOWORD(_S2) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S2, 0.0), 8191.0)));
          __asm { FCVT            S26, H2 }
          _H22 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v162, 0.0), 8191.0)));
          _H23 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v163, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v164, 0.0), 8191.0)));
          _H17 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v165, 0.0), 8191.0)));
          _H19 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v166, 0.0), 8191.0)));
          _H24 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v167, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v168, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v169, 0.0), 8191.0)));
          _H3 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v170, 0.0), 8191.0)));
          v183 = (float)((float)((float)(v222 * _S25) + (float)(v234 * _S21)) + (float)(v43 * _S26)) + v38;
          v184 = v40;
          if (v183 <= v40)
          {
            v184 = (float)((float)((float)(v222 * _S25) + (float)(v234 * _S21)) + (float)(v43 * _S26)) + v38;
            if (v183 < v38)
              v184 = v38;
          }
          __asm
          {
            FCVT            S28, H22
            FCVT            S23, H23
            FCVT            S22, H27
          }
          v188 = (float)((float)((float)(v222 * _S23) + (float)(v234 * _S28)) + (float)(v43 * _S22)) + v38;
          *(_WORD *)v50 = llroundf(v184) << v54;
          v189 = v40;
          v35 = v224;
          v44 = v136;
          if (v188 <= v40)
          {
            v189 = (float)((float)((float)(v222 * _S23) + (float)(v234 * _S28)) + (float)(v43 * _S22)) + v38;
            if (v188 < v38)
              v189 = v38;
          }
          *((_WORD *)v50 + 1) = llroundf(v189) << v54;
          v190 = _S21 + _S28;
          v191 = _S25 + _S23;
          v192 = _S26 + _S22;
          v193 = (float)((float)(v236 + (float)(v190 * v136)) + (float)(v191 * v220)) + (float)(v192 * v45);
          v194 = v42;
          if (v193 <= v42)
          {
            v194 = (float)((float)(v236 + (float)(v190 * v136)) + (float)(v191 * v220)) + (float)(v192 * v45);
            if (v193 < v235)
              v194 = v235;
          }
          v195 = (float)((float)(v236 + (float)(v190 * v46)) + (float)(v191 * v232)) + (float)(v192 * v47);
          *(v70 - 1) = llroundf(v194) << v54;
          v196 = v42;
          v33 = v233;
          v65 = v219;
          if (v195 <= v42)
          {
            v196 = v195;
            if (v195 < v235)
              v196 = v235;
          }
          __asm
          {
            FCVT            S21, H17
            FCVT            S19, H19
            FCVT            S17, H24
          }
          *v70 = llroundf(v196) << v54;
          v200 = (float)((float)((float)(v222 * _S19) + (float)(v234 * _S21)) + (float)(v43 * _S17)) + v38;
          v201 = v40;
          if (v200 <= v40)
          {
            v201 = (float)((float)((float)(v222 * _S19) + (float)(v234 * _S21)) + (float)(v43 * _S17)) + v38;
            if (v200 < v38)
              v201 = v38;
          }
          __asm
          {
            FCVT            S22, H1
            FCVT            S2, H2
            FCVT            S1, H3
          }
          v204 = (float)((float)((float)(v222 * _S2) + (float)(v234 * _S22)) + (float)(v43 * _S1)) + v38;
          *(_WORD *)v72 = llroundf(v201) << v54;
          v205 = v40;
          if (v204 <= v40)
          {
            v205 = (float)((float)((float)(v222 * _S2) + (float)(v234 * _S22)) + (float)(v43 * _S1)) + v38;
            if (v204 < v38)
              v205 = v38;
          }
          *((_WORD *)v72 + 1) = llroundf(v205) << v54;
          v206 = _S19 + _S2;
          v207 = _S17 + _S1;
          v208 = (float)((float)(v236 + (float)((float)(_S21 + _S22) * v136)) + (float)(v206 * v220))
               + (float)(v207 * v45);
          v209 = v42;
          if (v208 <= v42)
          {
            v209 = (float)((float)(v236 + (float)((float)(_S21 + _S22) * v136)) + (float)(v206 * v220))
                 + (float)(v207 * v45);
            if (v208 < v235)
              v209 = v235;
          }
          v210 = (float)((float)(v236 + (float)((float)(_S21 + _S22) * v46)) + (float)(v206 * v232))
               + (float)(v207 * v47);
          *(_WORD *)((char *)v70 + v28 - 2) = llroundf(v209) << v54;
          v66 = v42;
          if (v210 <= v42)
          {
            v66 = v210;
            if (v210 < v235)
              v66 = v235;
          }
          v61 += 2;
          v71 += 2;
          v50 += 4;
          v72 += 4;
          *(_WORD *)((char *)v70 + v28) = llroundf(v66) << v54;
          v69 += 2;
          v70 += 2;
          v34 = v241;
        }
        while (v11 > v69);
      }
      v61 = &v67[v23];
      v62 += v24;
      v50 = &v68[v27];
      v10 += 2;
      v63 += v28;
    }
    while (v14 > v10);
    if (v216 && v30)
    {
      v211 = 0;
      do
      {
        if (v11)
        {
          v212 = v11;
          v213 = v31;
          v214 = v26;
          do
          {
            v215 = *v214++;
            *v213++ = v215 | (v215 << 8);
            --v212;
          }
          while (v212);
        }
        v26 += v25;
        v31 += v29;
        ++v211;
      }
      while (v211 != v14);
    }
    else if (v30)
    {
      do
      {
        if (v11)
          result = memset(v31, 255, 2 * v11);
        v31 += v29;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Mat_TRC_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v12 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v11 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Mat_TRC_xf422_GCD);
  return 0;
}

_QWORD *vt_Copy_420vf_TRC_Mat_TRC_xf422_GCD(_QWORD *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  unsigned int v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  _BYTE *v56;
  char v57;
  uint64_t v58;
  _WORD *v59;
  _BYTE *v60;
  char *v61;
  unint64_t v62;
  _WORD *v63;
  _BYTE *v64;
  char *v65;
  float v66;
  unsigned int v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  BOOL v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v127;
  float v128;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v151;
  float v152;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v168;
  float v169;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  uint64_t v180;
  unint64_t v181;
  _WORD *v182;
  unsigned __int8 *v183;
  __int16 v184;
  float v185;
  float v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float v198;
  float v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  float v206;
  float v207;

  v5 = *(_QWORD *)((char *)result + 28);
  v6 = 2 * *(unsigned __int8 *)result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)((char *)result + 20);
    v11 = *(_QWORD *)((char *)result + 36);
    v12 = *(_QWORD *)((char *)result + 44) + 2 * v7;
    v13 = 2 * v8 - 2 * v7;
    v14 = result[14];
    v15 = result[13] * a2 / v6;
    v16 = (_QWORD *)result[16];
    v17 = result[15] + 2 * v15;
    v18 = result[19];
    v19 = (_QWORD *)result[7];
    v20 = (uint64_t *)result[8];
    v21 = (uint64_t *)result[17];
    v22 = *v20;
    v23 = v20[1];
    v24 = v20[2];
    v25 = v19[2];
    v26 = (unsigned __int8 *)(v25 + v24 * v12 + v11);
    v27 = *v21;
    v28 = v21[1];
    v29 = v21[2];
    v30 = v16[2];
    v31 = (char *)(v30 + v29 * v17 + 2 * v14);
    v32 = 8191.0 / (float)*(unsigned int *)(v18 + 128);
    LOWORD(a5) = *(_WORD *)(v18 + 140);
    v33 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v18 + 142);
    v34 = (float)LODWORD(a5);
    v35 = v32 * *(float *)v18;
    v202 = v32 * *(float *)(v18 + 16);
    v203 = v32 * *(float *)(v18 + 8);
    v36 = v32 * *(float *)(v18 + 20);
    *(float *)&v37 = v32 * *(float *)(v18 + 28);
    v200 = *(float *)&v37;
    v201 = v36;
    LOWORD(v37) = *(_WORD *)(v18 + 144);
    v38 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v18 + 146);
    v39 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v18 + 148);
    v40 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v18 + 150);
    v41 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v18 + 152);
    v42 = (float)v37;
    v206 = *(float *)(v18 + 40);
    v207 = *(float *)(v18 + 36);
    v205 = *(float *)(v18 + 44);
    v43 = *(float *)(v18 + 48) * 0.5;
    v44 = *(float *)(v18 + 52) * 0.5;
    v45 = *(float *)(v18 + 56) * 0.5;
    v46 = *(float *)(v18 + 60) * 0.5;
    v47 = *(float *)(v18 + 64) * 0.5;
    v48 = *(float *)(v18 + 68) * 0.5;
    v195 = *(float *)(v18 + 76);
    v196 = *(float *)(v18 + 72);
    v193 = *(float *)(v18 + 84);
    v194 = *(float *)(v18 + 80);
    v191 = *(float *)(v18 + 92);
    v192 = *(float *)(v18 + 88);
    v190 = *(float *)(v18 + 96);
    v188 = *(float *)(v18 + 100);
    v49 = *(float *)(v18 + 104);
    v186 = v49;
    v50 = v18 + 164;
    v51 = v16[1];
    v52 = (char *)(*v16 + v27 * v17 + 2 * v14);
    v53 = v51 + v28 * v17 + 2 * v14;
    result = (_QWORD *)(v18 + 16548);
    if (!v51)
      v53 = 0;
    v54 = *(unsigned __int8 *)(v18 + 132);
    v55 = v19[1];
    v56 = (_BYTE *)(*v19 + v22 * v12 + v11);
    if (v54 >= 0x11)
      v57 = 0;
    else
      v57 = 16 - v54;
    v58 = v55 + v23 * (v12 / 2) + v11;
    v59 = (_WORD *)(v53 + 2);
    v204 = (float)LODWORD(a5);
    v198 = v46;
    v199 = v41;
    v197 = v47;
    v189 = v43;
    v187 = v44;
    v185 = v33;
    do
    {
      v60 = &v56[v22];
      v61 = &v52[v27];
      if (v10)
      {
        v62 = 0;
        v63 = v59;
        v64 = &v56[v22];
        v65 = &v52[v27];
        do
        {
          LOBYTE(v49) = *(_BYTE *)(v58 + v62 + 1);
          v66 = (float)LODWORD(v49) - v34;
          v67 = LODWORD(v203);
          v68 = v203 * v66;
          LOBYTE(v67) = *v56;
          v69 = v35 * (float)((float)v67 - v33);
          v70 = (float)(v203 * v66) + v69;
          v71 = 8191.0;
          if (v70 <= 8191.0)
          {
            v71 = (float)(v203 * v66) + v69;
            if (v70 < 0.0)
              v71 = 0.0;
          }
          LOBYTE(v70) = *(_BYTE *)(v58 + v62);
          v72 = (float)LODWORD(v70) - v34;
          v73 = (float)(v201 * v66) + (float)(v72 * v202);
          v74 = 8191.0;
          if ((float)(v69 + v73) <= 8191.0)
          {
            v74 = v69 + v73;
            if ((float)(v69 + v73) < 0.0)
              v74 = 0.0;
          }
          v75 = v200 * v72;
          v76 = (float)(v200 * v72) + v69;
          v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            v77 = v76;
            if (v76 < 0.0)
              v77 = 0.0;
          }
          LOBYTE(v76) = v56[1];
          v78 = v35 * (float)((float)LODWORD(v76) - v33);
          v79 = 8191.0;
          if ((float)(v68 + v78) <= 8191.0)
          {
            v79 = v68 + v78;
            if ((float)(v68 + v78) < 0.0)
              v79 = 0.0;
          }
          v80 = 8191.0;
          if ((float)(v73 + v78) <= 8191.0)
          {
            v80 = v73 + v78;
            if ((float)(v73 + v78) < 0.0)
              v80 = 0.0;
          }
          v81 = v75 + v78;
          v82 = 8191.0;
          if (v81 <= 8191.0)
          {
            v82 = v81;
            if (v81 < 0.0)
              v82 = 0.0;
          }
          LOBYTE(v81) = *v64;
          v83 = (float)LODWORD(v81) - v33;
          v84 = v35 * v83;
          v85 = 8191.0;
          if ((float)(v68 + (float)(v35 * v83)) <= 8191.0)
          {
            v85 = v68 + (float)(v35 * v83);
            if (v85 < 0.0)
              v85 = 0.0;
          }
          v86 = 8191.0;
          if ((float)(v73 + v84) <= 8191.0)
          {
            v86 = v73 + v84;
            if ((float)(v73 + v84) < 0.0)
              v86 = 0.0;
          }
          v87 = v75 + v84;
          v88 = (float)(v75 + v84) <= 8191.0;
          v89 = 8191.0;
          if (v88)
          {
            v89 = v87;
            if (v87 < 0.0)
              v89 = 0.0;
          }
          LOBYTE(v83) = v64[1];
          v90 = v35 * (float)((float)LODWORD(v83) - v33);
          v91 = v68 + v90;
          v88 = (float)(v68 + v90) <= 8191.0;
          v92 = 8191.0;
          if (v88)
          {
            v92 = v91;
            if (v91 < 0.0)
              v92 = 0.0;
          }
          v93 = v73 + v90;
          v88 = (float)(v73 + v90) <= 8191.0;
          v94 = 8191.0;
          if (v88)
          {
            v94 = v93;
            if (v93 < 0.0)
              v94 = 0.0;
          }
          v95 = v39;
          v96 = v35;
          v97 = v75 + v90;
          v98 = 8191.0;
          if (v97 <= 8191.0)
          {
            v98 = v97;
            if (v97 < 0.0)
              v98 = 0.0;
          }
          _H1 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          _H4 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H5 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H2 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          _H6 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm
          {
            FCVT            S2, H2
            FCVT            S6, H6
          }
          _H18 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          __asm { FCVT            S18, H18 }
          _H26 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          _H19 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          _H7 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          _H24 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          __asm
          {
            FCVT            S7, H7
            FCVT            S24, H24
          }
          _H25 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          v127 = (float)((float)(v195 * _S4) + (float)(_S1 * v196)) + (float)(_S5 * v194);
          v128 = (float)((float)(v192 * _S4) + (float)(_S1 * v193)) + (float)(_S5 * v191);
          _S1 = (float)((float)(v188 * _S4) + (float)(_S1 * v190)) + (float)(_S5 * v186);
          v130 = (float)((float)(v195 * _S6) + (float)(_S2 * v196)) + (float)(_S18 * v194);
          v131 = (float)((float)(v192 * _S6) + (float)(_S2 * v193)) + (float)(_S18 * v191);
          v132 = (float)((float)(v188 * _S6) + (float)(_S2 * v190)) + (float)(_S18 * v186);
          v133 = (float)((float)(v195 * _S27) + (float)(_S26 * v196)) + (float)(_S19 * v194);
          v134 = (float)((float)(v192 * _S27) + (float)(_S26 * v193)) + (float)(_S19 * v191);
          v135 = (float)((float)(v188 * _S27) + (float)(_S26 * v190)) + (float)(_S19 * v186);
          v136 = (float)((float)(v195 * _S24) + (float)(_S7 * v196)) + (float)(_S25 * v194);
          v137 = (float)((float)(v192 * _S24) + (float)(_S7 * v193)) + (float)(_S25 * v191);
          v138 = (float)((float)(v188 * _S24) + (float)(_S7 * v190)) + (float)(_S25 * v186);
          LOWORD(_S7) = *((_WORD *)result + llroundf(fminf(fmaxf(v127, 0.0), 8191.0)));
          __asm { FCVT            S24, H7 }
          LOWORD(_S7) = *((_WORD *)result + llroundf(fminf(fmaxf(v128, 0.0), 8191.0)));
          __asm { FCVT            S25, H7 }
          LOWORD(_S1) = *((_WORD *)result + llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          __asm { FCVT            S26, H1 }
          _H27 = *((_WORD *)result + llroundf(fminf(fmaxf(v130, 0.0), 8191.0)));
          _H1 = *((_WORD *)result + llroundf(fminf(fmaxf(v131, 0.0), 8191.0)));
          _H28 = *((_WORD *)result + llroundf(fminf(fmaxf(v132, 0.0), 8191.0)));
          _H6 = *((_WORD *)result + llroundf(fminf(fmaxf(v133, 0.0), 8191.0)));
          _H7 = *((_WORD *)result + llroundf(fminf(fmaxf(v134, 0.0), 8191.0)));
          _H19 = *((_WORD *)result + llroundf(fminf(fmaxf(v135, 0.0), 8191.0)));
          _H2 = *((_WORD *)result + llroundf(fminf(fmaxf(v136, 0.0), 8191.0)));
          _H4 = *((_WORD *)result + llroundf(fminf(fmaxf(v137, 0.0), 8191.0)));
          _H5 = *((_WORD *)result + llroundf(fminf(fmaxf(v138, 0.0), 8191.0)));
          v151 = (float)((float)((float)(v206 * _S25) + (float)(v207 * _S24)) + (float)(v205 * _S26)) + v38;
          v152 = v40;
          if (v151 <= v40)
          {
            v152 = (float)((float)((float)(v206 * _S25) + (float)(v207 * _S24)) + (float)(v205 * _S26)) + v38;
            if (v151 < v38)
              v152 = v38;
          }
          __asm
          {
            FCVT            S30, H27
            FCVT            S27, H1
            FCVT            S1, H28
          }
          v156 = (float)((float)((float)(v206 * _S27) + (float)(v207 * _S30)) + (float)(v205 * _S1)) + v38;
          *(_WORD *)v52 = llroundf(v152) << v57;
          v157 = v40;
          v39 = v95;
          if (v156 <= v40)
          {
            v157 = (float)((float)((float)(v206 * _S27) + (float)(v207 * _S30)) + (float)(v205 * _S1)) + v38;
            if (v156 < v38)
              v157 = v38;
          }
          *((_WORD *)v52 + 1) = llroundf(v157) << v57;
          v158 = _S24 + _S30;
          v159 = _S25 + _S27;
          v160 = _S26 + _S1;
          v161 = (float)((float)(v95 + (float)(v158 * v189)) + (float)(v159 * v187)) + (float)(v160 * v45);
          v162 = v42;
          v35 = v96;
          if (v161 <= v42)
          {
            v162 = (float)((float)(v95 + (float)(v158 * v189)) + (float)(v159 * v187)) + (float)(v160 * v45);
            if (v161 < v199)
              v162 = v199;
          }
          v163 = (float)((float)(v95 + (float)(v158 * v198)) + (float)(v159 * v197)) + (float)(v160 * v48);
          *(v63 - 1) = llroundf(v162) << v57;
          v164 = v42;
          if (v163 <= v42)
          {
            v164 = v163;
            if (v163 < v199)
              v164 = v199;
          }
          __asm
          {
            FCVT            S24, H6
            FCVT            S7, H7
            FCVT            S6, H19
          }
          *v63 = llroundf(v164) << v57;
          v168 = (float)((float)((float)(v206 * _S7) + (float)(v207 * _S24)) + (float)(v205 * _S6)) + v38;
          v169 = v40;
          v33 = v185;
          if (v168 <= v40)
          {
            v169 = (float)((float)((float)(v206 * _S7) + (float)(v207 * _S24)) + (float)(v205 * _S6)) + v38;
            if (v168 < v38)
              v169 = v38;
          }
          __asm
          {
            FCVT            S19, H2
            FCVT            S2, H4
            FCVT            S1, H5
          }
          v173 = (float)((float)((float)(v206 * _S2) + (float)(v207 * _S19)) + (float)(v205 * _S1)) + v38;
          *(_WORD *)v65 = llroundf(v169) << v57;
          v174 = v40;
          if (v173 <= v40)
          {
            v174 = (float)((float)((float)(v206 * _S2) + (float)(v207 * _S19)) + (float)(v205 * _S1)) + v38;
            if (v173 < v38)
              v174 = v38;
          }
          *((_WORD *)v65 + 1) = llroundf(v174) << v57;
          v175 = _S7 + _S2;
          v176 = _S6 + _S1;
          v177 = (float)((float)(v95 + (float)((float)(_S24 + _S19) * v189)) + (float)(v175 * v187))
               + (float)(v176 * v45);
          v178 = v42;
          if (v177 <= v42)
          {
            v178 = (float)((float)(v95 + (float)((float)(_S24 + _S19) * v189)) + (float)(v175 * v187))
                 + (float)(v176 * v45);
            if (v177 < v199)
              v178 = v199;
          }
          v179 = (float)((float)(v95 + (float)((float)(_S24 + _S19) * v198)) + (float)(v175 * v197))
               + (float)(v176 * v48);
          *(_WORD *)((char *)v63 + v28 - 2) = llroundf(v178) << v57;
          v49 = v42;
          if (v179 <= v42)
          {
            v49 = v179;
            if (v179 < v199)
              v49 = v199;
          }
          v56 += 2;
          v64 += 2;
          v52 += 4;
          v65 += 4;
          *(_WORD *)((char *)v63 + v28) = llroundf(v49) << v57;
          v62 += 2;
          v63 += 2;
          v34 = v204;
        }
        while (v10 > v62);
      }
      v56 = &v60[v22];
      v58 += v23;
      v52 = &v61[v27];
      v9 += 2;
      v59 += v28;
    }
    while (v13 > v9);
    if (v25 && v30)
    {
      v180 = 0;
      do
      {
        if (v10)
        {
          v181 = v10;
          v182 = v31;
          v183 = v26;
          do
          {
            v184 = *v183++;
            *v182++ = v184 | (v184 << 8);
            --v181;
          }
          while (v181);
        }
        v26 += v24;
        v31 += v29;
        ++v180;
      }
      while (v180 != v13);
    }
    else if (v30)
    {
      do
      {
        if (v10)
          result = memset(v31, 255, 2 * v10);
        v31 += v29;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_rgb_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v12 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v11 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_rgb_xf422_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_420vf_rgb_xf422_GCD(unsigned __int8 *result, uint64_t a2)
{
  float v2;
  float v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  uint64_t v57;
  unsigned int v58;
  char v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  float v63;
  uint64_t v64;
  _WORD *v65;
  unsigned __int8 *v66;
  char *v67;
  unint64_t v68;
  _WORD *v69;
  unsigned __int8 *v70;
  char *v71;
  unsigned int v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  uint64_t v110;
  unint64_t v111;
  _WORD *v112;
  unsigned __int8 *v113;
  __int16 v114;
  float v115;
  float v116;

  v4 = *(_QWORD *)(result + 28);
  v5 = 2 * *result;
  v6 = v4 * a2 / v5;
  v7 = (v4 + v4 * a2) / v5;
  if (2 * v7 != 2 * v6)
  {
    v8 = 0;
    v9 = *(_QWORD *)(result + 20);
    v10 = *(_QWORD *)(result + 36);
    v11 = *(_QWORD *)(result + 44) + 2 * v6;
    v12 = 2 * v7 - 2 * v6;
    v13 = *((_QWORD *)result + 14);
    v14 = (_QWORD *)*((_QWORD *)result + 16);
    v15 = *((_QWORD *)result + 15) + 2 * (*((_QWORD *)result + 13) * a2 / v5);
    v16 = *((_QWORD *)result + 19);
    v17 = (uint64_t *)*((_QWORD *)result + 7);
    v18 = (uint64_t *)*((_QWORD *)result + 8);
    v19 = (uint64_t *)*((_QWORD *)result + 17);
    v20 = *v18;
    v21 = v18[1];
    v22 = v18[2];
    v23 = v17[2];
    v24 = *v19;
    v25 = v19[1];
    v26 = v19[2];
    v27 = v14[1];
    v28 = v14[2];
    v29 = (char *)(v28 + v26 * v15 + 2 * v13);
    v30 = (char *)(*v14 + v24 * v15 + 2 * v13);
    v31 = v27 + v25 * v15 + 2 * v13;
    v32 = (unsigned __int8 *)(v23 + v22 * v11 + v10);
    *(float *)&v33 = (float)*(unsigned int *)(v16 + 128);
    *(float *)&v34 = (float)*(unsigned int *)(v16 + 136);
    *(float *)&v35 = *(float *)&v34 / *(float *)&v33;
    LOWORD(v33) = *(_WORD *)(v16 + 140);
    v36 = (float)v33;
    LOWORD(v34) = *(_WORD *)(v16 + 142);
    v37 = (float)v34;
    v38 = *(float *)&v35 * *(float *)v16;
    v115 = *(float *)&v35 * *(float *)(v16 + 16);
    v116 = *(float *)&v35 * *(float *)(v16 + 8);
    v39 = *(float *)&v35 * *(float *)(v16 + 20);
    v40 = *(float *)(v16 + 28);
    v41 = *(float *)&v35 * v40;
    LOWORD(v35) = *(_WORD *)(v16 + 144);
    v42 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v16 + 146);
    v43 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v16 + 148);
    v44 = (float)v35;
    LOWORD(v40) = *(_WORD *)(v16 + 150);
    v45 = (float)LODWORD(v40);
    LOWORD(v40) = *(_WORD *)(v16 + 152);
    v46 = (float)LODWORD(v40);
    v47 = *(float *)(v16 + 36);
    v48 = *(float *)(v16 + 40);
    v49 = *(float *)(v16 + 44);
    v50 = 0.5;
    v51 = *(float *)(v16 + 48) * 0.5;
    v52 = *(float *)(v16 + 52) * 0.5;
    v53 = *(float *)(v16 + 56) * 0.5;
    v54 = *(float *)(v16 + 60) * 0.5;
    v55 = *(float *)(v16 + 64) * 0.5;
    v56 = *(float *)(v16 + 68);
    if (v27)
      v57 = v31;
    else
      v57 = 0;
    v58 = *(unsigned __int8 *)(v16 + 132);
    v59 = 16 - v58;
    v60 = v58 >= 0x11;
    v61 = *v17;
    v62 = v17[1];
    result = (unsigned __int8 *)(v61 + v20 * v11 + v10);
    if (v60)
      v59 = 0;
    v63 = v56 * 0.5;
    v64 = v62 + v21 * (v11 / 2) + v10;
    v65 = (_WORD *)(v57 + 2);
    do
    {
      v66 = &result[v20];
      v67 = &v30[v24];
      if (v9)
      {
        v68 = 0;
        v69 = v65;
        v70 = &result[v20];
        v71 = &v30[v24];
        do
        {
          LOBYTE(v56) = *(_BYTE *)(v64 + v68);
          *(float *)&v72 = (float)LODWORD(v56) - v37;
          LOBYTE(v50) = *(_BYTE *)(v64 + v68 + 1);
          v73 = (float)LODWORD(v50) - v37;
          v74 = v116 * v73;
          v75 = (float)(v39 * v73) + (float)(*(float *)&v72 * v115);
          v76 = v41 * *(float *)&v72;
          LOBYTE(v72) = *result;
          v77 = v38 * (float)((float)v72 - v36);
          v78 = (float)(v116 * v73) + v77;
          v79 = v77 + v75;
          v80 = v76 + v77;
          v81 = (float)((float)((float)(v48 * (float)(v77 + v75)) + (float)(v47 * v78))
                      + (float)(v49 * (float)(v76 + v77)))
              + v42;
          v82 = v44;
          if (v81 <= v44)
          {
            v82 = v81;
            if (v81 < v42)
              v82 = v42;
          }
          LOBYTE(v81) = result[1];
          v83 = v38 * (float)((float)LODWORD(v81) - v36);
          LOBYTE(v3) = *v70;
          LOBYTE(v2) = v70[1];
          v84 = v74 + v83;
          v85 = v75 + v83;
          v86 = v76 + v83;
          v87 = (float)((float)((float)(v48 * (float)(v75 + v83)) + (float)(v47 * (float)(v74 + v83)))
                      + (float)(v49 * (float)(v76 + v83)))
              + v42;
          *(_WORD *)v30 = llroundf(v82) << v59;
          v88 = v44;
          if (v87 <= v44)
          {
            v88 = v87;
            if (v87 < v42)
              v88 = v42;
          }
          *((_WORD *)v30 + 1) = llroundf(v88) << v59;
          v89 = v78 + v84;
          v90 = v79 + v85;
          v91 = v80 + v86;
          v92 = (float)((float)(v43 + (float)((float)(v78 + v84) * v51)) + (float)(v90 * v52)) + (float)(v91 * v53);
          v93 = v46;
          if (v92 <= v46)
          {
            v93 = v92;
            if (v92 < v45)
              v93 = v45;
          }
          v94 = (float)((float)(v43 + (float)(v89 * v54)) + (float)(v90 * v55)) + (float)(v91 * v63);
          *(v69 - 1) = llroundf(v93) << v59;
          v95 = v46;
          if (v94 <= v46)
          {
            v95 = v94;
            if (v94 < v45)
              v95 = v45;
          }
          v96 = v38 * (float)((float)LODWORD(v3) - v36);
          v97 = v74 + v96;
          v98 = v75 + v96;
          v3 = v76 + v96;
          *v69 = llroundf(v95) << v59;
          v99 = (float)((float)((float)(v48 * (float)(v75 + v96)) + (float)(v47 * (float)(v74 + v96)))
                      + (float)(v49 * (float)(v76 + v96)))
              + v42;
          v100 = v44;
          if (v99 <= v44)
          {
            v100 = v99;
            if (v99 < v42)
              v100 = v42;
          }
          v101 = v38 * (float)((float)LODWORD(v2) - v36);
          v2 = v74 + v101;
          v102 = v75 + v101;
          v103 = v76 + v101;
          v104 = (float)((float)((float)(v48 * v102) + (float)(v47 * v2)) + (float)(v49 * (float)(v76 + v101))) + v42;
          *(_WORD *)v71 = llroundf(v100) << v59;
          v105 = v44;
          if (v104 <= v44)
          {
            v105 = v104;
            if (v104 < v42)
              v105 = v42;
          }
          *((_WORD *)v71 + 1) = llroundf(v105) << v59;
          v106 = v98 + v102;
          v107 = v3 + v103;
          v108 = (float)((float)(v43 + (float)((float)(v97 + v2) * v51)) + (float)(v106 * v52)) + (float)(v107 * v53);
          v109 = v46;
          if (v108 <= v46)
          {
            v109 = (float)((float)(v43 + (float)((float)(v97 + v2) * v51)) + (float)(v106 * v52)) + (float)(v107 * v53);
            if (v108 < v45)
              v109 = v45;
          }
          v56 = (float)((float)(v43 + (float)((float)(v97 + v2) * v54)) + (float)(v106 * v55)) + (float)(v107 * v63);
          *(_WORD *)((char *)v69 + v25 - 2) = llroundf(v109) << v59;
          v50 = v46;
          if (v56 <= v46)
          {
            v50 = (float)((float)(v43 + (float)((float)(v97 + v2) * v54)) + (float)(v106 * v55)) + (float)(v107 * v63);
            if (v56 < v45)
              v50 = v45;
          }
          result += 2;
          v70 += 2;
          v30 += 4;
          v71 += 4;
          *(_WORD *)((char *)v69 + v25) = llroundf(v50) << v59;
          v68 += 2;
          v69 += 2;
        }
        while (v9 > v68);
      }
      result = &v66[v20];
      v64 += v21;
      v30 = &v67[v24];
      v8 += 2;
      v65 += v25;
    }
    while (v12 > v8);
    if (v23 && v28)
    {
      v110 = 0;
      do
      {
        if (v9)
        {
          v111 = v9;
          v112 = v29;
          v113 = v32;
          do
          {
            v114 = *v113++;
            *v112++ = v114 | (v114 << 8);
            --v111;
          }
          while (v111);
        }
        v32 += v22;
        v29 += v26;
        ++v110;
      }
      while (v110 != v12);
    }
    else if (v28)
    {
      do
      {
        if (v9)
          result = (unsigned __int8 *)memset(v29, 255, 2 * v9);
        v29 += v26;
        --v12;
      }
      while (v12);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Tone_Mat_TRC_v216(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[3];
  v18 = a6[5];
  if ((v14 & 1) != 0)
  {
    ++v18;
    ++v14;
    if ((v11 & 1) != 0)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  v19 = a6[2];
  v20 = a6[4];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9)
    v12 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15)
    v21 = v19;
  else
    v21 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v18;
  if (v12 >= v21)
    v24 = v21;
  else
    v24 = v12;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Tone_Mat_TRC_v216_GCD);
  return 0;
}

_QWORD *vt_Copy_420vf_TRC_Tone_Mat_TRC_v216_GCD(_QWORD *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  unsigned int v39;
  float v40;
  float v41;
  unsigned int v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  _BYTE *v54;
  uint64_t v55;
  float v56;
  float v57;
  _BYTE *v58;
  char *v59;
  unint64_t v60;
  _BYTE *v61;
  _DWORD *v62;
  char *v63;
  _DWORD *v64;
  float v65;
  unsigned int v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  BOOL v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v114;
  float v115;
  float v116;
  float v117;
  float v122;
  float v123;
  float v128;
  float v129;
  float v130;
  float v135;
  float v136;
  float v137;
  float v139;
  float v140;
  float v141;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v157;
  float v160;
  float v161;
  float v163;
  float v164;
  float v165;
  float v166;
  unsigned int v170;
  unsigned int v171;
  unsigned int v174;
  unsigned int v175;
  unsigned int v177;
  unsigned int v179;
  unsigned int v181;
  unsigned int v183;
  float v184;
  float v185;
  float v186;
  float v187;
  float v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float v197;
  __int16 v198;
  float v199;
  float v201;
  float v202;
  float v203;
  float v210;
  float v211;
  float v212;
  float v213;
  float v214;
  float v215;
  float v216;
  float v217;
  float v218;
  float v219;
  uint64_t v220;
  unint64_t v221;
  _WORD *v222;
  unsigned __int8 *v223;
  __int16 v224;
  float v225;
  float v226;
  float v227;
  float v228;
  float v229;
  float v230;
  float v231;
  float v232;
  float v233;
  float v234;
  float v235;
  float v236;
  float v237;
  float v238;
  float v239;
  float v240;
  float v241;
  float v242;
  float v243;
  float v244;
  float v245;
  float v246;
  float v247;
  float v248;
  float v249;

  v7 = *(_QWORD *)((char *)result + 28);
  v8 = v7 * a2;
  v9 = 2 * *(unsigned __int8 *)result;
  v10 = (v7 + v7 * a2) / v9;
  v11 = result[14];
  v12 = (_QWORD *)result[16];
  v13 = result[15] + 2 * (result[13] * a2 / v9);
  v14 = (uint64_t *)result[17];
  v15 = v14[1];
  v16 = v12[1];
  v17 = (char *)(v16 + v15 * v13 + 2 * v11);
  v18 = v8 / v9;
  if (v16)
    v19 = v16 + v15 * v13 + 2 * v11;
  else
    v19 = 0;
  if (2 * v10 != 2 * v18)
  {
    v20 = 0;
    v21 = *(_QWORD *)((char *)result + 20);
    v22 = *(_QWORD *)((char *)result + 36);
    v23 = *(_QWORD *)((char *)result + 44) + 2 * v18;
    v24 = 2 * v10 - 2 * v18;
    v25 = result[19];
    v26 = (_QWORD *)result[7];
    v27 = (uint64_t *)result[8];
    v28 = *v27;
    v29 = v27[1];
    v30 = v27[2];
    v31 = v26[2];
    v32 = (unsigned __int8 *)(v31 + v30 * v23 + v22);
    v33 = *v14;
    LOWORD(a5) = *(_WORD *)(v25 + 140);
    LOWORD(a6) = *(_WORD *)(v25 + 142);
    v34 = 8191.0 / (float)*(unsigned int *)(v25 + 128);
    v35 = (float)LODWORD(a5);
    v36 = (float)LODWORD(a6);
    v37 = v34 * *(float *)v25;
    v246 = v34 * *(float *)(v25 + 16);
    v247 = v34 * *(float *)(v25 + 8);
    v38 = v34 * *(float *)(v25 + 20);
    *(float *)&v39 = v34 * *(float *)(v25 + 28);
    v244 = *(float *)&v39;
    v245 = v38;
    LOWORD(v39) = *(_WORD *)(v25 + 144);
    v40 = (float)v39;
    LOWORD(v39) = *(_WORD *)(v25 + 146);
    v41 = (float)v39;
    LOWORD(v39) = *(_WORD *)(v25 + 148);
    *(float *)&v42 = (float)v39;
    v249 = *(float *)&v42;
    LOWORD(v42) = *(_WORD *)(v25 + 150);
    v43 = (float)v42;
    LOWORD(v42) = *(_WORD *)(v25 + 152);
    v44 = (float)v42;
    v45 = *(float *)(v25 + 40);
    v46 = *(float *)(v25 + 48) * 0.5;
    v47 = *(float *)(v25 + 52) * 0.5;
    v48 = *(float *)(v25 + 56) * 0.5;
    v49 = *(float *)(v25 + 64) * 0.5;
    v239 = *(float *)(v25 + 72);
    v236 = *(float *)(v25 + 80);
    v237 = *(float *)(v25 + 76);
    v234 = *(float *)(v25 + 88);
    v235 = *(float *)(v25 + 84);
    v233 = *(float *)(v25 + 92);
    v232 = *(float *)(v25 + 96);
    v231 = *(float *)(v25 + 100);
    v229 = *(float *)(v25 + 104);
    v50 = v25 + 164;
    result = (_QWORD *)(v25 + 16548);
    v51 = *v12 + v33 * v13;
    v52 = v25 + 32932;
    v53 = (char *)(v51 + 2 * v11);
    v54 = (_BYTE *)(*v26 + v28 * v23 + v22);
    v55 = v26[1] + v29 * (v23 / 2) + v22;
    v227 = *(float *)(v25 + 112);
    v228 = *(float *)(v25 + 108);
    v56 = *(float *)(v25 + 116);
    v57 = *(float *)(v25 + 120);
    v225 = *(float *)(v25 + 36);
    v226 = v56;
    v248 = (float)LODWORD(a6);
    v242 = v37;
    v243 = v41;
    v241 = (float)LODWORD(a5);
    v240 = *(float *)(v25 + 44);
    v238 = *(float *)(v25 + 68) * 0.5;
    v230 = *(float *)(v25 + 60) * 0.5;
    do
    {
      v58 = &v54[v28];
      v59 = &v53[v33];
      if (v21)
      {
        v60 = 0;
        v61 = &v54[v28];
        v62 = (_DWORD *)(v19 + v15);
        v63 = &v53[v33];
        v64 = (_DWORD *)v19;
        do
        {
          LOBYTE(v56) = *(_BYTE *)(v55 + v60 + 1);
          v65 = (float)LODWORD(v56) - v36;
          v66 = LODWORD(v247);
          v67 = v247 * v65;
          LOBYTE(v66) = *v54;
          v68 = v37 * (float)((float)v66 - v35);
          v69 = (float)(v247 * v65) + v68;
          v70 = 8191.0;
          if (v69 <= 8191.0)
          {
            v70 = (float)(v247 * v65) + v68;
            if (v69 < 0.0)
              v70 = 0.0;
          }
          LOBYTE(v69) = *(_BYTE *)(v55 + v60);
          v71 = (float)LODWORD(v69) - v36;
          v72 = (float)(v245 * v65) + (float)(v71 * v246);
          v73 = 8191.0;
          if ((float)(v68 + v72) <= 8191.0)
          {
            v73 = v68 + v72;
            if ((float)(v68 + v72) < 0.0)
              v73 = 0.0;
          }
          v74 = v244 * v71;
          v75 = (float)(v244 * v71) + v68;
          v76 = 8191.0;
          if (v75 <= 8191.0)
          {
            v76 = v75;
            if (v75 < 0.0)
              v76 = 0.0;
          }
          LOBYTE(v75) = v54[1];
          v77 = v37 * (float)((float)LODWORD(v75) - v35);
          v78 = 8191.0;
          if ((float)(v67 + v77) <= 8191.0)
          {
            v78 = v67 + v77;
            if ((float)(v67 + v77) < 0.0)
              v78 = 0.0;
          }
          v79 = 8191.0;
          if ((float)(v72 + v77) <= 8191.0)
          {
            v79 = v72 + v77;
            if ((float)(v72 + v77) < 0.0)
              v79 = 0.0;
          }
          v80 = v74 + v77;
          v81 = (float)(v74 + v77) <= 8191.0;
          v82 = 8191.0;
          if (v81)
          {
            v82 = v80;
            if (v80 < 0.0)
              v82 = 0.0;
          }
          LOBYTE(v80) = *v61;
          v83 = v37 * (float)((float)LODWORD(v80) - v35);
          v84 = 8191.0;
          if ((float)(v67 + v83) <= 8191.0)
          {
            v84 = v67 + v83;
            if ((float)(v67 + v83) < 0.0)
              v84 = 0.0;
          }
          v85 = 8191.0;
          if ((float)(v72 + v83) <= 8191.0)
          {
            v85 = v72 + v83;
            if ((float)(v72 + v83) < 0.0)
              v85 = 0.0;
          }
          v86 = v74 + v83;
          v81 = (float)(v74 + v83) <= 8191.0;
          v87 = 8191.0;
          if (v81)
          {
            v87 = v86;
            if (v86 < 0.0)
              v87 = 0.0;
          }
          LOBYTE(v6) = v61[1];
          v88 = v37 * (float)((float)v6 - v35);
          v89 = v67 + v88;
          v81 = (float)(v67 + v88) <= 8191.0;
          v90 = 8191.0;
          if (v81)
          {
            v90 = v89;
            if (v89 < 0.0)
              v90 = 0.0;
          }
          v91 = v72 + v88;
          v81 = (float)(v72 + v88) <= 8191.0;
          v92 = 8191.0;
          if (v81)
          {
            v92 = v91;
            if (v91 < 0.0)
              v92 = 0.0;
          }
          v93 = v74 + v88;
          v94 = 8191.0;
          if (v93 <= 8191.0)
          {
            v94 = v93;
            if (v93 < 0.0)
              v94 = 0.0;
          }
          _H2 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H23 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S24, H23 }
          _H23 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S25, H23 }
          _H23 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          _H31 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          _H21 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          _H22 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          _H3 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          _H17 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          v114 = fmaxf(_S2, fmaxf(_S24, _S25));
          v115 = (float)((float)((float)(v227 * _S24) + (float)(v228 * _S2)) + (float)(v226 * _S25))
               + (float)(v57 * v114);
          v116 = 8191.0;
          if (v115 <= 8191.0)
          {
            v116 = (float)((float)((float)(v227 * _S24) + (float)(v228 * _S2)) + (float)(v226 * _S25))
                 + (float)(v57 * v114);
            if (v115 < 0.0)
              v116 = 0.0;
          }
          v117 = v45;
          __asm
          {
            FCVT            S26, H23
            FCVT            S28, H29
            FCVT            S30, H31
          }
          _H23 = *((_WORD *)result + llroundf(v116));
          v122 = (float)((float)((float)(v227 * _S28) + (float)(v228 * _S26)) + (float)(v226 * _S30))
               + (float)(v57 * fmaxf(_S26, fmaxf(_S28, _S30)));
          v123 = 8191.0;
          if (v122 <= 8191.0)
          {
            v123 = v122;
            if (v122 < 0.0)
              v123 = 0.0;
          }
          __asm
          {
            FCVT            S9, H27
            FCVT            S10, H21
            FCVT            S11, H22
          }
          _H21 = *((_WORD *)result + llroundf(v123));
          v128 = v57;
          v129 = (float)((float)((float)(v227 * _S10) + (float)(v228 * _S9)) + (float)(v226 * _S11))
               + (float)(v57 * fmaxf(_S9, fmaxf(_S10, _S11)));
          v130 = 8191.0;
          if (v129 <= 8191.0)
          {
            v130 = v129;
            if (v129 < 0.0)
              v130 = 0.0;
          }
          __asm
          {
            FCVT            S29, H1
            FCVT            S31, H3
            FCVT            S8, H17
            FCVT            S1, H23
          }
          v135 = _S2 * _S1;
          v136 = _S24 * _S1;
          v137 = _S25 * _S1;
          __asm { FCVT            S1, H21 }
          v139 = _S26 * _S1;
          v140 = _S28 * _S1;
          v141 = _S30 * _S1;
          LOWORD(_S1) = *((_WORD *)result + llroundf(v130));
          __asm { FCVT            S2, H1 }
          v143 = _S9 * _S2;
          v144 = _S10 * _S2;
          v145 = _S11 * _S2;
          v146 = (float)((float)((float)(v227 * _S31) + (float)(v228 * _S29)) + (float)(v226 * _S8))
               + (float)(v128 * fmaxf(_S29, fmaxf(_S31, _S8)));
          v147 = 8191.0;
          if (v146 <= 8191.0)
          {
            v147 = v146;
            if (v146 < 0.0)
              v147 = 0.0;
          }
          _H25 = *((_WORD *)result + llroundf(v147));
          __asm { FCVT            S25, H25 }
          v150 = _S29 * _S25;
          v151 = _S31 * _S25;
          v152 = _S8 * _S25;
          v153 = (float)((float)(v237 * v136) + (float)(v135 * v239)) + (float)(v137 * v236);
          v154 = (float)((float)(v234 * v136) + (float)(v135 * v235)) + (float)(v137 * v233);
          v155 = (float)((float)(v231 * v136) + (float)(v135 * v232)) + (float)(v137 * v229);
          _S24 = (float)((float)(v237 * v140) + (float)(v139 * v239)) + (float)(v141 * v236);
          v157 = (float)((float)(v234 * v140) + (float)(v139 * v235)) + (float)(v141 * v233);
          _S21 = (float)((float)(v231 * v140) + (float)(v139 * v232)) + (float)(v141 * v229);
          _S22 = (float)((float)(v237 * v144) + (float)(v143 * v239)) + (float)(v145 * v236);
          v160 = (float)((float)(v234 * v144) + (float)(v143 * v235)) + (float)(v145 * v233);
          v161 = (float)((float)(v231 * v144) + (float)(v143 * v232)) + (float)(v145 * v229);
          _S3 = (float)(v234 * v151) + (float)(v150 * v235);
          v163 = (float)(v231 * v151) + (float)(v150 * v232);
          v164 = (float)((float)(v237 * v151) + (float)(v150 * v239)) + (float)(v152 * v236);
          v165 = _S3 + (float)(v152 * v233);
          v166 = v163 + (float)(v152 * v229);
          _H1 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v153, 0.0), 8191.0)));
          __asm { FCVT            S29, H1 }
          _H1 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v154, 0.0), 8191.0)));
          v170 = llroundf(fminf(fmaxf(_S24, 0.0), 8191.0));
          LOWORD(_S24) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v155, 0.0), 8191.0)));
          v171 = llroundf(fminf(fmaxf(v157, 0.0), 8191.0));
          LOWORD(_S3) = *(_WORD *)(v52 + 2 * v170);
          __asm
          {
            FCVT            S27, H1
            FCVT            S17, H3
          }
          v174 = llroundf(fminf(fmaxf(_S21, 0.0), 8191.0));
          LOWORD(_S21) = *(_WORD *)(v52 + 2 * v171);
          v175 = llroundf(fminf(fmaxf(_S22, 0.0), 8191.0));
          LOWORD(_S22) = *(_WORD *)(v52 + 2 * v174);
          _H1 = *(_WORD *)(v52 + 2 * v175);
          v177 = llroundf(fminf(fmaxf(v161, 0.0), 8191.0));
          _H2 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v160, 0.0), 8191.0)));
          v179 = llroundf(fminf(fmaxf(v164, 0.0), 8191.0));
          _H3 = *(_WORD *)(v52 + 2 * v177);
          v181 = llroundf(fminf(fmaxf(v165, 0.0), 8191.0));
          __asm { FCVT            S23, H21 }
          v183 = llroundf(fminf(fmaxf(v166, 0.0), 8191.0));
          v45 = v117;
          v184 = (float)(v117 * _S27) + (float)(v225 * _S29);
          v185 = _S27 + _S23;
          v186 = (float)(v243 + (float)((float)(_S29 + _S17) * v46)) + (float)(v185 * v47);
          v187 = (float)(v243 + (float)((float)(_S29 + _S17) * v230)) + (float)(v185 * v49);
          _H21 = *(_WORD *)(v52 + 2 * v179);
          __asm
          {
            FCVT            S24, H24
            FCVT            S25, H22
          }
          v191 = v184 + (float)(v240 * _S24);
          v192 = _S24 + _S25;
          v193 = v186 + (float)((float)(_S24 + _S25) * v48);
          v194 = v187 + (float)(v192 * v238);
          if (v193 < v40)
            v195 = v40;
          else
            v195 = v193;
          v81 = v193 <= v249;
          _H22 = *(_WORD *)(v52 + 2 * v181);
          v197 = v191 + v40;
          if (!v81)
            v195 = v249;
          v198 = llroundf(v195);
          if (v197 < v43)
            v199 = v43;
          else
            v199 = v191 + v40;
          v81 = v197 <= v44;
          _H24 = *(_WORD *)(v52 + 2 * v183);
          *(_WORD *)v53 = v198;
          if (!v81)
            v199 = v44;
          *((_WORD *)v53 + 1) = llroundf(v199);
          v201 = v249;
          if (v194 <= v249)
          {
            v201 = v194;
            if (v194 < v40)
              v201 = v40;
          }
          v202 = (float)((float)((float)(v117 * _S23) + (float)(v225 * _S17)) + (float)(v240 * _S25)) + v40;
          *((_WORD *)v53 + 2) = llroundf(v201);
          v203 = v44;
          v35 = v241;
          v37 = v242;
          v57 = v128;
          if (v202 <= v44)
          {
            if (v202 < v43)
              v203 = v43;
            else
              v203 = v202;
          }
          *((_WORD *)v53 + 3) = llroundf(v203);
          if (v64)
            *v64++ = 0;
          __asm
          {
            FCVT            S17, H1
            FCVT            S23, H2
            FCVT            S25, H3
            FCVT            S1, H21
            FCVT            S3, H22
            FCVT            S2, H24
          }
          v210 = (float)((float)((float)(v117 * _S23) + (float)(v225 * _S17)) + (float)(v240 * _S25)) + v40;
          v211 = _S17 + _S1;
          v212 = _S23 + _S3;
          v213 = (float)((float)(v243 + (float)(v211 * v46)) + (float)(v212 * v47)) + (float)((float)(_S25 + _S2) * v48);
          v214 = (float)((float)(v243 + (float)(v211 * v230)) + (float)(v212 * v49))
               + (float)((float)(_S25 + _S2) * v238);
          if (v213 < v40)
            *(float *)&v6 = v40;
          else
            *(float *)&v6 = v213;
          if (v213 <= v249)
            v215 = *(float *)&v6;
          else
            v215 = v249;
          *(_WORD *)v63 = llroundf(v215);
          if (v210 < v43)
            v216 = v43;
          else
            v216 = v210;
          if (v210 <= v44)
            v217 = v216;
          else
            v217 = v44;
          *((_WORD *)v63 + 1) = llroundf(v217);
          v218 = v249;
          if (v214 <= v249)
          {
            v218 = v214;
            if (v214 < v40)
              v218 = v40;
          }
          v56 = (float)((float)((float)(v117 * _S3) + (float)(v225 * _S1)) + (float)(v240 * _S2)) + v40;
          *((_WORD *)v63 + 2) = llroundf(v218);
          v219 = v44;
          if (v56 <= v44)
          {
            v219 = v56;
            if (v56 < v43)
              v219 = v43;
          }
          *((_WORD *)v63 + 3) = llroundf(v219);
          v36 = v248;
          if (v62)
            *v62++ = 0;
          v54 += 2;
          v61 += 2;
          v53 += 8;
          v63 += 8;
          v60 += 2;
        }
        while (v21 > v60);
      }
      v54 = &v58[v28];
      v55 += v29;
      v53 = &v59[v33];
      v20 += 2;
    }
    while (v24 > v20);
    if (v31 && v19)
    {
      v220 = 0;
      do
      {
        if (v21)
        {
          v221 = v21;
          v222 = v17;
          v223 = v32;
          do
          {
            v224 = *v223++;
            *v222++ = v224 | (v224 << 8);
            --v221;
          }
          while (v221);
        }
        v32 += v30;
        v17 += v15;
        ++v220;
      }
      while (v220 != v24);
    }
    else if (v19)
    {
      do
      {
        if (v21)
          result = memset(v17, 255, 2 * v21);
        v17 += v15;
        --v24;
      }
      while (v24);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Mat_TRC_v216(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[3];
  v18 = a6[5];
  if ((v14 & 1) != 0)
  {
    ++v18;
    ++v14;
    if ((v11 & 1) != 0)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  v19 = a6[2];
  v20 = a6[4];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9)
    v12 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15)
    v21 = v19;
  else
    v21 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v18;
  if (v12 >= v21)
    v24 = v21;
  else
    v24 = v12;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Mat_TRC_v216_GCD);
  return 0;
}

_QWORD *vt_Copy_420vf_TRC_Mat_TRC_v216_GCD(_QWORD *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  uint64_t v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  unsigned int v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  uint64_t v50;
  char *v51;
  _BYTE *v52;
  uint64_t v53;
  _BYTE *v54;
  char *v55;
  unint64_t v56;
  _BYTE *v57;
  _DWORD *v58;
  char *v59;
  _DWORD *v60;
  float v61;
  unsigned int v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  BOOL v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  unsigned int v113;
  unsigned int v121;
  float v123;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v132;
  float v133;
  float v135;
  float v136;
  float v137;
  unsigned int v139;
  unsigned int v146;
  unsigned int v148;
  float v152;
  float v153;
  float v154;
  float v155;
  float v157;
  float v158;
  __int16 v159;
  float v160;
  float v162;
  float v163;
  float v164;
  float v165;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  uint64_t v182;
  unint64_t v183;
  _WORD *v184;
  unsigned __int8 *v185;
  __int16 v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float v198;
  float v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;

  v6 = *(_QWORD *)((char *)result + 28);
  v7 = v6 * a2;
  v8 = 2 * *(unsigned __int8 *)result;
  v9 = (v6 + v6 * a2) / v8;
  v10 = result[14];
  v11 = (_QWORD *)result[16];
  v12 = result[15] + 2 * (result[13] * a2 / v8);
  v13 = (uint64_t *)result[17];
  v14 = v13[1];
  v15 = v11[1];
  v16 = (char *)(v15 + v14 * v12 + 2 * v10);
  v17 = v7 / v8;
  if (v15)
    v18 = v15 + v14 * v12 + 2 * v10;
  else
    v18 = 0;
  if (2 * v9 != 2 * v17)
  {
    v19 = 0;
    v20 = *(_QWORD *)((char *)result + 20);
    v21 = *(_QWORD *)((char *)result + 36);
    v22 = *(_QWORD *)((char *)result + 44) + 2 * v17;
    v23 = 2 * v9 - 2 * v17;
    v24 = result[19];
    v25 = (_QWORD *)result[7];
    v26 = (uint64_t *)result[8];
    v27 = *v26;
    v28 = v26[1];
    v29 = v26[2];
    v30 = v25[2];
    v31 = (unsigned __int8 *)(v30 + v29 * v22 + v21);
    v32 = *v13;
    LOWORD(a5) = *(_WORD *)(v24 + 140);
    LOWORD(a6) = *(_WORD *)(v24 + 142);
    v33 = 8191.0 / (float)*(unsigned int *)(v24 + 128);
    v34 = (float)LODWORD(a5);
    v35 = (float)LODWORD(a6);
    v36 = v33 * *(float *)v24;
    v201 = v33 * *(float *)(v24 + 16);
    v202 = v33 * *(float *)(v24 + 8);
    v37 = v33 * *(float *)(v24 + 20);
    *(float *)&v38 = v33 * *(float *)(v24 + 28);
    v199 = *(float *)&v38;
    v200 = v37;
    LOWORD(v38) = *(_WORD *)(v24 + 144);
    v39 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v24 + 146);
    v40 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v24 + 148);
    v41 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v24 + 150);
    v42 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v24 + 152);
    v43 = (float)v38;
    v44 = *(float *)(v24 + 36);
    v45 = *(float *)(v24 + 40);
    v46 = *(float *)(v24 + 48) * 0.5;
    v47 = *(float *)(v24 + 52) * 0.5;
    v48 = *(float *)(v24 + 56) * 0.5;
    v204 = *(float *)(v24 + 64) * 0.5;
    v205 = *(float *)(v24 + 60) * 0.5;
    v203 = *(float *)(v24 + 68) * 0.5;
    v197 = *(float *)(v24 + 76);
    v198 = *(float *)(v24 + 72);
    v195 = *(float *)(v24 + 84);
    v196 = *(float *)(v24 + 80);
    v193 = *(float *)(v24 + 92);
    v194 = *(float *)(v24 + 88);
    v192 = *(float *)(v24 + 96);
    v190 = *(float *)(v24 + 100);
    v49 = *(float *)(v24 + 104);
    v188 = v49;
    v50 = v24 + 16548;
    result = (_QWORD *)(v24 + 164);
    v51 = (char *)(*v11 + v32 * v12 + 2 * v10);
    v52 = (_BYTE *)(*v25 + v27 * v22 + v21);
    v53 = v25[1] + v28 * (v22 / 2) + v21;
    v191 = *(float *)(v24 + 44);
    v189 = v40;
    v187 = v36;
    do
    {
      v54 = &v52[v27];
      v55 = &v51[v32];
      if (v20)
      {
        v56 = 0;
        v57 = &v52[v27];
        v58 = (_DWORD *)(v18 + v14);
        v59 = &v51[v32];
        v60 = (_DWORD *)v18;
        do
        {
          LOBYTE(v49) = *(_BYTE *)(v53 + v56 + 1);
          v61 = (float)LODWORD(v49) - v35;
          v62 = LODWORD(v202);
          v63 = v202 * v61;
          LOBYTE(v62) = *v52;
          v64 = v36 * (float)((float)v62 - v34);
          v65 = (float)(v202 * v61) + v64;
          v66 = 8191.0;
          if (v65 <= 8191.0)
          {
            v66 = (float)(v202 * v61) + v64;
            if (v65 < 0.0)
              v66 = 0.0;
          }
          LOBYTE(v65) = *(_BYTE *)(v53 + v56);
          v67 = (float)LODWORD(v65) - v35;
          v68 = (float)(v200 * v61) + (float)(v67 * v201);
          v69 = 8191.0;
          if ((float)(v64 + v68) <= 8191.0)
          {
            v69 = v64 + v68;
            if ((float)(v64 + v68) < 0.0)
              v69 = 0.0;
          }
          v70 = v199 * v67;
          v71 = (float)(v199 * v67) + v64;
          v72 = 8191.0;
          if (v71 <= 8191.0)
          {
            v72 = v71;
            if (v71 < 0.0)
              v72 = 0.0;
          }
          LOBYTE(v71) = v52[1];
          v73 = v36 * (float)((float)LODWORD(v71) - v34);
          v74 = 8191.0;
          if ((float)(v63 + v73) <= 8191.0)
          {
            v74 = v63 + v73;
            if ((float)(v63 + v73) < 0.0)
              v74 = 0.0;
          }
          v75 = v68 + v73;
          v76 = 8191.0;
          if ((float)(v68 + v73) <= 8191.0)
          {
            v76 = v68 + v73;
            if (v75 < 0.0)
              v76 = 0.0;
          }
          v77 = v70 + v73;
          v78 = 8191.0;
          if (v77 <= 8191.0)
          {
            v78 = v77;
            if (v77 < 0.0)
              v78 = 0.0;
          }
          LOBYTE(v77) = *v57;
          v79 = v36 * (float)((float)LODWORD(v77) - v34);
          v80 = 8191.0;
          if ((float)(v63 + v79) <= 8191.0)
          {
            v80 = v63 + v79;
            if ((float)(v63 + v79) < 0.0)
              v80 = 0.0;
          }
          v81 = 8191.0;
          if ((float)(v68 + v79) <= 8191.0)
          {
            v81 = v68 + v79;
            if ((float)(v68 + v79) < 0.0)
              v81 = 0.0;
          }
          v82 = v70 + v79;
          v83 = (float)(v70 + v79) <= 8191.0;
          v84 = 8191.0;
          if (v83)
          {
            v84 = v82;
            if (v82 < 0.0)
              v84 = 0.0;
          }
          LOBYTE(v75) = v57[1];
          v85 = v36 * (float)((float)LODWORD(v75) - v34);
          v86 = v63 + v85;
          v83 = (float)(v63 + v85) <= 8191.0;
          v87 = 8191.0;
          if (v83)
          {
            v87 = v86;
            if (v86 < 0.0)
              v87 = 0.0;
          }
          v88 = v35;
          v89 = v68 + v85;
          v83 = (float)(v68 + v85) <= 8191.0;
          v90 = 8191.0;
          if (v83)
          {
            v90 = v89;
            if (v89 < 0.0)
              v90 = 0.0;
          }
          v91 = v34;
          v92 = v70 + v85;
          v93 = 8191.0;
          if (v92 <= 8191.0)
          {
            v93 = v92;
            if (v92 < 0.0)
              v93 = 0.0;
          }
          _H3 = *((_WORD *)result + llroundf(fminf(fmaxf(v66, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          _H4 = *((_WORD *)result + llroundf(fminf(fmaxf(v69, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H5 = *((_WORD *)result + llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H2 = *((_WORD *)result + llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H6 = *((_WORD *)result + llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H26 = *((_WORD *)result + llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          _H27 = *((_WORD *)result + llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm
          {
            FCVT            S26, H26
            FCVT            S27, H27
          }
          _H17 = *((_WORD *)result + llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          v113 = llroundf(fminf(fmaxf(v84, 0.0), 8191.0));
          __asm { FCVT            S1, H17 }
          _H17 = *((_WORD *)result + v113);
          __asm { FCVT            S17, H17 }
          _H7 = *((_WORD *)result + llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          _H24 = *((_WORD *)result + llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          v121 = llroundf(fminf(fmaxf(v93, 0.0), 8191.0));
          _S25 = (float)((float)(v197 * _S4) + (float)(_S3 * v198)) + (float)(_S5 * v196);
          v123 = (float)((float)(v194 * _S4) + (float)(_S3 * v195)) + (float)(_S5 * v193);
          _S3 = (float)((float)(v190 * _S4) + (float)(_S3 * v192)) + (float)(_S5 * v188);
          v125 = (float)((float)(v197 * _S6) + (float)(_S2 * v198)) + (float)(_S26 * v196);
          v126 = (float)((float)(v194 * _S6) + (float)(_S2 * v195)) + (float)(_S26 * v193);
          v127 = (float)((float)(v190 * _S6) + (float)(_S2 * v192)) + (float)(_S26 * v188);
          v128 = (float)((float)(v197 * _S1) + (float)(_S27 * v198)) + (float)(_S17 * v196);
          v129 = (float)((float)(v194 * _S1) + (float)(_S27 * v195)) + (float)(_S17 * v193);
          v130 = (float)((float)(v190 * _S1) + (float)(_S27 * v192)) + (float)(_S17 * v188);
          _S1 = (float)(v197 * _S24) + (float)(_S7 * v198);
          v132 = (float)(v194 * _S24) + (float)(_S7 * v195);
          v133 = (float)(v190 * _S24) + (float)(_S7 * v192);
          LOWORD(_S24) = *((_WORD *)result + v121);
          __asm { FCVT            S24, H24 }
          v135 = _S1 + (float)(_S24 * v196);
          v136 = v132 + (float)(_S24 * v193);
          v137 = v133 + (float)(_S24 * v188);
          LOWORD(_S1) = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(_S25, 0.0), 8191.0)));
          __asm { FCVT            S24, H1 }
          LOWORD(_S1) = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v123, 0.0), 8191.0)));
          LOWORD(_S25) = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          v139 = llroundf(fminf(fmaxf(v126, 0.0), 8191.0));
          LOWORD(_S3) = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v125, 0.0), 8191.0)));
          __asm
          {
            FCVT            S28, H1
            FCVT            S5, H3
          }
          LOWORD(_S3) = *(_WORD *)(v50 + 2 * v139);
          _H21 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v127, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v128, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v129, 0.0), 8191.0)));
          _H4 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v130, 0.0), 8191.0)));
          v146 = llroundf(fminf(fmaxf(v136, 0.0), 8191.0));
          __asm { FCVT            S3, H3 }
          v148 = llroundf(fminf(fmaxf(v137, 0.0), 8191.0));
          _H6 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v135, 0.0), 8191.0)));
          __asm
          {
            FCVT            S26, H25
            FCVT            S25, H21
          }
          v152 = (float)((float)(v45 * _S28) + (float)(v44 * _S24)) + (float)(v191 * _S26);
          v153 = (float)((float)(v189 + (float)((float)(_S24 + _S5) * v46)) + (float)((float)(_S28 + _S3) * v47))
               + (float)((float)(_S26 + _S25) * v48);
          v154 = (float)((float)(v189 + (float)((float)(_S24 + _S5) * v205)) + (float)((float)(_S28 + _S3) * v204))
               + (float)((float)(_S26 + _S25) * v203);
          if (v153 < v39)
            v155 = v39;
          else
            v155 = v153;
          v83 = v153 <= v41;
          _H7 = *(_WORD *)(v50 + 2 * v146);
          v157 = v152 + v39;
          if (v83)
            v158 = v155;
          else
            v158 = v41;
          v159 = llroundf(v158);
          if (v157 < v42)
            v160 = v42;
          else
            v160 = v157;
          _H24 = *(_WORD *)(v50 + 2 * v148);
          *(_WORD *)v51 = v159;
          if (v157 <= v43)
            v162 = v160;
          else
            v162 = v43;
          *((_WORD *)v51 + 1) = llroundf(v162);
          v163 = v41;
          if (v154 <= v41)
          {
            v163 = v154;
            if (v154 < v39)
              v163 = v39;
          }
          v164 = (float)((float)((float)(v45 * _S3) + (float)(v44 * _S5)) + (float)(v191 * _S25)) + v39;
          *((_WORD *)v51 + 2) = llroundf(v163);
          v165 = v43;
          if (v164 <= v43)
          {
            if (v164 < v42)
              v165 = v42;
            else
              v165 = v164;
          }
          *((_WORD *)v51 + 3) = llroundf(v165);
          v34 = v91;
          if (v60)
            *v60++ = 0;
          v35 = v88;
          v36 = v187;
          __asm
          {
            FCVT            S5, H1
            FCVT            S17, H2
            FCVT            S4, H4
            FCVT            S1, H6
            FCVT            S3, H7
            FCVT            S2, H24
          }
          v172 = (float)((float)((float)(v45 * _S17) + (float)(v44 * _S5)) + (float)(v191 * _S4)) + v39;
          v173 = _S5 + _S1;
          v174 = _S17 + _S3;
          v175 = _S4 + _S2;
          v176 = (float)((float)(v189 + (float)(v173 * v46)) + (float)(v174 * v47)) + (float)(v175 * v48);
          v177 = (float)((float)(v189 + (float)(v173 * v205)) + (float)(v174 * v204)) + (float)(v175 * v203);
          if (v176 < v39)
            v178 = v39;
          else
            v178 = v176;
          if (v176 > v41)
            v178 = v41;
          *(_WORD *)v59 = llroundf(v178);
          if (v172 < v42)
            v179 = v42;
          else
            v179 = v172;
          if (v172 > v43)
            v179 = v43;
          *((_WORD *)v59 + 1) = llroundf(v179);
          v180 = v41;
          if (v177 <= v41)
          {
            v180 = v177;
            if (v177 < v39)
              v180 = v39;
          }
          v49 = (float)((float)((float)(v45 * _S3) + (float)(v44 * _S1)) + (float)(v191 * _S2)) + v39;
          *((_WORD *)v59 + 2) = llroundf(v180);
          v181 = v43;
          if (v49 <= v43)
          {
            v181 = v49;
            if (v49 < v42)
              v181 = v42;
          }
          *((_WORD *)v59 + 3) = llroundf(v181);
          if (v58)
            *v58++ = 0;
          v52 += 2;
          v57 += 2;
          v51 += 8;
          v59 += 8;
          v56 += 2;
        }
        while (v20 > v56);
      }
      v52 = &v54[v27];
      v53 += v28;
      v51 = &v55[v32];
      v19 += 2;
    }
    while (v23 > v19);
    if (v30 && v18)
    {
      v182 = 0;
      do
      {
        if (v20)
        {
          v183 = v20;
          v184 = v16;
          v185 = v31;
          do
          {
            v186 = *v185++;
            *v184++ = v186 | (v186 << 8);
            --v183;
          }
          while (v183);
        }
        v31 += v29;
        v16 += v14;
        ++v182;
      }
      while (v182 != v23);
    }
    else if (v18)
    {
      do
      {
        if (v20)
          result = memset(v16, 255, 2 * v20);
        v16 += v14;
        --v23;
      }
      while (v23);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_rgb_v216(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[3];
  v18 = a6[5];
  if ((v14 & 1) != 0)
  {
    ++v18;
    ++v14;
    if ((v11 & 1) != 0)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  v19 = a6[2];
  v20 = a6[4];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9)
    v12 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15)
    v21 = v19;
  else
    v21 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v18;
  if (v12 >= v21)
    v24 = v21;
  else
    v24 = v12;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_rgb_v216_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_420vf_rgb_v216_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, double a5, float a6, float a7)
{
  float v7;
  float v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  float v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 *v40;
  uint64_t v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  unsigned __int8 *v66;
  unint64_t v67;
  _BYTE *v68;
  _DWORD *v69;
  unsigned __int8 *v70;
  _DWORD *v71;
  unsigned int v72;
  float v73;
  float v74;
  unsigned int v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  uint64_t v117;
  unint64_t v118;
  _WORD *v119;
  unsigned __int8 *v120;
  __int16 v121;
  float v122;
  float v123;
  float v124;

  v14 = *(_QWORD *)(result + 28);
  v15 = v14 * a2;
  v16 = 2 * *result;
  v17 = (v14 + v14 * a2) / v16;
  v18 = *((_QWORD *)result + 14);
  v19 = *((_QWORD *)result + 13) * a2 / v16;
  v20 = (_QWORD *)*((_QWORD *)result + 16);
  v21 = *((_QWORD *)result + 15) + 2 * v19;
  v22 = (uint64_t *)*((_QWORD *)result + 17);
  v23 = v22[1];
  v24 = v20[1];
  v25 = (char *)(v24 + v23 * v21 + 2 * v18);
  v26 = v15 / v16;
  if (v24)
    v27 = v24 + v23 * v21 + 2 * v18;
  else
    v27 = 0;
  if (2 * v17 != 2 * v26)
  {
    v28 = 0;
    v29 = *(_QWORD *)(result + 20);
    v30 = *(_QWORD *)(result + 36);
    v31 = *(_QWORD *)(result + 44) + 2 * v26;
    v32 = 2 * v17 - 2 * v26;
    v33 = *((_QWORD *)result + 19);
    v34 = (_QWORD *)*((_QWORD *)result + 7);
    v35 = (uint64_t *)*((_QWORD *)result + 8);
    v36 = *v35;
    v37 = v35[1];
    v38 = v35[2];
    v39 = v34[2];
    v40 = (unsigned __int8 *)(v39 + v38 * v31 + v30);
    v41 = *v22;
    LOWORD(a6) = *(_WORD *)(v33 + 140);
    LOWORD(a7) = *(_WORD *)(v33 + 142);
    v42 = (float)*(unsigned int *)(v33 + 136) / (float)*(unsigned int *)(v33 + 128);
    LOWORD(v9) = *(_WORD *)(v33 + 144);
    LOWORD(v10) = *(_WORD *)(v33 + 146);
    LOWORD(v11) = *(_WORD *)(v33 + 148);
    LOWORD(v12) = *(_WORD *)(v33 + 150);
    LOWORD(v13) = *(_WORD *)(v33 + 152);
    v43 = *(float *)(v33 + 36);
    v44 = *(float *)(v33 + 40);
    v45 = *(float *)(v33 + 44);
    v46 = (float)LODWORD(a6);
    v47 = (float)LODWORD(a7);
    v48 = v42 * *(float *)v33;
    v124 = v42 * *(float *)(v33 + 8);
    v123 = v42 * *(float *)(v33 + 16);
    v122 = v42 * *(float *)(v33 + 20);
    v49 = v42 * *(float *)(v33 + 28);
    v50 = (float)v9;
    v51 = (float)v10;
    v52 = (float)v11;
    v53 = (float)LODWORD(v12);
    v54 = (float)v13;
    v55 = 0.5;
    v56 = *(float *)(v33 + 48) * 0.5;
    v57 = *(float *)(v33 + 52) * 0.5;
    v58 = *(float *)(v33 + 56) * 0.5;
    v59 = *(float *)(v33 + 60) * 0.5;
    v60 = *(float *)(v33 + 64) * 0.5;
    v61 = *(float *)(v33 + 68) * 0.5;
    result = (unsigned __int8 *)(*v20 + v41 * v21 + 2 * v18);
    v62 = (_BYTE *)(*v34 + v36 * v31 + v30);
    if (v31 >= 0)
      v63 = v31;
    else
      v63 = v31 + 1;
    v64 = v34[1] + v37 * (v63 >> 1) + v30;
    do
    {
      v65 = &v62[v36];
      v66 = &result[v41];
      if (v29)
      {
        v67 = 0;
        v68 = &v62[v36];
        v69 = (_DWORD *)v27;
        v70 = &result[v41];
        v71 = (_DWORD *)(v27 + v23);
        do
        {
          LOBYTE(v55) = *(_BYTE *)(v64 + v67);
          *(float *)&v72 = (float)LODWORD(v55) - v47;
          LOBYTE(v12) = *(_BYTE *)(v64 + v67 + 1);
          v73 = (float)LODWORD(v12) - v47;
          v74 = v124 * v73;
          *(float *)&v75 = v122 * v73;
          v76 = *(float *)&v75 + (float)(*(float *)&v72 * v123);
          v77 = v49 * *(float *)&v72;
          LOBYTE(v72) = *v62;
          v78 = v48 * (float)((float)v72 - v46);
          LOBYTE(v75) = v62[1];
          v79 = v48 * (float)((float)v75 - v46);
          LOBYTE(v8) = *v68;
          LOBYTE(v7) = v68[1];
          v80 = v74 + v78;
          v81 = v78 + v76;
          v82 = v77 + v78;
          v83 = v74 + v79;
          v84 = v76 + v79;
          v85 = v77 + v79;
          v86 = (float)((float)((float)(v44 * (float)(v78 + v76)) + (float)(v43 * (float)(v74 + v78)))
                      + (float)(v45 * (float)(v77 + v78)))
              + v50;
          v87 = v80 + (float)(v74 + v79);
          v88 = v81 + (float)(v76 + v79);
          v89 = v82 + (float)(v77 + v79);
          v90 = (float)((float)(v51 + (float)(v87 * v56)) + (float)(v88 * v57)) + (float)(v89 * v58);
          if (v90 < v50)
            v91 = v50;
          else
            v91 = (float)((float)(v51 + (float)(v87 * v56)) + (float)(v88 * v57)) + (float)(v89 * v58);
          if (v90 > v52)
            v91 = v52;
          *(_WORD *)result = llroundf(v91);
          v92 = v54;
          if (v86 <= v54)
          {
            v92 = v86;
            if (v86 < v53)
              v92 = v53;
          }
          v93 = (float)((float)(v51 + (float)(v87 * v59)) + (float)(v88 * v60)) + (float)(v89 * v61);
          *((_WORD *)result + 1) = llroundf(v92);
          v94 = v52;
          if (v93 <= v52)
          {
            v94 = v93;
            if (v93 < v50)
              v94 = v50;
          }
          v95 = (float)((float)((float)(v44 * v84) + (float)(v43 * v83)) + (float)(v45 * v85)) + v50;
          *((_WORD *)result + 2) = llroundf(v94);
          v96 = v54;
          if (v95 <= v54)
          {
            if (v95 < v53)
              v96 = v53;
            else
              v96 = (float)((float)((float)(v44 * v84) + (float)(v43 * v83)) + (float)(v45 * v85)) + v50;
          }
          *((_WORD *)result + 3) = llroundf(v96);
          if (v69)
            *v69++ = 0;
          v97 = v48 * (float)((float)LODWORD(v8) - v46);
          v98 = v48 * (float)((float)LODWORD(v7) - v46);
          v99 = v74 + v97;
          v100 = v76 + v97;
          v101 = v77 + v97;
          v102 = v74 + v98;
          v103 = v76 + v98;
          v104 = v77 + v98;
          v105 = (float)((float)((float)(v44 * v100) + (float)(v43 * v99)) + (float)(v45 * v101)) + v50;
          v106 = (float)((float)((float)(v44 * v103) + (float)(v43 * v102)) + (float)(v45 * v104)) + v50;
          v107 = v99 + v102;
          v8 = v51 + (float)(v107 * v56);
          v108 = v100 + v103;
          v7 = v8 + (float)(v108 * v57);
          v109 = v101 + v104;
          v110 = v7 + (float)(v109 * v58);
          v12 = (float)(v51 + (float)(v107 * v59)) + (float)(v108 * v60);
          if (v110 < v50)
            v111 = v50;
          else
            v111 = v7 + (float)(v109 * v58);
          if (v110 <= v52)
            v112 = v111;
          else
            v112 = v52;
          v113 = v12 + (float)(v109 * v61);
          *(_WORD *)v70 = llroundf(v112);
          if (v105 < v53)
            v114 = v53;
          else
            v114 = v105;
          if (v105 > v54)
            v114 = v54;
          *((_WORD *)v70 + 1) = llroundf(v114);
          if (v113 < v50)
            v115 = v50;
          else
            v115 = v113;
          if (v113 <= v52)
            v116 = v115;
          else
            v116 = v52;
          *((_WORD *)v70 + 2) = llroundf(v116);
          v55 = v54;
          if (v106 <= v54)
          {
            v55 = v106;
            if (v106 < v53)
              v55 = v53;
          }
          *((_WORD *)v70 + 3) = llroundf(v55);
          if (v71)
            *v71++ = 0;
          v62 += 2;
          v68 += 2;
          result += 8;
          v70 += 8;
          v67 += 2;
        }
        while (v29 > v67);
      }
      v62 = &v65[v36];
      v64 += v37;
      result = &v66[v41];
      v28 += 2;
    }
    while (v32 > v28);
    if (v39 && v27)
    {
      v117 = 0;
      do
      {
        if (v29)
        {
          v118 = v29;
          v119 = v25;
          v120 = v40;
          do
          {
            v121 = *v120++;
            *v119++ = v121 | (v121 << 8);
            --v118;
          }
          while (v118);
        }
        v40 += v38;
        v25 += v23;
        ++v117;
      }
      while (v117 != v32);
    }
    else if (v27)
    {
      do
      {
        if (v29)
          result = (unsigned __int8 *)memset(v25, 255, 2 * v29);
        v25 += v23;
        --v32;
      }
      while (v32);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Tone_Mat_TRC_444vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[3];
  v18 = a6[5];
  if ((v14 & 1) != 0)
  {
    ++v18;
    ++v14;
    if ((v11 & 1) != 0)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  v19 = a6[2];
  v20 = a6[4];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9)
    v12 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15)
    v21 = v19;
  else
    v21 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v18;
  if (v12 >= v21)
    v24 = v21;
  else
    v24 = v12;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Tone_Mat_TRC_444vf_GCD);
  return 0;
}

_QWORD *vt_Copy_420vf_TRC_Tone_Mat_TRC_444vf_GCD(_QWORD *result, uint64_t a2, double a3, double a4, float a5)
{
  float v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  unsigned int v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  _BYTE *v51;
  uint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  float v61;
  float v62;
  _BYTE *v64;
  _BYTE *v65;
  _BYTE *v66;
  size_t v67;
  _BYTE *v68;
  _BYTE *v69;
  _BYTE *v70;
  float v71;
  unsigned int v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  BOOL v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v120;
  float v121;
  float v122;
  float v127;
  float v128;
  float v129;
  float v134;
  float v135;
  float v136;
  float v141;
  float v142;
  float v144;
  float v145;
  float v146;
  float v149;
  float v150;
  float v152;
  float v153;
  float v154;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v184;
  float v185;
  float v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v195;
  float v196;
  float v197;
  float v198;
  float v199;
  float v200;
  float v204;
  float v205;
  float v206;
  float v207;
  float v208;
  float v209;
  float v212;
  float v213;
  float v214;
  float v215;
  float v216;
  float v217;
  float v218;
  float v219;
  float v220;
  float v221;
  float v222;
  float v223;
  float v224;
  float v225;
  float v226;
  float v227;
  float v228;
  float v229;
  float v230;
  float v231;
  float v232;
  float v233;
  float v234;
  float v235;
  float v236;
  float v237;
  float v238;
  float v239;
  float v240;
  float v241;
  float v242;

  v6 = *(_QWORD *)((char *)result + 28);
  v7 = 2 * *(unsigned __int8 *)result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (2 * v9 != 2 * v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)((char *)result + 20);
    v12 = *(_QWORD *)((char *)result + 36);
    v13 = *(_QWORD *)((char *)result + 44) + 2 * v8;
    v14 = 2 * v9 - 2 * v8;
    v15 = result[14];
    v16 = (_QWORD *)result[16];
    v17 = result[15] + 2 * (result[13] * a2 / v7);
    v18 = result[19];
    v19 = (uint64_t *)result[7];
    v20 = (uint64_t *)result[8];
    v21 = (uint64_t *)result[17];
    v22 = *v20;
    v23 = v20[1];
    v24 = v20[2];
    v25 = v19[2];
    v26 = (char *)(v25 + v24 * v13 + v12);
    v27 = *v21;
    v28 = v21[1];
    v29 = v21[2];
    v30 = v16[2];
    v31 = (char *)(v30 + v29 * v17 + v15);
    v32 = 8191.0 / (float)*(unsigned int *)(v18 + 128);
    LOWORD(a5) = *(_WORD *)(v18 + 140);
    v33 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v18 + 142);
    v34 = (float)LODWORD(a5);
    v35 = v32 * *(float *)v18;
    v241 = v32 * *(float *)(v18 + 16);
    v242 = v32 * *(float *)(v18 + 8);
    v36 = v32 * *(float *)(v18 + 20);
    *(float *)&v37 = v32 * *(float *)(v18 + 28);
    v239 = *(float *)&v37;
    v240 = v36;
    LOWORD(v37) = *(_WORD *)(v18 + 144);
    v38 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v18 + 146);
    v39 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v18 + 148);
    v40 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v18 + 150);
    v41 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v18 + 152);
    v42 = (float)v37;
    v43 = *(float *)(v18 + 40);
    v44 = *(float *)(v18 + 44);
    v45 = *(float *)(v18 + 52);
    v46 = *(float *)(v18 + 56);
    v47 = *(float *)(v18 + 64);
    v237 = *(float *)(v18 + 76);
    v238 = *(float *)(v18 + 72);
    v235 = *(float *)(v18 + 84);
    v236 = *(float *)(v18 + 80);
    v234 = *(float *)(v18 + 88);
    v232 = *(float *)(v18 + 92);
    v230 = *(float *)(v18 + 96);
    v227 = *(float *)(v18 + 104);
    v228 = *(float *)(v18 + 100);
    v48 = v18 + 164;
    v49 = v16[1];
    v50 = (_BYTE *)(*v16 + v27 * v17 + v15);
    v51 = (_BYTE *)(v49 + v28 * v17 + v15);
    v52 = v18 + 16548;
    if (v49)
      v53 = v51;
    else
      v53 = 0;
    v54 = *v19;
    v55 = v19[1];
    v56 = v54 + v22 * v13;
    if (v13 >= 0)
      v57 = v13;
    else
      v57 = v13 + 1;
    v58 = v55 + v23 * (v57 >> 1);
    result = (_QWORD *)(v18 + 32932);
    v59 = (_BYTE *)(v56 + v12);
    v60 = v58 + v12;
    v61 = *(float *)(v18 + 108);
    v62 = *(float *)(v18 + 112);
    _S1 = *(float *)(v18 + 120);
    v225 = _S1;
    v226 = *(float *)(v18 + 116);
    v223 = v39;
    v224 = (float)LODWORD(a5);
    v221 = *(float *)(v18 + 68);
    v222 = *(float *)(v18 + 60);
    v233 = v41;
    v231 = *(float *)(v18 + 36);
    v229 = *(float *)(v18 + 48);
    v219 = v33;
    v220 = v35;
    v217 = v62;
    v218 = v61;
    do
    {
      v64 = &v59[v22];
      v65 = &v53[v28];
      v66 = &v50[v27];
      if (v11)
      {
        v67 = 0;
        v68 = &v59[v22];
        v69 = &v53[v28];
        v70 = &v50[v27];
        do
        {
          LOBYTE(_S1) = *(_BYTE *)(v60 + v67 + 1);
          v71 = (float)LODWORD(_S1) - v34;
          v72 = LODWORD(v242);
          v73 = v242 * v71;
          LOBYTE(v72) = *v59;
          v74 = v35 * (float)((float)v72 - v33);
          v75 = (float)(v242 * v71) + v74;
          v76 = 8191.0;
          if (v75 <= 8191.0)
          {
            v76 = (float)(v242 * v71) + v74;
            if (v75 < 0.0)
              v76 = 0.0;
          }
          LOBYTE(v75) = *(_BYTE *)(v60 + v67);
          v77 = (float)LODWORD(v75) - v34;
          v78 = (float)(v240 * v71) + (float)(v77 * v241);
          v79 = 8191.0;
          if ((float)(v74 + v78) <= 8191.0)
          {
            v79 = v74 + v78;
            if ((float)(v74 + v78) < 0.0)
              v79 = 0.0;
          }
          v80 = v239 * v77;
          v81 = (float)(v239 * v77) + v74;
          v82 = 8191.0;
          if (v81 <= 8191.0)
          {
            v82 = v81;
            if (v81 < 0.0)
              v82 = 0.0;
          }
          LOBYTE(v81) = v59[1];
          v83 = v35 * (float)((float)LODWORD(v81) - v33);
          v84 = 8191.0;
          if ((float)(v73 + v83) <= 8191.0)
          {
            v84 = v73 + v83;
            if ((float)(v73 + v83) < 0.0)
              v84 = 0.0;
          }
          v85 = 8191.0;
          if ((float)(v78 + v83) <= 8191.0)
          {
            v85 = v78 + v83;
            if ((float)(v78 + v83) < 0.0)
              v85 = 0.0;
          }
          v86 = v80 + v83;
          v87 = (float)(v80 + v83) <= 8191.0;
          v88 = 8191.0;
          if (v87)
          {
            v88 = v86;
            if (v86 < 0.0)
              v88 = 0.0;
          }
          LOBYTE(v86) = *v68;
          v89 = v35 * (float)((float)LODWORD(v86) - v33);
          v90 = 8191.0;
          if ((float)(v73 + v89) <= 8191.0)
          {
            v90 = v73 + v89;
            if ((float)(v73 + v89) < 0.0)
              v90 = 0.0;
          }
          v91 = 8191.0;
          if ((float)(v78 + v89) <= 8191.0)
          {
            v91 = v78 + v89;
            if ((float)(v78 + v89) < 0.0)
              v91 = 0.0;
          }
          v92 = v80 + v89;
          v87 = (float)(v80 + v89) <= 8191.0;
          v93 = 8191.0;
          if (v87)
          {
            v93 = v92;
            if (v92 < 0.0)
              v93 = 0.0;
          }
          LOBYTE(v5) = v68[1];
          v94 = v35 * (float)((float)LODWORD(v5) - v33);
          v95 = v73 + v94;
          v87 = (float)(v73 + v94) <= 8191.0;
          v96 = 8191.0;
          if (v87)
          {
            v96 = v95;
            if (v95 < 0.0)
              v96 = 0.0;
          }
          v97 = v78 + v94;
          v87 = (float)(v78 + v94) <= 8191.0;
          v98 = 8191.0;
          if (v87)
          {
            v98 = v97;
            if (v97 < 0.0)
              v98 = 0.0;
          }
          v99 = v80 + v94;
          v100 = 8191.0;
          if (v99 <= 8191.0)
          {
            v100 = v99;
            if (v99 < 0.0)
              v100 = 0.0;
          }
          _H2 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H23 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          __asm { FCVT            S24, H23 }
          _H23 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          __asm { FCVT            S25, H23 }
          _H27 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          _H19 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          _H8 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          _H23 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          _H21 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v96, 0.0), 8191.0)));
          _H22 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          _H26 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v100, 0.0), 8191.0)));
          v120 = fmaxf(_S2, fmaxf(_S24, _S25));
          v121 = (float)((float)((float)(v62 * _S24) + (float)(v61 * _S2)) + (float)(v226 * _S25))
               + (float)(v225 * v120);
          v122 = 8191.0;
          if (v121 <= 8191.0)
          {
            v122 = (float)((float)((float)(v62 * _S24) + (float)(v61 * _S2)) + (float)(v226 * _S25))
                 + (float)(v225 * v120);
            if (v121 < 0.0)
              v122 = 0.0;
          }
          __asm
          {
            FCVT            S1, H27
            FCVT            S3, H19
            FCVT            S19, H8
          }
          _H27 = *(_WORD *)(v52 + 2 * llroundf(v122));
          v127 = (float)((float)((float)(v62 * _S3) + (float)(v61 * _S1)) + (float)(v226 * _S19))
               + (float)(v225 * fmaxf(_S1, fmaxf(_S3, _S19)));
          v128 = 8191.0;
          if (v127 <= 8191.0)
          {
            v128 = v127;
            if (v127 < 0.0)
              v128 = 0.0;
          }
          v129 = v44;
          __asm
          {
            FCVT            S28, H29
            FCVT            S23, H23
            FCVT            S29, H30
          }
          _H30 = *(_WORD *)(v52 + 2 * llroundf(v128));
          v134 = (float)((float)((float)(v62 * _S23) + (float)(v61 * _S28)) + (float)(v226 * _S29))
               + (float)(v225 * fmaxf(_S28, fmaxf(_S23, _S29)));
          v135 = 8191.0;
          if (v134 <= 8191.0)
          {
            v135 = v134;
            if (v134 < 0.0)
              v135 = 0.0;
          }
          v136 = v43;
          __asm
          {
            FCVT            S21, H21
            FCVT            S22, H22
            FCVT            S26, H26
          }
          _H31 = *(_WORD *)(v52 + 2 * llroundf(v135));
          v141 = (float)((float)((float)(v62 * _S22) + (float)(v61 * _S21)) + (float)(v226 * _S26))
               + (float)(v225 * fmaxf(_S21, fmaxf(_S22, _S26)));
          v142 = 8191.0;
          if (v141 <= 8191.0)
          {
            v142 = v141;
            if (v141 < 0.0)
              v142 = 0.0;
          }
          __asm { FCVT            S27, H27 }
          v144 = _S2 * _S27;
          v145 = _S24 * _S27;
          v146 = _S25 * _S27;
          __asm { FCVT            S27, H30 }
          _S1 = _S1 * _S27;
          v149 = _S3 * _S27;
          v150 = _S19 * _S27;
          __asm { FCVT            S27, H31 }
          v152 = _S28 * _S27;
          v153 = _S23 * _S27;
          v154 = _S29 * _S27;
          _H29 = *(_WORD *)(v52 + 2 * llroundf(v142));
          __asm { FCVT            S29, H29 }
          v157 = _S21 * _S29;
          v158 = _S22 * _S29;
          v159 = _S26 * _S29;
          v160 = (float)((float)(v237 * v145) + (float)(v144 * v238)) + (float)(v146 * v236);
          v161 = (float)((float)(v234 * v145) + (float)(v144 * v235)) + (float)(v146 * v232);
          v162 = (float)((float)(v228 * v145) + (float)(v144 * v230)) + (float)(v146 * v227);
          v163 = (float)((float)(v237 * v149) + (float)(_S1 * v238)) + (float)(v150 * v236);
          v164 = (float)((float)(v234 * v149) + (float)(_S1 * v235)) + (float)(v150 * v232);
          v165 = (float)((float)(v228 * v149) + (float)(_S1 * v230)) + (float)(v150 * v227);
          v166 = (float)((float)(v237 * v153) + (float)(v152 * v238)) + (float)(v154 * v236);
          v167 = (float)((float)(v234 * v153) + (float)(v152 * v235)) + (float)(v154 * v232);
          v168 = (float)((float)(v228 * v153) + (float)(v152 * v230)) + (float)(v154 * v227);
          v169 = (float)((float)(v237 * v158) + (float)(v157 * v238)) + (float)(v159 * v236);
          v170 = (float)((float)(v234 * v158) + (float)(v157 * v235)) + (float)(v159 * v232);
          v171 = (float)((float)(v228 * v158) + (float)(v157 * v230)) + (float)(v159 * v227);
          LOWORD(_S1) = *((_WORD *)result + llroundf(fminf(fmaxf(v160, 0.0), 8191.0)));
          __asm { FCVT            S21, H1 }
          LOWORD(_S1) = *((_WORD *)result + llroundf(fminf(fmaxf(v161, 0.0), 8191.0)));
          __asm { FCVT            S22, H1 }
          LOWORD(_S1) = *((_WORD *)result + llroundf(fminf(fmaxf(v162, 0.0), 8191.0)));
          __asm { FCVT            S29, H1 }
          _H1 = *((_WORD *)result + llroundf(fminf(fmaxf(v163, 0.0), 8191.0)));
          _H3 = *((_WORD *)result + llroundf(fminf(fmaxf(v164, 0.0), 8191.0)));
          _H19 = *((_WORD *)result + llroundf(fminf(fmaxf(v165, 0.0), 8191.0)));
          _H26 = *((_WORD *)result + llroundf(fminf(fmaxf(v166, 0.0), 8191.0)));
          _H27 = *((_WORD *)result + llroundf(fminf(fmaxf(v167, 0.0), 8191.0)));
          _H28 = *((_WORD *)result + llroundf(fminf(fmaxf(v168, 0.0), 8191.0)));
          _H2 = *((_WORD *)result + llroundf(fminf(fmaxf(v169, 0.0), 8191.0)));
          _H24 = *((_WORD *)result + llroundf(fminf(fmaxf(v170, 0.0), 8191.0)));
          _H25 = *((_WORD *)result + llroundf(fminf(fmaxf(v171, 0.0), 8191.0)));
          v43 = v136;
          v184 = (float)(v136 * _S22) + (float)(v231 * _S21);
          v44 = v129;
          v185 = (float)(v184 + (float)(v129 * _S29)) + v38;
          v5 = v40;
          if (v185 <= v40)
          {
            v5 = v185;
            if (v185 < v38)
              v5 = v38;
          }
          *v50 = llroundf(v5);
          if (v53)
          {
            v186 = v223;
            v187 = (float)((float)(v223 + (float)(_S21 * v229)) + (float)(_S22 * v45)) + (float)(_S29 * v46);
            v5 = v42;
            if (v187 <= v42)
            {
              v5 = (float)((float)(v223 + (float)(_S21 * v229)) + (float)(_S22 * v45)) + (float)(_S29 * v46);
              if (v187 < v233)
                v5 = v233;
            }
            v188 = v222;
            v35 = v220;
            v189 = (float)((float)(v223 + (float)(_S21 * v222)) + (float)(_S22 * v47)) + (float)(_S29 * v221);
            v190 = v221;
            *v53 = llroundf(v5);
            v191 = v42;
            v61 = v218;
            v33 = v219;
            v62 = v217;
            if (v189 <= v42)
            {
              v191 = v189;
              if (v189 < v233)
                v191 = v233;
            }
            v53[1] = llroundf(v191);
            v53 += 2;
          }
          else
          {
            v33 = v219;
            v35 = v220;
            v188 = v222;
            v186 = v223;
            v190 = v221;
            v62 = v217;
            v61 = v218;
          }
          __asm
          {
            FCVT            S1, H1
            FCVT            S3, H3
            FCVT            S19, H19
          }
          v195 = (float)((float)((float)(v43 * _S3) + (float)(v231 * _S1)) + (float)(v129 * _S19)) + v38;
          v196 = v40;
          if (v195 <= v40)
          {
            v196 = (float)((float)((float)(v43 * _S3) + (float)(v231 * _S1)) + (float)(v129 * _S19)) + v38;
            if (v195 < v38)
              v196 = v38;
          }
          v50[1] = llroundf(v196);
          if (v53)
          {
            v197 = (float)((float)(v186 + (float)(_S1 * v229)) + (float)(_S3 * v45)) + (float)(_S19 * v46);
            v198 = v42;
            if (v197 <= v42)
            {
              v198 = (float)((float)(v186 + (float)(_S1 * v229)) + (float)(_S3 * v45)) + (float)(_S19 * v46);
              if (v197 < v233)
                v198 = v233;
            }
            v199 = (float)((float)(v186 + (float)(_S1 * v188)) + (float)(_S3 * v47)) + (float)(_S19 * v190);
            *v53 = llroundf(v198);
            v200 = v42;
            if (v199 <= v42)
            {
              v200 = v199;
              if (v199 < v233)
                v200 = v233;
            }
            v53[1] = llroundf(v200);
            v53 += 2;
          }
          __asm
          {
            FCVT            S1, H26
            FCVT            S3, H27
            FCVT            S19, H28
          }
          v204 = (float)((float)((float)(v43 * _S3) + (float)(v231 * _S1)) + (float)(v129 * _S19)) + v38;
          v205 = v40;
          if (v204 <= v40)
          {
            v205 = (float)((float)((float)(v43 * _S3) + (float)(v231 * _S1)) + (float)(v129 * _S19)) + v38;
            if (v204 < v38)
              v205 = v38;
          }
          *v70 = llroundf(v205);
          if (v69)
          {
            v206 = (float)((float)(v186 + (float)(_S1 * v229)) + (float)(_S3 * v45)) + (float)(_S19 * v46);
            v207 = v42;
            if (v206 <= v42)
            {
              v207 = (float)((float)(v186 + (float)(_S1 * v229)) + (float)(_S3 * v45)) + (float)(_S19 * v46);
              if (v206 < v233)
                v207 = v233;
            }
            v208 = (float)((float)(v186 + (float)(_S1 * v188)) + (float)(_S3 * v47)) + (float)(_S19 * v190);
            *v69 = llroundf(v207);
            v209 = v42;
            if (v208 <= v42)
            {
              v209 = v208;
              if (v208 < v233)
                v209 = v233;
            }
            v69[1] = llroundf(v209);
            v69 += 2;
          }
          __asm
          {
            FCVT            S1, H2
            FCVT            S2, H24
            FCVT            S3, H25
          }
          v212 = (float)((float)((float)(v43 * _S2) + (float)(v231 * _S1)) + (float)(v129 * _S3)) + v38;
          v213 = v40;
          if (v212 <= v40)
          {
            v213 = (float)((float)((float)(v43 * _S2) + (float)(v231 * _S1)) + (float)(v129 * _S3)) + v38;
            if (v212 < v38)
              v213 = v38;
          }
          v70[1] = llroundf(v213);
          if (v69)
          {
            v214 = (float)((float)(v186 + (float)(_S1 * v229)) + (float)(_S2 * v45)) + (float)(_S3 * v46);
            v215 = v42;
            if (v214 <= v42)
            {
              v215 = (float)((float)(v186 + (float)(_S1 * v229)) + (float)(_S2 * v45)) + (float)(_S3 * v46);
              if (v214 < v233)
                v215 = v233;
            }
            _S1 = (float)((float)(v186 + (float)(_S1 * v188)) + (float)(_S2 * v47)) + (float)(_S3 * v190);
            *v69 = llroundf(v215);
            v216 = v42;
            v34 = v224;
            if (_S1 <= v42)
            {
              v216 = _S1;
              if (_S1 < v233)
                v216 = v233;
            }
            v69[1] = llroundf(v216);
            v69 += 2;
          }
          else
          {
            v34 = v224;
          }
          v59 += 2;
          v68 += 2;
          v50 += 2;
          v70 += 2;
          v67 += 2;
        }
        while (v11 > v67);
      }
      v59 = &v64[v22];
      v60 += v23;
      v50 = &v66[v27];
      v53 = &v65[v28];
      v10 += 2;
    }
    while (v14 > v10);
    if (v25 && v30)
    {
      do
      {
        result = memcpy(v31, v26, v11);
        v26 += v24;
        v31 += v29;
        --v14;
      }
      while (v14);
    }
    else if (v30)
    {
      do
      {
        if (v11)
          result = memset(v31, 255, v11);
        v31 += v29;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Mat_TRC_444vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[3];
  v18 = a6[5];
  if ((v14 & 1) != 0)
  {
    ++v18;
    ++v14;
    if ((v11 & 1) != 0)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  v19 = a6[2];
  v20 = a6[4];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9)
    v12 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15)
    v21 = v19;
  else
    v21 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v18;
  if (v12 >= v21)
    v24 = v21;
  else
    v24 = v12;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Mat_TRC_444vf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_420vf_TRC_Mat_TRC_444vf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  unsigned int v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  uint64_t v52;
  _BYTE *v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  unsigned __int8 *v59;
  _BYTE *v60;
  _BYTE *v61;
  size_t v62;
  unsigned __int8 *v63;
  _BYTE *v64;
  _BYTE *v65;
  float v66;
  unsigned int v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  BOOL v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v128;
  float v129;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float v182;
  float v185;
  float v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float v198;
  float v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  float v206;
  float v207;
  float v208;
  float v209;
  float v210;
  float v211;

  v5 = *(_QWORD *)(result + 28);
  v6 = 2 * *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = *(_QWORD *)(result + 36);
    v12 = *(_QWORD *)(result + 44) + 2 * v7;
    v13 = 2 * v8 - 2 * v7;
    v14 = *((_QWORD *)result + 14);
    v15 = (_QWORD *)*((_QWORD *)result + 16);
    v16 = *((_QWORD *)result + 15) + 2 * (*((_QWORD *)result + 13) * a2 / v6);
    v17 = *((_QWORD *)result + 19);
    v18 = (_QWORD *)*((_QWORD *)result + 7);
    v19 = (uint64_t *)*((_QWORD *)result + 8);
    v20 = (uint64_t *)*((_QWORD *)result + 17);
    v21 = *v19;
    v22 = v19[1];
    v23 = v19[2];
    v24 = v18[2];
    v25 = (char *)(v24 + v23 * v12 + v11);
    v26 = *v20;
    v27 = v20[1];
    v28 = v20[2];
    v29 = v15[2];
    v30 = (char *)(v29 + v28 * v16 + v14);
    v31 = 8191.0 / (float)*(unsigned int *)(v17 + 128);
    LOWORD(a5) = *(_WORD *)(v17 + 140);
    v32 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v17 + 142);
    v33 = (float)LODWORD(a5);
    v34 = v31 * *(float *)v17;
    v35 = *(float *)(v17 + 20);
    v208 = v31 * *(float *)(v17 + 16);
    v209 = v31 * *(float *)(v17 + 8);
    v36 = v31 * v35;
    *(float *)&v37 = v31 * *(float *)(v17 + 28);
    v206 = *(float *)&v37;
    v207 = v36;
    LOWORD(v37) = *(_WORD *)(v17 + 144);
    v38 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v17 + 146);
    v39 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v17 + 148);
    v40 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v17 + 150);
    v41 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v17 + 152);
    v42 = (float)v37;
    v44 = *(float *)(v17 + 36);
    v43 = *(float *)(v17 + 40);
    v46 = *(float *)(v17 + 44);
    v45 = *(float *)(v17 + 48);
    v47 = *(float *)(v17 + 52);
    v211 = *(float *)(v17 + 56);
    v48 = *(float *)(v17 + 60);
    v49 = *(float *)(v17 + 64);
    v50 = *(float *)(v17 + 68);
    v204 = *(float *)(v17 + 76);
    v205 = *(float *)(v17 + 72);
    v202 = *(float *)(v17 + 84);
    v203 = *(float *)(v17 + 80);
    v200 = *(float *)(v17 + 92);
    v201 = *(float *)(v17 + 88);
    v198 = *(float *)(v17 + 96);
    _S1 = *(float *)(v17 + 104);
    v195 = _S1;
    v196 = *(float *)(v17 + 100);
    v52 = v15[1];
    v53 = (_BYTE *)(*v15 + v26 * v16 + v14);
    v54 = (_BYTE *)(v52 + v27 * v16 + v14);
    v55 = v17 + 16548;
    v56 = v17 + 164;
    if (v52)
      v57 = v54;
    else
      v57 = 0;
    result = (unsigned __int8 *)(*v18 + v21 * v12 + v11);
    v58 = v18[1] + v22 * (v12 / 2) + v11;
    v193 = v48;
    v194 = (float)LODWORD(a5);
    v191 = v50;
    v192 = v49;
    v189 = v34;
    v190 = v39;
    v210 = v43;
    v199 = v47;
    v197 = v45;
    v188 = v32;
    do
    {
      v59 = &result[v21];
      v60 = &v57[v27];
      v61 = &v53[v26];
      if (v10)
      {
        v62 = 0;
        v63 = &result[v21];
        v64 = &v57[v27];
        v65 = &v53[v26];
        do
        {
          LOBYTE(_S1) = *(_BYTE *)(v58 + v62 + 1);
          v66 = (float)LODWORD(_S1) - v33;
          v67 = LODWORD(v209);
          v68 = v209 * v66;
          LOBYTE(v67) = *result;
          v69 = v34 * (float)((float)v67 - v32);
          v70 = (float)(v209 * v66) + v69;
          v71 = 8191.0;
          if (v70 <= 8191.0)
          {
            v71 = (float)(v209 * v66) + v69;
            if (v70 < 0.0)
              v71 = 0.0;
          }
          LOBYTE(v35) = *(_BYTE *)(v58 + v62);
          v72 = (float)LODWORD(v35) - v33;
          v73 = (float)(v207 * v66) + (float)(v72 * v208);
          v74 = 8191.0;
          if ((float)(v69 + v73) <= 8191.0)
          {
            v74 = v69 + v73;
            if ((float)(v69 + v73) < 0.0)
              v74 = 0.0;
          }
          v75 = v206 * v72;
          v76 = (float)(v206 * v72) + v69;
          v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            v77 = v76;
            if (v76 < 0.0)
              v77 = 0.0;
          }
          LOBYTE(v76) = result[1];
          v78 = v34 * (float)((float)LODWORD(v76) - v32);
          v79 = 8191.0;
          if ((float)(v68 + v78) <= 8191.0)
          {
            v79 = v68 + v78;
            if ((float)(v68 + v78) < 0.0)
              v79 = 0.0;
          }
          v80 = 8191.0;
          if ((float)(v73 + v78) <= 8191.0)
          {
            v80 = v73 + v78;
            if ((float)(v73 + v78) < 0.0)
              v80 = 0.0;
          }
          v81 = v75 + v78;
          v82 = 8191.0;
          if (v81 <= 8191.0)
          {
            v82 = v81;
            if (v81 < 0.0)
              v82 = 0.0;
          }
          LOBYTE(v81) = *v63;
          v83 = (float)LODWORD(v81) - v32;
          v84 = v34 * v83;
          v85 = 8191.0;
          if ((float)(v68 + (float)(v34 * v83)) <= 8191.0)
          {
            v85 = v68 + (float)(v34 * v83);
            if (v85 < 0.0)
              v85 = 0.0;
          }
          v86 = 8191.0;
          if ((float)(v73 + v84) <= 8191.0)
          {
            v86 = v73 + v84;
            if ((float)(v73 + v84) < 0.0)
              v86 = 0.0;
          }
          v87 = v75 + v84;
          v88 = (float)(v75 + v84) <= 8191.0;
          v89 = 8191.0;
          if (v88)
          {
            v89 = v87;
            if (v87 < 0.0)
              v89 = 0.0;
          }
          LOBYTE(v83) = v63[1];
          v90 = v34 * (float)((float)LODWORD(v83) - v32);
          v91 = v68 + v90;
          v88 = (float)(v68 + v90) <= 8191.0;
          v92 = 8191.0;
          if (v88)
          {
            v92 = v91;
            if (v91 < 0.0)
              v92 = 0.0;
          }
          v93 = v46;
          v94 = v73 + v90;
          v88 = (float)(v73 + v90) <= 8191.0;
          v95 = 8191.0;
          if (v88)
          {
            v95 = v94;
            if (v94 < 0.0)
              v95 = 0.0;
          }
          v96 = v44;
          v97 = v41;
          v98 = v75 + v90;
          v99 = 8191.0;
          if (v98 <= 8191.0)
          {
            v99 = v98;
            if (v98 < 0.0)
              v99 = 0.0;
          }
          _H1 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          _H4 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H5 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H2 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          _H6 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm
          {
            FCVT            S2, H2
            FCVT            S6, H6
          }
          _H26 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          _H3 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          _H19 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          _H7 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          _H24 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v95, 0.0), 8191.0)));
          __asm
          {
            FCVT            S7, H7
            FCVT            S24, H24
          }
          _H25 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v99, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          v128 = (float)((float)(v204 * _S4) + (float)(_S1 * v205)) + (float)(_S5 * v203);
          v129 = (float)((float)(v201 * _S4) + (float)(_S1 * v202)) + (float)(_S5 * v200);
          _S1 = (float)((float)(v196 * _S4) + (float)(_S1 * v198)) + (float)(_S5 * v195);
          v131 = (float)((float)(v204 * _S6) + (float)(_S2 * v205)) + (float)(_S26 * v203);
          v132 = (float)((float)(v201 * _S6) + (float)(_S2 * v202)) + (float)(_S26 * v200);
          v133 = (float)((float)(v196 * _S6) + (float)(_S2 * v198)) + (float)(_S26 * v195);
          v134 = (float)((float)(v204 * _S3) + (float)(_S27 * v205)) + (float)(_S19 * v203);
          v135 = (float)((float)(v201 * _S3) + (float)(_S27 * v202)) + (float)(_S19 * v200);
          v136 = (float)((float)(v196 * _S3) + (float)(_S27 * v198)) + (float)(_S19 * v195);
          v137 = (float)((float)(v204 * _S24) + (float)(_S7 * v205)) + (float)(_S25 * v203);
          v138 = (float)((float)(v201 * _S24) + (float)(_S7 * v202)) + (float)(_S25 * v200);
          v139 = (float)((float)(v196 * _S24) + (float)(_S7 * v198)) + (float)(_S25 * v195);
          LOWORD(_S7) = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v128, 0.0), 8191.0)));
          __asm { FCVT            S27, H7 }
          LOWORD(_S7) = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v129, 0.0), 8191.0)));
          __asm { FCVT            S28, H7 }
          LOWORD(_S1) = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          __asm { FCVT            S29, H1 }
          _H25 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v131, 0.0), 8191.0)));
          _H19 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v132, 0.0), 8191.0)));
          _H26 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v133, 0.0), 8191.0)));
          _H7 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v134, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v135, 0.0), 8191.0)));
          _H24 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v136, 0.0), 8191.0)));
          _H4 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v137, 0.0), 8191.0)));
          _H5 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v138, 0.0), 8191.0)));
          _H6 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v139, 0.0), 8191.0)));
          v44 = v96;
          v152 = (float)(v210 * _S28) + (float)(v96 * _S27);
          v46 = v93;
          v153 = (float)(v152 + (float)(v93 * _S29)) + v38;
          v154 = v40;
          if (v153 <= v40)
          {
            v154 = v153;
            if (v153 < v38)
              v154 = v38;
          }
          *v53 = llroundf(v154);
          v41 = v97;
          if (v57)
          {
            v155 = v190;
            v156 = (float)((float)(v190 + (float)(_S27 * v197)) + (float)(_S28 * v199)) + (float)(_S29 * v211);
            v157 = v42;
            if (v156 <= v42)
            {
              v157 = (float)((float)(v190 + (float)(_S27 * v197)) + (float)(_S28 * v199)) + (float)(_S29 * v211);
              if (v156 < v97)
                v157 = v97;
            }
            v159 = v192;
            v158 = v193;
            v160 = (float)(v190 + (float)(_S27 * v193)) + (float)(_S28 * v192);
            v161 = v191;
            v162 = v160 + (float)(_S29 * v191);
            *v57 = llroundf(v157);
            v163 = v42;
            v32 = v188;
            v34 = v189;
            if (v162 <= v42)
            {
              v163 = v160 + (float)(_S29 * v191);
              if (v162 < v97)
                v163 = v97;
            }
            v57[1] = llroundf(v163);
            v57 += 2;
            v164 = v210;
          }
          else
          {
            v32 = v188;
            v34 = v189;
            v164 = v210;
            v159 = v192;
            v158 = v193;
            v155 = v190;
            v161 = v191;
          }
          __asm
          {
            FCVT            S1, H25
            FCVT            S19, H19
            FCVT            S25, H26
          }
          v168 = (float)((float)((float)(v164 * _S19) + (float)(v44 * _S1)) + (float)(v93 * _S25)) + v38;
          v169 = v40;
          if (v168 <= v40)
          {
            v169 = (float)((float)((float)(v164 * _S19) + (float)(v44 * _S1)) + (float)(v93 * _S25)) + v38;
            if (v168 < v38)
              v169 = v38;
          }
          v53[1] = llroundf(v169);
          if (v57)
          {
            v170 = (float)((float)(v155 + (float)(_S1 * v197)) + (float)(_S19 * v199)) + (float)(_S25 * v211);
            v171 = v42;
            if (v170 <= v42)
            {
              v171 = (float)((float)(v155 + (float)(_S1 * v197)) + (float)(_S19 * v199)) + (float)(_S25 * v211);
              if (v170 < v97)
                v171 = v97;
            }
            v172 = (float)((float)(v155 + (float)(_S1 * v158)) + (float)(_S19 * v159)) + (float)(_S25 * v161);
            *v57 = llroundf(v171);
            v173 = v42;
            if (v172 <= v42)
            {
              v173 = v172;
              if (v172 < v97)
                v173 = v97;
            }
            v57[1] = llroundf(v173);
            v57 += 2;
          }
          __asm
          {
            FCVT            S1, H7
            FCVT            S2, H2
            FCVT            S7, H24
          }
          v177 = (float)((float)((float)(v164 * _S2) + (float)(v44 * _S1)) + (float)(v93 * _S7)) + v38;
          v178 = v40;
          if (v177 <= v40)
          {
            v178 = (float)((float)((float)(v164 * _S2) + (float)(v44 * _S1)) + (float)(v93 * _S7)) + v38;
            if (v177 < v38)
              v178 = v38;
          }
          *v65 = llroundf(v178);
          if (v64)
          {
            v179 = (float)((float)(v155 + (float)(_S1 * v197)) + (float)(_S2 * v199)) + (float)(_S7 * v211);
            v180 = v42;
            if (v179 <= v42)
            {
              v180 = (float)((float)(v155 + (float)(_S1 * v197)) + (float)(_S2 * v199)) + (float)(_S7 * v211);
              if (v179 < v97)
                v180 = v97;
            }
            v181 = (float)((float)(v155 + (float)(_S1 * v158)) + (float)(_S2 * v159)) + (float)(_S7 * v161);
            *v64 = llroundf(v180);
            v182 = v42;
            if (v181 <= v42)
            {
              v182 = v181;
              if (v181 < v97)
                v182 = v97;
            }
            v64[1] = llroundf(v182);
            v64 += 2;
          }
          v33 = v194;
          __asm
          {
            FCVT            S1, H4
            FCVT            S2, H5
            FCVT            S4, H6
          }
          v35 = (float)((float)((float)(v164 * _S2) + (float)(v44 * _S1)) + (float)(v93 * _S4)) + v38;
          v185 = v40;
          if (v35 <= v40)
          {
            v185 = (float)((float)((float)(v164 * _S2) + (float)(v44 * _S1)) + (float)(v93 * _S4)) + v38;
            if (v35 < v38)
              v185 = v38;
          }
          v65[1] = llroundf(v185);
          if (v64)
          {
            v35 = (float)((float)(v155 + (float)(_S1 * v197)) + (float)(_S2 * v199)) + (float)(_S4 * v211);
            v186 = v42;
            if (v35 <= v42)
            {
              v186 = (float)((float)(v155 + (float)(_S1 * v197)) + (float)(_S2 * v199)) + (float)(_S4 * v211);
              if (v35 < v97)
                v186 = v97;
            }
            _S1 = (float)((float)(v155 + (float)(_S1 * v158)) + (float)(_S2 * v159)) + (float)(_S4 * v161);
            *v64 = llroundf(v186);
            v187 = v42;
            if (_S1 <= v42)
            {
              v187 = _S1;
              if (_S1 < v97)
                v187 = v97;
            }
            v64[1] = llroundf(v187);
            v64 += 2;
          }
          result += 2;
          v63 += 2;
          v53 += 2;
          v65 += 2;
          v62 += 2;
        }
        while (v10 > v62);
      }
      result = &v59[v21];
      v58 += v22;
      v53 = &v61[v26];
      v57 = &v60[v27];
      v9 += 2;
    }
    while (v13 > v9);
    if (v24 && v29)
    {
      do
      {
        result = (unsigned __int8 *)memcpy(v30, v25, v10);
        v25 += v23;
        v30 += v28;
        --v13;
      }
      while (v13);
    }
    else if (v29)
    {
      do
      {
        if (v10)
          result = (unsigned __int8 *)memset(v30, 255, v10);
        v30 += v28;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_rgb_444vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[3];
  v18 = a6[5];
  if ((v14 & 1) != 0)
  {
    ++v18;
    ++v14;
    if ((v11 & 1) != 0)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  v19 = a6[2];
  v20 = a6[4];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9)
    v12 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15)
    v21 = v19;
  else
    v21 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v18;
  if (v12 >= v21)
    v24 = v21;
  else
    v24 = v12;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_rgb_444vf_GCD);
  return 0;
}

_QWORD *vt_Copy_420vf_rgb_444vf_GCD(_QWORD *result, uint64_t a2)
{
  float v2;
  float v3;
  float v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  float v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  uint64_t v53;
  _BYTE *v54;
  _BYTE *v55;
  char *v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  _BYTE *v64;
  uint64_t v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  _BYTE *v70;
  size_t v71;
  _BYTE *v72;
  _BYTE *v73;
  _BYTE *v74;
  unsigned int v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;

  v13 = *(_QWORD *)((char *)result + 28);
  v14 = 2 * *(unsigned __int8 *)result;
  v15 = v13 * a2 / v14;
  v16 = (v13 + v13 * a2) / v14;
  if (2 * v16 != 2 * v15)
  {
    v17 = 0;
    v18 = *(_QWORD *)((char *)result + 20);
    v19 = *(_QWORD *)((char *)result + 36);
    v20 = *(_QWORD *)((char *)result + 44) + 2 * v15;
    v21 = 2 * v16 - 2 * v15;
    v22 = result[14];
    v23 = (_QWORD *)result[16];
    v24 = result[15] + 2 * (result[13] * a2 / v14);
    v25 = result[19];
    v26 = (_QWORD *)result[7];
    v27 = (uint64_t *)result[8];
    v28 = (uint64_t *)result[17];
    v29 = *v27;
    v30 = v27[1];
    v31 = v27[2];
    v32 = v26[2];
    v33 = *v28;
    v34 = v28[1];
    v35 = v28[2];
    v36 = v23[2];
    v37 = (char *)(v36 + v35 * v24 + v22);
    v38 = (float)*(unsigned int *)(v25 + 136) / (float)*(unsigned int *)(v25 + 128);
    LOWORD(v5) = *(_WORD *)(v25 + 140);
    LOWORD(v6) = *(_WORD *)(v25 + 142);
    v39 = v38 * *(float *)v25;
    v40 = v38 * *(float *)(v25 + 8);
    v41 = v38 * *(float *)(v25 + 16);
    v42 = v38 * *(float *)(v25 + 20);
    v43 = v38 * *(float *)(v25 + 28);
    LOWORD(v7) = *(_WORD *)(v25 + 144);
    LOWORD(v8) = *(_WORD *)(v25 + 146);
    LOWORD(v9) = *(_WORD *)(v25 + 148);
    LOWORD(v10) = *(_WORD *)(v25 + 150);
    LOWORD(v11) = *(_WORD *)(v25 + 152);
    v44 = *(float *)(v25 + 36);
    v45 = *(float *)(v25 + 40);
    v46 = *(float *)(v25 + 44);
    v47 = *(float *)(v25 + 48);
    v48 = *(float *)(v25 + 52);
    v49 = *(float *)(v25 + 56);
    v50 = *(float *)(v25 + 60);
    v51 = *(float *)(v25 + 64);
    v52 = *(float *)(v25 + 68);
    v53 = v23[1];
    v54 = (_BYTE *)(*v23 + v33 * v24 + v22);
    v55 = (_BYTE *)(v53 + v34 * v24 + v22);
    v56 = (char *)(v32 + v31 * v20 + v19);
    v57 = (float)v5;
    v58 = (float)v6;
    v59 = (float)v7;
    v60 = (float)v8;
    v61 = (float)v9;
    v62 = (float)v10;
    v63 = (float)v11;
    if (v53)
      v64 = v55;
    else
      v64 = 0;
    v65 = v26[1];
    v66 = (_BYTE *)(*v26 + v29 * v20 + v19);
    if (v20 >= 0)
      v67 = v20;
    else
      v67 = v20 + 1;
    v68 = v65 + v30 * (v67 >> 1) + v19;
    do
    {
      v69 = &v66[v29];
      result = &v64[v34];
      v70 = &v54[v33];
      if (v18)
      {
        v71 = 0;
        v72 = &v66[v29];
        v73 = &v54[v33];
        v74 = &v64[v34];
        do
        {
          LOBYTE(v12) = *(_BYTE *)(v68 + v71);
          *(float *)&v75 = (float)LODWORD(v12);
          v76 = *(float *)&v75 - v58;
          LOBYTE(v75) = *(_BYTE *)(v68 + v71 + 1);
          v77 = (float)v75 - v58;
          v78 = v40 * v77;
          v79 = (float)(v42 * v77) + (float)(v76 * v41);
          v80 = v43 * v76;
          LOBYTE(v2) = *v66;
          v81 = v39 * (float)((float)LODWORD(v2) - v57);
          v82 = v78 + v81;
          v83 = v81 + v79;
          v84 = v80 + v81;
          v85 = (float)((float)((float)(v45 * (float)(v81 + v79)) + (float)(v44 * (float)(v78 + v81)))
                      + (float)(v46 * (float)(v80 + v81)))
              + v59;
          v86 = v61;
          if (v85 <= v61)
          {
            v86 = v85;
            if (v85 < v59)
              v86 = v59;
          }
          LOBYTE(v4) = v66[1];
          LOBYTE(v3) = *v72;
          LOBYTE(v85) = v72[1];
          *v54 = llroundf(v86);
          if (v64)
          {
            v87 = (float)((float)(v60 + (float)(v82 * v47)) + (float)(v83 * v48)) + (float)(v84 * v49);
            v88 = v63;
            if (v87 <= v63)
            {
              v88 = (float)((float)(v60 + (float)(v82 * v47)) + (float)(v83 * v48)) + (float)(v84 * v49);
              if (v87 < v62)
                v88 = v62;
            }
            v89 = (float)((float)(v60 + (float)(v82 * v50)) + (float)(v83 * v51)) + (float)(v84 * v52);
            *v64 = llroundf(v88);
            v90 = v63;
            if (v89 <= v63)
            {
              if (v89 < v62)
                v90 = v62;
              else
                v90 = v89;
            }
            v64[1] = llroundf(v90);
            v64 += 2;
          }
          v91 = v39 * (float)((float)LODWORD(v4) - v57);
          v92 = v78 + v91;
          v93 = v79 + v91;
          v94 = v80 + v91;
          v95 = (float)((float)((float)(v45 * v93) + (float)(v44 * v92)) + (float)(v46 * v94)) + v59;
          v96 = v61;
          if (v95 <= v61)
          {
            v96 = (float)((float)((float)(v45 * v93) + (float)(v44 * v92)) + (float)(v46 * v94)) + v59;
            if (v95 < v59)
              v96 = v59;
          }
          v54[1] = llroundf(v96);
          if (v64)
          {
            v97 = (float)((float)(v60 + (float)(v92 * v47)) + (float)(v93 * v48)) + (float)(v94 * v49);
            v98 = v63;
            if (v97 <= v63)
            {
              v98 = (float)((float)(v60 + (float)(v92 * v47)) + (float)(v93 * v48)) + (float)(v94 * v49);
              if (v97 < v62)
                v98 = v62;
            }
            v99 = (float)((float)(v60 + (float)(v92 * v50)) + (float)(v93 * v51)) + (float)(v94 * v52);
            *v64 = llroundf(v98);
            v100 = v63;
            if (v99 <= v63)
            {
              if (v99 < v62)
                v100 = v62;
              else
                v100 = v99;
            }
            v64[1] = llroundf(v100);
            v64 += 2;
          }
          v101 = v39 * (float)((float)LODWORD(v3) - v57);
          v102 = v78 + v101;
          v4 = v79 + v101;
          v103 = v80 + v101;
          v104 = (float)((float)((float)(v45 * v4) + (float)(v44 * v102)) + (float)(v46 * v103)) + v59;
          v105 = v61;
          if (v104 <= v61)
          {
            v105 = (float)((float)((float)(v45 * v4) + (float)(v44 * v102)) + (float)(v46 * v103)) + v59;
            if (v104 < v59)
              v105 = v59;
          }
          *v73 = llroundf(v105);
          if (v74)
          {
            v106 = (float)((float)(v60 + (float)(v102 * v47)) + (float)(v4 * v48)) + (float)(v103 * v49);
            v107 = v63;
            if (v106 <= v63)
            {
              v107 = (float)((float)(v60 + (float)(v102 * v47)) + (float)(v4 * v48)) + (float)(v103 * v49);
              if (v106 < v62)
                v107 = v62;
            }
            v108 = (float)((float)(v60 + (float)(v102 * v50)) + (float)(v4 * v51)) + (float)(v103 * v52);
            *v74 = llroundf(v107);
            v4 = v63;
            if (v108 <= v63)
            {
              if (v108 < v62)
                v4 = v62;
              else
                v4 = v108;
            }
            v74[1] = llroundf(v4);
            v74 += 2;
          }
          v109 = v39 * (float)((float)LODWORD(v85) - v57);
          v12 = v78 + v109;
          v110 = v79 + v109;
          v111 = v80 + v109;
          v3 = (float)((float)((float)(v45 * v110) + (float)(v44 * v12)) + (float)(v46 * v111)) + v59;
          v2 = v61;
          if (v3 <= v61)
          {
            v2 = (float)((float)((float)(v45 * v110) + (float)(v44 * v12)) + (float)(v46 * v111)) + v59;
            if (v3 < v59)
              v2 = v59;
          }
          v73[1] = llroundf(v2);
          if (v74)
          {
            v3 = (float)((float)(v60 + (float)(v12 * v47)) + (float)(v110 * v48)) + (float)(v111 * v49);
            v2 = v63;
            if (v3 <= v63)
            {
              v2 = (float)((float)(v60 + (float)(v12 * v47)) + (float)(v110 * v48)) + (float)(v111 * v49);
              if (v3 < v62)
                v2 = v62;
            }
            v12 = (float)((float)(v60 + (float)(v12 * v50)) + (float)(v110 * v51)) + (float)(v111 * v52);
            *v74 = llroundf(v2);
            v112 = v63;
            if (v12 <= v63)
            {
              v112 = v12;
              if (v12 < v62)
                v112 = v62;
            }
            v74[1] = llroundf(v112);
            v74 += 2;
          }
          v66 += 2;
          v72 += 2;
          v54 += 2;
          v73 += 2;
          v71 += 2;
        }
        while (v18 > v71);
      }
      v66 = &v69[v29];
      v68 += v30;
      v54 = &v70[v33];
      v64 = (char *)result + v34;
      v17 += 2;
    }
    while (v21 > v17);
    if (v32 && v36)
    {
      do
      {
        result = memcpy(v37, v56, v18);
        v56 += v31;
        v37 += v35;
        --v21;
      }
      while (v21);
    }
    else if (v36)
    {
      do
      {
        if (v18)
          result = memset(v37, 255, v18);
        v37 += v35;
        --v21;
      }
      while (v21);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Tone_Mat_TRC_xf444(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[3];
  v18 = a6[5];
  if ((v14 & 1) != 0)
  {
    ++v18;
    ++v14;
    if ((v11 & 1) != 0)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  v19 = a6[2];
  v20 = a6[4];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9)
    v12 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15)
    v21 = v19;
  else
    v21 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v18;
  if (v12 >= v21)
    v24 = v21;
  else
    v24 = v12;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Tone_Mat_TRC_xf444_GCD);
  return 0;
}

_QWORD *vt_Copy_420vf_TRC_Tone_Mat_TRC_xf444_GCD(_QWORD *result, uint64_t a2, double a3, double a4, float a5)
{
  float v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  unsigned int v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  unsigned int v54;
  char v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  uint64_t v63;
  char v64;
  float v65;
  float v66;
  _BYTE *v68;
  char *v69;
  char *v70;
  unint64_t v71;
  _BYTE *v72;
  char *v73;
  char *v74;
  float v75;
  unsigned int v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  BOOL v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v123;
  float v124;
  float v125;
  float v130;
  float v131;
  float v132;
  float v137;
  float v138;
  float v139;
  float v144;
  float v145;
  float v147;
  float v148;
  float v149;
  float v152;
  float v153;
  float v155;
  float v156;
  float v157;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;
  float v198;
  float v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v207;
  float v208;
  float v209;
  float v210;
  float v211;
  float v212;
  float v215;
  float v216;
  float v217;
  float v218;
  float v219;
  uint64_t v220;
  unint64_t v221;
  _WORD *v222;
  unsigned __int8 *v223;
  __int16 v224;
  float v225;
  float v226;
  float v227;
  float v228;
  float v229;
  float v230;
  float v231;
  float v232;
  float v233;
  float v234;
  float v235;
  float v236;
  float v237;
  float v238;
  float v239;
  float v240;
  float v241;
  float v242;
  float v243;
  float v244;
  float v245;
  float v246;
  float v247;
  float v248;
  float v249;
  float v250;

  v6 = *(_QWORD *)((char *)result + 28);
  v7 = 2 * *(unsigned __int8 *)result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (2 * v9 != 2 * v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)((char *)result + 20);
    v12 = *(_QWORD *)((char *)result + 36);
    v13 = *(_QWORD *)((char *)result + 44) + 2 * v8;
    v14 = 2 * v9 - 2 * v8;
    v15 = result[14];
    v16 = result[13] * a2 / v7;
    v17 = (_QWORD *)result[16];
    v18 = result[15] + 2 * v16;
    v19 = result[19];
    v20 = (uint64_t *)result[7];
    v21 = (uint64_t *)result[8];
    v22 = (uint64_t *)result[17];
    v23 = *v21;
    v24 = v21[1];
    v25 = v21[2];
    v26 = v20[2];
    v27 = (unsigned __int8 *)(v26 + v25 * v13 + v12);
    v28 = *v22;
    v29 = v22[1];
    v30 = v22[2];
    v31 = v17[2];
    v32 = (char *)(v31 + v30 * v18 + 2 * v15);
    v33 = 8191.0 / (float)*(unsigned int *)(v19 + 128);
    LOWORD(a5) = *(_WORD *)(v19 + 140);
    v34 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v19 + 142);
    v35 = (float)LODWORD(a5);
    v36 = v33 * *(float *)v19;
    v249 = v33 * *(float *)(v19 + 16);
    v250 = v33 * *(float *)(v19 + 8);
    v37 = v33 * *(float *)(v19 + 20);
    *(float *)&v38 = v33 * *(float *)(v19 + 28);
    v247 = *(float *)&v38;
    v248 = v37;
    LOWORD(v38) = *(_WORD *)(v19 + 144);
    v39 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v19 + 146);
    v40 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v19 + 148);
    v41 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v19 + 150);
    v42 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v19 + 152);
    v43 = (float)v38;
    v44 = *(float *)(v19 + 40);
    v45 = *(float *)(v19 + 44);
    v46 = *(float *)(v19 + 52);
    v47 = *(float *)(v19 + 56);
    v48 = *(float *)(v19 + 64);
    v245 = *(float *)(v19 + 76);
    v246 = *(float *)(v19 + 72);
    v243 = *(float *)(v19 + 84);
    v244 = *(float *)(v19 + 80);
    v242 = *(float *)(v19 + 88);
    v240 = *(float *)(v19 + 92);
    v238 = *(float *)(v19 + 96);
    v235 = *(float *)(v19 + 104);
    v236 = *(float *)(v19 + 100);
    v49 = v19 + 164;
    result = (_QWORD *)(v19 + 16548);
    v50 = v17[1];
    v51 = (char *)(*v17 + v28 * v18 + 2 * v15);
    v52 = v50 + v29 * v18 + 2 * v15;
    if (v50)
      v53 = (char *)v52;
    else
      v53 = 0;
    v54 = *(unsigned __int8 *)(v19 + 132);
    v55 = 16 - v54;
    _CF = v54 >= 0x11;
    v58 = *v20;
    v57 = v20[1];
    v59 = v58 + v23 * v13;
    if (_CF)
      v55 = 0;
    v60 = v57 + v24 * (v13 / 2);
    v61 = v19 + 32932;
    v62 = (_BYTE *)(v59 + v12);
    v63 = v60 + v12;
    v64 = v55;
    v65 = *(float *)(v19 + 108);
    v66 = *(float *)(v19 + 112);
    _S1 = *(float *)(v19 + 120);
    v233 = _S1;
    v234 = *(float *)(v19 + 116);
    v231 = v40;
    v232 = (float)LODWORD(a5);
    v229 = *(float *)(v19 + 68);
    v230 = *(float *)(v19 + 60);
    v241 = v42;
    v239 = *(float *)(v19 + 36);
    v237 = *(float *)(v19 + 48);
    v227 = v34;
    v228 = v36;
    v225 = v66;
    v226 = v65;
    do
    {
      v68 = &v62[v23];
      v69 = &v53[v29];
      v70 = &v51[v28];
      if (v11)
      {
        v71 = 0;
        v72 = &v62[v23];
        v73 = &v53[v29];
        v74 = &v51[v28];
        do
        {
          LOBYTE(_S1) = *(_BYTE *)(v63 + v71 + 1);
          v75 = (float)LODWORD(_S1) - v35;
          v76 = LODWORD(v250);
          v77 = v250 * v75;
          LOBYTE(v76) = *v62;
          v78 = v36 * (float)((float)v76 - v34);
          v79 = (float)(v250 * v75) + v78;
          v80 = 8191.0;
          if (v79 <= 8191.0)
          {
            v80 = (float)(v250 * v75) + v78;
            if (v79 < 0.0)
              v80 = 0.0;
          }
          LOBYTE(v79) = *(_BYTE *)(v63 + v71);
          v81 = (float)LODWORD(v79) - v35;
          v82 = (float)(v248 * v75) + (float)(v81 * v249);
          v83 = 8191.0;
          if ((float)(v78 + v82) <= 8191.0)
          {
            v83 = v78 + v82;
            if ((float)(v78 + v82) < 0.0)
              v83 = 0.0;
          }
          v84 = v247 * v81;
          v85 = (float)(v247 * v81) + v78;
          v86 = 8191.0;
          if (v85 <= 8191.0)
          {
            v86 = v85;
            if (v85 < 0.0)
              v86 = 0.0;
          }
          LOBYTE(v85) = v62[1];
          v87 = v36 * (float)((float)LODWORD(v85) - v34);
          v88 = 8191.0;
          if ((float)(v77 + v87) <= 8191.0)
          {
            v88 = v77 + v87;
            if ((float)(v77 + v87) < 0.0)
              v88 = 0.0;
          }
          v89 = 8191.0;
          if ((float)(v82 + v87) <= 8191.0)
          {
            v89 = v82 + v87;
            if ((float)(v82 + v87) < 0.0)
              v89 = 0.0;
          }
          v90 = v84 + v87;
          v91 = (float)(v84 + v87) <= 8191.0;
          v92 = 8191.0;
          if (v91)
          {
            v92 = v90;
            if (v90 < 0.0)
              v92 = 0.0;
          }
          LOBYTE(v90) = *v72;
          v93 = v36 * (float)((float)LODWORD(v90) - v34);
          v94 = 8191.0;
          if ((float)(v77 + v93) <= 8191.0)
          {
            v94 = v77 + v93;
            if ((float)(v77 + v93) < 0.0)
              v94 = 0.0;
          }
          v95 = 8191.0;
          if ((float)(v82 + v93) <= 8191.0)
          {
            v95 = v82 + v93;
            if ((float)(v82 + v93) < 0.0)
              v95 = 0.0;
          }
          v96 = v84 + v93;
          v91 = (float)(v84 + v93) <= 8191.0;
          v97 = 8191.0;
          if (v91)
          {
            v97 = v96;
            if (v96 < 0.0)
              v97 = 0.0;
          }
          LOBYTE(v5) = v72[1];
          v98 = v36 * (float)((float)LODWORD(v5) - v34);
          v99 = v77 + v98;
          v91 = (float)(v77 + v98) <= 8191.0;
          v100 = 8191.0;
          if (v91)
          {
            v100 = v99;
            if (v99 < 0.0)
              v100 = 0.0;
          }
          v101 = v82 + v98;
          v91 = (float)(v82 + v98) <= 8191.0;
          v102 = 8191.0;
          if (v91)
          {
            v102 = v101;
            if (v101 < 0.0)
              v102 = 0.0;
          }
          v103 = v84 + v98;
          v104 = 8191.0;
          if (v103 <= 8191.0)
          {
            v104 = v103;
            if (v103 < 0.0)
              v104 = 0.0;
          }
          _H2 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H23 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          __asm { FCVT            S24, H23 }
          _H23 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          __asm { FCVT            S25, H23 }
          _H27 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          _H19 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          _H8 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          _H23 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v95, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v97, 0.0), 8191.0)));
          _H21 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v100, 0.0), 8191.0)));
          _H22 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v102, 0.0), 8191.0)));
          _H26 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v104, 0.0), 8191.0)));
          v123 = fmaxf(_S2, fmaxf(_S24, _S25));
          v124 = (float)((float)((float)(v66 * _S24) + (float)(v65 * _S2)) + (float)(v234 * _S25))
               + (float)(v233 * v123);
          v125 = 8191.0;
          if (v124 <= 8191.0)
          {
            v125 = (float)((float)((float)(v66 * _S24) + (float)(v65 * _S2)) + (float)(v234 * _S25))
                 + (float)(v233 * v123);
            if (v124 < 0.0)
              v125 = 0.0;
          }
          __asm
          {
            FCVT            S1, H27
            FCVT            S3, H19
            FCVT            S19, H8
          }
          _H27 = *((_WORD *)result + llroundf(v125));
          v130 = (float)((float)((float)(v66 * _S3) + (float)(v65 * _S1)) + (float)(v234 * _S19))
               + (float)(v233 * fmaxf(_S1, fmaxf(_S3, _S19)));
          v131 = 8191.0;
          if (v130 <= 8191.0)
          {
            v131 = v130;
            if (v130 < 0.0)
              v131 = 0.0;
          }
          v132 = v45;
          __asm
          {
            FCVT            S28, H29
            FCVT            S23, H23
            FCVT            S29, H30
          }
          _H30 = *((_WORD *)result + llroundf(v131));
          v137 = (float)((float)((float)(v66 * _S23) + (float)(v65 * _S28)) + (float)(v234 * _S29))
               + (float)(v233 * fmaxf(_S28, fmaxf(_S23, _S29)));
          v138 = 8191.0;
          if (v137 <= 8191.0)
          {
            v138 = v137;
            if (v137 < 0.0)
              v138 = 0.0;
          }
          v139 = v44;
          __asm
          {
            FCVT            S21, H21
            FCVT            S22, H22
            FCVT            S26, H26
          }
          _H31 = *((_WORD *)result + llroundf(v138));
          v144 = (float)((float)((float)(v66 * _S22) + (float)(v65 * _S21)) + (float)(v234 * _S26))
               + (float)(v233 * fmaxf(_S21, fmaxf(_S22, _S26)));
          v145 = 8191.0;
          if (v144 <= 8191.0)
          {
            v145 = v144;
            if (v144 < 0.0)
              v145 = 0.0;
          }
          __asm { FCVT            S27, H27 }
          v147 = _S2 * _S27;
          v148 = _S24 * _S27;
          v149 = _S25 * _S27;
          __asm { FCVT            S27, H30 }
          _S1 = _S1 * _S27;
          v152 = _S3 * _S27;
          v153 = _S19 * _S27;
          __asm { FCVT            S27, H31 }
          v155 = _S28 * _S27;
          v156 = _S23 * _S27;
          v157 = _S29 * _S27;
          _H29 = *((_WORD *)result + llroundf(v145));
          __asm { FCVT            S29, H29 }
          v160 = _S21 * _S29;
          v161 = _S22 * _S29;
          v162 = _S26 * _S29;
          v163 = (float)((float)(v245 * v148) + (float)(v147 * v246)) + (float)(v149 * v244);
          v164 = (float)((float)(v242 * v148) + (float)(v147 * v243)) + (float)(v149 * v240);
          v165 = (float)((float)(v236 * v148) + (float)(v147 * v238)) + (float)(v149 * v235);
          v166 = (float)((float)(v245 * v152) + (float)(_S1 * v246)) + (float)(v153 * v244);
          v167 = (float)((float)(v242 * v152) + (float)(_S1 * v243)) + (float)(v153 * v240);
          v168 = (float)((float)(v236 * v152) + (float)(_S1 * v238)) + (float)(v153 * v235);
          v169 = (float)((float)(v245 * v156) + (float)(v155 * v246)) + (float)(v157 * v244);
          v170 = (float)((float)(v242 * v156) + (float)(v155 * v243)) + (float)(v157 * v240);
          v171 = (float)((float)(v236 * v156) + (float)(v155 * v238)) + (float)(v157 * v235);
          v172 = (float)((float)(v245 * v161) + (float)(v160 * v246)) + (float)(v162 * v244);
          v173 = (float)((float)(v242 * v161) + (float)(v160 * v243)) + (float)(v162 * v240);
          v174 = (float)((float)(v236 * v161) + (float)(v160 * v238)) + (float)(v162 * v235);
          LOWORD(_S1) = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v163, 0.0), 8191.0)));
          __asm { FCVT            S21, H1 }
          LOWORD(_S1) = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v164, 0.0), 8191.0)));
          __asm { FCVT            S22, H1 }
          LOWORD(_S1) = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v165, 0.0), 8191.0)));
          __asm { FCVT            S29, H1 }
          _H1 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v166, 0.0), 8191.0)));
          _H3 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v167, 0.0), 8191.0)));
          _H19 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v168, 0.0), 8191.0)));
          _H26 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v169, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v170, 0.0), 8191.0)));
          _H28 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v171, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v172, 0.0), 8191.0)));
          _H24 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v173, 0.0), 8191.0)));
          _H25 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v174, 0.0), 8191.0)));
          v44 = v139;
          v187 = (float)(v139 * _S22) + (float)(v239 * _S21);
          v45 = v132;
          v188 = (float)(v187 + (float)(v132 * _S29)) + v39;
          v5 = v41;
          if (v188 <= v41)
          {
            v5 = v188;
            if (v188 < v39)
              v5 = v39;
          }
          *(_WORD *)v51 = llroundf(v5) << v64;
          if (v53)
          {
            v189 = v231;
            v190 = (float)((float)(v231 + (float)(_S21 * v237)) + (float)(_S22 * v46)) + (float)(_S29 * v47);
            v5 = v43;
            if (v190 <= v43)
            {
              v5 = (float)((float)(v231 + (float)(_S21 * v237)) + (float)(_S22 * v46)) + (float)(_S29 * v47);
              if (v190 < v241)
                v5 = v241;
            }
            v191 = v230;
            v36 = v228;
            v192 = (float)((float)(v231 + (float)(_S21 * v230)) + (float)(_S22 * v48)) + (float)(_S29 * v229);
            v193 = v229;
            *(_WORD *)v53 = llroundf(v5) << v64;
            v194 = v43;
            v65 = v226;
            v34 = v227;
            v66 = v225;
            if (v192 <= v43)
            {
              v194 = v192;
              if (v192 < v241)
                v194 = v241;
            }
            *((_WORD *)v53 + 1) = llroundf(v194) << v64;
            v53 += 4;
          }
          else
          {
            v34 = v227;
            v36 = v228;
            v191 = v230;
            v189 = v231;
            v193 = v229;
            v66 = v225;
            v65 = v226;
          }
          __asm
          {
            FCVT            S1, H1
            FCVT            S3, H3
            FCVT            S19, H19
          }
          v198 = (float)((float)((float)(v44 * _S3) + (float)(v239 * _S1)) + (float)(v132 * _S19)) + v39;
          v199 = v41;
          if (v198 <= v41)
          {
            v199 = (float)((float)((float)(v44 * _S3) + (float)(v239 * _S1)) + (float)(v132 * _S19)) + v39;
            if (v198 < v39)
              v199 = v39;
          }
          *((_WORD *)v51 + 1) = llroundf(v199) << v64;
          if (v53)
          {
            v200 = (float)((float)(v189 + (float)(_S1 * v237)) + (float)(_S3 * v46)) + (float)(_S19 * v47);
            v201 = v43;
            if (v200 <= v43)
            {
              v201 = (float)((float)(v189 + (float)(_S1 * v237)) + (float)(_S3 * v46)) + (float)(_S19 * v47);
              if (v200 < v241)
                v201 = v241;
            }
            v202 = (float)((float)(v189 + (float)(_S1 * v191)) + (float)(_S3 * v48)) + (float)(_S19 * v193);
            *(_WORD *)v53 = llroundf(v201) << v64;
            v203 = v43;
            if (v202 <= v43)
            {
              v203 = v202;
              if (v202 < v241)
                v203 = v241;
            }
            *((_WORD *)v53 + 1) = llroundf(v203) << v64;
            v53 += 4;
          }
          __asm
          {
            FCVT            S1, H26
            FCVT            S3, H27
            FCVT            S19, H28
          }
          v207 = (float)((float)((float)(v44 * _S3) + (float)(v239 * _S1)) + (float)(v132 * _S19)) + v39;
          v208 = v41;
          if (v207 <= v41)
          {
            v208 = (float)((float)((float)(v44 * _S3) + (float)(v239 * _S1)) + (float)(v132 * _S19)) + v39;
            if (v207 < v39)
              v208 = v39;
          }
          *(_WORD *)v74 = llroundf(v208) << v64;
          if (v73)
          {
            v209 = (float)((float)(v189 + (float)(_S1 * v237)) + (float)(_S3 * v46)) + (float)(_S19 * v47);
            v210 = v43;
            if (v209 <= v43)
            {
              v210 = (float)((float)(v189 + (float)(_S1 * v237)) + (float)(_S3 * v46)) + (float)(_S19 * v47);
              if (v209 < v241)
                v210 = v241;
            }
            v211 = (float)((float)(v189 + (float)(_S1 * v191)) + (float)(_S3 * v48)) + (float)(_S19 * v193);
            *(_WORD *)v73 = llroundf(v210) << v64;
            v212 = v43;
            if (v211 <= v43)
            {
              v212 = v211;
              if (v211 < v241)
                v212 = v241;
            }
            *((_WORD *)v73 + 1) = llroundf(v212) << v64;
            v73 += 4;
          }
          __asm
          {
            FCVT            S1, H2
            FCVT            S2, H24
            FCVT            S3, H25
          }
          v215 = (float)((float)((float)(v44 * _S2) + (float)(v239 * _S1)) + (float)(v132 * _S3)) + v39;
          v216 = v41;
          if (v215 <= v41)
          {
            v216 = (float)((float)((float)(v44 * _S2) + (float)(v239 * _S1)) + (float)(v132 * _S3)) + v39;
            if (v215 < v39)
              v216 = v39;
          }
          *((_WORD *)v74 + 1) = llroundf(v216) << v64;
          if (v73)
          {
            v217 = (float)((float)(v189 + (float)(_S1 * v237)) + (float)(_S2 * v46)) + (float)(_S3 * v47);
            v218 = v43;
            if (v217 <= v43)
            {
              v218 = (float)((float)(v189 + (float)(_S1 * v237)) + (float)(_S2 * v46)) + (float)(_S3 * v47);
              if (v217 < v241)
                v218 = v241;
            }
            _S1 = (float)((float)(v189 + (float)(_S1 * v191)) + (float)(_S2 * v48)) + (float)(_S3 * v193);
            *(_WORD *)v73 = llroundf(v218) << v64;
            v219 = v43;
            v35 = v232;
            if (_S1 <= v43)
            {
              v219 = _S1;
              if (_S1 < v241)
                v219 = v241;
            }
            *((_WORD *)v73 + 1) = llroundf(v219) << v64;
            v73 += 4;
          }
          else
          {
            v35 = v232;
          }
          v62 += 2;
          v72 += 2;
          v51 += 4;
          v74 += 4;
          v71 += 2;
        }
        while (v11 > v71);
      }
      v62 = &v68[v23];
      v63 += v24;
      v51 = &v70[v28];
      v53 = &v69[v29];
      v10 += 2;
    }
    while (v14 > v10);
    if (v26 && v31)
    {
      v220 = 0;
      do
      {
        if (v11)
        {
          v221 = v11;
          v222 = v32;
          v223 = v27;
          do
          {
            v224 = *v223++;
            *v222++ = v224 | (v224 << 8);
            --v221;
          }
          while (v221);
        }
        v27 += v25;
        v32 += v30;
        ++v220;
      }
      while (v220 != v14);
    }
    else if (v31)
    {
      do
      {
        if (v11)
          result = memset(v32, 255, 2 * v11);
        v32 += v30;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Mat_TRC_xf444(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[3];
  v18 = a6[5];
  if ((v14 & 1) != 0)
  {
    ++v18;
    ++v14;
    if ((v11 & 1) != 0)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  v19 = a6[2];
  v20 = a6[4];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9)
    v12 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15)
    v21 = v19;
  else
    v21 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v18;
  if (v12 >= v21)
    v24 = v21;
  else
    v24 = v12;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Mat_TRC_xf444_GCD);
  return 0;
}

_QWORD *vt_Copy_420vf_TRC_Mat_TRC_xf444_GCD(_QWORD *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  unsigned int v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  unsigned int v52;
  uint64_t v53;
  _BYTE *v54;
  char v55;
  uint64_t v56;
  char v57;
  _BYTE *v58;
  char *v59;
  char *v60;
  unint64_t v61;
  _BYTE *v62;
  char *v63;
  char *v64;
  float v65;
  unsigned int v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  BOOL v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v127;
  float v128;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float v184;
  float v185;
  float v186;
  uint64_t v187;
  unint64_t v188;
  _WORD *v189;
  unsigned __int8 *v190;
  __int16 v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float v198;
  float v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  float v206;
  float v207;
  float v208;
  float v209;
  float v210;
  float v211;
  float v212;
  float v213;
  float v214;
  float v215;

  v5 = *(_QWORD *)((char *)result + 28);
  v6 = 2 * *(unsigned __int8 *)result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)((char *)result + 20);
    v11 = *(_QWORD *)((char *)result + 36);
    v12 = *(_QWORD *)((char *)result + 44) + 2 * v7;
    v13 = 2 * v8 - 2 * v7;
    v14 = result[14];
    v15 = result[13] * a2 / v6;
    v16 = (_QWORD *)result[16];
    v17 = result[15] + 2 * v15;
    v18 = result[19];
    v19 = (_QWORD *)result[7];
    v20 = (uint64_t *)result[8];
    v21 = (uint64_t *)result[17];
    v22 = *v20;
    v23 = v20[1];
    v24 = v20[2];
    v25 = v19[2];
    v26 = (unsigned __int8 *)(v25 + v24 * v12 + v11);
    v27 = *v21;
    v28 = v21[1];
    v29 = v21[2];
    v30 = v16[2];
    v31 = (char *)(v30 + v29 * v17 + 2 * v14);
    v32 = 8191.0 / (float)*(unsigned int *)(v18 + 128);
    LOWORD(a5) = *(_WORD *)(v18 + 140);
    v33 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v18 + 142);
    v34 = (float)LODWORD(a5);
    v35 = v32 * *(float *)v18;
    v36 = *(float *)(v18 + 20);
    v212 = v32 * *(float *)(v18 + 16);
    v213 = v32 * *(float *)(v18 + 8);
    v37 = v32 * v36;
    *(float *)&v38 = v32 * *(float *)(v18 + 28);
    v210 = *(float *)&v38;
    v211 = v37;
    LOWORD(v38) = *(_WORD *)(v18 + 144);
    v39 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v18 + 146);
    v40 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v18 + 148);
    v41 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v18 + 150);
    v42 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v18 + 152);
    v43 = (float)v38;
    v44 = *(float *)(v18 + 36);
    v45 = *(float *)(v18 + 44);
    v215 = *(float *)(v18 + 56);
    v208 = *(float *)(v18 + 76);
    v209 = *(float *)(v18 + 72);
    v206 = *(float *)(v18 + 84);
    v207 = *(float *)(v18 + 80);
    v204 = *(float *)(v18 + 92);
    v205 = *(float *)(v18 + 88);
    v202 = *(float *)(v18 + 96);
    _S1 = *(float *)(v18 + 104);
    v199 = _S1;
    v200 = *(float *)(v18 + 100);
    v47 = v18 + 164;
    v48 = v16[1];
    v49 = (char *)(*v16 + v27 * v17 + 2 * v14);
    v50 = v48 + v28 * v17 + 2 * v14;
    result = (_QWORD *)(v18 + 16548);
    if (v48)
      v51 = (char *)v50;
    else
      v51 = 0;
    v52 = *(unsigned __int8 *)(v18 + 132);
    v53 = v19[1];
    v54 = (_BYTE *)(*v19 + v22 * v12 + v11);
    if (v52 >= 0x11)
      v55 = 0;
    else
      v55 = 16 - v52;
    v56 = v53 + v23 * (v12 / 2) + v11;
    v57 = v55;
    v197 = *(float *)(v18 + 60);
    v198 = (float)LODWORD(a5);
    v195 = *(float *)(v18 + 68);
    v196 = *(float *)(v18 + 64);
    v193 = v35;
    v194 = v40;
    v214 = *(float *)(v18 + 40);
    v203 = *(float *)(v18 + 52);
    v201 = *(float *)(v18 + 48);
    v192 = v33;
    do
    {
      v58 = &v54[v22];
      v59 = &v51[v28];
      v60 = &v49[v27];
      if (v10)
      {
        v61 = 0;
        v62 = &v54[v22];
        v63 = &v51[v28];
        v64 = &v49[v27];
        do
        {
          LOBYTE(_S1) = *(_BYTE *)(v56 + v61 + 1);
          v65 = (float)LODWORD(_S1) - v34;
          v66 = LODWORD(v213);
          v67 = v213 * v65;
          LOBYTE(v66) = *v54;
          v68 = v35 * (float)((float)v66 - v33);
          v69 = (float)(v213 * v65) + v68;
          v70 = 8191.0;
          if (v69 <= 8191.0)
          {
            v70 = (float)(v213 * v65) + v68;
            if (v69 < 0.0)
              v70 = 0.0;
          }
          LOBYTE(v36) = *(_BYTE *)(v56 + v61);
          v71 = (float)LODWORD(v36) - v34;
          v72 = (float)(v211 * v65) + (float)(v71 * v212);
          v73 = 8191.0;
          if ((float)(v68 + v72) <= 8191.0)
          {
            v73 = v68 + v72;
            if ((float)(v68 + v72) < 0.0)
              v73 = 0.0;
          }
          v74 = v210 * v71;
          v75 = (float)(v210 * v71) + v68;
          v76 = 8191.0;
          if (v75 <= 8191.0)
          {
            v76 = v75;
            if (v75 < 0.0)
              v76 = 0.0;
          }
          LOBYTE(v75) = v54[1];
          v77 = v35 * (float)((float)LODWORD(v75) - v33);
          v78 = 8191.0;
          if ((float)(v67 + v77) <= 8191.0)
          {
            v78 = v67 + v77;
            if ((float)(v67 + v77) < 0.0)
              v78 = 0.0;
          }
          v79 = 8191.0;
          if ((float)(v72 + v77) <= 8191.0)
          {
            v79 = v72 + v77;
            if ((float)(v72 + v77) < 0.0)
              v79 = 0.0;
          }
          v80 = v74 + v77;
          v81 = 8191.0;
          if (v80 <= 8191.0)
          {
            v81 = v80;
            if (v80 < 0.0)
              v81 = 0.0;
          }
          LOBYTE(v80) = *v62;
          v82 = (float)LODWORD(v80) - v33;
          v83 = v35 * v82;
          v84 = 8191.0;
          if ((float)(v67 + (float)(v35 * v82)) <= 8191.0)
          {
            v84 = v67 + (float)(v35 * v82);
            if (v84 < 0.0)
              v84 = 0.0;
          }
          v85 = 8191.0;
          if ((float)(v72 + v83) <= 8191.0)
          {
            v85 = v72 + v83;
            if ((float)(v72 + v83) < 0.0)
              v85 = 0.0;
          }
          v86 = v74 + v83;
          v87 = (float)(v74 + v83) <= 8191.0;
          v88 = 8191.0;
          if (v87)
          {
            v88 = v86;
            if (v86 < 0.0)
              v88 = 0.0;
          }
          LOBYTE(v82) = v62[1];
          v89 = v35 * (float)((float)LODWORD(v82) - v33);
          v90 = v67 + v89;
          v87 = (float)(v67 + v89) <= 8191.0;
          v91 = 8191.0;
          if (v87)
          {
            v91 = v90;
            if (v90 < 0.0)
              v91 = 0.0;
          }
          v92 = v45;
          v93 = v72 + v89;
          v87 = (float)(v72 + v89) <= 8191.0;
          v94 = 8191.0;
          if (v87)
          {
            v94 = v93;
            if (v93 < 0.0)
              v94 = 0.0;
          }
          v95 = v44;
          v96 = v42;
          v97 = v74 + v89;
          v98 = 8191.0;
          if (v97 <= 8191.0)
          {
            v98 = v97;
            if (v97 < 0.0)
              v98 = 0.0;
          }
          _H1 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          _H4 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H5 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H2 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          _H6 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          __asm
          {
            FCVT            S2, H2
            FCVT            S6, H6
          }
          _H26 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          _H3 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          _H19 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          _H7 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          _H24 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          __asm
          {
            FCVT            S7, H7
            FCVT            S24, H24
          }
          _H25 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          v127 = (float)((float)(v208 * _S4) + (float)(_S1 * v209)) + (float)(_S5 * v207);
          v128 = (float)((float)(v205 * _S4) + (float)(_S1 * v206)) + (float)(_S5 * v204);
          _S1 = (float)((float)(v200 * _S4) + (float)(_S1 * v202)) + (float)(_S5 * v199);
          v130 = (float)((float)(v208 * _S6) + (float)(_S2 * v209)) + (float)(_S26 * v207);
          v131 = (float)((float)(v205 * _S6) + (float)(_S2 * v206)) + (float)(_S26 * v204);
          v132 = (float)((float)(v200 * _S6) + (float)(_S2 * v202)) + (float)(_S26 * v199);
          v133 = (float)((float)(v208 * _S3) + (float)(_S27 * v209)) + (float)(_S19 * v207);
          v134 = (float)((float)(v205 * _S3) + (float)(_S27 * v206)) + (float)(_S19 * v204);
          v135 = (float)((float)(v200 * _S3) + (float)(_S27 * v202)) + (float)(_S19 * v199);
          v136 = (float)((float)(v208 * _S24) + (float)(_S7 * v209)) + (float)(_S25 * v207);
          v137 = (float)((float)(v205 * _S24) + (float)(_S7 * v206)) + (float)(_S25 * v204);
          v138 = (float)((float)(v200 * _S24) + (float)(_S7 * v202)) + (float)(_S25 * v199);
          LOWORD(_S7) = *((_WORD *)result + llroundf(fminf(fmaxf(v127, 0.0), 8191.0)));
          __asm { FCVT            S27, H7 }
          LOWORD(_S7) = *((_WORD *)result + llroundf(fminf(fmaxf(v128, 0.0), 8191.0)));
          __asm { FCVT            S28, H7 }
          LOWORD(_S1) = *((_WORD *)result + llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          __asm { FCVT            S29, H1 }
          _H25 = *((_WORD *)result + llroundf(fminf(fmaxf(v130, 0.0), 8191.0)));
          _H26 = *((_WORD *)result + llroundf(fminf(fmaxf(v131, 0.0), 8191.0)));
          _H19 = *((_WORD *)result + llroundf(fminf(fmaxf(v132, 0.0), 8191.0)));
          _H7 = *((_WORD *)result + llroundf(fminf(fmaxf(v133, 0.0), 8191.0)));
          _H2 = *((_WORD *)result + llroundf(fminf(fmaxf(v134, 0.0), 8191.0)));
          _H24 = *((_WORD *)result + llroundf(fminf(fmaxf(v135, 0.0), 8191.0)));
          _H4 = *((_WORD *)result + llroundf(fminf(fmaxf(v136, 0.0), 8191.0)));
          _H5 = *((_WORD *)result + llroundf(fminf(fmaxf(v137, 0.0), 8191.0)));
          _H6 = *((_WORD *)result + llroundf(fminf(fmaxf(v138, 0.0), 8191.0)));
          v44 = v95;
          v151 = (float)(v214 * _S28) + (float)(v95 * _S27);
          v45 = v92;
          v152 = (float)(v151 + (float)(v92 * _S29)) + v39;
          v153 = v41;
          if (v152 <= v41)
          {
            v153 = v152;
            if (v152 < v39)
              v153 = v39;
          }
          *(_WORD *)v49 = llroundf(v153) << v57;
          v42 = v96;
          if (v51)
          {
            v154 = v194;
            v155 = (float)((float)(v194 + (float)(_S27 * v201)) + (float)(_S28 * v203)) + (float)(_S29 * v215);
            v156 = v43;
            if (v155 <= v43)
            {
              v156 = (float)((float)(v194 + (float)(_S27 * v201)) + (float)(_S28 * v203)) + (float)(_S29 * v215);
              if (v155 < v96)
                v156 = v96;
            }
            v158 = v196;
            v157 = v197;
            v159 = (float)(v194 + (float)(_S27 * v197)) + (float)(_S28 * v196);
            v160 = v195;
            v161 = v159 + (float)(_S29 * v195);
            *(_WORD *)v51 = llroundf(v156) << v57;
            v162 = v43;
            v33 = v192;
            v35 = v193;
            if (v161 <= v43)
            {
              v162 = v159 + (float)(_S29 * v195);
              if (v161 < v96)
                v162 = v96;
            }
            *((_WORD *)v51 + 1) = llroundf(v162) << v57;
            v51 += 4;
            v163 = v214;
          }
          else
          {
            v33 = v192;
            v35 = v193;
            v163 = v214;
            v158 = v196;
            v157 = v197;
            v154 = v194;
            v160 = v195;
          }
          __asm
          {
            FCVT            S1, H25
            FCVT            S25, H26
            FCVT            S19, H19
          }
          v167 = (float)((float)((float)(v163 * _S25) + (float)(v44 * _S1)) + (float)(v92 * _S19)) + v39;
          v168 = v41;
          if (v167 <= v41)
          {
            v168 = (float)((float)((float)(v163 * _S25) + (float)(v44 * _S1)) + (float)(v92 * _S19)) + v39;
            if (v167 < v39)
              v168 = v39;
          }
          *((_WORD *)v49 + 1) = llroundf(v168) << v57;
          if (v51)
          {
            v169 = (float)((float)(v154 + (float)(_S1 * v201)) + (float)(_S25 * v203)) + (float)(_S19 * v215);
            v170 = v43;
            if (v169 <= v43)
            {
              v170 = (float)((float)(v154 + (float)(_S1 * v201)) + (float)(_S25 * v203)) + (float)(_S19 * v215);
              if (v169 < v96)
                v170 = v96;
            }
            v171 = (float)((float)(v154 + (float)(_S1 * v157)) + (float)(_S25 * v158)) + (float)(_S19 * v160);
            *(_WORD *)v51 = llroundf(v170) << v57;
            v172 = v43;
            if (v171 <= v43)
            {
              v172 = v171;
              if (v171 < v96)
                v172 = v96;
            }
            *((_WORD *)v51 + 1) = llroundf(v172) << v57;
            v51 += 4;
          }
          __asm
          {
            FCVT            S1, H7
            FCVT            S2, H2
            FCVT            S7, H24
          }
          v176 = (float)((float)((float)(v163 * _S2) + (float)(v44 * _S1)) + (float)(v92 * _S7)) + v39;
          v177 = v41;
          if (v176 <= v41)
          {
            v177 = (float)((float)((float)(v163 * _S2) + (float)(v44 * _S1)) + (float)(v92 * _S7)) + v39;
            if (v176 < v39)
              v177 = v39;
          }
          *(_WORD *)v64 = llroundf(v177) << v57;
          if (v63)
          {
            v178 = (float)((float)(v154 + (float)(_S1 * v201)) + (float)(_S2 * v203)) + (float)(_S7 * v215);
            v179 = v43;
            if (v178 <= v43)
            {
              v179 = (float)((float)(v154 + (float)(_S1 * v201)) + (float)(_S2 * v203)) + (float)(_S7 * v215);
              if (v178 < v96)
                v179 = v96;
            }
            v180 = (float)((float)(v154 + (float)(_S1 * v157)) + (float)(_S2 * v158)) + (float)(_S7 * v160);
            *(_WORD *)v63 = llroundf(v179) << v57;
            v181 = v43;
            if (v180 <= v43)
            {
              v181 = v180;
              if (v180 < v96)
                v181 = v96;
            }
            *((_WORD *)v63 + 1) = llroundf(v181) << v57;
            v63 += 4;
          }
          v34 = v198;
          __asm
          {
            FCVT            S1, H4
            FCVT            S2, H5
            FCVT            S4, H6
          }
          v36 = (float)((float)((float)(v163 * _S2) + (float)(v44 * _S1)) + (float)(v92 * _S4)) + v39;
          v184 = v41;
          if (v36 <= v41)
          {
            v184 = (float)((float)((float)(v163 * _S2) + (float)(v44 * _S1)) + (float)(v92 * _S4)) + v39;
            if (v36 < v39)
              v184 = v39;
          }
          *((_WORD *)v64 + 1) = llroundf(v184) << v57;
          if (v63)
          {
            v36 = (float)((float)(v154 + (float)(_S1 * v201)) + (float)(_S2 * v203)) + (float)(_S4 * v215);
            v185 = v43;
            if (v36 <= v43)
            {
              v185 = (float)((float)(v154 + (float)(_S1 * v201)) + (float)(_S2 * v203)) + (float)(_S4 * v215);
              if (v36 < v96)
                v185 = v96;
            }
            _S1 = (float)((float)(v154 + (float)(_S1 * v157)) + (float)(_S2 * v158)) + (float)(_S4 * v160);
            *(_WORD *)v63 = llroundf(v185) << v57;
            v186 = v43;
            if (_S1 <= v43)
            {
              v186 = _S1;
              if (_S1 < v96)
                v186 = v96;
            }
            *((_WORD *)v63 + 1) = llroundf(v186) << v57;
            v63 += 4;
          }
          v54 += 2;
          v62 += 2;
          v49 += 4;
          v64 += 4;
          v61 += 2;
        }
        while (v10 > v61);
      }
      v54 = &v58[v22];
      v56 += v23;
      v49 = &v60[v27];
      v51 = &v59[v28];
      v9 += 2;
    }
    while (v13 > v9);
    if (v25 && v30)
    {
      v187 = 0;
      do
      {
        if (v10)
        {
          v188 = v10;
          v189 = v31;
          v190 = v26;
          do
          {
            v191 = *v190++;
            *v189++ = v191 | (v191 << 8);
            --v188;
          }
          while (v188);
        }
        v26 += v24;
        v31 += v29;
        ++v187;
      }
      while (v187 != v13);
    }
    else if (v30)
    {
      do
      {
        if (v10)
          result = memset(v31, 255, 2 * v10);
        v31 += v29;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_rgb_xf444(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[3];
  v18 = a6[5];
  if ((v14 & 1) != 0)
  {
    ++v18;
    ++v14;
    if ((v11 & 1) != 0)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  v19 = a6[2];
  v20 = a6[4];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9)
    v12 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15)
    v21 = v19;
  else
    v21 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v18;
  if (v12 >= v21)
    v24 = v21;
  else
    v24 = v12;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_rgb_xf444_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_420vf_rgb_xf444_GCD(unsigned __int8 *result, uint64_t a2)
{
  float v2;
  float v3;
  float v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  float v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unsigned __int8 *v38;
  unsigned int v39;
  unsigned int v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  char *v64;
  unsigned int v65;
  char v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  unsigned __int8 *v72;
  char *v73;
  char *v74;
  unint64_t v75;
  unsigned __int8 *v76;
  char *v77;
  char *v78;
  unsigned int v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  uint64_t v117;
  unint64_t v118;
  _WORD *v119;
  unsigned __int8 *v120;
  __int16 v121;

  v10 = *(_QWORD *)(result + 28);
  v11 = 2 * *result;
  v12 = v10 * a2 / v11;
  v13 = (v10 + v10 * a2) / v11;
  if (2 * v13 != 2 * v12)
  {
    v14 = 0;
    v15 = *(_QWORD *)(result + 20);
    v16 = *(_QWORD *)(result + 36);
    v17 = *(_QWORD *)(result + 44) + 2 * v12;
    v18 = 2 * v13 - 2 * v12;
    v19 = *((_QWORD *)result + 14);
    v20 = (_QWORD *)*((_QWORD *)result + 16);
    v21 = *((_QWORD *)result + 15) + 2 * (*((_QWORD *)result + 13) * a2 / v11);
    v22 = *((_QWORD *)result + 19);
    v23 = (uint64_t *)*((_QWORD *)result + 7);
    v24 = (uint64_t *)*((_QWORD *)result + 8);
    v25 = (uint64_t *)*((_QWORD *)result + 17);
    v26 = *v24;
    v27 = v24[1];
    v28 = v24[2];
    v29 = v23[2];
    v30 = *v25;
    v31 = v25[1];
    v32 = v25[2];
    v33 = v20[1];
    v34 = v20[2];
    v35 = (char *)(v34 + v32 * v21 + 2 * v19);
    v36 = (char *)(*v20 + v30 * v21 + 2 * v19);
    v37 = v33 + v31 * v21 + 2 * v19;
    v38 = (unsigned __int8 *)(v29 + v28 * v17 + v16);
    *(float *)&v39 = (float)*(unsigned int *)(v22 + 128);
    *(float *)&v40 = (float)*(unsigned int *)(v22 + 136);
    v41 = *(float *)&v40 / *(float *)&v39;
    LOWORD(v39) = *(_WORD *)(v22 + 140);
    v42 = (float)v39;
    LOWORD(v40) = *(_WORD *)(v22 + 142);
    v43 = (float)v40;
    v44 = v41 * *(float *)v22;
    v45 = v41 * *(float *)(v22 + 8);
    v46 = v41 * *(float *)(v22 + 16);
    v47 = v41 * *(float *)(v22 + 20);
    v48 = *(float *)(v22 + 28);
    v49 = v41 * v48;
    LOWORD(v48) = *(_WORD *)(v22 + 144);
    v50 = (float)LODWORD(v48);
    LOWORD(v5) = *(_WORD *)(v22 + 146);
    v51 = (float)v5;
    LOWORD(v6) = *(_WORD *)(v22 + 148);
    v52 = (float)v6;
    LOWORD(v7) = *(_WORD *)(v22 + 150);
    v53 = (float)v7;
    LOWORD(v8) = *(_WORD *)(v22 + 152);
    v54 = (float)v8;
    v55 = *(float *)(v22 + 36);
    v56 = *(float *)(v22 + 40);
    v57 = *(float *)(v22 + 44);
    v58 = *(float *)(v22 + 48);
    v59 = *(float *)(v22 + 52);
    v60 = *(float *)(v22 + 56);
    v61 = *(float *)(v22 + 60);
    v62 = *(float *)(v22 + 64);
    v63 = *(float *)(v22 + 68);
    if (v33)
      v64 = (char *)v37;
    else
      v64 = 0;
    v65 = *(unsigned __int8 *)(v22 + 132);
    v66 = 16 - v65;
    v67 = v65 >= 0x11;
    v68 = *v23;
    v69 = v23[1];
    result = (unsigned __int8 *)(v68 + v26 * v17 + v16);
    if (v67)
      v66 = 0;
    v70 = v69 + v27 * (v17 / 2) + v16;
    v71 = v66;
    do
    {
      v72 = &result[v26];
      v73 = &v64[v31];
      v74 = &v36[v30];
      if (v15)
      {
        v75 = 0;
        v76 = &result[v26];
        v77 = &v36[v30];
        v78 = &v64[v31];
        do
        {
          LOBYTE(v9) = *(_BYTE *)(v70 + v75);
          *(float *)&v79 = (float)LODWORD(v9);
          v80 = *(float *)&v79 - v43;
          LOBYTE(v79) = *(_BYTE *)(v70 + v75 + 1);
          v81 = (float)v79 - v43;
          v82 = v45 * v81;
          v83 = (float)(v47 * v81) + (float)(v80 * v46);
          v84 = v49 * v80;
          LOBYTE(v2) = *result;
          v85 = v44 * (float)((float)LODWORD(v2) - v42);
          v86 = v82 + v85;
          v87 = v85 + v83;
          v88 = v84 + v85;
          v89 = (float)((float)((float)(v56 * (float)(v85 + v83)) + (float)(v55 * (float)(v82 + v85)))
                      + (float)(v57 * (float)(v84 + v85)))
              + v50;
          v90 = v52;
          if (v89 <= v52)
          {
            v90 = v89;
            if (v89 < v50)
              v90 = v50;
          }
          LOBYTE(v4) = result[1];
          LOBYTE(v3) = *v76;
          LOBYTE(v89) = v76[1];
          *(_WORD *)v36 = llroundf(v90) << v71;
          if (v64)
          {
            v91 = (float)((float)(v51 + (float)(v86 * v58)) + (float)(v87 * v59)) + (float)(v88 * v60);
            v92 = v54;
            if (v91 <= v54)
            {
              v92 = (float)((float)(v51 + (float)(v86 * v58)) + (float)(v87 * v59)) + (float)(v88 * v60);
              if (v91 < v53)
                v92 = v53;
            }
            v93 = (float)((float)(v51 + (float)(v86 * v61)) + (float)(v87 * v62)) + (float)(v88 * v63);
            *(_WORD *)v64 = llroundf(v92) << v71;
            v94 = v54;
            if (v93 <= v54)
            {
              if (v93 < v53)
                v94 = v53;
              else
                v94 = v93;
            }
            *((_WORD *)v64 + 1) = llroundf(v94) << v71;
            v64 += 4;
          }
          v95 = v44 * (float)((float)LODWORD(v4) - v42);
          v96 = v82 + v95;
          v97 = v83 + v95;
          v98 = v84 + v95;
          v99 = (float)((float)((float)(v56 * v97) + (float)(v55 * v96)) + (float)(v57 * v98)) + v50;
          v100 = v52;
          if (v99 <= v52)
          {
            v100 = (float)((float)((float)(v56 * v97) + (float)(v55 * v96)) + (float)(v57 * v98)) + v50;
            if (v99 < v50)
              v100 = v50;
          }
          *((_WORD *)v36 + 1) = llroundf(v100) << v71;
          if (v64)
          {
            v101 = (float)((float)(v51 + (float)(v96 * v58)) + (float)(v97 * v59)) + (float)(v98 * v60);
            v102 = v54;
            if (v101 <= v54)
            {
              v102 = (float)((float)(v51 + (float)(v96 * v58)) + (float)(v97 * v59)) + (float)(v98 * v60);
              if (v101 < v53)
                v102 = v53;
            }
            v103 = (float)((float)(v51 + (float)(v96 * v61)) + (float)(v97 * v62)) + (float)(v98 * v63);
            *(_WORD *)v64 = llroundf(v102) << v71;
            v104 = v54;
            if (v103 <= v54)
            {
              if (v103 < v53)
                v104 = v53;
              else
                v104 = v103;
            }
            *((_WORD *)v64 + 1) = llroundf(v104) << v71;
            v64 += 4;
          }
          v105 = v44 * (float)((float)LODWORD(v3) - v42);
          v106 = v82 + v105;
          v4 = v83 + v105;
          v107 = v84 + v105;
          v108 = (float)((float)((float)(v56 * v4) + (float)(v55 * v106)) + (float)(v57 * v107)) + v50;
          v109 = v52;
          if (v108 <= v52)
          {
            v109 = (float)((float)((float)(v56 * v4) + (float)(v55 * v106)) + (float)(v57 * v107)) + v50;
            if (v108 < v50)
              v109 = v50;
          }
          *(_WORD *)v77 = llroundf(v109) << v71;
          if (v78)
          {
            v110 = (float)((float)(v51 + (float)(v106 * v58)) + (float)(v4 * v59)) + (float)(v107 * v60);
            v111 = v54;
            if (v110 <= v54)
            {
              v111 = (float)((float)(v51 + (float)(v106 * v58)) + (float)(v4 * v59)) + (float)(v107 * v60);
              if (v110 < v53)
                v111 = v53;
            }
            v112 = (float)((float)(v51 + (float)(v106 * v61)) + (float)(v4 * v62)) + (float)(v107 * v63);
            *(_WORD *)v78 = llroundf(v111) << v71;
            v4 = v54;
            if (v112 <= v54)
            {
              if (v112 < v53)
                v4 = v53;
              else
                v4 = v112;
            }
            *((_WORD *)v78 + 1) = llroundf(v4) << v71;
            v78 += 4;
          }
          v113 = v44 * (float)((float)LODWORD(v89) - v42);
          v9 = v82 + v113;
          v114 = v83 + v113;
          v115 = v84 + v113;
          v3 = (float)((float)((float)(v56 * v114) + (float)(v55 * v9)) + (float)(v57 * v115)) + v50;
          v2 = v52;
          if (v3 <= v52)
          {
            v2 = (float)((float)((float)(v56 * v114) + (float)(v55 * v9)) + (float)(v57 * v115)) + v50;
            if (v3 < v50)
              v2 = v50;
          }
          *((_WORD *)v77 + 1) = llroundf(v2) << v71;
          if (v78)
          {
            v3 = (float)((float)(v51 + (float)(v9 * v58)) + (float)(v114 * v59)) + (float)(v115 * v60);
            v2 = v54;
            if (v3 <= v54)
            {
              v2 = (float)((float)(v51 + (float)(v9 * v58)) + (float)(v114 * v59)) + (float)(v115 * v60);
              if (v3 < v53)
                v2 = v53;
            }
            v9 = (float)((float)(v51 + (float)(v9 * v61)) + (float)(v114 * v62)) + (float)(v115 * v63);
            *(_WORD *)v78 = llroundf(v2) << v71;
            v116 = v54;
            if (v9 <= v54)
            {
              v116 = v9;
              if (v9 < v53)
                v116 = v53;
            }
            *((_WORD *)v78 + 1) = llroundf(v116) << v71;
            v78 += 4;
          }
          result += 2;
          v76 += 2;
          v36 += 4;
          v77 += 4;
          v75 += 2;
        }
        while (v15 > v75);
      }
      result = &v72[v26];
      v70 += v27;
      v36 = &v74[v30];
      v64 = &v73[v31];
      v14 += 2;
    }
    while (v18 > v14);
    if (v29 && v34)
    {
      v117 = 0;
      do
      {
        if (v15)
        {
          v118 = v15;
          v119 = v35;
          v120 = v38;
          do
          {
            v121 = *v120++;
            *v119++ = v121 | (v121 << 8);
            --v118;
          }
          while (v118);
        }
        v38 += v28;
        v35 += v32;
        ++v117;
      }
      while (v117 != v18);
    }
    else if (v34)
    {
      do
      {
        if (v15)
          result = (unsigned __int8 *)memset(v35, 255, 2 * v15);
        v35 += v32;
        --v18;
      }
      while (v18);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Tone_Mat_TRC_BGRA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[3];
  v18 = a6[5];
  if ((v14 & 1) != 0)
  {
    ++v18;
    ++v14;
    if ((v11 & 1) != 0)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  v19 = a6[2];
  v20 = a6[4];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9)
    v12 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15)
    v21 = v19;
  else
    v21 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v18;
  if (v12 >= v21)
    v24 = v21;
  else
    v24 = v12;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Tone_Mat_TRC_BGRA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_420vf_TRC_Tone_Mat_TRC_BGRA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  float v36;
  float v37;
  float v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  unsigned __int8 *v59;
  unint64_t v60;
  uint64_t v61;
  unsigned __int8 *v62;
  char *v63;
  float v64;
  unsigned int v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  BOOL v90;
  float v91;
  float v92;
  float v93;
  char v94;
  char v95;
  char v96;
  char v97;
  float v99;
  float v115;
  float v116;
  float v117;
  float v122;
  float v123;
  float v128;
  float v129;
  float v130;
  float v135;
  float v136;
  float v138;
  float v139;
  float v140;
  float v142;
  float v143;
  float v144;
  float v146;
  float v147;
  float v148;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  char v177;
  char v178;
  char v179;
  char v180;
  float v182;
  uint64_t v189;
  uint64_t v202;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  float v209;
  float v210;
  float v211;
  float v212;
  float v213;
  float v214;
  float v215;
  float v216;
  float v217;

  v5 = *(_QWORD *)(result + 28);
  v6 = 2 * *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = *(_QWORD *)(result + 44);
    v12 = v11 + 2 * v7;
    v208 = v11 + 2 * v8 - v12;
    v13 = *((_QWORD *)result + 19);
    v14 = (_QWORD *)*((_QWORD *)result + 7);
    v15 = (uint64_t *)*((_QWORD *)result + 8);
    v17 = *v15;
    v16 = v15[1];
    v18 = v15[2];
    v19 = **((_QWORD **)result + 17);
    v20 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    LOWORD(a5) = *(_WORD *)(v13 + 140);
    v21 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    v22 = (float)LODWORD(a5);
    v23 = v20 * *(float *)v13;
    v213 = v20 * *(float *)(v13 + 16);
    v214 = v20 * *(float *)(v13 + 8);
    v211 = v20 * *(float *)(v13 + 28);
    v212 = v20 * *(float *)(v13 + 20);
    _S1 = *(float *)(v13 + 76);
    v25 = *(float *)(v13 + 80);
    v209 = _S1;
    v210 = *(float *)(v13 + 72);
    v26 = *(float *)(v13 + 84);
    v27 = *(float *)(v13 + 88);
    v28 = *(float *)(v13 + 92);
    v29 = *(float *)(v13 + 96);
    v30 = *(float *)(v13 + 100);
    v31 = *(float *)(v13 + 104);
    v32 = v13 + 164;
    v33 = v13 + 16548;
    v34 = v13 + 32932;
    v35 = *(float *)(v13 + 108);
    v36 = *(float *)(v13 + 112);
    v37 = *(float *)(v13 + 116);
    v38 = *(float *)(v13 + 120);
    v39 = *((_QWORD *)result + 14);
    v40 = *((_QWORD *)result + 13) * a2;
    v41 = (_QWORD *)*((_QWORD *)result + 16);
    v42 = *((_QWORD *)result + 15) + 2 * (v40 / v6);
    v43 = *(_QWORD *)(result + 36);
    v44 = v14[1];
    result = (unsigned __int8 *)(*v14 + v17 * v12 + v43);
    v45 = v14[2];
    _ZF = v45 == 0;
    v47 = (char *)(v45 + v18 * v12 + v43);
    if (_ZF)
      v48 = 0;
    else
      v48 = v47;
    v49 = *v41 + v42 * v19 + 4 * v39;
    v50 = *(unsigned __int8 *)(v13 + 161);
    v51 = *(unsigned __int8 *)(v13 + 160);
    v206 = v19;
    v207 = v16;
    v52 = *(unsigned __int8 *)(v13 + 159);
    v53 = *(unsigned __int8 *)(v13 + 158);
    v54 = v44 + v16 * (v12 / 2) + v43;
    v216 = (float)LODWORD(a5);
    v217 = v21;
    v215 = v23;
    do
    {
      v55 = v49 + v19;
      v56 = v18;
      v57 = &v48[v18];
      v58 = v17;
      v59 = &result[v17];
      if (v10)
      {
        v60 = 0;
        v61 = v55;
        v62 = v59;
        v63 = v57;
        do
        {
          LOBYTE(_S1) = *(_BYTE *)(v54 + v60 + 1);
          v64 = (float)LODWORD(_S1) - v22;
          v65 = LODWORD(v214);
          v66 = v214 * v64;
          LOBYTE(v65) = *result;
          v67 = v23 * (float)((float)v65 - v21);
          v68 = (float)(v214 * v64) + v67;
          v69 = 8191.0;
          if (v68 <= 8191.0)
          {
            v69 = (float)(v214 * v64) + v67;
            if (v68 < 0.0)
              v69 = 0.0;
          }
          LOBYTE(v68) = *(_BYTE *)(v54 + v60);
          v70 = (float)LODWORD(v68) - v22;
          v71 = (float)(v212 * v64) + (float)(v70 * v213);
          v72 = 8191.0;
          if ((float)(v67 + v71) <= 8191.0)
          {
            v72 = v67 + v71;
            if ((float)(v67 + v71) < 0.0)
              v72 = 0.0;
          }
          v73 = v211 * v70;
          v74 = (float)(v211 * v70) + v67;
          v75 = 8191.0;
          if (v74 <= 8191.0)
          {
            v75 = v74;
            if (v74 < 0.0)
              v75 = 0.0;
          }
          LOBYTE(v74) = result[1];
          v76 = v23 * (float)((float)LODWORD(v74) - v21);
          v77 = 8191.0;
          if ((float)(v66 + v76) <= 8191.0)
          {
            v77 = v66 + v76;
            if ((float)(v66 + v76) < 0.0)
              v77 = 0.0;
          }
          v78 = 8191.0;
          if ((float)(v71 + v76) <= 8191.0)
          {
            v78 = v71 + v76;
            if ((float)(v71 + v76) < 0.0)
              v78 = 0.0;
          }
          v79 = v73 + v76;
          v80 = 8191.0;
          if (v79 <= 8191.0)
          {
            v80 = v79;
            if (v79 < 0.0)
              v80 = 0.0;
          }
          LOBYTE(v79) = *v62;
          v81 = (float)LODWORD(v79) - v21;
          v82 = v23 * v81;
          v83 = 8191.0;
          if ((float)(v66 + (float)(v23 * v81)) <= 8191.0)
          {
            v83 = v66 + (float)(v23 * v81);
            if (v83 < 0.0)
              v83 = 0.0;
          }
          v84 = 8191.0;
          if ((float)(v71 + v82) <= 8191.0)
          {
            v84 = v71 + v82;
            if ((float)(v71 + v82) < 0.0)
              v84 = 0.0;
          }
          v85 = v73 + v82;
          v86 = 8191.0;
          if (v85 <= 8191.0)
          {
            v86 = v85;
            if (v85 < 0.0)
              v86 = 0.0;
          }
          LOBYTE(v81) = v62[1];
          v87 = v23 * (float)((float)LODWORD(v81) - v21);
          v88 = 8191.0;
          if ((float)(v66 + v87) <= 8191.0)
          {
            v88 = v66 + v87;
            if ((float)(v66 + v87) < 0.0)
              v88 = 0.0;
          }
          v89 = v71 + v87;
          v90 = (float)(v71 + v87) <= 8191.0;
          v91 = 8191.0;
          if (v90)
          {
            v91 = v89;
            if (v89 < 0.0)
              v91 = 0.0;
          }
          v92 = v73 + v87;
          v93 = 8191.0;
          if (v92 <= 8191.0)
          {
            v93 = v92;
            if (v92 < 0.0)
              v93 = 0.0;
          }
          if (v48)
          {
            v94 = *v48;
            v95 = v48[1];
            v48 += 2;
            v96 = *v63;
            v97 = v63[1];
            v63 += 2;
          }
          else
          {
            v94 = 0;
            v95 = 0;
            v96 = 0;
            v97 = 0;
          }
          _S1 = fmaxf(v69, 0.0);
          v99 = 8191.0;
          LOWORD(_S1) = *(_WORD *)(v32 + 2 * llroundf(fminf(_S1, 8191.0)));
          __asm { FCVT            S12, H1 }
          LOWORD(_S1) = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm { FCVT            S31, H1 }
          LOWORD(_S1) = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          __asm { FCVT            S8, H1 }
          _H3 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          _H16 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          _H17 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          _H7 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          _H9 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          v115 = fmaxf(_S12, fmaxf(_S31, _S8));
          v116 = (float)((float)((float)(v36 * _S31) + (float)(v35 * _S12)) + (float)(v37 * _S8)) + (float)(v38 * v115);
          v117 = 8191.0;
          if (v116 <= 8191.0)
          {
            v117 = (float)((float)((float)(v36 * _S31) + (float)(v35 * _S12)) + (float)(v37 * _S8))
                 + (float)(v38 * v115);
            if (v116 < 0.0)
              v117 = 0.0;
          }
          __asm
          {
            FCVT            S4, H3
            FCVT            S5, H16
            FCVT            S6, H17
          }
          _H13 = *(_WORD *)(v33 + 2 * llroundf(v117));
          v122 = (float)((float)((float)(v36 * _S5) + (float)(v35 * _S4)) + (float)(v37 * _S6))
               + (float)(v38 * fmaxf(_S4, fmaxf(_S5, _S6)));
          v123 = 8191.0;
          if (v122 <= 8191.0)
          {
            v123 = v122;
            if (v122 < 0.0)
              v123 = 0.0;
          }
          __asm
          {
            FCVT            S7, H7
            FCVT            S2, H2
            FCVT            S1, H1
          }
          _H3 = *(_WORD *)(v33 + 2 * llroundf(v123));
          v128 = fmaxf(_S7, fmaxf(_S2, _S1));
          v129 = (float)((float)((float)(v36 * _S2) + (float)(v35 * _S7)) + (float)(v37 * _S1)) + (float)(v38 * v128);
          v130 = 8191.0;
          if (v129 <= 8191.0)
          {
            v130 = (float)((float)((float)(v36 * _S2) + (float)(v35 * _S7)) + (float)(v37 * _S1)) + (float)(v38 * v128);
            if (v129 < 0.0)
              v130 = 0.0;
          }
          __asm
          {
            FCVT            S16, H9
            FCVT            S17, H10
            FCVT            S9, H11
          }
          _H10 = *(_WORD *)(v33 + 2 * llroundf(v130));
          v135 = fmaxf(_S16, fmaxf(_S17, _S9));
          v136 = (float)((float)((float)(v36 * _S17) + (float)(v35 * _S16)) + (float)(v37 * _S9)) + (float)(v38 * v135);
          if (v136 <= 8191.0)
          {
            v99 = (float)((float)((float)(v36 * _S17) + (float)(v35 * _S16)) + (float)(v37 * _S9)) + (float)(v38 * v135);
            if (v136 < 0.0)
              v99 = 0.0;
          }
          __asm { FCVT            S11, H13 }
          v138 = _S12 * _S11;
          v139 = _S31 * _S11;
          v140 = _S8 * _S11;
          __asm { FCVT            S3, H3 }
          v142 = _S4 * _S3;
          v143 = _S5 * _S3;
          v144 = _S6 * _S3;
          __asm { FCVT            S6, H10 }
          v146 = _S7 * _S6;
          v147 = _S2 * _S6;
          v148 = _S1 * _S6;
          LOWORD(_S6) = *(_WORD *)(v33 + 2 * llroundf(v99));
          __asm { FCVT            S6, H6 }
          v150 = _S16 * _S6;
          v151 = _S17 * _S6;
          v152 = _S9 * _S6;
          v153 = (float)((float)(v209 * v139) + (float)(v138 * v210)) + (float)(v140 * v25);
          v154 = (float)((float)(v27 * v139) + (float)(v138 * v26)) + (float)(v140 * v28);
          v155 = (float)((float)(v30 * v139) + (float)(v138 * v29)) + (float)(v140 * v31);
          v156 = (float)((float)(v209 * v143) + (float)(v142 * v210)) + (float)(v144 * v25);
          v157 = (float)((float)(v27 * v143) + (float)(v142 * v26)) + (float)(v144 * v28);
          v158 = (float)((float)(v30 * v143) + (float)(v142 * v29)) + (float)(v144 * v31);
          v159 = (float)((float)(v209 * v147) + (float)(v146 * v210)) + (float)(v148 * v25);
          v160 = (float)((float)(v27 * v147) + (float)(v146 * v26)) + (float)(v148 * v28);
          v161 = (float)((float)(v30 * v147) + (float)(v146 * v29)) + (float)(v148 * v31);
          v162 = (float)((float)(v209 * v151) + (float)(v150 * v210)) + (float)(v152 * v25);
          v163 = (float)((float)(v27 * v151) + (float)(v150 * v26)) + (float)(v152 * v28);
          v164 = (float)((float)(v30 * v151) + (float)(v150 * v29)) + (float)(v152 * v31);
          _H17 = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(v153, 0.0), 8191.0)));
          _H13 = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(v154, 0.0), 8191.0)));
          _H6 = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(v155, 0.0), 8191.0)));
          _H5 = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(v156, 0.0), 8191.0)));
          _H4 = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(v157, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(v158, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(v159, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(v160, 0.0), 8191.0)));
          _H9 = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(v161, 0.0), 8191.0)));
          _H8 = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(v162, 0.0), 8191.0)));
          _H31 = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(v163, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(v164, 0.0), 8191.0)));
          if (v48)
            v177 = v94;
          else
            v177 = -1;
          if (v48)
            v178 = v95;
          else
            v178 = -1;
          if (v48)
            v179 = v96;
          else
            v179 = -1;
          if (v48)
            v180 = v97;
          else
            v180 = -1;
          __asm { FCVT            S2, H17 }
          v182 = 255.0;
          if (_S2 <= 255.0)
          {
            v182 = _S2;
            if (_S2 < 0.0)
              v182 = 0.0;
          }
          *(_BYTE *)(v49 + v53) = llroundf(v182);
          __asm { FCVT            S2, H13 }
          _S1 = 255.0;
          v22 = v216;
          v21 = v217;
          v23 = v215;
          if (_S2 <= 255.0)
          {
            if (_S2 >= 0.0)
              __asm { FCVT            S1, H13 }
            else
              _S1 = 0.0;
          }
          *(_BYTE *)(v49 + v52) = llroundf(_S1);
          __asm { FCVT            S2, H6 }
          _S1 = 255.0;
          if (_S2 <= 255.0)
          {
            if (_S2 >= 0.0)
              __asm { FCVT            S1, H6 }
            else
              _S1 = 0.0;
          }
          *(_BYTE *)(v49 + v51) = llroundf(_S1);
          *(_BYTE *)(v49 + v50) = v177;
          __asm { FCVT            S2, H5 }
          _S1 = 255.0;
          if (_S2 <= 255.0)
          {
            if (_S2 >= 0.0)
              __asm { FCVT            S1, H5 }
            else
              _S1 = 0.0;
          }
          v189 = v49 + 4;
          *(_BYTE *)(v49 + 4 + v53) = llroundf(_S1);
          __asm { FCVT            S2, H4 }
          _S1 = 255.0;
          if (_S2 <= 255.0)
          {
            if (_S2 >= 0.0)
              __asm { FCVT            S1, H4 }
            else
              _S1 = 0.0;
          }
          *(_BYTE *)(v189 + v52) = llroundf(_S1);
          __asm { FCVT            S2, H12 }
          _S1 = 255.0;
          if (_S2 <= 255.0)
          {
            if (_S2 >= 0.0)
              __asm { FCVT            S1, H12 }
            else
              _S1 = 0.0;
          }
          *(_BYTE *)(v189 + v51) = llroundf(_S1);
          *(_BYTE *)(v189 + v50) = v178;
          __asm { FCVT            S2, H11 }
          _S1 = 255.0;
          if (_S2 <= 255.0)
          {
            if (_S2 >= 0.0)
              __asm { FCVT            S1, H11 }
            else
              _S1 = 0.0;
          }
          *(_BYTE *)(v61 + v53) = llroundf(_S1);
          __asm { FCVT            S2, H10 }
          _S1 = 255.0;
          if (_S2 <= 255.0)
          {
            if (_S2 >= 0.0)
              __asm { FCVT            S1, H10 }
            else
              _S1 = 0.0;
          }
          *(_BYTE *)(v61 + v52) = llroundf(_S1);
          __asm { FCVT            S2, H9 }
          _S1 = 255.0;
          if (_S2 <= 255.0)
          {
            if (_S2 >= 0.0)
              __asm { FCVT            S1, H9 }
            else
              _S1 = 0.0;
          }
          *(_BYTE *)(v61 + v51) = llroundf(_S1);
          *(_BYTE *)(v61 + v50) = v179;
          __asm { FCVT            S2, H8 }
          _S1 = 255.0;
          if (_S2 <= 255.0)
          {
            if (_S2 >= 0.0)
              __asm { FCVT            S1, H8 }
            else
              _S1 = 0.0;
          }
          v202 = v61 + 4;
          *(_BYTE *)(v61 + 4 + v53) = llroundf(_S1);
          __asm { FCVT            S2, H31 }
          _S1 = 255.0;
          if (_S2 <= 255.0)
          {
            if (_S2 >= 0.0)
              __asm { FCVT            S1, H31 }
            else
              _S1 = 0.0;
          }
          *(_BYTE *)(v202 + v52) = llroundf(_S1);
          __asm { FCVT            S2, H30 }
          _S1 = 255.0;
          if (_S2 <= 255.0)
          {
            if (_S2 >= 0.0)
              __asm { FCVT            S1, H30 }
            else
              _S1 = 0.0;
          }
          result += 2;
          v62 += 2;
          *(_BYTE *)(v202 + v51) = llroundf(_S1);
          v49 += 8;
          *(_BYTE *)(v202 + v50) = v180;
          v61 += 8;
          v60 += 2;
        }
        while (v10 > v60);
      }
      result = &v59[v58];
      v17 = v58;
      v54 += v207;
      v18 = v56;
      v48 = &v57[v56];
      v19 = v206;
      v49 = v55 + v206;
      v9 += 2;
    }
    while (v208 > v9);
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Mat_TRC_BGRA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[3];
  v18 = a6[5];
  if ((v14 & 1) != 0)
  {
    ++v18;
    ++v14;
    if ((v11 & 1) != 0)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  v19 = a6[2];
  v20 = a6[4];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9)
    v12 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15)
    v21 = v19;
  else
    v21 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v18;
  if (v12 >= v21)
    v24 = v21;
  else
    v24 = v12;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Mat_TRC_BGRA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_420vf_TRC_Mat_TRC_BGRA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  _BYTE *v55;
  unint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  char *v59;
  unsigned int v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  BOOL v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  char v90;
  char v91;
  char v92;
  char v93;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  char v144;
  char v145;
  char v146;
  char v147;
  float v149;
  uint64_t v155;
  uint64_t v168;
  unint64_t v173;
  float v174;
  float v175;
  float v176;
  float v177;

  v7 = *(_QWORD *)(result + 28);
  v8 = 2 * *result;
  v9 = v7 * a2 / v8;
  v10 = (v7 + v7 * a2) / v8;
  if (2 * v10 != 2 * v9)
  {
    v11 = 0;
    v12 = *(_QWORD *)(result + 20);
    v13 = *(_QWORD *)(result + 44) + 2 * v9;
    v173 = 2 * v10 - 2 * v9;
    v14 = *((_QWORD *)result + 19);
    v15 = (_QWORD *)*((_QWORD *)result + 7);
    v16 = (uint64_t *)*((_QWORD *)result + 8);
    v17 = *v16;
    v18 = v16[1];
    v19 = v16[2];
    v20 = **((_QWORD **)result + 17);
    *(float *)&v21 = (float)*(unsigned int *)(v14 + 128);
    v22 = 8191.0 / *(float *)&v21;
    LOWORD(v21) = *(_WORD *)(v14 + 140);
    v23 = (float)v21;
    LOWORD(a5) = *(_WORD *)(v14 + 142);
    v24 = (float)LODWORD(a5);
    v25 = v22 * *(float *)v14;
    v177 = v22 * *(float *)(v14 + 8);
    v176 = v22 * *(float *)(v14 + 16);
    v174 = v22 * *(float *)(v14 + 28);
    v175 = v22 * *(float *)(v14 + 20);
    v26 = *(float *)(v14 + 72);
    v27 = *(float *)(v14 + 76);
    v28 = *(float *)(v14 + 80);
    v29 = *(float *)(v14 + 84);
    v30 = *(float *)(v14 + 88);
    v31 = *(float *)(v14 + 92);
    v32 = *(float *)(v14 + 96);
    v33 = *(float *)(v14 + 100);
    v34 = *(float *)(v14 + 104);
    v35 = v14 + 164;
    v36 = v14 + 16548;
    v37 = *((_QWORD *)result + 14);
    v38 = *((_QWORD *)result + 13) * a2;
    v39 = (_QWORD *)*((_QWORD *)result + 16);
    v40 = *((_QWORD *)result + 15) + 2 * (v38 / v8);
    v41 = *(_QWORD *)(result + 36);
    v42 = (_BYTE *)(*v15 + v17 * v13 + v41);
    v43 = v15[2];
    _ZF = v43 == 0;
    v45 = (char *)(v43 + v19 * v13 + v41);
    if (_ZF)
      v46 = 0;
    else
      v46 = v45;
    v47 = *v39 + v40 * v20 + 4 * v37;
    result = (unsigned __int8 *)*(unsigned __int8 *)(v14 + 161);
    v48 = *(unsigned __int8 *)(v14 + 160);
    if (v13 >= 0)
      v49 = v13;
    else
      v49 = v13 + 1;
    v50 = *(unsigned __int8 *)(v14 + 159);
    v51 = *(unsigned __int8 *)(v14 + 158);
    v52 = v15[1] + v18 * (v49 >> 1) + v41;
    do
    {
      v53 = v47 + v20;
      v54 = &v46[v19];
      v55 = &v42[v17];
      if (v12)
      {
        v56 = 0;
        v57 = v47 + v20;
        v58 = &v42[v17];
        v59 = &v46[v19];
        do
        {
          LOBYTE(_S26) = *(_BYTE *)(v52 + v56 + 1);
          *(float *)&v60 = (float)LODWORD(_S26);
          v61 = *(float *)&v60 - v24;
          v62 = v177 * (float)(*(float *)&v60 - v24);
          LOBYTE(v60) = *v42;
          v63 = v25 * (float)((float)v60 - v23);
          v64 = v62 + v63;
          v65 = 8191.0;
          if ((float)(v62 + v63) <= 8191.0)
          {
            v65 = v62 + v63;
            if (v64 < 0.0)
              v65 = 0.0;
          }
          LOBYTE(v64) = *(_BYTE *)(v52 + v56);
          v66 = (float)LODWORD(v64) - v24;
          v67 = (float)(v175 * v61) + (float)(v66 * v176);
          v68 = 8191.0;
          if ((float)(v63 + v67) <= 8191.0)
          {
            v68 = v63 + v67;
            if ((float)(v63 + v67) < 0.0)
              v68 = 0.0;
          }
          v69 = v174 * v66;
          v70 = (float)(v174 * v66) + v63;
          v71 = 8191.0;
          if (v70 <= 8191.0)
          {
            v71 = v70;
            if (v70 < 0.0)
              v71 = 0.0;
          }
          LOBYTE(v70) = v42[1];
          v72 = v25 * (float)((float)LODWORD(v70) - v23);
          v73 = 8191.0;
          if ((float)(v62 + v72) <= 8191.0)
          {
            v73 = v62 + v72;
            if ((float)(v62 + v72) < 0.0)
              v73 = 0.0;
          }
          v74 = 8191.0;
          if ((float)(v67 + v72) <= 8191.0)
          {
            v74 = v67 + v72;
            if ((float)(v67 + v72) < 0.0)
              v74 = 0.0;
          }
          v75 = v69 + v72;
          v76 = (float)(v69 + v72) <= 8191.0;
          v77 = 8191.0;
          if (v76)
          {
            v77 = v75;
            if (v75 < 0.0)
              v77 = 0.0;
          }
          LOBYTE(v75) = *v58;
          v78 = v25 * (float)((float)LODWORD(v75) - v23);
          v79 = 8191.0;
          if ((float)(v62 + v78) <= 8191.0)
          {
            v79 = v62 + v78;
            if ((float)(v62 + v78) < 0.0)
              v79 = 0.0;
          }
          v80 = 8191.0;
          if ((float)(v67 + v78) <= 8191.0)
          {
            v80 = v67 + v78;
            if ((float)(v67 + v78) < 0.0)
              v80 = 0.0;
          }
          v81 = v69 + v78;
          v76 = (float)(v69 + v78) <= 8191.0;
          v82 = 8191.0;
          if (v76)
          {
            v82 = v81;
            if (v81 < 0.0)
              v82 = 0.0;
          }
          LOBYTE(_S14) = v58[1];
          v83 = v25 * (float)((float)LODWORD(_S14) - v23);
          v84 = v62 + v83;
          v76 = (float)(v62 + v83) <= 8191.0;
          v85 = 8191.0;
          if (v76)
          {
            v85 = v84;
            if (v84 < 0.0)
              v85 = 0.0;
          }
          v86 = v67 + v83;
          v76 = (float)(v67 + v83) <= 8191.0;
          v87 = 8191.0;
          if (v76)
          {
            v87 = v86;
            if (v86 < 0.0)
              v87 = 0.0;
          }
          v88 = v69 + v83;
          v89 = 8191.0;
          if (v88 <= 8191.0)
          {
            v89 = v88;
            if (v88 < 0.0)
              v89 = 0.0;
          }
          if (v46)
          {
            v90 = *v46;
            v91 = v46[1];
            v46 += 2;
            v92 = *v59;
            v93 = v59[1];
            v59 += 2;
          }
          else
          {
            v90 = 0;
            v91 = 0;
            v92 = 0;
            v93 = 0;
          }
          _H26 = *(_WORD *)(v35 + 2 * llroundf(fminf(fmaxf(v65, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)(v35 + 2 * llroundf(fminf(fmaxf(v68, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          _H28 = *(_WORD *)(v35 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          __asm { FCVT            S28, H28 }
          _H29 = *(_WORD *)(v35 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          _H30 = *(_WORD *)(v35 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          _H31 = *(_WORD *)(v35 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          __asm
          {
            FCVT            S30, H30
            FCVT            S31, H31
          }
          _H9 = *(_WORD *)(v35 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          __asm { FCVT            S9, H9 }
          _H12 = *(_WORD *)(v35 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          _H13 = *(_WORD *)(v35 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          __asm { FCVT            S13, H13 }
          _H8 = *(_WORD *)(v35 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          __asm { FCVT            S8, H8 }
          _H10 = *(_WORD *)(v35 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v35 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          __asm
          {
            FCVT            S10, H10
            FCVT            S11, H11
          }
          v121 = (float)((float)(v27 * _S27) + (float)(_S26 * v26)) + (float)(_S28 * v28);
          v122 = (float)((float)(v30 * _S27) + (float)(_S26 * v29)) + (float)(_S28 * v31);
          v123 = (float)((float)(v33 * _S27) + (float)(_S26 * v32)) + (float)(_S28 * v34);
          v124 = (float)((float)(v27 * _S30) + (float)(_S29 * v26)) + (float)(_S31 * v28);
          v125 = (float)((float)(v30 * _S30) + (float)(_S29 * v29)) + (float)(_S31 * v31);
          v126 = (float)((float)(v33 * _S30) + (float)(_S29 * v32)) + (float)(_S31 * v34);
          v127 = (float)((float)(v27 * _S12) + (float)(_S9 * v26)) + (float)(_S13 * v28);
          v128 = (float)((float)(v30 * _S12) + (float)(_S9 * v29)) + (float)(_S13 * v31);
          v129 = (float)((float)(v33 * _S12) + (float)(_S9 * v32)) + (float)(_S13 * v34);
          v130 = (float)((float)(v27 * _S10) + (float)(_S8 * v26)) + (float)(_S11 * v28);
          v131 = (float)((float)(v30 * _S10) + (float)(_S8 * v29)) + (float)(_S11 * v31);
          v132 = (float)((float)(v33 * _S10) + (float)(_S8 * v32)) + (float)(_S11 * v34);
          _H14 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v121, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v122, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v123, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v124, 0.0), 8191.0)));
          _H9 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v125, 0.0), 8191.0)));
          _H8 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v126, 0.0), 8191.0)));
          _S26 = fminf(fmaxf(v127, 0.0), 8191.0);
          _H31 = *(_WORD *)(v36 + 2 * llroundf(_S26));
          _H30 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v128, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v129, 0.0), 8191.0)));
          _H28 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v130, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v131, 0.0), 8191.0)));
          LOWORD(_S26) = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v132, 0.0), 8191.0)));
          if (v46)
            v144 = v90;
          else
            v144 = -1;
          if (v46)
            v145 = v91;
          else
            v145 = -1;
          if (v46)
            v146 = v92;
          else
            v146 = -1;
          if (v46)
            v147 = v93;
          else
            v147 = -1;
          __asm { FCVT            S14, H14 }
          v149 = 255.0;
          if (_S14 <= 255.0)
          {
            v149 = _S14;
            if (_S14 < 0.0)
              v149 = 0.0;
          }
          *(_BYTE *)(v47 + v51) = llroundf(v149);
          __asm { FCVT            S14, H12 }
          _S13 = 255.0;
          if (_S14 <= 255.0)
          {
            if (_S14 >= 0.0)
              __asm { FCVT            S13, H12 }
            else
              _S13 = 0.0;
          }
          *(_BYTE *)(v47 + v50) = llroundf(_S13);
          __asm { FCVT            S13, H11 }
          _S12 = 255.0;
          if (_S13 <= 255.0)
          {
            if (_S13 >= 0.0)
              __asm { FCVT            S12, H11 }
            else
              _S12 = 0.0;
          }
          *(_BYTE *)(v47 + v48) = llroundf(_S12);
          result[v47] = v144;
          __asm { FCVT            S12, H10 }
          _S11 = 255.0;
          if (_S12 <= 255.0)
          {
            if (_S12 >= 0.0)
              __asm { FCVT            S11, H10 }
            else
              _S11 = 0.0;
          }
          v155 = v47 + 4;
          *(_BYTE *)(v47 + 4 + v51) = llroundf(_S11);
          __asm { FCVT            S11, H9 }
          _S10 = 255.0;
          if (_S11 <= 255.0)
          {
            if (_S11 >= 0.0)
              __asm { FCVT            S10, H9 }
            else
              _S10 = 0.0;
          }
          *(_BYTE *)(v155 + v50) = llroundf(_S10);
          __asm { FCVT            S10, H8 }
          _S9 = 255.0;
          if (_S10 <= 255.0)
          {
            if (_S10 >= 0.0)
              __asm { FCVT            S9, H8 }
            else
              _S9 = 0.0;
          }
          *(_BYTE *)(v155 + v48) = llroundf(_S9);
          result[v155] = v145;
          __asm { FCVT            S9, H31 }
          _S8 = 255.0;
          if (_S9 <= 255.0)
          {
            if (_S9 >= 0.0)
              __asm { FCVT            S8, H31 }
            else
              _S8 = 0.0;
          }
          *(_BYTE *)(v57 + v51) = llroundf(_S8);
          __asm { FCVT            S8, H30 }
          _S31 = 255.0;
          if (_S8 <= 255.0)
          {
            if (_S8 >= 0.0)
              __asm { FCVT            S31, H30 }
            else
              _S31 = 0.0;
          }
          *(_BYTE *)(v57 + v50) = llroundf(_S31);
          __asm { FCVT            S31, H29 }
          _S30 = 255.0;
          if (_S31 <= 255.0)
          {
            if (_S31 >= 0.0)
              __asm { FCVT            S30, H29 }
            else
              _S30 = 0.0;
          }
          *(_BYTE *)(v57 + v48) = llroundf(_S30);
          result[v57] = v146;
          __asm { FCVT            S30, H28 }
          _S29 = 255.0;
          if (_S30 <= 255.0)
          {
            if (_S30 >= 0.0)
              __asm { FCVT            S29, H28 }
            else
              _S29 = 0.0;
          }
          v168 = v57 + 4;
          *(_BYTE *)(v57 + 4 + v51) = llroundf(_S29);
          __asm { FCVT            S29, H27 }
          _S28 = 255.0;
          if (_S29 <= 255.0)
          {
            if (_S29 >= 0.0)
              __asm { FCVT            S28, H27 }
            else
              _S28 = 0.0;
          }
          *(_BYTE *)(v168 + v50) = llroundf(_S28);
          __asm { FCVT            S28, H26 }
          _S27 = 255.0;
          if (_S28 <= 255.0)
          {
            if (_S28 >= 0.0)
              __asm { FCVT            S27, H26 }
            else
              _S27 = 0.0;
          }
          v42 += 2;
          v58 += 2;
          *(_BYTE *)(v168 + v48) = llroundf(_S27);
          v47 += 8;
          result[v168] = v147;
          v57 += 8;
          v56 += 2;
        }
        while (v12 > v56);
      }
      v42 = &v55[v17];
      v52 += v18;
      v46 = &v54[v19];
      v47 = v53 + v20;
      v11 += 2;
    }
    while (v173 > v11);
  }
  return result;
}

uint64_t vt_Copy_420vf_rgb_BGRA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[3];
  v18 = a6[5];
  if ((v14 & 1) != 0)
  {
    ++v18;
    ++v14;
    if ((v11 & 1) != 0)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  v19 = a6[2];
  v20 = a6[4];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9)
    v12 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15)
    v21 = v19;
  else
    v21 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v18;
  if (v12 >= v21)
    v24 = v21;
  else
    v24 = v12;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_rgb_BGRA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_420vf_rgb_BGRA_GCD(unsigned __int8 *result, uint64_t a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  BOOL v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  _BYTE *v52;
  unint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  char *v56;
  char v57;
  char v58;
  char v59;
  char v60;
  float v61;
  float v62;
  float v63;
  float v64;
  char v65;
  char v66;
  char v67;
  char v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  uint64_t v77;
  float v78;
  unsigned __int8 v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  unsigned __int8 v85;
  float v86;
  float v87;
  float v88;
  float v89;
  uint64_t v90;
  float v91;

  v6 = *(_QWORD *)(result + 28);
  v7 = 2 * *result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (2 * v9 != 2 * v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)(result + 20);
    v12 = *(_QWORD *)(result + 44) + 2 * v8;
    v13 = 2 * v9 - 2 * v8;
    v14 = *((_QWORD *)result + 19);
    v16 = (_QWORD *)*((_QWORD *)result + 7);
    v15 = (uint64_t *)*((_QWORD *)result + 8);
    v17 = *v15;
    v18 = v15[1];
    v19 = v15[2];
    v20 = **((_QWORD **)result + 17);
    *(float *)&v21 = (float)*(unsigned int *)(v14 + 128);
    *(float *)&v22 = (float)*(unsigned int *)(v14 + 136);
    v23 = *(float *)&v22 / *(float *)&v21;
    LOWORD(v21) = *(_WORD *)(v14 + 140);
    v24 = (float)v21;
    LOWORD(v22) = *(_WORD *)(v14 + 142);
    v25 = (float)v22;
    v26 = v23 * *(float *)v14;
    v27 = v23 * *(float *)(v14 + 8);
    v28 = v23 * *(float *)(v14 + 16);
    v29 = v23 * *(float *)(v14 + 20);
    v30 = *(float *)(v14 + 28);
    v31 = v23 * v30;
    v32 = *((_QWORD *)result + 14);
    v33 = *((_QWORD *)result + 13) * a2;
    v34 = (_QWORD *)*((_QWORD *)result + 16);
    v35 = *((_QWORD *)result + 15) + 2 * (v33 / v7);
    v36 = *(_QWORD *)(result + 36);
    v37 = v16[1];
    v38 = (_BYTE *)(*v16 + v17 * v12 + v36);
    v39 = v16[2];
    v40 = v39 == 0;
    v41 = (char *)(v39 + v19 * v12 + v36);
    if (v40)
      v42 = 0;
    else
      v42 = v41;
    v43 = *v34 + v35 * v20 + 4 * v32;
    v44 = *(unsigned __int8 *)(v14 + 161);
    v45 = *(unsigned __int8 *)(v14 + 160);
    if (v12 >= 0)
      v46 = v12;
    else
      v46 = v12 + 1;
    v47 = v37 + v18 * (v46 >> 1);
    result = (unsigned __int8 *)*(unsigned __int8 *)(v14 + 159);
    v48 = *(unsigned __int8 *)(v14 + 158);
    v49 = v47 + v36;
    do
    {
      v50 = v43 + v20;
      v51 = &v42[v19];
      v52 = &v38[v17];
      if (v11)
      {
        v53 = 0;
        v54 = v43 + v20;
        v55 = &v38[v17];
        v56 = &v42[v19];
        do
        {
          if (v42)
          {
            v57 = *v42;
            v58 = v42[1];
            v42 += 2;
            v59 = *v56;
            v60 = v56[1];
            v56 += 2;
          }
          else
          {
            v57 = 0;
            v58 = 0;
            v59 = 0;
            v60 = 0;
          }
          LOBYTE(v30) = *(_BYTE *)(v49 + v53 + 1);
          v61 = (float)LODWORD(v30) - v25;
          v62 = v27 * v61;
          LOBYTE(v2) = *v38;
          v63 = v26 * (float)((float)LODWORD(v2) - v24);
          v64 = (float)(v27 * v61) + v63;
          if (v42)
            v65 = v57;
          else
            v65 = -1;
          if (v42)
            v66 = v58;
          else
            v66 = -1;
          if (v42)
            v67 = v59;
          else
            v67 = -1;
          if (v42)
            v68 = v60;
          else
            v68 = -1;
          v69 = 255.0;
          if (v64 <= 255.0)
          {
            v69 = (float)(v27 * v61) + v63;
            if (v64 < 0.0)
              v69 = 0.0;
          }
          LOBYTE(v64) = *(_BYTE *)(v49 + v53);
          v70 = (float)LODWORD(v64) - v25;
          v71 = (float)(v29 * v61) + (float)(v70 * v28);
          LOBYTE(v5) = v38[1];
          LOBYTE(v4) = *v55;
          LOBYTE(v3) = v55[1];
          *(_BYTE *)(v43 + v48) = llroundf(v69);
          v72 = 255.0;
          if ((float)(v63 + v71) <= 255.0)
          {
            v72 = v63 + v71;
            if ((float)(v63 + v71) < 0.0)
              v72 = 0.0;
          }
          v2 = v31 * v70;
          v73 = v2 + v63;
          result[v43] = llroundf(v72);
          v74 = 255.0;
          if (v73 <= 255.0)
          {
            v74 = v73;
            if (v73 < 0.0)
              v74 = 0.0;
          }
          v75 = v26 * (float)((float)LODWORD(v5) - v24);
          *(_BYTE *)(v43 + v45) = llroundf(v74);
          *(_BYTE *)(v43 + v44) = v65;
          v76 = 255.0;
          if ((float)(v62 + v75) <= 255.0)
          {
            v76 = v62 + v75;
            if ((float)(v62 + v75) < 0.0)
              v76 = 0.0;
          }
          v77 = v43 + 4;
          *(_BYTE *)(v43 + 4 + v48) = llroundf(v76);
          v78 = 255.0;
          if ((float)(v71 + v75) <= 255.0)
          {
            v78 = v71 + v75;
            if ((float)(v71 + v75) < 0.0)
              v78 = 0.0;
          }
          v79 = llroundf(v78);
          v80 = v2 + v75;
          result[v77] = v79;
          v81 = 255.0;
          if (v80 <= 255.0)
          {
            v81 = v80;
            if (v80 < 0.0)
              v81 = 0.0;
          }
          v82 = v26 * (float)((float)LODWORD(v4) - v24);
          *(_BYTE *)(v77 + v45) = llroundf(v81);
          *(_BYTE *)(v77 + v44) = v66;
          v83 = 255.0;
          if ((float)(v62 + v82) <= 255.0)
          {
            v83 = v62 + v82;
            if ((float)(v62 + v82) < 0.0)
              v83 = 0.0;
          }
          v5 = v71 + v82;
          *(_BYTE *)(v54 + v48) = llroundf(v83);
          v84 = 255.0;
          if ((float)(v71 + v82) <= 255.0)
          {
            v84 = v71 + v82;
            if (v5 < 0.0)
              v84 = 0.0;
          }
          v85 = llroundf(v84);
          v86 = v2 + v82;
          result[v54] = v85;
          v87 = 255.0;
          if (v86 <= 255.0)
          {
            v87 = v86;
            if (v86 < 0.0)
              v87 = 0.0;
          }
          v3 = v26 * (float)((float)LODWORD(v3) - v24);
          *(_BYTE *)(v54 + v45) = llroundf(v87);
          v4 = v62 + v3;
          *(_BYTE *)(v54 + v44) = v67;
          v88 = 255.0;
          if (v4 <= 255.0)
          {
            v88 = v4;
            if (v4 < 0.0)
              v88 = 0.0;
          }
          v89 = v71 + v3;
          v90 = v54 + 4;
          *(_BYTE *)(v54 + 4 + v48) = llroundf(v88);
          v91 = 255.0;
          if (v89 <= 255.0)
          {
            v91 = v89;
            if (v89 < 0.0)
              v91 = 0.0;
          }
          result[v90] = llroundf(v91);
          v30 = 255.0;
          if ((float)(v2 + v3) <= 255.0)
          {
            v30 = v2 + v3;
            if ((float)(v2 + v3) < 0.0)
              v30 = 0.0;
          }
          v38 += 2;
          v55 += 2;
          *(_BYTE *)(v90 + v45) = llroundf(v30);
          v43 += 8;
          *(_BYTE *)(v90 + v44) = v68;
          v54 += 8;
          v53 += 2;
        }
        while (v11 > v53);
      }
      v38 = &v52[v17];
      v49 += v18;
      v42 = &v51[v19];
      v43 = v50 + v20;
      v10 += 2;
    }
    while (v13 > v10);
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Tone_Mat_TRC_l10r(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[3];
  v18 = a6[5];
  if ((v14 & 1) != 0)
  {
    ++v18;
    ++v14;
    if ((v11 & 1) != 0)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  v19 = a6[2];
  v20 = a6[4];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9)
    v12 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15)
    v21 = v19;
  else
    v21 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v18;
  if (v12 >= v21)
    v24 = v21;
  else
    v24 = v12;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Tone_Mat_TRC_l10r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_420vf_TRC_Tone_Mat_TRC_l10r_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  unsigned int v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 *v41;
  unsigned int *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  unint64_t v48;
  unsigned int *v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  float v52;
  unsigned int v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  BOOL v79;
  float v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  float v85;
  float v104;
  float v105;
  float v106;
  float v111;
  float v112;
  float v117;
  float v118;
  float v123;
  float v124;
  float v126;
  float v127;
  float v128;
  float v130;
  float v131;
  float v132;
  float v134;
  float v135;
  float v136;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v166;
  unsigned int v167;
  float v168;
  unsigned int v169;
  float v170;
  unsigned int v171;
  float v172;
  unsigned int v173;
  float v175;
  float v176;
  float v177;
  float v179;
  float v180;
  float v182;
  float v183;
  unsigned int v185;
  unsigned int v186;
  unsigned int v187;
  float v188;
  unsigned int v189;
  float v190;
  float v191;
  float v193;
  float v194;
  float v196;
  float v197;
  unsigned int v199;
  unsigned int v200;
  float v201;
  unsigned int v202;
  float v203;
  float v205;
  float v206;
  float v208;
  float v209;
  unsigned int v211;
  unsigned int v212;
  float v213;
  unsigned int v214;
  float v215;
  float v217;
  float v218;
  float v220;
  unsigned int v221;
  unsigned int v222;
  unsigned int v223;
  uint64_t v224;
  unint64_t v225;
  float v226;
  float v227;
  float v228;
  float v229;
  float v230;
  float v231;
  float v232;
  float v233;
  float v234;
  float v235;
  float v236;
  float v237;
  float v238;
  float v239;
  float v240;
  float v241;
  float v242;

  v5 = *(_QWORD *)(result + 28);
  v6 = 2 * *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = *(_QWORD *)(result + 44) + 2 * v7;
    v225 = 2 * v8 - 2 * v7;
    v12 = *((_QWORD *)result + 19);
    v13 = (_QWORD *)*((_QWORD *)result + 7);
    v14 = (uint64_t *)*((_QWORD *)result + 8);
    v16 = *v14;
    v15 = v14[1];
    v17 = v14[2];
    v18 = **((_QWORD **)result + 17);
    v19 = 8191.0 / (float)*(unsigned int *)(v12 + 128);
    LOWORD(a5) = *(_WORD *)(v12 + 140);
    v20 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v12 + 142);
    v21 = (float)LODWORD(a5);
    v22 = v19 * *(float *)v12;
    v241 = v19 * *(float *)(v12 + 16);
    v242 = v19 * *(float *)(v12 + 8);
    v23 = v19 * *(float *)(v12 + 20);
    *(float *)&v24 = v19 * *(float *)(v12 + 28);
    v239 = *(float *)&v24;
    v240 = v23;
    LOWORD(v24) = *(_WORD *)(v12 + 144);
    v25 = (float)v24;
    v237 = *(float *)(v12 + 76);
    v238 = *(float *)(v12 + 72);
    v235 = *(float *)(v12 + 84);
    v236 = *(float *)(v12 + 80);
    v233 = *(float *)(v12 + 92);
    v234 = *(float *)(v12 + 88);
    v231 = *(float *)(v12 + 100);
    v232 = *(float *)(v12 + 96);
    v26 = v12 + 164;
    v27 = v12 + 16548;
    v28 = v12 + 32932;
    v29 = *(float *)(v12 + 104);
    v30 = *(float *)(v12 + 108);
    v230 = v29;
    v31 = *(float *)(v12 + 112);
    v32 = *(float *)(v12 + 116);
    v33 = *(float *)(v12 + 120);
    v34 = *((_QWORD *)result + 14);
    v35 = (_QWORD *)*((_QWORD *)result + 16);
    v36 = *((_QWORD *)result + 15) + 2 * (*((_QWORD *)result + 13) * a2 / v6);
    v37 = *(_QWORD *)(result + 36);
    v38 = v13[1];
    result = (unsigned __int8 *)(*v13 + v16 * v11 + v37);
    v39 = v13[2];
    _ZF = v39 == 0;
    v41 = (unsigned __int8 *)(v39 + v17 * v11 + v37);
    if (_ZF)
      v41 = 0;
    v42 = (unsigned int *)(*v35 + v36 * v18 + 16 * v34);
    if (v11 >= 0)
      v43 = v11;
    else
      v43 = v11 + 1;
    v224 = v15;
    v44 = v38 + v15 * (v43 >> 1) + v37;
    v228 = (float)LODWORD(a5);
    v229 = v20;
    v226 = v31;
    v227 = v22;
    do
    {
      v45 = (char *)v42 + v18;
      v46 = &v41[v17];
      v47 = &result[v16];
      if (v10)
      {
        v48 = 0;
        v49 = (unsigned int *)((char *)v42 + v18);
        v50 = &result[v16];
        v51 = &v41[v17];
        do
        {
          LOBYTE(v29) = *(_BYTE *)(v44 + v48 + 1);
          v52 = (float)LODWORD(v29) - v21;
          v53 = LODWORD(v242);
          v54 = v242 * v52;
          LOBYTE(v53) = *result;
          v55 = v22 * (float)((float)v53 - v20);
          v56 = (float)(v242 * v52) + v55;
          v57 = 8191.0;
          if (v56 <= 8191.0)
          {
            v57 = (float)(v242 * v52) + v55;
            if (v56 < 0.0)
              v57 = 0.0;
          }
          LOBYTE(v56) = *(_BYTE *)(v44 + v48);
          v58 = (float)LODWORD(v56) - v21;
          v59 = (float)(v240 * v52) + (float)(v58 * v241);
          v60 = 8191.0;
          if ((float)(v55 + v59) <= 8191.0)
          {
            v60 = v55 + v59;
            if ((float)(v55 + v59) < 0.0)
              v60 = 0.0;
          }
          v61 = v239 * v58;
          v62 = (float)(v239 * v58) + v55;
          v63 = 8191.0;
          if (v62 <= 8191.0)
          {
            v63 = v62;
            if (v62 < 0.0)
              v63 = 0.0;
          }
          LOBYTE(v62) = result[1];
          v64 = v22 * (float)((float)LODWORD(v62) - v20);
          v65 = 8191.0;
          if ((float)(v54 + v64) <= 8191.0)
          {
            v65 = v54 + v64;
            if ((float)(v54 + v64) < 0.0)
              v65 = 0.0;
          }
          v66 = 8191.0;
          if ((float)(v59 + v64) <= 8191.0)
          {
            v66 = v59 + v64;
            if ((float)(v59 + v64) < 0.0)
              v66 = 0.0;
          }
          v67 = v61 + v64;
          v68 = 8191.0;
          if (v67 <= 8191.0)
          {
            v68 = v67;
            if (v67 < 0.0)
              v68 = 0.0;
          }
          LOBYTE(v67) = *v50;
          v69 = (float)LODWORD(v67) - v20;
          v70 = v22 * v69;
          v71 = 8191.0;
          if ((float)(v54 + (float)(v22 * v69)) <= 8191.0)
          {
            v71 = v54 + (float)(v22 * v69);
            if (v71 < 0.0)
              v71 = 0.0;
          }
          v72 = 8191.0;
          if ((float)(v59 + v70) <= 8191.0)
          {
            v72 = v59 + v70;
            if ((float)(v59 + v70) < 0.0)
              v72 = 0.0;
          }
          v73 = v61 + v70;
          v74 = 8191.0;
          if (v73 <= 8191.0)
          {
            v74 = v73;
            if (v73 < 0.0)
              v74 = 0.0;
          }
          LOBYTE(v69) = v50[1];
          v75 = v22 * (float)((float)LODWORD(v69) - v20);
          v76 = 8191.0;
          if ((float)(v54 + v75) <= 8191.0)
          {
            v76 = v54 + v75;
            if ((float)(v54 + v75) < 0.0)
              v76 = 0.0;
          }
          v77 = 8191.0;
          if ((float)(v59 + v75) <= 8191.0)
          {
            v77 = v59 + v75;
            if ((float)(v59 + v75) < 0.0)
              v77 = 0.0;
          }
          v78 = v61 + v75;
          v79 = (float)(v61 + v75) <= 8191.0;
          v80 = 8191.0;
          if (v79)
          {
            v80 = v78;
            if (v78 < 0.0)
              v80 = 0.0;
          }
          if (v41)
          {
            v81 = *v41;
            v82 = v41[1];
            v41 += 2;
            v83 = *v51;
            v84 = v51[1];
            v51 += 2;
          }
          else
          {
            v81 = 0;
            v82 = 0;
            v83 = 0;
            v84 = 0;
          }
          v85 = 8191.0;
          _H5 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v57, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H6 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v60, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H17 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v63, 0.0), 8191.0)));
          __asm { FCVT            S9, H17 }
          _H11 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v65, 0.0), 8191.0)));
          _H17 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v66, 0.0), 8191.0)));
          _H18 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v68, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          _H13 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          _H14 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          _H7 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          _H8 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          v104 = fmaxf(_S5, fmaxf(_S6, _S9));
          v105 = (float)((float)((float)(v31 * _S6) + (float)(v30 * _S5)) + (float)(v32 * _S9)) + (float)(v33 * v104);
          v106 = 8191.0;
          if (v105 <= 8191.0)
          {
            v106 = (float)((float)((float)(v31 * _S6) + (float)(v30 * _S5)) + (float)(v32 * _S9)) + (float)(v33 * v104);
            if (v105 < 0.0)
              v106 = 0.0;
          }
          __asm
          {
            FCVT            S1, H11
            FCVT            S2, H17
            FCVT            S3, H18
          }
          _H11 = *(_WORD *)(v27 + 2 * llroundf(v106));
          v111 = (float)((float)((float)(v31 * _S2) + (float)(v30 * _S1)) + (float)(v32 * _S3))
               + (float)(v33 * fmaxf(_S1, fmaxf(_S2, _S3)));
          v112 = 8191.0;
          if (v111 <= 8191.0)
          {
            v112 = v111;
            if (v111 < 0.0)
              v112 = 0.0;
          }
          __asm
          {
            FCVT            S12, H12
            FCVT            S13, H13
            FCVT            S14, H14
          }
          _H17 = *(_WORD *)(v27 + 2 * llroundf(v112));
          v117 = (float)((float)((float)(v31 * _S13) + (float)(v30 * _S12)) + (float)(v32 * _S14))
               + (float)(v33 * fmaxf(_S12, fmaxf(_S13, _S14)));
          v118 = 8191.0;
          if (v117 <= 8191.0)
          {
            v118 = v117;
            if (v117 < 0.0)
              v118 = 0.0;
          }
          __asm
          {
            FCVT            S7, H7
            FCVT            S18, H8
            FCVT            S8, H10
          }
          _H10 = *(_WORD *)(v27 + 2 * llroundf(v118));
          v123 = fmaxf(_S7, fmaxf(_S18, _S8));
          v124 = (float)((float)((float)(v31 * _S18) + (float)(v30 * _S7)) + (float)(v32 * _S8)) + (float)(v33 * v123);
          if (v124 <= 8191.0)
          {
            v85 = (float)((float)((float)(v31 * _S18) + (float)(v30 * _S7)) + (float)(v32 * _S8)) + (float)(v33 * v123);
            if (v124 < 0.0)
              v85 = 0.0;
          }
          __asm { FCVT            S19, H11 }
          v126 = _S5 * _S19;
          v127 = _S6 * _S19;
          v128 = _S9 * _S19;
          __asm { FCVT            S17, H17 }
          v130 = _S1 * _S17;
          v131 = _S2 * _S17;
          v132 = _S3 * _S17;
          __asm { FCVT            S17, H10 }
          v134 = _S12 * _S17;
          v135 = _S13 * _S17;
          v136 = _S14 * _S17;
          _H4 = *(_WORD *)(v27 + 2 * llroundf(v85));
          __asm { FCVT            S4, H4 }
          v139 = _S7 * _S4;
          v140 = _S18 * _S4;
          v141 = _S8 * _S4;
          v142 = (float)((float)(v237 * v127) + (float)(v126 * v238)) + (float)(v128 * v236);
          v143 = (float)((float)(v234 * v127) + (float)(v126 * v235)) + (float)(v128 * v233);
          v144 = (float)((float)(v231 * v127) + (float)(v126 * v232)) + (float)(v128 * v230);
          v145 = (float)((float)(v237 * v131) + (float)(v130 * v238)) + (float)(v132 * v236);
          v146 = (float)((float)(v234 * v131) + (float)(v130 * v235)) + (float)(v132 * v233);
          v147 = (float)((float)(v231 * v131) + (float)(v130 * v232)) + (float)(v132 * v230);
          v148 = (float)((float)(v237 * v135) + (float)(v134 * v238)) + (float)(v136 * v236);
          v149 = (float)((float)(v234 * v135) + (float)(v134 * v235)) + (float)(v136 * v233);
          v150 = (float)((float)(v231 * v135) + (float)(v134 * v232)) + (float)(v136 * v230);
          v151 = (float)((float)(v237 * v140) + (float)(v139 * v238)) + (float)(v141 * v236);
          v152 = (float)((float)(v234 * v140) + (float)(v139 * v235)) + (float)(v141 * v233);
          v153 = (float)((float)(v231 * v140) + (float)(v139 * v232)) + (float)(v141 * v230);
          _H6 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v142, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v143, 0.0), 8191.0)));
          _H3 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v144, 0.0), 8191.0)));
          _H15 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v145, 0.0), 8191.0)));
          _H5 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v146, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v147, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v148, 0.0), 8191.0)));
          _H14 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v149, 0.0), 8191.0)));
          _H4 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v150, 0.0), 8191.0)));
          _H9 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v151, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v152, 0.0), 8191.0)));
          _H13 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v153, 0.0), 8191.0)));
          if (v41)
          {
            v166 = (double)v81 * 3.0 / 255.0;
            v167 = llroundf(v166);
            v168 = (double)v82 * 3.0 / 255.0;
            v169 = llroundf(v168);
            v170 = (double)v83 * 3.0 / 255.0;
            v171 = llroundf(v170);
            v172 = (double)v84 * 3.0 / 255.0;
            v173 = llroundf(v172);
          }
          else
          {
            v171 = 3;
            v167 = 3;
            v169 = 3;
            v173 = 3;
          }
          v21 = v228;
          v20 = v229;
          v31 = v226;
          v22 = v227;
          __asm { FCVT            S3, H3 }
          v175 = v25 + _S3;
          v176 = 1023.0;
          v79 = (float)(v25 + _S3) <= 1023.0;
          v177 = 1023.0;
          if (v79)
          {
            v177 = v175;
            if (v175 < 0.0)
              v177 = 0.0;
          }
          __asm { FCVT            S1, H1 }
          v179 = v25 + _S1;
          v79 = (float)(v25 + _S1) <= 1023.0;
          v180 = 1023.0;
          if (v79)
          {
            v180 = v179;
            if (v179 < 0.0)
              v180 = 0.0;
          }
          __asm { FCVT            S6, H6 }
          v182 = v25 + _S6;
          v79 = (float)(v25 + _S6) <= 1023.0;
          v183 = 1023.0;
          if (v79)
          {
            v183 = v182;
            if (v182 < 0.0)
              v183 = 0.0;
          }
          __asm { FCVT            S2, H2 }
          v185 = llroundf(v177);
          v186 = llroundf(v180);
          v187 = llroundf(v183);
          v188 = (float)v167;
          v189 = v186 << 10;
          if ((float)v167 > 3.0)
            v188 = 3.0;
          *v42 = v189 | v185 | (llroundf(v188) << 30) | (v187 << 20);
          v190 = v25 + _S2;
          v191 = 1023.0;
          if (v190 <= 1023.0)
          {
            v191 = v190;
            if (v190 < 0.0)
              v191 = 0.0;
          }
          __asm { FCVT            S2, H5 }
          v193 = v25 + _S2;
          v79 = (float)(v25 + _S2) <= 1023.0;
          v194 = 1023.0;
          if (v79)
          {
            v194 = v193;
            if (v193 < 0.0)
              v194 = 0.0;
          }
          __asm { FCVT            S3, H15 }
          v196 = v25 + _S3;
          v79 = (float)(v25 + _S3) <= 1023.0;
          v197 = 1023.0;
          if (v79)
          {
            v197 = v196;
            if (v196 < 0.0)
              v197 = 0.0;
          }
          __asm { FCVT            S4, H4 }
          v199 = llroundf(v191);
          v200 = llroundf(v197);
          v201 = (float)v169;
          v202 = llroundf(v194) << 10;
          if ((float)v169 > 3.0)
            v201 = 3.0;
          v42[1] = v202 | v199 | (llroundf(v201) << 30) | (v200 << 20);
          v203 = 1023.0;
          if ((float)(v25 + _S4) <= 1023.0)
          {
            v203 = v25 + _S4;
            if ((float)(v25 + _S4) < 0.0)
              v203 = 0.0;
          }
          __asm { FCVT            S2, H14 }
          v205 = v25 + _S2;
          v79 = (float)(v25 + _S2) <= 1023.0;
          v206 = 1023.0;
          if (v79)
          {
            v206 = v205;
            if (v205 < 0.0)
              v206 = 0.0;
          }
          __asm { FCVT            S3, H12 }
          v208 = v25 + _S3;
          v79 = (float)(v25 + _S3) <= 1023.0;
          v209 = 1023.0;
          if (v79)
          {
            v209 = v208;
            if (v208 < 0.0)
              v209 = 0.0;
          }
          __asm { FCVT            S4, H13 }
          v211 = llroundf(v203);
          v212 = llroundf(v209);
          v213 = (float)v171;
          v214 = llroundf(v206) << 10;
          if ((float)v171 > 3.0)
            v213 = 3.0;
          *v49 = v214 | v211 | (llroundf(v213) << 30) | (v212 << 20);
          v215 = 1023.0;
          if ((float)(v25 + _S4) <= 1023.0)
          {
            v215 = v25 + _S4;
            if ((float)(v25 + _S4) < 0.0)
              v215 = 0.0;
          }
          __asm { FCVT            S2, H10 }
          v217 = v25 + _S2;
          v79 = (float)(v25 + _S2) <= 1023.0;
          v218 = 1023.0;
          if (v79)
          {
            v218 = v217;
            if (v217 < 0.0)
              v218 = 0.0;
          }
          __asm { FCVT            S3, H9 }
          v220 = v25 + _S3;
          if (v220 <= 1023.0)
          {
            v176 = v220;
            if (v220 < 0.0)
              v176 = 0.0;
          }
          result += 2;
          v50 += 2;
          v42 += 2;
          v221 = llroundf(v215);
          v222 = llroundf(v176);
          v29 = (float)v173;
          v223 = llroundf(v218) << 10;
          if ((float)v173 > 3.0)
            v29 = 3.0;
          v49[1] = v223 | v221 | (llroundf(v29) << 30) | (v222 << 20);
          v49 += 2;
          v48 += 2;
        }
        while (v10 > v48);
      }
      result = &v47[v16];
      v44 += v224;
      v41 = &v46[v17];
      v42 = (unsigned int *)&v45[v18];
      v9 += 2;
    }
    while (v225 > v9);
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Mat_TRC_l10r(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[3];
  v18 = a6[5];
  if ((v14 & 1) != 0)
  {
    ++v18;
    ++v14;
    if ((v11 & 1) != 0)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  v19 = a6[2];
  v20 = a6[4];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9)
    v12 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15)
    v21 = v19;
  else
    v21 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v18;
  if (v12 >= v21)
    v24 = v21;
  else
    v24 = v12;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Mat_TRC_l10r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_420vf_TRC_Mat_TRC_l10r_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  unsigned int *v47;
  uint64_t v48;
  char *v49;
  unsigned __int8 *v50;
  _BYTE *v51;
  unint64_t v52;
  unsigned int *v53;
  _BYTE *v54;
  unsigned __int8 *v55;
  unsigned int v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  BOOL v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v142;
  unsigned int v143;
  float v144;
  unsigned int v145;
  float v146;
  unsigned int v147;
  float v148;
  unsigned int v149;
  float v151;
  float v152;
  float v154;
  float v156;
  unsigned int v158;
  unsigned int v159;
  float v160;
  unsigned int v161;
  float v162;
  float v164;
  float v166;
  unsigned int v168;
  unsigned int v169;
  float v170;
  unsigned int v171;
  float v172;
  float v174;
  float v176;
  unsigned int v178;
  unsigned int v179;
  float v180;
  unsigned int v181;
  float v183;
  unsigned int v185;
  unsigned int v186;
  float v187;
  unsigned int v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;

  v5 = *(_QWORD *)(result + 28);
  v6 = 2 * *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = *(_QWORD *)(result + 44) + 2 * v7;
    v12 = 2 * v8 - 2 * v7;
    v13 = *((_QWORD *)result + 19);
    v14 = (_QWORD *)*((_QWORD *)result + 7);
    v15 = (uint64_t *)*((_QWORD *)result + 8);
    v16 = *v15;
    v17 = v15[1];
    v18 = v15[2];
    v19 = **((_QWORD **)result + 17);
    v20 = (float)*(unsigned int *)(v13 + 128);
    v24 = 8191.0 / v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    v21 = (float)LODWORD(v20);
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    v22 = (float)LODWORD(a5);
    v23 = v24 * *(float *)v13;
    v193 = v24 * *(float *)(v13 + 16);
    v194 = v24 * *(float *)(v13 + 8);
    v191 = v24 * *(float *)(v13 + 28);
    v192 = v24 * *(float *)(v13 + 20);
    LOWORD(v24) = *(_WORD *)(v13 + 144);
    v25 = (float)LODWORD(v24);
    v26 = *(float *)(v13 + 72);
    v27 = *(float *)(v13 + 76);
    v28 = *(float *)(v13 + 80);
    v29 = *(float *)(v13 + 84);
    v30 = *(float *)(v13 + 88);
    v31 = *(float *)(v13 + 92);
    v32 = *(float *)(v13 + 96);
    v33 = *(float *)(v13 + 100);
    v34 = *(float *)(v13 + 104);
    v35 = v13 + 164;
    v36 = v13 + 16548;
    v37 = *((_QWORD *)result + 14);
    v38 = (_QWORD *)*((_QWORD *)result + 16);
    v39 = *((_QWORD *)result + 15) + 2 * (*((_QWORD *)result + 13) * a2 / v6);
    v40 = *(_QWORD *)(result + 36);
    v41 = v14[1];
    v42 = (_BYTE *)(*v14 + v16 * v11 + v40);
    v43 = v14[2];
    _ZF = v43 == 0;
    v45 = (unsigned __int8 *)(v43 + v18 * v11 + v40);
    if (_ZF)
      v46 = 0;
    else
      v46 = v45;
    v47 = (unsigned int *)(*v38 + v39 * v19 + 16 * v37);
    if (v11 >= 0)
      v48 = v11;
    else
      v48 = v11 + 1;
    result = (unsigned __int8 *)(v41 + v17 * (v48 >> 1) + v40);
    v189 = (float)LODWORD(a5);
    v190 = (float)LODWORD(v20);
    do
    {
      v49 = (char *)v47 + v19;
      v50 = &v46[v18];
      v51 = &v42[v16];
      if (v10)
      {
        v52 = 0;
        v53 = (unsigned int *)((char *)v47 + v19);
        v54 = &v42[v16];
        v55 = &v46[v18];
        do
        {
          LOBYTE(v24) = result[v52 + 1];
          *(float *)&v56 = (float)LODWORD(v24);
          v57 = *(float *)&v56 - v22;
          v58 = v194 * (float)(*(float *)&v56 - v22);
          LOBYTE(v56) = *v42;
          v59 = v23 * (float)((float)v56 - v21);
          v60 = v58 + v59;
          v61 = 8191.0;
          if ((float)(v58 + v59) <= 8191.0)
          {
            v61 = v58 + v59;
            if (v60 < 0.0)
              v61 = 0.0;
          }
          LOBYTE(v60) = result[v52];
          v62 = (float)LODWORD(v60) - v22;
          v63 = (float)(v192 * v57) + (float)(v62 * v193);
          v64 = 8191.0;
          if ((float)(v59 + v63) <= 8191.0)
          {
            v64 = v59 + v63;
            if ((float)(v59 + v63) < 0.0)
              v64 = 0.0;
          }
          v65 = v191 * v62;
          v66 = (float)(v191 * v62) + v59;
          v67 = 8191.0;
          if (v66 <= 8191.0)
          {
            v67 = v66;
            if (v66 < 0.0)
              v67 = 0.0;
          }
          LOBYTE(v66) = v42[1];
          v68 = v23 * (float)((float)LODWORD(v66) - v21);
          v69 = 8191.0;
          if ((float)(v58 + v68) <= 8191.0)
          {
            v69 = v58 + v68;
            if ((float)(v58 + v68) < 0.0)
              v69 = 0.0;
          }
          v70 = v63 + v68;
          v71 = 8191.0;
          if ((float)(v63 + v68) <= 8191.0)
          {
            v71 = v63 + v68;
            if (v70 < 0.0)
              v71 = 0.0;
          }
          v72 = v65 + v68;
          v73 = 8191.0;
          if (v72 <= 8191.0)
          {
            v73 = v72;
            if (v72 < 0.0)
              v73 = 0.0;
          }
          LOBYTE(v72) = *v54;
          v74 = v23 * (float)((float)LODWORD(v72) - v21);
          v75 = 8191.0;
          if ((float)(v58 + v74) <= 8191.0)
          {
            v75 = v58 + v74;
            if ((float)(v58 + v74) < 0.0)
              v75 = 0.0;
          }
          v76 = 8191.0;
          if ((float)(v63 + v74) <= 8191.0)
          {
            v76 = v63 + v74;
            if ((float)(v63 + v74) < 0.0)
              v76 = 0.0;
          }
          v77 = v65 + v74;
          v78 = (float)(v65 + v74) <= 8191.0;
          v79 = 8191.0;
          if (v78)
          {
            v79 = v77;
            if (v77 < 0.0)
              v79 = 0.0;
          }
          LOBYTE(v70) = v54[1];
          v80 = v23 * (float)((float)LODWORD(v70) - v21);
          v81 = v58 + v80;
          v78 = (float)(v58 + v80) <= 8191.0;
          v82 = 8191.0;
          if (v78)
          {
            v82 = v81;
            if (v81 < 0.0)
              v82 = 0.0;
          }
          v83 = v63 + v80;
          v78 = (float)(v63 + v80) <= 8191.0;
          v84 = 8191.0;
          if (v78)
          {
            v84 = v83;
            if (v83 < 0.0)
              v84 = 0.0;
          }
          v85 = v65 + v80;
          v86 = 8191.0;
          if (v85 <= 8191.0)
          {
            v86 = v85;
            if (v85 < 0.0)
              v86 = 0.0;
          }
          if (v46)
          {
            v87 = *v46;
            v88 = v46[1];
            v46 += 2;
            v89 = *v55;
            v90 = v55[1];
            v55 += 2;
          }
          else
          {
            v87 = 0;
            v88 = 0;
            v89 = 0;
            v90 = 0;
          }
          _H5 = *(_WORD *)(v35 + 2 * llroundf(fminf(fmaxf(v61, 0.0), 8191.0)));
          _H6 = *(_WORD *)(v35 + 2 * llroundf(fminf(fmaxf(v64, 0.0), 8191.0)));
          __asm
          {
            FCVT            S5, H5
            FCVT            S6, H6
          }
          _H29 = *(_WORD *)(v35 + 2 * llroundf(fminf(fmaxf(v67, 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          _H30 = *(_WORD *)(v35 + 2 * llroundf(fminf(fmaxf(v69, 0.0), 8191.0)));
          __asm { FCVT            S30, H30 }
          _H31 = *(_WORD *)(v35 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          __asm { FCVT            S31, H31 }
          _H8 = *(_WORD *)(v35 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S8, H8 }
          _H9 = *(_WORD *)(v35 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v35 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm
          {
            FCVT            S9, H9
            FCVT            S10, H10
          }
          _H4 = *(_WORD *)(v35 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H11 = *(_WORD *)(v35 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          _H12 = *(_WORD *)(v35 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          _H13 = *(_WORD *)(v35 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          __asm { FCVT            S13, H13 }
          v118 = (float)((float)(v27 * _S6) + (float)(_S5 * v26)) + (float)(_S29 * v28);
          v119 = (float)((float)(v30 * _S6) + (float)(_S5 * v29)) + (float)(_S29 * v31);
          v120 = (float)((float)(v33 * _S6) + (float)(_S5 * v32)) + (float)(_S29 * v34);
          v121 = (float)((float)(v27 * _S31) + (float)(_S30 * v26)) + (float)(_S8 * v28);
          v122 = (float)((float)(v30 * _S31) + (float)(_S30 * v29)) + (float)(_S8 * v31);
          v123 = (float)((float)(v33 * _S31) + (float)(_S30 * v32)) + (float)(_S8 * v34);
          v124 = (float)((float)(v27 * _S10) + (float)(_S9 * v26)) + (float)(_S4 * v28);
          v125 = (float)((float)(v30 * _S10) + (float)(_S9 * v29)) + (float)(_S4 * v31);
          v126 = (float)((float)(v33 * _S10) + (float)(_S9 * v32)) + (float)(_S4 * v34);
          v127 = (float)((float)(v27 * _S12) + (float)(_S11 * v26)) + (float)(_S13 * v28);
          v128 = (float)((float)(v30 * _S12) + (float)(_S11 * v29)) + (float)(_S13 * v31);
          v129 = (float)((float)(v33 * _S12) + (float)(_S11 * v32)) + (float)(_S13 * v34);
          _H4 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v118, 0.0), 8191.0)));
          _H15 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v119, 0.0), 8191.0)));
          _H31 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v120, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v121, 0.0), 8191.0)));
          _H13 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v122, 0.0), 8191.0)));
          _H14 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v123, 0.0), 8191.0)));
          _H8 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v124, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v125, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v126, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v127, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v128, 0.0), 8191.0)));
          _H9 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v129, 0.0), 8191.0)));
          if (v46)
          {
            v142 = (double)v87 * 3.0 / 255.0;
            v143 = llroundf(v142);
            v144 = (double)v88 * 3.0 / 255.0;
            v145 = llroundf(v144);
            v146 = (double)v89 * 3.0 / 255.0;
            v147 = llroundf(v146);
            v148 = (double)v90 * 3.0 / 255.0;
            v149 = llroundf(v148);
          }
          else
          {
            v147 = 3;
            v143 = 3;
            v145 = 3;
            v149 = 3;
          }
          v22 = v189;
          v21 = v190;
          __asm { FCVT            S1, H31 }
          v151 = 1023.0;
          v152 = 1023.0;
          if ((float)(v25 + _S1) <= 1023.0)
          {
            v152 = v25 + _S1;
            if ((float)(v25 + _S1) < 0.0)
              v152 = 0.0;
          }
          __asm { FCVT            S1, H15 }
          v154 = 1023.0;
          if ((float)(v25 + _S1) <= 1023.0)
          {
            v154 = v25 + _S1;
            if ((float)(v25 + _S1) < 0.0)
              v154 = 0.0;
          }
          __asm { FCVT            S1, H4 }
          v156 = 1023.0;
          if ((float)(v25 + _S1) <= 1023.0)
          {
            v156 = v25 + _S1;
            if ((float)(v25 + _S1) < 0.0)
              v156 = 0.0;
          }
          __asm { FCVT            S1, H14 }
          v158 = llroundf(v152);
          v159 = llroundf(v156);
          v160 = (float)v143;
          v161 = llroundf(v154) << 10;
          if (v160 > 3.0)
            v160 = 3.0;
          *v47 = v161 | v158 | (llroundf(v160) << 30) | (v159 << 20);
          v162 = 1023.0;
          if ((float)(v25 + _S1) <= 1023.0)
          {
            v162 = v25 + _S1;
            if ((float)(v25 + _S1) < 0.0)
              v162 = 0.0;
          }
          __asm { FCVT            S1, H13 }
          v164 = 1023.0;
          if ((float)(v25 + _S1) <= 1023.0)
          {
            v164 = v25 + _S1;
            if ((float)(v25 + _S1) < 0.0)
              v164 = 0.0;
          }
          __asm { FCVT            S1, H11 }
          v166 = 1023.0;
          if ((float)(v25 + _S1) <= 1023.0)
          {
            v166 = v25 + _S1;
            if ((float)(v25 + _S1) < 0.0)
              v166 = 0.0;
          }
          __asm { FCVT            S1, H12 }
          v168 = llroundf(v162);
          v169 = llroundf(v166);
          v170 = (float)v145;
          v171 = llroundf(v164) << 10;
          if (v170 > 3.0)
            v170 = 3.0;
          v47[1] = v171 | v168 | (llroundf(v170) << 30) | (v169 << 20);
          v172 = 1023.0;
          if ((float)(v25 + _S1) <= 1023.0)
          {
            v172 = v25 + _S1;
            if ((float)(v25 + _S1) < 0.0)
              v172 = 0.0;
          }
          __asm { FCVT            S1, H10 }
          v174 = 1023.0;
          if ((float)(v25 + _S1) <= 1023.0)
          {
            v174 = v25 + _S1;
            if ((float)(v25 + _S1) < 0.0)
              v174 = 0.0;
          }
          __asm { FCVT            S1, H8 }
          v176 = 1023.0;
          if ((float)(v25 + _S1) <= 1023.0)
          {
            v176 = v25 + _S1;
            if ((float)(v25 + _S1) < 0.0)
              v176 = 0.0;
          }
          __asm { FCVT            S1, H9 }
          v178 = llroundf(v172);
          v179 = llroundf(v176);
          v180 = (float)v147;
          v181 = llroundf(v174) << 10;
          if (v180 > 3.0)
            v180 = 3.0;
          *v53 = v181 | v178 | (llroundf(v180) << 30) | (v179 << 20);
          v24 = 1023.0;
          if ((float)(v25 + _S1) <= 1023.0)
          {
            v24 = v25 + _S1;
            if ((float)(v25 + _S1) < 0.0)
              v24 = 0.0;
          }
          __asm { FCVT            S1, H30 }
          v183 = 1023.0;
          if ((float)(v25 + _S1) <= 1023.0)
          {
            v183 = v25 + _S1;
            if ((float)(v25 + _S1) < 0.0)
              v183 = 0.0;
          }
          __asm { FCVT            S1, H29 }
          if ((float)(v25 + _S1) <= 1023.0)
          {
            v151 = v25 + _S1;
            if ((float)(v25 + _S1) < 0.0)
              v151 = 0.0;
          }
          v42 += 2;
          v54 += 2;
          v47 += 2;
          v185 = llroundf(v24);
          v186 = llroundf(v151);
          v187 = (float)v149;
          v188 = llroundf(v183) << 10;
          if (v187 > 3.0)
            v187 = 3.0;
          v53[1] = v188 | v185 | (llroundf(v187) << 30) | (v186 << 20);
          v53 += 2;
          v52 += 2;
        }
        while (v10 > v52);
      }
      v42 = &v51[v16];
      result += v17;
      v46 = &v50[v18];
      v47 = (unsigned int *)&v49[v19];
      v9 += 2;
    }
    while (v12 > v9);
  }
  return result;
}

uint64_t vt_Copy_420vf_rgb_l10r(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[3];
  v18 = a6[5];
  if ((v14 & 1) != 0)
  {
    ++v18;
    ++v14;
    if ((v11 & 1) != 0)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  v19 = a6[2];
  v20 = a6[4];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9)
    v12 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15)
    v21 = v19;
  else
    v21 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v18;
  if (v12 >= v21)
    v24 = v21;
  else
    v24 = v12;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_rgb_l10r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_420vf_rgb_l10r_GCD(unsigned __int8 *result, uint64_t a2)
{
  double v2;
  float v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  BOOL v37;
  _BYTE *v38;
  _BYTE *v39;
  uint64_t v40;
  unsigned __int8 *v41;
  _BYTE *v42;
  _BYTE *v43;
  unint64_t v44;
  unsigned int *v45;
  _BYTE *v46;
  _BYTE *v47;
  double v48;
  unsigned int v49;
  double v50;
  unsigned int v51;
  double v52;
  unsigned int v53;
  unsigned int v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  unsigned int v69;
  unsigned int v70;
  float v71;
  unsigned int v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  unsigned int v80;
  unsigned int v81;
  float v82;
  unsigned int v83;
  float v84;
  BOOL v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  unsigned int v93;
  unsigned int v94;
  float v95;
  unsigned int v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;

  v4 = *(_QWORD *)(result + 28);
  v5 = 2 * *result;
  v6 = v4 * a2 / v5;
  v7 = (v4 + v4 * a2) / v5;
  if (2 * v7 != 2 * v6)
  {
    v8 = 0;
    v9 = *(_QWORD *)(result + 20);
    v10 = *(_QWORD *)(result + 44) + 2 * v6;
    v11 = 2 * v7 - 2 * v6;
    v12 = *((_QWORD *)result + 19);
    v13 = (_QWORD *)*((_QWORD *)result + 7);
    v14 = (uint64_t *)*((_QWORD *)result + 8);
    v15 = *v14;
    v16 = v14[1];
    v17 = v14[2];
    v18 = **((_QWORD **)result + 17);
    *(float *)&v19 = (float)*(unsigned int *)(v12 + 128);
    *(float *)&v20 = (float)*(unsigned int *)(v12 + 136);
    v21 = *(float *)&v20 / *(float *)&v19;
    LOWORD(v19) = *(_WORD *)(v12 + 140);
    v22 = (float)v19;
    LOWORD(v20) = *(_WORD *)(v12 + 142);
    v23 = (float)v20;
    v24 = v21 * *(float *)v12;
    v25 = v21 * *(float *)(v12 + 8);
    v26 = v21 * *(float *)(v12 + 16);
    v27 = v21 * *(float *)(v12 + 20);
    v28 = *(float *)(v12 + 28);
    v29 = v21 * v28;
    LOWORD(v28) = *(_WORD *)(v12 + 144);
    v30 = (float)LODWORD(v28);
    v31 = *((_QWORD *)result + 14);
    v32 = (_QWORD *)*((_QWORD *)result + 16);
    v33 = *((_QWORD *)result + 15) + 2 * (*((_QWORD *)result + 13) * a2 / v5);
    v34 = *(_QWORD *)(result + 36);
    v35 = (_BYTE *)(*v13 + v15 * v10 + v34);
    v36 = v13[2];
    v37 = v36 == 0;
    v38 = (_BYTE *)(v36 + v17 * v10 + v34);
    if (v37)
      v39 = 0;
    else
      v39 = v38;
    result = (unsigned __int8 *)(*v32 + v33 * v18 + 16 * v31);
    v40 = v13[1] + v16 * (v10 / 2) + v34;
    do
    {
      v41 = &result[v18];
      v42 = &v39[v17];
      v43 = &v35[v15];
      if (v9)
      {
        v44 = 0;
        v45 = (unsigned int *)&result[v18];
        v46 = &v35[v15];
        v47 = &v39[v17];
        do
        {
          if (v39)
          {
            LOBYTE(v2) = *v39;
            v3 = 0.0;
            v48 = (double)*(unint64_t *)&v2 * 3.0 / 255.0;
            *(float *)&v48 = v48;
            v49 = llroundf(*(float *)&v48);
            LOBYTE(v48) = v39[1];
            v50 = (double)*(unint64_t *)&v48 * 3.0 / 255.0;
            *(float *)&v50 = v50;
            v51 = llroundf(*(float *)&v50);
            v39 += 2;
            LOBYTE(v50) = *v47;
            v52 = (double)*(unint64_t *)&v50 * 3.0 / 255.0;
            *(float *)&v52 = v52;
            v53 = llroundf(*(float *)&v52);
            LOBYTE(v52) = v47[1];
            v47 += 2;
            v2 = (double)*(unint64_t *)&v52 * 3.0 / 255.0;
            *(float *)&v2 = v2;
            v54 = llroundf(*(float *)&v2);
          }
          else
          {
            v53 = 3;
            v49 = 3;
            v51 = 3;
            v54 = 3;
          }
          LOBYTE(v2) = *(_BYTE *)(v40 + v44);
          *(float *)&v2 = (float)LODWORD(v2) - v23;
          v55 = v29 * *(float *)&v2;
          LOBYTE(v3) = *v35;
          v56 = v24 * (float)((float)LODWORD(v3) - v22);
          v57 = (float)((float)(v29 * *(float *)&v2) + v56) + v30;
          v58 = 1023.0;
          if (v57 <= 1023.0)
          {
            v58 = (float)((float)(v29 * *(float *)&v2) + v56) + v30;
            if (v57 < 0.0)
              v58 = 0.0;
          }
          LOBYTE(v57) = *(_BYTE *)(v40 + v44 + 1);
          v59 = (float)LODWORD(v57) - v23;
          v60 = (float)(v27 * v59) + (float)(*(float *)&v2 * v26);
          v61 = (float)(v56 + v60) + v30;
          v62 = 1023.0;
          if (v61 <= 1023.0)
          {
            v62 = (float)(v56 + v60) + v30;
            if (v61 < 0.0)
              v62 = 0.0;
          }
          v63 = v25 * v59;
          v64 = (float)(v63 + v56) + v30;
          v65 = 1023.0;
          if (v64 <= 1023.0)
          {
            v65 = v64;
            if (v64 < 0.0)
              v65 = 0.0;
          }
          LOBYTE(v64) = v35[1];
          v67 = (float)LODWORD(v64) - v22;
          v66 = v24 * v67;
          LOBYTE(v61) = *v46;
          LOBYTE(v67) = v46[1];
          v68 = v55 + v66;
          v69 = llroundf(v58);
          v70 = llroundf(v65);
          v71 = (float)v49;
          v72 = llroundf(v62) << 10;
          if (v71 > 3.0)
            v71 = 3.0;
          *(_DWORD *)result = v72 | v69 | (llroundf(v71) << 30) | (v70 << 20);
          v73 = 1023.0;
          if ((float)(v68 + v30) <= 1023.0)
          {
            v73 = v68 + v30;
            if ((float)(v68 + v30) < 0.0)
              v73 = 0.0;
          }
          v74 = (float)(v60 + v66) + v30;
          v75 = 1023.0;
          if (v74 <= 1023.0)
          {
            v75 = (float)(v60 + v66) + v30;
            if (v74 < 0.0)
              v75 = 0.0;
          }
          v76 = (float)(v63 + v66) + v30;
          v77 = 1023.0;
          if (v76 <= 1023.0)
          {
            v77 = v76;
            if (v76 < 0.0)
              v77 = 0.0;
          }
          v78 = v24 * (float)((float)LODWORD(v61) - v22);
          v79 = v55 + v78;
          v80 = llroundf(v73);
          v81 = llroundf(v77);
          v82 = (float)v51;
          v83 = llroundf(v75) << 10;
          if (v82 > 3.0)
            v82 = 3.0;
          *((_DWORD *)result + 1) = v83 | v80 | (llroundf(v82) << 30) | (v81 << 20);
          v84 = v79 + v30;
          v85 = (float)(v79 + v30) <= 1023.0;
          v86 = 1023.0;
          if (v85)
          {
            v86 = v84;
            if (v84 < 0.0)
              v86 = 0.0;
          }
          v87 = (float)(v60 + v78) + v30;
          v88 = 1023.0;
          if (v87 <= 1023.0)
          {
            v88 = (float)(v60 + v78) + v30;
            if (v87 < 0.0)
              v88 = 0.0;
          }
          v89 = (float)(v63 + v78) + v30;
          v90 = 1023.0;
          if (v89 <= 1023.0)
          {
            v90 = v89;
            if (v89 < 0.0)
              v90 = 0.0;
          }
          v91 = v24 * (float)((float)LODWORD(v67) - v22);
          v92 = v55 + v91;
          v93 = llroundf(v86);
          v94 = llroundf(v90);
          v95 = (float)v53;
          v96 = llroundf(v88) << 10;
          if (v95 > 3.0)
            v95 = 3.0;
          *v45 = v96 | v93 | (llroundf(v95) << 30) | (v94 << 20);
          v97 = v92 + v30;
          v85 = (float)(v92 + v30) <= 1023.0;
          v98 = 1023.0;
          if (v85)
          {
            v98 = v97;
            if (v97 < 0.0)
              v98 = 0.0;
          }
          v99 = (float)(v60 + v91) + v30;
          v100 = 1023.0;
          if (v99 <= 1023.0)
          {
            v100 = v99;
            if (v99 < 0.0)
              v100 = 0.0;
          }
          v101 = (float)(v63 + v91) + v30;
          v3 = 1023.0;
          if (v101 <= 1023.0)
          {
            v3 = v101;
            if (v101 < 0.0)
              v3 = 0.0;
          }
          v35 += 2;
          v46 += 2;
          result += 8;
          v102 = llroundf(v98);
          v103 = llroundf(v100);
          v104 = llroundf(v3);
          *(float *)&v2 = (float)v54;
          if ((float)v54 > 3.0)
            *(float *)&v2 = 3.0;
          v45[1] = (v103 << 10) | v102 | (llroundf(*(float *)&v2) << 30) | (v104 << 20);
          v45 += 2;
          v44 += 2;
        }
        while (v9 > v44);
      }
      v35 = &v43[v15];
      v40 += v16;
      v39 = &v42[v17];
      result = &v41[v18];
      v8 += 2;
    }
    while (v11 > v8);
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Tone_Mat_TRC_l64r(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[3];
  v18 = a6[5];
  if ((v14 & 1) != 0)
  {
    ++v18;
    ++v14;
    if ((v11 & 1) != 0)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  v19 = a6[2];
  v20 = a6[4];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9)
    v12 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15)
    v21 = v19;
  else
    v21 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v18;
  if (v12 >= v21)
    v24 = v21;
  else
    v24 = v12;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Tone_Mat_TRC_l64r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_420vf_TRC_Tone_Mat_TRC_l64r_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  float v34;
  float v35;
  float v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  unint64_t v51;
  char *v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  float v55;
  unsigned int v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  BOOL v81;
  float v82;
  float v83;
  float v84;
  __int16 v85;
  __int16 v86;
  __int16 v87;
  __int16 v88;
  float v90;
  float v106;
  float v107;
  float v108;
  float v113;
  float v114;
  float v119;
  float v120;
  float v121;
  float v126;
  float v127;
  float v129;
  float v130;
  float v132;
  float v133;
  float v134;
  float v136;
  float v137;
  float v139;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  __int16 v169;
  __int16 v170;
  __int16 v171;
  __int16 v172;
  __int16 v173;
  float v174;
  float v175;
  float v178;
  float v181;
  float v184;
  float v187;
  float v190;
  float v193;
  float v196;
  float v199;
  float v202;
  float v207;
  float v208;
  float v209;
  float v210;
  float v211;
  float v212;
  float v213;
  float v214;
  float v215;
  float v216;
  float v217;

  v5 = *(_QWORD *)(result + 28);
  v6 = 2 * *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = *(_QWORD *)(result + 44) + 2 * v7;
    v12 = 2 * v8 - 2 * v7;
    v13 = *((_QWORD *)result + 19);
    v14 = (_QWORD *)*((_QWORD *)result + 7);
    v15 = (uint64_t *)*((_QWORD *)result + 8);
    v16 = *v15;
    v17 = v15[1];
    v18 = v15[2];
    v19 = **((_QWORD **)result + 17);
    v20 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    LOWORD(a5) = *(_WORD *)(v13 + 140);
    v21 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    v22 = (float)LODWORD(a5);
    v23 = v20 * *(float *)v13;
    v213 = v20 * *(float *)(v13 + 16);
    v214 = v20 * *(float *)(v13 + 8);
    v211 = v20 * *(float *)(v13 + 28);
    v212 = v20 * *(float *)(v13 + 20);
    v209 = *(float *)(v13 + 76);
    v210 = *(float *)(v13 + 72);
    _S1 = *(float *)(v13 + 84);
    v25 = *(float *)(v13 + 88);
    v207 = _S1;
    v208 = *(float *)(v13 + 80);
    v26 = *(float *)(v13 + 92);
    v27 = *(float *)(v13 + 96);
    v28 = *(float *)(v13 + 100);
    v29 = *(float *)(v13 + 104);
    v30 = v13 + 164;
    v31 = v13 + 16548;
    v32 = v13 + 32932;
    v33 = *(float *)(v13 + 108);
    v34 = *(float *)(v13 + 112);
    v35 = *(float *)(v13 + 116);
    v36 = *(float *)(v13 + 120);
    v37 = *((_QWORD *)result + 14);
    v38 = (_QWORD *)*((_QWORD *)result + 16);
    v39 = *((_QWORD *)result + 15) + 2 * (*((_QWORD *)result + 13) * a2 / v6);
    v40 = *(_QWORD *)(result + 36);
    result = (unsigned __int8 *)(*v14 + v16 * v11 + v40);
    v41 = v14[2];
    _ZF = v41 == 0;
    v43 = (unsigned __int8 *)(v41 + v18 * v11 + v40);
    if (_ZF)
      v44 = 0;
    else
      v44 = v43;
    v45 = (char *)(*v38 + v39 * v19 + 8 * v37);
    if (v11 >= 0)
      v46 = v11;
    else
      v46 = v11 + 1;
    v47 = v14[1] + v17 * (v46 >> 1) + v40;
    v216 = (float)LODWORD(a5);
    v217 = v21;
    v215 = v23;
    do
    {
      v48 = &v45[v19];
      v49 = &v44[v18];
      v50 = &result[v16];
      if (v10)
      {
        v51 = 0;
        v52 = &v45[v19];
        v53 = &result[v16];
        v54 = &v44[v18];
        do
        {
          LOBYTE(_S1) = *(_BYTE *)(v47 + v51 + 1);
          v55 = (float)LODWORD(_S1) - v22;
          v56 = LODWORD(v214);
          v57 = v214 * v55;
          LOBYTE(v56) = *result;
          v58 = v23 * (float)((float)v56 - v21);
          v59 = (float)(v214 * v55) + v58;
          v60 = 8191.0;
          if (v59 <= 8191.0)
          {
            v60 = (float)(v214 * v55) + v58;
            if (v59 < 0.0)
              v60 = 0.0;
          }
          LOBYTE(v59) = *(_BYTE *)(v47 + v51);
          v61 = (float)LODWORD(v59) - v22;
          v62 = (float)(v212 * v55) + (float)(v61 * v213);
          v63 = 8191.0;
          if ((float)(v58 + v62) <= 8191.0)
          {
            v63 = v58 + v62;
            if ((float)(v58 + v62) < 0.0)
              v63 = 0.0;
          }
          v64 = v211 * v61;
          v65 = (float)(v211 * v61) + v58;
          v66 = 8191.0;
          if (v65 <= 8191.0)
          {
            v66 = v65;
            if (v65 < 0.0)
              v66 = 0.0;
          }
          LOBYTE(v65) = result[1];
          v67 = v23 * (float)((float)LODWORD(v65) - v21);
          v68 = 8191.0;
          if ((float)(v57 + v67) <= 8191.0)
          {
            v68 = v57 + v67;
            if ((float)(v57 + v67) < 0.0)
              v68 = 0.0;
          }
          v69 = 8191.0;
          if ((float)(v62 + v67) <= 8191.0)
          {
            v69 = v62 + v67;
            if ((float)(v62 + v67) < 0.0)
              v69 = 0.0;
          }
          v70 = v64 + v67;
          v71 = 8191.0;
          if (v70 <= 8191.0)
          {
            v71 = v70;
            if (v70 < 0.0)
              v71 = 0.0;
          }
          LOBYTE(v70) = *v53;
          v72 = (float)LODWORD(v70) - v21;
          v73 = v23 * v72;
          v74 = 8191.0;
          if ((float)(v57 + (float)(v23 * v72)) <= 8191.0)
          {
            v74 = v57 + (float)(v23 * v72);
            if (v74 < 0.0)
              v74 = 0.0;
          }
          v75 = 8191.0;
          if ((float)(v62 + v73) <= 8191.0)
          {
            v75 = v62 + v73;
            if ((float)(v62 + v73) < 0.0)
              v75 = 0.0;
          }
          v76 = v64 + v73;
          v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            v77 = v76;
            if (v76 < 0.0)
              v77 = 0.0;
          }
          LOBYTE(v72) = v53[1];
          v78 = v23 * (float)((float)LODWORD(v72) - v21);
          v79 = 8191.0;
          if ((float)(v57 + v78) <= 8191.0)
          {
            v79 = v57 + v78;
            if ((float)(v57 + v78) < 0.0)
              v79 = 0.0;
          }
          v80 = v62 + v78;
          v81 = (float)(v62 + v78) <= 8191.0;
          v82 = 8191.0;
          if (v81)
          {
            v82 = v80;
            if (v80 < 0.0)
              v82 = 0.0;
          }
          v83 = v64 + v78;
          v84 = 8191.0;
          if (v83 <= 8191.0)
          {
            v84 = v83;
            if (v83 < 0.0)
              v84 = 0.0;
          }
          if (v44)
          {
            v85 = *v44;
            v86 = v44[1];
            v44 += 2;
            v87 = *v54;
            v88 = v54[1];
            v54 += 2;
          }
          else
          {
            v85 = 0;
            v86 = 0;
            v87 = 0;
            v88 = 0;
          }
          _S1 = fmaxf(v60, 0.0);
          v90 = 8191.0;
          LOWORD(_S1) = *(_WORD *)(v30 + 2 * llroundf(fminf(_S1, 8191.0)));
          __asm { FCVT            S12, H1 }
          LOWORD(_S1) = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v63, 0.0), 8191.0)));
          __asm { FCVT            S31, H1 }
          LOWORD(_S1) = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v66, 0.0), 8191.0)));
          __asm { FCVT            S8, H1 }
          _H3 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v68, 0.0), 8191.0)));
          _H16 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v69, 0.0), 8191.0)));
          _H17 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          _H7 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          _H9 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          v106 = fmaxf(_S12, fmaxf(_S31, _S8));
          v107 = (float)((float)((float)(v34 * _S31) + (float)(v33 * _S12)) + (float)(v35 * _S8)) + (float)(v36 * v106);
          v108 = 8191.0;
          if (v107 <= 8191.0)
          {
            v108 = (float)((float)((float)(v34 * _S31) + (float)(v33 * _S12)) + (float)(v35 * _S8))
                 + (float)(v36 * v106);
            if (v107 < 0.0)
              v108 = 0.0;
          }
          __asm
          {
            FCVT            S4, H3
            FCVT            S5, H16
            FCVT            S6, H17
          }
          _H13 = *(_WORD *)(v31 + 2 * llroundf(v108));
          v113 = (float)((float)((float)(v34 * _S5) + (float)(v33 * _S4)) + (float)(v35 * _S6))
               + (float)(v36 * fmaxf(_S4, fmaxf(_S5, _S6)));
          v114 = 8191.0;
          if (v113 <= 8191.0)
          {
            v114 = v113;
            if (v113 < 0.0)
              v114 = 0.0;
          }
          __asm
          {
            FCVT            S7, H7
            FCVT            S14, H2
            FCVT            S2, H1
          }
          _H1 = *(_WORD *)(v31 + 2 * llroundf(v114));
          v119 = fmaxf(_S7, fmaxf(_S14, _S2));
          v120 = (float)((float)((float)(v34 * _S14) + (float)(v33 * _S7)) + (float)(v35 * _S2)) + (float)(v36 * v119);
          v121 = 8191.0;
          if (v120 <= 8191.0)
          {
            v121 = (float)((float)((float)(v34 * _S14) + (float)(v33 * _S7)) + (float)(v35 * _S2)) + (float)(v36 * v119);
            if (v120 < 0.0)
              v121 = 0.0;
          }
          __asm
          {
            FCVT            S3, H9
            FCVT            S16, H10
            FCVT            S17, H11
          }
          _H9 = *(_WORD *)(v31 + 2 * llroundf(v121));
          v126 = fmaxf(_S3, fmaxf(_S16, _S17));
          v127 = (float)((float)((float)(v34 * _S16) + (float)(v33 * _S3)) + (float)(v35 * _S17)) + (float)(v36 * v126);
          if (v127 <= 8191.0)
          {
            v90 = (float)((float)((float)(v34 * _S16) + (float)(v33 * _S3)) + (float)(v35 * _S17)) + (float)(v36 * v126);
            if (v127 < 0.0)
              v90 = 0.0;
          }
          __asm { FCVT            S10, H13 }
          v129 = _S31 * _S10;
          v130 = _S8 * _S10;
          __asm { FCVT            S1, H1 }
          v132 = _S4 * _S1;
          v133 = _S5 * _S1;
          v134 = _S6 * _S1;
          __asm { FCVT            S6, H9 }
          v136 = _S7 * _S6;
          v137 = _S14 * _S6;
          _H30 = *(_WORD *)(v31 + 2 * llroundf(v90));
          v139 = _S2 * _S6;
          __asm { FCVT            S6, H30 }
          v141 = _S3 * _S6;
          v142 = _S16 * _S6;
          v143 = _S17 * _S6;
          v144 = (float)((float)(v209 * v129) + (float)((float)(_S12 * _S10) * v210)) + (float)(v130 * v208);
          v145 = (float)((float)(v25 * v129) + (float)((float)(_S12 * _S10) * v207)) + (float)(v130 * v26);
          v146 = (float)((float)(v28 * v129) + (float)((float)(_S12 * _S10) * v27)) + (float)(v130 * v29);
          v147 = (float)((float)(v209 * v133) + (float)(v132 * v210)) + (float)(v134 * v208);
          v148 = (float)((float)(v25 * v133) + (float)(v132 * v207)) + (float)(v134 * v26);
          v149 = (float)((float)(v28 * v133) + (float)(v132 * v27)) + (float)(v134 * v29);
          v150 = (float)((float)(v209 * v137) + (float)(v136 * v210)) + (float)(v139 * v208);
          v151 = (float)((float)(v25 * v137) + (float)(v136 * v207)) + (float)(v139 * v26);
          v152 = (float)((float)(v28 * v137) + (float)(v136 * v27)) + (float)(v139 * v29);
          v153 = (float)((float)(v209 * v142) + (float)(v141 * v210)) + (float)(v143 * v208);
          v154 = (float)((float)(v25 * v142) + (float)(v141 * v207)) + (float)(v143 * v26);
          v155 = (float)((float)(v28 * v142) + (float)(v141 * v27)) + (float)(v143 * v29);
          _H7 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v144, 0.0), 8191.0)));
          __asm { FCVT            S2, H7 }
          _H14 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v145, 0.0), 8191.0)));
          _H13 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v146, 0.0), 8191.0)));
          _H6 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v147, 0.0), 8191.0)));
          _H5 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v148, 0.0), 8191.0)));
          _H4 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v149, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v150, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v151, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v152, 0.0), 8191.0)));
          _H9 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v153, 0.0), 8191.0)));
          _H8 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v154, 0.0), 8191.0)));
          _H31 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v155, 0.0), 8191.0)));
          v169 = v85 | (v85 << 8);
          if (v44)
            v170 = v169;
          else
            v170 = -1;
          if (v44)
            v171 = v86 | (v86 << 8);
          else
            v171 = -1;
          if (v44)
            v172 = v87 | (v87 << 8);
          else
            v172 = -1;
          v173 = v88 | (v88 << 8);
          if (!v44)
            v173 = -1;
          v174 = 65535.0;
          v175 = 65535.0;
          if (_S2 <= 65535.0)
          {
            __asm { FCVT            S1, H7 }
            _NF = _S1 < 0.0;
            v175 = _S2;
            if (_NF)
              v175 = 0.0;
          }
          __asm { FCVT            S2, H14 }
          *(_WORD *)v45 = llroundf(v175);
          v178 = 65535.0;
          v23 = v215;
          v22 = v216;
          if (_S2 <= 65535.0)
          {
            __asm { FCVT            S1, H14 }
            _NF = _S1 < 0.0;
            v178 = _S2;
            if (_NF)
              v178 = 0.0;
          }
          __asm { FCVT            S3, H13 }
          *((_WORD *)v45 + 1) = llroundf(v178);
          v181 = 65535.0;
          v21 = v217;
          if (_S3 <= 65535.0)
          {
            __asm { FCVT            S1, H13 }
            v181 = _S3;
            if (_S1 < 0.0)
              v181 = 0.0;
          }
          __asm { FCVT            S1, H6 }
          *((_WORD *)v45 + 2) = llroundf(v181);
          *((_WORD *)v45 + 3) = v170;
          v184 = 65535.0;
          if (_S1 <= 65535.0)
          {
            __asm { FCVT            S2, H6 }
            _NF = _S2 < 0.0;
            v184 = _S1;
            if (_NF)
              v184 = 0.0;
          }
          __asm { FCVT            S3, H5 }
          *((_WORD *)v45 + 4) = llroundf(v184);
          v187 = 65535.0;
          if (_S3 <= 65535.0)
          {
            __asm { FCVT            S1, H5 }
            _NF = _S1 < 0.0;
            v187 = _S3;
            if (_NF)
              v187 = 0.0;
          }
          __asm { FCVT            S3, H4 }
          *((_WORD *)v45 + 5) = llroundf(v187);
          v190 = 65535.0;
          if (_S3 <= 65535.0)
          {
            __asm { FCVT            S1, H4 }
            v190 = _S3;
            if (_S1 < 0.0)
              v190 = 0.0;
          }
          __asm { FCVT            S1, H12 }
          *((_WORD *)v45 + 6) = llroundf(v190);
          *((_WORD *)v45 + 7) = v171;
          v193 = 65535.0;
          if (_S1 <= 65535.0)
          {
            __asm { FCVT            S2, H12 }
            _NF = _S2 < 0.0;
            v193 = _S1;
            if (_NF)
              v193 = 0.0;
          }
          __asm { FCVT            S3, H11 }
          *(_WORD *)v52 = llroundf(v193);
          v196 = 65535.0;
          if (_S3 <= 65535.0)
          {
            __asm { FCVT            S1, H11 }
            _NF = _S1 < 0.0;
            v196 = _S3;
            if (_NF)
              v196 = 0.0;
          }
          __asm { FCVT            S3, H10 }
          *((_WORD *)v52 + 1) = llroundf(v196);
          v199 = 65535.0;
          if (_S3 <= 65535.0)
          {
            __asm { FCVT            S1, H10 }
            v199 = _S3;
            if (_S1 < 0.0)
              v199 = 0.0;
          }
          __asm { FCVT            S1, H9 }
          *((_WORD *)v52 + 2) = llroundf(v199);
          *((_WORD *)v52 + 3) = v172;
          v202 = 65535.0;
          if (_S1 <= 65535.0)
          {
            __asm { FCVT            S2, H9 }
            _NF = _S2 < 0.0;
            v202 = _S1;
            if (_NF)
              v202 = 0.0;
          }
          __asm { FCVT            S3, H8 }
          *((_WORD *)v52 + 4) = llroundf(v202);
          _S1 = 65535.0;
          if (_S3 <= 65535.0)
          {
            __asm { FCVT            S1, H8 }
            _NF = _S1 < 0.0;
            _S1 = _S3;
            if (_NF)
              _S1 = 0.0;
          }
          __asm { FCVT            S2, H31 }
          *((_WORD *)v52 + 5) = llroundf(_S1);
          if (_S2 <= 65535.0)
          {
            __asm { FCVT            S1, H31 }
            v174 = _S2;
            if (_S1 < 0.0)
              v174 = 0.0;
          }
          result += 2;
          v53 += 2;
          v45 += 16;
          *((_WORD *)v52 + 6) = llroundf(v174);
          *((_WORD *)v52 + 7) = v173;
          v52 += 16;
          v51 += 2;
        }
        while (v10 > v51);
      }
      result = &v50[v16];
      v47 += v17;
      v44 = &v49[v18];
      v45 = &v48[v19];
      v9 += 2;
    }
    while (v12 > v9);
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Mat_TRC_l64r(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[3];
  v18 = a6[5];
  if ((v14 & 1) != 0)
  {
    ++v18;
    ++v14;
    if ((v11 & 1) != 0)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  v19 = a6[2];
  v20 = a6[4];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9)
    v12 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15)
    v21 = v19;
  else
    v21 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v18;
  if (v12 >= v21)
    v24 = v21;
  else
    v24 = v12;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Mat_TRC_l64r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_420vf_TRC_Mat_TRC_l64r_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  float v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  unsigned __int8 *v50;
  _BYTE *v51;
  unint64_t v52;
  char *v53;
  _BYTE *v54;
  unsigned __int8 *v55;
  unsigned int v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  BOOL v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  __int16 v86;
  __int16 v87;
  __int16 v88;
  __int16 v89;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  __int16 v142;
  __int16 v143;
  __int16 v144;
  __int16 v145;
  __int16 v146;
  float v147;
  float v150;
  float v153;
  float v156;
  float v159;
  float v162;
  float v165;
  float v168;
  float v171;
  float v174;
  float v180;
  float v181;
  float v182;
  float v183;
  float v184;
  float v185;

  v6 = *(_QWORD *)(result + 28);
  v7 = 2 * *result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (2 * v9 != 2 * v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)(result + 20);
    v12 = *(_QWORD *)(result + 44) + 2 * v8;
    v13 = 2 * v9 - 2 * v8;
    v14 = *((_QWORD *)result + 19);
    v15 = (_QWORD *)*((_QWORD *)result + 7);
    v16 = (uint64_t *)*((_QWORD *)result + 8);
    v17 = *v16;
    v18 = v16[1];
    v19 = v16[2];
    v20 = **((_QWORD **)result + 17);
    *(float *)&v21 = (float)*(unsigned int *)(v14 + 128);
    v22 = 8191.0 / *(float *)&v21;
    LOWORD(v21) = *(_WORD *)(v14 + 140);
    v23 = (float)v21;
    LOWORD(a5) = *(_WORD *)(v14 + 142);
    v24 = (float)LODWORD(a5);
    v25 = v22 * *(float *)v14;
    v182 = v22 * *(float *)(v14 + 16);
    v183 = v22 * *(float *)(v14 + 8);
    v180 = v22 * *(float *)(v14 + 28);
    v181 = v22 * *(float *)(v14 + 20);
    v26 = *(float *)(v14 + 72);
    v27 = *(float *)(v14 + 76);
    v28 = *(float *)(v14 + 80);
    v29 = *(float *)(v14 + 84);
    v30 = *(float *)(v14 + 88);
    v31 = *(float *)(v14 + 92);
    v32 = *(float *)(v14 + 96);
    v33 = *(float *)(v14 + 100);
    v34 = *(float *)(v14 + 104);
    v35 = v14 + 164;
    v36 = v14 + 16548;
    v37 = *((_QWORD *)result + 14);
    v38 = (_QWORD *)*((_QWORD *)result + 16);
    v39 = *((_QWORD *)result + 15) + 2 * (*((_QWORD *)result + 13) * a2 / v7);
    v40 = *(_QWORD *)(result + 36);
    v41 = v15[1];
    v42 = (_BYTE *)(*v15 + v17 * v12 + v40);
    v43 = v15[2];
    _ZF = v43 == 0;
    v45 = (unsigned __int8 *)(v43 + v19 * v12 + v40);
    if (_ZF)
      v46 = 0;
    else
      v46 = v45;
    v47 = (char *)(*v38 + v39 * v20 + 8 * v37);
    if (v12 >= 0)
      v48 = v12;
    else
      v48 = v12 + 1;
    result = (unsigned __int8 *)(v41 + v18 * (v48 >> 1) + v40);
    v184 = (float)LODWORD(a5);
    v185 = v23;
    do
    {
      v49 = &v47[v20];
      v50 = &v46[v19];
      v51 = &v42[v17];
      if (v11)
      {
        v52 = 0;
        v53 = &v47[v20];
        v54 = &v42[v17];
        v55 = &v46[v19];
        do
        {
          LOBYTE(v22) = result[v52 + 1];
          *(float *)&v56 = (float)LODWORD(v22);
          v57 = *(float *)&v56 - v24;
          v58 = v183 * (float)(*(float *)&v56 - v24);
          LOBYTE(v56) = *v42;
          v59 = v25 * (float)((float)v56 - v23);
          v60 = v58 + v59;
          v61 = 8191.0;
          if ((float)(v58 + v59) <= 8191.0)
          {
            v61 = v58 + v59;
            if (v60 < 0.0)
              v61 = 0.0;
          }
          LOBYTE(v60) = result[v52];
          v62 = (float)LODWORD(v60) - v24;
          v63 = (float)(v181 * v57) + (float)(v62 * v182);
          v64 = 8191.0;
          if ((float)(v59 + v63) <= 8191.0)
          {
            v64 = v59 + v63;
            if ((float)(v59 + v63) < 0.0)
              v64 = 0.0;
          }
          v65 = v180 * v62;
          v66 = (float)(v180 * v62) + v59;
          v67 = 8191.0;
          if (v66 <= 8191.0)
          {
            v67 = v66;
            if (v66 < 0.0)
              v67 = 0.0;
          }
          LOBYTE(v66) = v42[1];
          v68 = v25 * (float)((float)LODWORD(v66) - v23);
          v69 = 8191.0;
          if ((float)(v58 + v68) <= 8191.0)
          {
            v69 = v58 + v68;
            if ((float)(v58 + v68) < 0.0)
              v69 = 0.0;
          }
          v70 = 8191.0;
          if ((float)(v63 + v68) <= 8191.0)
          {
            v70 = v63 + v68;
            if ((float)(v63 + v68) < 0.0)
              v70 = 0.0;
          }
          v71 = v65 + v68;
          v72 = (float)(v65 + v68) <= 8191.0;
          v73 = 8191.0;
          if (v72)
          {
            v73 = v71;
            if (v71 < 0.0)
              v73 = 0.0;
          }
          LOBYTE(v71) = *v54;
          v74 = v25 * (float)((float)LODWORD(v71) - v23);
          v75 = 8191.0;
          if ((float)(v58 + v74) <= 8191.0)
          {
            v75 = v58 + v74;
            if ((float)(v58 + v74) < 0.0)
              v75 = 0.0;
          }
          v76 = 8191.0;
          if ((float)(v63 + v74) <= 8191.0)
          {
            v76 = v63 + v74;
            if ((float)(v63 + v74) < 0.0)
              v76 = 0.0;
          }
          v77 = v65 + v74;
          v72 = (float)(v65 + v74) <= 8191.0;
          v78 = 8191.0;
          if (v72)
          {
            v78 = v77;
            if (v77 < 0.0)
              v78 = 0.0;
          }
          LOBYTE(v5) = v54[1];
          v79 = v25 * (float)((float)LODWORD(v5) - v23);
          v80 = v58 + v79;
          v72 = (float)(v58 + v79) <= 8191.0;
          v81 = 8191.0;
          if (v72)
          {
            v81 = v80;
            if (v80 < 0.0)
              v81 = 0.0;
          }
          v82 = v63 + v79;
          v72 = (float)(v63 + v79) <= 8191.0;
          v83 = 8191.0;
          if (v72)
          {
            v83 = v82;
            if (v82 < 0.0)
              v83 = 0.0;
          }
          v84 = v65 + v79;
          v72 = (float)(v65 + v79) <= 8191.0;
          v85 = 8191.0;
          if (v72)
          {
            v85 = v84;
            if (v84 < 0.0)
              v85 = 0.0;
          }
          if (v46)
          {
            v86 = *v46;
            v87 = v46[1];
            v46 += 2;
            v88 = *v55;
            v89 = v55[1];
            v55 += 2;
          }
          else
          {
            v86 = 0;
            v87 = 0;
            v88 = 0;
            v89 = 0;
          }
          _H4 = *(_WORD *)(v35 + 2 * llroundf(fminf(fmaxf(v61, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H26 = *(_WORD *)(v35 + 2 * llroundf(fminf(fmaxf(v64, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v35 + 2 * llroundf(fminf(fmaxf(v67, 0.0), 8191.0)));
          __asm
          {
            FCVT            S26, H26
            FCVT            S27, H27
          }
          _H28 = *(_WORD *)(v35 + 2 * llroundf(fminf(fmaxf(v69, 0.0), 8191.0)));
          __asm { FCVT            S28, H28 }
          _H29 = *(_WORD *)(v35 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          _H30 = *(_WORD *)(v35 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S30, H30 }
          _H31 = *(_WORD *)(v35 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          __asm { FCVT            S31, H31 }
          _H9 = *(_WORD *)(v35 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v35 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          __asm
          {
            FCVT            S9, H9
            FCVT            S12, H12
          }
          _H8 = *(_WORD *)(v35 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          __asm { FCVT            S8, H8 }
          _H10 = *(_WORD *)(v35 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          _H11 = *(_WORD *)(v35 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          v117 = (float)((float)(v27 * _S26) + (float)(_S4 * v26)) + (float)(_S27 * v28);
          v118 = (float)((float)(v30 * _S26) + (float)(_S4 * v29)) + (float)(_S27 * v31);
          v119 = (float)((float)(v33 * _S26) + (float)(_S4 * v32)) + (float)(_S27 * v34);
          v120 = (float)((float)(v27 * _S29) + (float)(_S28 * v26)) + (float)(_S30 * v28);
          v121 = (float)((float)(v30 * _S29) + (float)(_S28 * v29)) + (float)(_S30 * v31);
          v122 = (float)((float)(v33 * _S29) + (float)(_S28 * v32)) + (float)(_S30 * v34);
          v123 = (float)((float)(v27 * _S9) + (float)(_S31 * v26)) + (float)(_S12 * v28);
          v124 = (float)((float)(v30 * _S9) + (float)(_S31 * v29)) + (float)(_S12 * v31);
          v125 = (float)((float)(v33 * _S9) + (float)(_S31 * v32)) + (float)(_S12 * v34);
          v126 = (float)((float)(v27 * _S10) + (float)(_S8 * v26)) + (float)(_S11 * v28);
          v127 = (float)((float)(v30 * _S10) + (float)(_S8 * v29)) + (float)(_S11 * v31);
          v128 = (float)((float)(v33 * _S10) + (float)(_S8 * v32)) + (float)(_S11 * v34);
          _H15 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v117, 0.0), 8191.0)));
          __asm { FCVT            S4, H15 }
          _H13 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v118, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v119, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v120, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v121, 0.0), 8191.0)));
          _H9 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v122, 0.0), 8191.0)));
          _H8 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v123, 0.0), 8191.0)));
          _H31 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v124, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v125, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v126, 0.0), 8191.0)));
          _H28 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v127, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v128, 0.0), 8191.0)));
          v142 = v86 | (v86 << 8);
          if (v46)
            v143 = v142;
          else
            v143 = -1;
          if (v46)
            v144 = v87 | (v87 << 8);
          else
            v144 = -1;
          if (v46)
            v145 = v88 | (v88 << 8);
          else
            v145 = -1;
          v146 = v89 | (v89 << 8);
          if (!v46)
            v146 = -1;
          v147 = 65535.0;
          v5 = 65535.0;
          if (_S4 <= 65535.0)
          {
            __asm { FCVT            S1, H15 }
            v5 = _S4;
            if (_S1 < 0.0)
              v5 = 0.0;
          }
          __asm { FCVT            S15, H13 }
          *(_WORD *)v47 = llroundf(v5);
          v150 = 65535.0;
          if (_S15 <= 65535.0)
          {
            __asm { FCVT            S1, H13 }
            v150 = _S15;
            if (_S1 < 0.0)
              v150 = 0.0;
          }
          __asm { FCVT            S13, H12 }
          *((_WORD *)v47 + 1) = llroundf(v150);
          v153 = 65535.0;
          if (_S13 <= 65535.0)
          {
            __asm { FCVT            S1, H12 }
            v153 = _S13;
            if (_S1 < 0.0)
              v153 = 0.0;
          }
          __asm { FCVT            S12, H11 }
          *((_WORD *)v47 + 2) = llroundf(v153);
          *((_WORD *)v47 + 3) = v143;
          v156 = 65535.0;
          v23 = v185;
          if (_S12 <= 65535.0)
          {
            __asm { FCVT            S1, H11 }
            v156 = _S12;
            if (_S1 < 0.0)
              v156 = 0.0;
          }
          __asm { FCVT            S11, H10 }
          *((_WORD *)v47 + 4) = llroundf(v156);
          v159 = 65535.0;
          if (_S11 <= 65535.0)
          {
            __asm { FCVT            S1, H10 }
            v159 = _S11;
            if (_S1 < 0.0)
              v159 = 0.0;
          }
          __asm { FCVT            S10, H9 }
          *((_WORD *)v47 + 5) = llroundf(v159);
          v162 = 65535.0;
          if (_S10 <= 65535.0)
          {
            __asm { FCVT            S1, H9 }
            v162 = _S10;
            if (_S1 < 0.0)
              v162 = 0.0;
          }
          __asm { FCVT            S9, H8 }
          *((_WORD *)v47 + 6) = llroundf(v162);
          *((_WORD *)v47 + 7) = v144;
          v165 = 65535.0;
          if (_S9 <= 65535.0)
          {
            __asm { FCVT            S1, H8 }
            v165 = _S9;
            if (_S1 < 0.0)
              v165 = 0.0;
          }
          __asm { FCVT            S8, H31 }
          *(_WORD *)v53 = llroundf(v165);
          v168 = 65535.0;
          if (_S8 <= 65535.0)
          {
            __asm { FCVT            S1, H31 }
            v168 = _S8;
            if (_S1 < 0.0)
              v168 = 0.0;
          }
          __asm { FCVT            S31, H30 }
          *((_WORD *)v53 + 1) = llroundf(v168);
          v171 = 65535.0;
          if (_S31 <= 65535.0)
          {
            __asm { FCVT            S1, H30 }
            v171 = _S31;
            if (_S1 < 0.0)
              v171 = 0.0;
          }
          __asm { FCVT            S30, H29 }
          *((_WORD *)v53 + 2) = llroundf(v171);
          *((_WORD *)v53 + 3) = v145;
          v174 = 65535.0;
          if (_S30 <= 65535.0)
          {
            __asm { FCVT            S1, H29 }
            v174 = _S30;
            if (_S1 < 0.0)
              v174 = 0.0;
          }
          __asm { FCVT            S29, H28 }
          *((_WORD *)v53 + 4) = llroundf(v174);
          v22 = 65535.0;
          if (_S29 <= 65535.0)
          {
            __asm { FCVT            S1, H28 }
            v22 = _S29;
            if (_S1 < 0.0)
              v22 = 0.0;
          }
          __asm { FCVT            S28, H27 }
          *((_WORD *)v53 + 5) = llroundf(v22);
          if (_S28 <= 65535.0)
          {
            __asm { FCVT            S1, H27 }
            v147 = _S28;
            if (_S1 < 0.0)
              v147 = 0.0;
          }
          v42 += 2;
          v54 += 2;
          v47 += 16;
          *((_WORD *)v53 + 6) = llroundf(v147);
          *((_WORD *)v53 + 7) = v146;
          v53 += 16;
          v52 += 2;
          v24 = v184;
        }
        while (v11 > v52);
      }
      v42 = &v51[v17];
      result += v18;
      v46 = &v50[v19];
      v47 = &v49[v20];
      v10 += 2;
    }
    while (v13 > v10);
  }
  return result;
}

uint64_t vt_Copy_420vf_rgb_l64r(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[3];
  v18 = a6[5];
  if ((v14 & 1) != 0)
  {
    ++v18;
    ++v14;
    if ((v11 & 1) != 0)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  v19 = a6[2];
  v20 = a6[4];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9)
    v12 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15)
    v21 = v19;
  else
    v21 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v18;
  if (v12 >= v21)
    v24 = v21;
  else
    v24 = v12;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_rgb_l64r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_420vf_rgb_l64r_GCD(unsigned __int8 *result, uint64_t a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  BOOL v39;
  char *v40;
  uint64_t v41;
  char *v42;
  unsigned __int8 *v43;
  _BYTE *v44;
  unint64_t v45;
  char *v46;
  _BYTE *v47;
  unsigned __int8 *v48;
  __int16 v49;
  __int16 v50;
  __int16 v51;
  __int16 v52;
  float v53;
  float v54;
  float v55;
  float v56;
  __int16 v57;
  __int16 v58;
  __int16 v59;
  __int16 v60;
  __int16 v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  BOOL v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;

  v7 = *(_QWORD *)(result + 28);
  v8 = 2 * *result;
  v9 = v7 * a2 / v8;
  v10 = (v7 + v7 * a2) / v8;
  if (2 * v10 != 2 * v9)
  {
    v11 = 0;
    v12 = *(_QWORD *)(result + 20);
    v13 = *(_QWORD *)(result + 44) + 2 * v9;
    v14 = 2 * v10 - 2 * v9;
    v15 = *((_QWORD *)result + 19);
    v16 = (_QWORD *)*((_QWORD *)result + 7);
    v17 = (uint64_t *)*((_QWORD *)result + 8);
    v18 = *v17;
    v19 = v17[1];
    v20 = v17[2];
    v21 = **((_QWORD **)result + 17);
    *(float *)&v22 = (float)*(unsigned int *)(v15 + 128);
    *(float *)&v23 = (float)*(unsigned int *)(v15 + 136);
    v24 = *(float *)&v23 / *(float *)&v22;
    LOWORD(v22) = *(_WORD *)(v15 + 140);
    v25 = (float)v22;
    LOWORD(v23) = *(_WORD *)(v15 + 142);
    v26 = (float)v23;
    v27 = v24 * *(float *)v15;
    v28 = v24 * *(float *)(v15 + 8);
    v29 = v24 * *(float *)(v15 + 16);
    v30 = v24 * *(float *)(v15 + 20);
    v31 = v24 * *(float *)(v15 + 28);
    v32 = *((_QWORD *)result + 14);
    v33 = *((_QWORD *)result + 13) * a2;
    v34 = (_QWORD *)*((_QWORD *)result + 16);
    v35 = *((_QWORD *)result + 15) + 2 * (v33 / v8);
    v36 = *(_QWORD *)(result + 36);
    v37 = (_BYTE *)(*v16 + v18 * v13 + v36);
    v38 = v16[2];
    v39 = v38 == 0;
    result = (unsigned __int8 *)(v38 + v20 * v13 + v36);
    if (v39)
      result = 0;
    v40 = (char *)(*v34 + v35 * v21 + 8 * v32);
    v41 = v16[1] + v19 * (v13 / 2) + v36;
    do
    {
      v42 = &v40[v21];
      v43 = &result[v20];
      v44 = &v37[v18];
      if (v12)
      {
        v45 = 0;
        v46 = &v40[v21];
        v47 = &v37[v18];
        v48 = &result[v20];
        do
        {
          if (result)
          {
            v49 = *result;
            v50 = result[1];
            result += 2;
            v51 = *v48;
            v52 = v48[1];
            v48 += 2;
          }
          else
          {
            v49 = 0;
            v50 = 0;
            v51 = 0;
            v52 = 0;
          }
          LOBYTE(v2) = *(_BYTE *)(v41 + v45 + 1);
          v53 = (float)LODWORD(v2) - v26;
          v54 = v28 * v53;
          LOBYTE(v3) = *v37;
          v55 = v27 * (float)((float)LODWORD(v3) - v25);
          v56 = (float)(v28 * v53) + v55;
          v57 = v49 | (v49 << 8);
          if (result)
            v58 = v57;
          else
            v58 = -1;
          if (result)
            v59 = v50 | (v50 << 8);
          else
            v59 = -1;
          if (result)
            v60 = v51 | (v51 << 8);
          else
            v60 = -1;
          v61 = v52 | (v52 << 8);
          if (!result)
            v61 = -1;
          v62 = 65535.0;
          if (v56 <= 65535.0)
          {
            v62 = (float)(v28 * v53) + v55;
            if (v56 < 0.0)
              v62 = 0.0;
          }
          LOBYTE(v56) = *(_BYTE *)(v41 + v45);
          v63 = (float)LODWORD(v56) - v26;
          v64 = (float)(v30 * v53) + (float)(v63 * v29);
          LOBYTE(v6) = v37[1];
          LOBYTE(v5) = *v47;
          LOBYTE(v4) = v47[1];
          *(_WORD *)v40 = llroundf(v62);
          v65 = 65535.0;
          if ((float)(v55 + v64) <= 65535.0)
          {
            v65 = v55 + v64;
            if ((float)(v55 + v64) < 0.0)
              v65 = 0.0;
          }
          v3 = v31 * v63;
          v66 = v3 + v55;
          *((_WORD *)v40 + 1) = llroundf(v65);
          v67 = 65535.0;
          if (v66 <= 65535.0)
          {
            v67 = v66;
            if (v66 < 0.0)
              v67 = 0.0;
          }
          v68 = v27 * (float)((float)LODWORD(v6) - v25);
          *((_WORD *)v40 + 2) = llroundf(v67);
          *((_WORD *)v40 + 3) = v58;
          v69 = 65535.0;
          if ((float)(v54 + v68) <= 65535.0)
          {
            v69 = v54 + v68;
            if ((float)(v54 + v68) < 0.0)
              v69 = 0.0;
          }
          *((_WORD *)v40 + 4) = llroundf(v69);
          v70 = 65535.0;
          if ((float)(v64 + v68) <= 65535.0)
          {
            v70 = v64 + v68;
            if ((float)(v64 + v68) < 0.0)
              v70 = 0.0;
          }
          v71 = v3 + v68;
          *((_WORD *)v40 + 5) = llroundf(v70);
          v72 = (float)(v3 + v68) <= 65535.0;
          v73 = 65535.0;
          if (v72)
          {
            v73 = v71;
            if (v71 < 0.0)
              v73 = 0.0;
          }
          v74 = v27 * (float)((float)LODWORD(v5) - v25);
          *((_WORD *)v40 + 6) = llroundf(v73);
          *((_WORD *)v40 + 7) = v59;
          v75 = 65535.0;
          if ((float)(v54 + v74) <= 65535.0)
          {
            v75 = v54 + v74;
            if ((float)(v54 + v74) < 0.0)
              v75 = 0.0;
          }
          *(_WORD *)v46 = llroundf(v75);
          v76 = 65535.0;
          if ((float)(v64 + v74) <= 65535.0)
          {
            v76 = v64 + v74;
            if ((float)(v64 + v74) < 0.0)
              v76 = 0.0;
          }
          v6 = v3 + v74;
          *((_WORD *)v46 + 1) = llroundf(v76);
          v72 = (float)(v3 + v74) <= 65535.0;
          v5 = 65535.0;
          if (v72)
          {
            v5 = v6;
            if (v6 < 0.0)
              v5 = 0.0;
          }
          v4 = v27 * (float)((float)LODWORD(v4) - v25);
          v77 = v54 + v4;
          *((_WORD *)v46 + 2) = llroundf(v5);
          *((_WORD *)v46 + 3) = v60;
          v72 = (float)(v54 + v4) <= 65535.0;
          v78 = 65535.0;
          if (v72)
          {
            v78 = v77;
            if (v77 < 0.0)
              v78 = 0.0;
          }
          v79 = v64 + v4;
          *((_WORD *)v46 + 4) = llroundf(v78);
          v80 = 65535.0;
          if (v79 <= 65535.0)
          {
            v80 = v79;
            if (v79 < 0.0)
              v80 = 0.0;
          }
          *((_WORD *)v46 + 5) = llroundf(v80);
          v2 = 65535.0;
          if ((float)(v3 + v4) <= 65535.0)
          {
            v2 = v3 + v4;
            if ((float)(v3 + v4) < 0.0)
              v2 = 0.0;
          }
          v37 += 2;
          v47 += 2;
          v40 += 16;
          *((_WORD *)v46 + 6) = llroundf(v2);
          *((_WORD *)v46 + 7) = v61;
          v46 += 16;
          v45 += 2;
        }
        while (v12 > v45);
      }
      v37 = &v44[v18];
      v41 += v19;
      result = &v43[v20];
      v40 = &v42[v21];
      v11 += 2;
    }
    while (v14 > v11);
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Tone_Mat_TRC_b64a(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[3];
  v18 = a6[5];
  if ((v14 & 1) != 0)
  {
    ++v18;
    ++v14;
    if ((v11 & 1) != 0)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  v19 = a6[2];
  v20 = a6[4];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9)
    v12 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15)
    v21 = v19;
  else
    v21 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v18;
  if (v12 >= v21)
    v24 = v21;
  else
    v24 = v12;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Tone_Mat_TRC_b64a_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_420vf_TRC_Tone_Mat_TRC_b64a_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  float v33;
  float v34;
  float v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  unint64_t v50;
  char *v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  float v54;
  unsigned int v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  BOOL v80;
  float v81;
  float v82;
  float v83;
  int v84;
  int v85;
  int v86;
  int v87;
  float v89;
  float v105;
  float v106;
  float v107;
  float v112;
  float v113;
  float v118;
  float v119;
  float v120;
  float v125;
  float v126;
  float v128;
  float v129;
  float v131;
  float v132;
  float v133;
  float v135;
  float v136;
  float v138;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  int v168;
  unsigned int v169;
  unsigned int v170;
  unsigned int v171;
  unsigned int v172;
  float v173;
  float v174;
  float v177;
  float v180;
  unsigned int v182;
  float v184;
  float v187;
  float v190;
  unsigned int v192;
  float v194;
  float v197;
  float v200;
  unsigned int v202;
  float v206;
  unint64_t v210;
  float v211;
  float v212;
  float v213;
  float v214;
  float v215;
  float v216;
  float v217;
  float v218;
  float v219;
  float v220;
  float v221;

  v5 = *(_QWORD *)(result + 28);
  v6 = 2 * *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = *(_QWORD *)(result + 44) + 2 * v7;
    v210 = 2 * v8 - 2 * v7;
    v12 = *((_QWORD *)result + 19);
    v13 = (_QWORD *)*((_QWORD *)result + 7);
    v14 = (uint64_t *)*((_QWORD *)result + 8);
    v15 = *v14;
    v16 = v14[1];
    v17 = v14[2];
    v18 = **((_QWORD **)result + 17);
    v19 = 8191.0 / (float)*(unsigned int *)(v12 + 128);
    LOWORD(a5) = *(_WORD *)(v12 + 140);
    v20 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v12 + 142);
    v21 = (float)LODWORD(a5);
    v22 = v19 * *(float *)v12;
    v217 = v19 * *(float *)(v12 + 16);
    v218 = v19 * *(float *)(v12 + 8);
    v215 = v19 * *(float *)(v12 + 28);
    v216 = v19 * *(float *)(v12 + 20);
    v213 = *(float *)(v12 + 76);
    v214 = *(float *)(v12 + 72);
    v23 = *(float *)(v12 + 84);
    v24 = *(float *)(v12 + 88);
    v211 = v23;
    v212 = *(float *)(v12 + 80);
    v25 = *(float *)(v12 + 92);
    v26 = *(float *)(v12 + 96);
    v27 = *(float *)(v12 + 100);
    v28 = *(float *)(v12 + 104);
    v29 = v12 + 164;
    v30 = v12 + 16548;
    v31 = v12 + 32932;
    v32 = *(float *)(v12 + 108);
    v33 = *(float *)(v12 + 112);
    v34 = *(float *)(v12 + 116);
    v35 = *(float *)(v12 + 120);
    v36 = *((_QWORD *)result + 14);
    v37 = (_QWORD *)*((_QWORD *)result + 16);
    v38 = *((_QWORD *)result + 15) + 2 * (*((_QWORD *)result + 13) * a2 / v6);
    v39 = *(_QWORD *)(result + 36);
    result = (unsigned __int8 *)(*v13 + v15 * v11 + v39);
    v40 = v13[2];
    _ZF = v40 == 0;
    v42 = (unsigned __int8 *)(v40 + v17 * v11 + v39);
    if (_ZF)
      v43 = 0;
    else
      v43 = v42;
    v44 = (char *)(*v37 + v38 * v18 + 8 * v36);
    if (v11 >= 0)
      v45 = v11;
    else
      v45 = v11 + 1;
    v46 = v13[1] + v16 * (v45 >> 1) + v39;
    v220 = (float)LODWORD(a5);
    v221 = v20;
    v219 = v22;
    do
    {
      v47 = &v44[v18];
      v48 = &v43[v17];
      v49 = &result[v15];
      if (v10)
      {
        v50 = 0;
        v51 = &v44[v18];
        v52 = &result[v15];
        v53 = &v43[v17];
        do
        {
          LOBYTE(v23) = *(_BYTE *)(v46 + v50 + 1);
          v54 = (float)LODWORD(v23) - v21;
          v55 = LODWORD(v218);
          v56 = v218 * v54;
          LOBYTE(v55) = *result;
          v57 = v22 * (float)((float)v55 - v20);
          v58 = (float)(v218 * v54) + v57;
          v59 = 8191.0;
          if (v58 <= 8191.0)
          {
            v59 = (float)(v218 * v54) + v57;
            if (v58 < 0.0)
              v59 = 0.0;
          }
          LOBYTE(v58) = *(_BYTE *)(v46 + v50);
          v60 = (float)LODWORD(v58) - v21;
          v61 = (float)(v216 * v54) + (float)(v60 * v217);
          v62 = 8191.0;
          if ((float)(v57 + v61) <= 8191.0)
          {
            v62 = v57 + v61;
            if ((float)(v57 + v61) < 0.0)
              v62 = 0.0;
          }
          v63 = v215 * v60;
          v64 = (float)(v215 * v60) + v57;
          v65 = 8191.0;
          if (v64 <= 8191.0)
          {
            v65 = v64;
            if (v64 < 0.0)
              v65 = 0.0;
          }
          LOBYTE(v64) = result[1];
          v66 = v22 * (float)((float)LODWORD(v64) - v20);
          v67 = 8191.0;
          if ((float)(v56 + v66) <= 8191.0)
          {
            v67 = v56 + v66;
            if ((float)(v56 + v66) < 0.0)
              v67 = 0.0;
          }
          v68 = 8191.0;
          if ((float)(v61 + v66) <= 8191.0)
          {
            v68 = v61 + v66;
            if ((float)(v61 + v66) < 0.0)
              v68 = 0.0;
          }
          v69 = v63 + v66;
          v70 = 8191.0;
          if (v69 <= 8191.0)
          {
            v70 = v69;
            if (v69 < 0.0)
              v70 = 0.0;
          }
          LOBYTE(v69) = *v52;
          v71 = (float)LODWORD(v69) - v20;
          v72 = v22 * v71;
          v73 = 8191.0;
          if ((float)(v56 + (float)(v22 * v71)) <= 8191.0)
          {
            v73 = v56 + (float)(v22 * v71);
            if (v73 < 0.0)
              v73 = 0.0;
          }
          v74 = 8191.0;
          if ((float)(v61 + v72) <= 8191.0)
          {
            v74 = v61 + v72;
            if ((float)(v61 + v72) < 0.0)
              v74 = 0.0;
          }
          v75 = v63 + v72;
          v76 = 8191.0;
          if (v75 <= 8191.0)
          {
            v76 = v75;
            if (v75 < 0.0)
              v76 = 0.0;
          }
          LOBYTE(v71) = v52[1];
          v77 = v22 * (float)((float)LODWORD(v71) - v20);
          v78 = 8191.0;
          if ((float)(v56 + v77) <= 8191.0)
          {
            v78 = v56 + v77;
            if ((float)(v56 + v77) < 0.0)
              v78 = 0.0;
          }
          v79 = v61 + v77;
          v80 = (float)(v61 + v77) <= 8191.0;
          v81 = 8191.0;
          if (v80)
          {
            v81 = v79;
            if (v79 < 0.0)
              v81 = 0.0;
          }
          v82 = v63 + v77;
          v83 = 8191.0;
          if (v82 <= 8191.0)
          {
            v83 = v82;
            if (v82 < 0.0)
              v83 = 0.0;
          }
          if (v43)
          {
            v84 = *v43;
            v85 = v43[1];
            v43 += 2;
            v86 = *v53;
            v87 = v53[1];
            v53 += 2;
          }
          else
          {
            v84 = 0;
            v85 = 0;
            v86 = 0;
            v87 = 0;
          }
          _S1 = fmaxf(v59, 0.0);
          v89 = 8191.0;
          LOWORD(_S1) = *(_WORD *)(v29 + 2 * llroundf(fminf(_S1, 8191.0)));
          __asm { FCVT            S12, H1 }
          LOWORD(_S1) = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v62, 0.0), 8191.0)));
          __asm { FCVT            S31, H1 }
          LOWORD(_S1) = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v65, 0.0), 8191.0)));
          __asm { FCVT            S8, H1 }
          _H3 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v67, 0.0), 8191.0)));
          _H16 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v68, 0.0), 8191.0)));
          _H17 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          _H7 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          _H9 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          v105 = fmaxf(_S12, fmaxf(_S31, _S8));
          v106 = (float)((float)((float)(v33 * _S31) + (float)(v32 * _S12)) + (float)(v34 * _S8)) + (float)(v35 * v105);
          v107 = 8191.0;
          if (v106 <= 8191.0)
          {
            v107 = (float)((float)((float)(v33 * _S31) + (float)(v32 * _S12)) + (float)(v34 * _S8))
                 + (float)(v35 * v105);
            if (v106 < 0.0)
              v107 = 0.0;
          }
          __asm
          {
            FCVT            S4, H3
            FCVT            S5, H16
            FCVT            S6, H17
          }
          _H13 = *(_WORD *)(v30 + 2 * llroundf(v107));
          v112 = (float)((float)((float)(v33 * _S5) + (float)(v32 * _S4)) + (float)(v34 * _S6))
               + (float)(v35 * fmaxf(_S4, fmaxf(_S5, _S6)));
          v113 = 8191.0;
          if (v112 <= 8191.0)
          {
            v113 = v112;
            if (v112 < 0.0)
              v113 = 0.0;
          }
          __asm
          {
            FCVT            S7, H7
            FCVT            S14, H2
            FCVT            S2, H1
          }
          _H1 = *(_WORD *)(v30 + 2 * llroundf(v113));
          v118 = fmaxf(_S7, fmaxf(_S14, _S2));
          v119 = (float)((float)((float)(v33 * _S14) + (float)(v32 * _S7)) + (float)(v34 * _S2)) + (float)(v35 * v118);
          v120 = 8191.0;
          if (v119 <= 8191.0)
          {
            v120 = (float)((float)((float)(v33 * _S14) + (float)(v32 * _S7)) + (float)(v34 * _S2)) + (float)(v35 * v118);
            if (v119 < 0.0)
              v120 = 0.0;
          }
          __asm
          {
            FCVT            S3, H9
            FCVT            S16, H10
            FCVT            S17, H11
          }
          _H9 = *(_WORD *)(v30 + 2 * llroundf(v120));
          v125 = fmaxf(_S3, fmaxf(_S16, _S17));
          v126 = (float)((float)((float)(v33 * _S16) + (float)(v32 * _S3)) + (float)(v34 * _S17)) + (float)(v35 * v125);
          if (v126 <= 8191.0)
          {
            v89 = (float)((float)((float)(v33 * _S16) + (float)(v32 * _S3)) + (float)(v34 * _S17)) + (float)(v35 * v125);
            if (v126 < 0.0)
              v89 = 0.0;
          }
          __asm { FCVT            S10, H13 }
          v128 = _S31 * _S10;
          v129 = _S8 * _S10;
          __asm { FCVT            S1, H1 }
          v131 = _S4 * _S1;
          v132 = _S5 * _S1;
          v133 = _S6 * _S1;
          __asm { FCVT            S6, H9 }
          v135 = _S7 * _S6;
          v136 = _S14 * _S6;
          _H30 = *(_WORD *)(v30 + 2 * llroundf(v89));
          v138 = _S2 * _S6;
          __asm { FCVT            S6, H30 }
          v140 = _S3 * _S6;
          v141 = _S16 * _S6;
          v142 = _S17 * _S6;
          v143 = (float)((float)(v213 * v128) + (float)((float)(_S12 * _S10) * v214)) + (float)(v129 * v212);
          v144 = (float)((float)(v24 * v128) + (float)((float)(_S12 * _S10) * v211)) + (float)(v129 * v25);
          v145 = (float)((float)(v27 * v128) + (float)((float)(_S12 * _S10) * v26)) + (float)(v129 * v28);
          v146 = (float)((float)(v213 * v132) + (float)(v131 * v214)) + (float)(v133 * v212);
          v147 = (float)((float)(v24 * v132) + (float)(v131 * v211)) + (float)(v133 * v25);
          v148 = (float)((float)(v27 * v132) + (float)(v131 * v26)) + (float)(v133 * v28);
          v149 = (float)((float)(v213 * v136) + (float)(v135 * v214)) + (float)(v138 * v212);
          v150 = (float)((float)(v24 * v136) + (float)(v135 * v211)) + (float)(v138 * v25);
          v151 = (float)((float)(v27 * v136) + (float)(v135 * v26)) + (float)(v138 * v28);
          v152 = (float)((float)(v213 * v141) + (float)(v140 * v214)) + (float)(v142 * v212);
          v153 = (float)((float)(v24 * v141) + (float)(v140 * v211)) + (float)(v142 * v25);
          v154 = (float)((float)(v27 * v141) + (float)(v140 * v26)) + (float)(v142 * v28);
          _H7 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v143, 0.0), 8191.0)));
          __asm { FCVT            S2, H7 }
          _H14 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v144, 0.0), 8191.0)));
          _H13 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v145, 0.0), 8191.0)));
          _H6 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v146, 0.0), 8191.0)));
          _H5 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v147, 0.0), 8191.0)));
          _H4 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v148, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v149, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v150, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v151, 0.0), 8191.0)));
          _H9 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v152, 0.0), 8191.0)));
          _H8 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v153, 0.0), 8191.0)));
          _H31 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v154, 0.0), 8191.0)));
          v168 = v84 | (v84 << 8);
          if (v43)
            v169 = v168;
          else
            v169 = -1;
          if (v43)
            v170 = v85 | (v85 << 8);
          else
            v170 = -1;
          if (v43)
            v171 = v86 | (v86 << 8);
          else
            v171 = -1;
          v172 = v87 | (v87 << 8);
          if (!v43)
            v172 = -1;
          v173 = 65535.0;
          v174 = 65535.0;
          if (_S2 <= 65535.0)
          {
            __asm { FCVT            S1, H7 }
            _NF = _S1 < 0.0;
            v174 = _S2;
            if (_NF)
              v174 = 0.0;
          }
          __asm { FCVT            S3, H14 }
          v177 = 65535.0;
          v22 = v219;
          if (_S3 <= 65535.0)
          {
            __asm { FCVT            S2, H14 }
            _NF = _S2 < 0.0;
            v177 = _S3;
            if (_NF)
              v177 = 0.0;
          }
          __asm { FCVT            S7, H13 }
          v180 = 65535.0;
          if (_S7 <= 65535.0)
          {
            __asm { FCVT            S3, H13 }
            _NF = _S3 < 0.0;
            v180 = _S7;
            if (_NF)
              v180 = 0.0;
          }
          v182 = llroundf(v177);
          __asm { FCVT            S2, H6 }
          *(_WORD *)v44 = bswap32(v169) >> 16;
          *((_WORD *)v44 + 1) = __rev16(llroundf(v174));
          *((_WORD *)v44 + 2) = __rev16(v182);
          *((_WORD *)v44 + 3) = __rev16(llroundf(v180));
          v184 = 65535.0;
          if (_S2 <= 65535.0)
          {
            __asm { FCVT            S1, H6 }
            _NF = _S1 < 0.0;
            v184 = _S2;
            if (_NF)
              v184 = 0.0;
          }
          __asm { FCVT            S3, H5 }
          v187 = 65535.0;
          v21 = v220;
          v20 = v221;
          if (_S3 <= 65535.0)
          {
            __asm { FCVT            S2, H5 }
            _NF = _S2 < 0.0;
            v187 = _S3;
            if (_NF)
              v187 = 0.0;
          }
          __asm { FCVT            S5, H4 }
          v190 = 65535.0;
          if (_S5 <= 65535.0)
          {
            __asm { FCVT            S3, H4 }
            _NF = _S3 < 0.0;
            v190 = _S5;
            if (_NF)
              v190 = 0.0;
          }
          v192 = llroundf(v187);
          __asm { FCVT            S2, H12 }
          *((_WORD *)v44 + 4) = bswap32(v170) >> 16;
          *((_WORD *)v44 + 5) = __rev16(llroundf(v184));
          *((_WORD *)v44 + 6) = __rev16(v192);
          *((_WORD *)v44 + 7) = __rev16(llroundf(v190));
          v194 = 65535.0;
          if (_S2 <= 65535.0)
          {
            __asm { FCVT            S1, H12 }
            _NF = _S1 < 0.0;
            v194 = _S2;
            if (_NF)
              v194 = 0.0;
          }
          __asm { FCVT            S3, H11 }
          v197 = 65535.0;
          if (_S3 <= 65535.0)
          {
            __asm { FCVT            S2, H11 }
            _NF = _S2 < 0.0;
            v197 = _S3;
            if (_NF)
              v197 = 0.0;
          }
          __asm { FCVT            S4, H10 }
          v200 = 65535.0;
          if (_S4 <= 65535.0)
          {
            __asm { FCVT            S3, H10 }
            _NF = _S3 < 0.0;
            v200 = _S4;
            if (_NF)
              v200 = 0.0;
          }
          v202 = llroundf(v197);
          __asm { FCVT            S2, H9 }
          *(_WORD *)v51 = bswap32(v171) >> 16;
          *((_WORD *)v51 + 1) = __rev16(llroundf(v194));
          *((_WORD *)v51 + 2) = __rev16(v202);
          *((_WORD *)v51 + 3) = __rev16(llroundf(v200));
          v23 = 65535.0;
          if (_S2 <= 65535.0)
          {
            __asm { FCVT            S1, H9 }
            _NF = _S1 < 0.0;
            v23 = _S2;
            if (_NF)
              v23 = 0.0;
          }
          __asm { FCVT            S3, H8 }
          v206 = 65535.0;
          if (_S3 <= 65535.0)
          {
            __asm { FCVT            S2, H8 }
            _NF = _S2 < 0.0;
            v206 = _S3;
            if (_NF)
              v206 = 0.0;
          }
          __asm { FCVT            S3, H31 }
          if (_S3 <= 65535.0)
          {
            __asm { FCVT            S4, H31 }
            v173 = _S3;
            if (_S4 < 0.0)
              v173 = 0.0;
          }
          result += 2;
          v52 += 2;
          v44 += 16;
          *((_WORD *)v51 + 4) = bswap32(v172) >> 16;
          *((_WORD *)v51 + 5) = __rev16(llroundf(v23));
          *((_WORD *)v51 + 6) = __rev16(llroundf(v206));
          *((_WORD *)v51 + 7) = __rev16(llroundf(v173));
          v51 += 16;
          v50 += 2;
        }
        while (v10 > v50);
      }
      result = &v49[v15];
      v46 += v16;
      v43 = &v48[v17];
      v44 = &v47[v18];
      v9 += 2;
    }
    while (v210 > v9);
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Mat_TRC_b64a(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[3];
  v18 = a6[5];
  if ((v14 & 1) != 0)
  {
    ++v18;
    ++v14;
    if ((v11 & 1) != 0)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  v19 = a6[2];
  v20 = a6[4];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9)
    v12 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15)
    v21 = v19;
  else
    v21 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v18;
  if (v12 >= v21)
    v24 = v21;
  else
    v24 = v12;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Mat_TRC_b64a_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_420vf_TRC_Mat_TRC_b64a_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  float v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  unsigned __int8 *v50;
  _BYTE *v51;
  unint64_t v52;
  char *v53;
  _BYTE *v54;
  unsigned __int8 *v55;
  unsigned int v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  BOOL v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  int v86;
  int v87;
  int v88;
  int v89;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  int v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int v146;
  float v147;
  float v150;
  float v153;
  float v156;
  float v159;
  float v162;
  float v165;
  float v168;
  float v171;
  unsigned int v173;
  float v175;
  float v181;
  float v182;
  float v183;
  float v184;
  float v185;
  float v186;

  v6 = *(_QWORD *)(result + 28);
  v7 = 2 * *result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (2 * v9 != 2 * v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)(result + 20);
    v12 = *(_QWORD *)(result + 44) + 2 * v8;
    v13 = 2 * v9 - 2 * v8;
    v14 = *((_QWORD *)result + 19);
    v15 = (_QWORD *)*((_QWORD *)result + 7);
    v16 = (uint64_t *)*((_QWORD *)result + 8);
    v17 = *v16;
    v18 = v16[1];
    v19 = v16[2];
    v20 = **((_QWORD **)result + 17);
    *(float *)&v21 = (float)*(unsigned int *)(v14 + 128);
    v22 = 8191.0 / *(float *)&v21;
    LOWORD(v21) = *(_WORD *)(v14 + 140);
    v23 = (float)v21;
    LOWORD(a5) = *(_WORD *)(v14 + 142);
    v24 = (float)LODWORD(a5);
    v25 = v22 * *(float *)v14;
    v183 = v22 * *(float *)(v14 + 16);
    v184 = v22 * *(float *)(v14 + 8);
    v181 = v22 * *(float *)(v14 + 28);
    v182 = v22 * *(float *)(v14 + 20);
    v26 = *(float *)(v14 + 72);
    v27 = *(float *)(v14 + 76);
    v28 = *(float *)(v14 + 80);
    v29 = *(float *)(v14 + 84);
    v30 = *(float *)(v14 + 88);
    v31 = *(float *)(v14 + 92);
    v32 = *(float *)(v14 + 96);
    v33 = *(float *)(v14 + 100);
    v34 = *(float *)(v14 + 104);
    v35 = v14 + 164;
    v36 = v14 + 16548;
    v37 = *((_QWORD *)result + 14);
    v38 = (_QWORD *)*((_QWORD *)result + 16);
    v39 = *((_QWORD *)result + 15) + 2 * (*((_QWORD *)result + 13) * a2 / v7);
    v40 = *(_QWORD *)(result + 36);
    v41 = v15[1];
    v42 = (_BYTE *)(*v15 + v17 * v12 + v40);
    v43 = v15[2];
    _ZF = v43 == 0;
    v45 = (unsigned __int8 *)(v43 + v19 * v12 + v40);
    if (_ZF)
      v46 = 0;
    else
      v46 = v45;
    v47 = (char *)(*v38 + v39 * v20 + 8 * v37);
    if (v12 >= 0)
      v48 = v12;
    else
      v48 = v12 + 1;
    result = (unsigned __int8 *)(v41 + v18 * (v48 >> 1) + v40);
    v185 = (float)LODWORD(a5);
    v186 = v23;
    do
    {
      v49 = &v47[v20];
      v50 = &v46[v19];
      v51 = &v42[v17];
      if (v11)
      {
        v52 = 0;
        v53 = &v47[v20];
        v54 = &v42[v17];
        v55 = &v46[v19];
        do
        {
          LOBYTE(v22) = result[v52 + 1];
          *(float *)&v56 = (float)LODWORD(v22);
          v57 = *(float *)&v56 - v24;
          v58 = v184 * (float)(*(float *)&v56 - v24);
          LOBYTE(v56) = *v42;
          v59 = v25 * (float)((float)v56 - v23);
          v60 = v58 + v59;
          v61 = 8191.0;
          if ((float)(v58 + v59) <= 8191.0)
          {
            v61 = v58 + v59;
            if (v60 < 0.0)
              v61 = 0.0;
          }
          LOBYTE(v60) = result[v52];
          v62 = (float)LODWORD(v60) - v24;
          v63 = (float)(v182 * v57) + (float)(v62 * v183);
          v64 = 8191.0;
          if ((float)(v59 + v63) <= 8191.0)
          {
            v64 = v59 + v63;
            if ((float)(v59 + v63) < 0.0)
              v64 = 0.0;
          }
          v65 = v181 * v62;
          v66 = (float)(v181 * v62) + v59;
          v67 = 8191.0;
          if (v66 <= 8191.0)
          {
            v67 = v66;
            if (v66 < 0.0)
              v67 = 0.0;
          }
          LOBYTE(v66) = v42[1];
          v68 = v25 * (float)((float)LODWORD(v66) - v23);
          v69 = 8191.0;
          if ((float)(v58 + v68) <= 8191.0)
          {
            v69 = v58 + v68;
            if ((float)(v58 + v68) < 0.0)
              v69 = 0.0;
          }
          v70 = 8191.0;
          if ((float)(v63 + v68) <= 8191.0)
          {
            v70 = v63 + v68;
            if ((float)(v63 + v68) < 0.0)
              v70 = 0.0;
          }
          v71 = v65 + v68;
          v72 = 8191.0;
          if (v71 <= 8191.0)
          {
            v72 = v71;
            if (v71 < 0.0)
              v72 = 0.0;
          }
          LOBYTE(v71) = *v54;
          v73 = v25 * (float)((float)LODWORD(v71) - v23);
          v74 = 8191.0;
          if ((float)(v58 + v73) <= 8191.0)
          {
            v74 = v58 + v73;
            if ((float)(v58 + v73) < 0.0)
              v74 = 0.0;
          }
          v75 = 8191.0;
          if ((float)(v63 + v73) <= 8191.0)
          {
            v75 = v63 + v73;
            if ((float)(v63 + v73) < 0.0)
              v75 = 0.0;
          }
          v76 = v65 + v73;
          v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            v77 = v76;
            if (v76 < 0.0)
              v77 = 0.0;
          }
          LOBYTE(v5) = v54[1];
          v78 = v25 * (float)((float)LODWORD(v5) - v23);
          v79 = v58 + v78;
          v80 = (float)(v58 + v78) <= 8191.0;
          v81 = 8191.0;
          if (v80)
          {
            v81 = v79;
            if (v79 < 0.0)
              v81 = 0.0;
          }
          v82 = v63 + v78;
          v80 = (float)(v63 + v78) <= 8191.0;
          v83 = 8191.0;
          if (v80)
          {
            v83 = v82;
            if (v82 < 0.0)
              v83 = 0.0;
          }
          v84 = v65 + v78;
          v85 = 8191.0;
          if (v84 <= 8191.0)
          {
            v85 = v84;
            if (v84 < 0.0)
              v85 = 0.0;
          }
          if (v46)
          {
            v86 = *v46;
            v87 = v46[1];
            v46 += 2;
            v88 = *v55;
            v89 = v55[1];
            v55 += 2;
          }
          else
          {
            v86 = 0;
            v87 = 0;
            v88 = 0;
            v89 = 0;
          }
          _H4 = *(_WORD *)(v35 + 2 * llroundf(fminf(fmaxf(v61, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H26 = *(_WORD *)(v35 + 2 * llroundf(fminf(fmaxf(v64, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v35 + 2 * llroundf(fminf(fmaxf(v67, 0.0), 8191.0)));
          __asm
          {
            FCVT            S26, H26
            FCVT            S27, H27
          }
          _H28 = *(_WORD *)(v35 + 2 * llroundf(fminf(fmaxf(v69, 0.0), 8191.0)));
          __asm { FCVT            S28, H28 }
          _H29 = *(_WORD *)(v35 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          _H30 = *(_WORD *)(v35 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm { FCVT            S30, H30 }
          _H31 = *(_WORD *)(v35 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          __asm { FCVT            S31, H31 }
          _H9 = *(_WORD *)(v35 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v35 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          __asm
          {
            FCVT            S9, H9
            FCVT            S12, H12
          }
          _H8 = *(_WORD *)(v35 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          __asm { FCVT            S8, H8 }
          _H10 = *(_WORD *)(v35 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          _H11 = *(_WORD *)(v35 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          v117 = (float)((float)(v27 * _S26) + (float)(_S4 * v26)) + (float)(_S27 * v28);
          v118 = (float)((float)(v30 * _S26) + (float)(_S4 * v29)) + (float)(_S27 * v31);
          v119 = (float)((float)(v33 * _S26) + (float)(_S4 * v32)) + (float)(_S27 * v34);
          v120 = (float)((float)(v27 * _S29) + (float)(_S28 * v26)) + (float)(_S30 * v28);
          v121 = (float)((float)(v30 * _S29) + (float)(_S28 * v29)) + (float)(_S30 * v31);
          v122 = (float)((float)(v33 * _S29) + (float)(_S28 * v32)) + (float)(_S30 * v34);
          v123 = (float)((float)(v27 * _S9) + (float)(_S31 * v26)) + (float)(_S12 * v28);
          v124 = (float)((float)(v30 * _S9) + (float)(_S31 * v29)) + (float)(_S12 * v31);
          v125 = (float)((float)(v33 * _S9) + (float)(_S31 * v32)) + (float)(_S12 * v34);
          v126 = (float)((float)(v27 * _S10) + (float)(_S8 * v26)) + (float)(_S11 * v28);
          v127 = (float)((float)(v30 * _S10) + (float)(_S8 * v29)) + (float)(_S11 * v31);
          v128 = (float)((float)(v33 * _S10) + (float)(_S8 * v32)) + (float)(_S11 * v34);
          _H15 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v117, 0.0), 8191.0)));
          __asm { FCVT            S4, H15 }
          _H13 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v118, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v119, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v120, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v121, 0.0), 8191.0)));
          _H9 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v122, 0.0), 8191.0)));
          _H8 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v123, 0.0), 8191.0)));
          _H31 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v124, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v125, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v126, 0.0), 8191.0)));
          _H28 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v127, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v128, 0.0), 8191.0)));
          v142 = v86 | (v86 << 8);
          if (v46)
            v143 = v142;
          else
            v143 = -1;
          if (v46)
            v144 = v87 | (v87 << 8);
          else
            v144 = -1;
          if (v46)
            v145 = v88 | (v88 << 8);
          else
            v145 = -1;
          v146 = v89 | (v89 << 8);
          if (!v46)
            v146 = -1;
          v147 = 65535.0;
          v5 = 65535.0;
          if (_S4 <= 65535.0)
          {
            __asm { FCVT            S1, H15 }
            v5 = _S4;
            if (_S1 < 0.0)
              v5 = 0.0;
          }
          __asm { FCVT            S15, H13 }
          v150 = 65535.0;
          if (_S15 <= 65535.0)
          {
            __asm { FCVT            S1, H13 }
            v150 = _S15;
            if (_S1 < 0.0)
              v150 = 0.0;
          }
          __asm { FCVT            S15, H12 }
          v153 = 65535.0;
          if (_S15 <= 65535.0)
          {
            __asm { FCVT            S1, H12 }
            v153 = _S15;
            if (_S1 < 0.0)
              v153 = 0.0;
          }
          __asm { FCVT            S12, H11 }
          *(_WORD *)v47 = bswap32(v143) >> 16;
          *((_WORD *)v47 + 1) = __rev16(llroundf(v5));
          *((_WORD *)v47 + 2) = __rev16(llroundf(v150));
          *((_WORD *)v47 + 3) = __rev16(llroundf(v153));
          v156 = 65535.0;
          if (_S12 <= 65535.0)
          {
            __asm { FCVT            S1, H11 }
            v156 = _S12;
            if (_S1 < 0.0)
              v156 = 0.0;
          }
          __asm { FCVT            S12, H10 }
          v159 = 65535.0;
          v23 = v186;
          if (_S12 <= 65535.0)
          {
            __asm { FCVT            S1, H10 }
            v159 = _S12;
            if (_S1 < 0.0)
              v159 = 0.0;
          }
          __asm { FCVT            S12, H9 }
          v162 = 65535.0;
          if (_S12 <= 65535.0)
          {
            __asm { FCVT            S1, H9 }
            v162 = _S12;
            if (_S1 < 0.0)
              v162 = 0.0;
          }
          __asm { FCVT            S9, H8 }
          *((_WORD *)v47 + 4) = bswap32(v144) >> 16;
          *((_WORD *)v47 + 5) = __rev16(llroundf(v156));
          *((_WORD *)v47 + 6) = __rev16(llroundf(v159));
          *((_WORD *)v47 + 7) = __rev16(llroundf(v162));
          v165 = 65535.0;
          if (_S9 <= 65535.0)
          {
            __asm { FCVT            S1, H8 }
            v165 = _S9;
            if (_S1 < 0.0)
              v165 = 0.0;
          }
          __asm { FCVT            S9, H31 }
          v168 = 65535.0;
          if (_S9 <= 65535.0)
          {
            __asm { FCVT            S1, H31 }
            v168 = _S9;
            if (_S1 < 0.0)
              v168 = 0.0;
          }
          __asm { FCVT            S9, H30 }
          v171 = 65535.0;
          if (_S9 <= 65535.0)
          {
            __asm { FCVT            S1, H30 }
            v171 = _S9;
            if (_S1 < 0.0)
              v171 = 0.0;
          }
          v173 = llroundf(v165);
          __asm { FCVT            S4, H29 }
          *(_WORD *)v53 = bswap32(v145) >> 16;
          *((_WORD *)v53 + 1) = __rev16(v173);
          *((_WORD *)v53 + 2) = __rev16(llroundf(v168));
          *((_WORD *)v53 + 3) = __rev16(llroundf(v171));
          v175 = 65535.0;
          if (_S4 <= 65535.0)
          {
            __asm { FCVT            S1, H29 }
            v175 = _S4;
            if (_S1 < 0.0)
              v175 = 0.0;
          }
          __asm { FCVT            S29, H28 }
          v22 = 65535.0;
          if (_S29 <= 65535.0)
          {
            __asm { FCVT            S1, H28 }
            v22 = _S29;
            if (_S1 < 0.0)
              v22 = 0.0;
          }
          __asm { FCVT            S28, H27 }
          if (_S28 <= 65535.0)
          {
            __asm { FCVT            S1, H27 }
            v147 = _S28;
            if (_S1 < 0.0)
              v147 = 0.0;
          }
          v42 += 2;
          v54 += 2;
          v47 += 16;
          *((_WORD *)v53 + 4) = bswap32(v146) >> 16;
          *((_WORD *)v53 + 5) = __rev16(llroundf(v175));
          *((_WORD *)v53 + 6) = __rev16(llroundf(v22));
          *((_WORD *)v53 + 7) = __rev16(llroundf(v147));
          v53 += 16;
          v52 += 2;
          v24 = v185;
        }
        while (v11 > v52);
      }
      v42 = &v51[v17];
      result += v18;
      v46 = &v50[v19];
      v47 = &v49[v20];
      v10 += 2;
    }
    while (v13 > v10);
  }
  return result;
}

uint64_t vt_Copy_420vf_rgb_b64a(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[3];
  v18 = a6[5];
  if ((v14 & 1) != 0)
  {
    ++v18;
    ++v14;
    if ((v11 & 1) != 0)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  v19 = a6[2];
  v20 = a6[4];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9)
    v12 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15)
    v21 = v19;
  else
    v21 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v18;
  if (v12 >= v21)
    v24 = v21;
  else
    v24 = v12;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_rgb_b64a_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_420vf_rgb_b64a_GCD(unsigned __int8 *result, uint64_t a2)
{
  float v2;
  float v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  BOOL v36;
  char *v37;
  uint64_t v38;
  char *v39;
  unsigned __int8 *v40;
  _BYTE *v41;
  unint64_t v42;
  char *v43;
  _BYTE *v44;
  unsigned __int8 *v45;
  int v46;
  int v47;
  int v48;
  int v49;
  float v50;
  float v51;
  float v52;
  float v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  BOOL v77;
  float v78;
  float v79;
  unsigned int v80;
  float v81;
  float v82;
  float v83;
  float v84;

  v4 = *(_QWORD *)(result + 28);
  v5 = 2 * *result;
  v6 = v4 * a2 / v5;
  v7 = (v4 + v4 * a2) / v5;
  if (2 * v7 != 2 * v6)
  {
    v8 = 0;
    v9 = *(_QWORD *)(result + 20);
    v10 = *(_QWORD *)(result + 44) + 2 * v6;
    v11 = 2 * v7 - 2 * v6;
    v12 = *((_QWORD *)result + 19);
    v13 = (_QWORD *)*((_QWORD *)result + 7);
    v14 = (uint64_t *)*((_QWORD *)result + 8);
    v15 = *v14;
    v16 = v14[1];
    v17 = v14[2];
    v18 = **((_QWORD **)result + 17);
    *(float *)&v19 = (float)*(unsigned int *)(v12 + 128);
    *(float *)&v20 = (float)*(unsigned int *)(v12 + 136);
    v21 = *(float *)&v20 / *(float *)&v19;
    LOWORD(v19) = *(_WORD *)(v12 + 140);
    v22 = (float)v19;
    LOWORD(v20) = *(_WORD *)(v12 + 142);
    v23 = (float)v20;
    v24 = v21 * *(float *)v12;
    v25 = v21 * *(float *)(v12 + 8);
    v26 = v21 * *(float *)(v12 + 16);
    v27 = v21 * *(float *)(v12 + 20);
    v28 = v21 * *(float *)(v12 + 28);
    v29 = *((_QWORD *)result + 14);
    v30 = *((_QWORD *)result + 13) * a2;
    v31 = (_QWORD *)*((_QWORD *)result + 16);
    v32 = *((_QWORD *)result + 15) + 2 * (v30 / v5);
    v33 = *(_QWORD *)(result + 36);
    v34 = (_BYTE *)(*v13 + v15 * v10 + v33);
    v35 = v13[2];
    v36 = v35 == 0;
    result = (unsigned __int8 *)(v35 + v17 * v10 + v33);
    if (v36)
      result = 0;
    v37 = (char *)(*v31 + v32 * v18 + 8 * v29);
    v38 = v13[1] + v16 * (v10 / 2) + v33;
    do
    {
      v39 = &v37[v18];
      v40 = &result[v17];
      v41 = &v34[v15];
      if (v9)
      {
        v42 = 0;
        v43 = &v37[v18];
        v44 = &v34[v15];
        v45 = &result[v17];
        do
        {
          if (result)
          {
            v46 = *result;
            v47 = result[1];
            result += 2;
            v48 = *v45;
            v49 = v45[1];
            v45 += 2;
          }
          else
          {
            v46 = 0;
            v47 = 0;
            v48 = 0;
            v49 = 0;
          }
          LOBYTE(v2) = *(_BYTE *)(v38 + v42 + 1);
          v50 = (float)LODWORD(v2) - v23;
          v51 = v25 * v50;
          LOBYTE(v3) = *v34;
          v52 = v24 * (float)((float)LODWORD(v3) - v22);
          v53 = (float)(v25 * v50) + v52;
          v54 = v46 | (v46 << 8);
          if (result)
            v55 = v54;
          else
            v55 = -1;
          if (result)
            v56 = v47 | (v47 << 8);
          else
            v56 = -1;
          if (result)
            v57 = v48 | (v48 << 8);
          else
            v57 = -1;
          v58 = v49 | (v49 << 8);
          if (!result)
            v58 = -1;
          v59 = 65535.0;
          if (v53 <= 65535.0)
          {
            v59 = (float)(v25 * v50) + v52;
            if (v53 < 0.0)
              v59 = 0.0;
          }
          LOBYTE(v53) = *(_BYTE *)(v38 + v42);
          v60 = (float)LODWORD(v53) - v23;
          v61 = (float)(v27 * v50) + (float)(v60 * v26);
          v62 = v52 + v61;
          v63 = 65535.0;
          if ((float)(v52 + v61) <= 65535.0)
          {
            v63 = v52 + v61;
            if (v62 < 0.0)
              v63 = 0.0;
          }
          v64 = v28 * v60;
          v65 = v64 + v52;
          v66 = 65535.0;
          if (v65 <= 65535.0)
          {
            v66 = v65;
            if (v65 < 0.0)
              v66 = 0.0;
          }
          LOBYTE(v65) = v34[1];
          v68 = (float)LODWORD(v65) - v22;
          v67 = v24 * v68;
          LOBYTE(v62) = *v44;
          LOBYTE(v68) = v44[1];
          *(_WORD *)v37 = bswap32(v55) >> 16;
          *((_WORD *)v37 + 1) = __rev16(llroundf(v59));
          *((_WORD *)v37 + 2) = __rev16(llroundf(v63));
          *((_WORD *)v37 + 3) = __rev16(llroundf(v66));
          v69 = 65535.0;
          if ((float)(v51 + v67) <= 65535.0)
          {
            v69 = v51 + v67;
            if ((float)(v51 + v67) < 0.0)
              v69 = 0.0;
          }
          v70 = 65535.0;
          if ((float)(v61 + v67) <= 65535.0)
          {
            v70 = v61 + v67;
            if ((float)(v61 + v67) < 0.0)
              v70 = 0.0;
          }
          v71 = v64 + v67;
          v72 = 65535.0;
          if (v71 <= 65535.0)
          {
            v72 = v71;
            if (v71 < 0.0)
              v72 = 0.0;
          }
          v73 = v24 * (float)((float)LODWORD(v62) - v22);
          *((_WORD *)v37 + 4) = bswap32(v56) >> 16;
          *((_WORD *)v37 + 5) = __rev16(llroundf(v69));
          *((_WORD *)v37 + 6) = __rev16(llroundf(v70));
          *((_WORD *)v37 + 7) = __rev16(llroundf(v72));
          v74 = 65535.0;
          if ((float)(v51 + v73) <= 65535.0)
          {
            v74 = v51 + v73;
            if ((float)(v51 + v73) < 0.0)
              v74 = 0.0;
          }
          v75 = 65535.0;
          if ((float)(v61 + v73) <= 65535.0)
          {
            v75 = v61 + v73;
            if ((float)(v61 + v73) < 0.0)
              v75 = 0.0;
          }
          v76 = v64 + v73;
          v77 = (float)(v64 + v73) <= 65535.0;
          v78 = 65535.0;
          if (v77)
          {
            v78 = v76;
            if (v76 < 0.0)
              v78 = 0.0;
          }
          v79 = v24 * (float)((float)LODWORD(v68) - v22);
          v80 = llroundf(v74);
          v81 = v51 + v79;
          *(_WORD *)v43 = bswap32(v57) >> 16;
          *((_WORD *)v43 + 1) = __rev16(v80);
          *((_WORD *)v43 + 2) = __rev16(llroundf(v75));
          *((_WORD *)v43 + 3) = __rev16(llroundf(v78));
          v77 = (float)(v51 + v79) <= 65535.0;
          v2 = 65535.0;
          if (v77)
          {
            v2 = v81;
            if (v81 < 0.0)
              v2 = 0.0;
          }
          v82 = v61 + v79;
          v77 = (float)(v61 + v79) <= 65535.0;
          v83 = 65535.0;
          if (v77)
          {
            v83 = v82;
            if (v82 < 0.0)
              v83 = 0.0;
          }
          v84 = v64 + v79;
          v3 = 65535.0;
          if (v84 <= 65535.0)
          {
            v3 = v84;
            if (v84 < 0.0)
              v3 = 0.0;
          }
          v34 += 2;
          v44 += 2;
          v37 += 16;
          *((_WORD *)v43 + 4) = bswap32(v58) >> 16;
          *((_WORD *)v43 + 5) = __rev16(llroundf(v2));
          *((_WORD *)v43 + 6) = __rev16(llroundf(v83));
          *((_WORD *)v43 + 7) = __rev16(llroundf(v3));
          v43 += 16;
          v42 += 2;
        }
        while (v9 > v42);
      }
      v34 = &v41[v15];
      v38 += v16;
      result = &v40[v17];
      v37 = &v39[v18];
      v8 += 2;
    }
    while (v11 > v8);
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Tone_Mat_TRC_RGhA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[3];
  v18 = a6[5];
  if ((v14 & 1) != 0)
  {
    ++v18;
    ++v14;
    if ((v11 & 1) != 0)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  v19 = a6[2];
  v20 = a6[4];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9)
    v12 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15)
    v21 = v19;
  else
    v21 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v18;
  if (v12 >= v21)
    v24 = v21;
  else
    v24 = v12;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Tone_Mat_TRC_RGhA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_420vf_TRC_Tone_Mat_TRC_RGhA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  float v34;
  float v35;
  float v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  unint64_t v50;
  char *v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  float v54;
  unsigned int v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  BOOL v80;
  float v81;
  float v82;
  float v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  float v89;
  float v105;
  float v106;
  float v111;
  float v112;
  float v117;
  float v118;
  float v119;
  float v124;
  float v125;
  float v126;
  float v128;
  float v129;
  float v131;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  __int16 v153;
  __int16 v154;
  __int16 v155;
  __int16 v156;
  __int16 v157;
  __int16 v158;
  __int16 v159;
  __int16 v160;
  __int16 v161;
  __int16 v162;
  float v167;
  float v168;
  float v169;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float v182;

  v5 = *(_QWORD *)(result + 28);
  v6 = 2 * *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = *(_QWORD *)(result + 44) + 2 * v7;
    v12 = 2 * v8 - 2 * v7;
    v13 = *((_QWORD *)result + 19);
    v14 = (_QWORD *)*((_QWORD *)result + 7);
    v15 = (uint64_t *)*((_QWORD *)result + 8);
    v16 = *v15;
    v17 = v15[1];
    v18 = v15[2];
    v19 = **((_QWORD **)result + 17);
    v20 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    LOWORD(a5) = *(_WORD *)(v13 + 140);
    v21 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    v22 = (float)LODWORD(a5);
    v23 = v20 * *(float *)v13;
    v178 = v20 * *(float *)(v13 + 16);
    v179 = v20 * *(float *)(v13 + 8);
    v176 = v20 * *(float *)(v13 + 28);
    v177 = v20 * *(float *)(v13 + 20);
    v174 = *(float *)(v13 + 76);
    v175 = *(float *)(v13 + 72);
    v24 = *(float *)(v13 + 84);
    v25 = *(float *)(v13 + 88);
    v172 = v24;
    v173 = *(float *)(v13 + 80);
    v26 = *(float *)(v13 + 92);
    v27 = *(float *)(v13 + 96);
    v28 = *(float *)(v13 + 100);
    v29 = *(float *)(v13 + 104);
    v30 = v13 + 164;
    v31 = v13 + 16548;
    v32 = v13 + 32932;
    v33 = *(float *)(v13 + 108);
    v34 = *(float *)(v13 + 112);
    v35 = *(float *)(v13 + 116);
    v36 = *(float *)(v13 + 120);
    v37 = *((_QWORD *)result + 14);
    v38 = (_QWORD *)*((_QWORD *)result + 16);
    v39 = *((_QWORD *)result + 15) + 2 * (*((_QWORD *)result + 13) * a2 / v6);
    v40 = *(_QWORD *)(result + 36);
    v41 = v14[1];
    result = (unsigned __int8 *)(*v14 + v16 * v11 + v40);
    v42 = v14[2];
    _ZF = v42 == 0;
    v43 = (unsigned __int8 *)(v42 + v18 * v11 + v40);
    if (_ZF)
      v43 = 0;
    v44 = (char *)(*v38 + v39 * v19 + 8 * v37);
    if (v11 >= 0)
      v45 = v11;
    else
      v45 = v11 + 1;
    v46 = v41 + v17 * (v45 >> 1) + v40;
    v181 = (float)LODWORD(a5);
    v182 = v21;
    v180 = v23;
    do
    {
      v47 = &v44[v19];
      v48 = &v43[v18];
      v49 = &result[v16];
      if (v10)
      {
        v50 = 0;
        v51 = &v44[v19];
        v52 = &result[v16];
        v53 = &v43[v18];
        do
        {
          LOBYTE(v24) = *(_BYTE *)(v46 + v50 + 1);
          v54 = (float)LODWORD(v24) - v22;
          v55 = LODWORD(v179);
          v56 = v179 * v54;
          LOBYTE(v55) = *result;
          v57 = v23 * (float)((float)v55 - v21);
          v58 = (float)(v179 * v54) + v57;
          v59 = 8191.0;
          if (v58 <= 8191.0)
          {
            v59 = (float)(v179 * v54) + v57;
            if (v58 < 0.0)
              v59 = 0.0;
          }
          LOBYTE(v58) = *(_BYTE *)(v46 + v50);
          v60 = (float)LODWORD(v58) - v22;
          v61 = (float)(v177 * v54) + (float)(v60 * v178);
          v62 = 8191.0;
          if ((float)(v57 + v61) <= 8191.0)
          {
            v62 = v57 + v61;
            if ((float)(v57 + v61) < 0.0)
              v62 = 0.0;
          }
          v63 = v176 * v60;
          v64 = (float)(v176 * v60) + v57;
          v65 = 8191.0;
          if (v64 <= 8191.0)
          {
            v65 = v64;
            if (v64 < 0.0)
              v65 = 0.0;
          }
          LOBYTE(v64) = result[1];
          v66 = v23 * (float)((float)LODWORD(v64) - v21);
          v67 = 8191.0;
          if ((float)(v56 + v66) <= 8191.0)
          {
            v67 = v56 + v66;
            if ((float)(v56 + v66) < 0.0)
              v67 = 0.0;
          }
          v68 = v61 + v66;
          v69 = 8191.0;
          if ((float)(v61 + v66) <= 8191.0)
          {
            v69 = v61 + v66;
            if (v68 < 0.0)
              v69 = 0.0;
          }
          v70 = v63 + v66;
          v71 = 8191.0;
          if (v70 <= 8191.0)
          {
            v71 = v70;
            if (v70 < 0.0)
              v71 = 0.0;
          }
          LOBYTE(v70) = *v52;
          v72 = v23 * (float)((float)LODWORD(v70) - v21);
          v73 = 8191.0;
          if ((float)(v56 + v72) <= 8191.0)
          {
            v73 = v56 + v72;
            if ((float)(v56 + v72) < 0.0)
              v73 = 0.0;
          }
          v74 = 8191.0;
          if ((float)(v61 + v72) <= 8191.0)
          {
            v74 = v61 + v72;
            if ((float)(v61 + v72) < 0.0)
              v74 = 0.0;
          }
          v75 = v63 + v72;
          v76 = 8191.0;
          if (v75 <= 8191.0)
          {
            v76 = v75;
            if (v75 < 0.0)
              v76 = 0.0;
          }
          LOBYTE(v68) = v52[1];
          v77 = v23 * (float)((float)LODWORD(v68) - v21);
          v78 = 8191.0;
          if ((float)(v56 + v77) <= 8191.0)
          {
            v78 = v56 + v77;
            if ((float)(v56 + v77) < 0.0)
              v78 = 0.0;
          }
          v79 = v61 + v77;
          v80 = (float)(v61 + v77) <= 8191.0;
          v81 = 8191.0;
          if (v80)
          {
            v81 = v79;
            if (v79 < 0.0)
              v81 = 0.0;
          }
          v82 = v63 + v77;
          v83 = 8191.0;
          if (v82 <= 8191.0)
          {
            v83 = v82;
            if (v82 < 0.0)
              v83 = 0.0;
          }
          if (v43)
          {
            v84 = *v43;
            v85 = v43[1];
            v43 += 2;
            v86 = *v53;
            v87 = v53[1];
            v53 += 2;
          }
          else
          {
            v84 = 0;
            v85 = 0;
            v86 = 0;
            v87 = 0;
          }
          _S1 = fmaxf(v59, 0.0);
          v89 = 8191.0;
          LOWORD(_S1) = *(_WORD *)(v30 + 2 * llroundf(fminf(_S1, 8191.0)));
          __asm { FCVT            S12, H1 }
          LOWORD(_S1) = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v62, 0.0), 8191.0)));
          __asm { FCVT            S31, H1 }
          LOWORD(_S1) = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v65, 0.0), 8191.0)));
          __asm { FCVT            S8, H1 }
          _H7 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v67, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v69, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          _H9 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          _H13 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          _H4 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          _H5 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          _H6 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          v105 = (float)((float)((float)(v34 * _S31) + (float)(v33 * _S12)) + (float)(v35 * _S8))
               + (float)(v36 * fmaxf(_S12, fmaxf(_S31, _S8)));
          v106 = 8191.0;
          if (v105 <= 8191.0)
          {
            v106 = v105;
            if (v105 < 0.0)
              v106 = 0.0;
          }
          __asm
          {
            FCVT            S14, H7
            FCVT            S15, H2
            FCVT            S11, H11
          }
          _H2 = *(_WORD *)(v31 + 2 * llroundf(v106));
          v111 = (float)((float)((float)(v34 * _S15) + (float)(v33 * _S14)) + (float)(v35 * _S11))
               + (float)(v36 * fmaxf(_S14, fmaxf(_S15, _S11)));
          v112 = 8191.0;
          if (v111 <= 8191.0)
          {
            v112 = v111;
            if (v111 < 0.0)
              v112 = 0.0;
          }
          __asm
          {
            FCVT            S16, H9
            FCVT            S17, H10
            FCVT            S18, H13
          }
          _H7 = *(_WORD *)(v31 + 2 * llroundf(v112));
          v117 = fmaxf(_S16, fmaxf(_S17, _S18));
          v118 = (float)((float)((float)(v34 * _S17) + (float)(v33 * _S16)) + (float)(v35 * _S18)) + (float)(v36 * v117);
          v119 = 8191.0;
          if (v118 <= 8191.0)
          {
            v119 = (float)((float)((float)(v34 * _S17) + (float)(v33 * _S16)) + (float)(v35 * _S18))
                 + (float)(v36 * v117);
            if (v118 < 0.0)
              v119 = 0.0;
          }
          __asm
          {
            FCVT            S13, H4
            FCVT            S1, H5
            FCVT            S3, H6
            FCVT            S2, H2
          }
          v124 = _S12 * _S2;
          v125 = _S31 * _S2;
          v126 = _S8 * _S2;
          __asm { FCVT            S4, H7 }
          v128 = _S14 * _S4;
          v129 = _S15 * _S4;
          _H5 = *(_WORD *)(v31 + 2 * llroundf(v119));
          v131 = _S11 * _S4;
          __asm { FCVT            S5, H5 }
          v133 = _S16 * _S5;
          v134 = _S17 * _S5;
          v135 = _S18 * _S5;
          v136 = fmaxf(_S13, fmaxf(_S1, _S3));
          v137 = (float)((float)((float)(v34 * _S1) + (float)(v33 * _S13)) + (float)(v35 * _S3)) + (float)(v36 * v136);
          if (v137 <= 8191.0)
          {
            v89 = (float)((float)((float)(v34 * _S1) + (float)(v33 * _S13)) + (float)(v35 * _S3)) + (float)(v36 * v136);
            if (v137 < 0.0)
              v89 = 0.0;
          }
          result += 2;
          _H16 = *(_WORD *)(v31 + 2 * llroundf(v89));
          __asm { FCVT            S16, H16 }
          v140 = _S13 * _S16;
          v141 = _S1 * _S16;
          v142 = _S3 * _S16;
          v143 = (float)((float)(v174 * v129) + (float)(v128 * v175)) + (float)(v131 * v173);
          v144 = (float)((float)(v25 * v129) + (float)(v128 * v172)) + (float)(v131 * v26);
          v145 = (float)((float)(v28 * v129) + (float)(v128 * v27)) + (float)(v131 * v29);
          v146 = (float)((float)(v174 * v134) + (float)(v133 * v175)) + (float)(v135 * v173);
          v147 = (float)((float)(v25 * v134) + (float)(v133 * v172)) + (float)(v135 * v26);
          v148 = (float)((float)(v28 * v134) + (float)(v133 * v27)) + (float)(v135 * v29);
          v149 = (float)((float)(v174 * v141) + (float)((float)(_S13 * _S16) * v175)) + (float)(v142 * v173);
          v150 = (float)((float)(v25 * v141) + (float)((float)(_S13 * _S16) * v172)) + (float)(v142 * v26);
          v167 = fminf(fmaxf((float)((float)(v174 * v125) + (float)(v124 * v175)) + (float)(v126 * v173), 0.0), 8191.0);
          v151 = (float)(v28 * v141) + (float)(v140 * v27);
          LOWORD(v140) = *(_WORD *)(v32
                                  + 2
                                  * llroundf(fminf(fmaxf((float)((float)(v25 * v125) + (float)(v124 * v172)) + (float)(v126 * v26), 0.0), 8191.0)));
          v152 = v151 + (float)(v142 * v29);
          v153 = *(_WORD *)(v32
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v28 * v125) + (float)(v124 * v27)) + (float)(v126 * v29), 0.0), 8191.0)));
          v154 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v143, 0.0), 8191.0)));
          v155 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v144, 0.0), 8191.0)));
          v156 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v145, 0.0), 8191.0)));
          v157 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v146, 0.0), 8191.0)));
          v158 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v147, 0.0), 8191.0)));
          v159 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v148, 0.0), 8191.0)));
          v160 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v149, 0.0), 8191.0)));
          v161 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v150, 0.0), 8191.0)));
          v162 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v152, 0.0), 8191.0)));
          v52 += 2;
          _S31 = (float)v84 * 0.0039216;
          __asm { FCVT            H31, S31 }
          _S9 = (float)v85 * 0.0039216;
          __asm { FCVT            H9, S9 }
          _S10 = (float)v86 * 0.0039216;
          __asm { FCVT            H10, S10 }
          *(_WORD *)v44 = *(_WORD *)(v32 + 2 * llroundf(v167));
          *((_WORD *)v44 + 1) = LOWORD(v140);
          *((_WORD *)v44 + 2) = v153;
          _S2 = (float)v87 * 0.0039216;
          LOWORD(v167) = 15360;
          if (v43)
            v168 = _S31;
          else
            v168 = v167;
          *((_WORD *)v44 + 3) = LOWORD(v168);
          *((_WORD *)v44 + 4) = v154;
          *((_WORD *)v44 + 5) = v155;
          *((_WORD *)v44 + 6) = v156;
          if (v43)
            v169 = _S9;
          else
            v169 = v167;
          *((_WORD *)v44 + 7) = LOWORD(v169);
          *(_WORD *)v51 = v157;
          *((_WORD *)v51 + 1) = v158;
          __asm { FCVT            H2, S2 }
          v44 += 16;
          *((_WORD *)v51 + 2) = v159;
          if (_ZF)
            v171 = v167;
          else
            v171 = _S10;
          *((_WORD *)v51 + 3) = LOWORD(v171);
          *((_WORD *)v51 + 4) = v160;
          *((_WORD *)v51 + 5) = v161;
          *((_WORD *)v51 + 6) = v162;
          if (_ZF)
            v24 = v167;
          else
            v24 = _S2;
          *((_WORD *)v51 + 7) = LOWORD(v24);
          v51 += 16;
          v50 += 2;
          v22 = v181;
          v21 = v182;
          v23 = v180;
        }
        while (v10 > v50);
      }
      result = &v49[v16];
      v46 += v17;
      v43 = &v48[v18];
      v44 = &v47[v19];
      v9 += 2;
    }
    while (v12 > v9);
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Mat_TRC_RGhA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[3];
  v18 = a6[5];
  if ((v14 & 1) != 0)
  {
    ++v18;
    ++v14;
    if ((v11 & 1) != 0)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  v19 = a6[2];
  v20 = a6[4];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9)
    v12 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15)
    v21 = v19;
  else
    v21 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v18;
  if (v12 >= v21)
    v24 = v21;
  else
    v24 = v12;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Mat_TRC_RGhA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_420vf_TRC_Mat_TRC_RGhA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  float v5;
  float v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  unsigned __int8 *v51;
  _BYTE *v52;
  unint64_t v53;
  char *v54;
  _BYTE *v55;
  unsigned __int8 *v56;
  unsigned int v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  BOOL v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  __int16 v131;
  __int16 v132;
  __int16 v133;
  __int16 v134;
  __int16 v135;
  __int16 v136;
  __int16 v137;
  __int16 v138;
  __int16 v139;
  float v144;
  float v146;
  float v147;
  float v148;

  v7 = *(_QWORD *)(result + 28);
  v8 = 2 * *result;
  v9 = v7 * a2 / v8;
  v10 = (v7 + v7 * a2) / v8;
  if (2 * v10 != 2 * v9)
  {
    v11 = 0;
    v12 = *(_QWORD *)(result + 20);
    v13 = *(_QWORD *)(result + 44) + 2 * v9;
    v14 = 2 * v10 - 2 * v9;
    v15 = *((_QWORD *)result + 19);
    v16 = (_QWORD *)*((_QWORD *)result + 7);
    v17 = (uint64_t *)*((_QWORD *)result + 8);
    v18 = *v17;
    v19 = v17[1];
    v20 = v17[2];
    v21 = **((_QWORD **)result + 17);
    *(float *)&v22 = (float)*(unsigned int *)(v15 + 128);
    v23 = 8191.0 / *(float *)&v22;
    LOWORD(v22) = *(_WORD *)(v15 + 140);
    v24 = (float)v22;
    LOWORD(a5) = *(_WORD *)(v15 + 142);
    v25 = (float)LODWORD(a5);
    v26 = v23 * *(float *)v15;
    v148 = v23 * *(float *)(v15 + 8);
    v147 = v23 * *(float *)(v15 + 16);
    v146 = v23 * *(float *)(v15 + 20);
    v27 = v23 * *(float *)(v15 + 28);
    v28 = *(float *)(v15 + 72);
    v29 = *(float *)(v15 + 76);
    v30 = *(float *)(v15 + 80);
    v31 = *(float *)(v15 + 84);
    v32 = *(float *)(v15 + 88);
    v33 = *(float *)(v15 + 92);
    v34 = *(float *)(v15 + 96);
    v35 = *(float *)(v15 + 100);
    v36 = *(float *)(v15 + 104);
    v37 = v15 + 164;
    v38 = v15 + 16548;
    v39 = *((_QWORD *)result + 14);
    v40 = (_QWORD *)*((_QWORD *)result + 16);
    v41 = *((_QWORD *)result + 15) + 2 * (*((_QWORD *)result + 13) * a2 / v8);
    v42 = *(_QWORD *)(result + 36);
    v43 = v16[1];
    v44 = (_BYTE *)(*v16 + v18 * v13 + v42);
    v45 = v16[2];
    _ZF = v45 == 0;
    v46 = (unsigned __int8 *)(v45 + v20 * v13 + v42);
    if (_ZF)
      v47 = 0;
    else
      v47 = v46;
    v48 = (char *)(*v40 + v41 * v21 + 8 * v39);
    if (v13 >= 0)
      v49 = v13;
    else
      v49 = v13 + 1;
    result = (unsigned __int8 *)(v43 + v19 * (v49 >> 1) + v42);
    do
    {
      v50 = &v48[v21];
      v51 = &v47[v20];
      v52 = &v44[v18];
      if (v12)
      {
        v53 = 0;
        v54 = &v48[v21];
        v55 = &v44[v18];
        v56 = &v47[v20];
        do
        {
          LOBYTE(v6) = result[v53 + 1];
          *(float *)&v57 = (float)LODWORD(v6);
          v58 = *(float *)&v57 - v25;
          v59 = v148 * (float)(*(float *)&v57 - v25);
          LOBYTE(v57) = *v44;
          v60 = v26 * (float)((float)v57 - v24);
          v61 = v59 + v60;
          v62 = 8191.0;
          if ((float)(v59 + v60) <= 8191.0)
          {
            v62 = v59 + v60;
            if (v61 < 0.0)
              v62 = 0.0;
          }
          LOBYTE(v61) = result[v53];
          v63 = (float)LODWORD(v61) - v25;
          v64 = (float)(v146 * v58) + (float)(v63 * v147);
          v65 = 8191.0;
          if ((float)(v60 + v64) <= 8191.0)
          {
            v65 = v60 + v64;
            if ((float)(v60 + v64) < 0.0)
              v65 = 0.0;
          }
          v66 = v27 * v63;
          v67 = (float)(v27 * v63) + v60;
          v68 = 8191.0;
          if (v67 <= 8191.0)
          {
            v68 = v67;
            if (v67 < 0.0)
              v68 = 0.0;
          }
          LOBYTE(v67) = v44[1];
          v69 = v26 * (float)((float)LODWORD(v67) - v24);
          v70 = 8191.0;
          if ((float)(v59 + v69) <= 8191.0)
          {
            v70 = v59 + v69;
            if ((float)(v59 + v69) < 0.0)
              v70 = 0.0;
          }
          v71 = 8191.0;
          if ((float)(v64 + v69) <= 8191.0)
          {
            v71 = v64 + v69;
            if ((float)(v64 + v69) < 0.0)
              v71 = 0.0;
          }
          v72 = v66 + v69;
          v73 = (float)(v66 + v69) <= 8191.0;
          v74 = 8191.0;
          if (v73)
          {
            v74 = v72;
            if (v72 < 0.0)
              v74 = 0.0;
          }
          LOBYTE(v72) = *v55;
          v75 = v26 * (float)((float)LODWORD(v72) - v24);
          v76 = 8191.0;
          if ((float)(v59 + v75) <= 8191.0)
          {
            v76 = v59 + v75;
            if ((float)(v59 + v75) < 0.0)
              v76 = 0.0;
          }
          v77 = 8191.0;
          if ((float)(v64 + v75) <= 8191.0)
          {
            v77 = v64 + v75;
            if ((float)(v64 + v75) < 0.0)
              v77 = 0.0;
          }
          v78 = v66 + v75;
          v73 = (float)(v66 + v75) <= 8191.0;
          v79 = 8191.0;
          if (v73)
          {
            v79 = v78;
            if (v78 < 0.0)
              v79 = 0.0;
          }
          LOBYTE(v5) = v55[1];
          v80 = v26 * (float)((float)LODWORD(v5) - v24);
          v81 = v59 + v80;
          v73 = (float)(v59 + v80) <= 8191.0;
          v82 = 8191.0;
          if (v73)
          {
            v82 = v81;
            if (v81 < 0.0)
              v82 = 0.0;
          }
          v83 = v64 + v80;
          v73 = (float)(v64 + v80) <= 8191.0;
          v84 = 8191.0;
          if (v73)
          {
            v84 = v83;
            if (v83 < 0.0)
              v84 = 0.0;
          }
          v85 = v66 + v80;
          v86 = 8191.0;
          if (v85 <= 8191.0)
          {
            v86 = v85;
            if (v85 < 0.0)
              v86 = 0.0;
          }
          if (v47)
          {
            v87 = *v47;
            v88 = v47[1];
            v47 += 2;
            v89 = *v56;
            v90 = v56[1];
            v56 += 2;
          }
          else
          {
            v87 = 0;
            v88 = 0;
            v89 = 0;
            v90 = 0;
          }
          v44 += 2;
          _H26 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v62, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v65, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          _H28 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v68, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          __asm
          {
            FCVT            S28, H28
            FCVT            S29, H29
          }
          _H30 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          __asm { FCVT            S30, H30 }
          _H31 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          __asm { FCVT            S31, H31 }
          _H9 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S9, H9 }
          _H11 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          _H13 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          _H8 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          __asm
          {
            FCVT            S13, H13
            FCVT            S8, H8
          }
          _H10 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          _H12 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          v118 = (float)((float)(v29 * _S27) + (float)(_S26 * v28)) + (float)(_S28 * v30);
          v119 = (float)((float)(v32 * _S27) + (float)(_S26 * v31)) + (float)(_S28 * v33);
          v120 = (float)((float)(v35 * _S27) + (float)(_S26 * v34)) + (float)(_S28 * v36);
          v121 = (float)((float)(v29 * _S30) + (float)(_S29 * v28)) + (float)(_S31 * v30);
          v122 = (float)((float)(v32 * _S30) + (float)(_S29 * v31)) + (float)(_S31 * v33);
          v123 = (float)((float)(v35 * _S30) + (float)(_S29 * v34)) + (float)(_S31 * v36);
          v124 = (float)((float)(v29 * _S11) + (float)(_S9 * v28)) + (float)(_S13 * v30);
          v125 = (float)((float)(v32 * _S11) + (float)(_S9 * v31)) + (float)(_S13 * v33);
          v126 = (float)((float)(v35 * _S11) + (float)(_S9 * v34)) + (float)(_S13 * v36);
          v127 = (float)((float)(v29 * _S10) + (float)(_S8 * v28)) + (float)(_S12 * v30);
          v128 = (float)((float)(v32 * _S10) + (float)(_S8 * v31)) + (float)(_S12 * v33);
          v5 = fminf(fmaxf(v118, 0.0), 8191.0);
          LOWORD(v5) = *(_WORD *)(v38 + 2 * llroundf(v5));
          v129 = (float)(v35 * _S10) + (float)(_S8 * v34);
          LOWORD(_S10) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v119, 0.0), 8191.0)));
          v130 = v129 + (float)(_S12 * v36);
          v6 = fminf(fmaxf(v120, 0.0), 8191.0);
          LOWORD(v6) = *(_WORD *)(v38 + 2 * llroundf(v6));
          v131 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v121, 0.0), 8191.0)));
          v132 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v122, 0.0), 8191.0)));
          v133 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v123, 0.0), 8191.0)));
          v134 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v124, 0.0), 8191.0)));
          v135 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v125, 0.0), 8191.0)));
          v136 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v126, 0.0), 8191.0)));
          v137 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v127, 0.0), 8191.0)));
          v138 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v128, 0.0), 8191.0)));
          v139 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v130, 0.0), 8191.0)));
          v55 += 2;
          _S13 = (float)v87 * 0.0039216;
          __asm { FCVT            H13, S13 }
          _S4 = (float)v88 * 0.0039216;
          __asm { FCVT            H4, S4 }
          _S5 = (float)v89 * 0.0039216;
          __asm { FCVT            H5, S5 }
          *(_WORD *)v48 = LOWORD(v5);
          *((_WORD *)v48 + 1) = LOWORD(_S10);
          *((_WORD *)v48 + 2) = LOWORD(v6);
          _S6 = (float)v90 * 0.0039216;
          LOWORD(v6) = 15360;
          if (v47)
            v144 = _S13;
          else
            v144 = v6;
          *((_WORD *)v48 + 3) = LOWORD(v144);
          *((_WORD *)v48 + 4) = v131;
          *((_WORD *)v48 + 5) = v132;
          *((_WORD *)v48 + 6) = v133;
          if (!v47)
            _S4 = v6;
          *((_WORD *)v48 + 7) = LOWORD(_S4);
          *(_WORD *)v54 = v134;
          *((_WORD *)v54 + 1) = v135;
          __asm { FCVT            H4, S6 }
          v48 += 16;
          *((_WORD *)v54 + 2) = v136;
          if (_ZF)
            _S5 = v6;
          *((_WORD *)v54 + 3) = LOWORD(_S5);
          *((_WORD *)v54 + 4) = v137;
          *((_WORD *)v54 + 5) = v138;
          *((_WORD *)v54 + 6) = v139;
          if (_ZF)
            _S4 = v6;
          *((_WORD *)v54 + 7) = LOWORD(_S4);
          v54 += 16;
          v53 += 2;
        }
        while (v12 > v53);
      }
      v44 = &v52[v18];
      result += v19;
      v47 = &v51[v20];
      v48 = &v50[v21];
      v11 += 2;
    }
    while (v14 > v11);
  }
  return result;
}

uint64_t vt_Copy_420vf_rgb_RGhA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[3];
  v18 = a6[5];
  if ((v14 & 1) != 0)
  {
    ++v18;
    ++v14;
    if ((v11 & 1) != 0)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  v19 = a6[2];
  v20 = a6[4];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9)
    v12 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15)
    v21 = v19;
  else
    v21 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v18;
  if (v12 >= v21)
    v24 = v21;
  else
    v24 = v12;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_rgb_RGhA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_420vf_rgb_RGhA_GCD(unsigned __int8 *result, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v6;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  char *v42;
  uint64_t v43;
  char *v44;
  unsigned __int8 *v45;
  _BYTE *v46;
  unint64_t v47;
  char *v48;
  _BYTE *v49;
  unsigned __int8 *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v83;

  v9 = *(_QWORD *)(result + 28);
  v10 = 2 * *result;
  v11 = v9 * a2 / v10;
  v12 = (v9 + v9 * a2) / v10;
  if (2 * v12 != 2 * v11)
  {
    v13 = 0;
    v14 = *(_QWORD *)(result + 20);
    v15 = *(_QWORD *)(result + 44) + 2 * v11;
    v16 = 2 * v12 - 2 * v11;
    v17 = *((_QWORD *)result + 19);
    v18 = (_QWORD *)*((_QWORD *)result + 7);
    v19 = (uint64_t *)*((_QWORD *)result + 8);
    v20 = *v19;
    v21 = v19[1];
    v22 = v19[2];
    v23 = **((_QWORD **)result + 17);
    *(float *)&v24 = (float)*(unsigned int *)(v17 + 128);
    v25 = 1.0;
    v26 = 1.0 / *(float *)&v24;
    LOWORD(v24) = *(_WORD *)(v17 + 140);
    v27 = (float)v24;
    LOWORD(v25) = *(_WORD *)(v17 + 142);
    v28 = (float)v25;
    v29 = v26 * *(float *)v17;
    v30 = v26 * *(float *)(v17 + 8);
    v31 = v26 * *(float *)(v17 + 16);
    v32 = v26 * *(float *)(v17 + 20);
    v33 = v26 * *(float *)(v17 + 28);
    v34 = *((_QWORD *)result + 14);
    v35 = *((_QWORD *)result + 13) * a2;
    v36 = (_QWORD *)*((_QWORD *)result + 16);
    v37 = *((_QWORD *)result + 15) + 2 * (v35 / v10);
    v38 = *(_QWORD *)(result + 36);
    v39 = (_BYTE *)(*v18 + v20 * v15 + v38);
    v40 = v18[2];
    _ZF = v40 == 0;
    result = (unsigned __int8 *)(v40 + v22 * v15 + v38);
    if (_ZF)
      result = 0;
    v42 = (char *)(*v36 + v37 * v23 + 8 * v34);
    v43 = v18[1] + v21 * (v15 / 2) + v38;
    LOWORD(v2) = 15360;
    do
    {
      v44 = &v42[v23];
      v45 = &result[v22];
      v46 = &v39[v20];
      if (v14)
      {
        v47 = 0;
        v48 = &v42[v23];
        v49 = &v39[v20];
        v50 = &result[v22];
        do
        {
          if (result)
          {
            v51 = *result;
            v52 = result[1];
            result += 2;
            v53 = *v50;
            v54 = v50[1];
            v50 += 2;
          }
          else
          {
            v51 = 0;
            v52 = 0;
            v53 = 0;
            v54 = 0;
          }
          LOBYTE(v3) = *(_BYTE *)(v43 + v47);
          v55 = (float)v3 - v28;
          LOBYTE(_S18) = *(_BYTE *)(v43 + v47 + 1);
          v56 = (float)LODWORD(_S18) - v28;
          v57 = v30 * v56;
          v58 = (float)(v32 * v56) + (float)(v55 * v31);
          v59 = v33 * v55;
          LOBYTE(_S20) = *v39;
          v60 = v29 * (float)((float)_S20 - v27);
          LOBYTE(v6) = v39[1];
          v61 = v29 * (float)((float)v6 - v27);
          v39 += 2;
          LOBYTE(_S22) = *v49;
          v62 = v29 * (float)((float)LODWORD(_S22) - v27);
          LOBYTE(_S23) = v49[1];
          v63 = v29 * (float)((float)LODWORD(_S23) - v27);
          v49 += 2;
          _S24 = v57 + v60;
          _S25 = v60 + v58;
          _S20 = v59 + v60;
          _S26 = v57 + v61;
          _S27 = v58 + v61;
          _S21 = v59 + v61;
          _S28 = v57 + v62;
          _S29 = v58 + v62;
          _S22 = v59 + v62;
          _S19 = v57 + v63;
          _S18 = v58 + v63;
          _S17 = v59 + v63;
          _S23 = (float)v51 * 0.0039216;
          __asm { FCVT            H23, S23 }
          _S30 = (float)v52 * 0.0039216;
          __asm { FCVT            H30, S30 }
          _S31 = (float)v53 * 0.0039216;
          __asm
          {
            FCVT            H31, S31
            FCVT            H24, S24
          }
          *(_WORD *)v42 = LOWORD(_S24);
          __asm { FCVT            H24, S25 }
          *((_WORD *)v42 + 1) = LOWORD(_S24);
          _S24 = (float)v54 * 0.0039216;
          __asm { FCVT            H20, S20 }
          *((_WORD *)v42 + 2) = LOWORD(_S20);
          if (result)
            *(float *)&_S20 = _S23;
          else
            _S20 = v2;
          *((_WORD *)v42 + 3) = _S20;
          __asm { FCVT            H20, S26 }
          *((_WORD *)v42 + 4) = _H20;
          __asm { FCVT            H20, S27 }
          *((_WORD *)v42 + 5) = _H20;
          __asm
          {
            FCVT            H20, S24
            FCVT            H21, S21
          }
          *((_WORD *)v42 + 6) = _H21;
          if (_ZF)
            v83 = *(float *)&v2;
          else
            v83 = _S30;
          *((_WORD *)v42 + 7) = LOWORD(v83);
          v42 += 16;
          __asm { FCVT            H21, S28 }
          *(_WORD *)v48 = _H21;
          __asm { FCVT            H21, S29 }
          *((_WORD *)v48 + 1) = _H21;
          __asm { FCVT            H21, S22 }
          *((_WORD *)v48 + 2) = _H21;
          if (_ZF)
            v6 = v2;
          else
            *(float *)&v6 = _S31;
          *((_WORD *)v48 + 3) = v6;
          __asm { FCVT            H19, S19 }
          *((_WORD *)v48 + 4) = _H19;
          __asm { FCVT            H18, S18 }
          *((_WORD *)v48 + 5) = LOWORD(_S18);
          __asm { FCVT            H17, S17 }
          *((_WORD *)v48 + 6) = _H17;
          if (_ZF)
            v3 = v2;
          else
            v3 = _S20;
          *((_WORD *)v48 + 7) = v3;
          v48 += 16;
          v47 += 2;
        }
        while (v14 > v47);
      }
      v39 = &v46[v20];
      v43 += v21;
      result = &v45[v22];
      v42 = &v44[v23];
      v13 += 2;
    }
    while (v16 > v13);
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Tone_Mat_TRC_RGfA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[3];
  v18 = a6[5];
  if ((v14 & 1) != 0)
  {
    ++v18;
    ++v14;
    if ((v11 & 1) != 0)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  v19 = a6[2];
  v20 = a6[4];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9)
    v12 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15)
    v21 = v19;
  else
    v21 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v18;
  if (v12 >= v21)
    v24 = v21;
  else
    v24 = v12;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Tone_Mat_TRC_RGfA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_420vf_TRC_Tone_Mat_TRC_RGfA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  unint64_t v54;
  uint64_t v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  float v58;
  unsigned int v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  BOOL v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  float v94;
  float v110;
  float v111;
  float v112;
  float v117;
  float v118;
  float v123;
  float v124;
  float v125;
  float v130;
  float v131;
  float v134;
  float v135;
  float v137;
  float v138;
  float v139;
  float v141;
  float v142;
  float v143;
  float v145;
  float v149;
  float v152;
  float v158;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float v182;

  v5 = *(_QWORD *)(result + 28);
  v6 = 2 * *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = *(_QWORD *)(result + 44) + 2 * v7;
    v12 = 2 * v8 - 2 * v7;
    v13 = *((_QWORD *)result + 19);
    v14 = (_QWORD *)*((_QWORD *)result + 7);
    v15 = (uint64_t *)*((_QWORD *)result + 8);
    v16 = *v15;
    v17 = v15[1];
    v18 = v15[2];
    v19 = **((_QWORD **)result + 17);
    v20 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    LOWORD(a5) = *(_WORD *)(v13 + 140);
    v21 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    v22 = (float)LODWORD(a5);
    v23 = v20 * *(float *)v13;
    v178 = v20 * *(float *)(v13 + 16);
    v179 = v20 * *(float *)(v13 + 8);
    v176 = v20 * *(float *)(v13 + 28);
    v177 = v20 * *(float *)(v13 + 20);
    _S1 = *(unsigned int *)(v13 + 72);
    v25 = *(float *)(v13 + 76);
    v175 = *(float *)&_S1;
    v26 = *(float *)(v13 + 80);
    v27 = *(float *)(v13 + 84);
    v28 = *(float *)(v13 + 88);
    v29 = *(float *)(v13 + 92);
    v30 = *(float *)(v13 + 96);
    v31 = *(float *)(v13 + 100);
    v32 = v13 + 164;
    v33 = v13 + 16548;
    v34 = v13 + 32932;
    v35 = *(float *)(v13 + 104);
    v36 = *(float *)(v13 + 108);
    v37 = *(float *)(v13 + 112);
    v38 = *(float *)(v13 + 116);
    v39 = *(float *)(v13 + 120);
    v40 = *((_QWORD *)result + 14);
    v41 = (_QWORD *)*((_QWORD *)result + 16);
    v42 = *((_QWORD *)result + 15) + 2 * (*((_QWORD *)result + 13) * a2 / v6);
    v43 = *(_QWORD *)(result + 36);
    result = (unsigned __int8 *)(*v14 + v16 * v11 + v43);
    v44 = v14[2];
    _ZF = v44 == 0;
    v46 = (unsigned __int8 *)(v44 + v18 * v11 + v43);
    if (_ZF)
      v47 = 0;
    else
      v47 = v46;
    v48 = *v41 + v42 * v19 + 16 * v40;
    if (v11 >= 0)
      v49 = v11;
    else
      v49 = v11 + 1;
    v50 = v14[1] + v17 * (v49 >> 1) + v43;
    v181 = (float)LODWORD(a5);
    v182 = v21;
    v180 = v23;
    do
    {
      v51 = v48 + v19;
      v52 = &v47[v18];
      v53 = &result[v16];
      if (v10)
      {
        v54 = 0;
        v55 = v48 + v19;
        v56 = &result[v16];
        v57 = &v47[v18];
        do
        {
          LOBYTE(_S1) = *(_BYTE *)(v50 + v54 + 1);
          v58 = (float)_S1 - v22;
          v59 = LODWORD(v179);
          v60 = v179 * v58;
          LOBYTE(v59) = *result;
          v61 = v23 * (float)((float)v59 - v21);
          v62 = (float)(v179 * v58) + v61;
          v63 = 8191.0;
          if (v62 <= 8191.0)
          {
            v63 = (float)(v179 * v58) + v61;
            if (v62 < 0.0)
              v63 = 0.0;
          }
          LOBYTE(v62) = *(_BYTE *)(v50 + v54);
          v64 = (float)LODWORD(v62) - v22;
          v65 = (float)(v177 * v58) + (float)(v64 * v178);
          v66 = 8191.0;
          if ((float)(v61 + v65) <= 8191.0)
          {
            v66 = v61 + v65;
            if ((float)(v61 + v65) < 0.0)
              v66 = 0.0;
          }
          v67 = v176 * v64;
          v68 = (float)(v176 * v64) + v61;
          v69 = 8191.0;
          if (v68 <= 8191.0)
          {
            v69 = v68;
            if (v68 < 0.0)
              v69 = 0.0;
          }
          LOBYTE(v68) = result[1];
          v70 = v23 * (float)((float)LODWORD(v68) - v21);
          v71 = 8191.0;
          if ((float)(v60 + v70) <= 8191.0)
          {
            v71 = v60 + v70;
            if ((float)(v60 + v70) < 0.0)
              v71 = 0.0;
          }
          v72 = 8191.0;
          if ((float)(v65 + v70) <= 8191.0)
          {
            v72 = v65 + v70;
            if ((float)(v65 + v70) < 0.0)
              v72 = 0.0;
          }
          v73 = v67 + v70;
          v74 = 8191.0;
          if (v73 <= 8191.0)
          {
            v74 = v73;
            if (v73 < 0.0)
              v74 = 0.0;
          }
          LOBYTE(v73) = *v56;
          v75 = (float)LODWORD(v73) - v21;
          v76 = v23 * v75;
          v77 = 8191.0;
          if ((float)(v60 + (float)(v23 * v75)) <= 8191.0)
          {
            v77 = v60 + (float)(v23 * v75);
            if (v77 < 0.0)
              v77 = 0.0;
          }
          v78 = 8191.0;
          if ((float)(v65 + v76) <= 8191.0)
          {
            v78 = v65 + v76;
            if ((float)(v65 + v76) < 0.0)
              v78 = 0.0;
          }
          v79 = v67 + v76;
          v80 = 8191.0;
          if (v79 <= 8191.0)
          {
            v80 = v79;
            if (v79 < 0.0)
              v80 = 0.0;
          }
          LOBYTE(v75) = v56[1];
          v81 = v23 * (float)((float)LODWORD(v75) - v21);
          v82 = v60 + v81;
          v83 = (float)(v60 + v81) <= 8191.0;
          v84 = 8191.0;
          if (v83)
          {
            v84 = v82;
            if (v82 < 0.0)
              v84 = 0.0;
          }
          v85 = v65 + v81;
          v83 = (float)(v65 + v81) <= 8191.0;
          v86 = 8191.0;
          if (v83)
          {
            v86 = v85;
            if (v85 < 0.0)
              v86 = 0.0;
          }
          v87 = v67 + v81;
          v88 = 8191.0;
          if (v87 <= 8191.0)
          {
            v88 = v87;
            if (v87 < 0.0)
              v88 = 0.0;
          }
          if (v47)
          {
            v89 = *v47;
            v90 = v47[1];
            v47 += 2;
            v91 = *v57;
            v92 = v57[1];
            v57 += 2;
          }
          else
          {
            v89 = 0;
            v90 = 0;
            v91 = 0;
            v92 = 0;
          }
          _S1 = fmaxf(v63, 0.0);
          v94 = 8191.0;
          LOWORD(_S1) = *(_WORD *)(v32 + 2 * llroundf(fminf(_S1, 8191.0)));
          __asm { FCVT            S4, H1 }
          LOWORD(_S1) = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v66, 0.0), 8191.0)));
          __asm { FCVT            S8, H1 }
          LOWORD(_S1) = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v69, 0.0), 8191.0)));
          __asm { FCVT            S9, H1 }
          _H1 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          _H3 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          _H14 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          _H13 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          v110 = fmaxf(_S4, fmaxf(_S8, _S9));
          v111 = (float)((float)((float)(v37 * _S8) + (float)(v36 * _S4)) + (float)(v38 * _S9)) + (float)(v39 * v110);
          v112 = 8191.0;
          if (v111 <= 8191.0)
          {
            v112 = (float)((float)((float)(v37 * _S8) + (float)(v36 * _S4)) + (float)(v38 * _S9)) + (float)(v39 * v110);
            if (v111 < 0.0)
              v112 = 0.0;
          }
          __asm
          {
            FCVT            S5, H1
            FCVT            S6, H3
            FCVT            S7, H12
          }
          _H12 = *(_WORD *)(v33 + 2 * llroundf(v112));
          v117 = (float)((float)((float)(v37 * _S6) + (float)(v36 * _S5)) + (float)(v38 * _S7))
               + (float)(v39 * fmaxf(_S5, fmaxf(_S6, _S7)));
          v118 = 8191.0;
          if (v117 <= 8191.0)
          {
            v118 = v117;
            if (v117 < 0.0)
              v118 = 0.0;
          }
          __asm
          {
            FCVT            S14, H14
            FCVT            S15, H2
            FCVT            S2, H30
          }
          _H30 = *(_WORD *)(v33 + 2 * llroundf(v118));
          v123 = fmaxf(_S14, fmaxf(_S15, _S2));
          v124 = (float)((float)((float)(v37 * _S15) + (float)(v36 * _S14)) + (float)(v38 * _S2)) + (float)(v39 * v123);
          v125 = 8191.0;
          if (v124 <= 8191.0)
          {
            v125 = (float)((float)((float)(v37 * _S15) + (float)(v36 * _S14)) + (float)(v38 * _S2))
                 + (float)(v39 * v123);
            if (v124 < 0.0)
              v125 = 0.0;
          }
          __asm
          {
            FCVT            S1, H10
            FCVT            S3, H11
            FCVT            S10, H13
          }
          _H11 = *(_WORD *)(v33 + 2 * llroundf(v125));
          v130 = fmaxf(_S1, fmaxf(_S3, _S10));
          v131 = (float)((float)((float)(v37 * _S3) + (float)(v36 * _S1)) + (float)(v38 * _S10)) + (float)(v39 * v130);
          if (v131 <= 8191.0)
          {
            v94 = (float)((float)((float)(v37 * _S3) + (float)(v36 * _S1)) + (float)(v38 * _S10)) + (float)(v39 * v130);
            if (v131 < 0.0)
              v94 = 0.0;
          }
          __asm { FCVT            S16, H12 }
          _S4 = _S4 * _S16;
          v134 = _S8 * _S16;
          v135 = _S9 * _S16;
          __asm { FCVT            S30, H30 }
          v137 = _S5 * _S30;
          v138 = _S6 * _S30;
          v139 = _S7 * _S30;
          __asm { FCVT            S30, H11 }
          v141 = _S14 * _S30;
          v142 = _S15 * _S30;
          v143 = _S2 * _S30;
          LOWORD(_S30) = *(_WORD *)(v33 + 2 * llroundf(v94));
          __asm { FCVT            S30, H30 }
          v145 = _S1 * _S30;
          _S3 = _S3 * _S30;
          _S30 = _S10 * _S30;
          _S31 = (float)((float)(v25 * v134) + (float)(_S4 * v175)) + (float)(v135 * v26);
          v149 = (float)((float)(v28 * v134) + (float)(_S4 * v27)) + (float)(v135 * v29);
          _S16 = (float)((float)(v31 * v134) + (float)(_S4 * v30)) + (float)(v135 * v35);
          _S8 = (float)((float)(v25 * v138) + (float)(v137 * v175)) + (float)(v139 * v26);
          v152 = (float)((float)(v28 * v138) + (float)(v137 * v27)) + (float)(v139 * v29);
          _S5 = (float)((float)(v31 * v138) + (float)(v137 * v30)) + (float)(v139 * v35);
          _S6 = (float)((float)(v25 * v142) + (float)(v141 * v175)) + (float)(v143 * v26);
          _S7 = (float)((float)(v28 * v142) + (float)(v141 * v27)) + (float)(v143 * v29);
          _S2 = (float)((float)(v31 * v142) + (float)(v141 * v30)) + (float)(v143 * v35);
          _S9 = (float)((float)(v25 * _S3) + (float)(v145 * v175)) + (float)(_S30 * v26);
          v158 = (float)((float)(v28 * _S3) + (float)(v145 * v27)) + (float)(_S30 * v29);
          LOWORD(_S4) = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(_S31, 0.0), 8191.0)));
          _S1 = (float)((float)(v31 * _S3) + (float)(v145 * v30)) + (float)(_S30 * v35);
          LOWORD(_S3) = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(v149, 0.0), 8191.0)));
          LOWORD(_S16) = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(_S16, 0.0), 8191.0)));
          LOWORD(_S30) = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(_S8, 0.0), 8191.0)));
          LOWORD(_S31) = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(v152, 0.0), 8191.0)));
          LOWORD(_S5) = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          LOWORD(_S6) = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          LOWORD(_S7) = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(_S7, 0.0), 8191.0)));
          LOWORD(_S2) = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(_S2, 0.0), 8191.0)));
          LOWORD(_S8) = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(_S9, 0.0), 8191.0)));
          LOWORD(_S9) = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(v158, 0.0), 8191.0)));
          LOWORD(_S1) = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          __asm
          {
            FCVT            S4, H4
            FCVT            S3, H3
          }
          *(_DWORD *)v48 = _S4;
          *(_DWORD *)(v48 + 4) = _S3;
          result += 2;
          v56 += 2;
          __asm
          {
            FCVT            S3, H16
            FCVT            S4, H30
            FCVT            S16, H31
            FCVT            S5, H5
            FCVT            S6, H6
            FCVT            S7, H7
            FCVT            S2, H2
            FCVT            S30, H8
            FCVT            S31, H9
            FCVT            S1, H1
          }
          v171 = (float)v89 * 0.0039216;
          if (!v47)
            v171 = 1.0;
          v172 = (float)v90 * 0.0039216;
          if (!v47)
            v172 = 1.0;
          v173 = (float)v91 * 0.0039216;
          if (!v47)
            v173 = 1.0;
          *(_DWORD *)(v48 + 8) = _S3;
          *(float *)(v48 + 12) = v171;
          *(_DWORD *)(v48 + 16) = _S4;
          *(_DWORD *)(v48 + 20) = _S16;
          *(_DWORD *)(v48 + 24) = _S5;
          *(float *)(v48 + 28) = v172;
          *(_DWORD *)v55 = _S6;
          *(_DWORD *)(v55 + 4) = _S7;
          *(_DWORD *)(v55 + 8) = _S2;
          *(float *)(v55 + 12) = v173;
          if (v47)
            v174 = (float)v92 * 0.0039216;
          else
            v174 = 1.0;
          v48 += 32;
          *(_DWORD *)(v55 + 16) = _S30;
          *(_DWORD *)(v55 + 20) = _S31;
          *(float *)(v55 + 24) = *(float *)&_S1;
          *(float *)(v55 + 28) = v174;
          v55 += 32;
          v54 += 2;
          v22 = v181;
          v21 = v182;
          v23 = v180;
        }
        while (v10 > v54);
      }
      result = &v53[v16];
      v50 += v17;
      v47 = &v52[v18];
      v48 = v51 + v19;
      v9 += 2;
    }
    while (v12 > v9);
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Mat_TRC_RGfA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[3];
  v18 = a6[5];
  if ((v14 & 1) != 0)
  {
    ++v18;
    ++v14;
    if ((v11 & 1) != 0)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  v19 = a6[2];
  v20 = a6[4];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9)
    v12 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15)
    v21 = v19;
  else
    v21 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v18;
  if (v12 >= v21)
    v24 = v21;
  else
    v24 = v12;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Mat_TRC_RGfA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_420vf_TRC_Mat_TRC_RGfA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 *v52;
  _BYTE *v53;
  unint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  unsigned __int8 *v57;
  float v58;
  unsigned int v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  unsigned int v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  BOOL v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v112;
  float v124;
  float v125;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;

  v6 = *(_QWORD *)(result + 28);
  v7 = 2 * *result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (2 * v9 != 2 * v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)(result + 20);
    v12 = *(_QWORD *)(result + 44) + 2 * v8;
    v13 = 2 * v9 - 2 * v8;
    v14 = *((_QWORD *)result + 19);
    v15 = (_QWORD *)*((_QWORD *)result + 7);
    v16 = (uint64_t *)*((_QWORD *)result + 8);
    v17 = *v16;
    v18 = v16[1];
    v19 = v16[2];
    v20 = **((_QWORD **)result + 17);
    *(float *)&v21 = (float)*(unsigned int *)(v14 + 128);
    v22 = 8191.0 / *(float *)&v21;
    LOWORD(v21) = *(_WORD *)(v14 + 140);
    v23 = (float)v21;
    LOWORD(a5) = *(_WORD *)(v14 + 142);
    v24 = (float)LODWORD(a5);
    v25 = v22 * *(float *)v14;
    v153 = v22 * *(float *)(v14 + 16);
    v154 = v22 * *(float *)(v14 + 8);
    v26 = v22 * *(float *)(v14 + 20);
    v27 = v22 * *(float *)(v14 + 28);
    v151 = v27;
    v152 = v26;
    v28 = *(float *)(v14 + 72);
    v29 = *(float *)(v14 + 76);
    v30 = *(float *)(v14 + 80);
    v31 = *(float *)(v14 + 84);
    v32 = *(float *)(v14 + 88);
    v33 = *(float *)(v14 + 92);
    v34 = *(float *)(v14 + 96);
    v35 = *(float *)(v14 + 100);
    v36 = *(float *)(v14 + 104);
    v37 = v14 + 164;
    v38 = v14 + 16548;
    v39 = *((_QWORD *)result + 14);
    v40 = (_QWORD *)*((_QWORD *)result + 16);
    v41 = *((_QWORD *)result + 15) + 2 * (*((_QWORD *)result + 13) * a2 / v7);
    v42 = *(_QWORD *)(result + 36);
    v43 = v15[1];
    v44 = (_BYTE *)(*v15 + v17 * v12 + v42);
    v45 = v15[2];
    _ZF = v45 == 0;
    v47 = (unsigned __int8 *)(v45 + v19 * v12 + v42);
    if (_ZF)
      v48 = 0;
    else
      v48 = v47;
    v49 = *v40 + v41 * v20 + 16 * v39;
    if (v12 >= 0)
      v50 = v12;
    else
      v50 = v12 + 1;
    result = (unsigned __int8 *)(v43 + v18 * (v50 >> 1) + v42);
    do
    {
      v51 = v49 + v20;
      v52 = &v48[v19];
      v53 = &v44[v17];
      if (v11)
      {
        v54 = 0;
        v55 = v49 + v20;
        v56 = &v44[v17];
        v57 = &v48[v19];
        do
        {
          LOBYTE(v27) = result[v54 + 1];
          v58 = (float)LODWORD(v27) - v24;
          v59 = LODWORD(v154);
          v60 = v154 * v58;
          LOBYTE(v59) = *v44;
          v61 = (float)v59 - v23;
          v62 = v25 * v61;
          v63 = (float)(v154 * v58) + (float)(v25 * v61);
          v64 = 8191.0;
          if (v63 <= 8191.0)
          {
            v64 = (float)(v154 * v58) + (float)(v25 * v61);
            if (v63 < 0.0)
              v64 = 0.0;
          }
          LOBYTE(v61) = result[v54];
          v65 = (float)LODWORD(v61) - v24;
          v66 = (float)(v152 * v58) + (float)(v65 * v153);
          v67 = 8191.0;
          if ((float)(v62 + v66) <= 8191.0)
          {
            v67 = v62 + v66;
            if ((float)(v62 + v66) < 0.0)
              v67 = 0.0;
          }
          v68 = LODWORD(v151);
          v69 = v151 * v65;
          v70 = (float)(v151 * v65) + v62;
          v71 = 8191.0;
          if (v70 <= 8191.0)
          {
            v71 = v70;
            if (v70 < 0.0)
              v71 = 0.0;
          }
          LOBYTE(v68) = v44[1];
          v72 = (float)v68 - v23;
          v73 = v25 * v72;
          v74 = v60 + (float)(v25 * v72);
          v75 = 8191.0;
          if (v74 <= 8191.0)
          {
            v75 = v60 + (float)(v25 * v72);
            if (v74 < 0.0)
              v75 = 0.0;
          }
          v76 = 8191.0;
          if ((float)(v66 + v73) <= 8191.0)
          {
            v76 = v66 + v73;
            if ((float)(v66 + v73) < 0.0)
              v76 = 0.0;
          }
          v77 = v69 + v73;
          v78 = (float)(v69 + v73) <= 8191.0;
          v79 = 8191.0;
          if (v78)
          {
            v79 = v77;
            if (v77 < 0.0)
              v79 = 0.0;
          }
          LOBYTE(v72) = *v56;
          v80 = v25 * (float)((float)LODWORD(v72) - v23);
          v81 = 8191.0;
          if ((float)(v60 + v80) <= 8191.0)
          {
            v81 = v60 + v80;
            if ((float)(v60 + v80) < 0.0)
              v81 = 0.0;
          }
          v82 = 8191.0;
          if ((float)(v66 + v80) <= 8191.0)
          {
            v82 = v66 + v80;
            if ((float)(v66 + v80) < 0.0)
              v82 = 0.0;
          }
          v83 = v69 + v80;
          v78 = (float)(v69 + v80) <= 8191.0;
          v84 = 8191.0;
          if (v78)
          {
            v84 = v83;
            if (v83 < 0.0)
              v84 = 0.0;
          }
          LOBYTE(v5) = v56[1];
          v85 = v25 * (float)((float)v5 - v23);
          v86 = v60 + v85;
          v78 = (float)(v60 + v85) <= 8191.0;
          v87 = 8191.0;
          if (v78)
          {
            v87 = v86;
            if (v86 < 0.0)
              v87 = 0.0;
          }
          v88 = v66 + v85;
          v78 = (float)(v66 + v85) <= 8191.0;
          v89 = 8191.0;
          if (v78)
          {
            v89 = v88;
            if (v88 < 0.0)
              v89 = 0.0;
          }
          v90 = v69 + v85;
          v78 = (float)(v69 + v85) <= 8191.0;
          v91 = 8191.0;
          if (v78)
          {
            v91 = v90;
            if (v90 < 0.0)
              v91 = 0.0;
          }
          if (v48)
          {
            v92 = *v48;
            v93 = v48[1];
            v48 += 2;
            v94 = *v57;
            v95 = v57[1];
            v57 += 2;
          }
          else
          {
            v92 = 0;
            v93 = 0;
            v94 = 0;
            v95 = 0;
          }
          _H27 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v64, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          _H28 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v67, 0.0), 8191.0)));
          __asm { FCVT            S28, H28 }
          _H29 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          _H30 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          __asm { FCVT            S30, H30 }
          _H31 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          _H8 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          __asm
          {
            FCVT            S31, H31
            FCVT            S8, H8
          }
          _H10 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          v112 = llroundf(fminf(fmaxf(v82, 0.0), 8191.0));
          __asm { FCVT            S4, H10 }
          _H10 = *(_WORD *)(v37 + 2 * v112);
          __asm { FCVT            S10, H10 }
          _H12 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          _H9 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          __asm { FCVT            S9, H9 }
          _H11 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          _H13 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          __asm
          {
            FCVT            S11, H11
            FCVT            S13, H13
          }
          v124 = (float)((float)(v29 * _S28) + (float)(_S27 * v28)) + (float)(_S29 * v30);
          v125 = (float)((float)(v32 * _S28) + (float)(_S27 * v31)) + (float)(_S29 * v33);
          _S28 = (float)((float)(v35 * _S28) + (float)(_S27 * v34)) + (float)(_S29 * v36);
          _S29 = (float)((float)(v29 * _S31) + (float)(_S30 * v28)) + (float)(_S8 * v30);
          _S5 = (float)((float)(v32 * _S31) + (float)(_S30 * v31)) + (float)(_S8 * v33);
          _S30 = (float)((float)(v35 * _S31) + (float)(_S30 * v34)) + (float)(_S8 * v36);
          _S31 = (float)((float)(v29 * _S10) + (float)(_S4 * v28)) + (float)(_S12 * v30);
          _S8 = (float)((float)(v32 * _S10) + (float)(_S4 * v31)) + (float)(_S12 * v33);
          _S4 = (float)((float)(v35 * _S10) + (float)(_S4 * v34)) + (float)(_S12 * v36);
          _S10 = (float)((float)(v29 * _S11) + (float)(_S9 * v28)) + (float)(_S13 * v30);
          _S12 = (float)((float)(v32 * _S11) + (float)(_S9 * v31)) + (float)(_S13 * v33);
          LOWORD(_S27) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v124, 0.0), 8191.0)));
          _S9 = (float)(v35 * _S11) + (float)(_S9 * v34);
          LOWORD(_S11) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v125, 0.0), 8191.0)));
          LOWORD(_S28) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S28, 0.0), 8191.0)));
          LOWORD(_S29) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S29, 0.0), 8191.0)));
          LOWORD(_S5) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          LOWORD(_S30) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S30, 0.0), 8191.0)));
          LOWORD(_S31) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S31, 0.0), 8191.0)));
          LOWORD(_S8) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S8, 0.0), 8191.0)));
          LOWORD(_S4) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S4, 0.0), 8191.0)));
          LOWORD(_S10) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S10, 0.0), 8191.0)));
          LOWORD(_S12) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S12, 0.0), 8191.0)));
          LOWORD(_S9) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S9 + (float)(_S13 * v36), 0.0), 8191.0)));
          v5 = 998277249;
          __asm
          {
            FCVT            S27, H27
            FCVT            S11, H11
          }
          *(_DWORD *)v49 = _S27;
          *(_DWORD *)(v49 + 4) = _S11;
          v44 += 2;
          v56 += 2;
          __asm
          {
            FCVT            S27, H28
            FCVT            S28, H29
            FCVT            S5, H5
            FCVT            S29, H30
            FCVT            S30, H31
            FCVT            S31, H8
            FCVT            S4, H4
            FCVT            S8, H10
            FCVT            S10, H12
            FCVT            S9, H9
          }
          v148 = (float)v92 * 0.0039216;
          if (!v48)
            v148 = 1.0;
          v149 = (float)v93 * 0.0039216;
          if (!v48)
            v149 = 1.0;
          v150 = (float)v94 * 0.0039216;
          if (!v48)
            v150 = 1.0;
          *(_DWORD *)(v49 + 8) = _S27;
          *(float *)(v49 + 12) = v148;
          *(_DWORD *)(v49 + 16) = _S28;
          *(_DWORD *)(v49 + 20) = _S5;
          *(_DWORD *)(v49 + 24) = _S29;
          *(float *)(v49 + 28) = v149;
          *(_DWORD *)v55 = _S30;
          *(_DWORD *)(v55 + 4) = _S31;
          *(_DWORD *)(v55 + 8) = _S4;
          *(float *)(v55 + 12) = v150;
          if (v48)
            v27 = (float)v95 * 0.0039216;
          else
            v27 = 1.0;
          v49 += 32;
          *(_DWORD *)(v55 + 16) = _S8;
          *(_DWORD *)(v55 + 20) = _S10;
          *(_DWORD *)(v55 + 24) = _S9;
          *(float *)(v55 + 28) = v27;
          v55 += 32;
          v54 += 2;
        }
        while (v11 > v54);
      }
      v44 = &v53[v17];
      result += v18;
      v48 = &v52[v19];
      v49 = v51 + v20;
      v10 += 2;
    }
    while (v13 > v10);
  }
  return result;
}

uint64_t vt_Copy_420vf_rgb_RGfA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[3];
  v18 = a6[5];
  if ((v14 & 1) != 0)
  {
    ++v18;
    ++v14;
    if ((v11 & 1) != 0)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  v19 = a6[2];
  v20 = a6[4];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9)
    v12 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15)
    v21 = v19;
  else
    v21 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v18;
  if (v12 >= v21)
    v24 = v21;
  else
    v24 = v12;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_rgb_RGfA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_420vf_rgb_RGfA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  BOOL v42;
  float *v43;
  uint64_t v44;
  char *v45;
  unsigned __int8 *v46;
  _BYTE *v47;
  unint64_t v48;
  float *v49;
  _BYTE *v50;
  unsigned __int8 *v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;

  v11 = *(_QWORD *)(result + 28);
  v12 = 2 * *result;
  v13 = v11 * a2 / v12;
  v14 = (v11 + v11 * a2) / v12;
  if (2 * v14 != 2 * v13)
  {
    v15 = 0;
    v16 = *(_QWORD *)(result + 20);
    v17 = *(_QWORD *)(result + 44) + 2 * v13;
    v18 = 2 * v14 - 2 * v13;
    v19 = *((_QWORD *)result + 19);
    v20 = (_QWORD *)*((_QWORD *)result + 7);
    v21 = (uint64_t *)*((_QWORD *)result + 8);
    v22 = *v21;
    v23 = v21[1];
    v24 = v21[2];
    v25 = **((_QWORD **)result + 17);
    *(float *)&v26 = (float)*(unsigned int *)(v19 + 128);
    v27 = 1.0 / *(float *)&v26;
    LOWORD(v26) = *(_WORD *)(v19 + 140);
    v28 = (float)v26;
    LOWORD(a5) = *(_WORD *)(v19 + 142);
    v29 = (float)LODWORD(a5);
    v30 = v27 * *(float *)v19;
    v31 = v27 * *(float *)(v19 + 8);
    v32 = v27 * *(float *)(v19 + 16);
    v33 = v27 * *(float *)(v19 + 20);
    v34 = v27 * *(float *)(v19 + 28);
    v35 = *((_QWORD *)result + 14);
    v36 = *((_QWORD *)result + 13) * a2;
    v37 = (_QWORD *)*((_QWORD *)result + 16);
    v38 = *((_QWORD *)result + 15) + 2 * (v36 / v12);
    v39 = *(_QWORD *)(result + 36);
    v40 = (_BYTE *)(*v20 + v22 * v17 + v39);
    v41 = v20[2];
    v42 = v41 == 0;
    result = (unsigned __int8 *)(v41 + v24 * v17 + v39);
    if (v42)
      result = 0;
    v43 = (float *)(*v37 + v38 * v25 + 16 * v35);
    v44 = v20[1] + v23 * (v17 / 2) + v39;
    do
    {
      v45 = (char *)v43 + v25;
      v46 = &result[v24];
      v47 = &v40[v22];
      if (v16)
      {
        v48 = 0;
        v49 = (float *)((char *)v43 + v25);
        v50 = &v40[v22];
        v51 = &result[v24];
        do
        {
          if (result)
          {
            v52 = *result;
            v53 = result[1];
            result += 2;
            v54 = *v51;
            v55 = v51[1];
            v51 += 2;
          }
          else
          {
            v52 = 0;
            v53 = 0;
            v54 = 0;
            v55 = 0;
          }
          LOBYTE(v5) = *(_BYTE *)(v44 + v48);
          v56 = (float)LODWORD(v5) - v29;
          LOBYTE(v6) = *(_BYTE *)(v44 + v48 + 1);
          v57 = (float)LODWORD(v6) - v29;
          v58 = v31 * v57;
          v59 = (float)(v33 * v57) + (float)(v56 * v32);
          v60 = v34 * v56;
          LOBYTE(v7) = *v40;
          v61 = v30 * (float)((float)LODWORD(v7) - v28);
          LOBYTE(v8) = v40[1];
          v62 = v30 * (float)((float)LODWORD(v8) - v28);
          v40 += 2;
          LOBYTE(v9) = *v50;
          v63 = v30 * (float)((float)LODWORD(v9) - v28);
          LOBYTE(v10) = v50[1];
          *v43 = v58 + v61;
          v43[1] = v61 + v59;
          v64 = v30 * (float)((float)LODWORD(v10) - v28);
          v50 += 2;
          v65 = v60 + v61;
          v66 = v58 + v62;
          v67 = v59 + v62;
          v8 = v60 + v62;
          v68 = v58 + v63;
          v69 = v59 + v63;
          v9 = v60 + v63;
          v70 = v58 + v64;
          v6 = v59 + v64;
          v5 = v60 + v64;
          v10 = (float)v52 * 0.0039216;
          if (!result)
            v10 = 1.0;
          v71 = (float)v53 * 0.0039216;
          if (!result)
            v71 = 1.0;
          v72 = (float)v54 * 0.0039216;
          if (!result)
            v72 = 1.0;
          v43[2] = v65;
          v43[3] = v10;
          v43[4] = v66;
          v43[5] = v67;
          v43[6] = v8;
          v43[7] = v71;
          *v49 = v68;
          v49[1] = v69;
          v7 = (float)v55 * 0.0039216;
          v49[2] = v9;
          v49[3] = v72;
          if (!result)
            v7 = 1.0;
          v43 += 8;
          v49[4] = v70;
          v49[5] = v6;
          v49[6] = v5;
          v49[7] = v7;
          v49 += 8;
          v48 += 2;
        }
        while (v16 > v48);
      }
      v40 = &v47[v22];
      v44 += v23;
      result = &v46[v24];
      v43 = (float *)&v45[v25];
      v15 += 2;
    }
    while (v18 > v15);
  }
  return result;
}

void vtDecompressionSubDuctFinishAsynchronousTransfers(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;

  if (*(_QWORD *)(a1 + 152))
  {
    dispatch_group_wait(*(dispatch_group_t *)(a1 + 160), 0xFFFFFFFFFFFFFFFFLL);
    v2 = *(NSObject **)(a1 + 152);
    if (v2)
    {
      dispatch_release(v2);
      *(_QWORD *)(a1 + 152) = 0;
    }
    v3 = *(NSObject **)(a1 + 160);
    if (v3)
    {
      dispatch_release(v3);
      *(_QWORD *)(a1 + 160) = 0;
    }
  }
  v4 = *(_QWORD *)(a1 + 168);
  if (v4)
  {
    vtDecompressionSubDuctAsyncPixelTransfer_StopWorkerThreads(v4);
    *(_QWORD *)(a1 + 168) = 0;
  }
}

void vtDecompressionSubDuctAsyncPixelTransfer_StopWorkerThreads(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t v4;

  if (a1)
  {
    *(_BYTE *)(a1 + 32) = 1;
    FigMemoryBarrier();
    if (*(int *)(a1 + 8) >= 1)
    {
      v2 = 0;
      do
      {
        FigSemaphoreSignal();
        ++v2;
        v3 = *(_DWORD *)(a1 + 8);
      }
      while (v2 < v3);
      if (v3 >= 1)
      {
        v4 = 0;
        do
        {
          FigThreadJoin();
          *(_QWORD *)(a1 + 16 + 8 * v4++) = 0;
        }
        while (v4 < *(int *)(a1 + 8));
      }
    }
    *(_DWORD *)(a1 + 8) = 0;
    FigSemaphoreDestroy();
    FigSimpleMutexDestroy();
    FigSemaphoreDestroy();
    free((void *)a1);
  }
}

uint64_t vtDecompressionSession_handleSessionTerminatedNotification()
{
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

OSStatus VTDecompressionSessionWaitForAsynchronousFrames(VTDecompressionSessionRef session)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD v7[3];
  char __str[32];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (!session || *((_BYTE *)session + 16))
    return FigSignalErrorAt();
  v3 = *((_QWORD *)session + 3);
  if (v3)
    return VTDecompressionSessionRemoteBridge_WaitForAsynchronousFrames(v3);
  v4 = 5000000000;
  VTDecompressionSessionFinishDelayedFrames(session);
  for (; FigSemaphoreWaitRelative() == -12792; v4 *= 2)
  {
    v5 = (uint64_t *)*((_QWORD *)session + 4);
    if (v5)
    {
      v6 = *v5;
      if (v6)
      {
        snprintf(__str, 0x20uLL, "%d", *(_DWORD *)(v6 + 64));
        vtDecompressionDuctGetMinOutputPresentationTimeStampOfFramesBeingDecoded(*((_QWORD *)session + 4), v7);
      }
    }
  }
  FigSemaphoreSignal();
  return 0;
}

CFTypeID VTDecompressionSessionGetTypeID(void)
{
  MEMORY[0x1940281CC](&VTDecompressionSessionGetTypeID_sRegisterVTDecompressionSessionOnce, RegisterVTDecompressionSession);
  return sVTDecompressionSessionID;
}

uint64_t VTDecompressionSessionCreateWithOptions(uint64_t a1, CMFormatDescriptionRef desc, CFTypeRef a3, const __CFDictionary *a4, _OWORD *a5, const __CFDictionary *a6, uint64_t *a7)
{
  uint64_t v7;
  const __CFArray *Extension;
  const __CFArray *v16;
  CFTypeID v17;
  const void *Value;
  int v19;
  int v20;
  _BOOL4 v21;
  uint64_t Instance;
  uint64_t v24;
  __CFDictionary *v25;
  uint64_t v26;
  uint64_t v27;
  int VideoDynamicRange;
  const void *v29;
  const void *v30;
  __CFDictionary *MutableCopy;
  const __CFDictionary *v32;
  const void *v33;
  signed int MediaSubType;
  int v35;
  int v36;
  BOOL v37;
  int v38;
  int v39;
  int v40;
  const __CFAllocator *v41;
  const __CFAllocator *v42;
  uint64_t v43;
  int v44;
  CFStringRef *v45;
  const __CFDictionary *v46;
  const __CFDictionary *v47;
  CFTypeID v48;
  const __CFArray *v49;
  const __CFArray *ValueAtIndex;
  CFTypeID v51;
  CFTypeID v52;
  CFTypeID v53;
  __CFDictionary *v54;
  uint64_t v55;
  int IsServerProcess;
  const __CFDictionary *cf;

  v7 = 4294954394;
  if (desc && a7)
  {
    Extension = (const __CFArray *)CMFormatDescriptionGetExtension(desc, (CFStringRef)*MEMORY[0x1E0CA4A68]);
    if (Extension)
    {
      v16 = Extension;
      v17 = CFGetTypeID(Extension);
      if (v17 != CFArrayGetTypeID() || CFArrayGetCount(v16))
        return FigSignalErrorAt();
    }
    if (vtCheckTraceOnce_once != -1)
      dispatch_once_f(&vtCheckTraceOnce_once, 0, (dispatch_function_t)checkDecompressionSessionTrace);
    *a7 = 0;
    if (a6 && (Value = CFDictionaryGetValue(a6, CFSTR("AllowClientProcessDecode"))) != 0)
      v19 = CFEqual(Value, (CFTypeRef)*MEMORY[0x1E0C9AE50]);
    else
      v19 = 0;
    v20 = VTShouldRunVideoDecodersInProcess();
    if (VTVideoCodecService_ShouldUseSeparateCodecProcessForDecode())
    {
      if (FigServer_IsVideocodecd())
        v21 = 1;
      else
        v21 = FigServer_IsVideoDecodeService() != 0;
      IsServerProcess = v21;
      if (a3)
        goto LABEL_20;
    }
    else
    {
      IsServerProcess = FigServer_IsServerProcess();
      if (a3)
LABEL_20:
        a3 = CFRetain(a3);
    }
    MEMORY[0x1940281CC](&VTDecompressionSessionGetTypeID_sRegisterVTDecompressionSessionOnce, RegisterVTDecompressionSession);
    Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      v24 = FigSemaphoreCreate();
      *(_QWORD *)(Instance + 72) = v24;
      if (v24)
      {
        if (vtDecompressionSessionDeterminePolicyForPossibleHDR10PlusContent_onceToken != -1)
          dispatch_once(&vtDecompressionSessionDeterminePolicyForPossibleHDR10PlusContent_onceToken, &__block_literal_global_0);
        *(_BYTE *)(Instance + 144) = vtDecompressionSessionDeterminePolicyForPossibleHDR10PlusContent_hdr10PlusEnabled;
        if (vtDecompressionSessionSetupDolbyVision8p1_onceToken != -1)
          dispatch_once(&vtDecompressionSessionSetupDolbyVision8p1_onceToken, &__block_literal_global_13);
        *(_BYTE *)(Instance + 145) = vtDecompressionSessionSetupDolbyVision8p1_dolbyVision8p1Enabled;
        if (vtDecompressionSessionSetupDolbyVision10p4_onceToken != -1)
          dispatch_once(&vtDecompressionSessionSetupDolbyVision10p4_onceToken, &__block_literal_global_17);
        *(_BYTE *)(Instance + 146) = vtDecompressionSessionSetupDolbyVision10p4_dolbyVision10p4Enabled;
        if (a6)
          FigCFDictionaryGetInt32IfPresent();
        v26 = FigOSTransactionCreate();
        *(_QWORD *)(Instance + 152) = v26;
        if (!v26)
        {
          v27 = FigSignalErrorAt();
          goto LABEL_148;
        }
        if (!IsServerProcess && !v20 && !v19)
        {
          v27 = VTDecompressionSessionRemoteBridge_Create(Instance, a1, desc, (const __CFDictionary *)a3, a4, a5, (uint64_t)a6, (uint64_t *)(Instance + 24));
          if (!(_DWORD)v27)
          {
            FigStartForwardingMediaServicesProcessDeathNotification();
            v25 = 0;
            *(CFAbsoluteTime *)(Instance + 160) = CFAbsoluteTimeGetCurrent();
LABEL_39:
            vtDecompressionSetAllowBitstreamToChangeFrameDimensionsIfNecessary(desc, Instance);
LABEL_40:
            v7 = 0;
            *a7 = Instance;
            Instance = 0;
            goto LABEL_95;
          }
LABEL_148:
          v7 = v27;
          v25 = 0;
          goto LABEL_95;
        }
        VideoDynamicRange = CMVideoFormatDescriptionGetVideoDynamicRange();
        v54 = 0;
        if (a4 && VideoDynamicRange >= 2)
        {
          if (CelestialShouldAllowHTPCIOSurfacesForHDRPlaybackToCA()
            && (v29 = (const void *)*MEMORY[0x1E0C9AE50],
                v30 = (const void *)*MEMORY[0x1E0CA8FE8],
                v29 == CFDictionaryGetValue(a4, (const void *)*MEMORY[0x1E0CA8FE8])))
          {
            MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
            CFDictionaryRemoveValue(MutableCopy, v30);
            v54 = MutableCopy;
            CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E0CA8FE0], v29);
          }
          else
          {
            v54 = 0;
          }
        }
        if (v54)
          v32 = v54;
        else
          v32 = a4;
        *(_QWORD *)(Instance + 80) = v32;
        if (v32)
          CFRetain(v32);
        *(_QWORD *)(Instance + 88) = a3;
        if (a3)
          CFRetain(a3);
        *(_QWORD *)(Instance + 128) = a6;
        if (a6)
          CFRetain(a6);
        if (a5)
          *(_OWORD *)(Instance + 96) = *a5;
        v55 = Instance + 32;
        v33 = *(const void **)(Instance + 88);
        if (v33)
        {
          cf = (const __CFDictionary *)CFRetain(v33);
          if (cf)
            goto LABEL_63;
          if (*(_QWORD *)(Instance + 88))
          {
            v7 = FigSignalErrorAt();
            v41 = CFGetAllocator((CFTypeRef)Instance);
            vtDecompressionDuctFinalize(v41, 0);
            v42 = CFGetAllocator((CFTypeRef)Instance);
            vtDecompressionSubDuctFinalize(v42, 0);
            v25 = v54;
            if ((_DWORD)v7)
              goto LABEL_95;
            if (*(_QWORD *)v55)
            {
              if (*(_QWORD *)(*(_QWORD *)v55 + 8))
              {
                CMNotificationCenterGetDefaultLocalCenter();
                v43 = FigNotificationCenterAddWeakListener();
                if ((_DWORD)v43)
                {
                  v7 = v43;
                  goto LABEL_95;
                }
              }
            }
            *(CFAbsoluteTime *)(Instance + 160) = CFAbsoluteTimeGetCurrent();
            if (IsServerProcess)
              goto LABEL_40;
            goto LABEL_39;
          }
        }
        cf = 0;
LABEL_63:
        MediaSubType = CMFormatDescriptionGetMediaSubType(desc);
        v35 = MediaSubType;
        if (MediaSubType <= 1836415072)
        {
          if (MediaSubType <= 1718908519)
          {
            if (MediaSubType == 1635135537)
            {
LABEL_82:
              if (FigIsHDRAllowedOnDevice())
              {
                FigCFDictionaryGetBooleanIfPresent();
                if (FigVideoFormatDescriptionConformsToDolbyVisionProfile10p0()
                  || *(_BYTE *)(Instance + 146)
                  && FigVideoFormatDescriptionConformsToDolbyVisionProfile10p4())
                {
                  if (v35 == 1902212657)
                  {
                    v35 = 1902403958;
                  }
                  else if (v35 == 1635135537)
                  {
                    v35 = 1684108849;
                  }
                }
                else if (*(_BYTE *)(Instance + 144) && vtFormatDescriptionIsPQ(desc))
                {
                  VTIsHardwareDecodeSupported(0x61763031u);
                }
              }
              goto LABEL_93;
            }
            v39 = 1667790435;
            goto LABEL_80;
          }
          if (MediaSubType == 1718908520 || MediaSubType == 1751479857)
            goto LABEL_91;
          v36 = 1752589105;
          if (MediaSubType != 1752589105)
            goto LABEL_93;
          v37 = FigVideoFormatDescriptionContainsAlphaChannel() == 0;
          v38 = 1836415073;
        }
        else
        {
          if (MediaSubType <= 1902667125)
          {
            if (MediaSubType != 1836415073 && MediaSubType != 1869117027)
            {
              if (MediaSubType != 1902212657)
                goto LABEL_93;
              goto LABEL_82;
            }
LABEL_91:
            if (!FigIsHDRAllowedOnDevice())
              goto LABEL_93;
            FigCFDictionaryGetBooleanIfPresent();
            if (FigVideoFormatDescriptionConformsToDolbyVisionProfile84())
              goto LABEL_108;
            v44 = v35;
            v45 = (CFStringRef *)MEMORY[0x1E0CA8E98];
            if (*(_BYTE *)(Instance + 144))
            {
              CMFormatDescriptionGetExtension(desc, (CFStringRef)*MEMORY[0x1E0CA8E98]);
              if (FigCFEqual())
              {
                v46 = (const __CFDictionary *)CMFormatDescriptionGetExtension(desc, (CFStringRef)*MEMORY[0x1E0CA2240]);
                if (v46)
                {
                  v47 = v46;
                  v48 = CFGetTypeID(v46);
                  if (v48 == CFDictionaryGetTypeID())
                  {
                    v49 = (const __CFArray *)CFDictionaryGetValue(v47, CFSTR("hvcC"));
                    if (v49)
                    {
                      ValueAtIndex = v49;
                      v51 = CFGetTypeID(v49);
                      if (v51 == CFArrayGetTypeID())
                      {
                        ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(ValueAtIndex, 0);
                        if (!ValueAtIndex)
                          goto LABEL_141;
                      }
                      else
                      {
                        v52 = CFGetTypeID(ValueAtIndex);
                        if (v52 != CFDataGetTypeID())
                          goto LABEL_141;
                      }
                      v53 = CFGetTypeID(ValueAtIndex);
                      if (v53 == CFDataGetTypeID() && !FigHEVCBridge_GetHEVCParameterSetAtIndex())
                        FigHEVCBridge_GetSPSChromaFormatAndBitDepths();
                    }
                  }
                }
              }
            }
LABEL_141:
            if (!*(_BYTE *)(Instance + 145)
              || (CMFormatDescriptionGetExtension(desc, *v45), !FigCFEqual()))
            {
              v35 = v44;
              goto LABEL_93;
            }
            v35 = v44;
            if (!FigVideoFormatDescriptionConformsToDolbyVisionProfile81())
            {
LABEL_93:
              *(_QWORD *)v55 = 0;
              *(_QWORD *)(Instance + 40) = 0;
              v40 = CFGetAllocator((CFTypeRef)Instance);
              VTSelectAndCreateVideoDecoderInstanceInternal(v35, v40, 0, cf);
            }
LABEL_108:
            if (v35 <= 1836415072)
            {
              switch(v35)
              {
                case 1667790435:
                  v35 = 1667524657;
                  break;
                case 1751479857:
                  v35 = 1685481573;
                  break;
                case 1752589105:
                  v35 = 1685481521;
                  break;
              }
            }
            else if (v35 > 1902671458)
            {
              if (v35 == 1902671459)
              {
                v35 = 1902405681;
              }
              else if (v35 == 1902998904)
              {
                v35 = 1902407032;
              }
            }
            else if (v35 == 1836415073)
            {
              v35 = 1684895096;
            }
            else if (v35 == 1902667126)
            {
              v35 = 1902405733;
            }
            goto LABEL_93;
          }
          if (MediaSubType == 1902667126)
            goto LABEL_91;
          v36 = 1902671459;
          if (MediaSubType != 1902671459)
          {
            v39 = 1902998904;
LABEL_80:
            if (MediaSubType != v39)
              goto LABEL_93;
            goto LABEL_91;
          }
          v37 = FigVideoFormatDescriptionContainsAlphaChannel() == 0;
          v38 = 1902998904;
        }
        if (v37)
          v35 = v36;
        else
          v35 = v38;
        goto LABEL_91;
      }
      CFRelease((CFTypeRef)Instance);
      Instance = 0;
    }
    v25 = 0;
    v7 = 4294954392;
LABEL_95:
    if (a3)
      CFRelease(a3);
    if (Instance)
      CFRelease((CFTypeRef)Instance);
    if (v25)
      CFRelease(v25);
  }
  return v7;
}

uint64_t vtDecompressionSetAllowBitstreamToChangeFrameDimensionsIfNecessary(const opaqueCMFormatDescription *a1, uint64_t a2)
{
  uint64_t result;

  result = CMFormatDescriptionGetMediaSubType(a1);
  if ((_DWORD)result == 1902212657 || (_DWORD)result == 1635135537)
  {
    result = dyld_program_sdk_at_least();
    if ((result & 1) == 0)
      return VTDecompressionSessionSetProperty(a2, CFSTR("AllowBitstreamToChangeFrameDimensions"), (const __CFNumber *)*MEMORY[0x1E0C9AE40]);
  }
  return result;
}

Boolean VTIsStereoMVHEVCDecodeSupported(void)
{
  return 1;
}

OSStatus VTDecompressionSessionSetMultiImageCallback(VTDecompressionSessionRef decompressionSession, VTDecompressionOutputMultiImageCallback outputMultiImageCallback, void *outputMultiImageRefcon)
{
  void (__cdecl *v4)(void *, void *, OSStatus, VTDecodeInfoFlags, CMTaggedBufferGroupRef, CMTime, CMTime);

  if (!decompressionSession || !outputMultiImageCallback)
    goto LABEL_12;
  if (*((_QWORD *)decompressionSession + 3))
    return VTDecompressionSessionRemoteBridge_SetMultiImageCallback(*((_QWORD *)decompressionSession + 3), (uint64_t)outputMultiImageCallback, (uint64_t)outputMultiImageRefcon);
  v4 = (void (__cdecl *)(void *, void *, OSStatus, VTDecodeInfoFlags, CMTaggedBufferGroupRef, CMTime, CMTime))*((_QWORD *)decompressionSession + 14);
  if (v4 == outputMultiImageCallback || v4 == 0)
  {
    *((_QWORD *)decompressionSession + 14) = outputMultiImageCallback;
    *((_QWORD *)decompressionSession + 15) = outputMultiImageRefcon;
  }
  else
  {
LABEL_12:
    FigSignalErrorAt();
  }
  return 0;
}

uint64_t vtDecompressionSessionCopyPropertiesHandledByVideoToolbox(CFTypeRef *a1)
{
  MEMORY[0x1940281CC](&sCreatePropertiesHandledByVideoToolboxOnce_0, vtDecompressionSessionCreatePropertiesHandledByVideoToolbox);
  if (!sVTDecompressionSessionPropertiesHandledByVideoToolbox)
    return FigSignalErrorAt();
  *a1 = CFRetain((CFTypeRef)sVTDecompressionSessionPropertiesHandledByVideoToolbox);
  return 0;
}

uint64_t vtDecompressionSubDuctSetProperty(uint64_t a1, const void *a2, const __CFNumber *a3, _BYTE *a4)
{
  uint64_t result;
  uint64_t (*v9)(uint64_t, const void *, const __CFNumber *);
  CFTypeID TypeID;
  int v11;
  CFTypeID v12;
  const void *v13;
  const __CFAllocator *v14;
  CFDictionaryRef Copy;
  int v16;
  CFTypeID v17;
  uint64_t v18;
  CFTypeID v19;
  uint64_t v20;
  CFTypeID v21;
  CFTypeID v22;
  uint64_t v23;
  const void *v24;
  CFTypeID v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  const void *v33;
  CFTypeID v34;
  const void *v35;
  const void *v36;
  const void *v37;
  const __CFString *v38;
  const void *v39;
  CFTypeID v40;
  const void *v41;
  const void *v42;
  CFTypeID v43;
  const void *v44;
  const void *v45;
  CFTypeID v46;
  const void *v47;
  const void *v48;
  CFTypeID v49;
  const __CFNumber *v50;
  const void *v51;
  const void *v52;
  uint64_t v53;
  uint64_t v54;
  int valuePtr;

  if (CFEqual(CFSTR("PixelBufferPool"), a2)
    || CFEqual(CFSTR("PixelBufferPoolIsShared"), a2)
    || CFEqual(CFSTR("PoolPixelBufferAttributesSeed"), a2)
    || CFEqual(CFSTR("PoolPixelBufferAttributes"), a2)
    || CFEqual(CFSTR("NumberOfFramesInDecoder"), a2)
    || CFEqual(CFSTR("MinFrameIDOfFramesInDecoder"), a2)
    || CFEqual(CFSTR("MaxFrameIDOfFramesInDecoder"), a2))
  {
    goto LABEL_8;
  }
  if (CFEqual(CFSTR("OutputPoolRequestedMinimumBufferCount"), a2))
  {
    if (!a3)
    {
      MEMORY[0x1940280C4](*(_QWORD *)(a1 + 104));
      v16 = *(_DWORD *)(a1 + 76) + 1;
      *(_DWORD *)(a1 + 72) = 0;
      *(_DWORD *)(a1 + 76) = v16;
      goto LABEL_28;
    }
    TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(a3))
    {
      if (a1)
      {
        valuePtr = -1;
        CFNumberGetValue(a3, kCFNumberSInt32Type, &valuePtr);
        if ((valuePtr & 0x80000000) == 0)
        {
          MEMORY[0x1940280C4](*(_QWORD *)(a1 + 104));
          v11 = *(_DWORD *)(a1 + 76) + 1;
          *(_DWORD *)(a1 + 72) = valuePtr;
          *(_DWORD *)(a1 + 76) = v11;
LABEL_28:
          MEMORY[0x1940280D0](*(_QWORD *)(a1 + 104));
          goto LABEL_29;
        }
      }
    }
LABEL_8:
    result = FigSignalErrorAt();
LABEL_9:
    LOBYTE(v9) = 0;
    goto LABEL_10;
  }
  if (CFEqual(CFSTR("PixelTransferProperties"), a2))
  {
    if (a3)
    {
      v12 = CFDictionaryGetTypeID();
      if (v12 != CFGetTypeID(a3))
        goto LABEL_8;
    }
    if (!a1)
    {
LABEL_29:
      result = 0;
      goto LABEL_9;
    }
    vtDecompressionSubDuctFinishAsynchronousTransfers(a1);
    v13 = *(const void **)(a1 + 136);
    if (v13)
      CFRelease(v13);
    if (a3)
    {
      v14 = CFGetAllocator(*(CFTypeRef *)a1);
      Copy = CFDictionaryCreateCopy(v14, a3);
    }
    else
    {
      Copy = 0;
    }
    *(_QWORD *)(a1 + 136) = Copy;
    result = *(_QWORD *)(a1 + 128);
    if (result)
    {
      CFRelease((CFTypeRef)result);
      result = 0;
      *(_QWORD *)(a1 + 128) = 0;
    }
    goto LABEL_45;
  }
  if (CFEqual(CFSTR("ClientPID"), a2))
  {
    if (!a3)
      goto LABEL_8;
    v17 = CFNumberGetTypeID();
    if (v17 != CFGetTypeID(a3) || !a1)
      goto LABEL_8;
    MEMORY[0x1940280C4](*(_QWORD *)(a1 + 104));
    CFNumberGetValue(a3, kCFNumberSInt32Type, (void *)(a1 + 240));
    if (*(_QWORD *)(a1 + 152))
      v18 = FigDispatchQueueSetPriorityAndClientPID();
    else
      v18 = 0;
    v23 = *(_QWORD *)(a1 + 168);
    if (v23)
      v18 = vtDecompressionSubDuctAsyncPixelTransfer_SetClientPIDOnWorkerThreads(v23, *(_DWORD *)(a1 + 240));
    v24 = *(const void **)(a1 + 128);
    if (v24)
      v18 = VTSessionSetProperty(v24, CFSTR("ClientPID"), a3);
    MEMORY[0x1940280D0](*(_QWORD *)(a1 + 104));
    LOBYTE(v9) = 0;
    goto LABEL_91;
  }
  if (CFEqual(CFSTR("ThrottleForBackground"), a2))
  {
    if (!a3)
      goto LABEL_8;
    v19 = CFBooleanGetTypeID();
    if (v19 != CFGetTypeID(a3) || !a1)
      goto LABEL_8;
    MEMORY[0x1940280C4](*(_QWORD *)(a1 + 104));
    *(_BYTE *)(a1 + 256) = CFBooleanGetValue(a3);
    if (*(_QWORD *)(a1 + 152))
      v20 = FigDispatchQueueSetPriorityAndClientPID();
    else
      v20 = 0;
    v27 = *(_QWORD *)(a1 + 168);
    if (v27)
    {
      if (*(_BYTE *)(a1 + 257))
        v28 = 31;
      else
        v28 = 3;
      if (*(_BYTE *)(a1 + 256))
        v29 = 16;
      else
        v29 = v28;
      v20 = vtDecompressionSubDuctAsyncPixelTransfer_SetPriorityOnWorkerThreads(v27, v29);
    }
    MEMORY[0x1940280D0](*(_QWORD *)(a1 + 104));
    LOBYTE(v9) = 1;
    goto LABEL_78;
  }
  if (CFEqual(CFSTR("RealTime"), a2))
  {
    if (a3)
    {
      v21 = CFGetTypeID(a3);
      if (v21 != CFBooleanGetTypeID())
        goto LABEL_8;
    }
    if (!a1)
      goto LABEL_8;
    MEMORY[0x1940280C4](*(_QWORD *)(a1 + 104));
    *(_BYTE *)(a1 + 257) = FigCFEqual();
    if (*(_QWORD *)(a1 + 152))
      v18 = FigDispatchQueueSetPriorityAndClientPID();
    else
      v18 = 0;
    v30 = *(_QWORD *)(a1 + 168);
    if (v30)
    {
      if (*(_BYTE *)(a1 + 257))
        v31 = 31;
      else
        v31 = 3;
      if (*(_BYTE *)(a1 + 256))
        v32 = 16;
      else
        v32 = v31;
      v18 = vtDecompressionSubDuctAsyncPixelTransfer_SetPriorityOnWorkerThreads(v30, v32);
    }
    v33 = *(const void **)(a1 + 128);
    if (v33)
      v18 = VTSessionSetProperty(v33, CFSTR("RealTime"), a3);
    MEMORY[0x1940280D0](*(_QWORD *)(a1 + 104));
    LOBYTE(v9) = 1;
LABEL_91:
    result = v18;
    goto LABEL_10;
  }
  if (CFEqual(CFSTR("MaximizePowerEfficiency"), a2))
  {
    if (a3)
    {
      v22 = CFGetTypeID(a3);
      if (v22 != CFBooleanGetTypeID())
        goto LABEL_8;
    }
    if (!a1)
      goto LABEL_8;
    MEMORY[0x1940280C4](*(_QWORD *)(a1 + 104));
    *(_BYTE *)(a1 + 258) = FigCFEqual();
    MEMORY[0x1940280D0](*(_QWORD *)(a1 + 104));
    result = 0;
LABEL_45:
    LOBYTE(v9) = 1;
    goto LABEL_10;
  }
  if (CFEqual(CFSTR("MaxAgeForOutputPixelBufferPool"), a2))
  {
    if (!a3)
      goto LABEL_8;
    v25 = CFNumberGetTypeID();
    if (v25 != CFGetTypeID(a3))
      goto LABEL_8;
    v54 = 0;
    if (!a1)
    {
      v20 = FigSignalErrorAt();
LABEL_136:
      LOBYTE(v9) = 0;
LABEL_78:
      result = v20;
      goto LABEL_10;
    }
    MEMORY[0x1940280C4](*(_QWORD *)(a1 + 104));
    CFNumberGetValue(a3, kCFNumberDoubleType, &v54);
    v26 = CVPixelBufferPoolSetMaxBufferAge();
    goto LABEL_134;
  }
  if (CFEqual(CFSTR("ColorPrimaries"), a2))
  {
    if (!a3)
      goto LABEL_8;
    v34 = CFGetTypeID(a3);
    if (v34 != CFStringGetTypeID() || !a1)
      goto LABEL_8;
    MEMORY[0x1940280C4](*(_QWORD *)(a1 + 104));
    v35 = *(const void **)(a1 + 200);
    *(_QWORD *)(a1 + 200) = a3;
    CFRetain(a3);
    if (v35)
      CFRelease(v35);
    v36 = *(const void **)(a1 + 232);
    if (v36)
    {
      CFRelease(v36);
      *(_QWORD *)(a1 + 232) = 0;
    }
    v37 = *(const void **)(a1 + 128);
    if (v37)
    {
      v38 = CFSTR("DestinationColorPrimaries");
      v39 = *(const void **)(a1 + 200);
LABEL_133:
      v26 = VTSessionSetProperty(v37, v38, v39);
LABEL_134:
      v20 = v26;
LABEL_135:
      MEMORY[0x1940280D0](*(_QWORD *)(a1 + 104));
      goto LABEL_136;
    }
    goto LABEL_138;
  }
  if (CFEqual(CFSTR("TransferFunction"), a2))
  {
    if (!a3)
      goto LABEL_8;
    v40 = CFGetTypeID(a3);
    if (v40 != CFStringGetTypeID() || !a1)
      goto LABEL_8;
    MEMORY[0x1940280C4](*(_QWORD *)(a1 + 104));
    v41 = *(const void **)(a1 + 208);
    *(_QWORD *)(a1 + 208) = a3;
    CFRetain(a3);
    if (v41)
      CFRelease(v41);
    v42 = *(const void **)(a1 + 232);
    if (v42)
    {
      CFRelease(v42);
      *(_QWORD *)(a1 + 232) = 0;
    }
    v37 = *(const void **)(a1 + 128);
    if (v37)
    {
      v38 = CFSTR("DestinationTransferFunction");
      v39 = *(const void **)(a1 + 208);
      goto LABEL_133;
    }
LABEL_138:
    v20 = 0;
    goto LABEL_135;
  }
  if (CFEqual(CFSTR("YCbCrMatrix"), a2))
  {
    if (!a3)
      goto LABEL_8;
    v43 = CFGetTypeID(a3);
    if (v43 != CFStringGetTypeID() || !a1)
      goto LABEL_8;
    MEMORY[0x1940280C4](*(_QWORD *)(a1 + 104));
    v44 = *(const void **)(a1 + 216);
    *(_QWORD *)(a1 + 216) = a3;
    CFRetain(a3);
    if (v44)
      CFRelease(v44);
    v45 = *(const void **)(a1 + 232);
    if (v45)
    {
      CFRelease(v45);
      *(_QWORD *)(a1 + 232) = 0;
    }
    v37 = *(const void **)(a1 + 128);
    if (v37)
    {
      v38 = CFSTR("DestinationYCbCrMatrix");
      v39 = *(const void **)(a1 + 216);
      goto LABEL_133;
    }
    goto LABEL_138;
  }
  if (CFEqual(CFSTR("ICCProfile"), a2))
  {
    if (!a3)
      goto LABEL_8;
    v46 = CFGetTypeID(a3);
    if (v46 != CFDataGetTypeID() || !a1)
      goto LABEL_8;
    MEMORY[0x1940280C4](*(_QWORD *)(a1 + 104));
    v47 = *(const void **)(a1 + 224);
    *(_QWORD *)(a1 + 224) = a3;
    CFRetain(a3);
    if (v47)
      CFRelease(v47);
    v48 = *(const void **)(a1 + 232);
    if (v48)
    {
      CFRelease(v48);
      *(_QWORD *)(a1 + 232) = 0;
    }
    v37 = *(const void **)(a1 + 128);
    if (v37)
    {
      v38 = CFSTR("DestinationICCProfile");
      v39 = *(const void **)(a1 + 224);
      goto LABEL_133;
    }
    goto LABEL_138;
  }
  if (CFEqual(CFSTR("GeneratePerFrameHDRDisplayMetadata"), a2))
  {
    if (a3)
    {
      v49 = CFGetTypeID(a3);
      if (v49 == CFBooleanGetTypeID())
      {
        if (a1)
        {
          v50 = (const __CFNumber *)*MEMORY[0x1E0C9AE50];
          MEMORY[0x1940280C4](*(_QWORD *)(a1 + 104));
          if (v50 == a3)
          {
            *(_BYTE *)(a1 + 272) = 1;
          }
          else
          {
            *(_BYTE *)(a1 + 272) = 0;
            v51 = *(const void **)(a1 + 280);
            if (v51)
            {
              CFRelease(v51);
              *(_QWORD *)(a1 + 280) = 0;
            }
            v52 = *(const void **)(a1 + 288);
            if (v52)
            {
              CFRelease(v52);
              *(_QWORD *)(a1 + 288) = 0;
            }
          }
          goto LABEL_28;
        }
      }
    }
    goto LABEL_8;
  }
  if (!a1)
    goto LABEL_8;
  v53 = *(_QWORD *)(a1 + 8);
  v9 = *(uint64_t (**)(uint64_t, const void *, const __CFNumber *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 56);
  if (v9)
  {
    result = v9(v53, a2, a3);
    goto LABEL_9;
  }
  result = 4294954514;
LABEL_10:
  if (a4)
    *a4 = (_BYTE)v9;
  return result;
}

uint64_t vtDecompressionSubDuctAsyncPixelTransfer_SetClientPIDOnWorkerThreads(uint64_t a1, int a2)
{
  CFNumberRef v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int valuePtr;

  valuePtr = a2;
  v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  if (*(int *)(a1 + 8) < 1)
  {
    v6 = 0;
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = FigThreadSetProperty();
      ++v4;
    }
    while (v4 < *(int *)(a1 + 8));
    v6 = v5;
  }
  CFRelease(v3);
  return v6;
}

uint64_t vtDecompressionSubDuctAsyncPixelTransfer_SetPriorityOnWorkerThreads(uint64_t a1, int a2)
{
  uint64_t v4;
  const __CFAllocator *v5;
  CFNumberRef v6;
  uint64_t v7;
  int valuePtr;

  if (*(int *)(a1 + 8) < 1)
    return 0;
  v4 = 0;
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  do
  {
    valuePtr = a2;
    v6 = CFNumberCreate(v5, kCFNumberSInt32Type, &valuePtr);
    v7 = FigThreadSetProperty();
    if (v6)
      CFRelease(v6);
    ++v4;
  }
  while (v4 < *(int *)(a1 + 8));
  return v7;
}

uint64_t VTDecompressionSessionSetProperty(uint64_t a1, const void *a2, const __CFNumber *a3)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  CFTypeID v11;
  uint64_t v12;
  uint64_t (*v13)(_QWORD, _QWORD, _QWORD);
  CFTypeID TypeID;
  CFTypeID v15;
  const void *v16;
  CFTypeID v17;
  uint64_t v18;
  uint64_t (*v19)(_QWORD, _QWORD, _QWORD);
  int v21;
  double v22;
  char v23;

  v23 = 0;
  if (*(_BYTE *)(a1 + 16))
    return FigSignalErrorAt();
  v7 = *(_QWORD *)(a1 + 24);
  if (v7)
    return VTDecompressionSessionRemoteBridge_SetProperty(v7, (uint64_t)a2, (uint64_t)a3);
  v9 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (!vtDecompressionSessionIsPropertyHandledByVideoToolbox(a2))
    goto LABEL_37;
  if (vtDecompressionSessionIsPropertySupportedBySubDuct(a2))
  {
    if (!v8)
    {
      v12 = *(_QWORD *)(v9 + 8);
      v13 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v13)
        return v13(v12, a2, a3);
      return 4294954514;
    }
    v10 = vtDecompressionSubDuctSetProperty(v8, a2, a3, &v23);
    if (!v23)
      return v10;
    goto LABEL_38;
  }
  if (!CFEqual(a2, CFSTR("OnlyTheseFrames")))
  {
    if (CFEqual(a2, CFSTR("ReducedFrameDelivery")))
    {
      if (!*(_BYTE *)(v9 + 104))
        goto LABEL_37;
      if (!a3)
      {
        v10 = 0;
        *(_QWORD *)(v9 + 120) = 0x3FF0000000000000;
        return v10;
      }
      TypeID = CFNumberGetTypeID();
      if (TypeID == CFGetTypeID(a3))
      {
        v22 = 1.0;
        CFNumberGetValue(a3, kCFNumberDoubleType, &v22);
        if (v22 < 0.0 || v22 > 1.0)
          return FigSignalErrorAt();
        v10 = 0;
        *(double *)(v9 + 120) = v22;
        return v10;
      }
    }
    else if (CFEqual(a2, CFSTR("PowerLogSessionID")))
    {
      if (!a3)
        return FigSignalErrorAt();
      v15 = CFGetTypeID(a3);
      if (v15 != CFStringGetTypeID())
        return FigSignalErrorAt();
      v16 = *(const void **)(v9 + 176);
      *(_QWORD *)(v9 + 176) = a3;
      CFRetain(a3);
      if (v16)
        CFRelease(v16);
    }
    else if (CFEqual(a2, CFSTR("TemporalLevelLimit")))
    {
      if (!*(_BYTE *)(v9 + 104))
        goto LABEL_37;
      if (!a3)
      {
        v10 = 0;
        *(_DWORD *)(v9 + 112) = 0x7FFFFFFF;
        return v10;
      }
      v17 = CFNumberGetTypeID();
      if (v17 != CFGetTypeID(a3))
        return FigSignalErrorAt();
      CFNumberGetValue(a3, kCFNumberIntType, (void *)(v9 + 112));
    }
    else if (CFEqual(CFSTR("NumberOfFramesBeingDecoded"), a2)
           || CFEqual(CFSTR("MinOutputPresentationTimeStampOfFramesBeingDecoded"), a2)
           || CFEqual(CFSTR("MaxOutputPresentationTimeStampOfFramesBeingDecoded"), a2)
           || CFEqual(CFSTR("UsingSandboxedVideoDecoder"), a2)
           || CFEqual(CFSTR("SuggestedQualityOfServiceTiers"), a2))
    {
      return FigSignalErrorAt();
    }
    return 0;
  }
  if (*(_BYTE *)(v9 + 104))
  {
    if (!a3)
    {
LABEL_15:
      v10 = 0;
      *(_DWORD *)(v9 + 108) = 0;
      return v10;
    }
    v11 = CFStringGetTypeID();
    if (v11 == CFGetTypeID(a3))
    {
      if (CFEqual(a3, CFSTR("AllFrames")))
        goto LABEL_15;
      if (CFEqual(a3, CFSTR("NonDroppableFrames")))
      {
        v10 = 0;
        v21 = 1;
LABEL_58:
        *(_DWORD *)(v9 + 108) = v21;
        return v10;
      }
      if (CFEqual(a3, CFSTR("IFrames")))
      {
        v10 = 0;
        v21 = 2;
        goto LABEL_58;
      }
      if (CFEqual(a3, CFSTR("KeyFrames")))
      {
        v10 = 0;
        v21 = 3;
        goto LABEL_58;
      }
    }
    return FigSignalErrorAt();
  }
LABEL_37:
  v10 = 4294954396;
LABEL_38:
  if (vtDecompressionSessionIsPropertySupportedByVideoDecoder(a1, a2))
  {
    v18 = *(_QWORD *)(v9 + 8);
    v19 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v19)
      return v19(v18, a2, a3);
    return 4294954514;
  }
  return v10;
}

uint64_t vtDecompressionSessionIsPropertySupportedByVideoDecoder(uint64_t a1, const void *a2)
{
  uint64_t v2;
  uint64_t v5;
  void (*v6)(uint64_t, CFDictionaryRef *);
  CFDictionaryRef theDict;

  theDict = 0;
  if (*(_BYTE *)(a1 + 16))
    return 0;
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v6 = *(void (**)(uint64_t, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v6)
    return 0;
  v6(v5, &theDict);
  if (!theDict)
    return 0;
  v2 = CFDictionaryContainsKey(theDict, a2);
  if (theDict)
    CFRelease(theDict);
  return v2;
}

void VTDecompressionSessionGetMinOutputPresentationTimeStampOfFramesBeingDecoded(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  if (a1 && !*(_BYTE *)(a1 + 16))
  {
    if (!*(_QWORD *)(a1 + 24))
      vtDecompressionDuctGetMinOutputPresentationTimeStampOfFramesBeingDecoded(*(_QWORD *)(a1 + 32), a2);
    VTDecompressionSessionRemoteBridge_GetMinOutputPresentationTimeStampOfFramesBeingDecoded(*(_QWORD *)(a1 + 24), a2);
  }
  else
  {
    FigSignalErrorAt();
    v3 = MEMORY[0x1E0CA2E18];
    *(_OWORD *)a2 = *MEMORY[0x1E0CA2E18];
    a2[2] = *(_QWORD *)(v3 + 16);
  }
}

uint64_t vtDecompressionSubDuctCopyProperty(uint64_t a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t UInt64;
  uint64_t *v9;
  int v10;
  const __CFAllocator *v11;
  CFNumberType v12;
  uint64_t *p_Count;
  uint64_t v14;
  uint64_t result;
  CFDictionaryRef PixelBufferAttributes;
  CFDictionaryRef *v17;
  int v18;
  CFDictionaryRef *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, const void *, uint64_t, uint64_t *);
  int64_t v23;
  int64_t v24;
  const void **v25;
  const void *v26;
  uint64_t i;
  const void *v28;
  int64_t v29;
  int64_t v30;
  const void *v31;
  uint64_t j;
  uint64_t Count;

  if (CFEqual(CFSTR("PixelBufferPool"), a2))
  {
    *a4 = 0;
    if (a1)
    {
      MEMORY[0x1940280C4](*(_QWORD *)(a1 + 104));
      vtDecompressionSubDuctEnsurePixelBufferPoolsAreUpToDate(a1);
      MEMORY[0x1940280D0](*(_QWORD *)(a1 + 104));
      UInt64 = (uint64_t)CVPixelBufferPoolRetain(*(CVPixelBufferPoolRef *)(a1 + 96));
LABEL_13:
      v14 = UInt64;
LABEL_14:
      result = 0;
      *a4 = v14;
      return result;
    }
    return 0;
  }
  if (CFEqual(CFSTR("OutputPoolRequestedMinimumBufferCount"), a2))
  {
    *a4 = 0;
    if (a1)
    {
      v10 = *(_DWORD *)(a1 + 72);
      v9 = (uint64_t *)(a1 + 72);
      if (v10)
      {
        v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v12 = kCFNumberSInt32Type;
        p_Count = v9;
LABEL_12:
        UInt64 = (uint64_t)CFNumberCreate(v11, v12, p_Count);
        goto LABEL_13;
      }
    }
    return 0;
  }
  if (CFEqual(CFSTR("PoolPixelBufferAttributesSeed"), a2))
  {
    *a4 = 0;
    if (!a1)
      return 0;
    MEMORY[0x1940280C4](*(_QWORD *)(a1 + 104));
    vtDecompressionSubDuctEnsurePixelBufferPoolsAreUpToDate(a1);
    MEMORY[0x1940280D0](*(_QWORD *)(a1 + 104));
    v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    p_Count = (uint64_t *)(a1 + 80);
LABEL_11:
    v12 = kCFNumberIntType;
    goto LABEL_12;
  }
  if (CFEqual(CFSTR("PoolPixelBufferAttributes"), a2))
  {
    *a4 = 0;
    if (!a1)
      return 0;
    MEMORY[0x1940280C4](*(_QWORD *)(a1 + 104));
    vtDecompressionSubDuctEnsurePixelBufferPoolsAreUpToDate(a1);
    MEMORY[0x1940280D0](*(_QWORD *)(a1 + 104));
    PixelBufferAttributes = CVPixelBufferPoolGetPixelBufferAttributes(*(CVPixelBufferPoolRef *)(a1 + 96));
    if (!PixelBufferAttributes)
    {
LABEL_18:
      v14 = 0;
      goto LABEL_14;
    }
LABEL_24:
    UInt64 = (uint64_t)CFRetain(PixelBufferAttributes);
    goto LABEL_13;
  }
  if (CFEqual(CFSTR("PixelBufferPoolIsShared"), a2))
  {
    *a4 = 0;
    if (!a1)
      return 0;
    MEMORY[0x1940280C4](*(_QWORD *)(a1 + 104));
    vtDecompressionSubDuctEnsurePixelBufferPoolsAreUpToDate(a1);
    MEMORY[0x1940280D0](*(_QWORD *)(a1 + 104));
    v17 = (CFDictionaryRef *)MEMORY[0x1E0C9AE50];
    if (*(_QWORD *)(a1 + 96) != *(_QWORD *)(a1 + 88))
      v17 = (CFDictionaryRef *)MEMORY[0x1E0C9AE40];
    goto LABEL_23;
  }
  if (CFEqual(CFSTR("PixelTransferProperties"), a2))
  {
    *a4 = 0;
    if (!a1 || !*(_QWORD *)(a1 + 128))
      return 0;
    PixelBufferAttributes = *(CFDictionaryRef *)(a1 + 136);
    goto LABEL_24;
  }
  if (CFEqual(CFSTR("ClientPID"), a2))
  {
    if (a1)
    {
      v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      p_Count = (uint64_t *)(a1 + 240);
      v12 = kCFNumberSInt32Type;
      goto LABEL_12;
    }
    return 0;
  }
  if (CFEqual(CFSTR("ThrottleForBackground"), a2))
  {
    if (!a1)
      return 0;
    v17 = (CFDictionaryRef *)MEMORY[0x1E0C9AE50];
    v18 = *(unsigned __int8 *)(a1 + 256);
    goto LABEL_35;
  }
  if (CFEqual(CFSTR("MaxAgeForOutputPixelBufferPool"), a2))
  {
    if (a1)
    {
      MEMORY[0x1940280C4](*(_QWORD *)(a1 + 104));
      CVPixelBufferPoolGetMaxBufferAge();
      Count = v20;
      MEMORY[0x1940280D0](*(_QWORD *)(a1 + 104));
      v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      p_Count = &Count;
      v12 = kCFNumberDoubleType;
      goto LABEL_12;
    }
    return 0;
  }
  if (CFEqual(CFSTR("ColorPrimaries"), a2))
  {
    if (!a1)
      return 0;
    PixelBufferAttributes = *(CFDictionaryRef *)(a1 + 200);
    if (!PixelBufferAttributes)
      goto LABEL_18;
    goto LABEL_24;
  }
  if (CFEqual(CFSTR("TransferFunction"), a2))
  {
    if (!a1)
      return 0;
    PixelBufferAttributes = *(CFDictionaryRef *)(a1 + 208);
    if (!PixelBufferAttributes)
      goto LABEL_18;
    goto LABEL_24;
  }
  if (CFEqual(CFSTR("YCbCrMatrix"), a2))
  {
    if (!a1)
      return 0;
    PixelBufferAttributes = *(CFDictionaryRef *)(a1 + 216);
    if (!PixelBufferAttributes)
      goto LABEL_18;
    goto LABEL_24;
  }
  if (CFEqual(CFSTR("ICCProfile"), a2))
  {
    if (!a1)
      return 0;
    PixelBufferAttributes = *(CFDictionaryRef *)(a1 + 224);
    if (!PixelBufferAttributes)
      goto LABEL_18;
    goto LABEL_24;
  }
  if (CFEqual(CFSTR("RealTime"), a2))
  {
    if (!a1)
      return 0;
    v17 = (CFDictionaryRef *)MEMORY[0x1E0C9AE40];
    v18 = *(unsigned __int8 *)(a1 + 257);
    v19 = (CFDictionaryRef *)MEMORY[0x1E0C9AE50];
    goto LABEL_36;
  }
  if (!a1)
  {
    if (CFEqual(CFSTR("GeneratePerFrameHDRDisplayMetadata"), a2)
      || CFEqual(CFSTR("NumberOfFramesInDecoder"), a2)
      || CFEqual(CFSTR("MinFrameIDOfFramesInDecoder"), a2)
      || CFEqual(CFSTR("MaxFrameIDOfFramesInDecoder"), a2))
    {
      return 0;
    }
    return FigSignalErrorAt();
  }
  v21 = *(_QWORD *)(a1 + 8);
  if (!v21)
  {
    if (CFEqual(CFSTR("GeneratePerFrameHDRDisplayMetadata"), a2))
    {
      v17 = (CFDictionaryRef *)MEMORY[0x1E0C9AE50];
      v18 = *(unsigned __int8 *)(a1 + 272);
LABEL_35:
      v19 = (CFDictionaryRef *)MEMORY[0x1E0C9AE40];
LABEL_36:
      if (!v18)
        v17 = v19;
LABEL_23:
      PixelBufferAttributes = *v17;
      goto LABEL_24;
    }
    if (CFEqual(CFSTR("NumberOfFramesInDecoder"), a2))
    {
      MEMORY[0x1940280C4](*(_QWORD *)(a1 + 104));
      Count = FigCFDictionaryGetCount();
      MEMORY[0x1940280D0](*(_QWORD *)(a1 + 104));
      v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      p_Count = &Count;
      goto LABEL_11;
    }
    if (CFEqual(CFSTR("MinFrameIDOfFramesInDecoder"), a2))
    {
      MEMORY[0x1940280C4](*(_QWORD *)(a1 + 104));
      v23 = FigCFDictionaryGetCount();
      if (v23 >= 1)
      {
        v24 = v23;
        v25 = (const void **)malloc_type_calloc(v23, 8uLL, 0x80040B8603338uLL);
        CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a1 + 112), v25, 0);
        v26 = 0;
        for (i = 0; i != v24; ++i)
        {
          if (v26 >= v25[i])
            v28 = v25[i];
          else
            v28 = v26;
          if (i)
            v26 = v28;
          else
            v26 = *v25;
        }
LABEL_92:
        free(v25);
        goto LABEL_94;
      }
      goto LABEL_94;
    }
    if (CFEqual(CFSTR("MaxFrameIDOfFramesInDecoder"), a2))
    {
      MEMORY[0x1940280C4](*(_QWORD *)(a1 + 104));
      v29 = FigCFDictionaryGetCount();
      if (v29 >= 1)
      {
        v30 = v29;
        v25 = (const void **)malloc_type_calloc(v29, 8uLL, 0x80040B8603338uLL);
        CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a1 + 112), v25, 0);
        v31 = 0;
        for (j = 0; j != v30; ++j)
        {
          if (v31 <= v25[j])
            v31 = v25[j];
        }
        goto LABEL_92;
      }
LABEL_94:
      MEMORY[0x1940280D0](*(_QWORD *)(a1 + 104));
      UInt64 = FigCFNumberCreateUInt64();
      goto LABEL_13;
    }
    return FigSignalErrorAt();
  }
  v22 = *(uint64_t (**)(uint64_t, const void *, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 48);
  if (v22)
    return v22(v21, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t vtDecompressionSubDuctEnsurePixelBufferPoolsAreUpToDate(uint64_t a1)
{
  const __CFDictionary *MutableCopy;
  const __CFString *v2;
  uint64_t v3;
  FourCharCode MediaSubType;
  uint64_t v6;
  CFAllocatorRef *v7;
  const void *v8;
  CFTypeID v9;
  const __CFAllocator *v10;
  uint64_t v11;
  const void *v12;
  unsigned int v13;
  const void *Value;
  const void *v15;
  CFTypeID v16;
  CFTypeID v17;
  signed int v18;
  unsigned int v19;
  unsigned __int16 v20;
  const __CFAllocator *v21;
  const __CFDictionary *v22;
  const __CFDictionary *v23;
  uint64_t Dimensions;
  CFTypeRef *v25;
  CVPixelBufferPoolRef *v26;
  CFTypeRef v28;
  CFTypeRef v29;
  const void *v30;
  const void *v31;
  CFTypeRef v32;
  CFTypeRef cf;
  _QWORD valuePtr[3];

  valuePtr[2] = *MEMORY[0x1E0C80C00];
  v32 = 0;
  cf = 0;
  if (*(_DWORD *)(a1 + 80) == *(_DWORD *)(a1 + 76))
  {
    MutableCopy = 0;
    v2 = 0;
LABEL_3:
    v3 = 0;
    goto LABEL_45;
  }
  MediaSubType = CMFormatDescriptionGetMediaSubType(*(CMFormatDescriptionRef *)(a1 + 16));
  v6 = *(_QWORD *)(a1 + 248);
  v7 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (v6)
  {
    v8 = *(const void **)(a1 + 264);
    if (!v8)
    {
LABEL_9:
      v2 = CFStringCreateWithFormat(*v7, 0, CFSTR("decode:%@"), v6);
      goto LABEL_11;
    }
    v9 = CFGetTypeID(v8);
    if (v9 == CFBooleanGetTypeID() && CFEqual((CFTypeRef)*MEMORY[0x1E0C9AE40], *(CFTypeRef *)(a1 + 264)))
    {
      v6 = *(_QWORD *)(a1 + 248);
      goto LABEL_9;
    }
  }
  v2 = CFSTR("decode");
LABEL_11:
  v10 = *v7;
  MutableCopy = (const __CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (!MutableCopy)
  {
    v11 = FigSignalErrorAt();
    goto LABEL_67;
  }
  v11 = VTCreatePixelBufferPoolAttributesWithName(v10, *(unsigned int *)(a1 + 240), v2, (__CFDictionary **)&cf);
  if ((_DWORD)v11)
  {
LABEL_67:
    v3 = v11;
    goto LABEL_45;
  }
  if (*(_DWORD *)(a1 + 72))
    FigCFDictionarySetInt32();
  v12 = (const void *)*MEMORY[0x1E0C9AE50];
  v13 = v12 == CFDictionaryGetValue(MutableCopy, (const void *)*MEMORY[0x1E0CA8FE0]);
  LODWORD(valuePtr[0]) = 0;
  Value = CFDictionaryGetValue(MutableCopy, (const void *)*MEMORY[0x1E0CA9040]);
  if (Value)
  {
    v15 = Value;
    v16 = CFGetTypeID(Value);
    if (v16 == CFArrayGetTypeID())
    {
      FigCFArrayGetInt32AtIndex();
    }
    else
    {
      v17 = CFGetTypeID(v15);
      if (v17 == CFNumberGetTypeID())
        CFNumberGetValue((CFNumberRef)v15, kCFNumberSInt32Type, valuePtr);
    }
  }
  if (LODWORD(valuePtr[0]) != 1751410032
    && LODWORD(valuePtr[0]) != 1751411059
    && !vtDecompressionAttributesHaveColorSpaceAttachments(*(const __CFDictionary **)(a1 + 64))
    && !vtDecompressionAttributesHaveColorSpaceAttachments(*(const __CFDictionary **)(a1 + 56))
    && !*(_QWORD *)(a1 + 224)
    && !*(_QWORD *)(a1 + 200)
    && !*(_QWORD *)(a1 + 208)
    && !*(_QWORD *)(a1 + 216)
    && MediaSubType != 1634759272)
  {
    v11 = vtCopyGuessedMissingColorSpaceAttachmentsFromFormatDescription(*(const opaqueCMFormatDescription **)(a1 + 16), (__CFDictionary **)&v32);
    if ((_DWORD)v11)
      goto LABEL_67;
    v29 = v32;
    if (v32)
    {
      if (CFDictionaryGetCount((CFDictionaryRef)v32) >= 1)
      {
        v30 = (const void *)*MEMORY[0x1E0CA8C68];
        v31 = CFDictionaryGetValue(MutableCopy, (const void *)*MEMORY[0x1E0CA8C68]);
        if (v31)
        {
          valuePtr[0] = v31;
          valuePtr[1] = v29;
          v11 = FigCFCreateCombinedDictionary();
          if (!(_DWORD)v11)
          {
            CFDictionarySetValue(MutableCopy, v30, 0);
            goto LABEL_27;
          }
          goto LABEL_67;
        }
        CFDictionarySetValue(MutableCopy, v30, v29);
      }
    }
  }
LABEL_27:
  if (!FigVideoFormatDescriptionContainsAlphaChannel())
  {
LABEL_42:
    v19 = 0;
    goto LABEL_43;
  }
  v18 = CMFormatDescriptionGetMediaSubType(*(CMFormatDescriptionRef *)(a1 + 16));
  v19 = 1;
  if (v18 <= 1634743415)
  {
    if (v18 == 1634742376 || v18 == 1634742888)
      goto LABEL_39;
    v20 = 13416;
  }
  else
  {
    if ((v18 - 1634755432) <= 0xB && ((1 << (v18 - 104)) & 0x8C1) != 0
      || (v18 - 1634759272) <= 6 && ((1 << (v18 - 104)) & 0x51) != 0)
    {
      goto LABEL_39;
    }
    v20 = 13432;
  }
  if (v18 != (v20 | 0x61700000))
    goto LABEL_43;
LABEL_39:
  CMFormatDescriptionGetExtension(*(CMFormatDescriptionRef *)(a1 + 16), (CFStringRef)*MEMORY[0x1E0CA21B0]);
  if (FigCFNumberGetSInt32() != 32)
    goto LABEL_42;
  if (!FigCFDictionaryGetValue())
    FigCFDictionarySetInt32();
LABEL_43:
  v21 = CFGetAllocator(*(CFTypeRef *)a1);
  v22 = *(const __CFDictionary **)(a1 + 56);
  v23 = (const __CFDictionary *)cf;
  Dimensions = (uint64_t)CMVideoFormatDescriptionGetDimensions(*(CMVideoFormatDescriptionRef *)(a1 + 16));
  v25 = (CFTypeRef *)(a1 + 96);
  v26 = VTBuildPixelBufferPools2(v21, MutableCopy, v22, v23, Dimensions, *(const __CFBoolean **)(a1 + 264), v13, v19, *(_BYTE *)(a1 + 259) != 0, *(_BYTE *)(a1 + 260), (CVPixelBufferPoolRef *)(a1 + 96), (CVPixelBufferPoolRef *)(a1 + 88), 0, 0);
  if ((_DWORD)v26)
  {
    v3 = (uint64_t)v26;
    FigSignalErrorAt();
  }
  else
  {
    *(_DWORD *)(a1 + 80) = *(_DWORD *)(a1 + 76);
    if (*(_QWORD *)(a1 + 88))
      goto LABEL_3;
    v28 = *v25;
    if (*v25)
      v28 = CFRetain(v28);
    v3 = 0;
    *(_QWORD *)(a1 + 88) = v28;
  }
LABEL_45:
  if (cf)
    CFRelease(cf);
  if (v2)
    CFRelease(v2);
  if (v32)
    CFRelease(v32);
  if (MutableCopy)
    CFRelease(MutableCopy);
  return v3;
}

void vtDecompressionDuctGetMaxOutputPresentationTimeStampOfFramesBeingDecoded(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  const __CFDictionary *v5;

  v4 = MEMORY[0x1E0CA2E28];
  *(_OWORD *)a2 = *MEMORY[0x1E0CA2E28];
  a2[2] = *(_QWORD *)(v4 + 16);
  MEMORY[0x1940280C4](*(_QWORD *)(a1 + 72));
  v5 = *(const __CFDictionary **)(a1 + 48);
  if (v5)
    CFDictionaryApplyFunction(v5, (CFDictionaryApplierFunction)vtDuctFrameTrackingInfoFindMaxPTS, a2);
  JUMPOUT(0x1940280D0);
}

void vtCreateSuggestedQualityOfServiceTiers()
{
  uint64_t i;
  const void *v1;
  void *values[7];

  values[6] = *(void **)MEMORY[0x1E0C80C00];
  values[0] = vtCreateQualityOfServiceTier(CFSTR("AllFrames"), 1.0);
  values[1] = CFSTR("TemporalLevelLimit");
  values[2] = vtCreateQualityOfServiceTier(CFSTR("NonDroppableFrames"), 1.0);
  values[3] = vtCreateQualityOfServiceTier(CFSTR("IFrames"), 1.0);
  values[4] = vtCreateQualityOfServiceTier(CFSTR("KeyFrames"), 1.0);
  values[5] = vtCreateQualityOfServiceTier(CFSTR("KeyFrames"), 0.5);
  sVTVideoDecoderSuggestedQualityOfServiceTiers = (uint64_t)CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)values, 6, MEMORY[0x1E0C9B378]);
  if (!sVTVideoDecoderSuggestedQualityOfServiceTiers)
    FigSignalErrorAt();
  for (i = 0; i != 6; ++i)
  {
    v1 = values[i];
    if (v1)
      CFRelease(v1);
  }
}

uint64_t VTDecompressionSessionSetProperties(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  const __CFDictionary *v9;
  const __CFDictionary *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, char *);
  int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, const __CFDictionary *);
  uint64_t v17;
  uint64_t v18;
  __int128 context;
  __int128 v20;

  v17 = a1;
  if (*(_BYTE *)(a1 + 16))
    return FigSignalErrorAt();
  v5 = *(_QWORD *)(a1 + 24);
  if (v5)
    return VTDecompressionSessionRemoteBridge_SetProperties(v5, (uint64_t)a2);
  v18 = 0;
  if (a2)
  {
    v6 = *(_QWORD *)(a1 + 32);
    context = 0u;
    v20 = 0u;
    v7 = vtDecompressionSessionCopyPropertiesHandledByVideoToolbox((CFTypeRef *)&context);
    if (v7)
    {
      v8 = v7;
    }
    else
    {
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v12 = *(uint64_t (**)(uint64_t, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
      if (!v12 || ((v13 = v12(v11, (char *)&context + 8), v13 != -12782) ? (v14 = v13 == 0) : (v14 = 1), v14))
      {
        CFDictionaryApplyFunction(a2, (CFDictionaryApplierFunction)vtDecompressionSessionAddPropertyToPartition, &context);
        v8 = 0;
        v10 = (const __CFDictionary *)*((_QWORD *)&v20 + 1);
        v9 = (const __CFDictionary *)v20;
        goto LABEL_16;
      }
      v8 = v13;
      FigSignalErrorAt();
    }
    v9 = 0;
    v10 = 0;
LABEL_16:
    if ((_QWORD)context)
      CFRelease((CFTypeRef)context);
    if (*((_QWORD *)&context + 1))
      CFRelease(*((CFTypeRef *)&context + 1));
    LODWORD(v18) = v8;
    if (!v8)
    {
      if (v9)
        CFDictionaryApplyFunction(v9, (CFDictionaryApplierFunction)vtDecompressionSessionSetOneProperty, &v17);
      if (v10)
      {
        v15 = *(_QWORD *)(v6 + 8);
        v16 = *(uint64_t (**)(uint64_t, const __CFDictionary *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 32);
        if (!v16 || (LODWORD(v18) = v16(v15, v10), (_DWORD)v18 == -12782))
        {
          LODWORD(v18) = 0;
          CFDictionaryApplyFunction(v10, (CFDictionaryApplierFunction)vtDecompressionSessionSetOneProperty, &v17);
        }
      }
    }
    if (v9)
      CFRelease(v9);
    if (v10)
      CFRelease(v10);
  }
  return v18;
}

uint64_t vtDecompressionSessionSetOneProperty(const void *a1, const __CFNumber *a2, uint64_t a3)
{
  uint64_t result;

  result = VTDecompressionSessionSetProperty(*(_QWORD *)a3, a1, a2);
  if (!*(_DWORD *)(a3 + 8))
    *(_DWORD *)(a3 + 8) = result;
  return result;
}

uint64_t VTDecompressionSessionCopySerializableProperties(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, _QWORD *);

  *a3 = 0;
  if (*(_BYTE *)(a1 + 16))
    return FigSignalErrorAt();
  if (*(_QWORD *)(a1 + 24))
    return VTDecompressionSessionRemoteBridge_CopySerializableProperties(*(_QWORD *)(a1 + 24), a2, a3);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v7 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (!v7)
    return 0;
  result = v7(v6, a2, a3);
  if ((_DWORD)result == -12782)
    return 0;
  return result;
}

OSStatus VTDecompressionSessionCopyBlackPixelBuffer(VTDecompressionSessionRef session, CVPixelBufferRef *pixelBufferOut)
{
  uint64_t v4;
  const __CFAllocator *v6;
  OSStatus v7;
  __CVPixelBufferPool *v8;
  __CVPixelBufferPool **v9;
  void *v10;
  const __CFDictionary *PixelBufferAttributes;
  uint64_t MutableCopy;
  const __CFDictionary *v13;
  CFDictionaryRef IOSurfacePropertiesDictionary;
  CFDictionaryRef v15;
  CVReturn v16;
  uint64_t v17;
  const void *v18;
  const opaqueCMFormatDescription *v19;
  OSStatus v20;
  CVPixelBufferRef pixelBufferOuta;
  CFTypeRef cf;
  int v23;

  pixelBufferOuta = 0;
  cf = 0;
  if (!pixelBufferOut)
    return FigSignalErrorAt();
  v4 = *((_QWORD *)session + 3);
  if (v4)
    return VTDecompressionSessionRemoteBridge_CopyBlackPixelBuffer(v4, (CFTypeRef *)pixelBufferOut);
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v7 = VTDecompressionSessionCopyProperty((uint64_t)session, CFSTR("PixelBufferPool"), (const __CFAllocator *)*MEMORY[0x1E0C9AE00], (uint64_t *)&cf);
  if (!v7)
  {
    v9 = (__CVPixelBufferPool **)((char *)session + 136);
    v8 = (__CVPixelBufferPool *)*((_QWORD *)session + 17);
    if (!v8)
    {
      v10 = (void *)cf;
      v23 = 0;
      if (!VTAvoidIOSurfaceBackings()
        && (PixelBufferAttributes = CVPixelBufferPoolGetPixelBufferAttributes((CVPixelBufferPoolRef)v10),
            CFDictionaryGetValue(PixelBufferAttributes, (const void *)*MEMORY[0x1E0CA8FF0]))
        && (FigCFDictionaryGetIntIfPresent(), v23))
      {
        v8 = *v9;
        if (!*v9)
        {
          MutableCopy = FigCFDictionaryCreateMutableCopy();
          if (!MutableCopy)
          {
            v20 = -12904;
            goto LABEL_27;
          }
          v13 = (const __CFDictionary *)MutableCopy;
          FigCFDictionarySetInt64();
          FigCFDictionarySetInt64();
          IOSurfacePropertiesDictionary = FigCreateIOSurfacePropertiesDictionary();
          if (IOSurfacePropertiesDictionary)
          {
            v15 = IOSurfacePropertiesDictionary;
            FigCFDictionarySetValue();
            CFRelease(v15);
            v16 = CVPixelBufferPoolCreate(v6, 0, v13, (CVPixelBufferPoolRef *)session + 17);
            if (!v16)
            {
              CFRelease(v13);
              v8 = *v9;
              goto LABEL_19;
            }
            v20 = v16;
          }
          else
          {
            v20 = -12904;
          }
          CFRelease(v13);
          goto LABEL_27;
        }
      }
      else
      {
        if (v10)
          v8 = (__CVPixelBufferPool *)CFRetain(v10);
        else
          v8 = 0;
        *v9 = v8;
      }
    }
LABEL_19:
    v7 = CVPixelBufferPoolCreatePixelBuffer(v6, v8, &pixelBufferOuta);
    if (!v7)
    {
      v7 = VTFillPixelBufferWithBlack(pixelBufferOuta);
      if (!v7)
      {
        v17 = *((_QWORD *)session + 4);
        MEMORY[0x1940280C4](*(_QWORD *)(v17 + 72));
        v18 = *(const void **)(v17 + 80);
        if (v18)
          v19 = (const opaqueCMFormatDescription *)CFRetain(v18);
        else
          v19 = 0;
        MEMORY[0x1940280D0](*(_QWORD *)(v17 + 72));
        vtTransferImageBufferAttachmentsFromVideoFormatDescription(v19, pixelBufferOuta);
        *pixelBufferOut = pixelBufferOuta;
        pixelBufferOuta = 0;
        if (v19)
          CFRelease(v19);
        v20 = 0;
        goto LABEL_27;
      }
    }
  }
  v20 = v7;
LABEL_27:
  if (cf)
    CFRelease(cf);
  if (pixelBufferOuta)
    CFRelease(pixelBufferOuta);
  return v20;
}

void vtTransferImageBufferAttachmentsFromVideoFormatDescription(const opaqueCMFormatDescription *a1, __CVBuffer *a2)
{
  const __CFDictionary *Extensions;
  const __CFAllocator *v5;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v7;
  CMVideoDimensions Dimensions;
  FourCharCode MediaSubType;
  const __CFString *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const __CFString *v18;
  const __CFString *v19;
  const __CFNumber *v20;
  const __CFNumber *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const void *v26;
  unint64_t v27;
  const __CFString *v28;
  const __CFDictionary *Value;
  const __CFDictionary *v30;
  double v31;
  size_t Height;
  double v33;
  const void *v34;
  const void *v35;
  double v36;
  void *ScaledCleanApertureValue;
  const __CFNumber *v38;
  const __CFNumber *v39;
  const __CFNumber *v40;
  CFDictionaryRef v41;
  const __CFString *v42;
  CMVideoDimensions v43;
  size_t v44;
  size_t v45;
  const __CFDictionary *v46;
  const void **v47;
  const void **v48;
  const __CFDictionary *v49;
  const __CFNumber *v50;
  const __CFNumber *v51;
  const void *v52;
  int64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  CFNumberRef v61;
  CFDictionaryRef v62;
  const __CFString *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  size_t v68;
  int v69;
  size_t v70;
  const void *v71;
  const __CFString *v72;
  const void *v73;
  const void *v74;
  int v75;
  CFNumberRef v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  OSType PixelFormatType;
  CFTypeRef v82;
  CFTypeRef v83;
  CFTypeRef v84;
  _BOOL4 v85;
  const void *v86;
  const void *v87;
  const void *v88;
  CMVideoDimensions v89;
  const __CFString *v90;
  __CFString *v91;
  const __CFString *key;
  const __CFAllocator *allocator;
  const __CFString *v94;
  FourCharCode v95;
  unint64_t v96;
  unint64_t width;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *values;
  const __CFNumber *v103;
  const __CFNumber *v104;
  const __CFNumber *v105;
  const void *valuePtr;
  const void *v107;
  const void *v108;
  const void *v109;
  uint64_t v110;

  v110 = *MEMORY[0x1E0C80C00];
  Extensions = CMFormatDescriptionGetExtensions(a1);
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v7 = Mutable;
  if (!Extensions || !Mutable)
    goto LABEL_111;
  Dimensions = CMVideoFormatDescriptionGetDimensions(a1);
  MediaSubType = CMFormatDescriptionGetMediaSubType(a1);
  v10 = (const __CFString *)*MEMORY[0x1E0CA8D68];
  v91 = (__CFString *)*MEMORY[0x1E0CA8EE8];
  key = (const __CFString *)*MEMORY[0x1E0CA8E98];
  v90 = (const __CFString *)*MEMORY[0x1E0CA8DF8];
  vtCopyAttachments(Extensions, a2, v7, v91, *MEMORY[0x1E0CA8DF8], v11, v12, v13, (uint64_t)v91);
  width = Dimensions.width;
  if (Dimensions.width != CVPixelBufferGetWidth(a2) || CVPixelBufferGetHeight(a2) != *(uint64_t *)&Dimensions >> 32)
  {
    allocator = v5;
    v94 = v10;
    v27 = HIDWORD(*(unint64_t *)&Dimensions);
    v28 = (const __CFString *)*MEMORY[0x1E0CA8D50];
    v95 = MediaSubType;
    v96 = HIDWORD(*(unint64_t *)&Dimensions);
    if (vtCVBufferAttachmentEmpty(a2, (const __CFString *)*MEMORY[0x1E0CA8D50]))
    {
      Value = (const __CFDictionary *)CFDictionaryGetValue(Extensions, v28);
      if (Value)
      {
        v30 = Value;
        v89 = Dimensions;
        v31 = (double)CVPixelBufferGetWidth(a2) / (double)Dimensions.width;
        Height = CVPixelBufferGetHeight(a2);
        v33 = (double)Dimensions.height;
        v34 = (const void *)*MEMORY[0x1E0CA8D40];
        valuePtr = (const void *)*MEMORY[0x1E0CA8D60];
        v107 = v34;
        v35 = (const void *)*MEMORY[0x1E0CA8D58];
        v36 = (double)Height / v33;
        v108 = (const void *)*MEMORY[0x1E0CA8D48];
        v109 = v35;
        ScaledCleanApertureValue = vtCreateScaledCleanApertureValue(v30, valuePtr, v31);
        values = ScaledCleanApertureValue;
        v38 = vtCreateScaledCleanApertureValue(v30, v34, v36);
        v103 = v38;
        v39 = vtCreateScaledCleanApertureValue(v30, v108, v31);
        v104 = v39;
        v40 = vtCreateScaledCleanApertureValue(v30, v35, v36);
        v41 = 0;
        v105 = v40;
        if (ScaledCleanApertureValue && v38)
        {
          LODWORD(v27) = v96;
          if (v39)
          {
            MediaSubType = v95;
            if (v40)
            {
              v41 = CFDictionaryCreate(v5, &valuePtr, (const void **)&values, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              ScaledCleanApertureValue = values;
            }
          }
          else
          {
            MediaSubType = v95;
          }
        }
        else
        {
          MediaSubType = v95;
          LODWORD(v27) = v96;
        }
        Dimensions = v89;
        if (ScaledCleanApertureValue)
          CFRelease(ScaledCleanApertureValue);
        if (v103)
          CFRelease(v103);
        if (v104)
          CFRelease(v104);
        if (v105)
          CFRelease(v105);
        if (v41)
        {
          CVBufferSetAttachment(a2, v28, v41, kCVAttachmentMode_ShouldPropagate);
          CFRelease(v41);
        }
      }
    }
    v42 = (const __CFString *)*MEMORY[0x1E0CA8E68];
    if (vtCVBufferAttachmentEmpty(a2, (const __CFString *)*MEMORY[0x1E0CA8E68]))
    {
      v98 = 1;
      v99 = 1;
      v43 = Dimensions;
      v44 = CVPixelBufferGetWidth(a2) * (*(uint64_t *)&Dimensions >> 32);
      v45 = CVPixelBufferGetHeight(a2) * width;
      v46 = (const __CFDictionary *)CFDictionaryGetValue(Extensions, v42);
      v47 = (const void **)MEMORY[0x1E0CA8E60];
      v48 = (const void **)MEMORY[0x1E0CA8E70];
      if (v46)
      {
        v49 = v46;
        v50 = (const __CFNumber *)CFDictionaryGetValue(v46, (const void *)*MEMORY[0x1E0CA8E60]);
        CFNumberGetValue(v50, kCFNumberSInt64Type, &v99);
        v51 = (const __CFNumber *)CFDictionaryGetValue(v49, *v48);
        CFNumberGetValue(v51, kCFNumberSInt64Type, &v98);
      }
      if (v44 != v45)
      {
        v52 = *v48;
        valuePtr = *v47;
        v107 = v52;
        v53 = v99 * v45;
        v54 = v98 * v44;
        if (((v99 * v45) & 0x8000000000000000) == 0)
          v55 = v99 * v45;
        else
          v55 = -v53;
        if (v54 >= 0)
          v56 = v98 * v44;
        else
          v56 = -v54;
        if (v55 <= v56)
          v57 = v56;
        else
          v57 = v55;
        if (v55 >= v56)
          v55 = v56;
        if (v55)
        {
          if (v55 < 1)
          {
            v58 = v57;
          }
          else
          {
            do
            {
              v58 = v55;
              v55 = v57 % v55;
              v57 = v58;
            }
            while (v55 > 0);
          }
        }
        else if ((unint64_t)v57 <= 1)
        {
          v58 = 1;
        }
        else
        {
          v58 = v57;
        }
        v59 = v54 / v58;
        v100 = v59;
        v101 = v53 / v58;
        if (v53 / v58 && v59)
        {
          v60 = CFNumberCreate(allocator, kCFNumberSInt64Type, &v101);
          values = v60;
          v61 = CFNumberCreate(allocator, kCFNumberSInt64Type, &v100);
          v62 = 0;
          v103 = v61;
          if (v60 && v61)
          {
            v62 = CFDictionaryCreate(allocator, &valuePtr, (const void **)&values, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            v60 = values;
          }
          if (v60)
            CFRelease(v60);
          if (v103)
            CFRelease(v103);
          if (v62)
          {
            CVBufferSetAttachment(a2, v42, v62, kCVAttachmentMode_ShouldPropagate);
            CFRelease(v62);
          }
        }
      }
      Dimensions = v43;
      MediaSubType = v95;
      LODWORD(v27) = v96;
    }
    v63 = (const __CFString *)*MEMORY[0x1E0CA8DC8];
    if (vtCVBufferAttachmentEmpty(a2, (const __CFString *)*MEMORY[0x1E0CA8DC8]))
    {
      v68 = CVPixelBufferGetHeight(a2);
      if ((v27 & 0x80000000) == 0)
        v69 = v27;
      else
        v69 = v27 + 1;
      v70 = (uint64_t)v69 >> 1;
      if (v68 <= v69 >> 1)
      {
        LOBYTE(valuePtr) = 1;
        v76 = CFNumberCreate(allocator, kCFNumberSInt8Type, &valuePtr);
        CVBufferSetAttachment(a2, v63, v76, kCVAttachmentMode_ShouldPropagate);
        v10 = v94;
        if (v76)
          CFRelease(v76);
        goto LABEL_85;
      }
      v71 = CFDictionaryGetValue(Extensions, v63);
      v72 = (const __CFString *)*MEMORY[0x1E0CA8DD0];
      v73 = CFDictionaryGetValue(Extensions, (const void *)*MEMORY[0x1E0CA8DD0]);
      if (v71)
      {
        v74 = v73;
        if (v73)
        {
          CVBufferSetAttachment(a2, v63, v71, kCVAttachmentMode_ShouldPropagate);
          CVBufferSetAttachment(a2, v72, v74, kCVAttachmentMode_ShouldPropagate);
        }
      }
    }
    else
    {
      if ((v27 & 0x80000000) == 0)
        v75 = v27;
      else
        v75 = v27 + 1;
      v70 = (uint64_t)v75 >> 1;
    }
    v10 = v94;
LABEL_85:
    vtCopyAttachments(Extensions, a2, v7, (void *)*MEMORY[0x1E0CA8CE8], v64, v65, v66, v67, *MEMORY[0x1E0CA8CE8]);
    if (CVPixelBufferGetHeight(a2) > v70)
      vtCopyAttachments(Extensions, a2, v7, (void *)*MEMORY[0x1E0CA8CE0], v77, v78, v79, v80, *MEMORY[0x1E0CA8CE0]);
    goto LABEL_87;
  }
  LODWORD(valuePtr) = 1;
  v18 = (const __CFString *)*MEMORY[0x1E0CA8D50];
  v19 = (const __CFString *)*MEMORY[0x1E0CA8DC8];
  vtCopyAttachments(Extensions, a2, v7, (void *)*MEMORY[0x1E0CA8D50], v14, v15, v16, v17, *MEMORY[0x1E0CA8D50]);
  v20 = (const __CFNumber *)CVBufferCopyAttachment(a2, v19, 0);
  v21 = v20;
  if (v20)
  {
    CFNumberGetValue(v20, kCFNumberIntType, &valuePtr);
    if ((_DWORD)valuePtr == 2)
      vtCopyAttachments(Extensions, a2, v7, (void *)*MEMORY[0x1E0CA8DD0], v22, v23, v24, v25, *MEMORY[0x1E0CA8DD0]);
  }
  if (MediaSubType == 1752589105 || MediaSubType == 1635148593)
  {
    v26 = CFDictionaryGetValue(Extensions, v18);
    if (!v26)
    {
      CVBufferRemoveAttachment(a2, v18);
      if (!v21)
        goto LABEL_87;
      goto LABEL_22;
    }
    CVBufferSetAttachment(a2, v18, v26, kCVAttachmentMode_ShouldPropagate);
  }
  if (v21)
LABEL_22:
    CFRelease(v21);
LABEL_87:
  PixelFormatType = CVPixelBufferGetPixelFormatType(a2);
  if (PixelFormatType != 1751410032
    && PixelFormatType != 1751411059
    && vtCVBufferAttachmentEmpty(a2, (const __CFString *)*MEMORY[0x1E0CA8CD8]))
  {
    if (MediaSubType == 1634759272)
    {
      CFDictionarySetValue(v7, key, (const void *)*MEMORY[0x1E0CA8EB8]);
    }
    else
    {
      v82 = CVBufferCopyAttachment(a2, v10, 0);
      v83 = CVBufferCopyAttachment(a2, key, 0);
      v84 = CVBufferCopyAttachment(a2, v91, 0);
      v85 = vtCVBufferAttachmentEmpty(a2, v90);
      if (!v82)
      {
        v86 = CFDictionaryGetValue(v7, v10);
        if (v86)
          v82 = CFRetain(v86);
        else
          v82 = 0;
      }
      if (!v83)
      {
        v87 = CFDictionaryGetValue(v7, key);
        if (v87)
          v83 = CFRetain(v87);
        else
          v83 = 0;
      }
      if (!v84)
      {
        v88 = CFDictionaryGetValue(v7, v91);
        if (v88)
          v84 = CFRetain(v88);
        else
          v84 = 0;
      }
      vtGuessMissingColorSpaceAttachmentsGuts(MediaSubType, width, *(uint64_t *)&Dimensions >> 32, v82, v83, v84, !v85, v7);
      if (v82)
        CFRelease(v82);
      if (v83)
        CFRelease(v83);
      if (v84)
        CFRelease(v84);
    }
  }
  CVBufferSetAttachments(a2, v7, kCVAttachmentMode_ShouldPropagate);
LABEL_111:
  if (v7)
    CFRelease(v7);
}

Boolean VTIsHardwareDecodeSupported(CMVideoCodecType codecType)
{
  const __CFAllocator *v2;
  __CFDictionary *Mutable;
  const void *v4;
  __SecTask *v5;
  __SecTask *v6;
  int v7;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v4 = (const void *)*MEMORY[0x1E0C9AE50];
  CFDictionarySetValue(Mutable, CFSTR("RequireHardwareAcceleratedVideoDecoder"), (const void *)*MEMORY[0x1E0C9AE50]);
  if (codecType == 1987063865)
  {
    if (FigServer_IsServerProcess()
      || (v5 = SecTaskCreateFromSelf(v2)) != 0
      && (v6 = v5, v7 = VTIsSecTaskEntitledForVP9Decode(v5), CFRelease(v6), v7))
    {
      CFDictionarySetValue(Mutable, CFSTR("AllowAlternateDecoderSelection"), v4);
    }
  }
  VTSelectAndCreateVideoDecoderInstance(codecType, (int)v2, Mutable);
}

uint64_t VTDecompressionSessionGetMinAndMaxOutputPresentationTimeStampOfFramesBeingDecoded(uint64_t a1, CMTime *a2, CMTime *a3)
{
  uint64_t v7;
  uint64_t v8;
  const __CFDictionary *v9;
  __int128 v10;
  CMTimeEpoch v11;
  __int128 v12;
  CMTimeEpoch v13;

  v10 = *MEMORY[0x1E0CA2E30];
  v11 = *(_QWORD *)(MEMORY[0x1E0CA2E30] + 16);
  v12 = *MEMORY[0x1E0CA2E28];
  v13 = *(_QWORD *)(MEMORY[0x1E0CA2E28] + 16);
  if (!a1 || *(_BYTE *)(a1 + 16))
    return FigSignalErrorAt();
  v7 = *(_QWORD *)(a1 + 24);
  if (v7)
    return VTDecompressionSessionRemoteBridge_GetMinAndMaxOutputPresentationTimeStampOfFramesBeingDecoded(v7, a2, a3);
  MEMORY[0x1940280C4](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 72));
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(const __CFDictionary **)(v8 + 48);
  if (v9)
  {
    CFDictionaryApplyFunction(v9, (CFDictionaryApplierFunction)vtDuctFrameTrackingInfoFindMinAndMaxPTS, &v10);
    v8 = *(_QWORD *)(a1 + 32);
  }
  MEMORY[0x1940280D0](*(_QWORD *)(v8 + 72));
  if (a2)
  {
    *(_OWORD *)&a2->value = v10;
    a2->epoch = v11;
  }
  if (a3)
  {
    *(_OWORD *)&a3->value = v12;
    a3->epoch = v13;
  }
  return 0;
}

double vtDuctFrameTrackingInfoFindMinAndMaxPTS(uint64_t a1, uint64_t a2, CMTime *a3)
{
  double result;
  CMTime v6;
  CMTime time1;
  CMTime v8;

  time1 = *a3;
  v6 = *(CMTime *)(a2 + 24);
  CMTimeMinimum(&v8, &time1, &v6);
  *a3 = v8;
  time1 = a3[1];
  v6 = *(CMTime *)(a2 + 24);
  CMTimeMaximum(&v8, &time1, &v6);
  result = *(double *)&v8.value;
  a3[1] = v8;
  return result;
}

uint64_t VTDecompressionSessionSetDecoderSessionAsPixelBufferSource(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 32);
    if (v2)
    {
      v3 = 0;
      *(_QWORD *)(v2 + 40) = a2;
    }
    else
    {
      v4 = *(_QWORD *)(a1 + 40);
      v3 = 0;
      if (v4)
        *(_QWORD *)(v4 + 48) = a2;
    }
  }
  else
  {
    v3 = 4294954394;
    FigSignalErrorAt();
  }
  return v3;
}

uint64_t vtDecoderSessionGetSubDuctPixelBufferPool(uint64_t *a1, int a2)
{
  uint64_t v2;
  int v3;

  if (!a1 || (v2 = *a1) == 0)
  {
    FigSignalErrorAt();
    return 0;
  }
  if (a2)
  {
    MEMORY[0x1940280C4](*(_QWORD *)(v2 + 104));
    v3 = vtDecompressionSubDuctEnsurePixelBufferPoolsAreUpToDate(v2);
    MEMORY[0x1940280D0](*(_QWORD *)(v2 + 104));
    if (!v3)
      return *(_QWORD *)(v2 + 88);
    return 0;
  }
  if (vtDecompressionSubDuctEnsurePixelBufferPoolsAreUpToDate(*a1))
    return 0;
  return *(_QWORD *)(v2 + 88);
}

uint64_t VTDecoderSessionCreatePixelBuffer(uint64_t *a1, const void *a2, CVPixelBufferRef *a3)
{
  return VTDecoderSessionCreatePixelBufferWithOptions(a1, a2, 0, a3);
}

uint64_t VTDecoderSessionCreatePixelBufferWithOptions(uint64_t *a1, const void *a2, uint64_t a3, CVPixelBufferRef *a4)
{
  uint64_t v5;
  uint64_t *v8;
  const __CFDictionary *v9;
  _QWORD *Value;
  const void *v11;
  uint64_t v12;
  const __CFAllocator *v13;
  CFStringRef v14;
  const __CFDictionary *v15;
  __CVBuffer *v16;
  CVPixelBufferRef v17;
  __CVPixelBufferPool *SubDuctPixelBufferPool;
  uint64_t v19;
  __CFDictionary *Mutable;
  CVPixelBufferRef pixelBufferOut;
  char v23;

  v23 = 0;
  pixelBufferOut = 0;
  if (!a1)
  {
    v12 = 4294954394;
LABEL_9:
    FigSignalErrorAt();
    return v12;
  }
  v5 = *a1;
  if (!*a1)
  {
    v12 = 4294954393;
    goto LABEL_9;
  }
  v8 = (uint64_t *)a1[3];
  if (v8)
  {
    MEMORY[0x1940280C4](*(_QWORD *)(v5 + 104));
    v9 = *(const __CFDictionary **)(*a1 + 112);
    if (v9 && (Value = CFDictionaryGetValue(v9, a2)) != 0)
    {
      v11 = (const void *)Value[2];
    }
    else
    {
      FigSignalErrorAt();
      v11 = 0;
    }
    if (v11)
      a2 = v11;
    MEMORY[0x1940280D0](*(_QWORD *)(*a1 + 104));
    v5 = *v8;
  }
  else
  {
    v8 = a1;
  }
  MEMORY[0x1940280C4](*(_QWORD *)(v5 + 104));
  FigCFDictionaryGetBooleanIfPresent();
  if (*(_QWORD *)(v5 + 120))
  {
    FigCFDictionaryGetInt32IfPresent();
    v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v14 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%p_%d"), a2, 0);
    v15 = *(const __CFDictionary **)(v5 + 120);
    if (v15)
    {
      v16 = (__CVBuffer *)CFDictionaryGetValue(v15, v14);
      pixelBufferOut = v16;
      if (v16)
      {
        v17 = v16;
        CFRetain(v16);
        v12 = 0;
        goto LABEL_28;
      }
    }
  }
  else
  {
    v14 = 0;
    v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  }
  SubDuctPixelBufferPool = (__CVPixelBufferPool *)vtDecoderSessionGetSubDuctPixelBufferPool(v8, 0);
  v19 = CVPixelBufferPoolCreatePixelBuffer(v13, SubDuctPixelBufferPool, &pixelBufferOut);
  v12 = v19;
  v17 = pixelBufferOut;
  if (v23 && !(_DWORD)v19 && pixelBufferOut)
  {
    Mutable = *(__CFDictionary **)(v5 + 120);
    if (!Mutable)
    {
      Mutable = CFDictionaryCreateMutable(v13, 10, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      *(_QWORD *)(v5 + 120) = Mutable;
      if (!Mutable)
      {
        v12 = FigSignalErrorAt();
        goto LABEL_29;
      }
      v17 = pixelBufferOut;
    }
    CFDictionarySetValue(Mutable, v14, v17);
    v12 = 0;
    v17 = pixelBufferOut;
  }
LABEL_28:
  *a4 = v17;
  pixelBufferOut = 0;
LABEL_29:
  MEMORY[0x1940280D0](*(_QWORD *)(v5 + 104));
  if (v14)
    CFRelease(v14);
  if (pixelBufferOut)
    CFRelease(pixelBufferOut);
  return v12;
}

uint64_t VTDecoderSessionForgetPixelBufferForFrame(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  __CFDictionary *v7;
  BOOL v8;

  if (!a1)
  {
    v6 = 4294954394;
LABEL_15:
    FigSignalErrorAt();
    return v6;
  }
  if (!*a1)
  {
    v6 = 4294954393;
    goto LABEL_15;
  }
  if (a3)
  {
    v4 = (uint64_t *)a1[3];
    if (!v4)
      v4 = a1;
    v5 = *v4;
    FigCFDictionaryGetInt32IfPresent();
    v6 = (uint64_t)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%p_%d"), a2, 0);
    MEMORY[0x1940280C4](*(_QWORD *)(v5 + 104));
    v7 = *(__CFDictionary **)(v5 + 120);
    if (v7)
      v8 = v6 == 0;
    else
      v8 = 1;
    if (v8)
    {
      MEMORY[0x1940280D0](*(_QWORD *)(v5 + 104));
      if (!v6)
        return v6;
    }
    else
    {
      CFDictionaryRemoveValue(v7, (const void *)v6);
      MEMORY[0x1940280D0](*(_QWORD *)(v5 + 104));
    }
    CFRelease((CFTypeRef)v6);
  }
  return 0;
}

uint64_t VTDecompressionSessionDecodeFrameWithOptions(uint64_t a1, opaqueCMSampleBuffer *a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6)
{
  if (!a1 || !a2 || *(_BYTE *)(a1 + 16))
    return FigSignalErrorAt();
  if (*(_QWORD *)(a1 + 24))
    return VTDecompressionSessionRemoteBridge_DecodeFrame(*(_QWORD *)(a1 + 24), a2, a3, a4, a5, a6);
  if (*(_QWORD *)(a1 + 112) || *(_QWORD *)(a1 + 96))
    return vtDecompressionSessionDecodeFrameCommon(a1, a2, a3, a4, 0, 0, a5, a6);
  else
    return FigSignalErrorAt();
}

uint64_t vtDecompressionSessionDecodeFrameCommon(uint64_t a1, CMSampleBufferRef sbuf, uint64_t a3, uint64_t a4, uint64_t a5, CMTimeEpoch a6, CMTimeValue a7, int *a8)
{
  int *v15;
  uint64_t v16;
  CMItemCount NumSamples;
  CMItemCount v18;
  CMFormatDescriptionRef FormatDescription;
  CMFormatDescriptionRef v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unsigned int (*v24)(uint64_t, CMFormatDescriptionRef);
  uint64_t v25;
  CMTimeValue v27;
  CMTimeEpoch v28;
  _QWORD refcon[7];
  int v30;

  if (a1 && !*(_BYTE *)(a1 + 16) && sbuf)
  {
    v30 = 0;
    if (a8)
      v15 = a8;
    else
      v15 = &v30;
    *v15 = 0;
    v16 = *(_QWORD *)(a1 + 32);
    NumSamples = CMSampleBufferGetNumSamples(sbuf);
    if (NumSamples < 1)
      return 4294954394;
    v18 = NumSamples;
    v27 = a7;
    v28 = a6;
    CFRetain((CFTypeRef)a1);
    FormatDescription = CMSampleBufferGetFormatDescription(sbuf);
    v20 = *(CMFormatDescriptionRef *)(v16 + 80);
    if (v20 == FormatDescription)
      goto LABEL_19;
    if (FormatDescription)
    {
      if (CFEqual(v20, FormatDescription))
        goto LABEL_11;
      v22 = *(_QWORD *)(v16 + 8);
      v23 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
      if (*v23 >= 2uLL)
      {
        v24 = (unsigned int (*)(uint64_t, CMFormatDescriptionRef))v23[6];
        if (v24)
        {
          if (v24(v22, FormatDescription))
          {
            v25 = VTDecompressionSessionWaitForAsynchronousFrames((VTDecompressionSessionRef)a1);
            if (!(_DWORD)v25)
LABEL_11:
              vtDecompressionDuctSetVideoFormatDescription(v16, FormatDescription);
            goto LABEL_22;
          }
        }
      }
    }
    v25 = FigSignalErrorAt();
    if (!(_DWORD)v25)
    {
LABEL_19:
      if (v18 == 1)
      {
        v25 = vtDecompressionDuctDecodeSingleFrame(v16, sbuf, a3, a4, a5, v28, v27, (uint64_t)v15);
      }
      else
      {
        refcon[0] = v16;
        refcon[1] = a3;
        refcon[2] = a4;
        refcon[3] = v27;
        refcon[5] = a5;
        refcon[6] = v28;
        refcon[4] = v15;
        v25 = CMSampleBufferCallForEachSample(sbuf, (OSStatus (__cdecl *)(CMSampleBufferRef, CMItemCount, void *))vtDecompressionDuctDecodeSingleFrame_iterator, refcon);
      }
    }
LABEL_22:
    v21 = v25;
    CFRelease((CFTypeRef)a1);
    return v21;
  }
  return FigSignalErrorAt();
}

uint64_t VTDecompressionSessionDecodeFrameWithOptionsAndOutputHandler(uint64_t a1, opaqueCMSampleBuffer *a2, uint64_t a3, uint64_t a4, int *a5, unint64_t a6)
{
  if (!a1 || !a2 || *(_BYTE *)(a1 + 16) || !a6)
    return FigSignalErrorAt();
  if (*(_QWORD *)(a1 + 24))
    return VTDecompressionSessionRemoteBridge_DecodeFrameWithOutputHandler(*(_QWORD *)(a1 + 24), a2, a3, a4, a5, a6, 0);
  if (!*(_QWORD *)(a1 + 96))
    return vtDecompressionSessionDecodeFrameCommon(a1, a2, a3, a4, a6, 0, 0, a5);
  else
    return FigSignalErrorAt();
}

OSStatus VTDecompressionSessionDecodeFrameWithOutputHandler(VTDecompressionSessionRef session, CMSampleBufferRef sampleBuffer, VTDecodeFrameFlags decodeFlags, VTDecodeInfoFlags *infoFlagsOut, VTDecompressionOutputHandler outputHandler)
{
  return VTDecompressionSessionDecodeFrameWithOptionsAndOutputHandler((uint64_t)session, sampleBuffer, *(uint64_t *)&decodeFlags, 0, (int *)infoFlagsOut, (unint64_t)outputHandler);
}

uint64_t VTDecompressionSessionDecodeFrameWithOptionsAndMultiImageCapableOutputHandler(uint64_t a1, opaqueCMSampleBuffer *a2, uint64_t a3, uint64_t a4, int *a5, unint64_t a6)
{
  if (!a1 || !a2 || *(_BYTE *)(a1 + 16) || !a6)
    return FigSignalErrorAt();
  if (*(_QWORD *)(a1 + 24))
    return VTDecompressionSessionRemoteBridge_DecodeFrameWithOutputHandler(*(_QWORD *)(a1 + 24), a2, a3, 0, a5, 0, a6);
  if (*(_QWORD *)(a1 + 96) || *(_QWORD *)(a1 + 112))
    return FigSignalErrorAt();
  else
    return vtDecompressionSessionDecodeFrameCommon(a1, a2, a3, a4, 0, a6, 0, a5);
}

OSStatus VTDecompressionSessionDecodeFrameWithMultiImageCapableOutputHandler(VTDecompressionSessionRef session, CMSampleBufferRef sampleBuffer, VTDecodeFrameFlags decodeFlags, VTDecodeInfoFlags *infoFlagsOut, VTDecompressionMultiImageCapableOutputHandler multiImageCapableOutputHandler)
{
  return VTDecompressionSessionDecodeFrameWithOptionsAndMultiImageCapableOutputHandler((uint64_t)session, sampleBuffer, *(uint64_t *)&decodeFlags, 0, (int *)infoFlagsOut, (unint64_t)multiImageCapableOutputHandler);
}

Boolean VTDecompressionSessionCanAcceptFormatDescription(VTDecompressionSessionRef session, CMFormatDescriptionRef newFormatDesc)
{
  int CanAcceptFormatDescription;
  uint64_t v6;
  uint64_t v7;
  CMVideoDimensions Dimensions;
  CMVideoDimensions v9;
  FourCharCode MediaSubType;
  int BitsPerComponentFromFormatDescription;

  LOBYTE(CanAcceptFormatDescription) = 0;
  if (!session || !newFormatDesc)
    return CanAcceptFormatDescription;
  if (*((_BYTE *)session + 16))
    goto LABEL_4;
  v6 = *((_QWORD *)session + 4);
  if (v6)
  {
    if (FigCFEqual())
    {
      LOBYTE(CanAcceptFormatDescription) = 1;
      return CanAcceptFormatDescription;
    }
    v7 = *((_QWORD *)session + 3);
    if (!v7)
    {
      Dimensions = CMVideoFormatDescriptionGetDimensions(*(CMVideoFormatDescriptionRef *)(v6 + 80));
      v9 = CMVideoFormatDescriptionGetDimensions(newFormatDesc);
      MediaSubType = CMFormatDescriptionGetMediaSubType(*(CMFormatDescriptionRef *)(v6 + 80));
      LOBYTE(CanAcceptFormatDescription) = 0;
      if (MediaSubType == CMFormatDescriptionGetMediaSubType(newFormatDesc)
        && v9.width == Dimensions.width
        && v9.height == Dimensions.height)
      {
        CanAcceptFormatDescription = VTVideoDecoderCanAcceptFormatDescription(*(_QWORD *)(v6 + 8), (uint64_t)newFormatDesc);
        if (CanAcceptFormatDescription)
        {
          if (FigVideoCodecTypeIsHEVCFlavorOrDolbyVisionHEVCFlavor(MediaSubType))
          {
            BitsPerComponentFromFormatDescription = vtDecompressionSessionGetBitsPerComponentFromFormatDescription(*(const opaqueCMFormatDescription **)(v6 + 80));
            if (BitsPerComponentFromFormatDescription != vtDecompressionSessionGetBitsPerComponentFromFormatDescription(newFormatDesc))
              LOBYTE(CanAcceptFormatDescription) = 0;
          }
        }
      }
      return CanAcceptFormatDescription;
    }
  }
  else
  {
    v7 = *((_QWORD *)session + 3);
    if (!v7)
    {
LABEL_4:
      LOBYTE(CanAcceptFormatDescription) = 0;
      return CanAcceptFormatDescription;
    }
  }
  return VTDecompressionSessionRemoteBridge_CanAcceptFormatDescription(v7, newFormatDesc);
}

uint64_t VTVideoDecoderCanAcceptFormatDescription(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t (*v5)(uint64_t, uint64_t);

  v4 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
  if (*v4 >= 2uLL && (v5 = (uint64_t (*)(uint64_t, uint64_t))v4[6]) != 0)
    return v5(a1, a2);
  else
    return 0;
}

uint64_t FigVideoCodecTypeIsHEVCFlavorOrDolbyVisionHEVCFlavor(int a1)
{
  uint64_t result;
  int v3;

  result = 1;
  if (a1 > 1836415072)
  {
    if (a1 > 1902407031)
    {
      if (a1 > 1902671458)
      {
        if (a1 == 1902671459)
          return result;
        v3 = 1902998904;
      }
      else
      {
        if (a1 == 1902407032)
          return result;
        v3 = 1902667126;
      }
    }
    else if (a1 > 1902405680)
    {
      if (a1 == 1902405681)
        return result;
      v3 = 1902405733;
    }
    else
    {
      if (a1 == 1836415073)
        return result;
      v3 = 1869117027;
    }
  }
  else if (a1 > 1685481572)
  {
    if (a1 > 1751479856)
    {
      if (a1 == 1751479857)
        return result;
      v3 = 1752589105;
    }
    else
    {
      if (a1 == 1685481573)
        return result;
      v3 = 1718908520;
    }
  }
  else if (a1 > 1684895095)
  {
    if (a1 == 1684895096)
      return result;
    v3 = 1685481521;
  }
  else
  {
    if (a1 == 1667524657)
      return result;
    v3 = 1667790435;
  }
  if (a1 != v3)
    return 0;
  return result;
}

uint64_t vtDecompressionSessionGetBitsPerComponentFromFormatDescription(const opaqueCMFormatDescription *a1)
{
  CMFormatDescriptionGetExtensions(a1);
  FigCFDictionaryGetIntIfPresent();
  return 0;
}

OSStatus VTDecompressionSessionFinishDelayedFrames(VTDecompressionSessionRef session)
{
  OSStatus result;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v4)(uint64_t);

  if (!session)
    return -12902;
  if (*((_BYTE *)session + 16))
    return FigSignalErrorAt();
  if (*((_QWORD *)session + 3))
    return VTDecompressionSessionRemoteBridge_FinishDelayedFrames(*((_QWORD *)session + 3));
  v2 = *(_QWORD *)(*((_QWORD *)session + 4) + 8);
  v3 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
  if (*v3 < 2uLL)
    return 0;
  v4 = (uint64_t (*)(uint64_t))v3[7];
  if (!v4)
    return 0;
  result = v4(v2);
  if (result == -12782)
    return 0;
  return result;
}

uint64_t VTVideoDecoderGetTypeID()
{
  MEMORY[0x1940281CC](&VTVideoDecoderGetClassID_sRegisterVTVideoDecoderTypeOnce, RegisterVTVideoDecoderType);
  return CMBaseClassGetCFTypeID();
}

void VTDecoderSessionRegisterCustomPixelFormat(_QWORD *a1, const __CFDictionary *a2)
{
  if (a1 && *a1)
  {
    if (FigCFDictionaryGetInt32IfPresent())
      CVPixelFormatDescriptionRegisterDescriptionWithPixelFormatType(a2, 0);
  }
}

uint64_t vtDecoderSessionEmitDecodedFrameCommon(uint64_t *a1, const void *a2, uint64_t a3, uint64_t a4, __CVBuffer *a5, OpaqueCMTaggedBufferGroup *a6)
{
  uint64_t v11;
  const __CFDictionary *v12;
  _QWORD *Value;
  int v14;
  const void *v15;
  const opaqueCMFormatDescription *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t DestinationImageBufferForEmittedFrameIfNecessary;
  uint64_t v21;
  __CVBuffer *v22;
  uint64_t v23;
  unint64_t v24;
  CMItemCount Count;
  CMItemCount v26;
  uint64_t i;
  __CVBuffer *CVPixelBufferAtIndex;
  CMItemCount v29;
  CMItemCount v30;
  uint64_t j;
  __CVBuffer *v32;
  CMItemCount v33;
  CFIndex v34;
  uint64_t v35;
  __CFArray *v36;
  __CFArray *Mutable;
  void *v38;
  const void *v39;
  uint64_t v40;
  CFIndex k;
  CMTagCollectionRef TagCollectionAtIndex;
  uint64_t m;
  const void *CMSampleBufferAtIndex;
  const void *v45;
  __CFArray *v46;
  uint64_t v47;
  const void *v48;
  uint64_t v49;
  uint64_t v50;
  CMItemCount v51;
  CMItemCount v52;
  uint64_t v53;
  __CVBuffer *v54;
  __CVBuffer *v55;
  uint64_t v56;
  uint64_t v57;
  dispatch_group_t v58;
  NSObject *v59;
  NSObject *v60;
  _QWORD *v61;
  uint64_t v62;
  CFDictionaryRef v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _DWORD *v68;
  uint64_t v69;
  CFNumberRef v70;
  const __CFDictionary *v71;
  CFNumberRef v72;
  CFNumberRef v73;
  unsigned int v74;
  unsigned int v75;
  const __CFAllocator *allocator;
  const __CFAllocator *allocatora;
  int v78;
  const void *v79;
  CFTypeRef v80;
  CFTypeRef v81;
  CFTypeRef cf;

  v80 = 0;
  v81 = 0;
  if (!a1)
    return FigSignalErrorAt();
  v11 = *a1;
  MEMORY[0x1940280C4](*(_QWORD *)(*a1 + 104));
  v12 = *(const __CFDictionary **)(v11 + 112);
  v79 = a2;
  if (v12 && (Value = CFDictionaryGetValue(v12, a2)) != 0)
  {
    v14 = *(_DWORD *)Value;
    v15 = (const void *)Value[1];
    if (v15)
      v16 = (const opaqueCMFormatDescription *)CFRetain(v15);
    else
      v16 = 0;
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v11 + 112), a2);
    v17 = 0;
  }
  else
  {
    v17 = FigSignalErrorAt();
    v14 = 0;
    v16 = 0;
  }
  v78 = v14;
  if (v14 & 2 | a3)
  {
    a5 = 0;
    v19 = 0;
  }
  else
  {
    v19 = (uint64_t)a6;
  }
  if ((unint64_t)a5 | v19)
  {
    if (a5)
    {
      vtDecompressionSessionUpdateAttachmentsForEmittedImageBuffer((_QWORD *)v11, v16, a5);
      vtDecompressionSessionGeneratePerFrameHDRMetadataforEmittedImageBufferCommon(v11, a5);
    }
    else if (v19)
    {
      Count = CMTaggedBufferGroupGetCount((CMTaggedBufferGroupRef)v19);
      if (Count >= 1)
      {
        v26 = Count;
        for (i = 0; i != v26; ++i)
        {
          CVPixelBufferAtIndex = (__CVBuffer *)FigTaggedBufferGroupGetCVPixelBufferAtIndex();
          if (CVPixelBufferAtIndex)
            vtDecompressionSessionUpdateAttachmentsForEmittedImageBuffer((_QWORD *)v11, v16, CVPixelBufferAtIndex);
        }
      }
      v29 = CMTaggedBufferGroupGetCount((CMTaggedBufferGroupRef)v19);
      if (v29 >= 1)
      {
        v30 = v29;
        for (j = 0; j != v30; ++j)
        {
          v32 = (__CVBuffer *)FigTaggedBufferGroupGetCVPixelBufferAtIndex();
          if (v32)
            vtDecompressionSessionGeneratePerFrameHDRMetadataforEmittedImageBufferCommon(v11, v32);
        }
      }
    }
  }
  if (v16)
    CFRelease(v16);
  if (!((unint64_t)a5 | v19))
  {
    MEMORY[0x1940280D0](*(_QWORD *)(v11 + 104));
    v23 = 0;
    v24 = 0;
    v21 = 0;
    v22 = 0;
    if (!(_DWORD)a3)
      goto LABEL_66;
    goto LABEL_73;
  }
  if (a5)
  {
    DestinationImageBufferForEmittedFrameIfNecessary = vtDecompressionSessionCreateDestinationImageBufferForEmittedFrameIfNecessary(v11, a4, a5, (CVPixelBufferRef *)&v81);
LABEL_21:
    a3 = DestinationImageBufferForEmittedFrameIfNecessary;
    goto LABEL_22;
  }
  if (!v19)
  {
    DestinationImageBufferForEmittedFrameIfNecessary = FigSignalErrorAt();
    goto LABEL_21;
  }
  v33 = CMTaggedBufferGroupGetCount((CMTaggedBufferGroupRef)v19);
  cf = 0;
  if (v33 < 1)
  {
    a3 = 0;
    goto LABEL_22;
  }
  v34 = v33;
  v74 = v17;
  v35 = 0;
  v36 = 0;
  Mutable = 0;
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  do
  {
    v38 = (void *)FigTaggedBufferGroupGetCVPixelBufferAtIndex();
    if (v38)
    {
      v39 = v38;
      v40 = vtDecompressionSessionCreateDestinationImageBufferForEmittedFrameIfNecessary(v11, a4, v38, (CVPixelBufferRef *)&cf);
      if ((_DWORD)v40)
        goto LABEL_92;
      if (!cf)
      {
        if (!v36)
          goto LABEL_61;
        v46 = v36;
        v45 = v39;
        goto LABEL_58;
      }
      if (!v36)
      {
        Mutable = CFArrayCreateMutable(allocator, v34, MEMORY[0x1E0C9B378]);
        if (!Mutable)
        {
          a3 = FigSignalErrorAt();
          v36 = 0;
          goto LABEL_93;
        }
        for (k = 0; k != v34; ++k)
        {
          TagCollectionAtIndex = CMTaggedBufferGroupGetTagCollectionAtIndex((CMTaggedBufferGroupRef)v19, k);
          CFArrayAppendValue(Mutable, TagCollectionAtIndex);
        }
        v36 = CFArrayCreateMutable(allocator, v34, MEMORY[0x1E0C9B378]);
        if (!v36)
        {
          v40 = FigSignalErrorAt();
          goto LABEL_92;
        }
        if (v35)
        {
          for (m = 0; m != v35; ++m)
          {
            CMSampleBufferAtIndex = (const void *)FigTaggedBufferGroupGetCVPixelBufferAtIndex();
            if (!CMSampleBufferAtIndex)
              CMSampleBufferAtIndex = (const void *)FigTaggedBufferGroupGetCMSampleBufferAtIndex();
            CFArrayAppendValue(v36, CMSampleBufferAtIndex);
          }
        }
      }
      v45 = cf;
    }
    else
    {
      if (!v36)
        goto LABEL_59;
      v45 = (const void *)FigTaggedBufferGroupGetCMSampleBufferAtIndex();
    }
    v46 = v36;
LABEL_58:
    CFArrayAppendValue(v46, v45);
LABEL_59:
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
LABEL_61:
    ++v35;
  }
  while (v35 != v34);
  a3 = 0;
  if (Mutable && v36)
  {
    v40 = MEMORY[0x194028160](allocator, Mutable, v36, &v80);
LABEL_92:
    a3 = v40;
  }
LABEL_93:
  if (cf)
    CFRelease(cf);
  if (Mutable)
    CFRelease(Mutable);
  if (v36)
    CFRelease(v36);
  v17 = v74;
LABEL_22:
  MEMORY[0x1940280D0](*(_QWORD *)(v11 + 104));
  if ((_DWORD)a3)
  {
    v21 = 0;
    v22 = 0;
    goto LABEL_73;
  }
  v23 = (uint64_t)v80;
  v24 = (unint64_t)v81;
LABEL_66:
  if (!(v24 | v23))
  {
    a3 = 0;
    v21 = v19;
    v22 = a5;
LABEL_73:
    v47 = v11;
    v48 = v79;
    v49 = a3;
    v50 = a4;
    goto LABEL_74;
  }
  if (!a5 || !v24)
  {
    if (!v19 || !v23)
      goto LABEL_75;
    v51 = CMTaggedBufferGroupGetCount((CMTaggedBufferGroupRef)v19);
    if (v51 < 1)
    {
LABEL_88:
      v50 = a4 | 4;
      v47 = v11;
      v48 = v79;
      v49 = 0;
      v22 = 0;
      v21 = v23;
    }
    else
    {
      v52 = v51;
      v53 = 0;
      while (1)
      {
        v54 = (__CVBuffer *)FigTaggedBufferGroupGetCVPixelBufferAtIndex();
        v55 = (__CVBuffer *)FigTaggedBufferGroupGetCVPixelBufferAtIndex();
        if (v54)
        {
          if (v55)
          {
            v56 = vtDecompressionSubDuctTransferImage_Synchronously(v11, v78, v54, v55);
            if ((_DWORD)v56)
              break;
          }
        }
        if (v52 == ++v53)
          goto LABEL_88;
      }
      v49 = v56;
      v47 = v11;
      v48 = v79;
      v50 = a4;
      v22 = 0;
      v21 = 0;
    }
LABEL_74:
    vtDecompressionSubDuctEmitTransferredFrame(v47, v48, v49, v50, v22, v21);
    goto LABEL_75;
  }
  if ((v78 & 1) == 0)
    goto LABEL_71;
  MEMORY[0x1940281CC](&vtGetEnableAsynchronousTransfer_sGetEnableAsynchronousTransferOnce, vtGetEnableAsynchronousTransferOnce);
  if ((sGlobalEnableAsynchronousTransfer & 1) != 0)
    goto LABEL_71;
  if (!*(_BYTE *)(v11 + 144))
  {
    v62 = *(_QWORD *)(v11 + 168);
    if (v62)
    {
LABEL_128:
      if (FigSemaphoreWaitRelative())
        goto LABEL_71;
      MEMORY[0x1940280C4](*(_QWORD *)(v62 + 48));
      *(_QWORD *)(v62 + 56) = v79;
      *(_DWORD *)(v62 + 64) = v78;
      *(_DWORD *)(v62 + 68) = a4 | 1;
      *(_QWORD *)(v62 + 72) = CFRetain(a5);
      *(_QWORD *)(v62 + 80) = CFRetain((CFTypeRef)v24);
      MEMORY[0x1940280D0](*(_QWORD *)(v62 + 48));
      FigSemaphoreSignal();
      goto LABEL_75;
    }
    MEMORY[0x1940280C4](*(_QWORD *)(v11 + 104));
    if (*(_QWORD *)(v11 + 168))
    {
LABEL_127:
      MEMORY[0x1940280D0](*(_QWORD *)(v11 + 104));
      v62 = *(_QWORD *)(v11 + 168);
      if (!v62)
        goto LABEL_71;
      goto LABEL_128;
    }
    cf = CFSTR("com.apple.coremedia.asyncpixeltransfer");
    allocatora = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v63 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], MEMORY[0x1E0CA52C8], &cf, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v64 = malloc_type_calloc(0x58uLL, 1uLL, 0xC4C0F2uLL);
    v65 = (uint64_t)v64;
    if (v64
      && (*v64 = v11,
          v64[3] = FigSemaphoreCreate(),
          *(_QWORD *)(v65 + 48) = FigSimpleMutexCreate(),
          v66 = FigSemaphoreCreate(),
          *(_QWORD *)(v65 + 40) = v66,
          *(_QWORD *)(v65 + 24))
      && *(_QWORD *)(v65 + 48)
      && v66)
    {
      v75 = v17;
      v67 = 0;
      *(_DWORD *)(v65 + 8) = 1;
      *(_BYTE *)(v65 + 32) = 0;
      v68 = (_DWORD *)(v11 + 240);
      v69 = 16;
      while (!FigThreadCreate())
      {
        if (*v68)
        {
          v70 = CFNumberCreate(allocatora, kCFNumberSInt32Type, v68);
          v71 = v63;
          v72 = v70;
          FigThreadSetProperty();
          v73 = v72;
          v63 = v71;
          v68 = (_DWORD *)(v11 + 240);
          CFRelease(v73);
        }
        ++v67;
        v69 += 8;
        if (v67 >= *(int *)(v65 + 8))
        {
          *(_QWORD *)(v11 + 168) = v65;
          v65 = 0;
          goto LABEL_133;
        }
      }
      *(_DWORD *)(v65 + 8) = v67;
LABEL_133:
      v17 = v75;
      if (!v63)
        goto LABEL_126;
    }
    else
    {
      FigSignalErrorAt();
      if (!v63)
      {
LABEL_126:
        vtDecompressionSubDuctAsyncPixelTransfer_StopWorkerThreads(v65);
        goto LABEL_127;
      }
    }
    CFRelease(v63);
    goto LABEL_126;
  }
  if (!*(_QWORD *)(v11 + 152))
  {
    MEMORY[0x1940280C4](*(_QWORD *)(v11 + 104));
    v57 = FigDispatchQueueCreateWithPriorityAndClientPID();
    *(_QWORD *)(v11 + 152) = v57;
    if (v57)
    {
      v58 = dispatch_group_create();
      *(_QWORD *)(v11 + 160) = v58;
      if (!v58)
      {
        v59 = *(NSObject **)(v11 + 152);
        if (v59)
        {
          dispatch_release(v59);
          *(_QWORD *)(v11 + 152) = 0;
        }
      }
    }
    MEMORY[0x1940280D0](*(_QWORD *)(v11 + 104));
    if (!*(_QWORD *)(v11 + 152))
      goto LABEL_71;
  }
  v60 = *(NSObject **)(v11 + 160);
  if (v60)
  {
    dispatch_group_wait(v60, 0xFFFFFFFFFFFFFFFFLL);
    v61 = malloc_type_calloc(1uLL, 0x28uLL, 0x10200403D817979uLL);
    *v61 = v11;
    v61[1] = v79;
    *((_DWORD *)v61 + 4) = v78;
    *((_DWORD *)v61 + 5) = a4 | 1;
    v61[3] = CFRetain(a5);
    v61[4] = CFRetain((CFTypeRef)v24);
    dispatch_group_async_f(*(dispatch_group_t *)(v11 + 160), *(dispatch_queue_t *)(v11 + 152), v61, (dispatch_function_t)vtDecompressionSubDuctDoAsyncPixelTransferAndOutput_f);
  }
  else
  {
LABEL_71:
    vtDecompressionSubDuctTransferFrameAndCallOutputCallback_Synchronously(v11, v79, v78, a4, a5, (__CVBuffer *)v24);
  }
LABEL_75:
  if (v81)
    CFRelease(v81);
  if (v80)
    CFRelease(v80);
  return v17;
}

uint64_t VTDecoderSessionCleanUpAfterDecode()
{
  return 0;
}

uint64_t VTDecoderSessionEmitDecodedMultiImageFrame(uint64_t *a1, const void *a2, uint64_t a3, uint64_t a4, OpaqueCMTaggedBufferGroup *a5)
{
  return vtDecoderSessionEmitDecodedFrameCommon(a1, a2, a3, a4, 0, a5);
}

uint64_t VTDecoderSessionTrace(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  if (a1 && ((v1 = *(uint64_t **)(a1 + 8)) == 0 || (v2 = *v1) != 0 && !*(_BYTE *)(v2 + 16)))
    return 0;
  else
    return FigSignalErrorAt();
}

uint64_t VTDecoderSessionGetDestinationPixelBufferAttributes(uint64_t a1)
{
  if (a1 && *(_QWORD *)a1)
    return *(_QWORD *)(*(_QWORD *)a1 + 64);
  FigSignalErrorAt();
  return 0;
}

CFTypeRef vtDecompressionSessionCopyFormattingDesc()
{
  return CFRetain(CFSTR("[VTDecompressionSession]"));
}

__CFString *vtDecompressionSessionCopyDebugDesc(_QWORD *a1)
{
  const __CFAllocator *v3;
  __CFString *Mutable;
  CFAllocatorRef v5;
  uint64_t v6;

  if (a1[3])
    return (__CFString *)CFRetain(CFSTR("[VTDecompressionSession]"));
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  v5 = CFGetAllocator(a1);
  v6 = a1[5];
  if (v6)
    v6 = *(_QWORD *)(v6 + 16);
  CFStringAppendFormat(Mutable, 0, CFSTR("<VTDecompressionSession %p [%p]>{videoFormatDescription:%p, destinationPixelBufferAttributes:%p, outputCallback:{%p,%p}}"), a1, v5, v6, a1[10], a1[12], a1[13]);
  return Mutable;
}

uint64_t __vtDecompressionSessionDeterminePolicyForPossibleHDR10PlusContent_block_invoke()
{
  uint64_t result;

  vtDecompressionSessionDeterminePolicyForPossibleHDR10PlusContent_hdr10PlusEnabled = CelestialShouldSupportHDR10Plus();
  result = FigGetCFPreferenceNumberWithDefault();
  vtDecompressionSessionDeterminePolicyForPossibleHDR10PlusContent_hdr10PlusEnabled = result;
  return result;
}

uint64_t __vtDecompressionSessionSetupDolbyVision8p1_block_invoke()
{
  uint64_t result;

  result = FigGetCFPreferenceNumberWithDefault();
  vtDecompressionSessionSetupDolbyVision8p1_dolbyVision8p1Enabled = result;
  return result;
}

uint64_t __vtDecompressionSessionSetupDolbyVision10p4_block_invoke()
{
  uint64_t result;

  result = _os_feature_enabled_impl();
  vtDecompressionSessionSetupDolbyVision10p4_dolbyVision10p4Enabled = result;
  return result;
}

uint64_t vtFormatDescriptionIsPQ(const opaqueCMFormatDescription *a1)
{
  CMFormatDescriptionGetExtension(a1, (CFStringRef)*MEMORY[0x1E0CA8E98]);
  return FigCFEqual();
}

void vtDecompressionDuctSetVideoFormatDescription(uint64_t a1, const void *a2)
{
  const void *v4;

  MEMORY[0x1940280C4](*(_QWORD *)(a1 + 72));
  v4 = *(const void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = a2;
  if (a2)
    CFRetain(a2);
  if (v4)
    CFRelease(v4);
  JUMPOUT(0x1940280D0);
}

CFDictionaryRef vtCreateFrameTypesArrayElement(const void *a1)
{
  CFDictionaryRef v1;
  const void *v3;
  void *keys;

  v3 = a1;
  keys = CFSTR("OnlyTheseFrames");
  v1 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&keys, &v3, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v1)
    FigSignalErrorAt();
  return v1;
}

const __CFDictionary *vtDecompressionAttributesHaveColorSpaceAttachments(const __CFDictionary *result)
{
  const __CFDictionary *v1;
  const __CFDictionary *Value;
  const __CFDictionary *v3;

  if (result)
  {
    v1 = result;
    Value = (const __CFDictionary *)CFDictionaryGetValue(result, (const void *)*MEMORY[0x1E0CA8C68]);
    v3 = (const __CFDictionary *)CFDictionaryGetValue(v1, (const void *)*MEMORY[0x1E0CA8C60]);
    if (vtDecompressionDictionaryHasColorSpaceKeys(Value))
      return (const __CFDictionary *)1;
    else
      return (const __CFDictionary *)(vtDecompressionDictionaryHasColorSpaceKeys(v3) != 0);
  }
  return result;
}

uint64_t vtCopyGuessedMissingColorSpaceAttachmentsFromFormatDescription(const opaqueCMFormatDescription *a1, __CFDictionary **a2)
{
  const __CFDictionary *Extensions;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v6;
  const void *Value;
  const void *v8;
  const void *v9;
  CMVideoDimensions Dimensions;
  FourCharCode MediaSubType;
  unint64_t width;
  unint64_t v13;

  Extensions = CMFormatDescriptionGetExtensions(a1);
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v6 = Mutable;
    if (Extensions)
    {
      Value = CFDictionaryGetValue(Extensions, (const void *)*MEMORY[0x1E0CA8D68]);
      v8 = CFDictionaryGetValue(Extensions, (const void *)*MEMORY[0x1E0CA8E98]);
      v9 = CFDictionaryGetValue(Extensions, (const void *)*MEMORY[0x1E0CA8EE8]);
      LODWORD(Extensions) = CFDictionaryGetValue(Extensions, (const void *)*MEMORY[0x1E0CA8DF8]) != 0;
      if (a1)
      {
LABEL_4:
        Dimensions = CMVideoFormatDescriptionGetDimensions(a1);
        MediaSubType = CMFormatDescriptionGetMediaSubType(a1);
        width = Dimensions.width;
        v13 = *(uint64_t *)&Dimensions >> 32;
LABEL_7:
        vtGuessMissingColorSpaceAttachmentsGuts(MediaSubType, width, v13, Value, v8, v9, (int)Extensions, v6);
        *a2 = v6;
        return 0;
      }
    }
    else
    {
      Value = 0;
      v8 = 0;
      v9 = 0;
      if (a1)
        goto LABEL_4;
    }
    width = 0;
    v13 = 0;
    MediaSubType = 0;
    goto LABEL_7;
  }
  return FigSignalErrorAt();
}

const __CFDictionary *vtDecompressionDictionaryHasColorSpaceKeys(const __CFDictionary *result)
{
  const __CFDictionary *v1;

  if (result)
  {
    v1 = result;
    if (CFDictionaryContainsKey(result, (const void *)*MEMORY[0x1E0CA8D68])
      || CFDictionaryContainsKey(v1, (const void *)*MEMORY[0x1E0CA8E98]))
    {
      return (const __CFDictionary *)1;
    }
    else
    {
      return (const __CFDictionary *)(CFDictionaryContainsKey(v1, (const void *)*MEMORY[0x1E0CA8EE8]) != 0);
    }
  }
  return result;
}

void vtGuessMissingColorSpaceAttachmentsGuts(int a1, unint64_t a2, unint64_t a3, CFTypeRef cf1, CFTypeRef a5, CFTypeRef a6, int a7, CFMutableDictionaryRef theDict)
{
  int v13;
  int v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  int v19;
  const void **v20;
  const void **v21;
  const void **v22;
  const void *v23;
  const void *v24;
  void *value;

  if (cf1 && a5 && a6)
    goto LABEL_4;
  if (!cf1 && !a5 && !a6)
  {
    v24 = 0;
    value = 0;
    v23 = 0;
    VTGetDefaultColorAttributesWithHints(a1, 0, a2, a3, &value, &v24, &v23);
    CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E0CA8D68], value);
    if (a7)
      v15 = (const void *)*MEMORY[0x1E0CA8ED8];
    else
      v15 = v24;
    CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E0CA8E98], v15);
    v16 = (const void *)*MEMORY[0x1E0CA8EE8];
    v17 = v23;
LABEL_40:
    CFDictionarySetValue(theDict, v16, v17);
    goto LABEL_41;
  }
  if (cf1 && !CFEqual(cf1, (CFTypeRef)*MEMORY[0x1E0CA8DA0]) && !CFEqual(cf1, (CFTypeRef)*MEMORY[0x1E0CA8D88])
    || a5 && !CFEqual(a5, (CFTypeRef)*MEMORY[0x1E0CA8EB0]) && !CFEqual(a5, (CFTypeRef)*MEMORY[0x1E0CA8ED8]))
  {
    goto LABEL_4;
  }
  if (!a6)
  {
    if (!cf1)
    {
      v20 = (const void **)MEMORY[0x1E0CA8DA0];
      goto LABEL_31;
    }
LABEL_26:
    v13 = 0;
    if (!a5)
      goto LABEL_32;
    goto LABEL_27;
  }
  v18 = (const void *)*MEMORY[0x1E0CA8F10];
  if (!CFEqual(a6, (CFTypeRef)*MEMORY[0x1E0CA8F10]) && !CFEqual(a6, (CFTypeRef)*MEMORY[0x1E0CA8F18]))
  {
LABEL_4:
    v13 = 0;
    v14 = 0;
    goto LABEL_28;
  }
  if (cf1)
    goto LABEL_26;
  v19 = CFEqual(a6, v18);
  v20 = (const void **)MEMORY[0x1E0CA8DA0];
  if (!v19)
    v20 = (const void **)MEMORY[0x1E0CA8D88];
LABEL_31:
  CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E0CA8D68], *v20);
  v13 = 1;
  if (!a5)
  {
LABEL_32:
    v21 = (const void **)MEMORY[0x1E0CA8ED8];
    if (!a7)
      v21 = (const void **)MEMORY[0x1E0CA8EB0];
    CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E0CA8E98], *v21);
    v14 = 1;
    if (!a6)
      goto LABEL_35;
    goto LABEL_28;
  }
LABEL_27:
  v14 = 0;
  if (!a6)
  {
LABEL_35:
    if (cf1 && !CFEqual(cf1, (CFTypeRef)*MEMORY[0x1E0CA8DA0]))
    {
      v16 = (const void *)*MEMORY[0x1E0CA8EE8];
      v22 = (const void **)MEMORY[0x1E0CA8F18];
    }
    else
    {
      v16 = (const void *)*MEMORY[0x1E0CA8EE8];
      v22 = (const void **)MEMORY[0x1E0CA8F10];
    }
    v17 = *v22;
    goto LABEL_40;
  }
LABEL_28:
  if (v14 | v13)
LABEL_41:
    CFDictionarySetValue(theDict, CFSTR("ColorInfoGuessedBy"), CFSTR("VideoToolbox"));
}

CFDictionaryRef vtCreateQualityOfServiceTier(void *a1, double a2)
{
  const __CFAllocator *v3;
  CFNumberRef v4;
  CFDictionaryRef v5;
  double v7;
  void *values[2];
  void *keys[3];

  keys[2] = *(void **)MEMORY[0x1E0C80C00];
  v7 = a2;
  keys[0] = CFSTR("OnlyTheseFrames");
  keys[1] = CFSTR("ReducedFrameDelivery");
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberDoubleType, &v7);
  values[0] = a1;
  values[1] = v4;
  v5 = CFDictionaryCreate(v3, (const void **)keys, (const void **)values, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v5)
  {
    FigSignalErrorAt();
    if (!v4)
      return v5;
    goto LABEL_3;
  }
  if (v4)
LABEL_3:
    CFRelease(v4);
  return v5;
}

void vtDecompressionSessionAddPropertyToPartition(void *key, const void *a2, CFDictionaryRef *a3)
{
  __CFDictionary *Mutable;
  const __CFDictionary *v7;

  if (CFDictionaryContainsKey(*a3, key))
  {
    Mutable = a3[2];
    if (!Mutable)
    {
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      a3[2] = Mutable;
    }
LABEL_8:
    CFDictionarySetValue(Mutable, key, a2);
    return;
  }
  v7 = a3[1];
  if (v7 && CFDictionaryContainsKey(v7, key))
  {
    Mutable = a3[3];
    if (!Mutable)
    {
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      a3[3] = Mutable;
    }
    goto LABEL_8;
  }
}

BOOL vtCVBufferAttachmentEmpty(__CVBuffer *a1, const __CFString *a2)
{
  CFTypeRef v2;
  CFTypeRef v3;

  v2 = CVBufferCopyAttachment(a1, a2, 0);
  v3 = v2;
  if (v2)
    CFRelease(v2);
  return v3 == 0;
}

const __CFNumber *vtCreateScaledCleanApertureValue(const __CFDictionary *a1, const void *a2, double a3)
{
  const __CFNumber *result;
  double valuePtr;

  result = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  if (result)
  {
    valuePtr = 0.0;
    CFNumberGetValue(result, kCFNumberDoubleType, &valuePtr);
    valuePtr = valuePtr * a3;
    return CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberDoubleType, &valuePtr);
  }
  return result;
}

__n128 vtDuctFrameTrackingInfoFindMinPTS(uint64_t a1, CMTime *a2, CMTime *a3)
{
  __n128 result;
  CMTime v6;
  CMTime time1;

  time1 = a2[1];
  v6 = *a3;
  if (CMTimeCompare(&time1, &v6) < 0)
  {
    result = *(__n128 *)&a2[1].value;
    a3->epoch = a2[1].epoch;
    *(__n128 *)&a3->value = result;
  }
  return result;
}

__n128 vtDuctFrameTrackingInfoFindMaxPTS(uint64_t a1, uint64_t a2, CMTime *a3)
{
  __n128 *v4;
  __n128 result;
  CMTime v6;
  CMTime time1;

  if ((*(_BYTE *)(a2 + 36) & 1) != 0)
  {
    v4 = (__n128 *)(a2 + 24);
    time1 = *(CMTime *)(a2 + 24);
    v6 = *a3;
    if (CMTimeCompare(&time1, &v6) >= 1)
    {
      result = *v4;
      a3->epoch = v4[1].n128_i64[0];
      *(__n128 *)&a3->value = result;
    }
  }
  return result;
}

uint64_t vtDecompressionDuctDecodeSingleFrame_iterator(CMSampleBufferRef sbuf, uint64_t a2, uint64_t a3)
{
  return vtDecompressionDuctDecodeSingleFrame(*(_QWORD *)a3, sbuf, *(unsigned int *)(a3 + 8), *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 40), *(_QWORD *)(a3 + 48), *(_QWORD *)(a3 + 24), *(_QWORD *)(a3 + 32));
}

CFTypeRef VTVideoDecoderCopyFormattingDesc()
{
  return CFRetain(CFSTR("[VTVideoDecoder]"));
}

void vtDecompressionSessionUpdateAttachmentsForEmittedImageBuffer(_QWORD *a1, const opaqueCMFormatDescription *a2, __CVBuffer *a3)
{
  __CFDictionary *Mutable;
  __CFDictionary *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;

  vtTransferImageBufferAttachmentsFromVideoFormatDescription(a2, a3);
  if (!VTIsBufferTaggedWithColorProperties(a3))
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v6 = Mutable;
    v7 = (const void *)a1[25];
    if (v7)
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA8D68], v7);
    v8 = (const void *)a1[26];
    if (v8)
      CFDictionarySetValue(v6, (const void *)*MEMORY[0x1E0CA8E98], v8);
    v9 = (const void *)a1[27];
    if (v9)
      CFDictionarySetValue(v6, (const void *)*MEMORY[0x1E0CA8EE8], v9);
    v10 = (const void *)a1[28];
    if (v10)
      CFDictionarySetValue(v6, (const void *)*MEMORY[0x1E0CA8E40], v10);
    CVBufferSetAttachments(a3, v6, kCVAttachmentMode_ShouldPropagate);
    if (v6)
      CFRelease(v6);
  }
}

void vtDecompressionSessionGeneratePerFrameHDRMetadataforEmittedImageBufferCommon(uint64_t a1, CVBufferRef buffer)
{
  const __CFString *v4;
  CFTypeRef v5;
  CFTypeRef v6;
  CFTypeRef v7;
  CFTypeRef v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  double v12[5];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  CFTypeRef v20;

  v20 = 0;
  if (vtAddDolbyOverride_onceToken != -1)
    dispatch_once(&vtAddDolbyOverride_onceToken, &__block_literal_global_40);
  if (!vtAddDolbyOverride_addDolbyOverride && !*(_BYTE *)(a1 + 272))
  {
LABEL_23:
    v5 = v20;
    if (!v20)
      return;
    goto LABEL_24;
  }
  v4 = (const __CFString *)*MEMORY[0x1E0CA8DC0];
  v5 = CVBufferCopyAttachment(buffer, (CFStringRef)*MEMORY[0x1E0CA8DC0], 0);
  v20 = v5;
  if (!v5)
  {
    v6 = CVBufferCopyAttachment(buffer, (CFStringRef)*MEMORY[0x1E0CA8D68], 0);
    v7 = CVBufferCopyAttachment(buffer, (CFStringRef)*MEMORY[0x1E0CA8EE8], 0);
    v8 = CVBufferCopyAttachment(buffer, (CFStringRef)*MEMORY[0x1E0CA8E98], 0);
    if (FigCFEqual() && FigCFEqual() && FigCFEqual())
    {
      v9 = (uint64_t *)(a1 + 280);
      if (!*(_QWORD *)(a1 + 280)
        && VTHDRImageStatisticsGenerationSessionCreate(0, 0, (uint64_t *)(a1 + 280))
        || (v10 = (uint64_t *)(a1 + 288), !*(_QWORD *)(a1 + 288))
        && VTHDRMetadataGenerationSessionCreate(*MEMORY[0x1E0C9AE00], 4, 0, (uint64_t *)(a1 + 288)))
      {
        FigSignalErrorAt();
        if (!v7)
          goto LABEL_19;
        goto LABEL_18;
      }
      v11 = *v9;
      if (*v9)
      {
        if (*v10)
        {
          v18 = 0;
          v19 = 0;
          VTHDRImageStatisticsGenerationSessionCreateStatistics(v11, buffer, (float *)&v19 + 1, (float *)&v19, (float *)&v18 + 1, (float *)&v18);
          v15 = 0u;
          v16 = 0u;
          v17 = 1;
          v13 = 0u;
          v14 = 0u;
          v12[0] = *(float *)&v19;
          v12[1] = *((float *)&v18 + 1);
          v12[2] = *((float *)&v19 + 1);
          v12[3] = *(float *)&v18;
          v12[4] = *(float *)&v18;
          WORD6(v16) = 257;
          BYTE14(v16) = 1;
          VTHDRMetadataGenerationSessionCreateDataFromStatistics(*v10, 0, 1, (uint64_t)v12, 1);
          if (v20)
            CVBufferSetAttachment(buffer, v4, v20, kCVAttachmentMode_ShouldPropagate);
        }
      }
    }
    if (!v7)
    {
LABEL_19:
      if (v6)
        CFRelease(v6);
      if (v8)
        CFRelease(v8);
      goto LABEL_23;
    }
LABEL_18:
    CFRelease(v7);
    goto LABEL_19;
  }
LABEL_24:
  CFRelease(v5);
}

uint64_t __vtAddDolbyOverride_block_invoke()
{
  uint64_t result;

  result = FigGetCFPreferenceNumberWithDefault();
  vtAddDolbyOverride_addDolbyOverride = result;
  return result;
}

uint64_t vtDecompressionSessionCreateDestinationImageBufferForEmittedFrameIfNecessary(uint64_t a1, int a2, void *a3, CVPixelBufferRef *a4)
{
  _BOOL4 v7;
  const __CFAllocator *v9;
  uint64_t PixelBuffer;
  VTSessionRef *v11;
  const __CFAllocator *v13;
  __CFDictionary *Mutable;
  __CFDictionary *v15;
  const void **v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const __CFDictionary *v21;

  if ((a2 & 0x1000000) != 0)
    return 0;
  if (*(_QWORD *)(a1 + 56))
    v7 = *(_QWORD *)(a1 + 96) != *(_QWORD *)(a1 + 88);
  else
    v7 = *(_QWORD *)(a1 + 64) && CVPixelBufferIsCompatibleWithAttributes() == 0;
  if (VTIsPixelBufferCompatibleWithColorProperties(a3, *(const void **)(a1 + 200), *(const void **)(a1 + 208), *(const void **)(a1 + 216), *(const void **)(a1 + 224), (CGColorSpaceRef *)(a1 + 232))&& !v7)
  {
    return 0;
  }
  vtDecompressionSubDuctEnsurePixelBufferPoolsAreUpToDate(a1);
  v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  PixelBuffer = CVPixelBufferPoolCreatePixelBuffer((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CVPixelBufferPoolRef *)(a1 + 96), a4);
  if ((_DWORD)PixelBuffer)
    return PixelBuffer;
  v11 = (VTSessionRef *)(a1 + 128);
  if (*(_QWORD *)(a1 + 128))
    return 0;
  v13 = CFGetAllocator(*(CFTypeRef *)a1);
  PixelBuffer = VTPixelTransferSessionCreate(v13, (VTPixelTransferSessionRef *)(a1 + 128));
  if ((_DWORD)PixelBuffer)
    return PixelBuffer;
  if (*v11)
  {
    Mutable = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v15 = Mutable;
    v16 = (const void **)MEMORY[0x1E0C9AE40];
    if (!*(_BYTE *)(a1 + 257))
      v16 = (const void **)MEMORY[0x1E0C9AE50];
    CFDictionarySetValue(Mutable, CFSTR("RealTime"), *v16);
    if (*(_DWORD *)(a1 + 240))
      FigCFDictionarySetInt32();
    v17 = *(const void **)(a1 + 200);
    if (v17)
      CFDictionarySetValue(v15, CFSTR("DestinationColorPrimaries"), v17);
    v18 = *(const void **)(a1 + 208);
    if (v18)
      CFDictionarySetValue(v15, CFSTR("DestinationTransferFunction"), v18);
    v19 = *(const void **)(a1 + 216);
    if (v19)
      CFDictionarySetValue(v15, CFSTR("DestinationYCbCrMatrix"), v19);
    v20 = *(const void **)(a1 + 224);
    if (v20)
      CFDictionarySetValue(v15, CFSTR("DestinationICCProfile"), v20);
    PixelBuffer = VTSessionSetProperties(*v11, v15);
    if (v15)
      CFRelease(v15);
    if ((_DWORD)PixelBuffer)
      return PixelBuffer;
  }
  v21 = *(const __CFDictionary **)(a1 + 136);
  if (!v21)
    return 0;
  return VTSessionSetProperties(*v11, v21);
}

uint64_t vtDecompressionSubDuctTransferFrameAndCallOutputCallback_Synchronously(uint64_t a1, const void *a2, char a3, int a4, __CVBuffer *a5, __CVBuffer *a6)
{
  __CVBuffer *v6;
  uint64_t v10;

  v6 = a6;
  v10 = vtDecompressionSubDuctTransferImage_Synchronously(a1, a3, a5, a6);
  if ((_DWORD)v10)
  {
    FigSignalErrorAt();
    v6 = 0;
  }
  return vtDecompressionSubDuctEmitTransferredFrame(a1, a2, v10, a4 | 4u, v6, 0);
}

uint64_t vtDecompressionSubDuctTransferImage_Synchronously(uint64_t a1, char a2, __CVBuffer *a3, __CVBuffer *a4)
{
  const void *v7;
  const void *v8;
  const void *v9;

  v7 = *(const void **)(a1 + 128);
  v8 = (const void *)*MEMORY[0x1E0C9AE40];
  if ((a2 & 4) != 0)
    v9 = (const void *)*MEMORY[0x1E0C9AE40];
  else
    v9 = (const void *)*MEMORY[0x1E0C9AE50];
  VTSessionSetProperty(v7, CFSTR("EnableHighSpeedTransfer"), v9);
  if (VTAvoidHardwarePixelTransfer())
  {
    VTSessionSetProperty(*(VTSessionRef *)(a1 + 128), CFSTR("EnableHardwareAcceleratedTransfer"), v8);
    VTSessionSetProperty(*(VTSessionRef *)(a1 + 128), CFSTR("EnableGPUAcceleratedTransfer"), v8);
  }
  return VTPixelTransferSessionTransferImage(*(VTPixelTransferSessionRef *)(a1 + 128), a3, a4);
}

void vtGetEnableAsynchronousTransferOnce()
{
  const __CFString *v0;
  const __CFString *v1;
  char v2[200];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)CFPreferencesCopyValue(CFSTR("asyncpixeltransfer"), CFSTR("com.apple.coremedia"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
  if (v0)
  {
    v1 = v0;
    CFStringGetCString(v0, v2, 200, 0x8000100u);
    if (CFEqual(v1, CFSTR("disable")) || CFEqual(v1, CFSTR("disabled")))
      sGlobalEnableAsynchronousTransfer = 1;
    CFRelease(v1);
  }
}

void vtDecompressionSubDuctDoAsyncPixelTransferAndOutput_f(uint64_t a1)
{
  const void *v2;
  const void *v3;

  if (a1)
  {
    vtDecompressionSubDuctTransferFrameAndCallOutputCallback_Synchronously(*(_QWORD *)a1, *(const void **)(a1 + 8), *(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 20), *(__CVBuffer **)(a1 + 24), *(__CVBuffer **)(a1 + 32));
    v2 = *(const void **)(a1 + 24);
    if (v2)
      CFRelease(v2);
    v3 = *(const void **)(a1 + 32);
    if (v3)
      CFRelease(v3);
    free((void *)a1);
  }
}

uint64_t vtDecompressionDuctAsyncPixelTransfer_WorkerThread(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  int v4;
  __CVBuffer *v5;
  __CVBuffer *v6;
  uint64_t v7;
  const void *v8;

  v2 = (_QWORD *)(a1 + 72);
  while (1)
  {
    FigSemaphoreWaitRelative();
    MEMORY[0x1940280C4](*(_QWORD *)(a1 + 48));
    v4 = *(_DWORD *)(a1 + 64);
    v3 = *(unsigned int *)(a1 + 68);
    v6 = *(__CVBuffer **)(a1 + 72);
    v5 = *(__CVBuffer **)(a1 + 80);
    v7 = *(_QWORD *)(a1 + 48);
    v8 = *(const void **)(a1 + 56);
    *(_QWORD *)(a1 + 56) = 0;
    *v2 = 0;
    v2[1] = 0;
    MEMORY[0x1940280D0](v7);
    if (*(_BYTE *)(a1 + 32))
      break;
    FigSemaphoreSignal();
    vtDecompressionSubDuctTransferFrameAndCallOutputCallback_Synchronously(*(_QWORD *)a1, v8, v4, v3, v6, v5);
    if (v6)
      CFRelease(v6);
    if (v5)
      CFRelease(v5);
  }
  if (v8)
    vtDecompressionSubDuctEmitTransferredFrame(*(_QWORD *)a1, v8, 4294954393, v3, 0, 0);
  if (v6)
    CFRelease(v6);
  if (v5)
    CFRelease(v5);
  return 0;
}

__n128 VTConvertFloatRectToIntRect(uint64_t a1, uint64_t a2)
{
  __n128 result;
  int64x2_t v3;

  if (a1)
  {
    if (a2)
    {
      result = *(__n128 *)a1;
      *(int64x2_t *)(a2 + 32) = vcvtq_s64_f64(vcvtq_f64_f32(vrnda_f32(vcvt_f32_f64(*(float64x2_t *)(a1 + 16)))));
      v3 = vcvtq_s64_f64(vcvtq_f64_f32(vrnda_f32(vcvt_f32_f64(*(float64x2_t *)(a1 + 32)))));
      *(__n128 *)a2 = result;
      *(int64x2_t *)(a2 + 16) = v3;
    }
  }
  return result;
}

uint64_t VTPixelTransferNodeSoftwareCopyProperty()
{
  return 4294954396;
}

uint64_t VTPixelTransferNodeSoftwareSetProperty()
{
  return 4294954396;
}

uint64_t VTPixelTransferNodeSoftwareCopySupportedPropertyDictionary(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
  return 0;
}

uint64_t VTPixelTransferChainAppendSoftwareNode()
{
  uint64_t v0;

  VTPixelTransferNodeGetClassID();
  v0 = CMDerivedObjectCreate();
  FigSignalErrorAt();
  return v0;
}

uint64_t VTPixelTransferNodeScalerCopyProperty()
{
  return 4294954396;
}

uint64_t VTPixelTransferNodeScalerSetProperty()
{
  return 4294954396;
}

uint64_t VTPixelTransferNodeScalerCopySupportedPropertyDictionary(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
  return 0;
}

uint64_t VTPixelTransferChainAppendScalerNode()
{
  uint64_t v0;

  VTPixelTransferNodeGetClassID();
  v0 = CMDerivedObjectCreate();
  FigSignalErrorAt();
  return v0;
}

uint64_t VTPixelTransferNodeDynamicCopyProperty(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t DerivedStorage;

  *a4 = 0;
  if (result)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (FigCFEqual())
    {
      result = (uint64_t)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 136), CFSTR("ServiceHistogramData"));
      *a4 = result;
      if (result)
      {
        CFRetain((CFTypeRef)result);
        return 0;
      }
    }
    else
    {
      return 4294954396;
    }
  }
  return result;
}

uint64_t VTPixelTransferNodeDynamicSetProperty()
{
  return 4294954396;
}

uint64_t VTPixelTransferNodeDynamicCopySupportedPropertyDictionary(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
  return 0;
}

uint64_t vtPixelTransferChainAppendDynamicNode()
{
  uint64_t v0;

  VTPixelTransferNodeGetClassID();
  v0 = CMDerivedObjectCreate();
  FigSignalErrorAt();
  return v0;
}

void vtFreePlanarBuffers(uint64_t a1)
{
  uint64_t i;
  void *v3;

  for (i = 0; i != 128; i += 32)
  {
    v3 = *(void **)(a1 + i);
    if (v3)
    {
      free(v3);
      *(_QWORD *)(a1 + i) = 0;
    }
  }
}

CFTypeID VTPixelTransferSessionGetTypeID(void)
{
  MEMORY[0x1940281CC](&VTPixelTransferSessionGetTypeID_sRegisterVTPixelTransferSessionOnce, RegisterVTPixelTransferSession);
  return sVTPixelTransferSessionID;
}

uint64_t VTPixelTransferSessionCopySupportedPropertyDictionary(uint64_t a1, CFTypeRef *a2)
{
  if (*(_BYTE *)(a1 + 16))
    return FigSignalErrorAt();
  MEMORY[0x1940281CC](&sCreateSupportedPropertyDictionaryOnce, vtPixelTransferSessionCreateSupportedPropertyDictionary);
  if (!a2 || !sVTPixelTransferSessionSupportedPropertyDictionary)
    return FigSignalErrorAt();
  *a2 = CFRetain((CFTypeRef)sVTPixelTransferSessionSupportedPropertyDictionary);
  return 0;
}

void vtPixelTransferSessionCreateSupportedPropertyDictionary()
{
  const __CFAllocator *v0;
  CFArrayRef v1;
  CFArrayRef v2;
  CFDictionaryRef v3;
  CFDictionaryRef v4;
  const __CFString *v5;
  CFArrayRef v6;
  CFArrayRef v7;
  const __CFString *v8;
  const __CFString *v9;
  uint64_t v10;
  CFArrayRef v11;
  CFDictionaryRef v12;
  const __CFString *v13;
  const __CFString *v14;
  uint64_t v15;
  uint64_t v16;
  CFArrayRef v17;
  CFDictionaryRef v18;
  CFArrayRef YCbCrMatricesArray;
  CFArrayRef v20;
  CFDictionaryRef v21;
  CFDictionaryRef v22;
  const void *v23;
  CFDictionaryRef v24;
  CFDictionaryRef v25;
  uint64_t v26;
  const __CFAllocator *v27;
  CFDictionaryRef v28;
  CFArrayRef v29;
  CFDictionaryRef v30;
  CFTypeRef v31;
  CFArrayRef v32;
  CFArrayRef v33;
  CFDictionaryRef v34;
  CFTypeRef v35;
  CFTypeRef v36;
  CFDictionaryRef cf;
  void *v38;
  const __CFString *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  void *keys;
  const __CFString *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  void *values;
  const __CFString *v55;
  const __CFString *v56;
  const __CFString *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v53 = 0;
  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  v48 = 0u;
  v45 = 0;
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v40 = 0u;
  keys = CFSTR("PropertyType");
  v47 = CFSTR("ReadWriteStatus");
  v38 = CFSTR("Enumeration");
  v39 = CFSTR("ReadWrite");
  values = CFSTR("Normal");
  v55 = CFSTR("CropSourceToCleanAperture");
  v56 = CFSTR("Letterbox");
  v57 = CFSTR("Trim");
  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v1 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&values, 4, MEMORY[0x1E0C9B378]);
  if (!v1)
  {
    FigSignalErrorAt();
    FigSignalErrorAt();
    return;
  }
  v2 = v1;
  *(_QWORD *)&v48 = CFSTR("SupportedValueList");
  *(_QWORD *)&v40 = v1;
  v3 = CFDictionaryCreate(v0, (const void **)&keys, (const void **)&v38, 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v3)
  {
    FigSignalErrorAt();
    v29 = v2;
LABEL_58:
    CFRelease(v29);
    return;
  }
  cf = v3;
  v38 = CFSTR("ReadWrite");
  keys = CFSTR("ReadWriteStatus");
  v4 = CFDictionaryCreate(v0, (const void **)&keys, (const void **)&v38, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v5 = (const __CFString *)v4;
  if (v4)
  {
    v31 = CFRetain(v4);
    keys = CFSTR("PropertyType");
    v47 = CFSTR("ReadWriteStatus");
    v38 = CFSTR("Enumeration");
    v39 = CFSTR("ReadWrite");
    values = CFSTR("Decimate");
    v55 = CFSTR("Average");
    v6 = CFArrayCreate(v0, (const void **)&values, 2, MEMORY[0x1E0C9B378]);
    v7 = v6;
    if (v6)
    {
      *(_QWORD *)&v48 = CFSTR("SupportedValueList");
      *(_QWORD *)&v40 = v6;
      v30 = CFDictionaryCreate(v0, (const void **)&keys, (const void **)&v38, 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (v30)
      {
        v36 = CFRetain(v5);
        v35 = CFRetain(v5);
        keys = CFSTR("PropertyType");
        v47 = CFSTR("ReadWriteStatus");
        v38 = CFSTR("Enumeration");
        v39 = CFSTR("ReadWrite");
        v8 = (const __CFString *)*MEMORY[0x1E0CA8D78];
        values = (void *)*MEMORY[0x1E0CA8D88];
        v55 = v8;
        v9 = (const __CFString *)*MEMORY[0x1E0CA8D90];
        v56 = (const __CFString *)*MEMORY[0x1E0CA8DA0];
        v57 = v9;
        v10 = *MEMORY[0x1E0CA8D98];
        v58 = *MEMORY[0x1E0CA8D70];
        v59 = v10;
        v60 = *MEMORY[0x1E0CA8D80];
        v11 = CFArrayCreate(v0, (const void **)&values, 7, MEMORY[0x1E0C9B378]);
        if (v11)
        {
          *(_QWORD *)&v48 = CFSTR("SupportedValueList");
          v33 = v11;
          *(_QWORD *)&v40 = v11;
          v12 = CFDictionaryCreate(v0, (const void **)&keys, (const void **)&v38, 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          if (v12)
          {
            v34 = v12;
            keys = CFSTR("PropertyType");
            v47 = CFSTR("ReadWriteStatus");
            v38 = CFSTR("Enumeration");
            v39 = CFSTR("ReadWrite");
            v13 = (const __CFString *)*MEMORY[0x1E0CA8EC0];
            values = (void *)*MEMORY[0x1E0CA8EB0];
            v55 = v13;
            v14 = (const __CFString *)*MEMORY[0x1E0CA8EA0];
            v56 = (const __CFString *)*MEMORY[0x1E0CA8ED8];
            v57 = v14;
            v15 = *MEMORY[0x1E0CA8EC8];
            v58 = *MEMORY[0x1E0CA8ED0];
            v59 = v15;
            v16 = *MEMORY[0x1E0CA8EB8];
            v60 = *MEMORY[0x1E0CA8EA8];
            v61 = v16;
            v17 = CFArrayCreate(v0, (const void **)&values, 8, MEMORY[0x1E0C9B378]);
            if (v17)
            {
              *(_QWORD *)&v48 = CFSTR("SupportedValueList");
              v32 = v17;
              *(_QWORD *)&v40 = v17;
              v18 = CFDictionaryCreate(v0, (const void **)&keys, (const void **)&v38, 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              if (v18)
              {
                keys = CFSTR("PropertyType");
                v47 = CFSTR("ReadWriteStatus");
                v38 = CFSTR("Enumeration");
                v39 = CFSTR("ReadWrite");
                YCbCrMatricesArray = vtPixelTransferSessionCreateYCbCrMatricesArray();
                v20 = YCbCrMatricesArray;
                if (YCbCrMatricesArray)
                {
                  *(_QWORD *)&v48 = CFSTR("SupportedValueList");
                  *(_QWORD *)&v40 = YCbCrMatricesArray;
                  v21 = CFDictionaryCreate(v0, (const void **)&keys, (const void **)&v38, 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                  if (v21)
                  {
                    keys = CFSTR("ReadWriteStatus");
                    v38 = CFSTR("ReadWrite");
                    v22 = CFDictionaryCreate(v0, (const void **)&keys, (const void **)&v38, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                    v23 = v31;
                    if (v22)
                    {
                      v24 = CFDictionaryCreate(v0, (const void **)&keys, (const void **)&v38, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                      v25 = v24;
                      if (v24)
                      {
                        keys = CFSTR("ScalingMode");
                        v47 = CFSTR("DestinationPixelAspectRatio");
                        v38 = cf;
                        v39 = v5;
                        *(_QWORD *)&v48 = CFSTR("DestinationCleanAperture");
                        *((_QWORD *)&v48 + 1) = CFSTR("DownsamplingMode");
                        *(_QWORD *)&v40 = v31;
                        *((_QWORD *)&v40 + 1) = v30;
                        *(_QWORD *)&v49 = CFSTR("SourceCropRectangle");
                        *((_QWORD *)&v49 + 1) = CFSTR("DestinationRectangle");
                        *(_QWORD *)&v41 = v36;
                        *((_QWORD *)&v41 + 1) = v35;
                        *(_QWORD *)&v50 = CFSTR("DestinationYCbCrMatrix");
                        *((_QWORD *)&v50 + 1) = CFSTR("DestinationColorPrimaries");
                        *(_QWORD *)&v42 = v21;
                        *((_QWORD *)&v42 + 1) = v34;
                        v26 = *MEMORY[0x1E0CA8E40];
                        *(_QWORD *)&v51 = CFSTR("DestinationTransferFunction");
                        *((_QWORD *)&v51 + 1) = v26;
                        *(_QWORD *)&v43 = v18;
                        *((_QWORD *)&v43 + 1) = v22;
                        *(_QWORD *)&v52 = CFSTR("Label");
                        *(_QWORD *)&v44 = v24;
                        v27 = v0;
                        v28 = v30;
                        sVTPixelTransferSessionSupportedPropertyDictionary = (uint64_t)CFDictionaryCreate(v27, (const void **)&keys, (const void **)&v38, 11, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                        if (sVTPixelTransferSessionSupportedPropertyDictionary)
                          goto LABEL_30;
                        goto LABEL_29;
                      }
                    }
                    else
                    {
                      v25 = 0;
                    }
                    goto LABEL_28;
                  }
                  v22 = 0;
LABEL_27:
                  v25 = 0;
                  v23 = v31;
LABEL_28:
                  v28 = v30;
                  goto LABEL_29;
                }
                v22 = 0;
LABEL_26:
                v21 = 0;
                goto LABEL_27;
              }
LABEL_25:
              v22 = 0;
              v20 = 0;
              goto LABEL_26;
            }
            FigSignalErrorAt();
          }
          else
          {
            v34 = 0;
          }
        }
        else
        {
          FigSignalErrorAt();
          v33 = 0;
          v34 = 0;
        }
        v18 = 0;
        v32 = 0;
        goto LABEL_25;
      }
    }
    else
    {
      FigSignalErrorAt();
    }
    v28 = 0;
    v35 = 0;
    v36 = 0;
    v33 = 0;
    v34 = 0;
    v18 = 0;
    v32 = 0;
    v22 = 0;
    v20 = 0;
    v21 = 0;
    v25 = 0;
    v23 = v31;
  }
  else
  {
    v23 = 0;
    v7 = 0;
    v28 = 0;
    v35 = 0;
    v36 = 0;
    v33 = 0;
    v34 = 0;
    v18 = 0;
    v32 = 0;
    v22 = 0;
    v20 = 0;
    v21 = 0;
    v25 = 0;
  }
LABEL_29:
  FigSignalErrorAt();
LABEL_30:
  CFRelease(v2);
  CFRelease(cf);
  if (v5)
    CFRelease(v5);
  if (v23)
    CFRelease(v23);
  if (v7)
    CFRelease(v7);
  if (v28)
    CFRelease(v28);
  if (v36)
    CFRelease(v36);
  if (v35)
    CFRelease(v35);
  if (v34)
    CFRelease(v34);
  if (v33)
    CFRelease(v33);
  if (v18)
    CFRelease(v18);
  if (v32)
    CFRelease(v32);
  if (v22)
    CFRelease(v22);
  if (v21)
    CFRelease(v21);
  if (v20)
    CFRelease(v20);
  if (v25)
  {
    v29 = v25;
    goto LABEL_58;
  }
}

uint64_t _VTPixelTransferSessionSetProperty(uint64_t a1, const __CFString *a2, const void *a3)
{
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  __CFDictionary *v13;
  const void *v14;
  const __CFString *v15;
  const void *v16;
  uint64_t v17;
  CFTypeID v18;
  CFTypeID v19;
  const void **v20;
  CFTypeID TypeID;
  int Value;
  CFTypeID v24;
  int v25;
  CFTypeID v27;
  CFTypeID v28;
  CFTypeID v30;
  CFTypeID v31;
  const void *v32;
  const void **v33;
  CFTypeID v34;
  int v35;
  const void **v36;
  CFTypeID v37;
  int v38;
  const void **v39;
  CFTypeID v40;
  int v41;
  CFTypeID v42;
  const void *v43;
  const void *v44;
  CFTypeID v45;
  const void *v46;
  const void *v47;
  CFTypeID v48;
  const void *v49;
  const void *v50;
  CFTypeID v51;
  CFTypeID v52;
  CFTypeID v53;
  CFTypeID v54;
  CFTypeID v56;
  int v57;
  CFTypeID v59;
  int v60;
  const void *v61;
  __CFDictionary *v62;
  const void *v63;
  __CFDictionary *v64;
  CFTypeID v65;
  const void *v66;
  const void *v67;
  const void *v68;
  __CFDictionary *v69;
  CFTypeID v70;
  const void *v71;
  const void *v72;
  __CFDictionary *v73;
  CFTypeID v74;
  const void *v75;
  CFTypeID v77;
  int v78;
  CFTypeID v79;
  const void *v80;
  CFTypeID v81;
  const void **v82;
  CFTypeID v83;
  int v84;
  const void *v85;
  CFAllocatorRef v86;
  uint64_t v87;
  const void **v88;
  CFTypeID v89;
  int v90;
  const void **v91;
  CFTypeID v92;
  int v93;
  CFTypeID v95;
  int v96;
  int v97;
  int IOSurfaceAcceleratorCapabilityFractionalDimensions;
  CFTypeID v100;
  int v101;
  const void *v102;
  CFTypeID v103;
  CFTypeID v104;
  const void *v105;
  CGRect v106;
  CFDictionaryRef theDict;
  CGRect v108;
  CGRect v109;

  theDict = 0;
  if (*(_BYTE *)(a1 + 16))
    return FigSignalErrorAt();
  VTMetalTransferSessionCopySupportedPropertyDictionary(*(_QWORD *)(a1 + 1160), (CFTypeRef *)&theDict);
  if (CFEqual(a2, CFSTR("DestinationCleanAperture")))
  {
    v7 = *(const void **)(a1 + 152);
    if (v7)
      CFRelease(v7);
    *(_QWORD *)(a1 + 152) = a3;
    if (!a3)
      goto LABEL_23;
    goto LABEL_22;
  }
  if (CFEqual(a2, CFSTR("DestinationPixelAspectRatio")))
  {
    v8 = *(const void **)(a1 + 160);
    if (v8)
      CFRelease(v8);
    *(_QWORD *)(a1 + 160) = a3;
    if (!a3)
      goto LABEL_23;
    goto LABEL_22;
  }
  if (CFEqual(a2, CFSTR("ScalingMode")))
  {
    v9 = *(const void **)(a1 + 48);
    if (v9)
      CFRelease(v9);
    *(_QWORD *)(a1 + 48) = a3;
    if (!a3)
      goto LABEL_23;
    goto LABEL_22;
  }
  if (CFEqual(a2, CFSTR("DownsamplingMode")))
  {
    v10 = *(const void **)(a1 + 808);
    if (v10)
      CFRelease(v10);
    *(_QWORD *)(a1 + 808) = a3;
    if (!a3)
      goto LABEL_23;
LABEL_22:
    CFRetain(a3);
LABEL_23:
    v11 = 0;
LABEL_24:
    v12 = 0;
    goto LABEL_25;
  }
  if (CFEqual(a2, CFSTR("SourceCropRectangle")))
  {
    if (!a3)
    {
      v11 = 0;
      v12 = 0;
      *(_QWORD *)(a1 + 88) = 0;
      *(_QWORD *)(a1 + 96) = 0;
      *(int64x2_t *)(a1 + 72) = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
      goto LABEL_25;
    }
    v18 = CFGetTypeID(a3);
    if (v18 == CFDictionaryGetTypeID())
    {
      *(_QWORD *)(a1 + 88) = 0;
      *(_QWORD *)(a1 + 96) = 0;
      *(int64x2_t *)(a1 + 72) = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
      memset(&v106, 0, sizeof(v106));
      if (CGRectMakeWithDictionaryRepresentation((CFDictionaryRef)a3, &v106))
      {
        v106 = CGRectStandardize(v106);
        v108 = CGRectIntegral(v106);
        v11 = 0;
        v12 = 0;
        *(_QWORD *)(a1 + 88) = (uint64_t)v108.origin.x;
        *(_QWORD *)(a1 + 96) = (uint64_t)v108.origin.y;
        *(_QWORD *)(a1 + 72) = (uint64_t)v108.size.width;
        *(_QWORD *)(a1 + 80) = (uint64_t)v108.size.height;
        goto LABEL_25;
      }
    }
    goto LABEL_361;
  }
  if (CFEqual(a2, CFSTR("DestinationRectangle")))
  {
    if (!a3)
    {
      v11 = 0;
      v12 = 0;
      *(_QWORD *)(a1 + 136) = 0;
      *(_QWORD *)(a1 + 144) = 0;
      *(int64x2_t *)(a1 + 120) = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
      goto LABEL_25;
    }
    v19 = CFGetTypeID(a3);
    if (v19 == CFDictionaryGetTypeID())
    {
      *(_QWORD *)(a1 + 136) = 0;
      *(_QWORD *)(a1 + 144) = 0;
      *(int64x2_t *)(a1 + 120) = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
      memset(&v106, 0, sizeof(v106));
      if (CGRectMakeWithDictionaryRepresentation((CFDictionaryRef)a3, &v106))
      {
        v106 = CGRectStandardize(v106);
        v109 = CGRectIntegral(v106);
        v11 = 0;
        v12 = 0;
        *(_QWORD *)(a1 + 136) = (uint64_t)v109.origin.x;
        *(_QWORD *)(a1 + 144) = (uint64_t)v109.origin.y;
        *(_QWORD *)(a1 + 120) = (uint64_t)v109.size.width;
        *(_QWORD *)(a1 + 128) = (uint64_t)v109.size.height;
        goto LABEL_25;
      }
    }
    goto LABEL_361;
  }
  if (CFEqual(a2, CFSTR("EnableHardwareAcceleratedTransfer")))
  {
    if (!a3 || (const void *)*MEMORY[0x1E0C9B0D0] == a3)
    {
      if (initDefaultsCommon_onceToken != -1)
        dispatch_once_f(&initDefaultsCommon_onceToken, 0, (dispatch_function_t)vtAllowTransferCapabilityCommonOnce);
      if (sAllowHardwareTransferSession)
        v20 = (const void **)MEMORY[0x1E0C9AE50];
      else
        v20 = (const void **)MEMORY[0x1E0C9AE40];
      a3 = *v20;
    }
    TypeID = CFBooleanGetTypeID();
    if (TypeID == CFGetTypeID(a3))
    {
      Value = CFBooleanGetValue((CFBooleanRef)a3);
      if (Value == *(unsigned __int8 *)(a1 + 769))
        goto LABEL_23;
      v11 = 0;
      v12 = 0;
      *(_BYTE *)(a1 + 769) = Value;
      goto LABEL_60;
    }
LABEL_361:
    v87 = FigSignalErrorAt();
    v11 = v87;
LABEL_362:
    v12 = v87;
    goto LABEL_25;
  }
  if (CFEqual(a2, CFSTR("EnableHighSpeedTransfer")))
  {
    if ((const void *)*MEMORY[0x1E0C9B0D0] == a3 || a3 == 0)
      a3 = (const void *)*MEMORY[0x1E0C9AE40];
    v24 = CFBooleanGetTypeID();
    if (v24 != CFGetTypeID(a3))
      goto LABEL_361;
    v25 = CFBooleanGetValue((CFBooleanRef)a3);
    if (v25 == *(unsigned __int8 *)(a1 + 770))
      goto LABEL_23;
    *(_BYTE *)(a1 + 770) = v25;
    goto LABEL_84;
  }
  if (CFEqual(a2, CFSTR("DisableDither")))
  {
    if ((const void *)*MEMORY[0x1E0C9B0D0] == a3 || a3 == 0)
      a3 = (const void *)*MEMORY[0x1E0C9AE40];
    v27 = CFBooleanGetTypeID();
    if (v27 != CFGetTypeID(a3))
      goto LABEL_361;
    if (CFBooleanGetValue((CFBooleanRef)a3) == *(unsigned __int8 *)(a1 + 784))
      goto LABEL_23;
    *(_BYTE *)(a1 + 784) = CFBooleanGetValue((CFBooleanRef)a3);
    goto LABEL_84;
  }
  if (CFEqual(a2, CFSTR("UseOptimalMSRCoefficients")))
  {
    if (!a3)
      goto LABEL_361;
    v28 = CFBooleanGetTypeID();
    if (v28 != CFGetTypeID(a3))
      goto LABEL_361;
    *(_BYTE *)(a1 + 785) = CFBooleanGetValue((CFBooleanRef)a3);
LABEL_84:
    vtPixelTransferSessionUpdateTransferOptions(a1);
    goto LABEL_23;
  }
  if (CFEqual(a2, CFSTR("EnableHistogram")))
  {
    if ((const void *)*MEMORY[0x1E0C9B0D0] == a3 || a3 == 0)
      a3 = (const void *)*MEMORY[0x1E0C9AE40];
    if (!a3)
      goto LABEL_361;
    v30 = CFBooleanGetTypeID();
    if (v30 != CFGetTypeID(a3))
      goto LABEL_361;
    if (CFBooleanGetValue((CFBooleanRef)a3) == *(unsigned __int8 *)(a1 + 789))
      goto LABEL_23;
    *(_BYTE *)(a1 + 789) = CFBooleanGetValue((CFBooleanRef)a3);
    goto LABEL_84;
  }
  if (CFEqual(a2, CFSTR("HistogramRectangle")))
  {
    memset(&v106, 0, sizeof(v106));
    if (a3)
    {
      v31 = CFDictionaryGetTypeID();
      if (v31 != CFGetTypeID(a3) || !CGRectMakeWithDictionaryRepresentation((CFDictionaryRef)a3, &v106))
        goto LABEL_361;
      v32 = *(const void **)(a1 + 800);
      *(_QWORD *)(a1 + 800) = a3;
      goto LABEL_100;
    }
    v32 = *(const void **)(a1 + 800);
    *(_QWORD *)(a1 + 800) = 0;
    if (!v32)
      goto LABEL_84;
    goto LABEL_115;
  }
  if (CFEqual(a2, CFSTR("EnableGPUAcceleratedTransfer")))
  {
    if (!a3 || (const void *)*MEMORY[0x1E0C9B0D0] == a3)
    {
      if (initDefaultsCommon_onceToken != -1)
        dispatch_once_f(&initDefaultsCommon_onceToken, 0, (dispatch_function_t)vtAllowTransferCapabilityCommonOnce);
      if (sAllowMetalTransferSession)
        v33 = (const void **)MEMORY[0x1E0C9AE50];
      else
        v33 = (const void **)MEMORY[0x1E0C9AE40];
      a3 = *v33;
    }
    v34 = CFBooleanGetTypeID();
    if (v34 != CFGetTypeID(a3))
      goto LABEL_361;
    v35 = CFBooleanGetValue((CFBooleanRef)a3);
    if (v35 == *(unsigned __int8 *)(a1 + 786))
      goto LABEL_23;
    v11 = 0;
    v12 = 0;
    *(_BYTE *)(a1 + 786) = v35;
LABEL_60:
    *(_BYTE *)(a1 + 744) = 1;
    goto LABEL_25;
  }
  if (CFEqual(a2, CFSTR("EnableSoftwareTransfer")))
  {
    if (!a3 || (const void *)*MEMORY[0x1E0C9B0D0] == a3)
    {
      if (initDefaultsCommon_onceToken != -1)
        dispatch_once_f(&initDefaultsCommon_onceToken, 0, (dispatch_function_t)vtAllowTransferCapabilityCommonOnce);
      v36 = (const void **)(sAllowSoftwareTransferSession ? MEMORY[0x1E0C9AE50] : MEMORY[0x1E0C9AE40]);
      a3 = *v36;
      if (!*v36)
        goto LABEL_361;
    }
    v37 = CFBooleanGetTypeID();
    if (v37 != CFGetTypeID(a3))
      goto LABEL_361;
    v38 = CFBooleanGetValue((CFBooleanRef)a3);
    if (v38 == *(unsigned __int8 *)(a1 + 788))
      goto LABEL_23;
    v11 = 0;
    v12 = 0;
    *(_BYTE *)(a1 + 788) = v38;
    goto LABEL_60;
  }
  if (CFEqual(a2, CFSTR("SetGPUPriorityLow")))
  {
    if (!a3 || (const void *)*MEMORY[0x1E0C9B0D0] == a3)
    {
      if (initDefaultsCommon_onceToken != -1)
        dispatch_once_f(&initDefaultsCommon_onceToken, 0, (dispatch_function_t)vtAllowTransferCapabilityCommonOnce);
      if (sAllowPixelTransferChain)
        v39 = (const void **)MEMORY[0x1E0C9AE50];
      else
        v39 = (const void **)MEMORY[0x1E0C9AE40];
      a3 = *v39;
    }
    v40 = CFBooleanGetTypeID();
    if (v40 != CFGetTypeID(a3))
      goto LABEL_361;
    v41 = CFBooleanGetValue((CFBooleanRef)a3);
    if (v41 == *(unsigned __int8 *)(a1 + 787))
      goto LABEL_23;
    v11 = 0;
    v12 = 0;
    *(_BYTE *)(a1 + 787) = v41;
    goto LABEL_60;
  }
  if (CFEqual(a2, CFSTR("DestinationColorPrimaries")))
  {
    if (a3)
    {
      v42 = CFStringGetTypeID();
      if (v42 != CFGetTypeID(a3))
        goto LABEL_361;
    }
    if (*(_BYTE *)(a1 + 1188))
    {
      v43 = *(const void **)(a1 + 1080);
      if (v43)
      {
        CFRelease(v43);
        *(_QWORD *)(a1 + 1080) = 0;
      }
      v44 = *(const void **)(a1 + 1088);
      if (v44)
      {
        CFRelease(v44);
        *(_QWORD *)(a1 + 1088) = 0;
      }
      *(_BYTE *)(a1 + 1188) = 0;
    }
    v11 = *(_QWORD *)(a1 + 1080);
    *(_QWORD *)(a1 + 1080) = a3;
    if (!a3)
      goto LABEL_174;
    goto LABEL_173;
  }
  if (CFEqual(a2, CFSTR("DestinationTransferFunction")))
  {
    if (a3)
    {
      v45 = CFStringGetTypeID();
      if (v45 != CFGetTypeID(a3))
        goto LABEL_361;
    }
    if (*(_BYTE *)(a1 + 1188))
    {
      v46 = *(const void **)(a1 + 1080);
      if (v46)
      {
        CFRelease(v46);
        *(_QWORD *)(a1 + 1080) = 0;
      }
      v47 = *(const void **)(a1 + 1088);
      if (v47)
        CFRelease(v47);
      v11 = 0;
      *(_BYTE *)(a1 + 1188) = 0;
    }
    else
    {
      v11 = *(_QWORD *)(a1 + 1088);
    }
    *(_QWORD *)(a1 + 1088) = a3;
    if (!a3)
      goto LABEL_174;
    goto LABEL_173;
  }
  if (CFEqual(a2, CFSTR("DestinationICCProfile")))
  {
    if (a3)
    {
      v48 = CFDataGetTypeID();
      if (v48 != CFGetTypeID(a3))
        goto LABEL_361;
    }
    if (*(_BYTE *)(a1 + 1188))
    {
      v49 = *(const void **)(a1 + 1080);
      if (v49)
      {
        CFRelease(v49);
        *(_QWORD *)(a1 + 1080) = 0;
      }
      v50 = *(const void **)(a1 + 1088);
      if (v50)
      {
        CFRelease(v50);
        *(_QWORD *)(a1 + 1088) = 0;
      }
      *(_BYTE *)(a1 + 1188) = 0;
    }
    v11 = *(_QWORD *)(a1 + 1008);
    *(_QWORD *)(a1 + 1008) = a3;
    if (!a3)
      goto LABEL_174;
    goto LABEL_173;
  }
  if (CFEqual(a2, CFSTR("DestinationYCbCrMatrix")))
  {
    if (!a3)
    {
      v11 = *(_QWORD *)(a1 + 1072);
      *(_QWORD *)(a1 + 1072) = 0;
      if (!v11)
        goto LABEL_24;
LABEL_175:
      CFRelease((CFTypeRef)v11);
      goto LABEL_23;
    }
    v51 = CFStringGetTypeID();
    if (v51 != CFGetTypeID(a3))
      goto LABEL_361;
    v11 = *(_QWORD *)(a1 + 1072);
    *(_QWORD *)(a1 + 1072) = a3;
LABEL_173:
    CFRetain(a3);
LABEL_174:
    if (!v11)
      goto LABEL_24;
    goto LABEL_175;
  }
  if (CFEqual(a2, CFSTR("WriteBlackPixelsOutsideDestRect")))
  {
    if (a3)
    {
      v52 = CFBooleanGetTypeID();
      if (v52 == CFGetTypeID(a3))
      {
        v11 = 0;
        v12 = 0;
        *(_BYTE *)(a1 + 1136) = CFBooleanGetValue((CFBooleanRef)a3) == 0;
        goto LABEL_25;
      }
    }
    goto LABEL_361;
  }
  if (CFEqual(a2, CFSTR("RealTime")))
  {
    if (a3)
    {
      v53 = CFGetTypeID(a3);
      if (v53 != CFBooleanGetTypeID())
        goto LABEL_361;
      v32 = *(const void **)(a1 + 1128);
      *(_QWORD *)(a1 + 1128) = a3;
LABEL_100:
      CFRetain(a3);
      if (!v32)
        goto LABEL_84;
      goto LABEL_115;
    }
    v32 = *(const void **)(a1 + 1128);
    *(_QWORD *)(a1 + 1128) = 0;
    if (!v32)
      goto LABEL_84;
LABEL_115:
    CFRelease(v32);
    goto LABEL_84;
  }
  if (CFEqual(a2, CFSTR("ClientPID")))
  {
    if (a3)
    {
      v54 = CFGetTypeID(a3);
      if (v54 == CFNumberGetTypeID())
      {
        CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, (void *)(a1 + 1124));
        goto LABEL_23;
      }
    }
    goto LABEL_361;
  }
  if (CFEqual(a2, CFSTR("ForceDisableVectorInstructions")))
  {
    if ((const void *)*MEMORY[0x1E0C9B0D0] == a3 || a3 == 0)
      a3 = (const void *)*MEMORY[0x1E0C9AE40];
    v56 = CFBooleanGetTypeID();
    if (v56 != CFGetTypeID(a3))
      goto LABEL_361;
    v57 = CFBooleanGetValue((CFBooleanRef)a3);
    if (v57 == *(unsigned __int8 *)(a1 + 208))
      goto LABEL_23;
    v11 = 0;
    v12 = 0;
    *(_BYTE *)(a1 + 208) = v57;
    goto LABEL_60;
  }
  if (CFEqual(a2, CFSTR("ForceSingleThreaded")))
  {
    if ((const void *)*MEMORY[0x1E0C9B0D0] == a3 || a3 == 0)
      a3 = (const void *)*MEMORY[0x1E0C9AE40];
    v59 = CFBooleanGetTypeID();
    if (v59 != CFGetTypeID(a3))
      goto LABEL_361;
    v60 = CFBooleanGetValue((CFBooleanRef)a3);
    if (v60 == *(unsigned __int8 *)(a1 + 209))
      goto LABEL_23;
    v11 = 0;
    v12 = 0;
    *(_BYTE *)(a1 + 209) = v60;
    goto LABEL_60;
  }
  if (CFEqual(a2, CFSTR("PQEOTFOpticalScale")))
  {
    v61 = *(const void **)(a1 + 1160);
    if (v61)
      VTSessionSetProperty(v61, a2, a3);
    v62 = *(__CFDictionary **)(a1 + 1176);
    if (v62)
    {
      if (a3)
      {
        CFDictionarySetValue(v62, a2, a3);
LABEL_227:
        v65 = CFGetTypeID(a3);
        if (v65 != CFNumberGetTypeID())
          goto LABEL_361;
        if (FigCFEqual())
          goto LABEL_23;
        v66 = *(const void **)(a1 + 1192);
        *(_QWORD *)(a1 + 1192) = a3;
        goto LABEL_273;
      }
      CFDictionaryRemoveValue(v62, a2);
    }
    else if (a3)
    {
      goto LABEL_227;
    }
    v67 = *(const void **)(a1 + 1192);
    if (v67)
    {
      CFRelease(v67);
      v11 = 0;
      v12 = 0;
      a3 = 0;
      *(_QWORD *)(a1 + 1192) = 0;
      goto LABEL_60;
    }
LABEL_279:
    v11 = 0;
    v12 = 0;
    a3 = 0;
    goto LABEL_25;
  }
  if (CFEqual(a2, CFSTR("PQInvEOTFOpticalScale")))
  {
    v63 = *(const void **)(a1 + 1160);
    if (v63)
      VTSessionSetProperty(v63, a2, a3);
    v64 = *(__CFDictionary **)(a1 + 1176);
    if (v64)
    {
      if (a3)
      {
        CFDictionarySetValue(v64, a2, a3);
LABEL_240:
        v70 = CFGetTypeID(a3);
        if (v70 != CFNumberGetTypeID())
          goto LABEL_361;
        if (FigCFEqual())
          goto LABEL_23;
        v66 = *(const void **)(a1 + 1200);
        *(_QWORD *)(a1 + 1200) = a3;
        goto LABEL_273;
      }
      CFDictionaryRemoveValue(v64, a2);
    }
    else if (a3)
    {
      goto LABEL_240;
    }
    v71 = *(const void **)(a1 + 1200);
    if (v71)
    {
      CFRelease(v71);
      v11 = 0;
      v12 = 0;
      a3 = 0;
      *(_QWORD *)(a1 + 1200) = 0;
      goto LABEL_60;
    }
    goto LABEL_279;
  }
  if (CFEqual(a2, CFSTR("HLGOETFOpticalScale")))
  {
    v68 = *(const void **)(a1 + 1160);
    if (v68)
      VTSessionSetProperty(v68, a2, a3);
    v69 = *(__CFDictionary **)(a1 + 1176);
    if (v69)
    {
      if (a3)
      {
        CFDictionarySetValue(v69, a2, a3);
LABEL_253:
        v74 = CFGetTypeID(a3);
        if (v74 != CFNumberGetTypeID())
          goto LABEL_361;
        if (FigCFEqual())
          goto LABEL_23;
        v66 = *(const void **)(a1 + 1208);
        *(_QWORD *)(a1 + 1208) = a3;
        goto LABEL_273;
      }
      CFDictionaryRemoveValue(v69, a2);
    }
    else if (a3)
    {
      goto LABEL_253;
    }
    v75 = *(const void **)(a1 + 1208);
    if (v75)
    {
      CFRelease(v75);
      v11 = 0;
      v12 = 0;
      a3 = 0;
      *(_QWORD *)(a1 + 1208) = 0;
      goto LABEL_60;
    }
    goto LABEL_279;
  }
  if (CFEqual(a2, CFSTR("HLGInvOETFOpticalScale")))
  {
    v72 = *(const void **)(a1 + 1160);
    if (v72)
      VTSessionSetProperty(v72, a2, a3);
    v73 = *(__CFDictionary **)(a1 + 1176);
    if (v73)
    {
      if (a3)
      {
        CFDictionarySetValue(v73, a2, a3);
LABEL_270:
        v79 = CFGetTypeID(a3);
        if (v79 != CFNumberGetTypeID())
          goto LABEL_361;
        if (FigCFEqual())
          goto LABEL_23;
        v66 = *(const void **)(a1 + 1216);
        *(_QWORD *)(a1 + 1216) = a3;
LABEL_273:
        CFRetain(a3);
        if (v66)
          CFRelease(v66);
LABEL_275:
        v11 = 0;
        v12 = 0;
        goto LABEL_60;
      }
      CFDictionaryRemoveValue(v73, a2);
    }
    else if (a3)
    {
      goto LABEL_270;
    }
    v80 = *(const void **)(a1 + 1216);
    if (v80)
    {
      CFRelease(v80);
      v11 = 0;
      v12 = 0;
      a3 = 0;
      *(_QWORD *)(a1 + 1216) = 0;
      goto LABEL_60;
    }
    goto LABEL_279;
  }
  if (CFEqual(a2, CFSTR("AllowLowQualityScaling")))
  {
    if ((const void *)*MEMORY[0x1E0C9B0D0] == a3 || a3 == 0)
      a3 = (const void *)*MEMORY[0x1E0C9AE40];
    if (!a3)
      goto LABEL_361;
    v77 = CFBooleanGetTypeID();
    if (v77 != CFGetTypeID(a3))
      goto LABEL_361;
    v78 = CFBooleanGetValue((CFBooleanRef)a3);
    if (v78 == *(unsigned __int8 *)(a1 + 210))
      goto LABEL_23;
    v11 = 0;
    v12 = 0;
    *(_BYTE *)(a1 + 210) = v78;
    goto LABEL_60;
  }
  if (CFEqual(a2, CFSTR("vImageFlags")))
  {
    if (!a3 || (const void *)*MEMORY[0x1E0C9B0D0] == a3)
    {
      v11 = 0;
      v12 = 0;
      *(_QWORD *)(a1 + 1144) = 0;
      goto LABEL_25;
    }
    v81 = CFNumberGetTypeID();
    if (v81 == CFGetTypeID(a3))
    {
      v11 = 0;
      v12 = 0;
      *(_QWORD *)(a1 + 1144) = FigCFNumberGetUInt64();
      goto LABEL_25;
    }
    goto LABEL_361;
  }
  if (CFEqual(a2, CFSTR("AllowPixelTransferChain")))
  {
    if (!a3 || (const void *)*MEMORY[0x1E0C9B0D0] == a3)
    {
      if (initDefaultsCommon_onceToken != -1)
        dispatch_once_f(&initDefaultsCommon_onceToken, 0, (dispatch_function_t)vtAllowTransferCapabilityCommonOnce);
      if (sAllowPixelTransferChain)
        v82 = (const void **)MEMORY[0x1E0C9AE50];
      else
        v82 = (const void **)MEMORY[0x1E0C9AE40];
      a3 = *v82;
    }
    v83 = CFBooleanGetTypeID();
    if (v83 != CFGetTypeID(a3))
      goto LABEL_361;
    v84 = CFBooleanGetValue((CFBooleanRef)a3);
    v85 = *(const void **)(a1 + 32);
    if (v84)
    {
      if (v85)
        goto LABEL_23;
      v86 = CFGetAllocator((CFTypeRef)a1);
      v87 = VTPixelTransferChainCreate((uint64_t)v86, (uint64_t *)(a1 + 32));
      v11 = v87;
      *(_BYTE *)(a1 + 744) = 1;
      goto LABEL_362;
    }
    if (!v85)
      goto LABEL_23;
    CFRelease(v85);
    v11 = 0;
    v12 = 0;
    *(_QWORD *)(a1 + 32) = 0;
    goto LABEL_60;
  }
  if (CFEqual(a2, CFSTR("AllowPixelTransferGraph")))
  {
    if (!a3 || (const void *)*MEMORY[0x1E0C9B0D0] == a3)
    {
      if (initDefaultsCommon_onceToken != -1)
        dispatch_once_f(&initDefaultsCommon_onceToken, 0, (dispatch_function_t)vtAllowTransferCapabilityCommonOnce);
      if (sAllowPixelTransferGraph)
        v88 = (const void **)MEMORY[0x1E0C9AE50];
      else
        v88 = (const void **)MEMORY[0x1E0C9AE40];
      a3 = *v88;
    }
    v89 = CFBooleanGetTypeID();
    if (v89 != CFGetTypeID(a3))
      goto LABEL_361;
    v90 = CFBooleanGetValue((CFBooleanRef)a3);
    if (v90 == *(unsigned __int8 *)(a1 + 40))
      goto LABEL_23;
    v11 = 0;
    v12 = 0;
    *(_BYTE *)(a1 + 40) = v90;
    goto LABEL_60;
  }
  if (CFEqual(a2, CFSTR("AllowFallbacks")))
  {
    if (!a3 || (const void *)*MEMORY[0x1E0C9B0D0] == a3)
    {
      if (initDefaultsCommon_onceToken != -1)
        dispatch_once_f(&initDefaultsCommon_onceToken, 0, (dispatch_function_t)vtAllowTransferCapabilityCommonOnce);
      if (sAllowPixelTransferFallbacks)
        v91 = (const void **)MEMORY[0x1E0C9AE50];
      else
        v91 = (const void **)MEMORY[0x1E0C9AE40];
      a3 = *v91;
    }
    v92 = CFBooleanGetTypeID();
    if (v92 != CFGetTypeID(a3))
      goto LABEL_361;
    v93 = CFBooleanGetValue((CFBooleanRef)a3);
    if (v93 == *(unsigned __int8 *)(a1 + 41))
      goto LABEL_23;
    v11 = 0;
    v12 = 0;
    *(_BYTE *)(a1 + 41) = v93;
    goto LABEL_60;
  }
  if (CFEqual(a2, CFSTR("ReducedPrecisionFractionalOffsets")))
  {
    if ((const void *)*MEMORY[0x1E0C9B0D0] == a3 || a3 == 0)
      a3 = (const void *)*MEMORY[0x1E0C9AE40];
    if (!a3)
      goto LABEL_361;
    v95 = CFGetTypeID(a3);
    if (v95 != CFBooleanGetTypeID())
      goto LABEL_361;
    v96 = CFBooleanGetValue((CFBooleanRef)a3);
    if (v96 == *(unsigned __int8 *)(a1 + 1187))
      goto LABEL_23;
    v97 = v96;
    IOSurfaceAcceleratorCapabilityFractionalDimensions = FigGetIOSurfaceAcceleratorCapabilityFractionalDimensions();
    if (v97 && !IOSurfaceAcceleratorCapabilityFractionalDimensions)
    {
      v11 = 4294954394;
      v12 = 4294954394;
      goto LABEL_25;
    }
    *(_BYTE *)(a1 + 1187) = v97;
    vtPixelTransferSessionUpdateTransferOptions(a1);
    goto LABEL_275;
  }
  if (CFEqual(a2, CFSTR("Convert10BitHDRToSDRFor8BitDestinationWithUnspecifiedColorProperties")))
  {
    if ((const void *)*MEMORY[0x1E0C9B0D0] == a3 || a3 == 0)
      a3 = (const void *)*MEMORY[0x1E0C9AE40];
    v100 = CFBooleanGetTypeID();
    if (v100 != CFGetTypeID(a3))
      goto LABEL_361;
    v101 = CFBooleanGetValue((CFBooleanRef)a3);
    if (v101 == *(unsigned __int8 *)(a1 + 1120))
      goto LABEL_23;
    v11 = 0;
    v12 = 0;
    *(_BYTE *)(a1 + 1120) = v101;
    goto LABEL_60;
  }
  if (CFEqual(a2, CFSTR("RequireDeviceRegistryID")))
  {
    if (a3 && !FigCFEqual())
    {
      v103 = CFGetTypeID(a3);
      if (v103 != CFNumberGetTypeID())
        goto LABEL_361;
      if (FigCFNumberGetUInt64())
      {
        v11 = 0;
        v12 = 0;
        *(_BYTE *)(a1 + 1185) = 1;
        goto LABEL_25;
      }
    }
    v11 = 0;
    v12 = 0;
    *(_BYTE *)(a1 + 1185) = 0;
    goto LABEL_25;
  }
  if (CFEqual(a2, CFSTR("Label")))
  {
    if (a3 && !FigCFEqual())
    {
      v104 = CFGetTypeID(a3);
      if (v104 != CFStringGetTypeID())
      {
        v17 = FigSignalErrorAt();
        goto LABEL_33;
      }
      v105 = *(const void **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = a3;
      CFRetain(a3);
      if (v105)
        CFRelease(v105);
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 1176), a2, a3);
      v14 = *(const void **)(a1 + 1160);
      if (v14)
        goto LABEL_31;
    }
    else
    {
      v102 = *(const void **)(a1 + 24);
      if (v102)
      {
        CFRelease(v102);
        *(_QWORD *)(a1 + 24) = 0;
      }
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 1176), a2);
      v14 = *(const void **)(a1 + 1160);
      if (v14)
      {
        v15 = a2;
        v16 = 0;
        goto LABEL_32;
      }
    }
    v11 = 0;
LABEL_34:
    if (theDict)
      CFRelease(theDict);
    return v11;
  }
  v12 = 0;
  v11 = 4294954396;
LABEL_25:
  if (theDict)
  {
    if (!CFDictionaryContainsKey(theDict, a2))
      goto LABEL_34;
    v13 = *(__CFDictionary **)(a1 + 1176);
    if (a3)
      CFDictionarySetValue(v13, a2, a3);
    else
      CFDictionaryRemoveValue(v13, a2);
    v14 = *(const void **)(a1 + 1160);
    v11 = v12;
    if (!v14)
      goto LABEL_34;
LABEL_31:
    v15 = a2;
    v16 = a3;
LABEL_32:
    v17 = VTSessionSetProperty(v14, v15, v16);
LABEL_33:
    v11 = v17;
    goto LABEL_34;
  }
  return v11;
}

uint64_t VTPixelTransferSessionCopyProperty(uint64_t a1, CFTypeRef cf1, uint64_t a3, CFDictionaryRef *a4)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v10;

  if (!a1)
    return _VTPixelTransferSessionCopyProperty(0, cf1, a3, a4);
  if (FigAtomicIncrement32() != 1)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v10 = _VTPixelTransferSessionCopyProperty(a1, cf1, a3, a4);
  FigAtomicDecrement32();
  return v10;
}

uint64_t _VTPixelTransferSessionCopyProperty(uint64_t a1, CFTypeRef cf1, uint64_t a3, CFDictionaryRef *a4)
{
  uint64_t result;
  uint64_t UInt64;
  CFDictionaryRef DictionaryRepresentation;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  uint64_t *v17;
  BOOL v18;
  int IOSurfaceAcceleratorCapabilityFractionalDimensions;
  uint64_t v20;
  const __CFData *v21;
  const void *v22;
  CGRect v23;

  *a4 = 0;
  if (*(_BYTE *)(a1 + 16))
    return FigSignalErrorAt();
  if (CFEqual(cf1, CFSTR("DestinationCleanAperture")))
  {
    result = *(_QWORD *)(a1 + 152);
    if (!result)
      return result;
    goto LABEL_14;
  }
  if (CFEqual(cf1, CFSTR("DestinationPixelAspectRatio")))
  {
    result = *(_QWORD *)(a1 + 160);
    if (!result)
      return result;
    goto LABEL_14;
  }
  if (CFEqual(cf1, CFSTR("ScalingMode")))
  {
    result = *(_QWORD *)(a1 + 48);
    if (!result)
      return result;
    goto LABEL_14;
  }
  if (CFEqual(cf1, CFSTR("DownsamplingMode")))
  {
    result = *(_QWORD *)(a1 + 808);
    if (result)
    {
LABEL_14:
      UInt64 = (uint64_t)CFRetain((CFTypeRef)result);
LABEL_15:
      DictionaryRepresentation = (CFDictionaryRef)UInt64;
LABEL_16:
      result = 0;
      *a4 = DictionaryRepresentation;
      return result;
    }
LABEL_26:
    DictionaryRepresentation = 0;
    goto LABEL_16;
  }
  if (CFEqual(cf1, CFSTR("SourceCropRectangle")))
  {
    v11 = *(_QWORD *)(a1 + 88);
    v12 = *(_QWORD *)(a1 + 96);
    v14 = *(_QWORD *)(a1 + 72);
    v13 = *(_QWORD *)(a1 + 80);
    if (v11)
    {
LABEL_27:
      v23.origin.x = (double)v11;
      v23.origin.y = (double)v12;
      v23.size.width = (double)v14;
      v23.size.height = (double)v13;
      DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v23);
      if (DictionaryRepresentation)
        goto LABEL_16;
      result = FigSignalErrorAt();
      if (!(_DWORD)result)
        goto LABEL_26;
      return result;
    }
LABEL_23:
    if (!v12 && v14 == 0x7FFFFFFFFFFFFFFFLL && v13 == 0x7FFFFFFFFFFFFFFFLL)
      goto LABEL_26;
    goto LABEL_27;
  }
  if (CFEqual(cf1, CFSTR("DestinationRectangle")))
  {
    v11 = *(_QWORD *)(a1 + 136);
    v12 = *(_QWORD *)(a1 + 144);
    v14 = *(_QWORD *)(a1 + 120);
    v13 = *(_QWORD *)(a1 + 128);
    if (v11)
      goto LABEL_27;
    goto LABEL_23;
  }
  if (CFEqual(cf1, CFSTR("EnableHardwareAcceleratedTransfer")))
  {
    v15 = (uint64_t *)MEMORY[0x1E0C9AE50];
    v16 = *(unsigned __int8 *)(a1 + 769);
LABEL_46:
    v17 = (uint64_t *)MEMORY[0x1E0C9AE40];
LABEL_47:
    v18 = v16 == 0;
    goto LABEL_48;
  }
  if (CFEqual(cf1, CFSTR("EnableHighSpeedTransfer")))
  {
    v15 = (uint64_t *)MEMORY[0x1E0C9AE50];
    v16 = *(unsigned __int8 *)(a1 + 770);
    goto LABEL_46;
  }
  if (CFEqual(cf1, CFSTR("DisableDither")))
  {
    v15 = (uint64_t *)MEMORY[0x1E0C9AE50];
    v16 = *(unsigned __int8 *)(a1 + 784);
    goto LABEL_46;
  }
  if (CFEqual(cf1, CFSTR("UseOptimalMSRCoefficients")))
  {
    v15 = (uint64_t *)MEMORY[0x1E0C9AE50];
    v16 = *(unsigned __int8 *)(a1 + 785);
    goto LABEL_46;
  }
  if (CFEqual(cf1, CFSTR("EnableHistogram")))
  {
    v15 = (uint64_t *)MEMORY[0x1E0C9AE50];
    v16 = *(unsigned __int8 *)(a1 + 789);
    goto LABEL_46;
  }
  if (CFEqual(cf1, CFSTR("EnableGPUAcceleratedTransfer")))
  {
    v15 = (uint64_t *)MEMORY[0x1E0C9AE50];
    v16 = *(unsigned __int8 *)(a1 + 786);
    goto LABEL_46;
  }
  if (CFEqual(cf1, CFSTR("EnableSoftwareTransfer")))
  {
    v15 = (uint64_t *)MEMORY[0x1E0C9AE50];
    v16 = *(unsigned __int8 *)(a1 + 788);
    goto LABEL_46;
  }
  if (CFEqual(cf1, CFSTR("SetGPUPriorityLow")))
  {
    v15 = (uint64_t *)MEMORY[0x1E0C9AE50];
    v16 = *(unsigned __int8 *)(a1 + 787);
    goto LABEL_46;
  }
  if (CFEqual(cf1, CFSTR("DestinationColorPrimaries")))
  {
    result = *(_QWORD *)(a1 + 1080);
    if (result)
      goto LABEL_14;
    goto LABEL_26;
  }
  if (CFEqual(cf1, CFSTR("DestinationTransferFunction")))
  {
    result = *(_QWORD *)(a1 + 1088);
    if (result)
      goto LABEL_14;
    goto LABEL_26;
  }
  if (CFEqual(cf1, CFSTR("DestinationICCProfile")))
  {
    result = *(_QWORD *)(a1 + 1008);
    if (result)
      goto LABEL_14;
    goto LABEL_26;
  }
  if (CFEqual(cf1, CFSTR("DestinationYCbCrMatrix")))
  {
    result = *(_QWORD *)(a1 + 1072);
    if (result)
      goto LABEL_14;
    goto LABEL_26;
  }
  if (CFEqual(cf1, CFSTR("WriteBlackPixelsOutsideDestRect")))
  {
    v15 = (uint64_t *)MEMORY[0x1E0C9AE40];
    v16 = *(unsigned __int8 *)(a1 + 1136);
    v17 = (uint64_t *)MEMORY[0x1E0C9AE50];
    goto LABEL_47;
  }
  if (CFEqual(cf1, CFSTR("RealTime")))
  {
    result = *(_QWORD *)(a1 + 1128);
    if (result)
      goto LABEL_14;
    goto LABEL_26;
  }
  if (CFEqual(cf1, CFSTR("ForceDisableVectorInstructions")))
  {
    v15 = (uint64_t *)MEMORY[0x1E0C9AE50];
    v16 = *(unsigned __int8 *)(a1 + 208);
    goto LABEL_46;
  }
  if (CFEqual(cf1, CFSTR("ForceSingleThreaded")))
  {
    v15 = (uint64_t *)MEMORY[0x1E0C9AE50];
    v16 = *(unsigned __int8 *)(a1 + 209);
    goto LABEL_46;
  }
  if (CFEqual(cf1, CFSTR("PQEOTFOpticalScale")))
  {
    result = *(_QWORD *)(a1 + 1192);
    if (result)
      goto LABEL_14;
    goto LABEL_26;
  }
  if (CFEqual(cf1, CFSTR("PQInvEOTFOpticalScale")))
  {
    result = *(_QWORD *)(a1 + 1200);
    if (result)
      goto LABEL_14;
    goto LABEL_26;
  }
  if (CFEqual(cf1, CFSTR("HLGOETFOpticalScale")))
  {
    result = *(_QWORD *)(a1 + 1208);
    if (result)
      goto LABEL_14;
    goto LABEL_26;
  }
  if (CFEqual(cf1, CFSTR("HLGInvOETFOpticalScale")))
  {
    result = *(_QWORD *)(a1 + 1216);
    if (result)
      goto LABEL_14;
    goto LABEL_26;
  }
  if (CFEqual(cf1, CFSTR("AllowLowQualityScaling")))
  {
    v15 = (uint64_t *)MEMORY[0x1E0C9AE50];
    v16 = *(unsigned __int8 *)(a1 + 210);
    goto LABEL_46;
  }
  if (CFEqual(cf1, CFSTR("vImageFlags")))
  {
    if (*(_QWORD *)(a1 + 1144))
    {
      UInt64 = FigCFNumberCreateUInt64();
      goto LABEL_15;
    }
    goto LABEL_110;
  }
  if (CFEqual(cf1, CFSTR("AllowPixelTransferChain")))
  {
    v15 = (uint64_t *)MEMORY[0x1E0C9AE50];
    v17 = (uint64_t *)MEMORY[0x1E0C9AE40];
    v18 = *(_QWORD *)(a1 + 32) == 0;
LABEL_48:
    if (v18)
      v15 = v17;
LABEL_50:
    result = *v15;
    goto LABEL_14;
  }
  if (CFEqual(cf1, CFSTR("AllowPixelTransferGraph")))
  {
    v15 = (uint64_t *)MEMORY[0x1E0C9AE50];
    v16 = *(unsigned __int8 *)(a1 + 40);
    goto LABEL_46;
  }
  if (CFEqual(cf1, CFSTR("AllowFallbacks")))
  {
    v15 = (uint64_t *)MEMORY[0x1E0C9AE50];
    v16 = *(unsigned __int8 *)(a1 + 41);
    goto LABEL_46;
  }
  if (CFEqual(cf1, CFSTR("ReducedPrecisionFractionalOffsets")))
  {
    v15 = (uint64_t *)MEMORY[0x1E0C9AE50];
    v16 = *(unsigned __int8 *)(a1 + 1187);
    goto LABEL_46;
  }
  if (CFEqual(cf1, CFSTR("HardwareSupportsFractionalDimensions")))
  {
    IOSurfaceAcceleratorCapabilityFractionalDimensions = FigGetIOSurfaceAcceleratorCapabilityFractionalDimensions();
    v15 = (uint64_t *)MEMORY[0x1E0C9AE50];
    if (!IOSurfaceAcceleratorCapabilityFractionalDimensions)
      v15 = (uint64_t *)MEMORY[0x1E0C9AE40];
    goto LABEL_50;
  }
  if (CFEqual(cf1, CFSTR("HistogramData")))
  {
    v20 = *(_QWORD *)(a1 + 32);
    if (v20)
    {
      VTPixelTransferChainCopyFirstNodeProperty(v20, (uint64_t)CFSTR("HistogramData"), a3, (uint64_t)a4);
      return 0;
    }
    v21 = *(const __CFData **)(a1 + 792);
    if (v21 && CFDataGetLength(v21))
    {
      result = *(_QWORD *)(a1 + 792);
      if (result)
        goto LABEL_14;
      goto LABEL_26;
    }
LABEL_110:
    result = 0;
    *a4 = 0;
    return result;
  }
  if (CFEqual(cf1, CFSTR("Convert10BitHDRToSDRFor8BitDestinationWithUnspecifiedColorProperties")))
  {
    v15 = (uint64_t *)MEMORY[0x1E0C9AE50];
    v16 = *(unsigned __int8 *)(a1 + 1120);
    goto LABEL_46;
  }
  if (CFEqual(cf1, CFSTR("HistogramRectangle")))
  {
    result = *(_QWORD *)(a1 + 800);
    if (result)
      goto LABEL_14;
    goto LABEL_26;
  }
  if (CFEqual(cf1, CFSTR("Label")))
  {
    result = *(_QWORD *)(a1 + 24);
    if (result)
      goto LABEL_14;
    goto LABEL_26;
  }
  v22 = *(const void **)(a1 + 1160);
  if (v22)
    return VTMetalTransferSessionCopyProperty(v22, cf1, *MEMORY[0x1E0C9AE00], a4);
  else
    return 4294954396;
}

uint64_t VTPixelTransferSessionSetProperties(uint64_t a1, CFDictionaryRef theDict)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a1;
  if (*(_BYTE *)(a1 + 16))
    return FigSignalErrorAt();
  if (!theDict)
    return 0;
  v4 = 0;
  CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)vtPixelTransferSessionSetOneProperty, &v3);
  return v4;
}

uint64_t vtPixelTransferSessionSetOneProperty(const __CFString *a1, const void *a2, uint64_t a3)
{
  uint64_t result;

  result = _VTPixelTransferSessionSetProperty(*(_QWORD *)a3, a1, a2);
  if (!*(_DWORD *)(a3 + 8))
    *(_DWORD *)(a3 + 8) = result;
  return result;
}

uint64_t VTPixelTransferSessionCopySerializableProperties()
{
  return FigSignalErrorAt();
}

uint64_t VTPixelTransferSessionGetDynamicServiceList()
{
  return gVTPixelTransferServiceList;
}

uint64_t VTRegisterPixelTransferCapabilityMxN(const void *a1, uint64_t a2, unsigned int *a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned int *v9;
  uint64_t v13;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t __n;

  if (!a1)
    return FigSignalErrorAt();
  v9 = a3;
  if (!a3)
    return FigSignalErrorAt();
  if (!a7)
    return FigSignalErrorAt();
  if (!a8)
    return FigSignalErrorAt();
  if (!a9)
    return FigSignalErrorAt();
  if (a2 >= 10001)
    return FigSignalErrorAt();
  v13 = a4;
  if (a4 >= 10001)
    return FigSignalErrorAt();
  __n = 4 * a2;
  v18 = malloc_type_calloc(1uLL, 4 * a2 + 8 * a4 + 80, 0x5C5F66C0uLL);
  if (!v18)
    return FigSignalErrorAt();
  v19 = (uint64_t)v18;
  v24 = a6;
  v20 = v18 + 10;
  *v18 = a2;
  v18[1] = v18 + 10;
  memcpy(v18 + 10, a1, __n);
  *(_QWORD *)(v19 + 16) = v13;
  *(_QWORD *)(v19 + 24) = (char *)v20 + __n;
  if (v13 >= 1)
  {
    v21 = 0;
    do
    {
      v22 = *(_QWORD *)(v19 + 24);
      *(_DWORD *)(v22 + v21) = *v9;
      v23 = *v9++;
      getPixelFormatCharacteristics(v23, (_BYTE *)(v22 + v21 + 4), (_BYTE *)(v22 + v21 + 5));
      v21 += 8;
      --v13;
    }
    while (v13);
  }
  *(_DWORD *)(v19 + 32) = a5;
  *(_QWORD *)(v19 + 40) = v24;
  *(_QWORD *)(v19 + 48) = a7;
  *(_QWORD *)(v19 + 56) = a8;
  *(_QWORD *)(v19 + 64) = a9;
  *(_QWORD *)(v19 + 72) = gVTPixelTransferServiceList;
  gVTPixelTransferServiceList = v19;
  return 0;
}

uint64_t vt_Copy_NonPlanar8(uint64_t a1, unint64_t a2, uint64_t *a3, const void **a4, uint64_t *a5, void **a6)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  size_t v11;

  v6 = a2;
  v7 = *a3;
  v8 = (char *)*a4;
  v9 = *a5;
  v10 = (char *)*a6;
  v11 = a1 & 0x1FFFFFFFFFFFFFFFLL;
  if (a2 >= 2 && v7 == v9)
  {
    memcpy(*a6, *a4, v11 + v7 * (a2 - 1));
  }
  else if (a2)
  {
    do
    {
      memcpy(v10, v8, v11);
      v8 += v7;
      v10 += v9;
      --v6;
    }
    while (v6);
  }
  return 0;
}

uint64_t vt_Copy_NonPlanar8_Crop(uint64_t a1, uint64_t a2, uint64_t *a3, const void **a4, uint64_t *a5, void **a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  char *v10;
  char *v11;

  if (a2)
  {
    v6 = a2;
    v7 = *a3;
    v8 = *a5;
    v9 = a1 & 0x1FFFFFFFFFFFFFFFLL;
    v10 = (char *)*a6;
    v11 = (char *)*a4;
    do
    {
      memcpy(v10, v11, v9);
      v11 += v7;
      v10 += v8;
      --v6;
    }
    while (v6);
  }
  return 0;
}

uint64_t vt_Copy_NonPlanar16(uint64_t a1, unint64_t a2, uint64_t *a3, const void **a4, uint64_t *a5, void **a6)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  size_t v11;

  v6 = a2;
  v7 = *a3;
  v8 = (char *)*a4;
  v9 = *a5;
  v10 = (char *)*a6;
  v11 = 2 * (a1 & 0xFFFFFFFFFFFFFFFLL);
  if (a2 >= 2 && v7 == v9)
  {
    memcpy(*a6, *a4, v11 + v7 * (a2 - 1));
  }
  else if (a2)
  {
    do
    {
      memcpy(v10, v8, v11);
      v8 += v7;
      v10 += v9;
      --v6;
    }
    while (v6);
  }
  return 0;
}

uint64_t vt_Copy_NonPlanar16_Crop(uint64_t a1, uint64_t a2, uint64_t *a3, const void **a4, uint64_t *a5, void **a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  char *v10;
  char *v11;

  if (a2)
  {
    v6 = a2;
    v7 = *a3;
    v8 = *a5;
    v9 = 2 * (a1 & 0xFFFFFFFFFFFFFFFLL);
    v10 = (char *)*a6;
    v11 = (char *)*a4;
    do
    {
      memcpy(v10, v11, v9);
      v11 += v7;
      v10 += v8;
      --v6;
    }
    while (v6);
  }
  return 0;
}

uint64_t vt_Copy_NonPlanar32(uint64_t a1, unint64_t a2, uint64_t *a3, const void **a4, uint64_t *a5, void **a6)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  size_t v11;

  v6 = a2;
  v7 = *a3;
  v8 = (char *)*a4;
  v9 = *a5;
  v10 = (char *)*a6;
  v11 = 4 * (a1 & 0x7FFFFFFFFFFFFFFLL);
  if (a2 >= 2 && v7 == v9)
  {
    memcpy(*a6, *a4, v11 + v7 * (a2 - 1));
  }
  else if (a2)
  {
    do
    {
      memcpy(v10, v8, v11);
      v8 += v7;
      v10 += v9;
      --v6;
    }
    while (v6);
  }
  return 0;
}

uint64_t vt_Copy_NonPlanar32_Crop(uint64_t a1, uint64_t a2, uint64_t *a3, const void **a4, uint64_t *a5, void **a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  char *v10;
  char *v11;

  if (a2)
  {
    v6 = a2;
    v7 = *a3;
    v8 = *a5;
    v9 = 4 * (a1 & 0x7FFFFFFFFFFFFFFLL);
    v10 = (char *)*a6;
    v11 = (char *)*a4;
    do
    {
      memcpy(v10, v11, v9);
      v11 += v7;
      v10 += v8;
      --v6;
    }
    while (v6);
  }
  return 0;
}

uint64_t vt_Copy_NonPlanar64(uint64_t a1, unint64_t a2, uint64_t *a3, const void **a4, uint64_t *a5, void **a6)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  size_t v11;

  v6 = a2;
  v7 = *a3;
  v8 = (char *)*a4;
  v9 = *a5;
  v10 = (char *)*a6;
  v11 = 8 * (a1 & 0x3FFFFFFFFFFFFFFLL);
  if (a2 >= 2 && v7 == v9)
  {
    memcpy(*a6, *a4, v11 + v7 * (a2 - 1));
  }
  else if (a2)
  {
    do
    {
      memcpy(v10, v8, v11);
      v8 += v7;
      v10 += v9;
      --v6;
    }
    while (v6);
  }
  return 0;
}

uint64_t vt_Copy_NonPlanar64_Crop(uint64_t a1, uint64_t a2, uint64_t *a3, const void **a4, uint64_t *a5, void **a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  char *v10;
  char *v11;

  if (a2)
  {
    v6 = a2;
    v7 = *a3;
    v8 = *a5;
    v9 = 8 * (a1 & 0x3FFFFFFFFFFFFFFLL);
    v10 = (char *)*a6;
    v11 = (char *)*a4;
    do
    {
      memcpy(v10, v11, v9);
      v11 += v7;
      v10 += v8;
      --v6;
    }
    while (v6);
  }
  return 0;
}

uint64_t vt_Copy_NonPlanar128(uint64_t a1, unint64_t a2, uint64_t *a3, const void **a4, uint64_t *a5, void **a6)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  size_t v11;

  v6 = a2;
  v7 = *a3;
  v8 = (char *)*a4;
  v9 = *a5;
  v10 = (char *)*a6;
  v11 = 16 * (a1 & 0x1FFFFFFFFFFFFFFLL);
  if (a2 >= 2 && v7 == v9)
  {
    memcpy(*a6, *a4, v11 + v7 * (a2 - 1));
  }
  else if (a2)
  {
    do
    {
      memcpy(v10, v8, v11);
      v8 += v7;
      v10 += v9;
      --v6;
    }
    while (v6);
  }
  return 0;
}

uint64_t vt_Copy_NonPlanar128_Crop(uint64_t a1, uint64_t a2, uint64_t *a3, const void **a4, uint64_t *a5, void **a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  char *v10;
  char *v11;

  if (a2)
  {
    v6 = a2;
    v7 = *a3;
    v8 = *a5;
    v9 = 16 * (a1 & 0x1FFFFFFFFFFFFFFLL);
    v10 = (char *)*a6;
    v11 = (char *)*a4;
    do
    {
      memcpy(v10, v11, v9);
      v11 += v7;
      v10 += v8;
      --v6;
    }
    while (v6);
  }
  return 0;
}

uint64_t vt_Copy_v210(uint64_t a1, unint64_t a2, uint64_t *a3, const void **a4, uint64_t *a5, void **a6)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  size_t v11;

  v6 = a2;
  v7 = *a3;
  v8 = (char *)*a4;
  v9 = *a5;
  v10 = (char *)*a6;
  v11 = (4 * (((unint64_t)(a1 + 5) * (unsigned __int128)0xAAAAAAAAAAAAAAABLL) >> 64)) & 0x1FFFFFFFFFFFFFF0;
  if (a2 >= 2 && v7 == v9)
  {
    memcpy(*a6, *a4, v11 + v7 * (a2 - 1));
  }
  else if (a2)
  {
    do
    {
      memcpy(v10, v8, v11);
      v8 += v7;
      v10 += v9;
      --v6;
    }
    while (v6);
  }
  return 0;
}

uint64_t vt_Copy_v210_Crop(uint64_t a1, uint64_t a2, uint64_t *a3, const void **a4, uint64_t *a5, void **a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  char *v10;
  char *v11;

  if (a2)
  {
    v6 = a2;
    v7 = *a3;
    v8 = *a5;
    v9 = (4 * (((unint64_t)(a1 + 5) * (unsigned __int128)0xAAAAAAAAAAAAAAABLL) >> 64)) & 0x1FFFFFFFFFFFFFF0;
    v10 = (char *)*a6;
    v11 = (char *)*a4;
    do
    {
      memcpy(v10, v11, v9);
      v11 += v7;
      v10 += v8;
      --v6;
    }
    while (v6);
  }
  return 0;
}

uint64_t vt_Copy_y420(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  unint64_t v15;
  _QWORD v19[3];
  _QWORD v20[4];

  v9 = 0;
  v20[3] = *MEMORY[0x1E0C80C00];
  v20[0] = a1;
  v20[1] = a1 >> 1;
  v20[2] = a1 >> 1;
  v19[0] = a2;
  v19[1] = a2 >> 1;
  v19[2] = a2 >> 1;
  do
  {
    v10 = *(_QWORD *)(a3 + 8 * v9);
    v11 = *(char **)(a4 + 8 * v9);
    v12 = *(_QWORD *)(a5 + 8 * v9);
    v13 = *(char **)(a6 + 8 * v9);
    v14 = v20[v9] & 0x1FFFFFFFFFFFFFFFLL;
    v15 = v19[v9];
    if (v10 == v12 && v15 >= 2)
    {
      memcpy(*(void **)(a6 + 8 * v9), *(const void **)(a4 + 8 * v9), v14 + (v15 - 1) * v10);
    }
    else
    {
      for (; v15; --v15)
      {
        memcpy(v13, v11, v14);
        v11 += v10;
        v13 += v12;
      }
    }
    ++v9;
  }
  while (v9 != 3);
  return 0;
}

uint64_t vt_Copy_y420_Crop(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  char *v14;
  char *v15;
  _QWORD v18[3];
  _QWORD v19[4];

  v9 = 0;
  v19[3] = *MEMORY[0x1E0C80C00];
  v19[0] = a1;
  v19[1] = a1 >> 1;
  v19[2] = a1 >> 1;
  v18[0] = a2;
  v18[1] = a2 >> 1;
  v18[2] = a2 >> 1;
  do
  {
    v10 = v18[v9];
    if (v10)
    {
      v11 = *(_QWORD *)(a3 + 8 * v9);
      v12 = *(_QWORD *)(a5 + 8 * v9);
      v13 = v19[v9] & 0x1FFFFFFFFFFFFFFFLL;
      v14 = *(char **)(a6 + 8 * v9);
      v15 = *(char **)(a4 + 8 * v9);
      do
      {
        memcpy(v14, v15, v13);
        v15 += v11;
        v14 += v12;
        --v10;
      }
      while (v10);
    }
    ++v9;
  }
  while (v9 != 3);
  return 0;
}

uint64_t vt_Copy_420v(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  char v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char v15;
  size_t v16;
  unint64_t v17;
  _QWORD v21[2];
  _QWORD v22[3];

  v9 = 0;
  v22[2] = *MEMORY[0x1E0C80C00];
  v22[0] = a1;
  v22[1] = a1;
  v21[0] = a2;
  v21[1] = a2 >> 1;
  v10 = 1;
  do
  {
    v11 = *(_QWORD *)(a3 + 8 * v9);
    v12 = *(char **)(a4 + 8 * v9);
    v13 = *(_QWORD *)(a5 + 8 * v9);
    v14 = *(char **)(a6 + 8 * v9);
    v15 = v10;
    v16 = v22[v9] & 0x1FFFFFFFFFFFFFFFLL;
    v17 = v21[v9];
    if (v11 == v13 && v17 >= 2)
    {
      memcpy(v14, v12, v16 + (v17 - 1) * v11);
    }
    else
    {
      for (; v17; --v17)
      {
        memcpy(v14, v12, v16);
        v12 += v11;
        v14 += v13;
      }
    }
    v10 = 0;
    v9 = 1;
  }
  while ((v15 & 1) != 0);
  return 0;
}

uint64_t vt_Copy_420v_Crop(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  char *v16;
  char *v17;
  _QWORD v20[2];
  _QWORD v21[3];

  v9 = 0;
  v21[2] = *MEMORY[0x1E0C80C00];
  v21[0] = a1;
  v21[1] = a1;
  v20[0] = a2;
  v20[1] = a2 >> 1;
  v10 = 1;
  do
  {
    v11 = v10;
    v12 = v20[v9];
    if (v12)
    {
      v13 = *(_QWORD *)(a3 + 8 * v9);
      v14 = *(_QWORD *)(a5 + 8 * v9);
      v15 = v21[v9] & 0x1FFFFFFFFFFFFFFFLL;
      v16 = *(char **)(a6 + 8 * v9);
      v17 = *(char **)(a4 + 8 * v9);
      do
      {
        memcpy(v16, v17, v15);
        v17 += v13;
        v16 += v14;
        --v12;
      }
      while (v12);
    }
    v10 = 0;
    v9 = 1;
  }
  while ((v11 & 1) != 0);
  return 0;
}

uint64_t vt_Copy_v0a8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  unint64_t v15;
  _QWORD v19[3];
  _QWORD v20[4];

  v9 = 0;
  v20[3] = *MEMORY[0x1E0C80C00];
  v20[0] = a1;
  v20[1] = a1;
  v20[2] = a1;
  v19[0] = a2;
  v19[1] = a2 >> 1;
  v19[2] = a2;
  do
  {
    v10 = *(_QWORD *)(a3 + 8 * v9);
    v11 = *(char **)(a4 + 8 * v9);
    v12 = *(_QWORD *)(a5 + 8 * v9);
    v13 = *(char **)(a6 + 8 * v9);
    v14 = v20[v9] & 0x1FFFFFFFFFFFFFFFLL;
    v15 = v19[v9];
    if (v10 == v12 && v15 >= 2)
    {
      memcpy(*(void **)(a6 + 8 * v9), *(const void **)(a4 + 8 * v9), v14 + (v15 - 1) * v10);
    }
    else
    {
      for (; v15; --v15)
      {
        memcpy(v13, v11, v14);
        v11 += v10;
        v13 += v12;
      }
    }
    ++v9;
  }
  while (v9 != 3);
  return 0;
}

uint64_t vt_Copy_v0a8_Crop(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  char *v14;
  char *v15;
  _QWORD v18[3];
  _QWORD v19[4];

  v9 = 0;
  v19[3] = *MEMORY[0x1E0C80C00];
  v19[0] = a1;
  v19[1] = a1;
  v19[2] = a1;
  v18[0] = a2;
  v18[1] = a2 >> 1;
  v18[2] = a2;
  do
  {
    v10 = v18[v9];
    if (v10)
    {
      v11 = *(_QWORD *)(a3 + 8 * v9);
      v12 = *(_QWORD *)(a5 + 8 * v9);
      v13 = v19[v9] & 0x1FFFFFFFFFFFFFFFLL;
      v14 = *(char **)(a6 + 8 * v9);
      v15 = *(char **)(a4 + 8 * v9);
      do
      {
        memcpy(v14, v15, v13);
        v15 += v11;
        v14 += v12;
        --v10;
      }
      while (v10);
    }
    ++v9;
  }
  while (v9 != 3);
  return 0;
}

uint64_t vt_Copy_422v(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  char v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char v15;
  size_t v16;
  unint64_t v17;
  _QWORD v21[2];
  _QWORD v22[3];

  v9 = 0;
  v22[2] = *MEMORY[0x1E0C80C00];
  v22[0] = a1;
  v22[1] = a1;
  v21[0] = a2;
  v21[1] = a2;
  v10 = 1;
  do
  {
    v11 = *(_QWORD *)(a3 + 8 * v9);
    v12 = *(char **)(a4 + 8 * v9);
    v13 = *(_QWORD *)(a5 + 8 * v9);
    v14 = *(char **)(a6 + 8 * v9);
    v15 = v10;
    v16 = v22[v9] & 0x1FFFFFFFFFFFFFFFLL;
    v17 = v21[v9];
    if (v11 == v13 && v17 >= 2)
    {
      memcpy(v14, v12, v16 + (v17 - 1) * v11);
    }
    else
    {
      for (; v17; --v17)
      {
        memcpy(v14, v12, v16);
        v12 += v11;
        v14 += v13;
      }
    }
    v10 = 0;
    v9 = 1;
  }
  while ((v15 & 1) != 0);
  return 0;
}

uint64_t vt_Copy_422v_Crop(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  char *v16;
  char *v17;
  _QWORD v20[2];
  _QWORD v21[3];

  v9 = 0;
  v21[2] = *MEMORY[0x1E0C80C00];
  v21[0] = a1;
  v21[1] = a1;
  v20[0] = a2;
  v20[1] = a2;
  v10 = 1;
  do
  {
    v11 = v10;
    v12 = v20[v9];
    if (v12)
    {
      v13 = *(_QWORD *)(a3 + 8 * v9);
      v14 = *(_QWORD *)(a5 + 8 * v9);
      v15 = v21[v9] & 0x1FFFFFFFFFFFFFFFLL;
      v16 = *(char **)(a6 + 8 * v9);
      v17 = *(char **)(a4 + 8 * v9);
      do
      {
        memcpy(v16, v17, v15);
        v17 += v13;
        v16 += v14;
        --v12;
      }
      while (v12);
    }
    v10 = 0;
    v9 = 1;
  }
  while ((v11 & 1) != 0);
  return 0;
}

uint64_t vt_Copy_v2a8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  unint64_t v15;
  _QWORD v19[3];
  _QWORD v20[4];

  v9 = 0;
  v20[3] = *MEMORY[0x1E0C80C00];
  v20[0] = a1;
  v20[1] = a1;
  v20[2] = a1;
  v19[0] = a2;
  v19[1] = a2;
  v19[2] = a2;
  do
  {
    v10 = *(_QWORD *)(a3 + 8 * v9);
    v11 = *(char **)(a4 + 8 * v9);
    v12 = *(_QWORD *)(a5 + 8 * v9);
    v13 = *(char **)(a6 + 8 * v9);
    v14 = v20[v9] & 0x1FFFFFFFFFFFFFFFLL;
    v15 = v19[v9];
    if (v10 == v12 && v15 >= 2)
    {
      memcpy(*(void **)(a6 + 8 * v9), *(const void **)(a4 + 8 * v9), v14 + (v15 - 1) * v10);
    }
    else
    {
      for (; v15; --v15)
      {
        memcpy(v13, v11, v14);
        v11 += v10;
        v13 += v12;
      }
    }
    ++v9;
  }
  while (v9 != 3);
  return 0;
}

uint64_t vt_Copy_v2a8_Crop(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  char *v14;
  char *v15;
  _QWORD v18[3];
  _QWORD v19[4];

  v9 = 0;
  v19[3] = *MEMORY[0x1E0C80C00];
  v19[0] = a1;
  v19[1] = a1;
  v19[2] = a1;
  v18[0] = a2;
  v18[1] = a2;
  v18[2] = a2;
  do
  {
    v10 = v18[v9];
    if (v10)
    {
      v11 = *(_QWORD *)(a3 + 8 * v9);
      v12 = *(_QWORD *)(a5 + 8 * v9);
      v13 = v19[v9] & 0x1FFFFFFFFFFFFFFFLL;
      v14 = *(char **)(a6 + 8 * v9);
      v15 = *(char **)(a4 + 8 * v9);
      do
      {
        memcpy(v14, v15, v13);
        v15 += v11;
        v14 += v12;
        --v10;
      }
      while (v10);
    }
    ++v9;
  }
  while (v9 != 3);
  return 0;
}

uint64_t vt_Copy_444v(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  char v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char v15;
  size_t v16;
  unint64_t v17;
  _QWORD v21[2];
  _QWORD v22[3];

  v9 = 0;
  v22[2] = *MEMORY[0x1E0C80C00];
  v22[0] = a1;
  v22[1] = 2 * a1;
  v21[0] = a2;
  v21[1] = a2;
  v10 = 1;
  do
  {
    v11 = *(_QWORD *)(a3 + 8 * v9);
    v12 = *(char **)(a4 + 8 * v9);
    v13 = *(_QWORD *)(a5 + 8 * v9);
    v14 = *(char **)(a6 + 8 * v9);
    v15 = v10;
    v16 = v22[v9] & 0x1FFFFFFFFFFFFFFFLL;
    v17 = v21[v9];
    if (v11 == v13 && v17 >= 2)
    {
      memcpy(v14, v12, v16 + (v17 - 1) * v11);
    }
    else
    {
      for (; v17; --v17)
      {
        memcpy(v14, v12, v16);
        v12 += v11;
        v14 += v13;
      }
    }
    v10 = 0;
    v9 = 1;
  }
  while ((v15 & 1) != 0);
  return 0;
}

uint64_t vt_Copy_444v_Crop(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  char *v16;
  char *v17;
  _QWORD v20[2];
  _QWORD v21[3];

  v9 = 0;
  v21[2] = *MEMORY[0x1E0C80C00];
  v21[0] = a1;
  v21[1] = 2 * a1;
  v20[0] = a2;
  v20[1] = a2;
  v10 = 1;
  do
  {
    v11 = v10;
    v12 = v20[v9];
    if (v12)
    {
      v13 = *(_QWORD *)(a3 + 8 * v9);
      v14 = *(_QWORD *)(a5 + 8 * v9);
      v15 = v21[v9] & 0x1FFFFFFFFFFFFFFFLL;
      v16 = *(char **)(a6 + 8 * v9);
      v17 = *(char **)(a4 + 8 * v9);
      do
      {
        memcpy(v16, v17, v15);
        v17 += v13;
        v16 += v14;
        --v12;
      }
      while (v12);
    }
    v10 = 0;
    v9 = 1;
  }
  while ((v11 & 1) != 0);
  return 0;
}

uint64_t vt_Copy_v4a8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  unint64_t v15;
  _QWORD v19[3];
  _QWORD v20[4];

  v9 = 0;
  v20[3] = *MEMORY[0x1E0C80C00];
  v20[0] = a1;
  v20[1] = 2 * a1;
  v20[2] = a1;
  v19[0] = a2;
  v19[1] = a2;
  v19[2] = a2;
  do
  {
    v10 = *(_QWORD *)(a3 + 8 * v9);
    v11 = *(char **)(a4 + 8 * v9);
    v12 = *(_QWORD *)(a5 + 8 * v9);
    v13 = *(char **)(a6 + 8 * v9);
    v14 = v20[v9] & 0x1FFFFFFFFFFFFFFFLL;
    v15 = v19[v9];
    if (v10 == v12 && v15 >= 2)
    {
      memcpy(*(void **)(a6 + 8 * v9), *(const void **)(a4 + 8 * v9), v14 + (v15 - 1) * v10);
    }
    else
    {
      for (; v15; --v15)
      {
        memcpy(v13, v11, v14);
        v11 += v10;
        v13 += v12;
      }
    }
    ++v9;
  }
  while (v9 != 3);
  return 0;
}

uint64_t vt_Copy_v4a8_Crop(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  char *v14;
  char *v15;
  _QWORD v18[3];
  _QWORD v19[4];

  v9 = 0;
  v19[3] = *MEMORY[0x1E0C80C00];
  v19[0] = a1;
  v19[1] = 2 * a1;
  v19[2] = a1;
  v18[0] = a2;
  v18[1] = a2;
  v18[2] = a2;
  do
  {
    v10 = v18[v9];
    if (v10)
    {
      v11 = *(_QWORD *)(a3 + 8 * v9);
      v12 = *(_QWORD *)(a5 + 8 * v9);
      v13 = v19[v9] & 0x1FFFFFFFFFFFFFFFLL;
      v14 = *(char **)(a6 + 8 * v9);
      v15 = *(char **)(a4 + 8 * v9);
      do
      {
        memcpy(v14, v15, v13);
        v15 += v11;
        v14 += v12;
        --v10;
      }
      while (v10);
    }
    ++v9;
  }
  while (v9 != 3);
  return 0;
}

uint64_t vt_Copy_x420(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  char v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char v15;
  size_t v16;
  unint64_t v17;
  _QWORD v21[2];
  _QWORD v22[3];

  v9 = 0;
  v22[2] = *MEMORY[0x1E0C80C00];
  v22[0] = a1;
  v22[1] = a1;
  v21[0] = a2;
  v21[1] = a2 >> 1;
  v10 = 1;
  do
  {
    v11 = *(_QWORD *)(a3 + 8 * v9);
    v12 = *(char **)(a4 + 8 * v9);
    v13 = *(_QWORD *)(a5 + 8 * v9);
    v14 = *(char **)(a6 + 8 * v9);
    v15 = v10;
    v16 = 2 * (v22[v9] & 0xFFFFFFFFFFFFFFFLL);
    v17 = v21[v9];
    if (v11 == v13 && v17 >= 2)
    {
      memcpy(v14, v12, v16 + (v17 - 1) * v11);
    }
    else
    {
      for (; v17; --v17)
      {
        memcpy(v14, v12, v16);
        v12 += v11;
        v14 += v13;
      }
    }
    v10 = 0;
    v9 = 1;
  }
  while ((v15 & 1) != 0);
  return 0;
}

uint64_t vt_Copy_x420_Crop(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  char *v16;
  char *v17;
  _QWORD v20[2];
  _QWORD v21[3];

  v9 = 0;
  v21[2] = *MEMORY[0x1E0C80C00];
  v21[0] = a1;
  v21[1] = a1;
  v20[0] = a2;
  v20[1] = a2 >> 1;
  v10 = 1;
  do
  {
    v11 = v10;
    v12 = v20[v9];
    if (v12)
    {
      v13 = *(_QWORD *)(a3 + 8 * v9);
      v14 = *(_QWORD *)(a5 + 8 * v9);
      v15 = 2 * (v21[v9] & 0xFFFFFFFFFFFFFFFLL);
      v16 = *(char **)(a6 + 8 * v9);
      v17 = *(char **)(a4 + 8 * v9);
      do
      {
        memcpy(v16, v17, v15);
        v17 += v13;
        v16 += v14;
        --v12;
      }
      while (v12);
    }
    v10 = 0;
    v9 = 1;
  }
  while ((v11 & 1) != 0);
  return 0;
}

uint64_t vt_Copy_x422(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  char v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char v15;
  size_t v16;
  unint64_t v17;
  _QWORD v21[2];
  _QWORD v22[3];

  v9 = 0;
  v22[2] = *MEMORY[0x1E0C80C00];
  v22[0] = a1;
  v22[1] = a1;
  v21[0] = a2;
  v21[1] = a2;
  v10 = 1;
  do
  {
    v11 = *(_QWORD *)(a3 + 8 * v9);
    v12 = *(char **)(a4 + 8 * v9);
    v13 = *(_QWORD *)(a5 + 8 * v9);
    v14 = *(char **)(a6 + 8 * v9);
    v15 = v10;
    v16 = 2 * (v22[v9] & 0xFFFFFFFFFFFFFFFLL);
    v17 = v21[v9];
    if (v11 == v13 && v17 >= 2)
    {
      memcpy(v14, v12, v16 + (v17 - 1) * v11);
    }
    else
    {
      for (; v17; --v17)
      {
        memcpy(v14, v12, v16);
        v12 += v11;
        v14 += v13;
      }
    }
    v10 = 0;
    v9 = 1;
  }
  while ((v15 & 1) != 0);
  return 0;
}

uint64_t vt_Copy_x422_Crop(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  char *v16;
  char *v17;
  _QWORD v20[2];
  _QWORD v21[3];

  v9 = 0;
  v21[2] = *MEMORY[0x1E0C80C00];
  v21[0] = a1;
  v21[1] = a1;
  v20[0] = a2;
  v20[1] = a2;
  v10 = 1;
  do
  {
    v11 = v10;
    v12 = v20[v9];
    if (v12)
    {
      v13 = *(_QWORD *)(a3 + 8 * v9);
      v14 = *(_QWORD *)(a5 + 8 * v9);
      v15 = 2 * (v21[v9] & 0xFFFFFFFFFFFFFFFLL);
      v16 = *(char **)(a6 + 8 * v9);
      v17 = *(char **)(a4 + 8 * v9);
      do
      {
        memcpy(v16, v17, v15);
        v17 += v13;
        v16 += v14;
        --v12;
      }
      while (v12);
    }
    v10 = 0;
    v9 = 1;
  }
  while ((v11 & 1) != 0);
  return 0;
}

uint64_t vt_Copy_x2as(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  unint64_t v15;
  _QWORD v19[3];
  _QWORD v20[4];

  v9 = 0;
  v20[3] = *MEMORY[0x1E0C80C00];
  v20[0] = a1;
  v20[1] = a1;
  v20[2] = a1;
  v19[0] = a2;
  v19[1] = a2;
  v19[2] = a2;
  do
  {
    v10 = *(_QWORD *)(a3 + 8 * v9);
    v11 = *(char **)(a4 + 8 * v9);
    v12 = *(_QWORD *)(a5 + 8 * v9);
    v13 = *(char **)(a6 + 8 * v9);
    v14 = 2 * (v20[v9] & 0xFFFFFFFFFFFFFFFLL);
    v15 = v19[v9];
    if (v10 == v12 && v15 >= 2)
    {
      memcpy(*(void **)(a6 + 8 * v9), *(const void **)(a4 + 8 * v9), v14 + (v15 - 1) * v10);
    }
    else
    {
      for (; v15; --v15)
      {
        memcpy(v13, v11, v14);
        v11 += v10;
        v13 += v12;
      }
    }
    ++v9;
  }
  while (v9 != 3);
  return 0;
}

uint64_t vt_Copy_x2as_Crop(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  char *v14;
  char *v15;
  _QWORD v18[3];
  _QWORD v19[4];

  v9 = 0;
  v19[3] = *MEMORY[0x1E0C80C00];
  v19[0] = a1;
  v19[1] = a1;
  v19[2] = a1;
  v18[0] = a2;
  v18[1] = a2;
  v18[2] = a2;
  do
  {
    v10 = v18[v9];
    if (v10)
    {
      v11 = *(_QWORD *)(a3 + 8 * v9);
      v12 = *(_QWORD *)(a5 + 8 * v9);
      v13 = 2 * (v19[v9] & 0xFFFFFFFFFFFFFFFLL);
      v14 = *(char **)(a6 + 8 * v9);
      v15 = *(char **)(a4 + 8 * v9);
      do
      {
        memcpy(v14, v15, v13);
        v15 += v11;
        v14 += v12;
        --v10;
      }
      while (v10);
    }
    ++v9;
  }
  while (v9 != 3);
  return 0;
}

uint64_t vt_Copy_x444(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  char v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char v15;
  size_t v16;
  unint64_t v17;
  _QWORD v21[2];
  _QWORD v22[3];

  v9 = 0;
  v22[2] = *MEMORY[0x1E0C80C00];
  v22[0] = a1;
  v22[1] = 2 * a1;
  v21[0] = a2;
  v21[1] = a2;
  v10 = 1;
  do
  {
    v11 = *(_QWORD *)(a3 + 8 * v9);
    v12 = *(char **)(a4 + 8 * v9);
    v13 = *(_QWORD *)(a5 + 8 * v9);
    v14 = *(char **)(a6 + 8 * v9);
    v15 = v10;
    v16 = 2 * (v22[v9] & 0xFFFFFFFFFFFFFFFLL);
    v17 = v21[v9];
    if (v11 == v13 && v17 >= 2)
    {
      memcpy(v14, v12, v16 + (v17 - 1) * v11);
    }
    else
    {
      for (; v17; --v17)
      {
        memcpy(v14, v12, v16);
        v12 += v11;
        v14 += v13;
      }
    }
    v10 = 0;
    v9 = 1;
  }
  while ((v15 & 1) != 0);
  return 0;
}

uint64_t vt_Copy_x444_Crop(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  char *v16;
  char *v17;
  _QWORD v20[2];
  _QWORD v21[3];

  v9 = 0;
  v21[2] = *MEMORY[0x1E0C80C00];
  v21[0] = a1;
  v21[1] = 2 * a1;
  v20[0] = a2;
  v20[1] = a2;
  v10 = 1;
  do
  {
    v11 = v10;
    v12 = v20[v9];
    if (v12)
    {
      v13 = *(_QWORD *)(a3 + 8 * v9);
      v14 = *(_QWORD *)(a5 + 8 * v9);
      v15 = 2 * (v21[v9] & 0xFFFFFFFFFFFFFFFLL);
      v16 = *(char **)(a6 + 8 * v9);
      v17 = *(char **)(a4 + 8 * v9);
      do
      {
        memcpy(v16, v17, v15);
        v17 += v13;
        v16 += v14;
        --v12;
      }
      while (v12);
    }
    v10 = 0;
    v9 = 1;
  }
  while ((v11 & 1) != 0);
  return 0;
}

uint64_t vt_Copy_x4as(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  unint64_t v15;
  _QWORD v19[3];
  _QWORD v20[4];

  v9 = 0;
  v20[3] = *MEMORY[0x1E0C80C00];
  v20[0] = a1;
  v20[1] = 2 * a1;
  v20[2] = a1;
  v19[0] = a2;
  v19[1] = a2;
  v19[2] = a2;
  do
  {
    v10 = *(_QWORD *)(a3 + 8 * v9);
    v11 = *(char **)(a4 + 8 * v9);
    v12 = *(_QWORD *)(a5 + 8 * v9);
    v13 = *(char **)(a6 + 8 * v9);
    v14 = 2 * (v20[v9] & 0xFFFFFFFFFFFFFFFLL);
    v15 = v19[v9];
    if (v10 == v12 && v15 >= 2)
    {
      memcpy(*(void **)(a6 + 8 * v9), *(const void **)(a4 + 8 * v9), v14 + (v15 - 1) * v10);
    }
    else
    {
      for (; v15; --v15)
      {
        memcpy(v13, v11, v14);
        v11 += v10;
        v13 += v12;
      }
    }
    ++v9;
  }
  while (v9 != 3);
  return 0;
}

uint64_t vt_Copy_x4as_Crop(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  char *v14;
  char *v15;
  _QWORD v18[3];
  _QWORD v19[4];

  v9 = 0;
  v19[3] = *MEMORY[0x1E0C80C00];
  v19[0] = a1;
  v19[1] = 2 * a1;
  v19[2] = a1;
  v18[0] = a2;
  v18[1] = a2;
  v18[2] = a2;
  do
  {
    v10 = v18[v9];
    if (v10)
    {
      v11 = *(_QWORD *)(a3 + 8 * v9);
      v12 = *(_QWORD *)(a5 + 8 * v9);
      v13 = 2 * (v19[v9] & 0xFFFFFFFFFFFFFFFLL);
      v14 = *(char **)(a6 + 8 * v9);
      v15 = *(char **)(a4 + 8 * v9);
      do
      {
        memcpy(v14, v15, v13);
        v15 += v11;
        v14 += v12;
        --v10;
      }
      while (v10);
    }
    ++v9;
  }
  while (v9 != 3);
  return 0;
}

uint64_t vt_Copy_b3a8_b3a8_Crop(uint64_t a1, uint64_t a2, uint64_t *a3, char **a4, uint64_t *a5, char **a6)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  char *v19;
  char *v20;

  if (a2)
  {
    v8 = a2;
    v10 = *a3;
    v11 = *a5;
    v12 = 4 * (a1 & 0x7FFFFFFFFFFFFFFLL);
    v13 = *a6;
    v14 = a2;
    v15 = *a4;
    do
    {
      memcpy(v13, v15, v12);
      v15 += v10;
      v13 += v11;
      --v14;
    }
    while (v14);
    v16 = a3[1];
    v17 = a5[1];
    v18 = a1 & 0x1FFFFFFFFFFFFFFFLL;
    v19 = a6[1];
    v20 = a4[1];
    do
    {
      memcpy(v19, v20, v18);
      v20 += v16;
      v19 += v17;
      --v8;
    }
    while (v8);
  }
  return 0;
}

vImage_Error vt_Scale_L008(__CVBuffer *a1, int8x16_t *a2, __CVBuffer *a3, int8x16_t *a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10)
{
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  size_t v19;
  void *v20;
  vImage_Error v21;
  vImage_Error v22;
  vImage_Buffer *p_src;
  const vImage_Buffer *v24;
  vImage_Buffer v26;
  vImage_Buffer src;
  _QWORD v28[4];
  vImage_Buffer dest;
  _QWORD v30[4];
  vImage_Buffer v31;

  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(a3, 0);
  v16 = a2[2].i64[1];
  v17 = a2[2].i64[0] + CVPixelBufferGetBytesPerRow(a1) * v16;
  src.data = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0) + v17;
  *(int8x16_t *)&src.height = vextq_s8(a2[1], a2[1], 8uLL);
  src.rowBytes = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  v18 = a4[2].i64[1];
  v19 = a4[2].i64[0] + CVPixelBufferGetBytesPerRow(a3) * v18;
  v26.data = (char *)CVPixelBufferGetBaseAddressOfPlane(a3, 0) + v19;
  *(int8x16_t *)&v26.height = vextq_s8(a4[1], a4[1], 8uLL);
  v26.rowBytes = CVPixelBufferGetBytesPerRowOfPlane(a3, 0);
  v20 = *(void **)(a5 + 256);
  if (!v20)
  {
    v21 = vImageScale_Planar8(&src, &v26, 0, a10 | 0x88u);
    if (!v21)
    {
      v22 = 0;
      goto LABEL_9;
    }
    v20 = malloc_type_malloc(v21, 0x2C6173B6uLL);
    *(_QWORD *)(a5 + 256) = v20;
    if (!v20)
    {
      v22 = 4294954392;
      goto LABEL_9;
    }
  }
  if (!a6)
  {
    p_src = &src;
    v24 = &v26;
    goto LABEL_8;
  }
  v30[2] = src.width;
  v30[3] = 2 * src.rowBytes;
  v31.width = src.width;
  v31.rowBytes = 2 * src.rowBytes;
  v31.data = src.data;
  v31.height = (src.height + 1) >> 1;
  v30[0] = (char *)src.data + src.rowBytes;
  v30[1] = src.height >> 1;
  v28[2] = v26.width;
  v28[3] = 2 * v26.rowBytes;
  dest.width = v26.width;
  dest.rowBytes = 2 * v26.rowBytes;
  dest.data = v26.data;
  dest.height = (v26.height + 1) >> 1;
  v28[0] = (char *)v26.data + v26.rowBytes;
  v28[1] = v26.height >> 1;
  v22 = vImageScale_Planar8(&v31, &dest, v20, a10 | 8u);
  if (!(_DWORD)v22)
  {
    v20 = *(void **)(a5 + 256);
    p_src = (vImage_Buffer *)v30;
    v24 = (const vImage_Buffer *)v28;
LABEL_8:
    v22 = vImageScale_Planar8(p_src, v24, v20, a10 | 8u);
  }
LABEL_9:
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  CVPixelBufferUnlockBaseAddress(a3, 0);
  return v22;
}

size_t vtScale(_QWORD *a1, _QWORD *a2, void **a3, uint64_t a4, uint64_t (*a5)(_QWORD *, _QWORD *, void *, uint64_t), int a6)
{
  void *v12;
  size_t result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[4];
  _QWORD v28[2];
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[4];

  v12 = *a3;
  if (!v12)
  {
    result = a5(a1, a2, 0, a4 | 0x80);
    if (!result)
      return result;
    v12 = malloc_type_malloc(result, 0x2C6173B6uLL);
    *a3 = v12;
    if (!v12)
      return 4294954392;
  }
  if (a6)
  {
    v14 = a1[3];
    v15 = *a1;
    v16 = a1[1];
    v17 = *a1 + v14;
    v29 = a1[2];
    v30 = 2 * v14;
    v31[2] = v29;
    v31[3] = 2 * v14;
    v31[0] = v15;
    v31[1] = (v16 + 1) >> 1;
    v28[0] = v17;
    v28[1] = v16 >> 1;
    v18 = a2[3];
    v19 = *a2;
    v20 = a2[1];
    v21 = *a2 + v18;
    v25 = a2[2];
    v26 = 2 * v18;
    v27[2] = v25;
    v27[3] = 2 * v18;
    v27[0] = v19;
    v27[1] = (v20 + 1) >> 1;
    v24[0] = v21;
    v24[1] = v20 >> 1;
    result = a5(v31, v27, v12, a4);
    if ((_DWORD)result)
      return result;
    v12 = *a3;
    v22 = v28;
    v23 = v24;
  }
  else
  {
    v22 = a1;
    v23 = a2;
  }
  return a5(v22, v23, v12, a4);
}

vImage_Error vt_Scale_L016(__CVBuffer *a1, int8x16_t *a2, __CVBuffer *a3, int8x16_t *a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10)
{
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  size_t v19;
  void *v20;
  vImage_Error v21;
  vImage_Error v22;
  vImage_Buffer *p_src;
  const vImage_Buffer *v24;
  vImage_Buffer v26;
  vImage_Buffer src;
  _QWORD v28[4];
  vImage_Buffer dest;
  _QWORD v30[4];
  vImage_Buffer v31;

  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(a3, 0);
  v16 = a2[2].i64[1];
  v17 = CVPixelBufferGetBytesPerRow(a1) * v16 + 2 * a2[2].i64[0];
  src.data = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0) + v17;
  *(int8x16_t *)&src.height = vextq_s8(a2[1], a2[1], 8uLL);
  src.rowBytes = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  v18 = a4[2].i64[1];
  v19 = CVPixelBufferGetBytesPerRow(a3) * v18 + 2 * a4[2].i64[0];
  v26.data = (char *)CVPixelBufferGetBaseAddressOfPlane(a3, 0) + v19;
  *(int8x16_t *)&v26.height = vextq_s8(a4[1], a4[1], 8uLL);
  v26.rowBytes = CVPixelBufferGetBytesPerRowOfPlane(a3, 0);
  v20 = *(void **)(a5 + 256);
  if (!v20)
  {
    v21 = vImageScale_Planar16U(&src, &v26, 0, a10 | 0x88u);
    if (!v21)
    {
      v22 = 0;
      goto LABEL_9;
    }
    v20 = malloc_type_malloc(v21, 0x2C6173B6uLL);
    *(_QWORD *)(a5 + 256) = v20;
    if (!v20)
    {
      v22 = 4294954392;
      goto LABEL_9;
    }
  }
  if (!a6)
  {
    p_src = &src;
    v24 = &v26;
    goto LABEL_8;
  }
  v30[2] = src.width;
  v30[3] = 2 * src.rowBytes;
  v31.width = src.width;
  v31.rowBytes = 2 * src.rowBytes;
  v31.data = src.data;
  v31.height = (src.height + 1) >> 1;
  v30[0] = (char *)src.data + src.rowBytes;
  v30[1] = src.height >> 1;
  v28[2] = v26.width;
  v28[3] = 2 * v26.rowBytes;
  dest.width = v26.width;
  dest.rowBytes = 2 * v26.rowBytes;
  dest.data = v26.data;
  dest.height = (v26.height + 1) >> 1;
  v28[0] = (char *)v26.data + v26.rowBytes;
  v28[1] = v26.height >> 1;
  v22 = vImageScale_Planar16U(&v31, &dest, v20, a10 | 8u);
  if (!(_DWORD)v22)
  {
    v20 = *(void **)(a5 + 256);
    p_src = (vImage_Buffer *)v30;
    v24 = (const vImage_Buffer *)v28;
LABEL_8:
    v22 = vImageScale_Planar16U(p_src, v24, v20, a10 | 8u);
  }
LABEL_9:
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  CVPixelBufferUnlockBaseAddress(a3, 0);
  return v22;
}

vImage_Error vt_Scale_L00h(__CVBuffer *a1, int8x16_t *a2, __CVBuffer *a3, int8x16_t *a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10)
{
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  size_t v19;
  void *v20;
  vImage_Error v21;
  vImage_Error v22;
  vImage_Buffer *p_src;
  const vImage_Buffer *v24;
  vImage_Buffer v26;
  vImage_Buffer src;
  _QWORD v28[4];
  vImage_Buffer dest;
  _QWORD v30[4];
  vImage_Buffer v31;

  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(a3, 0);
  v16 = a2[2].i64[1];
  v17 = CVPixelBufferGetBytesPerRowOfPlane(a1, 0) * v16 + 2 * a2[2].i64[0];
  src.data = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0) + v17;
  *(int8x16_t *)&src.height = vextq_s8(a2[1], a2[1], 8uLL);
  src.rowBytes = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  v18 = a4[2].i64[1];
  v19 = CVPixelBufferGetBytesPerRowOfPlane(a3, 0) * v18 + 2 * a4[2].i64[0];
  v26.data = (char *)CVPixelBufferGetBaseAddressOfPlane(a3, 0) + v19;
  *(int8x16_t *)&v26.height = vextq_s8(a4[1], a4[1], 8uLL);
  v26.rowBytes = CVPixelBufferGetBytesPerRowOfPlane(a3, 0);
  v20 = *(void **)(a5 + 256);
  if (!v20)
  {
    v21 = vImageScale_Planar16F(&src, &v26, 0, a10 | 0x88u);
    if (!v21)
    {
      v22 = 0;
      goto LABEL_9;
    }
    v20 = malloc_type_malloc(v21, 0x2C6173B6uLL);
    *(_QWORD *)(a5 + 256) = v20;
    if (!v20)
    {
      v22 = 4294954392;
      goto LABEL_9;
    }
  }
  if (!a6)
  {
    p_src = &src;
    v24 = &v26;
    goto LABEL_8;
  }
  v30[2] = src.width;
  v30[3] = 2 * src.rowBytes;
  v31.width = src.width;
  v31.rowBytes = 2 * src.rowBytes;
  v31.data = src.data;
  v31.height = (src.height + 1) >> 1;
  v30[0] = (char *)src.data + src.rowBytes;
  v30[1] = src.height >> 1;
  v28[2] = v26.width;
  v28[3] = 2 * v26.rowBytes;
  dest.width = v26.width;
  dest.rowBytes = 2 * v26.rowBytes;
  dest.data = v26.data;
  dest.height = (v26.height + 1) >> 1;
  v28[0] = (char *)v26.data + v26.rowBytes;
  v28[1] = v26.height >> 1;
  v22 = vImageScale_Planar16F(&v31, &dest, v20, a10 | 8u);
  if (!(_DWORD)v22)
  {
    v20 = *(void **)(a5 + 256);
    p_src = (vImage_Buffer *)v30;
    v24 = (const vImage_Buffer *)v28;
LABEL_8:
    v22 = vImageScale_Planar16F(p_src, v24, v20, a10 | 8u);
  }
LABEL_9:
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  CVPixelBufferUnlockBaseAddress(a3, 0);
  return v22;
}

vImage_Error vt_Scale_L00f(__CVBuffer *a1, int8x16_t *a2, __CVBuffer *a3, int8x16_t *a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10)
{
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  size_t v19;
  void *v20;
  vImage_Error v21;
  vImage_Error v22;
  vImage_Buffer *p_src;
  const vImage_Buffer *v24;
  vImage_Buffer v26;
  vImage_Buffer src;
  _QWORD v28[4];
  vImage_Buffer dest;
  _QWORD v30[4];
  vImage_Buffer v31;

  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(a3, 0);
  v16 = a2[2].i64[1];
  v17 = CVPixelBufferGetBytesPerRow(a1) * v16 + 2 * a2[2].i64[0];
  src.data = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0) + v17;
  *(int8x16_t *)&src.height = vextq_s8(a2[1], a2[1], 8uLL);
  src.rowBytes = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  v18 = a4[2].i64[1];
  v19 = CVPixelBufferGetBytesPerRow(a3) * v18 + 2 * a4[2].i64[0];
  v26.data = (char *)CVPixelBufferGetBaseAddressOfPlane(a3, 0) + v19;
  *(int8x16_t *)&v26.height = vextq_s8(a4[1], a4[1], 8uLL);
  v26.rowBytes = CVPixelBufferGetBytesPerRowOfPlane(a3, 0);
  v20 = *(void **)(a5 + 256);
  if (!v20)
  {
    v21 = vImageScale_PlanarF(&src, &v26, 0, a10 | 0x88u);
    if (!v21)
    {
      v22 = 0;
      goto LABEL_9;
    }
    v20 = malloc_type_malloc(v21, 0x2C6173B6uLL);
    *(_QWORD *)(a5 + 256) = v20;
    if (!v20)
    {
      v22 = 4294954392;
      goto LABEL_9;
    }
  }
  if (!a6)
  {
    p_src = &src;
    v24 = &v26;
    goto LABEL_8;
  }
  v30[2] = src.width;
  v30[3] = 2 * src.rowBytes;
  v31.width = src.width;
  v31.rowBytes = 2 * src.rowBytes;
  v31.data = src.data;
  v31.height = (src.height + 1) >> 1;
  v30[0] = (char *)src.data + src.rowBytes;
  v30[1] = src.height >> 1;
  v28[2] = v26.width;
  v28[3] = 2 * v26.rowBytes;
  dest.width = v26.width;
  dest.rowBytes = 2 * v26.rowBytes;
  dest.data = v26.data;
  dest.height = (v26.height + 1) >> 1;
  v28[0] = (char *)v26.data + v26.rowBytes;
  v28[1] = v26.height >> 1;
  v22 = vImageScale_PlanarF(&v31, &dest, v20, a10 | 8u);
  if (!(_DWORD)v22)
  {
    v20 = *(void **)(a5 + 256);
    p_src = (vImage_Buffer *)v30;
    v24 = (const vImage_Buffer *)v28;
LABEL_8:
    v22 = vImageScale_PlanarF(p_src, v24, v20, a10 | 8u);
  }
LABEL_9:
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  CVPixelBufferUnlockBaseAddress(a3, 0);
  return v22;
}

vImage_Error vt_Scale_8ARGB_Together(__CVBuffer *a1, int8x16_t *a2, __CVBuffer *a3, int8x16_t *a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10)
{
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  size_t v19;
  void *v20;
  vImage_Error v21;
  vImage_Error v22;
  vImage_Buffer *p_src;
  const vImage_Buffer *v24;
  vImage_Buffer v26;
  vImage_Buffer src;
  _QWORD v28[4];
  vImage_Buffer dest;
  _QWORD v30[4];
  vImage_Buffer v31;

  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(a3, 0);
  v16 = a2[2].i64[1];
  v17 = CVPixelBufferGetBytesPerRow(a1) * v16 + 4 * a2[2].i64[0];
  src.data = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0) + v17;
  *(int8x16_t *)&src.height = vextq_s8(a2[1], a2[1], 8uLL);
  src.rowBytes = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  v18 = a4[2].i64[1];
  v19 = CVPixelBufferGetBytesPerRow(a3) * v18 + 4 * a4[2].i64[0];
  v26.data = (char *)CVPixelBufferGetBaseAddressOfPlane(a3, 0) + v19;
  *(int8x16_t *)&v26.height = vextq_s8(a4[1], a4[1], 8uLL);
  v26.rowBytes = CVPixelBufferGetBytesPerRowOfPlane(a3, 0);
  v20 = *(void **)(a5 + 256);
  if (!v20)
  {
    v21 = vImageScale_ARGB8888(&src, &v26, 0, a10 | 0x88u);
    if (!v21)
    {
      v22 = 0;
      goto LABEL_9;
    }
    v20 = malloc_type_malloc(v21, 0x2C6173B6uLL);
    *(_QWORD *)(a5 + 256) = v20;
    if (!v20)
    {
      v22 = 4294954392;
      goto LABEL_9;
    }
  }
  if (!a6)
  {
    p_src = &src;
    v24 = &v26;
    goto LABEL_8;
  }
  v30[2] = src.width;
  v30[3] = 2 * src.rowBytes;
  v31.width = src.width;
  v31.rowBytes = 2 * src.rowBytes;
  v31.data = src.data;
  v31.height = (src.height + 1) >> 1;
  v30[0] = (char *)src.data + src.rowBytes;
  v30[1] = src.height >> 1;
  v28[2] = v26.width;
  v28[3] = 2 * v26.rowBytes;
  dest.width = v26.width;
  dest.rowBytes = 2 * v26.rowBytes;
  dest.data = v26.data;
  dest.height = (v26.height + 1) >> 1;
  v28[0] = (char *)v26.data + v26.rowBytes;
  v28[1] = v26.height >> 1;
  v22 = vImageScale_ARGB8888(&v31, &dest, v20, a10 | 8u);
  if (!(_DWORD)v22)
  {
    v20 = *(void **)(a5 + 256);
    p_src = (vImage_Buffer *)v30;
    v24 = (const vImage_Buffer *)v28;
LABEL_8:
    v22 = vImageScale_ARGB8888(p_src, v24, v20, a10 | 8u);
  }
LABEL_9:
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  CVPixelBufferUnlockBaseAddress(a3, 0);
  return v22;
}

size_t vt_Scale_8_SeparatePlanes(__CVBuffer *a1, int8x16_t *a2, __CVBuffer *a3, int8x16_t *a4, vImage_Buffer *a5, int a6, int a7, int a8, uint64_t a9, vImage_Flags a10)
{
  uint64_t v16;
  void **p_data;
  void *data;
  vImage_Error v19;
  size_t rowBytes;
  char *v21;
  vImagePixelCount height;
  void *v23;
  size_t v24;
  char *v25;
  vImagePixelCount v26;
  size_t v27;
  const vImage_Buffer *v28;
  const vImage_Buffer *v29;
  vImage_Buffer *v33;
  int8x16_t *v34;
  int8x16_t *v35;
  _QWORD v36[2];
  vImagePixelCount v37;
  uint64_t v38;
  vImage_Buffer dest;
  _QWORD v40[2];
  vImagePixelCount width;
  uint64_t v42;
  vImage_Buffer src;

  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(a3, 0);
  vt_SetupOrCleanupPlanarBuffers(a1, a2, (uint64_t)a5, 1);
  v34 = a2;
  vt_CopyToOrFromPlanarBuffers(a1, a2, a5, 1, a10);
  v35 = a4;
  v33 = a5 + 4;
  vt_SetupOrCleanupPlanarBuffers(a3, a4, (uint64_t)&a5[4], 1);
  v16 = 0;
  while (1)
  {
    p_data = &a5[v16 + 4].data;
    data = a5[8].data;
    if (data)
      goto LABEL_5;
    v19 = vImageScale_Planar8(&a5[v16], &a5[v16 + 4], 0, a10 | 0x88);
    if (v19)
      break;
LABEL_11:
    if (++v16 == 3)
    {
      v27 = scaleOrSetAlpha8(a1, v34, a3, v35, (uint64_t)a5, a6, a7, a8, a10);
      vt_CopyToOrFromPlanarBuffers(a3, v35, v33, 0, a10);
      goto LABEL_13;
    }
  }
  data = malloc_type_malloc(v19, 0x2C6173B6uLL);
  a5[8].data = data;
  if (data)
  {
LABEL_5:
    if (a6)
    {
      rowBytes = a5[v16].rowBytes;
      v21 = (char *)a5[v16].data;
      height = a5[v16].height;
      width = a5[v16].width;
      v42 = 2 * rowBytes;
      src.width = width;
      src.rowBytes = 2 * rowBytes;
      src.data = v21;
      src.height = (height + 1) >> 1;
      v40[0] = &v21[rowBytes];
      v40[1] = height >> 1;
      v23 = *p_data;
      v24 = a5[v16 + 4].rowBytes;
      v25 = (char *)*p_data + v24;
      v26 = a5[v16 + 4].height;
      v37 = a5[v16 + 4].width;
      v38 = 2 * v24;
      dest.width = v37;
      dest.rowBytes = 2 * v24;
      dest.data = v23;
      dest.height = (v26 + 1) >> 1;
      v36[0] = v25;
      v36[1] = v26 >> 1;
      v27 = vImageScale_Planar8(&src, &dest, data, a10 | 8);
      if ((_DWORD)v27)
        goto LABEL_10;
      data = a5[8].data;
      v28 = (const vImage_Buffer *)v40;
      v29 = (const vImage_Buffer *)v36;
    }
    else
    {
      v28 = &a5[v16];
      v29 = &a5[v16 + 4];
    }
    v27 = vImageScale_Planar8(v28, v29, data, a10 | 8);
LABEL_10:
    if ((_DWORD)v27)
      goto LABEL_13;
    goto LABEL_11;
  }
  v27 = 4294954392;
LABEL_13:
  vt_SetupOrCleanupPlanarBuffers(a1, v34, (uint64_t)a5, 0);
  vt_SetupOrCleanupPlanarBuffers(a3, v35, (uint64_t)v33, 0);
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  CVPixelBufferUnlockBaseAddress(a3, 0);
  return v27;
}

size_t vt_SetupOrCleanupPlanarBuffers(__CVBuffer *a1, int8x16_t *a2, uint64_t a3, int a4)
{
  size_t result;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  size_t v15;
  __CVBuffer *v16;
  size_t v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  size_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  size_t i;
  uint64_t v27;
  size_t v28;
  uint64_t v29;
  size_t v30;
  uint64_t v31;
  size_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  size_t v36;
  uint64_t v37;
  unint64_t v38;
  char *BaseAddressOfPlane;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  size_t v44;
  uint64_t v45;
  size_t v46;
  uint64_t v47;
  uint64_t v48;
  size_t v49;
  uint64_t *v50;
  uint64_t v51;
  size_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  size_t v56;
  uint64_t v57;
  size_t v58;
  uint64_t v59;
  size_t v60;
  uint64_t v61;
  size_t v62;
  uint64_t *v63;
  uint64_t v64;
  size_t BytesPerRowOfPlane;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  size_t v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;

  result = CVPixelBufferGetPixelFormatType(a1);
  v9 = result;
  if ((int)result <= 1999843441)
  {
    if ((int)result > 1380410944)
    {
      if ((int)result <= 1714696753)
      {
        if ((int)result > 1647534391)
        {
          if ((_DWORD)result == 1647534392)
            goto LABEL_89;
          if ((_DWORD)result != 1714696752)
            return result;
          goto LABEL_79;
        }
        if ((_DWORD)result == 1380410945)
        {
          if (a4)
          {
            v76 = a2[2].i64[1];
            v30 = CVPixelBufferGetBytesPerRow(a1) * v76 + 16 * a2[2].i64[0];
            goto LABEL_98;
          }
          goto LABEL_120;
        }
        if ((_DWORD)result != 1630697081)
          return result;
        if (a4)
        {
          v14 = a2[2].i64[1];
          v15 = a2[2].i64[0] + CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL) * v14;
          *(_QWORD *)(a3 + 96) = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL) + v15;
          *(int8x16_t *)(a3 + 104) = vextq_s8(a2[1], a2[1], 8uLL);
          v16 = a1;
          v17 = 1;
          goto LABEL_66;
        }
        v75 = 0uLL;
LABEL_124:
        *(_OWORD *)(a3 + 96) = v75;
        *(_OWORD *)(a3 + 112) = v75;
        return result;
      }
      if ((int)result <= 1916022839)
      {
        if ((_DWORD)result != 1714696754)
        {
          v12 = 1714697268;
LABEL_47:
          if ((_DWORD)result != v12)
            return result;
          if ((a4 & 1) != 0)
          {
            for (i = 0; i != 3; ++i)
            {
              v27 = a2[2].i64[1];
              v28 = a2[2].i64[0] + CVPixelBufferGetBytesPerRowOfPlane(a1, i) * v27;
              *(_QWORD *)a3 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, i) + v28;
              *(int8x16_t *)(a3 + 8) = vextq_s8(a2[1], a2[1], 8uLL);
              result = CVPixelBufferGetBytesPerRowOfPlane(a1, i);
              *(_QWORD *)(a3 + 24) = result;
              a3 += 32;
            }
            return result;
          }
LABEL_109:
          v71 = 0uLL;
          *(_OWORD *)(a3 + 64) = 0u;
          *(_OWORD *)(a3 + 80) = 0u;
LABEL_115:
          *(_OWORD *)(a3 + 32) = v71;
          *(_OWORD *)(a3 + 48) = v71;
LABEL_121:
          *(_OWORD *)a3 = v71;
          *(_OWORD *)(a3 + 16) = v71;
          return result;
        }
        goto LABEL_100;
      }
      if ((_DWORD)result == 1916022840)
      {
LABEL_96:
        if (a4)
        {
          v61 = a2[2].i64[1];
          v30 = CVPixelBufferGetBytesPerRow(a1) * v61 + 4 * a2[2].i64[0];
          goto LABEL_98;
        }
LABEL_120:
        v71 = 0uLL;
        goto LABEL_121;
      }
      if ((_DWORD)result != 1982882104)
      {
        v11 = 1983131704;
        goto LABEL_95;
      }
      goto LABEL_60;
    }
    if ((int)result <= 875704949)
    {
      if ((int)result <= 875704437)
      {
        if ((_DWORD)result == 32)
          goto LABEL_96;
        if ((_DWORD)result != 875704422)
          return result;
        goto LABEL_60;
      }
      if ((_DWORD)result == 875704438)
      {
LABEL_60:
        if (a4)
        {
          v35 = a2[2].i64[1];
          v36 = a2[2].i64[0] + CVPixelBufferGetBytesPerRowOfPlane(a1, 0) * v35;
          *(_QWORD *)a3 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0) + v36;
          *(int8x16_t *)(a3 + 8) = vextq_s8(a2[1], a2[1], 8uLL);
          *(_QWORD *)(a3 + 24) = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
          v37 = a2[2].i64[1];
          v38 = ((a2[2].i64[0] + (a2[2].i64[0] < 0)) & 0xFFFFFFFFFFFFFFFELL)
              + v37 / 2 * CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
          BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
          v41 = a2[1].i64[0];
          v40 = a2[1].i64[1];
          *(_QWORD *)(a3 + 32) = &BaseAddressOfPlane[v38];
          *(_QWORD *)(a3 + 40) = v40 / 2;
          if (v41 >= 0)
            v42 = v41;
          else
            v42 = v41 + 1;
          *(_QWORD *)(a3 + 48) = v42 >> 1;
          result = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
          *(_QWORD *)(a3 + 56) = result;
          if (v9 != 1982882104)
            return result;
          v43 = a2[2].i64[1];
          v44 = a2[2].i64[0] + CVPixelBufferGetBytesPerRowOfPlane(a1, 2uLL) * v43;
          *(_QWORD *)(a3 + 96) = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 2uLL) + v44;
          *(int8x16_t *)(a3 + 104) = vextq_s8(a2[1], a2[1], 8uLL);
          v16 = a1;
          v17 = 2;
LABEL_66:
          result = CVPixelBufferGetBytesPerRowOfPlane(v16, v17);
          *(_QWORD *)(a3 + 120) = result;
          return result;
        }
        v75 = 0uLL;
        *(_OWORD *)(a3 + 32) = 0u;
        *(_OWORD *)(a3 + 48) = 0u;
        *(_OWORD *)a3 = 0u;
        *(_OWORD *)(a3 + 16) = 0u;
        if ((_DWORD)result != 1982882104)
          return result;
        goto LABEL_124;
      }
      if ((_DWORD)result != 875704934)
        return result;
LABEL_58:
      if (a4)
      {
        v31 = a2[2].i64[1];
        v32 = a2[2].i64[0] + CVPixelBufferGetBytesPerRowOfPlane(a1, 0) * v31;
        *(_QWORD *)a3 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0) + v32;
        *(int8x16_t *)(a3 + 8) = vextq_s8(a2[1], a2[1], 8uLL);
        *(_QWORD *)(a3 + 24) = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
        v33 = a2[2].i64[1];
        v34 = ((a2[2].i64[0] + (a2[2].i64[0] < 0)) & 0xFFFFFFFFFFFFFFFELL)
            + CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL) * v33;
LABEL_72:
        v23 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL) + v34;
        v24 = a2[1].i64[0];
        v25 = a2[1].i64[1];
        goto LABEL_73;
      }
LABEL_114:
      v71 = 0uLL;
      goto LABEL_115;
    }
    if ((int)result > 875836533)
    {
      if ((_DWORD)result != 875836534)
      {
        v11 = 1111970369;
LABEL_95:
        if ((_DWORD)result != v11)
          return result;
        goto LABEL_96;
      }
    }
    else
    {
      if ((_DWORD)result == 875704950)
        goto LABEL_58;
      if ((_DWORD)result != 875836518)
        return result;
    }
    if (a4)
    {
      v72 = a2[2].i64[1];
      v73 = a2[2].i64[0] + CVPixelBufferGetBytesPerRowOfPlane(a1, 0) * v72;
      *(_QWORD *)a3 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0) + v73;
      *(int8x16_t *)(a3 + 8) = vextq_s8(a2[1], a2[1], 8uLL);
      *(_QWORD *)(a3 + 24) = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
      v74 = a2[2].i64[1];
      v60 = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL) * v74 + 2 * a2[2].i64[0];
      goto LABEL_112;
    }
    goto LABEL_114;
  }
  if ((int)result <= 2021077551)
  {
    if ((int)result <= 2016687215)
    {
      if ((int)result > 2016686641)
      {
        if ((_DWORD)result != 2016686642)
        {
          if ((_DWORD)result != 2016687156)
            return result;
          goto LABEL_91;
        }
        goto LABEL_70;
      }
      if ((_DWORD)result != 1999843442)
      {
        v13 = 2016686640;
        goto LABEL_42;
      }
    }
    else
    {
      if ((int)result > 2019963441)
      {
        if ((_DWORD)result != 2019963442)
        {
          if ((_DWORD)result != 2019963956)
          {
            v10 = 2019964016;
            goto LABEL_88;
          }
          goto LABEL_91;
        }
LABEL_70:
        if (a4)
        {
          v45 = a2[2].i64[1];
          v46 = CVPixelBufferGetBytesPerRowOfPlane(a1, 0) * v45 + 2 * a2[2].i64[0];
          *(_QWORD *)a3 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0) + v46;
          *(int8x16_t *)(a3 + 8) = vextq_s8(a2[1], a2[1], 8uLL);
          *(_QWORD *)(a3 + 24) = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
          v47 = a2[2].i64[1];
          v34 = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL) * v47
              + 4 * ((a2[2].i64[0] + (unint64_t)(a2[2].i64[0] < 0)) >> 1);
          goto LABEL_72;
        }
        goto LABEL_114;
      }
      if ((_DWORD)result != 2016687216)
      {
        v13 = 2019963440;
LABEL_42:
        if ((_DWORD)result != v13)
          return result;
        goto LABEL_43;
      }
    }
LABEL_89:
    if (a4)
    {
      v55 = a2[2].i64[1];
      v56 = CVPixelBufferGetBytesPerRow(a1) * v55 + 4 * a2[2].i64[0];
      *(_QWORD *)a3 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0) + v56;
      *(int8x16_t *)(a3 + 8) = vextq_s8(a2[1], a2[1], 8uLL);
      result = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
LABEL_99:
      *(_QWORD *)(a3 + 24) = result;
      return result;
    }
    goto LABEL_120;
  }
  if ((int)result <= 2033463351)
  {
    if ((int)result > 2021078067)
    {
      if ((_DWORD)result != 2021078068)
      {
        v10 = 2021078128;
LABEL_88:
        if ((_DWORD)result != v10)
          return result;
        goto LABEL_89;
      }
LABEL_91:
      if (a4)
      {
        v57 = a2[2].i64[1];
        v58 = CVPixelBufferGetBytesPerRowOfPlane(a1, 0) * v57 + 2 * a2[2].i64[0];
        *(_QWORD *)a3 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0) + v58;
        *(int8x16_t *)(a3 + 8) = vextq_s8(a2[1], a2[1], 8uLL);
        *(_QWORD *)(a3 + 24) = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
        v59 = a2[2].i64[1];
        v60 = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL) * v59 + 4 * a2[2].i64[0];
LABEL_112:
        *(_QWORD *)(a3 + 32) = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL) + v60;
        *(int8x16_t *)(a3 + 40) = vextq_s8(a2[1], a2[1], 8uLL);
LABEL_113:
        result = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
        *(_QWORD *)(a3 + 56) = result;
        return result;
      }
      goto LABEL_114;
    }
    if ((_DWORD)result != 2021077552)
    {
      if ((_DWORD)result != 2021077554)
        return result;
      goto LABEL_70;
    }
LABEL_43:
    if (a4)
    {
      v18 = a2[2].i64[1];
      v19 = CVPixelBufferGetBytesPerRowOfPlane(a1, 0) * v18 + 2 * a2[2].i64[0];
      *(_QWORD *)a3 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0) + v19;
      *(int8x16_t *)(a3 + 8) = vextq_s8(a2[1], a2[1], 8uLL);
      *(_QWORD *)(a3 + 24) = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
      v20 = a2[2].i64[1];
      v21 = v20 / 2 * CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
      v22 = a2[2].i64[0] + (a2[2].i64[0] < 0);
      v23 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL) + 4 * (v22 >> 1) + v21;
      v24 = a2[1].i64[0];
      v25 = a2[1].i64[1] / 2;
LABEL_73:
      *(_QWORD *)(a3 + 32) = v23;
      *(_QWORD *)(a3 + 40) = v25;
      if (v24 >= 0)
        v48 = v24;
      else
        v48 = v24 + 1;
      *(_QWORD *)(a3 + 48) = v48 >> 1;
      goto LABEL_113;
    }
    goto LABEL_114;
  }
  if ((int)result <= 2033463855)
  {
    if ((_DWORD)result != 2033463352)
    {
      if ((_DWORD)result != 2033463606)
        return result;
      if (!a4)
        goto LABEL_120;
      v29 = a2[2].i64[1];
      v30 = CVPixelBufferGetBytesPerRow(a1) * v29 + 8 * a2[2].i64[0];
LABEL_98:
      *(_QWORD *)a3 = (char *)CVPixelBufferGetBaseAddress(a1) + v30;
      *(int8x16_t *)(a3 + 8) = vextq_s8(a2[1], a2[1], 8uLL);
      result = CVPixelBufferGetBytesPerRow(a1);
      goto LABEL_99;
    }
    goto LABEL_96;
  }
  if ((_DWORD)result != 2033463856)
  {
    if ((_DWORD)result != 2033463858)
    {
      v12 = 2033464372;
      goto LABEL_47;
    }
LABEL_100:
    if ((a4 & 1) == 0)
      goto LABEL_109;
    v62 = 0;
    v63 = (uint64_t *)(a3 + 16);
    do
    {
      v64 = a2[2].i64[1];
      BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, v62);
      v66 = a2[2].i64[0];
      v67 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, v62);
      v68 = a2[1].i64[0];
      v69 = a2[1].i64[1];
      if (v68 >= 0)
        v70 = a2[1].i64[0];
      else
        v70 = v68 + 1;
      *(v63 - 2) = (uint64_t)&v67[(v66 >> (v62 != 0)) + BytesPerRowOfPlane * v64];
      *(v63 - 1) = v69;
      if (v62)
        v68 = v70 >> 1;
      *v63 = v68;
      result = CVPixelBufferGetBytesPerRowOfPlane(a1, v62);
      v63[1] = result;
      ++v62;
      v63 += 4;
    }
    while (v62 != 3);
    return result;
  }
LABEL_79:
  if ((a4 & 1) == 0)
    goto LABEL_109;
  v49 = 0;
  v50 = (uint64_t *)(a3 + 16);
  do
  {
    v51 = a2[2].i64[1] >> (v49 != 0);
    v52 = (a2[2].i64[0] >> (v49 != 0)) + v51 * CVPixelBufferGetBytesPerRowOfPlane(a1, v49);
    *(v50 - 2) = (uint64_t)CVPixelBufferGetBaseAddressOfPlane(a1, v49) + v52;
    v53 = a2[1].i64[1];
    if (v49)
    {
      v53 /= 2;
      v54 = a2[1].i64[0] / 2;
    }
    else
    {
      v54 = a2[1].i64[0];
    }
    *(v50 - 1) = v53;
    *v50 = v54;
    result = CVPixelBufferGetBytesPerRowOfPlane(a1, v49);
    v50[1] = result;
    ++v49;
    v50 += 4;
  }
  while (v49 != 3);
  return result;
}

size_t vt_CopyToOrFromPlanarBuffers(__CVBuffer *a1, _QWORD *a2, vImage_Buffer *a3, int a4, vImage_Flags a5)
{
  size_t result;
  int v11;
  unsigned __int16 v12;
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  size_t v18;
  _BYTE *v19;
  __CVBuffer *v20;
  _BYTE *v21;
  size_t v22;
  __CVBuffer *v23;
  int v24;
  __CVBuffer *v25;
  size_t v26;
  uint64_t v27;
  size_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  size_t v32;
  _BYTE *v33;
  __CVBuffer *v34;
  _BYTE *v35;
  size_t v36;
  __CVBuffer *v37;
  int v38;
  __CVBuffer *v39;
  size_t v40;
  signed int v41;
  vImagePixelCount v42;
  vImagePixelCount v43;
  size_t v44;
  char *BaseAddressOfPlane;
  char *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  vImagePixelCount v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  __CVBuffer *v55;
  size_t v56;
  uint64_t v57;
  size_t rowBytes;
  uint64_t width;
  uint64_t v60;
  uint64_t height;
  uint64_t data;
  size_t v63;
  __CVBuffer *v64;
  _BYTE *v65;
  size_t v66;
  _BYTE *v67;
  __CVBuffer *v68;
  int IsPlanar;
  __CVBuffer *v70;
  size_t BytesPerRowOfPlane;
  signed int PixelFormatType;
  vImagePixelCount v73;
  vImagePixelCount v74;
  size_t v75;
  char *BaseAddress;
  char *v77;
  int v78;
  signed int v79;
  vImagePixelCount v80;
  vImagePixelCount v81;
  size_t v82;
  char *v83;
  char *v84;
  int v85;
  uint64_t v86;
  __CVBuffer *v87;
  size_t v88;
  uint64_t v89;
  size_t v90;
  char *v91;
  size_t v92;
  char *v93;
  uint64_t v94;
  vImagePixelCount v95;
  char *v96;
  __int16 v97;
  uint64_t v98;
  size_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _BYTE *v103;
  uint64_t v104;
  size_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _BYTE *v109;
  char *v110;
  size_t v111;
  char *v112;
  size_t v113;
  uint64_t jj;
  uint64_t v115;
  vImagePixelCount v116;
  __int16 v117;
  char *v118;
  uint64_t v119;
  size_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _BYTE *v124;
  _BYTE *v125;
  __CVBuffer *v126;
  size_t BytesPerRow;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  size_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _BYTE *v137;
  _BYTE *v138;
  uint64_t v139;
  size_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _BYTE *v145;
  _BYTE *v146;
  _BYTE *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  int v153;
  uint64_t v154;
  size_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _BYTE *v160;
  _BYTE *v161;
  int v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  size_t v169;
  char *v170;
  size_t v171;
  char *v172;
  size_t v173;
  char *v174;
  uint64_t i;
  unsigned int v176;
  uint64_t v177;
  size_t v178;
  char *v179;
  size_t v180;
  char *v181;
  size_t v182;
  char *v183;
  uint64_t m;
  unsigned int v185;
  unsigned __int16 *v186;
  size_t v187;
  unsigned __int16 *v188;
  size_t v189;
  unsigned __int16 *v190;
  size_t v191;
  uint64_t j;
  uint64_t k;
  unsigned __int16 *v194;
  size_t v195;
  unsigned __int16 *v196;
  size_t v197;
  unsigned __int16 *v198;
  size_t v199;
  uint64_t n;
  uint64_t ii;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  _QWORD *v205;
  _QWORD *v206;
  _QWORD *v207;
  vImage_Buffer src;

  result = CVPixelBufferGetPixelFormatType(a1);
  if ((int)result <= 2016686641)
  {
    if ((int)result > 1630697080)
    {
      if ((int)result > 1983000885)
      {
        if ((_DWORD)result == 1983000886)
        {
          v207 = a2;
          width = a3->width;
          rowBytes = a3->rowBytes;
          v60 = width + 2;
          if (width >= -1)
            v60 = width + 1;
          v204 = v60 >> 1;
          data = (uint64_t)a3->data;
          height = a3->height;
          v63 = a3[2].rowBytes;
          v64 = a1;
          v65 = a3[1].data;
          v66 = a3[1].rowBytes;
          v67 = a3[2].data;
          v68 = v64;
          IsPlanar = CVPixelBufferIsPlanar(v64);
          if (a4)
          {
            v70 = v68;
            if (IsPlanar)
            {
              BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v68, 0);
              result = (size_t)CVPixelBufferGetBaseAddressOfPlane(v70, 0);
            }
            else
            {
              BytesPerRowOfPlane = CVPixelBufferGetBytesPerRow(v68);
              result = (size_t)CVPixelBufferGetBaseAddress(v70);
            }
            if (height >= 1)
            {
              v139 = 0;
              v140 = result + v207[5] * BytesPerRowOfPlane + 2 * v207[4];
              v141 = v204;
              if (v204 <= 1)
                v141 = 1;
              v142 = 2 * v141;
              do
              {
                if (width >= 1)
                {
                  v143 = 0;
                  v144 = 0;
                  v145 = (_BYTE *)data;
                  do
                  {
                    v146 = &v67[v144];
                    v147 = &v65[v144];
                    *v147 = *(_BYTE *)(v140 + v143);
                    v147[1] = *(_BYTE *)(v140 + v143 + 1);
                    *v145 = *(_BYTE *)(v140 + v143 + 2);
                    v145[1] = *(_BYTE *)(v140 + v143 + 3);
                    *v146 = *(_BYTE *)(v140 + v143 + 4);
                    v146[1] = *(_BYTE *)(v140 + v143 + 5);
                    v145[2] = *(_BYTE *)(v140 + v143 + 6);
                    v145[3] = *(_BYTE *)(v140 + v143 + 7);
                    v144 += 2;
                    v143 += 8;
                    v145 += 4;
                  }
                  while (v142 != v144);
                }
                v140 += BytesPerRowOfPlane;
                data += rowBytes;
                v65 += v66;
                v67 += v63;
                ++v139;
              }
              while (v139 != height);
            }
          }
          else
          {
            v126 = v68;
            if (IsPlanar)
            {
              BytesPerRow = CVPixelBufferGetBytesPerRowOfPlane(v68, 0);
              result = (size_t)CVPixelBufferGetBaseAddressOfPlane(v126, 0);
            }
            else
            {
              BytesPerRow = CVPixelBufferGetBytesPerRow(v68);
              result = (size_t)CVPixelBufferGetBaseAddress(v126);
            }
            if (height >= 1)
            {
              v154 = 0;
              v155 = result + v207[5] * BytesPerRow + 2 * v207[4];
              v156 = v204;
              if (v204 <= 1)
                v156 = 1;
              v157 = 2 * v156;
              do
              {
                if (width >= 1)
                {
                  v158 = 0;
                  v159 = 0;
                  v160 = (_BYTE *)data;
                  do
                  {
                    v161 = (_BYTE *)(v155 + v159);
                    *v161 = v65[v158];
                    v161[1] = v65[v158 + 1];
                    v161[2] = *v160;
                    v161[3] = v160[1];
                    v161[4] = v67[v158];
                    v161[5] = v67[v158 + 1];
                    v161[6] = v160[2];
                    v161[7] = v160[3];
                    v159 += 8;
                    v158 += 2;
                    v160 += 4;
                  }
                  while (v157 != v158);
                }
                data += rowBytes;
                v65 += v66;
                v67 += v63;
                v155 += BytesPerRow;
                ++v154;
              }
              while (v154 != height);
            }
          }
          return result;
        }
        if ((_DWORD)result != 1983131952)
        {
          v205 = a2;
          v12 = 12848;
          goto LABEL_27;
        }
        PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
        v74 = a3->height;
        v73 = a3->width;
        v75 = CVPixelBufferGetBytesPerRow(a1);
        BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
        v77 = BaseAddress;
        if (a4)
        {
          if (PixelFormatType <= 2019963439)
          {
            if (PixelFormatType <= 2016686639)
            {
              if (PixelFormatType == 1378955371 || PixelFormatType == 1983131952)
                goto LABEL_247;
              v162 = 1999843442;
              goto LABEL_246;
            }
            if (PixelFormatType > 2016687155)
            {
              if (PixelFormatType == 2016687156)
                goto LABEL_247;
              v162 = 2016687216;
              goto LABEL_246;
            }
            if (PixelFormatType == 2016686640)
              goto LABEL_224;
            v78 = 2016686642;
          }
          else
          {
            if (PixelFormatType <= 2021077551)
            {
              if (PixelFormatType <= 2019963955)
              {
                if (PixelFormatType != 2019963440)
                {
                  v78 = 2019963442;
                  goto LABEL_195;
                }
LABEL_224:
                v149 = a2[4];
                v148 = a2[5] / 2;
                goto LABEL_225;
              }
              if (PixelFormatType == 2019963956)
              {
LABEL_247:
                v164 = a2[5] * v75 + 8 * a2[4];
                goto LABEL_248;
              }
              v162 = 2019964016;
LABEL_246:
              if (PixelFormatType != v162)
                goto LABEL_249;
              goto LABEL_247;
            }
            if (PixelFormatType > 2021078067)
            {
              if (PixelFormatType == 2021078128)
                goto LABEL_247;
              v162 = 2021078068;
              goto LABEL_246;
            }
            if (PixelFormatType == 2021077552)
              goto LABEL_224;
            v78 = 2021077554;
          }
LABEL_195:
          if (PixelFormatType == v78)
          {
            v149 = a2[4];
            v148 = a2[5];
LABEL_225:
            v164 = ((v149 + (v149 < 0)) & 0xFFFFFFFFFFFFFFFELL) + v148 * v75;
LABEL_248:
            v77 = &BaseAddress[v164];
          }
LABEL_249:
          result = CVPixelBufferGetBytesPerRow(a1);
          if (v73 && v74)
          {
            v168 = 0;
            v169 = a3[2].rowBytes;
            v170 = (char *)a3->data;
            v171 = a3->rowBytes;
            v172 = (char *)a3[1].data;
            v173 = a3[1].rowBytes;
            v174 = (char *)a3[2].data;
            do
            {
              for (i = 0; i != v73; ++i)
              {
                v176 = *(_DWORD *)&v77[4 * i];
                *(_WORD *)&v170[2 * i] = (v176 >> 2) & 0x3FF;
                *(_WORD *)&v172[2 * i] = (v176 >> 12) & 0x3FF;
                *(_WORD *)&v174[2 * i] = v176 >> 22;
              }
              v77 += result;
              v170 += v171;
              v172 += v173;
              v174 += v169;
              ++v168;
            }
            while (v168 != v74);
          }
          return result;
        }
        if (PixelFormatType <= 2016686639)
        {
          if (PixelFormatType == 1378955371 || PixelFormatType == 1983131952)
            goto LABEL_231;
          v152 = 1999843442;
        }
        else
        {
          if (PixelFormatType <= 2016687155)
          {
            if (PixelFormatType == 2016686640)
            {
              v129 = a2[4];
              v128 = a2[5] / 2;
              goto LABEL_269;
            }
            if (PixelFormatType == 2016686642)
            {
              v129 = a2[4];
              v128 = a2[5];
LABEL_269:
              v166 = ((v129 + (v129 < 0)) & 0xFFFFFFFFFFFFFFFELL) + v128 * v75;
              goto LABEL_270;
            }
LABEL_271:
            v186 = (unsigned __int16 *)a3->data;
            v187 = a3->rowBytes;
            v188 = (unsigned __int16 *)a3[1].data;
            v189 = a3[2].rowBytes;
            v191 = a3[1].rowBytes;
            v190 = (unsigned __int16 *)a3[2].data;
            result = CVPixelBufferGetBytesPerRow(a1);
            if (v73 && v74)
            {
              for (j = 0; j != v74; ++j)
              {
                for (k = 0; k != v73; ++k)
                  *(_DWORD *)&v77[4 * k] = (v188[k] << 12) | (4 * v186[k]) | (v190[k] << 22);
                v186 = (unsigned __int16 *)((char *)v186 + v187);
                v188 = (unsigned __int16 *)((char *)v188 + v191);
                v190 = (unsigned __int16 *)((char *)v190 + v189);
                v77 += result;
              }
            }
            return result;
          }
          if (PixelFormatType == 2016687216)
          {
LABEL_231:
            v166 = a2[5] * v75 + 8 * a2[4];
LABEL_270:
            v77 = &BaseAddress[v166];
            goto LABEL_271;
          }
          v152 = 2016687156;
        }
        if (PixelFormatType != v152)
          goto LABEL_271;
        goto LABEL_231;
      }
      v206 = a2;
      if ((_DWORD)result != 1630697081)
      {
        if ((_DWORD)result == 1983000880)
        {
          if (a4)
            return (size_t)vt_Copy_v210_10bitBiPlanarYUV422(a1, (uint64_t)a2, (uint64_t *)a3);
          else
            return (size_t)vt_Copy_10bitBiPlanarYUV422_v210((uint64_t *)a3, a1, (uint64_t)a2);
        }
        return result;
      }
LABEL_32:
      v27 = a3->width;
      v28 = a3->rowBytes;
      v29 = v27 + 2;
      if (v27 >= -1)
        v29 = v27 + 1;
      v203 = v29 >> 1;
      v31 = (uint64_t)a3->data;
      v30 = a3->height;
      v32 = a3[2].rowBytes;
      v33 = a3[1].data;
      v34 = a1;
      v36 = a3[1].rowBytes;
      v35 = a3[2].data;
      v37 = v34;
      v38 = CVPixelBufferIsPlanar(v34);
      if (a4)
      {
        v39 = v37;
        if (v38)
        {
          v40 = CVPixelBufferGetBytesPerRowOfPlane(v37, 0);
          result = (size_t)CVPixelBufferGetBaseAddressOfPlane(v39, 0);
        }
        else
        {
          v40 = CVPixelBufferGetBytesPerRow(v37);
          result = (size_t)CVPixelBufferGetBaseAddress(v39);
        }
        if (v30 >= 1)
        {
          v98 = 0;
          v99 = result + v206[5] * v40 + 2 * v206[4];
          v100 = v203;
          if (v203 <= 1)
            v100 = 1;
          do
          {
            if (v27 >= 1)
            {
              v101 = 0;
              v102 = 0;
              v103 = (_BYTE *)v31;
              do
              {
                v33[v102] = *(_BYTE *)(v99 + v101);
                *v103 = *(_BYTE *)(v99 + v101 + 1);
                v35[v102] = *(_BYTE *)(v99 + v101 + 2);
                v103[1] = *(_BYTE *)(v99 + v101 + 3);
                ++v102;
                v101 += 4;
                v103 += 2;
              }
              while (v100 != v102);
            }
            v99 += v40;
            v31 += v28;
            v33 += v36;
            v35 += v32;
            ++v98;
          }
          while (v98 != v30);
        }
      }
      else
      {
        v55 = v37;
        if (v38)
        {
          v56 = CVPixelBufferGetBytesPerRowOfPlane(v37, 0);
          result = (size_t)CVPixelBufferGetBaseAddressOfPlane(v55, 0);
        }
        else
        {
          v56 = CVPixelBufferGetBytesPerRow(v37);
          result = (size_t)CVPixelBufferGetBaseAddress(v55);
        }
        if (v30 >= 1)
        {
          v119 = 0;
          v120 = result + v206[5] * v56 + 2 * v206[4];
          v121 = v203;
          if (v203 <= 1)
            v121 = 1;
          do
          {
            if (v27 >= 1)
            {
              v122 = 0;
              v123 = 0;
              v124 = (_BYTE *)v31;
              do
              {
                v125 = (_BYTE *)(v120 + v122);
                *v125 = v33[v123];
                v125[1] = *v124;
                v125[2] = v35[v123];
                v125[3] = v124[1];
                ++v123;
                v122 += 4;
                v124 += 2;
              }
              while (v121 != v123);
            }
            v31 += v28;
            v33 += v36;
            v35 += v32;
            v120 += v56;
            ++v119;
          }
          while (v119 != v30);
        }
      }
      return result;
    }
    if ((int)result <= 1378955370)
    {
      v206 = a2;
      if ((_DWORD)result != 846624102 && (_DWORD)result != 846624121)
        return result;
      goto LABEL_32;
    }
    if ((_DWORD)result != 1378955371)
    {
      if ((_DWORD)result == 1380411457)
      {
        if (a4)
        {
          v50 = 4 * a2[2];
          src.height = a2[3];
          src.width = v50;
          src.rowBytes = CVPixelBufferGetBytesPerRow(a1);
          src.data = (char *)CVPixelBufferGetBaseAddress(a1) + 8 * a2[4] + a2[5] * src.rowBytes;
          a3->width *= 4;
          result = vImageConvert_Planar16FtoPlanarF(&src, a3, a5);
        }
        else
        {
          src.height = CVPixelBufferGetHeight(a1);
          src.width = 4 * CVPixelBufferGetWidth(a1);
          src.rowBytes = CVPixelBufferGetBytesPerRow(a1);
          src.data = (char *)CVPixelBufferGetBaseAddress(a1) + 8 * a2[4] + a2[5] * src.rowBytes;
          a3->width *= 4;
          result = vImageConvert_PlanarFtoPlanar16F(a3, &src, a5);
        }
        a3->width >>= 2;
      }
      return result;
    }
    v79 = CVPixelBufferGetPixelFormatType(a1);
    v81 = a3->height;
    v80 = a3->width;
    v82 = CVPixelBufferGetBytesPerRow(a1);
    v83 = (char *)CVPixelBufferGetBaseAddress(a1);
    v84 = v83;
    if (a4)
    {
      if (v79 <= 2019963439)
      {
        if (v79 <= 2016686639)
        {
          if (v79 == 1378955371 || v79 == 1983131952)
            goto LABEL_259;
          v163 = 1999843442;
          goto LABEL_258;
        }
        if (v79 > 2016687155)
        {
          if (v79 == 2016687156)
            goto LABEL_259;
          v163 = 2016687216;
          goto LABEL_258;
        }
        if (v79 == 2016686640)
          goto LABEL_226;
        v85 = 2016686642;
      }
      else
      {
        if (v79 <= 2021077551)
        {
          if (v79 <= 2019963955)
          {
            if (v79 != 2019963440)
            {
              v85 = 2019963442;
              goto LABEL_200;
            }
LABEL_226:
            v151 = a2[4];
            v150 = a2[5] / 2;
            goto LABEL_227;
          }
          if (v79 == 2019963956)
          {
LABEL_259:
            v165 = a2[5] * v82 + 8 * a2[4];
            goto LABEL_260;
          }
          v163 = 2019964016;
LABEL_258:
          if (v79 != v163)
            goto LABEL_261;
          goto LABEL_259;
        }
        if (v79 > 2021078067)
        {
          if (v79 == 2021078128)
            goto LABEL_259;
          v163 = 2021078068;
          goto LABEL_258;
        }
        if (v79 == 2021077552)
          goto LABEL_226;
        v85 = 2021077554;
      }
LABEL_200:
      if (v79 == v85)
      {
        v151 = a2[4];
        v150 = a2[5];
LABEL_227:
        v165 = ((v151 + (v151 < 0)) & 0xFFFFFFFFFFFFFFFELL) + v150 * v82;
LABEL_260:
        v84 = &v83[v165];
      }
LABEL_261:
      result = CVPixelBufferGetBytesPerRow(a1);
      if (v80 && v81)
      {
        v177 = 0;
        v178 = a3[2].rowBytes;
        v179 = (char *)a3->data;
        v180 = a3->rowBytes;
        v181 = (char *)a3[1].data;
        v182 = a3[1].rowBytes;
        v183 = (char *)a3[2].data;
        do
        {
          for (m = 0; m != v80; ++m)
          {
            v185 = bswap32(*(_DWORD *)&v84[4 * m]);
            *(_WORD *)&v179[2 * m] = (v185 >> 2) & 0x3FF;
            *(_WORD *)&v181[2 * m] = (v185 >> 12) & 0x3FF;
            *(_WORD *)&v183[2 * m] = v185 >> 22;
          }
          v84 += result;
          v179 += v180;
          v181 += v182;
          v183 += v178;
          ++v177;
        }
        while (v177 != v81);
      }
      return result;
    }
    if (v79 <= 2016686639)
    {
      if (v79 == 1378955371 || v79 == 1983131952)
        goto LABEL_235;
      v153 = 1999843442;
    }
    else
    {
      if (v79 <= 2016687155)
      {
        if (v79 == 2016686640)
        {
          v131 = a2[4];
          v130 = a2[5] / 2;
          goto LABEL_279;
        }
        if (v79 == 2016686642)
        {
          v131 = a2[4];
          v130 = a2[5];
LABEL_279:
          v167 = ((v131 + (v131 < 0)) & 0xFFFFFFFFFFFFFFFELL) + v130 * v82;
          goto LABEL_280;
        }
LABEL_281:
        v194 = (unsigned __int16 *)a3->data;
        v195 = a3->rowBytes;
        v196 = (unsigned __int16 *)a3[1].data;
        v197 = a3[2].rowBytes;
        v199 = a3[1].rowBytes;
        v198 = (unsigned __int16 *)a3[2].data;
        result = CVPixelBufferGetBytesPerRow(a1);
        if (v80 && v81)
        {
          for (n = 0; n != v81; ++n)
          {
            for (ii = 0; ii != v80; ++ii)
              *(_DWORD *)&v84[4 * ii] = bswap32((v196[ii] << 12) | (4 * v194[ii]) | (v198[ii] << 22));
            v194 = (unsigned __int16 *)((char *)v194 + v195);
            v196 = (unsigned __int16 *)((char *)v196 + v199);
            v198 = (unsigned __int16 *)((char *)v198 + v197);
            v84 += result;
          }
        }
        return result;
      }
      if (v79 == 2016687216)
      {
LABEL_235:
        v167 = a2[5] * v82 + 8 * a2[4];
LABEL_280:
        v84 = &v83[v167];
        goto LABEL_281;
      }
      v153 = 2016687156;
    }
    if (v79 != v153)
      goto LABEL_281;
    goto LABEL_235;
  }
  v205 = a2;
  if ((int)result <= 2021077551)
  {
    if ((int)result > 2019963439)
    {
      if ((_DWORD)result == 2019963440 || (_DWORD)result == 2019963442)
        goto LABEL_40;
      v11 = 2019963956;
LABEL_39:
      if ((_DWORD)result != v11)
        return result;
LABEL_40:
      v41 = CVPixelBufferGetPixelFormatType(a1);
      v43 = a3[1].height;
      v42 = a3[1].width;
      v44 = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
      BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
      v46 = BaseAddressOfPlane;
      if (a4)
      {
        if (v41 <= 2019963439)
        {
          if (v41 <= 2016686639)
          {
            if (v41 == 1378955371 || v41 == 1983131952)
              goto LABEL_104;
            v54 = 1999843442;
            goto LABEL_103;
          }
          if (v41 > 2016687155)
          {
            if (v41 == 2016687156)
              goto LABEL_104;
            v54 = 2016687216;
            goto LABEL_103;
          }
          if (v41 == 2016686640)
            goto LABEL_72;
          v47 = 2016686642;
        }
        else
        {
          if (v41 <= 2021077551)
          {
            if (v41 <= 2019963955)
            {
              if (v41 != 2019963440)
              {
                v47 = 2019963442;
                goto LABEL_62;
              }
LABEL_72:
              v52 = v205[4];
              v51 = v205[5] / 2;
              goto LABEL_73;
            }
            if (v41 == 2019963956)
            {
LABEL_104:
              v57 = v205[5] * v44 + 8 * v205[4];
              goto LABEL_105;
            }
            v54 = 2019964016;
LABEL_103:
            if (v41 != v54)
              goto LABEL_106;
            goto LABEL_104;
          }
          if (v41 > 2021078067)
          {
            if (v41 == 2021078128)
              goto LABEL_104;
            v54 = 2021078068;
            goto LABEL_103;
          }
          if (v41 == 2021077552)
            goto LABEL_72;
          v47 = 2021077554;
        }
LABEL_62:
        if (v41 == v47)
        {
          v52 = v205[4];
          v51 = v205[5];
LABEL_73:
          v57 = ((v52 + (v52 < 0)) & 0xFFFFFFFFFFFFFFFELL) + v51 * v44;
LABEL_105:
          v46 = &BaseAddressOfPlane[v57];
        }
LABEL_106:
        result = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
        if (v42 && v43)
        {
          v89 = 0;
          v90 = a3[2].rowBytes;
          v91 = (char *)a3[1].data;
          v92 = a3[1].rowBytes;
          v93 = (char *)a3[2].data;
          do
          {
            v94 = 0;
            v95 = v42;
            do
            {
              v96 = &v46[2 * v94];
              v97 = *(_WORD *)v96;
              LOWORD(v96) = *((_WORD *)v96 + 1);
              *(_WORD *)&v91[v94] = v97;
              *(_WORD *)&v93[v94] = (_WORD)v96;
              v94 += 2;
              --v95;
            }
            while (v95);
            v46 += result;
            v91 += v92;
            v93 += v90;
            ++v89;
          }
          while (v89 != v43);
        }
        return result;
      }
      if (v41 <= 2016686639)
      {
        if (v41 == 1378955371 || v41 == 1983131952)
          goto LABEL_94;
        v53 = 1999843442;
      }
      else
      {
        if (v41 <= 2016687155)
        {
          if (v41 == 2016686640)
          {
            v49 = v205[4];
            v48 = v205[5] / 2;
            goto LABEL_132;
          }
          if (v41 == 2016686642)
          {
            v49 = v205[4];
            v48 = v205[5];
LABEL_132:
            v86 = ((v49 + (v49 < 0)) & 0xFFFFFFFFFFFFFFFELL) + v48 * v44;
            goto LABEL_133;
          }
LABEL_134:
          v110 = (char *)a3[1].data;
          v111 = a3[2].rowBytes;
          v113 = a3[1].rowBytes;
          v112 = (char *)a3[2].data;
          result = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
          if (v42 && v43)
          {
            for (jj = 0; jj != v43; ++jj)
            {
              v115 = 0;
              v116 = v42;
              do
              {
                v117 = *(_WORD *)&v112[v115];
                v118 = &v46[2 * v115];
                *(_WORD *)v118 = *(_WORD *)&v110[v115];
                *((_WORD *)v118 + 1) = v117;
                v115 += 2;
                --v116;
              }
              while (v116);
              v110 += v113;
              v112 += v111;
              v46 += result;
            }
          }
          return result;
        }
        if (v41 == 2016687216)
        {
LABEL_94:
          v86 = v205[5] * v44 + 8 * v205[4];
LABEL_133:
          v46 = &BaseAddressOfPlane[v86];
          goto LABEL_134;
        }
        v53 = 2016687156;
      }
      if (v41 != v53)
        goto LABEL_134;
      goto LABEL_94;
    }
    if ((_DWORD)result == 2016686642)
      goto LABEL_40;
    v12 = 13364;
LABEL_27:
    v11 = v12 | 0x78340000;
    goto LABEL_39;
  }
  if ((int)result <= 2021078067)
  {
    if ((_DWORD)result == 2021077552)
      goto LABEL_40;
    v11 = 2021077554;
    goto LABEL_39;
  }
  if ((_DWORD)result == 2021078068)
    goto LABEL_40;
  if ((_DWORD)result == 2037741158 || (_DWORD)result == 2037741171)
  {
    v13 = a3->width;
    v14 = a3->rowBytes;
    v15 = v13 + 2;
    if (v13 >= -1)
      v15 = v13 + 1;
    v202 = v15 >> 1;
    v17 = a3->data;
    v16 = a3->height;
    v18 = a3[2].rowBytes;
    v19 = a3[1].data;
    v20 = a1;
    v22 = a3[1].rowBytes;
    v21 = a3[2].data;
    v23 = v20;
    v24 = CVPixelBufferIsPlanar(v20);
    if (a4)
    {
      v25 = v23;
      if (v24)
      {
        v26 = CVPixelBufferGetBytesPerRowOfPlane(v23, 0);
        result = (size_t)CVPixelBufferGetBaseAddressOfPlane(v25, 0);
      }
      else
      {
        v26 = CVPixelBufferGetBytesPerRow(v23);
        result = (size_t)CVPixelBufferGetBaseAddress(v25);
      }
      if (v16 >= 1)
      {
        v104 = 0;
        v105 = result + v205[5] * v26 + 2 * v205[4];
        v106 = v202;
        if (v202 <= 1)
          v106 = 1;
        do
        {
          if (v13 >= 1)
          {
            v107 = 0;
            v108 = 0;
            v109 = v17;
            do
            {
              *v109 = *(_BYTE *)(v105 + v107);
              v19[v108] = *(_BYTE *)(v105 + v107 + 1);
              v109[1] = *(_BYTE *)(v105 + v107 + 2);
              v21[v108++] = *(_BYTE *)(v105 + v107 + 3);
              v107 += 4;
              v109 += 2;
            }
            while (v106 != v108);
          }
          v105 += v26;
          v17 += v14;
          v19 += v22;
          v21 += v18;
          ++v104;
        }
        while (v104 != v16);
      }
    }
    else
    {
      v87 = v23;
      if (v24)
      {
        v88 = CVPixelBufferGetBytesPerRowOfPlane(v23, 0);
        result = (size_t)CVPixelBufferGetBaseAddressOfPlane(v87, 0);
      }
      else
      {
        v88 = CVPixelBufferGetBytesPerRow(v23);
        result = (size_t)CVPixelBufferGetBaseAddress(v87);
      }
      if (v16 >= 1)
      {
        v132 = 0;
        v133 = result + v205[5] * v88 + 2 * v205[4];
        v134 = v202;
        if (v202 <= 1)
          v134 = 1;
        do
        {
          if (v13 >= 1)
          {
            v135 = 0;
            v136 = 0;
            v137 = v17;
            do
            {
              v138 = (_BYTE *)(v133 + v135);
              *v138 = *v137;
              v138[1] = v19[v136];
              v138[2] = v137[1];
              v138[3] = v21[v136++];
              v135 += 4;
              v137 += 2;
            }
            while (v134 != v136);
          }
          v17 += v14;
          v19 += v22;
          v21 += v18;
          v133 += v88;
          ++v132;
        }
        while (v132 != v16);
      }
    }
  }
  return result;
}

size_t scaleOrSetAlpha8(__CVBuffer *a1, int8x16_t *a2, CVPixelBufferRef pixelBuffer, _QWORD *a4, uint64_t a5, int a6, int a7, int a8, int a9)
{
  uint64_t v16;
  size_t v17;
  char *v18;
  vImagePixelCount v19;
  int64_t v20;
  _QWORD *v21;
  size_t BytesPerRowOfPlane;
  uint64_t v23;
  size_t v24;
  void *v25;
  size_t result;
  vImage_Buffer *p_src;
  const vImage_Buffer *v28;
  size_t v29;
  unint64_t v30;
  vImage_Buffer v31;
  vImage_Buffer src;
  _QWORD v33[4];
  vImage_Buffer dest;
  _QWORD v35[4];
  vImage_Buffer v36;

  if (!a8)
    return 0;
  v16 = a4[5];
  v17 = a4[4] + CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 1uLL) * v16;
  v18 = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 1uLL) + v17;
  v21 = a4 + 2;
  v19 = a4[2];
  v20 = v21[1];
  v31.data = v18;
  v31.height = v20;
  v31.width = v19;
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 1uLL);
  v31.rowBytes = BytesPerRowOfPlane;
  if (a7)
  {
    v23 = a2[2].i64[1];
    v24 = a2[2].i64[0] + CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL) * v23;
    src.data = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL) + v24;
    *(int8x16_t *)&src.height = vextq_s8(a2[1], a2[1], 8uLL);
    src.rowBytes = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
    v25 = *(void **)(a5 + 272);
    if (!v25)
    {
      result = vImageScale_Planar8(&src, &v31, 0, a9 | 0x88u);
      if (!result)
        return result;
      v25 = malloc_type_malloc(result, 0x2C6173B6uLL);
      *(_QWORD *)(a5 + 272) = v25;
      if (!v25)
        return 4294954392;
    }
    if (a6)
    {
      v35[2] = src.width;
      v35[3] = 2 * src.rowBytes;
      v36.width = src.width;
      v36.rowBytes = 2 * src.rowBytes;
      v36.data = src.data;
      v36.height = (src.height + 1) >> 1;
      v35[0] = (char *)src.data + src.rowBytes;
      v35[1] = src.height >> 1;
      v33[2] = v31.width;
      v33[3] = 2 * v31.rowBytes;
      dest.width = v31.width;
      dest.rowBytes = 2 * v31.rowBytes;
      dest.data = v31.data;
      dest.height = (v31.height + 1) >> 1;
      v33[0] = (char *)v31.data + v31.rowBytes;
      v33[1] = v31.height >> 1;
      result = vImageScale_Planar8(&v36, &dest, v25, a9 | 8u);
      if ((_DWORD)result)
        return result;
      v25 = *(void **)(a5 + 272);
      p_src = (vImage_Buffer *)v35;
      v28 = (const vImage_Buffer *)v33;
    }
    else
    {
      p_src = &src;
      v28 = &v31;
    }
    return vImageScale_Planar8(p_src, v28, v25, a9 | 8u);
  }
  else
  {
    if (v20 >= 1)
    {
      v29 = BytesPerRowOfPlane;
      v30 = v20 + 1;
      do
      {
        memset(v18, 255, v19);
        v18 += v29;
        --v30;
      }
      while (v30 > 1);
    }
    return 0;
  }
}

size_t vt_Scale_8_Y_and_UVPlanes(__CVBuffer *a1, int8x16_t *a2, __CVBuffer *a3, int8x16_t *a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10)
{
  return vt_ScaleCommon_Y_and_UVPlanes(a1, a2, a3, a4, a5, a6, 1, a10);
}

size_t vt_ScaleCommon_Y_and_UVPlanes(__CVBuffer *a1, int8x16_t *a2, __CVBuffer *a3, int8x16_t *a4, uint64_t a5, int a6, int a7, int a8)
{
  OSType PixelFormatType;
  OSType v15;
  uint64_t (*v16)(_QWORD *, _QWORD *, void *, uint64_t);
  unint64_t v17;
  char *v18;
  uint64_t v19;
  size_t v20;
  uint64_t (*v22)(_QWORD *, _QWORD *, void *, uint64_t);
  char v23;
  uint64_t (*v24)(_QWORD *, _QWORD *, void *, uint64_t);
  int8x16_t *v26;

  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  v15 = CVPixelBufferGetPixelFormatType(a3);
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(a3, 0);
  vt_SetupOrCleanupPlanarBuffers(a1, a2, a5, 1);
  v26 = a4;
  vt_SetupOrCleanupPlanarBuffers(a3, a4, a5 + 128, 1);
  if (CVPixelBufferGetPixelFormatType(a1) == 1983000880)
    vt_Copy_v210_10bitBiPlanarYUV422(a1, (uint64_t)a2, (uint64_t *)a5);
  if (!a7)
  {
    v22 = 0;
    v23 = 1;
    v24 = (uint64_t (*)(_QWORD *, _QWORD *, void *, uint64_t))MEMORY[0x1E0C8D708];
    v16 = (uint64_t (*)(_QWORD *, _QWORD *, void *, uint64_t))MEMORY[0x1E0C8D720];
    goto LABEL_13;
  }
  if (v15 != 1982882104)
    goto LABEL_12;
  if (PixelFormatType == 1982882104)
  {
    v23 = 0;
    v24 = (uint64_t (*)(_QWORD *, _QWORD *, void *, uint64_t))MEMORY[0x1E0C8D710];
    v16 = (uint64_t (*)(_QWORD *, _QWORD *, void *, uint64_t))MEMORY[0x1E0C8D728];
    v22 = (uint64_t (*)(_QWORD *, _QWORD *, void *, uint64_t))MEMORY[0x1E0C8D728];
    goto LABEL_13;
  }
  if (!*(_QWORD *)(a5 + 232))
  {
LABEL_12:
    v22 = 0;
    v23 = 1;
    v24 = (uint64_t (*)(_QWORD *, _QWORD *, void *, uint64_t))MEMORY[0x1E0C8D710];
    v16 = (uint64_t (*)(_QWORD *, _QWORD *, void *, uint64_t))MEMORY[0x1E0C8D728];
    goto LABEL_13;
  }
  v17 = 0;
  v18 = *(char **)(a5 + 224);
  v24 = (uint64_t (*)(_QWORD *, _QWORD *, void *, uint64_t))MEMORY[0x1E0C8D710];
  v16 = (uint64_t (*)(_QWORD *, _QWORD *, void *, uint64_t))MEMORY[0x1E0C8D728];
  do
  {
    memset(v18, 255, *(_QWORD *)(a5 + 240));
    v18 += *(_QWORD *)(a5 + 248);
    ++v17;
  }
  while (v17 < *(_QWORD *)(a5 + 232));
  v22 = 0;
  v23 = 1;
LABEL_13:
  v19 = a8 | 8u;
  v20 = vtScale((_QWORD *)a5, (_QWORD *)(a5 + 128), (void **)(a5 + 256), v19, v16, a6);
  if (!(_DWORD)v20)
  {
    v20 = vtScale((_QWORD *)(a5 + 32), (_QWORD *)(a5 + 160), (void **)(a5 + 264), v19, v24, a6);
    if (!(_DWORD)v20)
    {
      if ((v23 & 1) != 0)
        v20 = 0;
      else
        v20 = vtScale((_QWORD *)(a5 + 96), (_QWORD *)(a5 + 224), (void **)(a5 + 256), v19, v22, a6);
      if (CVPixelBufferGetPixelFormatType(a3) == 1983000880)
        vt_Copy_10bitBiPlanarYUV422_v210((uint64_t *)(a5 + 128), a3, (uint64_t)v26);
    }
  }
  vt_SetupOrCleanupPlanarBuffers(a1, a2, a5, 0);
  vt_SetupOrCleanupPlanarBuffers(a3, v26, a5 + 128, 0);
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  CVPixelBufferUnlockBaseAddress(a3, 0);
  return v20;
}

size_t vt_Scale_16_Y_and_UVPlanes(__CVBuffer *a1, int8x16_t *a2, __CVBuffer *a3, int8x16_t *a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10)
{
  return vt_ScaleCommon_Y_and_UVPlanes(a1, a2, a3, a4, a5, a6, 0, a10);
}

vImage_Error vt_Scale_HalfFloat_Y_and_UVPlanes(__CVBuffer *a1, int8x16_t *a2, __CVBuffer *a3, int8x16_t *a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10)
{
  OSType PixelFormatType;
  OSType v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  size_t v24;
  char *BaseAddressOfPlane;
  uint64_t v26;
  vImagePixelCount v27;
  uint64_t v28;
  size_t v29;
  uint64_t v30;
  size_t v31;
  char *v32;
  uint64_t v33;
  vImagePixelCount v34;
  void *v35;
  vImage_Error v36;
  vImage_Error v37;
  vImage_Buffer *p_src;
  vImage_Buffer *p_dest;
  void *v40;
  vImage_Error v41;
  vImage_Error v42;
  vImage_Buffer v46;
  vImage_Buffer dest;
  vImage_Buffer v48;
  vImage_Buffer src;
  vImage_Buffer v50;
  vImage_Buffer v51;
  vImage_Buffer v52;
  vImage_Buffer v53;

  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  v15 = CVPixelBufferGetPixelFormatType(a3);
  if (v15 == 1751527984)
    v16 = 2;
  else
    v16 = 1;
  if (v15 == 1751527984 || v15 == 1751527986)
    v18 = 2;
  else
    v18 = 1;
  if ((PixelFormatType & 0xFFFFFFFD) == 0x68663230)
    v19 = 2;
  else
    v19 = 1;
  if (PixelFormatType == 1751527984)
    v20 = 2;
  else
    v20 = 1;
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(a3, 0);
  v21 = a2[2].i64[1];
  v22 = CVPixelBufferGetBytesPerRowOfPlane(a1, 0) * v21 + 2 * a2[2].i64[0];
  src.data = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0) + v22;
  *(int8x16_t *)&src.height = vextq_s8(a2[1], a2[1], 8uLL);
  src.rowBytes = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  v23 = a2[2].i64[1];
  v24 = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL) * v23 + 4 * a2[2].i64[0];
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
  v26 = a2[1].i64[0];
  v27 = a2[1].i64[1] / v20;
  v48.data = &BaseAddressOfPlane[v24];
  v48.height = v27;
  v48.width = v26 / v19;
  v48.rowBytes = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
  v28 = a4[2].i64[1];
  v29 = CVPixelBufferGetBytesPerRowOfPlane(a3, 0) * v28 + 2 * a4[2].i64[0];
  dest.data = (char *)CVPixelBufferGetBaseAddressOfPlane(a3, 0) + v29;
  *(int8x16_t *)&dest.height = vextq_s8(a4[1], a4[1], 8uLL);
  dest.rowBytes = CVPixelBufferGetBytesPerRowOfPlane(a3, 0);
  v30 = a4[2].i64[1];
  v31 = CVPixelBufferGetBytesPerRowOfPlane(a3, 1uLL) * v30 + 4 * a4[2].i64[0];
  v32 = (char *)CVPixelBufferGetBaseAddressOfPlane(a3, 1uLL) + v31;
  v33 = a4[1].i64[0];
  v34 = a4[1].i64[1] / v16;
  v46.data = v32;
  v46.height = v34;
  v46.width = v33 / v18;
  v46.rowBytes = CVPixelBufferGetBytesPerRowOfPlane(a3, 1uLL);
  v35 = *(void **)(a5 + 256);
  if (!v35)
  {
    v36 = vImageScale_Planar16F(&src, &dest, 0, a10 | 0x88u);
    if (!v36)
      goto LABEL_25;
    v35 = malloc_type_malloc(v36, 0x2C6173B6uLL);
    *(_QWORD *)(a5 + 256) = v35;
    if (!v35)
    {
LABEL_34:
      v37 = 4294954392;
      goto LABEL_33;
    }
  }
  if (a6)
  {
    v52.width = src.width;
    v52.rowBytes = 2 * src.rowBytes;
    v53.width = src.width;
    v53.rowBytes = 2 * src.rowBytes;
    v53.data = src.data;
    v53.height = (src.height + 1) >> 1;
    v52.data = (char *)src.data + src.rowBytes;
    v52.height = src.height >> 1;
    v50.width = dest.width;
    v50.rowBytes = 2 * dest.rowBytes;
    v51.width = dest.width;
    v51.rowBytes = 2 * dest.rowBytes;
    v51.data = dest.data;
    v51.height = (dest.height + 1) >> 1;
    v50.data = (char *)dest.data + dest.rowBytes;
    v50.height = dest.height >> 1;
    v37 = vImageScale_Planar16F(&v53, &v51, v35, a10 | 8u);
    if ((_DWORD)v37)
      goto LABEL_24;
    v35 = *(void **)(a5 + 256);
    p_src = &v52;
    p_dest = &v50;
  }
  else
  {
    p_src = &src;
    p_dest = &dest;
  }
  v37 = vImageScale_Planar16F(p_src, p_dest, v35, a10 | 8u);
LABEL_24:
  if ((_DWORD)v37)
    goto LABEL_33;
LABEL_25:
  v40 = *(void **)(a5 + 264);
  if (!v40)
  {
    v41 = vImageScale_CbCr16F(&v48, &v46, 0, a10 | 0x88u);
    if (!v41)
    {
      v37 = 0;
      goto LABEL_33;
    }
    v40 = malloc_type_malloc(v41, 0x2C6173B6uLL);
    *(_QWORD *)(a5 + 264) = v40;
    if (!v40)
      goto LABEL_34;
  }
  if (a6)
  {
    v52.width = v48.width;
    v52.rowBytes = 2 * v48.rowBytes;
    v53.width = v48.width;
    v53.rowBytes = 2 * v48.rowBytes;
    v53.data = v48.data;
    v53.height = (v48.height + 1) >> 1;
    v52.data = (char *)v48.data + v48.rowBytes;
    v52.height = v48.height >> 1;
    v50.width = v46.width;
    v50.rowBytes = 2 * v46.rowBytes;
    v51.width = v46.width;
    v51.rowBytes = 2 * v46.rowBytes;
    v51.data = v46.data;
    v51.height = (v46.height + 1) >> 1;
    v50.data = (char *)v46.data + v46.rowBytes;
    v50.height = v46.height >> 1;
    v42 = vImageScale_CbCr16F(&v53, &v51, v40, a10 | 8u);
    if (!(_DWORD)v42)
      v42 = vImageScale_CbCr16F(&v52, &v50, *(void **)(a5 + 264), a10 | 8u);
  }
  else
  {
    v42 = vImageScale_CbCr16F(&v48, &v46, v40, a10 | 8u);
  }
  v37 = v42;
LABEL_33:
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  CVPixelBufferUnlockBaseAddress(a3, 0);
  return v37;
}

vImage_Error vt_Scale_101010_Together(__CVBuffer *a1, int8x16_t *a2, __CVBuffer *a3, int8x16_t *a4, uint64_t a5, int a6, int a7, int a8, uint64_t a9, int a10)
{
  uint64_t v17;
  size_t v18;
  uint64_t v19;
  size_t v20;
  void *v21;
  vImage_Error v22;
  vImage_Error v23;
  vImage_Buffer *p_src;
  vImage_Buffer *p_dest;
  vImage_Buffer dest;
  vImage_Buffer src;
  _QWORD v30[4];
  vImage_Buffer v31;
  _QWORD v32[4];
  vImage_Buffer v33;

  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(a3, 0);
  v17 = a2[2].i64[1];
  v18 = CVPixelBufferGetBytesPerRow(a1) * v17 + 4 * a2[2].i64[0];
  src.data = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0) + v18;
  *(int8x16_t *)&src.height = vextq_s8(a2[1], a2[1], 8uLL);
  src.rowBytes = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  v19 = a4[2].i64[1];
  v20 = CVPixelBufferGetBytesPerRow(a3) * v19 + 4 * a4[2].i64[0];
  dest.data = (char *)CVPixelBufferGetBaseAddressOfPlane(a3, 0) + v20;
  *(int8x16_t *)&dest.height = vextq_s8(a4[1], a4[1], 8uLL);
  dest.rowBytes = CVPixelBufferGetBytesPerRowOfPlane(a3, 0);
  v21 = *(void **)(a5 + 256);
  if (!v21)
  {
    v22 = vImageScale_XRGB2101010W(&src, &dest, 0, a10 | 0x88u);
    if (!v22)
    {
LABEL_10:
      scaleOrSetAlpha8(a1, a2, a3, a4, a5, a6, a7, a8, a10);
      v23 = 0;
      goto LABEL_11;
    }
    v21 = malloc_type_malloc(v22, 0x2C6173B6uLL);
    *(_QWORD *)(a5 + 256) = v21;
    if (!v21)
    {
      v23 = 4294954392;
      goto LABEL_11;
    }
  }
  if (a6)
  {
    v32[2] = src.width;
    v32[3] = 2 * src.rowBytes;
    v33.width = src.width;
    v33.rowBytes = 2 * src.rowBytes;
    v33.data = src.data;
    v33.height = (src.height + 1) >> 1;
    v32[0] = (char *)src.data + src.rowBytes;
    v32[1] = src.height >> 1;
    v30[2] = dest.width;
    v30[3] = 2 * dest.rowBytes;
    v31.width = dest.width;
    v31.rowBytes = 2 * dest.rowBytes;
    v31.data = dest.data;
    v31.height = (dest.height + 1) >> 1;
    v30[0] = (char *)dest.data + dest.rowBytes;
    v30[1] = dest.height >> 1;
    v23 = vImageScale_XRGB2101010W(&v33, &v31, v21, a10 | 8u);
    if ((_DWORD)v23)
      goto LABEL_9;
    v21 = *(void **)(a5 + 256);
    p_src = (vImage_Buffer *)v32;
    p_dest = (vImage_Buffer *)v30;
  }
  else
  {
    p_src = &src;
    p_dest = &dest;
  }
  v23 = vImageScale_XRGB2101010W(p_src, p_dest, v21, a10 | 8u);
LABEL_9:
  if (!(_DWORD)v23)
    goto LABEL_10;
LABEL_11:
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  CVPixelBufferUnlockBaseAddress(a3, 0);
  return v23;
}

vImage_Error vt_Scale_16ARGB_Together(__CVBuffer *a1, int8x16_t *a2, __CVBuffer *a3, int8x16_t *a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10)
{
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  size_t v19;
  void *v20;
  vImage_Error v21;
  vImage_Error v22;
  vImage_Buffer *p_src;
  const vImage_Buffer *v24;
  vImage_Buffer v26;
  vImage_Buffer src;
  _QWORD v28[4];
  vImage_Buffer dest;
  _QWORD v30[4];
  vImage_Buffer v31;

  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(a3, 0);
  v16 = a2[2].i64[1];
  v17 = CVPixelBufferGetBytesPerRow(a1) * v16 + 8 * a2[2].i64[0];
  src.data = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0) + v17;
  *(int8x16_t *)&src.height = vextq_s8(a2[1], a2[1], 8uLL);
  src.rowBytes = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  v18 = a4[2].i64[1];
  v19 = CVPixelBufferGetBytesPerRow(a3) * v18 + 8 * a4[2].i64[0];
  v26.data = (char *)CVPixelBufferGetBaseAddressOfPlane(a3, 0) + v19;
  *(int8x16_t *)&v26.height = vextq_s8(a4[1], a4[1], 8uLL);
  v26.rowBytes = CVPixelBufferGetBytesPerRowOfPlane(a3, 0);
  v20 = *(void **)(a5 + 256);
  if (!v20)
  {
    v21 = vImageScale_ARGB16U(&src, &v26, 0, a10 | 0x88u);
    if (!v21)
    {
      v22 = 0;
      goto LABEL_9;
    }
    v20 = malloc_type_malloc(v21, 0x2C6173B6uLL);
    *(_QWORD *)(a5 + 256) = v20;
    if (!v20)
    {
      v22 = 4294954392;
      goto LABEL_9;
    }
  }
  if (!a6)
  {
    p_src = &src;
    v24 = &v26;
    goto LABEL_8;
  }
  v30[2] = src.width;
  v30[3] = 2 * src.rowBytes;
  v31.width = src.width;
  v31.rowBytes = 2 * src.rowBytes;
  v31.data = src.data;
  v31.height = (src.height + 1) >> 1;
  v30[0] = (char *)src.data + src.rowBytes;
  v30[1] = src.height >> 1;
  v28[2] = v26.width;
  v28[3] = 2 * v26.rowBytes;
  dest.width = v26.width;
  dest.rowBytes = 2 * v26.rowBytes;
  dest.data = v26.data;
  dest.height = (v26.height + 1) >> 1;
  v28[0] = (char *)v26.data + v26.rowBytes;
  v28[1] = v26.height >> 1;
  v22 = vImageScale_ARGB16U(&v31, &dest, v20, a10 | 8u);
  if (!(_DWORD)v22)
  {
    v20 = *(void **)(a5 + 256);
    p_src = (vImage_Buffer *)v30;
    v24 = (const vImage_Buffer *)v28;
LABEL_8:
    v22 = vImageScale_ARGB16U(p_src, v24, v20, a10 | 8u);
  }
LABEL_9:
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  CVPixelBufferUnlockBaseAddress(a3, 0);
  return v22;
}

vImage_Error vt_Scale_HalfFloatRGBA_Together(__CVBuffer *a1, int8x16_t *a2, __CVBuffer *a3, int8x16_t *a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10)
{
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  size_t v19;
  void *v20;
  vImage_Error v21;
  vImage_Error v22;
  vImage_Buffer *p_src;
  const vImage_Buffer *v24;
  vImage_Buffer v26;
  vImage_Buffer src;
  _QWORD v28[4];
  vImage_Buffer dest;
  _QWORD v30[4];
  vImage_Buffer v31;

  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(a3, 0);
  v16 = a2[2].i64[1];
  v17 = CVPixelBufferGetBytesPerRowOfPlane(a1, 0) * v16 + 8 * a2[2].i64[0];
  src.data = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0) + v17;
  *(int8x16_t *)&src.height = vextq_s8(a2[1], a2[1], 8uLL);
  src.rowBytes = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  v18 = a4[2].i64[1];
  v19 = CVPixelBufferGetBytesPerRowOfPlane(a3, 0) * v18 + 8 * a4[2].i64[0];
  v26.data = (char *)CVPixelBufferGetBaseAddressOfPlane(a3, 0) + v19;
  *(int8x16_t *)&v26.height = vextq_s8(a4[1], a4[1], 8uLL);
  v26.rowBytes = CVPixelBufferGetBytesPerRowOfPlane(a3, 0);
  v20 = *(void **)(a5 + 256);
  if (!v20)
  {
    v21 = vImageScale_ARGB16F(&src, &v26, 0, a10 | 0x88u);
    if (!v21)
    {
      v22 = 0;
      goto LABEL_9;
    }
    v20 = malloc_type_malloc(v21, 0x2C6173B6uLL);
    *(_QWORD *)(a5 + 256) = v20;
    if (!v20)
    {
      v22 = 4294954392;
      goto LABEL_9;
    }
  }
  if (!a6)
  {
    p_src = &src;
    v24 = &v26;
    goto LABEL_8;
  }
  v30[2] = src.width;
  v30[3] = 2 * src.rowBytes;
  v31.width = src.width;
  v31.rowBytes = 2 * src.rowBytes;
  v31.data = src.data;
  v31.height = (src.height + 1) >> 1;
  v30[0] = (char *)src.data + src.rowBytes;
  v30[1] = src.height >> 1;
  v28[2] = v26.width;
  v28[3] = 2 * v26.rowBytes;
  dest.width = v26.width;
  dest.rowBytes = 2 * v26.rowBytes;
  dest.data = v26.data;
  dest.height = (v26.height + 1) >> 1;
  v28[0] = (char *)v26.data + v26.rowBytes;
  v28[1] = v26.height >> 1;
  v22 = vImageScale_ARGB16F(&v31, &dest, v20, a10 | 8u);
  if (!(_DWORD)v22)
  {
    v20 = *(void **)(a5 + 256);
    p_src = (vImage_Buffer *)v30;
    v24 = (const vImage_Buffer *)v28;
LABEL_8:
    v22 = vImageScale_ARGB16F(p_src, v24, v20, a10 | 8u);
  }
LABEL_9:
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  CVPixelBufferUnlockBaseAddress(a3, 0);
  return v22;
}

vImage_Error vt_Scale_floatARGB_Together(__CVBuffer *a1, int8x16_t *a2, __CVBuffer *a3, int8x16_t *a4, vImage_Buffer *a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, vImage_Flags a10)
{
  void *data;
  vImage_Error v17;
  size_t rowBytes;
  void *v19;
  vImagePixelCount height;
  char *v21;
  size_t v22;
  char *v23;
  vImagePixelCount v24;
  vImage_Error v25;
  const vImage_Buffer *v26;
  const vImage_Buffer *v27;
  _QWORD v29[2];
  vImagePixelCount v30;
  uint64_t v31;
  vImage_Buffer dest;
  _QWORD v33[2];
  vImagePixelCount width;
  uint64_t v35;
  vImage_Buffer src;

  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(a3, 0);
  vt_SetupOrCleanupPlanarBuffers(a1, a2, (uint64_t)a5, 1);
  vt_CopyToOrFromPlanarBuffers(a1, a2, a5, 1, a10);
  vt_SetupOrCleanupPlanarBuffers(a3, a4, (uint64_t)&a5[4], 1);
  data = a5[8].data;
  if (!data)
  {
    v17 = vImageScale_ARGBFFFF(a5, a5 + 4, 0, a10 | 0x88);
    if (!v17)
    {
LABEL_10:
      vt_CopyToOrFromPlanarBuffers(a3, a4, a5 + 4, 0, a10);
      v25 = 0;
      goto LABEL_11;
    }
    data = malloc_type_malloc(v17, 0x2C6173B6uLL);
    a5[8].data = data;
    if (!data)
    {
      v25 = 4294954392;
      goto LABEL_11;
    }
  }
  if (a6)
  {
    rowBytes = a5->rowBytes;
    v19 = a5->data;
    height = a5->height;
    v21 = (char *)a5->data + rowBytes;
    width = a5->width;
    v35 = 2 * rowBytes;
    src.width = width;
    src.rowBytes = 2 * rowBytes;
    src.data = v19;
    src.height = (height + 1) >> 1;
    v33[0] = v21;
    v33[1] = height >> 1;
    v22 = a5[4].rowBytes;
    v23 = (char *)a5[4].data;
    v24 = a5[4].height;
    v30 = a5[4].width;
    v31 = 2 * v22;
    dest.width = v30;
    dest.rowBytes = 2 * v22;
    dest.data = v23;
    dest.height = (v24 + 1) >> 1;
    v29[0] = &v23[v22];
    v29[1] = v24 >> 1;
    v25 = vImageScale_ARGBFFFF(&src, &dest, data, a10 | 8);
    if ((_DWORD)v25)
      goto LABEL_9;
    data = a5[8].data;
    v26 = (const vImage_Buffer *)v33;
    v27 = (const vImage_Buffer *)v29;
  }
  else
  {
    v26 = a5;
    v27 = a5 + 4;
  }
  v25 = vImageScale_ARGBFFFF(v26, v27, data, a10 | 8);
LABEL_9:
  if (!(_DWORD)v25)
    goto LABEL_10;
LABEL_11:
  vt_SetupOrCleanupPlanarBuffers(a1, a2, (uint64_t)a5, 0);
  vt_SetupOrCleanupPlanarBuffers(a3, a4, (uint64_t)&a5[4], 0);
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  CVPixelBufferUnlockBaseAddress(a3, 0);
  return v25;
}

uint64_t VTPixelTransferSessionCreateScalingParameters(__CVBuffer *a1, unint64_t a2, unint64_t a3, const __CFString *a4, __int128 *a5, __int128 *a6, const void *a7, const void *a8, uint64_t a9, _QWORD *a10, _QWORD *a11, CFDictionaryRef *a12, const __CFNumber **a13)
{
  CFTypeRef v20;
  int Width;
  int Height;
  __int128 v23;
  uint64_t v24;
  unint64_t v25;
  int CleanRect;
  __int128 v27;
  const __CFString *v28;
  const __CFString *v29;
  CFTypeRef v30;
  int v31;
  int v32;
  const void *v33;
  CFTypeID v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  const void *v40;
  CFTypeID v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  const __CFNumber **v64;
  int v65;
  int v66;
  __CVBuffer *v67;
  CFTypeRef v69;
  double v70;
  double v71;
  double v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int16 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  int v82[4];

  v81 = 0;
  *(_QWORD *)v82 = 0;
  v79 = 0;
  v80 = 0;
  v78 = 0;
  v77 = 0;
  v76 = 0;
  v20 = CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8D50], 0);
  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  v69 = v20;
  vtBufferGetCleanRect(Width, Height, v20, &v82[1], v82, (int *)&v81 + 1, (int *)&v81, (int *)&v80 + 1, (int *)&v80);
  v23 = a5[1];
  v73 = *a5;
  v74 = v23;
  v75 = a5[2];
  v24 = vtBufferApplyCropToRect(&v73, SHIDWORD(v81), v81, SHIDWORD(v80), v80, (_DWORD *)&v81 + 1, &v81, (_DWORD *)&v80 + 1, (int *)&v80, (char *)&v76 + 1);
  if ((_DWORD)v24
    || (v25 = a2,
        CleanRect = vtBufferGetCleanRect(a2, a3, a7, (int *)&v79 + 1, (int *)&v79, (int *)&v78 + 1, (int *)&v78, (int *)&v77 + 1, (int *)&v77), v27 = a6[1], v73 = *a6, v74 = v27, v75 = a6[2], v24 = vtBufferApplyCropToRect(&v73, SHIDWORD(v78), v78, SHIDWORD(v77), v77,
                (_DWORD *)&v78 + 1,
                &v78,
                (_DWORD *)&v77 + 1,
                (int *)&v77,
                (char *)&v76),
        (_DWORD)v24))
  {
    v49 = v24;
    goto LABEL_54;
  }
  if (v82[1] && v82[0] && HIDWORD(v79) && (_DWORD)v79)
  {
    if (*(_QWORD *)v82 != v79)
    {
      vtRoundDimensionsToPixelBlockBoundary();
      vtRoundDimensionsToPixelBlockBoundary();
    }
    if ((_BYTE)v76)
      v28 = CFSTR("CropSourceToCleanAperture");
    else
      v28 = a4;
    if (v28)
      v29 = v28;
    else
      v29 = CFSTR("Normal");
    if (CFEqual(v29, CFSTR("CropSourceToCleanAperture")))
    {
      if (CleanRect)
        *a12 = (CFDictionaryRef)CFRetain(a7);
      if (a8)
        *a13 = (const __CFNumber *)CFRetain(a8);
      goto LABEL_50;
    }
    if (CFEqual(v29, CFSTR("Letterbox")))
    {
      v72 = 0.0;
      *(_QWORD *)&v73 = 0;
      v70 = 0.0;
      v71 = 0.0;
      v30 = CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8E68], 0);
      if (CleanRect)
        *a12 = (CFDictionaryRef)CFRetain(a7);
      v32 = v80;
      v31 = HIDWORD(v80);
      vtBufferGetPixelAndPictureAspectRatio((CFTypeID)v30, SHIDWORD(v80), v80, (double *)&v73, &v71);
      v33 = a8;
      if (a8)
        v34 = (CFTypeID)a8;
      else
        v34 = (CFTypeID)v30;
      v35 = HIDWORD(v77);
      v36 = v77;
      vtBufferGetPixelAndPictureAspectRatio(v34, SHIDWORD(v77), v77, &v72, &v70);
      if (a8 || (v33 = v30) != 0)
        *a13 = (const __CFNumber *)CFRetain(v33);
      if (v71 <= v70)
      {
        if (v71 >= v70
          || (v45 = vcvtmd_s64_f64((double)v35 - *(double *)&v73 * (double)(v36 * v31) / (v72 * (double)v32) + 0.5),
              v45 < 1))
        {
LABEL_48:
          if (v30)
            CFRelease(v30);
          goto LABEL_50;
        }
        HIDWORD(v78) += v45 >> 1;
        vtRoundDimensionsToPixelBlockBoundary();
        HIDWORD(v77) = v35 - v45;
      }
      else
      {
        v37 = vcvtmd_s64_f64((double)v36 - v72 * (double)(v35 * v32) / (*(double *)&v73 * (double)v31) + 0.5);
        if (v37 < 1)
          goto LABEL_48;
        LODWORD(v78) = v78 + (v37 >> 1);
        vtRoundDimensionsToPixelBlockBoundary();
        LODWORD(v77) = v36 - v37;
      }
      vtRoundDimensionsToPixelBlockBoundary();
      goto LABEL_48;
    }
    if (CFEqual(v29, CFSTR("Trim")))
    {
      v72 = 0.0;
      *(_QWORD *)&v73 = 0;
      v70 = 0.0;
      v71 = 0.0;
      v30 = CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8E68], 0);
      if (CleanRect)
        *a12 = (CFDictionaryRef)CFRetain(a7);
      v39 = v80;
      v38 = HIDWORD(v80);
      vtBufferGetPixelAndPictureAspectRatio((CFTypeID)v30, SHIDWORD(v80), v80, (double *)&v73, &v71);
      v40 = a8;
      if (a8)
        v41 = (CFTypeID)a8;
      else
        v41 = (CFTypeID)v30;
      v42 = HIDWORD(v77);
      v43 = v77;
      vtBufferGetPixelAndPictureAspectRatio(v41, SHIDWORD(v77), v77, &v72, &v70);
      if (a8 || (v40 = v30) != 0)
        *a13 = (const __CFNumber *)CFRetain(v40);
      if (v71 <= v70)
      {
        if (v71 < v70)
        {
          v61 = vcvtmd_s64_f64(((double)v39 - *(double *)&v73 * (double)(v43 * v38) / (v72 * (double)v42)) * 0.5 + 0.5);
          if (v61 >= 1)
          {
            LODWORD(v80) = v39 - 2 * v61;
            LODWORD(v81) = v81 + v61;
          }
        }
      }
      else
      {
        v44 = vcvtmd_s64_f64(((double)v38 - v72 * (double)(v42 * v39) / (*(double *)&v73 * (double)v43)) * 0.5 + 0.5);
        if (v44 >= 1)
        {
          HIDWORD(v80) = v38 - 2 * v44;
          HIDWORD(v81) += v44;
        }
      }
      goto LABEL_48;
    }
    v55 = v82[0];
    v54 = v82[1];
    v56 = *((_QWORD *)a5 + 2);
    v57 = *((_QWORD *)a5 + 3);
    v59 = *((_QWORD *)a5 + 4);
    v58 = *((_QWORD *)a5 + 5);
    if (v59 < 1)
    {
      v60 = 0;
      v56 += v59;
      LODWORD(v59) = 0;
    }
    else
    {
      v54 = v82[1] - v59;
      if (v82[1] - (int)v59 < 1)
        goto LABEL_67;
      v60 = 1;
    }
    if (v58 < 1)
    {
      v57 += v58;
      LODWORD(v58) = 0;
LABEL_69:
      if (v56 < v54)
        v62 = v56;
      else
        v62 = v54;
      if (v57 < v55)
        v63 = v57;
      else
        v63 = v55;
      if (v57 < v55 || v56 < v54 || v60)
      {
        if (a12)
          vtBufferCreateScaledCleanRectFromCropCleanRect(v59, v58, v62, v63, SHIDWORD(v81), v81, SHIDWORD(v80), v80, v25, a3, a12);
        if (!a13)
          goto LABEL_87;
        v64 = a13;
        v67 = a1;
        v65 = v62;
        v66 = v63;
      }
      else
      {
        if (a12)
          vtBufferCreateScaledCleanRect(a1, v25, a3, a12);
        if (!a13)
          goto LABEL_87;
        v64 = a13;
        v66 = v82[0];
        v65 = v82[1];
        v67 = a1;
      }
      vtBufferCreateScaledPixelAspectRatio(v67, v65, v66, v25, a3, v64);
LABEL_87:
      v81 = __PAIR64__(v59, v58);
      v80 = __PAIR64__(v62, v63);
      v78 = 0;
      v77 = v79;
      goto LABEL_50;
    }
    v55 = v82[0] - v58;
    if (v82[0] - (int)v58 >= 1)
    {
      v60 = 1;
      goto LABEL_69;
    }
LABEL_67:
    v49 = 4294954394;
    goto LABEL_54;
  }
LABEL_50:
  if (a10)
  {
    v46 = v82[0];
    *a10 = v82[1];
    a10[1] = v46;
    v47 = (int)v81;
    a10[4] = SHIDWORD(v81);
    a10[5] = v47;
    v48 = (int)v80;
    a10[2] = SHIDWORD(v80);
    a10[3] = v48;
  }
  v49 = 0;
  if (a11)
  {
    v50 = (int)v79;
    *a11 = SHIDWORD(v79);
    a11[1] = v50;
    v51 = (int)v78;
    a11[4] = SHIDWORD(v78);
    a11[5] = v51;
    v52 = (int)v77;
    a11[2] = SHIDWORD(v77);
    a11[3] = v52;
  }
LABEL_54:
  if (v69)
    CFRelease(v69);
  return v49;
}

uint64_t vtBufferApplyCropToRect(_QWORD *a1, int a2, int a3, int a4, int a5, _DWORD *a6, _DWORD *a7, _DWORD *a8, int *a9, char *a10)
{
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  BOOL v18;
  char v19;

  v10 = a1[4];
  if (v10 <= a2)
  {
    v11 = 0;
    a1[2] += v10 - a2;
    LODWORD(v10) = a2;
  }
  else
  {
    a4 += a2 - v10;
    if (a4 < 1)
      return 4294954394;
    v11 = 1;
  }
  v12 = a1[5];
  if (v12 <= a3)
  {
    v13 = v12 - a3 + a1[3];
    a1[3] = v13;
    LODWORD(v12) = a3;
    goto LABEL_9;
  }
  a5 += a3 - v12;
  if (a5 < 1)
    return 4294954394;
  v13 = a1[3];
  v11 = 1;
LABEL_9:
  v14 = 0;
  v15 = a1[2];
  if (v13 >= a5)
    v16 = a5;
  else
    v16 = v13;
  v17 = v15 < a4;
  if (v15 >= a4)
    LODWORD(v15) = a4;
  *a6 = v10;
  v18 = v17 || v13 < a5;
  *a7 = v12;
  if (v18)
    v19 = 1;
  else
    v19 = v11;
  *a8 = v15;
  *a9 = v16;
  *a10 = v19;
  return v14;
}

uint64_t vtRoundDimensionsToPixelBlockBoundary()
{
  const __CFDictionary *DescriptionWithPixelFormatType;
  int IntIfPresent;
  uint64_t result;
  const __CFArray *v4;
  CFTypeID v5;
  CFIndex i;
  const void *ValueAtIndex;
  CFTypeID v8;

  DescriptionWithPixelFormatType = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
  IntIfPresent = FigCFDictionaryGetIntIfPresent();
  result = FigCFDictionaryGetIntIfPresent();
  if (DescriptionWithPixelFormatType)
  {
    if (!IntIfPresent && (_DWORD)result == 0)
    {
      result = (uint64_t)CFDictionaryGetValue(DescriptionWithPixelFormatType, (const void *)*MEMORY[0x1E0CA91B0]);
      if (result)
      {
        v4 = (const __CFArray *)result;
        v5 = CFGetTypeID((CFTypeRef)result);
        result = CFArrayGetTypeID();
        if (v5 == result)
        {
          result = CFArrayGetCount(v4);
          if (result >= 1)
          {
            for (i = 0; i < result; ++i)
            {
              ValueAtIndex = CFArrayGetValueAtIndex(v4, i);
              if (ValueAtIndex)
              {
                v8 = CFGetTypeID(ValueAtIndex);
                if (v8 == CFDictionaryGetTypeID())
                {
                  FigCFDictionaryGetIntIfPresent();
                  FigCFDictionaryGetIntIfPresent();
                }
              }
              result = CFArrayGetCount(v4);
            }
          }
        }
      }
    }
  }
  return result;
}

CFTypeID vtBufferGetPixelAndPictureAspectRatio(CFTypeID result, int a2, int a3, double *a4, double *a5)
{
  const void *v9;
  CFTypeID TypeID;
  const __CFNumber *v11;
  CFTypeID v12;
  const __CFNumber *v13;
  CFTypeID v14;
  int v15;
  double v16;
  double v17;
  int v18;
  int valuePtr;

  if (!result)
    goto LABEL_10;
  v9 = (const void *)result;
  TypeID = CFDictionaryGetTypeID();
  result = CFGetTypeID(v9);
  if (TypeID != result)
    goto LABEL_10;
  v18 = 1;
  valuePtr = 1;
  result = (CFTypeID)CFDictionaryGetValue((CFDictionaryRef)v9, (const void *)*MEMORY[0x1E0CA8E60]);
  if (!result)
    goto LABEL_10;
  v11 = (const __CFNumber *)result;
  v12 = CFGetTypeID((CFTypeRef)result);
  result = CFNumberGetTypeID();
  if (v12 != result)
    goto LABEL_10;
  result = CFNumberGetValue(v11, kCFNumberSInt32Type, &valuePtr);
  if (valuePtr >= 1
    && (result = (CFTypeID)CFDictionaryGetValue((CFDictionaryRef)v9, (const void *)*MEMORY[0x1E0CA8E70])) != 0
    && (v13 = (const __CFNumber *)result,
        v14 = CFGetTypeID((CFTypeRef)result),
        result = CFNumberGetTypeID(),
        v14 == result)
    && (result = CFNumberGetValue(v13, kCFNumberSInt32Type, &v18), v15 = v18, v18 > 0))
  {
    v16 = (double)(valuePtr * a2);
    *a4 = (double)valuePtr / (double)v18;
    v17 = v16 / (double)(v15 * a3);
  }
  else
  {
LABEL_10:
    *a4 = 1.0;
    v17 = (double)a2 / (double)a3;
  }
  *a5 = v17;
  return result;
}

void vtBufferCreateScaledCleanRectFromCropCleanRect(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, unint64_t a9, unint64_t a10, CFDictionaryRef *a11)
{
  float v19;
  float v20;
  const __CFAllocator *v21;
  int v22;
  int v23;
  CFDictionaryRef v24;
  uint64_t v25;
  const void *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int valuePtr;
  void *keys[4];
  void *values[5];

  values[4] = *(void **)MEMORY[0x1E0C80C00];
  v19 = (float)a9 / (float)a3;
  v20 = (float)a10 / (float)a4;
  valuePtr = llroundf(v19 * (float)a7);
  v21 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  values[0] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  keys[0] = *(void **)MEMORY[0x1E0CA8D60];
  v29 = llroundf(v20 * (float)a8);
  values[1] = CFNumberCreate(v21, kCFNumberSInt32Type, &v29);
  keys[1] = *(void **)MEMORY[0x1E0CA8D40];
  v22 = a7 - a3;
  if (a7 < a3)
    ++v22;
  v28 = llroundf(v19 * (float)(a5 - a1 + (v22 >> 1)));
  values[2] = CFNumberCreate(v21, kCFNumberSInt32Type, &v28);
  keys[2] = *(void **)MEMORY[0x1E0CA8D48];
  v23 = a8 - a4;
  if (a8 < a4)
    ++v23;
  v27 = llroundf(v20 * (float)(a6 - a2 + (v23 >> 1)));
  values[3] = CFNumberCreate(v21, kCFNumberSInt32Type, &v27);
  keys[3] = *(void **)MEMORY[0x1E0CA8D58];
  v24 = CFDictionaryCreate(v21, (const void **)keys, (const void **)values, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v25 = 0;
  *a11 = v24;
  do
  {
    v26 = values[v25];
    if (v26)
      CFRelease(v26);
    ++v25;
  }
  while (v25 != 4);
}

void vtBufferCreateScaledPixelAspectRatio(__CVBuffer *a1, int a2, int a3, uint64_t a4, uint64_t a5, const __CFNumber **a6)
{
  const __CFDictionary *v11;
  const __CFDictionary *v12;
  CFTypeID TypeID;
  const __CFNumber *Value;
  const __CFNumber *v15;
  CFTypeID v16;
  const __CFNumber *v17;
  CFTypeID v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t valuePtr;

  v11 = (const __CFDictionary *)CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8E68], 0);
  if (v11)
  {
    v12 = v11;
    TypeID = CFDictionaryGetTypeID();
    if (TypeID == CFGetTypeID(v12))
    {
      v21 = 1;
      valuePtr = 1;
      Value = (const __CFNumber *)CFDictionaryGetValue(v12, (const void *)*MEMORY[0x1E0CA8E60]);
      if (!Value)
        goto LABEL_10;
      v15 = Value;
      v16 = CFGetTypeID(Value);
      if (v16 == CFNumberGetTypeID())
      {
        CFNumberGetValue(v15, kCFNumberSInt64Type, &valuePtr);
        Value = (const __CFNumber *)CFDictionaryGetValue(v12, (const void *)*MEMORY[0x1E0CA8E70]);
        if (Value)
        {
          v17 = Value;
          v18 = CFGetTypeID(Value);
          if (v18 == CFNumberGetTypeID())
          {
            v19 = a3 * a4;
            v20 = a2 * a5;
            CFNumberGetValue(v17, kCFNumberSInt64Type, &v21);
            if (v19 == v20)
              Value = (const __CFNumber *)CFRetain(v12);
            else
              Value = vtCreatePixelAspectRatioAttachment(valuePtr, v21, v19, v20);
            goto LABEL_10;
          }
          goto LABEL_9;
        }
LABEL_10:
        *a6 = Value;
        CFRelease(v12);
        return;
      }
    }
LABEL_9:
    Value = 0;
    goto LABEL_10;
  }
  *a6 = 0;
}

void vtBufferCreateScaledCleanRect(__CVBuffer *a1, unint64_t a2, unint64_t a3, CFDictionaryRef *a4)
{
  CFTypeRef v8;
  size_t Width;
  size_t Height;
  unint64_t v11;
  CFTypeID TypeID;
  const __CFDictionary *v13;
  void *v14;
  const __CFNumber *Value;
  const __CFNumber *v16;
  CFTypeID v17;
  float v18;
  const __CFAllocator *v19;
  void *v20;
  const __CFNumber *v21;
  const __CFNumber *v22;
  CFTypeID v23;
  float v24;
  uint64_t v25;
  const __CFNumber *v26;
  const __CFNumber *v27;
  CFTypeID v28;
  unsigned int v29;
  uint64_t v30;
  void **v31;
  const void *v32;
  void *v33;
  const __CFNumber *v34;
  const __CFNumber *v35;
  CFTypeID v36;
  uint64_t v37;
  uint64_t valuePtr;
  void *keys[2];
  __int128 v40;
  void *values[2];
  __int128 v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v8 = CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8D50], 0);
  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  *(_OWORD *)values = 0u;
  v42 = 0u;
  *(_OWORD *)keys = 0u;
  v40 = 0u;
  if (!v8)
    goto LABEL_13;
  v11 = Height;
  TypeID = CFDictionaryGetTypeID();
  if (TypeID != CFGetTypeID(v8))
    goto LABEL_13;
  if (CVPixelBufferGetWidth(a1) == a2 && CVPixelBufferGetHeight(a1) == a3)
  {
    v13 = (const __CFDictionary *)CFRetain(v8);
LABEL_14:
    *a4 = v13;
    goto LABEL_15;
  }
  v37 = 0;
  valuePtr = 0;
  v14 = (void *)*MEMORY[0x1E0CA8D60];
  Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v8, (const void *)*MEMORY[0x1E0CA8D60]);
  if (!Value || (v16 = Value, v17 = CFGetTypeID(Value), v17 != CFNumberGetTypeID()))
  {
LABEL_13:
    v13 = 0;
    goto LABEL_14;
  }
  v18 = (float)a2 / (float)Width;
  CFNumberGetValue(v16, kCFNumberSInt32Type, (char *)&valuePtr + 4);
  HIDWORD(valuePtr) = llroundf(v18 * (float)SHIDWORD(valuePtr));
  v19 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  values[0] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, (char *)&valuePtr + 4);
  keys[0] = v14;
  v20 = (void *)*MEMORY[0x1E0CA8D40];
  v21 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v8, (const void *)*MEMORY[0x1E0CA8D40]);
  if (v21 && (v22 = v21, v23 = CFGetTypeID(v21), v23 == CFNumberGetTypeID()))
  {
    v24 = (float)a3 / (float)v11;
    CFNumberGetValue(v22, kCFNumberSInt32Type, &valuePtr);
    LODWORD(valuePtr) = llroundf(v24 * (float)(int)valuePtr);
    values[1] = CFNumberCreate(v19, kCFNumberSInt32Type, &valuePtr);
    keys[1] = v20;
    v25 = *MEMORY[0x1E0CA8D48];
    v26 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v8, (const void *)*MEMORY[0x1E0CA8D48]);
    if (v26 && (v27 = v26, v28 = CFGetTypeID(v26), v28 == CFNumberGetTypeID()))
    {
      v29 = 3;
      CFNumberGetValue(v27, kCFNumberSInt32Type, (char *)&v37 + 4);
      HIDWORD(v37) = llroundf(v18 * (float)SHIDWORD(v37));
      *(_QWORD *)&v42 = CFNumberCreate(v19, kCFNumberSInt32Type, (char *)&v37 + 4);
      *(_QWORD *)&v40 = v25;
    }
    else
    {
      v29 = 2;
    }
    v33 = (void *)*MEMORY[0x1E0CA8D58];
    v34 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v8, (const void *)*MEMORY[0x1E0CA8D58]);
    if (v34)
    {
      v35 = v34;
      v36 = CFGetTypeID(v34);
      if (v36 == CFNumberGetTypeID())
      {
        CFNumberGetValue(v35, kCFNumberSInt32Type, &v37);
        LODWORD(v37) = llroundf(v24 * (float)(int)v37);
        values[v29] = CFNumberCreate(v19, kCFNumberSInt32Type, &v37);
        keys[v29++] = v33;
      }
    }
  }
  else
  {
    v29 = 1;
  }
  v30 = v29;
  v31 = values;
  *a4 = CFDictionaryCreate(v19, (const void **)keys, (const void **)values, v29, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  do
  {
    v32 = *v31++;
    CFRelease(v32);
    --v30;
  }
  while (v30);
LABEL_15:
  if (v8)
    CFRelease(v8);
}

uint64_t vtAllocatePlanarBuffersCommon(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  int v7;
  unsigned __int16 v8;
  unsigned __int16 v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  size_t v15;
  malloc_type_id_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  size_t v27;
  malloc_type_id_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  BOOL v36;
  _QWORD *v37;
  size_t v38;
  malloc_type_id_t v39;
  void *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  size_t v47;
  malloc_type_id_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  size_t v53;
  malloc_type_id_t v54;
  void *v55;
  uint64_t v56;
  uint64_t i;
  void *v58;
  void *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;

  result = 0;
  v63 = *MEMORY[0x1E0C80C00];
  v6 = 4294954391;
  if (a1 <= 1983000885)
  {
    if (a1 <= 1378955370)
    {
      if (a1 > 875704933)
      {
        if (a1 > 875836533)
        {
          if (a1 == 875836534 || a1 == 1111970369)
            return result;
          v7 = 1278226488;
        }
        else
        {
          if (a1 == 875704934 || a1 == 875704950)
            return result;
          v7 = 875836518;
        }
        goto LABEL_91;
      }
      if (a1 > 846624120)
      {
        if (a1 != 846624121)
        {
          if (a1 == 875704422)
            return result;
          v7 = 875704438;
LABEL_91:
          if (a1 == v7)
            return result;
          goto LABEL_133;
        }
LABEL_70:
        v22 = 0;
        v23 = *(_QWORD *)(a2 + 16);
        v24 = *(_QWORD *)(a2 + 24);
        v61 = (((v23 + 1) >> 1) + 127) & 0xFFFFFFFFFFFFFF80;
        v62 = v61;
        v60 = (v23 + 127) & 0xFFFFFFFFFFFFFF80;
        v25 = (_QWORD *)a3;
        do
        {
          v26 = *(unint64_t *)((char *)&v60 + v22);
          if (v24 && v26)
          {
            if (((v26 | v24) & 0x8000000000000000) != 0)
              goto LABEL_130;
            if (!is_mul_ok(v24, v26))
              goto LABEL_130;
            v27 = v26 * v24;
            if (!(v26 * v24))
              goto LABEL_130;
            v28 = 1556728742;
          }
          else
          {
            v27 = 0;
            v28 = 1270757447;
          }
          v29 = malloc_type_malloc(v27, v28);
          *v25 = v29;
          if (!v29)
            goto LABEL_131;
          if (v22)
            v30 = (v23 + 1) >> 1;
          else
            v30 = v23;
          v25[1] = v24;
          v25[2] = v30;
          v25[3] = v26;
          v25 += 4;
          v22 += 8;
        }
        while (v22 != 24);
        v6 = 0;
        *(_OWORD *)(a3 + 96) = 0u;
        *(_OWORD *)(a3 + 112) = 0u;
        goto LABEL_132;
      }
      if (a1 == 32)
        return result;
      v21 = 846624102;
      goto LABEL_69;
    }
    if (a1 > 1714696751)
    {
      if (a1 > 1916022839)
      {
        if (a1 == 1916022840 || a1 == 1982882104)
          return result;
        if (a1 == 1983000880)
        {
          v10 = 0;
          v11 = *(_QWORD *)(a2 + 16);
          v12 = *(_QWORD *)(a2 + 24);
          v60 = (12 * ((v11 + 5) / 6) + 127) & 0xFFFFFFFFFFFFFF80;
          v61 = v60;
          v13 = 1;
          while (1)
          {
            v14 = *(&v60 + v10);
            if (v12 && v14)
            {
              if (((v14 | v12) & 0x8000000000000000) != 0 || !is_mul_ok(v12, v14) || (v15 = v14 * v12) == 0)
              {
                *(_QWORD *)(a3 + 32 * v10) = 0;
LABEL_131:
                v6 = 4294954392;
                goto LABEL_132;
              }
              v16 = 1556728742;
            }
            else
            {
              v15 = 0;
              v16 = 1270757447;
            }
            v17 = malloc_type_malloc(v15, v16);
            *(_QWORD *)(a3 + 32 * v10) = v17;
            if (!v17)
              goto LABEL_131;
            v18 = v13 & 1;
            if ((v13 & 1) != 0)
              v19 = v11;
            else
              v19 = (v11 + 1) >> 1;
            v20 = (_QWORD *)(a3 + 32 * v10);
            v20[1] = v12;
            v20[2] = v19;
            v20[3] = v14;
            v10 = 1;
            v13 = 0;
            if (!v18)
              goto LABEL_129;
          }
        }
        goto LABEL_133;
      }
      if (a1 == 1714696752 || a1 == 1714696754)
        return result;
      v7 = 1714697268;
      goto LABEL_91;
    }
    if (a1 > 1380411456)
    {
      if (a1 != 1380411457)
      {
        if (a1 != 1630697081)
        {
          v7 = 1647534392;
          goto LABEL_91;
        }
        goto LABEL_70;
      }
      v41 = *(_QWORD *)(a2 + 16);
      v42 = *(_QWORD *)(a2 + 24);
      v43 = 16 * v41 + 127;
      v44 = v43 & 0xFFFFFFFFFFFFFF80;
      if (v42 && v44)
      {
        v45 = v43 | v42;
        v46 = (_QWORD *)a3;
        if ((v45 & 0x8000000000000000) != 0
          || (v46 = (_QWORD *)a3, !is_mul_ok(v42, v44))
          || (v47 = v44 * v42, v46 = (_QWORD *)a3, !(v44 * v42)))
        {
LABEL_142:
          *v46 = 0;
LABEL_143:
          v6 = 4294954392;
          goto LABEL_133;
        }
        v48 = 1556728742;
      }
      else
      {
        v47 = 0;
        v48 = 1270757447;
      }
      v59 = malloc_type_malloc(v47, v48);
      *(_QWORD *)a3 = v59;
      if (v59)
      {
        result = 0;
        *(_QWORD *)(a3 + 8) = v42;
        *(_QWORD *)(a3 + 16) = v41;
        *(_QWORD *)(a3 + 24) = v44;
        return result;
      }
      goto LABEL_143;
    }
    if (a1 != 1378955371)
    {
      v7 = 1380410945;
      goto LABEL_91;
    }
LABEL_93:
    v31 = 0;
    v32 = *(_QWORD *)(a2 + 16);
    v33 = *(_QWORD *)(a2 + 24);
    v36 = ((v33 | (2 * v32)) & 0x8000000000000000) != 0
       || (v33 * (unsigned __int128)(unint64_t)(2 * v32)) >> 64 != 0
       || 2 * v32 * v33 == 0;
    while (1)
    {
      v37 = (_QWORD *)(a3 + v31);
      v37[1] = v33;
      v37[2] = v32;
      v37[3] = 2 * v32;
      if (v32)
      {
        if (v33)
        {
          if (v36)
          {
            v46 = (_QWORD *)(a3 + v31);
            goto LABEL_142;
          }
          v38 = 2 * v32 * v33;
          v39 = 1556728742;
        }
        else
        {
          v38 = 0;
          v39 = 1270757447;
        }
        v40 = malloc_type_malloc(v38, v39);
        *(_QWORD *)(a3 + v31) = v40;
        if (!v40)
          goto LABEL_143;
      }
      v31 += 32;
      if (v31 == 96)
        return 0;
    }
  }
  if (a1 <= 2019964015)
  {
    if (a1 <= 2016686641)
    {
      if (a1 <= 1983131951)
      {
        if (a1 == 1983000886)
        {
          v49 = 0;
          v50 = *(_QWORD *)(a2 + 16);
          v51 = *(_QWORD *)(a2 + 24);
          v61 = (((v50 + 1) & 0xFFFFFFFFFFFFFFFELL) + 127) & 0xFFFFFFFFFFFFFF80;
          v62 = v61;
          v60 = (2 * v50 + 127) & 0xFFFFFFFFFFFFFF80;
          v25 = (_QWORD *)a3;
          do
          {
            v52 = *(unint64_t *)((char *)&v60 + v49);
            if (v51 && v52)
            {
              if (((v52 | v51) & 0x8000000000000000) != 0 || !is_mul_ok(v51, v52) || (v53 = v52 * v51) == 0)
              {
LABEL_130:
                *v25 = 0;
                goto LABEL_131;
              }
              v54 = 1556728742;
            }
            else
            {
              v53 = 0;
              v54 = 1270757447;
            }
            v55 = malloc_type_malloc(v53, v54);
            *v25 = v55;
            if (!v55)
              goto LABEL_131;
            if (v49)
              v56 = (v50 + 1) >> 1;
            else
              v56 = v50;
            v25[1] = v51;
            v25[2] = v56;
            v25[3] = v52;
            v25 += 4;
            v49 += 8;
          }
          while (v49 != 24);
LABEL_129:
          v6 = 0;
LABEL_132:
          if (!(_DWORD)v6)
            return 0;
          goto LABEL_133;
        }
        v7 = 1983131704;
        goto LABEL_91;
      }
      if (a1 == 1983131952)
        goto LABEL_93;
      if (a1 == 1999843442)
        return result;
      v8 = 12848;
    }
    else
    {
      if (a1 > 2019963439)
      {
        if (a1 == 2019963440 || a1 == 2019963442)
          return result;
        v7 = 2019963956;
        goto LABEL_91;
      }
      if (a1 == 2016686642 || a1 == 2016687156)
        return result;
      v8 = 13424;
    }
    v7 = v8 | 0x78340000;
    goto LABEL_91;
  }
  if (a1 <= 2033463351)
  {
    if (a1 <= 2021077553)
    {
      if (a1 == 2019964016)
        return result;
      v9 = 12848;
    }
    else
    {
      if (a1 == 2021077554 || a1 == 2021078068)
        return result;
      v9 = 13424;
    }
    v7 = v9 | 0x78770000;
    goto LABEL_91;
  }
  if (a1 <= 2033464371)
  {
    if (a1 == 2033463352 || a1 == 2033463856)
      return result;
    v7 = 2033463858;
    goto LABEL_91;
  }
  if (a1 == 2033464372)
    return result;
  if (a1 == 2037741171)
    goto LABEL_70;
  v21 = 2037741158;
LABEL_69:
  if (a1 == v21)
    goto LABEL_70;
LABEL_133:
  for (i = 0; i != 128; i += 32)
  {
    v58 = *(void **)(a3 + i);
    if (v58)
    {
      free(v58);
      *(_QWORD *)(a3 + i) = 0;
    }
  }
  return v6;
}

BOOL VTPixelTransferSessionCanUseMetalInTheBackground()
{
  int can_use_foreground_hw;
  _BOOL8 result;

  getpid();
  can_use_foreground_hw = proc_can_use_foreground_hw();
  result = can_use_foreground_hw == 1;
  if (!can_use_foreground_hw)
    return 0;
  return result;
}

uint64_t VTPixelTransferSessionFlush(uint64_t a1, CVOptionFlags a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4 || (result = VTPixelTransferChainFlush(v4, a2), !(_DWORD)result))
  {
    result = *(_QWORD *)(a1 + 1160);
    if (result)
      return VTMetalTransferSessionFlush(result, a2);
  }
  return result;
}

uint64_t VTPixelTransferSessionCanTransfer(OSType pixelFormat, OSType a2, char a3)
{
  _BOOL4 v6;
  _BOOL4 v7;
  const __CFAllocator *v8;
  CFDictionaryRef v9;
  CFDictionaryRef v10;
  __CFDictionary *Mutable;
  BOOL v12;
  int ScalingGroup;
  int v14;
  int v15;
  uint64_t v16;
  int v18;
  __int128 v19;
  OSType v20;
  OSType v21[3];
  char v22;

  v6 = (a3 & 1) == 0;
  v7 = (a3 & 2) == 0;
  v19 = 0uLL;
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v9 = CVPixelFormatDescriptionCreateWithPixelFormatType((CFAllocatorRef)*MEMORY[0x1E0C9AE00], pixelFormat);
  v10 = CVPixelFormatDescriptionCreateWithPixelFormatType(v8, a2);
  Mutable = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA8EE8], (const void *)*MEMORY[0x1E0CA8F18]);
  if (v9)
    v12 = v10 == 0;
  else
    v12 = 1;
  if (!v12)
  {
    v21[0] = pixelFormat;
    v20 = a2;
    FigCFDictionaryGetInt32IfPresent();
    FigCFDictionaryGetInt32IfPresent();
  }
  if ((a3 & 0x10) == 0)
  {
    vtFindBlitter(pixelFormat, a2, 0, 0, v6, v7, Mutable, (int)Mutable, 0, 0, 0, 0, 0, 0, 0, (uint64_t)&v22, (uint64_t)v21, (uint64_t)&v20, (uint64_t)&v19 + 8,
      (uint64_t)&v19,
      0,
      0,
      0);
    if (v19 != 0 && ((a3 & 1) == 0 || getScalingGroup(a2)))
      goto LABEL_14;
    ScalingGroup = getScalingGroup(pixelFormat);
    if (ScalingGroup)
    {
      v14 = ScalingGroup;
      v15 = getScalingGroup(a2);
      if (v15)
      {
        if (v14 == v15)
          goto LABEL_14;
      }
    }
  }
  if (vtPixelTransferSessionCanDynamicTransfer())
    goto LABEL_14;
  if (initDefaultsCommon_onceToken != -1)
    dispatch_once_f(&initDefaultsCommon_onceToken, 0, (dispatch_function_t)vtAllowTransferCapabilityCommonOnce);
  if (!sAllowMetalTransferSession || !VTPixelTransferSessionCanUseMetalInTheBackground())
    goto LABEL_33;
  v18 = VTAvoidHardwarePixelTransfer();
  v16 = 0;
  if ((a3 & 8) == 0 && !v18)
  {
    if (VTMetalTransferSessionCanTransfer(pixelFormat, a2, a3)
      || (a3 & 1) != 0
      && (VTMetalTransferSessionCanTransfer(pixelFormat, a2, a3 & 0xFE), (a3 & 0x10) == 0)
      && (getScalingGroup(pixelFormat) || getScalingGroup(a2)))
    {
LABEL_14:
      v16 = 1;
      goto LABEL_15;
    }
LABEL_33:
    v16 = 0;
  }
LABEL_15:
  if (v9)
    CFRelease(v9);
  if (v10)
    CFRelease(v10);
  if (Mutable)
    CFRelease(Mutable);
  return v16;
}

uint64_t vtPixelTransferSessionCanDynamicTransfer()
{
  if (initDefaultsCommon_onceToken != -1)
    dispatch_once_f(&initDefaultsCommon_onceToken, 0, (dispatch_function_t)vtAllowTransferCapabilityCommonOnce);
  if (sAllowHardwareTransferSession)
    FigRegisterIOSurfacePixelTransferCapability();
  return 0;
}

#error "1925C8F28: too big function (funcsize=0)"

uint64_t getScalingGroup(int a1)
{
  uint64_t result;
  int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned __int16 v6;
  unsigned __int16 v7;
  unsigned __int16 v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  BOOL v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  unsigned int v19;

  result = 0;
  if (a1 <= 1815491697)
  {
    if (a1 <= 1278226741)
    {
      if (a1 <= 875704949)
      {
        if (a1 <= 875704421)
        {
          if (a1 == 32)
            return 3;
          if (a1 != 846624102)
          {
            v9 = 846624121;
            goto LABEL_101;
          }
          return 9;
        }
        if (a1 != 875704422)
        {
          if (a1 == 875704438)
            return 12;
          if (a1 != 875704934)
            return result;
        }
      }
      else
      {
        if (a1 > 1111970368)
        {
          if (a1 == 1278226536)
            v3 = 27;
          else
            v3 = 0;
          if (a1 == 1278226534)
            v4 = 28;
          else
            v4 = v3;
          if (a1 == 1111970369)
            v5 = 4;
          else
            v5 = a1 == 1278226488;
          if (a1 <= 1278226533)
            return v5;
          else
            return v4;
        }
        if (a1 == 875704950)
          return 12;
        if (a1 != 875836518)
        {
          v10 = 875836534;
          goto LABEL_54;
        }
      }
      return 10;
    }
    if (a1 <= 1647534391)
    {
      if (a1 > 1380410944)
      {
        if (a1 == 1380410945)
          return 31;
        if (a1 == 1380411457)
          return 30;
        v9 = 1630697081;
        goto LABEL_101;
      }
      v11 = 1278226742;
      v12 = 2;
      v13 = 1378955371;
      v14 = 24;
      v15 = a1 == 1380401729;
      v16 = 5;
      goto LABEL_75;
    }
    if (a1 <= 1714697267)
    {
      if (a1 != 1647534392)
      {
        if (a1 == 1714696752 || a1 == 1714696754)
          return 9;
        return result;
      }
      return 22;
    }
    if (a1 > 1751527985)
    {
      if (a1 == 1751527986)
        return 29;
      v7 = 13364;
    }
    else
    {
      if (a1 == 1714697268)
        return 9;
      v7 = 12848;
    }
    if (a1 != (v7 | 0x68660000))
      return result;
    return 29;
  }
  if (a1 > 2019963441)
  {
    if (a1 <= 2033463351)
    {
      if (a1 > 2021077551)
      {
        if (a1 <= 2021078067)
        {
          if (a1 != 2021077552 && a1 != 2021077554)
            return result;
          return 18;
        }
        if (a1 == 2021078068)
          return 18;
        v17 = a1 == 2021078128;
        v18 = 21;
        goto LABEL_88;
      }
      if (a1 != 2019963442 && a1 != 2019963956)
      {
        v17 = a1 == 2019964016;
        v18 = 20;
LABEL_88:
        if (v17)
          return v18;
        else
          return 0;
      }
      return 16;
    }
    if (a1 <= 2033463857)
    {
      if (a1 == 2033463352)
        return 7;
      if (a1 == 2033463606)
        return 25;
      v8 = 12848;
LABEL_68:
      v9 = v8 | 0x79340000;
      goto LABEL_101;
    }
    if (a1 <= 2037741157)
    {
      if (a1 == 2033463858)
        return 11;
      v8 = 13364;
      goto LABEL_68;
    }
    if (a1 != 2037741158)
    {
      v9 = 2037741171;
LABEL_101:
      if (a1 != v9)
        return result;
      return 11;
    }
    return 9;
  }
  if (a1 <= 1983131951)
  {
    if (a1 <= 1983000879)
    {
      if (a1 == 1815491698)
        return 26;
      if (a1 == 1916022840)
        return 6;
      v10 = 1982882104;
LABEL_54:
      if (a1 != v10)
        return result;
      return 12;
    }
    v11 = 1983000880;
    v12 = 14;
    v13 = 1983000886;
    v14 = 13;
    v15 = a1 == 1983131704;
    v16 = 8;
LABEL_75:
    if (!v15)
      v16 = 0;
    if (a1 == v13)
      v19 = v14;
    else
      v19 = v16;
    if (a1 == v11)
      return v12;
    else
      return v19;
  }
  if (a1 <= 2016686641)
  {
    if (a1 == 1983131952)
      return 13;
    if (a1 != 1999843442)
    {
      v6 = 12848;
      goto LABEL_59;
    }
    return 22;
  }
  if (a1 <= 2016687215)
  {
    if (a1 == 2016686642)
      return 14;
    v6 = 13364;
LABEL_59:
    if (a1 != (v6 | 0x78340000))
      return result;
    return 14;
  }
  if (a1 == 2016687216)
    return 19;
  if (a1 == 2019963440)
    return 16;
  return result;
}

uint64_t VTFillPixelsOutsideDestRectWithBlack(__CVBuffer *a1, uint64_t *a2, uint64_t **a3)
{
  OSType PixelFormatType;
  size_t PlaneCount;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  int64_t v16;
  int64_t v17;

  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  if (CVPixelBufferIsPlanar(a1))
    PlaneCount = CVPixelBufferGetPlaneCount(a1);
  else
    PlaneCount = 1;
  v8 = vtPixelTransferSession_EnsurePixelFormatPixelBlockInfoArray(PixelFormatType, PlaneCount, a3);
  if (!(_DWORD)v8)
  {
    v9 = *a3;
    v10 = a2[5];
    if (v10 <= 0)
    {
      v11 = a2[4];
      if (v11 <= 0 && a2[2] + v11 >= *a2 && a2[3] + v10 >= a2[1])
        return 0;
    }
    CVPixelBufferLockBaseAddress(a1, 0);
    v12 = a2[5];
    if (v12 >= 1)
    {
      v13 = VTFillBufferPixelsWithBlack(a1, 0, 0, *a2, a2[5], v9);
      if ((_DWORD)v13)
        goto LABEL_20;
      v12 = a2[5];
    }
    v14 = a2[4];
    if (v14 >= 1)
    {
      v13 = VTFillBufferPixelsWithBlack(a1, 0, v12, v14, a2[3], v9);
      if ((_DWORD)v13)
        goto LABEL_20;
      v14 = a2[4];
      v12 = a2[5];
    }
    v15 = a2[2] + v14;
    if (*a2 > v15)
    {
      v8 = VTFillBufferPixelsWithBlack(a1, v15, v12, *a2 - v15, a2[3], v9);
      if ((_DWORD)v8)
      {
LABEL_22:
        CVPixelBufferUnlockBaseAddress(a1, 0);
        return v8;
      }
      v12 = a2[5];
    }
    v16 = a2[3] + v12;
    v17 = a2[1];
    if (v17 <= v16)
    {
      v8 = 0;
      goto LABEL_22;
    }
    v13 = VTFillBufferPixelsWithBlack(a1, 0, v16, *a2, v17 - v16, v9);
LABEL_20:
    v8 = v13;
    goto LABEL_22;
  }
  return v8;
}

uint64_t printable4CC(unsigned int a1)
{
  char v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;

  if (a1 > 0x63)
  {
    v2 = a1 >> 8;
    v3 = a1 & 0xFFFF0000;
    v4 = a1 & 0xFF000000;
  }
  else
  {
    v1 = a1 / 0xAu;
    LOBYTE(a1) = (a1 % 0xAu) | 0x30;
    LOBYTE(v2) = v1 + 48;
    v3 = 0x200000;
    v4 = 0x20000000;
  }
  return v3 & 0xFF0000 | v4 | (v2 << 8) | a1;
}

uint64_t _VTPixelTransferSessionTransferImage(uint64_t a1, __CVBuffer *a2, __CVBuffer *a3)
{
  const void *v7;
  CFMutableDataRef Mutable;
  CFTypeRef v9;
  OSType PixelFormatType;
  OSType v11;
  int Width;
  int Height;
  int v14;
  int v15;
  CFTypeRef v16;
  int v17;
  CFTypeRef v18;
  int v19;
  __CVBuffer *v20;
  const __CFArray *v21;
  uint64_t v22;
  const void *v23;
  const void *v24;
  CFDictionaryRef v25;
  CFDictionaryRef v26;
  const __CFDictionary *v27;
  __CFDictionary *MutableCopy;
  __CFDictionary *v29;
  __CVBuffer *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  float64x2_t v36;
  int64x2_t v37;
  int64x2_t v38;
  float64x2_t v39;
  unsigned int v40;
  unsigned __int8 v41;
  unsigned __int8 v42;
  __int128 v43;
  float64x2_t v44;
  int64x2_t v45;
  uint64_t v46;
  uint64_t v47;
  float64x2_t v48;
  uint64_t v49;
  uint64_t v50;
  float64x2_t v51;
  uint64_t v52;
  uint64_t (*v53)(_QWORD, _QWORD, __CVBuffer *, __int128 *, __CVBuffer *, __int128 *);
  uint64_t v54;
  const void *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  const void *v59;
  uint64_t v60;
  vImage_Error v61;
  OSType v62;
  uint64_t v63;
  uint64_t (*v64)(__CVBuffer *, uint64_t, _QWORD);
  uint64_t (*v65)(__CVBuffer *, uint64_t, __CVBuffer *, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _BYTE, _QWORD);
  uint64_t v66;
  const __CFArray *v67;
  const __CFDictionary *v68;
  __CVBuffer *v69;
  uint64_t v70;
  unsigned int (*v71)(__CVBuffer *, __CVBuffer *);
  __CVBuffer *v72;
  __CVBuffer *v73;
  CFTypeRef v74;
  CFTypeRef v75;
  CFTypeRef v76;
  CFTypeRef v77;
  CFTypeRef v78;
  CFTypeRef v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  BOOL v85;
  int v94;
  OSType v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  CFTypeRef v101;
  CFTypeRef v102;
  CFTypeRef v103;
  CFTypeRef v104;
  const __CFString *v105;
  const __CFString *v106;
  const __CFString *v107;
  const __CFString *v108;
  const __CFString *key;
  CFTypeRef v110;
  CFTypeRef cf;
  CFTypeRef cfa;
  CFTypeRef value;
  CFTypeRef v114;
  _OWORD v115[2];
  double v116;
  double v117;
  __int128 v118;
  float64x2_t v119;
  float64x2_t v120;
  __int128 v121;
  float64x2_t v122;
  float64x2_t v123;

  if (*(_BYTE *)(a1 + 16))
    return FigSignalErrorAt();
  if (*(_BYTE *)(a1 + 789))
  {
    v7 = *(const void **)(a1 + 792);
    if (v7)
      CFRelease(v7);
    Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
    *(_QWORD *)(a1 + 792) = Mutable;
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 776), CFSTR("ServiceHistogramData"), Mutable);
  }
  key = (const __CFString *)*MEMORY[0x1E0CA8CD8];
  cf = CVBufferCopyAttachment(a2, (CFStringRef)*MEMORY[0x1E0CA8CD8], 0);
  v106 = (const __CFString *)*MEMORY[0x1E0CA8E40];
  v110 = CVBufferCopyAttachment(a2, (CFStringRef)*MEMORY[0x1E0CA8E40], 0);
  v107 = (const __CFString *)*MEMORY[0x1E0CA8D68];
  v9 = CVBufferCopyAttachment(a2, (CFStringRef)*MEMORY[0x1E0CA8D68], 0);
  v108 = (const __CFString *)*MEMORY[0x1E0CA8E98];
  value = CVBufferCopyAttachment(a2, (CFStringRef)*MEMORY[0x1E0CA8E98], 0);
  v105 = (const __CFString *)*MEMORY[0x1E0CA8E48];
  v114 = CVBufferCopyAttachment(a2, (CFStringRef)*MEMORY[0x1E0CA8E48], 0);
  *(_BYTE *)(a1 + 1186) = 0;
  PixelFormatType = CVPixelBufferGetPixelFormatType(a2);
  v11 = CVPixelBufferGetPixelFormatType(a3);
  Width = CVPixelBufferGetWidth(a2);
  Height = CVPixelBufferGetHeight(a2);
  v14 = CVPixelBufferGetWidth(a3);
  v15 = CVPixelBufferGetHeight(a3);
  if (!*(_BYTE *)(a1 + 568))
  {
    v21 = *(const __CFArray **)(a1 + 32);
    if ((!v21 || !VTPixelTransferChainHasNodes(v21)) && !*(_BYTE *)(a1 + 211) && !*(_DWORD *)(a1 + 1016))
      goto LABEL_38;
  }
  if (*(_BYTE *)(a1 + 744)
    || PixelFormatType != *(_DWORD *)(a1 + 572)
    || v11 != *(_DWORD *)(a1 + 576)
    || *(_QWORD *)(a1 + 592) != Width
    || *(_QWORD *)(a1 + 600) != Height
    || *(_QWORD *)(a1 + 640) != v14
    || *(_QWORD *)(a1 + 648) != v15)
  {
    goto LABEL_38;
  }
  v16 = CVBufferCopyAttachment(a2, (CFStringRef)*MEMORY[0x1E0CA8D50], 0);
  v17 = FigCFEqual();
  if (v16)
    CFRelease(v16);
  if (!v17)
    goto LABEL_38;
  v18 = CVBufferCopyAttachment(a2, (CFStringRef)*MEMORY[0x1E0CA8E68], 0);
  v19 = FigCFEqual();
  if (v18)
    CFRelease(v18);
  if (!v19
    || *(_QWORD *)(a1 + 88) != *(_QWORD *)(a1 + 864)
    || *(_QWORD *)(a1 + 96) != *(_QWORD *)(a1 + 872)
    || *(_QWORD *)(a1 + 72) != *(_QWORD *)(a1 + 848)
    || *(_QWORD *)(a1 + 80) != *(_QWORD *)(a1 + 856)
    || *(_QWORD *)(a1 + 136) != *(_QWORD *)(a1 + 912)
    || *(_QWORD *)(a1 + 144) != *(_QWORD *)(a1 + 920)
    || *(_QWORD *)(a1 + 120) != *(_QWORD *)(a1 + 896)
    || *(_QWORD *)(a1 + 128) != *(_QWORD *)(a1 + 904))
  {
    goto LABEL_38;
  }
  if (*(_BYTE *)(a1 + 1184))
  {
    if (*(_QWORD *)(a1 + 216))
    {
      if (*(_QWORD *)(a1 + 256) != *(_QWORD *)(a1 + 656) || *(_QWORD *)(a1 + 264) != *(_QWORD *)(a1 + 664))
      {
        v20 = a2;
        goto LABEL_167;
      }
    }
    else if (!CVPixelBufferGetIOSurface(a2))
    {
      goto LABEL_38;
    }
    v20 = a3;
LABEL_167:
    if (!CVPixelBufferGetIOSurface(v20))
      goto LABEL_38;
  }
  v70 = *(_QWORD *)(a1 + 752);
  if (v70)
  {
    v71 = *(unsigned int (**)(__CVBuffer *, __CVBuffer *))(v70 + 40);
    if (v71)
    {
      if (*(_QWORD *)(v70 + 56))
      {
        if (*(_BYTE *)(a1 + 768))
        {
          v72 = a2;
          goto LABEL_173;
        }
        if ((*(_QWORD *)(a1 + 696) || *(_QWORD *)(a1 + 704)) && !*(_QWORD *)(a1 + 216))
        {
          v95 = CVPixelBufferGetPixelFormatType(*(CVPixelBufferRef *)(a1 + 232));
          v71 = *(unsigned int (**)(__CVBuffer *, __CVBuffer *))(*(_QWORD *)(a1 + 752) + 40);
          v73 = *(__CVBuffer **)(a1 + 232);
          if (*(_DWORD *)(a1 + 580) == v95)
          {
            v72 = a2;
LABEL_174:
            if (!v71(v72, v73))
              goto LABEL_38;
            goto LABEL_179;
          }
          v72 = *(__CVBuffer **)(a1 + 232);
LABEL_173:
          v73 = a3;
          goto LABEL_174;
        }
      }
    }
  }
LABEL_179:
  v74 = CVBufferCopyAttachment(a2, (CFStringRef)*MEMORY[0x1E0CA8EE8], 0);
  v75 = CVBufferCopyAttachment(a2, v107, 0);
  v76 = CVBufferCopyAttachment(a2, v108, 0);
  v77 = CVBufferCopyAttachment(a2, v105, 0);
  v78 = CVBufferCopyAttachment(a2, v106, 0);
  v101 = v75;
  v100 = FigCFEqual();
  v102 = v76;
  v99 = FigCFEqual();
  v103 = v77;
  v98 = FigCFEqual();
  v104 = v78;
  v97 = FigCFEqual();
  v79 = CVBufferCopyAttachment(a2, key, 0);
  v80 = FigCFEqual();
  if (v79)
    CFRelease(v79);
  v81 = FigCFEqual();
  v82 = FigCFEqual();
  v83 = FigCFEqual();
  v84 = FigCFEqual();
  if (FigCFEqual())
    v85 = v84 == 0;
  else
    v85 = 1;
  v94 = v85 || v83 == 0 || v82 == 0 || v81 == 0 || v80 == 0 || v97 == 0 || v98 == 0 || v99 == 0 || v100 == 0;
  if (v74)
    CFRelease(v74);
  if (v101)
    CFRelease(v101);
  if (v102)
    CFRelease(v102);
  if (v103)
    CFRelease(v103);
  if (v104)
    CFRelease(v104);
  if (!v94)
  {
    v22 = 0;
    v24 = v110;
    v23 = cf;
    goto LABEL_41;
  }
LABEL_38:
  VTPixelTransferChainRemoveAllNodes(*(_QWORD *)(a1 + 32));
  v22 = vtPixelTransferSession_BuildChain(a1, a2, a3);
  v24 = v110;
  v23 = cf;
  if ((_DWORD)v22)
    goto LABEL_133;
  if (*(_BYTE *)(a1 + 40) || !*(_QWORD *)(a1 + 32))
    goto LABEL_40;
  v34 = vtPixelTransferSessionBuildChainFromBasicTransfer(a1);
  if ((_DWORD)v34)
  {
    v22 = v34;
    VTPixelTransferChainRemoveAllNodes(*(_QWORD *)(a1 + 32));
    goto LABEL_41;
  }
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_QWORD *)(a1 + 544) = 0;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  v55 = *(const void **)(a1 + 776);
  if (!v55)
  {
LABEL_40:
    v22 = 0;
    goto LABEL_41;
  }
  CFRelease(v55);
  v22 = 0;
  *(_QWORD *)(a1 + 776) = 0;
LABEL_41:
  CVBufferRemoveAttachment(a3, key);
  v25 = CVBufferCopyAttachments(a2, kCVAttachmentMode_ShouldPropagate);
  if (v25)
  {
    v26 = v25;
    v27 = *(const __CFDictionary **)(a1 + 1112);
    MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
    v29 = MutableCopy;
    if (MutableCopy)
    {
      if (*(_BYTE *)(a1 + 184))
      {
        CFDictionaryRemoveValue(MutableCopy, (const void *)*MEMORY[0x1E0CA8D28]);
        CFDictionaryRemoveValue(v29, (const void *)*MEMORY[0x1E0CA8CE8]);
        CFDictionaryRemoveValue(v29, (const void *)*MEMORY[0x1E0CA8CE0]);
      }
      CFDictionaryRemoveValue(v29, (const void *)*MEMORY[0x1E0CA8D50]);
      CFDictionaryRemoveValue(v29, (const void *)*MEMORY[0x1E0CA8E68]);
      if (!*(_BYTE *)(a1 + 1138))
        CFDictionaryRemoveValue(v29, (const void *)*MEMORY[0x1E0CA8CA8]);
      CFDictionaryRemoveValue(v29, key);
      CFDictionaryRemoveValue(v29, v106);
      CFDictionaryRemoveValue(v29, v107);
      CFDictionaryRemoveValue(v29, v108);
      CFDictionaryApplyFunction(v27, (CFDictionaryApplierFunction)vtCombineDictionariesApplier, v29);
      CFRelease(v26);
      CVPixelBufferGetPixelFormatType(a3);
      CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
      LOBYTE(v121) = 0;
      LOBYTE(v118) = 0;
      FigCFDictionaryGetBooleanIfPresent();
      FigCFDictionaryGetBooleanIfPresent();
      CFDictionaryRemoveValue(v29, (const void *)*MEMORY[0x1E0CA90D8]);
      CFDictionaryRemoveValue(v29, (const void *)*MEMORY[0x1E0CA90C0]);
      CFDictionaryRemoveValue(v29, (const void *)*MEMORY[0x1E0CA9080]);
      CFDictionaryRemoveValue(v29, (const void *)*MEMORY[0x1E0CA9090]);
      CFDictionaryRemoveValue(v29, (const void *)*MEMORY[0x1E0CA90B0]);
      CFDictionaryRemoveValue(v29, (const void *)*MEMORY[0x1E0CA90B8]);
      CFDictionaryRemoveValue(v29, (const void *)*MEMORY[0x1E0CA90A8]);
      CFDictionaryRemoveValue(v29, (const void *)*MEMORY[0x1E0CA9098]);
      CFDictionaryRemoveValue(v29, (const void *)*MEMORY[0x1E0CA90A0]);
      CFDictionaryRemoveValue(v29, CFSTR("ProResRAW_LargestDCQSS"));
      CFDictionaryRemoveValue(v29, (const void *)*MEMORY[0x1E0CA9088]);
      CVBufferSetAttachments(a3, v29, kCVAttachmentMode_ShouldPropagate);
    }
    else
    {
      CFRelease(v26);
    }
  }
  else
  {
    v29 = 0;
  }
  v30 = a3;
  switch(*(_DWORD *)(a1 + 1016))
  {
    case 1:
      v22 = vtVImageConverterProc(a2, *(__CVBuffer **)(a1 + 1040), a1 + 1056);
      if (!(_DWORD)v22)
      {
        a2 = *(__CVBuffer **)(a1 + 1040);
        goto LABEL_59;
      }
      goto LABEL_131;
    case 2:
      v30 = *(__CVBuffer **)(a1 + 1040);
      goto LABEL_61;
    case 3:
    case 5:
      v22 = _VTPixelTransferSessionTransferImage(*(_QWORD *)(a1 + 1024), a2, *(_QWORD *)(a1 + 1040));
      if ((_DWORD)v22)
        goto LABEL_131;
      v31 = *(_DWORD *)(a1 + 1016);
      if (v31 != 3)
      {
        if (v31 != 5)
        {
          v22 = 0;
          goto LABEL_116;
        }
        v32 = *(_QWORD *)(a1 + 1032);
        v33 = *(_QWORD *)(a1 + 1040);
        goto LABEL_114;
      }
      if (*(_BYTE *)(a1 + 1184))
      {
        v56 = VTMetalTransferSessionTransferImageSync(*(const __CFArray **)(a1 + 1160), *(void **)(a1 + 1040), *(void **)(a1 + 1048), *(const __CFDictionary **)(a1 + 1168));
      }
      else if (*(_QWORD *)(a1 + 704))
      {
        *(_QWORD *)&v122.f64[0] = CVPixelBufferGetWidth(*(CVPixelBufferRef *)(a1 + 1040));
        *(float64_t *)&v121 = v122.f64[0];
        *(_QWORD *)&v122.f64[1] = CVPixelBufferGetHeight(*(CVPixelBufferRef *)(a1 + 1040));
        v123 = 0uLL;
        *((_QWORD *)&v121 + 1) = *(_QWORD *)&v122.f64[1];
        *(_QWORD *)&v119.f64[0] = CVPixelBufferGetWidth(*(CVPixelBufferRef *)(a1 + 1048));
        *(float64_t *)&v118 = v119.f64[0];
        *(_QWORD *)&v119.f64[1] = CVPixelBufferGetHeight(*(CVPixelBufferRef *)(a1 + 1048));
        v120 = 0uLL;
        *((_QWORD *)&v118 + 1) = *(_QWORD *)&v119.f64[1];
        v56 = vtPixelTransferSession_InvokeBlitter(*(_QWORD *)(a1 + 696), *(_QWORD *)(a1 + 704), *(_QWORD *)(a1 + 712), (_QWORD *)(a1 + 728), (_QWORD *)(a1 + 736), *(CVPixelBufferRef *)(a1 + 1040), *(__CVBuffer **)(a1 + 1048), (uint64_t)&v121, (uint64_t)&v118);
      }
      else
      {
        v56 = vtVImageConverterProc(*(__CVBuffer **)(a1 + 1040), *(__CVBuffer **)(a1 + 1048), a1 + 1056);
      }
      v22 = v56;
      if (!(_DWORD)v56)
      {
        v32 = *(_QWORD *)(a1 + 1032);
        v33 = *(_QWORD *)(a1 + 1048);
LABEL_114:
        v61 = _VTPixelTransferSessionTransferImage(v32, v33, a3);
        goto LABEL_115;
      }
      goto LABEL_131;
    case 4:
      goto LABEL_61;
    default:
LABEL_59:
      v30 = a3;
LABEL_61:
      if (*(_BYTE *)(a1 + 1186))
        goto LABEL_98;
      if (VTPixelTransferChainHasNodes(*(const __CFArray **)(a1 + 32)))
      {
        v35 = *(_OWORD *)(a1 + 640);
        v36 = vcvtq_f64_s64(*(int64x2_t *)(a1 + 624));
        v37 = *(int64x2_t *)(a1 + 608);
        v121 = *(_OWORD *)(a1 + 592);
        v122 = v36;
        v123 = vcvtq_f64_s64(v37);
        v38 = *(int64x2_t *)(a1 + 656);
        v39 = vcvtq_f64_s64(*(int64x2_t *)(a1 + 672));
        v118 = v35;
        v119 = v39;
        v120 = vcvtq_f64_s64(v38);
        LODWORD(v22) = VTPixelTransferChainDoTransfer(*(_QWORD *)(a1 + 32), a2, &v121, v30, &v118);
        if ((_DWORD)v22)
          VTPixelTransferChainRemoveAllNodes(*(_QWORD *)(a1 + 32));
      }
      v40 = VTPixelTransferChainHasNodes(*(const __CFArray **)(a1 + 32));
      if (!(_DWORD)v22 && v40)
      {
        v22 = 0;
        goto LABEL_98;
      }
      v41 = *(_BYTE *)(a1 + 1139);
      cfa = CVBufferCopyAttachment(a2, (CFStringRef)*MEMORY[0x1E0CA8CA8], 0);
      if (FigCFEqual())
        v42 = 0;
      else
        v42 = v41;
      v43 = *(_OWORD *)(a1 + 640);
      v44 = vcvtq_f64_s64(*(int64x2_t *)(a1 + 624));
      v45 = *(int64x2_t *)(a1 + 608);
      v121 = *(_OWORD *)(a1 + 592);
      v122 = v44;
      v123 = vcvtq_f64_s64(v45);
      v46 = *(_QWORD *)(a1 + 656);
      v47 = *(_QWORD *)(a1 + 664);
      v48 = vcvtq_f64_s64(*(int64x2_t *)(a1 + 672));
      v118 = v43;
      v119 = v48;
      v120.f64[0] = (double)v46;
      v120.f64[1] = (double)v47;
      v50 = *(_QWORD *)(a1 + 256);
      v49 = *(_QWORD *)(a1 + 264);
      v51 = vcvtq_f64_s64(*(int64x2_t *)(a1 + 272));
      v115[0] = *(_OWORD *)(a1 + 240);
      v115[1] = v51;
      v116 = (double)v50;
      v117 = (double)v49;
      v52 = *(_QWORD *)(a1 + 752);
      if (!v52)
        goto LABEL_85;
      v53 = *(uint64_t (**)(_QWORD, _QWORD, __CVBuffer *, __int128 *, __CVBuffer *, __int128 *))(v52 + 56);
      if (!v53)
        goto LABEL_85;
      if (*(_BYTE *)(a1 + 768))
      {
        v54 = v53(*(_QWORD *)(a1 + 760), *(_QWORD *)(a1 + 776), a2, &v121, v30, &v118);
        goto LABEL_93;
      }
      if (!*(_QWORD *)(a1 + 696) && !*(_QWORD *)(a1 + 704) || *(_QWORD *)(a1 + 216))
      {
LABEL_85:
        v57 = *(_QWORD *)(a1 + 696);
        if (v57)
        {
          v58 = *(_QWORD *)(a1 + 704);
          if (*(_QWORD *)(a1 + 216))
          {
LABEL_87:
            v22 = vtPixelTransferSession_InvokeBlitter(v57, v58, *(_QWORD *)(a1 + 712), (_QWORD *)(a1 + 728), (_QWORD *)(a1 + 736), a2, *(__CVBuffer **)(a1 + 232), a1 + 592, a1 + 592);
            v59 = cfa;
            if ((_DWORD)v22)
              goto LABEL_95;
            LOBYTE(v96) = *(_BYTE *)(a1 + 745);
            v60 = (*(uint64_t (**)(_QWORD, uint64_t, __CVBuffer *, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, int, _QWORD))(a1 + 216))(*(_QWORD *)(a1 + 232), a1 + 592, v30, a1 + 640, a1 + 288, 0, v42, *(unsigned __int8 *)(a1 + 1138), v96, *(_QWORD *)(a1 + 1144));
            goto LABEL_89;
          }
LABEL_92:
          v54 = vtPixelTransferSession_InvokeBlitter(v57, v58, *(_QWORD *)(a1 + 712), (_QWORD *)(a1 + 728), (_QWORD *)(a1 + 736), a2, v30, a1 + 592, a1 + 640);
          goto LABEL_93;
        }
        v58 = *(_QWORD *)(a1 + 704);
        if (v58)
        {
          if (*(_QWORD *)(a1 + 216))
            goto LABEL_87;
          goto LABEL_92;
        }
        if (*(_BYTE *)(a1 + 1184))
        {
          if (v52 && *(_QWORD *)(v52 + 56))
          {
            v62 = CVPixelBufferGetPixelFormatType(*(CVPixelBufferRef *)(a1 + 232));
            if (*(_DWORD *)(a1 + 572) == v62 || *(_DWORD *)(a1 + 580) == v62)
            {
              v22 = (*(uint64_t (**)(_QWORD, _QWORD, __CVBuffer *, __int128 *, _QWORD, _OWORD *))(*(_QWORD *)(a1 + 752) + 56))(*(_QWORD *)(a1 + 760), *(_QWORD *)(a1 + 776), a2, &v121, *(_QWORD *)(a1 + 232), v115);
              v59 = cfa;
              if (!(_DWORD)v22)
              {
                v60 = VTMetalTransferSessionTransferImageSync(*(const __CFArray **)(a1 + 1160), *(void **)(a1 + 232), v30, *(const __CFDictionary **)(a1 + 1168));
LABEL_89:
                v22 = v60;
                goto LABEL_95;
              }
              goto LABEL_95;
            }
            v66 = VTMetalTransferSessionTransferImageSync(*(const __CFArray **)(a1 + 1160), a2, *(void **)(a1 + 232), *(const __CFDictionary **)(a1 + 1168));
LABEL_159:
            v22 = v66;
            v59 = cfa;
            if (!(_DWORD)v66)
            {
              v60 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _OWORD *, __CVBuffer *, __int128 *))(*(_QWORD *)(a1 + 752) + 56))(*(_QWORD *)(a1 + 760), *(_QWORD *)(a1 + 776), *(_QWORD *)(a1 + 232), v115, v30, &v118);
              goto LABEL_89;
            }
            goto LABEL_95;
          }
          v64 = *(uint64_t (**)(__CVBuffer *, uint64_t, _QWORD))(a1 + 216);
          if (!v64)
          {
            v67 = *(const __CFArray **)(a1 + 1160);
            v68 = *(const __CFDictionary **)(a1 + 1168);
            v69 = a2;
LABEL_163:
            v54 = VTMetalTransferSessionTransferImageSync(v67, v69, v30, v68);
            goto LABEL_93;
          }
          if (v50 != v46 || v49 != v47)
          {
            v54 = VTMetalTransferSessionTransferImageSync(*(const __CFArray **)(a1 + 1160), a2, *(void **)(a1 + 232), *(const __CFDictionary **)(a1 + 1168));
            if (!(_DWORD)v54)
              v54 = (*(uint64_t (**)(_QWORD, uint64_t, __CVBuffer *, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _BYTE, _QWORD))(a1 + 216))(*(_QWORD *)(a1 + 232), a1 + 240, v30, a1 + 640, a1 + 288, 0, v42, *(unsigned __int8 *)(a1 + 1138), *(_BYTE *)(a1 + 745), *(_QWORD *)(a1 + 1144));
            goto LABEL_93;
          }
          v54 = v64(a2, a1 + 592, *(_QWORD *)(a1 + 232));
          if (!(_DWORD)v54)
          {
            v67 = *(const __CFArray **)(a1 + 1160);
            v69 = *(__CVBuffer **)(a1 + 232);
            v68 = *(const __CFDictionary **)(a1 + 1168);
            goto LABEL_163;
          }
        }
        else
        {
          v65 = *(uint64_t (**)(__CVBuffer *, uint64_t, __CVBuffer *, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _BYTE, _QWORD))(a1 + 216);
          if (!v65)
          {
            v22 = 4294954391;
            goto LABEL_94;
          }
          v54 = v65(a2, a1 + 592, v30, a1 + 640, a1 + 288, 0, v42, *(unsigned __int8 *)(a1 + 1138), *(_BYTE *)(a1 + 745), *(_QWORD *)(a1 + 1144));
        }
LABEL_93:
        v22 = v54;
LABEL_94:
        v59 = cfa;
        goto LABEL_95;
      }
      v63 = a1 + 240;
      if (*(_DWORD *)(a1 + 580) != CVPixelBufferGetPixelFormatType(*(CVPixelBufferRef *)(a1 + 232)))
      {
        v66 = vtPixelTransferSession_InvokeBlitter(*(_QWORD *)(a1 + 696), *(_QWORD *)(a1 + 704), *(_QWORD *)(a1 + 712), (_QWORD *)(a1 + 728), (_QWORD *)(a1 + 736), a2, *(__CVBuffer **)(a1 + 232), a1 + 592, v63);
        goto LABEL_159;
      }
      v22 = (*(uint64_t (**)(_QWORD, _QWORD, __CVBuffer *, __int128 *, _QWORD, _OWORD *))(*(_QWORD *)(a1 + 752)
                                                                                                  + 56))(*(_QWORD *)(a1 + 760), *(_QWORD *)(a1 + 776), a2, &v121, *(_QWORD *)(a1 + 232), v115);
      v59 = cfa;
      if (!(_DWORD)v22)
      {
        v60 = vtPixelTransferSession_InvokeBlitter(*(_QWORD *)(a1 + 696), *(_QWORD *)(a1 + 704), *(_QWORD *)(a1 + 712), (_QWORD *)(a1 + 728), (_QWORD *)(a1 + 736), *(CVPixelBufferRef *)(a1 + 232), v30, v63, a1 + 640);
        goto LABEL_89;
      }
LABEL_95:
      if (v59)
        CFRelease(v59);
      if ((_DWORD)v22)
        goto LABEL_131;
LABEL_98:
      if (*(_BYTE *)(a1 + 1136)
        || *(_BYTE *)(a1 + 1137)
        || (v22 = VTFillPixelsOutsideDestRectWithBlack(v30, (uint64_t *)(a1 + 640), (uint64_t **)(a1 + 736)), !(_DWORD)v22))
      {
        if (*(_DWORD *)(a1 + 1016) != 2)
          goto LABEL_116;
        v61 = vtVImageConverterProc(*(__CVBuffer **)(a1 + 1040), a3, a1 + 1056);
LABEL_115:
        v22 = v61;
        if (!(_DWORD)v61)
        {
LABEL_116:
          if (v114)
          {
            if (v23)
              CVBufferSetAttachment(a3, key, v23, kCVAttachmentMode_ShouldPropagate);
            else
              CVBufferRemoveAttachment(a3, key);
            if (v24)
              CVBufferSetAttachment(a3, v106, v24, kCVAttachmentMode_ShouldPropagate);
            else
              CVBufferRemoveAttachment(a3, v106);
            if (v9)
              CVBufferSetAttachment(a3, v107, v9, kCVAttachmentMode_ShouldPropagate);
            else
              CVBufferRemoveAttachment(a3, v107);
            if (value)
              CVBufferSetAttachment(a3, v108, value, kCVAttachmentMode_ShouldPropagate);
            else
              CVBufferRemoveAttachment(a3, v108);
            CVBufferSetAttachment(a3, v105, v114, kCVAttachmentMode_ShouldPropagate);
          }
          ++*(_QWORD *)(a1 + 1232);
        }
      }
LABEL_131:
      if (v29)
        CFRelease(v29);
LABEL_133:
      if (v23)
        CFRelease(v23);
      if (v24)
        CFRelease(v24);
      if (v9)
        CFRelease(v9);
      if (value)
        CFRelease(value);
      if (v114)
        CFRelease(v114);
      return v22;
  }
}

uint64_t VTPixelTransferSessionGetNextSoftwareBlitter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t result;

  v4 = *(_QWORD *)(a4 + 32);
  if (v4)
  {
    if (v4 > 0x134C)
    {
LABEL_14:
      v9 = 0;
      result = 0;
      *(_DWORD *)a2 = 0;
      *(_QWORD *)(a3 + 64) = 0;
      *(_OWORD *)(a3 + 32) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      goto LABEL_15;
    }
    v5 = &VTPixelGraphBlitterTable[48 * v4];
    while (v5[4] != *(_BYTE *)(a1 + 5))
    {
      *(_QWORD *)(a4 + 32) = ++v4;
      v5 += 48;
      if (v4 == 4941)
        goto LABEL_11;
    }
  }
  else
  {
    v5 = "yuv2\t";
    while (*(_DWORD *)v5 != *(_DWORD *)a1 || v5[4] != *(_BYTE *)(a1 + 5))
    {
      *(_QWORD *)(a4 + 32) = ++v4;
      v5 += 48;
      if (v4 == 4941)
      {
LABEL_11:
        v5 = "pedf";
        break;
      }
    }
  }
  if (*(_DWORD *)v5 != *(_DWORD *)a1)
    goto LABEL_14;
  *(_DWORD *)a2 = *((_DWORD *)v5 + 2);
  *(_BYTE *)(a2 + 6) = v5[13];
  *(_BYTE *)(a2 + 7) = v5[14];
  *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 4) & 0x1F;
  *(_BYTE *)(a2 + 5) = v5[12];
  v6 = *((_QWORD *)v5 + 2);
  *(_QWORD *)a3 = *((_QWORD *)v5 + 5);
  *(_QWORD *)(a3 + 8) = v6;
  *(_QWORD *)(a3 + 16) = *((_QWORD *)v5 + 3);
  *(_DWORD *)(a3 + 40) = 4;
  v7 = *((_QWORD *)v5 + 4);
  *(_QWORD *)&v8 = v7;
  *((_QWORD *)&v8 + 1) = HIDWORD(v7);
  *(_OWORD *)(a3 + 48) = v8;
  *(_BYTE *)(a3 + 64) = 0;
  v9 = *(_QWORD *)(a4 + 32) + 1;
  result = 1;
LABEL_15:
  *(_QWORD *)(a4 + 32) = v9;
  return result;
}

uint64_t VTPixelTransferSessionGetNextVImageBlitter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  int *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t result;

  v4 = *(_QWORD *)(a4 + 32);
  if (v4)
  {
    if (v4 > 0x157)
    {
LABEL_14:
      v11 = 0;
      result = 0;
      *(_DWORD *)a2 = 0;
      *(_QWORD *)(a3 + 64) = 0;
      *(_OWORD *)(a3 + 32) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      goto LABEL_15;
    }
    v5 = &VTPixelGraphVImageBlitterTable[8 * v4];
    v6 = v4 + 1;
    while (*((unsigned __int8 *)v5 + 4) != *(unsigned __int8 *)(a1 + 5))
    {
      *(_QWORD *)(a4 + 32) = v6;
      v5 += 8;
      if (++v6 == 345)
        goto LABEL_11;
    }
  }
  else
  {
    v5 = VTPixelGraphVImageBlitterTable;
    v7 = 1;
    while (*v5 != *(_DWORD *)a1 || *((unsigned __int8 *)v5 + 4) != *(unsigned __int8 *)(a1 + 5))
    {
      *(_QWORD *)(a4 + 32) = v7++;
      v5 += 8;
      if (v7 == 345)
      {
LABEL_11:
        v5 = (int *)"02wx\t";
        break;
      }
    }
  }
  if (*v5 != *(_DWORD *)a1)
    goto LABEL_14;
  *(_DWORD *)a2 = v5[2];
  *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 4) & 0x1F;
  *(_BYTE *)(a2 + 5) = *((_BYTE *)v5 + 12);
  *(_BYTE *)(a2 + 6) = *((_BYTE *)v5 + 13);
  *(_BYTE *)(a2 + 7) = *((_BYTE *)v5 + 14);
  v8 = *((_QWORD *)v5 + 2);
  *(_QWORD *)a3 = vtPixelTransferAppendvImageBlitterNodeCallback;
  *(_QWORD *)(a3 + 8) = v8;
  *(_DWORD *)(a3 + 40) = 4;
  v9 = *((_QWORD *)v5 + 3);
  *(_QWORD *)&v10 = v9;
  *((_QWORD *)&v10 + 1) = HIDWORD(v9);
  *(_OWORD *)(a3 + 48) = v10;
  *(_BYTE *)(a3 + 64) = 0;
  v11 = *(_QWORD *)(a4 + 32) + 1;
  result = 1;
LABEL_15:
  *(_QWORD *)(a4 + 32) = v11;
  return result;
}

uint64_t vtPixelTransferAppendvImageBlitterNodeCallback(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t (*v10)(unint64_t, unint64_t, CFStringRef, CFStringRef, _QWORD, _QWORD, _QWORD, uint64_t *, uint64_t *, uint64_t, void (**)(void));
  CFStringRef StringForIntegerCodePoint;
  CFStringRef v12;
  uint64_t CurrentDimensions;
  uint64_t appended;
  CFTypeRef cf;
  void (*v17)(void);
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;

  v10 = *(uint64_t (**)(unint64_t, unint64_t, CFStringRef, CFStringRef, _QWORD, _QWORD, _QWORD, uint64_t *, uint64_t *, uint64_t, void (**)(void)))(a3 + 8);
  v20 = 0u;
  v21 = 0u;
  v18 = 0;
  v19 = 0;
  v17 = 0;
  StringForIntegerCodePoint = CVYCbCrMatrixGetStringForIntegerCodePoint(*(unsigned __int8 *)(a1 + 5));
  v12 = CVYCbCrMatrixGetStringForIntegerCodePoint(*((unsigned __int8 *)a2 + 5));
  cf = 0;
  CurrentDimensions = VTPixelTransferGraphGetCurrentDimensions(a1, (uint64_t)a2, a3, a6, 0, (uint64_t)&v20);
  if ((_DWORD)CurrentDimensions
    || (CurrentDimensions = v10((unint64_t)*(double *)&v21, (unint64_t)*((double *)&v21 + 1), StringForIntegerCodePoint, v12, *(_QWORD *)(a6 + 136), *(unsigned __int8 *)(a6 + 144), 0, &v19, &v18, a3 + 32, &v17), (_DWORD)CurrentDimensions)|| (CurrentDimensions = VTPixelTransferChainCreatePixelBufferPoolAttributes(*a2, (unint64_t)*(double *)&v21, (unint64_t)*((double *)&v21 + 1), (CFMutableDictionaryRef *)&cf), (_DWORD)CurrentDimensions))
  {
    appended = CurrentDimensions;
  }
  else
  {
    appended = VTPixelTransferChainAppendSoftwareNode();
    if (!(_DWORD)appended)
      v19 = 0;
  }
  if (cf)
    CFRelease(cf);
  if (v19)
    v17();
  return appended;
}

void VTPixelTransferNodeSoftwareFinalize()
{
  _QWORD *DerivedStorage;
  void *v1;
  void *v2;
  void (*v3)(_QWORD);

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  DerivedStorage[4] = 0;
  v1 = (void *)DerivedStorage[7];
  if (v1)
  {
    free(v1);
    DerivedStorage[7] = 0;
  }
  v2 = (void *)DerivedStorage[8];
  if (v2)
  {
    free(v2);
    DerivedStorage[8] = 0;
  }
  v3 = (void (*)(_QWORD))DerivedStorage[6];
  if (v3)
    v3(DerivedStorage[5]);
  VTPixelTransferNodeBaseFinalize();
}

const __CFString *VTPixelTransferNodeSoftwareCopyDebugDescription()
{
  return CFSTR("[VTPixelTransferNodeSoftware]");
}

uint64_t VTPixelTransferNodeSoftwareDoTransfer(uint64_t a1, __CVBuffer *a2, uint64_t a3, __CVBuffer *a4, uint64_t a5)
{
  _QWORD *DerivedStorage;
  _OWORD v11[3];
  _OWORD v12[3];

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  memset(v12, 0, sizeof(v12));
  memset(v11, 0, sizeof(v11));
  VTConvertFloatRectToIntRect(a3, (uint64_t)v12);
  VTConvertFloatRectToIntRect(a5, (uint64_t)v11);
  return vtPixelTransferSession_InvokeBlitter(DerivedStorage[3], DerivedStorage[4], DerivedStorage[5], DerivedStorage + 7, DerivedStorage + 8, a2, a4, (uint64_t)v12, (uint64_t)v11);
}

unint64_t vtPixelTransferSession_PrepareOffsets(unint64_t result, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t *a5, _QWORD *a6)
{
  int8x16_t *v6;
  int8x16_t v7;
  unint64_t v8;
  int8x16_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (result >= 2)
  {
    v6 = (int8x16_t *)(a3 + 3);
    v7 = (int8x16_t)vdupq_n_s64(1uLL);
    v8 = result;
    do
    {
      v9 = *v6;
      v6 += 7;
      v7 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v7, (uint64x2_t)v9), v7, v9);
      --v8;
    }
    while (v8);
    v10 = *(_QWORD *)(a2 + 40) / v7.i64[1] * v7.i64[1];
    v11 = *(_QWORD *)(a2 + 32) / v7.i64[0] * v7.i64[0];
    v12 = a3 + 2;
    do
    {
      v14 = *a5++;
      v13 = v14;
      v15 = *(v12 - 2);
      v16 = *a4++;
      v17 = v13 + v16 * v10 / (unint64_t)(v12[2] * *(v12 - 1));
      v18 = *v12;
      v19 = v12[1];
      v12 += 14;
      *a6++ = v17 + v18 * v11 / (8 * v15 * v19);
      --result;
    }
    while (result);
  }
  else
  {
    *a6 = *a5
        + (unint64_t)(*a4 * *(_QWORD *)(a2 + 40) / a3[4] * a3[4]) / a3[1]
        + a3[2] * *(_QWORD *)(a2 + 32) / a3[3] * a3[3] / (unint64_t)(8 * *a3);
  }
  return result;
}

void VTPixelTransferNodeScalerFinalize()
{
  _QWORD *DerivedStorage;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  uint64_t i;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  DerivedStorage[3] = 0;
  v1 = (void *)DerivedStorage[36];
  if (v1)
  {
    free(v1);
    DerivedStorage[36] = 0;
  }
  v2 = (void *)DerivedStorage[37];
  if (v2)
  {
    free(v2);
    DerivedStorage[37] = 0;
  }
  v3 = (void *)DerivedStorage[38];
  if (v3)
  {
    free(v3);
    DerivedStorage[38] = 0;
  }
  v4 = 0;
  v5 = DerivedStorage + 4;
  do
  {
    v6 = (void *)v5[v4];
    if (v6)
    {
      free(v6);
      v5[v4] = 0;
    }
    v4 += 4;
  }
  while (v4 != 16);
  v7 = 0;
  v8 = DerivedStorage + 20;
  do
  {
    v9 = (void *)v8[v7];
    if (v9)
    {
      free(v9);
      v8[v7] = 0;
    }
    v7 += 4;
  }
  while (v7 != 16);
  for (i = 0; i != 16; i += 4)
  {
    v11 = (void *)v5[i];
    if (v11)
    {
      free(v11);
      v5[i] = 0;
    }
  }
  v12 = 0;
  v13 = DerivedStorage + 16;
  do
  {
    v14 = (void *)v13[v12];
    if (v14)
    {
      free(v14);
      v13[v12] = 0;
    }
    v12 += 4;
  }
  while (v12 != 16);
  v15 = (void *)DerivedStorage[36];
  if (v15)
  {
    free(v15);
    DerivedStorage[36] = 0;
  }
  v16 = (void *)DerivedStorage[37];
  if (v16)
  {
    free(v16);
    DerivedStorage[37] = 0;
  }
  v17 = (void *)DerivedStorage[38];
  if (v17)
  {
    free(v17);
    DerivedStorage[38] = 0;
  }
  VTPixelTransferNodeBaseFinalize();
}

const __CFString *VTPixelTransferNodeScalerCopyDebugDescription()
{
  return CFSTR("[VTPixelTransferNodeScaler]");
}

uint64_t VTPixelTransferNodeScalerDoTransfer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage;
  __n128 v10;
  _OWORD v12[3];
  _OWORD v13[3];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(v13, 0, sizeof(v13));
  memset(v12, 0, sizeof(v12));
  VTConvertFloatRectToIntRect(a3, (uint64_t)v13);
  v10 = VTConvertFloatRectToIntRect(a5, (uint64_t)v12);
  return (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t, _OWORD *, uint64_t, _QWORD, _QWORD, _QWORD, __n128, _BYTE, _QWORD))(DerivedStorage + 24))(a2, v13, a4, v12, DerivedStorage + 32, *(unsigned __int8 *)(DerivedStorage + 312), *(unsigned __int8 *)(DerivedStorage + 313), *(unsigned __int8 *)(DerivedStorage + 314), v10, *(_BYTE *)(DerivedStorage + 315), *(_QWORD *)(DerivedStorage + 320));
}

void VTPixelTransferNodeDynamicFinalize()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const void **)(DerivedStorage + 136);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 136) = 0;
  }
  (*(void (**)(_QWORD))(DerivedStorage + 160))(*(_QWORD *)(DerivedStorage + 24));
  *(_QWORD *)(DerivedStorage + 24) = 0;
  *(_QWORD *)(DerivedStorage + 152) = 0;
  *(_QWORD *)(DerivedStorage + 160) = 0;
  *(_QWORD *)(DerivedStorage + 144) = 0;
  VTPixelTransferNodeBaseFinalize();
}

const __CFString *VTPixelTransferNodeDynamicCopyDebugDescription()
{
  return CFSTR("[VTPixelTransferNodeDynamic]");
}

uint64_t VTPixelTransferNodeDynamicDoTransfer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage;
  uint64_t v10;
  uint64_t *v11;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v11 = (uint64_t *)(DerivedStorage + 24);
  v10 = *(_QWORD *)(DerivedStorage + 24);
  if (!v10)
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(DerivedStorage + 144))(*MEMORY[0x1E0C9AE00], *(_QWORD *)(DerivedStorage + 136), a2, a3, a4, a5, v11);
    if ((_DWORD)result)
      return result;
    v10 = *v11;
  }
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(DerivedStorage + 152))(v10, *(_QWORD *)(DerivedStorage + 136), a2, a3, a4, a5);
}

CFTypeRef vtPixelTransferSessionCopyFormattingDesc()
{
  return CFRetain(CFSTR("[VTPixelTransferSession]"));
}

__CFString *vtPixelTransferSessionCopyDebugDesc(const void *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  CFAllocatorRef v4;

  v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  v4 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<VTPixelTransferSession %p [%p]>{"), a1, v4);
  CFStringAppendFormat(Mutable, 0, CFSTR("}"));
  return Mutable;
}

uint64_t vtAllowTransferCapabilityCommonOnce()
{
  uint64_t result;

  sAllowSoftwareTransferSession = FigGetCFPreferenceBooleanWithDefault();
  sAllowMetalTransferSession = FigGetCFPreferenceBooleanWithDefault();
  sAllowHardwareTransferSession = FigGetCFPreferenceBooleanWithDefault();
  sAllowPixelTransferChain = FigGetCFPreferenceBooleanWithDefault();
  sAllowPixelTransferGraph = FigGetCFPreferenceBooleanWithDefault();
  result = FigGetCFPreferenceBooleanWithDefault();
  sAllowPixelTransferFallbacks = result;
  return result;
}

CFArrayRef vtPixelTransferSessionCreateYCbCrMatricesArray()
{
  void *v0;
  CFArrayRef v1;
  void *values[7];

  values[6] = *(void **)MEMORY[0x1E0C80C00];
  v0 = (void *)*MEMORY[0x1E0CA8F10];
  values[0] = *(void **)MEMORY[0x1E0CA8F18];
  values[1] = v0;
  values[2] = *(void **)MEMORY[0x1E0CA8F30];
  values[3] = CFSTR("ITU_R_2020");
  values[4] = CFSTR("DCI_P3");
  values[5] = CFSTR("P3_D65");
  v1 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)values, 6, MEMORY[0x1E0C9B378]);
  if (!v1)
    FigSignalErrorAt();
  return v1;
}

void vtPixelTransferSessionUpdateTransferOptions(uint64_t a1)
{
  __CFDictionary *Mutable;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  __CFDictionary *v9;
  const void *v10;
  __CFDictionary *v11;
  __CFDictionary *v12;

  Mutable = *(__CFDictionary **)(a1 + 776);
  if (!Mutable)
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    *(_QWORD *)(a1 + 776) = Mutable;
  }
  v3 = (const void *)*MEMORY[0x1E0C9AE50];
  v4 = (const void *)*MEMORY[0x1E0C9AE40];
  if (*(_BYTE *)(a1 + 770))
    v5 = (const void *)*MEMORY[0x1E0C9AE50];
  else
    v5 = (const void *)*MEMORY[0x1E0C9AE40];
  CFDictionarySetValue(Mutable, CFSTR("ServiceEnableHighSpeedTransfer"), v5);
  if (*(_BYTE *)(a1 + 784))
    v6 = v3;
  else
    v6 = v4;
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 776), CFSTR("ServiceDisableDither"), v6);
  if (*(_BYTE *)(a1 + 785))
    v7 = v3;
  else
    v7 = v4;
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 776), CFSTR("ServiceUseOptimalMSRCoefficients"), v7);
  if (*(_BYTE *)(a1 + 789))
  {
    v8 = *(const void **)(a1 + 800);
    v9 = *(__CFDictionary **)(a1 + 776);
    if (v8)
    {
      CFDictionarySetValue(v9, CFSTR("ServiceHistogramRectangle"), v8);
      goto LABEL_17;
    }
  }
  else
  {
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 776), CFSTR("ServiceHistogramData"));
    v9 = *(__CFDictionary **)(a1 + 776);
  }
  CFDictionaryRemoveValue(v9, CFSTR("ServiceHistogramRectangle"));
LABEL_17:
  v10 = *(const void **)(a1 + 1128);
  v11 = *(__CFDictionary **)(a1 + 776);
  if (v10)
    CFDictionarySetValue(v11, CFSTR("RealTime"), v10);
  else
    CFDictionaryRemoveValue(v11, CFSTR("RealTime"));
  v12 = *(__CFDictionary **)(a1 + 776);
  if (*(_BYTE *)(a1 + 1187))
    CFDictionarySetValue(v12, CFSTR("ReducedPrecisionFractionalOffsets"), v3);
  else
    CFDictionaryRemoveValue(v12, CFSTR("ReducedPrecisionFractionalOffsets"));
}

char *vt_Copy_v210_10bitBiPlanarYUV422(__CVBuffer *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t BytesPerRowOfPlane;
  char *result;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _WORD *v19;
  _WORD *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;

  v5 = a3[2];
  v6 = a3[3];
  v8 = *a3;
  v7 = a3[1];
  v9 = a3[7];
  v10 = a3[4];
  if (CVPixelBufferIsPlanar(a1))
  {
    BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
    result = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  }
  else
  {
    BytesPerRowOfPlane = CVPixelBufferGetBytesPerRow(a1);
    result = (char *)CVPixelBufferGetBaseAddress(a1);
  }
  if (v7 >= 1)
  {
    v13 = 0;
    v14 = (v5 + 5) / 6;
    v15 = &result[2 * *(_QWORD *)(a2 + 32) + *(_QWORD *)(a2 + 40) * BytesPerRowOfPlane];
    if (v14 <= 1)
      v14 = 1;
    do
    {
      if (v5 >= 1)
      {
        v16 = 0;
        v17 = 0;
        v18 = v14;
        do
        {
          v19 = (_WORD *)(v8 + v16);
          v20 = (_WORD *)(v10 + v16);
          v21 = *(_DWORD *)&v15[v17];
          result = (char *)*(unsigned int *)&v15[v17 + 4];
          v22 = *(_DWORD *)&v15[v17 + 8];
          v23 = *(_DWORD *)&v15[v17 + 12];
          *v20 = (_WORD)v21 << 6;
          *v19 = (v21 >> 4) & 0xFFC0;
          v20[1] = (v21 >> 14) & 0xFFC0;
          v19[1] = (_WORD)result << 6;
          v20[2] = (result >> 4) & 0xFFC0;
          v19[2] = (result >> 14) & 0xFFC0;
          v20[3] = (_WORD)v22 << 6;
          v19[3] = (v22 >> 4) & 0xFFC0;
          v20[4] = (v22 >> 14) & 0xFFC0;
          v19[4] = (_WORD)v23 << 6;
          v20[5] = (v23 >> 4) & 0xFFC0;
          v19[5] = (v23 >> 14) & 0xFFC0;
          v17 += 16;
          v16 += 12;
          --v18;
        }
        while (v18);
      }
      v15 += BytesPerRowOfPlane;
      v8 += v6;
      v10 += v9;
      ++v13;
    }
    while (v13 != v7);
  }
  return result;
}

__int16 *vt_Copy_10bitBiPlanarYUV422_v210(uint64_t *a1, CVPixelBufferRef pixelBuffer, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t BytesPerRowOfPlane;
  __int16 *result;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint32x4_t v16;
  uint32x4_t v17;
  uint64_t v18;
  uint64_t i;
  uint16x4_t v20;
  uint16x4_t v21;
  uint16x4_t v22;

  v5 = a1[2];
  v6 = a1[3];
  v8 = *a1;
  v7 = a1[1];
  v9 = a1[7];
  v10 = a1[4];
  if (CVPixelBufferIsPlanar(pixelBuffer))
  {
    BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0);
    result = (__int16 *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
  }
  else
  {
    BytesPerRowOfPlane = CVPixelBufferGetBytesPerRow(pixelBuffer);
    result = (__int16 *)CVPixelBufferGetBaseAddress(pixelBuffer);
  }
  if (v7 >= 1)
  {
    v13 = 0;
    v14 = (v5 + 5) / 6;
    v15 = (char *)&result[*(_QWORD *)(a3 + 32)] + *(_QWORD *)(a3 + 40) * BytesPerRowOfPlane;
    if (v14 <= 1)
      v14 = 1;
    v16.i64[0] = 0x2000000020;
    v16.i64[1] = 0x2000000020;
    v17.i64[0] = 0x300000003;
    v17.i64[1] = 0x300000003;
    do
    {
      if (v5 >= 1)
      {
        v18 = 0;
        for (i = 0; i != v14; ++i)
        {
          result = (__int16 *)(v10 + v18 + 10);
          v20.i16[0] = *(_WORD *)(v8 + v18);
          v20.i16[1] = *(_WORD *)(v10 + v18 + 4);
          v20.i16[2] = *(_WORD *)(v8 + v18 + 6);
          v20.i16[3] = *result;
          v21.i16[0] = *(_WORD *)(v10 + v18);
          v21.i16[1] = *(_WORD *)(v8 + v18 + 2);
          v21.i16[2] = *(_WORD *)(v10 + v18 + 6);
          v21.i16[3] = *(_WORD *)(v8 + v18 + 8);
          v22.i16[0] = *(_WORD *)(v10 + v18 + 2);
          v22.i16[1] = *(_WORD *)(v8 + v18 + 4);
          v22.i16[2] = *(_WORD *)(v10 + v18 + 8);
          v22.i16[3] = *(_WORD *)(v8 + v18 + 10);
          *(int8x16_t *)&v15[16 * i] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vminq_u32(vshrq_n_u32(vaddw_u16(v16, v20), 6uLL), v17), 0xAuLL), (int8x16_t)vminq_u32(vshrq_n_u32(vaddw_u16(v16, v21), 6uLL), v17)), (int8x16_t)vshlq_n_s32((int32x4_t)vminq_u32(vshrq_n_u32(vaddw_u16(v16, v22), 6uLL), v17), 0x14uLL));
          v18 += 12;
        }
      }
      v8 += v6;
      v10 += v9;
      v15 += BytesPerRowOfPlane;
      ++v13;
    }
    while (v13 != v7);
  }
  return result;
}

CFDictionaryRef vtCreatePixelAspectRatioAttachment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  CFDictionaryRef v11;
  uint64_t v12;
  const __CFAllocator *v13;
  void *v14;
  CFNumberRef v15;
  uint64_t v17;
  uint64_t valuePtr;
  void *values;
  CFTypeRef cf;
  void *keys[3];

  keys[2] = *(void **)MEMORY[0x1E0C80C00];
  v4 = (void *)*MEMORY[0x1E0CA8E70];
  keys[0] = *(void **)MEMORY[0x1E0CA8E60];
  keys[1] = v4;
  v5 = a4 * a1;
  v6 = a3 * a2;
  if (a4 * a1 >= 0)
    v7 = a4 * a1;
  else
    v7 = -v5;
  if (v6 >= 0)
    v8 = a3 * a2;
  else
    v8 = -v6;
  if (v7 <= v8)
    v9 = v8;
  else
    v9 = v7;
  if (v7 >= v8)
    v7 = v8;
  if (v7)
  {
    if (v7 < 1)
    {
      v10 = v9;
    }
    else
    {
      do
      {
        v10 = v7;
        v7 = v9 % v7;
        v9 = v10;
      }
      while (v7 > 0);
    }
  }
  else if ((unint64_t)v9 <= 1)
  {
    v10 = 1;
  }
  else
  {
    v10 = v9;
  }
  v11 = 0;
  v12 = v6 / v10;
  v17 = v12;
  valuePtr = v5 / v10;
  if (v5 / v10 && v12)
  {
    v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v14 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, &valuePtr);
    values = v14;
    v15 = CFNumberCreate(v13, kCFNumberSInt64Type, &v17);
    v11 = 0;
    cf = v15;
    if (v14 && v15)
    {
      v11 = CFDictionaryCreate(v13, (const void **)keys, (const void **)&values, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v14 = values;
    }
    if (v14)
      CFRelease(v14);
    if (cf)
      CFRelease(cf);
  }
  return v11;
}

uint64_t vtPixelTransferServiceNodeMatchesSourceAndDestinationPixelFormats(uint64_t *a1, int a2, int a3)
{
  uint64_t v3;
  int *v4;
  int v5;
  uint64_t v6;
  int *v7;
  int v8;

  v3 = *a1;
  if (*a1 < 1)
    return 0;
  v4 = (int *)a1[1];
  while (1)
  {
    v5 = *v4++;
    if (v5 == a2)
      break;
    if (!--v3)
      return 0;
  }
  v6 = a1[2];
  if (v6 < 1)
    return 0;
  v7 = (int *)a1[3];
  while (1)
  {
    v8 = *v7;
    v7 += 2;
    if (v8 == a3)
      break;
    if (!--v6)
      return 0;
  }
  return 1;
}

vImage_Error vt_VImage_Setup_2vuy_32ARGB(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  vImage_YpCbCrToARGB *v17;
  __int128 v18;
  const vImage_YpCbCrToARGBMatrix **v19;
  const vImage_YpCbCrToARGBMatrix *DefaultYpCbCrToARGBMatrixWithDimensionHint;
  int v21;
  vImage_Error result;
  __int128 v23;
  int v24;
  vImage_YpCbCrPixelRange pixelRange;

  v23 = 0uLL;
  v24 = 0;
  v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_QWORD *)&v18 = 255;
  *((_QWORD *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFBF0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v23 = xmmword_1928DFC00;
      v21 = 1072585656;
    }
    else if (FigCFEqual())
    {
      v23 = xmmword_1928DFC10;
      v21 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDA8];
        goto LABEL_3;
      }
      v23 = xmmword_1928DFC20;
      v21 = 1072746935;
    }
    v24 = v21;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v23;
    goto LABEL_11;
  }
  v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDB0];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v19;
LABEL_11:
  result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage422CbYpCrYp8, kvImageARGB8888, 0);
  *(_QWORD *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_2vuy_32ARGB;
  *a11 = vt_VImage_Cleanup_2vuy_32ARGB;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_2vuy_32BGRA(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  vImage_YpCbCrToARGB *v17;
  __int128 v18;
  const vImage_YpCbCrToARGBMatrix **v19;
  const vImage_YpCbCrToARGBMatrix *DefaultYpCbCrToARGBMatrixWithDimensionHint;
  int v21;
  vImage_Error result;
  __int128 v23;
  int v24;
  vImage_YpCbCrPixelRange pixelRange;

  v23 = 0uLL;
  v24 = 0;
  v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_QWORD *)&v18 = 255;
  *((_QWORD *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFBF0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v23 = xmmword_1928DFC00;
      v21 = 1072585656;
    }
    else if (FigCFEqual())
    {
      v23 = xmmword_1928DFC10;
      v21 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDA8];
        goto LABEL_3;
      }
      v23 = xmmword_1928DFC20;
      v21 = 1072746935;
    }
    v24 = v21;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v23;
    goto LABEL_11;
  }
  v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDB0];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v19;
LABEL_11:
  result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage422CbYpCrYp8, kvImageARGB8888, 0);
  *(_QWORD *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_2vuy_32BGRA;
  *a11 = vt_VImage_Cleanup_2vuy_32BGRA;
  *a8 = v17;
  return result;
}

uint64_t vt_CopyAvg_2vuy_y420(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned __int8 v42;
  char v43;
  char v44;
  __int128 v46;
  __int128 v47;
  _OWORD v48[2];
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _BYTE v54[48];
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  _BYTE v59[48];
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v69 = 0u;
  v70 = 0u;
  v67 = 0u;
  v68 = 0u;
  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  v61 = 0u;
  v62 = 0u;
  v60 = 0u;
  *(_OWORD *)&v59[32] = 0u;
  *(_OWORD *)&v59[16] = 0u;
  *(_OWORD *)v59 = 0u;
  v58 = 0u;
  v57 = 0u;
  v56 = 0u;
  v55 = 0u;
  *(_OWORD *)&v54[32] = 0u;
  *(_OWORD *)&v54[16] = 0u;
  *(_OWORD *)v54 = 0u;
  v53 = 0u;
  v52 = 0u;
  v51 = 0u;
  v50 = 0u;
  v46 = 0u;
  v47 = 0u;
  v9 = a2[2];
  v10 = a2[3];
  v48[0] = vdupq_n_s64(1uLL);
  v48[1] = xmmword_1928DFC30;
  v49 = 1;
  *(_OWORD *)&v54[8] = v48[0];
  *(_OWORD *)&v54[24] = xmmword_1928DFC40;
  *(_QWORD *)&v54[40] = 2;
  *(_OWORD *)&v59[8] = v48[0];
  *(_OWORD *)&v59[24] = xmmword_1928DFC40;
  v71 = 0;
  *(_QWORD *)&v59[40] = 2;
  v12 = a2[4];
  v11 = a2[5];
  v13 = *a3;
  v14 = *a4;
  vtPixelTransferSession_PrepareOffsets(3uLL, a6, v48, a8, a7, &v46);
  if (v10 >= 2)
  {
    v15 = 0;
    v16 = *a8;
    v17 = a8[1];
    v18 = a8[2];
    v19 = v10 >> 1;
    v20 = v9 >> 1;
    v21 = (2 * v12) & 0xFFFFFFFFFFFFFFCLL;
    v23 = *((_QWORD *)&v46 + 1);
    v22 = v47;
    v24 = v13 + v21 + v14 * v11;
    v25 = 2 * *a8;
    v26 = 2 * v14;
    if (v9 >> 1 <= 1)
      v20 = 1;
    v27 = (_BYTE *)(v46 + 1);
    v28 = v13 + v14 + v21 + v14 * v11;
    do
    {
      if (v9 >= 2)
      {
        v29 = 0;
        v30 = 0;
        v31 = v27;
        do
        {
          v32 = &v31[v16];
          v33 = (unsigned __int8 *)(v28 + v29);
          v34 = (unsigned __int8 *)(v24 + v29);
          v35 = *(unsigned __int8 *)(v28 + v29) + *(unsigned __int8 *)(v24 + v29);
          v36 = v35 >> 1;
          if (v35 >> 1 >= 0xF0)
            LOBYTE(v36) = -16;
          v37 = v34[1];
          if (v37 >= 0xEB)
            v37 = 235;
          if (v37 <= 0x10)
            LOBYTE(v37) = 16;
          v38 = v33[2] + v34[2];
          v39 = v38 >> 1;
          if (v38 >> 1 >= 0xF0)
            LOBYTE(v39) = -16;
          v40 = v34[3];
          if (v40 >= 0xEB)
            v40 = 235;
          if (v40 <= 0x10)
            LOBYTE(v40) = 16;
          v41 = v33[1];
          if (v41 >= 0xEB)
            v41 = 235;
          if (v41 <= 0x10)
            LOBYTE(v41) = 16;
          v42 = v33[3];
          *(v31 - 1) = v37;
          *v31 = v40;
          v31 += 2;
          *(v32 - 1) = v41;
          *v32 = v42;
          if (v35 >= 0x20)
            v43 = v36;
          else
            v43 = 16;
          *(_BYTE *)(v23 + v30) = v43;
          if (v38 >= 0x20)
            v44 = v39;
          else
            v44 = 16;
          *(_BYTE *)(v22 + v30++) = v44;
          v29 += 4;
        }
        while (v20 != v30);
      }
      v23 += v17;
      v22 += v18;
      v24 += v26;
      ++v15;
      v27 += v25;
      v28 += v26;
    }
    while (v15 != v19);
  }
  return 0;
}

uint64_t vt_Copy_2vuy_y420(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  unsigned __int8 *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  char v40;
  __int128 v42;
  __int128 v43;
  _OWORD v44[2];
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _BYTE v50[48];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _BYTE v55[48];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  if (a1 && *(_BYTE *)(a1 + 2))
  {
    vt_CopyAvg_2vuy_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v56 = 0u;
    *(_OWORD *)&v55[32] = 0u;
    *(_OWORD *)&v55[16] = 0u;
    *(_OWORD *)v55 = 0u;
    v54 = 0u;
    v53 = 0u;
    v52 = 0u;
    v51 = 0u;
    *(_OWORD *)&v50[32] = 0u;
    *(_OWORD *)&v50[16] = 0u;
    *(_OWORD *)v50 = 0u;
    v49 = 0u;
    v48 = 0u;
    v47 = 0u;
    v46 = 0u;
    v42 = 0u;
    v43 = 0u;
    v9 = a2[2];
    v10 = a2[3];
    v44[0] = vdupq_n_s64(1uLL);
    v44[1] = xmmword_1928DFC30;
    v45 = 1;
    *(_OWORD *)&v50[8] = v44[0];
    *(_OWORD *)&v50[24] = xmmword_1928DFC40;
    *(_QWORD *)&v50[40] = 2;
    *(_OWORD *)&v55[8] = v44[0];
    *(_OWORD *)&v55[24] = xmmword_1928DFC40;
    v67 = 0;
    *(_QWORD *)&v55[40] = 2;
    v12 = a2[4];
    v11 = a2[5];
    v13 = *a3;
    v14 = *a4;
    vtPixelTransferSession_PrepareOffsets(3uLL, a6, v44, a8, a7, &v42);
    if (v10 >= 2)
    {
      v15 = 0;
      v16 = *a8;
      v17 = a8[1];
      v18 = a8[2];
      v19 = v10 >> 1;
      v20 = v9 >> 1;
      v22 = *((_QWORD *)&v42 + 1);
      v21 = v43;
      v23 = (2 * v12) & 0xFFFFFFFFFFFFFFCLL;
      v24 = v13 + v23 + v14 * v11;
      v25 = 2 * *a8;
      v26 = 2 * v14;
      if (v9 >> 1 <= 1)
        v20 = 1;
      v27 = v14 + v23 + v13 + v14 * v11 + 1;
      v28 = (_BYTE *)(v42 + 1);
      do
      {
        if (v9 >= 2)
        {
          v29 = 0;
          v30 = 0;
          v31 = v28;
          do
          {
            v32 = &v31[v16];
            v33 = (unsigned __int8 *)(v24 + v29);
            v34 = *(unsigned __int8 *)(v24 + v29);
            if (v34 >= 0xF0)
              v34 = 240;
            if (v34 <= 0x10)
              LOBYTE(v34) = 16;
            v35 = v33[1];
            if (v35 >= 0xEB)
              v35 = 235;
            if (v35 <= 0x10)
              LOBYTE(v35) = 16;
            v36 = v33[2];
            if (v36 >= 0xF0)
              v36 = 240;
            if (v36 <= 0x10)
              LOBYTE(v36) = 16;
            v37 = v33[3];
            if (v37 >= 0xEB)
              v37 = 235;
            if (v37 <= 0x10)
              LOBYTE(v37) = 16;
            v38 = *(unsigned __int8 *)(v27 + v29);
            if (v38 >= 0xEB)
              v38 = 235;
            if (v38 <= 0x10)
              LOBYTE(v38) = 16;
            v39 = *(unsigned __int8 *)(v27 + v29 + 2);
            if (v39 >= 0xEB)
              v39 = 235;
            *(v31 - 1) = v35;
            *v31 = v37;
            v31 += 2;
            if (v39 <= 0x10)
              v40 = 16;
            else
              v40 = v39;
            *(v32 - 1) = v38;
            *v32 = v40;
            *(_BYTE *)(v22 + v30) = v34;
            *(_BYTE *)(v21 + v30++) = v36;
            v29 += 4;
          }
          while (v20 != v30);
        }
        v22 += v17;
        v21 += v18;
        v24 += v26;
        ++v15;
        v27 += v26;
        v28 += v25;
      }
      while (v15 != v19);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_2vuy_420v(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  char *v33;
  unsigned __int8 *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned __int8 v42;
  char v43;
  char v44;
  _OWORD v46[2];
  _OWORD v47[2];
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _BYTE v53[48];
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v70 = 0u;
  v71 = 0u;
  v68 = 0u;
  v69 = 0u;
  v66 = 0u;
  v67 = 0u;
  v64 = 0u;
  v65 = 0u;
  v62 = 0u;
  v63 = 0u;
  v61 = 0u;
  v60 = 0u;
  v59 = 0u;
  v58 = 0u;
  v57 = 0u;
  v56 = 0u;
  v55 = 0u;
  v54 = 0u;
  *(_OWORD *)&v53[32] = 0u;
  *(_OWORD *)&v53[16] = 0u;
  *(_OWORD *)v53 = 0u;
  v52 = 0u;
  v51 = 0u;
  v50 = 0u;
  v49 = 0u;
  memset(v46, 0, sizeof(v46));
  v9 = a2[2];
  v10 = a2[3];
  v47[0] = vdupq_n_s64(1uLL);
  v47[1] = xmmword_1928DFC30;
  v48 = 1;
  *(_OWORD *)&v53[8] = v47[0];
  *(_OWORD *)&v53[24] = xmmword_1928DFC50;
  v72 = 0;
  *(_QWORD *)&v53[40] = 2;
  v12 = a2[4];
  v11 = a2[5];
  v13 = *a3;
  v14 = *a4;
  vtPixelTransferSession_PrepareOffsets(2uLL, a6, v47, a8, a7, v46);
  if (v10 >= 2)
  {
    v15 = 0;
    v16 = a8[1];
    v17 = v10 >> 1;
    v18 = v9 >> 1;
    v19 = (2 * v12) & 0xFFFFFFFFFFFFFFCLL;
    v20 = v13 + v19 + v14 * v11;
    v21 = *((_QWORD *)&v46[0] + 1);
    v22 = *(_QWORD *)&v46[0];
    v23 = 2 * *a8;
    v24 = 2 * v14;
    if (v9 >> 1 <= 1)
      v18 = 1;
    v25 = *a8 + *(_QWORD *)&v46[0] + 1;
    v26 = v13 + v14 + v19 + v14 * v11;
    do
    {
      if (v9 >= 2)
      {
        v27 = 0;
        v28 = 0;
        v29 = v18;
        do
        {
          v30 = (_BYTE *)(v22 + v28);
          v31 = (unsigned __int8 *)(v25 + v28);
          v32 = (unsigned __int8 *)(v26 + v27);
          v33 = (char *)(v21 + v28);
          v34 = (unsigned __int8 *)(v20 + v27);
          v35 = *(unsigned __int8 *)(v26 + v27) + *(unsigned __int8 *)(v20 + v27);
          v36 = v35 >> 1;
          if (v35 >> 1 >= 0xF0)
            LOBYTE(v36) = -16;
          v37 = v34[1];
          if (v37 >= 0xEB)
            v37 = 235;
          if (v37 <= 0x10)
            LOBYTE(v37) = 16;
          v38 = v32[2] + v34[2];
          v39 = v38 >> 1;
          if (v38 >> 1 >= 0xF0)
            LOBYTE(v39) = -16;
          v40 = v34[3];
          if (v40 >= 0xEB)
            v40 = 235;
          if (v40 <= 0x10)
            LOBYTE(v40) = 16;
          v41 = v32[1];
          if (v41 >= 0xEB)
            v41 = 235;
          if (v41 <= 0x10)
            LOBYTE(v41) = 16;
          v42 = v32[3];
          *v30 = v37;
          v30[1] = v40;
          *(v31 - 1) = v41;
          *v31 = v42;
          if (v35 >= 0x20)
            v43 = v36;
          else
            v43 = 16;
          *v33 = v43;
          if (v38 >= 0x20)
            v44 = v39;
          else
            v44 = 16;
          v33[1] = v44;
          v28 += 2;
          v27 += 4;
          --v29;
        }
        while (v29);
      }
      v22 += v23;
      v21 += v16;
      v20 += v24;
      ++v15;
      v25 += v23;
      v26 += v24;
    }
    while (v15 != v17);
  }
  return 0;
}

uint64_t vt_CopyDec_2vuy_420v(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  char *v31;
  unsigned __int8 *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  char v39;
  _BYTE *v40;
  _OWORD v42[2];
  _OWORD v43[2];
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _BYTE v49[48];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v66 = 0u;
  v67 = 0u;
  v64 = 0u;
  v65 = 0u;
  v62 = 0u;
  v63 = 0u;
  v60 = 0u;
  v61 = 0u;
  v58 = 0u;
  v59 = 0u;
  v57 = 0u;
  v56 = 0u;
  v55 = 0u;
  v54 = 0u;
  v53 = 0u;
  v52 = 0u;
  v51 = 0u;
  v50 = 0u;
  *(_OWORD *)&v49[32] = 0u;
  *(_OWORD *)&v49[16] = 0u;
  *(_OWORD *)v49 = 0u;
  v48 = 0u;
  v47 = 0u;
  v46 = 0u;
  v45 = 0u;
  memset(v42, 0, sizeof(v42));
  v9 = a2[2];
  v10 = a2[3];
  v43[0] = vdupq_n_s64(1uLL);
  v43[1] = xmmword_1928DFC30;
  v44 = 1;
  *(_OWORD *)&v49[8] = v43[0];
  *(_OWORD *)&v49[24] = xmmword_1928DFC50;
  v68 = 0;
  *(_QWORD *)&v49[40] = 2;
  v12 = a2[4];
  v11 = a2[5];
  v13 = *a3;
  v14 = *a4;
  vtPixelTransferSession_PrepareOffsets(2uLL, a6, v43, a8, a7, v42);
  if (v10 >= 2)
  {
    v15 = 0;
    v16 = a8[1];
    v17 = v10 >> 1;
    v18 = v9 >> 1;
    v19 = *((_QWORD *)&v42[0] + 1);
    v20 = *(_QWORD *)&v42[0];
    v21 = (2 * v12) & 0xFFFFFFFFFFFFFFCLL;
    v22 = v13 + v21 + v14 * v11;
    v23 = 2 * *a8;
    v24 = 2 * v14;
    if (v9 >> 1 <= 1)
      v18 = 1;
    v25 = v14 + v21 + v13 + v14 * v11 + 3;
    v26 = *a8 + *(_QWORD *)&v42[0] + 1;
    do
    {
      if (v9 >= 2)
      {
        v27 = 0;
        v28 = 0;
        v29 = v18;
        do
        {
          v30 = (_BYTE *)(v20 + v27);
          v31 = (char *)(v26 + v27);
          v32 = (unsigned __int8 *)(v22 + v28);
          v33 = *(unsigned __int8 *)(v22 + v28);
          if (v33 >= 0xF0)
            v33 = 240;
          if (v33 <= 0x10)
            LOBYTE(v33) = 16;
          v34 = v32[1];
          if (v34 >= 0xEB)
            v34 = 235;
          if (v34 <= 0x10)
            LOBYTE(v34) = 16;
          v35 = v32[2];
          if (v35 >= 0xF0)
            v35 = 240;
          if (v35 <= 0x10)
            LOBYTE(v35) = 16;
          v36 = v32[3];
          if (v36 >= 0xEB)
            v36 = 235;
          if (v36 <= 0x10)
            LOBYTE(v36) = 16;
          v37 = *(unsigned __int8 *)(v25 + v28 - 2);
          if (v37 >= 0xEB)
            v37 = 235;
          if (v37 <= 0x10)
            LOBYTE(v37) = 16;
          v38 = *(unsigned __int8 *)(v25 + v28);
          if (v38 >= 0xEB)
            v38 = 235;
          *v30 = v34;
          v30[1] = v36;
          if (v38 <= 0x10)
            v39 = 16;
          else
            v39 = v38;
          *(v31 - 1) = v37;
          *v31 = v39;
          v40 = (_BYTE *)(v19 + v27);
          *v40 = v33;
          v40[1] = v35;
          v28 += 4;
          v27 += 2;
          --v29;
        }
        while (v29);
      }
      v20 += v23;
      v19 += v16;
      v22 += v24;
      ++v15;
      v25 += v24;
      v26 += v23;
    }
    while (v15 != v17);
  }
  return 0;
}

uint64_t vt_Copy_2vuy_yuvs_vec(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t **a4, uint64_t a5, _QWORD **a6)
{
  vt_Copy_yuvs_2vuy_arm(*a4, *a6, a1, a2);
  return 0;
}

uint64_t vt_CopyAvg_2vuy_420f(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  unsigned int v33;
  int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  char v43;
  _BYTE *v44;
  _BYTE *v45;
  _OWORD v47[2];
  _OWORD v48[2];
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _BYTE v54[48];
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v67 = 0u;
  v68 = 0u;
  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  v62 = 0u;
  v61 = 0u;
  v60 = 0u;
  v59 = 0u;
  v58 = 0u;
  v57 = 0u;
  v56 = 0u;
  v55 = 0u;
  *(_OWORD *)&v54[32] = 0u;
  *(_OWORD *)&v54[16] = 0u;
  *(_OWORD *)v54 = 0u;
  v53 = 0u;
  v52 = 0u;
  v51 = 0u;
  v50 = 0u;
  memset(v47, 0, sizeof(v47));
  v9 = a2[2];
  v10 = a2[3];
  v48[0] = vdupq_n_s64(1uLL);
  v48[1] = xmmword_1928DFC30;
  v49 = 1;
  *(_OWORD *)&v54[8] = v48[0];
  *(_OWORD *)&v54[24] = xmmword_1928DFC50;
  v73 = 0;
  *(_QWORD *)&v54[40] = 2;
  v12 = a2[4];
  v11 = a2[5];
  v13 = *a3;
  v14 = *a4;
  vtPixelTransferSession_PrepareOffsets(2uLL, a6, v48, a8, a7, v47);
  if (v10 >= 2)
  {
    v15 = 0;
    v16 = a8[1];
    v17 = v10 >> 1;
    v18 = v9 >> 1;
    v19 = (2 * v12) & 0xFFFFFFFFFFFFFFCLL;
    v20 = v13 + v19 + v14 * v11;
    v21 = *((_QWORD *)&v47[0] + 1);
    v22 = *(_QWORD *)&v47[0];
    v23 = 2 * *a8;
    v24 = 2 * v14;
    if (v9 >> 1 <= 1)
      v18 = 1;
    v25 = *a8 + *(_QWORD *)&v47[0] + 1;
    v26 = v13 + v14 + v19 + v14 * v11;
    do
    {
      if (v9 >= 2)
      {
        v27 = 0;
        v28 = 0;
        v29 = v18;
        do
        {
          v30 = (_BYTE *)(v22 + v28);
          v31 = (unsigned __int8 *)(v26 + v27);
          v32 = (unsigned __int8 *)(v20 + v27);
          v33 = *(unsigned __int8 *)(v26 + v27) + *(unsigned __int8 *)(v20 + v27);
          v34 = v33 >> 1;
          if (v33 >> 1 >= 0xF0)
            v34 = 240;
          if (v33 >= 0x20)
            v35 = v34;
          else
            v35 = 16;
          v36 = v32[1];
          if (v36 >= 0xEB)
            v36 = 235;
          if (v36 <= 0x10)
            v36 = 16;
          v37 = v31[2] + v32[2];
          v38 = v37 >> 1;
          if (v37 >> 1 >= 0xF0)
            v38 = 240;
          if (v37 >= 0x20)
            v39 = v38;
          else
            v39 = 16;
          v40 = v32[3];
          if (v40 >= 0xEB)
            v40 = 235;
          if (v40 <= 0x10)
            v40 = 16;
          v41 = v31[1];
          if (v41 >= 0xEB)
            v41 = 235;
          v42 = v31[3];
          *v30 = sLumaTableVtoF[v36];
          v43 = sLumaTableVtoF[v40];
          v44 = (_BYTE *)(v25 + v28);
          if (v41 <= 0x10)
            v41 = 16;
          v30[1] = v43;
          *(v44 - 1) = sLumaTableVtoF[v41];
          v45 = (_BYTE *)(v21 + v28);
          *v44 = sLumaTableVtoF[v42];
          *v45 = sChromaTableVtoF[v35];
          v45[1] = sChromaTableVtoF[v39];
          v28 += 2;
          v27 += 4;
          --v29;
        }
        while (v29);
      }
      v22 += v23;
      v21 += v16;
      v20 += v24;
      ++v15;
      v25 += v23;
      v26 += v24;
    }
    while (v15 != v17);
  }
  return 0;
}

uint64_t vt_CopyDec_2vuy_420f(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  _BYTE *v31;
  unsigned __int8 *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  char v39;
  int v40;
  _BYTE *v41;
  _OWORD v43[2];
  _OWORD v44[2];
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _BYTE v50[48];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v67 = 0u;
  v68 = 0u;
  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  v61 = 0u;
  v62 = 0u;
  v59 = 0u;
  v60 = 0u;
  v58 = 0u;
  v57 = 0u;
  v56 = 0u;
  v55 = 0u;
  v54 = 0u;
  v53 = 0u;
  v52 = 0u;
  v51 = 0u;
  *(_OWORD *)&v50[32] = 0u;
  *(_OWORD *)&v50[16] = 0u;
  *(_OWORD *)v50 = 0u;
  v49 = 0u;
  v48 = 0u;
  v47 = 0u;
  v46 = 0u;
  memset(v43, 0, sizeof(v43));
  v9 = a2[2];
  v10 = a2[3];
  v44[0] = vdupq_n_s64(1uLL);
  v44[1] = xmmword_1928DFC30;
  v45 = 1;
  *(_OWORD *)&v50[8] = v44[0];
  *(_OWORD *)&v50[24] = xmmword_1928DFC50;
  v69 = 0;
  *(_QWORD *)&v50[40] = 2;
  v12 = a2[4];
  v11 = a2[5];
  v13 = *a3;
  v14 = *a4;
  vtPixelTransferSession_PrepareOffsets(2uLL, a6, v44, a8, a7, v43);
  if (v10 >= 2)
  {
    v15 = 0;
    v16 = a8[1];
    v17 = v10 >> 1;
    v18 = v9 >> 1;
    v19 = (2 * v12) & 0xFFFFFFFFFFFFFFCLL;
    v20 = v13 + v19 + v14 * v11;
    v21 = *((_QWORD *)&v43[0] + 1);
    v22 = *(_QWORD *)&v43[0];
    v23 = 2 * *a8;
    v24 = 2 * v14;
    if (v9 >> 1 <= 1)
      v18 = 1;
    v25 = v14 + v19 + v13 + v14 * v11 + 3;
    v26 = *a8 + *(_QWORD *)&v43[0] + 1;
    do
    {
      if (v9 >= 2)
      {
        v27 = 0;
        v28 = 0;
        v29 = v18;
        do
        {
          v30 = (_BYTE *)(v22 + v27);
          v31 = (_BYTE *)(v26 + v27);
          v32 = (unsigned __int8 *)(v20 + v28);
          v33 = *(unsigned __int8 *)(v20 + v28);
          if (v33 >= 0xF0)
            v33 = 240;
          if (v33 <= 0x10)
            v33 = 16;
          v34 = v32[1];
          if (v34 >= 0xEB)
            v34 = 235;
          v35 = v32[2];
          if (v34 <= 0x10)
            v34 = 16;
          if (v35 >= 0xF0)
            v35 = 240;
          if (v35 <= 0x10)
            v35 = 16;
          v36 = v32[3];
          if (v36 >= 0xEB)
            v36 = 235;
          if (v36 <= 0x10)
            v36 = 16;
          v37 = *(unsigned __int8 *)(v25 + v28 - 2);
          if (v37 >= 0xEB)
            v37 = 235;
          if (v37 <= 0x10)
            v37 = 16;
          v38 = *(unsigned __int8 *)(v25 + v28);
          if (v38 >= 0xEB)
            v38 = 235;
          *v30 = sLumaTableVtoF[v34];
          v39 = sLumaTableVtoF[v36];
          if (v38 <= 0x10)
            v40 = 16;
          else
            v40 = v38;
          v30[1] = v39;
          *(v31 - 1) = sLumaTableVtoF[v37];
          v41 = (_BYTE *)(v21 + v27);
          *v31 = sLumaTableVtoF[v40];
          *v41 = sChromaTableVtoF[v33];
          v41[1] = sChromaTableVtoF[v35];
          v28 += 4;
          v27 += 2;
          --v29;
        }
        while (v29);
      }
      v22 += v23;
      v21 += v16;
      v20 += v24;
      ++v15;
      v25 += v24;
      v26 += v23;
    }
    while (v15 != v17);
  }
  return 0;
}

uint64_t vt_Copy_2vuy_s4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t i;
  _WORD *v27;
  _WORD *v28;
  __int16 v29;
  __int16 v30;
  __int16 v31;

  v8 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  if (v8 >= a6[2])
    v8 = a6[2];
  if (a2[3] >= a6[3])
    v9 = a6[3];
  else
    v9 = a2[3];
  if (v9)
  {
    v10 = 0;
    v12 = a8[1];
    v11 = a8[2];
    v13 = *a8;
    v15 = a6[4];
    v14 = a6[5];
    v16 = a7[1] + v12 * v14;
    v17 = a7[2] + v11 * v14;
    v18 = *a7 + *a8 * v14;
    v19 = *a4;
    v20 = v16 + 4 * v15;
    v21 = v17 + 2 * v15;
    v22 = v18 + 2 * v15;
    v23 = *a3 + *a4 * a2[5] + (a2[4] & 0xFFFFFFFELL);
    do
    {
      if (v8)
      {
        v24 = 0;
        v25 = 0;
        for (i = 0; i < v8; i += 2)
        {
          v27 = (_WORD *)(v20 + v25);
          v28 = (_WORD *)(v22 + 2 * i);
          *(_DWORD *)(v21 + 2 * i) = -1;
          v29 = *(unsigned __int8 *)(v23 + v24) << 8;
          v30 = *(unsigned __int8 *)(v23 + v24 + 2) << 8;
          *v27 = v29;
          v27[1] = v30;
          v27[2] = v29;
          v27[3] = v30;
          v31 = *(unsigned __int8 *)(v23 + v24 + 3) << 8;
          *v28 = *(unsigned __int8 *)(v23 + v24 + 1) << 8;
          v28[1] = v31;
          v25 += 8;
          v24 += 4;
        }
      }
      v23 += v19;
      v22 += v13;
      v20 += v12;
      v21 += v11;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_2vuy_sv44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t i;
  _WORD *v24;
  _WORD *v25;
  __int16 v26;
  __int16 v27;
  __int16 v28;

  v8 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  if (v8 >= a6[2])
    v8 = a6[2];
  if (a2[3] >= a6[3])
    v9 = a6[3];
  else
    v9 = a2[3];
  if (v9)
  {
    v10 = 0;
    v11 = *a8;
    v12 = a8[1];
    v14 = a6[4];
    v13 = a6[5];
    v15 = a7[1] + v12 * v13;
    v16 = *a7 + *a8 * v13;
    v17 = *a4;
    v18 = v15 + 4 * v14;
    v19 = v16 + 2 * v14;
    v20 = *a3 + *a4 * a2[5] + (a2[4] & 0xFFFFFFFELL);
    do
    {
      if (v8)
      {
        v21 = 0;
        v22 = 0;
        for (i = 0; i < v8; i += 2)
        {
          v24 = (_WORD *)(v18 + v22);
          v25 = (_WORD *)(v19 + 2 * i);
          v26 = *(unsigned __int8 *)(v20 + v21) << 8;
          v27 = *(unsigned __int8 *)(v20 + v21 + 2) << 8;
          *v24 = v26;
          v24[1] = v27;
          v24[2] = v26;
          v24[3] = v27;
          v28 = *(unsigned __int8 *)(v20 + v21 + 3) << 8;
          *v25 = *(unsigned __int8 *)(v20 + v21 + 1) << 8;
          v25[1] = v28;
          v22 += 8;
          v21 += 4;
        }
      }
      v20 += v17;
      v19 += v11;
      v18 += v12;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_2vuy_sf44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t i;
  unsigned __int8 *v22;
  unsigned int v23;
  unsigned int v24;
  _WORD *v25;
  unint64_t v26;
  unint64_t v27;
  _WORD *v28;
  unsigned int v29;
  unsigned int v30;

  v8 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  if (v8 >= a6[2])
    v8 = a6[2];
  if (a2[3] >= a6[3])
    v9 = a6[3];
  else
    v9 = a2[3];
  if (v9)
  {
    v10 = 0;
    v11 = *a4;
    v12 = *a8;
    v13 = a8[1];
    v14 = a6[4];
    v15 = a6[5];
    v16 = a7[1] + v13 * v15 + 4 * v14;
    v17 = *a7 + *a8 * v15 + 2 * v14;
    v18 = *a3 + *a4 * a2[5] + (a2[4] & 0xFFFFFFFELL);
    do
    {
      if (v8)
      {
        v19 = 0;
        v20 = 0;
        for (i = 0; i < v8; i += 2)
        {
          v22 = (unsigned __int8 *)(v18 + v19);
          v23 = *(unsigned __int8 *)(v18 + v19);
          if (v23 >= 0xF0)
            v23 = 240;
          if (v23 <= 0x10)
            v23 = 16;
          v24 = v22[2];
          v25 = (_WORD *)(v16 + v20);
          if (v24 >= 0xF0)
            v24 = 240;
          if (v24 <= 0x10)
            v24 = 16;
          v26 = (613566757 * (unint64_t)((-1048560 - v23 + (v23 << 16)) >> 5)) >> 32;
          v27 = (613566757 * (unint64_t)((-1048560 - v24 + (v24 << 16)) >> 5)) >> 32;
          *v25 = v26;
          v25[1] = v27;
          v25[2] = v26;
          v25[3] = v27;
          v28 = (_WORD *)(v17 + 2 * i);
          v29 = v22[1];
          if (v29 >= 0xEB)
            v29 = 235;
          v30 = v22[3];
          if (v29 <= 0x10)
            v29 = 16;
          if (v30 >= 0xEB)
            v30 = 235;
          if (v30 <= 0x10)
            v30 = 16;
          *v28 = (-1048560 - v29 + (v29 << 16)) / 0xDB;
          v28[1] = (-1048560 - v30 + (v30 << 16)) / 0xDB;
          v20 += 8;
          v19 += 4;
        }
      }
      v18 += v11;
      v17 += v12;
      v16 += v13;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_2vuy_s2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t i;
  _WORD *v26;
  _WORD *v27;
  __int16 v28;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a8;
    v14 = a8[1];
    v15 = *(_QWORD *)(a6 + 40);
    v16 = a7[1] + v14 * v15 + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    v17 = a8[2];
    v18 = a7[2] + v17 * v15;
    v19 = *a7 + *a8 * v15;
    v20 = *a4;
    v21 = v18 + 2 * v10;
    v22 = v19 + 2 * v10;
    v23 = *a3 + *a4 * *(_QWORD *)(a2 + 40) + v9;
    do
    {
      if (v11)
      {
        v24 = 0;
        for (i = 0; i < v11; i += 2)
        {
          v26 = (_WORD *)(v16 + 2 * i);
          v27 = (_WORD *)(v22 + 2 * i);
          *(_DWORD *)(v21 + 2 * i) = -1;
          v28 = *(unsigned __int8 *)(v23 + v24 + 2) << 8;
          *v26 = *(unsigned __int8 *)(v23 + v24) << 8;
          v26[1] = v28;
          LOWORD(v26) = *(unsigned __int8 *)(v23 + v24 + 3) << 8;
          *v27 = *(unsigned __int8 *)(v23 + v24 + 1) << 8;
          v27[1] = (_WORD)v26;
          v24 += 4;
        }
      }
      v23 += v20;
      v22 += v13;
      v16 += v14;
      v21 += v17;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_Copy_2vuy_sv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t i;
  _WORD *v22;
  _WORD *v23;
  __int16 v24;
  __int16 v25;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a8;
    v14 = a8[1];
    v15 = *(_QWORD *)(a6 + 40);
    v16 = a7[1] + v14 * v15 + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    v17 = *a4;
    v18 = *a7 + *a8 * v15 + 2 * v10;
    v19 = *a3 + *a4 * *(_QWORD *)(a2 + 40) + v9;
    do
    {
      if (v11)
      {
        v20 = 0;
        for (i = 0; i < v11; i += 2)
        {
          v22 = (_WORD *)(v16 + 2 * i);
          v23 = (_WORD *)(v18 + 2 * i);
          v24 = *(unsigned __int8 *)(v19 + v20 + 2) << 8;
          *v22 = *(unsigned __int8 *)(v19 + v20) << 8;
          v22[1] = v24;
          v25 = *(unsigned __int8 *)(v19 + v20 + 3) << 8;
          *v23 = *(unsigned __int8 *)(v19 + v20 + 1) << 8;
          v23[1] = v25;
          v20 += 4;
        }
      }
      v19 += v17;
      v18 += v13;
      v16 += v14;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_Copy_2vuy_sf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t i;
  _WORD *v22;
  unsigned __int8 *v23;
  unsigned int v24;
  unsigned int v25;
  _WORD *v26;
  unsigned int v27;
  unsigned int v28;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a4;
    v14 = *a8;
    v15 = a8[1];
    v16 = *(_QWORD *)(a6 + 40);
    v17 = a7[1] + v15 * v16 + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    v18 = *a7 + *a8 * v16 + 2 * v10;
    v19 = *a3 + *a4 * *(_QWORD *)(a2 + 40) + v9;
    do
    {
      if (v11)
      {
        v20 = 0;
        for (i = 0; i < v11; i += 2)
        {
          v22 = (_WORD *)(v17 + 2 * i);
          v23 = (unsigned __int8 *)(v19 + v20);
          v24 = *(unsigned __int8 *)(v19 + v20);
          if (v24 >= 0xF0)
            v24 = 240;
          if (v24 <= 0x10)
            v24 = 16;
          v25 = v23[2];
          if (v25 >= 0xF0)
            v25 = 240;
          v26 = (_WORD *)(v18 + 2 * i);
          if (v25 <= 0x10)
            v25 = 16;
          *v22 = (613566757 * (unint64_t)((-1048560 - v24 + (v24 << 16)) >> 5)) >> 32;
          v22[1] = (613566757 * (unint64_t)((-1048560 - v25 + (v25 << 16)) >> 5)) >> 32;
          v27 = v23[1];
          if (v27 >= 0xEB)
            v27 = 235;
          if (v27 <= 0x10)
            v27 = 16;
          v28 = v23[3];
          if (v28 >= 0xEB)
            v28 = 235;
          if (v28 <= 0x10)
            v28 = 16;
          *v26 = (-1048560 - v27 + (v27 << 16)) / 0xDB;
          v26[1] = (-1048560 - v28 + (v28 << 16)) / 0xDB;
          v20 += 4;
        }
      }
      v19 += v13;
      v18 += v14;
      v17 += v15;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_2vuy_sv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _WORD *v29;
  __int16 v30;
  _WORD *v31;
  __int16 v32;
  uint64_t v33;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = (v8 & 1) + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v15 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v16 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v17 = v11 - v10;
  if (v17 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v14)
    v17 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v14;
  v18 = v13 - v12;
  if (v18 >= v16 - v15)
    v18 = v16 - v15;
  if (v18)
  {
    v19 = 0;
    v20 = *a8;
    v21 = a8[1];
    v22 = a7[1] + ((unint64_t)(v21 * v15) >> 1) + 2 * (v14 & 0x3FFFFFFFFFFFFFFFLL);
    v23 = *a4;
    v24 = *a7 + *a8 * v15 + 2 * v14;
    v25 = *a3 + *a4 * v12 + v10;
    v26 = *a3 + v9 + (v9 & 1) + v23 + v23 * (v8 + (v8 & 1));
    do
    {
      if (v17)
      {
        v27 = 0;
        v28 = 0;
        v29 = (_WORD *)v22;
        do
        {
          if ((v19 & 1) == 0)
          {
            v30 = (*(unsigned __int8 *)(v26 + v27 + 2) + (unsigned __int16)*(unsigned __int8 *)(v25 + v27 + 2)) << 7;
            *v29 = (*(unsigned __int8 *)(v26 + v27) + (unsigned __int16)*(unsigned __int8 *)(v25 + v27)) << 7;
            v29[1] = v30;
            v29 += 2;
          }
          v31 = (_WORD *)(v24 + 2 * v28);
          v32 = *(unsigned __int8 *)(v25 + v27 + 3) << 8;
          *v31 = *(unsigned __int8 *)(v25 + v27 + 1) << 8;
          v31[1] = v32;
          v28 += 2;
          v27 += 4;
        }
        while (v28 < v17);
      }
      v25 += v23;
      v24 += v20;
      if ((v19 & 1) != 0)
        v33 = 0;
      else
        v33 = v21;
      v22 += v33;
      ++v19;
      v26 += v23;
    }
    while (v19 != v18);
  }
  return 0;
}

uint64_t vt_CopyDec_2vuy_sv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned __int8 *v25;
  _WORD *v26;
  __int16 v27;
  _WORD *v28;
  __int16 v29;
  uint64_t v30;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v10 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v11 = (*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE;
  v12 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v13 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v14 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v15 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v12;
  if (v9 - ((unint64_t)(v8 & 1) + v8) < v15)
    v15 = v9 - ((v8 & 1) + v8);
  v16 = v11 - v10;
  if (v11 - v10 >= (unint64_t)(v14 - v13))
    v16 = v14 - v13;
  if (v16)
  {
    v17 = 0;
    v18 = *a8;
    v19 = a8[1];
    v20 = a7[1] + ((unint64_t)(v19 * v13) >> 1) + 2 * (v12 & 0x3FFFFFFFFFFFFFFFLL);
    v21 = *a4;
    v22 = *a7 + *a8 * v13 + 2 * v12;
    v23 = v8 + *a4 * v10 + (v8 & 1) + *a3 + 1;
    do
    {
      if (v15)
      {
        v24 = 0;
        v25 = (unsigned __int8 *)v23;
        v26 = (_WORD *)v20;
        do
        {
          if ((v17 & 1) == 0)
          {
            v27 = v25[1] << 8;
            *v26 = *(v25 - 1) << 8;
            v26[1] = v27;
            v26 += 2;
          }
          v28 = (_WORD *)(v22 + 2 * v24);
          v29 = v25[2] << 8;
          *v28 = *v25 << 8;
          v28[1] = v29;
          v24 += 2;
          v25 += 4;
        }
        while (v24 < v15);
      }
      v22 += v18;
      if ((v17 & 1) != 0)
        v30 = 0;
      else
        v30 = v19;
      v20 += v30;
      ++v17;
      v23 += v21;
    }
    while (v17 != v16);
  }
  return 0;
}

uint64_t vt_CopyAvg_2vuy_sf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _WORD *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  _WORD *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = (v8 & 1) + v8;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = (v9 & 1) + v9;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v14 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v15 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v16 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v17 = v11 - v10;
  if (v17 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v14)
    v17 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v14;
  v18 = v13 - v12;
  if (v18 >= v16 - v15)
    v18 = v16 - v15;
  if (v18)
  {
    v19 = 0;
    v20 = *a4;
    v21 = *a8;
    v22 = a8[1];
    v23 = a7[1] + ((unint64_t)(v22 * v15) >> 1) + 2 * (v14 & 0x3FFFFFFFFFFFFFFFLL);
    v24 = *a7 + *a8 * v15 + 2 * v14;
    v25 = *a3 + *a4 * v12 + v10;
    v26 = *a3 + v8 + (v8 & 1) + v20 + v20 * (v9 + (v9 & 1));
    do
    {
      if (v17)
      {
        v27 = 0;
        v28 = 0;
        v29 = (_WORD *)v23;
        do
        {
          if ((v19 & 1) == 0)
          {
            v30 = *(unsigned __int8 *)(v25 + v27);
            v31 = *(unsigned __int8 *)(v26 + v27);
            if (v30 >= 0xF0)
              v30 = 240;
            if (v30 <= 0x10)
              v30 = 16;
            if (v31 >= 0xF0)
              v31 = 240;
            if (v31 <= 0x10)
              v31 = 16;
            v32 = *(unsigned __int8 *)(v25 + v27 + 2);
            v33 = *(unsigned __int8 *)(v26 + v27 + 2);
            if (v32 >= 0xF0)
              v32 = 240;
            if (v32 <= 0x10)
              v32 = 16;
            if (v33 >= 0xF0)
              v33 = 240;
            if (v33 <= 0x10)
              v33 = 16;
            *v29 = (((613566757 * (unint64_t)((-1048560 - v30 + (v30 << 16)) >> 5)) >> 32)
                                + ((613566757 * (unint64_t)((-1048560 - v31 + (v31 << 16)) >> 5)) >> 32)
                                + 1) >> 1;
            v29[1] = (((613566757 * (unint64_t)((-1048560 - v32 + (v32 << 16)) >> 5)) >> 32)
                                  + ((613566757 * (unint64_t)((-1048560 - v33 + (v33 << 16)) >> 5)) >> 32)
                                  + 1) >> 1;
            v29 += 2;
          }
          v34 = (_WORD *)(v24 + 2 * v28);
          v35 = *(unsigned __int8 *)(v25 + v27 + 1);
          if (v35 >= 0xEB)
            v35 = 235;
          if (v35 <= 0x10)
            v35 = 16;
          v36 = *(unsigned __int8 *)(v25 + v27 + 3);
          if (v36 >= 0xEB)
            v36 = 235;
          if (v36 <= 0x10)
            v36 = 16;
          *v34 = (-1048560 - v35 + (v35 << 16)) / 0xDB;
          v34[1] = (-1048560 - v36 + (v36 << 16)) / 0xDB;
          v28 += 2;
          v27 += 4;
        }
        while (v28 < v17);
      }
      v25 += v20;
      v24 += v21;
      if ((v19 & 1) != 0)
        v37 = 0;
      else
        v37 = v22;
      v23 += v37;
      ++v19;
      v26 += v20;
    }
    while (v19 != v18);
  }
  return 0;
}

uint64_t vt_CopyDec_2vuy_sf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned __int8 *v25;
  _WORD *v26;
  unsigned int v27;
  unsigned int v28;
  _WORD *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v10 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v11 = (*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE;
  v12 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v13 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v14 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v15 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v12;
  if (v9 - ((unint64_t)(v8 & 1) + v8) < v15)
    v15 = v9 - ((v8 & 1) + v8);
  v16 = v11 - v10;
  if (v11 - v10 >= (unint64_t)(v14 - v13))
    v16 = v14 - v13;
  if (v16)
  {
    v17 = 0;
    v18 = *a4;
    v19 = *a8;
    v20 = a8[1];
    v21 = a7[1] + ((unint64_t)(v20 * v13) >> 1) + 2 * (v12 & 0x3FFFFFFFFFFFFFFFLL);
    v22 = *a7 + *a8 * v13 + 2 * v12;
    v23 = v8 + *a4 * v10 + (v8 & 1) + *a3 + 1;
    do
    {
      if (v15)
      {
        v24 = 0;
        v25 = (unsigned __int8 *)v23;
        v26 = (_WORD *)v21;
        do
        {
          if ((v17 & 1) == 0)
          {
            v27 = *(v25 - 1);
            if (v27 >= 0xF0)
              v27 = 240;
            if (v27 <= 0x10)
              v27 = 16;
            v28 = v25[1];
            if (v28 >= 0xF0)
              v28 = 240;
            if (v28 <= 0x10)
              v28 = 16;
            *v26 = (613566757 * (unint64_t)((-1048560 - v27 + (v27 << 16)) >> 5)) >> 32;
            v26[1] = (613566757 * (unint64_t)((-1048560 - v28 + (v28 << 16)) >> 5)) >> 32;
            v26 += 2;
          }
          v29 = (_WORD *)(v22 + 2 * v24);
          v30 = *v25;
          if (v30 >= 0xEB)
            v30 = 235;
          if (v30 <= 0x10)
            v30 = 16;
          v31 = v25[2];
          if (v31 >= 0xEB)
            v31 = 235;
          if (v31 <= 0x10)
            v31 = 16;
          *v29 = (-1048560 - v30 + (v30 << 16)) / 0xDB;
          v29[1] = (-1048560 - v31 + (v31 << 16)) / 0xDB;
          v24 += 2;
          v25 += 4;
        }
        while (v24 < v15);
      }
      v22 += v19;
      if ((v17 & 1) != 0)
        v32 = 0;
      else
        v32 = v20;
      v21 += v32;
      ++v17;
      v23 += v18;
    }
    while (v17 != v16);
  }
  return 0;
}

uint64_t vt_Copy_2vuy_t4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t i;
  _WORD *v27;
  _WORD *v28;
  __int16 v29;
  __int16 v30;
  __int16 v31;

  v8 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  if (v8 >= a6[2])
    v8 = a6[2];
  if (a2[3] >= a6[3])
    v9 = a6[3];
  else
    v9 = a2[3];
  if (v9)
  {
    v10 = 0;
    v12 = a8[1];
    v11 = a8[2];
    v13 = *a8;
    v15 = a6[4];
    v14 = a6[5];
    v16 = a7[1] + v12 * v14;
    v17 = a7[2] + v11 * v14;
    v18 = *a7 + *a8 * v14;
    v19 = *a4;
    v20 = v16 + 4 * v15;
    v21 = v17 + 2 * v15;
    v22 = v18 + 2 * v15;
    v23 = *a3 + *a4 * a2[5] + (a2[4] & 0xFFFFFFFELL);
    do
    {
      if (v8)
      {
        v24 = 0;
        v25 = 0;
        for (i = 0; i < v8; i += 2)
        {
          v27 = (_WORD *)(v20 + v25);
          v28 = (_WORD *)(v22 + 2 * i);
          *(_DWORD *)(v21 + 2 * i) = -1;
          v29 = *(unsigned __int8 *)(v23 + v24) << 8;
          v30 = *(unsigned __int8 *)(v23 + v24 + 2) << 8;
          *v27 = v29;
          v27[1] = v30;
          v27[2] = v29;
          v27[3] = v30;
          v31 = *(unsigned __int8 *)(v23 + v24 + 3) << 8;
          *v28 = *(unsigned __int8 *)(v23 + v24 + 1) << 8;
          v28[1] = v31;
          v25 += 8;
          v24 += 4;
        }
      }
      v23 += v19;
      v22 += v13;
      v20 += v12;
      v21 += v11;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_2vuy_tv44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t i;
  _WORD *v24;
  _WORD *v25;
  __int16 v26;
  __int16 v27;
  __int16 v28;

  v8 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  if (v8 >= a6[2])
    v8 = a6[2];
  if (a2[3] >= a6[3])
    v9 = a6[3];
  else
    v9 = a2[3];
  if (v9)
  {
    v10 = 0;
    v11 = *a8;
    v12 = a8[1];
    v14 = a6[4];
    v13 = a6[5];
    v15 = a7[1] + v12 * v13;
    v16 = *a7 + *a8 * v13;
    v17 = *a4;
    v18 = v15 + 4 * v14;
    v19 = v16 + 2 * v14;
    v20 = *a3 + *a4 * a2[5] + (a2[4] & 0xFFFFFFFELL);
    do
    {
      if (v8)
      {
        v21 = 0;
        v22 = 0;
        for (i = 0; i < v8; i += 2)
        {
          v24 = (_WORD *)(v18 + v22);
          v25 = (_WORD *)(v19 + 2 * i);
          v26 = *(unsigned __int8 *)(v20 + v21) << 8;
          v27 = *(unsigned __int8 *)(v20 + v21 + 2) << 8;
          *v24 = v26;
          v24[1] = v27;
          v24[2] = v26;
          v24[3] = v27;
          v28 = *(unsigned __int8 *)(v20 + v21 + 3) << 8;
          *v25 = *(unsigned __int8 *)(v20 + v21 + 1) << 8;
          v25[1] = v28;
          v22 += 8;
          v21 += 4;
        }
      }
      v20 += v17;
      v19 += v11;
      v18 += v12;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_2vuy_tf44(double a1, double a2, double a3, double a4, double a5, double a6, int8x8_t a7, uint64_t a8, _QWORD *a9, _QWORD *a10, uint64_t *a11, uint64_t a12, _QWORD *a13, _QWORD *a14, uint64_t *a15)
{
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int32x2_t v26;
  uint32x2_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t i;
  int16x4_t v31;
  unsigned int v32;
  unsigned int v33;
  _WORD *v34;

  v15 = a9[2] + a9[4] - (a9[4] & 0xFFFFFFFELL) + ((a9[2] + a9[4]) & 1);
  if (v15 >= a13[2])
    v15 = a13[2];
  if (a9[3] >= a13[3])
    v16 = a13[3];
  else
    v16 = a9[3];
  if (v16)
  {
    v17 = 0;
    v18 = *a11;
    v19 = *a15;
    v20 = a15[1];
    v22 = a13[4];
    v21 = a13[5];
    v23 = a14[1] + v20 * v21 + 4 * v22;
    v24 = *a14 + *a15 * v21 + 2 * v22;
    v25 = *a10 + *a11 * a9[5] + (a9[4] & 0xFFFFFFFELL);
    v26 = vdup_n_s32(0xFFFF0010);
    v27 = (uint32x2_t)vdup_n_s32(0x24924925u);
    do
    {
      if (v15)
      {
        v28 = 0;
        v29 = 0;
        for (i = 0; i < v15; i += 2)
        {
          a7.i8[0] = *(_BYTE *)(v25 + v28);
          a7.i8[4] = *(_BYTE *)(v25 + v28 + 2);
          v31 = (int16x4_t)vshl_n_s32(vshrn_n_s64((int64x2_t)vmull_u32(vshr_n_u32((uint32x2_t)vmla_s32(v26, (int32x2_t)vmax_u32(vmin_u32((uint32x2_t)vand_s8(a7, (int8x8_t)0xFF000000FFLL), (uint32x2_t)0xF0000000F0), (uint32x2_t)0x1000000010), (int32x2_t)0xF0000000FLL), 5uLL), v27), 0x20uLL), 4uLL);
          a7 = (int8x8_t)vuzp1_s16(v31, v31);
          *(double *)(v23 + v29) = *(double *)&a7;
          v32 = *(unsigned __int8 *)(v25 + v28 + 1);
          if (v32 >= 0xEB)
            v32 = 235;
          if (v32 <= 0x10)
            v32 = 16;
          v33 = *(unsigned __int8 *)(v25 + v28 + 3);
          if (v33 >= 0xEB)
            v33 = 235;
          if (v33 <= 0x10)
            v33 = 16;
          v34 = (_WORD *)(v24 + 2 * i);
          *v34 = ((((725633745 * (unint64_t)(4095 * v32 - 65520)) >> 32)
                               + ((4095 * v32
                                               - 65520
                                               - ((725633745 * (unint64_t)(4095 * v32 - 65520)) >> 32)) >> 1)) >> 3) & 0xFFF0;
          v34[1] = ((((725633745 * (unint64_t)(4095 * v33 - 65520)) >> 32)
                                 + ((4095 * v33
                                                 - 65520
                                                 - ((725633745 * (unint64_t)(4095 * v33 - 65520)) >> 32)) >> 1)) >> 3) & 0xFFF0;
          v29 += 8;
          v28 += 4;
        }
      }
      v25 += v18;
      v24 += v19;
      v23 += v20;
      ++v17;
    }
    while (v17 != v16);
  }
  return 0;
}

uint64_t vt_Copy_2vuy_t2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t i;
  _WORD *v26;
  _WORD *v27;
  __int16 v28;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a8;
    v14 = a8[1];
    v15 = *(_QWORD *)(a6 + 40);
    v16 = a7[1] + v14 * v15 + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    v17 = a8[2];
    v18 = a7[2] + v17 * v15;
    v19 = *a7 + *a8 * v15;
    v20 = *a4;
    v21 = v18 + 2 * v10;
    v22 = v19 + 2 * v10;
    v23 = *a3 + *a4 * *(_QWORD *)(a2 + 40) + v9;
    do
    {
      if (v11)
      {
        v24 = 0;
        for (i = 0; i < v11; i += 2)
        {
          v26 = (_WORD *)(v16 + 2 * i);
          v27 = (_WORD *)(v22 + 2 * i);
          *(_DWORD *)(v21 + 2 * i) = -1;
          v28 = *(unsigned __int8 *)(v23 + v24 + 2) << 8;
          *v26 = *(unsigned __int8 *)(v23 + v24) << 8;
          v26[1] = v28;
          LOWORD(v26) = *(unsigned __int8 *)(v23 + v24 + 3) << 8;
          *v27 = *(unsigned __int8 *)(v23 + v24 + 1) << 8;
          v27[1] = (_WORD)v26;
          v24 += 4;
        }
      }
      v23 += v20;
      v22 += v13;
      v16 += v14;
      v21 += v17;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_Copy_2vuy_tv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t i;
  _WORD *v22;
  _WORD *v23;
  __int16 v24;
  __int16 v25;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a8;
    v14 = a8[1];
    v15 = *(_QWORD *)(a6 + 40);
    v16 = a7[1] + v14 * v15 + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    v17 = *a4;
    v18 = *a7 + *a8 * v15 + 2 * v10;
    v19 = *a3 + *a4 * *(_QWORD *)(a2 + 40) + v9;
    do
    {
      if (v11)
      {
        v20 = 0;
        for (i = 0; i < v11; i += 2)
        {
          v22 = (_WORD *)(v16 + 2 * i);
          v23 = (_WORD *)(v18 + 2 * i);
          v24 = *(unsigned __int8 *)(v19 + v20 + 2) << 8;
          *v22 = *(unsigned __int8 *)(v19 + v20) << 8;
          v22[1] = v24;
          v25 = *(unsigned __int8 *)(v19 + v20 + 3) << 8;
          *v23 = *(unsigned __int8 *)(v19 + v20 + 1) << 8;
          v23[1] = v25;
          v20 += 4;
        }
      }
      v19 += v17;
      v18 += v13;
      v16 += v14;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_Copy_2vuy_tf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t i;
  unsigned __int8 *v22;
  _WORD *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  _WORD *v28;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a4;
    v14 = *a8;
    v15 = a8[1];
    v16 = *(_QWORD *)(a6 + 40);
    v17 = a7[1] + v15 * v16 + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    v18 = *a7 + *a8 * v16 + 2 * v10;
    v19 = *a3 + *a4 * *(_QWORD *)(a2 + 40) + v9;
    do
    {
      if (v11)
      {
        v20 = 0;
        for (i = 0; i < v11; i += 2)
        {
          v22 = (unsigned __int8 *)(v19 + v20);
          v23 = (_WORD *)(v17 + 2 * i);
          v24 = *(unsigned __int8 *)(v19 + v20);
          if (v24 >= 0xF0)
            v24 = 240;
          v25 = v22[2];
          if (v24 <= 0x10)
            v24 = 16;
          if (v25 >= 0xF0)
            v25 = 240;
          if (v25 <= 0x10)
            v25 = 16;
          *v23 = 16 * ((613566757 * (unint64_t)((4095 * v24 - 65520) >> 5)) >> 32);
          v23[1] = 16 * ((613566757 * (unint64_t)((4095 * v25 - 65520) >> 5)) >> 32);
          v26 = v22[1];
          if (v26 >= 0xEB)
            v26 = 235;
          if (v26 <= 0x10)
            v26 = 16;
          v27 = v22[3];
          if (v27 >= 0xEB)
            v27 = 235;
          v28 = (_WORD *)(v18 + 2 * i);
          if (v27 <= 0x10)
            v27 = 16;
          *v28 = ((((725633745 * (unint64_t)(4095 * v26 - 65520)) >> 32)
                               + ((4095 * v26
                                               - 65520
                                               - ((725633745 * (unint64_t)(4095 * v26 - 65520)) >> 32)) >> 1)) >> 3) & 0xFFF0;
          v28[1] = ((((725633745 * (unint64_t)(4095 * v27 - 65520)) >> 32)
                                 + ((4095 * v27
                                                 - 65520
                                                 - ((725633745 * (unint64_t)(4095 * v27 - 65520)) >> 32)) >> 1)) >> 3) & 0xFFF0;
          v20 += 4;
        }
      }
      v19 += v13;
      v18 += v14;
      v17 += v15;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_2vuy_tv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _WORD *v29;
  __int16 v30;
  _WORD *v31;
  __int16 v32;
  uint64_t v33;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = (v8 & 1) + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v15 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v16 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v17 = v11 - v10;
  if (v17 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v14)
    v17 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v14;
  v18 = v13 - v12;
  if (v18 >= v16 - v15)
    v18 = v16 - v15;
  if (v18)
  {
    v19 = 0;
    v20 = *a8;
    v21 = a8[1];
    v22 = a7[1] + ((unint64_t)(v21 * v15) >> 1) + 2 * (v14 & 0x3FFFFFFFFFFFFFFFLL);
    v23 = *a4;
    v24 = *a7 + *a8 * v15 + 2 * v14;
    v25 = *a3 + *a4 * v12 + v10;
    v26 = *a3 + v9 + (v9 & 1) + v23 + v23 * (v8 + (v8 & 1));
    do
    {
      if (v17)
      {
        v27 = 0;
        v28 = 0;
        v29 = (_WORD *)v22;
        do
        {
          if ((v19 & 1) == 0)
          {
            v30 = (*(unsigned __int8 *)(v26 + v27 + 2) + (unsigned __int16)*(unsigned __int8 *)(v25 + v27 + 2)) << 7;
            *v29 = (*(unsigned __int8 *)(v26 + v27) + (unsigned __int16)*(unsigned __int8 *)(v25 + v27)) << 7;
            v29[1] = v30;
            v29 += 2;
          }
          v31 = (_WORD *)(v24 + 2 * v28);
          v32 = *(unsigned __int8 *)(v25 + v27 + 3) << 8;
          *v31 = *(unsigned __int8 *)(v25 + v27 + 1) << 8;
          v31[1] = v32;
          v28 += 2;
          v27 += 4;
        }
        while (v28 < v17);
      }
      v25 += v23;
      v24 += v20;
      if ((v19 & 1) != 0)
        v33 = 0;
      else
        v33 = v21;
      v22 += v33;
      ++v19;
      v26 += v23;
    }
    while (v19 != v18);
  }
  return 0;
}

uint64_t vt_CopyDec_2vuy_tv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned __int8 *v25;
  _WORD *v26;
  __int16 v27;
  _WORD *v28;
  __int16 v29;
  uint64_t v30;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v10 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v11 = (*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE;
  v12 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v13 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v14 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v15 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v12;
  if (v9 - ((unint64_t)(v8 & 1) + v8) < v15)
    v15 = v9 - ((v8 & 1) + v8);
  v16 = v11 - v10;
  if (v11 - v10 >= (unint64_t)(v14 - v13))
    v16 = v14 - v13;
  if (v16)
  {
    v17 = 0;
    v18 = *a8;
    v19 = a8[1];
    v20 = a7[1] + ((unint64_t)(v19 * v13) >> 1) + 2 * (v12 & 0x3FFFFFFFFFFFFFFFLL);
    v21 = *a4;
    v22 = *a7 + *a8 * v13 + 2 * v12;
    v23 = v8 + *a4 * v10 + (v8 & 1) + *a3 + 1;
    do
    {
      if (v15)
      {
        v24 = 0;
        v25 = (unsigned __int8 *)v23;
        v26 = (_WORD *)v20;
        do
        {
          if ((v17 & 1) == 0)
          {
            v27 = v25[1] << 8;
            *v26 = *(v25 - 1) << 8;
            v26[1] = v27;
            v26 += 2;
          }
          v28 = (_WORD *)(v22 + 2 * v24);
          v29 = v25[2] << 8;
          *v28 = *v25 << 8;
          v28[1] = v29;
          v24 += 2;
          v25 += 4;
        }
        while (v24 < v15);
      }
      v22 += v18;
      if ((v17 & 1) != 0)
        v30 = 0;
      else
        v30 = v19;
      v20 += v30;
      ++v17;
      v23 += v21;
    }
    while (v17 != v16);
  }
  return 0;
}

uint64_t vt_CopyAvg_2vuy_tf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _WORD *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  _WORD *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = (v8 & 1) + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v15 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v16 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v17 = v11 - v10;
  if (v17 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v14)
    v17 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v14;
  v18 = v13 - v12;
  if (v18 >= v16 - v15)
    v18 = v16 - v15;
  if (v18)
  {
    v19 = 0;
    v20 = *a8;
    v21 = a8[1];
    v22 = a7[1] + ((unint64_t)(v21 * v15) >> 1) + 2 * (v14 & 0x3FFFFFFFFFFFFFFFLL);
    v23 = *a4;
    v24 = *a7 + *a8 * v15 + 2 * v14;
    v25 = *a3 + *a4 * v12 + v10;
    v26 = *a3 + v9 + (v9 & 1) + v23 + v23 * (v8 + (v8 & 1));
    do
    {
      if (v17)
      {
        v27 = 0;
        v28 = 0;
        v29 = (_WORD *)v22;
        do
        {
          if ((v19 & 1) == 0)
          {
            v30 = *(unsigned __int8 *)(v25 + v27);
            v31 = *(unsigned __int8 *)(v26 + v27);
            if (v30 >= 0xF0)
              v30 = 240;
            if (v30 <= 0x10)
              v30 = 16;
            if (v31 >= 0xF0)
              v31 = 240;
            if (v31 <= 0x10)
              v31 = 16;
            v32 = *(unsigned __int8 *)(v25 + v27 + 2);
            v33 = *(unsigned __int8 *)(v26 + v27 + 2);
            if (v32 >= 0xF0)
              v32 = 240;
            if (v32 <= 0x10)
              v32 = 16;
            if (v33 >= 0xF0)
              v33 = 240;
            if (v33 <= 0x10)
              v33 = 16;
            *v29 = (8
                  * (((613566757 * (unint64_t)((4095 * v31 - 65520) >> 5)) >> 32)
                   + ((613566757 * (unint64_t)((4095 * v30 - 65520) >> 5)) >> 32))
                  + 8) & 0xFFF0;
            v29[1] = (8
                    * (((613566757 * (unint64_t)((4095 * v33 - 65520) >> 5)) >> 32)
                     + ((613566757 * (unint64_t)((4095 * v32 - 65520) >> 5)) >> 32))
                    + 8) & 0xFFF0;
            v29 += 2;
          }
          v34 = (_WORD *)(v24 + 2 * v28);
          v35 = *(unsigned __int8 *)(v25 + v27 + 1);
          if (v35 >= 0xEB)
            v35 = 235;
          if (v35 <= 0x10)
            v35 = 16;
          v36 = *(unsigned __int8 *)(v25 + v27 + 3);
          if (v36 >= 0xEB)
            v36 = 235;
          if (v36 <= 0x10)
            v36 = 16;
          *v34 = ((((725633745 * (unint64_t)(4095 * v35 - 65520)) >> 32)
                               + ((4095 * v35
                                               - 65520
                                               - ((725633745 * (unint64_t)(4095 * v35 - 65520)) >> 32)) >> 1)) >> 3) & 0xFFF0;
          v34[1] = ((((725633745 * (unint64_t)(4095 * v36 - 65520)) >> 32)
                                 + ((4095 * v36
                                                 - 65520
                                                 - ((725633745 * (unint64_t)(4095 * v36 - 65520)) >> 32)) >> 1)) >> 3) & 0xFFF0;
          v28 += 2;
          v27 += 4;
        }
        while (v28 < v17);
      }
      v25 += v23;
      v24 += v20;
      if ((v19 & 1) != 0)
        v37 = 0;
      else
        v37 = v21;
      v22 += v37;
      ++v19;
      v26 += v23;
    }
    while (v19 != v18);
  }
  return 0;
}

uint64_t vt_CopyDec_2vuy_tf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned __int8 *v25;
  _WORD *v26;
  unsigned int v27;
  unsigned int v28;
  _WORD *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v10 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v11 = (*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE;
  v12 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v13 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v14 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v15 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v12;
  if (v9 - ((unint64_t)(v8 & 1) + v8) < v15)
    v15 = v9 - ((v8 & 1) + v8);
  v16 = v11 - v10;
  if (v11 - v10 >= (unint64_t)(v14 - v13))
    v16 = v14 - v13;
  if (v16)
  {
    v17 = 0;
    v18 = *a4;
    v19 = *a8;
    v20 = a8[1];
    v21 = a7[1] + ((unint64_t)(v20 * v13) >> 1) + 2 * (v12 & 0x3FFFFFFFFFFFFFFFLL);
    v22 = *a7 + *a8 * v13 + 2 * v12;
    v23 = v8 + *a4 * v10 + (v8 & 1) + *a3 + 1;
    do
    {
      if (v15)
      {
        v24 = 0;
        v25 = (unsigned __int8 *)v23;
        v26 = (_WORD *)v21;
        do
        {
          if ((v17 & 1) == 0)
          {
            v27 = *(v25 - 1);
            if (v27 >= 0xF0)
              v27 = 240;
            if (v27 <= 0x10)
              v27 = 16;
            v28 = v25[1];
            if (v28 >= 0xF0)
              v28 = 240;
            if (v28 <= 0x10)
              v28 = 16;
            *v26 = 16 * ((613566757 * (unint64_t)((4095 * v27 - 65520) >> 5)) >> 32);
            v26[1] = 16 * ((613566757 * (unint64_t)((4095 * v28 - 65520) >> 5)) >> 32);
            v26 += 2;
          }
          v29 = (_WORD *)(v22 + 2 * v24);
          v30 = *v25;
          if (v30 >= 0xEB)
            v30 = 235;
          if (v30 <= 0x10)
            v30 = 16;
          v31 = v25[2];
          if (v31 >= 0xEB)
            v31 = 235;
          if (v31 <= 0x10)
            v31 = 16;
          *v29 = ((((725633745 * (unint64_t)(4095 * v30 - 65520)) >> 32)
                               + ((4095 * v30
                                               - 65520
                                               - ((725633745 * (unint64_t)(4095 * v30 - 65520)) >> 32)) >> 1)) >> 3) & 0xFFF0;
          v29[1] = ((((725633745 * (unint64_t)(4095 * v31 - 65520)) >> 32)
                                 + ((4095 * v31
                                                 - 65520
                                                 - ((725633745 * (unint64_t)(4095 * v31 - 65520)) >> 32)) >> 1)) >> 3) & 0xFFF0;
          v24 += 2;
          v25 += 4;
        }
        while (v24 < v15);
      }
      v22 += v19;
      if ((v17 & 1) != 0)
        v32 = 0;
      else
        v32 = v20;
      v21 += v32;
      ++v17;
      v23 += v18;
    }
    while (v17 != v16);
  }
  return 0;
}

uint64_t vt_Copy_2vuy_x4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t i;
  _WORD *v27;
  _WORD *v28;
  __int16 v29;
  __int16 v30;
  __int16 v31;

  v8 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  if (v8 >= a6[2])
    v8 = a6[2];
  if (a2[3] >= a6[3])
    v9 = a6[3];
  else
    v9 = a2[3];
  if (v9)
  {
    v10 = 0;
    v12 = a8[1];
    v11 = a8[2];
    v13 = *a8;
    v15 = a6[4];
    v14 = a6[5];
    v16 = a7[1] + v12 * v14;
    v17 = a7[2] + v11 * v14;
    v18 = *a7 + *a8 * v14;
    v19 = *a4;
    v20 = v16 + 4 * v15;
    v21 = v17 + 2 * v15;
    v22 = v18 + 2 * v15;
    v23 = *a3 + *a4 * a2[5] + (a2[4] & 0xFFFFFFFELL);
    do
    {
      if (v8)
      {
        v24 = 0;
        v25 = 0;
        for (i = 0; i < v8; i += 2)
        {
          v27 = (_WORD *)(v20 + v25);
          v28 = (_WORD *)(v22 + 2 * i);
          *(_DWORD *)(v21 + 2 * i) = -1;
          v29 = *(unsigned __int8 *)(v23 + v24) << 8;
          v30 = *(unsigned __int8 *)(v23 + v24 + 2) << 8;
          *v27 = v29;
          v27[1] = v30;
          v27[2] = v29;
          v27[3] = v30;
          v31 = *(unsigned __int8 *)(v23 + v24 + 3) << 8;
          *v28 = *(unsigned __int8 *)(v23 + v24 + 1) << 8;
          v28[1] = v31;
          v25 += 8;
          v24 += 4;
        }
      }
      v23 += v19;
      v22 += v13;
      v20 += v12;
      v21 += v11;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_2vuy_x444(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t i;
  _WORD *v24;
  _WORD *v25;
  __int16 v26;
  __int16 v27;
  __int16 v28;

  v8 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  if (v8 >= a6[2])
    v8 = a6[2];
  if (a2[3] >= a6[3])
    v9 = a6[3];
  else
    v9 = a2[3];
  if (v9)
  {
    v10 = 0;
    v11 = *a8;
    v12 = a8[1];
    v14 = a6[4];
    v13 = a6[5];
    v15 = a7[1] + v12 * v13;
    v16 = *a7 + *a8 * v13;
    v17 = *a4;
    v18 = v15 + 4 * v14;
    v19 = v16 + 2 * v14;
    v20 = *a3 + *a4 * a2[5] + (a2[4] & 0xFFFFFFFELL);
    do
    {
      if (v8)
      {
        v21 = 0;
        v22 = 0;
        for (i = 0; i < v8; i += 2)
        {
          v24 = (_WORD *)(v18 + v22);
          v25 = (_WORD *)(v19 + 2 * i);
          v26 = *(unsigned __int8 *)(v20 + v21) << 8;
          v27 = *(unsigned __int8 *)(v20 + v21 + 2) << 8;
          *v24 = v26;
          v24[1] = v27;
          v24[2] = v26;
          v24[3] = v27;
          v28 = *(unsigned __int8 *)(v20 + v21 + 3) << 8;
          *v25 = *(unsigned __int8 *)(v20 + v21 + 1) << 8;
          v25[1] = v28;
          v22 += 8;
          v21 += 4;
        }
      }
      v20 += v17;
      v19 += v11;
      v18 += v12;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_2vuy_xf44(double a1, double a2, double a3, double a4, double a5, double a6, int8x8_t a7, uint64_t a8, _QWORD *a9, _QWORD *a10, uint64_t *a11, uint64_t a12, _QWORD *a13, _QWORD *a14, uint64_t *a15)
{
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int32x2_t v26;
  uint32x2_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t i;
  int16x4_t v31;
  unsigned int v32;
  unsigned int v33;
  _WORD *v34;

  v15 = a9[2] + a9[4] - (a9[4] & 0xFFFFFFFELL) + ((a9[2] + a9[4]) & 1);
  if (v15 >= a13[2])
    v15 = a13[2];
  if (a9[3] >= a13[3])
    v16 = a13[3];
  else
    v16 = a9[3];
  if (v16)
  {
    v17 = 0;
    v18 = *a11;
    v19 = *a15;
    v20 = a15[1];
    v22 = a13[4];
    v21 = a13[5];
    v23 = a14[1] + v20 * v21 + 4 * v22;
    v24 = *a14 + *a15 * v21 + 2 * v22;
    v25 = *a10 + *a11 * a9[5] + (a9[4] & 0xFFFFFFFELL);
    v26 = vdup_n_s32(0xFFFFC010);
    v27 = (uint32x2_t)vdup_n_s32(0x24924925u);
    do
    {
      if (v15)
      {
        v28 = 0;
        v29 = 0;
        for (i = 0; i < v15; i += 2)
        {
          a7.i8[0] = *(_BYTE *)(v25 + v28);
          a7.i8[4] = *(_BYTE *)(v25 + v28 + 2);
          v31 = (int16x4_t)vshl_n_s32(vshrn_n_s64((int64x2_t)vmull_u32(vshr_n_u32((uint32x2_t)vmla_s32(v26, (int32x2_t)vmax_u32(vmin_u32((uint32x2_t)vand_s8(a7, (int8x8_t)0xFF000000FFLL), (uint32x2_t)0xF0000000F0), (uint32x2_t)0x1000000010), (int32x2_t)0x300000003), 5uLL), v27), 0x20uLL), 6uLL);
          a7 = (int8x8_t)vuzp1_s16(v31, v31);
          *(double *)(v23 + v29) = *(double *)&a7;
          v32 = *(unsigned __int8 *)(v25 + v28 + 1);
          if (v32 >= 0xEB)
            v32 = 235;
          if (v32 <= 0x10)
            v32 = 16;
          v33 = *(unsigned __int8 *)(v25 + v28 + 3);
          if (v33 >= 0xEB)
            v33 = 235;
          if (v33 <= 0x10)
            v33 = 16;
          v34 = (_WORD *)(v24 + 2 * i);
          *v34 = ((((725633745 * (unint64_t)(1023 * v32 - 16368)) >> 32)
                               + ((1023 * v32
                                               - 16368
                                               - ((725633745 * (unint64_t)(1023 * v32 - 16368)) >> 32)) >> 1)) >> 1) & 0xFFC0;
          v34[1] = ((((725633745 * (unint64_t)(1023 * v33 - 16368)) >> 32)
                                 + ((1023 * v33
                                                 - 16368
                                                 - ((725633745 * (unint64_t)(1023 * v33 - 16368)) >> 32)) >> 1)) >> 1) & 0xFFC0;
          v29 += 8;
          v28 += 4;
        }
      }
      v25 += v18;
      v24 += v19;
      v23 += v20;
      ++v17;
    }
    while (v17 != v16);
  }
  return 0;
}

uint64_t vt_Copy_2vuy_x2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t i;
  _WORD *v26;
  _WORD *v27;
  __int16 v28;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a8;
    v14 = a8[1];
    v15 = *(_QWORD *)(a6 + 40);
    v16 = a7[1] + v14 * v15 + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    v17 = a8[2];
    v18 = a7[2] + v17 * v15;
    v19 = *a7 + *a8 * v15;
    v20 = *a4;
    v21 = v18 + 2 * v10;
    v22 = v19 + 2 * v10;
    v23 = *a3 + *a4 * *(_QWORD *)(a2 + 40) + v9;
    do
    {
      if (v11)
      {
        v24 = 0;
        for (i = 0; i < v11; i += 2)
        {
          v26 = (_WORD *)(v16 + 2 * i);
          v27 = (_WORD *)(v22 + 2 * i);
          *(_DWORD *)(v21 + 2 * i) = -1;
          v28 = *(unsigned __int8 *)(v23 + v24 + 2) << 8;
          *v26 = *(unsigned __int8 *)(v23 + v24) << 8;
          v26[1] = v28;
          LOWORD(v26) = *(unsigned __int8 *)(v23 + v24 + 3) << 8;
          *v27 = *(unsigned __int8 *)(v23 + v24 + 1) << 8;
          v27[1] = (_WORD)v26;
          v24 += 4;
        }
      }
      v23 += v20;
      v22 += v13;
      v16 += v14;
      v21 += v17;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_Copy_2vuy_x422(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t i;
  _WORD *v22;
  _WORD *v23;
  __int16 v24;
  __int16 v25;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a8;
    v14 = a8[1];
    v15 = *(_QWORD *)(a6 + 40);
    v16 = a7[1] + v14 * v15 + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    v17 = *a4;
    v18 = *a7 + *a8 * v15 + 2 * v10;
    v19 = *a3 + *a4 * *(_QWORD *)(a2 + 40) + v9;
    do
    {
      if (v11)
      {
        v20 = 0;
        for (i = 0; i < v11; i += 2)
        {
          v22 = (_WORD *)(v16 + 2 * i);
          v23 = (_WORD *)(v18 + 2 * i);
          v24 = *(unsigned __int8 *)(v19 + v20 + 2) << 8;
          *v22 = *(unsigned __int8 *)(v19 + v20) << 8;
          v22[1] = v24;
          v25 = *(unsigned __int8 *)(v19 + v20 + 3) << 8;
          *v23 = *(unsigned __int8 *)(v19 + v20 + 1) << 8;
          v23[1] = v25;
          v20 += 4;
        }
      }
      v19 += v17;
      v18 += v13;
      v16 += v14;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_Copy_2vuy_xf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t i;
  unsigned __int8 *v22;
  _WORD *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  _WORD *v28;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a4;
    v14 = *a8;
    v15 = a8[1];
    v16 = *(_QWORD *)(a6 + 40);
    v17 = a7[1] + v15 * v16 + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    v18 = *a7 + *a8 * v16 + 2 * v10;
    v19 = *a3 + *a4 * *(_QWORD *)(a2 + 40) + v9;
    do
    {
      if (v11)
      {
        v20 = 0;
        for (i = 0; i < v11; i += 2)
        {
          v22 = (unsigned __int8 *)(v19 + v20);
          v23 = (_WORD *)(v17 + 2 * i);
          v24 = *(unsigned __int8 *)(v19 + v20);
          if (v24 >= 0xF0)
            v24 = 240;
          v25 = v22[2];
          if (v24 <= 0x10)
            v24 = 16;
          if (v25 >= 0xF0)
            v25 = 240;
          if (v25 <= 0x10)
            v25 = 16;
          *v23 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v24 - 16368) >> 5)) >> 32) << 6;
          v23[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v25 - 16368) >> 5)) >> 32) << 6;
          v26 = v22[1];
          if (v26 >= 0xEB)
            v26 = 235;
          if (v26 <= 0x10)
            v26 = 16;
          v27 = v22[3];
          if (v27 >= 0xEB)
            v27 = 235;
          v28 = (_WORD *)(v18 + 2 * i);
          if (v27 <= 0x10)
            v27 = 16;
          *v28 = ((((725633745 * (unint64_t)(1023 * v26 - 16368)) >> 32)
                               + ((1023 * v26
                                               - 16368
                                               - ((725633745 * (unint64_t)(1023 * v26 - 16368)) >> 32)) >> 1)) >> 1) & 0xFFC0;
          v28[1] = ((((725633745 * (unint64_t)(1023 * v27 - 16368)) >> 32)
                                 + ((1023 * v27
                                                 - 16368
                                                 - ((725633745 * (unint64_t)(1023 * v27 - 16368)) >> 32)) >> 1)) >> 1) & 0xFFC0;
          v20 += 4;
        }
      }
      v19 += v13;
      v18 += v14;
      v17 += v15;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_2vuy_x420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _WORD *v29;
  __int16 v30;
  _WORD *v31;
  __int16 v32;
  uint64_t v33;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = (v8 & 1) + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v15 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v16 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v17 = v11 - v10;
  if (v17 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v14)
    v17 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v14;
  v18 = v13 - v12;
  if (v18 >= v16 - v15)
    v18 = v16 - v15;
  if (v18)
  {
    v19 = 0;
    v20 = *a8;
    v21 = a8[1];
    v22 = a7[1] + ((unint64_t)(v21 * v15) >> 1) + 2 * (v14 & 0x3FFFFFFFFFFFFFFFLL);
    v23 = *a4;
    v24 = *a7 + *a8 * v15 + 2 * v14;
    v25 = *a3 + *a4 * v12 + v10;
    v26 = *a3 + v9 + (v9 & 1) + v23 + v23 * (v8 + (v8 & 1));
    do
    {
      if (v17)
      {
        v27 = 0;
        v28 = 0;
        v29 = (_WORD *)v22;
        do
        {
          if ((v19 & 1) == 0)
          {
            v30 = (*(unsigned __int8 *)(v26 + v27 + 2) + (unsigned __int16)*(unsigned __int8 *)(v25 + v27 + 2)) << 7;
            *v29 = (*(unsigned __int8 *)(v26 + v27) + (unsigned __int16)*(unsigned __int8 *)(v25 + v27)) << 7;
            v29[1] = v30;
            v29 += 2;
          }
          v31 = (_WORD *)(v24 + 2 * v28);
          v32 = *(unsigned __int8 *)(v25 + v27 + 3) << 8;
          *v31 = *(unsigned __int8 *)(v25 + v27 + 1) << 8;
          v31[1] = v32;
          v28 += 2;
          v27 += 4;
        }
        while (v28 < v17);
      }
      v25 += v23;
      v24 += v20;
      if ((v19 & 1) != 0)
        v33 = 0;
      else
        v33 = v21;
      v22 += v33;
      ++v19;
      v26 += v23;
    }
    while (v19 != v18);
  }
  return 0;
}

uint64_t vt_CopyDec_2vuy_x420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned __int8 *v25;
  _WORD *v26;
  __int16 v27;
  _WORD *v28;
  __int16 v29;
  uint64_t v30;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v10 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v11 = (*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE;
  v12 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v13 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v14 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v15 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v12;
  if (v9 - ((unint64_t)(v8 & 1) + v8) < v15)
    v15 = v9 - ((v8 & 1) + v8);
  v16 = v11 - v10;
  if (v11 - v10 >= (unint64_t)(v14 - v13))
    v16 = v14 - v13;
  if (v16)
  {
    v17 = 0;
    v18 = *a8;
    v19 = a8[1];
    v20 = a7[1] + ((unint64_t)(v19 * v13) >> 1) + 2 * (v12 & 0x3FFFFFFFFFFFFFFFLL);
    v21 = *a4;
    v22 = *a7 + *a8 * v13 + 2 * v12;
    v23 = v8 + *a4 * v10 + (v8 & 1) + *a3 + 1;
    do
    {
      if (v15)
      {
        v24 = 0;
        v25 = (unsigned __int8 *)v23;
        v26 = (_WORD *)v20;
        do
        {
          if ((v17 & 1) == 0)
          {
            v27 = v25[1] << 8;
            *v26 = *(v25 - 1) << 8;
            v26[1] = v27;
            v26 += 2;
          }
          v28 = (_WORD *)(v22 + 2 * v24);
          v29 = v25[2] << 8;
          *v28 = *v25 << 8;
          v28[1] = v29;
          v24 += 2;
          v25 += 4;
        }
        while (v24 < v15);
      }
      v22 += v18;
      if ((v17 & 1) != 0)
        v30 = 0;
      else
        v30 = v19;
      v20 += v30;
      ++v17;
      v23 += v21;
    }
    while (v17 != v16);
  }
  return 0;
}

uint64_t vt_CopyAvg_2vuy_xf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _WORD *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  _WORD *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = (v8 & 1) + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v15 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v16 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v17 = v11 - v10;
  if (v17 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v14)
    v17 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v14;
  v18 = v13 - v12;
  if (v18 >= v16 - v15)
    v18 = v16 - v15;
  if (v18)
  {
    v19 = 0;
    v20 = *a8;
    v21 = a8[1];
    v22 = a7[1] + ((unint64_t)(v21 * v15) >> 1) + 2 * (v14 & 0x3FFFFFFFFFFFFFFFLL);
    v23 = *a4;
    v24 = *a7 + *a8 * v15 + 2 * v14;
    v25 = *a3 + *a4 * v12 + v10;
    v26 = *a3 + v9 + (v9 & 1) + v23 + v23 * (v8 + (v8 & 1));
    do
    {
      if (v17)
      {
        v27 = 0;
        v28 = 0;
        v29 = (_WORD *)v22;
        do
        {
          if ((v19 & 1) == 0)
          {
            v30 = *(unsigned __int8 *)(v25 + v27);
            v31 = *(unsigned __int8 *)(v26 + v27);
            if (v30 >= 0xF0)
              v30 = 240;
            if (v30 <= 0x10)
              v30 = 16;
            if (v31 >= 0xF0)
              v31 = 240;
            if (v31 <= 0x10)
              v31 = 16;
            v32 = *(unsigned __int8 *)(v25 + v27 + 2);
            v33 = *(unsigned __int8 *)(v26 + v27 + 2);
            if (v32 >= 0xF0)
              v32 = 240;
            if (v32 <= 0x10)
              v32 = 16;
            if (v33 >= 0xF0)
              v33 = 240;
            if (v33 <= 0x10)
              v33 = 16;
            *v29 = (32
                  * (((613566757 * (unint64_t)((1023 * v31 - 16368) >> 5)) >> 32)
                   + ((613566757 * (unint64_t)((1023 * v30 - 16368) >> 5)) >> 32))
                  + 32) & 0xFFC0;
            v29[1] = (32
                    * (((613566757 * (unint64_t)((1023 * v33 - 16368) >> 5)) >> 32)
                     + ((613566757 * (unint64_t)((1023 * v32 - 16368) >> 5)) >> 32))
                    + 32) & 0xFFC0;
            v29 += 2;
          }
          v34 = (_WORD *)(v24 + 2 * v28);
          v35 = *(unsigned __int8 *)(v25 + v27 + 1);
          if (v35 >= 0xEB)
            v35 = 235;
          if (v35 <= 0x10)
            v35 = 16;
          v36 = *(unsigned __int8 *)(v25 + v27 + 3);
          if (v36 >= 0xEB)
            v36 = 235;
          if (v36 <= 0x10)
            v36 = 16;
          *v34 = ((((725633745 * (unint64_t)(1023 * v35 - 16368)) >> 32)
                               + ((1023 * v35
                                               - 16368
                                               - ((725633745 * (unint64_t)(1023 * v35 - 16368)) >> 32)) >> 1)) >> 1) & 0xFFC0;
          v34[1] = ((((725633745 * (unint64_t)(1023 * v36 - 16368)) >> 32)
                                 + ((1023 * v36
                                                 - 16368
                                                 - ((725633745 * (unint64_t)(1023 * v36 - 16368)) >> 32)) >> 1)) >> 1) & 0xFFC0;
          v28 += 2;
          v27 += 4;
        }
        while (v28 < v17);
      }
      v25 += v23;
      v24 += v20;
      if ((v19 & 1) != 0)
        v37 = 0;
      else
        v37 = v21;
      v22 += v37;
      ++v19;
      v26 += v23;
    }
    while (v19 != v18);
  }
  return 0;
}

uint64_t vt_CopyDec_2vuy_xf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned __int8 *v25;
  _WORD *v26;
  unsigned int v27;
  unsigned int v28;
  _WORD *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v10 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v11 = (*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE;
  v12 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v13 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v14 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v15 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v12;
  if (v9 - ((unint64_t)(v8 & 1) + v8) < v15)
    v15 = v9 - ((v8 & 1) + v8);
  v16 = v11 - v10;
  if (v11 - v10 >= (unint64_t)(v14 - v13))
    v16 = v14 - v13;
  if (v16)
  {
    v17 = 0;
    v18 = *a4;
    v19 = *a8;
    v20 = a8[1];
    v21 = a7[1] + ((unint64_t)(v20 * v13) >> 1) + 2 * (v12 & 0x3FFFFFFFFFFFFFFFLL);
    v22 = *a7 + *a8 * v13 + 2 * v12;
    v23 = v8 + *a4 * v10 + (v8 & 1) + *a3 + 1;
    do
    {
      if (v15)
      {
        v24 = 0;
        v25 = (unsigned __int8 *)v23;
        v26 = (_WORD *)v21;
        do
        {
          if ((v17 & 1) == 0)
          {
            v27 = *(v25 - 1);
            if (v27 >= 0xF0)
              v27 = 240;
            if (v27 <= 0x10)
              v27 = 16;
            v28 = v25[1];
            if (v28 >= 0xF0)
              v28 = 240;
            if (v28 <= 0x10)
              v28 = 16;
            *v26 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v27 - 16368) >> 5)) >> 32) << 6;
            v26[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v28 - 16368) >> 5)) >> 32) << 6;
            v26 += 2;
          }
          v29 = (_WORD *)(v22 + 2 * v24);
          v30 = *v25;
          if (v30 >= 0xEB)
            v30 = 235;
          if (v30 <= 0x10)
            v30 = 16;
          v31 = v25[2];
          if (v31 >= 0xEB)
            v31 = 235;
          if (v31 <= 0x10)
            v31 = 16;
          *v29 = ((((725633745 * (unint64_t)(1023 * v30 - 16368)) >> 32)
                               + ((1023 * v30
                                               - 16368
                                               - ((725633745 * (unint64_t)(1023 * v30 - 16368)) >> 32)) >> 1)) >> 1) & 0xFFC0;
          v29[1] = ((((725633745 * (unint64_t)(1023 * v31 - 16368)) >> 32)
                                 + ((1023 * v31
                                                 - 16368
                                                 - ((725633745 * (unint64_t)(1023 * v31 - 16368)) >> 32)) >> 1)) >> 1) & 0xFFC0;
          v24 += 2;
          v25 += 4;
        }
        while (v24 < v15);
      }
      v22 += v19;
      if ((v17 & 1) != 0)
        v32 = 0;
      else
        v32 = v20;
      v21 += v32;
      ++v17;
      v23 += v18;
    }
    while (v17 != v16);
  }
  return 0;
}

uint64_t vt_Copy_2vuy_v4a8(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t i;
  _BYTE *v26;
  _BYTE *v27;
  char v28;
  char v29;
  char v30;

  v8 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  if (v8 >= a6[2])
    v8 = a6[2];
  if (a2[3] >= a6[3])
    v9 = a6[3];
  else
    v9 = a2[3];
  if (v9)
  {
    v10 = 0;
    v12 = a8[1];
    v11 = a8[2];
    v13 = *a8;
    v15 = a6[4];
    v14 = a6[5];
    v16 = a7[1] + v12 * v14;
    v17 = a7[2] + v11 * v14;
    v18 = *a7 + *a8 * v14;
    v19 = *a4;
    v20 = v16 + 2 * v15;
    v21 = v17 + v15;
    v22 = v18 + v15;
    v23 = *a3 + *a4 * a2[5] + (a2[4] & 0xFFFFFFFELL);
    do
    {
      if (v8)
      {
        v24 = 0;
        for (i = 0; i < v8; i += 2)
        {
          v26 = (_BYTE *)(v20 + v24);
          v27 = (_BYTE *)(v22 + i);
          *(_WORD *)(v21 + i) = -1;
          v28 = *(_BYTE *)(v23 + v24);
          v29 = *(_BYTE *)(v23 + v24 + 2);
          *v26 = v28;
          v26[1] = v29;
          v26[2] = v28;
          v26[3] = v29;
          v30 = *(_BYTE *)(v23 + v24 + 3);
          *v27 = *(_BYTE *)(v23 + v24 + 1);
          v27[1] = v30;
          v24 += 4;
        }
      }
      v23 += v19;
      v22 += v13;
      v20 += v12;
      v21 += v11;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_2vuy_444v(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t i;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  char v26;
  char v27;

  v8 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  if (v8 >= a6[2])
    v8 = a6[2];
  if (a2[3] >= a6[3])
    v9 = a6[3];
  else
    v9 = a2[3];
  if (v9)
  {
    v10 = 0;
    v11 = *a8;
    v12 = a8[1];
    v14 = a6[4];
    v13 = a6[5];
    v15 = a7[1] + v12 * v13;
    v16 = *a7 + *a8 * v13;
    v17 = *a4;
    v18 = v15 + 2 * v14;
    v19 = v16 + v14;
    v20 = *a3 + *a4 * a2[5] + (a2[4] & 0xFFFFFFFELL);
    do
    {
      if (v8)
      {
        v21 = 0;
        for (i = 0; i < v8; i += 2)
        {
          v23 = (_BYTE *)(v18 + v21);
          v24 = (_BYTE *)(v19 + i);
          v25 = *(_BYTE *)(v20 + v21);
          v26 = *(_BYTE *)(v20 + v21 + 2);
          *v23 = v25;
          v23[1] = v26;
          v23[2] = v25;
          v23[3] = v26;
          v27 = *(_BYTE *)(v20 + v21 + 3);
          *v24 = *(_BYTE *)(v20 + v21 + 1);
          v24[1] = v27;
          v21 += 4;
        }
      }
      v20 += v17;
      v19 += v11;
      v18 += v12;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_2vuy_444f(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t i;
  unsigned __int8 *v21;
  _BYTE *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  _BYTE *v29;

  v8 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  if (v8 >= a6[2])
    v8 = a6[2];
  if (a2[3] >= a6[3])
    v9 = a6[3];
  else
    v9 = a2[3];
  if (v9)
  {
    v10 = 0;
    v11 = *a4;
    v12 = *a8;
    v13 = a8[1];
    v15 = a6[4];
    v14 = a6[5];
    v16 = a7[1] + v13 * v14 + 2 * v15;
    v17 = *a7 + *a8 * v14 + v15;
    v18 = *a3 + *a4 * a2[5] + (a2[4] & 0xFFFFFFFELL);
    do
    {
      if (v8)
      {
        v19 = 0;
        for (i = 0; i < v8; i += 2)
        {
          v21 = (unsigned __int8 *)(v18 + v19);
          v22 = (_BYTE *)(v16 + v19);
          v23 = *(unsigned __int8 *)(v18 + v19);
          if (v23 >= 0xF0)
            v23 = 240;
          v24 = v21[2];
          if (v23 <= 0x10)
            LOWORD(v23) = 16;
          if (v24 >= 0xF0)
            v24 = 240;
          if (v24 <= 0x10)
            LOWORD(v24) = 16;
          v25 = (9363 * ((unsigned __int16)(255 * v23 - 4080) >> 5)) >> 16;
          v26 = (9363 * ((unsigned __int16)(255 * v24 - 4080) >> 5)) >> 16;
          *v22 = v25;
          v22[1] = v26;
          v22[2] = v25;
          v22[3] = v26;
          v27 = v21[1];
          if (v27 >= 0xEB)
            v27 = 235;
          if (v27 <= 0x10)
            v27 = 16;
          v28 = v21[3];
          if (v28 >= 0xEB)
            v28 = 235;
          v29 = (_BYTE *)(v17 + i);
          if (v28 <= 0x10)
            v28 = 16;
          *v29 = (((255 * v27 - 4080 - ((11073 * (unsigned __int16)(255 * v27 - 4080)) >> 16)) >> 1)
                + ((11073 * (unsigned __int16)(255 * v27 - 4080)) >> 16)) >> 7;
          v29[1] = (((255 * v28 - 4080 - ((11073 * (unsigned __int16)(255 * v28 - 4080)) >> 16)) >> 1)
                  + ((11073 * (unsigned __int16)(255 * v28 - 4080)) >> 16)) >> 7;
          v19 += 4;
        }
      }
      v18 += v11;
      v17 += v12;
      v16 += v13;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_2vuy_v2a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t i;
  _BYTE *v26;
  _BYTE *v27;
  char v28;
  char v29;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a8;
    v14 = a8[1];
    v15 = *(_QWORD *)(a6 + 40);
    v16 = a7[1] + v14 * v15 + (v10 & 0x7FFFFFFFFFFFFFFFLL);
    v17 = a8[2];
    v18 = a7[2] + v17 * v15;
    v19 = *a7 + *a8 * v15;
    v20 = *a4;
    v21 = v18 + v10;
    v22 = v19 + v10;
    v23 = *a3 + *a4 * *(_QWORD *)(a2 + 40) + v9;
    do
    {
      if (v11)
      {
        v24 = 0;
        for (i = 0; i < v11; i += 2)
        {
          v26 = (_BYTE *)(v16 + i);
          v27 = (_BYTE *)(v22 + i);
          *(_WORD *)(v21 + i) = -1;
          v28 = *(_BYTE *)(v23 + v24 + 2);
          *v26 = *(_BYTE *)(v23 + v24);
          v26[1] = v28;
          v29 = *(_BYTE *)(v23 + v24 + 3);
          *v27 = *(_BYTE *)(v23 + v24 + 1);
          v27[1] = v29;
          v24 += 4;
        }
      }
      v23 += v20;
      v22 += v13;
      v16 += v14;
      v21 += v17;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_Copy_2vuy_422v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t i;
  _BYTE *v22;
  _BYTE *v23;
  char v24;
  char v25;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a8;
    v14 = a8[1];
    v15 = *(_QWORD *)(a6 + 40);
    v16 = a7[1] + v14 * v15 + (v10 & 0x7FFFFFFFFFFFFFFFLL);
    v17 = *a4;
    v18 = *a7 + *a8 * v15 + v10;
    v19 = *a3 + *a4 * *(_QWORD *)(a2 + 40) + v9;
    do
    {
      if (v11)
      {
        v20 = 0;
        for (i = 0; i < v11; i += 2)
        {
          v22 = (_BYTE *)(v16 + i);
          v23 = (_BYTE *)(v18 + i);
          v24 = *(_BYTE *)(v19 + v20 + 2);
          *v22 = *(_BYTE *)(v19 + v20);
          v22[1] = v24;
          v25 = *(_BYTE *)(v19 + v20 + 3);
          *v23 = *(_BYTE *)(v19 + v20 + 1);
          v23[1] = v25;
          v20 += 4;
        }
      }
      v19 += v17;
      v18 += v13;
      v16 += v14;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_Copy_2vuy_422f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t i;
  unsigned __int8 *v22;
  unsigned int v23;
  unsigned int v24;
  _BYTE *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE *v28;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a4;
    v14 = *a8;
    v15 = a8[1];
    v16 = *(_QWORD *)(a6 + 40);
    v17 = a7[1] + v15 * v16 + (v10 & 0x7FFFFFFFFFFFFFFFLL);
    v18 = *a7 + *a8 * v16 + v10;
    v19 = *a3 + *a4 * *(_QWORD *)(a2 + 40) + v9;
    do
    {
      if (v11)
      {
        v20 = 0;
        for (i = 0; i < v11; i += 2)
        {
          v22 = (unsigned __int8 *)(v19 + v20);
          v23 = *(unsigned __int8 *)(v19 + v20);
          if (v23 >= 0xF0)
            v23 = 240;
          if (v23 <= 0x10)
            LOWORD(v23) = 16;
          v24 = v22[2];
          if (v24 >= 0xF0)
            v24 = 240;
          if (v24 <= 0x10)
            LOWORD(v24) = 16;
          v25 = (_BYTE *)(v17 + i);
          *v25 = (9363 * ((unsigned __int16)(255 * v23 - 4080) >> 5)) >> 16;
          v25[1] = (9363 * ((unsigned __int16)(255 * v24 - 4080) >> 5)) >> 16;
          v26 = v22[1];
          if (v26 >= 0xEB)
            v26 = 235;
          if (v26 <= 0x10)
            v26 = 16;
          v27 = v22[3];
          if (v27 >= 0xEB)
            v27 = 235;
          v28 = (_BYTE *)(v18 + i);
          if (v27 <= 0x10)
            v27 = 16;
          *v28 = (((255 * v26 - 4080 - ((11073 * (unsigned __int16)(255 * v26 - 4080)) >> 16)) >> 1)
                + ((11073 * (unsigned __int16)(255 * v26 - 4080)) >> 16)) >> 7;
          v28[1] = (((255 * v27 - 4080 - ((11073 * (unsigned __int16)(255 * v27 - 4080)) >> 16)) >> 1)
                  + ((11073 * (unsigned __int16)(255 * v27 - 4080)) >> 16)) >> 7;
          v20 += 4;
        }
      }
      v19 += v13;
      v18 += v14;
      v17 += v15;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_2vuy_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  unsigned int v32;
  _BYTE *v33;
  char v34;
  uint64_t v35;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = (v8 & 1) + v8;
  v11 = (v9 & 1) + v9;
  v12 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v13 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v14 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v15 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - v10;
  if (v15 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v12)
    v15 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v12;
  v16 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v11;
  if (v16 >= v14 - v13)
    v16 = v14 - v13;
  if (v16)
  {
    v17 = 0;
    v18 = *a8;
    v19 = a8[1];
    v20 = a7[1] + ((unint64_t)(v19 * v13) >> 1) + (v12 & 0x7FFFFFFFFFFFFFFFLL);
    v21 = a8[2];
    v22 = a7[2] + v21 * v13;
    v23 = *a7 + *a8 * v13;
    v24 = *a4;
    v25 = v22 + v12;
    v26 = v23 + v12;
    v27 = *a3 + *a4 * v11 + v10;
    v28 = *a3 + v8 + (v8 & 1) + v24 + v24 * (v9 + (v9 & 1));
    do
    {
      if (v15)
      {
        v29 = 0;
        v30 = 0;
        v31 = (_BYTE *)v20;
        do
        {
          *(_WORD *)(v25 + v30) = -1;
          if ((v17 & 1) == 0)
          {
            v32 = (*(unsigned __int8 *)(v27 + v29 + 2) + *(unsigned __int8 *)(v28 + v29 + 2) + 1) >> 1;
            *v31 = (*(unsigned __int8 *)(v27 + v29) + *(unsigned __int8 *)(v28 + v29) + 1) >> 1;
            v31[1] = v32;
            v31 += 2;
          }
          v33 = (_BYTE *)(v26 + v30);
          v34 = *(_BYTE *)(v27 + v29 + 3);
          *v33 = *(_BYTE *)(v27 + v29 + 1);
          v33[1] = v34;
          v30 += 2;
          v29 += 4;
        }
        while (v30 < v15);
      }
      v27 += v24;
      v26 += v18;
      if ((v17 & 1) != 0)
        v35 = 0;
      else
        v35 = v19;
      v20 += v35;
      v25 += v21;
      ++v17;
      v28 += v24;
    }
    while (v17 != v16);
  }
  return 0;
}

uint64_t vt_CopyDec_2vuy_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  char v30;
  _BYTE *v31;
  char v32;
  uint64_t v33;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v10 = (*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE;
  v11 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v12 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v13 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v14 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v11;
  if (((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - ((unint64_t)(v8 & 1) + v8) < v14)
    v14 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE)
        - ((*(_QWORD *)(a2 + 32) & 1)
         + *(_QWORD *)(a2 + 32));
  v15 = v10 - v9;
  if (v10 - v9 >= (unint64_t)(v13 - v12))
    v15 = v13 - v12;
  if (v15)
  {
    v16 = 0;
    v17 = *a8;
    v18 = a8[1];
    v19 = a7[1] + ((unint64_t)(v18 * v12) >> 1) + (v11 & 0x7FFFFFFFFFFFFFFFLL);
    v20 = a8[2];
    v21 = a7[2] + v20 * v12;
    v22 = *a7 + *a8 * v12;
    v23 = *a4;
    v24 = v21 + v11;
    v25 = v22 + v11;
    v26 = v8 + *a4 * v9 + (v8 & 1) + *a3 + 1;
    do
    {
      if (v14)
      {
        v27 = 0;
        v28 = (_BYTE *)v26;
        v29 = (_BYTE *)v19;
        do
        {
          *(_WORD *)(v24 + v27) = -1;
          if ((v16 & 1) == 0)
          {
            v30 = v28[1];
            *v29 = *(v28 - 1);
            v29[1] = v30;
            v29 += 2;
          }
          v31 = (_BYTE *)(v25 + v27);
          v32 = v28[2];
          *v31 = *v28;
          v31[1] = v32;
          v27 += 2;
          v28 += 4;
        }
        while (v27 < v14);
      }
      v25 += v17;
      if ((v16 & 1) != 0)
        v33 = 0;
      else
        v33 = v18;
      v19 += v33;
      v24 += v20;
      ++v16;
      v26 += v23;
    }
    while (v16 != v15);
  }
  return 0;
}

uint64_t vt_CopyAvg_2vuy_f420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  _BYTE *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  _BYTE *v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = (v8 & 1) + v8;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = (v9 & 1) + v9;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v14 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v15 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v16 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v17 = v11 - v10;
  if (v17 >= ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v14)
    v17 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v14;
  v18 = v13 - v12;
  if (v18 >= v16 - v15)
    v18 = v16 - v15;
  if (v18)
  {
    v19 = 0;
    v20 = *a8;
    v21 = a8[1];
    v22 = a8[2];
    v23 = *a4;
    v24 = (_BYTE *)(a7[2] + ((unint64_t)(v22 * v15) >> 1) + (v14 >> 1));
    v25 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v15) >> 1) + (v14 >> 1));
    v26 = *a7 + *a8 * v15 + v14;
    v27 = *a3 + *a4 * v12 + v10;
    v28 = *a3 + v8 + (v8 & 1) + v23 + v23 * (v9 + (v9 & 1));
    do
    {
      if (v17)
      {
        v29 = 0;
        v30 = 0;
        v31 = v24;
        v32 = v25;
        do
        {
          if ((v19 & 1) == 0)
          {
            v33 = *(unsigned __int8 *)(v27 + v29);
            v34 = *(unsigned __int8 *)(v28 + v29);
            if (v33 >= 0xF0)
              v33 = 240;
            if (v33 <= 0x10)
              LOWORD(v33) = 16;
            if (v34 >= 0xF0)
              v34 = 240;
            if (v34 <= 0x10)
              LOWORD(v34) = 16;
            v35 = *(unsigned __int8 *)(v27 + v29 + 2);
            v36 = *(unsigned __int8 *)(v28 + v29 + 2);
            if (v35 >= 0xF0)
              v35 = 240;
            if (v35 <= 0x10)
              LOWORD(v35) = 16;
            if (v36 >= 0xF0)
              v36 = 240;
            if (v36 <= 0x10)
              LOWORD(v36) = 16;
            *v32++ = (((9363 * ((unsigned __int16)(255 * v33 - 4080) >> 5)) >> 16)
                    + ((9363 * ((unsigned __int16)(255 * v34 - 4080) >> 5)) >> 16)
                    + 1) >> 1;
            *v31++ = (((9363 * ((unsigned __int16)(255 * v35 - 4080) >> 5)) >> 16)
                    + ((9363 * ((unsigned __int16)(255 * v36 - 4080) >> 5)) >> 16)
                    + 1) >> 1;
          }
          v37 = (_BYTE *)(v26 + v30);
          v38 = *(unsigned __int8 *)(v27 + v29 + 1);
          if (v38 >= 0xEB)
            v38 = 235;
          if (v38 <= 0x10)
            v38 = 16;
          v39 = *(unsigned __int8 *)(v27 + v29 + 3);
          if (v39 >= 0xEB)
            v39 = 235;
          if (v39 <= 0x10)
            v39 = 16;
          *v37 = (((255 * v38 - 4080 - ((11073 * (unsigned __int16)(255 * v38 - 4080)) >> 16)) >> 1)
                + ((11073 * (unsigned __int16)(255 * v38 - 4080)) >> 16)) >> 7;
          v37[1] = (((255 * v39 - 4080 - ((11073 * (unsigned __int16)(255 * v39 - 4080)) >> 16)) >> 1)
                  + ((11073 * (unsigned __int16)(255 * v39 - 4080)) >> 16)) >> 7;
          v30 += 2;
          v29 += 4;
        }
        while (v30 < v17);
      }
      v27 += v23;
      v26 += v20;
      if ((v19 & 1) != 0)
        v40 = 0;
      else
        v40 = v21;
      v25 += v40;
      if ((v19 & 1) != 0)
        v41 = 0;
      else
        v41 = v22;
      v24 += v41;
      ++v19;
      v28 += v23;
    }
    while (v19 != v18);
  }
  return 0;
}

uint64_t vt_CopyDec_2vuy_f420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned __int8 *v27;
  _BYTE *v28;
  _BYTE *v29;
  unsigned int v30;
  unsigned int v31;
  _BYTE *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v10 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v11 = (*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE;
  v12 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v13 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v14 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v15 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v12;
  if (v9 - ((unint64_t)(v8 & 1) + v8) < v15)
    v15 = v9 - ((v8 & 1) + v8);
  v16 = v11 - v10;
  if (v11 - v10 >= (unint64_t)(v14 - v13))
    v16 = v14 - v13;
  if (v16)
  {
    v17 = 0;
    v18 = *a8;
    v19 = a8[1];
    v20 = a8[2];
    v21 = *a4;
    v22 = (_BYTE *)(a7[2] + ((unint64_t)(v20 * v13) >> 1) + (v12 >> 1));
    v23 = (_BYTE *)(a7[1] + ((unint64_t)(v19 * v13) >> 1) + (v12 >> 1));
    v24 = *a7 + *a8 * v13 + v12;
    v25 = v8 + *a4 * v10 + (v8 & 1) + *a3 + 1;
    do
    {
      if (v15)
      {
        v26 = 0;
        v27 = (unsigned __int8 *)v25;
        v28 = v22;
        v29 = v23;
        do
        {
          if ((v17 & 1) == 0)
          {
            v30 = *(v27 - 1);
            if (v30 >= 0xF0)
              v30 = 240;
            if (v30 <= 0x10)
              LOWORD(v30) = 16;
            v31 = v27[1];
            if (v31 >= 0xF0)
              v31 = 240;
            if (v31 <= 0x10)
              LOWORD(v31) = 16;
            *v29++ = (9363 * ((unsigned __int16)(255 * v30 - 4080) >> 5)) >> 16;
            *v28++ = (9363 * ((unsigned __int16)(255 * v31 - 4080) >> 5)) >> 16;
          }
          v32 = (_BYTE *)(v24 + v26);
          v33 = *v27;
          if (v33 >= 0xEB)
            v33 = 235;
          if (v33 <= 0x10)
            v33 = 16;
          v34 = v27[2];
          if (v34 >= 0xEB)
            v34 = 235;
          if (v34 <= 0x10)
            v34 = 16;
          *v32 = (((255 * v33 - 4080 - ((11073 * (unsigned __int16)(255 * v33 - 4080)) >> 16)) >> 1)
                + ((11073 * (unsigned __int16)(255 * v33 - 4080)) >> 16)) >> 7;
          v32[1] = (((255 * v34 - 4080 - ((11073 * (unsigned __int16)(255 * v34 - 4080)) >> 16)) >> 1)
                  + ((11073 * (unsigned __int16)(255 * v34 - 4080)) >> 16)) >> 7;
          v26 += 2;
          v27 += 4;
        }
        while (v26 < v15);
      }
      v24 += v18;
      if ((v17 & 1) != 0)
        v35 = 0;
      else
        v35 = v19;
      v23 += v35;
      if ((v17 & 1) != 0)
        v36 = 0;
      else
        v36 = v20;
      v22 += v36;
      ++v17;
      v25 += v21;
    }
    while (v17 != v16);
  }
  return 0;
}

vImage_Error vt_VImage_Setup_yuvs_32ARGB(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  vImage_YpCbCrToARGB *v17;
  __int128 v18;
  const vImage_YpCbCrToARGBMatrix **v19;
  const vImage_YpCbCrToARGBMatrix *DefaultYpCbCrToARGBMatrixWithDimensionHint;
  int v21;
  vImage_Error result;
  __int128 v23;
  int v24;
  vImage_YpCbCrPixelRange pixelRange;

  v23 = 0uLL;
  v24 = 0;
  v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_QWORD *)&v18 = 255;
  *((_QWORD *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFBF0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v23 = xmmword_1928DFC00;
      v21 = 1072585656;
    }
    else if (FigCFEqual())
    {
      v23 = xmmword_1928DFC10;
      v21 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDA8];
        goto LABEL_3;
      }
      v23 = xmmword_1928DFC20;
      v21 = 1072746935;
    }
    v24 = v21;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v23;
    goto LABEL_11;
  }
  v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDB0];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v19;
LABEL_11:
  result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage422YpCbYpCr8, kvImageARGB8888, 0);
  *(_QWORD *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_yuvs_32ARGB;
  *a11 = vt_VImage_Cleanup_yuvs_32ARGB;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_yuvs_32BGRA(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  vImage_YpCbCrToARGB *v17;
  __int128 v18;
  const vImage_YpCbCrToARGBMatrix **v19;
  const vImage_YpCbCrToARGBMatrix *DefaultYpCbCrToARGBMatrixWithDimensionHint;
  int v21;
  vImage_Error result;
  __int128 v23;
  int v24;
  vImage_YpCbCrPixelRange pixelRange;

  v23 = 0uLL;
  v24 = 0;
  v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_QWORD *)&v18 = 255;
  *((_QWORD *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFBF0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v23 = xmmword_1928DFC00;
      v21 = 1072585656;
    }
    else if (FigCFEqual())
    {
      v23 = xmmword_1928DFC10;
      v21 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDA8];
        goto LABEL_3;
      }
      v23 = xmmword_1928DFC20;
      v21 = 1072746935;
    }
    v24 = v21;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v23;
    goto LABEL_11;
  }
  v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDB0];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v19;
LABEL_11:
  result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage422YpCbYpCr8, kvImageARGB8888, 0);
  *(_QWORD *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_yuvs_32BGRA;
  *a11 = vt_VImage_Cleanup_yuvs_32BGRA;
  *a8 = v17;
  return result;
}

uint64_t vt_Copy_yuvs_2vuy_vec(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t **a4, uint64_t a5, _QWORD **a6)
{
  vt_Copy_yuvs_2vuy_arm(*a4, *a6, a1, a2);
  return 0;
}

uint64_t vt_CopyAvg_yuvs_y420(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  _BYTE *v32;
  unsigned int v33;
  char v34;
  unsigned int v35;
  char v36;
  char v37;
  __int128 v39;
  __int128 v40;
  _OWORD v41[2];
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _BYTE v47[48];
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _BYTE v52[48];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v62 = 0u;
  v63 = 0u;
  v60 = 0u;
  v61 = 0u;
  v58 = 0u;
  v59 = 0u;
  v56 = 0u;
  v57 = 0u;
  v54 = 0u;
  v55 = 0u;
  v53 = 0u;
  *(_OWORD *)&v52[32] = 0u;
  *(_OWORD *)&v52[16] = 0u;
  *(_OWORD *)v52 = 0u;
  v51 = 0u;
  v50 = 0u;
  v49 = 0u;
  v48 = 0u;
  *(_OWORD *)&v47[32] = 0u;
  *(_OWORD *)&v47[16] = 0u;
  *(_OWORD *)v47 = 0u;
  v46 = 0u;
  v45 = 0u;
  v44 = 0u;
  v43 = 0u;
  v39 = 0u;
  v40 = 0u;
  v9 = a2[2];
  v10 = a2[3];
  v41[0] = vdupq_n_s64(1uLL);
  v41[1] = xmmword_1928DFC30;
  v42 = 1;
  *(_OWORD *)&v47[8] = v41[0];
  *(_OWORD *)&v47[24] = xmmword_1928DFC40;
  *(_QWORD *)&v47[40] = 2;
  *(_OWORD *)&v52[8] = v41[0];
  *(_OWORD *)&v52[24] = xmmword_1928DFC40;
  v64 = 0;
  *(_QWORD *)&v52[40] = 2;
  v12 = a2[4];
  v11 = a2[5];
  v13 = *a3;
  v14 = *a4;
  vtPixelTransferSession_PrepareOffsets(3uLL, a6, v41, a8, a7, &v39);
  if (v10 >= 2)
  {
    v15 = 0;
    v16 = *a8;
    v17 = a8[1];
    v18 = a8[2];
    v19 = v9 >> 1;
    v21 = *((_QWORD *)&v39 + 1);
    v20 = v40;
    v22 = (2 * v12) & 0xFFFFFFFFFFFFFFCLL;
    v23 = v13 + v22 + v14 * v11;
    v24 = 2 * *a8;
    v25 = v14 + v22;
    v26 = 2 * v14;
    if (v9 >> 1 <= 1)
      v19 = 1;
    v27 = (_BYTE *)(v39 + 1);
    v28 = v13 + v25 + v14 * v11;
    do
    {
      if (v9 >= 2)
      {
        v29 = 0;
        v30 = 0;
        v31 = v27;
        do
        {
          v32 = &v31[v16];
          v33 = (*(unsigned __int8 *)(v28 + v29 + 1) + *(unsigned __int8 *)(v23 + v29 + 1)) >> 1;
          v34 = *(_BYTE *)(v23 + v29 + 2);
          v35 = (*(unsigned __int8 *)(v28 + v29 + 3) + *(unsigned __int8 *)(v23 + v29 + 3)) >> 1;
          v36 = *(_BYTE *)(v28 + v29);
          v37 = *(_BYTE *)(v28 + v29 + 2);
          *(v31 - 1) = *(_BYTE *)(v23 + v29);
          *v31 = v34;
          v31 += 2;
          *(v32 - 1) = v36;
          *v32 = v37;
          *(_BYTE *)(v21 + v30) = v33;
          *(_BYTE *)(v20 + v30++) = v35;
          v29 += 4;
        }
        while (v19 != v30);
      }
      v21 += v17;
      v20 += v18;
      v23 += v26;
      ++v15;
      v27 += v24;
      v28 += v26;
    }
    while (v15 != v10 >> 1);
  }
  return 0;
}

uint64_t vt_CopyDec_yuvs_y420(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  _BYTE *v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  __int128 v39;
  __int128 v40;
  _OWORD v41[2];
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _BYTE v47[48];
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _BYTE v52[48];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v62 = 0u;
  v63 = 0u;
  v60 = 0u;
  v61 = 0u;
  v58 = 0u;
  v59 = 0u;
  v56 = 0u;
  v57 = 0u;
  v54 = 0u;
  v55 = 0u;
  v53 = 0u;
  *(_OWORD *)&v52[32] = 0u;
  *(_OWORD *)&v52[16] = 0u;
  *(_OWORD *)v52 = 0u;
  v51 = 0u;
  v50 = 0u;
  v49 = 0u;
  v48 = 0u;
  *(_OWORD *)&v47[32] = 0u;
  *(_OWORD *)&v47[16] = 0u;
  *(_OWORD *)v47 = 0u;
  v46 = 0u;
  v45 = 0u;
  v44 = 0u;
  v43 = 0u;
  v39 = 0u;
  v40 = 0u;
  v9 = a2[2];
  v10 = a2[3];
  v41[0] = vdupq_n_s64(1uLL);
  v41[1] = xmmword_1928DFC30;
  v42 = 1;
  *(_OWORD *)&v47[8] = v41[0];
  *(_OWORD *)&v47[24] = xmmword_1928DFC40;
  *(_QWORD *)&v47[40] = 2;
  *(_OWORD *)&v52[8] = v41[0];
  *(_OWORD *)&v52[24] = xmmword_1928DFC40;
  v64 = 0;
  *(_QWORD *)&v52[40] = 2;
  v12 = a2[4];
  v11 = a2[5];
  v13 = *a3;
  v14 = *a4;
  vtPixelTransferSession_PrepareOffsets(3uLL, a6, v41, a8, a7, &v39);
  if (v10 >= 2)
  {
    v15 = 0;
    v16 = *a8;
    v17 = a8[1];
    v18 = a8[2];
    v19 = v9 >> 1;
    v21 = *((_QWORD *)&v39 + 1);
    v20 = v40;
    v22 = (2 * v12) & 0xFFFFFFFFFFFFFFCLL;
    v23 = v13 + v22 + v14 * v11;
    v24 = 2 * *a8;
    v25 = v14 + v22;
    v26 = 2 * v14;
    if (v9 >> 1 <= 1)
      v19 = 1;
    v27 = v13 + v25 + v14 * v11;
    v28 = (_BYTE *)(v39 + 1);
    do
    {
      if (v9 >= 2)
      {
        v29 = 0;
        v30 = 0;
        v31 = v28;
        do
        {
          v32 = &v31[v16];
          v33 = *(_BYTE *)(v23 + v29 + 1);
          v34 = *(_BYTE *)(v23 + v29 + 2);
          v35 = *(_BYTE *)(v23 + v29 + 3);
          v36 = *(_BYTE *)(v27 + v29);
          v37 = *(_BYTE *)(v27 + v29 + 2);
          *(v31 - 1) = *(_BYTE *)(v23 + v29);
          *v31 = v34;
          v31 += 2;
          *(v32 - 1) = v36;
          *v32 = v37;
          *(_BYTE *)(v21 + v30) = v33;
          *(_BYTE *)(v20 + v30++) = v35;
          v29 += 4;
        }
        while (v19 != v30);
      }
      v21 += v17;
      v20 += v18;
      v23 += v26;
      ++v15;
      v27 += v26;
      v28 += v24;
    }
    while (v15 != v10 >> 1);
  }
  return 0;
}

uint64_t vt_Copy_yuvs_420v_vec(uint64_t a1, uint64_t a2, uint64_t *a3, const char **a4, _QWORD *a5, int8x16_t **a6)
{
  vt_Copy_yuvs_420v_arm(*a4, a6, a1, a2, *a3, a5);
  return 0;
}

uint64_t vt_CopyAvg_yuvs_420v(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  _BYTE *v32;
  _BYTE *v33;
  unsigned int v34;
  char v35;
  unsigned int v36;
  char v37;
  char v38;
  _OWORD v40[2];
  _OWORD v41[2];
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _BYTE v47[48];
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v64 = 0u;
  v65 = 0u;
  v62 = 0u;
  v63 = 0u;
  v60 = 0u;
  v61 = 0u;
  v58 = 0u;
  v59 = 0u;
  v56 = 0u;
  v57 = 0u;
  v55 = 0u;
  v54 = 0u;
  v53 = 0u;
  v52 = 0u;
  v51 = 0u;
  v50 = 0u;
  v49 = 0u;
  v48 = 0u;
  *(_OWORD *)&v47[32] = 0u;
  *(_OWORD *)&v47[16] = 0u;
  *(_OWORD *)v47 = 0u;
  v46 = 0u;
  v45 = 0u;
  v44 = 0u;
  v43 = 0u;
  memset(v40, 0, sizeof(v40));
  v9 = a2[2];
  v10 = a2[3];
  v41[0] = vdupq_n_s64(1uLL);
  v41[1] = xmmword_1928DFC30;
  v42 = 1;
  *(_OWORD *)&v47[8] = v41[0];
  *(_OWORD *)&v47[24] = xmmword_1928DFC50;
  v66 = 0;
  *(_QWORD *)&v47[40] = 2;
  v12 = a2[4];
  v11 = a2[5];
  v13 = *a3;
  v14 = *a4;
  vtPixelTransferSession_PrepareOffsets(2uLL, a6, v41, a8, a7, v40);
  if (v10 >= 2)
  {
    v15 = 0;
    v16 = a8[1];
    v17 = v10 >> 1;
    v18 = v9 >> 1;
    v19 = *((_QWORD *)&v40[0] + 1);
    v20 = *(_QWORD *)&v40[0];
    v21 = (2 * v12) & 0xFFFFFFFFFFFFFFCLL;
    v22 = v13 + v21 + v14 * v11;
    v23 = 2 * *a8;
    v24 = v14 + v21;
    v25 = 2 * v14;
    if (v9 >> 1 <= 1)
      v18 = 1;
    v26 = *a8 + *(_QWORD *)&v40[0] + 1;
    v27 = v13 + v24 + v14 * v11;
    do
    {
      if (v9 >= 2)
      {
        v28 = 0;
        v29 = 0;
        v30 = v18;
        do
        {
          v31 = (_BYTE *)(v20 + v29);
          v32 = (_BYTE *)(v26 + v29);
          v33 = (_BYTE *)(v19 + v29);
          v34 = (*(unsigned __int8 *)(v27 + v28 + 1) + *(unsigned __int8 *)(v22 + v28 + 1)) >> 1;
          v35 = *(_BYTE *)(v22 + v28 + 2);
          v36 = (*(unsigned __int8 *)(v27 + v28 + 3) + *(unsigned __int8 *)(v22 + v28 + 3)) >> 1;
          v37 = *(_BYTE *)(v27 + v28);
          v38 = *(_BYTE *)(v27 + v28 + 2);
          *v31 = *(_BYTE *)(v22 + v28);
          v31[1] = v35;
          *(v32 - 1) = v37;
          *v32 = v38;
          *v33 = v34;
          v33[1] = v36;
          v29 += 2;
          v28 += 4;
          --v30;
        }
        while (v30);
      }
      v20 += v23;
      v19 += v16;
      v22 += v25;
      ++v15;
      v26 += v23;
      v27 += v25;
    }
    while (v15 != v17);
  }
  return 0;
}

uint64_t vt_CopyDec_yuvs_420v(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  char v32;
  _BYTE *v33;
  _BYTE *v34;
  char v35;
  char v36;
  char v37;
  char v38;
  _OWORD v40[2];
  _OWORD v41[2];
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _BYTE v47[48];
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v64 = 0u;
  v65 = 0u;
  v62 = 0u;
  v63 = 0u;
  v60 = 0u;
  v61 = 0u;
  v58 = 0u;
  v59 = 0u;
  v56 = 0u;
  v57 = 0u;
  v55 = 0u;
  v54 = 0u;
  v53 = 0u;
  v52 = 0u;
  v51 = 0u;
  v50 = 0u;
  v49 = 0u;
  v48 = 0u;
  *(_OWORD *)&v47[32] = 0u;
  *(_OWORD *)&v47[16] = 0u;
  *(_OWORD *)v47 = 0u;
  v46 = 0u;
  v45 = 0u;
  v44 = 0u;
  v43 = 0u;
  memset(v40, 0, sizeof(v40));
  v9 = a2[2];
  v10 = a2[3];
  v41[0] = vdupq_n_s64(1uLL);
  v41[1] = xmmword_1928DFC30;
  v42 = 1;
  *(_OWORD *)&v47[8] = v41[0];
  *(_OWORD *)&v47[24] = xmmword_1928DFC50;
  v66 = 0;
  *(_QWORD *)&v47[40] = 2;
  v12 = a2[4];
  v11 = a2[5];
  v13 = *a3;
  v14 = *a4;
  vtPixelTransferSession_PrepareOffsets(2uLL, a6, v41, a8, a7, v40);
  if (v10 >= 2)
  {
    v15 = 0;
    v16 = a8[1];
    v17 = v10 >> 1;
    v18 = v9 >> 1;
    v19 = *((_QWORD *)&v40[0] + 1);
    v20 = *(_QWORD *)&v40[0];
    v21 = (2 * v12) & 0xFFFFFFFFFFFFFFCLL;
    v22 = v13 + v21 + v14 * v11;
    v23 = 2 * *a8;
    v24 = v14 + v21;
    v25 = 2 * v14;
    if (v9 >> 1 <= 1)
      v18 = 1;
    v26 = v13 + v24 + v14 * v11;
    v27 = *a8 + *(_QWORD *)&v40[0] + 1;
    do
    {
      if (v9 >= 2)
      {
        v28 = 0;
        v29 = 0;
        v30 = v18;
        do
        {
          v31 = (_BYTE *)(v20 + v28);
          v32 = *(_BYTE *)(v22 + v29 + 1);
          v33 = (_BYTE *)(v27 + v28);
          v34 = (_BYTE *)(v19 + v28);
          v35 = *(_BYTE *)(v22 + v29 + 2);
          v36 = *(_BYTE *)(v22 + v29 + 3);
          v37 = *(_BYTE *)(v26 + v29);
          v38 = *(_BYTE *)(v26 + v29 + 2);
          *v31 = *(_BYTE *)(v22 + v29);
          v31[1] = v35;
          *(v33 - 1) = v37;
          *v33 = v38;
          *v34 = v32;
          v34[1] = v36;
          v29 += 4;
          v28 += 2;
          --v30;
        }
        while (v30);
      }
      v20 += v23;
      v19 += v16;
      v22 += v25;
      ++v15;
      v26 += v25;
      v27 += v23;
    }
    while (v15 != v17);
  }
  return 0;
}

uint64_t vt_CopyAvg_yuvs_420f(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  _OWORD v41[2];
  _OWORD v42[2];
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _BYTE v48[48];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  v61 = 0u;
  v62 = 0u;
  v59 = 0u;
  v60 = 0u;
  v57 = 0u;
  v58 = 0u;
  v56 = 0u;
  v55 = 0u;
  v54 = 0u;
  v53 = 0u;
  v52 = 0u;
  v51 = 0u;
  v50 = 0u;
  v49 = 0u;
  *(_OWORD *)&v48[32] = 0u;
  *(_OWORD *)&v48[16] = 0u;
  *(_OWORD *)v48 = 0u;
  v47 = 0u;
  v46 = 0u;
  v45 = 0u;
  v44 = 0u;
  memset(v41, 0, sizeof(v41));
  v9 = a2[2];
  v10 = a2[3];
  v42[0] = vdupq_n_s64(1uLL);
  v42[1] = xmmword_1928DFC30;
  v43 = 1;
  *(_OWORD *)&v48[8] = v42[0];
  *(_OWORD *)&v48[24] = xmmword_1928DFC50;
  v67 = 0;
  *(_QWORD *)&v48[40] = 2;
  v12 = a2[4];
  v11 = a2[5];
  v13 = *a3;
  v14 = *a4;
  vtPixelTransferSession_PrepareOffsets(2uLL, a6, v42, a8, a7, v41);
  if (v10 >= 2)
  {
    v15 = 0;
    v16 = a8[1];
    v17 = v10 >> 1;
    v18 = v9 >> 1;
    v19 = (2 * v12) & 0xFFFFFFFFFFFFFFCLL;
    v20 = v13 + v19 + v14 * v11;
    v21 = *((_QWORD *)&v41[0] + 1);
    v22 = *(_QWORD *)&v41[0];
    v23 = 2 * *a8;
    v24 = v14 + v19;
    v25 = 2 * v14;
    if (v9 >> 1 <= 1)
      v18 = 1;
    v26 = *a8 + *(_QWORD *)&v41[0] + 1;
    v27 = v13 + v24 + v14 * v11;
    do
    {
      if (v9 >= 2)
      {
        v28 = 0;
        v29 = 0;
        v30 = v18;
        do
        {
          v31 = (_BYTE *)(v22 + v29);
          v32 = (_BYTE *)(v26 + v29);
          v33 = *(unsigned __int8 *)(v20 + v28 + 2);
          v34 = *(unsigned __int8 *)(v20 + v28 + 3);
          v35 = *(unsigned __int8 *)(v27 + v28 + 3);
          v36 = *(unsigned __int8 *)(v27 + v28);
          v37 = *(unsigned __int8 *)(v27 + v28 + 1) + (unint64_t)*(unsigned __int8 *)(v20 + v28 + 1);
          v38 = *(unsigned __int8 *)(v27 + v28 + 2);
          *v31 = sLumaTableVtoF[*(unsigned __int8 *)(v20 + v28)];
          v39 = (_BYTE *)(v21 + v29);
          v31[1] = sLumaTableVtoF[v33];
          *(v32 - 1) = sLumaTableVtoF[v36];
          *v32 = sLumaTableVtoF[v38];
          *v39 = sChromaTableVtoF[v37 >> 1];
          v39[1] = sChromaTableVtoF[(unint64_t)(v35 + v34) >> 1];
          v29 += 2;
          v28 += 4;
          --v30;
        }
        while (v30);
      }
      v22 += v23;
      v21 += v16;
      v20 += v25;
      ++v15;
      v26 += v23;
      v27 += v25;
    }
    while (v15 != v17);
  }
  return 0;
}

uint64_t vt_CopyDec_yuvs_420f(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  _BYTE *v38;
  _BYTE *v39;
  _OWORD v41[2];
  _OWORD v42[2];
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _BYTE v48[48];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  v61 = 0u;
  v62 = 0u;
  v59 = 0u;
  v60 = 0u;
  v57 = 0u;
  v58 = 0u;
  v56 = 0u;
  v55 = 0u;
  v54 = 0u;
  v53 = 0u;
  v52 = 0u;
  v51 = 0u;
  v50 = 0u;
  v49 = 0u;
  *(_OWORD *)&v48[32] = 0u;
  *(_OWORD *)&v48[16] = 0u;
  *(_OWORD *)v48 = 0u;
  v47 = 0u;
  v46 = 0u;
  v45 = 0u;
  v44 = 0u;
  memset(v41, 0, sizeof(v41));
  v9 = a2[2];
  v10 = a2[3];
  v42[0] = vdupq_n_s64(1uLL);
  v42[1] = xmmword_1928DFC30;
  v43 = 1;
  *(_OWORD *)&v48[8] = v42[0];
  *(_OWORD *)&v48[24] = xmmword_1928DFC50;
  v67 = 0;
  *(_QWORD *)&v48[40] = 2;
  v12 = a2[4];
  v11 = a2[5];
  v13 = *a3;
  v14 = *a4;
  vtPixelTransferSession_PrepareOffsets(2uLL, a6, v42, a8, a7, v41);
  if (v10 >= 2)
  {
    v15 = 0;
    v16 = a8[1];
    v17 = v10 >> 1;
    v18 = v9 >> 1;
    v19 = (2 * v12) & 0xFFFFFFFFFFFFFFCLL;
    v20 = v13 + v19 + v14 * v11;
    v21 = *((_QWORD *)&v41[0] + 1);
    v22 = *(_QWORD *)&v41[0];
    v23 = 2 * *a8;
    v24 = v14 + v19;
    v25 = 2 * v14;
    if (v9 >> 1 <= 1)
      v18 = 1;
    v26 = v13 + v24 + v14 * v11;
    v27 = *a8 + *(_QWORD *)&v41[0] + 1;
    do
    {
      if (v9 >= 2)
      {
        v28 = 0;
        v29 = 0;
        v30 = v18;
        do
        {
          v31 = (_BYTE *)(v22 + v28);
          v32 = *(unsigned __int8 *)(v20 + v29 + 1);
          v33 = *(unsigned __int8 *)(v20 + v29 + 2);
          v34 = *(unsigned __int8 *)(v20 + v29 + 3);
          v35 = *(unsigned __int8 *)(v26 + v29);
          v36 = *(unsigned __int8 *)(v26 + v29 + 2);
          *v31 = sLumaTableVtoF[*(unsigned __int8 *)(v20 + v29)];
          v37 = sLumaTableVtoF[v33];
          v38 = (_BYTE *)(v27 + v28);
          v31[1] = v37;
          *(v38 - 1) = sLumaTableVtoF[v35];
          v39 = (_BYTE *)(v21 + v28);
          *v38 = sLumaTableVtoF[v36];
          *v39 = sChromaTableVtoF[v32];
          v39[1] = sChromaTableVtoF[v34];
          v29 += 4;
          v28 += 2;
          --v30;
        }
        while (v30);
      }
      v22 += v23;
      v21 += v16;
      v20 += v25;
      ++v15;
      v26 += v25;
      v27 += v23;
    }
    while (v15 != v17);
  }
  return 0;
}

uint64_t vt_CopyAvg_yuvf_420v(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  _OWORD v41[2];
  _OWORD v42[2];
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _BYTE v48[48];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  v61 = 0u;
  v62 = 0u;
  v59 = 0u;
  v60 = 0u;
  v57 = 0u;
  v58 = 0u;
  v56 = 0u;
  v55 = 0u;
  v54 = 0u;
  v53 = 0u;
  v52 = 0u;
  v51 = 0u;
  v50 = 0u;
  v49 = 0u;
  *(_OWORD *)&v48[32] = 0u;
  *(_OWORD *)&v48[16] = 0u;
  *(_OWORD *)v48 = 0u;
  v47 = 0u;
  v46 = 0u;
  v45 = 0u;
  v44 = 0u;
  memset(v41, 0, sizeof(v41));
  v9 = a2[2];
  v10 = a2[3];
  v42[0] = vdupq_n_s64(1uLL);
  v42[1] = xmmword_1928DFC30;
  v43 = 1;
  *(_OWORD *)&v48[8] = v42[0];
  *(_OWORD *)&v48[24] = xmmword_1928DFC50;
  v67 = 0;
  *(_QWORD *)&v48[40] = 2;
  v12 = a2[4];
  v11 = a2[5];
  v13 = *a3;
  v14 = *a4;
  vtPixelTransferSession_PrepareOffsets(2uLL, a6, v42, a8, a7, v41);
  if (v10 >= 2)
  {
    v15 = 0;
    v16 = a8[1];
    v17 = v10 >> 1;
    v18 = v9 >> 1;
    v19 = (2 * v12) & 0xFFFFFFFFFFFFFFCLL;
    v20 = v13 + v19 + v14 * v11;
    v21 = *((_QWORD *)&v41[0] + 1);
    v22 = *(_QWORD *)&v41[0];
    v23 = 2 * *a8;
    v24 = v14 + v19;
    v25 = 2 * v14;
    if (v9 >> 1 <= 1)
      v18 = 1;
    v26 = *a8 + *(_QWORD *)&v41[0] + 1;
    v27 = v13 + v24 + v14 * v11;
    do
    {
      if (v9 >= 2)
      {
        v28 = 0;
        v29 = 0;
        v30 = v18;
        do
        {
          v31 = (_BYTE *)(v22 + v29);
          v32 = (_BYTE *)(v26 + v29);
          v33 = *(unsigned __int8 *)(v20 + v28 + 2);
          v34 = *(unsigned __int8 *)(v20 + v28 + 3);
          v35 = *(unsigned __int8 *)(v27 + v28 + 3);
          v36 = *(unsigned __int8 *)(v27 + v28);
          v37 = *(unsigned __int8 *)(v27 + v28 + 1) + (unint64_t)*(unsigned __int8 *)(v20 + v28 + 1);
          v38 = *(unsigned __int8 *)(v27 + v28 + 2);
          *v31 = sLumaTableFtoV[*(unsigned __int8 *)(v20 + v28)];
          v39 = (_BYTE *)(v21 + v29);
          v31[1] = sLumaTableFtoV[v33];
          *(v32 - 1) = sLumaTableFtoV[v36];
          *v32 = sLumaTableFtoV[v38];
          *v39 = sChromaTableFtoV[v37 >> 1];
          v39[1] = sChromaTableFtoV[(unint64_t)(v35 + v34) >> 1];
          v29 += 2;
          v28 += 4;
          --v30;
        }
        while (v30);
      }
      v22 += v23;
      v21 += v16;
      v20 += v25;
      ++v15;
      v26 += v23;
      v27 += v25;
    }
    while (v15 != v17);
  }
  return 0;
}

uint64_t vt_CopyDec_yuvf_420v(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  _BYTE *v38;
  _BYTE *v39;
  _OWORD v41[2];
  _OWORD v42[2];
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _BYTE v48[48];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  v61 = 0u;
  v62 = 0u;
  v59 = 0u;
  v60 = 0u;
  v57 = 0u;
  v58 = 0u;
  v56 = 0u;
  v55 = 0u;
  v54 = 0u;
  v53 = 0u;
  v52 = 0u;
  v51 = 0u;
  v50 = 0u;
  v49 = 0u;
  *(_OWORD *)&v48[32] = 0u;
  *(_OWORD *)&v48[16] = 0u;
  *(_OWORD *)v48 = 0u;
  v47 = 0u;
  v46 = 0u;
  v45 = 0u;
  v44 = 0u;
  memset(v41, 0, sizeof(v41));
  v9 = a2[2];
  v10 = a2[3];
  v42[0] = vdupq_n_s64(1uLL);
  v42[1] = xmmword_1928DFC30;
  v43 = 1;
  *(_OWORD *)&v48[8] = v42[0];
  *(_OWORD *)&v48[24] = xmmword_1928DFC50;
  v67 = 0;
  *(_QWORD *)&v48[40] = 2;
  v12 = a2[4];
  v11 = a2[5];
  v13 = *a3;
  v14 = *a4;
  vtPixelTransferSession_PrepareOffsets(2uLL, a6, v42, a8, a7, v41);
  if (v10 >= 2)
  {
    v15 = 0;
    v16 = a8[1];
    v17 = v10 >> 1;
    v18 = v9 >> 1;
    v19 = (2 * v12) & 0xFFFFFFFFFFFFFFCLL;
    v20 = v13 + v19 + v14 * v11;
    v21 = *((_QWORD *)&v41[0] + 1);
    v22 = *(_QWORD *)&v41[0];
    v23 = 2 * *a8;
    v24 = v14 + v19;
    v25 = 2 * v14;
    if (v9 >> 1 <= 1)
      v18 = 1;
    v26 = v13 + v24 + v14 * v11;
    v27 = *a8 + *(_QWORD *)&v41[0] + 1;
    do
    {
      if (v9 >= 2)
      {
        v28 = 0;
        v29 = 0;
        v30 = v18;
        do
        {
          v31 = (_BYTE *)(v22 + v28);
          v32 = *(unsigned __int8 *)(v20 + v29 + 1);
          v33 = *(unsigned __int8 *)(v20 + v29 + 2);
          v34 = *(unsigned __int8 *)(v20 + v29 + 3);
          v35 = *(unsigned __int8 *)(v26 + v29);
          v36 = *(unsigned __int8 *)(v26 + v29 + 2);
          *v31 = sLumaTableFtoV[*(unsigned __int8 *)(v20 + v29)];
          v37 = sLumaTableFtoV[v33];
          v38 = (_BYTE *)(v27 + v28);
          v31[1] = v37;
          *(v38 - 1) = sLumaTableFtoV[v35];
          v39 = (_BYTE *)(v21 + v28);
          *v38 = sLumaTableFtoV[v36];
          *v39 = sChromaTableFtoV[v32];
          v39[1] = sChromaTableFtoV[v34];
          v29 += 4;
          v28 += 2;
          --v30;
        }
        while (v30);
      }
      v22 += v23;
      v21 += v16;
      v20 += v25;
      ++v15;
      v26 += v25;
      v27 += v23;
    }
    while (v15 != v17);
  }
  return 0;
}

vImage_Error vt_VImage_Setup_yuvf_32ARGB(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  vImage_YpCbCrToARGB *v17;
  __int128 v18;
  const vImage_YpCbCrToARGBMatrix **v19;
  const vImage_YpCbCrToARGBMatrix *DefaultYpCbCrToARGBMatrixWithDimensionHint;
  int v21;
  vImage_Error result;
  __int128 v23;
  int v24;
  vImage_YpCbCrPixelRange pixelRange;

  v23 = 0uLL;
  v24 = 0;
  v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_QWORD *)&v18 = 255;
  *((_QWORD *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFC60;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v23 = xmmword_1928DFC00;
      v21 = 1072585656;
    }
    else if (FigCFEqual())
    {
      v23 = xmmword_1928DFC10;
      v21 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDA8];
        goto LABEL_3;
      }
      v23 = xmmword_1928DFC20;
      v21 = 1072746935;
    }
    v24 = v21;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v23;
    goto LABEL_11;
  }
  v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDB0];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v19;
LABEL_11:
  result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage422YpCbYpCr8, kvImageARGB8888, 0);
  *(_QWORD *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_yuvf_32ARGB;
  *a11 = vt_VImage_Cleanup_yuvf_32ARGB;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_yuvf_32BGRA(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  vImage_YpCbCrToARGB *v17;
  __int128 v18;
  const vImage_YpCbCrToARGBMatrix **v19;
  const vImage_YpCbCrToARGBMatrix *DefaultYpCbCrToARGBMatrixWithDimensionHint;
  int v21;
  vImage_Error result;
  __int128 v23;
  int v24;
  vImage_YpCbCrPixelRange pixelRange;

  v23 = 0uLL;
  v24 = 0;
  v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_QWORD *)&v18 = 255;
  *((_QWORD *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFC60;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v23 = xmmword_1928DFC00;
      v21 = 1072585656;
    }
    else if (FigCFEqual())
    {
      v23 = xmmword_1928DFC10;
      v21 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDA8];
        goto LABEL_3;
      }
      v23 = xmmword_1928DFC20;
      v21 = 1072746935;
    }
    v24 = v21;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v23;
    goto LABEL_11;
  }
  v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDB0];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v19;
LABEL_11:
  result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage422YpCbYpCr8, kvImageARGB8888, 0);
  *(_QWORD *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_yuvf_32BGRA;
  *a11 = vt_VImage_Cleanup_yuvf_32BGRA;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_y420_32ARGB(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint8_t a5, vImage_YpCbCrToARGB **a6, _QWORD *a7, void (**a8)(void **a1))
{
  vImage_YpCbCrToARGB *v16;
  __int128 v17;
  const vImage_YpCbCrToARGBMatrix **v18;
  const vImage_YpCbCrToARGBMatrix *DefaultYpCbCrToARGBMatrixWithDimensionHint;
  int v20;
  vImage_Error result;
  __int128 v22;
  int v23;
  vImage_YpCbCrPixelRange pixelRange;

  v22 = 0uLL;
  v23 = 0;
  v16 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v16->opaque = 0u;
  *(_OWORD *)&v16->opaque[16] = 0u;
  *(_OWORD *)&v16->opaque[32] = 0u;
  *(_OWORD *)&v16->opaque[48] = 0u;
  *(_OWORD *)&v16->opaque[64] = 0u;
  *(_OWORD *)&v16->opaque[80] = 0u;
  *(_OWORD *)&v16->opaque[96] = 0u;
  *(_OWORD *)&v16->opaque[112] = 0u;
  *(_OWORD *)v16[1].opaque = 0u;
  *(_OWORD *)&v16[1].opaque[16] = 0u;
  *(_OWORD *)&v16[1].opaque[32] = 0u;
  *(_OWORD *)&v16[1].opaque[48] = 0u;
  *(_OWORD *)&v16[1].opaque[64] = 0u;
  *(_OWORD *)&v16[1].opaque[80] = 0u;
  *(_OWORD *)&v16[1].opaque[96] = 0u;
  *(_OWORD *)&v16[1].opaque[112] = 0u;
  *(_OWORD *)v16[2].opaque = 0u;
  *(_OWORD *)&v16[2].opaque[16] = 0u;
  *(_OWORD *)&v16[2].opaque[32] = 0u;
  *(_QWORD *)&v17 = 255;
  *((_QWORD *)&v17 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFBF0;
  *(_OWORD *)&pixelRange.YpMax = v17;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v22 = xmmword_1928DFC00;
      v20 = 1072585656;
    }
    else if (FigCFEqual())
    {
      v22 = xmmword_1928DFC10;
      v20 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDA8];
        goto LABEL_3;
      }
      v22 = xmmword_1928DFC20;
      v20 = 1072746935;
    }
    v23 = v20;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v22;
    goto LABEL_11;
  }
  v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDB0];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v18;
LABEL_11:
  result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v16, kvImage420Yp8_Cb8_Cr8, kvImageARGB8888, 0);
  *(_QWORD *)&v16[2].opaque[40] = a4;
  v16[2].opaque[32] = a5;
  *a7 = vt_VImage_Copy_y420_32ARGB;
  *a8 = vt_VImage_Cleanup_y420_32ARGB;
  *a6 = v16;
  return result;
}

vImage_Error vt_VImage_Setup_y420_32BGRA(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  vImage_YpCbCrToARGB *v17;
  __int128 v18;
  const vImage_YpCbCrToARGBMatrix **v19;
  const vImage_YpCbCrToARGBMatrix *DefaultYpCbCrToARGBMatrixWithDimensionHint;
  int v21;
  vImage_Error result;
  __int128 v23;
  int v24;
  vImage_YpCbCrPixelRange pixelRange;

  v23 = 0uLL;
  v24 = 0;
  v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_QWORD *)&v18 = 255;
  *((_QWORD *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFBF0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v23 = xmmword_1928DFC00;
      v21 = 1072585656;
    }
    else if (FigCFEqual())
    {
      v23 = xmmword_1928DFC10;
      v21 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDA8];
        goto LABEL_3;
      }
      v23 = xmmword_1928DFC20;
      v21 = 1072746935;
    }
    v24 = v21;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v23;
    goto LABEL_11;
  }
  v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDB0];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v19;
LABEL_11:
  result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage420Yp8_Cb8_Cr8, kvImageARGB8888, 0);
  *(_QWORD *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_y420_32BGRA;
  *a11 = vt_VImage_Cleanup_y420_32BGRA;
  *a8 = v17;
  return result;
}

uint64_t vt_Copy_y420_2vuy(unint64_t a1, unint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  _BYTE *v21;
  char *v22;
  _BYTE *v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;

  if (a2 >= 2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = a3[1];
    v9 = a3[2];
    v10 = *a5;
    v11 = a2 >> 1;
    v12 = a1 >> 1;
    v13 = (_BYTE *)*a6;
    v15 = a4[1];
    v14 = a4[2];
    v16 = *a4;
    v17 = 2 * *a5;
    if (a1 >> 1 <= 1)
      v12 = 1;
    v18 = (char *)(v16 + 1);
    do
    {
      if (a1 >= 2)
      {
        v19 = 0;
        v20 = v18;
        v21 = v13;
        do
        {
          v22 = &v20[v7];
          v23 = &v21[v10];
          v24 = *(_BYTE *)(v15 + v19);
          v25 = *(_BYTE *)(v14 + v19);
          v26 = *(v20 - 1);
          v27 = *v20;
          v20 += 2;
          *v21 = v24;
          v21[1] = v26;
          v21[2] = v25;
          v21[3] = v27;
          v28 = *(v22 - 1);
          LOBYTE(v22) = *v22;
          *v23 = v24;
          v23[1] = v28;
          v23[2] = v25;
          v23[3] = (_BYTE)v22;
          v21 += 4;
          ++v19;
        }
        while (v12 != v19);
      }
      v15 += v8;
      v14 += v9;
      v13 += v17;
      ++v6;
      v18 += 2 * v7;
    }
    while (v6 != v11);
  }
  return 0;
}

uint64_t vt_Copy_y420_yuvs(unint64_t a1, unint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  _BYTE *v21;
  char *v22;
  _BYTE *v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;

  if (a2 >= 2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = a3[1];
    v9 = a3[2];
    v10 = *a5;
    v11 = a2 >> 1;
    v12 = a1 >> 1;
    v13 = (_BYTE *)*a6;
    v15 = a4[1];
    v14 = a4[2];
    v16 = *a4;
    v17 = 2 * *a5;
    if (a1 >> 1 <= 1)
      v12 = 1;
    v18 = (char *)(v16 + 1);
    do
    {
      if (a1 >= 2)
      {
        v19 = 0;
        v20 = v18;
        v21 = v13;
        do
        {
          v22 = &v20[v7];
          v23 = &v21[v10];
          v24 = *(_BYTE *)(v15 + v19);
          v25 = *(_BYTE *)(v14 + v19);
          v26 = *(v20 - 1);
          v27 = *v20;
          v20 += 2;
          *v21 = v26;
          v21[1] = v24;
          v21[2] = v27;
          v21[3] = v25;
          v28 = *(v22 - 1);
          LOBYTE(v22) = *v22;
          *v23 = v28;
          v23[1] = v24;
          v23[2] = (_BYTE)v22;
          v23[3] = v25;
          v21 += 4;
          ++v19;
        }
        while (v12 != v19);
      }
      v15 += v8;
      v14 += v9;
      v13 += v17;
      ++v6;
      v18 += 2 * v7;
    }
    while (v6 != v11);
  }
  return 0;
}

uint64_t vt_Copy_y420_420v(size_t __n, unint64_t a2, uint64_t *a3, char **a4, uint64_t *a5, char **a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char v20;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (a2 >= 2)
  {
    v7 = 0;
    v8 = *a3;
    v24 = a3[2];
    v25 = a3[1];
    v9 = *a5;
    v22 = a2 >> 1;
    v23 = a5[1];
    v10 = *a6;
    v11 = a6[1];
    v13 = a4[1];
    v12 = a4[2];
    if (__n >> 1 <= 1)
      v14 = 1;
    else
      v14 = __n >> 1;
    v15 = *a4;
    do
    {
      memcpy(v10, v15, __n);
      v16 = &v15[v8];
      v17 = &v10[v9];
      memcpy(v17, v16, __n);
      if (__n >= 2)
      {
        v18 = 0;
        v19 = v11;
        do
        {
          v20 = v12[v18];
          *v19 = v13[v18];
          v19[1] = v20;
          v19 += 2;
          ++v18;
        }
        while (v14 != v18);
      }
      v15 = &v16[v8];
      v10 = &v17[v9];
      v13 += v25;
      v12 += v24;
      v11 += v23;
      ++v7;
    }
    while (v7 != v22);
  }
  return 0;
}

uint64_t vt_Copy_y420_420f(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  uint64_t i;
  unsigned __int8 *v20;
  _BYTE *v21;
  unsigned __int8 *v22;
  _BYTE *v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;

  if (a2 >= 2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = a3[1];
    v9 = a3[2];
    v10 = *a5;
    v11 = a5[1];
    v12 = a1 >> 1;
    v13 = (_BYTE *)*a6;
    v14 = (_BYTE *)a6[1];
    v16 = a4[1];
    v17 = a4[2];
    if (a1 >> 1 <= 1)
      v12 = 1;
    v18 = *a4;
    do
    {
      if (a1)
      {
        for (i = 0; i != a1; ++i)
          v13[i] = sLumaTableVtoF[v18[i]];
        v20 = &v18[v7];
        v21 = &v13[v10];
        v22 = v20;
        v23 = v21;
        v24 = a1;
        do
        {
          v25 = *v22++;
          *v23++ = sLumaTableVtoF[v25];
          --v24;
        }
        while (v24);
        v18 = &v20[v7];
        v13 = &v21[v10];
        if (a1 >= 2)
        {
          v26 = 0;
          v27 = v14;
          do
          {
            v28 = v17[v26];
            *v27 = sChromaTableVtoF[v16[v26]];
            v27[1] = sChromaTableVtoF[v28];
            v27 += 2;
            ++v26;
          }
          while (v12 != v26);
        }
      }
      else
      {
        v18 += v7 + v7;
        v13 += v10 + v10;
      }
      v16 += v8;
      v17 += v9;
      v14 += v11;
      ++v6;
    }
    while (v6 != a2 >> 1);
  }
  return 0;
}

uint64_t vt_Copy_y420_444v(size_t a1, unint64_t a2, _QWORD *a3, char **a4, uint64_t *a5, char **a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _BYTE *v18;
  char v19;
  char v20;
  _BYTE *v21;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;

  if (a2 >= 2)
  {
    v6 = 0;
    v27 = a3[2];
    v7 = *a5;
    v8 = a5[1];
    v24 = a3[1];
    v25 = a2 >> 1;
    v9 = *a6;
    v10 = a4[1];
    v11 = a4[2];
    v12 = *a4;
    v13 = &(*a4)[*a3];
    v23 = 2 * *a3;
    if (a1 >> 1 <= 1)
      v14 = 1;
    else
      v14 = a1 >> 1;
    v15 = (uint64_t)(a6[1] + 1);
    v26 = *a5;
    do
    {
      v29 = v6;
      memcpy(v9, v12, a1);
      v16 = &v9[v7];
      memcpy(v16, v13, a1);
      if (a1 >= 2)
      {
        v17 = 0;
        v18 = (_BYTE *)v15;
        do
        {
          v19 = v10[v17];
          v20 = v11[v17];
          *(v18 - 1) = v19;
          *v18 = v20;
          v18[1] = v19;
          v18[2] = v20;
          v21 = &v18[v8];
          *(v21 - 1) = v19;
          *v21 = v20;
          v21[1] = v19;
          v21[2] = v20;
          ++v17;
          v18 += 4;
        }
        while (v14 != v17);
      }
      v12 += v23;
      v13 += v23;
      v7 = v26;
      v9 = &v16[v26];
      v10 += v24;
      v11 += v27;
      v6 = v29 + 1;
      v15 += 2 * v8;
    }
    while (v29 + 1 != v25);
  }
  return 0;
}

uint64_t vt_Copy_y420_x422(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _WORD *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t i;
  uint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  _WORD *v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  __int16 v47;
  __int16 v48;
  BOOL v49;
  uint64_t j;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  _WORD *v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  __int16 v57;
  __int16 v58;
  _WORD *v59;
  uint64_t v60;
  __int16 v61;
  __int16 v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  __int16 v66;
  __int16 v67;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = v12 & 0xFFFFFFFE;
  v14 = v8 + v12;
  v15 = (v8 + v12) & 1;
  v16 = a4[1];
  v17 = a4[2];
  v18 = v12 >> 1;
  v19 = (unsigned __int8 *)(a3[1] + v16 * v18 + ((unint64_t)(v10 + v9) >> 1));
  v20 = (unsigned __int8 *)(a3[2] + v17 * v18 + ((unint64_t)(v10 + v9) >> 1));
  v21 = *(_QWORD *)(a6 + 24);
  v22 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v23 = *(_QWORD *)(a6 + 40);
  v24 = a8[1];
  v25 = (_WORD *)(a7[1] + v24 * v23 + ((2 * v22) & 0x7FFFFFFFFFFFFFFELL));
  v26 = v11 - (v10 + v9);
  v27 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v22;
  if (v26 < v27)
    v27 = v26;
  v28 = v14 - v13 + v15;
  if (v28 >= v21)
    v28 = v21;
  if (v28)
  {
    v29 = 0;
    v30 = *a4;
    v31 = *a8;
    v32 = *a3 + *a4 * v13;
    if (v13 >= v12)
      v33 = 0;
    else
      v33 = *a4;
    v34 = v32 + v10 + v9 + v33;
    v35 = *a7 + v31 * v23 + 2 * v22;
    do
    {
      if (v27)
      {
        for (i = 0; i != v27; ++i)
          *(_WORD *)(v35 + 2 * i) = *(unsigned __int8 *)(v34 + i) << 8;
      }
      v34 += v30;
      v35 += v31;
      ++v29;
    }
    while (v29 != v28);
  }
  v37 = v12 & 1;
  if (v28 >> 1 >= (v28 - v37) >> 1)
    v38 = (v28 - (v12 & 1)) >> 1;
  else
    v38 = v28 >> 1;
  v39 = v9;
  v40 = v27 >> 1;
  if (v27 >> 1 >= (v27 - v10) >> 1)
    v40 = (v27 - v10) >> 1;
  if ((v12 & 1) != 0)
  {
    v41 = v19;
    if ((v39 & 1) != 0)
    {
      v41 = v19 + 1;
      v42 = v20 + 1;
      v44 = *v20 << 8;
      *v25 = *v19 << 8;
      v25[1] = v44;
      v43 = v25 + 2;
      if (!v40)
      {
LABEL_27:
        v19 += v16;
        v20 += v17;
        v25 = (_WORD *)((char *)v25 + v24);
        goto LABEL_28;
      }
    }
    else
    {
      v42 = v20;
      v43 = v25;
      if (!v40)
        goto LABEL_27;
    }
    v45 = -(uint64_t)v40;
    do
    {
      v47 = *v41++;
      v46 = v47;
      v48 = *v42++;
      *v43 = v46 << 8;
      v43[1] = v48 << 8;
      v43 += 2;
      v49 = __CFADD__(v45++, 1);
    }
    while (!v49);
    goto LABEL_27;
  }
LABEL_28:
  if (v38)
  {
    for (j = 0; j != v38; ++j)
    {
      v51 = v19;
      v52 = v20;
      v53 = v25;
      if ((v39 & 1) != 0)
      {
        v51 = v19 + 1;
        v52 = v20 + 1;
        v54 = *v20 << 8;
        *v25 = *v19 << 8;
        v25[1] = v54;
        v53 = v25 + 2;
      }
      if (v40)
      {
        v55 = -(uint64_t)v40;
        do
        {
          v57 = *v51++;
          v56 = v57;
          v58 = *v52++;
          v56 <<= 8;
          *v53 = v56;
          v53[1] = v58 << 8;
          v59 = (_WORD *)((char *)v53 + v24);
          *v59 = v56;
          v59[1] = v58 << 8;
          v53 += 2;
          v49 = __CFADD__(v55++, 1);
        }
        while (!v49);
      }
      v19 += v16;
      v20 += v17;
      v25 += v24;
    }
    v60 = 2 * v38;
  }
  else
  {
    v60 = 0;
  }
  if ((v60 | (unint64_t)v37) < v28)
  {
    if ((v39 & 1) != 0)
    {
      v62 = *v19++;
      v61 = v62;
      v63 = *v20++;
      *v25 = v61 << 8;
      v25[1] = v63 << 8;
      v25 += 2;
    }
    if (v40)
    {
      v64 = -(uint64_t)v40;
      do
      {
        v66 = *v19++;
        v65 = v66;
        v67 = *v20++;
        *v25 = v65 << 8;
        v25[1] = v67 << 8;
        v25 += 2;
        v49 = __CFADD__(v64++, 1);
      }
      while (!v49);
    }
  }
  return 0;
}

uint64_t vt_Copy_y420_xf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _WORD *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t i;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  _WORD *v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  BOOL v52;
  uint64_t j;
  unsigned __int8 *v54;
  unsigned __int8 *v55;
  _WORD *v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  int v64;
  int v65;
  _WORD *v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = v12 & 0xFFFFFFFE;
  v14 = v8 + v12;
  v15 = (v8 + v12) & 1;
  v16 = a4[1];
  v17 = a4[2];
  v18 = v12 >> 1;
  v19 = (unsigned __int8 *)(a3[1] + v16 * v18 + ((unint64_t)(v10 + v9) >> 1));
  v20 = (unsigned __int8 *)(a3[2] + v17 * v18 + ((unint64_t)(v10 + v9) >> 1));
  v21 = *(_QWORD *)(a6 + 24);
  v22 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v23 = *(_QWORD *)(a6 + 40);
  v24 = a8[1];
  v25 = (_WORD *)(a7[1] + v24 * v23 + ((2 * v22) & 0x7FFFFFFFFFFFFFFELL));
  v26 = v11 - (v10 + v9);
  v27 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v22;
  if (v26 < v27)
    v27 = v26;
  v28 = v14 - v13 + v15;
  if (v28 >= v21)
    v28 = v21;
  if (v28)
  {
    v29 = 0;
    v30 = *a4;
    v31 = *a8;
    v32 = *a3 + *a4 * v13;
    if (v13 >= v12)
      v33 = 0;
    else
      v33 = *a4;
    v34 = v32 + v10 + v9 + v33;
    v35 = *a7 + v31 * v23 + 2 * v22;
    do
    {
      if (v27)
      {
        for (i = 0; i != v27; ++i)
        {
          v37 = *(unsigned __int8 *)(v34 + i);
          if (v37 >= 0xEB)
            v37 = 235;
          if (v37 <= 0x10)
            v37 = 16;
          *(_WORD *)(v35 + 2 * i) = ((((725633745 * (unint64_t)(1023 * v37 - 16368)) >> 32)
                                                  + ((1023 * v37
                                                                  - 16368
                                                                  - ((725633745 * (unint64_t)(1023 * v37 - 16368)) >> 32)) >> 1)) >> 1) & 0xFFC0;
        }
      }
      v34 += v30;
      v35 += v31;
      ++v29;
    }
    while (v29 != v28);
  }
  v38 = v12 & 1;
  if (v28 >> 1 >= (v28 - v38) >> 1)
    v39 = (v28 - (v12 & 1)) >> 1;
  else
    v39 = v28 >> 1;
  v40 = v9;
  v41 = v27 >> 1;
  if (v27 >> 1 >= (v27 - v10) >> 1)
    v41 = (v27 - v10) >> 1;
  if ((v12 & 1) != 0)
  {
    v42 = v19;
    if ((v40 & 1) != 0)
    {
      v42 = v19 + 1;
      v45 = *v19;
      v43 = v20 + 1;
      v46 = *v20;
      if (v45 >= 0xF0)
        v45 = 240;
      if (v45 <= 0x10)
        v45 = 16;
      if (v46 >= 0xF0)
        v46 = 240;
      if (v46 <= 0x10)
        v46 = 16;
      *v25 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v45 - 16368) >> 5)) >> 32) << 6;
      v25[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v46 - 16368) >> 5)) >> 32) << 6;
      v44 = v25 + 2;
      if (!v41)
        goto LABEL_47;
    }
    else
    {
      v43 = v20;
      v44 = v25;
      if (!v41)
      {
LABEL_47:
        v19 += v16;
        v20 += v17;
        v25 = (_WORD *)((char *)v25 + v24);
        goto LABEL_48;
      }
    }
    v47 = -(uint64_t)v41;
    do
    {
      v49 = *v42++;
      v48 = v49;
      v51 = *v43++;
      v50 = v51;
      if (v48 >= 0xF0)
        v48 = 240;
      if (v48 <= 0x10)
        v48 = 16;
      if (v50 >= 0xF0)
        v50 = 240;
      if (v50 <= 0x10)
        v50 = 16;
      *v44 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v48 - 16368) >> 5)) >> 32) << 6;
      v44[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v50 - 16368) >> 5)) >> 32) << 6;
      v44 += 2;
      v52 = __CFADD__(v47++, 1);
    }
    while (!v52);
    goto LABEL_47;
  }
LABEL_48:
  if (v39)
  {
    for (j = 0; j != v39; ++j)
    {
      v54 = v19;
      v55 = v20;
      v56 = v25;
      if ((v40 & 1) != 0)
      {
        v54 = v19 + 1;
        v57 = *v19;
        v55 = v20 + 1;
        v58 = *v20;
        if (v57 >= 0xF0)
          v57 = 240;
        if (v57 <= 0x10)
          v57 = 16;
        if (v58 >= 0xF0)
          v58 = 240;
        if (v58 <= 0x10)
          v58 = 16;
        *v25 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v57 - 16368) >> 5)) >> 32) << 6;
        v25[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v58 - 16368) >> 5)) >> 32) << 6;
        v56 = v25 + 2;
      }
      if (v41)
      {
        v59 = -(uint64_t)v41;
        do
        {
          v61 = *v54++;
          v60 = v61;
          v63 = *v55++;
          v62 = v63;
          if (v60 >= 0xF0)
            v60 = 240;
          if (v60 <= 0x10)
            v60 = 16;
          if (v62 >= 0xF0)
            v62 = 240;
          if (v62 <= 0x10)
            v62 = 16;
          v64 = (613566757 * (unint64_t)((1023 * v60 - 16368) >> 5)) >> 32 << 6;
          *v56 = v64;
          v65 = (613566757 * (unint64_t)((1023 * v62 - 16368) >> 5)) >> 32 << 6;
          v56[1] = v65;
          v66 = (_WORD *)((char *)v56 + v24);
          *v66 = v64;
          v66[1] = v65;
          v56 += 2;
          v52 = __CFADD__(v59++, 1);
        }
        while (!v52);
      }
      v19 += v16;
      v20 += v17;
      v25 += v24;
    }
    v67 = 2 * v39;
  }
  else
  {
    v67 = 0;
  }
  if ((v67 | (unint64_t)v38) < v28)
  {
    if ((v40 & 1) != 0)
    {
      v69 = *v19++;
      v68 = v69;
      v71 = *v20++;
      v70 = v71;
      if (v68 >= 0xF0)
        v68 = 240;
      if (v68 <= 0x10)
        v68 = 16;
      if (v70 >= 0xF0)
        v70 = 240;
      if (v70 <= 0x10)
        v70 = 16;
      *v25 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v68 - 16368) >> 5)) >> 32) << 6;
      v25[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v70 - 16368) >> 5)) >> 32) << 6;
      v25 += 2;
    }
    if (v41)
    {
      v72 = -(uint64_t)v41;
      do
      {
        v74 = *v19++;
        v73 = v74;
        v76 = *v20++;
        v75 = v76;
        if (v73 >= 0xF0)
          v73 = 240;
        if (v73 <= 0x10)
          v73 = 16;
        if (v75 >= 0xF0)
          v75 = 240;
        if (v75 <= 0x10)
          v75 = 16;
        *v25 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v73 - 16368) >> 5)) >> 32) << 6;
        v25[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v75 - 16368) >> 5)) >> 32) << 6;
        v25 += 2;
        v52 = __CFADD__(v72++, 1);
      }
      while (!v52);
    }
  }
  return 0;
}

uint64_t vt_Copy_v2a8_y416(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  __int16 v28;
  unsigned __int8 *v29;
  __int16 v30;
  __int16 v31;
  _WORD *v32;
  __int16 v33;

  v8 = a2[4] & 0xFFFFFFFELL;
  v9 = a2[2] + a2[4] - v8 + ((a2[2] + a2[4]) & 1);
  if (v9 >= a6[2])
    v9 = a6[2];
  if (a2[3] >= a6[3])
    v10 = a6[3];
  else
    v10 = a2[3];
  if (v10)
  {
    v11 = 0;
    v13 = a4[1];
    v12 = a4[2];
    v14 = *a4;
    v15 = *a8;
    v16 = *a7 + *a8 * a6[5] + 2 * a6[4];
    v17 = a2[5];
    v18 = *a3;
    v19 = a3[1] + v13 * v17;
    v20 = a3[2] + v12 * v17;
    v21 = v18 + *a4 * v17;
    v22 = (unsigned __int8 *)(v19 + v8);
    v23 = v20 + v8;
    v24 = v21 + v8;
    do
    {
      if (v9)
      {
        v25 = 0;
        v26 = 0;
        v27 = 0;
        v28 = 0;
        v29 = v22;
        do
        {
          if ((v26 & 1) == 0)
          {
            v30 = *v29;
            v31 = v29[1];
            v29 += 2;
            v28 = v30 << 8;
            v27 = v31 << 8;
          }
          v32 = (_WORD *)(v16 + v25);
          v33 = *(unsigned __int8 *)(v24 + v26) << 8;
          *v32 = *(unsigned __int8 *)(v23 + v26) | (*(unsigned __int8 *)(v23 + v26) << 8);
          v32[1] = v33;
          v32[2] = v28;
          v32[3] = v27;
          ++v26;
          v25 += 8;
        }
        while (v9 != v26);
      }
      v24 += v14;
      v16 += v15;
      v22 += v13;
      v23 += v12;
      ++v11;
    }
    while (v11 != v10);
  }
  return 0;
}

uint64_t vt_Copy_v2a8_y408(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  char *v29;
  char v30;
  _BYTE *v31;

  v8 = a2[4] & 0xFFFFFFFELL;
  v9 = a2[2] + a2[4] - v8 + ((a2[2] + a2[4]) & 1);
  if (v9 >= a6[2])
    v9 = a6[2];
  if (a2[3] >= a6[3])
    v10 = a6[3];
  else
    v10 = a2[3];
  if (v10)
  {
    v11 = 0;
    v13 = a4[1];
    v12 = a4[2];
    v14 = *a4;
    v15 = *a8;
    v16 = *a7 + *a8 * a6[5] + a6[4];
    v17 = a2[5];
    v18 = *a3;
    v19 = a3[1] + v13 * v17;
    v20 = a3[2] + v12 * v17;
    v21 = v18 + *a4 * v17;
    v22 = (char *)(v19 + v8);
    v23 = v20 + v8;
    v24 = v21 + v8;
    do
    {
      if (v9)
      {
        v25 = 0;
        v26 = 0;
        v27 = 0;
        v28 = 0;
        v29 = v22;
        do
        {
          if ((v26 & 1) == 0)
          {
            v28 = *v29;
            v27 = v29[1];
            v29 += 2;
          }
          v30 = *(_BYTE *)(v24 + v26);
          v31 = (_BYTE *)(v16 + v25);
          *v31 = *(_BYTE *)(v23 + v26);
          v31[1] = v30;
          v31[2] = v28;
          v31[3] = v27;
          ++v26;
          v25 += 4;
        }
        while (v9 != v26);
      }
      v24 += v14;
      v16 += v15;
      v22 += v13;
      v23 += v12;
      ++v11;
    }
    while (v11 != v10);
  }
  return 0;
}

uint64_t vt_Copy_422v_v216(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t i;
  _WORD *v22;
  __int16 v23;
  __int16 v24;
  __int16 v25;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a4;
    v14 = a4[1];
    v15 = *a8;
    v16 = *a7 + *a8 * *(_QWORD *)(a6 + 40) + 2 * v10;
    v17 = *(_QWORD *)(a2 + 40);
    v18 = a3[1] + v14 * v17 + (v9 & 0xFFFFFFFFFFFFFFFELL);
    v19 = *a3 + *a4 * v17 + v9;
    do
    {
      if (v11)
      {
        v20 = 0;
        for (i = 0; i < v11; i += 2)
        {
          v22 = (_WORD *)(v16 + v20);
          v23 = *(unsigned __int8 *)(v18 + i + 1) << 8;
          v24 = *(unsigned __int8 *)(v19 + i) << 8;
          v25 = *(unsigned __int8 *)(v19 + i + 1) << 8;
          *v22 = *(unsigned __int8 *)(v18 + i) << 8;
          v22[1] = v24;
          v22[2] = v23;
          v22[3] = v25;
          v20 += 8;
        }
      }
      v19 += v13;
      v16 += v15;
      v18 += v14;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_Copy_422v_2vuy(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t i;
  _BYTE *v22;
  char v23;
  char v24;
  char v25;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a4;
    v14 = a4[1];
    v15 = *a8;
    v16 = *a7 + *a8 * *(_QWORD *)(a6 + 40) + v10;
    v17 = *(_QWORD *)(a2 + 40);
    v18 = a3[1] + v14 * v17 + (v9 & 0xFFFFFFFFFFFFFFFELL);
    v19 = *a3 + *a4 * v17 + v9;
    do
    {
      if (v11)
      {
        v20 = 0;
        for (i = 0; i < v11; i += 2)
        {
          v22 = (_BYTE *)(v16 + v20);
          v23 = *(_BYTE *)(v18 + i + 1);
          v24 = *(_BYTE *)(v19 + i);
          v25 = *(_BYTE *)(v19 + i + 1);
          *v22 = *(_BYTE *)(v18 + i);
          v22[1] = v24;
          v22[2] = v23;
          v22[3] = v25;
          v20 += 4;
        }
      }
      v19 += v13;
      v16 += v15;
      v18 += v14;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_Copy_v2a8_s4as(int32x2_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t *a5, uint64_t a6, _QWORD *a7, _QWORD *a8, uint64_t *a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _WORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  _WORD *v39;
  uint64_t v40;
  __int16 v41;
  __int16 v42;
  BOOL v43;
  uint64_t v44;
  __int16 v45;
  __int16 v46;
  __int16 v47;
  unint64_t v48;
  uint64_t v49;
  unsigned __int8 *v50;
  double *v51;
  __int16 v52;
  uint64_t v53;
  unsigned __int8 *v54;
  int16x4_t v55;
  __int16 v56;
  __int16 v57;
  __int16 v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  __int16 v65;

  v10 = a3[4];
  v9 = a3[5];
  v11 = v10 & 0xFFFFFFFE;
  v12 = a3[3];
  v13 = a3[2] + v10;
  v14 = a5[1];
  v15 = (unsigned __int8 *)(a4[1] + v14 * v9 + v11);
  v17 = a7[4];
  v16 = a7[5];
  v18 = a9[1];
  v19 = (_WORD *)(a8[1] + v18 * v16 + 4 * v17);
  v20 = v13 - v11 + (v13 & 1);
  if (v20 >= a7[2])
    v20 = a7[2];
  if (v12 >= a7[3])
    v12 = a7[3];
  if (v12)
  {
    v21 = 0;
    v22 = *a9;
    v23 = a9[2];
    v24 = a8[2] + v23 * v16;
    v25 = *a8 + *a9 * v16;
    v26 = *a5;
    v27 = a5[2];
    v28 = v24 + 2 * v17;
    v29 = v25 + 2 * v17;
    v30 = a4[2] + v27 * v9 + v11;
    v31 = *a4 + v26 * v9 + v11;
    do
    {
      if (v20)
      {
        for (i = 0; i != v20; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = *(unsigned __int8 *)(v30 + i) | (*(unsigned __int8 *)(v30 + i) << 8);
          *(_WORD *)(v29 + 2 * i) = *(unsigned __int8 *)(v31 + i) << 8;
        }
      }
      v31 += v26;
      v29 += v22;
      v30 += v27;
      v28 += v23;
      ++v21;
    }
    while (v21 != v12);
  }
  v33 = v9 & 1;
  if (v12 >= v33)
    v34 = v9 & 1;
  else
    v34 = 0;
  v35 = v10;
  v36 = v20 >> 1;
  v37 = v10 & 1;
  if (v20 >> 1 >= (v20 - v37) >> 1)
    v36 = (v20 - v37) >> 1;
  if ((v9 & 1) != 0)
  {
    if ((v35 & 1) != 0)
    {
      v38 = v15 + 2;
      v45 = v15[1] << 8;
      *v19 = *v15 << 8;
      v19[1] = v45;
      v39 = v19 + 2;
      if (v36)
      {
LABEL_19:
        v40 = -(uint64_t)v36;
        do
        {
          v41 = *v38;
          v42 = v38[1];
          v38 += 2;
          *v39 = v41 << 8;
          v39[1] = v42 << 8;
          v39 += 2;
          v43 = __CFADD__(v40++, 1);
        }
        while (!v43);
        v44 = 2 * v36;
        goto LABEL_25;
      }
    }
    else
    {
      v38 = v15;
      v39 = v19;
      if (v36)
        goto LABEL_19;
    }
    v44 = 0;
LABEL_25:
    if ((v44 | (unint64_t)v37) < v20)
    {
      v46 = *v38 << 8;
      v47 = v38[1] << 8;
      *v39 = v46;
      v39[1] = v47;
    }
    v15 += v14;
    v19 = (_WORD *)((char *)v19 + v18);
  }
  if (v12 == v34)
  {
    v48 = 0;
  }
  else
  {
    v49 = 0;
    v48 = v12 - v34;
    do
    {
      v50 = v15;
      v51 = (double *)v19;
      if ((v35 & 1) != 0)
      {
        v50 = v15 + 2;
        v52 = v15[1] << 8;
        *v19 = *v15 << 8;
        v19[1] = v52;
        v51 = (double *)(v19 + 2);
      }
      if (v36)
      {
        v53 = -(uint64_t)v36;
        do
        {
          v54 = v50 + 2;
          a1.i8[0] = *v50;
          a1.i8[4] = v50[1];
          v55 = (int16x4_t)vshl_n_s32(a1, 8uLL);
          a1 = (int32x2_t)vuzp1_s16(v55, v55);
          *v51++ = *(double *)&a1;
          v50 += 2;
          v43 = __CFADD__(v53++, 1);
        }
        while (!v43);
      }
      else
      {
        v54 = v50;
      }
      if ((v37 | (2 * v36)) < v20)
      {
        v56 = *v54 << 8;
        v57 = v54[1] << 8;
        *(_WORD *)v51 = v56;
        *((_WORD *)v51 + 1) = v57;
      }
      v15 += v14;
      v19 = (_WORD *)((char *)v19 + v18);
      ++v49;
    }
    while (v49 != v48);
  }
  if (v48 + v33 < v12)
  {
    if ((v35 & 1) != 0)
    {
      v58 = *v15;
      v59 = v15[1];
      v15 += 2;
      *v19 = v58 << 8;
      v19[1] = v59 << 8;
      v19 += 2;
    }
    if (v36)
    {
      v60 = -(uint64_t)v36;
      do
      {
        v61 = *v15;
        v62 = v15[1];
        v15 += 2;
        *v19 = v61 << 8;
        v19[1] = v62 << 8;
        v19 += 2;
        v43 = __CFADD__(v60++, 1);
      }
      while (!v43);
      v63 = 2 * v36;
    }
    else
    {
      v63 = 0;
    }
    if ((v63 | (unint64_t)v37) < v20)
    {
      v64 = *v15 << 8;
      v65 = v15[1] << 8;
      *v19 = v64;
      v19[1] = v65;
    }
  }
  return 0;
}

uint64_t vt_Copy_422v_sv44(int32x2_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t *a5, uint64_t a6, _QWORD *a7, _QWORD *a8, uint64_t *a9)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _WORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  _WORD *v32;
  uint64_t v33;
  __int16 v34;
  __int16 v35;
  BOOL v36;
  uint64_t v37;
  __int16 v38;
  __int16 v39;
  __int16 v40;
  unint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  double *v44;
  __int16 v45;
  uint64_t v46;
  unsigned __int8 *v47;
  int16x4_t v48;
  __int16 v49;
  __int16 v50;
  __int16 v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  __int16 v58;

  v10 = a3[4];
  v9 = a3[5];
  v11 = a3[3];
  v12 = a3[2] + v10;
  v13 = a5[1];
  v14 = (unsigned __int8 *)(a4[1] + v13 * v9 + (v10 & 0xFFFFFFFE));
  v15 = a7[4];
  v16 = a7[5];
  v17 = a9[1];
  v18 = (_WORD *)(a8[1] + v17 * v16 + 4 * v15);
  v19 = v12 - (v10 & 0xFFFFFFFE) + (v12 & 1);
  if (v19 >= a7[2])
    v19 = a7[2];
  if (v11 >= a7[3])
    v11 = a7[3];
  if (v11)
  {
    v20 = 0;
    v21 = *a5;
    v22 = *a9;
    v23 = *a8 + *a9 * v16 + 2 * v15;
    v24 = *a4 + *a5 * v9 + (v10 & 0xFFFFFFFE);
    do
    {
      if (v19)
      {
        for (i = 0; i != v19; ++i)
          *(_WORD *)(v23 + 2 * i) = *(unsigned __int8 *)(v24 + i) << 8;
      }
      v24 += v21;
      v23 += v22;
      ++v20;
    }
    while (v20 != v11);
  }
  v26 = v9 & 1;
  if (v11 >= v26)
    v27 = v9 & 1;
  else
    v27 = 0;
  v28 = v10;
  v29 = v19 >> 1;
  v30 = v10 & 1;
  if (v19 >> 1 >= (v19 - v30) >> 1)
    v29 = (v19 - v30) >> 1;
  if ((v9 & 1) != 0)
  {
    if ((v28 & 1) != 0)
    {
      v31 = v14 + 2;
      v38 = v14[1] << 8;
      *v18 = *v14 << 8;
      v18[1] = v38;
      v32 = v18 + 2;
      if (v29)
      {
LABEL_19:
        v33 = -(uint64_t)v29;
        do
        {
          v34 = *v31;
          v35 = v31[1];
          v31 += 2;
          *v32 = v34 << 8;
          v32[1] = v35 << 8;
          v32 += 2;
          v36 = __CFADD__(v33++, 1);
        }
        while (!v36);
        v37 = 2 * v29;
        goto LABEL_25;
      }
    }
    else
    {
      v31 = v14;
      v32 = v18;
      if (v29)
        goto LABEL_19;
    }
    v37 = 0;
LABEL_25:
    if ((v37 | (unint64_t)v30) < v19)
    {
      v39 = *v31 << 8;
      v40 = v31[1] << 8;
      *v32 = v39;
      v32[1] = v40;
    }
    v14 += v13;
    v18 = (_WORD *)((char *)v18 + v17);
  }
  if (v11 == v27)
  {
    v41 = 0;
  }
  else
  {
    v42 = 0;
    v41 = v11 - v27;
    do
    {
      v43 = v14;
      v44 = (double *)v18;
      if ((v28 & 1) != 0)
      {
        v43 = v14 + 2;
        v45 = v14[1] << 8;
        *v18 = *v14 << 8;
        v18[1] = v45;
        v44 = (double *)(v18 + 2);
      }
      if (v29)
      {
        v46 = -(uint64_t)v29;
        do
        {
          v47 = v43 + 2;
          a1.i8[0] = *v43;
          a1.i8[4] = v43[1];
          v48 = (int16x4_t)vshl_n_s32(a1, 8uLL);
          a1 = (int32x2_t)vuzp1_s16(v48, v48);
          *v44++ = *(double *)&a1;
          v43 += 2;
          v36 = __CFADD__(v46++, 1);
        }
        while (!v36);
      }
      else
      {
        v47 = v43;
      }
      if ((v30 | (2 * v29)) < v19)
      {
        v49 = *v47 << 8;
        v50 = v47[1] << 8;
        *(_WORD *)v44 = v49;
        *((_WORD *)v44 + 1) = v50;
      }
      v14 += v13;
      v18 = (_WORD *)((char *)v18 + v17);
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v26 < v11)
  {
    if ((v28 & 1) != 0)
    {
      v51 = *v14;
      v52 = v14[1];
      v14 += 2;
      *v18 = v51 << 8;
      v18[1] = v52 << 8;
      v18 += 2;
    }
    if (v29)
    {
      v53 = -(uint64_t)v29;
      do
      {
        v54 = *v14;
        v55 = v14[1];
        v14 += 2;
        *v18 = v54 << 8;
        v18[1] = v55 << 8;
        v18 += 2;
        v36 = __CFADD__(v53++, 1);
      }
      while (!v36);
      v56 = 2 * v29;
    }
    else
    {
      v56 = 0;
    }
    if ((v56 | (unint64_t)v30) < v19)
    {
      v57 = *v14 << 8;
      v58 = v14[1] << 8;
      *v18 = v57;
      v18[1] = v58;
    }
  }
  return 0;
}

uint64_t vt_Copy_422v_sf44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  _WORD *v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  BOOL v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  unint64_t v44;
  uint64_t v45;
  int32x2_t v46;
  uint32x2_t v47;
  unsigned __int8 *v48;
  int16x4_t *v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  uint64_t v53;
  unsigned __int8 *v54;
  uint32x2_t v55;
  int32x4_t v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[3];
  v11 = a2[2] + v9;
  v12 = a4[1];
  v13 = (unsigned __int8 *)(a3[1] + v12 * v8 + (v9 & 0xFFFFFFFE));
  v14 = a6[4];
  v15 = a6[5];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  v18 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v18 >= a6[2])
    v18 = a6[2];
  if (v10 >= a6[3])
    v19 = a6[3];
  else
    v19 = v10;
  if (v19)
  {
    v20 = 0;
    v21 = *a4;
    v22 = *a8;
    v23 = *a7 + *a8 * v15 + 2 * v14;
    v24 = *a3 + *a4 * v8 + (v9 & 0xFFFFFFFE);
    do
    {
      if (v18)
      {
        for (i = 0; i != v18; ++i)
        {
          v26 = *(unsigned __int8 *)(v24 + i);
          if (v26 >= 0xEB)
            v26 = 235;
          if (v26 <= 0x10)
            v26 = 16;
          *(_WORD *)(v23 + 2 * i) = (-1048560 - v26 + (v26 << 16)) / 0xDB;
        }
      }
      v24 += v21;
      v23 += v22;
      ++v20;
    }
    while (v20 != v19);
  }
  v27 = v8 & 1;
  if (v19 >= v27)
    v28 = v8 & 1;
  else
    v28 = 0;
  v29 = v9;
  v30 = v18 >> 1;
  v31 = v9 & 1;
  if (v18 >> 1 >= (v18 - v31) >> 1)
    v30 = (v18 - v31) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v29 & 1) != 0)
    {
      v39 = *v13;
      v40 = v13[1];
      if (v39 >= 0xF0)
        v39 = 240;
      if (v39 <= 0x10)
        v39 = 16;
      if (v40 >= 0xF0)
        v40 = 240;
      if (v40 <= 0x10)
        v41 = 16;
      else
        v41 = v40;
      v32 = v13 + 2;
      *v17 = (613566757 * (unint64_t)((-1048560 - v39 + (v39 << 16)) >> 5)) >> 32;
      v17[1] = (613566757 * (unint64_t)((-1048560 - v41 + (v41 << 16)) >> 5)) >> 32;
      v33 = v17 + 2;
      if (v30)
        goto LABEL_24;
    }
    else
    {
      v32 = v13;
      v33 = v17;
      if (v30)
      {
LABEL_24:
        v34 = -(uint64_t)v30;
        do
        {
          v35 = *v32;
          v36 = v32[1];
          if (v35 >= 0xF0)
            v35 = 240;
          if (v35 <= 0x10)
            v35 = 16;
          if (v36 >= 0xF0)
            v36 = 240;
          if (v36 <= 0x10)
            v36 = 16;
          v32 += 2;
          *v33 = (613566757 * (unint64_t)((-1048560 - v35 + (v35 << 16)) >> 5)) >> 32;
          v33[1] = (613566757 * (unint64_t)((-1048560 - v36 + (v36 << 16)) >> 5)) >> 32;
          v33 += 2;
          v37 = __CFADD__(v34++, 1);
        }
        while (!v37);
        v38 = 2 * v30;
        goto LABEL_47;
      }
    }
    v38 = 0;
LABEL_47:
    if ((v38 | (unint64_t)v31) < v18)
    {
      v42 = *v32;
      v43 = v32[1];
      if (v42 >= 0xF0)
        v42 = 240;
      if (v42 <= 0x10)
        v42 = 16;
      if (v43 >= 0xF0)
        v43 = 240;
      if (v43 <= 0x10)
        v43 = 16;
      *v33 = (613566757 * (unint64_t)((-1048560 - v42 + (v42 << 16)) >> 5)) >> 32;
      v33[1] = (613566757 * (unint64_t)((-1048560 - v43 + (v43 << 16)) >> 5)) >> 32;
    }
    v13 += v12;
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v19 == v28)
  {
    v44 = 0;
  }
  else
  {
    v45 = 0;
    v44 = v19 - v28;
    v46 = vdup_n_s32(0xFFF00010);
    v47 = (uint32x2_t)vdup_n_s32(0x24924925u);
    do
    {
      v48 = v13;
      v49 = (int16x4_t *)v17;
      if ((v29 & 1) != 0)
      {
        v50 = *v13;
        v51 = v13[1];
        if (v50 >= 0xF0)
          v50 = 240;
        if (v50 <= 0x10)
          v50 = 16;
        if (v51 >= 0xF0)
          v51 = 240;
        if (v51 <= 0x10)
          v52 = 16;
        else
          v52 = v51;
        v48 = v13 + 2;
        *v17 = (613566757 * (unint64_t)((-1048560 - v50 + (v50 << 16)) >> 5)) >> 32;
        v17[1] = (613566757 * (unint64_t)((-1048560 - v52 + (v52 << 16)) >> 5)) >> 32;
        v49 = (int16x4_t *)(v17 + 2);
      }
      if (v30)
      {
        v53 = -(uint64_t)v30;
        do
        {
          v54 = v48 + 2;
          v55.i32[0] = *v48;
          v55.i32[1] = v48[1];
          v56 = (int32x4_t)vshrq_n_u64(vmull_u32(vshr_n_u32((uint32x2_t)vmla_s32(v46, (int32x2_t)vmax_u32(vmin_u32(v55, (uint32x2_t)0xF0000000F0), (uint32x2_t)0x1000000010), (int32x2_t)0xFFFF0000FFFFLL), 5uLL), v47), 0x20uLL);
          *v49++ = vmovn_s32(vuzp1q_s32(v56, v56));
          v48 += 2;
          v37 = __CFADD__(v53++, 1);
        }
        while (!v37);
      }
      else
      {
        v54 = v48;
      }
      if ((v31 | (2 * v30)) < v18)
      {
        v57 = *v54;
        v58 = v54[1];
        if (v57 >= 0xF0)
          v57 = 240;
        if (v57 <= 0x10)
          v57 = 16;
        if (v58 >= 0xF0)
          v58 = 240;
        if (v58 <= 0x10)
          v58 = 16;
        v49->i16[0] = (613566757 * (unint64_t)((-1048560 - v57 + (v57 << 16)) >> 5)) >> 32;
        v49->i16[1] = (613566757 * (unint64_t)((-1048560 - v58 + (v58 << 16)) >> 5)) >> 32;
      }
      v13 += v12;
      v17 = (_WORD *)((char *)v17 + v16);
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v27 < v19)
  {
    if ((v29 & 1) != 0)
    {
      v59 = *v13;
      v60 = v13[1];
      if (v59 >= 0xF0)
        v59 = 240;
      if (v59 <= 0x10)
        v59 = 16;
      if (v60 >= 0xF0)
        v60 = 240;
      if (v60 <= 0x10)
        v60 = 16;
      v13 += 2;
      *v17 = (613566757 * (unint64_t)((-1048560 - v59 + (v59 << 16)) >> 5)) >> 32;
      v17[1] = (613566757 * (unint64_t)((-1048560 - v60 + (v60 << 16)) >> 5)) >> 32;
      v17 += 2;
    }
    if (v30)
    {
      v61 = -(uint64_t)v30;
      do
      {
        v62 = *v13;
        v63 = v13[1];
        if (v62 >= 0xF0)
          v62 = 240;
        if (v62 <= 0x10)
          v62 = 16;
        if (v63 >= 0xF0)
          v63 = 240;
        if (v63 <= 0x10)
          v63 = 16;
        v13 += 2;
        *v17 = (613566757 * (unint64_t)((-1048560 - v62 + (v62 << 16)) >> 5)) >> 32;
        v17[1] = (613566757 * (unint64_t)((-1048560 - v63 + (v63 << 16)) >> 5)) >> 32;
        v17 += 2;
        v37 = __CFADD__(v61++, 1);
      }
      while (!v37);
      v30 *= 2;
    }
    if ((v30 | v31) < v18)
    {
      v64 = *v13;
      v65 = v13[1];
      if (v64 >= 0xF0)
        v64 = 240;
      if (v64 <= 0x10)
        v64 = 16;
      if (v65 >= 0xF0)
        v65 = 240;
      if (v65 <= 0x10)
        v65 = 16;
      *v17 = (613566757 * (unint64_t)((-1048560 - v64 + (v64 << 16)) >> 5)) >> 32;
      v17[1] = (613566757 * (unint64_t)((-1048560 - v65 + (v65 << 16)) >> 5)) >> 32;
    }
  }
  return 0;
}

uint64_t vt_Copy_v2a8_s2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _WORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  unsigned __int8 *v38;
  _WORD *v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  BOOL v43;
  unint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  _WORD *v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  __int16 v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = v10 + v9;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + ((v10 + v9) & 0xFFFFFFFFFFFFFFFELL));
  v15 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v16 = *(_QWORD *)(a6 + 40);
  v17 = 2 * v15;
  v18 = a8[1];
  v19 = (_WORD *)(a7[1] + v18 * v16 + ((2 * v15) & 0x7FFFFFFFFFFFFFFELL));
  v20 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v15;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9) < v20)
    v20 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - v11;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v21 = 0;
    v22 = *a8;
    v23 = a8[2];
    v24 = a7[2] + v23 * v16;
    v25 = *a7 + *a8 * v16;
    v26 = *a4;
    v27 = a4[2];
    v28 = v24 + v17;
    v29 = v25 + v17;
    v30 = a3[2] + v27 * v12 + v11;
    v31 = *a3 + v26 * v12 + v11;
    do
    {
      if (v20)
      {
        for (i = 0; i != v20; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = *(unsigned __int8 *)(v30 + i) | (*(unsigned __int8 *)(v30 + i) << 8);
          *(_WORD *)(v29 + 2 * i) = *(unsigned __int8 *)(v31 + i) << 8;
        }
      }
      v31 += v26;
      v29 += v22;
      v30 += v27;
      v28 += v23;
      ++v21;
    }
    while (v21 != v8);
  }
  v33 = v12 & 1;
  if (v8 >= v33)
    v34 = v12 & 1;
  else
    v34 = 0;
  v35 = v9;
  v36 = v20 >> 1;
  v37 = (v20 - v10) >> 1;
  if (v36 >= v37)
    v36 = v37;
  if ((v12 & 1) != 0)
  {
    if ((v35 & 1) != 0)
    {
      v38 = v14 + 2;
      v40 = v14[1] << 8;
      *v19 = *v14 << 8;
      v19[1] = v40;
      v39 = v19 + 2;
      if (!v36)
      {
LABEL_24:
        v14 += v13;
        v19 = (_WORD *)((char *)v19 + v18);
        goto LABEL_25;
      }
    }
    else
    {
      v38 = v14;
      v39 = v19;
      if (!v36)
        goto LABEL_24;
    }
    v41 = -(uint64_t)v36;
    do
    {
      v42 = v38[1] << 8;
      *v39 = *v38 << 8;
      v39[1] = v42;
      v38 += 2;
      v39 += 2;
      v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_24;
  }
LABEL_25:
  if (v8 == v34)
  {
    v44 = 0;
  }
  else
  {
    v45 = 0;
    v44 = v8 - v34;
    do
    {
      v46 = v14;
      v47 = v19;
      if ((v35 & 1) != 0)
      {
        v46 = v14 + 2;
        v48 = v14[1] << 8;
        *v19 = *v14 << 8;
        v19[1] = v48;
        v47 = v19 + 2;
      }
      if (v36)
      {
        v49 = -(uint64_t)v36;
        do
        {
          v50 = v46[1] << 8;
          *v47 = *v46 << 8;
          v47[1] = v50;
          v46 += 2;
          v47 += 2;
          v43 = __CFADD__(v49++, 1);
        }
        while (!v43);
      }
      v14 += v13;
      v19 = (_WORD *)((char *)v19 + v18);
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v33 < v8)
  {
    if ((v35 & 1) != 0)
    {
      v51 = *v14;
      v52 = v14[1];
      v14 += 2;
      *v19 = v51 << 8;
      v19[1] = v52 << 8;
      v19 += 2;
    }
    if (v36)
    {
      v53 = -(uint64_t)v36;
      do
      {
        v54 = v14[1] << 8;
        *v19 = *v14 << 8;
        v19[1] = v54;
        v14 += 2;
        v19 += 2;
        v43 = __CFADD__(v53++, 1);
      }
      while (!v43);
    }
  }
  return 0;
}

uint64_t vt_Copy_422v_sv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  unsigned __int8 *v36;
  _WORD *v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  BOOL v41;
  unint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  _WORD *v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  __int16 v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + ((v10 + v9) & 0xFFFFFFFFFFFFFFFELL));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23)
    v24 = v23;
  else
    v24 = v22;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    v28 = *a7 + *a8 * v18 + v19;
    v29 = *a3 + v26 * v12 + v10 + v9;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
          *(_WORD *)(v28 + 2 * i) = *(unsigned __int8 *)(v29 + i) << 8;
      }
      v29 += v26;
      v28 += v27;
      ++v25;
    }
    while (v25 != v8);
  }
  v31 = v12 & 1;
  if (v8 >= v31)
    v32 = v12 & 1;
  else
    v32 = 0;
  v33 = v9;
  v34 = v24 >> 1;
  v35 = (v24 - v10) >> 1;
  if (v34 >= v35)
    v34 = v35;
  if ((v12 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v36 = v14 + 2;
      v38 = v14[1] << 8;
      *v21 = *v14 << 8;
      v21[1] = v38;
      v37 = v21 + 2;
      if (!v34)
      {
LABEL_25:
        v14 += v13;
        v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_26;
      }
    }
    else
    {
      v36 = v14;
      v37 = v21;
      if (!v34)
        goto LABEL_25;
    }
    v39 = -(uint64_t)v34;
    do
    {
      v40 = v36[1] << 8;
      *v37 = *v36 << 8;
      v37[1] = v40;
      v36 += 2;
      v37 += 2;
      v41 = __CFADD__(v39++, 1);
    }
    while (!v41);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v32)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v8 - v32;
    do
    {
      v44 = v14;
      v45 = v21;
      if ((v33 & 1) != 0)
      {
        v44 = v14 + 2;
        v46 = v14[1] << 8;
        *v21 = *v14 << 8;
        v21[1] = v46;
        v45 = v21 + 2;
      }
      if (v34)
      {
        v47 = -(uint64_t)v34;
        do
        {
          v48 = v44[1] << 8;
          *v45 = *v44 << 8;
          v45[1] = v48;
          v44 += 2;
          v45 += 2;
          v41 = __CFADD__(v47++, 1);
        }
        while (!v41);
      }
      v14 += v13;
      v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v31 < v8)
  {
    if ((v33 & 1) != 0)
    {
      v49 = *v14;
      v50 = v14[1];
      v14 += 2;
      *v21 = v49 << 8;
      v21[1] = v50 << 8;
      v21 += 2;
    }
    if (v34)
    {
      v51 = -(uint64_t)v34;
      do
      {
        v52 = v14[1] << 8;
        *v21 = *v14 << 8;
        v21[1] = v52;
        v14 += 2;
        v21 += 2;
        v41 = __CFADD__(v51++, 1);
      }
      while (!v41);
    }
  }
  return 0;
}

uint64_t vt_Copy_422v_sf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  unsigned int v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  unsigned __int8 *v36;
  _WORD *v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  BOOL v45;
  unint64_t v46;
  uint64_t v47;
  unsigned __int8 *v48;
  _WORD *v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + ((v10 + v9) & 0xFFFFFFFFFFFFFFFELL));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23)
    v24 = v23;
  else
    v24 = v22;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    v28 = *a7 + *a8 * v18 + v19;
    v29 = *a3 + v26 * v12 + v10 + v9;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
        {
          v31 = *(unsigned __int8 *)(v29 + i);
          if (v31 >= 0xEB)
            v31 = 235;
          if (v31 <= 0x10)
            v31 = 16;
          *(_WORD *)(v28 + 2 * i) = (-1048560 - v31 + (v31 << 16)) / 0xDB;
        }
      }
      v29 += v26;
      v28 += v27;
      ++v25;
    }
    while (v25 != v8);
  }
  v32 = v12 & 1;
  if (v8 >= v32)
    v33 = v12 & 1;
  else
    v33 = 0;
  v34 = v9;
  v35 = v24 >> 1;
  if (v24 >> 1 >= (v24 - v10) >> 1)
    v35 = (v24 - v10) >> 1;
  if ((v12 & 1) != 0)
  {
    if ((v34 & 1) != 0)
    {
      v38 = *v14;
      if (v38 >= 0xF0)
        v38 = 240;
      if (v38 <= 0x10)
        v39 = 16;
      else
        v39 = v38;
      if (v14[1] >= 0xF0u)
        v40 = 240;
      else
        v40 = v14[1];
      if (v40 <= 0x10)
        v41 = 16;
      else
        v41 = v40;
      v36 = v14 + 2;
      *v21 = (613566757 * (unint64_t)((-1048560 - v39 + (v39 << 16)) >> 5)) >> 32;
      v21[1] = (613566757 * (unint64_t)((-1048560 - v41 + (v41 << 16)) >> 5)) >> 32;
      v37 = v21 + 2;
      if (!v35)
        goto LABEL_48;
    }
    else
    {
      v36 = v14;
      v37 = v21;
      if (!v35)
      {
LABEL_48:
        v14 += v13;
        v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_49;
      }
    }
    v42 = -(uint64_t)v35;
    do
    {
      v43 = *v36;
      v44 = v36[1];
      if (v43 >= 0xF0)
        v43 = 240;
      if (v43 <= 0x10)
        v43 = 16;
      if (v44 >= 0xF0)
        v44 = 240;
      if (v44 <= 0x10)
        v44 = 16;
      *v37 = (613566757 * (unint64_t)((-1048560 - v43 + (v43 << 16)) >> 5)) >> 32;
      v37[1] = (613566757 * (unint64_t)((-1048560 - v44 + (v44 << 16)) >> 5)) >> 32;
      v36 += 2;
      v37 += 2;
      v45 = __CFADD__(v42++, 1);
    }
    while (!v45);
    goto LABEL_48;
  }
LABEL_49:
  if (v8 == v33)
  {
    v46 = 0;
  }
  else
  {
    v47 = 0;
    v46 = v8 - v33;
    do
    {
      v48 = v14;
      v49 = v21;
      if ((v34 & 1) != 0)
      {
        v50 = *v14;
        if (v50 >= 0xF0)
          v50 = 240;
        if (v50 <= 0x10)
          v51 = 16;
        else
          v51 = v50;
        if (v14[1] >= 0xF0u)
          v52 = 240;
        else
          v52 = v14[1];
        if (v52 <= 0x10)
          v53 = 16;
        else
          v53 = v52;
        v48 = v14 + 2;
        *v21 = (613566757 * (unint64_t)((-1048560 - v51 + (v51 << 16)) >> 5)) >> 32;
        v21[1] = (613566757 * (unint64_t)((-1048560 - v53 + (v53 << 16)) >> 5)) >> 32;
        v49 = v21 + 2;
      }
      if (v35)
      {
        v54 = -(uint64_t)v35;
        do
        {
          v55 = *v48;
          v56 = v48[1];
          if (v55 >= 0xF0)
            v55 = 240;
          if (v55 <= 0x10)
            v55 = 16;
          if (v56 >= 0xF0)
            v56 = 240;
          if (v56 <= 0x10)
            v56 = 16;
          *v49 = (613566757 * (unint64_t)((-1048560 - v55 + (v55 << 16)) >> 5)) >> 32;
          v49[1] = (613566757 * (unint64_t)((-1048560 - v56 + (v56 << 16)) >> 5)) >> 32;
          v48 += 2;
          v49 += 2;
          v45 = __CFADD__(v54++, 1);
        }
        while (!v45);
      }
      v14 += v13;
      v21 = (_WORD *)((char *)v21 + v20);
      ++v47;
    }
    while (v47 != v46);
  }
  if (v46 + v32 < v8)
  {
    if ((v34 & 1) != 0)
    {
      v57 = *v14;
      v58 = v14[1];
      if (v57 >= 0xF0)
        v57 = 240;
      if (v57 <= 0x10)
        v57 = 16;
      if (v58 >= 0xF0)
        v58 = 240;
      if (v58 <= 0x10)
        v58 = 16;
      v14 += 2;
      *v21 = (613566757 * (unint64_t)((-1048560 - v57 + (v57 << 16)) >> 5)) >> 32;
      v21[1] = (613566757 * (unint64_t)((-1048560 - v58 + (v58 << 16)) >> 5)) >> 32;
      v21 += 2;
    }
    if (v35)
    {
      v59 = -(uint64_t)v35;
      do
      {
        v60 = *v14;
        v61 = v14[1];
        if (v60 >= 0xF0)
          v60 = 240;
        if (v60 <= 0x10)
          v60 = 16;
        if (v61 >= 0xF0)
          v61 = 240;
        if (v61 <= 0x10)
          v61 = 16;
        *v21 = (613566757 * (unint64_t)((-1048560 - v60 + (v60 << 16)) >> 5)) >> 32;
        v21[1] = (613566757 * (unint64_t)((-1048560 - v61 + (v61 << 16)) >> 5)) >> 32;
        v14 += 2;
        v21 += 2;
        v45 = __CFADD__(v59++, 1);
      }
      while (!v45);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_422v_sv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned __int8 *v38;
  _WORD *v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  __int16 v43;
  __int16 v44;
  __int16 v45;
  BOOL v46;
  unint64_t v47;
  unint64_t v48;
  unsigned __int8 *v49;
  _WORD *v50;
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  __int16 v54;
  __int16 v55;
  __int16 v56;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v8) + (v10 & 0xFFFFFFFFFFFFFFFELL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - v10;
  v25 = v18 - v17;
  if (v24 < v25)
    v25 = v24;
  v26 = v14 - v13;
  if (v14 - v13 >= v20 - v19)
    v26 = v20 - v19;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + v28 * v13;
    if (v13 >= v8)
      v31 = 0;
    else
      v31 = v28;
    v32 = v30 + v10 + v31;
    v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = *(unsigned __int8 *)(v32 + i) << 8;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= v12)
    v35 = v12;
  else
    v35 = 0;
  v36 = v25 - (v9 & 1);
  if (v25 >> 1 >= v36 >> 1)
    v37 = v36 >> 1;
  else
    v37 = v25 >> 1;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v38 = v16 + 2;
      v40 = (v16[v15 + 1] + (unsigned __int16)v16[1]) << 7;
      *v23 = (v16[v15] + (unsigned __int16)*v16) << 7;
      v23[1] = v40;
      v39 = v23 + 2;
      if (!v37)
      {
LABEL_28:
        v16 += 2 * v15;
        v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_29;
      }
    }
    else
    {
      v38 = v16;
      v39 = v23;
      if (!v37)
        goto LABEL_28;
    }
    v41 = -(uint64_t)v37;
    do
    {
      v42 = *v38;
      v43 = v38[1];
      v44 = v38[v15];
      v45 = v38[v15 + 1];
      v38 += 2;
      *v39 = (v44 + v42) << 7;
      v39[1] = (v45 + v43) << 7;
      v39 += 2;
      v46 = __CFADD__(v41++, 1);
    }
    while (!v46);
    goto LABEL_28;
  }
LABEL_29:
  if (v26 != v35)
  {
    v47 = 0;
    v48 = v26 - v35;
    do
    {
      v49 = v16;
      v50 = v23;
      if ((v9 & 1) != 0)
      {
        v49 = v16 + 2;
        v51 = (v16[v15 + 1] + (unsigned __int16)v16[1]) << 7;
        *v23 = (v16[v15] + (unsigned __int16)*v16) << 7;
        v23[1] = v51;
        v50 = v23 + 2;
      }
      if (v37)
      {
        v52 = -(uint64_t)v37;
        do
        {
          v53 = *v49;
          v54 = v49[1];
          v55 = v49[v15];
          v56 = v49[v15 + 1];
          v49 += 2;
          *v50 = (v55 + v53) << 7;
          v50[1] = (v56 + v54) << 7;
          v50 += 2;
          v46 = __CFADD__(v52++, 1);
        }
        while (!v46);
      }
      v16 += 2 * v15;
      v23 = (_WORD *)((char *)v23 + v22);
      v47 += 2;
    }
    while (v47 < v48);
  }
  return 0;
}

uint64_t vt_CopyDec_422v_sv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned __int8 *v38;
  _WORD *v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  BOOL v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  _WORD *v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v8) + (v10 & 0xFFFFFFFFFFFFFFFELL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - v10;
  v25 = v18 - v17;
  if (v24 < v25)
    v25 = v24;
  v26 = v14 - v13;
  if (v14 - v13 >= v20 - v19)
    v26 = v20 - v19;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + v28 * v13;
    if (v13 >= v8)
      v31 = 0;
    else
      v31 = v28;
    v32 = v30 + v10 + v31;
    v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = *(unsigned __int8 *)(v32 + i) << 8;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= v12)
    v35 = v12;
  else
    v35 = 0;
  v36 = v25 - (v9 & 1);
  if (v25 >> 1 >= v36 >> 1)
    v37 = v36 >> 1;
  else
    v37 = v25 >> 1;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v38 = v16 + 2;
      v40 = v16[1] << 8;
      *v23 = *v16 << 8;
      v23[1] = v40;
      v39 = v23 + 2;
      if (!v37)
      {
LABEL_28:
        v16 += 2 * v15;
        v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_29;
      }
    }
    else
    {
      v38 = v16;
      v39 = v23;
      if (!v37)
        goto LABEL_28;
    }
    v41 = -(uint64_t)v37;
    do
    {
      v42 = v38[1] << 8;
      *v39 = *v38 << 8;
      v39[1] = v42;
      v38 += 2;
      v39 += 2;
      v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_28;
  }
LABEL_29:
  if (v26 != v35)
  {
    v44 = 0;
    v45 = v26 - v35;
    v46 = 2 * v15;
    do
    {
      v47 = v16;
      v48 = v23;
      if ((v9 & 1) != 0)
      {
        v47 = v16 + 2;
        v49 = v16[1] << 8;
        *v23 = *v16 << 8;
        v23[1] = v49;
        v48 = v23 + 2;
      }
      if (v37)
      {
        v50 = -(uint64_t)v37;
        do
        {
          v51 = v47[1] << 8;
          *v48 = *v47 << 8;
          v48[1] = v51;
          v47 += 2;
          v48 += 2;
          v43 = __CFADD__(v50++, 1);
        }
        while (!v43);
      }
      v16 += v46;
      v23 = (_WORD *)((char *)v23 + v22);
      v44 += 2;
    }
    while (v44 < v45);
  }
  return 0;
}

uint64_t vt_CopyAvg_422v_sf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned __int8 *v39;
  _WORD *v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  int v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  BOOL v54;
  unint64_t v55;
  unint64_t v56;
  unsigned __int8 *v57;
  _WORD *v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  int v62;
  unsigned int v63;
  int v64;
  unsigned int v65;
  int v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = (v8 & 1) + v8;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v9) + (v10 & 0xFFFFFFFFFFFFFFFELL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - v10;
  v25 = v18 - v17;
  if (v24 < v25)
    v25 = v24;
  v26 = v14 - v13;
  if (v14 - v13 >= v20 - v19)
    v26 = v20 - v19;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + v28 * v13;
    if (v13 >= v9)
      v31 = 0;
    else
      v31 = v28;
    v32 = v30 + v10 + v31;
    v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (i = 0; i != v25; ++i)
        {
          v35 = *(unsigned __int8 *)(v32 + i);
          if (v35 >= 0xEB)
            v35 = 235;
          if (v35 <= 0x10)
            v35 = 16;
          *(_WORD *)(v33 + 2 * i) = (-1048560 - v35 + (v35 << 16)) / 0xDB;
        }
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= v12)
    v36 = v12;
  else
    v36 = 0;
  v37 = v25 - (v8 & 1);
  if (v25 >> 1 >= v37 >> 1)
    v38 = v37 >> 1;
  else
    v38 = v25 >> 1;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v41 = *v16;
      if (v41 >= 0xF0)
        v41 = 240;
      if (v41 <= 0x10)
        v42 = 16;
      else
        v42 = v41;
      if (v16[1] >= 0xF0u)
        v43 = 240;
      else
        v43 = v16[1];
      if (v43 <= 0x10)
        v44 = 16;
      else
        v44 = v43;
      if (v16[v15] >= 0xF0u)
        v45 = 240;
      else
        v45 = v16[v15];
      if (v45 <= 0x10)
        v46 = 16;
      else
        v46 = v45;
      if (v16[v15 + 1] >= 0xF0u)
        v47 = 240;
      else
        v47 = v16[v15 + 1];
      if (v47 <= 0x10)
        v48 = 16;
      else
        v48 = v47;
      v39 = v16 + 2;
      *v23 = (((613566757 * (unint64_t)((-1048560 - v42 + (v42 << 16)) >> 5)) >> 32)
                          + ((613566757 * (unint64_t)((-1048560 - v46 + (v46 << 16)) >> 5)) >> 32)
                          + 1) >> 1;
      v23[1] = (((613566757 * (unint64_t)((-1048560 - v44 + (v44 << 16)) >> 5)) >> 32)
                            + ((613566757 * (unint64_t)((-1048560 - v48 + (v48 << 16)) >> 5)) >> 32)
                            + 1) >> 1;
      v40 = v23 + 2;
      if (!v38)
        goto LABEL_71;
    }
    else
    {
      v39 = v16;
      v40 = v23;
      if (!v38)
      {
LABEL_71:
        v16 += 2 * v15;
        v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_72;
      }
    }
    v49 = -(uint64_t)v38;
    do
    {
      v50 = *v39;
      v51 = v39[1];
      v52 = v39[v15];
      v53 = v39[v15 + 1];
      if (v50 >= 0xF0)
        v50 = 240;
      if (v50 <= 0x10)
        v50 = 16;
      if (v51 >= 0xF0)
        v51 = 240;
      if (v51 <= 0x10)
        v51 = 16;
      if (v52 >= 0xF0)
        v52 = 240;
      if (v52 <= 0x10)
        v52 = 16;
      if (v53 >= 0xF0)
        v53 = 240;
      if (v53 <= 0x10)
        v53 = 16;
      v39 += 2;
      *v40 = (((613566757 * (unint64_t)((-1048560 - v50 + (v50 << 16)) >> 5)) >> 32)
                          + ((613566757 * (unint64_t)((-1048560 - v52 + (v52 << 16)) >> 5)) >> 32)
                          + 1) >> 1;
      v40[1] = (((613566757 * (unint64_t)((-1048560 - v51 + (v51 << 16)) >> 5)) >> 32)
                            + ((613566757 * (unint64_t)((-1048560 - v53 + (v53 << 16)) >> 5)) >> 32)
                            + 1) >> 1;
      v40 += 2;
      v54 = __CFADD__(v49++, 1);
    }
    while (!v54);
    goto LABEL_71;
  }
LABEL_72:
  if (v26 != v36)
  {
    v55 = 0;
    v56 = v26 - v36;
    do
    {
      v57 = v16;
      v58 = v23;
      if ((v8 & 1) != 0)
      {
        v59 = *v16;
        if (v59 >= 0xF0)
          v59 = 240;
        if (v59 <= 0x10)
          v60 = 16;
        else
          v60 = v59;
        if (v16[1] >= 0xF0u)
          v61 = 240;
        else
          v61 = v16[1];
        if (v61 <= 0x10)
          v62 = 16;
        else
          v62 = v61;
        if (v16[v15] >= 0xF0u)
          v63 = 240;
        else
          v63 = v16[v15];
        if (v63 <= 0x10)
          v64 = 16;
        else
          v64 = v63;
        if (v16[v15 + 1] >= 0xF0u)
          v65 = 240;
        else
          v65 = v16[v15 + 1];
        if (v65 <= 0x10)
          v66 = 16;
        else
          v66 = v65;
        v57 = v16 + 2;
        *v23 = (((613566757 * (unint64_t)((-1048560 - v60 + (v60 << 16)) >> 5)) >> 32)
                            + ((613566757 * (unint64_t)((-1048560 - v64 + (v64 << 16)) >> 5)) >> 32)
                            + 1) >> 1;
        v23[1] = (((613566757 * (unint64_t)((-1048560 - v62 + (v62 << 16)) >> 5)) >> 32)
                              + ((613566757 * (unint64_t)((-1048560 - v66 + (v66 << 16)) >> 5)) >> 32)
                              + 1) >> 1;
        v58 = v23 + 2;
      }
      if (v38)
      {
        v67 = -(uint64_t)v38;
        do
        {
          v68 = *v57;
          v69 = v57[1];
          v70 = v57[v15];
          v71 = v57[v15 + 1];
          if (v68 >= 0xF0)
            v68 = 240;
          if (v68 <= 0x10)
            v68 = 16;
          if (v69 >= 0xF0)
            v69 = 240;
          if (v69 <= 0x10)
            v69 = 16;
          if (v70 >= 0xF0)
            v70 = 240;
          if (v70 <= 0x10)
            v70 = 16;
          if (v71 >= 0xF0)
            v71 = 240;
          if (v71 <= 0x10)
            v71 = 16;
          v57 += 2;
          *v58 = (((613566757 * (unint64_t)((-1048560 - v68 + (v68 << 16)) >> 5)) >> 32)
                              + ((613566757 * (unint64_t)((-1048560 - v70 + (v70 << 16)) >> 5)) >> 32)
                              + 1) >> 1;
          v58[1] = (((613566757 * (unint64_t)((-1048560 - v69 + (v69 << 16)) >> 5)) >> 32)
                                + ((613566757 * (unint64_t)((-1048560 - v71 + (v71 << 16)) >> 5)) >> 32)
                                + 1) >> 1;
          v58 += 2;
          v54 = __CFADD__(v67++, 1);
        }
        while (!v54);
      }
      v16 += 2 * v15;
      v23 = (_WORD *)((char *)v23 + v22);
      v55 += 2;
    }
    while (v55 < v56);
  }
  return 0;
}

uint64_t vt_CopyDec_422v_sf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned __int8 *v39;
  _WORD *v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  int v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  BOOL v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unsigned __int8 *v52;
  _WORD *v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  int v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = (v8 & 1) + v8;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v9) + (v10 & 0xFFFFFFFFFFFFFFFELL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - v10;
  v25 = v18 - v17;
  if (v24 < v25)
    v25 = v24;
  v26 = v14 - v13;
  if (v14 - v13 >= v20 - v19)
    v26 = v20 - v19;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + v28 * v13;
    if (v13 >= v9)
      v31 = 0;
    else
      v31 = v28;
    v32 = v30 + v10 + v31;
    v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (i = 0; i != v25; ++i)
        {
          v35 = *(unsigned __int8 *)(v32 + i);
          if (v35 >= 0xEB)
            v35 = 235;
          if (v35 <= 0x10)
            v35 = 16;
          *(_WORD *)(v33 + 2 * i) = (-1048560 - v35 + (v35 << 16)) / 0xDB;
        }
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= v12)
    v36 = v12;
  else
    v36 = 0;
  v37 = v25 - (v8 & 1);
  if (v25 >> 1 >= v37 >> 1)
    v38 = v37 >> 1;
  else
    v38 = v25 >> 1;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v41 = *v16;
      if (v41 >= 0xF0)
        v41 = 240;
      if (v41 <= 0x10)
        v42 = 16;
      else
        v42 = v41;
      if (v16[1] >= 0xF0u)
        v43 = 240;
      else
        v43 = v16[1];
      if (v43 <= 0x10)
        v44 = 16;
      else
        v44 = v43;
      v39 = v16 + 2;
      *v23 = (613566757 * (unint64_t)((-1048560 - v42 + (v42 << 16)) >> 5)) >> 32;
      v23[1] = (613566757 * (unint64_t)((-1048560 - v44 + (v44 << 16)) >> 5)) >> 32;
      v40 = v23 + 2;
      if (!v38)
        goto LABEL_51;
    }
    else
    {
      v39 = v16;
      v40 = v23;
      if (!v38)
      {
LABEL_51:
        v16 += 2 * v15;
        v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_52;
      }
    }
    v45 = -(uint64_t)v38;
    do
    {
      v46 = *v39;
      v47 = v39[1];
      if (v46 >= 0xF0)
        v46 = 240;
      if (v46 <= 0x10)
        v46 = 16;
      if (v47 >= 0xF0)
        v47 = 240;
      if (v47 <= 0x10)
        v47 = 16;
      *v40 = (613566757 * (unint64_t)((-1048560 - v46 + (v46 << 16)) >> 5)) >> 32;
      v40[1] = (613566757 * (unint64_t)((-1048560 - v47 + (v47 << 16)) >> 5)) >> 32;
      v39 += 2;
      v40 += 2;
      v48 = __CFADD__(v45++, 1);
    }
    while (!v48);
    goto LABEL_51;
  }
LABEL_52:
  if (v26 != v36)
  {
    v49 = 0;
    v50 = v26 - v36;
    v51 = 2 * v15;
    do
    {
      v52 = v16;
      v53 = v23;
      if ((v8 & 1) != 0)
      {
        v54 = *v16;
        if (v54 >= 0xF0)
          v54 = 240;
        if (v54 <= 0x10)
          v55 = 16;
        else
          v55 = v54;
        if (v16[1] >= 0xF0u)
          v56 = 240;
        else
          v56 = v16[1];
        if (v56 <= 0x10)
          v57 = 16;
        else
          v57 = v56;
        v52 = v16 + 2;
        *v23 = (613566757 * (unint64_t)((-1048560 - v55 + (v55 << 16)) >> 5)) >> 32;
        v23[1] = (613566757 * (unint64_t)((-1048560 - v57 + (v57 << 16)) >> 5)) >> 32;
        v53 = v23 + 2;
      }
      if (v38)
      {
        v58 = -(uint64_t)v38;
        do
        {
          v59 = *v52;
          v60 = v52[1];
          if (v59 >= 0xF0)
            v59 = 240;
          if (v59 <= 0x10)
            v59 = 16;
          if (v60 >= 0xF0)
            v60 = 240;
          if (v60 <= 0x10)
            v60 = 16;
          *v53 = (613566757 * (unint64_t)((-1048560 - v59 + (v59 << 16)) >> 5)) >> 32;
          v53[1] = (613566757 * (unint64_t)((-1048560 - v60 + (v60 << 16)) >> 5)) >> 32;
          v52 += 2;
          v53 += 2;
          v48 = __CFADD__(v58++, 1);
        }
        while (!v48);
      }
      v16 += v51;
      v23 = (_WORD *)((char *)v23 + v22);
      v49 += 2;
    }
    while (v49 < v50);
  }
  return 0;
}

uint64_t vt_Copy_v2a8_t4as(int32x2_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t *a5, uint64_t a6, _QWORD *a7, _QWORD *a8, uint64_t *a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _WORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  _WORD *v39;
  uint64_t v40;
  __int16 v41;
  __int16 v42;
  BOOL v43;
  uint64_t v44;
  __int16 v45;
  __int16 v46;
  __int16 v47;
  unint64_t v48;
  uint64_t v49;
  unsigned __int8 *v50;
  double *v51;
  __int16 v52;
  uint64_t v53;
  unsigned __int8 *v54;
  int16x4_t v55;
  __int16 v56;
  __int16 v57;
  __int16 v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  __int16 v65;

  v10 = a3[4];
  v9 = a3[5];
  v11 = v10 & 0xFFFFFFFE;
  v12 = a3[3];
  v13 = a3[2] + v10;
  v14 = a5[1];
  v15 = (unsigned __int8 *)(a4[1] + v14 * v9 + v11);
  v17 = a7[4];
  v16 = a7[5];
  v18 = a9[1];
  v19 = (_WORD *)(a8[1] + v18 * v16 + 4 * v17);
  v20 = v13 - v11 + (v13 & 1);
  if (v20 >= a7[2])
    v20 = a7[2];
  if (v12 >= a7[3])
    v12 = a7[3];
  if (v12)
  {
    v21 = 0;
    v22 = *a9;
    v23 = a9[2];
    v24 = a8[2] + v23 * v16;
    v25 = *a8 + *a9 * v16;
    v26 = *a5;
    v27 = a5[2];
    v28 = v24 + 2 * v17;
    v29 = v25 + 2 * v17;
    v30 = a4[2] + v27 * v9 + v11;
    v31 = *a4 + v26 * v9 + v11;
    do
    {
      if (v20)
      {
        for (i = 0; i != v20; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = *(unsigned __int8 *)(v30 + i) | (*(unsigned __int8 *)(v30 + i) << 8);
          *(_WORD *)(v29 + 2 * i) = *(unsigned __int8 *)(v31 + i) << 8;
        }
      }
      v31 += v26;
      v29 += v22;
      v30 += v27;
      v28 += v23;
      ++v21;
    }
    while (v21 != v12);
  }
  v33 = v9 & 1;
  if (v12 >= v33)
    v34 = v9 & 1;
  else
    v34 = 0;
  v35 = v10;
  v36 = v20 >> 1;
  v37 = v10 & 1;
  if (v20 >> 1 >= (v20 - v37) >> 1)
    v36 = (v20 - v37) >> 1;
  if ((v9 & 1) != 0)
  {
    if ((v35 & 1) != 0)
    {
      v38 = v15 + 2;
      v45 = v15[1] << 8;
      *v19 = *v15 << 8;
      v19[1] = v45;
      v39 = v19 + 2;
      if (v36)
      {
LABEL_19:
        v40 = -(uint64_t)v36;
        do
        {
          v41 = *v38;
          v42 = v38[1];
          v38 += 2;
          *v39 = v41 << 8;
          v39[1] = v42 << 8;
          v39 += 2;
          v43 = __CFADD__(v40++, 1);
        }
        while (!v43);
        v44 = 2 * v36;
        goto LABEL_25;
      }
    }
    else
    {
      v38 = v15;
      v39 = v19;
      if (v36)
        goto LABEL_19;
    }
    v44 = 0;
LABEL_25:
    if ((v44 | (unint64_t)v37) < v20)
    {
      v46 = *v38 << 8;
      v47 = v38[1] << 8;
      *v39 = v46;
      v39[1] = v47;
    }
    v15 += v14;
    v19 = (_WORD *)((char *)v19 + v18);
  }
  if (v12 == v34)
  {
    v48 = 0;
  }
  else
  {
    v49 = 0;
    v48 = v12 - v34;
    do
    {
      v50 = v15;
      v51 = (double *)v19;
      if ((v35 & 1) != 0)
      {
        v50 = v15 + 2;
        v52 = v15[1] << 8;
        *v19 = *v15 << 8;
        v19[1] = v52;
        v51 = (double *)(v19 + 2);
      }
      if (v36)
      {
        v53 = -(uint64_t)v36;
        do
        {
          v54 = v50 + 2;
          a1.i8[0] = *v50;
          a1.i8[4] = v50[1];
          v55 = (int16x4_t)vshl_n_s32(a1, 8uLL);
          a1 = (int32x2_t)vuzp1_s16(v55, v55);
          *v51++ = *(double *)&a1;
          v50 += 2;
          v43 = __CFADD__(v53++, 1);
        }
        while (!v43);
      }
      else
      {
        v54 = v50;
      }
      if ((v37 | (2 * v36)) < v20)
      {
        v56 = *v54 << 8;
        v57 = v54[1] << 8;
        *(_WORD *)v51 = v56;
        *((_WORD *)v51 + 1) = v57;
      }
      v15 += v14;
      v19 = (_WORD *)((char *)v19 + v18);
      ++v49;
    }
    while (v49 != v48);
  }
  if (v48 + v33 < v12)
  {
    if ((v35 & 1) != 0)
    {
      v58 = *v15;
      v59 = v15[1];
      v15 += 2;
      *v19 = v58 << 8;
      v19[1] = v59 << 8;
      v19 += 2;
    }
    if (v36)
    {
      v60 = -(uint64_t)v36;
      do
      {
        v61 = *v15;
        v62 = v15[1];
        v15 += 2;
        *v19 = v61 << 8;
        v19[1] = v62 << 8;
        v19 += 2;
        v43 = __CFADD__(v60++, 1);
      }
      while (!v43);
      v63 = 2 * v36;
    }
    else
    {
      v63 = 0;
    }
    if ((v63 | (unint64_t)v37) < v20)
    {
      v64 = *v15 << 8;
      v65 = v15[1] << 8;
      *v19 = v64;
      v19[1] = v65;
    }
  }
  return 0;
}

uint64_t vt_Copy_422v_tv44(int32x2_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t *a5, uint64_t a6, _QWORD *a7, _QWORD *a8, uint64_t *a9)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _WORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  _WORD *v32;
  uint64_t v33;
  __int16 v34;
  __int16 v35;
  BOOL v36;
  uint64_t v37;
  __int16 v38;
  __int16 v39;
  __int16 v40;
  unint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  double *v44;
  __int16 v45;
  uint64_t v46;
  unsigned __int8 *v47;
  int16x4_t v48;
  __int16 v49;
  __int16 v50;
  __int16 v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  __int16 v58;

  v10 = a3[4];
  v9 = a3[5];
  v11 = a3[3];
  v12 = a3[2] + v10;
  v13 = a5[1];
  v14 = (unsigned __int8 *)(a4[1] + v13 * v9 + (v10 & 0xFFFFFFFE));
  v15 = a7[4];
  v16 = a7[5];
  v17 = a9[1];
  v18 = (_WORD *)(a8[1] + v17 * v16 + 4 * v15);
  v19 = v12 - (v10 & 0xFFFFFFFE) + (v12 & 1);
  if (v19 >= a7[2])
    v19 = a7[2];
  if (v11 >= a7[3])
    v11 = a7[3];
  if (v11)
  {
    v20 = 0;
    v21 = *a5;
    v22 = *a9;
    v23 = *a8 + *a9 * v16 + 2 * v15;
    v24 = *a4 + *a5 * v9 + (v10 & 0xFFFFFFFE);
    do
    {
      if (v19)
      {
        for (i = 0; i != v19; ++i)
          *(_WORD *)(v23 + 2 * i) = *(unsigned __int8 *)(v24 + i) << 8;
      }
      v24 += v21;
      v23 += v22;
      ++v20;
    }
    while (v20 != v11);
  }
  v26 = v9 & 1;
  if (v11 >= v26)
    v27 = v9 & 1;
  else
    v27 = 0;
  v28 = v10;
  v29 = v19 >> 1;
  v30 = v10 & 1;
  if (v19 >> 1 >= (v19 - v30) >> 1)
    v29 = (v19 - v30) >> 1;
  if ((v9 & 1) != 0)
  {
    if ((v28 & 1) != 0)
    {
      v31 = v14 + 2;
      v38 = v14[1] << 8;
      *v18 = *v14 << 8;
      v18[1] = v38;
      v32 = v18 + 2;
      if (v29)
      {
LABEL_19:
        v33 = -(uint64_t)v29;
        do
        {
          v34 = *v31;
          v35 = v31[1];
          v31 += 2;
          *v32 = v34 << 8;
          v32[1] = v35 << 8;
          v32 += 2;
          v36 = __CFADD__(v33++, 1);
        }
        while (!v36);
        v37 = 2 * v29;
        goto LABEL_25;
      }
    }
    else
    {
      v31 = v14;
      v32 = v18;
      if (v29)
        goto LABEL_19;
    }
    v37 = 0;
LABEL_25:
    if ((v37 | (unint64_t)v30) < v19)
    {
      v39 = *v31 << 8;
      v40 = v31[1] << 8;
      *v32 = v39;
      v32[1] = v40;
    }
    v14 += v13;
    v18 = (_WORD *)((char *)v18 + v17);
  }
  if (v11 == v27)
  {
    v41 = 0;
  }
  else
  {
    v42 = 0;
    v41 = v11 - v27;
    do
    {
      v43 = v14;
      v44 = (double *)v18;
      if ((v28 & 1) != 0)
      {
        v43 = v14 + 2;
        v45 = v14[1] << 8;
        *v18 = *v14 << 8;
        v18[1] = v45;
        v44 = (double *)(v18 + 2);
      }
      if (v29)
      {
        v46 = -(uint64_t)v29;
        do
        {
          v47 = v43 + 2;
          a1.i8[0] = *v43;
          a1.i8[4] = v43[1];
          v48 = (int16x4_t)vshl_n_s32(a1, 8uLL);
          a1 = (int32x2_t)vuzp1_s16(v48, v48);
          *v44++ = *(double *)&a1;
          v43 += 2;
          v36 = __CFADD__(v46++, 1);
        }
        while (!v36);
      }
      else
      {
        v47 = v43;
      }
      if ((v30 | (2 * v29)) < v19)
      {
        v49 = *v47 << 8;
        v50 = v47[1] << 8;
        *(_WORD *)v44 = v49;
        *((_WORD *)v44 + 1) = v50;
      }
      v14 += v13;
      v18 = (_WORD *)((char *)v18 + v17);
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v26 < v11)
  {
    if ((v28 & 1) != 0)
    {
      v51 = *v14;
      v52 = v14[1];
      v14 += 2;
      *v18 = v51 << 8;
      v18[1] = v52 << 8;
      v18 += 2;
    }
    if (v29)
    {
      v53 = -(uint64_t)v29;
      do
      {
        v54 = *v14;
        v55 = v14[1];
        v14 += 2;
        *v18 = v54 << 8;
        v18[1] = v55 << 8;
        v18 += 2;
        v36 = __CFADD__(v53++, 1);
      }
      while (!v36);
      v56 = 2 * v29;
    }
    else
    {
      v56 = 0;
    }
    if ((v56 | (unint64_t)v30) < v19)
    {
      v57 = *v14 << 8;
      v58 = v14[1] << 8;
      *v18 = v57;
      v18[1] = v58;
    }
  }
  return 0;
}

uint64_t vt_Copy_422v_tf44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  unsigned int v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  _WORD *v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  BOOL v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  unint64_t v43;
  uint64_t v44;
  int32x2_t v45;
  uint32x2_t v46;
  unsigned __int8 *v47;
  int16x4_t *v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  uint64_t v52;
  unsigned __int8 *v53;
  uint32x2_t v54;
  int16x4_t v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[3];
  v11 = a2[2] + v9;
  v12 = a4[1];
  v13 = (unsigned __int8 *)(a3[1] + v12 * v8 + (v9 & 0xFFFFFFFE));
  v14 = a6[4];
  v15 = a6[5];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  v18 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v18 >= a6[2])
    v18 = a6[2];
  if (v10 >= a6[3])
    v19 = a6[3];
  else
    v19 = v10;
  if (v19)
  {
    v20 = 0;
    v21 = *a4;
    v22 = *a8;
    v23 = *a7 + *a8 * v15 + 2 * v14;
    v24 = *a3 + *a4 * v8 + (v9 & 0xFFFFFFFE);
    do
    {
      if (v18)
      {
        for (i = 0; i != v18; ++i)
        {
          v26 = *(unsigned __int8 *)(v24 + i);
          if (v26 >= 0xEB)
            v26 = 235;
          if (v26 <= 0x10)
            v26 = 16;
          *(_WORD *)(v23 + 2 * i) = ((((725633745 * (unint64_t)(4095 * v26 - 65520)) >> 32)
                                                  + ((4095 * v26
                                                                  - 65520
                                                                  - ((725633745 * (unint64_t)(4095 * v26 - 65520)) >> 32)) >> 1)) >> 3) & 0xFFF0;
        }
      }
      v24 += v21;
      v23 += v22;
      ++v20;
    }
    while (v20 != v19);
  }
  if (v19 >= (v8 & 1u))
    v27 = v8 & 1;
  else
    v27 = 0;
  v28 = v9;
  v29 = v18 >> 1;
  v30 = v9 & 1;
  if (v18 >> 1 >= (v18 - v30) >> 1)
    v29 = (v18 - v30) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v28 & 1) != 0)
    {
      v38 = *v13;
      v39 = v13[1];
      if (v38 >= 0xF0)
        v38 = 240;
      if (v38 <= 0x10)
        v38 = 16;
      if (v39 >= 0xF0)
        v39 = 240;
      if (v39 <= 0x10)
        v40 = 16;
      else
        v40 = v39;
      v31 = v13 + 2;
      *v17 = 16 * ((613566757 * (unint64_t)((4095 * v38 - 65520) >> 5)) >> 32);
      v17[1] = 16 * ((613566757 * (unint64_t)((4095 * v40 - 65520) >> 5)) >> 32);
      v32 = v17 + 2;
      if (v29)
        goto LABEL_24;
    }
    else
    {
      v31 = v13;
      v32 = v17;
      if (v29)
      {
LABEL_24:
        v33 = -(uint64_t)v29;
        do
        {
          v34 = *v31;
          v35 = v31[1];
          if (v34 >= 0xF0)
            v34 = 240;
          if (v34 <= 0x10)
            v34 = 16;
          if (v35 >= 0xF0)
            v35 = 240;
          if (v35 <= 0x10)
            v35 = 16;
          v31 += 2;
          *v32 = 16 * ((613566757 * (unint64_t)((4095 * v34 - 65520) >> 5)) >> 32);
          v32[1] = 16 * ((613566757 * (unint64_t)((4095 * v35 - 65520) >> 5)) >> 32);
          v32 += 2;
          v36 = __CFADD__(v33++, 1);
        }
        while (!v36);
        v37 = 2 * v29;
        goto LABEL_47;
      }
    }
    v37 = 0;
LABEL_47:
    if ((v37 | (unint64_t)v30) < v18)
    {
      v41 = *v31;
      v42 = v31[1];
      if (v41 >= 0xF0)
        v41 = 240;
      if (v41 <= 0x10)
        v41 = 16;
      if (v42 >= 0xF0)
        v42 = 240;
      if (v42 <= 0x10)
        v42 = 16;
      *v32 = 16 * ((613566757 * (unint64_t)((4095 * v41 - 65520) >> 5)) >> 32);
      v32[1] = 16 * ((613566757 * (unint64_t)((4095 * v42 - 65520) >> 5)) >> 32);
    }
    v13 += v12;
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v19 == v27)
  {
    v43 = 0;
  }
  else
  {
    v44 = 0;
    v43 = v19 - v27;
    v45 = vdup_n_s32(0xFFFF0010);
    v46 = (uint32x2_t)vdup_n_s32(0x24924925u);
    do
    {
      v47 = v13;
      v48 = (int16x4_t *)v17;
      if ((v28 & 1) != 0)
      {
        v49 = *v13;
        v50 = v13[1];
        if (v49 >= 0xF0)
          v49 = 240;
        if (v49 <= 0x10)
          v49 = 16;
        if (v50 >= 0xF0)
          v50 = 240;
        if (v50 <= 0x10)
          v51 = 16;
        else
          v51 = v50;
        v47 = v13 + 2;
        *v17 = 16 * ((613566757 * (unint64_t)((4095 * v49 - 65520) >> 5)) >> 32);
        v17[1] = 16 * ((613566757 * (unint64_t)((4095 * v51 - 65520) >> 5)) >> 32);
        v48 = (int16x4_t *)(v17 + 2);
      }
      if (v29)
      {
        v52 = -(uint64_t)v29;
        do
        {
          v53 = v47 + 2;
          v54.i32[0] = *v47;
          v54.i32[1] = v47[1];
          v55 = (int16x4_t)vshl_n_s32(vshrn_n_s64((int64x2_t)vmull_u32(vshr_n_u32((uint32x2_t)vmla_s32(v45, (int32x2_t)vmax_u32(vmin_u32(v54, (uint32x2_t)0xF0000000F0), (uint32x2_t)0x1000000010), (int32x2_t)0xF0000000FLL), 5uLL), v46), 0x20uLL), 4uLL);
          *v48++ = vuzp1_s16(v55, v55);
          v47 += 2;
          v36 = __CFADD__(v52++, 1);
        }
        while (!v36);
      }
      else
      {
        v53 = v47;
      }
      if ((v30 | (2 * v29)) < v18)
      {
        v56 = *v53;
        v57 = v53[1];
        if (v56 >= 0xF0)
          v56 = 240;
        if (v56 <= 0x10)
          v56 = 16;
        if (v57 >= 0xF0)
          v57 = 240;
        if (v57 <= 0x10)
          v57 = 16;
        v48->i16[0] = 16 * ((613566757 * (unint64_t)((4095 * v56 - 65520) >> 5)) >> 32);
        v48->i16[1] = 16 * ((613566757 * (unint64_t)((4095 * v57 - 65520) >> 5)) >> 32);
      }
      v13 += v12;
      v17 = (_WORD *)((char *)v17 + v16);
      ++v44;
    }
    while (v44 != v43);
  }
  if (v43 + (v8 & 1) < v19)
  {
    if ((v28 & 1) != 0)
    {
      v58 = *v13;
      v59 = v13[1];
      if (v58 >= 0xF0)
        v58 = 240;
      if (v58 <= 0x10)
        v58 = 16;
      if (v59 >= 0xF0)
        v59 = 240;
      if (v59 <= 0x10)
        v59 = 16;
      v13 += 2;
      *v17 = 16 * ((613566757 * (unint64_t)((4095 * v58 - 65520) >> 5)) >> 32);
      v17[1] = 16 * ((613566757 * (unint64_t)((4095 * v59 - 65520) >> 5)) >> 32);
      v17 += 2;
    }
    if (v29)
    {
      v60 = -(uint64_t)v29;
      do
      {
        v61 = *v13;
        v62 = v13[1];
        if (v61 >= 0xF0)
          v61 = 240;
        if (v61 <= 0x10)
          v61 = 16;
        if (v62 >= 0xF0)
          v62 = 240;
        if (v62 <= 0x10)
          v62 = 16;
        v13 += 2;
        *v17 = 16 * ((613566757 * (unint64_t)((4095 * v61 - 65520) >> 5)) >> 32);
        v17[1] = 16 * ((613566757 * (unint64_t)((4095 * v62 - 65520) >> 5)) >> 32);
        v17 += 2;
        v36 = __CFADD__(v60++, 1);
      }
      while (!v36);
      v29 *= 2;
    }
    if ((v29 | v30) < v18)
    {
      v63 = *v13;
      v64 = v13[1];
      if (v63 >= 0xF0)
        v63 = 240;
      if (v63 <= 0x10)
        v63 = 16;
      if (v64 >= 0xF0)
        v64 = 240;
      if (v64 <= 0x10)
        v64 = 16;
      *v17 = 16 * ((613566757 * (unint64_t)((4095 * v63 - 65520) >> 5)) >> 32);
      v17[1] = 16 * ((613566757 * (unint64_t)((4095 * v64 - 65520) >> 5)) >> 32);
    }
  }
  return 0;
}

uint64_t vt_Copy_v2a8_t2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _WORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  unsigned __int8 *v38;
  _WORD *v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  BOOL v43;
  unint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  _WORD *v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  __int16 v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = v10 + v9;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + ((v10 + v9) & 0xFFFFFFFFFFFFFFFELL));
  v15 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v16 = *(_QWORD *)(a6 + 40);
  v17 = 2 * v15;
  v18 = a8[1];
  v19 = (_WORD *)(a7[1] + v18 * v16 + ((2 * v15) & 0x7FFFFFFFFFFFFFFELL));
  v20 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v15;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9) < v20)
    v20 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - v11;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v21 = 0;
    v22 = *a8;
    v23 = a8[2];
    v24 = a7[2] + v23 * v16;
    v25 = *a7 + *a8 * v16;
    v26 = *a4;
    v27 = a4[2];
    v28 = v24 + v17;
    v29 = v25 + v17;
    v30 = a3[2] + v27 * v12 + v11;
    v31 = *a3 + v26 * v12 + v11;
    do
    {
      if (v20)
      {
        for (i = 0; i != v20; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = *(unsigned __int8 *)(v30 + i) | (*(unsigned __int8 *)(v30 + i) << 8);
          *(_WORD *)(v29 + 2 * i) = *(unsigned __int8 *)(v31 + i) << 8;
        }
      }
      v31 += v26;
      v29 += v22;
      v30 += v27;
      v28 += v23;
      ++v21;
    }
    while (v21 != v8);
  }
  v33 = v12 & 1;
  if (v8 >= v33)
    v34 = v12 & 1;
  else
    v34 = 0;
  v35 = v9;
  v36 = v20 >> 1;
  v37 = (v20 - v10) >> 1;
  if (v36 >= v37)
    v36 = v37;
  if ((v12 & 1) != 0)
  {
    if ((v35 & 1) != 0)
    {
      v38 = v14 + 2;
      v40 = v14[1] << 8;
      *v19 = *v14 << 8;
      v19[1] = v40;
      v39 = v19 + 2;
      if (!v36)
      {
LABEL_24:
        v14 += v13;
        v19 = (_WORD *)((char *)v19 + v18);
        goto LABEL_25;
      }
    }
    else
    {
      v38 = v14;
      v39 = v19;
      if (!v36)
        goto LABEL_24;
    }
    v41 = -(uint64_t)v36;
    do
    {
      v42 = v38[1] << 8;
      *v39 = *v38 << 8;
      v39[1] = v42;
      v38 += 2;
      v39 += 2;
      v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_24;
  }
LABEL_25:
  if (v8 == v34)
  {
    v44 = 0;
  }
  else
  {
    v45 = 0;
    v44 = v8 - v34;
    do
    {
      v46 = v14;
      v47 = v19;
      if ((v35 & 1) != 0)
      {
        v46 = v14 + 2;
        v48 = v14[1] << 8;
        *v19 = *v14 << 8;
        v19[1] = v48;
        v47 = v19 + 2;
      }
      if (v36)
      {
        v49 = -(uint64_t)v36;
        do
        {
          v50 = v46[1] << 8;
          *v47 = *v46 << 8;
          v47[1] = v50;
          v46 += 2;
          v47 += 2;
          v43 = __CFADD__(v49++, 1);
        }
        while (!v43);
      }
      v14 += v13;
      v19 = (_WORD *)((char *)v19 + v18);
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v33 < v8)
  {
    if ((v35 & 1) != 0)
    {
      v51 = *v14;
      v52 = v14[1];
      v14 += 2;
      *v19 = v51 << 8;
      v19[1] = v52 << 8;
      v19 += 2;
    }
    if (v36)
    {
      v53 = -(uint64_t)v36;
      do
      {
        v54 = v14[1] << 8;
        *v19 = *v14 << 8;
        v19[1] = v54;
        v14 += 2;
        v19 += 2;
        v43 = __CFADD__(v53++, 1);
      }
      while (!v43);
    }
  }
  return 0;
}

uint64_t vt_Copy_422v_tv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  unsigned __int8 *v36;
  _WORD *v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  BOOL v41;
  unint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  _WORD *v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  __int16 v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + ((v10 + v9) & 0xFFFFFFFFFFFFFFFELL));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23)
    v24 = v23;
  else
    v24 = v22;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    v28 = *a7 + *a8 * v18 + v19;
    v29 = *a3 + v26 * v12 + v10 + v9;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
          *(_WORD *)(v28 + 2 * i) = *(unsigned __int8 *)(v29 + i) << 8;
      }
      v29 += v26;
      v28 += v27;
      ++v25;
    }
    while (v25 != v8);
  }
  v31 = v12 & 1;
  if (v8 >= v31)
    v32 = v12 & 1;
  else
    v32 = 0;
  v33 = v9;
  v34 = v24 >> 1;
  v35 = (v24 - v10) >> 1;
  if (v34 >= v35)
    v34 = v35;
  if ((v12 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v36 = v14 + 2;
      v38 = v14[1] << 8;
      *v21 = *v14 << 8;
      v21[1] = v38;
      v37 = v21 + 2;
      if (!v34)
      {
LABEL_25:
        v14 += v13;
        v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_26;
      }
    }
    else
    {
      v36 = v14;
      v37 = v21;
      if (!v34)
        goto LABEL_25;
    }
    v39 = -(uint64_t)v34;
    do
    {
      v40 = v36[1] << 8;
      *v37 = *v36 << 8;
      v37[1] = v40;
      v36 += 2;
      v37 += 2;
      v41 = __CFADD__(v39++, 1);
    }
    while (!v41);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v32)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v8 - v32;
    do
    {
      v44 = v14;
      v45 = v21;
      if ((v33 & 1) != 0)
      {
        v44 = v14 + 2;
        v46 = v14[1] << 8;
        *v21 = *v14 << 8;
        v21[1] = v46;
        v45 = v21 + 2;
      }
      if (v34)
      {
        v47 = -(uint64_t)v34;
        do
        {
          v48 = v44[1] << 8;
          *v45 = *v44 << 8;
          v45[1] = v48;
          v44 += 2;
          v45 += 2;
          v41 = __CFADD__(v47++, 1);
        }
        while (!v41);
      }
      v14 += v13;
      v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v31 < v8)
  {
    if ((v33 & 1) != 0)
    {
      v49 = *v14;
      v50 = v14[1];
      v14 += 2;
      *v21 = v49 << 8;
      v21[1] = v50 << 8;
      v21 += 2;
    }
    if (v34)
    {
      v51 = -(uint64_t)v34;
      do
      {
        v52 = v14[1] << 8;
        *v21 = *v14 << 8;
        v21[1] = v52;
        v14 += 2;
        v21 += 2;
        v41 = __CFADD__(v51++, 1);
      }
      while (!v41);
    }
  }
  return 0;
}

uint64_t vt_Copy_422v_tf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  unsigned int v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  unsigned __int8 *v37;
  _WORD *v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  BOOL v46;
  unint64_t v47;
  uint64_t v48;
  unsigned __int8 *v49;
  _WORD *v50;
  unsigned int v51;
  int v52;
  unsigned int v53;
  int v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + ((v10 + v9) & 0xFFFFFFFFFFFFFFFELL));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23)
    v24 = v23;
  else
    v24 = v22;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    v28 = *a7 + *a8 * v18 + v19;
    v29 = *a3 + v26 * v12 + v10 + v9;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
        {
          v31 = *(unsigned __int8 *)(v29 + i);
          if (v31 >= 0xEB)
            v31 = 235;
          if (v31 <= 0x10)
            v31 = 16;
          *(_WORD *)(v28 + 2 * i) = ((((725633745 * (unint64_t)(4095 * v31 - 65520)) >> 32)
                                                  + ((4095 * v31
                                                                  - 65520
                                                                  - ((725633745 * (unint64_t)(4095 * v31 - 65520)) >> 32)) >> 1)) >> 3) & 0xFFF0;
        }
      }
      v29 += v26;
      v28 += v27;
      ++v25;
    }
    while (v25 != v8);
  }
  v32 = v12 & 1;
  if (v8 >= v32)
    v33 = v12 & 1;
  else
    v33 = 0;
  v34 = v9;
  v35 = v24 >> 1;
  v36 = (v24 - v10) >> 1;
  if (v35 >= v36)
    v35 = v36;
  if ((v12 & 1) != 0)
  {
    if ((v34 & 1) != 0)
    {
      v39 = *v14;
      if (v39 >= 0xF0)
        v39 = 240;
      if (v39 <= 0x10)
        v40 = 16;
      else
        v40 = v39;
      if (v14[1] >= 0xF0u)
        v41 = 240;
      else
        v41 = v14[1];
      if (v41 <= 0x10)
        v42 = 16;
      else
        v42 = v41;
      v37 = v14 + 2;
      *v21 = 16 * ((613566757 * (unint64_t)((4095 * v40 - 65520) >> 5)) >> 32);
      v21[1] = 16 * ((613566757 * (unint64_t)((4095 * v42 - 65520) >> 5)) >> 32);
      v38 = v21 + 2;
      if (!v35)
        goto LABEL_48;
    }
    else
    {
      v37 = v14;
      v38 = v21;
      if (!v35)
      {
LABEL_48:
        v14 += v13;
        v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_49;
      }
    }
    v43 = -(uint64_t)v35;
    do
    {
      v44 = *v37;
      v45 = v37[1];
      if (v44 >= 0xF0)
        v44 = 240;
      if (v44 <= 0x10)
        v44 = 16;
      if (v45 >= 0xF0)
        v45 = 240;
      if (v45 <= 0x10)
        v45 = 16;
      *v38 = 16 * ((613566757 * (unint64_t)((4095 * v44 - 65520) >> 5)) >> 32);
      v38[1] = 16 * ((613566757 * (unint64_t)((4095 * v45 - 65520) >> 5)) >> 32);
      v37 += 2;
      v38 += 2;
      v46 = __CFADD__(v43++, 1);
    }
    while (!v46);
    goto LABEL_48;
  }
LABEL_49:
  if (v8 == v33)
  {
    v47 = 0;
  }
  else
  {
    v48 = 0;
    v47 = v8 - v33;
    do
    {
      v49 = v14;
      v50 = v21;
      if ((v34 & 1) != 0)
      {
        v51 = *v14;
        if (v51 >= 0xF0)
          v51 = 240;
        if (v51 <= 0x10)
          v52 = 16;
        else
          v52 = v51;
        if (v14[1] >= 0xF0u)
          v53 = 240;
        else
          v53 = v14[1];
        if (v53 <= 0x10)
          v54 = 16;
        else
          v54 = v53;
        v49 = v14 + 2;
        *v21 = 16 * ((613566757 * (unint64_t)((4095 * v52 - 65520) >> 5)) >> 32);
        v21[1] = 16 * ((613566757 * (unint64_t)((4095 * v54 - 65520) >> 5)) >> 32);
        v50 = v21 + 2;
      }
      if (v35)
      {
        v55 = -(uint64_t)v35;
        do
        {
          v56 = *v49;
          v57 = v49[1];
          if (v56 >= 0xF0)
            v56 = 240;
          if (v56 <= 0x10)
            v56 = 16;
          if (v57 >= 0xF0)
            v57 = 240;
          if (v57 <= 0x10)
            v57 = 16;
          *v50 = 16 * ((613566757 * (unint64_t)((4095 * v56 - 65520) >> 5)) >> 32);
          v50[1] = 16 * ((613566757 * (unint64_t)((4095 * v57 - 65520) >> 5)) >> 32);
          v49 += 2;
          v50 += 2;
          v46 = __CFADD__(v55++, 1);
        }
        while (!v46);
      }
      v14 += v13;
      v21 = (_WORD *)((char *)v21 + v20);
      ++v48;
    }
    while (v48 != v47);
  }
  if (v47 + v32 < v8)
  {
    if ((v34 & 1) != 0)
    {
      v58 = *v14;
      v59 = v14[1];
      if (v58 >= 0xF0)
        v58 = 240;
      if (v58 <= 0x10)
        v58 = 16;
      if (v59 >= 0xF0)
        v59 = 240;
      if (v59 <= 0x10)
        v59 = 16;
      v14 += 2;
      *v21 = 16 * ((613566757 * (unint64_t)((4095 * v58 - 65520) >> 5)) >> 32);
      v21[1] = 16 * ((613566757 * (unint64_t)((4095 * v59 - 65520) >> 5)) >> 32);
      v21 += 2;
    }
    if (v35)
    {
      v60 = -(uint64_t)v35;
      do
      {
        v61 = *v14;
        v62 = v14[1];
        if (v61 >= 0xF0)
          v61 = 240;
        if (v61 <= 0x10)
          v61 = 16;
        if (v62 >= 0xF0)
          v62 = 240;
        if (v62 <= 0x10)
          v62 = 16;
        *v21 = 16 * ((613566757 * (unint64_t)((4095 * v61 - 65520) >> 5)) >> 32);
        v21[1] = 16 * ((613566757 * (unint64_t)((4095 * v62 - 65520) >> 5)) >> 32);
        v14 += 2;
        v21 += 2;
        v46 = __CFADD__(v60++, 1);
      }
      while (!v46);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_422v_tv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned __int8 *v38;
  _WORD *v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  __int16 v43;
  __int16 v44;
  __int16 v45;
  BOOL v46;
  unint64_t v47;
  unint64_t v48;
  unsigned __int8 *v49;
  _WORD *v50;
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  __int16 v54;
  __int16 v55;
  __int16 v56;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v8) + (v10 & 0xFFFFFFFFFFFFFFFELL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - v10;
  v25 = v18 - v17;
  if (v24 < v25)
    v25 = v24;
  v26 = v14 - v13;
  if (v14 - v13 >= v20 - v19)
    v26 = v20 - v19;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + v28 * v13;
    if (v13 >= v8)
      v31 = 0;
    else
      v31 = v28;
    v32 = v30 + v10 + v31;
    v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = *(unsigned __int8 *)(v32 + i) << 8;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= v12)
    v35 = v12;
  else
    v35 = 0;
  v36 = v25 - (v9 & 1);
  if (v25 >> 1 >= v36 >> 1)
    v37 = v36 >> 1;
  else
    v37 = v25 >> 1;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v38 = v16 + 2;
      v40 = (v16[v15 + 1] + (unsigned __int16)v16[1]) << 7;
      *v23 = (v16[v15] + (unsigned __int16)*v16) << 7;
      v23[1] = v40;
      v39 = v23 + 2;
      if (!v37)
      {
LABEL_28:
        v16 += 2 * v15;
        v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_29;
      }
    }
    else
    {
      v38 = v16;
      v39 = v23;
      if (!v37)
        goto LABEL_28;
    }
    v41 = -(uint64_t)v37;
    do
    {
      v42 = *v38;
      v43 = v38[1];
      v44 = v38[v15];
      v45 = v38[v15 + 1];
      v38 += 2;
      *v39 = (v44 + v42) << 7;
      v39[1] = (v45 + v43) << 7;
      v39 += 2;
      v46 = __CFADD__(v41++, 1);
    }
    while (!v46);
    goto LABEL_28;
  }
LABEL_29:
  if (v26 != v35)
  {
    v47 = 0;
    v48 = v26 - v35;
    do
    {
      v49 = v16;
      v50 = v23;
      if ((v9 & 1) != 0)
      {
        v49 = v16 + 2;
        v51 = (v16[v15 + 1] + (unsigned __int16)v16[1]) << 7;
        *v23 = (v16[v15] + (unsigned __int16)*v16) << 7;
        v23[1] = v51;
        v50 = v23 + 2;
      }
      if (v37)
      {
        v52 = -(uint64_t)v37;
        do
        {
          v53 = *v49;
          v54 = v49[1];
          v55 = v49[v15];
          v56 = v49[v15 + 1];
          v49 += 2;
          *v50 = (v55 + v53) << 7;
          v50[1] = (v56 + v54) << 7;
          v50 += 2;
          v46 = __CFADD__(v52++, 1);
        }
        while (!v46);
      }
      v16 += 2 * v15;
      v23 = (_WORD *)((char *)v23 + v22);
      v47 += 2;
    }
    while (v47 < v48);
  }
  return 0;
}

uint64_t vt_CopyDec_422v_tv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned __int8 *v38;
  _WORD *v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  BOOL v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  _WORD *v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v8) + (v10 & 0xFFFFFFFFFFFFFFFELL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - v10;
  v25 = v18 - v17;
  if (v24 < v25)
    v25 = v24;
  v26 = v14 - v13;
  if (v14 - v13 >= v20 - v19)
    v26 = v20 - v19;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + v28 * v13;
    if (v13 >= v8)
      v31 = 0;
    else
      v31 = v28;
    v32 = v30 + v10 + v31;
    v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = *(unsigned __int8 *)(v32 + i) << 8;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= v12)
    v35 = v12;
  else
    v35 = 0;
  v36 = v25 - (v9 & 1);
  if (v25 >> 1 >= v36 >> 1)
    v37 = v36 >> 1;
  else
    v37 = v25 >> 1;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v38 = v16 + 2;
      v40 = v16[1] << 8;
      *v23 = *v16 << 8;
      v23[1] = v40;
      v39 = v23 + 2;
      if (!v37)
      {
LABEL_28:
        v16 += 2 * v15;
        v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_29;
      }
    }
    else
    {
      v38 = v16;
      v39 = v23;
      if (!v37)
        goto LABEL_28;
    }
    v41 = -(uint64_t)v37;
    do
    {
      v42 = v38[1] << 8;
      *v39 = *v38 << 8;
      v39[1] = v42;
      v38 += 2;
      v39 += 2;
      v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_28;
  }
LABEL_29:
  if (v26 != v35)
  {
    v44 = 0;
    v45 = v26 - v35;
    v46 = 2 * v15;
    do
    {
      v47 = v16;
      v48 = v23;
      if ((v9 & 1) != 0)
      {
        v47 = v16 + 2;
        v49 = v16[1] << 8;
        *v23 = *v16 << 8;
        v23[1] = v49;
        v48 = v23 + 2;
      }
      if (v37)
      {
        v50 = -(uint64_t)v37;
        do
        {
          v51 = v47[1] << 8;
          *v48 = *v47 << 8;
          v48[1] = v51;
          v47 += 2;
          v48 += 2;
          v43 = __CFADD__(v50++, 1);
        }
        while (!v43);
      }
      v16 += v46;
      v23 = (_WORD *)((char *)v23 + v22);
      v44 += 2;
    }
    while (v44 < v45);
  }
  return 0;
}

uint64_t vt_CopyAvg_422v_tf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int8 *v40;
  _WORD *v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unint64_t v55;
  unint64_t v56;
  unsigned __int8 *v57;
  _WORD *v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  int v62;
  unsigned int v63;
  int v64;
  unsigned int v65;
  int v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v8) + (v10 & 0xFFFFFFFFFFFFFFFELL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - v10;
  v25 = v18 - v17;
  if (v24 < v25)
    v25 = v24;
  v26 = v14 - v13;
  if (v14 - v13 >= v20 - v19)
    v26 = v20 - v19;
  if (v26)
  {
    v27 = 0;
    v28 = v13 >= v8;
    v29 = *a4;
    v30 = *a8;
    v31 = *a3 + *a4 * v13;
    if (v28)
      v32 = 0;
    else
      v32 = *a4;
    v33 = v31 + v10 + v32;
    v34 = *a7 + v30 * v19 + v21;
    do
    {
      if (v25)
      {
        for (i = 0; i != v25; ++i)
        {
          v36 = *(unsigned __int8 *)(v33 + i);
          if (v36 >= 0xEB)
            v36 = 235;
          if (v36 <= 0x10)
            v36 = 16;
          *(_WORD *)(v34 + 2 * i) = ((((725633745 * (unint64_t)(4095 * v36 - 65520)) >> 32)
                                                  + ((4095 * v36
                                                                  - 65520
                                                                  - ((725633745 * (unint64_t)(4095 * v36 - 65520)) >> 32)) >> 1)) >> 3) & 0xFFF0;
        }
      }
      v33 += v29;
      v34 += v30;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= v12)
    v37 = v12;
  else
    v37 = 0;
  v38 = v25 - (v9 & 1);
  if (v25 >> 1 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v25 >> 1;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v42 = *v16;
      if (v42 >= 0xF0)
        v42 = 240;
      if (v42 <= 0x10)
        v43 = 16;
      else
        v43 = v42;
      if (v16[1] >= 0xF0u)
        v44 = 240;
      else
        v44 = v16[1];
      if (v44 <= 0x10)
        v45 = 16;
      else
        v45 = v44;
      if (v16[v15] >= 0xF0u)
        v46 = 240;
      else
        v46 = v16[v15];
      if (v46 <= 0x10)
        v47 = 16;
      else
        v47 = v46;
      if (v16[v15 + 1] >= 0xF0u)
        v48 = 240;
      else
        v48 = v16[v15 + 1];
      if (v48 <= 0x10)
        v49 = 16;
      else
        v49 = v48;
      v40 = v16 + 2;
      *v23 = (8
            * (((613566757 * (unint64_t)((4095 * v47 - 65520) >> 5)) >> 32)
             + ((613566757 * (unint64_t)((4095 * v43 - 65520) >> 5)) >> 32))
            + 8) & 0xFFF0;
      v23[1] = (8
              * (((613566757 * (unint64_t)((4095 * v49 - 65520) >> 5)) >> 32)
               + ((613566757 * (unint64_t)((4095 * v45 - 65520) >> 5)) >> 32))
              + 8) & 0xFFF0;
      v41 = v23 + 2;
      if (!v39)
        goto LABEL_71;
    }
    else
    {
      v40 = v16;
      v41 = v23;
      if (!v39)
      {
LABEL_71:
        v16 += 2 * v15;
        v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_72;
      }
    }
    v50 = -(uint64_t)v39;
    do
    {
      v51 = *v40;
      v52 = v40[1];
      v53 = v40[v15];
      v54 = v40[v15 + 1];
      if (v51 >= 0xF0)
        v51 = 240;
      if (v51 <= 0x10)
        v51 = 16;
      if (v52 >= 0xF0)
        v52 = 240;
      if (v52 <= 0x10)
        v52 = 16;
      if (v53 >= 0xF0)
        v53 = 240;
      if (v53 <= 0x10)
        v53 = 16;
      if (v54 >= 0xF0)
        v54 = 240;
      if (v54 <= 0x10)
        v54 = 16;
      v40 += 2;
      *v41 = (8
            * (((613566757 * (unint64_t)((4095 * v53 - 65520) >> 5)) >> 32)
             + ((613566757 * (unint64_t)((4095 * v51 - 65520) >> 5)) >> 32))
            + 8) & 0xFFF0;
      v41[1] = (8
              * (((613566757 * (unint64_t)((4095 * v54 - 65520) >> 5)) >> 32)
               + ((613566757 * (unint64_t)((4095 * v52 - 65520) >> 5)) >> 32))
              + 8) & 0xFFF0;
      v41 += 2;
      v28 = __CFADD__(v50++, 1);
    }
    while (!v28);
    goto LABEL_71;
  }
LABEL_72:
  if (v26 != v37)
  {
    v55 = 0;
    v56 = v26 - v37;
    do
    {
      v57 = v16;
      v58 = v23;
      if ((v9 & 1) != 0)
      {
        v59 = *v16;
        if (v59 >= 0xF0)
          v59 = 240;
        if (v59 <= 0x10)
          v60 = 16;
        else
          v60 = v59;
        if (v16[1] >= 0xF0u)
          v61 = 240;
        else
          v61 = v16[1];
        if (v61 <= 0x10)
          v62 = 16;
        else
          v62 = v61;
        if (v16[v15] >= 0xF0u)
          v63 = 240;
        else
          v63 = v16[v15];
        if (v63 <= 0x10)
          v64 = 16;
        else
          v64 = v63;
        if (v16[v15 + 1] >= 0xF0u)
          v65 = 240;
        else
          v65 = v16[v15 + 1];
        if (v65 <= 0x10)
          v66 = 16;
        else
          v66 = v65;
        v57 = v16 + 2;
        *v23 = (8
              * (((613566757 * (unint64_t)((4095 * v64 - 65520) >> 5)) >> 32)
               + ((613566757 * (unint64_t)((4095 * v60 - 65520) >> 5)) >> 32))
              + 8) & 0xFFF0;
        v23[1] = (8
                * (((613566757 * (unint64_t)((4095 * v66 - 65520) >> 5)) >> 32)
                 + ((613566757 * (unint64_t)((4095 * v62 - 65520) >> 5)) >> 32))
                + 8) & 0xFFF0;
        v58 = v23 + 2;
      }
      if (v39)
      {
        v67 = -(uint64_t)v39;
        do
        {
          v68 = *v57;
          v69 = v57[1];
          v70 = v57[v15];
          v71 = v57[v15 + 1];
          if (v68 >= 0xF0)
            v68 = 240;
          if (v68 <= 0x10)
            v68 = 16;
          if (v69 >= 0xF0)
            v69 = 240;
          if (v69 <= 0x10)
            v69 = 16;
          if (v70 >= 0xF0)
            v70 = 240;
          if (v70 <= 0x10)
            v70 = 16;
          if (v71 >= 0xF0)
            v71 = 240;
          if (v71 <= 0x10)
            v71 = 16;
          v57 += 2;
          *v58 = (8
                * (((613566757 * (unint64_t)((4095 * v70 - 65520) >> 5)) >> 32)
                 + ((613566757 * (unint64_t)((4095 * v68 - 65520) >> 5)) >> 32))
                + 8) & 0xFFF0;
          v58[1] = (8
                  * (((613566757 * (unint64_t)((4095 * v71 - 65520) >> 5)) >> 32)
                   + ((613566757 * (unint64_t)((4095 * v69 - 65520) >> 5)) >> 32))
                  + 8) & 0xFFF0;
          v58 += 2;
          v28 = __CFADD__(v67++, 1);
        }
        while (!v28);
      }
      v16 += 2 * v15;
      v23 = (_WORD *)((char *)v23 + v22);
      v55 += 2;
    }
    while (v55 < v56);
  }
  return 0;
}

uint64_t vt_CopyDec_422v_tf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int8 *v40;
  _WORD *v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  int v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unsigned __int8 *v52;
  _WORD *v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  int v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v8) + (v10 & 0xFFFFFFFFFFFFFFFELL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - v10;
  v25 = v18 - v17;
  if (v24 < v25)
    v25 = v24;
  v26 = v14 - v13;
  if (v14 - v13 >= v20 - v19)
    v26 = v20 - v19;
  if (v26)
  {
    v27 = 0;
    v28 = v13 >= v8;
    v29 = *a4;
    v30 = *a8;
    v31 = *a3 + *a4 * v13;
    if (v28)
      v32 = 0;
    else
      v32 = *a4;
    v33 = v31 + v10 + v32;
    v34 = *a7 + v30 * v19 + v21;
    do
    {
      if (v25)
      {
        for (i = 0; i != v25; ++i)
        {
          v36 = *(unsigned __int8 *)(v33 + i);
          if (v36 >= 0xEB)
            v36 = 235;
          if (v36 <= 0x10)
            v36 = 16;
          *(_WORD *)(v34 + 2 * i) = ((((725633745 * (unint64_t)(4095 * v36 - 65520)) >> 32)
                                                  + ((4095 * v36
                                                                  - 65520
                                                                  - ((725633745 * (unint64_t)(4095 * v36 - 65520)) >> 32)) >> 1)) >> 3) & 0xFFF0;
        }
      }
      v33 += v29;
      v34 += v30;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= v12)
    v37 = v12;
  else
    v37 = 0;
  v38 = v25 - (v9 & 1);
  if (v25 >> 1 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v25 >> 1;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v42 = *v16;
      if (v42 >= 0xF0)
        v42 = 240;
      if (v42 <= 0x10)
        v43 = 16;
      else
        v43 = v42;
      if (v16[1] >= 0xF0u)
        v44 = 240;
      else
        v44 = v16[1];
      if (v44 <= 0x10)
        v45 = 16;
      else
        v45 = v44;
      v40 = v16 + 2;
      *v23 = 16 * ((613566757 * (unint64_t)((4095 * v43 - 65520) >> 5)) >> 32);
      v23[1] = 16 * ((613566757 * (unint64_t)((4095 * v45 - 65520) >> 5)) >> 32);
      v41 = v23 + 2;
      if (!v39)
        goto LABEL_51;
    }
    else
    {
      v40 = v16;
      v41 = v23;
      if (!v39)
      {
LABEL_51:
        v16 += 2 * v15;
        v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_52;
      }
    }
    v46 = -(uint64_t)v39;
    do
    {
      v47 = *v40;
      v48 = v40[1];
      if (v47 >= 0xF0)
        v47 = 240;
      if (v47 <= 0x10)
        v47 = 16;
      if (v48 >= 0xF0)
        v48 = 240;
      if (v48 <= 0x10)
        v48 = 16;
      *v41 = 16 * ((613566757 * (unint64_t)((4095 * v47 - 65520) >> 5)) >> 32);
      v41[1] = 16 * ((613566757 * (unint64_t)((4095 * v48 - 65520) >> 5)) >> 32);
      v40 += 2;
      v41 += 2;
      v28 = __CFADD__(v46++, 1);
    }
    while (!v28);
    goto LABEL_51;
  }
LABEL_52:
  if (v26 != v37)
  {
    v49 = 0;
    v50 = v26 - v37;
    v51 = 2 * v15;
    do
    {
      v52 = v16;
      v53 = v23;
      if ((v9 & 1) != 0)
      {
        v54 = *v16;
        if (v54 >= 0xF0)
          v54 = 240;
        if (v54 <= 0x10)
          v55 = 16;
        else
          v55 = v54;
        if (v16[1] >= 0xF0u)
          v56 = 240;
        else
          v56 = v16[1];
        if (v56 <= 0x10)
          v57 = 16;
        else
          v57 = v56;
        v52 = v16 + 2;
        *v23 = 16 * ((613566757 * (unint64_t)((4095 * v55 - 65520) >> 5)) >> 32);
        v23[1] = 16 * ((613566757 * (unint64_t)((4095 * v57 - 65520) >> 5)) >> 32);
        v53 = v23 + 2;
      }
      if (v39)
      {
        v58 = -(uint64_t)v39;
        do
        {
          v59 = *v52;
          v60 = v52[1];
          if (v59 >= 0xF0)
            v59 = 240;
          if (v59 <= 0x10)
            v59 = 16;
          if (v60 >= 0xF0)
            v60 = 240;
          if (v60 <= 0x10)
            v60 = 16;
          *v53 = 16 * ((613566757 * (unint64_t)((4095 * v59 - 65520) >> 5)) >> 32);
          v53[1] = 16 * ((613566757 * (unint64_t)((4095 * v60 - 65520) >> 5)) >> 32);
          v52 += 2;
          v53 += 2;
          v28 = __CFADD__(v58++, 1);
        }
        while (!v28);
      }
      v16 += v51;
      v23 = (_WORD *)((char *)v23 + v22);
      v49 += 2;
    }
    while (v49 < v50);
  }
  return 0;
}

uint64_t vt_Copy_v2a8_x4as(int32x2_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t *a5, uint64_t a6, _QWORD *a7, _QWORD *a8, uint64_t *a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _WORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  _WORD *v39;
  uint64_t v40;
  __int16 v41;
  __int16 v42;
  BOOL v43;
  uint64_t v44;
  __int16 v45;
  __int16 v46;
  __int16 v47;
  unint64_t v48;
  uint64_t v49;
  unsigned __int8 *v50;
  double *v51;
  __int16 v52;
  uint64_t v53;
  unsigned __int8 *v54;
  int16x4_t v55;
  __int16 v56;
  __int16 v57;
  __int16 v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  __int16 v65;

  v10 = a3[4];
  v9 = a3[5];
  v11 = v10 & 0xFFFFFFFE;
  v12 = a3[3];
  v13 = a3[2] + v10;
  v14 = a5[1];
  v15 = (unsigned __int8 *)(a4[1] + v14 * v9 + v11);
  v17 = a7[4];
  v16 = a7[5];
  v18 = a9[1];
  v19 = (_WORD *)(a8[1] + v18 * v16 + 4 * v17);
  v20 = v13 - v11 + (v13 & 1);
  if (v20 >= a7[2])
    v20 = a7[2];
  if (v12 >= a7[3])
    v12 = a7[3];
  if (v12)
  {
    v21 = 0;
    v22 = *a9;
    v23 = a9[2];
    v24 = a8[2] + v23 * v16;
    v25 = *a8 + *a9 * v16;
    v26 = *a5;
    v27 = a5[2];
    v28 = v24 + 2 * v17;
    v29 = v25 + 2 * v17;
    v30 = a4[2] + v27 * v9 + v11;
    v31 = *a4 + v26 * v9 + v11;
    do
    {
      if (v20)
      {
        for (i = 0; i != v20; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = *(unsigned __int8 *)(v30 + i) | (*(unsigned __int8 *)(v30 + i) << 8);
          *(_WORD *)(v29 + 2 * i) = *(unsigned __int8 *)(v31 + i) << 8;
        }
      }
      v31 += v26;
      v29 += v22;
      v30 += v27;
      v28 += v23;
      ++v21;
    }
    while (v21 != v12);
  }
  v33 = v9 & 1;
  if (v12 >= v33)
    v34 = v9 & 1;
  else
    v34 = 0;
  v35 = v10;
  v36 = v20 >> 1;
  v37 = v10 & 1;
  if (v20 >> 1 >= (v20 - v37) >> 1)
    v36 = (v20 - v37) >> 1;
  if ((v9 & 1) != 0)
  {
    if ((v35 & 1) != 0)
    {
      v38 = v15 + 2;
      v45 = v15[1] << 8;
      *v19 = *v15 << 8;
      v19[1] = v45;
      v39 = v19 + 2;
      if (v36)
      {
LABEL_19:
        v40 = -(uint64_t)v36;
        do
        {
          v41 = *v38;
          v42 = v38[1];
          v38 += 2;
          *v39 = v41 << 8;
          v39[1] = v42 << 8;
          v39 += 2;
          v43 = __CFADD__(v40++, 1);
        }
        while (!v43);
        v44 = 2 * v36;
        goto LABEL_25;
      }
    }
    else
    {
      v38 = v15;
      v39 = v19;
      if (v36)
        goto LABEL_19;
    }
    v44 = 0;
LABEL_25:
    if ((v44 | (unint64_t)v37) < v20)
    {
      v46 = *v38 << 8;
      v47 = v38[1] << 8;
      *v39 = v46;
      v39[1] = v47;
    }
    v15 += v14;
    v19 = (_WORD *)((char *)v19 + v18);
  }
  if (v12 == v34)
  {
    v48 = 0;
  }
  else
  {
    v49 = 0;
    v48 = v12 - v34;
    do
    {
      v50 = v15;
      v51 = (double *)v19;
      if ((v35 & 1) != 0)
      {
        v50 = v15 + 2;
        v52 = v15[1] << 8;
        *v19 = *v15 << 8;
        v19[1] = v52;
        v51 = (double *)(v19 + 2);
      }
      if (v36)
      {
        v53 = -(uint64_t)v36;
        do
        {
          v54 = v50 + 2;
          a1.i8[0] = *v50;
          a1.i8[4] = v50[1];
          v55 = (int16x4_t)vshl_n_s32(a1, 8uLL);
          a1 = (int32x2_t)vuzp1_s16(v55, v55);
          *v51++ = *(double *)&a1;
          v50 += 2;
          v43 = __CFADD__(v53++, 1);
        }
        while (!v43);
      }
      else
      {
        v54 = v50;
      }
      if ((v37 | (2 * v36)) < v20)
      {
        v56 = *v54 << 8;
        v57 = v54[1] << 8;
        *(_WORD *)v51 = v56;
        *((_WORD *)v51 + 1) = v57;
      }
      v15 += v14;
      v19 = (_WORD *)((char *)v19 + v18);
      ++v49;
    }
    while (v49 != v48);
  }
  if (v48 + v33 < v12)
  {
    if ((v35 & 1) != 0)
    {
      v58 = *v15;
      v59 = v15[1];
      v15 += 2;
      *v19 = v58 << 8;
      v19[1] = v59 << 8;
      v19 += 2;
    }
    if (v36)
    {
      v60 = -(uint64_t)v36;
      do
      {
        v61 = *v15;
        v62 = v15[1];
        v15 += 2;
        *v19 = v61 << 8;
        v19[1] = v62 << 8;
        v19 += 2;
        v43 = __CFADD__(v60++, 1);
      }
      while (!v43);
      v63 = 2 * v36;
    }
    else
    {
      v63 = 0;
    }
    if ((v63 | (unint64_t)v37) < v20)
    {
      v64 = *v15 << 8;
      v65 = v15[1] << 8;
      *v19 = v64;
      v19[1] = v65;
    }
  }
  return 0;
}

uint64_t vt_Copy_422v_x444(int32x2_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t *a5, uint64_t a6, _QWORD *a7, _QWORD *a8, uint64_t *a9)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _WORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  _WORD *v32;
  uint64_t v33;
  __int16 v34;
  __int16 v35;
  BOOL v36;
  uint64_t v37;
  __int16 v38;
  __int16 v39;
  __int16 v40;
  unint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  double *v44;
  __int16 v45;
  uint64_t v46;
  unsigned __int8 *v47;
  int16x4_t v48;
  __int16 v49;
  __int16 v50;
  __int16 v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  __int16 v58;

  v10 = a3[4];
  v9 = a3[5];
  v11 = a3[3];
  v12 = a3[2] + v10;
  v13 = a5[1];
  v14 = (unsigned __int8 *)(a4[1] + v13 * v9 + (v10 & 0xFFFFFFFE));
  v15 = a7[4];
  v16 = a7[5];
  v17 = a9[1];
  v18 = (_WORD *)(a8[1] + v17 * v16 + 4 * v15);
  v19 = v12 - (v10 & 0xFFFFFFFE) + (v12 & 1);
  if (v19 >= a7[2])
    v19 = a7[2];
  if (v11 >= a7[3])
    v11 = a7[3];
  if (v11)
  {
    v20 = 0;
    v21 = *a5;
    v22 = *a9;
    v23 = *a8 + *a9 * v16 + 2 * v15;
    v24 = *a4 + *a5 * v9 + (v10 & 0xFFFFFFFE);
    do
    {
      if (v19)
      {
        for (i = 0; i != v19; ++i)
          *(_WORD *)(v23 + 2 * i) = *(unsigned __int8 *)(v24 + i) << 8;
      }
      v24 += v21;
      v23 += v22;
      ++v20;
    }
    while (v20 != v11);
  }
  v26 = v9 & 1;
  if (v11 >= v26)
    v27 = v9 & 1;
  else
    v27 = 0;
  v28 = v10;
  v29 = v19 >> 1;
  v30 = v10 & 1;
  if (v19 >> 1 >= (v19 - v30) >> 1)
    v29 = (v19 - v30) >> 1;
  if ((v9 & 1) != 0)
  {
    if ((v28 & 1) != 0)
    {
      v31 = v14 + 2;
      v38 = v14[1] << 8;
      *v18 = *v14 << 8;
      v18[1] = v38;
      v32 = v18 + 2;
      if (v29)
      {
LABEL_19:
        v33 = -(uint64_t)v29;
        do
        {
          v34 = *v31;
          v35 = v31[1];
          v31 += 2;
          *v32 = v34 << 8;
          v32[1] = v35 << 8;
          v32 += 2;
          v36 = __CFADD__(v33++, 1);
        }
        while (!v36);
        v37 = 2 * v29;
        goto LABEL_25;
      }
    }
    else
    {
      v31 = v14;
      v32 = v18;
      if (v29)
        goto LABEL_19;
    }
    v37 = 0;
LABEL_25:
    if ((v37 | (unint64_t)v30) < v19)
    {
      v39 = *v31 << 8;
      v40 = v31[1] << 8;
      *v32 = v39;
      v32[1] = v40;
    }
    v14 += v13;
    v18 = (_WORD *)((char *)v18 + v17);
  }
  if (v11 == v27)
  {
    v41 = 0;
  }
  else
  {
    v42 = 0;
    v41 = v11 - v27;
    do
    {
      v43 = v14;
      v44 = (double *)v18;
      if ((v28 & 1) != 0)
      {
        v43 = v14 + 2;
        v45 = v14[1] << 8;
        *v18 = *v14 << 8;
        v18[1] = v45;
        v44 = (double *)(v18 + 2);
      }
      if (v29)
      {
        v46 = -(uint64_t)v29;
        do
        {
          v47 = v43 + 2;
          a1.i8[0] = *v43;
          a1.i8[4] = v43[1];
          v48 = (int16x4_t)vshl_n_s32(a1, 8uLL);
          a1 = (int32x2_t)vuzp1_s16(v48, v48);
          *v44++ = *(double *)&a1;
          v43 += 2;
          v36 = __CFADD__(v46++, 1);
        }
        while (!v36);
      }
      else
      {
        v47 = v43;
      }
      if ((v30 | (2 * v29)) < v19)
      {
        v49 = *v47 << 8;
        v50 = v47[1] << 8;
        *(_WORD *)v44 = v49;
        *((_WORD *)v44 + 1) = v50;
      }
      v14 += v13;
      v18 = (_WORD *)((char *)v18 + v17);
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v26 < v11)
  {
    if ((v28 & 1) != 0)
    {
      v51 = *v14;
      v52 = v14[1];
      v14 += 2;
      *v18 = v51 << 8;
      v18[1] = v52 << 8;
      v18 += 2;
    }
    if (v29)
    {
      v53 = -(uint64_t)v29;
      do
      {
        v54 = *v14;
        v55 = v14[1];
        v14 += 2;
        *v18 = v54 << 8;
        v18[1] = v55 << 8;
        v18 += 2;
        v36 = __CFADD__(v53++, 1);
      }
      while (!v36);
      v56 = 2 * v29;
    }
    else
    {
      v56 = 0;
    }
    if ((v56 | (unint64_t)v30) < v19)
    {
      v57 = *v14 << 8;
      v58 = v14[1] << 8;
      *v18 = v57;
      v18[1] = v58;
    }
  }
  return 0;
}

uint64_t vt_Copy_422v_xf44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  unsigned int v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  _WORD *v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  BOOL v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  unint64_t v43;
  uint64_t v44;
  int32x2_t v45;
  uint32x2_t v46;
  unsigned __int8 *v47;
  int16x4_t *v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  uint64_t v52;
  unsigned __int8 *v53;
  uint32x2_t v54;
  int16x4_t v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[3];
  v11 = a2[2] + v9;
  v12 = a4[1];
  v13 = (unsigned __int8 *)(a3[1] + v12 * v8 + (v9 & 0xFFFFFFFE));
  v14 = a6[4];
  v15 = a6[5];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  v18 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v18 >= a6[2])
    v18 = a6[2];
  if (v10 >= a6[3])
    v19 = a6[3];
  else
    v19 = v10;
  if (v19)
  {
    v20 = 0;
    v21 = *a4;
    v22 = *a8;
    v23 = *a7 + *a8 * v15 + 2 * v14;
    v24 = *a3 + *a4 * v8 + (v9 & 0xFFFFFFFE);
    do
    {
      if (v18)
      {
        for (i = 0; i != v18; ++i)
        {
          v26 = *(unsigned __int8 *)(v24 + i);
          if (v26 >= 0xEB)
            v26 = 235;
          if (v26 <= 0x10)
            v26 = 16;
          *(_WORD *)(v23 + 2 * i) = ((((725633745 * (unint64_t)(1023 * v26 - 16368)) >> 32)
                                                  + ((1023 * v26
                                                                  - 16368
                                                                  - ((725633745 * (unint64_t)(1023 * v26 - 16368)) >> 32)) >> 1)) >> 1) & 0xFFC0;
        }
      }
      v24 += v21;
      v23 += v22;
      ++v20;
    }
    while (v20 != v19);
  }
  if (v19 >= (v8 & 1u))
    v27 = v8 & 1;
  else
    v27 = 0;
  v28 = v9;
  v29 = v18 >> 1;
  v30 = v9 & 1;
  if (v18 >> 1 >= (v18 - v30) >> 1)
    v29 = (v18 - v30) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v28 & 1) != 0)
    {
      v38 = *v13;
      v39 = v13[1];
      if (v38 >= 0xF0)
        v38 = 240;
      if (v38 <= 0x10)
        v38 = 16;
      if (v39 >= 0xF0)
        v39 = 240;
      if (v39 <= 0x10)
        v40 = 16;
      else
        v40 = v39;
      v31 = v13 + 2;
      *v17 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v38 - 16368) >> 5)) >> 32) << 6;
      v17[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v40 - 16368) >> 5)) >> 32) << 6;
      v32 = v17 + 2;
      if (v29)
        goto LABEL_24;
    }
    else
    {
      v31 = v13;
      v32 = v17;
      if (v29)
      {
LABEL_24:
        v33 = -(uint64_t)v29;
        do
        {
          v34 = *v31;
          v35 = v31[1];
          if (v34 >= 0xF0)
            v34 = 240;
          if (v34 <= 0x10)
            v34 = 16;
          if (v35 >= 0xF0)
            v35 = 240;
          if (v35 <= 0x10)
            v35 = 16;
          v31 += 2;
          *v32 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v34 - 16368) >> 5)) >> 32) << 6;
          v32[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v35 - 16368) >> 5)) >> 32) << 6;
          v32 += 2;
          v36 = __CFADD__(v33++, 1);
        }
        while (!v36);
        v37 = 2 * v29;
        goto LABEL_47;
      }
    }
    v37 = 0;
LABEL_47:
    if ((v37 | (unint64_t)v30) < v18)
    {
      v41 = *v31;
      v42 = v31[1];
      if (v41 >= 0xF0)
        v41 = 240;
      if (v41 <= 0x10)
        v41 = 16;
      if (v42 >= 0xF0)
        v42 = 240;
      if (v42 <= 0x10)
        v42 = 16;
      *v32 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v41 - 16368) >> 5)) >> 32) << 6;
      v32[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v42 - 16368) >> 5)) >> 32) << 6;
    }
    v13 += v12;
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v19 == v27)
  {
    v43 = 0;
  }
  else
  {
    v44 = 0;
    v43 = v19 - v27;
    v45 = vdup_n_s32(0xFFFFC010);
    v46 = (uint32x2_t)vdup_n_s32(0x24924925u);
    do
    {
      v47 = v13;
      v48 = (int16x4_t *)v17;
      if ((v28 & 1) != 0)
      {
        v49 = *v13;
        v50 = v13[1];
        if (v49 >= 0xF0)
          v49 = 240;
        if (v49 <= 0x10)
          v49 = 16;
        if (v50 >= 0xF0)
          v50 = 240;
        if (v50 <= 0x10)
          v51 = 16;
        else
          v51 = v50;
        v47 = v13 + 2;
        *v17 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v49 - 16368) >> 5)) >> 32) << 6;
        v17[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v51 - 16368) >> 5)) >> 32) << 6;
        v48 = (int16x4_t *)(v17 + 2);
      }
      if (v29)
      {
        v52 = -(uint64_t)v29;
        do
        {
          v53 = v47 + 2;
          v54.i32[0] = *v47;
          v54.i32[1] = v47[1];
          v55 = (int16x4_t)vshl_n_s32(vshrn_n_s64((int64x2_t)vmull_u32(vshr_n_u32((uint32x2_t)vmla_s32(v45, (int32x2_t)vmax_u32(vmin_u32(v54, (uint32x2_t)0xF0000000F0), (uint32x2_t)0x1000000010), (int32x2_t)0x300000003), 5uLL), v46), 0x20uLL), 6uLL);
          *v48++ = vuzp1_s16(v55, v55);
          v47 += 2;
          v36 = __CFADD__(v52++, 1);
        }
        while (!v36);
      }
      else
      {
        v53 = v47;
      }
      if ((v30 | (2 * v29)) < v18)
      {
        v56 = *v53;
        v57 = v53[1];
        if (v56 >= 0xF0)
          v56 = 240;
        if (v56 <= 0x10)
          v56 = 16;
        if (v57 >= 0xF0)
          v57 = 240;
        if (v57 <= 0x10)
          v57 = 16;
        v48->i16[0] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v56 - 16368) >> 5)) >> 32) << 6;
        v48->i16[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v57 - 16368) >> 5)) >> 32) << 6;
      }
      v13 += v12;
      v17 = (_WORD *)((char *)v17 + v16);
      ++v44;
    }
    while (v44 != v43);
  }
  if (v43 + (v8 & 1) < v19)
  {
    if ((v28 & 1) != 0)
    {
      v58 = *v13;
      v59 = v13[1];
      if (v58 >= 0xF0)
        v58 = 240;
      if (v58 <= 0x10)
        v58 = 16;
      if (v59 >= 0xF0)
        v59 = 240;
      if (v59 <= 0x10)
        v59 = 16;
      v13 += 2;
      *v17 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v58 - 16368) >> 5)) >> 32) << 6;
      v17[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v59 - 16368) >> 5)) >> 32) << 6;
      v17 += 2;
    }
    if (v29)
    {
      v60 = -(uint64_t)v29;
      do
      {
        v61 = *v13;
        v62 = v13[1];
        if (v61 >= 0xF0)
          v61 = 240;
        if (v61 <= 0x10)
          v61 = 16;
        if (v62 >= 0xF0)
          v62 = 240;
        if (v62 <= 0x10)
          v62 = 16;
        v13 += 2;
        *v17 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v61 - 16368) >> 5)) >> 32) << 6;
        v17[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v62 - 16368) >> 5)) >> 32) << 6;
        v17 += 2;
        v36 = __CFADD__(v60++, 1);
      }
      while (!v36);
      v29 *= 2;
    }
    if ((v29 | v30) < v18)
    {
      v63 = *v13;
      v64 = v13[1];
      if (v63 >= 0xF0)
        v63 = 240;
      if (v63 <= 0x10)
        v63 = 16;
      if (v64 >= 0xF0)
        v64 = 240;
      if (v64 <= 0x10)
        v64 = 16;
      *v17 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v63 - 16368) >> 5)) >> 32) << 6;
      v17[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v64 - 16368) >> 5)) >> 32) << 6;
    }
  }
  return 0;
}

uint64_t vt_Copy_v2a8_x2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _WORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  unsigned __int8 *v38;
  _WORD *v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  BOOL v43;
  unint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  _WORD *v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  __int16 v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = v10 + v9;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + ((v10 + v9) & 0xFFFFFFFFFFFFFFFELL));
  v15 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v16 = *(_QWORD *)(a6 + 40);
  v17 = 2 * v15;
  v18 = a8[1];
  v19 = (_WORD *)(a7[1] + v18 * v16 + ((2 * v15) & 0x7FFFFFFFFFFFFFFELL));
  v20 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v15;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9) < v20)
    v20 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - v11;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v21 = 0;
    v22 = *a8;
    v23 = a8[2];
    v24 = a7[2] + v23 * v16;
    v25 = *a7 + *a8 * v16;
    v26 = *a4;
    v27 = a4[2];
    v28 = v24 + v17;
    v29 = v25 + v17;
    v30 = a3[2] + v27 * v12 + v11;
    v31 = *a3 + v26 * v12 + v11;
    do
    {
      if (v20)
      {
        for (i = 0; i != v20; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = *(unsigned __int8 *)(v30 + i) | (*(unsigned __int8 *)(v30 + i) << 8);
          *(_WORD *)(v29 + 2 * i) = *(unsigned __int8 *)(v31 + i) << 8;
        }
      }
      v31 += v26;
      v29 += v22;
      v30 += v27;
      v28 += v23;
      ++v21;
    }
    while (v21 != v8);
  }
  v33 = v12 & 1;
  if (v8 >= v33)
    v34 = v12 & 1;
  else
    v34 = 0;
  v35 = v9;
  v36 = v20 >> 1;
  v37 = (v20 - v10) >> 1;
  if (v36 >= v37)
    v36 = v37;
  if ((v12 & 1) != 0)
  {
    if ((v35 & 1) != 0)
    {
      v38 = v14 + 2;
      v40 = v14[1] << 8;
      *v19 = *v14 << 8;
      v19[1] = v40;
      v39 = v19 + 2;
      if (!v36)
      {
LABEL_24:
        v14 += v13;
        v19 = (_WORD *)((char *)v19 + v18);
        goto LABEL_25;
      }
    }
    else
    {
      v38 = v14;
      v39 = v19;
      if (!v36)
        goto LABEL_24;
    }
    v41 = -(uint64_t)v36;
    do
    {
      v42 = v38[1] << 8;
      *v39 = *v38 << 8;
      v39[1] = v42;
      v38 += 2;
      v39 += 2;
      v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_24;
  }
LABEL_25:
  if (v8 == v34)
  {
    v44 = 0;
  }
  else
  {
    v45 = 0;
    v44 = v8 - v34;
    do
    {
      v46 = v14;
      v47 = v19;
      if ((v35 & 1) != 0)
      {
        v46 = v14 + 2;
        v48 = v14[1] << 8;
        *v19 = *v14 << 8;
        v19[1] = v48;
        v47 = v19 + 2;
      }
      if (v36)
      {
        v49 = -(uint64_t)v36;
        do
        {
          v50 = v46[1] << 8;
          *v47 = *v46 << 8;
          v47[1] = v50;
          v46 += 2;
          v47 += 2;
          v43 = __CFADD__(v49++, 1);
        }
        while (!v43);
      }
      v14 += v13;
      v19 = (_WORD *)((char *)v19 + v18);
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v33 < v8)
  {
    if ((v35 & 1) != 0)
    {
      v51 = *v14;
      v52 = v14[1];
      v14 += 2;
      *v19 = v51 << 8;
      v19[1] = v52 << 8;
      v19 += 2;
    }
    if (v36)
    {
      v53 = -(uint64_t)v36;
      do
      {
        v54 = v14[1] << 8;
        *v19 = *v14 << 8;
        v19[1] = v54;
        v14 += 2;
        v19 += 2;
        v43 = __CFADD__(v53++, 1);
      }
      while (!v43);
    }
  }
  return 0;
}

uint64_t vt_Copy_422v_x422(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  unsigned __int8 *v36;
  _WORD *v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  BOOL v41;
  unint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  _WORD *v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  __int16 v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + ((v10 + v9) & 0xFFFFFFFFFFFFFFFELL));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23)
    v24 = v23;
  else
    v24 = v22;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    v28 = *a7 + *a8 * v18 + v19;
    v29 = *a3 + v26 * v12 + v10 + v9;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
          *(_WORD *)(v28 + 2 * i) = *(unsigned __int8 *)(v29 + i) << 8;
      }
      v29 += v26;
      v28 += v27;
      ++v25;
    }
    while (v25 != v8);
  }
  v31 = v12 & 1;
  if (v8 >= v31)
    v32 = v12 & 1;
  else
    v32 = 0;
  v33 = v9;
  v34 = v24 >> 1;
  v35 = (v24 - v10) >> 1;
  if (v34 >= v35)
    v34 = v35;
  if ((v12 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v36 = v14 + 2;
      v38 = v14[1] << 8;
      *v21 = *v14 << 8;
      v21[1] = v38;
      v37 = v21 + 2;
      if (!v34)
      {
LABEL_25:
        v14 += v13;
        v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_26;
      }
    }
    else
    {
      v36 = v14;
      v37 = v21;
      if (!v34)
        goto LABEL_25;
    }
    v39 = -(uint64_t)v34;
    do
    {
      v40 = v36[1] << 8;
      *v37 = *v36 << 8;
      v37[1] = v40;
      v36 += 2;
      v37 += 2;
      v41 = __CFADD__(v39++, 1);
    }
    while (!v41);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v32)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v8 - v32;
    do
    {
      v44 = v14;
      v45 = v21;
      if ((v33 & 1) != 0)
      {
        v44 = v14 + 2;
        v46 = v14[1] << 8;
        *v21 = *v14 << 8;
        v21[1] = v46;
        v45 = v21 + 2;
      }
      if (v34)
      {
        v47 = -(uint64_t)v34;
        do
        {
          v48 = v44[1] << 8;
          *v45 = *v44 << 8;
          v45[1] = v48;
          v44 += 2;
          v45 += 2;
          v41 = __CFADD__(v47++, 1);
        }
        while (!v41);
      }
      v14 += v13;
      v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v31 < v8)
  {
    if ((v33 & 1) != 0)
    {
      v49 = *v14;
      v50 = v14[1];
      v14 += 2;
      *v21 = v49 << 8;
      v21[1] = v50 << 8;
      v21 += 2;
    }
    if (v34)
    {
      v51 = -(uint64_t)v34;
      do
      {
        v52 = v14[1] << 8;
        *v21 = *v14 << 8;
        v21[1] = v52;
        v14 += 2;
        v21 += 2;
        v41 = __CFADD__(v51++, 1);
      }
      while (!v41);
    }
  }
  return 0;
}

uint64_t vt_Copy_422v_xf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  unsigned int v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  unsigned __int8 *v37;
  _WORD *v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  BOOL v46;
  unint64_t v47;
  uint64_t v48;
  unsigned __int8 *v49;
  _WORD *v50;
  unsigned int v51;
  int v52;
  unsigned int v53;
  int v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + ((v10 + v9) & 0xFFFFFFFFFFFFFFFELL));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23)
    v24 = v23;
  else
    v24 = v22;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    v28 = *a7 + *a8 * v18 + v19;
    v29 = *a3 + v26 * v12 + v10 + v9;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
        {
          v31 = *(unsigned __int8 *)(v29 + i);
          if (v31 >= 0xEB)
            v31 = 235;
          if (v31 <= 0x10)
            v31 = 16;
          *(_WORD *)(v28 + 2 * i) = ((((725633745 * (unint64_t)(1023 * v31 - 16368)) >> 32)
                                                  + ((1023 * v31
                                                                  - 16368
                                                                  - ((725633745 * (unint64_t)(1023 * v31 - 16368)) >> 32)) >> 1)) >> 1) & 0xFFC0;
        }
      }
      v29 += v26;
      v28 += v27;
      ++v25;
    }
    while (v25 != v8);
  }
  v32 = v12 & 1;
  if (v8 >= v32)
    v33 = v12 & 1;
  else
    v33 = 0;
  v34 = v9;
  v35 = v24 >> 1;
  v36 = (v24 - v10) >> 1;
  if (v35 >= v36)
    v35 = v36;
  if ((v12 & 1) != 0)
  {
    if ((v34 & 1) != 0)
    {
      v39 = *v14;
      if (v39 >= 0xF0)
        v39 = 240;
      if (v39 <= 0x10)
        v40 = 16;
      else
        v40 = v39;
      if (v14[1] >= 0xF0u)
        v41 = 240;
      else
        v41 = v14[1];
      if (v41 <= 0x10)
        v42 = 16;
      else
        v42 = v41;
      v37 = v14 + 2;
      *v21 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v40 - 16368) >> 5)) >> 32) << 6;
      v21[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v42 - 16368) >> 5)) >> 32) << 6;
      v38 = v21 + 2;
      if (!v35)
        goto LABEL_48;
    }
    else
    {
      v37 = v14;
      v38 = v21;
      if (!v35)
      {
LABEL_48:
        v14 += v13;
        v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_49;
      }
    }
    v43 = -(uint64_t)v35;
    do
    {
      v44 = *v37;
      v45 = v37[1];
      if (v44 >= 0xF0)
        v44 = 240;
      if (v44 <= 0x10)
        v44 = 16;
      if (v45 >= 0xF0)
        v45 = 240;
      if (v45 <= 0x10)
        v45 = 16;
      *v38 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v44 - 16368) >> 5)) >> 32) << 6;
      v38[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v45 - 16368) >> 5)) >> 32) << 6;
      v37 += 2;
      v38 += 2;
      v46 = __CFADD__(v43++, 1);
    }
    while (!v46);
    goto LABEL_48;
  }
LABEL_49:
  if (v8 == v33)
  {
    v47 = 0;
  }
  else
  {
    v48 = 0;
    v47 = v8 - v33;
    do
    {
      v49 = v14;
      v50 = v21;
      if ((v34 & 1) != 0)
      {
        v51 = *v14;
        if (v51 >= 0xF0)
          v51 = 240;
        if (v51 <= 0x10)
          v52 = 16;
        else
          v52 = v51;
        if (v14[1] >= 0xF0u)
          v53 = 240;
        else
          v53 = v14[1];
        if (v53 <= 0x10)
          v54 = 16;
        else
          v54 = v53;
        v49 = v14 + 2;
        *v21 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v52 - 16368) >> 5)) >> 32) << 6;
        v21[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v54 - 16368) >> 5)) >> 32) << 6;
        v50 = v21 + 2;
      }
      if (v35)
      {
        v55 = -(uint64_t)v35;
        do
        {
          v56 = *v49;
          v57 = v49[1];
          if (v56 >= 0xF0)
            v56 = 240;
          if (v56 <= 0x10)
            v56 = 16;
          if (v57 >= 0xF0)
            v57 = 240;
          if (v57 <= 0x10)
            v57 = 16;
          *v50 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v56 - 16368) >> 5)) >> 32) << 6;
          v50[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v57 - 16368) >> 5)) >> 32) << 6;
          v49 += 2;
          v50 += 2;
          v46 = __CFADD__(v55++, 1);
        }
        while (!v46);
      }
      v14 += v13;
      v21 = (_WORD *)((char *)v21 + v20);
      ++v48;
    }
    while (v48 != v47);
  }
  if (v47 + v32 < v8)
  {
    if ((v34 & 1) != 0)
    {
      v58 = *v14;
      v59 = v14[1];
      if (v58 >= 0xF0)
        v58 = 240;
      if (v58 <= 0x10)
        v58 = 16;
      if (v59 >= 0xF0)
        v59 = 240;
      if (v59 <= 0x10)
        v59 = 16;
      v14 += 2;
      *v21 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v58 - 16368) >> 5)) >> 32) << 6;
      v21[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v59 - 16368) >> 5)) >> 32) << 6;
      v21 += 2;
    }
    if (v35)
    {
      v60 = -(uint64_t)v35;
      do
      {
        v61 = *v14;
        v62 = v14[1];
        if (v61 >= 0xF0)
          v61 = 240;
        if (v61 <= 0x10)
          v61 = 16;
        if (v62 >= 0xF0)
          v62 = 240;
        if (v62 <= 0x10)
          v62 = 16;
        *v21 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v61 - 16368) >> 5)) >> 32) << 6;
        v21[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v62 - 16368) >> 5)) >> 32) << 6;
        v14 += 2;
        v21 += 2;
        v46 = __CFADD__(v60++, 1);
      }
      while (!v46);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_422v_x420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned __int8 *v38;
  _WORD *v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  __int16 v43;
  __int16 v44;
  __int16 v45;
  BOOL v46;
  unint64_t v47;
  unint64_t v48;
  unsigned __int8 *v49;
  _WORD *v50;
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  __int16 v54;
  __int16 v55;
  __int16 v56;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v8) + (v10 & 0xFFFFFFFFFFFFFFFELL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - v10;
  v25 = v18 - v17;
  if (v24 < v25)
    v25 = v24;
  v26 = v14 - v13;
  if (v14 - v13 >= v20 - v19)
    v26 = v20 - v19;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + v28 * v13;
    if (v13 >= v8)
      v31 = 0;
    else
      v31 = v28;
    v32 = v30 + v10 + v31;
    v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = *(unsigned __int8 *)(v32 + i) << 8;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= v12)
    v35 = v12;
  else
    v35 = 0;
  v36 = v25 - (v9 & 1);
  if (v25 >> 1 >= v36 >> 1)
    v37 = v36 >> 1;
  else
    v37 = v25 >> 1;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v38 = v16 + 2;
      v40 = (v16[v15 + 1] + (unsigned __int16)v16[1]) << 7;
      *v23 = (v16[v15] + (unsigned __int16)*v16) << 7;
      v23[1] = v40;
      v39 = v23 + 2;
      if (!v37)
      {
LABEL_28:
        v16 += 2 * v15;
        v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_29;
      }
    }
    else
    {
      v38 = v16;
      v39 = v23;
      if (!v37)
        goto LABEL_28;
    }
    v41 = -(uint64_t)v37;
    do
    {
      v42 = *v38;
      v43 = v38[1];
      v44 = v38[v15];
      v45 = v38[v15 + 1];
      v38 += 2;
      *v39 = (v44 + v42) << 7;
      v39[1] = (v45 + v43) << 7;
      v39 += 2;
      v46 = __CFADD__(v41++, 1);
    }
    while (!v46);
    goto LABEL_28;
  }
LABEL_29:
  if (v26 != v35)
  {
    v47 = 0;
    v48 = v26 - v35;
    do
    {
      v49 = v16;
      v50 = v23;
      if ((v9 & 1) != 0)
      {
        v49 = v16 + 2;
        v51 = (v16[v15 + 1] + (unsigned __int16)v16[1]) << 7;
        *v23 = (v16[v15] + (unsigned __int16)*v16) << 7;
        v23[1] = v51;
        v50 = v23 + 2;
      }
      if (v37)
      {
        v52 = -(uint64_t)v37;
        do
        {
          v53 = *v49;
          v54 = v49[1];
          v55 = v49[v15];
          v56 = v49[v15 + 1];
          v49 += 2;
          *v50 = (v55 + v53) << 7;
          v50[1] = (v56 + v54) << 7;
          v50 += 2;
          v46 = __CFADD__(v52++, 1);
        }
        while (!v46);
      }
      v16 += 2 * v15;
      v23 = (_WORD *)((char *)v23 + v22);
      v47 += 2;
    }
    while (v47 < v48);
  }
  return 0;
}

uint64_t vt_CopyDec_422v_x420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned __int8 *v38;
  _WORD *v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  BOOL v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  _WORD *v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v8) + (v10 & 0xFFFFFFFFFFFFFFFELL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - v10;
  v25 = v18 - v17;
  if (v24 < v25)
    v25 = v24;
  v26 = v14 - v13;
  if (v14 - v13 >= v20 - v19)
    v26 = v20 - v19;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + v28 * v13;
    if (v13 >= v8)
      v31 = 0;
    else
      v31 = v28;
    v32 = v30 + v10 + v31;
    v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = *(unsigned __int8 *)(v32 + i) << 8;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= v12)
    v35 = v12;
  else
    v35 = 0;
  v36 = v25 - (v9 & 1);
  if (v25 >> 1 >= v36 >> 1)
    v37 = v36 >> 1;
  else
    v37 = v25 >> 1;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v38 = v16 + 2;
      v40 = v16[1] << 8;
      *v23 = *v16 << 8;
      v23[1] = v40;
      v39 = v23 + 2;
      if (!v37)
      {
LABEL_28:
        v16 += 2 * v15;
        v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_29;
      }
    }
    else
    {
      v38 = v16;
      v39 = v23;
      if (!v37)
        goto LABEL_28;
    }
    v41 = -(uint64_t)v37;
    do
    {
      v42 = v38[1] << 8;
      *v39 = *v38 << 8;
      v39[1] = v42;
      v38 += 2;
      v39 += 2;
      v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_28;
  }
LABEL_29:
  if (v26 != v35)
  {
    v44 = 0;
    v45 = v26 - v35;
    v46 = 2 * v15;
    do
    {
      v47 = v16;
      v48 = v23;
      if ((v9 & 1) != 0)
      {
        v47 = v16 + 2;
        v49 = v16[1] << 8;
        *v23 = *v16 << 8;
        v23[1] = v49;
        v48 = v23 + 2;
      }
      if (v37)
      {
        v50 = -(uint64_t)v37;
        do
        {
          v51 = v47[1] << 8;
          *v48 = *v47 << 8;
          v48[1] = v51;
          v47 += 2;
          v48 += 2;
          v43 = __CFADD__(v50++, 1);
        }
        while (!v43);
      }
      v16 += v46;
      v23 = (_WORD *)((char *)v23 + v22);
      v44 += 2;
    }
    while (v44 < v45);
  }
  return 0;
}

uint64_t vt_CopyAvg_422v_xf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int8 *v40;
  _WORD *v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unint64_t v55;
  unint64_t v56;
  unsigned __int8 *v57;
  _WORD *v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  int v62;
  unsigned int v63;
  int v64;
  unsigned int v65;
  int v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v8) + (v10 & 0xFFFFFFFFFFFFFFFELL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - v10;
  v25 = v18 - v17;
  if (v24 < v25)
    v25 = v24;
  v26 = v14 - v13;
  if (v14 - v13 >= v20 - v19)
    v26 = v20 - v19;
  if (v26)
  {
    v27 = 0;
    v28 = v13 >= v8;
    v29 = *a4;
    v30 = *a8;
    v31 = *a3 + *a4 * v13;
    if (v28)
      v32 = 0;
    else
      v32 = *a4;
    v33 = v31 + v10 + v32;
    v34 = *a7 + v30 * v19 + v21;
    do
    {
      if (v25)
      {
        for (i = 0; i != v25; ++i)
        {
          v36 = *(unsigned __int8 *)(v33 + i);
          if (v36 >= 0xEB)
            v36 = 235;
          if (v36 <= 0x10)
            v36 = 16;
          *(_WORD *)(v34 + 2 * i) = ((((725633745 * (unint64_t)(1023 * v36 - 16368)) >> 32)
                                                  + ((1023 * v36
                                                                  - 16368
                                                                  - ((725633745 * (unint64_t)(1023 * v36 - 16368)) >> 32)) >> 1)) >> 1) & 0xFFC0;
        }
      }
      v33 += v29;
      v34 += v30;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= v12)
    v37 = v12;
  else
    v37 = 0;
  v38 = v25 - (v9 & 1);
  if (v25 >> 1 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v25 >> 1;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v42 = *v16;
      if (v42 >= 0xF0)
        v42 = 240;
      if (v42 <= 0x10)
        v43 = 16;
      else
        v43 = v42;
      if (v16[1] >= 0xF0u)
        v44 = 240;
      else
        v44 = v16[1];
      if (v44 <= 0x10)
        v45 = 16;
      else
        v45 = v44;
      if (v16[v15] >= 0xF0u)
        v46 = 240;
      else
        v46 = v16[v15];
      if (v46 <= 0x10)
        v47 = 16;
      else
        v47 = v46;
      if (v16[v15 + 1] >= 0xF0u)
        v48 = 240;
      else
        v48 = v16[v15 + 1];
      if (v48 <= 0x10)
        v49 = 16;
      else
        v49 = v48;
      v40 = v16 + 2;
      *v23 = (32
            * (((613566757 * (unint64_t)((1023 * v47 - 16368) >> 5)) >> 32)
             + ((613566757 * (unint64_t)((1023 * v43 - 16368) >> 5)) >> 32))
            + 32) & 0xFFC0;
      v23[1] = (32
              * (((613566757 * (unint64_t)((1023 * v49 - 16368) >> 5)) >> 32)
               + ((613566757 * (unint64_t)((1023 * v45 - 16368) >> 5)) >> 32))
              + 32) & 0xFFC0;
      v41 = v23 + 2;
      if (!v39)
        goto LABEL_71;
    }
    else
    {
      v40 = v16;
      v41 = v23;
      if (!v39)
      {
LABEL_71:
        v16 += 2 * v15;
        v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_72;
      }
    }
    v50 = -(uint64_t)v39;
    do
    {
      v51 = *v40;
      v52 = v40[1];
      v53 = v40[v15];
      v54 = v40[v15 + 1];
      if (v51 >= 0xF0)
        v51 = 240;
      if (v51 <= 0x10)
        v51 = 16;
      if (v52 >= 0xF0)
        v52 = 240;
      if (v52 <= 0x10)
        v52 = 16;
      if (v53 >= 0xF0)
        v53 = 240;
      if (v53 <= 0x10)
        v53 = 16;
      if (v54 >= 0xF0)
        v54 = 240;
      if (v54 <= 0x10)
        v54 = 16;
      v40 += 2;
      *v41 = (32
            * (((613566757 * (unint64_t)((1023 * v53 - 16368) >> 5)) >> 32)
             + ((613566757 * (unint64_t)((1023 * v51 - 16368) >> 5)) >> 32))
            + 32) & 0xFFC0;
      v41[1] = (32
              * (((613566757 * (unint64_t)((1023 * v54 - 16368) >> 5)) >> 32)
               + ((613566757 * (unint64_t)((1023 * v52 - 16368) >> 5)) >> 32))
              + 32) & 0xFFC0;
      v41 += 2;
      v28 = __CFADD__(v50++, 1);
    }
    while (!v28);
    goto LABEL_71;
  }
LABEL_72:
  if (v26 != v37)
  {
    v55 = 0;
    v56 = v26 - v37;
    do
    {
      v57 = v16;
      v58 = v23;
      if ((v9 & 1) != 0)
      {
        v59 = *v16;
        if (v59 >= 0xF0)
          v59 = 240;
        if (v59 <= 0x10)
          v60 = 16;
        else
          v60 = v59;
        if (v16[1] >= 0xF0u)
          v61 = 240;
        else
          v61 = v16[1];
        if (v61 <= 0x10)
          v62 = 16;
        else
          v62 = v61;
        if (v16[v15] >= 0xF0u)
          v63 = 240;
        else
          v63 = v16[v15];
        if (v63 <= 0x10)
          v64 = 16;
        else
          v64 = v63;
        if (v16[v15 + 1] >= 0xF0u)
          v65 = 240;
        else
          v65 = v16[v15 + 1];
        if (v65 <= 0x10)
          v66 = 16;
        else
          v66 = v65;
        v57 = v16 + 2;
        *v23 = (32
              * (((613566757 * (unint64_t)((1023 * v64 - 16368) >> 5)) >> 32)
               + ((613566757 * (unint64_t)((1023 * v60 - 16368) >> 5)) >> 32))
              + 32) & 0xFFC0;
        v23[1] = (32
                * (((613566757 * (unint64_t)((1023 * v66 - 16368) >> 5)) >> 32)
                 + ((613566757 * (unint64_t)((1023 * v62 - 16368) >> 5)) >> 32))
                + 32) & 0xFFC0;
        v58 = v23 + 2;
      }
      if (v39)
      {
        v67 = -(uint64_t)v39;
        do
        {
          v68 = *v57;
          v69 = v57[1];
          v70 = v57[v15];
          v71 = v57[v15 + 1];
          if (v68 >= 0xF0)
            v68 = 240;
          if (v68 <= 0x10)
            v68 = 16;
          if (v69 >= 0xF0)
            v69 = 240;
          if (v69 <= 0x10)
            v69 = 16;
          if (v70 >= 0xF0)
            v70 = 240;
          if (v70 <= 0x10)
            v70 = 16;
          if (v71 >= 0xF0)
            v71 = 240;
          if (v71 <= 0x10)
            v71 = 16;
          v57 += 2;
          *v58 = (32
                * (((613566757 * (unint64_t)((1023 * v70 - 16368) >> 5)) >> 32)
                 + ((613566757 * (unint64_t)((1023 * v68 - 16368) >> 5)) >> 32))
                + 32) & 0xFFC0;
          v58[1] = (32
                  * (((613566757 * (unint64_t)((1023 * v71 - 16368) >> 5)) >> 32)
                   + ((613566757 * (unint64_t)((1023 * v69 - 16368) >> 5)) >> 32))
                  + 32) & 0xFFC0;
          v58 += 2;
          v28 = __CFADD__(v67++, 1);
        }
        while (!v28);
      }
      v16 += 2 * v15;
      v23 = (_WORD *)((char *)v23 + v22);
      v55 += 2;
    }
    while (v55 < v56);
  }
  return 0;
}

uint64_t vt_CopyDec_422v_xf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int8 *v40;
  _WORD *v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  int v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unsigned __int8 *v52;
  _WORD *v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  int v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v8) + (v10 & 0xFFFFFFFFFFFFFFFELL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - v10;
  v25 = v18 - v17;
  if (v24 < v25)
    v25 = v24;
  v26 = v14 - v13;
  if (v14 - v13 >= v20 - v19)
    v26 = v20 - v19;
  if (v26)
  {
    v27 = 0;
    v28 = v13 >= v8;
    v29 = *a4;
    v30 = *a8;
    v31 = *a3 + *a4 * v13;
    if (v28)
      v32 = 0;
    else
      v32 = *a4;
    v33 = v31 + v10 + v32;
    v34 = *a7 + v30 * v19 + v21;
    do
    {
      if (v25)
      {
        for (i = 0; i != v25; ++i)
        {
          v36 = *(unsigned __int8 *)(v33 + i);
          if (v36 >= 0xEB)
            v36 = 235;
          if (v36 <= 0x10)
            v36 = 16;
          *(_WORD *)(v34 + 2 * i) = ((((725633745 * (unint64_t)(1023 * v36 - 16368)) >> 32)
                                                  + ((1023 * v36
                                                                  - 16368
                                                                  - ((725633745 * (unint64_t)(1023 * v36 - 16368)) >> 32)) >> 1)) >> 1) & 0xFFC0;
        }
      }
      v33 += v29;
      v34 += v30;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= v12)
    v37 = v12;
  else
    v37 = 0;
  v38 = v25 - (v9 & 1);
  if (v25 >> 1 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v25 >> 1;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v42 = *v16;
      if (v42 >= 0xF0)
        v42 = 240;
      if (v42 <= 0x10)
        v43 = 16;
      else
        v43 = v42;
      if (v16[1] >= 0xF0u)
        v44 = 240;
      else
        v44 = v16[1];
      if (v44 <= 0x10)
        v45 = 16;
      else
        v45 = v44;
      v40 = v16 + 2;
      *v23 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v43 - 16368) >> 5)) >> 32) << 6;
      v23[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v45 - 16368) >> 5)) >> 32) << 6;
      v41 = v23 + 2;
      if (!v39)
        goto LABEL_51;
    }
    else
    {
      v40 = v16;
      v41 = v23;
      if (!v39)
      {
LABEL_51:
        v16 += 2 * v15;
        v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_52;
      }
    }
    v46 = -(uint64_t)v39;
    do
    {
      v47 = *v40;
      v48 = v40[1];
      if (v47 >= 0xF0)
        v47 = 240;
      if (v47 <= 0x10)
        v47 = 16;
      if (v48 >= 0xF0)
        v48 = 240;
      if (v48 <= 0x10)
        v48 = 16;
      *v41 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v47 - 16368) >> 5)) >> 32) << 6;
      v41[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v48 - 16368) >> 5)) >> 32) << 6;
      v40 += 2;
      v41 += 2;
      v28 = __CFADD__(v46++, 1);
    }
    while (!v28);
    goto LABEL_51;
  }
LABEL_52:
  if (v26 != v37)
  {
    v49 = 0;
    v50 = v26 - v37;
    v51 = 2 * v15;
    do
    {
      v52 = v16;
      v53 = v23;
      if ((v9 & 1) != 0)
      {
        v54 = *v16;
        if (v54 >= 0xF0)
          v54 = 240;
        if (v54 <= 0x10)
          v55 = 16;
        else
          v55 = v54;
        if (v16[1] >= 0xF0u)
          v56 = 240;
        else
          v56 = v16[1];
        if (v56 <= 0x10)
          v57 = 16;
        else
          v57 = v56;
        v52 = v16 + 2;
        *v23 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v55 - 16368) >> 5)) >> 32) << 6;
        v23[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v57 - 16368) >> 5)) >> 32) << 6;
        v53 = v23 + 2;
      }
      if (v39)
      {
        v58 = -(uint64_t)v39;
        do
        {
          v59 = *v52;
          v60 = v52[1];
          if (v59 >= 0xF0)
            v59 = 240;
          if (v59 <= 0x10)
            v59 = 16;
          if (v60 >= 0xF0)
            v60 = 240;
          if (v60 <= 0x10)
            v60 = 16;
          *v53 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v59 - 16368) >> 5)) >> 32) << 6;
          v53[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v60 - 16368) >> 5)) >> 32) << 6;
          v52 += 2;
          v53 += 2;
          v28 = __CFADD__(v58++, 1);
        }
        while (!v28);
      }
      v16 += v51;
      v23 = (_WORD *)((char *)v23 + v22);
      v49 += 2;
    }
    while (v49 < v50);
  }
  return 0;
}

uint64_t vt_Copy_v2a8_v4a8(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int16 *v18;
  size_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  size_t v30;
  uint64_t v31;
  __int16 *v32;
  __int16 *v33;
  uint64_t v34;
  __int16 v35;
  BOOL v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  __int16 *v41;
  uint64_t v42;
  char v43;
  char v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v8 = a2[4];
  v9 = a2[5];
  v10 = v8 & 0xFFFFFFFE;
  v11 = a4[1];
  v12 = (__int16 *)(a3[1] + v11 * v9 + v10);
  v13 = a6[4];
  v14 = a6[5];
  v15 = a6[2];
  v16 = a6[3];
  v17 = a8[1];
  v18 = (__int16 *)(a7[1] + v17 * v14 + 2 * v13);
  if (a2[2] + v8 - v10 + ((a2[2] + v8) & 1uLL) >= v15)
    v19 = v15;
  else
    v19 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  if (a2[3] >= v16)
    v20 = v16;
  else
    v20 = a2[3];
  if (v20)
  {
    v50 = a8[1];
    v52 = a4[1];
    v53 = a8[2];
    v21 = (char *)(a7[2] + v53 * v14 + v13);
    v54 = *a8;
    v22 = (char *)(*a7 + *a8 * v14 + v13);
    v23 = a4[2];
    v24 = (char *)(a3[2] + v23 * v9 + v10);
    v25 = *a4;
    v26 = (char *)(*a3 + *a4 * v9 + v10);
    v51 = v20;
    do
    {
      memcpy(v22, v26, v19);
      memcpy(v21, v24, v19);
      v26 += v25;
      v22 += v54;
      v24 += v23;
      v21 += v53;
      --v20;
    }
    while (v20);
    v17 = v50;
    v8 = a2[4];
    v9 = a2[5];
    v20 = v51;
    v11 = v52;
  }
  v27 = v9 & 1;
  if (v20 >= v27)
    v28 = v9 & 1;
  else
    v28 = 0;
  v29 = v8;
  v30 = v19 >> 1;
  v31 = v8 & 1;
  if (v19 >> 1 >= (v19 - v31) >> 1)
    v30 = (v19 - v31) >> 1;
  if ((v9 & 1) != 0)
  {
    v32 = v12;
    if ((v29 & 1) != 0)
    {
      v32 = v12 + 1;
      *v18 = *v12;
      v33 = v18 + 1;
      if (v30)
      {
LABEL_19:
        v34 = -(uint64_t)v30;
        do
        {
          v35 = *v32++;
          *v33++ = v35;
          v36 = __CFADD__(v34++, 1);
        }
        while (!v36);
        v37 = 2 * v30;
        goto LABEL_25;
      }
    }
    else
    {
      v33 = v18;
      if (v30)
        goto LABEL_19;
    }
    v37 = 0;
LABEL_25:
    if ((v37 | (unint64_t)v31) < v19)
      *v33 = *v32;
    v12 = (__int16 *)((char *)v12 + v11);
    v18 = (__int16 *)((char *)v18 + v17);
  }
  if (v20 == v28)
  {
    v38 = 0;
  }
  else
  {
    v39 = 0;
    v38 = v20 - v28;
    do
    {
      v40 = (char *)v12;
      v41 = v18;
      if ((v29 & 1) != 0)
      {
        v40 = (char *)(v12 + 1);
        *v18 = *v12;
        v41 = v18 + 1;
      }
      if (v30)
      {
        v42 = -(uint64_t)v30;
        do
        {
          v43 = *v40;
          v44 = v40[1];
          v40 += 2;
          *(_BYTE *)v41 = v43;
          *((_BYTE *)v41 + 1) = v44;
          *((_BYTE *)v41 + 2) = v43;
          *((_BYTE *)v41 + 3) = v44;
          v41 += 2;
          v36 = __CFADD__(v42++, 1);
        }
        while (!v36);
      }
      if ((v31 | (2 * v30)) < v19)
        *v41 = *(_WORD *)v40;
      v12 = (__int16 *)((char *)v12 + v11);
      v18 = (__int16 *)((char *)v18 + v17);
      ++v39;
    }
    while (v39 != v38);
  }
  if (v38 + v27 < v20)
  {
    if ((v29 & 1) != 0)
    {
      v45 = *v12++;
      *v18++ = v45;
    }
    if (v30)
    {
      v46 = -(uint64_t)v30;
      do
      {
        v47 = *v12++;
        *v18++ = v47;
        v36 = __CFADD__(v46++, 1);
      }
      while (!v36);
      v30 *= 2;
    }
    if ((v30 | v31) < v19)
      *v18 = *v12;
  }
  return 0;
}

uint64_t vt_Copy_422v_444v(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 *v15;
  size_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  size_t v26;
  uint64_t v27;
  __int16 *v28;
  __int16 *v29;
  uint64_t v30;
  __int16 v31;
  BOOL v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  __int16 *v37;
  uint64_t v38;
  char v39;
  char v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  unint64_t v45;
  uint64_t v46;

  v8 = a2[4];
  v9 = a2[5];
  v10 = a4[1];
  v11 = (__int16 *)(a3[1] + v10 * v9 + (v8 & 0xFFFFFFFE));
  v12 = a6[4];
  v13 = a6[5];
  v14 = a8[1];
  v15 = (__int16 *)(a7[1] + v14 * v13 + 2 * v12);
  if (a2[2] + v8 - (v8 & 0xFFFFFFFE) + ((a2[2] + v8) & 1uLL) >= a6[2])
    v16 = a6[2];
  else
    v16 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  if (a2[3] >= a6[3])
    v17 = a6[3];
  else
    v17 = a2[3];
  if (v17)
  {
    v45 = v17;
    v46 = a4[1];
    v19 = *a4;
    v20 = *a8;
    v21 = (char *)(*a7 + *a8 * v13 + v12);
    v22 = (char *)(*a3 + *a4 * v9 + (v8 & 0xFFFFFFFE));
    do
    {
      memcpy(v21, v22, v16);
      v22 += v19;
      v21 += v20;
      --v17;
    }
    while (v17);
    v8 = a2[4];
    v9 = a2[5];
    v17 = v45;
    v10 = v46;
  }
  v23 = v9 & 1;
  if (v17 >= v23)
    v24 = v9 & 1;
  else
    v24 = 0;
  v25 = v8;
  v26 = v16 >> 1;
  v27 = v8 & 1;
  if (v16 >> 1 >= (v16 - v27) >> 1)
    v26 = (v16 - v27) >> 1;
  if ((v9 & 1) != 0)
  {
    v28 = v11;
    if ((v25 & 1) != 0)
    {
      v28 = v11 + 1;
      *v15 = *v11;
      v29 = v15 + 1;
      if (v26)
      {
LABEL_19:
        v30 = -(uint64_t)v26;
        do
        {
          v31 = *v28++;
          *v29++ = v31;
          v32 = __CFADD__(v30++, 1);
        }
        while (!v32);
        v33 = 2 * v26;
        goto LABEL_25;
      }
    }
    else
    {
      v29 = v15;
      if (v26)
        goto LABEL_19;
    }
    v33 = 0;
LABEL_25:
    if ((v33 | (unint64_t)v27) < v16)
      *v29 = *v28;
    v11 = (__int16 *)((char *)v11 + v10);
    v15 = (__int16 *)((char *)v15 + v14);
  }
  if (v17 == v24)
  {
    v34 = 0;
  }
  else
  {
    v35 = 0;
    v34 = v17 - v24;
    do
    {
      v36 = (char *)v11;
      v37 = v15;
      if ((v25 & 1) != 0)
      {
        v36 = (char *)(v11 + 1);
        *v15 = *v11;
        v37 = v15 + 1;
      }
      if (v26)
      {
        v38 = -(uint64_t)v26;
        do
        {
          v39 = *v36;
          v40 = v36[1];
          v36 += 2;
          *(_BYTE *)v37 = v39;
          *((_BYTE *)v37 + 1) = v40;
          *((_BYTE *)v37 + 2) = v39;
          *((_BYTE *)v37 + 3) = v40;
          v37 += 2;
          v32 = __CFADD__(v38++, 1);
        }
        while (!v32);
      }
      if ((v27 | (2 * v26)) < v16)
        *v37 = *(_WORD *)v36;
      v11 = (__int16 *)((char *)v11 + v10);
      v15 = (__int16 *)((char *)v15 + v14);
      ++v35;
    }
    while (v35 != v34);
  }
  if (v34 + v23 < v17)
  {
    if ((v25 & 1) != 0)
    {
      v41 = *v11++;
      *v15++ = v41;
    }
    if (v26)
    {
      v42 = -(uint64_t)v26;
      do
      {
        v43 = *v11++;
        *v15++ = v43;
        v32 = __CFADD__(v42++, 1);
      }
      while (!v32);
      v26 *= 2;
    }
    if ((v26 | v27) < v16)
      *v15 = *v11;
  }
  return 0;
}

uint64_t vt_Copy_422v_444f(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  unsigned int v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  _BYTE *v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  BOOL v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  __int16 v40;
  unsigned int v41;
  unsigned int v42;
  unint64_t v43;
  uint64_t v44;
  unsigned __int8 *v45;
  _BYTE *v46;
  unsigned int v47;
  unsigned int v48;
  __int16 v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[3];
  v11 = a4[1];
  v12 = (unsigned __int8 *)(a3[1] + v11 * v8 + (v9 & 0xFFFFFFFE));
  v13 = a6[4];
  v14 = a6[5];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a8[1];
  v18 = (_BYTE *)(a7[1] + v17 * v14 + 2 * v13);
  v19 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v19 >= v16)
    v19 = v16;
  if (v10 >= v15)
    v10 = v15;
  if (v10)
  {
    v20 = 0;
    v21 = *a4;
    v22 = *a8;
    v23 = *a7 + *a8 * v14 + v13;
    v24 = *a3 + *a4 * v8 + (a2[4] & 0xFFFFFFFELL);
    do
    {
      if (v19)
      {
        for (i = 0; i != v19; ++i)
        {
          v26 = *(unsigned __int8 *)(v24 + i);
          if (v26 >= 0xEB)
            v26 = 235;
          if (v26 <= 0x10)
            v26 = 16;
          *(_BYTE *)(v23 + i) = (((255 * v26
                                 - 4080
                                 - ((11073 * (unsigned __int16)(255 * v26 - 4080)) >> 16)) >> 1)
                               + ((11073 * (unsigned __int16)(255 * v26 - 4080)) >> 16)) >> 7;
        }
      }
      v24 += v21;
      v23 += v22;
      ++v20;
    }
    while (v20 != v10);
    v9 = a2[4];
    v8 = a2[5];
  }
  if (v10 >= (v8 & 1u))
    v27 = v8 & 1;
  else
    v27 = 0;
  v28 = v9;
  v29 = v19 >> 1;
  v30 = v9 & 1;
  if (v19 >> 1 >= (v19 - v30) >> 1)
    v29 = (v19 - v30) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v28 & 1) != 0)
    {
      v38 = *v12;
      v39 = v12[1];
      if (v38 >= 0xF0)
        v38 = 240;
      if (v38 <= 0x10)
        LOWORD(v38) = 16;
      if (v39 >= 0xF0)
        v39 = 240;
      if (v39 <= 0x10)
        v40 = 16;
      else
        v40 = v39;
      v31 = v12 + 2;
      *v18 = (9363 * ((unsigned __int16)(255 * v38 - 4080) >> 5)) >> 16;
      v18[1] = (9363 * ((unsigned __int16)(255 * v40 - 4080) >> 5)) >> 16;
      v32 = v18 + 2;
      if (v29)
        goto LABEL_24;
    }
    else
    {
      v31 = v12;
      v32 = v18;
      if (v29)
      {
LABEL_24:
        v33 = -(uint64_t)v29;
        do
        {
          v34 = *v31;
          v35 = v31[1];
          if (v34 >= 0xF0)
            v34 = 240;
          if (v34 <= 0x10)
            LOWORD(v34) = 16;
          if (v35 >= 0xF0)
            v35 = 240;
          if (v35 <= 0x10)
            LOWORD(v35) = 16;
          v31 += 2;
          *v32 = (9363 * ((unsigned __int16)(255 * v34 - 4080) >> 5)) >> 16;
          v32[1] = (9363 * ((unsigned __int16)(255 * v35 - 4080) >> 5)) >> 16;
          v32 += 2;
          v36 = __CFADD__(v33++, 1);
        }
        while (!v36);
        v37 = 2 * v29;
        goto LABEL_47;
      }
    }
    v37 = 0;
LABEL_47:
    if ((v37 | (unint64_t)v30) < v19)
    {
      v41 = *v31;
      v42 = v31[1];
      if (v41 >= 0xF0)
        v41 = 240;
      if (v41 <= 0x10)
        LOWORD(v41) = 16;
      if (v42 >= 0xF0)
        v42 = 240;
      if (v42 <= 0x10)
        LOWORD(v42) = 16;
      *v32 = (9363 * ((unsigned __int16)(255 * v41 - 4080) >> 5)) >> 16;
      v32[1] = (9363 * ((unsigned __int16)(255 * v42 - 4080) >> 5)) >> 16;
    }
    v12 += v11;
    v18 += v17;
  }
  if (v10 == v27)
  {
    v43 = 0;
  }
  else
  {
    v44 = 0;
    v43 = v10 - v27;
    do
    {
      v45 = v12;
      v46 = v18;
      if ((v28 & 1) != 0)
      {
        v47 = *v12;
        v48 = v12[1];
        if (v47 >= 0xF0)
          v47 = 240;
        if (v47 <= 0x10)
          LOWORD(v47) = 16;
        if (v48 >= 0xF0)
          v48 = 240;
        if (v48 <= 0x10)
          v49 = 16;
        else
          v49 = v48;
        v45 = v12 + 2;
        *v18 = (9363 * ((unsigned __int16)(255 * v47 - 4080) >> 5)) >> 16;
        v18[1] = (9363 * ((unsigned __int16)(255 * v49 - 4080) >> 5)) >> 16;
        v46 = v18 + 2;
      }
      if (v29)
      {
        v50 = -(uint64_t)v29;
        do
        {
          v51 = *v45;
          v52 = v45[1];
          if (v51 >= 0xF0)
            v51 = 240;
          if (v51 <= 0x10)
            LOWORD(v51) = 16;
          if (v52 >= 0xF0)
            v52 = 240;
          if (v52 <= 0x10)
            LOWORD(v52) = 16;
          v53 = (9363 * ((unsigned __int16)(255 * v51 - 4080) >> 5)) >> 16;
          v54 = (9363 * ((unsigned __int16)(255 * v52 - 4080) >> 5)) >> 16;
          *v46 = v53;
          v46[1] = v54;
          v45 += 2;
          v46[2] = v53;
          v46[3] = v54;
          v46 += 4;
          v36 = __CFADD__(v50++, 1);
        }
        while (!v36);
      }
      if ((v30 | (2 * v29)) < v19)
      {
        v55 = *v45;
        v56 = v45[1];
        if (v55 >= 0xF0)
          v55 = 240;
        if (v55 <= 0x10)
          LOWORD(v55) = 16;
        if (v56 >= 0xF0)
          v56 = 240;
        if (v56 <= 0x10)
          LOWORD(v56) = 16;
        *v46 = (9363 * ((unsigned __int16)(255 * v55 - 4080) >> 5)) >> 16;
        v46[1] = (9363 * ((unsigned __int16)(255 * v56 - 4080) >> 5)) >> 16;
      }
      v12 += v11;
      v18 += v17;
      ++v44;
    }
    while (v44 != v43);
  }
  if (v43 + (v8 & 1) < v10)
  {
    if ((v28 & 1) != 0)
    {
      v57 = *v12;
      v58 = v12[1];
      if (v57 >= 0xF0)
        v57 = 240;
      if (v57 <= 0x10)
        LOWORD(v57) = 16;
      if (v58 >= 0xF0)
        v58 = 240;
      if (v58 <= 0x10)
        LOWORD(v58) = 16;
      v12 += 2;
      *v18 = (9363 * ((unsigned __int16)(255 * v57 - 4080) >> 5)) >> 16;
      v18[1] = (9363 * ((unsigned __int16)(255 * v58 - 4080) >> 5)) >> 16;
      v18 += 2;
    }
    if (v29)
    {
      v59 = -(uint64_t)v29;
      do
      {
        v60 = *v12;
        v61 = v12[1];
        if (v60 >= 0xF0)
          v60 = 240;
        if (v60 <= 0x10)
          LOWORD(v60) = 16;
        if (v61 >= 0xF0)
          v61 = 240;
        if (v61 <= 0x10)
          LOWORD(v61) = 16;
        v12 += 2;
        *v18 = (9363 * ((unsigned __int16)(255 * v60 - 4080) >> 5)) >> 16;
        v18[1] = (9363 * ((unsigned __int16)(255 * v61 - 4080) >> 5)) >> 16;
        v18 += 2;
        v36 = __CFADD__(v59++, 1);
      }
      while (!v36);
      v62 = 2 * v29;
    }
    else
    {
      v62 = 0;
    }
    if ((v62 | (unint64_t)v30) < v19)
    {
      v63 = *v12;
      v64 = v12[1];
      if (v63 >= 0xF0)
        v63 = 240;
      if (v63 <= 0x10)
        LOWORD(v63) = 16;
      if (v64 >= 0xF0)
        v64 = 240;
      if (v64 <= 0x10)
        LOWORD(v64) = 16;
      *v18 = (9363 * ((unsigned __int16)(255 * v63 - 4080) >> 5)) >> 16;
      v18[1] = (9363 * ((unsigned __int16)(255 * v64 - 4080) >> 5)) >> 16;
    }
  }
  return 0;
}

uint64_t vt_Copy_422v_422f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned __int8 *v35;
  _BYTE *v36;
  unsigned int v37;
  __int16 v38;
  unsigned int v39;
  __int16 v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  BOOL v44;
  unint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  _BYTE *v48;
  unsigned int v49;
  __int16 v50;
  unsigned int v51;
  __int16 v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = v10 + v9;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + ((v10 + v9) & 0xFFFFFFFFFFFFFFFELL));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = a8[1];
  v20 = (_BYTE *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v22 = v17 - v16;
  if (v21 >= v22)
    v21 = v22;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = *a7 + *a8 * v18 + v16;
    v27 = *a3 + *a4 * v12 + v11;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
        {
          v29 = *(unsigned __int8 *)(v27 + i);
          if (v29 >= 0xEB)
            v29 = 235;
          if (v29 <= 0x10)
            v29 = 16;
          *(_BYTE *)(v26 + i) = (((255 * v29
                                 - 4080
                                 - ((11073 * (unsigned __int16)(255 * v29 - 4080)) >> 16)) >> 1)
                               + ((11073 * (unsigned __int16)(255 * v29 - 4080)) >> 16)) >> 7;
        }
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v8);
    v9 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40);
    v10 = v9 & 1;
  }
  v30 = v12 & 1;
  if (v8 >= v30)
    v31 = v12 & 1;
  else
    v31 = 0;
  v32 = v21 >> 1;
  v33 = v21 - v10;
  if (v32 >= v33 >> 1)
    v34 = v33 >> 1;
  else
    v34 = v32;
  if ((v12 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v37 = *v14;
      if (v37 >= 0xF0)
        v37 = 240;
      if (v37 <= 0x10)
        v38 = 16;
      else
        v38 = v37;
      if (v14[1] >= 0xF0u)
        v39 = 240;
      else
        v39 = v14[1];
      if (v39 <= 0x10)
        v40 = 16;
      else
        v40 = v39;
      v35 = v14 + 2;
      *v20 = (9363 * ((unsigned __int16)(255 * v38 - 4080) >> 5)) >> 16;
      v20[1] = (9363 * ((unsigned __int16)(255 * v40 - 4080) >> 5)) >> 16;
      v36 = v20 + 2;
      if (!v34)
        goto LABEL_49;
    }
    else
    {
      v35 = v14;
      v36 = v20;
      if (!v34)
      {
LABEL_49:
        v14 += v13;
        v20 += v19;
        goto LABEL_50;
      }
    }
    v41 = -(uint64_t)v34;
    do
    {
      v42 = *v35;
      v43 = v35[1];
      if (v42 >= 0xF0)
        v42 = 240;
      if (v42 <= 0x10)
        LOWORD(v42) = 16;
      if (v43 >= 0xF0)
        v43 = 240;
      if (v43 <= 0x10)
        LOWORD(v43) = 16;
      *v36 = (9363 * ((unsigned __int16)(255 * v42 - 4080) >> 5)) >> 16;
      v36[1] = (9363 * ((unsigned __int16)(255 * v43 - 4080) >> 5)) >> 16;
      v36 += 2;
      v35 += 2;
      v44 = __CFADD__(v41++, 1);
    }
    while (!v44);
    goto LABEL_49;
  }
LABEL_50:
  if (v8 == v31)
  {
    v45 = 0;
  }
  else
  {
    v46 = 0;
    v45 = v8 - v31;
    do
    {
      v47 = v14;
      v48 = v20;
      if ((v9 & 1) != 0)
      {
        v49 = *v14;
        if (v49 >= 0xF0)
          v49 = 240;
        if (v49 <= 0x10)
          v50 = 16;
        else
          v50 = v49;
        if (v14[1] >= 0xF0u)
          v51 = 240;
        else
          v51 = v14[1];
        if (v51 <= 0x10)
          v52 = 16;
        else
          v52 = v51;
        v47 = v14 + 2;
        *v20 = (9363 * ((unsigned __int16)(255 * v50 - 4080) >> 5)) >> 16;
        v20[1] = (9363 * ((unsigned __int16)(255 * v52 - 4080) >> 5)) >> 16;
        v48 = v20 + 2;
      }
      if (v34)
      {
        v53 = -(uint64_t)v34;
        do
        {
          v54 = *v47;
          v55 = v47[1];
          if (v54 >= 0xF0)
            v54 = 240;
          if (v54 <= 0x10)
            LOWORD(v54) = 16;
          if (v55 >= 0xF0)
            v55 = 240;
          if (v55 <= 0x10)
            LOWORD(v55) = 16;
          *v48 = (9363 * ((unsigned __int16)(255 * v54 - 4080) >> 5)) >> 16;
          v48[1] = (9363 * ((unsigned __int16)(255 * v55 - 4080) >> 5)) >> 16;
          v48 += 2;
          v47 += 2;
          v44 = __CFADD__(v53++, 1);
        }
        while (!v44);
      }
      v14 += v13;
      v20 += v19;
      ++v46;
    }
    while (v46 != v45);
  }
  if (v45 + v30 < v8)
  {
    if ((v9 & 1) != 0)
    {
      v56 = *v14;
      v57 = v14[1];
      if (v56 >= 0xF0)
        v56 = 240;
      if (v56 <= 0x10)
        LOWORD(v56) = 16;
      if (v57 >= 0xF0)
        v57 = 240;
      if (v57 <= 0x10)
        LOWORD(v57) = 16;
      v14 += 2;
      *v20 = (9363 * ((unsigned __int16)(255 * v56 - 4080) >> 5)) >> 16;
      v20[1] = (9363 * ((unsigned __int16)(255 * v57 - 4080) >> 5)) >> 16;
      v20 += 2;
    }
    if (v34)
    {
      v58 = -(uint64_t)v34;
      do
      {
        v59 = *v14;
        v60 = v14[1];
        if (v59 >= 0xF0)
          v59 = 240;
        if (v59 <= 0x10)
          LOWORD(v59) = 16;
        if (v60 >= 0xF0)
          v60 = 240;
        if (v60 <= 0x10)
          LOWORD(v60) = 16;
        *v20 = (9363 * ((unsigned __int16)(255 * v59 - 4080) >> 5)) >> 16;
        v20[1] = (9363 * ((unsigned __int16)(255 * v60 - 4080) >> 5)) >> 16;
        v20 += 2;
        v14 += 2;
        v44 = __CFADD__(v58++, 1);
      }
      while (!v44);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_v2a8_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  size_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  BOOL v32;
  unint64_t v33;
  size_t v34;
  unsigned __int8 *v35;
  _BYTE *v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  unsigned __int8 *v45;
  _BYTE *v46;
  unsigned int v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  int v52;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v9) + ((v10 + v8) & 0xFFFFFFFFFFFFFFFELL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8) >= v18 - v17)
    v23 = v18 - v17;
  else
    v23 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - v11;
  if (v14 - v13 >= v20 - v19)
    v24 = v20 - v19;
  else
    v24 = v14 - v13;
  if (v24)
  {
    v25 = *a4;
    v58 = *a8;
    v59 = *a4;
    if (v13 >= v9)
      v25 = 0;
    v26 = (char *)(*a3 + *a4 * v13 + v11 + v25);
    v56 = a8[1];
    v57 = a8[2];
    v27 = (char *)(a7[2] + v57 * v19 + v17);
    v28 = (char *)(*a7 + *a8 * v19 + v17);
    v29 = a4[2];
    v30 = (char *)(a3[2] + v29 * v13 + v11);
    v55 = v24;
    v31 = -(uint64_t)v24;
    do
    {
      memcpy(v28, v26, v23);
      memcpy(v27, v30, v23);
      v26 += v59;
      v28 += v58;
      v30 += v29;
      v27 += v57;
      v32 = __CFADD__(v31++, 1);
    }
    while (!v32);
    v24 = v55;
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
    v21 = v56;
  }
  if (v24 >= v12)
    v33 = v12;
  else
    v33 = 0;
  if (v23 >> 1 >= (v23 - v10) >> 1)
    v34 = (v23 - v10) >> 1;
  else
    v34 = v23 >> 1;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v35 = v16 + 2;
      v37 = (v16[1] + v16[v15 + 1] + 1) >> 1;
      *v22 = (*v16 + v16[v15] + 1) >> 1;
      v22[1] = v37;
      v36 = v22 + 2;
      if (!v34)
      {
LABEL_28:
        v16 += 2 * v15;
        v22 += v21;
        goto LABEL_29;
      }
    }
    else
    {
      v35 = v16;
      v36 = v22;
      if (!v34)
        goto LABEL_28;
    }
    v38 = -(uint64_t)v34;
    do
    {
      v39 = *v35;
      v40 = v35[1];
      v41 = v35[v15];
      v42 = v35[v15 + 1];
      v35 += 2;
      *v36 = (v39 + v41 + 1) >> 1;
      v36[1] = (v40 + v42 + 1) >> 1;
      v36 += 2;
      v32 = __CFADD__(v38++, 1);
    }
    while (!v32);
    goto LABEL_28;
  }
LABEL_29:
  if (v24 != v33)
  {
    v43 = 0;
    v44 = v24 - v33;
    do
    {
      v45 = v16;
      v46 = v22;
      if ((v8 & 1) != 0)
      {
        v45 = v16 + 2;
        v47 = (v16[1] + v16[v15 + 1] + 1) >> 1;
        *v22 = (*v16 + v16[v15] + 1) >> 1;
        v22[1] = v47;
        v46 = v22 + 2;
      }
      if (v34)
      {
        v48 = -(uint64_t)v34;
        do
        {
          v49 = *v45;
          v50 = v45[1];
          v51 = v45[v15];
          v52 = v45[v15 + 1];
          v45 += 2;
          *v46 = (v49 + v51 + 1) >> 1;
          v46[1] = (v50 + v52 + 1) >> 1;
          v46 += 2;
          v32 = __CFADD__(v48++, 1);
        }
        while (!v32);
      }
      v16 += 2 * v15;
      v22 += v21;
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_CopyDec_v2a8_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int16 *v22;
  size_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  BOOL v33;
  unint64_t v34;
  size_t v35;
  __int16 *v36;
  __int16 *v37;
  uint64_t v38;
  __int16 v39;
  unint64_t v40;
  unint64_t v41;
  __int16 *v42;
  __int16 *v43;
  uint64_t v44;
  __int16 v45;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (__int16 *)(a3[1] + v15 * (v12 + v9) + ((v10 + v8) & 0xFFFFFFFFFFFFFFFELL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = (__int16 *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8) >= v18 - v17)
    v23 = v18 - v17;
  else
    v23 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - v11;
  v24 = v14 - v13;
  if (v14 - v13 >= v20 - v19)
    v24 = v20 - v19;
  if (v24)
  {
    v49 = a4[1];
    v50 = a8[1];
    v25 = *a4;
    v51 = a8[2];
    v52 = *a4;
    if (v13 >= v9)
      v25 = 0;
    v26 = (char *)(*a3 + *a4 * v13 + v11 + v25);
    v27 = (char *)(a7[2] + a8[2] * v19 + v17);
    v28 = *a8;
    v29 = (char *)(*a7 + *a8 * v19 + v17);
    v30 = a4[2];
    v31 = (char *)(a3[2] + v30 * v13 + v11);
    v48 = v24;
    v32 = -(uint64_t)v24;
    do
    {
      memcpy(v29, v26, v23);
      memcpy(v27, v31, v23);
      v26 += v52;
      v29 += v28;
      v31 += v30;
      v27 += v51;
      v33 = __CFADD__(v32++, 1);
    }
    while (!v33);
    v24 = v48;
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
    v15 = v49;
    v21 = v50;
  }
  if (v24 >= v12)
    v34 = v12;
  else
    v34 = 0;
  if (v23 >> 1 >= (v23 - v10) >> 1)
    v35 = (v23 - v10) >> 1;
  else
    v35 = v23 >> 1;
  if (v12)
  {
    v36 = v16;
    if ((v8 & 1) != 0)
    {
      v36 = v16 + 1;
      *v22 = *v16;
      v37 = v22 + 1;
      if (!v35)
      {
LABEL_27:
        v16 += v15;
        v22 = (__int16 *)((char *)v22 + v21);
        goto LABEL_28;
      }
    }
    else
    {
      v37 = v22;
      if (!v35)
        goto LABEL_27;
    }
    v38 = -(uint64_t)v35;
    do
    {
      v39 = *v36++;
      *v37++ = v39;
      v33 = __CFADD__(v38++, 1);
    }
    while (!v33);
    goto LABEL_27;
  }
LABEL_28:
  if (v24 != v34)
  {
    v40 = 0;
    v41 = v24 - v34;
    do
    {
      v42 = v16;
      v43 = v22;
      if ((v8 & 1) != 0)
      {
        v42 = v16 + 1;
        *v22 = *v16;
        v43 = v22 + 1;
      }
      if (v35)
      {
        v44 = -(uint64_t)v35;
        do
        {
          v45 = *v42++;
          *v43++ = v45;
          v33 = __CFADD__(v44++, 1);
        }
        while (!v33);
      }
      v16 += v15;
      v22 = (__int16 *)((char *)v22 + v21);
      v40 += 2;
    }
    while (v40 < v41);
  }
  return 0;
}

uint64_t vt_CopyAvg_422v_420v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  size_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  BOOL v31;
  unint64_t v32;
  size_t v33;
  unsigned __int8 *v34;
  _BYTE *v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  unsigned __int8 *v44;
  _BYTE *v45;
  unsigned int v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  int v51;
  unint64_t v54;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v9) + ((v10 + v8) & 0xFFFFFFFFFFFFFFFELL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8) >= v18 - v17)
    v23 = v18 - v17;
  else
    v23 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - v11;
  if (v14 - v13 >= v20 - v19)
    v24 = v20 - v19;
  else
    v24 = v14 - v13;
  if (v24)
  {
    v54 = v24;
    v25 = *a4;
    v26 = *a8;
    if (v13 >= v9)
      v27 = 0;
    else
      v27 = *a4;
    v28 = (char *)(*a3 + *a4 * v13 + v11 + v27);
    v29 = (char *)(*a7 + v26 * v19 + v17);
    v30 = -(uint64_t)v24;
    do
    {
      memcpy(v29, v28, v23);
      v28 += v25;
      v29 += v26;
      v31 = __CFADD__(v30++, 1);
    }
    while (!v31);
    v24 = v54;
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v24 >= v12)
    v32 = v12;
  else
    v32 = 0;
  if (v23 >> 1 >= (v23 - v10) >> 1)
    v33 = (v23 - v10) >> 1;
  else
    v33 = v23 >> 1;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v34 = v16 + 2;
      v36 = (v16[1] + v16[v15 + 1] + 1) >> 1;
      *v22 = (*v16 + v16[v15] + 1) >> 1;
      v22[1] = v36;
      v35 = v22 + 2;
      if (!v33)
      {
LABEL_29:
        v16 += 2 * v15;
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      v34 = v16;
      v35 = v22;
      if (!v33)
        goto LABEL_29;
    }
    v37 = -(uint64_t)v33;
    do
    {
      v38 = *v34;
      v39 = v34[1];
      v40 = v34[v15];
      v41 = v34[v15 + 1];
      v34 += 2;
      *v35 = (v38 + v40 + 1) >> 1;
      v35[1] = (v39 + v41 + 1) >> 1;
      v35 += 2;
      v31 = __CFADD__(v37++, 1);
    }
    while (!v31);
    goto LABEL_29;
  }
LABEL_30:
  if (v24 != v32)
  {
    v42 = 0;
    v43 = v24 - v32;
    do
    {
      v44 = v16;
      v45 = v22;
      if ((v8 & 1) != 0)
      {
        v44 = v16 + 2;
        v46 = (v16[1] + v16[v15 + 1] + 1) >> 1;
        *v22 = (*v16 + v16[v15] + 1) >> 1;
        v22[1] = v46;
        v45 = v22 + 2;
      }
      if (v33)
      {
        v47 = -(uint64_t)v33;
        do
        {
          v48 = *v44;
          v49 = v44[1];
          v50 = v44[v15];
          v51 = v44[v15 + 1];
          v44 += 2;
          *v45 = (v48 + v50 + 1) >> 1;
          v45[1] = (v49 + v51 + 1) >> 1;
          v45 += 2;
          v31 = __CFADD__(v47++, 1);
        }
        while (!v31);
      }
      v16 += 2 * v15;
      v22 += v21;
      v42 += 2;
    }
    while (v42 < v43);
  }
  return 0;
}

uint64_t vt_CopyDec_422v_420v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int16 *v22;
  size_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  BOOL v31;
  unint64_t v32;
  size_t v33;
  __int16 *v34;
  __int16 *v35;
  uint64_t v36;
  __int16 v37;
  unint64_t v38;
  unint64_t v39;
  __int16 *v40;
  __int16 *v41;
  uint64_t v42;
  __int16 v43;
  unint64_t v45;
  uint64_t v46;

  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = v9 & 1;
  v12 = v11 + v9;
  v13 = v10 & 1;
  v14 = v13 + v10;
  v15 = (*(_DWORD *)(a2 + 24) + (_DWORD)v10) & 0xFFFFFFFE;
  v16 = a4[1];
  v17 = (__int16 *)(a3[1] + v16 * (v13 + v10) + ((v11 + v9) & 0xFFFFFFFFFFFFFFFELL));
  v18 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = (__int16 *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v18 & 0x7FFFFFFFFFFFFFFFLL));
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v11 + v9) >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE)
                                                                                          - v18)
    v23 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v18;
  else
    v23 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - v12;
  v24 = v15 - v14;
  if (v15 - v14 >= v20 - v19)
    v24 = v20 - v19;
  if (v24)
  {
    v45 = v24;
    v46 = a4[1];
    v25 = *a4;
    v26 = *a8;
    if (v14 >= v10)
      v27 = 0;
    else
      v27 = *a4;
    v28 = (char *)(*a3 + *a4 * v14 + v12 + v27);
    v29 = (char *)(*a7 + v26 * v19 + v18);
    v30 = -(uint64_t)v24;
    do
    {
      memcpy(v29, v28, v23);
      v28 += v25;
      v29 += v26;
      v31 = __CFADD__(v30++, 1);
    }
    while (!v31);
    v9 = *(_QWORD *)(a2 + 32);
    v13 = *(_QWORD *)(a2 + 40) & 1;
    v11 = v9 & 1;
    v24 = v45;
    v16 = v46;
  }
  if (v24 >= v13)
    v32 = v13;
  else
    v32 = 0;
  if (v23 >> 1 >= (v23 - v11) >> 1)
    v33 = (v23 - v11) >> 1;
  else
    v33 = v23 >> 1;
  if (v13)
  {
    v34 = v17;
    if ((v9 & 1) != 0)
    {
      v34 = v17 + 1;
      *v22 = *v17;
      v35 = v22 + 1;
      if (!v33)
      {
LABEL_28:
        v17 += v16;
        v22 = (__int16 *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      v35 = v22;
      if (!v33)
        goto LABEL_28;
    }
    v36 = -(uint64_t)v33;
    do
    {
      v37 = *v34++;
      *v35++ = v37;
      v31 = __CFADD__(v36++, 1);
    }
    while (!v31);
    goto LABEL_28;
  }
LABEL_29:
  if (v24 != v32)
  {
    v38 = 0;
    v39 = v24 - v32;
    do
    {
      v40 = v17;
      v41 = v22;
      if ((v9 & 1) != 0)
      {
        v40 = v17 + 1;
        *v22 = *v17;
        v41 = v22 + 1;
      }
      if (v33)
      {
        v42 = -(uint64_t)v33;
        do
        {
          v43 = *v40++;
          *v41++ = v43;
          v31 = __CFADD__(v42++, 1);
        }
        while (!v31);
      }
      v17 += v16;
      v22 = (__int16 *)((char *)v22 + v21);
      v38 += 2;
    }
    while (v38 < v39);
  }
  return 0;
}

uint64_t vt_CopyAvg_422v_420f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int8 *v40;
  _BYTE *v41;
  unsigned int v42;
  __int16 v43;
  unsigned int v44;
  __int16 v45;
  unsigned int v46;
  __int16 v47;
  unsigned int v48;
  __int16 v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unint64_t v55;
  unint64_t v56;
  unsigned __int8 *v57;
  _BYTE *v58;
  unsigned int v59;
  __int16 v60;
  unsigned int v61;
  __int16 v62;
  unsigned int v63;
  __int16 v64;
  unsigned int v65;
  __int16 v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * (v12 + v9) + ((v10 + v8) & 0xFFFFFFFFFFFFFFFELL));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = a8[1];
  v21 = (_BYTE *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v22 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  v24 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v13;
  v25 = v19 - v18;
  if (v24 >= v25)
    v24 = v25;
  if (v24)
  {
    v26 = 0;
    v27 = v13 >= v9;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v13;
    if (v27)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v11 + v31;
    v33 = *a7 + v29 * v18 + v16;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          v35 = *(unsigned __int8 *)(v32 + i);
          if (v35 >= 0xEB)
            v35 = 235;
          if (v35 <= 0x10)
            v35 = 16;
          *(_BYTE *)(v33 + i) = (((255 * v35
                                 - 4080
                                 - ((11073 * (unsigned __int16)(255 * v35 - 4080)) >> 16)) >> 1)
                               + ((11073 * (unsigned __int16)(255 * v35 - 4080)) >> 16)) >> 7;
        }
      }
      v32 += v28;
      v33 += v29;
      ++v26;
    }
    while (v26 != v24);
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v24 >= v12)
    v36 = v12;
  else
    v36 = 0;
  v37 = v22 >> 1;
  v38 = v22 - v10;
  if (v37 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v37;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v42 = *v15;
      if (v42 >= 0xF0)
        v42 = 240;
      if (v42 <= 0x10)
        v43 = 16;
      else
        v43 = v42;
      if (v15[1] >= 0xF0u)
        v44 = 240;
      else
        v44 = v15[1];
      if (v44 <= 0x10)
        v45 = 16;
      else
        v45 = v44;
      if (v15[v14] >= 0xF0u)
        v46 = 240;
      else
        v46 = v15[v14];
      if (v46 <= 0x10)
        v47 = 16;
      else
        v47 = v46;
      if (v15[v14 + 1] >= 0xF0u)
        v48 = 240;
      else
        v48 = v15[v14 + 1];
      if (v48 <= 0x10)
        v49 = 16;
      else
        v49 = v48;
      v40 = v15 + 2;
      *v21 = (((9363 * ((unsigned __int16)(255 * v43 - 4080) >> 5)) >> 16)
            + ((9363 * ((unsigned __int16)(255 * v47 - 4080) >> 5)) >> 16)
            + 1) >> 1;
      v21[1] = (((9363 * ((unsigned __int16)(255 * v45 - 4080) >> 5)) >> 16)
              + ((9363 * ((unsigned __int16)(255 * v49 - 4080) >> 5)) >> 16)
              + 1) >> 1;
      v41 = v21 + 2;
      if (!v39)
        goto LABEL_72;
    }
    else
    {
      v40 = v15;
      v41 = v21;
      if (!v39)
      {
LABEL_72:
        v15 += 2 * v14;
        v21 += v20;
        goto LABEL_73;
      }
    }
    v50 = -(uint64_t)v39;
    do
    {
      v51 = *v40;
      v52 = v40[1];
      v53 = v40[v14];
      v54 = v40[v14 + 1];
      if (v51 >= 0xF0)
        v51 = 240;
      if (v51 <= 0x10)
        LOWORD(v51) = 16;
      if (v52 >= 0xF0)
        v52 = 240;
      if (v52 <= 0x10)
        LOWORD(v52) = 16;
      if (v53 >= 0xF0)
        v53 = 240;
      if (v53 <= 0x10)
        LOWORD(v53) = 16;
      if (v54 >= 0xF0)
        v54 = 240;
      if (v54 <= 0x10)
        LOWORD(v54) = 16;
      v40 += 2;
      *v41 = (((9363 * ((unsigned __int16)(255 * v51 - 4080) >> 5)) >> 16)
            + ((9363 * ((unsigned __int16)(255 * v53 - 4080) >> 5)) >> 16)
            + 1) >> 1;
      v41[1] = (((9363 * ((unsigned __int16)(255 * v52 - 4080) >> 5)) >> 16)
              + ((9363 * ((unsigned __int16)(255 * v54 - 4080) >> 5)) >> 16)
              + 1) >> 1;
      v41 += 2;
      v27 = __CFADD__(v50++, 1);
    }
    while (!v27);
    goto LABEL_72;
  }
LABEL_73:
  if (v24 != v36)
  {
    v55 = 0;
    v56 = v24 - v36;
    do
    {
      v57 = v15;
      v58 = v21;
      if ((v8 & 1) != 0)
      {
        v59 = *v15;
        if (v59 >= 0xF0)
          v59 = 240;
        if (v59 <= 0x10)
          v60 = 16;
        else
          v60 = v59;
        if (v15[1] >= 0xF0u)
          v61 = 240;
        else
          v61 = v15[1];
        if (v61 <= 0x10)
          v62 = 16;
        else
          v62 = v61;
        if (v15[v14] >= 0xF0u)
          v63 = 240;
        else
          v63 = v15[v14];
        if (v63 <= 0x10)
          v64 = 16;
        else
          v64 = v63;
        if (v15[v14 + 1] >= 0xF0u)
          v65 = 240;
        else
          v65 = v15[v14 + 1];
        if (v65 <= 0x10)
          v66 = 16;
        else
          v66 = v65;
        v57 = v15 + 2;
        *v21 = (((9363 * ((unsigned __int16)(255 * v60 - 4080) >> 5)) >> 16)
              + ((9363 * ((unsigned __int16)(255 * v64 - 4080) >> 5)) >> 16)
              + 1) >> 1;
        v21[1] = (((9363 * ((unsigned __int16)(255 * v62 - 4080) >> 5)) >> 16)
                + ((9363 * ((unsigned __int16)(255 * v66 - 4080) >> 5)) >> 16)
                + 1) >> 1;
        v58 = v21 + 2;
      }
      if (v39)
      {
        v67 = -(uint64_t)v39;
        do
        {
          v68 = *v57;
          v69 = v57[1];
          v70 = v57[v14];
          v71 = v57[v14 + 1];
          if (v68 >= 0xF0)
            v68 = 240;
          if (v68 <= 0x10)
            LOWORD(v68) = 16;
          if (v69 >= 0xF0)
            v69 = 240;
          if (v69 <= 0x10)
            LOWORD(v69) = 16;
          if (v70 >= 0xF0)
            v70 = 240;
          if (v70 <= 0x10)
            LOWORD(v70) = 16;
          if (v71 >= 0xF0)
            v71 = 240;
          if (v71 <= 0x10)
            LOWORD(v71) = 16;
          v57 += 2;
          *v58 = (((9363 * ((unsigned __int16)(255 * v68 - 4080) >> 5)) >> 16)
                + ((9363 * ((unsigned __int16)(255 * v70 - 4080) >> 5)) >> 16)
                + 1) >> 1;
          v58[1] = (((9363 * ((unsigned __int16)(255 * v69 - 4080) >> 5)) >> 16)
                  + ((9363 * ((unsigned __int16)(255 * v71 - 4080) >> 5)) >> 16)
                  + 1) >> 1;
          v58 += 2;
          v27 = __CFADD__(v67++, 1);
        }
        while (!v27);
      }
      v15 += 2 * v14;
      v21 += v20;
      v55 += 2;
    }
    while (v55 < v56);
  }
  return 0;
}

uint64_t vt_CopyDec_422v_420f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int8 *v40;
  _BYTE *v41;
  unsigned int v42;
  __int16 v43;
  unsigned int v44;
  __int16 v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unsigned __int8 *v52;
  _BYTE *v53;
  unsigned int v54;
  __int16 v55;
  unsigned int v56;
  __int16 v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * (v12 + v9) + ((v10 + v8) & 0xFFFFFFFFFFFFFFFELL));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = a8[1];
  v21 = (_BYTE *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v22 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  v24 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v13;
  v25 = v19 - v18;
  if (v24 >= v25)
    v24 = v25;
  if (v24)
  {
    v26 = 0;
    v27 = v13 >= v9;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v13;
    if (v27)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v11 + v31;
    v33 = *a7 + v29 * v18 + v16;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          v35 = *(unsigned __int8 *)(v32 + i);
          if (v35 >= 0xEB)
            v35 = 235;
          if (v35 <= 0x10)
            v35 = 16;
          *(_BYTE *)(v33 + i) = (((255 * v35
                                 - 4080
                                 - ((11073 * (unsigned __int16)(255 * v35 - 4080)) >> 16)) >> 1)
                               + ((11073 * (unsigned __int16)(255 * v35 - 4080)) >> 16)) >> 7;
        }
      }
      v32 += v28;
      v33 += v29;
      ++v26;
    }
    while (v26 != v24);
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v24 >= v12)
    v36 = v12;
  else
    v36 = 0;
  v37 = v22 >> 1;
  v38 = v22 - v10;
  if (v37 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v37;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v42 = *v15;
      if (v42 >= 0xF0)
        v42 = 240;
      if (v42 <= 0x10)
        v43 = 16;
      else
        v43 = v42;
      if (v15[1] >= 0xF0u)
        v44 = 240;
      else
        v44 = v15[1];
      if (v44 <= 0x10)
        v45 = 16;
      else
        v45 = v44;
      v40 = v15 + 2;
      *v21 = (9363 * ((unsigned __int16)(255 * v43 - 4080) >> 5)) >> 16;
      v21[1] = (9363 * ((unsigned __int16)(255 * v45 - 4080) >> 5)) >> 16;
      v41 = v21 + 2;
      if (!v39)
        goto LABEL_52;
    }
    else
    {
      v40 = v15;
      v41 = v21;
      if (!v39)
      {
LABEL_52:
        v15 += 2 * v14;
        v21 += v20;
        goto LABEL_53;
      }
    }
    v46 = -(uint64_t)v39;
    do
    {
      v47 = *v40;
      v48 = v40[1];
      if (v47 >= 0xF0)
        v47 = 240;
      if (v47 <= 0x10)
        LOWORD(v47) = 16;
      if (v48 >= 0xF0)
        v48 = 240;
      if (v48 <= 0x10)
        LOWORD(v48) = 16;
      *v41 = (9363 * ((unsigned __int16)(255 * v47 - 4080) >> 5)) >> 16;
      v41[1] = (9363 * ((unsigned __int16)(255 * v48 - 4080) >> 5)) >> 16;
      v41 += 2;
      v40 += 2;
      v27 = __CFADD__(v46++, 1);
    }
    while (!v27);
    goto LABEL_52;
  }
LABEL_53:
  if (v24 != v36)
  {
    v49 = 0;
    v50 = v24 - v36;
    v51 = 2 * v14;
    do
    {
      v52 = v15;
      v53 = v21;
      if ((v8 & 1) != 0)
      {
        v54 = *v15;
        if (v54 >= 0xF0)
          v54 = 240;
        if (v54 <= 0x10)
          v55 = 16;
        else
          v55 = v54;
        if (v15[1] >= 0xF0u)
          v56 = 240;
        else
          v56 = v15[1];
        if (v56 <= 0x10)
          v57 = 16;
        else
          v57 = v56;
        v52 = v15 + 2;
        *v21 = (9363 * ((unsigned __int16)(255 * v55 - 4080) >> 5)) >> 16;
        v21[1] = (9363 * ((unsigned __int16)(255 * v57 - 4080) >> 5)) >> 16;
        v53 = v21 + 2;
      }
      if (v39)
      {
        v58 = -(uint64_t)v39;
        do
        {
          v59 = *v52;
          v60 = v52[1];
          if (v59 >= 0xF0)
            v59 = 240;
          if (v59 <= 0x10)
            LOWORD(v59) = 16;
          if (v60 >= 0xF0)
            v60 = 240;
          if (v60 <= 0x10)
            LOWORD(v60) = 16;
          *v53 = (9363 * ((unsigned __int16)(255 * v59 - 4080) >> 5)) >> 16;
          v53[1] = (9363 * ((unsigned __int16)(255 * v60 - 4080) >> 5)) >> 16;
          v53 += 2;
          v52 += 2;
          v27 = __CFADD__(v58++, 1);
        }
        while (!v27);
      }
      v15 += v51;
      v21 += v20;
      v49 += 2;
    }
    while (v49 < v50);
  }
  return 0;
}

uint64_t vt_CopyAvg_422v_y420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  size_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  BOOL v33;
  unint64_t v34;
  size_t v35;
  unsigned __int8 *v36;
  _BYTE *v37;
  _BYTE *v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  unsigned __int8 *v47;
  _BYTE *v48;
  _BYTE *v49;
  unsigned int v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  int v55;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v9) + ((v10 + v8) & 0xFFFFFFFFFFFFFFFELL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = a8[2];
  v23 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 >> 1));
  v24 = (_BYTE *)(a7[2] + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8) >= v18 - v17)
    v25 = v18 - v17;
  else
    v25 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - v11;
  if (v14 - v13 >= v20 - v19)
    v26 = v20 - v19;
  else
    v26 = v14 - v13;
  if (v26)
  {
    v58 = v26;
    v59 = a8[2];
    v60 = a8[1];
    v27 = *a4;
    v28 = *a8;
    if (v13 >= v9)
      v29 = 0;
    else
      v29 = *a4;
    v30 = (char *)(*a3 + *a4 * v13 + v11 + v29);
    v31 = (char *)(*a7 + v28 * v19 + v17);
    v32 = -(uint64_t)v26;
    do
    {
      memcpy(v31, v30, v25);
      v30 += v27;
      v31 += v28;
      v33 = __CFADD__(v32++, 1);
    }
    while (!v33);
    v26 = v58;
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
    v22 = v59;
    v21 = v60;
  }
  if (v26 >= v12)
    v34 = v12;
  else
    v34 = 0;
  if (v25 >> 1 >= (v25 - v10) >> 1)
    v35 = (v25 - v10) >> 1;
  else
    v35 = v25 >> 1;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v36 = v16 + 2;
      v39 = (v16[1] + v16[v15 + 1] + 1) >> 1;
      *v23 = (*v16 + v16[v15] + 1) >> 1;
      v37 = v23 + 1;
      *v24 = v39;
      v38 = v24 + 1;
      if (!v35)
      {
LABEL_29:
        v16 += 2 * v15;
        v23 += v21;
        v24 += v22;
        goto LABEL_30;
      }
    }
    else
    {
      v36 = v16;
      v37 = v23;
      v38 = v24;
      if (!v35)
        goto LABEL_29;
    }
    v40 = -(uint64_t)v35;
    do
    {
      v41 = *v36;
      v42 = v36[1];
      v43 = v36[v15];
      v44 = v36[v15 + 1];
      v36 += 2;
      *v37++ = (v41 + v43 + 1) >> 1;
      *v38++ = (v42 + v44 + 1) >> 1;
      v33 = __CFADD__(v40++, 1);
    }
    while (!v33);
    goto LABEL_29;
  }
LABEL_30:
  if (v26 != v34)
  {
    v45 = 0;
    v46 = v26 - v34;
    do
    {
      v47 = v16;
      v48 = v23;
      v49 = v24;
      if ((v8 & 1) != 0)
      {
        v47 = v16 + 2;
        v50 = (v16[1] + v16[v15 + 1] + 1) >> 1;
        *v23 = (*v16 + v16[v15] + 1) >> 1;
        v48 = v23 + 1;
        *v24 = v50;
        v49 = v24 + 1;
      }
      if (v35)
      {
        v51 = -(uint64_t)v35;
        do
        {
          v52 = *v47;
          v53 = v47[1];
          v54 = v47[v15];
          v55 = v47[v15 + 1];
          v47 += 2;
          *v48++ = (v52 + v54 + 1) >> 1;
          *v49++ = (v53 + v55 + 1) >> 1;
          v33 = __CFADD__(v51++, 1);
        }
        while (!v33);
      }
      v16 += 2 * v15;
      v23 += v21;
      v24 += v22;
      v45 += 2;
    }
    while (v45 < v46);
  }
  return 0;
}

uint64_t vt_CopyDec_422v_y420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  size_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  BOOL v32;
  unint64_t v33;
  size_t v34;
  _BYTE *v35;
  _BYTE *v36;
  _BYTE *v37;
  char v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  unint64_t v42;
  _BYTE *v43;
  _BYTE *v44;
  _BYTE *v45;
  char v46;
  uint64_t v47;
  char v48;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = a4[1];
  v15 = (_BYTE *)(a3[1] + v14 * (v12 + v9) + ((v10 + v8) & 0xFFFFFFFFFFFFFFFELL));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = a8[1];
  v21 = a8[2];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 >> 1));
  v23 = (_BYTE *)(a7[2] + ((unint64_t)(v21 * v18) >> 1) + (v16 >> 1));
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8) >= v17 - v16)
    v24 = v17 - v16;
  else
    v24 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - v11;
  v25 = v19 - v18;
  if (((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v13 < v19 - v18)
    v25 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v13;
  if (v25)
  {
    v51 = v25;
    v52 = a4[1];
    v53 = a8[1];
    v26 = *a4;
    v27 = *a8;
    if (v13 >= v9)
      v28 = 0;
    else
      v28 = *a4;
    v29 = (char *)(*a3 + *a4 * v13 + v11 + v28);
    v30 = (char *)(*a7 + v27 * v18 + v16);
    v31 = -(uint64_t)v25;
    do
    {
      memcpy(v30, v29, v24);
      v29 += v26;
      v30 += v27;
      v32 = __CFADD__(v31++, 1);
    }
    while (!v32);
    v25 = v51;
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
    v14 = v52;
    v20 = v53;
  }
  if (v25 >= v12)
    v33 = v12;
  else
    v33 = 0;
  if (v24 >> 1 >= (v24 - v10) >> 1)
    v34 = (v24 - v10) >> 1;
  else
    v34 = v24 >> 1;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v38 = v15[1];
      v35 = v15 + 2;
      *v22 = *v15;
      v36 = v22 + 1;
      *v23 = v38;
      v37 = v23 + 1;
      if (!v34)
      {
LABEL_28:
        v15 += 2 * v14;
        v22 += v20;
        v23 += v21;
        goto LABEL_29;
      }
    }
    else
    {
      v35 = v15;
      v36 = v22;
      v37 = v23;
      if (!v34)
        goto LABEL_28;
    }
    v39 = -(uint64_t)v34;
    do
    {
      v40 = v35[1];
      *v36++ = *v35;
      *v37++ = v40;
      v35 += 2;
      v32 = __CFADD__(v39++, 1);
    }
    while (!v32);
    goto LABEL_28;
  }
LABEL_29:
  if (v25 != v33)
  {
    v41 = 0;
    v42 = v25 - v33;
    do
    {
      v43 = v15;
      v44 = v22;
      v45 = v23;
      if ((v8 & 1) != 0)
      {
        v46 = v15[1];
        v43 = v15 + 2;
        *v22 = *v15;
        v44 = v22 + 1;
        *v23 = v46;
        v45 = v23 + 1;
      }
      if (v34)
      {
        v47 = -(uint64_t)v34;
        do
        {
          v48 = v43[1];
          *v44++ = *v43;
          *v45++ = v48;
          v43 += 2;
          v32 = __CFADD__(v47++, 1);
        }
        while (!v32);
      }
      v15 += 2 * v14;
      v22 += v20;
      v23 += v21;
      v41 += 2;
    }
    while (v41 < v42);
  }
  return 0;
}

uint64_t vt_CopyAvg_422v_f420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t i;
  unsigned int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unsigned __int8 *v42;
  _BYTE *v43;
  _BYTE *v44;
  unsigned int v45;
  __int16 v46;
  unsigned int v47;
  __int16 v48;
  unsigned int v49;
  __int16 v50;
  unsigned int v51;
  __int16 v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unint64_t v59;
  unint64_t v60;
  unsigned __int8 *v61;
  _BYTE *v62;
  _BYTE *v63;
  unsigned int v64;
  __int16 v65;
  unsigned int v66;
  __int16 v67;
  unsigned int v68;
  __int16 v69;
  unsigned int v70;
  __int16 v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * (v12 + v9) + ((v10 + v8) & 0xFFFFFFFFFFFFFFFELL));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = a8[1];
  v21 = a8[2];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 >> 1));
  v23 = (_BYTE *)(a7[2] + ((unint64_t)(v21 * v18) >> 1) + (v16 >> 1));
  v24 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  v25 = v17 - v16;
  if (v24 >= v25)
    v24 = v25;
  v26 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v13;
  v27 = v19 - v18;
  if (v26 >= v27)
    v26 = v27;
  if (v26)
  {
    v28 = 0;
    v29 = v13 >= v9;
    v30 = *a4;
    v31 = *a8;
    v32 = *a3 + *a4 * v13;
    if (v29)
      v33 = 0;
    else
      v33 = *a4;
    v34 = v32 + v11 + v33;
    v35 = *a7 + v31 * v18 + v16;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
        {
          v37 = *(unsigned __int8 *)(v34 + i);
          if (v37 >= 0xEB)
            v37 = 235;
          if (v37 <= 0x10)
            v37 = 16;
          *(_BYTE *)(v35 + i) = (((255 * v37
                                 - 4080
                                 - ((11073 * (unsigned __int16)(255 * v37 - 4080)) >> 16)) >> 1)
                               + ((11073 * (unsigned __int16)(255 * v37 - 4080)) >> 16)) >> 7;
        }
      }
      v34 += v30;
      v35 += v31;
      ++v28;
    }
    while (v28 != v26);
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v26 >= v12)
    v38 = v12;
  else
    v38 = 0;
  v39 = v24 >> 1;
  v40 = v24 - v10;
  if (v39 >= v40 >> 1)
    v41 = v40 >> 1;
  else
    v41 = v39;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v45 = *v15;
      if (v45 >= 0xF0)
        v45 = 240;
      if (v45 <= 0x10)
        v46 = 16;
      else
        v46 = v45;
      if (v15[1] >= 0xF0u)
        v47 = 240;
      else
        v47 = v15[1];
      if (v47 <= 0x10)
        v48 = 16;
      else
        v48 = v47;
      if (v15[v14] >= 0xF0u)
        v49 = 240;
      else
        v49 = v15[v14];
      if (v49 <= 0x10)
        v50 = 16;
      else
        v50 = v49;
      if (v15[v14 + 1] >= 0xF0u)
        v51 = 240;
      else
        v51 = v15[v14 + 1];
      if (v51 <= 0x10)
        v52 = 16;
      else
        v52 = v51;
      v42 = v15 + 2;
      v53 = (((9363 * ((unsigned __int16)(255 * v48 - 4080) >> 5)) >> 16)
           + ((9363 * ((unsigned __int16)(255 * v52 - 4080) >> 5)) >> 16)
           + 1) >> 1;
      *v22 = (((9363 * ((unsigned __int16)(255 * v46 - 4080) >> 5)) >> 16)
            + ((9363 * ((unsigned __int16)(255 * v50 - 4080) >> 5)) >> 16)
            + 1) >> 1;
      v43 = v22 + 1;
      *v23 = v53;
      v44 = v23 + 1;
      if (!v41)
        goto LABEL_72;
    }
    else
    {
      v42 = v15;
      v43 = v22;
      v44 = v23;
      if (!v41)
      {
LABEL_72:
        v15 += 2 * v14;
        v22 += v20;
        v23 += v21;
        goto LABEL_73;
      }
    }
    v54 = -(uint64_t)v41;
    do
    {
      v55 = *v42;
      v56 = v42[1];
      v57 = v42[v14];
      v58 = v42[v14 + 1];
      if (v55 >= 0xF0)
        v55 = 240;
      if (v55 <= 0x10)
        LOWORD(v55) = 16;
      if (v56 >= 0xF0)
        v56 = 240;
      if (v56 <= 0x10)
        LOWORD(v56) = 16;
      if (v57 >= 0xF0)
        v57 = 240;
      if (v57 <= 0x10)
        LOWORD(v57) = 16;
      if (v58 >= 0xF0)
        v58 = 240;
      if (v58 <= 0x10)
        LOWORD(v58) = 16;
      v42 += 2;
      *v43++ = (((9363 * ((unsigned __int16)(255 * v55 - 4080) >> 5)) >> 16)
              + ((9363 * ((unsigned __int16)(255 * v57 - 4080) >> 5)) >> 16)
              + 1) >> 1;
      *v44++ = (((9363 * ((unsigned __int16)(255 * v56 - 4080) >> 5)) >> 16)
              + ((9363 * ((unsigned __int16)(255 * v58 - 4080) >> 5)) >> 16)
              + 1) >> 1;
      v29 = __CFADD__(v54++, 1);
    }
    while (!v29);
    goto LABEL_72;
  }
LABEL_73:
  if (v26 != v38)
  {
    v59 = 0;
    v60 = v26 - v38;
    do
    {
      v61 = v15;
      v62 = v22;
      v63 = v23;
      if ((v8 & 1) != 0)
      {
        v64 = *v15;
        if (v64 >= 0xF0)
          v64 = 240;
        if (v64 <= 0x10)
          v65 = 16;
        else
          v65 = v64;
        if (v15[1] >= 0xF0u)
          v66 = 240;
        else
          v66 = v15[1];
        if (v66 <= 0x10)
          v67 = 16;
        else
          v67 = v66;
        if (v15[v14] >= 0xF0u)
          v68 = 240;
        else
          v68 = v15[v14];
        if (v68 <= 0x10)
          v69 = 16;
        else
          v69 = v68;
        if (v15[v14 + 1] >= 0xF0u)
          v70 = 240;
        else
          v70 = v15[v14 + 1];
        if (v70 <= 0x10)
          v71 = 16;
        else
          v71 = v70;
        v61 = v15 + 2;
        v72 = (((9363 * ((unsigned __int16)(255 * v65 - 4080) >> 5)) >> 16)
             + ((9363 * ((unsigned __int16)(255 * v69 - 4080) >> 5)) >> 16)
             + 1) >> 1;
        v73 = (((9363 * ((unsigned __int16)(255 * v67 - 4080) >> 5)) >> 16)
             + ((9363 * ((unsigned __int16)(255 * v71 - 4080) >> 5)) >> 16)
             + 1) >> 1;
        *v22 = v72;
        v62 = v22 + 1;
        *v23 = v73;
        v63 = v23 + 1;
      }
      if (v41)
      {
        v74 = -(uint64_t)v41;
        do
        {
          v75 = *v61;
          v76 = v61[1];
          v77 = v61[v14];
          v78 = v61[v14 + 1];
          if (v75 >= 0xF0)
            v75 = 240;
          if (v75 <= 0x10)
            LOWORD(v75) = 16;
          if (v76 >= 0xF0)
            v76 = 240;
          if (v76 <= 0x10)
            LOWORD(v76) = 16;
          if (v77 >= 0xF0)
            v77 = 240;
          if (v77 <= 0x10)
            LOWORD(v77) = 16;
          if (v78 >= 0xF0)
            v78 = 240;
          if (v78 <= 0x10)
            LOWORD(v78) = 16;
          v61 += 2;
          *v62++ = (((9363 * ((unsigned __int16)(255 * v75 - 4080) >> 5)) >> 16)
                  + ((9363 * ((unsigned __int16)(255 * v77 - 4080) >> 5)) >> 16)
                  + 1) >> 1;
          *v63++ = (((9363 * ((unsigned __int16)(255 * v76 - 4080) >> 5)) >> 16)
                  + ((9363 * ((unsigned __int16)(255 * v78 - 4080) >> 5)) >> 16)
                  + 1) >> 1;
          v29 = __CFADD__(v74++, 1);
        }
        while (!v29);
      }
      v15 += 2 * v14;
      v22 += v20;
      v23 += v21;
      v59 += 2;
    }
    while (v59 < v60);
  }
  return 0;
}

uint64_t vt_CopyDec_422v_f420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t i;
  unsigned int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unsigned __int8 *v42;
  _BYTE *v43;
  _BYTE *v44;
  unsigned int v45;
  __int16 v46;
  unsigned int v47;
  __int16 v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unsigned __int8 *v56;
  _BYTE *v57;
  _BYTE *v58;
  unsigned int v59;
  __int16 v60;
  unsigned int v61;
  __int16 v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * (v12 + v9) + ((v10 + v8) & 0xFFFFFFFFFFFFFFFELL));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = a8[1];
  v21 = a8[2];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 >> 1));
  v23 = (_BYTE *)(a7[2] + ((unint64_t)(v21 * v18) >> 1) + (v16 >> 1));
  v24 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  v25 = v17 - v16;
  if (v24 >= v25)
    v24 = v25;
  v26 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v13;
  v27 = v19 - v18;
  if (v26 >= v27)
    v26 = v27;
  if (v26)
  {
    v28 = 0;
    v29 = v13 >= v9;
    v30 = *a4;
    v31 = *a8;
    v32 = *a3 + *a4 * v13;
    if (v29)
      v33 = 0;
    else
      v33 = *a4;
    v34 = v32 + v11 + v33;
    v35 = *a7 + v31 * v18 + v16;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
        {
          v37 = *(unsigned __int8 *)(v34 + i);
          if (v37 >= 0xEB)
            v37 = 235;
          if (v37 <= 0x10)
            v37 = 16;
          *(_BYTE *)(v35 + i) = (((255 * v37
                                 - 4080
                                 - ((11073 * (unsigned __int16)(255 * v37 - 4080)) >> 16)) >> 1)
                               + ((11073 * (unsigned __int16)(255 * v37 - 4080)) >> 16)) >> 7;
        }
      }
      v34 += v30;
      v35 += v31;
      ++v28;
    }
    while (v28 != v26);
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v26 >= v12)
    v38 = v12;
  else
    v38 = 0;
  v39 = v24 >> 1;
  v40 = v24 - v10;
  if (v39 >= v40 >> 1)
    v41 = v40 >> 1;
  else
    v41 = v39;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v45 = *v15;
      if (v45 >= 0xF0)
        v45 = 240;
      if (v45 <= 0x10)
        v46 = 16;
      else
        v46 = v45;
      if (v15[1] >= 0xF0u)
        v47 = 240;
      else
        v47 = v15[1];
      if (v47 <= 0x10)
        v48 = 16;
      else
        v48 = v47;
      v42 = v15 + 2;
      v49 = (9363 * ((unsigned __int16)(255 * v48 - 4080) >> 5)) >> 16;
      *v22 = (9363 * ((unsigned __int16)(255 * v46 - 4080) >> 5)) >> 16;
      v43 = v22 + 1;
      *v23 = v49;
      v44 = v23 + 1;
      if (!v41)
        goto LABEL_52;
    }
    else
    {
      v42 = v15;
      v43 = v22;
      v44 = v23;
      if (!v41)
      {
LABEL_52:
        v15 += 2 * v14;
        v22 += v20;
        v23 += v21;
        goto LABEL_53;
      }
    }
    v50 = -(uint64_t)v41;
    do
    {
      v51 = *v42;
      v52 = v42[1];
      if (v51 >= 0xF0)
        v51 = 240;
      if (v51 <= 0x10)
        LOWORD(v51) = 16;
      if (v52 >= 0xF0)
        v52 = 240;
      if (v52 <= 0x10)
        LOWORD(v52) = 16;
      *v43++ = (9363 * ((unsigned __int16)(255 * v51 - 4080) >> 5)) >> 16;
      *v44++ = (9363 * ((unsigned __int16)(255 * v52 - 4080) >> 5)) >> 16;
      v42 += 2;
      v29 = __CFADD__(v50++, 1);
    }
    while (!v29);
    goto LABEL_52;
  }
LABEL_53:
  if (v26 != v38)
  {
    v53 = 0;
    v54 = v26 - v38;
    v55 = 2 * v14;
    do
    {
      v56 = v15;
      v57 = v22;
      v58 = v23;
      if ((v8 & 1) != 0)
      {
        v59 = *v15;
        if (v59 >= 0xF0)
          v59 = 240;
        if (v59 <= 0x10)
          v60 = 16;
        else
          v60 = v59;
        if (v15[1] >= 0xF0u)
          v61 = 240;
        else
          v61 = v15[1];
        if (v61 <= 0x10)
          v62 = 16;
        else
          v62 = v61;
        v56 = v15 + 2;
        v63 = (9363 * ((unsigned __int16)(255 * v62 - 4080) >> 5)) >> 16;
        *v22 = (9363 * ((unsigned __int16)(255 * v60 - 4080) >> 5)) >> 16;
        v57 = v22 + 1;
        *v23 = v63;
        v58 = v23 + 1;
      }
      if (v41)
      {
        v64 = -(uint64_t)v41;
        do
        {
          v65 = *v56;
          v66 = v56[1];
          if (v65 >= 0xF0)
            v65 = 240;
          if (v65 <= 0x10)
            LOWORD(v65) = 16;
          if (v66 >= 0xF0)
            v66 = 240;
          if (v66 <= 0x10)
            LOWORD(v66) = 16;
          *v57++ = (9363 * ((unsigned __int16)(255 * v65 - 4080) >> 5)) >> 16;
          *v58++ = (9363 * ((unsigned __int16)(255 * v66 - 4080) >> 5)) >> 16;
          v56 += 2;
          v29 = __CFADD__(v64++, 1);
        }
        while (!v29);
      }
      v15 += v55;
      v22 += v20;
      v23 += v21;
      v53 += 2;
    }
    while (v53 < v54);
  }
  return 0;
}

uint64_t vt_Copy_420v_OneComponent(unint64_t a1, unint64_t a2, uint64_t *a3, uint64_t *a4, _QWORD *a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  char v20;

  if (a2 >= 2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = a2 >> 1;
    v9 = a1 >> 1;
    v10 = *a6;
    v11 = *a4;
    v12 = 2 * *a3;
    v13 = 2 * *a5;
    if (a1 >> 1 <= 1)
      v9 = 1;
    v14 = v10 + *a5;
    do
    {
      if (a1 >= 2)
      {
        v15 = 0;
        v16 = v11 + v7;
        v17 = v9;
        do
        {
          v18 = (_BYTE *)(v14 + v15);
          v19 = (_BYTE *)(v10 + v15);
          v20 = sLumaTableVtoF[*(unsigned __int8 *)(v11 + v15 + 1)];
          *v19 = sLumaTableVtoF[*(unsigned __int8 *)(v11 + v15)];
          v19[1] = v20;
          LOBYTE(v19) = sLumaTableVtoF[*(unsigned __int8 *)(v16 + v15 + 1)];
          *v18 = sLumaTableVtoF[*(unsigned __int8 *)(v16 + v15)];
          v18[1] = (_BYTE)v19;
          v15 += 2;
          --v17;
        }
        while (v17);
      }
      v11 += v12;
      v10 += v13;
      ++v6;
      v14 += v13;
    }
    while (v6 != v8);
  }
  return 0;
}

uint64_t vt_Copy_422v_y416(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  __int16 v22;
  unsigned __int8 *v23;
  __int16 v24;
  __int16 v25;
  _WORD *v26;
  __int16 v27;

  v8 = a2[4] & 0xFFFFFFFELL;
  v9 = a2[2] + a2[4] - v8 + ((a2[2] + a2[4]) & 1);
  if (v9 >= a6[2])
    v9 = a6[2];
  if (a2[3] >= a6[3])
    v10 = a6[3];
  else
    v10 = a2[3];
  if (v10)
  {
    v11 = 0;
    v12 = *a8;
    v13 = *a4;
    v14 = a4[1];
    v15 = *a7 + *a8 * a6[5] + 2 * a6[4];
    v16 = a2[5];
    v17 = (unsigned __int8 *)(a3[1] + v14 * v16 + v8);
    v18 = *a3 + *a4 * v16 + v8;
    do
    {
      if (v9)
      {
        v19 = 0;
        v20 = 0;
        v21 = 0;
        v22 = 0;
        v23 = v17;
        do
        {
          if ((v20 & 1) == 0)
          {
            v24 = *v23;
            v25 = v23[1];
            v23 += 2;
            v22 = v24 << 8;
            v21 = v25 << 8;
          }
          v26 = (_WORD *)(v15 + v19);
          v27 = *(unsigned __int8 *)(v18 + v20) << 8;
          *v26 = -1;
          v26[1] = v27;
          v26[2] = v22;
          v26[3] = v21;
          ++v20;
          v19 += 8;
        }
        while (v9 != v20);
      }
      v18 += v13;
      v15 += v12;
      v17 += v14;
      ++v11;
    }
    while (v11 != v10);
  }
  return 0;
}

uint64_t vt_Copy_422v_y408(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  char *v23;
  char v24;
  _BYTE *v25;

  v8 = a2[4] & 0xFFFFFFFELL;
  v9 = a2[2] + a2[4] - v8 + ((a2[2] + a2[4]) & 1);
  if (v9 >= a6[2])
    v9 = a6[2];
  if (a2[3] >= a6[3])
    v10 = a6[3];
  else
    v10 = a2[3];
  if (v10)
  {
    v11 = 0;
    v12 = *a8;
    v13 = *a4;
    v14 = a4[1];
    v15 = *a7 + *a8 * a6[5] + a6[4];
    v16 = a2[5];
    v17 = (char *)(a3[1] + v14 * v16 + v8);
    v18 = *a3 + *a4 * v16 + v8;
    do
    {
      if (v9)
      {
        v19 = 0;
        v20 = 0;
        v21 = 0;
        v22 = 0;
        v23 = v17;
        do
        {
          if ((v20 & 1) == 0)
          {
            v22 = *v23;
            v21 = v23[1];
            v23 += 2;
          }
          v24 = *(_BYTE *)(v18 + v20);
          v25 = (_BYTE *)(v15 + v19);
          *v25 = -1;
          v25[1] = v24;
          v25[2] = v22;
          v25[3] = v21;
          ++v20;
          v19 += 4;
        }
        while (v9 != v20);
      }
      v18 += v13;
      v15 += v12;
      v17 += v14;
      ++v11;
    }
    while (v11 != v10);
  }
  return 0;
}

uint64_t vt_Copy_422v_s4as(int32x2_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t *a5, uint64_t a6, _QWORD *a7, _QWORD *a8, uint64_t *a9)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  _WORD *v33;
  uint64_t v34;
  __int16 v35;
  __int16 v36;
  BOOL v37;
  uint64_t v38;
  __int16 v39;
  __int16 v40;
  __int16 v41;
  unint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  double *v45;
  __int16 v46;
  uint64_t v47;
  unsigned __int8 *v48;
  int16x4_t v49;
  __int16 v50;
  __int16 v51;
  __int16 v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  __int16 v59;

  v10 = a3[4];
  v9 = a3[5];
  v11 = a3[3];
  v12 = a5[1];
  v13 = (unsigned __int8 *)(a4[1] + v12 * v9 + (v10 & 0xFFFFFFFE));
  v14 = a7[4];
  v15 = a7[5];
  v16 = a9[1];
  v17 = (_WORD *)(a8[1] + v16 * v15 + 4 * v14);
  v18 = a3[2] + v10 - (v10 & 0xFFFFFFFE) + ((a3[2] + v10) & 1);
  if (v18 >= a7[2])
    v18 = a7[2];
  if (v11 >= a7[3])
    v11 = a7[3];
  if (v11)
  {
    v19 = 0;
    v20 = *a5;
    v21 = *a9;
    v22 = a9[2];
    v23 = a8[2] + v22 * v15 + 2 * v14;
    v24 = *a8 + *a9 * v15 + 2 * v14;
    v25 = *a4 + v20 * v9 + (v10 & 0xFFFFFFFE);
    do
    {
      if (v18)
      {
        for (i = 0; i != v18; ++i)
        {
          *(_WORD *)(v23 + 2 * i) = -1;
          *(_WORD *)(v24 + 2 * i) = *(unsigned __int8 *)(v25 + i) << 8;
        }
      }
      v25 += v20;
      v24 += v21;
      v23 += v22;
      ++v19;
    }
    while (v19 != v11);
  }
  v27 = v9 & 1;
  if (v11 >= v27)
    v28 = v9 & 1;
  else
    v28 = 0;
  v29 = v10;
  v30 = v18 >> 1;
  v31 = v10 & 1;
  if (v18 >> 1 >= (v18 - v31) >> 1)
    v30 = (v18 - v31) >> 1;
  if ((v9 & 1) != 0)
  {
    if ((v29 & 1) != 0)
    {
      v32 = v13 + 2;
      v39 = v13[1] << 8;
      *v17 = *v13 << 8;
      v17[1] = v39;
      v33 = v17 + 2;
      if (v30)
      {
LABEL_19:
        v34 = -(uint64_t)v30;
        do
        {
          v35 = *v32;
          v36 = v32[1];
          v32 += 2;
          *v33 = v35 << 8;
          v33[1] = v36 << 8;
          v33 += 2;
          v37 = __CFADD__(v34++, 1);
        }
        while (!v37);
        v38 = 2 * v30;
        goto LABEL_25;
      }
    }
    else
    {
      v32 = v13;
      v33 = v17;
      if (v30)
        goto LABEL_19;
    }
    v38 = 0;
LABEL_25:
    if ((v38 | (unint64_t)v31) < v18)
    {
      v40 = *v32 << 8;
      v41 = v32[1] << 8;
      *v33 = v40;
      v33[1] = v41;
    }
    v13 += v12;
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v11 == v28)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v11 - v28;
    do
    {
      v44 = v13;
      v45 = (double *)v17;
      if ((v29 & 1) != 0)
      {
        v44 = v13 + 2;
        v46 = v13[1] << 8;
        *v17 = *v13 << 8;
        v17[1] = v46;
        v45 = (double *)(v17 + 2);
      }
      if (v30)
      {
        v47 = -(uint64_t)v30;
        do
        {
          v48 = v44 + 2;
          a1.i8[0] = *v44;
          a1.i8[4] = v44[1];
          v49 = (int16x4_t)vshl_n_s32(a1, 8uLL);
          a1 = (int32x2_t)vuzp1_s16(v49, v49);
          *v45++ = *(double *)&a1;
          v44 += 2;
          v37 = __CFADD__(v47++, 1);
        }
        while (!v37);
      }
      else
      {
        v48 = v44;
      }
      if ((v31 | (2 * v30)) < v18)
      {
        v50 = *v48 << 8;
        v51 = v48[1] << 8;
        *(_WORD *)v45 = v50;
        *((_WORD *)v45 + 1) = v51;
      }
      v13 += v12;
      v17 = (_WORD *)((char *)v17 + v16);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v27 < v11)
  {
    if ((v29 & 1) != 0)
    {
      v52 = *v13;
      v53 = v13[1];
      v13 += 2;
      *v17 = v52 << 8;
      v17[1] = v53 << 8;
      v17 += 2;
    }
    if (v30)
    {
      v54 = -(uint64_t)v30;
      do
      {
        v55 = *v13;
        v56 = v13[1];
        v13 += 2;
        *v17 = v55 << 8;
        v17[1] = v56 << 8;
        v17 += 2;
        v37 = __CFADD__(v54++, 1);
      }
      while (!v37);
      v57 = 2 * v30;
    }
    else
    {
      v57 = 0;
    }
    if ((v57 | (unint64_t)v31) < v18)
    {
      v58 = *v13 << 8;
      v59 = v13[1] << 8;
      *v17 = v58;
      v17[1] = v59;
    }
  }
  return 0;
}

uint64_t vt_Copy_422v_s2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  unsigned __int8 *v38;
  _WORD *v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  BOOL v43;
  unint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  _WORD *v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  __int16 v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + ((v10 + v9) & 0xFFFFFFFFFFFFFFFELL));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23)
    v24 = v23;
  else
    v24 = v22;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    v28 = a8[2];
    v29 = a7[2] + v28 * v18 + v19;
    v30 = *a7 + *a8 * v18 + v19;
    v31 = *a3 + v26 * v12 + v10 + v9;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
        {
          *(_WORD *)(v29 + 2 * i) = -1;
          *(_WORD *)(v30 + 2 * i) = *(unsigned __int8 *)(v31 + i) << 8;
        }
      }
      v31 += v26;
      v30 += v27;
      v29 += v28;
      ++v25;
    }
    while (v25 != v8);
  }
  v33 = v12 & 1;
  if (v8 >= v33)
    v34 = v12 & 1;
  else
    v34 = 0;
  v35 = v9;
  v36 = v24 >> 1;
  v37 = (v24 - v10) >> 1;
  if (v36 >= v37)
    v36 = v37;
  if ((v12 & 1) != 0)
  {
    if ((v35 & 1) != 0)
    {
      v38 = v14 + 2;
      v40 = v14[1] << 8;
      *v21 = *v14 << 8;
      v21[1] = v40;
      v39 = v21 + 2;
      if (!v36)
      {
LABEL_25:
        v14 += v13;
        v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_26;
      }
    }
    else
    {
      v38 = v14;
      v39 = v21;
      if (!v36)
        goto LABEL_25;
    }
    v41 = -(uint64_t)v36;
    do
    {
      v42 = v38[1] << 8;
      *v39 = *v38 << 8;
      v39[1] = v42;
      v38 += 2;
      v39 += 2;
      v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v34)
  {
    v44 = 0;
  }
  else
  {
    v45 = 0;
    v44 = v8 - v34;
    do
    {
      v46 = v14;
      v47 = v21;
      if ((v35 & 1) != 0)
      {
        v46 = v14 + 2;
        v48 = v14[1] << 8;
        *v21 = *v14 << 8;
        v21[1] = v48;
        v47 = v21 + 2;
      }
      if (v36)
      {
        v49 = -(uint64_t)v36;
        do
        {
          v50 = v46[1] << 8;
          *v47 = *v46 << 8;
          v47[1] = v50;
          v46 += 2;
          v47 += 2;
          v43 = __CFADD__(v49++, 1);
        }
        while (!v43);
      }
      v14 += v13;
      v21 = (_WORD *)((char *)v21 + v20);
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v33 < v8)
  {
    if ((v35 & 1) != 0)
    {
      v51 = *v14;
      v52 = v14[1];
      v14 += 2;
      *v21 = v51 << 8;
      v21[1] = v52 << 8;
      v21 += 2;
    }
    if (v36)
    {
      v53 = -(uint64_t)v36;
      do
      {
        v54 = v14[1] << 8;
        *v21 = *v14 << 8;
        v21[1] = v54;
        v14 += 2;
        v21 += 2;
        v43 = __CFADD__(v53++, 1);
      }
      while (!v43);
    }
  }
  return 0;
}

