uint64_t vt_CopyAvg_v216_xf20(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _WORD *v27;
  _WORD *v28;
  unsigned __int16 *v29;
  _WORD *v30;
  unsigned __int16 *v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  __int16 v42;
  __int16 v43;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _OWORD v49[2];
  _OWORD v50[2];
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _BYTE v56[48];
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  v73 = 0u;
  v74 = 0u;
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v67 = 0u;
  v68 = 0u;
  v65 = 0u;
  v66 = 0u;
  v64 = 0u;
  v63 = 0u;
  v62 = 0u;
  v61 = 0u;
  v60 = 0u;
  v59 = 0u;
  v58 = 0u;
  v57 = 0u;
  *(_OWORD *)&v56[32] = 0u;
  *(_OWORD *)&v56[16] = 0u;
  *(_OWORD *)v56 = 0u;
  v55 = 0u;
  v54 = 0u;
  v53 = 0u;
  v52 = 0u;
  memset(v49, 0, sizeof(v49));
  v9 = a2[3];
  v48 = a2[2];
  v50[0] = vdupq_n_s64(1uLL);
  v50[1] = xmmword_1928DFD10;
  v51 = 1;
  *(_OWORD *)&v56[8] = v50[0];
  *(_OWORD *)&v56[24] = xmmword_1928DFD20;
  v75 = 0;
  *(_QWORD *)&v56[40] = 2;
  v11 = a2[4];
  v10 = a2[5];
  v12 = *a3;
  v13 = *a4;
  vtPixelTransferSession_PrepareOffsets(2uLL, a6, v50, a8, a7, v49);
  if (v9 >= 2)
  {
    v14 = 0;
    v46 = v9 >> 1;
    v47 = a8[1];
    v15 = *(_QWORD *)&v49[0];
    v16 = (4 * v11) & 0xFFFFFFFFFFFFFF8;
    v17 = *((_QWORD *)&v49[0] + 1);
    v18 = v12 + v16 + v13 * v10;
    v19 = 2 * *a8;
    v20 = 2 * v13;
    if (v48 >> 1 <= 1)
      v21 = 1;
    else
      v21 = v48 >> 1;
    v45 = v21;
    v22 = *a8 + *(_QWORD *)&v49[0] + 2;
    v23 = v12 + v13 + v16 + v13 * v10;
    do
    {
      if (v48 >= 2)
      {
        v24 = 0;
        v25 = 0;
        v26 = v45;
        do
        {
          v27 = (_WORD *)(v15 + v25);
          v28 = (_WORD *)(v22 + v25);
          v29 = (unsigned __int16 *)(v23 + v24);
          v30 = (_WORD *)(v17 + v25);
          v31 = (unsigned __int16 *)(v18 + v24);
          v32 = *(unsigned __int16 *)(v23 + v24) + *(unsigned __int16 *)(v18 + v24);
          if (v32 >> 1 >= 0xF000)
            v33 = 61440;
          else
            v33 = v32 >> 1;
          if (v31[1] >= 0xEB00u)
            v34 = 60160;
          else
            v34 = v31[1];
          v35 = v29[2] + v31[2];
          if (v34 <= 0x1000)
            v36 = 4096;
          else
            v36 = v34;
          if (v35 >> 1 >= 0xF000)
            v37 = 61440;
          else
            v37 = v35 >> 1;
          v38 = v31[3];
          if (v38 >= 0xEB00)
            v38 = 60160;
          if (v38 <= 0x1000)
            v38 = 4096;
          v39 = v29[1];
          if (v39 >= 0xEB00)
            v39 = 60160;
          if (v39 <= 0x1000)
            v39 = 4096;
          v40 = v29[3];
          if (v40 >= 0xEB00)
            v40 = 60160;
          v41 = 65472 * v36 - 268173312;
          if (v40 <= 0x1000)
            v40 = 4096;
          *v27 = (v41 / 0xDB00 + 32) & 0xFFC0;
          v27[1] = ((65472 * v38 - 268173312) / 0xDB00 + 32) & 0xFFC0;
          *(v28 - 1) = ((65472 * v39 - 268173312) / 0xDB00 + 32) & 0xFFC0;
          v42 = (((613566757 * (unint64_t)((65472 * v33 - 268173312) >> 13)) >> 32) + 32) & 0xFFC0;
          if (v32 < 0x2000)
            v42 = 0;
          *v28 = ((65472 * v40 - 268173312) / 0xDB00 + 32) & 0xFFC0;
          v43 = (((613566757 * (unint64_t)((65472 * v37 - 268173312) >> 13)) >> 32) + 32) & 0xFFC0;
          *v30 = v42;
          if (v35 < 0x2000)
            v43 = 0;
          v30[1] = v43;
          v25 += 4;
          v24 += 8;
          --v26;
        }
        while (v26);
      }
      v15 += v19;
      v17 += v47;
      v18 += v20;
      ++v14;
      v22 += v19;
      v23 += v20;
    }
    while (v14 != v46);
  }
  return 0;
}

uint64_t vt_CopyDec_v216_xf20(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _WORD *v29;
  _WORD *v30;
  unsigned __int16 *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  _WORD *v38;
  uint64_t v40;
  unint64_t v41;
  _OWORD v42[2];
  _OWORD v43[2];
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _BYTE v49[48];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v66 = 0u;
  v67 = 0u;
  v64 = 0u;
  v65 = 0u;
  v62 = 0u;
  v63 = 0u;
  v60 = 0u;
  v61 = 0u;
  v58 = 0u;
  v59 = 0u;
  v57 = 0u;
  v56 = 0u;
  v55 = 0u;
  v54 = 0u;
  v53 = 0u;
  v52 = 0u;
  v51 = 0u;
  v50 = 0u;
  *(_OWORD *)&v49[32] = 0u;
  *(_OWORD *)&v49[16] = 0u;
  *(_OWORD *)v49 = 0u;
  v48 = 0u;
  v47 = 0u;
  v46 = 0u;
  v45 = 0u;
  memset(v42, 0, sizeof(v42));
  v9 = a2[3];
  v41 = a2[2];
  v43[0] = vdupq_n_s64(1uLL);
  v43[1] = xmmword_1928DFD10;
  v44 = 1;
  *(_OWORD *)&v49[8] = v43[0];
  *(_OWORD *)&v49[24] = xmmword_1928DFD20;
  v68 = 0;
  *(_QWORD *)&v49[40] = 2;
  v11 = a2[4];
  v10 = a2[5];
  v12 = *a3;
  v13 = *a4;
  vtPixelTransferSession_PrepareOffsets(2uLL, a6, v43, a8, a7, v42);
  if (v9 >= 2)
  {
    v14 = 0;
    v15 = a8[1];
    v16 = v9 >> 1;
    v17 = *(_QWORD *)&v42[0];
    v18 = v41 >> 1;
    v19 = (4 * v11) & 0xFFFFFFFFFFFFFF8;
    v20 = *((_QWORD *)&v42[0] + 1);
    v21 = v12 + v19 + v13 * v10;
    v22 = 2 * *a8;
    v23 = 2 * v13;
    if (v41 >> 1 <= 1)
      v18 = 1;
    v40 = v18;
    v24 = v13 + v19 + v12 + v13 * v10 + 6;
    v25 = *a8 + *(_QWORD *)&v42[0] + 2;
    do
    {
      if (v41 >= 2)
      {
        v26 = 0;
        v27 = 0;
        v28 = v40;
        do
        {
          v29 = (_WORD *)(v17 + v26);
          v30 = (_WORD *)(v25 + v26);
          v31 = (unsigned __int16 *)(v21 + v27);
          v32 = *(unsigned __int16 *)(v21 + v27);
          if (v32 >= 0xF000)
            v32 = 61440;
          if (v32 <= 0x1000)
            v32 = 4096;
          v33 = v31[1];
          if (v33 >= 0xEB00)
            v33 = 60160;
          v34 = v31[2];
          if (v33 <= 0x1000)
            v33 = 4096;
          if (v34 >= 0xF000)
            v34 = 61440;
          if (v34 <= 0x1000)
            v34 = 4096;
          v35 = v31[3];
          if (v35 >= 0xEB00)
            v35 = 60160;
          if (v35 <= 0x1000)
            v35 = 4096;
          v36 = *(unsigned __int16 *)(v24 + v27 - 4);
          if (v36 >= 0xEB00)
            v36 = 60160;
          if (v36 <= 0x1000)
            v36 = 4096;
          v37 = *(unsigned __int16 *)(v24 + v27);
          v38 = (_WORD *)(v20 + v26);
          if (v37 >= 0xEB00)
            v37 = 60160;
          if (v37 <= 0x1000)
            v37 = 4096;
          *v29 = ((65472 * v33 - 268173312) / 0xDB00 + 32) & 0xFFC0;
          v29[1] = ((65472 * v35 - 268173312) / 0xDB00 + 32) & 0xFFC0;
          *(v30 - 1) = ((65472 * v36 - 268173312) / 0xDB00 + 32) & 0xFFC0;
          *v30 = ((65472 * v37 - 268173312) / 0xDB00 + 32) & 0xFFC0;
          *v38 = (((613566757 * (unint64_t)((65472 * v32 - 268173312) >> 13)) >> 32) + 32) & 0xFFC0;
          v38[1] = (((613566757 * (unint64_t)((65472 * v34 - 268173312) >> 13)) >> 32) + 32) & 0xFFC0;
          v27 += 8;
          v26 += 4;
          --v28;
        }
        while (v28);
      }
      v17 += v22;
      v20 += v15;
      v21 += v23;
      ++v14;
      v24 += v23;
      v25 += v22;
    }
    while (v14 != v16);
  }
  return 0;
}

vImage_Error vt_VImage_Setup_v216_32BGRA(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  vImage_YpCbCrToARGB *v17;
  __int128 v18;
  const vImage_YpCbCrToARGBMatrix **v19;
  const vImage_YpCbCrToARGBMatrix *DefaultYpCbCrToARGBMatrixWithDimensionHint;
  int v21;
  vImage_Error result;
  __int128 v23;
  int v24;
  vImage_YpCbCrPixelRange pixelRange;

  v23 = 0uLL;
  v24 = 0;
  v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_QWORD *)&v18 = 0xFFFFLL;
  *((_QWORD *)&v18 + 1) = 0xFFFFLL;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFCF0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v23 = xmmword_1928DFC00;
      v21 = 1072585656;
    }
    else if (FigCFEqual())
    {
      v23 = xmmword_1928DFC10;
      v21 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDA8];
        goto LABEL_3;
      }
      v23 = xmmword_1928DFC20;
      v21 = 1072746935;
    }
    v24 = v21;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v23;
    goto LABEL_11;
  }
  v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDB0];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v19;
LABEL_11:
  result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage422CbYpCrYp16, kvImageARGB8888, 0);
  *(_QWORD *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_v216_32BGRA;
  *a11 = vt_VImage_Cleanup_v216_32BGRA;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_v216_32ARGB(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  vImage_YpCbCrToARGB *v17;
  __int128 v18;
  const vImage_YpCbCrToARGBMatrix **v19;
  const vImage_YpCbCrToARGBMatrix *DefaultYpCbCrToARGBMatrixWithDimensionHint;
  int v21;
  vImage_Error result;
  __int128 v23;
  int v24;
  vImage_YpCbCrPixelRange pixelRange;

  v23 = 0uLL;
  v24 = 0;
  v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_QWORD *)&v18 = 0xFFFFLL;
  *((_QWORD *)&v18 + 1) = 0xFFFFLL;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFCF0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v23 = xmmword_1928DFC00;
      v21 = 1072585656;
    }
    else if (FigCFEqual())
    {
      v23 = xmmword_1928DFC10;
      v21 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDA8];
        goto LABEL_3;
      }
      v23 = xmmword_1928DFC20;
      v21 = 1072746935;
    }
    v24 = v21;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v23;
    goto LABEL_11;
  }
  v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDB0];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v19;
LABEL_11:
  result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage422CbYpCrYp16, kvImageARGB8888, 0);
  *(_QWORD *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_v216_32ARGB;
  *a11 = vt_VImage_Cleanup_v216_32ARGB;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_v216_l64r(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  vImage_YpCbCrToARGB *v17;
  __int128 v18;
  const vImage_YpCbCrToARGBMatrix **v19;
  const vImage_YpCbCrToARGBMatrix *DefaultYpCbCrToARGBMatrixWithDimensionHint;
  int v21;
  vImage_Error result;
  __int128 v23;
  int v24;
  vImage_YpCbCrPixelRange pixelRange;

  v23 = 0uLL;
  v24 = 0;
  v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_QWORD *)&v18 = 0xFFFFLL;
  *((_QWORD *)&v18 + 1) = 0xFFFFLL;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFCF0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v23 = xmmword_1928DFC00;
      v21 = 1072585656;
    }
    else if (FigCFEqual())
    {
      v23 = xmmword_1928DFC10;
      v21 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDA8];
        goto LABEL_3;
      }
      v23 = xmmword_1928DFC20;
      v21 = 1072746935;
    }
    v24 = v21;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v23;
    goto LABEL_11;
  }
  v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDB0];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v19;
LABEL_11:
  result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage422CbYpCrYp16, kvImageARGB16U, 0);
  *(_QWORD *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_v216_l64r;
  *a11 = vt_VImage_Cleanup_v216_l64r;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_v216_RGhA(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  vImage_YpCbCrToARGB *v17;
  __int128 v18;
  const vImage_YpCbCrToARGBMatrix **v19;
  const vImage_YpCbCrToARGBMatrix *DefaultYpCbCrToARGBMatrixWithDimensionHint;
  int v21;
  vImage_Error result;
  __int128 v23;
  int v24;
  vImage_YpCbCrPixelRange pixelRange;

  v23 = 0uLL;
  v24 = 0;
  v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_QWORD *)&v18 = 0xFFFFLL;
  *((_QWORD *)&v18 + 1) = 0xFFFFLL;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFCF0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v23 = xmmword_1928DFC00;
      v21 = 1072585656;
    }
    else if (FigCFEqual())
    {
      v23 = xmmword_1928DFC10;
      v21 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDA8];
        goto LABEL_3;
      }
      v23 = xmmword_1928DFC20;
      v21 = 1072746935;
    }
    v24 = v21;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v23;
    goto LABEL_11;
  }
  v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDB0];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v19;
LABEL_11:
  result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage422CbYpCrYp16, kvImageARGB16U, 0);
  *(_QWORD *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_v216_RGhA;
  *a11 = vt_VImage_Cleanup_v216_RGhA;
  *a8 = v17;
  return result;
}

uint64_t vt_Copy_v216_s4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t i;
  _WORD *v26;
  _WORD *v27;
  __int16 v28;
  __int16 v29;
  __int16 v30;

  v8 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  if (v8 >= a6[2])
    v8 = a6[2];
  if (a2[3] >= a6[3])
    v9 = a6[3];
  else
    v9 = a2[3];
  if (v9)
  {
    v10 = 0;
    v12 = a8[1];
    v11 = a8[2];
    v13 = *a8;
    v15 = a6[4];
    v14 = a6[5];
    v16 = a7[1] + v12 * v14;
    v17 = a7[2] + v11 * v14;
    v18 = *a7 + *a8 * v14;
    v19 = *a4;
    v20 = v16 + 4 * v15;
    v21 = v17 + 2 * v15;
    v22 = v18 + 2 * v15;
    v23 = *a3 + *a4 * a2[5] + 2 * (a2[4] & 0xFFFFFFFELL);
    do
    {
      if (v8)
      {
        v24 = 0;
        for (i = 0; i < v8; i += 2)
        {
          v26 = (_WORD *)(v20 + v24);
          v27 = (_WORD *)(v22 + 2 * i);
          *(_DWORD *)(v21 + 2 * i) = -1;
          v28 = *(_WORD *)(v23 + v24);
          v29 = *(_WORD *)(v23 + v24 + 4);
          *v26 = v28;
          v26[1] = v29;
          v26[2] = v28;
          v26[3] = v29;
          v30 = *(_WORD *)(v23 + v24 + 6);
          *v27 = *(_WORD *)(v23 + v24 + 2);
          v27[1] = v30;
          v24 += 8;
        }
      }
      v23 += v19;
      v22 += v13;
      v20 += v12;
      v21 += v11;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_v216_sv44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t i;
  _WORD *v23;
  _WORD *v24;
  __int16 v25;
  __int16 v26;
  __int16 v27;

  v8 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  if (v8 >= a6[2])
    v8 = a6[2];
  if (a2[3] >= a6[3])
    v9 = a6[3];
  else
    v9 = a2[3];
  if (v9)
  {
    v10 = 0;
    v11 = *a8;
    v12 = a8[1];
    v14 = a6[4];
    v13 = a6[5];
    v15 = a7[1] + v12 * v13;
    v16 = *a7 + *a8 * v13;
    v17 = *a4;
    v18 = v15 + 4 * v14;
    v19 = v16 + 2 * v14;
    v20 = *a3 + *a4 * a2[5] + 2 * (a2[4] & 0xFFFFFFFELL);
    do
    {
      if (v8)
      {
        v21 = 0;
        for (i = 0; i < v8; i += 2)
        {
          v23 = (_WORD *)(v18 + v21);
          v24 = (_WORD *)(v19 + 2 * i);
          v25 = *(_WORD *)(v20 + v21);
          v26 = *(_WORD *)(v20 + v21 + 4);
          *v23 = v25;
          v23[1] = v26;
          v23[2] = v25;
          v23[3] = v26;
          v27 = *(_WORD *)(v20 + v21 + 6);
          *v24 = *(_WORD *)(v20 + v21 + 2);
          v24[1] = v27;
          v21 += 8;
        }
      }
      v20 += v17;
      v19 += v11;
      v18 += v12;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_v216_sf44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t i;
  unsigned __int16 *v21;
  unsigned int v22;
  unsigned int v23;
  _WORD *v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  unsigned int v28;
  _WORD *v29;

  v8 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  if (v8 >= a6[2])
    v8 = a6[2];
  if (a2[3] >= a6[3])
    v9 = a6[3];
  else
    v9 = a2[3];
  if (v9)
  {
    v10 = 0;
    v11 = *a4;
    v12 = *a8;
    v13 = a8[1];
    v15 = a6[4];
    v14 = a6[5];
    v16 = a7[1] + v13 * v14 + 4 * v15;
    v17 = *a7 + *a8 * v14 + 2 * v15;
    v18 = *a3 + *a4 * a2[5] + 2 * (a2[4] & 0xFFFFFFFELL);
    do
    {
      if (v8)
      {
        v19 = 0;
        for (i = 0; i < v8; i += 2)
        {
          v21 = (unsigned __int16 *)(v18 + v19);
          v22 = *(unsigned __int16 *)(v18 + v19);
          if (v22 >= 0xF000)
            v22 = 61440;
          if (v22 <= 0x1000)
            v22 = 4096;
          v23 = v21[2];
          if (v23 >= 0xF000)
            v23 = 61440;
          v24 = (_WORD *)(v16 + v19);
          if (v23 <= 0x1000)
            v23 = 4096;
          v25 = (613566757 * (unint64_t)((-268431360 - v22 + (v22 << 16)) >> 13)) >> 32;
          v26 = (613566757 * (unint64_t)((-268431360 - v23 + (v23 << 16)) >> 13)) >> 32;
          *v24 = v25;
          v24[1] = v26;
          v24[2] = v25;
          v24[3] = v26;
          v27 = v21[1];
          if (v27 >= 0xEB00)
            v27 = 60160;
          if (v27 <= 0x1000)
            v27 = 4096;
          v28 = v21[3];
          v29 = (_WORD *)(v17 + 2 * i);
          if (v28 >= 0xEB00)
            v28 = 60160;
          if (v28 <= 0x1000)
            v28 = 4096;
          *v29 = (-268431360 - v27 + (v27 << 16)) / 0xDB00;
          v29[1] = (-268431360 - v28 + (v28 << 16)) / 0xDB00;
          v19 += 8;
        }
      }
      v18 += v11;
      v17 += v12;
      v16 += v13;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_v216_s2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t i;
  _WORD *v26;
  _WORD *v27;
  __int16 v28;
  __int16 v29;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a8;
    v14 = a8[1];
    v15 = *(_QWORD *)(a6 + 40);
    v16 = a7[1] + v14 * v15 + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    v17 = a8[2];
    v18 = a7[2] + v17 * v15;
    v19 = *a7 + *a8 * v15;
    v20 = *a4;
    v21 = v18 + 2 * v10;
    v22 = v19 + 2 * v10;
    v23 = *a3 + *a4 * *(_QWORD *)(a2 + 40) + 2 * v9;
    do
    {
      if (v11)
      {
        v24 = 0;
        for (i = 0; i < v11; i += 2)
        {
          v26 = (_WORD *)(v16 + 2 * i);
          v27 = (_WORD *)(v22 + 2 * i);
          *(_DWORD *)(v21 + 2 * i) = -1;
          v28 = *(_WORD *)(v23 + v24 + 4);
          *v26 = *(_WORD *)(v23 + v24);
          v26[1] = v28;
          v29 = *(_WORD *)(v23 + v24 + 6);
          *v27 = *(_WORD *)(v23 + v24 + 2);
          v27[1] = v29;
          v24 += 8;
        }
      }
      v23 += v20;
      v22 += v13;
      v16 += v14;
      v21 += v17;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_Copy_v216_sv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t i;
  _WORD *v22;
  _WORD *v23;
  __int16 v24;
  __int16 v25;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a8;
    v14 = a8[1];
    v15 = *(_QWORD *)(a6 + 40);
    v16 = a7[1] + v14 * v15 + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    v17 = *a4;
    v18 = *a7 + *a8 * v15 + 2 * v10;
    v19 = *a3 + *a4 * *(_QWORD *)(a2 + 40) + 2 * v9;
    do
    {
      if (v11)
      {
        v20 = 0;
        for (i = 0; i < v11; i += 2)
        {
          v22 = (_WORD *)(v16 + 2 * i);
          v23 = (_WORD *)(v18 + 2 * i);
          v24 = *(_WORD *)(v19 + v20 + 4);
          *v22 = *(_WORD *)(v19 + v20);
          v22[1] = v24;
          v25 = *(_WORD *)(v19 + v20 + 6);
          *v23 = *(_WORD *)(v19 + v20 + 2);
          v23[1] = v25;
          v20 += 8;
        }
      }
      v19 += v17;
      v18 += v13;
      v16 += v14;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_Copy_v216_sf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t i;
  unsigned __int16 *v23;
  _WORD *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  _WORD *v29;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a4;
    v14 = *a8;
    v15 = a8[1];
    v16 = *(_QWORD *)(a6 + 40);
    v17 = 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    v18 = *a7 + *a8 * v16 + 2 * v10;
    v19 = *a3 + *a4 * *(_QWORD *)(a2 + 40) + 2 * v9;
    v20 = a7[1] + v15 * v16 + v17;
    do
    {
      if (v11)
      {
        v21 = 0;
        for (i = 0; i < v11; i += 2)
        {
          v23 = (unsigned __int16 *)(v19 + v21);
          v24 = (_WORD *)(v20 + 2 * i);
          v25 = *(unsigned __int16 *)(v19 + v21);
          if (v25 >= 0xF000)
            v25 = 61440;
          v26 = v23[2];
          if (v25 <= 0x1000)
            v25 = 4096;
          if (v26 >= 0xF000)
            v26 = 61440;
          if (v26 <= 0x1000)
            v26 = 4096;
          *v24 = (613566757 * (unint64_t)((-268431360 - v25 + (v25 << 16)) >> 13)) >> 32;
          v24[1] = (613566757 * (unint64_t)((-268431360 - v26 + (v26 << 16)) >> 13)) >> 32;
          v27 = v23[1];
          if (v27 >= 0xEB00)
            v27 = 60160;
          if (v27 <= 0x1000)
            v27 = 4096;
          v28 = v23[3];
          v29 = (_WORD *)(v18 + 2 * i);
          if (v28 >= 0xEB00)
            v28 = 60160;
          if (v28 <= 0x1000)
            v28 = 4096;
          *v29 = (-268431360 - v27 + (v27 << 16)) / 0xDB00;
          v29[1] = (-268431360 - v28 + (v28 << 16)) / 0xDB00;
          v21 += 8;
        }
      }
      v19 += v13;
      v18 += v14;
      v20 += v15;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_v216_sv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _WORD *v28;
  unsigned int v29;
  _WORD *v30;
  __int16 v31;
  uint64_t v32;

  v8 = *(_QWORD *)(a2 + 40);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
  v11 = (v8 & 1) + v8;
  v12 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v13 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v14 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v15 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v16 = v10 - v9;
  if (v16 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v13)
    v16 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v13;
  v17 = v12 - v11;
  if (v17 >= v15 - v14)
    v17 = v15 - v14;
  if (v17)
  {
    v18 = 0;
    v19 = *a8;
    v20 = a8[1];
    v21 = a7[1] + ((unint64_t)(v20 * v14) >> 1) + 2 * (v13 & 0x3FFFFFFFFFFFFFFFLL);
    v22 = *a4;
    v23 = *a7 + *a8 * v14 + 2 * v13;
    v24 = *a3 + *a4 * v11 + 2 * v9;
    v25 = *a3 + v22 + v22 * (v8 + (v8 & 1)) + 2 * v9;
    do
    {
      if (v16)
      {
        v26 = 0;
        v27 = 0;
        v28 = (_WORD *)v21;
        do
        {
          if ((v18 & 1) == 0)
          {
            v29 = (*(unsigned __int16 *)(v24 + v26 + 4) + *(unsigned __int16 *)(v25 + v26 + 4) + 1) >> 1;
            *v28 = (*(unsigned __int16 *)(v24 + v26) + *(unsigned __int16 *)(v25 + v26) + 1) >> 1;
            v28[1] = v29;
            v28 += 2;
          }
          v30 = (_WORD *)(v23 + 2 * v27);
          v31 = *(_WORD *)(v24 + v26 + 6);
          *v30 = *(_WORD *)(v24 + v26 + 2);
          v30[1] = v31;
          v27 += 2;
          v26 += 8;
        }
        while (v27 < v16);
      }
      v24 += v22;
      v23 += v19;
      if ((v18 & 1) != 0)
        v32 = 0;
      else
        v32 = v20;
      v21 += v32;
      ++v18;
      v25 += v22;
    }
    while (v18 != v17);
  }
  return 0;
}

uint64_t vt_CopyDec_v216_sv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __int16 *v23;
  _WORD *v24;
  __int16 v25;
  _WORD *v26;
  __int16 v27;
  uint64_t v28;

  v8 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v9 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v12 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v13 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v8;
  if (v13 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v13 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  v14 = ((*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE) - v9;
  if (v14 >= v12 - v11)
    v14 = v12 - v11;
  if (v14)
  {
    v15 = 0;
    v16 = *a8;
    v17 = a8[1];
    v18 = a7[1] + ((unint64_t)(v17 * v11) >> 1) + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    v19 = *a4;
    v20 = *a7 + *a8 * v11 + 2 * v10;
    v21 = *a4 * v9 + 2 * v8 + *a3 + 4;
    do
    {
      if (v13)
      {
        v22 = 0;
        v23 = (__int16 *)v21;
        v24 = (_WORD *)v18;
        do
        {
          if ((v15 & 1) == 0)
          {
            v25 = *v23;
            *v24 = *(v23 - 2);
            v24[1] = v25;
            v24 += 2;
          }
          v26 = (_WORD *)(v20 + 2 * v22);
          v27 = v23[1];
          *v26 = *(v23 - 1);
          v26[1] = v27;
          v22 += 2;
          v23 += 4;
        }
        while (v22 < v13);
      }
      v20 += v16;
      if ((v15 & 1) != 0)
        v28 = 0;
      else
        v28 = v17;
      v18 += v28;
      ++v15;
      v21 += v19;
    }
    while (v15 != v14);
  }
  return 0;
}

uint64_t vt_CopyAvg_v216_sf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _WORD *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  _WORD *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;

  v8 = *(_QWORD *)(a2 + 40);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
  v11 = (v8 & 1) + v8;
  v12 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v13 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v14 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v15 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v16 = v10 - v9;
  if (v16 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v13)
    v16 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v13;
  v17 = v12 - v11;
  if (v17 >= v15 - v14)
    v17 = v15 - v14;
  if (v17)
  {
    v18 = 0;
    v19 = *a4;
    v20 = *a8;
    v21 = a8[1];
    v22 = a7[1] + ((unint64_t)(v21 * v14) >> 1) + 2 * (v13 & 0x3FFFFFFFFFFFFFFFLL);
    v23 = *a7 + *a8 * v14 + 2 * v13;
    v24 = *a3 + *a4 * v11 + 2 * v9;
    v25 = *a3 + v19 + v19 * (v8 + (v8 & 1)) + 2 * v9;
    do
    {
      if (v16)
      {
        v26 = 0;
        v27 = 0;
        v28 = (_WORD *)v22;
        do
        {
          if ((v18 & 1) == 0)
          {
            v29 = *(unsigned __int16 *)(v24 + v26);
            v30 = *(unsigned __int16 *)(v25 + v26);
            if (v29 >= 0xF000)
              v29 = 61440;
            if (v29 <= 0x1000)
              v29 = 4096;
            if (v30 >= 0xF000)
              v30 = 61440;
            if (v30 <= 0x1000)
              v30 = 4096;
            v31 = *(unsigned __int16 *)(v24 + v26 + 4);
            v32 = *(unsigned __int16 *)(v25 + v26 + 4);
            if (v31 >= 0xF000)
              v31 = 61440;
            if (v31 <= 0x1000)
              v31 = 4096;
            if (v32 >= 0xF000)
              v32 = 61440;
            if (v32 <= 0x1000)
              v32 = 4096;
            *v28 = (((613566757 * (unint64_t)((-268431360 - v29 + (v29 << 16)) >> 13)) >> 32)
                                + ((613566757 * (unint64_t)((-268431360 - v30 + (v30 << 16)) >> 13)) >> 32)
                                + 1) >> 1;
            v28[1] = (((613566757 * (unint64_t)((-268431360 - v31 + (v31 << 16)) >> 13)) >> 32)
                                  + ((613566757 * (unint64_t)((-268431360 - v32 + (v32 << 16)) >> 13)) >> 32)
                                  + 1) >> 1;
            v28 += 2;
          }
          v33 = (_WORD *)(v23 + 2 * v27);
          v34 = *(unsigned __int16 *)(v24 + v26 + 2);
          if (v34 >= 0xEB00)
            v34 = 60160;
          if (v34 <= 0x1000)
            v34 = 4096;
          v35 = *(unsigned __int16 *)(v24 + v26 + 6);
          if (v35 >= 0xEB00)
            v35 = 60160;
          if (v35 <= 0x1000)
            v35 = 4096;
          *v33 = (-268431360 - v34 + (v34 << 16)) / 0xDB00;
          v33[1] = (-268431360 - v35 + (v35 << 16)) / 0xDB00;
          v27 += 2;
          v26 += 8;
        }
        while (v27 < v16);
      }
      v24 += v19;
      v23 += v20;
      if ((v18 & 1) != 0)
        v36 = 0;
      else
        v36 = v21;
      v22 += v36;
      ++v18;
      v25 += v19;
    }
    while (v18 != v17);
  }
  return 0;
}

uint64_t vt_CopyDec_v216_sf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned __int16 *v25;
  _WORD *v26;
  unsigned int v27;
  unsigned int v28;
  _WORD *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;

  v8 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v9 = (*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
  v10 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v11 = (*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE;
  v12 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v13 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v14 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v15 = v9 - v8;
  if (v15 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v12)
    v15 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v12;
  v16 = v11 - v10;
  if (v16 >= v14 - v13)
    v16 = v14 - v13;
  if (v16)
  {
    v17 = 0;
    v18 = *a4;
    v19 = *a8;
    v20 = a8[1];
    v21 = a7[1] + ((unint64_t)(v20 * v13) >> 1) + 2 * (v12 & 0x3FFFFFFFFFFFFFFFLL);
    v22 = *a7 + *a8 * v13 + 2 * v12;
    v23 = *a4 * v10 + 2 * v8 + *a3 + 4;
    do
    {
      if (v15)
      {
        v24 = 0;
        v25 = (unsigned __int16 *)v23;
        v26 = (_WORD *)v21;
        do
        {
          if ((v17 & 1) == 0)
          {
            v27 = *(v25 - 2);
            if (v27 >= 0xF000)
              v27 = 61440;
            if (v27 <= 0x1000)
              v27 = 4096;
            v28 = *v25;
            if (v28 >= 0xF000)
              v28 = 61440;
            if (v28 <= 0x1000)
              v28 = 4096;
            *v26 = (613566757 * (unint64_t)((-268431360 - v27 + (v27 << 16)) >> 13)) >> 32;
            v26[1] = (613566757 * (unint64_t)((-268431360 - v28 + (v28 << 16)) >> 13)) >> 32;
            v26 += 2;
          }
          v29 = (_WORD *)(v22 + 2 * v24);
          v30 = *(v25 - 1);
          if (v30 >= 0xEB00)
            v30 = 60160;
          if (v30 <= 0x1000)
            v30 = 4096;
          v31 = v25[1];
          if (v31 >= 0xEB00)
            v31 = 60160;
          if (v31 <= 0x1000)
            v31 = 4096;
          *v29 = (-268431360 - v30 + (v30 << 16)) / 0xDB00;
          v29[1] = (-268431360 - v31 + (v31 << 16)) / 0xDB00;
          v24 += 2;
          v25 += 4;
        }
        while (v24 < v15);
      }
      v22 += v19;
      if ((v17 & 1) != 0)
        v32 = 0;
      else
        v32 = v20;
      v21 += v32;
      ++v17;
      v23 += v18;
    }
    while (v17 != v16);
  }
  return 0;
}

uint64_t vt_Copy_v216_t4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t i;
  _WORD *v26;
  _WORD *v27;
  __int16 v28;
  __int16 v29;
  __int16 v30;

  v8 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  if (v8 >= a6[2])
    v8 = a6[2];
  if (a2[3] >= a6[3])
    v9 = a6[3];
  else
    v9 = a2[3];
  if (v9)
  {
    v10 = 0;
    v12 = a8[1];
    v11 = a8[2];
    v13 = *a8;
    v15 = a6[4];
    v14 = a6[5];
    v16 = a7[1] + v12 * v14;
    v17 = a7[2] + v11 * v14;
    v18 = *a7 + *a8 * v14;
    v19 = *a4;
    v20 = v16 + 4 * v15;
    v21 = v17 + 2 * v15;
    v22 = v18 + 2 * v15;
    v23 = *a3 + *a4 * a2[5] + 2 * (a2[4] & 0xFFFFFFFELL);
    do
    {
      if (v8)
      {
        v24 = 0;
        for (i = 0; i < v8; i += 2)
        {
          v26 = (_WORD *)(v20 + v24);
          v27 = (_WORD *)(v22 + 2 * i);
          *(_DWORD *)(v21 + 2 * i) = -1;
          v28 = *(_WORD *)(v23 + v24) & 0xFFF0;
          v29 = *(_WORD *)(v23 + v24 + 4) & 0xFFF0;
          *v26 = v28;
          v26[1] = v29;
          v26[2] = v28;
          v26[3] = v29;
          v30 = *(_WORD *)(v23 + v24 + 6) & 0xFFF0;
          *v27 = *(_WORD *)(v23 + v24 + 2) & 0xFFF0;
          v27[1] = v30;
          v24 += 8;
        }
      }
      v23 += v19;
      v22 += v13;
      v20 += v12;
      v21 += v11;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_v216_tv44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t i;
  _WORD *v23;
  _WORD *v24;
  __int16 v25;
  __int16 v26;
  __int16 v27;

  v8 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  if (v8 >= a6[2])
    v8 = a6[2];
  if (a2[3] >= a6[3])
    v9 = a6[3];
  else
    v9 = a2[3];
  if (v9)
  {
    v10 = 0;
    v11 = *a8;
    v12 = a8[1];
    v14 = a6[4];
    v13 = a6[5];
    v15 = a7[1] + v12 * v13;
    v16 = *a7 + *a8 * v13;
    v17 = *a4;
    v18 = v15 + 4 * v14;
    v19 = v16 + 2 * v14;
    v20 = *a3 + *a4 * a2[5] + 2 * (a2[4] & 0xFFFFFFFELL);
    do
    {
      if (v8)
      {
        v21 = 0;
        for (i = 0; i < v8; i += 2)
        {
          v23 = (_WORD *)(v18 + v21);
          v24 = (_WORD *)(v19 + 2 * i);
          v25 = *(_WORD *)(v20 + v21) & 0xFFF0;
          v26 = *(_WORD *)(v20 + v21 + 4) & 0xFFF0;
          *v23 = v25;
          v23[1] = v26;
          v23[2] = v25;
          v23[3] = v26;
          v27 = *(_WORD *)(v20 + v21 + 6) & 0xFFF0;
          *v24 = *(_WORD *)(v20 + v21 + 2) & 0xFFF0;
          v24[1] = v27;
          v21 += 8;
        }
      }
      v20 += v17;
      v19 += v11;
      v18 += v12;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_v216_tf44(double a1, double a2, double a3, double a4, double a5, double a6, int8x8_t a7, uint64_t a8, _QWORD *a9, _QWORD *a10, uint64_t *a11, uint64_t a12, _QWORD *a13, _QWORD *a14, uint64_t *a15)
{
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int32x2_t v26;
  uint32x2_t v27;
  uint64_t v28;
  unint64_t i;
  _WORD *v30;
  int16x4_t v31;
  unsigned int v32;
  unsigned int v33;

  v15 = a9[2] + a9[4] - (a9[4] & 0xFFFFFFFELL) + ((a9[2] + a9[4]) & 1);
  if (v15 >= a13[2])
    v15 = a13[2];
  if (a9[3] >= a13[3])
    v16 = a13[3];
  else
    v16 = a9[3];
  if (v16)
  {
    v17 = 0;
    v18 = *a11;
    v19 = *a15;
    v20 = a15[1];
    v22 = a13[4];
    v21 = a13[5];
    v23 = a14[1] + v20 * v21 + 4 * v22;
    v24 = *a14 + *a15 * v21 + 2 * v22;
    v25 = *a10 + *a11 * a9[5] + 2 * (a9[4] & 0xFFFFFFFELL);
    v26 = vdup_n_s32(0xFF001000);
    v27 = (uint32x2_t)vdup_n_s32(0x24924925u);
    do
    {
      if (v15)
      {
        v28 = 0;
        for (i = 0; i < v15; i += 2)
        {
          v30 = (_WORD *)(v24 + 2 * i);
          a7.i16[0] = *(_WORD *)(v25 + v28);
          a7.i16[2] = *(_WORD *)(v25 + v28 + 4);
          v31 = (int16x4_t)vshl_n_s32(vshrn_n_s64((int64x2_t)vmull_u32(vshr_n_u32((uint32x2_t)vmla_s32(v26, (int32x2_t)vmax_u32(vmin_u32((uint32x2_t)vand_s8(a7, (int8x8_t)0xFFFF0000FFFFLL), (uint32x2_t)0xF0000000F000), (uint32x2_t)0x100000001000), (int32x2_t)0xF0000000FLL), 0xDuLL), v27), 0x20uLL), 4uLL);
          a7 = (int8x8_t)vuzp1_s16(v31, v31);
          *(double *)(v23 + v28) = *(double *)&a7;
          v32 = *(unsigned __int16 *)(v25 + v28 + 2);
          if (v32 >= 0xEB00)
            v32 = 60160;
          if (v32 <= 0x1000)
            v32 = 4096;
          v33 = *(unsigned __int16 *)(v25 + v28 + 6);
          if (v33 >= 0xEB00)
            v33 = 60160;
          if (v33 <= 0x1000)
            v33 = 4096;
          *v30 = 16 * ((-16773120 - v32 + (v32 << 12)) / 0xDB00);
          v30[1] = 16 * ((-16773120 - v33 + (v33 << 12)) / 0xDB00);
          v28 += 8;
        }
      }
      v25 += v18;
      v24 += v19;
      v23 += v20;
      ++v17;
    }
    while (v17 != v16);
  }
  return 0;
}

uint64_t vt_Copy_v216_t2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t i;
  _WORD *v26;
  _WORD *v27;
  __int16 v28;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a8;
    v14 = a8[1];
    v15 = *(_QWORD *)(a6 + 40);
    v16 = a7[1] + v14 * v15 + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    v17 = a8[2];
    v18 = a7[2] + v17 * v15;
    v19 = *a7 + *a8 * v15;
    v20 = *a4;
    v21 = v18 + 2 * v10;
    v22 = v19 + 2 * v10;
    v23 = *a3 + *a4 * *(_QWORD *)(a2 + 40) + 2 * v9;
    do
    {
      if (v11)
      {
        v24 = 0;
        for (i = 0; i < v11; i += 2)
        {
          v26 = (_WORD *)(v16 + 2 * i);
          v27 = (_WORD *)(v22 + 2 * i);
          *(_DWORD *)(v21 + 2 * i) = -1;
          v28 = *(_WORD *)(v23 + v24 + 4) & 0xFFF0;
          *v26 = *(_WORD *)(v23 + v24) & 0xFFF0;
          v26[1] = v28;
          LOWORD(v26) = *(_WORD *)(v23 + v24 + 6) & 0xFFF0;
          *v27 = *(_WORD *)(v23 + v24 + 2) & 0xFFF0;
          v27[1] = (_WORD)v26;
          v24 += 8;
        }
      }
      v23 += v20;
      v22 += v13;
      v16 += v14;
      v21 += v17;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_Copy_v216_tv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t i;
  _WORD *v22;
  _WORD *v23;
  __int16 v24;
  __int16 v25;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a8;
    v14 = a8[1];
    v15 = *(_QWORD *)(a6 + 40);
    v16 = a7[1] + v14 * v15 + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    v17 = *a4;
    v18 = *a7 + *a8 * v15 + 2 * v10;
    v19 = *a3 + *a4 * *(_QWORD *)(a2 + 40) + 2 * v9;
    do
    {
      if (v11)
      {
        v20 = 0;
        for (i = 0; i < v11; i += 2)
        {
          v22 = (_WORD *)(v16 + 2 * i);
          v23 = (_WORD *)(v18 + 2 * i);
          v24 = *(_WORD *)(v19 + v20 + 4) & 0xFFF0;
          *v22 = *(_WORD *)(v19 + v20) & 0xFFF0;
          v22[1] = v24;
          v25 = *(_WORD *)(v19 + v20 + 6) & 0xFFF0;
          *v23 = *(_WORD *)(v19 + v20 + 2) & 0xFFF0;
          v23[1] = v25;
          v20 += 8;
        }
      }
      v19 += v17;
      v18 += v13;
      v16 += v14;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_Copy_v216_tf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t i;
  unsigned __int16 *v23;
  unsigned int v24;
  unsigned int v25;
  _WORD *v26;
  unsigned int v27;
  unsigned int v28;
  _WORD *v29;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a4;
    v14 = *a8;
    v15 = a8[1];
    v16 = *(_QWORD *)(a6 + 40);
    v17 = 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    v18 = *a7 + *a8 * v16 + 2 * v10;
    v19 = *a3 + *a4 * *(_QWORD *)(a2 + 40) + 2 * v9;
    v20 = a7[1] + v15 * v16 + v17;
    do
    {
      if (v11)
      {
        v21 = 0;
        for (i = 0; i < v11; i += 2)
        {
          v23 = (unsigned __int16 *)(v19 + v21);
          v24 = *(unsigned __int16 *)(v19 + v21);
          if (v24 >= 0xF000)
            v24 = 61440;
          if (v24 <= 0x1000)
            v24 = 4096;
          v25 = v23[2];
          if (v25 >= 0xF000)
            v25 = 61440;
          if (v25 <= 0x1000)
            v25 = 4096;
          v26 = (_WORD *)(v20 + 2 * i);
          *v26 = 16 * ((613566757 * (unint64_t)((-16773120 - v24 + (v24 << 12)) >> 13)) >> 32);
          v26[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v25 + (v25 << 12)) >> 13)) >> 32);
          v27 = v23[1];
          if (v27 >= 0xEB00)
            v27 = 60160;
          if (v27 <= 0x1000)
            v27 = 4096;
          v28 = v23[3];
          if (v28 >= 0xEB00)
            v28 = 60160;
          v29 = (_WORD *)(v18 + 2 * i);
          if (v28 <= 0x1000)
            v28 = 4096;
          *v29 = 16 * ((-16773120 - v27 + (v27 << 12)) / 0xDB00);
          v29[1] = 16 * ((-16773120 - v28 + (v28 << 12)) / 0xDB00);
          v21 += 8;
        }
      }
      v19 += v13;
      v18 += v14;
      v20 += v15;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_v216_tv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _WORD *v28;
  int v29;
  _WORD *v30;
  __int16 v31;
  uint64_t v32;

  v8 = *(_QWORD *)(a2 + 40);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
  v11 = (v8 & 1) + v8;
  v12 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v13 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v14 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v15 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v16 = v10 - v9;
  if (v16 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v13)
    v16 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v13;
  v17 = v12 - v11;
  if (v17 >= v15 - v14)
    v17 = v15 - v14;
  if (v17)
  {
    v18 = 0;
    v19 = *a8;
    v20 = a8[1];
    v21 = a7[1] + ((unint64_t)(v20 * v14) >> 1) + 2 * (v13 & 0x3FFFFFFFFFFFFFFFLL);
    v22 = *a4;
    v23 = *a7 + *a8 * v14 + 2 * v13;
    v24 = *a3 + *a4 * v11 + 2 * v9;
    v25 = *a3 + v22 + v22 * (v8 + (v8 & 1)) + 2 * v9;
    do
    {
      if (v16)
      {
        v26 = 0;
        v27 = 0;
        v28 = (_WORD *)v21;
        do
        {
          if ((v18 & 1) == 0)
          {
            v29 = (*(unsigned __int16 *)(v25 + v26 + 4) >> 4) + (*(unsigned __int16 *)(v24 + v26 + 4) >> 4);
            *v28 = (8 * ((*(_WORD *)(v25 + v26) >> 4) + (*(_WORD *)(v24 + v26) >> 4)) + 8) & 0xFFF0;
            v28[1] = (8 * v29 + 8) & 0xFFF0;
            v28 += 2;
          }
          v30 = (_WORD *)(v23 + 2 * v27);
          v31 = *(_WORD *)(v24 + v26 + 6) & 0xFFF0;
          *v30 = *(_WORD *)(v24 + v26 + 2) & 0xFFF0;
          v30[1] = v31;
          v27 += 2;
          v26 += 8;
        }
        while (v27 < v16);
      }
      v24 += v22;
      v23 += v19;
      if ((v18 & 1) != 0)
        v32 = 0;
      else
        v32 = v20;
      v21 += v32;
      ++v18;
      v25 += v22;
    }
    while (v18 != v17);
  }
  return 0;
}

uint64_t vt_CopyDec_v216_tv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _WORD *v23;
  _WORD *v24;
  __int16 v25;
  _WORD *v26;
  __int16 v27;
  uint64_t v28;

  v8 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v9 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v12 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v13 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v8;
  if (v13 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v13 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  v14 = ((*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE) - v9;
  if (v14 >= v12 - v11)
    v14 = v12 - v11;
  if (v14)
  {
    v15 = 0;
    v16 = *a8;
    v17 = a8[1];
    v18 = a7[1] + ((unint64_t)(v17 * v11) >> 1) + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    v19 = *a4;
    v20 = *a7 + *a8 * v11 + 2 * v10;
    v21 = *a4 * v9 + 2 * v8 + *a3 + 4;
    do
    {
      if (v13)
      {
        v22 = 0;
        v23 = (_WORD *)v21;
        v24 = (_WORD *)v18;
        do
        {
          if ((v15 & 1) == 0)
          {
            v25 = *v23 & 0xFFF0;
            *v24 = *(v23 - 2) & 0xFFF0;
            v24[1] = v25;
            v24 += 2;
          }
          v26 = (_WORD *)(v20 + 2 * v22);
          v27 = v23[1] & 0xFFF0;
          *v26 = *(v23 - 1) & 0xFFF0;
          v26[1] = v27;
          v22 += 2;
          v23 += 4;
        }
        while (v22 < v13);
      }
      v20 += v16;
      if ((v15 & 1) != 0)
        v28 = 0;
      else
        v28 = v17;
      v18 += v28;
      ++v15;
      v21 += v19;
    }
    while (v15 != v14);
  }
  return 0;
}

uint64_t vt_CopyAvg_v216_tf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _WORD *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  _WORD *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;

  v8 = *(_QWORD *)(a2 + 40);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
  v11 = (v8 & 1) + v8;
  v12 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v13 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v14 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v15 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v16 = v10 - v9;
  if (v16 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v13)
    v16 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v13;
  v17 = v12 - v11;
  if (v17 >= v15 - v14)
    v17 = v15 - v14;
  if (v17)
  {
    v18 = 0;
    v19 = *a4;
    v20 = *a8;
    v21 = a8[1];
    v22 = a7[1] + ((unint64_t)(v21 * v14) >> 1) + 2 * (v13 & 0x3FFFFFFFFFFFFFFFLL);
    v23 = *a7 + *a8 * v14 + 2 * v13;
    v24 = *a3 + *a4 * v11 + 2 * v9;
    v25 = *a3 + v19 + v19 * (v8 + (v8 & 1)) + 2 * v9;
    do
    {
      if (v16)
      {
        v26 = 0;
        v27 = 0;
        v28 = (_WORD *)v22;
        do
        {
          if ((v18 & 1) == 0)
          {
            v29 = *(unsigned __int16 *)(v24 + v26);
            v30 = *(unsigned __int16 *)(v25 + v26);
            if (v29 >= 0xF000)
              v29 = 61440;
            if (v29 <= 0x1000)
              v29 = 4096;
            if (v30 >= 0xF000)
              v30 = 61440;
            if (v30 <= 0x1000)
              v30 = 4096;
            v31 = *(unsigned __int16 *)(v24 + v26 + 4);
            v32 = *(unsigned __int16 *)(v25 + v26 + 4);
            if (v31 >= 0xF000)
              v31 = 61440;
            if (v31 <= 0x1000)
              v31 = 4096;
            if (v32 >= 0xF000)
              v32 = 61440;
            if (v32 <= 0x1000)
              v32 = 4096;
            *v28 = (8
                  * (((613566757 * (unint64_t)((-16773120 - v30 + (v30 << 12)) >> 13)) >> 32)
                   + ((613566757 * (unint64_t)((-16773120 - v29 + (v29 << 12)) >> 13)) >> 32))
                  + 8) & 0xFFF0;
            v28[1] = (8
                    * (((613566757 * (unint64_t)((-16773120 - v32 + (v32 << 12)) >> 13)) >> 32)
                     + ((613566757 * (unint64_t)((-16773120 - v31 + (v31 << 12)) >> 13)) >> 32))
                    + 8) & 0xFFF0;
            v28 += 2;
          }
          v33 = (_WORD *)(v23 + 2 * v27);
          v34 = *(unsigned __int16 *)(v24 + v26 + 2);
          if (v34 >= 0xEB00)
            v34 = 60160;
          if (v34 <= 0x1000)
            v34 = 4096;
          v35 = *(unsigned __int16 *)(v24 + v26 + 6);
          if (v35 >= 0xEB00)
            v35 = 60160;
          if (v35 <= 0x1000)
            v35 = 4096;
          *v33 = 16 * ((-16773120 - v34 + (v34 << 12)) / 0xDB00);
          v33[1] = 16 * ((-16773120 - v35 + (v35 << 12)) / 0xDB00);
          v27 += 2;
          v26 += 8;
        }
        while (v27 < v16);
      }
      v24 += v19;
      v23 += v20;
      if ((v18 & 1) != 0)
        v36 = 0;
      else
        v36 = v21;
      v22 += v36;
      ++v18;
      v25 += v19;
    }
    while (v18 != v17);
  }
  return 0;
}

uint64_t vt_CopyDec_v216_tf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned __int16 *v25;
  _WORD *v26;
  unsigned int v27;
  unsigned int v28;
  _WORD *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;

  v8 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v9 = (*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
  v10 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v11 = (*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE;
  v12 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v13 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v14 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v15 = v9 - v8;
  if (v15 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v12)
    v15 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v12;
  v16 = v11 - v10;
  if (v16 >= v14 - v13)
    v16 = v14 - v13;
  if (v16)
  {
    v17 = 0;
    v18 = *a4;
    v19 = *a8;
    v20 = a8[1];
    v21 = a7[1] + ((unint64_t)(v20 * v13) >> 1) + 2 * (v12 & 0x3FFFFFFFFFFFFFFFLL);
    v22 = *a7 + *a8 * v13 + 2 * v12;
    v23 = *a4 * v10 + 2 * v8 + *a3 + 4;
    do
    {
      if (v15)
      {
        v24 = 0;
        v25 = (unsigned __int16 *)v23;
        v26 = (_WORD *)v21;
        do
        {
          if ((v17 & 1) == 0)
          {
            v27 = *(v25 - 2);
            if (v27 >= 0xF000)
              v27 = 61440;
            if (v27 <= 0x1000)
              v27 = 4096;
            v28 = *v25;
            if (v28 >= 0xF000)
              v28 = 61440;
            if (v28 <= 0x1000)
              v28 = 4096;
            *v26 = 16 * ((613566757 * (unint64_t)((-16773120 - v27 + (v27 << 12)) >> 13)) >> 32);
            v26[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v28 + (v28 << 12)) >> 13)) >> 32);
            v26 += 2;
          }
          v29 = (_WORD *)(v22 + 2 * v24);
          v30 = *(v25 - 1);
          if (v30 >= 0xEB00)
            v30 = 60160;
          if (v30 <= 0x1000)
            v30 = 4096;
          v31 = v25[1];
          if (v31 >= 0xEB00)
            v31 = 60160;
          if (v31 <= 0x1000)
            v31 = 4096;
          *v29 = 16 * ((-16773120 - v30 + (v30 << 12)) / 0xDB00);
          v29[1] = 16 * ((-16773120 - v31 + (v31 << 12)) / 0xDB00);
          v24 += 2;
          v25 += 4;
        }
        while (v24 < v15);
      }
      v22 += v19;
      if ((v17 & 1) != 0)
        v32 = 0;
      else
        v32 = v20;
      v21 += v32;
      ++v17;
      v23 += v18;
    }
    while (v17 != v16);
  }
  return 0;
}

uint64_t vt_Copy_v216_x4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t i;
  _WORD *v26;
  _WORD *v27;
  __int16 v28;
  __int16 v29;
  __int16 v30;

  v8 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  if (v8 >= a6[2])
    v8 = a6[2];
  if (a2[3] >= a6[3])
    v9 = a6[3];
  else
    v9 = a2[3];
  if (v9)
  {
    v10 = 0;
    v12 = a8[1];
    v11 = a8[2];
    v13 = *a8;
    v15 = a6[4];
    v14 = a6[5];
    v16 = a7[1] + v12 * v14;
    v17 = a7[2] + v11 * v14;
    v18 = *a7 + *a8 * v14;
    v19 = *a4;
    v20 = v16 + 4 * v15;
    v21 = v17 + 2 * v15;
    v22 = v18 + 2 * v15;
    v23 = *a3 + *a4 * a2[5] + 2 * (a2[4] & 0xFFFFFFFELL);
    do
    {
      if (v8)
      {
        v24 = 0;
        for (i = 0; i < v8; i += 2)
        {
          v26 = (_WORD *)(v20 + v24);
          v27 = (_WORD *)(v22 + 2 * i);
          *(_DWORD *)(v21 + 2 * i) = -1;
          v28 = *(_WORD *)(v23 + v24) & 0xFFC0;
          v29 = *(_WORD *)(v23 + v24 + 4) & 0xFFC0;
          *v26 = v28;
          v26[1] = v29;
          v26[2] = v28;
          v26[3] = v29;
          v30 = *(_WORD *)(v23 + v24 + 6) & 0xFFC0;
          *v27 = *(_WORD *)(v23 + v24 + 2) & 0xFFC0;
          v27[1] = v30;
          v24 += 8;
        }
      }
      v23 += v19;
      v22 += v13;
      v20 += v12;
      v21 += v11;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_v216_x444(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t i;
  _WORD *v23;
  _WORD *v24;
  __int16 v25;
  __int16 v26;
  __int16 v27;

  v8 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  if (v8 >= a6[2])
    v8 = a6[2];
  if (a2[3] >= a6[3])
    v9 = a6[3];
  else
    v9 = a2[3];
  if (v9)
  {
    v10 = 0;
    v11 = *a8;
    v12 = a8[1];
    v14 = a6[4];
    v13 = a6[5];
    v15 = a7[1] + v12 * v13;
    v16 = *a7 + *a8 * v13;
    v17 = *a4;
    v18 = v15 + 4 * v14;
    v19 = v16 + 2 * v14;
    v20 = *a3 + *a4 * a2[5] + 2 * (a2[4] & 0xFFFFFFFELL);
    do
    {
      if (v8)
      {
        v21 = 0;
        for (i = 0; i < v8; i += 2)
        {
          v23 = (_WORD *)(v18 + v21);
          v24 = (_WORD *)(v19 + 2 * i);
          v25 = *(_WORD *)(v20 + v21) & 0xFFC0;
          v26 = *(_WORD *)(v20 + v21 + 4) & 0xFFC0;
          *v23 = v25;
          v23[1] = v26;
          v23[2] = v25;
          v23[3] = v26;
          v27 = *(_WORD *)(v20 + v21 + 6) & 0xFFC0;
          *v24 = *(_WORD *)(v20 + v21 + 2) & 0xFFC0;
          v24[1] = v27;
          v21 += 8;
        }
      }
      v20 += v17;
      v19 += v11;
      v18 += v12;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_v216_xf44(double a1, double a2, double a3, double a4, double a5, double a6, int8x8_t a7, uint64_t a8, _QWORD *a9, _QWORD *a10, uint64_t *a11, uint64_t a12, _QWORD *a13, _QWORD *a14, uint64_t *a15)
{
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int32x2_t v26;
  uint32x2_t v27;
  uint64_t v28;
  unint64_t i;
  _WORD *v30;
  int16x4_t v31;
  unsigned int v32;
  unsigned int v33;

  v15 = a9[2] + a9[4] - (a9[4] & 0xFFFFFFFELL) + ((a9[2] + a9[4]) & 1);
  if (v15 >= a13[2])
    v15 = a13[2];
  if (a9[3] >= a13[3])
    v16 = a13[3];
  else
    v16 = a9[3];
  if (v16)
  {
    v17 = 0;
    v18 = *a11;
    v19 = *a15;
    v20 = a15[1];
    v22 = a13[4];
    v21 = a13[5];
    v23 = a14[1] + v20 * v21 + 4 * v22;
    v24 = *a14 + *a15 * v21 + 2 * v22;
    v25 = *a10 + *a11 * a9[5] + 2 * (a9[4] & 0xFFFFFFFELL);
    v26 = vdup_n_s32(0xFFC01000);
    v27 = (uint32x2_t)vdup_n_s32(0x24924925u);
    do
    {
      if (v15)
      {
        v28 = 0;
        for (i = 0; i < v15; i += 2)
        {
          v30 = (_WORD *)(v24 + 2 * i);
          a7.i16[0] = *(_WORD *)(v25 + v28);
          a7.i16[2] = *(_WORD *)(v25 + v28 + 4);
          v31 = (int16x4_t)vshl_n_s32(vshrn_n_s64((int64x2_t)vmull_u32(vshr_n_u32((uint32x2_t)vmla_s32(v26, (int32x2_t)vmax_u32(vmin_u32((uint32x2_t)vand_s8(a7, (int8x8_t)0xFFFF0000FFFFLL), (uint32x2_t)0xF0000000F000), (uint32x2_t)0x100000001000), (int32x2_t)0x300000003), 0xDuLL), v27), 0x20uLL), 6uLL);
          a7 = (int8x8_t)vuzp1_s16(v31, v31);
          *(double *)(v23 + v28) = *(double *)&a7;
          v32 = *(unsigned __int16 *)(v25 + v28 + 2);
          if (v32 >= 0xEB00)
            v32 = 60160;
          if (v32 <= 0x1000)
            v32 = 4096;
          v33 = *(unsigned __int16 *)(v25 + v28 + 6);
          if (v33 >= 0xEB00)
            v33 = 60160;
          if (v33 <= 0x1000)
            v33 = 4096;
          *v30 = (unsigned __int16)((-4190208 - v32 + (v32 << 10)) / 0xDB00) << 6;
          v30[1] = (unsigned __int16)((-4190208 - v33 + (v33 << 10)) / 0xDB00) << 6;
          v28 += 8;
        }
      }
      v25 += v18;
      v24 += v19;
      v23 += v20;
      ++v17;
    }
    while (v17 != v16);
  }
  return 0;
}

uint64_t vt_Copy_v216_x2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t i;
  _WORD *v26;
  _WORD *v27;
  __int16 v28;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a8;
    v14 = a8[1];
    v15 = *(_QWORD *)(a6 + 40);
    v16 = a7[1] + v14 * v15 + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    v17 = a8[2];
    v18 = a7[2] + v17 * v15;
    v19 = *a7 + *a8 * v15;
    v20 = *a4;
    v21 = v18 + 2 * v10;
    v22 = v19 + 2 * v10;
    v23 = *a3 + *a4 * *(_QWORD *)(a2 + 40) + 2 * v9;
    do
    {
      if (v11)
      {
        v24 = 0;
        for (i = 0; i < v11; i += 2)
        {
          v26 = (_WORD *)(v16 + 2 * i);
          v27 = (_WORD *)(v22 + 2 * i);
          *(_DWORD *)(v21 + 2 * i) = -1;
          v28 = *(_WORD *)(v23 + v24 + 4) & 0xFFC0;
          *v26 = *(_WORD *)(v23 + v24) & 0xFFC0;
          v26[1] = v28;
          LOWORD(v26) = *(_WORD *)(v23 + v24 + 6) & 0xFFC0;
          *v27 = *(_WORD *)(v23 + v24 + 2) & 0xFFC0;
          v27[1] = (_WORD)v26;
          v24 += 8;
        }
      }
      v23 += v20;
      v22 += v13;
      v16 += v14;
      v21 += v17;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_Copy_v216_x422(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t i;
  _WORD *v22;
  _WORD *v23;
  __int16 v24;
  __int16 v25;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a8;
    v14 = a8[1];
    v15 = *(_QWORD *)(a6 + 40);
    v16 = a7[1] + v14 * v15 + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    v17 = *a4;
    v18 = *a7 + *a8 * v15 + 2 * v10;
    v19 = *a3 + *a4 * *(_QWORD *)(a2 + 40) + 2 * v9;
    do
    {
      if (v11)
      {
        v20 = 0;
        for (i = 0; i < v11; i += 2)
        {
          v22 = (_WORD *)(v16 + 2 * i);
          v23 = (_WORD *)(v18 + 2 * i);
          v24 = *(_WORD *)(v19 + v20 + 4) & 0xFFC0;
          *v22 = *(_WORD *)(v19 + v20) & 0xFFC0;
          v22[1] = v24;
          v25 = *(_WORD *)(v19 + v20 + 6) & 0xFFC0;
          *v23 = *(_WORD *)(v19 + v20 + 2) & 0xFFC0;
          v23[1] = v25;
          v20 += 8;
        }
      }
      v19 += v17;
      v18 += v13;
      v16 += v14;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_Copy_v216_xf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t i;
  unsigned __int16 *v23;
  unsigned int v24;
  unsigned int v25;
  _WORD *v26;
  unsigned int v27;
  unsigned int v28;
  _WORD *v29;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a4;
    v14 = *a8;
    v15 = a8[1];
    v16 = *(_QWORD *)(a6 + 40);
    v17 = 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    v18 = *a7 + *a8 * v16 + 2 * v10;
    v19 = *a3 + *a4 * *(_QWORD *)(a2 + 40) + 2 * v9;
    v20 = a7[1] + v15 * v16 + v17;
    do
    {
      if (v11)
      {
        v21 = 0;
        for (i = 0; i < v11; i += 2)
        {
          v23 = (unsigned __int16 *)(v19 + v21);
          v24 = *(unsigned __int16 *)(v19 + v21);
          if (v24 >= 0xF000)
            v24 = 61440;
          if (v24 <= 0x1000)
            v24 = 4096;
          v25 = v23[2];
          if (v25 >= 0xF000)
            v25 = 61440;
          if (v25 <= 0x1000)
            v25 = 4096;
          v26 = (_WORD *)(v20 + 2 * i);
          *v26 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v24 + (v24 << 10)) >> 13)) >> 32) << 6;
          v26[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v25 + (v25 << 10)) >> 13)) >> 32) << 6;
          v27 = v23[1];
          if (v27 >= 0xEB00)
            v27 = 60160;
          if (v27 <= 0x1000)
            v27 = 4096;
          v28 = v23[3];
          if (v28 >= 0xEB00)
            v28 = 60160;
          v29 = (_WORD *)(v18 + 2 * i);
          if (v28 <= 0x1000)
            v28 = 4096;
          *v29 = (unsigned __int16)((-4190208 - v27 + (v27 << 10)) / 0xDB00) << 6;
          v29[1] = (unsigned __int16)((-4190208 - v28 + (v28 << 10)) / 0xDB00) << 6;
          v21 += 8;
        }
      }
      v19 += v13;
      v18 += v14;
      v20 += v15;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_Copy_v216_v4a8(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t i;
  _BYTE *v26;
  _BYTE *v27;
  _BYTE *v28;
  char v29;
  char v30;

  v8 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  if (v8 >= a6[2])
    v8 = a6[2];
  if (a2[3] >= a6[3])
    v9 = a6[3];
  else
    v9 = a2[3];
  if (v9)
  {
    v10 = 0;
    v12 = a8[1];
    v11 = a8[2];
    v13 = *a8;
    v15 = a6[4];
    v14 = a6[5];
    v16 = a7[1] + v12 * v14;
    v17 = a7[2] + v11 * v14;
    v18 = *a7 + *a8 * v14;
    v19 = *a4;
    v20 = v16 + 2 * v15;
    v21 = v17 + v15;
    v22 = v18 + v15;
    v23 = *a3 + *a4 * a2[5] + 2 * (a2[4] & 0xFFFFFFFELL);
    do
    {
      if (v8)
      {
        v24 = 0;
        for (i = 0; i < v8; i += 2)
        {
          v26 = (_BYTE *)(v20 + v24);
          v27 = (_BYTE *)(v22 + i);
          v28 = (_BYTE *)(v23 + 2 * v24);
          *(_WORD *)(v21 + i) = -1;
          v29 = v28[1];
          v30 = v28[5];
          *v26 = v29;
          v26[1] = v30;
          v26[2] = v29;
          v26[3] = v30;
          LOBYTE(v26) = v28[3];
          LOBYTE(v28) = v28[7];
          *v27 = (_BYTE)v26;
          v27[1] = (_BYTE)v28;
          v24 += 4;
        }
      }
      v23 += v19;
      v22 += v13;
      v20 += v12;
      v21 += v11;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_v216_444v(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t i;
  _BYTE *v23;
  _BYTE *v24;
  _BYTE *v25;
  char v26;
  char v27;

  v8 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  if (v8 >= a6[2])
    v8 = a6[2];
  if (a2[3] >= a6[3])
    v9 = a6[3];
  else
    v9 = a2[3];
  if (v9)
  {
    v10 = 0;
    v11 = *a8;
    v12 = a8[1];
    v14 = a6[4];
    v13 = a6[5];
    v15 = a7[1] + v12 * v13;
    v16 = *a7 + *a8 * v13;
    v17 = *a4;
    v18 = v15 + 2 * v14;
    v19 = v16 + v14;
    v20 = *a3 + *a4 * a2[5] + 2 * (a2[4] & 0xFFFFFFFELL);
    do
    {
      if (v8)
      {
        v21 = 0;
        for (i = 0; i < v8; i += 2)
        {
          v23 = (_BYTE *)(v18 + v21);
          v24 = (_BYTE *)(v19 + i);
          v25 = (_BYTE *)(v20 + 2 * v21);
          v26 = v25[1];
          v27 = v25[5];
          *v23 = v26;
          v23[1] = v27;
          v23[2] = v26;
          v23[3] = v27;
          LOBYTE(v23) = v25[3];
          LOBYTE(v25) = v25[7];
          *v24 = (_BYTE)v23;
          v24[1] = (_BYTE)v25;
          v21 += 4;
        }
      }
      v20 += v17;
      v19 += v11;
      v18 += v12;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_v216_444f(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t i;
  unsigned __int16 *v21;
  unsigned int v22;
  unsigned int v23;
  _BYTE *v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  unsigned int v28;
  _BYTE *v29;

  v8 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  if (v8 >= a6[2])
    v8 = a6[2];
  if (a2[3] >= a6[3])
    v9 = a6[3];
  else
    v9 = a2[3];
  if (v9)
  {
    v10 = 0;
    v11 = *a4;
    v12 = *a8;
    v13 = a8[1];
    v14 = a6[4];
    v15 = a6[5];
    v16 = a7[1] + v13 * v15 + 2 * v14;
    v17 = *a3 + *a4 * a2[5] + 2 * (a2[4] & 0xFFFFFFFELL);
    v18 = *a7 + *a8 * v15 + v14;
    do
    {
      if (v8)
      {
        v19 = 0;
        for (i = 0; i < v8; i += 2)
        {
          v21 = (unsigned __int16 *)(v17 + 2 * v19);
          v22 = *v21;
          if (v22 >= 0xF000)
            v22 = 61440;
          if (v22 <= 0x1000)
            v22 = 4096;
          v23 = v21[2];
          if (v23 >= 0xF000)
            v23 = 61440;
          v24 = (_BYTE *)(v16 + v19);
          if (v23 <= 0x1000)
            v23 = 4096;
          v25 = (613566757 * (unint64_t)((-1044480 - v22 + (v22 << 8)) >> 13)) >> 32;
          v26 = (613566757 * (unint64_t)((-1044480 - v23 + (v23 << 8)) >> 13)) >> 32;
          *v24 = v25;
          v24[1] = v26;
          v24[2] = v25;
          v24[3] = v26;
          v27 = v21[1];
          if (v27 >= 0xEB00)
            v27 = 60160;
          if (v27 <= 0x1000)
            v27 = 4096;
          v28 = v21[3];
          v29 = (_BYTE *)(v18 + i);
          if (v28 >= 0xEB00)
            v28 = 60160;
          if (v28 <= 0x1000)
            v28 = 4096;
          *v29 = (-1044480 - v27 + (v27 << 8)) / 0xDB00;
          v29[1] = (-1044480 - v28 + (v28 << 8)) / 0xDB00;
          v19 += 4;
        }
      }
      v17 += v11;
      v18 += v12;
      v16 += v13;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_v216_v2a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t i;
  _BYTE *v26;
  _BYTE *v27;
  char v28;
  char v29;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a8;
    v14 = a8[1];
    v15 = *(_QWORD *)(a6 + 40);
    v16 = a7[1] + v14 * v15 + (v10 & 0x7FFFFFFFFFFFFFFFLL);
    v17 = a8[2];
    v18 = a7[2] + v17 * v15;
    v19 = *a7 + *a8 * v15;
    v20 = *a4;
    v21 = v18 + v10;
    v22 = v19 + v10;
    v23 = *a3 + *a4 * *(_QWORD *)(a2 + 40) + 2 * v9;
    do
    {
      if (v11)
      {
        v24 = 0;
        for (i = 0; i < v11; i += 2)
        {
          v26 = (_BYTE *)(v16 + i);
          v27 = (_BYTE *)(v22 + i);
          *(_WORD *)(v21 + i) = -1;
          v28 = *(_BYTE *)(v23 + v24 + 5);
          *v26 = *(_BYTE *)(v23 + v24 + 1);
          v26[1] = v28;
          v29 = *(_BYTE *)(v23 + v24 + 7);
          *v27 = *(_BYTE *)(v23 + v24 + 3);
          v27[1] = v29;
          v24 += 8;
        }
      }
      v23 += v20;
      v22 += v13;
      v16 += v14;
      v21 += v17;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_Copy_v216_422v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t i;
  _BYTE *v22;
  _BYTE *v23;
  char v24;
  char v25;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a8;
    v14 = a8[1];
    v15 = *(_QWORD *)(a6 + 40);
    v16 = a7[1] + v14 * v15 + (v10 & 0x7FFFFFFFFFFFFFFFLL);
    v17 = *a4;
    v18 = *a7 + *a8 * v15 + v10;
    v19 = *a3 + *a4 * *(_QWORD *)(a2 + 40) + 2 * v9;
    do
    {
      if (v11)
      {
        v20 = 0;
        for (i = 0; i < v11; i += 2)
        {
          v22 = (_BYTE *)(v16 + i);
          v23 = (_BYTE *)(v18 + i);
          v24 = *(_BYTE *)(v19 + v20 + 5);
          *v22 = *(_BYTE *)(v19 + v20 + 1);
          v22[1] = v24;
          v25 = *(_BYTE *)(v19 + v20 + 7);
          *v23 = *(_BYTE *)(v19 + v20 + 3);
          v23[1] = v25;
          v20 += 8;
        }
      }
      v19 += v17;
      v18 += v13;
      v16 += v14;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_Copy_v216_422f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t i;
  unsigned __int16 *v22;
  _BYTE *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE *v28;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a4;
    v14 = *a8;
    v15 = a8[1];
    v16 = *(_QWORD *)(a6 + 40);
    v17 = a7[1] + v15 * v16 + (v10 & 0x7FFFFFFFFFFFFFFFLL);
    v18 = *a3 + *a4 * *(_QWORD *)(a2 + 40) + 2 * v9;
    v19 = *a7 + *a8 * v16 + v10;
    do
    {
      if (v11)
      {
        v20 = 0;
        for (i = 0; i < v11; i += 2)
        {
          v22 = (unsigned __int16 *)(v18 + v20);
          v23 = (_BYTE *)(v17 + i);
          v24 = *(unsigned __int16 *)(v18 + v20);
          if (v24 >= 0xF000)
            v24 = 61440;
          v25 = v22[2];
          if (v24 <= 0x1000)
            v24 = 4096;
          if (v25 >= 0xF000)
            v25 = 61440;
          if (v25 <= 0x1000)
            v25 = 4096;
          *v23 = (613566757 * (unint64_t)((-1044480 - v24 + (v24 << 8)) >> 13)) >> 32;
          v23[1] = (613566757 * (unint64_t)((-1044480 - v25 + (v25 << 8)) >> 13)) >> 32;
          v26 = v22[1];
          if (v26 >= 0xEB00)
            v26 = 60160;
          if (v26 <= 0x1000)
            v26 = 4096;
          v27 = v22[3];
          v28 = (_BYTE *)(v19 + i);
          if (v27 >= 0xEB00)
            v27 = 60160;
          if (v27 <= 0x1000)
            v27 = 4096;
          *v28 = (-1044480 - v26 + (v26 << 8)) / 0xDB00;
          v28[1] = (-1044480 - v27 + (v27 << 8)) / 0xDB00;
          v20 += 8;
        }
      }
      v18 += v13;
      v19 += v14;
      v17 += v15;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_v216_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _BYTE *v30;
  unsigned int v31;
  _BYTE *v32;
  char v33;
  uint64_t v34;

  v8 = *(_QWORD *)(a2 + 40);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (v8 & 1) + v8;
  v11 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v12 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v13 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v14 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v14 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v11)
    v14 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v11;
  v15 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE) - v10;
  if (v15 >= v13 - v12)
    v15 = v13 - v12;
  if (v15)
  {
    v16 = 0;
    v17 = *a8;
    v18 = a8[1];
    v19 = a7[1] + ((unint64_t)(v18 * v12) >> 1) + (v11 & 0x7FFFFFFFFFFFFFFFLL);
    v20 = a8[2];
    v21 = a7[2] + v20 * v12;
    v22 = *a7 + *a8 * v12;
    v23 = *a4;
    v24 = v21 + v11;
    v25 = v22 + v11;
    v26 = *a3 + *a4 * v10 + 2 * v9;
    v27 = *a3 + v23 + v23 * (v8 + (v8 & 1)) + 2 * v9;
    do
    {
      if (v14)
      {
        v28 = 0;
        v29 = 0;
        v30 = (_BYTE *)v19;
        do
        {
          *(_WORD *)(v24 + v29) = -1;
          if ((v16 & 1) == 0)
          {
            v31 = (*(unsigned __int8 *)(v26 + v28 + 5) + *(unsigned __int8 *)(v27 + v28 + 5) + 1) >> 1;
            *v30 = (*(unsigned __int8 *)(v26 + v28 + 1) + *(unsigned __int8 *)(v27 + v28 + 1) + 1) >> 1;
            v30[1] = v31;
            v30 += 2;
          }
          v32 = (_BYTE *)(v25 + v29);
          v33 = *(_BYTE *)(v26 + v28 + 7);
          *v32 = *(_BYTE *)(v26 + v28 + 3);
          v32[1] = v33;
          v29 += 2;
          v28 += 8;
        }
        while (v29 < v14);
      }
      v26 += v23;
      v25 += v17;
      if ((v16 & 1) != 0)
        v34 = 0;
      else
        v34 = v18;
      v19 += v34;
      v24 += v20;
      ++v16;
      v27 += v23;
    }
    while (v16 != v15);
  }
  return 0;
}

uint64_t vt_CopyDec_v216_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  char v29;
  _BYTE *v30;
  char v31;
  uint64_t v32;

  v8 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v9 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v12 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v13 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v8;
  if (v13 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v13 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  v14 = ((*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE) - v9;
  if (v14 >= v12 - v11)
    v14 = v12 - v11;
  if (v14)
  {
    v15 = 0;
    v16 = *a8;
    v17 = a8[1];
    v18 = a7[1] + ((unint64_t)(v17 * v11) >> 1) + (v10 & 0x7FFFFFFFFFFFFFFFLL);
    v19 = a8[2];
    v20 = a7[2] + v19 * v11;
    v21 = *a7 + *a8 * v11;
    v22 = *a4;
    v23 = v20 + v10;
    v24 = v21 + v10;
    v25 = *a4 * v9 + 2 * v8 + *a3 + 4;
    do
    {
      if (v13)
      {
        v26 = 0;
        v27 = v25;
        v28 = (_BYTE *)v18;
        do
        {
          *(_WORD *)(v23 + v26) = -1;
          if ((v15 & 1) == 0)
          {
            v29 = *(_BYTE *)(v27 + 1);
            *v28 = *(_BYTE *)(v27 - 3);
            v28[1] = v29;
            v28 += 2;
          }
          v30 = (_BYTE *)(v24 + v26);
          v31 = *(_BYTE *)(v27 + 3);
          *v30 = *(_BYTE *)(v27 - 1);
          v30[1] = v31;
          v26 += 2;
          v27 += 8;
        }
        while (v26 < v13);
      }
      v24 += v16;
      if ((v15 & 1) != 0)
        v32 = 0;
      else
        v32 = v17;
      v18 += v32;
      v23 += v19;
      ++v15;
      v25 += v22;
    }
    while (v15 != v14);
  }
  return 0;
}

uint64_t vt_CopyAvg_v216_y420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _BYTE *v30;
  _BYTE *v31;
  unsigned int v32;
  _BYTE *v33;
  char v34;
  uint64_t v35;
  uint64_t v36;

  v8 = *(_QWORD *)(a2 + 40);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
  v11 = (v8 & 1) + v8;
  v12 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v13 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v14 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v15 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v16 = v10 - v9;
  if (v16 >= ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v13)
    v16 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v13;
  v17 = v12 - v11;
  if (v17 >= v15 - v14)
    v17 = v15 - v14;
  if (v17)
  {
    v18 = 0;
    v19 = *a8;
    v20 = a8[1];
    v21 = a8[2];
    v22 = *a4;
    v23 = (_BYTE *)(a7[2] + ((unint64_t)(v21 * v14) >> 1) + (v13 >> 1));
    v24 = (_BYTE *)(a7[1] + ((unint64_t)(v20 * v14) >> 1) + (v13 >> 1));
    v25 = *a7 + *a8 * v14 + v13;
    v26 = *a3 + *a4 * v11 + 2 * v9;
    v27 = *a3 + v22 + v22 * (v8 + (v8 & 1)) + 2 * v9;
    do
    {
      if (v16)
      {
        v28 = 0;
        v29 = 0;
        v30 = v23;
        v31 = v24;
        do
        {
          if ((v18 & 1) == 0)
          {
            v32 = (*(unsigned __int8 *)(v26 + v28 + 5) + *(unsigned __int8 *)(v27 + v28 + 5) + 1) >> 1;
            *v31++ = (*(unsigned __int8 *)(v26 + v28 + 1) + *(unsigned __int8 *)(v27 + v28 + 1) + 1) >> 1;
            *v30++ = v32;
          }
          v33 = (_BYTE *)(v25 + v29);
          v34 = *(_BYTE *)(v26 + v28 + 7);
          *v33 = *(_BYTE *)(v26 + v28 + 3);
          v33[1] = v34;
          v29 += 2;
          v28 += 8;
        }
        while (v29 < v16);
      }
      v26 += v22;
      v25 += v19;
      if ((v18 & 1) != 0)
        v35 = 0;
      else
        v35 = v20;
      v24 += v35;
      if ((v18 & 1) != 0)
        v36 = 0;
      else
        v36 = v21;
      v23 += v36;
      ++v18;
      v27 += v22;
    }
    while (v18 != v17);
  }
  return 0;
}

uint64_t vt_CopyDec_v216_y420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  char v30;
  _BYTE *v31;
  char v32;
  uint64_t v33;
  uint64_t v34;

  v8 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v9 = (*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
  v10 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v11 = (*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE;
  v12 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v13 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v14 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v15 = v9 - v8;
  if (v15 >= ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v12)
    v15 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v12;
  v16 = v11 - v10;
  if (v16 >= v14 - v13)
    v16 = v14 - v13;
  if (v16)
  {
    v17 = 0;
    v18 = *a8;
    v19 = a8[1];
    v20 = a8[2];
    v21 = *a4;
    v22 = (_BYTE *)(a7[2] + ((unint64_t)(v20 * v13) >> 1) + (v12 >> 1));
    v23 = (_BYTE *)(a7[1] + ((unint64_t)(v19 * v13) >> 1) + (v12 >> 1));
    v24 = *a7 + *a8 * v13 + v12;
    v25 = *a4 * v10 + 2 * v8 + *a3 + 4;
    do
    {
      if (v15)
      {
        v26 = 0;
        v27 = v25;
        v28 = v22;
        v29 = v23;
        do
        {
          if ((v17 & 1) == 0)
          {
            v30 = *(_BYTE *)(v27 + 1);
            *v29++ = *(_BYTE *)(v27 - 3);
            *v28++ = v30;
          }
          v31 = (_BYTE *)(v24 + v26);
          v32 = *(_BYTE *)(v27 + 3);
          *v31 = *(_BYTE *)(v27 - 1);
          v31[1] = v32;
          v26 += 2;
          v27 += 8;
        }
        while (v26 < v15);
      }
      v24 += v18;
      if ((v17 & 1) != 0)
        v33 = 0;
      else
        v33 = v19;
      v23 += v33;
      if ((v17 & 1) != 0)
        v34 = 0;
      else
        v34 = v20;
      v22 += v34;
      ++v17;
      v25 += v21;
    }
    while (v17 != v16);
  }
  return 0;
}

uint64_t vt_CopyAvg_v216_f420(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  _BYTE *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  _BYTE *v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;

  v8 = *(_QWORD *)(a2 + 40);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
  v11 = (v8 & 1) + v8;
  v12 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v13 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v14 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v15 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v16 = v10 - v9;
  if (v16 >= ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v13)
    v16 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v13;
  v17 = v12 - v11;
  if (v17 >= v15 - v14)
    v17 = v15 - v14;
  if (v17)
  {
    v18 = 0;
    v19 = *a4;
    v20 = *a8;
    v21 = a8[1];
    v22 = a8[2];
    v23 = (_BYTE *)(a7[2] + ((unint64_t)(v22 * v14) >> 1) + (v13 >> 1));
    v24 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v14) >> 1) + (v13 >> 1));
    v25 = *a7 + *a8 * v14 + v13;
    v26 = *a3;
    v27 = v26 + *a4 * v11 + 2 * v9;
    v28 = v26 + v19 + v19 * (v8 + (v8 & 1)) + 2 * v9;
    do
    {
      if (v16)
      {
        v29 = 0;
        v30 = 0;
        v31 = v23;
        v32 = v24;
        do
        {
          if ((v18 & 1) == 0)
          {
            v33 = *(unsigned __int16 *)(v27 + v29);
            v34 = *(unsigned __int16 *)(v28 + v29);
            if (v33 >= 0xF000)
              v33 = 61440;
            if (v33 <= 0x1000)
              v33 = 4096;
            if (v34 >= 0xF000)
              v34 = 61440;
            if (v34 <= 0x1000)
              v34 = 4096;
            v35 = *(unsigned __int16 *)(v27 + v29 + 4);
            v36 = *(unsigned __int16 *)(v28 + v29 + 4);
            if (v35 >= 0xF000)
              v35 = 61440;
            if (v35 <= 0x1000)
              v35 = 4096;
            if (v36 >= 0xF000)
              v36 = 61440;
            if (v36 <= 0x1000)
              v36 = 4096;
            *v32++ = (((613566757 * (unint64_t)((-1044480 - v33 + (v33 << 8)) >> 13)) >> 32)
                                  + ((613566757 * (unint64_t)((-1044480 - v34 + (v34 << 8)) >> 13)) >> 32)
                                  + 1) >> 1;
            *v31++ = (((613566757 * (unint64_t)((-1044480 - v35 + (v35 << 8)) >> 13)) >> 32)
                                  + ((613566757 * (unint64_t)((-1044480 - v36 + (v36 << 8)) >> 13)) >> 32)
                                  + 1) >> 1;
          }
          v37 = (_BYTE *)(v25 + v30);
          v38 = *(unsigned __int16 *)(v27 + v29 + 2);
          if (v38 >= 0xEB00)
            v38 = 60160;
          if (v38 <= 0x1000)
            v38 = 4096;
          v39 = *(unsigned __int16 *)(v27 + v29 + 6);
          if (v39 >= 0xEB00)
            v39 = 60160;
          if (v39 <= 0x1000)
            v39 = 4096;
          *v37 = (-1044480 - v38 + (v38 << 8)) / 0xDB00;
          v37[1] = (-1044480 - v39 + (v39 << 8)) / 0xDB00;
          v30 += 2;
          v29 += 8;
        }
        while (v30 < v16);
      }
      v27 += v19;
      v25 += v20;
      if ((v18 & 1) != 0)
        v40 = 0;
      else
        v40 = v21;
      v24 += v40;
      if ((v18 & 1) != 0)
        v41 = 0;
      else
        v41 = v22;
      v23 += v41;
      ++v18;
      v28 += v19;
    }
    while (v18 != v17);
  }
  return 0;
}

uint64_t vt_CopyDec_v216_f420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned __int16 *v27;
  _BYTE *v28;
  _BYTE *v29;
  unsigned int v30;
  unsigned int v31;
  _BYTE *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;

  v8 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v9 = (*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE;
  v10 = (*(_QWORD *)(a2 + 40) & 1) + *(_QWORD *)(a2 + 40);
  v11 = (*(_DWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40)) & 0xFFFFFFFE;
  v12 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v13 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v14 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v15 = v9 - v8;
  if (v15 >= ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v12)
    v15 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v12;
  v16 = v11 - v10;
  if (v16 >= v14 - v13)
    v16 = v14 - v13;
  if (v16)
  {
    v17 = 0;
    v18 = *a4;
    v19 = *a8;
    v20 = a8[1];
    v21 = a8[2];
    v22 = (_BYTE *)(a7[2] + ((unint64_t)(v21 * v13) >> 1) + (v12 >> 1));
    v23 = (_BYTE *)(a7[1] + ((unint64_t)(v20 * v13) >> 1) + (v12 >> 1));
    v24 = *a7 + *a8 * v13 + v12;
    v25 = *a4 * v10 + 2 * v8 + *a3 + 4;
    do
    {
      if (v15)
      {
        v26 = 0;
        v27 = (unsigned __int16 *)v25;
        v28 = v22;
        v29 = v23;
        do
        {
          if ((v17 & 1) == 0)
          {
            v30 = *(v27 - 2);
            if (v30 >= 0xF000)
              v30 = 61440;
            if (v30 <= 0x1000)
              v30 = 4096;
            v31 = *v27;
            if (v31 >= 0xF000)
              v31 = 61440;
            if (v31 <= 0x1000)
              v31 = 4096;
            *v29++ = (613566757 * (unint64_t)((-1044480 - v30 + (v30 << 8)) >> 13)) >> 32;
            *v28++ = (613566757 * (unint64_t)((-1044480 - v31 + (v31 << 8)) >> 13)) >> 32;
          }
          v32 = (_BYTE *)(v24 + v26);
          v33 = *(v27 - 1);
          if (v33 >= 0xEB00)
            v33 = 60160;
          if (v33 <= 0x1000)
            v33 = 4096;
          v34 = v27[1];
          if (v34 >= 0xEB00)
            v34 = 60160;
          if (v34 <= 0x1000)
            v34 = 4096;
          *v32 = (-1044480 - v33 + (v33 << 8)) / 0xDB00;
          v32[1] = (-1044480 - v34 + (v34 << 8)) / 0xDB00;
          v26 += 2;
          v27 += 4;
        }
        while (v26 < v15);
      }
      v24 += v19;
      if ((v17 & 1) != 0)
        v35 = 0;
      else
        v35 = v20;
      v23 += v35;
      if ((v17 & 1) != 0)
        v36 = 0;
      else
        v36 = v21;
      v22 += v36;
      ++v17;
      v25 += v18;
    }
    while (v17 != v16);
  }
  return 0;
}

uint64_t vt_Copy_v210_2vuy(unint64_t a1, uint64_t a2, uint64_t *a3, __int32 **a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int32 *v9;
  uint64_t v10;
  int8x16_t v11;
  int32x4_t v12;
  uint32x4_t v13;
  unint64_t v14;
  _DWORD *v15;
  __int32 *v16;
  unsigned int v17;
  int8x16_t v18;
  unsigned int v19;
  unsigned __int32 v20;
  int16x8_t v21;
  int8x16_t v22;
  int16x8_t v23;
  int8x16_t v24;
  int16x8_t v25;

  if (a2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v9 = *a4;
    v10 = *a6 + 8;
    v11 = (int8x16_t)vdupq_n_s32(0x3FEu);
    v12.i64[0] = 0x200000002;
    v12.i64[1] = 0x200000002;
    v13.i64[0] = 0xFE000000FELL;
    v13.i64[1] = 0xFE000000FELL;
    do
    {
      if (a1)
      {
        v14 = 0;
        v15 = (_DWORD *)v10;
        v16 = v9;
        do
        {
          v17 = v16[1];
          v18.i32[0] = *v16;
          v18.i32[1] = *v16 >> 10;
          v18.i32[2] = *v16 >> 20;
          v20 = v16[2];
          v19 = v16[3];
          v18.i32[3] = v17;
          v21 = (int16x8_t)vminq_u32(vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vandq_s8(v18, v11), v12), 2uLL), v13);
          *(int16x4_t *)v21.i8 = vmovn_s32((int32x4_t)v21);
          *(v15 - 2) = vmovn_s16(v21).u32[0];
          if (v14 + 2 < a1)
          {
            *(uint32x2_t *)v22.i8 = vshl_u32((uint32x2_t)vdup_n_s32(v17), (uint32x2_t)0xFFFFFFECFFFFFFF6);
            v22.i32[2] = v20;
            v22.i32[3] = v20 >> 10;
            v23 = (int16x8_t)vminq_u32(vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vandq_s8(v22, v11), v12), 2uLL), v13);
            *(int16x4_t *)v23.i8 = vmovn_s32((int32x4_t)v23);
            *(v15 - 1) = vmovn_s16(v23).u32[0];
          }
          if (v14 + 4 < a1)
          {
            v24.i32[0] = v20 >> 20;
            v24.i32[1] = v19;
            v24.u64[1] = (unint64_t)vshl_u32((uint32x2_t)vdup_n_s32(v19), (uint32x2_t)0xFFFFFFECFFFFFFF6);
            v25 = (int16x8_t)vminq_u32(vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vandq_s8(v24, v11), v12), 2uLL), v13);
            *(int16x4_t *)v25.i8 = vmovn_s32((int32x4_t)v25);
            *v15 = vmovn_s16(v25).u32[0];
          }
          v14 += 6;
          v15 += 3;
          v16 += 4;
        }
        while (v14 < a1);
      }
      v9 = (__int32 *)((char *)v9 + v7);
      ++v6;
      v10 += v8;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_v210_yuvs(unint64_t a1, uint64_t a2, uint64_t *a3, __int32 **a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int32 *v9;
  uint64_t v10;
  int8x16_t v11;
  int32x4_t v12;
  uint32x4_t v13;
  unint64_t v14;
  _DWORD *v15;
  __int32 *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned __int32 v19;
  int8x16_t v20;
  int16x8_t v21;
  int8x16_t v22;
  int16x8_t v23;
  int8x16_t v24;
  int16x8_t v25;

  if (a2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v9 = *a4;
    v10 = *a6 + 8;
    v11 = (int8x16_t)vdupq_n_s32(0x3FEu);
    v12.i64[0] = 0x200000002;
    v12.i64[1] = 0x200000002;
    v13.i64[0] = 0xFE000000FELL;
    v13.i64[1] = 0xFE000000FELL;
    do
    {
      if (a1)
      {
        v14 = 0;
        v15 = (_DWORD *)v10;
        v16 = v9;
        do
        {
          v17 = v16[1];
          v19 = v16[2];
          v18 = v16[3];
          v20.i32[0] = *v16 >> 10;
          v20.i32[1] = *v16;
          v20.i32[2] = v17;
          v20.i32[3] = *v16 >> 20;
          v21 = (int16x8_t)vminq_u32(vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vandq_s8(v20, v11), v12), 2uLL), v13);
          *(int16x4_t *)v21.i8 = vmovn_s32((int32x4_t)v21);
          *(v15 - 2) = vmovn_s16(v21).u32[0];
          if (v14 + 2 < a1)
          {
            *(uint32x2_t *)v22.i8 = vshl_u32((uint32x2_t)vdup_n_s32(v17), (uint32x2_t)0xFFFFFFF6FFFFFFECLL);
            v22.i32[2] = v19 >> 10;
            v22.i32[3] = v19;
            v23 = (int16x8_t)vminq_u32(vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vandq_s8(v22, v11), v12), 2uLL), v13);
            *(int16x4_t *)v23.i8 = vmovn_s32((int32x4_t)v23);
            *(v15 - 1) = vmovn_s16(v23).u32[0];
          }
          if (v14 + 4 < a1)
          {
            v24.i32[0] = v18;
            v24.i32[1] = v19 >> 20;
            v24.u64[1] = (unint64_t)vshl_u32((uint32x2_t)vdup_n_s32(v18), (uint32x2_t)0xFFFFFFF6FFFFFFECLL);
            v25 = (int16x8_t)vminq_u32(vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vandq_s8(v24, v11), v12), 2uLL), v13);
            *(int16x4_t *)v25.i8 = vmovn_s32((int32x4_t)v25);
            *v15 = vmovn_s16(v25).u32[0];
          }
          v14 += 6;
          v15 += 3;
          v16 += 4;
        }
        while (v14 < a1);
      }
      v9 = (__int32 *)((char *)v9 + v7);
      ++v6;
      v10 += v8;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_v210_422v(unint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  unint64_t v13;
  _DWORD *v14;
  _BYTE *v15;
  _BYTE *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  char v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  char v32;

  if (a2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v9 = a5[1];
    v11 = *a6;
    v10 = a6[1];
    v12 = (_DWORD *)*a4;
    do
    {
      if (a1)
      {
        v13 = 0;
        v14 = v12;
        do
        {
          v15 = (_BYTE *)(v11 + v13);
          v16 = (_BYTE *)(v10 + v13);
          v17 = v14[1];
          v19 = v14[2];
          v18 = v14[3];
          v20 = ((*v14 & 0x3FEu) + 2) >> 2;
          v21 = (((*v14 >> 10) & 0x3FEu) + 2) >> 2;
          v22 = (((*v14 >> 20) & 0x3FEu) + 2) >> 2;
          if (v21 >= 0xFE)
            LOBYTE(v21) = -2;
          *v15 = v21;
          if (v20 >= 0xFE)
            LOBYTE(v20) = -2;
          *v16 = v20;
          if (((v17 & 0x3FE) + 2) >> 2 >= 0xFE)
            v23 = -2;
          else
            v23 = ((v17 & 0x3FE) + 2) >> 2;
          v15[1] = v23;
          if (v22 >= 0xFE)
            LOBYTE(v22) = -2;
          v16[1] = v22;
          if (v13 + 2 < a1)
          {
            v24 = (((v17 >> 20) & 0x3FE) + 2) >> 2;
            v25 = (((v17 >> 10) & 0x3FE) + 2) >> 2;
            if (v24 >= 0xFE)
              LOBYTE(v24) = -2;
            v15[2] = v24;
            if (v25 >= 0xFE)
              LOBYTE(v25) = -2;
            v16[2] = v25;
            if ((((v19 >> 10) & 0x3FE) + 2) >> 2 >= 0xFE)
              v26 = -2;
            else
              v26 = (((v19 >> 10) & 0x3FE) + 2) >> 2;
            v15[3] = v26;
            if (((v19 & 0x3FE) + 2) >> 2 >= 0xFE)
              v27 = -2;
            else
              v27 = ((v19 & 0x3FE) + 2) >> 2;
            v16[3] = v27;
          }
          if (v13 + 4 < a1)
          {
            v28 = (((v19 >> 20) & 0x3FE) + 2) >> 2;
            v29 = ((v18 & 0x3FE) + 2) >> 2;
            v30 = (((v18 >> 10) & 0x3FE) + 2) >> 2;
            v31 = (((v18 >> 20) & 0x3FE) + 2) >> 2;
            if (v29 >= 0xFE)
              LOBYTE(v29) = -2;
            *(_BYTE *)(v11 + v13 + 4) = v29;
            if (v28 >= 0xFE)
              LOBYTE(v28) = -2;
            *(_BYTE *)(v10 + v13 + 4) = v28;
            if (v31 >= 0xFE)
              LOBYTE(v31) = -2;
            *(_BYTE *)(v11 + v13 + 5) = v31;
            if (v30 >= 0xFE)
              v32 = -2;
            else
              v32 = v30;
            *(_BYTE *)(v10 + v13 + 5) = v32;
          }
          v13 += 6;
          v14 += 4;
        }
        while (v13 < a1);
      }
      v12 = (_DWORD *)((char *)v12 + v7);
      v11 += v8;
      v10 += v9;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_CopyAvg_v210_420v(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  int32x2_t v34;
  int32x2_t v35;
  int8x8_t v36;
  int8x8_t v37;
  uint32x2_t v38;
  uint32x2_t v39;
  uint64_t v40;
  unint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  uint32x2_t v44;
  uint64_t v45;
  uint32x2_t v46;
  _OWORD v48[2];
  _OWORD v49[2];
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _BYTE v55[48];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v72 = 0u;
  v73 = 0u;
  v70 = 0u;
  v71 = 0u;
  v68 = 0u;
  v69 = 0u;
  v66 = 0u;
  v67 = 0u;
  v64 = 0u;
  v65 = 0u;
  v63 = 0u;
  v62 = 0u;
  v61 = 0u;
  v60 = 0u;
  v59 = 0u;
  v58 = 0u;
  v57 = 0u;
  v56 = 0u;
  *(_OWORD *)&v55[32] = 0u;
  *(_OWORD *)&v55[16] = 0u;
  *(_OWORD *)v55 = 0u;
  v54 = 0u;
  v53 = 0u;
  v52 = 0u;
  v51 = 0u;
  memset(v48, 0, sizeof(v48));
  v9 = a2[2];
  v10 = a2[3];
  v49[0] = vdupq_n_s64(1uLL);
  v49[1] = xmmword_1928DFC30;
  v50 = 1;
  *(_OWORD *)&v55[8] = v49[0];
  *(_OWORD *)&v55[24] = xmmword_1928DFC50;
  v74 = 0;
  *(_QWORD *)&v55[40] = 2;
  v12 = a2[4];
  v11 = a2[5];
  v13 = *a3;
  v14 = *a4;
  vtPixelTransferSession_PrepareOffsets(2uLL, a6, v49, a8, a7, v48);
  if (v10 >= 2)
  {
    v15 = 0;
    v16 = a8[1];
    v17 = v10 >> 1;
    v18 = *((_QWORD *)&v48[0] + 1);
    v19 = *(_QWORD *)&v48[0];
    v20 = v14 * v11;
    v21 = 2 * *a8;
    v22 = v13 + ((v12 << 7) & 0xFFFFFFFFFFFFFF00) / 0x30;
    v23 = 2 * v14;
    v24 = *(_QWORD *)&v48[0] + *a8;
    v25 = v14 + v14 * v11;
    do
    {
      if (v9)
      {
        v26 = 0;
        v27 = v22;
        do
        {
          v28 = (_BYTE *)(v19 + v26);
          v29 = (_BYTE *)(v24 + v26);
          v31 = *(_DWORD *)(v27 + v20);
          v30 = *(_DWORD *)(v27 + v20 + 4);
          v33 = *(_DWORD *)(v27 + v25);
          v32 = *(_DWORD *)(v27 + v25 + 4);
          v34 = *(int32x2_t *)(v27 + v20 + 8);
          v35 = *(int32x2_t *)(v27 + v25 + 8);
          v36 = (int8x8_t)vdup_lane_s32(v34, 0);
          v37 = (int8x8_t)vdup_lane_s32(v35, 0);
          *v28 = ((v31 >> 10) + 2) >> 2;
          v28[1] = (v30 + 2) >> 2;
          *v29 = ((v33 >> 10) + 2) >> 2;
          v29[1] = (v32 + 2) >> 2;
          if (v26 + 2 < v9)
          {
            v38 = vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vshl_u32((uint32x2_t)__PAIR64__(v36.u32[1], v30), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int32x2_t)0x200000002), 2uLL);
            v28[3] = v38.i8[4];
            v28[2] = v38.i8[0];
            v39 = vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vshl_u32((uint32x2_t)__PAIR64__(v37.u32[1], v32), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int32x2_t)0x200000002), 2uLL);
            v29[3] = v39.i8[4];
            v29[2] = v39.i8[0];
          }
          if (v26 + 4 < v9)
          {
            v40 = v19 + v26;
            *(_BYTE *)(v40 + 4) = (v34.i32[1] + 2) >> 2;
            *(_BYTE *)(v40 + 5) = (((unsigned __int32)v34.i32[1] >> 20) + 2) >> 2;
            v41 = v24 + v26;
            *(_BYTE *)(v41 + 4) = (v35.i32[1] + 2) >> 2;
            *(_BYTE *)(v41 + 5) = (((unsigned __int32)v35.i32[1] >> 20) + 2) >> 2;
          }
          v42 = (_BYTE *)(v18 + v26);
          *v42 = ((((v33 & 0x3FF) + (v31 & 0x3FF)) >> 1) + 2) >> 2;
          v42[1] = (((((v33 >> 20) & 0x3FF) + ((v31 >> 20) & 0x3FF)) >> 1) + 2) >> 2;
          if (v26 + 2 < v9)
          {
            v36.i32[0] = v30 >> 10;
            v37.i32[0] = v32 >> 10;
            v43 = v18 + v26;
            v44 = vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vhadd_u32((uint32x2_t)vand_s8(v37, (int8x8_t)0x300000003), (uint32x2_t)vand_s8(v36, (int8x8_t)0x300000003)), (int32x2_t)0x200000002), 2uLL);
            *(_BYTE *)(v43 + 3) = v44.i8[4];
            *(_BYTE *)(v43 + 2) = v44.i8[0];
          }
          if (v26 + 4 < v9)
          {
            v45 = v18 + v26;
            v46 = vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vhadd_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)v35, (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003), (uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)v34, (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003)), (int32x2_t)0x200000002), 2uLL);
            *(_BYTE *)(v45 + 5) = v46.i8[4];
            *(_BYTE *)(v45 + 4) = v46.i8[0];
          }
          v26 += 6;
          v27 += 16;
        }
        while (v26 < v9);
      }
      v19 += v21;
      v18 += v16;
      ++v15;
      v22 += v23;
      v24 += v21;
    }
    while (v15 != v17);
  }
  return 0;
}

uint64_t vt_CopyDec_v210_420v(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t i;
  _BYTE *v27;
  _BYTE *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  uint32x2_t v33;
  unsigned int v34;
  int v35;
  uint32x2_t v36;
  uint64_t v37;
  unint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD v43[2];
  _OWORD v44[2];
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _BYTE v50[48];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v67 = 0u;
  v68 = 0u;
  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  v61 = 0u;
  v62 = 0u;
  v59 = 0u;
  v60 = 0u;
  v58 = 0u;
  v57 = 0u;
  v56 = 0u;
  v55 = 0u;
  v54 = 0u;
  v53 = 0u;
  v52 = 0u;
  v51 = 0u;
  *(_OWORD *)&v50[32] = 0u;
  *(_OWORD *)&v50[16] = 0u;
  *(_OWORD *)v50 = 0u;
  v49 = 0u;
  v48 = 0u;
  v47 = 0u;
  v46 = 0u;
  memset(v43, 0, sizeof(v43));
  v9 = a2[2];
  v10 = a2[3];
  v44[0] = vdupq_n_s64(1uLL);
  v44[1] = xmmword_1928DFC30;
  v45 = 1;
  *(_OWORD *)&v50[8] = v44[0];
  *(_OWORD *)&v50[24] = xmmword_1928DFC50;
  v69 = 0;
  *(_QWORD *)&v50[40] = 2;
  v11 = a2[4];
  v12 = a2[5];
  v13 = *a3;
  v14 = *a4;
  vtPixelTransferSession_PrepareOffsets(2uLL, a6, v44, a8, a7, v43);
  if (v10 >= 2)
  {
    v15 = 0;
    v16 = a8[1];
    v17 = v10 >> 1;
    v18 = *((_QWORD *)&v43[0] + 1);
    v19 = *(_QWORD *)&v43[0];
    v20 = v13 + v14 * v12 + ((v11 << 7) & 0xFFFFFFFFFFFFFF00) / 0x30;
    v21 = 2 * *a8;
    v22 = 2 * v14;
    v23 = v13 + v14 + v14 * v12 + ((v11 << 7) & 0xFFFFFFFFFFFFFF00) / 0x30;
    v24 = *(_QWORD *)&v43[0] + *a8;
    do
    {
      if (v9)
      {
        v25 = 0;
        for (i = 0; i < v9; i += 6)
        {
          v27 = (_BYTE *)(v19 + i);
          v28 = (_BYTE *)(v24 + i);
          v30 = *(_DWORD *)(v20 + v25);
          v29 = *(_DWORD *)(v20 + v25 + 4);
          v31 = *(_DWORD *)(v20 + v25 + 8);
          v32 = *(_DWORD *)(v20 + v25 + 12);
          v33 = *(uint32x2_t *)(v23 + v25 + 4);
          v34 = *(_DWORD *)(v23 + v25 + 12);
          v35 = *(_DWORD *)(v23 + v25) >> 10;
          *v27 = ((v30 >> 10) + 2) >> 2;
          v27[1] = (v29 + 2) >> 2;
          *v28 = (v35 + 2) >> 2;
          v28[1] = (v33.i32[0] + 2) >> 2;
          if (i + 2 < v9)
          {
            v27[2] = ((v29 >> 20) + 2) >> 2;
            v27[3] = ((v31 >> 10) + 2) >> 2;
            v36 = vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vshl_u32(v33, (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int32x2_t)0x200000002), 2uLL);
            v28[3] = v36.i8[4];
            v28[2] = v36.i8[0];
          }
          if (i + 4 < v9)
          {
            v37 = v19 + i;
            *(_BYTE *)(v37 + 4) = (v32 + 2) >> 2;
            *(_BYTE *)(v37 + 5) = ((v32 >> 20) + 2) >> 2;
            v38 = v24 + i;
            *(_BYTE *)(v38 + 4) = (v34 + 2) >> 2;
            *(_BYTE *)(v38 + 5) = ((v34 >> 20) + 2) >> 2;
          }
          v39 = (_BYTE *)(v18 + i);
          *v39 = (v30 + 2) >> 2;
          v39[1] = ((v30 >> 20) + 2) >> 2;
          if (i + 2 < v9)
          {
            v40 = v18 + i;
            *(_BYTE *)(v40 + 2) = ((v29 >> 10) + 2) >> 2;
            *(_BYTE *)(v40 + 3) = (v31 + 2) >> 2;
          }
          if (i + 4 < v9)
          {
            v41 = v18 + i;
            *(_BYTE *)(v41 + 4) = ((v31 >> 20) + 2) >> 2;
            *(_BYTE *)(v41 + 5) = ((v32 >> 10) + 2) >> 2;
          }
          v25 += 16;
        }
      }
      v19 += v21;
      v18 += v16;
      v20 += v22;
      ++v15;
      v23 += v22;
      v24 += v21;
    }
    while (v15 != v17);
  }
  return 0;
}

uint64_t vt_CopyAvg_v210_420f(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t i;
  _BYTE *v25;
  unint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  _BYTE *v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _OWORD v44[2];
  _OWORD v45[2];
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _BYTE v51[48];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v68 = 0u;
  v69 = 0u;
  v66 = 0u;
  v67 = 0u;
  v64 = 0u;
  v65 = 0u;
  v62 = 0u;
  v63 = 0u;
  v60 = 0u;
  v61 = 0u;
  v59 = 0u;
  v58 = 0u;
  v57 = 0u;
  v56 = 0u;
  v55 = 0u;
  v54 = 0u;
  v53 = 0u;
  v52 = 0u;
  *(_OWORD *)&v51[32] = 0u;
  *(_OWORD *)&v51[16] = 0u;
  *(_OWORD *)v51 = 0u;
  v50 = 0u;
  v49 = 0u;
  v48 = 0u;
  v47 = 0u;
  memset(v44, 0, sizeof(v44));
  v9 = a2[2];
  v10 = a2[3];
  v45[0] = vdupq_n_s64(1uLL);
  v45[1] = xmmword_1928DFC30;
  v46 = 1;
  *(_OWORD *)&v51[8] = v45[0];
  *(_OWORD *)&v51[24] = xmmword_1928DFC50;
  v70 = 0;
  *(_QWORD *)&v51[40] = 2;
  v11 = a2[4];
  v12 = a2[5];
  v13 = *a3;
  v14 = *a4;
  vtPixelTransferSession_PrepareOffsets(2uLL, a6, v45, a8, a7, v44);
  if (v10 >= 2)
  {
    v15 = 0;
    v42 = v10 >> 1;
    v43 = a8[1];
    v16 = *((_QWORD *)&v44[0] + 1);
    v17 = *(_QWORD *)&v44[0];
    v18 = (v11 << 7) & 0xFFFFFFFFFFFFFF00;
    v19 = v13 + v14 * v12 + v18 / 0x30;
    v41 = 2 * *a8;
    v20 = 2 * v14;
    v21 = v14 + v14 * v12 + v18 / 0x30 + v13 + 8;
    v22 = *a8 + *(_QWORD *)&v44[0] + 5;
    do
    {
      if (v9)
      {
        v23 = 0;
        for (i = 0; i < v9; i += 6)
        {
          v25 = (_BYTE *)(v17 + i);
          v26 = v22 + i;
          v28 = *(_DWORD *)(v19 + v23);
          v27 = *(_DWORD *)(v19 + v23 + 4);
          v29 = *(_DWORD *)(v19 + v23 + 8);
          v30 = *(_DWORD *)(v19 + v23 + 12);
          v32 = *(_DWORD *)(v21 + v23 - 8);
          v31 = *(_DWORD *)(v21 + v23 - 4);
          v34 = *(_DWORD *)(v21 + v23);
          v33 = *(_DWORD *)(v21 + v23 + 4);
          *v25 = (255 * ((v28 >> 10) & 0x3FF) - 16065) / 0x36C;
          v25[1] = (255 * (v27 & 0x3FF) - 16065) / 0x36C;
          *(_BYTE *)(v26 - 5) = (255 * ((v32 >> 10) & 0x3FF) - 16065) / 0x36C;
          *(_BYTE *)(v26 - 4) = (255 * (v31 & 0x3FF) - 16065) / 0x36C;
          if (i + 2 < v9)
          {
            v25[2] = (255 * ((v27 >> 20) & 0x3FF) - 16065) / 0x36C;
            v25[3] = (255 * ((v29 >> 10) & 0x3FF) - 16065) / 0x36C;
            *(_BYTE *)(v26 - 3) = (255 * ((v31 >> 20) & 0x3FF) - 16065) / 0x36C;
            *(_BYTE *)(v26 - 2) = (255 * ((v34 >> 10) & 0x3FF) - 16065) / 0x36C;
          }
          if (i + 4 < v9)
          {
            v35 = v17 + i;
            *(_BYTE *)(v35 + 4) = (255 * (v30 & 0x3FF) - 16065) / 0x36C;
            *(_BYTE *)(v35 + 5) = (255 * ((v30 >> 20) & 0x3FF) - 16065) / 0x36C;
            v36 = (_BYTE *)(v22 + i);
            *(v36 - 1) = (255 * (v33 & 0x3FF) - 16065) / 0x36C;
            *v36 = (255 * ((v33 >> 20) & 0x3FF) - 16065) / 0x36C;
          }
          v37 = (_BYTE *)(v16 + i);
          *v37 = (613566757 * (unint64_t)((255 * (((v32 & 0x3FF) + (v28 & 0x3FF)) >> 1) - 16065) >> 7)) >> 32;
          v37[1] = (613566757
                  * (unint64_t)((255 * ((((v32 >> 20) & 0x3FF) + ((v28 >> 20) & 0x3FF)) >> 1) - 16065) >> 7)) >> 32;
          if (i + 2 < v9)
          {
            v38 = v16 + i;
            *(_BYTE *)(v38 + 2) = (613566757
                                 * (unint64_t)((255 * ((((v31 >> 10) & 0x3FF) + ((v27 >> 10) & 0x3FF)) >> 1)
                                                     - 16065) >> 7)) >> 32;
            *(_BYTE *)(v38 + 3) = (613566757
                                 * (unint64_t)((255 * (((v34 & 0x3FF) + (v29 & 0x3FF)) >> 1) - 16065) >> 7)) >> 32;
          }
          if (i + 4 < v9)
          {
            v39 = v16 + i;
            *(_BYTE *)(v39 + 4) = (613566757
                                 * (unint64_t)((255 * ((((v34 >> 20) & 0x3FF) + ((v29 >> 20) & 0x3FF)) >> 1)
                                                     - 16065) >> 7)) >> 32;
            *(_BYTE *)(v39 + 5) = (613566757
                                 * (unint64_t)((255 * ((((v33 >> 10) & 0x3FF) + ((v30 >> 10) & 0x3FF)) >> 1)
                                                     - 16065) >> 7)) >> 32;
          }
          v23 += 16;
        }
      }
      v17 += v41;
      v16 += v43;
      v19 += v20;
      ++v15;
      v21 += v20;
      v22 += v41;
    }
    while (v15 != v42);
  }
  return 0;
}

uint64_t vt_CopyDec_v210_420f(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t i;
  _BYTE *v25;
  unint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  _BYTE *v36;
  _BYTE *v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v43;
  _OWORD v44[2];
  _OWORD v45[2];
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _BYTE v51[48];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v68 = 0u;
  v69 = 0u;
  v66 = 0u;
  v67 = 0u;
  v64 = 0u;
  v65 = 0u;
  v62 = 0u;
  v63 = 0u;
  v60 = 0u;
  v61 = 0u;
  v59 = 0u;
  v58 = 0u;
  v57 = 0u;
  v56 = 0u;
  v55 = 0u;
  v54 = 0u;
  v53 = 0u;
  v52 = 0u;
  *(_OWORD *)&v51[32] = 0u;
  *(_OWORD *)&v51[16] = 0u;
  *(_OWORD *)v51 = 0u;
  v50 = 0u;
  v49 = 0u;
  v48 = 0u;
  v47 = 0u;
  memset(v44, 0, sizeof(v44));
  v9 = a2[2];
  v10 = a2[3];
  v45[0] = vdupq_n_s64(1uLL);
  v45[1] = xmmword_1928DFC30;
  v46 = 1;
  *(_OWORD *)&v51[8] = v45[0];
  *(_OWORD *)&v51[24] = xmmword_1928DFC50;
  v70 = 0;
  *(_QWORD *)&v51[40] = 2;
  v11 = a2[4];
  v12 = a2[5];
  v13 = *a3;
  v14 = *a4;
  vtPixelTransferSession_PrepareOffsets(2uLL, a6, v45, a8, a7, v44);
  if (v10 >= 2)
  {
    v15 = 0;
    v43 = a8[1];
    v16 = *((_QWORD *)&v44[0] + 1);
    v17 = *(_QWORD *)&v44[0];
    v18 = v13 + v14 * v12 + ((v11 << 7) & 0xFFFFFFFFFFFFFF00) / 0x30;
    v19 = 2 * *a8;
    v20 = 2 * v14;
    v21 = v14 + v14 * v12 + ((v11 << 7) & 0xFFFFFFFFFFFFFF00) / 0x30 + v13 + 8;
    v22 = *a8 + *(_QWORD *)&v44[0] + 5;
    do
    {
      if (v9)
      {
        v23 = 0;
        for (i = 0; i < v9; i += 6)
        {
          v25 = (_BYTE *)(v17 + i);
          v26 = v22 + i;
          v28 = *(_DWORD *)(v18 + v23);
          v27 = *(_DWORD *)(v18 + v23 + 4);
          v29 = *(_DWORD *)(v18 + v23 + 8);
          v30 = *(_DWORD *)(v18 + v23 + 12);
          v31 = *(_DWORD *)(v21 + v23 - 4);
          v33 = *(_DWORD *)(v21 + v23);
          v32 = *(_DWORD *)(v21 + v23 + 4);
          v34 = (*(_DWORD *)(v21 + v23 - 8) >> 10) & 0x3FF;
          *v25 = (255 * ((v28 >> 10) & 0x3FF) - 16065) / 0x36C;
          v25[1] = (255 * (v27 & 0x3FF) - 16065) / 0x36C;
          *(_BYTE *)(v26 - 5) = (255 * v34 - 16065) / 0x36Cu;
          *(_BYTE *)(v26 - 4) = (255 * (v31 & 0x3FF) - 16065) / 0x36C;
          if (i + 2 < v9)
          {
            v25[2] = (255 * ((v27 >> 20) & 0x3FF) - 16065) / 0x36C;
            v25[3] = (255 * ((v29 >> 10) & 0x3FF) - 16065) / 0x36C;
            *(_BYTE *)(v26 - 3) = (255 * ((v31 >> 20) & 0x3FF) - 16065) / 0x36C;
            *(_BYTE *)(v26 - 2) = (255 * ((v33 >> 10) & 0x3FF) - 16065) / 0x36C;
          }
          if (i + 4 < v9)
          {
            v35 = v17 + i;
            *(_BYTE *)(v35 + 4) = (255 * (v30 & 0x3FF) - 16065) / 0x36C;
            *(_BYTE *)(v35 + 5) = (255 * ((v30 >> 20) & 0x3FF) - 16065) / 0x36C;
            v36 = (_BYTE *)(v22 + i);
            *(v36 - 1) = (255 * (v32 & 0x3FF) - 16065) / 0x36C;
            *v36 = (255 * ((v32 >> 20) & 0x3FF) - 16065) / 0x36C;
          }
          v37 = (_BYTE *)(v16 + i);
          *v37 = (613566757 * (unint64_t)((255 * (v28 & 0x3FF) - 16065) >> 7)) >> 32;
          v37[1] = (613566757 * (unint64_t)((255 * ((v28 >> 20) & 0x3FF) - 16065) >> 7)) >> 32;
          if (i + 2 < v9)
          {
            v38 = v16 + i;
            *(_BYTE *)(v38 + 2) = (613566757 * (unint64_t)((255 * ((v27 >> 10) & 0x3FF) - 16065) >> 7)) >> 32;
            *(_BYTE *)(v38 + 3) = (613566757 * (unint64_t)((255 * (v29 & 0x3FF) - 16065) >> 7)) >> 32;
          }
          if (i + 4 < v9)
          {
            v39 = (v29 >> 20) & 0x3FF;
            v40 = (v30 >> 10) & 0x3FF;
            v41 = v16 + i;
            *(_BYTE *)(v41 + 4) = (613566757 * (unint64_t)((255 * v39 - 16065) >> 7)) >> 32;
            *(_BYTE *)(v41 + 5) = (613566757 * (unint64_t)((255 * v40 - 16065) >> 7)) >> 32;
          }
          v23 += 16;
        }
      }
      v17 += v19;
      v16 += v43;
      v18 += v20;
      ++v15;
      v21 += v20;
      v22 += v19;
    }
    while (v15 != v10 >> 1);
  }
  return 0;
}

uint64_t vt_CopyAvg_v210_x420(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t i;
  _WORD *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  _WORD *v37;
  uint64_t v38;
  _WORD *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  _OWORD v44[2];
  _OWORD v45[2];
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _BYTE v51[48];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v68 = 0u;
  v69 = 0u;
  v66 = 0u;
  v67 = 0u;
  v64 = 0u;
  v65 = 0u;
  v62 = 0u;
  v63 = 0u;
  v60 = 0u;
  v61 = 0u;
  v59 = 0u;
  v58 = 0u;
  v57 = 0u;
  v56 = 0u;
  v55 = 0u;
  v54 = 0u;
  v53 = 0u;
  v52 = 0u;
  *(_OWORD *)&v51[32] = 0u;
  *(_OWORD *)&v51[16] = 0u;
  *(_OWORD *)v51 = 0u;
  v50 = 0u;
  v49 = 0u;
  v48 = 0u;
  v47 = 0u;
  memset(v44, 0, sizeof(v44));
  v9 = a2[2];
  v10 = a2[3];
  v45[0] = vdupq_n_s64(1uLL);
  v45[1] = xmmword_1928DFD10;
  v46 = 1;
  *(_OWORD *)&v51[8] = v45[0];
  *(_OWORD *)&v51[24] = xmmword_1928DFD20;
  v70 = 0;
  *(_QWORD *)&v51[40] = 2;
  v11 = a2[4];
  v12 = a2[5];
  v13 = *a3;
  v14 = *a4;
  vtPixelTransferSession_PrepareOffsets(2uLL, a6, v45, a8, a7, v44);
  if (v10 >= 2)
  {
    v15 = 0;
    v16 = a8[1];
    v17 = v10 >> 1;
    v18 = *((_QWORD *)&v44[0] + 1);
    v19 = *(_QWORD *)&v44[0];
    v20 = v13 + v14 * v12 + ((v11 << 7) & 0xFFFFFFFFFFFFFF00) / 0x30;
    v21 = 2 * *a8;
    v22 = 2 * v14;
    v23 = v14 + v14 * v12 + ((v11 << 7) & 0xFFFFFFFFFFFFFF00) / 0x30 + v13 + 8;
    v24 = *(_QWORD *)&v44[0] + *a8;
    do
    {
      if (v9)
      {
        v25 = 0;
        v26 = 0;
        for (i = 0; i < v9; i += 6)
        {
          v28 = (_WORD *)(v19 + v26);
          v30 = *(_DWORD *)(v20 + v25);
          v29 = *(_DWORD *)(v20 + v25 + 4);
          v31 = *(_DWORD *)(v20 + v25 + 8);
          v32 = *(_DWORD *)(v20 + v25 + 12);
          v34 = *(_DWORD *)(v23 + v25 - 8);
          v33 = *(_DWORD *)(v23 + v25 - 4);
          v36 = *(_DWORD *)(v23 + v25);
          v35 = *(_DWORD *)(v23 + v25 + 4);
          *v28 = (v30 >> 4) & 0xFFC0;
          v28[1] = (_WORD)v29 << 6;
          *(_WORD *)(v24 + v26) = (v34 >> 4) & 0xFFC0;
          v37 = (_WORD *)(v24 + 2 * i);
          v37[1] = (_WORD)v33 << 6;
          if (i + 2 < v9)
          {
            v28[2] = (v29 >> 14) & 0xFFC0;
            v28[3] = (v31 >> 4) & 0xFFC0;
            v37[2] = (v33 >> 14) & 0xFFC0;
            v37[3] = (v36 >> 4) & 0xFFC0;
          }
          if (i + 4 < v9)
          {
            v38 = v19 + v26;
            *(_WORD *)(v38 + 8) = (_WORD)v32 << 6;
            *(_WORD *)(v38 + 10) = (v32 >> 14) & 0xFFC0;
            *(_WORD *)(v24 + 2 * i + 8) = (_WORD)v35 << 6;
            *(_WORD *)(v24 + v26 + 10) = (v35 >> 14) & 0xFFC0;
          }
          v39 = (_WORD *)(v18 + v26);
          *v39 = (32 * ((v34 & 0x3FF) + (v30 & 0x3FF))) & 0xFFC0;
          v39[1] = (32 * (((v34 >> 20) & 0x3FF) + ((v30 >> 20) & 0x3FF))) & 0xFFC0;
          if (i + 2 < v9)
          {
            v40 = v18 + v26;
            *(_WORD *)(v40 + 4) = (32 * (((v33 >> 10) & 0x3FF) + ((v29 >> 10) & 0x3FF))) & 0xFFC0;
            *(_WORD *)(v40 + 6) = (32 * ((v36 & 0x3FF) + (v31 & 0x3FF))) & 0xFFC0;
          }
          if (i + 4 < v9)
          {
            v41 = ((v35 >> 10) & 0x3FF) + ((v32 >> 10) & 0x3FF);
            v42 = v18 + v26;
            *(_WORD *)(v42 + 8) = (32 * (((v36 >> 20) & 0x3FF) + ((v31 >> 20) & 0x3FF))) & 0xFFC0;
            *(_WORD *)(v42 + 10) = (32 * v41) & 0xFFC0;
          }
          v26 += 12;
          v25 += 16;
        }
      }
      v19 += v21;
      v18 += v16;
      v20 += v22;
      ++v15;
      v23 += v22;
      v24 += v21;
    }
    while (v15 != v17);
  }
  return 0;
}

uint64_t vt_CopyDec_v210_x420(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t i;
  _WORD *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  _WORD *v37;
  uint64_t v38;
  _WORD *v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD v43[2];
  _OWORD v44[2];
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _BYTE v50[48];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v67 = 0u;
  v68 = 0u;
  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  v61 = 0u;
  v62 = 0u;
  v59 = 0u;
  v60 = 0u;
  v58 = 0u;
  v57 = 0u;
  v56 = 0u;
  v55 = 0u;
  v54 = 0u;
  v53 = 0u;
  v52 = 0u;
  v51 = 0u;
  *(_OWORD *)&v50[32] = 0u;
  *(_OWORD *)&v50[16] = 0u;
  *(_OWORD *)v50 = 0u;
  v49 = 0u;
  v48 = 0u;
  v47 = 0u;
  v46 = 0u;
  memset(v43, 0, sizeof(v43));
  v9 = a2[2];
  v10 = a2[3];
  v44[0] = vdupq_n_s64(1uLL);
  v44[1] = xmmword_1928DFD10;
  v45 = 1;
  *(_OWORD *)&v50[8] = v44[0];
  *(_OWORD *)&v50[24] = xmmword_1928DFD20;
  v69 = 0;
  *(_QWORD *)&v50[40] = 2;
  v11 = a2[4];
  v12 = a2[5];
  v13 = *a3;
  v14 = *a4;
  vtPixelTransferSession_PrepareOffsets(2uLL, a6, v44, a8, a7, v43);
  if (v10 >= 2)
  {
    v15 = 0;
    v16 = a8[1];
    v17 = v10 >> 1;
    v18 = *((_QWORD *)&v43[0] + 1);
    v19 = *(_QWORD *)&v43[0];
    v20 = v13 + v14 * v12 + ((v11 << 7) & 0xFFFFFFFFFFFFFF00) / 0x30;
    v21 = 2 * *a8;
    v22 = 2 * v14;
    v23 = v14 + v14 * v12 + ((v11 << 7) & 0xFFFFFFFFFFFFFF00) / 0x30 + v13 + 8;
    v24 = *(_QWORD *)&v43[0] + *a8;
    do
    {
      if (v9)
      {
        v25 = 0;
        v26 = 0;
        for (i = 0; i < v9; i += 6)
        {
          v28 = (_WORD *)(v19 + v26);
          v30 = *(_DWORD *)(v20 + v25);
          v29 = *(_DWORD *)(v20 + v25 + 4);
          v32 = *(_DWORD *)(v20 + v25 + 8);
          v31 = *(_DWORD *)(v20 + v25 + 12);
          v34 = *(_DWORD *)(v23 + v25 - 8);
          v33 = *(_DWORD *)(v23 + v25 - 4);
          v36 = *(_DWORD *)(v23 + v25);
          v35 = *(_DWORD *)(v23 + v25 + 4);
          *v28 = (v30 >> 4) & 0xFFC0;
          v28[1] = (_WORD)v29 << 6;
          *(_WORD *)(v24 + v26) = (v34 >> 4) & 0xFFC0;
          v37 = (_WORD *)(v24 + 2 * i);
          v37[1] = (_WORD)v33 << 6;
          if (i + 2 < v9)
          {
            v28[2] = (v29 >> 14) & 0xFFC0;
            v28[3] = (v32 >> 4) & 0xFFC0;
            v37[2] = (v33 >> 14) & 0xFFC0;
            v37[3] = (v36 >> 4) & 0xFFC0;
          }
          if (i + 4 < v9)
          {
            v38 = v19 + v26;
            *(_WORD *)(v38 + 8) = (_WORD)v31 << 6;
            *(_WORD *)(v38 + 10) = (v31 >> 14) & 0xFFC0;
            *(_WORD *)(v24 + 2 * i + 8) = (_WORD)v35 << 6;
            *(_WORD *)(v24 + v26 + 10) = (v35 >> 14) & 0xFFC0;
          }
          v39 = (_WORD *)(v18 + v26);
          *v39 = (_WORD)v30 << 6;
          v39[1] = (v30 >> 14) & 0xFFC0;
          if (i + 2 < v9)
          {
            v40 = v18 + v26;
            *(_WORD *)(v40 + 4) = (v29 >> 4) & 0xFFC0;
            *(_WORD *)(v40 + 6) = (_WORD)v32 << 6;
          }
          if (i + 4 < v9)
          {
            v41 = v18 + v26;
            *(_WORD *)(v41 + 8) = (v32 >> 14) & 0xFFC0;
            *(_WORD *)(v41 + 10) = (v31 >> 4) & 0xFFC0;
          }
          v26 += 12;
          v25 += 16;
        }
      }
      v19 += v21;
      v18 += v16;
      v20 += v22;
      ++v15;
      v23 += v22;
      v24 += v21;
    }
    while (v15 != v17);
  }
  return 0;
}

uint64_t vt_CopyAvg_v210_xf20(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t i;
  _WORD *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  _WORD *v34;
  uint64_t v35;
  _WORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _OWORD v44[2];
  _OWORD v45[2];
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _BYTE v51[48];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v68 = 0u;
  v69 = 0u;
  v66 = 0u;
  v67 = 0u;
  v64 = 0u;
  v65 = 0u;
  v62 = 0u;
  v63 = 0u;
  v60 = 0u;
  v61 = 0u;
  v59 = 0u;
  v58 = 0u;
  v57 = 0u;
  v56 = 0u;
  v55 = 0u;
  v54 = 0u;
  v53 = 0u;
  v52 = 0u;
  *(_OWORD *)&v51[32] = 0u;
  *(_OWORD *)&v51[16] = 0u;
  *(_OWORD *)v51 = 0u;
  v50 = 0u;
  v49 = 0u;
  v48 = 0u;
  v47 = 0u;
  memset(v44, 0, sizeof(v44));
  v9 = a2[2];
  v10 = a2[3];
  v45[0] = vdupq_n_s64(1uLL);
  v45[1] = xmmword_1928DFD10;
  v46 = 1;
  *(_OWORD *)&v51[8] = v45[0];
  *(_OWORD *)&v51[24] = xmmword_1928DFD20;
  v70 = 0;
  *(_QWORD *)&v51[40] = 2;
  v11 = a2[4];
  v12 = a2[5];
  v13 = *a3;
  v14 = *a4;
  vtPixelTransferSession_PrepareOffsets(2uLL, a6, v45, a8, a7, v44);
  if (v10 >= 2)
  {
    v15 = 0;
    v42 = v10 >> 1;
    v43 = a8[1];
    v16 = *((_QWORD *)&v44[0] + 1);
    v17 = *(_QWORD *)&v44[0];
    v18 = (v11 << 7) & 0xFFFFFFFFFFFFFF00;
    v19 = v13 + v14 * v12 + v18 / 0x30;
    v40 = 2 * v14;
    v41 = 2 * *a8;
    v20 = v14 + v14 * v12 + v18 / 0x30 + v13 + 8;
    v21 = *(_QWORD *)&v44[0] + *a8;
    do
    {
      if (v9)
      {
        v22 = 0;
        v23 = 0;
        for (i = 0; i < v9; i += 6)
        {
          v25 = (_WORD *)(v17 + v23);
          v27 = *(_DWORD *)(v19 + v22);
          v26 = *(_DWORD *)(v19 + v22 + 4);
          v28 = *(_DWORD *)(v19 + v22 + 8);
          v29 = *(_DWORD *)(v19 + v22 + 12);
          v31 = *(_DWORD *)(v20 + v22 - 8);
          v30 = *(_DWORD *)(v20 + v22 - 4);
          v33 = *(_DWORD *)(v20 + v22);
          v32 = *(_DWORD *)(v20 + v22 + 4);
          *v25 = ((65472 * ((v27 >> 10) & 0x3FF) - 4190208) / 0x36C + 32) & 0xFFC0;
          v25[1] = ((65472 * (v26 & 0x3FF) - 4190208) / 0x36C + 32) & 0xFFC0;
          *(_WORD *)(v21 + v23) = ((65472 * ((v31 >> 10) & 0x3FF) - 4190208) / 0x36C + 32) & 0xFFC0;
          v34 = (_WORD *)(v21 + 2 * i);
          v34[1] = ((65472 * (v30 & 0x3FF) - 4190208) / 0x36C + 32) & 0xFFC0;
          if (i + 2 < v9)
          {
            v25[2] = ((65472 * ((v26 >> 20) & 0x3FF) - 4190208) / 0x36C + 32) & 0xFFC0;
            v25[3] = ((65472 * ((v28 >> 10) & 0x3FF) - 4190208) / 0x36C + 32) & 0xFFC0;
            v34[2] = ((65472 * ((v30 >> 20) & 0x3FF) - 4190208) / 0x36C + 32) & 0xFFC0;
            v34[3] = ((65472 * ((v33 >> 10) & 0x3FF) - 4190208) / 0x36C + 32) & 0xFFC0;
          }
          if (i + 4 < v9)
          {
            v35 = v17 + v23;
            *(_WORD *)(v35 + 8) = ((65472 * (v29 & 0x3FF) - 4190208) / 0x36C + 32) & 0xFFC0;
            *(_WORD *)(v35 + 10) = ((65472 * ((v29 >> 20) & 0x3FF) - 4190208) / 0x36C + 32) & 0xFFC0;
            *(_WORD *)(v21 + 2 * i + 8) = ((65472 * (v32 & 0x3FF) - 4190208) / 0x36C + 32) & 0xFFC0;
            *(_WORD *)(v21 + v23 + 10) = ((65472 * ((v32 >> 20) & 0x3FF) - 4190208) / 0x36C + 32) & 0xFFC0;
          }
          v36 = (_WORD *)(v16 + v23);
          *v36 = (((613566757 * (unint64_t)((65472 * (((v31 & 0x3FF) + (v27 & 0x3FF)) >> 1) - 4190208) >> 7)) >> 32)
                + 32) & 0xFFC0;
          v36[1] = (((613566757
                    * (unint64_t)((65472 * ((((v31 >> 20) & 0x3FF) + ((v27 >> 20) & 0x3FF)) >> 1) - 4190208) >> 7)) >> 32)
                  + 32) & 0xFFC0;
          if (i + 2 < v9)
          {
            v37 = v16 + v23;
            *(_WORD *)(v37 + 4) = (((613566757
                                   * (unint64_t)((65472 * ((((v30 >> 10) & 0x3FF) + ((v26 >> 10) & 0x3FF)) >> 1)
                                                       - 4190208) >> 7)) >> 32)
                                 + 32) & 0xFFC0;
            *(_WORD *)(v37 + 6) = (((613566757
                                   * (unint64_t)((65472 * (((v33 & 0x3FF) + (v28 & 0x3FF)) >> 1) - 4190208) >> 7)) >> 32)
                                 + 32) & 0xFFC0;
          }
          if (i + 4 < v9)
          {
            v38 = v16 + v23;
            *(_WORD *)(v38 + 8) = (((613566757
                                   * (unint64_t)((65472 * ((((v33 >> 20) & 0x3FF) + ((v28 >> 20) & 0x3FF)) >> 1)
                                                       - 4190208) >> 7)) >> 32)
                                 + 32) & 0xFFC0;
            *(_WORD *)(v38 + 10) = (((613566757
                                    * (unint64_t)((65472 * ((((v32 >> 10) & 0x3FF) + ((v29 >> 10) & 0x3FF)) >> 1)
                                                        - 4190208) >> 7)) >> 32)
                                  + 32) & 0xFFC0;
          }
          v23 += 12;
          v22 += 16;
        }
      }
      v17 += v41;
      v16 += v43;
      v19 += v40;
      ++v15;
      v20 += v40;
      v21 += v41;
    }
    while (v15 != v42);
  }
  return 0;
}

uint64_t vt_CopyDec_v210_xf20(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t i;
  _WORD *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  _WORD *v36;
  uint64_t v37;
  _WORD *v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v44;
  _OWORD v45[2];
  _OWORD v46[2];
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _BYTE v52[48];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v69 = 0u;
  v70 = 0u;
  v67 = 0u;
  v68 = 0u;
  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  v61 = 0u;
  v62 = 0u;
  v60 = 0u;
  v59 = 0u;
  v58 = 0u;
  v57 = 0u;
  v56 = 0u;
  v55 = 0u;
  v54 = 0u;
  v53 = 0u;
  *(_OWORD *)&v52[32] = 0u;
  *(_OWORD *)&v52[16] = 0u;
  *(_OWORD *)v52 = 0u;
  v51 = 0u;
  v50 = 0u;
  v49 = 0u;
  v48 = 0u;
  memset(v45, 0, sizeof(v45));
  v9 = a2[2];
  v10 = a2[3];
  v46[0] = vdupq_n_s64(1uLL);
  v46[1] = xmmword_1928DFD10;
  v47 = 1;
  *(_OWORD *)&v52[8] = v46[0];
  *(_OWORD *)&v52[24] = xmmword_1928DFD20;
  v71 = 0;
  *(_QWORD *)&v52[40] = 2;
  v11 = a2[4];
  v12 = a2[5];
  v13 = *a3;
  v14 = *a4;
  vtPixelTransferSession_PrepareOffsets(2uLL, a6, v46, a8, a7, v45);
  if (v10 >= 2)
  {
    v15 = 0;
    v44 = a8[1];
    v16 = v10 >> 1;
    v17 = *((_QWORD *)&v45[0] + 1);
    v18 = *(_QWORD *)&v45[0];
    v19 = v13 + v14 * v12 + ((v11 << 7) & 0xFFFFFFFFFFFFFF00) / 0x30;
    v20 = 2 * *a8;
    v21 = 2 * v14;
    v22 = v14 + v14 * v12 + ((v11 << 7) & 0xFFFFFFFFFFFFFF00) / 0x30 + v13 + 8;
    v23 = *(_QWORD *)&v45[0] + *a8;
    do
    {
      if (v9)
      {
        v24 = 0;
        v25 = 0;
        for (i = 0; i < v9; i += 6)
        {
          v27 = (_WORD *)(v18 + v25);
          v29 = *(_DWORD *)(v19 + v24);
          v28 = *(_DWORD *)(v19 + v24 + 4);
          v30 = *(_DWORD *)(v19 + v24 + 8);
          v31 = *(_DWORD *)(v19 + v24 + 12);
          v32 = *(_DWORD *)(v22 + v24 - 4);
          v34 = *(_DWORD *)(v22 + v24);
          v33 = *(_DWORD *)(v22 + v24 + 4);
          v35 = (*(_DWORD *)(v22 + v24 - 8) >> 10) & 0x3FF;
          *v27 = ((65472 * ((v29 >> 10) & 0x3FF) - 4190208) / 0x36C + 32) & 0xFFC0;
          v27[1] = ((65472 * (v28 & 0x3FF) - 4190208) / 0x36C + 32) & 0xFFC0;
          *(_WORD *)(v23 + v25) = ((65472 * v35 - 4190208) / 0x36Cu + 32) & 0xFFC0;
          v36 = (_WORD *)(v23 + 2 * i);
          v36[1] = ((65472 * (v32 & 0x3FF) - 4190208) / 0x36C + 32) & 0xFFC0;
          if (i + 2 < v9)
          {
            v27[2] = ((65472 * ((v28 >> 20) & 0x3FF) - 4190208) / 0x36C + 32) & 0xFFC0;
            v27[3] = ((65472 * ((v30 >> 10) & 0x3FF) - 4190208) / 0x36C + 32) & 0xFFC0;
            v36[2] = ((65472 * ((v32 >> 20) & 0x3FF) - 4190208) / 0x36C + 32) & 0xFFC0;
            v36[3] = ((65472 * ((v34 >> 10) & 0x3FF) - 4190208) / 0x36C + 32) & 0xFFC0;
          }
          if (i + 4 < v9)
          {
            v37 = v18 + v25;
            *(_WORD *)(v37 + 8) = ((65472 * (v31 & 0x3FF) - 4190208) / 0x36C + 32) & 0xFFC0;
            *(_WORD *)(v37 + 10) = ((65472 * ((v31 >> 20) & 0x3FF) - 4190208) / 0x36C + 32) & 0xFFC0;
            *(_WORD *)(v23 + 2 * i + 8) = ((65472 * (v33 & 0x3FF) - 4190208) / 0x36C + 32) & 0xFFC0;
            *(_WORD *)(v23 + v25 + 10) = ((65472 * ((v33 >> 20) & 0x3FF) - 4190208) / 0x36C + 32) & 0xFFC0;
          }
          v38 = (_WORD *)(v17 + v25);
          *v38 = (((613566757 * (unint64_t)((65472 * (v29 & 0x3FF) - 4190208) >> 7)) >> 32) + 32) & 0xFFC0;
          v38[1] = (((613566757 * (unint64_t)((65472 * ((v29 >> 20) & 0x3FF) - 4190208) >> 7)) >> 32) + 32) & 0xFFC0;
          if (i + 2 < v9)
          {
            v39 = v17 + v25;
            *(_WORD *)(v39 + 4) = (((613566757 * (unint64_t)((65472 * ((v28 >> 10) & 0x3FF) - 4190208) >> 7)) >> 32)
                                 + 32) & 0xFFC0;
            *(_WORD *)(v39 + 6) = (((613566757 * (unint64_t)((65472 * (v30 & 0x3FF) - 4190208) >> 7)) >> 32) + 32) & 0xFFC0;
          }
          if (i + 4 < v9)
          {
            v40 = (v30 >> 20) & 0x3FF;
            v41 = (v31 >> 10) & 0x3FF;
            v42 = v17 + v25;
            *(_WORD *)(v42 + 8) = (((613566757 * (unint64_t)((65472 * v40 - 4190208) >> 7)) >> 32)
                                 + 32) & 0xFFC0;
            *(_WORD *)(v42 + 10) = (((613566757 * (unint64_t)((65472 * v41 - 4190208) >> 7)) >> 32)
                                  + 32) & 0xFFC0;
          }
          v25 += 12;
          v24 += 16;
        }
      }
      v18 += v20;
      v17 += v44;
      v19 += v21;
      ++v15;
      v22 += v21;
      v23 += v20;
    }
    while (v15 != v16);
  }
  return 0;
}

vImage_Error vt_VImage_Setup_v210_32BGRA(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  vImage_YpCbCrToARGB *v17;
  const vImage_YpCbCrToARGBMatrix **v18;
  const vImage_YpCbCrToARGBMatrix *DefaultYpCbCrToARGBMatrixWithDimensionHint;
  int v20;
  vImage_Error result;
  __int128 v22;
  int v23;
  vImage_YpCbCrPixelRange pixelRange;

  v22 = 0uLL;
  v23 = 0;
  v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFCE0;
  *(_OWORD *)&pixelRange.YpMax = xmmword_1928DFCD0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v22 = xmmword_1928DFC00;
      v20 = 1072585656;
    }
    else if (FigCFEqual())
    {
      v22 = xmmword_1928DFC10;
      v20 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDA8];
        goto LABEL_3;
      }
      v22 = xmmword_1928DFC20;
      v20 = 1072746935;
    }
    v23 = v20;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v22;
    goto LABEL_11;
  }
  v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDB0];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v18;
LABEL_11:
  result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage422CrYpCbYpCbYpCbYpCrYpCrYp10, kvImageARGB8888, 0);
  *(_QWORD *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_v210_32BGRA;
  *a11 = vt_VImage_Cleanup_v210_32BGRA;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_v210_32ARGB(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  vImage_YpCbCrToARGB *v17;
  const vImage_YpCbCrToARGBMatrix **v18;
  const vImage_YpCbCrToARGBMatrix *DefaultYpCbCrToARGBMatrixWithDimensionHint;
  int v20;
  vImage_Error result;
  __int128 v22;
  int v23;
  vImage_YpCbCrPixelRange pixelRange;

  v22 = 0uLL;
  v23 = 0;
  v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFCE0;
  *(_OWORD *)&pixelRange.YpMax = xmmword_1928DFCD0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v22 = xmmword_1928DFC00;
      v20 = 1072585656;
    }
    else if (FigCFEqual())
    {
      v22 = xmmword_1928DFC10;
      v20 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDA8];
        goto LABEL_3;
      }
      v22 = xmmword_1928DFC20;
      v20 = 1072746935;
    }
    v23 = v20;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v22;
    goto LABEL_11;
  }
  v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDB0];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v18;
LABEL_11:
  result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage422CrYpCbYpCbYpCbYpCrYpCrYp10, kvImageARGB8888, 0);
  *(_QWORD *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_v210_32ARGB;
  *a11 = vt_VImage_Cleanup_v210_32ARGB;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_v210_RGhA(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  vImage_YpCbCrToARGB *v17;
  const vImage_YpCbCrToARGBMatrix **v18;
  const vImage_YpCbCrToARGBMatrix *DefaultYpCbCrToARGBMatrixWithDimensionHint;
  int v20;
  vImage_Error result;
  __int128 v22;
  int v23;
  vImage_YpCbCrPixelRange pixelRange;

  v22 = 0uLL;
  v23 = 0;
  v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFCE0;
  *(_OWORD *)&pixelRange.YpMax = xmmword_1928DFCD0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v22 = xmmword_1928DFC00;
      v20 = 1072585656;
    }
    else if (FigCFEqual())
    {
      v22 = xmmword_1928DFC10;
      v20 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDA8];
        goto LABEL_3;
      }
      v22 = xmmword_1928DFC20;
      v20 = 1072746935;
    }
    v23 = v20;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v22;
    goto LABEL_11;
  }
  v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDB0];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v18;
LABEL_11:
  result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage422CrYpCbYpCbYpCbYpCrYpCrYp10, kvImageARGB16Q12, 0);
  *(_QWORD *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_v210_RGhA;
  *a11 = vt_VImage_Cleanup_v210_RGhA;
  *a8 = v17;
  return result;
}

uint64_t vt_Copy_OneComponent_420v(unint64_t a1, unint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  char v22;
  char v23;
  char v24;

  if (a2 >= 2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v9 = a5[1];
    v10 = a2 >> 1;
    v11 = a1 >> 1;
    v13 = *a6;
    v12 = a6[1];
    v14 = *a4;
    v15 = 2 * *a5;
    v16 = 2 * v7;
    if (a1 >> 1 <= 1)
      v11 = 1;
    v17 = v14 + v7;
    do
    {
      if (a1 >= 2)
      {
        v18 = 0;
        v19 = v13 + v8;
        v20 = v11;
        do
        {
          v21 = (_BYTE *)(v13 + v18);
          v22 = sLumaTableFtoV[*(unsigned __int8 *)(v14 + v18 + 1)];
          v23 = sLumaTableFtoV[*(unsigned __int8 *)(v17 + v18)];
          v24 = sLumaTableFtoV[*(unsigned __int8 *)(v17 + v18 + 1)];
          *v21 = sLumaTableFtoV[*(unsigned __int8 *)(v14 + v18)];
          v21[1] = v22;
          *(_BYTE *)(v19 + v18) = v23;
          *(_BYTE *)(v19 + v18 + 1) = v24;
          *(_WORD *)(v12 + v18) = -32640;
          v18 += 2;
          --v20;
        }
        while (v20);
      }
      v13 += v15;
      v12 += v9;
      v14 += v16;
      ++v6;
      v17 += v16;
    }
    while (v6 != v10);
  }
  return 0;
}

uint64_t vt_Copy_OneComponent_420f(unint64_t a1, unint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;

  if (a2 >= 2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v9 = a5[1];
    v10 = a2 >> 1;
    v11 = a1 >> 1;
    v13 = *a6;
    v12 = a6[1];
    v14 = *a4;
    v15 = 2 * *a5;
    v16 = 2 * v7;
    if (a1 >> 1 <= 1)
      v11 = 1;
    v17 = v14 + v7;
    do
    {
      if (a1 >= 2)
      {
        v18 = 0;
        v19 = v13 + v8;
        v20 = v11;
        do
        {
          v21 = *(_BYTE *)(v17 + v18);
          v22 = *(_BYTE *)(v17 + v18 + 1);
          *(_WORD *)(v13 + v18) = *(_WORD *)(v14 + v18);
          *(_BYTE *)(v19 + v18) = v21;
          *(_BYTE *)(v19 + v18 + 1) = v22;
          *(_WORD *)(v12 + v18) = -32640;
          v18 += 2;
          --v20;
        }
        while (v20);
      }
      v13 += v15;
      v12 += v9;
      v14 += v16;
      ++v6;
      v17 += v16;
    }
    while (v6 != v10);
  }
  return 0;
}

uint64_t vt_VImage_Setup_OneComponent_32BGRA(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, vImage_Error (**a9)(uint64_t a1, vImagePixelCount *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8), uint64_t a10, void (**a11)(void **a1))
{
  _OWORD *v14;

  v14 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *v14 = 0u;
  v14[1] = 0u;
  v14[2] = 0u;
  v14[3] = 0u;
  v14[4] = 0u;
  v14[5] = 0u;
  v14[6] = 0u;
  v14[7] = 0u;
  v14[8] = 0u;
  v14[9] = 0u;
  v14[10] = 0u;
  v14[11] = 0u;
  v14[12] = 0u;
  v14[13] = 0u;
  v14[14] = 0u;
  v14[15] = 0u;
  v14[16] = 0u;
  v14[17] = 0u;
  *((_QWORD *)v14 + 36) = 0;
  *((_QWORD *)v14 + 37) = a5;
  *((_BYTE *)v14 + 288) = a6;
  *a9 = vt_VImage_Copy_OneComponent_32BGRA;
  *a11 = vt_VImage_Cleanup_OneComponent_32BGRA;
  *a8 = v14;
  return 0;
}

uint64_t vt_Copy_L010_L008(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;

  if (a2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v9 = *a6;
    v10 = *a4;
    do
    {
      if (a1)
      {
        for (i = 0; i != a1; ++i)
          *(_BYTE *)(v9 + i) = (4198405 * (unint64_t)(255 * (*(unsigned __int16 *)(v10 + 2 * i) >> 6))) >> 32;
      }
      v10 += v7;
      v9 += v8;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

vImage_Error vt_Copy_Half_Float(vImagePixelCount a1, vImagePixelCount a2, size_t *a3, void **a4, size_t *a5, void **a6)
{
  size_t v6;
  size_t v7;
  vImage_Buffer v9;
  vImage_Buffer src;

  v6 = *a3;
  src.width = a1;
  src.rowBytes = v6;
  src.data = *a4;
  src.height = a2;
  v7 = *a5;
  v9.width = a1;
  v9.rowBytes = v7;
  v9.data = *a6;
  v9.height = a2;
  return vImageConvert_Planar16FtoPlanarF(&src, &v9, 0);
}

vImage_Error vt_Copy_Float_Half(vImagePixelCount a1, vImagePixelCount a2, size_t *a3, void **a4, size_t *a5, void **a6)
{
  size_t v6;
  size_t v7;
  vImage_Buffer v9;
  vImage_Buffer src;

  v6 = *a3;
  src.width = a1;
  src.rowBytes = v6;
  src.data = *a4;
  src.height = a2;
  v7 = *a5;
  v9.width = a1;
  v9.rowBytes = v7;
  v9.data = *a6;
  v9.height = a2;
  return vImageConvert_PlanarFtoPlanar16F(&src, &v9, 0);
}

vImage_Error vt_VImage_Setup_2vuf_32ARGB(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  vImage_YpCbCrToARGB *v17;
  __int128 v18;
  const vImage_YpCbCrToARGBMatrix **v19;
  const vImage_YpCbCrToARGBMatrix *DefaultYpCbCrToARGBMatrixWithDimensionHint;
  int v21;
  vImage_Error result;
  __int128 v23;
  int v24;
  vImage_YpCbCrPixelRange pixelRange;

  v23 = 0uLL;
  v24 = 0;
  v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_QWORD *)&v18 = 255;
  *((_QWORD *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFC60;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v23 = xmmword_1928DFC00;
      v21 = 1072585656;
    }
    else if (FigCFEqual())
    {
      v23 = xmmword_1928DFC10;
      v21 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDA8];
        goto LABEL_3;
      }
      v23 = xmmword_1928DFC20;
      v21 = 1072746935;
    }
    v24 = v21;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v23;
    goto LABEL_11;
  }
  v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDB0];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v19;
LABEL_11:
  result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage422CbYpCrYp8, kvImageARGB8888, 0);
  *(_QWORD *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_2vuf_32ARGB;
  *a11 = vt_VImage_Cleanup_2vuf_32ARGB;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_2vuf_32BGRA(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  vImage_YpCbCrToARGB *v17;
  __int128 v18;
  const vImage_YpCbCrToARGBMatrix **v19;
  const vImage_YpCbCrToARGBMatrix *DefaultYpCbCrToARGBMatrixWithDimensionHint;
  int v21;
  vImage_Error result;
  __int128 v23;
  int v24;
  vImage_YpCbCrPixelRange pixelRange;

  v23 = 0uLL;
  v24 = 0;
  v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_QWORD *)&v18 = 255;
  *((_QWORD *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFC60;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v23 = xmmword_1928DFC00;
      v21 = 1072585656;
    }
    else if (FigCFEqual())
    {
      v23 = xmmword_1928DFC10;
      v21 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDA8];
        goto LABEL_3;
      }
      v23 = xmmword_1928DFC20;
      v21 = 1072746935;
    }
    v24 = v21;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v23;
    goto LABEL_11;
  }
  v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDB0];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v19;
LABEL_11:
  result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage422CbYpCrYp8, kvImageARGB8888, 0);
  *(_QWORD *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_2vuf_32BGRA;
  *a11 = vt_VImage_Cleanup_2vuf_32BGRA;
  *a8 = v17;
  return result;
}

uint64_t vt_VImage_Setup_RGhA_32ARGB(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  _OWORD *v16;
  unint64_t v17;
  size_t v18;
  malloc_type_id_t v19;

  v16 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *v16 = 0u;
  v16[1] = 0u;
  v16[2] = 0u;
  v16[3] = 0u;
  v16[4] = 0u;
  v16[5] = 0u;
  v16[6] = 0u;
  v16[7] = 0u;
  v16[8] = 0u;
  v16[9] = 0u;
  v16[10] = 0u;
  v16[11] = 0u;
  v16[12] = 0u;
  v16[13] = 0u;
  v16[14] = 0u;
  v16[15] = 0u;
  v16[16] = 0u;
  v16[17] = 0u;
  v16[18] = 0u;
  if (a1)
  {
    v17 = 8 * a1;
    if (a2 && v17)
    {
      if (((v17 | a2) & 0x8000000000000000) != 0 || !is_mul_ok(a2, v17))
      {
        v18 = 0;
LABEL_11:
        *((_QWORD *)v16 + 32) = v18;
        *((_QWORD *)v16 + 33) = a2;
        *((_QWORD *)v16 + 34) = a1;
        *((_QWORD *)v16 + 35) = v17;
        goto LABEL_12;
      }
      v18 = v17 * a2;
      if (!(v17 * a2))
        goto LABEL_11;
      v19 = 1556728742;
LABEL_10:
      v18 = (size_t)malloc_type_malloc(v18, v19);
      goto LABEL_11;
    }
LABEL_9:
    v18 = 0;
    v19 = 1270757447;
    goto LABEL_10;
  }
  if (a2)
  {
    v17 = 0;
    goto LABEL_9;
  }
LABEL_12:
  *((_QWORD *)v16 + 37) = a5;
  *((_BYTE *)v16 + 288) = a6;
  *a9 = vt_VImage_Copy_RGhA_32ARGB;
  *a11 = vt_VImage_Cleanup_RGhA_32ARGB;
  *a8 = v16;
  return 0;
}

uint64_t vt_VImage_Setup_RGhA_32BGRA(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  _OWORD *v16;
  unint64_t v17;
  size_t v18;
  malloc_type_id_t v19;

  v16 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *v16 = 0u;
  v16[1] = 0u;
  v16[2] = 0u;
  v16[3] = 0u;
  v16[4] = 0u;
  v16[5] = 0u;
  v16[6] = 0u;
  v16[7] = 0u;
  v16[8] = 0u;
  v16[9] = 0u;
  v16[10] = 0u;
  v16[11] = 0u;
  v16[12] = 0u;
  v16[13] = 0u;
  v16[14] = 0u;
  v16[15] = 0u;
  v16[16] = 0u;
  v16[17] = 0u;
  v16[18] = 0u;
  if (a1)
  {
    v17 = 8 * a1;
    if (a2 && v17)
    {
      if (((v17 | a2) & 0x8000000000000000) != 0 || !is_mul_ok(a2, v17))
      {
        v18 = 0;
LABEL_11:
        *((_QWORD *)v16 + 32) = v18;
        *((_QWORD *)v16 + 33) = a2;
        *((_QWORD *)v16 + 34) = a1;
        *((_QWORD *)v16 + 35) = v17;
        goto LABEL_12;
      }
      v18 = v17 * a2;
      if (!(v17 * a2))
        goto LABEL_11;
      v19 = 1556728742;
LABEL_10:
      v18 = (size_t)malloc_type_malloc(v18, v19);
      goto LABEL_11;
    }
LABEL_9:
    v18 = 0;
    v19 = 1270757447;
    goto LABEL_10;
  }
  if (a2)
  {
    v17 = 0;
    goto LABEL_9;
  }
LABEL_12:
  *((_QWORD *)v16 + 37) = a5;
  *((_BYTE *)v16 + 288) = a6;
  *a9 = vt_VImage_Copy_RGhA_32BGRA;
  *a11 = vt_VImage_Cleanup_RGhA_32BGRA;
  *a8 = v16;
  return 0;
}

vImage_Error vt_VImage_Setup_RGhA_y416(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  void *v17;
  __int128 v18;
  const vImage_ARGBToYpCbCrMatrix **v19;
  const vImage_ARGBToYpCbCrMatrix *DefaultARGBToYpCbCrMatrixWidthDimensionHint;
  __int128 v21;
  __int128 v22;
  vImage_Error result;
  __int128 v24;
  __int128 v25;
  vImage_YpCbCrPixelRange pixelRange;

  v24 = 0u;
  v25 = 0u;
  v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(_QWORD *)&v18 = 0xFFFFLL;
  *((_QWORD *)&v18 + 1) = 0xFFFFLL;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFCF0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v21 = xmmword_1928DFC70;
      v22 = xmmword_1928DFC80;
    }
    else if (FigCFEqual())
    {
      v21 = xmmword_1928DFC90;
      v22 = xmmword_1928DFCA0;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BD98];
        goto LABEL_3;
      }
      v21 = xmmword_1928DFCB0;
      v22 = xmmword_1928DFCC0;
    }
    v24 = v21;
    v25 = v22;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v24;
    goto LABEL_11;
  }
  v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BDA0];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v19;
LABEL_11:
  result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB16U, kvImage444AYpCbCr16, 0);
  *((_QWORD *)v17 + 37) = a5;
  *((_BYTE *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_RGhA_y416;
  *a11 = vt_VImage_Cleanup_RGhA_y416;
  *a8 = v17;
  return result;
}

uint64_t vt_VImage_Setup_RGhA_l64r(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  _OWORD *v14;

  v14 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *v14 = 0u;
  v14[1] = 0u;
  v14[2] = 0u;
  v14[3] = 0u;
  v14[4] = 0u;
  v14[5] = 0u;
  v14[6] = 0u;
  v14[7] = 0u;
  v14[8] = 0u;
  v14[9] = 0u;
  v14[10] = 0u;
  v14[11] = 0u;
  v14[12] = 0u;
  v14[13] = 0u;
  v14[14] = 0u;
  v14[15] = 0u;
  v14[16] = 0u;
  v14[17] = 0u;
  *((_QWORD *)v14 + 36) = 0;
  *((_QWORD *)v14 + 37) = a5;
  *((_BYTE *)v14 + 288) = a6;
  *a9 = vt_VImage_Copy_RGhA_l64r;
  *a11 = vt_VImage_Cleanup_RGhA_l64r;
  *a8 = v14;
  return 0;
}

uint64_t vt_VImage_Setup_RGhA_RGfA(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  _OWORD *v14;

  v14 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *v14 = 0u;
  v14[1] = 0u;
  v14[2] = 0u;
  v14[3] = 0u;
  v14[4] = 0u;
  v14[5] = 0u;
  v14[6] = 0u;
  v14[7] = 0u;
  v14[8] = 0u;
  v14[9] = 0u;
  v14[10] = 0u;
  v14[11] = 0u;
  v14[12] = 0u;
  v14[13] = 0u;
  v14[14] = 0u;
  v14[15] = 0u;
  v14[16] = 0u;
  v14[17] = 0u;
  *((_QWORD *)v14 + 36) = 0;
  *((_QWORD *)v14 + 37) = a5;
  *((_BYTE *)v14 + 288) = a6;
  *a9 = vt_VImage_Copy_RGhA_RGfA;
  *a11 = vt_VImage_Cleanup_RGhA_RGfA;
  *a8 = v14;
  return 0;
}

vImage_Error vt_VImage_Setup_RGhA_v410(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  void *v17;
  const vImage_ARGBToYpCbCrMatrix **v18;
  const vImage_ARGBToYpCbCrMatrix *DefaultARGBToYpCbCrMatrixWidthDimensionHint;
  __int128 v20;
  __int128 v21;
  vImage_Error v22;
  void *v23;
  unint64_t v24;
  size_t v25;
  malloc_type_id_t v26;
  __int128 v28;
  __int128 v29;
  vImage_YpCbCrPixelRange pixelRange;

  v28 = 0u;
  v29 = 0u;
  v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFCE0;
  *(_OWORD *)&pixelRange.YpMax = xmmword_1928DFCD0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v20 = xmmword_1928DFC70;
      v21 = xmmword_1928DFC80;
    }
    else if (FigCFEqual())
    {
      v20 = xmmword_1928DFC90;
      v21 = xmmword_1928DFCA0;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BD98];
        goto LABEL_3;
      }
      v20 = xmmword_1928DFCB0;
      v21 = xmmword_1928DFCC0;
    }
    v28 = v20;
    v29 = v21;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v28;
    goto LABEL_11;
  }
  v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BDA0];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v18;
LABEL_11:
  v22 = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB16Q12, kvImage444CrYpCb10, 0);
  if (!v22 && (*((_QWORD *)v17 + 34) != a1 || *((_QWORD *)v17 + 33) != a2 || *((_QWORD *)v17 + 35) != 8 * a1))
  {
    v23 = (void *)*((_QWORD *)v17 + 32);
    if (v23)
    {
      *((_QWORD *)v17 + 32) = 0;
      free(v23);
    }
    v24 = 8 * a1;
    if (a2 && v24)
    {
      v25 = 0;
      if (((v24 | a2) & 0x8000000000000000) != 0)
        goto LABEL_25;
      if (!is_mul_ok(a2, v24))
        goto LABEL_25;
      v25 = v24 * a2;
      if (!(v24 * a2))
        goto LABEL_25;
      v26 = 1556728742;
    }
    else
    {
      v25 = 0;
      v26 = 1270757447;
    }
    v25 = (size_t)malloc_type_malloc(v25, v26);
LABEL_25:
    *((_QWORD *)v17 + 32) = v25;
    *((_QWORD *)v17 + 33) = a2;
    *((_QWORD *)v17 + 34) = a1;
    *((_QWORD *)v17 + 35) = v24;
  }
  *((_QWORD *)v17 + 37) = a5;
  *((_BYTE *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_RGhA_v410;
  *a11 = vt_VImage_Cleanup_RGhA_v410;
  *a8 = v17;
  return v22;
}

vImage_Error vt_VImage_Setup_RGhA_v210(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  void *v17;
  const vImage_ARGBToYpCbCrMatrix **v18;
  const vImage_ARGBToYpCbCrMatrix *DefaultARGBToYpCbCrMatrixWidthDimensionHint;
  __int128 v20;
  __int128 v21;
  vImage_Error v22;
  void *v23;
  unint64_t v24;
  size_t v25;
  malloc_type_id_t v26;
  __int128 v28;
  __int128 v29;
  vImage_YpCbCrPixelRange pixelRange;

  v28 = 0u;
  v29 = 0u;
  v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFCE0;
  *(_OWORD *)&pixelRange.YpMax = xmmword_1928DFCD0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v20 = xmmword_1928DFC70;
      v21 = xmmword_1928DFC80;
    }
    else if (FigCFEqual())
    {
      v20 = xmmword_1928DFC90;
      v21 = xmmword_1928DFCA0;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BD98];
        goto LABEL_3;
      }
      v20 = xmmword_1928DFCB0;
      v21 = xmmword_1928DFCC0;
    }
    v28 = v20;
    v29 = v21;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v28;
    goto LABEL_11;
  }
  v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BDA0];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v18;
LABEL_11:
  v22 = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB16Q12, kvImage422CrYpCbYpCbYpCbYpCrYpCrYp10, 0);
  if (!v22 && (*((_QWORD *)v17 + 34) != a1 || *((_QWORD *)v17 + 33) != a2 || *((_QWORD *)v17 + 35) != 8 * a1))
  {
    v23 = (void *)*((_QWORD *)v17 + 32);
    if (v23)
    {
      *((_QWORD *)v17 + 32) = 0;
      free(v23);
    }
    v24 = 8 * a1;
    if (a2 && v24)
    {
      v25 = 0;
      if (((v24 | a2) & 0x8000000000000000) != 0)
        goto LABEL_25;
      if (!is_mul_ok(a2, v24))
        goto LABEL_25;
      v25 = v24 * a2;
      if (!(v24 * a2))
        goto LABEL_25;
      v26 = 1556728742;
    }
    else
    {
      v25 = 0;
      v26 = 1270757447;
    }
    v25 = (size_t)malloc_type_malloc(v25, v26);
LABEL_25:
    *((_QWORD *)v17 + 32) = v25;
    *((_QWORD *)v17 + 33) = a2;
    *((_QWORD *)v17 + 34) = a1;
    *((_QWORD *)v17 + 35) = v24;
  }
  *((_QWORD *)v17 + 37) = a5;
  *((_BYTE *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_RGhA_v210;
  *a11 = vt_VImage_Cleanup_RGhA_v210;
  *a8 = v17;
  return v22;
}

vImage_Error vt_VImage_Setup_RGhA_v216(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  void *v17;
  __int128 v18;
  const vImage_ARGBToYpCbCrMatrix **v19;
  const vImage_ARGBToYpCbCrMatrix *DefaultARGBToYpCbCrMatrixWidthDimensionHint;
  __int128 v21;
  __int128 v22;
  vImage_Error v23;
  void *v24;
  unint64_t v25;
  size_t v26;
  malloc_type_id_t v27;
  __int128 v29;
  __int128 v30;
  vImage_YpCbCrPixelRange pixelRange;

  v29 = 0u;
  v30 = 0u;
  v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(_QWORD *)&v18 = 0xFFFFLL;
  *((_QWORD *)&v18 + 1) = 0xFFFFLL;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFCF0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v21 = xmmword_1928DFC70;
      v22 = xmmword_1928DFC80;
    }
    else if (FigCFEqual())
    {
      v21 = xmmword_1928DFC90;
      v22 = xmmword_1928DFCA0;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BD98];
        goto LABEL_3;
      }
      v21 = xmmword_1928DFCB0;
      v22 = xmmword_1928DFCC0;
    }
    v29 = v21;
    v30 = v22;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v29;
    goto LABEL_11;
  }
  v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BDA0];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v19;
LABEL_11:
  v23 = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB16U, kvImage422CbYpCrYp16, 0);
  if (!v23 && (*((_QWORD *)v17 + 34) != a1 || *((_QWORD *)v17 + 33) != a2 || *((_QWORD *)v17 + 35) != 8 * a1))
  {
    v24 = (void *)*((_QWORD *)v17 + 32);
    if (v24)
    {
      *((_QWORD *)v17 + 32) = 0;
      free(v24);
    }
    v25 = 8 * a1;
    if (a2 && v25)
    {
      v26 = 0;
      if (((v25 | a2) & 0x8000000000000000) != 0)
        goto LABEL_25;
      if (!is_mul_ok(a2, v25))
        goto LABEL_25;
      v26 = v25 * a2;
      if (!(v25 * a2))
        goto LABEL_25;
      v27 = 1556728742;
    }
    else
    {
      v26 = 0;
      v27 = 1270757447;
    }
    v26 = (size_t)malloc_type_malloc(v26, v27);
LABEL_25:
    *((_QWORD *)v17 + 32) = v26;
    *((_QWORD *)v17 + 33) = a2;
    *((_QWORD *)v17 + 34) = a1;
    *((_QWORD *)v17 + 35) = v25;
  }
  *((_QWORD *)v17 + 37) = a5;
  *((_BYTE *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_RGhA_v216;
  *a11 = vt_VImage_Cleanup_RGhA_v216;
  *a8 = v17;
  return v23;
}

uint64_t vt_VImage_Setup_RGhA_R10k(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  _OWORD *v16;
  unint64_t v17;
  size_t v18;
  malloc_type_id_t v19;

  v16 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *v16 = 0u;
  v16[1] = 0u;
  v16[2] = 0u;
  v16[3] = 0u;
  v16[4] = 0u;
  v16[5] = 0u;
  v16[6] = 0u;
  v16[7] = 0u;
  v16[8] = 0u;
  v16[9] = 0u;
  v16[10] = 0u;
  v16[11] = 0u;
  v16[12] = 0u;
  v16[13] = 0u;
  v16[14] = 0u;
  v16[15] = 0u;
  v16[16] = 0u;
  v16[17] = 0u;
  v16[18] = 0u;
  if (a1)
  {
    v17 = 8 * a1;
    if (a2 && v17)
    {
      if (((v17 | a2) & 0x8000000000000000) != 0 || !is_mul_ok(a2, v17))
      {
        v18 = 0;
LABEL_11:
        *((_QWORD *)v16 + 32) = v18;
        *((_QWORD *)v16 + 33) = a2;
        *((_QWORD *)v16 + 34) = a1;
        *((_QWORD *)v16 + 35) = v17;
        goto LABEL_12;
      }
      v18 = v17 * a2;
      if (!(v17 * a2))
        goto LABEL_11;
      v19 = 1556728742;
LABEL_10:
      v18 = (size_t)malloc_type_malloc(v18, v19);
      goto LABEL_11;
    }
LABEL_9:
    v18 = 0;
    v19 = 1270757447;
    goto LABEL_10;
  }
  if (a2)
  {
    v17 = 0;
    goto LABEL_9;
  }
LABEL_12:
  *((_QWORD *)v16 + 37) = a5;
  *((_BYTE *)v16 + 288) = a6;
  *a9 = vt_VImage_Copy_RGhA_R10k;
  *a11 = vt_VImage_Cleanup_RGhA_R10k;
  *a8 = v16;
  return 0;
}

uint64_t vt_Copy_RGhA_p420ITU2020(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, _QWORD *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _WORD *v32;
  _WORD *v33;
  uint64_t v34;
  __int32 *v35;
  uint64_t v36;
  uint64_t v37;
  __int16 *v38;
  __int16 *v39;
  int *v40;
  unsigned int v41;
  unsigned int v42;
  int *v43;
  int *v44;
  int *v45;
  __int16 *v46;
  __int16 *v47;
  __int16 *v49;
  unint64_t v64;
  __int16 *v65;
  __int16 *v66;
  __int16 *v68;
  int32x2_t v80;
  float64x2_t v81;
  unint64_t v83;
  __int32 *v84;
  unsigned int v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  int v112;
  int v117;
  int v119;
  int v120;
  double v122;
  double v123;
  double v126;
  double v129;
  double v130;
  int v136;
  double v137;
  double v143;
  double v145;
  double v148;
  int v152;
  int *v154;
  int v155;
  unsigned int *v156;
  int v158;
  int *v159;
  int v168;
  unsigned int v169;
  unsigned int v172;
  unsigned int v174;
  unsigned int v175;
  unsigned int v179;
  float v180;
  unsigned int v181;
  float v182;
  __int16 *v183;
  __int16 *v184;
  uint64_t v185;
  __int16 *v186;
  __int16 *v187;
  unsigned int v188;
  __int16 *v189;
  __int16 *v190;
  __int16 *v191;
  __int16 *v193;
  unint64_t v205;
  __int16 *v206;
  __int16 *v207;
  __int16 *v208;
  __int16 *v210;
  int32x2_t v222;
  float64x2_t v223;
  unint64_t v225;
  __int32 *v226;
  unsigned int v227;
  unint64_t v228;
  unint64_t v230;
  unsigned int v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v238;
  __int32 *v239;
  uint64_t v240;
  _WORD *v241;
  _WORD *v242;
  uint64_t v243;
  int *v244;
  int v245;

  v245 = 1313280;
  v8 = *(_QWORD *)(a2 + 40);
  v9 = (v8 & 1) + v8;
  v10 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v11 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v12 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v13 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v10 >= v13 - v12)
    v14 = v13 - v12;
  else
    v14 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v10;
  if ((unint64_t)((*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE) - v9 >= ((*(_DWORD *)(a6 + 24)
                                                                                    + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE)
                                                                                  - v11)
    v15 = ((*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE) - v11;
  else
    v15 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE) - v9;
  v16 = v13 % 6;
  _CF = v14 >= v16;
  v18 = v14 - v16;
  if (!_CF)
    v18 = 0;
  if (v15 >= 2)
  {
    v19 = 0;
    v20 = v12 / 3;
    v21 = v12 % 3;
    v22 = 6 * (v12 / 6) - v12 + 6;
    v23 = v15 >> 1;
    v24 = a8[1];
    v25 = a7[1] + v24 * (v11 >> 1);
    v26 = *a7 + *a8 * v11 + 4 * v20;
    v27 = (int *)(v26 + *a8);
    v28 = *a3;
    v29 = *a4;
    v30 = *a3 + *a4 * v9;
    v31 = 8 * v10;
    v32 = (_WORD *)(v30 + 8 * v10);
    v33 = (_WORD *)((char *)v32 + *a4);
    v238 = v29 & 0x7FFFFFFFFFFFFFFFLL;
    v237 = (*a8 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    v236 = v24 >> 2;
    v235 = 2 * v29;
    v34 = v28 + v29 + v29 * (v8 + (v8 & 1));
    v35 = (__int32 *)(v25 + 4 * v20);
    v232 = v14;
    v231 = v21;
    v230 = v23;
    do
    {
      v36 = 0;
      v240 = v34;
      v241 = v33;
      v242 = v32;
      v243 = v30;
      v37 = v30;
      v38 = v32;
      v39 = v33;
      v40 = (int *)v26;
      v41 = v21;
      v42 = v21;
      v239 = v35;
      v244 = v27;
      v43 = v27;
      do
      {
        v44 = v43;
        v45 = v40;
        if ((v36 & 1) != 0)
        {
          v49 = (__int16 *)(v37 + v31 - 8);
          v46 = v38 - 3;
          v47 = v38 - 2;
          _H19 = *(_WORD *)(v37 + v31);
          __asm { FCVT            S19, H19 }
          _H20 = *(_WORD *)(v37 + v31 + 2);
          __asm { FCVT            S20, H20 }
          _H21 = *(_WORD *)(v37 + v31 + 4);
          __asm { FCVT            S21, H21 }
        }
        else
        {
          v46 = (__int16 *)(v37 + v31 + 2);
          v47 = (__int16 *)(v37 + v31 + 4);
          _S19 = 0.0;
          v49 = v38;
          _S20 = 0.0;
          _S21 = 0.0;
        }
        _H23 = *v47;
        _H24 = *v46;
        _H22 = *v49;
        __asm
        {
          FCVT            D22, H22
          FCVT            D24, H24
          FCVT            D23, H23
        }
        v64 = *((unsigned __int8 *)&v245 + v42);
        *v45 = ((int)((_D24 * 0.580573067 + _D22 * 0.22495132 + _D23 * 0.0507805982) * 1023.0 + 64.0) << v64) | *v45 & ~(1023 << v64);
        if ((v36 & 1) != 0)
        {
          v68 = (__int16 *)(v34 + v31 - 8);
          v65 = v39 - 3;
          v66 = v39 - 2;
          _H25 = *(_WORD *)(v34 + v31);
          __asm { FCVT            S28, H25 }
          _H25 = *(_WORD *)(v34 + v31 + 2);
          __asm { FCVT            S29, H25 }
          _H25 = *(_WORD *)(v34 + v31 + 4);
          __asm { FCVT            S30, H25 }
        }
        else
        {
          v65 = (__int16 *)(v34 + v31 + 2);
          v66 = (__int16 *)(v34 + v31 + 4);
          _S28 = 0.0;
          v68 = v39;
          _S29 = 0.0;
          _S30 = 0.0;
        }
        _H26 = *v66;
        _H27 = *v65;
        _H25 = *v68;
        __asm
        {
          FCVT            D25, H25
          FCVT            D27, H27
          FCVT            D26, H26
        }
        if ((v36 & 1) != 0)
        {
          v81 = vmulq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_1928DFD30, _D24), (float64x2_t)xmmword_1928DFD40, _D22), (float64x2_t)xmmword_1928DFD50, _D23), (float64x2_t)xmmword_1928DFD40, _S19), (float64x2_t)xmmword_1928DFD30,
                                  _S20),
                                (float64x2_t)xmmword_1928DFD50,
                                _S21),
                              (float64x2_t)xmmword_1928DFD40,
                              _D25),
                            (float64x2_t)xmmword_1928DFD30,
                            _D27),
                          (float64x2_t)xmmword_1928DFD50,
                          _D26),
                        (float64x2_t)xmmword_1928DFD40,
                        _S28),
                      (float64x2_t)xmmword_1928DFD30,
                      _S29),
                    (float64x2_t)xmmword_1928DFD50,
                    _S30),
                  (float64x2_t)vdupq_n_s64(0x408FF80000000000uLL));
          __asm { FMOV            V20.2D, #0.25 }
          v80 = vadd_s32(vcvt_s32_f32(vrnda_f32(vcvt_f32_f64(vmulq_f64(v81, _Q20)))), (int32x2_t)0x20000000200);
        }
        else
        {
          v80 = 0;
        }
        *v43 = *v43 & ~(1023 << v64) | ((int)((_D27 * 0.580573067 + _D25 * 0.22495132 + _D26 * 0.0507805982) * 1023.0
                                            + 64.0) << v64);
        if (v42 == 2)
          v42 = 0;
        else
          ++v42;
        if ((v36 & 1) != 0)
        {
          v83 = *((unsigned __int8 *)&v245 + v41);
          *v35 = *v35 & ~(1023 << v83) | (v80.i32[0] << v83);
          v84 = (__int32 *)((char *)v35 + ((v83 >> 2) & 0x3C));
          if (v41 == 2)
            v85 = 0;
          else
            v85 = v41 + 1;
          v86 = *((unsigned __int8 *)&v245 + v85);
          *v84 = *v84 & ~(1023 << v86) | (v80.i32[1] << v86);
          v35 = (__int32 *)((char *)v84 + ((v86 >> 2) & 0x3C));
          if (v85 == 2)
            v41 = 0;
          else
            v41 = v85 + 1;
        }
        v38 += 4;
        v40 = &v45[v64 >> 4];
        v39 += 4;
        ++v36;
        v37 += 8;
        v43 += v64 >> 4;
        v34 += 8;
      }
      while (v22 != v36);
      if (v22 >= v18)
      {
        v184 = (__int16 *)(v37 + v31);
        v183 = (__int16 *)(v34 + v31);
        v92 = v22;
      }
      else
      {
        v233 = v26;
        v234 = v19;
        v87 = 0;
        v88 = (v64 >> 2) & 0x3C;
        v89 = (char *)v44 + v88;
        v90 = (char *)v45 + v88;
        v91 = v31;
        v92 = v22;
        do
        {
          _H19 = *(_WORD *)(v37 + v91);
          _H20 = *(_WORD *)(v37 + v91 + 2);
          _H21 = *(_WORD *)(v37 + v91 + 4);
          __asm
          {
            FCVT            D27, H19
            FCVT            D28, H20
            FCVT            D29, H21
          }
          _H21 = *(_WORD *)(v37 + v91 + 8);
          _H22 = *(_WORD *)(v37 + v91 + 10);
          _H23 = *(_WORD *)(v37 + v91 + 12);
          __asm
          {
            FCVT            D30, H21
            FCVT            D31, H22
            FCVT            D26, H23
          }
          _H22 = *(_WORD *)(v34 + v91);
          _H23 = *(_WORD *)(v34 + v91 + 2);
          _H8 = *(_WORD *)(v34 + v91 + 4);
          __asm
          {
            FCVT            D25, H22
            FCVT            D24, H23
            FCVT            D23, H8
          }
          _H22 = *(_WORD *)(v34 + v91 + 8);
          v112 = (int)((_D28 * 0.580573067 + _D27 * 0.22495132 + _D29 * 0.0507805982) * 1023.0 + 64.0);
          _H20 = *(_WORD *)(v34 + v91 + 10);
          _H9 = *(_WORD *)(v34 + v91 + 12);
          __asm
          {
            FCVT            D22, H22
            FCVT            D20, H20
          }
          v117 = (int)((_D31 * 0.580573067 + _D30 * 0.22495132 + _D26 * 0.0507805982) * 1023.0 + 64.0);
          __asm { FCVT            D21, H9 }
          v119 = (int)((_D24 * 0.580573067 + _D25 * 0.22495132 + _D23 * 0.0507805982) * 1023.0 + 64.0);
          v120 = (int)((_D20 * 0.580573067 + _D22 * 0.22495132 + _D21 * 0.0507805982) * 1023.0 + 64.0);
          _D8 = _D28 * -0.315631984 + _D27 * -0.122295679 + _D29 * 0.437927664 + _D30 * -0.122295679;
          v122 = _D28 * -0.402705142 + _D27 * 0.437927664 + _D29 * -0.035222522 + _D30 * 0.437927664;
          v123 = _D8 + _D31 * -0.315631984;
          _D27 = v122 + _D31 * -0.402705142;
          LOWORD(_D29) = *(_WORD *)(v37 + v91 + 16);
          LOWORD(_D30) = *(_WORD *)(v37 + v91 + 18);
          LOWORD(_D31) = *(_WORD *)(v37 + v91 + 20);
          __asm { FCVT            D29, H29 }
          v126 = v123 + _D26 * 0.437927664;
          __asm
          {
            FCVT            D30, H30
            FCVT            D31, H31
          }
          v129 = _D27 + _D26 * -0.035222522;
          LOWORD(_D27) = *(_WORD *)(v37 + v91 + 24);
          LOWORD(_D8) = *(_WORD *)(v37 + v91 + 26);
          v130 = v126 + _D25 * -0.122295679;
          _H9 = *(_WORD *)(v37 + v91 + 28);
          __asm
          {
            FCVT            D27, H27
            FCVT            D8, H8
          }
          _D25 = v129 + _D25 * 0.437927664;
          __asm { FCVT            D26, H9 }
          v136 = (int)((_D8 * 0.580573067 + _D27 * 0.22495132 + _D26 * 0.0507805982) * 1023.0 + 64.0);
          v137 = v130 + _D24 * -0.315631984;
          _H9 = *(_WORD *)(v34 + v91 + 16);
          _H10 = *(_WORD *)(v34 + v91 + 18);
          _H11 = *(_WORD *)(v34 + v91 + 20);
          __asm
          {
            FCVT            D9, H9
            FCVT            D10, H10
          }
          v143 = _D25 + _D24 * -0.402705142;
          __asm { FCVT            D11, H11 }
          v145 = v137 + _D23 * 0.437927664;
          LOWORD(_D25) = *(_WORD *)(v34 + v91 + 24);
          _H12 = *(_WORD *)(v34 + v91 + 26);
          _H13 = *(_WORD *)(v34 + v91 + 28);
          v148 = v143 + _D23 * -0.035222522;
          __asm
          {
            FCVT            D24, H25
            FCVT            D25, H12
            FCVT            D13, H13
          }
          v152 = (int)((_D25 * 0.580573067 + _D24 * 0.22495132 + _D13 * 0.0507805982) * 1023.0 + 64.0);
          _D28 = v145 + _D22 * -0.122295679 + _D20 * -0.315631984;
          v154 = (int *)&v89[v87];
          v155 = v112 | (v117 << 10);
          v156 = (unsigned int *)&v35[v87 / 4];
          _D20 = v148 + _D22 * 0.437927664 + _D20 * -0.402705142 + _D21 * -0.035222522;
          v158 = v119 | (v120 << 10);
          v159 = (int *)&v90[v87];
          *v159 = v155 | ((int)((_D30 * 0.580573067 + _D29 * 0.22495132 + _D31 * 0.0507805982) * 1023.0 + 64.0) << 20);
          *v154 = v158 | ((int)((_D10 * 0.580573067 + _D9 * 0.22495132 + _D11 * 0.0507805982) * 1023.0 + 64.0) << 20);
          _D23 = (_D30 * -0.315631984
                + _D29 * -0.122295679
                + _D31 * 0.437927664
                + _D27 * -0.122295679
                + _D8 * -0.315631984
                + _D26 * 0.437927664
                + _D9 * -0.122295679
                + _D10 * -0.315631984
                + _D11 * 0.437927664
                + _D24 * -0.122295679
                + _D25 * -0.315631984
                + _D13 * 0.437927664)
               * 1023.0
               * 0.25;
          _D22 = (_D30 * -0.402705142
                + _D29 * 0.437927664
                + _D31 * -0.035222522
                + _D27 * 0.437927664
                + _D8 * -0.402705142
                + _D26 * -0.035222522
                + _D9 * 0.437927664
                + _D10 * -0.402705142
                + _D11 * -0.035222522
                + _D24 * 0.437927664
                + _D25 * -0.402705142
                + _D13 * -0.035222522)
               * 1023.0;
          LOWORD(_D24) = *(_WORD *)(v37 + v91 + 32);
          LOWORD(_D25) = *(_WORD *)(v37 + v91 + 34);
          LOWORD(_D26) = *(_WORD *)(v37 + v91 + 36);
          __asm
          {
            FCVT            D24, H24
            FCVT            D25, H25
            FCVT            D26, H26
          }
          *(float *)&_D21 = (_D28 + _D21 * 0.437927664) * 1023.0 * 0.25;
          LOWORD(_D27) = *(_WORD *)(v37 + v91 + 40);
          LOWORD(_D28) = *(_WORD *)(v37 + v91 + 42);
          *(float *)&_D20 = _D20 * 1023.0 * 0.25;
          LOWORD(_D29) = *(_WORD *)(v37 + v91 + 44);
          __asm
          {
            FCVT            D27, H27
            FCVT            D28, H28
          }
          *(float *)&_D23 = _D23;
          __asm { FCVT            D29, H29 }
          *(float *)&_D22 = _D22 * 0.25;
          v168 = v136 | ((int)((_D25 * 0.580573067 + _D24 * 0.22495132 + _D26 * 0.0507805982) * 1023.0 + 64.0) << 10) | ((int)((_D28 * 0.580573067 + _D27 * 0.22495132 + _D29 * 0.0507805982) * 1023.0 + 64.0) << 20);
          LOWORD(_D30) = *(_WORD *)(v34 + v91 + 32);
          LOWORD(_D31) = *(_WORD *)(v34 + v91 + 34);
          v169 = llroundf(*(float *)&_D21);
          LOWORD(_D21) = *(_WORD *)(v34 + v91 + 36);
          __asm
          {
            FCVT            D30, H30
            FCVT            D31, H31
          }
          v172 = llroundf(*(float *)&_D20);
          __asm { FCVT            D21, H21 }
          v174 = llroundf(*(float *)&_D23);
          LOWORD(_D20) = *(_WORD *)(v34 + v91 + 40);
          LOWORD(_D23) = *(_WORD *)(v34 + v91 + 42);
          v175 = llroundf(*(float *)&_D22);
          LOWORD(_D22) = *(_WORD *)(v34 + v91 + 44);
          __asm
          {
            FCVT            D20, H20
            FCVT            D23, H23
            FCVT            D22, H22
          }
          v179 = v175 + 512;
          v180 = (_D25 * -0.315631984
                + _D24 * -0.122295679
                + _D26 * 0.437927664
                + _D27 * -0.122295679
                + _D28 * -0.315631984
                + _D29 * 0.437927664
                + _D30 * -0.122295679
                + _D31 * -0.315631984
                + _D21 * 0.437927664
                + _D20 * -0.122295679
                + _D23 * -0.315631984
                + _D22 * 0.437927664)
               * 1023.0
               * 0.25;
          v181 = llroundf(v180);
          *v156 = ((v172 << 10) + 0x80000) | (v169 + 512) | ((v174 << 20) + 0x20000000);
          v182 = (_D25 * -0.402705142
                + _D24 * 0.437927664
                + _D26 * -0.035222522
                + _D27 * 0.437927664
                + _D28 * -0.402705142
                + _D29 * -0.035222522
                + _D30 * 0.437927664
                + _D31 * -0.402705142
                + _D21 * -0.035222522
                + _D20 * 0.437927664
                + _D23 * -0.402705142
                + _D22 * -0.035222522)
               * 1023.0
               * 0.25;
          v159[1] = v168;
          v154[1] = v152 | ((int)((_D31 * 0.580573067 + _D30 * 0.22495132 + _D21 * 0.0507805982) * 1023.0 + 64.0) << 10) | ((int)((_D23 * 0.580573067 + _D20 * 0.22495132 + _D22 * 0.0507805982) * 1023.0 + 64.0) << 20);
          v156[1] = ((llroundf(v182) << 20) + 0x20000000) | v179 | ((v181 << 10) + 0x80000);
          v92 += 6;
          v87 += 8;
          v91 += 48;
        }
        while (v92 < v18);
        v14 = v232;
        v43 = (int *)((char *)v44 + ((v64 >> 2) & 0x3C) + v87);
        v35 = (__int32 *)((char *)v35 + v87);
        v40 = (int *)((char *)v45 + ((v64 >> 2) & 0x3C) + v87);
        v183 = (__int16 *)(v34 + v91);
        v184 = (__int16 *)(v37 + v91);
        v26 = v233;
        v19 = v234;
        v21 = v231;
        v23 = v230;
      }
      if (v92 < v14)
      {
        v185 = 0;
        v186 = v184;
        v187 = v183;
        v188 = v18 % 3;
        do
        {
          v189 = &v184[v185];
          if ((v92 & 1) != 0)
          {
            v193 = v189 - 4;
            v190 = v186 - 3;
            v191 = v186 - 2;
            _H19 = *v189;
            __asm { FCVT            S19, H19 }
            _H20 = v189[1];
            __asm { FCVT            S20, H20 }
            _H21 = v189[2];
            __asm { FCVT            S21, H21 }
          }
          else
          {
            v190 = v189 + 1;
            v191 = v189 + 2;
            _S19 = 0.0;
            v193 = v186;
            _S20 = 0.0;
            _S21 = 0.0;
          }
          _H23 = *v191;
          _H24 = *v190;
          _H22 = *v193;
          __asm
          {
            FCVT            D22, H22
            FCVT            D24, H24
            FCVT            D23, H23
          }
          v205 = *((unsigned __int8 *)&v245 + v188);
          *v40 = ((int)((_D24 * 0.580573067 + _D22 * 0.22495132 + _D23 * 0.0507805982) * 1023.0 + 64.0) << v205) | *v40 & ~(1023 << v205);
          v206 = &v183[v185];
          if ((v92 & 1) != 0)
          {
            v210 = v206 - 4;
            v207 = v187 - 3;
            v208 = v187 - 2;
            _H25 = *v206;
            __asm { FCVT            S28, H25 }
            _H25 = v206[1];
            __asm { FCVT            S29, H25 }
            _H25 = v206[2];
            __asm { FCVT            S30, H25 }
          }
          else
          {
            v207 = v206 + 1;
            v208 = v206 + 2;
            _S28 = 0.0;
            v210 = v187;
            _S29 = 0.0;
            _S30 = 0.0;
          }
          _H26 = *v208;
          _H27 = *v207;
          _H25 = *v210;
          __asm
          {
            FCVT            D25, H25
            FCVT            D27, H27
            FCVT            D26, H26
          }
          if ((v92 & 1) != 0)
          {
            v223 = vmulq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_1928DFD30, _D24), (float64x2_t)xmmword_1928DFD40, _D22), (float64x2_t)xmmword_1928DFD50, _D23), (float64x2_t)xmmword_1928DFD40, _S19), (float64x2_t)xmmword_1928DFD30,
                                     _S20),
                                   (float64x2_t)xmmword_1928DFD50,
                                   _S21),
                                 (float64x2_t)xmmword_1928DFD40,
                                 _D25),
                               (float64x2_t)xmmword_1928DFD30,
                               _D27),
                             (float64x2_t)xmmword_1928DFD50,
                             _D26),
                           (float64x2_t)xmmword_1928DFD40,
                           _S28),
                         (float64x2_t)xmmword_1928DFD30,
                         _S29),
                       (float64x2_t)xmmword_1928DFD50,
                       _S30),
                     (float64x2_t)vdupq_n_s64(0x408FF80000000000uLL));
            __asm { FMOV            V20.2D, #0.25 }
            v222 = vadd_s32(vcvt_s32_f32(vrnda_f32(vcvt_f32_f64(vmulq_f64(v223, _Q20)))), (int32x2_t)0x20000000200);
          }
          else
          {
            v222 = 0;
          }
          *v43 = *v43 & ~(1023 << v205) | ((int)((_D27 * 0.580573067 + _D25 * 0.22495132 + _D26 * 0.0507805982) * 1023.0
                                               + 64.0) << v205);
          if (v188 == 2)
            v188 = 0;
          else
            ++v188;
          if ((v92 & 1) != 0)
          {
            v225 = *((unsigned __int8 *)&v245 + v41);
            *v35 = *v35 & ~(1023 << v225) | (v222.i32[0] << v225);
            v226 = (__int32 *)((char *)v35 + ((v225 >> 2) & 0x3C));
            if (v41 == 2)
              v227 = 0;
            else
              v227 = v41 + 1;
            v228 = *((unsigned __int8 *)&v245 + v227);
            *v226 = *v226 & ~(1023 << v228) | (v222.i32[1] << v228);
            v35 = (__int32 *)((char *)v226 + ((v228 >> 2) & 0x3C));
            if (v227 == 2)
              v41 = 0;
            else
              v41 = v227 + 1;
          }
          v186 += 4;
          v40 += v205 >> 4;
          v187 += 4;
          ++v92;
          v185 += 4;
          v43 += v205 >> 4;
        }
        while (v14 != v92);
      }
      v32 = &v242[v238];
      v33 = &v241[v238];
      v26 += 4 * v237;
      ++v19;
      v27 = &v244[v237];
      v30 = v243 + v235;
      v34 = v240 + v235;
      v35 = &v239[v236];
    }
    while (v19 != v23);
  }
  return 0;
}

uint64_t vt_Copy_RGhA_p420ITU709(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, _QWORD *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _WORD *v32;
  _WORD *v33;
  uint64_t v34;
  __int32 *v35;
  uint64_t v36;
  uint64_t v37;
  __int16 *v38;
  __int16 *v39;
  int *v40;
  unsigned int v41;
  unsigned int v42;
  int *v43;
  int *v44;
  int *v45;
  __int16 *v46;
  __int16 *v47;
  __int16 *v49;
  unint64_t v64;
  __int16 *v65;
  __int16 *v66;
  __int16 *v68;
  int32x2_t v80;
  float64x2_t v81;
  unint64_t v83;
  __int32 *v84;
  unsigned int v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  int v112;
  int v117;
  int v119;
  int v120;
  double v122;
  double v123;
  double v126;
  double v129;
  double v130;
  int v136;
  double v137;
  double v143;
  double v145;
  double v148;
  int v152;
  int *v154;
  int v155;
  unsigned int *v156;
  int v158;
  int *v159;
  int v168;
  unsigned int v169;
  unsigned int v172;
  unsigned int v174;
  unsigned int v175;
  unsigned int v179;
  float v180;
  unsigned int v181;
  float v182;
  __int16 *v183;
  __int16 *v184;
  uint64_t v185;
  __int16 *v186;
  __int16 *v187;
  unsigned int v188;
  __int16 *v189;
  __int16 *v190;
  __int16 *v191;
  __int16 *v193;
  unint64_t v205;
  __int16 *v206;
  __int16 *v207;
  __int16 *v208;
  __int16 *v210;
  int32x2_t v222;
  float64x2_t v223;
  unint64_t v225;
  __int32 *v226;
  unsigned int v227;
  unint64_t v228;
  unint64_t v230;
  unsigned int v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v238;
  __int32 *v239;
  uint64_t v240;
  _WORD *v241;
  _WORD *v242;
  uint64_t v243;
  int *v244;
  int v245;

  v245 = 1313280;
  v8 = *(_QWORD *)(a2 + 40);
  v9 = (v8 & 1) + v8;
  v10 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v11 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v12 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v13 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v10 >= v13 - v12)
    v14 = v13 - v12;
  else
    v14 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v10;
  if ((unint64_t)((*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE) - v9 >= ((*(_DWORD *)(a6 + 24)
                                                                                    + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE)
                                                                                  - v11)
    v15 = ((*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE) - v11;
  else
    v15 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE) - v9;
  v16 = v13 % 6;
  _CF = v14 >= v16;
  v18 = v14 - v16;
  if (!_CF)
    v18 = 0;
  if (v15 >= 2)
  {
    v19 = 0;
    v20 = v12 / 3;
    v21 = v12 % 3;
    v22 = 6 * (v12 / 6) - v12 + 6;
    v23 = v15 >> 1;
    v24 = a8[1];
    v25 = a7[1] + v24 * (v11 >> 1);
    v26 = *a7 + *a8 * v11 + 4 * v20;
    v27 = (int *)(v26 + *a8);
    v28 = *a3;
    v29 = *a4;
    v30 = *a3 + *a4 * v9;
    v31 = 8 * v10;
    v32 = (_WORD *)(v30 + 8 * v10);
    v33 = (_WORD *)((char *)v32 + *a4);
    v238 = v29 & 0x7FFFFFFFFFFFFFFFLL;
    v237 = (*a8 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    v236 = v24 >> 2;
    v235 = 2 * v29;
    v34 = v28 + v29 + v29 * (v8 + (v8 & 1));
    v35 = (__int32 *)(v25 + 4 * v20);
    v232 = v14;
    v231 = v21;
    v230 = v23;
    do
    {
      v36 = 0;
      v240 = v34;
      v241 = v33;
      v242 = v32;
      v243 = v30;
      v37 = v30;
      v38 = v32;
      v39 = v33;
      v40 = (int *)v26;
      v41 = v21;
      v42 = v21;
      v239 = v35;
      v244 = v27;
      v43 = v27;
      do
      {
        v44 = v43;
        v45 = v40;
        if ((v36 & 1) != 0)
        {
          v49 = (__int16 *)(v37 + v31 - 8);
          v46 = v38 - 3;
          v47 = v38 - 2;
          _H19 = *(_WORD *)(v37 + v31);
          __asm { FCVT            S19, H19 }
          _H20 = *(_WORD *)(v37 + v31 + 2);
          __asm { FCVT            S20, H20 }
          _H21 = *(_WORD *)(v37 + v31 + 4);
          __asm { FCVT            S21, H21 }
        }
        else
        {
          v46 = (__int16 *)(v37 + v31 + 2);
          v47 = (__int16 *)(v37 + v31 + 4);
          _S19 = 0.0;
          v49 = v38;
          _S20 = 0.0;
          _S21 = 0.0;
        }
        _H23 = *v47;
        _H24 = *v46;
        _H22 = *v49;
        __asm
        {
          FCVT            D22, H22
          FCVT            D24, H24
          FCVT            D23, H23
        }
        v64 = *((unsigned __int8 *)&v245 + v42);
        *v45 = ((int)((_D24 * 0.614230588 + _D22 * 0.182585882 + _D23 * 0.0620070588) * 1023.0 + 64.0) << v64) | *v45 & ~(1023 << v64);
        if ((v36 & 1) != 0)
        {
          v68 = (__int16 *)(v34 + v31 - 8);
          v65 = v39 - 3;
          v66 = v39 - 2;
          _H25 = *(_WORD *)(v34 + v31);
          __asm { FCVT            S28, H25 }
          _H25 = *(_WORD *)(v34 + v31 + 2);
          __asm { FCVT            S29, H25 }
          _H25 = *(_WORD *)(v34 + v31 + 4);
          __asm { FCVT            S30, H25 }
        }
        else
        {
          v65 = (__int16 *)(v34 + v31 + 2);
          v66 = (__int16 *)(v34 + v31 + 4);
          _S28 = 0.0;
          v68 = v39;
          _S29 = 0.0;
          _S30 = 0.0;
        }
        _H26 = *v66;
        _H27 = *v65;
        _H25 = *v68;
        __asm
        {
          FCVT            D25, H25
          FCVT            D27, H27
          FCVT            D26, H26
        }
        if ((v36 & 1) != 0)
        {
          v81 = vmulq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_1928DFD60, _D24), (float64x2_t)xmmword_1928DFD70, _D22), (float64x2_t)xmmword_1928DFD80, _D23), (float64x2_t)xmmword_1928DFD70, _S19), (float64x2_t)xmmword_1928DFD60,
                                  _S20),
                                (float64x2_t)xmmword_1928DFD80,
                                _S21),
                              (float64x2_t)xmmword_1928DFD70,
                              _D25),
                            (float64x2_t)xmmword_1928DFD60,
                            _D27),
                          (float64x2_t)xmmword_1928DFD80,
                          _D26),
                        (float64x2_t)xmmword_1928DFD70,
                        _S28),
                      (float64x2_t)xmmword_1928DFD60,
                      _S29),
                    (float64x2_t)xmmword_1928DFD80,
                    _S30),
                  (float64x2_t)vdupq_n_s64(0x408FF80000000000uLL));
          __asm { FMOV            V20.2D, #0.25 }
          v80 = vadd_s32(vcvt_s32_f32(vrnda_f32(vcvt_f32_f64(vmulq_f64(v81, _Q20)))), (int32x2_t)0x20000000200);
        }
        else
        {
          v80 = 0;
        }
        *v43 = *v43 & ~(1023 << v64) | ((int)((_D27 * 0.614230588 + _D25 * 0.182585882 + _D26 * 0.0620070588) * 1023.0
                                            + 64.0) << v64);
        if (v42 == 2)
          v42 = 0;
        else
          ++v42;
        if ((v36 & 1) != 0)
        {
          v83 = *((unsigned __int8 *)&v245 + v41);
          *v35 = *v35 & ~(1023 << v83) | (v80.i32[0] << v83);
          v84 = (__int32 *)((char *)v35 + ((v83 >> 2) & 0x3C));
          if (v41 == 2)
            v85 = 0;
          else
            v85 = v41 + 1;
          v86 = *((unsigned __int8 *)&v245 + v85);
          *v84 = *v84 & ~(1023 << v86) | (v80.i32[1] << v86);
          v35 = (__int32 *)((char *)v84 + ((v86 >> 2) & 0x3C));
          if (v85 == 2)
            v41 = 0;
          else
            v41 = v85 + 1;
        }
        v38 += 4;
        v40 = &v45[v64 >> 4];
        v39 += 4;
        ++v36;
        v37 += 8;
        v43 += v64 >> 4;
        v34 += 8;
      }
      while (v22 != v36);
      if (v22 >= v18)
      {
        v184 = (__int16 *)(v37 + v31);
        v183 = (__int16 *)(v34 + v31);
        v92 = v22;
      }
      else
      {
        v233 = v26;
        v234 = v19;
        v87 = 0;
        v88 = (v64 >> 2) & 0x3C;
        v89 = (char *)v44 + v88;
        v90 = (char *)v45 + v88;
        v91 = v31;
        v92 = v22;
        do
        {
          _H19 = *(_WORD *)(v37 + v91);
          _H20 = *(_WORD *)(v37 + v91 + 2);
          _H21 = *(_WORD *)(v37 + v91 + 4);
          __asm
          {
            FCVT            D27, H19
            FCVT            D28, H20
            FCVT            D29, H21
          }
          _H21 = *(_WORD *)(v37 + v91 + 8);
          _H22 = *(_WORD *)(v37 + v91 + 10);
          _H23 = *(_WORD *)(v37 + v91 + 12);
          __asm
          {
            FCVT            D30, H21
            FCVT            D31, H22
            FCVT            D26, H23
          }
          _H22 = *(_WORD *)(v34 + v91);
          _H23 = *(_WORD *)(v34 + v91 + 2);
          _H8 = *(_WORD *)(v34 + v91 + 4);
          __asm
          {
            FCVT            D25, H22
            FCVT            D24, H23
            FCVT            D23, H8
          }
          _H22 = *(_WORD *)(v34 + v91 + 8);
          v112 = (int)((_D28 * 0.614230588 + _D27 * 0.182585882 + _D29 * 0.0620070588) * 1023.0 + 64.0);
          _H20 = *(_WORD *)(v34 + v91 + 10);
          _H9 = *(_WORD *)(v34 + v91 + 12);
          __asm
          {
            FCVT            D22, H22
            FCVT            D20, H20
          }
          v117 = (int)((_D31 * 0.614230588 + _D30 * 0.182585882 + _D26 * 0.0620070588) * 1023.0 + 64.0);
          __asm { FCVT            D21, H9 }
          v119 = (int)((_D24 * 0.614230588 + _D25 * 0.182585882 + _D23 * 0.0620070588) * 1023.0 + 64.0);
          v120 = (int)((_D20 * 0.614230588 + _D22 * 0.182585882 + _D21 * 0.0620070588) * 1023.0 + 64.0);
          _D8 = _D28 * -0.338572047 + _D27 * -0.100643639 + _D29 * 0.439215686 + _D30 * -0.100643639;
          v122 = _D28 * -0.398942243 + _D27 * 0.439215686 + _D29 * -0.0402734431 + _D30 * 0.439215686;
          v123 = _D8 + _D31 * -0.338572047;
          _D27 = v122 + _D31 * -0.398942243;
          LOWORD(_D29) = *(_WORD *)(v37 + v91 + 16);
          LOWORD(_D30) = *(_WORD *)(v37 + v91 + 18);
          LOWORD(_D31) = *(_WORD *)(v37 + v91 + 20);
          __asm { FCVT            D29, H29 }
          v126 = v123 + _D26 * 0.439215686;
          __asm
          {
            FCVT            D30, H30
            FCVT            D31, H31
          }
          v129 = _D27 + _D26 * -0.0402734431;
          LOWORD(_D27) = *(_WORD *)(v37 + v91 + 24);
          LOWORD(_D8) = *(_WORD *)(v37 + v91 + 26);
          v130 = v126 + _D25 * -0.100643639;
          _H9 = *(_WORD *)(v37 + v91 + 28);
          __asm
          {
            FCVT            D27, H27
            FCVT            D8, H8
          }
          _D25 = v129 + _D25 * 0.439215686;
          __asm { FCVT            D26, H9 }
          v136 = (int)((_D8 * 0.614230588 + _D27 * 0.182585882 + _D26 * 0.0620070588) * 1023.0 + 64.0);
          v137 = v130 + _D24 * -0.338572047;
          _H9 = *(_WORD *)(v34 + v91 + 16);
          _H10 = *(_WORD *)(v34 + v91 + 18);
          _H11 = *(_WORD *)(v34 + v91 + 20);
          __asm
          {
            FCVT            D9, H9
            FCVT            D10, H10
          }
          v143 = _D25 + _D24 * -0.398942243;
          __asm { FCVT            D11, H11 }
          v145 = v137 + _D23 * 0.439215686;
          LOWORD(_D25) = *(_WORD *)(v34 + v91 + 24);
          _H12 = *(_WORD *)(v34 + v91 + 26);
          _H13 = *(_WORD *)(v34 + v91 + 28);
          v148 = v143 + _D23 * -0.0402734431;
          __asm
          {
            FCVT            D24, H25
            FCVT            D25, H12
            FCVT            D13, H13
          }
          v152 = (int)((_D25 * 0.614230588 + _D24 * 0.182585882 + _D13 * 0.0620070588) * 1023.0 + 64.0);
          _D28 = v145 + _D22 * -0.100643639 + _D20 * -0.338572047;
          v154 = (int *)&v89[v87];
          v155 = v112 | (v117 << 10);
          v156 = (unsigned int *)&v35[v87 / 4];
          _D20 = v148 + _D22 * 0.439215686 + _D20 * -0.398942243 + _D21 * -0.0402734431;
          v158 = v119 | (v120 << 10);
          v159 = (int *)&v90[v87];
          *v159 = v155 | ((int)((_D30 * 0.614230588 + _D29 * 0.182585882 + _D31 * 0.0620070588) * 1023.0 + 64.0) << 20);
          *v154 = v158 | ((int)((_D10 * 0.614230588 + _D9 * 0.182585882 + _D11 * 0.0620070588) * 1023.0 + 64.0) << 20);
          _D23 = (_D30 * -0.338572047
                + _D29 * -0.100643639
                + _D31 * 0.439215686
                + _D27 * -0.100643639
                + _D8 * -0.338572047
                + _D26 * 0.439215686
                + _D9 * -0.100643639
                + _D10 * -0.338572047
                + _D11 * 0.439215686
                + _D24 * -0.100643639
                + _D25 * -0.338572047
                + _D13 * 0.439215686)
               * 1023.0
               * 0.25;
          _D22 = (_D30 * -0.398942243
                + _D29 * 0.439215686
                + _D31 * -0.0402734431
                + _D27 * 0.439215686
                + _D8 * -0.398942243
                + _D26 * -0.0402734431
                + _D9 * 0.439215686
                + _D10 * -0.398942243
                + _D11 * -0.0402734431
                + _D24 * 0.439215686
                + _D25 * -0.398942243
                + _D13 * -0.0402734431)
               * 1023.0;
          LOWORD(_D24) = *(_WORD *)(v37 + v91 + 32);
          LOWORD(_D25) = *(_WORD *)(v37 + v91 + 34);
          LOWORD(_D26) = *(_WORD *)(v37 + v91 + 36);
          __asm
          {
            FCVT            D24, H24
            FCVT            D25, H25
            FCVT            D26, H26
          }
          *(float *)&_D21 = (_D28 + _D21 * 0.439215686) * 1023.0 * 0.25;
          LOWORD(_D27) = *(_WORD *)(v37 + v91 + 40);
          LOWORD(_D28) = *(_WORD *)(v37 + v91 + 42);
          *(float *)&_D20 = _D20 * 1023.0 * 0.25;
          LOWORD(_D29) = *(_WORD *)(v37 + v91 + 44);
          __asm
          {
            FCVT            D27, H27
            FCVT            D28, H28
          }
          *(float *)&_D23 = _D23;
          __asm { FCVT            D29, H29 }
          *(float *)&_D22 = _D22 * 0.25;
          v168 = v136 | ((int)((_D25 * 0.614230588 + _D24 * 0.182585882 + _D26 * 0.0620070588) * 1023.0 + 64.0) << 10) | ((int)((_D28 * 0.614230588 + _D27 * 0.182585882 + _D29 * 0.0620070588) * 1023.0 + 64.0) << 20);
          LOWORD(_D30) = *(_WORD *)(v34 + v91 + 32);
          LOWORD(_D31) = *(_WORD *)(v34 + v91 + 34);
          v169 = llroundf(*(float *)&_D21);
          LOWORD(_D21) = *(_WORD *)(v34 + v91 + 36);
          __asm
          {
            FCVT            D30, H30
            FCVT            D31, H31
          }
          v172 = llroundf(*(float *)&_D20);
          __asm { FCVT            D21, H21 }
          v174 = llroundf(*(float *)&_D23);
          LOWORD(_D20) = *(_WORD *)(v34 + v91 + 40);
          LOWORD(_D23) = *(_WORD *)(v34 + v91 + 42);
          v175 = llroundf(*(float *)&_D22);
          LOWORD(_D22) = *(_WORD *)(v34 + v91 + 44);
          __asm
          {
            FCVT            D20, H20
            FCVT            D23, H23
            FCVT            D22, H22
          }
          v179 = v175 + 512;
          v180 = (_D25 * -0.338572047
                + _D24 * -0.100643639
                + _D26 * 0.439215686
                + _D27 * -0.100643639
                + _D28 * -0.338572047
                + _D29 * 0.439215686
                + _D30 * -0.100643639
                + _D31 * -0.338572047
                + _D21 * 0.439215686
                + _D20 * -0.100643639
                + _D23 * -0.338572047
                + _D22 * 0.439215686)
               * 1023.0
               * 0.25;
          v181 = llroundf(v180);
          *v156 = ((v172 << 10) + 0x80000) | (v169 + 512) | ((v174 << 20) + 0x20000000);
          v182 = (_D25 * -0.398942243
                + _D24 * 0.439215686
                + _D26 * -0.0402734431
                + _D27 * 0.439215686
                + _D28 * -0.398942243
                + _D29 * -0.0402734431
                + _D30 * 0.439215686
                + _D31 * -0.398942243
                + _D21 * -0.0402734431
                + _D20 * 0.439215686
                + _D23 * -0.398942243
                + _D22 * -0.0402734431)
               * 1023.0
               * 0.25;
          v159[1] = v168;
          v154[1] = v152 | ((int)((_D31 * 0.614230588 + _D30 * 0.182585882 + _D21 * 0.0620070588) * 1023.0 + 64.0) << 10) | ((int)((_D23 * 0.614230588 + _D20 * 0.182585882 + _D22 * 0.0620070588) * 1023.0 + 64.0) << 20);
          v156[1] = ((llroundf(v182) << 20) + 0x20000000) | v179 | ((v181 << 10) + 0x80000);
          v92 += 6;
          v87 += 8;
          v91 += 48;
        }
        while (v92 < v18);
        v14 = v232;
        v43 = (int *)((char *)v44 + ((v64 >> 2) & 0x3C) + v87);
        v35 = (__int32 *)((char *)v35 + v87);
        v40 = (int *)((char *)v45 + ((v64 >> 2) & 0x3C) + v87);
        v183 = (__int16 *)(v34 + v91);
        v184 = (__int16 *)(v37 + v91);
        v26 = v233;
        v19 = v234;
        v21 = v231;
        v23 = v230;
      }
      if (v92 < v14)
      {
        v185 = 0;
        v186 = v184;
        v187 = v183;
        v188 = v18 % 3;
        do
        {
          v189 = &v184[v185];
          if ((v92 & 1) != 0)
          {
            v193 = v189 - 4;
            v190 = v186 - 3;
            v191 = v186 - 2;
            _H19 = *v189;
            __asm { FCVT            S19, H19 }
            _H20 = v189[1];
            __asm { FCVT            S20, H20 }
            _H21 = v189[2];
            __asm { FCVT            S21, H21 }
          }
          else
          {
            v190 = v189 + 1;
            v191 = v189 + 2;
            _S19 = 0.0;
            v193 = v186;
            _S20 = 0.0;
            _S21 = 0.0;
          }
          _H23 = *v191;
          _H24 = *v190;
          _H22 = *v193;
          __asm
          {
            FCVT            D22, H22
            FCVT            D24, H24
            FCVT            D23, H23
          }
          v205 = *((unsigned __int8 *)&v245 + v188);
          *v40 = ((int)((_D24 * 0.614230588 + _D22 * 0.182585882 + _D23 * 0.0620070588) * 1023.0 + 64.0) << v205) | *v40 & ~(1023 << v205);
          v206 = &v183[v185];
          if ((v92 & 1) != 0)
          {
            v210 = v206 - 4;
            v207 = v187 - 3;
            v208 = v187 - 2;
            _H25 = *v206;
            __asm { FCVT            S28, H25 }
            _H25 = v206[1];
            __asm { FCVT            S29, H25 }
            _H25 = v206[2];
            __asm { FCVT            S30, H25 }
          }
          else
          {
            v207 = v206 + 1;
            v208 = v206 + 2;
            _S28 = 0.0;
            v210 = v187;
            _S29 = 0.0;
            _S30 = 0.0;
          }
          _H26 = *v208;
          _H27 = *v207;
          _H25 = *v210;
          __asm
          {
            FCVT            D25, H25
            FCVT            D27, H27
            FCVT            D26, H26
          }
          if ((v92 & 1) != 0)
          {
            v223 = vmulq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_1928DFD60, _D24), (float64x2_t)xmmword_1928DFD70, _D22), (float64x2_t)xmmword_1928DFD80, _D23), (float64x2_t)xmmword_1928DFD70, _S19), (float64x2_t)xmmword_1928DFD60,
                                     _S20),
                                   (float64x2_t)xmmword_1928DFD80,
                                   _S21),
                                 (float64x2_t)xmmword_1928DFD70,
                                 _D25),
                               (float64x2_t)xmmword_1928DFD60,
                               _D27),
                             (float64x2_t)xmmword_1928DFD80,
                             _D26),
                           (float64x2_t)xmmword_1928DFD70,
                           _S28),
                         (float64x2_t)xmmword_1928DFD60,
                         _S29),
                       (float64x2_t)xmmword_1928DFD80,
                       _S30),
                     (float64x2_t)vdupq_n_s64(0x408FF80000000000uLL));
            __asm { FMOV            V20.2D, #0.25 }
            v222 = vadd_s32(vcvt_s32_f32(vrnda_f32(vcvt_f32_f64(vmulq_f64(v223, _Q20)))), (int32x2_t)0x20000000200);
          }
          else
          {
            v222 = 0;
          }
          *v43 = *v43 & ~(1023 << v205) | ((int)((_D27 * 0.614230588 + _D25 * 0.182585882 + _D26 * 0.0620070588)
                                               * 1023.0
                                               + 64.0) << v205);
          if (v188 == 2)
            v188 = 0;
          else
            ++v188;
          if ((v92 & 1) != 0)
          {
            v225 = *((unsigned __int8 *)&v245 + v41);
            *v35 = *v35 & ~(1023 << v225) | (v222.i32[0] << v225);
            v226 = (__int32 *)((char *)v35 + ((v225 >> 2) & 0x3C));
            if (v41 == 2)
              v227 = 0;
            else
              v227 = v41 + 1;
            v228 = *((unsigned __int8 *)&v245 + v227);
            *v226 = *v226 & ~(1023 << v228) | (v222.i32[1] << v228);
            v35 = (__int32 *)((char *)v226 + ((v228 >> 2) & 0x3C));
            if (v227 == 2)
              v41 = 0;
            else
              v41 = v227 + 1;
          }
          v186 += 4;
          v40 += v205 >> 4;
          v187 += 4;
          ++v92;
          v185 += 4;
          v43 += v205 >> 4;
        }
        while (v14 != v92);
      }
      v32 = &v242[v238];
      v33 = &v241[v238];
      v26 += 4 * v237;
      ++v19;
      v27 = &v244[v237];
      v30 = v243 + v235;
      v34 = v240 + v235;
      v35 = &v239[v236];
    }
    while (v19 != v23);
  }
  return 0;
}

uint64_t vt_Copy_RGhA_p420ITU601(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, _QWORD *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _WORD *v32;
  _WORD *v33;
  uint64_t v34;
  __int32 *v35;
  uint64_t v36;
  uint64_t v37;
  __int16 *v38;
  __int16 *v39;
  int *v40;
  unsigned int v41;
  unsigned int v42;
  int *v43;
  int *v44;
  int *v45;
  __int16 *v46;
  __int16 *v47;
  __int16 *v49;
  unint64_t v64;
  __int16 *v65;
  __int16 *v66;
  __int16 *v68;
  int32x2_t v80;
  float64x2_t v81;
  unint64_t v83;
  __int32 *v84;
  unsigned int v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  int v112;
  int v117;
  int v119;
  int v120;
  double v122;
  double v123;
  double v126;
  double v129;
  double v130;
  int v136;
  double v137;
  double v143;
  double v145;
  double v148;
  int v152;
  int *v154;
  int v155;
  unsigned int *v156;
  int v158;
  int *v159;
  int v168;
  unsigned int v169;
  unsigned int v172;
  unsigned int v174;
  unsigned int v175;
  unsigned int v179;
  float v180;
  unsigned int v181;
  float v182;
  __int16 *v183;
  __int16 *v184;
  uint64_t v185;
  __int16 *v186;
  __int16 *v187;
  unsigned int v188;
  __int16 *v189;
  __int16 *v190;
  __int16 *v191;
  __int16 *v193;
  unint64_t v205;
  __int16 *v206;
  __int16 *v207;
  __int16 *v208;
  __int16 *v210;
  int32x2_t v222;
  float64x2_t v223;
  unint64_t v225;
  __int32 *v226;
  unsigned int v227;
  unint64_t v228;
  unint64_t v230;
  unsigned int v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v238;
  __int32 *v239;
  uint64_t v240;
  _WORD *v241;
  _WORD *v242;
  uint64_t v243;
  int *v244;
  int v245;

  v245 = 1313280;
  v8 = *(_QWORD *)(a2 + 40);
  v9 = (v8 & 1) + v8;
  v10 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v11 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v12 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v13 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v10 >= v13 - v12)
    v14 = v13 - v12;
  else
    v14 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v10;
  if ((unint64_t)((*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE) - v9 >= ((*(_DWORD *)(a6 + 24)
                                                                                    + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE)
                                                                                  - v11)
    v15 = ((*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE) - v11;
  else
    v15 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE) - v9;
  v16 = v13 % 6;
  _CF = v14 >= v16;
  v18 = v14 - v16;
  if (!_CF)
    v18 = 0;
  if (v15 >= 2)
  {
    v19 = 0;
    v20 = v12 / 3;
    v21 = v12 % 3;
    v22 = 6 * (v12 / 6) - v12 + 6;
    v23 = v15 >> 1;
    v24 = a8[1];
    v25 = a7[1] + v24 * (v11 >> 1);
    v26 = *a7 + *a8 * v11 + 4 * v20;
    v27 = (int *)(v26 + *a8);
    v28 = *a3;
    v29 = *a4;
    v30 = *a3 + *a4 * v9;
    v31 = 8 * v10;
    v32 = (_WORD *)(v30 + 8 * v10);
    v33 = (_WORD *)((char *)v32 + *a4);
    v238 = v29 & 0x7FFFFFFFFFFFFFFFLL;
    v237 = (*a8 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    v236 = v24 >> 2;
    v235 = 2 * v29;
    v34 = v28 + v29 + v29 * (v8 + (v8 & 1));
    v35 = (__int32 *)(v25 + 4 * v20);
    v232 = v14;
    v231 = v21;
    v230 = v23;
    do
    {
      v36 = 0;
      v240 = v34;
      v241 = v33;
      v242 = v32;
      v243 = v30;
      v37 = v30;
      v38 = v32;
      v39 = v33;
      v40 = (int *)v26;
      v41 = v21;
      v42 = v21;
      v239 = v35;
      v244 = v27;
      v43 = v27;
      do
      {
        v44 = v43;
        v45 = v40;
        if ((v36 & 1) != 0)
        {
          v49 = (__int16 *)(v37 + v31 - 8);
          v46 = v38 - 3;
          v47 = v38 - 2;
          _H19 = *(_WORD *)(v37 + v31);
          __asm { FCVT            S19, H19 }
          _H20 = *(_WORD *)(v37 + v31 + 2);
          __asm { FCVT            S20, H20 }
          _H21 = *(_WORD *)(v37 + v31 + 4);
          __asm { FCVT            S21, H21 }
        }
        else
        {
          v46 = (__int16 *)(v37 + v31 + 2);
          v47 = (__int16 *)(v37 + v31 + 4);
          _S19 = 0.0;
          v49 = v38;
          _S20 = 0.0;
          _S21 = 0.0;
        }
        _H23 = *v47;
        _H24 = *v46;
        _H22 = *v49;
        __asm
        {
          FCVT            D22, H22
          FCVT            D24, H24
          FCVT            D23, H23
        }
        v64 = *((unsigned __int8 *)&v245 + v42);
        *v45 = ((int)((_D24 * 0.504129412 + _D22 * 0.256788235 + _D23 * 0.0979058824) * 1023.0 + 64.0) << v64) | *v45 & ~(1023 << v64);
        if ((v36 & 1) != 0)
        {
          v68 = (__int16 *)(v34 + v31 - 8);
          v65 = v39 - 3;
          v66 = v39 - 2;
          _H25 = *(_WORD *)(v34 + v31);
          __asm { FCVT            S28, H25 }
          _H25 = *(_WORD *)(v34 + v31 + 2);
          __asm { FCVT            S29, H25 }
          _H25 = *(_WORD *)(v34 + v31 + 4);
          __asm { FCVT            S30, H25 }
        }
        else
        {
          v65 = (__int16 *)(v34 + v31 + 2);
          v66 = (__int16 *)(v34 + v31 + 4);
          _S28 = 0.0;
          v68 = v39;
          _S29 = 0.0;
          _S30 = 0.0;
        }
        _H26 = *v66;
        _H27 = *v65;
        _H25 = *v68;
        __asm
        {
          FCVT            D25, H25
          FCVT            D27, H27
          FCVT            D26, H26
        }
        if ((v36 & 1) != 0)
        {
          v81 = vmulq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_1928DFD90, _D24), (float64x2_t)xmmword_1928DFDA0, _D22), (float64x2_t)xmmword_1928DFDB0, _D23), (float64x2_t)xmmword_1928DFDA0, _S19), (float64x2_t)xmmword_1928DFD90,
                                  _S20),
                                (float64x2_t)xmmword_1928DFDB0,
                                _S21),
                              (float64x2_t)xmmword_1928DFDA0,
                              _D25),
                            (float64x2_t)xmmword_1928DFD90,
                            _D27),
                          (float64x2_t)xmmword_1928DFDB0,
                          _D26),
                        (float64x2_t)xmmword_1928DFDA0,
                        _S28),
                      (float64x2_t)xmmword_1928DFD90,
                      _S29),
                    (float64x2_t)xmmword_1928DFDB0,
                    _S30),
                  (float64x2_t)vdupq_n_s64(0x408FF80000000000uLL));
          __asm { FMOV            V20.2D, #0.25 }
          v80 = vadd_s32(vcvt_s32_f32(vrnda_f32(vcvt_f32_f64(vmulq_f64(v81, _Q20)))), (int32x2_t)0x20000000200);
        }
        else
        {
          v80 = 0;
        }
        *v43 = *v43 & ~(1023 << v64) | ((int)((_D27 * 0.504129412 + _D25 * 0.256788235 + _D26 * 0.0979058824) * 1023.0
                                            + 64.0) << v64);
        if (v42 == 2)
          v42 = 0;
        else
          ++v42;
        if ((v36 & 1) != 0)
        {
          v83 = *((unsigned __int8 *)&v245 + v41);
          *v35 = *v35 & ~(1023 << v83) | (v80.i32[0] << v83);
          v84 = (__int32 *)((char *)v35 + ((v83 >> 2) & 0x3C));
          if (v41 == 2)
            v85 = 0;
          else
            v85 = v41 + 1;
          v86 = *((unsigned __int8 *)&v245 + v85);
          *v84 = *v84 & ~(1023 << v86) | (v80.i32[1] << v86);
          v35 = (__int32 *)((char *)v84 + ((v86 >> 2) & 0x3C));
          if (v85 == 2)
            v41 = 0;
          else
            v41 = v85 + 1;
        }
        v38 += 4;
        v40 = &v45[v64 >> 4];
        v39 += 4;
        ++v36;
        v37 += 8;
        v43 += v64 >> 4;
        v34 += 8;
      }
      while (v22 != v36);
      if (v22 >= v18)
      {
        v184 = (__int16 *)(v37 + v31);
        v183 = (__int16 *)(v34 + v31);
        v92 = v22;
      }
      else
      {
        v233 = v26;
        v234 = v19;
        v87 = 0;
        v88 = (v64 >> 2) & 0x3C;
        v89 = (char *)v44 + v88;
        v90 = (char *)v45 + v88;
        v91 = v31;
        v92 = v22;
        do
        {
          _H19 = *(_WORD *)(v37 + v91);
          _H20 = *(_WORD *)(v37 + v91 + 2);
          _H21 = *(_WORD *)(v37 + v91 + 4);
          __asm
          {
            FCVT            D27, H19
            FCVT            D28, H20
            FCVT            D29, H21
          }
          _H21 = *(_WORD *)(v37 + v91 + 8);
          _H22 = *(_WORD *)(v37 + v91 + 10);
          _H23 = *(_WORD *)(v37 + v91 + 12);
          __asm
          {
            FCVT            D30, H21
            FCVT            D31, H22
            FCVT            D26, H23
          }
          _H22 = *(_WORD *)(v34 + v91);
          _H23 = *(_WORD *)(v34 + v91 + 2);
          _H8 = *(_WORD *)(v34 + v91 + 4);
          __asm
          {
            FCVT            D25, H22
            FCVT            D24, H23
            FCVT            D23, H8
          }
          _H22 = *(_WORD *)(v34 + v91 + 8);
          v112 = (int)((_D28 * 0.504129412 + _D27 * 0.256788235 + _D29 * 0.0979058824) * 1023.0 + 64.0);
          _H20 = *(_WORD *)(v34 + v91 + 10);
          _H9 = *(_WORD *)(v34 + v91 + 12);
          __asm
          {
            FCVT            D22, H22
            FCVT            D20, H20
          }
          v117 = (int)((_D31 * 0.504129412 + _D30 * 0.256788235 + _D26 * 0.0979058824) * 1023.0 + 64.0);
          __asm { FCVT            D21, H9 }
          v119 = (int)((_D24 * 0.504129412 + _D25 * 0.256788235 + _D23 * 0.0979058824) * 1023.0 + 64.0);
          v120 = (int)((_D20 * 0.504129412 + _D22 * 0.256788235 + _D21 * 0.0979058824) * 1023.0 + 64.0);
          _D8 = _D28 * -0.29099269 + _D27 * -0.148222996 + _D29 * 0.439215686 + _D30 * -0.148222996;
          v122 = _D28 * -0.367788675 + _D27 * 0.439215686 + _D29 * -0.0714270118 + _D30 * 0.439215686;
          v123 = _D8 + _D31 * -0.29099269;
          _D27 = v122 + _D31 * -0.367788675;
          LOWORD(_D29) = *(_WORD *)(v37 + v91 + 16);
          LOWORD(_D30) = *(_WORD *)(v37 + v91 + 18);
          LOWORD(_D31) = *(_WORD *)(v37 + v91 + 20);
          __asm { FCVT            D29, H29 }
          v126 = v123 + _D26 * 0.439215686;
          __asm
          {
            FCVT            D30, H30
            FCVT            D31, H31
          }
          v129 = _D27 + _D26 * -0.0714270118;
          LOWORD(_D27) = *(_WORD *)(v37 + v91 + 24);
          LOWORD(_D8) = *(_WORD *)(v37 + v91 + 26);
          v130 = v126 + _D25 * -0.148222996;
          _H9 = *(_WORD *)(v37 + v91 + 28);
          __asm
          {
            FCVT            D27, H27
            FCVT            D8, H8
          }
          _D25 = v129 + _D25 * 0.439215686;
          __asm { FCVT            D26, H9 }
          v136 = (int)((_D8 * 0.504129412 + _D27 * 0.256788235 + _D26 * 0.0979058824) * 1023.0 + 64.0);
          v137 = v130 + _D24 * -0.29099269;
          _H9 = *(_WORD *)(v34 + v91 + 16);
          _H10 = *(_WORD *)(v34 + v91 + 18);
          _H11 = *(_WORD *)(v34 + v91 + 20);
          __asm
          {
            FCVT            D9, H9
            FCVT            D10, H10
          }
          v143 = _D25 + _D24 * -0.367788675;
          __asm { FCVT            D11, H11 }
          v145 = v137 + _D23 * 0.439215686;
          LOWORD(_D25) = *(_WORD *)(v34 + v91 + 24);
          _H12 = *(_WORD *)(v34 + v91 + 26);
          _H13 = *(_WORD *)(v34 + v91 + 28);
          v148 = v143 + _D23 * -0.0714270118;
          __asm
          {
            FCVT            D24, H25
            FCVT            D25, H12
            FCVT            D13, H13
          }
          v152 = (int)((_D25 * 0.504129412 + _D24 * 0.256788235 + _D13 * 0.0979058824) * 1023.0 + 64.0);
          _D28 = v145 + _D22 * -0.148222996 + _D20 * -0.29099269;
          v154 = (int *)&v89[v87];
          v155 = v112 | (v117 << 10);
          v156 = (unsigned int *)&v35[v87 / 4];
          _D20 = v148 + _D22 * 0.439215686 + _D20 * -0.367788675 + _D21 * -0.0714270118;
          v158 = v119 | (v120 << 10);
          v159 = (int *)&v90[v87];
          *v159 = v155 | ((int)((_D30 * 0.504129412 + _D29 * 0.256788235 + _D31 * 0.0979058824) * 1023.0 + 64.0) << 20);
          *v154 = v158 | ((int)((_D10 * 0.504129412 + _D9 * 0.256788235 + _D11 * 0.0979058824) * 1023.0 + 64.0) << 20);
          _D23 = (_D30 * -0.29099269
                + _D29 * -0.148222996
                + _D31 * 0.439215686
                + _D27 * -0.148222996
                + _D8 * -0.29099269
                + _D26 * 0.439215686
                + _D9 * -0.148222996
                + _D10 * -0.29099269
                + _D11 * 0.439215686
                + _D24 * -0.148222996
                + _D25 * -0.29099269
                + _D13 * 0.439215686)
               * 1023.0
               * 0.25;
          _D22 = (_D30 * -0.367788675
                + _D29 * 0.439215686
                + _D31 * -0.0714270118
                + _D27 * 0.439215686
                + _D8 * -0.367788675
                + _D26 * -0.0714270118
                + _D9 * 0.439215686
                + _D10 * -0.367788675
                + _D11 * -0.0714270118
                + _D24 * 0.439215686
                + _D25 * -0.367788675
                + _D13 * -0.0714270118)
               * 1023.0;
          LOWORD(_D24) = *(_WORD *)(v37 + v91 + 32);
          LOWORD(_D25) = *(_WORD *)(v37 + v91 + 34);
          LOWORD(_D26) = *(_WORD *)(v37 + v91 + 36);
          __asm
          {
            FCVT            D24, H24
            FCVT            D25, H25
            FCVT            D26, H26
          }
          *(float *)&_D21 = (_D28 + _D21 * 0.439215686) * 1023.0 * 0.25;
          LOWORD(_D27) = *(_WORD *)(v37 + v91 + 40);
          LOWORD(_D28) = *(_WORD *)(v37 + v91 + 42);
          *(float *)&_D20 = _D20 * 1023.0 * 0.25;
          LOWORD(_D29) = *(_WORD *)(v37 + v91 + 44);
          __asm
          {
            FCVT            D27, H27
            FCVT            D28, H28
          }
          *(float *)&_D23 = _D23;
          __asm { FCVT            D29, H29 }
          *(float *)&_D22 = _D22 * 0.25;
          v168 = v136 | ((int)((_D25 * 0.504129412 + _D24 * 0.256788235 + _D26 * 0.0979058824) * 1023.0 + 64.0) << 10) | ((int)((_D28 * 0.504129412 + _D27 * 0.256788235 + _D29 * 0.0979058824) * 1023.0 + 64.0) << 20);
          LOWORD(_D30) = *(_WORD *)(v34 + v91 + 32);
          LOWORD(_D31) = *(_WORD *)(v34 + v91 + 34);
          v169 = llroundf(*(float *)&_D21);
          LOWORD(_D21) = *(_WORD *)(v34 + v91 + 36);
          __asm
          {
            FCVT            D30, H30
            FCVT            D31, H31
          }
          v172 = llroundf(*(float *)&_D20);
          __asm { FCVT            D21, H21 }
          v174 = llroundf(*(float *)&_D23);
          LOWORD(_D20) = *(_WORD *)(v34 + v91 + 40);
          LOWORD(_D23) = *(_WORD *)(v34 + v91 + 42);
          v175 = llroundf(*(float *)&_D22);
          LOWORD(_D22) = *(_WORD *)(v34 + v91 + 44);
          __asm
          {
            FCVT            D20, H20
            FCVT            D23, H23
            FCVT            D22, H22
          }
          v179 = v175 + 512;
          v180 = (_D25 * -0.29099269
                + _D24 * -0.148222996
                + _D26 * 0.439215686
                + _D27 * -0.148222996
                + _D28 * -0.29099269
                + _D29 * 0.439215686
                + _D30 * -0.148222996
                + _D31 * -0.29099269
                + _D21 * 0.439215686
                + _D20 * -0.148222996
                + _D23 * -0.29099269
                + _D22 * 0.439215686)
               * 1023.0
               * 0.25;
          v181 = llroundf(v180);
          *v156 = ((v172 << 10) + 0x80000) | (v169 + 512) | ((v174 << 20) + 0x20000000);
          v182 = (_D25 * -0.367788675
                + _D24 * 0.439215686
                + _D26 * -0.0714270118
                + _D27 * 0.439215686
                + _D28 * -0.367788675
                + _D29 * -0.0714270118
                + _D30 * 0.439215686
                + _D31 * -0.367788675
                + _D21 * -0.0714270118
                + _D20 * 0.439215686
                + _D23 * -0.367788675
                + _D22 * -0.0714270118)
               * 1023.0
               * 0.25;
          v159[1] = v168;
          v154[1] = v152 | ((int)((_D31 * 0.504129412 + _D30 * 0.256788235 + _D21 * 0.0979058824) * 1023.0 + 64.0) << 10) | ((int)((_D23 * 0.504129412 + _D20 * 0.256788235 + _D22 * 0.0979058824) * 1023.0 + 64.0) << 20);
          v156[1] = ((llroundf(v182) << 20) + 0x20000000) | v179 | ((v181 << 10) + 0x80000);
          v92 += 6;
          v87 += 8;
          v91 += 48;
        }
        while (v92 < v18);
        v14 = v232;
        v43 = (int *)((char *)v44 + ((v64 >> 2) & 0x3C) + v87);
        v35 = (__int32 *)((char *)v35 + v87);
        v40 = (int *)((char *)v45 + ((v64 >> 2) & 0x3C) + v87);
        v183 = (__int16 *)(v34 + v91);
        v184 = (__int16 *)(v37 + v91);
        v26 = v233;
        v19 = v234;
        v21 = v231;
        v23 = v230;
      }
      if (v92 < v14)
      {
        v185 = 0;
        v186 = v184;
        v187 = v183;
        v188 = v18 % 3;
        do
        {
          v189 = &v184[v185];
          if ((v92 & 1) != 0)
          {
            v193 = v189 - 4;
            v190 = v186 - 3;
            v191 = v186 - 2;
            _H19 = *v189;
            __asm { FCVT            S19, H19 }
            _H20 = v189[1];
            __asm { FCVT            S20, H20 }
            _H21 = v189[2];
            __asm { FCVT            S21, H21 }
          }
          else
          {
            v190 = v189 + 1;
            v191 = v189 + 2;
            _S19 = 0.0;
            v193 = v186;
            _S20 = 0.0;
            _S21 = 0.0;
          }
          _H23 = *v191;
          _H24 = *v190;
          _H22 = *v193;
          __asm
          {
            FCVT            D22, H22
            FCVT            D24, H24
            FCVT            D23, H23
          }
          v205 = *((unsigned __int8 *)&v245 + v188);
          *v40 = ((int)((_D24 * 0.504129412 + _D22 * 0.256788235 + _D23 * 0.0979058824) * 1023.0 + 64.0) << v205) | *v40 & ~(1023 << v205);
          v206 = &v183[v185];
          if ((v92 & 1) != 0)
          {
            v210 = v206 - 4;
            v207 = v187 - 3;
            v208 = v187 - 2;
            _H25 = *v206;
            __asm { FCVT            S28, H25 }
            _H25 = v206[1];
            __asm { FCVT            S29, H25 }
            _H25 = v206[2];
            __asm { FCVT            S30, H25 }
          }
          else
          {
            v207 = v206 + 1;
            v208 = v206 + 2;
            _S28 = 0.0;
            v210 = v187;
            _S29 = 0.0;
            _S30 = 0.0;
          }
          _H26 = *v208;
          _H27 = *v207;
          _H25 = *v210;
          __asm
          {
            FCVT            D25, H25
            FCVT            D27, H27
            FCVT            D26, H26
          }
          if ((v92 & 1) != 0)
          {
            v223 = vmulq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_1928DFD90, _D24), (float64x2_t)xmmword_1928DFDA0, _D22), (float64x2_t)xmmword_1928DFDB0, _D23), (float64x2_t)xmmword_1928DFDA0, _S19), (float64x2_t)xmmword_1928DFD90,
                                     _S20),
                                   (float64x2_t)xmmword_1928DFDB0,
                                   _S21),
                                 (float64x2_t)xmmword_1928DFDA0,
                                 _D25),
                               (float64x2_t)xmmword_1928DFD90,
                               _D27),
                             (float64x2_t)xmmword_1928DFDB0,
                             _D26),
                           (float64x2_t)xmmword_1928DFDA0,
                           _S28),
                         (float64x2_t)xmmword_1928DFD90,
                         _S29),
                       (float64x2_t)xmmword_1928DFDB0,
                       _S30),
                     (float64x2_t)vdupq_n_s64(0x408FF80000000000uLL));
            __asm { FMOV            V20.2D, #0.25 }
            v222 = vadd_s32(vcvt_s32_f32(vrnda_f32(vcvt_f32_f64(vmulq_f64(v223, _Q20)))), (int32x2_t)0x20000000200);
          }
          else
          {
            v222 = 0;
          }
          *v43 = *v43 & ~(1023 << v205) | ((int)((_D27 * 0.504129412 + _D25 * 0.256788235 + _D26 * 0.0979058824)
                                               * 1023.0
                                               + 64.0) << v205);
          if (v188 == 2)
            v188 = 0;
          else
            ++v188;
          if ((v92 & 1) != 0)
          {
            v225 = *((unsigned __int8 *)&v245 + v41);
            *v35 = *v35 & ~(1023 << v225) | (v222.i32[0] << v225);
            v226 = (__int32 *)((char *)v35 + ((v225 >> 2) & 0x3C));
            if (v41 == 2)
              v227 = 0;
            else
              v227 = v41 + 1;
            v228 = *((unsigned __int8 *)&v245 + v227);
            *v226 = *v226 & ~(1023 << v228) | (v222.i32[1] << v228);
            v35 = (__int32 *)((char *)v226 + ((v228 >> 2) & 0x3C));
            if (v227 == 2)
              v41 = 0;
            else
              v41 = v227 + 1;
          }
          v186 += 4;
          v40 += v205 >> 4;
          v187 += 4;
          ++v92;
          v185 += 4;
          v43 += v205 >> 4;
        }
        while (v14 != v92);
      }
      v32 = &v242[v238];
      v33 = &v241[v238];
      v26 += 4 * v237;
      ++v19;
      v27 = &v244[v237];
      v30 = v243 + v235;
      v34 = v240 + v235;
      v35 = &v239[v236];
    }
    while (v19 != v23);
  }
  return 0;
}

uint64_t vt_Copy_RGhA_pf20ITU2020(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t a5, uint64_t a6, _QWORD *a7, _QWORD *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _WORD *v31;
  _WORD *v32;
  uint64_t v33;
  __int32 *v34;
  uint64_t v35;
  uint64_t v36;
  __int16 *v37;
  _DWORD *v38;
  unsigned int v39;
  unsigned int v40;
  int *v41;
  int *v42;
  _DWORD *v43;
  __int16 *v44;
  __int16 *v45;
  __int16 *v47;
  unint64_t v62;
  __int16 *v63;
  __int16 *v64;
  __int16 *v66;
  int32x2_t v78;
  float64x2_t v79;
  unint64_t v81;
  __int32 *v82;
  unsigned int v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  int v110;
  int v115;
  int v117;
  int v118;
  double v120;
  double v121;
  double v124;
  double v127;
  double v128;
  int v134;
  double v135;
  double v141;
  double v143;
  double v146;
  int v150;
  int *v152;
  int v153;
  unsigned int *v154;
  int v156;
  int *v157;
  int v166;
  unsigned int v167;
  unsigned int v170;
  unsigned int v172;
  unsigned int v173;
  int v177;
  uint64_t v178;
  __int16 *v179;
  __int16 *v180;
  uint64_t v181;
  __int16 *v182;
  __int16 *v183;
  unsigned int v184;
  __int16 *v185;
  __int16 *v186;
  __int16 *v188;
  unint64_t v200;
  __int16 *v201;
  __int16 *v202;
  __int16 *v204;
  int32x2_t v216;
  float64x2_t v217;
  unint64_t v219;
  __int32 *v220;
  unsigned int v221;
  unint64_t v222;
  unint64_t v224;
  unsigned int v225;
  unint64_t v226;
  int *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  __int32 *v234;
  uint64_t v235;
  _WORD *v236;
  _WORD *v237;
  uint64_t v238;
  int v239;

  v239 = 1313280;
  v8 = *(_QWORD *)(a2 + 40);
  v9 = (v8 & 1) + v8;
  v10 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v11 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v12 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v13 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v14 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v10;
  if (v14 >= v13 - v12)
    v14 = v13 - v12;
  if ((unint64_t)((*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE) - v9 >= ((*(_DWORD *)(a6 + 24)
                                                                                    + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE)
                                                                                  - v11)
    v15 = ((*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE) - v11;
  else
    v15 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE) - v9;
  v16 = v13 % 6;
  _CF = v14 >= v16;
  v18 = v14 - v16;
  if (!_CF)
    v18 = 0;
  if (v15 >= 2)
  {
    v19 = 0;
    v20 = v12 / 3;
    v21 = v12 % 3;
    v22 = 6 * (v12 / 6) - v12 + 6;
    v23 = v15 >> 1;
    v24 = a8[1];
    v25 = a7[1] + v24 * (v11 >> 1);
    v26 = *a7 + *a8 * v11 + 4 * v20;
    v27 = (int *)(v26 + *a8);
    v28 = *a3;
    v29 = *a3 + *a4 * v9;
    v30 = 8 * v10;
    v31 = (_WORD *)(v29 + 8 * v10);
    v32 = (_WORD *)((char *)v31 + *a4);
    v233 = *a4 & 0x7FFFFFFFFFFFFFFFLL;
    v232 = (*a8 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    v231 = v24 >> 2;
    v230 = 2 * *a4;
    v33 = v28 + *a4 + *a4 * (v8 + (v8 & 1));
    v34 = (__int32 *)(v25 + 4 * v20);
    v225 = v21;
    v224 = v23;
    do
    {
      v35 = 0;
      v235 = v33;
      v236 = v32;
      v237 = v31;
      v238 = v29;
      v36 = v29;
      v37 = v31;
      v38 = (_DWORD *)v26;
      v39 = v21;
      v40 = v21;
      v234 = v34;
      v41 = v27;
      do
      {
        v42 = v41;
        v43 = v38;
        if ((v35 & 1) != 0)
        {
          v47 = (__int16 *)(v36 + v30 - 8);
          v44 = v37 - 3;
          v45 = v37 - 2;
          _H20 = *(_WORD *)(v36 + v30);
          __asm { FCVT            S20, H20 }
          _H21 = *(_WORD *)(v36 + v30 + 2);
          __asm { FCVT            S21, H21 }
          _H22 = *(_WORD *)(v36 + v30 + 4);
          __asm { FCVT            S22, H22 }
        }
        else
        {
          v44 = (__int16 *)(v36 + v30 + 2);
          v45 = (__int16 *)(v36 + v30 + 4);
          _S20 = 0.0;
          v47 = v37;
          _S21 = 0.0;
          _S22 = 0.0;
        }
        _H24 = *v45;
        _H25 = *v44;
        _H23 = *v47;
        __asm
        {
          FCVT            D23, H23
          FCVT            D25, H25
          FCVT            D24, H24
        }
        v62 = *((unsigned __int8 *)&v239 + v40);
        *v38 = ((int)((_D25 * 0.677998 + _D23 * 0.2627 + _D24 * 0.059302) * 1023.0 + 0.0) << v62) | *v38 & ~(1023 << v62);
        if ((v35 & 1) != 0)
        {
          v66 = (__int16 *)(v33 + v30 - 8);
          v63 = v32 - 3;
          v64 = v32 - 2;
          _H26 = *(_WORD *)(v33 + v30);
          __asm { FCVT            S29, H26 }
          _H26 = *(_WORD *)(v33 + v30 + 2);
          __asm { FCVT            S30, H26 }
          _H26 = *(_WORD *)(v33 + v30 + 4);
          __asm { FCVT            S31, H26 }
        }
        else
        {
          v63 = (__int16 *)(v33 + v30 + 2);
          v64 = (__int16 *)(v33 + v30 + 4);
          _S29 = 0.0;
          v66 = v32;
          _S30 = 0.0;
          _S31 = 0.0;
        }
        _H27 = *v64;
        _H28 = *v63;
        _H26 = *v66;
        __asm
        {
          FCVT            D26, H26
          FCVT            D28, H28
          FCVT            D27, H27
        }
        if ((v35 & 1) != 0)
        {
          v79 = vmulq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_1928DFDC0, _D25), (float64x2_t)xmmword_1928DFDD0, _D23), (float64x2_t)xmmword_1928DFDE0, _D24), (float64x2_t)xmmword_1928DFDD0, _S20), (float64x2_t)xmmword_1928DFDC0,
                                  _S21),
                                (float64x2_t)xmmword_1928DFDE0,
                                _S22),
                              (float64x2_t)xmmword_1928DFDD0,
                              _D26),
                            (float64x2_t)xmmword_1928DFDC0,
                            _D28),
                          (float64x2_t)xmmword_1928DFDE0,
                          _D27),
                        (float64x2_t)xmmword_1928DFDD0,
                        _S29),
                      (float64x2_t)xmmword_1928DFDC0,
                      _S30),
                    (float64x2_t)xmmword_1928DFDE0,
                    _S31),
                  (float64x2_t)vdupq_n_s64(0x408FF80000000000uLL));
          __asm { FMOV            V21.2D, #0.25 }
          v78 = vadd_s32(vcvt_s32_f32(vrnda_f32(vcvt_f32_f64(vmulq_f64(v79, _Q21)))), (int32x2_t)0x20000000200);
        }
        else
        {
          v78 = 0;
        }
        *v42 = *v42 & ~(1023 << v62) | ((int)((_D28 * 0.677998 + _D26 * 0.2627 + _D27 * 0.059302) * 1023.0 + 0.0) << v62);
        if (v40 == 2)
          v40 = 0;
        else
          ++v40;
        if ((v35 & 1) != 0)
        {
          v81 = *((unsigned __int8 *)&v239 + v39);
          *v34 = *v34 & ~(1023 << v81) | (v78.i32[0] << v81);
          v82 = (__int32 *)((char *)v34 + ((v81 >> 2) & 0x3C));
          if (v39 == 2)
            v83 = 0;
          else
            v83 = v39 + 1;
          v84 = *((unsigned __int8 *)&v239 + v83);
          *v82 = *v82 & ~(1023 << v84) | (v78.i32[1] << v84);
          v34 = (__int32 *)((char *)v82 + ((v84 >> 2) & 0x3C));
          if (v83 == 2)
            v39 = 0;
          else
            v39 = v83 + 1;
        }
        v37 += 4;
        v38 += v62 >> 4;
        v32 += 4;
        ++v35;
        v36 += 8;
        v41 = &v42[v62 >> 4];
        v33 += 8;
      }
      while (v22 != v35);
      if (v22 >= v18)
      {
        v180 = (__int16 *)(v36 + v30);
        v179 = (__int16 *)(v33 + v30);
        v90 = v22;
      }
      else
      {
        v227 = v27;
        v228 = v26;
        v229 = v19;
        v85 = 0;
        v226 = v62 >> 2;
        v86 = (v62 >> 2) & 0x3C;
        v87 = (char *)v42 + v86;
        v88 = (char *)v43 + v86;
        v89 = v30;
        v90 = v22;
        do
        {
          _H20 = *(_WORD *)(v36 + v89);
          _H21 = *(_WORD *)(v36 + v89 + 2);
          _H22 = *(_WORD *)(v36 + v89 + 4);
          __asm
          {
            FCVT            D27, H20
            FCVT            D28, H21
            FCVT            D29, H22
          }
          _H21 = *(_WORD *)(v36 + v89 + 8);
          _H22 = *(_WORD *)(v36 + v89 + 10);
          _H23 = *(_WORD *)(v36 + v89 + 12);
          __asm
          {
            FCVT            D30, H21
            FCVT            D31, H22
            FCVT            D26, H23
          }
          _H22 = *(_WORD *)(v33 + v89);
          _H23 = *(_WORD *)(v33 + v89 + 2);
          _H8 = *(_WORD *)(v33 + v89 + 4);
          __asm
          {
            FCVT            D25, H22
            FCVT            D24, H23
            FCVT            D23, H8
          }
          _H22 = *(_WORD *)(v33 + v89 + 8);
          v110 = (int)((_D28 * 0.677998 + _D27 * 0.2627 + _D29 * 0.059302) * 1023.0 + 0.0);
          _H20 = *(_WORD *)(v33 + v89 + 10);
          _H9 = *(_WORD *)(v33 + v89 + 12);
          __asm
          {
            FCVT            D22, H22
            FCVT            D20, H20
          }
          v115 = (int)((_D31 * 0.677998 + _D30 * 0.2627 + _D26 * 0.059302) * 1023.0 + 0.0);
          __asm { FCVT            D21, H9 }
          v117 = (int)((_D24 * 0.677998 + _D25 * 0.2627 + _D23 * 0.059302) * 1023.0 + 0.0);
          v118 = (int)((_D20 * 0.677998 + _D22 * 0.2627 + _D21 * 0.059302) * 1023.0 + 0.0);
          _D8 = _D28 * -0.36037 + _D27 * -0.13963 + _D29 * 0.5 + _D30 * -0.13963;
          v120 = _D28 * -0.459785 + _D27 * 0.5 + _D29 * -0.040215 + _D30 * 0.5;
          v121 = _D8 + _D31 * -0.36037;
          _D27 = v120 + _D31 * -0.459785;
          LOWORD(_D29) = *(_WORD *)(v36 + v89 + 16);
          LOWORD(_D30) = *(_WORD *)(v36 + v89 + 18);
          LOWORD(_D31) = *(_WORD *)(v36 + v89 + 20);
          __asm { FCVT            D29, H29 }
          v124 = v121 + _D26 * 0.5;
          __asm
          {
            FCVT            D30, H30
            FCVT            D31, H31
          }
          v127 = _D27 + _D26 * -0.040215;
          LOWORD(_D27) = *(_WORD *)(v36 + v89 + 24);
          LOWORD(_D8) = *(_WORD *)(v36 + v89 + 26);
          v128 = v124 + _D25 * -0.13963;
          _H9 = *(_WORD *)(v36 + v89 + 28);
          __asm
          {
            FCVT            D27, H27
            FCVT            D8, H8
          }
          _D25 = v127 + _D25 * 0.5;
          __asm { FCVT            D26, H9 }
          v134 = (int)((_D8 * 0.677998 + _D27 * 0.2627 + _D26 * 0.059302) * 1023.0 + 0.0);
          v135 = v128 + _D24 * -0.36037;
          _H9 = *(_WORD *)(v33 + v89 + 16);
          _H10 = *(_WORD *)(v33 + v89 + 18);
          _H11 = *(_WORD *)(v33 + v89 + 20);
          __asm
          {
            FCVT            D9, H9
            FCVT            D10, H10
          }
          v141 = _D25 + _D24 * -0.459785;
          __asm { FCVT            D11, H11 }
          v143 = v135 + _D23 * 0.5;
          LOWORD(_D25) = *(_WORD *)(v33 + v89 + 24);
          _H12 = *(_WORD *)(v33 + v89 + 26);
          _H13 = *(_WORD *)(v33 + v89 + 28);
          v146 = v141 + _D23 * -0.040215;
          __asm
          {
            FCVT            D24, H25
            FCVT            D25, H12
            FCVT            D13, H13
          }
          v150 = (int)((_D25 * 0.677998 + _D24 * 0.2627 + _D13 * 0.059302) * 1023.0 + 0.0);
          _D28 = v143 + _D22 * -0.13963 + _D20 * -0.36037;
          v152 = (int *)&v87[v85];
          v153 = v110 | (v115 << 10);
          v154 = (unsigned int *)&v34[v85 / 4];
          _D20 = v146 + _D22 * 0.5 + _D20 * -0.459785 + _D21 * -0.040215;
          v156 = v117 | (v118 << 10);
          v157 = (int *)&v88[v85];
          *v157 = v153 | ((int)((_D30 * 0.677998 + _D29 * 0.2627 + _D31 * 0.059302) * 1023.0 + 0.0) << 20);
          *v152 = v156 | ((int)((_D10 * 0.677998 + _D9 * 0.2627 + _D11 * 0.059302) * 1023.0 + 0.0) << 20);
          _D23 = (_D30 * -0.36037
                + _D29 * -0.13963
                + _D31 * 0.5
                + _D27 * -0.13963
                + _D8 * -0.36037
                + _D26 * 0.5
                + _D9 * -0.13963
                + _D10 * -0.36037
                + _D11 * 0.5
                + _D24 * -0.13963
                + _D25 * -0.36037
                + _D13 * 0.5)
               * 1023.0
               * 0.25;
          _D22 = (_D30 * -0.459785
                + _D29 * 0.5
                + _D31 * -0.040215
                + _D27 * 0.5
                + _D8 * -0.459785
                + _D26 * -0.040215
                + _D9 * 0.5
                + _D10 * -0.459785
                + _D11 * -0.040215
                + _D24 * 0.5
                + _D25 * -0.459785
                + _D13 * -0.040215)
               * 1023.0;
          LOWORD(_D24) = *(_WORD *)(v36 + v89 + 32);
          LOWORD(_D25) = *(_WORD *)(v36 + v89 + 34);
          LOWORD(_D26) = *(_WORD *)(v36 + v89 + 36);
          __asm
          {
            FCVT            D24, H24
            FCVT            D25, H25
            FCVT            D26, H26
          }
          *(float *)&_D21 = (_D28 + _D21 * 0.5) * 1023.0 * 0.25;
          LOWORD(_D27) = *(_WORD *)(v36 + v89 + 40);
          LOWORD(_D28) = *(_WORD *)(v36 + v89 + 42);
          *(float *)&_D20 = _D20 * 1023.0 * 0.25;
          LOWORD(_D29) = *(_WORD *)(v36 + v89 + 44);
          __asm
          {
            FCVT            D27, H27
            FCVT            D28, H28
          }
          *(float *)&_D23 = _D23;
          __asm { FCVT            D29, H29 }
          *(float *)&_D22 = _D22 * 0.25;
          v166 = v134 | ((int)((_D25 * 0.677998 + _D24 * 0.2627 + _D26 * 0.059302) * 1023.0 + 0.0) << 10) | ((int)((_D28 * 0.677998 + _D27 * 0.2627 + _D29 * 0.059302) * 1023.0 + 0.0) << 20);
          LOWORD(_D30) = *(_WORD *)(v33 + v89 + 32);
          LOWORD(_D31) = *(_WORD *)(v33 + v89 + 34);
          v167 = llroundf(*(float *)&_D21);
          LOWORD(_D21) = *(_WORD *)(v33 + v89 + 36);
          __asm
          {
            FCVT            D30, H30
            FCVT            D31, H31
          }
          v170 = llroundf(*(float *)&_D20);
          __asm { FCVT            D21, H21 }
          v172 = llroundf(*(float *)&_D23);
          LOWORD(_D20) = *(_WORD *)(v33 + v89 + 40);
          LOWORD(_D23) = *(_WORD *)(v33 + v89 + 42);
          v173 = llroundf(*(float *)&_D22);
          LOWORD(_D22) = *(_WORD *)(v33 + v89 + 44);
          __asm
          {
            FCVT            D20, H20
            FCVT            D23, H23
            FCVT            D22, H22
          }
          v177 = (int)((_D23 * 0.677998 + _D20 * 0.2627 + _D22 * 0.059302) * 1023.0 + 0.0);
          *(float *)&_D8 = (_D25 * -0.36037
                          + _D24 * -0.13963
                          + _D26 * 0.5
                          + _D27 * -0.13963
                          + _D28 * -0.36037
                          + _D29 * 0.5
                          + _D30 * -0.13963
                          + _D31 * -0.36037
                          + _D21 * 0.5
                          + _D20 * -0.13963
                          + _D23 * -0.36037
                          + _D22 * 0.5)
                         * 1023.0
                         * 0.25;
          *v154 = ((v170 << 10) + 0x80000) | (v167 + 512) | ((v172 << 20) + 0x20000000);
          *(float *)&_D20 = (_D25 * -0.459785
                           + _D24 * 0.5
                           + _D26 * -0.040215
                           + _D27 * 0.5
                           + _D28 * -0.459785
                           + _D29 * -0.040215
                           + _D30 * 0.5
                           + _D31 * -0.459785
                           + _D21 * -0.040215
                           + _D20 * 0.5
                           + _D23 * -0.459785
                           + _D22 * -0.040215)
                          * 1023.0
                          * 0.25;
          v157[1] = v166;
          v152[1] = v150 | ((int)((_D31 * 0.677998 + _D30 * 0.2627 + _D21 * 0.059302) * 1023.0 + 0.0) << 10) | (v177 << 20);
          v154[1] = ((llroundf(*(float *)&_D20) << 20) + 0x20000000) | (v173 + 512) | ((llroundf(*(float *)&_D8) << 10)
                                                                                     + 0x80000);
          v90 += 6;
          v85 += 8;
          v89 += 48;
        }
        while (v90 < v18);
        v27 = v227;
        v178 = v226 & 0x3C;
        v41 = (int *)((char *)v42 + v178 + v85);
        v34 = (__int32 *)((char *)v34 + v85);
        v38 = (_DWORD *)((char *)v43 + v178 + v85);
        v179 = (__int16 *)(v33 + v89);
        v180 = (__int16 *)(v36 + v89);
        v26 = v228;
        v19 = v229;
        v21 = v225;
        v23 = v224;
      }
      if (v90 < v14)
      {
        v181 = 0;
        v182 = v180;
        v183 = v179;
        v184 = v18 % 3;
        do
        {
          if ((v90 & 1) != 0)
          {
            v188 = &v180[v181 - 4];
            v185 = v182 - 3;
            v186 = v182 - 2;
            _H20 = v180[v181];
            __asm { FCVT            S20, H20 }
            _H21 = v180[v181 + 1];
            __asm { FCVT            S21, H21 }
            _H22 = v180[v181 + 2];
            __asm { FCVT            S22, H22 }
          }
          else
          {
            v185 = &v180[v181 + 1];
            v186 = &v180[v181 + 2];
            _S20 = 0.0;
            v188 = v182;
            _S21 = 0.0;
            _S22 = 0.0;
          }
          _H24 = *v186;
          _H25 = *v185;
          _H23 = *v188;
          __asm
          {
            FCVT            D23, H23
            FCVT            D25, H25
            FCVT            D24, H24
          }
          v200 = *((unsigned __int8 *)&v239 + v184);
          *v38 = ((int)((_D25 * 0.677998 + _D23 * 0.2627 + _D24 * 0.059302) * 1023.0 + 0.0) << v200) | *v38 & ~(1023 << v200);
          if ((v90 & 1) != 0)
          {
            v204 = &v179[v181 - 4];
            v201 = v183 - 3;
            v202 = v183 - 2;
            _H26 = v179[v181];
            __asm { FCVT            S29, H26 }
            _H26 = v179[v181 + 1];
            __asm { FCVT            S30, H26 }
            _H26 = v179[v181 + 2];
            __asm { FCVT            S31, H26 }
          }
          else
          {
            v201 = &v179[v181 + 1];
            v202 = &v179[v181 + 2];
            _S29 = 0.0;
            v204 = v183;
            _S30 = 0.0;
            _S31 = 0.0;
          }
          _H27 = *v202;
          _H28 = *v201;
          _H26 = *v204;
          __asm
          {
            FCVT            D26, H26
            FCVT            D28, H28
            FCVT            D27, H27
          }
          if ((v90 & 1) != 0)
          {
            v217 = vmulq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_1928DFDC0, _D25), (float64x2_t)xmmword_1928DFDD0, _D23), (float64x2_t)xmmword_1928DFDE0, _D24), (float64x2_t)xmmword_1928DFDD0, _S20), (float64x2_t)xmmword_1928DFDC0,
                                     _S21),
                                   (float64x2_t)xmmword_1928DFDE0,
                                   _S22),
                                 (float64x2_t)xmmword_1928DFDD0,
                                 _D26),
                               (float64x2_t)xmmword_1928DFDC0,
                               _D28),
                             (float64x2_t)xmmword_1928DFDE0,
                             _D27),
                           (float64x2_t)xmmword_1928DFDD0,
                           _S29),
                         (float64x2_t)xmmword_1928DFDC0,
                         _S30),
                       (float64x2_t)xmmword_1928DFDE0,
                       _S31),
                     (float64x2_t)vdupq_n_s64(0x408FF80000000000uLL));
            __asm { FMOV            V21.2D, #0.25 }
            v216 = vadd_s32(vcvt_s32_f32(vrnda_f32(vcvt_f32_f64(vmulq_f64(v217, _Q21)))), (int32x2_t)0x20000000200);
          }
          else
          {
            v216 = 0;
          }
          *v41 = *v41 & ~(1023 << v200) | ((int)((_D28 * 0.677998 + _D26 * 0.2627 + _D27 * 0.059302) * 1023.0 + 0.0) << v200);
          if (v184 == 2)
            v184 = 0;
          else
            ++v184;
          if ((v90 & 1) != 0)
          {
            v219 = *((unsigned __int8 *)&v239 + v39);
            *v34 = *v34 & ~(1023 << v219) | (v216.i32[0] << v219);
            v220 = (__int32 *)((char *)v34 + ((v219 >> 2) & 0x3C));
            if (v39 == 2)
              v221 = 0;
            else
              v221 = v39 + 1;
            v222 = *((unsigned __int8 *)&v239 + v221);
            *v220 = *v220 & ~(1023 << v222) | (v216.i32[1] << v222);
            v34 = (__int32 *)((char *)v220 + ((v222 >> 2) & 0x3C));
            if (v221 == 2)
              v39 = 0;
            else
              v39 = v221 + 1;
          }
          v182 += 4;
          v38 += v200 >> 4;
          v183 += 4;
          ++v90;
          v181 += 4;
          v41 += v200 >> 4;
        }
        while (v14 != v90);
      }
      v31 = &v237[v233];
      v32 = &v236[v233];
      v26 += 4 * v232;
      ++v19;
      v27 += v232;
      v29 = v238 + v230;
      v33 = v235 + v230;
      v34 = &v234[v231];
    }
    while (v19 != v23);
  }
  return 0;
}

uint64_t vt_Copy_RGhA_pf20ITU709(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t a5, uint64_t a6, _QWORD *a7, _QWORD *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _WORD *v31;
  _WORD *v32;
  uint64_t v33;
  __int32 *v34;
  uint64_t v35;
  uint64_t v36;
  __int16 *v37;
  _DWORD *v38;
  unsigned int v39;
  unsigned int v40;
  int *v41;
  int *v42;
  _DWORD *v43;
  __int16 *v44;
  __int16 *v45;
  __int16 *v47;
  unint64_t v62;
  __int16 *v63;
  __int16 *v64;
  __int16 *v66;
  int32x2_t v78;
  float64x2_t v79;
  unint64_t v81;
  __int32 *v82;
  unsigned int v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  int v110;
  int v115;
  int v117;
  int v118;
  double v120;
  double v121;
  double v124;
  double v127;
  double v128;
  int v134;
  double v135;
  double v141;
  double v143;
  double v146;
  int v150;
  int *v152;
  int v153;
  unsigned int *v154;
  int v156;
  int *v157;
  int v166;
  unsigned int v167;
  unsigned int v170;
  unsigned int v172;
  unsigned int v173;
  int v177;
  uint64_t v178;
  __int16 *v179;
  __int16 *v180;
  uint64_t v181;
  __int16 *v182;
  __int16 *v183;
  unsigned int v184;
  __int16 *v185;
  __int16 *v186;
  __int16 *v188;
  unint64_t v200;
  __int16 *v201;
  __int16 *v202;
  __int16 *v204;
  int32x2_t v216;
  float64x2_t v217;
  unint64_t v219;
  __int32 *v220;
  unsigned int v221;
  unint64_t v222;
  unint64_t v224;
  unsigned int v225;
  unint64_t v226;
  int *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  __int32 *v234;
  uint64_t v235;
  _WORD *v236;
  _WORD *v237;
  uint64_t v238;
  int v239;

  v239 = 1313280;
  v8 = *(_QWORD *)(a2 + 40);
  v9 = (v8 & 1) + v8;
  v10 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v11 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v12 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v13 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v14 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v10;
  if (v14 >= v13 - v12)
    v14 = v13 - v12;
  if ((unint64_t)((*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE) - v9 >= ((*(_DWORD *)(a6 + 24)
                                                                                    + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE)
                                                                                  - v11)
    v15 = ((*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE) - v11;
  else
    v15 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE) - v9;
  v16 = v13 % 6;
  _CF = v14 >= v16;
  v18 = v14 - v16;
  if (!_CF)
    v18 = 0;
  if (v15 >= 2)
  {
    v19 = 0;
    v20 = v12 / 3;
    v21 = v12 % 3;
    v22 = 6 * (v12 / 6) - v12 + 6;
    v23 = v15 >> 1;
    v24 = a8[1];
    v25 = a7[1] + v24 * (v11 >> 1);
    v26 = *a7 + *a8 * v11 + 4 * v20;
    v27 = (int *)(v26 + *a8);
    v28 = *a3;
    v29 = *a3 + *a4 * v9;
    v30 = 8 * v10;
    v31 = (_WORD *)(v29 + 8 * v10);
    v32 = (_WORD *)((char *)v31 + *a4);
    v233 = *a4 & 0x7FFFFFFFFFFFFFFFLL;
    v232 = (*a8 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    v231 = v24 >> 2;
    v230 = 2 * *a4;
    v33 = v28 + *a4 + *a4 * (v8 + (v8 & 1));
    v34 = (__int32 *)(v25 + 4 * v20);
    v225 = v21;
    v224 = v23;
    do
    {
      v35 = 0;
      v235 = v33;
      v236 = v32;
      v237 = v31;
      v238 = v29;
      v36 = v29;
      v37 = v31;
      v38 = (_DWORD *)v26;
      v39 = v21;
      v40 = v21;
      v234 = v34;
      v41 = v27;
      do
      {
        v42 = v41;
        v43 = v38;
        if ((v35 & 1) != 0)
        {
          v47 = (__int16 *)(v36 + v30 - 8);
          v44 = v37 - 3;
          v45 = v37 - 2;
          _H20 = *(_WORD *)(v36 + v30);
          __asm { FCVT            S20, H20 }
          _H21 = *(_WORD *)(v36 + v30 + 2);
          __asm { FCVT            S21, H21 }
          _H22 = *(_WORD *)(v36 + v30 + 4);
          __asm { FCVT            S22, H22 }
        }
        else
        {
          v44 = (__int16 *)(v36 + v30 + 2);
          v45 = (__int16 *)(v36 + v30 + 4);
          _S20 = 0.0;
          v47 = v37;
          _S21 = 0.0;
          _S22 = 0.0;
        }
        _H24 = *v45;
        _H25 = *v44;
        _H23 = *v47;
        __asm
        {
          FCVT            D23, H23
          FCVT            D25, H25
          FCVT            D24, H24
        }
        v62 = *((unsigned __int8 *)&v239 + v40);
        *v38 = ((int)((_D25 * 0.7152 + _D23 * 0.2126 + _D24 * 0.0722) * 1023.0 + 0.0) << v62) | *v38 & ~(1023 << v62);
        if ((v35 & 1) != 0)
        {
          v66 = (__int16 *)(v33 + v30 - 8);
          v63 = v32 - 3;
          v64 = v32 - 2;
          _H26 = *(_WORD *)(v33 + v30);
          __asm { FCVT            S29, H26 }
          _H26 = *(_WORD *)(v33 + v30 + 2);
          __asm { FCVT            S30, H26 }
          _H26 = *(_WORD *)(v33 + v30 + 4);
          __asm { FCVT            S31, H26 }
        }
        else
        {
          v63 = (__int16 *)(v33 + v30 + 2);
          v64 = (__int16 *)(v33 + v30 + 4);
          _S29 = 0.0;
          v66 = v32;
          _S30 = 0.0;
          _S31 = 0.0;
        }
        _H27 = *v64;
        _H28 = *v63;
        _H26 = *v66;
        __asm
        {
          FCVT            D26, H26
          FCVT            D28, H28
          FCVT            D27, H27
        }
        if ((v35 & 1) != 0)
        {
          v79 = vmulq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_1928DFDF0, _D25), (float64x2_t)xmmword_1928DFE00, _D23), (float64x2_t)xmmword_1928DFE10, _D24), (float64x2_t)xmmword_1928DFE00, _S20), (float64x2_t)xmmword_1928DFDF0,
                                  _S21),
                                (float64x2_t)xmmword_1928DFE10,
                                _S22),
                              (float64x2_t)xmmword_1928DFE00,
                              _D26),
                            (float64x2_t)xmmword_1928DFDF0,
                            _D28),
                          (float64x2_t)xmmword_1928DFE10,
                          _D27),
                        (float64x2_t)xmmword_1928DFE00,
                        _S29),
                      (float64x2_t)xmmword_1928DFDF0,
                      _S30),
                    (float64x2_t)xmmword_1928DFE10,
                    _S31),
                  (float64x2_t)vdupq_n_s64(0x408FF80000000000uLL));
          __asm { FMOV            V21.2D, #0.25 }
          v78 = vadd_s32(vcvt_s32_f32(vrnda_f32(vcvt_f32_f64(vmulq_f64(v79, _Q21)))), (int32x2_t)0x20000000200);
        }
        else
        {
          v78 = 0;
        }
        *v42 = *v42 & ~(1023 << v62) | ((int)((_D28 * 0.7152 + _D26 * 0.2126 + _D27 * 0.0722) * 1023.0 + 0.0) << v62);
        if (v40 == 2)
          v40 = 0;
        else
          ++v40;
        if ((v35 & 1) != 0)
        {
          v81 = *((unsigned __int8 *)&v239 + v39);
          *v34 = *v34 & ~(1023 << v81) | (v78.i32[0] << v81);
          v82 = (__int32 *)((char *)v34 + ((v81 >> 2) & 0x3C));
          if (v39 == 2)
            v83 = 0;
          else
            v83 = v39 + 1;
          v84 = *((unsigned __int8 *)&v239 + v83);
          *v82 = *v82 & ~(1023 << v84) | (v78.i32[1] << v84);
          v34 = (__int32 *)((char *)v82 + ((v84 >> 2) & 0x3C));
          if (v83 == 2)
            v39 = 0;
          else
            v39 = v83 + 1;
        }
        v37 += 4;
        v38 += v62 >> 4;
        v32 += 4;
        ++v35;
        v36 += 8;
        v41 = &v42[v62 >> 4];
        v33 += 8;
      }
      while (v22 != v35);
      if (v22 >= v18)
      {
        v180 = (__int16 *)(v36 + v30);
        v179 = (__int16 *)(v33 + v30);
        v90 = v22;
      }
      else
      {
        v227 = v27;
        v228 = v26;
        v229 = v19;
        v85 = 0;
        v226 = v62 >> 2;
        v86 = (v62 >> 2) & 0x3C;
        v87 = (char *)v42 + v86;
        v88 = (char *)v43 + v86;
        v89 = v30;
        v90 = v22;
        do
        {
          _H20 = *(_WORD *)(v36 + v89);
          _H21 = *(_WORD *)(v36 + v89 + 2);
          _H22 = *(_WORD *)(v36 + v89 + 4);
          __asm
          {
            FCVT            D27, H20
            FCVT            D28, H21
            FCVT            D29, H22
          }
          _H21 = *(_WORD *)(v36 + v89 + 8);
          _H22 = *(_WORD *)(v36 + v89 + 10);
          _H23 = *(_WORD *)(v36 + v89 + 12);
          __asm
          {
            FCVT            D30, H21
            FCVT            D31, H22
            FCVT            D26, H23
          }
          _H22 = *(_WORD *)(v33 + v89);
          _H23 = *(_WORD *)(v33 + v89 + 2);
          _H8 = *(_WORD *)(v33 + v89 + 4);
          __asm
          {
            FCVT            D25, H22
            FCVT            D24, H23
            FCVT            D23, H8
          }
          _H22 = *(_WORD *)(v33 + v89 + 8);
          v110 = (int)((_D28 * 0.7152 + _D27 * 0.2126 + _D29 * 0.0722) * 1023.0 + 0.0);
          _H20 = *(_WORD *)(v33 + v89 + 10);
          _H9 = *(_WORD *)(v33 + v89 + 12);
          __asm
          {
            FCVT            D22, H22
            FCVT            D20, H20
          }
          v115 = (int)((_D31 * 0.7152 + _D30 * 0.2126 + _D26 * 0.0722) * 1023.0 + 0.0);
          __asm { FCVT            D21, H9 }
          v117 = (int)((_D24 * 0.7152 + _D25 * 0.2126 + _D23 * 0.0722) * 1023.0 + 0.0);
          v118 = (int)((_D20 * 0.7152 + _D22 * 0.2126 + _D21 * 0.0722) * 1023.0 + 0.0);
          _D8 = _D28 * -0.385428 + _D27 * -0.114572 + _D29 * 0.5 + _D30 * -0.114572;
          v120 = _D28 * -0.454153 + _D27 * 0.5 + _D29 * -0.045847 + _D30 * 0.5;
          v121 = _D8 + _D31 * -0.385428;
          _D27 = v120 + _D31 * -0.454153;
          LOWORD(_D29) = *(_WORD *)(v36 + v89 + 16);
          LOWORD(_D30) = *(_WORD *)(v36 + v89 + 18);
          LOWORD(_D31) = *(_WORD *)(v36 + v89 + 20);
          __asm { FCVT            D29, H29 }
          v124 = v121 + _D26 * 0.5;
          __asm
          {
            FCVT            D30, H30
            FCVT            D31, H31
          }
          v127 = _D27 + _D26 * -0.045847;
          LOWORD(_D27) = *(_WORD *)(v36 + v89 + 24);
          LOWORD(_D8) = *(_WORD *)(v36 + v89 + 26);
          v128 = v124 + _D25 * -0.114572;
          _H9 = *(_WORD *)(v36 + v89 + 28);
          __asm
          {
            FCVT            D27, H27
            FCVT            D8, H8
          }
          _D25 = v127 + _D25 * 0.5;
          __asm { FCVT            D26, H9 }
          v134 = (int)((_D8 * 0.7152 + _D27 * 0.2126 + _D26 * 0.0722) * 1023.0 + 0.0);
          v135 = v128 + _D24 * -0.385428;
          _H9 = *(_WORD *)(v33 + v89 + 16);
          _H10 = *(_WORD *)(v33 + v89 + 18);
          _H11 = *(_WORD *)(v33 + v89 + 20);
          __asm
          {
            FCVT            D9, H9
            FCVT            D10, H10
          }
          v141 = _D25 + _D24 * -0.454153;
          __asm { FCVT            D11, H11 }
          v143 = v135 + _D23 * 0.5;
          LOWORD(_D25) = *(_WORD *)(v33 + v89 + 24);
          _H12 = *(_WORD *)(v33 + v89 + 26);
          _H13 = *(_WORD *)(v33 + v89 + 28);
          v146 = v141 + _D23 * -0.045847;
          __asm
          {
            FCVT            D24, H25
            FCVT            D25, H12
            FCVT            D13, H13
          }
          v150 = (int)((_D25 * 0.7152 + _D24 * 0.2126 + _D13 * 0.0722) * 1023.0 + 0.0);
          _D28 = v143 + _D22 * -0.114572 + _D20 * -0.385428;
          v152 = (int *)&v87[v85];
          v153 = v110 | (v115 << 10);
          v154 = (unsigned int *)&v34[v85 / 4];
          _D20 = v146 + _D22 * 0.5 + _D20 * -0.454153 + _D21 * -0.045847;
          v156 = v117 | (v118 << 10);
          v157 = (int *)&v88[v85];
          *v157 = v153 | ((int)((_D30 * 0.7152 + _D29 * 0.2126 + _D31 * 0.0722) * 1023.0 + 0.0) << 20);
          *v152 = v156 | ((int)((_D10 * 0.7152 + _D9 * 0.2126 + _D11 * 0.0722) * 1023.0 + 0.0) << 20);
          _D23 = (_D30 * -0.385428
                + _D29 * -0.114572
                + _D31 * 0.5
                + _D27 * -0.114572
                + _D8 * -0.385428
                + _D26 * 0.5
                + _D9 * -0.114572
                + _D10 * -0.385428
                + _D11 * 0.5
                + _D24 * -0.114572
                + _D25 * -0.385428
                + _D13 * 0.5)
               * 1023.0
               * 0.25;
          _D22 = (_D30 * -0.454153
                + _D29 * 0.5
                + _D31 * -0.045847
                + _D27 * 0.5
                + _D8 * -0.454153
                + _D26 * -0.045847
                + _D9 * 0.5
                + _D10 * -0.454153
                + _D11 * -0.045847
                + _D24 * 0.5
                + _D25 * -0.454153
                + _D13 * -0.045847)
               * 1023.0;
          LOWORD(_D24) = *(_WORD *)(v36 + v89 + 32);
          LOWORD(_D25) = *(_WORD *)(v36 + v89 + 34);
          LOWORD(_D26) = *(_WORD *)(v36 + v89 + 36);
          __asm
          {
            FCVT            D24, H24
            FCVT            D25, H25
            FCVT            D26, H26
          }
          *(float *)&_D21 = (_D28 + _D21 * 0.5) * 1023.0 * 0.25;
          LOWORD(_D27) = *(_WORD *)(v36 + v89 + 40);
          LOWORD(_D28) = *(_WORD *)(v36 + v89 + 42);
          *(float *)&_D20 = _D20 * 1023.0 * 0.25;
          LOWORD(_D29) = *(_WORD *)(v36 + v89 + 44);
          __asm
          {
            FCVT            D27, H27
            FCVT            D28, H28
          }
          *(float *)&_D23 = _D23;
          __asm { FCVT            D29, H29 }
          *(float *)&_D22 = _D22 * 0.25;
          v166 = v134 | ((int)((_D25 * 0.7152 + _D24 * 0.2126 + _D26 * 0.0722) * 1023.0 + 0.0) << 10) | ((int)((_D28 * 0.7152 + _D27 * 0.2126 + _D29 * 0.0722) * 1023.0 + 0.0) << 20);
          LOWORD(_D30) = *(_WORD *)(v33 + v89 + 32);
          LOWORD(_D31) = *(_WORD *)(v33 + v89 + 34);
          v167 = llroundf(*(float *)&_D21);
          LOWORD(_D21) = *(_WORD *)(v33 + v89 + 36);
          __asm
          {
            FCVT            D30, H30
            FCVT            D31, H31
          }
          v170 = llroundf(*(float *)&_D20);
          __asm { FCVT            D21, H21 }
          v172 = llroundf(*(float *)&_D23);
          LOWORD(_D20) = *(_WORD *)(v33 + v89 + 40);
          LOWORD(_D23) = *(_WORD *)(v33 + v89 + 42);
          v173 = llroundf(*(float *)&_D22);
          LOWORD(_D22) = *(_WORD *)(v33 + v89 + 44);
          __asm
          {
            FCVT            D20, H20
            FCVT            D23, H23
            FCVT            D22, H22
          }
          v177 = (int)((_D23 * 0.7152 + _D20 * 0.2126 + _D22 * 0.0722) * 1023.0 + 0.0);
          *(float *)&_D8 = (_D25 * -0.385428
                          + _D24 * -0.114572
                          + _D26 * 0.5
                          + _D27 * -0.114572
                          + _D28 * -0.385428
                          + _D29 * 0.5
                          + _D30 * -0.114572
                          + _D31 * -0.385428
                          + _D21 * 0.5
                          + _D20 * -0.114572
                          + _D23 * -0.385428
                          + _D22 * 0.5)
                         * 1023.0
                         * 0.25;
          *v154 = ((v170 << 10) + 0x80000) | (v167 + 512) | ((v172 << 20) + 0x20000000);
          *(float *)&_D20 = (_D25 * -0.454153
                           + _D24 * 0.5
                           + _D26 * -0.045847
                           + _D27 * 0.5
                           + _D28 * -0.454153
                           + _D29 * -0.045847
                           + _D30 * 0.5
                           + _D31 * -0.454153
                           + _D21 * -0.045847
                           + _D20 * 0.5
                           + _D23 * -0.454153
                           + _D22 * -0.045847)
                          * 1023.0
                          * 0.25;
          v157[1] = v166;
          v152[1] = v150 | ((int)((_D31 * 0.7152 + _D30 * 0.2126 + _D21 * 0.0722) * 1023.0 + 0.0) << 10) | (v177 << 20);
          v154[1] = ((llroundf(*(float *)&_D20) << 20) + 0x20000000) | (v173 + 512) | ((llroundf(*(float *)&_D8) << 10)
                                                                                     + 0x80000);
          v90 += 6;
          v85 += 8;
          v89 += 48;
        }
        while (v90 < v18);
        v27 = v227;
        v178 = v226 & 0x3C;
        v41 = (int *)((char *)v42 + v178 + v85);
        v34 = (__int32 *)((char *)v34 + v85);
        v38 = (_DWORD *)((char *)v43 + v178 + v85);
        v179 = (__int16 *)(v33 + v89);
        v180 = (__int16 *)(v36 + v89);
        v26 = v228;
        v19 = v229;
        v21 = v225;
        v23 = v224;
      }
      if (v90 < v14)
      {
        v181 = 0;
        v182 = v180;
        v183 = v179;
        v184 = v18 % 3;
        do
        {
          if ((v90 & 1) != 0)
          {
            v188 = &v180[v181 - 4];
            v185 = v182 - 3;
            v186 = v182 - 2;
            _H20 = v180[v181];
            __asm { FCVT            S20, H20 }
            _H21 = v180[v181 + 1];
            __asm { FCVT            S21, H21 }
            _H22 = v180[v181 + 2];
            __asm { FCVT            S22, H22 }
          }
          else
          {
            v185 = &v180[v181 + 1];
            v186 = &v180[v181 + 2];
            _S20 = 0.0;
            v188 = v182;
            _S21 = 0.0;
            _S22 = 0.0;
          }
          _H24 = *v186;
          _H25 = *v185;
          _H23 = *v188;
          __asm
          {
            FCVT            D23, H23
            FCVT            D25, H25
            FCVT            D24, H24
          }
          v200 = *((unsigned __int8 *)&v239 + v184);
          *v38 = ((int)((_D25 * 0.7152 + _D23 * 0.2126 + _D24 * 0.0722) * 1023.0 + 0.0) << v200) | *v38 & ~(1023 << v200);
          if ((v90 & 1) != 0)
          {
            v204 = &v179[v181 - 4];
            v201 = v183 - 3;
            v202 = v183 - 2;
            _H26 = v179[v181];
            __asm { FCVT            S29, H26 }
            _H26 = v179[v181 + 1];
            __asm { FCVT            S30, H26 }
            _H26 = v179[v181 + 2];
            __asm { FCVT            S31, H26 }
          }
          else
          {
            v201 = &v179[v181 + 1];
            v202 = &v179[v181 + 2];
            _S29 = 0.0;
            v204 = v183;
            _S30 = 0.0;
            _S31 = 0.0;
          }
          _H27 = *v202;
          _H28 = *v201;
          _H26 = *v204;
          __asm
          {
            FCVT            D26, H26
            FCVT            D28, H28
            FCVT            D27, H27
          }
          if ((v90 & 1) != 0)
          {
            v217 = vmulq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_1928DFDF0, _D25), (float64x2_t)xmmword_1928DFE00, _D23), (float64x2_t)xmmword_1928DFE10, _D24), (float64x2_t)xmmword_1928DFE00, _S20), (float64x2_t)xmmword_1928DFDF0,
                                     _S21),
                                   (float64x2_t)xmmword_1928DFE10,
                                   _S22),
                                 (float64x2_t)xmmword_1928DFE00,
                                 _D26),
                               (float64x2_t)xmmword_1928DFDF0,
                               _D28),
                             (float64x2_t)xmmword_1928DFE10,
                             _D27),
                           (float64x2_t)xmmword_1928DFE00,
                           _S29),
                         (float64x2_t)xmmword_1928DFDF0,
                         _S30),
                       (float64x2_t)xmmword_1928DFE10,
                       _S31),
                     (float64x2_t)vdupq_n_s64(0x408FF80000000000uLL));
            __asm { FMOV            V21.2D, #0.25 }
            v216 = vadd_s32(vcvt_s32_f32(vrnda_f32(vcvt_f32_f64(vmulq_f64(v217, _Q21)))), (int32x2_t)0x20000000200);
          }
          else
          {
            v216 = 0;
          }
          *v41 = *v41 & ~(1023 << v200) | ((int)((_D28 * 0.7152 + _D26 * 0.2126 + _D27 * 0.0722) * 1023.0 + 0.0) << v200);
          if (v184 == 2)
            v184 = 0;
          else
            ++v184;
          if ((v90 & 1) != 0)
          {
            v219 = *((unsigned __int8 *)&v239 + v39);
            *v34 = *v34 & ~(1023 << v219) | (v216.i32[0] << v219);
            v220 = (__int32 *)((char *)v34 + ((v219 >> 2) & 0x3C));
            if (v39 == 2)
              v221 = 0;
            else
              v221 = v39 + 1;
            v222 = *((unsigned __int8 *)&v239 + v221);
            *v220 = *v220 & ~(1023 << v222) | (v216.i32[1] << v222);
            v34 = (__int32 *)((char *)v220 + ((v222 >> 2) & 0x3C));
            if (v221 == 2)
              v39 = 0;
            else
              v39 = v221 + 1;
          }
          v182 += 4;
          v38 += v200 >> 4;
          v183 += 4;
          ++v90;
          v181 += 4;
          v41 += v200 >> 4;
        }
        while (v14 != v90);
      }
      v31 = &v237[v233];
      v32 = &v236[v233];
      v26 += 4 * v232;
      ++v19;
      v27 += v232;
      v29 = v238 + v230;
      v33 = v235 + v230;
      v34 = &v234[v231];
    }
    while (v19 != v23);
  }
  return 0;
}

uint64_t vt_Copy_RGhA_pf20ITU601(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t a5, uint64_t a6, _QWORD *a7, _QWORD *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _WORD *v31;
  _WORD *v32;
  uint64_t v33;
  __int32 *v34;
  uint64_t v35;
  uint64_t v36;
  __int16 *v37;
  _DWORD *v38;
  unsigned int v39;
  unsigned int v40;
  int *v41;
  int *v42;
  _DWORD *v43;
  __int16 *v44;
  __int16 *v45;
  __int16 *v47;
  unint64_t v62;
  __int16 *v63;
  __int16 *v64;
  __int16 *v66;
  int32x2_t v78;
  float64x2_t v79;
  unint64_t v81;
  __int32 *v82;
  unsigned int v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  int v110;
  int v115;
  int v117;
  int v118;
  double v120;
  double v121;
  double v124;
  double v127;
  double v128;
  int v134;
  double v135;
  double v141;
  double v143;
  double v146;
  int v150;
  int *v152;
  int v153;
  unsigned int *v154;
  int v156;
  int *v157;
  int v166;
  unsigned int v167;
  unsigned int v170;
  unsigned int v172;
  unsigned int v173;
  int v177;
  uint64_t v178;
  __int16 *v179;
  __int16 *v180;
  uint64_t v181;
  __int16 *v182;
  __int16 *v183;
  unsigned int v184;
  __int16 *v185;
  __int16 *v186;
  __int16 *v188;
  unint64_t v200;
  __int16 *v201;
  __int16 *v202;
  __int16 *v204;
  int32x2_t v216;
  float64x2_t v217;
  unint64_t v219;
  __int32 *v220;
  unsigned int v221;
  unint64_t v222;
  unint64_t v224;
  unsigned int v225;
  unint64_t v226;
  int *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  __int32 *v234;
  uint64_t v235;
  _WORD *v236;
  _WORD *v237;
  uint64_t v238;
  int v239;

  v239 = 1313280;
  v8 = *(_QWORD *)(a2 + 40);
  v9 = (v8 & 1) + v8;
  v10 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v11 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v12 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v13 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v14 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v10;
  if (v14 >= v13 - v12)
    v14 = v13 - v12;
  if ((unint64_t)((*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE) - v9 >= ((*(_DWORD *)(a6 + 24)
                                                                                    + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE)
                                                                                  - v11)
    v15 = ((*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE) - v11;
  else
    v15 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE) - v9;
  v16 = v13 % 6;
  _CF = v14 >= v16;
  v18 = v14 - v16;
  if (!_CF)
    v18 = 0;
  if (v15 >= 2)
  {
    v19 = 0;
    v20 = v12 / 3;
    v21 = v12 % 3;
    v22 = 6 * (v12 / 6) - v12 + 6;
    v23 = v15 >> 1;
    v24 = a8[1];
    v25 = a7[1] + v24 * (v11 >> 1);
    v26 = *a7 + *a8 * v11 + 4 * v20;
    v27 = (int *)(v26 + *a8);
    v28 = *a3;
    v29 = *a3 + *a4 * v9;
    v30 = 8 * v10;
    v31 = (_WORD *)(v29 + 8 * v10);
    v32 = (_WORD *)((char *)v31 + *a4);
    v233 = *a4 & 0x7FFFFFFFFFFFFFFFLL;
    v232 = (*a8 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    v231 = v24 >> 2;
    v230 = 2 * *a4;
    v33 = v28 + *a4 + *a4 * (v8 + (v8 & 1));
    v34 = (__int32 *)(v25 + 4 * v20);
    v225 = v21;
    v224 = v23;
    do
    {
      v35 = 0;
      v235 = v33;
      v236 = v32;
      v237 = v31;
      v238 = v29;
      v36 = v29;
      v37 = v31;
      v38 = (_DWORD *)v26;
      v39 = v21;
      v40 = v21;
      v234 = v34;
      v41 = v27;
      do
      {
        v42 = v41;
        v43 = v38;
        if ((v35 & 1) != 0)
        {
          v47 = (__int16 *)(v36 + v30 - 8);
          v44 = v37 - 3;
          v45 = v37 - 2;
          _H20 = *(_WORD *)(v36 + v30);
          __asm { FCVT            S20, H20 }
          _H21 = *(_WORD *)(v36 + v30 + 2);
          __asm { FCVT            S21, H21 }
          _H22 = *(_WORD *)(v36 + v30 + 4);
          __asm { FCVT            S22, H22 }
        }
        else
        {
          v44 = (__int16 *)(v36 + v30 + 2);
          v45 = (__int16 *)(v36 + v30 + 4);
          _S20 = 0.0;
          v47 = v37;
          _S21 = 0.0;
          _S22 = 0.0;
        }
        _H24 = *v45;
        _H25 = *v44;
        _H23 = *v47;
        __asm
        {
          FCVT            D23, H23
          FCVT            D25, H25
          FCVT            D24, H24
        }
        v62 = *((unsigned __int8 *)&v239 + v40);
        *v38 = ((int)((_D25 * 0.587 + _D23 * 0.299 + _D24 * 0.114) * 1023.0 + 0.0) << v62) | *v38 & ~(1023 << v62);
        if ((v35 & 1) != 0)
        {
          v66 = (__int16 *)(v33 + v30 - 8);
          v63 = v32 - 3;
          v64 = v32 - 2;
          _H26 = *(_WORD *)(v33 + v30);
          __asm { FCVT            S29, H26 }
          _H26 = *(_WORD *)(v33 + v30 + 2);
          __asm { FCVT            S30, H26 }
          _H26 = *(_WORD *)(v33 + v30 + 4);
          __asm { FCVT            S31, H26 }
        }
        else
        {
          v63 = (__int16 *)(v33 + v30 + 2);
          v64 = (__int16 *)(v33 + v30 + 4);
          _S29 = 0.0;
          v66 = v32;
          _S30 = 0.0;
          _S31 = 0.0;
        }
        _H27 = *v64;
        _H28 = *v63;
        _H26 = *v66;
        __asm
        {
          FCVT            D26, H26
          FCVT            D28, H28
          FCVT            D27, H27
        }
        if ((v35 & 1) != 0)
        {
          v79 = vmulq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_1928DFE20, _D25), (float64x2_t)xmmword_1928DFE30, _D23), (float64x2_t)xmmword_1928DFE40, _D24), (float64x2_t)xmmword_1928DFE30, _S20), (float64x2_t)xmmword_1928DFE20,
                                  _S21),
                                (float64x2_t)xmmword_1928DFE40,
                                _S22),
                              (float64x2_t)xmmword_1928DFE30,
                              _D26),
                            (float64x2_t)xmmword_1928DFE20,
                            _D28),
                          (float64x2_t)xmmword_1928DFE40,
                          _D27),
                        (float64x2_t)xmmword_1928DFE30,
                        _S29),
                      (float64x2_t)xmmword_1928DFE20,
                      _S30),
                    (float64x2_t)xmmword_1928DFE40,
                    _S31),
                  (float64x2_t)vdupq_n_s64(0x408FF80000000000uLL));
          __asm { FMOV            V21.2D, #0.25 }
          v78 = vadd_s32(vcvt_s32_f32(vrnda_f32(vcvt_f32_f64(vmulq_f64(v79, _Q21)))), (int32x2_t)0x20000000200);
        }
        else
        {
          v78 = 0;
        }
        *v42 = *v42 & ~(1023 << v62) | ((int)((_D28 * 0.587 + _D26 * 0.299 + _D27 * 0.114) * 1023.0 + 0.0) << v62);
        if (v40 == 2)
          v40 = 0;
        else
          ++v40;
        if ((v35 & 1) != 0)
        {
          v81 = *((unsigned __int8 *)&v239 + v39);
          *v34 = *v34 & ~(1023 << v81) | (v78.i32[0] << v81);
          v82 = (__int32 *)((char *)v34 + ((v81 >> 2) & 0x3C));
          if (v39 == 2)
            v83 = 0;
          else
            v83 = v39 + 1;
          v84 = *((unsigned __int8 *)&v239 + v83);
          *v82 = *v82 & ~(1023 << v84) | (v78.i32[1] << v84);
          v34 = (__int32 *)((char *)v82 + ((v84 >> 2) & 0x3C));
          if (v83 == 2)
            v39 = 0;
          else
            v39 = v83 + 1;
        }
        v37 += 4;
        v38 += v62 >> 4;
        v32 += 4;
        ++v35;
        v36 += 8;
        v41 = &v42[v62 >> 4];
        v33 += 8;
      }
      while (v22 != v35);
      if (v22 >= v18)
      {
        v180 = (__int16 *)(v36 + v30);
        v179 = (__int16 *)(v33 + v30);
        v90 = v22;
      }
      else
      {
        v227 = v27;
        v228 = v26;
        v229 = v19;
        v85 = 0;
        v226 = v62 >> 2;
        v86 = (v62 >> 2) & 0x3C;
        v87 = (char *)v42 + v86;
        v88 = (char *)v43 + v86;
        v89 = v30;
        v90 = v22;
        do
        {
          _H20 = *(_WORD *)(v36 + v89);
          _H21 = *(_WORD *)(v36 + v89 + 2);
          _H22 = *(_WORD *)(v36 + v89 + 4);
          __asm
          {
            FCVT            D27, H20
            FCVT            D28, H21
            FCVT            D29, H22
          }
          _H21 = *(_WORD *)(v36 + v89 + 8);
          _H22 = *(_WORD *)(v36 + v89 + 10);
          _H23 = *(_WORD *)(v36 + v89 + 12);
          __asm
          {
            FCVT            D30, H21
            FCVT            D31, H22
            FCVT            D26, H23
          }
          _H22 = *(_WORD *)(v33 + v89);
          _H23 = *(_WORD *)(v33 + v89 + 2);
          _H8 = *(_WORD *)(v33 + v89 + 4);
          __asm
          {
            FCVT            D25, H22
            FCVT            D24, H23
            FCVT            D23, H8
          }
          _H22 = *(_WORD *)(v33 + v89 + 8);
          v110 = (int)((_D28 * 0.587 + _D27 * 0.299 + _D29 * 0.114) * 1023.0 + 0.0);
          _H20 = *(_WORD *)(v33 + v89 + 10);
          _H9 = *(_WORD *)(v33 + v89 + 12);
          __asm
          {
            FCVT            D22, H22
            FCVT            D20, H20
          }
          v115 = (int)((_D31 * 0.587 + _D30 * 0.299 + _D26 * 0.114) * 1023.0 + 0.0);
          __asm { FCVT            D21, H9 }
          v117 = (int)((_D24 * 0.587 + _D25 * 0.299 + _D23 * 0.114) * 1023.0 + 0.0);
          v118 = (int)((_D20 * 0.587 + _D22 * 0.299 + _D21 * 0.114) * 1023.0 + 0.0);
          _D8 = _D28 * -0.331264 + _D27 * -0.168736 + _D29 * 0.5 + _D30 * -0.168736;
          v120 = _D28 * -0.418688 + _D27 * 0.5 + _D29 * -0.081312 + _D30 * 0.5;
          v121 = _D8 + _D31 * -0.331264;
          _D27 = v120 + _D31 * -0.418688;
          LOWORD(_D29) = *(_WORD *)(v36 + v89 + 16);
          LOWORD(_D30) = *(_WORD *)(v36 + v89 + 18);
          LOWORD(_D31) = *(_WORD *)(v36 + v89 + 20);
          __asm { FCVT            D29, H29 }
          v124 = v121 + _D26 * 0.5;
          __asm
          {
            FCVT            D30, H30
            FCVT            D31, H31
          }
          v127 = _D27 + _D26 * -0.081312;
          LOWORD(_D27) = *(_WORD *)(v36 + v89 + 24);
          LOWORD(_D8) = *(_WORD *)(v36 + v89 + 26);
          v128 = v124 + _D25 * -0.168736;
          _H9 = *(_WORD *)(v36 + v89 + 28);
          __asm
          {
            FCVT            D27, H27
            FCVT            D8, H8
          }
          _D25 = v127 + _D25 * 0.5;
          __asm { FCVT            D26, H9 }
          v134 = (int)((_D8 * 0.587 + _D27 * 0.299 + _D26 * 0.114) * 1023.0 + 0.0);
          v135 = v128 + _D24 * -0.331264;
          _H9 = *(_WORD *)(v33 + v89 + 16);
          _H10 = *(_WORD *)(v33 + v89 + 18);
          _H11 = *(_WORD *)(v33 + v89 + 20);
          __asm
          {
            FCVT            D9, H9
            FCVT            D10, H10
          }
          v141 = _D25 + _D24 * -0.418688;
          __asm { FCVT            D11, H11 }
          v143 = v135 + _D23 * 0.5;
          LOWORD(_D25) = *(_WORD *)(v33 + v89 + 24);
          _H12 = *(_WORD *)(v33 + v89 + 26);
          _H13 = *(_WORD *)(v33 + v89 + 28);
          v146 = v141 + _D23 * -0.081312;
          __asm
          {
            FCVT            D24, H25
            FCVT            D25, H12
            FCVT            D13, H13
          }
          v150 = (int)((_D25 * 0.587 + _D24 * 0.299 + _D13 * 0.114) * 1023.0 + 0.0);
          _D28 = v143 + _D22 * -0.168736 + _D20 * -0.331264;
          v152 = (int *)&v87[v85];
          v153 = v110 | (v115 << 10);
          v154 = (unsigned int *)&v34[v85 / 4];
          _D20 = v146 + _D22 * 0.5 + _D20 * -0.418688 + _D21 * -0.081312;
          v156 = v117 | (v118 << 10);
          v157 = (int *)&v88[v85];
          *v157 = v153 | ((int)((_D30 * 0.587 + _D29 * 0.299 + _D31 * 0.114) * 1023.0 + 0.0) << 20);
          *v152 = v156 | ((int)((_D10 * 0.587 + _D9 * 0.299 + _D11 * 0.114) * 1023.0 + 0.0) << 20);
          _D23 = (_D30 * -0.331264
                + _D29 * -0.168736
                + _D31 * 0.5
                + _D27 * -0.168736
                + _D8 * -0.331264
                + _D26 * 0.5
                + _D9 * -0.168736
                + _D10 * -0.331264
                + _D11 * 0.5
                + _D24 * -0.168736
                + _D25 * -0.331264
                + _D13 * 0.5)
               * 1023.0
               * 0.25;
          _D22 = (_D30 * -0.418688
                + _D29 * 0.5
                + _D31 * -0.081312
                + _D27 * 0.5
                + _D8 * -0.418688
                + _D26 * -0.081312
                + _D9 * 0.5
                + _D10 * -0.418688
                + _D11 * -0.081312
                + _D24 * 0.5
                + _D25 * -0.418688
                + _D13 * -0.081312)
               * 1023.0;
          LOWORD(_D24) = *(_WORD *)(v36 + v89 + 32);
          LOWORD(_D25) = *(_WORD *)(v36 + v89 + 34);
          LOWORD(_D26) = *(_WORD *)(v36 + v89 + 36);
          __asm
          {
            FCVT            D24, H24
            FCVT            D25, H25
            FCVT            D26, H26
          }
          *(float *)&_D21 = (_D28 + _D21 * 0.5) * 1023.0 * 0.25;
          LOWORD(_D27) = *(_WORD *)(v36 + v89 + 40);
          LOWORD(_D28) = *(_WORD *)(v36 + v89 + 42);
          *(float *)&_D20 = _D20 * 1023.0 * 0.25;
          LOWORD(_D29) = *(_WORD *)(v36 + v89 + 44);
          __asm
          {
            FCVT            D27, H27
            FCVT            D28, H28
          }
          *(float *)&_D23 = _D23;
          __asm { FCVT            D29, H29 }
          *(float *)&_D22 = _D22 * 0.25;
          v166 = v134 | ((int)((_D25 * 0.587 + _D24 * 0.299 + _D26 * 0.114) * 1023.0 + 0.0) << 10) | ((int)((_D28 * 0.587 + _D27 * 0.299 + _D29 * 0.114) * 1023.0 + 0.0) << 20);
          LOWORD(_D30) = *(_WORD *)(v33 + v89 + 32);
          LOWORD(_D31) = *(_WORD *)(v33 + v89 + 34);
          v167 = llroundf(*(float *)&_D21);
          LOWORD(_D21) = *(_WORD *)(v33 + v89 + 36);
          __asm
          {
            FCVT            D30, H30
            FCVT            D31, H31
          }
          v170 = llroundf(*(float *)&_D20);
          __asm { FCVT            D21, H21 }
          v172 = llroundf(*(float *)&_D23);
          LOWORD(_D20) = *(_WORD *)(v33 + v89 + 40);
          LOWORD(_D23) = *(_WORD *)(v33 + v89 + 42);
          v173 = llroundf(*(float *)&_D22);
          LOWORD(_D22) = *(_WORD *)(v33 + v89 + 44);
          __asm
          {
            FCVT            D20, H20
            FCVT            D23, H23
            FCVT            D22, H22
          }
          v177 = (int)((_D23 * 0.587 + _D20 * 0.299 + _D22 * 0.114) * 1023.0 + 0.0);
          *(float *)&_D8 = (_D25 * -0.331264
                          + _D24 * -0.168736
                          + _D26 * 0.5
                          + _D27 * -0.168736
                          + _D28 * -0.331264
                          + _D29 * 0.5
                          + _D30 * -0.168736
                          + _D31 * -0.331264
                          + _D21 * 0.5
                          + _D20 * -0.168736
                          + _D23 * -0.331264
                          + _D22 * 0.5)
                         * 1023.0
                         * 0.25;
          *v154 = ((v170 << 10) + 0x80000) | (v167 + 512) | ((v172 << 20) + 0x20000000);
          *(float *)&_D20 = (_D25 * -0.418688
                           + _D24 * 0.5
                           + _D26 * -0.081312
                           + _D27 * 0.5
                           + _D28 * -0.418688
                           + _D29 * -0.081312
                           + _D30 * 0.5
                           + _D31 * -0.418688
                           + _D21 * -0.081312
                           + _D20 * 0.5
                           + _D23 * -0.418688
                           + _D22 * -0.081312)
                          * 1023.0
                          * 0.25;
          v157[1] = v166;
          v152[1] = v150 | ((int)((_D31 * 0.587 + _D30 * 0.299 + _D21 * 0.114) * 1023.0 + 0.0) << 10) | (v177 << 20);
          v154[1] = ((llroundf(*(float *)&_D20) << 20) + 0x20000000) | (v173 + 512) | ((llroundf(*(float *)&_D8) << 10)
                                                                                     + 0x80000);
          v90 += 6;
          v85 += 8;
          v89 += 48;
        }
        while (v90 < v18);
        v27 = v227;
        v178 = v226 & 0x3C;
        v41 = (int *)((char *)v42 + v178 + v85);
        v34 = (__int32 *)((char *)v34 + v85);
        v38 = (_DWORD *)((char *)v43 + v178 + v85);
        v179 = (__int16 *)(v33 + v89);
        v180 = (__int16 *)(v36 + v89);
        v26 = v228;
        v19 = v229;
        v21 = v225;
        v23 = v224;
      }
      if (v90 < v14)
      {
        v181 = 0;
        v182 = v180;
        v183 = v179;
        v184 = v18 % 3;
        do
        {
          if ((v90 & 1) != 0)
          {
            v188 = &v180[v181 - 4];
            v185 = v182 - 3;
            v186 = v182 - 2;
            _H20 = v180[v181];
            __asm { FCVT            S20, H20 }
            _H21 = v180[v181 + 1];
            __asm { FCVT            S21, H21 }
            _H22 = v180[v181 + 2];
            __asm { FCVT            S22, H22 }
          }
          else
          {
            v185 = &v180[v181 + 1];
            v186 = &v180[v181 + 2];
            _S20 = 0.0;
            v188 = v182;
            _S21 = 0.0;
            _S22 = 0.0;
          }
          _H24 = *v186;
          _H25 = *v185;
          _H23 = *v188;
          __asm
          {
            FCVT            D23, H23
            FCVT            D25, H25
            FCVT            D24, H24
          }
          v200 = *((unsigned __int8 *)&v239 + v184);
          *v38 = ((int)((_D25 * 0.587 + _D23 * 0.299 + _D24 * 0.114) * 1023.0 + 0.0) << v200) | *v38 & ~(1023 << v200);
          if ((v90 & 1) != 0)
          {
            v204 = &v179[v181 - 4];
            v201 = v183 - 3;
            v202 = v183 - 2;
            _H26 = v179[v181];
            __asm { FCVT            S29, H26 }
            _H26 = v179[v181 + 1];
            __asm { FCVT            S30, H26 }
            _H26 = v179[v181 + 2];
            __asm { FCVT            S31, H26 }
          }
          else
          {
            v201 = &v179[v181 + 1];
            v202 = &v179[v181 + 2];
            _S29 = 0.0;
            v204 = v183;
            _S30 = 0.0;
            _S31 = 0.0;
          }
          _H27 = *v202;
          _H28 = *v201;
          _H26 = *v204;
          __asm
          {
            FCVT            D26, H26
            FCVT            D28, H28
            FCVT            D27, H27
          }
          if ((v90 & 1) != 0)
          {
            v217 = vmulq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_1928DFE20, _D25), (float64x2_t)xmmword_1928DFE30, _D23), (float64x2_t)xmmword_1928DFE40, _D24), (float64x2_t)xmmword_1928DFE30, _S20), (float64x2_t)xmmword_1928DFE20,
                                     _S21),
                                   (float64x2_t)xmmword_1928DFE40,
                                   _S22),
                                 (float64x2_t)xmmword_1928DFE30,
                                 _D26),
                               (float64x2_t)xmmword_1928DFE20,
                               _D28),
                             (float64x2_t)xmmword_1928DFE40,
                             _D27),
                           (float64x2_t)xmmword_1928DFE30,
                           _S29),
                         (float64x2_t)xmmword_1928DFE20,
                         _S30),
                       (float64x2_t)xmmword_1928DFE40,
                       _S31),
                     (float64x2_t)vdupq_n_s64(0x408FF80000000000uLL));
            __asm { FMOV            V21.2D, #0.25 }
            v216 = vadd_s32(vcvt_s32_f32(vrnda_f32(vcvt_f32_f64(vmulq_f64(v217, _Q21)))), (int32x2_t)0x20000000200);
          }
          else
          {
            v216 = 0;
          }
          *v41 = *v41 & ~(1023 << v200) | ((int)((_D28 * 0.587 + _D26 * 0.299 + _D27 * 0.114) * 1023.0 + 0.0) << v200);
          if (v184 == 2)
            v184 = 0;
          else
            ++v184;
          if ((v90 & 1) != 0)
          {
            v219 = *((unsigned __int8 *)&v239 + v39);
            *v34 = *v34 & ~(1023 << v219) | (v216.i32[0] << v219);
            v220 = (__int32 *)((char *)v34 + ((v219 >> 2) & 0x3C));
            if (v39 == 2)
              v221 = 0;
            else
              v221 = v39 + 1;
            v222 = *((unsigned __int8 *)&v239 + v221);
            *v220 = *v220 & ~(1023 << v222) | (v216.i32[1] << v222);
            v34 = (__int32 *)((char *)v220 + ((v222 >> 2) & 0x3C));
            if (v221 == 2)
              v39 = 0;
            else
              v39 = v221 + 1;
          }
          v182 += 4;
          v38 += v200 >> 4;
          v183 += 4;
          ++v90;
          v181 += 4;
          v41 += v200 >> 4;
        }
        while (v14 != v90);
      }
      v31 = &v237[v233];
      v32 = &v236[v233];
      v26 += 4 * v232;
      ++v19;
      v27 += v232;
      v29 = v238 + v230;
      v33 = v235 + v230;
      v34 = &v234[v231];
    }
    while (v19 != v23);
  }
  return 0;
}

uint64_t vt_VImage_Setup_RGfA_32ARGB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  _OWORD *v14;

  v14 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *v14 = 0u;
  v14[1] = 0u;
  v14[2] = 0u;
  v14[3] = 0u;
  v14[4] = 0u;
  v14[5] = 0u;
  v14[6] = 0u;
  v14[7] = 0u;
  v14[8] = 0u;
  v14[9] = 0u;
  v14[10] = 0u;
  v14[11] = 0u;
  v14[12] = 0u;
  v14[13] = 0u;
  v14[14] = 0u;
  v14[15] = 0u;
  v14[16] = 0u;
  v14[17] = 0u;
  *((_QWORD *)v14 + 36) = 0;
  *((_QWORD *)v14 + 37) = a5;
  *((_BYTE *)v14 + 288) = a6;
  *a9 = vt_VImage_Copy_RGfA_32ARGB;
  *a11 = vt_VImage_Cleanup_RGfA_32ARGB;
  *a8 = v14;
  return 0;
}

uint64_t vt_VImage_Setup_RGfA_32BGRA(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  _OWORD *v14;

  v14 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *v14 = 0u;
  v14[1] = 0u;
  v14[2] = 0u;
  v14[3] = 0u;
  v14[4] = 0u;
  v14[5] = 0u;
  v14[6] = 0u;
  v14[7] = 0u;
  v14[8] = 0u;
  v14[9] = 0u;
  v14[10] = 0u;
  v14[11] = 0u;
  v14[12] = 0u;
  v14[13] = 0u;
  v14[14] = 0u;
  v14[15] = 0u;
  v14[16] = 0u;
  v14[17] = 0u;
  *((_QWORD *)v14 + 36) = 0;
  *((_QWORD *)v14 + 37) = a5;
  *((_BYTE *)v14 + 288) = a6;
  *a9 = vt_VImage_Copy_RGfA_32BGRA;
  *a11 = vt_VImage_Cleanup_RGfA_32BGRA;
  *a8 = v14;
  return 0;
}

vImage_Error vt_VImage_Copy_RGfA_w30r(uint64_t a1, uint64_t a2, void **a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  return vt_VImage_Copy_XXXX_b3a8(*(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4, a3, a8, a7, 0, 1380410945, a1);
}

vImage_Error vt_VImage_Copy_RGfA_b3a8(uint64_t a1, uint64_t a2, void **a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  return vt_VImage_Copy_XXXX_b3a8(*(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4, a3, a8, a7, 1, 1380410945, a1);
}

uint64_t vt_VImage_Setup_RGfA_RGhA(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  _OWORD *v14;

  v14 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *v14 = 0u;
  v14[1] = 0u;
  v14[2] = 0u;
  v14[3] = 0u;
  v14[4] = 0u;
  v14[5] = 0u;
  v14[6] = 0u;
  v14[7] = 0u;
  v14[8] = 0u;
  v14[9] = 0u;
  v14[10] = 0u;
  v14[11] = 0u;
  v14[12] = 0u;
  v14[13] = 0u;
  v14[14] = 0u;
  v14[15] = 0u;
  v14[16] = 0u;
  v14[17] = 0u;
  *((_QWORD *)v14 + 36) = 0;
  *((_QWORD *)v14 + 37) = a5;
  *((_BYTE *)v14 + 288) = a6;
  *a9 = vt_VImage_Copy_RGfA_RGhA;
  *a11 = vt_VImage_Cleanup_RGfA_RGhA;
  *a8 = v14;
  return 0;
}

uint64_t vt_Copy_RGfA_p420ITU2020(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, _QWORD *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float *v32;
  float *v33;
  uint64_t v34;
  __int32 *v35;
  uint64_t v36;
  uint64_t v37;
  float *v38;
  float *v39;
  int *v40;
  unsigned int v41;
  unsigned int v42;
  int *v43;
  int *v44;
  int *v45;
  float *v46;
  float *v47;
  float v48;
  float *v49;
  float v50;
  float v51;
  double v52;
  double v53;
  double v54;
  unint64_t v55;
  float *v56;
  float *v57;
  float v58;
  float *v59;
  float v60;
  float v61;
  double v62;
  double v63;
  double v64;
  int32x2_t v65;
  float64x2_t v66;
  unint64_t v71;
  __int32 *v72;
  unsigned int v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  int v90;
  double v91;
  double v92;
  int v93;
  double v94;
  int v95;
  int v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  int v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  int v118;
  double v119;
  int *v120;
  int v121;
  unsigned int *v122;
  double v123;
  int v124;
  int *v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  int v134;
  unsigned int v135;
  double v136;
  double v137;
  unsigned int v138;
  double v139;
  unsigned int v140;
  unsigned int v141;
  double v142;
  double v143;
  double v144;
  unsigned int v145;
  float v146;
  unsigned int v147;
  float v148;
  float *v149;
  float *v150;
  uint64_t v151;
  float *v152;
  float *v153;
  unsigned int v154;
  float *v155;
  float *v156;
  float *v157;
  float v158;
  float *v159;
  float v160;
  float v161;
  double v162;
  double v163;
  double v164;
  unint64_t v165;
  float *v166;
  float *v167;
  float *v168;
  float v169;
  float *v170;
  float v171;
  float v172;
  double v173;
  double v174;
  double v175;
  int32x2_t v176;
  float64x2_t v177;
  unint64_t v179;
  __int32 *v180;
  unsigned int v181;
  unint64_t v182;
  unint64_t v184;
  unsigned int v185;
  unint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  __int32 *v194;
  uint64_t v195;
  float *v196;
  float *v197;
  uint64_t v198;
  int *v199;
  int v200;

  v200 = 1313280;
  v8 = *(_QWORD *)(a2 + 40);
  v9 = (v8 & 1) + v8;
  v10 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v11 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v12 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v13 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v10 >= v13 - v12)
    v14 = v13 - v12;
  else
    v14 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v10;
  if ((unint64_t)((*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE) - v9 >= ((*(_DWORD *)(a6 + 24)
                                                                                    + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE)
                                                                                  - v11)
    v15 = ((*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE) - v11;
  else
    v15 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE) - v9;
  v16 = v13 % 6;
  _CF = v14 >= v16;
  v18 = v14 - v16;
  if (!_CF)
    v18 = 0;
  if (v15 >= 2)
  {
    v19 = 0;
    v20 = v12 / 3;
    v21 = v12 % 3;
    v22 = 6 * (v12 / 6) - v12 + 6;
    v23 = v15 >> 1;
    v24 = a8[1];
    v25 = a7[1] + v24 * (v11 >> 1);
    v26 = *a7 + *a8 * v11 + 4 * v20;
    v27 = (int *)(v26 + *a8);
    v28 = *a3;
    v29 = *a4;
    v30 = *a3 + *a4 * v9;
    v31 = 16 * v10;
    v32 = (float *)(v30 + 16 * v10);
    v33 = (float *)((char *)v32 + v29);
    v193 = (v29 >> 1) & 0x3FFFFFFFFFFFFFFFLL;
    v191 = v24 >> 2;
    v192 = (*a8 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    v190 = 4 * (v29 >> 1);
    v34 = v28 + v29 + v29 * (*(_QWORD *)(a2 + 40) + (*(_QWORD *)(a2 + 40) & 1));
    v35 = (__int32 *)(v25 + 4 * v20);
    v186 = v14;
    v185 = v21;
    v184 = v23;
    do
    {
      v36 = 0;
      v195 = v34;
      v196 = v33;
      v197 = v32;
      v198 = v30;
      v37 = v30;
      v38 = v32;
      v39 = v33;
      v40 = (int *)v26;
      v41 = v21;
      v42 = v21;
      v194 = v35;
      v199 = v27;
      v43 = v27;
      do
      {
        v44 = v43;
        v45 = v40;
        if ((v36 & 1) != 0)
        {
          v49 = (float *)(v37 + v31 - 16);
          v46 = v38 - 3;
          v47 = v38 - 2;
          v48 = *(float *)(v37 + v31);
          v50 = *(float *)(v37 + v31 + 4);
          v51 = *(float *)(v37 + v31 + 8);
        }
        else
        {
          v46 = (float *)(v37 + v31 + 4);
          v47 = (float *)(v37 + v31 + 8);
          v48 = 0.0;
          v49 = v38;
          v50 = 0.0;
          v51 = 0.0;
        }
        v52 = *v49;
        v53 = *v46;
        v54 = *v47;
        v55 = *((unsigned __int8 *)&v200 + v42);
        *v45 = ((int)((v53 * 0.580573067 + v52 * 0.22495132 + v54 * 0.0507805982) * 1023.0 + 64.0) << v55) | *v45 & ~(1023 << v55);
        if ((v36 & 1) != 0)
        {
          v59 = (float *)(v34 + v31 - 16);
          v56 = v39 - 3;
          v57 = v39 - 2;
          v58 = *(float *)(v34 + v31);
          v60 = *(float *)(v34 + v31 + 4);
          v61 = *(float *)(v34 + v31 + 8);
        }
        else
        {
          v56 = (float *)(v34 + v31 + 4);
          v57 = (float *)(v34 + v31 + 8);
          v58 = 0.0;
          v59 = v39;
          v60 = 0.0;
          v61 = 0.0;
        }
        v62 = *v59;
        v63 = *v56;
        v64 = *v57;
        if ((v36 & 1) != 0)
        {
          v66 = vmulq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_1928DFD30, v53), (float64x2_t)xmmword_1928DFD40, v52), (float64x2_t)xmmword_1928DFD50, v54), (float64x2_t)xmmword_1928DFD40, v48), (float64x2_t)xmmword_1928DFD30,
                                  v50),
                                (float64x2_t)xmmword_1928DFD50,
                                v51),
                              (float64x2_t)xmmword_1928DFD40,
                              v62),
                            (float64x2_t)xmmword_1928DFD30,
                            v63),
                          (float64x2_t)xmmword_1928DFD50,
                          v64),
                        (float64x2_t)xmmword_1928DFD40,
                        v58),
                      (float64x2_t)xmmword_1928DFD30,
                      v60),
                    (float64x2_t)xmmword_1928DFD50,
                    v61),
                  (float64x2_t)vdupq_n_s64(0x408FF80000000000uLL));
          __asm { FMOV            V20.2D, #0.25 }
          v65 = vadd_s32(vcvt_s32_f32(vrnda_f32(vcvt_f32_f64(vmulq_f64(v66, _Q20)))), (int32x2_t)0x20000000200);
        }
        else
        {
          v65 = 0;
        }
        *v43 = *v43 & ~(1023 << v55) | ((int)((v63 * 0.580573067 + v62 * 0.22495132 + v64 * 0.0507805982) * 1023.0 + 64.0) << v55);
        if (v42 == 2)
          v42 = 0;
        else
          ++v42;
        if ((v36 & 1) != 0)
        {
          v71 = *((unsigned __int8 *)&v200 + v41);
          *v35 = *v35 & ~(1023 << v71) | (v65.i32[0] << v71);
          v72 = (__int32 *)((char *)v35 + ((v71 >> 2) & 0x3C));
          if (v41 == 2)
            v73 = 0;
          else
            v73 = v41 + 1;
          v74 = *((unsigned __int8 *)&v200 + v73);
          *v72 = *v72 & ~(1023 << v74) | (v65.i32[1] << v74);
          v35 = (__int32 *)((char *)v72 + ((v74 >> 2) & 0x3C));
          if (v73 == 2)
            v41 = 0;
          else
            v41 = v73 + 1;
        }
        v38 += 4;
        v40 = &v45[v55 >> 4];
        v39 += 4;
        ++v36;
        v37 += 16;
        v43 += v55 >> 4;
        v34 += 16;
      }
      while (v22 != v36);
      if (v22 >= v18)
      {
        v150 = (float *)(v37 + v31);
        v149 = (float *)(v34 + v31);
        v80 = v22;
      }
      else
      {
        v188 = v26;
        v189 = v19;
        v75 = 0;
        v187 = v55 >> 2;
        v76 = (v55 >> 2) & 0x3C;
        v77 = (char *)v44 + v76;
        v78 = (char *)v45 + v76;
        v79 = v31;
        v80 = v22;
        do
        {
          v81 = *(float *)(v37 + v79);
          v82 = *(float *)(v37 + v79 + 4);
          v83 = *(float *)(v37 + v79 + 8);
          v84 = *(float *)(v37 + v79 + 16);
          v85 = *(float *)(v37 + v79 + 20);
          v86 = *(float *)(v37 + v79 + 24);
          v87 = *(float *)(v34 + v79);
          v88 = *(float *)(v34 + v79 + 4);
          v89 = *(float *)(v34 + v79 + 8);
          v90 = (int)((v82 * 0.580573067 + v81 * 0.22495132 + v83 * 0.0507805982) * 1023.0 + 64.0);
          v91 = *(float *)(v34 + v79 + 16);
          v92 = *(float *)(v34 + v79 + 20);
          v93 = (int)((v85 * 0.580573067 + v84 * 0.22495132 + v86 * 0.0507805982) * 1023.0 + 64.0);
          v94 = *(float *)(v34 + v79 + 24);
          v95 = (int)((v88 * 0.580573067 + v87 * 0.22495132 + v89 * 0.0507805982) * 1023.0 + 64.0);
          v96 = (int)((v92 * 0.580573067 + v91 * 0.22495132 + v94 * 0.0507805982) * 1023.0 + 64.0);
          v97 = v82 * -0.315631984 + v81 * -0.122295679 + v83 * 0.437927664 + v84 * -0.122295679;
          v98 = v82 * -0.402705142 + v81 * 0.437927664 + v83 * -0.035222522 + v84 * 0.437927664 + v85 * -0.402705142;
          v99 = *(float *)(v37 + v79 + 32);
          v100 = v97 + v85 * -0.315631984 + v86 * 0.437927664;
          v101 = *(float *)(v37 + v79 + 36);
          v102 = *(float *)(v37 + v79 + 40);
          v103 = v98 + v86 * -0.035222522;
          v104 = v100 + v87 * -0.122295679;
          v105 = *(float *)(v37 + v79 + 48);
          v106 = *(float *)(v37 + v79 + 52);
          v107 = v103 + v87 * 0.437927664;
          v108 = *(float *)(v37 + v79 + 56);
          v109 = (int)((v106 * 0.580573067 + v105 * 0.22495132 + v108 * 0.0507805982) * 1023.0 + 64.0);
          v110 = *(float *)(v34 + v79 + 32);
          v111 = *(float *)(v34 + v79 + 36);
          v112 = *(float *)(v34 + v79 + 40);
          v113 = v104 + v88 * -0.315631984 + v89 * 0.437927664;
          v114 = v107 + v88 * -0.402705142 + v89 * -0.035222522;
          v115 = *(float *)(v34 + v79 + 48);
          v116 = *(float *)(v34 + v79 + 52);
          v117 = *(float *)(v34 + v79 + 56);
          v118 = (int)((v116 * 0.580573067 + v115 * 0.22495132 + v117 * 0.0507805982) * 1023.0 + 64.0);
          v119 = v113 + v91 * -0.122295679 + v92 * -0.315631984;
          v120 = (int *)&v77[v75];
          v121 = v90 | (v93 << 10);
          v122 = (unsigned int *)&v35[v75 / 4];
          v123 = v114 + v91 * 0.437927664 + v92 * -0.402705142 + v94 * -0.035222522;
          v124 = v95 | (v96 << 10);
          v125 = (int *)&v78[v75];
          *v125 = v121 | ((int)((v101 * 0.580573067 + v99 * 0.22495132 + v102 * 0.0507805982) * 1023.0 + 64.0) << 20);
          *v120 = v124 | ((int)((v111 * 0.580573067 + v110 * 0.22495132 + v112 * 0.0507805982) * 1023.0 + 64.0) << 20);
          v126 = (v101 * -0.315631984
                + v99 * -0.122295679
                + v102 * 0.437927664
                + v105 * -0.122295679
                + v106 * -0.315631984
                + v108 * 0.437927664
                + v110 * -0.122295679
                + v111 * -0.315631984
                + v112 * 0.437927664
                + v115 * -0.122295679
                + v116 * -0.315631984
                + v117 * 0.437927664)
               * 1023.0
               * 0.25;
          v127 = (v101 * -0.402705142
                + v99 * 0.437927664
                + v102 * -0.035222522
                + v105 * 0.437927664
                + v106 * -0.402705142
                + v108 * -0.035222522
                + v110 * 0.437927664
                + v111 * -0.402705142
                + v112 * -0.035222522
                + v115 * 0.437927664
                + v116 * -0.402705142
                + v117 * -0.035222522)
               * 1023.0;
          v128 = *(float *)(v37 + v79 + 64);
          v129 = *(float *)(v37 + v79 + 68);
          v130 = *(float *)(v37 + v79 + 72);
          *(float *)&v94 = (v119 + v94 * 0.437927664) * 1023.0 * 0.25;
          *(float *)&v123 = v123 * 1023.0 * 0.25;
          v131 = *(float *)(v37 + v79 + 80);
          v132 = *(float *)(v37 + v79 + 84);
          *(float *)&v126 = v126;
          v133 = *(float *)(v37 + v79 + 88);
          *(float *)&v127 = v127 * 0.25;
          v134 = v109 | ((int)((v129 * 0.580573067 + v128 * 0.22495132 + v130 * 0.0507805982) * 1023.0 + 64.0) << 10) | ((int)((v132 * 0.580573067 + v131 * 0.22495132 + v133 * 0.0507805982) * 1023.0 + 64.0) << 20);
          v135 = llroundf(*(float *)&v94);
          v136 = *(float *)(v34 + v79 + 64);
          v137 = *(float *)(v34 + v79 + 68);
          v138 = llroundf(*(float *)&v123);
          v139 = *(float *)(v34 + v79 + 72);
          v140 = llroundf(*(float *)&v126);
          v141 = llroundf(*(float *)&v127);
          v142 = *(float *)(v34 + v79 + 80);
          v143 = *(float *)(v34 + v79 + 84);
          v144 = *(float *)(v34 + v79 + 88);
          v145 = v141 + 512;
          v146 = (v129 * -0.315631984
                + v128 * -0.122295679
                + v130 * 0.437927664
                + v131 * -0.122295679
                + v132 * -0.315631984
                + v133 * 0.437927664
                + v136 * -0.122295679
                + v137 * -0.315631984
                + v139 * 0.437927664
                + v142 * -0.122295679
                + v143 * -0.315631984
                + v144 * 0.437927664)
               * 1023.0
               * 0.25;
          v147 = llroundf(v146);
          *v122 = ((v138 << 10) + 0x80000) | (v135 + 512) | ((v140 << 20) + 0x20000000);
          v148 = (v129 * -0.402705142
                + v128 * 0.437927664
                + v130 * -0.035222522
                + v131 * 0.437927664
                + v132 * -0.402705142
                + v133 * -0.035222522
                + v136 * 0.437927664
                + v137 * -0.402705142
                + v139 * -0.035222522
                + v142 * 0.437927664
                + v143 * -0.402705142
                + v144 * -0.035222522)
               * 1023.0
               * 0.25;
          v125[1] = v134;
          v120[1] = v118 | ((int)((v137 * 0.580573067 + v136 * 0.22495132 + v139 * 0.0507805982) * 1023.0 + 64.0) << 10) | ((int)((v143 * 0.580573067 + v142 * 0.22495132 + v144 * 0.0507805982) * 1023.0 + 64.0) << 20);
          v122[1] = ((llroundf(v148) << 20) + 0x20000000) | v145 | ((v147 << 10) + 0x80000);
          v80 += 6;
          v75 += 8;
          v79 += 96;
        }
        while (v80 < v18);
        v14 = v186;
        v43 = (int *)((char *)v44 + (v187 & 0x3C) + v75);
        v35 = (__int32 *)((char *)v35 + v75);
        v40 = (int *)((char *)v45 + (v187 & 0x3C) + v75);
        v149 = (float *)(v34 + v79);
        v150 = (float *)(v37 + v79);
        v26 = v188;
        v19 = v189;
        v21 = v185;
        v23 = v184;
      }
      if (v80 < v14)
      {
        v151 = 0;
        v152 = v150;
        v153 = v149;
        v154 = v18 % 3;
        do
        {
          v155 = &v150[v151];
          if ((v80 & 1) != 0)
          {
            v159 = v155 - 4;
            v156 = v152 - 3;
            v157 = v152 - 2;
            v158 = *v155;
            v160 = v155[1];
            v161 = v155[2];
          }
          else
          {
            v156 = v155 + 1;
            v157 = v155 + 2;
            v158 = 0.0;
            v159 = v152;
            v160 = 0.0;
            v161 = 0.0;
          }
          v162 = *v159;
          v163 = *v156;
          v164 = *v157;
          v165 = *((unsigned __int8 *)&v200 + v154);
          *v40 = ((int)((v163 * 0.580573067 + v162 * 0.22495132 + v164 * 0.0507805982) * 1023.0 + 64.0) << v165) | *v40 & ~(1023 << v165);
          v166 = &v149[v151];
          if ((v80 & 1) != 0)
          {
            v170 = v166 - 4;
            v167 = v153 - 3;
            v168 = v153 - 2;
            v169 = *v166;
            v171 = v166[1];
            v172 = v166[2];
          }
          else
          {
            v167 = v166 + 1;
            v168 = v166 + 2;
            v169 = 0.0;
            v170 = v153;
            v171 = 0.0;
            v172 = 0.0;
          }
          v173 = *v170;
          v174 = *v167;
          v175 = *v168;
          if ((v80 & 1) != 0)
          {
            v177 = vmulq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_1928DFD30, v163), (float64x2_t)xmmword_1928DFD40, v162), (float64x2_t)xmmword_1928DFD50, v164), (float64x2_t)xmmword_1928DFD40, v158), (float64x2_t)xmmword_1928DFD30,
                                     v160),
                                   (float64x2_t)xmmword_1928DFD50,
                                   v161),
                                 (float64x2_t)xmmword_1928DFD40,
                                 v173),
                               (float64x2_t)xmmword_1928DFD30,
                               v174),
                             (float64x2_t)xmmword_1928DFD50,
                             v175),
                           (float64x2_t)xmmword_1928DFD40,
                           v169),
                         (float64x2_t)xmmword_1928DFD30,
                         v171),
                       (float64x2_t)xmmword_1928DFD50,
                       v172),
                     (float64x2_t)vdupq_n_s64(0x408FF80000000000uLL));
            __asm { FMOV            V20.2D, #0.25 }
            v176 = vadd_s32(vcvt_s32_f32(vrnda_f32(vcvt_f32_f64(vmulq_f64(v177, _Q20)))), (int32x2_t)0x20000000200);
          }
          else
          {
            v176 = 0;
          }
          *v43 = *v43 & ~(1023 << v165) | ((int)((v174 * 0.580573067 + v173 * 0.22495132 + v175 * 0.0507805982) * 1023.0
                                               + 64.0) << v165);
          if (v154 == 2)
            v154 = 0;
          else
            ++v154;
          if ((v80 & 1) != 0)
          {
            v179 = *((unsigned __int8 *)&v200 + v41);
            *v35 = *v35 & ~(1023 << v179) | (v176.i32[0] << v179);
            v180 = (__int32 *)((char *)v35 + ((v179 >> 2) & 0x3C));
            if (v41 == 2)
              v181 = 0;
            else
              v181 = v41 + 1;
            v182 = *((unsigned __int8 *)&v200 + v181);
            *v180 = *v180 & ~(1023 << v182) | (v176.i32[1] << v182);
            v35 = (__int32 *)((char *)v180 + ((v182 >> 2) & 0x3C));
            if (v181 == 2)
              v41 = 0;
            else
              v41 = v181 + 1;
          }
          v152 += 4;
          v40 += v165 >> 4;
          v153 += 4;
          ++v80;
          v151 += 4;
          v43 += v165 >> 4;
        }
        while (v14 != v80);
      }
      v32 = &v197[v193];
      v33 = &v196[v193];
      v26 += 4 * v192;
      ++v19;
      v27 = &v199[v192];
      v30 = v198 + v190;
      v34 = v195 + v190;
      v35 = &v194[v191];
    }
    while (v19 != v23);
  }
  return 0;
}

uint64_t vt_Copy_RGfA_p420ITU709(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, _QWORD *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float *v32;
  float *v33;
  uint64_t v34;
  __int32 *v35;
  uint64_t v36;
  uint64_t v37;
  float *v38;
  float *v39;
  int *v40;
  unsigned int v41;
  unsigned int v42;
  int *v43;
  int *v44;
  int *v45;
  float *v46;
  float *v47;
  float v48;
  float *v49;
  float v50;
  float v51;
  double v52;
  double v53;
  double v54;
  unint64_t v55;
  float *v56;
  float *v57;
  float v58;
  float *v59;
  float v60;
  float v61;
  double v62;
  double v63;
  double v64;
  int32x2_t v65;
  float64x2_t v66;
  unint64_t v71;
  __int32 *v72;
  unsigned int v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  int v90;
  double v91;
  double v92;
  int v93;
  double v94;
  int v95;
  int v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  int v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  int v118;
  double v119;
  int *v120;
  int v121;
  unsigned int *v122;
  double v123;
  int v124;
  int *v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  int v134;
  unsigned int v135;
  double v136;
  double v137;
  unsigned int v138;
  double v139;
  unsigned int v140;
  unsigned int v141;
  double v142;
  double v143;
  double v144;
  unsigned int v145;
  float v146;
  unsigned int v147;
  float v148;
  float *v149;
  float *v150;
  uint64_t v151;
  float *v152;
  float *v153;
  unsigned int v154;
  float *v155;
  float *v156;
  float *v157;
  float v158;
  float *v159;
  float v160;
  float v161;
  double v162;
  double v163;
  double v164;
  unint64_t v165;
  float *v166;
  float *v167;
  float *v168;
  float v169;
  float *v170;
  float v171;
  float v172;
  double v173;
  double v174;
  double v175;
  int32x2_t v176;
  float64x2_t v177;
  unint64_t v179;
  __int32 *v180;
  unsigned int v181;
  unint64_t v182;
  unint64_t v184;
  unsigned int v185;
  unint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  __int32 *v194;
  uint64_t v195;
  float *v196;
  float *v197;
  uint64_t v198;
  int *v199;
  int v200;

  v200 = 1313280;
  v8 = *(_QWORD *)(a2 + 40);
  v9 = (v8 & 1) + v8;
  v10 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v11 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v12 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v13 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v10 >= v13 - v12)
    v14 = v13 - v12;
  else
    v14 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v10;
  if ((unint64_t)((*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE) - v9 >= ((*(_DWORD *)(a6 + 24)
                                                                                    + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE)
                                                                                  - v11)
    v15 = ((*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE) - v11;
  else
    v15 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE) - v9;
  v16 = v13 % 6;
  _CF = v14 >= v16;
  v18 = v14 - v16;
  if (!_CF)
    v18 = 0;
  if (v15 >= 2)
  {
    v19 = 0;
    v20 = v12 / 3;
    v21 = v12 % 3;
    v22 = 6 * (v12 / 6) - v12 + 6;
    v23 = v15 >> 1;
    v24 = a8[1];
    v25 = a7[1] + v24 * (v11 >> 1);
    v26 = *a7 + *a8 * v11 + 4 * v20;
    v27 = (int *)(v26 + *a8);
    v28 = *a3;
    v29 = *a4;
    v30 = *a3 + *a4 * v9;
    v31 = 16 * v10;
    v32 = (float *)(v30 + 16 * v10);
    v33 = (float *)((char *)v32 + v29);
    v193 = (v29 >> 1) & 0x3FFFFFFFFFFFFFFFLL;
    v191 = v24 >> 2;
    v192 = (*a8 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    v190 = 4 * (v29 >> 1);
    v34 = v28 + v29 + v29 * (*(_QWORD *)(a2 + 40) + (*(_QWORD *)(a2 + 40) & 1));
    v35 = (__int32 *)(v25 + 4 * v20);
    v186 = v14;
    v185 = v21;
    v184 = v23;
    do
    {
      v36 = 0;
      v195 = v34;
      v196 = v33;
      v197 = v32;
      v198 = v30;
      v37 = v30;
      v38 = v32;
      v39 = v33;
      v40 = (int *)v26;
      v41 = v21;
      v42 = v21;
      v194 = v35;
      v199 = v27;
      v43 = v27;
      do
      {
        v44 = v43;
        v45 = v40;
        if ((v36 & 1) != 0)
        {
          v49 = (float *)(v37 + v31 - 16);
          v46 = v38 - 3;
          v47 = v38 - 2;
          v48 = *(float *)(v37 + v31);
          v50 = *(float *)(v37 + v31 + 4);
          v51 = *(float *)(v37 + v31 + 8);
        }
        else
        {
          v46 = (float *)(v37 + v31 + 4);
          v47 = (float *)(v37 + v31 + 8);
          v48 = 0.0;
          v49 = v38;
          v50 = 0.0;
          v51 = 0.0;
        }
        v52 = *v49;
        v53 = *v46;
        v54 = *v47;
        v55 = *((unsigned __int8 *)&v200 + v42);
        *v45 = ((int)((v53 * 0.614230588 + v52 * 0.182585882 + v54 * 0.0620070588) * 1023.0 + 64.0) << v55) | *v45 & ~(1023 << v55);
        if ((v36 & 1) != 0)
        {
          v59 = (float *)(v34 + v31 - 16);
          v56 = v39 - 3;
          v57 = v39 - 2;
          v58 = *(float *)(v34 + v31);
          v60 = *(float *)(v34 + v31 + 4);
          v61 = *(float *)(v34 + v31 + 8);
        }
        else
        {
          v56 = (float *)(v34 + v31 + 4);
          v57 = (float *)(v34 + v31 + 8);
          v58 = 0.0;
          v59 = v39;
          v60 = 0.0;
          v61 = 0.0;
        }
        v62 = *v59;
        v63 = *v56;
        v64 = *v57;
        if ((v36 & 1) != 0)
        {
          v66 = vmulq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_1928DFD60, v53), (float64x2_t)xmmword_1928DFD70, v52), (float64x2_t)xmmword_1928DFD80, v54), (float64x2_t)xmmword_1928DFD70, v48), (float64x2_t)xmmword_1928DFD60,
                                  v50),
                                (float64x2_t)xmmword_1928DFD80,
                                v51),
                              (float64x2_t)xmmword_1928DFD70,
                              v62),
                            (float64x2_t)xmmword_1928DFD60,
                            v63),
                          (float64x2_t)xmmword_1928DFD80,
                          v64),
                        (float64x2_t)xmmword_1928DFD70,
                        v58),
                      (float64x2_t)xmmword_1928DFD60,
                      v60),
                    (float64x2_t)xmmword_1928DFD80,
                    v61),
                  (float64x2_t)vdupq_n_s64(0x408FF80000000000uLL));
          __asm { FMOV            V20.2D, #0.25 }
          v65 = vadd_s32(vcvt_s32_f32(vrnda_f32(vcvt_f32_f64(vmulq_f64(v66, _Q20)))), (int32x2_t)0x20000000200);
        }
        else
        {
          v65 = 0;
        }
        *v43 = *v43 & ~(1023 << v55) | ((int)((v63 * 0.614230588 + v62 * 0.182585882 + v64 * 0.0620070588) * 1023.0
                                            + 64.0) << v55);
        if (v42 == 2)
          v42 = 0;
        else
          ++v42;
        if ((v36 & 1) != 0)
        {
          v71 = *((unsigned __int8 *)&v200 + v41);
          *v35 = *v35 & ~(1023 << v71) | (v65.i32[0] << v71);
          v72 = (__int32 *)((char *)v35 + ((v71 >> 2) & 0x3C));
          if (v41 == 2)
            v73 = 0;
          else
            v73 = v41 + 1;
          v74 = *((unsigned __int8 *)&v200 + v73);
          *v72 = *v72 & ~(1023 << v74) | (v65.i32[1] << v74);
          v35 = (__int32 *)((char *)v72 + ((v74 >> 2) & 0x3C));
          if (v73 == 2)
            v41 = 0;
          else
            v41 = v73 + 1;
        }
        v38 += 4;
        v40 = &v45[v55 >> 4];
        v39 += 4;
        ++v36;
        v37 += 16;
        v43 += v55 >> 4;
        v34 += 16;
      }
      while (v22 != v36);
      if (v22 >= v18)
      {
        v150 = (float *)(v37 + v31);
        v149 = (float *)(v34 + v31);
        v80 = v22;
      }
      else
      {
        v188 = v26;
        v189 = v19;
        v75 = 0;
        v187 = v55 >> 2;
        v76 = (v55 >> 2) & 0x3C;
        v77 = (char *)v44 + v76;
        v78 = (char *)v45 + v76;
        v79 = v31;
        v80 = v22;
        do
        {
          v81 = *(float *)(v37 + v79);
          v82 = *(float *)(v37 + v79 + 4);
          v83 = *(float *)(v37 + v79 + 8);
          v84 = *(float *)(v37 + v79 + 16);
          v85 = *(float *)(v37 + v79 + 20);
          v86 = *(float *)(v37 + v79 + 24);
          v87 = *(float *)(v34 + v79);
          v88 = *(float *)(v34 + v79 + 4);
          v89 = *(float *)(v34 + v79 + 8);
          v90 = (int)((v82 * 0.614230588 + v81 * 0.182585882 + v83 * 0.0620070588) * 1023.0 + 64.0);
          v91 = *(float *)(v34 + v79 + 16);
          v92 = *(float *)(v34 + v79 + 20);
          v93 = (int)((v85 * 0.614230588 + v84 * 0.182585882 + v86 * 0.0620070588) * 1023.0 + 64.0);
          v94 = *(float *)(v34 + v79 + 24);
          v95 = (int)((v88 * 0.614230588 + v87 * 0.182585882 + v89 * 0.0620070588) * 1023.0 + 64.0);
          v96 = (int)((v92 * 0.614230588 + v91 * 0.182585882 + v94 * 0.0620070588) * 1023.0 + 64.0);
          v97 = v82 * -0.338572047 + v81 * -0.100643639 + v83 * 0.439215686 + v84 * -0.100643639;
          v98 = v82 * -0.398942243 + v81 * 0.439215686 + v83 * -0.0402734431 + v84 * 0.439215686 + v85 * -0.398942243;
          v99 = *(float *)(v37 + v79 + 32);
          v100 = v97 + v85 * -0.338572047 + v86 * 0.439215686;
          v101 = *(float *)(v37 + v79 + 36);
          v102 = *(float *)(v37 + v79 + 40);
          v103 = v98 + v86 * -0.0402734431;
          v104 = v100 + v87 * -0.100643639;
          v105 = *(float *)(v37 + v79 + 48);
          v106 = *(float *)(v37 + v79 + 52);
          v107 = v103 + v87 * 0.439215686;
          v108 = *(float *)(v37 + v79 + 56);
          v109 = (int)((v106 * 0.614230588 + v105 * 0.182585882 + v108 * 0.0620070588) * 1023.0 + 64.0);
          v110 = *(float *)(v34 + v79 + 32);
          v111 = *(float *)(v34 + v79 + 36);
          v112 = *(float *)(v34 + v79 + 40);
          v113 = v104 + v88 * -0.338572047 + v89 * 0.439215686;
          v114 = v107 + v88 * -0.398942243 + v89 * -0.0402734431;
          v115 = *(float *)(v34 + v79 + 48);
          v116 = *(float *)(v34 + v79 + 52);
          v117 = *(float *)(v34 + v79 + 56);
          v118 = (int)((v116 * 0.614230588 + v115 * 0.182585882 + v117 * 0.0620070588) * 1023.0 + 64.0);
          v119 = v113 + v91 * -0.100643639 + v92 * -0.338572047;
          v120 = (int *)&v77[v75];
          v121 = v90 | (v93 << 10);
          v122 = (unsigned int *)&v35[v75 / 4];
          v123 = v114 + v91 * 0.439215686 + v92 * -0.398942243 + v94 * -0.0402734431;
          v124 = v95 | (v96 << 10);
          v125 = (int *)&v78[v75];
          *v125 = v121 | ((int)((v101 * 0.614230588 + v99 * 0.182585882 + v102 * 0.0620070588) * 1023.0 + 64.0) << 20);
          *v120 = v124 | ((int)((v111 * 0.614230588 + v110 * 0.182585882 + v112 * 0.0620070588) * 1023.0 + 64.0) << 20);
          v126 = (v101 * -0.338572047
                + v99 * -0.100643639
                + v102 * 0.439215686
                + v105 * -0.100643639
                + v106 * -0.338572047
                + v108 * 0.439215686
                + v110 * -0.100643639
                + v111 * -0.338572047
                + v112 * 0.439215686
                + v115 * -0.100643639
                + v116 * -0.338572047
                + v117 * 0.439215686)
               * 1023.0
               * 0.25;
          v127 = (v101 * -0.398942243
                + v99 * 0.439215686
                + v102 * -0.0402734431
                + v105 * 0.439215686
                + v106 * -0.398942243
                + v108 * -0.0402734431
                + v110 * 0.439215686
                + v111 * -0.398942243
                + v112 * -0.0402734431
                + v115 * 0.439215686
                + v116 * -0.398942243
                + v117 * -0.0402734431)
               * 1023.0;
          v128 = *(float *)(v37 + v79 + 64);
          v129 = *(float *)(v37 + v79 + 68);
          v130 = *(float *)(v37 + v79 + 72);
          *(float *)&v94 = (v119 + v94 * 0.439215686) * 1023.0 * 0.25;
          *(float *)&v123 = v123 * 1023.0 * 0.25;
          v131 = *(float *)(v37 + v79 + 80);
          v132 = *(float *)(v37 + v79 + 84);
          *(float *)&v126 = v126;
          v133 = *(float *)(v37 + v79 + 88);
          *(float *)&v127 = v127 * 0.25;
          v134 = v109 | ((int)((v129 * 0.614230588 + v128 * 0.182585882 + v130 * 0.0620070588) * 1023.0 + 64.0) << 10) | ((int)((v132 * 0.614230588 + v131 * 0.182585882 + v133 * 0.0620070588) * 1023.0 + 64.0) << 20);
          v135 = llroundf(*(float *)&v94);
          v136 = *(float *)(v34 + v79 + 64);
          v137 = *(float *)(v34 + v79 + 68);
          v138 = llroundf(*(float *)&v123);
          v139 = *(float *)(v34 + v79 + 72);
          v140 = llroundf(*(float *)&v126);
          v141 = llroundf(*(float *)&v127);
          v142 = *(float *)(v34 + v79 + 80);
          v143 = *(float *)(v34 + v79 + 84);
          v144 = *(float *)(v34 + v79 + 88);
          v145 = v141 + 512;
          v146 = (v129 * -0.338572047
                + v128 * -0.100643639
                + v130 * 0.439215686
                + v131 * -0.100643639
                + v132 * -0.338572047
                + v133 * 0.439215686
                + v136 * -0.100643639
                + v137 * -0.338572047
                + v139 * 0.439215686
                + v142 * -0.100643639
                + v143 * -0.338572047
                + v144 * 0.439215686)
               * 1023.0
               * 0.25;
          v147 = llroundf(v146);
          *v122 = ((v138 << 10) + 0x80000) | (v135 + 512) | ((v140 << 20) + 0x20000000);
          v148 = (v129 * -0.398942243
                + v128 * 0.439215686
                + v130 * -0.0402734431
                + v131 * 0.439215686
                + v132 * -0.398942243
                + v133 * -0.0402734431
                + v136 * 0.439215686
                + v137 * -0.398942243
                + v139 * -0.0402734431
                + v142 * 0.439215686
                + v143 * -0.398942243
                + v144 * -0.0402734431)
               * 1023.0
               * 0.25;
          v125[1] = v134;
          v120[1] = v118 | ((int)((v137 * 0.614230588 + v136 * 0.182585882 + v139 * 0.0620070588) * 1023.0 + 64.0) << 10) | ((int)((v143 * 0.614230588 + v142 * 0.182585882 + v144 * 0.0620070588) * 1023.0 + 64.0) << 20);
          v122[1] = ((llroundf(v148) << 20) + 0x20000000) | v145 | ((v147 << 10) + 0x80000);
          v80 += 6;
          v75 += 8;
          v79 += 96;
        }
        while (v80 < v18);
        v14 = v186;
        v43 = (int *)((char *)v44 + (v187 & 0x3C) + v75);
        v35 = (__int32 *)((char *)v35 + v75);
        v40 = (int *)((char *)v45 + (v187 & 0x3C) + v75);
        v149 = (float *)(v34 + v79);
        v150 = (float *)(v37 + v79);
        v26 = v188;
        v19 = v189;
        v21 = v185;
        v23 = v184;
      }
      if (v80 < v14)
      {
        v151 = 0;
        v152 = v150;
        v153 = v149;
        v154 = v18 % 3;
        do
        {
          v155 = &v150[v151];
          if ((v80 & 1) != 0)
          {
            v159 = v155 - 4;
            v156 = v152 - 3;
            v157 = v152 - 2;
            v158 = *v155;
            v160 = v155[1];
            v161 = v155[2];
          }
          else
          {
            v156 = v155 + 1;
            v157 = v155 + 2;
            v158 = 0.0;
            v159 = v152;
            v160 = 0.0;
            v161 = 0.0;
          }
          v162 = *v159;
          v163 = *v156;
          v164 = *v157;
          v165 = *((unsigned __int8 *)&v200 + v154);
          *v40 = ((int)((v163 * 0.614230588 + v162 * 0.182585882 + v164 * 0.0620070588) * 1023.0 + 64.0) << v165) | *v40 & ~(1023 << v165);
          v166 = &v149[v151];
          if ((v80 & 1) != 0)
          {
            v170 = v166 - 4;
            v167 = v153 - 3;
            v168 = v153 - 2;
            v169 = *v166;
            v171 = v166[1];
            v172 = v166[2];
          }
          else
          {
            v167 = v166 + 1;
            v168 = v166 + 2;
            v169 = 0.0;
            v170 = v153;
            v171 = 0.0;
            v172 = 0.0;
          }
          v173 = *v170;
          v174 = *v167;
          v175 = *v168;
          if ((v80 & 1) != 0)
          {
            v177 = vmulq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_1928DFD60, v163), (float64x2_t)xmmword_1928DFD70, v162), (float64x2_t)xmmword_1928DFD80, v164), (float64x2_t)xmmword_1928DFD70, v158), (float64x2_t)xmmword_1928DFD60,
                                     v160),
                                   (float64x2_t)xmmword_1928DFD80,
                                   v161),
                                 (float64x2_t)xmmword_1928DFD70,
                                 v173),
                               (float64x2_t)xmmword_1928DFD60,
                               v174),
                             (float64x2_t)xmmword_1928DFD80,
                             v175),
                           (float64x2_t)xmmword_1928DFD70,
                           v169),
                         (float64x2_t)xmmword_1928DFD60,
                         v171),
                       (float64x2_t)xmmword_1928DFD80,
                       v172),
                     (float64x2_t)vdupq_n_s64(0x408FF80000000000uLL));
            __asm { FMOV            V20.2D, #0.25 }
            v176 = vadd_s32(vcvt_s32_f32(vrnda_f32(vcvt_f32_f64(vmulq_f64(v177, _Q20)))), (int32x2_t)0x20000000200);
          }
          else
          {
            v176 = 0;
          }
          *v43 = *v43 & ~(1023 << v165) | ((int)((v174 * 0.614230588 + v173 * 0.182585882 + v175 * 0.0620070588)
                                               * 1023.0
                                               + 64.0) << v165);
          if (v154 == 2)
            v154 = 0;
          else
            ++v154;
          if ((v80 & 1) != 0)
          {
            v179 = *((unsigned __int8 *)&v200 + v41);
            *v35 = *v35 & ~(1023 << v179) | (v176.i32[0] << v179);
            v180 = (__int32 *)((char *)v35 + ((v179 >> 2) & 0x3C));
            if (v41 == 2)
              v181 = 0;
            else
              v181 = v41 + 1;
            v182 = *((unsigned __int8 *)&v200 + v181);
            *v180 = *v180 & ~(1023 << v182) | (v176.i32[1] << v182);
            v35 = (__int32 *)((char *)v180 + ((v182 >> 2) & 0x3C));
            if (v181 == 2)
              v41 = 0;
            else
              v41 = v181 + 1;
          }
          v152 += 4;
          v40 += v165 >> 4;
          v153 += 4;
          ++v80;
          v151 += 4;
          v43 += v165 >> 4;
        }
        while (v14 != v80);
      }
      v32 = &v197[v193];
      v33 = &v196[v193];
      v26 += 4 * v192;
      ++v19;
      v27 = &v199[v192];
      v30 = v198 + v190;
      v34 = v195 + v190;
      v35 = &v194[v191];
    }
    while (v19 != v23);
  }
  return 0;
}

uint64_t vt_Copy_RGfA_p420ITU601(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, _QWORD *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float *v32;
  float *v33;
  uint64_t v34;
  __int32 *v35;
  uint64_t v36;
  uint64_t v37;
  float *v38;
  float *v39;
  int *v40;
  unsigned int v41;
  unsigned int v42;
  int *v43;
  int *v44;
  int *v45;
  float *v46;
  float *v47;
  float v48;
  float *v49;
  float v50;
  float v51;
  double v52;
  double v53;
  double v54;
  unint64_t v55;
  float *v56;
  float *v57;
  float v58;
  float *v59;
  float v60;
  float v61;
  double v62;
  double v63;
  double v64;
  int32x2_t v65;
  float64x2_t v66;
  unint64_t v71;
  __int32 *v72;
  unsigned int v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  int v90;
  double v91;
  double v92;
  int v93;
  double v94;
  int v95;
  int v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  int v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  int v118;
  double v119;
  int *v120;
  int v121;
  unsigned int *v122;
  double v123;
  int v124;
  int *v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  int v134;
  unsigned int v135;
  double v136;
  double v137;
  unsigned int v138;
  double v139;
  unsigned int v140;
  unsigned int v141;
  double v142;
  double v143;
  double v144;
  unsigned int v145;
  float v146;
  unsigned int v147;
  float v148;
  float *v149;
  float *v150;
  uint64_t v151;
  float *v152;
  float *v153;
  unsigned int v154;
  float *v155;
  float *v156;
  float *v157;
  float v158;
  float *v159;
  float v160;
  float v161;
  double v162;
  double v163;
  double v164;
  unint64_t v165;
  float *v166;
  float *v167;
  float *v168;
  float v169;
  float *v170;
  float v171;
  float v172;
  double v173;
  double v174;
  double v175;
  int32x2_t v176;
  float64x2_t v177;
  unint64_t v179;
  __int32 *v180;
  unsigned int v181;
  unint64_t v182;
  unint64_t v184;
  unsigned int v185;
  unint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  __int32 *v194;
  uint64_t v195;
  float *v196;
  float *v197;
  uint64_t v198;
  int *v199;
  int v200;

  v200 = 1313280;
  v8 = *(_QWORD *)(a2 + 40);
  v9 = (v8 & 1) + v8;
  v10 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v11 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v12 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v13 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v10 >= v13 - v12)
    v14 = v13 - v12;
  else
    v14 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v10;
  if ((unint64_t)((*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE) - v9 >= ((*(_DWORD *)(a6 + 24)
                                                                                    + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE)
                                                                                  - v11)
    v15 = ((*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE) - v11;
  else
    v15 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE) - v9;
  v16 = v13 % 6;
  _CF = v14 >= v16;
  v18 = v14 - v16;
  if (!_CF)
    v18 = 0;
  if (v15 >= 2)
  {
    v19 = 0;
    v20 = v12 / 3;
    v21 = v12 % 3;
    v22 = 6 * (v12 / 6) - v12 + 6;
    v23 = v15 >> 1;
    v24 = a8[1];
    v25 = a7[1] + v24 * (v11 >> 1);
    v26 = *a7 + *a8 * v11 + 4 * v20;
    v27 = (int *)(v26 + *a8);
    v28 = *a3;
    v29 = *a4;
    v30 = *a3 + *a4 * v9;
    v31 = 16 * v10;
    v32 = (float *)(v30 + 16 * v10);
    v33 = (float *)((char *)v32 + v29);
    v193 = (v29 >> 1) & 0x3FFFFFFFFFFFFFFFLL;
    v191 = v24 >> 2;
    v192 = (*a8 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    v190 = 4 * (v29 >> 1);
    v34 = v28 + v29 + v29 * (*(_QWORD *)(a2 + 40) + (*(_QWORD *)(a2 + 40) & 1));
    v35 = (__int32 *)(v25 + 4 * v20);
    v186 = v14;
    v185 = v21;
    v184 = v23;
    do
    {
      v36 = 0;
      v195 = v34;
      v196 = v33;
      v197 = v32;
      v198 = v30;
      v37 = v30;
      v38 = v32;
      v39 = v33;
      v40 = (int *)v26;
      v41 = v21;
      v42 = v21;
      v194 = v35;
      v199 = v27;
      v43 = v27;
      do
      {
        v44 = v43;
        v45 = v40;
        if ((v36 & 1) != 0)
        {
          v49 = (float *)(v37 + v31 - 16);
          v46 = v38 - 3;
          v47 = v38 - 2;
          v48 = *(float *)(v37 + v31);
          v50 = *(float *)(v37 + v31 + 4);
          v51 = *(float *)(v37 + v31 + 8);
        }
        else
        {
          v46 = (float *)(v37 + v31 + 4);
          v47 = (float *)(v37 + v31 + 8);
          v48 = 0.0;
          v49 = v38;
          v50 = 0.0;
          v51 = 0.0;
        }
        v52 = *v49;
        v53 = *v46;
        v54 = *v47;
        v55 = *((unsigned __int8 *)&v200 + v42);
        *v45 = ((int)((v53 * 0.504129412 + v52 * 0.256788235 + v54 * 0.0979058824) * 1023.0 + 64.0) << v55) | *v45 & ~(1023 << v55);
        if ((v36 & 1) != 0)
        {
          v59 = (float *)(v34 + v31 - 16);
          v56 = v39 - 3;
          v57 = v39 - 2;
          v58 = *(float *)(v34 + v31);
          v60 = *(float *)(v34 + v31 + 4);
          v61 = *(float *)(v34 + v31 + 8);
        }
        else
        {
          v56 = (float *)(v34 + v31 + 4);
          v57 = (float *)(v34 + v31 + 8);
          v58 = 0.0;
          v59 = v39;
          v60 = 0.0;
          v61 = 0.0;
        }
        v62 = *v59;
        v63 = *v56;
        v64 = *v57;
        if ((v36 & 1) != 0)
        {
          v66 = vmulq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_1928DFD90, v53), (float64x2_t)xmmword_1928DFDA0, v52), (float64x2_t)xmmword_1928DFDB0, v54), (float64x2_t)xmmword_1928DFDA0, v48), (float64x2_t)xmmword_1928DFD90,
                                  v50),
                                (float64x2_t)xmmword_1928DFDB0,
                                v51),
                              (float64x2_t)xmmword_1928DFDA0,
                              v62),
                            (float64x2_t)xmmword_1928DFD90,
                            v63),
                          (float64x2_t)xmmword_1928DFDB0,
                          v64),
                        (float64x2_t)xmmword_1928DFDA0,
                        v58),
                      (float64x2_t)xmmword_1928DFD90,
                      v60),
                    (float64x2_t)xmmword_1928DFDB0,
                    v61),
                  (float64x2_t)vdupq_n_s64(0x408FF80000000000uLL));
          __asm { FMOV            V20.2D, #0.25 }
          v65 = vadd_s32(vcvt_s32_f32(vrnda_f32(vcvt_f32_f64(vmulq_f64(v66, _Q20)))), (int32x2_t)0x20000000200);
        }
        else
        {
          v65 = 0;
        }
        *v43 = *v43 & ~(1023 << v55) | ((int)((v63 * 0.504129412 + v62 * 0.256788235 + v64 * 0.0979058824) * 1023.0
                                            + 64.0) << v55);
        if (v42 == 2)
          v42 = 0;
        else
          ++v42;
        if ((v36 & 1) != 0)
        {
          v71 = *((unsigned __int8 *)&v200 + v41);
          *v35 = *v35 & ~(1023 << v71) | (v65.i32[0] << v71);
          v72 = (__int32 *)((char *)v35 + ((v71 >> 2) & 0x3C));
          if (v41 == 2)
            v73 = 0;
          else
            v73 = v41 + 1;
          v74 = *((unsigned __int8 *)&v200 + v73);
          *v72 = *v72 & ~(1023 << v74) | (v65.i32[1] << v74);
          v35 = (__int32 *)((char *)v72 + ((v74 >> 2) & 0x3C));
          if (v73 == 2)
            v41 = 0;
          else
            v41 = v73 + 1;
        }
        v38 += 4;
        v40 = &v45[v55 >> 4];
        v39 += 4;
        ++v36;
        v37 += 16;
        v43 += v55 >> 4;
        v34 += 16;
      }
      while (v22 != v36);
      if (v22 >= v18)
      {
        v150 = (float *)(v37 + v31);
        v149 = (float *)(v34 + v31);
        v80 = v22;
      }
      else
      {
        v188 = v26;
        v189 = v19;
        v75 = 0;
        v187 = v55 >> 2;
        v76 = (v55 >> 2) & 0x3C;
        v77 = (char *)v44 + v76;
        v78 = (char *)v45 + v76;
        v79 = v31;
        v80 = v22;
        do
        {
          v81 = *(float *)(v37 + v79);
          v82 = *(float *)(v37 + v79 + 4);
          v83 = *(float *)(v37 + v79 + 8);
          v84 = *(float *)(v37 + v79 + 16);
          v85 = *(float *)(v37 + v79 + 20);
          v86 = *(float *)(v37 + v79 + 24);
          v87 = *(float *)(v34 + v79);
          v88 = *(float *)(v34 + v79 + 4);
          v89 = *(float *)(v34 + v79 + 8);
          v90 = (int)((v82 * 0.504129412 + v81 * 0.256788235 + v83 * 0.0979058824) * 1023.0 + 64.0);
          v91 = *(float *)(v34 + v79 + 16);
          v92 = *(float *)(v34 + v79 + 20);
          v93 = (int)((v85 * 0.504129412 + v84 * 0.256788235 + v86 * 0.0979058824) * 1023.0 + 64.0);
          v94 = *(float *)(v34 + v79 + 24);
          v95 = (int)((v88 * 0.504129412 + v87 * 0.256788235 + v89 * 0.0979058824) * 1023.0 + 64.0);
          v96 = (int)((v92 * 0.504129412 + v91 * 0.256788235 + v94 * 0.0979058824) * 1023.0 + 64.0);
          v97 = v82 * -0.29099269 + v81 * -0.148222996 + v83 * 0.439215686 + v84 * -0.148222996;
          v98 = v82 * -0.367788675 + v81 * 0.439215686 + v83 * -0.0714270118 + v84 * 0.439215686 + v85 * -0.367788675;
          v99 = *(float *)(v37 + v79 + 32);
          v100 = v97 + v85 * -0.29099269 + v86 * 0.439215686;
          v101 = *(float *)(v37 + v79 + 36);
          v102 = *(float *)(v37 + v79 + 40);
          v103 = v98 + v86 * -0.0714270118;
          v104 = v100 + v87 * -0.148222996;
          v105 = *(float *)(v37 + v79 + 48);
          v106 = *(float *)(v37 + v79 + 52);
          v107 = v103 + v87 * 0.439215686;
          v108 = *(float *)(v37 + v79 + 56);
          v109 = (int)((v106 * 0.504129412 + v105 * 0.256788235 + v108 * 0.0979058824) * 1023.0 + 64.0);
          v110 = *(float *)(v34 + v79 + 32);
          v111 = *(float *)(v34 + v79 + 36);
          v112 = *(float *)(v34 + v79 + 40);
          v113 = v104 + v88 * -0.29099269 + v89 * 0.439215686;
          v114 = v107 + v88 * -0.367788675 + v89 * -0.0714270118;
          v115 = *(float *)(v34 + v79 + 48);
          v116 = *(float *)(v34 + v79 + 52);
          v117 = *(float *)(v34 + v79 + 56);
          v118 = (int)((v116 * 0.504129412 + v115 * 0.256788235 + v117 * 0.0979058824) * 1023.0 + 64.0);
          v119 = v113 + v91 * -0.148222996 + v92 * -0.29099269;
          v120 = (int *)&v77[v75];
          v121 = v90 | (v93 << 10);
          v122 = (unsigned int *)&v35[v75 / 4];
          v123 = v114 + v91 * 0.439215686 + v92 * -0.367788675 + v94 * -0.0714270118;
          v124 = v95 | (v96 << 10);
          v125 = (int *)&v78[v75];
          *v125 = v121 | ((int)((v101 * 0.504129412 + v99 * 0.256788235 + v102 * 0.0979058824) * 1023.0 + 64.0) << 20);
          *v120 = v124 | ((int)((v111 * 0.504129412 + v110 * 0.256788235 + v112 * 0.0979058824) * 1023.0 + 64.0) << 20);
          v126 = (v101 * -0.29099269
                + v99 * -0.148222996
                + v102 * 0.439215686
                + v105 * -0.148222996
                + v106 * -0.29099269
                + v108 * 0.439215686
                + v110 * -0.148222996
                + v111 * -0.29099269
                + v112 * 0.439215686
                + v115 * -0.148222996
                + v116 * -0.29099269
                + v117 * 0.439215686)
               * 1023.0
               * 0.25;
          v127 = (v101 * -0.367788675
                + v99 * 0.439215686
                + v102 * -0.0714270118
                + v105 * 0.439215686
                + v106 * -0.367788675
                + v108 * -0.0714270118
                + v110 * 0.439215686
                + v111 * -0.367788675
                + v112 * -0.0714270118
                + v115 * 0.439215686
                + v116 * -0.367788675
                + v117 * -0.0714270118)
               * 1023.0;
          v128 = *(float *)(v37 + v79 + 64);
          v129 = *(float *)(v37 + v79 + 68);
          v130 = *(float *)(v37 + v79 + 72);
          *(float *)&v94 = (v119 + v94 * 0.439215686) * 1023.0 * 0.25;
          *(float *)&v123 = v123 * 1023.0 * 0.25;
          v131 = *(float *)(v37 + v79 + 80);
          v132 = *(float *)(v37 + v79 + 84);
          *(float *)&v126 = v126;
          v133 = *(float *)(v37 + v79 + 88);
          *(float *)&v127 = v127 * 0.25;
          v134 = v109 | ((int)((v129 * 0.504129412 + v128 * 0.256788235 + v130 * 0.0979058824) * 1023.0 + 64.0) << 10) | ((int)((v132 * 0.504129412 + v131 * 0.256788235 + v133 * 0.0979058824) * 1023.0 + 64.0) << 20);
          v135 = llroundf(*(float *)&v94);
          v136 = *(float *)(v34 + v79 + 64);
          v137 = *(float *)(v34 + v79 + 68);
          v138 = llroundf(*(float *)&v123);
          v139 = *(float *)(v34 + v79 + 72);
          v140 = llroundf(*(float *)&v126);
          v141 = llroundf(*(float *)&v127);
          v142 = *(float *)(v34 + v79 + 80);
          v143 = *(float *)(v34 + v79 + 84);
          v144 = *(float *)(v34 + v79 + 88);
          v145 = v141 + 512;
          v146 = (v129 * -0.29099269
                + v128 * -0.148222996
                + v130 * 0.439215686
                + v131 * -0.148222996
                + v132 * -0.29099269
                + v133 * 0.439215686
                + v136 * -0.148222996
                + v137 * -0.29099269
                + v139 * 0.439215686
                + v142 * -0.148222996
                + v143 * -0.29099269
                + v144 * 0.439215686)
               * 1023.0
               * 0.25;
          v147 = llroundf(v146);
          *v122 = ((v138 << 10) + 0x80000) | (v135 + 512) | ((v140 << 20) + 0x20000000);
          v148 = (v129 * -0.367788675
                + v128 * 0.439215686
                + v130 * -0.0714270118
                + v131 * 0.439215686
                + v132 * -0.367788675
                + v133 * -0.0714270118
                + v136 * 0.439215686
                + v137 * -0.367788675
                + v139 * -0.0714270118
                + v142 * 0.439215686
                + v143 * -0.367788675
                + v144 * -0.0714270118)
               * 1023.0
               * 0.25;
          v125[1] = v134;
          v120[1] = v118 | ((int)((v137 * 0.504129412 + v136 * 0.256788235 + v139 * 0.0979058824) * 1023.0 + 64.0) << 10) | ((int)((v143 * 0.504129412 + v142 * 0.256788235 + v144 * 0.0979058824) * 1023.0 + 64.0) << 20);
          v122[1] = ((llroundf(v148) << 20) + 0x20000000) | v145 | ((v147 << 10) + 0x80000);
          v80 += 6;
          v75 += 8;
          v79 += 96;
        }
        while (v80 < v18);
        v14 = v186;
        v43 = (int *)((char *)v44 + (v187 & 0x3C) + v75);
        v35 = (__int32 *)((char *)v35 + v75);
        v40 = (int *)((char *)v45 + (v187 & 0x3C) + v75);
        v149 = (float *)(v34 + v79);
        v150 = (float *)(v37 + v79);
        v26 = v188;
        v19 = v189;
        v21 = v185;
        v23 = v184;
      }
      if (v80 < v14)
      {
        v151 = 0;
        v152 = v150;
        v153 = v149;
        v154 = v18 % 3;
        do
        {
          v155 = &v150[v151];
          if ((v80 & 1) != 0)
          {
            v159 = v155 - 4;
            v156 = v152 - 3;
            v157 = v152 - 2;
            v158 = *v155;
            v160 = v155[1];
            v161 = v155[2];
          }
          else
          {
            v156 = v155 + 1;
            v157 = v155 + 2;
            v158 = 0.0;
            v159 = v152;
            v160 = 0.0;
            v161 = 0.0;
          }
          v162 = *v159;
          v163 = *v156;
          v164 = *v157;
          v165 = *((unsigned __int8 *)&v200 + v154);
          *v40 = ((int)((v163 * 0.504129412 + v162 * 0.256788235 + v164 * 0.0979058824) * 1023.0 + 64.0) << v165) | *v40 & ~(1023 << v165);
          v166 = &v149[v151];
          if ((v80 & 1) != 0)
          {
            v170 = v166 - 4;
            v167 = v153 - 3;
            v168 = v153 - 2;
            v169 = *v166;
            v171 = v166[1];
            v172 = v166[2];
          }
          else
          {
            v167 = v166 + 1;
            v168 = v166 + 2;
            v169 = 0.0;
            v170 = v153;
            v171 = 0.0;
            v172 = 0.0;
          }
          v173 = *v170;
          v174 = *v167;
          v175 = *v168;
          if ((v80 & 1) != 0)
          {
            v177 = vmulq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_1928DFD90, v163), (float64x2_t)xmmword_1928DFDA0, v162), (float64x2_t)xmmword_1928DFDB0, v164), (float64x2_t)xmmword_1928DFDA0, v158), (float64x2_t)xmmword_1928DFD90,
                                     v160),
                                   (float64x2_t)xmmword_1928DFDB0,
                                   v161),
                                 (float64x2_t)xmmword_1928DFDA0,
                                 v173),
                               (float64x2_t)xmmword_1928DFD90,
                               v174),
                             (float64x2_t)xmmword_1928DFDB0,
                             v175),
                           (float64x2_t)xmmword_1928DFDA0,
                           v169),
                         (float64x2_t)xmmword_1928DFD90,
                         v171),
                       (float64x2_t)xmmword_1928DFDB0,
                       v172),
                     (float64x2_t)vdupq_n_s64(0x408FF80000000000uLL));
            __asm { FMOV            V20.2D, #0.25 }
            v176 = vadd_s32(vcvt_s32_f32(vrnda_f32(vcvt_f32_f64(vmulq_f64(v177, _Q20)))), (int32x2_t)0x20000000200);
          }
          else
          {
            v176 = 0;
          }
          *v43 = *v43 & ~(1023 << v165) | ((int)((v174 * 0.504129412 + v173 * 0.256788235 + v175 * 0.0979058824)
                                               * 1023.0
                                               + 64.0) << v165);
          if (v154 == 2)
            v154 = 0;
          else
            ++v154;
          if ((v80 & 1) != 0)
          {
            v179 = *((unsigned __int8 *)&v200 + v41);
            *v35 = *v35 & ~(1023 << v179) | (v176.i32[0] << v179);
            v180 = (__int32 *)((char *)v35 + ((v179 >> 2) & 0x3C));
            if (v41 == 2)
              v181 = 0;
            else
              v181 = v41 + 1;
            v182 = *((unsigned __int8 *)&v200 + v181);
            *v180 = *v180 & ~(1023 << v182) | (v176.i32[1] << v182);
            v35 = (__int32 *)((char *)v180 + ((v182 >> 2) & 0x3C));
            if (v181 == 2)
              v41 = 0;
            else
              v41 = v181 + 1;
          }
          v152 += 4;
          v40 += v165 >> 4;
          v153 += 4;
          ++v80;
          v151 += 4;
          v43 += v165 >> 4;
        }
        while (v14 != v80);
      }
      v32 = &v197[v193];
      v33 = &v196[v193];
      v26 += 4 * v192;
      ++v19;
      v27 = &v199[v192];
      v30 = v198 + v190;
      v34 = v195 + v190;
      v35 = &v194[v191];
    }
    while (v19 != v23);
  }
  return 0;
}

uint64_t vt_Copy_RGfA_pf20ITU2020(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, _QWORD *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float *v32;
  float *v33;
  uint64_t v34;
  __int32 *v35;
  uint64_t v36;
  uint64_t v37;
  float *v38;
  float *v39;
  _DWORD *v40;
  unsigned int v41;
  unsigned int v42;
  int *v43;
  int *v44;
  _DWORD *v45;
  float *v46;
  float *v47;
  float v48;
  float *v49;
  float v50;
  float v51;
  double v52;
  double v53;
  double v54;
  unint64_t v55;
  float *v56;
  float *v57;
  float v58;
  float *v59;
  float v60;
  float v61;
  double v62;
  double v63;
  double v64;
  int32x2_t v65;
  float64x2_t v66;
  unint64_t v71;
  __int32 *v72;
  unsigned int v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  int v90;
  double v91;
  double v92;
  int v93;
  double v94;
  int v95;
  int v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  int v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  int v118;
  double v119;
  int *v120;
  int v121;
  unsigned int *v122;
  double v123;
  int v124;
  int *v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  int v134;
  unsigned int v135;
  double v136;
  double v137;
  unsigned int v138;
  double v139;
  unsigned int v140;
  unsigned int v141;
  double v142;
  double v143;
  unsigned int v144;
  double v145;
  int v146;
  uint64_t v147;
  float *v148;
  float *v149;
  uint64_t v150;
  float *v151;
  float *v152;
  unsigned int v153;
  float *v154;
  float *v155;
  float v156;
  float *v157;
  float v158;
  float v159;
  double v160;
  double v161;
  double v162;
  unint64_t v163;
  float *v164;
  float *v165;
  float v166;
  float *v167;
  float v168;
  float v169;
  double v170;
  double v171;
  double v172;
  int32x2_t v173;
  float64x2_t v174;
  unint64_t v176;
  __int32 *v177;
  unsigned int v178;
  unint64_t v179;
  unint64_t v181;
  unsigned int v182;
  unint64_t v183;
  int *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  __int32 *v191;
  uint64_t v192;
  float *v193;
  float *v194;
  uint64_t v195;
  int v196;

  v196 = 1313280;
  v8 = *(_QWORD *)(a2 + 40);
  v9 = (v8 & 1) + v8;
  v10 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v11 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v12 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v13 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v14 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v10;
  if (v14 >= v13 - v12)
    v14 = v13 - v12;
  if ((unint64_t)((*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE) - v9 >= ((*(_DWORD *)(a6 + 24)
                                                                                    + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE)
                                                                                  - v11)
    v15 = ((*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE) - v11;
  else
    v15 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE) - v9;
  v16 = v13 % 6;
  _CF = v14 >= v16;
  v18 = v14 - v16;
  if (!_CF)
    v18 = 0;
  if (v15 >= 2)
  {
    v19 = 0;
    v20 = v12 / 3;
    v21 = v12 % 3;
    v22 = 6 * (v12 / 6) - v12 + 6;
    v23 = v15 >> 1;
    v24 = a8[1];
    v25 = a7[1] + v24 * (v11 >> 1);
    v26 = *a7 + *a8 * v11 + 4 * v20;
    v27 = (int *)(v26 + *a8);
    v28 = *a3;
    v29 = *a4;
    v30 = *a3 + *a4 * v9;
    v31 = 16 * v10;
    v32 = (float *)(v30 + 16 * v10);
    v33 = (float *)((char *)v32 + *a4);
    v190 = (v29 >> 1) & 0x3FFFFFFFFFFFFFFFLL;
    v189 = (*a8 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    v187 = 4 * (v29 >> 1);
    v188 = v24 >> 2;
    v34 = v28 + v29 + v29 * (v8 + (v8 & 1));
    v35 = (__int32 *)(v25 + 4 * v20);
    v182 = v21;
    v181 = v23;
    do
    {
      v36 = 0;
      v192 = v34;
      v193 = v33;
      v194 = v32;
      v195 = v30;
      v37 = v30;
      v38 = v32;
      v39 = v33;
      v40 = (_DWORD *)v26;
      v41 = v21;
      v42 = v21;
      v191 = v35;
      v43 = v27;
      do
      {
        v44 = v43;
        v45 = v40;
        if ((v36 & 1) != 0)
        {
          v49 = (float *)(v37 + v31 - 16);
          v46 = v38 - 3;
          v47 = v38 - 2;
          v48 = *(float *)(v37 + v31);
          v50 = *(float *)(v37 + v31 + 4);
          v51 = *(float *)(v37 + v31 + 8);
        }
        else
        {
          v46 = (float *)(v37 + v31 + 4);
          v47 = (float *)(v37 + v31 + 8);
          v48 = 0.0;
          v49 = v38;
          v50 = 0.0;
          v51 = 0.0;
        }
        v52 = *v49;
        v53 = *v46;
        v54 = *v47;
        v55 = *((unsigned __int8 *)&v196 + v42);
        *v40 = ((int)((v53 * 0.677998 + v52 * 0.2627 + v54 * 0.059302) * 1023.0 + 0.0) << v55) | *v40 & ~(1023 << v55);
        if ((v36 & 1) != 0)
        {
          v59 = (float *)(v34 + v31 - 16);
          v56 = v39 - 3;
          v57 = v39 - 2;
          v58 = *(float *)(v34 + v31);
          v60 = *(float *)(v34 + v31 + 4);
          v61 = *(float *)(v34 + v31 + 8);
        }
        else
        {
          v56 = (float *)(v34 + v31 + 4);
          v57 = (float *)(v34 + v31 + 8);
          v58 = 0.0;
          v59 = v39;
          v60 = 0.0;
          v61 = 0.0;
        }
        v62 = *v59;
        v63 = *v56;
        v64 = *v57;
        if ((v36 & 1) != 0)
        {
          v66 = vmulq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_1928DFDC0, v53), (float64x2_t)xmmword_1928DFDD0, v52), (float64x2_t)xmmword_1928DFDE0, v54), (float64x2_t)xmmword_1928DFDD0, v48), (float64x2_t)xmmword_1928DFDC0,
                                  v50),
                                (float64x2_t)xmmword_1928DFDE0,
                                v51),
                              (float64x2_t)xmmword_1928DFDD0,
                              v62),
                            (float64x2_t)xmmword_1928DFDC0,
                            v63),
                          (float64x2_t)xmmword_1928DFDE0,
                          v64),
                        (float64x2_t)xmmword_1928DFDD0,
                        v58),
                      (float64x2_t)xmmword_1928DFDC0,
                      v60),
                    (float64x2_t)xmmword_1928DFDE0,
                    v61),
                  (float64x2_t)vdupq_n_s64(0x408FF80000000000uLL));
          __asm { FMOV            V21.2D, #0.25 }
          v65 = vadd_s32(vcvt_s32_f32(vrnda_f32(vcvt_f32_f64(vmulq_f64(v66, _Q21)))), (int32x2_t)0x20000000200);
        }
        else
        {
          v65 = 0;
        }
        *v44 = *v44 & ~(1023 << v55) | ((int)((v63 * 0.677998 + v62 * 0.2627 + v64 * 0.059302) * 1023.0 + 0.0) << v55);
        if (v42 == 2)
          v42 = 0;
        else
          ++v42;
        if ((v36 & 1) != 0)
        {
          v71 = *((unsigned __int8 *)&v196 + v41);
          *v35 = *v35 & ~(1023 << v71) | (v65.i32[0] << v71);
          v72 = (__int32 *)((char *)v35 + ((v71 >> 2) & 0x3C));
          if (v41 == 2)
            v73 = 0;
          else
            v73 = v41 + 1;
          v74 = *((unsigned __int8 *)&v196 + v73);
          *v72 = *v72 & ~(1023 << v74) | (v65.i32[1] << v74);
          v35 = (__int32 *)((char *)v72 + ((v74 >> 2) & 0x3C));
          if (v73 == 2)
            v41 = 0;
          else
            v41 = v73 + 1;
        }
        v38 += 4;
        v40 += v55 >> 4;
        v39 += 4;
        ++v36;
        v37 += 16;
        v43 = &v44[v55 >> 4];
        v34 += 16;
      }
      while (v22 != v36);
      if (v22 >= v18)
      {
        v149 = (float *)(v37 + v31);
        v148 = (float *)(v34 + v31);
        v80 = v22;
      }
      else
      {
        v184 = v27;
        v185 = v26;
        v186 = v19;
        v75 = 0;
        v183 = v55 >> 2;
        v76 = (v55 >> 2) & 0x3C;
        v77 = (char *)v44 + v76;
        v78 = (char *)v45 + v76;
        v79 = v31;
        v80 = v22;
        do
        {
          v81 = *(float *)(v37 + v79);
          v82 = *(float *)(v37 + v79 + 4);
          v83 = *(float *)(v37 + v79 + 8);
          v84 = *(float *)(v37 + v79 + 16);
          v85 = *(float *)(v37 + v79 + 20);
          v86 = *(float *)(v37 + v79 + 24);
          v87 = *(float *)(v34 + v79);
          v88 = *(float *)(v34 + v79 + 4);
          v89 = *(float *)(v34 + v79 + 8);
          v90 = (int)((v82 * 0.677998 + v81 * 0.2627 + v83 * 0.059302) * 1023.0 + 0.0);
          v91 = *(float *)(v34 + v79 + 16);
          v92 = *(float *)(v34 + v79 + 20);
          v93 = (int)((v85 * 0.677998 + v84 * 0.2627 + v86 * 0.059302) * 1023.0 + 0.0);
          v94 = *(float *)(v34 + v79 + 24);
          v95 = (int)((v88 * 0.677998 + v87 * 0.2627 + v89 * 0.059302) * 1023.0 + 0.0);
          v96 = (int)((v92 * 0.677998 + v91 * 0.2627 + v94 * 0.059302) * 1023.0 + 0.0);
          v97 = v82 * -0.36037 + v81 * -0.13963 + v83 * 0.5 + v84 * -0.13963;
          v98 = v82 * -0.459785 + v81 * 0.5 + v83 * -0.040215 + v84 * 0.5 + v85 * -0.459785;
          v99 = *(float *)(v37 + v79 + 32);
          v100 = v97 + v85 * -0.36037 + v86 * 0.5;
          v101 = *(float *)(v37 + v79 + 36);
          v102 = *(float *)(v37 + v79 + 40);
          v103 = v98 + v86 * -0.040215;
          v104 = v100 + v87 * -0.13963;
          v105 = *(float *)(v37 + v79 + 48);
          v106 = *(float *)(v37 + v79 + 52);
          v107 = v103 + v87 * 0.5;
          v108 = *(float *)(v37 + v79 + 56);
          v109 = (int)((v106 * 0.677998 + v105 * 0.2627 + v108 * 0.059302) * 1023.0 + 0.0);
          v110 = *(float *)(v34 + v79 + 32);
          v111 = *(float *)(v34 + v79 + 36);
          v112 = *(float *)(v34 + v79 + 40);
          v113 = v104 + v88 * -0.36037 + v89 * 0.5;
          v114 = v107 + v88 * -0.459785 + v89 * -0.040215;
          v115 = *(float *)(v34 + v79 + 48);
          v116 = *(float *)(v34 + v79 + 52);
          v117 = *(float *)(v34 + v79 + 56);
          v118 = (int)((v116 * 0.677998 + v115 * 0.2627 + v117 * 0.059302) * 1023.0 + 0.0);
          v119 = v113 + v91 * -0.13963 + v92 * -0.36037;
          v120 = (int *)&v77[v75];
          v121 = v90 | (v93 << 10);
          v122 = (unsigned int *)&v35[v75 / 4];
          v123 = v114 + v91 * 0.5 + v92 * -0.459785 + v94 * -0.040215;
          v124 = v95 | (v96 << 10);
          v125 = (int *)&v78[v75];
          *v125 = v121 | ((int)((v101 * 0.677998 + v99 * 0.2627 + v102 * 0.059302) * 1023.0 + 0.0) << 20);
          *v120 = v124 | ((int)((v111 * 0.677998 + v110 * 0.2627 + v112 * 0.059302) * 1023.0 + 0.0) << 20);
          v126 = (v101 * -0.36037
                + v99 * -0.13963
                + v102 * 0.5
                + v105 * -0.13963
                + v106 * -0.36037
                + v108 * 0.5
                + v110 * -0.13963
                + v111 * -0.36037
                + v112 * 0.5
                + v115 * -0.13963
                + v116 * -0.36037
                + v117 * 0.5)
               * 1023.0
               * 0.25;
          v127 = (v101 * -0.459785
                + v99 * 0.5
                + v102 * -0.040215
                + v105 * 0.5
                + v106 * -0.459785
                + v108 * -0.040215
                + v110 * 0.5
                + v111 * -0.459785
                + v112 * -0.040215
                + v115 * 0.5
                + v116 * -0.459785
                + v117 * -0.040215)
               * 1023.0;
          v128 = *(float *)(v37 + v79 + 64);
          v129 = *(float *)(v37 + v79 + 68);
          v130 = *(float *)(v37 + v79 + 72);
          *(float *)&v94 = (v119 + v94 * 0.5) * 1023.0 * 0.25;
          *(float *)&v123 = v123 * 1023.0 * 0.25;
          v131 = *(float *)(v37 + v79 + 80);
          v132 = *(float *)(v37 + v79 + 84);
          *(float *)&v126 = v126;
          v133 = *(float *)(v37 + v79 + 88);
          *(float *)&v127 = v127 * 0.25;
          v134 = v109 | ((int)((v129 * 0.677998 + v128 * 0.2627 + v130 * 0.059302) * 1023.0 + 0.0) << 10) | ((int)((v132 * 0.677998 + v131 * 0.2627 + v133 * 0.059302) * 1023.0 + 0.0) << 20);
          v135 = llroundf(*(float *)&v94);
          v136 = *(float *)(v34 + v79 + 64);
          v137 = *(float *)(v34 + v79 + 68);
          v138 = llroundf(*(float *)&v123);
          v139 = *(float *)(v34 + v79 + 72);
          v140 = llroundf(*(float *)&v126);
          v141 = llroundf(*(float *)&v127);
          v142 = *(float *)(v34 + v79 + 80);
          v143 = *(float *)(v34 + v79 + 84);
          v144 = v135 + 512;
          v145 = *(float *)(v34 + v79 + 88);
          v146 = (int)((v143 * 0.677998 + v142 * 0.2627 + v145 * 0.059302) * 1023.0 + 0.0);
          *(float *)&v106 = (v129 * -0.36037
                           + v128 * -0.13963
                           + v130 * 0.5
                           + v131 * -0.13963
                           + v132 * -0.36037
                           + v133 * 0.5
                           + v136 * -0.13963
                           + v137 * -0.36037
                           + v139 * 0.5
                           + v142 * -0.13963
                           + v143 * -0.36037
                           + v145 * 0.5)
                          * 1023.0
                          * 0.25;
          *v122 = ((v138 << 10) + 0x80000) | v144 | ((v140 << 20) + 0x20000000);
          *(float *)&v142 = (v129 * -0.459785
                           + v128 * 0.5
                           + v130 * -0.040215
                           + v131 * 0.5
                           + v132 * -0.459785
                           + v133 * -0.040215
                           + v136 * 0.5
                           + v137 * -0.459785
                           + v139 * -0.040215
                           + v142 * 0.5
                           + v143 * -0.459785
                           + v145 * -0.040215)
                          * 1023.0
                          * 0.25;
          v125[1] = v134;
          v120[1] = v118 | ((int)((v137 * 0.677998 + v136 * 0.2627 + v139 * 0.059302) * 1023.0 + 0.0) << 10) | (v146 << 20);
          v122[1] = ((llroundf(*(float *)&v142) << 20) + 0x20000000) | (v141 + 512) | ((llroundf(*(float *)&v106) << 10)
                                                                                     + 0x80000);
          v80 += 6;
          v75 += 8;
          v79 += 96;
        }
        while (v80 < v18);
        v27 = v184;
        v147 = v183 & 0x3C;
        v43 = (int *)((char *)v44 + v147 + v75);
        v35 = (__int32 *)((char *)v35 + v75);
        v40 = (_DWORD *)((char *)v45 + v147 + v75);
        v148 = (float *)(v34 + v79);
        v149 = (float *)(v37 + v79);
        v26 = v185;
        v19 = v186;
        v21 = v182;
        v23 = v181;
      }
      if (v80 < v14)
      {
        v150 = 0;
        v151 = v149;
        v152 = v148;
        v153 = v18 % 3;
        do
        {
          if ((v80 & 1) != 0)
          {
            v157 = &v149[v150 - 4];
            v154 = v151 - 3;
            v155 = v151 - 2;
            v156 = v149[v150];
            v158 = v149[v150 + 1];
            v159 = v149[v150 + 2];
          }
          else
          {
            v154 = &v149[v150 + 1];
            v155 = &v149[v150 + 2];
            v156 = 0.0;
            v157 = v151;
            v158 = 0.0;
            v159 = 0.0;
          }
          v160 = *v157;
          v161 = *v154;
          v162 = *v155;
          v163 = *((unsigned __int8 *)&v196 + v153);
          *v40 = ((int)((v161 * 0.677998 + v160 * 0.2627 + v162 * 0.059302) * 1023.0 + 0.0) << v163) | *v40 & ~(1023 << v163);
          if ((v80 & 1) != 0)
          {
            v167 = &v148[v150 - 4];
            v164 = v152 - 3;
            v165 = v152 - 2;
            v166 = v148[v150];
            v168 = v148[v150 + 1];
            v169 = v148[v150 + 2];
          }
          else
          {
            v164 = &v148[v150 + 1];
            v165 = &v148[v150 + 2];
            v166 = 0.0;
            v167 = v152;
            v168 = 0.0;
            v169 = 0.0;
          }
          v170 = *v167;
          v171 = *v164;
          v172 = *v165;
          if ((v80 & 1) != 0)
          {
            v174 = vmulq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_1928DFDC0, v161), (float64x2_t)xmmword_1928DFDD0, v160), (float64x2_t)xmmword_1928DFDE0, v162), (float64x2_t)xmmword_1928DFDD0, v156), (float64x2_t)xmmword_1928DFDC0,
                                     v158),
                                   (float64x2_t)xmmword_1928DFDE0,
                                   v159),
                                 (float64x2_t)xmmword_1928DFDD0,
                                 v170),
                               (float64x2_t)xmmword_1928DFDC0,
                               v171),
                             (float64x2_t)xmmword_1928DFDE0,
                             v172),
                           (float64x2_t)xmmword_1928DFDD0,
                           v166),
                         (float64x2_t)xmmword_1928DFDC0,
                         v168),
                       (float64x2_t)xmmword_1928DFDE0,
                       v169),
                     (float64x2_t)vdupq_n_s64(0x408FF80000000000uLL));
            __asm { FMOV            V21.2D, #0.25 }
            v173 = vadd_s32(vcvt_s32_f32(vrnda_f32(vcvt_f32_f64(vmulq_f64(v174, _Q21)))), (int32x2_t)0x20000000200);
          }
          else
          {
            v173 = 0;
          }
          *v43 = *v43 & ~(1023 << v163) | ((int)((v171 * 0.677998 + v170 * 0.2627 + v172 * 0.059302) * 1023.0 + 0.0) << v163);
          if (v153 == 2)
            v153 = 0;
          else
            ++v153;
          if ((v80 & 1) != 0)
          {
            v176 = *((unsigned __int8 *)&v196 + v41);
            *v35 = *v35 & ~(1023 << v176) | (v173.i32[0] << v176);
            v177 = (__int32 *)((char *)v35 + ((v176 >> 2) & 0x3C));
            if (v41 == 2)
              v178 = 0;
            else
              v178 = v41 + 1;
            v179 = *((unsigned __int8 *)&v196 + v178);
            *v177 = *v177 & ~(1023 << v179) | (v173.i32[1] << v179);
            v35 = (__int32 *)((char *)v177 + ((v179 >> 2) & 0x3C));
            if (v178 == 2)
              v41 = 0;
            else
              v41 = v178 + 1;
          }
          v151 += 4;
          v40 += v163 >> 4;
          v152 += 4;
          ++v80;
          v150 += 4;
          v43 += v163 >> 4;
        }
        while (v14 != v80);
      }
      v32 = &v194[v190];
      v33 = &v193[v190];
      v26 += 4 * v189;
      ++v19;
      v27 += v189;
      v30 = v195 + v187;
      v34 = v192 + v187;
      v35 = &v191[v188];
    }
    while (v19 != v23);
  }
  return 0;
}

uint64_t vt_Copy_RGfA_pf20ITU709(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, _QWORD *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float *v32;
  float *v33;
  uint64_t v34;
  __int32 *v35;
  uint64_t v36;
  uint64_t v37;
  float *v38;
  float *v39;
  _DWORD *v40;
  unsigned int v41;
  unsigned int v42;
  int *v43;
  int *v44;
  _DWORD *v45;
  float *v46;
  float *v47;
  float v48;
  float *v49;
  float v50;
  float v51;
  double v52;
  double v53;
  double v54;
  unint64_t v55;
  float *v56;
  float *v57;
  float v58;
  float *v59;
  float v60;
  float v61;
  double v62;
  double v63;
  double v64;
  int32x2_t v65;
  float64x2_t v66;
  unint64_t v71;
  __int32 *v72;
  unsigned int v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  int v90;
  double v91;
  double v92;
  int v93;
  double v94;
  int v95;
  int v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  int v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  int v118;
  double v119;
  int *v120;
  int v121;
  unsigned int *v122;
  double v123;
  int v124;
  int *v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  int v134;
  unsigned int v135;
  double v136;
  double v137;
  unsigned int v138;
  double v139;
  unsigned int v140;
  unsigned int v141;
  double v142;
  double v143;
  unsigned int v144;
  double v145;
  int v146;
  uint64_t v147;
  float *v148;
  float *v149;
  uint64_t v150;
  float *v151;
  float *v152;
  unsigned int v153;
  float *v154;
  float *v155;
  float v156;
  float *v157;
  float v158;
  float v159;
  double v160;
  double v161;
  double v162;
  unint64_t v163;
  float *v164;
  float *v165;
  float v166;
  float *v167;
  float v168;
  float v169;
  double v170;
  double v171;
  double v172;
  int32x2_t v173;
  float64x2_t v174;
  unint64_t v176;
  __int32 *v177;
  unsigned int v178;
  unint64_t v179;
  unint64_t v181;
  unsigned int v182;
  unint64_t v183;
  int *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  __int32 *v191;
  uint64_t v192;
  float *v193;
  float *v194;
  uint64_t v195;
  int v196;

  v196 = 1313280;
  v8 = *(_QWORD *)(a2 + 40);
  v9 = (v8 & 1) + v8;
  v10 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v11 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v12 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v13 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v14 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v10;
  if (v14 >= v13 - v12)
    v14 = v13 - v12;
  if ((unint64_t)((*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE) - v9 >= ((*(_DWORD *)(a6 + 24)
                                                                                    + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE)
                                                                                  - v11)
    v15 = ((*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE) - v11;
  else
    v15 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE) - v9;
  v16 = v13 % 6;
  _CF = v14 >= v16;
  v18 = v14 - v16;
  if (!_CF)
    v18 = 0;
  if (v15 >= 2)
  {
    v19 = 0;
    v20 = v12 / 3;
    v21 = v12 % 3;
    v22 = 6 * (v12 / 6) - v12 + 6;
    v23 = v15 >> 1;
    v24 = a8[1];
    v25 = a7[1] + v24 * (v11 >> 1);
    v26 = *a7 + *a8 * v11 + 4 * v20;
    v27 = (int *)(v26 + *a8);
    v28 = *a3;
    v29 = *a4;
    v30 = *a3 + *a4 * v9;
    v31 = 16 * v10;
    v32 = (float *)(v30 + 16 * v10);
    v33 = (float *)((char *)v32 + *a4);
    v190 = (v29 >> 1) & 0x3FFFFFFFFFFFFFFFLL;
    v189 = (*a8 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    v187 = 4 * (v29 >> 1);
    v188 = v24 >> 2;
    v34 = v28 + v29 + v29 * (v8 + (v8 & 1));
    v35 = (__int32 *)(v25 + 4 * v20);
    v182 = v21;
    v181 = v23;
    do
    {
      v36 = 0;
      v192 = v34;
      v193 = v33;
      v194 = v32;
      v195 = v30;
      v37 = v30;
      v38 = v32;
      v39 = v33;
      v40 = (_DWORD *)v26;
      v41 = v21;
      v42 = v21;
      v191 = v35;
      v43 = v27;
      do
      {
        v44 = v43;
        v45 = v40;
        if ((v36 & 1) != 0)
        {
          v49 = (float *)(v37 + v31 - 16);
          v46 = v38 - 3;
          v47 = v38 - 2;
          v48 = *(float *)(v37 + v31);
          v50 = *(float *)(v37 + v31 + 4);
          v51 = *(float *)(v37 + v31 + 8);
        }
        else
        {
          v46 = (float *)(v37 + v31 + 4);
          v47 = (float *)(v37 + v31 + 8);
          v48 = 0.0;
          v49 = v38;
          v50 = 0.0;
          v51 = 0.0;
        }
        v52 = *v49;
        v53 = *v46;
        v54 = *v47;
        v55 = *((unsigned __int8 *)&v196 + v42);
        *v40 = ((int)((v53 * 0.7152 + v52 * 0.2126 + v54 * 0.0722) * 1023.0 + 0.0) << v55) | *v40 & ~(1023 << v55);
        if ((v36 & 1) != 0)
        {
          v59 = (float *)(v34 + v31 - 16);
          v56 = v39 - 3;
          v57 = v39 - 2;
          v58 = *(float *)(v34 + v31);
          v60 = *(float *)(v34 + v31 + 4);
          v61 = *(float *)(v34 + v31 + 8);
        }
        else
        {
          v56 = (float *)(v34 + v31 + 4);
          v57 = (float *)(v34 + v31 + 8);
          v58 = 0.0;
          v59 = v39;
          v60 = 0.0;
          v61 = 0.0;
        }
        v62 = *v59;
        v63 = *v56;
        v64 = *v57;
        if ((v36 & 1) != 0)
        {
          v66 = vmulq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_1928DFDF0, v53), (float64x2_t)xmmword_1928DFE00, v52), (float64x2_t)xmmword_1928DFE10, v54), (float64x2_t)xmmword_1928DFE00, v48), (float64x2_t)xmmword_1928DFDF0,
                                  v50),
                                (float64x2_t)xmmword_1928DFE10,
                                v51),
                              (float64x2_t)xmmword_1928DFE00,
                              v62),
                            (float64x2_t)xmmword_1928DFDF0,
                            v63),
                          (float64x2_t)xmmword_1928DFE10,
                          v64),
                        (float64x2_t)xmmword_1928DFE00,
                        v58),
                      (float64x2_t)xmmword_1928DFDF0,
                      v60),
                    (float64x2_t)xmmword_1928DFE10,
                    v61),
                  (float64x2_t)vdupq_n_s64(0x408FF80000000000uLL));
          __asm { FMOV            V21.2D, #0.25 }
          v65 = vadd_s32(vcvt_s32_f32(vrnda_f32(vcvt_f32_f64(vmulq_f64(v66, _Q21)))), (int32x2_t)0x20000000200);
        }
        else
        {
          v65 = 0;
        }
        *v44 = *v44 & ~(1023 << v55) | ((int)((v63 * 0.7152 + v62 * 0.2126 + v64 * 0.0722) * 1023.0 + 0.0) << v55);
        if (v42 == 2)
          v42 = 0;
        else
          ++v42;
        if ((v36 & 1) != 0)
        {
          v71 = *((unsigned __int8 *)&v196 + v41);
          *v35 = *v35 & ~(1023 << v71) | (v65.i32[0] << v71);
          v72 = (__int32 *)((char *)v35 + ((v71 >> 2) & 0x3C));
          if (v41 == 2)
            v73 = 0;
          else
            v73 = v41 + 1;
          v74 = *((unsigned __int8 *)&v196 + v73);
          *v72 = *v72 & ~(1023 << v74) | (v65.i32[1] << v74);
          v35 = (__int32 *)((char *)v72 + ((v74 >> 2) & 0x3C));
          if (v73 == 2)
            v41 = 0;
          else
            v41 = v73 + 1;
        }
        v38 += 4;
        v40 += v55 >> 4;
        v39 += 4;
        ++v36;
        v37 += 16;
        v43 = &v44[v55 >> 4];
        v34 += 16;
      }
      while (v22 != v36);
      if (v22 >= v18)
      {
        v149 = (float *)(v37 + v31);
        v148 = (float *)(v34 + v31);
        v80 = v22;
      }
      else
      {
        v184 = v27;
        v185 = v26;
        v186 = v19;
        v75 = 0;
        v183 = v55 >> 2;
        v76 = (v55 >> 2) & 0x3C;
        v77 = (char *)v44 + v76;
        v78 = (char *)v45 + v76;
        v79 = v31;
        v80 = v22;
        do
        {
          v81 = *(float *)(v37 + v79);
          v82 = *(float *)(v37 + v79 + 4);
          v83 = *(float *)(v37 + v79 + 8);
          v84 = *(float *)(v37 + v79 + 16);
          v85 = *(float *)(v37 + v79 + 20);
          v86 = *(float *)(v37 + v79 + 24);
          v87 = *(float *)(v34 + v79);
          v88 = *(float *)(v34 + v79 + 4);
          v89 = *(float *)(v34 + v79 + 8);
          v90 = (int)((v82 * 0.7152 + v81 * 0.2126 + v83 * 0.0722) * 1023.0 + 0.0);
          v91 = *(float *)(v34 + v79 + 16);
          v92 = *(float *)(v34 + v79 + 20);
          v93 = (int)((v85 * 0.7152 + v84 * 0.2126 + v86 * 0.0722) * 1023.0 + 0.0);
          v94 = *(float *)(v34 + v79 + 24);
          v95 = (int)((v88 * 0.7152 + v87 * 0.2126 + v89 * 0.0722) * 1023.0 + 0.0);
          v96 = (int)((v92 * 0.7152 + v91 * 0.2126 + v94 * 0.0722) * 1023.0 + 0.0);
          v97 = v82 * -0.385428 + v81 * -0.114572 + v83 * 0.5 + v84 * -0.114572;
          v98 = v82 * -0.454153 + v81 * 0.5 + v83 * -0.045847 + v84 * 0.5 + v85 * -0.454153;
          v99 = *(float *)(v37 + v79 + 32);
          v100 = v97 + v85 * -0.385428 + v86 * 0.5;
          v101 = *(float *)(v37 + v79 + 36);
          v102 = *(float *)(v37 + v79 + 40);
          v103 = v98 + v86 * -0.045847;
          v104 = v100 + v87 * -0.114572;
          v105 = *(float *)(v37 + v79 + 48);
          v106 = *(float *)(v37 + v79 + 52);
          v107 = v103 + v87 * 0.5;
          v108 = *(float *)(v37 + v79 + 56);
          v109 = (int)((v106 * 0.7152 + v105 * 0.2126 + v108 * 0.0722) * 1023.0 + 0.0);
          v110 = *(float *)(v34 + v79 + 32);
          v111 = *(float *)(v34 + v79 + 36);
          v112 = *(float *)(v34 + v79 + 40);
          v113 = v104 + v88 * -0.385428 + v89 * 0.5;
          v114 = v107 + v88 * -0.454153 + v89 * -0.045847;
          v115 = *(float *)(v34 + v79 + 48);
          v116 = *(float *)(v34 + v79 + 52);
          v117 = *(float *)(v34 + v79 + 56);
          v118 = (int)((v116 * 0.7152 + v115 * 0.2126 + v117 * 0.0722) * 1023.0 + 0.0);
          v119 = v113 + v91 * -0.114572 + v92 * -0.385428;
          v120 = (int *)&v77[v75];
          v121 = v90 | (v93 << 10);
          v122 = (unsigned int *)&v35[v75 / 4];
          v123 = v114 + v91 * 0.5 + v92 * -0.454153 + v94 * -0.045847;
          v124 = v95 | (v96 << 10);
          v125 = (int *)&v78[v75];
          *v125 = v121 | ((int)((v101 * 0.7152 + v99 * 0.2126 + v102 * 0.0722) * 1023.0 + 0.0) << 20);
          *v120 = v124 | ((int)((v111 * 0.7152 + v110 * 0.2126 + v112 * 0.0722) * 1023.0 + 0.0) << 20);
          v126 = (v101 * -0.385428
                + v99 * -0.114572
                + v102 * 0.5
                + v105 * -0.114572
                + v106 * -0.385428
                + v108 * 0.5
                + v110 * -0.114572
                + v111 * -0.385428
                + v112 * 0.5
                + v115 * -0.114572
                + v116 * -0.385428
                + v117 * 0.5)
               * 1023.0
               * 0.25;
          v127 = (v101 * -0.454153
                + v99 * 0.5
                + v102 * -0.045847
                + v105 * 0.5
                + v106 * -0.454153
                + v108 * -0.045847
                + v110 * 0.5
                + v111 * -0.454153
                + v112 * -0.045847
                + v115 * 0.5
                + v116 * -0.454153
                + v117 * -0.045847)
               * 1023.0;
          v128 = *(float *)(v37 + v79 + 64);
          v129 = *(float *)(v37 + v79 + 68);
          v130 = *(float *)(v37 + v79 + 72);
          *(float *)&v94 = (v119 + v94 * 0.5) * 1023.0 * 0.25;
          *(float *)&v123 = v123 * 1023.0 * 0.25;
          v131 = *(float *)(v37 + v79 + 80);
          v132 = *(float *)(v37 + v79 + 84);
          *(float *)&v126 = v126;
          v133 = *(float *)(v37 + v79 + 88);
          *(float *)&v127 = v127 * 0.25;
          v134 = v109 | ((int)((v129 * 0.7152 + v128 * 0.2126 + v130 * 0.0722) * 1023.0 + 0.0) << 10) | ((int)((v132 * 0.7152 + v131 * 0.2126 + v133 * 0.0722) * 1023.0 + 0.0) << 20);
          v135 = llroundf(*(float *)&v94);
          v136 = *(float *)(v34 + v79 + 64);
          v137 = *(float *)(v34 + v79 + 68);
          v138 = llroundf(*(float *)&v123);
          v139 = *(float *)(v34 + v79 + 72);
          v140 = llroundf(*(float *)&v126);
          v141 = llroundf(*(float *)&v127);
          v142 = *(float *)(v34 + v79 + 80);
          v143 = *(float *)(v34 + v79 + 84);
          v144 = v135 + 512;
          v145 = *(float *)(v34 + v79 + 88);
          v146 = (int)((v143 * 0.7152 + v142 * 0.2126 + v145 * 0.0722) * 1023.0 + 0.0);
          *(float *)&v106 = (v129 * -0.385428
                           + v128 * -0.114572
                           + v130 * 0.5
                           + v131 * -0.114572
                           + v132 * -0.385428
                           + v133 * 0.5
                           + v136 * -0.114572
                           + v137 * -0.385428
                           + v139 * 0.5
                           + v142 * -0.114572
                           + v143 * -0.385428
                           + v145 * 0.5)
                          * 1023.0
                          * 0.25;
          *v122 = ((v138 << 10) + 0x80000) | v144 | ((v140 << 20) + 0x20000000);
          *(float *)&v142 = (v129 * -0.454153
                           + v128 * 0.5
                           + v130 * -0.045847
                           + v131 * 0.5
                           + v132 * -0.454153
                           + v133 * -0.045847
                           + v136 * 0.5
                           + v137 * -0.454153
                           + v139 * -0.045847
                           + v142 * 0.5
                           + v143 * -0.454153
                           + v145 * -0.045847)
                          * 1023.0
                          * 0.25;
          v125[1] = v134;
          v120[1] = v118 | ((int)((v137 * 0.7152 + v136 * 0.2126 + v139 * 0.0722) * 1023.0 + 0.0) << 10) | (v146 << 20);
          v122[1] = ((llroundf(*(float *)&v142) << 20) + 0x20000000) | (v141 + 512) | ((llroundf(*(float *)&v106) << 10)
                                                                                     + 0x80000);
          v80 += 6;
          v75 += 8;
          v79 += 96;
        }
        while (v80 < v18);
        v27 = v184;
        v147 = v183 & 0x3C;
        v43 = (int *)((char *)v44 + v147 + v75);
        v35 = (__int32 *)((char *)v35 + v75);
        v40 = (_DWORD *)((char *)v45 + v147 + v75);
        v148 = (float *)(v34 + v79);
        v149 = (float *)(v37 + v79);
        v26 = v185;
        v19 = v186;
        v21 = v182;
        v23 = v181;
      }
      if (v80 < v14)
      {
        v150 = 0;
        v151 = v149;
        v152 = v148;
        v153 = v18 % 3;
        do
        {
          if ((v80 & 1) != 0)
          {
            v157 = &v149[v150 - 4];
            v154 = v151 - 3;
            v155 = v151 - 2;
            v156 = v149[v150];
            v158 = v149[v150 + 1];
            v159 = v149[v150 + 2];
          }
          else
          {
            v154 = &v149[v150 + 1];
            v155 = &v149[v150 + 2];
            v156 = 0.0;
            v157 = v151;
            v158 = 0.0;
            v159 = 0.0;
          }
          v160 = *v157;
          v161 = *v154;
          v162 = *v155;
          v163 = *((unsigned __int8 *)&v196 + v153);
          *v40 = ((int)((v161 * 0.7152 + v160 * 0.2126 + v162 * 0.0722) * 1023.0 + 0.0) << v163) | *v40 & ~(1023 << v163);
          if ((v80 & 1) != 0)
          {
            v167 = &v148[v150 - 4];
            v164 = v152 - 3;
            v165 = v152 - 2;
            v166 = v148[v150];
            v168 = v148[v150 + 1];
            v169 = v148[v150 + 2];
          }
          else
          {
            v164 = &v148[v150 + 1];
            v165 = &v148[v150 + 2];
            v166 = 0.0;
            v167 = v152;
            v168 = 0.0;
            v169 = 0.0;
          }
          v170 = *v167;
          v171 = *v164;
          v172 = *v165;
          if ((v80 & 1) != 0)
          {
            v174 = vmulq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_1928DFDF0, v161), (float64x2_t)xmmword_1928DFE00, v160), (float64x2_t)xmmword_1928DFE10, v162), (float64x2_t)xmmword_1928DFE00, v156), (float64x2_t)xmmword_1928DFDF0,
                                     v158),
                                   (float64x2_t)xmmword_1928DFE10,
                                   v159),
                                 (float64x2_t)xmmword_1928DFE00,
                                 v170),
                               (float64x2_t)xmmword_1928DFDF0,
                               v171),
                             (float64x2_t)xmmword_1928DFE10,
                             v172),
                           (float64x2_t)xmmword_1928DFE00,
                           v166),
                         (float64x2_t)xmmword_1928DFDF0,
                         v168),
                       (float64x2_t)xmmword_1928DFE10,
                       v169),
                     (float64x2_t)vdupq_n_s64(0x408FF80000000000uLL));
            __asm { FMOV            V21.2D, #0.25 }
            v173 = vadd_s32(vcvt_s32_f32(vrnda_f32(vcvt_f32_f64(vmulq_f64(v174, _Q21)))), (int32x2_t)0x20000000200);
          }
          else
          {
            v173 = 0;
          }
          *v43 = *v43 & ~(1023 << v163) | ((int)((v171 * 0.7152 + v170 * 0.2126 + v172 * 0.0722) * 1023.0 + 0.0) << v163);
          if (v153 == 2)
            v153 = 0;
          else
            ++v153;
          if ((v80 & 1) != 0)
          {
            v176 = *((unsigned __int8 *)&v196 + v41);
            *v35 = *v35 & ~(1023 << v176) | (v173.i32[0] << v176);
            v177 = (__int32 *)((char *)v35 + ((v176 >> 2) & 0x3C));
            if (v41 == 2)
              v178 = 0;
            else
              v178 = v41 + 1;
            v179 = *((unsigned __int8 *)&v196 + v178);
            *v177 = *v177 & ~(1023 << v179) | (v173.i32[1] << v179);
            v35 = (__int32 *)((char *)v177 + ((v179 >> 2) & 0x3C));
            if (v178 == 2)
              v41 = 0;
            else
              v41 = v178 + 1;
          }
          v151 += 4;
          v40 += v163 >> 4;
          v152 += 4;
          ++v80;
          v150 += 4;
          v43 += v163 >> 4;
        }
        while (v14 != v80);
      }
      v32 = &v194[v190];
      v33 = &v193[v190];
      v26 += 4 * v189;
      ++v19;
      v27 += v189;
      v30 = v195 + v187;
      v34 = v192 + v187;
      v35 = &v191[v188];
    }
    while (v19 != v23);
  }
  return 0;
}

uint64_t vt_Copy_RGfA_pf20ITU601(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, _QWORD *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float *v32;
  float *v33;
  uint64_t v34;
  __int32 *v35;
  uint64_t v36;
  uint64_t v37;
  float *v38;
  float *v39;
  _DWORD *v40;
  unsigned int v41;
  unsigned int v42;
  int *v43;
  int *v44;
  _DWORD *v45;
  float *v46;
  float *v47;
  float v48;
  float *v49;
  float v50;
  float v51;
  double v52;
  double v53;
  double v54;
  unint64_t v55;
  float *v56;
  float *v57;
  float v58;
  float *v59;
  float v60;
  float v61;
  double v62;
  double v63;
  double v64;
  int32x2_t v65;
  float64x2_t v66;
  unint64_t v71;
  __int32 *v72;
  unsigned int v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  int v90;
  double v91;
  double v92;
  int v93;
  double v94;
  int v95;
  int v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  int v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  int v118;
  double v119;
  int *v120;
  int v121;
  unsigned int *v122;
  double v123;
  int v124;
  int *v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  int v134;
  unsigned int v135;
  double v136;
  double v137;
  unsigned int v138;
  double v139;
  unsigned int v140;
  unsigned int v141;
  double v142;
  double v143;
  unsigned int v144;
  double v145;
  int v146;
  uint64_t v147;
  float *v148;
  float *v149;
  uint64_t v150;
  float *v151;
  float *v152;
  unsigned int v153;
  float *v154;
  float *v155;
  float v156;
  float *v157;
  float v158;
  float v159;
  double v160;
  double v161;
  double v162;
  unint64_t v163;
  float *v164;
  float *v165;
  float v166;
  float *v167;
  float v168;
  float v169;
  double v170;
  double v171;
  double v172;
  int32x2_t v173;
  float64x2_t v174;
  unint64_t v176;
  __int32 *v177;
  unsigned int v178;
  unint64_t v179;
  unint64_t v181;
  unsigned int v182;
  unint64_t v183;
  int *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  __int32 *v191;
  uint64_t v192;
  float *v193;
  float *v194;
  uint64_t v195;
  int v196;

  v196 = 1313280;
  v8 = *(_QWORD *)(a2 + 40);
  v9 = (v8 & 1) + v8;
  v10 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v11 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v12 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v13 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v14 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v10;
  if (v14 >= v13 - v12)
    v14 = v13 - v12;
  if ((unint64_t)((*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE) - v9 >= ((*(_DWORD *)(a6 + 24)
                                                                                    + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE)
                                                                                  - v11)
    v15 = ((*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE) - v11;
  else
    v15 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE) - v9;
  v16 = v13 % 6;
  _CF = v14 >= v16;
  v18 = v14 - v16;
  if (!_CF)
    v18 = 0;
  if (v15 >= 2)
  {
    v19 = 0;
    v20 = v12 / 3;
    v21 = v12 % 3;
    v22 = 6 * (v12 / 6) - v12 + 6;
    v23 = v15 >> 1;
    v24 = a8[1];
    v25 = a7[1] + v24 * (v11 >> 1);
    v26 = *a7 + *a8 * v11 + 4 * v20;
    v27 = (int *)(v26 + *a8);
    v28 = *a3;
    v29 = *a4;
    v30 = *a3 + *a4 * v9;
    v31 = 16 * v10;
    v32 = (float *)(v30 + 16 * v10);
    v33 = (float *)((char *)v32 + *a4);
    v190 = (v29 >> 1) & 0x3FFFFFFFFFFFFFFFLL;
    v189 = (*a8 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    v187 = 4 * (v29 >> 1);
    v188 = v24 >> 2;
    v34 = v28 + v29 + v29 * (v8 + (v8 & 1));
    v35 = (__int32 *)(v25 + 4 * v20);
    v182 = v21;
    v181 = v23;
    do
    {
      v36 = 0;
      v192 = v34;
      v193 = v33;
      v194 = v32;
      v195 = v30;
      v37 = v30;
      v38 = v32;
      v39 = v33;
      v40 = (_DWORD *)v26;
      v41 = v21;
      v42 = v21;
      v191 = v35;
      v43 = v27;
      do
      {
        v44 = v43;
        v45 = v40;
        if ((v36 & 1) != 0)
        {
          v49 = (float *)(v37 + v31 - 16);
          v46 = v38 - 3;
          v47 = v38 - 2;
          v48 = *(float *)(v37 + v31);
          v50 = *(float *)(v37 + v31 + 4);
          v51 = *(float *)(v37 + v31 + 8);
        }
        else
        {
          v46 = (float *)(v37 + v31 + 4);
          v47 = (float *)(v37 + v31 + 8);
          v48 = 0.0;
          v49 = v38;
          v50 = 0.0;
          v51 = 0.0;
        }
        v52 = *v49;
        v53 = *v46;
        v54 = *v47;
        v55 = *((unsigned __int8 *)&v196 + v42);
        *v40 = ((int)((v53 * 0.587 + v52 * 0.299 + v54 * 0.114) * 1023.0 + 0.0) << v55) | *v40 & ~(1023 << v55);
        if ((v36 & 1) != 0)
        {
          v59 = (float *)(v34 + v31 - 16);
          v56 = v39 - 3;
          v57 = v39 - 2;
          v58 = *(float *)(v34 + v31);
          v60 = *(float *)(v34 + v31 + 4);
          v61 = *(float *)(v34 + v31 + 8);
        }
        else
        {
          v56 = (float *)(v34 + v31 + 4);
          v57 = (float *)(v34 + v31 + 8);
          v58 = 0.0;
          v59 = v39;
          v60 = 0.0;
          v61 = 0.0;
        }
        v62 = *v59;
        v63 = *v56;
        v64 = *v57;
        if ((v36 & 1) != 0)
        {
          v66 = vmulq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_1928DFE20, v53), (float64x2_t)xmmword_1928DFE30, v52), (float64x2_t)xmmword_1928DFE40, v54), (float64x2_t)xmmword_1928DFE30, v48), (float64x2_t)xmmword_1928DFE20,
                                  v50),
                                (float64x2_t)xmmword_1928DFE40,
                                v51),
                              (float64x2_t)xmmword_1928DFE30,
                              v62),
                            (float64x2_t)xmmword_1928DFE20,
                            v63),
                          (float64x2_t)xmmword_1928DFE40,
                          v64),
                        (float64x2_t)xmmword_1928DFE30,
                        v58),
                      (float64x2_t)xmmword_1928DFE20,
                      v60),
                    (float64x2_t)xmmword_1928DFE40,
                    v61),
                  (float64x2_t)vdupq_n_s64(0x408FF80000000000uLL));
          __asm { FMOV            V21.2D, #0.25 }
          v65 = vadd_s32(vcvt_s32_f32(vrnda_f32(vcvt_f32_f64(vmulq_f64(v66, _Q21)))), (int32x2_t)0x20000000200);
        }
        else
        {
          v65 = 0;
        }
        *v44 = *v44 & ~(1023 << v55) | ((int)((v63 * 0.587 + v62 * 0.299 + v64 * 0.114) * 1023.0 + 0.0) << v55);
        if (v42 == 2)
          v42 = 0;
        else
          ++v42;
        if ((v36 & 1) != 0)
        {
          v71 = *((unsigned __int8 *)&v196 + v41);
          *v35 = *v35 & ~(1023 << v71) | (v65.i32[0] << v71);
          v72 = (__int32 *)((char *)v35 + ((v71 >> 2) & 0x3C));
          if (v41 == 2)
            v73 = 0;
          else
            v73 = v41 + 1;
          v74 = *((unsigned __int8 *)&v196 + v73);
          *v72 = *v72 & ~(1023 << v74) | (v65.i32[1] << v74);
          v35 = (__int32 *)((char *)v72 + ((v74 >> 2) & 0x3C));
          if (v73 == 2)
            v41 = 0;
          else
            v41 = v73 + 1;
        }
        v38 += 4;
        v40 += v55 >> 4;
        v39 += 4;
        ++v36;
        v37 += 16;
        v43 = &v44[v55 >> 4];
        v34 += 16;
      }
      while (v22 != v36);
      if (v22 >= v18)
      {
        v149 = (float *)(v37 + v31);
        v148 = (float *)(v34 + v31);
        v80 = v22;
      }
      else
      {
        v184 = v27;
        v185 = v26;
        v186 = v19;
        v75 = 0;
        v183 = v55 >> 2;
        v76 = (v55 >> 2) & 0x3C;
        v77 = (char *)v44 + v76;
        v78 = (char *)v45 + v76;
        v79 = v31;
        v80 = v22;
        do
        {
          v81 = *(float *)(v37 + v79);
          v82 = *(float *)(v37 + v79 + 4);
          v83 = *(float *)(v37 + v79 + 8);
          v84 = *(float *)(v37 + v79 + 16);
          v85 = *(float *)(v37 + v79 + 20);
          v86 = *(float *)(v37 + v79 + 24);
          v87 = *(float *)(v34 + v79);
          v88 = *(float *)(v34 + v79 + 4);
          v89 = *(float *)(v34 + v79 + 8);
          v90 = (int)((v82 * 0.587 + v81 * 0.299 + v83 * 0.114) * 1023.0 + 0.0);
          v91 = *(float *)(v34 + v79 + 16);
          v92 = *(float *)(v34 + v79 + 20);
          v93 = (int)((v85 * 0.587 + v84 * 0.299 + v86 * 0.114) * 1023.0 + 0.0);
          v94 = *(float *)(v34 + v79 + 24);
          v95 = (int)((v88 * 0.587 + v87 * 0.299 + v89 * 0.114) * 1023.0 + 0.0);
          v96 = (int)((v92 * 0.587 + v91 * 0.299 + v94 * 0.114) * 1023.0 + 0.0);
          v97 = v82 * -0.331264 + v81 * -0.168736 + v83 * 0.5 + v84 * -0.168736;
          v98 = v82 * -0.418688 + v81 * 0.5 + v83 * -0.081312 + v84 * 0.5 + v85 * -0.418688;
          v99 = *(float *)(v37 + v79 + 32);
          v100 = v97 + v85 * -0.331264 + v86 * 0.5;
          v101 = *(float *)(v37 + v79 + 36);
          v102 = *(float *)(v37 + v79 + 40);
          v103 = v98 + v86 * -0.081312;
          v104 = v100 + v87 * -0.168736;
          v105 = *(float *)(v37 + v79 + 48);
          v106 = *(float *)(v37 + v79 + 52);
          v107 = v103 + v87 * 0.5;
          v108 = *(float *)(v37 + v79 + 56);
          v109 = (int)((v106 * 0.587 + v105 * 0.299 + v108 * 0.114) * 1023.0 + 0.0);
          v110 = *(float *)(v34 + v79 + 32);
          v111 = *(float *)(v34 + v79 + 36);
          v112 = *(float *)(v34 + v79 + 40);
          v113 = v104 + v88 * -0.331264 + v89 * 0.5;
          v114 = v107 + v88 * -0.418688 + v89 * -0.081312;
          v115 = *(float *)(v34 + v79 + 48);
          v116 = *(float *)(v34 + v79 + 52);
          v117 = *(float *)(v34 + v79 + 56);
          v118 = (int)((v116 * 0.587 + v115 * 0.299 + v117 * 0.114) * 1023.0 + 0.0);
          v119 = v113 + v91 * -0.168736 + v92 * -0.331264;
          v120 = (int *)&v77[v75];
          v121 = v90 | (v93 << 10);
          v122 = (unsigned int *)&v35[v75 / 4];
          v123 = v114 + v91 * 0.5 + v92 * -0.418688 + v94 * -0.081312;
          v124 = v95 | (v96 << 10);
          v125 = (int *)&v78[v75];
          *v125 = v121 | ((int)((v101 * 0.587 + v99 * 0.299 + v102 * 0.114) * 1023.0 + 0.0) << 20);
          *v120 = v124 | ((int)((v111 * 0.587 + v110 * 0.299 + v112 * 0.114) * 1023.0 + 0.0) << 20);
          v126 = (v101 * -0.331264
                + v99 * -0.168736
                + v102 * 0.5
                + v105 * -0.168736
                + v106 * -0.331264
                + v108 * 0.5
                + v110 * -0.168736
                + v111 * -0.331264
                + v112 * 0.5
                + v115 * -0.168736
                + v116 * -0.331264
                + v117 * 0.5)
               * 1023.0
               * 0.25;
          v127 = (v101 * -0.418688
                + v99 * 0.5
                + v102 * -0.081312
                + v105 * 0.5
                + v106 * -0.418688
                + v108 * -0.081312
                + v110 * 0.5
                + v111 * -0.418688
                + v112 * -0.081312
                + v115 * 0.5
                + v116 * -0.418688
                + v117 * -0.081312)
               * 1023.0;
          v128 = *(float *)(v37 + v79 + 64);
          v129 = *(float *)(v37 + v79 + 68);
          v130 = *(float *)(v37 + v79 + 72);
          *(float *)&v94 = (v119 + v94 * 0.5) * 1023.0 * 0.25;
          *(float *)&v123 = v123 * 1023.0 * 0.25;
          v131 = *(float *)(v37 + v79 + 80);
          v132 = *(float *)(v37 + v79 + 84);
          *(float *)&v126 = v126;
          v133 = *(float *)(v37 + v79 + 88);
          *(float *)&v127 = v127 * 0.25;
          v134 = v109 | ((int)((v129 * 0.587 + v128 * 0.299 + v130 * 0.114) * 1023.0 + 0.0) << 10) | ((int)((v132 * 0.587 + v131 * 0.299 + v133 * 0.114) * 1023.0 + 0.0) << 20);
          v135 = llroundf(*(float *)&v94);
          v136 = *(float *)(v34 + v79 + 64);
          v137 = *(float *)(v34 + v79 + 68);
          v138 = llroundf(*(float *)&v123);
          v139 = *(float *)(v34 + v79 + 72);
          v140 = llroundf(*(float *)&v126);
          v141 = llroundf(*(float *)&v127);
          v142 = *(float *)(v34 + v79 + 80);
          v143 = *(float *)(v34 + v79 + 84);
          v144 = v135 + 512;
          v145 = *(float *)(v34 + v79 + 88);
          v146 = (int)((v143 * 0.587 + v142 * 0.299 + v145 * 0.114) * 1023.0 + 0.0);
          *(float *)&v106 = (v129 * -0.331264
                           + v128 * -0.168736
                           + v130 * 0.5
                           + v131 * -0.168736
                           + v132 * -0.331264
                           + v133 * 0.5
                           + v136 * -0.168736
                           + v137 * -0.331264
                           + v139 * 0.5
                           + v142 * -0.168736
                           + v143 * -0.331264
                           + v145 * 0.5)
                          * 1023.0
                          * 0.25;
          *v122 = ((v138 << 10) + 0x80000) | v144 | ((v140 << 20) + 0x20000000);
          *(float *)&v142 = (v129 * -0.418688
                           + v128 * 0.5
                           + v130 * -0.081312
                           + v131 * 0.5
                           + v132 * -0.418688
                           + v133 * -0.081312
                           + v136 * 0.5
                           + v137 * -0.418688
                           + v139 * -0.081312
                           + v142 * 0.5
                           + v143 * -0.418688
                           + v145 * -0.081312)
                          * 1023.0
                          * 0.25;
          v125[1] = v134;
          v120[1] = v118 | ((int)((v137 * 0.587 + v136 * 0.299 + v139 * 0.114) * 1023.0 + 0.0) << 10) | (v146 << 20);
          v122[1] = ((llroundf(*(float *)&v142) << 20) + 0x20000000) | (v141 + 512) | ((llroundf(*(float *)&v106) << 10)
                                                                                     + 0x80000);
          v80 += 6;
          v75 += 8;
          v79 += 96;
        }
        while (v80 < v18);
        v27 = v184;
        v147 = v183 & 0x3C;
        v43 = (int *)((char *)v44 + v147 + v75);
        v35 = (__int32 *)((char *)v35 + v75);
        v40 = (_DWORD *)((char *)v45 + v147 + v75);
        v148 = (float *)(v34 + v79);
        v149 = (float *)(v37 + v79);
        v26 = v185;
        v19 = v186;
        v21 = v182;
        v23 = v181;
      }
      if (v80 < v14)
      {
        v150 = 0;
        v151 = v149;
        v152 = v148;
        v153 = v18 % 3;
        do
        {
          if ((v80 & 1) != 0)
          {
            v157 = &v149[v150 - 4];
            v154 = v151 - 3;
            v155 = v151 - 2;
            v156 = v149[v150];
            v158 = v149[v150 + 1];
            v159 = v149[v150 + 2];
          }
          else
          {
            v154 = &v149[v150 + 1];
            v155 = &v149[v150 + 2];
            v156 = 0.0;
            v157 = v151;
            v158 = 0.0;
            v159 = 0.0;
          }
          v160 = *v157;
          v161 = *v154;
          v162 = *v155;
          v163 = *((unsigned __int8 *)&v196 + v153);
          *v40 = ((int)((v161 * 0.587 + v160 * 0.299 + v162 * 0.114) * 1023.0 + 0.0) << v163) | *v40 & ~(1023 << v163);
          if ((v80 & 1) != 0)
          {
            v167 = &v148[v150 - 4];
            v164 = v152 - 3;
            v165 = v152 - 2;
            v166 = v148[v150];
            v168 = v148[v150 + 1];
            v169 = v148[v150 + 2];
          }
          else
          {
            v164 = &v148[v150 + 1];
            v165 = &v148[v150 + 2];
            v166 = 0.0;
            v167 = v152;
            v168 = 0.0;
            v169 = 0.0;
          }
          v170 = *v167;
          v171 = *v164;
          v172 = *v165;
          if ((v80 & 1) != 0)
          {
            v174 = vmulq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_1928DFE20, v161), (float64x2_t)xmmword_1928DFE30, v160), (float64x2_t)xmmword_1928DFE40, v162), (float64x2_t)xmmword_1928DFE30, v156), (float64x2_t)xmmword_1928DFE20,
                                     v158),
                                   (float64x2_t)xmmword_1928DFE40,
                                   v159),
                                 (float64x2_t)xmmword_1928DFE30,
                                 v170),
                               (float64x2_t)xmmword_1928DFE20,
                               v171),
                             (float64x2_t)xmmword_1928DFE40,
                             v172),
                           (float64x2_t)xmmword_1928DFE30,
                           v166),
                         (float64x2_t)xmmword_1928DFE20,
                         v168),
                       (float64x2_t)xmmword_1928DFE40,
                       v169),
                     (float64x2_t)vdupq_n_s64(0x408FF80000000000uLL));
            __asm { FMOV            V21.2D, #0.25 }
            v173 = vadd_s32(vcvt_s32_f32(vrnda_f32(vcvt_f32_f64(vmulq_f64(v174, _Q21)))), (int32x2_t)0x20000000200);
          }
          else
          {
            v173 = 0;
          }
          *v43 = *v43 & ~(1023 << v163) | ((int)((v171 * 0.587 + v170 * 0.299 + v172 * 0.114) * 1023.0 + 0.0) << v163);
          if (v153 == 2)
            v153 = 0;
          else
            ++v153;
          if ((v80 & 1) != 0)
          {
            v176 = *((unsigned __int8 *)&v196 + v41);
            *v35 = *v35 & ~(1023 << v176) | (v173.i32[0] << v176);
            v177 = (__int32 *)((char *)v35 + ((v176 >> 2) & 0x3C));
            if (v41 == 2)
              v178 = 0;
            else
              v178 = v41 + 1;
            v179 = *((unsigned __int8 *)&v196 + v178);
            *v177 = *v177 & ~(1023 << v179) | (v173.i32[1] << v179);
            v35 = (__int32 *)((char *)v177 + ((v179 >> 2) & 0x3C));
            if (v178 == 2)
              v41 = 0;
            else
              v41 = v178 + 1;
          }
          v151 += 4;
          v40 += v163 >> 4;
          v152 += 4;
          ++v80;
          v150 += 4;
          v43 += v163 >> 4;
        }
        while (v14 != v80);
      }
      v32 = &v194[v190];
      v33 = &v193[v190];
      v26 += 4 * v189;
      ++v19;
      v27 += v189;
      v30 = v195 + v187;
      v34 = v192 + v187;
      v35 = &v191[v188];
    }
    while (v19 != v23);
  }
  return 0;
}

uint64_t vt_VImage_Copy_w30r_32ARGB(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  return vt_VImage_Copy_b3a8_XXXX(*(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4, a3, a8, a7, 0, 1095911234, a1);
}

uint64_t vt_VImage_Copy_w30r_32BGRA(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  return vt_VImage_Copy_b3a8_XXXX(*(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4, a3, a8, a7, 0, 1111970369, a1);
}

uint64_t vt_VImage_Copy_w30r_l64r(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  return vt_VImage_Copy_b3a8_XXXX(*(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4, a3, a8, a7, 0, 1815491698, a1);
}

uint64_t vt_VImage_Copy_w30r_RGhA(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  return vt_VImage_Copy_b3a8_XXXX(*(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4, a3, a8, a7, 0, 1380411457, a1);
}

uint64_t vt_VImage_Copy_w30r_RGfA(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  return vt_VImage_Copy_b3a8_XXXX(*(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4, a3, a8, a7, 0, 1380410945, a1);
}

uint64_t vt_Copy_w30r_b3a8_Crop(size_t a1, uint64_t a2, uint64_t *a3, const void **a4, uint64_t *a5, char **a6)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;

  if (a2)
  {
    v8 = a2;
    v10 = *a3;
    v11 = *a5;
    v12 = 4 * (a1 & 0x7FFFFFFFFFFFFFFLL);
    v13 = *a6;
    v14 = a2;
    v15 = (char *)*a4;
    do
    {
      memcpy(v13, v15, v12);
      v15 += v10;
      v13 += v11;
      --v14;
    }
    while (v14);
    v16 = a6[1];
    do
    {
      memset(v16, 255, a1);
      v16 += a5[1];
      --v8;
    }
    while (v8);
  }
  return 0;
}

uint64_t vt_Copy_w30r_b3a8(size_t a1, unint64_t a2, uint64_t *a3, const void **a4, uint64_t *a5, uint64_t a6)
{
  unint64_t v8;
  char *v10;

  v8 = a2;
  vt_Copy_NonPlanar32(a1, a2, a3, a4, a5, (void **)a6);
  if (v8)
  {
    v10 = *(char **)(a6 + 8);
    do
    {
      memset(v10, 255, a1);
      v10 += a5[1];
      --v8;
    }
    while (v8);
  }
  return 0;
}

vImage_Error vt_VImage_Setup_w30r_x420(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, uint64_t (**a9)(), uint64_t a10, void (**a11)(void **a1))
{
  void *v17;
  const vImage_ARGBToYpCbCrMatrix **v18;
  const vImage_ARGBToYpCbCrMatrix *DefaultARGBToYpCbCrMatrixWidthDimensionHint;
  __int128 v20;
  __int128 v21;
  vImage_Error result;
  __int128 v23;
  __int128 v24;
  vImage_YpCbCrPixelRange pixelRange;

  v23 = 0u;
  v24 = 0u;
  v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFCE0;
  *(_OWORD *)&pixelRange.YpMax = xmmword_1928DFCD0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v20 = xmmword_1928DFC70;
      v21 = xmmword_1928DFC80;
    }
    else if (FigCFEqual())
    {
      v20 = xmmword_1928DFC90;
      v21 = xmmword_1928DFCA0;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BD98];
        goto LABEL_3;
      }
      v20 = xmmword_1928DFCB0;
      v21 = xmmword_1928DFCC0;
    }
    v23 = v20;
    v24 = v21;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v23;
    goto LABEL_11;
  }
  v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BDA0];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v18;
LABEL_11:
  result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB16Q12|kvImageARGB16U, (vImageYpCbCrType)0x11u, 0);
  *((_QWORD *)v17 + 37) = a5;
  *((_BYTE *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_w30r_x420;
  *a11 = vt_VImage_Cleanup_w30r_x420;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_w30r_x422(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, uint64_t (**a9)(), uint64_t a10, void (**a11)(void **a1))
{
  void *v17;
  const vImage_ARGBToYpCbCrMatrix **v18;
  const vImage_ARGBToYpCbCrMatrix *DefaultARGBToYpCbCrMatrixWidthDimensionHint;
  __int128 v20;
  __int128 v21;
  vImage_Error result;
  __int128 v23;
  __int128 v24;
  vImage_YpCbCrPixelRange pixelRange;

  v23 = 0u;
  v24 = 0u;
  v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFCE0;
  *(_OWORD *)&pixelRange.YpMax = xmmword_1928DFCD0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v20 = xmmword_1928DFC70;
      v21 = xmmword_1928DFC80;
    }
    else if (FigCFEqual())
    {
      v20 = xmmword_1928DFC90;
      v21 = xmmword_1928DFCA0;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BD98];
        goto LABEL_3;
      }
      v20 = xmmword_1928DFCB0;
      v21 = xmmword_1928DFCC0;
    }
    v23 = v20;
    v24 = v21;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v23;
    goto LABEL_11;
  }
  v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BDA0];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v18;
LABEL_11:
  result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB16Q12|kvImageARGB16U, (vImageYpCbCrType)0x10u, 0);
  *((_QWORD *)v17 + 37) = a5;
  *((_BYTE *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_w30r_x422;
  *a11 = vt_VImage_Cleanup_w30r_x422;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_w30r_x444(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, uint64_t (**a9)(), uint64_t a10, void (**a11)(void **a1))
{
  void *v17;
  const vImage_ARGBToYpCbCrMatrix **v18;
  const vImage_ARGBToYpCbCrMatrix *DefaultARGBToYpCbCrMatrixWidthDimensionHint;
  __int128 v20;
  __int128 v21;
  vImage_Error result;
  __int128 v23;
  __int128 v24;
  vImage_YpCbCrPixelRange pixelRange;

  v23 = 0u;
  v24 = 0u;
  v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFCE0;
  *(_OWORD *)&pixelRange.YpMax = xmmword_1928DFCD0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v20 = xmmword_1928DFC70;
      v21 = xmmword_1928DFC80;
    }
    else if (FigCFEqual())
    {
      v20 = xmmword_1928DFC90;
      v21 = xmmword_1928DFCA0;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BD98];
        goto LABEL_3;
      }
      v20 = xmmword_1928DFCB0;
      v21 = xmmword_1928DFCC0;
    }
    v23 = v20;
    v24 = v21;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v23;
    goto LABEL_11;
  }
  v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BDA0];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v18;
LABEL_11:
  result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB16Q12|kvImageARGB16U, kvImage444AYpCbCr16|kvImage422YpCbYpCr8, 0);
  *((_QWORD *)v17 + 37) = a5;
  *((_BYTE *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_w30r_x444;
  *a11 = vt_VImage_Cleanup_w30r_x444;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_w30r_xf20(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, uint64_t (**a9)(), uint64_t a10, void (**a11)(void **a1))
{
  void *v17;
  const vImage_ARGBToYpCbCrMatrix **v18;
  const vImage_ARGBToYpCbCrMatrix *DefaultARGBToYpCbCrMatrixWidthDimensionHint;
  __int128 v20;
  __int128 v21;
  vImage_Error result;
  __int128 v23;
  __int128 v24;
  vImage_YpCbCrPixelRange pixelRange;

  v23 = 0u;
  v24 = 0u;
  v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFE50;
  *(_OWORD *)&pixelRange.YpMax = xmmword_1928DFCD0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v20 = xmmword_1928DFC70;
      v21 = xmmword_1928DFC80;
    }
    else if (FigCFEqual())
    {
      v20 = xmmword_1928DFC90;
      v21 = xmmword_1928DFCA0;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BD98];
        goto LABEL_3;
      }
      v20 = xmmword_1928DFCB0;
      v21 = xmmword_1928DFCC0;
    }
    v23 = v20;
    v24 = v21;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v23;
    goto LABEL_11;
  }
  v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BDA0];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v18;
LABEL_11:
  result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB16Q12|kvImageARGB16U, (vImageYpCbCrType)0x11u, 0);
  *((_QWORD *)v17 + 37) = a5;
  *((_BYTE *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_w30r_xf20;
  *a11 = vt_VImage_Cleanup_w30r_xf20;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_w30r_xf22(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, uint64_t (**a9)(), uint64_t a10, void (**a11)(void **a1))
{
  void *v17;
  const vImage_ARGBToYpCbCrMatrix **v18;
  const vImage_ARGBToYpCbCrMatrix *DefaultARGBToYpCbCrMatrixWidthDimensionHint;
  __int128 v20;
  __int128 v21;
  vImage_Error result;
  __int128 v23;
  __int128 v24;
  vImage_YpCbCrPixelRange pixelRange;

  v23 = 0u;
  v24 = 0u;
  v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFE50;
  *(_OWORD *)&pixelRange.YpMax = xmmword_1928DFCD0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v20 = xmmword_1928DFC70;
      v21 = xmmword_1928DFC80;
    }
    else if (FigCFEqual())
    {
      v20 = xmmword_1928DFC90;
      v21 = xmmword_1928DFCA0;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BD98];
        goto LABEL_3;
      }
      v20 = xmmword_1928DFCB0;
      v21 = xmmword_1928DFCC0;
    }
    v23 = v20;
    v24 = v21;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v23;
    goto LABEL_11;
  }
  v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BDA0];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v18;
LABEL_11:
  result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB16Q12|kvImageARGB16U, (vImageYpCbCrType)0x10u, 0);
  *((_QWORD *)v17 + 37) = a5;
  *((_BYTE *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_w30r_xf22;
  *a11 = vt_VImage_Cleanup_w30r_xf22;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_w30r_xf44(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, uint64_t (**a9)(), uint64_t a10, void (**a11)(void **a1))
{
  void *v17;
  const vImage_ARGBToYpCbCrMatrix **v18;
  const vImage_ARGBToYpCbCrMatrix *DefaultARGBToYpCbCrMatrixWidthDimensionHint;
  __int128 v20;
  __int128 v21;
  vImage_Error result;
  __int128 v23;
  __int128 v24;
  vImage_YpCbCrPixelRange pixelRange;

  v23 = 0u;
  v24 = 0u;
  v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFE50;
  *(_OWORD *)&pixelRange.YpMax = xmmword_1928DFCD0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v20 = xmmword_1928DFC70;
      v21 = xmmword_1928DFC80;
    }
    else if (FigCFEqual())
    {
      v20 = xmmword_1928DFC90;
      v21 = xmmword_1928DFCA0;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BD98];
        goto LABEL_3;
      }
      v20 = xmmword_1928DFCB0;
      v21 = xmmword_1928DFCC0;
    }
    v23 = v20;
    v24 = v21;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v23;
    goto LABEL_11;
  }
  v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BDA0];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v18;
LABEL_11:
  result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB16Q12|kvImageARGB16U, kvImage444AYpCbCr16|kvImage422YpCbYpCr8, 0);
  *((_QWORD *)v17 + 37) = a5;
  *((_BYTE *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_w30r_xf44;
  *a11 = vt_VImage_Cleanup_w30r_xf44;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_w30r_xw20(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, uint64_t (**a9)(), uint64_t a10, void (**a11)(void **a1))
{
  void *v17;
  const vImage_ARGBToYpCbCrMatrix **v18;
  const vImage_ARGBToYpCbCrMatrix *DefaultARGBToYpCbCrMatrixWidthDimensionHint;
  __int128 v20;
  __int128 v21;
  vImage_Error result;
  __int128 v23;
  __int128 v24;
  vImage_YpCbCrPixelRange pixelRange;

  v23 = 0u;
  v24 = 0u;
  v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFD00;
  *(_OWORD *)&pixelRange.YpMax = xmmword_1928DFCD0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v20 = xmmword_1928DFC70;
      v21 = xmmword_1928DFC80;
    }
    else if (FigCFEqual())
    {
      v20 = xmmword_1928DFC90;
      v21 = xmmword_1928DFCA0;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BD98];
        goto LABEL_3;
      }
      v20 = xmmword_1928DFCB0;
      v21 = xmmword_1928DFCC0;
    }
    v23 = v20;
    v24 = v21;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v23;
    goto LABEL_11;
  }
  v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BDA0];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v18;
LABEL_11:
  result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB16Q12|kvImageARGB16U, (vImageYpCbCrType)0x11u, 0);
  *((_QWORD *)v17 + 37) = a5;
  *((_BYTE *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_w30r_xw20;
  *a11 = vt_VImage_Cleanup_w30r_xw20;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_w30r_xw22(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, uint64_t (**a9)(), uint64_t a10, void (**a11)(void **a1))
{
  void *v17;
  const vImage_ARGBToYpCbCrMatrix **v18;
  const vImage_ARGBToYpCbCrMatrix *DefaultARGBToYpCbCrMatrixWidthDimensionHint;
  __int128 v20;
  __int128 v21;
  vImage_Error result;
  __int128 v23;
  __int128 v24;
  vImage_YpCbCrPixelRange pixelRange;

  v23 = 0u;
  v24 = 0u;
  v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFD00;
  *(_OWORD *)&pixelRange.YpMax = xmmword_1928DFCD0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v20 = xmmword_1928DFC70;
      v21 = xmmword_1928DFC80;
    }
    else if (FigCFEqual())
    {
      v20 = xmmword_1928DFC90;
      v21 = xmmword_1928DFCA0;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BD98];
        goto LABEL_3;
      }
      v20 = xmmword_1928DFCB0;
      v21 = xmmword_1928DFCC0;
    }
    v23 = v20;
    v24 = v21;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v23;
    goto LABEL_11;
  }
  v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BDA0];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v18;
LABEL_11:
  result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB16Q12|kvImageARGB16U, (vImageYpCbCrType)0x10u, 0);
  *((_QWORD *)v17 + 37) = a5;
  *((_BYTE *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_w30r_xw22;
  *a11 = vt_VImage_Cleanup_w30r_xw22;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_w30r_xw44(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, uint64_t (**a9)(), uint64_t a10, void (**a11)(void **a1))
{
  void *v17;
  const vImage_ARGBToYpCbCrMatrix **v18;
  const vImage_ARGBToYpCbCrMatrix *DefaultARGBToYpCbCrMatrixWidthDimensionHint;
  __int128 v20;
  __int128 v21;
  vImage_Error result;
  __int128 v23;
  __int128 v24;
  vImage_YpCbCrPixelRange pixelRange;

  v23 = 0u;
  v24 = 0u;
  v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFD00;
  *(_OWORD *)&pixelRange.YpMax = xmmword_1928DFCD0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v20 = xmmword_1928DFC70;
      v21 = xmmword_1928DFC80;
    }
    else if (FigCFEqual())
    {
      v20 = xmmword_1928DFC90;
      v21 = xmmword_1928DFCA0;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BD98];
        goto LABEL_3;
      }
      v20 = xmmword_1928DFCB0;
      v21 = xmmword_1928DFCC0;
    }
    v23 = v20;
    v24 = v21;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v23;
    goto LABEL_11;
  }
  v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BDA0];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v18;
LABEL_11:
  result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB16Q12|kvImageARGB16U, kvImage444AYpCbCr16|kvImage422YpCbYpCr8, 0);
  *((_QWORD *)v17 + 37) = a5;
  *((_BYTE *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_w30r_xw44;
  *a11 = vt_VImage_Cleanup_w30r_xw44;
  *a8 = v17;
  return result;
}

uint64_t vt_VImage_Copy_b3a8_32ARGB(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  return vt_VImage_Copy_b3a8_XXXX(*(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4, a3, a8, a7, 1, 1095911234, a1);
}

uint64_t vt_VImage_Copy_b3a8_32BGRA(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  return vt_VImage_Copy_b3a8_XXXX(*(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4, a3, a8, a7, 1, 1111970369, a1);
}

uint64_t vt_VImage_Copy_b3a8_l64r(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  return vt_VImage_Copy_b3a8_XXXX(*(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4, a3, a8, a7, 1, 1815491698, a1);
}

uint64_t vt_VImage_Copy_b3a8_RGhA(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  return vt_VImage_Copy_b3a8_XXXX(*(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4, a3, a8, a7, 1, 1380411457, a1);
}

uint64_t vt_VImage_Copy_b3a8_RGfA(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  return vt_VImage_Copy_b3a8_XXXX(*(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4, a3, a8, a7, 1, 1380410945, a1);
}

uint64_t vt_Copy_b3a8_b3a8(uint64_t a1, unint64_t a2, uint64_t *a3, const void **a4, uint64_t *a5, void **a6)
{
  vt_Copy_NonPlanar32(a1, a2, a3, a4, a5, a6);
  vt_Copy_NonPlanar8(a1, a2, a3 + 1, a4 + 1, a5 + 1, a6 + 1);
  return 0;
}

vImage_Error vt_VImage_Copy_l64r_w30r(uint64_t a1, uint64_t a2, void **a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  return vt_VImage_Copy_XXXX_b3a8(*(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4, a3, a8, a7, 0, 1815491698, a1);
}

vImage_Error vt_VImage_Copy_l64r_b3a8(uint64_t a1, uint64_t a2, void **a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  return vt_VImage_Copy_XXXX_b3a8(*(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4, a3, a8, a7, 1, 1815491698, a1);
}

uint64_t vt_VImage_Setup_l64r_RGhA(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  _OWORD *v14;

  v14 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *v14 = 0u;
  v14[1] = 0u;
  v14[2] = 0u;
  v14[3] = 0u;
  v14[4] = 0u;
  v14[5] = 0u;
  v14[6] = 0u;
  v14[7] = 0u;
  v14[8] = 0u;
  v14[9] = 0u;
  v14[10] = 0u;
  v14[11] = 0u;
  v14[12] = 0u;
  v14[13] = 0u;
  v14[14] = 0u;
  v14[15] = 0u;
  v14[16] = 0u;
  v14[17] = 0u;
  *((_QWORD *)v14 + 36) = 0;
  *((_QWORD *)v14 + 37) = a5;
  *((_BYTE *)v14 + 288) = a6;
  *a9 = vt_VImage_Copy_l64r_RGhA;
  *a11 = vt_VImage_Cleanup_l64r_RGhA;
  *a8 = v14;
  return 0;
}

vImage_Error vt_VImage_Setup_l64r_v410(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  void *v17;
  const vImage_ARGBToYpCbCrMatrix **v18;
  const vImage_ARGBToYpCbCrMatrix *DefaultARGBToYpCbCrMatrixWidthDimensionHint;
  __int128 v20;
  __int128 v21;
  vImage_Error v22;
  void *v23;
  unint64_t v24;
  size_t v25;
  malloc_type_id_t v26;
  __int128 v28;
  __int128 v29;
  vImage_YpCbCrPixelRange pixelRange;

  v28 = 0u;
  v29 = 0u;
  v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFCE0;
  *(_OWORD *)&pixelRange.YpMax = xmmword_1928DFCD0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v20 = xmmword_1928DFC70;
      v21 = xmmword_1928DFC80;
    }
    else if (FigCFEqual())
    {
      v20 = xmmword_1928DFC90;
      v21 = xmmword_1928DFCA0;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BD98];
        goto LABEL_3;
      }
      v20 = xmmword_1928DFCB0;
      v21 = xmmword_1928DFCC0;
    }
    v28 = v20;
    v29 = v21;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v28;
    goto LABEL_11;
  }
  v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BDA0];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v18;
LABEL_11:
  v22 = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, (vImageARGBType)0xFFFFFFFF, kvImage444CrYpCb10, 0);
  if (!v22 && (*((_QWORD *)v17 + 34) != a1 || *((_QWORD *)v17 + 33) != a2 || *((_QWORD *)v17 + 35) != 8 * a1))
  {
    v23 = (void *)*((_QWORD *)v17 + 32);
    if (v23)
    {
      *((_QWORD *)v17 + 32) = 0;
      free(v23);
    }
    v24 = 8 * a1;
    if (a2 && v24)
    {
      v25 = 0;
      if (((v24 | a2) & 0x8000000000000000) != 0)
        goto LABEL_25;
      if (!is_mul_ok(a2, v24))
        goto LABEL_25;
      v25 = v24 * a2;
      if (!(v24 * a2))
        goto LABEL_25;
      v26 = 1556728742;
    }
    else
    {
      v25 = 0;
      v26 = 1270757447;
    }
    v25 = (size_t)malloc_type_malloc(v25, v26);
LABEL_25:
    *((_QWORD *)v17 + 32) = v25;
    *((_QWORD *)v17 + 33) = a2;
    *((_QWORD *)v17 + 34) = a1;
    *((_QWORD *)v17 + 35) = v24;
  }
  *((_QWORD *)v17 + 37) = a5;
  *((_BYTE *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_l64r_v410;
  *a11 = vt_VImage_Cleanup_l64r_v410;
  *a8 = v17;
  return v22;
}

vImage_Error vt_VImage_Setup_l64r_y416(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  void *v17;
  __int128 v18;
  const vImage_ARGBToYpCbCrMatrix **v19;
  const vImage_ARGBToYpCbCrMatrix *DefaultARGBToYpCbCrMatrixWidthDimensionHint;
  __int128 v21;
  __int128 v22;
  vImage_Error result;
  __int128 v24;
  __int128 v25;
  vImage_YpCbCrPixelRange pixelRange;

  v24 = 0u;
  v25 = 0u;
  v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(_QWORD *)&v18 = 0xFFFFLL;
  *((_QWORD *)&v18 + 1) = 0xFFFFLL;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFCF0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v21 = xmmword_1928DFC70;
      v22 = xmmword_1928DFC80;
    }
    else if (FigCFEqual())
    {
      v21 = xmmword_1928DFC90;
      v22 = xmmword_1928DFCA0;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BD98];
        goto LABEL_3;
      }
      v21 = xmmword_1928DFCB0;
      v22 = xmmword_1928DFCC0;
    }
    v24 = v21;
    v25 = v22;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v24;
    goto LABEL_11;
  }
  v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BDA0];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v19;
LABEL_11:
  result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB16U, kvImage444AYpCbCr16, 0);
  *((_QWORD *)v17 + 37) = a5;
  *((_BYTE *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_l64r_y416;
  *a11 = vt_VImage_Cleanup_l64r_y416;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_l64r_v216(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, _QWORD *a8, _QWORD *a9, uint64_t a10, void (**a11)(void **a1))
{
  void *v17;
  __int128 v18;
  const vImage_ARGBToYpCbCrMatrix **v19;
  const vImage_ARGBToYpCbCrMatrix *DefaultARGBToYpCbCrMatrixWidthDimensionHint;
  __int128 v21;
  __int128 v22;
  vImage_Error result;
  __int128 v24;
  __int128 v25;
  vImage_YpCbCrPixelRange pixelRange;

  v24 = 0u;
  v25 = 0u;
  v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(_QWORD *)&v18 = 0xFFFFLL;
  *((_QWORD *)&v18 + 1) = 0xFFFFLL;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFCF0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v21 = xmmword_1928DFC70;
      v22 = xmmword_1928DFC80;
    }
    else if (FigCFEqual())
    {
      v21 = xmmword_1928DFC90;
      v22 = xmmword_1928DFCA0;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BD98];
        goto LABEL_3;
      }
      v21 = xmmword_1928DFCB0;
      v22 = xmmword_1928DFCC0;
    }
    v24 = v21;
    v25 = v22;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v24;
    goto LABEL_11;
  }
  v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E0C8BDA0];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v19;
LABEL_11:
  result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB16U, kvImage422CbYpCrYp16, 0);
  *((_QWORD *)v17 + 37) = a5;
  *((_BYTE *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_l64r_v216;
  *a11 = vt_VImage_Cleanup_l64r_v216;
  *a8 = v17;
  return result;
}

uint64_t vt_Copy_64RGBA_y420ITU2020(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int16 **a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  unsigned __int16 *v15;
  _BYTE *v16;
  char *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v42;
  unsigned __int16 *v43;
  _BYTE *v44;

  if (a2 >= 2)
  {
    v6 = 0;
    v7 = *a3;
    v40 = a2 >> 1;
    v9 = a6[1];
    v8 = a6[2];
    v39 = *(int *)(a5 + 16);
    v38 = *(int *)(a5 + 8);
    v10 = *a6;
    v11 = (int)*(_QWORD *)a5;
    v37 = (int)(2 * *(_QWORD *)a5);
    v36 = 2 * *a3;
    if (a1 >> 1 <= 1)
      v12 = 1;
    else
      v12 = a1 >> 1;
    v44 = (_BYTE *)(v10 + 1);
    v43 = *a4;
    do
    {
      v42 = v6;
      if (a1 >= 2)
      {
        v13 = 0;
        v15 = v43;
        v14 = v44;
        do
        {
          v16 = &v14[v11];
          v17 = (char *)v15 + v7;
          v18 = *v15;
          v19 = v15[1];
          v20 = v15[2];
          v21 = HIBYTE(v15[4]);
          v22 = HIBYTE(v15[5]);
          v23 = HIBYTE(v15[6]);
          v24 = *(unsigned __int16 *)((char *)v15 + v7);
          v25 = *(unsigned __int16 *)((char *)v15 + v7 + 2);
          v26 = v7;
          v27 = *(unsigned __int16 *)((char *)v15 + v7 + 4);
          v28 = *(unsigned __int16 *)((char *)v15 + v7 + 8);
          v29 = *((unsigned __int16 *)v17 + 5);
          LODWORD(v17) = *((unsigned __int16 *)v17 + 6);
          *(v14 - 1) = (7371 * (v18 >> 8) + 540672 + 19024 * (v19 >> 8) + 1664 * (v20 >> 8)) >> 15;
          *v14 = (7371 * v21 + 540672 + 19024 * v22 + 1664 * v23) >> 15;
          v14 += 2;
          v29 >>= 8;
          *(v16 - 1) = (7371 * (v24 >> 8) + 540672 + 19024 * (v25 >> 8) + 1664 * (v27 >> 8)) >> 15;
          *v16 = (7371 * (v28 >> 8) + 540672 + 19024 * v29 + 1664 * (v17 >> 8)) >> 15;
          v30 = v23 + (v20 >> 8) + (v27 >> 8);
          v31 = v21 + (v18 >> 8) + (v24 >> 8) + (v28 >> 8);
          v32 = v22 + (v19 >> 8) + (v25 >> 8);
          v33 = 33544090 * v29 - 10342 * v32 + 33550426 * v31 + 14350 * (v30 + (v17 >> 8));
          v34 = 33541237 * v29 - 13195 * v32 + 33553279 * v30 + 33553279 * (v17 >> 8) + 14350 * v31;
          v7 = v26;
          *(_BYTE *)(v9 + v13) = (v33 + 16842752) >> 17;
          *(_BYTE *)(v8 + v13) = (v34 + 16842752) >> 17;
          v15 += 8;
          ++v13;
        }
        while (v12 != v13);
      }
      v9 += v38;
      v8 += v39;
      v43 = (unsigned __int16 *)((char *)v43 + v36);
      ++v6;
      v44 += v37;
    }
    while (v42 + 1 != v40);
  }
  return 0;
}

uint64_t vt_Copy_64RGBA_y420ITU709(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int16 **a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  unsigned __int16 *v15;
  _BYTE *v16;
  char *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v42;
  unsigned __int16 *v43;
  _BYTE *v44;

  if (a2 >= 2)
  {
    v6 = 0;
    v7 = *a3;
    v40 = a2 >> 1;
    v9 = a6[1];
    v8 = a6[2];
    v39 = *(int *)(a5 + 16);
    v38 = *(int *)(a5 + 8);
    v10 = *a6;
    v11 = (int)*(_QWORD *)a5;
    v37 = (int)(2 * *(_QWORD *)a5);
    v36 = 2 * *a3;
    if (a1 >> 1 <= 1)
      v12 = 1;
    else
      v12 = a1 >> 1;
    v44 = (_BYTE *)(v10 + 1);
    v43 = *a4;
    do
    {
      v42 = v6;
      if (a1 >= 2)
      {
        v13 = 0;
        v15 = v43;
        v14 = v44;
        do
        {
          v16 = &v14[v11];
          v17 = (char *)v15 + v7;
          v18 = *v15;
          v19 = v15[1];
          v20 = v15[2];
          v21 = HIBYTE(v15[4]);
          v22 = HIBYTE(v15[5]);
          v23 = HIBYTE(v15[6]);
          v24 = *(unsigned __int16 *)((char *)v15 + v7);
          v25 = *(unsigned __int16 *)((char *)v15 + v7 + 2);
          v26 = v7;
          v27 = *(unsigned __int16 *)((char *)v15 + v7 + 4);
          v28 = *(unsigned __int16 *)((char *)v15 + v7 + 8);
          v29 = *((unsigned __int16 *)v17 + 5);
          LODWORD(v17) = *((unsigned __int16 *)v17 + 6);
          *(v14 - 1) = (5983 * (v18 >> 8) + 540672 + 20127 * (v19 >> 8) + 2032 * (v20 >> 8)) >> 15;
          *v14 = (5983 * v21 + 540672 + 20127 * v22 + 2032 * v23) >> 15;
          v14 += 2;
          v29 >>= 8;
          *(v16 - 1) = (5983 * (v24 >> 8) + 540672 + 20127 * (v25 >> 8) + 2032 * (v27 >> 8)) >> 15;
          *v16 = (5983 * (v28 >> 8) + 540672 + 20127 * v29 + 2032 * (v17 >> 8)) >> 15;
          v30 = v23 + (v20 >> 8) + (v27 >> 8);
          v31 = v21 + (v18 >> 8) + (v24 >> 8) + (v28 >> 8);
          v32 = v22 + (v19 >> 8) + (v25 >> 8);
          v33 = 33543339 * v29 - 11093 * v32 + 33551135 * v31 + 14392 * (v30 + (v17 >> 8));
          v34 = 33541360 * v29 - 13072 * v32 + 33553113 * v30 + 33553113 * (v17 >> 8) + 14392 * v31;
          v7 = v26;
          *(_BYTE *)(v9 + v13) = (v33 + 16842752) >> 17;
          *(_BYTE *)(v8 + v13) = (v34 + 16842752) >> 17;
          v15 += 8;
          ++v13;
        }
        while (v12 != v13);
      }
      v9 += v38;
      v8 += v39;
      v43 = (unsigned __int16 *)((char *)v43 + v36);
      ++v6;
      v44 += v37;
    }
    while (v42 + 1 != v40);
  }
  return 0;
}

uint64_t vt_Copy_64RGBA_y420ITU601(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int16 **a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  unsigned __int16 *v15;
  _BYTE *v16;
  char *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v42;
  unsigned __int16 *v43;
  _BYTE *v44;

  if (a2 >= 2)
  {
    v6 = 0;
    v7 = *a3;
    v40 = a2 >> 1;
    v9 = a6[1];
    v8 = a6[2];
    v39 = *(int *)(a5 + 16);
    v38 = *(int *)(a5 + 8);
    v10 = *a6;
    v11 = (int)*(_QWORD *)a5;
    v37 = (int)(2 * *(_QWORD *)a5);
    v36 = 2 * *a3;
    if (a1 >> 1 <= 1)
      v12 = 1;
    else
      v12 = a1 >> 1;
    v44 = (_BYTE *)(v10 + 1);
    v43 = *a4;
    do
    {
      v42 = v6;
      if (a1 >= 2)
      {
        v13 = 0;
        v15 = v43;
        v14 = v44;
        do
        {
          v16 = &v14[v11];
          v17 = (char *)v15 + v7;
          v18 = *v15;
          v19 = v15[1];
          v20 = v15[2];
          v21 = HIBYTE(v15[4]);
          v22 = HIBYTE(v15[5]);
          v23 = HIBYTE(v15[6]);
          v24 = *(unsigned __int16 *)((char *)v15 + v7);
          v25 = *(unsigned __int16 *)((char *)v15 + v7 + 2);
          v26 = v7;
          v27 = *(unsigned __int16 *)((char *)v15 + v7 + 4);
          v28 = *(unsigned __int16 *)((char *)v15 + v7 + 8);
          v29 = *((unsigned __int16 *)v17 + 5);
          LODWORD(v17) = *((unsigned __int16 *)v17 + 6);
          *(v14 - 1) = (8414 * (v18 >> 8) + 540672 + 16519 * (v19 >> 8) + 3208 * (v20 >> 8)) >> 15;
          *v14 = (8414 * v21 + 540672 + 16519 * v22 + 3208 * v23) >> 15;
          v14 += 2;
          v29 >>= 8;
          *(v16 - 1) = (8414 * (v24 >> 8) + 540672 + 16519 * (v25 >> 8) + 3208 * (v27 >> 8)) >> 15;
          *v16 = (8414 * (v28 >> 8) + 540672 + 16519 * v29 + 3208 * (v17 >> 8)) >> 15;
          v30 = v23 + (v20 >> 8) + (v27 >> 8);
          v31 = v21 + (v18 >> 8) + (v24 >> 8) + (v28 >> 8);
          v32 = v22 + (v19 >> 8) + (v25 >> 8);
          v33 = 33544898 * v29 - 9534 * v32 + 33549576 * v31 + 14392 * (v30 + (v17 >> 8));
          v34 = 33542381 * v29 - 12051 * v32 + 33552092 * v30 + 33552092 * (v17 >> 8) + 14392 * v31;
          v7 = v26;
          *(_BYTE *)(v9 + v13) = (v33 + 16842752) >> 17;
          *(_BYTE *)(v8 + v13) = (v34 + 16842752) >> 17;
          v15 += 8;
          ++v13;
        }
        while (v12 != v13);
      }
      v9 += v38;
      v8 += v39;
      v43 = (unsigned __int16 *)((char *)v43 + v36);
      ++v6;
      v44 += v37;
    }
    while (v42 + 1 != v40);
  }
  return 0;
}

uint64_t vt_Copy_64RGBA_f420ITU2020(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int16 **a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  unsigned __int16 *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  _BYTE *v27;
  int v28;
  int v29;
  int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v44;
  unsigned __int16 *v45;
  uint64_t v46;

  if (a2 >= 2)
  {
    v6 = 0;
    v7 = *a3;
    v9 = a6[1];
    v8 = a6[2];
    v41 = *(int *)(a5 + 16);
    v42 = a2 >> 1;
    v40 = *(int *)(a5 + 8);
    v10 = (int)*(_QWORD *)a5;
    v39 = (int)(2 * *(_QWORD *)a5);
    v38 = 2 * *a3;
    if (a1 >> 1 <= 1)
      v11 = 1;
    else
      v11 = a1 >> 1;
    v45 = *a4;
    v46 = *a6 + 1;
    do
    {
      v44 = v6;
      if (a1 >= 2)
      {
        v12 = 0;
        v14 = v45;
        v13 = (_BYTE *)v46;
        do
        {
          v15 = *v14;
          v16 = v14[1];
          v17 = v14[2];
          v18 = v14[4];
          v19 = HIBYTE(v14[5]);
          v20 = *(unsigned __int16 *)((char *)v14 + v7);
          v21 = *(unsigned __int16 *)((char *)v14 + v7 + 2);
          v22 = *(unsigned __int16 *)((char *)v14 + v7 + 4);
          v23 = *(unsigned __int16 *)((char *)v14 + v7 + 8);
          v24 = *(unsigned __int16 *)((char *)v14 + v7 + 10);
          v25 = *(unsigned __int16 *)((char *)v14 + v7 + 12);
          v26 = HIBYTE(v14[6]);
          *(v13 - 1) = (22217 * (v16 >> 8) + 8608 * (v15 >> 8) + 1943 * (v17 >> 8) + 0x4000) >> 15;
          *v13 = (22217 * v19 + 8608 * (v18 >> 8) + 1943 * v26 + 0x4000) >> 15;
          v27 = &v13[v10];
          *(v27 - 1) = (22217 * (v21 >> 8) + 8608 * (v20 >> 8) + 1943 * (v22 >> 8) + 0x4000) >> 15;
          *v27 = (22217 * (v24 >> 8) + 8608 * (v23 >> 8) + 1943 * (v25 >> 8) + 0x4000) >> 15;
          v28 = v19 + (v16 >> 8) + (v21 >> 8) + (v24 >> 8);
          v29 = v26 + (v17 >> 8) + (v22 >> 8) + (v25 >> 8);
          v30 = -4574 * ((v18 >> 8) + (v15 >> 8) + (v20 >> 8) + (v23 >> 8)) + (v29 << 14) - 11808 * v28;
          v31 = -15065 * v28 + (((v20 >> 8) + (v18 >> 8) + (v23 >> 8) + (v15 >> 8)) << 14);
          v32 = v30 + 0x1000000;
          v33 = (v30 + 16842752) >> 17;
          if (v32 > 0x1FEFFFF)
            LOBYTE(v33) = -1;
          *(_BYTE *)(v9 + v12) = v33;
          v34 = v31 - 1317 * v29;
          v35 = v34 + 0x1000000;
          v36 = (v34 + 16842752) >> 17;
          if (v35 > 0x1FEFFFF)
            LOBYTE(v36) = -1;
          *(_BYTE *)(v8 + v12) = v36;
          v14 += 8;
          ++v12;
          v13 += 2;
        }
        while (v11 != v12);
      }
      v9 += v40;
      v8 += v41;
      v45 = (unsigned __int16 *)((char *)v45 + v38);
      v6 = v44 + 1;
      v46 += v39;
    }
    while (v44 + 1 != v42);
  }
  return 0;
}

uint64_t vt_Copy_64RGBA_f420ITU709(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int16 **a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  unsigned __int16 *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  _BYTE *v27;
  int v28;
  int v29;
  int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v44;
  unsigned __int16 *v45;
  uint64_t v46;

  if (a2 >= 2)
  {
    v6 = 0;
    v7 = *a3;
    v9 = a6[1];
    v8 = a6[2];
    v41 = *(int *)(a5 + 16);
    v42 = a2 >> 1;
    v40 = *(int *)(a5 + 8);
    v10 = (int)*(_QWORD *)a5;
    v39 = (int)(2 * *(_QWORD *)a5);
    v38 = 2 * *a3;
    if (a1 >> 1 <= 1)
      v11 = 1;
    else
      v11 = a1 >> 1;
    v45 = *a4;
    v46 = *a6 + 1;
    do
    {
      v44 = v6;
      if (a1 >= 2)
      {
        v12 = 0;
        v14 = v45;
        v13 = (_BYTE *)v46;
        do
        {
          v15 = *v14;
          v16 = v14[1];
          v17 = v14[2];
          v18 = v14[4];
          v19 = HIBYTE(v14[5]);
          v20 = *(unsigned __int16 *)((char *)v14 + v7);
          v21 = *(unsigned __int16 *)((char *)v14 + v7 + 2);
          v22 = *(unsigned __int16 *)((char *)v14 + v7 + 4);
          v23 = *(unsigned __int16 *)((char *)v14 + v7 + 8);
          v24 = *(unsigned __int16 *)((char *)v14 + v7 + 10);
          v25 = *(unsigned __int16 *)((char *)v14 + v7 + 12);
          v26 = HIBYTE(v14[6]);
          *(v13 - 1) = (23436 * (v16 >> 8) + 6966 * (v15 >> 8) + 2366 * (v17 >> 8) + 0x4000) >> 15;
          *v13 = (23436 * v19 + 6966 * (v18 >> 8) + 2366 * v26 + 0x4000) >> 15;
          v27 = &v13[v10];
          *(v27 - 1) = (23436 * (v21 >> 8) + 6966 * (v20 >> 8) + 2366 * (v22 >> 8) + 0x4000) >> 15;
          *v27 = (23436 * (v24 >> 8) + 6966 * (v23 >> 8) + 2366 * (v25 >> 8) + 0x4000) >> 15;
          v28 = v19 + (v16 >> 8) + (v21 >> 8) + (v24 >> 8);
          v29 = v26 + (v17 >> 8) + (v22 >> 8) + (v25 >> 8);
          v30 = -3753 * ((v18 >> 8) + (v15 >> 8) + (v20 >> 8) + (v23 >> 8)) + (v29 << 14) - 12629 * v28;
          v31 = -14881 * v28 + (((v20 >> 8) + (v18 >> 8) + (v23 >> 8) + (v15 >> 8)) << 14);
          v32 = v30 + 0x1000000;
          v33 = (v30 + 16842752) >> 17;
          if (v32 > 0x1FEFFFF)
            LOBYTE(v33) = -1;
          *(_BYTE *)(v9 + v12) = v33;
          v34 = v31 - 1501 * v29;
          v35 = v34 + 0x1000000;
          v36 = (v34 + 16842752) >> 17;
          if (v35 > 0x1FEFFFF)
            LOBYTE(v36) = -1;
          *(_BYTE *)(v8 + v12) = v36;
          v14 += 8;
          ++v12;
          v13 += 2;
        }
        while (v11 != v12);
      }
      v9 += v40;
      v8 += v41;
      v45 = (unsigned __int16 *)((char *)v45 + v38);
      v6 = v44 + 1;
      v46 += v39;
    }
    while (v44 + 1 != v42);
  }
  return 0;
}

uint64_t vt_Copy_64RGBA_f420ITU601(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int16 **a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  unsigned __int16 *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  _BYTE *v27;
  int v28;
  int v29;
  int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v44;
  unsigned __int16 *v45;
  uint64_t v46;

  if (a2 >= 2)
  {
    v6 = 0;
    v7 = *a3;
    v9 = a6[1];
    v8 = a6[2];
    v41 = *(int *)(a5 + 16);
    v42 = a2 >> 1;
    v40 = *(int *)(a5 + 8);
    v10 = (int)*(_QWORD *)a5;
    v39 = (int)(2 * *(_QWORD *)a5);
    v38 = 2 * *a3;
    if (a1 >> 1 <= 1)
      v11 = 1;
    else
      v11 = a1 >> 1;
    v45 = *a4;
    v46 = *a6 + 1;
    do
    {
      v44 = v6;
      if (a1 >= 2)
      {
        v12 = 0;
        v14 = v45;
        v13 = (_BYTE *)v46;
        do
        {
          v15 = *v14;
          v16 = v14[1];
          v17 = v14[2];
          v18 = v14[4];
          v19 = HIBYTE(v14[5]);
          v20 = *(unsigned __int16 *)((char *)v14 + v7);
          v21 = *(unsigned __int16 *)((char *)v14 + v7 + 2);
          v22 = *(unsigned __int16 *)((char *)v14 + v7 + 4);
          v23 = *(unsigned __int16 *)((char *)v14 + v7 + 8);
          v24 = *(unsigned __int16 *)((char *)v14 + v7 + 10);
          v25 = *(unsigned __int16 *)((char *)v14 + v7 + 12);
          v26 = HIBYTE(v14[6]);
          *(v13 - 1) = (19235 * (v16 >> 8) + 9798 * (v15 >> 8) + 3736 * (v17 >> 8) + 0x4000) >> 15;
          *v13 = (19235 * v19 + 9798 * (v18 >> 8) + 3736 * v26 + 0x4000) >> 15;
          v27 = &v13[v10];
          *(v27 - 1) = (19235 * (v21 >> 8) + 9798 * (v20 >> 8) + 3736 * (v22 >> 8) + 0x4000) >> 15;
          *v27 = (19235 * (v24 >> 8) + 9798 * (v23 >> 8) + 3736 * (v25 >> 8) + 0x4000) >> 15;
          v28 = v19 + (v16 >> 8) + (v21 >> 8) + (v24 >> 8);
          v29 = v26 + (v17 >> 8) + (v22 >> 8) + (v25 >> 8);
          v30 = -5528 * ((v18 >> 8) + (v15 >> 8) + (v20 >> 8) + (v23 >> 8)) + (v29 << 14) - 10854 * v28;
          v31 = -13719 * v28 + (((v20 >> 8) + (v18 >> 8) + (v23 >> 8) + (v15 >> 8)) << 14);
          v32 = v30 + 0x1000000;
          v33 = (v30 + 16842752) >> 17;
          if (v32 > 0x1FEFFFF)
            LOBYTE(v33) = -1;
          *(_BYTE *)(v9 + v12) = v33;
          v34 = v31 - 2663 * v29;
          v35 = v34 + 0x1000000;
          v36 = (v34 + 16842752) >> 17;
          if (v35 > 0x1FEFFFF)
            LOBYTE(v36) = -1;
          *(_BYTE *)(v8 + v12) = v36;
          v14 += 8;
          ++v12;
          v13 += 2;
        }
        while (v11 != v12);
      }
      v9 += v40;
      v8 += v41;
      v45 = (unsigned __int16 *)((char *)v45 + v38);
      v6 = v44 + 1;
      v46 += v39;
    }
    while (v44 + 1 != v42);
  }
  return 0;
}

uint64_t vt_Copy_64RGBA_p420ITU2020(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, _QWORD *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _DWORD *v24;
  unint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unsigned __int16 *v32;
  unsigned __int16 *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int16 *v44;
  unsigned __int16 *v45;
  unsigned __int16 *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int16 *v54;
  unsigned __int16 *v55;
  unsigned __int16 *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  unint64_t v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unsigned __int16 *v73;
  unsigned __int16 *v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  unsigned int v81;
  unsigned int v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  int v98;
  unsigned int v99;
  unint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  unsigned int *v118;
  unsigned int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned __int16 *v126;
  unint64_t v127;
  uint64_t v128;
  unsigned int v129;
  unsigned __int16 *v130;
  unsigned __int16 *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned __int16 *v135;
  unsigned __int16 *v136;
  unsigned __int16 *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unsigned __int16 *v145;
  unsigned __int16 *v146;
  unsigned __int16 *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int v151;
  unsigned int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  unsigned int *v157;
  unsigned int v158;
  unint64_t v159;
  unsigned int v160;
  unsigned int v162;
  unint64_t v163;
  unsigned int *v164;
  unsigned int *v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  unsigned int v171;
  uint64_t v172;
  unsigned __int16 *v173;
  unsigned __int16 *v174;
  uint64_t v175;
  unsigned int *v176;
  unint64_t v177;
  _DWORD *v178;
  uint64_t v179;
  char *v180;
  char *v181;
  _DWORD *v182;
  unint64_t v183;
  unint64_t v184;
  int v185;
  unsigned int v186;
  char *v187;
  char *v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unsigned __int16 *v193;
  unsigned int v194;
  int v195;

  v195 = 1313280;
  v8 = *(_QWORD *)(a2 + 40);
  v9 = (v8 & 1) + v8;
  v10 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v11 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v13 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v14 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v15 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v16 = v14 - v13;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v10 < v14 - v13)
    v16 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v10;
  v17 = v11 - v9;
  if (v11 - v9 >= v15 - v12)
    v17 = v15 - v12;
  v18 = v14 % 6;
  v19 = v16 >= v18;
  v20 = v16 - v18;
  if (!v19)
    v20 = 0;
  v183 = v16;
  v184 = v20;
  if (v17 >= 2)
  {
    v21 = 0;
    v171 = v13 % 3;
    v162 = v20 % 3;
    v22 = 6 * (v13 / 6) - v13 + 6;
    v170 = v17 >> 1;
    v23 = a8[1];
    v24 = (_DWORD *)(a7[1] + v23 * (v12 >> 1) + 4 * (v13 / 3));
    v25 = *a7 + *a8 * v12 + 4 * (v13 / 3);
    v26 = (unsigned int *)(v25 + *a8);
    v27 = *a3;
    v28 = *a4;
    v29 = *a3 + *a4 * v9;
    v30 = v22;
    v31 = 8 * v10;
    v32 = (unsigned __int16 *)(v29 + 8 * v10);
    v33 = (unsigned __int16 *)((char *)v32 + v28);
    v169 = v28 & 0x7FFFFFFFFFFFFFFFLL;
    v168 = (*a8 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    v34 = v27 + v28 + v28 * (v8 + (v8 & 1));
    v166 = 2 * v28;
    v167 = v23 >> 2;
    v190 = v30;
    v191 = 8 * v10;
    do
    {
      v178 = v24;
      v179 = v21;
      v35 = 0;
      v175 = v29;
      v176 = v26;
      v172 = v34;
      v173 = v33;
      v36 = v171;
      v194 = v171;
      v37 = v26;
      v177 = v25;
      v38 = (unsigned int *)v25;
      v174 = v32;
      do
      {
        v39 = v38;
        v40 = v37;
        if ((v35 & 1) != 0)
        {
          v46 = (unsigned __int16 *)(v29 + v31 - 8);
          v44 = v32 - 3;
          v45 = v32 - 2;
          v41 = *(unsigned __int16 *)(v29 + v31);
          v42 = *(unsigned __int16 *)(v29 + v31 + 2);
          v43 = *(unsigned __int16 *)(v29 + v31 + 4);
        }
        else
        {
          v41 = 0;
          v42 = 0;
          v43 = 0;
          v44 = (unsigned __int16 *)(v29 + v31 + 2);
          v45 = (unsigned __int16 *)(v29 + v31 + 4);
          v46 = v32;
        }
        v47 = *v45;
        v48 = *v44;
        v49 = *v46;
        v50 = *((unsigned __int8 *)&v195 + v36);
        *v39 = (((268439553
                              * (unint64_t)(1023
                                                 * ((1664 * v47 + 134234112 + 19024 * v48 + 7371 * v49) >> 15)
                                                 + 0x7FFF)) >> 32) >> 12 << v50) | *v39 & ~(1023 << v50);
        if ((v35 & 1) != 0)
        {
          v56 = (unsigned __int16 *)(v34 + v31 - 8);
          v54 = v33 - 3;
          v55 = v33 - 2;
          v51 = *(unsigned __int16 *)(v34 + v31);
          v52 = *(unsigned __int16 *)(v34 + v31 + 2);
          v53 = *(unsigned __int16 *)(v34 + v31 + 4);
        }
        else
        {
          v51 = 0;
          v52 = 0;
          v53 = 0;
          v54 = (unsigned __int16 *)(v34 + v31 + 2);
          v55 = (unsigned __int16 *)(v34 + v31 + 4);
          v56 = v33;
        }
        v57 = *v55;
        v58 = *v54;
        v59 = *v56;
        if ((v35 & 1) != 0)
        {
          v62 = v43 + v47 + v57;
          v63 = v41 + v49 + v51 + v59;
          v64 = v42 + v48 + v58;
          v31 = v191;
          v60 = (int)(1023
                    * ((0x1FFFFFFFFD79ALL * v52
                      + 14350 * (unint64_t)(v62 + v53)
                      + 0x1FFFFFFFFD79ALL * v64
                      + 0x1FFFFFFFFF05ALL * v63
                      + 0x100000000) >> 17)
                    + 0x7FFF)
              / 0xFFFF;
          LODWORD(v63) = (unint64_t)(2147516417
                                          * (int)(1023
                                                * ((0x1FFFFFFFFFB7FLL * v53
                                                  + 0x1FFFFFFFFCC75 * v52
                                                  + 0x1FFFFFFFFFB7FLL * v62
                                                  + 0x1FFFFFFFFCC75 * v64
                                                  + 14350 * (unint64_t)v63
                                                  + 0x100000000) >> 17)
                                                + 0x7FFF)) >> 32;
          v61 = ((int)v63 >> 15) + (v63 >> 31);
        }
        else
        {
          v60 = 0;
          v61 = 0;
        }
        *v40 = *v40 & ~(1023 << v50) | (((268439553
                                                      * (unint64_t)(1023
                                                                         * ((1664 * v57
                                                                                         + 134234112
                                                                                         + 19024 * v58
                                                                                         + 7371 * v59) >> 15)
                                                                         + 0x7FFF)) >> 32) >> 12 << v50);
        if (v36 == 2)
          v36 = 0;
        else
          ++v36;
        if ((v35 & 1) != 0)
        {
          v65 = *((unsigned __int8 *)&v195 + v194);
          *v24 = *v24 & ~(1023 << v65) | (v60 << v65);
          v66 = (_DWORD *)((char *)v24 + ((v65 >> 2) & 0x3C));
          if (v194 == 2)
            v67 = 0;
          else
            v67 = v194 + 1;
          v68 = *((unsigned __int8 *)&v195 + v67);
          *v66 = *v66 & ~(1023 << v68) | (v61 << v68);
          v24 = (unsigned int *)((char *)v66 + ((v68 >> 2) & 0x3C));
          if (v67 == 2)
            v69 = 0;
          else
            v69 = v67 + 1;
          v194 = v69;
        }
        v32 += 4;
        v38 = &v39[v50 >> 4];
        v33 += 4;
        ++v35;
        v34 += 8;
        v37 = &v40[v50 >> 4];
        v29 += 8;
      }
      while (v190 != v35);
      if (v190 >= v184)
      {
        v193 = (unsigned __int16 *)(v29 + v31);
        v126 = (unsigned __int16 *)(v34 + v31);
        v72 = v190;
        v127 = v183;
      }
      else
      {
        v70 = 0;
        v163 = v50 >> 2;
        v164 = v40;
        v71 = (v50 >> 2) & 0x3C;
        v165 = v39;
        v180 = (char *)v39 + v71;
        v181 = (char *)v40 + v71;
        v72 = v190;
        v182 = v24;
        do
        {
          v192 = v70;
          v189 = v31;
          v188 = &v181[v70];
          v187 = &v180[v70];
          v73 = (unsigned __int16 *)(v34 + v31);
          v74 = (unsigned __int16 *)(v29 + v31);
          v75 = *(unsigned __int16 *)(v29 + v31);
          v76 = *(unsigned __int16 *)(v29 + v31 + 2);
          v77 = *(unsigned __int16 *)(v29 + v31 + 4);
          v78 = *(unsigned __int16 *)(v29 + v31 + 8);
          v79 = *(unsigned __int16 *)(v29 + v31 + 10);
          v80 = *(unsigned __int16 *)(v29 + v31 + 12);
          v81 = 1023 * ((7371 * v75 + 134234112 + 19024 * v76 + 1664 * v77) >> 15) + 0x7FFF;
          v82 = 1023 * ((7371 * v78 + 134234112 + 19024 * v79 + 1664 * v80) >> 15);
          v83 = *(unsigned __int16 *)(v34 + v31);
          v84 = *(unsigned __int16 *)(v34 + v31 + 2);
          v85 = *(unsigned __int16 *)(v34 + v31 + 4);
          v86 = 1023 * ((7371 * v83 + 134234112 + 19024 * v84 + 1664 * v85) >> 15) + 0x7FFF;
          v87 = *(unsigned __int16 *)(v34 + v31 + 8);
          v88 = v73[5];
          v89 = v73[6];
          v90 = v80 + v77 + v85;
          v91 = v78 + v75 + v83 + v87;
          v92 = v79 + v76 + v84;
          LODWORD(v80) = 1023
                       * ((0x1FFFFFFFFD79ALL * v88
                         - 10342 * v92
                         + 0x1FFFFFFFFF05ALL * v91
                         + 14350 * (unint64_t)(v90 + v89)
                         + 0x100000000) >> 17);
          v93 = 0x1FFFFFFFFCC75 * v88
              - 13195 * v92
              + 0x1FFFFFFFFFB7FLL * v90
              + 0x1FFFFFFFFFB7FLL * v89
              + 14350 * v91;
          v94 = (268439553
               * (unint64_t)(1023 * ((7371 * v87 + 134234112 + 19024 * v88 + 1664 * v89) >> 15)
                                  + 0x7FFF)) >> 34;
          v95 = v74[8];
          LODWORD(v90) = v74[9];
          v96 = v74[10];
          LODWORD(v85) = v80 + 0x7FFF;
          LODWORD(v89) = (((268439553 * (unint64_t)(v82 + 0x7FFF)) >> 32) >> 2) & 0x7FFFC00 | (((268439553 * (unint64_t)v81) >> 32) >> 12);
          v97 = v74[12];
          LODWORD(v80) = v74[13];
          v98 = v74[14];
          v99 = v85;
          v100 = (268439553
                * (unint64_t)(1023 * ((7371 * v97 + 134234112 + 19024 * v80 + 1664 * v98) >> 15)
                                   + 0x7FFF)) >> 44;
          v101 = v73[8];
          v102 = v73[9];
          v103 = v73[10];
          LODWORD(v87) = v89 | (((268439553
                                              * (unint64_t)(1023
                                                                 * ((7371 * v95
                                                                                 + 134234112
                                                                                 + 19024 * v90
                                                                                 + 1664 * v96) >> 15)
                                                                 + 0x7FFF)) >> 32) >> 12 << 20);
          v104 = v73[12];
          v105 = v73[13];
          v106 = v73[14];
          LODWORD(v94) = v94 & 0x7FFFC00 | (((268439553 * (unint64_t)v86) >> 32) >> 12) | (((268439553 * (unint64_t)(1023 * ((7371 * v101 + 134234112 + 19024 * v102 + 1664 * v103) >> 15) + 0x7FFF)) >> 32) >> 12 << 20);
          LODWORD(v85) = 1023 * ((7371 * v104 + 134234112 + 19024 * v105 + 1664 * v106) >> 15);
          v107 = v98 + v96;
          v108 = v97 + v95;
          v109 = v101 + v104;
          LODWORD(v101) = 1023 * ((unint64_t)(v93 + 0x100000000) >> 17);
          v186 = v108 + v109;
          v185 = v80 + v90 + v102;
          *(_DWORD *)v187 = v87;
          *(_DWORD *)v188 = v94;
          v110 = v74[16];
          LODWORD(v83) = v74[17];
          v111 = v74[18];
          v112 = (((268439553
                                * (unint64_t)(1023
                                                   * ((7371 * v110 + 134234112 + 19024 * v83 + 1664 * v111) >> 15)
                                                   + 0x7FFF)) >> 32) >> 2) & 0x7FFFC00 | v100;
          v113 = v74[20];
          LODWORD(v90) = v74[21];
          v114 = v74[22];
          v115 = v73[16];
          LODWORD(v104) = v73[17];
          v116 = v73[18];
          v117 = (v99 / 0xFFFF) | (((2147516417u * (unint64_t)(v101 + 0x7FFF)) >> 32) >> 5) & 0x7FFFC00 | (((1023 * ((0x1FFFFFFFFD79ALL * v105 - 10342 * v185 + 0x1FFFFFFFFF05ALL * (v108 + v109) + 14350 * (unint64_t)(v107 + v103 + v106) + 0x100000000) >> 17) + 0x7FFF) / 0xFFFF) << 20);
          v118 = (_DWORD *)((char *)v182 + v192);
          *v118 = v117;
          v119 = (((268439553
                                * (unint64_t)(1023
                                                   * ((7371 * v115 + 134234112 + 19024 * v104 + 1664 * v116) >> 15)
                                                   + 0x7FFF)) >> 32) >> 2) & 0x7FFFC00 | (((268439553 * (unint64_t)(v85 + 0x7FFF)) >> 32) >> 12);
          v120 = v73[20];
          *((_DWORD *)v187 + 1) = v112 | (((268439553
                                                        * (unint64_t)(1023
                                                                           * ((7371 * v113
                                                                                           + 134234112
                                                                                           + 19024 * v90
                                                                                           + 1664 * v114) >> 15)
                                                                           + 0x7FFF)) >> 32) >> 12 << 20);
          v121 = v73[21];
          v122 = v73[22];
          *((_DWORD *)v188 + 1) = v119 | (((268439553
                                                        * (unint64_t)(1023
                                                                           * ((7371 * v120
                                                                                           + 134234112
                                                                                           + 19024 * v121
                                                                                           + 1664 * v122) >> 15)
                                                                           + 0x7FFF)) >> 32) >> 12 << 20);
          v123 = v114 + v111 + v116;
          v124 = v113 + v110 + v115 + v120;
          LODWORD(v94) = v90 + v83 + v104;
          v118[1] = ((1023
                    * ((-1153 * (v107 + v103)
                                    - 13195 * v185
                                    + 0x1FFFFFFFFCC75 * v105
                                    + 0x1FFFFFFFFFB7FLL * v106
                                    + 14350 * (unint64_t)v186
                                    + 0x100000000) >> 17)
                    + 0x7FFF)
                   / 0xFFFF) & 0xFFFFF | ((unsigned __int16)((1023
                                                            * ((0x1FFFFFFFFCC75 * v121
                                                                            - 13195 * (int)v94
                                                                            + 0x1FFFFFFFFFB7FLL * v123
                                                                            + 0x1FFFFFFFFFB7FLL * v122
                                                                            + 14350
                                                                            * (unint64_t)v124
                                                                            + 0x100000000) >> 17)
                                                            + 0x7FFF)
                                                           / 0xFFFF) << 20) | (((2147516417u
                                                                                             * (unint64_t)(1023 * ((0x1FFFFFFFFD79ALL * v121 - 10342 * (int)v94 + 0x1FFFFFFFFF05ALL * v124 + 14350 * (unint64_t)(v123 + v122) + 0x100000000) >> 17) + 0x7FFF)) >> 32) >> 5) & 0x7FFFC00;
          v72 += 6;
          v70 = v192 + 8;
          v31 = v189 + 48;
        }
        while (v72 < v184);
        v24 = (_DWORD *)((char *)v182 + v70);
        v125 = v163 & 0x3C;
        v37 = (unsigned int *)((char *)v164 + v125 + v70);
        v38 = (unsigned int *)((char *)v165 + v125 + v70);
        v193 = (unsigned __int16 *)(v29 + v31);
        v126 = (unsigned __int16 *)(v34 + v31);
        v127 = v183;
        v31 = v191;
      }
      if (v72 < v127)
      {
        v128 = 0;
        v129 = v162;
        v130 = v126;
        v131 = v193;
        do
        {
          if ((v72 & 1) != 0)
          {
            v137 = &v193[v128 - 4];
            v135 = v131 - 3;
            v136 = v131 - 2;
            v132 = v193[v128];
            v133 = v193[v128 + 1];
            v134 = v193[v128 + 2];
          }
          else
          {
            v132 = 0;
            v133 = 0;
            v134 = 0;
            v135 = &v193[v128 + 1];
            v136 = &v193[v128 + 2];
            v137 = v131;
          }
          v138 = *v136;
          v139 = *v135;
          v140 = *v137;
          v141 = *((unsigned __int8 *)&v195 + v129);
          *v38 = (((268439553
                                * (unint64_t)(1023
                                                   * ((1664 * v138 + 134234112 + 19024 * v139 + 7371 * v140) >> 15)
                                                   + 0x7FFF)) >> 32) >> 12 << v141) | *v38 & ~(1023 << v141);
          if ((v72 & 1) != 0)
          {
            v147 = &v126[v128 - 4];
            v145 = v130 - 3;
            v146 = v130 - 2;
            v142 = v126[v128];
            v143 = v126[v128 + 1];
            v144 = v126[v128 + 2];
          }
          else
          {
            v142 = 0;
            v143 = 0;
            v144 = 0;
            v145 = &v126[v128 + 1];
            v146 = &v126[v128 + 2];
            v147 = v130;
          }
          v148 = *v146;
          v149 = *v145;
          v150 = *v147;
          if ((v72 & 1) != 0)
          {
            v153 = v134 + v138 + v148;
            v154 = v132 + v140 + v142 + v150;
            v155 = v133 + v139 + v149;
            v151 = (1023
                  * ((0x1FFFFFFFFD79ALL * v143
                                  + 14350 * (unint64_t)(v153 + v144)
                                  + 0x1FFFFFFFFD79ALL * v155
                                  + 0x1FFFFFFFFF05ALL * v154
                                  + 0x100000000) >> 17)
                  + 0x7FFF)
                 / 0xFFFF;
            v152 = (1023
                  * ((0x1FFFFFFFFFB7FLL * v144
                                  + 0x1FFFFFFFFCC75 * v143
                                  + 0x1FFFFFFFFFB7FLL * v153
                                  + 0x1FFFFFFFFCC75 * v155
                                  + 14350 * (unint64_t)v154
                                  + 0x100000000) >> 17)
                  + 0x7FFF)
                 / 0xFFFF;
          }
          else
          {
            v151 = 0;
            v152 = 0;
          }
          v31 = v191;
          *v37 = *v37 & ~(1023 << v141) | (((268439553
                                                         * (unint64_t)(1023
                                                                            * ((1664 * v148
                                                                                            + 134234112
                                                                                            + 19024 * v149
                                                                                            + 7371 * v150) >> 15)
                                                                            + 0x7FFF)) >> 32) >> 12 << v141);
          if (v129 == 2)
            v129 = 0;
          else
            ++v129;
          if ((v72 & 1) != 0)
          {
            v156 = *((unsigned __int8 *)&v195 + v194);
            *v24 = *v24 & ~(1023 << v156) | (v151 << v156);
            v157 = (_DWORD *)((char *)v24 + ((v156 >> 2) & 0x3C));
            if (v194 == 2)
              v158 = 0;
            else
              v158 = v194 + 1;
            v159 = *((unsigned __int8 *)&v195 + v158);
            *v157 = *v157 & ~(1023 << v159) | (v152 << v159);
            v24 = (unsigned int *)((char *)v157 + ((v159 >> 2) & 0x3C));
            if (v158 == 2)
              v160 = 0;
            else
              v160 = v158 + 1;
            v194 = v160;
          }
          v131 += 4;
          v38 += v141 >> 4;
          v130 += 4;
          ++v72;
          v128 += 4;
          v37 += v141 >> 4;
        }
        while (v183 != v72);
      }
      v32 = &v174[v169];
      v33 = &v173[v169];
      v25 = v177 + 4 * v168;
      v21 = v179 + 1;
      v26 = &v176[v168];
      v34 = v172 + v166;
      v29 = v175 + v166;
      v24 = &v178[v167];
    }
    while (v179 + 1 != v170);
  }
  return 0;
}

uint64_t vt_Copy_64RGBA_p420ITU709(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, _QWORD *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _DWORD *v24;
  unint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unsigned __int16 *v32;
  unsigned __int16 *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int16 *v44;
  unsigned __int16 *v45;
  unsigned __int16 *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int16 *v54;
  unsigned __int16 *v55;
  unsigned __int16 *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  unint64_t v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unsigned __int16 *v73;
  unsigned __int16 *v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  unsigned int v81;
  unsigned int v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  int v98;
  unsigned int v99;
  unint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  unsigned int *v118;
  unsigned int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned __int16 *v126;
  unint64_t v127;
  uint64_t v128;
  unsigned int v129;
  unsigned __int16 *v130;
  unsigned __int16 *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned __int16 *v135;
  unsigned __int16 *v136;
  unsigned __int16 *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unsigned __int16 *v145;
  unsigned __int16 *v146;
  unsigned __int16 *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int v151;
  unsigned int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  unsigned int *v157;
  unsigned int v158;
  unint64_t v159;
  unsigned int v160;
  unsigned int v162;
  unint64_t v163;
  unsigned int *v164;
  unsigned int *v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  unsigned int v171;
  uint64_t v172;
  unsigned __int16 *v173;
  unsigned __int16 *v174;
  uint64_t v175;
  unsigned int *v176;
  unint64_t v177;
  _DWORD *v178;
  uint64_t v179;
  char *v180;
  char *v181;
  _DWORD *v182;
  unint64_t v183;
  unint64_t v184;
  int v185;
  unsigned int v186;
  char *v187;
  char *v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unsigned __int16 *v193;
  unsigned int v194;
  int v195;

  v195 = 1313280;
  v8 = *(_QWORD *)(a2 + 40);
  v9 = (v8 & 1) + v8;
  v10 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v11 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v13 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v14 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v15 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v16 = v14 - v13;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v10 < v14 - v13)
    v16 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v10;
  v17 = v11 - v9;
  if (v11 - v9 >= v15 - v12)
    v17 = v15 - v12;
  v18 = v14 % 6;
  v19 = v16 >= v18;
  v20 = v16 - v18;
  if (!v19)
    v20 = 0;
  v183 = v16;
  v184 = v20;
  if (v17 >= 2)
  {
    v21 = 0;
    v171 = v13 % 3;
    v162 = v20 % 3;
    v22 = 6 * (v13 / 6) - v13 + 6;
    v170 = v17 >> 1;
    v23 = a8[1];
    v24 = (_DWORD *)(a7[1] + v23 * (v12 >> 1) + 4 * (v13 / 3));
    v25 = *a7 + *a8 * v12 + 4 * (v13 / 3);
    v26 = (unsigned int *)(v25 + *a8);
    v27 = *a3;
    v28 = *a4;
    v29 = *a3 + *a4 * v9;
    v30 = v22;
    v31 = 8 * v10;
    v32 = (unsigned __int16 *)(v29 + 8 * v10);
    v33 = (unsigned __int16 *)((char *)v32 + v28);
    v169 = v28 & 0x7FFFFFFFFFFFFFFFLL;
    v168 = (*a8 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    v34 = v27 + v28 + v28 * (v8 + (v8 & 1));
    v166 = 2 * v28;
    v167 = v23 >> 2;
    v190 = v30;
    v191 = 8 * v10;
    do
    {
      v178 = v24;
      v179 = v21;
      v35 = 0;
      v175 = v29;
      v176 = v26;
      v172 = v34;
      v173 = v33;
      v36 = v171;
      v194 = v171;
      v37 = v26;
      v177 = v25;
      v38 = (unsigned int *)v25;
      v174 = v32;
      do
      {
        v39 = v38;
        v40 = v37;
        if ((v35 & 1) != 0)
        {
          v46 = (unsigned __int16 *)(v29 + v31 - 8);
          v44 = v32 - 3;
          v45 = v32 - 2;
          v41 = *(unsigned __int16 *)(v29 + v31);
          v42 = *(unsigned __int16 *)(v29 + v31 + 2);
          v43 = *(unsigned __int16 *)(v29 + v31 + 4);
        }
        else
        {
          v41 = 0;
          v42 = 0;
          v43 = 0;
          v44 = (unsigned __int16 *)(v29 + v31 + 2);
          v45 = (unsigned __int16 *)(v29 + v31 + 4);
          v46 = v32;
        }
        v47 = *v45;
        v48 = *v44;
        v49 = *v46;
        v50 = *((unsigned __int8 *)&v195 + v36);
        *v39 = (((268439553
                              * (unint64_t)(1023
                                                 * ((2032 * v47 + 134234112 + 20127 * v48 + 5983 * v49) >> 15)
                                                 + 0x7FFF)) >> 32) >> 12 << v50) | *v39 & ~(1023 << v50);
        if ((v35 & 1) != 0)
        {
          v56 = (unsigned __int16 *)(v34 + v31 - 8);
          v54 = v33 - 3;
          v55 = v33 - 2;
          v51 = *(unsigned __int16 *)(v34 + v31);
          v52 = *(unsigned __int16 *)(v34 + v31 + 2);
          v53 = *(unsigned __int16 *)(v34 + v31 + 4);
        }
        else
        {
          v51 = 0;
          v52 = 0;
          v53 = 0;
          v54 = (unsigned __int16 *)(v34 + v31 + 2);
          v55 = (unsigned __int16 *)(v34 + v31 + 4);
          v56 = v33;
        }
        v57 = *v55;
        v58 = *v54;
        v59 = *v56;
        if ((v35 & 1) != 0)
        {
          v62 = v43 + v47 + v57;
          v63 = v41 + v49 + v51 + v59;
          v64 = v42 + v48 + v58;
          v31 = v191;
          v60 = (int)(1023
                    * ((0x1FFFFFFFFD4ABLL * v52
                      + 14392 * (unint64_t)(v62 + v53)
                      + 0x1FFFFFFFFD4ABLL * v64
                      + 0x1FFFFFFFFF31FLL * v63
                      + 0x100000000) >> 17)
                    + 0x7FFF)
              / 0xFFFF;
          LODWORD(v63) = (unint64_t)(2147516417
                                          * (int)(1023
                                                * ((0x1FFFFFFFFFAD9 * v53
                                                  + 0x1FFFFFFFFCCF0 * v52
                                                  + 0x1FFFFFFFFFAD9 * v62
                                                  + 0x1FFFFFFFFCCF0 * v64
                                                  + 14392 * (unint64_t)v63
                                                  + 0x100000000) >> 17)
                                                + 0x7FFF)) >> 32;
          v61 = ((int)v63 >> 15) + (v63 >> 31);
        }
        else
        {
          v60 = 0;
          v61 = 0;
        }
        *v40 = *v40 & ~(1023 << v50) | (((268439553
                                                      * (unint64_t)(1023
                                                                         * ((2032 * v57
                                                                                         + 134234112
                                                                                         + 20127 * v58
                                                                                         + 5983 * v59) >> 15)
                                                                         + 0x7FFF)) >> 32) >> 12 << v50);
        if (v36 == 2)
          v36 = 0;
        else
          ++v36;
        if ((v35 & 1) != 0)
        {
          v65 = *((unsigned __int8 *)&v195 + v194);
          *v24 = *v24 & ~(1023 << v65) | (v60 << v65);
          v66 = (_DWORD *)((char *)v24 + ((v65 >> 2) & 0x3C));
          if (v194 == 2)
            v67 = 0;
          else
            v67 = v194 + 1;
          v68 = *((unsigned __int8 *)&v195 + v67);
          *v66 = *v66 & ~(1023 << v68) | (v61 << v68);
          v24 = (unsigned int *)((char *)v66 + ((v68 >> 2) & 0x3C));
          if (v67 == 2)
            v69 = 0;
          else
            v69 = v67 + 1;
          v194 = v69;
        }
        v32 += 4;
        v38 = &v39[v50 >> 4];
        v33 += 4;
        ++v35;
        v34 += 8;
        v37 = &v40[v50 >> 4];
        v29 += 8;
      }
      while (v190 != v35);
      if (v190 >= v184)
      {
        v193 = (unsigned __int16 *)(v29 + v31);
        v126 = (unsigned __int16 *)(v34 + v31);
        v72 = v190;
        v127 = v183;
      }
      else
      {
        v70 = 0;
        v163 = v50 >> 2;
        v164 = v40;
        v71 = (v50 >> 2) & 0x3C;
        v165 = v39;
        v180 = (char *)v39 + v71;
        v181 = (char *)v40 + v71;
        v72 = v190;
        v182 = v24;
        do
        {
          v192 = v70;
          v189 = v31;
          v188 = &v181[v70];
          v187 = &v180[v70];
          v73 = (unsigned __int16 *)(v34 + v31);
          v74 = (unsigned __int16 *)(v29 + v31);
          v75 = *(unsigned __int16 *)(v29 + v31);
          v76 = *(unsigned __int16 *)(v29 + v31 + 2);
          v77 = *(unsigned __int16 *)(v29 + v31 + 4);
          v78 = *(unsigned __int16 *)(v29 + v31 + 8);
          v79 = *(unsigned __int16 *)(v29 + v31 + 10);
          v80 = *(unsigned __int16 *)(v29 + v31 + 12);
          v81 = 1023 * ((5983 * v75 + 134234112 + 20127 * v76 + 2032 * v77) >> 15) + 0x7FFF;
          v82 = 1023 * ((5983 * v78 + 134234112 + 20127 * v79 + 2032 * v80) >> 15);
          v83 = *(unsigned __int16 *)(v34 + v31);
          v84 = *(unsigned __int16 *)(v34 + v31 + 2);
          v85 = *(unsigned __int16 *)(v34 + v31 + 4);
          v86 = 1023 * ((5983 * v83 + 134234112 + 20127 * v84 + 2032 * v85) >> 15) + 0x7FFF;
          v87 = *(unsigned __int16 *)(v34 + v31 + 8);
          v88 = v73[5];
          v89 = v73[6];
          v90 = v80 + v77 + v85;
          v91 = v78 + v75 + v83 + v87;
          v92 = v79 + v76 + v84;
          LODWORD(v80) = 1023
                       * ((0x1FFFFFFFFD4ABLL * v88
                         - 11093 * v92
                         + 0x1FFFFFFFFF31FLL * v91
                         + 14392 * (unint64_t)(v90 + v89)
                         + 0x100000000) >> 17);
          v93 = 0x1FFFFFFFFCCF0 * v88
              - 13072 * v92
              + 0x1FFFFFFFFFAD9 * v90
              + 0x1FFFFFFFFFAD9 * v89
              + 14392 * v91;
          v94 = (268439553
               * (unint64_t)(1023 * ((5983 * v87 + 134234112 + 20127 * v88 + 2032 * v89) >> 15)
                                  + 0x7FFF)) >> 34;
          v95 = v74[8];
          LODWORD(v90) = v74[9];
          v96 = v74[10];
          LODWORD(v85) = v80 + 0x7FFF;
          LODWORD(v89) = (((268439553 * (unint64_t)(v82 + 0x7FFF)) >> 32) >> 2) & 0x7FFFC00 | (((268439553 * (unint64_t)v81) >> 32) >> 12);
          v97 = v74[12];
          LODWORD(v80) = v74[13];
          v98 = v74[14];
          v99 = v85;
          v100 = (268439553
                * (unint64_t)(1023 * ((5983 * v97 + 134234112 + 20127 * v80 + 2032 * v98) >> 15)
                                   + 0x7FFF)) >> 44;
          v101 = v73[8];
          v102 = v73[9];
          v103 = v73[10];
          LODWORD(v87) = v89 | (((268439553
                                              * (unint64_t)(1023
                                                                 * ((5983 * v95
                                                                                 + 134234112
                                                                                 + 20127 * v90
                                                                                 + 2032 * v96) >> 15)
                                                                 + 0x7FFF)) >> 32) >> 12 << 20);
          v104 = v73[12];
          v105 = v73[13];
          v106 = v73[14];
          LODWORD(v94) = v94 & 0x7FFFC00 | (((268439553 * (unint64_t)v86) >> 32) >> 12) | (((268439553 * (unint64_t)(1023 * ((5983 * v101 + 134234112 + 20127 * v102 + 2032 * v103) >> 15) + 0x7FFF)) >> 32) >> 12 << 20);
          LODWORD(v85) = 1023 * ((5983 * v104 + 134234112 + 20127 * v105 + 2032 * v106) >> 15);
          v107 = v98 + v96;
          v108 = v97 + v95;
          v109 = v101 + v104;
          LODWORD(v101) = 1023 * ((unint64_t)(v93 + 0x100000000) >> 17);
          v186 = v108 + v109;
          v185 = v80 + v90 + v102;
          *(_DWORD *)v187 = v87;
          *(_DWORD *)v188 = v94;
          v110 = v74[16];
          LODWORD(v83) = v74[17];
          v111 = v74[18];
          v112 = (((268439553
                                * (unint64_t)(1023
                                                   * ((5983 * v110 + 134234112 + 20127 * v83 + 2032 * v111) >> 15)
                                                   + 0x7FFF)) >> 32) >> 2) & 0x7FFFC00 | v100;
          v113 = v74[20];
          LODWORD(v90) = v74[21];
          v114 = v74[22];
          v115 = v73[16];
          LODWORD(v104) = v73[17];
          v116 = v73[18];
          v117 = (v99 / 0xFFFF) | (((2147516417u * (unint64_t)(v101 + 0x7FFF)) >> 32) >> 5) & 0x7FFFC00 | (((1023 * ((0x1FFFFFFFFD4ABLL * v105 - 11093 * v185 + 0x1FFFFFFFFF31FLL * (v108 + v109) + 14392 * (unint64_t)(v107 + v103 + v106) + 0x100000000) >> 17) + 0x7FFF) / 0xFFFF) << 20);
          v118 = (_DWORD *)((char *)v182 + v192);
          *v118 = v117;
          v119 = (((268439553
                                * (unint64_t)(1023
                                                   * ((5983 * v115 + 134234112 + 20127 * v104 + 2032 * v116) >> 15)
                                                   + 0x7FFF)) >> 32) >> 2) & 0x7FFFC00 | (((268439553 * (unint64_t)(v85 + 0x7FFF)) >> 32) >> 12);
          v120 = v73[20];
          *((_DWORD *)v187 + 1) = v112 | (((268439553
                                                        * (unint64_t)(1023
                                                                           * ((5983 * v113
                                                                                           + 134234112
                                                                                           + 20127 * v90
                                                                                           + 2032 * v114) >> 15)
                                                                           + 0x7FFF)) >> 32) >> 12 << 20);
          v121 = v73[21];
          v122 = v73[22];
          *((_DWORD *)v188 + 1) = v119 | (((268439553
                                                        * (unint64_t)(1023
                                                                           * ((5983 * v120
                                                                                           + 134234112
                                                                                           + 20127 * v121
                                                                                           + 2032 * v122) >> 15)
                                                                           + 0x7FFF)) >> 32) >> 12 << 20);
          v123 = v114 + v111 + v116;
          v124 = v113 + v110 + v115 + v120;
          LODWORD(v94) = v90 + v83 + v104;
          v118[1] = ((1023
                    * ((-1319 * (v107 + v103)
                                    - 13072 * v185
                                    + 0x1FFFFFFFFCCF0 * v105
                                    + 0x1FFFFFFFFFAD9 * v106
                                    + 14392 * (unint64_t)v186
                                    + 0x100000000) >> 17)
                    + 0x7FFF)
                   / 0xFFFF) & 0xFFFFF | ((unsigned __int16)((1023
                                                            * ((0x1FFFFFFFFCCF0 * v121
                                                                            - 13072 * (int)v94
                                                                            + 0x1FFFFFFFFFAD9 * v123
                                                                            + 0x1FFFFFFFFFAD9 * v122
                                                                            + 14392
                                                                            * (unint64_t)v124
                                                                            + 0x100000000) >> 17)
                                                            + 0x7FFF)
                                                           / 0xFFFF) << 20) | (((2147516417u
                                                                                             * (unint64_t)(1023 * ((0x1FFFFFFFFD4ABLL * v121 - 11093 * (int)v94 + 0x1FFFFFFFFF31FLL * v124 + 14392 * (unint64_t)(v123 + v122) + 0x100000000) >> 17) + 0x7FFF)) >> 32) >> 5) & 0x7FFFC00;
          v72 += 6;
          v70 = v192 + 8;
          v31 = v189 + 48;
        }
        while (v72 < v184);
        v24 = (_DWORD *)((char *)v182 + v70);
        v125 = v163 & 0x3C;
        v37 = (unsigned int *)((char *)v164 + v125 + v70);
        v38 = (unsigned int *)((char *)v165 + v125 + v70);
        v193 = (unsigned __int16 *)(v29 + v31);
        v126 = (unsigned __int16 *)(v34 + v31);
        v127 = v183;
        v31 = v191;
      }
      if (v72 < v127)
      {
        v128 = 0;
        v129 = v162;
        v130 = v126;
        v131 = v193;
        do
        {
          if ((v72 & 1) != 0)
          {
            v137 = &v193[v128 - 4];
            v135 = v131 - 3;
            v136 = v131 - 2;
            v132 = v193[v128];
            v133 = v193[v128 + 1];
            v134 = v193[v128 + 2];
          }
          else
          {
            v132 = 0;
            v133 = 0;
            v134 = 0;
            v135 = &v193[v128 + 1];
            v136 = &v193[v128 + 2];
            v137 = v131;
          }
          v138 = *v136;
          v139 = *v135;
          v140 = *v137;
          v141 = *((unsigned __int8 *)&v195 + v129);
          *v38 = (((268439553
                                * (unint64_t)(1023
                                                   * ((2032 * v138 + 134234112 + 20127 * v139 + 5983 * v140) >> 15)
                                                   + 0x7FFF)) >> 32) >> 12 << v141) | *v38 & ~(1023 << v141);
          if ((v72 & 1) != 0)
          {
            v147 = &v126[v128 - 4];
            v145 = v130 - 3;
            v146 = v130 - 2;
            v142 = v126[v128];
            v143 = v126[v128 + 1];
            v144 = v126[v128 + 2];
          }
          else
          {
            v142 = 0;
            v143 = 0;
            v144 = 0;
            v145 = &v126[v128 + 1];
            v146 = &v126[v128 + 2];
            v147 = v130;
          }
          v148 = *v146;
          v149 = *v145;
          v150 = *v147;
          if ((v72 & 1) != 0)
          {
            v153 = v134 + v138 + v148;
            v154 = v132 + v140 + v142 + v150;
            v155 = v133 + v139 + v149;
            v151 = (1023
                  * ((0x1FFFFFFFFD4ABLL * v143
                                  + 14392 * (unint64_t)(v153 + v144)
                                  + 0x1FFFFFFFFD4ABLL * v155
                                  + 0x1FFFFFFFFF31FLL * v154
                                  + 0x100000000) >> 17)
                  + 0x7FFF)
                 / 0xFFFF;
            v152 = (1023
                  * ((0x1FFFFFFFFFAD9 * v144
                                  + 0x1FFFFFFFFCCF0 * v143
                                  + 0x1FFFFFFFFFAD9 * v153
                                  + 0x1FFFFFFFFCCF0 * v155
                                  + 14392 * (unint64_t)v154
                                  + 0x100000000) >> 17)
                  + 0x7FFF)
                 / 0xFFFF;
          }
          else
          {
            v151 = 0;
            v152 = 0;
          }
          v31 = v191;
          *v37 = *v37 & ~(1023 << v141) | (((268439553
                                                         * (unint64_t)(1023
                                                                            * ((2032 * v148
                                                                                            + 134234112
                                                                                            + 20127 * v149
                                                                                            + 5983 * v150) >> 15)
                                                                            + 0x7FFF)) >> 32) >> 12 << v141);
          if (v129 == 2)
            v129 = 0;
          else
            ++v129;
          if ((v72 & 1) != 0)
          {
            v156 = *((unsigned __int8 *)&v195 + v194);
            *v24 = *v24 & ~(1023 << v156) | (v151 << v156);
            v157 = (_DWORD *)((char *)v24 + ((v156 >> 2) & 0x3C));
            if (v194 == 2)
              v158 = 0;
            else
              v158 = v194 + 1;
            v159 = *((unsigned __int8 *)&v195 + v158);
            *v157 = *v157 & ~(1023 << v159) | (v152 << v159);
            v24 = (unsigned int *)((char *)v157 + ((v159 >> 2) & 0x3C));
            if (v158 == 2)
              v160 = 0;
            else
              v160 = v158 + 1;
            v194 = v160;
          }
          v131 += 4;
          v38 += v141 >> 4;
          v130 += 4;
          ++v72;
          v128 += 4;
          v37 += v141 >> 4;
        }
        while (v183 != v72);
      }
      v32 = &v174[v169];
      v33 = &v173[v169];
      v25 = v177 + 4 * v168;
      v21 = v179 + 1;
      v26 = &v176[v168];
      v34 = v172 + v166;
      v29 = v175 + v166;
      v24 = &v178[v167];
    }
    while (v179 + 1 != v170);
  }
  return 0;
}

uint64_t vt_Copy_64RGBA_p420ITU601(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, _QWORD *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _DWORD *v24;
  unint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unsigned __int16 *v32;
  unsigned __int16 *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int16 *v44;
  unsigned __int16 *v45;
  unsigned __int16 *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int16 *v54;
  unsigned __int16 *v55;
  unsigned __int16 *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  unint64_t v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unsigned __int16 *v73;
  unsigned __int16 *v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  unsigned int v81;
  unsigned int v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  int v98;
  unsigned int v99;
  unint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  unsigned int *v118;
  unsigned int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned __int16 *v126;
  unint64_t v127;
  uint64_t v128;
  unsigned int v129;
  unsigned __int16 *v130;
  unsigned __int16 *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned __int16 *v135;
  unsigned __int16 *v136;
  unsigned __int16 *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unsigned __int16 *v145;
  unsigned __int16 *v146;
  unsigned __int16 *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int v151;
  unsigned int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  unsigned int *v157;
  unsigned int v158;
  unint64_t v159;
  unsigned int v160;
  unsigned int v162;
  unint64_t v163;
  unsigned int *v164;
  unsigned int *v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  unsigned int v171;
  uint64_t v172;
  unsigned __int16 *v173;
  unsigned __int16 *v174;
  uint64_t v175;
  unsigned int *v176;
  unint64_t v177;
  _DWORD *v178;
  uint64_t v179;
  char *v180;
  char *v181;
  _DWORD *v182;
  unint64_t v183;
  unint64_t v184;
  int v185;
  unsigned int v186;
  char *v187;
  char *v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unsigned __int16 *v193;
  unsigned int v194;
  int v195;

  v195 = 1313280;
  v8 = *(_QWORD *)(a2 + 40);
  v9 = (v8 & 1) + v8;
  v10 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v11 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v13 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v14 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v15 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v16 = v14 - v13;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v10 < v14 - v13)
    v16 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v10;
  v17 = v11 - v9;
  if (v11 - v9 >= v15 - v12)
    v17 = v15 - v12;
  v18 = v14 % 6;
  v19 = v16 >= v18;
  v20 = v16 - v18;
  if (!v19)
    v20 = 0;
  v183 = v16;
  v184 = v20;
  if (v17 >= 2)
  {
    v21 = 0;
    v171 = v13 % 3;
    v162 = v20 % 3;
    v22 = 6 * (v13 / 6) - v13 + 6;
    v170 = v17 >> 1;
    v23 = a8[1];
    v24 = (_DWORD *)(a7[1] + v23 * (v12 >> 1) + 4 * (v13 / 3));
    v25 = *a7 + *a8 * v12 + 4 * (v13 / 3);
    v26 = (unsigned int *)(v25 + *a8);
    v27 = *a3;
    v28 = *a4;
    v29 = *a3 + *a4 * v9;
    v30 = v22;
    v31 = 8 * v10;
    v32 = (unsigned __int16 *)(v29 + 8 * v10);
    v33 = (unsigned __int16 *)((char *)v32 + v28);
    v169 = v28 & 0x7FFFFFFFFFFFFFFFLL;
    v168 = (*a8 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    v34 = v27 + v28 + v28 * (v8 + (v8 & 1));
    v166 = 2 * v28;
    v167 = v23 >> 2;
    v190 = v30;
    v191 = 8 * v10;
    do
    {
      v178 = v24;
      v179 = v21;
      v35 = 0;
      v175 = v29;
      v176 = v26;
      v172 = v34;
      v173 = v33;
      v36 = v171;
      v194 = v171;
      v37 = v26;
      v177 = v25;
      v38 = (unsigned int *)v25;
      v174 = v32;
      do
      {
        v39 = v38;
        v40 = v37;
        if ((v35 & 1) != 0)
        {
          v46 = (unsigned __int16 *)(v29 + v31 - 8);
          v44 = v32 - 3;
          v45 = v32 - 2;
          v41 = *(unsigned __int16 *)(v29 + v31);
          v42 = *(unsigned __int16 *)(v29 + v31 + 2);
          v43 = *(unsigned __int16 *)(v29 + v31 + 4);
        }
        else
        {
          v41 = 0;
          v42 = 0;
          v43 = 0;
          v44 = (unsigned __int16 *)(v29 + v31 + 2);
          v45 = (unsigned __int16 *)(v29 + v31 + 4);
          v46 = v32;
        }
        v47 = *v45;
        v48 = *v44;
        v49 = *v46;
        v50 = *((unsigned __int8 *)&v195 + v36);
        *v39 = (((268439553
                              * (unint64_t)(1023
                                                 * ((3208 * v47 + 134234112 + 16519 * v48 + 8414 * v49) >> 15)
                                                 + 0x7FFF)) >> 32) >> 12 << v50) | *v39 & ~(1023 << v50);
        if ((v35 & 1) != 0)
        {
          v56 = (unsigned __int16 *)(v34 + v31 - 8);
          v54 = v33 - 3;
          v55 = v33 - 2;
          v51 = *(unsigned __int16 *)(v34 + v31);
          v52 = *(unsigned __int16 *)(v34 + v31 + 2);
          v53 = *(unsigned __int16 *)(v34 + v31 + 4);
        }
        else
        {
          v51 = 0;
          v52 = 0;
          v53 = 0;
          v54 = (unsigned __int16 *)(v34 + v31 + 2);
          v55 = (unsigned __int16 *)(v34 + v31 + 4);
          v56 = v33;
        }
        v57 = *v55;
        v58 = *v54;
        v59 = *v56;
        if ((v35 & 1) != 0)
        {
          v62 = v43 + v47 + v57;
          v63 = v41 + v49 + v51 + v59;
          v64 = v42 + v48 + v58;
          v31 = v191;
          v60 = (int)(1023
                    * ((0x1FFFFFFFFDAC2 * v52
                      + 14392 * (unint64_t)(v62 + v53)
                      + 0x1FFFFFFFFDAC2 * v64
                      + 0x1FFFFFFFFED08 * v63
                      + 0x100000000) >> 17)
                    + 0x7FFF)
              / 0xFFFF;
          LODWORD(v63) = (unint64_t)(2147516417
                                          * (int)(1023
                                                * ((0x1FFFFFFFFF6DCLL * v53
                                                  + 0x1FFFFFFFFD0EDLL * v52
                                                  + 0x1FFFFFFFFF6DCLL * v62
                                                  + 0x1FFFFFFFFD0EDLL * v64
                                                  + 14392 * (unint64_t)v63
                                                  + 0x100000000) >> 17)
                                                + 0x7FFF)) >> 32;
          v61 = ((int)v63 >> 15) + (v63 >> 31);
        }
        else
        {
          v60 = 0;
          v61 = 0;
        }
        *v40 = *v40 & ~(1023 << v50) | (((268439553
                                                      * (unint64_t)(1023
                                                                         * ((3208 * v57
                                                                                         + 134234112
                                                                                         + 16519 * v58
                                                                                         + 8414 * v59) >> 15)
                                                                         + 0x7FFF)) >> 32) >> 12 << v50);
        if (v36 == 2)
          v36 = 0;
        else
          ++v36;
        if ((v35 & 1) != 0)
        {
          v65 = *((unsigned __int8 *)&v195 + v194);
          *v24 = *v24 & ~(1023 << v65) | (v60 << v65);
          v66 = (_DWORD *)((char *)v24 + ((v65 >> 2) & 0x3C));
          if (v194 == 2)
            v67 = 0;
          else
            v67 = v194 + 1;
          v68 = *((unsigned __int8 *)&v195 + v67);
          *v66 = *v66 & ~(1023 << v68) | (v61 << v68);
          v24 = (unsigned int *)((char *)v66 + ((v68 >> 2) & 0x3C));
          if (v67 == 2)
            v69 = 0;
          else
            v69 = v67 + 1;
          v194 = v69;
        }
        v32 += 4;
        v38 = &v39[v50 >> 4];
        v33 += 4;
        ++v35;
        v34 += 8;
        v37 = &v40[v50 >> 4];
        v29 += 8;
      }
      while (v190 != v35);
      if (v190 >= v184)
      {
        v193 = (unsigned __int16 *)(v29 + v31);
        v126 = (unsigned __int16 *)(v34 + v31);
        v72 = v190;
        v127 = v183;
      }
      else
      {
        v70 = 0;
        v163 = v50 >> 2;
        v164 = v40;
        v71 = (v50 >> 2) & 0x3C;
        v165 = v39;
        v180 = (char *)v39 + v71;
        v181 = (char *)v40 + v71;
        v72 = v190;
        v182 = v24;
        do
        {
          v192 = v70;
          v189 = v31;
          v188 = &v181[v70];
          v187 = &v180[v70];
          v73 = (unsigned __int16 *)(v34 + v31);
          v74 = (unsigned __int16 *)(v29 + v31);
          v75 = *(unsigned __int16 *)(v29 + v31);
          v76 = *(unsigned __int16 *)(v29 + v31 + 2);
          v77 = *(unsigned __int16 *)(v29 + v31 + 4);
          v78 = *(unsigned __int16 *)(v29 + v31 + 8);
          v79 = *(unsigned __int16 *)(v29 + v31 + 10);
          v80 = *(unsigned __int16 *)(v29 + v31 + 12);
          v81 = 1023 * ((8414 * v75 + 134234112 + 16519 * v76 + 3208 * v77) >> 15) + 0x7FFF;
          v82 = 1023 * ((8414 * v78 + 134234112 + 16519 * v79 + 3208 * v80) >> 15);
          v83 = *(unsigned __int16 *)(v34 + v31);
          v84 = *(unsigned __int16 *)(v34 + v31 + 2);
          v85 = *(unsigned __int16 *)(v34 + v31 + 4);
          v86 = 1023 * ((8414 * v83 + 134234112 + 16519 * v84 + 3208 * v85) >> 15) + 0x7FFF;
          v87 = *(unsigned __int16 *)(v34 + v31 + 8);
          v88 = v73[5];
          v89 = v73[6];
          v90 = v80 + v77 + v85;
          v91 = v78 + v75 + v83 + v87;
          v92 = v79 + v76 + v84;
          LODWORD(v80) = 1023
                       * ((0x1FFFFFFFFDAC2 * v88
                         - 9534 * v92
                         + 0x1FFFFFFFFED08 * v91
                         + 14392 * (unint64_t)(v90 + v89)
                         + 0x100000000) >> 17);
          v93 = 0x1FFFFFFFFD0EDLL * v88
              - 12051 * v92
              + 0x1FFFFFFFFF6DCLL * v90
              + 0x1FFFFFFFFF6DCLL * v89
              + 14392 * v91;
          v94 = (268439553
               * (unint64_t)(1023 * ((8414 * v87 + 134234112 + 16519 * v88 + 3208 * v89) >> 15)
                                  + 0x7FFF)) >> 34;
          v95 = v74[8];
          LODWORD(v90) = v74[9];
          v96 = v74[10];
          LODWORD(v85) = v80 + 0x7FFF;
          LODWORD(v89) = (((268439553 * (unint64_t)(v82 + 0x7FFF)) >> 32) >> 2) & 0x7FFFC00 | (((268439553 * (unint64_t)v81) >> 32) >> 12);
          v97 = v74[12];
          LODWORD(v80) = v74[13];
          v98 = v74[14];
          v99 = v85;
          v100 = (268439553
                * (unint64_t)(1023 * ((8414 * v97 + 134234112 + 16519 * v80 + 3208 * v98) >> 15)
                                   + 0x7FFF)) >> 44;
          v101 = v73[8];
          v102 = v73[9];
          v103 = v73[10];
          LODWORD(v87) = v89 | (((268439553
                                              * (unint64_t)(1023
                                                                 * ((8414 * v95
                                                                                 + 134234112
                                                                                 + 16519 * v90
                                                                                 + 3208 * v96) >> 15)
                                                                 + 0x7FFF)) >> 32) >> 12 << 20);
          v104 = v73[12];
          v105 = v73[13];
          v106 = v73[14];
          LODWORD(v94) = v94 & 0x7FFFC00 | (((268439553 * (unint64_t)v86) >> 32) >> 12) | (((268439553 * (unint64_t)(1023 * ((8414 * v101 + 134234112 + 16519 * v102 + 3208 * v103) >> 15) + 0x7FFF)) >> 32) >> 12 << 20);
          LODWORD(v85) = 1023 * ((8414 * v104 + 134234112 + 16519 * v105 + 3208 * v106) >> 15);
          v107 = v98 + v96;
          v108 = v97 + v95;
          v109 = v101 + v104;
          LODWORD(v101) = 1023 * ((unint64_t)(v93 + 0x100000000) >> 17);
          v186 = v108 + v109;
          v185 = v80 + v90 + v102;
          *(_DWORD *)v187 = v87;
          *(_DWORD *)v188 = v94;
          v110 = v74[16];
          LODWORD(v83) = v74[17];
          v111 = v74[18];
          v112 = (((268439553
                                * (unint64_t)(1023
                                                   * ((8414 * v110 + 134234112 + 16519 * v83 + 3208 * v111) >> 15)
                                                   + 0x7FFF)) >> 32) >> 2) & 0x7FFFC00 | v100;
          v113 = v74[20];
          LODWORD(v90) = v74[21];
          v114 = v74[22];
          v115 = v73[16];
          LODWORD(v104) = v73[17];
          v116 = v73[18];
          v117 = (v99 / 0xFFFF) | (((2147516417u * (unint64_t)(v101 + 0x7FFF)) >> 32) >> 5) & 0x7FFFC00 | (((1023 * ((0x1FFFFFFFFDAC2 * v105 - 9534 * v185 + 0x1FFFFFFFFED08 * (v108 + v109) + 14392 * (unint64_t)(v107 + v103 + v106) + 0x100000000) >> 17) + 0x7FFF) / 0xFFFF) << 20);
          v118 = (_DWORD *)((char *)v182 + v192);
          *v118 = v117;
          v119 = (((268439553
                                * (unint64_t)(1023
                                                   * ((8414 * v115 + 134234112 + 16519 * v104 + 3208 * v116) >> 15)
                                                   + 0x7FFF)) >> 32) >> 2) & 0x7FFFC00 | (((268439553 * (unint64_t)(v85 + 0x7FFF)) >> 32) >> 12);
          v120 = v73[20];
          *((_DWORD *)v187 + 1) = v112 | (((268439553
                                                        * (unint64_t)(1023
                                                                           * ((8414 * v113
                                                                                           + 134234112
                                                                                           + 16519 * v90
                                                                                           + 3208 * v114) >> 15)
                                                                           + 0x7FFF)) >> 32) >> 12 << 20);
          v121 = v73[21];
          v122 = v73[22];
          *((_DWORD *)v188 + 1) = v119 | (((268439553
                                                        * (unint64_t)(1023
                                                                           * ((8414 * v120
                                                                                           + 134234112
                                                                                           + 16519 * v121
                                                                                           + 3208 * v122) >> 15)
                                                                           + 0x7FFF)) >> 32) >> 12 << 20);
          v123 = v114 + v111 + v116;
          v124 = v113 + v110 + v115 + v120;
          LODWORD(v94) = v90 + v83 + v104;
          v118[1] = ((1023
                    * ((-2340 * (v107 + v103)
                                    - 12051 * v185
                                    + 0x1FFFFFFFFD0EDLL * v105
                                    + 0x1FFFFFFFFF6DCLL * v106
                                    + 14392 * (unint64_t)v186
                                    + 0x100000000) >> 17)
                    + 0x7FFF)
                   / 0xFFFF) & 0xFFFFF | ((unsigned __int16)((1023
                                                            * ((0x1FFFFFFFFD0EDLL * v121
                                                                            - 12051 * (int)v94
                                                                            + 0x1FFFFFFFFF6DCLL * v123
                                                                            + 0x1FFFFFFFFF6DCLL * v122
                                                                            + 14392
                                                                            * (unint64_t)v124
                                                                            + 0x100000000) >> 17)
                                                            + 0x7FFF)
                                                           / 0xFFFF) << 20) | (((2147516417u
                                                                                             * (unint64_t)(1023 * ((0x1FFFFFFFFDAC2 * v121 - 9534 * (int)v94 + 0x1FFFFFFFFED08 * v124 + 14392 * (unint64_t)(v123 + v122) + 0x100000000) >> 17) + 0x7FFF)) >> 32) >> 5) & 0x7FFFC00;
          v72 += 6;
          v70 = v192 + 8;
          v31 = v189 + 48;
        }
        while (v72 < v184);
        v24 = (_DWORD *)((char *)v182 + v70);
        v125 = v163 & 0x3C;
        v37 = (unsigned int *)((char *)v164 + v125 + v70);
        v38 = (unsigned int *)((char *)v165 + v125 + v70);
        v193 = (unsigned __int16 *)(v29 + v31);
        v126 = (unsigned __int16 *)(v34 + v31);
        v127 = v183;
        v31 = v191;
      }
      if (v72 < v127)
      {
        v128 = 0;
        v129 = v162;
        v130 = v126;
        v131 = v193;
        do
        {
          if ((v72 & 1) != 0)
          {
            v137 = &v193[v128 - 4];
            v135 = v131 - 3;
            v136 = v131 - 2;
            v132 = v193[v128];
            v133 = v193[v128 + 1];
            v134 = v193[v128 + 2];
          }
          else
          {
            v132 = 0;
            v133 = 0;
            v134 = 0;
            v135 = &v193[v128 + 1];
            v136 = &v193[v128 + 2];
            v137 = v131;
          }
          v138 = *v136;
          v139 = *v135;
          v140 = *v137;
          v141 = *((unsigned __int8 *)&v195 + v129);
          *v38 = (((268439553
                                * (unint64_t)(1023
                                                   * ((3208 * v138 + 134234112 + 16519 * v139 + 8414 * v140) >> 15)
                                                   + 0x7FFF)) >> 32) >> 12 << v141) | *v38 & ~(1023 << v141);
          if ((v72 & 1) != 0)
          {
            v147 = &v126[v128 - 4];
            v145 = v130 - 3;
            v146 = v130 - 2;
            v142 = v126[v128];
            v143 = v126[v128 + 1];
            v144 = v126[v128 + 2];
          }
          else
          {
            v142 = 0;
            v143 = 0;
            v144 = 0;
            v145 = &v126[v128 + 1];
            v146 = &v126[v128 + 2];
            v147 = v130;
          }
          v148 = *v146;
          v149 = *v145;
          v150 = *v147;
          if ((v72 & 1) != 0)
          {
            v153 = v134 + v138 + v148;
            v154 = v132 + v140 + v142 + v150;
            v155 = v133 + v139 + v149;
            v151 = (1023
                  * ((0x1FFFFFFFFDAC2 * v143
                                  + 14392 * (unint64_t)(v153 + v144)
                                  + 0x1FFFFFFFFDAC2 * v155
                                  + 0x1FFFFFFFFED08 * v154
                                  + 0x100000000) >> 17)
                  + 0x7FFF)
                 / 0xFFFF;
            v152 = (1023
                  * ((0x1FFFFFFFFF6DCLL * v144
                                  + 0x1FFFFFFFFD0EDLL * v143
                                  + 0x1FFFFFFFFF6DCLL * v153
                                  + 0x1FFFFFFFFD0EDLL * v155
                                  + 14392 * (unint64_t)v154
                                  + 0x100000000) >> 17)
                  + 0x7FFF)
                 / 0xFFFF;
          }
          else
          {
            v151 = 0;
            v152 = 0;
          }
          v31 = v191;
          *v37 = *v37 & ~(1023 << v141) | (((268439553
                                                         * (unint64_t)(1023
                                                                            * ((3208 * v148
                                                                                            + 134234112
                                                                                            + 16519 * v149
                                                                                            + 8414 * v150) >> 15)
                                                                            + 0x7FFF)) >> 32) >> 12 << v141);
          if (v129 == 2)
            v129 = 0;
          else
            ++v129;
          if ((v72 & 1) != 0)
          {
            v156 = *((unsigned __int8 *)&v195 + v194);
            *v24 = *v24 & ~(1023 << v156) | (v151 << v156);
            v157 = (_DWORD *)((char *)v24 + ((v156 >> 2) & 0x3C));
            if (v194 == 2)
              v158 = 0;
            else
              v158 = v194 + 1;
            v159 = *((unsigned __int8 *)&v195 + v158);
            *v157 = *v157 & ~(1023 << v159) | (v152 << v159);
            v24 = (unsigned int *)((char *)v157 + ((v159 >> 2) & 0x3C));
            if (v158 == 2)
              v160 = 0;
            else
              v160 = v158 + 1;
            v194 = v160;
          }
          v131 += 4;
          v38 += v141 >> 4;
          v130 += 4;
          ++v72;
          v128 += 4;
          v37 += v141 >> 4;
        }
        while (v183 != v72);
      }
      v32 = &v174[v169];
      v33 = &v173[v169];
      v25 = v177 + 4 * v168;
      v21 = v179 + 1;
      v26 = &v176[v168];
      v34 = v172 + v166;
      v29 = v175 + v166;
      v24 = &v178[v167];
    }
    while (v179 + 1 != v170);
  }
  return 0;
}

uint64_t vt_Copy_64RGBA_pf20ITU2020(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t a5, uint64_t a6, _QWORD *a7, _QWORD *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  _DWORD *v25;
  unint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int16 *v31;
  unsigned __int16 *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned __int16 *v37;
  unsigned __int16 *v38;
  unsigned int *v39;
  unsigned int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int16 *v44;
  unsigned __int16 *v45;
  unsigned __int16 *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unsigned int *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int16 *v55;
  unsigned __int16 *v56;
  unsigned __int16 *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unsigned int *v67;
  unsigned int v68;
  unint64_t v69;
  unsigned int v70;
  uint64_t v71;
  unint64_t v72;
  unsigned __int16 *v73;
  unsigned __int16 *v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  int v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  int v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  unsigned int v112;
  char *v113;
  unsigned int *v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  uint64_t v118;
  int v119;
  unsigned int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  unsigned int *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unsigned __int16 *v136;
  unsigned __int16 *v137;
  unint64_t v138;
  uint64_t v139;
  unsigned int v140;
  unsigned __int16 *v141;
  unsigned __int16 *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unsigned __int16 *v146;
  unsigned __int16 *v147;
  unsigned __int16 *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unsigned __int16 *v156;
  unsigned __int16 *v157;
  unsigned __int16 *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unsigned int v162;
  unsigned int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unsigned int *v168;
  unsigned int v169;
  unint64_t v170;
  unsigned int v171;
  unsigned int v173;
  unint64_t v174;
  unsigned int *v175;
  unsigned int *v176;
  unsigned int v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  unsigned __int16 *v184;
  unsigned __int16 *v185;
  uint64_t v186;
  unsigned int *v187;
  unint64_t v188;
  _DWORD *v189;
  uint64_t v190;
  char *v191;
  char *v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  unsigned int v196;
  unsigned int v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  unsigned int v202;
  int v203;

  v203 = 1313280;
  v8 = *(_QWORD *)(a2 + 40);
  v9 = (v8 & 1) + v8;
  v10 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v11 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v13 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v14 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v15 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v16 = v14 - v13;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v10 < v14 - v13)
    v16 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v10;
  v17 = v11 - v9;
  if (v11 - v9 >= v15 - v12)
    v17 = v15 - v12;
  v18 = v14 % 6;
  v19 = v16 >= v18;
  v20 = v16 - v18;
  if (!v19)
    v20 = 0;
  v194 = v16;
  v195 = v20;
  if (v17 >= 2)
  {
    v21 = 0;
    v22 = v13 % 3;
    v173 = v20 % 3;
    v23 = 6 * (v13 / 6) - v13 + 6;
    v182 = v17 >> 1;
    v24 = a8[1];
    v25 = (_DWORD *)(a7[1] + v24 * (v12 >> 1) + 4 * (v13 / 3));
    v26 = *a7 + *a8 * v12 + 4 * (v13 / 3);
    v27 = (unsigned int *)(v26 + *a8);
    v28 = *a3;
    v29 = *a3 + *a4 * v9;
    v30 = 8 * v10;
    v31 = (unsigned __int16 *)(v29 + 8 * v10);
    v32 = (unsigned __int16 *)((char *)v31 + *a4);
    v180 = (*a8 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    v181 = *a4 & 0x7FFFFFFFFFFFFFFFLL;
    v33 = v28 + *a4 + *a4 * (v8 + (v8 & 1));
    v178 = 2 * *a4;
    v179 = v24 >> 2;
    v193 = v23;
    v200 = 8 * v10;
    v177 = v22;
    do
    {
      v189 = v25;
      v190 = v21;
      v34 = 0;
      v186 = v29;
      v187 = v27;
      v183 = v33;
      v184 = v32;
      v202 = v22;
      v35 = v22;
      v188 = v26;
      v36 = (unsigned int *)v26;
      v37 = v32;
      v185 = v31;
      v38 = v31;
      do
      {
        v39 = v36;
        v40 = v27;
        if ((v34 & 1) != 0)
        {
          v46 = (unsigned __int16 *)(v29 + v30 - 8);
          v44 = v38 - 3;
          v45 = v38 - 2;
          v41 = *(unsigned __int16 *)(v29 + v30);
          v42 = *(unsigned __int16 *)(v29 + v30 + 2);
          v43 = *(unsigned __int16 *)(v29 + v30 + 4);
        }
        else
        {
          v41 = 0;
          v42 = 0;
          v43 = 0;
          v44 = (unsigned __int16 *)(v29 + v30 + 2);
          v45 = (unsigned __int16 *)(v29 + v30 + 4);
          v46 = v38;
        }
        v47 = *v45;
        v48 = *v44;
        v49 = *v46;
        v50 = *((unsigned __int8 *)&v203 + v35);
        *v39 = (((268439553
                              * (unint64_t)(1023
                                                 * ((22217 * v48 + 1943 * v47 + 8608 * v49 + 0x4000) >> 15)
                                                 + 0x7FFF)) >> 32) >> 12 << v50) | *v39 & ~(1023 << v50);
        v51 = v39;
        if ((v34 & 1) != 0)
        {
          v57 = (unsigned __int16 *)(v33 + v30 - 8);
          v55 = v37 - 3;
          v56 = v37 - 2;
          v52 = *(unsigned __int16 *)(v33 + v30);
          v53 = *(unsigned __int16 *)(v33 + v30 + 2);
          v54 = *(unsigned __int16 *)(v33 + v30 + 4);
        }
        else
        {
          v52 = 0;
          v53 = 0;
          v54 = 0;
          v55 = (unsigned __int16 *)(v33 + v30 + 2);
          v56 = (unsigned __int16 *)(v33 + v30 + 4);
          v57 = v37;
        }
        v58 = *v56;
        v59 = *v55;
        v60 = *v57;
        if ((v34 & 1) != 0)
        {
          v63 = v43 + v47 + v58;
          v64 = v41 + v49 + v52 + v60;
          v65 = v42 + v48 + v59;
          v30 = v200;
          v61 = (int)(1023
                    * ((unint64_t)(0x1FFFFFFFFD1E0 * v53
                                        + ((v63 + v54) << 14)
                                        + 0x1FFFFFFFFD1E0 * v65
                                        + 0x1FFFFFFFFEE22 * v64
                                        + 0x100000000) >> 17)
                    + 0x7FFF)
              / 0xFFFF;
          LODWORD(v65) = (unint64_t)(2147516417
                                          * (int)(1023
                                                * ((unint64_t)(0x1FFFFFFFFFADBLL * v54
                                                                    + 0x1FFFFFFFFC527 * v53
                                                                    + 0x1FFFFFFFFFADBLL * v63
                                                                    + 0x1FFFFFFFFC527 * v65
                                                                    + (v64 << 14)
                                                                    + 0x100000000) >> 17)
                                                + 0x7FFF)) >> 32;
          v62 = ((int)v65 >> 15) + (v65 >> 31);
        }
        else
        {
          v61 = 0;
          v62 = 0;
        }
        *v40 = *v40 & ~(1023 << v50) | (((268439553
                                                      * (unint64_t)(1023
                                                                         * ((22217 * v59
                                                                                         + 1943 * v58
                                                                                         + 8608 * v60
                                                                                         + 0x4000) >> 15)
                                                                         + 0x7FFF)) >> 32) >> 12 << v50);
        if (v35 == 2)
          v35 = 0;
        else
          ++v35;
        if ((v34 & 1) != 0)
        {
          v66 = *((unsigned __int8 *)&v203 + v202);
          *v25 = *v25 & ~(1023 << v66) | (v61 << v66);
          v67 = (_DWORD *)((char *)v25 + ((v66 >> 2) & 0x3C));
          if (v202 == 2)
            v68 = 0;
          else
            v68 = v202 + 1;
          v69 = *((unsigned __int8 *)&v203 + v68);
          *v67 = *v67 & ~(1023 << v69) | (v62 << v69);
          v25 = (unsigned int *)((char *)v67 + ((v69 >> 2) & 0x3C));
          if (v68 == 2)
            v70 = 0;
          else
            v70 = v68 + 1;
          v202 = v70;
        }
        v38 += 4;
        v36 = &v51[v50 >> 4];
        v37 += 4;
        ++v34;
        v33 += 8;
        v27 = &v40[v50 >> 4];
        v29 += 8;
      }
      while (v23 != v34);
      if (v23 >= v195)
      {
        v136 = (unsigned __int16 *)(v29 + v30);
        v137 = (unsigned __int16 *)(v33 + v30);
        v72 = v23;
        v138 = v194;
        v22 = v177;
      }
      else
      {
        v201 = 0;
        v174 = v50 >> 2;
        v175 = v40;
        v71 = (v50 >> 2) & 0x3C;
        v176 = v51;
        v191 = (char *)v51 + v71;
        v192 = (char *)v40 + v71;
        v72 = v23;
        do
        {
          v199 = v30;
          v73 = (unsigned __int16 *)(v33 + v30);
          v74 = (unsigned __int16 *)(v29 + v30);
          v75 = *(unsigned __int16 *)(v29 + v30);
          v76 = *(unsigned __int16 *)(v29 + v30 + 2);
          v77 = *(unsigned __int16 *)(v29 + v30 + 4);
          v78 = *(unsigned __int16 *)(v29 + v30 + 8);
          v79 = *(unsigned __int16 *)(v29 + v30 + 10);
          v80 = *(unsigned __int16 *)(v29 + v30 + 12);
          v81 = *(unsigned __int16 *)(v33 + v30);
          v82 = *(unsigned __int16 *)(v33 + v30 + 2);
          v83 = *(unsigned __int16 *)(v33 + v30 + 4);
          v84 = 1023 * ((22217 * v76 + 8608 * v75 + 1943 * v77 + 0x4000) >> 15);
          v85 = *(unsigned __int16 *)(v33 + v30 + 8);
          v86 = *(unsigned __int16 *)(v33 + v30 + 10);
          v87 = *(unsigned __int16 *)(v33 + v30 + 12);
          v196 = 1023 * ((22217 * v86 + 8608 * v85 + 1943 * v87 + 0x4000) >> 15);
          v197 = 1023 * ((22217 * v82 + 8608 * v81 + 1943 * v83 + 0x4000) >> 15);
          v88 = v80 + v77 + v83;
          v89 = v78 + v75;
          LODWORD(v78) = 1023 * ((22217 * v79 + 8608 * v78 + 1943 * v80 + 0x4000) >> 15) + 0x7FFF;
          v90 = v89 + v81 + v85;
          v91 = v79 + v76 + v82;
          v92 = 268439553 * (v84 + 0x7FFF);
          v93 = (unint64_t)(0x1FFFFFFFFD1E0 * v86
                                 - 11808 * v91
                                 + 0x1FFFFFFFFEE22 * v90
                                 + ((v88 + v87) << 14)
                                 + 0x100000000) >> 17;
          v94 = 0x1FFFFFFFFC527 * v86 - 15065 * v91 + 0x1FFFFFFFFFADBLL * v88 + 0x1FFFFFFFFFADBLL * v87;
          v95 = 1023 * v93;
          v96 = v94 + (v90 << 14) + 0x100000000;
          v97 = v74[8];
          LODWORD(v93) = v74[9];
          v98 = v74[10];
          v99 = v92 >> 44;
          v100 = v74[12];
          LODWORD(v87) = v74[13];
          v101 = v74[14];
          v102 = 1023 * ((22217 * v87 + 8608 * v100 + 1943 * v101 + 0x4000) >> 15);
          v103 = v73[8];
          v104 = v73[9];
          v105 = v73[10];
          v106 = (((268439553 * (unint64_t)v78) >> 32) >> 2) & 0x7FFFC00 | v99;
          v107 = 1023 * ((22217 * v104 + 8608 * v103 + 1943 * v105 + 0x4000) >> 15);
          v108 = v73[12];
          v109 = v73[13];
          v110 = 1023 * (v96 >> 17);
          v111 = v73[14];
          v112 = 1023 * ((22217 * v109 + 8608 * v108 + 1943 * v111 + 0x4000) >> 15);
          v198 = v101 + v98 + v105;
          v113 = &v192[v201];
          v114 = (unsigned int *)&v191[v201];
          v115 = v95 + 0x7FFF;
          v116 = ((268439553 * (unint64_t)(v107 + 0x7FFF)) >> 32) >> 12;
          v117 = v110 + 0x7FFF;
          v118 = v100 + v97 + v103 + v108;
          v119 = v87 + v93 + v104;
          v120 = v106 | (((268439553
                                       * (unint64_t)(1023
                                                          * ((22217 * v93
                                                                          + 8608 * v97
                                                                          + 1943 * v98
                                                                          + 0x4000) >> 15)
                                                          + 0x7FFF)) >> 32) >> 12 << 20);
          LODWORD(v108) = (((268439553 * (unint64_t)(v196 + 0x7FFF)) >> 32) >> 2) & 0x7FFFC00 | (((268439553 * (unint64_t)(v197 + 0x7FFF)) >> 32) >> 12) | (v116 << 20);
          v121 = v74[16];
          LODWORD(v86) = v74[17];
          v122 = v74[18];
          *v114 = v120;
          *(_DWORD *)v113 = v108;
          v123 = v74[20];
          LODWORD(v97) = v74[21];
          v124 = v74[22];
          v125 = (((268439553
                                * (unint64_t)(1023
                                                   * ((22217 * v86 + 8608 * v121 + 1943 * v122 + 0x4000) >> 15)
                                                   + 0x7FFF)) >> 32) >> 2) & 0x7FFFC00 | (((268439553 * (unint64_t)(v102 + 0x7FFF)) >> 32) >> 12) | (((268439553 * (unint64_t)(1023 * ((22217 * v97 + 8608 * v123 + 1943 * v124 + 0x4000) >> 15) + 0x7FFF)) >> 32) >> 12 << 20);
          v126 = v73[16];
          v127 = v73[17];
          v128 = v73[18];
          v129 = &v25[v201 / 4];
          *v129 = (v115 / 0xFFFF) | (((2147516417u * (unint64_t)v117) >> 32) >> 5) & 0x7FFFC00 | (((1023 * ((unint64_t)(0x1FFFFFFFFD1E0 * v109 - 11808 * v119 + 0x1FFFFFFFFEE22 * v118 + ((v198 + v111) << 14) + 0x100000000) >> 17) + 0x7FFF) / 0xFFFF) << 20);
          v130 = v73[20];
          v131 = v73[21];
          v114[1] = v125;
          v132 = v73[22];
          *((_DWORD *)v113 + 1) = (((268439553
                                                 * (unint64_t)(1023
                                                                    * ((22217 * v127
                                                                                    + 8608 * v126
                                                                                    + 1943 * v128
                                                                                    + 0x4000) >> 15)
                                                                    + 0x7FFF)) >> 32) >> 2) & 0x7FFFC00 | (((268439553 * (unint64_t)(v112 + 0x7FFF)) >> 32) >> 12) | (((268439553 * (unint64_t)(1023 * ((22217 * v131 + 8608 * v130 + 1943 * v132 + 0x4000) >> 15) + 0x7FFF)) >> 32) >> 12 << 20);
          v133 = v124 + v122 + v128;
          v134 = v123 + v121 + v126 + v130;
          v129[1] = ((1023
                    * ((unint64_t)(-1317 * (int)v198
                                                      - 15065 * v119
                                                      + 0x1FFFFFFFFC527 * v109
                                                      + 0x1FFFFFFFFFADBLL * v111
                                                      + (v118 << 14)
                                                      + 0x100000000) >> 17)
                    + 0x7FFF)
                   / 0xFFFF) & 0xFFFFF | ((unsigned __int16)((1023
                                                            * ((unint64_t)(0x1FFFFFFFFC527 * v131
                                                                                              - 15065
                                                                                              * ((int)v97
                                                                                               + (int)v86
                                                                                               + v127)
                                                                                              + 0x1FFFFFFFFFADBLL * v133
                                                                                              + 0x1FFFFFFFFFADBLL * v132
                                                                                              + (v134 << 14)
                                                                                              + 0x100000000) >> 17)
                                                            + 0x7FFF)
                                                           / 0xFFFF) << 20) | (((2147516417u
                                                                                             * (unint64_t)(1023 * ((unint64_t)(0x1FFFFFFFFD1E0 * v131 - 11808 * ((int)v97 + (int)v86 + v127) + 0x1FFFFFFFFEE22 * v134 + ((v133 + v132) << 14) + 0x100000000) >> 17) + 0x7FFF)) >> 32) >> 5) & 0x7FFFC00;
          v72 += 6;
          v201 += 8;
          v30 = v199 + 48;
        }
        while (v72 < v195);
        v23 = v193;
        v25 = (_DWORD *)((char *)v25 + v201);
        v135 = v174 & 0x3C;
        v27 = (unsigned int *)((char *)v175 + v135 + v201);
        v36 = (unsigned int *)((char *)v176 + v135 + v201);
        v136 = (unsigned __int16 *)(v29 + v30);
        v137 = (unsigned __int16 *)(v33 + v30);
        v138 = v194;
        v22 = v177;
        v30 = v200;
      }
      if (v72 < v138)
      {
        v139 = 0;
        v140 = v173;
        v141 = v137;
        v142 = v136;
        do
        {
          if ((v72 & 1) != 0)
          {
            v148 = &v136[v139 - 4];
            v146 = v142 - 3;
            v147 = v142 - 2;
            v143 = v136[v139];
            v144 = v136[v139 + 1];
            v145 = v136[v139 + 2];
          }
          else
          {
            v143 = 0;
            v144 = 0;
            v145 = 0;
            v146 = &v136[v139 + 1];
            v147 = &v136[v139 + 2];
            v148 = v142;
          }
          v149 = *v147;
          v150 = *v146;
          v151 = *v148;
          v152 = *((unsigned __int8 *)&v203 + v140);
          *v36 = (((268439553
                                * (unint64_t)(1023
                                                   * ((22217 * v150 + 1943 * v149 + 8608 * v151 + 0x4000) >> 15)
                                                   + 0x7FFF)) >> 32) >> 12 << v152) | *v36 & ~(1023 << v152);
          if ((v72 & 1) != 0)
          {
            v158 = &v137[v139 - 4];
            v156 = v141 - 3;
            v157 = v141 - 2;
            v153 = v137[v139];
            v154 = v137[v139 + 1];
            v155 = v137[v139 + 2];
          }
          else
          {
            v153 = 0;
            v154 = 0;
            v155 = 0;
            v156 = &v137[v139 + 1];
            v157 = &v137[v139 + 2];
            v158 = v141;
          }
          v159 = *v157;
          v160 = *v156;
          v161 = *v158;
          if ((v72 & 1) != 0)
          {
            v164 = v145 + v149 + v159;
            v165 = v143 + v151 + v153 + v161;
            v166 = v144 + v150 + v160;
            v162 = (1023
                  * ((unint64_t)(0x1FFFFFFFFD1E0 * v154
                                                    + ((v164 + v155) << 14)
                                                    + 0x1FFFFFFFFD1E0 * v166
                                                    + 0x1FFFFFFFFEE22 * v165
                                                    + 0x100000000) >> 17)
                  + 0x7FFF)
                 / 0xFFFF;
            v163 = (1023
                  * ((unint64_t)(0x1FFFFFFFFFADBLL * v155
                                                    + 0x1FFFFFFFFC527 * v154
                                                    + 0x1FFFFFFFFFADBLL * v164
                                                    + 0x1FFFFFFFFC527 * v166
                                                    + (v165 << 14)
                                                    + 0x100000000) >> 17)
                  + 0x7FFF)
                 / 0xFFFF;
          }
          else
          {
            v162 = 0;
            v163 = 0;
          }
          v23 = v193;
          v30 = v200;
          *v27 = *v27 & ~(1023 << v152) | (((268439553
                                                         * (unint64_t)(1023
                                                                            * ((22217 * v160
                                                                                            + 1943 * v159
                                                                                            + 8608 * v161
                                                                                            + 0x4000) >> 15)
                                                                            + 0x7FFF)) >> 32) >> 12 << v152);
          if (v140 == 2)
            v140 = 0;
          else
            ++v140;
          if ((v72 & 1) != 0)
          {
            v167 = *((unsigned __int8 *)&v203 + v202);
            *v25 = *v25 & ~(1023 << v167) | (v162 << v167);
            v168 = (_DWORD *)((char *)v25 + ((v167 >> 2) & 0x3C));
            if (v202 == 2)
              v169 = 0;
            else
              v169 = v202 + 1;
            v170 = *((unsigned __int8 *)&v203 + v169);
            *v168 = *v168 & ~(1023 << v170) | (v163 << v170);
            v25 = (unsigned int *)((char *)v168 + ((v170 >> 2) & 0x3C));
            if (v169 == 2)
              v171 = 0;
            else
              v171 = v169 + 1;
            v202 = v171;
          }
          v142 += 4;
          v36 += v152 >> 4;
          v141 += 4;
          ++v72;
          v139 += 4;
          v27 += v152 >> 4;
        }
        while (v194 != v72);
      }
      v31 = &v185[v181];
      v32 = &v184[v181];
      v26 = v188 + 4 * v180;
      v21 = v190 + 1;
      v27 = &v187[v180];
      v33 = v183 + v178;
      v29 = v186 + v178;
      v25 = &v189[v179];
    }
    while (v190 + 1 != v182);
  }
  return 0;
}

uint64_t vt_Copy_64RGBA_pf20ITU709(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t a5, uint64_t a6, _QWORD *a7, _QWORD *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  _DWORD *v25;
  unint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int16 *v31;
  unsigned __int16 *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned __int16 *v37;
  unsigned __int16 *v38;
  unsigned int *v39;
  unsigned int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int16 *v44;
  unsigned __int16 *v45;
  unsigned __int16 *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unsigned int *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int16 *v55;
  unsigned __int16 *v56;
  unsigned __int16 *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unsigned int *v67;
  unsigned int v68;
  unint64_t v69;
  unsigned int v70;
  uint64_t v71;
  unint64_t v72;
  unsigned __int16 *v73;
  unsigned __int16 *v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  int v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  int v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  unsigned int v112;
  char *v113;
  unsigned int *v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  uint64_t v118;
  int v119;
  unsigned int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  unsigned int *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unsigned __int16 *v136;
  unsigned __int16 *v137;
  unint64_t v138;
  uint64_t v139;
  unsigned int v140;
  unsigned __int16 *v141;
  unsigned __int16 *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unsigned __int16 *v146;
  unsigned __int16 *v147;
  unsigned __int16 *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unsigned __int16 *v156;
  unsigned __int16 *v157;
  unsigned __int16 *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unsigned int v162;
  unsigned int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unsigned int *v168;
  unsigned int v169;
  unint64_t v170;
  unsigned int v171;
  unsigned int v173;
  unint64_t v174;
  unsigned int *v175;
  unsigned int *v176;
  unsigned int v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  unsigned __int16 *v184;
  unsigned __int16 *v185;
  uint64_t v186;
  unsigned int *v187;
  unint64_t v188;
  _DWORD *v189;
  uint64_t v190;
  char *v191;
  char *v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  unsigned int v196;
  unsigned int v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  unsigned int v202;
  int v203;

  v203 = 1313280;
  v8 = *(_QWORD *)(a2 + 40);
  v9 = (v8 & 1) + v8;
  v10 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v11 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v13 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v14 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v15 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v16 = v14 - v13;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v10 < v14 - v13)
    v16 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v10;
  v17 = v11 - v9;
  if (v11 - v9 >= v15 - v12)
    v17 = v15 - v12;
  v18 = v14 % 6;
  v19 = v16 >= v18;
  v20 = v16 - v18;
  if (!v19)
    v20 = 0;
  v194 = v16;
  v195 = v20;
  if (v17 >= 2)
  {
    v21 = 0;
    v22 = v13 % 3;
    v173 = v20 % 3;
    v23 = 6 * (v13 / 6) - v13 + 6;
    v182 = v17 >> 1;
    v24 = a8[1];
    v25 = (_DWORD *)(a7[1] + v24 * (v12 >> 1) + 4 * (v13 / 3));
    v26 = *a7 + *a8 * v12 + 4 * (v13 / 3);
    v27 = (unsigned int *)(v26 + *a8);
    v28 = *a3;
    v29 = *a3 + *a4 * v9;
    v30 = 8 * v10;
    v31 = (unsigned __int16 *)(v29 + 8 * v10);
    v32 = (unsigned __int16 *)((char *)v31 + *a4);
    v180 = (*a8 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    v181 = *a4 & 0x7FFFFFFFFFFFFFFFLL;
    v33 = v28 + *a4 + *a4 * (v8 + (v8 & 1));
    v178 = 2 * *a4;
    v179 = v24 >> 2;
    v193 = v23;
    v200 = 8 * v10;
    v177 = v22;
    do
    {
      v189 = v25;
      v190 = v21;
      v34 = 0;
      v186 = v29;
      v187 = v27;
      v183 = v33;
      v184 = v32;
      v202 = v22;
      v35 = v22;
      v188 = v26;
      v36 = (unsigned int *)v26;
      v37 = v32;
      v185 = v31;
      v38 = v31;
      do
      {
        v39 = v36;
        v40 = v27;
        if ((v34 & 1) != 0)
        {
          v46 = (unsigned __int16 *)(v29 + v30 - 8);
          v44 = v38 - 3;
          v45 = v38 - 2;
          v41 = *(unsigned __int16 *)(v29 + v30);
          v42 = *(unsigned __int16 *)(v29 + v30 + 2);
          v43 = *(unsigned __int16 *)(v29 + v30 + 4);
        }
        else
        {
          v41 = 0;
          v42 = 0;
          v43 = 0;
          v44 = (unsigned __int16 *)(v29 + v30 + 2);
          v45 = (unsigned __int16 *)(v29 + v30 + 4);
          v46 = v38;
        }
        v47 = *v45;
        v48 = *v44;
        v49 = *v46;
        v50 = *((unsigned __int8 *)&v203 + v35);
        *v39 = (((268439553
                              * (unint64_t)(1023
                                                 * ((23436 * v48 + 2366 * v47 + 6966 * v49 + 0x4000) >> 15)
                                                 + 0x7FFF)) >> 32) >> 12 << v50) | *v39 & ~(1023 << v50);
        v51 = v39;
        if ((v34 & 1) != 0)
        {
          v57 = (unsigned __int16 *)(v33 + v30 - 8);
          v55 = v37 - 3;
          v56 = v37 - 2;
          v52 = *(unsigned __int16 *)(v33 + v30);
          v53 = *(unsigned __int16 *)(v33 + v30 + 2);
          v54 = *(unsigned __int16 *)(v33 + v30 + 4);
        }
        else
        {
          v52 = 0;
          v53 = 0;
          v54 = 0;
          v55 = (unsigned __int16 *)(v33 + v30 + 2);
          v56 = (unsigned __int16 *)(v33 + v30 + 4);
          v57 = v37;
        }
        v58 = *v56;
        v59 = *v55;
        v60 = *v57;
        if ((v34 & 1) != 0)
        {
          v63 = v43 + v47 + v58;
          v64 = v41 + v49 + v52 + v60;
          v65 = v42 + v48 + v59;
          v30 = v200;
          v61 = (int)(1023
                    * ((unint64_t)(0x1FFFFFFFFCEABLL * v53
                                        + ((v63 + v54) << 14)
                                        + 0x1FFFFFFFFCEABLL * v65
                                        + 0x1FFFFFFFFF157 * v64
                                        + 0x100000000) >> 17)
                    + 0x7FFF)
              / 0xFFFF;
          LODWORD(v65) = (unint64_t)(2147516417
                                          * (int)(1023
                                                * ((unint64_t)(0x1FFFFFFFFFA23 * v54
                                                                    + 0x1FFFFFFFFC5DFLL * v53
                                                                    + 0x1FFFFFFFFFA23 * v63
                                                                    + 0x1FFFFFFFFC5DFLL * v65
                                                                    + (v64 << 14)
                                                                    + 0x100000000) >> 17)
                                                + 0x7FFF)) >> 32;
          v62 = ((int)v65 >> 15) + (v65 >> 31);
        }
        else
        {
          v61 = 0;
          v62 = 0;
        }
        *v40 = *v40 & ~(1023 << v50) | (((268439553
                                                      * (unint64_t)(1023
                                                                         * ((23436 * v59
                                                                                         + 2366 * v58
                                                                                         + 6966 * v60
                                                                                         + 0x4000) >> 15)
                                                                         + 0x7FFF)) >> 32) >> 12 << v50);
        if (v35 == 2)
          v35 = 0;
        else
          ++v35;
        if ((v34 & 1) != 0)
        {
          v66 = *((unsigned __int8 *)&v203 + v202);
          *v25 = *v25 & ~(1023 << v66) | (v61 << v66);
          v67 = (_DWORD *)((char *)v25 + ((v66 >> 2) & 0x3C));
          if (v202 == 2)
            v68 = 0;
          else
            v68 = v202 + 1;
          v69 = *((unsigned __int8 *)&v203 + v68);
          *v67 = *v67 & ~(1023 << v69) | (v62 << v69);
          v25 = (unsigned int *)((char *)v67 + ((v69 >> 2) & 0x3C));
          if (v68 == 2)
            v70 = 0;
          else
            v70 = v68 + 1;
          v202 = v70;
        }
        v38 += 4;
        v36 = &v51[v50 >> 4];
        v37 += 4;
        ++v34;
        v33 += 8;
        v27 = &v40[v50 >> 4];
        v29 += 8;
      }
      while (v23 != v34);
      if (v23 >= v195)
      {
        v136 = (unsigned __int16 *)(v29 + v30);
        v137 = (unsigned __int16 *)(v33 + v30);
        v72 = v23;
        v138 = v194;
        v22 = v177;
      }
      else
      {
        v201 = 0;
        v174 = v50 >> 2;
        v175 = v40;
        v71 = (v50 >> 2) & 0x3C;
        v176 = v51;
        v191 = (char *)v51 + v71;
        v192 = (char *)v40 + v71;
        v72 = v23;
        do
        {
          v199 = v30;
          v73 = (unsigned __int16 *)(v33 + v30);
          v74 = (unsigned __int16 *)(v29 + v30);
          v75 = *(unsigned __int16 *)(v29 + v30);
          v76 = *(unsigned __int16 *)(v29 + v30 + 2);
          v77 = *(unsigned __int16 *)(v29 + v30 + 4);
          v78 = *(unsigned __int16 *)(v29 + v30 + 8);
          v79 = *(unsigned __int16 *)(v29 + v30 + 10);
          v80 = *(unsigned __int16 *)(v29 + v30 + 12);
          v81 = *(unsigned __int16 *)(v33 + v30);
          v82 = *(unsigned __int16 *)(v33 + v30 + 2);
          v83 = *(unsigned __int16 *)(v33 + v30 + 4);
          v84 = 1023 * ((23436 * v76 + 6966 * v75 + 2366 * v77 + 0x4000) >> 15);
          v85 = *(unsigned __int16 *)(v33 + v30 + 8);
          v86 = *(unsigned __int16 *)(v33 + v30 + 10);
          v87 = *(unsigned __int16 *)(v33 + v30 + 12);
          v196 = 1023 * ((23436 * v86 + 6966 * v85 + 2366 * v87 + 0x4000) >> 15);
          v197 = 1023 * ((23436 * v82 + 6966 * v81 + 2366 * v83 + 0x4000) >> 15);
          v88 = v80 + v77 + v83;
          v89 = v78 + v75;
          LODWORD(v78) = 1023 * ((23436 * v79 + 6966 * v78 + 2366 * v80 + 0x4000) >> 15) + 0x7FFF;
          v90 = v89 + v81 + v85;
          v91 = v79 + v76 + v82;
          v92 = 268439553 * (v84 + 0x7FFF);
          v93 = (unint64_t)(0x1FFFFFFFFCEABLL * v86
                                 - 12629 * v91
                                 + 0x1FFFFFFFFF157 * v90
                                 + ((v88 + v87) << 14)
                                 + 0x100000000) >> 17;
          v94 = 0x1FFFFFFFFC5DFLL * v86 - 14881 * v91 + 0x1FFFFFFFFFA23 * v88 + 0x1FFFFFFFFFA23 * v87;
          v95 = 1023 * v93;
          v96 = v94 + (v90 << 14) + 0x100000000;
          v97 = v74[8];
          LODWORD(v93) = v74[9];
          v98 = v74[10];
          v99 = v92 >> 44;
          v100 = v74[12];
          LODWORD(v87) = v74[13];
          v101 = v74[14];
          v102 = 1023 * ((23436 * v87 + 6966 * v100 + 2366 * v101 + 0x4000) >> 15);
          v103 = v73[8];
          v104 = v73[9];
          v105 = v73[10];
          v106 = (((268439553 * (unint64_t)v78) >> 32) >> 2) & 0x7FFFC00 | v99;
          v107 = 1023 * ((23436 * v104 + 6966 * v103 + 2366 * v105 + 0x4000) >> 15);
          v108 = v73[12];
          v109 = v73[13];
          v110 = 1023 * (v96 >> 17);
          v111 = v73[14];
          v112 = 1023 * ((23436 * v109 + 6966 * v108 + 2366 * v111 + 0x4000) >> 15);
          v198 = v101 + v98 + v105;
          v113 = &v192[v201];
          v114 = (unsigned int *)&v191[v201];
          v115 = v95 + 0x7FFF;
          v116 = ((268439553 * (unint64_t)(v107 + 0x7FFF)) >> 32) >> 12;
          v117 = v110 + 0x7FFF;
          v118 = v100 + v97 + v103 + v108;
          v119 = v87 + v93 + v104;
          v120 = v106 | (((268439553
                                       * (unint64_t)(1023
                                                          * ((23436 * v93
                                                                          + 6966 * v97
                                                                          + 2366 * v98
                                                                          + 0x4000) >> 15)
                                                          + 0x7FFF)) >> 32) >> 12 << 20);
          LODWORD(v108) = (((268439553 * (unint64_t)(v196 + 0x7FFF)) >> 32) >> 2) & 0x7FFFC00 | (((268439553 * (unint64_t)(v197 + 0x7FFF)) >> 32) >> 12) | (v116 << 20);
          v121 = v74[16];
          LODWORD(v86) = v74[17];
          v122 = v74[18];
          *v114 = v120;
          *(_DWORD *)v113 = v108;
          v123 = v74[20];
          LODWORD(v97) = v74[21];
          v124 = v74[22];
          v125 = (((268439553
                                * (unint64_t)(1023
                                                   * ((23436 * v86 + 6966 * v121 + 2366 * v122 + 0x4000) >> 15)
                                                   + 0x7FFF)) >> 32) >> 2) & 0x7FFFC00 | (((268439553 * (unint64_t)(v102 + 0x7FFF)) >> 32) >> 12) | (((268439553 * (unint64_t)(1023 * ((23436 * v97 + 6966 * v123 + 2366 * v124 + 0x4000) >> 15) + 0x7FFF)) >> 32) >> 12 << 20);
          v126 = v73[16];
          v127 = v73[17];
          v128 = v73[18];
          v129 = &v25[v201 / 4];
          *v129 = (v115 / 0xFFFF) | (((2147516417u * (unint64_t)v117) >> 32) >> 5) & 0x7FFFC00 | (((1023 * ((unint64_t)(0x1FFFFFFFFCEABLL * v109 - 12629 * v119 + 0x1FFFFFFFFF157 * v118 + ((v198 + v111) << 14) + 0x100000000) >> 17) + 0x7FFF) / 0xFFFF) << 20);
          v130 = v73[20];
          v131 = v73[21];
          v114[1] = v125;
          v132 = v73[22];
          *((_DWORD *)v113 + 1) = (((268439553
                                                 * (unint64_t)(1023
                                                                    * ((23436 * v127
                                                                                    + 6966 * v126
                                                                                    + 2366 * v128
                                                                                    + 0x4000) >> 15)
                                                                    + 0x7FFF)) >> 32) >> 2) & 0x7FFFC00 | (((268439553 * (unint64_t)(v112 + 0x7FFF)) >> 32) >> 12) | (((268439553 * (unint64_t)(1023 * ((23436 * v131 + 6966 * v130 + 2366 * v132 + 0x4000) >> 15) + 0x7FFF)) >> 32) >> 12 << 20);
          v133 = v124 + v122 + v128;
          v134 = v123 + v121 + v126 + v130;
          v129[1] = ((1023
                    * ((unint64_t)(-1501 * (int)v198
                                                      - 14881 * v119
                                                      + 0x1FFFFFFFFC5DFLL * v109
                                                      + 0x1FFFFFFFFFA23 * v111
                                                      + (v118 << 14)
                                                      + 0x100000000) >> 17)
                    + 0x7FFF)
                   / 0xFFFF) & 0xFFFFF | ((unsigned __int16)((1023
                                                            * ((unint64_t)(0x1FFFFFFFFC5DFLL * v131
                                                                                              - 14881
                                                                                              * ((int)v97
                                                                                               + (int)v86
                                                                                               + v127)
                                                                                              + 0x1FFFFFFFFFA23 * v133
                                                                                              + 0x1FFFFFFFFFA23 * v132
                                                                                              + (v134 << 14)
                                                                                              + 0x100000000) >> 17)
                                                            + 0x7FFF)
                                                           / 0xFFFF) << 20) | (((2147516417u
                                                                                             * (unint64_t)(1023 * ((unint64_t)(0x1FFFFFFFFCEABLL * v131 - 12629 * ((int)v97 + (int)v86 + v127) + 0x1FFFFFFFFF157 * v134 + ((v133 + v132) << 14) + 0x100000000) >> 17) + 0x7FFF)) >> 32) >> 5) & 0x7FFFC00;
          v72 += 6;
          v201 += 8;
          v30 = v199 + 48;
        }
        while (v72 < v195);
        v23 = v193;
        v25 = (_DWORD *)((char *)v25 + v201);
        v135 = v174 & 0x3C;
        v27 = (unsigned int *)((char *)v175 + v135 + v201);
        v36 = (unsigned int *)((char *)v176 + v135 + v201);
        v136 = (unsigned __int16 *)(v29 + v30);
        v137 = (unsigned __int16 *)(v33 + v30);
        v138 = v194;
        v22 = v177;
        v30 = v200;
      }
      if (v72 < v138)
      {
        v139 = 0;
        v140 = v173;
        v141 = v137;
        v142 = v136;
        do
        {
          if ((v72 & 1) != 0)
          {
            v148 = &v136[v139 - 4];
            v146 = v142 - 3;
            v147 = v142 - 2;
            v143 = v136[v139];
            v144 = v136[v139 + 1];
            v145 = v136[v139 + 2];
          }
          else
          {
            v143 = 0;
            v144 = 0;
            v145 = 0;
            v146 = &v136[v139 + 1];
            v147 = &v136[v139 + 2];
            v148 = v142;
          }
          v149 = *v147;
          v150 = *v146;
          v151 = *v148;
          v152 = *((unsigned __int8 *)&v203 + v140);
          *v36 = (((268439553
                                * (unint64_t)(1023
                                                   * ((23436 * v150 + 2366 * v149 + 6966 * v151 + 0x4000) >> 15)
                                                   + 0x7FFF)) >> 32) >> 12 << v152) | *v36 & ~(1023 << v152);
          if ((v72 & 1) != 0)
          {
            v158 = &v137[v139 - 4];
            v156 = v141 - 3;
            v157 = v141 - 2;
            v153 = v137[v139];
            v154 = v137[v139 + 1];
            v155 = v137[v139 + 2];
          }
          else
          {
            v153 = 0;
            v154 = 0;
            v155 = 0;
            v156 = &v137[v139 + 1];
            v157 = &v137[v139 + 2];
            v158 = v141;
          }
          v159 = *v157;
          v160 = *v156;
          v161 = *v158;
          if ((v72 & 1) != 0)
          {
            v164 = v145 + v149 + v159;
            v165 = v143 + v151 + v153 + v161;
            v166 = v144 + v150 + v160;
            v162 = (1023
                  * ((unint64_t)(0x1FFFFFFFFCEABLL * v154
                                                    + ((v164 + v155) << 14)
                                                    + 0x1FFFFFFFFCEABLL * v166
                                                    + 0x1FFFFFFFFF157 * v165
                                                    + 0x100000000) >> 17)
                  + 0x7FFF)
                 / 0xFFFF;
            v163 = (1023
                  * ((unint64_t)(0x1FFFFFFFFFA23 * v155
                                                    + 0x1FFFFFFFFC5DFLL * v154
                                                    + 0x1FFFFFFFFFA23 * v164
                                                    + 0x1FFFFFFFFC5DFLL * v166
                                                    + (v165 << 14)
                                                    + 0x100000000) >> 17)
                  + 0x7FFF)
                 / 0xFFFF;
          }
          else
          {
            v162 = 0;
            v163 = 0;
          }
          v23 = v193;
          v30 = v200;
          *v27 = *v27 & ~(1023 << v152) | (((268439553
                                                         * (unint64_t)(1023
                                                                            * ((23436 * v160
                                                                                            + 2366 * v159
                                                                                            + 6966 * v161
                                                                                            + 0x4000) >> 15)
                                                                            + 0x7FFF)) >> 32) >> 12 << v152);
          if (v140 == 2)
            v140 = 0;
          else
            ++v140;
          if ((v72 & 1) != 0)
          {
            v167 = *((unsigned __int8 *)&v203 + v202);
            *v25 = *v25 & ~(1023 << v167) | (v162 << v167);
            v168 = (_DWORD *)((char *)v25 + ((v167 >> 2) & 0x3C));
            if (v202 == 2)
              v169 = 0;
            else
              v169 = v202 + 1;
            v170 = *((unsigned __int8 *)&v203 + v169);
            *v168 = *v168 & ~(1023 << v170) | (v163 << v170);
            v25 = (unsigned int *)((char *)v168 + ((v170 >> 2) & 0x3C));
            if (v169 == 2)
              v171 = 0;
            else
              v171 = v169 + 1;
            v202 = v171;
          }
          v142 += 4;
          v36 += v152 >> 4;
          v141 += 4;
          ++v72;
          v139 += 4;
          v27 += v152 >> 4;
        }
        while (v194 != v72);
      }
      v31 = &v185[v181];
      v32 = &v184[v181];
      v26 = v188 + 4 * v180;
      v21 = v190 + 1;
      v27 = &v187[v180];
      v33 = v183 + v178;
      v29 = v186 + v178;
      v25 = &v189[v179];
    }
    while (v190 + 1 != v182);
  }
  return 0;
}

uint64_t vt_Copy_64RGBA_pf20ITU601(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t a5, uint64_t a6, _QWORD *a7, _QWORD *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  _DWORD *v25;
  unint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int16 *v31;
  unsigned __int16 *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned __int16 *v37;
  unsigned __int16 *v38;
  unsigned int *v39;
  unsigned int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int16 *v44;
  unsigned __int16 *v45;
  unsigned __int16 *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unsigned int *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int16 *v55;
  unsigned __int16 *v56;
  unsigned __int16 *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unsigned int *v67;
  unsigned int v68;
  unint64_t v69;
  unsigned int v70;
  uint64_t v71;
  unint64_t v72;
  unsigned __int16 *v73;
  unsigned __int16 *v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  int v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  int v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  unsigned int v112;
  char *v113;
  unsigned int *v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  uint64_t v118;
  int v119;
  unsigned int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  unsigned int *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unsigned __int16 *v136;
  unsigned __int16 *v137;
  unint64_t v138;
  uint64_t v139;
  unsigned int v140;
  unsigned __int16 *v141;
  unsigned __int16 *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unsigned __int16 *v146;
  unsigned __int16 *v147;
  unsigned __int16 *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unsigned __int16 *v156;
  unsigned __int16 *v157;
  unsigned __int16 *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unsigned int v162;
  unsigned int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unsigned int *v168;
  unsigned int v169;
  unint64_t v170;
  unsigned int v171;
  unsigned int v173;
  unint64_t v174;
  unsigned int *v175;
  unsigned int *v176;
  unsigned int v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  unsigned __int16 *v184;
  unsigned __int16 *v185;
  uint64_t v186;
  unsigned int *v187;
  unint64_t v188;
  _DWORD *v189;
  uint64_t v190;
  char *v191;
  char *v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  unsigned int v196;
  unsigned int v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  unsigned int v202;
  int v203;

  v203 = 1313280;
  v8 = *(_QWORD *)(a2 + 40);
  v9 = (v8 & 1) + v8;
  v10 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v11 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v13 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v14 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v15 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v16 = v14 - v13;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v10 < v14 - v13)
    v16 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v10;
  v17 = v11 - v9;
  if (v11 - v9 >= v15 - v12)
    v17 = v15 - v12;
  v18 = v14 % 6;
  v19 = v16 >= v18;
  v20 = v16 - v18;
  if (!v19)
    v20 = 0;
  v194 = v16;
  v195 = v20;
  if (v17 >= 2)
  {
    v21 = 0;
    v22 = v13 % 3;
    v173 = v20 % 3;
    v23 = 6 * (v13 / 6) - v13 + 6;
    v182 = v17 >> 1;
    v24 = a8[1];
    v25 = (_DWORD *)(a7[1] + v24 * (v12 >> 1) + 4 * (v13 / 3));
    v26 = *a7 + *a8 * v12 + 4 * (v13 / 3);
    v27 = (unsigned int *)(v26 + *a8);
    v28 = *a3;
    v29 = *a3 + *a4 * v9;
    v30 = 8 * v10;
    v31 = (unsigned __int16 *)(v29 + 8 * v10);
    v32 = (unsigned __int16 *)((char *)v31 + *a4);
    v180 = (*a8 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    v181 = *a4 & 0x7FFFFFFFFFFFFFFFLL;
    v33 = v28 + *a4 + *a4 * (v8 + (v8 & 1));
    v178 = 2 * *a4;
    v179 = v24 >> 2;
    v193 = v23;
    v200 = 8 * v10;
    v177 = v22;
    do
    {
      v189 = v25;
      v190 = v21;
      v34 = 0;
      v186 = v29;
      v187 = v27;
      v183 = v33;
      v184 = v32;
      v202 = v22;
      v35 = v22;
      v188 = v26;
      v36 = (unsigned int *)v26;
      v37 = v32;
      v185 = v31;
      v38 = v31;
      do
      {
        v39 = v36;
        v40 = v27;
        if ((v34 & 1) != 0)
        {
          v46 = (unsigned __int16 *)(v29 + v30 - 8);
          v44 = v38 - 3;
          v45 = v38 - 2;
          v41 = *(unsigned __int16 *)(v29 + v30);
          v42 = *(unsigned __int16 *)(v29 + v30 + 2);
          v43 = *(unsigned __int16 *)(v29 + v30 + 4);
        }
        else
        {
          v41 = 0;
          v42 = 0;
          v43 = 0;
          v44 = (unsigned __int16 *)(v29 + v30 + 2);
          v45 = (unsigned __int16 *)(v29 + v30 + 4);
          v46 = v38;
        }
        v47 = *v45;
        v48 = *v44;
        v49 = *v46;
        v50 = *((unsigned __int8 *)&v203 + v35);
        *v39 = (((268439553
                              * (unint64_t)(1023
                                                 * ((19235 * v48 + 3736 * v47 + 9798 * v49 + 0x4000) >> 15)
                                                 + 0x7FFF)) >> 32) >> 12 << v50) | *v39 & ~(1023 << v50);
        v51 = v39;
        if ((v34 & 1) != 0)
        {
          v57 = (unsigned __int16 *)(v33 + v30 - 8);
          v55 = v37 - 3;
          v56 = v37 - 2;
          v52 = *(unsigned __int16 *)(v33 + v30);
          v53 = *(unsigned __int16 *)(v33 + v30 + 2);
          v54 = *(unsigned __int16 *)(v33 + v30 + 4);
        }
        else
        {
          v52 = 0;
          v53 = 0;
          v54 = 0;
          v55 = (unsigned __int16 *)(v33 + v30 + 2);
          v56 = (unsigned __int16 *)(v33 + v30 + 4);
          v57 = v37;
        }
        v58 = *v56;
        v59 = *v55;
        v60 = *v57;
        if ((v34 & 1) != 0)
        {
          v63 = v43 + v47 + v58;
          v64 = v41 + v49 + v52 + v60;
          v65 = v42 + v48 + v59;
          v30 = v200;
          v61 = (int)(1023
                    * ((unint64_t)(0x1FFFFFFFFD59ALL * v53
                                        + ((v63 + v54) << 14)
                                        + 0x1FFFFFFFFD59ALL * v65
                                        + 0x1FFFFFFFFEA68 * v64
                                        + 0x100000000) >> 17)
                    + 0x7FFF)
              / 0xFFFF;
          LODWORD(v65) = (unint64_t)(2147516417
                                          * (int)(1023
                                                * ((unint64_t)(0x1FFFFFFFFF599 * v54
                                                                    + 0x1FFFFFFFFCA69 * v53
                                                                    + 0x1FFFFFFFFF599 * v63
                                                                    + 0x1FFFFFFFFCA69 * v65
                                                                    + (v64 << 14)
                                                                    + 0x100000000) >> 17)
                                                + 0x7FFF)) >> 32;
          v62 = ((int)v65 >> 15) + (v65 >> 31);
        }
        else
        {
          v61 = 0;
          v62 = 0;
        }
        *v40 = *v40 & ~(1023 << v50) | (((268439553
                                                      * (unint64_t)(1023
                                                                         * ((19235 * v59
                                                                                         + 3736 * v58
                                                                                         + 9798 * v60
                                                                                         + 0x4000) >> 15)
                                                                         + 0x7FFF)) >> 32) >> 12 << v50);
        if (v35 == 2)
          v35 = 0;
        else
          ++v35;
        if ((v34 & 1) != 0)
        {
          v66 = *((unsigned __int8 *)&v203 + v202);
          *v25 = *v25 & ~(1023 << v66) | (v61 << v66);
          v67 = (_DWORD *)((char *)v25 + ((v66 >> 2) & 0x3C));
          if (v202 == 2)
            v68 = 0;
          else
            v68 = v202 + 1;
          v69 = *((unsigned __int8 *)&v203 + v68);
          *v67 = *v67 & ~(1023 << v69) | (v62 << v69);
          v25 = (unsigned int *)((char *)v67 + ((v69 >> 2) & 0x3C));
          if (v68 == 2)
            v70 = 0;
          else
            v70 = v68 + 1;
          v202 = v70;
        }
        v38 += 4;
        v36 = &v51[v50 >> 4];
        v37 += 4;
        ++v34;
        v33 += 8;
        v27 = &v40[v50 >> 4];
        v29 += 8;
      }
      while (v23 != v34);
      if (v23 >= v195)
      {
        v136 = (unsigned __int16 *)(v29 + v30);
        v137 = (unsigned __int16 *)(v33 + v30);
        v72 = v23;
        v138 = v194;
        v22 = v177;
      }
      else
      {
        v201 = 0;
        v174 = v50 >> 2;
        v175 = v40;
        v71 = (v50 >> 2) & 0x3C;
        v176 = v51;
        v191 = (char *)v51 + v71;
        v192 = (char *)v40 + v71;
        v72 = v23;
        do
        {
          v199 = v30;
          v73 = (unsigned __int16 *)(v33 + v30);
          v74 = (unsigned __int16 *)(v29 + v30);
          v75 = *(unsigned __int16 *)(v29 + v30);
          v76 = *(unsigned __int16 *)(v29 + v30 + 2);
          v77 = *(unsigned __int16 *)(v29 + v30 + 4);
          v78 = *(unsigned __int16 *)(v29 + v30 + 8);
          v79 = *(unsigned __int16 *)(v29 + v30 + 10);
          v80 = *(unsigned __int16 *)(v29 + v30 + 12);
          v81 = *(unsigned __int16 *)(v33 + v30);
          v82 = *(unsigned __int16 *)(v33 + v30 + 2);
          v83 = *(unsigned __int16 *)(v33 + v30 + 4);
          v84 = 1023 * ((19235 * v76 + 9798 * v75 + 3736 * v77 + 0x4000) >> 15);
          v85 = *(unsigned __int16 *)(v33 + v30 + 8);
          v86 = *(unsigned __int16 *)(v33 + v30 + 10);
          v87 = *(unsigned __int16 *)(v33 + v30 + 12);
          v196 = 1023 * ((19235 * v86 + 9798 * v85 + 3736 * v87 + 0x4000) >> 15);
          v197 = 1023 * ((19235 * v82 + 9798 * v81 + 3736 * v83 + 0x4000) >> 15);
          v88 = v80 + v77 + v83;
          v89 = v78 + v75;
          LODWORD(v78) = 1023 * ((19235 * v79 + 9798 * v78 + 3736 * v80 + 0x4000) >> 15) + 0x7FFF;
          v90 = v89 + v81 + v85;
          v91 = v79 + v76 + v82;
          v92 = 268439553 * (v84 + 0x7FFF);
          v93 = (unint64_t)(0x1FFFFFFFFD59ALL * v86
                                 - 10854 * v91
                                 + 0x1FFFFFFFFEA68 * v90
                                 + ((v88 + v87) << 14)
                                 + 0x100000000) >> 17;
          v94 = 0x1FFFFFFFFCA69 * v86 - 13719 * v91 + 0x1FFFFFFFFF599 * v88 + 0x1FFFFFFFFF599 * v87;
          v95 = 1023 * v93;
          v96 = v94 + (v90 << 14) + 0x100000000;
          v97 = v74[8];
          LODWORD(v93) = v74[9];
          v98 = v74[10];
          v99 = v92 >> 44;
          v100 = v74[12];
          LODWORD(v87) = v74[13];
          v101 = v74[14];
          v102 = 1023 * ((19235 * v87 + 9798 * v100 + 3736 * v101 + 0x4000) >> 15);
          v103 = v73[8];
          v104 = v73[9];
          v105 = v73[10];
          v106 = (((268439553 * (unint64_t)v78) >> 32) >> 2) & 0x7FFFC00 | v99;
          v107 = 1023 * ((19235 * v104 + 9798 * v103 + 3736 * v105 + 0x4000) >> 15);
          v108 = v73[12];
          v109 = v73[13];
          v110 = 1023 * (v96 >> 17);
          v111 = v73[14];
          v112 = 1023 * ((19235 * v109 + 9798 * v108 + 3736 * v111 + 0x4000) >> 15);
          v198 = v101 + v98 + v105;
          v113 = &v192[v201];
          v114 = (unsigned int *)&v191[v201];
          v115 = v95 + 0x7FFF;
          v116 = ((268439553 * (unint64_t)(v107 + 0x7FFF)) >> 32) >> 12;
          v117 = v110 + 0x7FFF;
          v118 = v100 + v97 + v103 + v108;
          v119 = v87 + v93 + v104;
          v120 = v106 | (((268439553
                                       * (unint64_t)(1023
                                                          * ((19235 * v93
                                                                          + 9798 * v97
                                                                          + 3736 * v98
                                                                          + 0x4000) >> 15)
                                                          + 0x7FFF)) >> 32) >> 12 << 20);
          LODWORD(v108) = (((268439553 * (unint64_t)(v196 + 0x7FFF)) >> 32) >> 2) & 0x7FFFC00 | (((268439553 * (unint64_t)(v197 + 0x7FFF)) >> 32) >> 12) | (v116 << 20);
          v121 = v74[16];
          LODWORD(v86) = v74[17];
          v122 = v74[18];
          *v114 = v120;
          *(_DWORD *)v113 = v108;
          v123 = v74[20];
          LODWORD(v97) = v74[21];
          v124 = v74[22];
          v125 = (((268439553
                                * (unint64_t)(1023
                                                   * ((19235 * v86 + 9798 * v121 + 3736 * v122 + 0x4000) >> 15)
                                                   + 0x7FFF)) >> 32) >> 2) & 0x7FFFC00 | (((268439553 * (unint64_t)(v102 + 0x7FFF)) >> 32) >> 12) | (((268439553 * (unint64_t)(1023 * ((19235 * v97 + 9798 * v123 + 3736 * v124 + 0x4000) >> 15) + 0x7FFF)) >> 32) >> 12 << 20);
          v126 = v73[16];
          v127 = v73[17];
          v128 = v73[18];
          v129 = &v25[v201 / 4];
          *v129 = (v115 / 0xFFFF) | (((2147516417u * (unint64_t)v117) >> 32) >> 5) & 0x7FFFC00 | (((1023 * ((unint64_t)(0x1FFFFFFFFD59ALL * v109 - 10854 * v119 + 0x1FFFFFFFFEA68 * v118 + ((v198 + v111) << 14) + 0x100000000) >> 17) + 0x7FFF) / 0xFFFF) << 20);
          v130 = v73[20];
          v131 = v73[21];
          v114[1] = v125;
          v132 = v73[22];
          *((_DWORD *)v113 + 1) = (((268439553
                                                 * (unint64_t)(1023
                                                                    * ((19235 * v127
                                                                                    + 9798 * v126
                                                                                    + 3736 * v128
                                                                                    + 0x4000) >> 15)
                                                                    + 0x7FFF)) >> 32) >> 2) & 0x7FFFC00 | (((268439553 * (unint64_t)(v112 + 0x7FFF)) >> 32) >> 12) | (((268439553 * (unint64_t)(1023 * ((19235 * v131 + 9798 * v130 + 3736 * v132 + 0x4000) >> 15) + 0x7FFF)) >> 32) >> 12 << 20);
          v133 = v124 + v122 + v128;
          v134 = v123 + v121 + v126 + v130;
          v129[1] = ((1023
                    * ((unint64_t)(-2663 * (int)v198
                                                      - 13719 * v119
                                                      + 0x1FFFFFFFFCA69 * v109
                                                      + 0x1FFFFFFFFF599 * v111
                                                      + (v118 << 14)
                                                      + 0x100000000) >> 17)
                    + 0x7FFF)
                   / 0xFFFF) & 0xFFFFF | ((unsigned __int16)((1023
                                                            * ((unint64_t)(0x1FFFFFFFFCA69 * v131
                                                                                              - 13719
                                                                                              * ((int)v97
                                                                                               + (int)v86
                                                                                               + v127)
                                                                                              + 0x1FFFFFFFFF599 * v133
                                                                                              + 0x1FFFFFFFFF599 * v132
                                                                                              + (v134 << 14)
                                                                                              + 0x100000000) >> 17)
                                                            + 0x7FFF)
                                                           / 0xFFFF) << 20) | (((2147516417u
                                                                                             * (unint64_t)(1023 * ((unint64_t)(0x1FFFFFFFFD59ALL * v131 - 10854 * ((int)v97 + (int)v86 + v127) + 0x1FFFFFFFFEA68 * v134 + ((v133 + v132) << 14) + 0x100000000) >> 17) + 0x7FFF)) >> 32) >> 5) & 0x7FFFC00;
          v72 += 6;
          v201 += 8;
          v30 = v199 + 48;
        }
        while (v72 < v195);
        v23 = v193;
        v25 = (_DWORD *)((char *)v25 + v201);
        v135 = v174 & 0x3C;
        v27 = (unsigned int *)((char *)v175 + v135 + v201);
        v36 = (unsigned int *)((char *)v176 + v135 + v201);
        v136 = (unsigned __int16 *)(v29 + v30);
        v137 = (unsigned __int16 *)(v33 + v30);
        v138 = v194;
        v22 = v177;
        v30 = v200;
      }
      if (v72 < v138)
      {
        v139 = 0;
        v140 = v173;
        v141 = v137;
        v142 = v136;
        do
        {
          if ((v72 & 1) != 0)
          {
            v148 = &v136[v139 - 4];
            v146 = v142 - 3;
            v147 = v142 - 2;
            v143 = v136[v139];
            v144 = v136[v139 + 1];
            v145 = v136[v139 + 2];
          }
          else
          {
            v143 = 0;
            v144 = 0;
            v145 = 0;
            v146 = &v136[v139 + 1];
            v147 = &v136[v139 + 2];
            v148 = v142;
          }
          v149 = *v147;
          v150 = *v146;
          v151 = *v148;
          v152 = *((unsigned __int8 *)&v203 + v140);
          *v36 = (((268439553
                                * (unint64_t)(1023
                                                   * ((19235 * v150 + 3736 * v149 + 9798 * v151 + 0x4000) >> 15)
                                                   + 0x7FFF)) >> 32) >> 12 << v152) | *v36 & ~(1023 << v152);
          if ((v72 & 1) != 0)
          {
            v158 = &v137[v139 - 4];
            v156 = v141 - 3;
            v157 = v141 - 2;
            v153 = v137[v139];
            v154 = v137[v139 + 1];
            v155 = v137[v139 + 2];
          }
          else
          {
            v153 = 0;
            v154 = 0;
            v155 = 0;
            v156 = &v137[v139 + 1];
            v157 = &v137[v139 + 2];
            v158 = v141;
          }
          v159 = *v157;
          v160 = *v156;
          v161 = *v158;
          if ((v72 & 1) != 0)
          {
            v164 = v145 + v149 + v159;
            v165 = v143 + v151 + v153 + v161;
            v166 = v144 + v150 + v160;
            v162 = (1023
                  * ((unint64_t)(0x1FFFFFFFFD59ALL * v154
                                                    + ((v164 + v155) << 14)
                                                    + 0x1FFFFFFFFD59ALL * v166
                                                    + 0x1FFFFFFFFEA68 * v165
                                                    + 0x100000000) >> 17)
                  + 0x7FFF)
                 / 0xFFFF;
            v163 = (1023
                  * ((unint64_t)(0x1FFFFFFFFF599 * v155
                                                    + 0x1FFFFFFFFCA69 * v154
                                                    + 0x1FFFFFFFFF599 * v164
                                                    + 0x1FFFFFFFFCA69 * v166
                                                    + (v165 << 14)
                                                    + 0x100000000) >> 17)
                  + 0x7FFF)
                 / 0xFFFF;
          }
          else
          {
            v162 = 0;
            v163 = 0;
          }
          v23 = v193;
          v30 = v200;
          *v27 = *v27 & ~(1023 << v152) | (((268439553
                                                         * (unint64_t)(1023
                                                                            * ((19235 * v160
                                                                                            + 3736 * v159
                                                                                            + 9798 * v161
                                                                                            + 0x4000) >> 15)
                                                                            + 0x7FFF)) >> 32) >> 12 << v152);
          if (v140 == 2)
            v140 = 0;
          else
            ++v140;
          if ((v72 & 1) != 0)
          {
            v167 = *((unsigned __int8 *)&v203 + v202);
            *v25 = *v25 & ~(1023 << v167) | (v162 << v167);
            v168 = (_DWORD *)((char *)v25 + ((v167 >> 2) & 0x3C));
            if (v202 == 2)
              v169 = 0;
            else
              v169 = v202 + 1;
            v170 = *((unsigned __int8 *)&v203 + v169);
            *v168 = *v168 & ~(1023 << v170) | (v163 << v170);
            v25 = (unsigned int *)((char *)v168 + ((v170 >> 2) & 0x3C));
            if (v169 == 2)
              v171 = 0;
            else
              v171 = v169 + 1;
            v202 = v171;
          }
          v142 += 4;
          v36 += v152 >> 4;
          v141 += 4;
          ++v72;
          v139 += 4;
          v27 += v152 >> 4;
        }
        while (v194 != v72);
      }
      v31 = &v185[v181];
      v32 = &v184[v181];
      v26 = v188 + 4 * v180;
      v21 = v190 + 1;
      v27 = &v187[v180];
      v33 = v183 + v178;
      v29 = v186 + v178;
      v25 = &v189[v179];
    }
    while (v190 + 1 != v182);
  }
  return 0;
}

uint64_t vt_Copy_x44p_x444(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _WORD *v12;
  uint64_t v13;
  _WORD *v14;
  unsigned int v15;

  if (!a1)
    return 4294954387;
  if (a2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v9 = a5[1];
    v10 = *a4;
    v11 = *a6;
    v12 = (_WORD *)a6[1];
    do
    {
      v13 = 0;
      v14 = v12;
      do
      {
        v15 = *(_DWORD *)(v10 + 4 * v13);
        *(_WORD *)(v11 + 2 * v13) = v15 & 0x3FF;
        *v14 = (v15 >> 10) & 0x3FF;
        v14[1] = (v15 >> 20) & 0x3FF;
        ++v13;
        v14 += 2;
      }
      while (a1 != v13);
      v10 += v7;
      v11 += v8;
      v12 = (_WORD *)((char *)v12 + v9);
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

vImage_Error vt_VImage_Setup_x444_w30r(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, uint64_t (**a9)(), uint64_t a10, void (**a11)(void **a1))
{
  vImage_YpCbCrToARGB *v17;
  const vImage_YpCbCrToARGBMatrix **v18;
  const vImage_YpCbCrToARGBMatrix *DefaultYpCbCrToARGBMatrixWithDimensionHint;
  int v20;
  vImage_Error result;
  __int128 v22;
  int v23;
  vImage_YpCbCrPixelRange pixelRange;

  v22 = 0uLL;
  v23 = 0;
  v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_1928DFCE0;
  *(_OWORD *)&pixelRange.YpMax = xmmword_1928DFCD0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      v22 = xmmword_1928DFC00;
      v20 = 1072585656;
    }
    else if (FigCFEqual())
    {
      v22 = xmmword_1928DFC10;
      v20 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDA8];
        goto LABEL_3;
      }
      v22 = xmmword_1928DFC20;
      v20 = 1072746935;
    }
    v23 = v20;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v22;
    goto LABEL_11;
  }
  v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E0C8BDB0];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v18;
LABEL_11:
  result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage444AYpCbCr16|kvImage422YpCbYpCr8, kvImageARGB16Q12|kvImageARGB16U, 0);
  *(_QWORD *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_x444_w30r;
  *a11 = vt_VImage_Cleanup_x444_w30r;
  *a8 = v17;
  return result;
}

uint64_t vt_Copy_x444_y416(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  _WORD *v22;
  __int16 v23;
  __int16 v24;
  __int16 v25;

  v8 = a2[2];
  v9 = a2[3];
  if (v8 >= a6[2])
    v8 = a6[2];
  if (v9 >= a6[3])
    v9 = a6[3];
  if (v9)
  {
    v10 = 0;
    v11 = *a4;
    v12 = a4[1];
    v13 = *a8;
    v14 = *a7 + *a8 * a6[5] + 2 * a6[4];
    v16 = a2[4];
    v15 = a2[5];
    v17 = *a3 + *a4 * v15;
    v18 = a3[1] + v12 * v15 + 4 * v16;
    v19 = v17 + 2 * v16;
    do
    {
      if (v8)
      {
        v20 = 0;
        for (i = 0; i != v8; ++i)
        {
          v22 = (_WORD *)(v14 + 2 * v20);
          v23 = *(_WORD *)(v18 + v20) & 0xFFC0;
          v24 = *(_WORD *)(v18 + v20 + 2) & 0xFFC0;
          v25 = *(_WORD *)(v19 + 2 * i) & 0xFFC0;
          *v22 = -1;
          v22[1] = v25;
          v22[2] = v23;
          v22[3] = v24;
          v20 += 4;
        }
      }
      v19 += v11;
      v14 += v13;
      v18 += v12;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_x444_y408(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  _BYTE *v22;
  char v23;
  char v24;
  char v25;

  v8 = a2[2];
  v9 = a2[3];
  if (v8 >= a6[2])
    v8 = a6[2];
  if (v9 >= a6[3])
    v9 = a6[3];
  if (v9)
  {
    v10 = 0;
    v11 = *a4;
    v12 = a4[1];
    v13 = *a8;
    v14 = *a7 + *a8 * a6[5] + a6[4];
    v16 = a2[4];
    v15 = a2[5];
    v17 = *a3 + *a4 * v15;
    v18 = a3[1] + v12 * v15 + 4 * v16;
    v19 = v17 + 2 * v16;
    do
    {
      if (v8)
      {
        v20 = 0;
        for (i = 0; i != v8; ++i)
        {
          v22 = (_BYTE *)(v14 + v20);
          v23 = *(_BYTE *)(v18 + v20 + 1);
          v24 = *(_BYTE *)(v18 + v20 + 3);
          v25 = *(_BYTE *)(v19 + 2 * i + 1);
          *v22 = -1;
          v22[1] = v25;
          v22[2] = v23;
          v22[3] = v24;
          v20 += 4;
        }
      }
      v19 += v11;
      v14 += v13;
      v18 += v12;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_CopyAvg_x444_v216(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t i;
  _WORD *v22;
  _WORD *v23;
  unsigned int v24;
  __int16 v25;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a8;
    v14 = *a4;
    v15 = a4[1];
    v16 = *a7 + *a8 * *(_QWORD *)(a6 + 40) + 2 * v10;
    v17 = *(_QWORD *)(a2 + 40);
    v18 = a3[1] + v15 * v17 + 4 * v9;
    v19 = *a3 + *a4 * v17 + 2 * v9;
    do
    {
      if (v11)
      {
        v20 = 0;
        for (i = 0; i < v11; i += 2)
        {
          v22 = (_WORD *)(v16 + v20);
          v23 = (_WORD *)(v19 + 2 * i);
          v24 = ((*(_WORD *)(v18 + v20 + 6) & 0xFFC0) + (*(_WORD *)(v18 + v20 + 2) & 0xFFC0u)) >> 1;
          v25 = *v23 & 0xFFC0;
          LOWORD(v23) = v23[1] & 0xFFC0;
          *v22 = ((*(_WORD *)(v18 + v20 + 4) & 0xFFC0) + (*(_WORD *)(v18 + v20) & 0xFFC0u)) >> 1;
          v22[1] = v25;
          v22[2] = v24;
          v22[3] = (_WORD)v23;
          v20 += 8;
        }
      }
      v19 += v14;
      v16 += v13;
      v18 += v15;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_x444_v216(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t i;
  _WORD *v22;
  _WORD *v23;
  __int16 v24;
  __int16 v25;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a8;
    v14 = *a4;
    v15 = a4[1];
    v16 = *a7 + *a8 * *(_QWORD *)(a6 + 40) + 2 * v10;
    v17 = *(_QWORD *)(a2 + 40);
    v18 = a3[1] + v15 * v17 + 4 * v9;
    v19 = *a3 + *a4 * v17 + 2 * v9;
    do
    {
      if (v11)
      {
        v20 = 0;
        for (i = 0; i < v11; i += 2)
        {
          v22 = (_WORD *)(v16 + v20);
          v23 = (_WORD *)(v19 + 2 * i);
          v24 = *(_WORD *)(v18 + v20 + 2) & 0xFFC0;
          v25 = *v23 & 0xFFC0;
          LOWORD(v23) = v23[1] & 0xFFC0;
          *v22 = *(_WORD *)(v18 + v20) & 0xFFC0;
          v22[1] = v25;
          v22[2] = v24;
          v22[3] = (_WORD)v23;
          v20 += 8;
        }
      }
      v19 += v14;
      v16 += v13;
      v18 += v15;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_x444_2vuy(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  unsigned int v24;
  char v25;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a8;
    v14 = *a4;
    v15 = a4[1];
    v16 = (_BYTE *)(*a7 + *a8 * *(_QWORD *)(a6 + 40) + v10);
    v17 = *(_QWORD *)(a2 + 40);
    v18 = a3[1] + v15 * v17 + 4 * v9;
    v19 = *a3 + *a4 * v17 + 2 * v9;
    do
    {
      if (v11)
      {
        v20 = 0;
        v21 = 0;
        v22 = v16;
        do
        {
          v23 = v19 + 2 * v21;
          v24 = (*(unsigned __int8 *)(v18 + v20 + 3) + *(unsigned __int8 *)(v18 + v20 + 7) + 1) >> 1;
          v25 = *(_BYTE *)(v23 + 1);
          LOBYTE(v23) = *(_BYTE *)(v23 + 3);
          *v22 = (*(unsigned __int8 *)(v18 + v20 + 1) + *(unsigned __int8 *)(v18 + v20 + 5) + 1) >> 1;
          v22[1] = v25;
          v22[2] = v24;
          v22[3] = v23;
          v22 += 4;
          v21 += 2;
          v20 += 8;
        }
        while (v21 < v11);
      }
      v19 += v14;
      v16 += v13;
      v18 += v15;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_x444_2vuy(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  char v24;
  char v25;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a8;
    v14 = *a4;
    v15 = a4[1];
    v16 = (_BYTE *)(*a7 + *a8 * *(_QWORD *)(a6 + 40) + v10);
    v17 = *(_QWORD *)(a2 + 40);
    v18 = a3[1] + v15 * v17 + 4 * v9;
    v19 = *a3 + *a4 * v17 + 2 * v9;
    do
    {
      if (v11)
      {
        v20 = 0;
        v21 = 0;
        v22 = v16;
        do
        {
          v23 = v19 + 2 * v21;
          v24 = *(_BYTE *)(v18 + v20 + 3);
          v25 = *(_BYTE *)(v23 + 1);
          LOBYTE(v23) = *(_BYTE *)(v23 + 3);
          *v22 = *(_BYTE *)(v18 + v20 + 1);
          v22[1] = v25;
          v22[2] = v24;
          v22[3] = v23;
          v22 += 4;
          v21 += 2;
          v20 += 8;
        }
        while (v21 < v11);
      }
      v19 += v14;
      v16 += v13;
      v18 += v15;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_Copy_x444_s4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _WORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _WORD *v32;
  _WORD *v33;
  __int16 v34;
  unint64_t v35;
  unint64_t v36;
  __int16 v37;
  __int16 v38;
  __int16 v39;
  __int16 v40;
  unint64_t v41;
  uint64_t v42;
  _WORD *v43;
  _WORD *v44;
  __int16 v45;
  unint64_t v46;
  unint64_t v47;
  __int16 v48;
  __int16 v49;
  __int16 v50;
  __int16 v51;
  __int16 v52;
  __int16 v53;
  unint64_t v54;
  __int16 v55;
  __int16 v56;
  __int16 v57;
  __int16 v58;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a2[3];
  v12 = a4[1];
  v13 = (_WORD *)(a3[1] + v12 * v8 + 4 * v9);
  v14 = a6[4];
  v15 = a6[5];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (v11 >= a6[3])
    v11 = a6[3];
  if (v11)
  {
    v18 = 0;
    v19 = *a4;
    v20 = *a8;
    v21 = a8[2];
    v22 = a7[2] + v21 * v15 + 2 * v14;
    v23 = *a7 + *a8 * v15 + 2 * v14;
    v24 = *a3 + v19 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
        {
          *(_WORD *)(v22 + 2 * i) = -1;
          *(_WORD *)(v23 + 2 * i) = *(_WORD *)(v24 + 2 * i) & 0xFFC0;
        }
      }
      v24 += v19;
      v23 += v20;
      v22 += v21;
      ++v18;
    }
    while (v18 != v11);
  }
  v26 = v8 & 1;
  if (v11 >= v26)
    v27 = v8 & 1;
  else
    v27 = 0;
  v28 = v9;
  v29 = v9 & 1;
  if (v10 >= v29)
    v30 = v29;
  else
    v30 = 0;
  v31 = v10 - v30;
  if ((v8 & 1) != 0)
  {
    if ((v28 & 1) != 0)
    {
      v34 = v13[1] & 0xFFC0;
      v32 = v13 + 2;
      *v17 = *v13 & 0xFFC0;
      v17[1] = v34;
      v33 = v17 + 2;
    }
    else
    {
      v32 = v13;
      v33 = v17;
    }
    if (v10 == v30)
    {
      v35 = 0;
    }
    else
    {
      v36 = v10 - v30;
      do
      {
        v37 = *v32 & 0xFFC0;
        v38 = v32[1] & 0xFFC0;
        v32 += 2;
        *v33 = v37;
        v33[1] = v38;
        v33 += 2;
        --v36;
      }
      while (v36);
      v35 = v10 - v30;
    }
    if (v35 + v29 < v10)
    {
      v39 = *v32 & 0xFFC0;
      v40 = v32[1] & 0xFFC0;
      *v33 = v39;
      v33[1] = v40;
    }
    v13 = (_WORD *)((char *)v13 + v12);
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v11 == v27)
  {
    v41 = 0;
  }
  else
  {
    v42 = 0;
    v41 = v11 - v27;
    do
    {
      v43 = v13;
      v44 = v17;
      if ((v28 & 1) != 0)
      {
        v45 = v13[1] & 0xFFC0;
        v43 = v13 + 2;
        *v17 = *v13 & 0xFFC0;
        v17[1] = v45;
        v44 = v17 + 2;
      }
      if (v10 == v30)
      {
        v46 = 0;
      }
      else
      {
        v47 = v10 - v30;
        do
        {
          v48 = *v43 & 0xFFC0;
          v49 = v43[1] & 0xFFC0;
          v43 += 2;
          *v44 = v48;
          v44[1] = v49;
          v44 += 2;
          --v47;
        }
        while (v47);
        v46 = v10 - v30;
      }
      if (v46 + v29 < v10)
      {
        v50 = *v43 & 0xFFC0;
        v51 = v43[1] & 0xFFC0;
        *v44 = v50;
        v44[1] = v51;
      }
      v13 = (_WORD *)((char *)v13 + v12);
      v17 = (_WORD *)((char *)v17 + v16);
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v26 < v11)
  {
    if ((v28 & 1) != 0)
    {
      v52 = *v13 & 0xFFC0;
      v53 = v13[1] & 0xFFC0;
      v13 += 2;
      *v17 = v52;
      v17[1] = v53;
      v17 += 2;
    }
    if (v10 == v30)
    {
      v31 = 0;
    }
    else
    {
      v54 = v10 - v30;
      do
      {
        v55 = *v13 & 0xFFC0;
        v56 = v13[1] & 0xFFC0;
        v13 += 2;
        *v17 = v55;
        v17[1] = v56;
        v17 += 2;
        --v54;
      }
      while (v54);
    }
    if (v31 + v29 < v10)
    {
      v57 = *v13 & 0xFFC0;
      v58 = v13[1] & 0xFFC0;
      *v17 = v57;
      v17[1] = v58;
    }
  }
  return 0;
}

uint64_t vt_Copy_x444_sv44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _WORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _WORD *v30;
  _WORD *v31;
  __int16 v32;
  unint64_t v33;
  unint64_t v34;
  __int16 v35;
  __int16 v36;
  __int16 v37;
  __int16 v38;
  unint64_t v39;
  uint64_t v40;
  _WORD *v41;
  _WORD *v42;
  __int16 v43;
  unint64_t v44;
  unint64_t v45;
  __int16 v46;
  __int16 v47;
  __int16 v48;
  __int16 v49;
  __int16 v50;
  __int16 v51;
  unint64_t v52;
  __int16 v53;
  __int16 v54;
  __int16 v55;
  __int16 v56;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a2[3];
  v12 = a4[1];
  v13 = (_WORD *)(a3[1] + v12 * v8 + 4 * v9);
  v14 = a6[4];
  v15 = a6[5];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (v11 >= a6[3])
    v11 = a6[3];
  if (v11)
  {
    v18 = 0;
    v19 = *a4;
    v20 = *a8;
    v21 = *a7 + *a8 * v15 + 2 * v14;
    v22 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
          *(_WORD *)(v21 + 2 * i) = *(_WORD *)(v22 + 2 * i) & 0xFFC0;
      }
      v22 += v19;
      v21 += v20;
      ++v18;
    }
    while (v18 != v11);
  }
  v24 = v8 & 1;
  if (v11 >= v24)
    v25 = v8 & 1;
  else
    v25 = 0;
  v26 = v9;
  v27 = v9 & 1;
  if (v10 >= v27)
    v28 = v27;
  else
    v28 = 0;
  v29 = v10 - v28;
  if ((v8 & 1) != 0)
  {
    if ((v26 & 1) != 0)
    {
      v32 = v13[1] & 0xFFC0;
      v30 = v13 + 2;
      *v17 = *v13 & 0xFFC0;
      v17[1] = v32;
      v31 = v17 + 2;
    }
    else
    {
      v30 = v13;
      v31 = v17;
    }
    if (v10 == v28)
    {
      v33 = 0;
    }
    else
    {
      v34 = v10 - v28;
      do
      {
        v35 = *v30 & 0xFFC0;
        v36 = v30[1] & 0xFFC0;
        v30 += 2;
        *v31 = v35;
        v31[1] = v36;
        v31 += 2;
        --v34;
      }
      while (v34);
      v33 = v10 - v28;
    }
    if (v33 + v27 < v10)
    {
      v37 = *v30 & 0xFFC0;
      v38 = v30[1] & 0xFFC0;
      *v31 = v37;
      v31[1] = v38;
    }
    v13 = (_WORD *)((char *)v13 + v12);
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v11 == v25)
  {
    v39 = 0;
  }
  else
  {
    v40 = 0;
    v39 = v11 - v25;
    do
    {
      v41 = v13;
      v42 = v17;
      if ((v26 & 1) != 0)
      {
        v43 = v13[1] & 0xFFC0;
        v41 = v13 + 2;
        *v17 = *v13 & 0xFFC0;
        v17[1] = v43;
        v42 = v17 + 2;
      }
      if (v10 == v28)
      {
        v44 = 0;
      }
      else
      {
        v45 = v10 - v28;
        do
        {
          v46 = *v41 & 0xFFC0;
          v47 = v41[1] & 0xFFC0;
          v41 += 2;
          *v42 = v46;
          v42[1] = v47;
          v42 += 2;
          --v45;
        }
        while (v45);
        v44 = v10 - v28;
      }
      if (v44 + v27 < v10)
      {
        v48 = *v41 & 0xFFC0;
        v49 = v41[1] & 0xFFC0;
        *v42 = v48;
        v42[1] = v49;
      }
      v13 = (_WORD *)((char *)v13 + v12);
      v17 = (_WORD *)((char *)v17 + v16);
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v24 < v11)
  {
    if ((v26 & 1) != 0)
    {
      v50 = *v13 & 0xFFC0;
      v51 = v13[1] & 0xFFC0;
      v13 += 2;
      *v17 = v50;
      v17[1] = v51;
      v17 += 2;
    }
    if (v10 == v28)
    {
      v29 = 0;
    }
    else
    {
      v52 = v10 - v28;
      do
      {
        v53 = *v13 & 0xFFC0;
        v54 = v13[1] & 0xFFC0;
        v13 += 2;
        *v17 = v53;
        v17[1] = v54;
        v17 += 2;
        --v52;
      }
      while (v52);
    }
    if (v29 + v27 < v10)
    {
      v55 = *v13 & 0xFFC0;
      v56 = v13[1] & 0xFFC0;
      *v17 = v55;
      v17[1] = v56;
    }
  }
  return 0;
}

uint64_t vt_Copy_x444_sf44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned __int16 *v32;
  _WORD *v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  int v37;
  int v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  int v45;
  int v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  unint64_t v52;
  uint64_t v53;
  unsigned __int16 *v54;
  _WORD *v55;
  unsigned int v56;
  int v57;
  unsigned int v58;
  int v59;
  int v60;
  int v61;
  unint64_t v62;
  unint64_t v63;
  unsigned int v64;
  int v65;
  unsigned int v66;
  int v67;
  int v68;
  unsigned int v69;
  int v70;
  unsigned int v71;
  int v72;
  int v73;
  int v74;
  unsigned int v75;
  int v76;
  unsigned int v77;
  unsigned int v78;
  int v79;
  unint64_t v80;
  unsigned int v81;
  int v82;
  unsigned int v83;
  int v84;
  int v85;
  unsigned int v86;
  int v87;
  unsigned int v88;
  unsigned int v89;
  int v90;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a2[3];
  v12 = a4[1];
  v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 4 * v9);
  v14 = a6[4];
  v15 = a6[5];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (v11 >= a6[3])
    v18 = a6[3];
  else
    v18 = v11;
  if (v18)
  {
    v19 = 0;
    v20 = *a4;
    v21 = *a8;
    v22 = *a7 + *a8 * v15 + 2 * v14;
    v23 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
        {
          v25 = *(unsigned __int16 *)(v23 + 2 * i) >> 6;
          if (v25 >= 0x3AC)
            v25 = 940;
          if (v25 <= 0x40)
            v25 = 64;
          *(_WORD *)(v22 + 2 * i) = (-4194240 - v25 + (v25 << 16)) / 0x36C;
        }
      }
      v23 += v20;
      v22 += v21;
      ++v19;
    }
    while (v19 != v18);
  }
  v26 = v8 & 1;
  if (v18 >= v26)
    v27 = v8 & 1;
  else
    v27 = 0;
  v28 = v9;
  v29 = v9 & 1;
  if (v10 >= v29)
    v30 = v29;
  else
    v30 = 0;
  v31 = v10 - v30;
  if ((v8 & 1) != 0)
  {
    if ((v28 & 1) != 0)
    {
      v34 = *v13;
      v35 = v34 >> 6;
      v36 = v13[1];
      if (v34 >> 6 >= 0x3C0)
        v35 = 960;
      if (v34 >= 0x1000)
        v37 = v35;
      else
        v37 = 64;
      if (v36 >> 6 >= 0x3C0)
        v38 = 960;
      else
        v38 = v36 >> 6;
      if (v36 >= 0x1000)
        v39 = v38;
      else
        v39 = 64;
      v32 = v13 + 2;
      *v17 = (613566757 * (unint64_t)((-4194240 - v37 + (v37 << 16)) >> 7)) >> 32;
      v17[1] = (613566757 * (unint64_t)((-4194240 - v39 + (v39 << 16)) >> 7)) >> 32;
      v33 = v17 + 2;
    }
    else
    {
      v32 = v13;
      v33 = v17;
    }
    if (v10 == v30)
    {
      v40 = 0;
    }
    else
    {
      v41 = v10 - v30;
      do
      {
        v42 = *v32;
        v43 = v42 >> 6;
        v44 = v32[1];
        if (v42 >> 6 >= 0x3C0)
          v43 = 960;
        if (v42 >= 0x1000)
          v45 = v43;
        else
          v45 = 64;
        if (v44 >> 6 >= 0x3C0)
          v46 = 960;
        else
          v46 = v44 >> 6;
        if (v44 < 0x1000)
          v46 = 64;
        v32 += 2;
        *v33 = (613566757 * (unint64_t)((-4194240 - v45 + (v45 << 16)) >> 7)) >> 32;
        v33[1] = (613566757 * (unint64_t)((-4194240 - v46 + (v46 << 16)) >> 7)) >> 32;
        v33 += 2;
        --v41;
      }
      while (v41);
      v40 = v10 - v30;
    }
    if (v40 + v29 < v10)
    {
      v47 = *v32;
      v48 = v47 >> 6;
      v49 = v32[1];
      v50 = v49 >> 6;
      if (v47 >> 6 >= 0x3C0)
        v48 = 960;
      if (v47 < 0x1000)
        v48 = 64;
      if (v50 >= 0x3C0)
        v50 = 960;
      if (v49 >= 0x1000)
        v51 = v50;
      else
        v51 = 64;
      *v33 = (613566757 * (unint64_t)((-4194240 - v48 + (v48 << 16)) >> 7)) >> 32;
      v33[1] = (613566757 * (unint64_t)((-4194240 - v51 + (v51 << 16)) >> 7)) >> 32;
    }
    v13 = (unsigned __int16 *)((char *)v13 + v12);
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v18 == v27)
  {
    v52 = 0;
  }
  else
  {
    v53 = 0;
    v52 = v18 - v27;
    do
    {
      v54 = v13;
      v55 = v17;
      if ((v28 & 1) != 0)
      {
        v56 = *v13;
        v57 = v56 >> 6;
        v58 = v13[1];
        if (v56 >> 6 >= 0x3C0)
          v57 = 960;
        if (v56 >= 0x1000)
          v59 = v57;
        else
          v59 = 64;
        if (v58 >> 6 >= 0x3C0)
          v60 = 960;
        else
          v60 = v58 >> 6;
        if (v58 >= 0x1000)
          v61 = v60;
        else
          v61 = 64;
        v54 = v13 + 2;
        *v17 = (613566757 * (unint64_t)((-4194240 - v59 + (v59 << 16)) >> 7)) >> 32;
        v17[1] = (613566757 * (unint64_t)((-4194240 - v61 + (v61 << 16)) >> 7)) >> 32;
        v55 = v17 + 2;
      }
      if (v10 == v30)
      {
        v62 = 0;
      }
      else
      {
        v63 = v10 - v30;
        do
        {
          v64 = *v54;
          v65 = v64 >> 6;
          v66 = v54[1];
          if (v64 >> 6 >= 0x3C0)
            v65 = 960;
          if (v64 >= 0x1000)
            v67 = v65;
          else
            v67 = 64;
          if (v66 >> 6 >= 0x3C0)
            v68 = 960;
          else
            v68 = v66 >> 6;
          if (v66 < 0x1000)
            v68 = 64;
          v54 += 2;
          *v55 = (613566757 * (unint64_t)((-4194240 - v67 + (v67 << 16)) >> 7)) >> 32;
          v55[1] = (613566757 * (unint64_t)((-4194240 - v68 + (v68 << 16)) >> 7)) >> 32;
          v55 += 2;
          --v63;
        }
        while (v63);
        v62 = v10 - v30;
      }
      if (v62 + v29 < v10)
      {
        v69 = *v54;
        v70 = v69 >> 6;
        v71 = v54[1];
        if (v69 >> 6 >= 0x3C0)
          v70 = 960;
        if (v69 >= 0x1000)
          v72 = v70;
        else
          v72 = 64;
        if (v71 >> 6 >= 0x3C0)
          v73 = 960;
        else
          v73 = v71 >> 6;
        if (v71 >= 0x1000)
          v74 = v73;
        else
          v74 = 64;
        *v55 = (613566757 * (unint64_t)((-4194240 - v72 + (v72 << 16)) >> 7)) >> 32;
        v55[1] = (613566757 * (unint64_t)((-4194240 - v74 + (v74 << 16)) >> 7)) >> 32;
      }
      v13 = (unsigned __int16 *)((char *)v13 + v12);
      v17 = (_WORD *)((char *)v17 + v16);
      ++v53;
    }
    while (v53 != v52);
  }
  if (v52 + v26 < v18)
  {
    if ((v28 & 1) != 0)
    {
      v75 = *v13;
      v76 = v75 >> 6;
      v77 = v13[1];
      v78 = v77 >> 6;
      if (v75 >> 6 >= 0x3C0)
        v76 = 960;
      if (v75 < 0x1000)
        v76 = 64;
      if (v78 >= 0x3C0)
        v78 = 960;
      if (v77 >= 0x1000)
        v79 = v78;
      else
        v79 = 64;
      v13 += 2;
      *v17 = (613566757 * (unint64_t)((-4194240 - v76 + (v76 << 16)) >> 7)) >> 32;
      v17[1] = (613566757 * (unint64_t)((-4194240 - v79 + (v79 << 16)) >> 7)) >> 32;
      v17 += 2;
    }
    if (v10 == v30)
    {
      v31 = 0;
    }
    else
    {
      v80 = v10 - v30;
      do
      {
        v81 = *v13;
        v82 = v81 >> 6;
        v83 = v13[1];
        if (v81 >> 6 >= 0x3C0)
          v82 = 960;
        if (v81 >= 0x1000)
          v84 = v82;
        else
          v84 = 64;
        if (v83 >> 6 >= 0x3C0)
          v85 = 960;
        else
          v85 = v83 >> 6;
        if (v83 < 0x1000)
          v85 = 64;
        v13 += 2;
        *v17 = (613566757 * (unint64_t)((-4194240 - v84 + (v84 << 16)) >> 7)) >> 32;
        v17[1] = (613566757 * (unint64_t)((-4194240 - v85 + (v85 << 16)) >> 7)) >> 32;
        v17 += 2;
        --v80;
      }
      while (v80);
    }
    if (v31 + v29 < v10)
    {
      v86 = *v13;
      v87 = v86 >> 6;
      v88 = v13[1];
      v89 = v88 >> 6;
      if (v86 >> 6 >= 0x3C0)
        v87 = 960;
      if (v86 < 0x1000)
        v87 = 64;
      if (v89 >= 0x3C0)
        v89 = 960;
      if (v88 >= 0x1000)
        v90 = v89;
      else
        v90 = 64;
      *v17 = (613566757 * (unint64_t)((-4194240 - v87 + (v87 << 16)) >> 7)) >> 32;
      v17[1] = (613566757 * (unint64_t)((-4194240 - v90 + (v90 << 16)) >> 7)) >> 32;
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_x444_s2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  _WORD *v36;
  _WORD *v37;
  unsigned int v38;
  unint64_t v39;
  _WORD *v40;
  unsigned int v41;
  unint64_t v42;
  uint64_t v43;
  _WORD *v44;
  _WORD *v45;
  unsigned int v46;
  unint64_t v47;
  _WORD *v48;
  unsigned int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  unint64_t v54;
  _WORD *v55;
  unsigned int v56;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (_WORD *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = a8[2];
    v28 = a7[2] + v27 * v18 + v19;
    v29 = *a7 + *a8 * v18 + v19;
    v30 = *a3 + v25 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = *(_WORD *)(v30 + 2 * i) & 0xFFC0;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v8);
  }
  v32 = v12 & 1;
  if (v8 >= v32)
    v33 = v12 & 1;
  else
    v33 = 0;
  v34 = v9;
  if (v22 < v10)
    v10 = 0;
  v35 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v34 & 1) != 0)
    {
      v36 = v14 + 4;
      v38 = ((v14[3] & 0xFFC0) + (v14[1] & 0xFFC0u)) >> 1;
      *v21 = ((v14[2] & 0xFFC0) + (*v14 & 0xFFC0u)) >> 1;
      v21[1] = v38;
      v37 = v21 + 2;
    }
    else
    {
      v36 = v14;
      v37 = v21;
    }
    if (v22 != v10)
    {
      v39 = 0;
      do
      {
        v40 = &v37[v39];
        v41 = ((v36[3] & 0xFFC0) + (v36[1] & 0xFFC0u)) >> 1;
        *v40 = ((v36[2] & 0xFFC0) + (*v36 & 0xFFC0u)) >> 1;
        v40[1] = v41;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    v14 = (_WORD *)((char *)v14 + v13);
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v33)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v8 - v33;
    do
    {
      v44 = v14;
      v45 = v21;
      if ((v34 & 1) != 0)
      {
        v44 = v14 + 4;
        v46 = ((v14[3] & 0xFFC0) + (v14[1] & 0xFFC0u)) >> 1;
        *v21 = ((v14[2] & 0xFFC0) + (*v14 & 0xFFC0u)) >> 1;
        v21[1] = v46;
        v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        v47 = 0;
        do
        {
          v48 = &v45[v47];
          v49 = ((v44[3] & 0xFFC0) + (v44[1] & 0xFFC0u)) >> 1;
          *v48 = ((v44[2] & 0xFFC0) + (*v44 & 0xFFC0u)) >> 1;
          v48[1] = v49;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      v14 = (_WORD *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v8)
  {
    if ((v34 & 1) != 0)
    {
      v50 = *v14 & 0xFFC0;
      v51 = v14[1] & 0xFFC0;
      v52 = v14[2] & 0xFFC0;
      v53 = v14[3] & 0xFFC0;
      v14 += 4;
      *v21 = (v52 + v50) >> 1;
      v21[1] = (v53 + v51) >> 1;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v54 = 0;
      do
      {
        v55 = &v21[v54];
        v56 = ((v14[3] & 0xFFC0) + (v14[1] & 0xFFC0u)) >> 1;
        *v55 = ((v14[2] & 0xFFC0) + (*v14 & 0xFFC0u)) >> 1;
        v55[1] = v56;
        v54 += 2;
        v14 += 4;
      }
      while (v54 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_x444_s2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  _WORD *v36;
  _WORD *v37;
  __int16 v38;
  unint64_t v39;
  _WORD *v40;
  __int16 v41;
  unint64_t v42;
  uint64_t v43;
  _WORD *v44;
  _WORD *v45;
  __int16 v46;
  unint64_t v47;
  _WORD *v48;
  __int16 v49;
  __int16 v50;
  __int16 v51;
  unint64_t v52;
  _WORD *v53;
  __int16 v54;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (_WORD *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = a8[2];
    v28 = a7[2] + v27 * v18 + v19;
    v29 = *a7 + *a8 * v18 + v19;
    v30 = *a3 + v25 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = *(_WORD *)(v30 + 2 * i) & 0xFFC0;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v8);
  }
  v32 = v12 & 1;
  if (v8 >= v32)
    v33 = v12 & 1;
  else
    v33 = 0;
  v34 = v9;
  if (v22 < v10)
    v10 = 0;
  v35 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v34 & 1) != 0)
    {
      v38 = v14[1] & 0xFFC0;
      v36 = v14 + 4;
      *v21 = *v14 & 0xFFC0;
      v21[1] = v38;
      v37 = v21 + 2;
    }
    else
    {
      v36 = v14;
      v37 = v21;
    }
    if (v22 != v10)
    {
      v39 = 0;
      do
      {
        v40 = &v37[v39];
        v41 = v36[1] & 0xFFC0;
        *v40 = *v36 & 0xFFC0;
        v40[1] = v41;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    v14 = (_WORD *)((char *)v14 + v13);
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v33)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v8 - v33;
    do
    {
      v44 = v14;
      v45 = v21;
      if ((v34 & 1) != 0)
      {
        v46 = v14[1] & 0xFFC0;
        v44 = v14 + 4;
        *v21 = *v14 & 0xFFC0;
        v21[1] = v46;
        v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        v47 = 0;
        do
        {
          v48 = &v45[v47];
          v49 = v44[1] & 0xFFC0;
          *v48 = *v44 & 0xFFC0;
          v48[1] = v49;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      v14 = (_WORD *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v8)
  {
    if ((v34 & 1) != 0)
    {
      v50 = *v14 & 0xFFC0;
      v51 = v14[1] & 0xFFC0;
      v14 += 4;
      *v21 = v50;
      v21[1] = v51;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v52 = 0;
      do
      {
        v53 = &v21[v52];
        v54 = v14[1] & 0xFFC0;
        *v53 = *v14 & 0xFFC0;
        v53[1] = v54;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_x444_sv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  _WORD *v34;
  _WORD *v35;
  unsigned int v36;
  unint64_t v37;
  _WORD *v38;
  unsigned int v39;
  unint64_t v40;
  uint64_t v41;
  _WORD *v42;
  _WORD *v43;
  unsigned int v44;
  unint64_t v45;
  _WORD *v46;
  unsigned int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  unint64_t v52;
  _WORD *v53;
  unsigned int v54;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (_WORD *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = *a7 + *a8 * v18 + v19;
    v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = *(_WORD *)(v28 + 2 * i) & 0xFFC0;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  v30 = v12 & 1;
  if (v9 >= v30)
    v31 = v12 & 1;
  else
    v31 = 0;
  v32 = v8;
  if (v22 < v10)
    v10 = 0;
  v33 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v34 = v14 + 4;
      v36 = ((v14[3] & 0xFFC0) + (v14[1] & 0xFFC0u)) >> 1;
      *v21 = ((v14[2] & 0xFFC0) + (*v14 & 0xFFC0u)) >> 1;
      v21[1] = v36;
      v35 = v21 + 2;
    }
    else
    {
      v34 = v14;
      v35 = v21;
    }
    if (v22 != v10)
    {
      v37 = 0;
      do
      {
        v38 = &v35[v37];
        v39 = ((v34[3] & 0xFFC0) + (v34[1] & 0xFFC0u)) >> 1;
        *v38 = ((v34[2] & 0xFFC0) + (*v34 & 0xFFC0u)) >> 1;
        v38[1] = v39;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 = (_WORD *)((char *)v14 + v13);
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v9 - v31;
    do
    {
      v42 = v14;
      v43 = v21;
      if ((v32 & 1) != 0)
      {
        v42 = v14 + 4;
        v44 = ((v14[3] & 0xFFC0) + (v14[1] & 0xFFC0u)) >> 1;
        *v21 = ((v14[2] & 0xFFC0) + (*v14 & 0xFFC0u)) >> 1;
        v21[1] = v44;
        v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        v45 = 0;
        do
        {
          v46 = &v43[v45];
          v47 = ((v42[3] & 0xFFC0) + (v42[1] & 0xFFC0u)) >> 1;
          *v46 = ((v42[2] & 0xFFC0) + (*v42 & 0xFFC0u)) >> 1;
          v46[1] = v47;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 = (_WORD *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if ((v32 & 1) != 0)
    {
      v48 = *v14 & 0xFFC0;
      v49 = v14[1] & 0xFFC0;
      v50 = v14[2] & 0xFFC0;
      v51 = v14[3] & 0xFFC0;
      v14 += 4;
      *v21 = (v50 + v48) >> 1;
      v21[1] = (v51 + v49) >> 1;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v52 = 0;
      do
      {
        v53 = &v21[v52];
        v54 = ((v14[3] & 0xFFC0) + (v14[1] & 0xFFC0u)) >> 1;
        *v53 = ((v14[2] & 0xFFC0) + (*v14 & 0xFFC0u)) >> 1;
        v53[1] = v54;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_x444_sv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  _WORD *v34;
  _WORD *v35;
  __int16 v36;
  unint64_t v37;
  _WORD *v38;
  __int16 v39;
  unint64_t v40;
  uint64_t v41;
  _WORD *v42;
  _WORD *v43;
  __int16 v44;
  unint64_t v45;
  _WORD *v46;
  __int16 v47;
  __int16 v48;
  __int16 v49;
  unint64_t v50;
  _WORD *v51;
  __int16 v52;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (_WORD *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = *a7 + *a8 * v18 + v19;
    v28 = *a3 + v25 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = *(_WORD *)(v28 + 2 * i) & 0xFFC0;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v8);
  }
  v30 = v12 & 1;
  if (v8 >= v30)
    v31 = v12 & 1;
  else
    v31 = 0;
  v32 = v9;
  if (v22 < v10)
    v10 = 0;
  v33 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v36 = v14[1] & 0xFFC0;
      v34 = v14 + 4;
      *v21 = *v14 & 0xFFC0;
      v21[1] = v36;
      v35 = v21 + 2;
    }
    else
    {
      v34 = v14;
      v35 = v21;
    }
    if (v22 != v10)
    {
      v37 = 0;
      do
      {
        v38 = &v35[v37];
        v39 = v34[1] & 0xFFC0;
        *v38 = *v34 & 0xFFC0;
        v38[1] = v39;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 = (_WORD *)((char *)v14 + v13);
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v31)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v8 - v31;
    do
    {
      v42 = v14;
      v43 = v21;
      if ((v32 & 1) != 0)
      {
        v44 = v14[1] & 0xFFC0;
        v42 = v14 + 4;
        *v21 = *v14 & 0xFFC0;
        v21[1] = v44;
        v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        v45 = 0;
        do
        {
          v46 = &v43[v45];
          v47 = v42[1] & 0xFFC0;
          *v46 = *v42 & 0xFFC0;
          v46[1] = v47;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 = (_WORD *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v8)
  {
    if ((v32 & 1) != 0)
    {
      v48 = *v14 & 0xFFC0;
      v49 = v14[1] & 0xFFC0;
      v14 += 4;
      *v21 = v48;
      v21[1] = v49;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v50 = 0;
      do
      {
        v51 = &v21[v50];
        v52 = v14[1] & 0xFFC0;
        *v51 = *v14 & 0xFFC0;
        v51[1] = v52;
        v50 += 2;
        v14 += 4;
      }
      while (v50 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_x444_sf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unsigned int v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  unsigned __int16 *v35;
  _WORD *v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  int v45;
  int v46;
  unint64_t v47;
  _WORD *v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  int v52;
  int v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  int v57;
  int v58;
  unint64_t v59;
  uint64_t v60;
  unsigned __int16 *v61;
  _WORD *v62;
  unsigned int v63;
  int v64;
  unsigned int v65;
  int v66;
  int v67;
  unsigned int v68;
  int v69;
  unsigned int v70;
  int v71;
  int v72;
  unint64_t v73;
  _WORD *v74;
  unsigned int v75;
  int v76;
  unsigned int v77;
  int v78;
  int v79;
  unsigned int v80;
  int v81;
  unsigned int v82;
  int v83;
  int v84;
  unsigned int v85;
  int v86;
  unsigned int v87;
  unsigned int v88;
  int v89;
  unsigned int v90;
  int v91;
  unsigned int v92;
  int v93;
  int v94;
  int v95;
  unint64_t v96;
  _WORD *v97;
  unsigned int v98;
  int v99;
  unsigned int v100;
  int v101;
  int v102;
  unsigned int v103;
  int v104;
  unsigned int v105;
  int v106;
  int v107;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = *a7 + *a8 * v18 + v19;
    v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          v30 = *(unsigned __int16 *)(v28 + 2 * i) >> 6;
          if (v30 >= 0x3AC)
            v30 = 940;
          if (v30 <= 0x40)
            v30 = 64;
          *(_WORD *)(v27 + 2 * i) = (-4194240 - v30 + (v30 << 16)) / 0x36C;
        }
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  v31 = v12 & 1;
  if (v9 >= v31)
    v32 = v12 & 1;
  else
    v32 = 0;
  v33 = v8;
  if (v22 < v10)
    v10 = 0;
  v34 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v37 = *v14;
      v38 = v37 >> 6;
      v39 = v14[1];
      v40 = v39 >> 6;
      if (v37 >> 6 >= 0x3C0)
        v38 = 960;
      if (v37 < 0x1000)
        v38 = 64;
      if (v40 >= 0x3C0)
        v40 = 960;
      if (v39 >= 0x1000)
        v41 = v40;
      else
        v41 = 64;
      v42 = v14[2];
      v43 = v42 >> 6;
      v44 = v14[3];
      if (v42 >> 6 >= 0x3C0)
        v43 = 960;
      if (v42 >= 0x1000)
        v45 = v43;
      else
        v45 = 64;
      if (v44 >> 6 >= 0x3C0)
        v46 = 960;
      else
        v46 = v44 >> 6;
      if (v44 < 0x1000)
        v46 = 64;
      v35 = v14 + 4;
      *v21 = (((613566757 * (unint64_t)((-4194240 - v38 + (v38 << 16)) >> 7)) >> 32)
                          + ((613566757 * (unint64_t)((-4194240 - v45 + (v45 << 16)) >> 7)) >> 32)
                          + 1) >> 1;
      v21[1] = (((613566757 * (unint64_t)((-4194240 - v41 + (v41 << 16)) >> 7)) >> 32)
                            + ((613566757 * (unint64_t)((-4194240 - v46 + (v46 << 16)) >> 7)) >> 32)
                            + 1) >> 1;
      v36 = v21 + 2;
    }
    else
    {
      v35 = v14;
      v36 = v21;
    }
    if (v22 != v10)
    {
      v47 = 0;
      do
      {
        v48 = &v36[v47];
        v49 = *v35;
        v50 = v49 >> 6;
        v51 = v35[1];
        if (v49 >> 6 >= 0x3C0)
          v50 = 960;
        if (v49 >= 0x1000)
          v52 = v50;
        else
          v52 = 64;
        if (v51 >> 6 >= 0x3C0)
          v53 = 960;
        else
          v53 = v51 >> 6;
        if (v51 < 0x1000)
          v53 = 64;
        v54 = v35[2];
        v55 = v54 >> 6;
        v56 = v35[3];
        if (v54 >> 6 >= 0x3C0)
          v55 = 960;
        if (v54 >= 0x1000)
          v57 = v55;
        else
          v57 = 64;
        if (v56 >> 6 >= 0x3C0)
          v58 = 960;
        else
          v58 = v56 >> 6;
        if (v56 < 0x1000)
          v58 = 64;
        *v48 = (((613566757 * (unint64_t)((-4194240 - v52 + (v52 << 16)) >> 7)) >> 32)
                            + ((613566757 * (unint64_t)((-4194240 - v57 + (v57 << 16)) >> 7)) >> 32)
                            + 1) >> 1;
        v48[1] = (((613566757 * (unint64_t)((-4194240 - v53 + (v53 << 16)) >> 7)) >> 32)
                              + ((613566757 * (unint64_t)((-4194240 - v58 + (v58 << 16)) >> 7)) >> 32)
                              + 1) >> 1;
        v47 += 2;
        v35 += 4;
      }
      while (v47 < v34);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v32)
  {
    v59 = 0;
  }
  else
  {
    v60 = 0;
    v59 = v9 - v32;
    do
    {
      v61 = v14;
      v62 = v21;
      if ((v33 & 1) != 0)
      {
        v63 = *v14;
        v64 = v63 >> 6;
        v65 = v14[1];
        if (v63 >> 6 >= 0x3C0)
          v64 = 960;
        if (v63 < 0x1000)
          v64 = 64;
        if (v65 >> 6 >= 0x3C0)
          v66 = 960;
        else
          v66 = v65 >> 6;
        if (v65 >= 0x1000)
          v67 = v66;
        else
          v67 = 64;
        v68 = v14[2];
        v69 = v68 >> 6;
        v70 = v14[3];
        if (v68 >> 6 >= 0x3C0)
          v69 = 960;
        if (v68 < 0x1000)
          v69 = 64;
        if (v70 >> 6 >= 0x3C0)
          v71 = 960;
        else
          v71 = v70 >> 6;
        if (v70 >= 0x1000)
          v72 = v71;
        else
          v72 = 64;
        v61 = v14 + 4;
        *v21 = (((613566757 * (unint64_t)((-4194240 - v64 + (v64 << 16)) >> 7)) >> 32)
                            + ((613566757 * (unint64_t)((-4194240 - v69 + (v69 << 16)) >> 7)) >> 32)
                            + 1) >> 1;
        v21[1] = (((613566757 * (unint64_t)((-4194240 - v67 + (v67 << 16)) >> 7)) >> 32)
                              + ((613566757 * (unint64_t)((-4194240 - v72 + (v72 << 16)) >> 7)) >> 32)
                              + 1) >> 1;
        v62 = v21 + 2;
      }
      if (v22 != v10)
      {
        v73 = 0;
        do
        {
          v74 = &v62[v73];
          v75 = *v61;
          v76 = v75 >> 6;
          v77 = v61[1];
          if (v75 >> 6 >= 0x3C0)
            v76 = 960;
          if (v75 >= 0x1000)
            v78 = v76;
          else
            v78 = 64;
          if (v77 >> 6 >= 0x3C0)
            v79 = 960;
          else
            v79 = v77 >> 6;
          if (v77 < 0x1000)
            v79 = 64;
          v80 = v61[2];
          v81 = v80 >> 6;
          v82 = v61[3];
          if (v80 >> 6 >= 0x3C0)
            v81 = 960;
          if (v80 >= 0x1000)
            v83 = v81;
          else
            v83 = 64;
          if (v82 >> 6 >= 0x3C0)
            v84 = 960;
          else
            v84 = v82 >> 6;
          if (v82 < 0x1000)
            v84 = 64;
          *v74 = (((613566757 * (unint64_t)((-4194240 - v78 + (v78 << 16)) >> 7)) >> 32)
                              + ((613566757 * (unint64_t)((-4194240 - v83 + (v83 << 16)) >> 7)) >> 32)
                              + 1) >> 1;
          v74[1] = (((613566757 * (unint64_t)((-4194240 - v79 + (v79 << 16)) >> 7)) >> 32)
                                + ((613566757 * (unint64_t)((-4194240 - v84 + (v84 << 16)) >> 7)) >> 32)
                                + 1) >> 1;
          v73 += 2;
          v61 += 4;
        }
        while (v73 < v34);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v60;
    }
    while (v60 != v59);
  }
  if (v59 + v31 < v9)
  {
    if ((v33 & 1) != 0)
    {
      v85 = *v14;
      v86 = v85 >> 6;
      v87 = v14[1];
      v88 = v87 >> 6;
      if (v85 >> 6 >= 0x3C0)
        v86 = 960;
      if (v85 < 0x1000)
        v86 = 64;
      if (v88 >= 0x3C0)
        v88 = 960;
      if (v87 >= 0x1000)
        v89 = v88;
      else
        v89 = 64;
      v90 = v14[2];
      v91 = v90 >> 6;
      v92 = v14[3];
      if (v90 >> 6 >= 0x3C0)
        v91 = 960;
      if (v90 >= 0x1000)
        v93 = v91;
      else
        v93 = 64;
      if (v92 >> 6 >= 0x3C0)
        v94 = 960;
      else
        v94 = v92 >> 6;
      if (v92 >= 0x1000)
        v95 = v94;
      else
        v95 = 64;
      v14 += 4;
      *v21 = (((613566757 * (unint64_t)((-4194240 - v86 + (v86 << 16)) >> 7)) >> 32)
                          + ((613566757 * (unint64_t)((-4194240 - v93 + (v93 << 16)) >> 7)) >> 32)
                          + 1) >> 1;
      v21[1] = (((613566757 * (unint64_t)((-4194240 - v89 + (v89 << 16)) >> 7)) >> 32)
                            + ((613566757 * (unint64_t)((-4194240 - v95 + (v95 << 16)) >> 7)) >> 32)
                            + 1) >> 1;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v96 = 0;
      do
      {
        v97 = &v21[v96];
        v98 = *v14;
        v99 = v98 >> 6;
        v100 = v14[1];
        if (v98 >> 6 >= 0x3C0)
          v99 = 960;
        if (v98 >= 0x1000)
          v101 = v99;
        else
          v101 = 64;
        if (v100 >> 6 >= 0x3C0)
          v102 = 960;
        else
          v102 = v100 >> 6;
        if (v100 < 0x1000)
          v102 = 64;
        v103 = v14[2];
        v104 = v103 >> 6;
        v105 = v14[3];
        if (v103 >> 6 >= 0x3C0)
          v104 = 960;
        if (v103 >= 0x1000)
          v106 = v104;
        else
          v106 = 64;
        if (v105 >> 6 >= 0x3C0)
          v107 = 960;
        else
          v107 = v105 >> 6;
        if (v105 < 0x1000)
          v107 = 64;
        *v97 = (((613566757 * (unint64_t)((-4194240 - v101 + (v101 << 16)) >> 7)) >> 32)
                            + ((613566757 * (unint64_t)((-4194240 - v106 + (v106 << 16)) >> 7)) >> 32)
                            + 1) >> 1;
        v97[1] = (((613566757 * (unint64_t)((-4194240 - v102 + (v102 << 16)) >> 7)) >> 32)
                              + ((613566757 * (unint64_t)((-4194240 - v107 + (v107 << 16)) >> 7)) >> 32)
                              + 1) >> 1;
        v96 += 2;
        v14 += 4;
      }
      while (v96 < v34);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_x444_sf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unsigned int v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  unsigned __int16 *v35;
  _WORD *v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  unint64_t v42;
  _WORD *v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  int v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  unsigned __int16 *v51;
  _WORD *v52;
  unsigned int v53;
  int v54;
  unsigned int v55;
  int v56;
  int v57;
  unint64_t v58;
  _WORD *v59;
  unsigned int v60;
  int v61;
  unsigned int v62;
  int v63;
  int v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  int v69;
  unint64_t v70;
  _WORD *v71;
  unsigned int v72;
  int v73;
  unsigned int v74;
  int v75;
  int v76;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = *a7 + *a8 * v18 + v19;
    v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          v30 = *(unsigned __int16 *)(v28 + 2 * i) >> 6;
          if (v30 >= 0x3AC)
            v30 = 940;
          if (v30 <= 0x40)
            v30 = 64;
          *(_WORD *)(v27 + 2 * i) = (-4194240 - v30 + (v30 << 16)) / 0x36C;
        }
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  v31 = v12 & 1;
  if (v9 >= v31)
    v32 = v12 & 1;
  else
    v32 = 0;
  v33 = v8;
  if (v22 < v10)
    v10 = 0;
  v34 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v37 = *v14;
      v38 = v37 >> 6;
      v39 = v14[1];
      v40 = v39 >> 6;
      if (v37 >> 6 >= 0x3C0)
        v38 = 960;
      if (v37 < 0x1000)
        v38 = 64;
      if (v40 >= 0x3C0)
        v40 = 960;
      if (v39 >= 0x1000)
        v41 = v40;
      else
        v41 = 64;
      v35 = v14 + 4;
      *v21 = (613566757 * (unint64_t)((-4194240 - v38 + (v38 << 16)) >> 7)) >> 32;
      v21[1] = (613566757 * (unint64_t)((-4194240 - v41 + (v41 << 16)) >> 7)) >> 32;
      v36 = v21 + 2;
    }
    else
    {
      v35 = v14;
      v36 = v21;
    }
    if (v22 != v10)
    {
      v42 = 0;
      do
      {
        v43 = &v36[v42];
        v44 = *v35;
        v45 = v44 >> 6;
        v46 = v35[1];
        if (v44 >> 6 >= 0x3C0)
          v45 = 960;
        if (v44 >= 0x1000)
          v47 = v45;
        else
          v47 = 64;
        if (v46 >> 6 >= 0x3C0)
          v48 = 960;
        else
          v48 = v46 >> 6;
        if (v46 < 0x1000)
          v48 = 64;
        *v43 = (613566757 * (unint64_t)((-4194240 - v47 + (v47 << 16)) >> 7)) >> 32;
        v43[1] = (613566757 * (unint64_t)((-4194240 - v48 + (v48 << 16)) >> 7)) >> 32;
        v42 += 2;
        v35 += 4;
      }
      while (v42 < v34);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v32)
  {
    v49 = 0;
  }
  else
  {
    v50 = 0;
    v49 = v9 - v32;
    do
    {
      v51 = v14;
      v52 = v21;
      if ((v33 & 1) != 0)
      {
        v53 = *v14;
        v54 = v53 >> 6;
        v55 = v14[1];
        if (v53 >> 6 >= 0x3C0)
          v54 = 960;
        if (v53 < 0x1000)
          v54 = 64;
        if (v55 >> 6 >= 0x3C0)
          v56 = 960;
        else
          v56 = v55 >> 6;
        if (v55 >= 0x1000)
          v57 = v56;
        else
          v57 = 64;
        v51 = v14 + 4;
        *v21 = (613566757 * (unint64_t)((-4194240 - v54 + (v54 << 16)) >> 7)) >> 32;
        v21[1] = (613566757 * (unint64_t)((-4194240 - v57 + (v57 << 16)) >> 7)) >> 32;
        v52 = v21 + 2;
      }
      if (v22 != v10)
      {
        v58 = 0;
        do
        {
          v59 = &v52[v58];
          v60 = *v51;
          v61 = v60 >> 6;
          v62 = v51[1];
          if (v60 >> 6 >= 0x3C0)
            v61 = 960;
          if (v60 >= 0x1000)
            v63 = v61;
          else
            v63 = 64;
          if (v62 >> 6 >= 0x3C0)
            v64 = 960;
          else
            v64 = v62 >> 6;
          if (v62 < 0x1000)
            v64 = 64;
          *v59 = (613566757 * (unint64_t)((-4194240 - v63 + (v63 << 16)) >> 7)) >> 32;
          v59[1] = (613566757 * (unint64_t)((-4194240 - v64 + (v64 << 16)) >> 7)) >> 32;
          v58 += 2;
          v51 += 4;
        }
        while (v58 < v34);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v50;
    }
    while (v50 != v49);
  }
  if (v49 + v31 < v9)
  {
    if ((v33 & 1) != 0)
    {
      v65 = *v14;
      v66 = v65 >> 6;
      v67 = v14[1];
      v68 = v67 >> 6;
      if (v65 >> 6 >= 0x3C0)
        v66 = 960;
      if (v65 < 0x1000)
        v66 = 64;
      if (v68 >= 0x3C0)
        v68 = 960;
      if (v67 >= 0x1000)
        v69 = v68;
      else
        v69 = 64;
      v14 += 4;
      *v21 = (613566757 * (unint64_t)((-4194240 - v66 + (v66 << 16)) >> 7)) >> 32;
      v21[1] = (613566757 * (unint64_t)((-4194240 - v69 + (v69 << 16)) >> 7)) >> 32;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v70 = 0;
      do
      {
        v71 = &v21[v70];
        v72 = *v14;
        v73 = v72 >> 6;
        v74 = v14[1];
        if (v72 >> 6 >= 0x3C0)
          v73 = 960;
        if (v72 >= 0x1000)
          v75 = v73;
        else
          v75 = 64;
        if (v74 >> 6 >= 0x3C0)
          v76 = 960;
        else
          v76 = v74 >> 6;
        if (v74 < 0x1000)
          v76 = 64;
        *v71 = (613566757 * (unint64_t)((-4194240 - v75 + (v75 << 16)) >> 7)) >> 32;
        v71[1] = (613566757 * (unint64_t)((-4194240 - v76 + (v76 << 16)) >> 7)) >> 32;
        v70 += 2;
        v14 += 4;
      }
      while (v70 < v34);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_x444_sv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  unint64_t v36;
  unint64_t v37;
  _WORD *v38;
  _WORD *v39;
  _WORD *v40;
  int32x2_t v41;
  int32x2_t v42;
  int32x2_t v43;
  int32x2_t v44;
  uint32x2_t v45;
  unint64_t v46;
  _WORD *v47;
  _WORD *v48;
  int32x2_t v49;
  int32x2_t v50;
  int32x2_t v51;
  int32x2_t v52;
  uint32x2_t v53;
  unint64_t v54;
  unint64_t v55;
  _WORD *v56;
  _WORD *v57;
  _WORD *v58;
  int32x2_t v59;
  int32x2_t v60;
  int32x2_t v61;
  int32x2_t v62;
  uint32x2_t v63;
  unint64_t v64;
  _WORD *v65;
  _WORD *v66;
  int32x2_t v67;
  int32x2_t v68;
  int32x2_t v69;
  int32x2_t v70;
  uint32x2_t v71;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (_WORD *)(a3[1] + v15 * (v12 + v9) + 4 * (v10 + v8));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - (v10 + v8);
  v25 = v18 - v17;
  if (v24 >= v25)
    v24 = v25;
  v26 = v14 - v13;
  v27 = v20 - v19;
  if (v26 < v20 - v19)
    v27 = v26;
  if (v27)
  {
    v28 = 0;
    v29 = *a4;
    v30 = *a8;
    v31 = *a3 + v29 * v13 + 2 * (v10 + v8);
    if (v13 >= v9)
      v32 = 0;
    else
      v32 = v29;
    v33 = v31 + v32;
    v34 = *a7 + v30 * v19 + v21;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
          *(_WORD *)(v34 + 2 * i) = *(_WORD *)(v33 + 2 * i) & 0xFFC0;
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12)
    v36 = v12;
  else
    v36 = 0;
  if (v24 < v10)
    v10 = 0;
  v37 = v24 - v10;
  if (v12)
  {
    v38 = v16;
    if ((v8 & 1) != 0)
    {
      v40 = (_WORD *)((char *)v16 + v15 + 4);
      v38 = v16 + 4;
      v41.i32[0] = *v16 & 0xFFC0;
      v41.i32[1] = v16[1] & 0xFFC0;
      v42.i32[0] = *(_WORD *)((char *)v16 + v15) & 0xFFC0;
      v42.i32[1] = *(_WORD *)((char *)v16 + v15 + 2) & 0xFFC0;
      v43.i32[0] = v16[2] & 0xFFC0;
      v43.i32[1] = v16[3] & 0xFFC0;
      v44.i32[0] = *v40 & 0xFFC0;
      v44.i32[1] = v40[1] & 0xFFC0;
      v45 = vshr_n_u32((uint32x2_t)vadd_s32(vadd_s32(v42, vadd_s32(v41, v43)), v44), 2uLL);
      v23[1] = v45.i16[2];
      *v23 = v45.i16[0];
      v39 = v23 + 2;
    }
    else
    {
      v39 = v23;
    }
    if (v24 != v10)
    {
      v46 = 0;
      do
      {
        v47 = &v38[2 * v46];
        v48 = (_WORD *)((char *)&v38[2 * v46] + v15);
        v49.i32[0] = *v47 & 0xFFC0;
        v49.i32[1] = v47[1] & 0xFFC0;
        v50.i32[0] = *v48 & 0xFFC0;
        v50.i32[1] = v48[1] & 0xFFC0;
        v51.i32[0] = v47[2] & 0xFFC0;
        v51.i32[1] = v47[3] & 0xFFC0;
        v52.i32[0] = v48[2] & 0xFFC0;
        v52.i32[1] = v48[3] & 0xFFC0;
        v53 = vshr_n_u32((uint32x2_t)vadd_s32(vadd_s32(v50, v49), vadd_s32(v51, v52)), 2uLL);
        v39[1] = v53.i16[2];
        *v39 = v53.i16[0];
        v39 += 2;
        v46 += 2;
      }
      while (v46 < v37);
    }
    v16 += v15;
    v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v27 != v36)
  {
    v54 = 0;
    v55 = v27 - v36;
    do
    {
      v56 = v16;
      v57 = v23;
      if ((v8 & 1) != 0)
      {
        v58 = (_WORD *)((char *)v16 + v15 + 4);
        v56 = v16 + 4;
        v59.i32[0] = *v16 & 0xFFC0;
        v59.i32[1] = v16[1] & 0xFFC0;
        v60.i32[0] = *(_WORD *)((char *)v16 + v15) & 0xFFC0;
        v60.i32[1] = *(_WORD *)((char *)v16 + v15 + 2) & 0xFFC0;
        v61.i32[0] = v16[2] & 0xFFC0;
        v61.i32[1] = v16[3] & 0xFFC0;
        v62.i32[0] = *v58 & 0xFFC0;
        v62.i32[1] = v58[1] & 0xFFC0;
        v63 = vshr_n_u32((uint32x2_t)vadd_s32(vadd_s32(v60, vadd_s32(v59, v61)), v62), 2uLL);
        v23[1] = v63.i16[2];
        *v23 = v63.i16[0];
        v57 = v23 + 2;
      }
      if (v24 != v10)
      {
        v64 = 0;
        do
        {
          v65 = &v56[2 * v64];
          v66 = (_WORD *)((char *)&v56[2 * v64] + v15);
          v67.i32[0] = *v65 & 0xFFC0;
          v67.i32[1] = v65[1] & 0xFFC0;
          v68.i32[0] = *v66 & 0xFFC0;
          v68.i32[1] = v66[1] & 0xFFC0;
          v69.i32[0] = v65[2] & 0xFFC0;
          v69.i32[1] = v65[3] & 0xFFC0;
          v70.i32[0] = v66[2] & 0xFFC0;
          v70.i32[1] = v66[3] & 0xFFC0;
          v71 = vshr_n_u32((uint32x2_t)vadd_s32(vadd_s32(v68, v67), vadd_s32(v69, v70)), 2uLL);
          v57[1] = v71.i16[2];
          *v57 = v71.i16[0];
          v57 += 2;
          v64 += 2;
        }
        while (v64 < v37);
      }
      v16 += v15;
      v23 = (_WORD *)((char *)v23 + v22);
      v54 += 2;
    }
    while (v54 < v55);
  }
  return 0;
}

uint64_t vt_CopyDec_x444_sv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  unint64_t v36;
  unint64_t v37;
  _WORD *v38;
  _WORD *v39;
  __int16 v40;
  unint64_t v41;
  _WORD *v42;
  __int16 v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _WORD *v47;
  _WORD *v48;
  __int16 v49;
  unint64_t v50;
  _WORD *v51;
  __int16 v52;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (_WORD *)(a3[1] + v15 * (v12 + v8) + 4 * (v10 + v9));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - (v10 + v9);
  v25 = v18 - v17;
  if (v24 >= v25)
    v24 = v25;
  v26 = v14 - v13;
  v27 = v20 - v19;
  if (v26 < v20 - v19)
    v27 = v26;
  if (v27)
  {
    v28 = 0;
    v29 = *a4;
    v30 = *a8;
    v31 = *a3 + v29 * v13 + 2 * (v10 + v9);
    if (v13 >= v8)
      v32 = 0;
    else
      v32 = v29;
    v33 = v31 + v32;
    v34 = *a7 + v30 * v19 + v21;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
          *(_WORD *)(v34 + 2 * i) = *(_WORD *)(v33 + 2 * i) & 0xFFC0;
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12)
    v36 = v12;
  else
    v36 = 0;
  if (v24 < v10)
    v10 = 0;
  v37 = v24 - v10;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v40 = v16[1] & 0xFFC0;
      v38 = v16 + 4;
      *v23 = *v16 & 0xFFC0;
      v23[1] = v40;
      v39 = v23 + 2;
    }
    else
    {
      v38 = v16;
      v39 = v23;
    }
    if (v24 != v10)
    {
      v41 = 0;
      do
      {
        v42 = &v39[v41];
        v43 = v38[1] & 0xFFC0;
        *v42 = *v38 & 0xFFC0;
        v42[1] = v43;
        v41 += 2;
        v38 += 4;
      }
      while (v41 < v37);
    }
    v16 += v15;
    v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v27 != v36)
  {
    v44 = 0;
    v45 = v27 - v36;
    v46 = 2 * v15;
    do
    {
      v47 = v16;
      v48 = v23;
      if ((v9 & 1) != 0)
      {
        v49 = v16[1] & 0xFFC0;
        v47 = v16 + 4;
        *v23 = *v16 & 0xFFC0;
        v23[1] = v49;
        v48 = v23 + 2;
      }
      if (v24 != v10)
      {
        v50 = 0;
        do
        {
          v51 = &v48[v50];
          v52 = v47[1] & 0xFFC0;
          *v51 = *v47 & 0xFFC0;
          v51[1] = v52;
          v50 += 2;
          v47 += 4;
        }
        while (v50 < v37);
      }
      v16 = (_WORD *)((char *)v16 + v46);
      v23 = (_WORD *)((char *)v23 + v22);
      v44 += 2;
    }
    while (v44 < v45);
  }
  return 0;
}

uint64_t vt_CopyAvg_x444_sf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  unsigned __int16 *v38;
  _WORD *v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  unsigned __int16 *v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  int v57;
  int v58;
  unsigned int v59;
  unint64_t v60;
  int v61;
  int v62;
  unint64_t v63;
  unsigned __int16 *v64;
  _WORD *v65;
  unsigned int v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned __int16 *v70;
  unsigned int v71;
  unsigned int v72;
  int v73;
  unsigned int v74;
  int v75;
  int v76;
  unsigned int v77;
  unsigned int v78;
  BOOL v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  int v85;
  unsigned int v86;
  int v87;
  unint64_t v88;
  int v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  int v94;
  unint64_t v95;
  unint64_t v96;
  unsigned __int16 *v97;
  _WORD *v98;
  unsigned int v99;
  int v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  unsigned int v110;
  int v111;
  unsigned int v112;
  unsigned __int16 *v113;
  unsigned int v114;
  unsigned int v115;
  int v116;
  int v117;
  int v118;
  unsigned int v119;
  unint64_t v120;
  int v121;
  unint64_t v122;
  unsigned __int16 *v123;
  _WORD *v124;
  unsigned int v125;
  int v126;
  unsigned int v127;
  unsigned int v128;
  unsigned __int16 *v129;
  unsigned int v130;
  unsigned int v131;
  int v132;
  unsigned int v133;
  int v134;
  int v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  int v143;
  unsigned int v144;
  int v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  int v151;
  uint64_t v153;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * (v12 + v9) + 4 * (v10 + v8));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v153 = a8[1];
  v22 = (_WORD *)(a7[1] + ((unint64_t)(v153 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v23 = v11 - (v10 + v8);
  v24 = v18 - v17;
  if (v23 >= v24)
    v23 = v24;
  v25 = v14 - v13;
  v26 = v20 - v19;
  if (v25 < v20 - v19)
    v26 = v25;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a3 + *a4 * v13 + 2 * (v10 + v8);
    v30 = *a8;
    if (v13 >= v9)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v29 + v31;
    v33 = *a7 + v30 * v19 + v21;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
        {
          v35 = *(unsigned __int16 *)(v32 + 2 * i) >> 6;
          if (v35 >= 0x3AC)
            v35 = 940;
          if (v35 <= 0x40)
            v35 = 64;
          *(_WORD *)(v33 + 2 * i) = (-4194240 - v35 + (v35 << 16)) / 0x36C;
        }
      }
      v32 += v28;
      v33 += v30;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= v12)
    v36 = v12;
  else
    v36 = 0;
  if (v23 < v10)
    v10 = 0;
  v37 = v23 - v10;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v40 = *v16;
      v41 = v40 >> 6;
      v42 = v16[1];
      v43 = v42 >> 6;
      v44 = *(unsigned __int16 *)((char *)v16 + v15);
      v45 = *(unsigned __int16 *)((char *)v16 + v15 + 2);
      if (v40 >> 6 >= 0x3C0)
        v41 = 960;
      if (v40 < 0x1000)
        v41 = 64;
      if (v43 >= 0x3C0)
        v43 = 960;
      if (v42 < 0x1000)
        v43 = 64;
      if (v44 >> 6 >= 0x3C0)
        v46 = 960;
      else
        v46 = v44 >> 6;
      if (v44 >= 0x1000)
        v47 = v46;
      else
        v47 = 64;
      if (v45 >> 6 >= 0x3C0)
        v48 = 960;
      else
        v48 = v45 >> 6;
      if (v45 >= 0x1000)
        v49 = v48;
      else
        v49 = 64;
      v50 = v16[2];
      v51 = v50 >> 6;
      v52 = v16[3];
      v53 = (unsigned __int16 *)((char *)v16 + v15 + 4);
      v54 = *v53;
      v55 = v53[1];
      if (v50 >> 6 >= 0x3C0)
        v51 = 960;
      if (v50 >= 0x1000)
        v56 = v51;
      else
        v56 = 64;
      if (v52 >> 6 >= 0x3C0)
        v57 = 960;
      else
        v57 = v52 >> 6;
      if (v52 < 0x1000)
        v57 = 64;
      if (v54 >> 6 >= 0x3C0)
        v58 = 960;
      else
        v58 = v54 >> 6;
      v59 = -4194240 - v41 + (v41 << 16);
      if (v54 < 0x1000)
        v58 = 64;
      v60 = (613566757 * (unint64_t)(v59 >> 7)) >> 32;
      if (v55 >> 6 >= 0x3C0)
        v61 = 960;
      else
        v61 = v55 >> 6;
      if (v55 >= 0x1000)
        v62 = v61;
      else
        v62 = 64;
      v38 = v16 + 4;
      *v22 = (v60
                          + ((613566757 * (unint64_t)((-4194240 - v56 + (v56 << 16)) >> 7)) >> 32)
                          + ((613566757 * (unint64_t)((-4194240 - v47 + (v47 << 16)) >> 7)) >> 32)
                          + ((613566757 * (unint64_t)((-4194240 - v58 + (v58 << 16)) >> 7)) >> 32)
                          + 2) >> 2;
      v22[1] = (((613566757 * (unint64_t)((-4194240 - v43 + (v43 << 16)) >> 7)) >> 32)
                            + ((613566757 * (unint64_t)((-4194240 - v57 + (v57 << 16)) >> 7)) >> 32)
                            + ((613566757 * (unint64_t)((-4194240 - v49 + (v49 << 16)) >> 7)) >> 32)
                            + ((613566757 * (unint64_t)((-4194240 - v62 + (v62 << 16)) >> 7)) >> 32)
                            + 2) >> 2;
      v39 = v22 + 2;
    }
    else
    {
      v38 = v16;
      v39 = v22;
    }
    if (v23 != v10)
    {
      v63 = 0;
      v64 = v38 + 2;
      do
      {
        v65 = &v39[v63];
        v66 = *(v64 - 2);
        v67 = v66 >> 6;
        v68 = *(v64 - 1);
        v69 = v68 >> 6;
        v70 = (unsigned __int16 *)((char *)v64 + v15);
        v71 = *(unsigned __int16 *)((char *)v64 + v15 - 4);
        v72 = *(unsigned __int16 *)((char *)v64 + v15 - 2);
        if (v66 >> 6 >= 0x3C0)
          v67 = 960;
        if (v66 >= 0x1000)
          v73 = v67;
        else
          v73 = 64;
        v74 = v72 >> 6;
        if (v69 >= 0x3C0)
          v69 = 960;
        if (v68 >= 0x1000)
          v75 = v69;
        else
          v75 = 64;
        if (v71 >> 6 >= 0x3C0)
          v76 = 960;
        else
          v76 = v71 >> 6;
        if (v71 < 0x1000)
          v76 = 64;
        if (v74 >= 0x3C0)
          v74 = 960;
        v77 = *v64;
        v78 = v77 >> 6;
        v79 = v72 >= 0x1000;
        v80 = v64[1];
        v81 = v80 >> 6;
        v82 = *v70;
        v83 = v82 >> 6;
        v84 = v70[1];
        if (!v79)
          v74 = 64;
        if (v78 >= 0x3C0)
          v78 = 960;
        if (v77 >= 0x1000)
          v85 = v78;
        else
          v85 = 64;
        v86 = v84 >> 6;
        if (v81 >= 0x3C0)
          v81 = 960;
        if (v80 >= 0x1000)
          v87 = v81;
        else
          v87 = 64;
        if (v83 >= 0x3C0)
          v83 = 960;
        v88 = (613566757 * (unint64_t)((-4194240 - v73 + (v73 << 16)) >> 7)) >> 32;
        if (v82 >= 0x1000)
          v89 = v83;
        else
          v89 = 64;
        v90 = 613566757 * ((-4194240 - v75 + (v75 << 16)) >> 7);
        if (v86 >= 0x3C0)
          v86 = 960;
        v91 = HIDWORD(v90);
        v92 = (613566757 * (unint64_t)((-4194240 - v76 + (v76 << 16)) >> 7)) >> 32;
        v93 = 613566757 * ((-4194240 - v74 + (v74 << 16)) >> 7);
        if (v84 >= 0x1000)
          v94 = v86;
        else
          v94 = 64;
        *v65 = (v88
                            + ((613566757 * (unint64_t)((-4194240 - v85 + (v85 << 16)) >> 7)) >> 32)
                            + v92
                            + ((613566757 * (unint64_t)((-4194240 - v89 + (v89 << 16)) >> 7)) >> 32)
                            + 2) >> 2;
        v65[1] = (v91
                              + ((613566757 * (unint64_t)((-4194240 - v87 + (v87 << 16)) >> 7)) >> 32)
                              + HIDWORD(v93)
                              + ((613566757 * (unint64_t)((-4194240 - v94 + (v94 << 16)) >> 7)) >> 32)
                              + 2) >> 2;
        v63 += 2;
        v64 += 4;
      }
      while (v63 < v37);
    }
    v16 += v15;
    v22 = (_WORD *)((char *)v22 + v153);
  }
  if (v26 != v36)
  {
    v95 = 0;
    v96 = v26 - v36;
    do
    {
      v97 = v16;
      v98 = v22;
      if ((v8 & 1) != 0)
      {
        v99 = *v16;
        v100 = v99 >> 6;
        v101 = v16[1];
        v102 = *(unsigned __int16 *)((char *)v16 + v15);
        v103 = *(unsigned __int16 *)((char *)v16 + v15 + 2);
        if (v99 >> 6 >= 0x3C0)
          v100 = 960;
        if (v99 >= 0x1000)
          v104 = v100;
        else
          v104 = 64;
        if (v101 >> 6 >= 0x3C0)
          v105 = 960;
        else
          v105 = v101 >> 6;
        if (v101 < 0x1000)
          v105 = 64;
        if (v102 >> 6 >= 0x3C0)
          v106 = 960;
        else
          v106 = v102 >> 6;
        if (v102 >= 0x1000)
          v107 = v106;
        else
          v107 = 64;
        if (v103 >> 6 >= 0x3C0)
          v108 = 960;
        else
          v108 = v103 >> 6;
        if (v103 >= 0x1000)
          v109 = v108;
        else
          v109 = 64;
        v110 = v16[2];
        v111 = v110 >> 6;
        v112 = v16[3];
        v113 = (unsigned __int16 *)((char *)v16 + v15 + 4);
        v114 = *v113;
        v115 = v113[1];
        if (v110 >> 6 >= 0x3C0)
          v111 = 960;
        if (v110 >= 0x1000)
          v116 = v111;
        else
          v116 = 64;
        if (v112 >> 6 >= 0x3C0)
          v117 = 960;
        else
          v117 = v112 >> 6;
        if (v112 < 0x1000)
          v117 = 64;
        if (v114 >> 6 >= 0x3C0)
          v118 = 960;
        else
          v118 = v114 >> 6;
        v119 = -4194240 - v104 + (v104 << 16);
        if (v114 < 0x1000)
          v118 = 64;
        v120 = (613566757 * (unint64_t)(v119 >> 7)) >> 32;
        if (v115 >> 6 >= 0x3C0)
          v121 = 960;
        else
          v121 = v115 >> 6;
        if (v115 < 0x1000)
          v121 = 64;
        v97 = v16 + 4;
        *v22 = (v120
                            + ((613566757 * (unint64_t)((-4194240 - v116 + (v116 << 16)) >> 7)) >> 32)
                            + ((613566757 * (unint64_t)((-4194240 - v107 + (v107 << 16)) >> 7)) >> 32)
                            + ((613566757 * (unint64_t)((-4194240 - v118 + (v118 << 16)) >> 7)) >> 32)
                            + 2) >> 2;
        v22[1] = (((613566757 * (unint64_t)((-4194240 - v105 + (v105 << 16)) >> 7)) >> 32)
                              + ((613566757 * (unint64_t)((-4194240 - v117 + (v117 << 16)) >> 7)) >> 32)
                              + ((613566757 * (unint64_t)((-4194240 - v109 + (v109 << 16)) >> 7)) >> 32)
                              + ((613566757 * (unint64_t)((-4194240 - v121 + (v121 << 16)) >> 7)) >> 32)
                              + 2) >> 2;
        v98 = v22 + 2;
      }
      if (v23 != v10)
      {
        v122 = 0;
        v123 = v97 + 2;
        do
        {
          v124 = &v98[v122];
          v125 = *(v123 - 2);
          v126 = v125 >> 6;
          v127 = *(v123 - 1);
          v128 = v127 >> 6;
          v129 = (unsigned __int16 *)((char *)v123 + v15);
          v130 = *(unsigned __int16 *)((char *)v123 + v15 - 4);
          v131 = *(unsigned __int16 *)((char *)v123 + v15 - 2);
          if (v125 >> 6 >= 0x3C0)
            v126 = 960;
          if (v125 >= 0x1000)
            v132 = v126;
          else
            v132 = 64;
          v133 = v131 >> 6;
          if (v128 >= 0x3C0)
            v128 = 960;
          if (v127 >= 0x1000)
            v134 = v128;
          else
            v134 = 64;
          if (v130 >> 6 >= 0x3C0)
            v135 = 960;
          else
            v135 = v130 >> 6;
          if (v130 < 0x1000)
            v135 = 64;
          if (v133 >= 0x3C0)
            v133 = 960;
          v136 = *v123;
          v137 = v136 >> 6;
          v79 = v131 >= 0x1000;
          v138 = v123[1];
          v139 = v138 >> 6;
          v140 = *v129;
          v141 = v140 >> 6;
          v142 = v129[1];
          if (!v79)
            v133 = 64;
          if (v137 >= 0x3C0)
            v137 = 960;
          if (v136 >= 0x1000)
            v143 = v137;
          else
            v143 = 64;
          v144 = v142 >> 6;
          if (v139 >= 0x3C0)
            v139 = 960;
          if (v138 >= 0x1000)
            v145 = v139;
          else
            v145 = 64;
          if (v141 >= 0x3C0)
            v141 = 960;
          v146 = (613566757 * (unint64_t)((-4194240 - v132 + (v132 << 16)) >> 7)) >> 32;
          if (v140 < 0x1000)
            v141 = 64;
          v147 = 613566757 * ((-4194240 - v134 + (v134 << 16)) >> 7);
          if (v144 >= 0x3C0)
            v144 = 960;
          v148 = HIDWORD(v147);
          v149 = (613566757 * (unint64_t)((-4194240 - v135 + (v135 << 16)) >> 7)) >> 32;
          v150 = 613566757 * ((-4194240 - v133 + (v133 << 16)) >> 7);
          if (v142 >= 0x1000)
            v151 = v144;
          else
            v151 = 64;
          *v124 = (v146
                               + ((613566757 * (unint64_t)((-4194240 - v143 + (v143 << 16)) >> 7)) >> 32)
                               + v149
                               + ((613566757 * (unint64_t)((-4194240 - v141 + (v141 << 16)) >> 7)) >> 32)
                               + 2) >> 2;
          v124[1] = (v148
                                 + ((613566757 * (unint64_t)((-4194240 - v145 + (v145 << 16)) >> 7)) >> 32)
                                 + HIDWORD(v150)
                                 + ((613566757 * (unint64_t)((-4194240 - v151 + (v151 << 16)) >> 7)) >> 32)
                                 + 2) >> 2;
          v122 += 2;
          v123 += 4;
        }
        while (v122 < v37);
      }
      v16 += v15;
      v22 = (_WORD *)((char *)v22 + v153);
      v95 += 2;
    }
    while (v95 < v96);
  }
  return 0;
}

uint64_t vt_CopyDec_x444_sf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  unsigned __int16 *v39;
  _WORD *v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  unint64_t v46;
  _WORD *v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  int v51;
  int v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unsigned __int16 *v56;
  _WORD *v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  int v61;
  int v62;
  unint64_t v63;
  _WORD *v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  int v68;
  int v69;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * (v12 + v8) + 4 * (v10 + v9));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - (v10 + v9);
  v25 = v18 - v17;
  if (v24 >= v25)
    v24 = v25;
  v26 = v14 - v13;
  v27 = v20 - v19;
  if (v26 < v20 - v19)
    v27 = v26;
  if (v27)
  {
    v28 = 0;
    v29 = *a4;
    v30 = *a3 + *a4 * v13 + 2 * (v10 + v9);
    v31 = *a8;
    if (v13 >= v8)
      v32 = 0;
    else
      v32 = v29;
    v33 = v30 + v32;
    v34 = *a7 + v31 * v19 + v21;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
        {
          v36 = *(unsigned __int16 *)(v33 + 2 * i) >> 6;
          if (v36 >= 0x3AC)
            v36 = 940;
          if (v36 <= 0x40)
            v36 = 64;
          *(_WORD *)(v34 + 2 * i) = (-4194240 - v36 + (v36 << 16)) / 0x36C;
        }
      }
      v33 += v29;
      v34 += v31;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12)
    v37 = v12;
  else
    v37 = 0;
  if (v24 < v10)
    v10 = 0;
  v38 = v24 - v10;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v41 = *v16;
      v42 = v41 >> 6;
      v43 = v16[1];
      v44 = v43 >> 6;
      if (v41 >> 6 >= 0x3C0)
        v42 = 960;
      if (v41 < 0x1000)
        v42 = 64;
      if (v44 >= 0x3C0)
        v44 = 960;
      if (v43 >= 0x1000)
        v45 = v44;
      else
        v45 = 64;
      v39 = v16 + 4;
      *v23 = (613566757 * (unint64_t)((-4194240 - v42 + (v42 << 16)) >> 7)) >> 32;
      v23[1] = (613566757 * (unint64_t)((-4194240 - v45 + (v45 << 16)) >> 7)) >> 32;
      v40 = v23 + 2;
    }
    else
    {
      v39 = v16;
      v40 = v23;
    }
    if (v24 != v10)
    {
      v46 = 0;
      do
      {
        v47 = &v40[v46];
        v48 = *v39;
        v49 = v48 >> 6;
        v50 = v39[1];
        if (v48 >> 6 >= 0x3C0)
          v49 = 960;
        if (v48 >= 0x1000)
          v51 = v49;
        else
          v51 = 64;
        if (v50 >> 6 >= 0x3C0)
          v52 = 960;
        else
          v52 = v50 >> 6;
        if (v50 < 0x1000)
          v52 = 64;
        *v47 = (613566757 * (unint64_t)((-4194240 - v51 + (v51 << 16)) >> 7)) >> 32;
        v47[1] = (613566757 * (unint64_t)((-4194240 - v52 + (v52 << 16)) >> 7)) >> 32;
        v46 += 2;
        v39 += 4;
      }
      while (v46 < v38);
    }
    v16 += v15;
    v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v27 != v37)
  {
    v53 = 0;
    v54 = v27 - v37;
    v55 = 2 * v15;
    do
    {
      v56 = v16;
      v57 = v23;
      if ((v9 & 1) != 0)
      {
        v58 = *v16;
        v59 = v58 >> 6;
        v60 = v16[1];
        if (v58 >> 6 >= 0x3C0)
          v59 = 960;
        if (v58 < 0x1000)
          v59 = 64;
        if (v60 >> 6 >= 0x3C0)
          v61 = 960;
        else
          v61 = v60 >> 6;
        if (v60 >= 0x1000)
          v62 = v61;
        else
          v62 = 64;
        v56 = v16 + 4;
        *v23 = (613566757 * (unint64_t)((-4194240 - v59 + (v59 << 16)) >> 7)) >> 32;
        v23[1] = (613566757 * (unint64_t)((-4194240 - v62 + (v62 << 16)) >> 7)) >> 32;
        v57 = v23 + 2;
      }
      if (v24 != v10)
      {
        v63 = 0;
        do
        {
          v64 = &v57[v63];
          v65 = *v56;
          v66 = v65 >> 6;
          v67 = v56[1];
          if (v65 >> 6 >= 0x3C0)
            v66 = 960;
          if (v65 >= 0x1000)
            v68 = v66;
          else
            v68 = 64;
          if (v67 >> 6 >= 0x3C0)
            v69 = 960;
          else
            v69 = v67 >> 6;
          if (v67 < 0x1000)
            v69 = 64;
          *v64 = (613566757 * (unint64_t)((-4194240 - v68 + (v68 << 16)) >> 7)) >> 32;
          v64[1] = (613566757 * (unint64_t)((-4194240 - v69 + (v69 << 16)) >> 7)) >> 32;
          v63 += 2;
          v56 += 4;
        }
        while (v63 < v38);
      }
      v16 = (unsigned __int16 *)((char *)v16 + v55);
      v23 = (_WORD *)((char *)v23 + v22);
      v53 += 2;
    }
    while (v53 < v54);
  }
  return 0;
}

uint64_t vt_Copy_x444_t4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  __int16 *v32;
  _WORD *v33;
  __int16 v34;
  unint64_t v35;
  unint64_t v36;
  __int16 v37;
  __int16 v38;
  __int16 v39;
  __int16 v40;
  unint64_t v41;
  uint64_t v42;
  __int16 *v43;
  _WORD *v44;
  __int16 v45;
  unint64_t v46;
  unint64_t v47;
  __int16 v48;
  __int16 v49;
  __int16 v50;
  __int16 v51;
  __int16 v52;
  __int16 v53;
  unint64_t v54;
  __int16 v55;
  __int16 v56;
  __int16 v57;
  __int16 v58;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a2[3];
  v12 = a4[1];
  v13 = (__int16 *)(a3[1] + v12 * v8 + 4 * v9);
  v14 = a6[4];
  v15 = a6[5];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (v11 >= a6[3])
    v11 = a6[3];
  if (v11)
  {
    v18 = 0;
    v19 = *a4;
    v20 = *a8;
    v21 = a8[2];
    v22 = a7[2] + v21 * v15 + 2 * v14;
    v23 = *a7 + *a8 * v15 + 2 * v14;
    v24 = *a3 + v19 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
        {
          *(_WORD *)(v22 + 2 * i) = -1;
          *(_WORD *)(v23 + 2 * i) = *(_WORD *)(v24 + 2 * i) & 0xFFC0;
        }
      }
      v24 += v19;
      v23 += v20;
      v22 += v21;
      ++v18;
    }
    while (v18 != v11);
  }
  v26 = v8 & 1;
  if (v11 >= v26)
    v27 = v8 & 1;
  else
    v27 = 0;
  v28 = v9;
  v29 = v9 & 1;
  if (v10 >= v29)
    v30 = v29;
  else
    v30 = 0;
  v31 = v10 - v30;
  if ((v8 & 1) != 0)
  {
    if ((v28 & 1) != 0)
    {
      v32 = v13 + 2;
      v34 = v13[1] & 0xFFC0;
      *v17 = *v13 & 0xFFC0;
      v17[1] = v34;
      v33 = v17 + 2;
    }
    else
    {
      v32 = v13;
      v33 = v17;
    }
    if (v10 == v30)
    {
      v35 = 0;
    }
    else
    {
      v36 = v10 - v30;
      do
      {
        v37 = *v32;
        v38 = v32[1];
        v32 += 2;
        *v33 = v37 & 0xFFC0;
        v33[1] = v38 & 0xFFC0;
        v33 += 2;
        --v36;
      }
      while (v36);
      v35 = v10 - v30;
    }
    if (v35 + v29 < v10)
    {
      v39 = *v32 & 0xFFC0;
      v40 = v32[1] & 0xFFC0;
      *v33 = v39;
      v33[1] = v40;
    }
    v13 = (__int16 *)((char *)v13 + v12);
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v11 == v27)
  {
    v41 = 0;
  }
  else
  {
    v42 = 0;
    v41 = v11 - v27;
    do
    {
      v43 = v13;
      v44 = v17;
      if ((v28 & 1) != 0)
      {
        v43 = v13 + 2;
        v45 = v13[1] & 0xFFC0;
        *v17 = *v13 & 0xFFC0;
        v17[1] = v45;
        v44 = v17 + 2;
      }
      if (v10 == v30)
      {
        v46 = 0;
      }
      else
      {
        v47 = v10 - v30;
        do
        {
          v48 = *v43;
          v49 = v43[1];
          v43 += 2;
          *v44 = v48 & 0xFFC0;
          v44[1] = v49 & 0xFFC0;
          v44 += 2;
          --v47;
        }
        while (v47);
        v46 = v10 - v30;
      }
      if (v46 + v29 < v10)
      {
        v50 = *v43 & 0xFFC0;
        v51 = v43[1] & 0xFFC0;
        *v44 = v50;
        v44[1] = v51;
      }
      v13 = (__int16 *)((char *)v13 + v12);
      v17 = (_WORD *)((char *)v17 + v16);
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v26 < v11)
  {
    if ((v28 & 1) != 0)
    {
      v52 = *v13;
      v53 = v13[1];
      v13 += 2;
      *v17 = v52 & 0xFFC0;
      v17[1] = v53 & 0xFFC0;
      v17 += 2;
    }
    if (v10 == v30)
    {
      v31 = 0;
    }
    else
    {
      v54 = v10 - v30;
      do
      {
        v55 = *v13;
        v56 = v13[1];
        v13 += 2;
        *v17 = v55 & 0xFFC0;
        v17[1] = v56 & 0xFFC0;
        v17 += 2;
        --v54;
      }
      while (v54);
    }
    if (v31 + v29 < v10)
    {
      v57 = *v13 & 0xFFC0;
      v58 = v13[1] & 0xFFC0;
      *v17 = v57;
      v17[1] = v58;
    }
  }
  return 0;
}

uint64_t vt_Copy_x444_tv44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  __int16 *v30;
  _WORD *v31;
  __int16 v32;
  unint64_t v33;
  unint64_t v34;
  __int16 v35;
  __int16 v36;
  __int16 v37;
  __int16 v38;
  unint64_t v39;
  uint64_t v40;
  __int16 *v41;
  _WORD *v42;
  __int16 v43;
  unint64_t v44;
  unint64_t v45;
  __int16 v46;
  __int16 v47;
  __int16 v48;
  __int16 v49;
  __int16 v50;
  __int16 v51;
  unint64_t v52;
  __int16 v53;
  __int16 v54;
  __int16 v55;
  __int16 v56;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a2[3];
  v12 = a4[1];
  v13 = (__int16 *)(a3[1] + v12 * v8 + 4 * v9);
  v14 = a6[4];
  v15 = a6[5];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (v11 >= a6[3])
    v11 = a6[3];
  if (v11)
  {
    v18 = 0;
    v19 = *a4;
    v20 = *a8;
    v21 = *a7 + *a8 * v15 + 2 * v14;
    v22 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
          *(_WORD *)(v21 + 2 * i) = *(_WORD *)(v22 + 2 * i) & 0xFFC0;
      }
      v22 += v19;
      v21 += v20;
      ++v18;
    }
    while (v18 != v11);
  }
  v24 = v8 & 1;
  if (v11 >= v24)
    v25 = v8 & 1;
  else
    v25 = 0;
  v26 = v9;
  v27 = v9 & 1;
  if (v10 >= v27)
    v28 = v27;
  else
    v28 = 0;
  v29 = v10 - v28;
  if ((v8 & 1) != 0)
  {
    if ((v26 & 1) != 0)
    {
      v30 = v13 + 2;
      v32 = v13[1] & 0xFFC0;
      *v17 = *v13 & 0xFFC0;
      v17[1] = v32;
      v31 = v17 + 2;
    }
    else
    {
      v30 = v13;
      v31 = v17;
    }
    if (v10 == v28)
    {
      v33 = 0;
    }
    else
    {
      v34 = v10 - v28;
      do
      {
        v35 = *v30;
        v36 = v30[1];
        v30 += 2;
        *v31 = v35 & 0xFFC0;
        v31[1] = v36 & 0xFFC0;
        v31 += 2;
        --v34;
      }
      while (v34);
      v33 = v10 - v28;
    }
    if (v33 + v27 < v10)
    {
      v37 = *v30 & 0xFFC0;
      v38 = v30[1] & 0xFFC0;
      *v31 = v37;
      v31[1] = v38;
    }
    v13 = (__int16 *)((char *)v13 + v12);
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v11 == v25)
  {
    v39 = 0;
  }
  else
  {
    v40 = 0;
    v39 = v11 - v25;
    do
    {
      v41 = v13;
      v42 = v17;
      if ((v26 & 1) != 0)
      {
        v41 = v13 + 2;
        v43 = v13[1] & 0xFFC0;
        *v17 = *v13 & 0xFFC0;
        v17[1] = v43;
        v42 = v17 + 2;
      }
      if (v10 == v28)
      {
        v44 = 0;
      }
      else
      {
        v45 = v10 - v28;
        do
        {
          v46 = *v41;
          v47 = v41[1];
          v41 += 2;
          *v42 = v46 & 0xFFC0;
          v42[1] = v47 & 0xFFC0;
          v42 += 2;
          --v45;
        }
        while (v45);
        v44 = v10 - v28;
      }
      if (v44 + v27 < v10)
      {
        v48 = *v41 & 0xFFC0;
        v49 = v41[1] & 0xFFC0;
        *v42 = v48;
        v42[1] = v49;
      }
      v13 = (__int16 *)((char *)v13 + v12);
      v17 = (_WORD *)((char *)v17 + v16);
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v24 < v11)
  {
    if ((v26 & 1) != 0)
    {
      v50 = *v13;
      v51 = v13[1];
      v13 += 2;
      *v17 = v50 & 0xFFC0;
      v17[1] = v51 & 0xFFC0;
      v17 += 2;
    }
    if (v10 == v28)
    {
      v29 = 0;
    }
    else
    {
      v52 = v10 - v28;
      do
      {
        v53 = *v13;
        v54 = v13[1];
        v13 += 2;
        *v17 = v53 & 0xFFC0;
        v17[1] = v54 & 0xFFC0;
        v17 += 2;
        --v52;
      }
      while (v52);
    }
    if (v29 + v27 < v10)
    {
      v55 = *v13 & 0xFFC0;
      v56 = v13[1] & 0xFFC0;
      *v17 = v55;
      v17[1] = v56;
    }
  }
  return 0;
}

uint64_t vt_Copy_x444_tf44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned __int16 *v32;
  _WORD *v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  int v37;
  int v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  int v45;
  int v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  unint64_t v52;
  uint64_t v53;
  unsigned __int16 *v54;
  _WORD *v55;
  unsigned int v56;
  int v57;
  unsigned int v58;
  int v59;
  int v60;
  int v61;
  unint64_t v62;
  unint64_t v63;
  unsigned int v64;
  int v65;
  unsigned int v66;
  int v67;
  int v68;
  unsigned int v69;
  int v70;
  unsigned int v71;
  int v72;
  int v73;
  int v74;
  unsigned int v75;
  int v76;
  unsigned int v77;
  unsigned int v78;
  int v79;
  unint64_t v80;
  unsigned int v81;
  int v82;
  unsigned int v83;
  int v84;
  int v85;
  unsigned int v86;
  int v87;
  unsigned int v88;
  unsigned int v89;
  int v90;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a2[3];
  v12 = a4[1];
  v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 4 * v9);
  v14 = a6[4];
  v15 = a6[5];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (v11 >= a6[3])
    v18 = a6[3];
  else
    v18 = v11;
  if (v18)
  {
    v19 = 0;
    v20 = *a4;
    v21 = *a8;
    v22 = *a7 + *a8 * v15 + 2 * v14;
    v23 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
        {
          v25 = *(unsigned __int16 *)(v23 + 2 * i) >> 6;
          if (v25 >= 0x3AC)
            v25 = 940;
          if (v25 <= 0x40)
            v25 = 64;
          *(_WORD *)(v22 + 2 * i) = 16 * ((-262080 - v25 + (v25 << 12)) / 0x36C);
        }
      }
      v23 += v20;
      v22 += v21;
      ++v19;
    }
    while (v19 != v18);
  }
  v26 = v8 & 1;
  if (v18 >= v26)
    v27 = v8 & 1;
  else
    v27 = 0;
  v28 = v9;
  v29 = v9 & 1;
  if (v10 >= v29)
    v30 = v29;
  else
    v30 = 0;
  v31 = v10 - v30;
  if ((v8 & 1) != 0)
  {
    if ((v28 & 1) != 0)
    {
      v34 = *v13;
      v35 = v34 >> 6;
      v36 = v13[1];
      if (v34 >> 6 >= 0x3C0)
        v35 = 960;
      if (v34 >= 0x1000)
        v37 = v35;
      else
        v37 = 64;
      if (v36 >> 6 >= 0x3C0)
        v38 = 960;
      else
        v38 = v36 >> 6;
      if (v36 >= 0x1000)
        v39 = v38;
      else
        v39 = 64;
      v32 = v13 + 2;
      *v17 = 16 * ((613566757 * (unint64_t)((-262080 - v37 + (v37 << 12)) >> 7)) >> 32);
      v17[1] = 16 * ((613566757 * (unint64_t)((-262080 - v39 + (v39 << 12)) >> 7)) >> 32);
      v33 = v17 + 2;
    }
    else
    {
      v32 = v13;
      v33 = v17;
    }
    if (v10 == v30)
    {
      v40 = 0;
    }
    else
    {
      v41 = v10 - v30;
      do
      {
        v42 = *v32;
        v43 = v42 >> 6;
        v44 = v32[1];
        if (v42 >> 6 >= 0x3C0)
          v43 = 960;
        if (v42 >= 0x1000)
          v45 = v43;
        else
          v45 = 64;
        if (v44 >> 6 >= 0x3C0)
          v46 = 960;
        else
          v46 = v44 >> 6;
        if (v44 < 0x1000)
          v46 = 64;
        v32 += 2;
        *v33 = 16 * ((613566757 * (unint64_t)((-262080 - v45 + (v45 << 12)) >> 7)) >> 32);
        v33[1] = 16 * ((613566757 * (unint64_t)((-262080 - v46 + (v46 << 12)) >> 7)) >> 32);
        v33 += 2;
        --v41;
      }
      while (v41);
      v40 = v10 - v30;
    }
    if (v40 + v29 < v10)
    {
      v47 = *v32;
      v48 = v47 >> 6;
      v49 = v32[1];
      v50 = v49 >> 6;
      if (v47 >> 6 >= 0x3C0)
        v48 = 960;
      if (v47 < 0x1000)
        v48 = 64;
      if (v50 >= 0x3C0)
        v50 = 960;
      if (v49 >= 0x1000)
        v51 = v50;
      else
        v51 = 64;
      *v33 = 16 * ((613566757 * (unint64_t)((-262080 - v48 + (v48 << 12)) >> 7)) >> 32);
      v33[1] = 16 * ((613566757 * (unint64_t)((-262080 - v51 + (v51 << 12)) >> 7)) >> 32);
    }
    v13 = (unsigned __int16 *)((char *)v13 + v12);
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v18 == v27)
  {
    v52 = 0;
  }
  else
  {
    v53 = 0;
    v52 = v18 - v27;
    do
    {
      v54 = v13;
      v55 = v17;
      if ((v28 & 1) != 0)
      {
        v56 = *v13;
        v57 = v56 >> 6;
        v58 = v13[1];
        if (v56 >> 6 >= 0x3C0)
          v57 = 960;
        if (v56 >= 0x1000)
          v59 = v57;
        else
          v59 = 64;
        if (v58 >> 6 >= 0x3C0)
          v60 = 960;
        else
          v60 = v58 >> 6;
        if (v58 >= 0x1000)
          v61 = v60;
        else
          v61 = 64;
        v54 = v13 + 2;
        *v17 = 16 * ((613566757 * (unint64_t)((-262080 - v59 + (v59 << 12)) >> 7)) >> 32);
        v17[1] = 16 * ((613566757 * (unint64_t)((-262080 - v61 + (v61 << 12)) >> 7)) >> 32);
        v55 = v17 + 2;
      }
      if (v10 == v30)
      {
        v62 = 0;
      }
      else
      {
        v63 = v10 - v30;
        do
        {
          v64 = *v54;
          v65 = v64 >> 6;
          v66 = v54[1];
          if (v64 >> 6 >= 0x3C0)
            v65 = 960;
          if (v64 >= 0x1000)
            v67 = v65;
          else
            v67 = 64;
          if (v66 >> 6 >= 0x3C0)
            v68 = 960;
          else
            v68 = v66 >> 6;
          if (v66 < 0x1000)
            v68 = 64;
          v54 += 2;
          *v55 = 16 * ((613566757 * (unint64_t)((-262080 - v67 + (v67 << 12)) >> 7)) >> 32);
          v55[1] = 16 * ((613566757 * (unint64_t)((-262080 - v68 + (v68 << 12)) >> 7)) >> 32);
          v55 += 2;
          --v63;
        }
        while (v63);
        v62 = v10 - v30;
      }
      if (v62 + v29 < v10)
      {
        v69 = *v54;
        v70 = v69 >> 6;
        v71 = v54[1];
        if (v69 >> 6 >= 0x3C0)
          v70 = 960;
        if (v69 >= 0x1000)
          v72 = v70;
        else
          v72 = 64;
        if (v71 >> 6 >= 0x3C0)
          v73 = 960;
        else
          v73 = v71 >> 6;
        if (v71 >= 0x1000)
          v74 = v73;
        else
          v74 = 64;
        *v55 = 16 * ((613566757 * (unint64_t)((-262080 - v72 + (v72 << 12)) >> 7)) >> 32);
        v55[1] = 16 * ((613566757 * (unint64_t)((-262080 - v74 + (v74 << 12)) >> 7)) >> 32);
      }
      v13 = (unsigned __int16 *)((char *)v13 + v12);
      v17 = (_WORD *)((char *)v17 + v16);
      ++v53;
    }
    while (v53 != v52);
  }
  if (v52 + v26 < v18)
  {
    if ((v28 & 1) != 0)
    {
      v75 = *v13;
      v76 = v75 >> 6;
      v77 = v13[1];
      v78 = v77 >> 6;
      if (v75 >> 6 >= 0x3C0)
        v76 = 960;
      if (v75 < 0x1000)
        v76 = 64;
      if (v78 >= 0x3C0)
        v78 = 960;
      if (v77 >= 0x1000)
        v79 = v78;
      else
        v79 = 64;
      v13 += 2;
      *v17 = 16 * ((613566757 * (unint64_t)((-262080 - v76 + (v76 << 12)) >> 7)) >> 32);
      v17[1] = 16 * ((613566757 * (unint64_t)((-262080 - v79 + (v79 << 12)) >> 7)) >> 32);
      v17 += 2;
    }
    if (v10 == v30)
    {
      v31 = 0;
    }
    else
    {
      v80 = v10 - v30;
      do
      {
        v81 = *v13;
        v82 = v81 >> 6;
        v83 = v13[1];
        if (v81 >> 6 >= 0x3C0)
          v82 = 960;
        if (v81 >= 0x1000)
          v84 = v82;
        else
          v84 = 64;
        if (v83 >> 6 >= 0x3C0)
          v85 = 960;
        else
          v85 = v83 >> 6;
        if (v83 < 0x1000)
          v85 = 64;
        v13 += 2;
        *v17 = 16 * ((613566757 * (unint64_t)((-262080 - v84 + (v84 << 12)) >> 7)) >> 32);
        v17[1] = 16 * ((613566757 * (unint64_t)((-262080 - v85 + (v85 << 12)) >> 7)) >> 32);
        v17 += 2;
        --v80;
      }
      while (v80);
    }
    if (v31 + v29 < v10)
    {
      v86 = *v13;
      v87 = v86 >> 6;
      v88 = v13[1];
      v89 = v88 >> 6;
      if (v86 >> 6 >= 0x3C0)
        v87 = 960;
      if (v86 < 0x1000)
        v87 = 64;
      if (v89 >= 0x3C0)
        v89 = 960;
      if (v88 >= 0x1000)
        v90 = v89;
      else
        v90 = 64;
      *v17 = 16 * ((613566757 * (unint64_t)((-262080 - v87 + (v87 << 12)) >> 7)) >> 32);
      v17[1] = 16 * ((613566757 * (unint64_t)((-262080 - v90 + (v90 << 12)) >> 7)) >> 32);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_x444_t2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  _WORD *v36;
  _WORD *v37;
  int v38;
  unint64_t v39;
  _WORD *v40;
  int v41;
  unint64_t v42;
  uint64_t v43;
  _WORD *v44;
  _WORD *v45;
  int v46;
  unint64_t v47;
  _WORD *v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unint64_t v54;
  _WORD *v55;
  int v56;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = a8[2];
    v28 = a7[2] + v27 * v18 + v19;
    v29 = *a7 + *a8 * v18 + v19;
    v30 = *a3 + v25 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = *(_WORD *)(v30 + 2 * i) & 0xFFC0;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v8);
  }
  v32 = v12 & 1;
  if (v8 >= v32)
    v33 = v12 & 1;
  else
    v33 = 0;
  v34 = v9;
  if (v22 < v10)
    v10 = 0;
  v35 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v34 & 1) != 0)
    {
      v36 = v14 + 4;
      v38 = ((v14[3] >> 4) & 0xFFC) + ((v14[1] >> 4) & 0xFFC);
      *v21 = 8 * (((v14[2] >> 4) & 0xFFC) + ((*v14 >> 4) & 0xFFC));
      v21[1] = 8 * v38;
      v37 = v21 + 2;
    }
    else
    {
      v36 = v14;
      v37 = v21;
    }
    if (v22 != v10)
    {
      v39 = 0;
      do
      {
        v40 = &v37[v39];
        v41 = (((unsigned __int16)v36[3] >> 4) & 0xFFC) + (((unsigned __int16)v36[1] >> 4) & 0xFFC);
        *v40 = 8 * (((v36[2] >> 4) & 0xFFC) + ((*v36 >> 4) & 0xFFC));
        v40[1] = 8 * v41;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v33)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v8 - v33;
    do
    {
      v44 = v14;
      v45 = v21;
      if ((v34 & 1) != 0)
      {
        v44 = v14 + 4;
        v46 = ((v14[3] >> 4) & 0xFFC) + ((v14[1] >> 4) & 0xFFC);
        *v21 = 8 * (((v14[2] >> 4) & 0xFFC) + ((*v14 >> 4) & 0xFFC));
        v21[1] = 8 * v46;
        v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        v47 = 0;
        do
        {
          v48 = &v45[v47];
          v49 = (((unsigned __int16)v44[3] >> 4) & 0xFFC) + (((unsigned __int16)v44[1] >> 4) & 0xFFC);
          *v48 = 8 * (((v44[2] >> 4) & 0xFFC) + ((*v44 >> 4) & 0xFFC));
          v48[1] = 8 * v49;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v8)
  {
    if ((v34 & 1) != 0)
    {
      v50 = *v14;
      v51 = v14[1];
      v52 = v14[2];
      v53 = v14[3];
      v14 += 4;
      *v21 = 8 * (((v52 >> 4) & 0xFFC) + ((v50 >> 4) & 0xFFC));
      v21[1] = 8 * (((v53 >> 4) & 0xFFC) + ((v51 >> 4) & 0xFFC));
      v21 += 2;
    }
    if (v22 != v10)
    {
      v54 = 0;
      do
      {
        v55 = &v21[v54];
        v56 = ((v14[3] >> 4) & 0xFFC) + ((v14[1] >> 4) & 0xFFC);
        *v55 = 8 * (((v14[2] >> 4) & 0xFFC) + ((*v14 >> 4) & 0xFFC));
        v55[1] = 8 * v56;
        v54 += 2;
        v14 += 4;
      }
      while (v54 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_x444_t2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  _WORD *v36;
  _WORD *v37;
  __int16 v38;
  unint64_t v39;
  _WORD *v40;
  __int16 v41;
  unint64_t v42;
  uint64_t v43;
  _WORD *v44;
  _WORD *v45;
  __int16 v46;
  unint64_t v47;
  _WORD *v48;
  __int16 v49;
  __int16 v50;
  __int16 v51;
  unint64_t v52;
  _WORD *v53;
  __int16 v54;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (_WORD *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = a8[2];
    v28 = a7[2] + v27 * v18 + v19;
    v29 = *a7 + *a8 * v18 + v19;
    v30 = *a3 + v25 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = *(_WORD *)(v30 + 2 * i) & 0xFFC0;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v8);
  }
  v32 = v12 & 1;
  if (v8 >= v32)
    v33 = v12 & 1;
  else
    v33 = 0;
  v34 = v9;
  if (v22 < v10)
    v10 = 0;
  v35 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v34 & 1) != 0)
    {
      v36 = v14 + 4;
      v38 = v14[1] & 0xFFC0;
      *v21 = *v14 & 0xFFC0;
      v21[1] = v38;
      v37 = v21 + 2;
    }
    else
    {
      v36 = v14;
      v37 = v21;
    }
    if (v22 != v10)
    {
      v39 = 0;
      do
      {
        v40 = &v37[v39];
        v41 = v36[1] & 0xFFC0;
        *v40 = *v36 & 0xFFC0;
        v40[1] = v41;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    v14 = (_WORD *)((char *)v14 + v13);
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v33)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v8 - v33;
    do
    {
      v44 = v14;
      v45 = v21;
      if ((v34 & 1) != 0)
      {
        v44 = v14 + 4;
        v46 = v14[1] & 0xFFC0;
        *v21 = *v14 & 0xFFC0;
        v21[1] = v46;
        v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        v47 = 0;
        do
        {
          v48 = &v45[v47];
          v49 = v44[1] & 0xFFC0;
          *v48 = *v44 & 0xFFC0;
          v48[1] = v49;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      v14 = (_WORD *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v8)
  {
    if ((v34 & 1) != 0)
    {
      v50 = *v14;
      v51 = v14[1];
      v14 += 4;
      *v21 = v50 & 0xFFC0;
      v21[1] = v51 & 0xFFC0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v52 = 0;
      do
      {
        v53 = &v21[v52];
        v54 = v14[1] & 0xFFC0;
        *v53 = *v14 & 0xFFC0;
        v53[1] = v54;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_x444_tv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  _WORD *v34;
  _WORD *v35;
  int v36;
  unint64_t v37;
  _WORD *v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  _WORD *v42;
  _WORD *v43;
  int v44;
  unint64_t v45;
  _WORD *v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unint64_t v52;
  _WORD *v53;
  int v54;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = *a7 + *a8 * v18 + v19;
    v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = *(_WORD *)(v28 + 2 * i) & 0xFFC0;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  v30 = v12 & 1;
  if (v9 >= v30)
    v31 = v12 & 1;
  else
    v31 = 0;
  v32 = v8;
  if (v22 < v10)
    v10 = 0;
  v33 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v34 = v14 + 4;
      v36 = ((v14[3] >> 4) & 0xFFC) + ((v14[1] >> 4) & 0xFFC);
      *v21 = 8 * (((v14[2] >> 4) & 0xFFC) + ((*v14 >> 4) & 0xFFC));
      v21[1] = 8 * v36;
      v35 = v21 + 2;
    }
    else
    {
      v34 = v14;
      v35 = v21;
    }
    if (v22 != v10)
    {
      v37 = 0;
      do
      {
        v38 = &v35[v37];
        v39 = (((unsigned __int16)v34[3] >> 4) & 0xFFC) + (((unsigned __int16)v34[1] >> 4) & 0xFFC);
        *v38 = 8 * (((v34[2] >> 4) & 0xFFC) + ((*v34 >> 4) & 0xFFC));
        v38[1] = 8 * v39;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v9 - v31;
    do
    {
      v42 = v14;
      v43 = v21;
      if ((v32 & 1) != 0)
      {
        v42 = v14 + 4;
        v44 = ((v14[3] >> 4) & 0xFFC) + ((v14[1] >> 4) & 0xFFC);
        *v21 = 8 * (((v14[2] >> 4) & 0xFFC) + ((*v14 >> 4) & 0xFFC));
        v21[1] = 8 * v44;
        v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        v45 = 0;
        do
        {
          v46 = &v43[v45];
          v47 = (((unsigned __int16)v42[3] >> 4) & 0xFFC) + (((unsigned __int16)v42[1] >> 4) & 0xFFC);
          *v46 = 8 * (((v42[2] >> 4) & 0xFFC) + ((*v42 >> 4) & 0xFFC));
          v46[1] = 8 * v47;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if ((v32 & 1) != 0)
    {
      v48 = *v14;
      v49 = v14[1];
      v50 = v14[2];
      v51 = v14[3];
      v14 += 4;
      *v21 = 8 * (((v50 >> 4) & 0xFFC) + ((v48 >> 4) & 0xFFC));
      v21[1] = 8 * (((v51 >> 4) & 0xFFC) + ((v49 >> 4) & 0xFFC));
      v21 += 2;
    }
    if (v22 != v10)
    {
      v52 = 0;
      do
      {
        v53 = &v21[v52];
        v54 = ((v14[3] >> 4) & 0xFFC) + ((v14[1] >> 4) & 0xFFC);
        *v53 = 8 * (((v14[2] >> 4) & 0xFFC) + ((*v14 >> 4) & 0xFFC));
        v53[1] = 8 * v54;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_x444_tv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  _WORD *v34;
  _WORD *v35;
  __int16 v36;
  unint64_t v37;
  _WORD *v38;
  __int16 v39;
  unint64_t v40;
  uint64_t v41;
  _WORD *v42;
  _WORD *v43;
  __int16 v44;
  unint64_t v45;
  _WORD *v46;
  __int16 v47;
  __int16 v48;
  __int16 v49;
  unint64_t v50;
  _WORD *v51;
  __int16 v52;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (_WORD *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = *a7 + *a8 * v18 + v19;
    v28 = *a3 + v25 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = *(_WORD *)(v28 + 2 * i) & 0xFFC0;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v8);
  }
  v30 = v12 & 1;
  if (v8 >= v30)
    v31 = v12 & 1;
  else
    v31 = 0;
  v32 = v9;
  if (v22 < v10)
    v10 = 0;
  v33 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v34 = v14 + 4;
      v36 = v14[1] & 0xFFC0;
      *v21 = *v14 & 0xFFC0;
      v21[1] = v36;
      v35 = v21 + 2;
    }
    else
    {
      v34 = v14;
      v35 = v21;
    }
    if (v22 != v10)
    {
      v37 = 0;
      do
      {
        v38 = &v35[v37];
        v39 = v34[1] & 0xFFC0;
        *v38 = *v34 & 0xFFC0;
        v38[1] = v39;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 = (_WORD *)((char *)v14 + v13);
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v31)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v8 - v31;
    do
    {
      v42 = v14;
      v43 = v21;
      if ((v32 & 1) != 0)
      {
        v42 = v14 + 4;
        v44 = v14[1] & 0xFFC0;
        *v21 = *v14 & 0xFFC0;
        v21[1] = v44;
        v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        v45 = 0;
        do
        {
          v46 = &v43[v45];
          v47 = v42[1] & 0xFFC0;
          *v46 = *v42 & 0xFFC0;
          v46[1] = v47;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 = (_WORD *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v8)
  {
    if ((v32 & 1) != 0)
    {
      v48 = *v14;
      v49 = v14[1];
      v14 += 4;
      *v21 = v48 & 0xFFC0;
      v21[1] = v49 & 0xFFC0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v50 = 0;
      do
      {
        v51 = &v21[v50];
        v52 = v14[1] & 0xFFC0;
        *v51 = *v14 & 0xFFC0;
        v51[1] = v52;
        v50 += 2;
        v14 += 4;
      }
      while (v50 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_x444_tf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unsigned int v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  unsigned __int16 *v35;
  _WORD *v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  int v45;
  int v46;
  unint64_t v47;
  _WORD *v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  int v52;
  int v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  int v57;
  int v58;
  unint64_t v59;
  uint64_t v60;
  unsigned __int16 *v61;
  _WORD *v62;
  unsigned int v63;
  int v64;
  unsigned int v65;
  int v66;
  int v67;
  unsigned int v68;
  int v69;
  unsigned int v70;
  int v71;
  int v72;
  unint64_t v73;
  _WORD *v74;
  unsigned int v75;
  int v76;
  unsigned int v77;
  int v78;
  int v79;
  unsigned int v80;
  int v81;
  unsigned int v82;
  int v83;
  int v84;
  unsigned int v85;
  int v86;
  unsigned int v87;
  unsigned int v88;
  int v89;
  unsigned int v90;
  int v91;
  unsigned int v92;
  int v93;
  int v94;
  int v95;
  unint64_t v96;
  _WORD *v97;
  unsigned int v98;
  int v99;
  unsigned int v100;
  int v101;
  int v102;
  unsigned int v103;
  int v104;
  unsigned int v105;
  int v106;
  int v107;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = *a7 + *a8 * v18 + v19;
    v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          v30 = *(unsigned __int16 *)(v28 + 2 * i) >> 6;
          if (v30 >= 0x3AC)
            v30 = 940;
          if (v30 <= 0x40)
            v30 = 64;
          *(_WORD *)(v27 + 2 * i) = 16 * ((-262080 - v30 + (v30 << 12)) / 0x36C);
        }
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  v31 = v12 & 1;
  if (v9 >= v31)
    v32 = v12 & 1;
  else
    v32 = 0;
  v33 = v8;
  if (v22 < v10)
    v10 = 0;
  v34 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v37 = *v14;
      v38 = v37 >> 6;
      v39 = v14[1];
      v40 = v39 >> 6;
      if (v37 >> 6 >= 0x3C0)
        v38 = 960;
      if (v37 < 0x1000)
        v38 = 64;
      if (v40 >= 0x3C0)
        v40 = 960;
      if (v39 >= 0x1000)
        v41 = v40;
      else
        v41 = 64;
      v42 = v14[2];
      v43 = v42 >> 6;
      v44 = v14[3];
      if (v42 >> 6 >= 0x3C0)
        v43 = 960;
      if (v42 >= 0x1000)
        v45 = v43;
      else
        v45 = 64;
      if (v44 >> 6 >= 0x3C0)
        v46 = 960;
      else
        v46 = v44 >> 6;
      if (v44 < 0x1000)
        v46 = 64;
      v35 = v14 + 4;
      *v21 = (8
            * (((613566757 * (unint64_t)((-262080 - v45 + (v45 << 12)) >> 7)) >> 32)
             + ((613566757 * (unint64_t)((-262080 - v38 + (v38 << 12)) >> 7)) >> 32))
            + 8) & 0xFFF0;
      v21[1] = (8
              * (((613566757 * (unint64_t)((-262080 - v46 + (v46 << 12)) >> 7)) >> 32)
               + ((613566757 * (unint64_t)((-262080 - v41 + (v41 << 12)) >> 7)) >> 32))
              + 8) & 0xFFF0;
      v36 = v21 + 2;
    }
    else
    {
      v35 = v14;
      v36 = v21;
    }
    if (v22 != v10)
    {
      v47 = 0;
      do
      {
        v48 = &v36[v47];
        v49 = *v35;
        v50 = v49 >> 6;
        v51 = v35[1];
        if (v49 >> 6 >= 0x3C0)
          v50 = 960;
        if (v49 >= 0x1000)
          v52 = v50;
        else
          v52 = 64;
        if (v51 >> 6 >= 0x3C0)
          v53 = 960;
        else
          v53 = v51 >> 6;
        if (v51 < 0x1000)
          v53 = 64;
        v54 = v35[2];
        v55 = v54 >> 6;
        v56 = v35[3];
        if (v54 >> 6 >= 0x3C0)
          v55 = 960;
        if (v54 >= 0x1000)
          v57 = v55;
        else
          v57 = 64;
        if (v56 >> 6 >= 0x3C0)
          v58 = 960;
        else
          v58 = v56 >> 6;
        if (v56 < 0x1000)
          v58 = 64;
        *v48 = (8
              * (((613566757 * (unint64_t)((-262080 - v57 + (v57 << 12)) >> 7)) >> 32)
               + ((613566757 * (unint64_t)((-262080 - v52 + (v52 << 12)) >> 7)) >> 32))
              + 8) & 0xFFF0;
        v48[1] = (8
                * (((613566757 * (unint64_t)((-262080 - v58 + (v58 << 12)) >> 7)) >> 32)
                 + ((613566757 * (unint64_t)((-262080 - v53 + (v53 << 12)) >> 7)) >> 32))
                + 8) & 0xFFF0;
        v47 += 2;
        v35 += 4;
      }
      while (v47 < v34);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v32)
  {
    v59 = 0;
  }
  else
  {
    v60 = 0;
    v59 = v9 - v32;
    do
    {
      v61 = v14;
      v62 = v21;
      if ((v33 & 1) != 0)
      {
        v63 = *v14;
        v64 = v63 >> 6;
        v65 = v14[1];
        if (v63 >> 6 >= 0x3C0)
          v64 = 960;
        if (v63 < 0x1000)
          v64 = 64;
        if (v65 >> 6 >= 0x3C0)
          v66 = 960;
        else
          v66 = v65 >> 6;
        if (v65 >= 0x1000)
          v67 = v66;
        else
          v67 = 64;
        v68 = v14[2];
        v69 = v68 >> 6;
        v70 = v14[3];
        if (v68 >> 6 >= 0x3C0)
          v69 = 960;
        if (v68 < 0x1000)
          v69 = 64;
        if (v70 >> 6 >= 0x3C0)
          v71 = 960;
        else
          v71 = v70 >> 6;
        if (v70 >= 0x1000)
          v72 = v71;
        else
          v72 = 64;
        v61 = v14 + 4;
        *v21 = (8
              * (((613566757 * (unint64_t)((-262080 - v69 + (v69 << 12)) >> 7)) >> 32)
               + ((613566757 * (unint64_t)((-262080 - v64 + (v64 << 12)) >> 7)) >> 32))
              + 8) & 0xFFF0;
        v21[1] = (8
                * (((613566757 * (unint64_t)((-262080 - v72 + (v72 << 12)) >> 7)) >> 32)
                 + ((613566757 * (unint64_t)((-262080 - v67 + (v67 << 12)) >> 7)) >> 32))
                + 8) & 0xFFF0;
        v62 = v21 + 2;
      }
      if (v22 != v10)
      {
        v73 = 0;
        do
        {
          v74 = &v62[v73];
          v75 = *v61;
          v76 = v75 >> 6;
          v77 = v61[1];
          if (v75 >> 6 >= 0x3C0)
            v76 = 960;
          if (v75 >= 0x1000)
            v78 = v76;
          else
            v78 = 64;
          if (v77 >> 6 >= 0x3C0)
            v79 = 960;
          else
            v79 = v77 >> 6;
          if (v77 < 0x1000)
            v79 = 64;
          v80 = v61[2];
          v81 = v80 >> 6;
          v82 = v61[3];
          if (v80 >> 6 >= 0x3C0)
            v81 = 960;
          if (v80 >= 0x1000)
            v83 = v81;
          else
            v83 = 64;
          if (v82 >> 6 >= 0x3C0)
            v84 = 960;
          else
            v84 = v82 >> 6;
          if (v82 < 0x1000)
            v84 = 64;
          *v74 = (8
                * (((613566757 * (unint64_t)((-262080 - v83 + (v83 << 12)) >> 7)) >> 32)
                 + ((613566757 * (unint64_t)((-262080 - v78 + (v78 << 12)) >> 7)) >> 32))
                + 8) & 0xFFF0;
          v74[1] = (8
                  * (((613566757 * (unint64_t)((-262080 - v84 + (v84 << 12)) >> 7)) >> 32)
                   + ((613566757 * (unint64_t)((-262080 - v79 + (v79 << 12)) >> 7)) >> 32))
                  + 8) & 0xFFF0;
          v73 += 2;
          v61 += 4;
        }
        while (v73 < v34);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v60;
    }
    while (v60 != v59);
  }
  if (v59 + v31 < v9)
  {
    if ((v33 & 1) != 0)
    {
      v85 = *v14;
      v86 = v85 >> 6;
      v87 = v14[1];
      v88 = v87 >> 6;
      if (v85 >> 6 >= 0x3C0)
        v86 = 960;
      if (v85 < 0x1000)
        v86 = 64;
      if (v88 >= 0x3C0)
        v88 = 960;
      if (v87 >= 0x1000)
        v89 = v88;
      else
        v89 = 64;
      v90 = v14[2];
      v91 = v90 >> 6;
      v92 = v14[3];
      if (v90 >> 6 >= 0x3C0)
        v91 = 960;
      if (v90 >= 0x1000)
        v93 = v91;
      else
        v93 = 64;
      if (v92 >> 6 >= 0x3C0)
        v94 = 960;
      else
        v94 = v92 >> 6;
      if (v92 >= 0x1000)
        v95 = v94;
      else
        v95 = 64;
      v14 += 4;
      *v21 = (8
            * (((613566757 * (unint64_t)((-262080 - v93 + (v93 << 12)) >> 7)) >> 32)
             + ((613566757 * (unint64_t)((-262080 - v86 + (v86 << 12)) >> 7)) >> 32))
            + 8) & 0xFFF0;
      v21[1] = (8
              * (((613566757 * (unint64_t)((-262080 - v95 + (v95 << 12)) >> 7)) >> 32)
               + ((613566757 * (unint64_t)((-262080 - v89 + (v89 << 12)) >> 7)) >> 32))
              + 8) & 0xFFF0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v96 = 0;
      do
      {
        v97 = &v21[v96];
        v98 = *v14;
        v99 = v98 >> 6;
        v100 = v14[1];
        if (v98 >> 6 >= 0x3C0)
          v99 = 960;
        if (v98 >= 0x1000)
          v101 = v99;
        else
          v101 = 64;
        if (v100 >> 6 >= 0x3C0)
          v102 = 960;
        else
          v102 = v100 >> 6;
        if (v100 < 0x1000)
          v102 = 64;
        v103 = v14[2];
        v104 = v103 >> 6;
        v105 = v14[3];
        if (v103 >> 6 >= 0x3C0)
          v104 = 960;
        if (v103 >= 0x1000)
          v106 = v104;
        else
          v106 = 64;
        if (v105 >> 6 >= 0x3C0)
          v107 = 960;
        else
          v107 = v105 >> 6;
        if (v105 < 0x1000)
          v107 = 64;
        *v97 = (8
              * (((613566757 * (unint64_t)((-262080 - v106 + (v106 << 12)) >> 7)) >> 32)
               + ((613566757 * (unint64_t)((-262080 - v101 + (v101 << 12)) >> 7)) >> 32))
              + 8) & 0xFFF0;
        v97[1] = (8
                * (((613566757 * (unint64_t)((-262080 - v107 + (v107 << 12)) >> 7)) >> 32)
                 + ((613566757 * (unint64_t)((-262080 - v102 + (v102 << 12)) >> 7)) >> 32))
                + 8) & 0xFFF0;
        v96 += 2;
        v14 += 4;
      }
      while (v96 < v34);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_x444_tf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unsigned int v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  unsigned __int16 *v35;
  _WORD *v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  unint64_t v42;
  _WORD *v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  int v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  unsigned __int16 *v51;
  _WORD *v52;
  unsigned int v53;
  int v54;
  unsigned int v55;
  int v56;
  int v57;
  unint64_t v58;
  _WORD *v59;
  unsigned int v60;
  int v61;
  unsigned int v62;
  int v63;
  int v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  int v69;
  unint64_t v70;
  _WORD *v71;
  unsigned int v72;
  int v73;
  unsigned int v74;
  int v75;
  int v76;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = *a7 + *a8 * v18 + v19;
    v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          v30 = *(unsigned __int16 *)(v28 + 2 * i) >> 6;
          if (v30 >= 0x3AC)
            v30 = 940;
          if (v30 <= 0x40)
            v30 = 64;
          *(_WORD *)(v27 + 2 * i) = 16 * ((-262080 - v30 + (v30 << 12)) / 0x36C);
        }
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  v31 = v12 & 1;
  if (v9 >= v31)
    v32 = v12 & 1;
  else
    v32 = 0;
  v33 = v8;
  if (v22 < v10)
    v10 = 0;
  v34 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v37 = *v14;
      v38 = v37 >> 6;
      v39 = v14[1];
      v40 = v39 >> 6;
      if (v37 >> 6 >= 0x3C0)
        v38 = 960;
      if (v37 < 0x1000)
        v38 = 64;
      if (v40 >= 0x3C0)
        v40 = 960;
      if (v39 >= 0x1000)
        v41 = v40;
      else
        v41 = 64;
      v35 = v14 + 4;
      *v21 = 16 * ((613566757 * (unint64_t)((-262080 - v38 + (v38 << 12)) >> 7)) >> 32);
      v21[1] = 16 * ((613566757 * (unint64_t)((-262080 - v41 + (v41 << 12)) >> 7)) >> 32);
      v36 = v21 + 2;
    }
    else
    {
      v35 = v14;
      v36 = v21;
    }
    if (v22 != v10)
    {
      v42 = 0;
      do
      {
        v43 = &v36[v42];
        v44 = *v35;
        v45 = v44 >> 6;
        v46 = v35[1];
        if (v44 >> 6 >= 0x3C0)
          v45 = 960;
        if (v44 >= 0x1000)
          v47 = v45;
        else
          v47 = 64;
        if (v46 >> 6 >= 0x3C0)
          v48 = 960;
        else
          v48 = v46 >> 6;
        if (v46 < 0x1000)
          v48 = 64;
        *v43 = 16 * ((613566757 * (unint64_t)((-262080 - v47 + (v47 << 12)) >> 7)) >> 32);
        v43[1] = 16 * ((613566757 * (unint64_t)((-262080 - v48 + (v48 << 12)) >> 7)) >> 32);
        v42 += 2;
        v35 += 4;
      }
      while (v42 < v34);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v32)
  {
    v49 = 0;
  }
  else
  {
    v50 = 0;
    v49 = v9 - v32;
    do
    {
      v51 = v14;
      v52 = v21;
      if ((v33 & 1) != 0)
      {
        v53 = *v14;
        v54 = v53 >> 6;
        v55 = v14[1];
        if (v53 >> 6 >= 0x3C0)
          v54 = 960;
        if (v53 < 0x1000)
          v54 = 64;
        if (v55 >> 6 >= 0x3C0)
          v56 = 960;
        else
          v56 = v55 >> 6;
        if (v55 >= 0x1000)
          v57 = v56;
        else
          v57 = 64;
        v51 = v14 + 4;
        *v21 = 16 * ((613566757 * (unint64_t)((-262080 - v54 + (v54 << 12)) >> 7)) >> 32);
        v21[1] = 16 * ((613566757 * (unint64_t)((-262080 - v57 + (v57 << 12)) >> 7)) >> 32);
        v52 = v21 + 2;
      }
      if (v22 != v10)
      {
        v58 = 0;
        do
        {
          v59 = &v52[v58];
          v60 = *v51;
          v61 = v60 >> 6;
          v62 = v51[1];
          if (v60 >> 6 >= 0x3C0)
            v61 = 960;
          if (v60 >= 0x1000)
            v63 = v61;
          else
            v63 = 64;
          if (v62 >> 6 >= 0x3C0)
            v64 = 960;
          else
            v64 = v62 >> 6;
          if (v62 < 0x1000)
            v64 = 64;
          *v59 = 16 * ((613566757 * (unint64_t)((-262080 - v63 + (v63 << 12)) >> 7)) >> 32);
          v59[1] = 16 * ((613566757 * (unint64_t)((-262080 - v64 + (v64 << 12)) >> 7)) >> 32);
          v58 += 2;
          v51 += 4;
        }
        while (v58 < v34);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v50;
    }
    while (v50 != v49);
  }
  if (v49 + v31 < v9)
  {
    if ((v33 & 1) != 0)
    {
      v65 = *v14;
      v66 = v65 >> 6;
      v67 = v14[1];
      v68 = v67 >> 6;
      if (v65 >> 6 >= 0x3C0)
        v66 = 960;
      if (v65 < 0x1000)
        v66 = 64;
      if (v68 >= 0x3C0)
        v68 = 960;
      if (v67 >= 0x1000)
        v69 = v68;
      else
        v69 = 64;
      v14 += 4;
      *v21 = 16 * ((613566757 * (unint64_t)((-262080 - v66 + (v66 << 12)) >> 7)) >> 32);
      v21[1] = 16 * ((613566757 * (unint64_t)((-262080 - v69 + (v69 << 12)) >> 7)) >> 32);
      v21 += 2;
    }
    if (v22 != v10)
    {
      v70 = 0;
      do
      {
        v71 = &v21[v70];
        v72 = *v14;
        v73 = v72 >> 6;
        v74 = v14[1];
        if (v72 >> 6 >= 0x3C0)
          v73 = 960;
        if (v72 >= 0x1000)
          v75 = v73;
        else
          v75 = 64;
        if (v74 >> 6 >= 0x3C0)
          v76 = 960;
        else
          v76 = v74 >> 6;
        if (v74 < 0x1000)
          v76 = 64;
        *v71 = 16 * ((613566757 * (unint64_t)((-262080 - v75 + (v75 << 12)) >> 7)) >> 32);
        v71[1] = 16 * ((613566757 * (unint64_t)((-262080 - v76 + (v76 << 12)) >> 7)) >> 32);
        v70 += 2;
        v14 += 4;
      }
      while (v70 < v34);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_x444_tv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  unint64_t v36;
  unint64_t v37;
  _WORD *v38;
  _WORD *v39;
  unsigned __int16 *v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  unint64_t v44;
  _WORD *v45;
  _WORD *v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  _WORD *v50;
  _WORD *v51;
  unsigned __int16 *v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  unint64_t v56;
  _WORD *v57;
  _WORD *v58;
  int v59;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (_WORD *)(a3[1] + v15 * (v12 + v9) + 4 * (v10 + v8));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - (v10 + v8);
  v25 = v18 - v17;
  if (v24 >= v25)
    v24 = v25;
  v26 = v14 - v13;
  v27 = v20 - v19;
  if (v26 < v20 - v19)
    v27 = v26;
  if (v27)
  {
    v28 = 0;
    v29 = *a4;
    v30 = *a8;
    v31 = *a3 + v29 * v13 + 2 * (v10 + v8);
    if (v13 >= v9)
      v32 = 0;
    else
      v32 = v29;
    v33 = v31 + v32;
    v34 = *a7 + v30 * v19 + v21;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
          *(_WORD *)(v34 + 2 * i) = *(_WORD *)(v33 + 2 * i) & 0xFFC0;
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12)
    v36 = v12;
  else
    v36 = 0;
  if (v24 < v10)
    v10 = 0;
  v37 = v24 - v10;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v40 = (_WORD *)((char *)v16 + v15 + 4);
      v41 = *v40;
      v42 = v40[1];
      v38 = v16 + 4;
      v43 = ((*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 4) & 0xFFC)
          + ((unsigned __int16)v16[1] >> 4)
          + (((unsigned __int16)v16[3] >> 4) & 0xFFC)
          + ((v42 >> 4) & 0xFFC);
      *v23 = (4
            * (((*(_WORD *)((char *)v16 + v15) >> 4) & 0xFFC)
             + (*v16 >> 4)
             + ((v16[2] >> 4) & 0xFFC)
             + ((v41 >> 4) & 0xFFC))) & 0xFFF0;
      v23[1] = (4 * v43) & 0xFFF0;
      v39 = v23 + 2;
    }
    else
    {
      v38 = v16;
      v39 = v23;
    }
    if (v24 != v10)
    {
      v44 = 0;
      v45 = v38 + 2;
      do
      {
        v46 = &v39[v44];
        v47 = ((*(unsigned __int16 *)((char *)v45 + v15 - 2) >> 4) & 0xFFC)
            + ((unsigned __int16)*(v45 - 1) >> 4)
            + (((unsigned __int16)v45[1] >> 4) & 0xFFC)
            + ((*(unsigned __int16 *)((char *)v45 + v15 + 2) >> 4) & 0xFFC);
        *v46 = (4
              * (((*(_WORD *)((char *)v45 + v15 - 4) >> 4) & 0xFFC)
               + (*(v45 - 2) >> 4)
               + ((*v45 >> 4) & 0xFFC)
               + ((*(_WORD *)((char *)v45 + v15) >> 4) & 0xFFC))) & 0xFFF0;
        v46[1] = (4 * v47) & 0xFFF0;
        v44 += 2;
        v45 += 4;
      }
      while (v44 < v37);
    }
    v16 += v15;
    v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v27 != v36)
  {
    v48 = 0;
    v49 = v27 - v36;
    do
    {
      v50 = v16;
      v51 = v23;
      if ((v8 & 1) != 0)
      {
        v52 = (_WORD *)((char *)v16 + v15 + 4);
        v53 = *v52;
        v54 = v52[1];
        v50 = v16 + 4;
        v55 = ((*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 4) & 0xFFC)
            + ((unsigned __int16)v16[1] >> 4)
            + (((unsigned __int16)v16[3] >> 4) & 0xFFC)
            + ((v54 >> 4) & 0xFFC);
        *v23 = (4
              * (((*(_WORD *)((char *)v16 + v15) >> 4) & 0xFFC)
               + (*v16 >> 4)
               + ((v16[2] >> 4) & 0xFFC)
               + ((v53 >> 4) & 0xFFC))) & 0xFFF0;
        v23[1] = (4 * v55) & 0xFFF0;
        v51 = v23 + 2;
      }
      if (v24 != v10)
      {
        v56 = 0;
        v57 = v50 + 2;
        do
        {
          v58 = &v51[v56];
          v59 = ((*(unsigned __int16 *)((char *)v57 + v15 - 2) >> 4) & 0xFFC)
              + ((unsigned __int16)*(v57 - 1) >> 4)
              + (((unsigned __int16)v57[1] >> 4) & 0xFFC)
              + ((*(unsigned __int16 *)((char *)v57 + v15 + 2) >> 4) & 0xFFC);
          *v58 = (4
                * (((*(_WORD *)((char *)v57 + v15 - 4) >> 4) & 0xFFC)
                 + (*(v57 - 2) >> 4)
                 + ((*v57 >> 4) & 0xFFC)
                 + ((*(_WORD *)((char *)v57 + v15) >> 4) & 0xFFC))) & 0xFFF0;
          v58[1] = (4 * v59) & 0xFFF0;
          v56 += 2;
          v57 += 4;
        }
        while (v56 < v37);
      }
      v16 += v15;
      v23 = (_WORD *)((char *)v23 + v22);
      v48 += 2;
    }
    while (v48 < v49);
  }
  return 0;
}

uint64_t vt_CopyDec_x444_tv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  unint64_t v36;
  unint64_t v37;
  _WORD *v38;
  _WORD *v39;
  __int16 v40;
  unint64_t v41;
  _WORD *v42;
  __int16 v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _WORD *v47;
  _WORD *v48;
  __int16 v49;
  unint64_t v50;
  _WORD *v51;
  __int16 v52;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (_WORD *)(a3[1] + v15 * (v12 + v8) + 4 * (v10 + v9));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - (v10 + v9);
  v25 = v18 - v17;
  if (v24 >= v25)
    v24 = v25;
  v26 = v14 - v13;
  v27 = v20 - v19;
  if (v26 < v20 - v19)
    v27 = v26;
  if (v27)
  {
    v28 = 0;
    v29 = *a4;
    v30 = *a8;
    v31 = *a3 + v29 * v13 + 2 * (v10 + v9);
    if (v13 >= v8)
      v32 = 0;
    else
      v32 = v29;
    v33 = v31 + v32;
    v34 = *a7 + v30 * v19 + v21;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
          *(_WORD *)(v34 + 2 * i) = *(_WORD *)(v33 + 2 * i) & 0xFFC0;
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12)
    v36 = v12;
  else
    v36 = 0;
  if (v24 < v10)
    v10 = 0;
  v37 = v24 - v10;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v38 = v16 + 4;
      v40 = v16[1] & 0xFFC0;
      *v23 = *v16 & 0xFFC0;
      v23[1] = v40;
      v39 = v23 + 2;
    }
    else
    {
      v38 = v16;
      v39 = v23;
    }
    if (v24 != v10)
    {
      v41 = 0;
      do
      {
        v42 = &v39[v41];
        v43 = v38[1] & 0xFFC0;
        *v42 = *v38 & 0xFFC0;
        v42[1] = v43;
        v41 += 2;
        v38 += 4;
      }
      while (v41 < v37);
    }
    v16 += v15;
    v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v27 != v36)
  {
    v44 = 0;
    v45 = v27 - v36;
    v46 = 2 * v15;
    do
    {
      v47 = v16;
      v48 = v23;
      if ((v9 & 1) != 0)
      {
        v47 = v16 + 4;
        v49 = v16[1] & 0xFFC0;
        *v23 = *v16 & 0xFFC0;
        v23[1] = v49;
        v48 = v23 + 2;
      }
      if (v24 != v10)
      {
        v50 = 0;
        do
        {
          v51 = &v48[v50];
          v52 = v47[1] & 0xFFC0;
          *v51 = *v47 & 0xFFC0;
          v51[1] = v52;
          v50 += 2;
          v47 += 4;
        }
        while (v50 < v37);
      }
      v16 = (_WORD *)((char *)v16 + v46);
      v23 = (_WORD *)((char *)v23 + v22);
      v44 += 2;
    }
    while (v44 < v45);
  }
  return 0;
}

uint64_t vt_CopyAvg_x444_tf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  unsigned __int16 *v38;
  _WORD *v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  unsigned __int16 *v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  int v57;
  int v58;
  unsigned int v59;
  int v60;
  int v61;
  unint64_t v62;
  unsigned __int16 *v63;
  _WORD *v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  unsigned __int16 *v68;
  unsigned int v69;
  unsigned int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  BOOL v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  int v81;
  int v82;
  unsigned int v83;
  int v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  int v88;
  unint64_t v89;
  unint64_t v90;
  unsigned __int16 *v91;
  _WORD *v92;
  unsigned int v93;
  int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  unsigned int v104;
  int v105;
  unsigned int v106;
  unsigned __int16 *v107;
  unsigned int v108;
  unsigned int v109;
  int v110;
  int v111;
  int v112;
  unsigned int v113;
  int v114;
  unint64_t v115;
  unsigned __int16 *v116;
  _WORD *v117;
  unsigned int v118;
  int v119;
  unsigned int v120;
  unsigned __int16 *v121;
  unsigned int v122;
  unsigned int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  int v134;
  int v135;
  unsigned int v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  int v140;
  uint64_t v142;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * (v12 + v9) + 4 * (v10 + v8));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v142 = a8[1];
  v22 = (_WORD *)(a7[1] + ((unint64_t)(v142 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v23 = v11 - (v10 + v8);
  v24 = v18 - v17;
  if (v23 >= v24)
    v23 = v24;
  v25 = v14 - v13;
  v26 = v20 - v19;
  if (v25 < v20 - v19)
    v26 = v25;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a3 + *a4 * v13 + 2 * (v10 + v8);
    v30 = *a8;
    if (v13 >= v9)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v29 + v31;
    v33 = *a7 + v30 * v19 + v21;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
        {
          v35 = *(unsigned __int16 *)(v32 + 2 * i) >> 6;
          if (v35 >= 0x3AC)
            v35 = 940;
          if (v35 <= 0x40)
            v35 = 64;
          *(_WORD *)(v33 + 2 * i) = 16 * ((-262080 - v35 + (v35 << 12)) / 0x36C);
        }
      }
      v32 += v28;
      v33 += v30;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= v12)
    v36 = v12;
  else
    v36 = 0;
  if (v23 < v10)
    v10 = 0;
  v37 = v23 - v10;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v40 = *v16;
      v41 = v40 >> 6;
      v42 = v16[1];
      v43 = v42 >> 6;
      v44 = *(unsigned __int16 *)((char *)v16 + v15);
      v45 = *(unsigned __int16 *)((char *)v16 + v15 + 2);
      if (v40 >> 6 >= 0x3C0)
        v41 = 960;
      if (v40 < 0x1000)
        v41 = 64;
      if (v43 >= 0x3C0)
        v43 = 960;
      if (v42 < 0x1000)
        v43 = 64;
      if (v44 >> 6 >= 0x3C0)
        v46 = 960;
      else
        v46 = v44 >> 6;
      if (v44 >= 0x1000)
        v47 = v46;
      else
        v47 = 64;
      if (v45 >> 6 >= 0x3C0)
        v48 = 960;
      else
        v48 = v45 >> 6;
      if (v45 >= 0x1000)
        v49 = v48;
      else
        v49 = 64;
      v50 = v16[2];
      v51 = v50 >> 6;
      v52 = v16[3];
      v53 = (unsigned __int16 *)((char *)v16 + v15 + 4);
      v54 = *v53;
      v55 = v53[1];
      if (v50 >> 6 >= 0x3C0)
        v51 = 960;
      if (v50 >= 0x1000)
        v56 = v51;
      else
        v56 = 64;
      if (v52 >> 6 >= 0x3C0)
        v57 = 960;
      else
        v57 = v52 >> 6;
      if (v52 < 0x1000)
        v57 = 64;
      if (v54 >> 6 >= 0x3C0)
        v58 = 960;
      else
        v58 = v54 >> 6;
      if (v54 < 0x1000)
        v58 = 64;
      v59 = -262080 - v41 + (v41 << 12);
      if (v55 >> 6 >= 0x3C0)
        v60 = 960;
      else
        v60 = v55 >> 6;
      if (v55 >= 0x1000)
        v61 = v60;
      else
        v61 = 64;
      v38 = v16 + 4;
      *v22 = (4
            * (((613566757 * (unint64_t)((-262080 - v47 + (v47 << 12)) >> 7)) >> 32)
             + ((613566757 * (unint64_t)(v59 >> 7)) >> 32)
             + ((613566757 * (unint64_t)((-262080 - v56 + (v56 << 12)) >> 7)) >> 32)
             + ((613566757 * (unint64_t)((-262080 - v58 + (v58 << 12)) >> 7)) >> 32))
            + 8) & 0xFFF0;
      v22[1] = (4
              * (((613566757 * (unint64_t)((-262080 - v49 + (v49 << 12)) >> 7)) >> 32)
               + ((613566757 * (unint64_t)((-262080 - v43 + (v43 << 12)) >> 7)) >> 32)
               + ((613566757 * (unint64_t)((-262080 - v57 + (v57 << 12)) >> 7)) >> 32)
               + ((613566757 * (unint64_t)((-262080 - v61 + (v61 << 12)) >> 7)) >> 32))
              + 8) & 0xFFF0;
      v39 = v22 + 2;
    }
    else
    {
      v38 = v16;
      v39 = v22;
    }
    if (v23 != v10)
    {
      v62 = 0;
      v63 = v38 + 2;
      do
      {
        v64 = &v39[v62];
        v65 = *(v63 - 2);
        v66 = v65 >> 6;
        v67 = *(v63 - 1);
        v68 = (unsigned __int16 *)((char *)v63 + v15);
        v69 = *(unsigned __int16 *)((char *)v63 + v15 - 4);
        v70 = *(unsigned __int16 *)((char *)v63 + v15 - 2);
        if (v65 >> 6 >= 0x3C0)
          v66 = 960;
        if (v65 >= 0x1000)
          v71 = v66;
        else
          v71 = 64;
        if (v67 >> 6 >= 0x3C0)
          v72 = 960;
        else
          v72 = v67 >> 6;
        if (v67 < 0x1000)
          v72 = 64;
        if (v69 >> 6 >= 0x3C0)
          v73 = 960;
        else
          v73 = v69 >> 6;
        if (v69 < 0x1000)
          v73 = 64;
        if (v70 >> 6 >= 0x3C0)
          v74 = 960;
        else
          v74 = v70 >> 6;
        v75 = v70 >= 0x1000;
        v76 = *v63;
        v77 = v76 >> 6;
        v78 = v63[1];
        if (!v75)
          v74 = 64;
        v79 = *v68;
        v80 = v68[1];
        if (v77 >= 0x3C0)
          v77 = 960;
        if (v76 >= 0x1000)
          v81 = v77;
        else
          v81 = 64;
        if (v78 >> 6 >= 0x3C0)
          v82 = 960;
        else
          v82 = v78 >> 6;
        v75 = v78 >= 0x1000;
        v83 = v80 >> 6;
        if (!v75)
          v82 = 64;
        if (v79 >> 6 >= 0x3C0)
          v84 = 960;
        else
          v84 = v79 >> 6;
        if (v79 < 0x1000)
          v84 = 64;
        v85 = (613566757 * (unint64_t)((-262080 - v71 + (v71 << 12)) >> 7)) >> 32;
        if (v83 >= 0x3C0)
          v83 = 960;
        v86 = (613566757 * (unint64_t)((-262080 - v72 + (v72 << 12)) >> 7)) >> 32;
        v87 = (613566757 * (unint64_t)((-262080 - v73 + (v73 << 12)) >> 7)) >> 32;
        if (v80 >= 0x1000)
          v88 = v83;
        else
          v88 = 64;
        *v64 = (4
              * (v87
               + v85
               + ((613566757 * (unint64_t)((-262080 - v81 + (v81 << 12)) >> 7)) >> 32)
               + ((613566757 * (unint64_t)((-262080 - v84 + (v84 << 12)) >> 7)) >> 32))
              + 8) & 0xFFF0;
        v64[1] = (4
                * (((613566757 * (unint64_t)((-262080 - v74 + (v74 << 12)) >> 7)) >> 32)
                 + v86
                 + ((613566757 * (unint64_t)((-262080 - v82 + (v82 << 12)) >> 7)) >> 32)
                 + ((613566757 * (unint64_t)((-262080 - v88 + (v88 << 12)) >> 7)) >> 32))
                + 8) & 0xFFF0;
        v62 += 2;
        v63 += 4;
      }
      while (v62 < v37);
    }
    v16 += v15;
    v22 = (_WORD *)((char *)v22 + v142);
  }
  if (v26 != v36)
  {
    v89 = 0;
    v90 = v26 - v36;
    do
    {
      v91 = v16;
      v92 = v22;
      if ((v8 & 1) != 0)
      {
        v93 = *v16;
        v94 = v93 >> 6;
        v95 = v16[1];
        v96 = *(unsigned __int16 *)((char *)v16 + v15);
        v97 = *(unsigned __int16 *)((char *)v16 + v15 + 2);
        if (v93 >> 6 >= 0x3C0)
          v94 = 960;
        if (v93 >= 0x1000)
          v98 = v94;
        else
          v98 = 64;
        if (v95 >> 6 >= 0x3C0)
          v99 = 960;
        else
          v99 = v95 >> 6;
        if (v95 < 0x1000)
          v99 = 64;
        if (v96 >> 6 >= 0x3C0)
          v100 = 960;
        else
          v100 = v96 >> 6;
        if (v96 >= 0x1000)
          v101 = v100;
        else
          v101 = 64;
        if (v97 >> 6 >= 0x3C0)
          v102 = 960;
        else
          v102 = v97 >> 6;
        if (v97 >= 0x1000)
          v103 = v102;
        else
          v103 = 64;
        v104 = v16[2];
        v105 = v104 >> 6;
        v106 = v16[3];
        v107 = (unsigned __int16 *)((char *)v16 + v15 + 4);
        v108 = *v107;
        v109 = v107[1];
        if (v104 >> 6 >= 0x3C0)
          v105 = 960;
        if (v104 >= 0x1000)
          v110 = v105;
        else
          v110 = 64;
        if (v106 >> 6 >= 0x3C0)
          v111 = 960;
        else
          v111 = v106 >> 6;
        if (v106 < 0x1000)
          v111 = 64;
        if (v108 >> 6 >= 0x3C0)
          v112 = 960;
        else
          v112 = v108 >> 6;
        if (v108 < 0x1000)
          v112 = 64;
        v113 = -262080 - v98 + (v98 << 12);
        if (v109 >> 6 >= 0x3C0)
          v114 = 960;
        else
          v114 = v109 >> 6;
        if (v109 < 0x1000)
          v114 = 64;
        v91 = v16 + 4;
        *v22 = (4
              * (((613566757 * (unint64_t)((-262080 - v101 + (v101 << 12)) >> 7)) >> 32)
               + ((613566757 * (unint64_t)(v113 >> 7)) >> 32)
               + ((613566757 * (unint64_t)((-262080 - v110 + (v110 << 12)) >> 7)) >> 32)
               + ((613566757 * (unint64_t)((-262080 - v112 + (v112 << 12)) >> 7)) >> 32))
              + 8) & 0xFFF0;
        v22[1] = (4
                * (((613566757 * (unint64_t)((-262080 - v103 + (v103 << 12)) >> 7)) >> 32)
                 + ((613566757 * (unint64_t)((-262080 - v99 + (v99 << 12)) >> 7)) >> 32)
                 + ((613566757 * (unint64_t)((-262080 - v111 + (v111 << 12)) >> 7)) >> 32)
                 + ((613566757 * (unint64_t)((-262080 - v114 + (v114 << 12)) >> 7)) >> 32))
                + 8) & 0xFFF0;
        v92 = v22 + 2;
      }
      if (v23 != v10)
      {
        v115 = 0;
        v116 = v91 + 2;
        do
        {
          v117 = &v92[v115];
          v118 = *(v116 - 2);
          v119 = v118 >> 6;
          v120 = *(v116 - 1);
          v121 = (unsigned __int16 *)((char *)v116 + v15);
          v122 = *(unsigned __int16 *)((char *)v116 + v15 - 4);
          v123 = *(unsigned __int16 *)((char *)v116 + v15 - 2);
          if (v118 >> 6 >= 0x3C0)
            v119 = 960;
          if (v118 >= 0x1000)
            v124 = v119;
          else
            v124 = 64;
          if (v120 >> 6 >= 0x3C0)
            v125 = 960;
          else
            v125 = v120 >> 6;
          if (v120 < 0x1000)
            v125 = 64;
          if (v122 >> 6 >= 0x3C0)
            v126 = 960;
          else
            v126 = v122 >> 6;
          if (v122 < 0x1000)
            v126 = 64;
          if (v123 >> 6 >= 0x3C0)
            v127 = 960;
          else
            v127 = v123 >> 6;
          v75 = v123 >= 0x1000;
          v128 = *v116;
          v129 = v128 >> 6;
          v130 = v116[1];
          if (!v75)
            v127 = 64;
          v131 = *v121;
          v132 = v131 >> 6;
          v133 = v121[1];
          if (v129 >= 0x3C0)
            v129 = 960;
          if (v128 >= 0x1000)
            v134 = v129;
          else
            v134 = 64;
          if (v130 >> 6 >= 0x3C0)
            v135 = 960;
          else
            v135 = v130 >> 6;
          v75 = v130 >= 0x1000;
          v136 = v133 >> 6;
          if (!v75)
            v135 = 64;
          if (v132 >= 0x3C0)
            v132 = 960;
          if (v131 < 0x1000)
            v132 = 64;
          v137 = (613566757 * (unint64_t)((-262080 - v124 + (v124 << 12)) >> 7)) >> 32;
          if (v136 >= 0x3C0)
            v136 = 960;
          v138 = (613566757 * (unint64_t)((-262080 - v125 + (v125 << 12)) >> 7)) >> 32;
          v139 = (613566757 * (unint64_t)((-262080 - v126 + (v126 << 12)) >> 7)) >> 32;
          if (v133 >= 0x1000)
            v140 = v136;
          else
            v140 = 64;
          *v117 = (4
                 * (v139
                  + v137
                  + ((613566757 * (unint64_t)((-262080 - v134 + (v134 << 12)) >> 7)) >> 32)
                  + ((613566757 * (unint64_t)((-262080 - v132 + (v132 << 12)) >> 7)) >> 32))
                 + 8) & 0xFFF0;
          v117[1] = (4
                   * (((613566757 * (unint64_t)((-262080 - v127 + (v127 << 12)) >> 7)) >> 32)
                    + v138
                    + ((613566757 * (unint64_t)((-262080 - v135 + (v135 << 12)) >> 7)) >> 32)
                    + ((613566757 * (unint64_t)((-262080 - v140 + (v140 << 12)) >> 7)) >> 32))
                   + 8) & 0xFFF0;
          v115 += 2;
          v116 += 4;
        }
        while (v115 < v37);
      }
      v16 += v15;
      v22 = (_WORD *)((char *)v22 + v142);
      v89 += 2;
    }
    while (v89 < v90);
  }
  return 0;
}

uint64_t vt_CopyDec_x444_tf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  unsigned __int16 *v39;
  _WORD *v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  unint64_t v46;
  _WORD *v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  int v51;
  int v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unsigned __int16 *v56;
  _WORD *v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  int v61;
  int v62;
  unint64_t v63;
  _WORD *v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  int v68;
  int v69;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * (v12 + v9) + 4 * (v10 + v8));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - (v10 + v8);
  v25 = v18 - v17;
  if (v24 >= v25)
    v24 = v25;
  v26 = v14 - v13;
  v27 = v20 - v19;
  if (v26 < v20 - v19)
    v27 = v26;
  if (v27)
  {
    v28 = 0;
    v29 = *a4;
    v30 = *a3 + *a4 * v13 + 2 * (v10 + v8);
    v31 = *a8;
    if (v13 >= v9)
      v32 = 0;
    else
      v32 = *a4;
    v33 = v30 + v32;
    v34 = *a7 + v31 * v19 + v21;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
        {
          v36 = *(unsigned __int16 *)(v33 + 2 * i) >> 6;
          if (v36 >= 0x3AC)
            v36 = 940;
          if (v36 <= 0x40)
            v36 = 64;
          *(_WORD *)(v34 + 2 * i) = 16 * ((-262080 - v36 + (v36 << 12)) / 0x36C);
        }
      }
      v33 += v29;
      v34 += v31;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12)
    v37 = v12;
  else
    v37 = 0;
  if (v24 < v10)
    v10 = 0;
  v38 = v24 - v10;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v41 = *v16;
      v42 = v41 >> 6;
      v43 = v16[1];
      v44 = v43 >> 6;
      if (v41 >> 6 >= 0x3C0)
        v42 = 960;
      if (v41 < 0x1000)
        v42 = 64;
      if (v44 >= 0x3C0)
        v44 = 960;
      if (v43 >= 0x1000)
        v45 = v44;
      else
        v45 = 64;
      v39 = v16 + 4;
      *v23 = 16 * ((613566757 * (unint64_t)((-262080 - v42 + (v42 << 12)) >> 7)) >> 32);
      v23[1] = 16 * ((613566757 * (unint64_t)((-262080 - v45 + (v45 << 12)) >> 7)) >> 32);
      v40 = v23 + 2;
    }
    else
    {
      v39 = v16;
      v40 = v23;
    }
    if (v24 != v10)
    {
      v46 = 0;
      do
      {
        v47 = &v40[v46];
        v48 = *v39;
        v49 = v48 >> 6;
        v50 = v39[1];
        if (v48 >> 6 >= 0x3C0)
          v49 = 960;
        if (v48 >= 0x1000)
          v51 = v49;
        else
          v51 = 64;
        if (v50 >> 6 >= 0x3C0)
          v52 = 960;
        else
          v52 = v50 >> 6;
        if (v50 < 0x1000)
          v52 = 64;
        *v47 = 16 * ((613566757 * (unint64_t)((-262080 - v51 + (v51 << 12)) >> 7)) >> 32);
        v47[1] = 16 * ((613566757 * (unint64_t)((-262080 - v52 + (v52 << 12)) >> 7)) >> 32);
        v46 += 2;
        v39 += 4;
      }
      while (v46 < v38);
    }
    v16 += v15;
    v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v27 != v37)
  {
    v53 = 0;
    v54 = v27 - v37;
    v55 = 2 * v15;
    do
    {
      v56 = v16;
      v57 = v23;
      if ((v8 & 1) != 0)
      {
        v58 = *v16;
        v59 = v58 >> 6;
        v60 = v16[1];
        if (v58 >> 6 >= 0x3C0)
          v59 = 960;
        if (v58 < 0x1000)
          v59 = 64;
        if (v60 >> 6 >= 0x3C0)
          v61 = 960;
        else
          v61 = v60 >> 6;
        if (v60 >= 0x1000)
          v62 = v61;
        else
          v62 = 64;
        v56 = v16 + 4;
        *v23 = 16 * ((613566757 * (unint64_t)((-262080 - v59 + (v59 << 12)) >> 7)) >> 32);
        v23[1] = 16 * ((613566757 * (unint64_t)((-262080 - v62 + (v62 << 12)) >> 7)) >> 32);
        v57 = v23 + 2;
      }
      if (v24 != v10)
      {
        v63 = 0;
        do
        {
          v64 = &v57[v63];
          v65 = *v56;
          v66 = v65 >> 6;
          v67 = v56[1];
          if (v65 >> 6 >= 0x3C0)
            v66 = 960;
          if (v65 >= 0x1000)
            v68 = v66;
          else
            v68 = 64;
          if (v67 >> 6 >= 0x3C0)
            v69 = 960;
          else
            v69 = v67 >> 6;
          if (v67 < 0x1000)
            v69 = 64;
          *v64 = 16 * ((613566757 * (unint64_t)((-262080 - v68 + (v68 << 12)) >> 7)) >> 32);
          v64[1] = 16 * ((613566757 * (unint64_t)((-262080 - v69 + (v69 << 12)) >> 7)) >> 32);
          v63 += 2;
          v56 += 4;
        }
        while (v63 < v38);
      }
      v16 = (unsigned __int16 *)((char *)v16 + v55);
      v23 = (_WORD *)((char *)v23 + v22);
      v53 += 2;
    }
    while (v53 < v54);
  }
  return 0;
}

uint64_t vt_Copy_x444_x4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _WORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _WORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  size_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _WORD *v33;
  _WORD *v34;
  __int16 v35;
  unint64_t v36;
  unint64_t v37;
  __int16 v38;
  __int16 v39;
  __int16 v40;
  __int16 v41;
  unint64_t v42;
  uint64_t v43;
  _WORD *v44;
  _WORD *v45;
  __int16 v46;
  unint64_t v47;
  unint64_t v48;
  __int16 v49;
  __int16 v50;
  __int16 v51;
  __int16 v52;
  __int16 v53;
  __int16 v54;
  unint64_t v55;
  __int16 v56;
  __int16 v57;
  __int16 v58;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;

  v8 = a2[4];
  v9 = a2[5];
  v10 = a4[1];
  v11 = (_WORD *)(a3[1] + v10 * v9 + 4 * v8);
  v12 = a6[4];
  v13 = a6[5];
  v14 = a6[2];
  v15 = a6[3];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v13 + 4 * v12);
  if (a2[2] >= v14)
    v18 = v14;
  else
    v18 = a2[2];
  if (a2[3] >= v15)
    v19 = v15;
  else
    v19 = a2[3];
  if (v19)
  {
    v61 = a8[1];
    v62 = a4[1];
    v63 = v19;
    v20 = *a4;
    v21 = *a8;
    v22 = a8[2];
    v23 = (char *)(a7[2] + v22 * v13 + 2 * v12);
    v24 = (char *)(*a7 + *a8 * v13 + 2 * v12);
    v25 = (char *)(*a3 + *a4 * v9 + 2 * v8);
    v64 = v18;
    v26 = 2 * v18;
    do
    {
      memcpy(v24, v25, v26);
      memset(v23, 255, v26);
      v25 += v20;
      v24 += v21;
      v23 += v22;
      --v19;
    }
    while (v19);
    v16 = v61;
    v8 = a2[4];
    v9 = a2[5];
    v19 = v63;
    v18 = v64;
    v10 = v62;
  }
  v27 = v9 & 1;
  if (v19 >= v27)
    v28 = v9 & 1;
  else
    v28 = 0;
  v29 = v8;
  v30 = v8 & 1;
  if (v18 >= v30)
    v31 = v30;
  else
    v31 = 0;
  v32 = v18 - v31;
  if ((v9 & 1) != 0)
  {
    if ((v29 & 1) != 0)
    {
      v35 = v11[1] & 0xFFC0;
      v33 = v11 + 2;
      *v17 = *v11 & 0xFFC0;
      v17[1] = v35;
      v34 = v17 + 2;
    }
    else
    {
      v33 = v11;
      v34 = v17;
    }
    if (v18 == v31)
    {
      v36 = 0;
    }
    else
    {
      v37 = v18 - v31;
      do
      {
        v38 = *v33 & 0xFFC0;
        v39 = v33[1] & 0xFFC0;
        v33 += 2;
        *v34 = v38;
        v34[1] = v39;
        v34 += 2;
        --v37;
      }
      while (v37);
      v36 = v18 - v31;
    }
    if (v36 + v30 < v18)
    {
      v40 = *v33 & 0xFFC0;
      v41 = v33[1] & 0xFFC0;
      *v34 = v40;
      v34[1] = v41;
    }
    v11 = (_WORD *)((char *)v11 + v10);
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v19 == v28)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v19 - v28;
    do
    {
      v44 = v11;
      v45 = v17;
      if ((v29 & 1) != 0)
      {
        v46 = v11[1] & 0xFFC0;
        v44 = v11 + 2;
        *v17 = *v11 & 0xFFC0;
        v17[1] = v46;
        v45 = v17 + 2;
      }
      if (v18 == v31)
      {
        v47 = 0;
      }
      else
      {
        v48 = v18 - v31;
        do
        {
          v49 = *v44 & 0xFFC0;
          v50 = v44[1] & 0xFFC0;
          v44 += 2;
          *v45 = v49;
          v45[1] = v50;
          v45 += 2;
          --v48;
        }
        while (v48);
        v47 = v18 - v31;
      }
      if (v47 + v30 < v18)
      {
        v51 = *v44 & 0xFFC0;
        v52 = v44[1] & 0xFFC0;
        *v45 = v51;
        v45[1] = v52;
      }
      v11 = (_WORD *)((char *)v11 + v10);
      v17 = (_WORD *)((char *)v17 + v16);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v27 < v19)
  {
    if ((v29 & 1) != 0)
    {
      v53 = *v11 & 0xFFC0;
      v54 = v11[1] & 0xFFC0;
      v11 += 2;
      *v17 = v53;
      v17[1] = v54;
      v17 += 2;
    }
    if (v18 == v31)
    {
      v32 = 0;
    }
    else
    {
      v55 = v18 - v31;
      do
      {
        v56 = *v11 & 0xFFC0;
        v57 = v11[1] & 0xFFC0;
        v11 += 2;
        *v17 = v56;
        v17[1] = v57;
        v17 += 2;
        --v55;
      }
      while (v55);
    }
    if (v32 + v30 < v18)
    {
      v58 = v11[1] & 0xFFC0;
      *v17 = *v11 & 0xFFC0;
      v17[1] = v58;
    }
  }
  return 0;
}

uint64_t vt_Copy_x444_x44p(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;

  if (!a1)
    return 4294954387;
  if (a2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = a3[1];
    v9 = *a5;
    v10 = *a4;
    v11 = a4[1];
    v12 = *a6;
    do
    {
      v13 = 0;
      for (i = 0; i != a1; ++i)
      {
        *(_DWORD *)(v12 + v13) = *(unsigned __int16 *)(v10 + 2 * i) | (*(unsigned __int16 *)(v11 + v13) << 10) | (*(unsigned __int16 *)(v11 + v13 + 2) << 20);
        v13 += 4;
      }
      v10 += v7;
      v11 += v8;
      v12 += v9;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_x444_xf44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned __int16 *v32;
  _WORD *v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  int v37;
  int v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  int v45;
  int v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  unint64_t v52;
  uint64_t v53;
  unsigned __int16 *v54;
  _WORD *v55;
  unsigned int v56;
  int v57;
  unsigned int v58;
  int v59;
  int v60;
  int v61;
  unint64_t v62;
  unint64_t v63;
  unsigned int v64;
  int v65;
  unsigned int v66;
  int v67;
  int v68;
  unsigned int v69;
  int v70;
  unsigned int v71;
  int v72;
  int v73;
  int v74;
  unsigned int v75;
  int v76;
  unsigned int v77;
  unsigned int v78;
  int v79;
  unint64_t v80;
  unsigned int v81;
  int v82;
  unsigned int v83;
  int v84;
  int v85;
  unsigned int v86;
  int v87;
  unsigned int v88;
  unsigned int v89;
  int v90;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a2[3];
  v12 = a4[1];
  v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 4 * v9);
  v14 = a6[4];
  v15 = a6[5];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (v11 >= a6[3])
    v18 = a6[3];
  else
    v18 = v11;
  if (v18)
  {
    v19 = 0;
    v20 = *a4;
    v21 = *a8;
    v22 = *a7 + *a8 * v15 + 2 * v14;
    v23 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
        {
          v25 = *(unsigned __int16 *)(v23 + 2 * i) >> 6;
          if (v25 >= 0x3AC)
            v25 = 940;
          if (v25 <= 0x40)
            v25 = 64;
          *(_WORD *)(v22 + 2 * i) = (unsigned __int16)((1023 * v25 - 65472) / 0x36C) << 6;
        }
      }
      v23 += v20;
      v22 += v21;
      ++v19;
    }
    while (v19 != v18);
  }
  v26 = v8 & 1;
  if (v18 >= v26)
    v27 = v8 & 1;
  else
    v27 = 0;
  v28 = v9;
  v29 = v9 & 1;
  if (v10 >= v29)
    v30 = v29;
  else
    v30 = 0;
  v31 = v10 - v30;
  if ((v8 & 1) != 0)
  {
    if ((v28 & 1) != 0)
    {
      v34 = *v13;
      v35 = v34 >> 6;
      v36 = v13[1];
      if (v34 >> 6 >= 0x3C0)
        v35 = 960;
      if (v34 >= 0x1000)
        v37 = v35;
      else
        v37 = 64;
      if (v36 >> 6 >= 0x3C0)
        v38 = 960;
      else
        v38 = v36 >> 6;
      if (v36 >= 0x1000)
        v39 = v38;
      else
        v39 = 64;
      v32 = v13 + 2;
      *v17 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v37 - 65472) >> 7)) >> 32) << 6;
      v17[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v39 - 65472) >> 7)) >> 32) << 6;
      v33 = v17 + 2;
    }
    else
    {
      v32 = v13;
      v33 = v17;
    }
    if (v10 == v30)
    {
      v40 = 0;
    }
    else
    {
      v41 = v10 - v30;
      do
      {
        v42 = *v32;
        v43 = v42 >> 6;
        v44 = v32[1];
        if (v42 >> 6 >= 0x3C0)
          v43 = 960;
        if (v42 >= 0x1000)
          v45 = v43;
        else
          v45 = 64;
        if (v44 >> 6 >= 0x3C0)
          v46 = 960;
        else
          v46 = v44 >> 6;
        if (v44 < 0x1000)
          v46 = 64;
        v32 += 2;
        *v33 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v45 - 65472) >> 7)) >> 32) << 6;
        v33[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v46 - 65472) >> 7)) >> 32) << 6;
        v33 += 2;
        --v41;
      }
      while (v41);
      v40 = v10 - v30;
    }
    if (v40 + v29 < v10)
    {
      v47 = *v32;
      v48 = v47 >> 6;
      v49 = v32[1];
      v50 = v49 >> 6;
      if (v47 >> 6 >= 0x3C0)
        v48 = 960;
      if (v47 < 0x1000)
        v48 = 64;
      if (v50 >= 0x3C0)
        v50 = 960;
      if (v49 >= 0x1000)
        v51 = v50;
      else
        v51 = 64;
      *v33 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v48 - 65472) >> 7)) >> 32) << 6;
      v33[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v51 - 65472) >> 7)) >> 32) << 6;
    }
    v13 = (unsigned __int16 *)((char *)v13 + v12);
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v18 == v27)
  {
    v52 = 0;
  }
  else
  {
    v53 = 0;
    v52 = v18 - v27;
    do
    {
      v54 = v13;
      v55 = v17;
      if ((v28 & 1) != 0)
      {
        v56 = *v13;
        v57 = v56 >> 6;
        v58 = v13[1];
        if (v56 >> 6 >= 0x3C0)
          v57 = 960;
        if (v56 >= 0x1000)
          v59 = v57;
        else
          v59 = 64;
        if (v58 >> 6 >= 0x3C0)
          v60 = 960;
        else
          v60 = v58 >> 6;
        if (v58 >= 0x1000)
          v61 = v60;
        else
          v61 = 64;
        v54 = v13 + 2;
        *v17 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v59 - 65472) >> 7)) >> 32) << 6;
        v17[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v61 - 65472) >> 7)) >> 32) << 6;
        v55 = v17 + 2;
      }
      if (v10 == v30)
      {
        v62 = 0;
      }
      else
      {
        v63 = v10 - v30;
        do
        {
          v64 = *v54;
          v65 = v64 >> 6;
          v66 = v54[1];
          if (v64 >> 6 >= 0x3C0)
            v65 = 960;
          if (v64 >= 0x1000)
            v67 = v65;
          else
            v67 = 64;
          if (v66 >> 6 >= 0x3C0)
            v68 = 960;
          else
            v68 = v66 >> 6;
          if (v66 < 0x1000)
            v68 = 64;
          v54 += 2;
          *v55 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v67 - 65472) >> 7)) >> 32) << 6;
          v55[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v68 - 65472) >> 7)) >> 32) << 6;
          v55 += 2;
          --v63;
        }
        while (v63);
        v62 = v10 - v30;
      }
      if (v62 + v29 < v10)
      {
        v69 = *v54;
        v70 = v69 >> 6;
        v71 = v54[1];
        if (v69 >> 6 >= 0x3C0)
          v70 = 960;
        if (v69 >= 0x1000)
          v72 = v70;
        else
          v72 = 64;
        if (v71 >> 6 >= 0x3C0)
          v73 = 960;
        else
          v73 = v71 >> 6;
        if (v71 >= 0x1000)
          v74 = v73;
        else
          v74 = 64;
        *v55 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v72 - 65472) >> 7)) >> 32) << 6;
        v55[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v74 - 65472) >> 7)) >> 32) << 6;
      }
      v13 = (unsigned __int16 *)((char *)v13 + v12);
      v17 = (_WORD *)((char *)v17 + v16);
      ++v53;
    }
    while (v53 != v52);
  }
  if (v52 + v26 < v18)
  {
    if ((v28 & 1) != 0)
    {
      v75 = *v13;
      v76 = v75 >> 6;
      v77 = v13[1];
      v78 = v77 >> 6;
      if (v75 >> 6 >= 0x3C0)
        v76 = 960;
      if (v75 < 0x1000)
        v76 = 64;
      if (v78 >= 0x3C0)
        v78 = 960;
      if (v77 >= 0x1000)
        v79 = v78;
      else
        v79 = 64;
      v13 += 2;
      *v17 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v76 - 65472) >> 7)) >> 32) << 6;
      v17[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v79 - 65472) >> 7)) >> 32) << 6;
      v17 += 2;
    }
    if (v10 == v30)
    {
      v31 = 0;
    }
    else
    {
      v80 = v10 - v30;
      do
      {
        v81 = *v13;
        v82 = v81 >> 6;
        v83 = v13[1];
        if (v81 >> 6 >= 0x3C0)
          v82 = 960;
        if (v81 >= 0x1000)
          v84 = v82;
        else
          v84 = 64;
        if (v83 >> 6 >= 0x3C0)
          v85 = 960;
        else
          v85 = v83 >> 6;
        if (v83 < 0x1000)
          v85 = 64;
        v13 += 2;
        *v17 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v84 - 65472) >> 7)) >> 32) << 6;
        v17[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v85 - 65472) >> 7)) >> 32) << 6;
        v17 += 2;
        --v80;
      }
      while (v80);
    }
    if (v31 + v29 < v10)
    {
      v86 = *v13;
      v87 = v86 >> 6;
      v88 = v13[1];
      v89 = v88 >> 6;
      if (v86 >> 6 >= 0x3C0)
        v87 = 960;
      if (v86 < 0x1000)
        v87 = 64;
      if (v89 >= 0x3C0)
        v89 = 960;
      if (v88 >= 0x1000)
        v90 = v89;
      else
        v90 = 64;
      *v17 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v87 - 65472) >> 7)) >> 32) << 6;
      v17[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v90 - 65472) >> 7)) >> 32) << 6;
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_x444_x2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _WORD *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  size_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  _WORD *v35;
  _WORD *v36;
  int v37;
  unint64_t v38;
  _WORD *v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  _WORD *v43;
  _WORD *v44;
  int v45;
  unint64_t v46;
  _WORD *v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  int v52;
  unint64_t v53;
  _WORD *v54;
  int v55;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = v9 + v8;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = a4[1];
  v13 = (unsigned __int16 *)(a3[1] + v12 * v11 + 4 * (v9 + v8));
  v14 = *(_QWORD *)(a6 + 24);
  v15 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v16 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v17 = *(_QWORD *)(a6 + 40);
  v18 = 2 * v15;
  v19 = a8[1];
  v20 = (_WORD *)(a7[1] + v19 * v17 + ((2 * v15) & 0x7FFFFFFFFFFFFFFELL));
  v21 = v16 - v15;
  if (((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v9 + v8) >= v21)
    v22 = v21;
  else
    v22 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - v10;
  if (*(_QWORD *)(a2 + 24) >= v14)
    v23 = v14;
  else
    v23 = *(_QWORD *)(a2 + 24);
  if (v23)
  {
    v58 = a8[1];
    v60 = a4[1];
    v61 = v22;
    v24 = *a4;
    v25 = *a8;
    v26 = a8[2];
    v27 = (char *)(a7[2] + v26 * v17 + v18);
    v28 = (char *)(*a7 + *a8 * v17 + v18);
    v29 = (char *)(*a3 + *a4 * v11 + 2 * v10);
    v30 = 2 * v22;
    v59 = v23;
    do
    {
      memcpy(v28, v29, v30);
      memset(v27, 255, v30);
      v29 += v24;
      v28 += v25;
      v27 += v26;
      --v23;
    }
    while (v23);
    v19 = v58;
    v8 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40);
    v9 = v8 & 1;
    v12 = v60;
    v22 = v61;
    v23 = v59;
  }
  v31 = v11 & 1;
  if (v23 >= v31)
    v32 = v11 & 1;
  else
    v32 = 0;
  v33 = v8;
  if (v22 < v9)
    v9 = 0;
  v34 = v22 - v9;
  if ((v11 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v35 = v13 + 4;
      v37 = (v13[3] >> 6) + (v13[1] >> 6);
      *v20 = (32 * ((v13[2] >> 6) + (*v13 >> 6)) + 32) & 0xFFC0;
      v20[1] = (32 * v37 + 32) & 0xFFC0;
      v36 = v20 + 2;
    }
    else
    {
      v35 = v13;
      v36 = v20;
    }
    if (v22 != v9)
    {
      v38 = 0;
      do
      {
        v39 = &v36[v38];
        v40 = ((unsigned __int16)v35[3] >> 6) + ((unsigned __int16)v35[1] >> 6);
        *v39 = (32 * ((v35[2] >> 6) + (*v35 >> 6)) + 32) & 0xFFC0;
        v39[1] = (32 * v40 + 32) & 0xFFC0;
        v38 += 2;
        v35 += 4;
      }
      while (v38 < v34);
    }
    v13 = (unsigned __int16 *)((char *)v13 + v12);
    v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v23 == v32)
  {
    v41 = 0;
  }
  else
  {
    v42 = 0;
    v41 = v23 - v32;
    do
    {
      v43 = v13;
      v44 = v20;
      if ((v33 & 1) != 0)
      {
        v43 = v13 + 4;
        v45 = (v13[3] >> 6) + (v13[1] >> 6);
        *v20 = (32 * ((v13[2] >> 6) + (*v13 >> 6)) + 32) & 0xFFC0;
        v20[1] = (32 * v45 + 32) & 0xFFC0;
        v44 = v20 + 2;
      }
      if (v22 != v9)
      {
        v46 = 0;
        do
        {
          v47 = &v44[v46];
          v48 = ((unsigned __int16)v43[3] >> 6) + ((unsigned __int16)v43[1] >> 6);
          *v47 = (32 * ((v43[2] >> 6) + (*v43 >> 6)) + 32) & 0xFFC0;
          v47[1] = (32 * v48 + 32) & 0xFFC0;
          v46 += 2;
          v43 += 4;
        }
        while (v46 < v34);
      }
      v13 = (unsigned __int16 *)((char *)v13 + v12);
      v20 = (_WORD *)((char *)v20 + v19);
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v31 < v23)
  {
    if ((v33 & 1) != 0)
    {
      v49 = *v13;
      v50 = v13[1];
      v51 = v13[2] >> 6;
      v52 = v13[3] >> 6;
      v13 += 4;
      *v20 = (32 * (v51 + (v49 >> 6)) + 32) & 0xFFC0;
      v20[1] = (32 * (v52 + (v50 >> 6)) + 32) & 0xFFC0;
      v20 += 2;
    }
    if (v22 != v9)
    {
      v53 = 0;
      do
      {
        v54 = &v20[v53];
        v55 = (v13[3] >> 6) + (v13[1] >> 6);
        *v54 = (32 * ((v13[2] >> 6) + (*v13 >> 6)) + 32) & 0xFFC0;
        v54[1] = (32 * v55 + 32) & 0xFFC0;
        v53 += 2;
        v13 += 4;
      }
      while (v53 < v34);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_x444_x2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _WORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _WORD *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  size_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  _WORD *v35;
  _WORD *v36;
  __int16 v37;
  unint64_t v38;
  _WORD *v39;
  __int16 v40;
  unint64_t v41;
  uint64_t v42;
  _WORD *v43;
  _WORD *v44;
  __int16 v45;
  unint64_t v46;
  _WORD *v47;
  __int16 v48;
  __int16 v49;
  __int16 v50;
  unint64_t v51;
  _WORD *v52;
  __int16 v53;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = v9 + v8;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = a4[1];
  v13 = (_WORD *)(a3[1] + v12 * v11 + 4 * (v9 + v8));
  v14 = *(_QWORD *)(a6 + 24);
  v15 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v16 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v17 = *(_QWORD *)(a6 + 40);
  v18 = 2 * v15;
  v19 = a8[1];
  v20 = (_WORD *)(a7[1] + v19 * v17 + ((2 * v15) & 0x7FFFFFFFFFFFFFFELL));
  v21 = v16 - v15;
  if (((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v9 + v8) >= v21)
    v22 = v21;
  else
    v22 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - v10;
  if (*(_QWORD *)(a2 + 24) >= v14)
    v23 = v14;
  else
    v23 = *(_QWORD *)(a2 + 24);
  if (v23)
  {
    v56 = a8[1];
    v58 = a4[1];
    v59 = v22;
    v24 = *a4;
    v25 = *a8;
    v26 = a8[2];
    v27 = (char *)(a7[2] + v26 * v17 + v18);
    v28 = (char *)(*a7 + *a8 * v17 + v18);
    v29 = (char *)(*a3 + *a4 * v11 + 2 * v10);
    v30 = 2 * v22;
    v57 = v23;
    do
    {
      memcpy(v28, v29, v30);
      memset(v27, 255, v30);
      v29 += v24;
      v28 += v25;
      v27 += v26;
      --v23;
    }
    while (v23);
    v19 = v56;
    v8 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40);
    v9 = v8 & 1;
    v12 = v58;
    v22 = v59;
    v23 = v57;
  }
  v31 = v11 & 1;
  if (v23 >= v31)
    v32 = v11 & 1;
  else
    v32 = 0;
  v33 = v8;
  if (v22 < v9)
    v9 = 0;
  v34 = v22 - v9;
  if ((v11 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v37 = v13[1] & 0xFFC0;
      v35 = v13 + 4;
      *v20 = *v13 & 0xFFC0;
      v20[1] = v37;
      v36 = v20 + 2;
    }
    else
    {
      v35 = v13;
      v36 = v20;
    }
    if (v22 != v9)
    {
      v38 = 0;
      do
      {
        v39 = &v36[v38];
        v40 = v35[1] & 0xFFC0;
        *v39 = *v35 & 0xFFC0;
        v39[1] = v40;
        v38 += 2;
        v35 += 4;
      }
      while (v38 < v34);
    }
    v13 = (_WORD *)((char *)v13 + v12);
    v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v23 == v32)
  {
    v41 = 0;
  }
  else
  {
    v42 = 0;
    v41 = v23 - v32;
    do
    {
      v43 = v13;
      v44 = v20;
      if ((v33 & 1) != 0)
      {
        v45 = v13[1] & 0xFFC0;
        v43 = v13 + 4;
        *v20 = *v13 & 0xFFC0;
        v20[1] = v45;
        v44 = v20 + 2;
      }
      if (v22 != v9)
      {
        v46 = 0;
        do
        {
          v47 = &v44[v46];
          v48 = v43[1] & 0xFFC0;
          *v47 = *v43 & 0xFFC0;
          v47[1] = v48;
          v46 += 2;
          v43 += 4;
        }
        while (v46 < v34);
      }
      v13 = (_WORD *)((char *)v13 + v12);
      v20 = (_WORD *)((char *)v20 + v19);
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v31 < v23)
  {
    if ((v33 & 1) != 0)
    {
      v49 = *v13 & 0xFFC0;
      v50 = v13[1] & 0xFFC0;
      v13 += 4;
      *v20 = v49;
      v20[1] = v50;
      v20 += 2;
    }
    if (v22 != v9)
    {
      v51 = 0;
      do
      {
        v52 = &v20[v51];
        v53 = v13[1] & 0xFFC0;
        *v52 = *v13 & 0xFFC0;
        v52[1] = v53;
        v51 += 2;
        v13 += 4;
      }
      while (v51 < v34);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_x444_x422(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _WORD *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  _WORD *v30;
  _WORD *v31;
  int v32;
  unint64_t v33;
  _WORD *v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  _WORD *v38;
  _WORD *v39;
  int v40;
  unint64_t v41;
  _WORD *v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  int v47;
  unint64_t v48;
  _WORD *v49;
  int v50;
  unint64_t v53;
  uint64_t v54;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = v9 + v8;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = a4[1];
  v13 = (unsigned __int16 *)(a3[1] + v12 * v11 + 4 * (v9 + v8));
  v14 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v15 = *(_QWORD *)(a6 + 40);
  v16 = 2 * v14;
  v17 = a8[1];
  v18 = (_WORD *)(a7[1] + v17 * v15 + ((2 * v14) & 0x7FFFFFFFFFFFFFFELL));
  v19 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v14;
  if (((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v9 + v8) >= v19)
    v20 = v19;
  else
    v20 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - v10;
  if (*(_QWORD *)(a2 + 24) >= *(_QWORD *)(a6 + 24))
    v21 = *(_QWORD *)(a6 + 24);
  else
    v21 = *(_QWORD *)(a2 + 24);
  if (v21)
  {
    v53 = v21;
    v54 = a4[1];
    v22 = *a4;
    v23 = *a8;
    v24 = (char *)(*a7 + *a8 * v15 + v16);
    v25 = (char *)(*a3 + *a4 * v11 + 2 * v10);
    do
    {
      memcpy(v24, v25, 2 * v20);
      v25 += v22;
      v24 += v23;
      --v21;
    }
    while (v21);
    v21 = v53;
    v8 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40);
    v9 = v8 & 1;
    v12 = v54;
  }
  v26 = v11 & 1;
  if (v21 >= v26)
    v27 = v11 & 1;
  else
    v27 = 0;
  v28 = v8;
  if (v20 < v9)
    v9 = 0;
  v29 = v20 - v9;
  if ((v11 & 1) != 0)
  {
    if ((v28 & 1) != 0)
    {
      v30 = v13 + 4;
      v32 = (v13[3] >> 6) + (v13[1] >> 6);
      *v18 = (32 * ((v13[2] >> 6) + (*v13 >> 6)) + 32) & 0xFFC0;
      v18[1] = (32 * v32 + 32) & 0xFFC0;
      v31 = v18 + 2;
    }
    else
    {
      v30 = v13;
      v31 = v18;
    }
    if (v20 != v9)
    {
      v33 = 0;
      do
      {
        v34 = &v31[v33];
        v35 = ((unsigned __int16)v30[3] >> 6) + ((unsigned __int16)v30[1] >> 6);
        *v34 = (32 * ((v30[2] >> 6) + (*v30 >> 6)) + 32) & 0xFFC0;
        v34[1] = (32 * v35 + 32) & 0xFFC0;
        v33 += 2;
        v30 += 4;
      }
      while (v33 < v29);
    }
    v13 = (unsigned __int16 *)((char *)v13 + v12);
    v18 = (_WORD *)((char *)v18 + v17);
  }
  if (v21 == v27)
  {
    v36 = 0;
  }
  else
  {
    v37 = 0;
    v36 = v21 - v27;
    do
    {
      v38 = v13;
      v39 = v18;
      if ((v28 & 1) != 0)
      {
        v38 = v13 + 4;
        v40 = (v13[3] >> 6) + (v13[1] >> 6);
        *v18 = (32 * ((v13[2] >> 6) + (*v13 >> 6)) + 32) & 0xFFC0;
        v18[1] = (32 * v40 + 32) & 0xFFC0;
        v39 = v18 + 2;
      }
      if (v20 != v9)
      {
        v41 = 0;
        do
        {
          v42 = &v39[v41];
          v43 = ((unsigned __int16)v38[3] >> 6) + ((unsigned __int16)v38[1] >> 6);
          *v42 = (32 * ((v38[2] >> 6) + (*v38 >> 6)) + 32) & 0xFFC0;
          v42[1] = (32 * v43 + 32) & 0xFFC0;
          v41 += 2;
          v38 += 4;
        }
        while (v41 < v29);
      }
      v13 = (unsigned __int16 *)((char *)v13 + v12);
      v18 = (_WORD *)((char *)v18 + v17);
      ++v37;
    }
    while (v37 != v36);
  }
  if (v36 + v26 < v21)
  {
    if ((v28 & 1) != 0)
    {
      v44 = *v13;
      v45 = v13[1];
      v46 = v13[2] >> 6;
      v47 = v13[3] >> 6;
      v13 += 4;
      *v18 = (32 * (v46 + (v44 >> 6)) + 32) & 0xFFC0;
      v18[1] = (32 * (v47 + (v45 >> 6)) + 32) & 0xFFC0;
      v18 += 2;
    }
    if (v20 != v9)
    {
      v48 = 0;
      do
      {
        v49 = &v18[v48];
        v50 = (v13[3] >> 6) + (v13[1] >> 6);
        *v49 = (32 * ((v13[2] >> 6) + (*v13 >> 6)) + 32) & 0xFFC0;
        v49[1] = (32 * v50 + 32) & 0xFFC0;
        v48 += 2;
        v13 += 4;
      }
      while (v48 < v29);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_x444_x422(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _WORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _WORD *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  _WORD *v30;
  _WORD *v31;
  __int16 v32;
  unint64_t v33;
  _WORD *v34;
  __int16 v35;
  unint64_t v36;
  uint64_t v37;
  _WORD *v38;
  _WORD *v39;
  __int16 v40;
  unint64_t v41;
  _WORD *v42;
  __int16 v43;
  __int16 v44;
  __int16 v45;
  unint64_t v46;
  _WORD *v47;
  __int16 v48;
  unint64_t v51;
  uint64_t v52;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = v9 + v8;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = a4[1];
  v13 = (_WORD *)(a3[1] + v12 * v11 + 4 * (v9 + v8));
  v14 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v15 = *(_QWORD *)(a6 + 40);
  v16 = 2 * v14;
  v17 = a8[1];
  v18 = (_WORD *)(a7[1] + v17 * v15 + ((2 * v14) & 0x7FFFFFFFFFFFFFFELL));
  v19 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v14;
  if (((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v9 + v8) >= v19)
    v20 = v19;
  else
    v20 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - v10;
  if (*(_QWORD *)(a2 + 24) >= *(_QWORD *)(a6 + 24))
    v21 = *(_QWORD *)(a6 + 24);
  else
    v21 = *(_QWORD *)(a2 + 24);
  if (v21)
  {
    v51 = v21;
    v52 = a4[1];
    v22 = *a4;
    v23 = *a8;
    v24 = (char *)(*a7 + *a8 * v15 + v16);
    v25 = (char *)(*a3 + *a4 * v11 + 2 * v10);
    do
    {
      memcpy(v24, v25, 2 * v20);
      v25 += v22;
      v24 += v23;
      --v21;
    }
    while (v21);
    v21 = v51;
    v8 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40);
    v9 = v8 & 1;
    v12 = v52;
  }
  v26 = v11 & 1;
  if (v21 >= v26)
    v27 = v11 & 1;
  else
    v27 = 0;
  v28 = v8;
  if (v20 < v9)
    v9 = 0;
  v29 = v20 - v9;
  if ((v11 & 1) != 0)
  {
    if ((v28 & 1) != 0)
    {
      v32 = v13[1] & 0xFFC0;
      v30 = v13 + 4;
      *v18 = *v13 & 0xFFC0;
      v18[1] = v32;
      v31 = v18 + 2;
    }
    else
    {
      v30 = v13;
      v31 = v18;
    }
    if (v20 != v9)
    {
      v33 = 0;
      do
      {
        v34 = &v31[v33];
        v35 = v30[1] & 0xFFC0;
        *v34 = *v30 & 0xFFC0;
        v34[1] = v35;
        v33 += 2;
        v30 += 4;
      }
      while (v33 < v29);
    }
    v13 = (_WORD *)((char *)v13 + v12);
    v18 = (_WORD *)((char *)v18 + v17);
  }
  if (v21 == v27)
  {
    v36 = 0;
  }
  else
  {
    v37 = 0;
    v36 = v21 - v27;
    do
    {
      v38 = v13;
      v39 = v18;
      if ((v28 & 1) != 0)
      {
        v40 = v13[1] & 0xFFC0;
        v38 = v13 + 4;
        *v18 = *v13 & 0xFFC0;
        v18[1] = v40;
        v39 = v18 + 2;
      }
      if (v20 != v9)
      {
        v41 = 0;
        do
        {
          v42 = &v39[v41];
          v43 = v38[1] & 0xFFC0;
          *v42 = *v38 & 0xFFC0;
          v42[1] = v43;
          v41 += 2;
          v38 += 4;
        }
        while (v41 < v29);
      }
      v13 = (_WORD *)((char *)v13 + v12);
      v18 = (_WORD *)((char *)v18 + v17);
      ++v37;
    }
    while (v37 != v36);
  }
  if (v36 + v26 < v21)
  {
    if ((v28 & 1) != 0)
    {
      v44 = *v13 & 0xFFC0;
      v45 = v13[1] & 0xFFC0;
      v13 += 4;
      *v18 = v44;
      v18[1] = v45;
      v18 += 2;
    }
    if (v20 != v9)
    {
      v46 = 0;
      do
      {
        v47 = &v18[v46];
        v48 = v13[1] & 0xFFC0;
        *v47 = *v13 & 0xFFC0;
        v47[1] = v48;
        v46 += 2;
        v13 += 4;
      }
      while (v46 < v29);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_x444_xf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unsigned int v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  unsigned __int16 *v35;
  _WORD *v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  int v45;
  int v46;
  unint64_t v47;
  _WORD *v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  int v52;
  int v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  int v57;
  int v58;
  unint64_t v59;
  uint64_t v60;
  unsigned __int16 *v61;
  _WORD *v62;
  unsigned int v63;
  int v64;
  unsigned int v65;
  int v66;
  int v67;
  unsigned int v68;
  int v69;
  unsigned int v70;
  int v71;
  int v72;
  unint64_t v73;
  _WORD *v74;
  unsigned int v75;
  int v76;
  unsigned int v77;
  int v78;
  int v79;
  unsigned int v80;
  int v81;
  unsigned int v82;
  int v83;
  int v84;
  unsigned int v85;
  int v86;
  unsigned int v87;
  unsigned int v88;
  int v89;
  unsigned int v90;
  int v91;
  unsigned int v92;
  int v93;
  int v94;
  int v95;
  unint64_t v96;
  _WORD *v97;
  unsigned int v98;
  int v99;
  unsigned int v100;
  int v101;
  int v102;
  unsigned int v103;
  int v104;
  unsigned int v105;
  int v106;
  int v107;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = *a3 + *a4 * v12 + 2 * (v10 + v8);
    v28 = *a7 + *a8 * v18 + v19;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          v30 = *(unsigned __int16 *)(v27 + 2 * i) >> 6;
          if (v30 >= 0x3AC)
            v30 = 940;
          if (v30 <= 0x40)
            v30 = 64;
          *(_WORD *)(v28 + 2 * i) = (unsigned __int16)((1023 * v30 - 65472) / 0x36C) << 6;
        }
      }
      v27 += v25;
      v28 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  v31 = v12 & 1;
  if (v9 >= v31)
    v32 = v12 & 1;
  else
    v32 = 0;
  v33 = v8;
  if (v22 < v10)
    v10 = 0;
  v34 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v37 = *v14;
      v38 = v37 >> 6;
      v39 = v14[1];
      v40 = v39 >> 6;
      if (v37 >> 6 >= 0x3C0)
        v38 = 960;
      if (v37 < 0x1000)
        v38 = 64;
      if (v40 >= 0x3C0)
        v40 = 960;
      if (v39 >= 0x1000)
        v41 = v40;
      else
        v41 = 64;
      v42 = v14[2];
      v43 = v42 >> 6;
      v44 = v14[3];
      if (v42 >> 6 >= 0x3C0)
        v43 = 960;
      if (v42 >= 0x1000)
        v45 = v43;
      else
        v45 = 64;
      if (v44 >> 6 >= 0x3C0)
        v46 = 960;
      else
        v46 = v44 >> 6;
      if (v44 < 0x1000)
        v46 = 64;
      v35 = v14 + 4;
      *v21 = (32
            * (((613566757 * (unint64_t)((1023 * v45 - 65472) >> 7)) >> 32)
             + ((613566757 * (unint64_t)((1023 * v38 - 65472) >> 7)) >> 32))
            + 32) & 0xFFC0;
      v21[1] = (32
              * (((613566757 * (unint64_t)((1023 * v46 - 65472) >> 7)) >> 32)
               + ((613566757 * (unint64_t)((1023 * v41 - 65472) >> 7)) >> 32))
              + 32) & 0xFFC0;
      v36 = v21 + 2;
    }
    else
    {
      v35 = v14;
      v36 = v21;
    }
    if (v22 != v10)
    {
      v47 = 0;
      do
      {
        v48 = &v36[v47];
        v49 = *v35;
        v50 = v49 >> 6;
        v51 = v35[1];
        if (v49 >> 6 >= 0x3C0)
          v50 = 960;
        if (v49 >= 0x1000)
          v52 = v50;
        else
          v52 = 64;
        if (v51 >> 6 >= 0x3C0)
          v53 = 960;
        else
          v53 = v51 >> 6;
        if (v51 < 0x1000)
          v53 = 64;
        v54 = v35[2];
        v55 = v54 >> 6;
        v56 = v35[3];
        if (v54 >> 6 >= 0x3C0)
          v55 = 960;
        if (v54 >= 0x1000)
          v57 = v55;
        else
          v57 = 64;
        if (v56 >> 6 >= 0x3C0)
          v58 = 960;
        else
          v58 = v56 >> 6;
        if (v56 < 0x1000)
          v58 = 64;
        *v48 = (32
              * (((613566757 * (unint64_t)((1023 * v57 - 65472) >> 7)) >> 32)
               + ((613566757 * (unint64_t)((1023 * v52 - 65472) >> 7)) >> 32))
              + 32) & 0xFFC0;
        v48[1] = (32
                * (((613566757 * (unint64_t)((1023 * v58 - 65472) >> 7)) >> 32)
                 + ((613566757 * (unint64_t)((1023 * v53 - 65472) >> 7)) >> 32))
                + 32) & 0xFFC0;
        v47 += 2;
        v35 += 4;
      }
      while (v47 < v34);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v32)
  {
    v59 = 0;
  }
  else
  {
    v60 = 0;
    v59 = v9 - v32;
    do
    {
      v61 = v14;
      v62 = v21;
      if ((v33 & 1) != 0)
      {
        v63 = *v14;
        v64 = v63 >> 6;
        v65 = v14[1];
        if (v63 >> 6 >= 0x3C0)
          v64 = 960;
        if (v63 < 0x1000)
          v64 = 64;
        if (v65 >> 6 >= 0x3C0)
          v66 = 960;
        else
          v66 = v65 >> 6;
        if (v65 >= 0x1000)
          v67 = v66;
        else
          v67 = 64;
        v68 = v14[2];
        v69 = v68 >> 6;
        v70 = v14[3];
        if (v68 >> 6 >= 0x3C0)
          v69 = 960;
        if (v68 < 0x1000)
          v69 = 64;
        if (v70 >> 6 >= 0x3C0)
          v71 = 960;
        else
          v71 = v70 >> 6;
        if (v70 >= 0x1000)
          v72 = v71;
        else
          v72 = 64;
        v61 = v14 + 4;
        *v21 = (32
              * (((613566757 * (unint64_t)((1023 * v69 - 65472) >> 7)) >> 32)
               + ((613566757 * (unint64_t)((1023 * v64 - 65472) >> 7)) >> 32))
              + 32) & 0xFFC0;
        v21[1] = (32
                * (((613566757 * (unint64_t)((1023 * v72 - 65472) >> 7)) >> 32)
                 + ((613566757 * (unint64_t)((1023 * v67 - 65472) >> 7)) >> 32))
                + 32) & 0xFFC0;
        v62 = v21 + 2;
      }
      if (v22 != v10)
      {
        v73 = 0;
        do
        {
          v74 = &v62[v73];
          v75 = *v61;
          v76 = v75 >> 6;
          v77 = v61[1];
          if (v75 >> 6 >= 0x3C0)
            v76 = 960;
          if (v75 >= 0x1000)
            v78 = v76;
          else
            v78 = 64;
          if (v77 >> 6 >= 0x3C0)
            v79 = 960;
          else
            v79 = v77 >> 6;
          if (v77 < 0x1000)
            v79 = 64;
          v80 = v61[2];
          v81 = v80 >> 6;
          v82 = v61[3];
          if (v80 >> 6 >= 0x3C0)
            v81 = 960;
          if (v80 >= 0x1000)
            v83 = v81;
          else
            v83 = 64;
          if (v82 >> 6 >= 0x3C0)
            v84 = 960;
          else
            v84 = v82 >> 6;
          if (v82 < 0x1000)
            v84 = 64;
          *v74 = (32
                * (((613566757 * (unint64_t)((1023 * v83 - 65472) >> 7)) >> 32)
                 + ((613566757 * (unint64_t)((1023 * v78 - 65472) >> 7)) >> 32))
                + 32) & 0xFFC0;
          v74[1] = (32
                  * (((613566757 * (unint64_t)((1023 * v84 - 65472) >> 7)) >> 32)
                   + ((613566757 * (unint64_t)((1023 * v79 - 65472) >> 7)) >> 32))
                  + 32) & 0xFFC0;
          v73 += 2;
          v61 += 4;
        }
        while (v73 < v34);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v60;
    }
    while (v60 != v59);
  }
  if (v59 + v31 < v9)
  {
    if ((v33 & 1) != 0)
    {
      v85 = *v14;
      v86 = v85 >> 6;
      v87 = v14[1];
      v88 = v87 >> 6;
      if (v85 >> 6 >= 0x3C0)
        v86 = 960;
      if (v85 < 0x1000)
        v86 = 64;
      if (v88 >= 0x3C0)
        v88 = 960;
      if (v87 >= 0x1000)
        v89 = v88;
      else
        v89 = 64;
      v90 = v14[2];
      v91 = v90 >> 6;
      v92 = v14[3];
      if (v90 >> 6 >= 0x3C0)
        v91 = 960;
      if (v90 >= 0x1000)
        v93 = v91;
      else
        v93 = 64;
      if (v92 >> 6 >= 0x3C0)
        v94 = 960;
      else
        v94 = v92 >> 6;
      if (v92 >= 0x1000)
        v95 = v94;
      else
        v95 = 64;
      v14 += 4;
      *v21 = (32
            * (((613566757 * (unint64_t)((1023 * v93 - 65472) >> 7)) >> 32)
             + ((613566757 * (unint64_t)((1023 * v86 - 65472) >> 7)) >> 32))
            + 32) & 0xFFC0;
      v21[1] = (32
              * (((613566757 * (unint64_t)((1023 * v95 - 65472) >> 7)) >> 32)
               + ((613566757 * (unint64_t)((1023 * v89 - 65472) >> 7)) >> 32))
              + 32) & 0xFFC0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v96 = 0;
      do
      {
        v97 = &v21[v96];
        v98 = *v14;
        v99 = v98 >> 6;
        v100 = v14[1];
        if (v98 >> 6 >= 0x3C0)
          v99 = 960;
        if (v98 >= 0x1000)
          v101 = v99;
        else
          v101 = 64;
        if (v100 >> 6 >= 0x3C0)
          v102 = 960;
        else
          v102 = v100 >> 6;
        if (v100 < 0x1000)
          v102 = 64;
        v103 = v14[2];
        v104 = v103 >> 6;
        v105 = v14[3];
        if (v103 >> 6 >= 0x3C0)
          v104 = 960;
        if (v103 >= 0x1000)
          v106 = v104;
        else
          v106 = 64;
        if (v105 >> 6 >= 0x3C0)
          v107 = 960;
        else
          v107 = v105 >> 6;
        if (v105 < 0x1000)
          v107 = 64;
        *v97 = (32
              * (((613566757 * (unint64_t)((1023 * v106 - 65472) >> 7)) >> 32)
               + ((613566757 * (unint64_t)((1023 * v101 - 65472) >> 7)) >> 32))
              + 32) & 0xFFC0;
        v97[1] = (32
                * (((613566757 * (unint64_t)((1023 * v107 - 65472) >> 7)) >> 32)
                 + ((613566757 * (unint64_t)((1023 * v102 - 65472) >> 7)) >> 32))
                + 32) & 0xFFC0;
        v96 += 2;
        v14 += 4;
      }
      while (v96 < v34);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_x444_xf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unsigned int v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  unsigned __int16 *v35;
  _WORD *v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  unint64_t v42;
  _WORD *v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  int v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  unsigned __int16 *v51;
  _WORD *v52;
  unsigned int v53;
  int v54;
  unsigned int v55;
  int v56;
  int v57;
  unint64_t v58;
  _WORD *v59;
  unsigned int v60;
  int v61;
  unsigned int v62;
  int v63;
  int v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  int v69;
  unint64_t v70;
  _WORD *v71;
  unsigned int v72;
  int v73;
  unsigned int v74;
  int v75;
  int v76;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = *a3 + *a4 * v12 + 2 * (v10 + v8);
    v28 = *a7 + *a8 * v18 + v19;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          v30 = *(unsigned __int16 *)(v27 + 2 * i) >> 6;
          if (v30 >= 0x3AC)
            v30 = 940;
          if (v30 <= 0x40)
            v30 = 64;
          *(_WORD *)(v28 + 2 * i) = (unsigned __int16)((1023 * v30 - 65472) / 0x36C) << 6;
        }
      }
      v27 += v25;
      v28 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  v31 = v12 & 1;
  if (v9 >= v31)
    v32 = v12 & 1;
  else
    v32 = 0;
  v33 = v8;
  if (v22 < v10)
    v10 = 0;
  v34 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v37 = *v14;
      v38 = v37 >> 6;
      v39 = v14[1];
      v40 = v39 >> 6;
      if (v37 >> 6 >= 0x3C0)
        v38 = 960;
      if (v37 < 0x1000)
        v38 = 64;
      if (v40 >= 0x3C0)
        v40 = 960;
      if (v39 >= 0x1000)
        v41 = v40;
      else
        v41 = 64;
      v35 = v14 + 4;
      *v21 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v38 - 65472) >> 7)) >> 32) << 6;
      v21[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v41 - 65472) >> 7)) >> 32) << 6;
      v36 = v21 + 2;
    }
    else
    {
      v35 = v14;
      v36 = v21;
    }
    if (v22 != v10)
    {
      v42 = 0;
      do
      {
        v43 = &v36[v42];
        v44 = *v35;
        v45 = v44 >> 6;
        v46 = v35[1];
        if (v44 >> 6 >= 0x3C0)
          v45 = 960;
        if (v44 >= 0x1000)
          v47 = v45;
        else
          v47 = 64;
        if (v46 >> 6 >= 0x3C0)
          v48 = 960;
        else
          v48 = v46 >> 6;
        if (v46 < 0x1000)
          v48 = 64;
        *v43 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v47 - 65472) >> 7)) >> 32) << 6;
        v43[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v48 - 65472) >> 7)) >> 32) << 6;
        v42 += 2;
        v35 += 4;
      }
      while (v42 < v34);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v32)
  {
    v49 = 0;
  }
  else
  {
    v50 = 0;
    v49 = v9 - v32;
    do
    {
      v51 = v14;
      v52 = v21;
      if ((v33 & 1) != 0)
      {
        v53 = *v14;
        v54 = v53 >> 6;
        v55 = v14[1];
        if (v53 >> 6 >= 0x3C0)
          v54 = 960;
        if (v53 < 0x1000)
          v54 = 64;
        if (v55 >> 6 >= 0x3C0)
          v56 = 960;
        else
          v56 = v55 >> 6;
        if (v55 >= 0x1000)
          v57 = v56;
        else
          v57 = 64;
        v51 = v14 + 4;
        *v21 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v54 - 65472) >> 7)) >> 32) << 6;
        v21[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v57 - 65472) >> 7)) >> 32) << 6;
        v52 = v21 + 2;
      }
      if (v22 != v10)
      {
        v58 = 0;
        do
        {
          v59 = &v52[v58];
          v60 = *v51;
          v61 = v60 >> 6;
          v62 = v51[1];
          if (v60 >> 6 >= 0x3C0)
            v61 = 960;
          if (v60 >= 0x1000)
            v63 = v61;
          else
            v63 = 64;
          if (v62 >> 6 >= 0x3C0)
            v64 = 960;
          else
            v64 = v62 >> 6;
          if (v62 < 0x1000)
            v64 = 64;
          *v59 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v63 - 65472) >> 7)) >> 32) << 6;
          v59[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v64 - 65472) >> 7)) >> 32) << 6;
          v58 += 2;
          v51 += 4;
        }
        while (v58 < v34);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v50;
    }
    while (v50 != v49);
  }
  if (v49 + v31 < v9)
  {
    if ((v33 & 1) != 0)
    {
      v65 = *v14;
      v66 = v65 >> 6;
      v67 = v14[1];
      v68 = v67 >> 6;
      if (v65 >> 6 >= 0x3C0)
        v66 = 960;
      if (v65 < 0x1000)
        v66 = 64;
      if (v68 >= 0x3C0)
        v68 = 960;
      if (v67 >= 0x1000)
        v69 = v68;
      else
        v69 = 64;
      v14 += 4;
      *v21 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v66 - 65472) >> 7)) >> 32) << 6;
      v21[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v69 - 65472) >> 7)) >> 32) << 6;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v70 = 0;
      do
      {
        v71 = &v21[v70];
        v72 = *v14;
        v73 = v72 >> 6;
        v74 = v14[1];
        if (v72 >> 6 >= 0x3C0)
          v73 = 960;
        if (v72 >= 0x1000)
          v75 = v73;
        else
          v75 = 64;
        if (v74 >> 6 >= 0x3C0)
          v76 = 960;
        else
          v76 = v74 >> 6;
        if (v74 < 0x1000)
          v76 = 64;
        *v71 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v75 - 65472) >> 7)) >> 32) << 6;
        v71[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v76 - 65472) >> 7)) >> 32) << 6;
        v70 += 2;
        v14 += 4;
      }
      while (v70 < v34);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_x444_x420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v33;
  unint64_t v34;
  _WORD *v35;
  _WORD *v36;
  unsigned __int16 *v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  unint64_t v41;
  _WORD *v42;
  _WORD *v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  _WORD *v47;
  _WORD *v48;
  unsigned __int16 *v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  unint64_t v53;
  _WORD *v54;
  _WORD *v55;
  int v56;
  unint64_t v59;
  uint64_t v60;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (_WORD *)(a3[1] + v15 * (v12 + v9) + 4 * (v10 + v8));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = 2 * v17;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v23 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v17;
  if (((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8) >= v23)
    v24 = v23;
  else
    v24 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - v11;
  if (v14 - v13 >= v19 - v18)
    v25 = v19 - v18;
  else
    v25 = v14 - v13;
  if (v25)
  {
    v59 = v25;
    v60 = a8[1];
    v26 = *a4;
    v27 = *a8;
    if (v13 >= v9)
      v28 = 0;
    else
      v28 = *a4;
    v29 = (char *)(*a3 + *a4 * v13 + 2 * v11 + v28);
    v30 = (char *)(*a7 + v27 * v18 + v20);
    v31 = -(uint64_t)v25;
    do
    {
      memcpy(v30, v29, 2 * v24);
      v29 += v26;
      v30 += v27;
    }
    while (!__CFADD__(v31++, 1));
    v25 = v59;
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
    v21 = v60;
  }
  if (v25 >= v12)
    v33 = v12;
  else
    v33 = 0;
  if (v24 < v10)
    v10 = 0;
  v34 = v24 - v10;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v37 = (_WORD *)((char *)v16 + v15 + 4);
      v38 = *v37;
      v39 = v37[1];
      v35 = v16 + 4;
      v40 = (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 6)
          + ((unsigned __int16)v16[1] >> 6)
          + ((unsigned __int16)v16[3] >> 6)
          + (v39 >> 6);
      *v22 = (16 * ((*(_WORD *)((char *)v16 + v15) >> 6) + (*v16 >> 6) + (v16[2] >> 6) + (v38 >> 6)) + 32) & 0xFFC0;
      v22[1] = (16 * v40 + 32) & 0xFFC0;
      v36 = v22 + 2;
    }
    else
    {
      v35 = v16;
      v36 = v22;
    }
    if (v24 != v10)
    {
      v41 = 0;
      v42 = v35 + 2;
      do
      {
        v43 = &v36[v41];
        v44 = (*(unsigned __int16 *)((char *)v42 + v15 - 2) >> 6)
            + ((unsigned __int16)*(v42 - 1) >> 6)
            + ((unsigned __int16)v42[1] >> 6)
            + (*(unsigned __int16 *)((char *)v42 + v15 + 2) >> 6);
        *v43 = (16
              * ((*(_WORD *)((char *)v42 + v15 - 4) >> 6)
               + (*(v42 - 2) >> 6)
               + (*v42 >> 6)
               + (*(_WORD *)((char *)v42 + v15) >> 6))
              + 32) & 0xFFC0;
        v43[1] = (16 * v44 + 32) & 0xFFC0;
        v41 += 2;
        v42 += 4;
      }
      while (v41 < v34);
    }
    v16 += v15;
    v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v25 != v33)
  {
    v45 = 0;
    v46 = v25 - v33;
    do
    {
      v47 = v16;
      v48 = v22;
      if ((v8 & 1) != 0)
      {
        v49 = (_WORD *)((char *)v16 + v15 + 4);
        v50 = *v49;
        v51 = v49[1];
        v47 = v16 + 4;
        v52 = (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 6)
            + ((unsigned __int16)v16[1] >> 6)
            + ((unsigned __int16)v16[3] >> 6)
            + (v51 >> 6);
        *v22 = (16 * ((*(_WORD *)((char *)v16 + v15) >> 6) + (*v16 >> 6) + (v16[2] >> 6) + (v50 >> 6)) + 32) & 0xFFC0;
        v22[1] = (16 * v52 + 32) & 0xFFC0;
        v48 = v22 + 2;
      }
      if (v24 != v10)
      {
        v53 = 0;
        v54 = v47 + 2;
        do
        {
          v55 = &v48[v53];
          v56 = (*(unsigned __int16 *)((char *)v54 + v15 - 2) >> 6)
              + ((unsigned __int16)*(v54 - 1) >> 6)
              + ((unsigned __int16)v54[1] >> 6)
              + (*(unsigned __int16 *)((char *)v54 + v15 + 2) >> 6);
          *v55 = (16
                * ((*(_WORD *)((char *)v54 + v15 - 4) >> 6)
                 + (*(v54 - 2) >> 6)
                 + (*v54 >> 6)
                 + (*(_WORD *)((char *)v54 + v15) >> 6))
                + 32) & 0xFFC0;
          v55[1] = (16 * v56 + 32) & 0xFFC0;
          v53 += 2;
          v54 += 4;
        }
        while (v53 < v34);
      }
      v16 += v15;
      v22 = (_WORD *)((char *)v22 + v21);
      v45 += 2;
    }
    while (v45 < v46);
  }
  return 0;
}

uint64_t vt_CopyDec_x444_x420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v33;
  unint64_t v34;
  _WORD *v35;
  _WORD *v36;
  __int16 v37;
  unint64_t v38;
  _WORD *v39;
  __int16 v40;
  unint64_t v41;
  unint64_t v42;
  _WORD *v43;
  _WORD *v44;
  __int16 v45;
  unint64_t v46;
  _WORD *v47;
  __int16 v48;
  unint64_t v51;
  uint64_t v52;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (_WORD *)(a3[1] + v15 * (v12 + v9) + 4 * (v10 + v8));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = 2 * v17;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v23 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v17;
  if (((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8) >= v23)
    v24 = v23;
  else
    v24 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - v11;
  if (v14 - v13 >= v19 - v18)
    v25 = v19 - v18;
  else
    v25 = v14 - v13;
  if (v25)
  {
    v51 = v25;
    v52 = a4[1];
    v26 = *a4;
    v27 = *a8;
    if (v13 >= v9)
      v28 = 0;
    else
      v28 = *a4;
    v29 = (char *)(*a3 + *a4 * v13 + 2 * v11 + v28);
    v30 = (char *)(*a7 + v27 * v18 + v20);
    v31 = -(uint64_t)v25;
    do
    {
      memcpy(v30, v29, 2 * v24);
      v29 += v26;
      v30 += v27;
    }
    while (!__CFADD__(v31++, 1));
    v25 = v51;
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
    v15 = v52;
  }
  if (v25 >= v12)
    v33 = v12;
  else
    v33 = 0;
  if (v24 < v10)
    v10 = 0;
  v34 = v24 - v10;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v37 = v16[1] & 0xFFC0;
      v35 = v16 + 4;
      *v22 = *v16 & 0xFFC0;
      v22[1] = v37;
      v36 = v22 + 2;
    }
    else
    {
      v35 = v16;
      v36 = v22;
    }
    if (v24 != v10)
    {
      v38 = 0;
      do
      {
        v39 = &v36[v38];
        v40 = v35[1] & 0xFFC0;
        *v39 = *v35 & 0xFFC0;
        v39[1] = v40;
        v38 += 2;
        v35 += 4;
      }
      while (v38 < v34);
    }
    v16 += v15;
    v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v25 != v33)
  {
    v41 = 0;
    v42 = v25 - v33;
    do
    {
      v43 = v16;
      v44 = v22;
      if ((v8 & 1) != 0)
      {
        v45 = v16[1] & 0xFFC0;
        v43 = v16 + 4;
        *v22 = *v16 & 0xFFC0;
        v22[1] = v45;
        v44 = v22 + 2;
      }
      if (v24 != v10)
      {
        v46 = 0;
        do
        {
          v47 = &v44[v46];
          v48 = v43[1] & 0xFFC0;
          *v47 = *v43 & 0xFFC0;
          v47[1] = v48;
          v46 += 2;
          v43 += 4;
        }
        while (v46 < v34);
      }
      v16 += v15;
      v22 = (_WORD *)((char *)v22 + v21);
      v41 += 2;
    }
    while (v41 < v42);
  }
  return 0;
}

uint64_t vt_CopyAvg_x444_xf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  unsigned __int16 *v37;
  _WORD *v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  unsigned __int16 *v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  unint64_t v60;
  unsigned __int16 *v61;
  _WORD *v62;
  unsigned int v63;
  int v64;
  unsigned int v65;
  unsigned __int16 *v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  BOOL v70;
  unsigned int v71;
  int v72;
  int v73;
  int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  int v80;
  int v81;
  unsigned int v82;
  int v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  int v88;
  unint64_t v89;
  unint64_t v90;
  unsigned __int16 *v91;
  _WORD *v92;
  unsigned int v93;
  int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  unsigned int v104;
  int v105;
  unsigned int v106;
  unsigned __int16 *v107;
  unsigned int v108;
  unsigned int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  unint64_t v114;
  unsigned __int16 *v115;
  _WORD *v116;
  unsigned int v117;
  int v118;
  unsigned int v119;
  unsigned __int16 *v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  int v125;
  int v126;
  int v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  int v134;
  int v135;
  unsigned int v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  int v141;
  uint64_t v143;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = (v8 & 1) + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = a4[1];
  v15 = (unsigned __int16 *)(a3[1] + v14 * v12 + 4 * (v10 + v9));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = 2 * v16;
  v143 = a8[1];
  v21 = (_WORD *)(a7[1] + ((unint64_t)(v143 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  v24 = v13 - v12;
  v25 = v19 - v18;
  if (v24 < v19 - v18)
    v25 = v24;
  if (v25)
  {
    v26 = 0;
    v27 = *a4;
    v28 = *a3 + *a4 * v12 + 2 * (v10 + v9);
    v29 = *a8;
    if (v12 >= v8)
      v30 = 0;
    else
      v30 = *a4;
    v31 = v28 + v30;
    v32 = *a7 + v29 * v18 + v20;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          v34 = *(unsigned __int16 *)(v31 + 2 * i) >> 6;
          if (v34 >= 0x3AC)
            v34 = 940;
          if (v34 <= 0x40)
            v34 = 64;
          *(_WORD *)(v32 + 2 * i) = (unsigned __int16)((1023 * v34 - 65472) / 0x36C) << 6;
        }
      }
      v31 += v27;
      v32 += v29;
      ++v26;
    }
    while (v26 != v25);
  }
  if (v25 >= (v8 & 1))
    v35 = v8 & 1;
  else
    v35 = 0;
  if (v22 < v10)
    v10 = 0;
  v36 = v22 - v10;
  if ((v8 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v39 = *v15;
      v40 = v39 >> 6;
      v41 = v15[1];
      v42 = v41 >> 6;
      v43 = *(unsigned __int16 *)((char *)v15 + v14);
      v44 = *(unsigned __int16 *)((char *)v15 + v14 + 2);
      if (v39 >> 6 >= 0x3C0)
        v40 = 960;
      if (v39 < 0x1000)
        v40 = 64;
      if (v42 >= 0x3C0)
        v42 = 960;
      if (v41 < 0x1000)
        v42 = 64;
      if (v43 >> 6 >= 0x3C0)
        v45 = 960;
      else
        v45 = v43 >> 6;
      if (v43 >= 0x1000)
        v46 = v45;
      else
        v46 = 64;
      if (v44 >> 6 >= 0x3C0)
        v47 = 960;
      else
        v47 = v44 >> 6;
      if (v44 >= 0x1000)
        v48 = v47;
      else
        v48 = 64;
      v49 = v15[2];
      v50 = v49 >> 6;
      v51 = v15[3];
      v52 = (unsigned __int16 *)((char *)v15 + v14 + 4);
      v53 = *v52;
      v54 = v52[1];
      if (v49 >> 6 >= 0x3C0)
        v50 = 960;
      if (v49 >= 0x1000)
        v55 = v50;
      else
        v55 = 64;
      if (v51 >> 6 >= 0x3C0)
        v56 = 960;
      else
        v56 = v51 >> 6;
      if (v51 < 0x1000)
        v56 = 64;
      if (v53 >> 6 >= 0x3C0)
        v57 = 960;
      else
        v57 = v53 >> 6;
      if (v53 < 0x1000)
        v57 = 64;
      if (v54 >> 6 >= 0x3C0)
        v58 = 960;
      else
        v58 = v54 >> 6;
      if (v54 >= 0x1000)
        v59 = v58;
      else
        v59 = 64;
      v37 = v15 + 4;
      *v21 = (16
            * (((613566757 * (unint64_t)((1023 * v46 - 65472) >> 7)) >> 32)
             + ((613566757 * (unint64_t)((1023 * v40 - 65472) >> 7)) >> 32)
             + ((613566757 * (unint64_t)((1023 * v55 - 65472) >> 7)) >> 32)
             + ((613566757 * (unint64_t)((1023 * v57 - 65472) >> 7)) >> 32))
            + 32) & 0xFFC0;
      v21[1] = (16
              * (((613566757 * (unint64_t)((1023 * v48 - 65472) >> 7)) >> 32)
               + ((613566757 * (unint64_t)((1023 * v42 - 65472) >> 7)) >> 32)
               + ((613566757 * (unint64_t)((1023 * v56 - 65472) >> 7)) >> 32)
               + ((613566757 * (unint64_t)((1023 * v59 - 65472) >> 7)) >> 32))
              + 32) & 0xFFC0;
      v38 = v21 + 2;
    }
    else
    {
      v37 = v15;
      v38 = v21;
    }
    if (v22 != v10)
    {
      v60 = 0;
      v61 = v37 + 2;
      do
      {
        v62 = &v38[v60];
        v63 = *(v61 - 2);
        v64 = v63 >> 6;
        v65 = *(v61 - 1);
        v66 = (unsigned __int16 *)((char *)v61 + v14);
        v67 = *(unsigned __int16 *)((char *)v61 + v14 - 4);
        v68 = v65 >> 6;
        v69 = *(unsigned __int16 *)((char *)v61 + v14 - 2);
        if (v63 >> 6 >= 0x3C0)
          v64 = 960;
        v70 = v63 >= 0x1000;
        v71 = v69 >> 6;
        if (!v70)
          v64 = 64;
        if (v68 >= 0x3C0)
          v68 = 960;
        if (v65 >= 0x1000)
          v72 = v68;
        else
          v72 = 64;
        if (v67 >> 6 >= 0x3C0)
          v73 = 960;
        else
          v73 = v67 >> 6;
        if (v67 >= 0x1000)
          v74 = v73;
        else
          v74 = 64;
        if (v71 >= 0x3C0)
          v71 = 960;
        v70 = v69 >= 0x1000;
        v75 = *v61;
        v76 = v75 >> 6;
        v77 = v61[1];
        v78 = *v66;
        if (!v70)
          v71 = 64;
        v79 = v66[1];
        if (v76 >= 0x3C0)
          v76 = 960;
        if (v75 >= 0x1000)
          v80 = v76;
        else
          v80 = 64;
        if (v77 >> 6 >= 0x3C0)
          v81 = 960;
        else
          v81 = v77 >> 6;
        if (v77 < 0x1000)
          v81 = 64;
        v82 = v79 >> 6;
        if (v78 >> 6 >= 0x3C0)
          v83 = 960;
        else
          v83 = v78 >> 6;
        if (v78 < 0x1000)
          v83 = 64;
        v84 = (613566757 * (unint64_t)((1023 * v64 - 65472) >> 7)) >> 32;
        if (v82 >= 0x3C0)
          v82 = 960;
        v85 = (613566757 * (unint64_t)((1023 * v72 - 65472) >> 7)) >> 32;
        v70 = v79 >= 0x1000;
        v86 = (613566757 * (unint64_t)((1023 * v74 - 65472) >> 7)) >> 32;
        v87 = 613566757 * ((1023 * v71 - 65472) >> 7);
        if (v70)
          v88 = v82;
        else
          v88 = 64;
        *v62 = (16
              * (v86
               + v84
               + ((613566757 * (unint64_t)((1023 * v80 - 65472) >> 7)) >> 32)
               + ((613566757 * (unint64_t)((1023 * v83 - 65472) >> 7)) >> 32))
              + 32) & 0xFFC0;
        v62[1] = (16
                * (WORD2(v87)
                 + v85
                 + ((613566757 * (unint64_t)((1023 * v81 - 65472) >> 7)) >> 32)
                 + ((613566757 * (unint64_t)((1023 * v88 - 65472) >> 7)) >> 32))
                + 32) & 0xFFC0;
        v60 += 2;
        v61 += 4;
      }
      while (v60 < v36);
    }
    v15 += v14;
    v21 = (_WORD *)((char *)v21 + v143);
  }
  if (v25 != v35)
  {
    v89 = 0;
    v90 = v25 - v35;
    do
    {
      v91 = v15;
      v92 = v21;
      if ((v9 & 1) != 0)
      {
        v93 = *v15;
        v94 = v93 >> 6;
        v95 = v15[1];
        v96 = *(unsigned __int16 *)((char *)v15 + v14);
        v97 = *(unsigned __int16 *)((char *)v15 + v14 + 2);
        if (v93 >> 6 >= 0x3C0)
          v94 = 960;
        if (v93 >= 0x1000)
          v98 = v94;
        else
          v98 = 64;
        if (v95 >> 6 >= 0x3C0)
          v99 = 960;
        else
          v99 = v95 >> 6;
        if (v95 < 0x1000)
          v99 = 64;
        if (v96 >> 6 >= 0x3C0)
          v100 = 960;
        else
          v100 = v96 >> 6;
        if (v96 >= 0x1000)
          v101 = v100;
        else
          v101 = 64;
        if (v97 >> 6 >= 0x3C0)
          v102 = 960;
        else
          v102 = v97 >> 6;
        if (v97 >= 0x1000)
          v103 = v102;
        else
          v103 = 64;
        v104 = v15[2];
        v105 = v104 >> 6;
        v106 = v15[3];
        v107 = (unsigned __int16 *)((char *)v15 + v14 + 4);
        v108 = *v107;
        v109 = v107[1];
        if (v104 >> 6 >= 0x3C0)
          v105 = 960;
        if (v104 >= 0x1000)
          v110 = v105;
        else
          v110 = 64;
        if (v106 >> 6 >= 0x3C0)
          v111 = 960;
        else
          v111 = v106 >> 6;
        if (v106 < 0x1000)
          v111 = 64;
        if (v108 >> 6 >= 0x3C0)
          v112 = 960;
        else
          v112 = v108 >> 6;
        if (v108 < 0x1000)
          v112 = 64;
        if (v109 >> 6 >= 0x3C0)
          v113 = 960;
        else
          v113 = v109 >> 6;
        if (v109 < 0x1000)
          v113 = 64;
        v91 = v15 + 4;
        *v21 = (16
              * (((613566757 * (unint64_t)((1023 * v101 - 65472) >> 7)) >> 32)
               + ((613566757 * (unint64_t)((1023 * v98 - 65472) >> 7)) >> 32)
               + ((613566757 * (unint64_t)((1023 * v110 - 65472) >> 7)) >> 32)
               + ((613566757 * (unint64_t)((1023 * v112 - 65472) >> 7)) >> 32))
              + 32) & 0xFFC0;
        v21[1] = (16
                * (((613566757 * (unint64_t)((1023 * v103 - 65472) >> 7)) >> 32)
                 + ((613566757 * (unint64_t)((1023 * v99 - 65472) >> 7)) >> 32)
                 + ((613566757 * (unint64_t)((1023 * v111 - 65472) >> 7)) >> 32)
                 + ((613566757 * (unint64_t)((1023 * v113 - 65472) >> 7)) >> 32))
                + 32) & 0xFFC0;
        v92 = v21 + 2;
      }
      if (v22 != v10)
      {
        v114 = 0;
        v115 = v91 + 2;
        do
        {
          v116 = &v92[v114];
          v117 = *(v115 - 2);
          v118 = v117 >> 6;
          v119 = *(v115 - 1);
          v120 = (unsigned __int16 *)((char *)v115 + v14);
          v121 = *(unsigned __int16 *)((char *)v115 + v14 - 4);
          v122 = v119 >> 6;
          v123 = *(unsigned __int16 *)((char *)v115 + v14 - 2);
          if (v117 >> 6 >= 0x3C0)
            v118 = 960;
          v70 = v117 >= 0x1000;
          v124 = v123 >> 6;
          if (!v70)
            v118 = 64;
          if (v122 >= 0x3C0)
            v122 = 960;
          if (v119 >= 0x1000)
            v125 = v122;
          else
            v125 = 64;
          if (v121 >> 6 >= 0x3C0)
            v126 = 960;
          else
            v126 = v121 >> 6;
          if (v121 >= 0x1000)
            v127 = v126;
          else
            v127 = 64;
          if (v124 >= 0x3C0)
            v124 = 960;
          v70 = v123 >= 0x1000;
          v128 = *v115;
          v129 = v128 >> 6;
          v130 = v115[1];
          v131 = *v120;
          if (!v70)
            v124 = 64;
          v132 = v131 >> 6;
          v133 = v120[1];
          if (v129 >= 0x3C0)
            v129 = 960;
          if (v128 >= 0x1000)
            v134 = v129;
          else
            v134 = 64;
          if (v130 >> 6 >= 0x3C0)
            v135 = 960;
          else
            v135 = v130 >> 6;
          if (v130 < 0x1000)
            v135 = 64;
          v136 = v133 >> 6;
          if (v132 >= 0x3C0)
            v132 = 960;
          if (v131 < 0x1000)
            v132 = 64;
          v137 = (613566757 * (unint64_t)((1023 * v118 - 65472) >> 7)) >> 32;
          if (v136 >= 0x3C0)
            v136 = 960;
          v138 = (613566757 * (unint64_t)((1023 * v125 - 65472) >> 7)) >> 32;
          v70 = v133 >= 0x1000;
          v139 = (613566757 * (unint64_t)((1023 * v127 - 65472) >> 7)) >> 32;
          v140 = 613566757 * ((1023 * v124 - 65472) >> 7);
          if (v70)
            v141 = v136;
          else
            v141 = 64;
          *v116 = (16
                 * (v139
                  + v137
                  + ((613566757 * (unint64_t)((1023 * v134 - 65472) >> 7)) >> 32)
                  + ((613566757 * (unint64_t)((1023 * v132 - 65472) >> 7)) >> 32))
                 + 32) & 0xFFC0;
          v116[1] = (16
                   * (WORD2(v140)
                    + v138
                    + ((613566757 * (unint64_t)((1023 * v135 - 65472) >> 7)) >> 32)
                    + ((613566757 * (unint64_t)((1023 * v141 - 65472) >> 7)) >> 32))
                   + 32) & 0xFFC0;
          v114 += 2;
          v115 += 4;
        }
        while (v114 < v36);
      }
      v15 += v14;
      v21 = (_WORD *)((char *)v21 + v143);
      v89 += 2;
    }
    while (v89 < v90);
  }
  return 0;
}

uint64_t vt_CopyDec_x444_xf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  unsigned __int16 *v38;
  _WORD *v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  unint64_t v45;
  _WORD *v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  int v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unsigned __int16 *v55;
  _WORD *v56;
  unsigned int v57;
  int v58;
  unsigned int v59;
  int v60;
  int v61;
  unint64_t v62;
  _WORD *v63;
  unsigned int v64;
  int v65;
  unsigned int v66;
  int v67;
  int v68;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = (v8 & 1) + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = a4[1];
  v15 = (unsigned __int16 *)(a3[1] + v14 * v12 + 4 * (v10 + v9));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = 2 * v16;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v23 = v11 - (v10 + v9);
  v24 = v17 - v16;
  if (v23 >= v24)
    v23 = v24;
  v25 = v13 - v12;
  v26 = v19 - v18;
  if (v25 < v19 - v18)
    v26 = v25;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a3 + *a4 * v12 + 2 * (v10 + v9);
    v30 = *a8;
    if (v12 >= v8)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v29 + v31;
    v33 = *a7 + v30 * v18 + v20;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
        {
          v35 = *(unsigned __int16 *)(v32 + 2 * i) >> 6;
          if (v35 >= 0x3AC)
            v35 = 940;
          if (v35 <= 0x40)
            v35 = 64;
          *(_WORD *)(v33 + 2 * i) = (unsigned __int16)((1023 * v35 - 65472) / 0x36C) << 6;
        }
      }
      v32 += v28;
      v33 += v30;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1))
    v36 = v8 & 1;
  else
    v36 = 0;
  if (v23 < v10)
    v10 = 0;
  v37 = v23 - v10;
  if ((v8 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v40 = *v15;
      v41 = v40 >> 6;
      v42 = v15[1];
      v43 = v42 >> 6;
      if (v40 >> 6 >= 0x3C0)
        v41 = 960;
      if (v40 < 0x1000)
        v41 = 64;
      if (v43 >= 0x3C0)
        v43 = 960;
      if (v42 >= 0x1000)
        v44 = v43;
      else
        v44 = 64;
      v38 = v15 + 4;
      *v22 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v41 - 65472) >> 7)) >> 32) << 6;
      v22[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v44 - 65472) >> 7)) >> 32) << 6;
      v39 = v22 + 2;
    }
    else
    {
      v38 = v15;
      v39 = v22;
    }
    if (v23 != v10)
    {
      v45 = 0;
      do
      {
        v46 = &v39[v45];
        v47 = *v38;
        v48 = v47 >> 6;
        v49 = v38[1];
        if (v47 >> 6 >= 0x3C0)
          v48 = 960;
        if (v47 >= 0x1000)
          v50 = v48;
        else
          v50 = 64;
        if (v49 >> 6 >= 0x3C0)
          v51 = 960;
        else
          v51 = v49 >> 6;
        if (v49 < 0x1000)
          v51 = 64;
        *v46 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v50 - 65472) >> 7)) >> 32) << 6;
        v46[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v51 - 65472) >> 7)) >> 32) << 6;
        v45 += 2;
        v38 += 4;
      }
      while (v45 < v37);
    }
    v15 += v14;
    v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v26 != v36)
  {
    v52 = 0;
    v53 = v26 - v36;
    v54 = 2 * v14;
    do
    {
      v55 = v15;
      v56 = v22;
      if ((v9 & 1) != 0)
      {
        v57 = *v15;
        v58 = v57 >> 6;
        v59 = v15[1];
        if (v57 >> 6 >= 0x3C0)
          v58 = 960;
        if (v57 < 0x1000)
          v58 = 64;
        if (v59 >> 6 >= 0x3C0)
          v60 = 960;
        else
          v60 = v59 >> 6;
        if (v59 >= 0x1000)
          v61 = v60;
        else
          v61 = 64;
        v55 = v15 + 4;
        *v22 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v58 - 65472) >> 7)) >> 32) << 6;
        v22[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v61 - 65472) >> 7)) >> 32) << 6;
        v56 = v22 + 2;
      }
      if (v23 != v10)
      {
        v62 = 0;
        do
        {
          v63 = &v56[v62];
          v64 = *v55;
          v65 = v64 >> 6;
          v66 = v55[1];
          if (v64 >> 6 >= 0x3C0)
            v65 = 960;
          if (v64 >= 0x1000)
            v67 = v65;
          else
            v67 = 64;
          if (v66 >> 6 >= 0x3C0)
            v68 = 960;
          else
            v68 = v66 >> 6;
          if (v66 < 0x1000)
            v68 = 64;
          *v63 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v67 - 65472) >> 7)) >> 32) << 6;
          v63[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v68 - 65472) >> 7)) >> 32) << 6;
          v62 += 2;
          v55 += 4;
        }
        while (v62 < v37);
      }
      v15 = (unsigned __int16 *)((char *)v15 + v54);
      v22 = (_WORD *)((char *)v22 + v21);
      v52 += 2;
    }
    while (v52 < v53);
  }
  return 0;
}

uint64_t vt_Copy_x444_v4a8(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  char v37;
  char v38;
  char v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  unint64_t v53;
  char v54;
  char v55;
  char v56;
  char v57;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a2[3];
  v12 = a4[1];
  v13 = a3[1] + v12 * v8 + 4 * v9;
  v14 = a6[4];
  v15 = a6[5];
  v16 = a8[1];
  v17 = (_BYTE *)(a7[1] + v16 * v15 + 2 * v14);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (v11 >= a6[3])
    v11 = a6[3];
  if (v11)
  {
    v18 = 0;
    v19 = *a4;
    v20 = *a8;
    v21 = a8[2];
    v22 = a7[2] + v21 * v15 + v14;
    v23 = *a7 + *a8 * v15 + v14;
    v24 = *a3 + v19 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
        {
          *(_BYTE *)(v22 + i) = -1;
          *(_BYTE *)(v23 + i) = *(_BYTE *)(v24 + 2 * i + 1);
        }
      }
      v24 += v19;
      v23 += v20;
      v22 += v21;
      ++v18;
    }
    while (v18 != v11);
    v9 = a2[4];
    v8 = a2[5];
  }
  v26 = v8 & 1;
  if (v11 >= v26)
    v27 = v8 & 1;
  else
    v27 = 0;
  v28 = v9 & 1;
  if (v10 >= v28)
    v29 = v9 & 1;
  else
    v29 = 0;
  v30 = v10 - v29;
  if ((v8 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v33 = *(_BYTE *)(v13 + 3);
      v31 = v13 + 4;
      *v17 = *(_BYTE *)(v13 + 1);
      v17[1] = v33;
      v32 = v17 + 2;
    }
    else
    {
      v31 = v13;
      v32 = v17;
    }
    if (v10 == v29)
    {
      v34 = 0;
    }
    else
    {
      v35 = v10 - v29;
      do
      {
        v36 = *(_BYTE *)(v31 + 1);
        v37 = *(_BYTE *)(v31 + 3);
        v31 += 4;
        *v32 = v36;
        v32[1] = v37;
        v32 += 2;
        --v35;
      }
      while (v35);
      v34 = v10 - v29;
    }
    if (v34 + v28 < v10)
    {
      v38 = *(_BYTE *)(v31 + 1);
      v39 = *(_BYTE *)(v31 + 3);
      *v32 = v38;
      v32[1] = v39;
    }
    v13 += v12;
    v17 += v16;
  }
  if (v11 == v27)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v11 - v27;
    do
    {
      v42 = v13;
      v43 = v17;
      if ((v9 & 1) != 0)
      {
        v44 = *(_BYTE *)(v13 + 3);
        v42 = v13 + 4;
        *v17 = *(_BYTE *)(v13 + 1);
        v17[1] = v44;
        v43 = v17 + 2;
      }
      if (v10 == v29)
      {
        v45 = 0;
      }
      else
      {
        v46 = v10 - v29;
        do
        {
          v47 = *(_BYTE *)(v42 + 1);
          v48 = *(_BYTE *)(v42 + 3);
          v42 += 4;
          *v43 = v47;
          v43[1] = v48;
          v43 += 2;
          --v46;
        }
        while (v46);
        v45 = v10 - v29;
      }
      if (v45 + v28 < v10)
      {
        v49 = *(_BYTE *)(v42 + 1);
        v50 = *(_BYTE *)(v42 + 3);
        *v43 = v49;
        v43[1] = v50;
      }
      v13 += v12;
      v17 += v16;
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v26 < v11)
  {
    if ((v9 & 1) != 0)
    {
      v51 = *(_BYTE *)(v13 + 1);
      v52 = *(_BYTE *)(v13 + 3);
      v13 += 4;
      *v17 = v51;
      v17[1] = v52;
      v17 += 2;
    }
    if (v10 == v29)
    {
      v30 = 0;
    }
    else
    {
      v53 = v10 - v29;
      do
      {
        v54 = *(_BYTE *)(v13 + 1);
        v55 = *(_BYTE *)(v13 + 3);
        v13 += 4;
        *v17 = v54;
        v17[1] = v55;
        v17 += 2;
        --v53;
      }
      while (v53);
    }
    if (v30 + v28 < v10)
    {
      v56 = *(_BYTE *)(v13 + 1);
      v57 = *(_BYTE *)(v13 + 3);
      *v17 = v56;
      v17[1] = v57;
    }
  }
  return 0;
}

uint64_t vt_Copy_x444_444v(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  char v36;
  char v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  char v43;
  unint64_t v44;
  unint64_t v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  unint64_t v52;
  char v53;
  char v54;
  char v55;
  char v56;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a2[3];
  v12 = a4[1];
  v13 = a3[1] + v12 * v8 + 4 * v9;
  v14 = a6[4];
  v15 = a6[5];
  v16 = a8[1];
  v17 = (_BYTE *)(a7[1] + v16 * v15 + 2 * v14);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (v11 >= a6[3])
    v11 = a6[3];
  if (v11)
  {
    v18 = 0;
    v19 = *a4;
    v20 = *a8;
    v21 = *a7 + *a8 * v15 + v14;
    v22 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
          *(_BYTE *)(v21 + i) = *(_BYTE *)(v22 + 2 * i + 1);
      }
      v22 += v19;
      v21 += v20;
      ++v18;
    }
    while (v18 != v11);
    v9 = a2[4];
    v8 = a2[5];
  }
  v24 = v8 & 1;
  if (v11 >= v24)
    v25 = v8 & 1;
  else
    v25 = 0;
  v26 = v9;
  v27 = v9 & 1;
  if (v10 >= v27)
    v28 = v27;
  else
    v28 = 0;
  v29 = v10 - v28;
  if ((v8 & 1) != 0)
  {
    if ((v26 & 1) != 0)
    {
      v32 = *(_BYTE *)(v13 + 3);
      v30 = v13 + 4;
      *v17 = *(_BYTE *)(v13 + 1);
      v17[1] = v32;
      v31 = v17 + 2;
    }
    else
    {
      v30 = v13;
      v31 = v17;
    }
    if (v10 == v28)
    {
      v33 = 0;
    }
    else
    {
      v34 = v10 - v28;
      do
      {
        v35 = *(_BYTE *)(v30 + 1);
        v36 = *(_BYTE *)(v30 + 3);
        v30 += 4;
        *v31 = v35;
        v31[1] = v36;
        v31 += 2;
        --v34;
      }
      while (v34);
      v33 = v10 - v28;
    }
    if (v33 + v27 < v10)
    {
      v37 = *(_BYTE *)(v30 + 1);
      v38 = *(_BYTE *)(v30 + 3);
      *v31 = v37;
      v31[1] = v38;
    }
    v13 += v12;
    v17 += v16;
  }
  if (v11 == v25)
  {
    v39 = 0;
  }
  else
  {
    v40 = 0;
    v39 = v11 - v25;
    do
    {
      v41 = v13;
      v42 = v17;
      if ((v26 & 1) != 0)
      {
        v43 = *(_BYTE *)(v13 + 3);
        v41 = v13 + 4;
        *v17 = *(_BYTE *)(v13 + 1);
        v17[1] = v43;
        v42 = v17 + 2;
      }
      if (v10 == v28)
      {
        v44 = 0;
      }
      else
      {
        v45 = v10 - v28;
        do
        {
          v46 = *(_BYTE *)(v41 + 1);
          v47 = *(_BYTE *)(v41 + 3);
          v41 += 4;
          *v42 = v46;
          v42[1] = v47;
          v42 += 2;
          --v45;
        }
        while (v45);
        v44 = v10 - v28;
      }
      if (v44 + v27 < v10)
      {
        v48 = *(_BYTE *)(v41 + 1);
        v49 = *(_BYTE *)(v41 + 3);
        *v42 = v48;
        v42[1] = v49;
      }
      v13 += v12;
      v17 += v16;
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v24 < v11)
  {
    if ((v26 & 1) != 0)
    {
      v50 = *(_BYTE *)(v13 + 1);
      v51 = *(_BYTE *)(v13 + 3);
      v13 += 4;
      *v17 = v50;
      v17[1] = v51;
      v17 += 2;
    }
    if (v10 == v28)
    {
      v29 = 0;
    }
    else
    {
      v52 = v10 - v28;
      do
      {
        v53 = *(_BYTE *)(v13 + 1);
        v54 = *(_BYTE *)(v13 + 3);
        v13 += 4;
        *v17 = v53;
        v17[1] = v54;
        v17 += 2;
        --v52;
      }
      while (v52);
    }
    if (v29 + v27 < v10)
    {
      v55 = *(_BYTE *)(v13 + 1);
      v56 = *(_BYTE *)(v13 + 3);
      *v17 = v55;
      v17[1] = v56;
    }
  }
  return 0;
}

uint64_t vt_Copy_x444_444f(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unsigned __int16 *v31;
  _BYTE *v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  int v36;
  int v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  int v44;
  int v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  int v50;
  unint64_t v51;
  uint64_t v52;
  unsigned __int16 *v53;
  _BYTE *v54;
  unsigned int v55;
  int v56;
  unsigned int v57;
  int v58;
  int v59;
  int v60;
  unint64_t v61;
  unint64_t v62;
  unsigned int v63;
  int v64;
  unsigned int v65;
  int v66;
  int v67;
  unsigned int v68;
  int v69;
  unsigned int v70;
  int v71;
  int v72;
  int v73;
  unsigned int v74;
  int v75;
  unsigned int v76;
  unsigned int v77;
  int v78;
  unint64_t v79;
  unsigned int v80;
  int v81;
  unsigned int v82;
  int v83;
  int v84;
  unsigned int v85;
  int v86;
  unsigned int v87;
  unsigned int v88;
  int v89;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a4[1];
  v12 = (unsigned __int16 *)(a3[1] + v11 * v8 + 4 * v9);
  v13 = a6[4];
  v14 = a6[5];
  v15 = a6[3];
  v16 = a8[1];
  v17 = (_BYTE *)(a7[1] + v16 * v14 + 2 * v13);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (a2[3] < v15)
    v15 = a2[3];
  if (v15)
  {
    v18 = 0;
    v19 = *a4;
    v20 = *a8;
    v21 = *a3 + *a4 * v8 + 2 * v9;
    v22 = *a7 + *a8 * v14 + v13;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
        {
          v24 = *(unsigned __int16 *)(v21 + 2 * i) >> 6;
          if (v24 >= 0x3AC)
            v24 = 940;
          if (v24 <= 0x40)
            v24 = 64;
          *(_BYTE *)(v22 + i) = (255 * v24 - 16320) / 0x36C;
        }
      }
      v21 += v19;
      v22 += v20;
      ++v18;
    }
    while (v18 != v15);
    v9 = a2[4];
    v8 = a2[5];
  }
  v25 = v8 & 1;
  if (v15 >= v25)
    v26 = v8 & 1;
  else
    v26 = 0;
  v27 = v9;
  v28 = v9 & 1;
  if (v10 >= v28)
    v29 = v9 & 1;
  else
    v29 = 0;
  v30 = v10 - v29;
  if ((v8 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v33 = *v12;
      v34 = v33 >> 6;
      v35 = v12[1];
      if (v33 >> 6 >= 0x3C0)
        v34 = 960;
      if (v33 >= 0x1000)
        v36 = v34;
      else
        v36 = 64;
      if (v35 >> 6 >= 0x3C0)
        v37 = 960;
      else
        v37 = v35 >> 6;
      if (v35 >= 0x1000)
        v38 = v37;
      else
        v38 = 64;
      v31 = v12 + 2;
      *v17 = (613566757 * (unint64_t)((255 * v36 - 16320) >> 7)) >> 32;
      v17[1] = (613566757 * (unint64_t)((255 * v38 - 16320) >> 7)) >> 32;
      v32 = v17 + 2;
    }
    else
    {
      v31 = v12;
      v32 = v17;
    }
    if (v10 == v29)
    {
      v39 = 0;
    }
    else
    {
      v40 = v10 - v29;
      do
      {
        v41 = *v31;
        v42 = v41 >> 6;
        v43 = v31[1];
        if (v41 >> 6 >= 0x3C0)
          v42 = 960;
        if (v41 >= 0x1000)
          v44 = v42;
        else
          v44 = 64;
        if (v43 >> 6 >= 0x3C0)
          v45 = 960;
        else
          v45 = v43 >> 6;
        if (v43 < 0x1000)
          v45 = 64;
        v31 += 2;
        *v32 = (613566757 * (unint64_t)((255 * v44 - 16320) >> 7)) >> 32;
        v32[1] = (613566757 * (unint64_t)((255 * v45 - 16320) >> 7)) >> 32;
        v32 += 2;
        --v40;
      }
      while (v40);
      v39 = v10 - v29;
    }
    if (v39 + v28 < v10)
    {
      v46 = *v31;
      v47 = v46 >> 6;
      v48 = v31[1];
      v49 = v48 >> 6;
      if (v46 >> 6 >= 0x3C0)
        v47 = 960;
      if (v46 < 0x1000)
        v47 = 64;
      if (v49 >= 0x3C0)
        v49 = 960;
      if (v48 >= 0x1000)
        v50 = v49;
      else
        v50 = 64;
      *v32 = (613566757 * (unint64_t)((255 * v47 - 16320) >> 7)) >> 32;
      v32[1] = (613566757 * (unint64_t)((255 * v50 - 16320) >> 7)) >> 32;
    }
    v12 = (unsigned __int16 *)((char *)v12 + v11);
    v17 += v16;
  }
  if (v15 == v26)
  {
    v51 = 0;
  }
  else
  {
    v52 = 0;
    v51 = v15 - v26;
    do
    {
      v53 = v12;
      v54 = v17;
      if ((v27 & 1) != 0)
      {
        v55 = *v12;
        v56 = v55 >> 6;
        v57 = v12[1];
        if (v55 >> 6 >= 0x3C0)
          v56 = 960;
        if (v55 >= 0x1000)
          v58 = v56;
        else
          v58 = 64;
        if (v57 >> 6 >= 0x3C0)
          v59 = 960;
        else
          v59 = v57 >> 6;
        if (v57 >= 0x1000)
          v60 = v59;
        else
          v60 = 64;
        v53 = v12 + 2;
        *v17 = (613566757 * (unint64_t)((255 * v58 - 16320) >> 7)) >> 32;
        v17[1] = (613566757 * (unint64_t)((255 * v60 - 16320) >> 7)) >> 32;
        v54 = v17 + 2;
      }
      if (v10 == v29)
      {
        v61 = 0;
      }
      else
      {
        v62 = v10 - v29;
        do
        {
          v63 = *v53;
          v64 = v63 >> 6;
          v65 = v53[1];
          if (v63 >> 6 >= 0x3C0)
            v64 = 960;
          if (v63 >= 0x1000)
            v66 = v64;
          else
            v66 = 64;
          if (v65 >> 6 >= 0x3C0)
            v67 = 960;
          else
            v67 = v65 >> 6;
          if (v65 < 0x1000)
            v67 = 64;
          v53 += 2;
          *v54 = (613566757 * (unint64_t)((255 * v66 - 16320) >> 7)) >> 32;
          v54[1] = (613566757 * (unint64_t)((255 * v67 - 16320) >> 7)) >> 32;
          v54 += 2;
          --v62;
        }
        while (v62);
        v61 = v10 - v29;
      }
      if (v61 + v28 < v10)
      {
        v68 = *v53;
        v69 = v68 >> 6;
        v70 = v53[1];
        if (v68 >> 6 >= 0x3C0)
          v69 = 960;
        if (v68 >= 0x1000)
          v71 = v69;
        else
          v71 = 64;
        if (v70 >> 6 >= 0x3C0)
          v72 = 960;
        else
          v72 = v70 >> 6;
        if (v70 >= 0x1000)
          v73 = v72;
        else
          v73 = 64;
        *v54 = (613566757 * (unint64_t)((255 * v71 - 16320) >> 7)) >> 32;
        v54[1] = (613566757 * (unint64_t)((255 * v73 - 16320) >> 7)) >> 32;
      }
      v12 = (unsigned __int16 *)((char *)v12 + v11);
      v17 += v16;
      ++v52;
    }
    while (v52 != v51);
  }
  if (v51 + v25 < v15)
  {
    if ((v27 & 1) != 0)
    {
      v74 = *v12;
      v75 = v74 >> 6;
      v76 = v12[1];
      v77 = v76 >> 6;
      if (v74 >> 6 >= 0x3C0)
        v75 = 960;
      if (v74 < 0x1000)
        v75 = 64;
      if (v77 >= 0x3C0)
        v77 = 960;
      if (v76 >= 0x1000)
        v78 = v77;
      else
        v78 = 64;
      v12 += 2;
      *v17 = (613566757 * (unint64_t)((255 * v75 - 16320) >> 7)) >> 32;
      v17[1] = (613566757 * (unint64_t)((255 * v78 - 16320) >> 7)) >> 32;
      v17 += 2;
    }
    if (v10 == v29)
    {
      v30 = 0;
    }
    else
    {
      v79 = v10 - v29;
      do
      {
        v80 = *v12;
        v81 = v80 >> 6;
        v82 = v12[1];
        if (v80 >> 6 >= 0x3C0)
          v81 = 960;
        if (v80 >= 0x1000)
          v83 = v81;
        else
          v83 = 64;
        if (v82 >> 6 >= 0x3C0)
          v84 = 960;
        else
          v84 = v82 >> 6;
        if (v82 < 0x1000)
          v84 = 64;
        v12 += 2;
        *v17 = (613566757 * (unint64_t)((255 * v83 - 16320) >> 7)) >> 32;
        v17[1] = (613566757 * (unint64_t)((255 * v84 - 16320) >> 7)) >> 32;
        v17 += 2;
        --v79;
      }
      while (v79);
    }
    if (v30 + v28 < v10)
    {
      v85 = *v12;
      v86 = v85 >> 6;
      v87 = v12[1];
      v88 = v87 >> 6;
      if (v85 >> 6 >= 0x3C0)
        v86 = 960;
      if (v85 < 0x1000)
        v86 = 64;
      if (v88 >= 0x3C0)
        v88 = 960;
      if (v87 >= 0x1000)
        v89 = v88;
      else
        v89 = 64;
      *v17 = (613566757 * (unint64_t)((255 * v86 - 16320) >> 7)) >> 32;
      v17[1] = (613566757 * (unint64_t)((255 * v89 - 16320) >> 7)) >> 32;
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_x444_v2a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  unsigned __int8 *v35;
  _BYTE *v36;
  unsigned int v37;
  unint64_t v38;
  _BYTE *v39;
  unsigned int v40;
  unint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  _BYTE *v44;
  unsigned int v45;
  unint64_t v46;
  _BYTE *v47;
  unsigned int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  unint64_t v53;
  _BYTE *v54;
  unsigned int v55;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = v10 + v9;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = a8[1];
  v20 = (_BYTE *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v22 = v17 - v16;
  if (v21 >= v22)
    v21 = v22;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = a8[2];
    v27 = a7[2] + v26 * v18 + v16;
    v28 = *a7 + *a8 * v18 + v16;
    v29 = *a3 + v24 * v12 + 2 * v11;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
        {
          *(_BYTE *)(v27 + i) = -1;
          *(_BYTE *)(v28 + i) = *(_BYTE *)(v29 + 2 * i + 1);
        }
      }
      v29 += v24;
      v28 += v25;
      v27 += v26;
      ++v23;
    }
    while (v23 != v8);
    v9 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40);
    v10 = v9 & 1;
  }
  v31 = v12 & 1;
  if (v8 >= v31)
    v32 = v12 & 1;
  else
    v32 = 0;
  v33 = v9;
  if (v21 < v10)
    v10 = 0;
  v34 = v21 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v35 = v14 + 8;
      v37 = (v14[3] + v14[7] + 1) >> 1;
      *v20 = (v14[1] + v14[5] + 1) >> 1;
      v20[1] = v37;
      v36 = v20 + 2;
    }
    else
    {
      v35 = v14;
      v36 = v20;
    }
    if (v21 != v10)
    {
      v38 = 0;
      do
      {
        v39 = &v36[v38];
        v40 = (v35[3] + v35[7] + 1) >> 1;
        *v39 = (v35[1] + v35[5] + 1) >> 1;
        v39[1] = v40;
        v38 += 2;
        v35 += 8;
      }
      while (v38 < v34);
    }
    v14 += v13;
    v20 += v19;
  }
  if (v8 == v32)
  {
    v41 = 0;
  }
  else
  {
    v42 = 0;
    v41 = v8 - v32;
    do
    {
      v43 = v14;
      v44 = v20;
      if ((v33 & 1) != 0)
      {
        v43 = v14 + 8;
        v45 = (v14[3] + v14[7] + 1) >> 1;
        *v20 = (v14[1] + v14[5] + 1) >> 1;
        v20[1] = v45;
        v44 = v20 + 2;
      }
      if (v21 != v10)
      {
        v46 = 0;
        do
        {
          v47 = &v44[v46];
          v48 = (v43[3] + v43[7] + 1) >> 1;
          *v47 = (v43[1] + v43[5] + 1) >> 1;
          v47[1] = v48;
          v46 += 2;
          v43 += 8;
        }
        while (v46 < v34);
      }
      v14 += v13;
      v20 += v19;
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v31 < v8)
  {
    if ((v33 & 1) != 0)
    {
      v49 = v14[1];
      v50 = v14[3];
      v51 = v14[5];
      v52 = v14[7];
      v14 += 8;
      *v20 = (v49 + v51 + 1) >> 1;
      v20[1] = (v50 + v52 + 1) >> 1;
      v20 += 2;
    }
    if (v21 != v10)
    {
      v53 = 0;
      do
      {
        v54 = &v20[v53];
        v55 = (v14[3] + v14[7] + 1) >> 1;
        *v54 = (v14[1] + v14[5] + 1) >> 1;
        v54[1] = v55;
        v53 += 2;
        v14 += 8;
      }
      while (v53 < v34);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_x444_v2a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  char v37;
  unint64_t v38;
  _BYTE *v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  char v45;
  unint64_t v46;
  _BYTE *v47;
  char v48;
  char v49;
  char v50;
  unint64_t v51;
  _BYTE *v52;
  char v53;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = v10 + v9;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = a3[1] + v13 * v12 + 4 * (v10 + v9);
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = a8[1];
  v20 = (_BYTE *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v22 = v17 - v16;
  if (v21 >= v22)
    v21 = v22;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = a8[2];
    v27 = a7[2] + v26 * v18 + v16;
    v28 = *a7 + *a8 * v18 + v16;
    v29 = *a3 + v24 * v12 + 2 * v11;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
        {
          *(_BYTE *)(v27 + i) = -1;
          *(_BYTE *)(v28 + i) = *(_BYTE *)(v29 + 2 * i + 1);
        }
      }
      v29 += v24;
      v28 += v25;
      v27 += v26;
      ++v23;
    }
    while (v23 != v8);
    v9 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40);
    v10 = v9 & 1;
  }
  v31 = v12 & 1;
  if (v8 >= v31)
    v32 = v12 & 1;
  else
    v32 = 0;
  v33 = v9;
  if (v21 < v10)
    v10 = 0;
  v34 = v21 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v37 = *(_BYTE *)(v14 + 3);
      v35 = v14 + 8;
      *v20 = *(_BYTE *)(v14 + 1);
      v20[1] = v37;
      v36 = v20 + 2;
    }
    else
    {
      v35 = v14;
      v36 = v20;
    }
    if (v21 != v10)
    {
      v38 = 0;
      do
      {
        v39 = &v36[v38];
        v40 = *(_BYTE *)(v35 + 3);
        *v39 = *(_BYTE *)(v35 + 1);
        v39[1] = v40;
        v38 += 2;
        v35 += 8;
      }
      while (v38 < v34);
    }
    v14 += v13;
    v20 += v19;
  }
  if (v8 == v32)
  {
    v41 = 0;
  }
  else
  {
    v42 = 0;
    v41 = v8 - v32;
    do
    {
      v43 = v14;
      v44 = v20;
      if ((v33 & 1) != 0)
      {
        v45 = *(_BYTE *)(v14 + 3);
        v43 = v14 + 8;
        *v20 = *(_BYTE *)(v14 + 1);
        v20[1] = v45;
        v44 = v20 + 2;
      }
      if (v21 != v10)
      {
        v46 = 0;
        do
        {
          v47 = &v44[v46];
          v48 = *(_BYTE *)(v43 + 3);
          *v47 = *(_BYTE *)(v43 + 1);
          v47[1] = v48;
          v46 += 2;
          v43 += 8;
        }
        while (v46 < v34);
      }
      v14 += v13;
      v20 += v19;
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v31 < v8)
  {
    if ((v33 & 1) != 0)
    {
      v49 = *(_BYTE *)(v14 + 1);
      v50 = *(_BYTE *)(v14 + 3);
      v14 += 8;
      *v20 = v49;
      v20[1] = v50;
      v20 += 2;
    }
    if (v21 != v10)
    {
      v51 = 0;
      do
      {
        v52 = &v20[v51];
        v53 = *(_BYTE *)(v14 + 3);
        *v52 = *(_BYTE *)(v14 + 1);
        v52[1] = v53;
        v51 += 2;
        v14 += 8;
      }
      while (v51 < v34);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_x444_422v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  unsigned __int8 *v33;
  _BYTE *v34;
  unsigned int v35;
  unint64_t v36;
  _BYTE *v37;
  unsigned int v38;
  unint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  _BYTE *v42;
  unsigned int v43;
  unint64_t v44;
  _BYTE *v45;
  unsigned int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  unint64_t v51;
  _BYTE *v52;
  unsigned int v53;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = v10 + v9;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = a8[1];
  v20 = (_BYTE *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v22 = v17 - v16;
  if (v21 >= v22)
    v21 = v22;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = *a7 + *a8 * v18 + v16;
    v27 = *a3 + *a4 * v12 + 2 * v11;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
          *(_BYTE *)(v26 + i) = *(_BYTE *)(v27 + 2 * i + 1);
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v8);
    v9 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40);
    v10 = v9 & 1;
  }
  v29 = v12 & 1;
  if (v8 >= v29)
    v30 = v12 & 1;
  else
    v30 = 0;
  v31 = v9;
  if (v21 < v10)
    v10 = 0;
  v32 = v21 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v31 & 1) != 0)
    {
      v33 = v14 + 8;
      v35 = (v14[3] + v14[7] + 1) >> 1;
      *v20 = (v14[1] + v14[5] + 1) >> 1;
      v20[1] = v35;
      v34 = v20 + 2;
    }
    else
    {
      v33 = v14;
      v34 = v20;
    }
    if (v21 != v10)
    {
      v36 = 0;
      do
      {
        v37 = &v34[v36];
        v38 = (v33[3] + v33[7] + 1) >> 1;
        *v37 = (v33[1] + v33[5] + 1) >> 1;
        v37[1] = v38;
        v36 += 2;
        v33 += 8;
      }
      while (v36 < v32);
    }
    v14 += v13;
    v20 += v19;
  }
  if (v8 == v30)
  {
    v39 = 0;
  }
  else
  {
    v40 = 0;
    v39 = v8 - v30;
    do
    {
      v41 = v14;
      v42 = v20;
      if ((v31 & 1) != 0)
      {
        v41 = v14 + 8;
        v43 = (v14[3] + v14[7] + 1) >> 1;
        *v20 = (v14[1] + v14[5] + 1) >> 1;
        v20[1] = v43;
        v42 = v20 + 2;
      }
      if (v21 != v10)
      {
        v44 = 0;
        do
        {
          v45 = &v42[v44];
          v46 = (v41[3] + v41[7] + 1) >> 1;
          *v45 = (v41[1] + v41[5] + 1) >> 1;
          v45[1] = v46;
          v44 += 2;
          v41 += 8;
        }
        while (v44 < v32);
      }
      v14 += v13;
      v20 += v19;
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v29 < v8)
  {
    if ((v31 & 1) != 0)
    {
      v47 = v14[1];
      v48 = v14[3];
      v49 = v14[5];
      v50 = v14[7];
      v14 += 8;
      *v20 = (v47 + v49 + 1) >> 1;
      v20[1] = (v48 + v50 + 1) >> 1;
      v20 += 2;
    }
    if (v21 != v10)
    {
      v51 = 0;
      do
      {
        v52 = &v20[v51];
        v53 = (v14[3] + v14[7] + 1) >> 1;
        *v52 = (v14[1] + v14[5] + 1) >> 1;
        v52[1] = v53;
        v51 += 2;
        v14 += 8;
      }
      while (v51 < v32);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_x444_422v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  char v35;
  unint64_t v36;
  _BYTE *v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  char v43;
  unint64_t v44;
  _BYTE *v45;
  char v46;
  char v47;
  char v48;
  unint64_t v49;
  _BYTE *v50;
  char v51;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = v10 + v9;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = a3[1] + v13 * v12 + 4 * (v10 + v9);
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = a8[1];
  v20 = (_BYTE *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v22 = v17 - v16;
  if (v21 >= v22)
    v21 = v22;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = *a7 + *a8 * v18 + v16;
    v27 = *a3 + *a4 * v12 + 2 * v11;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
          *(_BYTE *)(v26 + i) = *(_BYTE *)(v27 + 2 * i + 1);
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v8);
    v9 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40);
    v10 = v9 & 1;
  }
  v29 = v12 & 1;
  if (v8 >= v29)
    v30 = v12 & 1;
  else
    v30 = 0;
  v31 = v9;
  if (v21 < v10)
    v10 = 0;
  v32 = v21 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v31 & 1) != 0)
    {
      v35 = *(_BYTE *)(v14 + 3);
      v33 = v14 + 8;
      *v20 = *(_BYTE *)(v14 + 1);
      v20[1] = v35;
      v34 = v20 + 2;
    }
    else
    {
      v33 = v14;
      v34 = v20;
    }
    if (v21 != v10)
    {
      v36 = 0;
      do
      {
        v37 = &v34[v36];
        v38 = *(_BYTE *)(v33 + 3);
        *v37 = *(_BYTE *)(v33 + 1);
        v37[1] = v38;
        v36 += 2;
        v33 += 8;
      }
      while (v36 < v32);
    }
    v14 += v13;
    v20 += v19;
  }
  if (v8 == v30)
  {
    v39 = 0;
  }
  else
  {
    v40 = 0;
    v39 = v8 - v30;
    do
    {
      v41 = v14;
      v42 = v20;
      if ((v31 & 1) != 0)
      {
        v43 = *(_BYTE *)(v14 + 3);
        v41 = v14 + 8;
        *v20 = *(_BYTE *)(v14 + 1);
        v20[1] = v43;
        v42 = v20 + 2;
      }
      if (v21 != v10)
      {
        v44 = 0;
        do
        {
          v45 = &v42[v44];
          v46 = *(_BYTE *)(v41 + 3);
          *v45 = *(_BYTE *)(v41 + 1);
          v45[1] = v46;
          v44 += 2;
          v41 += 8;
        }
        while (v44 < v32);
      }
      v14 += v13;
      v20 += v19;
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v29 < v8)
  {
    if ((v31 & 1) != 0)
    {
      v47 = *(_BYTE *)(v14 + 1);
      v48 = *(_BYTE *)(v14 + 3);
      v14 += 8;
      *v20 = v47;
      v20[1] = v48;
      v20 += 2;
    }
    if (v21 != v10)
    {
      v49 = 0;
      do
      {
        v50 = &v20[v49];
        v51 = *(_BYTE *)(v14 + 3);
        *v50 = *(_BYTE *)(v14 + 1);
        v50[1] = v51;
        v49 += 2;
        v14 += 8;
      }
      while (v49 < v32);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_x444_422f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unsigned __int16 *v34;
  _BYTE *v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  int v44;
  int v45;
  unint64_t v46;
  _BYTE *v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  int v51;
  int v52;
  unsigned int v53;
  int v54;
  unsigned int v55;
  int v56;
  int v57;
  unint64_t v58;
  uint64_t v59;
  unsigned __int16 *v60;
  _BYTE *v61;
  unsigned int v62;
  int v63;
  unsigned int v64;
  int v65;
  int v66;
  unsigned int v67;
  int v68;
  unsigned int v69;
  int v70;
  int v71;
  unint64_t v72;
  _BYTE *v73;
  unsigned int v74;
  int v75;
  unsigned int v76;
  int v77;
  int v78;
  unsigned int v79;
  int v80;
  unsigned int v81;
  int v82;
  int v83;
  unsigned int v84;
  int v85;
  unsigned int v86;
  unsigned int v87;
  int v88;
  unsigned int v89;
  int v90;
  unsigned int v91;
  int v92;
  int v93;
  int v94;
  unint64_t v95;
  _BYTE *v96;
  unsigned int v97;
  int v98;
  unsigned int v99;
  int v100;
  int v101;
  unsigned int v102;
  int v103;
  unsigned int v104;
  int v105;
  int v106;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = a8[1];
  v20 = (_BYTE *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  v22 = v17 - v16;
  if (v21 >= v22)
    v21 = v22;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = *a3 + *a4 * v12 + 2 * v11;
    v27 = *a7 + *a8 * v18 + v16;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
        {
          v29 = *(unsigned __int16 *)(v26 + 2 * i) >> 6;
          if (v29 >= 0x3AC)
            v29 = 940;
          if (v29 <= 0x40)
            v29 = 64;
          *(_BYTE *)(v27 + i) = (255 * v29 - 16320) / 0x36C;
        }
      }
      v26 += v24;
      v27 += v25;
      ++v23;
    }
    while (v23 != v9);
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40);
    v10 = v8 & 1;
  }
  v30 = v12 & 1;
  if (v9 >= v30)
    v31 = v12 & 1;
  else
    v31 = 0;
  v32 = v8;
  if (v21 < v10)
    v10 = 0;
  v33 = v21 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v36 = *v14;
      v37 = v36 >> 6;
      v38 = v14[1];
      v39 = v38 >> 6;
      if (v36 >> 6 >= 0x3C0)
        v37 = 960;
      if (v36 < 0x1000)
        v37 = 64;
      if (v39 >= 0x3C0)
        v39 = 960;
      if (v38 >= 0x1000)
        v40 = v39;
      else
        v40 = 64;
      v41 = v14[2];
      v42 = v41 >> 6;
      v43 = v14[3];
      if (v41 >> 6 >= 0x3C0)
        v42 = 960;
      if (v41 >= 0x1000)
        v44 = v42;
      else
        v44 = 64;
      if (v43 >> 6 >= 0x3C0)
        v45 = 960;
      else
        v45 = v43 >> 6;
      if (v43 < 0x1000)
        v45 = 64;
      v34 = v14 + 4;
      *v20 = (((613566757 * (unint64_t)((255 * v37 - 16320) >> 7)) >> 32)
                          + ((613566757 * (unint64_t)((255 * v44 - 16320) >> 7)) >> 32)
                          + 1) >> 1;
      v20[1] = (((613566757 * (unint64_t)((255 * v40 - 16320) >> 7)) >> 32)
                            + ((613566757 * (unint64_t)((255 * v45 - 16320) >> 7)) >> 32)
                            + 1) >> 1;
      v35 = v20 + 2;
    }
    else
    {
      v34 = v14;
      v35 = v20;
    }
    if (v21 != v10)
    {
      v46 = 0;
      do
      {
        v47 = &v35[v46];
        v48 = *v34;
        v49 = v48 >> 6;
        v50 = v34[1];
        if (v48 >> 6 >= 0x3C0)
          v49 = 960;
        if (v48 >= 0x1000)
          v51 = v49;
        else
          v51 = 64;
        if (v50 >> 6 >= 0x3C0)
          v52 = 960;
        else
          v52 = v50 >> 6;
        if (v50 < 0x1000)
          v52 = 64;
        v53 = v34[2];
        v54 = v53 >> 6;
        v55 = v34[3];
        if (v53 >> 6 >= 0x3C0)
          v54 = 960;
        if (v53 >= 0x1000)
          v56 = v54;
        else
          v56 = 64;
        if (v55 >> 6 >= 0x3C0)
          v57 = 960;
        else
          v57 = v55 >> 6;
        if (v55 < 0x1000)
          v57 = 64;
        *v47 = (((613566757 * (unint64_t)((255 * v51 - 16320) >> 7)) >> 32)
                            + ((613566757 * (unint64_t)((255 * v56 - 16320) >> 7)) >> 32)
                            + 1) >> 1;
        v47[1] = (((613566757 * (unint64_t)((255 * v52 - 16320) >> 7)) >> 32)
                              + ((613566757 * (unint64_t)((255 * v57 - 16320) >> 7)) >> 32)
                              + 1) >> 1;
        v46 += 2;
        v34 += 4;
      }
      while (v46 < v33);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v20 += v19;
  }
  if (v9 == v31)
  {
    v58 = 0;
  }
  else
  {
    v59 = 0;
    v58 = v9 - v31;
    do
    {
      v60 = v14;
      v61 = v20;
      if ((v32 & 1) != 0)
      {
        v62 = *v14;
        v63 = v62 >> 6;
        v64 = v14[1];
        if (v62 >> 6 >= 0x3C0)
          v63 = 960;
        if (v62 < 0x1000)
          v63 = 64;
        if (v64 >> 6 >= 0x3C0)
          v65 = 960;
        else
          v65 = v64 >> 6;
        if (v64 >= 0x1000)
          v66 = v65;
        else
          v66 = 64;
        v67 = v14[2];
        v68 = v67 >> 6;
        v69 = v14[3];
        if (v67 >> 6 >= 0x3C0)
          v68 = 960;
        if (v67 < 0x1000)
          v68 = 64;
        if (v69 >> 6 >= 0x3C0)
          v70 = 960;
        else
          v70 = v69 >> 6;
        if (v69 >= 0x1000)
          v71 = v70;
        else
          v71 = 64;
        v60 = v14 + 4;
        *v20 = (((613566757 * (unint64_t)((255 * v63 - 16320) >> 7)) >> 32)
                            + ((613566757 * (unint64_t)((255 * v68 - 16320) >> 7)) >> 32)
                            + 1) >> 1;
        v20[1] = (((613566757 * (unint64_t)((255 * v66 - 16320) >> 7)) >> 32)
                              + ((613566757 * (unint64_t)((255 * v71 - 16320) >> 7)) >> 32)
                              + 1) >> 1;
        v61 = v20 + 2;
      }
      if (v21 != v10)
      {
        v72 = 0;
        do
        {
          v73 = &v61[v72];
          v74 = *v60;
          v75 = v74 >> 6;
          v76 = v60[1];
          if (v74 >> 6 >= 0x3C0)
            v75 = 960;
          if (v74 >= 0x1000)
            v77 = v75;
          else
            v77 = 64;
          if (v76 >> 6 >= 0x3C0)
            v78 = 960;
          else
            v78 = v76 >> 6;
          if (v76 < 0x1000)
            v78 = 64;
          v79 = v60[2];
          v80 = v79 >> 6;
          v81 = v60[3];
          if (v79 >> 6 >= 0x3C0)
            v80 = 960;
          if (v79 >= 0x1000)
            v82 = v80;
          else
            v82 = 64;
          if (v81 >> 6 >= 0x3C0)
            v83 = 960;
          else
            v83 = v81 >> 6;
          if (v81 < 0x1000)
            v83 = 64;
          *v73 = (((613566757 * (unint64_t)((255 * v77 - 16320) >> 7)) >> 32)
                              + ((613566757 * (unint64_t)((255 * v82 - 16320) >> 7)) >> 32)
                              + 1) >> 1;
          v73[1] = (((613566757 * (unint64_t)((255 * v78 - 16320) >> 7)) >> 32)
                                + ((613566757 * (unint64_t)((255 * v83 - 16320) >> 7)) >> 32)
                                + 1) >> 1;
          v72 += 2;
          v60 += 4;
        }
        while (v72 < v33);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
      ++v59;
    }
    while (v59 != v58);
  }
  if (v58 + v30 < v9)
  {
    if ((v32 & 1) != 0)
    {
      v84 = *v14;
      v85 = v84 >> 6;
      v86 = v14[1];
      v87 = v86 >> 6;
      if (v84 >> 6 >= 0x3C0)
        v85 = 960;
      if (v84 < 0x1000)
        v85 = 64;
      if (v87 >= 0x3C0)
        v87 = 960;
      if (v86 >= 0x1000)
        v88 = v87;
      else
        v88 = 64;
      v89 = v14[2];
      v90 = v89 >> 6;
      v91 = v14[3];
      if (v89 >> 6 >= 0x3C0)
        v90 = 960;
      if (v89 >= 0x1000)
        v92 = v90;
      else
        v92 = 64;
      if (v91 >> 6 >= 0x3C0)
        v93 = 960;
      else
        v93 = v91 >> 6;
      if (v91 >= 0x1000)
        v94 = v93;
      else
        v94 = 64;
      v14 += 4;
      *v20 = (((613566757 * (unint64_t)((255 * v85 - 16320) >> 7)) >> 32)
                          + ((613566757 * (unint64_t)((255 * v92 - 16320) >> 7)) >> 32)
                          + 1) >> 1;
      v20[1] = (((613566757 * (unint64_t)((255 * v88 - 16320) >> 7)) >> 32)
                            + ((613566757 * (unint64_t)((255 * v94 - 16320) >> 7)) >> 32)
                            + 1) >> 1;
      v20 += 2;
    }
    if (v21 != v10)
    {
      v95 = 0;
      do
      {
        v96 = &v20[v95];
        v97 = *v14;
        v98 = v97 >> 6;
        v99 = v14[1];
        if (v97 >> 6 >= 0x3C0)
          v98 = 960;
        if (v97 >= 0x1000)
          v100 = v98;
        else
          v100 = 64;
        if (v99 >> 6 >= 0x3C0)
          v101 = 960;
        else
          v101 = v99 >> 6;
        if (v99 < 0x1000)
          v101 = 64;
        v102 = v14[2];
        v103 = v102 >> 6;
        v104 = v14[3];
        if (v102 >> 6 >= 0x3C0)
          v103 = 960;
        if (v102 >= 0x1000)
          v105 = v103;
        else
          v105 = 64;
        if (v104 >> 6 >= 0x3C0)
          v106 = 960;
        else
          v106 = v104 >> 6;
        if (v104 < 0x1000)
          v106 = 64;
        *v96 = (((613566757 * (unint64_t)((255 * v100 - 16320) >> 7)) >> 32)
                            + ((613566757 * (unint64_t)((255 * v105 - 16320) >> 7)) >> 32)
                            + 1) >> 1;
        v96[1] = (((613566757 * (unint64_t)((255 * v101 - 16320) >> 7)) >> 32)
                              + ((613566757 * (unint64_t)((255 * v106 - 16320) >> 7)) >> 32)
                              + 1) >> 1;
        v95 += 2;
        v14 += 4;
      }
      while (v95 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_x444_422f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unsigned __int16 *v34;
  _BYTE *v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  unint64_t v41;
  _BYTE *v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  int v46;
  int v47;
  unint64_t v48;
  uint64_t v49;
  unsigned __int16 *v50;
  _BYTE *v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  int v55;
  int v56;
  unint64_t v57;
  _BYTE *v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  int v62;
  int v63;
  unsigned int v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  int v68;
  unint64_t v69;
  _BYTE *v70;
  unsigned int v71;
  int v72;
  unsigned int v73;
  int v74;
  int v75;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = a8[1];
  v20 = (_BYTE *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  v22 = v17 - v16;
  if (v21 >= v22)
    v21 = v22;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = *a3 + *a4 * v12 + 2 * v11;
    v27 = *a7 + *a8 * v18 + v16;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
        {
          v29 = *(unsigned __int16 *)(v26 + 2 * i) >> 6;
          if (v29 >= 0x3AC)
            v29 = 940;
          if (v29 <= 0x40)
            v29 = 64;
          *(_BYTE *)(v27 + i) = (255 * v29 - 16320) / 0x36C;
        }
      }
      v26 += v24;
      v27 += v25;
      ++v23;
    }
    while (v23 != v9);
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40);
    v10 = v8 & 1;
  }
  v30 = v12 & 1;
  if (v9 >= v30)
    v31 = v12 & 1;
  else
    v31 = 0;
  v32 = v8;
  if (v21 < v10)
    v10 = 0;
  v33 = v21 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v36 = *v14;
      v37 = v36 >> 6;
      v38 = v14[1];
      v39 = v38 >> 6;
      if (v36 >> 6 >= 0x3C0)
        v37 = 960;
      if (v36 < 0x1000)
        v37 = 64;
      if (v39 >= 0x3C0)
        v39 = 960;
      if (v38 >= 0x1000)
        v40 = v39;
      else
        v40 = 64;
      v34 = v14 + 4;
      *v20 = (613566757 * (unint64_t)((255 * v37 - 16320) >> 7)) >> 32;
      v20[1] = (613566757 * (unint64_t)((255 * v40 - 16320) >> 7)) >> 32;
      v35 = v20 + 2;
    }
    else
    {
      v34 = v14;
      v35 = v20;
    }
    if (v21 != v10)
    {
      v41 = 0;
      do
      {
        v42 = &v35[v41];
        v43 = *v34;
        v44 = v43 >> 6;
        v45 = v34[1];
        if (v43 >> 6 >= 0x3C0)
          v44 = 960;
        if (v43 >= 0x1000)
          v46 = v44;
        else
          v46 = 64;
        if (v45 >> 6 >= 0x3C0)
          v47 = 960;
        else
          v47 = v45 >> 6;
        if (v45 < 0x1000)
          v47 = 64;
        *v42 = (613566757 * (unint64_t)((255 * v46 - 16320) >> 7)) >> 32;
        v42[1] = (613566757 * (unint64_t)((255 * v47 - 16320) >> 7)) >> 32;
        v41 += 2;
        v34 += 4;
      }
      while (v41 < v33);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v20 += v19;
  }
  if (v9 == v31)
  {
    v48 = 0;
  }
  else
  {
    v49 = 0;
    v48 = v9 - v31;
    do
    {
      v50 = v14;
      v51 = v20;
      if ((v32 & 1) != 0)
      {
        v52 = *v14;
        v53 = v52 >> 6;
        v54 = v14[1];
        if (v52 >> 6 >= 0x3C0)
          v53 = 960;
        if (v52 < 0x1000)
          v53 = 64;
        if (v54 >> 6 >= 0x3C0)
          v55 = 960;
        else
          v55 = v54 >> 6;
        if (v54 >= 0x1000)
          v56 = v55;
        else
          v56 = 64;
        v50 = v14 + 4;
        *v20 = (613566757 * (unint64_t)((255 * v53 - 16320) >> 7)) >> 32;
        v20[1] = (613566757 * (unint64_t)((255 * v56 - 16320) >> 7)) >> 32;
        v51 = v20 + 2;
      }
      if (v21 != v10)
      {
        v57 = 0;
        do
        {
          v58 = &v51[v57];
          v59 = *v50;
          v60 = v59 >> 6;
          v61 = v50[1];
          if (v59 >> 6 >= 0x3C0)
            v60 = 960;
          if (v59 >= 0x1000)
            v62 = v60;
          else
            v62 = 64;
          if (v61 >> 6 >= 0x3C0)
            v63 = 960;
          else
            v63 = v61 >> 6;
          if (v61 < 0x1000)
            v63 = 64;
          *v58 = (613566757 * (unint64_t)((255 * v62 - 16320) >> 7)) >> 32;
          v58[1] = (613566757 * (unint64_t)((255 * v63 - 16320) >> 7)) >> 32;
          v57 += 2;
          v50 += 4;
        }
        while (v57 < v33);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
      ++v49;
    }
    while (v49 != v48);
  }
  if (v48 + v30 < v9)
  {
    if ((v32 & 1) != 0)
    {
      v64 = *v14;
      v65 = v64 >> 6;
      v66 = v14[1];
      v67 = v66 >> 6;
      if (v64 >> 6 >= 0x3C0)
        v65 = 960;
      if (v64 < 0x1000)
        v65 = 64;
      if (v67 >= 0x3C0)
        v67 = 960;
      if (v66 >= 0x1000)
        v68 = v67;
      else
        v68 = 64;
      v14 += 4;
      *v20 = (613566757 * (unint64_t)((255 * v65 - 16320) >> 7)) >> 32;
      v20[1] = (613566757 * (unint64_t)((255 * v68 - 16320) >> 7)) >> 32;
      v20 += 2;
    }
    if (v21 != v10)
    {
      v69 = 0;
      do
      {
        v70 = &v20[v69];
        v71 = *v14;
        v72 = v71 >> 6;
        v73 = v14[1];
        if (v71 >> 6 >= 0x3C0)
          v72 = 960;
        if (v71 >= 0x1000)
          v74 = v72;
        else
          v74 = 64;
        if (v73 >> 6 >= 0x3C0)
          v75 = 960;
        else
          v75 = v73 >> 6;
        if (v73 < 0x1000)
          v75 = 64;
        *v70 = (613566757 * (unint64_t)((255 * v74 - 16320) >> 7)) >> 32;
        v70[1] = (613566757 * (unint64_t)((255 * v75 - 16320) >> 7)) >> 32;
        v69 += 2;
        v14 += 4;
      }
      while (v69 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_x444_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  unint64_t v35;
  unint64_t v36;
  unsigned __int8 *v37;
  _BYTE *v38;
  unsigned int v39;
  unint64_t v40;
  unsigned __int8 *v41;
  _BYTE *v42;
  unsigned int v43;
  unint64_t v44;
  unint64_t v45;
  unsigned __int8 *v46;
  _BYTE *v47;
  unsigned int v48;
  unint64_t v49;
  unsigned __int8 *v50;
  _BYTE *v51;
  unsigned int v52;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = v10 + v9;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * (v12 + v8) + 4 * (v10 + v9));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = a8[1];
  v21 = (_BYTE *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v22 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  v24 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE) - v13;
  if (v24 >= v19 - v18)
    v24 = v19 - v18;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a3 + *a4 * v13 + 2 * v11;
    v28 = *a8;
    v29 = a8[2];
    if (v13 >= v8)
      v30 = 0;
    else
      v30 = *a4;
    v31 = v27 + v30;
    v32 = a7[2] + v29 * v18 + v16;
    v33 = *a7 + v28 * v18 + v16;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          *(_BYTE *)(v32 + i) = -1;
          *(_BYTE *)(v33 + i) = *(_BYTE *)(v31 + 2 * i + 1);
        }
      }
      v31 += v26;
      v33 += v28;
      v32 += v29;
      ++v25;
    }
    while (v25 != v24);
    v9 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v9 & 1;
  }
  if (v24 >= v12)
    v35 = v12;
  else
    v35 = 0;
  if (v22 < v10)
    v10 = 0;
  v36 = v22 - v10;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v37 = v15 + 8;
      v39 = (v15[3] + v15[7] + v15[v14 + 3] + v15[v14 + 7] + 2) >> 2;
      *v21 = (v15[1] + v15[5] + v15[v14 + 1] + v15[v14 + 5] + 2) >> 2;
      v21[1] = v39;
      v38 = v21 + 2;
    }
    else
    {
      v37 = v15;
      v38 = v21;
    }
    if (v22 != v10)
    {
      v40 = 0;
      v41 = v37 + 4;
      do
      {
        v42 = &v38[v40];
        v43 = (*(v41 - 1) + v41[3] + v41[v14 - 1] + v41[v14 + 3] + 2) >> 2;
        *v42 = (*(v41 - 3) + v41[1] + v41[v14 - 3] + v41[v14 + 1] + 2) >> 2;
        v42[1] = v43;
        v40 += 2;
        v41 += 8;
      }
      while (v40 < v36);
    }
    v15 += 2 * v14;
    v21 += v20;
  }
  if (v24 != v35)
  {
    v44 = 0;
    v45 = v24 - v35;
    do
    {
      v46 = v15;
      v47 = v21;
      if ((v9 & 1) != 0)
      {
        v46 = v15 + 8;
        v48 = (v15[3] + v15[7] + v15[v14 + 3] + v15[v14 + 7] + 2) >> 2;
        *v21 = (v15[1] + v15[5] + v15[v14 + 1] + v15[v14 + 5] + 2) >> 2;
        v21[1] = v48;
        v47 = v21 + 2;
      }
      if (v22 != v10)
      {
        v49 = 0;
        v50 = v46 + 4;
        do
        {
          v51 = &v47[v49];
          v52 = (*(v50 - 1) + v50[3] + v50[v14 - 1] + v50[v14 + 3] + 2) >> 2;
          *v51 = (*(v50 - 3) + v50[1] + v50[v14 - 3] + v50[v14 + 1] + 2) >> 2;
          v51[1] = v52;
          v49 += 2;
          v50 += 8;
        }
        while (v49 < v36);
      }
      v15 += 2 * v14;
      v21 += v20;
      v44 += 2;
    }
    while (v44 < v45);
  }
  return 0;
}

uint64_t vt_CopyDec_x444_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  char v39;
  unint64_t v40;
  _BYTE *v41;
  char v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  char v48;
  unint64_t v49;
  _BYTE *v50;
  char v51;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = v10 + v9;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = a4[1];
  v15 = a3[1] + v14 * (v12 + v8) + 4 * (v10 + v9);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = a8[1];
  v21 = (_BYTE *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v22 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  v24 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE) - v13;
  if (v24 >= v19 - v18)
    v24 = v19 - v18;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a3 + *a4 * v13 + 2 * v11;
    v28 = *a8;
    v29 = a8[2];
    if (v13 >= v8)
      v30 = 0;
    else
      v30 = *a4;
    v31 = v27 + v30;
    v32 = a7[2] + v29 * v18 + v16;
    v33 = *a7 + v28 * v18 + v16;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          *(_BYTE *)(v32 + i) = -1;
          *(_BYTE *)(v33 + i) = *(_BYTE *)(v31 + 2 * i + 1);
        }
      }
      v31 += v26;
      v33 += v28;
      v32 += v29;
      ++v25;
    }
    while (v25 != v24);
    v9 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v9 & 1;
  }
  if (v24 >= v12)
    v35 = v12;
  else
    v35 = 0;
  if (v22 < v10)
    v10 = 0;
  v36 = v22 - v10;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v39 = *(_BYTE *)(v15 + 3);
      v37 = v15 + 8;
      *v21 = *(_BYTE *)(v15 + 1);
      v21[1] = v39;
      v38 = v21 + 2;
    }
    else
    {
      v37 = v15;
      v38 = v21;
    }
    if (v22 != v10)
    {
      v40 = 0;
      do
      {
        v41 = &v38[v40];
        v42 = *(_BYTE *)(v37 + 3);
        *v41 = *(_BYTE *)(v37 + 1);
        v41[1] = v42;
        v40 += 2;
        v37 += 8;
      }
      while (v40 < v36);
    }
    v15 += 2 * v14;
    v21 += v20;
  }
  if (v24 != v35)
  {
    v43 = 0;
    v44 = v24 - v35;
    v45 = 2 * v14;
    do
    {
      v46 = v15;
      v47 = v21;
      if ((v9 & 1) != 0)
      {
        v48 = *(_BYTE *)(v15 + 3);
        v46 = v15 + 8;
        *v21 = *(_BYTE *)(v15 + 1);
        v21[1] = v48;
        v47 = v21 + 2;
      }
      if (v22 != v10)
      {
        v49 = 0;
        do
        {
          v50 = &v47[v49];
          v51 = *(_BYTE *)(v46 + 3);
          *v50 = *(_BYTE *)(v46 + 1);
          v50[1] = v51;
          v49 += 2;
          v46 += 8;
        }
        while (v49 < v36);
      }
      v15 += v45;
      v21 += v20;
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_CopyAvg_x444_420v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  unint64_t v33;
  unsigned __int8 *v34;
  _BYTE *v35;
  unsigned int v36;
  unint64_t v37;
  unsigned __int8 *v38;
  _BYTE *v39;
  unsigned int v40;
  unint64_t v41;
  unint64_t v42;
  unsigned __int8 *v43;
  _BYTE *v44;
  unsigned int v45;
  unint64_t v46;
  unsigned __int8 *v47;
  _BYTE *v48;
  unsigned int v49;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = a8[1];
  v21 = (_BYTE *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v22 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  v24 = v19 - v18;
  if (((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v13 < v19 - v18)
    v24 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v13;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    if (v13 >= v9)
      v28 = 0;
    else
      v28 = *a4;
    v29 = *a3 + *a4 * v13 + 2 * v11 + v28;
    v30 = *a7 + v27 * v18 + v16;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_BYTE *)(v30 + i) = *(_BYTE *)(v29 + 2 * i + 1);
      }
      v29 += v26;
      v30 += v27;
      ++v25;
    }
    while (v25 != v24);
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v24 >= v12)
    v32 = v12;
  else
    v32 = 0;
  if (v22 < v10)
    v10 = 0;
  v33 = v22 - v10;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v34 = v15 + 8;
      v36 = (v15[3] + v15[7] + v15[v14 + 3] + v15[v14 + 7] + 2) >> 2;
      *v21 = (v15[1] + v15[5] + v15[v14 + 1] + v15[v14 + 5] + 2) >> 2;
      v21[1] = v36;
      v35 = v21 + 2;
    }
    else
    {
      v34 = v15;
      v35 = v21;
    }
    if (v22 != v10)
    {
      v37 = 0;
      v38 = v34 + 4;
      do
      {
        v39 = &v35[v37];
        v40 = (*(v38 - 1) + v38[3] + v38[v14 - 1] + v38[v14 + 3] + 2) >> 2;
        *v39 = (*(v38 - 3) + v38[1] + v38[v14 - 3] + v38[v14 + 1] + 2) >> 2;
        v39[1] = v40;
        v37 += 2;
        v38 += 8;
      }
      while (v37 < v33);
    }
    v15 += 2 * v14;
    v21 += v20;
  }
  if (v24 != v32)
  {
    v41 = 0;
    v42 = v24 - v32;
    do
    {
      v43 = v15;
      v44 = v21;
      if ((v8 & 1) != 0)
      {
        v43 = v15 + 8;
        v45 = (v15[3] + v15[7] + v15[v14 + 3] + v15[v14 + 7] + 2) >> 2;
        *v21 = (v15[1] + v15[5] + v15[v14 + 1] + v15[v14 + 5] + 2) >> 2;
        v21[1] = v45;
        v44 = v21 + 2;
      }
      if (v22 != v10)
      {
        v46 = 0;
        v47 = v43 + 4;
        do
        {
          v48 = &v44[v46];
          v49 = (*(v47 - 1) + v47[3] + v47[v14 - 1] + v47[v14 + 3] + 2) >> 2;
          *v48 = (*(v47 - 3) + v47[1] + v47[v14 - 3] + v47[v14 + 1] + 2) >> 2;
          v48[1] = v49;
          v46 += 2;
          v47 += 8;
        }
        while (v46 < v33);
      }
      v15 += 2 * v14;
      v21 += v20;
      v41 += 2;
    }
    while (v41 < v42);
  }
  return 0;
}

uint64_t vt_CopyDec_x444_420v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  char v36;
  unint64_t v37;
  _BYTE *v38;
  char v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  char v45;
  unint64_t v46;
  _BYTE *v47;
  char v48;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = a4[1];
  v15 = a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = a8[1];
  v21 = (_BYTE *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v22 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  v24 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v13;
  if (v24 >= v19 - v18)
    v24 = v19 - v18;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    if (v13 >= v9)
      v28 = 0;
    else
      v28 = *a4;
    v29 = *a3 + *a4 * v13 + 2 * v11 + v28;
    v30 = *a7 + v27 * v18 + v16;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_BYTE *)(v30 + i) = *(_BYTE *)(v29 + 2 * i + 1);
      }
      v29 += v26;
      v30 += v27;
      ++v25;
    }
    while (v25 != v24);
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v24 >= v12)
    v32 = v12;
  else
    v32 = 0;
  if (v22 < v10)
    v10 = 0;
  v33 = v22 - v10;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v36 = *(_BYTE *)(v15 + 3);
      v34 = v15 + 8;
      *v21 = *(_BYTE *)(v15 + 1);
      v21[1] = v36;
      v35 = v21 + 2;
    }
    else
    {
      v34 = v15;
      v35 = v21;
    }
    if (v22 != v10)
    {
      v37 = 0;
      do
      {
        v38 = &v35[v37];
        v39 = *(_BYTE *)(v34 + 3);
        *v38 = *(_BYTE *)(v34 + 1);
        v38[1] = v39;
        v37 += 2;
        v34 += 8;
      }
      while (v37 < v33);
    }
    v15 += 2 * v14;
    v21 += v20;
  }
  if (v24 != v32)
  {
    v40 = 0;
    v41 = v24 - v32;
    v42 = 2 * v14;
    do
    {
      v43 = v15;
      v44 = v21;
      if ((v8 & 1) != 0)
      {
        v45 = *(_BYTE *)(v15 + 3);
        v43 = v15 + 8;
        *v21 = *(_BYTE *)(v15 + 1);
        v21[1] = v45;
        v44 = v21 + 2;
      }
      if (v22 != v10)
      {
        v46 = 0;
        do
        {
          v47 = &v44[v46];
          v48 = *(_BYTE *)(v43 + 3);
          *v47 = *(_BYTE *)(v43 + 1);
          v47[1] = v48;
          v46 += 2;
          v43 += 8;
        }
        while (v46 < v33);
      }
      v15 += v42;
      v21 += v20;
      v40 += 2;
    }
    while (v40 < v41);
  }
  return 0;
}

uint64_t vt_CopyAvg_x444_420f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  unsigned int v33;
  unint64_t v34;
  unint64_t v35;
  unsigned __int16 *v36;
  _BYTE *v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  unsigned __int16 *v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  unint64_t v59;
  unsigned __int16 *v60;
  unsigned int v61;
  int v62;
  unsigned int v63;
  unsigned __int16 *v64;
  unsigned int v65;
  unsigned int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  BOOL v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  int v76;
  unsigned int v77;
  unsigned int v78;
  int v79;
  int v80;
  int v81;
  _BYTE *v82;
  unint64_t v83;
  unint64_t v84;
  int v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unsigned __int16 *v89;
  _BYTE *v90;
  unsigned int v91;
  int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  unsigned int v102;
  int v103;
  unsigned int v104;
  unsigned __int16 *v105;
  unsigned int v106;
  unsigned int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  unint64_t v112;
  unsigned __int16 *v113;
  unsigned int v114;
  int v115;
  unsigned int v116;
  unsigned __int16 *v117;
  unsigned int v118;
  unsigned int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  int v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int v131;
  int v132;
  int v133;
  int v134;
  _BYTE *v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v140;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = a4[1];
  v15 = (unsigned __int16 *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v140 = a8[1];
  v20 = (_BYTE *)(a7[1] + ((unint64_t)(v140 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  v22 = v17 - v16;
  if (v21 >= v22)
    v21 = v22;
  v23 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v13;
  v24 = v19 - v18;
  if (v23 >= v24)
    v23 = v24;
  if (v23)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a3 + *a4 * v13 + 2 * v11;
    v28 = *a8;
    if (v13 >= v9)
      v29 = 0;
    else
      v29 = *a4;
    v30 = v27 + v29;
    v31 = *a7 + v28 * v18 + v16;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
        {
          v33 = *(unsigned __int16 *)(v30 + 2 * i) >> 6;
          if (v33 >= 0x3AC)
            v33 = 940;
          if (v33 <= 0x40)
            v33 = 64;
          *(_BYTE *)(v31 + i) = (255 * v33 - 16320) / 0x36C;
        }
      }
      v30 += v26;
      v31 += v28;
      ++v25;
    }
    while (v25 != v23);
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v23 >= v12)
    v34 = v12;
  else
    v34 = 0;
  if (v21 < v10)
    v10 = 0;
  v35 = v21 - v10;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v38 = *v15;
      v39 = v38 >> 6;
      v40 = v15[1];
      v41 = v40 >> 6;
      v42 = *(unsigned __int16 *)((char *)v15 + v14);
      v43 = *(unsigned __int16 *)((char *)v15 + v14 + 2);
      if (v38 >> 6 >= 0x3C0)
        v39 = 960;
      if (v38 < 0x1000)
        v39 = 64;
      if (v41 >= 0x3C0)
        v41 = 960;
      if (v40 < 0x1000)
        v41 = 64;
      if (v42 >> 6 >= 0x3C0)
        v44 = 960;
      else
        v44 = v42 >> 6;
      if (v42 >= 0x1000)
        v45 = v44;
      else
        v45 = 64;
      if (v43 >> 6 >= 0x3C0)
        v46 = 960;
      else
        v46 = v43 >> 6;
      if (v43 >= 0x1000)
        v47 = v46;
      else
        v47 = 64;
      v48 = v15[2];
      v49 = v48 >> 6;
      v50 = v15[3];
      v51 = (unsigned __int16 *)((char *)v15 + v14 + 4);
      v52 = *v51;
      v53 = v51[1];
      if (v48 >> 6 >= 0x3C0)
        v49 = 960;
      if (v48 >= 0x1000)
        v54 = v49;
      else
        v54 = 64;
      if (v50 >> 6 >= 0x3C0)
        v55 = 960;
      else
        v55 = v50 >> 6;
      if (v50 < 0x1000)
        v55 = 64;
      if (v52 >> 6 >= 0x3C0)
        v56 = 960;
      else
        v56 = v52 >> 6;
      if (v52 < 0x1000)
        v56 = 64;
      if (v53 >> 6 >= 0x3C0)
        v57 = 960;
      else
        v57 = v53 >> 6;
      if (v53 >= 0x1000)
        v58 = v57;
      else
        v58 = 64;
      v36 = v15 + 4;
      *v20 = (((613566757 * (unint64_t)((255 * v39 - 16320) >> 7)) >> 32)
                          + ((613566757 * (unint64_t)((255 * v54 - 16320) >> 7)) >> 32)
                          + ((613566757 * (unint64_t)((255 * v45 - 16320) >> 7)) >> 32)
                          + ((613566757 * (unint64_t)((255 * v56 - 16320) >> 7)) >> 32)
                          + 2) >> 2;
      v20[1] = (((613566757 * (unint64_t)((255 * v41 - 16320) >> 7)) >> 32)
                            + ((613566757 * (unint64_t)((255 * v55 - 16320) >> 7)) >> 32)
                            + ((613566757 * (unint64_t)((255 * v47 - 16320) >> 7)) >> 32)
                            + ((613566757 * (unint64_t)((255 * v58 - 16320) >> 7)) >> 32)
                            + 2) >> 2;
      v37 = v20 + 2;
    }
    else
    {
      v36 = v15;
      v37 = v20;
    }
    if (v21 != v10)
    {
      v59 = 0;
      v60 = v36 + 2;
      do
      {
        v61 = *(v60 - 2);
        v62 = v61 >> 6;
        v63 = *(v60 - 1);
        v64 = (unsigned __int16 *)((char *)v60 + v14);
        v65 = *(unsigned __int16 *)((char *)v60 + v14 - 4);
        v66 = *(unsigned __int16 *)((char *)v60 + v14 - 2);
        if (v61 >> 6 >= 0x3C0)
          v62 = 960;
        if (v61 < 0x1000)
          v62 = 64;
        if (v63 >> 6 >= 0x3C0)
          v67 = 960;
        else
          v67 = v63 >> 6;
        if (v63 >= 0x1000)
          v68 = v67;
        else
          v68 = 64;
        if (v65 >> 6 >= 0x3C0)
          v69 = 960;
        else
          v69 = v65 >> 6;
        if (v65 >= 0x1000)
          v70 = v69;
        else
          v70 = 64;
        if (v66 >> 6 >= 0x3C0)
          v71 = 960;
        else
          v71 = v66 >> 6;
        v72 = v66 >= 0x1000;
        v73 = *v60;
        v74 = v73 >> 6;
        v75 = v60[1];
        if (v72)
          v76 = v71;
        else
          v76 = 64;
        v77 = *v64;
        v78 = v64[1];
        if (v74 >= 0x3C0)
          v74 = 960;
        if (v73 >= 0x1000)
          v79 = v74;
        else
          v79 = 64;
        if (v75 >> 6 >= 0x3C0)
          v80 = 960;
        else
          v80 = v75 >> 6;
        if (v75 < 0x1000)
          v80 = 64;
        if (v77 >> 6 >= 0x3C0)
          v81 = 960;
        else
          v81 = v77 >> 6;
        if (v77 < 0x1000)
          v81 = 64;
        v82 = &v37[v59];
        v83 = (613566757 * (unint64_t)((255 * v62 - 16320) >> 7)) >> 32;
        v84 = 613566757 * ((255 * v68 - 16320) >> 7);
        if (v78 >> 6 >= 0x3C0)
          v85 = 960;
        else
          v85 = v78 >> 6;
        v86 = HIDWORD(v84);
        if (v78 < 0x1000)
          v85 = 64;
        *v82 = (v83
                            + ((613566757 * (unint64_t)((255 * v79 - 16320) >> 7)) >> 32)
                            + ((613566757 * (unint64_t)((255 * v70 - 16320) >> 7)) >> 32)
                            + ((613566757 * (unint64_t)((255 * v81 - 16320) >> 7)) >> 32)
                            + 2) >> 2;
        v82[1] = (v86
                              + ((613566757 * (unint64_t)((255 * v80 - 16320) >> 7)) >> 32)
                              + ((613566757 * (unint64_t)((255 * v76 - 16320) >> 7)) >> 32)
                              + ((613566757 * (unint64_t)((255 * v85 - 16320) >> 7)) >> 32)
                              + 2) >> 2;
        v59 += 2;
        v60 += 4;
      }
      while (v59 < v35);
    }
    v15 += v14;
    v20 += v140;
  }
  if (v23 != v34)
  {
    v87 = 0;
    v88 = v23 - v34;
    do
    {
      v89 = v15;
      v90 = v20;
      if ((v8 & 1) != 0)
      {
        v91 = *v15;
        v92 = v91 >> 6;
        v93 = v15[1];
        v94 = *(unsigned __int16 *)((char *)v15 + v14);
        v95 = *(unsigned __int16 *)((char *)v15 + v14 + 2);
        if (v91 >> 6 >= 0x3C0)
          v92 = 960;
        if (v91 >= 0x1000)
          v96 = v92;
        else
          v96 = 64;
        if (v93 >> 6 >= 0x3C0)
          v97 = 960;
        else
          v97 = v93 >> 6;
        if (v93 < 0x1000)
          v97 = 64;
        if (v94 >> 6 >= 0x3C0)
          v98 = 960;
        else
          v98 = v94 >> 6;
        if (v94 >= 0x1000)
          v99 = v98;
        else
          v99 = 64;
        if (v95 >> 6 >= 0x3C0)
          v100 = 960;
        else
          v100 = v95 >> 6;
        if (v95 >= 0x1000)
          v101 = v100;
        else
          v101 = 64;
        v102 = v15[2];
        v103 = v102 >> 6;
        v104 = v15[3];
        v105 = (unsigned __int16 *)((char *)v15 + v14 + 4);
        v106 = *v105;
        v107 = v105[1];
        if (v102 >> 6 >= 0x3C0)
          v103 = 960;
        if (v102 >= 0x1000)
          v108 = v103;
        else
          v108 = 64;
        if (v104 >> 6 >= 0x3C0)
          v109 = 960;
        else
          v109 = v104 >> 6;
        if (v104 < 0x1000)
          v109 = 64;
        if (v106 >> 6 >= 0x3C0)
          v110 = 960;
        else
          v110 = v106 >> 6;
        if (v106 < 0x1000)
          v110 = 64;
        if (v107 >> 6 >= 0x3C0)
          v111 = 960;
        else
          v111 = v107 >> 6;
        if (v107 < 0x1000)
          v111 = 64;
        v89 = v15 + 4;
        *v20 = (((613566757 * (unint64_t)((255 * v96 - 16320) >> 7)) >> 32)
                            + ((613566757 * (unint64_t)((255 * v108 - 16320) >> 7)) >> 32)
                            + ((613566757 * (unint64_t)((255 * v99 - 16320) >> 7)) >> 32)
                            + ((613566757 * (unint64_t)((255 * v110 - 16320) >> 7)) >> 32)
                            + 2) >> 2;
        v20[1] = (((613566757 * (unint64_t)((255 * v97 - 16320) >> 7)) >> 32)
                              + ((613566757 * (unint64_t)((255 * v109 - 16320) >> 7)) >> 32)
                              + ((613566757 * (unint64_t)((255 * v101 - 16320) >> 7)) >> 32)
                              + ((613566757 * (unint64_t)((255 * v111 - 16320) >> 7)) >> 32)
                              + 2) >> 2;
        v90 = v20 + 2;
      }
      if (v21 != v10)
      {
        v112 = 0;
        v113 = v89 + 2;
        do
        {
          v114 = *(v113 - 2);
          v115 = v114 >> 6;
          v116 = *(v113 - 1);
          v117 = (unsigned __int16 *)((char *)v113 + v14);
          v118 = *(unsigned __int16 *)((char *)v113 + v14 - 4);
          v119 = *(unsigned __int16 *)((char *)v113 + v14 - 2);
          if (v114 >> 6 >= 0x3C0)
            v115 = 960;
          if (v114 < 0x1000)
            v115 = 64;
          if (v116 >> 6 >= 0x3C0)
            v120 = 960;
          else
            v120 = v116 >> 6;
          if (v116 >= 0x1000)
            v121 = v120;
          else
            v121 = 64;
          if (v118 >> 6 >= 0x3C0)
            v122 = 960;
          else
            v122 = v118 >> 6;
          if (v118 >= 0x1000)
            v123 = v122;
          else
            v123 = 64;
          if (v119 >> 6 >= 0x3C0)
            v124 = 960;
          else
            v124 = v119 >> 6;
          v72 = v119 >= 0x1000;
          v125 = *v113;
          v126 = v125 >> 6;
          v127 = v113[1];
          if (v72)
            v128 = v124;
          else
            v128 = 64;
          v129 = *v117;
          v130 = v117[1];
          v131 = v130 >> 6;
          if (v126 >= 0x3C0)
            v126 = 960;
          if (v125 >= 0x1000)
            v132 = v126;
          else
            v132 = 64;
          if (v127 >> 6 >= 0x3C0)
            v133 = 960;
          else
            v133 = v127 >> 6;
          if (v127 < 0x1000)
            v133 = 64;
          if (v129 >> 6 >= 0x3C0)
            v134 = 960;
          else
            v134 = v129 >> 6;
          if (v129 < 0x1000)
            v134 = 64;
          v135 = &v90[v112];
          v136 = (613566757 * (unint64_t)((255 * v115 - 16320) >> 7)) >> 32;
          v137 = 613566757 * ((255 * v121 - 16320) >> 7);
          if (v131 >= 0x3C0)
            v131 = 960;
          v138 = HIDWORD(v137);
          if (v130 < 0x1000)
            v131 = 64;
          *v135 = (v136
                               + ((613566757 * (unint64_t)((255 * v132 - 16320) >> 7)) >> 32)
                               + ((613566757 * (unint64_t)((255 * v123 - 16320) >> 7)) >> 32)
                               + ((613566757 * (unint64_t)((255 * v134 - 16320) >> 7)) >> 32)
                               + 2) >> 2;
          v135[1] = (v138
                                 + ((613566757 * (unint64_t)((255 * v133 - 16320) >> 7)) >> 32)
                                 + ((613566757 * (unint64_t)((255 * v128 - 16320) >> 7)) >> 32)
                                 + ((613566757 * (unint64_t)((255 * v131 - 16320) >> 7)) >> 32)
                                 + 2) >> 2;
          v112 += 2;
          v113 += 4;
        }
        while (v112 < v35);
      }
      v15 += v14;
      v20 += v140;
      v87 += 2;
    }
    while (v87 < v88);
  }
  return 0;
}

uint64_t vt_CopyDec_x444_420f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  unsigned __int16 *v37;
  _BYTE *v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  unint64_t v44;
  _BYTE *v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  int v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unsigned __int16 *v54;
  _BYTE *v55;
  unsigned int v56;
  int v57;
  unsigned int v58;
  int v59;
  int v60;
  unint64_t v61;
  _BYTE *v62;
  unsigned int v63;
  int v64;
  unsigned int v65;
  int v66;
  int v67;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = a4[1];
  v15 = (unsigned __int16 *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = a8[1];
  v21 = (_BYTE *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v22 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  v24 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v13;
  v25 = v19 - v18;
  if (v24 >= v25)
    v24 = v25;
  if (v24)
  {
    v26 = 0;
    v27 = *a4;
    v28 = *a3 + *a4 * v13 + 2 * v11;
    v29 = *a8;
    if (v13 >= v9)
      v30 = 0;
    else
      v30 = *a4;
    v31 = v28 + v30;
    v32 = *a7 + v29 * v18 + v16;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          v34 = *(unsigned __int16 *)(v31 + 2 * i) >> 6;
          if (v34 >= 0x3AC)
            v34 = 940;
          if (v34 <= 0x40)
            v34 = 64;
          *(_BYTE *)(v32 + i) = (255 * v34 - 16320) / 0x36C;
        }
      }
      v31 += v27;
      v32 += v29;
      ++v26;
    }
    while (v26 != v24);
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v24 >= v12)
    v35 = v12;
  else
    v35 = 0;
  if (v22 < v10)
    v10 = 0;
  v36 = v22 - v10;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v39 = *v15;
      v40 = v39 >> 6;
      v41 = v15[1];
      v42 = v41 >> 6;
      if (v39 >> 6 >= 0x3C0)
        v40 = 960;
      if (v39 < 0x1000)
        v40 = 64;
      if (v42 >= 0x3C0)
        v42 = 960;
      if (v41 >= 0x1000)
        v43 = v42;
      else
        v43 = 64;
      v37 = v15 + 4;
      *v21 = (613566757 * (unint64_t)((255 * v40 - 16320) >> 7)) >> 32;
      v21[1] = (613566757 * (unint64_t)((255 * v43 - 16320) >> 7)) >> 32;
      v38 = v21 + 2;
    }
    else
    {
      v37 = v15;
      v38 = v21;
    }
    if (v22 != v10)
    {
      v44 = 0;
      do
      {
        v45 = &v38[v44];
        v46 = *v37;
        v47 = v46 >> 6;
        v48 = v37[1];
        if (v46 >> 6 >= 0x3C0)
          v47 = 960;
        if (v46 >= 0x1000)
          v49 = v47;
        else
          v49 = 64;
        if (v48 >> 6 >= 0x3C0)
          v50 = 960;
        else
          v50 = v48 >> 6;
        if (v48 < 0x1000)
          v50 = 64;
        *v45 = (613566757 * (unint64_t)((255 * v49 - 16320) >> 7)) >> 32;
        v45[1] = (613566757 * (unint64_t)((255 * v50 - 16320) >> 7)) >> 32;
        v44 += 2;
        v37 += 4;
      }
      while (v44 < v36);
    }
    v15 += v14;
    v21 += v20;
  }
  if (v24 != v35)
  {
    v51 = 0;
    v52 = v24 - v35;
    v53 = 2 * v14;
    do
    {
      v54 = v15;
      v55 = v21;
      if ((v8 & 1) != 0)
      {
        v56 = *v15;
        v57 = v56 >> 6;
        v58 = v15[1];
        if (v56 >> 6 >= 0x3C0)
          v57 = 960;
        if (v56 < 0x1000)
          v57 = 64;
        if (v58 >> 6 >= 0x3C0)
          v59 = 960;
        else
          v59 = v58 >> 6;
        if (v58 >= 0x1000)
          v60 = v59;
        else
          v60 = 64;
        v54 = v15 + 4;
        *v21 = (613566757 * (unint64_t)((255 * v57 - 16320) >> 7)) >> 32;
        v21[1] = (613566757 * (unint64_t)((255 * v60 - 16320) >> 7)) >> 32;
        v55 = v21 + 2;
      }
      if (v22 != v10)
      {
        v61 = 0;
        do
        {
          v62 = &v55[v61];
          v63 = *v54;
          v64 = v63 >> 6;
          v65 = v54[1];
          if (v63 >> 6 >= 0x3C0)
            v64 = 960;
          if (v63 >= 0x1000)
            v66 = v64;
          else
            v66 = 64;
          if (v65 >> 6 >= 0x3C0)
            v67 = 960;
          else
            v67 = v65 >> 6;
          if (v65 < 0x1000)
            v67 = 64;
          *v62 = (613566757 * (unint64_t)((255 * v66 - 16320) >> 7)) >> 32;
          v62[1] = (613566757 * (unint64_t)((255 * v67 - 16320) >> 7)) >> 32;
          v61 += 2;
          v54 += 4;
        }
        while (v61 < v36);
      }
      v15 = (unsigned __int16 *)((char *)v15 + v53);
      v21 += v20;
      v51 += 2;
    }
    while (v51 < v52);
  }
  return 0;
}

uint64_t vt_CopyAvg_x444_y420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t i;
  unint64_t v36;
  unint64_t v37;
  unsigned __int8 *v38;
  _BYTE *v39;
  _BYTE *v40;
  unsigned int v41;
  unint64_t v42;
  unsigned __int8 *v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  unsigned __int8 *v47;
  _BYTE *v48;
  _BYTE *v49;
  unsigned int v50;
  unint64_t v51;
  unsigned __int8 *v52;
  unsigned int v53;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = a8[1];
  v21 = a8[2];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 >> 1));
  v23 = (_BYTE *)(a7[2] + ((unint64_t)(v21 * v18) >> 1) + (v16 >> 1));
  v24 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  v25 = v17 - v16;
  if (v24 >= v25)
    v24 = v25;
  v26 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v13;
  v27 = v19 - v18;
  if (v26 >= v27)
    v26 = v27;
  if (v26)
  {
    v28 = 0;
    v29 = *a4;
    v30 = *a8;
    v31 = *a3 + v29 * v13 + 2 * v11;
    if (v13 >= v9)
      v32 = 0;
    else
      v32 = v29;
    v33 = v31 + v32;
    v34 = *a7 + v30 * v18 + v16;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
          *(_BYTE *)(v34 + i) = *(_BYTE *)(v33 + 2 * i + 1);
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v26);
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v26 >= v12)
    v36 = v12;
  else
    v36 = 0;
  if (v24 < v10)
    v10 = 0;
  v37 = v24 - v10;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v38 = v15 + 8;
      v41 = (v15[3] + v15[7] + v15[v14 + 3] + v15[v14 + 7] + 2) >> 2;
      *v22 = (v15[1] + v15[5] + v15[v14 + 1] + v15[v14 + 5] + 2) >> 2;
      v39 = v22 + 1;
      *v23 = v41;
      v40 = v23 + 1;
    }
    else
    {
      v38 = v15;
      v39 = v22;
      v40 = v23;
    }
    if (v24 != v10)
    {
      v42 = 0;
      v43 = v38 + 4;
      do
      {
        v44 = *(v43 - 1) + v43[3] + v43[v14 - 1] + v43[v14 + 3] + 2;
        *v39++ = (*(v43 - 3) + v43[1] + v43[v14 - 3] + v43[v14 + 1] + 2) >> 2;
        *v40++ = v44 >> 2;
        v42 += 2;
        v43 += 8;
      }
      while (v42 < v37);
    }
    v15 += 2 * v14;
    v22 += v20;
    v23 += v21;
  }
  if (v26 != v36)
  {
    v45 = 0;
    v46 = v26 - v36;
    do
    {
      v47 = v15;
      v48 = v22;
      v49 = v23;
      if ((v8 & 1) != 0)
      {
        v47 = v15 + 8;
        v50 = (v15[3] + v15[7] + v15[v14 + 3] + v15[v14 + 7] + 2) >> 2;
        *v22 = (v15[1] + v15[5] + v15[v14 + 1] + v15[v14 + 5] + 2) >> 2;
        v48 = v22 + 1;
        *v23 = v50;
        v49 = v23 + 1;
      }
      if (v24 != v10)
      {
        v51 = 0;
        v52 = v47 + 4;
        do
        {
          v53 = *(v52 - 1) + v52[3] + v52[v14 - 1] + v52[v14 + 3] + 2;
          *v48++ = (*(v52 - 3) + v52[1] + v52[v14 - 3] + v52[v14 + 1] + 2) >> 2;
          *v49++ = v53 >> 2;
          v51 += 2;
          v52 += 8;
        }
        while (v51 < v37);
      }
      v15 += 2 * v14;
      v22 += v20;
      v23 += v21;
      v45 += 2;
    }
    while (v45 < v46);
  }
  return 0;
}

uint64_t vt_CopyDec_x444_y420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t i;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  _BYTE *v40;
  char v41;
  unint64_t v42;
  char v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  _BYTE *v49;
  char v50;
  unint64_t v51;
  char v52;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = v10 + v9;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = a4[1];
  v15 = a3[1] + v14 * (v12 + v8) + 4 * (v10 + v9);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = a8[1];
  v21 = a8[2];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 >> 1));
  v23 = (_BYTE *)(a7[2] + ((unint64_t)(v21 * v18) >> 1) + (v16 >> 1));
  v24 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v25 = v17 - v16;
  if (v24 >= v25)
    v24 = v25;
  v26 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE) - v13;
  v27 = v19 - v18;
  if (v26 >= v27)
    v26 = v27;
  if (v26)
  {
    v28 = 0;
    v29 = *a4;
    v30 = *a8;
    v31 = *a3 + v29 * v13 + 2 * v11;
    if (v13 >= v8)
      v32 = 0;
    else
      v32 = v29;
    v33 = v31 + v32;
    v34 = *a7 + v30 * v18 + v16;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
          *(_BYTE *)(v34 + i) = *(_BYTE *)(v33 + 2 * i + 1);
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v26);
    v9 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v9 & 1;
  }
  if (v26 >= v12)
    v36 = v12;
  else
    v36 = 0;
  if (v24 < v10)
    v10 = 0;
  v37 = v24 - v10;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v41 = *(_BYTE *)(v15 + 3);
      v38 = v15 + 8;
      *v22 = *(_BYTE *)(v15 + 1);
      v39 = v22 + 1;
      *v23 = v41;
      v40 = v23 + 1;
    }
    else
    {
      v38 = v15;
      v39 = v22;
      v40 = v23;
    }
    if (v24 != v10)
    {
      v42 = 0;
      do
      {
        v43 = *(_BYTE *)(v38 + 3);
        *v39++ = *(_BYTE *)(v38 + 1);
        *v40++ = v43;
        v42 += 2;
        v38 += 8;
      }
      while (v42 < v37);
    }
    v15 += 2 * v14;
    v22 += v20;
    v23 += v21;
  }
  if (v26 != v36)
  {
    v44 = 0;
    v45 = v26 - v36;
    v46 = 2 * v14;
    do
    {
      v47 = v15;
      v48 = v22;
      v49 = v23;
      if ((v9 & 1) != 0)
      {
        v50 = *(_BYTE *)(v15 + 3);
        v47 = v15 + 8;
        *v22 = *(_BYTE *)(v15 + 1);
        v48 = v22 + 1;
        *v23 = v50;
        v49 = v23 + 1;
      }
      if (v24 != v10)
      {
        v51 = 0;
        do
        {
          v52 = *(_BYTE *)(v47 + 3);
          *v48++ = *(_BYTE *)(v47 + 1);
          *v49++ = v52;
          v51 += 2;
          v47 += 8;
        }
        while (v51 < v37);
      }
      v15 += v46;
      v22 += v20;
      v23 += v21;
      v44 += 2;
    }
    while (v44 < v45);
  }
  return 0;
}

uint64_t vt_CopyAvg_x444_f420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int16 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t i;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  __int16 *v39;
  _BYTE *v40;
  _BYTE *v41;
  uint16x4_t v42;
  __int16 *v43;
  uint16x4_t v44;
  uint32x4_t v45;
  uint32x4_t v46;
  uint32x4_t v47;
  uint16x4_t v48;
  uint32x4_t v49;
  unint64_t v50;
  __int16 *v51;
  uint16x4_t v52;
  uint32x4_t v53;
  uint32x4_t v54;
  uint16x4_t v55;
  uint16x4_t v56;
  uint32x4_t v57;
  uint32x4_t v58;
  unint64_t v59;
  unint64_t v60;
  uint16x4_t v61;
  uint32x4_t v62;
  uint32x4_t v63;
  __int16 *v64;
  _BYTE *v65;
  _BYTE *v66;
  uint16x4_t v67;
  __int16 *v68;
  uint32x4_t v69;
  uint16x4_t v70;
  uint32x4_t v71;
  unint64_t v72;
  __int16 *v73;
  uint16x4_t v74;
  uint16x4_t v75;
  uint32x4_t v76;
  uint32x4_t v77;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = a4[1];
  v15 = (__int16 *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = a8[1];
  v21 = a8[2];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 >> 1));
  v23 = (_BYTE *)(a7[2] + ((unint64_t)(v21 * v18) >> 1) + (v16 >> 1));
  v24 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  v25 = v17 - v16;
  if (v24 >= v25)
    v24 = v25;
  v26 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v13;
  v27 = v19 - v18;
  if (v26 >= v27)
    v26 = v27;
  if (v26)
  {
    v28 = 0;
    v29 = *a4;
    v30 = *a3 + *a4 * v13 + 2 * v11;
    v31 = *a8;
    if (v13 >= v9)
      v32 = 0;
    else
      v32 = *a4;
    v33 = v30 + v32;
    v34 = *a7 + v31 * v18 + v16;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
        {
          v36 = *(unsigned __int16 *)(v33 + 2 * i) >> 6;
          if (v36 >= 0x3AC)
            v36 = 940;
          if (v36 <= 0x40)
            v36 = 64;
          *(_BYTE *)(v34 + i) = (255 * v36 - 16320) / 0x36C;
        }
      }
      v33 += v29;
      v34 += v31;
      ++v28;
    }
    while (v28 != v26);
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v26 >= v12)
    v37 = v12;
  else
    v37 = 0;
  if (v24 < v10)
    v10 = 0;
  v38 = v24 - v10;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v42.i16[0] = *v15;
      v42.i16[1] = *(__int16 *)((char *)v15 + v14);
      v42.i16[2] = v15[2];
      v43 = (__int16 *)((char *)v15 + v14 + 4);
      v42.i16[3] = *v43;
      v39 = v15 + 4;
      v44 = (uint16x4_t)vdup_n_s16(0x3C0u);
      v45 = (uint32x4_t)vdupq_n_s32(0xFFFFC040);
      v46 = vshrq_n_u32(vmlal_u16(v45, (uint16x4_t)vbsl_s8((int8x8_t)vcgt_u16((uint16x4_t)0x1000100010001000, v42), (int8x8_t)0x40004000400040, (int8x8_t)vmin_u16(vshr_n_u16(v42, 6uLL), v44)), (uint16x4_t)0xFF00FF00FF00FFLL), 7uLL);
      v47 = (uint32x4_t)vdupq_n_s32(0x24924925u);
      v48.i16[0] = v15[1];
      v48.i16[1] = *(__int16 *)((char *)v15 + v14 + 2);
      v48.i16[2] = v15[3];
      v48.i16[3] = v43[1];
      v49 = vshrq_n_u32(vmlal_u16(v45, (uint16x4_t)vbsl_s8((int8x8_t)vcgt_u16((uint16x4_t)0x1000100010001000, v48), (int8x8_t)0x40004000400040, (int8x8_t)vmin_u16(vshr_n_u16(v48, 6uLL), v44)), (uint16x4_t)0xFF00FF00FF00FFLL), 7uLL);
      *v22 = (vaddvq_s32(vuzp2q_s32((int32x4_t)vmull_u32(*(uint32x2_t *)v46.i8, *(uint32x2_t *)v47.i8), (int32x4_t)vmull_high_u32(v46, v47)))+ 2) >> 2;
      v40 = v22 + 1;
      *v23 = (vaddvq_s32(vuzp2q_s32((int32x4_t)vmull_u32(*(uint32x2_t *)v49.i8, *(uint32x2_t *)v47.i8), (int32x4_t)vmull_high_u32(v49, v47)))+ 2) >> 2;
      v41 = v23 + 1;
    }
    else
    {
      v39 = v15;
      v40 = v22;
      v41 = v23;
    }
    if (v24 != v10)
    {
      v50 = 0;
      v51 = v39 + 2;
      v52 = (uint16x4_t)vdup_n_s16(0x3C0u);
      v53 = (uint32x4_t)vdupq_n_s32(0xFFFFC040);
      v54 = (uint32x4_t)vdupq_n_s32(0x24924925u);
      do
      {
        v55.i16[0] = *(v51 - 2);
        v55.i16[1] = *(__int16 *)((char *)v51 + v14 - 4);
        v55.i16[2] = *v51;
        v55.i16[3] = *(__int16 *)((char *)v51 + v14);
        v56.i16[0] = *(v51 - 1);
        v56.i16[1] = *(__int16 *)((char *)v51 + v14 - 2);
        v56.i16[2] = v51[1];
        v56.i16[3] = *(__int16 *)((char *)v51 + v14 + 2);
        v57 = vshrq_n_u32(vmlal_u16(v53, (uint16x4_t)vbsl_s8((int8x8_t)vcgt_u16((uint16x4_t)0x1000100010001000, v55), (int8x8_t)0x40004000400040, (int8x8_t)vmin_u16(vshr_n_u16(v55, 6uLL), v52)), (uint16x4_t)0xFF00FF00FF00FFLL), 7uLL);
        v58 = vshrq_n_u32(vmlal_u16(v53, (uint16x4_t)vbsl_s8((int8x8_t)vcgt_u16((uint16x4_t)0x1000100010001000, v56), (int8x8_t)0x40004000400040, (int8x8_t)vmin_u16(vshr_n_u16(v56, 6uLL), v52)), (uint16x4_t)0xFF00FF00FF00FFLL), 7uLL);
        *v40++ = (vaddvq_s32(vuzp2q_s32((int32x4_t)vmull_u32(*(uint32x2_t *)v57.i8, *(uint32x2_t *)v54.i8), (int32x4_t)vmull_high_u32(v57, v54)))+ 2) >> 2;
        *v41++ = (vaddvq_s32(vuzp2q_s32((int32x4_t)vmull_u32(*(uint32x2_t *)v58.i8, *(uint32x2_t *)v54.i8), (int32x4_t)vmull_high_u32(v58, v54)))+ 2) >> 2;
        v50 += 2;
        v51 += 4;
      }
      while (v50 < v38);
    }
    v15 += v14;
    v22 += v20;
    v23 += v21;
  }
  if (v26 != v37)
  {
    v59 = 0;
    v60 = v26 - v37;
    v61 = (uint16x4_t)vdup_n_s16(0x3C0u);
    v62 = (uint32x4_t)vdupq_n_s32(0xFFFFC040);
    v63 = (uint32x4_t)vdupq_n_s32(0x24924925u);
    do
    {
      v64 = v15;
      v65 = v22;
      v66 = v23;
      if ((v8 & 1) != 0)
      {
        v67.i16[0] = *v15;
        v67.i16[1] = *(__int16 *)((char *)v15 + v14);
        v67.i16[2] = v15[2];
        v68 = (__int16 *)((char *)v15 + v14 + 4);
        v67.i16[3] = *v68;
        v64 = v15 + 4;
        v69 = vshrq_n_u32(vmlal_u16(v62, (uint16x4_t)vbsl_s8((int8x8_t)vcgt_u16((uint16x4_t)0x1000100010001000, v67), (int8x8_t)0x40004000400040, (int8x8_t)vmin_u16(vshr_n_u16(v67, 6uLL), v61)), (uint16x4_t)0xFF00FF00FF00FFLL), 7uLL);
        v70.i16[0] = v15[1];
        v70.i16[1] = *(__int16 *)((char *)v15 + v14 + 2);
        v70.i16[2] = v15[3];
        v70.i16[3] = v68[1];
        v71 = vshrq_n_u32(vmlal_u16(v62, (uint16x4_t)vbsl_s8((int8x8_t)vcgt_u16((uint16x4_t)0x1000100010001000, v70), (int8x8_t)0x40004000400040, (int8x8_t)vmin_u16(vshr_n_u16(v70, 6uLL), v61)), (uint16x4_t)0xFF00FF00FF00FFLL), 7uLL);
        *v22 = (vaddvq_s32(vuzp2q_s32((int32x4_t)vmull_u32(*(uint32x2_t *)v69.i8, *(uint32x2_t *)v63.i8), (int32x4_t)vmull_high_u32(v69, v63)))+ 2) >> 2;
        v65 = v22 + 1;
        *v23 = (vaddvq_s32(vuzp2q_s32((int32x4_t)vmull_u32(*(uint32x2_t *)v71.i8, *(uint32x2_t *)v63.i8), (int32x4_t)vmull_high_u32(v71, v63)))+ 2) >> 2;
        v66 = v23 + 1;
      }
      if (v24 != v10)
      {
        v72 = 0;
        v73 = v64 + 2;
        do
        {
          v74.i16[0] = *(v73 - 2);
          v74.i16[1] = *(__int16 *)((char *)v73 + v14 - 4);
          v74.i16[2] = *v73;
          v74.i16[3] = *(__int16 *)((char *)v73 + v14);
          v75.i16[0] = *(v73 - 1);
          v75.i16[1] = *(__int16 *)((char *)v73 + v14 - 2);
          v75.i16[2] = v73[1];
          v75.i16[3] = *(__int16 *)((char *)v73 + v14 + 2);
          v76 = vshrq_n_u32(vmlal_u16(v62, (uint16x4_t)vbsl_s8((int8x8_t)vcgt_u16((uint16x4_t)0x1000100010001000, v74), (int8x8_t)0x40004000400040, (int8x8_t)vmin_u16(vshr_n_u16(v74, 6uLL), v61)), (uint16x4_t)0xFF00FF00FF00FFLL), 7uLL);
          v77 = vshrq_n_u32(vmlal_u16(v62, (uint16x4_t)vbsl_s8((int8x8_t)vcgt_u16((uint16x4_t)0x1000100010001000, v75), (int8x8_t)0x40004000400040, (int8x8_t)vmin_u16(vshr_n_u16(v75, 6uLL), v61)), (uint16x4_t)0xFF00FF00FF00FFLL), 7uLL);
          *v65++ = (vaddvq_s32(vuzp2q_s32((int32x4_t)vmull_u32(*(uint32x2_t *)v76.i8, *(uint32x2_t *)v63.i8), (int32x4_t)vmull_high_u32(v76, v63)))+ 2) >> 2;
          *v66++ = (vaddvq_s32(vuzp2q_s32((int32x4_t)vmull_u32(*(uint32x2_t *)v77.i8, *(uint32x2_t *)v63.i8), (int32x4_t)vmull_high_u32(v77, v63)))+ 2) >> 2;
          v72 += 2;
          v73 += 4;
        }
        while (v72 < v38);
      }
      v15 += v14;
      v22 += v20;
      v23 += v21;
      v59 += 2;
    }
    while (v59 < v60);
  }
  return 0;
}

uint64_t vt_CopyDec_x444_f420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t i;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  unsigned __int16 *v39;
  _BYTE *v40;
  _BYTE *v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  unint64_t v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  int v51;
  int v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unsigned __int16 *v56;
  _BYTE *v57;
  _BYTE *v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  int v62;
  int v63;
  unint64_t v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  int v68;
  int v69;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = a4[1];
  v15 = (unsigned __int16 *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = a8[1];
  v21 = a8[2];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 >> 1));
  v23 = (_BYTE *)(a7[2] + ((unint64_t)(v21 * v18) >> 1) + (v16 >> 1));
  v24 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  v25 = v17 - v16;
  if (v24 >= v25)
    v24 = v25;
  v26 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v13;
  v27 = v19 - v18;
  if (v26 >= v27)
    v26 = v27;
  if (v26)
  {
    v28 = 0;
    v29 = *a4;
    v30 = *a3 + *a4 * v13 + 2 * v11;
    v31 = *a8;
    if (v13 >= v9)
      v32 = 0;
    else
      v32 = *a4;
    v33 = v30 + v32;
    v34 = *a7 + v31 * v18 + v16;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
        {
          v36 = *(unsigned __int16 *)(v33 + 2 * i) >> 6;
          if (v36 >= 0x3AC)
            v36 = 940;
          if (v36 <= 0x40)
            v36 = 64;
          *(_BYTE *)(v34 + i) = (255 * v36 - 16320) / 0x36C;
        }
      }
      v33 += v29;
      v34 += v31;
      ++v28;
    }
    while (v28 != v26);
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v26 >= v12)
    v37 = v12;
  else
    v37 = 0;
  if (v24 < v10)
    v10 = 0;
  v38 = v24 - v10;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v42 = *v15;
      v43 = v42 >> 6;
      v44 = v15[1];
      v45 = v44 >> 6;
      if (v42 >> 6 >= 0x3C0)
        v43 = 960;
      if (v42 < 0x1000)
        v43 = 64;
      if (v45 >= 0x3C0)
        v45 = 960;
      if (v44 >= 0x1000)
        v46 = v45;
      else
        v46 = 64;
      v39 = v15 + 4;
      *v22 = (613566757 * (unint64_t)((255 * v43 - 16320) >> 7)) >> 32;
      v40 = v22 + 1;
      *v23 = (613566757 * (unint64_t)((255 * v46 - 16320) >> 7)) >> 32;
      v41 = v23 + 1;
    }
    else
    {
      v39 = v15;
      v40 = v22;
      v41 = v23;
    }
    if (v24 != v10)
    {
      v47 = 0;
      do
      {
        v48 = *v39;
        v49 = v48 >> 6;
        v50 = v39[1];
        if (v48 >> 6 >= 0x3C0)
          v49 = 960;
        if (v48 >= 0x1000)
          v51 = v49;
        else
          v51 = 64;
        if (v50 >> 6 >= 0x3C0)
          v52 = 960;
        else
          v52 = v50 >> 6;
        if (v50 < 0x1000)
          v52 = 64;
        *v40++ = (613566757 * (unint64_t)((255 * v51 - 16320) >> 7)) >> 32;
        *v41++ = (613566757 * (unint64_t)((255 * v52 - 16320) >> 7)) >> 32;
        v47 += 2;
        v39 += 4;
      }
      while (v47 < v38);
    }
    v15 += v14;
    v22 += v20;
    v23 += v21;
  }
  if (v26 != v37)
  {
    v53 = 0;
    v54 = v26 - v37;
    v55 = 2 * v14;
    do
    {
      v56 = v15;
      v57 = v22;
      v58 = v23;
      if ((v8 & 1) != 0)
      {
        v59 = *v15;
        v60 = v59 >> 6;
        v61 = v15[1];
        if (v59 >> 6 >= 0x3C0)
          v60 = 960;
        if (v59 < 0x1000)
          v60 = 64;
        if (v61 >> 6 >= 0x3C0)
          v62 = 960;
        else
          v62 = v61 >> 6;
        if (v61 >= 0x1000)
          v63 = v62;
        else
          v63 = 64;
        v56 = v15 + 4;
        *v22 = (613566757 * (unint64_t)((255 * v60 - 16320) >> 7)) >> 32;
        v57 = v22 + 1;
        *v23 = (613566757 * (unint64_t)((255 * v63 - 16320) >> 7)) >> 32;
        v58 = v23 + 1;
      }
      if (v24 != v10)
      {
        v64 = 0;
        do
        {
          v65 = *v56;
          v66 = v65 >> 6;
          v67 = v56[1];
          if (v65 >> 6 >= 0x3C0)
            v66 = 960;
          if (v65 >= 0x1000)
            v68 = v66;
          else
            v68 = 64;
          if (v67 >> 6 >= 0x3C0)
            v69 = 960;
          else
            v69 = v67 >> 6;
          if (v67 < 0x1000)
            v69 = 64;
          *v57++ = (613566757 * (unint64_t)((255 * v68 - 16320) >> 7)) >> 32;
          *v58++ = (613566757 * (unint64_t)((255 * v69 - 16320) >> 7)) >> 32;
          v64 += 2;
          v56 += 4;
        }
        while (v64 < v38);
      }
      v15 = (unsigned __int16 *)((char *)v15 + v55);
      v22 += v20;
      v23 += v21;
      v53 += 2;
    }
    while (v53 < v54);
  }
  return 0;
}

uint64_t vt_Copy_s4as_y416(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  uint64_t v27;
  int v28;
  __int16 v29;

  v8 = a2[2];
  v9 = a2[3];
  if (v8 >= a6[2])
    v8 = a6[2];
  if (v9 >= a6[3])
    v9 = a6[3];
  if (v9)
  {
    v10 = 0;
    v12 = a4[1];
    v11 = a4[2];
    v13 = *a4;
    v14 = *a8;
    v15 = *a7 + *a8 * a6[5] + 2 * a6[4];
    v16 = a2[4];
    v17 = a2[5];
    v18 = *a3;
    v19 = a3[1] + v12 * v17;
    v20 = a3[2] + v11 * v17;
    v21 = v18 + *a4 * v17;
    v22 = v19 + 4 * v16;
    v23 = v20 + 2 * v16;
    v24 = v21 + 2 * v16;
    do
    {
      if (v8)
      {
        v25 = 0;
        for (i = 0; i != v8; ++i)
        {
          v27 = v15 + 2 * v25;
          v28 = *(_DWORD *)(v22 + v25);
          v29 = *(_WORD *)(v24 + 2 * i);
          *(_WORD *)v27 = *(_WORD *)(v23 + 2 * i);
          *(_WORD *)(v27 + 2) = v29;
          *(_DWORD *)(v27 + 4) = v28;
          v25 += 4;
        }
      }
      v24 += v13;
      v15 += v14;
      v22 += v12;
      v23 += v11;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_s4as_y408(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  _BYTE *v27;
  char v28;
  char v29;
  char v30;

  v8 = a2[2];
  v9 = a2[3];
  if (v8 >= a6[2])
    v8 = a6[2];
  if (v9 >= a6[3])
    v9 = a6[3];
  if (v9)
  {
    v10 = 0;
    v12 = a4[1];
    v11 = a4[2];
    v13 = *a4;
    v14 = *a8;
    v15 = *a7 + *a8 * a6[5] + a6[4];
    v16 = a2[4];
    v17 = a2[5];
    v18 = *a3;
    v19 = a3[1] + v12 * v17;
    v20 = a3[2] + v11 * v17;
    v21 = v18 + *a4 * v17;
    v22 = v19 + 4 * v16;
    v23 = v20 + 2 * v16;
    v24 = v21 + 2 * v16;
    do
    {
      if (v8)
      {
        v25 = 0;
        for (i = 0; i != v8; ++i)
        {
          v27 = (_BYTE *)(v15 + v25);
          v28 = *(_BYTE *)(v22 + v25 + 1);
          v29 = *(_BYTE *)(v22 + v25 + 3);
          v30 = *(_BYTE *)(v24 + 2 * i + 1);
          *v27 = *(_WORD *)(v23 + 2 * i);
          v27[1] = v30;
          v27[2] = v28;
          v27[3] = v29;
          v25 += 4;
        }
      }
      v24 += v13;
      v15 += v14;
      v22 += v12;
      v23 += v11;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_CopyAvg_sv44_v216(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t i;
  _WORD *v22;
  __int16 *v23;
  unsigned int v24;
  __int16 v25;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a8;
    v14 = *a4;
    v15 = a4[1];
    v16 = *a7 + *a8 * *(_QWORD *)(a6 + 40) + 2 * v10;
    v17 = *(_QWORD *)(a2 + 40);
    v18 = a3[1] + v15 * v17 + 4 * v9;
    v19 = *a3 + *a4 * v17 + 2 * v9;
    do
    {
      if (v11)
      {
        v20 = 0;
        for (i = 0; i < v11; i += 2)
        {
          v22 = (_WORD *)(v16 + v20);
          v23 = (__int16 *)(v19 + 2 * i);
          v24 = (*(unsigned __int16 *)(v18 + v20 + 2) + *(unsigned __int16 *)(v18 + v20 + 6) + 1) >> 1;
          v25 = *v23;
          LOWORD(v23) = v23[1];
          *v22 = (*(unsigned __int16 *)(v18 + v20) + *(unsigned __int16 *)(v18 + v20 + 4) + 1) >> 1;
          v22[1] = v25;
          v22[2] = v24;
          v22[3] = (_WORD)v23;
          v20 += 8;
        }
      }
      v19 += v14;
      v16 += v13;
      v18 += v15;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_sv44_v216(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t i;
  _WORD *v22;
  __int16 *v23;
  __int16 v24;
  __int16 v25;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a8;
    v14 = *a4;
    v15 = a4[1];
    v16 = *a7 + *a8 * *(_QWORD *)(a6 + 40) + 2 * v10;
    v17 = *(_QWORD *)(a2 + 40);
    v18 = a3[1] + v15 * v17 + 4 * v9;
    v19 = *a3 + *a4 * v17 + 2 * v9;
    do
    {
      if (v11)
      {
        v20 = 0;
        for (i = 0; i < v11; i += 2)
        {
          v22 = (_WORD *)(v16 + v20);
          v23 = (__int16 *)(v19 + 2 * i);
          v24 = *(_WORD *)(v18 + v20 + 2);
          v25 = *v23;
          LOWORD(v23) = v23[1];
          *v22 = *(_WORD *)(v18 + v20);
          v22[1] = v25;
          v22[2] = v24;
          v22[3] = (_WORD)v23;
          v20 += 8;
        }
      }
      v19 += v14;
      v16 += v13;
      v18 += v15;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_sv44_2vuy(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  unsigned int v24;
  char v25;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a8;
    v14 = *a4;
    v15 = a4[1];
    v16 = (_BYTE *)(*a7 + *a8 * *(_QWORD *)(a6 + 40) + v10);
    v17 = *(_QWORD *)(a2 + 40);
    v18 = a3[1] + v15 * v17 + 4 * v9;
    v19 = *a3 + *a4 * v17 + 2 * v9;
    do
    {
      if (v11)
      {
        v20 = 0;
        v21 = 0;
        v22 = v16;
        do
        {
          v23 = v19 + 2 * v21;
          v24 = (*(unsigned __int8 *)(v18 + v20 + 3) + *(unsigned __int8 *)(v18 + v20 + 7) + 1) >> 1;
          v25 = *(_BYTE *)(v23 + 1);
          LOBYTE(v23) = *(_BYTE *)(v23 + 3);
          *v22 = (*(unsigned __int8 *)(v18 + v20 + 1) + *(unsigned __int8 *)(v18 + v20 + 5) + 1) >> 1;
          v22[1] = v25;
          v22[2] = v24;
          v22[3] = v23;
          v22 += 4;
          v21 += 2;
          v20 += 8;
        }
        while (v21 < v11);
      }
      v19 += v14;
      v16 += v13;
      v18 += v15;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_sv44_2vuy(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  char v24;
  char v25;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a8;
    v14 = *a4;
    v15 = a4[1];
    v16 = (_BYTE *)(*a7 + *a8 * *(_QWORD *)(a6 + 40) + v10);
    v17 = *(_QWORD *)(a2 + 40);
    v18 = a3[1] + v15 * v17 + 4 * v9;
    v19 = *a3 + *a4 * v17 + 2 * v9;
    do
    {
      if (v11)
      {
        v20 = 0;
        v21 = 0;
        v22 = v16;
        do
        {
          v23 = v19 + 2 * v21;
          v24 = *(_BYTE *)(v18 + v20 + 3);
          v25 = *(_BYTE *)(v23 + 1);
          LOBYTE(v23) = *(_BYTE *)(v23 + 3);
          *v22 = *(_BYTE *)(v18 + v20 + 1);
          v22[1] = v25;
          v22[2] = v24;
          v22[3] = v23;
          v22 += 4;
          v21 += 2;
          v20 += 8;
        }
        while (v21 < v11);
      }
      v19 += v14;
      v16 += v13;
      v18 += v15;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_Copy_sv44_sf44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned __int16 *v32;
  _WORD *v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unint64_t v43;
  uint64_t v44;
  unsigned __int16 *v45;
  _WORD *v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unint64_t v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a2[3];
  v12 = a4[1];
  v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 4 * v9);
  v14 = a6[4];
  v15 = a6[5];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (v11 >= a6[3])
    v18 = a6[3];
  else
    v18 = v11;
  if (v18)
  {
    v19 = 0;
    v20 = *a4;
    v21 = *a8;
    v22 = *a7 + *a8 * v15 + 2 * v14;
    v23 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
        {
          v25 = *(unsigned __int16 *)(v23 + 2 * i);
          if (v25 >= 0xEB00)
            v25 = 60160;
          if (v25 <= 0x1000)
            v25 = 4096;
          *(_WORD *)(v22 + 2 * i) = (-268431360 - v25 + (v25 << 16)) / 0xDB00;
        }
      }
      v23 += v20;
      v22 += v21;
      ++v19;
    }
    while (v19 != v18);
  }
  v26 = v8 & 1;
  if (v18 >= v26)
    v27 = v8 & 1;
  else
    v27 = 0;
  v28 = v9;
  v29 = v9 & 1;
  if (v10 >= v29)
    v30 = v29;
  else
    v30 = 0;
  v31 = v10 - v30;
  if ((v8 & 1) != 0)
  {
    if ((v28 & 1) != 0)
    {
      v34 = *v13;
      v35 = v13[1];
      if (v34 >= 0xF000)
        v34 = 61440;
      if (v34 <= 0x1000)
        v34 = 4096;
      if (v35 >= 0xF000)
        v35 = 61440;
      if (v35 <= 0x1000)
        v36 = 4096;
      else
        v36 = v35;
      v32 = v13 + 2;
      *v17 = (613566757 * (unint64_t)((-268431360 - v34 + (v34 << 16)) >> 13)) >> 32;
      v17[1] = (613566757 * (unint64_t)((-268431360 - v36 + (v36 << 16)) >> 13)) >> 32;
      v33 = v17 + 2;
    }
    else
    {
      v32 = v13;
      v33 = v17;
    }
    if (v10 == v30)
    {
      v37 = 0;
    }
    else
    {
      v38 = v10 - v30;
      do
      {
        v39 = *v32;
        v40 = v32[1];
        if (v39 >= 0xF000)
          v39 = 61440;
        if (v39 <= 0x1000)
          v39 = 4096;
        if (v40 >= 0xF000)
          v40 = 61440;
        if (v40 <= 0x1000)
          v40 = 4096;
        v32 += 2;
        *v33 = (613566757 * (unint64_t)((-268431360 - v39 + (v39 << 16)) >> 13)) >> 32;
        v33[1] = (613566757 * (unint64_t)((-268431360 - v40 + (v40 << 16)) >> 13)) >> 32;
        v33 += 2;
        --v38;
      }
      while (v38);
      v37 = v10 - v30;
    }
    if (v37 + v29 < v10)
    {
      v41 = *v32;
      v42 = v32[1];
      if (v41 >= 0xF000)
        v41 = 61440;
      if (v41 <= 0x1000)
        v41 = 4096;
      if (v42 >= 0xF000)
        v42 = 61440;
      if (v42 <= 0x1000)
        v42 = 4096;
      *v33 = (613566757 * (unint64_t)((-268431360 - v41 + (v41 << 16)) >> 13)) >> 32;
      v33[1] = (613566757 * (unint64_t)((-268431360 - v42 + (v42 << 16)) >> 13)) >> 32;
    }
    v13 = (unsigned __int16 *)((char *)v13 + v12);
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v18 == v27)
  {
    v43 = 0;
  }
  else
  {
    v44 = 0;
    v43 = v18 - v27;
    do
    {
      v45 = v13;
      v46 = v17;
      if ((v28 & 1) != 0)
      {
        v47 = *v13;
        v48 = v13[1];
        if (v47 >= 0xF000)
          v47 = 61440;
        if (v47 <= 0x1000)
          v47 = 4096;
        if (v48 >= 0xF000)
          v48 = 61440;
        if (v48 <= 0x1000)
          v49 = 4096;
        else
          v49 = v48;
        v45 = v13 + 2;
        *v17 = (613566757 * (unint64_t)((-268431360 - v47 + (v47 << 16)) >> 13)) >> 32;
        v17[1] = (613566757 * (unint64_t)((-268431360 - v49 + (v49 << 16)) >> 13)) >> 32;
        v46 = v17 + 2;
      }
      if (v10 == v30)
      {
        v50 = 0;
      }
      else
      {
        v51 = v10 - v30;
        do
        {
          v52 = *v45;
          v53 = v45[1];
          if (v52 >= 0xF000)
            v52 = 61440;
          if (v52 <= 0x1000)
            v52 = 4096;
          if (v53 >= 0xF000)
            v53 = 61440;
          if (v53 <= 0x1000)
            v53 = 4096;
          v45 += 2;
          *v46 = (613566757 * (unint64_t)((-268431360 - v52 + (v52 << 16)) >> 13)) >> 32;
          v46[1] = (613566757 * (unint64_t)((-268431360 - v53 + (v53 << 16)) >> 13)) >> 32;
          v46 += 2;
          --v51;
        }
        while (v51);
        v50 = v10 - v30;
      }
      if (v50 + v29 < v10)
      {
        v54 = *v45;
        v55 = v45[1];
        if (v54 >= 0xF000)
          v54 = 61440;
        if (v54 <= 0x1000)
          v54 = 4096;
        if (v55 >= 0xF000)
          v55 = 61440;
        if (v55 <= 0x1000)
          v55 = 4096;
        *v46 = (613566757 * (unint64_t)((-268431360 - v54 + (v54 << 16)) >> 13)) >> 32;
        v46[1] = (613566757 * (unint64_t)((-268431360 - v55 + (v55 << 16)) >> 13)) >> 32;
      }
      v13 = (unsigned __int16 *)((char *)v13 + v12);
      v17 = (_WORD *)((char *)v17 + v16);
      ++v44;
    }
    while (v44 != v43);
  }
  if (v43 + v26 < v18)
  {
    if ((v28 & 1) != 0)
    {
      v56 = *v13;
      v57 = v13[1];
      if (v56 >= 0xF000)
        v56 = 61440;
      if (v56 <= 0x1000)
        v56 = 4096;
      if (v57 >= 0xF000)
        v57 = 61440;
      if (v57 <= 0x1000)
        v57 = 4096;
      v13 += 2;
      *v17 = (613566757 * (unint64_t)((-268431360 - v56 + (v56 << 16)) >> 13)) >> 32;
      v17[1] = (613566757 * (unint64_t)((-268431360 - v57 + (v57 << 16)) >> 13)) >> 32;
      v17 += 2;
    }
    if (v10 == v30)
    {
      v31 = 0;
    }
    else
    {
      v58 = v10 - v30;
      do
      {
        v59 = *v13;
        v60 = v13[1];
        if (v59 >= 0xF000)
          v59 = 61440;
        if (v59 <= 0x1000)
          v59 = 4096;
        if (v60 >= 0xF000)
          v60 = 61440;
        if (v60 <= 0x1000)
          v60 = 4096;
        v13 += 2;
        *v17 = (613566757 * (unint64_t)((-268431360 - v59 + (v59 << 16)) >> 13)) >> 32;
        v17[1] = (613566757 * (unint64_t)((-268431360 - v60 + (v60 << 16)) >> 13)) >> 32;
        v17 += 2;
        --v58;
      }
      while (v58);
    }
    if (v31 + v29 < v10)
    {
      v61 = *v13;
      v62 = v13[1];
      if (v61 >= 0xF000)
        v61 = 61440;
      if (v61 <= 0x1000)
        v61 = 4096;
      if (v62 >= 0xF000)
        v62 = 61440;
      if (v62 <= 0x1000)
        v62 = 4096;
      *v17 = (613566757 * (unint64_t)((-268431360 - v61 + (v61 << 16)) >> 13)) >> 32;
      v17[1] = (613566757 * (unint64_t)((-268431360 - v62 + (v62 << 16)) >> 13)) >> 32;
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_s4as_s2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _WORD *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  size_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  unsigned __int16 *v35;
  _WORD *v36;
  unsigned int v37;
  unint64_t v38;
  _WORD *v39;
  unsigned int v40;
  unint64_t v41;
  uint64_t v42;
  unsigned __int16 *v43;
  _WORD *v44;
  unsigned int v45;
  unint64_t v46;
  _WORD *v47;
  unsigned int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  unint64_t v53;
  _WORD *v54;
  unsigned int v55;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = v9 + v8;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = a4[1];
  v13 = (unsigned __int16 *)(a3[1] + v12 * v11 + 4 * (v9 + v8));
  v14 = *(_QWORD *)(a6 + 24);
  v15 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v16 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v17 = *(_QWORD *)(a6 + 40);
  v18 = 2 * v15;
  v19 = a8[1];
  v20 = (_WORD *)(a7[1] + v19 * v17 + ((2 * v15) & 0x7FFFFFFFFFFFFFFELL));
  v21 = v16 - v15;
  if (((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v9 + v8) >= v21)
    v22 = v21;
  else
    v22 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - v10;
  if (*(_QWORD *)(a2 + 24) >= v14)
    v23 = v14;
  else
    v23 = *(_QWORD *)(a2 + 24);
  if (v23)
  {
    v58 = a8[1];
    v60 = a4[1];
    v62 = a8[2];
    v63 = *a8;
    v24 = (char *)(a7[2] + v62 * v17 + v18);
    v25 = (char *)(*a7 + *a8 * v17 + v18);
    v26 = a4[2];
    v27 = (char *)(a3[2] + v26 * v11 + 2 * v10);
    v28 = *a4;
    v29 = (char *)(*a3 + *a4 * v11 + 2 * v10);
    v61 = v22;
    v30 = 2 * v22;
    v59 = v23;
    do
    {
      memcpy(v25, v29, v30);
      memcpy(v24, v27, v30);
      v29 += v28;
      v25 += v63;
      v27 += v26;
      v24 += v62;
      --v23;
    }
    while (v23);
    v19 = v58;
    v8 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40);
    v9 = v8 & 1;
    v12 = v60;
    v22 = v61;
    v23 = v59;
  }
  v31 = v11 & 1;
  if (v23 >= v31)
    v32 = v11 & 1;
  else
    v32 = 0;
  v33 = v8;
  if (v22 < v9)
    v9 = 0;
  v34 = v22 - v9;
  if ((v11 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v35 = v13 + 4;
      v37 = (v13[1] + v13[3] + 1) >> 1;
      *v20 = (*v13 + v13[2] + 1) >> 1;
      v20[1] = v37;
      v36 = v20 + 2;
    }
    else
    {
      v35 = v13;
      v36 = v20;
    }
    if (v22 != v9)
    {
      v38 = 0;
      do
      {
        v39 = &v36[v38];
        v40 = (v35[1] + v35[3] + 1) >> 1;
        *v39 = (*v35 + v35[2] + 1) >> 1;
        v39[1] = v40;
        v38 += 2;
        v35 += 4;
      }
      while (v38 < v34);
    }
    v13 = (unsigned __int16 *)((char *)v13 + v12);
    v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v23 == v32)
  {
    v41 = 0;
  }
  else
  {
    v42 = 0;
    v41 = v23 - v32;
    do
    {
      v43 = v13;
      v44 = v20;
      if ((v33 & 1) != 0)
      {
        v43 = v13 + 4;
        v45 = (v13[1] + v13[3] + 1) >> 1;
        *v20 = (*v13 + v13[2] + 1) >> 1;
        v20[1] = v45;
        v44 = v20 + 2;
      }
      if (v22 != v9)
      {
        v46 = 0;
        do
        {
          v47 = &v44[v46];
          v48 = (v43[1] + v43[3] + 1) >> 1;
          *v47 = (*v43 + v43[2] + 1) >> 1;
          v47[1] = v48;
          v46 += 2;
          v43 += 4;
        }
        while (v46 < v34);
      }
      v13 = (unsigned __int16 *)((char *)v13 + v12);
      v20 = (_WORD *)((char *)v20 + v19);
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v31 < v23)
  {
    if ((v33 & 1) != 0)
    {
      v49 = *v13;
      v50 = v13[1];
      v51 = v13[2];
      v52 = v13[3];
      v13 += 4;
      *v20 = (v49 + v51 + 1) >> 1;
      v20[1] = (v50 + v52 + 1) >> 1;
      v20 += 2;
    }
    if (v22 != v9)
    {
      v53 = 0;
      do
      {
        v54 = &v20[v53];
        v55 = (v13[1] + v13[3] + 1) >> 1;
        *v54 = (*v13 + v13[2] + 1) >> 1;
        v54[1] = v55;
        v53 += 2;
        v13 += 4;
      }
      while (v53 < v34);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_s4as_s2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  size_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  int *v35;
  int *v36;
  unint64_t v37;
  int v38;
  unint64_t v39;
  uint64_t v40;
  int *v41;
  int *v42;
  unint64_t v43;
  int v44;
  int v45;
  unint64_t v46;
  int v47;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = v9 + v8;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = a4[1];
  v13 = (int *)(a3[1] + v12 * v11 + 4 * (v9 + v8));
  v14 = *(_QWORD *)(a6 + 24);
  v15 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v16 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v17 = *(_QWORD *)(a6 + 40);
  v18 = 2 * v15;
  v19 = a8[1];
  v20 = (int *)(a7[1] + v19 * v17 + ((2 * v15) & 0x7FFFFFFFFFFFFFFELL));
  v21 = v16 - v15;
  if (((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v9 + v8) >= v21)
    v22 = v21;
  else
    v22 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - v10;
  if (*(_QWORD *)(a2 + 24) >= v14)
    v23 = v14;
  else
    v23 = *(_QWORD *)(a2 + 24);
  if (v23)
  {
    v50 = a8[1];
    v52 = a4[1];
    v54 = a8[2];
    v55 = *a8;
    v24 = (char *)(a7[2] + v54 * v17 + v18);
    v25 = (char *)(*a7 + *a8 * v17 + v18);
    v26 = a4[2];
    v27 = (char *)(a3[2] + v26 * v11 + 2 * v10);
    v28 = *a4;
    v29 = (char *)(*a3 + *a4 * v11 + 2 * v10);
    v53 = v22;
    v30 = 2 * v22;
    v51 = v23;
    do
    {
      memcpy(v25, v29, v30);
      memcpy(v24, v27, v30);
      v29 += v28;
      v25 += v55;
      v27 += v26;
      v24 += v54;
      --v23;
    }
    while (v23);
    v19 = v50;
    v8 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40);
    v9 = v8 & 1;
    v12 = v52;
    v22 = v53;
    v23 = v51;
  }
  v31 = v11 & 1;
  if (v23 >= v31)
    v32 = v11 & 1;
  else
    v32 = 0;
  v33 = v8;
  if (v22 < v9)
    v9 = 0;
  v34 = v22 - v9;
  if ((v11 & 1) != 0)
  {
    v35 = v13;
    if ((v33 & 1) != 0)
    {
      v35 = v13 + 2;
      *v20 = *v13;
      v36 = v20 + 1;
    }
    else
    {
      v36 = v20;
    }
    if (v22 != v9)
    {
      v37 = 0;
      do
      {
        v38 = *v35;
        v35 += 2;
        v36[v37 / 2] = v38;
        v37 += 2;
      }
      while (v37 < v34);
    }
    v13 = (int *)((char *)v13 + v12);
    v20 = (int *)((char *)v20 + v19);
  }
  if (v23 == v32)
  {
    v39 = 0;
  }
  else
  {
    v40 = 0;
    v39 = v23 - v32;
    do
    {
      v41 = v13;
      v42 = v20;
      if ((v33 & 1) != 0)
      {
        v41 = v13 + 2;
        *v20 = *v13;
        v42 = v20 + 1;
      }
      if (v22 != v9)
      {
        v43 = 0;
        do
        {
          v44 = *v41;
          v41 += 2;
          v42[v43 / 2] = v44;
          v43 += 2;
        }
        while (v43 < v34);
      }
      v13 = (int *)((char *)v13 + v12);
      v20 = (int *)((char *)v20 + v19);
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v31 < v23)
  {
    if ((v33 & 1) != 0)
    {
      v45 = *v13;
      v13 += 2;
      *v20++ = v45;
    }
    if (v22 != v9)
    {
      v46 = 0;
      do
      {
        v47 = *v13;
        v13 += 2;
        v20[v46 / 2] = v47;
        v46 += 2;
      }
      while (v46 < v34);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sv44_sv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _WORD *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  unsigned __int16 *v30;
  _WORD *v31;
  unsigned int v32;
  unint64_t v33;
  _WORD *v34;
  unsigned int v35;
  unint64_t v36;
  uint64_t v37;
  unsigned __int16 *v38;
  _WORD *v39;
  unsigned int v40;
  unint64_t v41;
  _WORD *v42;
  unsigned int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  unint64_t v48;
  _WORD *v49;
  unsigned int v50;
  unint64_t v53;
  uint64_t v54;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = v9 + v8;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = a4[1];
  v13 = (unsigned __int16 *)(a3[1] + v12 * v11 + 4 * (v9 + v8));
  v14 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v15 = *(_QWORD *)(a6 + 40);
  v16 = 2 * v14;
  v17 = a8[1];
  v18 = (_WORD *)(a7[1] + v17 * v15 + ((2 * v14) & 0x7FFFFFFFFFFFFFFELL));
  v19 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v14;
  if (((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v9 + v8) >= v19)
    v20 = v19;
  else
    v20 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - v10;
  if (*(_QWORD *)(a2 + 24) >= *(_QWORD *)(a6 + 24))
    v21 = *(_QWORD *)(a6 + 24);
  else
    v21 = *(_QWORD *)(a2 + 24);
  if (v21)
  {
    v53 = v21;
    v54 = a4[1];
    v22 = *a4;
    v23 = *a8;
    v24 = (char *)(*a7 + *a8 * v15 + v16);
    v25 = (char *)(*a3 + *a4 * v11 + 2 * v10);
    do
    {
      memcpy(v24, v25, 2 * v20);
      v25 += v22;
      v24 += v23;
      --v21;
    }
    while (v21);
    v21 = v53;
    v8 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40);
    v9 = v8 & 1;
    v12 = v54;
  }
  v26 = v11 & 1;
  if (v21 >= v26)
    v27 = v11 & 1;
  else
    v27 = 0;
  v28 = v8;
  if (v20 < v9)
    v9 = 0;
  v29 = v20 - v9;
  if ((v11 & 1) != 0)
  {
    if ((v28 & 1) != 0)
    {
      v30 = v13 + 4;
      v32 = (v13[1] + v13[3] + 1) >> 1;
      *v18 = (*v13 + v13[2] + 1) >> 1;
      v18[1] = v32;
      v31 = v18 + 2;
    }
    else
    {
      v30 = v13;
      v31 = v18;
    }
    if (v20 != v9)
    {
      v33 = 0;
      do
      {
        v34 = &v31[v33];
        v35 = (v30[1] + v30[3] + 1) >> 1;
        *v34 = (*v30 + v30[2] + 1) >> 1;
        v34[1] = v35;
        v33 += 2;
        v30 += 4;
      }
      while (v33 < v29);
    }
    v13 = (unsigned __int16 *)((char *)v13 + v12);
    v18 = (_WORD *)((char *)v18 + v17);
  }
  if (v21 == v27)
  {
    v36 = 0;
  }
  else
  {
    v37 = 0;
    v36 = v21 - v27;
    do
    {
      v38 = v13;
      v39 = v18;
      if ((v28 & 1) != 0)
      {
        v38 = v13 + 4;
        v40 = (v13[1] + v13[3] + 1) >> 1;
        *v18 = (*v13 + v13[2] + 1) >> 1;
        v18[1] = v40;
        v39 = v18 + 2;
      }
      if (v20 != v9)
      {
        v41 = 0;
        do
        {
          v42 = &v39[v41];
          v43 = (v38[1] + v38[3] + 1) >> 1;
          *v42 = (*v38 + v38[2] + 1) >> 1;
          v42[1] = v43;
          v41 += 2;
          v38 += 4;
        }
        while (v41 < v29);
      }
      v13 = (unsigned __int16 *)((char *)v13 + v12);
      v18 = (_WORD *)((char *)v18 + v17);
      ++v37;
    }
    while (v37 != v36);
  }
  if (v36 + v26 < v21)
  {
    if ((v28 & 1) != 0)
    {
      v44 = *v13;
      v45 = v13[1];
      v46 = v13[2];
      v47 = v13[3];
      v13 += 4;
      *v18 = (v44 + v46 + 1) >> 1;
      v18[1] = (v45 + v47 + 1) >> 1;
      v18 += 2;
    }
    if (v20 != v9)
    {
      v48 = 0;
      do
      {
        v49 = &v18[v48];
        v50 = (v13[1] + v13[3] + 1) >> 1;
        *v49 = (*v13 + v13[2] + 1) >> 1;
        v49[1] = v50;
        v48 += 2;
        v13 += 4;
      }
      while (v48 < v29);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_sv44_sv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  int *v30;
  int *v31;
  unint64_t v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  int *v36;
  int *v37;
  unint64_t v38;
  int v39;
  int v40;
  unint64_t v41;
  int v42;
  unint64_t v45;
  uint64_t v46;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = v9 + v8;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = a4[1];
  v13 = (int *)(a3[1] + v12 * v11 + 4 * (v9 + v8));
  v14 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v15 = *(_QWORD *)(a6 + 40);
  v16 = 2 * v14;
  v17 = a8[1];
  v18 = (int *)(a7[1] + v17 * v15 + ((2 * v14) & 0x7FFFFFFFFFFFFFFELL));
  v19 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v14;
  if (((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v9 + v8) >= v19)
    v20 = v19;
  else
    v20 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - v10;
  if (*(_QWORD *)(a2 + 24) >= *(_QWORD *)(a6 + 24))
    v21 = *(_QWORD *)(a6 + 24);
  else
    v21 = *(_QWORD *)(a2 + 24);
  if (v21)
  {
    v45 = v21;
    v46 = a4[1];
    v22 = *a4;
    v23 = *a8;
    v24 = (char *)(*a7 + *a8 * v15 + v16);
    v25 = (char *)(*a3 + *a4 * v11 + 2 * v10);
    do
    {
      memcpy(v24, v25, 2 * v20);
      v25 += v22;
      v24 += v23;
      --v21;
    }
    while (v21);
    v21 = v45;
    v8 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40);
    v9 = v8 & 1;
    v12 = v46;
  }
  v26 = v11 & 1;
  if (v21 >= v26)
    v27 = v11 & 1;
  else
    v27 = 0;
  v28 = v8;
  if (v20 < v9)
    v9 = 0;
  v29 = v20 - v9;
  if ((v11 & 1) != 0)
  {
    v30 = v13;
    if ((v28 & 1) != 0)
    {
      v30 = v13 + 2;
      *v18 = *v13;
      v31 = v18 + 1;
    }
    else
    {
      v31 = v18;
    }
    if (v20 != v9)
    {
      v32 = 0;
      do
      {
        v33 = *v30;
        v30 += 2;
        v31[v32 / 2] = v33;
        v32 += 2;
      }
      while (v32 < v29);
    }
    v13 = (int *)((char *)v13 + v12);
    v18 = (int *)((char *)v18 + v17);
  }
  if (v21 == v27)
  {
    v34 = 0;
  }
  else
  {
    v35 = 0;
    v34 = v21 - v27;
    do
    {
      v36 = v13;
      v37 = v18;
      if ((v28 & 1) != 0)
      {
        v36 = v13 + 2;
        *v18 = *v13;
        v37 = v18 + 1;
      }
      if (v20 != v9)
      {
        v38 = 0;
        do
        {
          v39 = *v36;
          v36 += 2;
          v37[v38 / 2] = v39;
          v38 += 2;
        }
        while (v38 < v29);
      }
      v13 = (int *)((char *)v13 + v12);
      v18 = (int *)((char *)v18 + v17);
      ++v35;
    }
    while (v35 != v34);
  }
  if (v34 + v26 < v21)
  {
    if ((v28 & 1) != 0)
    {
      v40 = *v13;
      v13 += 2;
      *v18++ = v40;
    }
    if (v20 != v9)
    {
      v41 = 0;
      do
      {
        v42 = *v13;
        v13 += 2;
        v18[v41 / 2] = v42;
        v41 += 2;
      }
      while (v41 < v29);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sv44_sf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unsigned int v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  unsigned __int16 *v35;
  _WORD *v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  int v44;
  unint64_t v45;
  _WORD *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unint64_t v51;
  uint64_t v52;
  unsigned __int16 *v53;
  _WORD *v54;
  unsigned int v55;
  int v56;
  unsigned int v57;
  int v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  int v62;
  unint64_t v63;
  _WORD *v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unint64_t v73;
  _WORD *v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = *a7 + *a8 * v18 + v19;
    v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          v30 = *(unsigned __int16 *)(v28 + 2 * i);
          if (v30 >= 0xEB00)
            v30 = 60160;
          if (v30 <= 0x1000)
            v30 = 4096;
          *(_WORD *)(v27 + 2 * i) = (-268431360 - v30 + (v30 << 16)) / 0xDB00;
        }
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  v31 = v12 & 1;
  if (v9 >= v31)
    v32 = v12 & 1;
  else
    v32 = 0;
  v33 = v8;
  if (v22 < v10)
    v10 = 0;
  v34 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v37 = *v14;
      if (v37 >= 0xF000)
        v37 = 61440;
      if (v37 <= 0x1000)
        v38 = 4096;
      else
        v38 = v37;
      if (v14[1] >= 0xF000u)
        v39 = 61440;
      else
        v39 = v14[1];
      if (v39 <= 0x1000)
        v40 = 4096;
      else
        v40 = v39;
      v41 = v14[2];
      if (v41 >= 0xF000)
        v41 = 61440;
      if (v41 <= 0x1000)
        v42 = 4096;
      else
        v42 = v41;
      if (v14[3] >= 0xF000u)
        v43 = 61440;
      else
        v43 = v14[3];
      if (v43 <= 0x1000)
        v44 = 4096;
      else
        v44 = v43;
      v35 = v14 + 4;
      *v21 = (((613566757 * (unint64_t)((-268431360 - v38 + (v38 << 16)) >> 13)) >> 32)
                          + ((613566757 * (unint64_t)((-268431360 - v42 + (v42 << 16)) >> 13)) >> 32)
                          + 1) >> 1;
      v21[1] = (((613566757 * (unint64_t)((-268431360 - v40 + (v40 << 16)) >> 13)) >> 32)
                            + ((613566757 * (unint64_t)((-268431360 - v44 + (v44 << 16)) >> 13)) >> 32)
                            + 1) >> 1;
      v36 = v21 + 2;
    }
    else
    {
      v35 = v14;
      v36 = v21;
    }
    if (v22 != v10)
    {
      v45 = 0;
      do
      {
        v46 = &v36[v45];
        v47 = *v35;
        v48 = v35[1];
        if (v47 >= 0xF000)
          v47 = 61440;
        if (v47 <= 0x1000)
          v47 = 4096;
        if (v48 >= 0xF000)
          v48 = 61440;
        if (v48 <= 0x1000)
          v48 = 4096;
        v49 = v35[2];
        v50 = v35[3];
        if (v49 >= 0xF000)
          v49 = 61440;
        if (v49 <= 0x1000)
          v49 = 4096;
        if (v50 >= 0xF000)
          v50 = 61440;
        if (v50 <= 0x1000)
          v50 = 4096;
        *v46 = (((613566757 * (unint64_t)((-268431360 - v47 + (v47 << 16)) >> 13)) >> 32)
                            + ((613566757 * (unint64_t)((-268431360 - v49 + (v49 << 16)) >> 13)) >> 32)
                            + 1) >> 1;
        v46[1] = (((613566757 * (unint64_t)((-268431360 - v48 + (v48 << 16)) >> 13)) >> 32)
                              + ((613566757 * (unint64_t)((-268431360 - v50 + (v50 << 16)) >> 13)) >> 32)
                              + 1) >> 1;
        v45 += 2;
        v35 += 4;
      }
      while (v45 < v34);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v32)
  {
    v51 = 0;
  }
  else
  {
    v52 = 0;
    v51 = v9 - v32;
    do
    {
      v53 = v14;
      v54 = v21;
      if ((v33 & 1) != 0)
      {
        v55 = *v14;
        if (v55 >= 0xF000)
          v55 = 61440;
        if (v55 <= 0x1000)
          v56 = 4096;
        else
          v56 = v55;
        if (v14[1] >= 0xF000u)
          v57 = 61440;
        else
          v57 = v14[1];
        if (v57 <= 0x1000)
          v58 = 4096;
        else
          v58 = v57;
        v59 = v14[2];
        if (v59 >= 0xF000)
          v59 = 61440;
        if (v59 <= 0x1000)
          v60 = 4096;
        else
          v60 = v59;
        if (v14[3] >= 0xF000u)
          v61 = 61440;
        else
          v61 = v14[3];
        if (v61 <= 0x1000)
          v62 = 4096;
        else
          v62 = v61;
        v53 = v14 + 4;
        *v21 = (((613566757 * (unint64_t)((-268431360 - v56 + (v56 << 16)) >> 13)) >> 32)
                            + ((613566757 * (unint64_t)((-268431360 - v60 + (v60 << 16)) >> 13)) >> 32)
                            + 1) >> 1;
        v21[1] = (((613566757 * (unint64_t)((-268431360 - v58 + (v58 << 16)) >> 13)) >> 32)
                              + ((613566757 * (unint64_t)((-268431360 - v62 + (v62 << 16)) >> 13)) >> 32)
                              + 1) >> 1;
        v54 = v21 + 2;
      }
      if (v22 != v10)
      {
        v63 = 0;
        do
        {
          v64 = &v54[v63];
          v65 = *v53;
          v66 = v53[1];
          if (v65 >= 0xF000)
            v65 = 61440;
          if (v65 <= 0x1000)
            v65 = 4096;
          if (v66 >= 0xF000)
            v66 = 61440;
          if (v66 <= 0x1000)
            v66 = 4096;
          v67 = v53[2];
          v68 = v53[3];
          if (v67 >= 0xF000)
            v67 = 61440;
          if (v67 <= 0x1000)
            v67 = 4096;
          if (v68 >= 0xF000)
            v68 = 61440;
          if (v68 <= 0x1000)
            v68 = 4096;
          *v64 = (((613566757 * (unint64_t)((-268431360 - v65 + (v65 << 16)) >> 13)) >> 32)
                              + ((613566757 * (unint64_t)((-268431360 - v67 + (v67 << 16)) >> 13)) >> 32)
                              + 1) >> 1;
          v64[1] = (((613566757 * (unint64_t)((-268431360 - v66 + (v66 << 16)) >> 13)) >> 32)
                                + ((613566757 * (unint64_t)((-268431360 - v68 + (v68 << 16)) >> 13)) >> 32)
                                + 1) >> 1;
          v63 += 2;
          v53 += 4;
        }
        while (v63 < v34);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v52;
    }
    while (v52 != v51);
  }
  if (v51 + v31 < v9)
  {
    if ((v33 & 1) != 0)
    {
      v69 = *v14;
      v70 = v14[1];
      if (v69 >= 0xF000)
        v69 = 61440;
      if (v69 <= 0x1000)
        v69 = 4096;
      if (v70 >= 0xF000)
        v70 = 61440;
      if (v70 <= 0x1000)
        v70 = 4096;
      v71 = v14[2];
      if (v71 >= 0xF000)
        v71 = 61440;
      if (v71 <= 0x1000)
        v71 = 4096;
      if (v14[3] >= 0xF000u)
        v72 = 61440;
      else
        v72 = v14[3];
      if (v72 <= 0x1000)
        v72 = 4096;
      v14 += 4;
      *v21 = (((613566757 * (unint64_t)((-268431360 - v69 + (v69 << 16)) >> 13)) >> 32)
                          + ((613566757 * (unint64_t)((-268431360 - v71 + (v71 << 16)) >> 13)) >> 32)
                          + 1) >> 1;
      v21[1] = (((613566757 * (unint64_t)((-268431360 - v70 + (v70 << 16)) >> 13)) >> 32)
                            + ((613566757 * (unint64_t)((-268431360 - v72 + (v72 << 16)) >> 13)) >> 32)
                            + 1) >> 1;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v73 = 0;
      do
      {
        v74 = &v21[v73];
        v75 = *v14;
        v76 = v14[1];
        if (v75 >= 0xF000)
          v75 = 61440;
        if (v75 <= 0x1000)
          v75 = 4096;
        if (v76 >= 0xF000)
          v76 = 61440;
        if (v76 <= 0x1000)
          v76 = 4096;
        v77 = v14[2];
        v78 = v14[3];
        if (v77 >= 0xF000)
          v77 = 61440;
        if (v77 <= 0x1000)
          v77 = 4096;
        if (v78 >= 0xF000)
          v78 = 61440;
        if (v78 <= 0x1000)
          v78 = 4096;
        *v74 = (((613566757 * (unint64_t)((-268431360 - v75 + (v75 << 16)) >> 13)) >> 32)
                            + ((613566757 * (unint64_t)((-268431360 - v77 + (v77 << 16)) >> 13)) >> 32)
                            + 1) >> 1;
        v74[1] = (((613566757 * (unint64_t)((-268431360 - v76 + (v76 << 16)) >> 13)) >> 32)
                              + ((613566757 * (unint64_t)((-268431360 - v78 + (v78 << 16)) >> 13)) >> 32)
                              + 1) >> 1;
        v73 += 2;
        v14 += 4;
      }
      while (v73 < v34);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_sv44_sf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unsigned int v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  unsigned __int16 *v35;
  _WORD *v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  int v40;
  unint64_t v41;
  _WORD *v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  unsigned __int16 *v47;
  _WORD *v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  int v52;
  unint64_t v53;
  _WORD *v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unint64_t v59;
  _WORD *v60;
  unsigned int v61;
  unsigned int v62;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = *a7 + *a8 * v18 + v19;
    v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          v30 = *(unsigned __int16 *)(v28 + 2 * i);
          if (v30 >= 0xEB00)
            v30 = 60160;
          if (v30 <= 0x1000)
            v30 = 4096;
          *(_WORD *)(v27 + 2 * i) = (-268431360 - v30 + (v30 << 16)) / 0xDB00;
        }
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  v31 = v12 & 1;
  if (v9 >= v31)
    v32 = v12 & 1;
  else
    v32 = 0;
  v33 = v8;
  if (v22 < v10)
    v10 = 0;
  v34 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v37 = *v14;
      if (v37 >= 0xF000)
        v37 = 61440;
      if (v37 <= 0x1000)
        v38 = 4096;
      else
        v38 = v37;
      if (v14[1] >= 0xF000u)
        v39 = 61440;
      else
        v39 = v14[1];
      if (v39 <= 0x1000)
        v40 = 4096;
      else
        v40 = v39;
      v35 = v14 + 4;
      *v21 = (613566757 * (unint64_t)((-268431360 - v38 + (v38 << 16)) >> 13)) >> 32;
      v21[1] = (613566757 * (unint64_t)((-268431360 - v40 + (v40 << 16)) >> 13)) >> 32;
      v36 = v21 + 2;
    }
    else
    {
      v35 = v14;
      v36 = v21;
    }
    if (v22 != v10)
    {
      v41 = 0;
      do
      {
        v42 = &v36[v41];
        v43 = *v35;
        v44 = v35[1];
        if (v43 >= 0xF000)
          v43 = 61440;
        if (v43 <= 0x1000)
          v43 = 4096;
        if (v44 >= 0xF000)
          v44 = 61440;
        if (v44 <= 0x1000)
          v44 = 4096;
        *v42 = (613566757 * (unint64_t)((-268431360 - v43 + (v43 << 16)) >> 13)) >> 32;
        v42[1] = (613566757 * (unint64_t)((-268431360 - v44 + (v44 << 16)) >> 13)) >> 32;
        v41 += 2;
        v35 += 4;
      }
      while (v41 < v34);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v32)
  {
    v45 = 0;
  }
  else
  {
    v46 = 0;
    v45 = v9 - v32;
    do
    {
      v47 = v14;
      v48 = v21;
      if ((v33 & 1) != 0)
      {
        v49 = *v14;
        if (v49 >= 0xF000)
          v49 = 61440;
        if (v49 <= 0x1000)
          v50 = 4096;
        else
          v50 = v49;
        if (v14[1] >= 0xF000u)
          v51 = 61440;
        else
          v51 = v14[1];
        if (v51 <= 0x1000)
          v52 = 4096;
        else
          v52 = v51;
        v47 = v14 + 4;
        *v21 = (613566757 * (unint64_t)((-268431360 - v50 + (v50 << 16)) >> 13)) >> 32;
        v21[1] = (613566757 * (unint64_t)((-268431360 - v52 + (v52 << 16)) >> 13)) >> 32;
        v48 = v21 + 2;
      }
      if (v22 != v10)
      {
        v53 = 0;
        do
        {
          v54 = &v48[v53];
          v55 = *v47;
          v56 = v47[1];
          if (v55 >= 0xF000)
            v55 = 61440;
          if (v55 <= 0x1000)
            v55 = 4096;
          if (v56 >= 0xF000)
            v56 = 61440;
          if (v56 <= 0x1000)
            v56 = 4096;
          *v54 = (613566757 * (unint64_t)((-268431360 - v55 + (v55 << 16)) >> 13)) >> 32;
          v54[1] = (613566757 * (unint64_t)((-268431360 - v56 + (v56 << 16)) >> 13)) >> 32;
          v53 += 2;
          v47 += 4;
        }
        while (v53 < v34);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v46;
    }
    while (v46 != v45);
  }
  if (v45 + v31 < v9)
  {
    if ((v33 & 1) != 0)
    {
      v57 = *v14;
      v58 = v14[1];
      if (v57 >= 0xF000)
        v57 = 61440;
      if (v57 <= 0x1000)
        v57 = 4096;
      if (v58 >= 0xF000)
        v58 = 61440;
      if (v58 <= 0x1000)
        v58 = 4096;
      v14 += 4;
      *v21 = (613566757 * (unint64_t)((-268431360 - v57 + (v57 << 16)) >> 13)) >> 32;
      v21[1] = (613566757 * (unint64_t)((-268431360 - v58 + (v58 << 16)) >> 13)) >> 32;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v59 = 0;
      do
      {
        v60 = &v21[v59];
        v61 = *v14;
        v62 = v14[1];
        if (v61 >= 0xF000)
          v61 = 61440;
        if (v61 <= 0x1000)
          v61 = 4096;
        if (v62 >= 0xF000)
          v62 = 61440;
        if (v62 <= 0x1000)
          v62 = 4096;
        *v60 = (613566757 * (unint64_t)((-268431360 - v61 + (v61 << 16)) >> 13)) >> 32;
        v60[1] = (613566757 * (unint64_t)((-268431360 - v62 + (v62 << 16)) >> 13)) >> 32;
        v59 += 2;
        v14 += 4;
      }
      while (v59 < v34);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sv44_sv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v33;
  unint64_t v34;
  unsigned __int16 *v35;
  _WORD *v36;
  unsigned __int16 *v37;
  int v38;
  int v39;
  unsigned int v40;
  unint64_t v41;
  unsigned __int16 *v42;
  _WORD *v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  unsigned __int16 *v47;
  _WORD *v48;
  unsigned __int16 *v49;
  int v50;
  int v51;
  unsigned int v52;
  unint64_t v53;
  unsigned __int16 *v54;
  _WORD *v55;
  unsigned int v56;
  unint64_t v59;
  uint64_t v60;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * (v12 + v9) + 4 * (v10 + v8));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = 2 * v17;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v23 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v17;
  if (((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8) >= v23)
    v24 = v23;
  else
    v24 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - v11;
  if (v14 - v13 >= v19 - v18)
    v25 = v19 - v18;
  else
    v25 = v14 - v13;
  if (v25)
  {
    v59 = v25;
    v60 = a8[1];
    v26 = *a4;
    v27 = *a8;
    if (v13 >= v9)
      v28 = 0;
    else
      v28 = *a4;
    v29 = (char *)(*a3 + *a4 * v13 + 2 * v11 + v28);
    v30 = (char *)(*a7 + v27 * v18 + v20);
    v31 = -(uint64_t)v25;
    do
    {
      memcpy(v30, v29, 2 * v24);
      v29 += v26;
      v30 += v27;
    }
    while (!__CFADD__(v31++, 1));
    v25 = v59;
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
    v21 = v60;
  }
  if (v25 >= v12)
    v33 = v12;
  else
    v33 = 0;
  if (v24 < v10)
    v10 = 0;
  v34 = v24 - v10;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v37 = (unsigned __int16 *)((char *)v16 + v15 + 4);
      v38 = *v37;
      v39 = v37[1];
      v35 = v16 + 4;
      v40 = (v16[1] + v16[3] + *(unsigned __int16 *)((char *)v16 + v15 + 2) + v39 + 2) >> 2;
      *v22 = (*v16 + v16[2] + *(unsigned __int16 *)((char *)v16 + v15) + v38 + 2) >> 2;
      v22[1] = v40;
      v36 = v22 + 2;
    }
    else
    {
      v35 = v16;
      v36 = v22;
    }
    if (v24 != v10)
    {
      v41 = 0;
      v42 = v35 + 2;
      do
      {
        v43 = &v36[v41];
        v44 = (*(v42 - 1)
             + v42[1]
             + *(unsigned __int16 *)((char *)v42 + v15 - 2)
             + *(unsigned __int16 *)((char *)v42 + v15 + 2)
             + 2) >> 2;
        *v43 = (*(v42 - 2)
              + *v42
              + *(unsigned __int16 *)((char *)v42 + v15 - 4)
              + *(unsigned __int16 *)((char *)v42 + v15)
              + 2) >> 2;
        v43[1] = v44;
        v41 += 2;
        v42 += 4;
      }
      while (v41 < v34);
    }
    v16 += v15;
    v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v25 != v33)
  {
    v45 = 0;
    v46 = v25 - v33;
    do
    {
      v47 = v16;
      v48 = v22;
      if ((v8 & 1) != 0)
      {
        v49 = (unsigned __int16 *)((char *)v16 + v15 + 4);
        v50 = *v49;
        v51 = v49[1];
        v47 = v16 + 4;
        v52 = (v16[1] + v16[3] + *(unsigned __int16 *)((char *)v16 + v15 + 2) + v51 + 2) >> 2;
        *v22 = (*v16 + v16[2] + *(unsigned __int16 *)((char *)v16 + v15) + v50 + 2) >> 2;
        v22[1] = v52;
        v48 = v22 + 2;
      }
      if (v24 != v10)
      {
        v53 = 0;
        v54 = v47 + 2;
        do
        {
          v55 = &v48[v53];
          v56 = (*(v54 - 1)
               + v54[1]
               + *(unsigned __int16 *)((char *)v54 + v15 - 2)
               + *(unsigned __int16 *)((char *)v54 + v15 + 2)
               + 2) >> 2;
          *v55 = (*(v54 - 2)
                + *v54
                + *(unsigned __int16 *)((char *)v54 + v15 - 4)
                + *(unsigned __int16 *)((char *)v54 + v15)
                + 2) >> 2;
          v55[1] = v56;
          v53 += 2;
          v54 += 4;
        }
        while (v53 < v34);
      }
      v16 += v15;
      v22 = (_WORD *)((char *)v22 + v21);
      v45 += 2;
    }
    while (v45 < v46);
  }
  return 0;
}

uint64_t vt_CopyDec_sv44_sv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  int *v34;
  int *v35;
  unint64_t v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  int *v40;
  int *v41;
  unint64_t v42;
  int v43;
  unint64_t v46;
  uint64_t v47;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = a4[1];
  v15 = (int *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v18 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (int *)(a7[1] + ((unint64_t)(v20 * v17) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v16;
  if (((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8) >= v22)
    v23 = v22;
  else
    v23 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - v11;
  v24 = v18 - v17;
  if (((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v13 < v18 - v17)
    v24 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v13;
  if (v24)
  {
    v46 = v24;
    v47 = a4[1];
    v25 = *a4;
    v26 = *a8;
    if (v13 >= v9)
      v27 = 0;
    else
      v27 = *a4;
    v28 = (char *)(*a3 + *a4 * v13 + 2 * v11 + v27);
    v29 = (char *)(*a7 + v26 * v17 + v19);
    v30 = -(uint64_t)v24;
    do
    {
      memcpy(v29, v28, 2 * v23);
      v28 += v25;
      v29 += v26;
    }
    while (!__CFADD__(v30++, 1));
    v24 = v46;
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
    v14 = v47;
  }
  if (v24 >= v12)
    v32 = v12;
  else
    v32 = 0;
  if (v23 < v10)
    v10 = 0;
  v33 = v23 - v10;
  if (v12)
  {
    v34 = v15;
    if ((v8 & 1) != 0)
    {
      v34 = v15 + 2;
      *v21 = *v15;
      v35 = v21 + 1;
    }
    else
    {
      v35 = v21;
    }
    if (v23 != v10)
    {
      v36 = 0;
      do
      {
        v37 = *v34;
        v34 += 2;
        v35[v36 / 2] = v37;
        v36 += 2;
      }
      while (v36 < v33);
    }
    v15 = (int *)((char *)v15 + 2 * v14);
    v21 = (int *)((char *)v21 + v20);
  }
  if (v24 != v32)
  {
    v38 = 0;
    v39 = v24 - v32;
    do
    {
      v40 = v15;
      v41 = v21;
      if ((v8 & 1) != 0)
      {
        v40 = v15 + 2;
        *v21 = *v15;
        v41 = v21 + 1;
      }
      if (v23 != v10)
      {
        v42 = 0;
        do
        {
          v43 = *v40;
          v40 += 2;
          v41[v42 / 2] = v43;
          v42 += 2;
        }
        while (v42 < v33);
      }
      v15 = (int *)((char *)v15 + 2 * v14);
      v21 = (int *)((char *)v21 + v20);
      v38 += 2;
    }
    while (v38 < v39);
  }
  return 0;
}

uint64_t vt_CopyAvg_sv44_sf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  unsigned __int16 *v39;
  _WORD *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned __int16 *v48;
  unsigned int v49;
  unsigned int v50;
  unint64_t v51;
  int v52;
  unint64_t v53;
  unsigned __int16 *v54;
  unsigned int v55;
  unsigned __int16 *v56;
  int v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  int v61;
  unsigned int v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  int v69;
  _WORD *v70;
  unsigned int v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unsigned __int16 *v78;
  _WORD *v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned __int16 *v87;
  unsigned int v88;
  unsigned int v89;
  unint64_t v90;
  int v91;
  unint64_t v92;
  unsigned __int16 *v93;
  unsigned int v94;
  unsigned __int16 *v95;
  int v96;
  unsigned int v97;
  int v98;
  unsigned int v99;
  int v100;
  unsigned int v101;
  int v102;
  unsigned int v103;
  unsigned int v104;
  int v105;
  unsigned int v106;
  unsigned int v107;
  int v108;
  _WORD *v109;
  unsigned int v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * (v12 + v9) + 4 * (v10 + v8));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - (v10 + v8);
  v25 = v18 - v17;
  if (v24 >= v25)
    v24 = v25;
  v26 = v14 - v13;
  v27 = v20 - v19;
  if (v26 < v20 - v19)
    v27 = v26;
  if (v27)
  {
    v28 = 0;
    v29 = *a4;
    v30 = *a3 + *a4 * v13 + 2 * (v10 + v8);
    v31 = *a8;
    if (v13 >= v9)
      v32 = 0;
    else
      v32 = *a4;
    v33 = v30 + v32;
    v34 = *a7 + v31 * v19 + v21;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
        {
          v36 = *(unsigned __int16 *)(v33 + 2 * i);
          if (v36 >= 0xEB00)
            v36 = 60160;
          if (v36 <= 0x1000)
            v36 = 4096;
          *(_WORD *)(v34 + 2 * i) = (-268431360 - v36 + (v36 << 16)) / 0xDB00;
        }
      }
      v33 += v29;
      v34 += v31;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12)
    v37 = v12;
  else
    v37 = 0;
  if (v24 < v10)
    v10 = 0;
  v38 = v24 - v10;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v41 = *v16;
      v42 = v16[1];
      v43 = *(unsigned __int16 *)((char *)v16 + v15);
      v44 = *(unsigned __int16 *)((char *)v16 + v15 + 2);
      if (v41 >= 0xF000)
        v41 = 61440;
      if (v41 <= 0x1000)
        v41 = 4096;
      if (v42 >= 0xF000)
        v42 = 61440;
      if (v42 <= 0x1000)
        v42 = 4096;
      if (v43 >= 0xF000)
        v43 = 61440;
      if (v43 <= 0x1000)
        v43 = 4096;
      if (v44 >= 0xF000)
        v44 = 61440;
      if (v44 <= 0x1000)
        v45 = 4096;
      else
        v45 = v44;
      v46 = v16[2];
      v47 = v16[3];
      v48 = (unsigned __int16 *)((char *)v16 + v15 + 4);
      v49 = *v48;
      v50 = v48[1];
      if (v46 >= 0xF000)
        v46 = 61440;
      if (v46 <= 0x1000)
        v46 = 4096;
      if (v47 >= 0xF000)
        v47 = 61440;
      if (v47 <= 0x1000)
        v47 = 4096;
      if (v49 >= 0xF000)
        v49 = 61440;
      if (v49 <= 0x1000)
        v49 = 4096;
      v51 = (613566757 * (unint64_t)((-268431360 - v41 + (v41 << 16)) >> 13)) >> 32;
      if (v50 >= 0xF000)
        v50 = 61440;
      if (v50 <= 0x1000)
        v52 = 4096;
      else
        v52 = v50;
      v39 = v16 + 4;
      *v23 = (v51
                          + ((613566757 * (unint64_t)((-268431360 - v46 + (v46 << 16)) >> 13)) >> 32)
                          + ((613566757 * (unint64_t)((-268431360 - v43 + (v43 << 16)) >> 13)) >> 32)
                          + ((613566757 * (unint64_t)((-268431360 - v49 + (v49 << 16)) >> 13)) >> 32)
                          + 2) >> 2;
      v23[1] = (((613566757 * (unint64_t)((-268431360 - v42 + (v42 << 16)) >> 13)) >> 32)
                            + ((613566757 * (unint64_t)((-268431360 - v47 + (v47 << 16)) >> 13)) >> 32)
                            + ((613566757 * (unint64_t)((-268431360 - v45 + (v45 << 16)) >> 13)) >> 32)
                            + ((613566757 * (unint64_t)((-268431360 - v52 + (v52 << 16)) >> 13)) >> 32)
                            + 2) >> 2;
      v40 = v23 + 2;
    }
    else
    {
      v39 = v16;
      v40 = v23;
    }
    if (v24 != v10)
    {
      v53 = 0;
      v54 = v39 + 2;
      do
      {
        v55 = *(v54 - 2);
        v56 = (unsigned __int16 *)((char *)v54 + v15);
        if (v55 >= 0xF000)
          v55 = 61440;
        if (v55 <= 0x1000)
          v57 = 4096;
        else
          v57 = v55;
        if (*(v54 - 1) >= 0xF000u)
          v58 = 61440;
        else
          v58 = *(v54 - 1);
        if (v58 <= 0x1000)
          v59 = 4096;
        else
          v59 = v58;
        if (*(unsigned __int16 *)((char *)v54 + v15 - 4) >= 0xF000u)
          v60 = 61440;
        else
          v60 = *(unsigned __int16 *)((char *)v54 + v15 - 4);
        if (v60 <= 0x1000)
          v61 = 4096;
        else
          v61 = v60;
        if (*(v56 - 1) >= 0xF000u)
          v62 = 61440;
        else
          v62 = *(v56 - 1);
        if (v62 <= 0x1000)
          v63 = 4096;
        else
          v63 = v62;
        v64 = *v54;
        v65 = *v56;
        if (v64 >= 0xF000)
          v64 = 61440;
        if (v64 <= 0x1000)
          v66 = 4096;
        else
          v66 = v64;
        if (v54[1] >= 0xF000u)
          v67 = 61440;
        else
          v67 = v54[1];
        v68 = v56[1];
        if (v67 <= 0x1000)
          v69 = 4096;
        else
          v69 = v67;
        if (v65 >= 0xF000)
          v65 = 61440;
        v70 = &v40[v53];
        if (v65 <= 0x1000)
          v65 = 4096;
        v71 = -268431360 - v57 + (v57 << 16);
        if (v68 >= 0xF000)
          v68 = 61440;
        v72 = (613566757 * (unint64_t)(v71 >> 13)) >> 32;
        v73 = (613566757 * (unint64_t)((-268431360 - v59 + (v59 << 16)) >> 13)) >> 32;
        v74 = (613566757 * (unint64_t)((-268431360 - v61 + (v61 << 16)) >> 13)) >> 32;
        v75 = 613566757 * ((-268431360 - v63 + (v63 << 16)) >> 13);
        if (v68 <= 0x1000)
          v68 = 4096;
        *v70 = (v72
                            + ((613566757 * (unint64_t)((-268431360 - v66 + (v66 << 16)) >> 13)) >> 32)
                            + v74
                            + ((613566757 * (unint64_t)((-268431360 - v65 + (v65 << 16)) >> 13)) >> 32)
                            + 2) >> 2;
        v70[1] = (v73
                              + ((613566757 * (unint64_t)((-268431360 - v69 + (v69 << 16)) >> 13)) >> 32)
                              + HIDWORD(v75)
                              + ((613566757 * (unint64_t)((-268431360 - v68 + (v68 << 16)) >> 13)) >> 32)
                              + 2) >> 2;
        v53 += 2;
        v54 += 4;
      }
      while (v53 < v38);
    }
    v16 += v15;
    v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v27 != v37)
  {
    v76 = 0;
    v77 = v27 - v37;
    do
    {
      v78 = v16;
      v79 = v23;
      if ((v8 & 1) != 0)
      {
        v80 = *v16;
        v81 = v16[1];
        v82 = *(unsigned __int16 *)((char *)v16 + v15);
        v83 = *(unsigned __int16 *)((char *)v16 + v15 + 2);
        if (v80 >= 0xF000)
          v80 = 61440;
        if (v80 <= 0x1000)
          v80 = 4096;
        if (v81 >= 0xF000)
          v81 = 61440;
        if (v81 <= 0x1000)
          v81 = 4096;
        if (v82 >= 0xF000)
          v82 = 61440;
        if (v82 <= 0x1000)
          v82 = 4096;
        if (v83 >= 0xF000)
          v83 = 61440;
        if (v83 <= 0x1000)
          v84 = 4096;
        else
          v84 = v83;
        v85 = v16[2];
        v86 = v16[3];
        v87 = (unsigned __int16 *)((char *)v16 + v15 + 4);
        v88 = *v87;
        v89 = v87[1];
        if (v85 >= 0xF000)
          v85 = 61440;
        if (v85 <= 0x1000)
          v85 = 4096;
        if (v86 >= 0xF000)
          v86 = 61440;
        if (v86 <= 0x1000)
          v86 = 4096;
        if (v88 >= 0xF000)
          v88 = 61440;
        if (v88 <= 0x1000)
          v88 = 4096;
        v90 = (613566757 * (unint64_t)((-268431360 - v80 + (v80 << 16)) >> 13)) >> 32;
        if (v89 >= 0xF000)
          v89 = 61440;
        if (v89 <= 0x1000)
          v91 = 4096;
        else
          v91 = v89;
        v78 = v16 + 4;
        *v23 = (v90
                            + ((613566757 * (unint64_t)((-268431360 - v85 + (v85 << 16)) >> 13)) >> 32)
                            + ((613566757 * (unint64_t)((-268431360 - v82 + (v82 << 16)) >> 13)) >> 32)
                            + ((613566757 * (unint64_t)((-268431360 - v88 + (v88 << 16)) >> 13)) >> 32)
                            + 2) >> 2;
        v23[1] = (((613566757 * (unint64_t)((-268431360 - v81 + (v81 << 16)) >> 13)) >> 32)
                              + ((613566757 * (unint64_t)((-268431360 - v86 + (v86 << 16)) >> 13)) >> 32)
                              + ((613566757 * (unint64_t)((-268431360 - v84 + (v84 << 16)) >> 13)) >> 32)
                              + ((613566757 * (unint64_t)((-268431360 - v91 + (v91 << 16)) >> 13)) >> 32)
                              + 2) >> 2;
        v79 = v23 + 2;
      }
      if (v24 != v10)
      {
        v92 = 0;
        v93 = v78 + 2;
        do
        {
          v94 = *(v93 - 2);
          v95 = (unsigned __int16 *)((char *)v93 + v15);
          if (v94 >= 0xF000)
            v94 = 61440;
          if (v94 <= 0x1000)
            v96 = 4096;
          else
            v96 = v94;
          if (*(v93 - 1) >= 0xF000u)
            v97 = 61440;
          else
            v97 = *(v93 - 1);
          if (v97 <= 0x1000)
            v98 = 4096;
          else
            v98 = v97;
          if (*(unsigned __int16 *)((char *)v93 + v15 - 4) >= 0xF000u)
            v99 = 61440;
          else
            v99 = *(unsigned __int16 *)((char *)v93 + v15 - 4);
          if (v99 <= 0x1000)
            v100 = 4096;
          else
            v100 = v99;
          if (*(v95 - 1) >= 0xF000u)
            v101 = 61440;
          else
            v101 = *(v95 - 1);
          if (v101 <= 0x1000)
            v102 = 4096;
          else
            v102 = v101;
          v103 = *v93;
          v104 = *v95;
          if (v103 >= 0xF000)
            v103 = 61440;
          if (v103 <= 0x1000)
            v105 = 4096;
          else
            v105 = v103;
          if (v93[1] >= 0xF000u)
            v106 = 61440;
          else
            v106 = v93[1];
          v107 = v95[1];
          if (v106 <= 0x1000)
            v108 = 4096;
          else
            v108 = v106;
          if (v104 >= 0xF000)
            v104 = 61440;
          v109 = &v79[v92];
          if (v104 <= 0x1000)
            v104 = 4096;
          v110 = -268431360 - v96 + (v96 << 16);
          if (v107 >= 0xF000)
            v107 = 61440;
          v111 = (613566757 * (unint64_t)(v110 >> 13)) >> 32;
          v112 = (613566757 * (unint64_t)((-268431360 - v98 + (v98 << 16)) >> 13)) >> 32;
          v113 = (613566757 * (unint64_t)((-268431360 - v100 + (v100 << 16)) >> 13)) >> 32;
          v114 = 613566757 * ((-268431360 - v102 + (v102 << 16)) >> 13);
          if (v107 <= 0x1000)
            v107 = 4096;
          *v109 = (v111
                               + ((613566757 * (unint64_t)((-268431360 - v105 + (v105 << 16)) >> 13)) >> 32)
                               + v113
                               + ((613566757 * (unint64_t)((-268431360 - v104 + (v104 << 16)) >> 13)) >> 32)
                               + 2) >> 2;
          v109[1] = (v112
                                 + ((613566757
                                   * (unint64_t)((-268431360 - v108 + (v108 << 16)) >> 13)) >> 32)
                                 + HIDWORD(v114)
                                 + ((613566757 * (unint64_t)((-268431360 - v107 + (v107 << 16)) >> 13)) >> 32)
                                 + 2) >> 2;
          v92 += 2;
          v93 += 4;
        }
        while (v92 < v38);
      }
      v16 += v15;
      v23 = (_WORD *)((char *)v23 + v22);
      v76 += 2;
    }
    while (v76 < v77);
  }
  return 0;
}

uint64_t vt_CopyDec_sv44_sf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  unsigned __int16 *v39;
  _WORD *v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  int v44;
  unint64_t v45;
  _WORD *v46;
  unsigned int v47;
  unsigned int v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unsigned __int16 *v52;
  _WORD *v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  int v57;
  unint64_t v58;
  _WORD *v59;
  unsigned int v60;
  unsigned int v61;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * (v12 + v8) + 4 * (v10 + v9));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - (v10 + v9);
  v25 = v18 - v17;
  if (v24 >= v25)
    v24 = v25;
  v26 = v14 - v13;
  v27 = v20 - v19;
  if (v26 < v20 - v19)
    v27 = v26;
  if (v27)
  {
    v28 = 0;
    v29 = *a4;
    v30 = *a3 + *a4 * v13 + 2 * (v10 + v9);
    v31 = *a8;
    if (v13 >= v8)
      v32 = 0;
    else
      v32 = v29;
    v33 = v30 + v32;
    v34 = *a7 + v31 * v19 + v21;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
        {
          v36 = *(unsigned __int16 *)(v33 + 2 * i);
          if (v36 >= 0xEB00)
            v36 = 60160;
          if (v36 <= 0x1000)
            v36 = 4096;
          *(_WORD *)(v34 + 2 * i) = (-268431360 - v36 + (v36 << 16)) / 0xDB00;
        }
      }
      v33 += v29;
      v34 += v31;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12)
    v37 = v12;
  else
    v37 = 0;
  if (v24 < v10)
    v10 = 0;
  v38 = v24 - v10;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v41 = *v16;
      if (v41 >= 0xF000)
        v41 = 61440;
      if (v41 <= 0x1000)
        v42 = 4096;
      else
        v42 = v41;
      if (v16[1] >= 0xF000u)
        v43 = 61440;
      else
        v43 = v16[1];
      if (v43 <= 0x1000)
        v44 = 4096;
      else
        v44 = v43;
      v39 = v16 + 4;
      *v23 = (613566757 * (unint64_t)((-268431360 - v42 + (v42 << 16)) >> 13)) >> 32;
      v23[1] = (613566757 * (unint64_t)((-268431360 - v44 + (v44 << 16)) >> 13)) >> 32;
      v40 = v23 + 2;
    }
    else
    {
      v39 = v16;
      v40 = v23;
    }
    if (v24 != v10)
    {
      v45 = 0;
      do
      {
        v46 = &v40[v45];
        v47 = *v39;
        v48 = v39[1];
        if (v47 >= 0xF000)
          v47 = 61440;
        if (v47 <= 0x1000)
          v47 = 4096;
        if (v48 >= 0xF000)
          v48 = 61440;
        if (v48 <= 0x1000)
          v48 = 4096;
        *v46 = (613566757 * (unint64_t)((-268431360 - v47 + (v47 << 16)) >> 13)) >> 32;
        v46[1] = (613566757 * (unint64_t)((-268431360 - v48 + (v48 << 16)) >> 13)) >> 32;
        v45 += 2;
        v39 += 4;
      }
      while (v45 < v38);
    }
    v16 += v15;
    v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v27 != v37)
  {
    v49 = 0;
    v50 = v27 - v37;
    v51 = 2 * v15;
    do
    {
      v52 = v16;
      v53 = v23;
      if ((v9 & 1) != 0)
      {
        v54 = *v16;
        if (v54 >= 0xF000)
          v54 = 61440;
        if (v54 <= 0x1000)
          v55 = 4096;
        else
          v55 = v54;
        if (v16[1] >= 0xF000u)
          v56 = 61440;
        else
          v56 = v16[1];
        if (v56 <= 0x1000)
          v57 = 4096;
        else
          v57 = v56;
        v52 = v16 + 4;
        *v23 = (613566757 * (unint64_t)((-268431360 - v55 + (v55 << 16)) >> 13)) >> 32;
        v23[1] = (613566757 * (unint64_t)((-268431360 - v57 + (v57 << 16)) >> 13)) >> 32;
        v53 = v23 + 2;
      }
      if (v24 != v10)
      {
        v58 = 0;
        do
        {
          v59 = &v53[v58];
          v60 = *v52;
          v61 = v52[1];
          if (v60 >= 0xF000)
            v60 = 61440;
          if (v60 <= 0x1000)
            v60 = 4096;
          if (v61 >= 0xF000)
            v61 = 61440;
          if (v61 <= 0x1000)
            v61 = 4096;
          *v59 = (613566757 * (unint64_t)((-268431360 - v60 + (v60 << 16)) >> 13)) >> 32;
          v59[1] = (613566757 * (unint64_t)((-268431360 - v61 + (v61 << 16)) >> 13)) >> 32;
          v58 += 2;
          v52 += 4;
        }
        while (v58 < v38);
      }
      v16 = (unsigned __int16 *)((char *)v16 + v51);
      v23 = (_WORD *)((char *)v23 + v22);
      v49 += 2;
    }
    while (v49 < v50);
  }
  return 0;
}

uint64_t vt_Copy_s4as_t4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  __int16 *v36;
  _WORD *v37;
  __int16 v38;
  unint64_t v39;
  unint64_t v40;
  __int16 v41;
  __int16 v42;
  __int16 v43;
  __int16 v44;
  unint64_t v45;
  uint64_t v46;
  __int16 *v47;
  _WORD *v48;
  __int16 v49;
  unint64_t v50;
  unint64_t v51;
  __int16 v52;
  __int16 v53;
  __int16 v54;
  __int16 v55;
  __int16 v56;
  __int16 v57;
  unint64_t v58;
  __int16 v59;
  __int16 v60;
  __int16 v61;
  __int16 v62;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a2[3];
  v12 = a4[1];
  v13 = (__int16 *)(a3[1] + v12 * v8 + 4 * v9);
  v15 = a6[4];
  v14 = a6[5];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v14 + 4 * v15);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (v11 >= a6[3])
    v11 = a6[3];
  if (v11)
  {
    v18 = 0;
    v19 = *a8;
    v20 = a8[2];
    v21 = a7[2] + v20 * v14;
    v22 = *a7 + *a8 * v14;
    v23 = *a4;
    v24 = a4[2];
    v25 = v21 + 2 * v15;
    v26 = v22 + 2 * v15;
    v27 = a3[2] + v24 * v8 + 2 * v9;
    v28 = *a3 + v23 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
        {
          *(_WORD *)(v25 + 2 * i) = *(_WORD *)(v27 + 2 * i);
          *(_WORD *)(v26 + 2 * i) = *(_WORD *)(v28 + 2 * i) & 0xFFF0;
        }
      }
      v28 += v23;
      v26 += v19;
      v27 += v24;
      v25 += v20;
      ++v18;
    }
    while (v18 != v11);
  }
  v30 = v8 & 1;
  if (v11 >= v30)
    v31 = v8 & 1;
  else
    v31 = 0;
  v32 = v9;
  v33 = v9 & 1;
  if (v10 >= v33)
    v34 = v33;
  else
    v34 = 0;
  v35 = v10 - v34;
  if ((v8 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v36 = v13 + 2;
      v38 = v13[1] & 0xFFF0;
      *v17 = *v13 & 0xFFF0;
      v17[1] = v38;
      v37 = v17 + 2;
    }
    else
    {
      v36 = v13;
      v37 = v17;
    }
    if (v10 == v34)
    {
      v39 = 0;
    }
    else
    {
      v40 = v10 - v34;
      do
      {
        v41 = *v36;
        v42 = v36[1];
        v36 += 2;
        *v37 = v41 & 0xFFF0;
        v37[1] = v42 & 0xFFF0;
        v37 += 2;
        --v40;
      }
      while (v40);
      v39 = v10 - v34;
    }
    if (v39 + v33 < v10)
    {
      v43 = *v36 & 0xFFF0;
      v44 = v36[1] & 0xFFF0;
      *v37 = v43;
      v37[1] = v44;
    }
    v13 = (__int16 *)((char *)v13 + v12);
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v11 == v31)
  {
    v45 = 0;
  }
  else
  {
    v46 = 0;
    v45 = v11 - v31;
    do
    {
      v47 = v13;
      v48 = v17;
      if ((v32 & 1) != 0)
      {
        v47 = v13 + 2;
        v49 = v13[1] & 0xFFF0;
        *v17 = *v13 & 0xFFF0;
        v17[1] = v49;
        v48 = v17 + 2;
      }
      if (v10 == v34)
      {
        v50 = 0;
      }
      else
      {
        v51 = v10 - v34;
        do
        {
          v52 = *v47;
          v53 = v47[1];
          v47 += 2;
          *v48 = v52 & 0xFFF0;
          v48[1] = v53 & 0xFFF0;
          v48 += 2;
          --v51;
        }
        while (v51);
        v50 = v10 - v34;
      }
      if (v50 + v33 < v10)
      {
        v54 = *v47 & 0xFFF0;
        v55 = v47[1] & 0xFFF0;
        *v48 = v54;
        v48[1] = v55;
      }
      v13 = (__int16 *)((char *)v13 + v12);
      v17 = (_WORD *)((char *)v17 + v16);
      ++v46;
    }
    while (v46 != v45);
  }
  if (v45 + v30 < v11)
  {
    if ((v32 & 1) != 0)
    {
      v56 = *v13;
      v57 = v13[1];
      v13 += 2;
      *v17 = v56 & 0xFFF0;
      v17[1] = v57 & 0xFFF0;
      v17 += 2;
    }
    if (v10 == v34)
    {
      v35 = 0;
    }
    else
    {
      v58 = v10 - v34;
      do
      {
        v59 = *v13;
        v60 = v13[1];
        v13 += 2;
        *v17 = v59 & 0xFFF0;
        v17[1] = v60 & 0xFFF0;
        v17 += 2;
        --v58;
      }
      while (v58);
    }
    if (v35 + v33 < v10)
    {
      v61 = *v13 & 0xFFF0;
      v62 = v13[1] & 0xFFF0;
      *v17 = v61;
      v17[1] = v62;
    }
  }
  return 0;
}

uint64_t vt_Copy_sv44_tv44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  __int16 *v30;
  _WORD *v31;
  __int16 v32;
  unint64_t v33;
  unint64_t v34;
  __int16 v35;
  __int16 v36;
  __int16 v37;
  __int16 v38;
  unint64_t v39;
  uint64_t v40;
  __int16 *v41;
  _WORD *v42;
  __int16 v43;
  unint64_t v44;
  unint64_t v45;
  __int16 v46;
  __int16 v47;
  __int16 v48;
  __int16 v49;
  __int16 v50;
  __int16 v51;
  unint64_t v52;
  __int16 v53;
  __int16 v54;
  __int16 v55;
  __int16 v56;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a2[3];
  v12 = a4[1];
  v13 = (__int16 *)(a3[1] + v12 * v8 + 4 * v9);
  v14 = a6[4];
  v15 = a6[5];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (v11 >= a6[3])
    v11 = a6[3];
  if (v11)
  {
    v18 = 0;
    v19 = *a4;
    v20 = *a8;
    v21 = *a7 + *a8 * v15 + 2 * v14;
    v22 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
          *(_WORD *)(v21 + 2 * i) = *(_WORD *)(v22 + 2 * i) & 0xFFF0;
      }
      v22 += v19;
      v21 += v20;
      ++v18;
    }
    while (v18 != v11);
  }
  v24 = v8 & 1;
  if (v11 >= v24)
    v25 = v8 & 1;
  else
    v25 = 0;
  v26 = v9;
  v27 = v9 & 1;
  if (v10 >= v27)
    v28 = v27;
  else
    v28 = 0;
  v29 = v10 - v28;
  if ((v8 & 1) != 0)
  {
    if ((v26 & 1) != 0)
    {
      v30 = v13 + 2;
      v32 = v13[1] & 0xFFF0;
      *v17 = *v13 & 0xFFF0;
      v17[1] = v32;
      v31 = v17 + 2;
    }
    else
    {
      v30 = v13;
      v31 = v17;
    }
    if (v10 == v28)
    {
      v33 = 0;
    }
    else
    {
      v34 = v10 - v28;
      do
      {
        v35 = *v30;
        v36 = v30[1];
        v30 += 2;
        *v31 = v35 & 0xFFF0;
        v31[1] = v36 & 0xFFF0;
        v31 += 2;
        --v34;
      }
      while (v34);
      v33 = v10 - v28;
    }
    if (v33 + v27 < v10)
    {
      v37 = *v30 & 0xFFF0;
      v38 = v30[1] & 0xFFF0;
      *v31 = v37;
      v31[1] = v38;
    }
    v13 = (__int16 *)((char *)v13 + v12);
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v11 == v25)
  {
    v39 = 0;
  }
  else
  {
    v40 = 0;
    v39 = v11 - v25;
    do
    {
      v41 = v13;
      v42 = v17;
      if ((v26 & 1) != 0)
      {
        v41 = v13 + 2;
        v43 = v13[1] & 0xFFF0;
        *v17 = *v13 & 0xFFF0;
        v17[1] = v43;
        v42 = v17 + 2;
      }
      if (v10 == v28)
      {
        v44 = 0;
      }
      else
      {
        v45 = v10 - v28;
        do
        {
          v46 = *v41;
          v47 = v41[1];
          v41 += 2;
          *v42 = v46 & 0xFFF0;
          v42[1] = v47 & 0xFFF0;
          v42 += 2;
          --v45;
        }
        while (v45);
        v44 = v10 - v28;
      }
      if (v44 + v27 < v10)
      {
        v48 = *v41 & 0xFFF0;
        v49 = v41[1] & 0xFFF0;
        *v42 = v48;
        v42[1] = v49;
      }
      v13 = (__int16 *)((char *)v13 + v12);
      v17 = (_WORD *)((char *)v17 + v16);
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v24 < v11)
  {
    if ((v26 & 1) != 0)
    {
      v50 = *v13;
      v51 = v13[1];
      v13 += 2;
      *v17 = v50 & 0xFFF0;
      v17[1] = v51 & 0xFFF0;
      v17 += 2;
    }
    if (v10 == v28)
    {
      v29 = 0;
    }
    else
    {
      v52 = v10 - v28;
      do
      {
        v53 = *v13;
        v54 = v13[1];
        v13 += 2;
        *v17 = v53 & 0xFFF0;
        v17[1] = v54 & 0xFFF0;
        v17 += 2;
        --v52;
      }
      while (v52);
    }
    if (v29 + v27 < v10)
    {
      v55 = *v13 & 0xFFF0;
      v56 = v13[1] & 0xFFF0;
      *v17 = v55;
      v17[1] = v56;
    }
  }
  return 0;
}

uint64_t vt_Copy_sv44_tf44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned __int16 *v32;
  _WORD *v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unint64_t v43;
  uint64_t v44;
  unsigned __int16 *v45;
  _WORD *v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unint64_t v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a2[3];
  v12 = a4[1];
  v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 4 * v9);
  v14 = a6[4];
  v15 = a6[5];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (v11 >= a6[3])
    v18 = a6[3];
  else
    v18 = v11;
  if (v18)
  {
    v19 = 0;
    v20 = *a4;
    v21 = *a8;
    v22 = *a7 + *a8 * v15 + 2 * v14;
    v23 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
        {
          v25 = *(unsigned __int16 *)(v23 + 2 * i);
          if (v25 >= 0xEB00)
            v25 = 60160;
          if (v25 <= 0x1000)
            v25 = 4096;
          *(_WORD *)(v22 + 2 * i) = 16 * ((-16773120 - v25 + (v25 << 12)) / 0xDB00);
        }
      }
      v23 += v20;
      v22 += v21;
      ++v19;
    }
    while (v19 != v18);
  }
  v26 = v8 & 1;
  if (v18 >= v26)
    v27 = v8 & 1;
  else
    v27 = 0;
  v28 = v9;
  v29 = v9 & 1;
  if (v10 >= v29)
    v30 = v29;
  else
    v30 = 0;
  v31 = v10 - v30;
  if ((v8 & 1) != 0)
  {
    if ((v28 & 1) != 0)
    {
      v34 = *v13;
      v35 = v13[1];
      if (v34 >= 0xF000)
        v34 = 61440;
      if (v34 <= 0x1000)
        v34 = 4096;
      if (v35 >= 0xF000)
        v35 = 61440;
      if (v35 <= 0x1000)
        v36 = 4096;
      else
        v36 = v35;
      v32 = v13 + 2;
      *v17 = 16 * ((613566757 * (unint64_t)((-16773120 - v34 + (v34 << 12)) >> 13)) >> 32);
      v17[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v36 + (v36 << 12)) >> 13)) >> 32);
      v33 = v17 + 2;
    }
    else
    {
      v32 = v13;
      v33 = v17;
    }
    if (v10 == v30)
    {
      v37 = 0;
    }
    else
    {
      v38 = v10 - v30;
      do
      {
        v39 = *v32;
        v40 = v32[1];
        if (v39 >= 0xF000)
          v39 = 61440;
        if (v39 <= 0x1000)
          v39 = 4096;
        if (v40 >= 0xF000)
          v40 = 61440;
        if (v40 <= 0x1000)
          v40 = 4096;
        v32 += 2;
        *v33 = 16 * ((613566757 * (unint64_t)((-16773120 - v39 + (v39 << 12)) >> 13)) >> 32);
        v33[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v40 + (v40 << 12)) >> 13)) >> 32);
        v33 += 2;
        --v38;
      }
      while (v38);
      v37 = v10 - v30;
    }
    if (v37 + v29 < v10)
    {
      v41 = *v32;
      v42 = v32[1];
      if (v41 >= 0xF000)
        v41 = 61440;
      if (v41 <= 0x1000)
        v41 = 4096;
      if (v42 >= 0xF000)
        v42 = 61440;
      if (v42 <= 0x1000)
        v42 = 4096;
      *v33 = 16 * ((613566757 * (unint64_t)((-16773120 - v41 + (v41 << 12)) >> 13)) >> 32);
      v33[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v42 + (v42 << 12)) >> 13)) >> 32);
    }
    v13 = (unsigned __int16 *)((char *)v13 + v12);
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v18 == v27)
  {
    v43 = 0;
  }
  else
  {
    v44 = 0;
    v43 = v18 - v27;
    do
    {
      v45 = v13;
      v46 = v17;
      if ((v28 & 1) != 0)
      {
        v47 = *v13;
        v48 = v13[1];
        if (v47 >= 0xF000)
          v47 = 61440;
        if (v47 <= 0x1000)
          v47 = 4096;
        if (v48 >= 0xF000)
          v48 = 61440;
        if (v48 <= 0x1000)
          v49 = 4096;
        else
          v49 = v48;
        v45 = v13 + 2;
        *v17 = 16 * ((613566757 * (unint64_t)((-16773120 - v47 + (v47 << 12)) >> 13)) >> 32);
        v17[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v49 + (v49 << 12)) >> 13)) >> 32);
        v46 = v17 + 2;
      }
      if (v10 == v30)
      {
        v50 = 0;
      }
      else
      {
        v51 = v10 - v30;
        do
        {
          v52 = *v45;
          v53 = v45[1];
          if (v52 >= 0xF000)
            v52 = 61440;
          if (v52 <= 0x1000)
            v52 = 4096;
          if (v53 >= 0xF000)
            v53 = 61440;
          if (v53 <= 0x1000)
            v53 = 4096;
          v45 += 2;
          *v46 = 16 * ((613566757 * (unint64_t)((-16773120 - v52 + (v52 << 12)) >> 13)) >> 32);
          v46[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v53 + (v53 << 12)) >> 13)) >> 32);
          v46 += 2;
          --v51;
        }
        while (v51);
        v50 = v10 - v30;
      }
      if (v50 + v29 < v10)
      {
        v54 = *v45;
        v55 = v45[1];
        if (v54 >= 0xF000)
          v54 = 61440;
        if (v54 <= 0x1000)
          v54 = 4096;
        if (v55 >= 0xF000)
          v55 = 61440;
        if (v55 <= 0x1000)
          v55 = 4096;
        *v46 = 16 * ((613566757 * (unint64_t)((-16773120 - v54 + (v54 << 12)) >> 13)) >> 32);
        v46[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v55 + (v55 << 12)) >> 13)) >> 32);
      }
      v13 = (unsigned __int16 *)((char *)v13 + v12);
      v17 = (_WORD *)((char *)v17 + v16);
      ++v44;
    }
    while (v44 != v43);
  }
  if (v43 + v26 < v18)
  {
    if ((v28 & 1) != 0)
    {
      v56 = *v13;
      v57 = v13[1];
      if (v56 >= 0xF000)
        v56 = 61440;
      if (v56 <= 0x1000)
        v56 = 4096;
      if (v57 >= 0xF000)
        v57 = 61440;
      if (v57 <= 0x1000)
        v57 = 4096;
      v13 += 2;
      *v17 = 16 * ((613566757 * (unint64_t)((-16773120 - v56 + (v56 << 12)) >> 13)) >> 32);
      v17[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v57 + (v57 << 12)) >> 13)) >> 32);
      v17 += 2;
    }
    if (v10 == v30)
    {
      v31 = 0;
    }
    else
    {
      v58 = v10 - v30;
      do
      {
        v59 = *v13;
        v60 = v13[1];
        if (v59 >= 0xF000)
          v59 = 61440;
        if (v59 <= 0x1000)
          v59 = 4096;
        if (v60 >= 0xF000)
          v60 = 61440;
        if (v60 <= 0x1000)
          v60 = 4096;
        v13 += 2;
        *v17 = 16 * ((613566757 * (unint64_t)((-16773120 - v59 + (v59 << 12)) >> 13)) >> 32);
        v17[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v60 + (v60 << 12)) >> 13)) >> 32);
        v17 += 2;
        --v58;
      }
      while (v58);
    }
    if (v31 + v29 < v10)
    {
      v61 = *v13;
      v62 = v13[1];
      if (v61 >= 0xF000)
        v61 = 61440;
      if (v61 <= 0x1000)
        v61 = 4096;
      if (v62 >= 0xF000)
        v62 = 61440;
      if (v62 <= 0x1000)
        v62 = 4096;
      *v17 = 16 * ((613566757 * (unint64_t)((-16773120 - v61 + (v61 << 12)) >> 13)) >> 32);
      v17[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v62 + (v62 << 12)) >> 13)) >> 32);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_s4as_t2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _WORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  unint64_t v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  _WORD *v38;
  _WORD *v39;
  int v40;
  unint64_t v41;
  _WORD *v42;
  int v43;
  unint64_t v44;
  uint64_t v45;
  _WORD *v46;
  _WORD *v47;
  int v48;
  unint64_t v49;
  _WORD *v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unint64_t v56;
  _WORD *v57;
  int v58;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = v10 + v9;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  v15 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v16 = *(_QWORD *)(a6 + 40);
  v17 = 2 * v15;
  v18 = a8[1];
  v19 = (_WORD *)(a7[1] + v18 * v16 + ((2 * v15) & 0x7FFFFFFFFFFFFFFELL));
  v20 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v21 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v15;
  if (v20 >= v21)
    v20 = v21;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v22 = 0;
    v23 = *a8;
    v24 = a8[2];
    v25 = a7[2] + v24 * v16;
    v26 = *a7 + *a8 * v16;
    v27 = *a4;
    v28 = a4[2];
    v29 = v25 + v17;
    v30 = v26 + v17;
    v31 = a3[2] + v28 * v12 + 2 * v11;
    v32 = *a3 + v27 * v12 + 2 * v11;
    do
    {
      if (v20)
      {
        for (i = 0; i != v20; ++i)
        {
          *(_WORD *)(v29 + 2 * i) = *(_WORD *)(v31 + 2 * i);
          *(_WORD *)(v30 + 2 * i) = *(_WORD *)(v32 + 2 * i) & 0xFFF0;
        }
      }
      v32 += v27;
      v30 += v23;
      v31 += v28;
      v29 += v24;
      ++v22;
    }
    while (v22 != v8);
  }
  v34 = v12 & 1;
  if (v8 >= v34)
    v35 = v12 & 1;
  else
    v35 = 0;
  v36 = v9;
  if (v20 < v10)
    v10 = 0;
  v37 = v20 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v36 & 1) != 0)
    {
      v38 = v14 + 4;
      v40 = (v14[3] >> 4) + (v14[1] >> 4);
      *v19 = (8 * ((v14[2] >> 4) + (*v14 >> 4)) + 8) & 0xFFF0;
      v19[1] = (8 * v40 + 8) & 0xFFF0;
      v39 = v19 + 2;
    }
    else
    {
      v38 = v14;
      v39 = v19;
    }
    if (v20 != v10)
    {
      v41 = 0;
      do
      {
        v42 = &v39[v41];
        v43 = ((unsigned __int16)v38[3] >> 4) + ((unsigned __int16)v38[1] >> 4);
        *v42 = (8 * ((v38[2] >> 4) + (*v38 >> 4)) + 8) & 0xFFF0;
        v42[1] = (8 * v43 + 8) & 0xFFF0;
        v41 += 2;
        v38 += 4;
      }
      while (v41 < v37);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v19 = (_WORD *)((char *)v19 + v18);
  }
  if (v8 == v35)
  {
    v44 = 0;
  }
  else
  {
    v45 = 0;
    v44 = v8 - v35;
    do
    {
      v46 = v14;
      v47 = v19;
      if ((v36 & 1) != 0)
      {
        v46 = v14 + 4;
        v48 = (v14[3] >> 4) + (v14[1] >> 4);
        *v19 = (8 * ((v14[2] >> 4) + (*v14 >> 4)) + 8) & 0xFFF0;
        v19[1] = (8 * v48 + 8) & 0xFFF0;
        v47 = v19 + 2;
      }
      if (v20 != v10)
      {
        v49 = 0;
        do
        {
          v50 = &v47[v49];
          v51 = ((unsigned __int16)v46[3] >> 4) + ((unsigned __int16)v46[1] >> 4);
          *v50 = (8 * ((v46[2] >> 4) + (*v46 >> 4)) + 8) & 0xFFF0;
          v50[1] = (8 * v51 + 8) & 0xFFF0;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v37);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v19 = (_WORD *)((char *)v19 + v18);
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v34 < v8)
  {
    if ((v36 & 1) != 0)
    {
      v52 = *v14;
      v53 = v14[1];
      v54 = v14[2];
      v55 = v14[3];
      v14 += 4;
      *v19 = (8 * ((v54 >> 4) + (v52 >> 4)) + 8) & 0xFFF0;
      v19[1] = (8 * ((v55 >> 4) + (v53 >> 4)) + 8) & 0xFFF0;
      v19 += 2;
    }
    if (v20 != v10)
    {
      v56 = 0;
      do
      {
        v57 = &v19[v56];
        v58 = (v14[3] >> 4) + (v14[1] >> 4);
        *v57 = (8 * ((v14[2] >> 4) + (*v14 >> 4)) + 8) & 0xFFF0;
        v57[1] = (8 * v58 + 8) & 0xFFF0;
        v56 += 2;
        v14 += 4;
      }
      while (v56 < v37);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_s4as_t2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _WORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  unint64_t v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  _WORD *v38;
  _WORD *v39;
  __int16 v40;
  unint64_t v41;
  _WORD *v42;
  __int16 v43;
  unint64_t v44;
  uint64_t v45;
  _WORD *v46;
  _WORD *v47;
  __int16 v48;
  unint64_t v49;
  _WORD *v50;
  __int16 v51;
  __int16 v52;
  __int16 v53;
  unint64_t v54;
  _WORD *v55;
  __int16 v56;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = v10 + v9;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (_WORD *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  v15 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v16 = *(_QWORD *)(a6 + 40);
  v17 = 2 * v15;
  v18 = a8[1];
  v19 = (_WORD *)(a7[1] + v18 * v16 + ((2 * v15) & 0x7FFFFFFFFFFFFFFELL));
  v20 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v21 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v15;
  if (v20 >= v21)
    v20 = v21;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v22 = 0;
    v23 = *a8;
    v24 = a8[2];
    v25 = a7[2] + v24 * v16;
    v26 = *a7 + *a8 * v16;
    v27 = *a4;
    v28 = a4[2];
    v29 = v25 + v17;
    v30 = v26 + v17;
    v31 = a3[2] + v28 * v12 + 2 * v11;
    v32 = *a3 + v27 * v12 + 2 * v11;
    do
    {
      if (v20)
      {
        for (i = 0; i != v20; ++i)
        {
          *(_WORD *)(v29 + 2 * i) = *(_WORD *)(v31 + 2 * i);
          *(_WORD *)(v30 + 2 * i) = *(_WORD *)(v32 + 2 * i) & 0xFFF0;
        }
      }
      v32 += v27;
      v30 += v23;
      v31 += v28;
      v29 += v24;
      ++v22;
    }
    while (v22 != v8);
  }
  v34 = v12 & 1;
  if (v8 >= v34)
    v35 = v12 & 1;
  else
    v35 = 0;
  v36 = v9;
  if (v20 < v10)
    v10 = 0;
  v37 = v20 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v36 & 1) != 0)
    {
      v38 = v14 + 4;
      v40 = v14[1] & 0xFFF0;
      *v19 = *v14 & 0xFFF0;
      v19[1] = v40;
      v39 = v19 + 2;
    }
    else
    {
      v38 = v14;
      v39 = v19;
    }
    if (v20 != v10)
    {
      v41 = 0;
      do
      {
        v42 = &v39[v41];
        v43 = v38[1] & 0xFFF0;
        *v42 = *v38 & 0xFFF0;
        v42[1] = v43;
        v41 += 2;
        v38 += 4;
      }
      while (v41 < v37);
    }
    v14 = (_WORD *)((char *)v14 + v13);
    v19 = (_WORD *)((char *)v19 + v18);
  }
  if (v8 == v35)
  {
    v44 = 0;
  }
  else
  {
    v45 = 0;
    v44 = v8 - v35;
    do
    {
      v46 = v14;
      v47 = v19;
      if ((v36 & 1) != 0)
      {
        v46 = v14 + 4;
        v48 = v14[1] & 0xFFF0;
        *v19 = *v14 & 0xFFF0;
        v19[1] = v48;
        v47 = v19 + 2;
      }
      if (v20 != v10)
      {
        v49 = 0;
        do
        {
          v50 = &v47[v49];
          v51 = v46[1] & 0xFFF0;
          *v50 = *v46 & 0xFFF0;
          v50[1] = v51;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v37);
      }
      v14 = (_WORD *)((char *)v14 + v13);
      v19 = (_WORD *)((char *)v19 + v18);
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v34 < v8)
  {
    if ((v36 & 1) != 0)
    {
      v52 = *v14;
      v53 = v14[1];
      v14 += 4;
      *v19 = v52 & 0xFFF0;
      v19[1] = v53 & 0xFFF0;
      v19 += 2;
    }
    if (v20 != v10)
    {
      v54 = 0;
      do
      {
        v55 = &v19[v54];
        v56 = v14[1] & 0xFFF0;
        *v55 = *v14 & 0xFFF0;
        v55[1] = v56;
        v54 += 2;
        v14 += 4;
      }
      while (v54 < v37);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sv44_tv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  _WORD *v34;
  _WORD *v35;
  int v36;
  unint64_t v37;
  _WORD *v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  _WORD *v42;
  _WORD *v43;
  int v44;
  unint64_t v45;
  _WORD *v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unint64_t v52;
  _WORD *v53;
  int v54;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = *a7 + *a8 * v18 + v19;
    v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = *(_WORD *)(v28 + 2 * i) & 0xFFF0;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  v30 = v12 & 1;
  if (v9 >= v30)
    v31 = v12 & 1;
  else
    v31 = 0;
  v32 = v8;
  if (v22 < v10)
    v10 = 0;
  v33 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v34 = v14 + 4;
      v36 = (v14[3] >> 4) + (v14[1] >> 4);
      *v21 = (8 * ((v14[2] >> 4) + (*v14 >> 4)) + 8) & 0xFFF0;
      v21[1] = (8 * v36 + 8) & 0xFFF0;
      v35 = v21 + 2;
    }
    else
    {
      v34 = v14;
      v35 = v21;
    }
    if (v22 != v10)
    {
      v37 = 0;
      do
      {
        v38 = &v35[v37];
        v39 = ((unsigned __int16)v34[3] >> 4) + ((unsigned __int16)v34[1] >> 4);
        *v38 = (8 * ((v34[2] >> 4) + (*v34 >> 4)) + 8) & 0xFFF0;
        v38[1] = (8 * v39 + 8) & 0xFFF0;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v9 - v31;
    do
    {
      v42 = v14;
      v43 = v21;
      if ((v32 & 1) != 0)
      {
        v42 = v14 + 4;
        v44 = (v14[3] >> 4) + (v14[1] >> 4);
        *v21 = (8 * ((v14[2] >> 4) + (*v14 >> 4)) + 8) & 0xFFF0;
        v21[1] = (8 * v44 + 8) & 0xFFF0;
        v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        v45 = 0;
        do
        {
          v46 = &v43[v45];
          v47 = ((unsigned __int16)v42[3] >> 4) + ((unsigned __int16)v42[1] >> 4);
          *v46 = (8 * ((v42[2] >> 4) + (*v42 >> 4)) + 8) & 0xFFF0;
          v46[1] = (8 * v47 + 8) & 0xFFF0;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if ((v32 & 1) != 0)
    {
      v48 = *v14;
      v49 = v14[1];
      v50 = v14[2];
      v51 = v14[3];
      v14 += 4;
      *v21 = (8 * ((v50 >> 4) + (v48 >> 4)) + 8) & 0xFFF0;
      v21[1] = (8 * ((v51 >> 4) + (v49 >> 4)) + 8) & 0xFFF0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v52 = 0;
      do
      {
        v53 = &v21[v52];
        v54 = (v14[3] >> 4) + (v14[1] >> 4);
        *v53 = (8 * ((v14[2] >> 4) + (*v14 >> 4)) + 8) & 0xFFF0;
        v53[1] = (8 * v54 + 8) & 0xFFF0;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_sv44_tv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  _WORD *v34;
  _WORD *v35;
  __int16 v36;
  unint64_t v37;
  _WORD *v38;
  __int16 v39;
  unint64_t v40;
  uint64_t v41;
  _WORD *v42;
  _WORD *v43;
  __int16 v44;
  unint64_t v45;
  _WORD *v46;
  __int16 v47;
  __int16 v48;
  __int16 v49;
  unint64_t v50;
  _WORD *v51;
  __int16 v52;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (_WORD *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = *a7 + *a8 * v18 + v19;
    v28 = *a3 + v25 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = *(_WORD *)(v28 + 2 * i) & 0xFFF0;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v8);
  }
  v30 = v12 & 1;
  if (v8 >= v30)
    v31 = v12 & 1;
  else
    v31 = 0;
  v32 = v9;
  if (v22 < v10)
    v10 = 0;
  v33 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v34 = v14 + 4;
      v36 = v14[1] & 0xFFF0;
      *v21 = *v14 & 0xFFF0;
      v21[1] = v36;
      v35 = v21 + 2;
    }
    else
    {
      v34 = v14;
      v35 = v21;
    }
    if (v22 != v10)
    {
      v37 = 0;
      do
      {
        v38 = &v35[v37];
        v39 = v34[1] & 0xFFF0;
        *v38 = *v34 & 0xFFF0;
        v38[1] = v39;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 = (_WORD *)((char *)v14 + v13);
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v31)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v8 - v31;
    do
    {
      v42 = v14;
      v43 = v21;
      if ((v32 & 1) != 0)
      {
        v42 = v14 + 4;
        v44 = v14[1] & 0xFFF0;
        *v21 = *v14 & 0xFFF0;
        v21[1] = v44;
        v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        v45 = 0;
        do
        {
          v46 = &v43[v45];
          v47 = v42[1] & 0xFFF0;
          *v46 = *v42 & 0xFFF0;
          v46[1] = v47;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 = (_WORD *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v8)
  {
    if ((v32 & 1) != 0)
    {
      v48 = *v14;
      v49 = v14[1];
      v14 += 4;
      *v21 = v48 & 0xFFF0;
      v21[1] = v49 & 0xFFF0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v50 = 0;
      do
      {
        v51 = &v21[v50];
        v52 = v14[1] & 0xFFF0;
        *v51 = *v14 & 0xFFF0;
        v51[1] = v52;
        v50 += 2;
        v14 += 4;
      }
      while (v50 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sv44_tf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unsigned int v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  unsigned __int16 *v35;
  _WORD *v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  int v44;
  unint64_t v45;
  _WORD *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unint64_t v51;
  uint64_t v52;
  unsigned __int16 *v53;
  _WORD *v54;
  unsigned int v55;
  int v56;
  unsigned int v57;
  int v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  int v62;
  unint64_t v63;
  _WORD *v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unint64_t v73;
  _WORD *v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = *a7 + *a8 * v18 + v19;
    v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          v30 = *(unsigned __int16 *)(v28 + 2 * i);
          if (v30 >= 0xEB00)
            v30 = 60160;
          if (v30 <= 0x1000)
            v30 = 4096;
          *(_WORD *)(v27 + 2 * i) = 16 * ((-16773120 - v30 + (v30 << 12)) / 0xDB00);
        }
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  v31 = v12 & 1;
  if (v9 >= v31)
    v32 = v12 & 1;
  else
    v32 = 0;
  v33 = v8;
  if (v22 < v10)
    v10 = 0;
  v34 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v37 = *v14;
      if (v37 >= 0xF000)
        v37 = 61440;
      if (v37 <= 0x1000)
        v38 = 4096;
      else
        v38 = v37;
      if (v14[1] >= 0xF000u)
        v39 = 61440;
      else
        v39 = v14[1];
      if (v39 <= 0x1000)
        v40 = 4096;
      else
        v40 = v39;
      v41 = v14[2];
      if (v41 >= 0xF000)
        v41 = 61440;
      if (v41 <= 0x1000)
        v42 = 4096;
      else
        v42 = v41;
      if (v14[3] >= 0xF000u)
        v43 = 61440;
      else
        v43 = v14[3];
      if (v43 <= 0x1000)
        v44 = 4096;
      else
        v44 = v43;
      v35 = v14 + 4;
      *v21 = (8
            * (((613566757 * (unint64_t)((-16773120 - v42 + (v42 << 12)) >> 13)) >> 32)
             + ((613566757 * (unint64_t)((-16773120 - v38 + (v38 << 12)) >> 13)) >> 32))
            + 8) & 0xFFF0;
      v21[1] = (8
              * (((613566757 * (unint64_t)((-16773120 - v44 + (v44 << 12)) >> 13)) >> 32)
               + ((613566757 * (unint64_t)((-16773120 - v40 + (v40 << 12)) >> 13)) >> 32))
              + 8) & 0xFFF0;
      v36 = v21 + 2;
    }
    else
    {
      v35 = v14;
      v36 = v21;
    }
    if (v22 != v10)
    {
      v45 = 0;
      do
      {
        v46 = &v36[v45];
        v47 = *v35;
        v48 = v35[1];
        if (v47 >= 0xF000)
          v47 = 61440;
        if (v47 <= 0x1000)
          v47 = 4096;
        if (v48 >= 0xF000)
          v48 = 61440;
        if (v48 <= 0x1000)
          v48 = 4096;
        v49 = v35[2];
        v50 = v35[3];
        if (v49 >= 0xF000)
          v49 = 61440;
        if (v49 <= 0x1000)
          v49 = 4096;
        if (v50 >= 0xF000)
          v50 = 61440;
        if (v50 <= 0x1000)
          v50 = 4096;
        *v46 = (8
              * (((613566757 * (unint64_t)((-16773120 - v49 + (v49 << 12)) >> 13)) >> 32)
               + ((613566757 * (unint64_t)((-16773120 - v47 + (v47 << 12)) >> 13)) >> 32))
              + 8) & 0xFFF0;
        v46[1] = (8
                * (((613566757 * (unint64_t)((-16773120 - v50 + (v50 << 12)) >> 13)) >> 32)
                 + ((613566757 * (unint64_t)((-16773120 - v48 + (v48 << 12)) >> 13)) >> 32))
                + 8) & 0xFFF0;
        v45 += 2;
        v35 += 4;
      }
      while (v45 < v34);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v32)
  {
    v51 = 0;
  }
  else
  {
    v52 = 0;
    v51 = v9 - v32;
    do
    {
      v53 = v14;
      v54 = v21;
      if ((v33 & 1) != 0)
      {
        v55 = *v14;
        if (v55 >= 0xF000)
          v55 = 61440;
        if (v55 <= 0x1000)
          v56 = 4096;
        else
          v56 = v55;
        if (v14[1] >= 0xF000u)
          v57 = 61440;
        else
          v57 = v14[1];
        if (v57 <= 0x1000)
          v58 = 4096;
        else
          v58 = v57;
        v59 = v14[2];
        if (v59 >= 0xF000)
          v59 = 61440;
        if (v59 <= 0x1000)
          v60 = 4096;
        else
          v60 = v59;
        if (v14[3] >= 0xF000u)
          v61 = 61440;
        else
          v61 = v14[3];
        if (v61 <= 0x1000)
          v62 = 4096;
        else
          v62 = v61;
        v53 = v14 + 4;
        *v21 = (8
              * (((613566757 * (unint64_t)((-16773120 - v60 + (v60 << 12)) >> 13)) >> 32)
               + ((613566757 * (unint64_t)((-16773120 - v56 + (v56 << 12)) >> 13)) >> 32))
              + 8) & 0xFFF0;
        v21[1] = (8
                * (((613566757 * (unint64_t)((-16773120 - v62 + (v62 << 12)) >> 13)) >> 32)
                 + ((613566757 * (unint64_t)((-16773120 - v58 + (v58 << 12)) >> 13)) >> 32))
                + 8) & 0xFFF0;
        v54 = v21 + 2;
      }
      if (v22 != v10)
      {
        v63 = 0;
        do
        {
          v64 = &v54[v63];
          v65 = *v53;
          v66 = v53[1];
          if (v65 >= 0xF000)
            v65 = 61440;
          if (v65 <= 0x1000)
            v65 = 4096;
          if (v66 >= 0xF000)
            v66 = 61440;
          if (v66 <= 0x1000)
            v66 = 4096;
          v67 = v53[2];
          v68 = v53[3];
          if (v67 >= 0xF000)
            v67 = 61440;
          if (v67 <= 0x1000)
            v67 = 4096;
          if (v68 >= 0xF000)
            v68 = 61440;
          if (v68 <= 0x1000)
            v68 = 4096;
          *v64 = (8
                * (((613566757 * (unint64_t)((-16773120 - v67 + (v67 << 12)) >> 13)) >> 32)
                 + ((613566757 * (unint64_t)((-16773120 - v65 + (v65 << 12)) >> 13)) >> 32))
                + 8) & 0xFFF0;
          v64[1] = (8
                  * (((613566757 * (unint64_t)((-16773120 - v68 + (v68 << 12)) >> 13)) >> 32)
                   + ((613566757 * (unint64_t)((-16773120 - v66 + (v66 << 12)) >> 13)) >> 32))
                  + 8) & 0xFFF0;
          v63 += 2;
          v53 += 4;
        }
        while (v63 < v34);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v52;
    }
    while (v52 != v51);
  }
  if (v51 + v31 < v9)
  {
    if ((v33 & 1) != 0)
    {
      v69 = *v14;
      v70 = v14[1];
      if (v69 >= 0xF000)
        v69 = 61440;
      if (v69 <= 0x1000)
        v69 = 4096;
      if (v70 >= 0xF000)
        v70 = 61440;
      if (v70 <= 0x1000)
        v70 = 4096;
      v71 = v14[2];
      if (v71 >= 0xF000)
        v71 = 61440;
      if (v71 <= 0x1000)
        v71 = 4096;
      if (v14[3] >= 0xF000u)
        v72 = 61440;
      else
        v72 = v14[3];
      if (v72 <= 0x1000)
        v72 = 4096;
      v14 += 4;
      *v21 = (8
            * (((613566757 * (unint64_t)((-16773120 - v71 + (v71 << 12)) >> 13)) >> 32)
             + ((613566757 * (unint64_t)((-16773120 - v69 + (v69 << 12)) >> 13)) >> 32))
            + 8) & 0xFFF0;
      v21[1] = (8
              * (((613566757 * (unint64_t)((-16773120 - v72 + (v72 << 12)) >> 13)) >> 32)
               + ((613566757 * (unint64_t)((-16773120 - v70 + (v70 << 12)) >> 13)) >> 32))
              + 8) & 0xFFF0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v73 = 0;
      do
      {
        v74 = &v21[v73];
        v75 = *v14;
        v76 = v14[1];
        if (v75 >= 0xF000)
          v75 = 61440;
        if (v75 <= 0x1000)
          v75 = 4096;
        if (v76 >= 0xF000)
          v76 = 61440;
        if (v76 <= 0x1000)
          v76 = 4096;
        v77 = v14[2];
        v78 = v14[3];
        if (v77 >= 0xF000)
          v77 = 61440;
        if (v77 <= 0x1000)
          v77 = 4096;
        if (v78 >= 0xF000)
          v78 = 61440;
        if (v78 <= 0x1000)
          v78 = 4096;
        *v74 = (8
              * (((613566757 * (unint64_t)((-16773120 - v77 + (v77 << 12)) >> 13)) >> 32)
               + ((613566757 * (unint64_t)((-16773120 - v75 + (v75 << 12)) >> 13)) >> 32))
              + 8) & 0xFFF0;
        v74[1] = (8
                * (((613566757 * (unint64_t)((-16773120 - v78 + (v78 << 12)) >> 13)) >> 32)
                 + ((613566757 * (unint64_t)((-16773120 - v76 + (v76 << 12)) >> 13)) >> 32))
                + 8) & 0xFFF0;
        v73 += 2;
        v14 += 4;
      }
      while (v73 < v34);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_sv44_tf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unsigned int v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  unsigned __int16 *v35;
  _WORD *v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  int v40;
  unint64_t v41;
  _WORD *v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  unsigned __int16 *v47;
  _WORD *v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  int v52;
  unint64_t v53;
  _WORD *v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unint64_t v59;
  _WORD *v60;
  unsigned int v61;
  unsigned int v62;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = *a7 + *a8 * v18 + v19;
    v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          v30 = *(unsigned __int16 *)(v28 + 2 * i);
          if (v30 >= 0xEB00)
            v30 = 60160;
          if (v30 <= 0x1000)
            v30 = 4096;
          *(_WORD *)(v27 + 2 * i) = 16 * ((-16773120 - v30 + (v30 << 12)) / 0xDB00);
        }
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  v31 = v12 & 1;
  if (v9 >= v31)
    v32 = v12 & 1;
  else
    v32 = 0;
  v33 = v8;
  if (v22 < v10)
    v10 = 0;
  v34 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v37 = *v14;
      if (v37 >= 0xF000)
        v37 = 61440;
      if (v37 <= 0x1000)
        v38 = 4096;
      else
        v38 = v37;
      if (v14[1] >= 0xF000u)
        v39 = 61440;
      else
        v39 = v14[1];
      if (v39 <= 0x1000)
        v40 = 4096;
      else
        v40 = v39;
      v35 = v14 + 4;
      *v21 = 16 * ((613566757 * (unint64_t)((-16773120 - v38 + (v38 << 12)) >> 13)) >> 32);
      v21[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v40 + (v40 << 12)) >> 13)) >> 32);
      v36 = v21 + 2;
    }
    else
    {
      v35 = v14;
      v36 = v21;
    }
    if (v22 != v10)
    {
      v41 = 0;
      do
      {
        v42 = &v36[v41];
        v43 = *v35;
        v44 = v35[1];
        if (v43 >= 0xF000)
          v43 = 61440;
        if (v43 <= 0x1000)
          v43 = 4096;
        if (v44 >= 0xF000)
          v44 = 61440;
        if (v44 <= 0x1000)
          v44 = 4096;
        *v42 = 16 * ((613566757 * (unint64_t)((-16773120 - v43 + (v43 << 12)) >> 13)) >> 32);
        v42[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v44 + (v44 << 12)) >> 13)) >> 32);
        v41 += 2;
        v35 += 4;
      }
      while (v41 < v34);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v32)
  {
    v45 = 0;
  }
  else
  {
    v46 = 0;
    v45 = v9 - v32;
    do
    {
      v47 = v14;
      v48 = v21;
      if ((v33 & 1) != 0)
      {
        v49 = *v14;
        if (v49 >= 0xF000)
          v49 = 61440;
        if (v49 <= 0x1000)
          v50 = 4096;
        else
          v50 = v49;
        if (v14[1] >= 0xF000u)
          v51 = 61440;
        else
          v51 = v14[1];
        if (v51 <= 0x1000)
          v52 = 4096;
        else
          v52 = v51;
        v47 = v14 + 4;
        *v21 = 16 * ((613566757 * (unint64_t)((-16773120 - v50 + (v50 << 12)) >> 13)) >> 32);
        v21[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v52 + (v52 << 12)) >> 13)) >> 32);
        v48 = v21 + 2;
      }
      if (v22 != v10)
      {
        v53 = 0;
        do
        {
          v54 = &v48[v53];
          v55 = *v47;
          v56 = v47[1];
          if (v55 >= 0xF000)
            v55 = 61440;
          if (v55 <= 0x1000)
            v55 = 4096;
          if (v56 >= 0xF000)
            v56 = 61440;
          if (v56 <= 0x1000)
            v56 = 4096;
          *v54 = 16 * ((613566757 * (unint64_t)((-16773120 - v55 + (v55 << 12)) >> 13)) >> 32);
          v54[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v56 + (v56 << 12)) >> 13)) >> 32);
          v53 += 2;
          v47 += 4;
        }
        while (v53 < v34);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v46;
    }
    while (v46 != v45);
  }
  if (v45 + v31 < v9)
  {
    if ((v33 & 1) != 0)
    {
      v57 = *v14;
      v58 = v14[1];
      if (v57 >= 0xF000)
        v57 = 61440;
      if (v57 <= 0x1000)
        v57 = 4096;
      if (v58 >= 0xF000)
        v58 = 61440;
      if (v58 <= 0x1000)
        v58 = 4096;
      v14 += 4;
      *v21 = 16 * ((613566757 * (unint64_t)((-16773120 - v57 + (v57 << 12)) >> 13)) >> 32);
      v21[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v58 + (v58 << 12)) >> 13)) >> 32);
      v21 += 2;
    }
    if (v22 != v10)
    {
      v59 = 0;
      do
      {
        v60 = &v21[v59];
        v61 = *v14;
        v62 = v14[1];
        if (v61 >= 0xF000)
          v61 = 61440;
        if (v61 <= 0x1000)
          v61 = 4096;
        if (v62 >= 0xF000)
          v62 = 61440;
        if (v62 <= 0x1000)
          v62 = 4096;
        *v60 = 16 * ((613566757 * (unint64_t)((-16773120 - v61 + (v61 << 12)) >> 13)) >> 32);
        v60[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v62 + (v62 << 12)) >> 13)) >> 32);
        v59 += 2;
        v14 += 4;
      }
      while (v59 < v34);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sv44_tv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  unint64_t v36;
  unint64_t v37;
  _WORD *v38;
  _WORD *v39;
  unsigned __int16 *v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  unint64_t v44;
  _WORD *v45;
  _WORD *v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  _WORD *v50;
  _WORD *v51;
  unsigned __int16 *v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  unint64_t v56;
  _WORD *v57;
  _WORD *v58;
  int v59;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (_WORD *)(a3[1] + v15 * (v12 + v9) + 4 * (v10 + v8));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - (v10 + v8);
  v25 = v18 - v17;
  if (v24 >= v25)
    v24 = v25;
  v26 = v14 - v13;
  v27 = v20 - v19;
  if (v26 < v20 - v19)
    v27 = v26;
  if (v27)
  {
    v28 = 0;
    v29 = *a4;
    v30 = *a8;
    v31 = *a3 + v29 * v13 + 2 * (v10 + v8);
    if (v13 >= v9)
      v32 = 0;
    else
      v32 = v29;
    v33 = v31 + v32;
    v34 = *a7 + v30 * v19 + v21;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
          *(_WORD *)(v34 + 2 * i) = *(_WORD *)(v33 + 2 * i) & 0xFFF0;
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12)
    v36 = v12;
  else
    v36 = 0;
  if (v24 < v10)
    v10 = 0;
  v37 = v24 - v10;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v40 = (_WORD *)((char *)v16 + v15 + 4);
      v41 = *v40;
      v42 = v40[1];
      v38 = v16 + 4;
      v43 = (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 4)
          + ((unsigned __int16)v16[1] >> 4)
          + ((unsigned __int16)v16[3] >> 4)
          + (v42 >> 4);
      *v23 = (4 * ((*(_WORD *)((char *)v16 + v15) >> 4) + (*v16 >> 4) + (v16[2] >> 4) + (v41 >> 4)) + 8) & 0xFFF0;
      v23[1] = (4 * v43 + 8) & 0xFFF0;
      v39 = v23 + 2;
    }
    else
    {
      v38 = v16;
      v39 = v23;
    }
    if (v24 != v10)
    {
      v44 = 0;
      v45 = v38 + 2;
      do
      {
        v46 = &v39[v44];
        v47 = (*(unsigned __int16 *)((char *)v45 + v15 - 2) >> 4)
            + ((unsigned __int16)*(v45 - 1) >> 4)
            + ((unsigned __int16)v45[1] >> 4)
            + (*(unsigned __int16 *)((char *)v45 + v15 + 2) >> 4);
        *v46 = (4
              * ((*(_WORD *)((char *)v45 + v15 - 4) >> 4)
               + (*(v45 - 2) >> 4)
               + (*v45 >> 4)
               + (*(_WORD *)((char *)v45 + v15) >> 4))
              + 8) & 0xFFF0;
        v46[1] = (4 * v47 + 8) & 0xFFF0;
        v44 += 2;
        v45 += 4;
      }
      while (v44 < v37);
    }
    v16 += v15;
    v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v27 != v36)
  {
    v48 = 0;
    v49 = v27 - v36;
    do
    {
      v50 = v16;
      v51 = v23;
      if ((v8 & 1) != 0)
      {
        v52 = (_WORD *)((char *)v16 + v15 + 4);
        v53 = *v52;
        v54 = v52[1];
        v50 = v16 + 4;
        v55 = (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 4)
            + ((unsigned __int16)v16[1] >> 4)
            + ((unsigned __int16)v16[3] >> 4)
            + (v54 >> 4);
        *v23 = (4 * ((*(_WORD *)((char *)v16 + v15) >> 4) + (*v16 >> 4) + (v16[2] >> 4) + (v53 >> 4)) + 8) & 0xFFF0;
        v23[1] = (4 * v55 + 8) & 0xFFF0;
        v51 = v23 + 2;
      }
      if (v24 != v10)
      {
        v56 = 0;
        v57 = v50 + 2;
        do
        {
          v58 = &v51[v56];
          v59 = (*(unsigned __int16 *)((char *)v57 + v15 - 2) >> 4)
              + ((unsigned __int16)*(v57 - 1) >> 4)
              + ((unsigned __int16)v57[1] >> 4)
              + (*(unsigned __int16 *)((char *)v57 + v15 + 2) >> 4);
          *v58 = (4
                * ((*(_WORD *)((char *)v57 + v15 - 4) >> 4)
                 + (*(v57 - 2) >> 4)
                 + (*v57 >> 4)
                 + (*(_WORD *)((char *)v57 + v15) >> 4))
                + 8) & 0xFFF0;
          v58[1] = (4 * v59 + 8) & 0xFFF0;
          v56 += 2;
          v57 += 4;
        }
        while (v56 < v37);
      }
      v16 += v15;
      v23 = (_WORD *)((char *)v23 + v22);
      v48 += 2;
    }
    while (v48 < v49);
  }
  return 0;
}

uint64_t vt_CopyDec_sv44_tv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  unint64_t v36;
  unint64_t v37;
  _WORD *v38;
  _WORD *v39;
  __int16 v40;
  unint64_t v41;
  _WORD *v42;
  __int16 v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _WORD *v47;
  _WORD *v48;
  __int16 v49;
  unint64_t v50;
  _WORD *v51;
  __int16 v52;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (_WORD *)(a3[1] + v15 * (v12 + v8) + 4 * (v10 + v9));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - (v10 + v9);
  v25 = v18 - v17;
  if (v24 >= v25)
    v24 = v25;
  v26 = v14 - v13;
  v27 = v20 - v19;
  if (v26 < v20 - v19)
    v27 = v26;
  if (v27)
  {
    v28 = 0;
    v29 = *a4;
    v30 = *a8;
    v31 = *a3 + v29 * v13 + 2 * (v10 + v9);
    if (v13 >= v8)
      v32 = 0;
    else
      v32 = v29;
    v33 = v31 + v32;
    v34 = *a7 + v30 * v19 + v21;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
          *(_WORD *)(v34 + 2 * i) = *(_WORD *)(v33 + 2 * i) & 0xFFF0;
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12)
    v36 = v12;
  else
    v36 = 0;
  if (v24 < v10)
    v10 = 0;
  v37 = v24 - v10;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v38 = v16 + 4;
      v40 = v16[1] & 0xFFF0;
      *v23 = *v16 & 0xFFF0;
      v23[1] = v40;
      v39 = v23 + 2;
    }
    else
    {
      v38 = v16;
      v39 = v23;
    }
    if (v24 != v10)
    {
      v41 = 0;
      do
      {
        v42 = &v39[v41];
        v43 = v38[1] & 0xFFF0;
        *v42 = *v38 & 0xFFF0;
        v42[1] = v43;
        v41 += 2;
        v38 += 4;
      }
      while (v41 < v37);
    }
    v16 += v15;
    v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v27 != v36)
  {
    v44 = 0;
    v45 = v27 - v36;
    v46 = 2 * v15;
    do
    {
      v47 = v16;
      v48 = v23;
      if ((v9 & 1) != 0)
      {
        v47 = v16 + 4;
        v49 = v16[1] & 0xFFF0;
        *v23 = *v16 & 0xFFF0;
        v23[1] = v49;
        v48 = v23 + 2;
      }
      if (v24 != v10)
      {
        v50 = 0;
        do
        {
          v51 = &v48[v50];
          v52 = v47[1] & 0xFFF0;
          *v51 = *v47 & 0xFFF0;
          v51[1] = v52;
          v50 += 2;
          v47 += 4;
        }
        while (v50 < v37);
      }
      v16 = (_WORD *)((char *)v16 + v46);
      v23 = (_WORD *)((char *)v23 + v22);
      v44 += 2;
    }
    while (v44 < v45);
  }
  return 0;
}

uint64_t vt_CopyAvg_sv44_tf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  unsigned __int16 *v39;
  _WORD *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  unsigned __int16 *v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  unint64_t v57;
  unsigned __int16 *v58;
  unsigned int v59;
  unsigned __int16 *v60;
  int v61;
  unsigned int v62;
  int v63;
  unsigned int v64;
  int v65;
  unsigned int v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  int v71;
  unsigned int v72;
  int v73;
  unsigned int v74;
  int v75;
  _WORD *v76;
  unsigned int v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unsigned __int16 *v84;
  _WORD *v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned __int16 *v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  int v97;
  unint64_t v98;
  unsigned __int16 *v99;
  unsigned int v100;
  unsigned __int16 *v101;
  int v102;
  unsigned int v103;
  int v104;
  unsigned int v105;
  int v106;
  unsigned int v107;
  int v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  int v112;
  unsigned int v113;
  int v114;
  unsigned int v115;
  int v116;
  _WORD *v117;
  unsigned int v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * (v12 + v9) + 4 * (v10 + v8));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - (v10 + v8);
  v25 = v18 - v17;
  if (v24 >= v25)
    v24 = v25;
  v26 = v14 - v13;
  v27 = v20 - v19;
  if (v26 < v20 - v19)
    v27 = v26;
  if (v27)
  {
    v28 = 0;
    v29 = *a4;
    v30 = *a3 + *a4 * v13 + 2 * (v10 + v8);
    v31 = *a8;
    if (v13 >= v9)
      v32 = 0;
    else
      v32 = *a4;
    v33 = v30 + v32;
    v34 = *a7 + v31 * v19 + v21;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
        {
          v36 = *(unsigned __int16 *)(v33 + 2 * i);
          if (v36 >= 0xEB00)
            v36 = 60160;
          if (v36 <= 0x1000)
            v36 = 4096;
          *(_WORD *)(v34 + 2 * i) = 16 * ((-16773120 - v36 + (v36 << 12)) / 0xDB00);
        }
      }
      v33 += v29;
      v34 += v31;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12)
    v37 = v12;
  else
    v37 = 0;
  if (v24 < v10)
    v10 = 0;
  v38 = v24 - v10;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v41 = *v16;
      v42 = v16[1];
      v43 = *(unsigned __int16 *)((char *)v16 + v15);
      v44 = *(unsigned __int16 *)((char *)v16 + v15 + 2);
      if (v41 >= 0xF000)
        v41 = 61440;
      if (v41 <= 0x1000)
        v41 = 4096;
      if (v42 >= 0xF000)
        v42 = 61440;
      if (v42 <= 0x1000)
        v42 = 4096;
      if (v43 >= 0xF000)
        v43 = 61440;
      if (v43 <= 0x1000)
        v43 = 4096;
      if (v44 >= 0xF000)
        v44 = 61440;
      v45 = v16[2];
      if (v44 <= 0x1000)
        v46 = 4096;
      else
        v46 = v44;
      v47 = v16[3];
      v48 = (unsigned __int16 *)((char *)v16 + v15 + 4);
      v49 = *v48;
      v50 = v48[1];
      if (v45 >= 0xF000)
        v45 = 61440;
      if (v45 <= 0x1000)
        v45 = 4096;
      if (v47 >= 0xF000)
        v47 = 61440;
      if (v47 <= 0x1000)
        v51 = 4096;
      else
        v51 = v47;
      if (v49 >= 0xF000)
        v52 = 61440;
      else
        v52 = v49;
      if (v52 <= 0x1000)
        v53 = 4096;
      else
        v53 = v52;
      v54 = -16773120 - v41 + (v41 << 12);
      if (v50 >= 0xF000)
        v55 = 61440;
      else
        v55 = v50;
      if (v55 <= 0x1000)
        v56 = 4096;
      else
        v56 = v55;
      v39 = v16 + 4;
      *v23 = (4
            * (((613566757 * (unint64_t)((-16773120 - v43 + (v43 << 12)) >> 13)) >> 32)
             + ((613566757 * (unint64_t)(v54 >> 13)) >> 32)
             + ((613566757 * (unint64_t)((-16773120 - v45 + (v45 << 12)) >> 13)) >> 32)
             + ((613566757 * (unint64_t)((-16773120 - v53 + (v53 << 12)) >> 13)) >> 32))
            + 8) & 0xFFF0;
      v23[1] = (4
              * (((613566757 * (unint64_t)((-16773120 - v46 + (v46 << 12)) >> 13)) >> 32)
               + ((613566757 * (unint64_t)((-16773120 - v42 + (v42 << 12)) >> 13)) >> 32)
               + ((613566757 * (unint64_t)((-16773120 - v51 + (v51 << 12)) >> 13)) >> 32)
               + ((613566757 * (unint64_t)((-16773120 - v56 + (v56 << 12)) >> 13)) >> 32))
              + 8) & 0xFFF0;
      v40 = v23 + 2;
    }
    else
    {
      v39 = v16;
      v40 = v23;
    }
    if (v24 != v10)
    {
      v57 = 0;
      v58 = v39 + 2;
      do
      {
        v59 = *(v58 - 2);
        v60 = (unsigned __int16 *)((char *)v58 + v15);
        if (v59 >= 0xF000)
          v59 = 61440;
        if (v59 <= 0x1000)
          v61 = 4096;
        else
          v61 = v59;
        if (*(v58 - 1) >= 0xF000u)
          v62 = 61440;
        else
          v62 = *(v58 - 1);
        if (v62 <= 0x1000)
          v63 = 4096;
        else
          v63 = v62;
        if (*(unsigned __int16 *)((char *)v58 + v15 - 4) >= 0xF000u)
          v64 = 61440;
        else
          v64 = *(unsigned __int16 *)((char *)v58 + v15 - 4);
        if (v64 <= 0x1000)
          v65 = 4096;
        else
          v65 = v64;
        if (*(unsigned __int16 *)((char *)v58 + v15 - 2) >= 0xF000u)
          v66 = 61440;
        else
          v66 = *(unsigned __int16 *)((char *)v58 + v15 - 2);
        if (v66 <= 0x1000)
          v67 = 4096;
        else
          v67 = v66;
        v68 = *v58;
        v69 = *v60;
        if (v68 >= 0xF000)
          v68 = 61440;
        v70 = v60[1];
        if (v68 <= 0x1000)
          v71 = 4096;
        else
          v71 = v68;
        if (v58[1] >= 0xF000u)
          v72 = 61440;
        else
          v72 = v58[1];
        if (v72 <= 0x1000)
          v73 = 4096;
        else
          v73 = v72;
        if (v69 >= 0xF000)
          v74 = 61440;
        else
          v74 = v69;
        if (v74 <= 0x1000)
          v75 = 4096;
        else
          v75 = v74;
        v76 = &v40[v57];
        v77 = -16773120 - v61 + (v61 << 12);
        if (v70 >= 0xF000)
          v70 = 61440;
        v78 = (613566757 * (unint64_t)(v77 >> 13)) >> 32;
        v79 = (613566757 * (unint64_t)((-16773120 - v63 + (v63 << 12)) >> 13)) >> 32;
        v80 = (613566757 * (unint64_t)((-16773120 - v65 + (v65 << 12)) >> 13)) >> 32;
        v81 = (613566757 * (unint64_t)((-16773120 - v67 + (v67 << 12)) >> 13)) >> 32;
        if (v70 <= 0x1000)
          v70 = 4096;
        *v76 = (4
              * (v80
               + v78
               + ((613566757 * (unint64_t)((-16773120 - v71 + (v71 << 12)) >> 13)) >> 32)
               + ((613566757 * (unint64_t)((-16773120 - v75 + (v75 << 12)) >> 13)) >> 32))
              + 8) & 0xFFF0;
        v76[1] = (4
                * (v81
                 + v79
                 + ((613566757 * (unint64_t)((-16773120 - v73 + (v73 << 12)) >> 13)) >> 32)
                 + ((613566757 * (unint64_t)((-16773120 - v70 + (v70 << 12)) >> 13)) >> 32))
                + 8) & 0xFFF0;
        v57 += 2;
        v58 += 4;
      }
      while (v57 < v38);
    }
    v16 += v15;
    v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v27 != v37)
  {
    v82 = 0;
    v83 = v27 - v37;
    do
    {
      v84 = v16;
      v85 = v23;
      if ((v8 & 1) != 0)
      {
        v86 = *v16;
        v87 = v16[1];
        v88 = *(unsigned __int16 *)((char *)v16 + v15);
        v89 = *(unsigned __int16 *)((char *)v16 + v15 + 2);
        if (v86 >= 0xF000)
          v86 = 61440;
        if (v86 <= 0x1000)
          v86 = 4096;
        if (v87 >= 0xF000)
          v87 = 61440;
        if (v87 <= 0x1000)
          v87 = 4096;
        if (v88 >= 0xF000)
          v88 = 61440;
        if (v88 <= 0x1000)
          v88 = 4096;
        if (v89 >= 0xF000)
          v89 = 61440;
        if (v89 <= 0x1000)
          v90 = 4096;
        else
          v90 = v89;
        v91 = v16[2];
        v92 = v16[3];
        v93 = (unsigned __int16 *)((char *)v16 + v15 + 4);
        v94 = *v93;
        v95 = v93[1];
        if (v91 >= 0xF000)
          v91 = 61440;
        if (v91 <= 0x1000)
          v91 = 4096;
        if (v92 >= 0xF000)
          v92 = 61440;
        if (v92 <= 0x1000)
          v92 = 4096;
        if (v94 >= 0xF000)
          v94 = 61440;
        if (v94 <= 0x1000)
          v94 = 4096;
        v96 = -16773120 - v86 + (v86 << 12);
        if (v95 >= 0xF000)
          v95 = 61440;
        if (v95 <= 0x1000)
          v97 = 4096;
        else
          v97 = v95;
        v84 = v16 + 4;
        *v23 = (4
              * (((613566757 * (unint64_t)((-16773120 - v88 + (v88 << 12)) >> 13)) >> 32)
               + ((613566757 * (unint64_t)(v96 >> 13)) >> 32)
               + ((613566757 * (unint64_t)((-16773120 - v91 + (v91 << 12)) >> 13)) >> 32)
               + ((613566757 * (unint64_t)((-16773120 - v94 + (v94 << 12)) >> 13)) >> 32))
              + 8) & 0xFFF0;
        v23[1] = (4
                * (((613566757 * (unint64_t)((-16773120 - v90 + (v90 << 12)) >> 13)) >> 32)
                 + ((613566757 * (unint64_t)((-16773120 - v87 + (v87 << 12)) >> 13)) >> 32)
                 + ((613566757 * (unint64_t)((-16773120 - v92 + (v92 << 12)) >> 13)) >> 32)
                 + ((613566757 * (unint64_t)((-16773120 - v97 + (v97 << 12)) >> 13)) >> 32))
                + 8) & 0xFFF0;
        v85 = v23 + 2;
      }
      if (v24 != v10)
      {
        v98 = 0;
        v99 = v84 + 2;
        do
        {
          v100 = *(v99 - 2);
          v101 = (unsigned __int16 *)((char *)v99 + v15);
          if (v100 >= 0xF000)
            v100 = 61440;
          if (v100 <= 0x1000)
            v102 = 4096;
          else
            v102 = v100;
          if (*(v99 - 1) >= 0xF000u)
            v103 = 61440;
          else
            v103 = *(v99 - 1);
          if (v103 <= 0x1000)
            v104 = 4096;
          else
            v104 = v103;
          if (*(unsigned __int16 *)((char *)v99 + v15 - 4) >= 0xF000u)
            v105 = 61440;
          else
            v105 = *(unsigned __int16 *)((char *)v99 + v15 - 4);
          if (v105 <= 0x1000)
            v106 = 4096;
          else
            v106 = v105;
          if (*(unsigned __int16 *)((char *)v99 + v15 - 2) >= 0xF000u)
            v107 = 61440;
          else
            v107 = *(unsigned __int16 *)((char *)v99 + v15 - 2);
          if (v107 <= 0x1000)
            v108 = 4096;
          else
            v108 = v107;
          v109 = *v99;
          v110 = *v101;
          if (v109 >= 0xF000)
            v109 = 61440;
          v111 = v101[1];
          if (v109 <= 0x1000)
            v112 = 4096;
          else
            v112 = v109;
          if (v99[1] >= 0xF000u)
            v113 = 61440;
          else
            v113 = v99[1];
          if (v113 <= 0x1000)
            v114 = 4096;
          else
            v114 = v113;
          if (v110 >= 0xF000)
            v115 = 61440;
          else
            v115 = v110;
          if (v115 <= 0x1000)
            v116 = 4096;
          else
            v116 = v115;
          v117 = &v85[v98];
          v118 = -16773120 - v102 + (v102 << 12);
          if (v111 >= 0xF000)
            v111 = 61440;
          v119 = (613566757 * (unint64_t)(v118 >> 13)) >> 32;
          v120 = (613566757 * (unint64_t)((-16773120 - v104 + (v104 << 12)) >> 13)) >> 32;
          v121 = (613566757 * (unint64_t)((-16773120 - v106 + (v106 << 12)) >> 13)) >> 32;
          v122 = (613566757 * (unint64_t)((-16773120 - v108 + (v108 << 12)) >> 13)) >> 32;
          if (v111 <= 0x1000)
            v111 = 4096;
          *v117 = (4
                 * (v121
                  + v119
                  + ((613566757 * (unint64_t)((-16773120 - v112 + (v112 << 12)) >> 13)) >> 32)
                  + ((613566757 * (unint64_t)((-16773120 - v116 + (v116 << 12)) >> 13)) >> 32))
                 + 8) & 0xFFF0;
          v117[1] = (4
                   * (v122
                    + v120
                    + ((613566757 * (unint64_t)((-16773120 - v114 + (v114 << 12)) >> 13)) >> 32)
                    + ((613566757 * (unint64_t)((-16773120 - v111 + (v111 << 12)) >> 13)) >> 32))
                   + 8) & 0xFFF0;
          v98 += 2;
          v99 += 4;
        }
        while (v98 < v38);
      }
      v16 += v15;
      v23 = (_WORD *)((char *)v23 + v22);
      v82 += 2;
    }
    while (v82 < v83);
  }
  return 0;
}

uint64_t vt_CopyDec_sv44_tf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  unsigned __int16 *v39;
  _WORD *v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  int v44;
  unint64_t v45;
  _WORD *v46;
  unsigned int v47;
  unsigned int v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unsigned __int16 *v52;
  _WORD *v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  int v57;
  unint64_t v58;
  _WORD *v59;
  unsigned int v60;
  unsigned int v61;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * (v12 + v8) + 4 * (v10 + v9));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - (v10 + v9);
  v25 = v18 - v17;
  if (v24 >= v25)
    v24 = v25;
  v26 = v14 - v13;
  v27 = v20 - v19;
  if (v26 < v20 - v19)
    v27 = v26;
  if (v27)
  {
    v28 = 0;
    v29 = *a4;
    v30 = *a3 + *a4 * v13 + 2 * (v10 + v9);
    v31 = *a8;
    if (v13 >= v8)
      v32 = 0;
    else
      v32 = v29;
    v33 = v30 + v32;
    v34 = *a7 + v31 * v19 + v21;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
        {
          v36 = *(unsigned __int16 *)(v33 + 2 * i);
          if (v36 >= 0xEB00)
            v36 = 60160;
          if (v36 <= 0x1000)
            v36 = 4096;
          *(_WORD *)(v34 + 2 * i) = 16 * ((-16773120 - v36 + (v36 << 12)) / 0xDB00);
        }
      }
      v33 += v29;
      v34 += v31;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12)
    v37 = v12;
  else
    v37 = 0;
  if (v24 < v10)
    v10 = 0;
  v38 = v24 - v10;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v41 = *v16;
      if (v41 >= 0xF000)
        v41 = 61440;
      if (v41 <= 0x1000)
        v42 = 4096;
      else
        v42 = v41;
      if (v16[1] >= 0xF000u)
        v43 = 61440;
      else
        v43 = v16[1];
      if (v43 <= 0x1000)
        v44 = 4096;
      else
        v44 = v43;
      v39 = v16 + 4;
      *v23 = 16 * ((613566757 * (unint64_t)((-16773120 - v42 + (v42 << 12)) >> 13)) >> 32);
      v23[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v44 + (v44 << 12)) >> 13)) >> 32);
      v40 = v23 + 2;
    }
    else
    {
      v39 = v16;
      v40 = v23;
    }
    if (v24 != v10)
    {
      v45 = 0;
      do
      {
        v46 = &v40[v45];
        v47 = *v39;
        v48 = v39[1];
        if (v47 >= 0xF000)
          v47 = 61440;
        if (v47 <= 0x1000)
          v47 = 4096;
        if (v48 >= 0xF000)
          v48 = 61440;
        if (v48 <= 0x1000)
          v48 = 4096;
        *v46 = 16 * ((613566757 * (unint64_t)((-16773120 - v47 + (v47 << 12)) >> 13)) >> 32);
        v46[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v48 + (v48 << 12)) >> 13)) >> 32);
        v45 += 2;
        v39 += 4;
      }
      while (v45 < v38);
    }
    v16 += v15;
    v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v27 != v37)
  {
    v49 = 0;
    v50 = v27 - v37;
    v51 = 2 * v15;
    do
    {
      v52 = v16;
      v53 = v23;
      if ((v9 & 1) != 0)
      {
        v54 = *v16;
        if (v54 >= 0xF000)
          v54 = 61440;
        if (v54 <= 0x1000)
          v55 = 4096;
        else
          v55 = v54;
        if (v16[1] >= 0xF000u)
          v56 = 61440;
        else
          v56 = v16[1];
        if (v56 <= 0x1000)
          v57 = 4096;
        else
          v57 = v56;
        v52 = v16 + 4;
        *v23 = 16 * ((613566757 * (unint64_t)((-16773120 - v55 + (v55 << 12)) >> 13)) >> 32);
        v23[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v57 + (v57 << 12)) >> 13)) >> 32);
        v53 = v23 + 2;
      }
      if (v24 != v10)
      {
        v58 = 0;
        do
        {
          v59 = &v53[v58];
          v60 = *v52;
          v61 = v52[1];
          if (v60 >= 0xF000)
            v60 = 61440;
          if (v60 <= 0x1000)
            v60 = 4096;
          if (v61 >= 0xF000)
            v61 = 61440;
          if (v61 <= 0x1000)
            v61 = 4096;
          *v59 = 16 * ((613566757 * (unint64_t)((-16773120 - v60 + (v60 << 12)) >> 13)) >> 32);
          v59[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v61 + (v61 << 12)) >> 13)) >> 32);
          v58 += 2;
          v52 += 4;
        }
        while (v58 < v38);
      }
      v16 = (unsigned __int16 *)((char *)v16 + v51);
      v23 = (_WORD *)((char *)v23 + v22);
      v49 += 2;
    }
    while (v49 < v50);
  }
  return 0;
}

uint64_t vt_Copy_s4as_x4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  __int16 *v36;
  _WORD *v37;
  __int16 v38;
  unint64_t v39;
  unint64_t v40;
  __int16 v41;
  __int16 v42;
  __int16 v43;
  __int16 v44;
  unint64_t v45;
  uint64_t v46;
  __int16 *v47;
  _WORD *v48;
  __int16 v49;
  unint64_t v50;
  unint64_t v51;
  __int16 v52;
  __int16 v53;
  __int16 v54;
  __int16 v55;
  __int16 v56;
  __int16 v57;
  unint64_t v58;
  __int16 v59;
  __int16 v60;
  __int16 v61;
  __int16 v62;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a2[3];
  v12 = a4[1];
  v13 = (__int16 *)(a3[1] + v12 * v8 + 4 * v9);
  v15 = a6[4];
  v14 = a6[5];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v14 + 4 * v15);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (v11 >= a6[3])
    v11 = a6[3];
  if (v11)
  {
    v18 = 0;
    v19 = *a8;
    v20 = a8[2];
    v21 = a7[2] + v20 * v14;
    v22 = *a7 + *a8 * v14;
    v23 = *a4;
    v24 = a4[2];
    v25 = v21 + 2 * v15;
    v26 = v22 + 2 * v15;
    v27 = a3[2] + v24 * v8 + 2 * v9;
    v28 = *a3 + v23 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
        {
          *(_WORD *)(v25 + 2 * i) = *(_WORD *)(v27 + 2 * i);
          *(_WORD *)(v26 + 2 * i) = *(_WORD *)(v28 + 2 * i) & 0xFFC0;
        }
      }
      v28 += v23;
      v26 += v19;
      v27 += v24;
      v25 += v20;
      ++v18;
    }
    while (v18 != v11);
  }
  v30 = v8 & 1;
  if (v11 >= v30)
    v31 = v8 & 1;
  else
    v31 = 0;
  v32 = v9;
  v33 = v9 & 1;
  if (v10 >= v33)
    v34 = v33;
  else
    v34 = 0;
  v35 = v10 - v34;
  if ((v8 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v36 = v13 + 2;
      v38 = v13[1] & 0xFFC0;
      *v17 = *v13 & 0xFFC0;
      v17[1] = v38;
      v37 = v17 + 2;
    }
    else
    {
      v36 = v13;
      v37 = v17;
    }
    if (v10 == v34)
    {
      v39 = 0;
    }
    else
    {
      v40 = v10 - v34;
      do
      {
        v41 = *v36;
        v42 = v36[1];
        v36 += 2;
        *v37 = v41 & 0xFFC0;
        v37[1] = v42 & 0xFFC0;
        v37 += 2;
        --v40;
      }
      while (v40);
      v39 = v10 - v34;
    }
    if (v39 + v33 < v10)
    {
      v43 = *v36 & 0xFFC0;
      v44 = v36[1] & 0xFFC0;
      *v37 = v43;
      v37[1] = v44;
    }
    v13 = (__int16 *)((char *)v13 + v12);
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v11 == v31)
  {
    v45 = 0;
  }
  else
  {
    v46 = 0;
    v45 = v11 - v31;
    do
    {
      v47 = v13;
      v48 = v17;
      if ((v32 & 1) != 0)
      {
        v47 = v13 + 2;
        v49 = v13[1] & 0xFFC0;
        *v17 = *v13 & 0xFFC0;
        v17[1] = v49;
        v48 = v17 + 2;
      }
      if (v10 == v34)
      {
        v50 = 0;
      }
      else
      {
        v51 = v10 - v34;
        do
        {
          v52 = *v47;
          v53 = v47[1];
          v47 += 2;
          *v48 = v52 & 0xFFC0;
          v48[1] = v53 & 0xFFC0;
          v48 += 2;
          --v51;
        }
        while (v51);
        v50 = v10 - v34;
      }
      if (v50 + v33 < v10)
      {
        v54 = *v47 & 0xFFC0;
        v55 = v47[1] & 0xFFC0;
        *v48 = v54;
        v48[1] = v55;
      }
      v13 = (__int16 *)((char *)v13 + v12);
      v17 = (_WORD *)((char *)v17 + v16);
      ++v46;
    }
    while (v46 != v45);
  }
  if (v45 + v30 < v11)
  {
    if ((v32 & 1) != 0)
    {
      v56 = *v13;
      v57 = v13[1];
      v13 += 2;
      *v17 = v56 & 0xFFC0;
      v17[1] = v57 & 0xFFC0;
      v17 += 2;
    }
    if (v10 == v34)
    {
      v35 = 0;
    }
    else
    {
      v58 = v10 - v34;
      do
      {
        v59 = *v13;
        v60 = v13[1];
        v13 += 2;
        *v17 = v59 & 0xFFC0;
        v17[1] = v60 & 0xFFC0;
        v17 += 2;
        --v58;
      }
      while (v58);
    }
    if (v35 + v33 < v10)
    {
      v61 = *v13 & 0xFFC0;
      v62 = v13[1] & 0xFFC0;
      *v17 = v61;
      v17[1] = v62;
    }
  }
  return 0;
}

uint64_t vt_Copy_sv44_x444(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  __int16 *v30;
  _WORD *v31;
  __int16 v32;
  unint64_t v33;
  unint64_t v34;
  __int16 v35;
  __int16 v36;
  __int16 v37;
  __int16 v38;
  unint64_t v39;
  uint64_t v40;
  __int16 *v41;
  _WORD *v42;
  __int16 v43;
  unint64_t v44;
  unint64_t v45;
  __int16 v46;
  __int16 v47;
  __int16 v48;
  __int16 v49;
  __int16 v50;
  __int16 v51;
  unint64_t v52;
  __int16 v53;
  __int16 v54;
  __int16 v55;
  __int16 v56;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a2[3];
  v12 = a4[1];
  v13 = (__int16 *)(a3[1] + v12 * v8 + 4 * v9);
  v14 = a6[4];
  v15 = a6[5];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (v11 >= a6[3])
    v11 = a6[3];
  if (v11)
  {
    v18 = 0;
    v19 = *a4;
    v20 = *a8;
    v21 = *a7 + *a8 * v15 + 2 * v14;
    v22 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
          *(_WORD *)(v21 + 2 * i) = *(_WORD *)(v22 + 2 * i) & 0xFFC0;
      }
      v22 += v19;
      v21 += v20;
      ++v18;
    }
    while (v18 != v11);
  }
  v24 = v8 & 1;
  if (v11 >= v24)
    v25 = v8 & 1;
  else
    v25 = 0;
  v26 = v9;
  v27 = v9 & 1;
  if (v10 >= v27)
    v28 = v27;
  else
    v28 = 0;
  v29 = v10 - v28;
  if ((v8 & 1) != 0)
  {
    if ((v26 & 1) != 0)
    {
      v30 = v13 + 2;
      v32 = v13[1] & 0xFFC0;
      *v17 = *v13 & 0xFFC0;
      v17[1] = v32;
      v31 = v17 + 2;
    }
    else
    {
      v30 = v13;
      v31 = v17;
    }
    if (v10 == v28)
    {
      v33 = 0;
    }
    else
    {
      v34 = v10 - v28;
      do
      {
        v35 = *v30;
        v36 = v30[1];
        v30 += 2;
        *v31 = v35 & 0xFFC0;
        v31[1] = v36 & 0xFFC0;
        v31 += 2;
        --v34;
      }
      while (v34);
      v33 = v10 - v28;
    }
    if (v33 + v27 < v10)
    {
      v37 = *v30 & 0xFFC0;
      v38 = v30[1] & 0xFFC0;
      *v31 = v37;
      v31[1] = v38;
    }
    v13 = (__int16 *)((char *)v13 + v12);
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v11 == v25)
  {
    v39 = 0;
  }
  else
  {
    v40 = 0;
    v39 = v11 - v25;
    do
    {
      v41 = v13;
      v42 = v17;
      if ((v26 & 1) != 0)
      {
        v41 = v13 + 2;
        v43 = v13[1] & 0xFFC0;
        *v17 = *v13 & 0xFFC0;
        v17[1] = v43;
        v42 = v17 + 2;
      }
      if (v10 == v28)
      {
        v44 = 0;
      }
      else
      {
        v45 = v10 - v28;
        do
        {
          v46 = *v41;
          v47 = v41[1];
          v41 += 2;
          *v42 = v46 & 0xFFC0;
          v42[1] = v47 & 0xFFC0;
          v42 += 2;
          --v45;
        }
        while (v45);
        v44 = v10 - v28;
      }
      if (v44 + v27 < v10)
      {
        v48 = *v41 & 0xFFC0;
        v49 = v41[1] & 0xFFC0;
        *v42 = v48;
        v42[1] = v49;
      }
      v13 = (__int16 *)((char *)v13 + v12);
      v17 = (_WORD *)((char *)v17 + v16);
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v24 < v11)
  {
    if ((v26 & 1) != 0)
    {
      v50 = *v13;
      v51 = v13[1];
      v13 += 2;
      *v17 = v50 & 0xFFC0;
      v17[1] = v51 & 0xFFC0;
      v17 += 2;
    }
    if (v10 == v28)
    {
      v29 = 0;
    }
    else
    {
      v52 = v10 - v28;
      do
      {
        v53 = *v13;
        v54 = v13[1];
        v13 += 2;
        *v17 = v53 & 0xFFC0;
        v17[1] = v54 & 0xFFC0;
        v17 += 2;
        --v52;
      }
      while (v52);
    }
    if (v29 + v27 < v10)
    {
      v55 = *v13 & 0xFFC0;
      v56 = v13[1] & 0xFFC0;
      *v17 = v55;
      v17[1] = v56;
    }
  }
  return 0;
}

uint64_t vt_Copy_sv44_xf44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned __int16 *v32;
  _WORD *v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unint64_t v43;
  uint64_t v44;
  unsigned __int16 *v45;
  _WORD *v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unint64_t v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a2[3];
  v12 = a4[1];
  v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 4 * v9);
  v14 = a6[4];
  v15 = a6[5];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (v11 >= a6[3])
    v18 = a6[3];
  else
    v18 = v11;
  if (v18)
  {
    v19 = 0;
    v20 = *a4;
    v21 = *a8;
    v22 = *a7 + *a8 * v15 + 2 * v14;
    v23 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
        {
          v25 = *(unsigned __int16 *)(v23 + 2 * i);
          if (v25 >= 0xEB00)
            v25 = 60160;
          if (v25 <= 0x1000)
            v25 = 4096;
          *(_WORD *)(v22 + 2 * i) = (unsigned __int16)((-4190208 - v25 + (v25 << 10)) / 0xDB00) << 6;
        }
      }
      v23 += v20;
      v22 += v21;
      ++v19;
    }
    while (v19 != v18);
  }
  v26 = v8 & 1;
  if (v18 >= v26)
    v27 = v8 & 1;
  else
    v27 = 0;
  v28 = v9;
  v29 = v9 & 1;
  if (v10 >= v29)
    v30 = v29;
  else
    v30 = 0;
  v31 = v10 - v30;
  if ((v8 & 1) != 0)
  {
    if ((v28 & 1) != 0)
    {
      v34 = *v13;
      v35 = v13[1];
      if (v34 >= 0xF000)
        v34 = 61440;
      if (v34 <= 0x1000)
        v34 = 4096;
      if (v35 >= 0xF000)
        v35 = 61440;
      if (v35 <= 0x1000)
        v36 = 4096;
      else
        v36 = v35;
      v32 = v13 + 2;
      *v17 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v34 + (v34 << 10)) >> 13)) >> 32) << 6;
      v17[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v36 + (v36 << 10)) >> 13)) >> 32) << 6;
      v33 = v17 + 2;
    }
    else
    {
      v32 = v13;
      v33 = v17;
    }
    if (v10 == v30)
    {
      v37 = 0;
    }
    else
    {
      v38 = v10 - v30;
      do
      {
        v39 = *v32;
        v40 = v32[1];
        if (v39 >= 0xF000)
          v39 = 61440;
        if (v39 <= 0x1000)
          v39 = 4096;
        if (v40 >= 0xF000)
          v40 = 61440;
        if (v40 <= 0x1000)
          v40 = 4096;
        v32 += 2;
        *v33 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v39 + (v39 << 10)) >> 13)) >> 32) << 6;
        v33[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v40 + (v40 << 10)) >> 13)) >> 32) << 6;
        v33 += 2;
        --v38;
      }
      while (v38);
      v37 = v10 - v30;
    }
    if (v37 + v29 < v10)
    {
      v41 = *v32;
      v42 = v32[1];
      if (v41 >= 0xF000)
        v41 = 61440;
      if (v41 <= 0x1000)
        v41 = 4096;
      if (v42 >= 0xF000)
        v42 = 61440;
      if (v42 <= 0x1000)
        v42 = 4096;
      *v33 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v41 + (v41 << 10)) >> 13)) >> 32) << 6;
      v33[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v42 + (v42 << 10)) >> 13)) >> 32) << 6;
    }
    v13 = (unsigned __int16 *)((char *)v13 + v12);
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v18 == v27)
  {
    v43 = 0;
  }
  else
  {
    v44 = 0;
    v43 = v18 - v27;
    do
    {
      v45 = v13;
      v46 = v17;
      if ((v28 & 1) != 0)
      {
        v47 = *v13;
        v48 = v13[1];
        if (v47 >= 0xF000)
          v47 = 61440;
        if (v47 <= 0x1000)
          v47 = 4096;
        if (v48 >= 0xF000)
          v48 = 61440;
        if (v48 <= 0x1000)
          v49 = 4096;
        else
          v49 = v48;
        v45 = v13 + 2;
        *v17 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v47 + (v47 << 10)) >> 13)) >> 32) << 6;
        v17[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v49 + (v49 << 10)) >> 13)) >> 32) << 6;
        v46 = v17 + 2;
      }
      if (v10 == v30)
      {
        v50 = 0;
      }
      else
      {
        v51 = v10 - v30;
        do
        {
          v52 = *v45;
          v53 = v45[1];
          if (v52 >= 0xF000)
            v52 = 61440;
          if (v52 <= 0x1000)
            v52 = 4096;
          if (v53 >= 0xF000)
            v53 = 61440;
          if (v53 <= 0x1000)
            v53 = 4096;
          v45 += 2;
          *v46 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v52 + (v52 << 10)) >> 13)) >> 32) << 6;
          v46[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v53 + (v53 << 10)) >> 13)) >> 32) << 6;
          v46 += 2;
          --v51;
        }
        while (v51);
        v50 = v10 - v30;
      }
      if (v50 + v29 < v10)
      {
        v54 = *v45;
        v55 = v45[1];
        if (v54 >= 0xF000)
          v54 = 61440;
        if (v54 <= 0x1000)
          v54 = 4096;
        if (v55 >= 0xF000)
          v55 = 61440;
        if (v55 <= 0x1000)
          v55 = 4096;
        *v46 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v54 + (v54 << 10)) >> 13)) >> 32) << 6;
        v46[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v55 + (v55 << 10)) >> 13)) >> 32) << 6;
      }
      v13 = (unsigned __int16 *)((char *)v13 + v12);
      v17 = (_WORD *)((char *)v17 + v16);
      ++v44;
    }
    while (v44 != v43);
  }
  if (v43 + v26 < v18)
  {
    if ((v28 & 1) != 0)
    {
      v56 = *v13;
      v57 = v13[1];
      if (v56 >= 0xF000)
        v56 = 61440;
      if (v56 <= 0x1000)
        v56 = 4096;
      if (v57 >= 0xF000)
        v57 = 61440;
      if (v57 <= 0x1000)
        v57 = 4096;
      v13 += 2;
      *v17 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v56 + (v56 << 10)) >> 13)) >> 32) << 6;
      v17[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v57 + (v57 << 10)) >> 13)) >> 32) << 6;
      v17 += 2;
    }
    if (v10 == v30)
    {
      v31 = 0;
    }
    else
    {
      v58 = v10 - v30;
      do
      {
        v59 = *v13;
        v60 = v13[1];
        if (v59 >= 0xF000)
          v59 = 61440;
        if (v59 <= 0x1000)
          v59 = 4096;
        if (v60 >= 0xF000)
          v60 = 61440;
        if (v60 <= 0x1000)
          v60 = 4096;
        v13 += 2;
        *v17 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v59 + (v59 << 10)) >> 13)) >> 32) << 6;
        v17[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v60 + (v60 << 10)) >> 13)) >> 32) << 6;
        v17 += 2;
        --v58;
      }
      while (v58);
    }
    if (v31 + v29 < v10)
    {
      v61 = *v13;
      v62 = v13[1];
      if (v61 >= 0xF000)
        v61 = 61440;
      if (v61 <= 0x1000)
        v61 = 4096;
      if (v62 >= 0xF000)
        v62 = 61440;
      if (v62 <= 0x1000)
        v62 = 4096;
      *v17 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v61 + (v61 << 10)) >> 13)) >> 32) << 6;
      v17[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v62 + (v62 << 10)) >> 13)) >> 32) << 6;
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_s4as_x2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _WORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  unint64_t v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  _WORD *v38;
  _WORD *v39;
  int v40;
  unint64_t v41;
  _WORD *v42;
  int v43;
  unint64_t v44;
  uint64_t v45;
  _WORD *v46;
  _WORD *v47;
  int v48;
  unint64_t v49;
  _WORD *v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unint64_t v56;
  _WORD *v57;
  int v58;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = v10 + v9;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  v15 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v16 = *(_QWORD *)(a6 + 40);
  v17 = 2 * v15;
  v18 = a8[1];
  v19 = (_WORD *)(a7[1] + v18 * v16 + ((2 * v15) & 0x7FFFFFFFFFFFFFFELL));
  v20 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v21 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v15;
  if (v20 >= v21)
    v20 = v21;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v22 = 0;
    v23 = *a8;
    v24 = a8[2];
    v25 = a7[2] + v24 * v16;
    v26 = *a7 + *a8 * v16;
    v27 = *a4;
    v28 = a4[2];
    v29 = v25 + v17;
    v30 = v26 + v17;
    v31 = a3[2] + v28 * v12 + 2 * v11;
    v32 = *a3 + v27 * v12 + 2 * v11;
    do
    {
      if (v20)
      {
        for (i = 0; i != v20; ++i)
        {
          *(_WORD *)(v29 + 2 * i) = *(_WORD *)(v31 + 2 * i);
          *(_WORD *)(v30 + 2 * i) = *(_WORD *)(v32 + 2 * i) & 0xFFC0;
        }
      }
      v32 += v27;
      v30 += v23;
      v31 += v28;
      v29 += v24;
      ++v22;
    }
    while (v22 != v8);
  }
  v34 = v12 & 1;
  if (v8 >= v34)
    v35 = v12 & 1;
  else
    v35 = 0;
  v36 = v9;
  if (v20 < v10)
    v10 = 0;
  v37 = v20 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v36 & 1) != 0)
    {
      v38 = v14 + 4;
      v40 = (v14[3] >> 6) + (v14[1] >> 6);
      *v19 = (32 * ((v14[2] >> 6) + (*v14 >> 6)) + 32) & 0xFFC0;
      v19[1] = (32 * v40 + 32) & 0xFFC0;
      v39 = v19 + 2;
    }
    else
    {
      v38 = v14;
      v39 = v19;
    }
    if (v20 != v10)
    {
      v41 = 0;
      do
      {
        v42 = &v39[v41];
        v43 = ((unsigned __int16)v38[3] >> 6) + ((unsigned __int16)v38[1] >> 6);
        *v42 = (32 * ((v38[2] >> 6) + (*v38 >> 6)) + 32) & 0xFFC0;
        v42[1] = (32 * v43 + 32) & 0xFFC0;
        v41 += 2;
        v38 += 4;
      }
      while (v41 < v37);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v19 = (_WORD *)((char *)v19 + v18);
  }
  if (v8 == v35)
  {
    v44 = 0;
  }
  else
  {
    v45 = 0;
    v44 = v8 - v35;
    do
    {
      v46 = v14;
      v47 = v19;
      if ((v36 & 1) != 0)
      {
        v46 = v14 + 4;
        v48 = (v14[3] >> 6) + (v14[1] >> 6);
        *v19 = (32 * ((v14[2] >> 6) + (*v14 >> 6)) + 32) & 0xFFC0;
        v19[1] = (32 * v48 + 32) & 0xFFC0;
        v47 = v19 + 2;
      }
      if (v20 != v10)
      {
        v49 = 0;
        do
        {
          v50 = &v47[v49];
          v51 = ((unsigned __int16)v46[3] >> 6) + ((unsigned __int16)v46[1] >> 6);
          *v50 = (32 * ((v46[2] >> 6) + (*v46 >> 6)) + 32) & 0xFFC0;
          v50[1] = (32 * v51 + 32) & 0xFFC0;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v37);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v19 = (_WORD *)((char *)v19 + v18);
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v34 < v8)
  {
    if ((v36 & 1) != 0)
    {
      v52 = *v14;
      v53 = v14[1];
      v54 = v14[2];
      v55 = v14[3];
      v14 += 4;
      *v19 = (32 * ((v54 >> 6) + (v52 >> 6)) + 32) & 0xFFC0;
      v19[1] = (32 * ((v55 >> 6) + (v53 >> 6)) + 32) & 0xFFC0;
      v19 += 2;
    }
    if (v20 != v10)
    {
      v56 = 0;
      do
      {
        v57 = &v19[v56];
        v58 = (v14[3] >> 6) + (v14[1] >> 6);
        *v57 = (32 * ((v14[2] >> 6) + (*v14 >> 6)) + 32) & 0xFFC0;
        v57[1] = (32 * v58 + 32) & 0xFFC0;
        v56 += 2;
        v14 += 4;
      }
      while (v56 < v37);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_s4as_x2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _WORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  unint64_t v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  _WORD *v38;
  _WORD *v39;
  __int16 v40;
  unint64_t v41;
  _WORD *v42;
  __int16 v43;
  unint64_t v44;
  uint64_t v45;
  _WORD *v46;
  _WORD *v47;
  __int16 v48;
  unint64_t v49;
  _WORD *v50;
  __int16 v51;
  __int16 v52;
  __int16 v53;
  unint64_t v54;
  _WORD *v55;
  __int16 v56;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = v10 + v9;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (_WORD *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  v15 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v16 = *(_QWORD *)(a6 + 40);
  v17 = 2 * v15;
  v18 = a8[1];
  v19 = (_WORD *)(a7[1] + v18 * v16 + ((2 * v15) & 0x7FFFFFFFFFFFFFFELL));
  v20 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v21 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v15;
  if (v20 >= v21)
    v20 = v21;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v22 = 0;
    v23 = *a8;
    v24 = a8[2];
    v25 = a7[2] + v24 * v16;
    v26 = *a7 + *a8 * v16;
    v27 = *a4;
    v28 = a4[2];
    v29 = v25 + v17;
    v30 = v26 + v17;
    v31 = a3[2] + v28 * v12 + 2 * v11;
    v32 = *a3 + v27 * v12 + 2 * v11;
    do
    {
      if (v20)
      {
        for (i = 0; i != v20; ++i)
        {
          *(_WORD *)(v29 + 2 * i) = *(_WORD *)(v31 + 2 * i);
          *(_WORD *)(v30 + 2 * i) = *(_WORD *)(v32 + 2 * i) & 0xFFC0;
        }
      }
      v32 += v27;
      v30 += v23;
      v31 += v28;
      v29 += v24;
      ++v22;
    }
    while (v22 != v8);
  }
  v34 = v12 & 1;
  if (v8 >= v34)
    v35 = v12 & 1;
  else
    v35 = 0;
  v36 = v9;
  if (v20 < v10)
    v10 = 0;
  v37 = v20 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v36 & 1) != 0)
    {
      v38 = v14 + 4;
      v40 = v14[1] & 0xFFC0;
      *v19 = *v14 & 0xFFC0;
      v19[1] = v40;
      v39 = v19 + 2;
    }
    else
    {
      v38 = v14;
      v39 = v19;
    }
    if (v20 != v10)
    {
      v41 = 0;
      do
      {
        v42 = &v39[v41];
        v43 = v38[1] & 0xFFC0;
        *v42 = *v38 & 0xFFC0;
        v42[1] = v43;
        v41 += 2;
        v38 += 4;
      }
      while (v41 < v37);
    }
    v14 = (_WORD *)((char *)v14 + v13);
    v19 = (_WORD *)((char *)v19 + v18);
  }
  if (v8 == v35)
  {
    v44 = 0;
  }
  else
  {
    v45 = 0;
    v44 = v8 - v35;
    do
    {
      v46 = v14;
      v47 = v19;
      if ((v36 & 1) != 0)
      {
        v46 = v14 + 4;
        v48 = v14[1] & 0xFFC0;
        *v19 = *v14 & 0xFFC0;
        v19[1] = v48;
        v47 = v19 + 2;
      }
      if (v20 != v10)
      {
        v49 = 0;
        do
        {
          v50 = &v47[v49];
          v51 = v46[1] & 0xFFC0;
          *v50 = *v46 & 0xFFC0;
          v50[1] = v51;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v37);
      }
      v14 = (_WORD *)((char *)v14 + v13);
      v19 = (_WORD *)((char *)v19 + v18);
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v34 < v8)
  {
    if ((v36 & 1) != 0)
    {
      v52 = *v14;
      v53 = v14[1];
      v14 += 4;
      *v19 = v52 & 0xFFC0;
      v19[1] = v53 & 0xFFC0;
      v19 += 2;
    }
    if (v20 != v10)
    {
      v54 = 0;
      do
      {
        v55 = &v19[v54];
        v56 = v14[1] & 0xFFC0;
        *v55 = *v14 & 0xFFC0;
        v55[1] = v56;
        v54 += 2;
        v14 += 4;
      }
      while (v54 < v37);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sv44_x422(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  _WORD *v34;
  _WORD *v35;
  int v36;
  unint64_t v37;
  _WORD *v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  _WORD *v42;
  _WORD *v43;
  int v44;
  unint64_t v45;
  _WORD *v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unint64_t v52;
  _WORD *v53;
  int v54;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = *a7 + *a8 * v18 + v19;
    v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = *(_WORD *)(v28 + 2 * i) & 0xFFC0;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  v30 = v12 & 1;
  if (v9 >= v30)
    v31 = v12 & 1;
  else
    v31 = 0;
  v32 = v8;
  if (v22 < v10)
    v10 = 0;
  v33 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v34 = v14 + 4;
      v36 = (v14[3] >> 6) + (v14[1] >> 6);
      *v21 = (32 * ((v14[2] >> 6) + (*v14 >> 6)) + 32) & 0xFFC0;
      v21[1] = (32 * v36 + 32) & 0xFFC0;
      v35 = v21 + 2;
    }
    else
    {
      v34 = v14;
      v35 = v21;
    }
    if (v22 != v10)
    {
      v37 = 0;
      do
      {
        v38 = &v35[v37];
        v39 = ((unsigned __int16)v34[3] >> 6) + ((unsigned __int16)v34[1] >> 6);
        *v38 = (32 * ((v34[2] >> 6) + (*v34 >> 6)) + 32) & 0xFFC0;
        v38[1] = (32 * v39 + 32) & 0xFFC0;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v9 - v31;
    do
    {
      v42 = v14;
      v43 = v21;
      if ((v32 & 1) != 0)
      {
        v42 = v14 + 4;
        v44 = (v14[3] >> 6) + (v14[1] >> 6);
        *v21 = (32 * ((v14[2] >> 6) + (*v14 >> 6)) + 32) & 0xFFC0;
        v21[1] = (32 * v44 + 32) & 0xFFC0;
        v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        v45 = 0;
        do
        {
          v46 = &v43[v45];
          v47 = ((unsigned __int16)v42[3] >> 6) + ((unsigned __int16)v42[1] >> 6);
          *v46 = (32 * ((v42[2] >> 6) + (*v42 >> 6)) + 32) & 0xFFC0;
          v46[1] = (32 * v47 + 32) & 0xFFC0;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if ((v32 & 1) != 0)
    {
      v48 = *v14;
      v49 = v14[1];
      v50 = v14[2];
      v51 = v14[3];
      v14 += 4;
      *v21 = (32 * ((v50 >> 6) + (v48 >> 6)) + 32) & 0xFFC0;
      v21[1] = (32 * ((v51 >> 6) + (v49 >> 6)) + 32) & 0xFFC0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v52 = 0;
      do
      {
        v53 = &v21[v52];
        v54 = (v14[3] >> 6) + (v14[1] >> 6);
        *v53 = (32 * ((v14[2] >> 6) + (*v14 >> 6)) + 32) & 0xFFC0;
        v53[1] = (32 * v54 + 32) & 0xFFC0;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_sv44_x422(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  _WORD *v34;
  _WORD *v35;
  __int16 v36;
  unint64_t v37;
  _WORD *v38;
  __int16 v39;
  unint64_t v40;
  uint64_t v41;
  _WORD *v42;
  _WORD *v43;
  __int16 v44;
  unint64_t v45;
  _WORD *v46;
  __int16 v47;
  __int16 v48;
  __int16 v49;
  unint64_t v50;
  _WORD *v51;
  __int16 v52;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (_WORD *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = *a7 + *a8 * v18 + v19;
    v28 = *a3 + v25 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = *(_WORD *)(v28 + 2 * i) & 0xFFC0;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v8);
  }
  v30 = v12 & 1;
  if (v8 >= v30)
    v31 = v12 & 1;
  else
    v31 = 0;
  v32 = v9;
  if (v22 < v10)
    v10 = 0;
  v33 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v34 = v14 + 4;
      v36 = v14[1] & 0xFFC0;
      *v21 = *v14 & 0xFFC0;
      v21[1] = v36;
      v35 = v21 + 2;
    }
    else
    {
      v34 = v14;
      v35 = v21;
    }
    if (v22 != v10)
    {
      v37 = 0;
      do
      {
        v38 = &v35[v37];
        v39 = v34[1] & 0xFFC0;
        *v38 = *v34 & 0xFFC0;
        v38[1] = v39;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 = (_WORD *)((char *)v14 + v13);
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v31)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v8 - v31;
    do
    {
      v42 = v14;
      v43 = v21;
      if ((v32 & 1) != 0)
      {
        v42 = v14 + 4;
        v44 = v14[1] & 0xFFC0;
        *v21 = *v14 & 0xFFC0;
        v21[1] = v44;
        v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        v45 = 0;
        do
        {
          v46 = &v43[v45];
          v47 = v42[1] & 0xFFC0;
          *v46 = *v42 & 0xFFC0;
          v46[1] = v47;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 = (_WORD *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v8)
  {
    if ((v32 & 1) != 0)
    {
      v48 = *v14;
      v49 = v14[1];
      v14 += 4;
      *v21 = v48 & 0xFFC0;
      v21[1] = v49 & 0xFFC0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v50 = 0;
      do
      {
        v51 = &v21[v50];
        v52 = v14[1] & 0xFFC0;
        *v51 = *v14 & 0xFFC0;
        v51[1] = v52;
        v50 += 2;
        v14 += 4;
      }
      while (v50 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sv44_xf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unsigned int v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  unsigned __int16 *v35;
  _WORD *v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  int v44;
  unint64_t v45;
  _WORD *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unint64_t v51;
  uint64_t v52;
  unsigned __int16 *v53;
  _WORD *v54;
  unsigned int v55;
  int v56;
  unsigned int v57;
  int v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  int v62;
  unint64_t v63;
  _WORD *v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unint64_t v73;
  _WORD *v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = *a7 + *a8 * v18 + v19;
    v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          v30 = *(unsigned __int16 *)(v28 + 2 * i);
          if (v30 >= 0xEB00)
            v30 = 60160;
          if (v30 <= 0x1000)
            v30 = 4096;
          *(_WORD *)(v27 + 2 * i) = (unsigned __int16)((-4190208 - v30 + (v30 << 10)) / 0xDB00) << 6;
        }
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  v31 = v12 & 1;
  if (v9 >= v31)
    v32 = v12 & 1;
  else
    v32 = 0;
  v33 = v8;
  if (v22 < v10)
    v10 = 0;
  v34 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v37 = *v14;
      if (v37 >= 0xF000)
        v37 = 61440;
      if (v37 <= 0x1000)
        v38 = 4096;
      else
        v38 = v37;
      if (v14[1] >= 0xF000u)
        v39 = 61440;
      else
        v39 = v14[1];
      if (v39 <= 0x1000)
        v40 = 4096;
      else
        v40 = v39;
      v41 = v14[2];
      if (v41 >= 0xF000)
        v41 = 61440;
      if (v41 <= 0x1000)
        v42 = 4096;
      else
        v42 = v41;
      if (v14[3] >= 0xF000u)
        v43 = 61440;
      else
        v43 = v14[3];
      if (v43 <= 0x1000)
        v44 = 4096;
      else
        v44 = v43;
      v35 = v14 + 4;
      *v21 = (32
            * (((613566757 * (unint64_t)((-4190208 - v42 + (v42 << 10)) >> 13)) >> 32)
             + ((613566757 * (unint64_t)((-4190208 - v38 + (v38 << 10)) >> 13)) >> 32))
            + 32) & 0xFFC0;
      v21[1] = (32
              * (((613566757 * (unint64_t)((-4190208 - v44 + (v44 << 10)) >> 13)) >> 32)
               + ((613566757 * (unint64_t)((-4190208 - v40 + (v40 << 10)) >> 13)) >> 32))
              + 32) & 0xFFC0;
      v36 = v21 + 2;
    }
    else
    {
      v35 = v14;
      v36 = v21;
    }
    if (v22 != v10)
    {
      v45 = 0;
      do
      {
        v46 = &v36[v45];
        v47 = *v35;
        v48 = v35[1];
        if (v47 >= 0xF000)
          v47 = 61440;
        if (v47 <= 0x1000)
          v47 = 4096;
        if (v48 >= 0xF000)
          v48 = 61440;
        if (v48 <= 0x1000)
          v48 = 4096;
        v49 = v35[2];
        v50 = v35[3];
        if (v49 >= 0xF000)
          v49 = 61440;
        if (v49 <= 0x1000)
          v49 = 4096;
        if (v50 >= 0xF000)
          v50 = 61440;
        if (v50 <= 0x1000)
          v50 = 4096;
        *v46 = (32
              * (((613566757 * (unint64_t)((-4190208 - v49 + (v49 << 10)) >> 13)) >> 32)
               + ((613566757 * (unint64_t)((-4190208 - v47 + (v47 << 10)) >> 13)) >> 32))
              + 32) & 0xFFC0;
        v46[1] = (32
                * (((613566757 * (unint64_t)((-4190208 - v50 + (v50 << 10)) >> 13)) >> 32)
                 + ((613566757 * (unint64_t)((-4190208 - v48 + (v48 << 10)) >> 13)) >> 32))
                + 32) & 0xFFC0;
        v45 += 2;
        v35 += 4;
      }
      while (v45 < v34);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v32)
  {
    v51 = 0;
  }
  else
  {
    v52 = 0;
    v51 = v9 - v32;
    do
    {
      v53 = v14;
      v54 = v21;
      if ((v33 & 1) != 0)
      {
        v55 = *v14;
        if (v55 >= 0xF000)
          v55 = 61440;
        if (v55 <= 0x1000)
          v56 = 4096;
        else
          v56 = v55;
        if (v14[1] >= 0xF000u)
          v57 = 61440;
        else
          v57 = v14[1];
        if (v57 <= 0x1000)
          v58 = 4096;
        else
          v58 = v57;
        v59 = v14[2];
        if (v59 >= 0xF000)
          v59 = 61440;
        if (v59 <= 0x1000)
          v60 = 4096;
        else
          v60 = v59;
        if (v14[3] >= 0xF000u)
          v61 = 61440;
        else
          v61 = v14[3];
        if (v61 <= 0x1000)
          v62 = 4096;
        else
          v62 = v61;
        v53 = v14 + 4;
        *v21 = (32
              * (((613566757 * (unint64_t)((-4190208 - v60 + (v60 << 10)) >> 13)) >> 32)
               + ((613566757 * (unint64_t)((-4190208 - v56 + (v56 << 10)) >> 13)) >> 32))
              + 32) & 0xFFC0;
        v21[1] = (32
                * (((613566757 * (unint64_t)((-4190208 - v62 + (v62 << 10)) >> 13)) >> 32)
                 + ((613566757 * (unint64_t)((-4190208 - v58 + (v58 << 10)) >> 13)) >> 32))
                + 32) & 0xFFC0;
        v54 = v21 + 2;
      }
      if (v22 != v10)
      {
        v63 = 0;
        do
        {
          v64 = &v54[v63];
          v65 = *v53;
          v66 = v53[1];
          if (v65 >= 0xF000)
            v65 = 61440;
          if (v65 <= 0x1000)
            v65 = 4096;
          if (v66 >= 0xF000)
            v66 = 61440;
          if (v66 <= 0x1000)
            v66 = 4096;
          v67 = v53[2];
          v68 = v53[3];
          if (v67 >= 0xF000)
            v67 = 61440;
          if (v67 <= 0x1000)
            v67 = 4096;
          if (v68 >= 0xF000)
            v68 = 61440;
          if (v68 <= 0x1000)
            v68 = 4096;
          *v64 = (32
                * (((613566757 * (unint64_t)((-4190208 - v67 + (v67 << 10)) >> 13)) >> 32)
                 + ((613566757 * (unint64_t)((-4190208 - v65 + (v65 << 10)) >> 13)) >> 32))
                + 32) & 0xFFC0;
          v64[1] = (32
                  * (((613566757 * (unint64_t)((-4190208 - v68 + (v68 << 10)) >> 13)) >> 32)
                   + ((613566757 * (unint64_t)((-4190208 - v66 + (v66 << 10)) >> 13)) >> 32))
                  + 32) & 0xFFC0;
          v63 += 2;
          v53 += 4;
        }
        while (v63 < v34);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v52;
    }
    while (v52 != v51);
  }
  if (v51 + v31 < v9)
  {
    if ((v33 & 1) != 0)
    {
      v69 = *v14;
      v70 = v14[1];
      if (v69 >= 0xF000)
        v69 = 61440;
      if (v69 <= 0x1000)
        v69 = 4096;
      if (v70 >= 0xF000)
        v70 = 61440;
      if (v70 <= 0x1000)
        v70 = 4096;
      v71 = v14[2];
      if (v71 >= 0xF000)
        v71 = 61440;
      if (v71 <= 0x1000)
        v71 = 4096;
      if (v14[3] >= 0xF000u)
        v72 = 61440;
      else
        v72 = v14[3];
      if (v72 <= 0x1000)
        v72 = 4096;
      v14 += 4;
      *v21 = (32
            * (((613566757 * (unint64_t)((-4190208 - v71 + (v71 << 10)) >> 13)) >> 32)
             + ((613566757 * (unint64_t)((-4190208 - v69 + (v69 << 10)) >> 13)) >> 32))
            + 32) & 0xFFC0;
      v21[1] = (32
              * (((613566757 * (unint64_t)((-4190208 - v72 + (v72 << 10)) >> 13)) >> 32)
               + ((613566757 * (unint64_t)((-4190208 - v70 + (v70 << 10)) >> 13)) >> 32))
              + 32) & 0xFFC0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v73 = 0;
      do
      {
        v74 = &v21[v73];
        v75 = *v14;
        v76 = v14[1];
        if (v75 >= 0xF000)
          v75 = 61440;
        if (v75 <= 0x1000)
          v75 = 4096;
        if (v76 >= 0xF000)
          v76 = 61440;
        if (v76 <= 0x1000)
          v76 = 4096;
        v77 = v14[2];
        v78 = v14[3];
        if (v77 >= 0xF000)
          v77 = 61440;
        if (v77 <= 0x1000)
          v77 = 4096;
        if (v78 >= 0xF000)
          v78 = 61440;
        if (v78 <= 0x1000)
          v78 = 4096;
        *v74 = (32
              * (((613566757 * (unint64_t)((-4190208 - v77 + (v77 << 10)) >> 13)) >> 32)
               + ((613566757 * (unint64_t)((-4190208 - v75 + (v75 << 10)) >> 13)) >> 32))
              + 32) & 0xFFC0;
        v74[1] = (32
                * (((613566757 * (unint64_t)((-4190208 - v78 + (v78 << 10)) >> 13)) >> 32)
                 + ((613566757 * (unint64_t)((-4190208 - v76 + (v76 << 10)) >> 13)) >> 32))
                + 32) & 0xFFC0;
        v73 += 2;
        v14 += 4;
      }
      while (v73 < v34);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_sv44_xf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unsigned int v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  unsigned __int16 *v35;
  _WORD *v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  int v40;
  unint64_t v41;
  _WORD *v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  unsigned __int16 *v47;
  _WORD *v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  int v52;
  unint64_t v53;
  _WORD *v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unint64_t v59;
  _WORD *v60;
  unsigned int v61;
  unsigned int v62;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = *a7 + *a8 * v18 + v19;
    v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          v30 = *(unsigned __int16 *)(v28 + 2 * i);
          if (v30 >= 0xEB00)
            v30 = 60160;
          if (v30 <= 0x1000)
            v30 = 4096;
          *(_WORD *)(v27 + 2 * i) = (unsigned __int16)((-4190208 - v30 + (v30 << 10)) / 0xDB00) << 6;
        }
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  v31 = v12 & 1;
  if (v9 >= v31)
    v32 = v12 & 1;
  else
    v32 = 0;
  v33 = v8;
  if (v22 < v10)
    v10 = 0;
  v34 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v37 = *v14;
      if (v37 >= 0xF000)
        v37 = 61440;
      if (v37 <= 0x1000)
        v38 = 4096;
      else
        v38 = v37;
      if (v14[1] >= 0xF000u)
        v39 = 61440;
      else
        v39 = v14[1];
      if (v39 <= 0x1000)
        v40 = 4096;
      else
        v40 = v39;
      v35 = v14 + 4;
      *v21 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v38 + (v38 << 10)) >> 13)) >> 32) << 6;
      v21[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v40 + (v40 << 10)) >> 13)) >> 32) << 6;
      v36 = v21 + 2;
    }
    else
    {
      v35 = v14;
      v36 = v21;
    }
    if (v22 != v10)
    {
      v41 = 0;
      do
      {
        v42 = &v36[v41];
        v43 = *v35;
        v44 = v35[1];
        if (v43 >= 0xF000)
          v43 = 61440;
        if (v43 <= 0x1000)
          v43 = 4096;
        if (v44 >= 0xF000)
          v44 = 61440;
        if (v44 <= 0x1000)
          v44 = 4096;
        *v42 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v43 + (v43 << 10)) >> 13)) >> 32) << 6;
        v42[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v44 + (v44 << 10)) >> 13)) >> 32) << 6;
        v41 += 2;
        v35 += 4;
      }
      while (v41 < v34);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v32)
  {
    v45 = 0;
  }
  else
  {
    v46 = 0;
    v45 = v9 - v32;
    do
    {
      v47 = v14;
      v48 = v21;
      if ((v33 & 1) != 0)
      {
        v49 = *v14;
        if (v49 >= 0xF000)
          v49 = 61440;
        if (v49 <= 0x1000)
          v50 = 4096;
        else
          v50 = v49;
        if (v14[1] >= 0xF000u)
          v51 = 61440;
        else
          v51 = v14[1];
        if (v51 <= 0x1000)
          v52 = 4096;
        else
          v52 = v51;
        v47 = v14 + 4;
        *v21 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v50 + (v50 << 10)) >> 13)) >> 32) << 6;
        v21[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v52 + (v52 << 10)) >> 13)) >> 32) << 6;
        v48 = v21 + 2;
      }
      if (v22 != v10)
      {
        v53 = 0;
        do
        {
          v54 = &v48[v53];
          v55 = *v47;
          v56 = v47[1];
          if (v55 >= 0xF000)
            v55 = 61440;
          if (v55 <= 0x1000)
            v55 = 4096;
          if (v56 >= 0xF000)
            v56 = 61440;
          if (v56 <= 0x1000)
            v56 = 4096;
          *v54 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v55 + (v55 << 10)) >> 13)) >> 32) << 6;
          v54[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v56 + (v56 << 10)) >> 13)) >> 32) << 6;
          v53 += 2;
          v47 += 4;
        }
        while (v53 < v34);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v46;
    }
    while (v46 != v45);
  }
  if (v45 + v31 < v9)
  {
    if ((v33 & 1) != 0)
    {
      v57 = *v14;
      v58 = v14[1];
      if (v57 >= 0xF000)
        v57 = 61440;
      if (v57 <= 0x1000)
        v57 = 4096;
      if (v58 >= 0xF000)
        v58 = 61440;
      if (v58 <= 0x1000)
        v58 = 4096;
      v14 += 4;
      *v21 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v57 + (v57 << 10)) >> 13)) >> 32) << 6;
      v21[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v58 + (v58 << 10)) >> 13)) >> 32) << 6;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v59 = 0;
      do
      {
        v60 = &v21[v59];
        v61 = *v14;
        v62 = v14[1];
        if (v61 >= 0xF000)
          v61 = 61440;
        if (v61 <= 0x1000)
          v61 = 4096;
        if (v62 >= 0xF000)
          v62 = 61440;
        if (v62 <= 0x1000)
          v62 = 4096;
        *v60 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v61 + (v61 << 10)) >> 13)) >> 32) << 6;
        v60[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v62 + (v62 << 10)) >> 13)) >> 32) << 6;
        v59 += 2;
        v14 += 4;
      }
      while (v59 < v34);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sv44_x420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  unint64_t v36;
  unint64_t v37;
  _WORD *v38;
  _WORD *v39;
  unsigned __int16 *v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  unint64_t v44;
  _WORD *v45;
  _WORD *v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  _WORD *v50;
  _WORD *v51;
  unsigned __int16 *v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  unint64_t v56;
  _WORD *v57;
  _WORD *v58;
  int v59;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (_WORD *)(a3[1] + v15 * (v12 + v9) + 4 * (v10 + v8));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - (v10 + v8);
  v25 = v18 - v17;
  if (v24 >= v25)
    v24 = v25;
  v26 = v14 - v13;
  v27 = v20 - v19;
  if (v26 < v20 - v19)
    v27 = v26;
  if (v27)
  {
    v28 = 0;
    v29 = *a4;
    v30 = *a8;
    v31 = *a3 + v29 * v13 + 2 * (v10 + v8);
    if (v13 >= v9)
      v32 = 0;
    else
      v32 = v29;
    v33 = v31 + v32;
    v34 = *a7 + v30 * v19 + v21;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
          *(_WORD *)(v34 + 2 * i) = *(_WORD *)(v33 + 2 * i) & 0xFFC0;
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12)
    v36 = v12;
  else
    v36 = 0;
  if (v24 < v10)
    v10 = 0;
  v37 = v24 - v10;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v40 = (_WORD *)((char *)v16 + v15 + 4);
      v41 = *v40;
      v42 = v40[1];
      v38 = v16 + 4;
      v43 = (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 6)
          + ((unsigned __int16)v16[1] >> 6)
          + ((unsigned __int16)v16[3] >> 6)
          + (v42 >> 6);
      *v23 = (16 * ((*(_WORD *)((char *)v16 + v15) >> 6) + (*v16 >> 6) + (v16[2] >> 6) + (v41 >> 6)) + 32) & 0xFFC0;
      v23[1] = (16 * v43 + 32) & 0xFFC0;
      v39 = v23 + 2;
    }
    else
    {
      v38 = v16;
      v39 = v23;
    }
    if (v24 != v10)
    {
      v44 = 0;
      v45 = v38 + 2;
      do
      {
        v46 = &v39[v44];
        v47 = (*(unsigned __int16 *)((char *)v45 + v15 - 2) >> 6)
            + ((unsigned __int16)*(v45 - 1) >> 6)
            + ((unsigned __int16)v45[1] >> 6)
            + (*(unsigned __int16 *)((char *)v45 + v15 + 2) >> 6);
        *v46 = (16
              * ((*(_WORD *)((char *)v45 + v15 - 4) >> 6)
               + (*(v45 - 2) >> 6)
               + (*v45 >> 6)
               + (*(_WORD *)((char *)v45 + v15) >> 6))
              + 32) & 0xFFC0;
        v46[1] = (16 * v47 + 32) & 0xFFC0;
        v44 += 2;
        v45 += 4;
      }
      while (v44 < v37);
    }
    v16 += v15;
    v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v27 != v36)
  {
    v48 = 0;
    v49 = v27 - v36;
    do
    {
      v50 = v16;
      v51 = v23;
      if ((v8 & 1) != 0)
      {
        v52 = (_WORD *)((char *)v16 + v15 + 4);
        v53 = *v52;
        v54 = v52[1];
        v50 = v16 + 4;
        v55 = (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 6)
            + ((unsigned __int16)v16[1] >> 6)
            + ((unsigned __int16)v16[3] >> 6)
            + (v54 >> 6);
        *v23 = (16 * ((*(_WORD *)((char *)v16 + v15) >> 6) + (*v16 >> 6) + (v16[2] >> 6) + (v53 >> 6)) + 32) & 0xFFC0;
        v23[1] = (16 * v55 + 32) & 0xFFC0;
        v51 = v23 + 2;
      }
      if (v24 != v10)
      {
        v56 = 0;
        v57 = v50 + 2;
        do
        {
          v58 = &v51[v56];
          v59 = (*(unsigned __int16 *)((char *)v57 + v15 - 2) >> 6)
              + ((unsigned __int16)*(v57 - 1) >> 6)
              + ((unsigned __int16)v57[1] >> 6)
              + (*(unsigned __int16 *)((char *)v57 + v15 + 2) >> 6);
          *v58 = (16
                * ((*(_WORD *)((char *)v57 + v15 - 4) >> 6)
                 + (*(v57 - 2) >> 6)
                 + (*v57 >> 6)
                 + (*(_WORD *)((char *)v57 + v15) >> 6))
                + 32) & 0xFFC0;
          v58[1] = (16 * v59 + 32) & 0xFFC0;
          v56 += 2;
          v57 += 4;
        }
        while (v56 < v37);
      }
      v16 += v15;
      v23 = (_WORD *)((char *)v23 + v22);
      v48 += 2;
    }
    while (v48 < v49);
  }
  return 0;
}

uint64_t vt_CopyDec_sv44_x420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  unint64_t v36;
  unint64_t v37;
  _WORD *v38;
  _WORD *v39;
  __int16 v40;
  unint64_t v41;
  _WORD *v42;
  __int16 v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _WORD *v47;
  _WORD *v48;
  __int16 v49;
  unint64_t v50;
  _WORD *v51;
  __int16 v52;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (_WORD *)(a3[1] + v15 * (v12 + v8) + 4 * (v10 + v9));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - (v10 + v9);
  v25 = v18 - v17;
  if (v24 >= v25)
    v24 = v25;
  v26 = v14 - v13;
  v27 = v20 - v19;
  if (v26 < v20 - v19)
    v27 = v26;
  if (v27)
  {
    v28 = 0;
    v29 = *a4;
    v30 = *a8;
    v31 = *a3 + v29 * v13 + 2 * (v10 + v9);
    if (v13 >= v8)
      v32 = 0;
    else
      v32 = v29;
    v33 = v31 + v32;
    v34 = *a7 + v30 * v19 + v21;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
          *(_WORD *)(v34 + 2 * i) = *(_WORD *)(v33 + 2 * i) & 0xFFC0;
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12)
    v36 = v12;
  else
    v36 = 0;
  if (v24 < v10)
    v10 = 0;
  v37 = v24 - v10;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v38 = v16 + 4;
      v40 = v16[1] & 0xFFC0;
      *v23 = *v16 & 0xFFC0;
      v23[1] = v40;
      v39 = v23 + 2;
    }
    else
    {
      v38 = v16;
      v39 = v23;
    }
    if (v24 != v10)
    {
      v41 = 0;
      do
      {
        v42 = &v39[v41];
        v43 = v38[1] & 0xFFC0;
        *v42 = *v38 & 0xFFC0;
        v42[1] = v43;
        v41 += 2;
        v38 += 4;
      }
      while (v41 < v37);
    }
    v16 += v15;
    v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v27 != v36)
  {
    v44 = 0;
    v45 = v27 - v36;
    v46 = 2 * v15;
    do
    {
      v47 = v16;
      v48 = v23;
      if ((v9 & 1) != 0)
      {
        v47 = v16 + 4;
        v49 = v16[1] & 0xFFC0;
        *v23 = *v16 & 0xFFC0;
        v23[1] = v49;
        v48 = v23 + 2;
      }
      if (v24 != v10)
      {
        v50 = 0;
        do
        {
          v51 = &v48[v50];
          v52 = v47[1] & 0xFFC0;
          *v51 = *v47 & 0xFFC0;
          v51[1] = v52;
          v50 += 2;
          v47 += 4;
        }
        while (v50 < v37);
      }
      v16 = (_WORD *)((char *)v16 + v46);
      v23 = (_WORD *)((char *)v23 + v22);
      v44 += 2;
    }
    while (v44 < v45);
  }
  return 0;
}

uint64_t vt_CopyAvg_sv44_xf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  unsigned __int16 *v39;
  _WORD *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  unsigned __int16 *v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  unint64_t v57;
  unsigned __int16 *v58;
  unsigned int v59;
  unsigned __int16 *v60;
  int v61;
  unsigned int v62;
  int v63;
  unsigned int v64;
  int v65;
  unsigned int v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  int v71;
  unsigned int v72;
  int v73;
  unsigned int v74;
  int v75;
  _WORD *v76;
  unsigned int v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unsigned __int16 *v84;
  _WORD *v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned __int16 *v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  int v97;
  unint64_t v98;
  unsigned __int16 *v99;
  unsigned int v100;
  unsigned __int16 *v101;
  int v102;
  unsigned int v103;
  int v104;
  unsigned int v105;
  int v106;
  unsigned int v107;
  int v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  int v112;
  unsigned int v113;
  int v114;
  unsigned int v115;
  int v116;
  _WORD *v117;
  unsigned int v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * (v12 + v9) + 4 * (v10 + v8));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - (v10 + v8);
  v25 = v18 - v17;
  if (v24 >= v25)
    v24 = v25;
  v26 = v14 - v13;
  v27 = v20 - v19;
  if (v26 < v20 - v19)
    v27 = v26;
  if (v27)
  {
    v28 = 0;
    v29 = *a4;
    v30 = *a3 + *a4 * v13 + 2 * (v10 + v8);
    v31 = *a8;
    if (v13 >= v9)
      v32 = 0;
    else
      v32 = *a4;
    v33 = v30 + v32;
    v34 = *a7 + v31 * v19 + v21;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
        {
          v36 = *(unsigned __int16 *)(v33 + 2 * i);
          if (v36 >= 0xEB00)
            v36 = 60160;
          if (v36 <= 0x1000)
            v36 = 4096;
          *(_WORD *)(v34 + 2 * i) = (unsigned __int16)((-4190208 - v36 + (v36 << 10)) / 0xDB00) << 6;
        }
      }
      v33 += v29;
      v34 += v31;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12)
    v37 = v12;
  else
    v37 = 0;
  if (v24 < v10)
    v10 = 0;
  v38 = v24 - v10;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v41 = *v16;
      v42 = v16[1];
      v43 = *(unsigned __int16 *)((char *)v16 + v15);
      v44 = *(unsigned __int16 *)((char *)v16 + v15 + 2);
      if (v41 >= 0xF000)
        v41 = 61440;
      if (v41 <= 0x1000)
        v41 = 4096;
      if (v42 >= 0xF000)
        v42 = 61440;
      if (v42 <= 0x1000)
        v42 = 4096;
      if (v43 >= 0xF000)
        v43 = 61440;
      if (v43 <= 0x1000)
        v43 = 4096;
      if (v44 >= 0xF000)
        v44 = 61440;
      v45 = v16[2];
      if (v44 <= 0x1000)
        v46 = 4096;
      else
        v46 = v44;
      v47 = v16[3];
      v48 = (unsigned __int16 *)((char *)v16 + v15 + 4);
      v49 = *v48;
      v50 = v48[1];
      if (v45 >= 0xF000)
        v45 = 61440;
      if (v45 <= 0x1000)
        v45 = 4096;
      if (v47 >= 0xF000)
        v47 = 61440;
      if (v47 <= 0x1000)
        v51 = 4096;
      else
        v51 = v47;
      if (v49 >= 0xF000)
        v52 = 61440;
      else
        v52 = v49;
      if (v52 <= 0x1000)
        v53 = 4096;
      else
        v53 = v52;
      v54 = -4190208 - v41 + (v41 << 10);
      if (v50 >= 0xF000)
        v55 = 61440;
      else
        v55 = v50;
      if (v55 <= 0x1000)
        v56 = 4096;
      else
        v56 = v55;
      v39 = v16 + 4;
      *v23 = (16
            * (((613566757 * (unint64_t)((-4190208 - v43 + (v43 << 10)) >> 13)) >> 32)
             + ((613566757 * (unint64_t)(v54 >> 13)) >> 32)
             + ((613566757 * (unint64_t)((-4190208 - v45 + (v45 << 10)) >> 13)) >> 32)
             + ((613566757 * (unint64_t)((-4190208 - v53 + (v53 << 10)) >> 13)) >> 32))
            + 32) & 0xFFC0;
      v23[1] = (16
              * (((613566757 * (unint64_t)((-4190208 - v46 + (v46 << 10)) >> 13)) >> 32)
               + ((613566757 * (unint64_t)((-4190208 - v42 + (v42 << 10)) >> 13)) >> 32)
               + ((613566757 * (unint64_t)((-4190208 - v51 + (v51 << 10)) >> 13)) >> 32)
               + ((613566757 * (unint64_t)((-4190208 - v56 + (v56 << 10)) >> 13)) >> 32))
              + 32) & 0xFFC0;
      v40 = v23 + 2;
    }
    else
    {
      v39 = v16;
      v40 = v23;
    }
    if (v24 != v10)
    {
      v57 = 0;
      v58 = v39 + 2;
      do
      {
        v59 = *(v58 - 2);
        v60 = (unsigned __int16 *)((char *)v58 + v15);
        if (v59 >= 0xF000)
          v59 = 61440;
        if (v59 <= 0x1000)
          v61 = 4096;
        else
          v61 = v59;
        if (*(v58 - 1) >= 0xF000u)
          v62 = 61440;
        else
          v62 = *(v58 - 1);
        if (v62 <= 0x1000)
          v63 = 4096;
        else
          v63 = v62;
        if (*(unsigned __int16 *)((char *)v58 + v15 - 4) >= 0xF000u)
          v64 = 61440;
        else
          v64 = *(unsigned __int16 *)((char *)v58 + v15 - 4);
        if (v64 <= 0x1000)
          v65 = 4096;
        else
          v65 = v64;
        if (*(unsigned __int16 *)((char *)v58 + v15 - 2) >= 0xF000u)
          v66 = 61440;
        else
          v66 = *(unsigned __int16 *)((char *)v58 + v15 - 2);
        if (v66 <= 0x1000)
          v67 = 4096;
        else
          v67 = v66;
        v68 = *v58;
        v69 = *v60;
        if (v68 >= 0xF000)
          v68 = 61440;
        v70 = v60[1];
        if (v68 <= 0x1000)
          v71 = 4096;
        else
          v71 = v68;
        if (v58[1] >= 0xF000u)
          v72 = 61440;
        else
          v72 = v58[1];
        if (v72 <= 0x1000)
          v73 = 4096;
        else
          v73 = v72;
        if (v69 >= 0xF000)
          v74 = 61440;
        else
          v74 = v69;
        if (v74 <= 0x1000)
          v75 = 4096;
        else
          v75 = v74;
        v76 = &v40[v57];
        v77 = -4190208 - v61 + (v61 << 10);
        if (v70 >= 0xF000)
          v70 = 61440;
        v78 = (613566757 * (unint64_t)(v77 >> 13)) >> 32;
        v79 = (613566757 * (unint64_t)((-4190208 - v63 + (v63 << 10)) >> 13)) >> 32;
        v80 = (613566757 * (unint64_t)((-4190208 - v65 + (v65 << 10)) >> 13)) >> 32;
        v81 = (613566757 * (unint64_t)((-4190208 - v67 + (v67 << 10)) >> 13)) >> 32;
        if (v70 <= 0x1000)
          v70 = 4096;
        *v76 = (16
              * (v80
               + v78
               + ((613566757 * (unint64_t)((-4190208 - v71 + (v71 << 10)) >> 13)) >> 32)
               + ((613566757 * (unint64_t)((-4190208 - v75 + (v75 << 10)) >> 13)) >> 32))
              + 32) & 0xFFC0;
        v76[1] = (16
                * (v81
                 + v79
                 + ((613566757 * (unint64_t)((-4190208 - v73 + (v73 << 10)) >> 13)) >> 32)
                 + ((613566757 * (unint64_t)((-4190208 - v70 + (v70 << 10)) >> 13)) >> 32))
                + 32) & 0xFFC0;
        v57 += 2;
        v58 += 4;
      }
      while (v57 < v38);
    }
    v16 += v15;
    v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v27 != v37)
  {
    v82 = 0;
    v83 = v27 - v37;
    do
    {
      v84 = v16;
      v85 = v23;
      if ((v8 & 1) != 0)
      {
        v86 = *v16;
        v87 = v16[1];
        v88 = *(unsigned __int16 *)((char *)v16 + v15);
        v89 = *(unsigned __int16 *)((char *)v16 + v15 + 2);
        if (v86 >= 0xF000)
          v86 = 61440;
        if (v86 <= 0x1000)
          v86 = 4096;
        if (v87 >= 0xF000)
          v87 = 61440;
        if (v87 <= 0x1000)
          v87 = 4096;
        if (v88 >= 0xF000)
          v88 = 61440;
        if (v88 <= 0x1000)
          v88 = 4096;
        if (v89 >= 0xF000)
          v89 = 61440;
        if (v89 <= 0x1000)
          v90 = 4096;
        else
          v90 = v89;
        v91 = v16[2];
        v92 = v16[3];
        v93 = (unsigned __int16 *)((char *)v16 + v15 + 4);
        v94 = *v93;
        v95 = v93[1];
        if (v91 >= 0xF000)
          v91 = 61440;
        if (v91 <= 0x1000)
          v91 = 4096;
        if (v92 >= 0xF000)
          v92 = 61440;
        if (v92 <= 0x1000)
          v92 = 4096;
        if (v94 >= 0xF000)
          v94 = 61440;
        if (v94 <= 0x1000)
          v94 = 4096;
        v96 = -4190208 - v86 + (v86 << 10);
        if (v95 >= 0xF000)
          v95 = 61440;
        if (v95 <= 0x1000)
          v97 = 4096;
        else
          v97 = v95;
        v84 = v16 + 4;
        *v23 = (16
              * (((613566757 * (unint64_t)((-4190208 - v88 + (v88 << 10)) >> 13)) >> 32)
               + ((613566757 * (unint64_t)(v96 >> 13)) >> 32)
               + ((613566757 * (unint64_t)((-4190208 - v91 + (v91 << 10)) >> 13)) >> 32)
               + ((613566757 * (unint64_t)((-4190208 - v94 + (v94 << 10)) >> 13)) >> 32))
              + 32) & 0xFFC0;
        v23[1] = (16
                * (((613566757 * (unint64_t)((-4190208 - v90 + (v90 << 10)) >> 13)) >> 32)
                 + ((613566757 * (unint64_t)((-4190208 - v87 + (v87 << 10)) >> 13)) >> 32)
                 + ((613566757 * (unint64_t)((-4190208 - v92 + (v92 << 10)) >> 13)) >> 32)
                 + ((613566757 * (unint64_t)((-4190208 - v97 + (v97 << 10)) >> 13)) >> 32))
                + 32) & 0xFFC0;
        v85 = v23 + 2;
      }
      if (v24 != v10)
      {
        v98 = 0;
        v99 = v84 + 2;
        do
        {
          v100 = *(v99 - 2);
          v101 = (unsigned __int16 *)((char *)v99 + v15);
          if (v100 >= 0xF000)
            v100 = 61440;
          if (v100 <= 0x1000)
            v102 = 4096;
          else
            v102 = v100;
          if (*(v99 - 1) >= 0xF000u)
            v103 = 61440;
          else
            v103 = *(v99 - 1);
          if (v103 <= 0x1000)
            v104 = 4096;
          else
            v104 = v103;
          if (*(unsigned __int16 *)((char *)v99 + v15 - 4) >= 0xF000u)
            v105 = 61440;
          else
            v105 = *(unsigned __int16 *)((char *)v99 + v15 - 4);
          if (v105 <= 0x1000)
            v106 = 4096;
          else
            v106 = v105;
          if (*(unsigned __int16 *)((char *)v99 + v15 - 2) >= 0xF000u)
            v107 = 61440;
          else
            v107 = *(unsigned __int16 *)((char *)v99 + v15 - 2);
          if (v107 <= 0x1000)
            v108 = 4096;
          else
            v108 = v107;
          v109 = *v99;
          v110 = *v101;
          if (v109 >= 0xF000)
            v109 = 61440;
          v111 = v101[1];
          if (v109 <= 0x1000)
            v112 = 4096;
          else
            v112 = v109;
          if (v99[1] >= 0xF000u)
            v113 = 61440;
          else
            v113 = v99[1];
          if (v113 <= 0x1000)
            v114 = 4096;
          else
            v114 = v113;
          if (v110 >= 0xF000)
            v115 = 61440;
          else
            v115 = v110;
          if (v115 <= 0x1000)
            v116 = 4096;
          else
            v116 = v115;
          v117 = &v85[v98];
          v118 = -4190208 - v102 + (v102 << 10);
          if (v111 >= 0xF000)
            v111 = 61440;
          v119 = (613566757 * (unint64_t)(v118 >> 13)) >> 32;
          v120 = (613566757 * (unint64_t)((-4190208 - v104 + (v104 << 10)) >> 13)) >> 32;
          v121 = (613566757 * (unint64_t)((-4190208 - v106 + (v106 << 10)) >> 13)) >> 32;
          v122 = (613566757 * (unint64_t)((-4190208 - v108 + (v108 << 10)) >> 13)) >> 32;
          if (v111 <= 0x1000)
            v111 = 4096;
          *v117 = (16
                 * (v121
                  + v119
                  + ((613566757 * (unint64_t)((-4190208 - v112 + (v112 << 10)) >> 13)) >> 32)
                  + ((613566757 * (unint64_t)((-4190208 - v116 + (v116 << 10)) >> 13)) >> 32))
                 + 32) & 0xFFC0;
          v117[1] = (16
                   * (v122
                    + v120
                    + ((613566757 * (unint64_t)((-4190208 - v114 + (v114 << 10)) >> 13)) >> 32)
                    + ((613566757 * (unint64_t)((-4190208 - v111 + (v111 << 10)) >> 13)) >> 32))
                   + 32) & 0xFFC0;
          v98 += 2;
          v99 += 4;
        }
        while (v98 < v38);
      }
      v16 += v15;
      v23 = (_WORD *)((char *)v23 + v22);
      v82 += 2;
    }
    while (v82 < v83);
  }
  return 0;
}

uint64_t vt_CopyDec_sv44_xf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  unsigned __int16 *v39;
  _WORD *v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  int v44;
  unint64_t v45;
  _WORD *v46;
  unsigned int v47;
  unsigned int v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unsigned __int16 *v52;
  _WORD *v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  int v57;
  unint64_t v58;
  _WORD *v59;
  unsigned int v60;
  unsigned int v61;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * (v12 + v8) + 4 * (v10 + v9));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = 2 * v17;
  v22 = a8[1];
  v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v24 = v11 - (v10 + v9);
  v25 = v18 - v17;
  if (v24 >= v25)
    v24 = v25;
  v26 = v14 - v13;
  v27 = v20 - v19;
  if (v26 < v20 - v19)
    v27 = v26;
  if (v27)
  {
    v28 = 0;
    v29 = *a4;
    v30 = *a3 + *a4 * v13 + 2 * (v10 + v9);
    v31 = *a8;
    if (v13 >= v8)
      v32 = 0;
    else
      v32 = v29;
    v33 = v30 + v32;
    v34 = *a7 + v31 * v19 + v21;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
        {
          v36 = *(unsigned __int16 *)(v33 + 2 * i);
          if (v36 >= 0xEB00)
            v36 = 60160;
          if (v36 <= 0x1000)
            v36 = 4096;
          *(_WORD *)(v34 + 2 * i) = (unsigned __int16)((-4190208 - v36 + (v36 << 10)) / 0xDB00) << 6;
        }
      }
      v33 += v29;
      v34 += v31;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12)
    v37 = v12;
  else
    v37 = 0;
  if (v24 < v10)
    v10 = 0;
  v38 = v24 - v10;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v41 = *v16;
      if (v41 >= 0xF000)
        v41 = 61440;
      if (v41 <= 0x1000)
        v42 = 4096;
      else
        v42 = v41;
      if (v16[1] >= 0xF000u)
        v43 = 61440;
      else
        v43 = v16[1];
      if (v43 <= 0x1000)
        v44 = 4096;
      else
        v44 = v43;
      v39 = v16 + 4;
      *v23 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v42 + (v42 << 10)) >> 13)) >> 32) << 6;
      v23[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v44 + (v44 << 10)) >> 13)) >> 32) << 6;
      v40 = v23 + 2;
    }
    else
    {
      v39 = v16;
      v40 = v23;
    }
    if (v24 != v10)
    {
      v45 = 0;
      do
      {
        v46 = &v40[v45];
        v47 = *v39;
        v48 = v39[1];
        if (v47 >= 0xF000)
          v47 = 61440;
        if (v47 <= 0x1000)
          v47 = 4096;
        if (v48 >= 0xF000)
          v48 = 61440;
        if (v48 <= 0x1000)
          v48 = 4096;
        *v46 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v47 + (v47 << 10)) >> 13)) >> 32) << 6;
        v46[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v48 + (v48 << 10)) >> 13)) >> 32) << 6;
        v45 += 2;
        v39 += 4;
      }
      while (v45 < v38);
    }
    v16 += v15;
    v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v27 != v37)
  {
    v49 = 0;
    v50 = v27 - v37;
    v51 = 2 * v15;
    do
    {
      v52 = v16;
      v53 = v23;
      if ((v9 & 1) != 0)
      {
        v54 = *v16;
        if (v54 >= 0xF000)
          v54 = 61440;
        if (v54 <= 0x1000)
          v55 = 4096;
        else
          v55 = v54;
        if (v16[1] >= 0xF000u)
          v56 = 61440;
        else
          v56 = v16[1];
        if (v56 <= 0x1000)
          v57 = 4096;
        else
          v57 = v56;
        v52 = v16 + 4;
        *v23 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v55 + (v55 << 10)) >> 13)) >> 32) << 6;
        v23[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v57 + (v57 << 10)) >> 13)) >> 32) << 6;
        v53 = v23 + 2;
      }
      if (v24 != v10)
      {
        v58 = 0;
        do
        {
          v59 = &v53[v58];
          v60 = *v52;
          v61 = v52[1];
          if (v60 >= 0xF000)
            v60 = 61440;
          if (v60 <= 0x1000)
            v60 = 4096;
          if (v61 >= 0xF000)
            v61 = 61440;
          if (v61 <= 0x1000)
            v61 = 4096;
          *v59 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v60 + (v60 << 10)) >> 13)) >> 32) << 6;
          v59[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v61 + (v61 << 10)) >> 13)) >> 32) << 6;
          v58 += 2;
          v52 += 4;
        }
        while (v58 < v38);
      }
      v16 = (unsigned __int16 *)((char *)v16 + v51);
      v23 = (_WORD *)((char *)v23 + v22);
      v49 += 2;
    }
    while (v49 < v50);
  }
  return 0;
}

uint64_t vt_Copy_s4as_v4a8(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  char v40;
  char v41;
  char v42;
  char v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  char v48;
  unint64_t v49;
  unint64_t v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  unint64_t v57;
  char v58;
  char v59;
  char v60;
  char v61;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a2[3];
  v12 = a4[1];
  v13 = a3[1] + v12 * v8 + 4 * v9;
  v15 = a6[4];
  v14 = a6[5];
  v16 = a8[1];
  v17 = (_BYTE *)(a7[1] + v16 * v14 + 2 * v15);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (v11 >= a6[3])
    v11 = a6[3];
  if (v11)
  {
    v18 = 0;
    v19 = *a8;
    v20 = a8[2];
    v21 = a7[2] + v20 * v14;
    v22 = *a7 + *a8 * v14;
    v23 = *a4;
    v24 = a4[2];
    v25 = v21 + v15;
    v26 = v22 + v15;
    v27 = a3[2] + v24 * v8 + 2 * v9;
    v28 = *a3 + v23 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
        {
          *(_BYTE *)(v25 + i) = *(_WORD *)(v27 + 2 * i);
          *(_BYTE *)(v26 + i) = *(_BYTE *)(v28 + 2 * i + 1);
        }
      }
      v28 += v23;
      v26 += v19;
      v27 += v24;
      v25 += v20;
      ++v18;
    }
    while (v18 != v11);
    v9 = a2[4];
    v8 = a2[5];
  }
  v30 = v8 & 1;
  if (v11 >= v30)
    v31 = v8 & 1;
  else
    v31 = 0;
  v32 = v9 & 1;
  if (v10 >= v32)
    v33 = v9 & 1;
  else
    v33 = 0;
  v34 = v10 - v33;
  if ((v8 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v37 = *(_BYTE *)(v13 + 3);
      v35 = v13 + 4;
      *v17 = *(_BYTE *)(v13 + 1);
      v17[1] = v37;
      v36 = v17 + 2;
    }
    else
    {
      v35 = v13;
      v36 = v17;
    }
    if (v10 == v33)
    {
      v38 = 0;
    }
    else
    {
      v39 = v10 - v33;
      do
      {
        v40 = *(_BYTE *)(v35 + 1);
        v41 = *(_BYTE *)(v35 + 3);
        v35 += 4;
        *v36 = v40;
        v36[1] = v41;
        v36 += 2;
        --v39;
      }
      while (v39);
      v38 = v10 - v33;
    }
    if (v38 + v32 < v10)
    {
      v42 = *(_BYTE *)(v35 + 1);
      v43 = *(_BYTE *)(v35 + 3);
      *v36 = v42;
      v36[1] = v43;
    }
    v13 += v12;
    v17 += v16;
  }
  if (v11 == v31)
  {
    v44 = 0;
  }
  else
  {
    v45 = 0;
    v44 = v11 - v31;
    do
    {
      v46 = v13;
      v47 = v17;
      if ((v9 & 1) != 0)
      {
        v48 = *(_BYTE *)(v13 + 3);
        v46 = v13 + 4;
        *v17 = *(_BYTE *)(v13 + 1);
        v17[1] = v48;
        v47 = v17 + 2;
      }
      if (v10 == v33)
      {
        v49 = 0;
      }
      else
      {
        v50 = v10 - v33;
        do
        {
          v51 = *(_BYTE *)(v46 + 1);
          v52 = *(_BYTE *)(v46 + 3);
          v46 += 4;
          *v47 = v51;
          v47[1] = v52;
          v47 += 2;
          --v50;
        }
        while (v50);
        v49 = v10 - v33;
      }
      if (v49 + v32 < v10)
      {
        v53 = *(_BYTE *)(v46 + 1);
        v54 = *(_BYTE *)(v46 + 3);
        *v47 = v53;
        v47[1] = v54;
      }
      v13 += v12;
      v17 += v16;
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v30 < v11)
  {
    if ((v9 & 1) != 0)
    {
      v55 = *(_BYTE *)(v13 + 1);
      v56 = *(_BYTE *)(v13 + 3);
      v13 += 4;
      *v17 = v55;
      v17[1] = v56;
      v17 += 2;
    }
    if (v10 == v33)
    {
      v34 = 0;
    }
    else
    {
      v57 = v10 - v33;
      do
      {
        v58 = *(_BYTE *)(v13 + 1);
        v59 = *(_BYTE *)(v13 + 3);
        v13 += 4;
        *v17 = v58;
        v17[1] = v59;
        v17 += 2;
        --v57;
      }
      while (v57);
    }
    if (v34 + v32 < v10)
    {
      v60 = *(_BYTE *)(v13 + 1);
      v61 = *(_BYTE *)(v13 + 3);
      *v17 = v60;
      v17[1] = v61;
    }
  }
  return 0;
}

uint64_t vt_Copy_sv44_444v(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  char v36;
  char v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  char v43;
  unint64_t v44;
  unint64_t v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  unint64_t v52;
  char v53;
  char v54;
  char v55;
  char v56;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a2[3];
  v12 = a4[1];
  v13 = a3[1] + v12 * v8 + 4 * v9;
  v14 = a6[4];
  v15 = a6[5];
  v16 = a8[1];
  v17 = (_BYTE *)(a7[1] + v16 * v15 + 2 * v14);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (v11 >= a6[3])
    v11 = a6[3];
  if (v11)
  {
    v18 = 0;
    v19 = *a4;
    v20 = *a8;
    v21 = *a7 + *a8 * v15 + v14;
    v22 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
          *(_BYTE *)(v21 + i) = *(_BYTE *)(v22 + 2 * i + 1);
      }
      v22 += v19;
      v21 += v20;
      ++v18;
    }
    while (v18 != v11);
    v9 = a2[4];
    v8 = a2[5];
  }
  v24 = v8 & 1;
  if (v11 >= v24)
    v25 = v8 & 1;
  else
    v25 = 0;
  v26 = v9;
  v27 = v9 & 1;
  if (v10 >= v27)
    v28 = v27;
  else
    v28 = 0;
  v29 = v10 - v28;
  if ((v8 & 1) != 0)
  {
    if ((v26 & 1) != 0)
    {
      v32 = *(_BYTE *)(v13 + 3);
      v30 = v13 + 4;
      *v17 = *(_BYTE *)(v13 + 1);
      v17[1] = v32;
      v31 = v17 + 2;
    }
    else
    {
      v30 = v13;
      v31 = v17;
    }
    if (v10 == v28)
    {
      v33 = 0;
    }
    else
    {
      v34 = v10 - v28;
      do
      {
        v35 = *(_BYTE *)(v30 + 1);
        v36 = *(_BYTE *)(v30 + 3);
        v30 += 4;
        *v31 = v35;
        v31[1] = v36;
        v31 += 2;
        --v34;
      }
      while (v34);
      v33 = v10 - v28;
    }
    if (v33 + v27 < v10)
    {
      v37 = *(_BYTE *)(v30 + 1);
      v38 = *(_BYTE *)(v30 + 3);
      *v31 = v37;
      v31[1] = v38;
    }
    v13 += v12;
    v17 += v16;
  }
  if (v11 == v25)
  {
    v39 = 0;
  }
  else
  {
    v40 = 0;
    v39 = v11 - v25;
    do
    {
      v41 = v13;
      v42 = v17;
      if ((v26 & 1) != 0)
      {
        v43 = *(_BYTE *)(v13 + 3);
        v41 = v13 + 4;
        *v17 = *(_BYTE *)(v13 + 1);
        v17[1] = v43;
        v42 = v17 + 2;
      }
      if (v10 == v28)
      {
        v44 = 0;
      }
      else
      {
        v45 = v10 - v28;
        do
        {
          v46 = *(_BYTE *)(v41 + 1);
          v47 = *(_BYTE *)(v41 + 3);
          v41 += 4;
          *v42 = v46;
          v42[1] = v47;
          v42 += 2;
          --v45;
        }
        while (v45);
        v44 = v10 - v28;
      }
      if (v44 + v27 < v10)
      {
        v48 = *(_BYTE *)(v41 + 1);
        v49 = *(_BYTE *)(v41 + 3);
        *v42 = v48;
        v42[1] = v49;
      }
      v13 += v12;
      v17 += v16;
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v24 < v11)
  {
    if ((v26 & 1) != 0)
    {
      v50 = *(_BYTE *)(v13 + 1);
      v51 = *(_BYTE *)(v13 + 3);
      v13 += 4;
      *v17 = v50;
      v17[1] = v51;
      v17 += 2;
    }
    if (v10 == v28)
    {
      v29 = 0;
    }
    else
    {
      v52 = v10 - v28;
      do
      {
        v53 = *(_BYTE *)(v13 + 1);
        v54 = *(_BYTE *)(v13 + 3);
        v13 += 4;
        *v17 = v53;
        v17[1] = v54;
        v17 += 2;
        --v52;
      }
      while (v52);
    }
    if (v29 + v27 < v10)
    {
      v55 = *(_BYTE *)(v13 + 1);
      v56 = *(_BYTE *)(v13 + 3);
      *v17 = v55;
      v17[1] = v56;
    }
  }
  return 0;
}

uint64_t vt_Copy_sv44_444f(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unsigned __int16 *v31;
  _BYTE *v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unint64_t v42;
  uint64_t v43;
  unsigned __int16 *v44;
  _BYTE *v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unint64_t v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a4[1];
  v12 = (unsigned __int16 *)(a3[1] + v11 * v8 + 4 * v9);
  v13 = a6[4];
  v14 = a6[5];
  v15 = a6[3];
  v16 = a8[1];
  v17 = (_BYTE *)(a7[1] + v16 * v14 + 2 * v13);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (a2[3] < v15)
    v15 = a2[3];
  if (v15)
  {
    v18 = 0;
    v19 = *a4;
    v20 = *a8;
    v21 = *a7 + *a8 * v14 + v13;
    v22 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
        {
          v24 = *(unsigned __int16 *)(v22 + 2 * i);
          if (v24 >= 0xEB00)
            v24 = 60160;
          if (v24 <= 0x1000)
            v24 = 4096;
          *(_BYTE *)(v21 + i) = (-1044480 - v24 + (v24 << 8)) / 0xDB00;
        }
      }
      v22 += v19;
      v21 += v20;
      ++v18;
    }
    while (v18 != v15);
    v9 = a2[4];
    v8 = a2[5];
  }
  v25 = v8 & 1;
  if (v15 >= v25)
    v26 = v8 & 1;
  else
    v26 = 0;
  v27 = v9;
  v28 = v9 & 1;
  if (v10 >= v28)
    v29 = v9 & 1;
  else
    v29 = 0;
  v30 = v10 - v29;
  if ((v8 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v33 = *v12;
      v34 = v12[1];
      if (v33 >= 0xF000)
        v33 = 61440;
      if (v33 <= 0x1000)
        v33 = 4096;
      if (v34 >= 0xF000)
        v34 = 61440;
      if (v34 <= 0x1000)
        v35 = 4096;
      else
        v35 = v34;
      v31 = v12 + 2;
      *v17 = (613566757 * (unint64_t)((-1044480 - v33 + (v33 << 8)) >> 13)) >> 32;
      v17[1] = (613566757 * (unint64_t)((-1044480 - v35 + (v35 << 8)) >> 13)) >> 32;
      v32 = v17 + 2;
    }
    else
    {
      v31 = v12;
      v32 = v17;
    }
    if (v10 == v29)
    {
      v36 = 0;
    }
    else
    {
      v37 = v10 - v29;
      do
      {
        v38 = *v31;
        v39 = v31[1];
        if (v38 >= 0xF000)
          v38 = 61440;
        if (v38 <= 0x1000)
          v38 = 4096;
        if (v39 >= 0xF000)
          v39 = 61440;
        if (v39 <= 0x1000)
          v39 = 4096;
        v31 += 2;
        *v32 = (613566757 * (unint64_t)((-1044480 - v38 + (v38 << 8)) >> 13)) >> 32;
        v32[1] = (613566757 * (unint64_t)((-1044480 - v39 + (v39 << 8)) >> 13)) >> 32;
        v32 += 2;
        --v37;
      }
      while (v37);
      v36 = v10 - v29;
    }
    if (v36 + v28 < v10)
    {
      v40 = *v31;
      v41 = v31[1];
      if (v40 >= 0xF000)
        v40 = 61440;
      if (v40 <= 0x1000)
        v40 = 4096;
      if (v41 >= 0xF000)
        v41 = 61440;
      if (v41 <= 0x1000)
        v41 = 4096;
      *v32 = (613566757 * (unint64_t)((-1044480 - v40 + (v40 << 8)) >> 13)) >> 32;
      v32[1] = (613566757 * (unint64_t)((-1044480 - v41 + (v41 << 8)) >> 13)) >> 32;
    }
    v12 = (unsigned __int16 *)((char *)v12 + v11);
    v17 += v16;
  }
  if (v15 == v26)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v15 - v26;
    do
    {
      v44 = v12;
      v45 = v17;
      if ((v27 & 1) != 0)
      {
        v46 = *v12;
        v47 = v12[1];
        if (v46 >= 0xF000)
          v46 = 61440;
        if (v46 <= 0x1000)
          v46 = 4096;
        if (v47 >= 0xF000)
          v47 = 61440;
        if (v47 <= 0x1000)
          v48 = 4096;
        else
          v48 = v47;
        v44 = v12 + 2;
        *v17 = (613566757 * (unint64_t)((-1044480 - v46 + (v46 << 8)) >> 13)) >> 32;
        v17[1] = (613566757 * (unint64_t)((-1044480 - v48 + (v48 << 8)) >> 13)) >> 32;
        v45 = v17 + 2;
      }
      if (v10 == v29)
      {
        v49 = 0;
      }
      else
      {
        v50 = v10 - v29;
        do
        {
          v51 = *v44;
          v52 = v44[1];
          if (v51 >= 0xF000)
            v51 = 61440;
          if (v51 <= 0x1000)
            v51 = 4096;
          if (v52 >= 0xF000)
            v52 = 61440;
          if (v52 <= 0x1000)
            v52 = 4096;
          v44 += 2;
          *v45 = (613566757 * (unint64_t)((-1044480 - v51 + (v51 << 8)) >> 13)) >> 32;
          v45[1] = (613566757 * (unint64_t)((-1044480 - v52 + (v52 << 8)) >> 13)) >> 32;
          v45 += 2;
          --v50;
        }
        while (v50);
        v49 = v10 - v29;
      }
      if (v49 + v28 < v10)
      {
        v53 = *v44;
        v54 = v44[1];
        if (v53 >= 0xF000)
          v53 = 61440;
        if (v53 <= 0x1000)
          v53 = 4096;
        if (v54 >= 0xF000)
          v54 = 61440;
        if (v54 <= 0x1000)
          v54 = 4096;
        *v45 = (613566757 * (unint64_t)((-1044480 - v53 + (v53 << 8)) >> 13)) >> 32;
        v45[1] = (613566757 * (unint64_t)((-1044480 - v54 + (v54 << 8)) >> 13)) >> 32;
      }
      v12 = (unsigned __int16 *)((char *)v12 + v11);
      v17 += v16;
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v25 < v15)
  {
    if ((v27 & 1) != 0)
    {
      v55 = *v12;
      v56 = v12[1];
      if (v55 >= 0xF000)
        v55 = 61440;
      if (v55 <= 0x1000)
        v55 = 4096;
      if (v56 >= 0xF000)
        v56 = 61440;
      if (v56 <= 0x1000)
        v56 = 4096;
      v12 += 2;
      *v17 = (613566757 * (unint64_t)((-1044480 - v55 + (v55 << 8)) >> 13)) >> 32;
      v17[1] = (613566757 * (unint64_t)((-1044480 - v56 + (v56 << 8)) >> 13)) >> 32;
      v17 += 2;
    }
    if (v10 == v29)
    {
      v30 = 0;
    }
    else
    {
      v57 = v10 - v29;
      do
      {
        v58 = *v12;
        v59 = v12[1];
        if (v58 >= 0xF000)
          v58 = 61440;
        if (v58 <= 0x1000)
          v58 = 4096;
        if (v59 >= 0xF000)
          v59 = 61440;
        if (v59 <= 0x1000)
          v59 = 4096;
        v12 += 2;
        *v17 = (613566757 * (unint64_t)((-1044480 - v58 + (v58 << 8)) >> 13)) >> 32;
        v17[1] = (613566757 * (unint64_t)((-1044480 - v59 + (v59 << 8)) >> 13)) >> 32;
        v17 += 2;
        --v57;
      }
      while (v57);
    }
    if (v30 + v28 < v10)
    {
      v60 = *v12;
      v61 = v12[1];
      if (v60 >= 0xF000)
        v60 = 61440;
      if (v60 <= 0x1000)
        v60 = 4096;
      if (v61 >= 0xF000)
        v61 = 61440;
      if (v61 <= 0x1000)
        v61 = 4096;
      *v17 = (613566757 * (unint64_t)((-1044480 - v60 + (v60 << 8)) >> 13)) >> 32;
      v17[1] = (613566757 * (unint64_t)((-1044480 - v61 + (v61 << 8)) >> 13)) >> 32;
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_s4as_v2a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  unsigned __int8 *v36;
  _BYTE *v37;
  unsigned int v38;
  unint64_t v39;
  _BYTE *v40;
  unsigned int v41;
  unint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  _BYTE *v45;
  unsigned int v46;
  unint64_t v47;
  _BYTE *v48;
  unsigned int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  unint64_t v54;
  _BYTE *v55;
  unsigned int v56;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = v10 + v9;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  v15 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v16 = *(_QWORD *)(a6 + 40);
  v17 = a8[1];
  v18 = (_BYTE *)(a7[1] + v17 * v16 + (v15 & 0x7FFFFFFFFFFFFFFFLL));
  v19 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  if (v19 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v15)
    v19 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v15;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v20 = 0;
    v21 = *a8;
    v22 = a8[2];
    v23 = a7[2] + v22 * v16;
    v24 = *a7 + *a8 * v16;
    v25 = *a4;
    v26 = a4[2];
    v27 = v23 + v15;
    v28 = v24 + v15;
    v29 = a3[2] + v26 * v12 + 2 * v11;
    v30 = *a3 + v25 * v12 + 2 * v11;
    do
    {
      if (v19)
      {
        for (i = 0; i != v19; ++i)
        {
          *(_BYTE *)(v27 + i) = *(_WORD *)(v29 + 2 * i);
          *(_BYTE *)(v28 + i) = *(_BYTE *)(v30 + 2 * i + 1);
        }
      }
      v30 += v25;
      v28 += v21;
      v29 += v26;
      v27 += v22;
      ++v20;
    }
    while (v20 != v8);
    v9 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40);
    v10 = v9 & 1;
  }
  v32 = v12 & 1;
  if (v8 >= v32)
    v33 = v12 & 1;
  else
    v33 = 0;
  v34 = v9;
  if (v19 < v10)
    v10 = 0;
  v35 = v19 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v34 & 1) != 0)
    {
      v36 = v14 + 8;
      v38 = (v14[3] + v14[7] + 1) >> 1;
      *v18 = (v14[1] + v14[5] + 1) >> 1;
      v18[1] = v38;
      v37 = v18 + 2;
    }
    else
    {
      v36 = v14;
      v37 = v18;
    }
    if (v19 != v10)
    {
      v39 = 0;
      do
      {
        v40 = &v37[v39];
        v41 = (v36[3] + v36[7] + 1) >> 1;
        *v40 = (v36[1] + v36[5] + 1) >> 1;
        v40[1] = v41;
        v39 += 2;
        v36 += 8;
      }
      while (v39 < v35);
    }
    v14 += v13;
    v18 += v17;
  }
  if (v8 == v33)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v8 - v33;
    do
    {
      v44 = v14;
      v45 = v18;
      if ((v34 & 1) != 0)
      {
        v44 = v14 + 8;
        v46 = (v14[3] + v14[7] + 1) >> 1;
        *v18 = (v14[1] + v14[5] + 1) >> 1;
        v18[1] = v46;
        v45 = v18 + 2;
      }
      if (v19 != v10)
      {
        v47 = 0;
        do
        {
          v48 = &v45[v47];
          v49 = (v44[3] + v44[7] + 1) >> 1;
          *v48 = (v44[1] + v44[5] + 1) >> 1;
          v48[1] = v49;
          v47 += 2;
          v44 += 8;
        }
        while (v47 < v35);
      }
      v14 += v13;
      v18 += v17;
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v8)
  {
    if ((v34 & 1) != 0)
    {
      v50 = v14[1];
      v51 = v14[3];
      v52 = v14[5];
      v53 = v14[7];
      v14 += 8;
      *v18 = (v50 + v52 + 1) >> 1;
      v18[1] = (v51 + v53 + 1) >> 1;
      v18 += 2;
    }
    if (v19 != v10)
    {
      v54 = 0;
      do
      {
        v55 = &v18[v54];
        v56 = (v14[3] + v14[7] + 1) >> 1;
        *v55 = (v14[1] + v14[5] + 1) >> 1;
        v55[1] = v56;
        v54 += 2;
        v14 += 8;
      }
      while (v54 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_s4as_v2a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  char v38;
  unint64_t v39;
  _BYTE *v40;
  char v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  char v46;
  unint64_t v47;
  _BYTE *v48;
  char v49;
  char v50;
  char v51;
  unint64_t v52;
  _BYTE *v53;
  char v54;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = v10 + v9;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = a3[1] + v13 * v12 + 4 * (v10 + v9);
  v15 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v16 = *(_QWORD *)(a6 + 40);
  v17 = a8[1];
  v18 = (_BYTE *)(a7[1] + v17 * v16 + (v15 & 0x7FFFFFFFFFFFFFFFLL));
  v19 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  if (v19 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v15)
    v19 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v15;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v20 = 0;
    v21 = *a8;
    v22 = a8[2];
    v23 = a7[2] + v22 * v16;
    v24 = *a7 + *a8 * v16;
    v25 = *a4;
    v26 = a4[2];
    v27 = v23 + v15;
    v28 = v24 + v15;
    v29 = a3[2] + v26 * v12 + 2 * v11;
    v30 = *a3 + v25 * v12 + 2 * v11;
    do
    {
      if (v19)
      {
        for (i = 0; i != v19; ++i)
        {
          *(_BYTE *)(v27 + i) = *(_WORD *)(v29 + 2 * i);
          *(_BYTE *)(v28 + i) = *(_BYTE *)(v30 + 2 * i + 1);
        }
      }
      v30 += v25;
      v28 += v21;
      v29 += v26;
      v27 += v22;
      ++v20;
    }
    while (v20 != v8);
    v9 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40);
    v10 = v9 & 1;
  }
  v32 = v12 & 1;
  if (v8 >= v32)
    v33 = v12 & 1;
  else
    v33 = 0;
  v34 = v9;
  if (v19 < v10)
    v10 = 0;
  v35 = v19 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v34 & 1) != 0)
    {
      v38 = *(_BYTE *)(v14 + 3);
      v36 = v14 + 8;
      *v18 = *(_BYTE *)(v14 + 1);
      v18[1] = v38;
      v37 = v18 + 2;
    }
    else
    {
      v36 = v14;
      v37 = v18;
    }
    if (v19 != v10)
    {
      v39 = 0;
      do
      {
        v40 = &v37[v39];
        v41 = *(_BYTE *)(v36 + 3);
        *v40 = *(_BYTE *)(v36 + 1);
        v40[1] = v41;
        v39 += 2;
        v36 += 8;
      }
      while (v39 < v35);
    }
    v14 += v13;
    v18 += v17;
  }
  if (v8 == v33)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v8 - v33;
    do
    {
      v44 = v14;
      v45 = v18;
      if ((v34 & 1) != 0)
      {
        v46 = *(_BYTE *)(v14 + 3);
        v44 = v14 + 8;
        *v18 = *(_BYTE *)(v14 + 1);
        v18[1] = v46;
        v45 = v18 + 2;
      }
      if (v19 != v10)
      {
        v47 = 0;
        do
        {
          v48 = &v45[v47];
          v49 = *(_BYTE *)(v44 + 3);
          *v48 = *(_BYTE *)(v44 + 1);
          v48[1] = v49;
          v47 += 2;
          v44 += 8;
        }
        while (v47 < v35);
      }
      v14 += v13;
      v18 += v17;
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v8)
  {
    if ((v34 & 1) != 0)
    {
      v50 = *(_BYTE *)(v14 + 1);
      v51 = *(_BYTE *)(v14 + 3);
      v14 += 8;
      *v18 = v50;
      v18[1] = v51;
      v18 += 2;
    }
    if (v19 != v10)
    {
      v52 = 0;
      do
      {
        v53 = &v18[v52];
        v54 = *(_BYTE *)(v14 + 3);
        *v53 = *(_BYTE *)(v14 + 1);
        v53[1] = v54;
        v52 += 2;
        v14 += 8;
      }
      while (v52 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sv44_422v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  unsigned __int8 *v33;
  _BYTE *v34;
  unsigned int v35;
  unint64_t v36;
  _BYTE *v37;
  unsigned int v38;
  unint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  _BYTE *v42;
  unsigned int v43;
  unint64_t v44;
  _BYTE *v45;
  unsigned int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  unint64_t v51;
  _BYTE *v52;
  unsigned int v53;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = v10 + v9;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = a8[1];
  v20 = (_BYTE *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v22 = v17 - v16;
  if (v21 >= v22)
    v21 = v22;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = *a7 + *a8 * v18 + v16;
    v27 = *a3 + *a4 * v12 + 2 * v11;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
          *(_BYTE *)(v26 + i) = *(_BYTE *)(v27 + 2 * i + 1);
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v8);
    v9 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40);
    v10 = v9 & 1;
  }
  v29 = v12 & 1;
  if (v8 >= v29)
    v30 = v12 & 1;
  else
    v30 = 0;
  v31 = v9;
  if (v21 < v10)
    v10 = 0;
  v32 = v21 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v31 & 1) != 0)
    {
      v33 = v14 + 8;
      v35 = (v14[3] + v14[7] + 1) >> 1;
      *v20 = (v14[1] + v14[5] + 1) >> 1;
      v20[1] = v35;
      v34 = v20 + 2;
    }
    else
    {
      v33 = v14;
      v34 = v20;
    }
    if (v21 != v10)
    {
      v36 = 0;
      do
      {
        v37 = &v34[v36];
        v38 = (v33[3] + v33[7] + 1) >> 1;
        *v37 = (v33[1] + v33[5] + 1) >> 1;
        v37[1] = v38;
        v36 += 2;
        v33 += 8;
      }
      while (v36 < v32);
    }
    v14 += v13;
    v20 += v19;
  }
  if (v8 == v30)
  {
    v39 = 0;
  }
  else
  {
    v40 = 0;
    v39 = v8 - v30;
    do
    {
      v41 = v14;
      v42 = v20;
      if ((v31 & 1) != 0)
      {
        v41 = v14 + 8;
        v43 = (v14[3] + v14[7] + 1) >> 1;
        *v20 = (v14[1] + v14[5] + 1) >> 1;
        v20[1] = v43;
        v42 = v20 + 2;
      }
      if (v21 != v10)
      {
        v44 = 0;
        do
        {
          v45 = &v42[v44];
          v46 = (v41[3] + v41[7] + 1) >> 1;
          *v45 = (v41[1] + v41[5] + 1) >> 1;
          v45[1] = v46;
          v44 += 2;
          v41 += 8;
        }
        while (v44 < v32);
      }
      v14 += v13;
      v20 += v19;
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v29 < v8)
  {
    if ((v31 & 1) != 0)
    {
      v47 = v14[1];
      v48 = v14[3];
      v49 = v14[5];
      v50 = v14[7];
      v14 += 8;
      *v20 = (v47 + v49 + 1) >> 1;
      v20[1] = (v48 + v50 + 1) >> 1;
      v20 += 2;
    }
    if (v21 != v10)
    {
      v51 = 0;
      do
      {
        v52 = &v20[v51];
        v53 = (v14[3] + v14[7] + 1) >> 1;
        *v52 = (v14[1] + v14[5] + 1) >> 1;
        v52[1] = v53;
        v51 += 2;
        v14 += 8;
      }
      while (v51 < v32);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_sv44_422v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  char v35;
  unint64_t v36;
  _BYTE *v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  char v43;
  unint64_t v44;
  _BYTE *v45;
  char v46;
  char v47;
  char v48;
  unint64_t v49;
  _BYTE *v50;
  char v51;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = v10 + v9;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = a3[1] + v13 * v12 + 4 * (v10 + v9);
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = a8[1];
  v20 = (_BYTE *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v22 = v17 - v16;
  if (v21 >= v22)
    v21 = v22;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = *a7 + *a8 * v18 + v16;
    v27 = *a3 + *a4 * v12 + 2 * v11;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
          *(_BYTE *)(v26 + i) = *(_BYTE *)(v27 + 2 * i + 1);
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v8);
    v9 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40);
    v10 = v9 & 1;
  }
  v29 = v12 & 1;
  if (v8 >= v29)
    v30 = v12 & 1;
  else
    v30 = 0;
  v31 = v9;
  if (v21 < v10)
    v10 = 0;
  v32 = v21 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v31 & 1) != 0)
    {
      v35 = *(_BYTE *)(v14 + 3);
      v33 = v14 + 8;
      *v20 = *(_BYTE *)(v14 + 1);
      v20[1] = v35;
      v34 = v20 + 2;
    }
    else
    {
      v33 = v14;
      v34 = v20;
    }
    if (v21 != v10)
    {
      v36 = 0;
      do
      {
        v37 = &v34[v36];
        v38 = *(_BYTE *)(v33 + 3);
        *v37 = *(_BYTE *)(v33 + 1);
        v37[1] = v38;
        v36 += 2;
        v33 += 8;
      }
      while (v36 < v32);
    }
    v14 += v13;
    v20 += v19;
  }
  if (v8 == v30)
  {
    v39 = 0;
  }
  else
  {
    v40 = 0;
    v39 = v8 - v30;
    do
    {
      v41 = v14;
      v42 = v20;
      if ((v31 & 1) != 0)
      {
        v43 = *(_BYTE *)(v14 + 3);
        v41 = v14 + 8;
        *v20 = *(_BYTE *)(v14 + 1);
        v20[1] = v43;
        v42 = v20 + 2;
      }
      if (v21 != v10)
      {
        v44 = 0;
        do
        {
          v45 = &v42[v44];
          v46 = *(_BYTE *)(v41 + 3);
          *v45 = *(_BYTE *)(v41 + 1);
          v45[1] = v46;
          v44 += 2;
          v41 += 8;
        }
        while (v44 < v32);
      }
      v14 += v13;
      v20 += v19;
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v29 < v8)
  {
    if ((v31 & 1) != 0)
    {
      v47 = *(_BYTE *)(v14 + 1);
      v48 = *(_BYTE *)(v14 + 3);
      v14 += 8;
      *v20 = v47;
      v20[1] = v48;
      v20 += 2;
    }
    if (v21 != v10)
    {
      v49 = 0;
      do
      {
        v50 = &v20[v49];
        v51 = *(_BYTE *)(v14 + 3);
        *v50 = *(_BYTE *)(v14 + 1);
        v50[1] = v51;
        v49 += 2;
        v14 += 8;
      }
      while (v49 < v32);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sv44_422f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unsigned __int16 *v34;
  _BYTE *v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  int v43;
  unint64_t v44;
  _BYTE *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unint64_t v50;
  uint64_t v51;
  unsigned __int16 *v52;
  _BYTE *v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  int v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  int v61;
  unint64_t v62;
  _BYTE *v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unint64_t v72;
  _BYTE *v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = a8[1];
  v20 = (_BYTE *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  v22 = v17 - v16;
  if (v21 >= v22)
    v21 = v22;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = *a7 + *a8 * v18 + v16;
    v27 = *a3 + *a4 * v12 + 2 * v11;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
        {
          v29 = *(unsigned __int16 *)(v27 + 2 * i);
          if (v29 >= 0xEB00)
            v29 = 60160;
          if (v29 <= 0x1000)
            v29 = 4096;
          *(_BYTE *)(v26 + i) = (-1044480 - v29 + (v29 << 8)) / 0xDB00;
        }
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v9);
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40);
    v10 = v8 & 1;
  }
  v30 = v12 & 1;
  if (v9 >= v30)
    v31 = v12 & 1;
  else
    v31 = 0;
  v32 = v8;
  if (v21 < v10)
    v10 = 0;
  v33 = v21 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v36 = *v14;
      if (v36 >= 0xF000)
        v36 = 61440;
      if (v36 <= 0x1000)
        v37 = 4096;
      else
        v37 = v36;
      if (v14[1] >= 0xF000u)
        v38 = 61440;
      else
        v38 = v14[1];
      if (v38 <= 0x1000)
        v39 = 4096;
      else
        v39 = v38;
      v40 = v14[2];
      if (v40 >= 0xF000)
        v40 = 61440;
      if (v40 <= 0x1000)
        v41 = 4096;
      else
        v41 = v40;
      if (v14[3] >= 0xF000u)
        v42 = 61440;
      else
        v42 = v14[3];
      if (v42 <= 0x1000)
        v43 = 4096;
      else
        v43 = v42;
      v34 = v14 + 4;
      *v20 = (((613566757 * (unint64_t)((-1044480 - v37 + (v37 << 8)) >> 13)) >> 32)
                          + ((613566757 * (unint64_t)((-1044480 - v41 + (v41 << 8)) >> 13)) >> 32)
                          + 1) >> 1;
      v20[1] = (((613566757 * (unint64_t)((-1044480 - v39 + (v39 << 8)) >> 13)) >> 32)
                            + ((613566757 * (unint64_t)((-1044480 - v43 + (v43 << 8)) >> 13)) >> 32)
                            + 1) >> 1;
      v35 = v20 + 2;
    }
    else
    {
      v34 = v14;
      v35 = v20;
    }
    if (v21 != v10)
    {
      v44 = 0;
      do
      {
        v45 = &v35[v44];
        v46 = *v34;
        v47 = v34[1];
        if (v46 >= 0xF000)
          v46 = 61440;
        if (v46 <= 0x1000)
          v46 = 4096;
        if (v47 >= 0xF000)
          v47 = 61440;
        if (v47 <= 0x1000)
          v47 = 4096;
        v48 = v34[2];
        v49 = v34[3];
        if (v48 >= 0xF000)
          v48 = 61440;
        if (v48 <= 0x1000)
          v48 = 4096;
        if (v49 >= 0xF000)
          v49 = 61440;
        if (v49 <= 0x1000)
          v49 = 4096;
        *v45 = (((613566757 * (unint64_t)((-1044480 - v46 + (v46 << 8)) >> 13)) >> 32)
                            + ((613566757 * (unint64_t)((-1044480 - v48 + (v48 << 8)) >> 13)) >> 32)
                            + 1) >> 1;
        v45[1] = (((613566757 * (unint64_t)((-1044480 - v47 + (v47 << 8)) >> 13)) >> 32)
                              + ((613566757 * (unint64_t)((-1044480 - v49 + (v49 << 8)) >> 13)) >> 32)
                              + 1) >> 1;
        v44 += 2;
        v34 += 4;
      }
      while (v44 < v33);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v20 += v19;
  }
  if (v9 == v31)
  {
    v50 = 0;
  }
  else
  {
    v51 = 0;
    v50 = v9 - v31;
    do
    {
      v52 = v14;
      v53 = v20;
      if ((v32 & 1) != 0)
      {
        v54 = *v14;
        if (v54 >= 0xF000)
          v54 = 61440;
        if (v54 <= 0x1000)
          v55 = 4096;
        else
          v55 = v54;
        if (v14[1] >= 0xF000u)
          v56 = 61440;
        else
          v56 = v14[1];
        if (v56 <= 0x1000)
          v57 = 4096;
        else
          v57 = v56;
        v58 = v14[2];
        if (v58 >= 0xF000)
          v58 = 61440;
        if (v58 <= 0x1000)
          v59 = 4096;
        else
          v59 = v58;
        if (v14[3] >= 0xF000u)
          v60 = 61440;
        else
          v60 = v14[3];
        if (v60 <= 0x1000)
          v61 = 4096;
        else
          v61 = v60;
        v52 = v14 + 4;
        *v20 = (((613566757 * (unint64_t)((-1044480 - v55 + (v55 << 8)) >> 13)) >> 32)
                            + ((613566757 * (unint64_t)((-1044480 - v59 + (v59 << 8)) >> 13)) >> 32)
                            + 1) >> 1;
        v20[1] = (((613566757 * (unint64_t)((-1044480 - v57 + (v57 << 8)) >> 13)) >> 32)
                              + ((613566757 * (unint64_t)((-1044480 - v61 + (v61 << 8)) >> 13)) >> 32)
                              + 1) >> 1;
        v53 = v20 + 2;
      }
      if (v21 != v10)
      {
        v62 = 0;
        do
        {
          v63 = &v53[v62];
          v64 = *v52;
          v65 = v52[1];
          if (v64 >= 0xF000)
            v64 = 61440;
          if (v64 <= 0x1000)
            v64 = 4096;
          if (v65 >= 0xF000)
            v65 = 61440;
          if (v65 <= 0x1000)
            v65 = 4096;
          v66 = v52[2];
          v67 = v52[3];
          if (v66 >= 0xF000)
            v66 = 61440;
          if (v66 <= 0x1000)
            v66 = 4096;
          if (v67 >= 0xF000)
            v67 = 61440;
          if (v67 <= 0x1000)
            v67 = 4096;
          *v63 = (((613566757 * (unint64_t)((-1044480 - v64 + (v64 << 8)) >> 13)) >> 32)
                              + ((613566757 * (unint64_t)((-1044480 - v66 + (v66 << 8)) >> 13)) >> 32)
                              + 1) >> 1;
          v63[1] = (((613566757 * (unint64_t)((-1044480 - v65 + (v65 << 8)) >> 13)) >> 32)
                                + ((613566757 * (unint64_t)((-1044480 - v67 + (v67 << 8)) >> 13)) >> 32)
                                + 1) >> 1;
          v62 += 2;
          v52 += 4;
        }
        while (v62 < v33);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
      ++v51;
    }
    while (v51 != v50);
  }
  if (v50 + v30 < v9)
  {
    if ((v32 & 1) != 0)
    {
      v68 = *v14;
      v69 = v14[1];
      if (v68 >= 0xF000)
        v68 = 61440;
      if (v68 <= 0x1000)
        v68 = 4096;
      if (v69 >= 0xF000)
        v69 = 61440;
      if (v69 <= 0x1000)
        v69 = 4096;
      v70 = v14[2];
      if (v70 >= 0xF000)
        v70 = 61440;
      if (v70 <= 0x1000)
        v70 = 4096;
      if (v14[3] >= 0xF000u)
        v71 = 61440;
      else
        v71 = v14[3];
      if (v71 <= 0x1000)
        v71 = 4096;
      v14 += 4;
      *v20 = (((613566757 * (unint64_t)((-1044480 - v68 + (v68 << 8)) >> 13)) >> 32)
                          + ((613566757 * (unint64_t)((-1044480 - v70 + (v70 << 8)) >> 13)) >> 32)
                          + 1) >> 1;
      v20[1] = (((613566757 * (unint64_t)((-1044480 - v69 + (v69 << 8)) >> 13)) >> 32)
                            + ((613566757 * (unint64_t)((-1044480 - v71 + (v71 << 8)) >> 13)) >> 32)
                            + 1) >> 1;
      v20 += 2;
    }
    if (v21 != v10)
    {
      v72 = 0;
      do
      {
        v73 = &v20[v72];
        v74 = *v14;
        v75 = v14[1];
        if (v74 >= 0xF000)
          v74 = 61440;
        if (v74 <= 0x1000)
          v74 = 4096;
        if (v75 >= 0xF000)
          v75 = 61440;
        if (v75 <= 0x1000)
          v75 = 4096;
        v76 = v14[2];
        v77 = v14[3];
        if (v76 >= 0xF000)
          v76 = 61440;
        if (v76 <= 0x1000)
          v76 = 4096;
        if (v77 >= 0xF000)
          v77 = 61440;
        if (v77 <= 0x1000)
          v77 = 4096;
        *v73 = (((613566757 * (unint64_t)((-1044480 - v74 + (v74 << 8)) >> 13)) >> 32)
                            + ((613566757 * (unint64_t)((-1044480 - v76 + (v76 << 8)) >> 13)) >> 32)
                            + 1) >> 1;
        v73[1] = (((613566757 * (unint64_t)((-1044480 - v75 + (v75 << 8)) >> 13)) >> 32)
                              + ((613566757 * (unint64_t)((-1044480 - v77 + (v77 << 8)) >> 13)) >> 32)
                              + 1) >> 1;
        v72 += 2;
        v14 += 4;
      }
      while (v72 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_sv44_422f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unsigned __int16 *v34;
  _BYTE *v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  int v39;
  unint64_t v40;
  _BYTE *v41;
  unsigned int v42;
  unsigned int v43;
  unint64_t v44;
  uint64_t v45;
  unsigned __int16 *v46;
  _BYTE *v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  int v51;
  unint64_t v52;
  _BYTE *v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unint64_t v58;
  _BYTE *v59;
  unsigned int v60;
  unsigned int v61;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = v10 + v9;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = a8[1];
  v20 = (_BYTE *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v22 = v17 - v16;
  if (v21 >= v22)
    v21 = v22;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = *a7 + *a8 * v18 + v16;
    v27 = *a3 + *a4 * v12 + 2 * v11;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
        {
          v29 = *(unsigned __int16 *)(v27 + 2 * i);
          if (v29 >= 0xEB00)
            v29 = 60160;
          if (v29 <= 0x1000)
            v29 = 4096;
          *(_BYTE *)(v26 + i) = (-1044480 - v29 + (v29 << 8)) / 0xDB00;
        }
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v8);
    v9 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40);
    v10 = v9 & 1;
  }
  v30 = v12 & 1;
  if (v8 >= v30)
    v31 = v12 & 1;
  else
    v31 = 0;
  v32 = v9;
  if (v21 < v10)
    v10 = 0;
  v33 = v21 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v36 = *v14;
      if (v36 >= 0xF000)
        v36 = 61440;
      if (v36 <= 0x1000)
        v37 = 4096;
      else
        v37 = v36;
      if (v14[1] >= 0xF000u)
        v38 = 61440;
      else
        v38 = v14[1];
      if (v38 <= 0x1000)
        v39 = 4096;
      else
        v39 = v38;
      v34 = v14 + 4;
      *v20 = (613566757 * (unint64_t)((-1044480 - v37 + (v37 << 8)) >> 13)) >> 32;
      v20[1] = (613566757 * (unint64_t)((-1044480 - v39 + (v39 << 8)) >> 13)) >> 32;
      v35 = v20 + 2;
    }
    else
    {
      v34 = v14;
      v35 = v20;
    }
    if (v21 != v10)
    {
      v40 = 0;
      do
      {
        v41 = &v35[v40];
        v42 = *v34;
        v43 = v34[1];
        if (v42 >= 0xF000)
          v42 = 61440;
        if (v42 <= 0x1000)
          v42 = 4096;
        if (v43 >= 0xF000)
          v43 = 61440;
        if (v43 <= 0x1000)
          v43 = 4096;
        *v41 = (613566757 * (unint64_t)((-1044480 - v42 + (v42 << 8)) >> 13)) >> 32;
        v41[1] = (613566757 * (unint64_t)((-1044480 - v43 + (v43 << 8)) >> 13)) >> 32;
        v40 += 2;
        v34 += 4;
      }
      while (v40 < v33);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v20 += v19;
  }
  if (v8 == v31)
  {
    v44 = 0;
  }
  else
  {
    v45 = 0;
    v44 = v8 - v31;
    do
    {
      v46 = v14;
      v47 = v20;
      if ((v32 & 1) != 0)
      {
        v48 = *v14;
        if (v48 >= 0xF000)
          v48 = 61440;
        if (v48 <= 0x1000)
          v49 = 4096;
        else
          v49 = v48;
        if (v14[1] >= 0xF000u)
          v50 = 61440;
        else
          v50 = v14[1];
        if (v50 <= 0x1000)
          v51 = 4096;
        else
          v51 = v50;
        v46 = v14 + 4;
        *v20 = (613566757 * (unint64_t)((-1044480 - v49 + (v49 << 8)) >> 13)) >> 32;
        v20[1] = (613566757 * (unint64_t)((-1044480 - v51 + (v51 << 8)) >> 13)) >> 32;
        v47 = v20 + 2;
      }
      if (v21 != v10)
      {
        v52 = 0;
        do
        {
          v53 = &v47[v52];
          v54 = *v46;
          v55 = v46[1];
          if (v54 >= 0xF000)
            v54 = 61440;
          if (v54 <= 0x1000)
            v54 = 4096;
          if (v55 >= 0xF000)
            v55 = 61440;
          if (v55 <= 0x1000)
            v55 = 4096;
          *v53 = (613566757 * (unint64_t)((-1044480 - v54 + (v54 << 8)) >> 13)) >> 32;
          v53[1] = (613566757 * (unint64_t)((-1044480 - v55 + (v55 << 8)) >> 13)) >> 32;
          v52 += 2;
          v46 += 4;
        }
        while (v52 < v33);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v30 < v8)
  {
    if ((v32 & 1) != 0)
    {
      v56 = *v14;
      v57 = v14[1];
      if (v56 >= 0xF000)
        v56 = 61440;
      if (v56 <= 0x1000)
        v56 = 4096;
      if (v57 >= 0xF000)
        v57 = 61440;
      if (v57 <= 0x1000)
        v57 = 4096;
      v14 += 4;
      *v20 = (613566757 * (unint64_t)((-1044480 - v56 + (v56 << 8)) >> 13)) >> 32;
      v20[1] = (613566757 * (unint64_t)((-1044480 - v57 + (v57 << 8)) >> 13)) >> 32;
      v20 += 2;
    }
    if (v21 != v10)
    {
      v58 = 0;
      do
      {
        v59 = &v20[v58];
        v60 = *v14;
        v61 = v14[1];
        if (v60 >= 0xF000)
          v60 = 61440;
        if (v60 <= 0x1000)
          v60 = 4096;
        if (v61 >= 0xF000)
          v61 = 61440;
        if (v61 <= 0x1000)
          v61 = 4096;
        *v59 = (613566757 * (unint64_t)((-1044480 - v60 + (v60 << 8)) >> 13)) >> 32;
        v59[1] = (613566757 * (unint64_t)((-1044480 - v61 + (v61 << 8)) >> 13)) >> 32;
        v58 += 2;
        v14 += 4;
      }
      while (v58 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_s4as_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  unint64_t v34;
  unint64_t v35;
  unsigned __int8 *v36;
  _BYTE *v37;
  unsigned int v38;
  unint64_t v39;
  unsigned __int8 *v40;
  _BYTE *v41;
  unsigned int v42;
  unint64_t v43;
  unint64_t v44;
  unsigned __int8 *v45;
  _BYTE *v46;
  unsigned int v47;
  unint64_t v48;
  unsigned __int8 *v49;
  _BYTE *v50;
  unsigned int v51;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v18 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v19 = a8[1];
  v20 = (_BYTE *)(a7[1] + ((unint64_t)(v19 * v17) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  if (v21 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v16)
    v21 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v16;
  v22 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v13;
  if (v22 >= v18 - v17)
    v22 = v18 - v17;
  if (v22)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = a8[2];
    if (v13 >= v9)
      v27 = 0;
    else
      v27 = *a4;
    v28 = *a3 + *a4 * v13 + 2 * v11 + v27;
    v29 = a4[2];
    v30 = a7[2] + v26 * v17 + v16;
    v31 = *a7 + v25 * v17 + v16;
    v32 = a3[2] + v29 * v13 + 2 * v11;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
        {
          *(_BYTE *)(v30 + i) = *(_WORD *)(v32 + 2 * i);
          *(_BYTE *)(v31 + i) = *(_BYTE *)(v28 + 2 * i + 1);
        }
      }
      v28 += v24;
      v31 += v25;
      v32 += v29;
      v30 += v26;
      ++v23;
    }
    while (v23 != v22);
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v22 >= v12)
    v34 = v12;
  else
    v34 = 0;
  if (v21 < v10)
    v10 = 0;
  v35 = v21 - v10;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v36 = v15 + 8;
      v38 = (v15[3] + v15[7] + v15[v14 + 3] + v15[v14 + 7] + 2) >> 2;
      *v20 = (v15[1] + v15[5] + v15[v14 + 1] + v15[v14 + 5] + 2) >> 2;
      v20[1] = v38;
      v37 = v20 + 2;
    }
    else
    {
      v36 = v15;
      v37 = v20;
    }
    if (v21 != v10)
    {
      v39 = 0;
      v40 = v36 + 4;
      do
      {
        v41 = &v37[v39];
        v42 = (*(v40 - 1) + v40[3] + v40[v14 - 1] + v40[v14 + 3] + 2) >> 2;
        *v41 = (*(v40 - 3) + v40[1] + v40[v14 - 3] + v40[v14 + 1] + 2) >> 2;
        v41[1] = v42;
        v39 += 2;
        v40 += 8;
      }
      while (v39 < v35);
    }
    v15 += 2 * v14;
    v20 += v19;
  }
  if (v22 != v34)
  {
    v43 = 0;
    v44 = v22 - v34;
    do
    {
      v45 = v15;
      v46 = v20;
      if ((v8 & 1) != 0)
      {
        v45 = v15 + 8;
        v47 = (v15[3] + v15[7] + v15[v14 + 3] + v15[v14 + 7] + 2) >> 2;
        *v20 = (v15[1] + v15[5] + v15[v14 + 1] + v15[v14 + 5] + 2) >> 2;
        v20[1] = v47;
        v46 = v20 + 2;
      }
      if (v21 != v10)
      {
        v48 = 0;
        v49 = v45 + 4;
        do
        {
          v50 = &v46[v48];
          v51 = (*(v49 - 1) + v49[3] + v49[v14 - 1] + v49[v14 + 3] + 2) >> 2;
          *v50 = (*(v49 - 3) + v49[1] + v49[v14 - 3] + v49[v14 + 1] + 2) >> 2;
          v50[1] = v51;
          v48 += 2;
          v49 += 8;
        }
        while (v48 < v35);
      }
      v15 += 2 * v14;
      v20 += v19;
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_CopyDec_s4as_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  char v38;
  unint64_t v39;
  _BYTE *v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  char v47;
  unint64_t v48;
  _BYTE *v49;
  char v50;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = a4[1];
  v15 = a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v18 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v19 = a8[1];
  v20 = (_BYTE *)(a7[1] + ((unint64_t)(v19 * v17) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  if (v21 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v16)
    v21 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v16;
  v22 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v13;
  if (v22 >= v18 - v17)
    v22 = v18 - v17;
  if (v22)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = a8[2];
    if (v13 >= v9)
      v27 = 0;
    else
      v27 = *a4;
    v28 = *a3 + *a4 * v13 + 2 * v11 + v27;
    v29 = a4[2];
    v30 = a7[2] + v26 * v17 + v16;
    v31 = *a7 + v25 * v17 + v16;
    v32 = a3[2] + v29 * v13 + 2 * v11;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
        {
          *(_BYTE *)(v30 + i) = *(_WORD *)(v32 + 2 * i);
          *(_BYTE *)(v31 + i) = *(_BYTE *)(v28 + 2 * i + 1);
        }
      }
      v28 += v24;
      v31 += v25;
      v32 += v29;
      v30 += v26;
      ++v23;
    }
    while (v23 != v22);
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v22 >= v12)
    v34 = v12;
  else
    v34 = 0;
  if (v21 < v10)
    v10 = 0;
  v35 = v21 - v10;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v38 = *(_BYTE *)(v15 + 3);
      v36 = v15 + 8;
      *v20 = *(_BYTE *)(v15 + 1);
      v20[1] = v38;
      v37 = v20 + 2;
    }
    else
    {
      v36 = v15;
      v37 = v20;
    }
    if (v21 != v10)
    {
      v39 = 0;
      do
      {
        v40 = &v37[v39];
        v41 = *(_BYTE *)(v36 + 3);
        *v40 = *(_BYTE *)(v36 + 1);
        v40[1] = v41;
        v39 += 2;
        v36 += 8;
      }
      while (v39 < v35);
    }
    v15 += 2 * v14;
    v20 += v19;
  }
  if (v22 != v34)
  {
    v42 = 0;
    v43 = v22 - v34;
    v44 = 2 * v14;
    do
    {
      v45 = v15;
      v46 = v20;
      if ((v8 & 1) != 0)
      {
        v47 = *(_BYTE *)(v15 + 3);
        v45 = v15 + 8;
        *v20 = *(_BYTE *)(v15 + 1);
        v20[1] = v47;
        v46 = v20 + 2;
      }
      if (v21 != v10)
      {
        v48 = 0;
        do
        {
          v49 = &v46[v48];
          v50 = *(_BYTE *)(v45 + 3);
          *v49 = *(_BYTE *)(v45 + 1);
          v49[1] = v50;
          v48 += 2;
          v45 += 8;
        }
        while (v48 < v35);
      }
      v15 += v44;
      v20 += v19;
      v42 += 2;
    }
    while (v42 < v43);
  }
  return 0;
}

uint64_t vt_CopyAvg_sv44_420v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  unint64_t v33;
  unsigned __int8 *v34;
  _BYTE *v35;
  unsigned int v36;
  unint64_t v37;
  unsigned __int8 *v38;
  _BYTE *v39;
  unsigned int v40;
  unint64_t v41;
  unint64_t v42;
  unsigned __int8 *v43;
  _BYTE *v44;
  unsigned int v45;
  unint64_t v46;
  unsigned __int8 *v47;
  _BYTE *v48;
  unsigned int v49;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = a8[1];
  v21 = (_BYTE *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v22 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  v24 = v19 - v18;
  if (((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v13 < v19 - v18)
    v24 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v13;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    if (v13 >= v9)
      v28 = 0;
    else
      v28 = *a4;
    v29 = *a3 + *a4 * v13 + 2 * v11 + v28;
    v30 = *a7 + v27 * v18 + v16;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_BYTE *)(v30 + i) = *(_BYTE *)(v29 + 2 * i + 1);
      }
      v29 += v26;
      v30 += v27;
      ++v25;
    }
    while (v25 != v24);
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v24 >= v12)
    v32 = v12;
  else
    v32 = 0;
  if (v22 < v10)
    v10 = 0;
  v33 = v22 - v10;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v34 = v15 + 8;
      v36 = (v15[3] + v15[7] + v15[v14 + 3] + v15[v14 + 7] + 2) >> 2;
      *v21 = (v15[1] + v15[5] + v15[v14 + 1] + v15[v14 + 5] + 2) >> 2;
      v21[1] = v36;
      v35 = v21 + 2;
    }
    else
    {
      v34 = v15;
      v35 = v21;
    }
    if (v22 != v10)
    {
      v37 = 0;
      v38 = v34 + 4;
      do
      {
        v39 = &v35[v37];
        v40 = (*(v38 - 1) + v38[3] + v38[v14 - 1] + v38[v14 + 3] + 2) >> 2;
        *v39 = (*(v38 - 3) + v38[1] + v38[v14 - 3] + v38[v14 + 1] + 2) >> 2;
        v39[1] = v40;
        v37 += 2;
        v38 += 8;
      }
      while (v37 < v33);
    }
    v15 += 2 * v14;
    v21 += v20;
  }
  if (v24 != v32)
  {
    v41 = 0;
    v42 = v24 - v32;
    do
    {
      v43 = v15;
      v44 = v21;
      if ((v8 & 1) != 0)
      {
        v43 = v15 + 8;
        v45 = (v15[3] + v15[7] + v15[v14 + 3] + v15[v14 + 7] + 2) >> 2;
        *v21 = (v15[1] + v15[5] + v15[v14 + 1] + v15[v14 + 5] + 2) >> 2;
        v21[1] = v45;
        v44 = v21 + 2;
      }
      if (v22 != v10)
      {
        v46 = 0;
        v47 = v43 + 4;
        do
        {
          v48 = &v44[v46];
          v49 = (*(v47 - 1) + v47[3] + v47[v14 - 1] + v47[v14 + 3] + 2) >> 2;
          *v48 = (*(v47 - 3) + v47[1] + v47[v14 - 3] + v47[v14 + 1] + 2) >> 2;
          v48[1] = v49;
          v46 += 2;
          v47 += 8;
        }
        while (v46 < v33);
      }
      v15 += 2 * v14;
      v21 += v20;
      v41 += 2;
    }
    while (v41 < v42);
  }
  return 0;
}

uint64_t vt_CopyDec_sv44_420v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  char v36;
  unint64_t v37;
  _BYTE *v38;
  char v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  char v45;
  unint64_t v46;
  _BYTE *v47;
  char v48;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = a4[1];
  v15 = a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = a8[1];
  v21 = (_BYTE *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v22 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  v24 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v13;
  if (v24 >= v19 - v18)
    v24 = v19 - v18;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    if (v13 >= v9)
      v28 = 0;
    else
      v28 = *a4;
    v29 = *a3 + *a4 * v13 + 2 * v11 + v28;
    v30 = *a7 + v27 * v18 + v16;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_BYTE *)(v30 + i) = *(_BYTE *)(v29 + 2 * i + 1);
      }
      v29 += v26;
      v30 += v27;
      ++v25;
    }
    while (v25 != v24);
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v24 >= v12)
    v32 = v12;
  else
    v32 = 0;
  if (v22 < v10)
    v10 = 0;
  v33 = v22 - v10;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v36 = *(_BYTE *)(v15 + 3);
      v34 = v15 + 8;
      *v21 = *(_BYTE *)(v15 + 1);
      v21[1] = v36;
      v35 = v21 + 2;
    }
    else
    {
      v34 = v15;
      v35 = v21;
    }
    if (v22 != v10)
    {
      v37 = 0;
      do
      {
        v38 = &v35[v37];
        v39 = *(_BYTE *)(v34 + 3);
        *v38 = *(_BYTE *)(v34 + 1);
        v38[1] = v39;
        v37 += 2;
        v34 += 8;
      }
      while (v37 < v33);
    }
    v15 += 2 * v14;
    v21 += v20;
  }
  if (v24 != v32)
  {
    v40 = 0;
    v41 = v24 - v32;
    v42 = 2 * v14;
    do
    {
      v43 = v15;
      v44 = v21;
      if ((v8 & 1) != 0)
      {
        v45 = *(_BYTE *)(v15 + 3);
        v43 = v15 + 8;
        *v21 = *(_BYTE *)(v15 + 1);
        v21[1] = v45;
        v44 = v21 + 2;
      }
      if (v22 != v10)
      {
        v46 = 0;
        do
        {
          v47 = &v44[v46];
          v48 = *(_BYTE *)(v43 + 3);
          *v47 = *(_BYTE *)(v43 + 1);
          v47[1] = v48;
          v46 += 2;
          v43 += 8;
        }
        while (v46 < v33);
      }
      v15 += v42;
      v21 += v20;
      v40 += 2;
    }
    while (v40 < v41);
  }
  return 0;
}

uint64_t vt_CopyAvg_sv44_420f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  unsigned __int16 *v37;
  _BYTE *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned __int16 *v46;
  unsigned int v47;
  unsigned int v48;
  unint64_t v49;
  int v50;
  unint64_t v51;
  unsigned __int16 *v52;
  unsigned int v53;
  unsigned __int16 *v54;
  int v55;
  unsigned int v56;
  int v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  int v64;
  unsigned int v65;
  unsigned int v66;
  int v67;
  _BYTE *v68;
  unsigned int v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unsigned __int16 *v76;
  _BYTE *v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned __int16 *v85;
  unsigned int v86;
  unsigned int v87;
  unint64_t v88;
  int v89;
  unint64_t v90;
  unsigned __int16 *v91;
  unsigned int v92;
  unsigned __int16 *v93;
  int v94;
  unsigned int v95;
  int v96;
  unsigned int v97;
  int v98;
  unsigned int v99;
  int v100;
  unsigned int v101;
  unsigned int v102;
  int v103;
  unsigned int v104;
  unsigned int v105;
  int v106;
  _BYTE *v107;
  unsigned int v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = v10 + v9;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = a4[1];
  v15 = (unsigned __int16 *)(a3[1] + v14 * (v12 + v8) + 4 * (v10 + v9));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = a8[1];
  v21 = (_BYTE *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v22 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  v24 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE) - v13;
  v25 = v19 - v18;
  if (v24 >= v25)
    v24 = v25;
  if (v24)
  {
    v26 = 0;
    v27 = *a4;
    v28 = *a3 + *a4 * v13 + 2 * v11;
    v29 = *a8;
    if (v13 >= v8)
      v30 = 0;
    else
      v30 = *a4;
    v31 = v28 + v30;
    v32 = *a7 + v29 * v18 + v16;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          v34 = *(unsigned __int16 *)(v31 + 2 * i);
          if (v34 >= 0xEB00)
            v34 = 60160;
          if (v34 <= 0x1000)
            v34 = 4096;
          *(_BYTE *)(v32 + i) = (-1044480 - v34 + (v34 << 8)) / 0xDB00;
        }
      }
      v31 += v27;
      v32 += v29;
      ++v26;
    }
    while (v26 != v24);
    v9 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v9 & 1;
  }
  if (v24 >= v12)
    v35 = v12;
  else
    v35 = 0;
  if (v22 < v10)
    v10 = 0;
  v36 = v22 - v10;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v39 = *v15;
      v40 = v15[1];
      v41 = *(unsigned __int16 *)((char *)v15 + v14);
      v42 = *(unsigned __int16 *)((char *)v15 + v14 + 2);
      if (v39 >= 0xF000)
        v39 = 61440;
      if (v39 <= 0x1000)
        v39 = 4096;
      if (v40 >= 0xF000)
        v40 = 61440;
      if (v40 <= 0x1000)
        v40 = 4096;
      if (v41 >= 0xF000)
        v41 = 61440;
      if (v41 <= 0x1000)
        v41 = 4096;
      if (v42 >= 0xF000)
        v42 = 61440;
      if (v42 <= 0x1000)
        v43 = 4096;
      else
        v43 = v42;
      v44 = v15[2];
      v45 = v15[3];
      v46 = (unsigned __int16 *)((char *)v15 + v14 + 4);
      v47 = *v46;
      v48 = v46[1];
      if (v44 >= 0xF000)
        v44 = 61440;
      if (v44 <= 0x1000)
        v44 = 4096;
      if (v45 >= 0xF000)
        v45 = 61440;
      if (v45 <= 0x1000)
        v45 = 4096;
      if (v47 >= 0xF000)
        v47 = 61440;
      if (v47 <= 0x1000)
        v47 = 4096;
      v49 = (613566757 * (unint64_t)((-1044480 - v39 + (v39 << 8)) >> 13)) >> 32;
      if (v48 >= 0xF000)
        v48 = 61440;
      if (v48 <= 0x1000)
        v50 = 4096;
      else
        v50 = v48;
      v37 = v15 + 4;
      *v21 = (v49
                          + ((613566757 * (unint64_t)((-1044480 - v44 + (v44 << 8)) >> 13)) >> 32)
                          + ((613566757 * (unint64_t)((-1044480 - v41 + (v41 << 8)) >> 13)) >> 32)
                          + ((613566757 * (unint64_t)((-1044480 - v47 + (v47 << 8)) >> 13)) >> 32)
                          + 2) >> 2;
      v21[1] = (((613566757 * (unint64_t)((-1044480 - v40 + (v40 << 8)) >> 13)) >> 32)
                            + ((613566757 * (unint64_t)((-1044480 - v45 + (v45 << 8)) >> 13)) >> 32)
                            + ((613566757 * (unint64_t)((-1044480 - v43 + (v43 << 8)) >> 13)) >> 32)
                            + ((613566757 * (unint64_t)((-1044480 - v50 + (v50 << 8)) >> 13)) >> 32)
                            + 2) >> 2;
      v38 = v21 + 2;
    }
    else
    {
      v37 = v15;
      v38 = v21;
    }
    if (v22 != v10)
    {
      v51 = 0;
      v52 = v37 + 2;
      do
      {
        v53 = *(v52 - 2);
        v54 = (unsigned __int16 *)((char *)v52 + v14);
        if (v53 >= 0xF000)
          v53 = 61440;
        if (v53 <= 0x1000)
          v55 = 4096;
        else
          v55 = v53;
        if (*(v52 - 1) >= 0xF000u)
          v56 = 61440;
        else
          v56 = *(v52 - 1);
        if (v56 <= 0x1000)
          v57 = 4096;
        else
          v57 = v56;
        if (*(unsigned __int16 *)((char *)v52 + v14 - 4) >= 0xF000u)
          v58 = 61440;
        else
          v58 = *(unsigned __int16 *)((char *)v52 + v14 - 4);
        if (v58 <= 0x1000)
          v59 = 4096;
        else
          v59 = v58;
        if (*(v54 - 1) >= 0xF000u)
          v60 = 61440;
        else
          v60 = *(v54 - 1);
        if (v60 <= 0x1000)
          v61 = 4096;
        else
          v61 = v60;
        v62 = *v52;
        v63 = *v54;
        if (v62 >= 0xF000)
          v62 = 61440;
        if (v62 <= 0x1000)
          v64 = 4096;
        else
          v64 = v62;
        if (v52[1] >= 0xF000u)
          v65 = 61440;
        else
          v65 = v52[1];
        v66 = v54[1];
        if (v65 <= 0x1000)
          v67 = 4096;
        else
          v67 = v65;
        if (v63 >= 0xF000)
          v63 = 61440;
        v68 = &v38[v51];
        if (v63 <= 0x1000)
          v63 = 4096;
        v69 = -1044480 - v55 + (v55 << 8);
        if (v66 >= 0xF000)
          v66 = 61440;
        v70 = (613566757 * (unint64_t)(v69 >> 13)) >> 32;
        v71 = (613566757 * (unint64_t)((-1044480 - v57 + (v57 << 8)) >> 13)) >> 32;
        v72 = (613566757 * (unint64_t)((-1044480 - v59 + (v59 << 8)) >> 13)) >> 32;
        v73 = 613566757 * ((-1044480 - v61 + (v61 << 8)) >> 13);
        if (v66 <= 0x1000)
          v66 = 4096;
        *v68 = (v70
                            + ((613566757 * (unint64_t)((-1044480 - v64 + (v64 << 8)) >> 13)) >> 32)
                            + v72
                            + ((613566757 * (unint64_t)((-1044480 - v63 + (v63 << 8)) >> 13)) >> 32)
                            + 2) >> 2;
        v68[1] = (v71
                              + ((613566757 * (unint64_t)((-1044480 - v67 + (v67 << 8)) >> 13)) >> 32)
                              + HIDWORD(v73)
                              + ((613566757 * (unint64_t)((-1044480 - v66 + (v66 << 8)) >> 13)) >> 32)
                              + 2) >> 2;
        v51 += 2;
        v52 += 4;
      }
      while (v51 < v36);
    }
    v15 += v14;
    v21 += v20;
  }
  if (v24 != v35)
  {
    v74 = 0;
    v75 = v24 - v35;
    do
    {
      v76 = v15;
      v77 = v21;
      if ((v9 & 1) != 0)
      {
        v78 = *v15;
        v79 = v15[1];
        v80 = *(unsigned __int16 *)((char *)v15 + v14);
        v81 = *(unsigned __int16 *)((char *)v15 + v14 + 2);
        if (v78 >= 0xF000)
          v78 = 61440;
        if (v78 <= 0x1000)
          v78 = 4096;
        if (v79 >= 0xF000)
          v79 = 61440;
        if (v79 <= 0x1000)
          v79 = 4096;
        if (v80 >= 0xF000)
          v80 = 61440;
        if (v80 <= 0x1000)
          v80 = 4096;
        if (v81 >= 0xF000)
          v81 = 61440;
        if (v81 <= 0x1000)
          v82 = 4096;
        else
          v82 = v81;
        v83 = v15[2];
        v84 = v15[3];
        v85 = (unsigned __int16 *)((char *)v15 + v14 + 4);
        v86 = *v85;
        v87 = v85[1];
        if (v83 >= 0xF000)
          v83 = 61440;
        if (v83 <= 0x1000)
          v83 = 4096;
        if (v84 >= 0xF000)
          v84 = 61440;
        if (v84 <= 0x1000)
          v84 = 4096;
        if (v86 >= 0xF000)
          v86 = 61440;
        if (v86 <= 0x1000)
          v86 = 4096;
        v88 = (613566757 * (unint64_t)((-1044480 - v78 + (v78 << 8)) >> 13)) >> 32;
        if (v87 >= 0xF000)
          v87 = 61440;
        if (v87 <= 0x1000)
          v89 = 4096;
        else
          v89 = v87;
        v76 = v15 + 4;
        *v21 = (v88
                            + ((613566757 * (unint64_t)((-1044480 - v83 + (v83 << 8)) >> 13)) >> 32)
                            + ((613566757 * (unint64_t)((-1044480 - v80 + (v80 << 8)) >> 13)) >> 32)
                            + ((613566757 * (unint64_t)((-1044480 - v86 + (v86 << 8)) >> 13)) >> 32)
                            + 2) >> 2;
        v21[1] = (((613566757 * (unint64_t)((-1044480 - v79 + (v79 << 8)) >> 13)) >> 32)
                              + ((613566757 * (unint64_t)((-1044480 - v84 + (v84 << 8)) >> 13)) >> 32)
                              + ((613566757 * (unint64_t)((-1044480 - v82 + (v82 << 8)) >> 13)) >> 32)
                              + ((613566757 * (unint64_t)((-1044480 - v89 + (v89 << 8)) >> 13)) >> 32)
                              + 2) >> 2;
        v77 = v21 + 2;
      }
      if (v22 != v10)
      {
        v90 = 0;
        v91 = v76 + 2;
        do
        {
          v92 = *(v91 - 2);
          v93 = (unsigned __int16 *)((char *)v91 + v14);
          if (v92 >= 0xF000)
            v92 = 61440;
          if (v92 <= 0x1000)
            v94 = 4096;
          else
            v94 = v92;
          if (*(v91 - 1) >= 0xF000u)
            v95 = 61440;
          else
            v95 = *(v91 - 1);
          if (v95 <= 0x1000)
            v96 = 4096;
          else
            v96 = v95;
          if (*(unsigned __int16 *)((char *)v91 + v14 - 4) >= 0xF000u)
            v97 = 61440;
          else
            v97 = *(unsigned __int16 *)((char *)v91 + v14 - 4);
          if (v97 <= 0x1000)
            v98 = 4096;
          else
            v98 = v97;
          if (*(v93 - 1) >= 0xF000u)
            v99 = 61440;
          else
            v99 = *(v93 - 1);
          if (v99 <= 0x1000)
            v100 = 4096;
          else
            v100 = v99;
          v101 = *v91;
          v102 = *v93;
          if (v101 >= 0xF000)
            v101 = 61440;
          if (v101 <= 0x1000)
            v103 = 4096;
          else
            v103 = v101;
          if (v91[1] >= 0xF000u)
            v104 = 61440;
          else
            v104 = v91[1];
          v105 = v93[1];
          if (v104 <= 0x1000)
            v106 = 4096;
          else
            v106 = v104;
          if (v102 >= 0xF000)
            v102 = 61440;
          v107 = &v77[v90];
          if (v102 <= 0x1000)
            v102 = 4096;
          v108 = -1044480 - v94 + (v94 << 8);
          if (v105 >= 0xF000)
            v105 = 61440;
          v109 = (613566757 * (unint64_t)(v108 >> 13)) >> 32;
          v110 = (613566757 * (unint64_t)((-1044480 - v96 + (v96 << 8)) >> 13)) >> 32;
          v111 = (613566757 * (unint64_t)((-1044480 - v98 + (v98 << 8)) >> 13)) >> 32;
          v112 = 613566757 * ((-1044480 - v100 + (v100 << 8)) >> 13);
          if (v105 <= 0x1000)
            v105 = 4096;
          *v107 = (v109
                               + ((613566757 * (unint64_t)((-1044480 - v103 + (v103 << 8)) >> 13)) >> 32)
                               + v111
                               + ((613566757 * (unint64_t)((-1044480 - v102 + (v102 << 8)) >> 13)) >> 32)
                               + 2) >> 2;
          v107[1] = (v110
                                 + ((613566757 * (unint64_t)((-1044480 - v106 + (v106 << 8)) >> 13)) >> 32)
                                 + HIDWORD(v112)
                                 + ((613566757 * (unint64_t)((-1044480 - v105 + (v105 << 8)) >> 13)) >> 32)
                                 + 2) >> 2;
          v90 += 2;
          v91 += 4;
        }
        while (v90 < v36);
      }
      v15 += v14;
      v21 += v20;
      v74 += 2;
    }
    while (v74 < v75);
  }
  return 0;
}

uint64_t vt_CopyDec_sv44_420f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  unsigned __int16 *v37;
  _BYTE *v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  int v42;
  unint64_t v43;
  _BYTE *v44;
  unsigned int v45;
  unsigned int v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unsigned __int16 *v50;
  _BYTE *v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  int v55;
  unint64_t v56;
  _BYTE *v57;
  unsigned int v58;
  unsigned int v59;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = v10 + v9;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = a4[1];
  v15 = (unsigned __int16 *)(a3[1] + v14 * (v12 + v8) + 4 * (v10 + v9));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = a8[1];
  v21 = (_BYTE *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v22 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  v24 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE) - v13;
  v25 = v19 - v18;
  if (v24 >= v25)
    v24 = v25;
  if (v24)
  {
    v26 = 0;
    v27 = *a4;
    v28 = *a3 + *a4 * v13 + 2 * v11;
    v29 = *a8;
    if (v13 >= v8)
      v30 = 0;
    else
      v30 = *a4;
    v31 = v28 + v30;
    v32 = *a7 + v29 * v18 + v16;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          v34 = *(unsigned __int16 *)(v31 + 2 * i);
          if (v34 >= 0xEB00)
            v34 = 60160;
          if (v34 <= 0x1000)
            v34 = 4096;
          *(_BYTE *)(v32 + i) = (-1044480 - v34 + (v34 << 8)) / 0xDB00;
        }
      }
      v31 += v27;
      v32 += v29;
      ++v26;
    }
    while (v26 != v24);
    v9 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v9 & 1;
  }
  if (v24 >= v12)
    v35 = v12;
  else
    v35 = 0;
  if (v22 < v10)
    v10 = 0;
  v36 = v22 - v10;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v39 = *v15;
      if (v39 >= 0xF000)
        v39 = 61440;
      if (v39 <= 0x1000)
        v40 = 4096;
      else
        v40 = v39;
      if (v15[1] >= 0xF000u)
        v41 = 61440;
      else
        v41 = v15[1];
      if (v41 <= 0x1000)
        v42 = 4096;
      else
        v42 = v41;
      v37 = v15 + 4;
      *v21 = (613566757 * (unint64_t)((-1044480 - v40 + (v40 << 8)) >> 13)) >> 32;
      v21[1] = (613566757 * (unint64_t)((-1044480 - v42 + (v42 << 8)) >> 13)) >> 32;
      v38 = v21 + 2;
    }
    else
    {
      v37 = v15;
      v38 = v21;
    }
    if (v22 != v10)
    {
      v43 = 0;
      do
      {
        v44 = &v38[v43];
        v45 = *v37;
        v46 = v37[1];
        if (v45 >= 0xF000)
          v45 = 61440;
        if (v45 <= 0x1000)
          v45 = 4096;
        if (v46 >= 0xF000)
          v46 = 61440;
        if (v46 <= 0x1000)
          v46 = 4096;
        *v44 = (613566757 * (unint64_t)((-1044480 - v45 + (v45 << 8)) >> 13)) >> 32;
        v44[1] = (613566757 * (unint64_t)((-1044480 - v46 + (v46 << 8)) >> 13)) >> 32;
        v43 += 2;
        v37 += 4;
      }
      while (v43 < v36);
    }
    v15 += v14;
    v21 += v20;
  }
  if (v24 != v35)
  {
    v47 = 0;
    v48 = v24 - v35;
    v49 = 2 * v14;
    do
    {
      v50 = v15;
      v51 = v21;
      if ((v9 & 1) != 0)
      {
        v52 = *v15;
        if (v52 >= 0xF000)
          v52 = 61440;
        if (v52 <= 0x1000)
          v53 = 4096;
        else
          v53 = v52;
        if (v15[1] >= 0xF000u)
          v54 = 61440;
        else
          v54 = v15[1];
        if (v54 <= 0x1000)
          v55 = 4096;
        else
          v55 = v54;
        v50 = v15 + 4;
        *v21 = (613566757 * (unint64_t)((-1044480 - v53 + (v53 << 8)) >> 13)) >> 32;
        v21[1] = (613566757 * (unint64_t)((-1044480 - v55 + (v55 << 8)) >> 13)) >> 32;
        v51 = v21 + 2;
      }
      if (v22 != v10)
      {
        v56 = 0;
        do
        {
          v57 = &v51[v56];
          v58 = *v50;
          v59 = v50[1];
          if (v58 >= 0xF000)
            v58 = 61440;
          if (v58 <= 0x1000)
            v58 = 4096;
          if (v59 >= 0xF000)
            v59 = 61440;
          if (v59 <= 0x1000)
            v59 = 4096;
          *v57 = (613566757 * (unint64_t)((-1044480 - v58 + (v58 << 8)) >> 13)) >> 32;
          v57[1] = (613566757 * (unint64_t)((-1044480 - v59 + (v59 << 8)) >> 13)) >> 32;
          v56 += 2;
          v50 += 4;
        }
        while (v56 < v36);
      }
      v15 = (unsigned __int16 *)((char *)v15 + v49);
      v21 += v20;
      v47 += 2;
    }
    while (v47 < v48);
  }
  return 0;
}

uint64_t vt_CopyAvg_sv44_y420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t i;
  unint64_t v36;
  unint64_t v37;
  unsigned __int8 *v38;
  _BYTE *v39;
  _BYTE *v40;
  unsigned int v41;
  unint64_t v42;
  unsigned __int8 *v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  unsigned __int8 *v47;
  _BYTE *v48;
  _BYTE *v49;
  unsigned int v50;
  unint64_t v51;
  unsigned __int8 *v52;
  unsigned int v53;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = a8[1];
  v21 = a8[2];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 >> 1));
  v23 = (_BYTE *)(a7[2] + ((unint64_t)(v21 * v18) >> 1) + (v16 >> 1));
  v24 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  v25 = v17 - v16;
  if (v24 >= v25)
    v24 = v25;
  v26 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v13;
  v27 = v19 - v18;
  if (v26 >= v27)
    v26 = v27;
  if (v26)
  {
    v28 = 0;
    v29 = *a4;
    v30 = *a8;
    v31 = *a3 + v29 * v13 + 2 * v11;
    if (v13 >= v9)
      v32 = 0;
    else
      v32 = v29;
    v33 = v31 + v32;
    v34 = *a7 + v30 * v18 + v16;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
          *(_BYTE *)(v34 + i) = *(_BYTE *)(v33 + 2 * i + 1);
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v26);
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v26 >= v12)
    v36 = v12;
  else
    v36 = 0;
  if (v24 < v10)
    v10 = 0;
  v37 = v24 - v10;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v38 = v15 + 8;
      v41 = (v15[3] + v15[7] + v15[v14 + 3] + v15[v14 + 7] + 2) >> 2;
      *v22 = (v15[1] + v15[5] + v15[v14 + 1] + v15[v14 + 5] + 2) >> 2;
      v39 = v22 + 1;
      *v23 = v41;
      v40 = v23 + 1;
    }
    else
    {
      v38 = v15;
      v39 = v22;
      v40 = v23;
    }
    if (v24 != v10)
    {
      v42 = 0;
      v43 = v38 + 4;
      do
      {
        v44 = *(v43 - 1) + v43[3] + v43[v14 - 1] + v43[v14 + 3] + 2;
        *v39++ = (*(v43 - 3) + v43[1] + v43[v14 - 3] + v43[v14 + 1] + 2) >> 2;
        *v40++ = v44 >> 2;
        v42 += 2;
        v43 += 8;
      }
      while (v42 < v37);
    }
    v15 += 2 * v14;
    v22 += v20;
    v23 += v21;
  }
  if (v26 != v36)
  {
    v45 = 0;
    v46 = v26 - v36;
    do
    {
      v47 = v15;
      v48 = v22;
      v49 = v23;
      if ((v8 & 1) != 0)
      {
        v47 = v15 + 8;
        v50 = (v15[3] + v15[7] + v15[v14 + 3] + v15[v14 + 7] + 2) >> 2;
        *v22 = (v15[1] + v15[5] + v15[v14 + 1] + v15[v14 + 5] + 2) >> 2;
        v48 = v22 + 1;
        *v23 = v50;
        v49 = v23 + 1;
      }
      if (v24 != v10)
      {
        v51 = 0;
        v52 = v47 + 4;
        do
        {
          v53 = *(v52 - 1) + v52[3] + v52[v14 - 1] + v52[v14 + 3] + 2;
          *v48++ = (*(v52 - 3) + v52[1] + v52[v14 - 3] + v52[v14 + 1] + 2) >> 2;
          *v49++ = v53 >> 2;
          v51 += 2;
          v52 += 8;
        }
        while (v51 < v37);
      }
      v15 += 2 * v14;
      v22 += v20;
      v23 += v21;
      v45 += 2;
    }
    while (v45 < v46);
  }
  return 0;
}

uint64_t vt_CopyDec_sv44_y420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t i;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  _BYTE *v40;
  char v41;
  unint64_t v42;
  char v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  _BYTE *v49;
  char v50;
  unint64_t v51;
  char v52;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = v10 + v9;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = a4[1];
  v15 = a3[1] + v14 * (v12 + v8) + 4 * (v10 + v9);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = a8[1];
  v21 = a8[2];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 >> 1));
  v23 = (_BYTE *)(a7[2] + ((unint64_t)(v21 * v18) >> 1) + (v16 >> 1));
  v24 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v25 = v17 - v16;
  if (v24 >= v25)
    v24 = v25;
  v26 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE) - v13;
  v27 = v19 - v18;
  if (v26 >= v27)
    v26 = v27;
  if (v26)
  {
    v28 = 0;
    v29 = *a4;
    v30 = *a8;
    v31 = *a3 + v29 * v13 + 2 * v11;
    if (v13 >= v8)
      v32 = 0;
    else
      v32 = v29;
    v33 = v31 + v32;
    v34 = *a7 + v30 * v18 + v16;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
          *(_BYTE *)(v34 + i) = *(_BYTE *)(v33 + 2 * i + 1);
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v26);
    v9 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v9 & 1;
  }
  if (v26 >= v12)
    v36 = v12;
  else
    v36 = 0;
  if (v24 < v10)
    v10 = 0;
  v37 = v24 - v10;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v41 = *(_BYTE *)(v15 + 3);
      v38 = v15 + 8;
      *v22 = *(_BYTE *)(v15 + 1);
      v39 = v22 + 1;
      *v23 = v41;
      v40 = v23 + 1;
    }
    else
    {
      v38 = v15;
      v39 = v22;
      v40 = v23;
    }
    if (v24 != v10)
    {
      v42 = 0;
      do
      {
        v43 = *(_BYTE *)(v38 + 3);
        *v39++ = *(_BYTE *)(v38 + 1);
        *v40++ = v43;
        v42 += 2;
        v38 += 8;
      }
      while (v42 < v37);
    }
    v15 += 2 * v14;
    v22 += v20;
    v23 += v21;
  }
  if (v26 != v36)
  {
    v44 = 0;
    v45 = v26 - v36;
    v46 = 2 * v14;
    do
    {
      v47 = v15;
      v48 = v22;
      v49 = v23;
      if ((v9 & 1) != 0)
      {
        v50 = *(_BYTE *)(v15 + 3);
        v47 = v15 + 8;
        *v22 = *(_BYTE *)(v15 + 1);
        v48 = v22 + 1;
        *v23 = v50;
        v49 = v23 + 1;
      }
      if (v24 != v10)
      {
        v51 = 0;
        do
        {
          v52 = *(_BYTE *)(v47 + 3);
          *v48++ = *(_BYTE *)(v47 + 1);
          *v49++ = v52;
          v51 += 2;
          v47 += 8;
        }
        while (v51 < v37);
      }
      v15 += v46;
      v22 += v20;
      v23 += v21;
      v44 += 2;
    }
    while (v44 < v45);
  }
  return 0;
}

uint64_t vt_CopyAvg_sv44_f420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int16 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t i;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  __int16 *v39;
  _BYTE *v40;
  _BYTE *v41;
  uint16x4_t v42;
  __int16 *v43;
  uint32x4_t v44;
  uint32x4_t v45;
  uint32x4_t v46;
  uint16x4_t v47;
  uint32x4_t v48;
  unint64_t v49;
  __int16 *v50;
  uint32x4_t v51;
  uint32x4_t v52;
  uint16x4_t v53;
  uint16x4_t v54;
  uint32x4_t v55;
  uint32x4_t v56;
  unint64_t v57;
  unint64_t v58;
  uint32x4_t v59;
  uint32x4_t v60;
  __int16 *v61;
  _BYTE *v62;
  _BYTE *v63;
  uint16x4_t v64;
  __int16 *v65;
  uint32x4_t v66;
  uint16x4_t v67;
  uint32x4_t v68;
  unint64_t v69;
  __int16 *v70;
  uint16x4_t v71;
  uint16x4_t v72;
  uint32x4_t v73;
  uint32x4_t v74;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = a4[1];
  v15 = (__int16 *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = a8[1];
  v21 = a8[2];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 >> 1));
  v23 = (_BYTE *)(a7[2] + ((unint64_t)(v21 * v18) >> 1) + (v16 >> 1));
  v24 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  v25 = v17 - v16;
  if (v24 >= v25)
    v24 = v25;
  v26 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v13;
  v27 = v19 - v18;
  if (v26 >= v27)
    v26 = v27;
  if (v26)
  {
    v28 = 0;
    v29 = *a4;
    v30 = *a3 + *a4 * v13 + 2 * v11;
    v31 = *a8;
    if (v13 >= v9)
      v32 = 0;
    else
      v32 = *a4;
    v33 = v30 + v32;
    v34 = *a7 + v31 * v18 + v16;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
        {
          v36 = *(unsigned __int16 *)(v33 + 2 * i);
          if (v36 >= 0xEB00)
            v36 = 60160;
          if (v36 <= 0x1000)
            v36 = 4096;
          *(_BYTE *)(v34 + i) = (255 * v36 - 1044480) / 0xDB00;
        }
      }
      v33 += v29;
      v34 += v31;
      ++v28;
    }
    while (v28 != v26);
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v26 >= v12)
    v37 = v12;
  else
    v37 = 0;
  if (v24 < v10)
    v10 = 0;
  v38 = v24 - v10;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v42.i16[0] = *v15;
      v42.i16[1] = *(__int16 *)((char *)v15 + v14);
      v42.i16[2] = v15[2];
      v43 = (__int16 *)((char *)v15 + v14 + 4);
      v42.i16[3] = *v43;
      v44 = (uint32x4_t)vdupq_n_s32(0xFFF01000);
      v45 = vshrq_n_u32(vmlal_u16(v44, vmax_u16(vmin_u16(v42, (uint16x4_t)0xF000F000F000F000), (uint16x4_t)0x1000100010001000), (uint16x4_t)0xFF00FF00FF00FFLL), 0xDuLL);
      v46 = (uint32x4_t)vdupq_n_s32(0x24924925u);
      v47.i16[0] = v15[1];
      v47.i16[1] = *(__int16 *)((char *)v15 + v14 + 2);
      v47.i16[2] = v15[3];
      v39 = v15 + 4;
      v47.i16[3] = v43[1];
      v48 = vshrq_n_u32(vmlal_u16(v44, vmax_u16(vmin_u16(v47, (uint16x4_t)0xF000F000F000F000), (uint16x4_t)0x1000100010001000), (uint16x4_t)0xFF00FF00FF00FFLL), 0xDuLL);
      *v22 = (vaddvq_s32(vuzp2q_s32((int32x4_t)vmull_u32(*(uint32x2_t *)v45.i8, *(uint32x2_t *)v46.i8), (int32x4_t)vmull_high_u32(v45, v46)))+ 2) >> 2;
      v40 = v22 + 1;
      *v23 = (vaddvq_s32(vuzp2q_s32((int32x4_t)vmull_u32(*(uint32x2_t *)v48.i8, *(uint32x2_t *)v46.i8), (int32x4_t)vmull_high_u32(v48, v46)))+ 2) >> 2;
      v41 = v23 + 1;
    }
    else
    {
      v39 = v15;
      v40 = v22;
      v41 = v23;
    }
    if (v24 != v10)
    {
      v49 = 0;
      v50 = v39 + 2;
      v51 = (uint32x4_t)vdupq_n_s32(0xFFF01000);
      v52 = (uint32x4_t)vdupq_n_s32(0x24924925u);
      do
      {
        v53.i16[0] = *(v50 - 2);
        v53.i16[1] = *(__int16 *)((char *)v50 + v14 - 4);
        v53.i16[2] = *v50;
        v53.i16[3] = *(__int16 *)((char *)v50 + v14);
        v54.i16[0] = *(v50 - 1);
        v54.i16[1] = *(__int16 *)((char *)v50 + v14 - 2);
        v54.i16[2] = v50[1];
        v54.i16[3] = *(__int16 *)((char *)v50 + v14 + 2);
        v55 = vshrq_n_u32(vmlal_u16(v51, vmax_u16(vmin_u16(v53, (uint16x4_t)0xF000F000F000F000), (uint16x4_t)0x1000100010001000), (uint16x4_t)0xFF00FF00FF00FFLL), 0xDuLL);
        v56 = vshrq_n_u32(vmlal_u16(v51, vmax_u16(vmin_u16(v54, (uint16x4_t)0xF000F000F000F000), (uint16x4_t)0x1000100010001000), (uint16x4_t)0xFF00FF00FF00FFLL), 0xDuLL);
        *v40++ = (vaddvq_s32(vuzp2q_s32((int32x4_t)vmull_u32(*(uint32x2_t *)v55.i8, *(uint32x2_t *)v52.i8), (int32x4_t)vmull_high_u32(v55, v52)))+ 2) >> 2;
        *v41++ = (vaddvq_s32(vuzp2q_s32((int32x4_t)vmull_u32(*(uint32x2_t *)v56.i8, *(uint32x2_t *)v52.i8), (int32x4_t)vmull_high_u32(v56, v52)))+ 2) >> 2;
        v49 += 2;
        v50 += 4;
      }
      while (v49 < v38);
    }
    v15 += v14;
    v22 += v20;
    v23 += v21;
  }
  if (v26 != v37)
  {
    v57 = 0;
    v58 = v26 - v37;
    v59 = (uint32x4_t)vdupq_n_s32(0xFFF01000);
    v60 = (uint32x4_t)vdupq_n_s32(0x24924925u);
    do
    {
      v61 = v15;
      v62 = v22;
      v63 = v23;
      if ((v8 & 1) != 0)
      {
        v64.i16[0] = *v15;
        v64.i16[1] = *(__int16 *)((char *)v15 + v14);
        v64.i16[2] = v15[2];
        v65 = (__int16 *)((char *)v15 + v14 + 4);
        v61 = v15 + 4;
        v64.i16[3] = *v65;
        v66 = vshrq_n_u32(vmlal_u16(v59, vmax_u16(vmin_u16(v64, (uint16x4_t)0xF000F000F000F000), (uint16x4_t)0x1000100010001000), (uint16x4_t)0xFF00FF00FF00FFLL), 0xDuLL);
        v67.i16[0] = v15[1];
        v67.i16[1] = *(__int16 *)((char *)v15 + v14 + 2);
        v67.i16[2] = v15[3];
        v67.i16[3] = v65[1];
        v68 = vshrq_n_u32(vmlal_u16(v59, vmax_u16(vmin_u16(v67, (uint16x4_t)0xF000F000F000F000), (uint16x4_t)0x1000100010001000), (uint16x4_t)0xFF00FF00FF00FFLL), 0xDuLL);
        *v22 = (vaddvq_s32(vuzp2q_s32((int32x4_t)vmull_u32(*(uint32x2_t *)v66.i8, *(uint32x2_t *)v60.i8), (int32x4_t)vmull_high_u32(v66, v60)))+ 2) >> 2;
        v62 = v22 + 1;
        *v23 = (vaddvq_s32(vuzp2q_s32((int32x4_t)vmull_u32(*(uint32x2_t *)v68.i8, *(uint32x2_t *)v60.i8), (int32x4_t)vmull_high_u32(v68, v60)))+ 2) >> 2;
        v63 = v23 + 1;
      }
      if (v24 != v10)
      {
        v69 = 0;
        v70 = v61 + 2;
        do
        {
          v71.i16[0] = *(v70 - 2);
          v71.i16[1] = *(__int16 *)((char *)v70 + v14 - 4);
          v71.i16[2] = *v70;
          v71.i16[3] = *(__int16 *)((char *)v70 + v14);
          v72.i16[0] = *(v70 - 1);
          v72.i16[1] = *(__int16 *)((char *)v70 + v14 - 2);
          v72.i16[2] = v70[1];
          v72.i16[3] = *(__int16 *)((char *)v70 + v14 + 2);
          v73 = vshrq_n_u32(vmlal_u16(v59, vmax_u16(vmin_u16(v71, (uint16x4_t)0xF000F000F000F000), (uint16x4_t)0x1000100010001000), (uint16x4_t)0xFF00FF00FF00FFLL), 0xDuLL);
          v74 = vshrq_n_u32(vmlal_u16(v59, vmax_u16(vmin_u16(v72, (uint16x4_t)0xF000F000F000F000), (uint16x4_t)0x1000100010001000), (uint16x4_t)0xFF00FF00FF00FFLL), 0xDuLL);
          *v62++ = (vaddvq_s32(vuzp2q_s32((int32x4_t)vmull_u32(*(uint32x2_t *)v73.i8, *(uint32x2_t *)v60.i8), (int32x4_t)vmull_high_u32(v73, v60)))+ 2) >> 2;
          *v63++ = (vaddvq_s32(vuzp2q_s32((int32x4_t)vmull_u32(*(uint32x2_t *)v74.i8, *(uint32x2_t *)v60.i8), (int32x4_t)vmull_high_u32(v74, v60)))+ 2) >> 2;
          v69 += 2;
          v70 += 4;
        }
        while (v69 < v38);
      }
      v15 += v14;
      v22 += v20;
      v23 += v21;
      v57 += 2;
    }
    while (v57 < v58);
  }
  return 0;
}

uint64_t vt_CopyDec_sv44_f420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t i;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  unsigned __int16 *v39;
  _BYTE *v40;
  _BYTE *v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  unsigned int v48;
  unsigned int v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unsigned __int16 *v53;
  _BYTE *v54;
  _BYTE *v55;
  unsigned int v56;
  int v57;
  unsigned int v58;
  int v59;
  unint64_t v60;
  unint64_t v61;
  unsigned int v62;
  unsigned int v63;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = a4[1];
  v15 = (unsigned __int16 *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = a8[1];
  v21 = a8[2];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 >> 1));
  v23 = (_BYTE *)(a7[2] + ((unint64_t)(v21 * v18) >> 1) + (v16 >> 1));
  v24 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  v25 = v17 - v16;
  if (v24 >= v25)
    v24 = v25;
  v26 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v13;
  v27 = v19 - v18;
  if (v26 >= v27)
    v26 = v27;
  if (v26)
  {
    v28 = 0;
    v29 = *a4;
    v30 = *a3 + *a4 * v13 + 2 * v11;
    v31 = *a8;
    if (v13 >= v9)
      v32 = 0;
    else
      v32 = *a4;
    v33 = v30 + v32;
    v34 = *a7 + v31 * v18 + v16;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
        {
          v36 = *(unsigned __int16 *)(v33 + 2 * i);
          if (v36 >= 0xEB00)
            v36 = 60160;
          if (v36 <= 0x1000)
            v36 = 4096;
          *(_BYTE *)(v34 + i) = (-1044480 - v36 + (v36 << 8)) / 0xDB00;
        }
      }
      v33 += v29;
      v34 += v31;
      ++v28;
    }
    while (v28 != v26);
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v26 >= v12)
    v37 = v12;
  else
    v37 = 0;
  if (v24 < v10)
    v10 = 0;
  v38 = v24 - v10;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v42 = *v15;
      if (v42 >= 0xF000)
        v42 = 61440;
      if (v42 <= 0x1000)
        v43 = 4096;
      else
        v43 = v42;
      if (v15[1] >= 0xF000u)
        v44 = 61440;
      else
        v44 = v15[1];
      if (v44 <= 0x1000)
        v45 = 4096;
      else
        v45 = v44;
      v39 = v15 + 4;
      v46 = (613566757 * (unint64_t)((-1044480 - v45 + (v45 << 8)) >> 13)) >> 32;
      *v22 = (613566757 * (unint64_t)((-1044480 - v43 + (v43 << 8)) >> 13)) >> 32;
      v40 = v22 + 1;
      *v23 = v46;
      v41 = v23 + 1;
    }
    else
    {
      v39 = v15;
      v40 = v22;
      v41 = v23;
    }
    if (v24 != v10)
    {
      v47 = 0;
      do
      {
        v48 = *v39;
        v49 = v39[1];
        if (v48 >= 0xF000)
          v48 = 61440;
        if (v48 <= 0x1000)
          v48 = 4096;
        if (v49 >= 0xF000)
          v49 = 61440;
        if (v49 <= 0x1000)
          v49 = 4096;
        *v40++ = (613566757 * (unint64_t)((-1044480 - v48 + (v48 << 8)) >> 13)) >> 32;
        *v41++ = (613566757 * (unint64_t)((-1044480 - v49 + (v49 << 8)) >> 13)) >> 32;
        v47 += 2;
        v39 += 4;
      }
      while (v47 < v38);
    }
    v15 += v14;
    v22 += v20;
    v23 += v21;
  }
  if (v26 != v37)
  {
    v50 = 0;
    v51 = v26 - v37;
    v52 = 2 * v14;
    do
    {
      v53 = v15;
      v54 = v22;
      v55 = v23;
      if ((v8 & 1) != 0)
      {
        v56 = *v15;
        if (v56 >= 0xF000)
          v56 = 61440;
        if (v56 <= 0x1000)
          v57 = 4096;
        else
          v57 = v56;
        if (v15[1] >= 0xF000u)
          v58 = 61440;
        else
          v58 = v15[1];
        if (v58 <= 0x1000)
          v59 = 4096;
        else
          v59 = v58;
        v53 = v15 + 4;
        v60 = (613566757 * (unint64_t)((-1044480 - v59 + (v59 << 8)) >> 13)) >> 32;
        *v22 = (613566757 * (unint64_t)((-1044480 - v57 + (v57 << 8)) >> 13)) >> 32;
        v54 = v22 + 1;
        *v23 = v60;
        v55 = v23 + 1;
      }
      if (v24 != v10)
      {
        v61 = 0;
        do
        {
          v62 = *v53;
          v63 = v53[1];
          if (v62 >= 0xF000)
            v62 = 61440;
          if (v62 <= 0x1000)
            v62 = 4096;
          if (v63 >= 0xF000)
            v63 = 61440;
          if (v63 <= 0x1000)
            v63 = 4096;
          *v54++ = (613566757 * (unint64_t)((-1044480 - v62 + (v62 << 8)) >> 13)) >> 32;
          *v55++ = (613566757 * (unint64_t)((-1044480 - v63 + (v63 << 8)) >> 13)) >> 32;
          v61 += 2;
          v53 += 4;
        }
        while (v61 < v38);
      }
      v15 = (unsigned __int16 *)((char *)v15 + v52);
      v22 += v20;
      v23 += v21;
      v50 += 2;
    }
    while (v50 < v51);
  }
  return 0;
}

uint64_t vt_Copy_sv44_y416(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  uint64_t v22;
  int v23;
  __int16 v24;

  v8 = a2[2];
  v9 = a2[3];
  if (v8 >= a6[2])
    v8 = a6[2];
  if (v9 >= a6[3])
    v9 = a6[3];
  if (v9)
  {
    v10 = 0;
    v11 = *a4;
    v12 = a4[1];
    v13 = *a8;
    v14 = *a7 + *a8 * a6[5] + 2 * a6[4];
    v16 = a2[4];
    v15 = a2[5];
    v17 = *a3 + *a4 * v15;
    v18 = a3[1] + v12 * v15 + 4 * v16;
    v19 = v17 + 2 * v16;
    do
    {
      if (v8)
      {
        v20 = 0;
        for (i = 0; i != v8; ++i)
        {
          v22 = v14 + 2 * v20;
          v23 = *(_DWORD *)(v18 + v20);
          v24 = *(_WORD *)(v19 + 2 * i);
          *(_WORD *)v22 = -1;
          *(_WORD *)(v22 + 2) = v24;
          *(_DWORD *)(v22 + 4) = v23;
          v20 += 4;
        }
      }
      v19 += v11;
      v14 += v13;
      v18 += v12;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_sv44_y408(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  _BYTE *v22;
  char v23;
  char v24;
  char v25;

  v8 = a2[2];
  v9 = a2[3];
  if (v8 >= a6[2])
    v8 = a6[2];
  if (v9 >= a6[3])
    v9 = a6[3];
  if (v9)
  {
    v10 = 0;
    v11 = *a4;
    v12 = a4[1];
    v13 = *a8;
    v14 = *a7 + *a8 * a6[5] + a6[4];
    v16 = a2[4];
    v15 = a2[5];
    v17 = *a3 + *a4 * v15;
    v18 = a3[1] + v12 * v15 + 4 * v16;
    v19 = v17 + 2 * v16;
    do
    {
      if (v8)
      {
        v20 = 0;
        for (i = 0; i != v8; ++i)
        {
          v22 = (_BYTE *)(v14 + v20);
          v23 = *(_BYTE *)(v18 + v20 + 1);
          v24 = *(_BYTE *)(v18 + v20 + 3);
          v25 = *(_BYTE *)(v19 + 2 * i + 1);
          *v22 = -1;
          v22[1] = v25;
          v22[2] = v23;
          v22[3] = v24;
          v20 += 4;
        }
      }
      v19 += v11;
      v14 += v13;
      v18 += v12;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_sv44_s4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  size_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int *v33;
  int *v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  int *v40;
  int *v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  int v45;
  unint64_t v46;
  int v47;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;

  v8 = a2[4];
  v9 = a2[5];
  v10 = a4[1];
  v11 = (int *)(a3[1] + v10 * v9 + 4 * v8);
  v12 = a6[4];
  v13 = a6[5];
  v14 = a6[2];
  v15 = a6[3];
  v16 = a8[1];
  v17 = (int *)(a7[1] + v16 * v13 + 4 * v12);
  if (a2[2] >= v14)
    v18 = v14;
  else
    v18 = a2[2];
  if (a2[3] >= v15)
    v19 = v15;
  else
    v19 = a2[3];
  if (v19)
  {
    v50 = a8[1];
    v51 = a4[1];
    v52 = v19;
    v20 = *a4;
    v21 = *a8;
    v22 = a8[2];
    v23 = (char *)(a7[2] + v22 * v13 + 2 * v12);
    v24 = (char *)(*a7 + *a8 * v13 + 2 * v12);
    v25 = (char *)(*a3 + *a4 * v9 + 2 * v8);
    v53 = v18;
    v26 = 2 * v18;
    do
    {
      memcpy(v24, v25, v26);
      memset(v23, 255, v26);
      v25 += v20;
      v24 += v21;
      v23 += v22;
      --v19;
    }
    while (v19);
    v16 = v50;
    v8 = a2[4];
    v9 = a2[5];
    v19 = v52;
    v18 = v53;
    v10 = v51;
  }
  v27 = v9 & 1;
  if (v19 >= v27)
    v28 = v9 & 1;
  else
    v28 = 0;
  v29 = v8;
  v30 = v8 & 1;
  if (v18 >= v30)
    v31 = v30;
  else
    v31 = 0;
  v32 = v18 - v31;
  if ((v9 & 1) != 0)
  {
    v33 = v11;
    if ((v29 & 1) != 0)
    {
      v33 = v11 + 1;
      *v17 = *v11;
      v34 = v17 + 1;
    }
    else
    {
      v34 = v17;
    }
    if (v18 == v31)
    {
      v35 = 0;
    }
    else
    {
      v36 = v18 - v31;
      do
      {
        v37 = *v33++;
        *v34++ = v37;
        --v36;
      }
      while (v36);
      v35 = v18 - v31;
    }
    if (v35 + v30 < v18)
      *v34 = *v33;
    v11 = (int *)((char *)v11 + v10);
    v17 = (int *)((char *)v17 + v16);
  }
  if (v19 == v28)
  {
    v38 = 0;
  }
  else
  {
    v39 = 0;
    v38 = v19 - v28;
    do
    {
      v40 = v11;
      v41 = v17;
      if ((v29 & 1) != 0)
      {
        v40 = v11 + 1;
        *v17 = *v11;
        v41 = v17 + 1;
      }
      if (v18 == v31)
      {
        v42 = 0;
      }
      else
      {
        v43 = v18 - v31;
        do
        {
          v44 = *v40++;
          *v41++ = v44;
          --v43;
        }
        while (v43);
        v42 = v18 - v31;
      }
      if (v42 + v30 < v18)
        *v41 = *v40;
      v11 = (int *)((char *)v11 + v10);
      v17 = (int *)((char *)v17 + v16);
      ++v39;
    }
    while (v39 != v38);
  }
  if (v38 + v27 < v19)
  {
    if ((v29 & 1) != 0)
    {
      v45 = *v11++;
      *v17++ = v45;
    }
    if (v18 == v31)
    {
      v32 = 0;
    }
    else
    {
      v46 = v18 - v31;
      do
      {
        v47 = *v11++;
        *v17++ = v47;
        --v46;
      }
      while (v46);
    }
    if (v32 + v30 < v18)
      *v17 = *v11;
  }
  return 0;
}

uint64_t vt_CopyAvg_sv44_s2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _WORD *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  size_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  unsigned __int16 *v35;
  _WORD *v36;
  unsigned int v37;
  unint64_t v38;
  _WORD *v39;
  unsigned int v40;
  unint64_t v41;
  uint64_t v42;
  unsigned __int16 *v43;
  _WORD *v44;
  unsigned int v45;
  unint64_t v46;
  _WORD *v47;
  unsigned int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  unint64_t v53;
  _WORD *v54;
  unsigned int v55;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = v9 + v8;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = a4[1];
  v13 = (unsigned __int16 *)(a3[1] + v12 * v11 + 4 * (v9 + v8));
  v14 = *(_QWORD *)(a6 + 24);
  v15 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v16 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v17 = *(_QWORD *)(a6 + 40);
  v18 = 2 * v15;
  v19 = a8[1];
  v20 = (_WORD *)(a7[1] + v19 * v17 + ((2 * v15) & 0x7FFFFFFFFFFFFFFELL));
  v21 = v16 - v15;
  if (((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v9 + v8) >= v21)
    v22 = v21;
  else
    v22 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - v10;
  if (*(_QWORD *)(a2 + 24) >= v14)
    v23 = v14;
  else
    v23 = *(_QWORD *)(a2 + 24);
  if (v23)
  {
    v58 = a8[1];
    v60 = a4[1];
    v61 = v22;
    v24 = *a4;
    v25 = *a8;
    v26 = a8[2];
    v27 = (char *)(a7[2] + v26 * v17 + v18);
    v28 = (char *)(*a7 + *a8 * v17 + v18);
    v29 = (char *)(*a3 + *a4 * v11 + 2 * v10);
    v30 = 2 * v22;
    v59 = v23;
    do
    {
      memcpy(v28, v29, v30);
      memset(v27, 255, v30);
      v29 += v24;
      v28 += v25;
      v27 += v26;
      --v23;
    }
    while (v23);
    v19 = v58;
    v8 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40);
    v9 = v8 & 1;
    v12 = v60;
    v22 = v61;
    v23 = v59;
  }
  v31 = v11 & 1;
  if (v23 >= v31)
    v32 = v11 & 1;
  else
    v32 = 0;
  v33 = v8;
  if (v22 < v9)
    v9 = 0;
  v34 = v22 - v9;
  if ((v11 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v35 = v13 + 4;
      v37 = (v13[1] + v13[3] + 1) >> 1;
      *v20 = (*v13 + v13[2] + 1) >> 1;
      v20[1] = v37;
      v36 = v20 + 2;
    }
    else
    {
      v35 = v13;
      v36 = v20;
    }
    if (v22 != v9)
    {
      v38 = 0;
      do
      {
        v39 = &v36[v38];
        v40 = (v35[1] + v35[3] + 1) >> 1;
        *v39 = (*v35 + v35[2] + 1) >> 1;
        v39[1] = v40;
        v38 += 2;
        v35 += 4;
      }
      while (v38 < v34);
    }
    v13 = (unsigned __int16 *)((char *)v13 + v12);
    v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v23 == v32)
  {
    v41 = 0;
  }
  else
  {
    v42 = 0;
    v41 = v23 - v32;
    do
    {
      v43 = v13;
      v44 = v20;
      if ((v33 & 1) != 0)
      {
        v43 = v13 + 4;
        v45 = (v13[1] + v13[3] + 1) >> 1;
        *v20 = (*v13 + v13[2] + 1) >> 1;
        v20[1] = v45;
        v44 = v20 + 2;
      }
      if (v22 != v9)
      {
        v46 = 0;
        do
        {
          v47 = &v44[v46];
          v48 = (v43[1] + v43[3] + 1) >> 1;
          *v47 = (*v43 + v43[2] + 1) >> 1;
          v47[1] = v48;
          v46 += 2;
          v43 += 4;
        }
        while (v46 < v34);
      }
      v13 = (unsigned __int16 *)((char *)v13 + v12);
      v20 = (_WORD *)((char *)v20 + v19);
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v31 < v23)
  {
    if ((v33 & 1) != 0)
    {
      v49 = *v13;
      v50 = v13[1];
      v51 = v13[2];
      v52 = v13[3];
      v13 += 4;
      *v20 = (v49 + v51 + 1) >> 1;
      v20[1] = (v50 + v52 + 1) >> 1;
      v20 += 2;
    }
    if (v22 != v9)
    {
      v53 = 0;
      do
      {
        v54 = &v20[v53];
        v55 = (v13[1] + v13[3] + 1) >> 1;
        *v54 = (*v13 + v13[2] + 1) >> 1;
        v54[1] = v55;
        v53 += 2;
        v13 += 4;
      }
      while (v53 < v34);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_sv44_s2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  size_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  int *v35;
  int *v36;
  unint64_t v37;
  int v38;
  unint64_t v39;
  uint64_t v40;
  int *v41;
  int *v42;
  unint64_t v43;
  int v44;
  int v45;
  unint64_t v46;
  int v47;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = v9 + v8;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = a4[1];
  v13 = (int *)(a3[1] + v12 * v11 + 4 * (v9 + v8));
  v14 = *(_QWORD *)(a6 + 24);
  v15 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v16 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v17 = *(_QWORD *)(a6 + 40);
  v18 = 2 * v15;
  v19 = a8[1];
  v20 = (int *)(a7[1] + v19 * v17 + ((2 * v15) & 0x7FFFFFFFFFFFFFFELL));
  v21 = v16 - v15;
  if (((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v9 + v8) >= v21)
    v22 = v21;
  else
    v22 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - v10;
  if (*(_QWORD *)(a2 + 24) >= v14)
    v23 = v14;
  else
    v23 = *(_QWORD *)(a2 + 24);
  if (v23)
  {
    v50 = a8[1];
    v52 = a4[1];
    v53 = v22;
    v24 = *a4;
    v25 = *a8;
    v26 = a8[2];
    v27 = (char *)(a7[2] + v26 * v17 + v18);
    v28 = (char *)(*a7 + *a8 * v17 + v18);
    v29 = (char *)(*a3 + *a4 * v11 + 2 * v10);
    v30 = 2 * v22;
    v51 = v23;
    do
    {
      memcpy(v28, v29, v30);
      memset(v27, 255, v30);
      v29 += v24;
      v28 += v25;
      v27 += v26;
      --v23;
    }
    while (v23);
    v19 = v50;
    v8 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40);
    v9 = v8 & 1;
    v12 = v52;
    v22 = v53;
    v23 = v51;
  }
  v31 = v11 & 1;
  if (v23 >= v31)
    v32 = v11 & 1;
  else
    v32 = 0;
  v33 = v8;
  if (v22 < v9)
    v9 = 0;
  v34 = v22 - v9;
  if ((v11 & 1) != 0)
  {
    v35 = v13;
    if ((v33 & 1) != 0)
    {
      v35 = v13 + 2;
      *v20 = *v13;
      v36 = v20 + 1;
    }
    else
    {
      v36 = v20;
    }
    if (v22 != v9)
    {
      v37 = 0;
      do
      {
        v38 = *v35;
        v35 += 2;
        v36[v37 / 2] = v38;
        v37 += 2;
      }
      while (v37 < v34);
    }
    v13 = (int *)((char *)v13 + v12);
    v20 = (int *)((char *)v20 + v19);
  }
  if (v23 == v32)
  {
    v39 = 0;
  }
  else
  {
    v40 = 0;
    v39 = v23 - v32;
    do
    {
      v41 = v13;
      v42 = v20;
      if ((v33 & 1) != 0)
      {
        v41 = v13 + 2;
        *v20 = *v13;
        v42 = v20 + 1;
      }
      if (v22 != v9)
      {
        v43 = 0;
        do
        {
          v44 = *v41;
          v41 += 2;
          v42[v43 / 2] = v44;
          v43 += 2;
        }
        while (v43 < v34);
      }
      v13 = (int *)((char *)v13 + v12);
      v20 = (int *)((char *)v20 + v19);
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v31 < v23)
  {
    if ((v33 & 1) != 0)
    {
      v45 = *v13;
      v13 += 2;
      *v20++ = v45;
    }
    if (v22 != v9)
    {
      v46 = 0;
      do
      {
        v47 = *v13;
        v13 += 2;
        v20[v46 / 2] = v47;
        v46 += 2;
      }
      while (v46 < v34);
    }
  }
  return 0;
}

uint64_t vt_Copy_sv44_t4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  __int16 *v32;
  _WORD *v33;
  __int16 v34;
  unint64_t v35;
  unint64_t v36;
  __int16 v37;
  __int16 v38;
  __int16 v39;
  __int16 v40;
  unint64_t v41;
  uint64_t v42;
  __int16 *v43;
  _WORD *v44;
  __int16 v45;
  unint64_t v46;
  unint64_t v47;
  __int16 v48;
  __int16 v49;
  __int16 v50;
  __int16 v51;
  __int16 v52;
  __int16 v53;
  unint64_t v54;
  __int16 v55;
  __int16 v56;
  __int16 v57;
  __int16 v58;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a2[3];
  v12 = a4[1];
  v13 = (__int16 *)(a3[1] + v12 * v8 + 4 * v9);
  v14 = a6[4];
  v15 = a6[5];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (v11 >= a6[3])
    v11 = a6[3];
  if (v11)
  {
    v18 = 0;
    v19 = *a4;
    v20 = *a8;
    v21 = a8[2];
    v22 = a7[2] + v21 * v15 + 2 * v14;
    v23 = *a7 + *a8 * v15 + 2 * v14;
    v24 = *a3 + v19 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
        {
          *(_WORD *)(v22 + 2 * i) = -1;
          *(_WORD *)(v23 + 2 * i) = *(_WORD *)(v24 + 2 * i) & 0xFFF0;
        }
      }
      v24 += v19;
      v23 += v20;
      v22 += v21;
      ++v18;
    }
    while (v18 != v11);
  }
  v26 = v8 & 1;
  if (v11 >= v26)
    v27 = v8 & 1;
  else
    v27 = 0;
  v28 = v9;
  v29 = v9 & 1;
  if (v10 >= v29)
    v30 = v29;
  else
    v30 = 0;
  v31 = v10 - v30;
  if ((v8 & 1) != 0)
  {
    if ((v28 & 1) != 0)
    {
      v32 = v13 + 2;
      v34 = v13[1] & 0xFFF0;
      *v17 = *v13 & 0xFFF0;
      v17[1] = v34;
      v33 = v17 + 2;
    }
    else
    {
      v32 = v13;
      v33 = v17;
    }
    if (v10 == v30)
    {
      v35 = 0;
    }
    else
    {
      v36 = v10 - v30;
      do
      {
        v37 = *v32;
        v38 = v32[1];
        v32 += 2;
        *v33 = v37 & 0xFFF0;
        v33[1] = v38 & 0xFFF0;
        v33 += 2;
        --v36;
      }
      while (v36);
      v35 = v10 - v30;
    }
    if (v35 + v29 < v10)
    {
      v39 = *v32 & 0xFFF0;
      v40 = v32[1] & 0xFFF0;
      *v33 = v39;
      v33[1] = v40;
    }
    v13 = (__int16 *)((char *)v13 + v12);
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v11 == v27)
  {
    v41 = 0;
  }
  else
  {
    v42 = 0;
    v41 = v11 - v27;
    do
    {
      v43 = v13;
      v44 = v17;
      if ((v28 & 1) != 0)
      {
        v43 = v13 + 2;
        v45 = v13[1] & 0xFFF0;
        *v17 = *v13 & 0xFFF0;
        v17[1] = v45;
        v44 = v17 + 2;
      }
      if (v10 == v30)
      {
        v46 = 0;
      }
      else
      {
        v47 = v10 - v30;
        do
        {
          v48 = *v43;
          v49 = v43[1];
          v43 += 2;
          *v44 = v48 & 0xFFF0;
          v44[1] = v49 & 0xFFF0;
          v44 += 2;
          --v47;
        }
        while (v47);
        v46 = v10 - v30;
      }
      if (v46 + v29 < v10)
      {
        v50 = *v43 & 0xFFF0;
        v51 = v43[1] & 0xFFF0;
        *v44 = v50;
        v44[1] = v51;
      }
      v13 = (__int16 *)((char *)v13 + v12);
      v17 = (_WORD *)((char *)v17 + v16);
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v26 < v11)
  {
    if ((v28 & 1) != 0)
    {
      v52 = *v13;
      v53 = v13[1];
      v13 += 2;
      *v17 = v52 & 0xFFF0;
      v17[1] = v53 & 0xFFF0;
      v17 += 2;
    }
    if (v10 == v30)
    {
      v31 = 0;
    }
    else
    {
      v54 = v10 - v30;
      do
      {
        v55 = *v13;
        v56 = v13[1];
        v13 += 2;
        *v17 = v55 & 0xFFF0;
        v17[1] = v56 & 0xFFF0;
        v17 += 2;
        --v54;
      }
      while (v54);
    }
    if (v31 + v29 < v10)
    {
      v57 = *v13 & 0xFFF0;
      v58 = v13[1] & 0xFFF0;
      *v17 = v57;
      v17[1] = v58;
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sv44_t2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  _WORD *v36;
  _WORD *v37;
  int v38;
  unint64_t v39;
  _WORD *v40;
  int v41;
  unint64_t v42;
  uint64_t v43;
  _WORD *v44;
  _WORD *v45;
  int v46;
  unint64_t v47;
  _WORD *v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unint64_t v54;
  _WORD *v55;
  int v56;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = a8[2];
    v28 = a7[2] + v27 * v18 + v19;
    v29 = *a7 + *a8 * v18 + v19;
    v30 = *a3 + v25 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = *(_WORD *)(v30 + 2 * i) & 0xFFF0;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v8);
  }
  v32 = v12 & 1;
  if (v8 >= v32)
    v33 = v12 & 1;
  else
    v33 = 0;
  v34 = v9;
  if (v22 < v10)
    v10 = 0;
  v35 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v34 & 1) != 0)
    {
      v36 = v14 + 4;
      v38 = (v14[3] >> 4) + (v14[1] >> 4);
      *v21 = (8 * ((v14[2] >> 4) + (*v14 >> 4)) + 8) & 0xFFF0;
      v21[1] = (8 * v38 + 8) & 0xFFF0;
      v37 = v21 + 2;
    }
    else
    {
      v36 = v14;
      v37 = v21;
    }
    if (v22 != v10)
    {
      v39 = 0;
      do
      {
        v40 = &v37[v39];
        v41 = ((unsigned __int16)v36[3] >> 4) + ((unsigned __int16)v36[1] >> 4);
        *v40 = (8 * ((v36[2] >> 4) + (*v36 >> 4)) + 8) & 0xFFF0;
        v40[1] = (8 * v41 + 8) & 0xFFF0;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v33)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v8 - v33;
    do
    {
      v44 = v14;
      v45 = v21;
      if ((v34 & 1) != 0)
      {
        v44 = v14 + 4;
        v46 = (v14[3] >> 4) + (v14[1] >> 4);
        *v21 = (8 * ((v14[2] >> 4) + (*v14 >> 4)) + 8) & 0xFFF0;
        v21[1] = (8 * v46 + 8) & 0xFFF0;
        v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        v47 = 0;
        do
        {
          v48 = &v45[v47];
          v49 = ((unsigned __int16)v44[3] >> 4) + ((unsigned __int16)v44[1] >> 4);
          *v48 = (8 * ((v44[2] >> 4) + (*v44 >> 4)) + 8) & 0xFFF0;
          v48[1] = (8 * v49 + 8) & 0xFFF0;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v8)
  {
    if ((v34 & 1) != 0)
    {
      v50 = *v14;
      v51 = v14[1];
      v52 = v14[2];
      v53 = v14[3];
      v14 += 4;
      *v21 = (8 * ((v52 >> 4) + (v50 >> 4)) + 8) & 0xFFF0;
      v21[1] = (8 * ((v53 >> 4) + (v51 >> 4)) + 8) & 0xFFF0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v54 = 0;
      do
      {
        v55 = &v21[v54];
        v56 = (v14[3] >> 4) + (v14[1] >> 4);
        *v55 = (8 * ((v14[2] >> 4) + (*v14 >> 4)) + 8) & 0xFFF0;
        v55[1] = (8 * v56 + 8) & 0xFFF0;
        v54 += 2;
        v14 += 4;
      }
      while (v54 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_sv44_t2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  _WORD *v36;
  _WORD *v37;
  __int16 v38;
  unint64_t v39;
  _WORD *v40;
  __int16 v41;
  unint64_t v42;
  uint64_t v43;
  _WORD *v44;
  _WORD *v45;
  __int16 v46;
  unint64_t v47;
  _WORD *v48;
  __int16 v49;
  __int16 v50;
  __int16 v51;
  unint64_t v52;
  _WORD *v53;
  __int16 v54;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (_WORD *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = a8[2];
    v28 = a7[2] + v27 * v18 + v19;
    v29 = *a7 + *a8 * v18 + v19;
    v30 = *a3 + v25 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = *(_WORD *)(v30 + 2 * i) & 0xFFF0;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v8);
  }
  v32 = v12 & 1;
  if (v8 >= v32)
    v33 = v12 & 1;
  else
    v33 = 0;
  v34 = v9;
  if (v22 < v10)
    v10 = 0;
  v35 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v34 & 1) != 0)
    {
      v36 = v14 + 4;
      v38 = v14[1] & 0xFFF0;
      *v21 = *v14 & 0xFFF0;
      v21[1] = v38;
      v37 = v21 + 2;
    }
    else
    {
      v36 = v14;
      v37 = v21;
    }
    if (v22 != v10)
    {
      v39 = 0;
      do
      {
        v40 = &v37[v39];
        v41 = v36[1] & 0xFFF0;
        *v40 = *v36 & 0xFFF0;
        v40[1] = v41;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    v14 = (_WORD *)((char *)v14 + v13);
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v33)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v8 - v33;
    do
    {
      v44 = v14;
      v45 = v21;
      if ((v34 & 1) != 0)
      {
        v44 = v14 + 4;
        v46 = v14[1] & 0xFFF0;
        *v21 = *v14 & 0xFFF0;
        v21[1] = v46;
        v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        v47 = 0;
        do
        {
          v48 = &v45[v47];
          v49 = v44[1] & 0xFFF0;
          *v48 = *v44 & 0xFFF0;
          v48[1] = v49;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      v14 = (_WORD *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v8)
  {
    if ((v34 & 1) != 0)
    {
      v50 = *v14;
      v51 = v14[1];
      v14 += 4;
      *v21 = v50 & 0xFFF0;
      v21[1] = v51 & 0xFFF0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v52 = 0;
      do
      {
        v53 = &v21[v52];
        v54 = v14[1] & 0xFFF0;
        *v53 = *v14 & 0xFFF0;
        v53[1] = v54;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v35);
    }
  }
  return 0;
}

uint64_t vt_Copy_sv44_x4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  __int16 *v32;
  _WORD *v33;
  __int16 v34;
  unint64_t v35;
  unint64_t v36;
  __int16 v37;
  __int16 v38;
  __int16 v39;
  __int16 v40;
  unint64_t v41;
  uint64_t v42;
  __int16 *v43;
  _WORD *v44;
  __int16 v45;
  unint64_t v46;
  unint64_t v47;
  __int16 v48;
  __int16 v49;
  __int16 v50;
  __int16 v51;
  __int16 v52;
  __int16 v53;
  unint64_t v54;
  __int16 v55;
  __int16 v56;
  __int16 v57;
  __int16 v58;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a2[3];
  v12 = a4[1];
  v13 = (__int16 *)(a3[1] + v12 * v8 + 4 * v9);
  v14 = a6[4];
  v15 = a6[5];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (v11 >= a6[3])
    v11 = a6[3];
  if (v11)
  {
    v18 = 0;
    v19 = *a4;
    v20 = *a8;
    v21 = a8[2];
    v22 = a7[2] + v21 * v15 + 2 * v14;
    v23 = *a7 + *a8 * v15 + 2 * v14;
    v24 = *a3 + v19 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
        {
          *(_WORD *)(v22 + 2 * i) = -1;
          *(_WORD *)(v23 + 2 * i) = *(_WORD *)(v24 + 2 * i) & 0xFFC0;
        }
      }
      v24 += v19;
      v23 += v20;
      v22 += v21;
      ++v18;
    }
    while (v18 != v11);
  }
  v26 = v8 & 1;
  if (v11 >= v26)
    v27 = v8 & 1;
  else
    v27 = 0;
  v28 = v9;
  v29 = v9 & 1;
  if (v10 >= v29)
    v30 = v29;
  else
    v30 = 0;
  v31 = v10 - v30;
  if ((v8 & 1) != 0)
  {
    if ((v28 & 1) != 0)
    {
      v32 = v13 + 2;
      v34 = v13[1] & 0xFFC0;
      *v17 = *v13 & 0xFFC0;
      v17[1] = v34;
      v33 = v17 + 2;
    }
    else
    {
      v32 = v13;
      v33 = v17;
    }
    if (v10 == v30)
    {
      v35 = 0;
    }
    else
    {
      v36 = v10 - v30;
      do
      {
        v37 = *v32;
        v38 = v32[1];
        v32 += 2;
        *v33 = v37 & 0xFFC0;
        v33[1] = v38 & 0xFFC0;
        v33 += 2;
        --v36;
      }
      while (v36);
      v35 = v10 - v30;
    }
    if (v35 + v29 < v10)
    {
      v39 = *v32 & 0xFFC0;
      v40 = v32[1] & 0xFFC0;
      *v33 = v39;
      v33[1] = v40;
    }
    v13 = (__int16 *)((char *)v13 + v12);
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v11 == v27)
  {
    v41 = 0;
  }
  else
  {
    v42 = 0;
    v41 = v11 - v27;
    do
    {
      v43 = v13;
      v44 = v17;
      if ((v28 & 1) != 0)
      {
        v43 = v13 + 2;
        v45 = v13[1] & 0xFFC0;
        *v17 = *v13 & 0xFFC0;
        v17[1] = v45;
        v44 = v17 + 2;
      }
      if (v10 == v30)
      {
        v46 = 0;
      }
      else
      {
        v47 = v10 - v30;
        do
        {
          v48 = *v43;
          v49 = v43[1];
          v43 += 2;
          *v44 = v48 & 0xFFC0;
          v44[1] = v49 & 0xFFC0;
          v44 += 2;
          --v47;
        }
        while (v47);
        v46 = v10 - v30;
      }
      if (v46 + v29 < v10)
      {
        v50 = *v43 & 0xFFC0;
        v51 = v43[1] & 0xFFC0;
        *v44 = v50;
        v44[1] = v51;
      }
      v13 = (__int16 *)((char *)v13 + v12);
      v17 = (_WORD *)((char *)v17 + v16);
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v26 < v11)
  {
    if ((v28 & 1) != 0)
    {
      v52 = *v13;
      v53 = v13[1];
      v13 += 2;
      *v17 = v52 & 0xFFC0;
      v17[1] = v53 & 0xFFC0;
      v17 += 2;
    }
    if (v10 == v30)
    {
      v31 = 0;
    }
    else
    {
      v54 = v10 - v30;
      do
      {
        v55 = *v13;
        v56 = v13[1];
        v13 += 2;
        *v17 = v55 & 0xFFC0;
        v17[1] = v56 & 0xFFC0;
        v17 += 2;
        --v54;
      }
      while (v54);
    }
    if (v31 + v29 < v10)
    {
      v57 = *v13 & 0xFFC0;
      v58 = v13[1] & 0xFFC0;
      *v17 = v57;
      v17[1] = v58;
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sv44_x2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  _WORD *v36;
  _WORD *v37;
  int v38;
  unint64_t v39;
  _WORD *v40;
  int v41;
  unint64_t v42;
  uint64_t v43;
  _WORD *v44;
  _WORD *v45;
  int v46;
  unint64_t v47;
  _WORD *v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unint64_t v54;
  _WORD *v55;
  int v56;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = a8[2];
    v28 = a7[2] + v27 * v18 + v19;
    v29 = *a7 + *a8 * v18 + v19;
    v30 = *a3 + v25 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = *(_WORD *)(v30 + 2 * i) & 0xFFC0;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v8);
  }
  v32 = v12 & 1;
  if (v8 >= v32)
    v33 = v12 & 1;
  else
    v33 = 0;
  v34 = v9;
  if (v22 < v10)
    v10 = 0;
  v35 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v34 & 1) != 0)
    {
      v36 = v14 + 4;
      v38 = (v14[3] >> 6) + (v14[1] >> 6);
      *v21 = (32 * ((v14[2] >> 6) + (*v14 >> 6)) + 32) & 0xFFC0;
      v21[1] = (32 * v38 + 32) & 0xFFC0;
      v37 = v21 + 2;
    }
    else
    {
      v36 = v14;
      v37 = v21;
    }
    if (v22 != v10)
    {
      v39 = 0;
      do
      {
        v40 = &v37[v39];
        v41 = ((unsigned __int16)v36[3] >> 6) + ((unsigned __int16)v36[1] >> 6);
        *v40 = (32 * ((v36[2] >> 6) + (*v36 >> 6)) + 32) & 0xFFC0;
        v40[1] = (32 * v41 + 32) & 0xFFC0;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v33)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v8 - v33;
    do
    {
      v44 = v14;
      v45 = v21;
      if ((v34 & 1) != 0)
      {
        v44 = v14 + 4;
        v46 = (v14[3] >> 6) + (v14[1] >> 6);
        *v21 = (32 * ((v14[2] >> 6) + (*v14 >> 6)) + 32) & 0xFFC0;
        v21[1] = (32 * v46 + 32) & 0xFFC0;
        v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        v47 = 0;
        do
        {
          v48 = &v45[v47];
          v49 = ((unsigned __int16)v44[3] >> 6) + ((unsigned __int16)v44[1] >> 6);
          *v48 = (32 * ((v44[2] >> 6) + (*v44 >> 6)) + 32) & 0xFFC0;
          v48[1] = (32 * v49 + 32) & 0xFFC0;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v8)
  {
    if ((v34 & 1) != 0)
    {
      v50 = *v14;
      v51 = v14[1];
      v52 = v14[2];
      v53 = v14[3];
      v14 += 4;
      *v21 = (32 * ((v52 >> 6) + (v50 >> 6)) + 32) & 0xFFC0;
      v21[1] = (32 * ((v53 >> 6) + (v51 >> 6)) + 32) & 0xFFC0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v54 = 0;
      do
      {
        v55 = &v21[v54];
        v56 = (v14[3] >> 6) + (v14[1] >> 6);
        *v55 = (32 * ((v14[2] >> 6) + (*v14 >> 6)) + 32) & 0xFFC0;
        v55[1] = (32 * v56 + 32) & 0xFFC0;
        v54 += 2;
        v14 += 4;
      }
      while (v54 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_sv44_x2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  _WORD *v36;
  _WORD *v37;
  __int16 v38;
  unint64_t v39;
  _WORD *v40;
  __int16 v41;
  unint64_t v42;
  uint64_t v43;
  _WORD *v44;
  _WORD *v45;
  __int16 v46;
  unint64_t v47;
  _WORD *v48;
  __int16 v49;
  __int16 v50;
  __int16 v51;
  unint64_t v52;
  _WORD *v53;
  __int16 v54;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (_WORD *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = a8[2];
    v28 = a7[2] + v27 * v18 + v19;
    v29 = *a7 + *a8 * v18 + v19;
    v30 = *a3 + v25 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = *(_WORD *)(v30 + 2 * i) & 0xFFC0;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v8);
  }
  v32 = v12 & 1;
  if (v8 >= v32)
    v33 = v12 & 1;
  else
    v33 = 0;
  v34 = v9;
  if (v22 < v10)
    v10 = 0;
  v35 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v34 & 1) != 0)
    {
      v36 = v14 + 4;
      v38 = v14[1] & 0xFFC0;
      *v21 = *v14 & 0xFFC0;
      v21[1] = v38;
      v37 = v21 + 2;
    }
    else
    {
      v36 = v14;
      v37 = v21;
    }
    if (v22 != v10)
    {
      v39 = 0;
      do
      {
        v40 = &v37[v39];
        v41 = v36[1] & 0xFFC0;
        *v40 = *v36 & 0xFFC0;
        v40[1] = v41;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    v14 = (_WORD *)((char *)v14 + v13);
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v33)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v8 - v33;
    do
    {
      v44 = v14;
      v45 = v21;
      if ((v34 & 1) != 0)
      {
        v44 = v14 + 4;
        v46 = v14[1] & 0xFFC0;
        *v21 = *v14 & 0xFFC0;
        v21[1] = v46;
        v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        v47 = 0;
        do
        {
          v48 = &v45[v47];
          v49 = v44[1] & 0xFFC0;
          *v48 = *v44 & 0xFFC0;
          v48[1] = v49;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      v14 = (_WORD *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v8)
  {
    if ((v34 & 1) != 0)
    {
      v50 = *v14;
      v51 = v14[1];
      v14 += 4;
      *v21 = v50 & 0xFFC0;
      v21[1] = v51 & 0xFFC0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v52 = 0;
      do
      {
        v53 = &v21[v52];
        v54 = v14[1] & 0xFFC0;
        *v53 = *v14 & 0xFFC0;
        v53[1] = v54;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v35);
    }
  }
  return 0;
}

uint64_t vt_Copy_sv44_v4a8(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  char v37;
  char v38;
  char v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  unint64_t v53;
  char v54;
  char v55;
  char v56;
  char v57;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a2[3];
  v12 = a4[1];
  v13 = a3[1] + v12 * v8 + 4 * v9;
  v14 = a6[4];
  v15 = a6[5];
  v16 = a8[1];
  v17 = (_BYTE *)(a7[1] + v16 * v15 + 2 * v14);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (v11 >= a6[3])
    v11 = a6[3];
  if (v11)
  {
    v18 = 0;
    v19 = *a4;
    v20 = *a8;
    v21 = a8[2];
    v22 = a7[2] + v21 * v15 + v14;
    v23 = *a7 + *a8 * v15 + v14;
    v24 = *a3 + v19 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
        {
          *(_BYTE *)(v22 + i) = -1;
          *(_BYTE *)(v23 + i) = *(_BYTE *)(v24 + 2 * i + 1);
        }
      }
      v24 += v19;
      v23 += v20;
      v22 += v21;
      ++v18;
    }
    while (v18 != v11);
    v9 = a2[4];
    v8 = a2[5];
  }
  v26 = v8 & 1;
  if (v11 >= v26)
    v27 = v8 & 1;
  else
    v27 = 0;
  v28 = v9 & 1;
  if (v10 >= v28)
    v29 = v9 & 1;
  else
    v29 = 0;
  v30 = v10 - v29;
  if ((v8 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v33 = *(_BYTE *)(v13 + 3);
      v31 = v13 + 4;
      *v17 = *(_BYTE *)(v13 + 1);
      v17[1] = v33;
      v32 = v17 + 2;
    }
    else
    {
      v31 = v13;
      v32 = v17;
    }
    if (v10 == v29)
    {
      v34 = 0;
    }
    else
    {
      v35 = v10 - v29;
      do
      {
        v36 = *(_BYTE *)(v31 + 1);
        v37 = *(_BYTE *)(v31 + 3);
        v31 += 4;
        *v32 = v36;
        v32[1] = v37;
        v32 += 2;
        --v35;
      }
      while (v35);
      v34 = v10 - v29;
    }
    if (v34 + v28 < v10)
    {
      v38 = *(_BYTE *)(v31 + 1);
      v39 = *(_BYTE *)(v31 + 3);
      *v32 = v38;
      v32[1] = v39;
    }
    v13 += v12;
    v17 += v16;
  }
  if (v11 == v27)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v11 - v27;
    do
    {
      v42 = v13;
      v43 = v17;
      if ((v9 & 1) != 0)
      {
        v44 = *(_BYTE *)(v13 + 3);
        v42 = v13 + 4;
        *v17 = *(_BYTE *)(v13 + 1);
        v17[1] = v44;
        v43 = v17 + 2;
      }
      if (v10 == v29)
      {
        v45 = 0;
      }
      else
      {
        v46 = v10 - v29;
        do
        {
          v47 = *(_BYTE *)(v42 + 1);
          v48 = *(_BYTE *)(v42 + 3);
          v42 += 4;
          *v43 = v47;
          v43[1] = v48;
          v43 += 2;
          --v46;
        }
        while (v46);
        v45 = v10 - v29;
      }
      if (v45 + v28 < v10)
      {
        v49 = *(_BYTE *)(v42 + 1);
        v50 = *(_BYTE *)(v42 + 3);
        *v43 = v49;
        v43[1] = v50;
      }
      v13 += v12;
      v17 += v16;
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v26 < v11)
  {
    if ((v9 & 1) != 0)
    {
      v51 = *(_BYTE *)(v13 + 1);
      v52 = *(_BYTE *)(v13 + 3);
      v13 += 4;
      *v17 = v51;
      v17[1] = v52;
      v17 += 2;
    }
    if (v10 == v29)
    {
      v30 = 0;
    }
    else
    {
      v53 = v10 - v29;
      do
      {
        v54 = *(_BYTE *)(v13 + 1);
        v55 = *(_BYTE *)(v13 + 3);
        v13 += 4;
        *v17 = v54;
        v17[1] = v55;
        v17 += 2;
        --v53;
      }
      while (v53);
    }
    if (v30 + v28 < v10)
    {
      v56 = *(_BYTE *)(v13 + 1);
      v57 = *(_BYTE *)(v13 + 3);
      *v17 = v56;
      v17[1] = v57;
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sv44_v2a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  unsigned __int8 *v35;
  _BYTE *v36;
  unsigned int v37;
  unint64_t v38;
  _BYTE *v39;
  unsigned int v40;
  unint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  _BYTE *v44;
  unsigned int v45;
  unint64_t v46;
  _BYTE *v47;
  unsigned int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  unint64_t v53;
  _BYTE *v54;
  unsigned int v55;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = v10 + v9;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = a8[1];
  v20 = (_BYTE *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v22 = v17 - v16;
  if (v21 >= v22)
    v21 = v22;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = a8[2];
    v27 = a7[2] + v26 * v18 + v16;
    v28 = *a7 + *a8 * v18 + v16;
    v29 = *a3 + v24 * v12 + 2 * v11;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
        {
          *(_BYTE *)(v27 + i) = -1;
          *(_BYTE *)(v28 + i) = *(_BYTE *)(v29 + 2 * i + 1);
        }
      }
      v29 += v24;
      v28 += v25;
      v27 += v26;
      ++v23;
    }
    while (v23 != v8);
    v9 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40);
    v10 = v9 & 1;
  }
  v31 = v12 & 1;
  if (v8 >= v31)
    v32 = v12 & 1;
  else
    v32 = 0;
  v33 = v9;
  if (v21 < v10)
    v10 = 0;
  v34 = v21 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v35 = v14 + 8;
      v37 = (v14[3] + v14[7] + 1) >> 1;
      *v20 = (v14[1] + v14[5] + 1) >> 1;
      v20[1] = v37;
      v36 = v20 + 2;
    }
    else
    {
      v35 = v14;
      v36 = v20;
    }
    if (v21 != v10)
    {
      v38 = 0;
      do
      {
        v39 = &v36[v38];
        v40 = (v35[3] + v35[7] + 1) >> 1;
        *v39 = (v35[1] + v35[5] + 1) >> 1;
        v39[1] = v40;
        v38 += 2;
        v35 += 8;
      }
      while (v38 < v34);
    }
    v14 += v13;
    v20 += v19;
  }
  if (v8 == v32)
  {
    v41 = 0;
  }
  else
  {
    v42 = 0;
    v41 = v8 - v32;
    do
    {
      v43 = v14;
      v44 = v20;
      if ((v33 & 1) != 0)
      {
        v43 = v14 + 8;
        v45 = (v14[3] + v14[7] + 1) >> 1;
        *v20 = (v14[1] + v14[5] + 1) >> 1;
        v20[1] = v45;
        v44 = v20 + 2;
      }
      if (v21 != v10)
      {
        v46 = 0;
        do
        {
          v47 = &v44[v46];
          v48 = (v43[3] + v43[7] + 1) >> 1;
          *v47 = (v43[1] + v43[5] + 1) >> 1;
          v47[1] = v48;
          v46 += 2;
          v43 += 8;
        }
        while (v46 < v34);
      }
      v14 += v13;
      v20 += v19;
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v31 < v8)
  {
    if ((v33 & 1) != 0)
    {
      v49 = v14[1];
      v50 = v14[3];
      v51 = v14[5];
      v52 = v14[7];
      v14 += 8;
      *v20 = (v49 + v51 + 1) >> 1;
      v20[1] = (v50 + v52 + 1) >> 1;
      v20 += 2;
    }
    if (v21 != v10)
    {
      v53 = 0;
      do
      {
        v54 = &v20[v53];
        v55 = (v14[3] + v14[7] + 1) >> 1;
        *v54 = (v14[1] + v14[5] + 1) >> 1;
        v54[1] = v55;
        v53 += 2;
        v14 += 8;
      }
      while (v53 < v34);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_sv44_v2a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  char v37;
  unint64_t v38;
  _BYTE *v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  char v45;
  unint64_t v46;
  _BYTE *v47;
  char v48;
  char v49;
  char v50;
  unint64_t v51;
  _BYTE *v52;
  char v53;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = v10 + v9;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = a3[1] + v13 * v12 + 4 * (v10 + v9);
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = a8[1];
  v20 = (_BYTE *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v22 = v17 - v16;
  if (v21 >= v22)
    v21 = v22;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = a8[2];
    v27 = a7[2] + v26 * v18 + v16;
    v28 = *a7 + *a8 * v18 + v16;
    v29 = *a3 + v24 * v12 + 2 * v11;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
        {
          *(_BYTE *)(v27 + i) = -1;
          *(_BYTE *)(v28 + i) = *(_BYTE *)(v29 + 2 * i + 1);
        }
      }
      v29 += v24;
      v28 += v25;
      v27 += v26;
      ++v23;
    }
    while (v23 != v8);
    v9 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40);
    v10 = v9 & 1;
  }
  v31 = v12 & 1;
  if (v8 >= v31)
    v32 = v12 & 1;
  else
    v32 = 0;
  v33 = v9;
  if (v21 < v10)
    v10 = 0;
  v34 = v21 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v37 = *(_BYTE *)(v14 + 3);
      v35 = v14 + 8;
      *v20 = *(_BYTE *)(v14 + 1);
      v20[1] = v37;
      v36 = v20 + 2;
    }
    else
    {
      v35 = v14;
      v36 = v20;
    }
    if (v21 != v10)
    {
      v38 = 0;
      do
      {
        v39 = &v36[v38];
        v40 = *(_BYTE *)(v35 + 3);
        *v39 = *(_BYTE *)(v35 + 1);
        v39[1] = v40;
        v38 += 2;
        v35 += 8;
      }
      while (v38 < v34);
    }
    v14 += v13;
    v20 += v19;
  }
  if (v8 == v32)
  {
    v41 = 0;
  }
  else
  {
    v42 = 0;
    v41 = v8 - v32;
    do
    {
      v43 = v14;
      v44 = v20;
      if ((v33 & 1) != 0)
      {
        v45 = *(_BYTE *)(v14 + 3);
        v43 = v14 + 8;
        *v20 = *(_BYTE *)(v14 + 1);
        v20[1] = v45;
        v44 = v20 + 2;
      }
      if (v21 != v10)
      {
        v46 = 0;
        do
        {
          v47 = &v44[v46];
          v48 = *(_BYTE *)(v43 + 3);
          *v47 = *(_BYTE *)(v43 + 1);
          v47[1] = v48;
          v46 += 2;
          v43 += 8;
        }
        while (v46 < v34);
      }
      v14 += v13;
      v20 += v19;
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v31 < v8)
  {
    if ((v33 & 1) != 0)
    {
      v49 = *(_BYTE *)(v14 + 1);
      v50 = *(_BYTE *)(v14 + 3);
      v14 += 8;
      *v20 = v49;
      v20[1] = v50;
      v20 += 2;
    }
    if (v21 != v10)
    {
      v51 = 0;
      do
      {
        v52 = &v20[v51];
        v53 = *(_BYTE *)(v14 + 3);
        *v52 = *(_BYTE *)(v14 + 1);
        v52[1] = v53;
        v51 += 2;
        v14 += 8;
      }
      while (v51 < v34);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sv44_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  unint64_t v35;
  unint64_t v36;
  unsigned __int8 *v37;
  _BYTE *v38;
  unsigned int v39;
  unint64_t v40;
  unsigned __int8 *v41;
  _BYTE *v42;
  unsigned int v43;
  unint64_t v44;
  unint64_t v45;
  unsigned __int8 *v46;
  _BYTE *v47;
  unsigned int v48;
  unint64_t v49;
  unsigned __int8 *v50;
  _BYTE *v51;
  unsigned int v52;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = v10 + v9;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = a4[1];
  v15 = (unsigned __int8 *)(a3[1] + v14 * (v12 + v8) + 4 * (v10 + v9));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = a8[1];
  v21 = (_BYTE *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v22 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  v24 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE) - v13;
  if (v24 >= v19 - v18)
    v24 = v19 - v18;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a3 + *a4 * v13 + 2 * v11;
    v28 = *a8;
    v29 = a8[2];
    if (v13 >= v8)
      v30 = 0;
    else
      v30 = *a4;
    v31 = v27 + v30;
    v32 = a7[2] + v29 * v18 + v16;
    v33 = *a7 + v28 * v18 + v16;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          *(_BYTE *)(v32 + i) = -1;
          *(_BYTE *)(v33 + i) = *(_BYTE *)(v31 + 2 * i + 1);
        }
      }
      v31 += v26;
      v33 += v28;
      v32 += v29;
      ++v25;
    }
    while (v25 != v24);
    v9 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v9 & 1;
  }
  if (v24 >= v12)
    v35 = v12;
  else
    v35 = 0;
  if (v22 < v10)
    v10 = 0;
  v36 = v22 - v10;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v37 = v15 + 8;
      v39 = (v15[3] + v15[7] + v15[v14 + 3] + v15[v14 + 7] + 2) >> 2;
      *v21 = (v15[1] + v15[5] + v15[v14 + 1] + v15[v14 + 5] + 2) >> 2;
      v21[1] = v39;
      v38 = v21 + 2;
    }
    else
    {
      v37 = v15;
      v38 = v21;
    }
    if (v22 != v10)
    {
      v40 = 0;
      v41 = v37 + 4;
      do
      {
        v42 = &v38[v40];
        v43 = (*(v41 - 1) + v41[3] + v41[v14 - 1] + v41[v14 + 3] + 2) >> 2;
        *v42 = (*(v41 - 3) + v41[1] + v41[v14 - 3] + v41[v14 + 1] + 2) >> 2;
        v42[1] = v43;
        v40 += 2;
        v41 += 8;
      }
      while (v40 < v36);
    }
    v15 += 2 * v14;
    v21 += v20;
  }
  if (v24 != v35)
  {
    v44 = 0;
    v45 = v24 - v35;
    do
    {
      v46 = v15;
      v47 = v21;
      if ((v9 & 1) != 0)
      {
        v46 = v15 + 8;
        v48 = (v15[3] + v15[7] + v15[v14 + 3] + v15[v14 + 7] + 2) >> 2;
        *v21 = (v15[1] + v15[5] + v15[v14 + 1] + v15[v14 + 5] + 2) >> 2;
        v21[1] = v48;
        v47 = v21 + 2;
      }
      if (v22 != v10)
      {
        v49 = 0;
        v50 = v46 + 4;
        do
        {
          v51 = &v47[v49];
          v52 = (*(v50 - 1) + v50[3] + v50[v14 - 1] + v50[v14 + 3] + 2) >> 2;
          *v51 = (*(v50 - 3) + v50[1] + v50[v14 - 3] + v50[v14 + 1] + 2) >> 2;
          v51[1] = v52;
          v49 += 2;
          v50 += 8;
        }
        while (v49 < v36);
      }
      v15 += 2 * v14;
      v21 += v20;
      v44 += 2;
    }
    while (v44 < v45);
  }
  return 0;
}

uint64_t vt_CopyDec_sv44_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  char v39;
  unint64_t v40;
  _BYTE *v41;
  char v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  char v48;
  unint64_t v49;
  _BYTE *v50;
  char v51;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = v10 + v9;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = a4[1];
  v15 = a3[1] + v14 * (v12 + v8) + 4 * (v10 + v9);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = a8[1];
  v21 = (_BYTE *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v22 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  v24 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE) - v13;
  if (v24 >= v19 - v18)
    v24 = v19 - v18;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a3 + *a4 * v13 + 2 * v11;
    v28 = *a8;
    v29 = a8[2];
    if (v13 >= v8)
      v30 = 0;
    else
      v30 = *a4;
    v31 = v27 + v30;
    v32 = a7[2] + v29 * v18 + v16;
    v33 = *a7 + v28 * v18 + v16;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          *(_BYTE *)(v32 + i) = -1;
          *(_BYTE *)(v33 + i) = *(_BYTE *)(v31 + 2 * i + 1);
        }
      }
      v31 += v26;
      v33 += v28;
      v32 += v29;
      ++v25;
    }
    while (v25 != v24);
    v9 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v9 & 1;
  }
  if (v24 >= v12)
    v35 = v12;
  else
    v35 = 0;
  if (v22 < v10)
    v10 = 0;
  v36 = v22 - v10;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v39 = *(_BYTE *)(v15 + 3);
      v37 = v15 + 8;
      *v21 = *(_BYTE *)(v15 + 1);
      v21[1] = v39;
      v38 = v21 + 2;
    }
    else
    {
      v37 = v15;
      v38 = v21;
    }
    if (v22 != v10)
    {
      v40 = 0;
      do
      {
        v41 = &v38[v40];
        v42 = *(_BYTE *)(v37 + 3);
        *v41 = *(_BYTE *)(v37 + 1);
        v41[1] = v42;
        v40 += 2;
        v37 += 8;
      }
      while (v40 < v36);
    }
    v15 += 2 * v14;
    v21 += v20;
  }
  if (v24 != v35)
  {
    v43 = 0;
    v44 = v24 - v35;
    v45 = 2 * v14;
    do
    {
      v46 = v15;
      v47 = v21;
      if ((v9 & 1) != 0)
      {
        v48 = *(_BYTE *)(v15 + 3);
        v46 = v15 + 8;
        *v21 = *(_BYTE *)(v15 + 1);
        v21[1] = v48;
        v47 = v21 + 2;
      }
      if (v22 != v10)
      {
        v49 = 0;
        do
        {
          v50 = &v47[v49];
          v51 = *(_BYTE *)(v46 + 3);
          *v50 = *(_BYTE *)(v46 + 1);
          v50[1] = v51;
          v49 += 2;
          v46 += 8;
        }
        while (v49 < v36);
      }
      v15 += v45;
      v21 += v20;
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_Copy_sf44_y416(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  _WORD *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;

  v8 = a2[2];
  v9 = a2[3];
  if (v8 >= a6[2])
    v8 = a6[2];
  if (v9 >= a6[3])
    v9 = a6[3];
  if (v9)
  {
    v10 = 0;
    v11 = *a4;
    v12 = a4[1];
    v13 = *a8;
    v14 = *a7 + *a8 * a6[5] + 2 * a6[4];
    v16 = a2[4];
    v15 = a2[5];
    v17 = a3[1] + v12 * v15 + 4 * v16;
    v18 = *a3 + *a4 * v15 + 2 * v16;
    do
    {
      if (v8)
      {
        v19 = 0;
        for (i = 0; i != v8; ++i)
        {
          v21 = (_WORD *)(v14 + 2 * v19);
          v22 = 57344 * *(unsigned __int16 *)(v17 + v19) / 0xFFFF;
          v23 = 57344 * *(unsigned __int16 *)(v17 + v19 + 2) / 0xFFFF;
          v24 = 56064 * *(unsigned __int16 *)(v18 + 2 * i) / 0xFFFF;
          *v21 = -1;
          v21[1] = v24 + 4096;
          v21[2] = v22 + 4096;
          v21[3] = v23 + 4096;
          v19 += 4;
        }
      }
      v18 += v11;
      v14 += v13;
      v17 += v12;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_sf44_y408(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  _BYTE *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;

  v8 = a2[2];
  v9 = a2[3];
  if (v8 >= a6[2])
    v8 = a6[2];
  if (v9 >= a6[3])
    v9 = a6[3];
  if (v9)
  {
    v10 = 0;
    v11 = *a4;
    v12 = a4[1];
    v13 = *a8;
    v14 = *a7 + *a8 * a6[5] + a6[4];
    v16 = a2[4];
    v15 = a2[5];
    v17 = a3[1] + v12 * v15 + 4 * v16;
    v18 = *a3 + *a4 * v15 + 2 * v16;
    do
    {
      if (v8)
      {
        v19 = 0;
        for (i = 0; i != v8; ++i)
        {
          v21 = (_BYTE *)(v14 + v19);
          v22 = (16777473 * (unint64_t)(224 * *(unsigned __int16 *)(v17 + v19))) >> 40;
          v23 = (16777473 * (unint64_t)(224 * *(unsigned __int16 *)(v17 + v19 + 2))) >> 40;
          v24 = (16777473 * (unint64_t)(219 * *(unsigned __int16 *)(v18 + 2 * i))) >> 40;
          *v21 = -1;
          v21[1] = v24 + 16;
          v21[2] = v22 + 16;
          v21[3] = v23 + 16;
          v19 += 4;
        }
      }
      v18 += v11;
      v14 += v13;
      v17 += v12;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_CopyAvg_sf44_v216(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t i;
  _WORD *v22;
  unsigned __int16 *v23;
  unsigned int v24;
  unsigned int v25;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a4;
    v14 = a4[1];
    v15 = *a8;
    v16 = *a7 + *a8 * *(_QWORD *)(a6 + 40) + 2 * v10;
    v17 = *(_QWORD *)(a2 + 40);
    v18 = a3[1] + v14 * v17 + 4 * v9;
    v19 = *a3 + *a4 * v17 + 2 * v9;
    do
    {
      if (v11)
      {
        v20 = 0;
        for (i = 0; i < v11; i += 2)
        {
          v22 = (_WORD *)(v16 + v20);
          v23 = (unsigned __int16 *)(v19 + 2 * i);
          v24 = (57344 * *(unsigned __int16 *)(v18 + v20 + 2) / 0xFFFF
               + 57344 * *(unsigned __int16 *)(v18 + v20 + 6) / 0xFFFF
               + 8193) >> 1;
          v25 = 56064 * *v23 / 0xFFFF;
          LODWORD(v23) = 56064 * v23[1] / 0xFFFF;
          *v22 = (57344 * *(unsigned __int16 *)(v18 + v20) / 0xFFFF
                + 57344 * *(unsigned __int16 *)(v18 + v20 + 4) / 0xFFFF
                + 8193) >> 1;
          v22[1] = v25 + 4096;
          v22[2] = v24;
          v22[3] = (_WORD)v23 + 4096;
          v20 += 8;
        }
      }
      v19 += v13;
      v16 += v15;
      v18 += v14;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_sf44_v216(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t i;
  _WORD *v22;
  unsigned __int16 *v23;
  unsigned int v24;
  unsigned int v25;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a8;
    v14 = *a4;
    v15 = a4[1];
    v16 = *a7 + *a8 * *(_QWORD *)(a6 + 40) + 2 * v10;
    v17 = *(_QWORD *)(a2 + 40);
    v18 = a3[1] + v15 * v17 + 4 * v9;
    v19 = *a3 + *a4 * v17 + 2 * v9;
    do
    {
      if (v11)
      {
        v20 = 0;
        for (i = 0; i < v11; i += 2)
        {
          v22 = (_WORD *)(v16 + v20);
          v23 = (unsigned __int16 *)(v19 + 2 * i);
          v24 = 57344 * *(unsigned __int16 *)(v18 + v20 + 2) / 0xFFFF;
          v25 = 56064 * *v23 / 0xFFFF;
          LODWORD(v23) = 56064 * v23[1] / 0xFFFF;
          *v22 = 57344 * *(unsigned __int16 *)(v18 + v20) / 0xFFFF + 4096;
          v22[1] = v25 + 4096;
          v22[2] = v24 + 4096;
          v22[3] = (_WORD)v23 + 4096;
          v20 += 8;
        }
      }
      v19 += v14;
      v16 += v13;
      v18 += v15;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_sf44_2vuy(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  unsigned __int16 *v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a8;
    v14 = *a4;
    v15 = a4[1];
    v16 = (_BYTE *)(*a7 + *a8 * *(_QWORD *)(a6 + 40) + v10);
    v17 = *(_QWORD *)(a2 + 40);
    v18 = a3[1] + v15 * v17 + 4 * v9;
    v19 = *a3 + *a4 * v17 + 2 * v9;
    do
    {
      if (v11)
      {
        v20 = 0;
        v21 = 0;
        v22 = v16;
        do
        {
          v23 = (unsigned __int16 *)(v19 + 2 * v21);
          v24 = ((((16777473 * (unint64_t)(224 * *(unsigned __int16 *)(v18 + v20 + 2))) >> 32) >> 8)
               + (((16777473 * (unint64_t)(224 * *(unsigned __int16 *)(v18 + v20 + 6))) >> 32) >> 8)
               + 33) >> 1;
          v25 = (16777473 * (unint64_t)(219 * *v23)) >> 40;
          v26 = (16777473 * (unint64_t)(219 * v23[1])) >> 40;
          *v22 = ((((16777473 * (unint64_t)(224 * *(unsigned __int16 *)(v18 + v20))) >> 32) >> 8)
                + (((16777473
                                 * (unint64_t)(224 * *(unsigned __int16 *)(v18 + v20 + 4))) >> 32) >> 8)
                + 33) >> 1;
          v22[1] = v25 + 16;
          v22[2] = v24;
          v22[3] = v26 + 16;
          v22 += 4;
          v21 += 2;
          v20 += 8;
        }
        while (v21 < v11);
      }
      v19 += v14;
      v16 += v13;
      v18 += v15;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_sf44_2vuy(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  unsigned __int16 *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a8;
    v14 = *a4;
    v15 = a4[1];
    v16 = (_BYTE *)(*a7 + *a8 * *(_QWORD *)(a6 + 40) + v10);
    v17 = *(_QWORD *)(a2 + 40);
    v18 = a3[1] + v15 * v17 + 4 * v9;
    v19 = *a3 + *a4 * v17 + 2 * v9;
    do
    {
      if (v11)
      {
        v20 = 0;
        v21 = 0;
        v22 = v16;
        do
        {
          v23 = (unsigned __int16 *)(v19 + 2 * v21);
          v24 = (16777473 * (unint64_t)(224 * *(unsigned __int16 *)(v18 + v20 + 2))) >> 40;
          v25 = (16777473 * (unint64_t)(219 * *v23)) >> 40;
          v26 = (16777473 * (unint64_t)(219 * v23[1])) >> 40;
          *v22 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *(unsigned __int16 *)(v18 + v20))) >> 32) >> 8)
               + 16;
          v22[1] = v25 + 16;
          v22[2] = v24 + 16;
          v22[3] = v26 + 16;
          v22 += 4;
          v21 += 2;
          v20 += 8;
        }
        while (v21 < v11);
      }
      v19 += v14;
      v16 += v13;
      v18 += v15;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_Copy_sf44_s4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned __int16 *v32;
  _WORD *v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  int v38;
  unsigned int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int16 *v42;
  _WORD *v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  unint64_t v53;
  int v54;
  int v55;
  unsigned int v56;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a2[3];
  v12 = a4[1];
  v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 4 * v9);
  v14 = a6[4];
  v15 = a6[5];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (v11 >= a6[3])
    v11 = a6[3];
  if (v11)
  {
    v18 = 0;
    v19 = *a4;
    v20 = *a8;
    v21 = a8[2];
    v22 = a7[2] + v21 * v15 + 2 * v14;
    v23 = *a7 + *a8 * v15 + 2 * v14;
    v24 = *a3 + v19 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
        {
          *(_WORD *)(v22 + 2 * i) = -1;
          *(_WORD *)(v23 + 2 * i) = 56064 * *(unsigned __int16 *)(v24 + 2 * i) / 0xFFFF + 4096;
        }
      }
      v24 += v19;
      v23 += v20;
      v22 += v21;
      ++v18;
    }
    while (v18 != v11);
  }
  v26 = v8 & 1;
  if (v11 >= v26)
    v27 = v8 & 1;
  else
    v27 = 0;
  v28 = v9;
  v29 = v9 & 1;
  if (v10 >= v29)
    v30 = v29;
  else
    v30 = 0;
  v31 = v10 - v30;
  if ((v8 & 1) != 0)
  {
    if ((v28 & 1) != 0)
    {
      v34 = v13[1];
      v32 = v13 + 2;
      *v17 = 57344 * *v13 / 0xFFFF + 4096;
      v17[1] = 57344 * v34 / 0xFFFFu + 4096;
      v33 = v17 + 2;
    }
    else
    {
      v32 = v13;
      v33 = v17;
    }
    if (v10 == v30)
    {
      v35 = 0;
    }
    else
    {
      v36 = v10 - v30;
      do
      {
        v37 = *v32;
        v38 = v32[1];
        v32 += 2;
        *v33 = 57344 * v37 / 0xFFFFu + 4096;
        v33[1] = 57344 * v38 / 0xFFFFu + 4096;
        v33 += 2;
        --v36;
      }
      while (v36);
      v35 = v10 - v30;
    }
    if (v35 + v29 < v10)
    {
      v39 = 57344 * v32[1];
      *v33 = 57344 * *v32 / 0xFFFF + 4096;
      v33[1] = v39 / 0xFFFF + 4096;
    }
    v13 = (unsigned __int16 *)((char *)v13 + v12);
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v11 == v27)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v11 - v27;
    do
    {
      v42 = v13;
      v43 = v17;
      if ((v28 & 1) != 0)
      {
        v44 = v13[1];
        v42 = v13 + 2;
        *v17 = 57344 * *v13 / 0xFFFF + 4096;
        v17[1] = 57344 * v44 / 0xFFFFu + 4096;
        v43 = v17 + 2;
      }
      if (v10 == v30)
      {
        v45 = 0;
      }
      else
      {
        v46 = v10 - v30;
        do
        {
          v47 = *v42;
          v48 = v42[1];
          v42 += 2;
          *v43 = 57344 * v47 / 0xFFFFu + 4096;
          v43[1] = 57344 * v48 / 0xFFFFu + 4096;
          v43 += 2;
          --v46;
        }
        while (v46);
        v45 = v10 - v30;
      }
      if (v45 + v29 < v10)
      {
        v49 = *v42;
        v50 = v42[1];
        *v43 = 57344 * v49 / 0xFFFFu + 4096;
        v43[1] = 57344 * v50 / 0xFFFFu + 4096;
      }
      v13 = (unsigned __int16 *)((char *)v13 + v12);
      v17 = (_WORD *)((char *)v17 + v16);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v26 < v11)
  {
    if ((v28 & 1) != 0)
    {
      v51 = *v13;
      v52 = v13[1];
      v13 += 2;
      *v17 = 57344 * v51 / 0xFFFFu + 4096;
      v17[1] = 57344 * v52 / 0xFFFFu + 4096;
      v17 += 2;
    }
    if (v10 == v30)
    {
      v31 = 0;
    }
    else
    {
      v53 = v10 - v30;
      do
      {
        v54 = *v13;
        v55 = v13[1];
        v13 += 2;
        *v17 = 57344 * v54 / 0xFFFFu + 4096;
        v17[1] = 57344 * v55 / 0xFFFFu + 4096;
        v17 += 2;
        --v53;
      }
      while (v53);
    }
    if (v31 + v29 < v10)
    {
      v56 = 57344 * v13[1];
      *v17 = 57344 * *v13 / 0xFFFF + 4096;
      v17[1] = v56 / 0xFFFF + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_sf44_sv44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  unint64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned __int16 *v31;
  _WORD *v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  int v37;
  unsigned int v38;
  unint64_t v39;
  uint64_t v40;
  unsigned __int16 *v41;
  _WORD *v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  unint64_t v52;
  int v53;
  int v54;
  unsigned int v55;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a2[3];
  v12 = a4[1];
  v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 4 * v9);
  v14 = a6[4];
  v15 = a6[5];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (v11 >= a6[3])
    v18 = a6[3];
  else
    v18 = v11;
  if (v18)
  {
    v19 = 0;
    v20 = *a4;
    v21 = *a8;
    v22 = *a7 + *a8 * v15 + 2 * v14;
    v23 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
          *(_WORD *)(v22 + 2 * i) = 56064 * *(unsigned __int16 *)(v23 + 2 * i) / 0xFFFF + 4096;
      }
      v23 += v20;
      v22 += v21;
      ++v19;
    }
    while (v19 != v18);
  }
  v25 = v8 & 1;
  if (v18 >= v25)
    v26 = v8 & 1;
  else
    v26 = 0;
  v27 = v9;
  v28 = v9 & 1;
  if (v10 >= v28)
    v29 = v28;
  else
    v29 = 0;
  v30 = v10 - v29;
  if ((v8 & 1) != 0)
  {
    if ((v27 & 1) != 0)
    {
      v33 = v13[1];
      v31 = v13 + 2;
      *v17 = 57344 * *v13 / 0xFFFF + 4096;
      v17[1] = 57344 * v33 / 0xFFFFu + 4096;
      v32 = v17 + 2;
    }
    else
    {
      v31 = v13;
      v32 = v17;
    }
    if (v10 == v29)
    {
      v34 = 0;
    }
    else
    {
      v35 = v10 - v29;
      do
      {
        v36 = *v31;
        v37 = v31[1];
        v31 += 2;
        *v32 = 57344 * v36 / 0xFFFFu + 4096;
        v32[1] = 57344 * v37 / 0xFFFFu + 4096;
        v32 += 2;
        --v35;
      }
      while (v35);
      v34 = v10 - v29;
    }
    if (v34 + v28 < v10)
    {
      v38 = 57344 * v31[1];
      *v32 = 57344 * *v31 / 0xFFFF + 4096;
      v32[1] = v38 / 0xFFFF + 4096;
    }
    v13 = (unsigned __int16 *)((char *)v13 + v12);
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v18 == v26)
  {
    v39 = 0;
  }
  else
  {
    v40 = 0;
    v39 = v18 - v26;
    do
    {
      v41 = v13;
      v42 = v17;
      if ((v27 & 1) != 0)
      {
        v43 = v13[1];
        v41 = v13 + 2;
        *v17 = 57344 * *v13 / 0xFFFF + 4096;
        v17[1] = 57344 * v43 / 0xFFFFu + 4096;
        v42 = v17 + 2;
      }
      if (v10 == v29)
      {
        v44 = 0;
      }
      else
      {
        v45 = v10 - v29;
        do
        {
          v46 = *v41;
          v47 = v41[1];
          v41 += 2;
          *v42 = 57344 * v46 / 0xFFFFu + 4096;
          v42[1] = 57344 * v47 / 0xFFFFu + 4096;
          v42 += 2;
          --v45;
        }
        while (v45);
        v44 = v10 - v29;
      }
      if (v44 + v28 < v10)
      {
        v48 = *v41;
        v49 = v41[1];
        *v42 = 57344 * v48 / 0xFFFFu + 4096;
        v42[1] = 57344 * v49 / 0xFFFFu + 4096;
      }
      v13 = (unsigned __int16 *)((char *)v13 + v12);
      v17 = (_WORD *)((char *)v17 + v16);
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v25 < v18)
  {
    if ((v27 & 1) != 0)
    {
      v50 = *v13;
      v51 = v13[1];
      v13 += 2;
      *v17 = 57344 * v50 / 0xFFFFu + 4096;
      v17[1] = 57344 * v51 / 0xFFFFu + 4096;
      v17 += 2;
    }
    if (v10 == v29)
    {
      v30 = 0;
    }
    else
    {
      v52 = v10 - v29;
      do
      {
        v53 = *v13;
        v54 = v13[1];
        v13 += 2;
        *v17 = 57344 * v53 / 0xFFFFu + 4096;
        v17[1] = 57344 * v54 / 0xFFFFu + 4096;
        v17 += 2;
        --v52;
      }
      while (v52);
    }
    if (v30 + v28 < v10)
    {
      v55 = 57344 * v13[1];
      *v17 = 57344 * *v13 / 0xFFFF + 4096;
      v17[1] = v55 / 0xFFFF + 4096;
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sf44_s2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  unsigned __int16 *v36;
  _WORD *v37;
  unsigned int v38;
  unint64_t v39;
  _WORD *v40;
  unsigned int v41;
  unint64_t v42;
  uint64_t v43;
  unsigned __int16 *v44;
  _WORD *v45;
  unsigned int v46;
  unint64_t v47;
  _WORD *v48;
  unsigned int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  unint64_t v54;
  _WORD *v55;
  unsigned int v56;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = a8[2];
    v28 = a7[2] + v27 * v18 + v19;
    v29 = *a7 + *a8 * v18 + v19;
    v30 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = 56064 * *(unsigned __int16 *)(v30 + 2 * i) / 0xFFFF + 4096;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v9);
  }
  v32 = v12 & 1;
  if (v9 >= v32)
    v33 = v12 & 1;
  else
    v33 = 0;
  v34 = v8;
  if (v22 < v10)
    v10 = 0;
  v35 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v34 & 1) != 0)
    {
      v36 = v14 + 4;
      v38 = (57344 * v14[1] / 0xFFFF + 57344 * v14[3] / 0xFFFF + 8193) >> 1;
      *v21 = (57344 * *v14 / 0xFFFF + 57344 * v14[2] / 0xFFFF + 8193) >> 1;
      v21[1] = v38;
      v37 = v21 + 2;
    }
    else
    {
      v36 = v14;
      v37 = v21;
    }
    if (v22 != v10)
    {
      v39 = 0;
      do
      {
        v40 = &v37[v39];
        v41 = (57344 * v36[1] / 0xFFFF + 57344 * v36[3] / 0xFFFF + 8193) >> 1;
        *v40 = (57344 * *v36 / 0xFFFF + 57344 * v36[2] / 0xFFFF + 8193) >> 1;
        v40[1] = v41;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v33)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v9 - v33;
    do
    {
      v44 = v14;
      v45 = v21;
      if ((v34 & 1) != 0)
      {
        v44 = v14 + 4;
        v46 = (57344 * v14[1] / 0xFFFF + 57344 * v14[3] / 0xFFFF + 8193) >> 1;
        *v21 = (57344 * *v14 / 0xFFFF + 57344 * v14[2] / 0xFFFF + 8193) >> 1;
        v21[1] = v46;
        v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        v47 = 0;
        do
        {
          v48 = &v45[v47];
          v49 = (57344 * v44[1] / 0xFFFF + 57344 * v44[3] / 0xFFFF + 8193) >> 1;
          *v48 = (57344 * *v44 / 0xFFFF + 57344 * v44[2] / 0xFFFF + 8193) >> 1;
          v48[1] = v49;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v9)
  {
    if ((v34 & 1) != 0)
    {
      v50 = *v14;
      v51 = v14[1];
      v52 = v14[2];
      v53 = v14[3];
      v14 += 4;
      *v21 = (57344 * v50 / 0xFFFFu + 57344 * v52 / 0xFFFFu + 8193) >> 1;
      v21[1] = (57344 * v51 / 0xFFFFu + 57344 * v53 / 0xFFFFu + 8193) >> 1;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v54 = 0;
      do
      {
        v55 = &v21[v54];
        v56 = (57344 * v14[1] / 0xFFFF + 57344 * v14[3] / 0xFFFF + 8193) >> 1;
        *v55 = (57344 * *v14 / 0xFFFF + 57344 * v14[2] / 0xFFFF + 8193) >> 1;
        v55[1] = v56;
        v54 += 2;
        v14 += 4;
      }
      while (v54 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_sf44_s2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  unsigned __int16 *v36;
  _WORD *v37;
  int v38;
  unint64_t v39;
  _WORD *v40;
  unsigned int v41;
  unint64_t v42;
  uint64_t v43;
  unsigned __int16 *v44;
  _WORD *v45;
  int v46;
  unint64_t v47;
  _WORD *v48;
  unsigned int v49;
  int v50;
  int v51;
  unint64_t v52;
  _WORD *v53;
  unsigned int v54;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = a8[2];
    v28 = a7[2] + v27 * v18 + v19;
    v29 = *a7 + *a8 * v18 + v19;
    v30 = *a3 + v25 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = 56064 * *(unsigned __int16 *)(v30 + 2 * i) / 0xFFFF + 4096;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v8);
  }
  v32 = v12 & 1;
  if (v8 >= v32)
    v33 = v12 & 1;
  else
    v33 = 0;
  v34 = v9;
  if (v22 < v10)
    v10 = 0;
  v35 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v34 & 1) != 0)
    {
      v38 = v14[1];
      v36 = v14 + 4;
      *v21 = 57344 * *v14 / 0xFFFF + 4096;
      v21[1] = 57344 * v38 / 0xFFFFu + 4096;
      v37 = v21 + 2;
    }
    else
    {
      v36 = v14;
      v37 = v21;
    }
    if (v22 != v10)
    {
      v39 = 0;
      do
      {
        v40 = &v37[v39];
        v41 = 57344 * v36[1] / 0xFFFF;
        *v40 = 57344 * *v36 / 0xFFFF + 4096;
        v40[1] = v41 + 4096;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v33)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v8 - v33;
    do
    {
      v44 = v14;
      v45 = v21;
      if ((v34 & 1) != 0)
      {
        v46 = v14[1];
        v44 = v14 + 4;
        *v21 = 57344 * *v14 / 0xFFFF + 4096;
        v21[1] = 57344 * v46 / 0xFFFFu + 4096;
        v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        v47 = 0;
        do
        {
          v48 = &v45[v47];
          v49 = 57344 * v44[1] / 0xFFFF;
          *v48 = 57344 * *v44 / 0xFFFF + 4096;
          v48[1] = v49 + 4096;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v8)
  {
    if ((v34 & 1) != 0)
    {
      v50 = *v14;
      v51 = v14[1];
      v14 += 4;
      *v21 = 57344 * v50 / 0xFFFFu + 4096;
      v21[1] = 57344 * v51 / 0xFFFFu + 4096;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v52 = 0;
      do
      {
        v53 = &v21[v52];
        v54 = 57344 * v14[1] / 0xFFFF;
        *v53 = 57344 * *v14 / 0xFFFF + 4096;
        v53[1] = v54 + 4096;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sf44_sv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unsigned __int16 *v34;
  _WORD *v35;
  unsigned int v36;
  unint64_t v37;
  _WORD *v38;
  unsigned int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int16 *v42;
  _WORD *v43;
  unsigned int v44;
  unint64_t v45;
  _WORD *v46;
  unsigned int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  unint64_t v52;
  _WORD *v53;
  unsigned int v54;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = *a7 + *a8 * v18 + v19;
    v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = 56064 * *(unsigned __int16 *)(v28 + 2 * i) / 0xFFFF + 4096;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  v30 = v12 & 1;
  if (v9 >= v30)
    v31 = v12 & 1;
  else
    v31 = 0;
  v32 = v8;
  if (v22 < v10)
    v10 = 0;
  v33 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v34 = v14 + 4;
      v36 = (57344 * v14[1] / 0xFFFF + 57344 * v14[3] / 0xFFFF + 8193) >> 1;
      *v21 = (57344 * *v14 / 0xFFFF + 57344 * v14[2] / 0xFFFF + 8193) >> 1;
      v21[1] = v36;
      v35 = v21 + 2;
    }
    else
    {
      v34 = v14;
      v35 = v21;
    }
    if (v22 != v10)
    {
      v37 = 0;
      do
      {
        v38 = &v35[v37];
        v39 = (57344 * v34[1] / 0xFFFF + 57344 * v34[3] / 0xFFFF + 8193) >> 1;
        *v38 = (57344 * *v34 / 0xFFFF + 57344 * v34[2] / 0xFFFF + 8193) >> 1;
        v38[1] = v39;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v9 - v31;
    do
    {
      v42 = v14;
      v43 = v21;
      if ((v32 & 1) != 0)
      {
        v42 = v14 + 4;
        v44 = (57344 * v14[1] / 0xFFFF + 57344 * v14[3] / 0xFFFF + 8193) >> 1;
        *v21 = (57344 * *v14 / 0xFFFF + 57344 * v14[2] / 0xFFFF + 8193) >> 1;
        v21[1] = v44;
        v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        v45 = 0;
        do
        {
          v46 = &v43[v45];
          v47 = (57344 * v42[1] / 0xFFFF + 57344 * v42[3] / 0xFFFF + 8193) >> 1;
          *v46 = (57344 * *v42 / 0xFFFF + 57344 * v42[2] / 0xFFFF + 8193) >> 1;
          v46[1] = v47;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if ((v32 & 1) != 0)
    {
      v48 = *v14;
      v49 = v14[1];
      v50 = v14[2];
      v51 = v14[3];
      v14 += 4;
      *v21 = (57344 * v48 / 0xFFFFu + 57344 * v50 / 0xFFFFu + 8193) >> 1;
      v21[1] = (57344 * v49 / 0xFFFFu + 57344 * v51 / 0xFFFFu + 8193) >> 1;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v52 = 0;
      do
      {
        v53 = &v21[v52];
        v54 = (57344 * v14[1] / 0xFFFF + 57344 * v14[3] / 0xFFFF + 8193) >> 1;
        *v53 = (57344 * *v14 / 0xFFFF + 57344 * v14[2] / 0xFFFF + 8193) >> 1;
        v53[1] = v54;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_sf44_sv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unsigned __int16 *v34;
  _WORD *v35;
  int v36;
  unint64_t v37;
  _WORD *v38;
  unsigned int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int16 *v42;
  _WORD *v43;
  int v44;
  unint64_t v45;
  _WORD *v46;
  unsigned int v47;
  int v48;
  int v49;
  unint64_t v50;
  _WORD *v51;
  unsigned int v52;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = *a7 + *a8 * v18 + v19;
    v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = 56064 * *(unsigned __int16 *)(v28 + 2 * i) / 0xFFFF + 4096;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  v30 = v12 & 1;
  if (v9 >= v30)
    v31 = v12 & 1;
  else
    v31 = 0;
  v32 = v8;
  if (v22 < v10)
    v10 = 0;
  v33 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v36 = v14[1];
      v34 = v14 + 4;
      *v21 = 57344 * *v14 / 0xFFFF + 4096;
      v21[1] = 57344 * v36 / 0xFFFFu + 4096;
      v35 = v21 + 2;
    }
    else
    {
      v34 = v14;
      v35 = v21;
    }
    if (v22 != v10)
    {
      v37 = 0;
      do
      {
        v38 = &v35[v37];
        v39 = 57344 * v34[1] / 0xFFFF;
        *v38 = 57344 * *v34 / 0xFFFF + 4096;
        v38[1] = v39 + 4096;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v9 - v31;
    do
    {
      v42 = v14;
      v43 = v21;
      if ((v32 & 1) != 0)
      {
        v44 = v14[1];
        v42 = v14 + 4;
        *v21 = 57344 * *v14 / 0xFFFF + 4096;
        v21[1] = 57344 * v44 / 0xFFFFu + 4096;
        v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        v45 = 0;
        do
        {
          v46 = &v43[v45];
          v47 = 57344 * v42[1] / 0xFFFF;
          *v46 = 57344 * *v42 / 0xFFFF + 4096;
          v46[1] = v47 + 4096;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if ((v32 & 1) != 0)
    {
      v48 = *v14;
      v49 = v14[1];
      v14 += 4;
      *v21 = 57344 * v48 / 0xFFFFu + 4096;
      v21[1] = 57344 * v49 / 0xFFFFu + 4096;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v50 = 0;
      do
      {
        v51 = &v21[v50];
        v52 = 57344 * v14[1] / 0xFFFF;
        *v51 = 57344 * *v14 / 0xFFFF + 4096;
        v51[1] = v52 + 4096;
        v50 += 2;
        v14 += 4;
      }
      while (v50 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sf44_sf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _WORD *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  unsigned __int16 *v30;
  _WORD *v31;
  unsigned int v32;
  unint64_t v33;
  _WORD *v34;
  unsigned int v35;
  unint64_t v36;
  uint64_t v37;
  unsigned __int16 *v38;
  _WORD *v39;
  unsigned int v40;
  unint64_t v41;
  _WORD *v42;
  unsigned int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  unint64_t v48;
  _WORD *v49;
  unsigned int v50;
  unint64_t v53;
  uint64_t v54;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = v9 + v8;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = a4[1];
  v13 = (unsigned __int16 *)(a3[1] + v12 * v11 + 4 * (v9 + v8));
  v14 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v15 = *(_QWORD *)(a6 + 40);
  v16 = 2 * v14;
  v17 = a8[1];
  v18 = (_WORD *)(a7[1] + v17 * v15 + ((2 * v14) & 0x7FFFFFFFFFFFFFFELL));
  v19 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v14;
  if (((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v9 + v8) >= v19)
    v20 = v19;
  else
    v20 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - v10;
  if (*(_QWORD *)(a2 + 24) >= *(_QWORD *)(a6 + 24))
    v21 = *(_QWORD *)(a6 + 24);
  else
    v21 = *(_QWORD *)(a2 + 24);
  if (v21)
  {
    v53 = v21;
    v54 = a4[1];
    v22 = *a4;
    v23 = *a8;
    v24 = (char *)(*a7 + *a8 * v15 + v16);
    v25 = (char *)(*a3 + *a4 * v11 + 2 * v10);
    do
    {
      memcpy(v24, v25, 2 * v20);
      v25 += v22;
      v24 += v23;
      --v21;
    }
    while (v21);
    v21 = v53;
    v8 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40);
    v9 = v8 & 1;
    v12 = v54;
  }
  v26 = v11 & 1;
  if (v21 >= v26)
    v27 = v11 & 1;
  else
    v27 = 0;
  v28 = v8;
  if (v20 < v9)
    v9 = 0;
  v29 = v20 - v9;
  if ((v11 & 1) != 0)
  {
    if ((v28 & 1) != 0)
    {
      v30 = v13 + 4;
      v32 = (v13[1] + v13[3] + 1) >> 1;
      *v18 = (*v13 + v13[2] + 1) >> 1;
      v18[1] = v32;
      v31 = v18 + 2;
    }
    else
    {
      v30 = v13;
      v31 = v18;
    }
    if (v20 != v9)
    {
      v33 = 0;
      do
      {
        v34 = &v31[v33];
        v35 = (v30[1] + v30[3] + 1) >> 1;
        *v34 = (*v30 + v30[2] + 1) >> 1;
        v34[1] = v35;
        v33 += 2;
        v30 += 4;
      }
      while (v33 < v29);
    }
    v13 = (unsigned __int16 *)((char *)v13 + v12);
    v18 = (_WORD *)((char *)v18 + v17);
  }
  if (v21 == v27)
  {
    v36 = 0;
  }
  else
  {
    v37 = 0;
    v36 = v21 - v27;
    do
    {
      v38 = v13;
      v39 = v18;
      if ((v28 & 1) != 0)
      {
        v38 = v13 + 4;
        v40 = (v13[1] + v13[3] + 1) >> 1;
        *v18 = (*v13 + v13[2] + 1) >> 1;
        v18[1] = v40;
        v39 = v18 + 2;
      }
      if (v20 != v9)
      {
        v41 = 0;
        do
        {
          v42 = &v39[v41];
          v43 = (v38[1] + v38[3] + 1) >> 1;
          *v42 = (*v38 + v38[2] + 1) >> 1;
          v42[1] = v43;
          v41 += 2;
          v38 += 4;
        }
        while (v41 < v29);
      }
      v13 = (unsigned __int16 *)((char *)v13 + v12);
      v18 = (_WORD *)((char *)v18 + v17);
      ++v37;
    }
    while (v37 != v36);
  }
  if (v36 + v26 < v21)
  {
    if ((v28 & 1) != 0)
    {
      v44 = *v13;
      v45 = v13[1];
      v46 = v13[2];
      v47 = v13[3];
      v13 += 4;
      *v18 = (v44 + v46 + 1) >> 1;
      v18[1] = (v45 + v47 + 1) >> 1;
      v18 += 2;
    }
    if (v20 != v9)
    {
      v48 = 0;
      do
      {
        v49 = &v18[v48];
        v50 = (v13[1] + v13[3] + 1) >> 1;
        *v49 = (*v13 + v13[2] + 1) >> 1;
        v49[1] = v50;
        v48 += 2;
        v13 += 4;
      }
      while (v48 < v29);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_sf44_sf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  int *v30;
  int *v31;
  unint64_t v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  int *v36;
  int *v37;
  unint64_t v38;
  int v39;
  int v40;
  unint64_t v41;
  int v42;
  unint64_t v45;
  uint64_t v46;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = v9 + v8;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = a4[1];
  v13 = (int *)(a3[1] + v12 * v11 + 4 * (v9 + v8));
  v14 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v15 = *(_QWORD *)(a6 + 40);
  v16 = 2 * v14;
  v17 = a8[1];
  v18 = (int *)(a7[1] + v17 * v15 + ((2 * v14) & 0x7FFFFFFFFFFFFFFELL));
  v19 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v14;
  if (((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v9 + v8) >= v19)
    v20 = v19;
  else
    v20 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - v10;
  if (*(_QWORD *)(a2 + 24) >= *(_QWORD *)(a6 + 24))
    v21 = *(_QWORD *)(a6 + 24);
  else
    v21 = *(_QWORD *)(a2 + 24);
  if (v21)
  {
    v45 = v21;
    v46 = a4[1];
    v22 = *a4;
    v23 = *a8;
    v24 = (char *)(*a7 + *a8 * v15 + v16);
    v25 = (char *)(*a3 + *a4 * v11 + 2 * v10);
    do
    {
      memcpy(v24, v25, 2 * v20);
      v25 += v22;
      v24 += v23;
      --v21;
    }
    while (v21);
    v21 = v45;
    v8 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40);
    v9 = v8 & 1;
    v12 = v46;
  }
  v26 = v11 & 1;
  if (v21 >= v26)
    v27 = v11 & 1;
  else
    v27 = 0;
  v28 = v8;
  if (v20 < v9)
    v9 = 0;
  v29 = v20 - v9;
  if ((v11 & 1) != 0)
  {
    v30 = v13;
    if ((v28 & 1) != 0)
    {
      v30 = v13 + 2;
      *v18 = *v13;
      v31 = v18 + 1;
    }
    else
    {
      v31 = v18;
    }
    if (v20 != v9)
    {
      v32 = 0;
      do
      {
        v33 = *v30;
        v30 += 2;
        v31[v32 / 2] = v33;
        v32 += 2;
      }
      while (v32 < v29);
    }
    v13 = (int *)((char *)v13 + v12);
    v18 = (int *)((char *)v18 + v17);
  }
  if (v21 == v27)
  {
    v34 = 0;
  }
  else
  {
    v35 = 0;
    v34 = v21 - v27;
    do
    {
      v36 = v13;
      v37 = v18;
      if ((v28 & 1) != 0)
      {
        v36 = v13 + 2;
        *v18 = *v13;
        v37 = v18 + 1;
      }
      if (v20 != v9)
      {
        v38 = 0;
        do
        {
          v39 = *v36;
          v36 += 2;
          v37[v38 / 2] = v39;
          v38 += 2;
        }
        while (v38 < v29);
      }
      v13 = (int *)((char *)v13 + v12);
      v18 = (int *)((char *)v18 + v17);
      ++v35;
    }
    while (v35 != v34);
  }
  if (v34 + v26 < v21)
  {
    if ((v28 & 1) != 0)
    {
      v40 = *v13;
      v13 += 2;
      *v18++ = v40;
    }
    if (v20 != v9)
    {
      v41 = 0;
      do
      {
        v42 = *v13;
        v13 += 2;
        v18[v41 / 2] = v42;
        v41 += 2;
      }
      while (v41 < v29);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sf44_sv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  unint64_t v36;
  unsigned __int16 *v37;
  _WORD *v38;
  unsigned __int16 *v39;
  int v40;
  int v41;
  unsigned int v42;
  unint64_t v43;
  unsigned __int16 *v44;
  unsigned int v45;
  _WORD *v46;
  unint64_t v47;
  unint64_t v48;
  unsigned __int16 *v49;
  _WORD *v50;
  unsigned __int16 *v51;
  int v52;
  int v53;
  unsigned int v54;
  unint64_t v55;
  unsigned __int16 *v56;
  unsigned int v57;
  _WORD *v58;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = (v8 & 1) + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = a4[1];
  v15 = (unsigned __int16 *)(a3[1] + v14 * v12 + 4 * (v10 + v9));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = 2 * v16;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v23 = v11 - (v10 + v9);
  v24 = v17 - v16;
  if (v23 >= v24)
    v23 = v24;
  v25 = v13 - v12;
  v26 = v19 - v18;
  if (v25 < v19 - v18)
    v26 = v25;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v12 + 2 * (v10 + v9);
    if (v12 >= v8)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v31;
    v33 = *a7 + v29 * v18 + v20;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
          *(_WORD *)(v33 + 2 * i) = 56064 * *(unsigned __int16 *)(v32 + 2 * i) / 0xFFFF + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1))
    v35 = v8 & 1;
  else
    v35 = 0;
  if (v23 < v10)
    v10 = 0;
  v36 = v23 - v10;
  if ((v8 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v39 = (unsigned __int16 *)((char *)v15 + v14 + 4);
      v40 = *v39;
      v41 = v39[1];
      v37 = v15 + 4;
      v42 = (57344 * v15[1] / 0xFFFF
           + 57344 * v15[3] / 0xFFFF
           + 57344 * *(unsigned __int16 *)((char *)v15 + v14 + 2) / 0xFFFF
           + 57344 * v41 / 0xFFFFu
           + 16386) >> 2;
      *v22 = (57344 * *v15 / 0xFFFF
            + 57344 * v15[2] / 0xFFFF
            + 57344 * *(unsigned __int16 *)((char *)v15 + v14) / 0xFFFF
            + 57344 * v40 / 0xFFFFu
            + 16386) >> 2;
      v22[1] = v42;
      v38 = v22 + 2;
    }
    else
    {
      v37 = v15;
      v38 = v22;
    }
    if (v23 != v10)
    {
      v43 = 0;
      v44 = v37 + 2;
      do
      {
        v45 = 57344 * *(v44 - 1) / 0xFFFF
            + 57344 * v44[1] / 0xFFFF
            + 57344 * *(unsigned __int16 *)((char *)v44 + v14 - 2) / 0xFFFF
            + 57344 * *(unsigned __int16 *)((char *)v44 + v14 + 2) / 0xFFFF
            + 16386;
        v46 = &v38[v43];
        *v46 = (57344 * *(v44 - 2) / 0xFFFF
              + 57344 * *v44 / 0xFFFF
              + 57344 * *(unsigned __int16 *)((char *)v44 + v14 - 4) / 0xFFFF
              + 57344 * *(unsigned __int16 *)((char *)v44 + v14) / 0xFFFF
              + 16386) >> 2;
        v46[1] = v45 >> 2;
        v43 += 2;
        v44 += 4;
      }
      while (v43 < v36);
    }
    v15 += v14;
    v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v26 != v35)
  {
    v47 = 0;
    v48 = v26 - v35;
    do
    {
      v49 = v15;
      v50 = v22;
      if ((v9 & 1) != 0)
      {
        v51 = (unsigned __int16 *)((char *)v15 + v14 + 4);
        v52 = *v51;
        v53 = v51[1];
        v49 = v15 + 4;
        v54 = (57344 * v15[1] / 0xFFFF
             + 57344 * v15[3] / 0xFFFF
             + 57344 * *(unsigned __int16 *)((char *)v15 + v14 + 2) / 0xFFFF
             + 57344 * v53 / 0xFFFFu
             + 16386) >> 2;
        *v22 = (57344 * *v15 / 0xFFFF
              + 57344 * v15[2] / 0xFFFF
              + 57344 * *(unsigned __int16 *)((char *)v15 + v14) / 0xFFFF
              + 57344 * v52 / 0xFFFFu
              + 16386) >> 2;
        v22[1] = v54;
        v50 = v22 + 2;
      }
      if (v23 != v10)
      {
        v55 = 0;
        v56 = v49 + 2;
        do
        {
          v57 = 57344 * *(v56 - 1) / 0xFFFF
              + 57344 * v56[1] / 0xFFFF
              + 57344 * *(unsigned __int16 *)((char *)v56 + v14 - 2) / 0xFFFF
              + 57344 * *(unsigned __int16 *)((char *)v56 + v14 + 2) / 0xFFFF
              + 16386;
          v58 = &v50[v55];
          *v58 = (57344 * *(v56 - 2) / 0xFFFF
                + 57344 * *v56 / 0xFFFF
                + 57344 * *(unsigned __int16 *)((char *)v56 + v14 - 4) / 0xFFFF
                + 57344 * *(unsigned __int16 *)((char *)v56 + v14) / 0xFFFF
                + 16386) >> 2;
          v58[1] = v57 >> 2;
          v55 += 2;
          v56 += 4;
        }
        while (v55 < v36);
      }
      v15 += v14;
      v22 = (_WORD *)((char *)v22 + v21);
      v47 += 2;
    }
    while (v47 < v48);
  }
  return 0;
}

uint64_t vt_CopyDec_sf44_sv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  unint64_t v36;
  unsigned __int16 *v37;
  _WORD *v38;
  int v39;
  unint64_t v40;
  _WORD *v41;
  unsigned int v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unsigned __int16 *v46;
  _WORD *v47;
  int v48;
  unint64_t v49;
  _WORD *v50;
  unsigned int v51;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = (v8 & 1) + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = a4[1];
  v15 = (unsigned __int16 *)(a3[1] + v14 * v12 + 4 * (v10 + v9));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = 2 * v16;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v23 = v11 - (v10 + v9);
  v24 = v17 - v16;
  if (v23 >= v24)
    v23 = v24;
  v25 = v13 - v12;
  v26 = v19 - v18;
  if (v25 < v19 - v18)
    v26 = v25;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v12 + 2 * (v10 + v9);
    if (v12 >= v8)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v31;
    v33 = *a7 + v29 * v18 + v20;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
          *(_WORD *)(v33 + 2 * i) = 56064 * *(unsigned __int16 *)(v32 + 2 * i) / 0xFFFF + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1))
    v35 = v8 & 1;
  else
    v35 = 0;
  if (v23 < v10)
    v10 = 0;
  v36 = v23 - v10;
  if ((v8 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v39 = v15[1];
      v37 = v15 + 4;
      *v22 = 57344 * *v15 / 0xFFFF + 4096;
      v22[1] = 57344 * v39 / 0xFFFFu + 4096;
      v38 = v22 + 2;
    }
    else
    {
      v37 = v15;
      v38 = v22;
    }
    if (v23 != v10)
    {
      v40 = 0;
      do
      {
        v41 = &v38[v40];
        v42 = 57344 * v37[1] / 0xFFFF;
        *v41 = 57344 * *v37 / 0xFFFF + 4096;
        v41[1] = v42 + 4096;
        v40 += 2;
        v37 += 4;
      }
      while (v40 < v36);
    }
    v15 += v14;
    v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v26 != v35)
  {
    v43 = 0;
    v44 = v26 - v35;
    v45 = 2 * v14;
    do
    {
      v46 = v15;
      v47 = v22;
      if ((v9 & 1) != 0)
      {
        v48 = v15[1];
        v46 = v15 + 4;
        *v22 = 57344 * *v15 / 0xFFFF + 4096;
        v22[1] = 57344 * v48 / 0xFFFFu + 4096;
        v47 = v22 + 2;
      }
      if (v23 != v10)
      {
        v49 = 0;
        do
        {
          v50 = &v47[v49];
          v51 = 57344 * v46[1] / 0xFFFF;
          *v50 = 57344 * *v46 / 0xFFFF + 4096;
          v50[1] = v51 + 4096;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v36);
      }
      v15 = (unsigned __int16 *)((char *)v15 + v45);
      v22 = (_WORD *)((char *)v22 + v21);
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_CopyAvg_sf44_sf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v33;
  unint64_t v34;
  unsigned __int16 *v35;
  _WORD *v36;
  unsigned __int16 *v37;
  int v38;
  int v39;
  unsigned int v40;
  unint64_t v41;
  unsigned __int16 *v42;
  _WORD *v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  unsigned __int16 *v47;
  _WORD *v48;
  unsigned __int16 *v49;
  int v50;
  int v51;
  unsigned int v52;
  unint64_t v53;
  unsigned __int16 *v54;
  _WORD *v55;
  unsigned int v56;
  unint64_t v59;
  uint64_t v60;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * (v12 + v9) + 4 * (v10 + v8));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = 2 * v17;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  v23 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v17;
  if (((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8) >= v23)
    v24 = v23;
  else
    v24 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - v11;
  if (v14 - v13 >= v19 - v18)
    v25 = v19 - v18;
  else
    v25 = v14 - v13;
  if (v25)
  {
    v59 = v25;
    v60 = a8[1];
    v26 = *a4;
    v27 = *a8;
    if (v13 >= v9)
      v28 = 0;
    else
      v28 = *a4;
    v29 = (char *)(*a3 + *a4 * v13 + 2 * v11 + v28);
    v30 = (char *)(*a7 + v27 * v18 + v20);
    v31 = -(uint64_t)v25;
    do
    {
      memcpy(v30, v29, 2 * v24);
      v29 += v26;
      v30 += v27;
    }
    while (!__CFADD__(v31++, 1));
    v25 = v59;
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
    v21 = v60;
  }
  if (v25 >= v12)
    v33 = v12;
  else
    v33 = 0;
  if (v24 < v10)
    v10 = 0;
  v34 = v24 - v10;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v37 = (unsigned __int16 *)((char *)v16 + v15 + 4);
      v38 = *v37;
      v39 = v37[1];
      v35 = v16 + 4;
      v40 = (v16[1] + v16[3] + *(unsigned __int16 *)((char *)v16 + v15 + 2) + v39 + 2) >> 2;
      *v22 = (*v16 + v16[2] + *(unsigned __int16 *)((char *)v16 + v15) + v38 + 2) >> 2;
      v22[1] = v40;
      v36 = v22 + 2;
    }
    else
    {
      v35 = v16;
      v36 = v22;
    }
    if (v24 != v10)
    {
      v41 = 0;
      v42 = v35 + 2;
      do
      {
        v43 = &v36[v41];
        v44 = (*(v42 - 1)
             + v42[1]
             + *(unsigned __int16 *)((char *)v42 + v15 - 2)
             + *(unsigned __int16 *)((char *)v42 + v15 + 2)
             + 2) >> 2;
        *v43 = (*(v42 - 2)
              + *v42
              + *(unsigned __int16 *)((char *)v42 + v15 - 4)
              + *(unsigned __int16 *)((char *)v42 + v15)
              + 2) >> 2;
        v43[1] = v44;
        v41 += 2;
        v42 += 4;
      }
      while (v41 < v34);
    }
    v16 += v15;
    v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v25 != v33)
  {
    v45 = 0;
    v46 = v25 - v33;
    do
    {
      v47 = v16;
      v48 = v22;
      if ((v8 & 1) != 0)
      {
        v49 = (unsigned __int16 *)((char *)v16 + v15 + 4);
        v50 = *v49;
        v51 = v49[1];
        v47 = v16 + 4;
        v52 = (v16[1] + v16[3] + *(unsigned __int16 *)((char *)v16 + v15 + 2) + v51 + 2) >> 2;
        *v22 = (*v16 + v16[2] + *(unsigned __int16 *)((char *)v16 + v15) + v50 + 2) >> 2;
        v22[1] = v52;
        v48 = v22 + 2;
      }
      if (v24 != v10)
      {
        v53 = 0;
        v54 = v47 + 2;
        do
        {
          v55 = &v48[v53];
          v56 = (*(v54 - 1)
               + v54[1]
               + *(unsigned __int16 *)((char *)v54 + v15 - 2)
               + *(unsigned __int16 *)((char *)v54 + v15 + 2)
               + 2) >> 2;
          *v55 = (*(v54 - 2)
                + *v54
                + *(unsigned __int16 *)((char *)v54 + v15 - 4)
                + *(unsigned __int16 *)((char *)v54 + v15)
                + 2) >> 2;
          v55[1] = v56;
          v53 += 2;
          v54 += 4;
        }
        while (v53 < v34);
      }
      v16 += v15;
      v22 = (_WORD *)((char *)v22 + v21);
      v45 += 2;
    }
    while (v45 < v46);
  }
  return 0;
}

uint64_t vt_CopyDec_sf44_sf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  int *v34;
  int *v35;
  unint64_t v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  int *v40;
  int *v41;
  unint64_t v42;
  int v43;
  unint64_t v46;
  uint64_t v47;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = a4[1];
  v15 = (int *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v18 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (int *)(a7[1] + ((unint64_t)(v20 * v17) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v16;
  if (((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8) >= v22)
    v23 = v22;
  else
    v23 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - v11;
  v24 = v18 - v17;
  if (((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v13 < v18 - v17)
    v24 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v13;
  if (v24)
  {
    v46 = v24;
    v47 = a4[1];
    v25 = *a4;
    v26 = *a8;
    if (v13 >= v9)
      v27 = 0;
    else
      v27 = *a4;
    v28 = (char *)(*a3 + *a4 * v13 + 2 * v11 + v27);
    v29 = (char *)(*a7 + v26 * v17 + v19);
    v30 = -(uint64_t)v24;
    do
    {
      memcpy(v29, v28, 2 * v23);
      v28 += v25;
      v29 += v26;
    }
    while (!__CFADD__(v30++, 1));
    v24 = v46;
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
    v14 = v47;
  }
  if (v24 >= v12)
    v32 = v12;
  else
    v32 = 0;
  if (v23 < v10)
    v10 = 0;
  v33 = v23 - v10;
  if (v12)
  {
    v34 = v15;
    if ((v8 & 1) != 0)
    {
      v34 = v15 + 2;
      *v21 = *v15;
      v35 = v21 + 1;
    }
    else
    {
      v35 = v21;
    }
    if (v23 != v10)
    {
      v36 = 0;
      do
      {
        v37 = *v34;
        v34 += 2;
        v35[v36 / 2] = v37;
        v36 += 2;
      }
      while (v36 < v33);
    }
    v15 = (int *)((char *)v15 + 2 * v14);
    v21 = (int *)((char *)v21 + v20);
  }
  if (v24 != v32)
  {
    v38 = 0;
    v39 = v24 - v32;
    do
    {
      v40 = v15;
      v41 = v21;
      if ((v8 & 1) != 0)
      {
        v40 = v15 + 2;
        *v21 = *v15;
        v41 = v21 + 1;
      }
      if (v23 != v10)
      {
        v42 = 0;
        do
        {
          v43 = *v40;
          v40 += 2;
          v41[v42 / 2] = v43;
          v42 += 2;
        }
        while (v42 < v33);
      }
      v15 = (int *)((char *)v15 + 2 * v14);
      v21 = (int *)((char *)v21 + v20);
      v38 += 2;
    }
    while (v38 < v39);
  }
  return 0;
}

uint64_t vt_Copy_sf44_t4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned __int16 *v32;
  _WORD *v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  unsigned __int16 *v43;
  _WORD *v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  unint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a4[1];
  v12 = (unsigned __int16 *)(a3[1] + v11 * v8 + 4 * v9);
  v13 = a6[4];
  v14 = a6[5];
  v15 = a8[1];
  v16 = (_WORD *)(a7[1] + v15 * v14 + 4 * v13);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (a2[3] >= a6[3])
    v17 = a6[3];
  else
    v17 = a2[3];
  if (v17)
  {
    v18 = 0;
    v19 = *a4;
    v20 = *a8;
    v21 = a8[2];
    v22 = a7[2] + v21 * v14 + 2 * v13;
    v23 = *a7 + *a8 * v14 + 2 * v13;
    v24 = *a3 + v19 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
        {
          *(_WORD *)(v22 + 2 * i) = -1;
          *(_WORD *)(v23 + 2 * i) = 16
                                  * (((268439553
                                                   * (unint64_t)(3504
                                                                      * *(unsigned __int16 *)(v24 + 2 * i))) >> 32) >> 12)
                                  + 4096;
        }
      }
      v24 += v19;
      v23 += v20;
      v22 += v21;
      ++v18;
    }
    while (v18 != v17);
  }
  v26 = v8 & 1;
  if (v17 >= v26)
    v27 = v8 & 1;
  else
    v27 = 0;
  v28 = v9;
  v29 = v9 & 1;
  if (v10 >= v29)
    v30 = v29;
  else
    v30 = 0;
  v31 = v10 - v30;
  if ((v8 & 1) != 0)
  {
    if ((v28 & 1) != 0)
    {
      v34 = v12[1];
      v32 = v12 + 2;
      *v16 = 16 * (((268439553 * (unint64_t)(3584 * *v12)) >> 32) >> 12) + 4096;
      v16[1] = 16 * ((268439553 * (unint64_t)(3584 * v34)) >> 44) + 4096;
      v33 = v16 + 2;
    }
    else
    {
      v32 = v12;
      v33 = v16;
    }
    if (v10 == v30)
    {
      v35 = 0;
    }
    else
    {
      v36 = v10 - v30;
      do
      {
        v37 = *v32;
        v38 = v32[1];
        v32 += 2;
        *v33 = 16 * (((268439553 * (unint64_t)(3584 * v37)) >> 32) >> 12) + 4096;
        v33[1] = 16 * ((268439553 * (unint64_t)(3584 * v38)) >> 44) + 4096;
        v33 += 2;
        --v36;
      }
      while (v36);
      v35 = v10 - v30;
    }
    if (v35 + v29 < v10)
    {
      v39 = *v32;
      v40 = v32[1];
      *v33 = 16 * (((268439553 * (unint64_t)(3584 * v39)) >> 32) >> 12) + 4096;
      v33[1] = 16 * (((268439553 * (unint64_t)(3584 * v40)) >> 32) >> 12) + 4096;
    }
    v12 = (unsigned __int16 *)((char *)v12 + v11);
    v16 = (_WORD *)((char *)v16 + v15);
  }
  if (v17 == v27)
  {
    v41 = 0;
  }
  else
  {
    v42 = 0;
    v41 = v17 - v27;
    do
    {
      v43 = v12;
      v44 = v16;
      if ((v28 & 1) != 0)
      {
        v45 = v12[1];
        v43 = v12 + 2;
        *v16 = 16 * (((268439553 * (unint64_t)(3584 * *v12)) >> 32) >> 12) + 4096;
        v16[1] = 16 * ((268439553 * (unint64_t)(3584 * v45)) >> 44) + 4096;
        v44 = v16 + 2;
      }
      if (v10 == v30)
      {
        v46 = 0;
      }
      else
      {
        v47 = v10 - v30;
        do
        {
          v48 = *v43;
          v49 = v43[1];
          v43 += 2;
          *v44 = 16 * (((268439553 * (unint64_t)(3584 * v48)) >> 32) >> 12) + 4096;
          v44[1] = 16 * ((268439553 * (unint64_t)(3584 * v49)) >> 44) + 4096;
          v44 += 2;
          --v47;
        }
        while (v47);
        v46 = v10 - v30;
      }
      if (v46 + v29 < v10)
      {
        v50 = *v43;
        v51 = v43[1];
        *v44 = 16 * (((268439553 * (unint64_t)(3584 * v50)) >> 32) >> 12) + 4096;
        v44[1] = 16 * (((268439553 * (unint64_t)(3584 * v51)) >> 32) >> 12) + 4096;
      }
      v12 = (unsigned __int16 *)((char *)v12 + v11);
      v16 = (_WORD *)((char *)v16 + v15);
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v26 < v17)
  {
    if ((v28 & 1) != 0)
    {
      v52 = *v12;
      v53 = v12[1];
      v12 += 2;
      *v16 = 16 * (((268439553 * (unint64_t)(3584 * v52)) >> 32) >> 12) + 4096;
      v16[1] = 16 * ((268439553 * (unint64_t)(3584 * v53)) >> 44) + 4096;
      v16 += 2;
    }
    if (v10 == v30)
    {
      v31 = 0;
    }
    else
    {
      v54 = v10 - v30;
      do
      {
        v55 = *v12;
        v56 = v12[1];
        v12 += 2;
        *v16 = 16 * (((268439553 * (unint64_t)(3584 * v55)) >> 32) >> 12) + 4096;
        v16[1] = 16 * ((268439553 * (unint64_t)(3584 * v56)) >> 44) + 4096;
        v16 += 2;
        --v54;
      }
      while (v54);
    }
    if (v31 + v29 < v10)
    {
      v57 = *v12;
      v58 = v12[1];
      *v16 = 16 * (((268439553 * (unint64_t)(3584 * v57)) >> 32) >> 12) + 4096;
      v16[1] = 16 * (((268439553 * (unint64_t)(3584 * v58)) >> 32) >> 12) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_sf44_tv44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  unint64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned __int16 *v31;
  _WORD *v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int16 *v42;
  _WORD *v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  unint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a2[3];
  v12 = a4[1];
  v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 4 * v9);
  v14 = a6[4];
  v15 = a6[5];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (v11 >= a6[3])
    v18 = a6[3];
  else
    v18 = v11;
  if (v18)
  {
    v19 = 0;
    v20 = *a4;
    v21 = *a8;
    v22 = *a7 + *a8 * v15 + 2 * v14;
    v23 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
          *(_WORD *)(v22 + 2 * i) = 16
                                  * (((268439553
                                                   * (unint64_t)(3504
                                                                      * *(unsigned __int16 *)(v23 + 2 * i))) >> 32) >> 12)
                                  + 4096;
      }
      v23 += v20;
      v22 += v21;
      ++v19;
    }
    while (v19 != v18);
  }
  v25 = v8 & 1;
  if (v18 >= v25)
    v26 = v8 & 1;
  else
    v26 = 0;
  v27 = v9;
  v28 = v9 & 1;
  if (v10 >= v28)
    v29 = v28;
  else
    v29 = 0;
  v30 = v10 - v29;
  if ((v8 & 1) != 0)
  {
    if ((v27 & 1) != 0)
    {
      v33 = v13[1];
      v31 = v13 + 2;
      *v17 = 16 * (((268439553 * (unint64_t)(3584 * *v13)) >> 32) >> 12) + 4096;
      v17[1] = 16 * ((268439553 * (unint64_t)(3584 * v33)) >> 44) + 4096;
      v32 = v17 + 2;
    }
    else
    {
      v31 = v13;
      v32 = v17;
    }
    if (v10 == v29)
    {
      v34 = 0;
    }
    else
    {
      v35 = v10 - v29;
      do
      {
        v36 = *v31;
        v37 = v31[1];
        v31 += 2;
        *v32 = 16 * (((268439553 * (unint64_t)(3584 * v36)) >> 32) >> 12) + 4096;
        v32[1] = 16 * ((268439553 * (unint64_t)(3584 * v37)) >> 44) + 4096;
        v32 += 2;
        --v35;
      }
      while (v35);
      v34 = v10 - v29;
    }
    if (v34 + v28 < v10)
    {
      v38 = *v31;
      v39 = v31[1];
      *v32 = 16 * (((268439553 * (unint64_t)(3584 * v38)) >> 32) >> 12) + 4096;
      v32[1] = 16 * (((268439553 * (unint64_t)(3584 * v39)) >> 32) >> 12) + 4096;
    }
    v13 = (unsigned __int16 *)((char *)v13 + v12);
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v18 == v26)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v18 - v26;
    do
    {
      v42 = v13;
      v43 = v17;
      if ((v27 & 1) != 0)
      {
        v44 = v13[1];
        v42 = v13 + 2;
        *v17 = 16 * (((268439553 * (unint64_t)(3584 * *v13)) >> 32) >> 12) + 4096;
        v17[1] = 16 * ((268439553 * (unint64_t)(3584 * v44)) >> 44) + 4096;
        v43 = v17 + 2;
      }
      if (v10 == v29)
      {
        v45 = 0;
      }
      else
      {
        v46 = v10 - v29;
        do
        {
          v47 = *v42;
          v48 = v42[1];
          v42 += 2;
          *v43 = 16 * (((268439553 * (unint64_t)(3584 * v47)) >> 32) >> 12) + 4096;
          v43[1] = 16 * ((268439553 * (unint64_t)(3584 * v48)) >> 44) + 4096;
          v43 += 2;
          --v46;
        }
        while (v46);
        v45 = v10 - v29;
      }
      if (v45 + v28 < v10)
      {
        v49 = *v42;
        v50 = v42[1];
        *v43 = 16 * (((268439553 * (unint64_t)(3584 * v49)) >> 32) >> 12) + 4096;
        v43[1] = 16 * (((268439553 * (unint64_t)(3584 * v50)) >> 32) >> 12) + 4096;
      }
      v13 = (unsigned __int16 *)((char *)v13 + v12);
      v17 = (_WORD *)((char *)v17 + v16);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v25 < v18)
  {
    if ((v27 & 1) != 0)
    {
      v51 = *v13;
      v52 = v13[1];
      v13 += 2;
      *v17 = 16 * (((268439553 * (unint64_t)(3584 * v51)) >> 32) >> 12) + 4096;
      v17[1] = 16 * ((268439553 * (unint64_t)(3584 * v52)) >> 44) + 4096;
      v17 += 2;
    }
    if (v10 == v29)
    {
      v30 = 0;
    }
    else
    {
      v53 = v10 - v29;
      do
      {
        v54 = *v13;
        v55 = v13[1];
        v13 += 2;
        *v17 = 16 * (((268439553 * (unint64_t)(3584 * v54)) >> 32) >> 12) + 4096;
        v17[1] = 16 * ((268439553 * (unint64_t)(3584 * v55)) >> 44) + 4096;
        v17 += 2;
        --v53;
      }
      while (v53);
    }
    if (v30 + v28 < v10)
    {
      v56 = *v13;
      v57 = v13[1];
      *v17 = 16 * (((268439553 * (unint64_t)(3584 * v56)) >> 32) >> 12) + 4096;
      v17[1] = 16 * (((268439553 * (unint64_t)(3584 * v57)) >> 32) >> 12) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_sf44_tf44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  unint64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned __int16 *v31;
  _WORD *v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int16 *v42;
  _WORD *v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  unint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a2[3];
  v12 = a4[1];
  v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 4 * v9);
  v14 = a6[4];
  v15 = a6[5];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (v11 >= a6[3])
    v18 = a6[3];
  else
    v18 = v11;
  if (v18)
  {
    v19 = 0;
    v20 = *a4;
    v21 = *a8;
    v22 = *a7 + *a8 * v15 + 2 * v14;
    v23 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
          *(_WORD *)(v22 + 2 * i) = 16
                                  * (((268439553
                                                   * (unint64_t)(4095
                                                                      * *(unsigned __int16 *)(v23 + 2 * i))) >> 32) >> 12);
      }
      v23 += v20;
      v22 += v21;
      ++v19;
    }
    while (v19 != v18);
  }
  v25 = v8 & 1;
  if (v18 >= v25)
    v26 = v8 & 1;
  else
    v26 = 0;
  v27 = v9;
  v28 = v9 & 1;
  if (v10 >= v28)
    v29 = v28;
  else
    v29 = 0;
  v30 = v10 - v29;
  if ((v8 & 1) != 0)
  {
    if ((v27 & 1) != 0)
    {
      v33 = v13[1];
      v31 = v13 + 2;
      *v17 = 16 * (((268439553 * (unint64_t)(4095 * *v13)) >> 32) >> 12);
      v17[1] = 16 * ((268439553 * (unint64_t)(4095 * v33)) >> 44);
      v32 = v17 + 2;
    }
    else
    {
      v31 = v13;
      v32 = v17;
    }
    if (v10 == v29)
    {
      v34 = 0;
    }
    else
    {
      v35 = v10 - v29;
      do
      {
        v36 = *v31;
        v37 = v31[1];
        v31 += 2;
        *v32 = 16 * (((268439553 * (unint64_t)(4095 * v36)) >> 32) >> 12);
        v32[1] = 16 * ((268439553 * (unint64_t)(4095 * v37)) >> 44);
        v32 += 2;
        --v35;
      }
      while (v35);
      v34 = v10 - v29;
    }
    if (v34 + v28 < v10)
    {
      v38 = *v31;
      v39 = v31[1];
      *v32 = 16 * (((268439553 * (unint64_t)(4095 * v38)) >> 32) >> 12);
      v32[1] = 16 * (((268439553 * (unint64_t)(4095 * v39)) >> 32) >> 12);
    }
    v13 = (unsigned __int16 *)((char *)v13 + v12);
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v18 == v26)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v18 - v26;
    do
    {
      v42 = v13;
      v43 = v17;
      if ((v27 & 1) != 0)
      {
        v44 = v13[1];
        v42 = v13 + 2;
        *v17 = 16 * (((268439553 * (unint64_t)(4095 * *v13)) >> 32) >> 12);
        v17[1] = 16 * ((268439553 * (unint64_t)(4095 * v44)) >> 44);
        v43 = v17 + 2;
      }
      if (v10 == v29)
      {
        v45 = 0;
      }
      else
      {
        v46 = v10 - v29;
        do
        {
          v47 = *v42;
          v48 = v42[1];
          v42 += 2;
          *v43 = 16 * (((268439553 * (unint64_t)(4095 * v47)) >> 32) >> 12);
          v43[1] = 16 * ((268439553 * (unint64_t)(4095 * v48)) >> 44);
          v43 += 2;
          --v46;
        }
        while (v46);
        v45 = v10 - v29;
      }
      if (v45 + v28 < v10)
      {
        v49 = *v42;
        v50 = v42[1];
        *v43 = 16 * (((268439553 * (unint64_t)(4095 * v49)) >> 32) >> 12);
        v43[1] = 16 * (((268439553 * (unint64_t)(4095 * v50)) >> 32) >> 12);
      }
      v13 = (unsigned __int16 *)((char *)v13 + v12);
      v17 = (_WORD *)((char *)v17 + v16);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v25 < v18)
  {
    if ((v27 & 1) != 0)
    {
      v51 = *v13;
      v52 = v13[1];
      v13 += 2;
      *v17 = 16 * (((268439553 * (unint64_t)(4095 * v51)) >> 32) >> 12);
      v17[1] = 16 * ((268439553 * (unint64_t)(4095 * v52)) >> 44);
      v17 += 2;
    }
    if (v10 == v29)
    {
      v30 = 0;
    }
    else
    {
      v53 = v10 - v29;
      do
      {
        v54 = *v13;
        v55 = v13[1];
        v13 += 2;
        *v17 = 16 * (((268439553 * (unint64_t)(4095 * v54)) >> 32) >> 12);
        v17[1] = 16 * ((268439553 * (unint64_t)(4095 * v55)) >> 44);
        v17 += 2;
        --v53;
      }
      while (v53);
    }
    if (v30 + v28 < v10)
    {
      v56 = *v13;
      v57 = v13[1];
      *v17 = 16 * (((268439553 * (unint64_t)(4095 * v56)) >> 32) >> 12);
      v17[1] = 16 * (((268439553 * (unint64_t)(4095 * v57)) >> 32) >> 12);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sf44_t2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  unsigned __int16 *v36;
  _WORD *v37;
  unsigned int v38;
  unint64_t v39;
  _WORD *v40;
  unsigned int v41;
  unint64_t v42;
  uint64_t v43;
  unsigned __int16 *v44;
  _WORD *v45;
  unsigned int v46;
  unint64_t v47;
  _WORD *v48;
  unsigned int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  unint64_t v54;
  _WORD *v55;
  unsigned int v56;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = a8[2];
    v28 = a7[2] + v27 * v18 + v19;
    v29 = *a7 + *a8 * v18 + v19;
    v30 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = 16
                                  * (((268439553
                                                   * (unint64_t)(3504
                                                                      * *(unsigned __int16 *)(v30 + 2 * i))) >> 32) >> 12)
                                  + 4096;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v9);
  }
  v32 = v12 & 1;
  if (v9 >= v32)
    v33 = v12 & 1;
  else
    v33 = 0;
  v34 = v8;
  if (v22 < v10)
    v10 = 0;
  v35 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v34 & 1) != 0)
    {
      v36 = v14 + 4;
      v38 = (((268439553 * (unint64_t)(3584 * v14[3])) >> 32) >> 12)
          + (((268439553 * (unint64_t)(3584 * v14[1])) >> 32) >> 12);
      *v21 = (8
            * ((((268439553 * (unint64_t)(3584 * v14[2])) >> 32) >> 12)
             + (((268439553 * (unint64_t)(3584 * *v14)) >> 32) >> 12))
            + 4104) & 0xFFF0;
      v21[1] = (8 * v38 + 4104) & 0xFFF0;
      v37 = v21 + 2;
    }
    else
    {
      v36 = v14;
      v37 = v21;
    }
    if (v22 != v10)
    {
      v39 = 0;
      do
      {
        v40 = &v37[v39];
        v41 = (((268439553 * (unint64_t)(3584 * v36[3])) >> 32) >> 12)
            + (((268439553 * (unint64_t)(3584 * v36[1])) >> 32) >> 12);
        *v40 = (8
              * (((268439553 * (unint64_t)(3584 * v36[2])) >> 44)
               + (((268439553 * (unint64_t)(3584 * *v36)) >> 32) >> 12))
              + 4104) & 0xFFF0;
        v40[1] = (8 * v41 + 4104) & 0xFFF0;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v33)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v9 - v33;
    do
    {
      v44 = v14;
      v45 = v21;
      if ((v34 & 1) != 0)
      {
        v44 = v14 + 4;
        v46 = (((268439553 * (unint64_t)(3584 * v14[3])) >> 32) >> 12)
            + (((268439553 * (unint64_t)(3584 * v14[1])) >> 32) >> 12);
        *v21 = (8
              * (((268439553 * (unint64_t)(3584 * v14[2])) >> 44)
               + (((268439553 * (unint64_t)(3584 * *v14)) >> 32) >> 12))
              + 4104) & 0xFFF0;
        v21[1] = (8 * v46 + 4104) & 0xFFF0;
        v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        v47 = 0;
        do
        {
          v48 = &v45[v47];
          v49 = (((268439553 * (unint64_t)(3584 * v44[3])) >> 32) >> 12)
              + (((268439553 * (unint64_t)(3584 * v44[1])) >> 32) >> 12);
          *v48 = (8
                * (((268439553 * (unint64_t)(3584 * v44[2])) >> 44)
                 + (((268439553 * (unint64_t)(3584 * *v44)) >> 32) >> 12))
                + 4104) & 0xFFF0;
          v48[1] = (8 * v49 + 4104) & 0xFFF0;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v9)
  {
    if ((v34 & 1) != 0)
    {
      v50 = *v14;
      v51 = v14[1];
      v52 = v14[2];
      v53 = v14[3];
      v14 += 4;
      *v21 = (8
            * ((((268439553 * (unint64_t)(3584 * v52)) >> 32) >> 12)
             + (((268439553 * (unint64_t)(3584 * v50)) >> 32) >> 12))
            + 4104) & 0xFFF0;
      v21[1] = (8
              * ((((268439553 * (unint64_t)(3584 * v53)) >> 32) >> 12)
               + (((268439553 * (unint64_t)(3584 * v51)) >> 32) >> 12))
              + 4104) & 0xFFF0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v54 = 0;
      do
      {
        v55 = &v21[v54];
        v56 = (((268439553 * (unint64_t)(3584 * v14[3])) >> 32) >> 12)
            + (((268439553 * (unint64_t)(3584 * v14[1])) >> 32) >> 12);
        *v55 = (8
              * (((268439553 * (unint64_t)(3584 * v14[2])) >> 44)
               + (((268439553 * (unint64_t)(3584 * *v14)) >> 32) >> 12))
              + 4104) & 0xFFF0;
        v55[1] = (8 * v56 + 4104) & 0xFFF0;
        v54 += 2;
        v14 += 4;
      }
      while (v54 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_sf44_t2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  unsigned __int16 *v36;
  _WORD *v37;
  int v38;
  unint64_t v39;
  _WORD *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unsigned __int16 *v44;
  _WORD *v45;
  int v46;
  unint64_t v47;
  _WORD *v48;
  unint64_t v49;
  int v50;
  int v51;
  unint64_t v52;
  _WORD *v53;
  unint64_t v54;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = a8[2];
    v28 = a7[2] + v27 * v18 + v19;
    v29 = *a7 + *a8 * v18 + v19;
    v30 = *a3 + v25 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = 16
                                  * (((268439553
                                                   * (unint64_t)(3504
                                                                      * *(unsigned __int16 *)(v30 + 2 * i))) >> 32) >> 12)
                                  + 4096;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v8);
  }
  v32 = v12 & 1;
  if (v8 >= v32)
    v33 = v12 & 1;
  else
    v33 = 0;
  v34 = v9;
  if (v22 < v10)
    v10 = 0;
  v35 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v34 & 1) != 0)
    {
      v38 = v14[1];
      v36 = v14 + 4;
      *v21 = 16 * (((268439553 * (unint64_t)(3584 * *v14)) >> 32) >> 12) + 4096;
      v21[1] = 16 * ((268439553 * (unint64_t)(3584 * v38)) >> 44) + 4096;
      v37 = v21 + 2;
    }
    else
    {
      v36 = v14;
      v37 = v21;
    }
    if (v22 != v10)
    {
      v39 = 0;
      do
      {
        v40 = &v37[v39];
        v41 = (268439553 * (unint64_t)(3584 * v36[1])) >> 44;
        *v40 = 16 * (((268439553 * (unint64_t)(3584 * *v36)) >> 32) >> 12) + 4096;
        v40[1] = 16 * v41 + 4096;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v33)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v8 - v33;
    do
    {
      v44 = v14;
      v45 = v21;
      if ((v34 & 1) != 0)
      {
        v46 = v14[1];
        v44 = v14 + 4;
        *v21 = 16 * (((268439553 * (unint64_t)(3584 * *v14)) >> 32) >> 12) + 4096;
        v21[1] = 16 * ((268439553 * (unint64_t)(3584 * v46)) >> 44) + 4096;
        v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        v47 = 0;
        do
        {
          v48 = &v45[v47];
          v49 = (268439553 * (unint64_t)(3584 * v44[1])) >> 44;
          *v48 = 16 * (((268439553 * (unint64_t)(3584 * *v44)) >> 32) >> 12) + 4096;
          v48[1] = 16 * v49 + 4096;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v8)
  {
    if ((v34 & 1) != 0)
    {
      v50 = *v14;
      v51 = v14[1];
      v14 += 4;
      *v21 = 16 * (((268439553 * (unint64_t)(3584 * v50)) >> 32) >> 12) + 4096;
      v21[1] = 16 * ((268439553 * (unint64_t)(3584 * v51)) >> 44) + 4096;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v52 = 0;
      do
      {
        v53 = &v21[v52];
        v54 = (268439553 * (unint64_t)(3584 * v14[1])) >> 44;
        *v53 = 16 * (((268439553 * (unint64_t)(3584 * *v14)) >> 32) >> 12) + 4096;
        v53[1] = 16 * v54 + 4096;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sf44_tv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unsigned __int16 *v34;
  _WORD *v35;
  unsigned int v36;
  unint64_t v37;
  _WORD *v38;
  unsigned int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int16 *v42;
  _WORD *v43;
  unsigned int v44;
  unint64_t v45;
  _WORD *v46;
  unsigned int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  unint64_t v52;
  _WORD *v53;
  unsigned int v54;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = *a7 + *a8 * v18 + v19;
    v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = 16
                                  * (((268439553
                                                   * (unint64_t)(3504
                                                                      * *(unsigned __int16 *)(v28 + 2 * i))) >> 32) >> 12)
                                  + 4096;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  v30 = v12 & 1;
  if (v9 >= v30)
    v31 = v12 & 1;
  else
    v31 = 0;
  v32 = v8;
  if (v22 < v10)
    v10 = 0;
  v33 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v34 = v14 + 4;
      v36 = (((268439553 * (unint64_t)(3584 * v14[3])) >> 32) >> 12)
          + (((268439553 * (unint64_t)(3584 * v14[1])) >> 32) >> 12);
      *v21 = (8
            * ((((268439553 * (unint64_t)(3584 * v14[2])) >> 32) >> 12)
             + (((268439553 * (unint64_t)(3584 * *v14)) >> 32) >> 12))
            + 4104) & 0xFFF0;
      v21[1] = (8 * v36 + 4104) & 0xFFF0;
      v35 = v21 + 2;
    }
    else
    {
      v34 = v14;
      v35 = v21;
    }
    if (v22 != v10)
    {
      v37 = 0;
      do
      {
        v38 = &v35[v37];
        v39 = (((268439553 * (unint64_t)(3584 * v34[3])) >> 32) >> 12)
            + (((268439553 * (unint64_t)(3584 * v34[1])) >> 32) >> 12);
        *v38 = (8
              * (((268439553 * (unint64_t)(3584 * v34[2])) >> 44)
               + (((268439553 * (unint64_t)(3584 * *v34)) >> 32) >> 12))
              + 4104) & 0xFFF0;
        v38[1] = (8 * v39 + 4104) & 0xFFF0;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v9 - v31;
    do
    {
      v42 = v14;
      v43 = v21;
      if ((v32 & 1) != 0)
      {
        v42 = v14 + 4;
        v44 = (((268439553 * (unint64_t)(3584 * v14[3])) >> 32) >> 12)
            + (((268439553 * (unint64_t)(3584 * v14[1])) >> 32) >> 12);
        *v21 = (8
              * (((268439553 * (unint64_t)(3584 * v14[2])) >> 44)
               + (((268439553 * (unint64_t)(3584 * *v14)) >> 32) >> 12))
              + 4104) & 0xFFF0;
        v21[1] = (8 * v44 + 4104) & 0xFFF0;
        v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        v45 = 0;
        do
        {
          v46 = &v43[v45];
          v47 = (((268439553 * (unint64_t)(3584 * v42[3])) >> 32) >> 12)
              + (((268439553 * (unint64_t)(3584 * v42[1])) >> 32) >> 12);
          *v46 = (8
                * (((268439553 * (unint64_t)(3584 * v42[2])) >> 44)
                 + (((268439553 * (unint64_t)(3584 * *v42)) >> 32) >> 12))
                + 4104) & 0xFFF0;
          v46[1] = (8 * v47 + 4104) & 0xFFF0;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if ((v32 & 1) != 0)
    {
      v48 = *v14;
      v49 = v14[1];
      v50 = v14[2];
      v51 = v14[3];
      v14 += 4;
      *v21 = (8
            * ((((268439553 * (unint64_t)(3584 * v50)) >> 32) >> 12)
             + (((268439553 * (unint64_t)(3584 * v48)) >> 32) >> 12))
            + 4104) & 0xFFF0;
      v21[1] = (8
              * ((((268439553 * (unint64_t)(3584 * v51)) >> 32) >> 12)
               + (((268439553 * (unint64_t)(3584 * v49)) >> 32) >> 12))
              + 4104) & 0xFFF0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v52 = 0;
      do
      {
        v53 = &v21[v52];
        v54 = (((268439553 * (unint64_t)(3584 * v14[3])) >> 32) >> 12)
            + (((268439553 * (unint64_t)(3584 * v14[1])) >> 32) >> 12);
        *v53 = (8
              * (((268439553 * (unint64_t)(3584 * v14[2])) >> 44)
               + (((268439553 * (unint64_t)(3584 * *v14)) >> 32) >> 12))
              + 4104) & 0xFFF0;
        v53[1] = (8 * v54 + 4104) & 0xFFF0;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_sf44_tv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unsigned __int16 *v34;
  _WORD *v35;
  int v36;
  unint64_t v37;
  _WORD *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int16 *v42;
  _WORD *v43;
  int v44;
  unint64_t v45;
  _WORD *v46;
  unint64_t v47;
  int v48;
  int v49;
  unint64_t v50;
  _WORD *v51;
  unint64_t v52;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = *a7 + *a8 * v18 + v19;
    v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = 16
                                  * (((268439553
                                                   * (unint64_t)(3504
                                                                      * *(unsigned __int16 *)(v28 + 2 * i))) >> 32) >> 12)
                                  + 4096;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  v30 = v12 & 1;
  if (v9 >= v30)
    v31 = v12 & 1;
  else
    v31 = 0;
  v32 = v8;
  if (v22 < v10)
    v10 = 0;
  v33 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v36 = v14[1];
      v34 = v14 + 4;
      *v21 = 16 * (((268439553 * (unint64_t)(3584 * *v14)) >> 32) >> 12) + 4096;
      v21[1] = 16 * ((268439553 * (unint64_t)(3584 * v36)) >> 44) + 4096;
      v35 = v21 + 2;
    }
    else
    {
      v34 = v14;
      v35 = v21;
    }
    if (v22 != v10)
    {
      v37 = 0;
      do
      {
        v38 = &v35[v37];
        v39 = (268439553 * (unint64_t)(3584 * v34[1])) >> 44;
        *v38 = 16 * (((268439553 * (unint64_t)(3584 * *v34)) >> 32) >> 12) + 4096;
        v38[1] = 16 * v39 + 4096;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v9 - v31;
    do
    {
      v42 = v14;
      v43 = v21;
      if ((v32 & 1) != 0)
      {
        v44 = v14[1];
        v42 = v14 + 4;
        *v21 = 16 * (((268439553 * (unint64_t)(3584 * *v14)) >> 32) >> 12) + 4096;
        v21[1] = 16 * ((268439553 * (unint64_t)(3584 * v44)) >> 44) + 4096;
        v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        v45 = 0;
        do
        {
          v46 = &v43[v45];
          v47 = (268439553 * (unint64_t)(3584 * v42[1])) >> 44;
          *v46 = 16 * (((268439553 * (unint64_t)(3584 * *v42)) >> 32) >> 12) + 4096;
          v46[1] = 16 * v47 + 4096;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if ((v32 & 1) != 0)
    {
      v48 = *v14;
      v49 = v14[1];
      v14 += 4;
      *v21 = 16 * (((268439553 * (unint64_t)(3584 * v48)) >> 32) >> 12) + 4096;
      v21[1] = 16 * ((268439553 * (unint64_t)(3584 * v49)) >> 44) + 4096;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v50 = 0;
      do
      {
        v51 = &v21[v50];
        v52 = (268439553 * (unint64_t)(3584 * v14[1])) >> 44;
        *v51 = 16 * (((268439553 * (unint64_t)(3584 * *v14)) >> 32) >> 12) + 4096;
        v51[1] = 16 * v52 + 4096;
        v50 += 2;
        v14 += 4;
      }
      while (v50 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sf44_tf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unsigned __int16 *v34;
  _WORD *v35;
  unsigned int v36;
  unint64_t v37;
  _WORD *v38;
  unsigned int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int16 *v42;
  _WORD *v43;
  unsigned int v44;
  unint64_t v45;
  _WORD *v46;
  unsigned int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  unint64_t v52;
  _WORD *v53;
  unsigned int v54;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = *a7 + *a8 * v18 + v19;
    v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = 16
                                  * (((268439553
                                                   * (unint64_t)(4095
                                                                      * *(unsigned __int16 *)(v28 + 2 * i))) >> 32) >> 12);
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  v30 = v12 & 1;
  if (v9 >= v30)
    v31 = v12 & 1;
  else
    v31 = 0;
  v32 = v8;
  if (v22 < v10)
    v10 = 0;
  v33 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v34 = v14 + 4;
      v36 = (((268439553 * (unint64_t)(4095 * v14[3])) >> 32) >> 12)
          + (((268439553 * (unint64_t)(4095 * v14[1])) >> 32) >> 12);
      *v21 = (8
            * (((268439553 * (unint64_t)(4095 * v14[2])) >> 44)
             + (((268439553 * (unint64_t)(4095 * *v14)) >> 32) >> 12))
            + 8) & 0xFFF0;
      v21[1] = (8 * v36 + 8) & 0xFFF0;
      v35 = v21 + 2;
    }
    else
    {
      v34 = v14;
      v35 = v21;
    }
    if (v22 != v10)
    {
      v37 = 0;
      do
      {
        v38 = &v35[v37];
        v39 = (((268439553 * (unint64_t)(4095 * v34[3])) >> 32) >> 12)
            + (((268439553 * (unint64_t)(4095 * v34[1])) >> 32) >> 12);
        *v38 = (8
              * (((268439553 * (unint64_t)(4095 * v34[2])) >> 44)
               + (((268439553 * (unint64_t)(4095 * *v34)) >> 32) >> 12))
              + 8) & 0xFFF0;
        v38[1] = (8 * v39 + 8) & 0xFFF0;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v9 - v31;
    do
    {
      v42 = v14;
      v43 = v21;
      if ((v32 & 1) != 0)
      {
        v42 = v14 + 4;
        v44 = (((268439553 * (unint64_t)(4095 * v14[3])) >> 32) >> 12)
            + (((268439553 * (unint64_t)(4095 * v14[1])) >> 32) >> 12);
        *v21 = (8
              * (((268439553 * (unint64_t)(4095 * v14[2])) >> 44)
               + (((268439553 * (unint64_t)(4095 * *v14)) >> 32) >> 12))
              + 8) & 0xFFF0;
        v21[1] = (8 * v44 + 8) & 0xFFF0;
        v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        v45 = 0;
        do
        {
          v46 = &v43[v45];
          v47 = (((268439553 * (unint64_t)(4095 * v42[3])) >> 32) >> 12)
              + (((268439553 * (unint64_t)(4095 * v42[1])) >> 32) >> 12);
          *v46 = (8
                * (((268439553 * (unint64_t)(4095 * v42[2])) >> 44)
                 + (((268439553 * (unint64_t)(4095 * *v42)) >> 32) >> 12))
                + 8) & 0xFFF0;
          v46[1] = (8 * v47 + 8) & 0xFFF0;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if ((v32 & 1) != 0)
    {
      v48 = *v14;
      v49 = v14[1];
      v50 = v14[2];
      v51 = v14[3];
      v14 += 4;
      *v21 = (8
            * (((268439553 * (unint64_t)(4095 * v50)) >> 44)
             + (((268439553 * (unint64_t)(4095 * v48)) >> 32) >> 12))
            + 8) & 0xFFF0;
      v21[1] = (8
              * ((((268439553 * (unint64_t)(4095 * v51)) >> 32) >> 12)
               + (((268439553 * (unint64_t)(4095 * v49)) >> 32) >> 12))
              + 8) & 0xFFF0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v52 = 0;
      do
      {
        v53 = &v21[v52];
        v54 = (((268439553 * (unint64_t)(4095 * v14[3])) >> 32) >> 12)
            + (((268439553 * (unint64_t)(4095 * v14[1])) >> 32) >> 12);
        *v53 = (8
              * (((268439553 * (unint64_t)(4095 * v14[2])) >> 44)
               + (((268439553 * (unint64_t)(4095 * *v14)) >> 32) >> 12))
              + 8) & 0xFFF0;
        v53[1] = (8 * v54 + 8) & 0xFFF0;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_sf44_tf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unsigned __int16 *v34;
  _WORD *v35;
  int v36;
  unint64_t v37;
  _WORD *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int16 *v42;
  _WORD *v43;
  int v44;
  unint64_t v45;
  _WORD *v46;
  unint64_t v47;
  int v48;
  int v49;
  unint64_t v50;
  _WORD *v51;
  unint64_t v52;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = *a7 + *a8 * v18 + v19;
    v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = 16
                                  * (((268439553
                                                   * (unint64_t)(4095
                                                                      * *(unsigned __int16 *)(v28 + 2 * i))) >> 32) >> 12);
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  v30 = v12 & 1;
  if (v9 >= v30)
    v31 = v12 & 1;
  else
    v31 = 0;
  v32 = v8;
  if (v22 < v10)
    v10 = 0;
  v33 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v36 = v14[1];
      v34 = v14 + 4;
      *v21 = 16 * (((268439553 * (unint64_t)(4095 * *v14)) >> 32) >> 12);
      v21[1] = 16 * ((268439553 * (unint64_t)(4095 * v36)) >> 44);
      v35 = v21 + 2;
    }
    else
    {
      v34 = v14;
      v35 = v21;
    }
    if (v22 != v10)
    {
      v37 = 0;
      do
      {
        v38 = &v35[v37];
        v39 = (268439553 * (unint64_t)(4095 * v34[1])) >> 44;
        *v38 = 16 * (((268439553 * (unint64_t)(4095 * *v34)) >> 32) >> 12);
        v38[1] = 16 * v39;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v9 - v31;
    do
    {
      v42 = v14;
      v43 = v21;
      if ((v32 & 1) != 0)
      {
        v44 = v14[1];
        v42 = v14 + 4;
        *v21 = 16 * (((268439553 * (unint64_t)(4095 * *v14)) >> 32) >> 12);
        v21[1] = 16 * ((268439553 * (unint64_t)(4095 * v44)) >> 44);
        v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        v45 = 0;
        do
        {
          v46 = &v43[v45];
          v47 = (268439553 * (unint64_t)(4095 * v42[1])) >> 44;
          *v46 = 16 * (((268439553 * (unint64_t)(4095 * *v42)) >> 32) >> 12);
          v46[1] = 16 * v47;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if ((v32 & 1) != 0)
    {
      v48 = *v14;
      v49 = v14[1];
      v14 += 4;
      *v21 = 16 * (((268439553 * (unint64_t)(4095 * v48)) >> 32) >> 12);
      v21[1] = 16 * ((268439553 * (unint64_t)(4095 * v49)) >> 44);
      v21 += 2;
    }
    if (v22 != v10)
    {
      v50 = 0;
      do
      {
        v51 = &v21[v50];
        v52 = (268439553 * (unint64_t)(4095 * v14[1])) >> 44;
        *v51 = 16 * (((268439553 * (unint64_t)(4095 * *v14)) >> 32) >> 12);
        v51[1] = 16 * v52;
        v50 += 2;
        v14 += 4;
      }
      while (v50 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sf44_tv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  unint64_t v36;
  unsigned __int16 *v37;
  _WORD *v38;
  unsigned __int16 *v39;
  int v40;
  int v41;
  unsigned int v42;
  unint64_t v43;
  unsigned __int16 *v44;
  _WORD *v45;
  unsigned int v46;
  unint64_t v47;
  unint64_t v48;
  unsigned __int16 *v49;
  _WORD *v50;
  unsigned __int16 *v51;
  int v52;
  int v53;
  unsigned int v54;
  unint64_t v55;
  unsigned __int16 *v56;
  _WORD *v57;
  unsigned int v58;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = (v8 & 1) + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = a4[1];
  v15 = (unsigned __int16 *)(a3[1] + v14 * v12 + 4 * (v10 + v9));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = 2 * v16;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v23 = v11 - (v10 + v9);
  v24 = v17 - v16;
  if (v23 >= v24)
    v23 = v24;
  v25 = v13 - v12;
  v26 = v19 - v18;
  if (v25 < v19 - v18)
    v26 = v25;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v12 + 2 * (v10 + v9);
    if (v12 >= v8)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v31;
    v33 = *a7 + v29 * v18 + v20;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
          *(_WORD *)(v33 + 2 * i) = 16
                                  * (((268439553
                                                   * (unint64_t)(3504
                                                                      * *(unsigned __int16 *)(v32 + 2 * i))) >> 32) >> 12)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1))
    v35 = v8 & 1;
  else
    v35 = 0;
  if (v23 < v10)
    v10 = 0;
  v36 = v23 - v10;
  if ((v8 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v39 = (unsigned __int16 *)((char *)v15 + v14 + 4);
      v40 = *v39;
      v41 = v39[1];
      v37 = v15 + 4;
      v42 = (((268439553
                           * (unint64_t)(3584 * *(unsigned __int16 *)((char *)v15 + v14 + 2))) >> 32) >> 12)
          + (((268439553 * (unint64_t)(3584 * v15[1])) >> 32) >> 12)
          + (((268439553 * (unint64_t)(3584 * v15[3])) >> 32) >> 12)
          + (((268439553 * (unint64_t)(3584 * v41)) >> 32) >> 12);
      *v22 = (4
            * ((((268439553
                              * (unint64_t)(3584 * *(unsigned __int16 *)((char *)v15 + v14))) >> 32) >> 12)
             + (((268439553 * (unint64_t)(3584 * *v15)) >> 32) >> 12)
             + ((268439553 * (unint64_t)(3584 * v15[2])) >> 44)
             + ((268439553 * (unint64_t)(3584 * v40)) >> 44))
            + 4104) & 0xFFF0;
      v22[1] = (4 * v42 + 4104) & 0xFFF0;
      v38 = v22 + 2;
    }
    else
    {
      v37 = v15;
      v38 = v22;
    }
    if (v23 != v10)
    {
      v43 = 0;
      v44 = v37 + 2;
      do
      {
        v45 = &v38[v43];
        v46 = (((268439553
                             * (unint64_t)(3584 * *(unsigned __int16 *)((char *)v44 + v14 - 2))) >> 32) >> 12)
            + (((268439553 * (unint64_t)(3584 * *(v44 - 1))) >> 32) >> 12)
            + (((268439553 * (unint64_t)(3584 * v44[1])) >> 32) >> 12)
            + (((268439553
                             * (unint64_t)(3584 * *(unsigned __int16 *)((char *)v44 + v14 + 2))) >> 32) >> 12);
        *v45 = (4
              * (((268439553 * (unint64_t)(3584 * *(unsigned __int16 *)((char *)v44 + v14 - 4))) >> 44)
               + (((268439553 * (unint64_t)(3584 * *(v44 - 2))) >> 32) >> 12)
               + ((268439553 * (unint64_t)(3584 * *v44)) >> 44)
               + ((268439553 * (unint64_t)(3584 * *(unsigned __int16 *)((char *)v44 + v14))) >> 44))
              + 4104) & 0xFFF0;
        v45[1] = (4 * v46 + 4104) & 0xFFF0;
        v43 += 2;
        v44 += 4;
      }
      while (v43 < v36);
    }
    v15 += v14;
    v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v26 != v35)
  {
    v47 = 0;
    v48 = v26 - v35;
    do
    {
      v49 = v15;
      v50 = v22;
      if ((v9 & 1) != 0)
      {
        v51 = (unsigned __int16 *)((char *)v15 + v14 + 4);
        v52 = *v51;
        v53 = v51[1];
        v49 = v15 + 4;
        v54 = (((268439553
                             * (unint64_t)(3584 * *(unsigned __int16 *)((char *)v15 + v14 + 2))) >> 32) >> 12)
            + (((268439553 * (unint64_t)(3584 * v15[1])) >> 32) >> 12)
            + (((268439553 * (unint64_t)(3584 * v15[3])) >> 32) >> 12)
            + (((268439553 * (unint64_t)(3584 * v53)) >> 32) >> 12);
        *v22 = (4
              * (((268439553 * (unint64_t)(3584 * *(unsigned __int16 *)((char *)v15 + v14))) >> 44)
               + (((268439553 * (unint64_t)(3584 * *v15)) >> 32) >> 12)
               + ((268439553 * (unint64_t)(3584 * v15[2])) >> 44)
               + ((268439553 * (unint64_t)(3584 * v52)) >> 44))
              + 4104) & 0xFFF0;
        v22[1] = (4 * v54 + 4104) & 0xFFF0;
        v50 = v22 + 2;
      }
      if (v23 != v10)
      {
        v55 = 0;
        v56 = v49 + 2;
        do
        {
          v57 = &v50[v55];
          v58 = (((268439553
                               * (unint64_t)(3584 * *(unsigned __int16 *)((char *)v56 + v14 - 2))) >> 32) >> 12)
              + (((268439553 * (unint64_t)(3584 * *(v56 - 1))) >> 32) >> 12)
              + (((268439553 * (unint64_t)(3584 * v56[1])) >> 32) >> 12)
              + (((268439553
                               * (unint64_t)(3584 * *(unsigned __int16 *)((char *)v56 + v14 + 2))) >> 32) >> 12);
          *v57 = (4
                * (((268439553 * (unint64_t)(3584 * *(unsigned __int16 *)((char *)v56 + v14 - 4))) >> 44)
                 + (((268439553 * (unint64_t)(3584 * *(v56 - 2))) >> 32) >> 12)
                 + ((268439553 * (unint64_t)(3584 * *v56)) >> 44)
                 + ((268439553 * (unint64_t)(3584 * *(unsigned __int16 *)((char *)v56 + v14))) >> 44))
                + 4104) & 0xFFF0;
          v57[1] = (4 * v58 + 4104) & 0xFFF0;
          v55 += 2;
          v56 += 4;
        }
        while (v55 < v36);
      }
      v15 += v14;
      v22 = (_WORD *)((char *)v22 + v21);
      v47 += 2;
    }
    while (v47 < v48);
  }
  return 0;
}

uint64_t vt_CopyDec_sf44_tv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  unint64_t v36;
  unsigned __int16 *v37;
  _WORD *v38;
  int v39;
  unint64_t v40;
  _WORD *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unsigned __int16 *v46;
  _WORD *v47;
  int v48;
  unint64_t v49;
  _WORD *v50;
  unint64_t v51;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = (v8 & 1) + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = a4[1];
  v15 = (unsigned __int16 *)(a3[1] + v14 * v12 + 4 * (v10 + v9));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = 2 * v16;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v23 = v11 - (v10 + v9);
  v24 = v17 - v16;
  if (v23 >= v24)
    v23 = v24;
  v25 = v13 - v12;
  v26 = v19 - v18;
  if (v25 < v19 - v18)
    v26 = v25;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v12 + 2 * (v10 + v9);
    if (v12 >= v8)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v31;
    v33 = *a7 + v29 * v18 + v20;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
          *(_WORD *)(v33 + 2 * i) = 16
                                  * (((268439553
                                                   * (unint64_t)(3504
                                                                      * *(unsigned __int16 *)(v32 + 2 * i))) >> 32) >> 12)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1))
    v35 = v8 & 1;
  else
    v35 = 0;
  if (v23 < v10)
    v10 = 0;
  v36 = v23 - v10;
  if ((v8 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v39 = v15[1];
      v37 = v15 + 4;
      *v22 = 16 * (((268439553 * (unint64_t)(3584 * *v15)) >> 32) >> 12) + 4096;
      v22[1] = 16 * ((268439553 * (unint64_t)(3584 * v39)) >> 44) + 4096;
      v38 = v22 + 2;
    }
    else
    {
      v37 = v15;
      v38 = v22;
    }
    if (v23 != v10)
    {
      v40 = 0;
      do
      {
        v41 = &v38[v40];
        v42 = (268439553 * (unint64_t)(3584 * v37[1])) >> 44;
        *v41 = 16 * (((268439553 * (unint64_t)(3584 * *v37)) >> 32) >> 12) + 4096;
        v41[1] = 16 * v42 + 4096;
        v40 += 2;
        v37 += 4;
      }
      while (v40 < v36);
    }
    v15 += v14;
    v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v26 != v35)
  {
    v43 = 0;
    v44 = v26 - v35;
    v45 = 2 * v14;
    do
    {
      v46 = v15;
      v47 = v22;
      if ((v9 & 1) != 0)
      {
        v48 = v15[1];
        v46 = v15 + 4;
        *v22 = 16 * (((268439553 * (unint64_t)(3584 * *v15)) >> 32) >> 12) + 4096;
        v22[1] = 16 * ((268439553 * (unint64_t)(3584 * v48)) >> 44) + 4096;
        v47 = v22 + 2;
      }
      if (v23 != v10)
      {
        v49 = 0;
        do
        {
          v50 = &v47[v49];
          v51 = (268439553 * (unint64_t)(3584 * v46[1])) >> 44;
          *v50 = 16 * (((268439553 * (unint64_t)(3584 * *v46)) >> 32) >> 12) + 4096;
          v50[1] = 16 * v51 + 4096;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v36);
      }
      v15 = (unsigned __int16 *)((char *)v15 + v45);
      v22 = (_WORD *)((char *)v22 + v21);
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_CopyAvg_sf44_tf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  unint64_t v36;
  unsigned __int16 *v37;
  _WORD *v38;
  unsigned __int16 *v39;
  int v40;
  int v41;
  unsigned int v42;
  unint64_t v43;
  unsigned __int16 *v44;
  _WORD *v45;
  unsigned int v46;
  unint64_t v47;
  unint64_t v48;
  unsigned __int16 *v49;
  _WORD *v50;
  unsigned __int16 *v51;
  int v52;
  int v53;
  unsigned int v54;
  unint64_t v55;
  unsigned __int16 *v56;
  _WORD *v57;
  unsigned int v58;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = (v8 & 1) + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = a4[1];
  v15 = (unsigned __int16 *)(a3[1] + v14 * v12 + 4 * (v10 + v9));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = 2 * v16;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v23 = v11 - (v10 + v9);
  v24 = v17 - v16;
  if (v23 >= v24)
    v23 = v24;
  v25 = v13 - v12;
  v26 = v19 - v18;
  if (v25 < v19 - v18)
    v26 = v25;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v12 + 2 * (v10 + v9);
    if (v12 >= v8)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v31;
    v33 = *a7 + v29 * v18 + v20;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
          *(_WORD *)(v33 + 2 * i) = 16
                                  * (((268439553
                                                   * (unint64_t)(4095
                                                                      * *(unsigned __int16 *)(v32 + 2 * i))) >> 32) >> 12);
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1))
    v35 = v8 & 1;
  else
    v35 = 0;
  if (v23 < v10)
    v10 = 0;
  v36 = v23 - v10;
  if ((v8 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v39 = (unsigned __int16 *)((char *)v15 + v14 + 4);
      v40 = *v39;
      v41 = v39[1];
      v37 = v15 + 4;
      v42 = (((268439553
                           * (unint64_t)(4095 * *(unsigned __int16 *)((char *)v15 + v14 + 2))) >> 32) >> 12)
          + (((268439553 * (unint64_t)(4095 * v15[1])) >> 32) >> 12)
          + (((268439553 * (unint64_t)(4095 * v15[3])) >> 32) >> 12)
          + (((268439553 * (unint64_t)(4095 * v41)) >> 32) >> 12);
      *v22 = (4
            * (((268439553 * (unint64_t)(4095 * *(unsigned __int16 *)((char *)v15 + v14))) >> 44)
             + (((268439553 * (unint64_t)(4095 * *v15)) >> 32) >> 12)
             + ((268439553 * (unint64_t)(4095 * v15[2])) >> 44)
             + ((268439553 * (unint64_t)(4095 * v40)) >> 44))
            + 8) & 0xFFF0;
      v22[1] = (4 * v42 + 8) & 0xFFF0;
      v38 = v22 + 2;
    }
    else
    {
      v37 = v15;
      v38 = v22;
    }
    if (v23 != v10)
    {
      v43 = 0;
      v44 = v37 + 2;
      do
      {
        v45 = &v38[v43];
        v46 = (((268439553
                             * (unint64_t)(4095 * *(unsigned __int16 *)((char *)v44 + v14 - 2))) >> 32) >> 12)
            + (((268439553 * (unint64_t)(4095 * *(v44 - 1))) >> 32) >> 12)
            + (((268439553 * (unint64_t)(4095 * v44[1])) >> 32) >> 12)
            + (((268439553
                             * (unint64_t)(4095 * *(unsigned __int16 *)((char *)v44 + v14 + 2))) >> 32) >> 12);
        *v45 = (4
              * (((268439553 * (unint64_t)(4095 * *(unsigned __int16 *)((char *)v44 + v14 - 4))) >> 44)
               + (((268439553 * (unint64_t)(4095 * *(v44 - 2))) >> 32) >> 12)
               + ((268439553 * (unint64_t)(4095 * *v44)) >> 44)
               + ((268439553 * (unint64_t)(4095 * *(unsigned __int16 *)((char *)v44 + v14))) >> 44))
              + 8) & 0xFFF0;
        v45[1] = (4 * v46 + 8) & 0xFFF0;
        v43 += 2;
        v44 += 4;
      }
      while (v43 < v36);
    }
    v15 += v14;
    v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v26 != v35)
  {
    v47 = 0;
    v48 = v26 - v35;
    do
    {
      v49 = v15;
      v50 = v22;
      if ((v9 & 1) != 0)
      {
        v51 = (unsigned __int16 *)((char *)v15 + v14 + 4);
        v52 = *v51;
        v53 = v51[1];
        v49 = v15 + 4;
        v54 = (((268439553
                             * (unint64_t)(4095 * *(unsigned __int16 *)((char *)v15 + v14 + 2))) >> 32) >> 12)
            + (((268439553 * (unint64_t)(4095 * v15[1])) >> 32) >> 12)
            + (((268439553 * (unint64_t)(4095 * v15[3])) >> 32) >> 12)
            + (((268439553 * (unint64_t)(4095 * v53)) >> 32) >> 12);
        *v22 = (4
              * (((268439553 * (unint64_t)(4095 * *(unsigned __int16 *)((char *)v15 + v14))) >> 44)
               + (((268439553 * (unint64_t)(4095 * *v15)) >> 32) >> 12)
               + ((268439553 * (unint64_t)(4095 * v15[2])) >> 44)
               + ((268439553 * (unint64_t)(4095 * v52)) >> 44))
              + 8) & 0xFFF0;
        v22[1] = (4 * v54 + 8) & 0xFFF0;
        v50 = v22 + 2;
      }
      if (v23 != v10)
      {
        v55 = 0;
        v56 = v49 + 2;
        do
        {
          v57 = &v50[v55];
          v58 = (((268439553
                               * (unint64_t)(4095 * *(unsigned __int16 *)((char *)v56 + v14 - 2))) >> 32) >> 12)
              + (((268439553 * (unint64_t)(4095 * *(v56 - 1))) >> 32) >> 12)
              + (((268439553 * (unint64_t)(4095 * v56[1])) >> 32) >> 12)
              + (((268439553
                               * (unint64_t)(4095 * *(unsigned __int16 *)((char *)v56 + v14 + 2))) >> 32) >> 12);
          *v57 = (4
                * (((268439553 * (unint64_t)(4095 * *(unsigned __int16 *)((char *)v56 + v14 - 4))) >> 44)
                 + (((268439553 * (unint64_t)(4095 * *(v56 - 2))) >> 32) >> 12)
                 + ((268439553 * (unint64_t)(4095 * *v56)) >> 44)
                 + ((268439553 * (unint64_t)(4095 * *(unsigned __int16 *)((char *)v56 + v14))) >> 44))
                + 8) & 0xFFF0;
          v57[1] = (4 * v58 + 8) & 0xFFF0;
          v55 += 2;
          v56 += 4;
        }
        while (v55 < v36);
      }
      v15 += v14;
      v22 = (_WORD *)((char *)v22 + v21);
      v47 += 2;
    }
    while (v47 < v48);
  }
  return 0;
}

uint64_t vt_CopyDec_sf44_tf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  unint64_t v36;
  unsigned __int16 *v37;
  _WORD *v38;
  int v39;
  unint64_t v40;
  _WORD *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unsigned __int16 *v46;
  _WORD *v47;
  int v48;
  unint64_t v49;
  _WORD *v50;
  unint64_t v51;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = (v8 & 1) + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = a4[1];
  v15 = (unsigned __int16 *)(a3[1] + v14 * v12 + 4 * (v10 + v9));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = 2 * v16;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v23 = v11 - (v10 + v9);
  v24 = v17 - v16;
  if (v23 >= v24)
    v23 = v24;
  v25 = v13 - v12;
  v26 = v19 - v18;
  if (v25 < v19 - v18)
    v26 = v25;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v12 + 2 * (v10 + v9);
    if (v12 >= v8)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v31;
    v33 = *a7 + v29 * v18 + v20;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
          *(_WORD *)(v33 + 2 * i) = 16
                                  * (((268439553
                                                   * (unint64_t)(4095
                                                                      * *(unsigned __int16 *)(v32 + 2 * i))) >> 32) >> 12);
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1))
    v35 = v8 & 1;
  else
    v35 = 0;
  if (v23 < v10)
    v10 = 0;
  v36 = v23 - v10;
  if ((v8 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v39 = v15[1];
      v37 = v15 + 4;
      *v22 = 16 * (((268439553 * (unint64_t)(4095 * *v15)) >> 32) >> 12);
      v22[1] = 16 * ((268439553 * (unint64_t)(4095 * v39)) >> 44);
      v38 = v22 + 2;
    }
    else
    {
      v37 = v15;
      v38 = v22;
    }
    if (v23 != v10)
    {
      v40 = 0;
      do
      {
        v41 = &v38[v40];
        v42 = (268439553 * (unint64_t)(4095 * v37[1])) >> 44;
        *v41 = 16 * (((268439553 * (unint64_t)(4095 * *v37)) >> 32) >> 12);
        v41[1] = 16 * v42;
        v40 += 2;
        v37 += 4;
      }
      while (v40 < v36);
    }
    v15 += v14;
    v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v26 != v35)
  {
    v43 = 0;
    v44 = v26 - v35;
    v45 = 2 * v14;
    do
    {
      v46 = v15;
      v47 = v22;
      if ((v9 & 1) != 0)
      {
        v48 = v15[1];
        v46 = v15 + 4;
        *v22 = 16 * (((268439553 * (unint64_t)(4095 * *v15)) >> 32) >> 12);
        v22[1] = 16 * ((268439553 * (unint64_t)(4095 * v48)) >> 44);
        v47 = v22 + 2;
      }
      if (v23 != v10)
      {
        v49 = 0;
        do
        {
          v50 = &v47[v49];
          v51 = (268439553 * (unint64_t)(4095 * v46[1])) >> 44;
          *v50 = 16 * (((268439553 * (unint64_t)(4095 * *v46)) >> 32) >> 12);
          v50[1] = 16 * v51;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v36);
      }
      v15 = (unsigned __int16 *)((char *)v15 + v45);
      v22 = (_WORD *)((char *)v22 + v21);
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_Copy_sf44_x4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned __int16 *v32;
  _WORD *v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  unsigned __int16 *v43;
  _WORD *v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  unint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a4[1];
  v12 = (unsigned __int16 *)(a3[1] + v11 * v8 + 4 * v9);
  v13 = a6[4];
  v14 = a6[5];
  v15 = a8[1];
  v16 = (_WORD *)(a7[1] + v15 * v14 + 4 * v13);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (a2[3] >= a6[3])
    v17 = a6[3];
  else
    v17 = a2[3];
  if (v17)
  {
    v18 = 0;
    v19 = *a4;
    v20 = *a8;
    v21 = a8[2];
    v22 = a7[2] + v21 * v14 + 2 * v13;
    v23 = *a7 + *a8 * v14 + 2 * v13;
    v24 = *a3 + v19 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
        {
          *(_WORD *)(v22 + 2 * i) = -1;
          *(_WORD *)(v23 + 2 * i) = ((unsigned __int16)(((67109889
                                                                      * (unint64_t)(876
                                                                                         * *(unsigned __int16 *)(v24 + 2 * i))) >> 32) >> 10) << 6)
                                  + 4096;
        }
      }
      v24 += v19;
      v23 += v20;
      v22 += v21;
      ++v18;
    }
    while (v18 != v17);
  }
  v26 = v8 & 1;
  if (v17 >= v26)
    v27 = v8 & 1;
  else
    v27 = 0;
  v28 = v9;
  v29 = v9 & 1;
  if (v10 >= v29)
    v30 = v29;
  else
    v30 = 0;
  v31 = v10 - v30;
  if ((v8 & 1) != 0)
  {
    if ((v28 & 1) != 0)
    {
      v34 = v12[1];
      v32 = v12 + 2;
      *v16 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v12)) >> 32) >> 10) << 6)
           + 4096;
      v16[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v34)) >> 42) << 6) + 4096;
      v33 = v16 + 2;
    }
    else
    {
      v32 = v12;
      v33 = v16;
    }
    if (v10 == v30)
    {
      v35 = 0;
    }
    else
    {
      v36 = v10 - v30;
      do
      {
        v37 = *v32;
        v38 = v32[1];
        v32 += 2;
        *v33 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v37)) >> 32) >> 10) << 6)
             + 4096;
        v33[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v38)) >> 42) << 6) + 4096;
        v33 += 2;
        --v36;
      }
      while (v36);
      v35 = v10 - v30;
    }
    if (v35 + v29 < v10)
    {
      v39 = *v32;
      v40 = v32[1];
      *v33 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v39)) >> 32) >> 10) << 6)
           + 4096;
      v33[1] = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v40)) >> 32) >> 10) << 6)
             + 4096;
    }
    v12 = (unsigned __int16 *)((char *)v12 + v11);
    v16 = (_WORD *)((char *)v16 + v15);
  }
  if (v17 == v27)
  {
    v41 = 0;
  }
  else
  {
    v42 = 0;
    v41 = v17 - v27;
    do
    {
      v43 = v12;
      v44 = v16;
      if ((v28 & 1) != 0)
      {
        v45 = v12[1];
        v43 = v12 + 2;
        *v16 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v12)) >> 32) >> 10) << 6)
             + 4096;
        v16[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v45)) >> 42) << 6) + 4096;
        v44 = v16 + 2;
      }
      if (v10 == v30)
      {
        v46 = 0;
      }
      else
      {
        v47 = v10 - v30;
        do
        {
          v48 = *v43;
          v49 = v43[1];
          v43 += 2;
          *v44 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v48)) >> 32) >> 10) << 6)
               + 4096;
          v44[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v49)) >> 42) << 6) + 4096;
          v44 += 2;
          --v47;
        }
        while (v47);
        v46 = v10 - v30;
      }
      if (v46 + v29 < v10)
      {
        v50 = *v43;
        v51 = v43[1];
        *v44 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v50)) >> 32) >> 10) << 6)
             + 4096;
        v44[1] = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v51)) >> 32) >> 10) << 6)
               + 4096;
      }
      v12 = (unsigned __int16 *)((char *)v12 + v11);
      v16 = (_WORD *)((char *)v16 + v15);
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v26 < v17)
  {
    if ((v28 & 1) != 0)
    {
      v52 = *v12;
      v53 = v12[1];
      v12 += 2;
      *v16 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v52)) >> 32) >> 10) << 6)
           + 4096;
      v16[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v53)) >> 42) << 6) + 4096;
      v16 += 2;
    }
    if (v10 == v30)
    {
      v31 = 0;
    }
    else
    {
      v54 = v10 - v30;
      do
      {
        v55 = *v12;
        v56 = v12[1];
        v12 += 2;
        *v16 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v55)) >> 32) >> 10) << 6)
             + 4096;
        v16[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v56)) >> 42) << 6) + 4096;
        v16 += 2;
        --v54;
      }
      while (v54);
    }
    if (v31 + v29 < v10)
    {
      v57 = *v12;
      v58 = v12[1];
      *v16 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v57)) >> 32) >> 10) << 6)
           + 4096;
      v16[1] = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v58)) >> 32) >> 10) << 6)
             + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_sf44_x444(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  unint64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned __int16 *v31;
  _WORD *v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int16 *v42;
  _WORD *v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  unint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a2[3];
  v12 = a4[1];
  v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 4 * v9);
  v14 = a6[4];
  v15 = a6[5];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (v11 >= a6[3])
    v18 = a6[3];
  else
    v18 = v11;
  if (v18)
  {
    v19 = 0;
    v20 = *a4;
    v21 = *a8;
    v22 = *a7 + *a8 * v15 + 2 * v14;
    v23 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
          *(_WORD *)(v22 + 2 * i) = ((unsigned __int16)(((67109889
                                                                      * (unint64_t)(876
                                                                                         * *(unsigned __int16 *)(v23 + 2 * i))) >> 32) >> 10) << 6)
                                  + 4096;
      }
      v23 += v20;
      v22 += v21;
      ++v19;
    }
    while (v19 != v18);
  }
  v25 = v8 & 1;
  if (v18 >= v25)
    v26 = v8 & 1;
  else
    v26 = 0;
  v27 = v9;
  v28 = v9 & 1;
  if (v10 >= v28)
    v29 = v28;
  else
    v29 = 0;
  v30 = v10 - v29;
  if ((v8 & 1) != 0)
  {
    if ((v27 & 1) != 0)
    {
      v33 = v13[1];
      v31 = v13 + 2;
      *v17 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v13)) >> 32) >> 10) << 6)
           + 4096;
      v17[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v33)) >> 42) << 6) + 4096;
      v32 = v17 + 2;
    }
    else
    {
      v31 = v13;
      v32 = v17;
    }
    if (v10 == v29)
    {
      v34 = 0;
    }
    else
    {
      v35 = v10 - v29;
      do
      {
        v36 = *v31;
        v37 = v31[1];
        v31 += 2;
        *v32 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v36)) >> 32) >> 10) << 6)
             + 4096;
        v32[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v37)) >> 42) << 6) + 4096;
        v32 += 2;
        --v35;
      }
      while (v35);
      v34 = v10 - v29;
    }
    if (v34 + v28 < v10)
    {
      v38 = *v31;
      v39 = v31[1];
      *v32 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v38)) >> 32) >> 10) << 6)
           + 4096;
      v32[1] = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v39)) >> 32) >> 10) << 6)
             + 4096;
    }
    v13 = (unsigned __int16 *)((char *)v13 + v12);
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v18 == v26)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v18 - v26;
    do
    {
      v42 = v13;
      v43 = v17;
      if ((v27 & 1) != 0)
      {
        v44 = v13[1];
        v42 = v13 + 2;
        *v17 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v13)) >> 32) >> 10) << 6)
             + 4096;
        v17[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v44)) >> 42) << 6) + 4096;
        v43 = v17 + 2;
      }
      if (v10 == v29)
      {
        v45 = 0;
      }
      else
      {
        v46 = v10 - v29;
        do
        {
          v47 = *v42;
          v48 = v42[1];
          v42 += 2;
          *v43 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v47)) >> 32) >> 10) << 6)
               + 4096;
          v43[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v48)) >> 42) << 6) + 4096;
          v43 += 2;
          --v46;
        }
        while (v46);
        v45 = v10 - v29;
      }
      if (v45 + v28 < v10)
      {
        v49 = *v42;
        v50 = v42[1];
        *v43 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v49)) >> 32) >> 10) << 6)
             + 4096;
        v43[1] = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v50)) >> 32) >> 10) << 6)
               + 4096;
      }
      v13 = (unsigned __int16 *)((char *)v13 + v12);
      v17 = (_WORD *)((char *)v17 + v16);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v25 < v18)
  {
    if ((v27 & 1) != 0)
    {
      v51 = *v13;
      v52 = v13[1];
      v13 += 2;
      *v17 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v51)) >> 32) >> 10) << 6)
           + 4096;
      v17[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v52)) >> 42) << 6) + 4096;
      v17 += 2;
    }
    if (v10 == v29)
    {
      v30 = 0;
    }
    else
    {
      v53 = v10 - v29;
      do
      {
        v54 = *v13;
        v55 = v13[1];
        v13 += 2;
        *v17 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v54)) >> 32) >> 10) << 6)
             + 4096;
        v17[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v55)) >> 42) << 6) + 4096;
        v17 += 2;
        --v53;
      }
      while (v53);
    }
    if (v30 + v28 < v10)
    {
      v56 = *v13;
      v57 = v13[1];
      *v17 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v56)) >> 32) >> 10) << 6)
           + 4096;
      v17[1] = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v57)) >> 32) >> 10) << 6)
             + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_sf44_xf44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  unint64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned __int16 *v31;
  _WORD *v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int16 *v42;
  _WORD *v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  unint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a2[3];
  v12 = a4[1];
  v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 4 * v9);
  v14 = a6[4];
  v15 = a6[5];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (v11 >= a6[3])
    v18 = a6[3];
  else
    v18 = v11;
  if (v18)
  {
    v19 = 0;
    v20 = *a4;
    v21 = *a8;
    v22 = *a7 + *a8 * v15 + 2 * v14;
    v23 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
          *(_WORD *)(v22 + 2 * i) = (unsigned __int16)(((67109889
                                                                     * (unint64_t)(1023
                                                                                        * *(unsigned __int16 *)(v23 + 2 * i))) >> 32) >> 10) << 6;
      }
      v23 += v20;
      v22 += v21;
      ++v19;
    }
    while (v19 != v18);
  }
  v25 = v8 & 1;
  if (v18 >= v25)
    v26 = v8 & 1;
  else
    v26 = 0;
  v27 = v9;
  v28 = v9 & 1;
  if (v10 >= v28)
    v29 = v28;
  else
    v29 = 0;
  v30 = v10 - v29;
  if ((v8 & 1) != 0)
  {
    if ((v27 & 1) != 0)
    {
      v33 = v13[1];
      v31 = v13 + 2;
      *v17 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * *v13)) >> 32) >> 10) << 6;
      v17[1] = (unsigned __int16)((67109889 * (unint64_t)(1023 * v33)) >> 42) << 6;
      v32 = v17 + 2;
    }
    else
    {
      v31 = v13;
      v32 = v17;
    }
    if (v10 == v29)
    {
      v34 = 0;
    }
    else
    {
      v35 = v10 - v29;
      do
      {
        v36 = *v31;
        v37 = v31[1];
        v31 += 2;
        *v32 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * v36)) >> 32) >> 10) << 6;
        v32[1] = (unsigned __int16)((67109889 * (unint64_t)(1023 * v37)) >> 42) << 6;
        v32 += 2;
        --v35;
      }
      while (v35);
      v34 = v10 - v29;
    }
    if (v34 + v28 < v10)
    {
      v38 = *v31;
      v39 = v31[1];
      *v32 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * v38)) >> 32) >> 10) << 6;
      v32[1] = (unsigned __int16)(((67109889 * (unint64_t)(1023 * v39)) >> 32) >> 10) << 6;
    }
    v13 = (unsigned __int16 *)((char *)v13 + v12);
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v18 == v26)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v18 - v26;
    do
    {
      v42 = v13;
      v43 = v17;
      if ((v27 & 1) != 0)
      {
        v44 = v13[1];
        v42 = v13 + 2;
        *v17 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * *v13)) >> 32) >> 10) << 6;
        v17[1] = (unsigned __int16)((67109889 * (unint64_t)(1023 * v44)) >> 42) << 6;
        v43 = v17 + 2;
      }
      if (v10 == v29)
      {
        v45 = 0;
      }
      else
      {
        v46 = v10 - v29;
        do
        {
          v47 = *v42;
          v48 = v42[1];
          v42 += 2;
          *v43 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * v47)) >> 32) >> 10) << 6;
          v43[1] = (unsigned __int16)((67109889 * (unint64_t)(1023 * v48)) >> 42) << 6;
          v43 += 2;
          --v46;
        }
        while (v46);
        v45 = v10 - v29;
      }
      if (v45 + v28 < v10)
      {
        v49 = *v42;
        v50 = v42[1];
        *v43 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * v49)) >> 32) >> 10) << 6;
        v43[1] = (unsigned __int16)(((67109889 * (unint64_t)(1023 * v50)) >> 32) >> 10) << 6;
      }
      v13 = (unsigned __int16 *)((char *)v13 + v12);
      v17 = (_WORD *)((char *)v17 + v16);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v25 < v18)
  {
    if ((v27 & 1) != 0)
    {
      v51 = *v13;
      v52 = v13[1];
      v13 += 2;
      *v17 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * v51)) >> 32) >> 10) << 6;
      v17[1] = (unsigned __int16)((67109889 * (unint64_t)(1023 * v52)) >> 42) << 6;
      v17 += 2;
    }
    if (v10 == v29)
    {
      v30 = 0;
    }
    else
    {
      v53 = v10 - v29;
      do
      {
        v54 = *v13;
        v55 = v13[1];
        v13 += 2;
        *v17 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * v54)) >> 32) >> 10) << 6;
        v17[1] = (unsigned __int16)((67109889 * (unint64_t)(1023 * v55)) >> 42) << 6;
        v17 += 2;
        --v53;
      }
      while (v53);
    }
    if (v30 + v28 < v10)
    {
      v56 = *v13;
      v57 = v13[1];
      *v17 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * v56)) >> 32) >> 10) << 6;
      v17[1] = (unsigned __int16)(((67109889 * (unint64_t)(1023 * v57)) >> 32) >> 10) << 6;
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sf44_x2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  unsigned __int16 *v36;
  _WORD *v37;
  unsigned int v38;
  unint64_t v39;
  _WORD *v40;
  unsigned int v41;
  unint64_t v42;
  uint64_t v43;
  unsigned __int16 *v44;
  _WORD *v45;
  unsigned int v46;
  unint64_t v47;
  _WORD *v48;
  unsigned int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  unint64_t v54;
  _WORD *v55;
  unsigned int v56;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = a8[2];
    v28 = a7[2] + v27 * v18 + v19;
    v29 = *a7 + *a8 * v18 + v19;
    v30 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = ((unsigned __int16)(((67109889
                                                                      * (unint64_t)(876
                                                                                         * *(unsigned __int16 *)(v30 + 2 * i))) >> 32) >> 10) << 6)
                                  + 4096;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v9);
  }
  v32 = v12 & 1;
  if (v9 >= v32)
    v33 = v12 & 1;
  else
    v33 = 0;
  v34 = v8;
  if (v22 < v10)
    v10 = 0;
  v35 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v34 & 1) != 0)
    {
      v36 = v14 + 4;
      v38 = (((67109889 * (unint64_t)(896 * v14[3])) >> 32) >> 10)
          + (((67109889 * (unint64_t)(896 * v14[1])) >> 32) >> 10);
      *v21 = (32
            * ((((67109889 * (unint64_t)(896 * v14[2])) >> 32) >> 10)
             + (((67109889 * (unint64_t)(896 * *v14)) >> 32) >> 10))
            + 4128) & 0xFFC0;
      v21[1] = (32 * v38 + 4128) & 0xFFC0;
      v37 = v21 + 2;
    }
    else
    {
      v36 = v14;
      v37 = v21;
    }
    if (v22 != v10)
    {
      v39 = 0;
      do
      {
        v40 = &v37[v39];
        v41 = (((67109889 * (unint64_t)(896 * v36[3])) >> 32) >> 10)
            + (((67109889 * (unint64_t)(896 * v36[1])) >> 32) >> 10);
        *v40 = (32
              * (((67109889 * (unint64_t)(896 * v36[2])) >> 42)
               + (((67109889 * (unint64_t)(896 * *v36)) >> 32) >> 10))
              + 4128) & 0xFFC0;
        v40[1] = (32 * v41 + 4128) & 0xFFC0;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v33)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v9 - v33;
    do
    {
      v44 = v14;
      v45 = v21;
      if ((v34 & 1) != 0)
      {
        v44 = v14 + 4;
        v46 = (((67109889 * (unint64_t)(896 * v14[3])) >> 32) >> 10)
            + (((67109889 * (unint64_t)(896 * v14[1])) >> 32) >> 10);
        *v21 = (32
              * (((67109889 * (unint64_t)(896 * v14[2])) >> 42)
               + (((67109889 * (unint64_t)(896 * *v14)) >> 32) >> 10))
              + 4128) & 0xFFC0;
        v21[1] = (32 * v46 + 4128) & 0xFFC0;
        v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        v47 = 0;
        do
        {
          v48 = &v45[v47];
          v49 = (((67109889 * (unint64_t)(896 * v44[3])) >> 32) >> 10)
              + (((67109889 * (unint64_t)(896 * v44[1])) >> 32) >> 10);
          *v48 = (32
                * (((67109889 * (unint64_t)(896 * v44[2])) >> 42)
                 + (((67109889 * (unint64_t)(896 * *v44)) >> 32) >> 10))
                + 4128) & 0xFFC0;
          v48[1] = (32 * v49 + 4128) & 0xFFC0;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v9)
  {
    if ((v34 & 1) != 0)
    {
      v50 = *v14;
      v51 = v14[1];
      v52 = v14[2];
      v53 = v14[3];
      v14 += 4;
      *v21 = (32
            * ((((67109889 * (unint64_t)(896 * v52)) >> 32) >> 10)
             + (((67109889 * (unint64_t)(896 * v50)) >> 32) >> 10))
            + 4128) & 0xFFC0;
      v21[1] = (32
              * ((((67109889 * (unint64_t)(896 * v53)) >> 32) >> 10)
               + (((67109889 * (unint64_t)(896 * v51)) >> 32) >> 10))
              + 4128) & 0xFFC0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v54 = 0;
      do
      {
        v55 = &v21[v54];
        v56 = (((67109889 * (unint64_t)(896 * v14[3])) >> 32) >> 10)
            + (((67109889 * (unint64_t)(896 * v14[1])) >> 32) >> 10);
        *v55 = (32
              * (((67109889 * (unint64_t)(896 * v14[2])) >> 42)
               + (((67109889 * (unint64_t)(896 * *v14)) >> 32) >> 10))
              + 4128) & 0xFFC0;
        v55[1] = (32 * v56 + 4128) & 0xFFC0;
        v54 += 2;
        v14 += 4;
      }
      while (v54 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_sf44_x2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  unsigned __int16 *v36;
  _WORD *v37;
  int v38;
  unint64_t v39;
  _WORD *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unsigned __int16 *v44;
  _WORD *v45;
  int v46;
  unint64_t v47;
  _WORD *v48;
  unint64_t v49;
  int v50;
  int v51;
  unint64_t v52;
  _WORD *v53;
  unint64_t v54;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = a8[2];
    v28 = a7[2] + v27 * v18 + v19;
    v29 = *a7 + *a8 * v18 + v19;
    v30 = *a3 + v25 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = ((unsigned __int16)(((67109889
                                                                      * (unint64_t)(876
                                                                                         * *(unsigned __int16 *)(v30 + 2 * i))) >> 32) >> 10) << 6)
                                  + 4096;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v8);
  }
  v32 = v12 & 1;
  if (v8 >= v32)
    v33 = v12 & 1;
  else
    v33 = 0;
  v34 = v9;
  if (v22 < v10)
    v10 = 0;
  v35 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v34 & 1) != 0)
    {
      v38 = v14[1];
      v36 = v14 + 4;
      *v21 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v14)) >> 32) >> 10) << 6)
           + 4096;
      v21[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v38)) >> 42) << 6) + 4096;
      v37 = v21 + 2;
    }
    else
    {
      v36 = v14;
      v37 = v21;
    }
    if (v22 != v10)
    {
      v39 = 0;
      do
      {
        v40 = &v37[v39];
        v41 = (67109889 * (unint64_t)(896 * v36[1])) >> 42;
        *v40 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v36)) >> 32) >> 10) << 6)
             + 4096;
        v40[1] = ((_WORD)v41 << 6) + 4096;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v33)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v8 - v33;
    do
    {
      v44 = v14;
      v45 = v21;
      if ((v34 & 1) != 0)
      {
        v46 = v14[1];
        v44 = v14 + 4;
        *v21 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v14)) >> 32) >> 10) << 6)
             + 4096;
        v21[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v46)) >> 42) << 6) + 4096;
        v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        v47 = 0;
        do
        {
          v48 = &v45[v47];
          v49 = (67109889 * (unint64_t)(896 * v44[1])) >> 42;
          *v48 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v44)) >> 32) >> 10) << 6)
               + 4096;
          v48[1] = ((_WORD)v49 << 6) + 4096;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v8)
  {
    if ((v34 & 1) != 0)
    {
      v50 = *v14;
      v51 = v14[1];
      v14 += 4;
      *v21 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v50)) >> 32) >> 10) << 6)
           + 4096;
      v21[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v51)) >> 42) << 6) + 4096;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v52 = 0;
      do
      {
        v53 = &v21[v52];
        v54 = (67109889 * (unint64_t)(896 * v14[1])) >> 42;
        *v53 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v14)) >> 32) >> 10) << 6)
             + 4096;
        v53[1] = ((_WORD)v54 << 6) + 4096;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sf44_x422(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unsigned __int16 *v34;
  _WORD *v35;
  unsigned int v36;
  unint64_t v37;
  _WORD *v38;
  unsigned int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int16 *v42;
  _WORD *v43;
  unsigned int v44;
  unint64_t v45;
  _WORD *v46;
  unsigned int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  unint64_t v52;
  _WORD *v53;
  unsigned int v54;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = *a7 + *a8 * v18 + v19;
    v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = ((unsigned __int16)(((67109889
                                                                      * (unint64_t)(876
                                                                                         * *(unsigned __int16 *)(v28 + 2 * i))) >> 32) >> 10) << 6)
                                  + 4096;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  v30 = v12 & 1;
  if (v9 >= v30)
    v31 = v12 & 1;
  else
    v31 = 0;
  v32 = v8;
  if (v22 < v10)
    v10 = 0;
  v33 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v34 = v14 + 4;
      v36 = (((67109889 * (unint64_t)(896 * v14[3])) >> 32) >> 10)
          + (((67109889 * (unint64_t)(896 * v14[1])) >> 32) >> 10);
      *v21 = (32
            * ((((67109889 * (unint64_t)(896 * v14[2])) >> 32) >> 10)
             + (((67109889 * (unint64_t)(896 * *v14)) >> 32) >> 10))
            + 4128) & 0xFFC0;
      v21[1] = (32 * v36 + 4128) & 0xFFC0;
      v35 = v21 + 2;
    }
    else
    {
      v34 = v14;
      v35 = v21;
    }
    if (v22 != v10)
    {
      v37 = 0;
      do
      {
        v38 = &v35[v37];
        v39 = (((67109889 * (unint64_t)(896 * v34[3])) >> 32) >> 10)
            + (((67109889 * (unint64_t)(896 * v34[1])) >> 32) >> 10);
        *v38 = (32
              * (((67109889 * (unint64_t)(896 * v34[2])) >> 42)
               + (((67109889 * (unint64_t)(896 * *v34)) >> 32) >> 10))
              + 4128) & 0xFFC0;
        v38[1] = (32 * v39 + 4128) & 0xFFC0;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v9 - v31;
    do
    {
      v42 = v14;
      v43 = v21;
      if ((v32 & 1) != 0)
      {
        v42 = v14 + 4;
        v44 = (((67109889 * (unint64_t)(896 * v14[3])) >> 32) >> 10)
            + (((67109889 * (unint64_t)(896 * v14[1])) >> 32) >> 10);
        *v21 = (32
              * (((67109889 * (unint64_t)(896 * v14[2])) >> 42)
               + (((67109889 * (unint64_t)(896 * *v14)) >> 32) >> 10))
              + 4128) & 0xFFC0;
        v21[1] = (32 * v44 + 4128) & 0xFFC0;
        v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        v45 = 0;
        do
        {
          v46 = &v43[v45];
          v47 = (((67109889 * (unint64_t)(896 * v42[3])) >> 32) >> 10)
              + (((67109889 * (unint64_t)(896 * v42[1])) >> 32) >> 10);
          *v46 = (32
                * (((67109889 * (unint64_t)(896 * v42[2])) >> 42)
                 + (((67109889 * (unint64_t)(896 * *v42)) >> 32) >> 10))
                + 4128) & 0xFFC0;
          v46[1] = (32 * v47 + 4128) & 0xFFC0;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if ((v32 & 1) != 0)
    {
      v48 = *v14;
      v49 = v14[1];
      v50 = v14[2];
      v51 = v14[3];
      v14 += 4;
      *v21 = (32
            * ((((67109889 * (unint64_t)(896 * v50)) >> 32) >> 10)
             + (((67109889 * (unint64_t)(896 * v48)) >> 32) >> 10))
            + 4128) & 0xFFC0;
      v21[1] = (32
              * ((((67109889 * (unint64_t)(896 * v51)) >> 32) >> 10)
               + (((67109889 * (unint64_t)(896 * v49)) >> 32) >> 10))
              + 4128) & 0xFFC0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v52 = 0;
      do
      {
        v53 = &v21[v52];
        v54 = (((67109889 * (unint64_t)(896 * v14[3])) >> 32) >> 10)
            + (((67109889 * (unint64_t)(896 * v14[1])) >> 32) >> 10);
        *v53 = (32
              * (((67109889 * (unint64_t)(896 * v14[2])) >> 42)
               + (((67109889 * (unint64_t)(896 * *v14)) >> 32) >> 10))
              + 4128) & 0xFFC0;
        v53[1] = (32 * v54 + 4128) & 0xFFC0;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_sf44_x422(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unsigned __int16 *v34;
  _WORD *v35;
  int v36;
  unint64_t v37;
  _WORD *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int16 *v42;
  _WORD *v43;
  int v44;
  unint64_t v45;
  _WORD *v46;
  unint64_t v47;
  int v48;
  int v49;
  unint64_t v50;
  _WORD *v51;
  unint64_t v52;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = *a7 + *a8 * v18 + v19;
    v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = ((unsigned __int16)(((67109889
                                                                      * (unint64_t)(876
                                                                                         * *(unsigned __int16 *)(v28 + 2 * i))) >> 32) >> 10) << 6)
                                  + 4096;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  v30 = v12 & 1;
  if (v9 >= v30)
    v31 = v12 & 1;
  else
    v31 = 0;
  v32 = v8;
  if (v22 < v10)
    v10 = 0;
  v33 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v36 = v14[1];
      v34 = v14 + 4;
      *v21 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v14)) >> 32) >> 10) << 6)
           + 4096;
      v21[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v36)) >> 42) << 6) + 4096;
      v35 = v21 + 2;
    }
    else
    {
      v34 = v14;
      v35 = v21;
    }
    if (v22 != v10)
    {
      v37 = 0;
      do
      {
        v38 = &v35[v37];
        v39 = (67109889 * (unint64_t)(896 * v34[1])) >> 42;
        *v38 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v34)) >> 32) >> 10) << 6)
             + 4096;
        v38[1] = ((_WORD)v39 << 6) + 4096;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v9 - v31;
    do
    {
      v42 = v14;
      v43 = v21;
      if ((v32 & 1) != 0)
      {
        v44 = v14[1];
        v42 = v14 + 4;
        *v21 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v14)) >> 32) >> 10) << 6)
             + 4096;
        v21[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v44)) >> 42) << 6) + 4096;
        v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        v45 = 0;
        do
        {
          v46 = &v43[v45];
          v47 = (67109889 * (unint64_t)(896 * v42[1])) >> 42;
          *v46 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v42)) >> 32) >> 10) << 6)
               + 4096;
          v46[1] = ((_WORD)v47 << 6) + 4096;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if ((v32 & 1) != 0)
    {
      v48 = *v14;
      v49 = v14[1];
      v14 += 4;
      *v21 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * v48)) >> 32) >> 10) << 6)
           + 4096;
      v21[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v49)) >> 42) << 6) + 4096;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v50 = 0;
      do
      {
        v51 = &v21[v50];
        v52 = (67109889 * (unint64_t)(896 * v14[1])) >> 42;
        *v51 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v14)) >> 32) >> 10) << 6)
             + 4096;
        v51[1] = ((_WORD)v52 << 6) + 4096;
        v50 += 2;
        v14 += 4;
      }
      while (v50 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sf44_xf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unsigned __int16 *v34;
  _WORD *v35;
  unsigned int v36;
  unint64_t v37;
  _WORD *v38;
  unsigned int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int16 *v42;
  _WORD *v43;
  unsigned int v44;
  unint64_t v45;
  _WORD *v46;
  unsigned int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  unint64_t v52;
  _WORD *v53;
  unsigned int v54;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = *a7 + *a8 * v18 + v19;
    v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = (unsigned __int16)(((67109889
                                                                     * (unint64_t)(1023
                                                                                        * *(unsigned __int16 *)(v28 + 2 * i))) >> 32) >> 10) << 6;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  v30 = v12 & 1;
  if (v9 >= v30)
    v31 = v12 & 1;
  else
    v31 = 0;
  v32 = v8;
  if (v22 < v10)
    v10 = 0;
  v33 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v34 = v14 + 4;
      v36 = (((67109889 * (unint64_t)(1023 * v14[3])) >> 32) >> 10)
          + (((67109889 * (unint64_t)(1023 * v14[1])) >> 32) >> 10);
      *v21 = (32
            * (((67109889 * (unint64_t)(1023 * v14[2])) >> 42)
             + (((67109889 * (unint64_t)(1023 * *v14)) >> 32) >> 10))
            + 32) & 0xFFC0;
      v21[1] = (32 * v36 + 32) & 0xFFC0;
      v35 = v21 + 2;
    }
    else
    {
      v34 = v14;
      v35 = v21;
    }
    if (v22 != v10)
    {
      v37 = 0;
      do
      {
        v38 = &v35[v37];
        v39 = (((67109889 * (unint64_t)(1023 * v34[3])) >> 32) >> 10)
            + (((67109889 * (unint64_t)(1023 * v34[1])) >> 32) >> 10);
        *v38 = (32
              * (((67109889 * (unint64_t)(1023 * v34[2])) >> 42)
               + (((67109889 * (unint64_t)(1023 * *v34)) >> 32) >> 10))
              + 32) & 0xFFC0;
        v38[1] = (32 * v39 + 32) & 0xFFC0;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v9 - v31;
    do
    {
      v42 = v14;
      v43 = v21;
      if ((v32 & 1) != 0)
      {
        v42 = v14 + 4;
        v44 = (((67109889 * (unint64_t)(1023 * v14[3])) >> 32) >> 10)
            + (((67109889 * (unint64_t)(1023 * v14[1])) >> 32) >> 10);
        *v21 = (32
              * (((67109889 * (unint64_t)(1023 * v14[2])) >> 42)
               + (((67109889 * (unint64_t)(1023 * *v14)) >> 32) >> 10))
              + 32) & 0xFFC0;
        v21[1] = (32 * v44 + 32) & 0xFFC0;
        v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        v45 = 0;
        do
        {
          v46 = &v43[v45];
          v47 = (((67109889 * (unint64_t)(1023 * v42[3])) >> 32) >> 10)
              + (((67109889 * (unint64_t)(1023 * v42[1])) >> 32) >> 10);
          *v46 = (32
                * (((67109889 * (unint64_t)(1023 * v42[2])) >> 42)
                 + (((67109889 * (unint64_t)(1023 * *v42)) >> 32) >> 10))
                + 32) & 0xFFC0;
          v46[1] = (32 * v47 + 32) & 0xFFC0;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if ((v32 & 1) != 0)
    {
      v48 = *v14;
      v49 = v14[1];
      v50 = v14[2];
      v51 = v14[3];
      v14 += 4;
      *v21 = (32
            * (((67109889 * (unint64_t)(1023 * v50)) >> 42)
             + (((67109889 * (unint64_t)(1023 * v48)) >> 32) >> 10))
            + 32) & 0xFFC0;
      v21[1] = (32
              * ((((67109889 * (unint64_t)(1023 * v51)) >> 32) >> 10)
               + (((67109889 * (unint64_t)(1023 * v49)) >> 32) >> 10))
              + 32) & 0xFFC0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v52 = 0;
      do
      {
        v53 = &v21[v52];
        v54 = (((67109889 * (unint64_t)(1023 * v14[3])) >> 32) >> 10)
            + (((67109889 * (unint64_t)(1023 * v14[1])) >> 32) >> 10);
        *v53 = (32
              * (((67109889 * (unint64_t)(1023 * v14[2])) >> 42)
               + (((67109889 * (unint64_t)(1023 * *v14)) >> 32) >> 10))
              + 32) & 0xFFC0;
        v53[1] = (32 * v54 + 32) & 0xFFC0;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_sf44_xf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unsigned __int16 *v34;
  _WORD *v35;
  int v36;
  unint64_t v37;
  _WORD *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int16 *v42;
  _WORD *v43;
  int v44;
  unint64_t v45;
  _WORD *v46;
  unint64_t v47;
  int v48;
  int v49;
  unint64_t v50;
  _WORD *v51;
  unint64_t v52;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v22 = v11 - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v24 = 0;
    v25 = *a4;
    v26 = *a8;
    v27 = *a7 + *a8 * v18 + v19;
    v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = (unsigned __int16)(((67109889
                                                                     * (unint64_t)(1023
                                                                                        * *(unsigned __int16 *)(v28 + 2 * i))) >> 32) >> 10) << 6;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  v30 = v12 & 1;
  if (v9 >= v30)
    v31 = v12 & 1;
  else
    v31 = 0;
  v32 = v8;
  if (v22 < v10)
    v10 = 0;
  v33 = v22 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v36 = v14[1];
      v34 = v14 + 4;
      *v21 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * *v14)) >> 32) >> 10) << 6;
      v21[1] = (unsigned __int16)((67109889 * (unint64_t)(1023 * v36)) >> 42) << 6;
      v35 = v21 + 2;
    }
    else
    {
      v34 = v14;
      v35 = v21;
    }
    if (v22 != v10)
    {
      v37 = 0;
      do
      {
        v38 = &v35[v37];
        v39 = (67109889 * (unint64_t)(1023 * v34[1])) >> 42;
        *v38 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * *v34)) >> 32) >> 10) << 6;
        v38[1] = (_WORD)v39 << 6;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v9 - v31;
    do
    {
      v42 = v14;
      v43 = v21;
      if ((v32 & 1) != 0)
      {
        v44 = v14[1];
        v42 = v14 + 4;
        *v21 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * *v14)) >> 32) >> 10) << 6;
        v21[1] = (unsigned __int16)((67109889 * (unint64_t)(1023 * v44)) >> 42) << 6;
        v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        v45 = 0;
        do
        {
          v46 = &v43[v45];
          v47 = (67109889 * (unint64_t)(1023 * v42[1])) >> 42;
          *v46 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * *v42)) >> 32) >> 10) << 6;
          v46[1] = (_WORD)v47 << 6;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if ((v32 & 1) != 0)
    {
      v48 = *v14;
      v49 = v14[1];
      v14 += 4;
      *v21 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * v48)) >> 32) >> 10) << 6;
      v21[1] = (unsigned __int16)((67109889 * (unint64_t)(1023 * v49)) >> 42) << 6;
      v21 += 2;
    }
    if (v22 != v10)
    {
      v50 = 0;
      do
      {
        v51 = &v21[v50];
        v52 = (67109889 * (unint64_t)(1023 * v14[1])) >> 42;
        *v51 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * *v14)) >> 32) >> 10) << 6;
        v51[1] = (_WORD)v52 << 6;
        v50 += 2;
        v14 += 4;
      }
      while (v50 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sf44_x420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  unint64_t v36;
  unsigned __int16 *v37;
  _WORD *v38;
  unsigned __int16 *v39;
  int v40;
  int v41;
  unsigned int v42;
  unint64_t v43;
  unsigned __int16 *v44;
  _WORD *v45;
  unsigned int v46;
  unint64_t v47;
  unint64_t v48;
  unsigned __int16 *v49;
  _WORD *v50;
  unsigned __int16 *v51;
  int v52;
  int v53;
  unsigned int v54;
  unint64_t v55;
  unsigned __int16 *v56;
  _WORD *v57;
  unsigned int v58;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = (v8 & 1) + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = a4[1];
  v15 = (unsigned __int16 *)(a3[1] + v14 * v12 + 4 * (v10 + v9));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = 2 * v16;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v23 = v11 - (v10 + v9);
  v24 = v17 - v16;
  if (v23 >= v24)
    v23 = v24;
  v25 = v13 - v12;
  v26 = v19 - v18;
  if (v25 < v19 - v18)
    v26 = v25;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v12 + 2 * (v10 + v9);
    if (v12 >= v8)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v31;
    v33 = *a7 + v29 * v18 + v20;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
          *(_WORD *)(v33 + 2 * i) = ((unsigned __int16)(((67109889
                                                                      * (unint64_t)(876
                                                                                         * *(unsigned __int16 *)(v32 + 2 * i))) >> 32) >> 10) << 6)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1))
    v35 = v8 & 1;
  else
    v35 = 0;
  if (v23 < v10)
    v10 = 0;
  v36 = v23 - v10;
  if ((v8 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v39 = (unsigned __int16 *)((char *)v15 + v14 + 4);
      v40 = *v39;
      v41 = v39[1];
      v37 = v15 + 4;
      v42 = (((67109889
                           * (unint64_t)(896 * *(unsigned __int16 *)((char *)v15 + v14 + 2))) >> 32) >> 10)
          + (((67109889 * (unint64_t)(896 * v15[1])) >> 32) >> 10)
          + (((67109889 * (unint64_t)(896 * v15[3])) >> 32) >> 10)
          + (((67109889 * (unint64_t)(896 * v41)) >> 32) >> 10);
      *v22 = (16
            * ((((67109889
                              * (unint64_t)(896 * *(unsigned __int16 *)((char *)v15 + v14))) >> 32) >> 10)
             + (((67109889 * (unint64_t)(896 * *v15)) >> 32) >> 10)
             + ((67109889 * (unint64_t)(896 * v15[2])) >> 42)
             + ((67109889 * (unint64_t)(896 * v40)) >> 42))
            + 4128) & 0xFFC0;
      v22[1] = (16 * v42 + 4128) & 0xFFC0;
      v38 = v22 + 2;
    }
    else
    {
      v37 = v15;
      v38 = v22;
    }
    if (v23 != v10)
    {
      v43 = 0;
      v44 = v37 + 2;
      do
      {
        v45 = &v38[v43];
        v46 = (((67109889
                             * (unint64_t)(896 * *(unsigned __int16 *)((char *)v44 + v14 - 2))) >> 32) >> 10)
            + (((67109889 * (unint64_t)(896 * *(v44 - 1))) >> 32) >> 10)
            + (((67109889 * (unint64_t)(896 * v44[1])) >> 32) >> 10)
            + (((67109889
                             * (unint64_t)(896 * *(unsigned __int16 *)((char *)v44 + v14 + 2))) >> 32) >> 10);
        *v45 = (16
              * (((67109889 * (unint64_t)(896 * *(unsigned __int16 *)((char *)v44 + v14 - 4))) >> 42)
               + (((67109889 * (unint64_t)(896 * *(v44 - 2))) >> 32) >> 10)
               + ((67109889 * (unint64_t)(896 * *v44)) >> 42)
               + ((67109889 * (unint64_t)(896 * *(unsigned __int16 *)((char *)v44 + v14))) >> 42))
              + 4128) & 0xFFC0;
        v45[1] = (16 * v46 + 4128) & 0xFFC0;
        v43 += 2;
        v44 += 4;
      }
      while (v43 < v36);
    }
    v15 += v14;
    v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v26 != v35)
  {
    v47 = 0;
    v48 = v26 - v35;
    do
    {
      v49 = v15;
      v50 = v22;
      if ((v9 & 1) != 0)
      {
        v51 = (unsigned __int16 *)((char *)v15 + v14 + 4);
        v52 = *v51;
        v53 = v51[1];
        v49 = v15 + 4;
        v54 = (((67109889
                             * (unint64_t)(896 * *(unsigned __int16 *)((char *)v15 + v14 + 2))) >> 32) >> 10)
            + (((67109889 * (unint64_t)(896 * v15[1])) >> 32) >> 10)
            + (((67109889 * (unint64_t)(896 * v15[3])) >> 32) >> 10)
            + (((67109889 * (unint64_t)(896 * v53)) >> 32) >> 10);
        *v22 = (16
              * (((67109889 * (unint64_t)(896 * *(unsigned __int16 *)((char *)v15 + v14))) >> 42)
               + (((67109889 * (unint64_t)(896 * *v15)) >> 32) >> 10)
               + ((67109889 * (unint64_t)(896 * v15[2])) >> 42)
               + ((67109889 * (unint64_t)(896 * v52)) >> 42))
              + 4128) & 0xFFC0;
        v22[1] = (16 * v54 + 4128) & 0xFFC0;
        v50 = v22 + 2;
      }
      if (v23 != v10)
      {
        v55 = 0;
        v56 = v49 + 2;
        do
        {
          v57 = &v50[v55];
          v58 = (((67109889
                               * (unint64_t)(896 * *(unsigned __int16 *)((char *)v56 + v14 - 2))) >> 32) >> 10)
              + (((67109889 * (unint64_t)(896 * *(v56 - 1))) >> 32) >> 10)
              + (((67109889 * (unint64_t)(896 * v56[1])) >> 32) >> 10)
              + (((67109889
                               * (unint64_t)(896 * *(unsigned __int16 *)((char *)v56 + v14 + 2))) >> 32) >> 10);
          *v57 = (16
                * (((67109889 * (unint64_t)(896 * *(unsigned __int16 *)((char *)v56 + v14 - 4))) >> 42)
                 + (((67109889 * (unint64_t)(896 * *(v56 - 2))) >> 32) >> 10)
                 + ((67109889 * (unint64_t)(896 * *v56)) >> 42)
                 + ((67109889 * (unint64_t)(896 * *(unsigned __int16 *)((char *)v56 + v14))) >> 42))
                + 4128) & 0xFFC0;
          v57[1] = (16 * v58 + 4128) & 0xFFC0;
          v55 += 2;
          v56 += 4;
        }
        while (v55 < v36);
      }
      v15 += v14;
      v22 = (_WORD *)((char *)v22 + v21);
      v47 += 2;
    }
    while (v47 < v48);
  }
  return 0;
}

uint64_t vt_CopyDec_sf44_x420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  unint64_t v36;
  unsigned __int16 *v37;
  _WORD *v38;
  int v39;
  unint64_t v40;
  _WORD *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unsigned __int16 *v46;
  _WORD *v47;
  int v48;
  unint64_t v49;
  _WORD *v50;
  unint64_t v51;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = (v8 & 1) + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = a4[1];
  v15 = (unsigned __int16 *)(a3[1] + v14 * v12 + 4 * (v10 + v9));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = 2 * v16;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v23 = v11 - (v10 + v9);
  v24 = v17 - v16;
  if (v23 >= v24)
    v23 = v24;
  v25 = v13 - v12;
  v26 = v19 - v18;
  if (v25 < v19 - v18)
    v26 = v25;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v12 + 2 * (v10 + v9);
    if (v12 >= v8)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v31;
    v33 = *a7 + v29 * v18 + v20;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
          *(_WORD *)(v33 + 2 * i) = ((unsigned __int16)(((67109889
                                                                      * (unint64_t)(876
                                                                                         * *(unsigned __int16 *)(v32 + 2 * i))) >> 32) >> 10) << 6)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1))
    v35 = v8 & 1;
  else
    v35 = 0;
  if (v23 < v10)
    v10 = 0;
  v36 = v23 - v10;
  if ((v8 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v39 = v15[1];
      v37 = v15 + 4;
      *v22 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v15)) >> 32) >> 10) << 6)
           + 4096;
      v22[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v39)) >> 42) << 6) + 4096;
      v38 = v22 + 2;
    }
    else
    {
      v37 = v15;
      v38 = v22;
    }
    if (v23 != v10)
    {
      v40 = 0;
      do
      {
        v41 = &v38[v40];
        v42 = (67109889 * (unint64_t)(896 * v37[1])) >> 42;
        *v41 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v37)) >> 32) >> 10) << 6)
             + 4096;
        v41[1] = ((_WORD)v42 << 6) + 4096;
        v40 += 2;
        v37 += 4;
      }
      while (v40 < v36);
    }
    v15 += v14;
    v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v26 != v35)
  {
    v43 = 0;
    v44 = v26 - v35;
    v45 = 2 * v14;
    do
    {
      v46 = v15;
      v47 = v22;
      if ((v9 & 1) != 0)
      {
        v48 = v15[1];
        v46 = v15 + 4;
        *v22 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v15)) >> 32) >> 10) << 6)
             + 4096;
        v22[1] = ((unsigned __int16)((67109889 * (unint64_t)(896 * v48)) >> 42) << 6) + 4096;
        v47 = v22 + 2;
      }
      if (v23 != v10)
      {
        v49 = 0;
        do
        {
          v50 = &v47[v49];
          v51 = (67109889 * (unint64_t)(896 * v46[1])) >> 42;
          *v50 = ((unsigned __int16)(((67109889 * (unint64_t)(896 * *v46)) >> 32) >> 10) << 6)
               + 4096;
          v50[1] = ((_WORD)v51 << 6) + 4096;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v36);
      }
      v15 = (unsigned __int16 *)((char *)v15 + v45);
      v22 = (_WORD *)((char *)v22 + v21);
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_CopyAvg_sf44_xf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  unint64_t v36;
  unsigned __int16 *v37;
  _WORD *v38;
  unsigned __int16 *v39;
  int v40;
  int v41;
  unsigned int v42;
  unint64_t v43;
  unsigned __int16 *v44;
  _WORD *v45;
  unsigned int v46;
  unint64_t v47;
  unint64_t v48;
  unsigned __int16 *v49;
  _WORD *v50;
  unsigned __int16 *v51;
  int v52;
  int v53;
  unsigned int v54;
  unint64_t v55;
  unsigned __int16 *v56;
  _WORD *v57;
  unsigned int v58;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = (v8 & 1) + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = a4[1];
  v15 = (unsigned __int16 *)(a3[1] + v14 * v12 + 4 * (v10 + v9));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = 2 * v16;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v23 = v11 - (v10 + v9);
  v24 = v17 - v16;
  if (v23 >= v24)
    v23 = v24;
  v25 = v13 - v12;
  v26 = v19 - v18;
  if (v25 < v19 - v18)
    v26 = v25;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v12 + 2 * (v10 + v9);
    if (v12 >= v8)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v31;
    v33 = *a7 + v29 * v18 + v20;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
          *(_WORD *)(v33 + 2 * i) = (unsigned __int16)(((67109889
                                                                     * (unint64_t)(1023
                                                                                        * *(unsigned __int16 *)(v32 + 2 * i))) >> 32) >> 10) << 6;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1))
    v35 = v8 & 1;
  else
    v35 = 0;
  if (v23 < v10)
    v10 = 0;
  v36 = v23 - v10;
  if ((v8 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v39 = (unsigned __int16 *)((char *)v15 + v14 + 4);
      v40 = *v39;
      v41 = v39[1];
      v37 = v15 + 4;
      v42 = (((67109889
                           * (unint64_t)(1023 * *(unsigned __int16 *)((char *)v15 + v14 + 2))) >> 32) >> 10)
          + (((67109889 * (unint64_t)(1023 * v15[1])) >> 32) >> 10)
          + (((67109889 * (unint64_t)(1023 * v15[3])) >> 32) >> 10)
          + (((67109889 * (unint64_t)(1023 * v41)) >> 32) >> 10);
      *v22 = (16
            * (((67109889 * (unint64_t)(1023 * *(unsigned __int16 *)((char *)v15 + v14))) >> 42)
             + (((67109889 * (unint64_t)(1023 * *v15)) >> 32) >> 10)
             + ((67109889 * (unint64_t)(1023 * v15[2])) >> 42)
             + ((67109889 * (unint64_t)(1023 * v40)) >> 42))
            + 32) & 0xFFC0;
      v22[1] = (16 * v42 + 32) & 0xFFC0;
      v38 = v22 + 2;
    }
    else
    {
      v37 = v15;
      v38 = v22;
    }
    if (v23 != v10)
    {
      v43 = 0;
      v44 = v37 + 2;
      do
      {
        v45 = &v38[v43];
        v46 = (((67109889
                             * (unint64_t)(1023 * *(unsigned __int16 *)((char *)v44 + v14 - 2))) >> 32) >> 10)
            + (((67109889 * (unint64_t)(1023 * *(v44 - 1))) >> 32) >> 10)
            + (((67109889 * (unint64_t)(1023 * v44[1])) >> 32) >> 10)
            + (((67109889
                             * (unint64_t)(1023 * *(unsigned __int16 *)((char *)v44 + v14 + 2))) >> 32) >> 10);
        *v45 = (16
              * (((67109889 * (unint64_t)(1023 * *(unsigned __int16 *)((char *)v44 + v14 - 4))) >> 42)
               + (((67109889 * (unint64_t)(1023 * *(v44 - 2))) >> 32) >> 10)
               + ((67109889 * (unint64_t)(1023 * *v44)) >> 42)
               + ((67109889 * (unint64_t)(1023 * *(unsigned __int16 *)((char *)v44 + v14))) >> 42))
              + 32) & 0xFFC0;
        v45[1] = (16 * v46 + 32) & 0xFFC0;
        v43 += 2;
        v44 += 4;
      }
      while (v43 < v36);
    }
    v15 += v14;
    v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v26 != v35)
  {
    v47 = 0;
    v48 = v26 - v35;
    do
    {
      v49 = v15;
      v50 = v22;
      if ((v9 & 1) != 0)
      {
        v51 = (unsigned __int16 *)((char *)v15 + v14 + 4);
        v52 = *v51;
        v53 = v51[1];
        v49 = v15 + 4;
        v54 = (((67109889
                             * (unint64_t)(1023 * *(unsigned __int16 *)((char *)v15 + v14 + 2))) >> 32) >> 10)
            + (((67109889 * (unint64_t)(1023 * v15[1])) >> 32) >> 10)
            + (((67109889 * (unint64_t)(1023 * v15[3])) >> 32) >> 10)
            + (((67109889 * (unint64_t)(1023 * v53)) >> 32) >> 10);
        *v22 = (16
              * (((67109889 * (unint64_t)(1023 * *(unsigned __int16 *)((char *)v15 + v14))) >> 42)
               + (((67109889 * (unint64_t)(1023 * *v15)) >> 32) >> 10)
               + ((67109889 * (unint64_t)(1023 * v15[2])) >> 42)
               + ((67109889 * (unint64_t)(1023 * v52)) >> 42))
              + 32) & 0xFFC0;
        v22[1] = (16 * v54 + 32) & 0xFFC0;
        v50 = v22 + 2;
      }
      if (v23 != v10)
      {
        v55 = 0;
        v56 = v49 + 2;
        do
        {
          v57 = &v50[v55];
          v58 = (((67109889
                               * (unint64_t)(1023 * *(unsigned __int16 *)((char *)v56 + v14 - 2))) >> 32) >> 10)
              + (((67109889 * (unint64_t)(1023 * *(v56 - 1))) >> 32) >> 10)
              + (((67109889 * (unint64_t)(1023 * v56[1])) >> 32) >> 10)
              + (((67109889
                               * (unint64_t)(1023 * *(unsigned __int16 *)((char *)v56 + v14 + 2))) >> 32) >> 10);
          *v57 = (16
                * (((67109889 * (unint64_t)(1023 * *(unsigned __int16 *)((char *)v56 + v14 - 4))) >> 42)
                 + (((67109889 * (unint64_t)(1023 * *(v56 - 2))) >> 32) >> 10)
                 + ((67109889 * (unint64_t)(1023 * *v56)) >> 42)
                 + ((67109889 * (unint64_t)(1023 * *(unsigned __int16 *)((char *)v56 + v14))) >> 42))
                + 32) & 0xFFC0;
          v57[1] = (16 * v58 + 32) & 0xFFC0;
          v55 += 2;
          v56 += 4;
        }
        while (v55 < v36);
      }
      v15 += v14;
      v22 = (_WORD *)((char *)v22 + v21);
      v47 += 2;
    }
    while (v47 < v48);
  }
  return 0;
}

uint64_t vt_CopyDec_sf44_xf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  unint64_t v36;
  unsigned __int16 *v37;
  _WORD *v38;
  int v39;
  unint64_t v40;
  _WORD *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unsigned __int16 *v46;
  _WORD *v47;
  int v48;
  unint64_t v49;
  _WORD *v50;
  unint64_t v51;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = (v8 & 1) + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = a4[1];
  v15 = (unsigned __int16 *)(a3[1] + v14 * v12 + 4 * (v10 + v9));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = 2 * v16;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v23 = v11 - (v10 + v9);
  v24 = v17 - v16;
  if (v23 >= v24)
    v23 = v24;
  v25 = v13 - v12;
  v26 = v19 - v18;
  if (v25 < v19 - v18)
    v26 = v25;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v12 + 2 * (v10 + v9);
    if (v12 >= v8)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v31;
    v33 = *a7 + v29 * v18 + v20;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
          *(_WORD *)(v33 + 2 * i) = (unsigned __int16)(((67109889
                                                                     * (unint64_t)(1023
                                                                                        * *(unsigned __int16 *)(v32 + 2 * i))) >> 32) >> 10) << 6;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1))
    v35 = v8 & 1;
  else
    v35 = 0;
  if (v23 < v10)
    v10 = 0;
  v36 = v23 - v10;
  if ((v8 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v39 = v15[1];
      v37 = v15 + 4;
      *v22 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * *v15)) >> 32) >> 10) << 6;
      v22[1] = (unsigned __int16)((67109889 * (unint64_t)(1023 * v39)) >> 42) << 6;
      v38 = v22 + 2;
    }
    else
    {
      v37 = v15;
      v38 = v22;
    }
    if (v23 != v10)
    {
      v40 = 0;
      do
      {
        v41 = &v38[v40];
        v42 = (67109889 * (unint64_t)(1023 * v37[1])) >> 42;
        *v41 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * *v37)) >> 32) >> 10) << 6;
        v41[1] = (_WORD)v42 << 6;
        v40 += 2;
        v37 += 4;
      }
      while (v40 < v36);
    }
    v15 += v14;
    v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v26 != v35)
  {
    v43 = 0;
    v44 = v26 - v35;
    v45 = 2 * v14;
    do
    {
      v46 = v15;
      v47 = v22;
      if ((v9 & 1) != 0)
      {
        v48 = v15[1];
        v46 = v15 + 4;
        *v22 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * *v15)) >> 32) >> 10) << 6;
        v22[1] = (unsigned __int16)((67109889 * (unint64_t)(1023 * v48)) >> 42) << 6;
        v47 = v22 + 2;
      }
      if (v23 != v10)
      {
        v49 = 0;
        do
        {
          v50 = &v47[v49];
          v51 = (67109889 * (unint64_t)(1023 * v46[1])) >> 42;
          *v50 = (unsigned __int16)(((67109889 * (unint64_t)(1023 * *v46)) >> 32) >> 10) << 6;
          v50[1] = (_WORD)v51 << 6;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v36);
      }
      v15 = (unsigned __int16 *)((char *)v15 + v45);
      v22 = (_WORD *)((char *)v22 + v21);
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_Copy_sf44_v4a8(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  unint64_t v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned __int16 *v34;
  _BYTE *v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  unint64_t v43;
  uint64_t v44;
  unsigned __int16 *v45;
  _BYTE *v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  unint64_t v56;
  int v57;
  int v58;
  int v59;
  int v60;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a2[3];
  v12 = a4[1];
  v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 4 * v9);
  v15 = a6[4];
  v14 = a6[5];
  v16 = a8[1];
  v17 = (_BYTE *)(a7[1] + v16 * v14 + 2 * v15);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (v11 >= a6[3])
    v11 = a6[3];
  if (v11)
  {
    v18 = 0;
    v19 = *a8;
    v20 = a8[2];
    v21 = a7[2] + v20 * v14;
    v22 = *a7 + *a8 * v14;
    v23 = *a4;
    v24 = v21 + v15;
    v25 = v22 + v15;
    v26 = *a3 + v23 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
        {
          *(_BYTE *)(v24 + i) = -1;
          *(_BYTE *)(v25 + i) = ((unsigned __int16)((16777473
                                                   * (unint64_t)(219
                                                                      * *(unsigned __int16 *)(v26 + 2 * i))) >> 32) >> 8)
                              + 16;
        }
      }
      v26 += v23;
      v25 += v19;
      v24 += v20;
      ++v18;
    }
    while (v18 != v11);
    v9 = a2[4];
    v8 = a2[5];
  }
  v28 = v8 & 1;
  if (v11 >= v28)
    v29 = v8 & 1;
  else
    v29 = 0;
  v30 = v9;
  v31 = v9 & 1;
  if (v10 >= v31)
    v32 = v9 & 1;
  else
    v32 = 0;
  v33 = v10 - v32;
  if ((v8 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v36 = v13[1];
      v34 = v13 + 2;
      *v17 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v13)) >> 32) >> 8) + 16;
      v17[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v36)) >> 32) >> 8) + 16;
      v35 = v17 + 2;
    }
    else
    {
      v34 = v13;
      v35 = v17;
    }
    if (v10 == v32)
    {
      v37 = 0;
    }
    else
    {
      v38 = v10 - v32;
      do
      {
        v39 = *v34;
        v40 = v34[1];
        v34 += 2;
        *v35 = ((unsigned __int16)((16777473 * (unint64_t)(224 * v39)) >> 32) >> 8) + 16;
        v35[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v40)) >> 32) >> 8) + 16;
        v35 += 2;
        --v38;
      }
      while (v38);
      v37 = v10 - v32;
    }
    if (v37 + v31 < v10)
    {
      v41 = *v34;
      v42 = v34[1];
      *v35 = ((unsigned __int16)((16777473 * (unint64_t)(224 * v41)) >> 32) >> 8) + 16;
      v35[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v42)) >> 32) >> 8) + 16;
    }
    v13 = (unsigned __int16 *)((char *)v13 + v12);
    v17 += v16;
  }
  if (v11 == v29)
  {
    v43 = 0;
  }
  else
  {
    v44 = 0;
    v43 = v11 - v29;
    do
    {
      v45 = v13;
      v46 = v17;
      if ((v30 & 1) != 0)
      {
        v47 = v13[1];
        v45 = v13 + 2;
        *v17 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v13)) >> 32) >> 8) + 16;
        v17[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v47)) >> 32) >> 8) + 16;
        v46 = v17 + 2;
      }
      if (v10 == v32)
      {
        v48 = 0;
      }
      else
      {
        v49 = v10 - v32;
        do
        {
          v50 = *v45;
          v51 = v45[1];
          v45 += 2;
          *v46 = ((unsigned __int16)((16777473 * (unint64_t)(224 * v50)) >> 32) >> 8) + 16;
          v46[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v51)) >> 32) >> 8) + 16;
          v46 += 2;
          --v49;
        }
        while (v49);
        v48 = v10 - v32;
      }
      if (v48 + v31 < v10)
      {
        v52 = *v45;
        v53 = v45[1];
        *v46 = ((unsigned __int16)((16777473 * (unint64_t)(224 * v52)) >> 32) >> 8) + 16;
        v46[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v53)) >> 32) >> 8) + 16;
      }
      v13 = (unsigned __int16 *)((char *)v13 + v12);
      v17 += v16;
      ++v44;
    }
    while (v44 != v43);
  }
  if (v43 + v28 < v11)
  {
    if ((v30 & 1) != 0)
    {
      v54 = *v13;
      v55 = v13[1];
      v13 += 2;
      *v17 = ((unsigned __int16)((16777473 * (unint64_t)(224 * v54)) >> 32) >> 8) + 16;
      v17[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v55)) >> 32) >> 8) + 16;
      v17 += 2;
    }
    if (v10 == v32)
    {
      v33 = 0;
    }
    else
    {
      v56 = v10 - v32;
      do
      {
        v57 = *v13;
        v58 = v13[1];
        v13 += 2;
        *v17 = ((unsigned __int16)((16777473 * (unint64_t)(224 * v57)) >> 32) >> 8) + 16;
        v17[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v58)) >> 32) >> 8) + 16;
        v17 += 2;
        --v56;
      }
      while (v56);
    }
    if (v33 + v31 < v10)
    {
      v59 = *v13;
      v60 = v13[1];
      *v17 = ((unsigned __int16)((16777473 * (unint64_t)(224 * v59)) >> 32) >> 8) + 16;
      v17[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v60)) >> 32) >> 8) + 16;
    }
  }
  return 0;
}

uint64_t vt_Copy_sf44_444v(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned __int16 *v30;
  _BYTE *v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unint64_t v39;
  uint64_t v40;
  unsigned __int16 *v41;
  _BYTE *v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  unint64_t v52;
  int v53;
  int v54;
  int v55;
  int v56;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a4[1];
  v12 = (unsigned __int16 *)(a3[1] + v11 * v8 + 4 * v9);
  v14 = a6[4];
  v13 = a6[5];
  v15 = a8[1];
  v16 = (_BYTE *)(a7[1] + v15 * v13 + 2 * v14);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (a2[3] >= a6[3])
    v17 = a6[3];
  else
    v17 = a2[3];
  if (v17)
  {
    v18 = 0;
    v19 = *a4;
    v20 = *a8;
    v21 = *a7 + *a8 * v13 + v14;
    v22 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
          *(_BYTE *)(v21 + i) = ((unsigned __int16)((16777473
                                                   * (unint64_t)(219
                                                                      * *(unsigned __int16 *)(v22 + 2 * i))) >> 32) >> 8)
                              + 16;
      }
      v22 += v19;
      v21 += v20;
      ++v18;
    }
    while (v18 != v17);
    v9 = a2[4];
    v8 = a2[5];
  }
  v24 = v8 & 1;
  if (v17 >= v24)
    v25 = v8 & 1;
  else
    v25 = 0;
  v26 = v9;
  v27 = v9 & 1;
  if (v10 >= v27)
    v28 = v9 & 1;
  else
    v28 = 0;
  v29 = v10 - v28;
  if ((v8 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v32 = v12[1];
      v30 = v12 + 2;
      *v16 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v12)) >> 32) >> 8) + 16;
      v16[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v32)) >> 32) >> 8) + 16;
      v31 = v16 + 2;
    }
    else
    {
      v30 = v12;
      v31 = v16;
    }
    if (v10 == v28)
    {
      v33 = 0;
    }
    else
    {
      v34 = v10 - v28;
      do
      {
        v35 = *v30;
        v36 = v30[1];
        v30 += 2;
        *v31 = ((unsigned __int16)((16777473 * (unint64_t)(224 * v35)) >> 32) >> 8) + 16;
        v31[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v36)) >> 32) >> 8) + 16;
        v31 += 2;
        --v34;
      }
      while (v34);
      v33 = v10 - v28;
    }
    if (v33 + v27 < v10)
    {
      v37 = *v30;
      v38 = v30[1];
      *v31 = ((unsigned __int16)((16777473 * (unint64_t)(224 * v37)) >> 32) >> 8) + 16;
      v31[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v38)) >> 32) >> 8) + 16;
    }
    v12 = (unsigned __int16 *)((char *)v12 + v11);
    v16 += v15;
  }
  if (v17 == v25)
  {
    v39 = 0;
  }
  else
  {
    v40 = 0;
    v39 = v17 - v25;
    do
    {
      v41 = v12;
      v42 = v16;
      if ((v26 & 1) != 0)
      {
        v43 = v12[1];
        v41 = v12 + 2;
        *v16 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v12)) >> 32) >> 8) + 16;
        v16[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v43)) >> 32) >> 8) + 16;
        v42 = v16 + 2;
      }
      if (v10 == v28)
      {
        v44 = 0;
      }
      else
      {
        v45 = v10 - v28;
        do
        {
          v46 = *v41;
          v47 = v41[1];
          v41 += 2;
          *v42 = ((unsigned __int16)((16777473 * (unint64_t)(224 * v46)) >> 32) >> 8) + 16;
          v42[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v47)) >> 32) >> 8) + 16;
          v42 += 2;
          --v45;
        }
        while (v45);
        v44 = v10 - v28;
      }
      if (v44 + v27 < v10)
      {
        v48 = *v41;
        v49 = v41[1];
        *v42 = ((unsigned __int16)((16777473 * (unint64_t)(224 * v48)) >> 32) >> 8) + 16;
        v42[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v49)) >> 32) >> 8) + 16;
      }
      v12 = (unsigned __int16 *)((char *)v12 + v11);
      v16 += v15;
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v24 < v17)
  {
    if ((v26 & 1) != 0)
    {
      v50 = *v12;
      v51 = v12[1];
      v12 += 2;
      *v16 = ((unsigned __int16)((16777473 * (unint64_t)(224 * v50)) >> 32) >> 8) + 16;
      v16[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v51)) >> 32) >> 8) + 16;
      v16 += 2;
    }
    if (v10 == v28)
    {
      v29 = 0;
    }
    else
    {
      v52 = v10 - v28;
      do
      {
        v53 = *v12;
        v54 = v12[1];
        v12 += 2;
        *v16 = ((unsigned __int16)((16777473 * (unint64_t)(224 * v53)) >> 32) >> 8) + 16;
        v16[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v54)) >> 32) >> 8) + 16;
        v16 += 2;
        --v52;
      }
      while (v52);
    }
    if (v29 + v27 < v10)
    {
      v55 = *v12;
      v56 = v12[1];
      *v16 = ((unsigned __int16)((16777473 * (unint64_t)(224 * v55)) >> 32) >> 8) + 16;
      v16[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v56)) >> 32) >> 8) + 16;
    }
  }
  return 0;
}

uint64_t vt_Copy_sf44_444f(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  __int16 *v30;
  _BYTE *v31;
  __int16 v32;
  unint64_t v33;
  unint64_t v34;
  __int16 v35;
  __int16 v36;
  __int16 v37;
  __int16 v38;
  unint64_t v39;
  uint64_t v40;
  __int16 *v41;
  _BYTE *v42;
  __int16 v43;
  unint64_t v44;
  unint64_t v45;
  __int16 v46;
  __int16 v47;
  __int16 v48;
  __int16 v49;
  __int16 v50;
  __int16 v51;
  unint64_t v52;
  __int16 v53;
  __int16 v54;
  __int16 v55;
  __int16 v56;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2];
  v11 = a2[3];
  v12 = a4[1];
  v13 = (__int16 *)(a3[1] + v12 * v8 + 4 * v9);
  v14 = a6[4];
  v15 = a6[5];
  v16 = a8[1];
  v17 = (_BYTE *)(a7[1] + v16 * v15 + 2 * v14);
  if (v10 >= a6[2])
    v10 = a6[2];
  if (v11 >= a6[3])
    v11 = a6[3];
  if (v11)
  {
    v18 = 0;
    v19 = *a4;
    v20 = *a8;
    v21 = *a7 + *a8 * v15 + v14;
    v22 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (i = 0; i != v10; ++i)
          *(_BYTE *)(v21 + i) = *(_WORD *)(v22 + 2 * i);
      }
      v22 += v19;
      v21 += v20;
      ++v18;
    }
    while (v18 != v11);
    v9 = a2[4];
    v8 = a2[5];
  }
  v24 = v8 & 1;
  if (v11 >= v24)
    v25 = v8 & 1;
  else
    v25 = 0;
  v26 = v9;
  v27 = v9 & 1;
  if (v10 >= v27)
    v28 = v27;
  else
    v28 = 0;
  v29 = v10 - v28;
  if ((v8 & 1) != 0)
  {
    if ((v26 & 1) != 0)
    {
      v30 = v13 + 2;
      v32 = (unsigned __int16)v13[1] / 0x101u;
      *v17 = (unsigned __int16)*v13 / 0x101u;
      v17[1] = v32;
      v31 = v17 + 2;
    }
    else
    {
      v30 = v13;
      v31 = v17;
    }
    if (v10 == v28)
    {
      v33 = 0;
    }
    else
    {
      v34 = v10 - v28;
      do
      {
        v35 = *v30;
        v36 = v30[1];
        v30 += 2;
        *v31 = v35;
        v31[1] = v36;
        v31 += 2;
        --v34;
      }
      while (v34);
      v33 = v10 - v28;
    }
    if (v33 + v27 < v10)
    {
      v37 = (unsigned __int16)*v30 / 0x101u;
      v38 = (unsigned __int16)v30[1] / 0x101u;
      *v31 = v37;
      v31[1] = v38;
    }
    v13 = (__int16 *)((char *)v13 + v12);
    v17 += v16;
  }
  if (v11 == v25)
  {
    v39 = 0;
  }
  else
  {
    v40 = 0;
    v39 = v11 - v25;
    do
    {
      v41 = v13;
      v42 = v17;
      if ((v26 & 1) != 0)
      {
        v41 = v13 + 2;
        v43 = (unsigned __int16)v13[1] / 0x101u;
        *v17 = *v13;
        v17[1] = v43;
        v42 = v17 + 2;
      }
      if (v10 == v28)
      {
        v44 = 0;
      }
      else
      {
        v45 = v10 - v28;
        do
        {
          v46 = *v41;
          v47 = v41[1];
          v41 += 2;
          *v42 = v46;
          v42[1] = v47;
          v42 += 2;
          --v45;
        }
        while (v45);
        v44 = v10 - v28;
      }
      if (v44 + v27 < v10)
      {
        v48 = (unsigned __int16)*v41 / 0x101u;
        v49 = (unsigned __int16)v41[1] / 0x101u;
        *v42 = v48;
        v42[1] = v49;
      }
      v13 = (__int16 *)((char *)v13 + v12);
      v17 += v16;
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v24 < v11)
  {
    if ((v26 & 1) != 0)
    {
      v50 = *v13;
      v51 = v13[1];
      v13 += 2;
      *v17 = v50;
      v17[1] = v51;
      v17 += 2;
    }
    if (v10 == v28)
    {
      v29 = 0;
    }
    else
    {
      v52 = v10 - v28;
      do
      {
        v53 = *v13;
        v54 = v13[1];
        v13 += 2;
        *v17 = v53;
        v17[1] = v54;
        v17 += 2;
        --v52;
      }
      while (v52);
    }
    if (v29 + v27 < v10)
    {
      v55 = (unsigned __int16)*v13 / 0x101u;
      v56 = (unsigned __int16)v13[1] / 0x101u;
      *v17 = v55;
      v17[1] = v56;
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sf44_v2a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unsigned __int16 *v34;
  _BYTE *v35;
  unsigned int v36;
  unint64_t v37;
  _BYTE *v38;
  unsigned int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int16 *v42;
  _BYTE *v43;
  unsigned int v44;
  unint64_t v45;
  _BYTE *v46;
  unsigned int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  unint64_t v52;
  _BYTE *v53;
  unsigned int v54;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  v15 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v16 = *(_QWORD *)(a6 + 40);
  v17 = a8[1];
  v18 = (_BYTE *)(a7[1] + v17 * v16 + (v15 & 0x7FFFFFFFFFFFFFFFLL));
  v19 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  if (v19 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v15)
    v19 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v15;
  if (v9 >= *(_QWORD *)(a6 + 24))
    v9 = *(_QWORD *)(a6 + 24);
  if (v9)
  {
    v20 = 0;
    v21 = *a8;
    v22 = a8[2];
    v23 = a7[2] + v22 * v16;
    v24 = *a7 + *a8 * v16;
    v25 = *a4;
    v26 = v23 + v15;
    v27 = v24 + v15;
    v28 = *a3 + v25 * v12 + 2 * v11;
    do
    {
      if (v19)
      {
        for (i = 0; i != v19; ++i)
        {
          *(_BYTE *)(v26 + i) = -1;
          *(_BYTE *)(v27 + i) = ((unsigned __int16)((16777473
                                                   * (unint64_t)(219
                                                                      * *(unsigned __int16 *)(v28 + 2 * i))) >> 32) >> 8)
                              + 16;
        }
      }
      v28 += v25;
      v27 += v21;
      v26 += v22;
      ++v20;
    }
    while (v20 != v9);
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40);
    v10 = v8 & 1;
  }
  v30 = v12 & 1;
  if (v9 >= v30)
    v31 = v12 & 1;
  else
    v31 = 0;
  v32 = v8;
  if (v19 < v10)
    v10 = 0;
  v33 = v19 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v34 = v14 + 4;
      v36 = ((((16777473 * (unint64_t)(224 * v14[1])) >> 32) >> 8)
           + (((16777473 * (unint64_t)(224 * v14[3])) >> 32) >> 8)
           + 33) >> 1;
      *v18 = ((((16777473 * (unint64_t)(224 * *v14)) >> 32) >> 8)
            + (((16777473 * (unint64_t)(224 * v14[2])) >> 32) >> 8)
            + 33) >> 1;
      v18[1] = v36;
      v35 = v18 + 2;
    }
    else
    {
      v34 = v14;
      v35 = v18;
    }
    if (v19 != v10)
    {
      v37 = 0;
      do
      {
        v38 = &v35[v37];
        v39 = ((((16777473 * (unint64_t)(224 * v34[1])) >> 32) >> 8)
             + (((16777473 * (unint64_t)(224 * v34[3])) >> 32) >> 8)
             + 33) >> 1;
        *v38 = ((((16777473 * (unint64_t)(224 * *v34)) >> 32) >> 8)
              + (((16777473 * (unint64_t)(224 * v34[2])) >> 32) >> 8)
              + 33) >> 1;
        v38[1] = v39;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v18 += v17;
  }
  if (v9 == v31)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v9 - v31;
    do
    {
      v42 = v14;
      v43 = v18;
      if ((v32 & 1) != 0)
      {
        v42 = v14 + 4;
        v44 = ((((16777473 * (unint64_t)(224 * v14[1])) >> 32) >> 8)
             + (((16777473 * (unint64_t)(224 * v14[3])) >> 32) >> 8)
             + 33) >> 1;
        *v18 = ((((16777473 * (unint64_t)(224 * *v14)) >> 32) >> 8)
              + (((16777473 * (unint64_t)(224 * v14[2])) >> 32) >> 8)
              + 33) >> 1;
        v18[1] = v44;
        v43 = v18 + 2;
      }
      if (v19 != v10)
      {
        v45 = 0;
        do
        {
          v46 = &v43[v45];
          v47 = ((((16777473 * (unint64_t)(224 * v42[1])) >> 32) >> 8)
               + (((16777473 * (unint64_t)(224 * v42[3])) >> 32) >> 8)
               + 33) >> 1;
          *v46 = ((((16777473 * (unint64_t)(224 * *v42)) >> 32) >> 8)
                + (((16777473 * (unint64_t)(224 * v42[2])) >> 32) >> 8)
                + 33) >> 1;
          v46[1] = v47;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v18 += v17;
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if ((v32 & 1) != 0)
    {
      v48 = *v14;
      v49 = v14[1];
      v50 = v14[2];
      v51 = v14[3];
      v14 += 4;
      *v18 = ((((16777473 * (unint64_t)(224 * v48)) >> 32) >> 8)
            + (((16777473 * (unint64_t)(224 * v50)) >> 32) >> 8)
            + 33) >> 1;
      v18[1] = ((((16777473 * (unint64_t)(224 * v49)) >> 32) >> 8)
              + (((16777473 * (unint64_t)(224 * v51)) >> 32) >> 8)
              + 33) >> 1;
      v18 += 2;
    }
    if (v19 != v10)
    {
      v52 = 0;
      do
      {
        v53 = &v18[v52];
        v54 = ((((16777473 * (unint64_t)(224 * v14[1])) >> 32) >> 8)
             + (((16777473 * (unint64_t)(224 * v14[3])) >> 32) >> 8)
             + 33) >> 1;
        *v53 = ((((16777473 * (unint64_t)(224 * *v14)) >> 32) >> 8)
              + (((16777473 * (unint64_t)(224 * v14[2])) >> 32) >> 8)
              + 33) >> 1;
        v53[1] = v54;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_sf44_v2a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unsigned __int16 *v34;
  _BYTE *v35;
  int v36;
  unint64_t v37;
  _BYTE *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int16 *v42;
  _BYTE *v43;
  int v44;
  unint64_t v45;
  _BYTE *v46;
  unint64_t v47;
  int v48;
  int v49;
  unint64_t v50;
  _BYTE *v51;
  unint64_t v52;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = v10 + v9;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  v15 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v16 = *(_QWORD *)(a6 + 40);
  v17 = a8[1];
  v18 = (_BYTE *)(a7[1] + v17 * v16 + (v15 & 0x7FFFFFFFFFFFFFFFLL));
  v19 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  if (v19 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v15)
    v19 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v15;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v20 = 0;
    v21 = *a8;
    v22 = a8[2];
    v23 = a7[2] + v22 * v16;
    v24 = *a7 + *a8 * v16;
    v25 = *a4;
    v26 = v23 + v15;
    v27 = v24 + v15;
    v28 = *a3 + v25 * v12 + 2 * v11;
    do
    {
      if (v19)
      {
        for (i = 0; i != v19; ++i)
        {
          *(_BYTE *)(v26 + i) = -1;
          *(_BYTE *)(v27 + i) = ((unsigned __int16)((16777473
                                                   * (unint64_t)(219
                                                                      * *(unsigned __int16 *)(v28 + 2 * i))) >> 32) >> 8)
                              + 16;
        }
      }
      v28 += v25;
      v27 += v21;
      v26 += v22;
      ++v20;
    }
    while (v20 != v8);
    v9 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40);
    v10 = v9 & 1;
  }
  v30 = v12 & 1;
  if (v8 >= v30)
    v31 = v12 & 1;
  else
    v31 = 0;
  v32 = v9;
  if (v19 < v10)
    v10 = 0;
  v33 = v19 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v36 = v14[1];
      v34 = v14 + 4;
      *v18 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v14)) >> 32) >> 8) + 16;
      v18[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v36)) >> 32) >> 8) + 16;
      v35 = v18 + 2;
    }
    else
    {
      v34 = v14;
      v35 = v18;
    }
    if (v19 != v10)
    {
      v37 = 0;
      do
      {
        v38 = &v35[v37];
        v39 = (16777473 * (unint64_t)(224 * v34[1])) >> 40;
        *v38 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v34)) >> 32) >> 8) + 16;
        v38[1] = v39 + 16;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v18 += v17;
  }
  if (v8 == v31)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v8 - v31;
    do
    {
      v42 = v14;
      v43 = v18;
      if ((v32 & 1) != 0)
      {
        v44 = v14[1];
        v42 = v14 + 4;
        *v18 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v14)) >> 32) >> 8) + 16;
        v18[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v44)) >> 32) >> 8) + 16;
        v43 = v18 + 2;
      }
      if (v19 != v10)
      {
        v45 = 0;
        do
        {
          v46 = &v43[v45];
          v47 = (16777473 * (unint64_t)(224 * v42[1])) >> 40;
          *v46 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v42)) >> 32) >> 8) + 16;
          v46[1] = v47 + 16;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v18 += v17;
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v8)
  {
    if ((v32 & 1) != 0)
    {
      v48 = *v14;
      v49 = v14[1];
      v14 += 4;
      *v18 = ((unsigned __int16)((16777473 * (unint64_t)(224 * v48)) >> 32) >> 8) + 16;
      v18[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v49)) >> 32) >> 8) + 16;
      v18 += 2;
    }
    if (v19 != v10)
    {
      v50 = 0;
      do
      {
        v51 = &v18[v50];
        v52 = (16777473 * (unint64_t)(224 * v14[1])) >> 40;
        *v51 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v14)) >> 32) >> 8) + 16;
        v51[1] = v52 + 16;
        v50 += 2;
        v14 += 4;
      }
      while (v50 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sf44_422v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  unsigned __int16 *v33;
  _BYTE *v34;
  unsigned int v35;
  unint64_t v36;
  _BYTE *v37;
  unsigned int v38;
  unint64_t v39;
  uint64_t v40;
  unsigned __int16 *v41;
  _BYTE *v42;
  unsigned int v43;
  unint64_t v44;
  _BYTE *v45;
  unsigned int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  unint64_t v51;
  _BYTE *v52;
  unsigned int v53;

  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = a8[1];
  v20 = (_BYTE *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  v22 = v17 - v16;
  if (v21 >= v22)
    v21 = v22;
  if (v9 >= v15)
    v9 = v15;
  if (v9)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = *a7 + *a8 * v18 + v16;
    v27 = *a3 + *a4 * v12 + 2 * v11;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
          *(_BYTE *)(v26 + i) = ((unsigned __int16)((16777473
                                                   * (unint64_t)(219
                                                                      * *(unsigned __int16 *)(v27 + 2 * i))) >> 32) >> 8)
                              + 16;
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v9);
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40);
    v10 = v8 & 1;
  }
  v29 = v12 & 1;
  if (v9 >= v29)
    v30 = v12 & 1;
  else
    v30 = 0;
  v31 = v8;
  if (v21 < v10)
    v10 = 0;
  v32 = v21 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v31 & 1) != 0)
    {
      v33 = v14 + 4;
      v35 = ((((16777473 * (unint64_t)(224 * v14[1])) >> 32) >> 8)
           + (((16777473 * (unint64_t)(224 * v14[3])) >> 32) >> 8)
           + 33) >> 1;
      *v20 = ((((16777473 * (unint64_t)(224 * *v14)) >> 32) >> 8)
            + (((16777473 * (unint64_t)(224 * v14[2])) >> 32) >> 8)
            + 33) >> 1;
      v20[1] = v35;
      v34 = v20 + 2;
    }
    else
    {
      v33 = v14;
      v34 = v20;
    }
    if (v21 != v10)
    {
      v36 = 0;
      do
      {
        v37 = &v34[v36];
        v38 = ((((16777473 * (unint64_t)(224 * v33[1])) >> 32) >> 8)
             + (((16777473 * (unint64_t)(224 * v33[3])) >> 32) >> 8)
             + 33) >> 1;
        *v37 = ((((16777473 * (unint64_t)(224 * *v33)) >> 32) >> 8)
              + (((16777473 * (unint64_t)(224 * v33[2])) >> 32) >> 8)
              + 33) >> 1;
        v37[1] = v38;
        v36 += 2;
        v33 += 4;
      }
      while (v36 < v32);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v20 += v19;
  }
  if (v9 == v30)
  {
    v39 = 0;
  }
  else
  {
    v40 = 0;
    v39 = v9 - v30;
    do
    {
      v41 = v14;
      v42 = v20;
      if ((v31 & 1) != 0)
      {
        v41 = v14 + 4;
        v43 = ((((16777473 * (unint64_t)(224 * v14[1])) >> 32) >> 8)
             + (((16777473 * (unint64_t)(224 * v14[3])) >> 32) >> 8)
             + 33) >> 1;
        *v20 = ((((16777473 * (unint64_t)(224 * *v14)) >> 32) >> 8)
              + (((16777473 * (unint64_t)(224 * v14[2])) >> 32) >> 8)
              + 33) >> 1;
        v20[1] = v43;
        v42 = v20 + 2;
      }
      if (v21 != v10)
      {
        v44 = 0;
        do
        {
          v45 = &v42[v44];
          v46 = ((((16777473 * (unint64_t)(224 * v41[1])) >> 32) >> 8)
               + (((16777473 * (unint64_t)(224 * v41[3])) >> 32) >> 8)
               + 33) >> 1;
          *v45 = ((((16777473 * (unint64_t)(224 * *v41)) >> 32) >> 8)
                + (((16777473 * (unint64_t)(224 * v41[2])) >> 32) >> 8)
                + 33) >> 1;
          v45[1] = v46;
          v44 += 2;
          v41 += 4;
        }
        while (v44 < v32);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v29 < v9)
  {
    if ((v31 & 1) != 0)
    {
      v47 = *v14;
      v48 = v14[1];
      v49 = v14[2];
      v50 = v14[3];
      v14 += 4;
      *v20 = ((((16777473 * (unint64_t)(224 * v47)) >> 32) >> 8)
            + (((16777473 * (unint64_t)(224 * v49)) >> 32) >> 8)
            + 33) >> 1;
      v20[1] = ((((16777473 * (unint64_t)(224 * v48)) >> 32) >> 8)
              + (((16777473 * (unint64_t)(224 * v50)) >> 32) >> 8)
              + 33) >> 1;
      v20 += 2;
    }
    if (v21 != v10)
    {
      v51 = 0;
      do
      {
        v52 = &v20[v51];
        v53 = ((((16777473 * (unint64_t)(224 * v14[1])) >> 32) >> 8)
             + (((16777473 * (unint64_t)(224 * v14[3])) >> 32) >> 8)
             + 33) >> 1;
        *v52 = ((((16777473 * (unint64_t)(224 * *v14)) >> 32) >> 8)
              + (((16777473 * (unint64_t)(224 * v14[2])) >> 32) >> 8)
              + 33) >> 1;
        v52[1] = v53;
        v51 += 2;
        v14 += 4;
      }
      while (v51 < v32);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_sf44_422v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  unsigned __int16 *v33;
  _BYTE *v34;
  int v35;
  unint64_t v36;
  _BYTE *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unsigned __int16 *v41;
  _BYTE *v42;
  int v43;
  unint64_t v44;
  _BYTE *v45;
  unint64_t v46;
  int v47;
  int v48;
  unint64_t v49;
  _BYTE *v50;
  unint64_t v51;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = v10 + v9;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = a8[1];
  v20 = (_BYTE *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v22 = v17 - v16;
  if (v21 >= v22)
    v21 = v22;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = *a7 + *a8 * v18 + v16;
    v27 = *a3 + *a4 * v12 + 2 * v11;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
          *(_BYTE *)(v26 + i) = ((unsigned __int16)((16777473
                                                   * (unint64_t)(219
                                                                      * *(unsigned __int16 *)(v27 + 2 * i))) >> 32) >> 8)
                              + 16;
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v8);
    v9 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40);
    v10 = v9 & 1;
  }
  v29 = v12 & 1;
  if (v8 >= v29)
    v30 = v12 & 1;
  else
    v30 = 0;
  v31 = v9;
  if (v21 < v10)
    v10 = 0;
  v32 = v21 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v31 & 1) != 0)
    {
      v35 = v14[1];
      v33 = v14 + 4;
      *v20 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v14)) >> 32) >> 8) + 16;
      v20[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v35)) >> 32) >> 8) + 16;
      v34 = v20 + 2;
    }
    else
    {
      v33 = v14;
      v34 = v20;
    }
    if (v21 != v10)
    {
      v36 = 0;
      do
      {
        v37 = &v34[v36];
        v38 = (16777473 * (unint64_t)(224 * v33[1])) >> 40;
        *v37 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v33)) >> 32) >> 8) + 16;
        v37[1] = v38 + 16;
        v36 += 2;
        v33 += 4;
      }
      while (v36 < v32);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v20 += v19;
  }
  if (v8 == v30)
  {
    v39 = 0;
  }
  else
  {
    v40 = 0;
    v39 = v8 - v30;
    do
    {
      v41 = v14;
      v42 = v20;
      if ((v31 & 1) != 0)
      {
        v43 = v14[1];
        v41 = v14 + 4;
        *v20 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v14)) >> 32) >> 8) + 16;
        v20[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v43)) >> 32) >> 8) + 16;
        v42 = v20 + 2;
      }
      if (v21 != v10)
      {
        v44 = 0;
        do
        {
          v45 = &v42[v44];
          v46 = (16777473 * (unint64_t)(224 * v41[1])) >> 40;
          *v45 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v41)) >> 32) >> 8) + 16;
          v45[1] = v46 + 16;
          v44 += 2;
          v41 += 4;
        }
        while (v44 < v32);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v29 < v8)
  {
    if ((v31 & 1) != 0)
    {
      v47 = *v14;
      v48 = v14[1];
      v14 += 4;
      *v20 = ((unsigned __int16)((16777473 * (unint64_t)(224 * v47)) >> 32) >> 8) + 16;
      v20[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v48)) >> 32) >> 8) + 16;
      v20 += 2;
    }
    if (v21 != v10)
    {
      v49 = 0;
      do
      {
        v50 = &v20[v49];
        v51 = (16777473 * (unint64_t)(224 * v14[1])) >> 40;
        *v50 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v14)) >> 32) >> 8) + 16;
        v50[1] = v51 + 16;
        v49 += 2;
        v14 += 4;
      }
      while (v49 < v32);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sf44_422f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  unsigned __int16 *v33;
  _BYTE *v34;
  unsigned int v35;
  unint64_t v36;
  _BYTE *v37;
  unsigned int v38;
  unint64_t v39;
  uint64_t v40;
  unsigned __int16 *v41;
  _BYTE *v42;
  unsigned int v43;
  unint64_t v44;
  _BYTE *v45;
  unsigned int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  unint64_t v51;
  _BYTE *v52;
  unsigned int v53;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = v10 + v9;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = a8[1];
  v20 = (_BYTE *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v22 = v17 - v16;
  if (v21 >= v22)
    v21 = v22;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = *a7 + *a8 * v18 + v16;
    v27 = *a3 + *a4 * v12 + 2 * v11;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
          *(_BYTE *)(v26 + i) = *(_WORD *)(v27 + 2 * i);
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v8);
    v9 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40);
    v10 = v9 & 1;
  }
  v29 = v12 & 1;
  if (v8 >= v29)
    v30 = v12 & 1;
  else
    v30 = 0;
  v31 = v9;
  if (v21 < v10)
    v10 = 0;
  v32 = v21 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v31 & 1) != 0)
    {
      v33 = v14 + 4;
      v35 = (v14[1] / 0x101u + v14[3] / 0x101u + 1) >> 1;
      *v20 = (*v14 / 0x101u + v14[2] / 0x101u + 1) >> 1;
      v20[1] = v35;
      v34 = v20 + 2;
    }
    else
    {
      v33 = v14;
      v34 = v20;
    }
    if (v21 != v10)
    {
      v36 = 0;
      do
      {
        v37 = &v34[v36];
        v38 = (v33[1] / 0x101u + v33[3] / 0x101u + 1) >> 1;
        *v37 = (*v33 / 0x101u + v33[2] / 0x101u + 1) >> 1;
        v37[1] = v38;
        v36 += 2;
        v33 += 4;
      }
      while (v36 < v32);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v20 += v19;
  }
  if (v8 == v30)
  {
    v39 = 0;
  }
  else
  {
    v40 = 0;
    v39 = v8 - v30;
    do
    {
      v41 = v14;
      v42 = v20;
      if ((v31 & 1) != 0)
      {
        v41 = v14 + 4;
        v43 = (v14[1] / 0x101u + v14[3] / 0x101u + 1) >> 1;
        *v20 = (*v14 / 0x101u + v14[2] / 0x101u + 1) >> 1;
        v20[1] = v43;
        v42 = v20 + 2;
      }
      if (v21 != v10)
      {
        v44 = 0;
        do
        {
          v45 = &v42[v44];
          v46 = (v41[1] / 0x101u + v41[3] / 0x101u + 1) >> 1;
          *v45 = (*v41 / 0x101u + v41[2] / 0x101u + 1) >> 1;
          v45[1] = v46;
          v44 += 2;
          v41 += 4;
        }
        while (v44 < v32);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v29 < v8)
  {
    if ((v31 & 1) != 0)
    {
      v47 = *v14;
      v48 = v14[1];
      v49 = v14[2];
      v50 = v14[3];
      v14 += 4;
      *v20 = (((65281 * v47) >> 24) + ((65281 * v49) >> 24) + 1) >> 1;
      v20[1] = (((65281 * v48) >> 24) + ((65281 * v50) >> 24) + 1) >> 1;
      v20 += 2;
    }
    if (v21 != v10)
    {
      v51 = 0;
      do
      {
        v52 = &v20[v51];
        v53 = (v14[1] / 0x101u + v14[3] / 0x101u + 1) >> 1;
        *v52 = (*v14 / 0x101u + v14[2] / 0x101u + 1) >> 1;
        v52[1] = v53;
        v51 += 2;
        v14 += 4;
      }
      while (v51 < v32);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_sf44_422f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  _WORD *v33;
  _BYTE *v34;
  __int16 v35;
  unint64_t v36;
  _BYTE *v37;
  __int16 v38;
  unint64_t v39;
  uint64_t v40;
  _WORD *v41;
  _BYTE *v42;
  __int16 v43;
  unint64_t v44;
  _BYTE *v45;
  __int16 v46;
  __int16 v47;
  __int16 v48;
  unint64_t v49;
  _BYTE *v50;
  __int16 v51;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = v10 + v9;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (_WORD *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = a8[1];
  v20 = (_BYTE *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v22 = v17 - v16;
  if (v21 >= v22)
    v21 = v22;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = *a7 + *a8 * v18 + v16;
    v27 = *a3 + *a4 * v12 + 2 * v11;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
          *(_BYTE *)(v26 + i) = *(_WORD *)(v27 + 2 * i);
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v8);
    v9 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40);
    v10 = v9 & 1;
  }
  v29 = v12 & 1;
  if (v8 >= v29)
    v30 = v12 & 1;
  else
    v30 = 0;
  v31 = v9;
  if (v21 < v10)
    v10 = 0;
  v32 = v21 - v10;
  if ((v12 & 1) != 0)
  {
    if ((v31 & 1) != 0)
    {
      v33 = v14 + 4;
      v35 = v14[1] / 0x101u;
      *v20 = *v14 / 0x101u;
      v20[1] = v35;
      v34 = v20 + 2;
    }
    else
    {
      v33 = v14;
      v34 = v20;
    }
    if (v21 != v10)
    {
      v36 = 0;
      do
      {
        v37 = &v34[v36];
        v38 = v33[1] / 0x101u;
        *v37 = *v33;
        v37[1] = v38;
        v36 += 2;
        v33 += 4;
      }
      while (v36 < v32);
    }
    v14 = (_WORD *)((char *)v14 + v13);
    v20 += v19;
  }
  if (v8 == v30)
  {
    v39 = 0;
  }
  else
  {
    v40 = 0;
    v39 = v8 - v30;
    do
    {
      v41 = v14;
      v42 = v20;
      if ((v31 & 1) != 0)
      {
        v41 = v14 + 4;
        v43 = v14[1] / 0x101u;
        *v20 = *v14;
        v20[1] = v43;
        v42 = v20 + 2;
      }
      if (v21 != v10)
      {
        v44 = 0;
        do
        {
          v45 = &v42[v44];
          v46 = v41[1] / 0x101u;
          *v45 = *v41;
          v45[1] = v46;
          v44 += 2;
          v41 += 4;
        }
        while (v44 < v32);
      }
      v14 = (_WORD *)((char *)v14 + v13);
      v20 += v19;
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v29 < v8)
  {
    if ((v31 & 1) != 0)
    {
      v47 = *v14;
      v48 = v14[1];
      v14 += 4;
      *v20 = v47;
      v20[1] = v48;
      v20 += 2;
    }
    if (v21 != v10)
    {
      v49 = 0;
      do
      {
        v50 = &v20[v49];
        v51 = v14[1] / 0x101u;
        *v50 = *v14;
        v50[1] = v51;
        v49 += 2;
        v14 += 4;
      }
      while (v49 < v32);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sf44_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  unint64_t v35;
  unint64_t v36;
  unsigned __int16 *v37;
  _BYTE *v38;
  unsigned __int16 *v39;
  int v40;
  int v41;
  unsigned int v42;
  unint64_t v43;
  unsigned __int16 *v44;
  _BYTE *v45;
  unsigned int v46;
  unint64_t v47;
  unint64_t v48;
  unsigned __int16 *v49;
  _BYTE *v50;
  unsigned __int16 *v51;
  int v52;
  int v53;
  unsigned int v54;
  unint64_t v55;
  unsigned __int16 *v56;
  _BYTE *v57;
  unsigned int v58;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = v10 + v9;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = a4[1];
  v15 = (unsigned __int16 *)(a3[1] + v14 * (v12 + v8) + 4 * (v10 + v9));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = a8[1];
  v21 = (_BYTE *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v22 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  v24 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE) - v13;
  if (v24 >= v19 - v18)
    v24 = v19 - v18;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a3 + *a4 * v13 + 2 * v11;
    v28 = *a8;
    v29 = a8[2];
    if (v13 >= v8)
      v30 = 0;
    else
      v30 = *a4;
    v31 = v27 + v30;
    v32 = a7[2] + v29 * v18 + v16;
    v33 = *a7 + v28 * v18 + v16;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          *(_BYTE *)(v32 + i) = -1;
          *(_BYTE *)(v33 + i) = ((unsigned __int16)((16777473
                                                   * (unint64_t)(219
                                                                      * *(unsigned __int16 *)(v31 + 2 * i))) >> 32) >> 8)
                              + 16;
        }
      }
      v31 += v26;
      v33 += v28;
      v32 += v29;
      ++v25;
    }
    while (v25 != v24);
    v9 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v9 & 1;
  }
  if (v24 >= v12)
    v35 = v12;
  else
    v35 = 0;
  if (v22 < v10)
    v10 = 0;
  v36 = v22 - v10;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v39 = (unsigned __int16 *)((char *)v15 + v14 + 4);
      v40 = *v39;
      v41 = v39[1];
      v37 = v15 + 4;
      v42 = ((((16777473 * (unint64_t)(224 * v15[1])) >> 32) >> 8)
           + (((16777473 * (unint64_t)(224 * v15[3])) >> 32) >> 8)
           + (((16777473
                            * (unint64_t)(224 * *(unsigned __int16 *)((char *)v15 + v14 + 2))) >> 32) >> 8)
           + (((16777473 * (unint64_t)(224 * v41)) >> 32) >> 8)
           + 66) >> 2;
      *v21 = ((((16777473 * (unint64_t)(224 * *v15)) >> 32) >> 8)
            + (((16777473 * (unint64_t)(224 * v15[2])) >> 32) >> 8)
            + (((16777473
                             * (unint64_t)(224 * *(unsigned __int16 *)((char *)v15 + v14))) >> 32) >> 8)
            + (((16777473 * (unint64_t)(224 * v40)) >> 32) >> 8)
            + 66) >> 2;
      v21[1] = v42;
      v38 = v21 + 2;
    }
    else
    {
      v37 = v15;
      v38 = v21;
    }
    if (v22 != v10)
    {
      v43 = 0;
      v44 = v37 + 2;
      do
      {
        v45 = &v38[v43];
        v46 = ((((16777473 * (unint64_t)(224 * *(v44 - 1))) >> 32) >> 8)
             + (((16777473 * (unint64_t)(224 * v44[1])) >> 32) >> 8)
             + (((16777473
                              * (unint64_t)(224 * *(unsigned __int16 *)((char *)v44 + v14 - 2))) >> 32) >> 8)
             + (((16777473
                              * (unint64_t)(224 * *(unsigned __int16 *)((char *)v44 + v14 + 2))) >> 32) >> 8)
             + 66) >> 2;
        *v45 = ((((16777473 * (unint64_t)(224 * *(v44 - 2))) >> 32) >> 8)
              + (((16777473 * (unint64_t)(224 * *v44)) >> 32) >> 8)
              + (((16777473
                               * (unint64_t)(224 * *(unsigned __int16 *)((char *)v44 + v14 - 4))) >> 32) >> 8)
              + (((16777473
                               * (unint64_t)(224 * *(unsigned __int16 *)((char *)v44 + v14))) >> 32) >> 8)
              + 66) >> 2;
        v45[1] = v46;
        v43 += 2;
        v44 += 4;
      }
      while (v43 < v36);
    }
    v15 += v14;
    v21 += v20;
  }
  if (v24 != v35)
  {
    v47 = 0;
    v48 = v24 - v35;
    do
    {
      v49 = v15;
      v50 = v21;
      if ((v9 & 1) != 0)
      {
        v51 = (unsigned __int16 *)((char *)v15 + v14 + 4);
        v52 = *v51;
        v53 = v51[1];
        v49 = v15 + 4;
        v54 = ((((16777473 * (unint64_t)(224 * v15[1])) >> 32) >> 8)
             + (((16777473 * (unint64_t)(224 * v15[3])) >> 32) >> 8)
             + (((16777473
                              * (unint64_t)(224 * *(unsigned __int16 *)((char *)v15 + v14 + 2))) >> 32) >> 8)
             + (((16777473 * (unint64_t)(224 * v53)) >> 32) >> 8)
             + 66) >> 2;
        *v21 = ((((16777473 * (unint64_t)(224 * *v15)) >> 32) >> 8)
              + (((16777473 * (unint64_t)(224 * v15[2])) >> 32) >> 8)
              + (((16777473
                               * (unint64_t)(224 * *(unsigned __int16 *)((char *)v15 + v14))) >> 32) >> 8)
              + (((16777473 * (unint64_t)(224 * v52)) >> 32) >> 8)
              + 66) >> 2;
        v21[1] = v54;
        v50 = v21 + 2;
      }
      if (v22 != v10)
      {
        v55 = 0;
        v56 = v49 + 2;
        do
        {
          v57 = &v50[v55];
          v58 = ((((16777473 * (unint64_t)(224 * *(v56 - 1))) >> 32) >> 8)
               + (((16777473 * (unint64_t)(224 * v56[1])) >> 32) >> 8)
               + (((16777473
                                * (unint64_t)(224 * *(unsigned __int16 *)((char *)v56 + v14 - 2))) >> 32) >> 8)
               + (((16777473
                                * (unint64_t)(224 * *(unsigned __int16 *)((char *)v56 + v14 + 2))) >> 32) >> 8)
               + 66) >> 2;
          *v57 = ((((16777473 * (unint64_t)(224 * *(v56 - 2))) >> 32) >> 8)
                + (((16777473 * (unint64_t)(224 * *v56)) >> 32) >> 8)
                + (((16777473
                                 * (unint64_t)(224 * *(unsigned __int16 *)((char *)v56 + v14 - 4))) >> 32) >> 8)
                + (((16777473
                                 * (unint64_t)(224 * *(unsigned __int16 *)((char *)v56 + v14))) >> 32) >> 8)
                + 66) >> 2;
          v57[1] = v58;
          v55 += 2;
          v56 += 4;
        }
        while (v55 < v36);
      }
      v15 += v14;
      v21 += v20;
      v47 += 2;
    }
    while (v47 < v48);
  }
  return 0;
}

uint64_t vt_CopyDec_sf44_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  unint64_t v35;
  unint64_t v36;
  unsigned __int16 *v37;
  _BYTE *v38;
  int v39;
  unint64_t v40;
  _BYTE *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unsigned __int16 *v46;
  _BYTE *v47;
  int v48;
  unint64_t v49;
  _BYTE *v50;
  unint64_t v51;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = v10 + v9;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = a4[1];
  v15 = (unsigned __int16 *)(a3[1] + v14 * (v12 + v8) + 4 * (v10 + v9));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = a8[1];
  v21 = (_BYTE *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v22 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  v24 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE) - v13;
  if (v24 >= v19 - v18)
    v24 = v19 - v18;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a3 + *a4 * v13 + 2 * v11;
    v28 = *a8;
    v29 = a8[2];
    if (v13 >= v8)
      v30 = 0;
    else
      v30 = *a4;
    v31 = v27 + v30;
    v32 = a7[2] + v29 * v18 + v16;
    v33 = *a7 + v28 * v18 + v16;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          *(_BYTE *)(v32 + i) = -1;
          *(_BYTE *)(v33 + i) = ((unsigned __int16)((16777473
                                                   * (unint64_t)(219
                                                                      * *(unsigned __int16 *)(v31 + 2 * i))) >> 32) >> 8)
                              + 16;
        }
      }
      v31 += v26;
      v33 += v28;
      v32 += v29;
      ++v25;
    }
    while (v25 != v24);
    v9 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v9 & 1;
  }
  if (v24 >= v12)
    v35 = v12;
  else
    v35 = 0;
  if (v22 < v10)
    v10 = 0;
  v36 = v22 - v10;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v39 = v15[1];
      v37 = v15 + 4;
      *v21 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v15)) >> 32) >> 8) + 16;
      v21[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v39)) >> 32) >> 8) + 16;
      v38 = v21 + 2;
    }
    else
    {
      v37 = v15;
      v38 = v21;
    }
    if (v22 != v10)
    {
      v40 = 0;
      do
      {
        v41 = &v38[v40];
        v42 = (16777473 * (unint64_t)(224 * v37[1])) >> 40;
        *v41 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v37)) >> 32) >> 8) + 16;
        v41[1] = v42 + 16;
        v40 += 2;
        v37 += 4;
      }
      while (v40 < v36);
    }
    v15 += v14;
    v21 += v20;
  }
  if (v24 != v35)
  {
    v43 = 0;
    v44 = v24 - v35;
    v45 = 2 * v14;
    do
    {
      v46 = v15;
      v47 = v21;
      if ((v9 & 1) != 0)
      {
        v48 = v15[1];
        v46 = v15 + 4;
        *v21 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v15)) >> 32) >> 8) + 16;
        v21[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v48)) >> 32) >> 8) + 16;
        v47 = v21 + 2;
      }
      if (v22 != v10)
      {
        v49 = 0;
        do
        {
          v50 = &v47[v49];
          v51 = (16777473 * (unint64_t)(224 * v46[1])) >> 40;
          *v50 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v46)) >> 32) >> 8) + 16;
          v50[1] = v51 + 16;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v36);
      }
      v15 = (unsigned __int16 *)((char *)v15 + v45);
      v21 += v20;
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_CopyAvg_sf44_420v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  unint64_t v33;
  unsigned __int16 *v34;
  _BYTE *v35;
  unsigned __int16 *v36;
  int v37;
  int v38;
  unsigned int v39;
  unint64_t v40;
  unsigned __int16 *v41;
  _BYTE *v42;
  unsigned int v43;
  unint64_t v44;
  unint64_t v45;
  unsigned __int16 *v46;
  _BYTE *v47;
  unsigned __int16 *v48;
  int v49;
  int v50;
  unsigned int v51;
  unint64_t v52;
  unsigned __int16 *v53;
  _BYTE *v54;
  unsigned int v55;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = a4[1];
  v15 = (unsigned __int16 *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = a8[1];
  v21 = (_BYTE *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v22 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  v24 = v19 - v18;
  if (((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v13 < v19 - v18)
    v24 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v13;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    if (v13 >= v9)
      v28 = 0;
    else
      v28 = *a4;
    v29 = *a3 + *a4 * v13 + 2 * v11 + v28;
    v30 = *a7 + v27 * v18 + v16;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_BYTE *)(v30 + i) = ((unsigned __int16)((16777473
                                                   * (unint64_t)(219
                                                                      * *(unsigned __int16 *)(v29 + 2 * i))) >> 32) >> 8)
                              + 16;
      }
      v29 += v26;
      v30 += v27;
      ++v25;
    }
    while (v25 != v24);
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v24 >= v12)
    v32 = v12;
  else
    v32 = 0;
  if (v22 < v10)
    v10 = 0;
  v33 = v22 - v10;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v36 = (unsigned __int16 *)((char *)v15 + v14 + 4);
      v37 = *v36;
      v38 = v36[1];
      v34 = v15 + 4;
      v39 = ((((16777473 * (unint64_t)(224 * v15[1])) >> 32) >> 8)
           + (((16777473 * (unint64_t)(224 * v15[3])) >> 32) >> 8)
           + (((16777473
                            * (unint64_t)(224 * *(unsigned __int16 *)((char *)v15 + v14 + 2))) >> 32) >> 8)
           + (((16777473 * (unint64_t)(224 * v38)) >> 32) >> 8)
           + 66) >> 2;
      *v21 = ((((16777473 * (unint64_t)(224 * *v15)) >> 32) >> 8)
            + (((16777473 * (unint64_t)(224 * v15[2])) >> 32) >> 8)
            + (((16777473
                             * (unint64_t)(224 * *(unsigned __int16 *)((char *)v15 + v14))) >> 32) >> 8)
            + (((16777473 * (unint64_t)(224 * v37)) >> 32) >> 8)
            + 66) >> 2;
      v21[1] = v39;
      v35 = v21 + 2;
    }
    else
    {
      v34 = v15;
      v35 = v21;
    }
    if (v22 != v10)
    {
      v40 = 0;
      v41 = v34 + 2;
      do
      {
        v42 = &v35[v40];
        v43 = ((((16777473 * (unint64_t)(224 * *(v41 - 1))) >> 32) >> 8)
             + (((16777473 * (unint64_t)(224 * v41[1])) >> 32) >> 8)
             + (((16777473
                              * (unint64_t)(224 * *(unsigned __int16 *)((char *)v41 + v14 - 2))) >> 32) >> 8)
             + (((16777473
                              * (unint64_t)(224 * *(unsigned __int16 *)((char *)v41 + v14 + 2))) >> 32) >> 8)
             + 66) >> 2;
        *v42 = ((((16777473 * (unint64_t)(224 * *(v41 - 2))) >> 32) >> 8)
              + (((16777473 * (unint64_t)(224 * *v41)) >> 32) >> 8)
              + (((16777473
                               * (unint64_t)(224 * *(unsigned __int16 *)((char *)v41 + v14 - 4))) >> 32) >> 8)
              + (((16777473
                               * (unint64_t)(224 * *(unsigned __int16 *)((char *)v41 + v14))) >> 32) >> 8)
              + 66) >> 2;
        v42[1] = v43;
        v40 += 2;
        v41 += 4;
      }
      while (v40 < v33);
    }
    v15 += v14;
    v21 += v20;
  }
  if (v24 != v32)
  {
    v44 = 0;
    v45 = v24 - v32;
    do
    {
      v46 = v15;
      v47 = v21;
      if ((v8 & 1) != 0)
      {
        v48 = (unsigned __int16 *)((char *)v15 + v14 + 4);
        v49 = *v48;
        v50 = v48[1];
        v46 = v15 + 4;
        v51 = ((((16777473 * (unint64_t)(224 * v15[1])) >> 32) >> 8)
             + (((16777473 * (unint64_t)(224 * v15[3])) >> 32) >> 8)
             + (((16777473
                              * (unint64_t)(224 * *(unsigned __int16 *)((char *)v15 + v14 + 2))) >> 32) >> 8)
             + (((16777473 * (unint64_t)(224 * v50)) >> 32) >> 8)
             + 66) >> 2;
        *v21 = ((((16777473 * (unint64_t)(224 * *v15)) >> 32) >> 8)
              + (((16777473 * (unint64_t)(224 * v15[2])) >> 32) >> 8)
              + (((16777473
                               * (unint64_t)(224 * *(unsigned __int16 *)((char *)v15 + v14))) >> 32) >> 8)
              + (((16777473 * (unint64_t)(224 * v49)) >> 32) >> 8)
              + 66) >> 2;
        v21[1] = v51;
        v47 = v21 + 2;
      }
      if (v22 != v10)
      {
        v52 = 0;
        v53 = v46 + 2;
        do
        {
          v54 = &v47[v52];
          v55 = ((((16777473 * (unint64_t)(224 * *(v53 - 1))) >> 32) >> 8)
               + (((16777473 * (unint64_t)(224 * v53[1])) >> 32) >> 8)
               + (((16777473
                                * (unint64_t)(224 * *(unsigned __int16 *)((char *)v53 + v14 - 2))) >> 32) >> 8)
               + (((16777473
                                * (unint64_t)(224 * *(unsigned __int16 *)((char *)v53 + v14 + 2))) >> 32) >> 8)
               + 66) >> 2;
          *v54 = ((((16777473 * (unint64_t)(224 * *(v53 - 2))) >> 32) >> 8)
                + (((16777473 * (unint64_t)(224 * *v53)) >> 32) >> 8)
                + (((16777473
                                 * (unint64_t)(224 * *(unsigned __int16 *)((char *)v53 + v14 - 4))) >> 32) >> 8)
                + (((16777473
                                 * (unint64_t)(224 * *(unsigned __int16 *)((char *)v53 + v14))) >> 32) >> 8)
                + 66) >> 2;
          v54[1] = v55;
          v52 += 2;
          v53 += 4;
        }
        while (v52 < v33);
      }
      v15 += v14;
      v21 += v20;
      v44 += 2;
    }
    while (v44 < v45);
  }
  return 0;
}

uint64_t vt_CopyDec_sf44_420v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  unint64_t v33;
  unsigned __int16 *v34;
  _BYTE *v35;
  int v36;
  unint64_t v37;
  _BYTE *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unsigned __int16 *v43;
  _BYTE *v44;
  int v45;
  unint64_t v46;
  _BYTE *v47;
  unint64_t v48;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = a4[1];
  v15 = (unsigned __int16 *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = a8[1];
  v21 = (_BYTE *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v22 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  v24 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v13;
  if (v24 >= v19 - v18)
    v24 = v19 - v18;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    if (v13 >= v9)
      v28 = 0;
    else
      v28 = *a4;
    v29 = *a3 + *a4 * v13 + 2 * v11 + v28;
    v30 = *a7 + v27 * v18 + v16;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_BYTE *)(v30 + i) = ((unsigned __int16)((16777473
                                                   * (unint64_t)(219
                                                                      * *(unsigned __int16 *)(v29 + 2 * i))) >> 32) >> 8)
                              + 16;
      }
      v29 += v26;
      v30 += v27;
      ++v25;
    }
    while (v25 != v24);
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v24 >= v12)
    v32 = v12;
  else
    v32 = 0;
  if (v22 < v10)
    v10 = 0;
  v33 = v22 - v10;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v36 = v15[1];
      v34 = v15 + 4;
      *v21 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v15)) >> 32) >> 8) + 16;
      v21[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v36)) >> 32) >> 8) + 16;
      v35 = v21 + 2;
    }
    else
    {
      v34 = v15;
      v35 = v21;
    }
    if (v22 != v10)
    {
      v37 = 0;
      do
      {
        v38 = &v35[v37];
        v39 = (16777473 * (unint64_t)(224 * v34[1])) >> 40;
        *v38 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v34)) >> 32) >> 8) + 16;
        v38[1] = v39 + 16;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v15 += v14;
    v21 += v20;
  }
  if (v24 != v32)
  {
    v40 = 0;
    v41 = v24 - v32;
    v42 = 2 * v14;
    do
    {
      v43 = v15;
      v44 = v21;
      if ((v8 & 1) != 0)
      {
        v45 = v15[1];
        v43 = v15 + 4;
        *v21 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v15)) >> 32) >> 8) + 16;
        v21[1] = ((unsigned __int16)((16777473 * (unint64_t)(224 * v45)) >> 32) >> 8) + 16;
        v44 = v21 + 2;
      }
      if (v22 != v10)
      {
        v46 = 0;
        do
        {
          v47 = &v44[v46];
          v48 = (16777473 * (unint64_t)(224 * v43[1])) >> 40;
          *v47 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v43)) >> 32) >> 8) + 16;
          v47[1] = v48 + 16;
          v46 += 2;
          v43 += 4;
        }
        while (v46 < v33);
      }
      v15 = (unsigned __int16 *)((char *)v15 + v42);
      v21 += v20;
      v40 += 2;
    }
    while (v40 < v41);
  }
  return 0;
}

uint64_t vt_CopyAvg_sf44_420f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  unint64_t v33;
  unsigned __int16 *v34;
  _BYTE *v35;
  unsigned __int16 *v36;
  int v37;
  int v38;
  unsigned int v39;
  unint64_t v40;
  unsigned __int16 *v41;
  _BYTE *v42;
  unsigned int v43;
  unint64_t v44;
  unint64_t v45;
  unsigned __int16 *v46;
  _BYTE *v47;
  unsigned __int16 *v48;
  int v49;
  int v50;
  unsigned int v51;
  unint64_t v52;
  unsigned __int16 *v53;
  _BYTE *v54;
  unsigned int v55;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = a4[1];
  v15 = (unsigned __int16 *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = a8[1];
  v21 = (_BYTE *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v22 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  v24 = v19 - v18;
  if (((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v13 < v19 - v18)
    v24 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v13;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    if (v13 >= v9)
      v28 = 0;
    else
      v28 = *a4;
    v29 = *a3 + *a4 * v13 + 2 * v11 + v28;
    v30 = *a7 + v27 * v18 + v16;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_BYTE *)(v30 + i) = *(_WORD *)(v29 + 2 * i);
      }
      v29 += v26;
      v30 += v27;
      ++v25;
    }
    while (v25 != v24);
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v24 >= v12)
    v32 = v12;
  else
    v32 = 0;
  if (v22 < v10)
    v10 = 0;
  v33 = v22 - v10;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v36 = (unsigned __int16 *)((char *)v15 + v14 + 4);
      v37 = *v36;
      v38 = v36[1];
      v34 = v15 + 4;
      v39 = (v15[1] / 0x101u
           + *(unsigned __int16 *)((char *)v15 + v14 + 2) / 0x101u
           + v15[3] / 0x101u
           + ((65281 * v38) >> 24)
           + 2) >> 2;
      *v21 = (*v15 / 0x101u
            + *(unsigned __int16 *)((char *)v15 + v14) / 0x101u
            + v15[2] / 0x101u
            + ((65281 * v37) >> 24)
            + 2) >> 2;
      v21[1] = v39;
      v35 = v21 + 2;
    }
    else
    {
      v34 = v15;
      v35 = v21;
    }
    if (v22 != v10)
    {
      v40 = 0;
      v41 = v34 + 2;
      do
      {
        v42 = &v35[v40];
        v43 = (*(v41 - 1) / 0x101u
             + *(unsigned __int16 *)((char *)v41 + v14 - 2) / 0x101u
             + v41[1] / 0x101u
             + *(unsigned __int16 *)((char *)v41 + v14 + 2) / 0x101u
             + 2) >> 2;
        *v42 = (*(v41 - 2) / 0x101u
              + *(unsigned __int16 *)((char *)v41 + v14 - 4) / 0x101u
              + *v41 / 0x101u
              + *(unsigned __int16 *)((char *)v41 + v14) / 0x101u
              + 2) >> 2;
        v42[1] = v43;
        v40 += 2;
        v41 += 4;
      }
      while (v40 < v33);
    }
    v15 += v14;
    v21 += v20;
  }
  if (v24 != v32)
  {
    v44 = 0;
    v45 = v24 - v32;
    do
    {
      v46 = v15;
      v47 = v21;
      if ((v8 & 1) != 0)
      {
        v48 = (unsigned __int16 *)((char *)v15 + v14 + 4);
        v49 = *v48;
        v50 = v48[1];
        v46 = v15 + 4;
        v51 = (v15[1] / 0x101u
             + *(unsigned __int16 *)((char *)v15 + v14 + 2) / 0x101u
             + v15[3] / 0x101u
             + ((65281 * v50) >> 24)
             + 2) >> 2;
        *v21 = (*v15 / 0x101u
              + *(unsigned __int16 *)((char *)v15 + v14) / 0x101u
              + v15[2] / 0x101u
              + ((65281 * v49) >> 24)
              + 2) >> 2;
        v21[1] = v51;
        v47 = v21 + 2;
      }
      if (v22 != v10)
      {
        v52 = 0;
        v53 = v46 + 2;
        do
        {
          v54 = &v47[v52];
          v55 = (*(v53 - 1) / 0x101u
               + *(unsigned __int16 *)((char *)v53 + v14 - 2) / 0x101u
               + v53[1] / 0x101u
               + *(unsigned __int16 *)((char *)v53 + v14 + 2) / 0x101u
               + 2) >> 2;
          *v54 = (*(v53 - 2) / 0x101u
                + *(unsigned __int16 *)((char *)v53 + v14 - 4) / 0x101u
                + *v53 / 0x101u
                + *(unsigned __int16 *)((char *)v53 + v14) / 0x101u
                + 2) >> 2;
          v54[1] = v55;
          v52 += 2;
          v53 += 4;
        }
        while (v52 < v33);
      }
      v15 += v14;
      v21 += v20;
      v44 += 2;
    }
    while (v44 < v45);
  }
  return 0;
}

uint64_t vt_CopyDec_sf44_420f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _WORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  unint64_t v33;
  _WORD *v34;
  _BYTE *v35;
  __int16 v36;
  unint64_t v37;
  _BYTE *v38;
  __int16 v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _WORD *v43;
  _BYTE *v44;
  __int16 v45;
  unint64_t v46;
  _BYTE *v47;
  __int16 v48;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = a4[1];
  v15 = (_WORD *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = a8[1];
  v21 = (_BYTE *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v22 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  v23 = v17 - v16;
  if (v22 >= v23)
    v22 = v23;
  v24 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v13;
  if (v24 >= v19 - v18)
    v24 = v19 - v18;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    if (v13 >= v9)
      v28 = 0;
    else
      v28 = *a4;
    v29 = *a3 + *a4 * v13 + 2 * v11 + v28;
    v30 = *a7 + v27 * v18 + v16;
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_BYTE *)(v30 + i) = *(_WORD *)(v29 + 2 * i);
      }
      v29 += v26;
      v30 += v27;
      ++v25;
    }
    while (v25 != v24);
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v24 >= v12)
    v32 = v12;
  else
    v32 = 0;
  if (v22 < v10)
    v10 = 0;
  v33 = v22 - v10;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v34 = v15 + 4;
      v36 = v15[1] / 0x101u;
      *v21 = *v15 / 0x101u;
      v21[1] = v36;
      v35 = v21 + 2;
    }
    else
    {
      v34 = v15;
      v35 = v21;
    }
    if (v22 != v10)
    {
      v37 = 0;
      do
      {
        v38 = &v35[v37];
        v39 = v34[1] / 0x101u;
        *v38 = *v34;
        v38[1] = v39;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v15 += v14;
    v21 += v20;
  }
  if (v24 != v32)
  {
    v40 = 0;
    v41 = v24 - v32;
    v42 = 2 * v14;
    do
    {
      v43 = v15;
      v44 = v21;
      if ((v8 & 1) != 0)
      {
        v43 = v15 + 4;
        v45 = v15[1] / 0x101u;
        *v21 = *v15;
        v21[1] = v45;
        v44 = v21 + 2;
      }
      if (v22 != v10)
      {
        v46 = 0;
        do
        {
          v47 = &v44[v46];
          v48 = v43[1] / 0x101u;
          *v47 = *v43;
          v47[1] = v48;
          v46 += 2;
          v43 += 4;
        }
        while (v46 < v33);
      }
      v15 = (_WORD *)((char *)v15 + v42);
      v21 += v20;
      v40 += 2;
    }
    while (v40 < v41);
  }
  return 0;
}

uint64_t vt_CopyAvg_sf44_y420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t i;
  unint64_t v35;
  unint64_t v36;
  unsigned __int16 *v37;
  _BYTE *v38;
  _BYTE *v39;
  unsigned __int16 *v40;
  int v41;
  int v42;
  unsigned int v43;
  unint64_t v44;
  unsigned __int16 *v45;
  unsigned int v46;
  unint64_t v47;
  unint64_t v48;
  unsigned __int16 *v49;
  _BYTE *v50;
  _BYTE *v51;
  unsigned __int16 *v52;
  int v53;
  int v54;
  unsigned int v55;
  unint64_t v56;
  unsigned __int16 *v57;
  unsigned int v58;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = a4[1];
  v15 = (unsigned __int16 *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = a8[1];
  v21 = a8[2];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 >> 1));
  v23 = (_BYTE *)(a7[2] + ((unint64_t)(v21 * v18) >> 1) + (v16 >> 1));
  v24 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  v25 = v17 - v16;
  if (v24 >= v25)
    v24 = v25;
  v26 = v19 - v18;
  if (((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v13 < v19 - v18)
    v26 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v13;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v13 + 2 * v11;
    if (v13 >= v9)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v31;
    v33 = *a7 + v29 * v18 + v16;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
          *(_BYTE *)(v33 + i) = ((unsigned __int16)((16777473
                                                   * (unint64_t)(219
                                                                      * *(unsigned __int16 *)(v32 + 2 * i))) >> 32) >> 8)
                              + 16;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v26 >= v12)
    v35 = v12;
  else
    v35 = 0;
  if (v24 < v10)
    v10 = 0;
  v36 = v24 - v10;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v40 = (unsigned __int16 *)((char *)v15 + v14 + 4);
      v41 = *v40;
      v42 = v40[1];
      v37 = v15 + 4;
      v43 = ((((16777473 * (unint64_t)(224 * v15[1])) >> 32) >> 8)
           + (((16777473 * (unint64_t)(224 * v15[3])) >> 32) >> 8)
           + (((16777473
                            * (unint64_t)(224 * *(unsigned __int16 *)((char *)v15 + v14 + 2))) >> 32) >> 8)
           + (((16777473 * (unint64_t)(224 * v42)) >> 32) >> 8)
           + 66) >> 2;
      *v22 = ((((16777473 * (unint64_t)(224 * *v15)) >> 32) >> 8)
            + (((16777473 * (unint64_t)(224 * v15[2])) >> 32) >> 8)
            + (((16777473
                             * (unint64_t)(224 * *(unsigned __int16 *)((char *)v15 + v14))) >> 32) >> 8)
            + (((16777473 * (unint64_t)(224 * v41)) >> 32) >> 8)
            + 66) >> 2;
      v38 = v22 + 1;
      *v23 = v43;
      v39 = v23 + 1;
    }
    else
    {
      v37 = v15;
      v38 = v22;
      v39 = v23;
    }
    if (v24 != v10)
    {
      v44 = 0;
      v45 = v37 + 2;
      do
      {
        v46 = (((16777473 * (unint64_t)(224 * *(v45 - 1))) >> 32) >> 8)
            + (((16777473 * (unint64_t)(224 * v45[1])) >> 32) >> 8)
            + (((16777473
                             * (unint64_t)(224 * *(unsigned __int16 *)((char *)v45 + v14 - 2))) >> 32) >> 8)
            + (((16777473
                             * (unint64_t)(224 * *(unsigned __int16 *)((char *)v45 + v14 + 2))) >> 32) >> 8)
            + 66;
        *v38++ = ((((16777473 * (unint64_t)(224 * *(v45 - 2))) >> 32) >> 8)
                + (((16777473 * (unint64_t)(224 * *v45)) >> 32) >> 8)
                + (((16777473
                                 * (unint64_t)(224 * *(unsigned __int16 *)((char *)v45 + v14 - 4))) >> 32) >> 8)
                + (((16777473
                                 * (unint64_t)(224 * *(unsigned __int16 *)((char *)v45 + v14))) >> 32) >> 8)
                + 66) >> 2;
        *v39++ = v46 >> 2;
        v44 += 2;
        v45 += 4;
      }
      while (v44 < v36);
    }
    v15 += v14;
    v22 += v20;
    v23 += v21;
  }
  if (v26 != v35)
  {
    v47 = 0;
    v48 = v26 - v35;
    do
    {
      v49 = v15;
      v50 = v22;
      v51 = v23;
      if ((v8 & 1) != 0)
      {
        v52 = (unsigned __int16 *)((char *)v15 + v14 + 4);
        v53 = *v52;
        v54 = v52[1];
        v49 = v15 + 4;
        v55 = ((((16777473 * (unint64_t)(224 * v15[1])) >> 32) >> 8)
             + (((16777473 * (unint64_t)(224 * v15[3])) >> 32) >> 8)
             + (((16777473
                              * (unint64_t)(224 * *(unsigned __int16 *)((char *)v15 + v14 + 2))) >> 32) >> 8)
             + (((16777473 * (unint64_t)(224 * v54)) >> 32) >> 8)
             + 66) >> 2;
        *v22 = ((((16777473 * (unint64_t)(224 * *v15)) >> 32) >> 8)
              + (((16777473 * (unint64_t)(224 * v15[2])) >> 32) >> 8)
              + (((16777473
                               * (unint64_t)(224 * *(unsigned __int16 *)((char *)v15 + v14))) >> 32) >> 8)
              + (((16777473 * (unint64_t)(224 * v53)) >> 32) >> 8)
              + 66) >> 2;
        v50 = v22 + 1;
        *v23 = v55;
        v51 = v23 + 1;
      }
      if (v24 != v10)
      {
        v56 = 0;
        v57 = v49 + 2;
        do
        {
          v58 = (((16777473 * (unint64_t)(224 * *(v57 - 1))) >> 32) >> 8)
              + (((16777473 * (unint64_t)(224 * v57[1])) >> 32) >> 8)
              + (((16777473
                               * (unint64_t)(224 * *(unsigned __int16 *)((char *)v57 + v14 - 2))) >> 32) >> 8)
              + (((16777473
                               * (unint64_t)(224 * *(unsigned __int16 *)((char *)v57 + v14 + 2))) >> 32) >> 8)
              + 66;
          *v50++ = ((((16777473 * (unint64_t)(224 * *(v57 - 2))) >> 32) >> 8)
                  + (((16777473 * (unint64_t)(224 * *v57)) >> 32) >> 8)
                  + (((16777473
                                   * (unint64_t)(224 * *(unsigned __int16 *)((char *)v57 + v14 - 4))) >> 32) >> 8)
                  + (((16777473
                                   * (unint64_t)(224 * *(unsigned __int16 *)((char *)v57 + v14))) >> 32) >> 8)
                  + 66) >> 2;
          *v51++ = v58 >> 2;
          v56 += 2;
          v57 += 4;
        }
        while (v56 < v36);
      }
      v15 += v14;
      v22 += v20;
      v23 += v21;
      v47 += 2;
    }
    while (v47 < v48);
  }
  return 0;
}

uint64_t vt_CopyDec_sf44_y420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t i;
  unint64_t v35;
  unint64_t v36;
  unsigned __int16 *v37;
  _BYTE *v38;
  _BYTE *v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unsigned __int16 *v46;
  _BYTE *v47;
  _BYTE *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = a4[1];
  v15 = (unsigned __int16 *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = a8[1];
  v21 = a8[2];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 >> 1));
  v23 = (_BYTE *)(a7[2] + ((unint64_t)(v21 * v18) >> 1) + (v16 >> 1));
  v24 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  v25 = v17 - v16;
  if (v24 >= v25)
    v24 = v25;
  v26 = v19 - v18;
  if (((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v13 < v19 - v18)
    v26 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v13;
  if (v26)
  {
    v27 = 0;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v13 + 2 * v11;
    if (v13 >= v9)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v31;
    v33 = *a7 + v29 * v18 + v16;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
          *(_BYTE *)(v33 + i) = ((unsigned __int16)((16777473
                                                   * (unint64_t)(219
                                                                      * *(unsigned __int16 *)(v32 + 2 * i))) >> 32) >> 8)
                              + 16;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v26 >= v12)
    v35 = v12;
  else
    v35 = 0;
  if (v24 < v10)
    v10 = 0;
  v36 = v24 - v10;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v40 = v15[1];
      v37 = v15 + 4;
      *v22 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v15)) >> 32) >> 8) + 16;
      v38 = v22 + 1;
      *v23 = ((unsigned __int16)((16777473 * (unint64_t)(224 * v40)) >> 32) >> 8) + 16;
      v39 = v23 + 1;
    }
    else
    {
      v37 = v15;
      v38 = v22;
      v39 = v23;
    }
    if (v24 != v10)
    {
      v41 = 0;
      do
      {
        v42 = (16777473 * (unint64_t)(224 * v37[1])) >> 40;
        *v38++ = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v37)) >> 32) >> 8) + 16;
        *v39++ = v42 + 16;
        v41 += 2;
        v37 += 4;
      }
      while (v41 < v36);
    }
    v15 += v14;
    v22 += v20;
    v23 += v21;
  }
  if (v26 != v35)
  {
    v43 = 0;
    v44 = v26 - v35;
    v45 = 2 * v14;
    do
    {
      v46 = v15;
      v47 = v22;
      v48 = v23;
      if ((v8 & 1) != 0)
      {
        v46 = v15 + 4;
        v49 = (16777473 * (unint64_t)(224 * v15[1])) >> 40;
        *v22 = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v15)) >> 32) >> 8) + 16;
        v47 = v22 + 1;
        *v23 = v49 + 16;
        v48 = v23 + 1;
      }
      if (v24 != v10)
      {
        v50 = 0;
        do
        {
          v51 = (16777473 * (unint64_t)(224 * v46[1])) >> 40;
          *v47++ = ((unsigned __int16)((16777473 * (unint64_t)(224 * *v46)) >> 32) >> 8) + 16;
          *v48++ = v51 + 16;
          v50 += 2;
          v46 += 4;
        }
        while (v50 < v36);
      }
      v15 = (unsigned __int16 *)((char *)v15 + v45);
      v22 += v20;
      v23 += v21;
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_CopyAvg_sf44_f420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t i;
  unint64_t v36;
  unint64_t v37;
  unsigned __int16 *v38;
  _BYTE *v39;
  _BYTE *v40;
  unsigned __int16 *v41;
  int v42;
  int v43;
  unsigned int v44;
  unint64_t v45;
  unsigned __int16 *v46;
  unsigned int v47;
  unint64_t v48;
  unint64_t v49;
  unsigned __int16 *v50;
  _BYTE *v51;
  _BYTE *v52;
  unsigned __int16 *v53;
  int v54;
  int v55;
  unsigned int v56;
  unint64_t v57;
  unsigned __int16 *v58;
  unsigned int v59;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = a4[1];
  v15 = (unsigned __int16 *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = a8[1];
  v21 = a8[2];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 >> 1));
  v23 = (_BYTE *)(a7[2] + ((unint64_t)(v21 * v18) >> 1) + (v16 >> 1));
  v24 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  v25 = v17 - v16;
  if (v24 >= v25)
    v24 = v25;
  v26 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v13;
  v27 = v19 - v18;
  if (v26 >= v27)
    v26 = v27;
  if (v26)
  {
    v28 = 0;
    v29 = *a4;
    v30 = *a8;
    v31 = *a3 + v29 * v13 + 2 * v11;
    if (v13 >= v9)
      v32 = 0;
    else
      v32 = v29;
    v33 = v31 + v32;
    v34 = *a7 + v30 * v18 + v16;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
          *(_BYTE *)(v34 + i) = *(_WORD *)(v33 + 2 * i);
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v26);
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v26 >= v12)
    v36 = v12;
  else
    v36 = 0;
  if (v24 < v10)
    v10 = 0;
  v37 = v24 - v10;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v41 = (unsigned __int16 *)((char *)v15 + v14 + 4);
      v42 = *v41;
      v43 = v41[1];
      v38 = v15 + 4;
      v44 = (v15[1] / 0x101u
           + *(unsigned __int16 *)((char *)v15 + v14 + 2) / 0x101u
           + v15[3] / 0x101u
           + ((65281 * v43) >> 24)
           + 2) >> 2;
      *v22 = (*v15 / 0x101u
            + *(unsigned __int16 *)((char *)v15 + v14) / 0x101u
            + v15[2] / 0x101u
            + ((65281 * v42) >> 24)
            + 2) >> 2;
      v39 = v22 + 1;
      *v23 = v44;
      v40 = v23 + 1;
    }
    else
    {
      v38 = v15;
      v39 = v22;
      v40 = v23;
    }
    if (v24 != v10)
    {
      v45 = 0;
      v46 = v38 + 2;
      do
      {
        v47 = *(v46 - 1) / 0x101u
            + *(unsigned __int16 *)((char *)v46 + v14 - 2) / 0x101u
            + v46[1] / 0x101u
            + *(unsigned __int16 *)((char *)v46 + v14 + 2) / 0x101u
            + 2;
        *v39++ = (*(v46 - 2) / 0x101u
                + *(unsigned __int16 *)((char *)v46 + v14 - 4) / 0x101u
                + *v46 / 0x101u
                + *(unsigned __int16 *)((char *)v46 + v14) / 0x101u
                + 2) >> 2;
        *v40++ = v47 >> 2;
        v45 += 2;
        v46 += 4;
      }
      while (v45 < v37);
    }
    v15 += v14;
    v22 += v20;
    v23 += v21;
  }
  if (v26 != v36)
  {
    v48 = 0;
    v49 = v26 - v36;
    do
    {
      v50 = v15;
      v51 = v22;
      v52 = v23;
      if ((v8 & 1) != 0)
      {
        v53 = (unsigned __int16 *)((char *)v15 + v14 + 4);
        v54 = *v53;
        v55 = v53[1];
        v50 = v15 + 4;
        v56 = (v15[1] / 0x101u
             + *(unsigned __int16 *)((char *)v15 + v14 + 2) / 0x101u
             + v15[3] / 0x101u
             + ((65281 * v55) >> 24)
             + 2) >> 2;
        *v22 = (*v15 / 0x101u
              + *(unsigned __int16 *)((char *)v15 + v14) / 0x101u
              + v15[2] / 0x101u
              + ((65281 * v54) >> 24)
              + 2) >> 2;
        v51 = v22 + 1;
        *v23 = v56;
        v52 = v23 + 1;
      }
      if (v24 != v10)
      {
        v57 = 0;
        v58 = v50 + 2;
        do
        {
          v59 = *(v58 - 1) / 0x101u
              + *(unsigned __int16 *)((char *)v58 + v14 - 2) / 0x101u
              + v58[1] / 0x101u
              + *(unsigned __int16 *)((char *)v58 + v14 + 2) / 0x101u
              + 2;
          *v51++ = (*(v58 - 2) / 0x101u
                  + *(unsigned __int16 *)((char *)v58 + v14 - 4) / 0x101u
                  + *v58 / 0x101u
                  + *(unsigned __int16 *)((char *)v58 + v14) / 0x101u
                  + 2) >> 2;
          *v52++ = v59 >> 2;
          v57 += 2;
          v58 += 4;
        }
        while (v57 < v37);
      }
      v15 += v14;
      v22 += v20;
      v23 += v21;
      v48 += 2;
    }
    while (v48 < v49);
  }
  return 0;
}

uint64_t vt_CopyDec_sf44_f420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _WORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t i;
  unint64_t v36;
  unint64_t v37;
  _WORD *v38;
  _BYTE *v39;
  _BYTE *v40;
  __int16 v41;
  unint64_t v42;
  __int16 v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _WORD *v47;
  _BYTE *v48;
  _BYTE *v49;
  __int16 v50;
  unint64_t v51;
  __int16 v52;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v10 + v8;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = a4[1];
  v15 = (_WORD *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v19 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v20 = a8[1];
  v21 = a8[2];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 >> 1));
  v23 = (_BYTE *)(a7[2] + ((unint64_t)(v21 * v18) >> 1) + (v16 >> 1));
  v24 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  v25 = v17 - v16;
  if (v24 >= v25)
    v24 = v25;
  v26 = ((*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE) - v13;
  v27 = v19 - v18;
  if (v26 >= v27)
    v26 = v27;
  if (v26)
  {
    v28 = 0;
    v29 = *a4;
    v30 = *a8;
    v31 = *a3 + v29 * v13 + 2 * v11;
    if (v13 >= v9)
      v32 = 0;
    else
      v32 = v29;
    v33 = v31 + v32;
    v34 = *a7 + v30 * v18 + v16;
    do
    {
      if (v24)
      {
        for (i = 0; i != v24; ++i)
          *(_BYTE *)(v34 + i) = *(_WORD *)(v33 + 2 * i);
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v26);
    v8 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v26 >= v12)
    v36 = v12;
  else
    v36 = 0;
  if (v24 < v10)
    v10 = 0;
  v37 = v24 - v10;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v38 = v15 + 4;
      v41 = v15[1] / 0x101u;
      *v22 = *v15 / 0x101u;
      v39 = v22 + 1;
      *v23 = v41;
      v40 = v23 + 1;
    }
    else
    {
      v38 = v15;
      v39 = v22;
      v40 = v23;
    }
    if (v24 != v10)
    {
      v42 = 0;
      do
      {
        v43 = v38[1];
        *v39++ = *v38;
        *v40++ = v43;
        v42 += 2;
        v38 += 4;
      }
      while (v42 < v37);
    }
    v15 += v14;
    v22 += v20;
    v23 += v21;
  }
  if (v26 != v36)
  {
    v44 = 0;
    v45 = v26 - v36;
    v46 = 2 * v14;
    do
    {
      v47 = v15;
      v48 = v22;
      v49 = v23;
      if ((v8 & 1) != 0)
      {
        v47 = v15 + 4;
        v50 = v15[1] / 0x101u;
        *v22 = *v15;
        v48 = v22 + 1;
        *v23 = v50;
        v49 = v23 + 1;
      }
      if (v24 != v10)
      {
        v51 = 0;
        do
        {
          v52 = v47[1];
          *v48++ = *v47;
          *v49++ = v52;
          v51 += 2;
          v47 += 4;
        }
        while (v51 < v37);
      }
      v15 = (_WORD *)((char *)v15 + v46);
      v22 += v20;
      v23 += v21;
      v44 += 2;
    }
    while (v44 < v45);
  }
  return 0;
}

uint64_t vt_Copy_s2as_y416(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int16 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  __int16 v28;
  __int16 *v29;
  __int16 v30;
  _WORD *v31;

  v8 = a2[4] & 0xFFFFFFFELL;
  v9 = a2[2] + a2[4] - v8 + ((a2[2] + a2[4]) & 1);
  if (v9 >= a6[2])
    v9 = a6[2];
  if (a2[3] >= a6[3])
    v10 = a6[3];
  else
    v10 = a2[3];
  if (v10)
  {
    v11 = 0;
    v13 = a4[1];
    v12 = a4[2];
    v14 = *a4;
    v15 = *a8;
    v16 = *a7 + *a8 * a6[5] + 2 * a6[4];
    v17 = a2[5];
    v18 = *a3;
    v19 = a3[1] + v13 * v17;
    v20 = a3[2] + v12 * v17;
    v21 = v18 + *a4 * v17;
    v22 = (__int16 *)(v19 + 2 * v8);
    v23 = v20 + 2 * v8;
    v24 = v21 + 2 * v8;
    do
    {
      if (v9)
      {
        v25 = 0;
        v26 = 0;
        v27 = 0;
        v28 = 0;
        v29 = v22;
        do
        {
          if ((v26 & 1) == 0)
          {
            v28 = *v29;
            v27 = v29[1];
            v29 += 2;
          }
          v30 = *(_WORD *)(v24 + 2 * v26);
          v31 = (_WORD *)(v16 + v25);
          *v31 = *(_WORD *)(v23 + 2 * v26);
          v31[1] = v30;
          v31[2] = v28;
          v31[3] = v27;
          ++v26;
          v25 += 8;
        }
        while (v9 != v26);
      }
      v24 += v14;
      v16 += v15;
      v22 = (__int16 *)((char *)v22 + v13);
      v23 += v12;
      ++v11;
    }
    while (v11 != v10);
  }
  return 0;
}

uint64_t vt_Copy_s2as_y408(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  _BYTE *v30;
  char v31;

  v8 = a2[4] & 0xFFFFFFFELL;
  v9 = a2[2] + a2[4] - v8 + ((a2[2] + a2[4]) & 1);
  if (v9 >= a6[2])
    v9 = a6[2];
  if (a2[3] >= a6[3])
    v10 = a6[3];
  else
    v10 = a2[3];
  if (v10)
  {
    v11 = 0;
    v13 = a4[1];
    v12 = a4[2];
    v14 = *a4;
    v15 = *a8;
    v16 = *a7 + *a8 * a6[5] + a6[4];
    v17 = a2[5];
    v18 = *a3;
    v19 = a3[1] + v13 * v17;
    v20 = a3[2] + v12 * v17;
    v21 = v18 + *a4 * v17;
    v22 = v19 + 2 * v8;
    v23 = v20 + 2 * v8;
    v24 = v21 + 2 * v8;
    do
    {
      if (v9)
      {
        v25 = 0;
        v26 = 0;
        v27 = 0;
        v28 = 0;
        v29 = v22;
        do
        {
          if ((v26 & 1) == 0)
          {
            v28 = *(_BYTE *)(v29 + 1);
            v27 = *(_BYTE *)(v29 + 3);
            v29 += 4;
          }
          v30 = (_BYTE *)(v16 + v25);
          v31 = *(_BYTE *)(v24 + 2 * v26 + 1);
          *v30 = *(_WORD *)(v23 + 2 * v26);
          v30[1] = v31;
          v30[2] = v28;
          v30[3] = v27;
          ++v26;
          v25 += 4;
        }
        while (v9 != v26);
      }
      v24 += v14;
      v16 += v15;
      v22 += v13;
      v23 += v12;
      ++v11;
    }
    while (v11 != v10);
  }
  return 0;
}

uint64_t vt_Copy_sv22_v216(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t i;
  __int16 *v22;
  __int16 *v23;
  __int16 v24;
  __int16 v25;
  _WORD *v26;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a4;
    v14 = a4[1];
    v15 = *a8;
    v16 = *a7 + *a8 * *(_QWORD *)(a6 + 40) + 2 * v10;
    v17 = *(_QWORD *)(a2 + 40);
    v18 = a3[1] + v14 * v17 + ((2 * v9) & 0xFFFFFFFFFFFFFFFCLL);
    v19 = *a3 + *a4 * v17 + 2 * v9;
    do
    {
      if (v11)
      {
        v20 = 0;
        for (i = 0; i < v11; i += 2)
        {
          v22 = (__int16 *)(v18 + 2 * i);
          v23 = (__int16 *)(v19 + 2 * i);
          v24 = *v22;
          LOWORD(v22) = v22[1];
          v25 = *v23;
          LOWORD(v23) = v23[1];
          v26 = (_WORD *)(v16 + v20);
          *v26 = v24;
          v26[1] = v25;
          v26[2] = (_WORD)v22;
          v26[3] = (_WORD)v23;
          v20 += 8;
        }
      }
      v19 += v13;
      v16 += v15;
      v18 += v14;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_Copy_sv22_2vuy(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  char v25;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v10 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v11 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10)
    v11 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v12 = 0;
    v13 = *a4;
    v14 = a4[1];
    v15 = *a8;
    v16 = (_BYTE *)(*a7 + *a8 * *(_QWORD *)(a6 + 40) + v10);
    v17 = *(_QWORD *)(a2 + 40);
    v18 = a3[1] + v14 * v17 + ((2 * v9) & 0xFFFFFFFFFFFFFFFCLL);
    v19 = *a3 + *a4 * v17 + 2 * v9;
    do
    {
      if (v11)
      {
        v20 = 0;
        v21 = v16;
        do
        {
          v22 = v18 + 2 * v20;
          v23 = v19 + 2 * v20;
          v24 = *(_BYTE *)(v22 + 1);
          LOBYTE(v22) = *(_BYTE *)(v22 + 3);
          v25 = *(_BYTE *)(v23 + 1);
          LOBYTE(v23) = *(_BYTE *)(v23 + 3);
          *v21 = v24;
          v21[1] = v25;
          v21[2] = v22;
          v21[3] = v23;
          v21 += 4;
          v20 += 2;
        }
        while (v20 < v11);
      }
      v19 += v13;
      v16 += v15;
      v18 += v14;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_Copy_s2as_s4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  size_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  int *v33;
  int *v34;
  uint64_t v35;
  int v36;
  BOOL v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  __int16 *v41;
  int *v42;
  uint64_t v43;
  __int16 v44;
  __int16 v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v8 = a2[4];
  v9 = a2[5];
  v10 = a4[1];
  v11 = (int *)(a3[1] + v10 * v9 + 2 * (v8 & 0xFFFFFFFE));
  v12 = a6[4];
  v13 = a6[5];
  v14 = a6[2];
  v15 = a6[3];
  v16 = a8[1];
  v17 = (int *)(a7[1] + v16 * v13 + 4 * v12);
  if (a2[2] + v8 - (v8 & 0xFFFFFFFE) + ((a2[2] + v8) & 1uLL) >= v14)
    v18 = v14;
  else
    v18 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  if (a2[3] >= v15)
    v19 = v15;
  else
    v19 = a2[3];
  if (v19)
  {
    v51 = a8[1];
    v53 = a4[1];
    v20 = 2 * (v8 & 0xFFFFFFFE);
    v55 = a8[2];
    v56 = *a8;
    v21 = (char *)(a7[2] + v55 * v13 + 2 * v12);
    v22 = (char *)(*a7 + *a8 * v13 + 2 * v12);
    v23 = a4[2];
    v24 = (char *)(a3[2] + v23 * v9 + v20);
    v25 = *a4;
    v26 = (char *)(*a3 + *a4 * v9 + v20);
    v54 = v18;
    v27 = 2 * v18;
    v52 = v19;
    do
    {
      memcpy(v22, v26, v27);
      memcpy(v21, v24, v27);
      v26 += v25;
      v22 += v56;
      v24 += v23;
      v21 += v55;
      --v19;
    }
    while (v19);
    v16 = v51;
    v8 = a2[4];
    v9 = a2[5];
    v10 = v53;
    v18 = v54;
    v19 = v52;
  }
  v28 = v9 & 1;
  if (v19 >= v28)
    v29 = v9 & 1;
  else
    v29 = 0;
  v30 = v8;
  v31 = v18 >> 1;
  v32 = v8 & 1;
  if (v18 >> 1 >= (v18 - v32) >> 1)
    v31 = (v18 - v32) >> 1;
  if ((v9 & 1) != 0)
  {
    v33 = v11;
    if ((v30 & 1) != 0)
    {
      v33 = v11 + 1;
      *v17 = *v11;
      v34 = v17 + 1;
      if (v31)
      {
LABEL_19:
        v35 = -(uint64_t)v31;
        do
        {
          v36 = *v33++;
          *v34++ = v36;
          v37 = __CFADD__(v35++, 1);
        }
        while (!v37);
        v38 = 2 * v31;
        goto LABEL_25;
      }
    }
    else
    {
      v34 = v17;
      if (v31)
        goto LABEL_19;
    }
    v38 = 0;
LABEL_25:
    if ((v38 | (unint64_t)v32) < v18)
      *v34 = *v33;
    v11 = (int *)((char *)v11 + v10);
    v17 = (int *)((char *)v17 + v16);
  }
  if (v19 == v29)
  {
    v39 = 0;
  }
  else
  {
    v40 = 0;
    v39 = v19 - v29;
    do
    {
      v41 = (__int16 *)v11;
      v42 = v17;
      if ((v30 & 1) != 0)
      {
        v41 = (__int16 *)(v11 + 1);
        *v17 = *v11;
        v42 = v17 + 1;
      }
      if (v31)
      {
        v43 = -(uint64_t)v31;
        do
        {
          v44 = *v41;
          v45 = v41[1];
          v41 += 2;
          *(_WORD *)v42 = v44;
          *((_WORD *)v42 + 1) = v45;
          *((_WORD *)v42 + 2) = v44;
          *((_WORD *)v42 + 3) = v45;
          v42 += 2;
          v37 = __CFADD__(v43++, 1);
        }
        while (!v37);
      }
      if ((v32 | (2 * v31)) < v18)
        *v42 = *(_DWORD *)v41;
      v11 = (int *)((char *)v11 + v10);
      v17 = (int *)((char *)v17 + v16);
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v28 < v19)
  {
    if ((v30 & 1) != 0)
    {
      v46 = *v11++;
      *v17++ = v46;
    }
    if (v31)
    {
      v47 = -(uint64_t)v31;
      do
      {
        v48 = *v11++;
        *v17++ = v48;
        v37 = __CFADD__(v47++, 1);
      }
      while (!v37);
      v31 *= 2;
    }
    if ((v31 | v32) < v18)
      *v17 = *v11;
  }
  return 0;
}

uint64_t vt_Copy_sv22_sv44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  size_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  int *v29;
  int *v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  __int16 *v37;
  int *v38;
  uint64_t v39;
  __int16 v40;
  __int16 v41;
  int v42;
  uint64_t v43;
  int v44;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;

  v8 = a2[4];
  v9 = a2[5];
  v10 = a4[1];
  v11 = (int *)(a3[1] + v10 * v9 + 2 * (v8 & 0xFFFFFFFE));
  v12 = a6[4];
  v13 = a6[5];
  v14 = a8[1];
  v15 = (int *)(a7[1] + v14 * v13 + 4 * v12);
  if (a2[2] + v8 - (v8 & 0xFFFFFFFE) + ((a2[2] + v8) & 1uLL) >= a6[2])
    v16 = a6[2];
  else
    v16 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  if (a2[3] >= a6[3])
    v17 = a6[3];
  else
    v17 = a2[3];
  if (v17)
  {
    v47 = a4[1];
    v48 = v16;
    v19 = *a4;
    v20 = *a8;
    v21 = (char *)(*a7 + *a8 * v13 + 2 * v12);
    v22 = (char *)(*a3 + *a4 * v9 + 2 * (v8 & 0xFFFFFFFE));
    v23 = 2 * v16;
    v46 = v17;
    do
    {
      memcpy(v21, v22, v23);
      v22 += v19;
      v21 += v20;
      --v17;
    }
    while (v17);
    v8 = a2[4];
    v9 = a2[5];
    v10 = v47;
    v16 = v48;
    v17 = v46;
  }
  v24 = v9 & 1;
  if (v17 >= v24)
    v25 = v9 & 1;
  else
    v25 = 0;
  v26 = v8;
  v27 = v16 >> 1;
  v28 = v8 & 1;
  if (v16 >> 1 >= (v16 - v28) >> 1)
    v27 = (v16 - v28) >> 1;
  if ((v9 & 1) != 0)
  {
    v29 = v11;
    if ((v26 & 1) != 0)
    {
      v29 = v11 + 1;
      *v15 = *v11;
      v30 = v15 + 1;
      if (v27)
      {
LABEL_19:
        v31 = -(uint64_t)v27;
        do
        {
          v32 = *v29++;
          *v30++ = v32;
          v33 = __CFADD__(v31++, 1);
        }
        while (!v33);
        v34 = 2 * v27;
        goto LABEL_25;
      }
    }
    else
    {
      v30 = v15;
      if (v27)
        goto LABEL_19;
    }
    v34 = 0;
LABEL_25:
    if ((v34 | (unint64_t)v28) < v16)
      *v30 = *v29;
    v11 = (int *)((char *)v11 + v10);
    v15 = (int *)((char *)v15 + v14);
  }
  if (v17 == v25)
  {
    v35 = 0;
  }
  else
  {
    v36 = 0;
    v35 = v17 - v25;
    do
    {
      v37 = (__int16 *)v11;
      v38 = v15;
      if ((v26 & 1) != 0)
      {
        v37 = (__int16 *)(v11 + 1);
        *v15 = *v11;
        v38 = v15 + 1;
      }
      if (v27)
      {
        v39 = -(uint64_t)v27;
        do
        {
          v40 = *v37;
          v41 = v37[1];
          v37 += 2;
          *(_WORD *)v38 = v40;
          *((_WORD *)v38 + 1) = v41;
          *((_WORD *)v38 + 2) = v40;
          *((_WORD *)v38 + 3) = v41;
          v38 += 2;
          v33 = __CFADD__(v39++, 1);
        }
        while (!v33);
      }
      if ((v28 | (2 * v27)) < v16)
        *v38 = *(_DWORD *)v37;
      v11 = (int *)((char *)v11 + v10);
      v15 = (int *)((char *)v15 + v14);
      ++v36;
    }
    while (v36 != v35);
  }
  if (v35 + v24 < v17)
  {
    if ((v26 & 1) != 0)
    {
      v42 = *v11++;
      *v15++ = v42;
    }
    if (v27)
    {
      v43 = -(uint64_t)v27;
      do
      {
        v44 = *v11++;
        *v15++ = v44;
        v33 = __CFADD__(v43++, 1);
      }
      while (!v33);
      v27 *= 2;
    }
    if ((v27 | v28) < v16)
      *v15 = *v11;
  }
  return 0;
}

uint64_t vt_Copy_sv22_sf44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _WORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  unsigned __int16 *v34;
  _WORD *v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  BOOL v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  unint64_t v46;
  uint64_t v47;
  int32x2_t v48;
  uint32x2_t v49;
  unsigned __int16 *v50;
  int16x4_t *v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  uint64_t v55;
  unsigned __int16 *v56;
  uint32x2_t v57;
  int32x4_t v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[3];
  v11 = a2[2] + v9;
  v12 = a4[1];
  v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 2 * (v9 & 0xFFFFFFFE));
  v14 = a6[4];
  v15 = a6[5];
  v17 = a6[2];
  v16 = a6[3];
  v18 = a8[1];
  v19 = (_WORD *)(a7[1] + v18 * v15 + 4 * v14);
  v20 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v20 >= v17)
    v20 = v17;
  if (v10 >= v16)
    v21 = v16;
  else
    v21 = v10;
  if (v21)
  {
    v22 = 0;
    v23 = *a4;
    v24 = *a8;
    v25 = *a7 + *a8 * v15 + 2 * v14;
    v26 = *a3 + *a4 * v8 + 2 * (v9 & 0xFFFFFFFE);
    do
    {
      if (v20)
      {
        for (i = 0; i != v20; ++i)
        {
          v28 = *(unsigned __int16 *)(v26 + 2 * i);
          if (v28 >= 0xEB00)
            v28 = 60160;
          if (v28 <= 0x1000)
            v28 = 4096;
          *(_WORD *)(v25 + 2 * i) = (-268431360 - v28 + (v28 << 16)) / 0xDB00;
        }
      }
      v26 += v23;
      v25 += v24;
      ++v22;
    }
    while (v22 != v21);
  }
  v29 = v8 & 1;
  if (v21 >= v29)
    v30 = v8 & 1;
  else
    v30 = 0;
  v31 = v9;
  v32 = v20 >> 1;
  v33 = v9 & 1;
  if (v20 >> 1 >= (v20 - v33) >> 1)
    v32 = (v20 - v33) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v31 & 1) != 0)
    {
      v41 = *v13;
      v42 = v13[1];
      if (v41 >= 0xF000)
        v41 = 61440;
      if (v41 <= 0x1000)
        v41 = 4096;
      if (v42 >= 0xF000)
        v42 = 61440;
      if (v42 <= 0x1000)
        v43 = 4096;
      else
        v43 = v42;
      v34 = v13 + 2;
      *v19 = (613566757 * (unint64_t)((-268431360 - v41 + (v41 << 16)) >> 13)) >> 32;
      v19[1] = (613566757 * (unint64_t)((-268431360 - v43 + (v43 << 16)) >> 13)) >> 32;
      v35 = v19 + 2;
      if (v32)
        goto LABEL_24;
    }
    else
    {
      v34 = v13;
      v35 = v19;
      if (v32)
      {
LABEL_24:
        v36 = -(uint64_t)v32;
        do
        {
          v37 = *v34;
          v38 = v34[1];
          if (v37 >= 0xF000)
            v37 = 61440;
          if (v37 <= 0x1000)
            v37 = 4096;
          if (v38 >= 0xF000)
            v38 = 61440;
          if (v38 <= 0x1000)
            v38 = 4096;
          v34 += 2;
          *v35 = (613566757 * (unint64_t)((-268431360 - v37 + (v37 << 16)) >> 13)) >> 32;
          v35[1] = (613566757 * (unint64_t)((-268431360 - v38 + (v38 << 16)) >> 13)) >> 32;
          v35 += 2;
          v39 = __CFADD__(v36++, 1);
        }
        while (!v39);
        v40 = 2 * v32;
        goto LABEL_47;
      }
    }
    v40 = 0;
LABEL_47:
    if ((v40 | (unint64_t)v33) < v20)
    {
      v44 = *v34;
      v45 = v34[1];
      if (v44 >= 0xF000)
        v44 = 61440;
      if (v44 <= 0x1000)
        v44 = 4096;
      if (v45 >= 0xF000)
        v45 = 61440;
      if (v45 <= 0x1000)
        v45 = 4096;
      *v35 = (613566757 * (unint64_t)((-268431360 - v44 + (v44 << 16)) >> 13)) >> 32;
      v35[1] = (613566757 * (unint64_t)((-268431360 - v45 + (v45 << 16)) >> 13)) >> 32;
    }
    v13 = (unsigned __int16 *)((char *)v13 + v12);
    v19 = (_WORD *)((char *)v19 + v18);
  }
  if (v21 == v30)
  {
    v46 = 0;
  }
  else
  {
    v47 = 0;
    v46 = v21 - v30;
    v48 = vdup_n_s32(0xF0001000);
    v49 = (uint32x2_t)vdup_n_s32(0x24924925u);
    do
    {
      v50 = v13;
      v51 = (int16x4_t *)v19;
      if ((v31 & 1) != 0)
      {
        v52 = *v13;
        v53 = v13[1];
        if (v52 >= 0xF000)
          v52 = 61440;
        if (v52 <= 0x1000)
          v52 = 4096;
        if (v53 >= 0xF000)
          v53 = 61440;
        if (v53 <= 0x1000)
          v54 = 4096;
        else
          v54 = v53;
        v50 = v13 + 2;
        *v19 = (613566757 * (unint64_t)((-268431360 - v52 + (v52 << 16)) >> 13)) >> 32;
        v19[1] = (613566757 * (unint64_t)((-268431360 - v54 + (v54 << 16)) >> 13)) >> 32;
        v51 = (int16x4_t *)(v19 + 2);
      }
      if (v32)
      {
        v55 = -(uint64_t)v32;
        do
        {
          v56 = v50 + 2;
          v57.i32[0] = *v50;
          v57.i32[1] = v50[1];
          v58 = (int32x4_t)vshrq_n_u64(vmull_u32(vshr_n_u32((uint32x2_t)vmla_s32(v48, (int32x2_t)vmax_u32(vmin_u32(v57, (uint32x2_t)0xF0000000F000), (uint32x2_t)0x100000001000), (int32x2_t)0xFFFF0000FFFFLL), 0xDuLL), v49), 0x20uLL);
          *v51++ = vmovn_s32(vuzp1q_s32(v58, v58));
          v50 += 2;
          v39 = __CFADD__(v55++, 1);
        }
        while (!v39);
      }
      else
      {
        v56 = v50;
      }
      if ((v33 | (2 * v32)) < v20)
      {
        v59 = *v56;
        v60 = v56[1];
        if (v59 >= 0xF000)
          v59 = 61440;
        if (v59 <= 0x1000)
          v59 = 4096;
        if (v60 >= 0xF000)
          v60 = 61440;
        if (v60 <= 0x1000)
          v60 = 4096;
        v51->i16[0] = (613566757 * (unint64_t)((-268431360 - v59 + (v59 << 16)) >> 13)) >> 32;
        v51->i16[1] = (613566757 * (unint64_t)((-268431360 - v60 + (v60 << 16)) >> 13)) >> 32;
      }
      v13 = (unsigned __int16 *)((char *)v13 + v12);
      v19 = (_WORD *)((char *)v19 + v18);
      ++v47;
    }
    while (v47 != v46);
  }
  if (v46 + v29 < v21)
  {
    if ((v31 & 1) != 0)
    {
      v61 = *v13;
      v62 = v13[1];
      if (v61 >= 0xF000)
        v61 = 61440;
      if (v61 <= 0x1000)
        v61 = 4096;
      if (v62 >= 0xF000)
        v62 = 61440;
      if (v62 <= 0x1000)
        v62 = 4096;
      v13 += 2;
      *v19 = (613566757 * (unint64_t)((-268431360 - v61 + (v61 << 16)) >> 13)) >> 32;
      v19[1] = (613566757 * (unint64_t)((-268431360 - v62 + (v62 << 16)) >> 13)) >> 32;
      v19 += 2;
    }
    if (v32)
    {
      v63 = -(uint64_t)v32;
      do
      {
        v64 = *v13;
        v65 = v13[1];
        if (v64 >= 0xF000)
          v64 = 61440;
        if (v64 <= 0x1000)
          v64 = 4096;
        if (v65 >= 0xF000)
          v65 = 61440;
        if (v65 <= 0x1000)
          v65 = 4096;
        v13 += 2;
        *v19 = (613566757 * (unint64_t)((-268431360 - v64 + (v64 << 16)) >> 13)) >> 32;
        v19[1] = (613566757 * (unint64_t)((-268431360 - v65 + (v65 << 16)) >> 13)) >> 32;
        v19 += 2;
        v39 = __CFADD__(v63++, 1);
      }
      while (!v39);
      v32 *= 2;
    }
    if ((v32 | v33) < v20)
    {
      v66 = *v13;
      v67 = v13[1];
      if (v66 >= 0xF000)
        v66 = 61440;
      if (v66 <= 0x1000)
        v66 = 4096;
      if (v67 >= 0xF000)
        v67 = 61440;
      if (v67 <= 0x1000)
        v67 = 4096;
      *v19 = (613566757 * (unint64_t)((-268431360 - v66 + (v66 << 16)) >> 13)) >> 32;
      v19[1] = (613566757 * (unint64_t)((-268431360 - v67 + (v67 << 16)) >> 13)) >> 32;
    }
  }
  return 0;
}

uint64_t vt_Copy_sv22_sf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unsigned __int16 *v34;
  _WORD *v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  BOOL v43;
  unint64_t v44;
  uint64_t v45;
  unsigned __int16 *v46;
  _WORD *v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  int v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + ((2 * (v10 + v9)) & 0xFFFFFFFFFFFFFFFCLL));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  if (v11 - (v10 + v9) >= (unint64_t)(v17 - v16))
    v22 = v17 - v16;
  else
    v22 = v11 - (v10 + v9);
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = *a7 + *a8 * v18 + v19;
    v27 = *a3 + v24 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          v29 = *(unsigned __int16 *)(v27 + 2 * i);
          if (v29 >= 0xEB00)
            v29 = 60160;
          if (v29 <= 0x1000)
            v29 = 4096;
          *(_WORD *)(v26 + 2 * i) = (-268431360 - v29 + (v29 << 16)) / 0xDB00;
        }
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v8);
  }
  v30 = v12 & 1;
  if (v8 >= v30)
    v31 = v12 & 1;
  else
    v31 = 0;
  v32 = v9;
  v33 = v22 >> 1;
  if (v22 >> 1 >= (v22 - v10) >> 1)
    v33 = (v22 - v10) >> 1;
  if ((v12 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v36 = *v14;
      if (v36 >= 0xF000)
        v36 = 61440;
      if (v36 <= 0x1000)
        v37 = 4096;
      else
        v37 = v36;
      if (v14[1] >= 0xF000u)
        v38 = 61440;
      else
        v38 = v14[1];
      if (v38 <= 0x1000)
        v39 = 4096;
      else
        v39 = v38;
      v34 = v14 + 2;
      *v21 = (613566757 * (unint64_t)((-268431360 - v37 + (v37 << 16)) >> 13)) >> 32;
      v21[1] = (613566757 * (unint64_t)((-268431360 - v39 + (v39 << 16)) >> 13)) >> 32;
      v35 = v21 + 2;
      if (!v33)
        goto LABEL_48;
    }
    else
    {
      v34 = v14;
      v35 = v21;
      if (!v33)
      {
LABEL_48:
        v14 = (unsigned __int16 *)((char *)v14 + v13);
        v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_49;
      }
    }
    v40 = -(uint64_t)v33;
    do
    {
      v41 = *v34;
      v42 = v34[1];
      if (v41 >= 0xF000)
        v41 = 61440;
      if (v41 <= 0x1000)
        v41 = 4096;
      if (v42 >= 0xF000)
        v42 = 61440;
      if (v42 <= 0x1000)
        v42 = 4096;
      *v35 = (613566757 * (unint64_t)((-268431360 - v41 + (v41 << 16)) >> 13)) >> 32;
      v35[1] = (613566757 * (unint64_t)((-268431360 - v42 + (v42 << 16)) >> 13)) >> 32;
      v34 += 2;
      v35 += 2;
      v43 = __CFADD__(v40++, 1);
    }
    while (!v43);
    goto LABEL_48;
  }
LABEL_49:
  if (v8 == v31)
  {
    v44 = 0;
  }
  else
  {
    v45 = 0;
    v44 = v8 - v31;
    do
    {
      v46 = v14;
      v47 = v21;
      if ((v32 & 1) != 0)
      {
        v48 = *v14;
        if (v48 >= 0xF000)
          v48 = 61440;
        if (v48 <= 0x1000)
          v49 = 4096;
        else
          v49 = v48;
        if (v14[1] >= 0xF000u)
          v50 = 61440;
        else
          v50 = v14[1];
        if (v50 <= 0x1000)
          v51 = 4096;
        else
          v51 = v50;
        v46 = v14 + 2;
        *v21 = (613566757 * (unint64_t)((-268431360 - v49 + (v49 << 16)) >> 13)) >> 32;
        v21[1] = (613566757 * (unint64_t)((-268431360 - v51 + (v51 << 16)) >> 13)) >> 32;
        v47 = v21 + 2;
      }
      if (v33)
      {
        v52 = -(uint64_t)v33;
        do
        {
          v53 = *v46;
          v54 = v46[1];
          if (v53 >= 0xF000)
            v53 = 61440;
          if (v53 <= 0x1000)
            v53 = 4096;
          if (v54 >= 0xF000)
            v54 = 61440;
          if (v54 <= 0x1000)
            v54 = 4096;
          *v47 = (613566757 * (unint64_t)((-268431360 - v53 + (v53 << 16)) >> 13)) >> 32;
          v47[1] = (613566757 * (unint64_t)((-268431360 - v54 + (v54 << 16)) >> 13)) >> 32;
          v46 += 2;
          v47 += 2;
          v43 = __CFADD__(v52++, 1);
        }
        while (!v43);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v30 < v8)
  {
    if ((v32 & 1) != 0)
    {
      v55 = *v14;
      v56 = v14[1];
      if (v55 >= 0xF000)
        v55 = 61440;
      if (v55 <= 0x1000)
        v55 = 4096;
      if (v56 >= 0xF000)
        v56 = 61440;
      if (v56 <= 0x1000)
        v56 = 4096;
      v14 += 2;
      *v21 = (613566757 * (unint64_t)((-268431360 - v55 + (v55 << 16)) >> 13)) >> 32;
      v21[1] = (613566757 * (unint64_t)((-268431360 - v56 + (v56 << 16)) >> 13)) >> 32;
      v21 += 2;
    }
    if (v33)
    {
      v57 = -(uint64_t)v33;
      do
      {
        v58 = *v14;
        v59 = v14[1];
        if (v58 >= 0xF000)
          v58 = 61440;
        if (v58 <= 0x1000)
          v58 = 4096;
        if (v59 >= 0xF000)
          v59 = 61440;
        if (v59 <= 0x1000)
          v59 = 4096;
        *v21 = (613566757 * (unint64_t)((-268431360 - v58 + (v58 << 16)) >> 13)) >> 32;
        v21[1] = (613566757 * (unint64_t)((-268431360 - v59 + (v59 << 16)) >> 13)) >> 32;
        v14 += 2;
        v21 += 2;
        v43 = __CFADD__(v57++, 1);
      }
      while (!v43);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sv22_sv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  size_t v30;
  uint64_t v31;
  BOOL v32;
  unint64_t v33;
  unint64_t v34;
  unsigned __int16 *v35;
  _WORD *v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  unsigned __int16 *v45;
  _WORD *v46;
  unsigned int v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  int v52;
  unint64_t v54;
  unint64_t v56;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v9 & 1;
  v12 = v11 + v9;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v14 = 2 * (v10 + v8);
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * (v11 + v9) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8) >= v18 - v17)
    v23 = v18 - v17;
  else
    v23 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  if (v13 - v12 >= v20 - v19)
    v24 = v20 - v19;
  else
    v24 = v13 - v12;
  if (v24)
  {
    v54 = v23;
    v25 = *a4;
    v26 = *a8;
    if (v12 >= v9)
      v27 = 0;
    else
      v27 = *a4;
    v28 = (char *)(*a3 + *a4 * v12 + v14 + v27);
    v29 = (char *)(*a7 + v26 * v19 + 2 * v17);
    v30 = 2 * v23;
    v56 = v24;
    v31 = -(uint64_t)v24;
    do
    {
      memcpy(v29, v28, v30);
      v28 += v25;
      v29 += v26;
      v32 = __CFADD__(v31++, 1);
    }
    while (!v32);
    v24 = v56;
    v8 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
    v23 = v54;
  }
  if (v24 >= v11)
    v33 = v11;
  else
    v33 = 0;
  if (v23 >> 1 >= (v23 - v10) >> 1)
    v34 = (v23 - v10) >> 1;
  else
    v34 = v23 >> 1;
  if (v11)
  {
    if ((v8 & 1) != 0)
    {
      v35 = v16 + 2;
      v37 = (v16[1] + *(unsigned __int16 *)((char *)v16 + v15 + 2) + 1) >> 1;
      *v22 = (*v16 + *(unsigned __int16 *)((char *)v16 + v15) + 1) >> 1;
      v22[1] = v37;
      v36 = v22 + 2;
      if (!v34)
      {
LABEL_29:
        v16 += v15;
        v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_30;
      }
    }
    else
    {
      v35 = v16;
      v36 = v22;
      if (!v34)
        goto LABEL_29;
    }
    v38 = -(uint64_t)v34;
    do
    {
      v39 = *v35;
      v40 = v35[1];
      v41 = *(unsigned __int16 *)((char *)v35 + v15);
      v42 = *(unsigned __int16 *)((char *)v35 + v15 + 2);
      v35 += 2;
      *v36 = (v39 + v41 + 1) >> 1;
      v36[1] = (v40 + v42 + 1) >> 1;
      v36 += 2;
      v32 = __CFADD__(v38++, 1);
    }
    while (!v32);
    goto LABEL_29;
  }
LABEL_30:
  if (v24 != v33)
  {
    v43 = 0;
    v44 = v24 - v33;
    do
    {
      v45 = v16;
      v46 = v22;
      if ((v8 & 1) != 0)
      {
        v45 = v16 + 2;
        v47 = (v16[1] + *(unsigned __int16 *)((char *)v16 + v15 + 2) + 1) >> 1;
        *v22 = (*v16 + *(unsigned __int16 *)((char *)v16 + v15) + 1) >> 1;
        v22[1] = v47;
        v46 = v22 + 2;
      }
      if (v34)
      {
        v48 = -(uint64_t)v34;
        do
        {
          v49 = *v45;
          v50 = v45[1];
          v51 = *(unsigned __int16 *)((char *)v45 + v15);
          v52 = *(unsigned __int16 *)((char *)v45 + v15 + 2);
          v45 += 2;
          *v46 = (v49 + v51 + 1) >> 1;
          v46[1] = (v50 + v52 + 1) >> 1;
          v46 += 2;
          v32 = __CFADD__(v48++, 1);
        }
        while (!v32);
      }
      v16 += v15;
      v22 = (_WORD *)((char *)v22 + v21);
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_CopyDec_sv22_sv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  size_t v33;
  uint64_t v34;
  BOOL v35;
  unint64_t v36;
  unint64_t v37;
  int *v38;
  int *v39;
  uint64_t v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  int *v44;
  int *v45;
  uint64_t v46;
  int v47;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;

  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = v9 & 1;
  v12 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v13 = v10 & 1;
  v14 = v13 + v10;
  v15 = (*(_DWORD *)(a2 + 24) + (_DWORD)v10) & 0xFFFFFFFE;
  v16 = 2 * (v11 + v9);
  v17 = a4[1];
  v18 = (int *)(a3[1] + v17 * (v13 + v10) + (v16 & 0xFFFFFFFFFFFFFFFCLL));
  v19 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v20 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v21 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v22 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v23 = 2 * v19;
  v24 = a8[1];
  v25 = (int *)(a7[1] + ((unint64_t)(v24 * v21) >> 1) + ((2 * v19) & 0x7FFFFFFFFFFFFFFELL));
  if (v12 - (v11 + v9) >= (unint64_t)(v20 - v19))
    v26 = v20 - v19;
  else
    v26 = v12 - (v11 + v9);
  v27 = v15 - v14;
  if (v15 - v14 >= v22 - v21)
    v27 = v22 - v21;
  if (v27)
  {
    v50 = v27;
    v51 = a4[1];
    v28 = *a4;
    v29 = *a8;
    if (v14 >= v10)
      v30 = 0;
    else
      v30 = *a4;
    v31 = (char *)(*a3 + *a4 * v14 + v16 + v30);
    v32 = (char *)(*a7 + v29 * v21 + v23);
    v49 = v26;
    v33 = 2 * v26;
    v34 = -(uint64_t)v27;
    do
    {
      memcpy(v32, v31, v33);
      v31 += v28;
      v32 += v29;
      v35 = __CFADD__(v34++, 1);
    }
    while (!v35);
    v9 = *(_QWORD *)(a2 + 32);
    v13 = *(_QWORD *)(a2 + 40) & 1;
    v11 = v9 & 1;
    v27 = v50;
    v17 = v51;
    v26 = v49;
  }
  if (v27 >= v13)
    v36 = v13;
  else
    v36 = 0;
  if (v26 >> 1 >= (v26 - v11) >> 1)
    v37 = (v26 - v11) >> 1;
  else
    v37 = v26 >> 1;
  if (v13)
  {
    v38 = v18;
    if ((v9 & 1) != 0)
    {
      v38 = v18 + 1;
      *v25 = *v18;
      v39 = v25 + 1;
      if (!v37)
      {
LABEL_28:
        v18 = (int *)((char *)v18 + 2 * v17);
        v25 = (int *)((char *)v25 + v24);
        goto LABEL_29;
      }
    }
    else
    {
      v39 = v25;
      if (!v37)
        goto LABEL_28;
    }
    v40 = -(uint64_t)v37;
    do
    {
      v41 = *v38++;
      *v39++ = v41;
      v35 = __CFADD__(v40++, 1);
    }
    while (!v35);
    goto LABEL_28;
  }
LABEL_29:
  if (v27 != v36)
  {
    v42 = 0;
    v43 = v27 - v36;
    do
    {
      v44 = v18;
      v45 = v25;
      if ((v9 & 1) != 0)
      {
        v44 = v18 + 1;
        *v25 = *v18;
        v45 = v25 + 1;
      }
      if (v37)
      {
        v46 = -(uint64_t)v37;
        do
        {
          v47 = *v44++;
          *v45++ = v47;
          v35 = __CFADD__(v46++, 1);
        }
        while (!v35);
      }
      v18 = (int *)((char *)v18 + 2 * v17);
      v25 = (int *)((char *)v25 + v24);
      v42 += 2;
    }
    while (v42 < v43);
  }
  return 0;
}

uint64_t vt_CopyAvg_sv22_sf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _WORD *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int16 *v40;
  _WORD *v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  BOOL v55;
  unint64_t v56;
  unint64_t v57;
  unsigned __int16 *v58;
  _WORD *v59;
  unsigned int v60;
  int v61;
  unsigned int v62;
  int v63;
  unsigned int v64;
  int v65;
  unsigned int v66;
  int v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v15 = 2 * v10;
  v16 = a4[1];
  v17 = (unsigned __int16 *)(a3[1] + v16 * (v12 + v8) + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  v18 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v19 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v20 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v21 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v22 = 2 * v18;
  v23 = a8[1];
  v24 = (_WORD *)(a7[1] + ((unint64_t)(v23 * v20) >> 1) + ((2 * v18) & 0x7FFFFFFFFFFFFFFELL));
  v25 = v11 - v10;
  if (v25 >= v19 - v18)
    v26 = v19 - v18;
  else
    v26 = v25;
  v27 = v14 - v13;
  if (v14 - v13 >= v21 - v20)
    v27 = v21 - v20;
  if (v27)
  {
    v28 = 0;
    v29 = *a4;
    v30 = *a8;
    v31 = *a3 + v29 * v13;
    if (v13 >= v8)
      v32 = 0;
    else
      v32 = v29;
    v33 = v31 + v15 + v32;
    v34 = *a7 + v30 * v20 + v22;
    do
    {
      if (v26)
      {
        for (i = 0; i != v26; ++i)
        {
          v36 = *(unsigned __int16 *)(v33 + 2 * i);
          if (v36 >= 0xEB00)
            v36 = 60160;
          if (v36 <= 0x1000)
            v36 = 4096;
          *(_WORD *)(v34 + 2 * i) = (-268431360 - v36 + (v36 << 16)) / 0xDB00;
        }
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12)
    v37 = v12;
  else
    v37 = 0;
  v38 = v26 - (v9 & 1);
  if (v26 >> 1 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v26 >> 1;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v42 = *v17;
      if (v42 >= 0xF000)
        v42 = 61440;
      if (v42 <= 0x1000)
        v43 = 4096;
      else
        v43 = v42;
      if (v17[1] >= 0xF000u)
        v44 = 61440;
      else
        v44 = v17[1];
      if (v44 <= 0x1000)
        v45 = 4096;
      else
        v45 = v44;
      if (*(unsigned __int16 *)((char *)v17 + v16) >= 0xF000u)
        v46 = 61440;
      else
        v46 = *(unsigned __int16 *)((char *)v17 + v16);
      if (v46 <= 0x1000)
        v47 = 4096;
      else
        v47 = v46;
      if (*(unsigned __int16 *)((char *)v17 + v16 + 2) >= 0xF000u)
        v48 = 61440;
      else
        v48 = *(unsigned __int16 *)((char *)v17 + v16 + 2);
      if (v48 <= 0x1000)
        v49 = 4096;
      else
        v49 = v48;
      v40 = v17 + 2;
      *v24 = (((613566757 * (unint64_t)((-268431360 - v43 + (v43 << 16)) >> 13)) >> 32)
                          + ((613566757 * (unint64_t)((-268431360 - v47 + (v47 << 16)) >> 13)) >> 32)
                          + 1) >> 1;
      v24[1] = (((613566757 * (unint64_t)((-268431360 - v45 + (v45 << 16)) >> 13)) >> 32)
                            + ((613566757 * (unint64_t)((-268431360 - v49 + (v49 << 16)) >> 13)) >> 32)
                            + 1) >> 1;
      v41 = v24 + 2;
      if (!v39)
        goto LABEL_72;
    }
    else
    {
      v40 = v17;
      v41 = v24;
      if (!v39)
      {
LABEL_72:
        v17 += v16;
        v24 = (_WORD *)((char *)v24 + v23);
        goto LABEL_73;
      }
    }
    v50 = -(uint64_t)v39;
    do
    {
      v51 = *v40;
      v52 = v40[1];
      v53 = *(unsigned __int16 *)((char *)v40 + v16);
      v54 = *(unsigned __int16 *)((char *)v40 + v16 + 2);
      if (v51 >= 0xF000)
        v51 = 61440;
      if (v51 <= 0x1000)
        v51 = 4096;
      if (v52 >= 0xF000)
        v52 = 61440;
      if (v52 <= 0x1000)
        v52 = 4096;
      if (v53 >= 0xF000)
        v53 = 61440;
      if (v53 <= 0x1000)
        v53 = 4096;
      if (v54 >= 0xF000)
        v54 = 61440;
      if (v54 <= 0x1000)
        v54 = 4096;
      v40 += 2;
      *v41 = (((613566757 * (unint64_t)((-268431360 - v51 + (v51 << 16)) >> 13)) >> 32)
                          + ((613566757 * (unint64_t)((-268431360 - v53 + (v53 << 16)) >> 13)) >> 32)
                          + 1) >> 1;
      v41[1] = (((613566757 * (unint64_t)((-268431360 - v52 + (v52 << 16)) >> 13)) >> 32)
                            + ((613566757 * (unint64_t)((-268431360 - v54 + (v54 << 16)) >> 13)) >> 32)
                            + 1) >> 1;
      v41 += 2;
      v55 = __CFADD__(v50++, 1);
    }
    while (!v55);
    goto LABEL_72;
  }
LABEL_73:
  if (v27 != v37)
  {
    v56 = 0;
    v57 = v27 - v37;
    do
    {
      v58 = v17;
      v59 = v24;
      if ((v9 & 1) != 0)
      {
        v60 = *v17;
        if (v60 >= 0xF000)
          v60 = 61440;
        if (v60 <= 0x1000)
          v61 = 4096;
        else
          v61 = v60;
        if (v17[1] >= 0xF000u)
          v62 = 61440;
        else
          v62 = v17[1];
        if (v62 <= 0x1000)
          v63 = 4096;
        else
          v63 = v62;
        if (*(unsigned __int16 *)((char *)v17 + v16) >= 0xF000u)
          v64 = 61440;
        else
          v64 = *(unsigned __int16 *)((char *)v17 + v16);
        if (v64 <= 0x1000)
          v65 = 4096;
        else
          v65 = v64;
        if (*(unsigned __int16 *)((char *)v17 + v16 + 2) >= 0xF000u)
          v66 = 61440;
        else
          v66 = *(unsigned __int16 *)((char *)v17 + v16 + 2);
        if (v66 <= 0x1000)
          v67 = 4096;
        else
          v67 = v66;
        v58 = v17 + 2;
        *v24 = (((613566757 * (unint64_t)((-268431360 - v61 + (v61 << 16)) >> 13)) >> 32)
                            + ((613566757 * (unint64_t)((-268431360 - v65 + (v65 << 16)) >> 13)) >> 32)
                            + 1) >> 1;
        v24[1] = (((613566757 * (unint64_t)((-268431360 - v63 + (v63 << 16)) >> 13)) >> 32)
                              + ((613566757 * (unint64_t)((-268431360 - v67 + (v67 << 16)) >> 13)) >> 32)
                              + 1) >> 1;
        v59 = v24 + 2;
      }
      if (v39)
      {
        v68 = -(uint64_t)v39;
        do
        {
          v69 = *v58;
          v70 = v58[1];
          v71 = *(unsigned __int16 *)((char *)v58 + v16);
          v72 = *(unsigned __int16 *)((char *)v58 + v16 + 2);
          if (v69 >= 0xF000)
            v69 = 61440;
          if (v69 <= 0x1000)
            v69 = 4096;
          if (v70 >= 0xF000)
            v70 = 61440;
          if (v70 <= 0x1000)
            v70 = 4096;
          if (v71 >= 0xF000)
            v71 = 61440;
          if (v71 <= 0x1000)
            v71 = 4096;
          if (v72 >= 0xF000)
            v72 = 61440;
          if (v72 <= 0x1000)
            v72 = 4096;
          v58 += 2;
          *v59 = (((613566757 * (unint64_t)((-268431360 - v69 + (v69 << 16)) >> 13)) >> 32)
                              + ((613566757 * (unint64_t)((-268431360 - v71 + (v71 << 16)) >> 13)) >> 32)
                              + 1) >> 1;
          v59[1] = (((613566757 * (unint64_t)((-268431360 - v70 + (v70 << 16)) >> 13)) >> 32)
                                + ((613566757 * (unint64_t)((-268431360 - v72 + (v72 << 16)) >> 13)) >> 32)
                                + 1) >> 1;
          v59 += 2;
          v55 = __CFADD__(v68++, 1);
        }
        while (!v55);
      }
      v17 += v16;
      v24 = (_WORD *)((char *)v24 + v23);
      v56 += 2;
    }
    while (v56 < v57);
  }
  return 0;
}

uint64_t vt_CopyDec_sv22_sf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _WORD *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int16 *v40;
  _WORD *v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  int v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  BOOL v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unsigned __int16 *v53;
  _WORD *v54;
  unsigned int v55;
  int v56;
  unsigned int v57;
  int v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v15 = 2 * v10;
  v16 = a4[1];
  v17 = (unsigned __int16 *)(a3[1] + v16 * (v12 + v8) + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  v18 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v19 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v20 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v21 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v22 = 2 * v18;
  v23 = a8[1];
  v24 = (_WORD *)(a7[1] + ((unint64_t)(v23 * v20) >> 1) + ((2 * v18) & 0x7FFFFFFFFFFFFFFELL));
  v25 = v11 - v10;
  if (v25 >= v19 - v18)
    v26 = v19 - v18;
  else
    v26 = v25;
  v27 = v14 - v13;
  if (v14 - v13 >= v21 - v20)
    v27 = v21 - v20;
  if (v27)
  {
    v28 = 0;
    v29 = *a4;
    v30 = *a8;
    v31 = *a3 + v29 * v13;
    if (v13 >= v8)
      v32 = 0;
    else
      v32 = v29;
    v33 = v31 + v15 + v32;
    v34 = *a7 + v30 * v20 + v22;
    do
    {
      if (v26)
      {
        for (i = 0; i != v26; ++i)
        {
          v36 = *(unsigned __int16 *)(v33 + 2 * i);
          if (v36 >= 0xEB00)
            v36 = 60160;
          if (v36 <= 0x1000)
            v36 = 4096;
          *(_WORD *)(v34 + 2 * i) = (-268431360 - v36 + (v36 << 16)) / 0xDB00;
        }
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12)
    v37 = v12;
  else
    v37 = 0;
  v38 = v26 - (v9 & 1);
  if (v26 >> 1 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v26 >> 1;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v42 = *v17;
      if (v42 >= 0xF000)
        v42 = 61440;
      if (v42 <= 0x1000)
        v43 = 4096;
      else
        v43 = v42;
      if (v17[1] >= 0xF000u)
        v44 = 61440;
      else
        v44 = v17[1];
      if (v44 <= 0x1000)
        v45 = 4096;
      else
        v45 = v44;
      v40 = v17 + 2;
      *v24 = (613566757 * (unint64_t)((-268431360 - v43 + (v43 << 16)) >> 13)) >> 32;
      v24[1] = (613566757 * (unint64_t)((-268431360 - v45 + (v45 << 16)) >> 13)) >> 32;
      v41 = v24 + 2;
      if (!v39)
        goto LABEL_52;
    }
    else
    {
      v40 = v17;
      v41 = v24;
      if (!v39)
      {
LABEL_52:
        v17 += v16;
        v24 = (_WORD *)((char *)v24 + v23);
        goto LABEL_53;
      }
    }
    v46 = -(uint64_t)v39;
    do
    {
      v47 = *v40;
      v48 = v40[1];
      if (v47 >= 0xF000)
        v47 = 61440;
      if (v47 <= 0x1000)
        v47 = 4096;
      if (v48 >= 0xF000)
        v48 = 61440;
      if (v48 <= 0x1000)
        v48 = 4096;
      *v41 = (613566757 * (unint64_t)((-268431360 - v47 + (v47 << 16)) >> 13)) >> 32;
      v41[1] = (613566757 * (unint64_t)((-268431360 - v48 + (v48 << 16)) >> 13)) >> 32;
      v40 += 2;
      v41 += 2;
      v49 = __CFADD__(v46++, 1);
    }
    while (!v49);
    goto LABEL_52;
  }
LABEL_53:
  if (v27 != v37)
  {
    v50 = 0;
    v51 = v27 - v37;
    v52 = 2 * v16;
    do
    {
      v53 = v17;
      v54 = v24;
      if ((v9 & 1) != 0)
      {
        v55 = *v17;
        if (v55 >= 0xF000)
          v55 = 61440;
        if (v55 <= 0x1000)
          v56 = 4096;
        else
          v56 = v55;
        if (v17[1] >= 0xF000u)
          v57 = 61440;
        else
          v57 = v17[1];
        if (v57 <= 0x1000)
          v58 = 4096;
        else
          v58 = v57;
        v53 = v17 + 2;
        *v24 = (613566757 * (unint64_t)((-268431360 - v56 + (v56 << 16)) >> 13)) >> 32;
        v24[1] = (613566757 * (unint64_t)((-268431360 - v58 + (v58 << 16)) >> 13)) >> 32;
        v54 = v24 + 2;
      }
      if (v39)
      {
        v59 = -(uint64_t)v39;
        do
        {
          v60 = *v53;
          v61 = v53[1];
          if (v60 >= 0xF000)
            v60 = 61440;
          if (v60 <= 0x1000)
            v60 = 4096;
          if (v61 >= 0xF000)
            v61 = 61440;
          if (v61 <= 0x1000)
            v61 = 4096;
          *v54 = (613566757 * (unint64_t)((-268431360 - v60 + (v60 << 16)) >> 13)) >> 32;
          v54[1] = (613566757 * (unint64_t)((-268431360 - v61 + (v61 << 16)) >> 13)) >> 32;
          v53 += 2;
          v54 += 2;
          v49 = __CFADD__(v59++, 1);
        }
        while (!v49);
      }
      v17 = (unsigned __int16 *)((char *)v17 + v52);
      v24 = (_WORD *)((char *)v24 + v23);
      v50 += 2;
    }
    while (v50 < v51);
  }
  return 0;
}

uint64_t vt_Copy_s2as_t4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  __int16 *v37;
  _WORD *v38;
  uint64_t v39;
  __int16 v40;
  __int16 v41;
  BOOL v42;
  uint64_t v43;
  __int16 v44;
  __int16 v45;
  __int16 v46;
  unint64_t v47;
  uint64_t v48;
  __int16 *v49;
  int16x4_t *v50;
  __int16 v51;
  uint64_t v52;
  __int16 *v53;
  int16x4_t v54;
  __int16 v55;
  __int16 v56;
  __int16 v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  __int16 v64;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[3];
  v11 = a2[2] + v9;
  v12 = a4[1];
  v13 = (__int16 *)(a3[1] + v12 * v8 + 2 * (v9 & 0xFFFFFFFE));
  v15 = a6[4];
  v14 = a6[5];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v14 + 4 * v15);
  v18 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v18 >= a6[2])
    v18 = a6[2];
  if (v10 >= a6[3])
    v10 = a6[3];
  if (v10)
  {
    v19 = 0;
    v20 = *a8;
    v21 = a8[2];
    v22 = a7[2] + v21 * v14;
    v23 = *a7 + *a8 * v14;
    v24 = *a4;
    v25 = 2 * (v9 & 0xFFFFFFFE);
    v26 = a4[2];
    v27 = v22 + 2 * v15;
    v28 = v23 + 2 * v15;
    v29 = a3[2] + v26 * v8 + v25;
    v30 = *a3 + v24 * v8 + v25;
    do
    {
      if (v18)
      {
        for (i = 0; i != v18; ++i)
        {
          *(_WORD *)(v27 + 2 * i) = *(_WORD *)(v29 + 2 * i);
          *(_WORD *)(v28 + 2 * i) = *(_WORD *)(v30 + 2 * i) & 0xFFF0;
        }
      }
      v30 += v24;
      v28 += v20;
      v29 += v26;
      v27 += v21;
      ++v19;
    }
    while (v19 != v10);
  }
  v32 = v8 & 1;
  if (v10 >= v32)
    v33 = v8 & 1;
  else
    v33 = 0;
  v34 = v9;
  v35 = v18 >> 1;
  v36 = v9 & 1;
  if (v18 >> 1 >= (v18 - v36) >> 1)
    v35 = (v18 - v36) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v34 & 1) != 0)
    {
      v37 = v13 + 2;
      v44 = v13[1] & 0xFFF0;
      *v17 = *v13 & 0xFFF0;
      v17[1] = v44;
      v38 = v17 + 2;
      if (v35)
      {
LABEL_19:
        v39 = -(uint64_t)v35;
        do
        {
          v40 = *v37;
          v41 = v37[1];
          v37 += 2;
          *v38 = v40 & 0xFFF0;
          v38[1] = v41 & 0xFFF0;
          v38 += 2;
          v42 = __CFADD__(v39++, 1);
        }
        while (!v42);
        v43 = 2 * v35;
        goto LABEL_25;
      }
    }
    else
    {
      v37 = v13;
      v38 = v17;
      if (v35)
        goto LABEL_19;
    }
    v43 = 0;
LABEL_25:
    if ((v43 | (unint64_t)v36) < v18)
    {
      v45 = *v37 & 0xFFF0;
      v46 = v37[1] & 0xFFF0;
      *v38 = v45;
      v38[1] = v46;
    }
    v13 = (__int16 *)((char *)v13 + v12);
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v10 == v33)
  {
    v47 = 0;
  }
  else
  {
    v48 = 0;
    v47 = v10 - v33;
    do
    {
      v49 = v13;
      v50 = (int16x4_t *)v17;
      if ((v34 & 1) != 0)
      {
        v49 = v13 + 2;
        v51 = v13[1] & 0xFFF0;
        *v17 = *v13 & 0xFFF0;
        v17[1] = v51;
        v50 = (int16x4_t *)(v17 + 2);
      }
      if (v35)
      {
        v52 = -(uint64_t)v35;
        do
        {
          v53 = v49 + 2;
          v54.i32[0] = *v49 & 0xFFF0;
          v54.i32[1] = v49[1] & 0xFFF0;
          *v50++ = vuzp1_s16(v54, v54);
          v49 += 2;
          v42 = __CFADD__(v52++, 1);
        }
        while (!v42);
      }
      else
      {
        v53 = v49;
      }
      if ((v36 | (2 * v35)) < v18)
      {
        v55 = *v53 & 0xFFF0;
        v56 = v53[1] & 0xFFF0;
        v50->i16[0] = v55;
        v50->i16[1] = v56;
      }
      v13 = (__int16 *)((char *)v13 + v12);
      v17 = (_WORD *)((char *)v17 + v16);
      ++v48;
    }
    while (v48 != v47);
  }
  if (v47 + v32 < v10)
  {
    if ((v34 & 1) != 0)
    {
      v57 = *v13;
      v58 = v13[1];
      v13 += 2;
      *v17 = v57 & 0xFFF0;
      v17[1] = v58 & 0xFFF0;
      v17 += 2;
    }
    if (v35)
    {
      v59 = -(uint64_t)v35;
      do
      {
        v60 = *v13;
        v61 = v13[1];
        v13 += 2;
        *v17 = v60 & 0xFFF0;
        v17[1] = v61 & 0xFFF0;
        v17 += 2;
        v42 = __CFADD__(v59++, 1);
      }
      while (!v42);
      v62 = 2 * v35;
    }
    else
    {
      v62 = 0;
    }
    if ((v62 | (unint64_t)v36) < v18)
    {
      v63 = *v13 & 0xFFF0;
      v64 = v13[1] & 0xFFF0;
      *v17 = v63;
      v17[1] = v64;
    }
  }
  return 0;
}

uint64_t vt_Copy_sv22_tv44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _WORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  __int16 *v32;
  _WORD *v33;
  uint64_t v34;
  __int16 v35;
  __int16 v36;
  BOOL v37;
  uint64_t v38;
  __int16 v39;
  __int16 v40;
  __int16 v41;
  unint64_t v42;
  uint64_t v43;
  __int16 *v44;
  int16x4_t *v45;
  __int16 v46;
  uint64_t v47;
  __int16 *v48;
  int16x4_t v49;
  __int16 v50;
  __int16 v51;
  __int16 v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  __int16 v59;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[3];
  v11 = a2[2] + v9;
  v12 = a4[1];
  v13 = (__int16 *)(a3[1] + v12 * v8 + 2 * (v9 & 0xFFFFFFFE));
  v14 = a6[4];
  v15 = a6[5];
  v17 = a6[2];
  v16 = a6[3];
  v18 = a8[1];
  v19 = (_WORD *)(a7[1] + v18 * v15 + 4 * v14);
  v20 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v20 >= v17)
    v20 = v17;
  if (v10 >= v16)
    v10 = v16;
  if (v10)
  {
    v21 = 0;
    v22 = *a4;
    v23 = *a8;
    v24 = *a7 + *a8 * v15 + 2 * v14;
    v25 = *a3 + *a4 * v8 + 2 * (v9 & 0xFFFFFFFE);
    do
    {
      if (v20)
      {
        for (i = 0; i != v20; ++i)
          *(_WORD *)(v24 + 2 * i) = *(_WORD *)(v25 + 2 * i) & 0xFFF0;
      }
      v25 += v22;
      v24 += v23;
      ++v21;
    }
    while (v21 != v10);
  }
  v27 = v8 & 1;
  if (v10 >= v27)
    v28 = v8 & 1;
  else
    v28 = 0;
  v29 = v9;
  v30 = v20 >> 1;
  v31 = v9 & 1;
  if (v20 >> 1 >= (v20 - v31) >> 1)
    v30 = (v20 - v31) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v29 & 1) != 0)
    {
      v32 = v13 + 2;
      v39 = v13[1] & 0xFFF0;
      *v19 = *v13 & 0xFFF0;
      v19[1] = v39;
      v33 = v19 + 2;
      if (v30)
      {
LABEL_19:
        v34 = -(uint64_t)v30;
        do
        {
          v35 = *v32;
          v36 = v32[1];
          v32 += 2;
          *v33 = v35 & 0xFFF0;
          v33[1] = v36 & 0xFFF0;
          v33 += 2;
          v37 = __CFADD__(v34++, 1);
        }
        while (!v37);
        v38 = 2 * v30;
        goto LABEL_25;
      }
    }
    else
    {
      v32 = v13;
      v33 = v19;
      if (v30)
        goto LABEL_19;
    }
    v38 = 0;
LABEL_25:
    if ((v38 | (unint64_t)v31) < v20)
    {
      v40 = *v32 & 0xFFF0;
      v41 = v32[1] & 0xFFF0;
      *v33 = v40;
      v33[1] = v41;
    }
    v13 = (__int16 *)((char *)v13 + v12);
    v19 = (_WORD *)((char *)v19 + v18);
  }
  if (v10 == v28)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v10 - v28;
    do
    {
      v44 = v13;
      v45 = (int16x4_t *)v19;
      if ((v29 & 1) != 0)
      {
        v44 = v13 + 2;
        v46 = v13[1] & 0xFFF0;
        *v19 = *v13 & 0xFFF0;
        v19[1] = v46;
        v45 = (int16x4_t *)(v19 + 2);
      }
      if (v30)
      {
        v47 = -(uint64_t)v30;
        do
        {
          v48 = v44 + 2;
          v49.i32[0] = *v44 & 0xFFF0;
          v49.i32[1] = v44[1] & 0xFFF0;
          *v45++ = vuzp1_s16(v49, v49);
          v44 += 2;
          v37 = __CFADD__(v47++, 1);
        }
        while (!v37);
      }
      else
      {
        v48 = v44;
      }
      if ((v31 | (2 * v30)) < v20)
      {
        v50 = *v48 & 0xFFF0;
        v51 = v48[1] & 0xFFF0;
        v45->i16[0] = v50;
        v45->i16[1] = v51;
      }
      v13 = (__int16 *)((char *)v13 + v12);
      v19 = (_WORD *)((char *)v19 + v18);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v27 < v10)
  {
    if ((v29 & 1) != 0)
    {
      v52 = *v13;
      v53 = v13[1];
      v13 += 2;
      *v19 = v52 & 0xFFF0;
      v19[1] = v53 & 0xFFF0;
      v19 += 2;
    }
    if (v30)
    {
      v54 = -(uint64_t)v30;
      do
      {
        v55 = *v13;
        v56 = v13[1];
        v13 += 2;
        *v19 = v55 & 0xFFF0;
        v19[1] = v56 & 0xFFF0;
        v19 += 2;
        v37 = __CFADD__(v54++, 1);
      }
      while (!v37);
      v57 = 2 * v30;
    }
    else
    {
      v57 = 0;
    }
    if ((v57 | (unint64_t)v31) < v20)
    {
      v58 = *v13 & 0xFFF0;
      v59 = v13[1] & 0xFFF0;
      *v19 = v58;
      v19[1] = v59;
    }
  }
  return 0;
}

uint64_t vt_Copy_sv22_tf44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _WORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  unsigned __int16 *v34;
  _WORD *v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  BOOL v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  unint64_t v46;
  uint64_t v47;
  int32x2_t v48;
  uint32x2_t v49;
  unsigned __int16 *v50;
  int16x4_t *v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  uint64_t v55;
  unsigned __int16 *v56;
  uint32x2_t v57;
  int16x4_t v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[3];
  v11 = a2[2] + v9;
  v12 = a4[1];
  v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 2 * (v9 & 0xFFFFFFFE));
  v14 = a6[4];
  v15 = a6[5];
  v17 = a6[2];
  v16 = a6[3];
  v18 = a8[1];
  v19 = (_WORD *)(a7[1] + v18 * v15 + 4 * v14);
  v20 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v20 >= v17)
    v20 = v17;
  if (v10 >= v16)
    v21 = v16;
  else
    v21 = v10;
  if (v21)
  {
    v22 = 0;
    v23 = *a4;
    v24 = *a8;
    v25 = *a7 + *a8 * v15 + 2 * v14;
    v26 = *a3 + *a4 * v8 + 2 * (v9 & 0xFFFFFFFE);
    do
    {
      if (v20)
      {
        for (i = 0; i != v20; ++i)
        {
          v28 = *(unsigned __int16 *)(v26 + 2 * i);
          if (v28 >= 0xEB00)
            v28 = 60160;
          if (v28 <= 0x1000)
            v28 = 4096;
          *(_WORD *)(v25 + 2 * i) = 16 * ((-16773120 - v28 + (v28 << 12)) / 0xDB00);
        }
      }
      v26 += v23;
      v25 += v24;
      ++v22;
    }
    while (v22 != v21);
  }
  v29 = v8 & 1;
  if (v21 >= v29)
    v30 = v8 & 1;
  else
    v30 = 0;
  v31 = v9;
  v32 = v20 >> 1;
  v33 = v9 & 1;
  if (v20 >> 1 >= (v20 - v33) >> 1)
    v32 = (v20 - v33) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v31 & 1) != 0)
    {
      v41 = *v13;
      v42 = v13[1];
      if (v41 >= 0xF000)
        v41 = 61440;
      if (v41 <= 0x1000)
        v41 = 4096;
      if (v42 >= 0xF000)
        v42 = 61440;
      if (v42 <= 0x1000)
        v43 = 4096;
      else
        v43 = v42;
      v34 = v13 + 2;
      *v19 = 16 * ((613566757 * (unint64_t)((-16773120 - v41 + (v41 << 12)) >> 13)) >> 32);
      v19[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v43 + (v43 << 12)) >> 13)) >> 32);
      v35 = v19 + 2;
      if (v32)
        goto LABEL_24;
    }
    else
    {
      v34 = v13;
      v35 = v19;
      if (v32)
      {
LABEL_24:
        v36 = -(uint64_t)v32;
        do
        {
          v37 = *v34;
          v38 = v34[1];
          if (v37 >= 0xF000)
            v37 = 61440;
          if (v37 <= 0x1000)
            v37 = 4096;
          if (v38 >= 0xF000)
            v38 = 61440;
          if (v38 <= 0x1000)
            v38 = 4096;
          v34 += 2;
          *v35 = 16 * ((613566757 * (unint64_t)((-16773120 - v37 + (v37 << 12)) >> 13)) >> 32);
          v35[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v38 + (v38 << 12)) >> 13)) >> 32);
          v35 += 2;
          v39 = __CFADD__(v36++, 1);
        }
        while (!v39);
        v40 = 2 * v32;
        goto LABEL_47;
      }
    }
    v40 = 0;
LABEL_47:
    if ((v40 | (unint64_t)v33) < v20)
    {
      v44 = *v34;
      v45 = v34[1];
      if (v44 >= 0xF000)
        v44 = 61440;
      if (v44 <= 0x1000)
        v44 = 4096;
      if (v45 >= 0xF000)
        v45 = 61440;
      if (v45 <= 0x1000)
        v45 = 4096;
      *v35 = 16 * ((613566757 * (unint64_t)((-16773120 - v44 + (v44 << 12)) >> 13)) >> 32);
      v35[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v45 + (v45 << 12)) >> 13)) >> 32);
    }
    v13 = (unsigned __int16 *)((char *)v13 + v12);
    v19 = (_WORD *)((char *)v19 + v18);
  }
  if (v21 == v30)
  {
    v46 = 0;
  }
  else
  {
    v47 = 0;
    v46 = v21 - v30;
    v48 = vdup_n_s32(0xFF001000);
    v49 = (uint32x2_t)vdup_n_s32(0x24924925u);
    do
    {
      v50 = v13;
      v51 = (int16x4_t *)v19;
      if ((v31 & 1) != 0)
      {
        v52 = *v13;
        v53 = v13[1];
        if (v52 >= 0xF000)
          v52 = 61440;
        if (v52 <= 0x1000)
          v52 = 4096;
        if (v53 >= 0xF000)
          v53 = 61440;
        if (v53 <= 0x1000)
          v54 = 4096;
        else
          v54 = v53;
        v50 = v13 + 2;
        *v19 = 16 * ((613566757 * (unint64_t)((-16773120 - v52 + (v52 << 12)) >> 13)) >> 32);
        v19[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v54 + (v54 << 12)) >> 13)) >> 32);
        v51 = (int16x4_t *)(v19 + 2);
      }
      if (v32)
      {
        v55 = -(uint64_t)v32;
        do
        {
          v56 = v50 + 2;
          v57.i32[0] = *v50;
          v57.i32[1] = v50[1];
          v58 = (int16x4_t)vshl_n_s32(vshrn_n_s64((int64x2_t)vmull_u32(vshr_n_u32((uint32x2_t)vmla_s32(v48, (int32x2_t)vmax_u32(vmin_u32(v57, (uint32x2_t)0xF0000000F000), (uint32x2_t)0x100000001000), (int32x2_t)0xF0000000FLL), 0xDuLL), v49), 0x20uLL), 4uLL);
          *v51++ = vuzp1_s16(v58, v58);
          v50 += 2;
          v39 = __CFADD__(v55++, 1);
        }
        while (!v39);
      }
      else
      {
        v56 = v50;
      }
      if ((v33 | (2 * v32)) < v20)
      {
        v59 = *v56;
        v60 = v56[1];
        if (v59 >= 0xF000)
          v59 = 61440;
        if (v59 <= 0x1000)
          v59 = 4096;
        if (v60 >= 0xF000)
          v60 = 61440;
        if (v60 <= 0x1000)
          v60 = 4096;
        v51->i16[0] = 16 * ((613566757 * (unint64_t)((-16773120 - v59 + (v59 << 12)) >> 13)) >> 32);
        v51->i16[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v60 + (v60 << 12)) >> 13)) >> 32);
      }
      v13 = (unsigned __int16 *)((char *)v13 + v12);
      v19 = (_WORD *)((char *)v19 + v18);
      ++v47;
    }
    while (v47 != v46);
  }
  if (v46 + v29 < v21)
  {
    if ((v31 & 1) != 0)
    {
      v61 = *v13;
      v62 = v13[1];
      if (v61 >= 0xF000)
        v61 = 61440;
      if (v61 <= 0x1000)
        v61 = 4096;
      if (v62 >= 0xF000)
        v62 = 61440;
      if (v62 <= 0x1000)
        v62 = 4096;
      v13 += 2;
      *v19 = 16 * ((613566757 * (unint64_t)((-16773120 - v61 + (v61 << 12)) >> 13)) >> 32);
      v19[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v62 + (v62 << 12)) >> 13)) >> 32);
      v19 += 2;
    }
    if (v32)
    {
      v63 = -(uint64_t)v32;
      do
      {
        v64 = *v13;
        v65 = v13[1];
        if (v64 >= 0xF000)
          v64 = 61440;
        if (v64 <= 0x1000)
          v64 = 4096;
        if (v65 >= 0xF000)
          v65 = 61440;
        if (v65 <= 0x1000)
          v65 = 4096;
        v13 += 2;
        *v19 = 16 * ((613566757 * (unint64_t)((-16773120 - v64 + (v64 << 12)) >> 13)) >> 32);
        v19[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v65 + (v65 << 12)) >> 13)) >> 32);
        v19 += 2;
        v39 = __CFADD__(v63++, 1);
      }
      while (!v39);
      v32 *= 2;
    }
    if ((v32 | v33) < v20)
    {
      v66 = *v13;
      v67 = v13[1];
      if (v66 >= 0xF000)
        v66 = 61440;
      if (v66 <= 0x1000)
        v66 = 4096;
      if (v67 >= 0xF000)
        v67 = 61440;
      if (v67 <= 0x1000)
        v67 = 4096;
      *v19 = 16 * ((613566757 * (unint64_t)((-16773120 - v66 + (v66 << 12)) >> 13)) >> 32);
      v19[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v67 + (v67 << 12)) >> 13)) >> 32);
    }
  }
  return 0;
}

uint64_t vt_Copy_s2as_t2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _WORD *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  unint64_t v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  _WORD *v39;
  _WORD *v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  BOOL v44;
  unint64_t v45;
  uint64_t v46;
  _WORD *v47;
  _WORD *v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  __int16 v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = 2 * (v10 + v9);
  v13 = a4[1];
  v14 = (_WORD *)(a3[1] + v13 * v11 + (v12 & 0xFFFFFFFFFFFFFFFCLL));
  v15 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v16 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v17 = *(_QWORD *)(a6 + 40);
  v18 = 2 * v15;
  v19 = a8[1];
  v20 = (_WORD *)(a7[1] + v19 * v17 + ((2 * v15) & 0x7FFFFFFFFFFFFFFELL));
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9) >= v16 - v15)
    v21 = v16 - v15;
  else
    v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v22 = 0;
    v23 = *a8;
    v24 = a8[2];
    v25 = a7[2] + v24 * v17;
    v26 = *a7 + *a8 * v17;
    v27 = *a4;
    v28 = a4[2];
    v29 = v25 + v18;
    v30 = v26 + v18;
    v31 = a3[2] + v28 * v11 + v12;
    v32 = *a3 + v27 * v11 + v12;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
        {
          *(_WORD *)(v29 + 2 * i) = *(_WORD *)(v31 + 2 * i);
          *(_WORD *)(v30 + 2 * i) = *(_WORD *)(v32 + 2 * i) & 0xFFF0;
        }
      }
      v32 += v27;
      v30 += v23;
      v31 += v28;
      v29 += v24;
      ++v22;
    }
    while (v22 != v8);
  }
  v34 = v11 & 1;
  if (v8 >= v34)
    v35 = v11 & 1;
  else
    v35 = 0;
  v36 = v9;
  v37 = v21 >> 1;
  v38 = (v21 - v10) >> 1;
  if (v37 >= v38)
    v37 = v38;
  if ((v11 & 1) != 0)
  {
    if ((v36 & 1) != 0)
    {
      v39 = v14 + 2;
      v41 = v14[1] & 0xFFF0;
      *v20 = *v14 & 0xFFF0;
      v20[1] = v41;
      v40 = v20 + 2;
      if (!v37)
      {
LABEL_25:
        v14 = (_WORD *)((char *)v14 + v13);
        v20 = (_WORD *)((char *)v20 + v19);
        goto LABEL_26;
      }
    }
    else
    {
      v39 = v14;
      v40 = v20;
      if (!v37)
        goto LABEL_25;
    }
    v42 = -(uint64_t)v37;
    do
    {
      v43 = v39[1] & 0xFFF0;
      *v40 = *v39 & 0xFFF0;
      v40[1] = v43;
      v39 += 2;
      v40 += 2;
      v44 = __CFADD__(v42++, 1);
    }
    while (!v44);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v35)
  {
    v45 = 0;
  }
  else
  {
    v46 = 0;
    v45 = v8 - v35;
    do
    {
      v47 = v14;
      v48 = v20;
      if ((v36 & 1) != 0)
      {
        v47 = v14 + 2;
        v49 = v14[1] & 0xFFF0;
        *v20 = *v14 & 0xFFF0;
        v20[1] = v49;
        v48 = v20 + 2;
      }
      if (v37)
      {
        v50 = -(uint64_t)v37;
        do
        {
          v51 = v47[1] & 0xFFF0;
          *v48 = *v47 & 0xFFF0;
          v48[1] = v51;
          v47 += 2;
          v48 += 2;
          v44 = __CFADD__(v50++, 1);
        }
        while (!v44);
      }
      v14 = (_WORD *)((char *)v14 + v13);
      v20 = (_WORD *)((char *)v20 + v19);
      ++v46;
    }
    while (v46 != v45);
  }
  if (v45 + v34 < v8)
  {
    if ((v36 & 1) != 0)
    {
      v52 = *v14;
      v53 = v14[1];
      v14 += 2;
      *v20 = v52 & 0xFFF0;
      v20[1] = v53 & 0xFFF0;
      v20 += 2;
    }
    if (v37)
    {
      v54 = -(uint64_t)v37;
      do
      {
        v55 = v14[1] & 0xFFF0;
        *v20 = *v14 & 0xFFF0;
        v20[1] = v55;
        v14 += 2;
        v20 += 2;
        v44 = __CFADD__(v54++, 1);
      }
      while (!v44);
    }
  }
  return 0;
}

uint64_t vt_Copy_sv22_tv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  _WORD *v34;
  _WORD *v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  BOOL v39;
  unint64_t v40;
  uint64_t v41;
  _WORD *v42;
  _WORD *v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  __int16 v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (_WORD *)(a3[1] + v13 * v12 + ((2 * (v10 + v9)) & 0xFFFFFFFFFFFFFFFCLL));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  if (v11 - (v10 + v9) >= (unint64_t)(v17 - v16))
    v22 = v17 - v16;
  else
    v22 = v11 - (v10 + v9);
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = *a7 + *a8 * v18 + v19;
    v27 = *a3 + v24 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_WORD *)(v26 + 2 * i) = *(_WORD *)(v27 + 2 * i) & 0xFFF0;
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v8);
  }
  v29 = v12 & 1;
  if (v8 >= v29)
    v30 = v12 & 1;
  else
    v30 = 0;
  v31 = v9;
  v32 = v22 >> 1;
  v33 = (v22 - v10) >> 1;
  if (v32 >= v33)
    v32 = v33;
  if ((v12 & 1) != 0)
  {
    if ((v31 & 1) != 0)
    {
      v34 = v14 + 2;
      v36 = v14[1] & 0xFFF0;
      *v21 = *v14 & 0xFFF0;
      v21[1] = v36;
      v35 = v21 + 2;
      if (!v32)
      {
LABEL_25:
        v14 = (_WORD *)((char *)v14 + v13);
        v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_26;
      }
    }
    else
    {
      v34 = v14;
      v35 = v21;
      if (!v32)
        goto LABEL_25;
    }
    v37 = -(uint64_t)v32;
    do
    {
      v38 = v34[1] & 0xFFF0;
      *v35 = *v34 & 0xFFF0;
      v35[1] = v38;
      v34 += 2;
      v35 += 2;
      v39 = __CFADD__(v37++, 1);
    }
    while (!v39);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v30)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v8 - v30;
    do
    {
      v42 = v14;
      v43 = v21;
      if ((v31 & 1) != 0)
      {
        v42 = v14 + 2;
        v44 = v14[1] & 0xFFF0;
        *v21 = *v14 & 0xFFF0;
        v21[1] = v44;
        v43 = v21 + 2;
      }
      if (v32)
      {
        v45 = -(uint64_t)v32;
        do
        {
          v46 = v42[1] & 0xFFF0;
          *v43 = *v42 & 0xFFF0;
          v43[1] = v46;
          v42 += 2;
          v43 += 2;
          v39 = __CFADD__(v45++, 1);
        }
        while (!v39);
      }
      v14 = (_WORD *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v29 < v8)
  {
    if ((v31 & 1) != 0)
    {
      v47 = *v14;
      v48 = v14[1];
      v14 += 2;
      *v21 = v47 & 0xFFF0;
      v21[1] = v48 & 0xFFF0;
      v21 += 2;
    }
    if (v32)
    {
      v49 = -(uint64_t)v32;
      do
      {
        v50 = v14[1] & 0xFFF0;
        *v21 = *v14 & 0xFFF0;
        v21[1] = v50;
        v14 += 2;
        v21 += 2;
        v39 = __CFADD__(v49++, 1);
      }
      while (!v39);
    }
  }
  return 0;
}

uint64_t vt_Copy_sv22_tf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unsigned __int16 *v34;
  _WORD *v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  BOOL v43;
  unint64_t v44;
  uint64_t v45;
  unsigned __int16 *v46;
  _WORD *v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  int v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + ((2 * (v10 + v9)) & 0xFFFFFFFFFFFFFFFCLL));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  if (v11 - (v10 + v9) >= (unint64_t)(v17 - v16))
    v22 = v17 - v16;
  else
    v22 = v11 - (v10 + v9);
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = *a7 + *a8 * v18 + v19;
    v27 = *a3 + v24 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          v29 = *(unsigned __int16 *)(v27 + 2 * i);
          if (v29 >= 0xEB00)
            v29 = 60160;
          if (v29 <= 0x1000)
            v29 = 4096;
          *(_WORD *)(v26 + 2 * i) = 16 * ((-16773120 - v29 + (v29 << 12)) / 0xDB00);
        }
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v8);
  }
  v30 = v12 & 1;
  if (v8 >= v30)
    v31 = v12 & 1;
  else
    v31 = 0;
  v32 = v9;
  v33 = v22 >> 1;
  if (v22 >> 1 >= (v22 - v10) >> 1)
    v33 = (v22 - v10) >> 1;
  if ((v12 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v36 = *v14;
      if (v36 >= 0xF000)
        v36 = 61440;
      if (v36 <= 0x1000)
        v37 = 4096;
      else
        v37 = v36;
      if (v14[1] >= 0xF000u)
        v38 = 61440;
      else
        v38 = v14[1];
      if (v38 <= 0x1000)
        v39 = 4096;
      else
        v39 = v38;
      v34 = v14 + 2;
      *v21 = 16 * ((613566757 * (unint64_t)((-16773120 - v37 + (v37 << 12)) >> 13)) >> 32);
      v21[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v39 + (v39 << 12)) >> 13)) >> 32);
      v35 = v21 + 2;
      if (!v33)
        goto LABEL_48;
    }
    else
    {
      v34 = v14;
      v35 = v21;
      if (!v33)
      {
LABEL_48:
        v14 = (unsigned __int16 *)((char *)v14 + v13);
        v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_49;
      }
    }
    v40 = -(uint64_t)v33;
    do
    {
      v41 = *v34;
      v42 = v34[1];
      if (v41 >= 0xF000)
        v41 = 61440;
      if (v41 <= 0x1000)
        v41 = 4096;
      if (v42 >= 0xF000)
        v42 = 61440;
      if (v42 <= 0x1000)
        v42 = 4096;
      *v35 = 16 * ((613566757 * (unint64_t)((-16773120 - v41 + (v41 << 12)) >> 13)) >> 32);
      v35[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v42 + (v42 << 12)) >> 13)) >> 32);
      v34 += 2;
      v35 += 2;
      v43 = __CFADD__(v40++, 1);
    }
    while (!v43);
    goto LABEL_48;
  }
LABEL_49:
  if (v8 == v31)
  {
    v44 = 0;
  }
  else
  {
    v45 = 0;
    v44 = v8 - v31;
    do
    {
      v46 = v14;
      v47 = v21;
      if ((v32 & 1) != 0)
      {
        v48 = *v14;
        if (v48 >= 0xF000)
          v48 = 61440;
        if (v48 <= 0x1000)
          v49 = 4096;
        else
          v49 = v48;
        if (v14[1] >= 0xF000u)
          v50 = 61440;
        else
          v50 = v14[1];
        if (v50 <= 0x1000)
          v51 = 4096;
        else
          v51 = v50;
        v46 = v14 + 2;
        *v21 = 16 * ((613566757 * (unint64_t)((-16773120 - v49 + (v49 << 12)) >> 13)) >> 32);
        v21[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v51 + (v51 << 12)) >> 13)) >> 32);
        v47 = v21 + 2;
      }
      if (v33)
      {
        v52 = -(uint64_t)v33;
        do
        {
          v53 = *v46;
          v54 = v46[1];
          if (v53 >= 0xF000)
            v53 = 61440;
          if (v53 <= 0x1000)
            v53 = 4096;
          if (v54 >= 0xF000)
            v54 = 61440;
          if (v54 <= 0x1000)
            v54 = 4096;
          *v47 = 16 * ((613566757 * (unint64_t)((-16773120 - v53 + (v53 << 12)) >> 13)) >> 32);
          v47[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v54 + (v54 << 12)) >> 13)) >> 32);
          v46 += 2;
          v47 += 2;
          v43 = __CFADD__(v52++, 1);
        }
        while (!v43);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v30 < v8)
  {
    if ((v32 & 1) != 0)
    {
      v55 = *v14;
      v56 = v14[1];
      if (v55 >= 0xF000)
        v55 = 61440;
      if (v55 <= 0x1000)
        v55 = 4096;
      if (v56 >= 0xF000)
        v56 = 61440;
      if (v56 <= 0x1000)
        v56 = 4096;
      v14 += 2;
      *v21 = 16 * ((613566757 * (unint64_t)((-16773120 - v55 + (v55 << 12)) >> 13)) >> 32);
      v21[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v56 + (v56 << 12)) >> 13)) >> 32);
      v21 += 2;
    }
    if (v33)
    {
      v57 = -(uint64_t)v33;
      do
      {
        v58 = *v14;
        v59 = v14[1];
        if (v58 >= 0xF000)
          v58 = 61440;
        if (v58 <= 0x1000)
          v58 = 4096;
        if (v59 >= 0xF000)
          v59 = 61440;
        if (v59 <= 0x1000)
          v59 = 4096;
        *v21 = 16 * ((613566757 * (unint64_t)((-16773120 - v58 + (v58 << 12)) >> 13)) >> 32);
        v21[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v59 + (v59 << 12)) >> 13)) >> 32);
        v14 += 2;
        v21 += 2;
        v43 = __CFADD__(v57++, 1);
      }
      while (!v43);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sv22_tv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _WORD *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned __int16 *v39;
  _WORD *v40;
  int v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  BOOL v47;
  unint64_t v48;
  unint64_t v49;
  unsigned __int16 *v50;
  _WORD *v51;
  int v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = (v8 & 1) + v8;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v15 = 2 * v10;
  v16 = a4[1];
  v17 = (unsigned __int16 *)(a3[1] + v16 * (v12 + v9) + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  v18 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v19 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v20 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v21 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v22 = 2 * v18;
  v23 = a8[1];
  v24 = (_WORD *)(a7[1] + ((unint64_t)(v23 * v20) >> 1) + ((2 * v18) & 0x7FFFFFFFFFFFFFFELL));
  v25 = v11 - v10;
  v26 = v19 - v18;
  if (v25 < v19 - v18)
    v26 = v25;
  v27 = v14 - v13;
  if (v14 - v13 >= v21 - v20)
    v27 = v21 - v20;
  if (v27)
  {
    v28 = 0;
    v29 = *a4;
    v30 = *a8;
    v31 = *a3 + v29 * v13;
    if (v13 >= v9)
      v32 = 0;
    else
      v32 = v29;
    v33 = v31 + v15 + v32;
    v34 = *a7 + v30 * v20 + v22;
    do
    {
      if (v26)
      {
        for (i = 0; i != v26; ++i)
          *(_WORD *)(v34 + 2 * i) = *(_WORD *)(v33 + 2 * i) & 0xFFF0;
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12)
    v36 = v12;
  else
    v36 = 0;
  v37 = v26 - (v8 & 1);
  if (v26 >> 1 >= v37 >> 1)
    v38 = v37 >> 1;
  else
    v38 = v26 >> 1;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v39 = v17 + 2;
      v41 = (*(unsigned __int16 *)((char *)v17 + v16 + 2) >> 4) + (v17[1] >> 4);
      *v24 = (8 * ((*(unsigned __int16 *)((char *)v17 + v16) >> 4) + (*v17 >> 4)) + 8) & 0xFFF0;
      v24[1] = (8 * v41 + 8) & 0xFFF0;
      v40 = v24 + 2;
      if (!v38)
      {
LABEL_28:
        v17 += v16;
        v24 = (_WORD *)((char *)v24 + v23);
        goto LABEL_29;
      }
    }
    else
    {
      v39 = v17;
      v40 = v24;
      if (!v38)
        goto LABEL_28;
    }
    v42 = -(uint64_t)v38;
    do
    {
      v43 = *v39;
      v44 = v39[1];
      v45 = *(unsigned __int16 *)((char *)v39 + v16);
      v46 = *(unsigned __int16 *)((char *)v39 + v16 + 2);
      v39 += 2;
      *v40 = (8 * ((v45 >> 4) + (v43 >> 4)) + 8) & 0xFFF0;
      v40[1] = (8 * ((v46 >> 4) + (v44 >> 4)) + 8) & 0xFFF0;
      v40 += 2;
      v47 = __CFADD__(v42++, 1);
    }
    while (!v47);
    goto LABEL_28;
  }
LABEL_29:
  if (v27 != v36)
  {
    v48 = 0;
    v49 = v27 - v36;
    do
    {
      v50 = v17;
      v51 = v24;
      if ((v8 & 1) != 0)
      {
        v50 = v17 + 2;
        v52 = (*(unsigned __int16 *)((char *)v17 + v16 + 2) >> 4) + (v17[1] >> 4);
        *v24 = (8 * ((*(unsigned __int16 *)((char *)v17 + v16) >> 4) + (*v17 >> 4)) + 8) & 0xFFF0;
        v24[1] = (8 * v52 + 8) & 0xFFF0;
        v51 = v24 + 2;
      }
      if (v38)
      {
        v53 = -(uint64_t)v38;
        do
        {
          v54 = *v50;
          v55 = v50[1];
          v56 = *(unsigned __int16 *)((char *)v50 + v16);
          v57 = *(unsigned __int16 *)((char *)v50 + v16 + 2);
          v50 += 2;
          *v51 = (8 * ((v56 >> 4) + (v54 >> 4)) + 8) & 0xFFF0;
          v51[1] = (8 * ((v57 >> 4) + (v55 >> 4)) + 8) & 0xFFF0;
          v51 += 2;
          v47 = __CFADD__(v53++, 1);
        }
        while (!v47);
      }
      v17 += v16;
      v24 = (_WORD *)((char *)v24 + v23);
      v48 += 2;
    }
    while (v48 < v49);
  }
  return 0;
}

uint64_t vt_CopyDec_sv22_tv20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _WORD *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _WORD *v39;
  _WORD *v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  BOOL v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _WORD *v48;
  _WORD *v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = (v8 & 1) + v8;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v15 = 2 * v10;
  v16 = a4[1];
  v17 = (_WORD *)(a3[1] + v16 * (v12 + v9) + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  v18 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v19 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v20 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v21 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v22 = 2 * v18;
  v23 = a8[1];
  v24 = (_WORD *)(a7[1] + ((unint64_t)(v23 * v20) >> 1) + ((2 * v18) & 0x7FFFFFFFFFFFFFFELL));
  v25 = v11 - v10;
  v26 = v19 - v18;
  if (v25 < v19 - v18)
    v26 = v25;
  v27 = v14 - v13;
  if (v14 - v13 >= v21 - v20)
    v27 = v21 - v20;
  if (v27)
  {
    v28 = 0;
    v29 = *a4;
    v30 = *a8;
    v31 = *a3 + v29 * v13;
    if (v13 >= v9)
      v32 = 0;
    else
      v32 = v29;
    v33 = v31 + v15 + v32;
    v34 = *a7 + v30 * v20 + v22;
    do
    {
      if (v26)
      {
        for (i = 0; i != v26; ++i)
          *(_WORD *)(v34 + 2 * i) = *(_WORD *)(v33 + 2 * i) & 0xFFF0;
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12)
    v36 = v12;
  else
    v36 = 0;
  v37 = v26 - (v8 & 1);
  if (v26 >> 1 >= v37 >> 1)
    v38 = v37 >> 1;
  else
    v38 = v26 >> 1;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v39 = v17 + 2;
      v41 = v17[1] & 0xFFF0;
      *v24 = *v17 & 0xFFF0;
      v24[1] = v41;
      v40 = v24 + 2;
      if (!v38)
      {
LABEL_28:
        v17 += v16;
        v24 = (_WORD *)((char *)v24 + v23);
        goto LABEL_29;
      }
    }
    else
    {
      v39 = v17;
      v40 = v24;
      if (!v38)
        goto LABEL_28;
    }
    v42 = -(uint64_t)v38;
    do
    {
      v43 = v39[1] & 0xFFF0;
      *v40 = *v39 & 0xFFF0;
      v40[1] = v43;
      v39 += 2;
      v40 += 2;
      v44 = __CFADD__(v42++, 1);
    }
    while (!v44);
    goto LABEL_28;
  }
LABEL_29:
  if (v27 != v36)
  {
    v45 = 0;
    v46 = v27 - v36;
    v47 = 2 * v16;
    do
    {
      v48 = v17;
      v49 = v24;
      if ((v8 & 1) != 0)
      {
        v48 = v17 + 2;
        v50 = v17[1] & 0xFFF0;
        *v24 = *v17 & 0xFFF0;
        v24[1] = v50;
        v49 = v24 + 2;
      }
      if (v38)
      {
        v51 = -(uint64_t)v38;
        do
        {
          v52 = v48[1] & 0xFFF0;
          *v49 = *v48 & 0xFFF0;
          v49[1] = v52;
          v48 += 2;
          v49 += 2;
          v44 = __CFADD__(v51++, 1);
        }
        while (!v44);
      }
      v17 = (_WORD *)((char *)v17 + v47);
      v24 = (_WORD *)((char *)v24 + v23);
      v45 += 2;
    }
    while (v45 < v46);
  }
  return 0;
}

uint64_t vt_CopyAvg_sv22_tf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _WORD *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int16 *v40;
  _WORD *v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  BOOL v55;
  unint64_t v56;
  unint64_t v57;
  unsigned __int16 *v58;
  _WORD *v59;
  unsigned int v60;
  int v61;
  unsigned int v62;
  int v63;
  unsigned int v64;
  int v65;
  unsigned int v66;
  int v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v15 = 2 * v10;
  v16 = a4[1];
  v17 = (unsigned __int16 *)(a3[1] + v16 * (v12 + v8) + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  v18 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v19 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v20 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v21 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v22 = 2 * v18;
  v23 = a8[1];
  v24 = (_WORD *)(a7[1] + ((unint64_t)(v23 * v20) >> 1) + ((2 * v18) & 0x7FFFFFFFFFFFFFFELL));
  v25 = v11 - v10;
  if (v25 >= v19 - v18)
    v26 = v19 - v18;
  else
    v26 = v25;
  v27 = v14 - v13;
  if (v14 - v13 >= v21 - v20)
    v27 = v21 - v20;
  if (v27)
  {
    v28 = 0;
    v29 = *a4;
    v30 = *a8;
    v31 = *a3 + v29 * v13;
    if (v13 >= v8)
      v32 = 0;
    else
      v32 = v29;
    v33 = v31 + v15 + v32;
    v34 = *a7 + v30 * v20 + v22;
    do
    {
      if (v26)
      {
        for (i = 0; i != v26; ++i)
        {
          v36 = *(unsigned __int16 *)(v33 + 2 * i);
          if (v36 >= 0xEB00)
            v36 = 60160;
          if (v36 <= 0x1000)
            v36 = 4096;
          *(_WORD *)(v34 + 2 * i) = 16 * ((-16773120 - v36 + (v36 << 12)) / 0xDB00);
        }
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12)
    v37 = v12;
  else
    v37 = 0;
  v38 = v26 - (v9 & 1);
  if (v26 >> 1 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v26 >> 1;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v42 = *v17;
      if (v42 >= 0xF000)
        v42 = 61440;
      if (v42 <= 0x1000)
        v43 = 4096;
      else
        v43 = v42;
      if (v17[1] >= 0xF000u)
        v44 = 61440;
      else
        v44 = v17[1];
      if (v44 <= 0x1000)
        v45 = 4096;
      else
        v45 = v44;
      if (*(unsigned __int16 *)((char *)v17 + v16) >= 0xF000u)
        v46 = 61440;
      else
        v46 = *(unsigned __int16 *)((char *)v17 + v16);
      if (v46 <= 0x1000)
        v47 = 4096;
      else
        v47 = v46;
      if (*(unsigned __int16 *)((char *)v17 + v16 + 2) >= 0xF000u)
        v48 = 61440;
      else
        v48 = *(unsigned __int16 *)((char *)v17 + v16 + 2);
      if (v48 <= 0x1000)
        v49 = 4096;
      else
        v49 = v48;
      v40 = v17 + 2;
      *v24 = (8
            * (((613566757 * (unint64_t)((-16773120 - v47 + (v47 << 12)) >> 13)) >> 32)
             + ((613566757 * (unint64_t)((-16773120 - v43 + (v43 << 12)) >> 13)) >> 32))
            + 8) & 0xFFF0;
      v24[1] = (8
              * (((613566757 * (unint64_t)((-16773120 - v49 + (v49 << 12)) >> 13)) >> 32)
               + ((613566757 * (unint64_t)((-16773120 - v45 + (v45 << 12)) >> 13)) >> 32))
              + 8) & 0xFFF0;
      v41 = v24 + 2;
      if (!v39)
        goto LABEL_72;
    }
    else
    {
      v40 = v17;
      v41 = v24;
      if (!v39)
      {
LABEL_72:
        v17 += v16;
        v24 = (_WORD *)((char *)v24 + v23);
        goto LABEL_73;
      }
    }
    v50 = -(uint64_t)v39;
    do
    {
      v51 = *v40;
      v52 = v40[1];
      v53 = *(unsigned __int16 *)((char *)v40 + v16);
      v54 = *(unsigned __int16 *)((char *)v40 + v16 + 2);
      if (v51 >= 0xF000)
        v51 = 61440;
      if (v51 <= 0x1000)
        v51 = 4096;
      if (v52 >= 0xF000)
        v52 = 61440;
      if (v52 <= 0x1000)
        v52 = 4096;
      if (v53 >= 0xF000)
        v53 = 61440;
      if (v53 <= 0x1000)
        v53 = 4096;
      if (v54 >= 0xF000)
        v54 = 61440;
      if (v54 <= 0x1000)
        v54 = 4096;
      v40 += 2;
      *v41 = (8
            * (((613566757 * (unint64_t)((-16773120 - v53 + (v53 << 12)) >> 13)) >> 32)
             + ((613566757 * (unint64_t)((-16773120 - v51 + (v51 << 12)) >> 13)) >> 32))
            + 8) & 0xFFF0;
      v41[1] = (8
              * (((613566757 * (unint64_t)((-16773120 - v54 + (v54 << 12)) >> 13)) >> 32)
               + ((613566757 * (unint64_t)((-16773120 - v52 + (v52 << 12)) >> 13)) >> 32))
              + 8) & 0xFFF0;
      v41 += 2;
      v55 = __CFADD__(v50++, 1);
    }
    while (!v55);
    goto LABEL_72;
  }
LABEL_73:
  if (v27 != v37)
  {
    v56 = 0;
    v57 = v27 - v37;
    do
    {
      v58 = v17;
      v59 = v24;
      if ((v9 & 1) != 0)
      {
        v60 = *v17;
        if (v60 >= 0xF000)
          v60 = 61440;
        if (v60 <= 0x1000)
          v61 = 4096;
        else
          v61 = v60;
        if (v17[1] >= 0xF000u)
          v62 = 61440;
        else
          v62 = v17[1];
        if (v62 <= 0x1000)
          v63 = 4096;
        else
          v63 = v62;
        if (*(unsigned __int16 *)((char *)v17 + v16) >= 0xF000u)
          v64 = 61440;
        else
          v64 = *(unsigned __int16 *)((char *)v17 + v16);
        if (v64 <= 0x1000)
          v65 = 4096;
        else
          v65 = v64;
        if (*(unsigned __int16 *)((char *)v17 + v16 + 2) >= 0xF000u)
          v66 = 61440;
        else
          v66 = *(unsigned __int16 *)((char *)v17 + v16 + 2);
        if (v66 <= 0x1000)
          v67 = 4096;
        else
          v67 = v66;
        v58 = v17 + 2;
        *v24 = (8
              * (((613566757 * (unint64_t)((-16773120 - v65 + (v65 << 12)) >> 13)) >> 32)
               + ((613566757 * (unint64_t)((-16773120 - v61 + (v61 << 12)) >> 13)) >> 32))
              + 8) & 0xFFF0;
        v24[1] = (8
                * (((613566757 * (unint64_t)((-16773120 - v67 + (v67 << 12)) >> 13)) >> 32)
                 + ((613566757 * (unint64_t)((-16773120 - v63 + (v63 << 12)) >> 13)) >> 32))
                + 8) & 0xFFF0;
        v59 = v24 + 2;
      }
      if (v39)
      {
        v68 = -(uint64_t)v39;
        do
        {
          v69 = *v58;
          v70 = v58[1];
          v71 = *(unsigned __int16 *)((char *)v58 + v16);
          v72 = *(unsigned __int16 *)((char *)v58 + v16 + 2);
          if (v69 >= 0xF000)
            v69 = 61440;
          if (v69 <= 0x1000)
            v69 = 4096;
          if (v70 >= 0xF000)
            v70 = 61440;
          if (v70 <= 0x1000)
            v70 = 4096;
          if (v71 >= 0xF000)
            v71 = 61440;
          if (v71 <= 0x1000)
            v71 = 4096;
          if (v72 >= 0xF000)
            v72 = 61440;
          if (v72 <= 0x1000)
            v72 = 4096;
          v58 += 2;
          *v59 = (8
                * (((613566757 * (unint64_t)((-16773120 - v71 + (v71 << 12)) >> 13)) >> 32)
                 + ((613566757 * (unint64_t)((-16773120 - v69 + (v69 << 12)) >> 13)) >> 32))
                + 8) & 0xFFF0;
          v59[1] = (8
                  * (((613566757 * (unint64_t)((-16773120 - v72 + (v72 << 12)) >> 13)) >> 32)
                   + ((613566757 * (unint64_t)((-16773120 - v70 + (v70 << 12)) >> 13)) >> 32))
                  + 8) & 0xFFF0;
          v59 += 2;
          v55 = __CFADD__(v68++, 1);
        }
        while (!v55);
      }
      v17 += v16;
      v24 = (_WORD *)((char *)v24 + v23);
      v56 += 2;
    }
    while (v56 < v57);
  }
  return 0;
}

uint64_t vt_CopyDec_sv22_tf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _WORD *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int16 *v40;
  _WORD *v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  int v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  BOOL v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unsigned __int16 *v53;
  _WORD *v54;
  unsigned int v55;
  int v56;
  unsigned int v57;
  int v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v15 = 2 * v10;
  v16 = a4[1];
  v17 = (unsigned __int16 *)(a3[1] + v16 * (v12 + v8) + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  v18 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v19 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v20 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v21 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v22 = 2 * v18;
  v23 = a8[1];
  v24 = (_WORD *)(a7[1] + ((unint64_t)(v23 * v20) >> 1) + ((2 * v18) & 0x7FFFFFFFFFFFFFFELL));
  v25 = v11 - v10;
  if (v25 >= v19 - v18)
    v26 = v19 - v18;
  else
    v26 = v25;
  v27 = v14 - v13;
  if (v14 - v13 >= v21 - v20)
    v27 = v21 - v20;
  if (v27)
  {
    v28 = 0;
    v29 = *a4;
    v30 = *a8;
    v31 = *a3 + v29 * v13;
    if (v13 >= v8)
      v32 = 0;
    else
      v32 = v29;
    v33 = v31 + v15 + v32;
    v34 = *a7 + v30 * v20 + v22;
    do
    {
      if (v26)
      {
        for (i = 0; i != v26; ++i)
        {
          v36 = *(unsigned __int16 *)(v33 + 2 * i);
          if (v36 >= 0xEB00)
            v36 = 60160;
          if (v36 <= 0x1000)
            v36 = 4096;
          *(_WORD *)(v34 + 2 * i) = 16 * ((-16773120 - v36 + (v36 << 12)) / 0xDB00);
        }
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12)
    v37 = v12;
  else
    v37 = 0;
  v38 = v26 - (v9 & 1);
  if (v26 >> 1 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v26 >> 1;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v42 = *v17;
      if (v42 >= 0xF000)
        v42 = 61440;
      if (v42 <= 0x1000)
        v43 = 4096;
      else
        v43 = v42;
      if (v17[1] >= 0xF000u)
        v44 = 61440;
      else
        v44 = v17[1];
      if (v44 <= 0x1000)
        v45 = 4096;
      else
        v45 = v44;
      v40 = v17 + 2;
      *v24 = 16 * ((613566757 * (unint64_t)((-16773120 - v43 + (v43 << 12)) >> 13)) >> 32);
      v24[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v45 + (v45 << 12)) >> 13)) >> 32);
      v41 = v24 + 2;
      if (!v39)
        goto LABEL_52;
    }
    else
    {
      v40 = v17;
      v41 = v24;
      if (!v39)
      {
LABEL_52:
        v17 += v16;
        v24 = (_WORD *)((char *)v24 + v23);
        goto LABEL_53;
      }
    }
    v46 = -(uint64_t)v39;
    do
    {
      v47 = *v40;
      v48 = v40[1];
      if (v47 >= 0xF000)
        v47 = 61440;
      if (v47 <= 0x1000)
        v47 = 4096;
      if (v48 >= 0xF000)
        v48 = 61440;
      if (v48 <= 0x1000)
        v48 = 4096;
      *v41 = 16 * ((613566757 * (unint64_t)((-16773120 - v47 + (v47 << 12)) >> 13)) >> 32);
      v41[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v48 + (v48 << 12)) >> 13)) >> 32);
      v40 += 2;
      v41 += 2;
      v49 = __CFADD__(v46++, 1);
    }
    while (!v49);
    goto LABEL_52;
  }
LABEL_53:
  if (v27 != v37)
  {
    v50 = 0;
    v51 = v27 - v37;
    v52 = 2 * v16;
    do
    {
      v53 = v17;
      v54 = v24;
      if ((v9 & 1) != 0)
      {
        v55 = *v17;
        if (v55 >= 0xF000)
          v55 = 61440;
        if (v55 <= 0x1000)
          v56 = 4096;
        else
          v56 = v55;
        if (v17[1] >= 0xF000u)
          v57 = 61440;
        else
          v57 = v17[1];
        if (v57 <= 0x1000)
          v58 = 4096;
        else
          v58 = v57;
        v53 = v17 + 2;
        *v24 = 16 * ((613566757 * (unint64_t)((-16773120 - v56 + (v56 << 12)) >> 13)) >> 32);
        v24[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v58 + (v58 << 12)) >> 13)) >> 32);
        v54 = v24 + 2;
      }
      if (v39)
      {
        v59 = -(uint64_t)v39;
        do
        {
          v60 = *v53;
          v61 = v53[1];
          if (v60 >= 0xF000)
            v60 = 61440;
          if (v60 <= 0x1000)
            v60 = 4096;
          if (v61 >= 0xF000)
            v61 = 61440;
          if (v61 <= 0x1000)
            v61 = 4096;
          *v54 = 16 * ((613566757 * (unint64_t)((-16773120 - v60 + (v60 << 12)) >> 13)) >> 32);
          v54[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v61 + (v61 << 12)) >> 13)) >> 32);
          v53 += 2;
          v54 += 2;
          v49 = __CFADD__(v59++, 1);
        }
        while (!v49);
      }
      v17 = (unsigned __int16 *)((char *)v17 + v52);
      v24 = (_WORD *)((char *)v24 + v23);
      v50 += 2;
    }
    while (v50 < v51);
  }
  return 0;
}

uint64_t vt_Copy_s2as_x4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  __int16 *v37;
  _WORD *v38;
  uint64_t v39;
  __int16 v40;
  __int16 v41;
  BOOL v42;
  uint64_t v43;
  __int16 v44;
  __int16 v45;
  __int16 v46;
  unint64_t v47;
  uint64_t v48;
  __int16 *v49;
  int16x4_t *v50;
  __int16 v51;
  uint64_t v52;
  __int16 *v53;
  int16x4_t v54;
  __int16 v55;
  __int16 v56;
  __int16 v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  __int16 v64;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[3];
  v11 = a2[2] + v9;
  v12 = a4[1];
  v13 = (__int16 *)(a3[1] + v12 * v8 + 2 * (v9 & 0xFFFFFFFE));
  v15 = a6[4];
  v14 = a6[5];
  v16 = a8[1];
  v17 = (_WORD *)(a7[1] + v16 * v14 + 4 * v15);
  v18 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v18 >= a6[2])
    v18 = a6[2];
  if (v10 >= a6[3])
    v10 = a6[3];
  if (v10)
  {
    v19 = 0;
    v20 = *a8;
    v21 = a8[2];
    v22 = a7[2] + v21 * v14;
    v23 = *a7 + *a8 * v14;
    v24 = *a4;
    v25 = 2 * (v9 & 0xFFFFFFFE);
    v26 = a4[2];
    v27 = v22 + 2 * v15;
    v28 = v23 + 2 * v15;
    v29 = a3[2] + v26 * v8 + v25;
    v30 = *a3 + v24 * v8 + v25;
    do
    {
      if (v18)
      {
        for (i = 0; i != v18; ++i)
        {
          *(_WORD *)(v27 + 2 * i) = *(_WORD *)(v29 + 2 * i);
          *(_WORD *)(v28 + 2 * i) = *(_WORD *)(v30 + 2 * i) & 0xFFC0;
        }
      }
      v30 += v24;
      v28 += v20;
      v29 += v26;
      v27 += v21;
      ++v19;
    }
    while (v19 != v10);
  }
  v32 = v8 & 1;
  if (v10 >= v32)
    v33 = v8 & 1;
  else
    v33 = 0;
  v34 = v9;
  v35 = v18 >> 1;
  v36 = v9 & 1;
  if (v18 >> 1 >= (v18 - v36) >> 1)
    v35 = (v18 - v36) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v34 & 1) != 0)
    {
      v37 = v13 + 2;
      v44 = v13[1] & 0xFFC0;
      *v17 = *v13 & 0xFFC0;
      v17[1] = v44;
      v38 = v17 + 2;
      if (v35)
      {
LABEL_19:
        v39 = -(uint64_t)v35;
        do
        {
          v40 = *v37;
          v41 = v37[1];
          v37 += 2;
          *v38 = v40 & 0xFFC0;
          v38[1] = v41 & 0xFFC0;
          v38 += 2;
          v42 = __CFADD__(v39++, 1);
        }
        while (!v42);
        v43 = 2 * v35;
        goto LABEL_25;
      }
    }
    else
    {
      v37 = v13;
      v38 = v17;
      if (v35)
        goto LABEL_19;
    }
    v43 = 0;
LABEL_25:
    if ((v43 | (unint64_t)v36) < v18)
    {
      v45 = *v37 & 0xFFC0;
      v46 = v37[1] & 0xFFC0;
      *v38 = v45;
      v38[1] = v46;
    }
    v13 = (__int16 *)((char *)v13 + v12);
    v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v10 == v33)
  {
    v47 = 0;
  }
  else
  {
    v48 = 0;
    v47 = v10 - v33;
    do
    {
      v49 = v13;
      v50 = (int16x4_t *)v17;
      if ((v34 & 1) != 0)
      {
        v49 = v13 + 2;
        v51 = v13[1] & 0xFFC0;
        *v17 = *v13 & 0xFFC0;
        v17[1] = v51;
        v50 = (int16x4_t *)(v17 + 2);
      }
      if (v35)
      {
        v52 = -(uint64_t)v35;
        do
        {
          v53 = v49 + 2;
          v54.i32[0] = *v49 & 0xFFC0;
          v54.i32[1] = v49[1] & 0xFFC0;
          *v50++ = vuzp1_s16(v54, v54);
          v49 += 2;
          v42 = __CFADD__(v52++, 1);
        }
        while (!v42);
      }
      else
      {
        v53 = v49;
      }
      if ((v36 | (2 * v35)) < v18)
      {
        v55 = *v53 & 0xFFC0;
        v56 = v53[1] & 0xFFC0;
        v50->i16[0] = v55;
        v50->i16[1] = v56;
      }
      v13 = (__int16 *)((char *)v13 + v12);
      v17 = (_WORD *)((char *)v17 + v16);
      ++v48;
    }
    while (v48 != v47);
  }
  if (v47 + v32 < v10)
  {
    if ((v34 & 1) != 0)
    {
      v57 = *v13;
      v58 = v13[1];
      v13 += 2;
      *v17 = v57 & 0xFFC0;
      v17[1] = v58 & 0xFFC0;
      v17 += 2;
    }
    if (v35)
    {
      v59 = -(uint64_t)v35;
      do
      {
        v60 = *v13;
        v61 = v13[1];
        v13 += 2;
        *v17 = v60 & 0xFFC0;
        v17[1] = v61 & 0xFFC0;
        v17 += 2;
        v42 = __CFADD__(v59++, 1);
      }
      while (!v42);
      v62 = 2 * v35;
    }
    else
    {
      v62 = 0;
    }
    if ((v62 | (unint64_t)v36) < v18)
    {
      v63 = *v13 & 0xFFC0;
      v64 = v13[1] & 0xFFC0;
      *v17 = v63;
      v17[1] = v64;
    }
  }
  return 0;
}

uint64_t vt_Copy_sv22_x444(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _WORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  __int16 *v32;
  _WORD *v33;
  uint64_t v34;
  __int16 v35;
  __int16 v36;
  BOOL v37;
  uint64_t v38;
  __int16 v39;
  __int16 v40;
  __int16 v41;
  unint64_t v42;
  uint64_t v43;
  __int16 *v44;
  int16x4_t *v45;
  __int16 v46;
  uint64_t v47;
  __int16 *v48;
  int16x4_t v49;
  __int16 v50;
  __int16 v51;
  __int16 v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  __int16 v59;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[3];
  v11 = a2[2] + v9;
  v12 = a4[1];
  v13 = (__int16 *)(a3[1] + v12 * v8 + 2 * (v9 & 0xFFFFFFFE));
  v14 = a6[4];
  v15 = a6[5];
  v17 = a6[2];
  v16 = a6[3];
  v18 = a8[1];
  v19 = (_WORD *)(a7[1] + v18 * v15 + 4 * v14);
  v20 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v20 >= v17)
    v20 = v17;
  if (v10 >= v16)
    v10 = v16;
  if (v10)
  {
    v21 = 0;
    v22 = *a4;
    v23 = *a8;
    v24 = *a7 + *a8 * v15 + 2 * v14;
    v25 = *a3 + *a4 * v8 + 2 * (v9 & 0xFFFFFFFE);
    do
    {
      if (v20)
      {
        for (i = 0; i != v20; ++i)
          *(_WORD *)(v24 + 2 * i) = *(_WORD *)(v25 + 2 * i) & 0xFFC0;
      }
      v25 += v22;
      v24 += v23;
      ++v21;
    }
    while (v21 != v10);
  }
  v27 = v8 & 1;
  if (v10 >= v27)
    v28 = v8 & 1;
  else
    v28 = 0;
  v29 = v9;
  v30 = v20 >> 1;
  v31 = v9 & 1;
  if (v20 >> 1 >= (v20 - v31) >> 1)
    v30 = (v20 - v31) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v29 & 1) != 0)
    {
      v32 = v13 + 2;
      v39 = v13[1] & 0xFFC0;
      *v19 = *v13 & 0xFFC0;
      v19[1] = v39;
      v33 = v19 + 2;
      if (v30)
      {
LABEL_19:
        v34 = -(uint64_t)v30;
        do
        {
          v35 = *v32;
          v36 = v32[1];
          v32 += 2;
          *v33 = v35 & 0xFFC0;
          v33[1] = v36 & 0xFFC0;
          v33 += 2;
          v37 = __CFADD__(v34++, 1);
        }
        while (!v37);
        v38 = 2 * v30;
        goto LABEL_25;
      }
    }
    else
    {
      v32 = v13;
      v33 = v19;
      if (v30)
        goto LABEL_19;
    }
    v38 = 0;
LABEL_25:
    if ((v38 | (unint64_t)v31) < v20)
    {
      v40 = *v32 & 0xFFC0;
      v41 = v32[1] & 0xFFC0;
      *v33 = v40;
      v33[1] = v41;
    }
    v13 = (__int16 *)((char *)v13 + v12);
    v19 = (_WORD *)((char *)v19 + v18);
  }
  if (v10 == v28)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v10 - v28;
    do
    {
      v44 = v13;
      v45 = (int16x4_t *)v19;
      if ((v29 & 1) != 0)
      {
        v44 = v13 + 2;
        v46 = v13[1] & 0xFFC0;
        *v19 = *v13 & 0xFFC0;
        v19[1] = v46;
        v45 = (int16x4_t *)(v19 + 2);
      }
      if (v30)
      {
        v47 = -(uint64_t)v30;
        do
        {
          v48 = v44 + 2;
          v49.i32[0] = *v44 & 0xFFC0;
          v49.i32[1] = v44[1] & 0xFFC0;
          *v45++ = vuzp1_s16(v49, v49);
          v44 += 2;
          v37 = __CFADD__(v47++, 1);
        }
        while (!v37);
      }
      else
      {
        v48 = v44;
      }
      if ((v31 | (2 * v30)) < v20)
      {
        v50 = *v48 & 0xFFC0;
        v51 = v48[1] & 0xFFC0;
        v45->i16[0] = v50;
        v45->i16[1] = v51;
      }
      v13 = (__int16 *)((char *)v13 + v12);
      v19 = (_WORD *)((char *)v19 + v18);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v27 < v10)
  {
    if ((v29 & 1) != 0)
    {
      v52 = *v13;
      v53 = v13[1];
      v13 += 2;
      *v19 = v52 & 0xFFC0;
      v19[1] = v53 & 0xFFC0;
      v19 += 2;
    }
    if (v30)
    {
      v54 = -(uint64_t)v30;
      do
      {
        v55 = *v13;
        v56 = v13[1];
        v13 += 2;
        *v19 = v55 & 0xFFC0;
        v19[1] = v56 & 0xFFC0;
        v19 += 2;
        v37 = __CFADD__(v54++, 1);
      }
      while (!v37);
      v57 = 2 * v30;
    }
    else
    {
      v57 = 0;
    }
    if ((v57 | (unint64_t)v31) < v20)
    {
      v58 = *v13 & 0xFFC0;
      v59 = v13[1] & 0xFFC0;
      *v19 = v58;
      v19[1] = v59;
    }
  }
  return 0;
}

uint64_t vt_Copy_sv22_xf44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _WORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  unsigned __int16 *v34;
  _WORD *v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  BOOL v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  unint64_t v46;
  uint64_t v47;
  int32x2_t v48;
  uint32x2_t v49;
  unsigned __int16 *v50;
  int16x4_t *v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  uint64_t v55;
  unsigned __int16 *v56;
  uint32x2_t v57;
  int16x4_t v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[3];
  v11 = a2[2] + v9;
  v12 = a4[1];
  v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 2 * (v9 & 0xFFFFFFFE));
  v14 = a6[4];
  v15 = a6[5];
  v17 = a6[2];
  v16 = a6[3];
  v18 = a8[1];
  v19 = (_WORD *)(a7[1] + v18 * v15 + 4 * v14);
  v20 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v20 >= v17)
    v20 = v17;
  if (v10 >= v16)
    v21 = v16;
  else
    v21 = v10;
  if (v21)
  {
    v22 = 0;
    v23 = *a4;
    v24 = *a8;
    v25 = *a7 + *a8 * v15 + 2 * v14;
    v26 = *a3 + *a4 * v8 + 2 * (v9 & 0xFFFFFFFE);
    do
    {
      if (v20)
      {
        for (i = 0; i != v20; ++i)
        {
          v28 = *(unsigned __int16 *)(v26 + 2 * i);
          if (v28 >= 0xEB00)
            v28 = 60160;
          if (v28 <= 0x1000)
            v28 = 4096;
          *(_WORD *)(v25 + 2 * i) = (unsigned __int16)((-4190208 - v28 + (v28 << 10)) / 0xDB00) << 6;
        }
      }
      v26 += v23;
      v25 += v24;
      ++v22;
    }
    while (v22 != v21);
  }
  v29 = v8 & 1;
  if (v21 >= v29)
    v30 = v8 & 1;
  else
    v30 = 0;
  v31 = v9;
  v32 = v20 >> 1;
  v33 = v9 & 1;
  if (v20 >> 1 >= (v20 - v33) >> 1)
    v32 = (v20 - v33) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v31 & 1) != 0)
    {
      v41 = *v13;
      v42 = v13[1];
      if (v41 >= 0xF000)
        v41 = 61440;
      if (v41 <= 0x1000)
        v41 = 4096;
      if (v42 >= 0xF000)
        v42 = 61440;
      if (v42 <= 0x1000)
        v43 = 4096;
      else
        v43 = v42;
      v34 = v13 + 2;
      *v19 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v41 + (v41 << 10)) >> 13)) >> 32) << 6;
      v19[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v43 + (v43 << 10)) >> 13)) >> 32) << 6;
      v35 = v19 + 2;
      if (v32)
        goto LABEL_24;
    }
    else
    {
      v34 = v13;
      v35 = v19;
      if (v32)
      {
LABEL_24:
        v36 = -(uint64_t)v32;
        do
        {
          v37 = *v34;
          v38 = v34[1];
          if (v37 >= 0xF000)
            v37 = 61440;
          if (v37 <= 0x1000)
            v37 = 4096;
          if (v38 >= 0xF000)
            v38 = 61440;
          if (v38 <= 0x1000)
            v38 = 4096;
          v34 += 2;
          *v35 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v37 + (v37 << 10)) >> 13)) >> 32) << 6;
          v35[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v38 + (v38 << 10)) >> 13)) >> 32) << 6;
          v35 += 2;
          v39 = __CFADD__(v36++, 1);
        }
        while (!v39);
        v40 = 2 * v32;
        goto LABEL_47;
      }
    }
    v40 = 0;
LABEL_47:
    if ((v40 | (unint64_t)v33) < v20)
    {
      v44 = *v34;
      v45 = v34[1];
      if (v44 >= 0xF000)
        v44 = 61440;
      if (v44 <= 0x1000)
        v44 = 4096;
      if (v45 >= 0xF000)
        v45 = 61440;
      if (v45 <= 0x1000)
        v45 = 4096;
      *v35 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v44 + (v44 << 10)) >> 13)) >> 32) << 6;
      v35[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v45 + (v45 << 10)) >> 13)) >> 32) << 6;
    }
    v13 = (unsigned __int16 *)((char *)v13 + v12);
    v19 = (_WORD *)((char *)v19 + v18);
  }
  if (v21 == v30)
  {
    v46 = 0;
  }
  else
  {
    v47 = 0;
    v46 = v21 - v30;
    v48 = vdup_n_s32(0xFFC01000);
    v49 = (uint32x2_t)vdup_n_s32(0x24924925u);
    do
    {
      v50 = v13;
      v51 = (int16x4_t *)v19;
      if ((v31 & 1) != 0)
      {
        v52 = *v13;
        v53 = v13[1];
        if (v52 >= 0xF000)
          v52 = 61440;
        if (v52 <= 0x1000)
          v52 = 4096;
        if (v53 >= 0xF000)
          v53 = 61440;
        if (v53 <= 0x1000)
          v54 = 4096;
        else
          v54 = v53;
        v50 = v13 + 2;
        *v19 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v52 + (v52 << 10)) >> 13)) >> 32) << 6;
        v19[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v54 + (v54 << 10)) >> 13)) >> 32) << 6;
        v51 = (int16x4_t *)(v19 + 2);
      }
      if (v32)
      {
        v55 = -(uint64_t)v32;
        do
        {
          v56 = v50 + 2;
          v57.i32[0] = *v50;
          v57.i32[1] = v50[1];
          v58 = (int16x4_t)vshl_n_s32(vshrn_n_s64((int64x2_t)vmull_u32(vshr_n_u32((uint32x2_t)vmla_s32(v48, (int32x2_t)vmax_u32(vmin_u32(v57, (uint32x2_t)0xF0000000F000), (uint32x2_t)0x100000001000), (int32x2_t)0x300000003), 0xDuLL), v49), 0x20uLL), 6uLL);
          *v51++ = vuzp1_s16(v58, v58);
          v50 += 2;
          v39 = __CFADD__(v55++, 1);
        }
        while (!v39);
      }
      else
      {
        v56 = v50;
      }
      if ((v33 | (2 * v32)) < v20)
      {
        v59 = *v56;
        v60 = v56[1];
        if (v59 >= 0xF000)
          v59 = 61440;
        if (v59 <= 0x1000)
          v59 = 4096;
        if (v60 >= 0xF000)
          v60 = 61440;
        if (v60 <= 0x1000)
          v60 = 4096;
        v51->i16[0] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v59 + (v59 << 10)) >> 13)) >> 32) << 6;
        v51->i16[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v60 + (v60 << 10)) >> 13)) >> 32) << 6;
      }
      v13 = (unsigned __int16 *)((char *)v13 + v12);
      v19 = (_WORD *)((char *)v19 + v18);
      ++v47;
    }
    while (v47 != v46);
  }
  if (v46 + v29 < v21)
  {
    if ((v31 & 1) != 0)
    {
      v61 = *v13;
      v62 = v13[1];
      if (v61 >= 0xF000)
        v61 = 61440;
      if (v61 <= 0x1000)
        v61 = 4096;
      if (v62 >= 0xF000)
        v62 = 61440;
      if (v62 <= 0x1000)
        v62 = 4096;
      v13 += 2;
      *v19 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v61 + (v61 << 10)) >> 13)) >> 32) << 6;
      v19[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v62 + (v62 << 10)) >> 13)) >> 32) << 6;
      v19 += 2;
    }
    if (v32)
    {
      v63 = -(uint64_t)v32;
      do
      {
        v64 = *v13;
        v65 = v13[1];
        if (v64 >= 0xF000)
          v64 = 61440;
        if (v64 <= 0x1000)
          v64 = 4096;
        if (v65 >= 0xF000)
          v65 = 61440;
        if (v65 <= 0x1000)
          v65 = 4096;
        v13 += 2;
        *v19 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v64 + (v64 << 10)) >> 13)) >> 32) << 6;
        v19[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v65 + (v65 << 10)) >> 13)) >> 32) << 6;
        v19 += 2;
        v39 = __CFADD__(v63++, 1);
      }
      while (!v39);
      v32 *= 2;
    }
    if ((v32 | v33) < v20)
    {
      v66 = *v13;
      v67 = v13[1];
      if (v66 >= 0xF000)
        v66 = 61440;
      if (v66 <= 0x1000)
        v66 = 4096;
      if (v67 >= 0xF000)
        v67 = 61440;
      if (v67 <= 0x1000)
        v67 = 4096;
      *v19 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v66 + (v66 << 10)) >> 13)) >> 32) << 6;
      v19[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v67 + (v67 << 10)) >> 13)) >> 32) << 6;
    }
  }
  return 0;
}

uint64_t vt_Copy_s2as_x2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _WORD *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  unint64_t v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  _WORD *v39;
  _WORD *v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  BOOL v44;
  unint64_t v45;
  uint64_t v46;
  _WORD *v47;
  _WORD *v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  __int16 v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = 2 * (v10 + v9);
  v13 = a4[1];
  v14 = (_WORD *)(a3[1] + v13 * v11 + (v12 & 0xFFFFFFFFFFFFFFFCLL));
  v15 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v16 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v17 = *(_QWORD *)(a6 + 40);
  v18 = 2 * v15;
  v19 = a8[1];
  v20 = (_WORD *)(a7[1] + v19 * v17 + ((2 * v15) & 0x7FFFFFFFFFFFFFFELL));
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9) >= v16 - v15)
    v21 = v16 - v15;
  else
    v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v22 = 0;
    v23 = *a8;
    v24 = a8[2];
    v25 = a7[2] + v24 * v17;
    v26 = *a7 + *a8 * v17;
    v27 = *a4;
    v28 = a4[2];
    v29 = v25 + v18;
    v30 = v26 + v18;
    v31 = a3[2] + v28 * v11 + v12;
    v32 = *a3 + v27 * v11 + v12;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
        {
          *(_WORD *)(v29 + 2 * i) = *(_WORD *)(v31 + 2 * i);
          *(_WORD *)(v30 + 2 * i) = *(_WORD *)(v32 + 2 * i) & 0xFFC0;
        }
      }
      v32 += v27;
      v30 += v23;
      v31 += v28;
      v29 += v24;
      ++v22;
    }
    while (v22 != v8);
  }
  v34 = v11 & 1;
  if (v8 >= v34)
    v35 = v11 & 1;
  else
    v35 = 0;
  v36 = v9;
  v37 = v21 >> 1;
  v38 = (v21 - v10) >> 1;
  if (v37 >= v38)
    v37 = v38;
  if ((v11 & 1) != 0)
  {
    if ((v36 & 1) != 0)
    {
      v39 = v14 + 2;
      v41 = v14[1] & 0xFFC0;
      *v20 = *v14 & 0xFFC0;
      v20[1] = v41;
      v40 = v20 + 2;
      if (!v37)
      {
LABEL_25:
        v14 = (_WORD *)((char *)v14 + v13);
        v20 = (_WORD *)((char *)v20 + v19);
        goto LABEL_26;
      }
    }
    else
    {
      v39 = v14;
      v40 = v20;
      if (!v37)
        goto LABEL_25;
    }
    v42 = -(uint64_t)v37;
    do
    {
      v43 = v39[1] & 0xFFC0;
      *v40 = *v39 & 0xFFC0;
      v40[1] = v43;
      v39 += 2;
      v40 += 2;
      v44 = __CFADD__(v42++, 1);
    }
    while (!v44);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v35)
  {
    v45 = 0;
  }
  else
  {
    v46 = 0;
    v45 = v8 - v35;
    do
    {
      v47 = v14;
      v48 = v20;
      if ((v36 & 1) != 0)
      {
        v47 = v14 + 2;
        v49 = v14[1] & 0xFFC0;
        *v20 = *v14 & 0xFFC0;
        v20[1] = v49;
        v48 = v20 + 2;
      }
      if (v37)
      {
        v50 = -(uint64_t)v37;
        do
        {
          v51 = v47[1] & 0xFFC0;
          *v48 = *v47 & 0xFFC0;
          v48[1] = v51;
          v47 += 2;
          v48 += 2;
          v44 = __CFADD__(v50++, 1);
        }
        while (!v44);
      }
      v14 = (_WORD *)((char *)v14 + v13);
      v20 = (_WORD *)((char *)v20 + v19);
      ++v46;
    }
    while (v46 != v45);
  }
  if (v45 + v34 < v8)
  {
    if ((v36 & 1) != 0)
    {
      v52 = *v14;
      v53 = v14[1];
      v14 += 2;
      *v20 = v52 & 0xFFC0;
      v20[1] = v53 & 0xFFC0;
      v20 += 2;
    }
    if (v37)
    {
      v54 = -(uint64_t)v37;
      do
      {
        v55 = v14[1] & 0xFFC0;
        *v20 = *v14 & 0xFFC0;
        v20[1] = v55;
        v14 += 2;
        v20 += 2;
        v44 = __CFADD__(v54++, 1);
      }
      while (!v44);
    }
  }
  return 0;
}

uint64_t vt_Copy_sv22_x422(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  _WORD *v34;
  _WORD *v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  BOOL v39;
  unint64_t v40;
  uint64_t v41;
  _WORD *v42;
  _WORD *v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  __int16 v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (_WORD *)(a3[1] + v13 * v12 + ((2 * (v10 + v9)) & 0xFFFFFFFFFFFFFFFCLL));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  if (v11 - (v10 + v9) >= (unint64_t)(v17 - v16))
    v22 = v17 - v16;
  else
    v22 = v11 - (v10 + v9);
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = *a7 + *a8 * v18 + v19;
    v27 = *a3 + v24 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
          *(_WORD *)(v26 + 2 * i) = *(_WORD *)(v27 + 2 * i) & 0xFFC0;
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v8);
  }
  v29 = v12 & 1;
  if (v8 >= v29)
    v30 = v12 & 1;
  else
    v30 = 0;
  v31 = v9;
  v32 = v22 >> 1;
  v33 = (v22 - v10) >> 1;
  if (v32 >= v33)
    v32 = v33;
  if ((v12 & 1) != 0)
  {
    if ((v31 & 1) != 0)
    {
      v34 = v14 + 2;
      v36 = v14[1] & 0xFFC0;
      *v21 = *v14 & 0xFFC0;
      v21[1] = v36;
      v35 = v21 + 2;
      if (!v32)
      {
LABEL_25:
        v14 = (_WORD *)((char *)v14 + v13);
        v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_26;
      }
    }
    else
    {
      v34 = v14;
      v35 = v21;
      if (!v32)
        goto LABEL_25;
    }
    v37 = -(uint64_t)v32;
    do
    {
      v38 = v34[1] & 0xFFC0;
      *v35 = *v34 & 0xFFC0;
      v35[1] = v38;
      v34 += 2;
      v35 += 2;
      v39 = __CFADD__(v37++, 1);
    }
    while (!v39);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v30)
  {
    v40 = 0;
  }
  else
  {
    v41 = 0;
    v40 = v8 - v30;
    do
    {
      v42 = v14;
      v43 = v21;
      if ((v31 & 1) != 0)
      {
        v42 = v14 + 2;
        v44 = v14[1] & 0xFFC0;
        *v21 = *v14 & 0xFFC0;
        v21[1] = v44;
        v43 = v21 + 2;
      }
      if (v32)
      {
        v45 = -(uint64_t)v32;
        do
        {
          v46 = v42[1] & 0xFFC0;
          *v43 = *v42 & 0xFFC0;
          v43[1] = v46;
          v42 += 2;
          v43 += 2;
          v39 = __CFADD__(v45++, 1);
        }
        while (!v39);
      }
      v14 = (_WORD *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v29 < v8)
  {
    if ((v31 & 1) != 0)
    {
      v47 = *v14;
      v48 = v14[1];
      v14 += 2;
      *v21 = v47 & 0xFFC0;
      v21[1] = v48 & 0xFFC0;
      v21 += 2;
    }
    if (v32)
    {
      v49 = -(uint64_t)v32;
      do
      {
        v50 = v14[1] & 0xFFC0;
        *v21 = *v14 & 0xFFC0;
        v21[1] = v50;
        v14 += 2;
        v21 += 2;
        v39 = __CFADD__(v49++, 1);
      }
      while (!v39);
    }
  }
  return 0;
}

uint64_t vt_Copy_sv22_xf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unsigned __int16 *v34;
  _WORD *v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  BOOL v43;
  unint64_t v44;
  uint64_t v45;
  unsigned __int16 *v46;
  _WORD *v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  int v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + ((2 * (v10 + v9)) & 0xFFFFFFFFFFFFFFFCLL));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  if (v11 - (v10 + v9) >= (unint64_t)(v17 - v16))
    v22 = v17 - v16;
  else
    v22 = v11 - (v10 + v9);
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = *a7 + *a8 * v18 + v19;
    v27 = *a3 + v24 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          v29 = *(unsigned __int16 *)(v27 + 2 * i);
          if (v29 >= 0xEB00)
            v29 = 60160;
          if (v29 <= 0x1000)
            v29 = 4096;
          *(_WORD *)(v26 + 2 * i) = (unsigned __int16)((-4190208 - v29 + (v29 << 10)) / 0xDB00) << 6;
        }
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v8);
  }
  v30 = v12 & 1;
  if (v8 >= v30)
    v31 = v12 & 1;
  else
    v31 = 0;
  v32 = v9;
  v33 = v22 >> 1;
  if (v22 >> 1 >= (v22 - v10) >> 1)
    v33 = (v22 - v10) >> 1;
  if ((v12 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v36 = *v14;
      if (v36 >= 0xF000)
        v36 = 61440;
      if (v36 <= 0x1000)
        v37 = 4096;
      else
        v37 = v36;
      if (v14[1] >= 0xF000u)
        v38 = 61440;
      else
        v38 = v14[1];
      if (v38 <= 0x1000)
        v39 = 4096;
      else
        v39 = v38;
      v34 = v14 + 2;
      *v21 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v37 + (v37 << 10)) >> 13)) >> 32) << 6;
      v21[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v39 + (v39 << 10)) >> 13)) >> 32) << 6;
      v35 = v21 + 2;
      if (!v33)
        goto LABEL_48;
    }
    else
    {
      v34 = v14;
      v35 = v21;
      if (!v33)
      {
LABEL_48:
        v14 = (unsigned __int16 *)((char *)v14 + v13);
        v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_49;
      }
    }
    v40 = -(uint64_t)v33;
    do
    {
      v41 = *v34;
      v42 = v34[1];
      if (v41 >= 0xF000)
        v41 = 61440;
      if (v41 <= 0x1000)
        v41 = 4096;
      if (v42 >= 0xF000)
        v42 = 61440;
      if (v42 <= 0x1000)
        v42 = 4096;
      *v35 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v41 + (v41 << 10)) >> 13)) >> 32) << 6;
      v35[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v42 + (v42 << 10)) >> 13)) >> 32) << 6;
      v34 += 2;
      v35 += 2;
      v43 = __CFADD__(v40++, 1);
    }
    while (!v43);
    goto LABEL_48;
  }
LABEL_49:
  if (v8 == v31)
  {
    v44 = 0;
  }
  else
  {
    v45 = 0;
    v44 = v8 - v31;
    do
    {
      v46 = v14;
      v47 = v21;
      if ((v32 & 1) != 0)
      {
        v48 = *v14;
        if (v48 >= 0xF000)
          v48 = 61440;
        if (v48 <= 0x1000)
          v49 = 4096;
        else
          v49 = v48;
        if (v14[1] >= 0xF000u)
          v50 = 61440;
        else
          v50 = v14[1];
        if (v50 <= 0x1000)
          v51 = 4096;
        else
          v51 = v50;
        v46 = v14 + 2;
        *v21 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v49 + (v49 << 10)) >> 13)) >> 32) << 6;
        v21[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v51 + (v51 << 10)) >> 13)) >> 32) << 6;
        v47 = v21 + 2;
      }
      if (v33)
      {
        v52 = -(uint64_t)v33;
        do
        {
          v53 = *v46;
          v54 = v46[1];
          if (v53 >= 0xF000)
            v53 = 61440;
          if (v53 <= 0x1000)
            v53 = 4096;
          if (v54 >= 0xF000)
            v54 = 61440;
          if (v54 <= 0x1000)
            v54 = 4096;
          *v47 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v53 + (v53 << 10)) >> 13)) >> 32) << 6;
          v47[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v54 + (v54 << 10)) >> 13)) >> 32) << 6;
          v46 += 2;
          v47 += 2;
          v43 = __CFADD__(v52++, 1);
        }
        while (!v43);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v30 < v8)
  {
    if ((v32 & 1) != 0)
    {
      v55 = *v14;
      v56 = v14[1];
      if (v55 >= 0xF000)
        v55 = 61440;
      if (v55 <= 0x1000)
        v55 = 4096;
      if (v56 >= 0xF000)
        v56 = 61440;
      if (v56 <= 0x1000)
        v56 = 4096;
      v14 += 2;
      *v21 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v55 + (v55 << 10)) >> 13)) >> 32) << 6;
      v21[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v56 + (v56 << 10)) >> 13)) >> 32) << 6;
      v21 += 2;
    }
    if (v33)
    {
      v57 = -(uint64_t)v33;
      do
      {
        v58 = *v14;
        v59 = v14[1];
        if (v58 >= 0xF000)
          v58 = 61440;
        if (v58 <= 0x1000)
          v58 = 4096;
        if (v59 >= 0xF000)
          v59 = 61440;
        if (v59 <= 0x1000)
          v59 = 4096;
        *v21 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v58 + (v58 << 10)) >> 13)) >> 32) << 6;
        v21[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v59 + (v59 << 10)) >> 13)) >> 32) << 6;
        v14 += 2;
        v21 += 2;
        v43 = __CFADD__(v57++, 1);
      }
      while (!v43);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sv22_x420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _WORD *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned __int16 *v39;
  _WORD *v40;
  int v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  BOOL v47;
  unint64_t v48;
  unint64_t v49;
  unsigned __int16 *v50;
  _WORD *v51;
  int v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = (v8 & 1) + v8;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v15 = 2 * v10;
  v16 = a4[1];
  v17 = (unsigned __int16 *)(a3[1] + v16 * (v12 + v9) + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  v18 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v19 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v20 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v21 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v22 = 2 * v18;
  v23 = a8[1];
  v24 = (_WORD *)(a7[1] + ((unint64_t)(v23 * v20) >> 1) + ((2 * v18) & 0x7FFFFFFFFFFFFFFELL));
  v25 = v11 - v10;
  v26 = v19 - v18;
  if (v25 < v19 - v18)
    v26 = v25;
  v27 = v14 - v13;
  if (v14 - v13 >= v21 - v20)
    v27 = v21 - v20;
  if (v27)
  {
    v28 = 0;
    v29 = *a4;
    v30 = *a8;
    v31 = *a3 + v29 * v13;
    if (v13 >= v9)
      v32 = 0;
    else
      v32 = v29;
    v33 = v31 + v15 + v32;
    v34 = *a7 + v30 * v20 + v22;
    do
    {
      if (v26)
      {
        for (i = 0; i != v26; ++i)
          *(_WORD *)(v34 + 2 * i) = *(_WORD *)(v33 + 2 * i) & 0xFFC0;
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12)
    v36 = v12;
  else
    v36 = 0;
  v37 = v26 - (v8 & 1);
  if (v26 >> 1 >= v37 >> 1)
    v38 = v37 >> 1;
  else
    v38 = v26 >> 1;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v39 = v17 + 2;
      v41 = (*(unsigned __int16 *)((char *)v17 + v16 + 2) >> 6) + (v17[1] >> 6);
      *v24 = (32 * ((*(unsigned __int16 *)((char *)v17 + v16) >> 6) + (*v17 >> 6)) + 32) & 0xFFC0;
      v24[1] = (32 * v41 + 32) & 0xFFC0;
      v40 = v24 + 2;
      if (!v38)
      {
LABEL_28:
        v17 += v16;
        v24 = (_WORD *)((char *)v24 + v23);
        goto LABEL_29;
      }
    }
    else
    {
      v39 = v17;
      v40 = v24;
      if (!v38)
        goto LABEL_28;
    }
    v42 = -(uint64_t)v38;
    do
    {
      v43 = *v39;
      v44 = v39[1];
      v45 = *(unsigned __int16 *)((char *)v39 + v16);
      v46 = *(unsigned __int16 *)((char *)v39 + v16 + 2);
      v39 += 2;
      *v40 = (32 * ((v45 >> 6) + (v43 >> 6)) + 32) & 0xFFC0;
      v40[1] = (32 * ((v46 >> 6) + (v44 >> 6)) + 32) & 0xFFC0;
      v40 += 2;
      v47 = __CFADD__(v42++, 1);
    }
    while (!v47);
    goto LABEL_28;
  }
LABEL_29:
  if (v27 != v36)
  {
    v48 = 0;
    v49 = v27 - v36;
    do
    {
      v50 = v17;
      v51 = v24;
      if ((v8 & 1) != 0)
      {
        v50 = v17 + 2;
        v52 = (*(unsigned __int16 *)((char *)v17 + v16 + 2) >> 6) + (v17[1] >> 6);
        *v24 = (32 * ((*(unsigned __int16 *)((char *)v17 + v16) >> 6) + (*v17 >> 6)) + 32) & 0xFFC0;
        v24[1] = (32 * v52 + 32) & 0xFFC0;
        v51 = v24 + 2;
      }
      if (v38)
      {
        v53 = -(uint64_t)v38;
        do
        {
          v54 = *v50;
          v55 = v50[1];
          v56 = *(unsigned __int16 *)((char *)v50 + v16);
          v57 = *(unsigned __int16 *)((char *)v50 + v16 + 2);
          v50 += 2;
          *v51 = (32 * ((v56 >> 6) + (v54 >> 6)) + 32) & 0xFFC0;
          v51[1] = (32 * ((v57 >> 6) + (v55 >> 6)) + 32) & 0xFFC0;
          v51 += 2;
          v47 = __CFADD__(v53++, 1);
        }
        while (!v47);
      }
      v17 += v16;
      v24 = (_WORD *)((char *)v24 + v23);
      v48 += 2;
    }
    while (v48 < v49);
  }
  return 0;
}

uint64_t vt_CopyDec_sv22_x420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _WORD *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _WORD *v39;
  _WORD *v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  BOOL v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _WORD *v48;
  _WORD *v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = (v8 & 1) + v8;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v12 = v9 & 1;
  v13 = v12 + v9;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v15 = 2 * v10;
  v16 = a4[1];
  v17 = (_WORD *)(a3[1] + v16 * (v12 + v9) + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  v18 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v19 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v20 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v21 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v22 = 2 * v18;
  v23 = a8[1];
  v24 = (_WORD *)(a7[1] + ((unint64_t)(v23 * v20) >> 1) + ((2 * v18) & 0x7FFFFFFFFFFFFFFELL));
  v25 = v11 - v10;
  v26 = v19 - v18;
  if (v25 < v19 - v18)
    v26 = v25;
  v27 = v14 - v13;
  if (v14 - v13 >= v21 - v20)
    v27 = v21 - v20;
  if (v27)
  {
    v28 = 0;
    v29 = *a4;
    v30 = *a8;
    v31 = *a3 + v29 * v13;
    if (v13 >= v9)
      v32 = 0;
    else
      v32 = v29;
    v33 = v31 + v15 + v32;
    v34 = *a7 + v30 * v20 + v22;
    do
    {
      if (v26)
      {
        for (i = 0; i != v26; ++i)
          *(_WORD *)(v34 + 2 * i) = *(_WORD *)(v33 + 2 * i) & 0xFFC0;
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12)
    v36 = v12;
  else
    v36 = 0;
  v37 = v26 - (v8 & 1);
  if (v26 >> 1 >= v37 >> 1)
    v38 = v37 >> 1;
  else
    v38 = v26 >> 1;
  if (v12)
  {
    if ((v8 & 1) != 0)
    {
      v39 = v17 + 2;
      v41 = v17[1] & 0xFFC0;
      *v24 = *v17 & 0xFFC0;
      v24[1] = v41;
      v40 = v24 + 2;
      if (!v38)
      {
LABEL_28:
        v17 += v16;
        v24 = (_WORD *)((char *)v24 + v23);
        goto LABEL_29;
      }
    }
    else
    {
      v39 = v17;
      v40 = v24;
      if (!v38)
        goto LABEL_28;
    }
    v42 = -(uint64_t)v38;
    do
    {
      v43 = v39[1] & 0xFFC0;
      *v40 = *v39 & 0xFFC0;
      v40[1] = v43;
      v39 += 2;
      v40 += 2;
      v44 = __CFADD__(v42++, 1);
    }
    while (!v44);
    goto LABEL_28;
  }
LABEL_29:
  if (v27 != v36)
  {
    v45 = 0;
    v46 = v27 - v36;
    v47 = 2 * v16;
    do
    {
      v48 = v17;
      v49 = v24;
      if ((v8 & 1) != 0)
      {
        v48 = v17 + 2;
        v50 = v17[1] & 0xFFC0;
        *v24 = *v17 & 0xFFC0;
        v24[1] = v50;
        v49 = v24 + 2;
      }
      if (v38)
      {
        v51 = -(uint64_t)v38;
        do
        {
          v52 = v48[1] & 0xFFC0;
          *v49 = *v48 & 0xFFC0;
          v49[1] = v52;
          v48 += 2;
          v49 += 2;
          v44 = __CFADD__(v51++, 1);
        }
        while (!v44);
      }
      v17 = (_WORD *)((char *)v17 + v47);
      v24 = (_WORD *)((char *)v24 + v23);
      v45 += 2;
    }
    while (v45 < v46);
  }
  return 0;
}

uint64_t vt_CopyAvg_sv22_xf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _WORD *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int16 *v40;
  _WORD *v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  BOOL v55;
  unint64_t v56;
  unint64_t v57;
  unsigned __int16 *v58;
  _WORD *v59;
  unsigned int v60;
  int v61;
  unsigned int v62;
  int v63;
  unsigned int v64;
  int v65;
  unsigned int v66;
  int v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v15 = 2 * v10;
  v16 = a4[1];
  v17 = (unsigned __int16 *)(a3[1] + v16 * (v12 + v8) + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  v18 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v19 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v20 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v21 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v22 = 2 * v18;
  v23 = a8[1];
  v24 = (_WORD *)(a7[1] + ((unint64_t)(v23 * v20) >> 1) + ((2 * v18) & 0x7FFFFFFFFFFFFFFELL));
  v25 = v11 - v10;
  if (v25 >= v19 - v18)
    v26 = v19 - v18;
  else
    v26 = v25;
  v27 = v14 - v13;
  if (v14 - v13 >= v21 - v20)
    v27 = v21 - v20;
  if (v27)
  {
    v28 = 0;
    v29 = *a4;
    v30 = *a8;
    v31 = *a3 + v29 * v13;
    if (v13 >= v8)
      v32 = 0;
    else
      v32 = v29;
    v33 = v31 + v15 + v32;
    v34 = *a7 + v30 * v20 + v22;
    do
    {
      if (v26)
      {
        for (i = 0; i != v26; ++i)
        {
          v36 = *(unsigned __int16 *)(v33 + 2 * i);
          if (v36 >= 0xEB00)
            v36 = 60160;
          if (v36 <= 0x1000)
            v36 = 4096;
          *(_WORD *)(v34 + 2 * i) = (unsigned __int16)((-4190208 - v36 + (v36 << 10)) / 0xDB00) << 6;
        }
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12)
    v37 = v12;
  else
    v37 = 0;
  v38 = v26 - (v9 & 1);
  if (v26 >> 1 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v26 >> 1;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v42 = *v17;
      if (v42 >= 0xF000)
        v42 = 61440;
      if (v42 <= 0x1000)
        v43 = 4096;
      else
        v43 = v42;
      if (v17[1] >= 0xF000u)
        v44 = 61440;
      else
        v44 = v17[1];
      if (v44 <= 0x1000)
        v45 = 4096;
      else
        v45 = v44;
      if (*(unsigned __int16 *)((char *)v17 + v16) >= 0xF000u)
        v46 = 61440;
      else
        v46 = *(unsigned __int16 *)((char *)v17 + v16);
      if (v46 <= 0x1000)
        v47 = 4096;
      else
        v47 = v46;
      if (*(unsigned __int16 *)((char *)v17 + v16 + 2) >= 0xF000u)
        v48 = 61440;
      else
        v48 = *(unsigned __int16 *)((char *)v17 + v16 + 2);
      if (v48 <= 0x1000)
        v49 = 4096;
      else
        v49 = v48;
      v40 = v17 + 2;
      *v24 = (32
            * (((613566757 * (unint64_t)((-4190208 - v47 + (v47 << 10)) >> 13)) >> 32)
             + ((613566757 * (unint64_t)((-4190208 - v43 + (v43 << 10)) >> 13)) >> 32))
            + 32) & 0xFFC0;
      v24[1] = (32
              * (((613566757 * (unint64_t)((-4190208 - v49 + (v49 << 10)) >> 13)) >> 32)
               + ((613566757 * (unint64_t)((-4190208 - v45 + (v45 << 10)) >> 13)) >> 32))
              + 32) & 0xFFC0;
      v41 = v24 + 2;
      if (!v39)
        goto LABEL_72;
    }
    else
    {
      v40 = v17;
      v41 = v24;
      if (!v39)
      {
LABEL_72:
        v17 += v16;
        v24 = (_WORD *)((char *)v24 + v23);
        goto LABEL_73;
      }
    }
    v50 = -(uint64_t)v39;
    do
    {
      v51 = *v40;
      v52 = v40[1];
      v53 = *(unsigned __int16 *)((char *)v40 + v16);
      v54 = *(unsigned __int16 *)((char *)v40 + v16 + 2);
      if (v51 >= 0xF000)
        v51 = 61440;
      if (v51 <= 0x1000)
        v51 = 4096;
      if (v52 >= 0xF000)
        v52 = 61440;
      if (v52 <= 0x1000)
        v52 = 4096;
      if (v53 >= 0xF000)
        v53 = 61440;
      if (v53 <= 0x1000)
        v53 = 4096;
      if (v54 >= 0xF000)
        v54 = 61440;
      if (v54 <= 0x1000)
        v54 = 4096;
      v40 += 2;
      *v41 = (32
            * (((613566757 * (unint64_t)((-4190208 - v53 + (v53 << 10)) >> 13)) >> 32)
             + ((613566757 * (unint64_t)((-4190208 - v51 + (v51 << 10)) >> 13)) >> 32))
            + 32) & 0xFFC0;
      v41[1] = (32
              * (((613566757 * (unint64_t)((-4190208 - v54 + (v54 << 10)) >> 13)) >> 32)
               + ((613566757 * (unint64_t)((-4190208 - v52 + (v52 << 10)) >> 13)) >> 32))
              + 32) & 0xFFC0;
      v41 += 2;
      v55 = __CFADD__(v50++, 1);
    }
    while (!v55);
    goto LABEL_72;
  }
LABEL_73:
  if (v27 != v37)
  {
    v56 = 0;
    v57 = v27 - v37;
    do
    {
      v58 = v17;
      v59 = v24;
      if ((v9 & 1) != 0)
      {
        v60 = *v17;
        if (v60 >= 0xF000)
          v60 = 61440;
        if (v60 <= 0x1000)
          v61 = 4096;
        else
          v61 = v60;
        if (v17[1] >= 0xF000u)
          v62 = 61440;
        else
          v62 = v17[1];
        if (v62 <= 0x1000)
          v63 = 4096;
        else
          v63 = v62;
        if (*(unsigned __int16 *)((char *)v17 + v16) >= 0xF000u)
          v64 = 61440;
        else
          v64 = *(unsigned __int16 *)((char *)v17 + v16);
        if (v64 <= 0x1000)
          v65 = 4096;
        else
          v65 = v64;
        if (*(unsigned __int16 *)((char *)v17 + v16 + 2) >= 0xF000u)
          v66 = 61440;
        else
          v66 = *(unsigned __int16 *)((char *)v17 + v16 + 2);
        if (v66 <= 0x1000)
          v67 = 4096;
        else
          v67 = v66;
        v58 = v17 + 2;
        *v24 = (32
              * (((613566757 * (unint64_t)((-4190208 - v65 + (v65 << 10)) >> 13)) >> 32)
               + ((613566757 * (unint64_t)((-4190208 - v61 + (v61 << 10)) >> 13)) >> 32))
              + 32) & 0xFFC0;
        v24[1] = (32
                * (((613566757 * (unint64_t)((-4190208 - v67 + (v67 << 10)) >> 13)) >> 32)
                 + ((613566757 * (unint64_t)((-4190208 - v63 + (v63 << 10)) >> 13)) >> 32))
                + 32) & 0xFFC0;
        v59 = v24 + 2;
      }
      if (v39)
      {
        v68 = -(uint64_t)v39;
        do
        {
          v69 = *v58;
          v70 = v58[1];
          v71 = *(unsigned __int16 *)((char *)v58 + v16);
          v72 = *(unsigned __int16 *)((char *)v58 + v16 + 2);
          if (v69 >= 0xF000)
            v69 = 61440;
          if (v69 <= 0x1000)
            v69 = 4096;
          if (v70 >= 0xF000)
            v70 = 61440;
          if (v70 <= 0x1000)
            v70 = 4096;
          if (v71 >= 0xF000)
            v71 = 61440;
          if (v71 <= 0x1000)
            v71 = 4096;
          if (v72 >= 0xF000)
            v72 = 61440;
          if (v72 <= 0x1000)
            v72 = 4096;
          v58 += 2;
          *v59 = (32
                * (((613566757 * (unint64_t)((-4190208 - v71 + (v71 << 10)) >> 13)) >> 32)
                 + ((613566757 * (unint64_t)((-4190208 - v69 + (v69 << 10)) >> 13)) >> 32))
                + 32) & 0xFFC0;
          v59[1] = (32
                  * (((613566757 * (unint64_t)((-4190208 - v72 + (v72 << 10)) >> 13)) >> 32)
                   + ((613566757 * (unint64_t)((-4190208 - v70 + (v70 << 10)) >> 13)) >> 32))
                  + 32) & 0xFFC0;
          v59 += 2;
          v55 = __CFADD__(v68++, 1);
        }
        while (!v55);
      }
      v17 += v16;
      v24 = (_WORD *)((char *)v24 + v23);
      v56 += 2;
    }
    while (v56 < v57);
  }
  return 0;
}

uint64_t vt_CopyDec_sv22_xf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _WORD *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int16 *v40;
  _WORD *v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  int v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  BOOL v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unsigned __int16 *v53;
  _WORD *v54;
  unsigned int v55;
  int v56;
  unsigned int v57;
  int v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v15 = 2 * v10;
  v16 = a4[1];
  v17 = (unsigned __int16 *)(a3[1] + v16 * (v12 + v8) + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  v18 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v19 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v20 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v21 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v22 = 2 * v18;
  v23 = a8[1];
  v24 = (_WORD *)(a7[1] + ((unint64_t)(v23 * v20) >> 1) + ((2 * v18) & 0x7FFFFFFFFFFFFFFELL));
  v25 = v11 - v10;
  if (v25 >= v19 - v18)
    v26 = v19 - v18;
  else
    v26 = v25;
  v27 = v14 - v13;
  if (v14 - v13 >= v21 - v20)
    v27 = v21 - v20;
  if (v27)
  {
    v28 = 0;
    v29 = *a4;
    v30 = *a8;
    v31 = *a3 + v29 * v13;
    if (v13 >= v8)
      v32 = 0;
    else
      v32 = v29;
    v33 = v31 + v15 + v32;
    v34 = *a7 + v30 * v20 + v22;
    do
    {
      if (v26)
      {
        for (i = 0; i != v26; ++i)
        {
          v36 = *(unsigned __int16 *)(v33 + 2 * i);
          if (v36 >= 0xEB00)
            v36 = 60160;
          if (v36 <= 0x1000)
            v36 = 4096;
          *(_WORD *)(v34 + 2 * i) = (unsigned __int16)((-4190208 - v36 + (v36 << 10)) / 0xDB00) << 6;
        }
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12)
    v37 = v12;
  else
    v37 = 0;
  v38 = v26 - (v9 & 1);
  if (v26 >> 1 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v26 >> 1;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v42 = *v17;
      if (v42 >= 0xF000)
        v42 = 61440;
      if (v42 <= 0x1000)
        v43 = 4096;
      else
        v43 = v42;
      if (v17[1] >= 0xF000u)
        v44 = 61440;
      else
        v44 = v17[1];
      if (v44 <= 0x1000)
        v45 = 4096;
      else
        v45 = v44;
      v40 = v17 + 2;
      *v24 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v43 + (v43 << 10)) >> 13)) >> 32) << 6;
      v24[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v45 + (v45 << 10)) >> 13)) >> 32) << 6;
      v41 = v24 + 2;
      if (!v39)
        goto LABEL_52;
    }
    else
    {
      v40 = v17;
      v41 = v24;
      if (!v39)
      {
LABEL_52:
        v17 += v16;
        v24 = (_WORD *)((char *)v24 + v23);
        goto LABEL_53;
      }
    }
    v46 = -(uint64_t)v39;
    do
    {
      v47 = *v40;
      v48 = v40[1];
      if (v47 >= 0xF000)
        v47 = 61440;
      if (v47 <= 0x1000)
        v47 = 4096;
      if (v48 >= 0xF000)
        v48 = 61440;
      if (v48 <= 0x1000)
        v48 = 4096;
      *v41 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v47 + (v47 << 10)) >> 13)) >> 32) << 6;
      v41[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v48 + (v48 << 10)) >> 13)) >> 32) << 6;
      v40 += 2;
      v41 += 2;
      v49 = __CFADD__(v46++, 1);
    }
    while (!v49);
    goto LABEL_52;
  }
LABEL_53:
  if (v27 != v37)
  {
    v50 = 0;
    v51 = v27 - v37;
    v52 = 2 * v16;
    do
    {
      v53 = v17;
      v54 = v24;
      if ((v9 & 1) != 0)
      {
        v55 = *v17;
        if (v55 >= 0xF000)
          v55 = 61440;
        if (v55 <= 0x1000)
          v56 = 4096;
        else
          v56 = v55;
        if (v17[1] >= 0xF000u)
          v57 = 61440;
        else
          v57 = v17[1];
        if (v57 <= 0x1000)
          v58 = 4096;
        else
          v58 = v57;
        v53 = v17 + 2;
        *v24 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v56 + (v56 << 10)) >> 13)) >> 32) << 6;
        v24[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v58 + (v58 << 10)) >> 13)) >> 32) << 6;
        v54 = v24 + 2;
      }
      if (v39)
      {
        v59 = -(uint64_t)v39;
        do
        {
          v60 = *v53;
          v61 = v53[1];
          if (v60 >= 0xF000)
            v60 = 61440;
          if (v60 <= 0x1000)
            v60 = 4096;
          if (v61 >= 0xF000)
            v61 = 61440;
          if (v61 <= 0x1000)
            v61 = 4096;
          *v54 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v60 + (v60 << 10)) >> 13)) >> 32) << 6;
          v54[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v61 + (v61 << 10)) >> 13)) >> 32) << 6;
          v53 += 2;
          v54 += 2;
          v49 = __CFADD__(v59++, 1);
        }
        while (!v49);
      }
      v17 = (unsigned __int16 *)((char *)v17 + v52);
      v24 = (_WORD *)((char *)v24 + v23);
      v50 += 2;
    }
    while (v50 < v51);
  }
  return 0;
}

uint64_t vt_Copy_s2as_v4a8(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  char v41;
  char v42;
  BOOL v43;
  uint64_t v44;
  char v45;
  char v46;
  char v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  char v52;
  uint64_t v53;
  char v54;
  char v55;
  char v56;
  char v57;
  char v58;
  char v59;
  uint64_t v60;
  char v61;
  char v62;
  uint64_t v63;
  char v64;
  char v65;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[3];
  v11 = a4[1];
  v12 = a3[1] + v11 * v8 + 2 * (v9 & 0xFFFFFFFE);
  v14 = a6[4];
  v13 = a6[5];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a8[1];
  v18 = (_BYTE *)(a7[1] + v17 * v13 + 2 * v14);
  v19 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v19 >= v16)
    v19 = v16;
  if (v10 >= v15)
    v10 = v15;
  if (v10)
  {
    v20 = 0;
    v21 = *a8;
    v22 = a8[2];
    v23 = a7[2] + v22 * v13;
    v24 = *a7 + *a8 * v13;
    v25 = *a4;
    v26 = 2 * (a2[4] & 0xFFFFFFFELL);
    v27 = a4[2];
    v28 = v23 + v14;
    v29 = v24 + v14;
    v30 = a3[2] + v27 * v8 + v26;
    v31 = *a3 + v25 * v8 + v26;
    do
    {
      if (v19)
      {
        for (i = 0; i != v19; ++i)
        {
          *(_BYTE *)(v28 + i) = *(_WORD *)(v30 + 2 * i);
          *(_BYTE *)(v29 + i) = *(_BYTE *)(v31 + 2 * i + 1);
        }
      }
      v31 += v25;
      v29 += v21;
      v30 += v27;
      v28 += v22;
      ++v20;
    }
    while (v20 != v10);
    v9 = a2[4];
    v8 = a2[5];
  }
  v33 = v8 & 1;
  if (v10 >= v33)
    v34 = v8 & 1;
  else
    v34 = 0;
  v35 = v9;
  v36 = v19 >> 1;
  v37 = v9 & 1;
  if (v19 >> 1 >= (v19 - v37) >> 1)
    v36 = (v19 - v37) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v35 & 1) != 0)
    {
      v45 = *(_BYTE *)(v12 + 3);
      v38 = v12 + 4;
      *v18 = *(_BYTE *)(v12 + 1);
      v18[1] = v45;
      v39 = v18 + 2;
      if (v36)
      {
LABEL_20:
        v40 = -(uint64_t)v36;
        do
        {
          v41 = *(_BYTE *)(v38 + 1);
          v42 = *(_BYTE *)(v38 + 3);
          v38 += 4;
          *v39 = v41;
          v39[1] = v42;
          v39 += 2;
          v43 = __CFADD__(v40++, 1);
        }
        while (!v43);
        v44 = 2 * v36;
        goto LABEL_26;
      }
    }
    else
    {
      v38 = v12;
      v39 = v18;
      if (v36)
        goto LABEL_20;
    }
    v44 = 0;
LABEL_26:
    if ((v44 | (unint64_t)v37) < v19)
    {
      v46 = *(_BYTE *)(v38 + 1);
      v47 = *(_BYTE *)(v38 + 3);
      *v39 = v46;
      v39[1] = v47;
    }
    v12 += v11;
    v18 += v17;
  }
  if (v10 == v34)
  {
    v48 = 0;
  }
  else
  {
    v49 = 0;
    v48 = v10 - v34;
    do
    {
      v50 = v12;
      v51 = v18;
      if ((v35 & 1) != 0)
      {
        v52 = *(_BYTE *)(v12 + 3);
        v50 = v12 + 4;
        *v18 = *(_BYTE *)(v12 + 1);
        v18[1] = v52;
        v51 = v18 + 2;
      }
      if (v36)
      {
        v53 = -(uint64_t)v36;
        do
        {
          v54 = *(_BYTE *)(v50 + 1);
          v55 = *(_BYTE *)(v50 + 3);
          v50 += 4;
          *v51 = v54;
          v51[1] = v55;
          v51[2] = v54;
          v51[3] = v55;
          v51 += 4;
          v43 = __CFADD__(v53++, 1);
        }
        while (!v43);
      }
      if ((v37 | (2 * v36)) < v19)
      {
        v56 = *(_BYTE *)(v50 + 1);
        v57 = *(_BYTE *)(v50 + 3);
        *v51 = v56;
        v51[1] = v57;
      }
      v12 += v11;
      v18 += v17;
      ++v49;
    }
    while (v49 != v48);
  }
  if (v48 + v33 < v10)
  {
    if ((v35 & 1) != 0)
    {
      v58 = *(_BYTE *)(v12 + 1);
      v59 = *(_BYTE *)(v12 + 3);
      v12 += 4;
      *v18 = v58;
      v18[1] = v59;
      v18 += 2;
    }
    if (v36)
    {
      v60 = -(uint64_t)v36;
      do
      {
        v61 = *(_BYTE *)(v12 + 1);
        v62 = *(_BYTE *)(v12 + 3);
        v12 += 4;
        *v18 = v61;
        v18[1] = v62;
        v18 += 2;
        v43 = __CFADD__(v60++, 1);
      }
      while (!v43);
      v63 = 2 * v36;
    }
    else
    {
      v63 = 0;
    }
    if ((v63 | (unint64_t)v37) < v19)
    {
      v64 = *(_BYTE *)(v12 + 1);
      v65 = *(_BYTE *)(v12 + 3);
      *v18 = v64;
      v18[1] = v65;
    }
  }
  return 0;
}

uint64_t vt_Copy_sv22_444v(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  char v34;
  char v35;
  BOOL v36;
  uint64_t v37;
  char v38;
  char v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  char v45;
  uint64_t v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  uint64_t v53;
  char v54;
  char v55;
  uint64_t v56;
  char v57;
  char v58;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[3];
  v11 = a4[1];
  v12 = a3[1] + v11 * v8 + 2 * (v9 & 0xFFFFFFFE);
  v14 = a6[4];
  v13 = a6[5];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a8[1];
  v18 = (_BYTE *)(a7[1] + v17 * v13 + 2 * v14);
  v19 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v19 >= v16)
    v19 = v16;
  if (v10 >= v15)
    v10 = v15;
  if (v10)
  {
    v20 = 0;
    v21 = *a4;
    v22 = *a8;
    v23 = *a7 + *a8 * v13 + v14;
    v24 = *a3 + *a4 * v8 + 2 * (a2[4] & 0xFFFFFFFELL);
    do
    {
      if (v19)
      {
        for (i = 0; i != v19; ++i)
          *(_BYTE *)(v23 + i) = *(_BYTE *)(v24 + 2 * i + 1);
      }
      v24 += v21;
      v23 += v22;
      ++v20;
    }
    while (v20 != v10);
    v9 = a2[4];
    v8 = a2[5];
  }
  v26 = v8 & 1;
  if (v10 >= v26)
    v27 = v8 & 1;
  else
    v27 = 0;
  v28 = v9;
  v29 = v19 >> 1;
  v30 = v9 & 1;
  if (v19 >> 1 >= (v19 - v30) >> 1)
    v29 = (v19 - v30) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v28 & 1) != 0)
    {
      v38 = *(_BYTE *)(v12 + 3);
      v31 = v12 + 4;
      *v18 = *(_BYTE *)(v12 + 1);
      v18[1] = v38;
      v32 = v18 + 2;
      if (v29)
      {
LABEL_20:
        v33 = -(uint64_t)v29;
        do
        {
          v34 = *(_BYTE *)(v31 + 1);
          v35 = *(_BYTE *)(v31 + 3);
          v31 += 4;
          *v32 = v34;
          v32[1] = v35;
          v32 += 2;
          v36 = __CFADD__(v33++, 1);
        }
        while (!v36);
        v37 = 2 * v29;
        goto LABEL_26;
      }
    }
    else
    {
      v31 = v12;
      v32 = v18;
      if (v29)
        goto LABEL_20;
    }
    v37 = 0;
LABEL_26:
    if ((v37 | (unint64_t)v30) < v19)
    {
      v39 = *(_BYTE *)(v31 + 1);
      v40 = *(_BYTE *)(v31 + 3);
      *v32 = v39;
      v32[1] = v40;
    }
    v12 += v11;
    v18 += v17;
  }
  if (v10 == v27)
  {
    v41 = 0;
  }
  else
  {
    v42 = 0;
    v41 = v10 - v27;
    do
    {
      v43 = v12;
      v44 = v18;
      if ((v28 & 1) != 0)
      {
        v45 = *(_BYTE *)(v12 + 3);
        v43 = v12 + 4;
        *v18 = *(_BYTE *)(v12 + 1);
        v18[1] = v45;
        v44 = v18 + 2;
      }
      if (v29)
      {
        v46 = -(uint64_t)v29;
        do
        {
          v47 = *(_BYTE *)(v43 + 1);
          v48 = *(_BYTE *)(v43 + 3);
          v43 += 4;
          *v44 = v47;
          v44[1] = v48;
          v44[2] = v47;
          v44[3] = v48;
          v44 += 4;
          v36 = __CFADD__(v46++, 1);
        }
        while (!v36);
      }
      if ((v30 | (2 * v29)) < v19)
      {
        v49 = *(_BYTE *)(v43 + 1);
        v50 = *(_BYTE *)(v43 + 3);
        *v44 = v49;
        v44[1] = v50;
      }
      v12 += v11;
      v18 += v17;
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v26 < v10)
  {
    if ((v28 & 1) != 0)
    {
      v51 = *(_BYTE *)(v12 + 1);
      v52 = *(_BYTE *)(v12 + 3);
      v12 += 4;
      *v18 = v51;
      v18[1] = v52;
      v18 += 2;
    }
    if (v29)
    {
      v53 = -(uint64_t)v29;
      do
      {
        v54 = *(_BYTE *)(v12 + 1);
        v55 = *(_BYTE *)(v12 + 3);
        v12 += 4;
        *v18 = v54;
        v18[1] = v55;
        v18 += 2;
        v36 = __CFADD__(v53++, 1);
      }
      while (!v36);
      v56 = 2 * v29;
    }
    else
    {
      v56 = 0;
    }
    if ((v56 | (unint64_t)v30) < v19)
    {
      v57 = *(_BYTE *)(v12 + 1);
      v58 = *(_BYTE *)(v12 + 3);
      *v18 = v57;
      v18[1] = v58;
    }
  }
  return 0;
}

uint64_t vt_Copy_sv22_444f(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  unsigned __int16 *v32;
  _BYTE *v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  BOOL v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  unint64_t v44;
  uint64_t v45;
  unsigned __int16 *v46;
  _BYTE *v47;
  unsigned int v48;
  unsigned int v49;
  int v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  unint64_t v54;
  unint64_t v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a4[1];
  v11 = (unsigned __int16 *)(a3[1] + v10 * v8 + 2 * (v9 & 0xFFFFFFFE));
  v12 = a6[4];
  v13 = a6[5];
  v15 = a6[2];
  v14 = a6[3];
  v16 = a8[1];
  v17 = (_BYTE *)(a7[1] + v16 * v13 + 2 * v12);
  v18 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v18 >= v15)
    v18 = v15;
  if (a2[3] >= v14)
    v19 = v14;
  else
    v19 = a2[3];
  if (v19)
  {
    v20 = 0;
    v21 = *a4;
    v22 = *a8;
    v23 = *a7 + *a8 * v13 + v12;
    v24 = *a3 + *a4 * v8 + 2 * (a2[4] & 0xFFFFFFFELL);
    do
    {
      if (v18)
      {
        for (i = 0; i != v18; ++i)
        {
          v26 = *(unsigned __int16 *)(v24 + 2 * i);
          if (v26 >= 0xEB00)
            v26 = 60160;
          if (v26 <= 0x1000)
            v26 = 4096;
          *(_BYTE *)(v23 + i) = (-1044480 - v26 + (v26 << 8)) / 0xDB00;
        }
      }
      v24 += v21;
      v23 += v22;
      ++v20;
    }
    while (v20 != v19);
    v9 = a2[4];
    v8 = a2[5];
  }
  v27 = v8 & 1;
  if (v19 >= v27)
    v28 = v8 & 1;
  else
    v28 = 0;
  v29 = v9;
  v30 = v18 >> 1;
  v31 = v9 & 1;
  if (v18 >> 1 >= (v18 - v31) >> 1)
    v30 = (v18 - v31) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v29 & 1) != 0)
    {
      v39 = *v11;
      v40 = v11[1];
      if (v39 >= 0xF000)
        v39 = 61440;
      if (v39 <= 0x1000)
        v39 = 4096;
      if (v40 >= 0xF000)
        v40 = 61440;
      if (v40 <= 0x1000)
        v41 = 4096;
      else
        v41 = v40;
      v32 = v11 + 2;
      *v17 = (613566757 * (unint64_t)((-1044480 - v39 + (v39 << 8)) >> 13)) >> 32;
      v17[1] = (613566757 * (unint64_t)((-1044480 - v41 + (v41 << 8)) >> 13)) >> 32;
      v33 = v17 + 2;
      if (v30)
        goto LABEL_25;
    }
    else
    {
      v32 = v11;
      v33 = v17;
      if (v30)
      {
LABEL_25:
        v34 = -(uint64_t)v30;
        do
        {
          v35 = *v32;
          v36 = v32[1];
          if (v35 >= 0xF000)
            v35 = 61440;
          if (v35 <= 0x1000)
            v35 = 4096;
          if (v36 >= 0xF000)
            v36 = 61440;
          if (v36 <= 0x1000)
            v36 = 4096;
          v32 += 2;
          *v33 = (613566757 * (unint64_t)((-1044480 - v35 + (v35 << 8)) >> 13)) >> 32;
          v33[1] = (613566757 * (unint64_t)((-1044480 - v36 + (v36 << 8)) >> 13)) >> 32;
          v33 += 2;
          v37 = __CFADD__(v34++, 1);
        }
        while (!v37);
        v38 = 2 * v30;
        goto LABEL_48;
      }
    }
    v38 = 0;
LABEL_48:
    if ((v38 | (unint64_t)v31) < v18)
    {
      v42 = *v32;
      v43 = v32[1];
      if (v42 >= 0xF000)
        v42 = 61440;
      if (v42 <= 0x1000)
        v42 = 4096;
      if (v43 >= 0xF000)
        v43 = 61440;
      if (v43 <= 0x1000)
        v43 = 4096;
      *v33 = (613566757 * (unint64_t)((-1044480 - v42 + (v42 << 8)) >> 13)) >> 32;
      v33[1] = (613566757 * (unint64_t)((-1044480 - v43 + (v43 << 8)) >> 13)) >> 32;
    }
    v11 = (unsigned __int16 *)((char *)v11 + v10);
    v17 += v16;
  }
  if (v19 == v28)
  {
    v44 = 0;
  }
  else
  {
    v45 = 0;
    v44 = v19 - v28;
    do
    {
      v46 = v11;
      v47 = v17;
      if ((v29 & 1) != 0)
      {
        v48 = *v11;
        v49 = v11[1];
        if (v48 >= 0xF000)
          v48 = 61440;
        if (v48 <= 0x1000)
          v48 = 4096;
        if (v49 >= 0xF000)
          v49 = 61440;
        if (v49 <= 0x1000)
          v50 = 4096;
        else
          v50 = v49;
        v46 = v11 + 2;
        *v17 = (613566757 * (unint64_t)((-1044480 - v48 + (v48 << 8)) >> 13)) >> 32;
        v17[1] = (613566757 * (unint64_t)((-1044480 - v50 + (v50 << 8)) >> 13)) >> 32;
        v47 = v17 + 2;
      }
      if (v30)
      {
        v51 = -(uint64_t)v30;
        do
        {
          v52 = *v46;
          v53 = v46[1];
          if (v52 >= 0xF000)
            v52 = 61440;
          if (v52 <= 0x1000)
            v52 = 4096;
          if (v53 >= 0xF000)
            v53 = 61440;
          if (v53 <= 0x1000)
            v53 = 4096;
          v54 = (613566757 * (unint64_t)((-1044480 - v52 + (v52 << 8)) >> 13)) >> 32;
          v55 = (613566757 * (unint64_t)((-1044480 - v53 + (v53 << 8)) >> 13)) >> 32;
          *v47 = v54;
          v47[1] = v55;
          v46 += 2;
          v47[2] = v54;
          v47[3] = v55;
          v47 += 4;
          v37 = __CFADD__(v51++, 1);
        }
        while (!v37);
      }
      if ((v31 | (2 * v30)) < v18)
      {
        v56 = *v46;
        v57 = v46[1];
        if (v56 >= 0xF000)
          v56 = 61440;
        if (v56 <= 0x1000)
          v56 = 4096;
        if (v57 >= 0xF000)
          v57 = 61440;
        if (v57 <= 0x1000)
          v57 = 4096;
        *v47 = (613566757 * (unint64_t)((-1044480 - v56 + (v56 << 8)) >> 13)) >> 32;
        v47[1] = (613566757 * (unint64_t)((-1044480 - v57 + (v57 << 8)) >> 13)) >> 32;
      }
      v11 = (unsigned __int16 *)((char *)v11 + v10);
      v17 += v16;
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v27 < v19)
  {
    if ((v29 & 1) != 0)
    {
      v58 = *v11;
      v59 = v11[1];
      if (v58 >= 0xF000)
        v58 = 61440;
      if (v58 <= 0x1000)
        v58 = 4096;
      if (v59 >= 0xF000)
        v59 = 61440;
      if (v59 <= 0x1000)
        v59 = 4096;
      v11 += 2;
      *v17 = (613566757 * (unint64_t)((-1044480 - v58 + (v58 << 8)) >> 13)) >> 32;
      v17[1] = (613566757 * (unint64_t)((-1044480 - v59 + (v59 << 8)) >> 13)) >> 32;
      v17 += 2;
    }
    if (v30)
    {
      v60 = -(uint64_t)v30;
      do
      {
        v61 = *v11;
        v62 = v11[1];
        if (v61 >= 0xF000)
          v61 = 61440;
        if (v61 <= 0x1000)
          v61 = 4096;
        if (v62 >= 0xF000)
          v62 = 61440;
        if (v62 <= 0x1000)
          v62 = 4096;
        v11 += 2;
        *v17 = (613566757 * (unint64_t)((-1044480 - v61 + (v61 << 8)) >> 13)) >> 32;
        v17[1] = (613566757 * (unint64_t)((-1044480 - v62 + (v62 << 8)) >> 13)) >> 32;
        v17 += 2;
        v37 = __CFADD__(v60++, 1);
      }
      while (!v37);
      v30 *= 2;
    }
    if ((v30 | v31) < v18)
    {
      v63 = *v11;
      v64 = v11[1];
      if (v63 >= 0xF000)
        v63 = 61440;
      if (v63 <= 0x1000)
        v63 = 4096;
      if (v64 >= 0xF000)
        v64 = 61440;
      if (v64 <= 0x1000)
        v64 = 4096;
      *v17 = (613566757 * (unint64_t)((-1044480 - v63 + (v63 << 8)) >> 13)) >> 32;
      v17[1] = (613566757 * (unint64_t)((-1044480 - v64 + (v64 << 8)) >> 13)) >> 32;
    }
  }
  return 0;
}

uint64_t vt_Copy_s2as_v2a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _BYTE *v39;
  char v40;
  uint64_t v41;
  char v42;
  BOOL v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  _BYTE *v47;
  char v48;
  uint64_t v49;
  char v50;
  char v51;
  char v52;
  uint64_t v53;
  char v54;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = 2 * (v10 + v9);
  v13 = a4[1];
  v14 = a3[1] + v13 * v11 + (v12 & 0xFFFFFFFFFFFFFFFCLL);
  v15 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v16 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v17 = *(_QWORD *)(a6 + 40);
  v18 = a8[1];
  v19 = (_BYTE *)(a7[1] + v18 * v17 + (v15 & 0x7FFFFFFFFFFFFFFFLL));
  v20 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  if (v20 >= v16 - v15)
    v20 = v16 - v15;
  if (v8 >= *(_QWORD *)(a6 + 24))
    v8 = *(_QWORD *)(a6 + 24);
  if (v8)
  {
    v21 = 0;
    v22 = *a8;
    v23 = a8[2];
    v24 = a7[2] + v23 * v17;
    v25 = *a7 + *a8 * v17;
    v26 = *a4;
    v27 = a4[2];
    v28 = v24 + v15;
    v29 = v25 + v15;
    v30 = a3[2] + v27 * v11 + v12;
    v31 = *a3 + v26 * v11 + v12;
    do
    {
      if (v20)
      {
        for (i = 0; i != v20; ++i)
        {
          *(_BYTE *)(v28 + i) = *(_WORD *)(v30 + 2 * i);
          *(_BYTE *)(v29 + i) = *(_BYTE *)(v31 + 2 * i + 1);
        }
      }
      v31 += v26;
      v29 += v22;
      v30 += v27;
      v28 += v23;
      ++v21;
    }
    while (v21 != v8);
    v9 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40);
    v10 = v9 & 1;
  }
  v33 = v11 & 1;
  if (v8 >= v33)
    v34 = v11 & 1;
  else
    v34 = 0;
  v35 = v20 >> 1;
  v36 = v20 - v10;
  if (v35 >= v36 >> 1)
    v37 = v36 >> 1;
  else
    v37 = v35;
  if ((v11 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v40 = *(_BYTE *)(v14 + 3);
      v38 = v14 + 4;
      *v19 = *(_BYTE *)(v14 + 1);
      v19[1] = v40;
      v39 = v19 + 2;
      if (!v37)
      {
LABEL_26:
        v14 += v13;
        v19 += v18;
        goto LABEL_27;
      }
    }
    else
    {
      v38 = v14;
      v39 = v19;
      if (!v37)
        goto LABEL_26;
    }
    v41 = -(uint64_t)v37;
    do
    {
      v42 = *(_BYTE *)(v38 + 3);
      *v39 = *(_BYTE *)(v38 + 1);
      v39[1] = v42;
      v39 += 2;
      v38 += 4;
      v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_26;
  }
LABEL_27:
  if (v8 == v34)
  {
    v44 = 0;
  }
  else
  {
    v45 = 0;
    v44 = v8 - v34;
    do
    {
      v46 = v14;
      v47 = v19;
      if ((v9 & 1) != 0)
      {
        v48 = *(_BYTE *)(v14 + 3);
        v46 = v14 + 4;
        *v19 = *(_BYTE *)(v14 + 1);
        v19[1] = v48;
        v47 = v19 + 2;
      }
      if (v37)
      {
        v49 = -(uint64_t)v37;
        do
        {
          v50 = *(_BYTE *)(v46 + 3);
          *v47 = *(_BYTE *)(v46 + 1);
          v47[1] = v50;
          v47 += 2;
          v46 += 4;
          v43 = __CFADD__(v49++, 1);
        }
        while (!v43);
      }
      v14 += v13;
      v19 += v18;
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v33 < v8)
  {
    if ((v9 & 1) != 0)
    {
      v51 = *(_BYTE *)(v14 + 1);
      v52 = *(_BYTE *)(v14 + 3);
      v14 += 4;
      *v19 = v51;
      v19[1] = v52;
      v19 += 2;
    }
    if (v37)
    {
      v53 = -(uint64_t)v37;
      do
      {
        v54 = *(_BYTE *)(v14 + 3);
        *v19 = *(_BYTE *)(v14 + 1);
        v19[1] = v54;
        v19 += 2;
        v14 += 4;
        v43 = __CFADD__(v53++, 1);
      }
      while (!v43);
    }
  }
  return 0;
}

uint64_t vt_Copy_sv22_422v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _BYTE *v34;
  char v35;
  uint64_t v36;
  char v37;
  BOOL v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _BYTE *v42;
  char v43;
  uint64_t v44;
  char v45;
  char v46;
  char v47;
  uint64_t v48;
  char v49;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = 2 * (v10 + v9);
  v13 = a4[1];
  v14 = a3[1] + v13 * v11 + (v12 & 0xFFFFFFFFFFFFFFFCLL);
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = a8[1];
  v20 = (_BYTE *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  if (v21 >= v17 - v16)
    v21 = v17 - v16;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v22 = 0;
    v23 = *a4;
    v24 = *a8;
    v25 = *a7 + *a8 * v18 + v16;
    v26 = *a3 + *a4 * v11 + v12;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
          *(_BYTE *)(v25 + i) = *(_BYTE *)(v26 + 2 * i + 1);
      }
      v26 += v23;
      v25 += v24;
      ++v22;
    }
    while (v22 != v8);
    v9 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40);
    v10 = v9 & 1;
  }
  v28 = v11 & 1;
  if (v8 >= v28)
    v29 = v11 & 1;
  else
    v29 = 0;
  v30 = v21 >> 1;
  v31 = v21 - v10;
  if (v30 >= v31 >> 1)
    v32 = v31 >> 1;
  else
    v32 = v30;
  if ((v11 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v35 = *(_BYTE *)(v14 + 3);
      v33 = v14 + 4;
      *v20 = *(_BYTE *)(v14 + 1);
      v20[1] = v35;
      v34 = v20 + 2;
      if (!v32)
      {
LABEL_26:
        v14 += v13;
        v20 += v19;
        goto LABEL_27;
      }
    }
    else
    {
      v33 = v14;
      v34 = v20;
      if (!v32)
        goto LABEL_26;
    }
    v36 = -(uint64_t)v32;
    do
    {
      v37 = *(_BYTE *)(v33 + 3);
      *v34 = *(_BYTE *)(v33 + 1);
      v34[1] = v37;
      v34 += 2;
      v33 += 4;
      v38 = __CFADD__(v36++, 1);
    }
    while (!v38);
    goto LABEL_26;
  }
LABEL_27:
  if (v8 == v29)
  {
    v39 = 0;
  }
  else
  {
    v40 = 0;
    v39 = v8 - v29;
    do
    {
      v41 = v14;
      v42 = v20;
      if ((v9 & 1) != 0)
      {
        v43 = *(_BYTE *)(v14 + 3);
        v41 = v14 + 4;
        *v20 = *(_BYTE *)(v14 + 1);
        v20[1] = v43;
        v42 = v20 + 2;
      }
      if (v32)
      {
        v44 = -(uint64_t)v32;
        do
        {
          v45 = *(_BYTE *)(v41 + 3);
          *v42 = *(_BYTE *)(v41 + 1);
          v42[1] = v45;
          v42 += 2;
          v41 += 4;
          v38 = __CFADD__(v44++, 1);
        }
        while (!v38);
      }
      v14 += v13;
      v20 += v19;
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v28 < v8)
  {
    if ((v9 & 1) != 0)
    {
      v46 = *(_BYTE *)(v14 + 1);
      v47 = *(_BYTE *)(v14 + 3);
      v14 += 4;
      *v20 = v46;
      v20[1] = v47;
      v20 += 2;
    }
    if (v32)
    {
      v48 = -(uint64_t)v32;
      do
      {
        v49 = *(_BYTE *)(v14 + 3);
        *v20 = *(_BYTE *)(v14 + 1);
        v20[1] = v49;
        v20 += 2;
        v14 += 4;
        v38 = __CFADD__(v48++, 1);
      }
      while (!v38);
    }
  }
  return 0;
}

uint64_t vt_Copy_sv22_422f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unsigned __int16 *v34;
  _BYTE *v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  BOOL v43;
  unint64_t v44;
  uint64_t v45;
  unsigned __int16 *v46;
  _BYTE *v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  int v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = 2 * (v10 + v9);
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * v11 + (v12 & 0xFFFFFFFFFFFFFFFCLL));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = a8[1];
  v20 = (_BYTE *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  if (v21 >= v17 - v16)
    v21 = v17 - v16;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v22 = 0;
    v23 = *a4;
    v24 = *a8;
    v25 = *a7 + *a8 * v18 + v16;
    v26 = *a3 + v23 * v11 + v12;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
        {
          v28 = *(unsigned __int16 *)(v26 + 2 * i);
          if (v28 >= 0xEB00)
            v28 = 60160;
          if (v28 <= 0x1000)
            v28 = 4096;
          *(_BYTE *)(v25 + i) = (-1044480 - v28 + (v28 << 8)) / 0xDB00;
        }
      }
      v26 += v23;
      v25 += v24;
      ++v22;
    }
    while (v22 != v8);
    v9 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40);
    v10 = v9 & 1;
  }
  v29 = v11 & 1;
  if (v8 >= v29)
    v30 = v11 & 1;
  else
    v30 = 0;
  v31 = v21 >> 1;
  v32 = v21 - v10;
  if (v31 >= v32 >> 1)
    v33 = v32 >> 1;
  else
    v33 = v31;
  if ((v11 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v36 = *v14;
      if (v36 >= 0xF000)
        v36 = 61440;
      if (v36 <= 0x1000)
        v37 = 4096;
      else
        v37 = v36;
      if (v14[1] >= 0xF000u)
        v38 = 61440;
      else
        v38 = v14[1];
      if (v38 <= 0x1000)
        v39 = 4096;
      else
        v39 = v38;
      v34 = v14 + 2;
      *v20 = (613566757 * (unint64_t)((-1044480 - v37 + (v37 << 8)) >> 13)) >> 32;
      v20[1] = (613566757 * (unint64_t)((-1044480 - v39 + (v39 << 8)) >> 13)) >> 32;
      v35 = v20 + 2;
      if (!v33)
        goto LABEL_49;
    }
    else
    {
      v34 = v14;
      v35 = v20;
      if (!v33)
      {
LABEL_49:
        v14 = (unsigned __int16 *)((char *)v14 + v13);
        v20 += v19;
        goto LABEL_50;
      }
    }
    v40 = -(uint64_t)v33;
    do
    {
      v41 = *v34;
      v42 = v34[1];
      if (v41 >= 0xF000)
        v41 = 61440;
      if (v41 <= 0x1000)
        v41 = 4096;
      if (v42 >= 0xF000)
        v42 = 61440;
      if (v42 <= 0x1000)
        v42 = 4096;
      *v35 = (613566757 * (unint64_t)((-1044480 - v41 + (v41 << 8)) >> 13)) >> 32;
      v35[1] = (613566757 * (unint64_t)((-1044480 - v42 + (v42 << 8)) >> 13)) >> 32;
      v35 += 2;
      v34 += 2;
      v43 = __CFADD__(v40++, 1);
    }
    while (!v43);
    goto LABEL_49;
  }
LABEL_50:
  if (v8 == v30)
  {
    v44 = 0;
  }
  else
  {
    v45 = 0;
    v44 = v8 - v30;
    do
    {
      v46 = v14;
      v47 = v20;
      if ((v9 & 1) != 0)
      {
        v48 = *v14;
        if (v48 >= 0xF000)
          v48 = 61440;
        if (v48 <= 0x1000)
          v49 = 4096;
        else
          v49 = v48;
        if (v14[1] >= 0xF000u)
          v50 = 61440;
        else
          v50 = v14[1];
        if (v50 <= 0x1000)
          v51 = 4096;
        else
          v51 = v50;
        v46 = v14 + 2;
        *v20 = (613566757 * (unint64_t)((-1044480 - v49 + (v49 << 8)) >> 13)) >> 32;
        v20[1] = (613566757 * (unint64_t)((-1044480 - v51 + (v51 << 8)) >> 13)) >> 32;
        v47 = v20 + 2;
      }
      if (v33)
      {
        v52 = -(uint64_t)v33;
        do
        {
          v53 = *v46;
          v54 = v46[1];
          if (v53 >= 0xF000)
            v53 = 61440;
          if (v53 <= 0x1000)
            v53 = 4096;
          if (v54 >= 0xF000)
            v54 = 61440;
          if (v54 <= 0x1000)
            v54 = 4096;
          *v47 = (613566757 * (unint64_t)((-1044480 - v53 + (v53 << 8)) >> 13)) >> 32;
          v47[1] = (613566757 * (unint64_t)((-1044480 - v54 + (v54 << 8)) >> 13)) >> 32;
          v47 += 2;
          v46 += 2;
          v43 = __CFADD__(v52++, 1);
        }
        while (!v43);
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v29 < v8)
  {
    if ((v9 & 1) != 0)
    {
      v55 = *v14;
      v56 = v14[1];
      if (v55 >= 0xF000)
        v55 = 61440;
      if (v55 <= 0x1000)
        v55 = 4096;
      if (v56 >= 0xF000)
        v56 = 61440;
      if (v56 <= 0x1000)
        v56 = 4096;
      v14 += 2;
      *v20 = (613566757 * (unint64_t)((-1044480 - v55 + (v55 << 8)) >> 13)) >> 32;
      v20[1] = (613566757 * (unint64_t)((-1044480 - v56 + (v56 << 8)) >> 13)) >> 32;
      v20 += 2;
    }
    if (v33)
    {
      v57 = -(uint64_t)v33;
      do
      {
        v58 = *v14;
        v59 = v14[1];
        if (v58 >= 0xF000)
          v58 = 61440;
        if (v58 <= 0x1000)
          v58 = 4096;
        if (v59 >= 0xF000)
          v59 = 61440;
        if (v59 <= 0x1000)
          v59 = 4096;
        *v20 = (613566757 * (unint64_t)((-1044480 - v58 + (v58 << 8)) >> 13)) >> 32;
        v20[1] = (613566757 * (unint64_t)((-1044480 - v59 + (v59 << 8)) >> 13)) >> 32;
        v20 += 2;
        v14 += 2;
        v43 = __CFADD__(v57++, 1);
      }
      while (!v43);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_s2as_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _BYTE *v41;
  unsigned int v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  BOOL v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _BYTE *v52;
  unsigned int v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = v8 & 1;
  v12 = v11 + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = 2 * (v10 + v9);
  v15 = a4[1];
  v16 = a3[1] + v15 * (v11 + v8) + (v14 & 0xFFFFFFFFFFFFFFFCLL);
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  v23 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9) < v18 - v17)
    v23 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v24 = v13 - v12;
  if (v13 - v12 >= v20 - v19)
    v24 = v20 - v19;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    v28 = a8[2];
    if (v12 >= v8)
      v29 = 0;
    else
      v29 = *a4;
    v30 = *a3 + *a4 * v12 + v14 + v29;
    v31 = a4[2];
    v32 = a7[2] + v28 * v19 + v17;
    v33 = *a7 + v27 * v19 + v17;
    v34 = a3[2] + v31 * v12 + v14;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
        {
          *(_BYTE *)(v32 + i) = *(_WORD *)(v34 + 2 * i);
          *(_BYTE *)(v33 + i) = *(_BYTE *)(v30 + 2 * i + 1);
        }
      }
      v30 += v26;
      v33 += v27;
      v34 += v31;
      v32 += v28;
      ++v25;
    }
    while (v25 != v24);
    v9 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v9 & 1;
  }
  if (v24 >= v11)
    v36 = v11;
  else
    v36 = 0;
  v37 = v23 >> 1;
  v38 = v23 - v10;
  if (v37 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v37;
  if (v11)
  {
    if ((v9 & 1) != 0)
    {
      v40 = v16 + 4;
      v42 = (*(unsigned __int8 *)(v16 + 3) + *(unsigned __int8 *)(v16 + v15 + 3) + 1) >> 1;
      *v22 = (*(unsigned __int8 *)(v16 + 1) + *(unsigned __int8 *)(v16 + v15 + 1) + 1) >> 1;
      v22[1] = v42;
      v41 = v22 + 2;
      if (!v39)
      {
LABEL_29:
        v16 += 2 * v15;
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      v40 = v16;
      v41 = v22;
      if (!v39)
        goto LABEL_29;
    }
    v43 = -(uint64_t)v39;
    do
    {
      v44 = *(unsigned __int8 *)(v40 + 1);
      v45 = *(unsigned __int8 *)(v40 + 3);
      v46 = *(unsigned __int8 *)(v40 + v15 + 1);
      v47 = *(unsigned __int8 *)(v40 + v15 + 3);
      v40 += 4;
      *v41 = (v44 + v46 + 1) >> 1;
      v41[1] = (v45 + v47 + 1) >> 1;
      v41 += 2;
      v48 = __CFADD__(v43++, 1);
    }
    while (!v48);
    goto LABEL_29;
  }
LABEL_30:
  if (v24 != v36)
  {
    v49 = 0;
    v50 = v24 - v36;
    do
    {
      v51 = v16;
      v52 = v22;
      if ((v9 & 1) != 0)
      {
        v51 = v16 + 4;
        v53 = (*(unsigned __int8 *)(v16 + 3) + *(unsigned __int8 *)(v16 + v15 + 3) + 1) >> 1;
        *v22 = (*(unsigned __int8 *)(v16 + 1) + *(unsigned __int8 *)(v16 + v15 + 1) + 1) >> 1;
        v22[1] = v53;
        v52 = v22 + 2;
      }
      if (v39)
      {
        v54 = -(uint64_t)v39;
        do
        {
          v55 = *(unsigned __int8 *)(v51 + 1);
          v56 = *(unsigned __int8 *)(v51 + 3);
          v57 = *(unsigned __int8 *)(v51 + v15 + 1);
          v58 = *(unsigned __int8 *)(v51 + v15 + 3);
          v51 += 4;
          *v52 = (v55 + v57 + 1) >> 1;
          v52[1] = (v56 + v58 + 1) >> 1;
          v52 += 2;
          v48 = __CFADD__(v54++, 1);
        }
        while (!v48);
      }
      v16 += 2 * v15;
      v22 += v21;
      v49 += 2;
    }
    while (v49 < v50);
  }
  return 0;
}

uint64_t vt_CopyDec_s2as_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _BYTE *v41;
  char v42;
  uint64_t v43;
  char v44;
  BOOL v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _BYTE *v50;
  char v51;
  uint64_t v52;
  char v53;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = v8 & 1;
  v12 = v11 + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = 2 * (v10 + v9);
  v15 = a4[1];
  v16 = a3[1] + v15 * (v11 + v8) + (v14 & 0xFFFFFFFFFFFFFFFCLL);
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  v23 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9) < v18 - v17)
    v23 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v24 = v13 - v12;
  if (v13 - v12 >= v20 - v19)
    v24 = v20 - v19;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    v28 = a8[2];
    if (v12 >= v8)
      v29 = 0;
    else
      v29 = *a4;
    v30 = *a3 + *a4 * v12 + v14 + v29;
    v31 = a4[2];
    v32 = a7[2] + v28 * v19 + v17;
    v33 = *a7 + v27 * v19 + v17;
    v34 = a3[2] + v31 * v12 + v14;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
        {
          *(_BYTE *)(v32 + i) = *(_WORD *)(v34 + 2 * i);
          *(_BYTE *)(v33 + i) = *(_BYTE *)(v30 + 2 * i + 1);
        }
      }
      v30 += v26;
      v33 += v27;
      v34 += v31;
      v32 += v28;
      ++v25;
    }
    while (v25 != v24);
    v9 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v9 & 1;
  }
  if (v24 >= v11)
    v36 = v11;
  else
    v36 = 0;
  v37 = v23 >> 1;
  v38 = v23 - v10;
  if (v37 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v37;
  if (v11)
  {
    if ((v9 & 1) != 0)
    {
      v42 = *(_BYTE *)(v16 + 3);
      v40 = v16 + 4;
      *v22 = *(_BYTE *)(v16 + 1);
      v22[1] = v42;
      v41 = v22 + 2;
      if (!v39)
      {
LABEL_29:
        v16 += 2 * v15;
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      v40 = v16;
      v41 = v22;
      if (!v39)
        goto LABEL_29;
    }
    v43 = -(uint64_t)v39;
    do
    {
      v44 = *(_BYTE *)(v40 + 3);
      *v41 = *(_BYTE *)(v40 + 1);
      v41[1] = v44;
      v41 += 2;
      v40 += 4;
      v45 = __CFADD__(v43++, 1);
    }
    while (!v45);
    goto LABEL_29;
  }
LABEL_30:
  if (v24 != v36)
  {
    v46 = 0;
    v47 = v24 - v36;
    v48 = 2 * v15;
    do
    {
      v49 = v16;
      v50 = v22;
      if ((v9 & 1) != 0)
      {
        v51 = *(_BYTE *)(v16 + 3);
        v49 = v16 + 4;
        *v22 = *(_BYTE *)(v16 + 1);
        v22[1] = v51;
        v50 = v22 + 2;
      }
      if (v39)
      {
        v52 = -(uint64_t)v39;
        do
        {
          v53 = *(_BYTE *)(v49 + 3);
          *v50 = *(_BYTE *)(v49 + 1);
          v50[1] = v53;
          v50 += 2;
          v49 += 4;
          v45 = __CFADD__(v52++, 1);
        }
        while (!v45);
      }
      v16 += v48;
      v22 += v21;
      v46 += 2;
    }
    while (v46 < v47);
  }
  return 0;
}

uint64_t vt_CopyAvg_sv22_420v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _BYTE *v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  BOOL v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _BYTE *v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = v8 & 1;
  v12 = v11 + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = 2 * (v10 + v9);
  v15 = a4[1];
  v16 = a3[1] + v15 * (v11 + v8) + (v14 & 0xFFFFFFFFFFFFFFFCLL);
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  v23 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9) < v18 - v17)
    v23 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v24 = v13 - v12;
  if (v13 - v12 >= v20 - v19)
    v24 = v20 - v19;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    if (v12 >= v8)
      v28 = 0;
    else
      v28 = *a4;
    v29 = *a3 + *a4 * v12 + v14 + v28;
    v30 = *a7 + v27 * v19 + v17;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
          *(_BYTE *)(v30 + i) = *(_BYTE *)(v29 + 2 * i + 1);
      }
      v29 += v26;
      v30 += v27;
      ++v25;
    }
    while (v25 != v24);
    v9 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v9 & 1;
  }
  if (v24 >= v11)
    v32 = v11;
  else
    v32 = 0;
  v33 = v23 >> 1;
  v34 = v23 - v10;
  if (v33 >= v34 >> 1)
    v35 = v34 >> 1;
  else
    v35 = v33;
  if (v11)
  {
    if ((v9 & 1) != 0)
    {
      v36 = v16 + 4;
      v38 = (*(unsigned __int8 *)(v16 + 3) + *(unsigned __int8 *)(v16 + v15 + 3) + 1) >> 1;
      *v22 = (*(unsigned __int8 *)(v16 + 1) + *(unsigned __int8 *)(v16 + v15 + 1) + 1) >> 1;
      v22[1] = v38;
      v37 = v22 + 2;
      if (!v35)
      {
LABEL_29:
        v16 += 2 * v15;
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      v36 = v16;
      v37 = v22;
      if (!v35)
        goto LABEL_29;
    }
    v39 = -(uint64_t)v35;
    do
    {
      v40 = *(unsigned __int8 *)(v36 + 1);
      v41 = *(unsigned __int8 *)(v36 + 3);
      v42 = *(unsigned __int8 *)(v36 + v15 + 1);
      v43 = *(unsigned __int8 *)(v36 + v15 + 3);
      v36 += 4;
      *v37 = (v40 + v42 + 1) >> 1;
      v37[1] = (v41 + v43 + 1) >> 1;
      v37 += 2;
      v44 = __CFADD__(v39++, 1);
    }
    while (!v44);
    goto LABEL_29;
  }
LABEL_30:
  if (v24 != v32)
  {
    v45 = 0;
    v46 = v24 - v32;
    do
    {
      v47 = v16;
      v48 = v22;
      if ((v9 & 1) != 0)
      {
        v47 = v16 + 4;
        v49 = (*(unsigned __int8 *)(v16 + 3) + *(unsigned __int8 *)(v16 + v15 + 3) + 1) >> 1;
        *v22 = (*(unsigned __int8 *)(v16 + 1) + *(unsigned __int8 *)(v16 + v15 + 1) + 1) >> 1;
        v22[1] = v49;
        v48 = v22 + 2;
      }
      if (v35)
      {
        v50 = -(uint64_t)v35;
        do
        {
          v51 = *(unsigned __int8 *)(v47 + 1);
          v52 = *(unsigned __int8 *)(v47 + 3);
          v53 = *(unsigned __int8 *)(v47 + v15 + 1);
          v54 = *(unsigned __int8 *)(v47 + v15 + 3);
          v47 += 4;
          *v48 = (v51 + v53 + 1) >> 1;
          v48[1] = (v52 + v54 + 1) >> 1;
          v48 += 2;
          v44 = __CFADD__(v50++, 1);
        }
        while (!v44);
      }
      v16 += 2 * v15;
      v22 += v21;
      v45 += 2;
    }
    while (v45 < v46);
  }
  return 0;
}

uint64_t vt_CopyDec_sv22_420v(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _BYTE *v37;
  char v38;
  uint64_t v39;
  char v40;
  BOOL v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _BYTE *v46;
  char v47;
  uint64_t v48;
  char v49;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = v8 & 1;
  v12 = v11 + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = 2 * (v10 + v9);
  v15 = a4[1];
  v16 = a3[1] + v15 * (v11 + v8) + (v14 & 0xFFFFFFFFFFFFFFFCLL);
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  v23 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9) < v18 - v17)
    v23 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v24 = v13 - v12;
  if (v13 - v12 >= v20 - v19)
    v24 = v20 - v19;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a8;
    if (v12 >= v8)
      v28 = 0;
    else
      v28 = *a4;
    v29 = *a3 + *a4 * v12 + v14 + v28;
    v30 = *a7 + v27 * v19 + v17;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
          *(_BYTE *)(v30 + i) = *(_BYTE *)(v29 + 2 * i + 1);
      }
      v29 += v26;
      v30 += v27;
      ++v25;
    }
    while (v25 != v24);
    v9 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v9 & 1;
  }
  if (v24 >= v11)
    v32 = v11;
  else
    v32 = 0;
  v33 = v23 >> 1;
  v34 = v23 - v10;
  if (v33 >= v34 >> 1)
    v35 = v34 >> 1;
  else
    v35 = v33;
  if (v11)
  {
    if ((v9 & 1) != 0)
    {
      v38 = *(_BYTE *)(v16 + 3);
      v36 = v16 + 4;
      *v22 = *(_BYTE *)(v16 + 1);
      v22[1] = v38;
      v37 = v22 + 2;
      if (!v35)
      {
LABEL_29:
        v16 += 2 * v15;
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      v36 = v16;
      v37 = v22;
      if (!v35)
        goto LABEL_29;
    }
    v39 = -(uint64_t)v35;
    do
    {
      v40 = *(_BYTE *)(v36 + 3);
      *v37 = *(_BYTE *)(v36 + 1);
      v37[1] = v40;
      v37 += 2;
      v36 += 4;
      v41 = __CFADD__(v39++, 1);
    }
    while (!v41);
    goto LABEL_29;
  }
LABEL_30:
  if (v24 != v32)
  {
    v42 = 0;
    v43 = v24 - v32;
    v44 = 2 * v15;
    do
    {
      v45 = v16;
      v46 = v22;
      if ((v9 & 1) != 0)
      {
        v47 = *(_BYTE *)(v16 + 3);
        v45 = v16 + 4;
        *v22 = *(_BYTE *)(v16 + 1);
        v22[1] = v47;
        v46 = v22 + 2;
      }
      if (v35)
      {
        v48 = -(uint64_t)v35;
        do
        {
          v49 = *(_BYTE *)(v45 + 3);
          *v46 = *(_BYTE *)(v45 + 1);
          v46[1] = v49;
          v46 += 2;
          v45 += 4;
          v41 = __CFADD__(v48++, 1);
        }
        while (!v41);
      }
      v16 += v44;
      v22 += v21;
      v42 += 2;
    }
    while (v42 < v43);
  }
  return 0;
}

uint64_t vt_CopyAvg_sv22_420f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int16 *v40;
  _BYTE *v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unint64_t v55;
  unint64_t v56;
  unsigned __int16 *v57;
  _BYTE *v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  int v62;
  unsigned int v63;
  int v64;
  unsigned int v65;
  int v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v9 & 1;
  v12 = v11 + v9;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v14 = 2 * (v10 + v8);
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * (v11 + v9) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  v23 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  if (v23 >= v18 - v17)
    v23 = v18 - v17;
  v24 = v13 - v12;
  v25 = v20 - v19;
  if (v13 - v12 >= v25)
    v24 = v25;
  if (v24)
  {
    v26 = 0;
    v27 = v12 >= v9;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v12;
    if (v27)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v14 + v31;
    v33 = *a7 + v29 * v19 + v17;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
        {
          v35 = *(unsigned __int16 *)(v32 + 2 * i);
          if (v35 >= 0xEB00)
            v35 = 60160;
          if (v35 <= 0x1000)
            v35 = 4096;
          *(_BYTE *)(v33 + i) = (-1044480 - v35 + (v35 << 8)) / 0xDB00;
        }
      }
      v32 += v28;
      v33 += v29;
      ++v26;
    }
    while (v26 != v24);
    v8 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v24 >= v11)
    v36 = v11;
  else
    v36 = 0;
  v37 = v23 >> 1;
  v38 = v23 - v10;
  if (v37 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v37;
  if (v11)
  {
    if ((v8 & 1) != 0)
    {
      v42 = *v16;
      if (v42 >= 0xF000)
        v42 = 61440;
      if (v42 <= 0x1000)
        v43 = 4096;
      else
        v43 = v42;
      if (v16[1] >= 0xF000u)
        v44 = 61440;
      else
        v44 = v16[1];
      if (v44 <= 0x1000)
        v45 = 4096;
      else
        v45 = v44;
      if (*(unsigned __int16 *)((char *)v16 + v15) >= 0xF000u)
        v46 = 61440;
      else
        v46 = *(unsigned __int16 *)((char *)v16 + v15);
      if (v46 <= 0x1000)
        v47 = 4096;
      else
        v47 = v46;
      if (*(unsigned __int16 *)((char *)v16 + v15 + 2) >= 0xF000u)
        v48 = 61440;
      else
        v48 = *(unsigned __int16 *)((char *)v16 + v15 + 2);
      if (v48 <= 0x1000)
        v49 = 4096;
      else
        v49 = v48;
      v40 = v16 + 2;
      *v22 = (((613566757 * (unint64_t)((-1044480 - v43 + (v43 << 8)) >> 13)) >> 32)
                          + ((613566757 * (unint64_t)((-1044480 - v47 + (v47 << 8)) >> 13)) >> 32)
                          + 1) >> 1;
      v22[1] = (((613566757 * (unint64_t)((-1044480 - v45 + (v45 << 8)) >> 13)) >> 32)
                            + ((613566757 * (unint64_t)((-1044480 - v49 + (v49 << 8)) >> 13)) >> 32)
                            + 1) >> 1;
      v41 = v22 + 2;
      if (!v39)
        goto LABEL_72;
    }
    else
    {
      v40 = v16;
      v41 = v22;
      if (!v39)
      {
LABEL_72:
        v16 += v15;
        v22 += v21;
        goto LABEL_73;
      }
    }
    v50 = -(uint64_t)v39;
    do
    {
      v51 = *v40;
      v52 = v40[1];
      v53 = *(unsigned __int16 *)((char *)v40 + v15);
      v54 = *(unsigned __int16 *)((char *)v40 + v15 + 2);
      if (v51 >= 0xF000)
        v51 = 61440;
      if (v51 <= 0x1000)
        v51 = 4096;
      if (v52 >= 0xF000)
        v52 = 61440;
      if (v52 <= 0x1000)
        v52 = 4096;
      if (v53 >= 0xF000)
        v53 = 61440;
      if (v53 <= 0x1000)
        v53 = 4096;
      if (v54 >= 0xF000)
        v54 = 61440;
      if (v54 <= 0x1000)
        v54 = 4096;
      v40 += 2;
      *v41 = (((613566757 * (unint64_t)((-1044480 - v51 + (v51 << 8)) >> 13)) >> 32)
                          + ((613566757 * (unint64_t)((-1044480 - v53 + (v53 << 8)) >> 13)) >> 32)
                          + 1) >> 1;
      v41[1] = (((613566757 * (unint64_t)((-1044480 - v52 + (v52 << 8)) >> 13)) >> 32)
                            + ((613566757 * (unint64_t)((-1044480 - v54 + (v54 << 8)) >> 13)) >> 32)
                            + 1) >> 1;
      v41 += 2;
      v27 = __CFADD__(v50++, 1);
    }
    while (!v27);
    goto LABEL_72;
  }
LABEL_73:
  if (v24 != v36)
  {
    v55 = 0;
    v56 = v24 - v36;
    do
    {
      v57 = v16;
      v58 = v22;
      if ((v8 & 1) != 0)
      {
        v59 = *v16;
        if (v59 >= 0xF000)
          v59 = 61440;
        if (v59 <= 0x1000)
          v60 = 4096;
        else
          v60 = v59;
        if (v16[1] >= 0xF000u)
          v61 = 61440;
        else
          v61 = v16[1];
        if (v61 <= 0x1000)
          v62 = 4096;
        else
          v62 = v61;
        if (*(unsigned __int16 *)((char *)v16 + v15) >= 0xF000u)
          v63 = 61440;
        else
          v63 = *(unsigned __int16 *)((char *)v16 + v15);
        if (v63 <= 0x1000)
          v64 = 4096;
        else
          v64 = v63;
        if (*(unsigned __int16 *)((char *)v16 + v15 + 2) >= 0xF000u)
          v65 = 61440;
        else
          v65 = *(unsigned __int16 *)((char *)v16 + v15 + 2);
        if (v65 <= 0x1000)
          v66 = 4096;
        else
          v66 = v65;
        v57 = v16 + 2;
        *v22 = (((613566757 * (unint64_t)((-1044480 - v60 + (v60 << 8)) >> 13)) >> 32)
                            + ((613566757 * (unint64_t)((-1044480 - v64 + (v64 << 8)) >> 13)) >> 32)
                            + 1) >> 1;
        v22[1] = (((613566757 * (unint64_t)((-1044480 - v62 + (v62 << 8)) >> 13)) >> 32)
                              + ((613566757 * (unint64_t)((-1044480 - v66 + (v66 << 8)) >> 13)) >> 32)
                              + 1) >> 1;
        v58 = v22 + 2;
      }
      if (v39)
      {
        v67 = -(uint64_t)v39;
        do
        {
          v68 = *v57;
          v69 = v57[1];
          v70 = *(unsigned __int16 *)((char *)v57 + v15);
          v71 = *(unsigned __int16 *)((char *)v57 + v15 + 2);
          if (v68 >= 0xF000)
            v68 = 61440;
          if (v68 <= 0x1000)
            v68 = 4096;
          if (v69 >= 0xF000)
            v69 = 61440;
          if (v69 <= 0x1000)
            v69 = 4096;
          if (v70 >= 0xF000)
            v70 = 61440;
          if (v70 <= 0x1000)
            v70 = 4096;
          if (v71 >= 0xF000)
            v71 = 61440;
          if (v71 <= 0x1000)
            v71 = 4096;
          v57 += 2;
          *v58 = (((613566757 * (unint64_t)((-1044480 - v68 + (v68 << 8)) >> 13)) >> 32)
                              + ((613566757 * (unint64_t)((-1044480 - v70 + (v70 << 8)) >> 13)) >> 32)
                              + 1) >> 1;
          v58[1] = (((613566757 * (unint64_t)((-1044480 - v69 + (v69 << 8)) >> 13)) >> 32)
                                + ((613566757 * (unint64_t)((-1044480 - v71 + (v71 << 8)) >> 13)) >> 32)
                                + 1) >> 1;
          v58 += 2;
          v27 = __CFADD__(v67++, 1);
        }
        while (!v27);
      }
      v16 += v15;
      v22 += v21;
      v55 += 2;
    }
    while (v55 < v56);
  }
  return 0;
}

uint64_t vt_CopyDec_sv22_420f(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int16 *v40;
  _BYTE *v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  int v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unsigned __int16 *v52;
  _BYTE *v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  int v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v9 & 1;
  v12 = v11 + v9;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v14 = 2 * (v10 + v8);
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * (v11 + v9) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  v23 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  if (v23 >= v18 - v17)
    v23 = v18 - v17;
  v24 = v13 - v12;
  v25 = v20 - v19;
  if (v13 - v12 >= v25)
    v24 = v25;
  if (v24)
  {
    v26 = 0;
    v27 = v12 >= v9;
    v28 = *a4;
    v29 = *a8;
    v30 = *a3 + *a4 * v12;
    if (v27)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v14 + v31;
    v33 = *a7 + v29 * v19 + v17;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
        {
          v35 = *(unsigned __int16 *)(v32 + 2 * i);
          if (v35 >= 0xEB00)
            v35 = 60160;
          if (v35 <= 0x1000)
            v35 = 4096;
          *(_BYTE *)(v33 + i) = (-1044480 - v35 + (v35 << 8)) / 0xDB00;
        }
      }
      v32 += v28;
      v33 += v29;
      ++v26;
    }
    while (v26 != v24);
    v8 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v24 >= v11)
    v36 = v11;
  else
    v36 = 0;
  v37 = v23 >> 1;
  v38 = v23 - v10;
  if (v37 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v37;
  if (v11)
  {
    if ((v8 & 1) != 0)
    {
      v42 = *v16;
      if (v42 >= 0xF000)
        v42 = 61440;
      if (v42 <= 0x1000)
        v43 = 4096;
      else
        v43 = v42;
      if (v16[1] >= 0xF000u)
        v44 = 61440;
      else
        v44 = v16[1];
      if (v44 <= 0x1000)
        v45 = 4096;
      else
        v45 = v44;
      v40 = v16 + 2;
      *v22 = (613566757 * (unint64_t)((-1044480 - v43 + (v43 << 8)) >> 13)) >> 32;
      v22[1] = (613566757 * (unint64_t)((-1044480 - v45 + (v45 << 8)) >> 13)) >> 32;
      v41 = v22 + 2;
      if (!v39)
        goto LABEL_52;
    }
    else
    {
      v40 = v16;
      v41 = v22;
      if (!v39)
      {
LABEL_52:
        v16 += v15;
        v22 += v21;
        goto LABEL_53;
      }
    }
    v46 = -(uint64_t)v39;
    do
    {
      v47 = *v40;
      v48 = v40[1];
      if (v47 >= 0xF000)
        v47 = 61440;
      if (v47 <= 0x1000)
        v47 = 4096;
      if (v48 >= 0xF000)
        v48 = 61440;
      if (v48 <= 0x1000)
        v48 = 4096;
      *v41 = (613566757 * (unint64_t)((-1044480 - v47 + (v47 << 8)) >> 13)) >> 32;
      v41[1] = (613566757 * (unint64_t)((-1044480 - v48 + (v48 << 8)) >> 13)) >> 32;
      v41 += 2;
      v40 += 2;
      v27 = __CFADD__(v46++, 1);
    }
    while (!v27);
    goto LABEL_52;
  }
LABEL_53:
  if (v24 != v36)
  {
    v49 = 0;
    v50 = v24 - v36;
    v51 = 2 * v15;
    do
    {
      v52 = v16;
      v53 = v22;
      if ((v8 & 1) != 0)
      {
        v54 = *v16;
        if (v54 >= 0xF000)
          v54 = 61440;
        if (v54 <= 0x1000)
          v55 = 4096;
        else
          v55 = v54;
        if (v16[1] >= 0xF000u)
          v56 = 61440;
        else
          v56 = v16[1];
        if (v56 <= 0x1000)
          v57 = 4096;
        else
          v57 = v56;
        v52 = v16 + 2;
        *v22 = (613566757 * (unint64_t)((-1044480 - v55 + (v55 << 8)) >> 13)) >> 32;
        v22[1] = (613566757 * (unint64_t)((-1044480 - v57 + (v57 << 8)) >> 13)) >> 32;
        v53 = v22 + 2;
      }
      if (v39)
      {
        v58 = -(uint64_t)v39;
        do
        {
          v59 = *v52;
          v60 = v52[1];
          if (v59 >= 0xF000)
            v59 = 61440;
          if (v59 <= 0x1000)
            v59 = 4096;
          if (v60 >= 0xF000)
            v60 = 61440;
          if (v60 <= 0x1000)
            v60 = 4096;
          *v53 = (613566757 * (unint64_t)((-1044480 - v59 + (v59 << 8)) >> 13)) >> 32;
          v53[1] = (613566757 * (unint64_t)((-1044480 - v60 + (v60 << 8)) >> 13)) >> 32;
          v53 += 2;
          v52 += 2;
          v27 = __CFADD__(v58++, 1);
        }
        while (!v27);
      }
      v16 = (unsigned __int16 *)((char *)v16 + v51);
      v22 += v21;
      v49 += 2;
    }
    while (v49 < v50);
  }
  return 0;
}

uint64_t vt_CopyAvg_sv22_y420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t i;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _BYTE *v41;
  _BYTE *v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  BOOL v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  _BYTE *v53;
  _BYTE *v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  int v60;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v9 & 1;
  v12 = v11 + v9;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v14 = 2 * (v10 + v8);
  v15 = a4[1];
  v16 = a3[1] + v15 * (v11 + v9) + (v14 & 0xFFFFFFFFFFFFFFFCLL);
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = a8[2];
  v23 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 >> 1));
  v24 = (_BYTE *)(a7[2] + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
  v25 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  if (v25 >= v18 - v17)
    v25 = v18 - v17;
  v26 = v13 - v12;
  v27 = v20 - v19;
  if (v13 - v12 >= v27)
    v26 = v27;
  if (v26)
  {
    v28 = 0;
    v29 = *a4;
    v30 = *a8;
    v31 = *a3 + v29 * v12;
    if (v12 >= v9)
      v32 = 0;
    else
      v32 = v29;
    v33 = v31 + v14 + v32;
    v34 = *a7 + v30 * v19 + v17;
    do
    {
      if (v25)
      {
        for (i = 0; i != v25; ++i)
          *(_BYTE *)(v34 + i) = *(_BYTE *)(v33 + 2 * i + 1);
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v26);
    v8 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v26 >= v11)
    v36 = v11;
  else
    v36 = 0;
  v37 = v25 >> 1;
  v38 = v25 - v10;
  if (v37 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v37;
  if (v11)
  {
    if ((v8 & 1) != 0)
    {
      v40 = v16 + 4;
      v43 = (*(unsigned __int8 *)(v16 + 3) + *(unsigned __int8 *)(v16 + v15 + 3) + 1) >> 1;
      *v23 = (*(unsigned __int8 *)(v16 + 1) + *(unsigned __int8 *)(v16 + v15 + 1) + 1) >> 1;
      v41 = v23 + 1;
      *v24 = v43;
      v42 = v24 + 1;
      if (!v39)
      {
LABEL_29:
        v16 += 2 * v15;
        v23 += v21;
        v24 += v22;
        goto LABEL_30;
      }
    }
    else
    {
      v40 = v16;
      v41 = v23;
      v42 = v24;
      if (!v39)
        goto LABEL_29;
    }
    v44 = -(uint64_t)v39;
    do
    {
      v45 = *(unsigned __int8 *)(v40 + 1);
      v46 = *(unsigned __int8 *)(v40 + 3);
      v47 = *(unsigned __int8 *)(v40 + v15 + 1);
      v48 = *(unsigned __int8 *)(v40 + v15 + 3);
      v40 += 4;
      *v41++ = (v45 + v47 + 1) >> 1;
      *v42++ = (v46 + v48 + 1) >> 1;
      v49 = __CFADD__(v44++, 1);
    }
    while (!v49);
    goto LABEL_29;
  }
LABEL_30:
  if (v26 != v36)
  {
    v50 = 0;
    v51 = v26 - v36;
    do
    {
      v52 = v16;
      v53 = v23;
      v54 = v24;
      if ((v8 & 1) != 0)
      {
        v52 = v16 + 4;
        v55 = (*(unsigned __int8 *)(v16 + 3) + *(unsigned __int8 *)(v16 + v15 + 3) + 1) >> 1;
        *v23 = (*(unsigned __int8 *)(v16 + 1) + *(unsigned __int8 *)(v16 + v15 + 1) + 1) >> 1;
        v53 = v23 + 1;
        *v24 = v55;
        v54 = v24 + 1;
      }
      if (v39)
      {
        v56 = -(uint64_t)v39;
        do
        {
          v57 = *(unsigned __int8 *)(v52 + 1);
          v58 = *(unsigned __int8 *)(v52 + 3);
          v59 = *(unsigned __int8 *)(v52 + v15 + 1);
          v60 = *(unsigned __int8 *)(v52 + v15 + 3);
          v52 += 4;
          *v53++ = (v57 + v59 + 1) >> 1;
          *v54++ = (v58 + v60 + 1) >> 1;
          v49 = __CFADD__(v56++, 1);
        }
        while (!v49);
      }
      v16 += 2 * v15;
      v23 += v21;
      v24 += v22;
      v50 += 2;
    }
    while (v50 < v51);
  }
  return 0;
}

uint64_t vt_CopyDec_sv22_y420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t i;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _BYTE *v42;
  _BYTE *v43;
  char v44;
  uint64_t v45;
  char v46;
  BOOL v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _BYTE *v52;
  _BYTE *v53;
  char v54;
  uint64_t v55;
  char v56;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = v8 & 1;
  v11 = v9 & 1;
  v12 = v11 + v9;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v9) & 0xFFFFFFFE;
  v14 = 2 * (v10 + v8);
  v15 = a4[1];
  v16 = a3[1] + v15 * (v11 + v9) + (v14 & 0xFFFFFFFFFFFFFFFCLL);
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = a8[2];
  v23 = a7[2];
  v24 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 >> 1));
  v25 = (_BYTE *)(v23 + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
  v26 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8) < v18 - v17)
    v26 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v10 + v8);
  v27 = v13 - v12;
  v28 = v20 - v19;
  if (v13 - v12 >= v28)
    v27 = v28;
  if (v27)
  {
    v29 = 0;
    v30 = *a4;
    v31 = *a8;
    v32 = *a3 + v30 * v12;
    if (v12 >= v9)
      v33 = 0;
    else
      v33 = v30;
    v34 = v32 + v14 + v33;
    v35 = *a7 + v31 * v19 + v17;
    do
    {
      if (v26)
      {
        for (i = 0; i != v26; ++i)
          *(_BYTE *)(v35 + i) = *(_BYTE *)(v34 + 2 * i + 1);
      }
      v34 += v30;
      v35 += v31;
      ++v29;
    }
    while (v29 != v27);
    v8 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v8 & 1;
  }
  if (v27 >= v11)
    v37 = v11;
  else
    v37 = 0;
  v38 = v26 >> 1;
  v39 = v26 - v10;
  if (v38 >= v39 >> 1)
    v40 = v39 >> 1;
  else
    v40 = v38;
  if (v11)
  {
    if ((v8 & 1) != 0)
    {
      v44 = *(_BYTE *)(v16 + 3);
      v41 = v16 + 4;
      *v24 = *(_BYTE *)(v16 + 1);
      v42 = v24 + 1;
      *v25 = v44;
      v43 = v25 + 1;
      if (!v40)
      {
LABEL_29:
        v16 += 2 * v15;
        v24 += v21;
        v25 += v22;
        goto LABEL_30;
      }
    }
    else
    {
      v41 = v16;
      v42 = v24;
      v43 = (_BYTE *)(v23 + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
      if (!v40)
        goto LABEL_29;
    }
    v45 = -(uint64_t)v40;
    do
    {
      v46 = *(_BYTE *)(v41 + 3);
      *v42++ = *(_BYTE *)(v41 + 1);
      *v43++ = v46;
      v41 += 4;
      v47 = __CFADD__(v45++, 1);
    }
    while (!v47);
    goto LABEL_29;
  }
LABEL_30:
  if (v27 != v37)
  {
    v48 = 0;
    v49 = v27 - v37;
    v50 = 2 * v15;
    do
    {
      v51 = v16;
      v52 = v24;
      v53 = v25;
      if ((v8 & 1) != 0)
      {
        v54 = *(_BYTE *)(v16 + 3);
        v51 = v16 + 4;
        *v24 = *(_BYTE *)(v16 + 1);
        v52 = v24 + 1;
        *v25 = v54;
        v53 = v25 + 1;
      }
      if (v40)
      {
        v55 = -(uint64_t)v40;
        do
        {
          v56 = *(_BYTE *)(v51 + 3);
          *v52++ = *(_BYTE *)(v51 + 1);
          *v53++ = v56;
          v51 += 4;
          v47 = __CFADD__(v55++, 1);
        }
        while (!v47);
      }
      v16 += v50;
      v24 += v21;
      v25 += v22;
      v48 += 2;
    }
    while (v48 < v49);
  }
  return 0;
}

uint64_t vt_CopyAvg_sv22_f420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t i;
  unsigned int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unsigned __int16 *v42;
  _BYTE *v43;
  _BYTE *v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  int v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unint64_t v59;
  unint64_t v60;
  unsigned __int16 *v61;
  _BYTE *v62;
  _BYTE *v63;
  unsigned int v64;
  int v65;
  unsigned int v66;
  int v67;
  unsigned int v68;
  int v69;
  unsigned int v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = v8 & 1;
  v12 = v11 + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = 2 * (v10 + v9);
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * (v11 + v8) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = a8[2];
  v23 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 >> 1));
  v24 = (_BYTE *)(a7[2] + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
  v25 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  if (v25 >= v18 - v17)
    v25 = v18 - v17;
  v26 = v13 - v12;
  v27 = v20 - v19;
  if (v13 - v12 >= v27)
    v26 = v27;
  if (v26)
  {
    v28 = 0;
    v29 = v12 >= v8;
    v30 = *a4;
    v31 = *a8;
    v32 = *a3 + v30 * v12;
    if (v29)
      v33 = 0;
    else
      v33 = v30;
    v34 = v32 + v14 + v33;
    v35 = *a7 + v31 * v19 + v17;
    do
    {
      if (v25)
      {
        for (i = 0; i != v25; ++i)
        {
          v37 = *(unsigned __int16 *)(v34 + 2 * i);
          if (v37 >= 0xEB00)
            v37 = 60160;
          if (v37 <= 0x1000)
            v37 = 4096;
          *(_BYTE *)(v35 + i) = (-1044480 - v37 + (v37 << 8)) / 0xDB00;
        }
      }
      v34 += v30;
      v35 += v31;
      ++v28;
    }
    while (v28 != v26);
    v9 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v9 & 1;
  }
  if (v26 >= v11)
    v38 = v11;
  else
    v38 = 0;
  v39 = v25 >> 1;
  v40 = v25 - v10;
  if (v39 >= v40 >> 1)
    v41 = v40 >> 1;
  else
    v41 = v39;
  if (v11)
  {
    if ((v9 & 1) != 0)
    {
      v45 = *v16;
      if (v45 >= 0xF000)
        v45 = 61440;
      if (v45 <= 0x1000)
        v46 = 4096;
      else
        v46 = v45;
      if (v16[1] >= 0xF000u)
        v47 = 61440;
      else
        v47 = v16[1];
      if (v47 <= 0x1000)
        v48 = 4096;
      else
        v48 = v47;
      if (*(unsigned __int16 *)((char *)v16 + v15) >= 0xF000u)
        v49 = 61440;
      else
        v49 = *(unsigned __int16 *)((char *)v16 + v15);
      if (v49 <= 0x1000)
        v50 = 4096;
      else
        v50 = v49;
      if (*(unsigned __int16 *)((char *)v16 + v15 + 2) >= 0xF000u)
        v51 = 61440;
      else
        v51 = *(unsigned __int16 *)((char *)v16 + v15 + 2);
      if (v51 <= 0x1000)
        v52 = 4096;
      else
        v52 = v51;
      v42 = v16 + 2;
      v53 = (((613566757 * (unint64_t)((-1044480 - v48 + (v48 << 8)) >> 13)) >> 32)
                         + ((613566757 * (unint64_t)((-1044480 - v52 + (v52 << 8)) >> 13)) >> 32)
                         + 1) >> 1;
      *v23 = (((613566757 * (unint64_t)((-1044480 - v46 + (v46 << 8)) >> 13)) >> 32)
                          + ((613566757 * (unint64_t)((-1044480 - v50 + (v50 << 8)) >> 13)) >> 32)
                          + 1) >> 1;
      v43 = v23 + 1;
      *v24 = v53;
      v44 = v24 + 1;
      if (!v41)
        goto LABEL_72;
    }
    else
    {
      v42 = v16;
      v43 = v23;
      v44 = v24;
      if (!v41)
      {
LABEL_72:
        v16 += v15;
        v23 += v21;
        v24 += v22;
        goto LABEL_73;
      }
    }
    v54 = -(uint64_t)v41;
    do
    {
      v55 = *v42;
      v56 = v42[1];
      v57 = *(unsigned __int16 *)((char *)v42 + v15);
      v58 = *(unsigned __int16 *)((char *)v42 + v15 + 2);
      if (v55 >= 0xF000)
        v55 = 61440;
      if (v55 <= 0x1000)
        v55 = 4096;
      if (v56 >= 0xF000)
        v56 = 61440;
      if (v56 <= 0x1000)
        v56 = 4096;
      if (v57 >= 0xF000)
        v57 = 61440;
      if (v57 <= 0x1000)
        v57 = 4096;
      if (v58 >= 0xF000)
        v58 = 61440;
      if (v58 <= 0x1000)
        v58 = 4096;
      v42 += 2;
      *v43++ = (((613566757 * (unint64_t)((-1044480 - v55 + (v55 << 8)) >> 13)) >> 32)
                            + ((613566757 * (unint64_t)((-1044480 - v57 + (v57 << 8)) >> 13)) >> 32)
                            + 1) >> 1;
      *v44++ = (((613566757 * (unint64_t)((-1044480 - v56 + (v56 << 8)) >> 13)) >> 32)
                            + ((613566757 * (unint64_t)((-1044480 - v58 + (v58 << 8)) >> 13)) >> 32)
                            + 1) >> 1;
      v29 = __CFADD__(v54++, 1);
    }
    while (!v29);
    goto LABEL_72;
  }
LABEL_73:
  if (v26 != v38)
  {
    v59 = 0;
    v60 = v26 - v38;
    do
    {
      v61 = v16;
      v62 = v23;
      v63 = v24;
      if ((v9 & 1) != 0)
      {
        v64 = *v16;
        if (v64 >= 0xF000)
          v64 = 61440;
        if (v64 <= 0x1000)
          v65 = 4096;
        else
          v65 = v64;
        if (v16[1] >= 0xF000u)
          v66 = 61440;
        else
          v66 = v16[1];
        if (v66 <= 0x1000)
          v67 = 4096;
        else
          v67 = v66;
        if (*(unsigned __int16 *)((char *)v16 + v15) >= 0xF000u)
          v68 = 61440;
        else
          v68 = *(unsigned __int16 *)((char *)v16 + v15);
        if (v68 <= 0x1000)
          v69 = 4096;
        else
          v69 = v68;
        if (*(unsigned __int16 *)((char *)v16 + v15 + 2) >= 0xF000u)
          v70 = 61440;
        else
          v70 = *(unsigned __int16 *)((char *)v16 + v15 + 2);
        if (v70 <= 0x1000)
          v71 = 4096;
        else
          v71 = v70;
        v61 = v16 + 2;
        v72 = (((613566757 * (unint64_t)((-1044480 - v65 + (v65 << 8)) >> 13)) >> 32)
                           + ((613566757 * (unint64_t)((-1044480 - v69 + (v69 << 8)) >> 13)) >> 32)
                           + 1) >> 1;
        v73 = (((613566757 * (unint64_t)((-1044480 - v67 + (v67 << 8)) >> 13)) >> 32)
                           + ((613566757 * (unint64_t)((-1044480 - v71 + (v71 << 8)) >> 13)) >> 32)
                           + 1) >> 1;
        *v23 = v72;
        v62 = v23 + 1;
        *v24 = v73;
        v63 = v24 + 1;
      }
      if (v41)
      {
        v74 = -(uint64_t)v41;
        do
        {
          v75 = *v61;
          v76 = v61[1];
          v77 = *(unsigned __int16 *)((char *)v61 + v15);
          v78 = *(unsigned __int16 *)((char *)v61 + v15 + 2);
          if (v75 >= 0xF000)
            v75 = 61440;
          if (v75 <= 0x1000)
            v75 = 4096;
          if (v76 >= 0xF000)
            v76 = 61440;
          if (v76 <= 0x1000)
            v76 = 4096;
          if (v77 >= 0xF000)
            v77 = 61440;
          if (v77 <= 0x1000)
            v77 = 4096;
          if (v78 >= 0xF000)
            v78 = 61440;
          if (v78 <= 0x1000)
            v78 = 4096;
          v61 += 2;
          *v62++ = (((613566757 * (unint64_t)((-1044480 - v75 + (v75 << 8)) >> 13)) >> 32)
                                + ((613566757 * (unint64_t)((-1044480 - v77 + (v77 << 8)) >> 13)) >> 32)
                                + 1) >> 1;
          *v63++ = (((613566757 * (unint64_t)((-1044480 - v76 + (v76 << 8)) >> 13)) >> 32)
                                + ((613566757 * (unint64_t)((-1044480 - v78 + (v78 << 8)) >> 13)) >> 32)
                                + 1) >> 1;
          v29 = __CFADD__(v74++, 1);
        }
        while (!v29);
      }
      v16 += v15;
      v23 += v21;
      v24 += v22;
      v59 += 2;
    }
    while (v59 < v60);
  }
  return 0;
}

uint64_t vt_CopyDec_sv22_f420(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t i;
  unsigned int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unsigned __int16 *v42;
  _BYTE *v43;
  _BYTE *v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unsigned __int16 *v56;
  _BYTE *v57;
  _BYTE *v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  int v62;
  unint64_t v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = v8 & 1;
  v12 = v11 + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = 2 * (v10 + v9);
  v15 = a4[1];
  v16 = (unsigned __int16 *)(a3[1] + v15 * (v11 + v8) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = a8[2];
  v23 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 >> 1));
  v24 = (_BYTE *)(a7[2] + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
  v25 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  if (v25 >= v18 - v17)
    v25 = v18 - v17;
  v26 = v13 - v12;
  v27 = v20 - v19;
  if (v13 - v12 >= v27)
    v26 = v27;
  if (v26)
  {
    v28 = 0;
    v29 = v12 >= v8;
    v30 = *a4;
    v31 = *a8;
    v32 = *a3 + v30 * v12;
    if (v29)
      v33 = 0;
    else
      v33 = v30;
    v34 = v32 + v14 + v33;
    v35 = *a7 + v31 * v19 + v17;
    do
    {
      if (v25)
      {
        for (i = 0; i != v25; ++i)
        {
          v37 = *(unsigned __int16 *)(v34 + 2 * i);
          if (v37 >= 0xEB00)
            v37 = 60160;
          if (v37 <= 0x1000)
            v37 = 4096;
          *(_BYTE *)(v35 + i) = (-1044480 - v37 + (v37 << 8)) / 0xDB00;
        }
      }
      v34 += v30;
      v35 += v31;
      ++v28;
    }
    while (v28 != v26);
    v9 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v9 & 1;
  }
  if (v26 >= v11)
    v38 = v11;
  else
    v38 = 0;
  v39 = v25 >> 1;
  v40 = v25 - v10;
  if (v39 >= v40 >> 1)
    v41 = v40 >> 1;
  else
    v41 = v39;
  if (v11)
  {
    if ((v9 & 1) != 0)
    {
      v45 = *v16;
      if (v45 >= 0xF000)
        v45 = 61440;
      if (v45 <= 0x1000)
        v46 = 4096;
      else
        v46 = v45;
      if (v16[1] >= 0xF000u)
        v47 = 61440;
      else
        v47 = v16[1];
      if (v47 <= 0x1000)
        v48 = 4096;
      else
        v48 = v47;
      v42 = v16 + 2;
      v49 = (613566757 * (unint64_t)((-1044480 - v48 + (v48 << 8)) >> 13)) >> 32;
      *v23 = (613566757 * (unint64_t)((-1044480 - v46 + (v46 << 8)) >> 13)) >> 32;
      v43 = v23 + 1;
      *v24 = v49;
      v44 = v24 + 1;
      if (!v41)
        goto LABEL_52;
    }
    else
    {
      v42 = v16;
      v43 = v23;
      v44 = v24;
      if (!v41)
      {
LABEL_52:
        v16 += v15;
        v23 += v21;
        v24 += v22;
        goto LABEL_53;
      }
    }
    v50 = -(uint64_t)v41;
    do
    {
      v51 = *v42;
      v52 = v42[1];
      if (v51 >= 0xF000)
        v51 = 61440;
      if (v51 <= 0x1000)
        v51 = 4096;
      if (v52 >= 0xF000)
        v52 = 61440;
      if (v52 <= 0x1000)
        v52 = 4096;
      *v43++ = (613566757 * (unint64_t)((-1044480 - v51 + (v51 << 8)) >> 13)) >> 32;
      *v44++ = (613566757 * (unint64_t)((-1044480 - v52 + (v52 << 8)) >> 13)) >> 32;
      v42 += 2;
      v29 = __CFADD__(v50++, 1);
    }
    while (!v29);
    goto LABEL_52;
  }
LABEL_53:
  if (v26 != v38)
  {
    v53 = 0;
    v54 = v26 - v38;
    v55 = 2 * v15;
    do
    {
      v56 = v16;
      v57 = v23;
      v58 = v24;
      if ((v9 & 1) != 0)
      {
        v59 = *v16;
        if (v59 >= 0xF000)
          v59 = 61440;
        if (v59 <= 0x1000)
          v60 = 4096;
        else
          v60 = v59;
        if (v16[1] >= 0xF000u)
          v61 = 61440;
        else
          v61 = v16[1];
        if (v61 <= 0x1000)
          v62 = 4096;
        else
          v62 = v61;
        v56 = v16 + 2;
        v63 = (613566757 * (unint64_t)((-1044480 - v62 + (v62 << 8)) >> 13)) >> 32;
        *v23 = (613566757 * (unint64_t)((-1044480 - v60 + (v60 << 8)) >> 13)) >> 32;
        v57 = v23 + 1;
        *v24 = v63;
        v58 = v24 + 1;
      }
      if (v41)
      {
        v64 = -(uint64_t)v41;
        do
        {
          v65 = *v56;
          v66 = v56[1];
          if (v65 >= 0xF000)
            v65 = 61440;
          if (v65 <= 0x1000)
            v65 = 4096;
          if (v66 >= 0xF000)
            v66 = 61440;
          if (v66 <= 0x1000)
            v66 = 4096;
          *v57++ = (613566757 * (unint64_t)((-1044480 - v65 + (v65 << 8)) >> 13)) >> 32;
          *v58++ = (613566757 * (unint64_t)((-1044480 - v66 + (v66 << 8)) >> 13)) >> 32;
          v56 += 2;
          v29 = __CFADD__(v64++, 1);
        }
        while (!v29);
      }
      v16 = (unsigned __int16 *)((char *)v16 + v55);
      v23 += v21;
      v24 += v22;
      v53 += 2;
    }
    while (v53 < v54);
  }
  return 0;
}

uint64_t vt_Copy_sv22_y416(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  __int16 v22;
  __int16 *v23;
  __int16 v24;
  _WORD *v25;

  v8 = a2[4] & 0xFFFFFFFELL;
  v9 = a2[2] + a2[4] - v8 + ((a2[2] + a2[4]) & 1);
  if (v9 >= a6[2])
    v9 = a6[2];
  if (a2[3] >= a6[3])
    v10 = a6[3];
  else
    v10 = a2[3];
  if (v10)
  {
    v11 = 0;
    v12 = *a8;
    v13 = *a4;
    v14 = a4[1];
    v15 = *a7 + *a8 * a6[5] + 2 * a6[4];
    v16 = a2[5];
    v17 = a3[1] + v14 * v16 + 2 * v8;
    v18 = *a3 + *a4 * v16 + 2 * v8;
    do
    {
      if (v9)
      {
        v19 = 0;
        v20 = 0;
        v21 = 0;
        v22 = 0;
        v23 = (__int16 *)v17;
        do
        {
          if ((v20 & 1) == 0)
          {
            v22 = *v23;
            v21 = v23[1];
            v23 += 2;
          }
          v24 = *(_WORD *)(v18 + 2 * v20);
          v25 = (_WORD *)(v15 + v19);
          *v25 = -1;
          v25[1] = v24;
          v25[2] = v22;
          v25[3] = v21;
          ++v20;
          v19 += 8;
        }
        while (v9 != v20);
      }
      v18 += v13;
      v15 += v12;
      v17 += v14;
      ++v11;
    }
    while (v11 != v10);
  }
  return 0;
}

uint64_t vt_Copy_sv22_y408(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  char v24;
  _BYTE *v25;

  v8 = a2[4] & 0xFFFFFFFELL;
  v9 = a2[2] + a2[4] - v8 + ((a2[2] + a2[4]) & 1);
  if (v9 >= a6[2])
    v9 = a6[2];
  if (a2[3] >= a6[3])
    v10 = a6[3];
  else
    v10 = a2[3];
  if (v10)
  {
    v11 = 0;
    v12 = *a8;
    v13 = *a4;
    v14 = a4[1];
    v15 = *a7 + *a8 * a6[5] + a6[4];
    v16 = a2[5];
    v17 = a3[1] + v14 * v16 + 2 * v8;
    v18 = *a3 + *a4 * v16 + 2 * v8;
    do
    {
      if (v9)
      {
        v19 = 0;
        v20 = 0;
        v21 = 0;
        v22 = 0;
        v23 = v17;
        do
        {
          if ((v20 & 1) == 0)
          {
            v22 = *(_BYTE *)(v23 + 1);
            v21 = *(_BYTE *)(v23 + 3);
            v23 += 4;
          }
          v24 = *(_BYTE *)(v18 + 2 * v20 + 1);
          v25 = (_BYTE *)(v15 + v19);
          *v25 = -1;
          v25[1] = v24;
          v25[2] = v22;
          v25[3] = v21;
          ++v20;
          v19 += 4;
        }
        while (v9 != v20);
      }
      v18 += v13;
      v15 += v12;
      v17 += v14;
      ++v11;
    }
    while (v11 != v10);
  }
  return 0;
}

uint64_t vt_Copy_sv22_s4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  size_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  int *v32;
  int *v33;
  uint64_t v34;
  int v35;
  BOOL v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  __int16 *v40;
  int *v41;
  uint64_t v42;
  __int16 v43;
  __int16 v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;

  v8 = a2[4];
  v9 = a2[5];
  v10 = a4[1];
  v11 = (int *)(a3[1] + v10 * v9 + 2 * (v8 & 0xFFFFFFFE));
  v12 = a6[4];
  v13 = a6[5];
  v14 = a6[2];
  v15 = a6[3];
  v16 = a8[1];
  v17 = (int *)(a7[1] + v16 * v13 + 4 * v12);
  if (a2[2] + v8 - (v8 & 0xFFFFFFFE) + ((a2[2] + v8) & 1uLL) >= v14)
    v18 = v14;
  else
    v18 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  if (a2[3] >= v15)
    v19 = v15;
  else
    v19 = a2[3];
  if (v19)
  {
    v50 = a8[1];
    v52 = a4[1];
    v53 = v18;
    v20 = *a4;
    v21 = *a8;
    v22 = a8[2];
    v23 = (char *)(a7[2] + v22 * v13 + 2 * v12);
    v24 = (char *)(*a7 + *a8 * v13 + 2 * v12);
    v25 = (char *)(*a3 + *a4 * v9 + 2 * (v8 & 0xFFFFFFFE));
    v26 = 2 * v18;
    v51 = v19;
    do
    {
      memcpy(v24, v25, v26);
      memset(v23, 255, v26);
      v25 += v20;
      v24 += v21;
      v23 += v22;
      --v19;
    }
    while (v19);
    v16 = v50;
    v8 = a2[4];
    v9 = a2[5];
    v10 = v52;
    v18 = v53;
    v19 = v51;
  }
  v27 = v9 & 1;
  if (v19 >= v27)
    v28 = v9 & 1;
  else
    v28 = 0;
  v29 = v8;
  v30 = v18 >> 1;
  v31 = v8 & 1;
  if (v18 >> 1 >= (v18 - v31) >> 1)
    v30 = (v18 - v31) >> 1;
  if ((v9 & 1) != 0)
  {
    v32 = v11;
    if ((v29 & 1) != 0)
    {
      v32 = v11 + 1;
      *v17 = *v11;
      v33 = v17 + 1;
      if (v30)
      {
LABEL_19:
        v34 = -(uint64_t)v30;
        do
        {
          v35 = *v32++;
          *v33++ = v35;
          v36 = __CFADD__(v34++, 1);
        }
        while (!v36);
        v37 = 2 * v30;
        goto LABEL_25;
      }
    }
    else
    {
      v33 = v17;
      if (v30)
        goto LABEL_19;
    }
    v37 = 0;
LABEL_25:
    if ((v37 | (unint64_t)v31) < v18)
      *v33 = *v32;
    v11 = (int *)((char *)v11 + v10);
    v17 = (int *)((char *)v17 + v16);
  }
  if (v19 == v28)
  {
    v38 = 0;
  }
  else
  {
    v39 = 0;
    v38 = v19 - v28;
    do
    {
      v40 = (__int16 *)v11;
      v41 = v17;
      if ((v29 & 1) != 0)
      {
        v40 = (__int16 *)(v11 + 1);
        *v17 = *v11;
        v41 = v17 + 1;
      }
      if (v30)
      {
        v42 = -(uint64_t)v30;
        do
        {
          v43 = *v40;
          v44 = v40[1];
          v40 += 2;
          *(_WORD *)v41 = v43;
          *((_WORD *)v41 + 1) = v44;
          *((_WORD *)v41 + 2) = v43;
          *((_WORD *)v41 + 3) = v44;
          v41 += 2;
          v36 = __CFADD__(v42++, 1);
        }
        while (!v36);
      }
      if ((v31 | (2 * v30)) < v18)
        *v41 = *(_DWORD *)v40;
      v11 = (int *)((char *)v11 + v10);
      v17 = (int *)((char *)v17 + v16);
      ++v39;
    }
    while (v39 != v38);
  }
  if (v38 + v27 < v19)
  {
    if ((v29 & 1) != 0)
    {
      v45 = *v11++;
      *v17++ = v45;
    }
    if (v30)
    {
      v46 = -(uint64_t)v30;
      do
      {
        v47 = *v11++;
        *v17++ = v47;
        v36 = __CFADD__(v46++, 1);
      }
      while (!v36);
      v30 *= 2;
    }
    if ((v30 | v31) < v18)
      *v17 = *v11;
  }
  return 0;
}

uint64_t vt_Copy_sv22_s2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  size_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  int *v32;
  int *v33;
  uint64_t v34;
  int v35;
  BOOL v36;
  unint64_t v37;
  uint64_t v38;
  int *v39;
  int *v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  unint64_t v47;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = *(_QWORD *)(a2 + 40);
  v11 = a4[1];
  v12 = (int *)(a3[1] + v11 * v10 + ((2 * (v9 + v8)) & 0xFFFFFFFFFFFFFFFCLL));
  v13 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v14 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v15 = *(_QWORD *)(a6 + 40);
  v16 = 2 * v13;
  v17 = a8[1];
  v18 = (int *)(a7[1] + v17 * v15 + ((2 * v13) & 0x7FFFFFFFFFFFFFFELL));
  v19 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v9 + v8);
  if (v19 >= v14 - v13)
    v19 = v14 - v13;
  if (*(_QWORD *)(a2 + 24) >= *(_QWORD *)(a6 + 24))
    v20 = *(_QWORD *)(a6 + 24);
  else
    v20 = *(_QWORD *)(a2 + 24);
  if (v20)
  {
    v49 = a8[1];
    v50 = v20;
    v51 = a4[1];
    v21 = *a4;
    v22 = *a8;
    v23 = a8[2];
    v24 = (char *)(a7[2] + v23 * v15 + v16);
    v25 = (char *)(*a7 + *a8 * v15 + v16);
    v26 = (char *)(*a3 + *a4 * v10 + 2 * (v9 + v8));
    v47 = v19;
    v27 = 2 * v19;
    do
    {
      memcpy(v25, v26, v27);
      memset(v24, 255, v27);
      v26 += v21;
      v25 += v22;
      v24 += v23;
      --v20;
    }
    while (v20);
    v17 = v49;
    v8 = *(_QWORD *)(a2 + 32);
    v10 = *(_QWORD *)(a2 + 40);
    v9 = v8 & 1;
    v20 = v50;
    v11 = v51;
    v19 = v47;
  }
  v28 = v10 & 1;
  if (v20 >= v28)
    v29 = v10 & 1;
  else
    v29 = 0;
  v30 = v8;
  v31 = v19 >> 1;
  if (v19 >> 1 >= (v19 - v9) >> 1)
    v31 = (v19 - v9) >> 1;
  if ((v10 & 1) != 0)
  {
    v32 = v12;
    if ((v30 & 1) != 0)
    {
      v32 = v12 + 1;
      *v18 = *v12;
      v33 = v18 + 1;
      if (!v31)
      {
LABEL_23:
        v12 = (int *)((char *)v12 + v11);
        v18 = (int *)((char *)v18 + v17);
        goto LABEL_24;
      }
    }
    else
    {
      v33 = v18;
      if (!v31)
        goto LABEL_23;
    }
    v34 = -(uint64_t)v31;
    do
    {
      v35 = *v32++;
      *v33++ = v35;
      v36 = __CFADD__(v34++, 1);
    }
    while (!v36);
    goto LABEL_23;
  }
LABEL_24:
  if (v20 == v29)
  {
    v37 = 0;
  }
  else
  {
    v38 = 0;
    v37 = v20 - v29;
    do
    {
      v39 = v12;
      v40 = v18;
      if ((v30 & 1) != 0)
      {
        v39 = v12 + 1;
        *v18 = *v12;
        v40 = v18 + 1;
      }
      if (v31)
      {
        v41 = -(uint64_t)v31;
        do
        {
          v42 = *v39++;
          *v40++ = v42;
          v36 = __CFADD__(v41++, 1);
        }
        while (!v36);
      }
      v12 = (int *)((char *)v12 + v11);
      v18 = (int *)((char *)v18 + v17);
      ++v38;
    }
    while (v38 != v37);
  }
  if (v37 + v28 < v20)
  {
    if ((v30 & 1) != 0)
    {
      v43 = *v12++;
      *v18++ = v43;
    }
    if (v31)
    {
      v44 = -(uint64_t)v31;
      do
      {
        v45 = *v12++;
        *v18++ = v45;
        v36 = __CFADD__(v44++, 1);
      }
      while (!v36);
    }
  }
  return 0;
}

uint64_t vt_Copy_sv22_t4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int16 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  unint64_t v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  __int16 *v33;
  _WORD *v34;
  uint64_t v35;
  __int16 v36;
  __int16 v37;
  BOOL v38;
  uint64_t v39;
  __int16 v40;
  __int16 v41;
  __int16 v42;
  unint64_t v43;
  uint64_t v44;
  __int16 *v45;
  int16x4_t *v46;
  __int16 v47;
  uint64_t v48;
  __int16 *v49;
  int16x4_t v50;
  __int16 v51;
  __int16 v52;
  __int16 v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  __int16 v57;
  uint64_t v58;
  __int16 v59;
  __int16 v60;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[3];
  v11 = a4[1];
  v12 = (__int16 *)(a3[1] + v11 * v8 + 2 * (v9 & 0xFFFFFFFE));
  v14 = a6[4];
  v13 = a6[5];
  v15 = a8[1];
  v16 = (_WORD *)(a7[1] + v15 * v13 + 4 * v14);
  v17 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v17 >= a6[2])
    v17 = a6[2];
  if (v10 >= a6[3])
    v10 = a6[3];
  if (v10)
  {
    v18 = 0;
    v19 = *a8;
    v20 = a8[2];
    v21 = a7[2] + v20 * v13;
    v22 = *a7 + *a8 * v13;
    v23 = *a4;
    v24 = v21 + 2 * v14;
    v25 = v22 + 2 * v14;
    v26 = *a3 + v23 * v8 + 2 * (v9 & 0xFFFFFFFE);
    do
    {
      if (v17)
      {
        for (i = 0; i != v17; ++i)
        {
          *(_WORD *)(v24 + 2 * i) = -1;
          *(_WORD *)(v25 + 2 * i) = *(_WORD *)(v26 + 2 * i) & 0xFFF0;
        }
      }
      v26 += v23;
      v25 += v19;
      v24 += v20;
      ++v18;
    }
    while (v18 != v10);
  }
  v28 = v8 & 1;
  if (v10 >= v28)
    v29 = v8 & 1;
  else
    v29 = 0;
  v30 = v9;
  v31 = v17 >> 1;
  v32 = v9 & 1;
  if (v17 >> 1 >= (v17 - v32) >> 1)
    v31 = (v17 - v32) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v30 & 1) != 0)
    {
      v33 = v12 + 2;
      v40 = v12[1] & 0xFFF0;
      *v16 = *v12 & 0xFFF0;
      v16[1] = v40;
      v34 = v16 + 2;
      if (v31)
      {
LABEL_19:
        v35 = -(uint64_t)v31;
        do
        {
          v36 = *v33;
          v37 = v33[1];
          v33 += 2;
          *v34 = v36 & 0xFFF0;
          v34[1] = v37 & 0xFFF0;
          v34 += 2;
          v38 = __CFADD__(v35++, 1);
        }
        while (!v38);
        v39 = 2 * v31;
        goto LABEL_25;
      }
    }
    else
    {
      v33 = v12;
      v34 = v16;
      if (v31)
        goto LABEL_19;
    }
    v39 = 0;
LABEL_25:
    if ((v39 | (unint64_t)v32) < v17)
    {
      v41 = *v33 & 0xFFF0;
      v42 = v33[1] & 0xFFF0;
      *v34 = v41;
      v34[1] = v42;
    }
    v12 = (__int16 *)((char *)v12 + v11);
    v16 = (_WORD *)((char *)v16 + v15);
  }
  if (v10 == v29)
  {
    v43 = 0;
  }
  else
  {
    v44 = 0;
    v43 = v10 - v29;
    do
    {
      v45 = v12;
      v46 = (int16x4_t *)v16;
      if ((v30 & 1) != 0)
      {
        v45 = v12 + 2;
        v47 = v12[1] & 0xFFF0;
        *v16 = *v12 & 0xFFF0;
        v16[1] = v47;
        v46 = (int16x4_t *)(v16 + 2);
      }
      if (v31)
      {
        v48 = -(uint64_t)v31;
        do
        {
          v49 = v45 + 2;
          v50.i32[0] = *v45 & 0xFFF0;
          v50.i32[1] = v45[1] & 0xFFF0;
          *v46++ = vuzp1_s16(v50, v50);
          v45 += 2;
          v38 = __CFADD__(v48++, 1);
        }
        while (!v38);
      }
      else
      {
        v49 = v45;
      }
      if ((v32 | (2 * v31)) < v17)
      {
        v51 = *v49 & 0xFFF0;
        v52 = v49[1] & 0xFFF0;
        v46->i16[0] = v51;
        v46->i16[1] = v52;
      }
      v12 = (__int16 *)((char *)v12 + v11);
      v16 = (_WORD *)((char *)v16 + v15);
      ++v44;
    }
    while (v44 != v43);
  }
  if (v43 + v28 < v10)
  {
    if ((v30 & 1) != 0)
    {
      v53 = *v12;
      v54 = v12[1];
      v12 += 2;
      *v16 = v53 & 0xFFF0;
      v16[1] = v54 & 0xFFF0;
      v16 += 2;
    }
    if (v31)
    {
      v55 = -(uint64_t)v31;
      do
      {
        v56 = *v12;
        v57 = v12[1];
        v12 += 2;
        *v16 = v56 & 0xFFF0;
        v16[1] = v57 & 0xFFF0;
        v16 += 2;
        v38 = __CFADD__(v55++, 1);
      }
      while (!v38);
      v58 = 2 * v31;
    }
    else
    {
      v58 = 0;
    }
    if ((v58 | (unint64_t)v32) < v17)
    {
      v59 = *v12 & 0xFFF0;
      v60 = v12[1] & 0xFFF0;
      *v16 = v59;
      v16[1] = v60;
    }
  }
  return 0;
}

uint64_t vt_Copy_sv22_t2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  _WORD *v36;
  _WORD *v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  BOOL v41;
  unint64_t v42;
  uint64_t v43;
  _WORD *v44;
  _WORD *v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  __int16 v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (_WORD *)(a3[1] + v13 * v12 + ((2 * (v10 + v9)) & 0xFFFFFFFFFFFFFFFCLL));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  if (v11 - (v10 + v9) >= (unint64_t)(v17 - v16))
    v22 = v17 - v16;
  else
    v22 = v11 - (v10 + v9);
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = a8[2];
    v27 = a7[2] + v26 * v18 + v19;
    v28 = *a7 + *a8 * v18 + v19;
    v29 = *a3 + v24 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          *(_WORD *)(v27 + 2 * i) = -1;
          *(_WORD *)(v28 + 2 * i) = *(_WORD *)(v29 + 2 * i) & 0xFFF0;
        }
      }
      v29 += v24;
      v28 += v25;
      v27 += v26;
      ++v23;
    }
    while (v23 != v8);
  }
  v31 = v12 & 1;
  if (v8 >= v31)
    v32 = v12 & 1;
  else
    v32 = 0;
  v33 = v9;
  v34 = v22 >> 1;
  v35 = (v22 - v10) >> 1;
  if (v34 >= v35)
    v34 = v35;
  if ((v12 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v36 = v14 + 2;
      v38 = v14[1] & 0xFFF0;
      *v21 = *v14 & 0xFFF0;
      v21[1] = v38;
      v37 = v21 + 2;
      if (!v34)
      {
LABEL_25:
        v14 = (_WORD *)((char *)v14 + v13);
        v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_26;
      }
    }
    else
    {
      v36 = v14;
      v37 = v21;
      if (!v34)
        goto LABEL_25;
    }
    v39 = -(uint64_t)v34;
    do
    {
      v40 = v36[1] & 0xFFF0;
      *v37 = *v36 & 0xFFF0;
      v37[1] = v40;
      v36 += 2;
      v37 += 2;
      v41 = __CFADD__(v39++, 1);
    }
    while (!v41);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v32)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v8 - v32;
    do
    {
      v44 = v14;
      v45 = v21;
      if ((v33 & 1) != 0)
      {
        v44 = v14 + 2;
        v46 = v14[1] & 0xFFF0;
        *v21 = *v14 & 0xFFF0;
        v21[1] = v46;
        v45 = v21 + 2;
      }
      if (v34)
      {
        v47 = -(uint64_t)v34;
        do
        {
          v48 = v44[1] & 0xFFF0;
          *v45 = *v44 & 0xFFF0;
          v45[1] = v48;
          v44 += 2;
          v45 += 2;
          v41 = __CFADD__(v47++, 1);
        }
        while (!v41);
      }
      v14 = (_WORD *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v31 < v8)
  {
    if ((v33 & 1) != 0)
    {
      v49 = *v14;
      v50 = v14[1];
      v14 += 2;
      *v21 = v49 & 0xFFF0;
      v21[1] = v50 & 0xFFF0;
      v21 += 2;
    }
    if (v34)
    {
      v51 = -(uint64_t)v34;
      do
      {
        v52 = v14[1] & 0xFFF0;
        *v21 = *v14 & 0xFFF0;
        v21[1] = v52;
        v14 += 2;
        v21 += 2;
        v41 = __CFADD__(v51++, 1);
      }
      while (!v41);
    }
  }
  return 0;
}

uint64_t vt_Copy_sv22_x4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int16 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  unint64_t v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  __int16 *v33;
  _WORD *v34;
  uint64_t v35;
  __int16 v36;
  __int16 v37;
  BOOL v38;
  uint64_t v39;
  __int16 v40;
  __int16 v41;
  __int16 v42;
  unint64_t v43;
  uint64_t v44;
  __int16 *v45;
  int16x4_t *v46;
  __int16 v47;
  uint64_t v48;
  __int16 *v49;
  int16x4_t v50;
  __int16 v51;
  __int16 v52;
  __int16 v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  __int16 v57;
  uint64_t v58;
  __int16 v59;
  __int16 v60;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[3];
  v11 = a4[1];
  v12 = (__int16 *)(a3[1] + v11 * v8 + 2 * (v9 & 0xFFFFFFFE));
  v14 = a6[4];
  v13 = a6[5];
  v15 = a8[1];
  v16 = (_WORD *)(a7[1] + v15 * v13 + 4 * v14);
  v17 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v17 >= a6[2])
    v17 = a6[2];
  if (v10 >= a6[3])
    v10 = a6[3];
  if (v10)
  {
    v18 = 0;
    v19 = *a8;
    v20 = a8[2];
    v21 = a7[2] + v20 * v13;
    v22 = *a7 + *a8 * v13;
    v23 = *a4;
    v24 = v21 + 2 * v14;
    v25 = v22 + 2 * v14;
    v26 = *a3 + v23 * v8 + 2 * (v9 & 0xFFFFFFFE);
    do
    {
      if (v17)
      {
        for (i = 0; i != v17; ++i)
        {
          *(_WORD *)(v24 + 2 * i) = -1;
          *(_WORD *)(v25 + 2 * i) = *(_WORD *)(v26 + 2 * i) & 0xFFC0;
        }
      }
      v26 += v23;
      v25 += v19;
      v24 += v20;
      ++v18;
    }
    while (v18 != v10);
  }
  v28 = v8 & 1;
  if (v10 >= v28)
    v29 = v8 & 1;
  else
    v29 = 0;
  v30 = v9;
  v31 = v17 >> 1;
  v32 = v9 & 1;
  if (v17 >> 1 >= (v17 - v32) >> 1)
    v31 = (v17 - v32) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v30 & 1) != 0)
    {
      v33 = v12 + 2;
      v40 = v12[1] & 0xFFC0;
      *v16 = *v12 & 0xFFC0;
      v16[1] = v40;
      v34 = v16 + 2;
      if (v31)
      {
LABEL_19:
        v35 = -(uint64_t)v31;
        do
        {
          v36 = *v33;
          v37 = v33[1];
          v33 += 2;
          *v34 = v36 & 0xFFC0;
          v34[1] = v37 & 0xFFC0;
          v34 += 2;
          v38 = __CFADD__(v35++, 1);
        }
        while (!v38);
        v39 = 2 * v31;
        goto LABEL_25;
      }
    }
    else
    {
      v33 = v12;
      v34 = v16;
      if (v31)
        goto LABEL_19;
    }
    v39 = 0;
LABEL_25:
    if ((v39 | (unint64_t)v32) < v17)
    {
      v41 = *v33 & 0xFFC0;
      v42 = v33[1] & 0xFFC0;
      *v34 = v41;
      v34[1] = v42;
    }
    v12 = (__int16 *)((char *)v12 + v11);
    v16 = (_WORD *)((char *)v16 + v15);
  }
  if (v10 == v29)
  {
    v43 = 0;
  }
  else
  {
    v44 = 0;
    v43 = v10 - v29;
    do
    {
      v45 = v12;
      v46 = (int16x4_t *)v16;
      if ((v30 & 1) != 0)
      {
        v45 = v12 + 2;
        v47 = v12[1] & 0xFFC0;
        *v16 = *v12 & 0xFFC0;
        v16[1] = v47;
        v46 = (int16x4_t *)(v16 + 2);
      }
      if (v31)
      {
        v48 = -(uint64_t)v31;
        do
        {
          v49 = v45 + 2;
          v50.i32[0] = *v45 & 0xFFC0;
          v50.i32[1] = v45[1] & 0xFFC0;
          *v46++ = vuzp1_s16(v50, v50);
          v45 += 2;
          v38 = __CFADD__(v48++, 1);
        }
        while (!v38);
      }
      else
      {
        v49 = v45;
      }
      if ((v32 | (2 * v31)) < v17)
      {
        v51 = *v49 & 0xFFC0;
        v52 = v49[1] & 0xFFC0;
        v46->i16[0] = v51;
        v46->i16[1] = v52;
      }
      v12 = (__int16 *)((char *)v12 + v11);
      v16 = (_WORD *)((char *)v16 + v15);
      ++v44;
    }
    while (v44 != v43);
  }
  if (v43 + v28 < v10)
  {
    if ((v30 & 1) != 0)
    {
      v53 = *v12;
      v54 = v12[1];
      v12 += 2;
      *v16 = v53 & 0xFFC0;
      v16[1] = v54 & 0xFFC0;
      v16 += 2;
    }
    if (v31)
    {
      v55 = -(uint64_t)v31;
      do
      {
        v56 = *v12;
        v57 = v12[1];
        v12 += 2;
        *v16 = v56 & 0xFFC0;
        v16[1] = v57 & 0xFFC0;
        v16 += 2;
        v38 = __CFADD__(v55++, 1);
      }
      while (!v38);
      v58 = 2 * v31;
    }
    else
    {
      v58 = 0;
    }
    if ((v58 | (unint64_t)v32) < v17)
    {
      v59 = *v12 & 0xFFC0;
      v60 = v12[1] & 0xFFC0;
      *v16 = v59;
      v16[1] = v60;
    }
  }
  return 0;
}

uint64_t vt_Copy_sv22_x2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  _WORD *v36;
  _WORD *v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  BOOL v41;
  unint64_t v42;
  uint64_t v43;
  _WORD *v44;
  _WORD *v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  __int16 v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a4[1];
  v14 = (_WORD *)(a3[1] + v13 * v12 + ((2 * (v10 + v9)) & 0xFFFFFFFFFFFFFFFCLL));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = 2 * v16;
  v20 = a8[1];
  v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  if (v11 - (v10 + v9) >= (unint64_t)(v17 - v16))
    v22 = v17 - v16;
  else
    v22 = v11 - (v10 + v9);
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = a8[2];
    v27 = a7[2] + v26 * v18 + v19;
    v28 = *a7 + *a8 * v18 + v19;
    v29 = *a3 + v24 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          *(_WORD *)(v27 + 2 * i) = -1;
          *(_WORD *)(v28 + 2 * i) = *(_WORD *)(v29 + 2 * i) & 0xFFC0;
        }
      }
      v29 += v24;
      v28 += v25;
      v27 += v26;
      ++v23;
    }
    while (v23 != v8);
  }
  v31 = v12 & 1;
  if (v8 >= v31)
    v32 = v12 & 1;
  else
    v32 = 0;
  v33 = v9;
  v34 = v22 >> 1;
  v35 = (v22 - v10) >> 1;
  if (v34 >= v35)
    v34 = v35;
  if ((v12 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v36 = v14 + 2;
      v38 = v14[1] & 0xFFC0;
      *v21 = *v14 & 0xFFC0;
      v21[1] = v38;
      v37 = v21 + 2;
      if (!v34)
      {
LABEL_25:
        v14 = (_WORD *)((char *)v14 + v13);
        v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_26;
      }
    }
    else
    {
      v36 = v14;
      v37 = v21;
      if (!v34)
        goto LABEL_25;
    }
    v39 = -(uint64_t)v34;
    do
    {
      v40 = v36[1] & 0xFFC0;
      *v37 = *v36 & 0xFFC0;
      v37[1] = v40;
      v36 += 2;
      v37 += 2;
      v41 = __CFADD__(v39++, 1);
    }
    while (!v41);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v32)
  {
    v42 = 0;
  }
  else
  {
    v43 = 0;
    v42 = v8 - v32;
    do
    {
      v44 = v14;
      v45 = v21;
      if ((v33 & 1) != 0)
      {
        v44 = v14 + 2;
        v46 = v14[1] & 0xFFC0;
        *v21 = *v14 & 0xFFC0;
        v21[1] = v46;
        v45 = v21 + 2;
      }
      if (v34)
      {
        v47 = -(uint64_t)v34;
        do
        {
          v48 = v44[1] & 0xFFC0;
          *v45 = *v44 & 0xFFC0;
          v45[1] = v48;
          v44 += 2;
          v45 += 2;
          v41 = __CFADD__(v47++, 1);
        }
        while (!v41);
      }
      v14 = (_WORD *)((char *)v14 + v13);
      v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v31 < v8)
  {
    if ((v33 & 1) != 0)
    {
      v49 = *v14;
      v50 = v14[1];
      v14 += 2;
      *v21 = v49 & 0xFFC0;
      v21[1] = v50 & 0xFFC0;
      v21 += 2;
    }
    if (v34)
    {
      v51 = -(uint64_t)v34;
      do
      {
        v52 = v14[1] & 0xFFC0;
        *v21 = *v14 & 0xFFC0;
        v21[1] = v52;
        v14 += 2;
        v21 += 2;
        v41 = __CFADD__(v51++, 1);
      }
      while (!v41);
    }
  }
  return 0;
}

uint64_t vt_Copy_sv22_v4a8(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  char v38;
  char v39;
  BOOL v40;
  uint64_t v41;
  char v42;
  char v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  char v49;
  uint64_t v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  uint64_t v57;
  char v58;
  char v59;
  uint64_t v60;
  char v61;
  char v62;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[3];
  v11 = a4[1];
  v12 = a3[1] + v11 * v8 + 2 * (v9 & 0xFFFFFFFE);
  v14 = a6[4];
  v13 = a6[5];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a8[1];
  v18 = (_BYTE *)(a7[1] + v17 * v13 + 2 * v14);
  v19 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v19 >= v16)
    v19 = v16;
  if (v10 >= v15)
    v10 = v15;
  if (v10)
  {
    v20 = 0;
    v21 = *a8;
    v22 = a8[2];
    v23 = a7[2] + v22 * v13;
    v24 = *a7 + *a8 * v13;
    v25 = *a4;
    v26 = v23 + v14;
    v27 = v24 + v14;
    v28 = *a3 + v25 * v8 + 2 * (a2[4] & 0xFFFFFFFELL);
    do
    {
      if (v19)
      {
        for (i = 0; i != v19; ++i)
        {
          *(_BYTE *)(v26 + i) = -1;
          *(_BYTE *)(v27 + i) = *(_BYTE *)(v28 + 2 * i + 1);
        }
      }
      v28 += v25;
      v27 += v21;
      v26 += v22;
      ++v20;
    }
    while (v20 != v10);
    v9 = a2[4];
    v8 = a2[5];
  }
  v30 = v8 & 1;
  if (v10 >= v30)
    v31 = v8 & 1;
  else
    v31 = 0;
  v32 = v9;
  v33 = v19 >> 1;
  v34 = v9 & 1;
  if (v19 >> 1 >= (v19 - v34) >> 1)
    v33 = (v19 - v34) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v32 & 1) != 0)
    {
      v42 = *(_BYTE *)(v12 + 3);
      v35 = v12 + 4;
      *v18 = *(_BYTE *)(v12 + 1);
      v18[1] = v42;
      v36 = v18 + 2;
      if (v33)
      {
LABEL_20:
        v37 = -(uint64_t)v33;
        do
        {
          v38 = *(_BYTE *)(v35 + 1);
          v39 = *(_BYTE *)(v35 + 3);
          v35 += 4;
          *v36 = v38;
          v36[1] = v39;
          v36 += 2;
          v40 = __CFADD__(v37++, 1);
        }
        while (!v40);
        v41 = 2 * v33;
        goto LABEL_26;
      }
    }
    else
    {
      v35 = v12;
      v36 = v18;
      if (v33)
        goto LABEL_20;
    }
    v41 = 0;
LABEL_26:
    if ((v41 | (unint64_t)v34) < v19)
    {
      v43 = *(_BYTE *)(v35 + 1);
      v44 = *(_BYTE *)(v35 + 3);
      *v36 = v43;
      v36[1] = v44;
    }
    v12 += v11;
    v18 += v17;
  }
  if (v10 == v31)
  {
    v45 = 0;
  }
  else
  {
    v46 = 0;
    v45 = v10 - v31;
    do
    {
      v47 = v12;
      v48 = v18;
      if ((v32 & 1) != 0)
      {
        v49 = *(_BYTE *)(v12 + 3);
        v47 = v12 + 4;
        *v18 = *(_BYTE *)(v12 + 1);
        v18[1] = v49;
        v48 = v18 + 2;
      }
      if (v33)
      {
        v50 = -(uint64_t)v33;
        do
        {
          v51 = *(_BYTE *)(v47 + 1);
          v52 = *(_BYTE *)(v47 + 3);
          v47 += 4;
          *v48 = v51;
          v48[1] = v52;
          v48[2] = v51;
          v48[3] = v52;
          v48 += 4;
          v40 = __CFADD__(v50++, 1);
        }
        while (!v40);
      }
      if ((v34 | (2 * v33)) < v19)
      {
        v53 = *(_BYTE *)(v47 + 1);
        v54 = *(_BYTE *)(v47 + 3);
        *v48 = v53;
        v48[1] = v54;
      }
      v12 += v11;
      v18 += v17;
      ++v46;
    }
    while (v46 != v45);
  }
  if (v45 + v30 < v10)
  {
    if ((v32 & 1) != 0)
    {
      v55 = *(_BYTE *)(v12 + 1);
      v56 = *(_BYTE *)(v12 + 3);
      v12 += 4;
      *v18 = v55;
      v18[1] = v56;
      v18 += 2;
    }
    if (v33)
    {
      v57 = -(uint64_t)v33;
      do
      {
        v58 = *(_BYTE *)(v12 + 1);
        v59 = *(_BYTE *)(v12 + 3);
        v12 += 4;
        *v18 = v58;
        v18[1] = v59;
        v18 += 2;
        v40 = __CFADD__(v57++, 1);
      }
      while (!v40);
      v60 = 2 * v33;
    }
    else
    {
      v60 = 0;
    }
    if ((v60 | (unint64_t)v34) < v19)
    {
      v61 = *(_BYTE *)(v12 + 1);
      v62 = *(_BYTE *)(v12 + 3);
      *v18 = v61;
      v18[1] = v62;
    }
  }
  return 0;
}

uint64_t vt_Copy_sv22_v2a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _BYTE *v36;
  char v37;
  uint64_t v38;
  char v39;
  BOOL v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _BYTE *v44;
  char v45;
  uint64_t v46;
  char v47;
  char v48;
  char v49;
  uint64_t v50;
  char v51;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 & 1;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = 2 * (v10 + v9);
  v13 = a4[1];
  v14 = a3[1] + v13 * v11 + (v12 & 0xFFFFFFFFFFFFFFFCLL);
  v15 = *(_QWORD *)(a6 + 24);
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(_QWORD *)(a6 + 40);
  v19 = a8[1];
  v20 = (_BYTE *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  if (v21 >= v17 - v16)
    v21 = v17 - v16;
  if (v8 >= v15)
    v8 = v15;
  if (v8)
  {
    v22 = 0;
    v23 = *a4;
    v24 = *a8;
    v25 = a8[2];
    v26 = a7[2] + v25 * v18 + v16;
    v27 = *a7 + *a8 * v18 + v16;
    v28 = *a3 + v23 * v11 + v12;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
        {
          *(_BYTE *)(v26 + i) = -1;
          *(_BYTE *)(v27 + i) = *(_BYTE *)(v28 + 2 * i + 1);
        }
      }
      v28 += v23;
      v27 += v24;
      v26 += v25;
      ++v22;
    }
    while (v22 != v8);
    v9 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40);
    v10 = v9 & 1;
  }
  v30 = v11 & 1;
  if (v8 >= v30)
    v31 = v11 & 1;
  else
    v31 = 0;
  v32 = v21 >> 1;
  v33 = v21 - v10;
  if (v32 >= v33 >> 1)
    v34 = v33 >> 1;
  else
    v34 = v32;
  if ((v11 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      v37 = *(_BYTE *)(v14 + 3);
      v35 = v14 + 4;
      *v20 = *(_BYTE *)(v14 + 1);
      v20[1] = v37;
      v36 = v20 + 2;
      if (!v34)
      {
LABEL_26:
        v14 += v13;
        v20 += v19;
        goto LABEL_27;
      }
    }
    else
    {
      v35 = v14;
      v36 = v20;
      if (!v34)
        goto LABEL_26;
    }
    v38 = -(uint64_t)v34;
    do
    {
      v39 = *(_BYTE *)(v35 + 3);
      *v36 = *(_BYTE *)(v35 + 1);
      v36[1] = v39;
      v36 += 2;
      v35 += 4;
      v40 = __CFADD__(v38++, 1);
    }
    while (!v40);
    goto LABEL_26;
  }
LABEL_27:
  if (v8 == v31)
  {
    v41 = 0;
  }
  else
  {
    v42 = 0;
    v41 = v8 - v31;
    do
    {
      v43 = v14;
      v44 = v20;
      if ((v9 & 1) != 0)
      {
        v45 = *(_BYTE *)(v14 + 3);
        v43 = v14 + 4;
        *v20 = *(_BYTE *)(v14 + 1);
        v20[1] = v45;
        v44 = v20 + 2;
      }
      if (v34)
      {
        v46 = -(uint64_t)v34;
        do
        {
          v47 = *(_BYTE *)(v43 + 3);
          *v44 = *(_BYTE *)(v43 + 1);
          v44[1] = v47;
          v44 += 2;
          v43 += 4;
          v40 = __CFADD__(v46++, 1);
        }
        while (!v40);
      }
      v14 += v13;
      v20 += v19;
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v30 < v8)
  {
    if ((v9 & 1) != 0)
    {
      v48 = *(_BYTE *)(v14 + 1);
      v49 = *(_BYTE *)(v14 + 3);
      v14 += 4;
      *v20 = v48;
      v20[1] = v49;
      v20 += 2;
    }
    if (v34)
    {
      v50 = -(uint64_t)v34;
      do
      {
        v51 = *(_BYTE *)(v14 + 3);
        *v20 = *(_BYTE *)(v14 + 1);
        v20[1] = v51;
        v20 += 2;
        v14 += 4;
        v40 = __CFADD__(v50++, 1);
      }
      while (!v40);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sv22_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _BYTE *v41;
  unsigned int v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  _BYTE *v51;
  unsigned int v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = v8 & 1;
  v12 = v11 + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = 2 * (v10 + v9);
  v15 = a4[1];
  v16 = a3[1] + v15 * (v11 + v8) + (v14 & 0xFFFFFFFFFFFFFFFCLL);
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  v23 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9) < v18 - v17)
    v23 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v24 = v13 - v12;
  if (v13 - v12 >= v20 - v19)
    v24 = v20 - v19;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = v12 >= v8;
    v28 = *a8;
    v29 = a8[2];
    v30 = *a3 + *a4 * v12;
    if (v27)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v14 + v31;
    v33 = a7[2] + v29 * v19 + v17;
    v34 = *a7 + v28 * v19 + v17;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
        {
          *(_BYTE *)(v33 + i) = -1;
          *(_BYTE *)(v34 + i) = *(_BYTE *)(v32 + 2 * i + 1);
        }
      }
      v32 += v26;
      v34 += v28;
      v33 += v29;
      ++v25;
    }
    while (v25 != v24);
    v9 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v9 & 1;
  }
  if (v24 >= v11)
    v36 = v11;
  else
    v36 = 0;
  v37 = v23 >> 1;
  v38 = v23 - v10;
  if (v37 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v37;
  if (v11)
  {
    if ((v9 & 1) != 0)
    {
      v40 = v16 + 4;
      v42 = (*(unsigned __int8 *)(v16 + 3) + *(unsigned __int8 *)(v16 + v15 + 3) + 1) >> 1;
      *v22 = (*(unsigned __int8 *)(v16 + 1) + *(unsigned __int8 *)(v16 + v15 + 1) + 1) >> 1;
      v22[1] = v42;
      v41 = v22 + 2;
      if (!v39)
      {
LABEL_29:
        v16 += 2 * v15;
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      v40 = v16;
      v41 = v22;
      if (!v39)
        goto LABEL_29;
    }
    v43 = -(uint64_t)v39;
    do
    {
      v44 = *(unsigned __int8 *)(v40 + 1);
      v45 = *(unsigned __int8 *)(v40 + 3);
      v46 = *(unsigned __int8 *)(v40 + v15 + 1);
      v47 = *(unsigned __int8 *)(v40 + v15 + 3);
      v40 += 4;
      *v41 = (v44 + v46 + 1) >> 1;
      v41[1] = (v45 + v47 + 1) >> 1;
      v41 += 2;
      v27 = __CFADD__(v43++, 1);
    }
    while (!v27);
    goto LABEL_29;
  }
LABEL_30:
  if (v24 != v36)
  {
    v48 = 0;
    v49 = v24 - v36;
    do
    {
      v50 = v16;
      v51 = v22;
      if ((v9 & 1) != 0)
      {
        v50 = v16 + 4;
        v52 = (*(unsigned __int8 *)(v16 + 3) + *(unsigned __int8 *)(v16 + v15 + 3) + 1) >> 1;
        *v22 = (*(unsigned __int8 *)(v16 + 1) + *(unsigned __int8 *)(v16 + v15 + 1) + 1) >> 1;
        v22[1] = v52;
        v51 = v22 + 2;
      }
      if (v39)
      {
        v53 = -(uint64_t)v39;
        do
        {
          v54 = *(unsigned __int8 *)(v50 + 1);
          v55 = *(unsigned __int8 *)(v50 + 3);
          v56 = *(unsigned __int8 *)(v50 + v15 + 1);
          v57 = *(unsigned __int8 *)(v50 + v15 + 3);
          v50 += 4;
          *v51 = (v54 + v56 + 1) >> 1;
          v51[1] = (v55 + v57 + 1) >> 1;
          v51 += 2;
          v27 = __CFADD__(v53++, 1);
        }
        while (!v27);
      }
      v16 += 2 * v15;
      v22 += v21;
      v48 += 2;
    }
    while (v48 < v49);
  }
  return 0;
}

uint64_t vt_CopyDec_sv22_v0a8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _BYTE *v41;
  char v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _BYTE *v49;
  char v50;
  uint64_t v51;
  char v52;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = v9 & 1;
  v11 = v8 & 1;
  v12 = v11 + v8;
  v13 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v14 = 2 * (v10 + v9);
  v15 = a4[1];
  v16 = a3[1] + v15 * (v11 + v8) + (v14 & 0xFFFFFFFFFFFFFFFCLL);
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v20 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v21 = a8[1];
  v22 = (_BYTE *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  v23 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9) < v18 - v17)
    v23 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE) - (v10 + v9);
  v24 = v13 - v12;
  if (v13 - v12 >= v20 - v19)
    v24 = v20 - v19;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = v12 >= v8;
    v28 = *a8;
    v29 = a8[2];
    v30 = *a3 + *a4 * v12;
    if (v27)
      v31 = 0;
    else
      v31 = *a4;
    v32 = v30 + v14 + v31;
    v33 = a7[2] + v29 * v19 + v17;
    v34 = *a7 + v28 * v19 + v17;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
        {
          *(_BYTE *)(v33 + i) = -1;
          *(_BYTE *)(v34 + i) = *(_BYTE *)(v32 + 2 * i + 1);
        }
      }
      v32 += v26;
      v34 += v28;
      v33 += v29;
      ++v25;
    }
    while (v25 != v24);
    v9 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40) & 1;
    v10 = v9 & 1;
  }
  if (v24 >= v11)
    v36 = v11;
  else
    v36 = 0;
  v37 = v23 >> 1;
  v38 = v23 - v10;
  if (v37 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v37;
  if (v11)
  {
    if ((v9 & 1) != 0)
    {
      v42 = *(_BYTE *)(v16 + 3);
      v40 = v16 + 4;
      *v22 = *(_BYTE *)(v16 + 1);
      v22[1] = v42;
      v41 = v22 + 2;
      if (!v39)
      {
LABEL_29:
        v16 += 2 * v15;
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      v40 = v16;
      v41 = v22;
      if (!v39)
        goto LABEL_29;
    }
    v43 = -(uint64_t)v39;
    do
    {
      v44 = *(_BYTE *)(v40 + 3);
      *v41 = *(_BYTE *)(v40 + 1);
      v41[1] = v44;
      v41 += 2;
      v40 += 4;
      v27 = __CFADD__(v43++, 1);
    }
    while (!v27);
    goto LABEL_29;
  }
LABEL_30:
  if (v24 != v36)
  {
    v45 = 0;
    v46 = v24 - v36;
    v47 = 2 * v15;
    do
    {
      v48 = v16;
      v49 = v22;
      if ((v9 & 1) != 0)
      {
        v50 = *(_BYTE *)(v16 + 3);
        v48 = v16 + 4;
        *v22 = *(_BYTE *)(v16 + 1);
        v22[1] = v50;
        v49 = v22 + 2;
      }
      if (v39)
      {
        v51 = -(uint64_t)v39;
        do
        {
          v52 = *(_BYTE *)(v48 + 3);
          *v49 = *(_BYTE *)(v48 + 1);
          v49[1] = v52;
          v49 += 2;
          v48 += 4;
          v27 = __CFADD__(v51++, 1);
        }
        while (!v27);
      }
      v16 += v47;
      v22 += v21;
      v45 += 2;
    }
    while (v45 < v46);
  }
  return 0;
}

uint64_t vt_Copy_sv20_y416(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  __int16 v23;
  __int16 *v24;
  __int16 v25;
  _WORD *v26;

  v8 = a2[4] & 0xFFFFFFFELL;
  v9 = a2[5] & 0xFFFFFFFELL;
  v11 = a2[2] + a2[4] - v8 + ((a2[2] + a2[4]) & 1);
  if (v11 >= a6[2])
    v11 = a6[2];
  v10 = a2[3] + a2[5];
  v12 = v10 - v9 + (v10 & 1);
  if (v12 >= a6[3])
    v12 = a6[3];
  if (v12)
  {
    v13 = 0;
    v14 = *a4;
    v15 = a4[1];
    v16 = *a8;
    v17 = *a7 + *a8 * a6[5] + 2 * a6[4];
    v18 = a3[1] + v15 * (v9 >> 1) + 2 * v8;
    v19 = *a3 + *a4 * v9 + 2 * v8;
    do
    {
      if (v11)
      {
        v20 = 0;
        v21 = 0;
        v22 = 0;
        v23 = 0;
        v24 = (__int16 *)v18;
        do
        {
          if ((v21 & 1) == 0)
          {
            v23 = *v24;
            v22 = v24[1];
            v24 += 2;
          }
          v25 = *(_WORD *)(v19 + 2 * v21);
          v26 = (_WORD *)(v17 + v20);
          *v26 = -1;
          v26[1] = v25;
          v26[2] = v23;
          v26[3] = v22;
          ++v21;
          v20 += 8;
        }
        while (v11 != v21);
      }
      v19 += v14;
      v17 += v16;
      v18 += (v13++ << 63 >> 63) & v15;
    }
    while (v13 != v12);
  }
  return 0;
}

uint64_t vt_Copy_sv20_y408(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  char v25;
  _BYTE *v26;

  v8 = a2[4] & 0xFFFFFFFELL;
  v9 = a2[5] & 0xFFFFFFFELL;
  v11 = a2[2] + a2[4] - v8 + ((a2[2] + a2[4]) & 1);
  if (v11 >= a6[2])
    v11 = a6[2];
  v10 = a2[3] + a2[5];
  v12 = v10 - v9 + (v10 & 1);
  if (v12 >= a6[3])
    v12 = a6[3];
  if (v12)
  {
    v13 = 0;
    v14 = *a4;
    v15 = a4[1];
    v16 = *a8;
    v17 = *a7 + *a8 * a6[5] + a6[4];
    v18 = a3[1] + v15 * (v9 >> 1) + 2 * v8;
    v19 = *a3 + *a4 * v9 + 2 * v8;
    do
    {
      if (v11)
      {
        v20 = 0;
        v21 = 0;
        v22 = 0;
        v23 = 0;
        v24 = v18;
        do
        {
          if ((v21 & 1) == 0)
          {
            v23 = *(_BYTE *)(v24 + 1);
            v22 = *(_BYTE *)(v24 + 3);
            v24 += 4;
          }
          v25 = *(_BYTE *)(v19 + 2 * v21 + 1);
          v26 = (_BYTE *)(v17 + v20);
          *v26 = -1;
          v26[1] = v25;
          v26[2] = v23;
          v26[3] = v22;
          ++v21;
          v20 += 4;
        }
        while (v11 != v21);
      }
      v19 += v14;
      v17 += v16;
      v18 += (v13++ << 63 >> 63) & v15;
    }
    while (v13 != v12);
  }
  return 0;
}

uint64_t vt_Copy_sv20_v216(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t i;
  __int16 *v23;
  __int16 *v24;
  __int16 v25;
  __int16 v26;
  _WORD *v27;

  v8 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40) & 0xFFFFFFFELL;
  v11 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v12 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v8;
  if (v12 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v11)
    v12 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v11;
  v10 = *(_QWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40);
  v13 = v10 - v9 + (v10 & 1);
  if (v13 >= *(_QWORD *)(a6 + 24))
    v13 = *(_QWORD *)(a6 + 24);
  if (v13)
  {
    v14 = 0;
    v15 = *a4;
    v16 = a4[1];
    v17 = *a8;
    v18 = *a7 + *a8 * *(_QWORD *)(a6 + 40) + 2 * v11;
    v19 = a3[1] + v16 * (v9 >> 1) + ((2 * v8) & 0xFFFFFFFFFFFFFFFCLL);
    v20 = *a3 + *a4 * v9 + 2 * v8;
    do
    {
      if (v12)
      {
        v21 = 0;
        for (i = 0; i < v12; i += 2)
        {
          v23 = (__int16 *)(v19 + 2 * i);
          v24 = (__int16 *)(v20 + 2 * i);
          v25 = *v23;
          LOWORD(v23) = v23[1];
          v26 = *v24;
          LOWORD(v24) = v24[1];
          v27 = (_WORD *)(v18 + v21);
          *v27 = v25;
          v27[1] = v26;
          v27[2] = (_WORD)v23;
          v27[3] = (_WORD)v24;
          v21 += 8;
        }
      }
      v20 += v15;
      v18 += v17;
      v19 += (v14++ << 63 >> 63) & v16;
    }
    while (v14 != v13);
  }
  return 0;
}

uint64_t vt_Copy_sv20_2vuy(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  char v26;

  v8 = (*(_QWORD *)(a2 + 32) & 1) + *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40) & 0xFFFFFFFELL;
  v11 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v12 = ((*(_DWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)) & 0xFFFFFFFE) - v8;
  if (v12 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v11)
    v12 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v11;
  v10 = *(_QWORD *)(a2 + 24) + *(_QWORD *)(a2 + 40);
  v13 = v10 - v9 + (v10 & 1);
  if (v13 >= *(_QWORD *)(a6 + 24))
    v13 = *(_QWORD *)(a6 + 24);
  if (v13)
  {
    v14 = 0;
    v15 = *a4;
    v16 = a4[1];
    v17 = *a8;
    v18 = (_BYTE *)(*a7 + *a8 * *(_QWORD *)(a6 + 40) + v11);
    v19 = a3[1] + v16 * (v9 >> 1) + ((2 * v8) & 0xFFFFFFFFFFFFFFFCLL);
    v20 = *a3 + *a4 * v9 + 2 * v8;
    do
    {
      if (v12)
      {
        v21 = 0;
        v22 = v18;
        do
        {
          v23 = v19 + 2 * v21;
          v24 = v20 + 2 * v21;
          v25 = *(_BYTE *)(v23 + 1);
          LOBYTE(v23) = *(_BYTE *)(v23 + 3);
          v26 = *(_BYTE *)(v24 + 1);
          LOBYTE(v24) = *(_BYTE *)(v24 + 3);
          *v22 = v25;
          v22[1] = v26;
          v22[2] = v23;
          v22[3] = v24;
          v22 += 4;
          v21 += 2;
        }
        while (v21 < v12);
      }
      v20 += v15;
      v18 += v17;
      v19 += (v14++ << 63 >> 63) & v16;
    }
    while (v14 != v13);
  }
  return 0;
}

uint64_t vt_Copy_sv20_s4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  size_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  int *v37;
  _DWORD *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t i;
  __int16 *v43;
  _WORD *v44;
  __int16 v45;
  __int16 v46;
  _WORD *v47;
  uint64_t v48;
  __int16 v49;
  __int16 v50;
  _WORD *v51;
  __int16 v52;
  __int16 v53;
  _WORD *v54;
  int v55;
  uint64_t v56;
  int v57;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;

  v8 = a2[4];
  v9 = a2[5];
  v10 = v9 & 0xFFFFFFFE;
  v11 = a2[3] + v9;
  v12 = a4[1];
  v13 = a3[1] + v12 * (v9 >> 1) + 2 * (v8 & 0xFFFFFFFE);
  v14 = a6[4];
  v15 = a6[5];
  v16 = a6[3];
  v17 = a8[1];
  v18 = a7[1] + v17 * v15 + 4 * v14;
  if (a2[2] + v8 - (v8 & 0xFFFFFFFE) + ((a2[2] + v8) & 1uLL) >= a6[2])
    v19 = a6[2];
  else
    v19 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  if (v11 - v10 + (v11 & 1) >= v16)
    v20 = v16;
  else
    v20 = v11 - v10 + (v11 & 1);
  if (v20)
  {
    v61 = a4[1];
    v62 = v19;
    v21 = 2 * (v8 & 0xFFFFFFFE);
    v22 = *a3 + *a4 * v10;
    v63 = *a4;
    if (v10 >= v9)
      v23 = 0;
    else
      v23 = *a4;
    v24 = (char *)(v22 + v21 + v23);
    v25 = a8[2];
    v26 = (char *)(a7[2] + v25 * v15 + 2 * v14);
    v27 = *a8;
    v28 = (char *)(*a7 + *a8 * v15 + 2 * v14);
    v29 = 2 * v19;
    v60 = v20;
    v30 = -(uint64_t)v20;
    do
    {
      memcpy(v28, v24, v29);
      memset(v26, 255, v29);
      v24 += v63;
      v28 += v27;
      v26 += v25;
      v31 = __CFADD__(v30++, 1);
    }
    while (!v31);
    v20 = v60;
    v8 = a2[4];
    v9 = a2[5];
    v12 = v61;
    v19 = v62;
  }
  v32 = v9 & 1;
  v33 = (v20 - v32) >> 1;
  if (v20 >> 1 < v33)
    v33 = v20 >> 1;
  v34 = v8;
  v35 = v19 >> 1;
  v36 = v8 & 1;
  if (v19 >> 1 >= (v19 - v36) >> 1)
    v35 = (v19 - v36) >> 1;
  if ((v9 & 1) != 0)
  {
    v37 = (int *)v13;
    if ((v34 & 1) != 0)
    {
      v37 = (int *)(v13 + 4);
      *(_DWORD *)v18 = *(_DWORD *)v13;
      v38 = (_DWORD *)(v18 + 4);
      if (v35)
      {
LABEL_22:
        v39 = -(uint64_t)v35;
        do
        {
          v40 = *v37++;
          *v38++ = v40;
          v31 = __CFADD__(v39++, 1);
        }
        while (!v31);
        v41 = 2 * v35;
        goto LABEL_28;
      }
    }
    else
    {
      v38 = (_DWORD *)v18;
      if (v35)
        goto LABEL_22;
    }
    v41 = 0;
LABEL_28:
    if ((v41 | (unint64_t)v36) < v19)
      *v38 = *v37;
    v13 += v12;
    v18 += v17;
  }
  if (v33)
  {
    for (i = 0; i != v33; ++i)
    {
      v43 = (__int16 *)v13;
      v44 = (_WORD *)v18;
      if ((v34 & 1) != 0)
      {
        v45 = *(_WORD *)v13;
        v46 = *(_WORD *)(v13 + 2);
        v43 = (__int16 *)(v13 + 4);
        *(_WORD *)v18 = *(_WORD *)v13;
        *(_WORD *)(v18 + 2) = v46;
        v47 = (_WORD *)(v18 + v17);
        *v47 = v45;
        v47[1] = v46;
        v44 = (_WORD *)(v18 + 4);
      }
      if (v35)
      {
        v48 = -(uint64_t)v35;
        do
        {
          v49 = *v43;
          v50 = v43[1];
          v43 += 2;
          *v44 = v49;
          v44[1] = v50;
          v44[2] = v49;
          v44[3] = v50;
          v51 = (_WORD *)((char *)v44 + v17);
          *v51 = v49;
          v51[1] = v50;
          v51[2] = v49;
          v51[3] = v50;
          v44 += 4;
          v31 = __CFADD__(v48++, 1);
        }
        while (!v31);
      }
      if ((v36 | (2 * v35)) < v19)
      {
        v52 = *v43;
        v53 = v43[1];
        *v44 = v52;
        v44[1] = v53;
        v54 = (_WORD *)((char *)v44 + v17);
        *v54 = v52;
        v54[1] = v53;
      }
      v13 += v12;
      v18 += 2 * v17;
    }
    v33 *= 2;
  }
  if ((v33 | v32) < v20)
  {
    if ((v34 & 1) != 0)
    {
      v55 = *(_DWORD *)v13;
      v13 += 4;
      *(_DWORD *)v18 = v55;
      v18 += 4;
    }
    if (v35)
    {
      v56 = -(uint64_t)v35;
      do
      {
        v57 = *(_DWORD *)v13;
        v13 += 4;
        *(_DWORD *)v18 = v57;
        v18 += 4;
        v31 = __CFADD__(v56++, 1);
      }
      while (!v31);
      v35 *= 2;
    }
    if ((v35 | v36) < v19)
      *(_DWORD *)v18 = *(_DWORD *)v13;
  }
  return 0;
}

uint64_t vt_Copy_sv20_sv44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  size_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  int *v36;
  _DWORD *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t i;
  __int16 *v42;
  _WORD *v43;
  __int16 v44;
  __int16 v45;
  _WORD *v46;
  uint64_t v47;
  __int16 v48;
  __int16 v49;
  _WORD *v50;
  __int16 v51;
  __int16 v52;
  _WORD *v53;
  int v54;
  uint64_t v55;
  int v56;
  unint64_t v59;
  unint64_t v60;

  v8 = a2[4];
  v9 = a2[5];
  v10 = v9 & 0xFFFFFFFE;
  v11 = a2[3] + v9;
  v12 = a4[1];
  v13 = a3[1] + v12 * (v9 >> 1) + 2 * (v8 & 0xFFFFFFFE);
  v14 = a6[4];
  v15 = a6[5];
  v16 = a6[3];
  v17 = a8[1];
  v18 = a7[1] + v17 * v15 + 4 * v14;
  if (a2[2] + v8 - (v8 & 0xFFFFFFFE) + ((a2[2] + v8) & 1uLL) >= a6[2])
    v19 = a6[2];
  else
    v19 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  if (v11 - v10 + (v11 & 1) >= v16)
    v20 = v16;
  else
    v20 = v11 - v10 + (v11 & 1);
  if (v20)
  {
    v59 = v20;
    v21 = *a4;
    v22 = 2 * (v8 & 0xFFFFFFFE);
    v23 = *a8;
    v24 = *a3 + *a4 * v10;
    if (v10 >= v9)
      v25 = 0;
    else
      v25 = *a4;
    v26 = (char *)(v24 + v22 + v25);
    v27 = (char *)(*a7 + v23 * v15 + 2 * v14);
    v60 = v19;
    v28 = 2 * v19;
    v29 = -(uint64_t)v20;
    do
    {
      memcpy(v27, v26, v28);
      v26 += v21;
      v27 += v23;
      v30 = __CFADD__(v29++, 1);
    }
    while (!v30);
    v20 = v59;
    v8 = a2[4];
    v9 = a2[5];
    v19 = v60;
  }
  v31 = v9 & 1;
  v32 = (v20 - v31) >> 1;
  if (v20 >> 1 < v32)
    v32 = v20 >> 1;
  v33 = v8;
  v34 = v19 >> 1;
  v35 = v8 & 1;
  if (v19 >> 1 >= (v19 - v35) >> 1)
    v34 = (v19 - v35) >> 1;
  if ((v9 & 1) != 0)
  {
    v36 = (int *)v13;
    if ((v33 & 1) != 0)
    {
      v36 = (int *)(v13 + 4);
      *(_DWORD *)v18 = *(_DWORD *)v13;
      v37 = (_DWORD *)(v18 + 4);
      if (v34)
      {
LABEL_22:
        v38 = -(uint64_t)v34;
        do
        {
          v39 = *v36++;
          *v37++ = v39;
          v30 = __CFADD__(v38++, 1);
        }
        while (!v30);
        v40 = 2 * v34;
        goto LABEL_28;
      }
    }
    else
    {
      v37 = (_DWORD *)v18;
      if (v34)
        goto LABEL_22;
    }
    v40 = 0;
LABEL_28:
    if ((v40 | (unint64_t)v35) < v19)
      *v37 = *v36;
    v13 += v12;
    v18 += v17;
  }
  if (v32)
  {
    for (i = 0; i != v32; ++i)
    {
      v42 = (__int16 *)v13;
      v43 = (_WORD *)v18;
      if ((v33 & 1) != 0)
      {
        v44 = *(_WORD *)v13;
        v45 = *(_WORD *)(v13 + 2);
        v42 = (__int16 *)(v13 + 4);
        *(_WORD *)v18 = *(_WORD *)v13;
        *(_WORD *)(v18 + 2) = v45;
        v46 = (_WORD *)(v18 + v17);
        *v46 = v44;
        v46[1] = v45;
        v43 = (_WORD *)(v18 + 4);
      }
      if (v34)
      {
        v47 = -(uint64_t)v34;
        do
        {
          v48 = *v42;
          v49 = v42[1];
          v42 += 2;
          *v43 = v48;
          v43[1] = v49;
          v43[2] = v48;
          v43[3] = v49;
          v50 = (_WORD *)((char *)v43 + v17);
          *v50 = v48;
          v50[1] = v49;
          v50[2] = v48;
          v50[3] = v49;
          v43 += 4;
          v30 = __CFADD__(v47++, 1);
        }
        while (!v30);
      }
      if ((v35 | (2 * v34)) < v19)
      {
        v51 = *v42;
        v52 = v42[1];
        *v43 = v51;
        v43[1] = v52;
        v53 = (_WORD *)((char *)v43 + v17);
        *v53 = v51;
        v53[1] = v52;
      }
      v13 += v12;
      v18 += 2 * v17;
    }
    v32 *= 2;
  }
  if ((v32 | v31) < v20)
  {
    if ((v33 & 1) != 0)
    {
      v54 = *(_DWORD *)v13;
      v13 += 4;
      *(_DWORD *)v18 = v54;
      v18 += 4;
    }
    if (v34)
    {
      v55 = -(uint64_t)v34;
      do
      {
        v56 = *(_DWORD *)v13;
        v13 += 4;
        *(_DWORD *)v18 = v56;
        v18 += 4;
        v30 = __CFADD__(v55++, 1);
      }
      while (!v30);
      v34 *= 2;
    }
    if ((v34 | v35) < v19)
      *(_DWORD *)v18 = *(_DWORD *)v13;
  }
  return 0;
}

uint64_t vt_Copy_sv20_sf44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _WORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  uint64_t v37;
  unsigned __int16 *v38;
  _WORD *v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  BOOL v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t j;
  unsigned __int16 *v51;
  _WORD *v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  _WORD *v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  unint64_t v62;
  unint64_t v63;
  _WORD *v64;
  unsigned int v65;
  unsigned int v66;
  unint64_t v67;
  unint64_t v68;
  _WORD *v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2] + v9;
  v11 = v8 & 0xFFFFFFFE;
  v12 = a2[3] + v8;
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE));
  v15 = a6[4];
  v16 = a6[5];
  v17 = a6[2];
  v18 = a6[3];
  v19 = a8[1];
  v20 = (_WORD *)(a7[1] + v19 * v16 + 4 * v15);
  v21 = v10 - (v9 & 0xFFFFFFFE) + (v10 & 1);
  if (v21 >= v17)
    v21 = v17;
  if (v12 - v11 + (v12 & 1) >= v18)
    v22 = v18;
  else
    v22 = v12 - v11 + (v12 & 1);
  if (v22)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a3 + *a4 * v11;
    if (v11 >= v8)
      v26 = 0;
    else
      v26 = *a4;
    v27 = 2 * (v9 & 0xFFFFFFFE) + v26;
    v28 = *a8;
    v29 = v25 + v27;
    v30 = *a7 + *a8 * v16 + 2 * v15;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
        {
          v32 = *(unsigned __int16 *)(v29 + 2 * i);
          if (v32 >= 0xEB00)
            v32 = 60160;
          if (v32 <= 0x1000)
            v32 = 4096;
          *(_WORD *)(v30 + 2 * i) = (-268431360 - v32 + (v32 << 16)) / 0xDB00;
        }
      }
      v29 += v24;
      v30 += v28;
      ++v23;
    }
    while (v23 != v22);
  }
  v33 = v8 & 1;
  v34 = (v22 - v33) >> 1;
  if (v22 >> 1 < v34)
    v34 = v22 >> 1;
  v35 = v9;
  v36 = v21 >> 1;
  v37 = v9 & 1;
  if (v21 >> 1 >= (v21 - v37) >> 1)
    v36 = (v21 - v37) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v35 & 1) != 0)
    {
      v45 = *v14;
      v46 = v14[1];
      if (v45 >= 0xF000)
        v45 = 61440;
      if (v45 <= 0x1000)
        v45 = 4096;
      if (v46 >= 0xF000)
        v46 = 61440;
      if (v46 <= 0x1000)
        v47 = 4096;
      else
        v47 = v46;
      v38 = v14 + 2;
      *v20 = (613566757 * (unint64_t)((-268431360 - v45 + (v45 << 16)) >> 13)) >> 32;
      v20[1] = (613566757 * (unint64_t)((-268431360 - v47 + (v47 << 16)) >> 13)) >> 32;
      v39 = v20 + 2;
      if (v36)
        goto LABEL_26;
    }
    else
    {
      v38 = v14;
      v39 = v20;
      if (v36)
      {
LABEL_26:
        v40 = -(uint64_t)v36;
        do
        {
          v41 = *v38;
          v42 = v38[1];
          if (v41 >= 0xF000)
            v41 = 61440;
          if (v41 <= 0x1000)
            v41 = 4096;
          if (v42 >= 0xF000)
            v42 = 61440;
          if (v42 <= 0x1000)
            v42 = 4096;
          v38 += 2;
          *v39 = (613566757 * (unint64_t)((-268431360 - v41 + (v41 << 16)) >> 13)) >> 32;
          v39[1] = (613566757 * (unint64_t)((-268431360 - v42 + (v42 << 16)) >> 13)) >> 32;
          v39 += 2;
          v43 = __CFADD__(v40++, 1);
        }
        while (!v43);
        v44 = 2 * v36;
        goto LABEL_49;
      }
    }
    v44 = 0;
LABEL_49:
    if ((v44 | (unint64_t)v37) < v21)
    {
      v48 = *v38;
      v49 = v38[1];
      if (v48 >= 0xF000)
        v48 = 61440;
      if (v48 <= 0x1000)
        v48 = 4096;
      if (v49 >= 0xF000)
        v49 = 61440;
      if (v49 <= 0x1000)
        v49 = 4096;
      *v39 = (613566757 * (unint64_t)((-268431360 - v48 + (v48 << 16)) >> 13)) >> 32;
      v39[1] = (613566757 * (unint64_t)((-268431360 - v49 + (v49 << 16)) >> 13)) >> 32;
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v34)
  {
    for (j = 0; j != v34; ++j)
    {
      v51 = v14;
      v52 = v20;
      if ((v35 & 1) != 0)
      {
        v53 = *v14;
        v54 = v14[1];
        if (v53 >= 0xF000)
          v53 = 61440;
        if (v53 <= 0x1000)
          v53 = 4096;
        if (v54 >= 0xF000)
          v54 = 61440;
        if (v54 <= 0x1000)
          v55 = 4096;
        else
          v55 = v54;
        v51 = v14 + 2;
        v56 = (613566757 * (unint64_t)((-268431360 - v53 + (v53 << 16)) >> 13)) >> 32;
        v57 = (613566757 * (unint64_t)((-268431360 - v55 + (v55 << 16)) >> 13)) >> 32;
        *v20 = v56;
        v20[1] = v57;
        v58 = (_WORD *)((char *)v20 + v19);
        *v58 = v56;
        v58[1] = v57;
        v52 = v20 + 2;
      }
      if (v36)
      {
        v59 = -(uint64_t)v36;
        do
        {
          v60 = *v51;
          v61 = v51[1];
          if (v60 >= 0xF000)
            v60 = 61440;
          if (v60 <= 0x1000)
            v60 = 4096;
          if (v61 >= 0xF000)
            v61 = 61440;
          if (v61 <= 0x1000)
            v61 = 4096;
          v62 = (613566757 * (unint64_t)((-268431360 - v60 + (v60 << 16)) >> 13)) >> 32;
          *v52 = v62;
          v63 = (613566757 * (unint64_t)((-268431360 - v61 + (v61 << 16)) >> 13)) >> 32;
          v52[1] = v63;
          v52[2] = v62;
          v52[3] = v63;
          v64 = (_WORD *)((char *)v52 + v19);
          *v64 = v62;
          v64[1] = v63;
          v51 += 2;
          v64[2] = v62;
          v64[3] = v63;
          v52 += 4;
          v43 = __CFADD__(v59++, 1);
        }
        while (!v43);
      }
      if ((v37 | (2 * v36)) < v21)
      {
        v65 = *v51;
        v66 = v51[1];
        if (v65 >= 0xF000)
          v65 = 61440;
        if (v65 <= 0x1000)
          v65 = 4096;
        if (v66 >= 0xF000)
          v66 = 61440;
        if (v66 <= 0x1000)
          v66 = 4096;
        v67 = (613566757 * (unint64_t)((-268431360 - v65 + (v65 << 16)) >> 13)) >> 32;
        v68 = (613566757 * (unint64_t)((-268431360 - v66 + (v66 << 16)) >> 13)) >> 32;
        *v52 = v67;
        v52[1] = v68;
        v69 = (_WORD *)((char *)v52 + v19);
        *v69 = v67;
        v69[1] = v68;
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
    }
    v70 = 2 * v34;
  }
  else
  {
    v70 = 0;
  }
  if ((v70 | (unint64_t)v33) < v22)
  {
    if ((v35 & 1) != 0)
    {
      v71 = *v14;
      v72 = v14[1];
      if (v71 >= 0xF000)
        v71 = 61440;
      if (v71 <= 0x1000)
        v71 = 4096;
      if (v72 >= 0xF000)
        v72 = 61440;
      if (v72 <= 0x1000)
        v72 = 4096;
      v14 += 2;
      *v20 = (613566757 * (unint64_t)((-268431360 - v71 + (v71 << 16)) >> 13)) >> 32;
      v20[1] = (613566757 * (unint64_t)((-268431360 - v72 + (v72 << 16)) >> 13)) >> 32;
      v20 += 2;
    }
    if (v36)
    {
      v73 = -(uint64_t)v36;
      do
      {
        v74 = *v14;
        v75 = v14[1];
        if (v74 >= 0xF000)
          v74 = 61440;
        if (v74 <= 0x1000)
          v74 = 4096;
        if (v75 >= 0xF000)
          v75 = 61440;
        if (v75 <= 0x1000)
          v75 = 4096;
        v14 += 2;
        *v20 = (613566757 * (unint64_t)((-268431360 - v74 + (v74 << 16)) >> 13)) >> 32;
        v20[1] = (613566757 * (unint64_t)((-268431360 - v75 + (v75 << 16)) >> 13)) >> 32;
        v20 += 2;
        v43 = __CFADD__(v73++, 1);
      }
      while (!v43);
      v36 *= 2;
    }
    if ((v36 | v37) < v21)
    {
      v76 = *v14;
      v77 = v14[1];
      if (v76 >= 0xF000)
        v76 = 61440;
      if (v76 <= 0x1000)
        v76 = 4096;
      if (v77 >= 0xF000)
        v77 = 61440;
      if (v77 <= 0x1000)
        v77 = 4096;
      *v20 = (613566757 * (unint64_t)((-268431360 - v76 + (v76 << 16)) >> 13)) >> 32;
      v20[1] = (613566757 * (unint64_t)((-268431360 - v77 + (v77 << 16)) >> 13)) >> 32;
    }
  }
  return 0;
}

uint64_t vt_Copy_sv20_s2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  size_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  int *v37;
  int *v38;
  uint64_t v39;
  int v40;
  uint64_t i;
  __int16 *v42;
  __int16 *v43;
  uint64_t v44;
  __int16 v45;
  __int16 v46;
  _WORD *v47;
  int v48;
  uint64_t v49;
  int v50;
  unint64_t v52;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = *(_QWORD *)(a2 + 40);
  v11 = v10 & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 24) + v10;
  v13 = 2 * (v9 + v8);
  v14 = a4[1];
  v15 = (int *)(a3[1] + v14 * (v10 >> 1) + (v13 & 0xFFFFFFFFFFFFFFFCLL));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = *(_QWORD *)(a6 + 40);
  v18 = 2 * v16;
  v19 = a8[1];
  v20 = (int *)(a7[1] + v19 * v17 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v21 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v16;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v9 + v8) < v21)
    v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v9 + v8);
  if (v12 - v11 + (v12 & 1) >= *(_QWORD *)(a6 + 24))
    v22 = *(_QWORD *)(a6 + 24);
  else
    v22 = v12 - v11 + (v12 & 1);
  if (v22)
  {
    v52 = v21;
    v23 = *a3 + *a4 * v11;
    v55 = a4[1];
    v56 = *a4;
    if (v11 >= v10)
      v24 = 0;
    else
      v24 = *a4;
    v25 = (char *)(v23 + v13 + v24);
    v26 = a8[2];
    v27 = (char *)(a7[2] + v26 * v17 + v18);
    v28 = *a8;
    v29 = (char *)(*a7 + *a8 * v17 + v18);
    v30 = 2 * v21;
    v54 = v22;
    v31 = -(uint64_t)v22;
    do
    {
      memcpy(v29, v25, v30);
      memset(v27, 255, v30);
      v25 += v56;
      v29 += v28;
      v27 += v26;
      v32 = __CFADD__(v31++, 1);
    }
    while (!v32);
    v22 = v54;
    v8 = *(_QWORD *)(a2 + 32);
    v10 = *(_QWORD *)(a2 + 40);
    v9 = v8 & 1;
    v14 = v55;
    v21 = v52;
  }
  v33 = v10 & 1;
  if (v22 >> 1 >= (v22 - v33) >> 1)
    v34 = (v22 - (v10 & 1)) >> 1;
  else
    v34 = v22 >> 1;
  v35 = v8;
  v36 = v21 >> 1;
  if (v21 >> 1 >= (v21 - v9) >> 1)
    v36 = (v21 - v9) >> 1;
  if ((v10 & 1) != 0)
  {
    v37 = v15;
    if ((v35 & 1) != 0)
    {
      v37 = v15 + 1;
      *v20 = *v15;
      v38 = v20 + 1;
      if (!v36)
      {
LABEL_27:
        v15 = (int *)((char *)v15 + v14);
        v20 = (int *)((char *)v20 + v19);
        goto LABEL_28;
      }
    }
    else
    {
      v38 = v20;
      if (!v36)
        goto LABEL_27;
    }
    v39 = -(uint64_t)v36;
    do
    {
      v40 = *v37++;
      *v38++ = v40;
      v32 = __CFADD__(v39++, 1);
    }
    while (!v32);
    goto LABEL_27;
  }
LABEL_28:
  if (v34)
  {
    for (i = 0; i != v34; ++i)
    {
      v42 = (__int16 *)v15;
      v43 = (__int16 *)v20;
      if ((v35 & 1) != 0)
      {
        v42 = (__int16 *)(v15 + 1);
        *v20 = *v15;
        v43 = (__int16 *)(v20 + 1);
      }
      if (v36)
      {
        v44 = -(uint64_t)v36;
        do
        {
          v45 = *v42;
          v46 = v42[1];
          *v43 = *v42;
          v43[1] = v46;
          v47 = (__int16 *)((char *)v43 + v19);
          *v47 = v45;
          v47[1] = v46;
          v43 += 2;
          v42 += 2;
          v32 = __CFADD__(v44++, 1);
        }
        while (!v32);
      }
      v15 = (int *)((char *)v15 + v14);
      v20 = (int *)((char *)v20 + 2 * v19);
    }
    v34 *= 2;
  }
  if ((v34 | v33) < v22)
  {
    if ((v35 & 1) != 0)
    {
      v48 = *v15++;
      *v20++ = v48;
    }
    if (v36)
    {
      v49 = -(uint64_t)v36;
      do
      {
        v50 = *v15++;
        *v20++ = v50;
        v32 = __CFADD__(v49++, 1);
      }
      while (!v32);
    }
  }
  return 0;
}

uint64_t vt_Copy_sv20_sv22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  size_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  int *v36;
  int *v37;
  uint64_t v38;
  int v39;
  uint64_t i;
  __int16 *v41;
  __int16 *v42;
  uint64_t v43;
  __int16 v44;
  __int16 v45;
  _WORD *v46;
  int v47;
  uint64_t v48;
  int v49;
  unint64_t v51;
  unint64_t v53;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = *(_QWORD *)(a2 + 40);
  v11 = v10 & 0xFFFFFFFE;
  v12 = *(_QWORD *)(a2 + 24) + v10;
  v13 = 2 * (v9 + v8);
  v14 = a4[1];
  v15 = (int *)(a3[1] + v14 * (v10 >> 1) + (v13 & 0xFFFFFFFFFFFFFFFCLL));
  v16 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v17 = *(_QWORD *)(a6 + 40);
  v18 = 2 * v16;
  v19 = a8[1];
  v20 = (int *)(a7[1] + v19 * v17 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  v21 = ((*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE) - v16;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v9 + v8) < v21)
    v21 = ((*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE) - (v9 + v8);
  if (v12 - v11 + (v12 & 1) >= *(_QWORD *)(a6 + 24))
    v22 = *(_QWORD *)(a6 + 24);
  else
    v22 = v12 - v11 + (v12 & 1);
  if (v22)
  {
    v51 = v21;
    v23 = *a4;
    v24 = *a8;
    v25 = *a3 + *a4 * v11;
    if (v11 >= v10)
      v26 = 0;
    else
      v26 = *a4;
    v27 = (char *)(v25 + v13 + v26);
    v28 = (char *)(*a7 + v24 * v17 + v18);
    v29 = 2 * v21;
    v53 = v22;
    v30 = -(uint64_t)v22;
    do
    {
      memcpy(v28, v27, v29);
      v27 += v23;
      v28 += v24;
      v31 = __CFADD__(v30++, 1);
    }
    while (!v31);
    v22 = v53;
    v8 = *(_QWORD *)(a2 + 32);
    v10 = *(_QWORD *)(a2 + 40);
    v9 = v8 & 1;
    v21 = v51;
  }
  v32 = v10 & 1;
  if (v22 >> 1 >= (v22 - v32) >> 1)
    v33 = (v22 - (v10 & 1)) >> 1;
  else
    v33 = v22 >> 1;
  v34 = v8;
  v35 = v21 >> 1;
  if (v21 >> 1 >= (v21 - v9) >> 1)
    v35 = (v21 - v9) >> 1;
  if ((v10 & 1) != 0)
  {
    v36 = v15;
    if ((v34 & 1) != 0)
    {
      v36 = v15 + 1;
      *v20 = *v15;
      v37 = v20 + 1;
      if (!v35)
      {
LABEL_27:
        v15 = (int *)((char *)v15 + v14);
        v20 = (int *)((char *)v20 + v19);
        goto LABEL_28;
      }
    }
    else
    {
      v37 = v20;
      if (!v35)
        goto LABEL_27;
    }
    v38 = -(uint64_t)v35;
    do
    {
      v39 = *v36++;
      *v37++ = v39;
      v31 = __CFADD__(v38++, 1);
    }
    while (!v31);
    goto LABEL_27;
  }
LABEL_28:
  if (v33)
  {
    for (i = 0; i != v33; ++i)
    {
      v41 = (__int16 *)v15;
      v42 = (__int16 *)v20;
      if ((v34 & 1) != 0)
      {
        v41 = (__int16 *)(v15 + 1);
        *v20 = *v15;
        v42 = (__int16 *)(v20 + 1);
      }
      if (v35)
      {
        v43 = -(uint64_t)v35;
        do
        {
          v44 = *v41;
          v45 = v41[1];
          *v42 = *v41;
          v42[1] = v45;
          v46 = (__int16 *)((char *)v42 + v19);
          *v46 = v44;
          v46[1] = v45;
          v42 += 2;
          v41 += 2;
          v31 = __CFADD__(v43++, 1);
        }
        while (!v31);
      }
      v15 = (int *)((char *)v15 + v14);
      v20 = (int *)((char *)v20 + 2 * v19);
    }
    v33 *= 2;
  }
  if ((v33 | v32) < v22)
  {
    if ((v34 & 1) != 0)
    {
      v47 = *v15++;
      *v20++ = v47;
    }
    if (v35)
    {
      v48 = -(uint64_t)v35;
      do
      {
        v49 = *v15++;
        *v20++ = v49;
        v31 = __CFADD__(v48++, 1);
      }
      while (!v31);
    }
  }
  return 0;
}

uint64_t vt_Copy_sv20_sf22(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unsigned __int16 *v38;
  _WORD *v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  BOOL v47;
  uint64_t j;
  unsigned __int16 *v49;
  _WORD *v50;
  unsigned int v51;
  int v52;
  unsigned int v53;
  int v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  unint64_t v58;
  unint64_t v59;
  _WORD *v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = v11 & 0xFFFFFFFE;
  v13 = *(_QWORD *)(a2 + 24) + v11;
  v14 = a4[1];
  v15 = (unsigned __int16 *)(a3[1] + v14 * (v11 >> 1) + ((2 * (v9 + v8)) & 0xFFFFFFFFFFFFFFFCLL));
  v16 = *(_QWORD *)(a6 + 24);
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = *(_QWORD *)(a6 + 40);
  v20 = 2 * v17;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  if (v10 - (v9 + v8) >= (unint64_t)(v18 - v17))
    v23 = v18 - v17;
  else
    v23 = v10 - (v9 + v8);
  v24 = v13 - v12 + (v13 & 1);
  if (v24 >= v16)
    v24 = v16;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a3 + *a4 * v12;
    if (v12 >= v11)
      v28 = 0;
    else
      v28 = *a4;
    v29 = *a8;
    v30 = v27 + 2 * (v9 + v8) + v28;
    v31 = *a7 + *a8 * v19 + v20;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
        {
          v33 = *(unsigned __int16 *)(v30 + 2 * i);
          if (v33 >= 0xEB00)
            v33 = 60160;
          if (v33 <= 0x1000)
            v33 = 4096;
          *(_WORD *)(v31 + 2 * i) = (-268431360 - v33 + (v33 << 16)) / 0xDB00;
        }
      }
      v30 += v26;
      v31 += v29;
      ++v25;
    }
    while (v25 != v24);
  }
  v34 = v11 & 1;
  if (v24 >> 1 >= (v24 - v34) >> 1)
    v35 = (v24 - (v11 & 1)) >> 1;
  else
    v35 = v24 >> 1;
  v36 = v8;
  v37 = v23 >> 1;
  if (v23 >> 1 >= (v23 - v9) >> 1)
    v37 = (v23 - v9) >> 1;
  if ((v11 & 1) != 0)
  {
    if ((v36 & 1) != 0)
    {
      v40 = *v15;
      if (v40 >= 0xF000)
        v40 = 61440;
      if (v40 <= 0x1000)
        v41 = 4096;
      else
        v41 = v40;
      if (v15[1] >= 0xF000u)
        v42 = 61440;
      else
        v42 = v15[1];
      if (v42 <= 0x1000)
        v43 = 4096;
      else
        v43 = v42;
      v38 = v15 + 2;
      *v22 = (613566757 * (unint64_t)((-268431360 - v41 + (v41 << 16)) >> 13)) >> 32;
      v22[1] = (613566757 * (unint64_t)((-268431360 - v43 + (v43 << 16)) >> 13)) >> 32;
      v39 = v22 + 2;
      if (!v37)
        goto LABEL_51;
    }
    else
    {
      v38 = v15;
      v39 = v22;
      if (!v37)
      {
LABEL_51:
        v15 = (unsigned __int16 *)((char *)v15 + v14);
        v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_52;
      }
    }
    v44 = -(uint64_t)v37;
    do
    {
      v45 = *v38;
      v46 = v38[1];
      if (v45 >= 0xF000)
        v45 = 61440;
      if (v45 <= 0x1000)
        v45 = 4096;
      if (v46 >= 0xF000)
        v46 = 61440;
      if (v46 <= 0x1000)
        v46 = 4096;
      *v39 = (613566757 * (unint64_t)((-268431360 - v45 + (v45 << 16)) >> 13)) >> 32;
      v39[1] = (613566757 * (unint64_t)((-268431360 - v46 + (v46 << 16)) >> 13)) >> 32;
      v38 += 2;
      v39 += 2;
      v47 = __CFADD__(v44++, 1);
    }
    while (!v47);
    goto LABEL_51;
  }
LABEL_52:
  if (v35)
  {
    for (j = 0; j != v35; ++j)
    {
      v49 = v15;
      v50 = v22;
      if ((v36 & 1) != 0)
      {
        v51 = *v15;
        if (v51 >= 0xF000)
          v51 = 61440;
        if (v51 <= 0x1000)
          v52 = 4096;
        else
          v52 = v51;
        if (v15[1] >= 0xF000u)
          v53 = 61440;
        else
          v53 = v15[1];
        if (v53 <= 0x1000)
          v54 = 4096;
        else
          v54 = v53;
        v49 = v15 + 2;
        *v22 = (613566757 * (unint64_t)((-268431360 - v52 + (v52 << 16)) >> 13)) >> 32;
        v22[1] = (613566757 * (unint64_t)((-268431360 - v54 + (v54 << 16)) >> 13)) >> 32;
        v50 = v22 + 2;
      }
      if (v37)
      {
        v55 = -(uint64_t)v37;
        do
        {
          v56 = *v49;
          v57 = v49[1];
          if (v56 >= 0xF000)
            v56 = 61440;
          if (v56 <= 0x1000)
            v56 = 4096;
          if (v57 >= 0xF000)
            v57 = 61440;
          if (v57 <= 0x1000)
            v57 = 4096;
          v58 = (613566757 * (unint64_t)((-268431360 - v56 + (v56 << 16)) >> 13)) >> 32;
          v59 = (613566757 * (unint64_t)((-268431360 - v57 + (v57 << 16)) >> 13)) >> 32;
          *v50 = v58;
          v50[1] = v59;
          v60 = (_WORD *)((char *)v50 + v21);
          *v60 = v58;
          v60[1] = v59;
          v50 += 2;
          v49 += 2;
          v47 = __CFADD__(v55++, 1);
        }
        while (!v47);
      }
      v15 = (unsigned __int16 *)((char *)v15 + v14);
      v22 += v21;
    }
    v61 = 2 * v35;
  }
  else
  {
    v61 = 0;
  }
  if ((v61 | (unint64_t)v34) < v24)
  {
    if ((v36 & 1) != 0)
    {
      v62 = *v15;
      v63 = v15[1];
      if (v62 >= 0xF000)
        v62 = 61440;
      if (v62 <= 0x1000)
        v62 = 4096;
      if (v63 >= 0xF000)
        v63 = 61440;
      if (v63 <= 0x1000)
        v63 = 4096;
      v15 += 2;
      *v22 = (613566757 * (unint64_t)((-268431360 - v62 + (v62 << 16)) >> 13)) >> 32;
      v22[1] = (613566757 * (unint64_t)((-268431360 - v63 + (v63 << 16)) >> 13)) >> 32;
      v22 += 2;
    }
    if (v37)
    {
      v64 = -(uint64_t)v37;
      do
      {
        v65 = *v15;
        v66 = v15[1];
        if (v65 >= 0xF000)
          v65 = 61440;
        if (v65 <= 0x1000)
          v65 = 4096;
        if (v66 >= 0xF000)
          v66 = 61440;
        if (v66 <= 0x1000)
          v66 = 4096;
        *v22 = (613566757 * (unint64_t)((-268431360 - v65 + (v65 << 16)) >> 13)) >> 32;
        v22[1] = (613566757 * (unint64_t)((-268431360 - v66 + (v66 << 16)) >> 13)) >> 32;
        v15 += 2;
        v22 += 2;
        v47 = __CFADD__(v64++, 1);
      }
      while (!v47);
    }
  }
  return 0;
}

uint64_t vt_Copy_sv20_sf20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _WORD *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unsigned __int16 *v42;
  _WORD *v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  BOOL v51;
  uint64_t j;
  unsigned __int16 *v53;
  _WORD *v54;
  unsigned int v55;
  int v56;
  unsigned int v57;
  int v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;

  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = (v9 & 1) + v9;
  v11 = (*(_DWORD *)(a2 + 16) + (_DWORD)v9) & 0xFFFFFFFE;
  v12 = v8 & 1;
  v13 = v12 + v8;
  v14 = (*(_DWORD *)(a2 + 24) + (_DWORD)v8) & 0xFFFFFFFE;
  v15 = 2 * v10;
  v16 = a4[1];
  v17 = (unsigned __int16 *)(a3[1] + v16 * ((v12 + v8) >> 1) + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  v18 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v19 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v20 = (*(_QWORD *)(a6 + 40) & 1) + *(_QWORD *)(a6 + 40);
  v21 = (*(_DWORD *)(a6 + 24) + *(_QWORD *)(a6 + 40)) & 0xFFFFFFFE;
  v22 = 2 * v18;
  v23 = a8[1];
  v24 = (_WORD *)(a7[1] + ((unint64_t)(v23 * v20) >> 1) + ((2 * v18) & 0x7FFFFFFFFFFFFFFELL));
  v25 = v11 - v10;
  v26 = v19 - v18;
  if (v25 < v19 - v18)
    v26 = v25;
  v27 = v14 - v13;
  if (v14 - v13 >= v21 - v20)
    v27 = v21 - v20;
  if (v27)
  {
    v28 = 0;
    v29 = *a4;
    v30 = *a8;
    v31 = *a3 + v29 * v13;
    if (v13 >= v8)
      v32 = 0;
    else
      v32 = v29;
    v33 = v31 + v15 + v32;
    v34 = *a7 + v30 * v20 + v22;
    do
    {
      if (v26)
      {
        for (i = 0; i != v26; ++i)
        {
          v36 = *(unsigned __int16 *)(v33 + 2 * i);
          if (v36 >= 0xEB00)
            v36 = 60160;
          if (v36 <= 0x1000)
            v36 = 4096;
          *(_WORD *)(v34 + 2 * i) = (-268431360 - v36 + (v36 << 16)) / 0xDB00;
        }
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v27);
  }
  v37 = v27 >> 1;
  v38 = v27 - v12;
  if (v37 >= v38 >> 1)
    v39 = v38 >> 1;
  else
    v39 = v37;
  v40 = v26 - (v9 & 1);
  if (v26 >> 1 >= v40 >> 1)
    v41 = v40 >> 1;
  else
    v41 = v26 >> 1;
  if (v12)
  {
    if ((v9 & 1) != 0)
    {
      v44 = *v17;
      if (v44 >= 0xF000)
        v44 = 61440;
      if (v44 <= 0x1000)
        v45 = 4096;
      else
        v45 = v44;
      if (v17[1] >= 0xF000u)
        v46 = 61440;
      else
        v46 = v17[1];
      if (v46 <= 0x1000)
        v47 = 4096;
      else
        v47 = v46;
      v42 = v17 + 2;
      *v24 = (613566757 * (unint64_t)((-268431360 - v45 + (v45 << 16)) >> 13)) >> 32;
      v24[1] = (613566757 * (unint64_t)((-268431360 - v47 + (v47 << 16)) >> 13)) >> 32;
      v43 = v24 + 2;
      if (!v41)
        goto LABEL_51;
    }
    else
    {
      v42 = v17;
      v43 = v24;
      if (!v41)
      {
LABEL_51:
        v17 = (unsigned __int16 *)((char *)v17 + v16);
        v24 = (_WORD *)((char *)v24 + v23);
        goto LABEL_52;
      }
    }
    v48 = -(uint64_t)v41;
    do
    {
      v49 = *v42;
      v50 = v42[1];
      if (v49 >= 0xF000)
        v49 = 61440;
      if (v49 <= 0x1000)
        v49 = 4096;
      if (v50 >= 0xF000)
        v50 = 61440;
      if (v50 <= 0x1000)
        v50 = 4096;
      *v43 = (613566757 * (unint64_t)((-268431360 - v49 + (v49 << 16)) >> 13)) >> 32;
      v43[1] = (613566757 * (unint64_t)((-268431360 - v50 + (v50 << 16)) >> 13)) >> 32;
      v42 += 2;
      v43 += 2;
      v51 = __CFADD__(v48++, 1);
    }
    while (!v51);
    goto LABEL_51;
  }
LABEL_52:
  if (v39)
  {
    for (j = 0; j != v39; ++j)
    {
      v53 = v17;
      v54 = v24;
      if ((v9 & 1) != 0)
      {
        v55 = *v17;
        if (v55 >= 0xF000)
          v55 = 61440;
        if (v55 <= 0x1000)
          v56 = 4096;
        else
          v56 = v55;
        if (v17[1] >= 0xF000u)
          v57 = 61440;
        else
          v57 = v17[1];
        if (v57 <= 0x1000)
          v58 = 4096;
        else
          v58 = v57;
        v53 = v17 + 2;
        *v24 = (613566757 * (unint64_t)((-268431360 - v56 + (v56 << 16)) >> 13)) >> 32;
        v24[1] = (613566757 * (unint64_t)((-268431360 - v58 + (v58 << 16)) >> 13)) >> 32;
        v54 = v24 + 2;
      }
      if (v41)
      {
        v59 = -(uint64_t)v41;
        do
        {
          v60 = *v53;
          v61 = v53[1];
          if (v60 >= 0xF000)
            v60 = 61440;
          if (v60 <= 0x1000)
            v60 = 4096;
          if (v61 >= 0xF000)
            v61 = 61440;
          if (v61 <= 0x1000)
            v61 = 4096;
          *v54 = (613566757 * (unint64_t)((-268431360 - v60 + (v60 << 16)) >> 13)) >> 32;
          v54[1] = (613566757 * (unint64_t)((-268431360 - v61 + (v61 << 16)) >> 13)) >> 32;
          v53 += 2;
          v54 += 2;
          v51 = __CFADD__(v59++, 1);
        }
        while (!v51);
      }
      v17 = (unsigned __int16 *)((char *)v17 + v16);
      v24 = (_WORD *)((char *)v24 + v23);
    }
  }
  return 0;
}

uint64_t vt_Copy_sv20_t4as(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int16 *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _WORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  __int16 *v39;
  _WORD *v40;
  uint64_t v41;
  __int16 v42;
  __int16 v43;
  BOOL v44;
  uint64_t v45;
  __int16 v46;
  __int16 v47;
  __int16 v48;
  uint64_t j;
  __int16 *v50;
  _WORD *v51;
  __int16 v52;
  __int16 v53;
  _WORD *v54;
  uint64_t v55;
  __int16 v56;
  __int16 v57;
  _WORD *v58;
  __int16 v59;
  __int16 v60;
  _WORD *v61;
  uint64_t v62;
  __int16 v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  __int16 v70;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2] + v9;
  v11 = v8 & 0xFFFFFFFE;
  v12 = a2[3] + v8;
  v13 = a4[1];
  v14 = (__int16 *)(a3[1] + v13 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE));
  v15 = a6[4];
  v16 = a6[5];
  v17 = a6[2];
  v18 = a6[3];
  v19 = a8[1];
  v20 = (_WORD *)(a7[1] + v19 * v16 + 4 * v15);
  v21 = v10 - (v9 & 0xFFFFFFFE) + (v10 & 1);
  if (v21 >= v17)
    v21 = v17;
  v22 = v12 - v11 + (v12 & 1);
  if (v22 >= v18)
    v22 = v18;
  if (v22)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a3 + *a4 * v11;
    if (v11 >= v8)
      v26 = 0;
    else
      v26 = *a4;
    v27 = 2 * (v9 & 0xFFFFFFFE) + v26;
    v28 = *a8;
    v29 = a8[2];
    v30 = v25 + v27;
    v31 = a7[2] + v29 * v16 + 2 * v15;
    v32 = *a7 + *a8 * v16 + 2 * v15;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
        {
          *(_WORD *)(v31 + 2 * i) = -1;
          *(_WORD *)(v32 + 2 * i) = *(_WORD *)(v30 + 2 * i) & 0xFFF0;
        }
      }
      v30 += v24;
      v32 += v28;
      v31 += v29;
      ++v23;
    }
    while (v23 != v22);
  }
  v34 = v8 & 1;
  v35 = (v22 - v34) >> 1;
  if (v22 >> 1 < v35)
    v35 = v22 >> 1;
  v36 = v9;
  v37 = v21 >> 1;
  v38 = v9 & 1;
  if (v21 >> 1 >= (v21 - v38) >> 1)
    v37 = (v21 - v38) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v36 & 1) != 0)
    {
      v39 = v14 + 2;
      v46 = v14[1] & 0xFFF0;
      *v20 = *v14 & 0xFFF0;
      v20[1] = v46;
      v40 = v20 + 2;
      if (v37)
      {
LABEL_21:
        v41 = -(uint64_t)v37;
        do
        {
          v42 = *v39;
          v43 = v39[1];
          v39 += 2;
          *v40 = v42 & 0xFFF0;
          v40[1] = v43 & 0xFFF0;
          v40 += 2;
          v44 = __CFADD__(v41++, 1);
        }
        while (!v44);
        v45 = 2 * v37;
        goto LABEL_27;
      }
    }
    else
    {
      v39 = v14;
      v40 = v20;
      if (v37)
        goto LABEL_21;
    }
    v45 = 0;
LABEL_27:
    if ((v45 | (unint64_t)v38) < v21)
    {
      v47 = *v39 & 0xFFF0;
      v48 = v39[1] & 0xFFF0;
      *v40 = v47;
      v40[1] = v48;
    }
    v14 = (__int16 *)((char *)v14 + v13);
    v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v35)
  {
    for (j = 0; j != v35; ++j)
    {
      v50 = v14;
      v51 = v20;
      if ((v36 & 1) != 0)
      {
        v50 = v14 + 2;
        v52 = *v14 & 0xFFF0;
        v53 = v14[1] & 0xFFF0;
        *v20 = v52;
        v20[1] = v53;
        v54 = (_WORD *)((char *)v20 + v19);
        *v54 = v52;
        v54[1] = v53;
        v51 = v20 + 2;
      }
      if (v37)
      {
        v55 = -(uint64_t)v37;
        do
        {
          v56 = *v50;
          v57 = v50[1];
          v50 += 2;
          v56 &= 0xFFF0u;
          v57 &= 0xFFF0u;
          *v51 = v56;
          v51[1] = v57;
          v51[2] = v56;
          v51[3] = v57;
          v58 = (_WORD *)((char *)v51 + v19);
          *v58 = v56;
          v58[1] = v57;
          v58[2] = v56;
          v58[3] = v57;
          v51 += 4;
          v44 = __CFADD__(v55++, 1);
        }
        while (!v44);
      }
      if ((v38 | (2 * v37)) < v21)
      {
        v59 = *v50 & 0xFFF0;
        v60 = v50[1] & 0xFFF0;
        *v51 = v59;
        v51[1] = v60;
        v61 = (_WORD *)((char *)v51 + v19);
        *v61 = v59;
        v61[1] = v60;
      }
      v14 = (__int16 *)((char *)v14 + v13);
      v20 += v19;
    }
    v62 = 2 * v35;
  }
  else
  {
    v62 = 0;
  }
  if ((v62 | (unint64_t)v34) < v22)
  {
    if ((v36 & 1) != 0)
    {
      v63 = *v14;
      v64 = v14[1];
      v14 += 2;
      *v20 = v63 & 0xFFF0;
      v20[1] = v64 & 0xFFF0;
      v20 += 2;
    }
    if (v37)
    {
      v65 = -(uint64_t)v37;
      do
      {
        v66 = *v14;
        v67 = v14[1];
        v14 += 2;
        *v20 = v66 & 0xFFF0;
        v20[1] = v67 & 0xFFF0;
        v20 += 2;
        v44 = __CFADD__(v65++, 1);
      }
      while (!v44);
      v68 = 2 * v37;
    }
    else
    {
      v68 = 0;
    }
    if ((v68 | (unint64_t)v38) < v21)
    {
      v69 = *v14 & 0xFFF0;
      v70 = v14[1] & 0xFFF0;
      *v20 = v69;
      v20[1] = v70;
    }
  }
  return 0;
}

uint64_t vt_Copy_sv20_tv44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int16 *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _WORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  __int16 *v36;
  _WORD *v37;
  uint64_t v38;
  __int16 v39;
  __int16 v40;
  BOOL v41;
  uint64_t v42;
  __int16 v43;
  __int16 v44;
  __int16 v45;
  uint64_t j;
  __int16 *v47;
  _WORD *v48;
  __int16 v49;
  __int16 v50;
  _WORD *v51;
  uint64_t v52;
  __int16 v53;
  __int16 v54;
  _WORD *v55;
  __int16 v56;
  __int16 v57;
  _WORD *v58;
  uint64_t v59;
  __int16 v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  __int16 v67;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2] + v9;
  v11 = v8 & 0xFFFFFFFE;
  v12 = a2[3] + v8;
  v13 = a4[1];
  v14 = (__int16 *)(a3[1] + v13 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE));
  v15 = a6[4];
  v16 = a6[5];
  v18 = a6[2];
  v17 = a6[3];
  v19 = a8[1];
  v20 = (_WORD *)(a7[1] + v19 * v16 + 4 * v15);
  v21 = v10 - (v9 & 0xFFFFFFFE) + (v10 & 1);
  if (v21 >= v18)
    v21 = v18;
  v22 = v12 - v11 + (v12 & 1);
  if (v22 >= v17)
    v22 = v17;
  if (v22)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a8;
    v26 = *a3 + *a4 * v11;
    if (v11 >= v8)
      v27 = 0;
    else
      v27 = *a4;
    v28 = v26 + 2 * (v9 & 0xFFFFFFFE) + v27;
    v29 = *a7 + v25 * v16 + 2 * v15;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
          *(_WORD *)(v29 + 2 * i) = *(_WORD *)(v28 + 2 * i) & 0xFFF0;
      }
      v28 += v24;
      v29 += v25;
      ++v23;
    }
    while (v23 != v22);
  }
  v31 = v8 & 1;
  v32 = (v22 - v31) >> 1;
  if (v22 >> 1 < v32)
    v32 = v22 >> 1;
  v33 = v9;
  v34 = v21 >> 1;
  v35 = v9 & 1;
  if (v21 >> 1 >= (v21 - v35) >> 1)
    v34 = (v21 - v35) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      v36 = v14 + 2;
      v43 = v14[1] & 0xFFF0;
      *v20 = *v14 & 0xFFF0;
      v20[1] = v43;
      v37 = v20 + 2;
      if (v34)
      {
LABEL_21:
        v38 = -(uint64_t)v34;
        do
        {
          v39 = *v36;
          v40 = v36[1];
          v36 += 2;
          *v37 = v39 & 0xFFF0;
          v37[1] = v40 & 0xFFF0;
          v37 += 2;
          v41 = __CFADD__(v38++, 1);
        }
        while (!v41);
        v42 = 2 * v34;
        goto LABEL_27;
      }
    }
    else
    {
      v36 = v14;
      v37 = v20;
      if (v34)
        goto LABEL_21;
    }
    v42 = 0;
LABEL_27:
    if ((v42 | (unint64_t)v35) < v21)
    {
      v44 = *v36 & 0xFFF0;
      v45 = v36[1] & 0xFFF0;
      *v37 = v44;
      v37[1] = v45;
    }
    v14 = (__int16 *)((char *)v14 + v13);
    v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v32)
  {
    for (j = 0; j != v32; ++j)
    {
      v47 = v14;
      v48 = v20;
      if ((v33 & 1) != 0)
      {
        v47 = v14 + 2;
        v49 = *v14 & 0xFFF0;
        v50 = v14[1] & 0xFFF0;
        *v20 = v49;
        v20[1] = v50;
        v51 = (_WORD *)((char *)v20 + v19);
        *v51 = v49;
        v51[1] = v50;
        v48 = v20 + 2;
      }
      if (v34)
      {
        v52 = -(uint64_t)v34;
        do
        {
          v53 = *v47;
          v54 = v47[1];
          v47 += 2;
          v53 &= 0xFFF0u;
          v54 &= 0xFFF0u;
          *v48 = v53;
          v48[1] = v54;
          v48[2] = v53;
          v48[3] = v54;
          v55 = (_WORD *)((char *)v48 + v19);
          *v55 = v53;
          v55[1] = v54;
          v55[2] = v53;
          v55[3] = v54;
          v48 += 4;
          v41 = __CFADD__(v52++, 1);
        }
        while (!v41);
      }
      if ((v35 | (2 * v34)) < v21)
      {
        v56 = *v47 & 0xFFF0;
        v57 = v47[1] & 0xFFF0;
        *v48 = v56;
        v48[1] = v57;
        v58 = (_WORD *)((char *)v48 + v19);
        *v58 = v56;
        v58[1] = v57;
      }
      v14 = (__int16 *)((char *)v14 + v13);
      v20 += v19;
    }
    v59 = 2 * v32;
  }
  else
  {
    v59 = 0;
  }
  if ((v59 | (unint64_t)v31) < v22)
  {
    if ((v33 & 1) != 0)
    {
      v60 = *v14;
      v61 = v14[1];
      v14 += 2;
      *v20 = v60 & 0xFFF0;
      v20[1] = v61 & 0xFFF0;
      v20 += 2;
    }
    if (v34)
    {
      v62 = -(uint64_t)v34;
      do
      {
        v63 = *v14;
        v64 = v14[1];
        v14 += 2;
        *v20 = v63 & 0xFFF0;
        v20[1] = v64 & 0xFFF0;
        v20 += 2;
        v41 = __CFADD__(v62++, 1);
      }
      while (!v41);
      v65 = 2 * v34;
    }
    else
    {
      v65 = 0;
    }
    if ((v65 | (unint64_t)v35) < v21)
    {
      v66 = *v14 & 0xFFF0;
      v67 = v14[1] & 0xFFF0;
      *v20 = v66;
      v20[1] = v67;
    }
  }
  return 0;
}

uint64_t vt_Copy_sv20_tf44(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _WORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  uint64_t v37;
  unsigned __int16 *v38;
  _WORD *v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  BOOL v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t j;
  unsigned __int16 *v51;
  _WORD *v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  int v56;
  int v57;
  _WORD *v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  int v63;
  _WORD *v64;
  unsigned int v65;
  unsigned int v66;
  int v67;
  int v68;
  _WORD *v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;

  v9 = a2[4];
  v8 = a2[5];
  v10 = a2[2] + v9;
  v11 = v8 & 0xFFFFFFFE;
  v12 = a2[3] + v8;
  v13 = a4[1];
  v14 = (unsigned __int16 *)(a3[1] + v13 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE));
  v15 = a6[4];
  v16 = a6[5];
  v17 = a6[2];
  v18 = a6[3];
  v19 = a8[1];
  v20 = (_WORD *)(a7[1] + v19 * v16 + 4 * v15);
  v21 = v10 - (v9 & 0xFFFFFFFE) + (v10 & 1);
  if (v21 >= v17)
    v21 = v17;
  if (v12 - v11 + (v12 & 1) >= v18)
    v22 = v18;
  else
    v22 = v12 - v11 + (v12 & 1);
  if (v22)
  {
    v23 = 0;
    v24 = *a4;
    v25 = *a3 + *a4 * v11;
    if (v11 >= v8)
      v26 = 0;
    else
      v26 = *a4;
    v27 = 2 * (v9 & 0xFFFFFFFE) + v26;
    v28 = *a8;
    v29 = v25 + v27;
    v30 = *a7 + *a8 * v16 + 2 * v15;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
        {
          v32 = *(unsigned __int16 *)(v29 + 2 * i);
          if (v32 >= 0xEB00)
            v32 = 60160;
          if (v32 <= 0x1000)
            v32 = 4096;
          *(_WORD *)(v30 + 2 * i) = 16 * ((-16773120 - v32 + (v32 << 12)) / 0xDB00);
        }
      }
      v29 += v24;
      v30 += v28;
      ++v23;
    }
    while (v23 != v22);
  }
  v33 = v8 & 1;
  v34 = (v22 - v33) >> 1;
  if (v22 >> 1 < v34)
    v34 = v22 >> 1;
  v35 = v9;
  v36 = v21 >> 1;
  v37 = v9 & 1;
  if (v21 >> 1 >= (v21 - v37) >> 1)
    v36 = (v21 - v37) >> 1;
  if ((v8 & 1) != 0)
  {
    if ((v35 & 1) != 0)
    {
      v45 = *v14;
      v46 = v14[1];
      if (v45 >= 0xF000)
        v45 = 61440;
      if (v45 <= 0x1000)
        v45 = 4096;
      if (v46 >= 0xF000)
        v46 = 61440;
      if (v46 <= 0x1000)
        v47 = 4096;
      else
        v47 = v46;
      v38 = v14 + 2;
      *v20 = 16 * ((613566757 * (unint64_t)((-16773120 - v45 + (v45 << 12)) >> 13)) >> 32);
      v20[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v47 + (v47 << 12)) >> 13)) >> 32);
      v39 = v20 + 2;
      if (v36)
        goto LABEL_26;
    }
    else
    {
      v38 = v14;
      v39 = v20;
      if (v36)
      {
LABEL_26:
        v40 = -(uint64_t)v36;
        do
        {
          v41 = *v38;
          v42 = v38[1];
          if (v41 >= 0xF000)
            v41 = 61440;
          if (v41 <= 0x1000)
            v41 = 4096;
          if (v42 >= 0xF000)
            v42 = 61440;
          if (v42 <= 0x1000)
            v42 = 4096;
          v38 += 2;
          *v39 = 16 * ((613566757 * (unint64_t)((-16773120 - v41 + (v41 << 12)) >> 13)) >> 32);
          v39[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v42 + (v42 << 12)) >> 13)) >> 32);
          v39 += 2;
          v43 = __CFADD__(v40++, 1);
        }
        while (!v43);
        v44 = 2 * v36;
        goto LABEL_49;
      }
    }
    v44 = 0;
LABEL_49:
    if ((v44 | (unint64_t)v37) < v21)
    {
      v48 = *v38;
      v49 = v38[1];
      if (v48 >= 0xF000)
        v48 = 61440;
      if (v48 <= 0x1000)
        v48 = 4096;
      if (v49 >= 0xF000)
        v49 = 61440;
      if (v49 <= 0x1000)
        v49 = 4096;
      *v39 = 16 * ((613566757 * (unint64_t)((-16773120 - v48 + (v48 << 12)) >> 13)) >> 32);
      v39[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v49 + (v49 << 12)) >> 13)) >> 32);
    }
    v14 = (unsigned __int16 *)((char *)v14 + v13);
    v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v34)
  {
    for (j = 0; j != v34; ++j)
    {
      v51 = v14;
      v52 = v20;
      if ((v35 & 1) != 0)
      {
        v53 = *v14;
        v54 = v14[1];
        if (v53 >= 0xF000)
          v53 = 61440;
        if (v53 <= 0x1000)
          v53 = 4096;
        if (v54 >= 0xF000)
          v54 = 61440;
        if (v54 <= 0x1000)
          v55 = 4096;
        else
          v55 = v54;
        v51 = v14 + 2;
        v56 = 16 * ((613566757 * (unint64_t)((-16773120 - v53 + (v53 << 12)) >> 13)) >> 32);
        *v20 = v56;
        v57 = 16 * ((613566757 * (unint64_t)((-16773120 - v55 + (v55 << 12)) >> 13)) >> 32);
        v20[1] = v57;
        v58 = (_WORD *)((char *)v20 + v19);
        *v58 = v56;
        v58[1] = v57;
        v52 = v20 + 2;
      }
      if (v36)
      {
        v59 = -(uint64_t)v36;
        do
        {
          v60 = *v51;
          v61 = v51[1];
          if (v60 >= 0xF000)
            v60 = 61440;
          if (v60 <= 0x1000)
            v60 = 4096;
          if (v61 >= 0xF000)
            v61 = 61440;
          if (v61 <= 0x1000)
            v61 = 4096;
          v62 = 16 * ((613566757 * (unint64_t)((-16773120 - v60 + (v60 << 12)) >> 13)) >> 32);
          *v52 = v62;
          v63 = 16 * ((613566757 * (unint64_t)((-16773120 - v61 + (v61 << 12)) >> 13)) >> 32);
          v52[1] = v63;
          v52[2] = v62;
          v52[3] = v63;
          v64 = (_WORD *)((char *)v52 + v19);
          *v64 = v62;
          v64[1] = v63;
          v51 += 2;
          v64[2] = v62;
          v64[3] = v63;
          v52 += 4;
          v43 = __CFADD__(v59++, 1);
        }
        while (!v43);
      }
      if ((v37 | (2 * v36)) < v21)
      {
        v65 = *v51;
        v66 = v51[1];
        if (v65 >= 0xF000)
          v65 = 61440;
        if (v65 <= 0x1000)
          v65 = 4096;
        if (v66 >= 0xF000)
          v66 = 61440;
        if (v66 <= 0x1000)
          v66 = 4096;
        v67 = 16 * ((613566757 * (unint64_t)((-16773120 - v65 + (v65 << 12)) >> 13)) >> 32);
        *v52 = v67;
        v68 = 16 * ((613566757 * (unint64_t)((-16773120 - v66 + (v66 << 12)) >> 13)) >> 32);
        v52[1] = v68;
        v69 = (_WORD *)((char *)v52 + v19);
        *v69 = v67;
        v69[1] = v68;
      }
      v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
    }
    v70 = 2 * v34;
  }
  else
  {
    v70 = 0;
  }
  if ((v70 | (unint64_t)v33) < v22)
  {
    if ((v35 & 1) != 0)
    {
      v71 = *v14;
      v72 = v14[1];
      if (v71 >= 0xF000)
        v71 = 61440;
      if (v71 <= 0x1000)
        v71 = 4096;
      if (v72 >= 0xF000)
        v72 = 61440;
      if (v72 <= 0x1000)
        v72 = 4096;
      v14 += 2;
      *v20 = 16 * ((613566757 * (unint64_t)((-16773120 - v71 + (v71 << 12)) >> 13)) >> 32);
      v20[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v72 + (v72 << 12)) >> 13)) >> 32);
      v20 += 2;
    }
    if (v36)
    {
      v73 = -(uint64_t)v36;
      do
      {
        v74 = *v14;
        v75 = v14[1];
        if (v74 >= 0xF000)
          v74 = 61440;
        if (v74 <= 0x1000)
          v74 = 4096;
        if (v75 >= 0xF000)
          v75 = 61440;
        if (v75 <= 0x1000)
          v75 = 4096;
        v14 += 2;
        *v20 = 16 * ((613566757 * (unint64_t)((-16773120 - v74 + (v74 << 12)) >> 13)) >> 32);
        v20[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v75 + (v75 << 12)) >> 13)) >> 32);
        v20 += 2;
        v43 = __CFADD__(v73++, 1);
      }
      while (!v43);
      v36 *= 2;
    }
    if ((v36 | v37) < v21)
    {
      v76 = *v14;
      v77 = v14[1];
      if (v76 >= 0xF000)
        v76 = 61440;
      if (v76 <= 0x1000)
        v76 = 4096;
      if (v77 >= 0xF000)
        v77 = 61440;
      if (v77 <= 0x1000)
        v77 = 4096;
      *v20 = 16 * ((613566757 * (unint64_t)((-16773120 - v76 + (v76 << 12)) >> 13)) >> 32);
      v20[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v77 + (v77 << 12)) >> 13)) >> 32);
    }
  }
  return 0;
}

uint64_t vt_Copy_sv20_t2as(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _WORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  uint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  unint64_t v40;
  _WORD *v41;
  _WORD *v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  BOOL v46;
  uint64_t j;
  _WORD *v48;
  _WORD *v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  __int16 v53;
  _WORD *v54;
  uint64_t v55;
  __int16 v56;
  __int16 v57;
  uint64_t v58;
  __int16 v59;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = v8 & 1;
  v10 = (*(_DWORD *)(a2 + 16) + (_DWORD)v8) & 0xFFFFFFFE;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = v11 & 0xFFFFFFFE;
  v13 = *(_QWORD *)(a2 + 24) + v11;
  v14 = a4[1];
  v15 = (_WORD *)(a3[1] + v14 * (v11 >> 1) + ((2 * (v9 + v8)) & 0xFFFFFFFFFFFFFFFCLL));
  v16 = *(_QWORD *)(a6 + 24);
  v17 = (*(_QWORD *)(a6 + 32) & 1) + *(_QWORD *)(a6 + 32);
  v18 = (*(_DWORD *)(a6 + 16) + *(_QWORD *)(a6 + 32)) & 0xFFFFFFFE;
  v19 = *(_QWORD *)(a6 + 40);
  v20 = 2 * v17;
  v21 = a8[1];
  v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  if (v10 - (v9 + v8) >= (unint64_t)(v18 - v17))
    v23 = v18 - v17;
  else
    v23 = v10 - (v9 + v8);
  v24 = v13 - v12 + (v13 & 1);
  if (v24 >= v16)
    v24 = v16;
  if (v24)
  {
    v25 = 0;
    v26 = *a4;
    v27 = *a3 + *a4 * v12;
    if (v12 >= v11)
      v28 = 0;
    else
      v28 = v26;
    v29 = 2 * (v9 + v8) + v28;
    v30 = *a8;
    v31 = a8[2];
    v32 = v27 + v29;
    v33 = a7[2] + v31 * v19 + v20;
    v34 = *a7 + *a8 * v19 + v20;
    do
    {
      if (v23)
      {
        for (i = 0; i != v23; ++i)
        {
          *(_WORD *)(v33 + 2 * i) = -1;
          *(_WORD *)(v34 + 2 * i) = *(_WORD *)(v32 + 2 * i) & 0xFFF0;
        }
      }
      v32 += v26;
      v34 += v30;
      v33 += v31;
      ++v25;
    }
    while (v25 != v24);
  }
  v36 = v11 & 1;
  if (v24 >> 1 >= (v24 - v36) >> 1)
    v37 = (v24 - (v11 & 1)) >> 1;
  else
    v37 = v24 >> 1;
  v38 = v8;
  v39 = v23 >> 1;
  v40 = (v23 - v9) >> 1;
  if (v39 >= v40)
    v39 = v40;
  if ((v11 & 1) != 0)
  {
    if ((v38 & 1) != 0)
    {
      v41 = v15 + 2;
      v43 = v15[1] & 0xFFF0;
      *v22 = *v15 & 0xFFF0;
      v22[1] = v43;
      v42 = v22 + 2;
      if (!v39)
      {
LABEL_28:
        v15 = (_WORD *)((char *)v15 + v14);
        v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      v41 = v15;
      v42 = v22;
      if (!v39)
        goto LABEL_28;
    }
    v44 = -(uint64_t)v39;
    do
    {
      v45 = v41[1] & 0xFFF0;
      *v42 = *v41 & 0xFFF0;
      v42[1] = v45;
      v41 += 2;
      v42 += 2;
      v46 = __CFADD__(v44++, 1);
    }
    while (!v46);
    goto LABEL_28;
  }
LABEL_29:
  if (v37)
  {
    for (j = 0; j != v37; ++j)
    {
      v48 = v15;
      v49 = v22;
      if ((v38 & 1) != 0)
      {
        v48 = v15 + 2;
        v50 = v15[1] & 0xFFF0;
        *v22 = *v15 & 0xFFF0;
        v22[1] = v50;
        v49 = v22 + 2;
      }
      if (v39)
      {
        v51 = -(uint64_t)v39;
        do
        {
          v52 = *v48 & 0xFFF0;
          v53 = v48[1] & 0xFFF0;
          *v49 = v52;
          v49[1] = v53;
          v54 = (_WORD *)((char *)v49 + v21);
          *v54 = v52;
          v54[1] = v53;
          v49 += 2;
          v48 += 2;
          v46 = __CFADD__(v51++, 1);
        }
        while (!v46);
      }
      v15 = (_WORD *)((char *)v15 + v14);
      v22 += v21;
    }
    v55 = 2 * v37;
  }
  else
  {
    v55 = 0;
  }
  if ((v55 | (unint64_t)v36) < v24)
  {
    if ((v38 & 1) != 0)
    {
      v56 = *v15;
      v57 = v15[1];
      v15 += 2;
      *v22 = v56 & 0xFFF0;
      v22[1] = v57 & 0xFFF0;
      v22 += 2;
    }
    if (v39)
    {
      v58 = -(uint64_t)v39;
      do
      {
        v59 = v15[1] & 0xFFF0;
        *v22 = *v15 & 0xFFF0;
        v22[1] = v59;
        v15 += 2;
        v22 += 2;
        v46 = __CFADD__(v58++, 1);
      }
      while (!v46);
    }
  }
  return 0;
}

