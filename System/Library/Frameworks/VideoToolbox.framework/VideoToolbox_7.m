vImage_Error vt_Rotate_2vuy_90CW(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, _QWORD *a5, _QWORD *a6, uint64_t *a7, uint64_t a8)
{
  void **v16;
  unint64_t v17;
  void **v18;
  uint64_t v19;

  if (*(_QWORD *)a1 != *a6 || *(_QWORD *)a2 != *a5)
    return 4294954382;
  vtRotatePixelRect90CW_2vuy(*a4, *a3, *(_BYTE **)a8, *a7, *(_QWORD *)a2, *(_QWORD *)a1);
  v17 = a4[1];
  v16 = (void **)(a4 + 1);
  if (v17 && (v19 = *(_QWORD *)(a8 + 8), v18 = (void **)(a8 + 8), v19))
    return vt_Rotate_8_90CW((vImagePixelCount *)(a1 + 8), (vImagePixelCount *)(a2 + 8), a3 + 1, v16, a5 + 1, a6 + 1, a7 + 1, v18);
  else
    return 0;
}

vImage_Error vt_Rotate_2vuy_180(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, _QWORD *a5, uint64_t *a6, uint64_t *a7, uint64_t a8)
{
  int8x16_t **v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;

  if (*(_QWORD *)a1 != *a5)
    return 4294954382;
  vtRotatePixelRect180_2vuy(*a4, *a3, *(_BYTE **)a8, *a7, *(_QWORD *)a1, *a6);
  v17 = a4[1];
  v16 = (int8x16_t **)(a4 + 1);
  if (v17 && (v19 = *(_QWORD *)(a8 + 8), v18 = (uint64_t *)(a8 + 8), v19))
    return vt_Rotate_8_180((vImagePixelCount *)(a1 + 8), (vImagePixelCount *)(a2 + 8), a3 + 1, v16, a5 + 1, a6 + 1, a7 + 1, v18);
  else
    return 0;
}

vImage_Error vt_Rotate_2vuy_90CCW(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, _QWORD *a5, _QWORD *a6, uint64_t *a7, uint64_t a8)
{
  void **v16;
  uint64_t v17;
  void **v18;
  uint64_t v19;

  if (*(_QWORD *)a1 != *a6 || *(_QWORD *)a2 != *a5)
    return 4294954382;
  vtRotatePixelRect90CCW_2vuy(*a4, *a3, *(_BYTE **)a8, *a7, *(_QWORD *)a2, *(_QWORD *)a1);
  v17 = a4[1];
  v16 = (void **)(a4 + 1);
  if (v17 && (v19 = *(_QWORD *)(a8 + 8), v18 = (void **)(a8 + 8), v19))
    return vt_Rotate_8_90CCW((vImagePixelCount *)(a1 + 8), (vImagePixelCount *)(a2 + 8), a3 + 1, v16, a5 + 1, a6 + 1, a7 + 1, v18);
  else
    return 0;
}

uint64_t vt_Rotate_yuvs(uint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t *a4, uint64_t *a5, _BYTE **a6, int a7)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _BYTE *v12;

  v9 = *a3;
  v10 = *a4;
  v11 = *a5;
  v12 = *a6;
  switch(a7)
  {
    case 270:
      vtRotatePixelRect90CCW_yuvs(v10, v9, v12, v11, *a1, *a2);
      break;
    case 180:
      vtRotatePixelRect180_yuvs(v10, v9, v12, v11, *a1, *a2);
      break;
    case 90:
      vtRotatePixelRect90CW_yuvs(v10, v9, v12, v11, *a1, *a2);
      break;
  }
  return 0;
}

unint64_t vtRotatePixelRect90CW_yuvs(unint64_t result, uint64_t a2, _BYTE *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  _BYTE *v18;
  _BYTE *v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  BOOL v23;

  if (a5 >= 1)
  {
    v6 = result + (a5 - 1) * a2;
    v7 = -a2;
    v8 = -64 * a2;
    do
    {
      if (a6 >= 1)
      {
        if ((unint64_t)a5 >= 0x40)
          v9 = 64;
        else
          v9 = a5;
        v10 = a6;
        v11 = a3;
        v12 = (_BYTE *)v6;
        do
        {
          if ((unint64_t)v10 >= 0x40)
            result = 64;
          else
            result = v10;
          v13 = (2 * (int)result) & 0xFCLL;
          v14 = 1;
          v15 = v9;
          v16 = v11;
          v17 = v12;
          do
          {
            v18 = v17;
            v19 = v16;
            if (v14)
            {
              if (result >= 2)
              {
                v20 = 0;
                v19 = v16;
                do
                {
                  *v19 = v17[v20];
                  v19[1] = v17[v20 + 1];
                  v19[3] = v17[v20 + 3];
                  v21 = &v19[a4];
                  *v21 = v17[v20 + 2];
                  v21[1] = v17[v20 + 1];
                  v21[3] = v17[v20 + 3];
                  v19 = &v21[a4];
                  v20 += 4;
                }
                while (v13 != v20);
                v18 = &v17[v20];
              }
              if ((result & 1) != 0)
              {
                *v19 = *v18;
                v19[1] = v18[1];
                v19[3] = v18[3];
              }
            }
            else
            {
              if (result >= 2)
              {
                v22 = 0;
                v19 = v16;
                do
                {
                  v19[2] = v17[v22];
                  v19[a4 + 2] = v17[v22 + 2];
                  v19 += a4 + a4;
                  v22 += 4;
                }
                while (v13 != v22);
                v18 = &v17[v22];
              }
              if ((result & 1) != 0)
                v19[2] = *v18;
              v16 += 4;
            }
            v17 += v7;
            v14 ^= 1u;
            --v15;
          }
          while (v15);
          v12 += 128;
          v11 += 64 * a4;
          v23 = v10 <= 64;
          v10 -= 64;
        }
        while (!v23);
      }
      v6 += v8;
      a3 += 128;
      v23 = a5 <= 64;
      a5 -= 64;
    }
    while (!v23);
  }
  return result;
}

uint64_t vtRotatePixelRect180_yuvs(uint64_t result, uint64_t a2, _BYTE *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;

  if (a5 >= 0)
    v6 = a5;
  else
    v6 = a5 + 1;
  if (a6)
  {
    v7 = v6 >> 1;
    v8 = (a6 - 1) * a2 + 4 * v7 + result - 2;
    do
    {
      v9 = a3;
      if ((unint64_t)(a5 + 1) >= 3)
      {
        v10 = (_BYTE *)v8;
        v9 = a3;
        v11 = v7;
        do
        {
          *v9 = *v10;
          v9[1] = *(v10 - 1);
          v9[2] = *(v10 - 2);
          v9[3] = v10[1];
          v9 += 4;
          v10 -= 4;
          --v11;
        }
        while (v11);
      }
      if ((a5 & 1) != 0)
        *(_DWORD *)v9 = -2146402288;
      a3 += a4;
      v8 -= a2;
      --a6;
    }
    while (a6);
  }
  return result;
}

void vtRotatePixelRect90CCW_yuvs(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  _BYTE *v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  unint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  _BYTE *v29;
  char v30;
  BOOL v31;
  uint64_t v32;
  int __pattern4;

  if (a5 >= 1)
  {
    v6 = a2 << 6;
    if (a6 >= 0)
      v7 = a6;
    else
      v7 = a6 + 1;
    v8 = a1 + 4 * (v7 >> 1);
    v9 = v8 - 4;
    v10 = (_BYTE *)(v8 - 2);
    v11 = a3;
    v12 = a5;
    do
    {
      if (a6 >= 1)
      {
        if ((unint64_t)v12 >= 0x40)
          v13 = 64;
        else
          v13 = v12;
        v14 = v10;
        v15 = a6;
        v16 = v11;
        v17 = v9;
        do
        {
          if ((unint64_t)v15 >= 0x40)
            v18 = 64;
          else
            v18 = v15;
          v19 = 1;
          v20 = v14;
          v21 = v13;
          v22 = v16;
          v23 = v17;
          do
          {
            if (v19)
            {
              v24 = v20;
              v25 = v22;
              v26 = v18 >> 1;
              if (v18 >= 2)
              {
                do
                {
                  *v25 = *v24;
                  v25[1] = *(v24 - 1);
                  v25[3] = v24[1];
                  v27 = &v25[a4];
                  *v27 = *(v24 - 2);
                  v27[1] = *(v24 - 1);
                  v27[3] = v24[1];
                  v25 += a4 + a4;
                  v24 -= 4;
                  --v26;
                }
                while (v26);
              }
            }
            else
            {
              if (v18 >= 2)
              {
                v28 = 0;
                v29 = v22 + 2;
                do
                {
                  *v29 = v20[v28];
                  v30 = *(_BYTE *)(v23 + v28);
                  v28 -= 4;
                  v29[a4] = v30;
                  v29 += 2 * a4;
                }
                while (4 * (v18 >> 1) + v28);
              }
              v22 += 4;
            }
            v23 += a2;
            v19 ^= 1u;
            v20 += a2;
            --v21;
          }
          while (v21);
          v17 -= 128;
          v14 -= 128;
          v16 += 64 * a4;
          v31 = v15 <= 64;
          v15 -= 64;
        }
        while (!v31);
      }
      v9 += v6;
      v11 += 128;
      v10 += v6;
      v31 = v12 <= 64;
      v12 -= 64;
    }
    while (!v31);
  }
  if ((a6 & 1) != 0)
  {
    __pattern4 = -2146402288;
    v32 = a5 + 2;
    if (a5 >= -1)
      v32 = a5 + 1;
    memset_pattern4(&a3[(a6 - 1) * a4], &__pattern4, (2 * v32) & 0xFFFFFFFFFFFFFFFCLL);
  }
}

uint64_t vt_Rotate_yuvs_90CW(uint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t *a4, _QWORD *a5, _QWORD *a6, uint64_t *a7, _BYTE **a8)
{
  if (*a1 != *a6 || *a2 != *a5)
    return 4294954382;
  vtRotatePixelRect90CW_yuvs(*a4, *a3, *a8, *a7, *a2, *a1);
  return 0;
}

uint64_t vt_Rotate_yuvs_180(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, _QWORD *a5, uint64_t *a6, uint64_t *a7, _BYTE **a8)
{
  if (*a1 != *a5)
    return 4294954382;
  vtRotatePixelRect180_yuvs(*a4, *a3, *a8, *a7, *a1, *a6);
  return 0;
}

uint64_t vt_Rotate_yuvs_90CCW(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, _QWORD *a5, _QWORD *a6, uint64_t *a7, _BYTE **a8)
{
  if (*a1 != *a6 || *a2 != *a5)
    return 4294954382;
  vtRotatePixelRect90CCW_yuvs(*a4, *a3, *a8, *a7, *a2, *a1);
  return 0;
}

uint64_t vt_Rotate_v216(uint64_t *a1, uint64_t *a2, unint64_t *a3, _WORD **a4, unint64_t *a5, char **a6, int a7)
{
  unint64_t v9;
  _WORD *v10;
  unint64_t v11;
  char *v12;

  v9 = *a3;
  v10 = *a4;
  v11 = *a5;
  v12 = *a6;
  switch(a7)
  {
    case 270:
      vtRotatePixelRect90CCW_v216((uint64_t)v10, v9, v12, v11, *a1, *a2);
      break;
    case 180:
      vtRotatePixelRect180_v216((uint64_t)v10, v9, v12, v11, *a1, *a2);
      break;
    case 90:
      vtRotatePixelRect90CW_v216(v10, v9, v12, v11, *a1, *a2);
      break;
  }
  return 0;
}

_WORD *vtRotatePixelRect90CW_v216(_WORD *result, unint64_t a2, _WORD *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v6;
  uint64_t v7;
  _WORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  _WORD *v18;
  uint64_t v19;
  _WORD *v20;
  _WORD *v21;
  _WORD *v22;
  unint64_t v23;
  _WORD *v24;
  unint64_t v25;
  BOOL v26;

  if (a5 >= 1)
  {
    v6 = a4 >> 1 << 6;
    v7 = -64 * (a2 >> 1);
    v8 = (_WORD *)((char *)result + (a5 - 1) * a2);
    v9 = 4 * (a4 >> 1);
    v10 = a4 >> 1;
    v11 = -2 * (a2 >> 1);
    do
    {
      if (a6 >= 1)
      {
        if ((unint64_t)a5 >= 0x40)
          v12 = 64;
        else
          v12 = a5;
        v13 = a6;
        result = a3;
        v14 = v8;
        do
        {
          if ((unint64_t)v13 >= 0x40)
            v15 = 64;
          else
            v15 = v13;
          v16 = (4 * (int)v15) & 0x1F8;
          v17 = 1;
          v18 = v14;
          v19 = v12;
          v20 = result;
          do
          {
            v21 = v18;
            v22 = v20;
            if (v17)
            {
              if (v15 >= 2)
              {
                v23 = 0;
                v22 = v20;
                do
                {
                  *v22 = v18[v23 / 2];
                  v22[1] = v18[v23 / 2 + 1];
                  v22[2] = v18[v23 / 2 + 2];
                  v24 = &v22[v10];
                  *v24 = v18[v23 / 2];
                  v24[1] = v18[v23 / 2 + 3];
                  v24[2] = v18[v23 / 2 + 2];
                  v23 += 8;
                  v22 = (_WORD *)((char *)v22 + v9);
                }
                while (v16 != v23);
                v21 = &v18[v23 / 2];
              }
              if ((v15 & 1) != 0)
              {
                *v22 = *v21;
                v22[1] = v21[1];
                v22[2] = v21[2];
              }
            }
            else
            {
              if (v15 >= 2)
              {
                v25 = 0;
                v22 = v20;
                do
                {
                  v22[3] = v18[v25 / 2 + 1];
                  v22[v10 + 3] = v18[v25 / 2 + 3];
                  v22 = (_WORD *)((char *)v22 + v9);
                  v25 += 8;
                }
                while (v16 != v25);
                v21 = &v18[v25 / 2];
              }
              if ((v15 & 1) != 0)
                v22[3] = v21[1];
              v20 += 4;
            }
            v18 = (_WORD *)((char *)v18 + v11);
            v17 ^= 1u;
            --v19;
          }
          while (v19);
          v14 += 128;
          result += v6;
          v26 = v13 <= 64;
          v13 -= 64;
        }
        while (!v26);
      }
      v8 += v7;
      a3 += 128;
      v26 = a5 <= 64;
      a5 -= 64;
    }
    while (!v26);
  }
  return result;
}

uint64_t vtRotatePixelRect180_v216(uint64_t result, uint64_t a2, _WORD *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _WORD *v9;
  uint64_t v10;
  uint64_t v11;

  if (a5 >= 0)
    v6 = a5;
  else
    v6 = a5 + 1;
  if (a6)
  {
    v7 = v6 >> 1;
    v8 = result + (a6 - 1) * a2 + 8 * v7 - 8;
    do
    {
      v9 = a3;
      if ((unint64_t)(a5 + 1) >= 3)
      {
        v10 = 0;
        v9 = a3;
        v11 = v7;
        do
        {
          *v9 = *(_WORD *)(v8 + v10);
          v9[1] = *(_WORD *)(v8 + v10 + 6);
          result = *(unsigned __int16 *)(v8 + v10 + 4);
          v9[2] = result;
          v9[3] = *(_WORD *)(v8 + v10 + 2);
          v9 += 4;
          v10 -= 8;
          --v11;
        }
        while (v11);
      }
      if ((a5 & 1) != 0)
        *(_QWORD *)v9 = 0x1000800010008000;
      a3 += a4 >> 1;
      v8 -= a2 & 0xFFFFFFFFFFFFFFFELL;
      --a6;
    }
    while (a6);
  }
  return result;
}

void vtRotatePixelRect90CCW_v216(uint64_t a1, unint64_t a2, char *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _WORD *v13;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  _WORD *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  _WORD *v27;
  _WORD *v28;
  _WORD *v29;
  _WORD *v30;
  unint64_t v31;
  BOOL v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t __pattern4;

  v35 = a3;
  v6 = a4 >> 1;
  if (a5 >= 1)
  {
    v7 = a2 >> 1;
    if (a6 >= 0)
      v8 = a6;
    else
      v8 = a6 + 1;
    v9 = a1 + 8 * (v8 >> 1);
    v10 = v9 - 8;
    v11 = 2 * v7;
    v12 = 4 * v6;
    v13 = (_WORD *)(v9 - 2);
    v14 = a5;
    do
    {
      if (a6 >= 1)
      {
        if ((unint64_t)v14 >= 0x40)
          v15 = 64;
        else
          v15 = v14;
        v16 = v13;
        v17 = a6;
        v18 = a3;
        v19 = v10;
        do
        {
          if ((unint64_t)v17 >= 0x40)
            v20 = 64;
          else
            v20 = v17;
          v21 = 1;
          v22 = v16;
          v23 = v19;
          v24 = v15;
          v25 = v18;
          do
          {
            if (v21)
            {
              if (v20 >= 2)
              {
                v26 = 0;
                v27 = v25;
                do
                {
                  *v27 = *(_WORD *)(v23 + v26);
                  v27[1] = *(_WORD *)(v23 + v26 + 6);
                  v27[2] = *(_WORD *)(v23 + v26 + 4);
                  v28 = &v27[v6];
                  *v28 = *(_WORD *)(v23 + v26);
                  v28[1] = *(_WORD *)(v23 + v26 + 2);
                  v28[2] = *(_WORD *)(v23 + v26 + 4);
                  v26 -= 8;
                  v27 = (_WORD *)((char *)v27 + v12);
                }
                while (8 * (v20 >> 1) + v26);
              }
            }
            else
            {
              if (v20 >= 2)
              {
                v29 = v25 + 6;
                v30 = v22;
                v31 = v20 >> 1;
                do
                {
                  *v29 = *v30;
                  v29[v6] = *(v30 - 2);
                  v29 = (_WORD *)((char *)v29 + v12);
                  v30 -= 4;
                  --v31;
                }
                while (v31);
              }
              v25 += 8;
            }
            v21 ^= 1u;
            v23 += v11;
            v22 = (_WORD *)((char *)v22 + v11);
            --v24;
          }
          while (v24);
          v19 -= 256;
          v16 -= 128;
          v18 += 128 * v6;
          v32 = v17 <= 64;
          v17 -= 64;
        }
        while (!v32);
      }
      v10 += v7 << 7;
      a3 += 256;
      v13 += 64 * v7;
      v32 = v14 <= 64;
      v14 -= 64;
    }
    while (!v32);
  }
  if ((a6 & 1) != 0)
  {
    __pattern4 = 0x1000800010008000;
    v33 = &v35[(a6 - 1) * v6];
    v34 = a5 + 2;
    if (a5 >= -1)
      v34 = a5 + 1;
    memset_pattern4(v33, &__pattern4, (2 * v34) & 0xFFFFFFFFFFFFFFFCLL);
  }
}

uint64_t vt_Rotate_v216_90CW(uint64_t *a1, uint64_t *a2, unint64_t *a3, _WORD **a4, _QWORD *a5, _QWORD *a6, unint64_t *a7, _WORD **a8)
{
  if (*a1 != *a6 || *a2 != *a5)
    return 4294954382;
  vtRotatePixelRect90CW_v216(*a4, *a3, *a8, *a7, *a2, *a1);
  return 0;
}

uint64_t vt_Rotate_v216_180(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, _QWORD *a5, uint64_t *a6, unint64_t *a7, _WORD **a8)
{
  if (*a1 != *a5)
    return 4294954382;
  vtRotatePixelRect180_v216(*a4, *a3, *a8, *a7, *a1, *a6);
  return 0;
}

uint64_t vt_Rotate_v216_90CCW(uint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4, _QWORD *a5, _QWORD *a6, unint64_t *a7, char **a8)
{
  if (*a1 != *a6 || *a2 != *a5)
    return 4294954382;
  vtRotatePixelRect90CCW_v216(*a4, *a3, *a8, *a7, *a2, *a1);
  return 0;
}

uint64_t vt_Flip_8(uint64_t *a1, uint64_t *a2, uint64_t *a3, char **a4, uint64_t *a5, char **a6, int a7, int a8)
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;

  v10 = *a3;
  v11 = *a4;
  v12 = *a5;
  v13 = *a6;
  if (a7)
  {
    vtFlipPixelRectHoriz_1BPP((uint64_t)v11, v10, (uint64_t)v13, v12, *a1, *a2);
    return 0;
  }
  if (!a8)
    return 0;
  return vtFlipPixelRectVert(v11, v10, v13, v12, *a1, *a2, 1uLL);
}

uint64_t vtFlipPixelRectHoriz_1BPP(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char v14;

  v6 = a5 + result + (a6 - 1) * a2 - 1;
  v7 = (char *)(a3 + (a6 - 1) * a4);
  if (result == a3)
  {
    if (a6)
    {
      if (a5 >= 0)
        v10 = a5;
      else
        v10 = a5 + 1;
      v11 = -(v10 >> 1);
      do
      {
        if ((unint64_t)(a5 + 1) >= 3)
        {
          v12 = 0;
          v13 = v7;
          do
          {
            v14 = *v13;
            *v13++ = *(_BYTE *)(v6 + v12);
            *(_BYTE *)(v6 + v12--) = v14;
          }
          while (v11 != v12);
        }
        v6 -= a2;
        v7 -= a4;
        --a6;
      }
      while (a6);
    }
  }
  else
  {
    for (; a6; --a6)
    {
      if (a5)
      {
        v8 = 0;
        v9 = v7;
        do
          *v9++ = *(_BYTE *)(v6 + v8--);
        while (-a5 != v8);
      }
      v6 -= a2;
      v7 -= a4;
    }
  }
  return result;
}

uint64_t vtFlipPixelRectVert(char *__src, uint64_t a2, char *a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v7;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;
  size_t v15;
  malloc_type_id_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v7 = a6;
  v10 = &a3[(a6 - 1) * a4];
  v11 = a7 * a5;
  if (__src != a3)
  {
    if (a6)
    {
      v12 = __src;
      do
      {
        --v7;
        memcpy(v10, v12, v11);
        v12 += a2;
        v10 -= a4;
      }
      while (v7);
    }
    return 0;
  }
  v13 = a3;
  if (!a5)
  {
    v15 = 0;
    v16 = 1270757447;
LABEL_12:
    v17 = malloc_type_malloc(v15, v16);
    v18 = v17;
    if (v7 >= 0)
      v19 = v7;
    else
      v19 = v7 + 1;
    if (v17)
    {
      if ((unint64_t)(v7 + 1) >= 3)
      {
        v20 = v19 >> 1;
        v21 = -a4;
        do
        {
          --v20;
          memcpy(v18, v10, v11);
          memcpy(v10, v13, v11);
          memcpy(v13, v18, v11);
          v13 += a2;
          v10 += v21;
        }
        while (v20);
      }
      free(v18);
      return 0;
    }
    return 4294954392;
  }
  if ((a5 & 0x8000000000000000) != 0)
    return 4294954392;
  result = 4294954392;
  if (is_mul_ok(a5, a7) && v11)
  {
    v15 = a7 * a5;
    v16 = 1556728742;
    goto LABEL_12;
  }
  return result;
}

uint64_t vt_Flip_8_Hor(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, _QWORD *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  if (*a1 != *a5)
    return 4294954382;
  vtFlipPixelRectHoriz_1BPP(*a4, *a3, *a8, *a7, *a1, *a6);
  return 0;
}

uint64_t vt_Flip_8_Ver(unint64_t *a1, uint64_t a2, uint64_t *a3, char **a4, _QWORD *a5, uint64_t *a6, uint64_t *a7, char **a8)
{
  if (*a1 != *a5)
    return 4294954382;
  vtFlipPixelRectVert(*a4, *a3, *a8, *a7, *a1, *a6, 1uLL);
  return 0;
}

uint64_t vt_Flip_16(uint64_t *a1, uint64_t *a2, uint64_t *a3, char **a4, uint64_t *a5, char **a6, int a7, int a8)
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;

  v10 = *a3;
  v11 = *a4;
  v12 = *a5;
  v13 = *a6;
  if (a7)
  {
    vtFlipPixelRectHoriz_2BPP((uint64_t)v11, v10, (uint64_t)v13, v12, *a1, *a2);
    return 0;
  }
  if (!a8)
    return 0;
  return vtFlipPixelRectVert(v11, v10, v13, v12, *a1, *a2, 2uLL);
}

uint64_t vtFlipPixelRectHoriz_2BPP(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;

  v6 = result + 2 * a5 + (a6 - 1) * a2 - 2;
  v7 = a3 + (a6 - 1) * a4;
  if (result == a3)
  {
    if (a6)
    {
      if (a5 >= 0)
        v10 = a5;
      else
        v10 = a5 + 1;
      v11 = v10 >> 1;
      do
      {
        if ((unint64_t)(a5 + 1) >= 3)
        {
          v12 = 0;
          v13 = 0;
          do
          {
            v14 = *(_WORD *)(v7 + 2 * v13);
            *(_WORD *)(v7 + 2 * v13) = *(_WORD *)(v6 + v12);
            *(_WORD *)(v6 + v12) = v14;
            ++v13;
            v12 -= 2;
          }
          while (v11 != v13);
        }
        v6 -= a2;
        v7 -= a4;
        --a6;
      }
      while (a6);
    }
  }
  else
  {
    for (; a6; --a6)
    {
      if (a5)
      {
        v8 = 0;
        for (i = 0; i != a5; ++i)
        {
          *(_WORD *)(v7 + 2 * i) = *(_WORD *)(v6 + v8);
          v8 -= 2;
        }
      }
      v6 -= a2;
      v7 -= a4;
    }
  }
  return result;
}

uint64_t vt_Flip_16_Hor(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, _QWORD *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  if (*a1 != *a5)
    return 4294954382;
  vtFlipPixelRectHoriz_2BPP(*a4, *a3, *a8, *a7, *a1, *a6);
  return 0;
}

uint64_t vt_Flip_16_Ver(unint64_t *a1, uint64_t a2, uint64_t *a3, char **a4, _QWORD *a5, uint64_t *a6, uint64_t *a7, char **a8)
{
  if (*a1 != *a5)
    return 4294954382;
  vtFlipPixelRectVert(*a4, *a3, *a8, *a7, *a1, *a6, 2uLL);
  return 0;
}

uint64_t vt_Flip_32(uint64_t *a1, uint64_t *a2, uint64_t *a3, char **a4, uint64_t *a5, char **a6, int a7, int a8)
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;

  v10 = *a3;
  v11 = *a4;
  v12 = *a5;
  v13 = *a6;
  if (a7)
  {
    vtFlipPixelRectHoriz_4BPP((uint64_t)v11, v10, (uint64_t)v13, v12, *a1, *a2);
    return 0;
  }
  if (!a8)
    return 0;
  return vtFlipPixelRectVert(v11, v10, v13, v12, *a1, *a2, 4uLL);
}

uint64_t vtFlipPixelRectHoriz_4BPP(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  v6 = result + 4 * a5 + (a6 - 1) * a2 - 4;
  v7 = a3 + (a6 - 1) * a4;
  if (result == a3)
  {
    if (a6)
    {
      if (a5 >= 0)
        v10 = a5;
      else
        v10 = a5 + 1;
      v11 = v10 >> 1;
      do
      {
        if ((unint64_t)(a5 + 1) >= 3)
        {
          v12 = 0;
          v13 = 0;
          do
          {
            v14 = *(_DWORD *)(v7 + 4 * v13);
            *(_DWORD *)(v7 + 4 * v13) = *(_DWORD *)(v6 + v12);
            *(_DWORD *)(v6 + v12) = v14;
            ++v13;
            v12 -= 4;
          }
          while (v11 != v13);
        }
        v6 -= a2;
        v7 -= a4;
        --a6;
      }
      while (a6);
    }
  }
  else
  {
    for (; a6; --a6)
    {
      if (a5)
      {
        v8 = 0;
        for (i = 0; i != a5; ++i)
        {
          *(_DWORD *)(v7 + 4 * i) = *(_DWORD *)(v6 + v8);
          v8 -= 4;
        }
      }
      v6 -= a2;
      v7 -= a4;
    }
  }
  return result;
}

uint64_t vt_Flip_32_Hor(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, _QWORD *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  if (*a1 != *a5)
    return 4294954382;
  vtFlipPixelRectHoriz_4BPP(*a4, *a3, *a8, *a7, *a1, *a6);
  return 0;
}

uint64_t vt_Flip_32_Ver(unint64_t *a1, uint64_t a2, uint64_t *a3, char **a4, _QWORD *a5, uint64_t *a6, uint64_t *a7, char **a8)
{
  if (*a1 != *a5)
    return 4294954382;
  vtFlipPixelRectVert(*a4, *a3, *a8, *a7, *a1, *a6, 4uLL);
  return 0;
}

uint64_t vt_Flip_64(uint64_t *a1, uint64_t *a2, uint64_t *a3, char **a4, uint64_t *a5, char **a6, int a7, int a8)
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;

  v10 = *a3;
  v11 = *a4;
  v12 = *a5;
  v13 = *a6;
  if (a7)
  {
    vtFlipPixelRectHoriz_8BPP((uint64_t)v11, v10, (uint64_t)v13, v12, *a1, *a2);
    return 0;
  }
  if (!a8)
    return 0;
  return vtFlipPixelRectVert(v11, v10, v13, v12, *a1, *a2, 8uLL);
}

uint64_t vtFlipPixelRectHoriz_8BPP(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = result + 8 * a5 + (a6 - 1) * a2 - 8;
  v7 = a3 + (a6 - 1) * a4;
  if (result == a3)
  {
    if (a6)
    {
      if (a5 >= 0)
        v10 = a5;
      else
        v10 = a5 + 1;
      v11 = v10 >> 1;
      do
      {
        if ((unint64_t)(a5 + 1) >= 3)
        {
          v12 = 0;
          v13 = 0;
          do
          {
            v14 = *(_QWORD *)(v7 + 8 * v13);
            *(_QWORD *)(v7 + 8 * v13) = *(_QWORD *)(v6 + v12);
            *(_QWORD *)(v6 + v12) = v14;
            ++v13;
            v12 -= 8;
          }
          while (v11 != v13);
        }
        v6 -= a2;
        v7 -= a4;
        --a6;
      }
      while (a6);
    }
  }
  else
  {
    for (; a6; --a6)
    {
      if (a5)
      {
        v8 = 0;
        for (i = 0; i != a5; ++i)
        {
          *(_QWORD *)(v7 + 8 * i) = *(_QWORD *)(v6 + v8);
          v8 -= 8;
        }
      }
      v6 -= a2;
      v7 -= a4;
    }
  }
  return result;
}

uint64_t vt_Flip_64_Hor(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, _QWORD *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  if (*a1 != *a5)
    return 4294954382;
  vtFlipPixelRectHoriz_8BPP(*a4, *a3, *a8, *a7, *a1, *a6);
  return 0;
}

uint64_t vt_Flip_64_Ver(unint64_t *a1, uint64_t a2, uint64_t *a3, char **a4, _QWORD *a5, uint64_t *a6, uint64_t *a7, char **a8)
{
  if (*a1 != *a5)
    return 4294954382;
  vtFlipPixelRectVert(*a4, *a3, *a8, *a7, *a1, *a6, 8uLL);
  return 0;
}

uint64_t vt_Flip_b3a8(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, int a7, int a8)
{
  uint64_t result;

  if (a7)
  {
    vtFlipPixelRectHoriz_4BPP(*a4, *a3, *a6, *a5, *a1, *a2);
    vtFlipPixelRectHoriz_2BPP(a4[1], a3[1], a6[1], a5[1], a1[1], a2[1]);
    return 0;
  }
  if (!a8)
    return 0;
  result = vtFlipPixelRectVert((char *)*a4, *a3, (char *)*a6, *a5, *a1, *a2, 4uLL);
  if (!(_DWORD)result)
    return vtFlipPixelRectVert((char *)a4[1], a3[1], (char *)a6[1], a5[1], a1[1], a2[1], 2uLL);
  return result;
}

uint64_t vt_Flip_b3a8_Hor(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, _QWORD *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  if (*a1 != *a5)
    return 4294954382;
  vtFlipPixelRectHoriz_4BPP(*a4, *a3, *a8, *a7, *a1, *a6);
  vtFlipPixelRectHoriz_2BPP(a4[1], a3[1], a8[1], a7[1], a5[1], a6[1]);
  return 0;
}

uint64_t vt_Flip_b3a8_Ver(unint64_t *a1, uint64_t a2, uint64_t *a3, char **a4, _QWORD *a5, uint64_t *a6, uint64_t *a7, char **a8)
{
  uint64_t result;

  if (*a1 != *a5)
    return 4294954382;
  result = vtFlipPixelRectVert(*a4, *a3, *a8, *a7, *a1, *a6, 4uLL);
  if (!(_DWORD)result)
    return vtFlipPixelRectVert(a4[1], a3[1], a8[1], a7[1], a5[1], a6[1], 2uLL);
  return result;
}

uint64_t vt_Flip_y420(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v16 = 0;
  v17 = 0;
  do
  {
    v18 = *(_QWORD *)(a3 + v16);
    v19 = *(char **)(a4 + v16);
    v20 = *(_QWORD *)(a5 + v16);
    v21 = *(char **)(a6 + v16);
    if (a7)
    {
      vtFlipPixelRectHoriz_1BPP((uint64_t)v19, v18, (uint64_t)v21, v20, *(_QWORD *)(a1 + v16), *(_QWORD *)(a2 + v16));
    }
    else if (a8)
    {
      v17 = vtFlipPixelRectVert(v19, v18, v21, v20, *(_QWORD *)(a1 + v16), *(_QWORD *)(a2 + v16), 1uLL);
    }
    v16 += 8;
  }
  while (v16 != 24);
  return v17;
}

uint64_t vt_Flip_y420_Hor(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, _QWORD *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  if (*a1 != *a5)
    return 4294954382;
  vtFlipPixelRectHoriz_1BPP(*a4, *a3, *a8, *a7, *a1, *a6);
  vtFlipPixelRectHoriz_1BPP(a4[1], a3[1], a8[1], a7[1], a5[1], a6[1]);
  vtFlipPixelRectHoriz_1BPP(a4[2], a3[2], a8[2], a7[2], a5[2], a6[2]);
  return 0;
}

uint64_t vt_Flip_y420_Ver(unint64_t *a1, uint64_t a2, uint64_t *a3, char **a4, _QWORD *a5, uint64_t *a6, uint64_t *a7, char **a8)
{
  uint64_t result;

  if (*a1 != *a5)
    return 4294954382;
  result = vtFlipPixelRectVert(*a4, *a3, *a8, *a7, *a1, *a6, 1uLL);
  if (!(_DWORD)result)
  {
    result = vtFlipPixelRectVert(a4[1], a3[1], a8[1], a7[1], a5[1], a6[1], 1uLL);
    if (!(_DWORD)result)
      return vtFlipPixelRectVert(a4[2], a3[2], a8[2], a7[2], a5[2], a6[2], 1uLL);
  }
  return result;
}

uint64_t vt_Flip_420v(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, int a7, int a8)
{
  uint64_t result;

  if (a7)
  {
    vtFlipPixelRectHoriz_1BPP(*a4, *a3, *a6, *a5, *a1, *a2);
    vtFlipPixelRectHoriz_2BPP(a4[1], a3[1], a6[1], a5[1], a1[1], a2[1]);
    return 0;
  }
  if (!a8)
    return 0;
  result = vtFlipPixelRectVert((char *)*a4, *a3, (char *)*a6, *a5, *a1, *a2, 1uLL);
  if (!(_DWORD)result)
    return vtFlipPixelRectVert((char *)a4[1], a3[1], (char *)a6[1], a5[1], a1[1], a2[1], 2uLL);
  return result;
}

uint64_t vt_Flip_420v_Hor(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, _QWORD *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t result;
  uint64_t v15;

  if (*a1 != *a5)
    return 4294954382;
  vtFlipPixelRectHoriz_1BPP(*a4, *a3, *a8, *a7, *a1, *a6);
  vtFlipPixelRectHoriz_2BPP(a4[1], a3[1], a8[1], a7[1], a5[1], a6[1]);
  result = a4[2];
  if (result)
  {
    v15 = a8[2];
    if (v15)
      vtFlipPixelRectHoriz_1BPP(result, a3[2], v15, a7[2], a5[2], a6[2]);
    return 0;
  }
  return result;
}

uint64_t vt_Flip_420v_Ver(unint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, _QWORD *a5, uint64_t *a6, uint64_t *a7, char **a8)
{
  uint64_t result;
  char *v15;

  if (*a1 != *a5)
    return 4294954382;
  result = vtFlipPixelRectVert(*(char **)a4, *a3, *a8, *a7, *a1, *a6, 1uLL);
  if (!(_DWORD)result)
  {
    result = vtFlipPixelRectVert(*(char **)(a4 + 8), a3[1], a8[1], a7[1], a5[1], a6[1], 2uLL);
    if (!(_DWORD)result)
    {
      result = *(_QWORD *)(a4 + 16);
      if (result)
      {
        v15 = a8[2];
        if (v15)
          return vtFlipPixelRectVert((char *)result, a3[2], v15, a7[2], a5[2], a6[2], 1uLL);
        else
          return 0;
      }
    }
  }
  return result;
}

uint64_t vt_Flip_x420(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, int a7, int a8)
{
  uint64_t result;

  if (a7)
  {
    vtFlipPixelRectHoriz_2BPP(*a4, *a3, *a6, *a5, *a1, *a2);
    vtFlipPixelRectHoriz_4BPP(a4[1], a3[1], a6[1], a5[1], a1[1], a2[1]);
    return 0;
  }
  if (!a8)
    return 0;
  result = vtFlipPixelRectVert((char *)*a4, *a3, (char *)*a6, *a5, *a1, *a2, 2uLL);
  if (!(_DWORD)result)
    return vtFlipPixelRectVert((char *)a4[1], a3[1], (char *)a6[1], a5[1], a1[1], a2[1], 4uLL);
  return result;
}

uint64_t vt_Flip_x420_Hor(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, _QWORD *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t result;
  uint64_t v15;

  if (*a1 != *a5)
    return 4294954382;
  vtFlipPixelRectHoriz_2BPP(*a4, *a3, *a8, *a7, *a1, *a6);
  vtFlipPixelRectHoriz_4BPP(a4[1], a3[1], a8[1], a7[1], a5[1], a6[1]);
  result = a4[2];
  if (result)
  {
    v15 = a8[2];
    if (v15)
      vtFlipPixelRectHoriz_2BPP(result, a3[2], v15, a7[2], a5[2], a6[2]);
    return 0;
  }
  return result;
}

uint64_t vt_Flip_x420_Ver(unint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, _QWORD *a5, uint64_t *a6, uint64_t *a7, char **a8)
{
  uint64_t result;
  char *v15;

  if (*a1 != *a5)
    return 4294954382;
  result = vtFlipPixelRectVert(*(char **)a4, *a3, *a8, *a7, *a1, *a6, 2uLL);
  if (!(_DWORD)result)
  {
    result = vtFlipPixelRectVert(*(char **)(a4 + 8), a3[1], a8[1], a7[1], a5[1], a6[1], 4uLL);
    if (!(_DWORD)result)
    {
      result = *(_QWORD *)(a4 + 16);
      if (result)
      {
        v15 = a8[2];
        if (v15)
          return vtFlipPixelRectVert((char *)result, a3[2], v15, a7[2], a5[2], a6[2], 2uLL);
        else
          return 0;
      }
    }
  }
  return result;
}

uint64_t vt_Flip_2vuy(uint64_t *a1, uint64_t *a2, uint64_t *a3, char **a4, uint64_t *a5, char **a6, int a7, int a8)
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;

  v10 = *a3;
  v11 = *a4;
  v12 = *a5;
  v13 = *a6;
  if (a7)
  {
    vtFlipPixelRectHoriz_2vuy((uint64_t)v11, v10, (uint64_t)v13, v12, *a1, *a2);
    return 0;
  }
  if (!a8)
    return 0;
  return vtFlipPixelRectVert(v11, v10, v13, v12, (unint64_t)(*a1 + 1) >> 1, *a2, 4uLL);
}

uint64_t vtFlipPixelRectHoriz_2vuy(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  int v21;

  if (a5 >= 0)
    v6 = a5;
  else
    v6 = a5 + 1;
  v7 = v6 >> 1;
  v8 = result + 4 * (v6 >> 1) + (a6 - 1) * a2 - 4;
  v9 = (_DWORD *)(a3 + (a6 - 1) * a4);
  if (result == a3)
  {
    if (a6)
    {
      if (a5 >= 0)
        v15 = a5;
      else
        v15 = a5 + 3;
      v16 = v15 >> 2;
      v17 = -a2;
      do
      {
        if ((a5 & 1) != 0)
          *(_DWORD *)(v8 + 4) = 276828288;
        if ((unint64_t)(a5 + 3) >= 7)
        {
          v18 = 0;
          v19 = 0;
          do
          {
            result = (uint64_t)&v9[v19];
            v20 = (_BYTE *)(v8 + v18);
            v21 = *(_DWORD *)result;
            *(_BYTE *)result = *(_BYTE *)(v8 + v18);
            *(_BYTE *)(result + 1) = *(_BYTE *)(v8 + v18 + 3);
            *(_BYTE *)(result + 2) = *(_BYTE *)(v8 + v18 + 2);
            *(_BYTE *)(result + 3) = *(_BYTE *)(v8 + v18 + 1);
            *v20 = v21;
            v20[1] = HIBYTE(v21);
            v20[2] = BYTE2(v21);
            v20[3] = BYTE1(v21);
            ++v19;
            v18 -= 4;
          }
          while (v16 != v19);
        }
        v8 += v17;
        v9 = (_DWORD *)((char *)v9 - a4);
        --a6;
      }
      while (a6);
    }
  }
  else if (a6)
  {
    v10 = -a2;
    do
    {
      v11 = v9;
      if ((unint64_t)(a5 + 1) >= 3)
      {
        v12 = 0;
        v13 = 0;
        result = v7;
        do
        {
          v14 = &v9[v12];
          *v14 = *(_BYTE *)(v8 + v13);
          v14[1] = *(_BYTE *)(v8 + v13 + 3);
          v14[2] = *(_BYTE *)(v8 + v13 + 2);
          v14[3] = *(_BYTE *)(v8 + v13 + 1);
          v13 -= 4;
          ++v12;
          --result;
        }
        while (result);
        v11 = &v9[v13 / 0xFFFFFFFFFFFFFFFCLL];
      }
      if ((a5 & 1) != 0)
        *v11 = 276828288;
      v8 += v10;
      v9 = (_DWORD *)((char *)v9 - a4);
      --a6;
    }
    while (a6);
  }
  return result;
}

uint64_t vt_Flip_2vuy_Hor(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, _QWORD *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t result;
  uint64_t v15;

  if (*a1 != *a5)
    return 4294954382;
  vtFlipPixelRectHoriz_2vuy(*a4, *a3, *a8, *a7, *a1, *a6);
  result = a4[1];
  if (result)
  {
    v15 = a8[1];
    if (v15)
      vtFlipPixelRectHoriz_1BPP(result, a3[1], v15, a7[1], a5[1], a6[1]);
    return 0;
  }
  return result;
}

uint64_t vt_Flip_2vuy_Ver(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4, _QWORD *a5, uint64_t *a6, uint64_t *a7, char **a8)
{
  uint64_t result;
  char *v15;

  if (*a1 != *a5)
    return 4294954382;
  result = vtFlipPixelRectVert(*(char **)a4, *a3, *a8, *a7, (unint64_t)(*a1 + 1) >> 1, *a6, 4uLL);
  if (!(_DWORD)result)
  {
    result = *(_QWORD *)(a4 + 8);
    if (result)
    {
      v15 = a8[1];
      if (v15)
        return vtFlipPixelRectVert((char *)result, a3[1], v15, a7[1], a5[1], a6[1], 1uLL);
      else
        return 0;
    }
  }
  return result;
}

uint64_t vt_Flip_yuvs(uint64_t *a1, uint64_t *a2, uint64_t *a3, char **a4, uint64_t *a5, char **a6, int a7, int a8)
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;

  v10 = *a3;
  v11 = *a4;
  v12 = *a5;
  v13 = *a6;
  if (a7)
  {
    vtFlipPixelRectHoriz_yuvs(v11, v10, v13, v12, *a1, *a2);
    return 0;
  }
  if (!a8)
    return 0;
  return vtFlipPixelRectVert(v11, v10, v13, v12, (unint64_t)(*a1 + 1) >> 1, *a2, 4uLL);
}

_BYTE *vtFlipPixelRectHoriz_yuvs(_BYTE *result, uint64_t a2, _BYTE *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  int v21;

  if (a5 >= 0)
    v6 = a5;
  else
    v6 = a5 + 1;
  v7 = v6 >> 1;
  v8 = 4 * (v6 >> 1);
  v9 = (a6 - 1) * a2;
  v10 = &a3[(a6 - 1) * a4];
  if (result == a3)
  {
    if (a6)
    {
      v14 = (uint64_t)&result[4 * v7 - 4 + v9];
      if (a5 >= 0)
        v15 = a5;
      else
        v15 = a5 + 3;
      v16 = v15 >> 2;
      v17 = -a2;
      v18 = (uint64_t)&result[v9 - 2 + v8];
      do
      {
        if ((a5 & 1) != 0)
          *(_DWORD *)(v14 + 4) = -2146402288;
        if ((unint64_t)(a5 + 3) >= 7)
        {
          v19 = 0;
          result = (_BYTE *)v18;
          do
          {
            v20 = &v10[4 * v19];
            v21 = *(_DWORD *)v20;
            *v20 = *result;
            v20[1] = *(result - 1);
            v20[2] = *(result - 2);
            v20[3] = result[1];
            *(result - 2) = BYTE2(v21);
            *(result - 1) = BYTE1(v21);
            *result = v21;
            result[1] = HIBYTE(v21);
            ++v19;
            result -= 4;
          }
          while (v16 != v19);
        }
        v14 += v17;
        v10 -= a4;
        v18 += v17;
        --a6;
      }
      while (a6);
    }
  }
  else if (a6)
  {
    v11 = (uint64_t)&result[v9 - 2 + v8];
    do
    {
      v12 = v10;
      if ((unint64_t)(a5 + 1) >= 3)
      {
        v13 = (_BYTE *)v11;
        v12 = v10;
        result = (_BYTE *)v7;
        do
        {
          *v12 = *v13;
          v12[1] = *(v13 - 1);
          v12[2] = *(v13 - 2);
          v12[3] = v13[1];
          v12 += 4;
          v13 -= 4;
          --result;
        }
        while (result);
      }
      if ((a5 & 1) != 0)
        *(_DWORD *)v12 = -2146402288;
      v10 -= a4;
      v11 -= a2;
      --a6;
    }
    while (a6);
  }
  return result;
}

uint64_t vt_Flip_yuvs_Hor(uint64_t *a1, uint64_t a2, uint64_t *a3, _BYTE **a4, _QWORD *a5, uint64_t *a6, uint64_t *a7, _BYTE **a8)
{
  if (*a1 != *a5)
    return 4294954382;
  vtFlipPixelRectHoriz_yuvs(*a4, *a3, *a8, *a7, *a1, *a6);
  return 0;
}

uint64_t vt_Flip_yuvs_Ver(_QWORD *a1, uint64_t a2, uint64_t *a3, char **a4, _QWORD *a5, uint64_t *a6, uint64_t *a7, char **a8)
{
  if (*a1 == *a5)
    return vtFlipPixelRectVert(*a4, *a3, *a8, *a7, (unint64_t)(*a1 + 1) >> 1, *a6, 4uLL);
  else
    return 4294954382;
}

uint64_t vt_Flip_v216(uint64_t *a1, uint64_t *a2, unint64_t *a3, char **a4, unint64_t *a5, char **a6, int a7, int a8)
{
  unint64_t v10;
  char *v11;
  unint64_t v12;
  char *v13;

  v10 = *a3;
  v11 = *a4;
  v12 = *a5;
  v13 = *a6;
  if (a7)
  {
    vtFlipPixelRectHoriz_v216((uint64_t)v11, v10, (uint64_t)v13, v12, *a1, *a2);
    return 0;
  }
  if (!a8)
    return 0;
  return vtFlipPixelRectVert(v11, v10, v13, v12, (unint64_t)(*a1 + 1) >> 1, *a2, 8uLL);
}

uint64_t vtFlipPixelRectHoriz_v216(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  _WORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _WORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (a5 >= 0)
    v6 = a5;
  else
    v6 = a5 + 1;
  v7 = v6 >> 1;
  v8 = result + (a6 - 1) * a2 + 8 * (v6 >> 1) - 8;
  v9 = (_QWORD *)(a3 + (a6 - 1) * a4);
  v10 = a5;
  v11 = a2 >> 1;
  v12 = a4 >> 1;
  if (result == a3)
  {
    if (a6)
    {
      v19 = a5 + 3;
      if (a5 >= 0)
        v20 = a5;
      else
        v20 = a5 + 3;
      v21 = v20 >> 2;
      v22 = -2 * v12;
      v23 = -2 * v11;
      do
      {
        if ((v10 & 1) != 0)
          *(_QWORD *)(v8 + 16) = 0x1000800010008000;
        if (v19 >= 7)
        {
          v24 = 0;
          v25 = 0;
          do
          {
            result = (uint64_t)&v9[v25];
            v26 = (_WORD *)(v8 + v24);
            v27 = *(_QWORD *)result;
            v28 = *(_QWORD *)result >> 16;
            v29 = HIDWORD(*(_QWORD *)result);
            v30 = HIWORD(*(_QWORD *)result);
            *(_WORD *)result = *(_WORD *)(v8 + v24);
            *(_WORD *)(result + 2) = *(_WORD *)(v8 + v24 + 6);
            *(_WORD *)(result + 4) = *(_WORD *)(v8 + v24 + 4);
            *(_WORD *)(result + 6) = *(_WORD *)(v8 + v24 + 2);
            *v26 = v27;
            v26[1] = v30;
            v26[2] = v29;
            v26[3] = v28;
            ++v25;
            v24 -= 8;
          }
          while (v21 != v25);
        }
        v8 += v23;
        v9 = (_QWORD *)((char *)v9 + v22);
        --a6;
      }
      while (a6);
    }
  }
  else if (a6)
  {
    v13 = -2 * v12;
    v14 = -2 * v11;
    do
    {
      v15 = v9;
      if ((unint64_t)(a5 + 1) >= 3)
      {
        v16 = 0;
        v17 = 0;
        result = v7;
        do
        {
          v18 = &v9[v16];
          *v18 = *(_WORD *)(v8 + v17);
          v18[1] = *(_WORD *)(v8 + v17 + 6);
          v18[2] = *(_WORD *)(v8 + v17 + 4);
          v18[3] = *(_WORD *)(v8 + v17 + 2);
          v17 -= 8;
          ++v16;
          --result;
        }
        while (result);
        v15 = &v9[v17 / 0xFFFFFFFFFFFFFFF8];
      }
      if ((a5 & 1) != 0)
        *v15 = 0x1000800010008000;
      v9 = (_QWORD *)((char *)v9 + v13);
      v8 += v14;
      --a6;
    }
    while (a6);
  }
  return result;
}

uint64_t vt_Flip_v216_Hor(uint64_t *a1, uint64_t a2, unint64_t *a3, uint64_t *a4, _QWORD *a5, uint64_t *a6, unint64_t *a7, uint64_t *a8)
{
  if (*a1 != *a5)
    return 4294954382;
  vtFlipPixelRectHoriz_v216(*a4, *a3, *a8, *a7, *a1, *a6);
  return 0;
}

uint64_t vt_Flip_v216_Ver(_QWORD *a1, uint64_t a2, uint64_t *a3, char **a4, _QWORD *a5, uint64_t *a6, uint64_t *a7, char **a8)
{
  if (*a1 == *a5)
    return vtFlipPixelRectVert(*a4, *a3, *a8, *a7, (unint64_t)(*a1 + 1) >> 1, *a6, 8uLL);
  else
    return 4294954382;
}

uint64_t vt_Copy_2vuyITU601_32ARGB(unint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  _BYTE *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  char v23;
  int v24;
  char v25;
  int v26;
  int v27;
  char v28;
  int v29;
  int v30;
  char v31;
  int v32;
  int v33;
  char v34;
  int v35;
  int v36;
  char v37;

  if (a2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v9 = a1 >> 1;
    if (a1 >> 1 <= 1)
      v9 = 1;
    v10 = *a4 + 1;
    v11 = (_BYTE *)*a6;
    do
    {
      if (a1 >= 2)
      {
        v12 = v9;
        v13 = (unsigned __int8 *)v10;
        v14 = v11;
        do
        {
          v15 = *(v13 - 1) - 128;
          v16 = v13[1] - 128;
          v17 = 38155 * *v13 - 610480;
          v18 = 38155 * v13[2] - 610480;
          v19 = -12836 * v15 - 26638 * v16;
          v20 = 66101 * v15;
          v21 = 52299 * v16;
          v22 = (v21 + v17) >> 15;
          if (v22 >= 255)
            LOBYTE(v22) = -1;
          if (v21 + v17 >= 0)
            v23 = v22;
          else
            v23 = 0;
          v24 = (v19 + v17) >> 15;
          if (v24 >= 255)
            LOBYTE(v24) = -1;
          if (v19 + v17 >= 0)
            v25 = v24;
          else
            v25 = 0;
          v26 = v20 + v17;
          v27 = v26 >> 15;
          if (v26 >> 15 >= 255)
            LOBYTE(v27) = -1;
          if (v26 >= 0)
            v28 = v27;
          else
            v28 = 0;
          v29 = v21 + v18;
          v30 = v29 >> 15;
          if (v29 >> 15 >= 255)
            LOBYTE(v30) = -1;
          if (v29 >= 0)
            v31 = v30;
          else
            v31 = 0;
          v32 = v19 + v18;
          v33 = v32 >> 15;
          if (v32 >> 15 >= 255)
            LOBYTE(v33) = -1;
          if (v32 >= 0)
            v34 = v33;
          else
            v34 = 0;
          v35 = v20 + v18;
          v36 = v35 >> 15;
          *v14 = -1;
          v14[1] = v23;
          if (v35 >> 15 >= 255)
            LOBYTE(v36) = -1;
          v14[2] = v25;
          v14[3] = v28;
          v14[4] = -1;
          v14[5] = v31;
          if (v35 >= 0)
            v37 = v36;
          else
            v37 = 0;
          v14[6] = v34;
          v14[7] = v37;
          v14 += 8;
          v13 += 4;
          --v12;
        }
        while (v12);
      }
      v11 += v8;
      ++v6;
      v10 += v7;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_2vuyITU601_32BGRA(unint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  _BYTE *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  char v23;
  int v24;
  char v25;
  int v26;
  int v27;
  char v28;
  int v29;
  int v30;
  char v31;
  int v32;
  int v33;
  char v34;
  int v35;
  int v36;

  if (a2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v9 = a1 >> 1;
    if (a1 >> 1 <= 1)
      v9 = 1;
    v10 = *a4 + 1;
    v11 = (_BYTE *)*a6;
    do
    {
      if (a1 >= 2)
      {
        v12 = v9;
        v13 = (unsigned __int8 *)v10;
        v14 = v11;
        do
        {
          v15 = *(v13 - 1) - 128;
          v16 = v13[1] - 128;
          v17 = 38155 * *v13 - 610480;
          v18 = 38155 * v13[2] - 610480;
          v19 = -12836 * v15 - 26638 * v16;
          v20 = 66101 * v15;
          v21 = 52299 * v16;
          v22 = (v21 + v17) >> 15;
          if (v22 >= 255)
            LOBYTE(v22) = -1;
          if (v21 + v17 >= 0)
            v23 = v22;
          else
            v23 = 0;
          v24 = (v19 + v17) >> 15;
          if (v24 >= 255)
            LOBYTE(v24) = -1;
          if (v19 + v17 >= 0)
            v25 = v24;
          else
            v25 = 0;
          v26 = v20 + v17;
          v27 = v26 >> 15;
          if (v26 >> 15 >= 255)
            LOBYTE(v27) = -1;
          if (v26 >= 0)
            v28 = v27;
          else
            v28 = 0;
          v29 = v21 + v18;
          v30 = v29 >> 15;
          if (v29 >> 15 >= 255)
            LOBYTE(v30) = -1;
          if (v29 >= 0)
            v31 = v30;
          else
            v31 = 0;
          v32 = v19 + v18;
          v33 = v32 >> 15;
          if (v32 >> 15 >= 255)
            LOBYTE(v33) = -1;
          if (v32 >= 0)
            v34 = v33;
          else
            v34 = 0;
          v35 = v20 + v18;
          *v14 = v28;
          v14[1] = v25;
          if (v35 >> 15 >= 255)
            LOBYTE(v36) = -1;
          else
            v36 = v35 >> 15;
          v14[2] = v23;
          v14[3] = -1;
          if (v35 < 0)
            LOBYTE(v36) = 0;
          v14[4] = v36;
          v14[5] = v34;
          v14[6] = v31;
          v14[7] = -1;
          v14 += 8;
          v13 += 4;
          --v12;
        }
        while (v12);
      }
      v11 += v8;
      ++v6;
      v10 += v7;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_2vuyITU601_24RGB(unint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, uint64_t *a6, double a7, int32x4_t a8, double a9, double a10, double a11, int32x4_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int32x4_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  int v22;
  int32x2_t v23;
  int32x4_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int32x4_t v29;
  int32x4_t v30;
  int8x8_t v31;
  int16x8_t v32;
  char v33;

  if (a2)
  {
    v12 = 0;
    v13 = *a3;
    v14 = *a5;
    v15 = a1 >> 1;
    v16 = *a6;
    if (a1 >> 1 <= 1)
      v15 = 1;
    v17 = *a4 + 1;
    *(int32x2_t *)a8.i8 = vdup_n_s32(0xFFF6AF50);
    v18.i64[0] = 0xFF000000FFLL;
    v18.i64[1] = 0xFF000000FFLL;
    do
    {
      if (a1 >= 2)
      {
        v19 = v15;
        v20 = (unsigned __int8 *)v17;
        v21 = v16;
        do
        {
          v22 = *(v20 - 1) - 128;
          v23.i32[0] = v20[1] - 128;
          v23.i32[1] = v20[2];
          v24 = a8;
          v24.i32[0] = -12836 * v22;
          *(int32x2_t *)v24.i8 = vmla_s32(*(int32x2_t *)v24.i8, v23, (int32x2_t)0x950BFFFF97F2);
          a12.i32[0] = 38155 * *v20 - 610480;
          a12 = vzip1q_s32(a12, v24);
          v25 = 66101 * v22;
          v26 = (v24.i32[0] + v24.i32[1]) >> 15;
          if (v26 >= 255)
            LOBYTE(v26) = -1;
          v27 = v25 + v24.i32[1];
          v28 = (v25 + v24.i32[1]) >> 15;
          if (v24.i32[0] + v24.i32[1] < 0)
            LOBYTE(v26) = 0;
          a12.i32[2] = a12.i32[0];
          v29.i32[2] = v25;
          if (v28 >= 255)
            LOBYTE(v28) = -1;
          v29.i32[3] = 52299 * (v20[1] - 128);
          v29.i32[1] = 38155 * *v20 - 610480;
          v29.i32[0] = v29.i32[3];
          v30 = vaddq_s32(a12, v29);
          v31 = (int8x8_t)vmovn_s32(vcltzq_s32(v30));
          v32 = (int16x8_t)vminq_s32(vshrq_n_s32(v30, 0xFuLL), v18);
          *(int8x8_t *)v32.i8 = vbic_s8((int8x8_t)vmovn_s32((int32x4_t)v32), v31);
          *(_DWORD *)v21 = vmovn_s16(v32).u32[0];
          if (v27 >= 0)
            v33 = v28;
          else
            v33 = 0;
          *(_BYTE *)(v21 + 4) = v26;
          *(_BYTE *)(v21 + 5) = v33;
          v21 += 6;
          v20 += 4;
          --v19;
        }
        while (v19);
      }
      v16 += v14;
      ++v12;
      v17 += v13;
    }
    while (v12 != a2);
  }
  return 0;
}

uint64_t vt_Copy_2vuyITU601_8GRAYSCALE(unint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  _BYTE *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  int v20;
  char v21;

  if (a2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v9 = a1 >> 1;
    v10 = (_BYTE *)*a6;
    if (a1 >> 1 <= 1)
      v9 = 1;
    v11 = *a4 + 3;
    do
    {
      if (a1 >= 2)
      {
        v12 = v9;
        v13 = (unsigned __int8 *)v11;
        v14 = v10;
        do
        {
          v15 = *(v13 - 2);
          v17 = *v13;
          v13 += 4;
          v16 = v17;
          v18 = (38155 * v15 - 610480) >> 15;
          if (v18 >= 0xFF)
            LOBYTE(v18) = -1;
          if (v15 >= 0x10)
            v19 = v18;
          else
            v19 = 0;
          v20 = (int)(38155 * v16 - 610480) >> 15;
          if (v20 >= 255)
            LOBYTE(v20) = -1;
          if (v16 >= 0x10)
            v21 = v20;
          else
            v21 = 0;
          *v14 = ~v19;
          v14[1] = ~v21;
          v14 += 2;
          --v12;
        }
        while (v12);
      }
      v10 += v8;
      ++v6;
      v11 += v7;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_yuvsITU601_32ARGB(unint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  _BYTE *v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  char v23;
  int v24;
  char v25;
  int v26;
  int v27;
  char v28;
  int v29;
  int v30;
  char v31;
  int v32;
  int v33;
  char v34;
  int v35;
  int v36;
  char v37;

  if (a2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v9 = a1 >> 1;
    v10 = (_BYTE *)*a6;
    if (a1 >> 1 <= 1)
      v9 = 1;
    v11 = *a4;
    do
    {
      if (a1 >= 2)
      {
        v12 = v9;
        v13 = v10;
        v14 = v11;
        do
        {
          v15 = v14[1] - 128;
          v16 = v14[3] - 128;
          v17 = 38155 * *v14 - 610480;
          v18 = 38155 * v14[2] - 610480;
          v19 = -12836 * v15 - 26638 * v16;
          v20 = 66101 * v15;
          v21 = 52299 * v16;
          v22 = (v21 + v17) >> 15;
          if (v22 >= 255)
            LOBYTE(v22) = -1;
          if (v21 + v17 >= 0)
            v23 = v22;
          else
            v23 = 0;
          v24 = (v19 + v17) >> 15;
          if (v24 >= 255)
            LOBYTE(v24) = -1;
          if (v19 + v17 >= 0)
            v25 = v24;
          else
            v25 = 0;
          v26 = v20 + v17;
          v27 = v26 >> 15;
          if (v26 >> 15 >= 255)
            LOBYTE(v27) = -1;
          if (v26 >= 0)
            v28 = v27;
          else
            v28 = 0;
          v29 = v21 + v18;
          v30 = v29 >> 15;
          if (v29 >> 15 >= 255)
            LOBYTE(v30) = -1;
          if (v29 >= 0)
            v31 = v30;
          else
            v31 = 0;
          v32 = v19 + v18;
          v33 = v32 >> 15;
          if (v32 >> 15 >= 255)
            LOBYTE(v33) = -1;
          if (v32 >= 0)
            v34 = v33;
          else
            v34 = 0;
          v35 = v20 + v18;
          v36 = v35 >> 15;
          *v13 = -1;
          v13[1] = v23;
          if (v35 >> 15 >= 255)
            LOBYTE(v36) = -1;
          v13[2] = v25;
          v13[3] = v28;
          v13[4] = -1;
          v13[5] = v31;
          if (v35 >= 0)
            v37 = v36;
          else
            v37 = 0;
          v13[6] = v34;
          v13[7] = v37;
          v14 += 4;
          v13 += 8;
          --v12;
        }
        while (v12);
      }
      v11 += v7;
      v10 += v8;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_yuvsITU601_32BGRA(unint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  _BYTE *v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  char v23;
  int v24;
  char v25;
  int v26;
  int v27;
  char v28;
  int v29;
  int v30;
  char v31;
  int v32;
  int v33;
  char v34;
  int v35;
  int v36;

  if (a2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v9 = a1 >> 1;
    v10 = (_BYTE *)*a6;
    if (a1 >> 1 <= 1)
      v9 = 1;
    v11 = *a4;
    do
    {
      if (a1 >= 2)
      {
        v12 = v9;
        v13 = v10;
        v14 = v11;
        do
        {
          v15 = v14[1] - 128;
          v16 = v14[3] - 128;
          v17 = 38155 * *v14 - 610480;
          v18 = 38155 * v14[2] - 610480;
          v19 = -12836 * v15 - 26638 * v16;
          v20 = 66101 * v15;
          v21 = 52299 * v16;
          v22 = (v21 + v17) >> 15;
          if (v22 >= 255)
            LOBYTE(v22) = -1;
          if (v21 + v17 >= 0)
            v23 = v22;
          else
            v23 = 0;
          v24 = (v19 + v17) >> 15;
          if (v24 >= 255)
            LOBYTE(v24) = -1;
          if (v19 + v17 >= 0)
            v25 = v24;
          else
            v25 = 0;
          v26 = v20 + v17;
          v27 = v26 >> 15;
          if (v26 >> 15 >= 255)
            LOBYTE(v27) = -1;
          if (v26 >= 0)
            v28 = v27;
          else
            v28 = 0;
          v29 = v21 + v18;
          v30 = v29 >> 15;
          if (v29 >> 15 >= 255)
            LOBYTE(v30) = -1;
          if (v29 >= 0)
            v31 = v30;
          else
            v31 = 0;
          v32 = v19 + v18;
          v33 = v32 >> 15;
          if (v32 >> 15 >= 255)
            LOBYTE(v33) = -1;
          if (v32 >= 0)
            v34 = v33;
          else
            v34 = 0;
          v35 = v20 + v18;
          *v13 = v28;
          v13[1] = v25;
          if (v35 >> 15 >= 255)
            LOBYTE(v36) = -1;
          else
            v36 = v35 >> 15;
          v13[2] = v23;
          v13[3] = -1;
          if (v35 < 0)
            LOBYTE(v36) = 0;
          v13[4] = v36;
          v13[5] = v34;
          v13[6] = v31;
          v13[7] = -1;
          v14 += 4;
          v13 += 8;
          --v12;
        }
        while (v12);
      }
      v11 += v7;
      v10 += v8;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_yuvsITU601_24RGB(unint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, uint64_t *a6, double a7, int32x4_t a8, double a9, double a10, double a11, int32x4_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int32x4_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  int v22;
  int32x2_t v23;
  int32x4_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int32x4_t v29;
  int32x4_t v30;
  int8x8_t v31;
  int16x8_t v32;
  char v33;

  if (a2)
  {
    v12 = 0;
    v13 = *a3;
    v14 = *a5;
    v15 = a1 >> 1;
    v16 = *a6;
    v17 = *a4;
    if (a1 >> 1 <= 1)
      v15 = 1;
    *(int32x2_t *)a8.i8 = vdup_n_s32(0xFFF6AF50);
    v18.i64[0] = 0xFF000000FFLL;
    v18.i64[1] = 0xFF000000FFLL;
    do
    {
      if (a1 >= 2)
      {
        v19 = v15;
        v20 = v16;
        v21 = v17;
        do
        {
          v22 = v21[1] - 128;
          v23.i32[0] = v21[3] - 128;
          v23.i32[1] = v21[2];
          v24 = a8;
          v24.i32[0] = -12836 * v22;
          *(int32x2_t *)v24.i8 = vmla_s32(*(int32x2_t *)v24.i8, v23, (int32x2_t)0x950BFFFF97F2);
          a12.i32[0] = 38155 * *v21 - 610480;
          a12 = vzip1q_s32(a12, v24);
          v25 = 66101 * v22;
          v26 = (v24.i32[0] + v24.i32[1]) >> 15;
          if (v26 >= 255)
            LOBYTE(v26) = -1;
          v27 = v25 + v24.i32[1];
          v28 = (v25 + v24.i32[1]) >> 15;
          if (v24.i32[0] + v24.i32[1] < 0)
            LOBYTE(v26) = 0;
          a12.i32[2] = a12.i32[0];
          v29.i32[2] = v25;
          if (v28 >= 255)
            LOBYTE(v28) = -1;
          v29.i32[3] = 52299 * (v21[3] - 128);
          v29.i32[1] = 38155 * *v21 - 610480;
          v29.i32[0] = v29.i32[3];
          v30 = vaddq_s32(a12, v29);
          v31 = (int8x8_t)vmovn_s32(vcltzq_s32(v30));
          v32 = (int16x8_t)vminq_s32(vshrq_n_s32(v30, 0xFuLL), v18);
          *(int8x8_t *)v32.i8 = vbic_s8((int8x8_t)vmovn_s32((int32x4_t)v32), v31);
          *(_DWORD *)v20 = vmovn_s16(v32).u32[0];
          if (v27 >= 0)
            v33 = v28;
          else
            v33 = 0;
          *(_BYTE *)(v20 + 4) = v26;
          *(_BYTE *)(v20 + 5) = v33;
          v21 += 4;
          v20 += 6;
          --v19;
        }
        while (v19);
      }
      v17 += v13;
      v16 += v14;
      ++v12;
    }
    while (v12 != a2);
  }
  return 0;
}

uint64_t vt_Copy_yuvsITU601_8GRAYSCALE(unint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  _BYTE *v13;
  unsigned __int8 *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  int v19;
  char v20;

  if (a2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v9 = a1 >> 1;
    v10 = (_BYTE *)*a6;
    v11 = *a4;
    if (a1 >> 1 <= 1)
      v9 = 1;
    do
    {
      if (a1 >= 2)
      {
        v12 = v9;
        v13 = v10;
        v14 = v11;
        do
        {
          v15 = *v14;
          v16 = v14[2];
          v17 = (38155 * v15 - 610480) >> 15;
          if (v17 >= 0xFF)
            LOBYTE(v17) = -1;
          if (v15 >= 0x10)
            v18 = v17;
          else
            v18 = 0;
          v19 = (int)(38155 * v16 - 610480) >> 15;
          if (v19 >= 255)
            LOBYTE(v19) = -1;
          if (v16 >= 0x10)
            v20 = v19;
          else
            v20 = 0;
          *v13 = ~v18;
          v13[1] = ~v20;
          v14 += 4;
          v13 += 2;
          --v12;
        }
        while (v12);
      }
      v11 += v7;
      v10 += v8;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_a2vyITU601_32ARGB(unint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  _BYTE *v16;
  _BYTE *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  char v26;
  int v27;
  char v28;
  int v29;
  int v30;
  char v31;
  int v32;
  int v33;
  char v34;
  int v35;
  int v36;
  char v37;
  int v38;
  int v39;
  char v40;

  if (a2)
  {
    v6 = 0;
    v7 = *a5;
    v8 = *a3;
    v9 = a3[1];
    v10 = a1 >> 1;
    v11 = (_BYTE *)a4[1];
    if (a1 >> 1 <= 1)
      v10 = 1;
    v12 = *a4 + 1;
    v13 = (_BYTE *)*a6;
    do
    {
      if (a1 >= 2)
      {
        v14 = v10;
        v15 = (unsigned __int8 *)v12;
        v16 = v13;
        v17 = v11;
        do
        {
          v18 = *(v15 - 1) - 128;
          v19 = v15[1] - 128;
          v20 = 38155 * *v15 - 610480;
          v21 = 38155 * v15[2] - 610480;
          v22 = -12836 * v18 - 26638 * v19;
          v23 = 66101 * v18;
          v24 = 52299 * v19;
          v25 = (v24 + v20) >> 15;
          if (v25 >= 255)
            LOBYTE(v25) = -1;
          if (v24 + v20 >= 0)
            v26 = v25;
          else
            v26 = 0;
          v27 = (v22 + v20) >> 15;
          if (v27 >= 255)
            LOBYTE(v27) = -1;
          if (v22 + v20 >= 0)
            v28 = v27;
          else
            v28 = 0;
          v29 = v23 + v20;
          v30 = v29 >> 15;
          if (v29 >> 15 >= 255)
            LOBYTE(v30) = -1;
          if (v29 >= 0)
            v31 = v30;
          else
            v31 = 0;
          v32 = v24 + v21;
          v33 = v32 >> 15;
          if (v32 >> 15 >= 255)
            LOBYTE(v33) = -1;
          if (v32 >= 0)
            v34 = v33;
          else
            v34 = 0;
          v35 = v22 + v21;
          v36 = v35 >> 15;
          if (v35 >> 15 >= 255)
            LOBYTE(v36) = -1;
          if (v35 >= 0)
            v37 = v36;
          else
            v37 = 0;
          v38 = v23 + v21;
          v39 = v38 >> 15;
          if (v38 >> 15 >= 255)
            LOBYTE(v39) = -1;
          *v16 = *v17;
          v16[1] = v26;
          v16[2] = v28;
          v16[3] = v31;
          if (v38 >= 0)
            v40 = v39;
          else
            v40 = 0;
          v16[4] = v17[1];
          v16[5] = v34;
          v16[6] = v37;
          v16[7] = v40;
          v16 += 8;
          v15 += 4;
          v17 += 2;
          --v14;
        }
        while (v14);
      }
      v11 += v9;
      v13 += v7;
      ++v6;
      v12 += v8;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_a2vyITU601_32BGRA(unint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  _BYTE *v16;
  _BYTE *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  char v26;
  int v27;
  char v28;
  int v29;
  int v30;
  char v31;
  int v32;
  int v33;
  char v34;
  int v35;
  int v36;
  char v37;
  int v38;
  int v39;
  char v40;

  if (a2)
  {
    v6 = 0;
    v7 = *a5;
    v8 = *a3;
    v9 = a3[1];
    v10 = a1 >> 1;
    v11 = (_BYTE *)a4[1];
    if (a1 >> 1 <= 1)
      v10 = 1;
    v12 = *a4 + 1;
    v13 = (_BYTE *)*a6;
    do
    {
      if (a1 >= 2)
      {
        v14 = v10;
        v15 = (unsigned __int8 *)v12;
        v16 = v13;
        v17 = v11;
        do
        {
          v18 = *(v15 - 1) - 128;
          v19 = v15[1] - 128;
          v20 = 38155 * *v15 - 610480;
          v21 = 38155 * v15[2] - 610480;
          v22 = -12836 * v18 - 26638 * v19;
          v23 = 66101 * v18;
          v24 = 52299 * v19;
          v25 = (v24 + v20) >> 15;
          if (v25 >= 255)
            LOBYTE(v25) = -1;
          if (v24 + v20 >= 0)
            v26 = v25;
          else
            v26 = 0;
          v27 = (v22 + v20) >> 15;
          if (v27 >= 255)
            LOBYTE(v27) = -1;
          if (v22 + v20 >= 0)
            v28 = v27;
          else
            v28 = 0;
          v29 = v23 + v20;
          v30 = v29 >> 15;
          if (v29 >> 15 >= 255)
            LOBYTE(v30) = -1;
          if (v29 >= 0)
            v31 = v30;
          else
            v31 = 0;
          v32 = v24 + v21;
          v33 = v32 >> 15;
          if (v32 >> 15 >= 255)
            LOBYTE(v33) = -1;
          if (v32 >= 0)
            v34 = v33;
          else
            v34 = 0;
          v35 = v22 + v21;
          v36 = v35 >> 15;
          if (v35 >> 15 >= 255)
            LOBYTE(v36) = -1;
          if (v35 >= 0)
            v37 = v36;
          else
            v37 = 0;
          v38 = v23 + v21;
          v39 = v38 >> 15;
          if (v38 >> 15 >= 255)
            LOBYTE(v39) = -1;
          if (v38 >= 0)
            v40 = v39;
          else
            v40 = 0;
          *v16 = v31;
          v16[1] = v28;
          v16[2] = v26;
          v16[3] = *v17;
          v16[4] = v40;
          v16[5] = v37;
          v16[6] = v34;
          v16[7] = v17[1];
          v16 += 8;
          v15 += 4;
          v17 += 2;
          --v14;
        }
        while (v14);
      }
      v11 += v9;
      v13 += v7;
      ++v6;
      v12 += v8;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_a2vyITU601_24RGB(unint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, uint64_t *a6, double a7, int32x4_t a8, double a9, double a10, double a11, int32x4_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int32x4_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  int v22;
  int32x2_t v23;
  int32x4_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int32x4_t v29;
  int32x4_t v30;
  int8x8_t v31;
  int16x8_t v32;
  char v33;

  if (a2)
  {
    v12 = 0;
    v13 = *a3;
    v14 = *a5;
    v15 = a1 >> 1;
    v16 = *a6;
    if (a1 >> 1 <= 1)
      v15 = 1;
    v17 = *a4 + 1;
    *(int32x2_t *)a8.i8 = vdup_n_s32(0xFFF6AF50);
    v18.i64[0] = 0xFF000000FFLL;
    v18.i64[1] = 0xFF000000FFLL;
    do
    {
      if (a1 >= 2)
      {
        v19 = v15;
        v20 = (unsigned __int8 *)v17;
        v21 = v16;
        do
        {
          v22 = *(v20 - 1) - 128;
          v23.i32[0] = v20[1] - 128;
          v23.i32[1] = v20[2];
          v24 = a8;
          v24.i32[0] = -12836 * v22;
          *(int32x2_t *)v24.i8 = vmla_s32(*(int32x2_t *)v24.i8, v23, (int32x2_t)0x950BFFFF97F2);
          a12.i32[0] = 38155 * *v20 - 610480;
          a12 = vzip1q_s32(a12, v24);
          v25 = 66101 * v22;
          v26 = (v24.i32[0] + v24.i32[1]) >> 15;
          if (v26 >= 255)
            LOBYTE(v26) = -1;
          v27 = v25 + v24.i32[1];
          v28 = (v25 + v24.i32[1]) >> 15;
          if (v24.i32[0] + v24.i32[1] < 0)
            LOBYTE(v26) = 0;
          a12.i32[2] = a12.i32[0];
          v29.i32[2] = v25;
          if (v28 >= 255)
            LOBYTE(v28) = -1;
          v29.i32[3] = 52299 * (v20[1] - 128);
          v29.i32[1] = 38155 * *v20 - 610480;
          v29.i32[0] = v29.i32[3];
          v30 = vaddq_s32(a12, v29);
          v31 = (int8x8_t)vmovn_s32(vcltzq_s32(v30));
          v32 = (int16x8_t)vminq_s32(vshrq_n_s32(v30, 0xFuLL), v18);
          *(int8x8_t *)v32.i8 = vbic_s8((int8x8_t)vmovn_s32((int32x4_t)v32), v31);
          *(_DWORD *)v21 = vmovn_s16(v32).u32[0];
          if (v27 >= 0)
            v33 = v28;
          else
            v33 = 0;
          *(_BYTE *)(v21 + 4) = v26;
          *(_BYTE *)(v21 + 5) = v33;
          v21 += 6;
          v20 += 4;
          --v19;
        }
        while (v19);
      }
      v16 += v14;
      ++v12;
      v17 += v13;
    }
    while (v12 != a2);
  }
  return 0;
}

uint64_t vt_Copy_a2vyITU601_8GRAYSCALE(unint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  _BYTE *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  int v20;
  char v21;

  if (a2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v9 = a1 >> 1;
    v10 = (_BYTE *)*a6;
    if (a1 >> 1 <= 1)
      v9 = 1;
    v11 = *a4 + 3;
    do
    {
      if (a1 >= 2)
      {
        v12 = v9;
        v13 = (unsigned __int8 *)v11;
        v14 = v10;
        do
        {
          v15 = *(v13 - 2);
          v17 = *v13;
          v13 += 4;
          v16 = v17;
          v18 = (38155 * v15 - 610480) >> 15;
          if (v18 >= 0xFF)
            LOBYTE(v18) = -1;
          if (v15 >= 0x10)
            v19 = v18;
          else
            v19 = 0;
          v20 = (int)(38155 * v16 - 610480) >> 15;
          if (v20 >= 255)
            LOBYTE(v20) = -1;
          if (v16 >= 0x10)
            v21 = v20;
          else
            v21 = 0;
          *v14 = ~v19;
          v14[1] = ~v21;
          v14 += 2;
          --v12;
        }
        while (v12);
      }
      v10 += v8;
      ++v6;
      v11 += v7;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_2vuyITU709_32ARGB(unint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  _BYTE *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  char v23;
  int v24;
  char v25;
  int v26;
  int v27;
  char v28;
  int v29;
  int v30;
  char v31;
  int v32;
  int v33;
  char v34;
  int v35;
  int v36;
  char v37;

  if (a2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v9 = a1 >> 1;
    if (a1 >> 1 <= 1)
      v9 = 1;
    v10 = *a4 + 1;
    v11 = (_BYTE *)*a6;
    do
    {
      if (a1 >= 2)
      {
        v12 = v9;
        v13 = (unsigned __int8 *)v10;
        v14 = v11;
        do
        {
          v15 = *(v13 - 1) - 128;
          v16 = v13[1] - 128;
          v17 = 38155 * *v13 - 610480;
          v18 = 38155 * v13[2] - 610480;
          v19 = -6987 * v15 - 17461 * v16;
          v20 = 69219 * v15;
          v21 = 58745 * v16;
          v22 = (v21 + v17) >> 15;
          if (v22 >= 255)
            LOBYTE(v22) = -1;
          if (v21 + v17 >= 0)
            v23 = v22;
          else
            v23 = 0;
          v24 = (v19 + v17) >> 15;
          if (v24 >= 255)
            LOBYTE(v24) = -1;
          if (v19 + v17 >= 0)
            v25 = v24;
          else
            v25 = 0;
          v26 = v20 + v17;
          v27 = v26 >> 15;
          if (v26 >> 15 >= 255)
            LOBYTE(v27) = -1;
          if (v26 >= 0)
            v28 = v27;
          else
            v28 = 0;
          v29 = v21 + v18;
          v30 = v29 >> 15;
          if (v29 >> 15 >= 255)
            LOBYTE(v30) = -1;
          if (v29 >= 0)
            v31 = v30;
          else
            v31 = 0;
          v32 = v19 + v18;
          v33 = v32 >> 15;
          if (v32 >> 15 >= 255)
            LOBYTE(v33) = -1;
          if (v32 >= 0)
            v34 = v33;
          else
            v34 = 0;
          v35 = v20 + v18;
          v36 = v35 >> 15;
          *v14 = -1;
          v14[1] = v23;
          if (v35 >> 15 >= 255)
            LOBYTE(v36) = -1;
          v14[2] = v25;
          v14[3] = v28;
          v14[4] = -1;
          v14[5] = v31;
          if (v35 >= 0)
            v37 = v36;
          else
            v37 = 0;
          v14[6] = v34;
          v14[7] = v37;
          v14 += 8;
          v13 += 4;
          --v12;
        }
        while (v12);
      }
      v11 += v8;
      ++v6;
      v10 += v7;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_2vuyITU709_32BGRA(unint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  _BYTE *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  char v23;
  int v24;
  char v25;
  int v26;
  int v27;
  char v28;
  int v29;
  int v30;
  char v31;
  int v32;
  int v33;
  char v34;
  int v35;
  int v36;

  if (a2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v9 = a1 >> 1;
    if (a1 >> 1 <= 1)
      v9 = 1;
    v10 = *a4 + 1;
    v11 = (_BYTE *)*a6;
    do
    {
      if (a1 >= 2)
      {
        v12 = v9;
        v13 = (unsigned __int8 *)v10;
        v14 = v11;
        do
        {
          v15 = *(v13 - 1) - 128;
          v16 = v13[1] - 128;
          v17 = 38155 * *v13 - 610480;
          v18 = 38155 * v13[2] - 610480;
          v19 = -6987 * v15 - 17461 * v16;
          v20 = 69219 * v15;
          v21 = 58745 * v16;
          v22 = (v21 + v17) >> 15;
          if (v22 >= 255)
            LOBYTE(v22) = -1;
          if (v21 + v17 >= 0)
            v23 = v22;
          else
            v23 = 0;
          v24 = (v19 + v17) >> 15;
          if (v24 >= 255)
            LOBYTE(v24) = -1;
          if (v19 + v17 >= 0)
            v25 = v24;
          else
            v25 = 0;
          v26 = v20 + v17;
          v27 = v26 >> 15;
          if (v26 >> 15 >= 255)
            LOBYTE(v27) = -1;
          if (v26 >= 0)
            v28 = v27;
          else
            v28 = 0;
          v29 = v21 + v18;
          v30 = v29 >> 15;
          if (v29 >> 15 >= 255)
            LOBYTE(v30) = -1;
          if (v29 >= 0)
            v31 = v30;
          else
            v31 = 0;
          v32 = v19 + v18;
          v33 = v32 >> 15;
          if (v32 >> 15 >= 255)
            LOBYTE(v33) = -1;
          if (v32 >= 0)
            v34 = v33;
          else
            v34 = 0;
          v35 = v20 + v18;
          *v14 = v28;
          v14[1] = v25;
          if (v35 >> 15 >= 255)
            LOBYTE(v36) = -1;
          else
            v36 = v35 >> 15;
          v14[2] = v23;
          v14[3] = -1;
          if (v35 < 0)
            LOBYTE(v36) = 0;
          v14[4] = v36;
          v14[5] = v34;
          v14[6] = v31;
          v14[7] = -1;
          v14 += 8;
          v13 += 4;
          --v12;
        }
        while (v12);
      }
      v11 += v8;
      ++v6;
      v10 += v7;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_2vuyITU709_24RGB(unint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, uint64_t *a6, double a7, int32x4_t a8, double a9, double a10, double a11, int32x4_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int32x4_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  int v22;
  int32x2_t v23;
  int32x4_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int32x4_t v29;
  int32x4_t v30;
  int8x8_t v31;
  int16x8_t v32;
  char v33;

  if (a2)
  {
    v12 = 0;
    v13 = *a3;
    v14 = *a5;
    v15 = a1 >> 1;
    v16 = *a6;
    if (a1 >> 1 <= 1)
      v15 = 1;
    v17 = *a4 + 1;
    *(int32x2_t *)a8.i8 = vdup_n_s32(0xFFF6AF50);
    v18.i64[0] = 0xFF000000FFLL;
    v18.i64[1] = 0xFF000000FFLL;
    do
    {
      if (a1 >= 2)
      {
        v19 = v15;
        v20 = (unsigned __int8 *)v17;
        v21 = v16;
        do
        {
          v22 = *(v20 - 1) - 128;
          v23.i32[0] = v20[1] - 128;
          v23.i32[1] = v20[2];
          v24 = a8;
          v24.i32[0] = -6987 * v22;
          *(int32x2_t *)v24.i8 = vmla_s32(*(int32x2_t *)v24.i8, v23, (int32x2_t)0x950BFFFFBBCBLL);
          a12.i32[0] = 38155 * *v20 - 610480;
          a12 = vzip1q_s32(a12, v24);
          v25 = 69219 * v22;
          v26 = (v24.i32[0] + v24.i32[1]) >> 15;
          if (v26 >= 255)
            LOBYTE(v26) = -1;
          v27 = v25 + v24.i32[1];
          v28 = (v25 + v24.i32[1]) >> 15;
          if (v24.i32[0] + v24.i32[1] < 0)
            LOBYTE(v26) = 0;
          a12.i32[2] = a12.i32[0];
          v29.i32[2] = v25;
          if (v28 >= 255)
            LOBYTE(v28) = -1;
          v29.i32[3] = 58745 * (v20[1] - 128);
          v29.i32[1] = 38155 * *v20 - 610480;
          v29.i32[0] = v29.i32[3];
          v30 = vaddq_s32(a12, v29);
          v31 = (int8x8_t)vmovn_s32(vcltzq_s32(v30));
          v32 = (int16x8_t)vminq_s32(vshrq_n_s32(v30, 0xFuLL), v18);
          *(int8x8_t *)v32.i8 = vbic_s8((int8x8_t)vmovn_s32((int32x4_t)v32), v31);
          *(_DWORD *)v21 = vmovn_s16(v32).u32[0];
          if (v27 >= 0)
            v33 = v28;
          else
            v33 = 0;
          *(_BYTE *)(v21 + 4) = v26;
          *(_BYTE *)(v21 + 5) = v33;
          v21 += 6;
          v20 += 4;
          --v19;
        }
        while (v19);
      }
      v16 += v14;
      ++v12;
      v17 += v13;
    }
    while (v12 != a2);
  }
  return 0;
}

uint64_t vt_Copy_2vuyITU709_8GRAYSCALE(unint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  _BYTE *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  int v20;
  char v21;

  if (a2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v9 = a1 >> 1;
    v10 = (_BYTE *)*a6;
    if (a1 >> 1 <= 1)
      v9 = 1;
    v11 = *a4 + 3;
    do
    {
      if (a1 >= 2)
      {
        v12 = v9;
        v13 = (unsigned __int8 *)v11;
        v14 = v10;
        do
        {
          v15 = *(v13 - 2);
          v17 = *v13;
          v13 += 4;
          v16 = v17;
          v18 = (38155 * v15 - 610480) >> 15;
          if (v18 >= 0xFF)
            LOBYTE(v18) = -1;
          if (v15 >= 0x10)
            v19 = v18;
          else
            v19 = 0;
          v20 = (int)(38155 * v16 - 610480) >> 15;
          if (v20 >= 255)
            LOBYTE(v20) = -1;
          if (v16 >= 0x10)
            v21 = v20;
          else
            v21 = 0;
          *v14 = ~v19;
          v14[1] = ~v21;
          v14 += 2;
          --v12;
        }
        while (v12);
      }
      v10 += v8;
      ++v6;
      v11 += v7;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_yuvsITU709_32ARGB(unint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  _BYTE *v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  char v23;
  int v24;
  char v25;
  int v26;
  int v27;
  char v28;
  int v29;
  int v30;
  char v31;
  int v32;
  int v33;
  char v34;
  int v35;
  int v36;
  char v37;

  if (a2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v9 = a1 >> 1;
    v10 = (_BYTE *)*a6;
    if (a1 >> 1 <= 1)
      v9 = 1;
    v11 = *a4;
    do
    {
      if (a1 >= 2)
      {
        v12 = v9;
        v13 = v10;
        v14 = v11;
        do
        {
          v15 = v14[1] - 128;
          v16 = v14[3] - 128;
          v17 = 38155 * *v14 - 610480;
          v18 = 38155 * v14[2] - 610480;
          v19 = -6987 * v15 - 17461 * v16;
          v20 = 69219 * v15;
          v21 = 58745 * v16;
          v22 = (v21 + v17) >> 15;
          if (v22 >= 255)
            LOBYTE(v22) = -1;
          if (v21 + v17 >= 0)
            v23 = v22;
          else
            v23 = 0;
          v24 = (v19 + v17) >> 15;
          if (v24 >= 255)
            LOBYTE(v24) = -1;
          if (v19 + v17 >= 0)
            v25 = v24;
          else
            v25 = 0;
          v26 = v20 + v17;
          v27 = v26 >> 15;
          if (v26 >> 15 >= 255)
            LOBYTE(v27) = -1;
          if (v26 >= 0)
            v28 = v27;
          else
            v28 = 0;
          v29 = v21 + v18;
          v30 = v29 >> 15;
          if (v29 >> 15 >= 255)
            LOBYTE(v30) = -1;
          if (v29 >= 0)
            v31 = v30;
          else
            v31 = 0;
          v32 = v19 + v18;
          v33 = v32 >> 15;
          if (v32 >> 15 >= 255)
            LOBYTE(v33) = -1;
          if (v32 >= 0)
            v34 = v33;
          else
            v34 = 0;
          v35 = v20 + v18;
          v36 = v35 >> 15;
          *v13 = -1;
          v13[1] = v23;
          if (v35 >> 15 >= 255)
            LOBYTE(v36) = -1;
          v13[2] = v25;
          v13[3] = v28;
          v13[4] = -1;
          v13[5] = v31;
          if (v35 >= 0)
            v37 = v36;
          else
            v37 = 0;
          v13[6] = v34;
          v13[7] = v37;
          v14 += 4;
          v13 += 8;
          --v12;
        }
        while (v12);
      }
      v11 += v7;
      v10 += v8;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_yuvsITU709_32BGRA(unint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  _BYTE *v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  char v23;
  int v24;
  char v25;
  int v26;
  int v27;
  char v28;
  int v29;
  int v30;
  char v31;
  int v32;
  int v33;
  char v34;
  int v35;
  int v36;

  if (a2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v9 = a1 >> 1;
    v10 = (_BYTE *)*a6;
    if (a1 >> 1 <= 1)
      v9 = 1;
    v11 = *a4;
    do
    {
      if (a1 >= 2)
      {
        v12 = v9;
        v13 = v10;
        v14 = v11;
        do
        {
          v15 = v14[1] - 128;
          v16 = v14[3] - 128;
          v17 = 38155 * *v14 - 610480;
          v18 = 38155 * v14[2] - 610480;
          v19 = -6987 * v15 - 17461 * v16;
          v20 = 69219 * v15;
          v21 = 58745 * v16;
          v22 = (v21 + v17) >> 15;
          if (v22 >= 255)
            LOBYTE(v22) = -1;
          if (v21 + v17 >= 0)
            v23 = v22;
          else
            v23 = 0;
          v24 = (v19 + v17) >> 15;
          if (v24 >= 255)
            LOBYTE(v24) = -1;
          if (v19 + v17 >= 0)
            v25 = v24;
          else
            v25 = 0;
          v26 = v20 + v17;
          v27 = v26 >> 15;
          if (v26 >> 15 >= 255)
            LOBYTE(v27) = -1;
          if (v26 >= 0)
            v28 = v27;
          else
            v28 = 0;
          v29 = v21 + v18;
          v30 = v29 >> 15;
          if (v29 >> 15 >= 255)
            LOBYTE(v30) = -1;
          if (v29 >= 0)
            v31 = v30;
          else
            v31 = 0;
          v32 = v19 + v18;
          v33 = v32 >> 15;
          if (v32 >> 15 >= 255)
            LOBYTE(v33) = -1;
          if (v32 >= 0)
            v34 = v33;
          else
            v34 = 0;
          v35 = v20 + v18;
          *v13 = v28;
          v13[1] = v25;
          if (v35 >> 15 >= 255)
            LOBYTE(v36) = -1;
          else
            v36 = v35 >> 15;
          v13[2] = v23;
          v13[3] = -1;
          if (v35 < 0)
            LOBYTE(v36) = 0;
          v13[4] = v36;
          v13[5] = v34;
          v13[6] = v31;
          v13[7] = -1;
          v14 += 4;
          v13 += 8;
          --v12;
        }
        while (v12);
      }
      v11 += v7;
      v10 += v8;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_yuvsITU709_24RGB(unint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, uint64_t *a6, double a7, int32x4_t a8, double a9, double a10, double a11, int32x4_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int32x4_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  int v22;
  int32x2_t v23;
  int32x4_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int32x4_t v29;
  int32x4_t v30;
  int8x8_t v31;
  int16x8_t v32;
  char v33;

  if (a2)
  {
    v12 = 0;
    v13 = *a3;
    v14 = *a5;
    v15 = a1 >> 1;
    v16 = *a6;
    v17 = *a4;
    if (a1 >> 1 <= 1)
      v15 = 1;
    *(int32x2_t *)a8.i8 = vdup_n_s32(0xFFF6AF50);
    v18.i64[0] = 0xFF000000FFLL;
    v18.i64[1] = 0xFF000000FFLL;
    do
    {
      if (a1 >= 2)
      {
        v19 = v15;
        v20 = v16;
        v21 = v17;
        do
        {
          v22 = v21[1] - 128;
          v23.i32[0] = v21[3] - 128;
          v23.i32[1] = v21[2];
          v24 = a8;
          v24.i32[0] = -6987 * v22;
          *(int32x2_t *)v24.i8 = vmla_s32(*(int32x2_t *)v24.i8, v23, (int32x2_t)0x950BFFFFBBCBLL);
          a12.i32[0] = 38155 * *v21 - 610480;
          a12 = vzip1q_s32(a12, v24);
          v25 = 69219 * v22;
          v26 = (v24.i32[0] + v24.i32[1]) >> 15;
          if (v26 >= 255)
            LOBYTE(v26) = -1;
          v27 = v25 + v24.i32[1];
          v28 = (v25 + v24.i32[1]) >> 15;
          if (v24.i32[0] + v24.i32[1] < 0)
            LOBYTE(v26) = 0;
          a12.i32[2] = a12.i32[0];
          v29.i32[2] = v25;
          if (v28 >= 255)
            LOBYTE(v28) = -1;
          v29.i32[3] = 58745 * (v21[3] - 128);
          v29.i32[1] = 38155 * *v21 - 610480;
          v29.i32[0] = v29.i32[3];
          v30 = vaddq_s32(a12, v29);
          v31 = (int8x8_t)vmovn_s32(vcltzq_s32(v30));
          v32 = (int16x8_t)vminq_s32(vshrq_n_s32(v30, 0xFuLL), v18);
          *(int8x8_t *)v32.i8 = vbic_s8((int8x8_t)vmovn_s32((int32x4_t)v32), v31);
          *(_DWORD *)v20 = vmovn_s16(v32).u32[0];
          if (v27 >= 0)
            v33 = v28;
          else
            v33 = 0;
          *(_BYTE *)(v20 + 4) = v26;
          *(_BYTE *)(v20 + 5) = v33;
          v21 += 4;
          v20 += 6;
          --v19;
        }
        while (v19);
      }
      v17 += v13;
      v16 += v14;
      ++v12;
    }
    while (v12 != a2);
  }
  return 0;
}

uint64_t vt_Copy_yuvsITU709_8GRAYSCALE(unint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  _BYTE *v13;
  unsigned __int8 *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  int v19;
  char v20;

  if (a2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v9 = a1 >> 1;
    v10 = (_BYTE *)*a6;
    v11 = *a4;
    if (a1 >> 1 <= 1)
      v9 = 1;
    do
    {
      if (a1 >= 2)
      {
        v12 = v9;
        v13 = v10;
        v14 = v11;
        do
        {
          v15 = *v14;
          v16 = v14[2];
          v17 = (38155 * v15 - 610480) >> 15;
          if (v17 >= 0xFF)
            LOBYTE(v17) = -1;
          if (v15 >= 0x10)
            v18 = v17;
          else
            v18 = 0;
          v19 = (int)(38155 * v16 - 610480) >> 15;
          if (v19 >= 255)
            LOBYTE(v19) = -1;
          if (v16 >= 0x10)
            v20 = v19;
          else
            v20 = 0;
          *v13 = ~v18;
          v13[1] = ~v20;
          v14 += 4;
          v13 += 2;
          --v12;
        }
        while (v12);
      }
      v11 += v7;
      v10 += v8;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_a2vyITU709_32ARGB(unint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  _BYTE *v16;
  _BYTE *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  char v26;
  int v27;
  char v28;
  int v29;
  int v30;
  char v31;
  int v32;
  int v33;
  char v34;
  int v35;
  int v36;
  char v37;
  int v38;
  int v39;
  char v40;

  if (a2)
  {
    v6 = 0;
    v7 = *a5;
    v8 = *a3;
    v9 = a3[1];
    v10 = a1 >> 1;
    v11 = (_BYTE *)a4[1];
    if (a1 >> 1 <= 1)
      v10 = 1;
    v12 = *a4 + 1;
    v13 = (_BYTE *)*a6;
    do
    {
      if (a1 >= 2)
      {
        v14 = v10;
        v15 = (unsigned __int8 *)v12;
        v16 = v13;
        v17 = v11;
        do
        {
          v18 = *(v15 - 1) - 128;
          v19 = v15[1] - 128;
          v20 = 38155 * *v15 - 610480;
          v21 = 38155 * v15[2] - 610480;
          v22 = -6987 * v18 - 17461 * v19;
          v23 = 69219 * v18;
          v24 = 58745 * v19;
          v25 = (v24 + v20) >> 15;
          if (v25 >= 255)
            LOBYTE(v25) = -1;
          if (v24 + v20 >= 0)
            v26 = v25;
          else
            v26 = 0;
          v27 = (v22 + v20) >> 15;
          if (v27 >= 255)
            LOBYTE(v27) = -1;
          if (v22 + v20 >= 0)
            v28 = v27;
          else
            v28 = 0;
          v29 = v23 + v20;
          v30 = v29 >> 15;
          if (v29 >> 15 >= 255)
            LOBYTE(v30) = -1;
          if (v29 >= 0)
            v31 = v30;
          else
            v31 = 0;
          v32 = v24 + v21;
          v33 = v32 >> 15;
          if (v32 >> 15 >= 255)
            LOBYTE(v33) = -1;
          if (v32 >= 0)
            v34 = v33;
          else
            v34 = 0;
          v35 = v22 + v21;
          v36 = v35 >> 15;
          if (v35 >> 15 >= 255)
            LOBYTE(v36) = -1;
          if (v35 >= 0)
            v37 = v36;
          else
            v37 = 0;
          v38 = v23 + v21;
          v39 = v38 >> 15;
          if (v38 >> 15 >= 255)
            LOBYTE(v39) = -1;
          *v16 = *v17;
          v16[1] = v26;
          v16[2] = v28;
          v16[3] = v31;
          if (v38 >= 0)
            v40 = v39;
          else
            v40 = 0;
          v16[4] = v17[1];
          v16[5] = v34;
          v16[6] = v37;
          v16[7] = v40;
          v16 += 8;
          v15 += 4;
          v17 += 2;
          --v14;
        }
        while (v14);
      }
      v11 += v9;
      v13 += v7;
      ++v6;
      v12 += v8;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_a2vyITU709_32BGRA(unint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  _BYTE *v16;
  _BYTE *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  char v26;
  int v27;
  char v28;
  int v29;
  int v30;
  char v31;
  int v32;
  int v33;
  char v34;
  int v35;
  int v36;
  char v37;
  int v38;
  int v39;
  char v40;

  if (a2)
  {
    v6 = 0;
    v7 = *a5;
    v8 = *a3;
    v9 = a3[1];
    v10 = a1 >> 1;
    v11 = (_BYTE *)a4[1];
    if (a1 >> 1 <= 1)
      v10 = 1;
    v12 = *a4 + 1;
    v13 = (_BYTE *)*a6;
    do
    {
      if (a1 >= 2)
      {
        v14 = v10;
        v15 = (unsigned __int8 *)v12;
        v16 = v13;
        v17 = v11;
        do
        {
          v18 = *(v15 - 1) - 128;
          v19 = v15[1] - 128;
          v20 = 38155 * *v15 - 610480;
          v21 = 38155 * v15[2] - 610480;
          v22 = -6987 * v18 - 17461 * v19;
          v23 = 69219 * v18;
          v24 = 58745 * v19;
          v25 = (v24 + v20) >> 15;
          if (v25 >= 255)
            LOBYTE(v25) = -1;
          if (v24 + v20 >= 0)
            v26 = v25;
          else
            v26 = 0;
          v27 = (v22 + v20) >> 15;
          if (v27 >= 255)
            LOBYTE(v27) = -1;
          if (v22 + v20 >= 0)
            v28 = v27;
          else
            v28 = 0;
          v29 = v23 + v20;
          v30 = v29 >> 15;
          if (v29 >> 15 >= 255)
            LOBYTE(v30) = -1;
          if (v29 >= 0)
            v31 = v30;
          else
            v31 = 0;
          v32 = v24 + v21;
          v33 = v32 >> 15;
          if (v32 >> 15 >= 255)
            LOBYTE(v33) = -1;
          if (v32 >= 0)
            v34 = v33;
          else
            v34 = 0;
          v35 = v22 + v21;
          v36 = v35 >> 15;
          if (v35 >> 15 >= 255)
            LOBYTE(v36) = -1;
          if (v35 >= 0)
            v37 = v36;
          else
            v37 = 0;
          v38 = v23 + v21;
          v39 = v38 >> 15;
          if (v38 >> 15 >= 255)
            LOBYTE(v39) = -1;
          if (v38 >= 0)
            v40 = v39;
          else
            v40 = 0;
          *v16 = v31;
          v16[1] = v28;
          v16[2] = v26;
          v16[3] = *v17;
          v16[4] = v40;
          v16[5] = v37;
          v16[6] = v34;
          v16[7] = v17[1];
          v16 += 8;
          v15 += 4;
          v17 += 2;
          --v14;
        }
        while (v14);
      }
      v11 += v9;
      v13 += v7;
      ++v6;
      v12 += v8;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_a2vyITU709_24RGB(unint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, uint64_t *a6, double a7, int32x4_t a8, double a9, double a10, double a11, int32x4_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int32x4_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  int v22;
  int32x2_t v23;
  int32x4_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int32x4_t v29;
  int32x4_t v30;
  int8x8_t v31;
  int16x8_t v32;
  char v33;

  if (a2)
  {
    v12 = 0;
    v13 = *a3;
    v14 = *a5;
    v15 = a1 >> 1;
    v16 = *a6;
    if (a1 >> 1 <= 1)
      v15 = 1;
    v17 = *a4 + 1;
    *(int32x2_t *)a8.i8 = vdup_n_s32(0xFFF6AF50);
    v18.i64[0] = 0xFF000000FFLL;
    v18.i64[1] = 0xFF000000FFLL;
    do
    {
      if (a1 >= 2)
      {
        v19 = v15;
        v20 = (unsigned __int8 *)v17;
        v21 = v16;
        do
        {
          v22 = *(v20 - 1) - 128;
          v23.i32[0] = v20[1] - 128;
          v23.i32[1] = v20[2];
          v24 = a8;
          v24.i32[0] = -6987 * v22;
          *(int32x2_t *)v24.i8 = vmla_s32(*(int32x2_t *)v24.i8, v23, (int32x2_t)0x950BFFFFBBCBLL);
          a12.i32[0] = 38155 * *v20 - 610480;
          a12 = vzip1q_s32(a12, v24);
          v25 = 69219 * v22;
          v26 = (v24.i32[0] + v24.i32[1]) >> 15;
          if (v26 >= 255)
            LOBYTE(v26) = -1;
          v27 = v25 + v24.i32[1];
          v28 = (v25 + v24.i32[1]) >> 15;
          if (v24.i32[0] + v24.i32[1] < 0)
            LOBYTE(v26) = 0;
          a12.i32[2] = a12.i32[0];
          v29.i32[2] = v25;
          if (v28 >= 255)
            LOBYTE(v28) = -1;
          v29.i32[3] = 58745 * (v20[1] - 128);
          v29.i32[1] = 38155 * *v20 - 610480;
          v29.i32[0] = v29.i32[3];
          v30 = vaddq_s32(a12, v29);
          v31 = (int8x8_t)vmovn_s32(vcltzq_s32(v30));
          v32 = (int16x8_t)vminq_s32(vshrq_n_s32(v30, 0xFuLL), v18);
          *(int8x8_t *)v32.i8 = vbic_s8((int8x8_t)vmovn_s32((int32x4_t)v32), v31);
          *(_DWORD *)v21 = vmovn_s16(v32).u32[0];
          if (v27 >= 0)
            v33 = v28;
          else
            v33 = 0;
          *(_BYTE *)(v21 + 4) = v26;
          *(_BYTE *)(v21 + 5) = v33;
          v21 += 6;
          v20 += 4;
          --v19;
        }
        while (v19);
      }
      v16 += v14;
      ++v12;
      v17 += v13;
    }
    while (v12 != a2);
  }
  return 0;
}

uint64_t vt_Copy_a2vyITU709_8GRAYSCALE(unint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  _BYTE *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  int v20;
  char v21;

  if (a2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v9 = a1 >> 1;
    v10 = (_BYTE *)*a6;
    if (a1 >> 1 <= 1)
      v9 = 1;
    v11 = *a4 + 3;
    do
    {
      if (a1 >= 2)
      {
        v12 = v9;
        v13 = (unsigned __int8 *)v11;
        v14 = v10;
        do
        {
          v15 = *(v13 - 2);
          v17 = *v13;
          v13 += 4;
          v16 = v17;
          v18 = (38155 * v15 - 610480) >> 15;
          if (v18 >= 0xFF)
            LOBYTE(v18) = -1;
          if (v15 >= 0x10)
            v19 = v18;
          else
            v19 = 0;
          v20 = (int)(38155 * v16 - 610480) >> 15;
          if (v20 >= 255)
            LOBYTE(v20) = -1;
          if (v16 >= 0x10)
            v21 = v20;
          else
            v21 = 0;
          *v14 = ~v19;
          v14[1] = ~v21;
          v14 += 2;
          --v12;
        }
        while (v12);
      }
      v10 += v8;
      ++v6;
      v11 += v7;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_2vuyITU2020_32ARGB(unint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  _BYTE *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  char v23;
  int v24;
  char v25;
  int v26;
  int v27;
  char v28;
  int v29;
  int v30;
  char v31;
  int v32;
  int v33;
  char v34;
  int v35;
  int v36;
  char v37;

  if (a2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v9 = a1 >> 1;
    if (a1 >> 1 <= 1)
      v9 = 1;
    v10 = *a4 + 1;
    v11 = (_BYTE *)*a6;
    do
    {
      if (a1 >= 2)
      {
        v12 = v9;
        v13 = (unsigned __int8 *)v10;
        v14 = v11;
        do
        {
          v15 = *(v13 - 1) - 128;
          v16 = v13[1] - 128;
          v17 = 38267 * *v13 - 612272;
          v18 = 38267 * v13[2] - 612272;
          v19 = -6155 * v15 - 21375 * v16;
          v20 = 70388 * v15;
          v21 = 55169 * v16;
          v22 = (v21 + v17) >> 15;
          if (v22 >= 255)
            LOBYTE(v22) = -1;
          if (v21 + v17 >= 0)
            v23 = v22;
          else
            v23 = 0;
          v24 = (v19 + v17) >> 15;
          if (v24 >= 255)
            LOBYTE(v24) = -1;
          if (v19 + v17 >= 0)
            v25 = v24;
          else
            v25 = 0;
          v26 = v20 + v17;
          v27 = v26 >> 15;
          if (v26 >> 15 >= 255)
            LOBYTE(v27) = -1;
          if (v26 >= 0)
            v28 = v27;
          else
            v28 = 0;
          v29 = v21 + v18;
          v30 = v29 >> 15;
          if (v29 >> 15 >= 255)
            LOBYTE(v30) = -1;
          if (v29 >= 0)
            v31 = v30;
          else
            v31 = 0;
          v32 = v19 + v18;
          v33 = v32 >> 15;
          if (v32 >> 15 >= 255)
            LOBYTE(v33) = -1;
          if (v32 >= 0)
            v34 = v33;
          else
            v34 = 0;
          v35 = v20 + v18;
          v36 = v35 >> 15;
          *v14 = -1;
          v14[1] = v23;
          if (v35 >> 15 >= 255)
            LOBYTE(v36) = -1;
          v14[2] = v25;
          v14[3] = v28;
          v14[4] = -1;
          v14[5] = v31;
          if (v35 >= 0)
            v37 = v36;
          else
            v37 = 0;
          v14[6] = v34;
          v14[7] = v37;
          v14 += 8;
          v13 += 4;
          --v12;
        }
        while (v12);
      }
      v11 += v8;
      ++v6;
      v10 += v7;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_2vuyITU2020_32BGRA(unint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  _BYTE *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  char v23;
  int v24;
  char v25;
  int v26;
  int v27;
  char v28;
  int v29;
  int v30;
  char v31;
  int v32;
  int v33;
  char v34;
  int v35;
  int v36;

  if (a2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v9 = a1 >> 1;
    if (a1 >> 1 <= 1)
      v9 = 1;
    v10 = *a4 + 1;
    v11 = (_BYTE *)*a6;
    do
    {
      if (a1 >= 2)
      {
        v12 = v9;
        v13 = (unsigned __int8 *)v10;
        v14 = v11;
        do
        {
          v15 = *(v13 - 1) - 128;
          v16 = v13[1] - 128;
          v17 = 38267 * *v13 - 612272;
          v18 = 38267 * v13[2] - 612272;
          v19 = -6155 * v15 - 21375 * v16;
          v20 = 70388 * v15;
          v21 = 55169 * v16;
          v22 = (v21 + v17) >> 15;
          if (v22 >= 255)
            LOBYTE(v22) = -1;
          if (v21 + v17 >= 0)
            v23 = v22;
          else
            v23 = 0;
          v24 = (v19 + v17) >> 15;
          if (v24 >= 255)
            LOBYTE(v24) = -1;
          if (v19 + v17 >= 0)
            v25 = v24;
          else
            v25 = 0;
          v26 = v20 + v17;
          v27 = v26 >> 15;
          if (v26 >> 15 >= 255)
            LOBYTE(v27) = -1;
          if (v26 >= 0)
            v28 = v27;
          else
            v28 = 0;
          v29 = v21 + v18;
          v30 = v29 >> 15;
          if (v29 >> 15 >= 255)
            LOBYTE(v30) = -1;
          if (v29 >= 0)
            v31 = v30;
          else
            v31 = 0;
          v32 = v19 + v18;
          v33 = v32 >> 15;
          if (v32 >> 15 >= 255)
            LOBYTE(v33) = -1;
          if (v32 >= 0)
            v34 = v33;
          else
            v34 = 0;
          v35 = v20 + v18;
          *v14 = v28;
          v14[1] = v25;
          if (v35 >> 15 >= 255)
            LOBYTE(v36) = -1;
          else
            v36 = v35 >> 15;
          v14[2] = v23;
          v14[3] = -1;
          if (v35 < 0)
            LOBYTE(v36) = 0;
          v14[4] = v36;
          v14[5] = v34;
          v14[6] = v31;
          v14[7] = -1;
          v14 += 8;
          v13 += 4;
          --v12;
        }
        while (v12);
      }
      v11 += v8;
      ++v6;
      v10 += v7;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_2vuyITU2020_24RGB(unint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, uint64_t *a6, double a7, int32x4_t a8, double a9, double a10, double a11, int32x4_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int32x4_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  int v22;
  int32x2_t v23;
  int32x4_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int32x4_t v29;
  int32x4_t v30;
  int8x8_t v31;
  int16x8_t v32;
  char v33;

  if (a2)
  {
    v12 = 0;
    v13 = *a3;
    v14 = *a5;
    v15 = a1 >> 1;
    v16 = *a6;
    if (a1 >> 1 <= 1)
      v15 = 1;
    v17 = *a4 + 1;
    *(int32x2_t *)a8.i8 = vdup_n_s32(0xFFF6A850);
    v18.i64[0] = 0xFF000000FFLL;
    v18.i64[1] = 0xFF000000FFLL;
    do
    {
      if (a1 >= 2)
      {
        v19 = v15;
        v20 = (unsigned __int8 *)v17;
        v21 = v16;
        do
        {
          v22 = *(v20 - 1) - 128;
          v23.i32[0] = v20[1] - 128;
          v23.i32[1] = v20[2];
          v24 = a8;
          v24.i32[0] = -6155 * v22;
          *(int32x2_t *)v24.i8 = vmla_s32(*(int32x2_t *)v24.i8, v23, (int32x2_t)0x957BFFFFAC81);
          a12.i32[0] = 38267 * *v20 - 612272;
          a12 = vzip1q_s32(a12, v24);
          v25 = 70388 * v22;
          v26 = (v24.i32[0] + v24.i32[1]) >> 15;
          if (v26 >= 255)
            LOBYTE(v26) = -1;
          v27 = v25 + v24.i32[1];
          v28 = (v25 + v24.i32[1]) >> 15;
          if (v24.i32[0] + v24.i32[1] < 0)
            LOBYTE(v26) = 0;
          a12.i32[2] = a12.i32[0];
          v29.i32[2] = v25;
          if (v28 >= 255)
            LOBYTE(v28) = -1;
          v29.i32[3] = 55169 * (v20[1] - 128);
          v29.i32[1] = 38267 * *v20 - 612272;
          v29.i32[0] = v29.i32[3];
          v30 = vaddq_s32(a12, v29);
          v31 = (int8x8_t)vmovn_s32(vcltzq_s32(v30));
          v32 = (int16x8_t)vminq_s32(vshrq_n_s32(v30, 0xFuLL), v18);
          *(int8x8_t *)v32.i8 = vbic_s8((int8x8_t)vmovn_s32((int32x4_t)v32), v31);
          *(_DWORD *)v21 = vmovn_s16(v32).u32[0];
          if (v27 >= 0)
            v33 = v28;
          else
            v33 = 0;
          *(_BYTE *)(v21 + 4) = v26;
          *(_BYTE *)(v21 + 5) = v33;
          v21 += 6;
          v20 += 4;
          --v19;
        }
        while (v19);
      }
      v16 += v14;
      ++v12;
      v17 += v13;
    }
    while (v12 != a2);
  }
  return 0;
}

uint64_t vt_Copy_2vuyITU2020_8GRAYSCALE(unint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  _BYTE *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  int v20;
  char v21;

  if (a2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v9 = a1 >> 1;
    v10 = (_BYTE *)*a6;
    if (a1 >> 1 <= 1)
      v9 = 1;
    v11 = *a4 + 3;
    do
    {
      if (a1 >= 2)
      {
        v12 = v9;
        v13 = (unsigned __int8 *)v11;
        v14 = v10;
        do
        {
          v15 = *(v13 - 2);
          v17 = *v13;
          v13 += 4;
          v16 = v17;
          v18 = (38267 * v15 - 612272) >> 15;
          if (v18 >= 0xFF)
            LOBYTE(v18) = -1;
          if (v15 >= 0x10)
            v19 = v18;
          else
            v19 = 0;
          v20 = (int)(38267 * v16 - 612272) >> 15;
          if (v20 >= 255)
            LOBYTE(v20) = -1;
          if (v16 >= 0x10)
            v21 = v20;
          else
            v21 = 0;
          *v14 = ~v19;
          v14[1] = ~v21;
          v14 += 2;
          --v12;
        }
        while (v12);
      }
      v10 += v8;
      ++v6;
      v11 += v7;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_yuvsITU2020_32ARGB(unint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  _BYTE *v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  char v23;
  int v24;
  char v25;
  int v26;
  int v27;
  char v28;
  int v29;
  int v30;
  char v31;
  int v32;
  int v33;
  char v34;
  int v35;
  int v36;
  char v37;

  if (a2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v9 = a1 >> 1;
    v10 = (_BYTE *)*a6;
    if (a1 >> 1 <= 1)
      v9 = 1;
    v11 = *a4;
    do
    {
      if (a1 >= 2)
      {
        v12 = v9;
        v13 = v10;
        v14 = v11;
        do
        {
          v15 = v14[1] - 128;
          v16 = v14[3] - 128;
          v17 = 38267 * *v14 - 612272;
          v18 = 38267 * v14[2] - 612272;
          v19 = -6155 * v15 - 21375 * v16;
          v20 = 70388 * v15;
          v21 = 55169 * v16;
          v22 = (v21 + v17) >> 15;
          if (v22 >= 255)
            LOBYTE(v22) = -1;
          if (v21 + v17 >= 0)
            v23 = v22;
          else
            v23 = 0;
          v24 = (v19 + v17) >> 15;
          if (v24 >= 255)
            LOBYTE(v24) = -1;
          if (v19 + v17 >= 0)
            v25 = v24;
          else
            v25 = 0;
          v26 = v20 + v17;
          v27 = v26 >> 15;
          if (v26 >> 15 >= 255)
            LOBYTE(v27) = -1;
          if (v26 >= 0)
            v28 = v27;
          else
            v28 = 0;
          v29 = v21 + v18;
          v30 = v29 >> 15;
          if (v29 >> 15 >= 255)
            LOBYTE(v30) = -1;
          if (v29 >= 0)
            v31 = v30;
          else
            v31 = 0;
          v32 = v19 + v18;
          v33 = v32 >> 15;
          if (v32 >> 15 >= 255)
            LOBYTE(v33) = -1;
          if (v32 >= 0)
            v34 = v33;
          else
            v34 = 0;
          v35 = v20 + v18;
          v36 = v35 >> 15;
          *v13 = -1;
          v13[1] = v23;
          if (v35 >> 15 >= 255)
            LOBYTE(v36) = -1;
          v13[2] = v25;
          v13[3] = v28;
          v13[4] = -1;
          v13[5] = v31;
          if (v35 >= 0)
            v37 = v36;
          else
            v37 = 0;
          v13[6] = v34;
          v13[7] = v37;
          v14 += 4;
          v13 += 8;
          --v12;
        }
        while (v12);
      }
      v11 += v7;
      v10 += v8;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_yuvsITU2020_32BGRA(unint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  _BYTE *v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  char v23;
  int v24;
  char v25;
  int v26;
  int v27;
  char v28;
  int v29;
  int v30;
  char v31;
  int v32;
  int v33;
  char v34;
  int v35;
  int v36;

  if (a2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v9 = a1 >> 1;
    v10 = (_BYTE *)*a6;
    if (a1 >> 1 <= 1)
      v9 = 1;
    v11 = *a4;
    do
    {
      if (a1 >= 2)
      {
        v12 = v9;
        v13 = v10;
        v14 = v11;
        do
        {
          v15 = v14[1] - 128;
          v16 = v14[3] - 128;
          v17 = 38267 * *v14 - 612272;
          v18 = 38267 * v14[2] - 612272;
          v19 = -6155 * v15 - 21375 * v16;
          v20 = 70388 * v15;
          v21 = 55169 * v16;
          v22 = (v21 + v17) >> 15;
          if (v22 >= 255)
            LOBYTE(v22) = -1;
          if (v21 + v17 >= 0)
            v23 = v22;
          else
            v23 = 0;
          v24 = (v19 + v17) >> 15;
          if (v24 >= 255)
            LOBYTE(v24) = -1;
          if (v19 + v17 >= 0)
            v25 = v24;
          else
            v25 = 0;
          v26 = v20 + v17;
          v27 = v26 >> 15;
          if (v26 >> 15 >= 255)
            LOBYTE(v27) = -1;
          if (v26 >= 0)
            v28 = v27;
          else
            v28 = 0;
          v29 = v21 + v18;
          v30 = v29 >> 15;
          if (v29 >> 15 >= 255)
            LOBYTE(v30) = -1;
          if (v29 >= 0)
            v31 = v30;
          else
            v31 = 0;
          v32 = v19 + v18;
          v33 = v32 >> 15;
          if (v32 >> 15 >= 255)
            LOBYTE(v33) = -1;
          if (v32 >= 0)
            v34 = v33;
          else
            v34 = 0;
          v35 = v20 + v18;
          *v13 = v28;
          v13[1] = v25;
          if (v35 >> 15 >= 255)
            LOBYTE(v36) = -1;
          else
            v36 = v35 >> 15;
          v13[2] = v23;
          v13[3] = -1;
          if (v35 < 0)
            LOBYTE(v36) = 0;
          v13[4] = v36;
          v13[5] = v34;
          v13[6] = v31;
          v13[7] = -1;
          v14 += 4;
          v13 += 8;
          --v12;
        }
        while (v12);
      }
      v11 += v7;
      v10 += v8;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_yuvsITU2020_24RGB(unint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, uint64_t *a6, double a7, int32x4_t a8, double a9, double a10, double a11, int32x4_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int32x4_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  int v22;
  int32x2_t v23;
  int32x4_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int32x4_t v29;
  int32x4_t v30;
  int8x8_t v31;
  int16x8_t v32;
  char v33;

  if (a2)
  {
    v12 = 0;
    v13 = *a3;
    v14 = *a5;
    v15 = a1 >> 1;
    v16 = *a6;
    v17 = *a4;
    if (a1 >> 1 <= 1)
      v15 = 1;
    *(int32x2_t *)a8.i8 = vdup_n_s32(0xFFF6A850);
    v18.i64[0] = 0xFF000000FFLL;
    v18.i64[1] = 0xFF000000FFLL;
    do
    {
      if (a1 >= 2)
      {
        v19 = v15;
        v20 = v16;
        v21 = v17;
        do
        {
          v22 = v21[1] - 128;
          v23.i32[0] = v21[3] - 128;
          v23.i32[1] = v21[2];
          v24 = a8;
          v24.i32[0] = -6155 * v22;
          *(int32x2_t *)v24.i8 = vmla_s32(*(int32x2_t *)v24.i8, v23, (int32x2_t)0x957BFFFFAC81);
          a12.i32[0] = 38267 * *v21 - 612272;
          a12 = vzip1q_s32(a12, v24);
          v25 = 70388 * v22;
          v26 = (v24.i32[0] + v24.i32[1]) >> 15;
          if (v26 >= 255)
            LOBYTE(v26) = -1;
          v27 = v25 + v24.i32[1];
          v28 = (v25 + v24.i32[1]) >> 15;
          if (v24.i32[0] + v24.i32[1] < 0)
            LOBYTE(v26) = 0;
          a12.i32[2] = a12.i32[0];
          v29.i32[2] = v25;
          if (v28 >= 255)
            LOBYTE(v28) = -1;
          v29.i32[3] = 55169 * (v21[3] - 128);
          v29.i32[1] = 38267 * *v21 - 612272;
          v29.i32[0] = v29.i32[3];
          v30 = vaddq_s32(a12, v29);
          v31 = (int8x8_t)vmovn_s32(vcltzq_s32(v30));
          v32 = (int16x8_t)vminq_s32(vshrq_n_s32(v30, 0xFuLL), v18);
          *(int8x8_t *)v32.i8 = vbic_s8((int8x8_t)vmovn_s32((int32x4_t)v32), v31);
          *(_DWORD *)v20 = vmovn_s16(v32).u32[0];
          if (v27 >= 0)
            v33 = v28;
          else
            v33 = 0;
          *(_BYTE *)(v20 + 4) = v26;
          *(_BYTE *)(v20 + 5) = v33;
          v21 += 4;
          v20 += 6;
          --v19;
        }
        while (v19);
      }
      v17 += v13;
      v16 += v14;
      ++v12;
    }
    while (v12 != a2);
  }
  return 0;
}

uint64_t vt_Copy_yuvsITU2020_8GRAYSCALE(unint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  _BYTE *v13;
  unsigned __int8 *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  int v19;
  char v20;

  if (a2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v9 = a1 >> 1;
    v10 = (_BYTE *)*a6;
    v11 = *a4;
    if (a1 >> 1 <= 1)
      v9 = 1;
    do
    {
      if (a1 >= 2)
      {
        v12 = v9;
        v13 = v10;
        v14 = v11;
        do
        {
          v15 = *v14;
          v16 = v14[2];
          v17 = (38267 * v15 - 612272) >> 15;
          if (v17 >= 0xFF)
            LOBYTE(v17) = -1;
          if (v15 >= 0x10)
            v18 = v17;
          else
            v18 = 0;
          v19 = (int)(38267 * v16 - 612272) >> 15;
          if (v19 >= 255)
            LOBYTE(v19) = -1;
          if (v16 >= 0x10)
            v20 = v19;
          else
            v20 = 0;
          *v13 = ~v18;
          v13[1] = ~v20;
          v14 += 4;
          v13 += 2;
          --v12;
        }
        while (v12);
      }
      v11 += v7;
      v10 += v8;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_a2vyITU2020_32ARGB(unint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  _BYTE *v16;
  _BYTE *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  char v26;
  int v27;
  char v28;
  int v29;
  int v30;
  char v31;
  int v32;
  int v33;
  char v34;
  int v35;
  int v36;
  char v37;
  int v38;
  int v39;
  char v40;

  if (a2)
  {
    v6 = 0;
    v7 = *a5;
    v8 = *a3;
    v9 = a3[1];
    v10 = a1 >> 1;
    v11 = (_BYTE *)a4[1];
    if (a1 >> 1 <= 1)
      v10 = 1;
    v12 = *a4 + 1;
    v13 = (_BYTE *)*a6;
    do
    {
      if (a1 >= 2)
      {
        v14 = v10;
        v15 = (unsigned __int8 *)v12;
        v16 = v13;
        v17 = v11;
        do
        {
          v18 = *(v15 - 1) - 128;
          v19 = v15[1] - 128;
          v20 = 38267 * *v15 - 612272;
          v21 = 38267 * v15[2] - 612272;
          v22 = -6155 * v18 - 21375 * v19;
          v23 = 70388 * v18;
          v24 = 55169 * v19;
          v25 = (v24 + v20) >> 15;
          if (v25 >= 255)
            LOBYTE(v25) = -1;
          if (v24 + v20 >= 0)
            v26 = v25;
          else
            v26 = 0;
          v27 = (v22 + v20) >> 15;
          if (v27 >= 255)
            LOBYTE(v27) = -1;
          if (v22 + v20 >= 0)
            v28 = v27;
          else
            v28 = 0;
          v29 = v23 + v20;
          v30 = v29 >> 15;
          if (v29 >> 15 >= 255)
            LOBYTE(v30) = -1;
          if (v29 >= 0)
            v31 = v30;
          else
            v31 = 0;
          v32 = v24 + v21;
          v33 = v32 >> 15;
          if (v32 >> 15 >= 255)
            LOBYTE(v33) = -1;
          if (v32 >= 0)
            v34 = v33;
          else
            v34 = 0;
          v35 = v22 + v21;
          v36 = v35 >> 15;
          if (v35 >> 15 >= 255)
            LOBYTE(v36) = -1;
          if (v35 >= 0)
            v37 = v36;
          else
            v37 = 0;
          v38 = v23 + v21;
          v39 = v38 >> 15;
          if (v38 >> 15 >= 255)
            LOBYTE(v39) = -1;
          *v16 = *v17;
          v16[1] = v26;
          v16[2] = v28;
          v16[3] = v31;
          if (v38 >= 0)
            v40 = v39;
          else
            v40 = 0;
          v16[4] = v17[1];
          v16[5] = v34;
          v16[6] = v37;
          v16[7] = v40;
          v16 += 8;
          v15 += 4;
          v17 += 2;
          --v14;
        }
        while (v14);
      }
      v11 += v9;
      v13 += v7;
      ++v6;
      v12 += v8;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_a2vyITU2020_32BGRA(unint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  _BYTE *v16;
  _BYTE *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  char v26;
  int v27;
  char v28;
  int v29;
  int v30;
  char v31;
  int v32;
  int v33;
  char v34;
  int v35;
  int v36;
  char v37;
  int v38;
  int v39;
  char v40;

  if (a2)
  {
    v6 = 0;
    v7 = *a5;
    v8 = *a3;
    v9 = a3[1];
    v10 = a1 >> 1;
    v11 = (_BYTE *)a4[1];
    if (a1 >> 1 <= 1)
      v10 = 1;
    v12 = *a4 + 1;
    v13 = (_BYTE *)*a6;
    do
    {
      if (a1 >= 2)
      {
        v14 = v10;
        v15 = (unsigned __int8 *)v12;
        v16 = v13;
        v17 = v11;
        do
        {
          v18 = *(v15 - 1) - 128;
          v19 = v15[1] - 128;
          v20 = 38267 * *v15 - 612272;
          v21 = 38267 * v15[2] - 612272;
          v22 = -6155 * v18 - 21375 * v19;
          v23 = 70388 * v18;
          v24 = 55169 * v19;
          v25 = (v24 + v20) >> 15;
          if (v25 >= 255)
            LOBYTE(v25) = -1;
          if (v24 + v20 >= 0)
            v26 = v25;
          else
            v26 = 0;
          v27 = (v22 + v20) >> 15;
          if (v27 >= 255)
            LOBYTE(v27) = -1;
          if (v22 + v20 >= 0)
            v28 = v27;
          else
            v28 = 0;
          v29 = v23 + v20;
          v30 = v29 >> 15;
          if (v29 >> 15 >= 255)
            LOBYTE(v30) = -1;
          if (v29 >= 0)
            v31 = v30;
          else
            v31 = 0;
          v32 = v24 + v21;
          v33 = v32 >> 15;
          if (v32 >> 15 >= 255)
            LOBYTE(v33) = -1;
          if (v32 >= 0)
            v34 = v33;
          else
            v34 = 0;
          v35 = v22 + v21;
          v36 = v35 >> 15;
          if (v35 >> 15 >= 255)
            LOBYTE(v36) = -1;
          if (v35 >= 0)
            v37 = v36;
          else
            v37 = 0;
          v38 = v23 + v21;
          v39 = v38 >> 15;
          if (v38 >> 15 >= 255)
            LOBYTE(v39) = -1;
          if (v38 >= 0)
            v40 = v39;
          else
            v40 = 0;
          *v16 = v31;
          v16[1] = v28;
          v16[2] = v26;
          v16[3] = *v17;
          v16[4] = v40;
          v16[5] = v37;
          v16[6] = v34;
          v16[7] = v17[1];
          v16 += 8;
          v15 += 4;
          v17 += 2;
          --v14;
        }
        while (v14);
      }
      v11 += v9;
      v13 += v7;
      ++v6;
      v12 += v8;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_a2vyITU2020_24RGB(unint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, uint64_t *a6, double a7, int32x4_t a8, double a9, double a10, double a11, int32x4_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int32x4_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  int v22;
  int32x2_t v23;
  int32x4_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int32x4_t v29;
  int32x4_t v30;
  int8x8_t v31;
  int16x8_t v32;
  char v33;

  if (a2)
  {
    v12 = 0;
    v13 = *a3;
    v14 = *a5;
    v15 = a1 >> 1;
    v16 = *a6;
    if (a1 >> 1 <= 1)
      v15 = 1;
    v17 = *a4 + 1;
    *(int32x2_t *)a8.i8 = vdup_n_s32(0xFFF6A850);
    v18.i64[0] = 0xFF000000FFLL;
    v18.i64[1] = 0xFF000000FFLL;
    do
    {
      if (a1 >= 2)
      {
        v19 = v15;
        v20 = (unsigned __int8 *)v17;
        v21 = v16;
        do
        {
          v22 = *(v20 - 1) - 128;
          v23.i32[0] = v20[1] - 128;
          v23.i32[1] = v20[2];
          v24 = a8;
          v24.i32[0] = -6155 * v22;
          *(int32x2_t *)v24.i8 = vmla_s32(*(int32x2_t *)v24.i8, v23, (int32x2_t)0x957BFFFFAC81);
          a12.i32[0] = 38267 * *v20 - 612272;
          a12 = vzip1q_s32(a12, v24);
          v25 = 70388 * v22;
          v26 = (v24.i32[0] + v24.i32[1]) >> 15;
          if (v26 >= 255)
            LOBYTE(v26) = -1;
          v27 = v25 + v24.i32[1];
          v28 = (v25 + v24.i32[1]) >> 15;
          if (v24.i32[0] + v24.i32[1] < 0)
            LOBYTE(v26) = 0;
          a12.i32[2] = a12.i32[0];
          v29.i32[2] = v25;
          if (v28 >= 255)
            LOBYTE(v28) = -1;
          v29.i32[3] = 55169 * (v20[1] - 128);
          v29.i32[1] = 38267 * *v20 - 612272;
          v29.i32[0] = v29.i32[3];
          v30 = vaddq_s32(a12, v29);
          v31 = (int8x8_t)vmovn_s32(vcltzq_s32(v30));
          v32 = (int16x8_t)vminq_s32(vshrq_n_s32(v30, 0xFuLL), v18);
          *(int8x8_t *)v32.i8 = vbic_s8((int8x8_t)vmovn_s32((int32x4_t)v32), v31);
          *(_DWORD *)v21 = vmovn_s16(v32).u32[0];
          if (v27 >= 0)
            v33 = v28;
          else
            v33 = 0;
          *(_BYTE *)(v21 + 4) = v26;
          *(_BYTE *)(v21 + 5) = v33;
          v21 += 6;
          v20 += 4;
          --v19;
        }
        while (v19);
      }
      v16 += v14;
      ++v12;
      v17 += v13;
    }
    while (v12 != a2);
  }
  return 0;
}

uint64_t vt_Copy_a2vyITU2020_8GRAYSCALE(unint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  _BYTE *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  int v20;
  char v21;

  if (a2)
  {
    v6 = 0;
    v7 = *a3;
    v8 = *a5;
    v9 = a1 >> 1;
    v10 = (_BYTE *)*a6;
    if (a1 >> 1 <= 1)
      v9 = 1;
    v11 = *a4 + 3;
    do
    {
      if (a1 >= 2)
      {
        v12 = v9;
        v13 = (unsigned __int8 *)v11;
        v14 = v10;
        do
        {
          v15 = *(v13 - 2);
          v17 = *v13;
          v13 += 4;
          v16 = v17;
          v18 = (38267 * v15 - 612272) >> 15;
          if (v18 >= 0xFF)
            LOBYTE(v18) = -1;
          if (v15 >= 0x10)
            v19 = v18;
          else
            v19 = 0;
          v20 = (int)(38267 * v16 - 612272) >> 15;
          if (v20 >= 255)
            LOBYTE(v20) = -1;
          if (v16 >= 0x10)
            v21 = v20;
          else
            v21 = 0;
          *v14 = ~v19;
          v14[1] = ~v21;
          v14 += 2;
          --v12;
        }
        while (v12);
      }
      v10 += v8;
      ++v6;
      v11 += v7;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t VTRateControlSessionGetTypeID()
{
  MEMORY[0x1940281CC](&VTRateControlSessionGetTypeID_sRegisterVTRateControlSessionOnce, RegisterVTRateControlSession);
  return sVTRateControlSessionID;
}

void RegisterVTRateControlSession()
{
  sVTRateControlSessionID = _CFRuntimeRegisterClass();
  sVTRateControlSessionPropertyCallbacks = 0;
  unk_1EE285240 = VTRateControlSessionCopySupportedPropertyDictionary;
  qword_1EE285248 = (uint64_t)VTRateControlSessionSetProperty;
  unk_1EE285250 = VTRateControlSessionCopyProperty;
  VTSessionRegisterCallbacksForTypeID(&sVTRateControlSessionPropertyCallbacks, (const void *)sVTRateControlSessionID);
}

uint64_t VTRateControlSessionCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  uint64_t Instance;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v22 = 0;
  if (!a10)
    return 4294954394;
  if (VTRateControlRegisterBundle_onceToken != -1)
    dispatch_once_f(&VTRateControlRegisterBundle_onceToken, 0, (dispatch_function_t)vtRateControlSessionRegisterBundle);
  if ((sSymbolsAvailable & 1) != 0)
  {
    MEMORY[0x1940281CC](&VTRateControlSessionGetTypeID_sRegisterVTRateControlSessionOnce, RegisterVTRateControlSession);
    Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      v18 = (_QWORD *)Instance;
      v19 = sVCPRateControlSessionCreateFunc(a1, a2, a3, a4, a5, a6, 0, vtRateControlSessionBeforeEncodeFrameCallback, vtRateControlSessionCompleteFramesCallback, Instance, &v22);
      if ((_DWORD)v19)
      {
        CFRelease(v18);
      }
      else
      {
        v20 = sVCPBundleHandle;
        v18[4] = v22;
        v18[5] = v20;
        v18[7] = a8;
        v18[8] = a9;
        *a10 = v18;
      }
      return v19;
    }
  }
  return FigSignalErrorAt();
}

uint64_t vtRateControlSessionBeforeEncodeFrameCallback(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, __int128 *a5)
{
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, __int128 *, __int128 *);
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  if (!a1)
    return FigSignalErrorAt();
  if (*(_DWORD *)(a1 + 16) == 2)
    return FigSignalErrorAt();
  v6 = *(_QWORD *)(a1 + 72);
  if (!v6)
    return FigSignalErrorAt();
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, __int128 *, __int128 *))(a1 + 56);
  v11 = *a4;
  v12 = *((_QWORD *)a4 + 2);
  v9 = *a5;
  v10 = *((_QWORD *)a5 + 2);
  return v7(v6, a2, a3, &v11, &v9);
}

uint64_t vtRateControlSessionCompleteFramesCallback(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, __int128 *);
  __int128 v5;
  uint64_t v6;

  if (!a1)
    return FigSignalErrorAt();
  if (*(_DWORD *)(a1 + 16) == 2)
    return FigSignalErrorAt();
  v2 = *(_QWORD *)(a1 + 72);
  if (!v2)
    return FigSignalErrorAt();
  v3 = *(uint64_t (**)(uint64_t, __int128 *))(a1 + 64);
  v5 = *a2;
  v6 = *((_QWORD *)a2 + 2);
  return v3(v2, &v5);
}

uint64_t VTRateControlSessionCopySupportedPropertyDictionary(uint64_t a1, _QWORD *a2)
{
  if (a2 && (*a2 = 0, a1) && *(_DWORD *)(a1 + 16) != 2)
    return sVCPRateControlCopySupportedPropertiesFunc(*(_QWORD *)(a1 + 32));
  else
    return FigSignalErrorAt();
}

uint64_t vtRateControlSessionIsPropertySupported(uint64_t a1, const void *a2)
{
  uint64_t v3;
  CFDictionaryRef theDict;

  theDict = 0;
  VTRateControlSessionCopySupportedPropertyDictionary(a1, &theDict);
  if (!theDict)
    return 0;
  v3 = CFDictionaryContainsKey(theDict, a2);
  CFRelease(theDict);
  return v3;
}

uint64_t VTRateControlSessionSetProperty(uint64_t a1)
{
  if (!a1 || *(_DWORD *)(a1 + 16) == 2)
    return FigSignalErrorAt();
  else
    return sVCPRateControlSessionSetPropertyFunc(*(_QWORD *)(a1 + 32));
}

uint64_t VTRateControlSessionCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  *a4 = 0;
  if (!a1 || *(_DWORD *)(a1 + 16) == 2)
    return FigSignalErrorAt();
  else
    return sVCPRateControlSessionCopyPropertyFunc(*(_QWORD *)(a1 + 32));
}

uint64_t VTRateControlSessionBeforePrepareToEncodeFrames(uint64_t a1)
{
  if (!a1 || *(_DWORD *)(a1 + 16) == 2)
    return FigSignalErrorAt();
  else
    return sVCPRateControlSessionBeforePrepareToEncodeFramesFunc(*(_QWORD *)(a1 + 32));
}

uint64_t VTRateControlSessionBeforeEncodeFrame(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, __int128 *a5)
{
  uint64_t v5;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  if (!a1 || *(_DWORD *)(a1 + 16) == 2)
    return FigSignalErrorAt();
  v5 = *(_QWORD *)(a1 + 32);
  v9 = *a4;
  v10 = *((_QWORD *)a4 + 2);
  v7 = *a5;
  v8 = *((_QWORD *)a5 + 2);
  return sVCPRateControlSessionBeforeEncodeFrameFunc(v5, a2, a3, &v9, &v7);
}

uint64_t VTRateControlSessionBeforeEmitEncodedFrame(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 16) == 2)
    return FigSignalErrorAt();
  else
    return sVCPRateControlSessionBeforeEmitEncodedFrameFunc(*(_QWORD *)(a1 + 32));
}

uint64_t VTRateControlSessionCompleteFrames(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 16) == 2)
    return FigSignalErrorAt();
  else
    return sVCPRateControlSessionCompleteFramesFunc(*(_QWORD *)(a1 + 32));
}

uint64_t VTRateControlGetVersion(uint64_t *a1)
{
  uint64_t v2;
  uint64_t result;

  if (!a1)
    return 4294954394;
  if (VTRateControlRegisterBundle_onceToken != -1)
    dispatch_once_f(&VTRateControlRegisterBundle_onceToken, 0, (dispatch_function_t)vtRateControlSessionRegisterBundle);
  if ((sSymbolsAvailable & 1) == 0)
    return FigSignalErrorAt();
  v2 = sVCPGetVersionFunc();
  result = 0;
  *a1 = v2;
  return result;
}

uint64_t VTRateControlReactionObserverCreate(uint64_t a1, uint64_t a2)
{
  uint64_t v5;

  v5 = 0;
  if (a1 && a2)
  {
    if (VTRateControlRegisterBundle_onceToken != -1)
      dispatch_once_f(&VTRateControlRegisterBundle_onceToken, 0, (dispatch_function_t)vtRateControlSessionRegisterBundle);
    if (sVCPReactionObserverCreateFunc)
    {
      sVCPReactionObserverCreateFunc(a1, a2, &v5);
      return v5;
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  return 0;
}

void *vtRateControlSessionRegisterBundle()
{
  void *result;

  result = dlopen("/System/Library/PrivateFrameworks/VideoProcessing.framework/VideoProcessing", 1);
  sVCPBundleHandle = (uint64_t)result;
  if (result)
  {
    sVCPRateControlSessionCreateFunc = dlsym(result, "VCPRateControlSessionCreate");
    sVCPRateControlCopySupportedPropertiesFunc = (uint64_t (*)(_QWORD))dlsym((void *)sVCPBundleHandle, "VCPRateControlSessionCopySupportedPropertyDictionary");
    sVCPRateControlSessionSetPropertyFunc = (uint64_t (*)(_QWORD))dlsym((void *)sVCPBundleHandle, "VCPRateControlSessionSetProperty");
    sVCPRateControlSessionCopyPropertyFunc = (uint64_t (*)(_QWORD))dlsym((void *)sVCPBundleHandle, "VCPRateControlSessionCopyProperty");
    sVCPRateControlSessionBeforePrepareToEncodeFramesFunc = dlsym((void *)sVCPBundleHandle, "VCPRateControlSessionBeforePrepareToEncodeFrames");
    if (!sVCPRateControlSessionBeforePrepareToEncodeFramesFunc)
      sVCPRateControlSessionBeforePrepareToEncodeFramesFunc = dlsym((void *)sVCPBundleHandle, "VCPRateControlSessionBeforePrepareToEncodeFrame");
    sVCPRateControlSessionBeforeEncodeFrameFunc = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))dlsym((void *)sVCPBundleHandle, "VCPRateControlSessionBeforeEncodeFrame");
    sVCPRateControlSessionBeforeEmitEncodedFrameFunc = (uint64_t (*)(_QWORD))dlsym((void *)sVCPBundleHandle, "VCPRateControlSessionBeforeEmitEncodedFrame");
    sVCPRateControlSessionCompleteFramesFunc = (uint64_t (*)(_QWORD))dlsym((void *)sVCPBundleHandle, "VCPRateControlSessionCompleteFrames");
    sVCPGetVersionFunc = dlsym((void *)sVCPBundleHandle, "VCPGetVersion");
    result = dlsym((void *)sVCPBundleHandle, "VCPReactionObserverCreate");
    sVCPReactionObserverCreateFunc = result;
    if (sVCPRateControlSessionCreateFunc
      && sVCPRateControlCopySupportedPropertiesFunc
      && sVCPRateControlSessionSetPropertyFunc
      && sVCPRateControlSessionCopyPropertyFunc
      && sVCPRateControlSessionBeforePrepareToEncodeFramesFunc
      && sVCPRateControlSessionBeforeEncodeFrameFunc
      && sVCPRateControlSessionBeforeEmitEncodedFrameFunc
      && sVCPRateControlSessionCompleteFramesFunc
      && sVCPGetVersionFunc)
    {
      sSymbolsAvailable = 1;
    }
    else
    {
      return (void *)FigSignalErrorAt();
    }
  }
  return result;
}

double vtRateControlSessionInit(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  return result;
}

void vtRateControlSessionFinalize(uint64_t a1)
{
  const void *v2;

  if (a1 && !*(_DWORD *)(a1 + 16))
    *(_DWORD *)(a1 + 16) = 1;
  v2 = *(const void **)(a1 + 32);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 32) = 0;
  }
  *(_DWORD *)(a1 + 16) = 2;
}

CFTypeRef vtRateControlSessionCopyFormattingDesc()
{
  return CFRetain(CFSTR("[VTRateControlSession]"));
}

__CFString *vtRateControlSessionCopyDebugDesc(unsigned int *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  CFAllocatorRef v4;

  v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  v4 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<VTRateControlSession %p [%p]>{invalid:%d, }"), a1, v4, a1[4]);
  return Mutable;
}

uint64_t vt_Copy_xf444_TRC_Tone_Mat_TRC_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Tone_Mat_TRC_420vf_GCD);
  return 0;
}

_QWORD *vt_Copy_xf444_TRC_Tone_Mat_TRC_420vf_GCD(_QWORD *result, uint64_t a2, double a3, float a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  float v26;
  unsigned int v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  unsigned int v36;
  float v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  unsigned int v43;
  char v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  char v55;
  float v56;
  float v57;
  float v58;
  float v59;
  _BYTE *v60;
  char *v61;
  char *v62;
  size_t v63;
  char *v64;
  char *v65;
  _BYTE *v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  BOOL v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  unsigned int v121;
  float v134;
  float v135;
  float v136;
  float v141;
  float v142;
  float v147;
  float v148;
  float v149;
  float v154;
  float v155;
  float v156;
  float v158;
  float v159;
  float v160;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v176;
  float v178;
  float v179;
  float v180;
  float v182;
  float v202;
  float v203;
  float v204;
  char v205;
  float v206;
  float v207;
  char v208;
  float v209;
  float v210;
  char v211;
  float v212;
  float v213;
  float v214;
  float v215;
  float v216;
  float v217;
  float v218;
  float v219;
  float v220;
  uint64_t v221;
  size_t v222;
  _BYTE *v223;
  unsigned __int16 *v224;
  unsigned int v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  float v230;
  float v231;
  float v232;
  float v233;
  float v234;
  float v235;
  float v236;
  float v237;
  float v238;
  float v239;
  float v240;
  float v241;
  float v242;
  float v243;
  float v244;
  float v245;
  float v246;
  float v247;
  float v248;
  float v249;
  float v250;
  float v251;
  float v252;
  float v253;
  float v254;
  float v255;
  float v256;
  float v257;
  float v258;
  float v259;

  v4 = *(_QWORD *)((char *)result + 28);
  v5 = 2 * *(unsigned __int8 *)result;
  v6 = v4 * a2 / v5;
  v7 = (v4 + v4 * a2) / v5;
  if (2 * v7 != 2 * v6)
  {
    v8 = 0;
    v9 = *(_QWORD *)((char *)result + 20);
    v10 = *(_QWORD *)((char *)result + 36);
    v11 = *(_QWORD *)((char *)result + 44) + 2 * v6;
    v12 = 2 * v7 - 2 * v6;
    v13 = result[14];
    v14 = (uint64_t *)result[16];
    v15 = result[15] + 2 * (result[13] * a2 / v5);
    v16 = result[19];
    v17 = (_QWORD *)result[7];
    v18 = (uint64_t *)result[8];
    v19 = (uint64_t *)result[17];
    v20 = *v18;
    v21 = v18[1];
    v226 = v18[2];
    v229 = v17[2];
    v22 = v229 + v226 * v11 + 2 * v10;
    v23 = *v19;
    v24 = v19[1];
    v227 = v19[2];
    v228 = v14[2];
    v25 = (_BYTE *)(v228 + v227 * v15 + v13);
    v26 = 8191.0;
    *(float *)&v27 = 8191.0 / (float)*(unsigned int *)(v16 + 128);
    LOWORD(a4) = *(_WORD *)(v16 + 140);
    v28 = (float)LODWORD(a4);
    LOWORD(a4) = *(_WORD *)(v16 + 142);
    v29 = (float)LODWORD(a4);
    v30 = *(float *)&v27 * *(float *)v16;
    v31 = *(float *)&v27 * *(float *)(v16 + 8);
    v32 = *(float *)&v27 * *(float *)(v16 + 16);
    v33 = *(float *)&v27 * *(float *)(v16 + 20);
    v34 = *(float *)&v27 * *(float *)(v16 + 28);
    LOWORD(v27) = *(_WORD *)(v16 + 144);
    v35 = (float)v27;
    LOWORD(v27) = *(_WORD *)(v16 + 146);
    *(float *)&v36 = (float)v27;
    v254 = *(float *)&v36;
    LOWORD(v36) = *(_WORD *)(v16 + 148);
    v37 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v16 + 150);
    *(float *)&v38 = (float)v36;
    v259 = *(float *)&v38;
    LOWORD(v38) = *(_WORD *)(v16 + 152);
    v252 = *(float *)(v16 + 36);
    v253 = (float)v38;
    v250 = *(float *)(v16 + 44);
    v251 = *(float *)(v16 + 40);
    v248 = *(float *)(v16 + 52) * 0.25;
    v249 = *(float *)(v16 + 48) * 0.25;
    v246 = *(float *)(v16 + 60) * 0.25;
    v247 = *(float *)(v16 + 56) * 0.25;
    v244 = *(float *)(v16 + 72);
    v245 = *(float *)(v16 + 64) * 0.25;
    v242 = *(float *)(v16 + 76);
    v243 = *(float *)(v16 + 68) * 0.25;
    v240 = *(float *)(v16 + 84);
    v241 = *(float *)(v16 + 80);
    v238 = *(float *)(v16 + 88);
    v235 = *(float *)(v16 + 96);
    v236 = *(float *)(v16 + 92);
    v233 = *(float *)(v16 + 104);
    v234 = *(float *)(v16 + 100);
    result = (_QWORD *)(v16 + 164);
    v39 = v16 + 16548;
    v40 = v17[1];
    v41 = (char *)(*v17 + *v18 * v11 + 2 * v10);
    if (v40)
      v42 = (char *)(v40 + v21 * v11 + 2 * v10);
    else
      v42 = 0;
    v43 = *(unsigned __int8 *)(v16 + 124);
    v44 = 16 - v43;
    _CF = v43 >= 0x11;
    v47 = *v14;
    v46 = v14[1];
    v48 = v47 + v23 * v15;
    if (_CF)
      v49 = 0;
    else
      v49 = v44;
    if (v15 >= 0)
      v50 = v15;
    else
      v50 = v15 + 1;
    v51 = v46 + v24 * (v50 >> 1);
    v52 = v16 + 32932;
    v53 = (_BYTE *)(v48 + v13);
    v54 = v51 + v13;
    v55 = v49;
    v56 = *(float *)(v16 + 108);
    v57 = *(float *)(v16 + 112);
    v59 = *(float *)(v16 + 116);
    v58 = *(float *)(v16 + 120);
    v257 = v32;
    v258 = v31;
    v255 = v34;
    v256 = v33;
    v232 = (float)LODWORD(a4);
    v239 = v28;
    v237 = v30;
    v230 = v59;
    v231 = v57;
    do
    {
      v60 = &v53[v23];
      v61 = &v42[v21];
      v62 = &v41[v20];
      if (v9)
      {
        v63 = 0;
        v64 = &v41[v20];
        v65 = &v42[v21];
        v66 = &v53[v23];
        do
        {
          if (v42)
          {
            v67 = (float)(*(unsigned __int16 *)v42 >> v55) - v29;
            v68 = (float)(*((unsigned __int16 *)v42 + 1) >> v55) - v29;
            v42 += 4;
            v69 = v31 * v68;
            v70 = (float)(v33 * v68) + (float)(v67 * v32);
            v71 = v34 * v67;
          }
          else
          {
            v71 = 0.0;
            v70 = 0.0;
            v69 = 0.0;
          }
          v72 = v30 * (float)((float)(*(unsigned __int16 *)v41 >> v55) - v28);
          v73 = v69 + v72;
          v74 = (float)(v69 + v72) <= 8191.0;
          v75 = 8191.0;
          if (v74)
          {
            v75 = v73;
            if (v73 < 0.0)
              v75 = 0.0;
          }
          v76 = v70 + v72;
          v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            v77 = v76;
            if (v76 < 0.0)
              v77 = 0.0;
          }
          v78 = v71 + v72;
          if (v78 <= 8191.0)
          {
            v26 = v78;
            if (v78 < 0.0)
              v26 = 0.0;
          }
          if (v42)
          {
            v79 = (float)(*(unsigned __int16 *)v42 >> v55) - v29;
            v80 = (float)(*((unsigned __int16 *)v42 + 1) >> v55) - v29;
            v42 += 4;
            v81 = v31 * v80;
            v82 = (float)(v33 * v80) + (float)(v79 * v32);
            v83 = v34 * v79;
          }
          else
          {
            v83 = 0.0;
            v82 = 0.0;
            v81 = 0.0;
          }
          v84 = v30 * (float)((float)(*((unsigned __int16 *)v41 + 1) >> v55) - v28);
          v85 = v81 + v84;
          v86 = 8191.0;
          v87 = 8191.0;
          if (v85 <= 8191.0)
          {
            v87 = v85;
            if (v85 < 0.0)
              v87 = 0.0;
          }
          v88 = v82 + v84;
          v89 = 8191.0;
          if (v88 <= 8191.0)
          {
            v89 = v88;
            if (v88 < 0.0)
              v89 = 0.0;
          }
          v90 = v83 + v84;
          if (v90 <= 8191.0)
          {
            v86 = v90;
            if (v90 < 0.0)
              v86 = 0.0;
          }
          if (v65)
          {
            v91 = (float)(*(unsigned __int16 *)v65 >> v55) - v29;
            v92 = (float)(*((unsigned __int16 *)v65 + 1) >> v55) - v29;
            v65 += 4;
            v93 = v31 * v92;
            v94 = (float)(v33 * v92) + (float)(v91 * v32);
            v95 = v34 * v91;
          }
          else
          {
            v95 = 0.0;
            v94 = 0.0;
            v93 = 0.0;
          }
          v96 = v30 * (float)((float)(*(unsigned __int16 *)v64 >> v55) - v28);
          v97 = v93 + v96;
          v98 = 8191.0;
          v74 = (float)(v93 + v96) <= 8191.0;
          v99 = 8191.0;
          if (v74)
          {
            v99 = v97;
            if (v97 < 0.0)
              v99 = 0.0;
          }
          v100 = v94 + v96;
          v74 = (float)(v94 + v96) <= 8191.0;
          v101 = 8191.0;
          if (v74)
          {
            v101 = v100;
            if (v100 < 0.0)
              v101 = 0.0;
          }
          v102 = v95 + v96;
          if (v102 <= 8191.0)
          {
            v98 = v102;
            if (v102 < 0.0)
              v98 = 0.0;
          }
          if (v65)
          {
            v103 = (float)(*(unsigned __int16 *)v65 >> v55) - v29;
            v104 = (float)(*((unsigned __int16 *)v65 + 1) >> v55) - v29;
            v65 += 4;
            v105 = v31 * v104;
            v106 = (float)(v33 * v104) + (float)(v103 * v32);
            v107 = v34 * v103;
          }
          else
          {
            v107 = 0.0;
            v106 = 0.0;
            v105 = 0.0;
          }
          v108 = v30 * (float)((float)(*((unsigned __int16 *)v64 + 1) >> v55) - v28);
          v109 = v105 + v108;
          v74 = (float)(v105 + v108) <= 8191.0;
          v110 = 8191.0;
          if (v74)
          {
            v110 = v109;
            if (v109 < 0.0)
              v110 = 0.0;
          }
          v111 = v106 + v108;
          v112 = 8191.0;
          if (v111 <= 8191.0)
          {
            v112 = v111;
            if (v111 < 0.0)
              v112 = 0.0;
          }
          v113 = v107 + v108;
          v74 = (float)(v107 + v108) <= 8191.0;
          v114 = 8191.0;
          if (v74)
          {
            v114 = v113;
            if (v113 < 0.0)
              v114 = 0.0;
          }
          _H0 = *((_WORD *)result + llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          _H20 = *((_WORD *)result + llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          v121 = llroundf(fminf(fmaxf(v26, 0.0), 8191.0));
          __asm { FCVT            S19, H20 }
          _H20 = *((_WORD *)result + v121);
          __asm { FCVT            S30, H20 }
          _H20 = *((_WORD *)result + llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          _H29 = *((_WORD *)result + llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          _H31 = *((_WORD *)result + llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          _H5 = *((_WORD *)result + llroundf(fminf(fmaxf(v99, 0.0), 8191.0)));
          _H6 = *((_WORD *)result + llroundf(fminf(fmaxf(v101, 0.0), 8191.0)));
          _H7 = *((_WORD *)result + llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          _H1 = *((_WORD *)result + llroundf(fminf(fmaxf(v110, 0.0), 8191.0)));
          _H3 = *((_WORD *)result + llroundf(fminf(fmaxf(v112, 0.0), 8191.0)));
          _H4 = *((_WORD *)result + llroundf(fminf(fmaxf(v114, 0.0), 8191.0)));
          v134 = fmaxf(_S0, fmaxf(_S19, _S30));
          v135 = (float)((float)((float)(v57 * _S19) + (float)(v56 * _S0)) + (float)(v59 * _S30)) + (float)(v58 * v134);
          v136 = 8191.0;
          if (v135 <= 8191.0)
          {
            v136 = (float)((float)((float)(v57 * _S19) + (float)(v56 * _S0)) + (float)(v59 * _S30))
                 + (float)(v58 * v134);
            if (v135 < 0.0)
              v136 = 0.0;
          }
          __asm
          {
            FCVT            S21, H20
            FCVT            S22, H29
            FCVT            S23, H31
          }
          _H20 = *(_WORD *)(v39 + 2 * llroundf(v136));
          v141 = (float)((float)((float)(v57 * _S22) + (float)(v56 * _S21)) + (float)(v59 * _S23))
               + (float)(v58 * fmaxf(_S21, fmaxf(_S22, _S23)));
          v142 = 8191.0;
          if (v141 <= 8191.0)
          {
            v142 = v141;
            if (v141 < 0.0)
              v142 = 0.0;
          }
          __asm
          {
            FCVT            S9, H5
            FCVT            S10, H6
            FCVT            S11, H7
          }
          _H5 = *(_WORD *)(v39 + 2 * llroundf(v142));
          v147 = fmaxf(_S9, fmaxf(_S10, _S11));
          v148 = (float)((float)((float)(v57 * _S10) + (float)(v56 * _S9)) + (float)(v59 * _S11)) + (float)(v58 * v147);
          v149 = 8191.0;
          if (v148 <= 8191.0)
          {
            v149 = (float)((float)((float)(v57 * _S10) + (float)(v56 * _S9)) + (float)(v59 * _S11))
                 + (float)(v58 * v147);
            if (v148 < 0.0)
              v149 = 0.0;
          }
          __asm
          {
            FCVT            S29, H1
            FCVT            S31, H3
            FCVT            S8, H4
            FCVT            S1, H20
          }
          v154 = _S0 * _S1;
          v155 = _S19 * _S1;
          v156 = _S30 * _S1;
          __asm { FCVT            S0, H5 }
          v158 = _S21 * _S0;
          v159 = _S22 * _S0;
          v160 = _S23 * _S0;
          LOWORD(_S0) = *(_WORD *)(v39 + 2 * llroundf(v149));
          __asm { FCVT            S1, H0 }
          v162 = _S9 * _S1;
          v163 = _S10 * _S1;
          v164 = _S11 * _S1;
          v165 = (float)((float)((float)(v57 * _S31) + (float)(v56 * _S29)) + (float)(v59 * _S8))
               + (float)(v58 * fmaxf(_S29, fmaxf(_S31, _S8)));
          v166 = 8191.0;
          if (v165 <= 8191.0)
          {
            v166 = v165;
            if (v165 < 0.0)
              v166 = 0.0;
          }
          _H21 = *(_WORD *)(v39 + 2 * llroundf(v166));
          __asm { FCVT            S21, H21 }
          v169 = _S29 * _S21;
          v170 = _S31 * _S21;
          v171 = _S8 * _S21;
          v172 = (float)((float)(v242 * v155) + (float)(v154 * v244)) + (float)(v156 * v241);
          v173 = (float)((float)(v238 * v155) + (float)(v154 * v240)) + (float)(v156 * v236);
          _S7 = (float)((float)(v234 * v155) + (float)(v154 * v235)) + (float)(v156 * v233);
          _S19 = (float)((float)(v242 * v159) + (float)(v158 * v244)) + (float)(v160 * v241);
          v176 = (float)((float)(v238 * v159) + (float)(v158 * v240)) + (float)(v160 * v236);
          _S5 = (float)((float)(v234 * v159) + (float)(v158 * v235)) + (float)(v160 * v233);
          v178 = (float)((float)(v242 * v163) + (float)(v162 * v244)) + (float)(v164 * v241);
          v179 = (float)((float)(v238 * v163) + (float)(v162 * v240)) + (float)(v164 * v236);
          v180 = (float)((float)(v234 * v163) + (float)(v162 * v235)) + (float)(v164 * v233);
          _S1 = (float)(v238 * v170) + (float)(v169 * v240);
          v182 = (float)(v234 * v170) + (float)(v169 * v235);
          _S22 = (float)((float)(v242 * v170) + (float)(v169 * v244)) + (float)(v171 * v241);
          _S23 = _S1 + (float)(v171 * v236);
          _S21 = v182 + (float)(v171 * v233);
          _H0 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v172, 0.0), 8191.0)));
          __asm { FCVT            S3, H0 }
          _H0 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v173, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          LOWORD(_S1) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S7, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          _H4 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H6 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v176, 0.0), 8191.0)));
          LOWORD(_S5) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm
          {
            FCVT            S6, H6
            FCVT            S5, H5
          }
          LOWORD(_S7) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v178, 0.0), 8191.0)));
          __asm { FCVT            S20, H7 }
          LOWORD(_S7) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v179, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          LOWORD(_S19) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v180, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          LOWORD(_S22) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S22, 0.0), 8191.0)));
          __asm { FCVT            S22, H22 }
          LOWORD(_S23) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S23, 0.0), 8191.0)));
          LOWORD(_S21) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S21, 0.0), 8191.0)));
          __asm
          {
            FCVT            S23, H23
            FCVT            S21, H21
          }
          v202 = (float)((float)((float)(v251 * _S0) + (float)(v252 * _S3)) + (float)(v250 * _S1)) + v35;
          if (v202 < v35)
            v203 = v35;
          else
            v203 = (float)((float)((float)(v251 * _S0) + (float)(v252 * _S3)) + (float)(v250 * _S1)) + v35;
          v74 = v202 <= v37;
          v204 = (float)((float)((float)(v251 * _S6) + (float)(v252 * _S4)) + (float)(v250 * _S5)) + v35;
          if (!v74)
            v203 = v37;
          v205 = llroundf(v203);
          if (v204 < v35)
            v206 = v35;
          else
            v206 = (float)((float)((float)(v251 * _S6) + (float)(v252 * _S4)) + (float)(v250 * _S5)) + v35;
          v74 = v204 <= v37;
          v207 = (float)((float)((float)(v251 * _S7) + (float)(v252 * _S20)) + (float)(v250 * _S19)) + v35;
          if (!v74)
            v206 = v37;
          v208 = llroundf(v206);
          if (v207 < v35)
            v209 = v35;
          else
            v209 = (float)((float)((float)(v251 * _S7) + (float)(v252 * _S20)) + (float)(v250 * _S19)) + v35;
          v74 = v207 <= v37;
          v210 = (float)((float)((float)(v251 * _S23) + (float)(v252 * _S22)) + (float)(v250 * _S21)) + v35;
          if (!v74)
            v209 = v37;
          v211 = llroundf(v209);
          if (v210 < v35)
            v212 = v35;
          else
            v212 = (float)((float)((float)(v251 * _S23) + (float)(v252 * _S22)) + (float)(v250 * _S21)) + v35;
          if (v210 <= v37)
            v213 = v212;
          else
            v213 = v37;
          v214 = (float)((float)(_S3 + _S4) + _S20) + _S22;
          v215 = (float)((float)(_S0 + _S6) + _S7) + _S23;
          *v53 = v205;
          v53[1] = v208;
          *v66 = v211;
          v66[1] = llroundf(v213);
          v216 = (float)((float)(_S1 + _S5) + _S19) + _S21;
          v217 = (float)((float)(v254 + (float)(v214 * v249)) + (float)(v215 * v248)) + (float)(v216 * v247);
          v218 = v253;
          if (v217 <= v253)
          {
            v218 = (float)((float)(v254 + (float)(v214 * v249)) + (float)(v215 * v248)) + (float)(v216 * v247);
            if (v217 < v259)
              v218 = v259;
          }
          v219 = (float)((float)(v254 + (float)(v214 * v246)) + (float)(v215 * v245)) + (float)(v216 * v243);
          *(_BYTE *)(v54 + v63) = llroundf(v218);
          v220 = v253;
          v28 = v239;
          v30 = v237;
          v31 = v258;
          if (v219 <= v253)
          {
            v220 = v219;
            if (v219 < v259)
              v220 = v259;
          }
          v41 += 4;
          v64 += 4;
          v53 += 2;
          v66 += 2;
          *(_BYTE *)(v54 + v63 + 1) = llroundf(v220);
          v63 += 2;
          v33 = v256;
          v32 = v257;
          v34 = v255;
          v26 = 8191.0;
          v29 = v232;
          v59 = v230;
          v57 = v231;
        }
        while (v9 > v63);
      }
      v41 = &v62[v20];
      v42 = &v61[v21];
      v53 = &v60[v23];
      v54 += v24;
      v8 += 2;
    }
    while (v12 > v8);
    if (v229 && v228)
    {
      v221 = 0;
      do
      {
        if (v9)
        {
          v222 = v9;
          v223 = v25;
          v224 = (unsigned __int16 *)v22;
          do
          {
            v225 = *v224++;
            *v223++ = llroundf((float)v225 * 0.0038911);
            --v222;
          }
          while (v222);
        }
        v22 += v226;
        v25 += v227;
        ++v221;
      }
      while (v221 != v12);
    }
    else if (v228)
    {
      do
      {
        if (v9)
          result = memset(v25, 255, v9);
        v25 += v227;
        --v12;
      }
      while (v12);
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Mat_TRC_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Mat_TRC_420vf_GCD);
  return 0;
}

_QWORD *vt_Copy_xf444_TRC_Mat_TRC_420vf_GCD(_QWORD *result, uint64_t a2, double a3, float a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  unsigned int v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  unsigned int v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  unsigned int v51;
  uint64_t v52;
  _BYTE *v53;
  char v54;
  uint64_t v55;
  char v56;
  _BYTE *v57;
  char *v58;
  char *v59;
  size_t v60;
  char *v61;
  char *v62;
  _BYTE *v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  BOOL v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  unsigned int v139;
  float v141;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v150;
  float v151;
  float v154;
  float v155;
  float v169;
  float v170;
  float v171;
  char v172;
  float v173;
  float v174;
  char v175;
  float v176;
  float v177;
  char v178;
  float v179;
  float v180;
  float v181;
  float v182;
  float v183;
  float v184;
  float v185;
  float v186;
  float v187;
  uint64_t v188;
  size_t v189;
  _BYTE *v190;
  unsigned __int16 *v191;
  unsigned int v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  float v196;
  float v197;
  float v198;
  float v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  float v206;
  float v207;
  float v208;
  float v209;
  float v210;
  float v211;
  float v212;
  float v213;

  v4 = *(_QWORD *)((char *)result + 28);
  v5 = 2 * *(unsigned __int8 *)result;
  v6 = v4 * a2 / v5;
  v7 = (v4 + v4 * a2) / v5;
  if (2 * v7 != 2 * v6)
  {
    v8 = 0;
    v9 = *(_QWORD *)((char *)result + 20);
    v10 = *(_QWORD *)((char *)result + 36);
    v11 = *(_QWORD *)((char *)result + 44) + 2 * v6;
    v12 = 2 * v7 - 2 * v6;
    v13 = result[14];
    v14 = (_QWORD *)result[16];
    v15 = result[15] + 2 * (result[13] * a2 / v5);
    v16 = result[19];
    v17 = (_QWORD *)result[7];
    v18 = (uint64_t *)result[8];
    v19 = (uint64_t *)result[17];
    v20 = *v18;
    v21 = v18[1];
    v193 = v18[2];
    v195 = v17[2];
    v22 = v195 + v193 * v11 + 2 * v10;
    v23 = *v19;
    v24 = v19[1];
    v25 = v19[2];
    v194 = v14[2];
    v26 = (_BYTE *)(v194 + v25 * v15 + v13);
    *(float *)&v27 = 8191.0 / (float)*(unsigned int *)(v16 + 128);
    LOWORD(a4) = *(_WORD *)(v16 + 140);
    v28 = (float)LODWORD(a4);
    LOWORD(a4) = *(_WORD *)(v16 + 142);
    v29 = (float)LODWORD(a4);
    v30 = *(float *)&v27 * *(float *)v16;
    v31 = *(float *)&v27 * *(float *)(v16 + 8);
    v32 = *(float *)&v27 * *(float *)(v16 + 16);
    v33 = *(float *)&v27 * *(float *)(v16 + 20);
    v34 = *(float *)&v27 * *(float *)(v16 + 28);
    LOWORD(v27) = *(_WORD *)(v16 + 144);
    v35 = (float)v27;
    LOWORD(v27) = *(_WORD *)(v16 + 146);
    v36 = (float)v27;
    LOWORD(v27) = *(_WORD *)(v16 + 148);
    v37 = (float)v27;
    LOWORD(v27) = *(_WORD *)(v16 + 150);
    *(float *)&v38 = (float)v27;
    v213 = *(float *)&v38;
    LOWORD(v38) = *(_WORD *)(v16 + 152);
    v207 = (float)v38;
    v208 = v36;
    v205 = *(float *)(v16 + 40);
    v206 = *(float *)(v16 + 36);
    v203 = *(float *)(v16 + 48) * 0.25;
    v204 = *(float *)(v16 + 44);
    v201 = *(float *)(v16 + 56) * 0.25;
    v202 = *(float *)(v16 + 52) * 0.25;
    v199 = *(float *)(v16 + 64) * 0.25;
    v200 = *(float *)(v16 + 60) * 0.25;
    v197 = *(float *)(v16 + 68) * 0.25;
    v198 = *(float *)(v16 + 72);
    v39 = *(float *)(v16 + 80);
    v196 = *(float *)(v16 + 76);
    v40 = *(float *)(v16 + 84);
    v41 = *(float *)(v16 + 88);
    v42 = *(float *)(v16 + 92);
    v43 = *(float *)(v16 + 96);
    v44 = *(float *)(v16 + 100);
    v45 = *(float *)(v16 + 104);
    result = (_QWORD *)(v16 + 164);
    v46 = v17[1];
    v47 = (char *)(*v17 + *v18 * v11 + 2 * v10);
    v48 = v46 + v21 * v11 + 2 * v10;
    v49 = v16 + 16548;
    if (v46)
      v50 = (char *)v48;
    else
      v50 = 0;
    v51 = *(unsigned __int8 *)(v16 + 124);
    v52 = v14[1];
    v53 = (_BYTE *)(*v14 + v23 * v15 + v13);
    if (v51 >= 0x11)
      v54 = 0;
    else
      v54 = 16 - v51;
    v55 = v52 + v19[1] * (v15 / 2) + v13;
    v56 = v54;
    v211 = v32;
    v212 = v31;
    v209 = v34;
    v210 = v33;
    do
    {
      v57 = &v53[v23];
      v58 = &v50[v21];
      v59 = &v47[v20];
      if (v9)
      {
        v60 = 0;
        v61 = &v47[v20];
        v62 = &v50[v21];
        v63 = &v53[v23];
        do
        {
          if (v50)
          {
            v64 = (float)(*(unsigned __int16 *)v50 >> v56) - v29;
            v65 = (float)(*((unsigned __int16 *)v50 + 1) >> v56) - v29;
            v50 += 4;
            v66 = v31 * v65;
            v67 = (float)(v33 * v65) + (float)(v64 * v32);
            v68 = v34 * v64;
          }
          else
          {
            v68 = 0.0;
            v67 = 0.0;
            v66 = 0.0;
          }
          v69 = v30 * (float)((float)(*(unsigned __int16 *)v47 >> v56) - v28);
          v70 = v66 + v69;
          v71 = (float)(v66 + v69) <= 8191.0;
          v72 = 8191.0;
          if (v71)
          {
            v72 = v70;
            if (v70 < 0.0)
              v72 = 0.0;
          }
          v73 = v67 + v69;
          v74 = 8191.0;
          if (v73 <= 8191.0)
          {
            v74 = v73;
            if (v73 < 0.0)
              v74 = 0.0;
          }
          v75 = v68 + v69;
          v76 = 8191.0;
          if (v75 <= 8191.0)
          {
            v76 = v75;
            if (v75 < 0.0)
              v76 = 0.0;
          }
          if (v50)
          {
            v77 = (float)(*(unsigned __int16 *)v50 >> v56) - v29;
            v78 = (float)(*((unsigned __int16 *)v50 + 1) >> v56) - v29;
            v50 += 4;
            v79 = v31 * v78;
            v80 = (float)(v33 * v78) + (float)(v77 * v32);
            v81 = v34 * v77;
          }
          else
          {
            v81 = 0.0;
            v80 = 0.0;
            v79 = 0.0;
          }
          v82 = v30 * (float)((float)(*((unsigned __int16 *)v47 + 1) >> v56) - v28);
          v83 = v79 + v82;
          v84 = 8191.0;
          v85 = 8191.0;
          if (v83 <= 8191.0)
          {
            v85 = v83;
            if (v83 < 0.0)
              v85 = 0.0;
          }
          v86 = 8191.0;
          if ((float)(v80 + v82) <= 8191.0)
          {
            v86 = v80 + v82;
            if ((float)(v80 + v82) < 0.0)
              v86 = 0.0;
          }
          v87 = v81 + v82;
          if (v87 <= 8191.0)
          {
            v84 = v87;
            if (v87 < 0.0)
              v84 = 0.0;
          }
          if (v62)
          {
            v88 = (float)(*(unsigned __int16 *)v62 >> v56) - v29;
            v89 = (float)(*((unsigned __int16 *)v62 + 1) >> v56) - v29;
            v62 += 4;
            v90 = v31 * v89;
            v91 = (float)(v33 * v89) + (float)(v88 * v32);
            v92 = v34 * v88;
          }
          else
          {
            v92 = 0.0;
            v91 = 0.0;
            v90 = 0.0;
          }
          v93 = v30 * (float)((float)(*(unsigned __int16 *)v61 >> v56) - v28);
          v94 = v90 + v93;
          v95 = 8191.0;
          v96 = 8191.0;
          if (v94 <= 8191.0)
          {
            v96 = v94;
            if (v94 < 0.0)
              v96 = 0.0;
          }
          v97 = v91 + v93;
          v71 = (float)(v91 + v93) <= 8191.0;
          v98 = 8191.0;
          if (v71)
          {
            v98 = v97;
            if (v97 < 0.0)
              v98 = 0.0;
          }
          v99 = v92 + v93;
          if (v99 <= 8191.0)
          {
            v95 = v99;
            if (v99 < 0.0)
              v95 = 0.0;
          }
          if (v62)
          {
            v100 = (float)(*(unsigned __int16 *)v62 >> v56) - v29;
            v101 = (float)(*((unsigned __int16 *)v62 + 1) >> v56) - v29;
            v62 += 4;
            v102 = v31 * v101;
            v103 = (float)(v33 * v101) + (float)(v100 * v32);
            v104 = v34 * v100;
          }
          else
          {
            v104 = 0.0;
            v103 = 0.0;
            v102 = 0.0;
          }
          v105 = v28;
          v106 = v30 * (float)((float)(*((unsigned __int16 *)v61 + 1) >> v56) - v28);
          v107 = v102 + v106;
          v108 = 8191.0;
          if (v107 <= 8191.0)
          {
            v108 = v107;
            if (v107 < 0.0)
              v108 = 0.0;
          }
          v109 = v103 + v106;
          v71 = (float)(v103 + v106) <= 8191.0;
          v110 = 8191.0;
          if (v71)
          {
            v110 = v109;
            if (v109 < 0.0)
              v110 = 0.0;
          }
          v111 = v104 + v106;
          v112 = 8191.0;
          if (v111 <= 8191.0)
          {
            v112 = v111;
            if (v111 < 0.0)
              v112 = 0.0;
          }
          _H0 = *((_WORD *)result + llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          _H3 = *((_WORD *)result + llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          _H6 = *((_WORD *)result + llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H24 = *((_WORD *)result + llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          _H25 = *((_WORD *)result + llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          _H27 = *((_WORD *)result + llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm
          {
            FCVT            S25, H25
            FCVT            S27, H27
          }
          _H4 = *((_WORD *)result + llroundf(fminf(fmaxf(v96, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H5 = *((_WORD *)result + llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H17 = *((_WORD *)result + llroundf(fminf(fmaxf(v95, 0.0), 8191.0)));
          __asm { FCVT            S17, H17 }
          _H21 = *((_WORD *)result + llroundf(fminf(fmaxf(v108, 0.0), 8191.0)));
          __asm { FCVT            S21, H21 }
          _H7 = *((_WORD *)result + llroundf(fminf(fmaxf(v110, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          v139 = llroundf(fminf(fmaxf(v112, 0.0), 8191.0));
          _S1 = (float)((float)(v196 * _S3) + (float)(_S0 * v198)) + (float)(_S6 * v39);
          v141 = (float)((float)(v41 * _S3) + (float)(_S0 * v40)) + (float)(_S6 * v42);
          _S3 = (float)((float)(v44 * _S3) + (float)(_S0 * v43)) + (float)(_S6 * v45);
          v143 = (float)((float)(v196 * _S25) + (float)(_S24 * v198)) + (float)(_S27 * v39);
          v144 = (float)((float)(v41 * _S25) + (float)(_S24 * v40)) + (float)(_S27 * v42);
          v145 = (float)((float)(v44 * _S25) + (float)(_S24 * v43)) + (float)(_S27 * v45);
          v146 = (float)((float)(v196 * _S5) + (float)(_S4 * v198)) + (float)(_S17 * v39);
          v147 = (float)((float)(v41 * _S5) + (float)(_S4 * v40)) + (float)(_S17 * v42);
          v148 = (float)((float)(v44 * _S5) + (float)(_S4 * v43)) + (float)(_S17 * v45);
          _S0 = (float)(v196 * _S7) + (float)(_S21 * v198);
          v150 = (float)(v41 * _S7) + (float)(_S21 * v40);
          v151 = (float)(v44 * _S7) + (float)(_S21 * v43);
          LOWORD(_S7) = *((_WORD *)result + v139);
          __asm { FCVT            S7, H7 }
          _S21 = _S0 + (float)(_S7 * v39);
          v154 = v150 + (float)(_S7 * v42);
          v155 = v151 + (float)(_S7 * v45);
          LOWORD(_S0) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          __asm { FCVT            S5, H0 }
          LOWORD(_S0) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v141, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          LOWORD(_S1) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          __asm { FCVT            S4, H1 }
          LOWORD(_S1) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v143, 0.0), 8191.0)));
          __asm { FCVT            S6, H1 }
          LOWORD(_S1) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v144, 0.0), 8191.0)));
          LOWORD(_S3) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v145, 0.0), 8191.0)));
          __asm
          {
            FCVT            S24, H1
            FCVT            S17, H3
          }
          LOWORD(_S1) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v146, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          LOWORD(_S3) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v147, 0.0), 8191.0)));
          __asm { FCVT            S7, H3 }
          LOWORD(_S3) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v148, 0.0), 8191.0)));
          __asm { FCVT            S25, H3 }
          LOWORD(_S3) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(_S21, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          LOWORD(_S21) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v154, 0.0), 8191.0)));
          _H19 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v155, 0.0), 8191.0)));
          __asm
          {
            FCVT            S20, H21
            FCVT            S19, H19
          }
          v169 = (float)((float)((float)(v205 * _S0) + (float)(v206 * _S5)) + (float)(v204 * _S4)) + v35;
          if (v169 < v35)
            v170 = v35;
          else
            v170 = (float)((float)((float)(v205 * _S0) + (float)(v206 * _S5)) + (float)(v204 * _S4)) + v35;
          v71 = v169 <= v37;
          v171 = (float)((float)((float)(v205 * _S24) + (float)(v206 * _S6)) + (float)(v204 * _S17)) + v35;
          if (!v71)
            v170 = v37;
          v172 = llroundf(v170);
          if (v171 < v35)
            v173 = v35;
          else
            v173 = (float)((float)((float)(v205 * _S24) + (float)(v206 * _S6)) + (float)(v204 * _S17)) + v35;
          v71 = v171 <= v37;
          v174 = (float)((float)((float)(v205 * _S7) + (float)(v206 * _S1)) + (float)(v204 * _S25)) + v35;
          if (!v71)
            v173 = v37;
          v175 = llroundf(v173);
          if (v174 < v35)
            v176 = v35;
          else
            v176 = (float)((float)((float)(v205 * _S7) + (float)(v206 * _S1)) + (float)(v204 * _S25)) + v35;
          v71 = v174 <= v37;
          v177 = (float)((float)((float)(v205 * _S20) + (float)(v206 * _S3)) + (float)(v204 * _S19)) + v35;
          if (!v71)
            v176 = v37;
          v178 = llroundf(v176);
          if (v177 < v35)
            v179 = v35;
          else
            v179 = (float)((float)((float)(v205 * _S20) + (float)(v206 * _S3)) + (float)(v204 * _S19)) + v35;
          if (v177 <= v37)
            v180 = v179;
          else
            v180 = v37;
          v181 = (float)((float)(_S5 + _S6) + _S1) + _S3;
          v182 = (float)((float)(_S0 + _S24) + _S7) + _S20;
          *v53 = v172;
          v53[1] = v175;
          *v63 = v178;
          v63[1] = llroundf(v180);
          v183 = (float)((float)(_S4 + _S17) + _S25) + _S19;
          v184 = (float)((float)(v208 + (float)(v181 * v203)) + (float)(v182 * v202)) + (float)(v183 * v201);
          v185 = v207;
          if (v184 <= v207)
          {
            v185 = (float)((float)(v208 + (float)(v181 * v203)) + (float)(v182 * v202)) + (float)(v183 * v201);
            if (v184 < v213)
              v185 = v213;
          }
          v186 = (float)((float)(v208 + (float)(v181 * v200)) + (float)(v182 * v199)) + (float)(v183 * v197);
          *(_BYTE *)(v55 + v60) = llroundf(v185);
          v187 = v207;
          v28 = v105;
          v32 = v211;
          v31 = v212;
          if (v186 <= v207)
          {
            v187 = v186;
            if (v186 < v213)
              v187 = v213;
          }
          v47 += 4;
          v61 += 4;
          v53 += 2;
          v63 += 2;
          *(_BYTE *)(v55 + v60 + 1) = llroundf(v187);
          v60 += 2;
          v34 = v209;
          v33 = v210;
        }
        while (v9 > v60);
      }
      v47 = &v59[v20];
      v50 = &v58[v21];
      v53 = &v57[v23];
      v55 += v24;
      v8 += 2;
    }
    while (v12 > v8);
    if (v195 && v194)
    {
      v188 = 0;
      do
      {
        if (v9)
        {
          v189 = v9;
          v190 = v26;
          v191 = (unsigned __int16 *)v22;
          do
          {
            v192 = *v191++;
            *v190++ = llroundf((float)v192 * 0.0038911);
            --v189;
          }
          while (v189);
        }
        v22 += v193;
        v26 += v25;
        ++v188;
      }
      while (v188 != v12);
    }
    else if (v194)
    {
      do
      {
        if (v9)
          result = memset(v26, 255, v9);
        v26 += v25;
        --v12;
      }
      while (v12);
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_rgb_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_rgb_420vf_GCD);
  return 0;
}

_QWORD *vt_Copy_xf444_rgb_420vf_GCD(_QWORD *result, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  _BYTE *v33;
  unsigned int v34;
  unsigned int v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  char *v53;
  unsigned int v54;
  char v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  char v59;
  _BYTE *v60;
  char *v61;
  char *v62;
  size_t v63;
  char *v64;
  char *v65;
  _BYTE *v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  char v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  uint64_t v122;
  size_t v123;
  _BYTE *v124;
  unsigned __int16 *v125;
  unsigned int v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;

  v6 = *(_QWORD *)((char *)result + 28);
  v7 = 2 * *(unsigned __int8 *)result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (2 * v9 == 2 * v8)
    return result;
  v10 = 0;
  v11 = *(_QWORD *)((char *)result + 20);
  v12 = *(_QWORD *)((char *)result + 36);
  v13 = *(_QWORD *)((char *)result + 44) + 2 * v8;
  v14 = 2 * v9 - 2 * v8;
  v15 = result[14];
  v16 = (_QWORD *)result[16];
  v17 = result[15] + 2 * (result[13] * a2 / v7);
  v18 = result[19];
  v20 = (_QWORD *)result[7];
  v19 = (uint64_t *)result[8];
  v21 = (uint64_t *)result[17];
  v22 = *v19;
  v23 = v19[1];
  v24 = v19[2];
  v25 = v20[1];
  v26 = v20[2];
  v27 = v26 + v24 * v13 + 2 * v12;
  v28 = *v21;
  v29 = v21[1];
  v30 = v21[2];
  v31 = v16[2];
  v32 = (char *)(*v20 + v22 * v13 + 2 * v12);
  v33 = (_BYTE *)(v31 + v30 * v17 + v15);
  *(float *)&v34 = (float)*(unsigned int *)(v18 + 128);
  *(float *)&v35 = (float)*(unsigned int *)(v18 + 136);
  v36 = *(float *)&v35 / *(float *)&v34;
  LOWORD(v34) = *(_WORD *)(v18 + 140);
  v37 = (float)v34;
  LOWORD(v35) = *(_WORD *)(v18 + 142);
  v38 = (float)v35;
  v39 = v36 * *(float *)v18;
  v40 = v36 * *(float *)(v18 + 8);
  v41 = v36 * *(float *)(v18 + 16);
  v42 = v36 * *(float *)(v18 + 20);
  v43 = *(float *)(v18 + 28);
  v44 = v36 * v43;
  LOWORD(v43) = *(_WORD *)(v18 + 144);
  v45 = (float)LODWORD(v43);
  LOWORD(v2) = *(_WORD *)(v18 + 146);
  v46 = (float)v2;
  LOWORD(v3) = *(_WORD *)(v18 + 148);
  v47 = (float)v3;
  LOWORD(v4) = *(_WORD *)(v18 + 150);
  v48 = (float)v4;
  LOWORD(v5) = *(_WORD *)(v18 + 152);
  v49 = (float)v5;
  v50 = *(float *)(v18 + 36);
  v51 = *(float *)(v18 + 40);
  v52 = *(float *)(v18 + 44);
  v131 = *(float *)(v18 + 52) * 0.25;
  v132 = *(float *)(v18 + 48) * 0.25;
  v129 = *(float *)(v18 + 60) * 0.25;
  v130 = *(float *)(v18 + 56) * 0.25;
  v127 = *(float *)(v18 + 68) * 0.25;
  v128 = *(float *)(v18 + 64) * 0.25;
  if (v25)
    v53 = (char *)(v25 + v23 * v13 + 2 * v12);
  else
    v53 = 0;
  v54 = *(unsigned __int8 *)(v18 + 124);
  v55 = 16 - v54;
  v56 = v16[1];
  v57 = (_BYTE *)(*v16 + v28 * v17 + v15);
  if (v54 >= 0x11)
    v55 = 0;
  if (v17 >= 0)
    v58 = v17;
  else
    v58 = v17 + 1;
  result = (_QWORD *)(v56 + v29 * (v58 >> 1) + v15);
  v59 = v55;
  do
  {
    v60 = &v57[v28];
    v61 = &v53[v23];
    v62 = &v32[v22];
    if (v11)
    {
      v63 = 0;
      v64 = &v32[v22];
      v65 = &v53[v23];
      v66 = &v57[v28];
      do
      {
        v67 = 0.0;
        if (v53)
        {
          v68 = (float)(*(unsigned __int16 *)v53 >> v59) - v38;
          v69 = (float)(*((unsigned __int16 *)v53 + 1) >> v59) - v38;
          v53 += 4;
          v70 = v40 * v69;
          v71 = (float)(v42 * v69) + (float)(v68 * v41);
          v72 = v44 * v68;
          if (v53)
          {
            v73 = (float)(*(unsigned __int16 *)v53 >> v59) - v38;
            v74 = (float)(*((unsigned __int16 *)v53 + 1) >> v59) - v38;
            v53 += 4;
            v75 = v40 * v74;
            v76 = (float)(v42 * v74) + (float)(v73 * v41);
            v67 = v44 * v73;
            goto LABEL_18;
          }
        }
        else
        {
          v72 = 0.0;
          v71 = 0.0;
          v70 = 0.0;
        }
        v76 = 0.0;
        v75 = 0.0;
LABEL_18:
        v77 = 0.0;
        if (!v65)
        {
          v82 = 0.0;
          v81 = 0.0;
          v80 = 0.0;
LABEL_22:
          v86 = 0.0;
          v85 = 0.0;
          goto LABEL_23;
        }
        v78 = (float)(*(unsigned __int16 *)v65 >> v59) - v38;
        v79 = (float)(*((unsigned __int16 *)v65 + 1) >> v59) - v38;
        v65 += 4;
        v80 = v40 * v79;
        v81 = (float)(v42 * v79) + (float)(v78 * v41);
        v82 = v44 * v78;
        if (!v65)
          goto LABEL_22;
        v83 = (float)(*(unsigned __int16 *)v65 >> v59) - v38;
        v84 = (float)(*((unsigned __int16 *)v65 + 1) >> v59) - v38;
        v65 += 4;
        v85 = v40 * v84;
        v86 = (float)(v42 * v84) + (float)(v83 * v41);
        v77 = v44 * v83;
LABEL_23:
        v87 = v39 * (float)((float)(*(unsigned __int16 *)v32 >> v59) - v37);
        v88 = v70 + v87;
        v89 = v71 + v87;
        v90 = v72 + v87;
        v91 = v39 * (float)((float)(*((unsigned __int16 *)v32 + 1) >> v59) - v37);
        v92 = v75 + v91;
        v93 = v76 + v91;
        v94 = v67 + v91;
        v95 = v39 * (float)((float)(*(unsigned __int16 *)v64 >> v59) - v37);
        v96 = v80 + v95;
        v97 = v81 + v95;
        v98 = v82 + v95;
        v99 = v39 * (float)((float)(*((unsigned __int16 *)v64 + 1) >> v59) - v37);
        v100 = v85 + v99;
        v101 = v86 + v99;
        v102 = v77 + v99;
        v103 = (float)((float)((float)(v51 * v89) + (float)(v50 * v88)) + (float)(v52 * v90)) + v45;
        v104 = (float)((float)((float)(v51 * v93) + (float)(v50 * v92)) + (float)(v52 * v94)) + v45;
        v105 = (float)((float)((float)(v51 * v97) + (float)(v50 * v96)) + (float)(v52 * v98)) + v45;
        if (v103 < v45)
          v106 = v45;
        else
          v106 = (float)((float)((float)(v51 * v89) + (float)(v50 * v88)) + (float)(v52 * v90)) + v45;
        if (v103 > v47)
          v106 = v47;
        *v57 = llroundf(v106);
        if (v104 < v45)
          v107 = v45;
        else
          v107 = (float)((float)((float)(v51 * v93) + (float)(v50 * v92)) + (float)(v52 * v94)) + v45;
        if (v104 <= v47)
          v108 = v107;
        else
          v108 = v47;
        v109 = llroundf(v108);
        v110 = (float)((float)((float)(v51 * v101) + (float)(v50 * v100)) + (float)(v52 * v102)) + v45;
        v57[1] = v109;
        if (v105 < v45)
          v111 = v45;
        else
          v111 = (float)((float)((float)(v51 * v97) + (float)(v50 * v96)) + (float)(v52 * v98)) + v45;
        if (v105 <= v47)
          v112 = v111;
        else
          v112 = v47;
        *v66 = llroundf(v112);
        if (v110 < v45)
          v113 = v45;
        else
          v113 = (float)((float)((float)(v51 * v101) + (float)(v50 * v100)) + (float)(v52 * v102)) + v45;
        if (v110 <= v47)
          v114 = v113;
        else
          v114 = v47;
        v66[1] = llroundf(v114);
        v115 = (float)((float)(v88 + v92) + v96) + v100;
        v116 = (float)((float)(v89 + v93) + v97) + v101;
        v117 = (float)((float)(v90 + v94) + v98) + v102;
        v118 = (float)((float)(v46 + (float)(v115 * v132)) + (float)(v116 * v131)) + (float)(v117 * v130);
        v119 = v49;
        if (v118 <= v49)
        {
          v119 = (float)((float)(v46 + (float)(v115 * v132)) + (float)(v116 * v131)) + (float)(v117 * v130);
          if (v118 < v48)
            v119 = v48;
        }
        v120 = (float)((float)(v46 + (float)(v115 * v129)) + (float)(v116 * v128)) + (float)(v117 * v127);
        *((_BYTE *)result + v63) = llroundf(v119);
        v121 = v49;
        if (v120 <= v49)
        {
          v121 = v120;
          if (v120 < v48)
            v121 = v48;
        }
        v32 += 4;
        v64 += 4;
        v57 += 2;
        v66 += 2;
        *((_BYTE *)result + v63 + 1) = llroundf(v121);
        v63 += 2;
      }
      while (v11 > v63);
    }
    v32 = &v62[v22];
    v53 = &v61[v23];
    v57 = &v60[v28];
    result = (_QWORD *)((char *)result + v29);
    v10 += 2;
  }
  while (v14 > v10);
  if (v26 && v31)
  {
    v122 = 0;
    do
    {
      if (v11)
      {
        v123 = v11;
        v124 = v33;
        v125 = (unsigned __int16 *)v27;
        do
        {
          v126 = *v125++;
          *v124++ = llroundf((float)v126 * 0.0038911);
          --v123;
        }
        while (v123);
      }
      v27 += v24;
      v33 += v30;
      ++v122;
    }
    while (v122 != v14);
  }
  else if (v31)
  {
    do
    {
      if (v11)
        result = memset(v33, 255, v11);
      v33 += v30;
      --v14;
    }
    while (v14);
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Tone_Mat_TRC_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Tone_Mat_TRC_xf420_GCD);
  return 0;
}

_QWORD *vt_Copy_xf444_TRC_Tone_Mat_TRC_xf420_GCD(_QWORD *result, uint64_t a2, double a3, float a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  float v25;
  unsigned int v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  unsigned int v35;
  float v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  unsigned int v43;
  char v44;
  unsigned int v45;
  char v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char v50;
  float v51;
  float v52;
  float v53;
  float v54;
  char *v55;
  char *v56;
  char *v57;
  unint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  BOOL v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  unsigned int v117;
  float v130;
  float v131;
  float v132;
  float v137;
  float v138;
  float v143;
  float v144;
  float v145;
  float v150;
  float v151;
  float v152;
  float v154;
  float v155;
  float v156;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v174;
  float v175;
  float v176;
  float v181;
  float v197;
  float v198;
  float v199;
  unsigned int v200;
  float v201;
  float v202;
  unsigned int v203;
  float v204;
  float v205;
  unsigned int v206;
  float v207;
  float v208;
  float v209;
  float v210;
  float v211;
  float v212;
  float v213;
  _WORD *v214;
  float v215;
  float v216;
  size_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  float v223;
  float v224;
  float v225;
  float v226;
  float v227;
  float v228;
  float v229;
  float v230;
  float v231;
  float v232;
  float v233;
  float v234;
  float v235;
  float v236;
  float v237;
  float v238;
  float v239;
  float v240;
  float v241;
  float v242;
  float v243;
  float v244;
  float v245;
  float v246;
  float v247;
  float v248;
  float v249;
  float v250;
  float v251;
  float v252;

  v4 = *(_QWORD *)((char *)result + 28);
  v5 = 2 * *(unsigned __int8 *)result;
  v6 = v4 * a2 / v5;
  v7 = (v4 + v4 * a2) / v5;
  if (2 * v7 != 2 * v6)
  {
    v8 = 0;
    v9 = *(_QWORD *)((char *)result + 20);
    v10 = *(_QWORD *)((char *)result + 36);
    v11 = *(_QWORD *)((char *)result + 44) + 2 * v6;
    v12 = 2 * v7 - 2 * v6;
    v13 = result[14];
    v14 = (_QWORD *)result[16];
    v15 = result[15] + 2 * (result[13] * a2 / v5);
    v16 = result[19];
    v17 = (_QWORD *)result[7];
    v18 = (uint64_t *)result[8];
    v19 = (uint64_t *)result[17];
    v20 = *v18;
    v21 = v18[1];
    v218 = v18[2];
    v221 = v17[2];
    v22 = (char *)(v221 + v218 * v11 + 2 * v10);
    v23 = *v19;
    v219 = v19[2];
    v220 = v14[2];
    v24 = (char *)(v220 + v219 * v15 + 2 * v13);
    v25 = 8191.0;
    *(float *)&v26 = 8191.0 / (float)*(unsigned int *)(v16 + 128);
    LOWORD(a4) = *(_WORD *)(v16 + 140);
    v27 = (float)LODWORD(a4);
    LOWORD(a4) = *(_WORD *)(v16 + 142);
    v28 = (float)LODWORD(a4);
    v29 = *(float *)&v26 * *(float *)v16;
    v30 = *(float *)&v26 * *(float *)(v16 + 8);
    v31 = *(float *)&v26 * *(float *)(v16 + 16);
    v32 = *(float *)&v26 * *(float *)(v16 + 20);
    v33 = *(float *)&v26 * *(float *)(v16 + 28);
    LOWORD(v26) = *(_WORD *)(v16 + 144);
    v34 = (float)v26;
    LOWORD(v26) = *(_WORD *)(v16 + 146);
    *(float *)&v35 = (float)v26;
    v247 = *(float *)&v35;
    LOWORD(v35) = *(_WORD *)(v16 + 148);
    v36 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v16 + 150);
    *(float *)&v37 = (float)v35;
    v252 = *(float *)&v37;
    LOWORD(v37) = *(_WORD *)(v16 + 152);
    v245 = *(float *)(v16 + 36);
    v246 = (float)v37;
    v243 = *(float *)(v16 + 44);
    v244 = *(float *)(v16 + 40);
    v241 = *(float *)(v16 + 52) * 0.25;
    v242 = *(float *)(v16 + 48) * 0.25;
    v239 = *(float *)(v16 + 60) * 0.25;
    v240 = *(float *)(v16 + 56) * 0.25;
    v237 = *(float *)(v16 + 72);
    v238 = *(float *)(v16 + 64) * 0.25;
    v235 = *(float *)(v16 + 76);
    v236 = *(float *)(v16 + 68) * 0.25;
    v233 = *(float *)(v16 + 84);
    v234 = *(float *)(v16 + 80);
    v231 = *(float *)(v16 + 88);
    v228 = *(float *)(v16 + 96);
    v229 = *(float *)(v16 + 92);
    v226 = *(float *)(v16 + 104);
    v227 = *(float *)(v16 + 100);
    v38 = v16 + 164;
    v39 = v16 + 16548;
    result = (_QWORD *)(v16 + 32932);
    v40 = v17[1];
    v41 = (char *)(*v17 + *v18 * v11 + 2 * v10);
    if (v40)
      v42 = (char *)(v40 + v21 * v11 + 2 * v10);
    else
      v42 = 0;
    v43 = *(unsigned __int8 *)(v16 + 132);
    if (v43 >= 0x11)
      v44 = 0;
    else
      v44 = 16 - v43;
    v45 = *(unsigned __int8 *)(v16 + 124);
    v46 = 16 - v45;
    v47 = v14[1];
    v48 = (char *)(*v14 + v23 * v15 + 2 * v13);
    if (v45 >= 0x11)
      v46 = 0;
    v222 = v19[1];
    v49 = v47 + v222 * (v15 / 2) + 2 * v13;
    v50 = v44;
    v51 = *(float *)(v16 + 108);
    v52 = *(float *)(v16 + 112);
    v54 = *(float *)(v16 + 116);
    v53 = *(float *)(v16 + 120);
    v250 = v31;
    v251 = v30;
    v248 = v33;
    v249 = v32;
    v225 = (float)LODWORD(a4);
    v232 = v27;
    v230 = v29;
    v223 = v54;
    v224 = v52;
    do
    {
      v55 = &v48[v23];
      v56 = &v42[v21];
      v57 = &v41[v20];
      if (v9)
      {
        v58 = 0;
        v59 = &v41[v20];
        v60 = &v42[v21];
        v61 = &v48[v23];
        do
        {
          if (v42)
          {
            v62 = (float)(*(unsigned __int16 *)v42 >> v46) - v28;
            v63 = (float)(*((unsigned __int16 *)v42 + 1) >> v46) - v28;
            v42 += 4;
            v64 = v30 * v63;
            v65 = (float)(v32 * v63) + (float)(v62 * v31);
            v66 = v33 * v62;
          }
          else
          {
            v66 = 0.0;
            v65 = 0.0;
            v64 = 0.0;
          }
          v67 = v29 * (float)((float)(*(unsigned __int16 *)v41 >> v46) - v27);
          v68 = v64 + v67;
          v69 = (float)(v64 + v67) <= 8191.0;
          v70 = 8191.0;
          if (v69)
          {
            v70 = v68;
            if (v68 < 0.0)
              v70 = 0.0;
          }
          v71 = v65 + v67;
          v72 = 8191.0;
          if (v71 <= 8191.0)
          {
            v72 = v71;
            if (v71 < 0.0)
              v72 = 0.0;
          }
          v73 = v66 + v67;
          if (v73 <= 8191.0)
          {
            v25 = v73;
            if (v73 < 0.0)
              v25 = 0.0;
          }
          if (v42)
          {
            v74 = (float)(*(unsigned __int16 *)v42 >> v46) - v28;
            v75 = (float)(*((unsigned __int16 *)v42 + 1) >> v46) - v28;
            v42 += 4;
            v76 = v30 * v75;
            v77 = (float)(v32 * v75) + (float)(v74 * v31);
            v78 = v33 * v74;
          }
          else
          {
            v78 = 0.0;
            v77 = 0.0;
            v76 = 0.0;
          }
          v79 = v29 * (float)((float)(*((unsigned __int16 *)v41 + 1) >> v46) - v27);
          v80 = v76 + v79;
          v81 = 8191.0;
          v82 = 8191.0;
          if (v80 <= 8191.0)
          {
            v82 = v80;
            if (v80 < 0.0)
              v82 = 0.0;
          }
          v83 = v77 + v79;
          v84 = 8191.0;
          if (v83 <= 8191.0)
          {
            v84 = v83;
            if (v83 < 0.0)
              v84 = 0.0;
          }
          v85 = v78 + v79;
          if (v85 <= 8191.0)
          {
            v81 = v85;
            if (v85 < 0.0)
              v81 = 0.0;
          }
          if (v60)
          {
            v86 = (float)(*(unsigned __int16 *)v60 >> v46) - v28;
            v87 = (float)(*((unsigned __int16 *)v60 + 1) >> v46) - v28;
            v60 += 4;
            v88 = v30 * v87;
            v89 = (float)(v32 * v87) + (float)(v86 * v31);
            v90 = v33 * v86;
          }
          else
          {
            v90 = 0.0;
            v89 = 0.0;
            v88 = 0.0;
          }
          v91 = v29 * (float)((float)(*(unsigned __int16 *)v59 >> v46) - v27);
          v92 = v88 + v91;
          v93 = 8191.0;
          v69 = (float)(v88 + v91) <= 8191.0;
          v94 = 8191.0;
          if (v69)
          {
            v94 = v92;
            if (v92 < 0.0)
              v94 = 0.0;
          }
          v95 = v89 + v91;
          v69 = (float)(v89 + v91) <= 8191.0;
          v96 = 8191.0;
          if (v69)
          {
            v96 = v95;
            if (v95 < 0.0)
              v96 = 0.0;
          }
          v97 = v90 + v91;
          if (v97 <= 8191.0)
          {
            v93 = v97;
            if (v97 < 0.0)
              v93 = 0.0;
          }
          if (v60)
          {
            v98 = (float)(*(unsigned __int16 *)v60 >> v46) - v28;
            v99 = (float)(*((unsigned __int16 *)v60 + 1) >> v46) - v28;
            v60 += 4;
            v100 = v30 * v99;
            v101 = (float)(v32 * v99) + (float)(v98 * v31);
            v102 = v33 * v98;
          }
          else
          {
            v102 = 0.0;
            v101 = 0.0;
            v100 = 0.0;
          }
          v103 = v29 * (float)((float)(*((unsigned __int16 *)v59 + 1) >> v46) - v27);
          v104 = v100 + v103;
          v69 = (float)(v100 + v103) <= 8191.0;
          v105 = 8191.0;
          if (v69)
          {
            v105 = v104;
            if (v104 < 0.0)
              v105 = 0.0;
          }
          v106 = v101 + v103;
          v107 = 8191.0;
          if (v106 <= 8191.0)
          {
            v107 = v106;
            if (v106 < 0.0)
              v107 = 0.0;
          }
          v108 = v102 + v103;
          v69 = (float)(v102 + v103) <= 8191.0;
          v109 = 8191.0;
          if (v69)
          {
            v109 = v108;
            if (v108 < 0.0)
              v109 = 0.0;
          }
          _H0 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          _H20 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          v117 = llroundf(fminf(fmaxf(v25, 0.0), 8191.0));
          __asm { FCVT            S19, H20 }
          _H20 = *(_WORD *)(v38 + 2 * v117);
          __asm { FCVT            S30, H20 }
          _H20 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          _H31 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          _H5 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          _H6 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v96, 0.0), 8191.0)));
          _H7 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v105, 0.0), 8191.0)));
          _H3 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v107, 0.0), 8191.0)));
          _H4 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v109, 0.0), 8191.0)));
          v130 = fmaxf(_S0, fmaxf(_S19, _S30));
          v131 = (float)((float)((float)(v52 * _S19) + (float)(v51 * _S0)) + (float)(v54 * _S30)) + (float)(v53 * v130);
          v132 = 8191.0;
          if (v131 <= 8191.0)
          {
            v132 = (float)((float)((float)(v52 * _S19) + (float)(v51 * _S0)) + (float)(v54 * _S30))
                 + (float)(v53 * v130);
            if (v131 < 0.0)
              v132 = 0.0;
          }
          __asm
          {
            FCVT            S21, H20
            FCVT            S22, H29
            FCVT            S23, H31
          }
          _H20 = *(_WORD *)(v39 + 2 * llroundf(v132));
          v137 = (float)((float)((float)(v52 * _S22) + (float)(v51 * _S21)) + (float)(v54 * _S23))
               + (float)(v53 * fmaxf(_S21, fmaxf(_S22, _S23)));
          v138 = 8191.0;
          if (v137 <= 8191.0)
          {
            v138 = v137;
            if (v137 < 0.0)
              v138 = 0.0;
          }
          __asm
          {
            FCVT            S9, H5
            FCVT            S10, H6
            FCVT            S11, H7
          }
          _H5 = *(_WORD *)(v39 + 2 * llroundf(v138));
          v143 = fmaxf(_S9, fmaxf(_S10, _S11));
          v144 = (float)((float)((float)(v52 * _S10) + (float)(v51 * _S9)) + (float)(v54 * _S11)) + (float)(v53 * v143);
          v145 = 8191.0;
          if (v144 <= 8191.0)
          {
            v145 = (float)((float)((float)(v52 * _S10) + (float)(v51 * _S9)) + (float)(v54 * _S11))
                 + (float)(v53 * v143);
            if (v144 < 0.0)
              v145 = 0.0;
          }
          __asm
          {
            FCVT            S29, H1
            FCVT            S31, H3
            FCVT            S8, H4
            FCVT            S1, H20
          }
          v150 = _S0 * _S1;
          v151 = _S19 * _S1;
          v152 = _S30 * _S1;
          __asm { FCVT            S0, H5 }
          v154 = _S21 * _S0;
          v155 = _S22 * _S0;
          v156 = _S23 * _S0;
          LOWORD(_S0) = *(_WORD *)(v39 + 2 * llroundf(v145));
          __asm { FCVT            S1, H0 }
          v158 = _S9 * _S1;
          v159 = _S10 * _S1;
          v160 = _S11 * _S1;
          v161 = (float)((float)((float)(v52 * _S31) + (float)(v51 * _S29)) + (float)(v54 * _S8))
               + (float)(v53 * fmaxf(_S29, fmaxf(_S31, _S8)));
          v162 = 8191.0;
          if (v161 <= 8191.0)
          {
            v162 = v161;
            if (v161 < 0.0)
              v162 = 0.0;
          }
          _H21 = *(_WORD *)(v39 + 2 * llroundf(v162));
          __asm { FCVT            S21, H21 }
          v165 = _S29 * _S21;
          v166 = _S31 * _S21;
          v167 = _S8 * _S21;
          v168 = (float)((float)(v235 * v151) + (float)(v150 * v237)) + (float)(v152 * v234);
          v169 = (float)((float)(v231 * v151) + (float)(v150 * v233)) + (float)(v152 * v229);
          _S7 = (float)((float)(v227 * v151) + (float)(v150 * v228)) + (float)(v152 * v226);
          _S19 = (float)((float)(v235 * v155) + (float)(v154 * v237)) + (float)(v156 * v234);
          _S20 = (float)((float)(v231 * v155) + (float)(v154 * v233)) + (float)(v156 * v229);
          _S5 = (float)((float)(v227 * v155) + (float)(v154 * v228)) + (float)(v156 * v226);
          v174 = (float)((float)(v235 * v159) + (float)(v158 * v237)) + (float)(v160 * v234);
          v175 = (float)((float)(v231 * v159) + (float)(v158 * v233)) + (float)(v160 * v229);
          v176 = (float)((float)(v227 * v159) + (float)(v158 * v228)) + (float)(v160 * v226);
          _S1 = (float)(v231 * v166) + (float)(v165 * v233);
          _S3 = (float)(v227 * v166) + (float)(v165 * v228);
          _S22 = (float)((float)(v235 * v166) + (float)(v165 * v237)) + (float)(v167 * v234);
          _S23 = _S1 + (float)(v167 * v229);
          v181 = _S3 + (float)(v167 * v226);
          _H0 = *((_WORD *)result + llroundf(fminf(fmaxf(v168, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          LOWORD(_S1) = *((_WORD *)result + llroundf(fminf(fmaxf(v169, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          LOWORD(_S3) = *((_WORD *)result + llroundf(fminf(fmaxf(_S7, 0.0), 8191.0)));
          _H4 = *((_WORD *)result + llroundf(fminf(fmaxf(_S19, 0.0), 8191.0)));
          __asm
          {
            FCVT            S3, H3
            FCVT            S4, H4
          }
          _H6 = *((_WORD *)result + llroundf(fminf(fmaxf(_S20, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          LOWORD(_S5) = *((_WORD *)result + llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          LOWORD(_S7) = *((_WORD *)result + llroundf(fminf(fmaxf(v174, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          LOWORD(_S19) = *((_WORD *)result + llroundf(fminf(fmaxf(v175, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          LOWORD(_S20) = *((_WORD *)result + llroundf(fminf(fmaxf(v176, 0.0), 8191.0)));
          LOWORD(_S22) = *((_WORD *)result + llroundf(fminf(fmaxf(_S22, 0.0), 8191.0)));
          __asm
          {
            FCVT            S21, H20
            FCVT            S20, H22
          }
          LOWORD(_S22) = *((_WORD *)result + llroundf(fminf(fmaxf(_S23, 0.0), 8191.0)));
          __asm { FCVT            S22, H22 }
          LOWORD(_S23) = *((_WORD *)result + llroundf(fminf(fmaxf(v181, 0.0), 8191.0)));
          __asm { FCVT            S23, H23 }
          v197 = (float)((float)((float)(v244 * _S1) + (float)(v245 * _S0)) + (float)(v243 * _S3)) + v34;
          if (v197 < v34)
            v198 = v34;
          else
            v198 = (float)((float)((float)(v244 * _S1) + (float)(v245 * _S0)) + (float)(v243 * _S3)) + v34;
          v69 = v197 <= v36;
          v199 = (float)((float)((float)(v244 * _S6) + (float)(v245 * _S4)) + (float)(v243 * _S5)) + v34;
          if (!v69)
            v198 = v36;
          v200 = llroundf(v198);
          if (v199 < v34)
            v201 = v34;
          else
            v201 = (float)((float)((float)(v244 * _S6) + (float)(v245 * _S4)) + (float)(v243 * _S5)) + v34;
          v69 = v199 <= v36;
          v202 = (float)((float)((float)(v244 * _S19) + (float)(v245 * _S7)) + (float)(v243 * _S21)) + v34;
          if (!v69)
            v201 = v36;
          v203 = llroundf(v201);
          if (v202 < v34)
            v204 = v34;
          else
            v204 = (float)((float)((float)(v244 * _S19) + (float)(v245 * _S7)) + (float)(v243 * _S21)) + v34;
          v69 = v202 <= v36;
          v205 = (float)((float)((float)(v244 * _S22) + (float)(v245 * _S20)) + (float)(v243 * _S23)) + v34;
          if (!v69)
            v204 = v36;
          v206 = llroundf(v204);
          if (v205 < v34)
            v207 = v34;
          else
            v207 = (float)((float)((float)(v244 * _S22) + (float)(v245 * _S20)) + (float)(v243 * _S23)) + v34;
          if (v205 <= v36)
            v208 = v207;
          else
            v208 = v36;
          v209 = (float)((float)(_S0 + _S4) + _S7) + _S20;
          v210 = (float)((float)(_S1 + _S6) + _S19) + _S22;
          *(_WORD *)v48 = v200 << v50;
          *((_WORD *)v48 + 1) = v203 << v50;
          *(_WORD *)v61 = v206 << v50;
          *((_WORD *)v61 + 1) = llroundf(v208) << v50;
          v211 = (float)((float)(_S3 + _S5) + _S21) + _S23;
          v212 = (float)((float)(v247 + (float)(v209 * v242)) + (float)(v210 * v241)) + (float)(v211 * v240);
          v213 = v246;
          if (v212 <= v246)
          {
            v213 = (float)((float)(v247 + (float)(v209 * v242)) + (float)(v210 * v241)) + (float)(v211 * v240);
            if (v212 < v252)
              v213 = v252;
          }
          v214 = (_WORD *)(v49 + 2 * v58);
          v215 = (float)((float)(v247 + (float)(v209 * v239)) + (float)(v210 * v238)) + (float)(v211 * v236);
          *v214 = llroundf(v213) << v50;
          v216 = v246;
          v27 = v232;
          v29 = v230;
          v30 = v251;
          if (v215 <= v246)
          {
            v216 = v215;
            if (v215 < v252)
              v216 = v252;
          }
          v41 += 4;
          v59 += 4;
          v48 += 4;
          v61 += 4;
          v214[1] = llroundf(v216) << v50;
          v58 += 2;
          v32 = v249;
          v31 = v250;
          v33 = v248;
          v25 = 8191.0;
          v28 = v225;
          v54 = v223;
          v52 = v224;
        }
        while (v9 > v58);
      }
      v41 = &v57[v20];
      v42 = &v56[v21];
      v48 = &v55[v23];
      v49 += v222;
      v8 += 2;
    }
    while (v12 > v8);
    if (v221 && v220)
    {
      v217 = 2 * v9;
      do
      {
        result = memcpy(v24, v22, v217);
        v22 += v218;
        v24 += v219;
        --v12;
      }
      while (v12);
    }
    else if (v220)
    {
      do
      {
        if (v9)
          result = memset(v24, 255, 2 * v9);
        v24 += v219;
        --v12;
      }
      while (v12);
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Mat_TRC_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Mat_TRC_xf420_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf444_TRC_Mat_TRC_xf420_GCD(unsigned __int8 *result, uint64_t a2, double a3, float a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unsigned int v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  unsigned int v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  unsigned int v54;
  char v56;
  unsigned int v57;
  char v58;
  uint64_t v59;
  char v60;
  char v61;
  char *v62;
  char *v63;
  unsigned __int8 *v64;
  unint64_t v65;
  unsigned __int8 *v66;
  char *v67;
  char *v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  BOOL v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  unsigned int v143;
  float v145;
  float v146;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v156;
  float v159;
  float v160;
  unsigned int v165;
  unsigned int v172;
  float v176;
  float v177;
  float v178;
  unsigned int v179;
  float v180;
  float v181;
  unsigned int v182;
  float v183;
  float v184;
  unsigned int v185;
  float v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  _WORD *v193;
  float v194;
  float v195;
  size_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  float v206;
  float v207;
  float v208;
  float v209;
  float v210;
  float v211;
  float v212;
  float v213;
  float v214;
  float v215;
  float v216;
  float v217;

  v4 = *(_QWORD *)(result + 28);
  v5 = 2 * *result;
  v6 = v4 * a2 / v5;
  v7 = (v4 + v4 * a2) / v5;
  if (2 * v7 != 2 * v6)
  {
    v8 = 0;
    v9 = *(_QWORD *)(result + 20);
    v10 = *(_QWORD *)(result + 36);
    v11 = *(_QWORD *)(result + 44) + 2 * v6;
    v12 = 2 * v7 - 2 * v6;
    v13 = *((_QWORD *)result + 14);
    v14 = *((_QWORD *)result + 13) * a2 / v5;
    v15 = (_QWORD *)*((_QWORD *)result + 16);
    v16 = *((_QWORD *)result + 15) + 2 * v14;
    v17 = *((_QWORD *)result + 19);
    v18 = (uint64_t *)*((_QWORD *)result + 7);
    v19 = (uint64_t *)*((_QWORD *)result + 8);
    v20 = (uint64_t *)*((_QWORD *)result + 17);
    v21 = *v19;
    v22 = v19[1];
    v197 = v19[2];
    v200 = v18[2];
    v23 = (char *)(v200 + v197 * v11 + 2 * v10);
    v24 = *v20;
    v25 = v20[1];
    v198 = v20[2];
    v199 = v15[2];
    v26 = (char *)(v199 + v198 * v16 + 2 * v13);
    *(float *)&v27 = 8191.0 / (float)*(unsigned int *)(v17 + 128);
    LOWORD(a4) = *(_WORD *)(v17 + 140);
    v28 = (float)LODWORD(a4);
    LOWORD(a4) = *(_WORD *)(v17 + 142);
    v29 = (float)LODWORD(a4);
    v30 = *(float *)&v27 * *(float *)v17;
    v31 = *(float *)&v27 * *(float *)(v17 + 8);
    v32 = *(float *)&v27 * *(float *)(v17 + 16);
    v33 = *(float *)&v27 * *(float *)(v17 + 20);
    v34 = *(float *)&v27 * *(float *)(v17 + 28);
    LOWORD(v27) = *(_WORD *)(v17 + 144);
    v35 = (float)v27;
    LOWORD(v27) = *(_WORD *)(v17 + 146);
    v36 = (float)v27;
    LOWORD(v27) = *(_WORD *)(v17 + 148);
    v37 = (float)v27;
    LOWORD(v27) = *(_WORD *)(v17 + 150);
    *(float *)&v38 = (float)v27;
    v217 = *(float *)&v38;
    LOWORD(v38) = *(_WORD *)(v17 + 152);
    v211 = (float)v38;
    v212 = v36;
    v209 = *(float *)(v17 + 40);
    v210 = *(float *)(v17 + 36);
    v207 = *(float *)(v17 + 48) * 0.25;
    v208 = *(float *)(v17 + 44);
    v205 = *(float *)(v17 + 56) * 0.25;
    v206 = *(float *)(v17 + 52) * 0.25;
    v203 = *(float *)(v17 + 64) * 0.25;
    v204 = *(float *)(v17 + 60) * 0.25;
    v201 = *(float *)(v17 + 68) * 0.25;
    v202 = *(float *)(v17 + 72);
    v40 = *(float *)(v17 + 76);
    v39 = *(float *)(v17 + 80);
    v41 = *(float *)(v17 + 84);
    v42 = *(float *)(v17 + 88);
    v43 = *(float *)(v17 + 92);
    v44 = *(float *)(v17 + 96);
    v45 = *(float *)(v17 + 100);
    v46 = *(float *)(v17 + 104);
    v47 = v17 + 164;
    v48 = v17 + 16548;
    v50 = *v18;
    v49 = v18[1];
    result = (unsigned __int8 *)(v50 + v21 * v11 + 2 * v10);
    if (v49)
      v51 = (char *)(v49 + v22 * v11 + 2 * v10);
    else
      v51 = 0;
    v52 = v15[1];
    v53 = (char *)(*v15 + v24 * v16 + 2 * v13);
    v54 = *(unsigned __int8 *)(v17 + 132);
    _CF = v54 >= 0x11;
    v56 = 16 - v54;
    if (_CF)
      v56 = 0;
    v57 = *(unsigned __int8 *)(v17 + 124);
    if (v57 >= 0x11)
      v58 = 0;
    else
      v58 = 16 - v57;
    v59 = v52 + v20[1] * (v16 / 2) + 2 * v13;
    v60 = v58;
    v61 = v56;
    v215 = v32;
    v216 = v31;
    v213 = v34;
    v214 = v33;
    do
    {
      v62 = &v53[v24];
      v63 = &v51[v22];
      v64 = &result[v21];
      if (v9)
      {
        v65 = 0;
        v66 = &result[v21];
        v67 = &v51[v22];
        v68 = &v53[v24];
        do
        {
          if (v51)
          {
            v69 = (float)(*(unsigned __int16 *)v51 >> v60) - v29;
            v70 = (float)(*((unsigned __int16 *)v51 + 1) >> v60) - v29;
            v51 += 4;
            v71 = v31 * v70;
            v72 = (float)(v33 * v70) + (float)(v69 * v32);
            v73 = v34 * v69;
          }
          else
          {
            v73 = 0.0;
            v72 = 0.0;
            v71 = 0.0;
          }
          v74 = v30 * (float)((float)(*(unsigned __int16 *)result >> v60) - v28);
          v75 = v71 + v74;
          v76 = (float)(v71 + v74) <= 8191.0;
          v77 = 8191.0;
          if (v76)
          {
            v77 = v75;
            if (v75 < 0.0)
              v77 = 0.0;
          }
          v78 = v72 + v74;
          v79 = 8191.0;
          if (v78 <= 8191.0)
          {
            v79 = v78;
            if (v78 < 0.0)
              v79 = 0.0;
          }
          v80 = v73 + v74;
          v81 = 8191.0;
          if (v80 <= 8191.0)
          {
            v81 = v80;
            if (v80 < 0.0)
              v81 = 0.0;
          }
          if (v51)
          {
            v82 = (float)(*(unsigned __int16 *)v51 >> v60) - v29;
            v83 = (float)(*((unsigned __int16 *)v51 + 1) >> v60) - v29;
            v51 += 4;
            v84 = v31 * v83;
            v85 = (float)(v33 * v83) + (float)(v82 * v32);
            v86 = v34 * v82;
          }
          else
          {
            v86 = 0.0;
            v85 = 0.0;
            v84 = 0.0;
          }
          v87 = v30 * (float)((float)(*((unsigned __int16 *)result + 1) >> v60) - v28);
          v88 = v84 + v87;
          v89 = 8191.0;
          v90 = 8191.0;
          if (v88 <= 8191.0)
          {
            v90 = v88;
            if (v88 < 0.0)
              v90 = 0.0;
          }
          v91 = 8191.0;
          if ((float)(v85 + v87) <= 8191.0)
          {
            v91 = v85 + v87;
            if ((float)(v85 + v87) < 0.0)
              v91 = 0.0;
          }
          v92 = v86 + v87;
          if (v92 <= 8191.0)
          {
            v89 = v92;
            if (v92 < 0.0)
              v89 = 0.0;
          }
          if (v67)
          {
            v93 = (float)(*(unsigned __int16 *)v67 >> v60) - v29;
            v94 = (float)(*((unsigned __int16 *)v67 + 1) >> v60) - v29;
            v67 += 4;
            v95 = v31 * v94;
            v96 = (float)(v33 * v94) + (float)(v93 * v32);
            v97 = v34 * v93;
          }
          else
          {
            v97 = 0.0;
            v96 = 0.0;
            v95 = 0.0;
          }
          v98 = v30 * (float)((float)(*(unsigned __int16 *)v66 >> v60) - v28);
          v99 = v95 + v98;
          v100 = 8191.0;
          v101 = 8191.0;
          if (v99 <= 8191.0)
          {
            v101 = v99;
            if (v99 < 0.0)
              v101 = 0.0;
          }
          v102 = v96 + v98;
          v76 = (float)(v96 + v98) <= 8191.0;
          v103 = 8191.0;
          if (v76)
          {
            v103 = v102;
            if (v102 < 0.0)
              v103 = 0.0;
          }
          v104 = v97 + v98;
          if (v104 <= 8191.0)
          {
            v100 = v104;
            if (v104 < 0.0)
              v100 = 0.0;
          }
          if (v67)
          {
            v105 = (float)(*(unsigned __int16 *)v67 >> v60) - v29;
            v106 = (float)(*((unsigned __int16 *)v67 + 1) >> v60) - v29;
            v67 += 4;
            v107 = v31 * v106;
            v108 = (float)(v33 * v106) + (float)(v105 * v32);
            v109 = v34 * v105;
          }
          else
          {
            v109 = 0.0;
            v108 = 0.0;
            v107 = 0.0;
          }
          v110 = v28;
          v111 = v30;
          v112 = v30 * (float)((float)(*((unsigned __int16 *)v66 + 1) >> v60) - v28);
          v113 = v107 + v112;
          v114 = 8191.0;
          if (v113 <= 8191.0)
          {
            v114 = v113;
            if (v113 < 0.0)
              v114 = 0.0;
          }
          v115 = v108 + v112;
          v76 = (float)(v108 + v112) <= 8191.0;
          v116 = 8191.0;
          if (v76)
          {
            v116 = v115;
            if (v115 < 0.0)
              v116 = 0.0;
          }
          v117 = v109 + v112;
          v118 = 8191.0;
          if (v117 <= 8191.0)
          {
            v118 = v117;
            if (v117 < 0.0)
              v118 = 0.0;
          }
          _H0 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          _H3 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          _H6 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          _H24 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          __asm
          {
            FCVT            S6, H6
            FCVT            S24, H24
          }
          _H25 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          _H27 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          _H4 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v101, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H5 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v103, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H17 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v100, 0.0), 8191.0)));
          _H21 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v114, 0.0), 8191.0)));
          __asm
          {
            FCVT            S17, H17
            FCVT            S21, H21
          }
          _H7 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v116, 0.0), 8191.0)));
          v143 = llroundf(fminf(fmaxf(v118, 0.0), 8191.0));
          __asm { FCVT            S1, H7 }
          v145 = (float)((float)(v40 * _S3) + (float)(_S0 * v202)) + (float)(_S6 * v39);
          v146 = (float)((float)(v42 * _S3) + (float)(_S0 * v41)) + (float)(_S6 * v43);
          _S3 = (float)((float)(v45 * _S3) + (float)(_S0 * v44)) + (float)(_S6 * v46);
          _S6 = (float)((float)(v40 * _S25) + (float)(_S24 * v202)) + (float)(_S27 * v39);
          v149 = (float)((float)(v42 * _S25) + (float)(_S24 * v41)) + (float)(_S27 * v43);
          v150 = (float)((float)(v45 * _S25) + (float)(_S24 * v44)) + (float)(_S27 * v46);
          v151 = (float)((float)(v40 * _S5) + (float)(_S4 * v202)) + (float)(_S17 * v39);
          v152 = (float)((float)(v42 * _S5) + (float)(_S4 * v41)) + (float)(_S17 * v43);
          v153 = (float)((float)(v45 * _S5) + (float)(_S4 * v44)) + (float)(_S17 * v46);
          _S0 = (float)(v40 * _S1) + (float)(_S21 * v202);
          _S4 = (float)(v42 * _S1) + (float)(_S21 * v41);
          v156 = (float)(v45 * _S1) + (float)(_S21 * v44);
          LOWORD(_S5) = *(_WORD *)(v47 + 2 * v143);
          __asm { FCVT            S5, H5 }
          _S21 = _S0 + (float)(_S5 * v39);
          v159 = _S4 + (float)(_S5 * v43);
          v160 = v156 + (float)(_S5 * v46);
          LOWORD(_S0) = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v145, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          LOWORD(_S4) = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v146, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          LOWORD(_S3) = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          LOWORD(_S6) = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          __asm
          {
            FCVT            S5, H3
            FCVT            S17, H6
          }
          LOWORD(_S3) = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v149, 0.0), 8191.0)));
          v165 = llroundf(fminf(fmaxf(v150, 0.0), 8191.0));
          __asm { FCVT            S24, H3 }
          LOWORD(_S3) = *(_WORD *)(v48 + 2 * v165);
          __asm { FCVT            S6, H3 }
          LOWORD(_S3) = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v151, 0.0), 8191.0)));
          __asm { FCVT            S7, H3 }
          LOWORD(_S3) = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v152, 0.0), 8191.0)));
          __asm { FCVT            S25, H3 }
          LOWORD(_S3) = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v153, 0.0), 8191.0)));
          LOWORD(_S21) = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(_S21, 0.0), 8191.0)));
          __asm
          {
            FCVT            S27, H3
            FCVT            S3, H21
          }
          LOWORD(_S21) = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v159, 0.0), 8191.0)));
          v172 = llroundf(fminf(fmaxf(v160, 0.0), 8191.0));
          __asm { FCVT            S1, H21 }
          _H19 = *(_WORD *)(v48 + 2 * v172);
          __asm { FCVT            S19, H19 }
          v176 = (float)((float)((float)(v209 * _S4) + (float)(v210 * _S0)) + (float)(v208 * _S5)) + v35;
          if (v176 < v35)
            v177 = v35;
          else
            v177 = (float)((float)((float)(v209 * _S4) + (float)(v210 * _S0)) + (float)(v208 * _S5)) + v35;
          v76 = v176 <= v37;
          v178 = (float)((float)((float)(v209 * _S24) + (float)(v210 * _S17)) + (float)(v208 * _S6)) + v35;
          if (!v76)
            v177 = v37;
          v179 = llroundf(v177);
          if (v178 < v35)
            v180 = v35;
          else
            v180 = (float)((float)((float)(v209 * _S24) + (float)(v210 * _S17)) + (float)(v208 * _S6)) + v35;
          v76 = v178 <= v37;
          v181 = (float)((float)((float)(v209 * _S25) + (float)(v210 * _S7)) + (float)(v208 * _S27)) + v35;
          if (!v76)
            v180 = v37;
          v182 = llroundf(v180);
          if (v181 < v35)
            v183 = v35;
          else
            v183 = (float)((float)((float)(v209 * _S25) + (float)(v210 * _S7)) + (float)(v208 * _S27)) + v35;
          v76 = v181 <= v37;
          v184 = (float)((float)((float)(v209 * _S1) + (float)(v210 * _S3)) + (float)(v208 * _S19)) + v35;
          if (!v76)
            v183 = v37;
          v185 = llroundf(v183);
          if (v184 < v35)
            v186 = v35;
          else
            v186 = (float)((float)((float)(v209 * _S1) + (float)(v210 * _S3)) + (float)(v208 * _S19)) + v35;
          if (v184 <= v37)
            v187 = v186;
          else
            v187 = v37;
          v188 = (float)((float)(_S0 + _S17) + _S7) + _S3;
          v189 = (float)((float)(_S4 + _S24) + _S25) + _S1;
          *(_WORD *)v53 = v179 << v61;
          *((_WORD *)v53 + 1) = v182 << v61;
          *(_WORD *)v68 = v185 << v61;
          *((_WORD *)v68 + 1) = llroundf(v187) << v61;
          v190 = (float)((float)(_S5 + _S6) + _S27) + _S19;
          v191 = (float)((float)(v212 + (float)(v188 * v207)) + (float)(v189 * v206)) + (float)(v190 * v205);
          v192 = v211;
          if (v191 <= v211)
          {
            v192 = (float)((float)(v212 + (float)(v188 * v207)) + (float)(v189 * v206)) + (float)(v190 * v205);
            if (v191 < v217)
              v192 = v217;
          }
          v193 = (_WORD *)(v59 + 2 * v65);
          v194 = (float)((float)(v212 + (float)(v188 * v204)) + (float)(v189 * v203)) + (float)(v190 * v201);
          *v193 = llroundf(v192) << v61;
          v195 = v211;
          v28 = v110;
          v30 = v111;
          v31 = v216;
          if (v194 <= v211)
          {
            v195 = v194;
            if (v194 < v217)
              v195 = v217;
          }
          result += 4;
          v66 += 4;
          v53 += 4;
          v68 += 4;
          v193[1] = llroundf(v195) << v61;
          v65 += 2;
          v33 = v214;
          v32 = v215;
          v34 = v213;
        }
        while (v9 > v65);
      }
      result = &v64[v21];
      v51 = &v63[v22];
      v53 = &v62[v24];
      v59 += v25;
      v8 += 2;
    }
    while (v12 > v8);
    if (v200 && v199)
    {
      v196 = 2 * v9;
      do
      {
        result = (unsigned __int8 *)memcpy(v26, v23, v196);
        v23 += v197;
        v26 += v198;
        --v12;
      }
      while (v12);
    }
    else if (v199)
    {
      do
      {
        if (v9)
          result = (unsigned __int8 *)memset(v26, 255, 2 * v9);
        v26 += v198;
        --v12;
      }
      while (v12);
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_rgb_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_rgb_xf420_GCD);
  return 0;
}

unint64_t vt_Copy_xf444_rgb_xf420_GCD(unint64_t result, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  unsigned int v32;
  unsigned int v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  unsigned int v56;
  BOOL v57;
  char v58;
  char v59;
  uint64_t v60;
  char v61;
  char *v62;
  char *v63;
  char *v64;
  unint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  _WORD *v119;
  float v120;
  float v121;
  size_t v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;

  v6 = *(_QWORD *)(result + 28);
  v7 = 2 * *(unsigned __int8 *)result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (2 * v9 == 2 * v8)
    return result;
  v10 = 0;
  v11 = *(_QWORD *)(result + 20);
  v12 = *(_QWORD *)(result + 36);
  v13 = *(_QWORD *)(result + 44) + 2 * v8;
  v14 = 2 * v9 - 2 * v8;
  v15 = *(_QWORD *)(result + 112);
  v16 = *(_QWORD **)(result + 128);
  v17 = *(_QWORD *)(result + 120) + 2 * (*(_QWORD *)(result + 104) * a2 / v7);
  v18 = *(_QWORD *)(result + 152);
  v20 = *(_QWORD **)(result + 56);
  v19 = *(uint64_t **)(result + 64);
  v21 = *(uint64_t **)(result + 136);
  v22 = *v19;
  v23 = v19[1];
  v24 = v19[2];
  v25 = v20[2];
  v26 = (char *)(v25 + v24 * v13 + 2 * v12);
  v27 = *v21;
  v28 = v21[1];
  v29 = v21[2];
  v30 = v16[2];
  v31 = (char *)(v30 + v29 * v17 + 2 * v15);
  *(float *)&v32 = (float)*(unsigned int *)(v18 + 128);
  *(float *)&v33 = (float)*(unsigned int *)(v18 + 136);
  v34 = *(float *)&v33 / *(float *)&v32;
  LOWORD(v32) = *(_WORD *)(v18 + 140);
  v35 = (float)v32;
  LOWORD(v33) = *(_WORD *)(v18 + 142);
  v36 = (float)v33;
  v37 = v34 * *(float *)v18;
  v38 = v34 * *(float *)(v18 + 8);
  v39 = v34 * *(float *)(v18 + 16);
  v40 = v34 * *(float *)(v18 + 20);
  v41 = *(float *)(v18 + 28);
  v42 = v34 * v41;
  LOWORD(v41) = *(_WORD *)(v18 + 144);
  v43 = (float)LODWORD(v41);
  LOWORD(v2) = *(_WORD *)(v18 + 146);
  v44 = (float)v2;
  LOWORD(v3) = *(_WORD *)(v18 + 148);
  v45 = (float)v3;
  LOWORD(v4) = *(_WORD *)(v18 + 150);
  v46 = (float)v4;
  LOWORD(v5) = *(_WORD *)(v18 + 152);
  v47 = (float)v5;
  v48 = *(float *)(v18 + 36);
  v49 = *(float *)(v18 + 40);
  v50 = *(float *)(v18 + 44);
  v127 = *(float *)(v18 + 52) * 0.25;
  v128 = *(float *)(v18 + 48) * 0.25;
  v125 = *(float *)(v18 + 60) * 0.25;
  v126 = *(float *)(v18 + 56) * 0.25;
  v123 = *(float *)(v18 + 68) * 0.25;
  v124 = *(float *)(v18 + 64) * 0.25;
  v51 = v20[1];
  v52 = (char *)(*v20 + v22 * v13 + 2 * v12);
  if (v51)
    v53 = (char *)(v51 + v23 * v13 + 2 * v12);
  else
    v53 = 0;
  v54 = v16[1];
  v55 = (char *)(*v16 + v27 * v17 + 2 * v15);
  v56 = *(unsigned __int8 *)(v18 + 132);
  v57 = v56 >= 0x11;
  v58 = 16 - v56;
  if (v57)
    v59 = 0;
  else
    v59 = v58;
  LODWORD(result) = *(unsigned __int8 *)(v18 + 124);
  if (result >= 0x11)
    LOBYTE(result) = 0;
  else
    LOBYTE(result) = 16 - result;
  v60 = v54 + v28 * (v17 / 2) + 2 * v15;
  result = result;
  v61 = v59;
  do
  {
    v62 = &v55[v27];
    v63 = &v53[v23];
    v64 = &v52[v22];
    if (v11)
    {
      v65 = 0;
      v66 = &v52[v22];
      v67 = &v53[v23];
      v68 = &v55[v27];
      do
      {
        v69 = 0.0;
        if (v53)
        {
          v70 = (float)(*(unsigned __int16 *)v53 >> result) - v36;
          v71 = (float)(*((unsigned __int16 *)v53 + 1) >> result) - v36;
          v53 += 4;
          v72 = v38 * v71;
          v73 = (float)(v40 * v71) + (float)(v70 * v39);
          v74 = v42 * v70;
          if (v53)
          {
            v75 = (float)(*(unsigned __int16 *)v53 >> result) - v36;
            v76 = (float)(*((unsigned __int16 *)v53 + 1) >> result) - v36;
            v53 += 4;
            v77 = v38 * v76;
            v78 = (float)(v40 * v76) + (float)(v75 * v39);
            v69 = v42 * v75;
            goto LABEL_19;
          }
        }
        else
        {
          v74 = 0.0;
          v73 = 0.0;
          v72 = 0.0;
        }
        v78 = 0.0;
        v77 = 0.0;
LABEL_19:
        v79 = 0.0;
        if (!v67)
        {
          v84 = 0.0;
          v83 = 0.0;
          v82 = 0.0;
LABEL_23:
          v88 = 0.0;
          v87 = 0.0;
          goto LABEL_24;
        }
        v80 = (float)(*(unsigned __int16 *)v67 >> result) - v36;
        v81 = (float)(*((unsigned __int16 *)v67 + 1) >> result) - v36;
        v67 += 4;
        v82 = v38 * v81;
        v83 = (float)(v40 * v81) + (float)(v80 * v39);
        v84 = v42 * v80;
        if (!v67)
          goto LABEL_23;
        v85 = (float)(*(unsigned __int16 *)v67 >> result) - v36;
        v86 = (float)(*((unsigned __int16 *)v67 + 1) >> result) - v36;
        v67 += 4;
        v87 = v38 * v86;
        v88 = (float)(v40 * v86) + (float)(v85 * v39);
        v79 = v42 * v85;
LABEL_24:
        v89 = v37 * (float)((float)(*(unsigned __int16 *)v52 >> result) - v35);
        v90 = v72 + v89;
        v91 = v73 + v89;
        v92 = v74 + v89;
        v93 = v37 * (float)((float)(*((unsigned __int16 *)v52 + 1) >> result) - v35);
        v94 = v77 + v93;
        v95 = v78 + v93;
        v96 = v69 + v93;
        v97 = v37 * (float)((float)(*(unsigned __int16 *)v66 >> result) - v35);
        v98 = v82 + v97;
        v99 = v83 + v97;
        v100 = v84 + v97;
        v101 = v37 * (float)((float)(*((unsigned __int16 *)v66 + 1) >> result) - v35);
        v102 = v87 + v101;
        v103 = v88 + v101;
        v104 = v79 + v101;
        v105 = (float)((float)((float)(v49 * v91) + (float)(v48 * v90)) + (float)(v50 * v92)) + v43;
        v106 = (float)((float)((float)(v49 * v95) + (float)(v48 * v94)) + (float)(v50 * v96)) + v43;
        v107 = (float)((float)((float)(v49 * v99) + (float)(v48 * v98)) + (float)(v50 * v100)) + v43;
        v108 = (float)((float)((float)(v49 * v103) + (float)(v48 * v102)) + (float)(v50 * v104)) + v43;
        if (v105 < v43)
          v109 = v43;
        else
          v109 = (float)((float)((float)(v49 * v91) + (float)(v48 * v90)) + (float)(v50 * v92)) + v43;
        if (v105 > v45)
          v109 = v45;
        *(_WORD *)v55 = llroundf(v109) << v61;
        if (v106 < v43)
          v110 = v43;
        else
          v110 = (float)((float)((float)(v49 * v95) + (float)(v48 * v94)) + (float)(v50 * v96)) + v43;
        if (v106 <= v45)
          v111 = v110;
        else
          v111 = v45;
        *((_WORD *)v55 + 1) = llroundf(v111) << v61;
        if (v107 < v43)
          v112 = v43;
        else
          v112 = (float)((float)((float)(v49 * v99) + (float)(v48 * v98)) + (float)(v50 * v100)) + v43;
        if (v107 > v45)
          v112 = v45;
        *(_WORD *)v68 = llroundf(v112) << v61;
        if (v108 < v43)
          v113 = v43;
        else
          v113 = (float)((float)((float)(v49 * v103) + (float)(v48 * v102)) + (float)(v50 * v104)) + v43;
        if (v108 > v45)
          v113 = v45;
        *((_WORD *)v68 + 1) = llroundf(v113) << v61;
        v114 = (float)((float)(v90 + v94) + v98) + v102;
        v115 = (float)((float)(v91 + v95) + v99) + v103;
        v116 = (float)((float)(v92 + v96) + v100) + v104;
        v117 = (float)((float)(v44 + (float)(v114 * v128)) + (float)(v115 * v127)) + (float)(v116 * v126);
        v118 = v47;
        if (v117 <= v47)
        {
          v118 = (float)((float)(v44 + (float)(v114 * v128)) + (float)(v115 * v127)) + (float)(v116 * v126);
          if (v117 < v46)
            v118 = v46;
        }
        v119 = (_WORD *)(v60 + 2 * v65);
        v120 = (float)((float)(v44 + (float)(v114 * v125)) + (float)(v115 * v124)) + (float)(v116 * v123);
        *v119 = llroundf(v118) << v61;
        v121 = v47;
        if (v120 <= v47)
        {
          v121 = v120;
          if (v120 < v46)
            v121 = v46;
        }
        v52 += 4;
        v66 += 4;
        v55 += 4;
        v68 += 4;
        v119[1] = llroundf(v121) << v61;
        v65 += 2;
      }
      while (v11 > v65);
    }
    v52 = &v64[v22];
    v53 = &v63[v23];
    v55 = &v62[v27];
    v60 += v28;
    v10 += 2;
  }
  while (v14 > v10);
  if (v25 && v30)
  {
    v122 = 2 * v11;
    do
    {
      result = (unint64_t)memcpy(v31, v26, v122);
      v26 += v24;
      v31 += v29;
      --v14;
    }
    while (v14);
  }
  else if (v30)
  {
    do
    {
      if (v11)
        result = (unint64_t)memset(v31, 255, 2 * v11);
      v31 += v29;
      --v14;
    }
    while (v14);
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Tone_Mat_TRC_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v20 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v18 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Tone_Mat_TRC_422vf_GCD);
  return 0;
}

_QWORD *vt_Copy_xf444_TRC_Tone_Mat_TRC_422vf_GCD(_QWORD *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  unsigned int v36;
  float v37;
  float v38;
  float v39;
  unsigned int v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  uint64_t v52;
  unsigned int v53;
  char v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  float v67;
  float v68;
  float v69;
  float v70;
  size_t v71;
  unsigned __int16 *v72;
  unsigned __int16 *v73;
  _BYTE *v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  BOOL v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  unsigned int v106;
  float v113;
  float v114;
  float v115;
  float v120;
  float v121;
  float v123;
  float v124;
  float v125;
  float v128;
  float v131;
  float v132;
  float v134;
  unsigned int v139;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  uint64_t v157;
  size_t v158;
  _BYTE *v159;
  unsigned __int16 *v160;
  unsigned int v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;

  v5 = *(_QWORD *)((char *)result + 28);
  v6 = *(unsigned __int8 *)result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)((char *)result + 20);
    v11 = *(_QWORD *)((char *)result + 36);
    v12 = v7 + *(_QWORD *)((char *)result + 44);
    v13 = v8 - v7;
    v14 = result[14];
    v15 = (_QWORD *)result[16];
    v16 = result[13] * a2 / v6 + result[15];
    v17 = result[19];
    v18 = (uint64_t *)result[7];
    v19 = (uint64_t *)result[8];
    v20 = (uint64_t *)result[17];
    v21 = *v19;
    v22 = v19[1];
    v23 = v19[2];
    v24 = v18[2];
    v25 = v24 + v23 * v12 + 2 * v11;
    v26 = *v20;
    v27 = v20[1];
    v28 = v20[2];
    v29 = v15[2];
    v30 = (_BYTE *)(v29 + v28 * v16 + v14);
    LOWORD(a4) = *(_WORD *)(v17 + 140);
    LOWORD(a5) = *(_WORD *)(v17 + 142);
    v31 = 8191.0 / (float)*(unsigned int *)(v17 + 128);
    v32 = (float)LODWORD(a4);
    v33 = (float)LODWORD(a5);
    v34 = v31 * *(float *)v17;
    v173 = v31 * *(float *)(v17 + 16);
    v174 = v31 * *(float *)(v17 + 8);
    v35 = v31 * *(float *)(v17 + 20);
    *(float *)&v36 = v31 * *(float *)(v17 + 28);
    v171 = *(float *)&v36;
    v172 = v35;
    LOWORD(v36) = *(_WORD *)(v17 + 144);
    v37 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v17 + 146);
    v38 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v17 + 148);
    v39 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v17 + 150);
    *(float *)&v40 = (float)v36;
    v175 = *(float *)&v40;
    LOWORD(v40) = *(_WORD *)(v17 + 152);
    v41 = (float)v40;
    v169 = *(float *)(v17 + 36);
    v170 = v38;
    v42 = *(float *)(v17 + 44);
    v167 = *(float *)(v17 + 48) * 0.5;
    v168 = *(float *)(v17 + 40);
    v165 = *(float *)(v17 + 56) * 0.5;
    v166 = *(float *)(v17 + 52) * 0.5;
    v163 = *(float *)(v17 + 64) * 0.5;
    v164 = *(float *)(v17 + 60) * 0.5;
    v43 = *(float *)(v17 + 72);
    v162 = *(float *)(v17 + 68) * 0.5;
    v45 = *(float *)(v17 + 76);
    v44 = *(float *)(v17 + 80);
    v46 = *(float *)(v17 + 84);
    v47 = *(float *)(v17 + 88);
    v48 = *(float *)(v17 + 92);
    v49 = *(float *)(v17 + 96);
    v50 = *(float *)(v17 + 100);
    v51 = *(float *)(v17 + 104);
    result = (_QWORD *)(v17 + 164);
    v52 = v17 + 16548;
    v53 = *(unsigned __int8 *)(v17 + 124);
    if (v53 >= 0x11)
      v54 = 0;
    else
      v54 = 16 - v53;
    v55 = v15[1];
    _ZF = v55 == 0;
    v57 = v55 + v27 * v16;
    v58 = *v15 + v26 * v16;
    v59 = v17 + 32932;
    v60 = v57 + v14;
    if (_ZF)
      v60 = 0;
    v61 = (_BYTE *)(v58 + v14);
    v63 = *v18;
    v62 = v18[1];
    v64 = v62 + v22 * v12 + 2 * v11;
    if (!v62)
      v64 = 0;
    v65 = v63 + v21 * v12 + 2 * v11;
    v66 = v54;
    v67 = *(float *)(v17 + 108);
    v68 = *(float *)(v17 + 112);
    v69 = *(float *)(v17 + 116);
    v70 = *(float *)(v17 + 120);
    do
    {
      if (v10)
      {
        v71 = 0;
        v72 = (unsigned __int16 *)v65;
        v73 = (unsigned __int16 *)v64;
        v74 = v61;
        do
        {
          if (v73)
          {
            v75 = (float)(*v73 >> v66) - v33;
            v76 = (float)(v73[1] >> v66) - v33;
            v73 += 2;
            v77 = v174 * v76;
            v78 = (float)(v172 * v76) + (float)(v75 * v173);
            v79 = v171 * v75;
          }
          else
          {
            v79 = 0.0;
            v78 = 0.0;
            v77 = 0.0;
          }
          v80 = v34 * (float)((float)(*v72 >> v66) - v32);
          v81 = v77 + v80;
          v82 = (float)(v77 + v80) <= 8191.0;
          v83 = 8191.0;
          if (v82)
          {
            v83 = v81;
            if (v81 < 0.0)
              v83 = 0.0;
          }
          v84 = 8191.0;
          if ((float)(v78 + v80) <= 8191.0)
          {
            v84 = v78 + v80;
            if ((float)(v78 + v80) < 0.0)
              v84 = 0.0;
          }
          v85 = v79 + v80;
          v86 = 8191.0;
          if (v85 <= 8191.0)
          {
            v86 = v85;
            if (v85 < 0.0)
              v86 = 0.0;
          }
          if (v73)
          {
            v87 = (float)(*v73 >> v66) - v33;
            v88 = (float)(v73[1] >> v66) - v33;
            v73 += 2;
            v89 = v174 * v88;
            v90 = (float)(v172 * v88) + (float)(v87 * v173);
            v91 = v171 * v87;
          }
          else
          {
            v91 = 0.0;
            v90 = 0.0;
            v89 = 0.0;
          }
          v92 = v34 * (float)((float)(v72[1] >> v66) - v32);
          v93 = v89 + v92;
          v82 = (float)(v89 + v92) <= 8191.0;
          v94 = 8191.0;
          if (v82)
          {
            v94 = v93;
            if (v93 < 0.0)
              v94 = 0.0;
          }
          v95 = v90 + v92;
          v82 = (float)(v90 + v92) <= 8191.0;
          v96 = 8191.0;
          if (v82)
          {
            v96 = v95;
            if (v95 < 0.0)
              v96 = 0.0;
          }
          v97 = v32;
          v98 = v91 + v92;
          v99 = 8191.0;
          if (v98 <= 8191.0)
          {
            v99 = v98;
            if (v98 < 0.0)
              v99 = 0.0;
          }
          _H0 = *((_WORD *)result + llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          _H1 = *((_WORD *)result + llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          v106 = llroundf(fminf(fmaxf(v86, 0.0), 8191.0));
          __asm { FCVT            S4, H1 }
          _H1 = *((_WORD *)result + v106);
          __asm { FCVT            S30, H1 }
          _H1 = *((_WORD *)result + llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          _H6 = *((_WORD *)result + llroundf(fminf(fmaxf(v96, 0.0), 8191.0)));
          _H7 = *((_WORD *)result + llroundf(fminf(fmaxf(v99, 0.0), 8191.0)));
          v113 = fmaxf(_S0, fmaxf(_S4, _S30));
          v114 = (float)((float)((float)(v68 * _S4) + (float)(v67 * _S0)) + (float)(v69 * _S30)) + (float)(v70 * v113);
          v115 = 8191.0;
          if (v114 <= 8191.0)
          {
            v115 = (float)((float)((float)(v68 * _S4) + (float)(v67 * _S0)) + (float)(v69 * _S30)) + (float)(v70 * v113);
            if (v114 < 0.0)
              v115 = 0.0;
          }
          __asm
          {
            FCVT            S1, H1
            FCVT            S6, H6
            FCVT            S7, H7
          }
          _H19 = *(_WORD *)(v52 + 2 * llroundf(v115));
          v120 = (float)((float)((float)(v68 * _S6) + (float)(v67 * _S1)) + (float)(v69 * _S7))
               + (float)(v70 * fmaxf(_S1, fmaxf(_S6, _S7)));
          v121 = 8191.0;
          if (v120 <= 8191.0)
          {
            v121 = v120;
            if (v120 < 0.0)
              v121 = 0.0;
          }
          __asm { FCVT            S3, H19 }
          v123 = _S0 * _S3;
          v124 = _S4 * _S3;
          v125 = _S30 * _S3;
          _H17 = *(_WORD *)(v52 + 2 * llroundf(v121));
          __asm { FCVT            S17, H17 }
          v128 = _S1 * _S17;
          _S6 = _S6 * _S17;
          _S7 = _S7 * _S17;
          v131 = (float)((float)(v45 * v124) + (float)(v123 * v43)) + (float)(v125 * v44);
          v132 = (float)((float)(v47 * v124) + (float)(v123 * v46)) + (float)(v125 * v48);
          _S0 = (float)((float)(v50 * v124) + (float)(v123 * v49)) + (float)(v125 * v51);
          v134 = (float)((float)(v45 * _S6) + (float)(v128 * v43)) + (float)(_S7 * v44);
          _S4 = (float)((float)(v47 * _S6) + (float)(v128 * v46)) + (float)(_S7 * v48);
          _S1 = (float)((float)(v50 * _S6) + (float)(v128 * v49)) + (float)(_S7 * v51);
          LOWORD(_S6) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v131, 0.0), 8191.0)));
          LOWORD(_S7) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v132, 0.0), 8191.0)));
          __asm
          {
            FCVT            S6, H6
            FCVT            S7, H7
          }
          LOWORD(_S0) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          v139 = llroundf(fminf(fmaxf(v134, 0.0), 8191.0));
          __asm { FCVT            S3, H0 }
          LOWORD(_S0) = *(_WORD *)(v59 + 2 * v139);
          __asm { FCVT            S0, H0 }
          LOWORD(_S4) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(_S4, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          LOWORD(_S1) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          __asm { FCVT            S17, H1 }
          v144 = (float)((float)((float)(v168 * _S7) + (float)(v169 * _S6)) + (float)(v42 * _S3)) + v37;
          v145 = (float)((float)((float)(v168 * _S4) + (float)(v169 * _S0)) + (float)(v42 * _S17)) + v37;
          if (v144 < v37)
            v146 = v37;
          else
            v146 = (float)((float)((float)(v168 * _S7) + (float)(v169 * _S6)) + (float)(v42 * _S3)) + v37;
          if (v144 <= v39)
            v147 = v146;
          else
            v147 = v39;
          *v74 = llroundf(v147);
          if (v145 < v37)
            v148 = v37;
          else
            v148 = (float)((float)((float)(v168 * _S4) + (float)(v169 * _S0)) + (float)(v42 * _S17)) + v37;
          if (v145 > v39)
            v148 = v39;
          v74[1] = llroundf(v148);
          v149 = _S6 + _S0;
          v150 = _S7 + _S4;
          v151 = (float)(v170 + (float)(v149 * v167)) + (float)((float)(_S7 + _S4) * v166);
          v152 = _S3 + _S17;
          v153 = v151 + (float)((float)(_S3 + _S17) * v165);
          v154 = v41;
          if (v153 <= v41)
          {
            v154 = v153;
            if (v153 < v175)
              v154 = v175;
          }
          v155 = (float)((float)(v170 + (float)(v149 * v164)) + (float)(v150 * v163)) + (float)(v152 * v162);
          *(_BYTE *)(v60 + v71) = llroundf(v154);
          v156 = v41;
          v32 = v97;
          if (v155 <= v41)
          {
            v156 = v155;
            if (v155 < v175)
              v156 = v175;
          }
          *(_BYTE *)(v60 + v71 + 1) = llroundf(v156);
          v71 += 2;
          v72 += 2;
          v74 += 2;
        }
        while (v10 > v71);
      }
      v65 += v21;
      v64 += v22;
      v61 += v26;
      v60 += v27;
      ++v9;
    }
    while (v9 != v13);
    if (v24 && v29)
    {
      v157 = 0;
      do
      {
        if (v10)
        {
          v158 = v10;
          v159 = v30;
          v160 = (unsigned __int16 *)v25;
          do
          {
            v161 = *v160++;
            *v159++ = llroundf((float)v161 * 0.0038911);
            --v158;
          }
          while (v158);
        }
        v25 += v23;
        v30 += v28;
        ++v157;
      }
      while (v157 != v13);
    }
    else if (v29)
    {
      do
      {
        if (v10)
          result = memset(v30, 255, v10);
        v30 += v28;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Mat_TRC_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v20 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v18 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Mat_TRC_422vf_GCD);
  return 0;
}

_QWORD *vt_Copy_xf444_TRC_Mat_TRC_422vf_GCD(_QWORD *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  unsigned int v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  uint64_t v54;
  unsigned int v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  size_t v66;
  unsigned __int16 *v67;
  unsigned __int16 *v68;
  _BYTE *v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  BOOL v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  unsigned int v102;
  float v110;
  float v111;
  float v113;
  unsigned int v118;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  uint64_t v135;
  size_t v136;
  _BYTE *v137;
  unsigned __int16 *v138;
  unsigned int v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;

  v5 = *(_QWORD *)((char *)result + 28);
  v6 = *(unsigned __int8 *)result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)((char *)result + 20);
    v11 = *(_QWORD *)((char *)result + 36);
    v12 = v7 + *(_QWORD *)((char *)result + 44);
    v13 = v8 - v7;
    v14 = result[14];
    v15 = (uint64_t *)result[16];
    v16 = result[13] * a2 / v6 + result[15];
    v17 = result[19];
    v18 = (uint64_t *)result[7];
    v19 = (uint64_t *)result[8];
    v20 = (uint64_t *)result[17];
    v21 = *v19;
    v22 = v19[1];
    v23 = v19[2];
    v24 = v18[2];
    v25 = v24 + v23 * v12 + 2 * v11;
    v26 = *v20;
    v27 = v20[1];
    v28 = v20[2];
    v29 = v15[2];
    v30 = (_BYTE *)(v29 + v28 * v16 + v14);
    LOWORD(a4) = *(_WORD *)(v17 + 140);
    LOWORD(a5) = *(_WORD *)(v17 + 142);
    *(float *)&v31 = 8191.0 / (float)*(unsigned int *)(v17 + 128);
    v32 = (float)LODWORD(a4);
    v33 = (float)LODWORD(a5);
    v34 = *(float *)&v31 * *(float *)v17;
    v147 = *(float *)&v31 * *(float *)(v17 + 16);
    v148 = *(float *)&v31 * *(float *)(v17 + 8);
    v35 = *(float *)&v31 * *(float *)(v17 + 20);
    v36 = *(float *)&v31 * *(float *)(v17 + 28);
    LOWORD(v31) = *(_WORD *)(v17 + 144);
    v37 = (float)v31;
    LOWORD(v31) = *(_WORD *)(v17 + 146);
    v38 = (float)v31;
    LOWORD(v31) = *(_WORD *)(v17 + 148);
    v39 = (float)v31;
    LOWORD(v31) = *(_WORD *)(v17 + 150);
    v40 = (float)v31;
    LOWORD(v31) = *(_WORD *)(v17 + 152);
    v41 = (float)v31;
    v42 = *(float *)(v17 + 36);
    v43 = *(float *)(v17 + 40);
    v44 = *(float *)(v17 + 44);
    v145 = *(float *)(v17 + 48) * 0.5;
    v146 = v35;
    v143 = *(float *)(v17 + 56) * 0.5;
    v144 = *(float *)(v17 + 52) * 0.5;
    v141 = *(float *)(v17 + 64) * 0.5;
    v142 = *(float *)(v17 + 60) * 0.5;
    v45 = *(float *)(v17 + 72);
    v140 = *(float *)(v17 + 68) * 0.5;
    v47 = *(float *)(v17 + 76);
    v46 = *(float *)(v17 + 80);
    v48 = *(float *)(v17 + 84);
    v49 = *(float *)(v17 + 88);
    v50 = *(float *)(v17 + 92);
    v51 = *(float *)(v17 + 96);
    v52 = *(float *)(v17 + 100);
    v53 = *(float *)(v17 + 104);
    result = (_QWORD *)(v17 + 164);
    v54 = v17 + 16548;
    v55 = *(unsigned __int8 *)(v17 + 124);
    if (v55 >= 0x11)
      v56 = 0;
    else
      v56 = 16 - v55;
    v58 = *v15;
    v57 = v15[1];
    v59 = v57 + v27 * v16 + v14;
    if (!v57)
      v59 = 0;
    v60 = (_BYTE *)(v58 + v26 * v16 + v14);
    v62 = *v18;
    v61 = v18[1];
    v63 = v61 + v22 * v12 + 2 * v11;
    if (!v61)
      v63 = 0;
    v64 = v62 + v21 * v12 + 2 * v11;
    v65 = v56;
    do
    {
      if (v10)
      {
        v66 = 0;
        v67 = (unsigned __int16 *)v64;
        v68 = (unsigned __int16 *)v63;
        v69 = v60;
        do
        {
          if (v68)
          {
            v70 = (float)(*v68 >> v65) - v33;
            v71 = (float)(v68[1] >> v65) - v33;
            v68 += 2;
            v72 = v148 * v71;
            v73 = (float)(v146 * v71) + (float)(v70 * v147);
            v74 = v36 * v70;
          }
          else
          {
            v74 = 0.0;
            v73 = 0.0;
            v72 = 0.0;
          }
          v75 = v34 * (float)((float)(*v67 >> v65) - v32);
          v76 = v72 + v75;
          v77 = (float)(v72 + v75) <= 8191.0;
          v78 = 8191.0;
          if (v77)
          {
            v78 = v76;
            if (v76 < 0.0)
              v78 = 0.0;
          }
          v79 = v73 + v75;
          v80 = 8191.0;
          if (v79 <= 8191.0)
          {
            v80 = v79;
            if (v79 < 0.0)
              v80 = 0.0;
          }
          v81 = 8191.0;
          if ((float)(v74 + v75) <= 8191.0)
          {
            v81 = v74 + v75;
            if ((float)(v74 + v75) < 0.0)
              v81 = 0.0;
          }
          if (v68)
          {
            v82 = (float)(*v68 >> v65) - v33;
            v83 = (float)(v68[1] >> v65) - v33;
            v68 += 2;
            v84 = v148 * v83;
            v85 = (float)(v146 * v83) + (float)(v82 * v147);
            v86 = v36 * v82;
          }
          else
          {
            v86 = 0.0;
            v85 = 0.0;
            v84 = 0.0;
          }
          v87 = v34 * (float)((float)(v67[1] >> v65) - v32);
          v88 = 8191.0;
          if ((float)(v84 + v87) <= 8191.0)
          {
            v88 = v84 + v87;
            if ((float)(v84 + v87) < 0.0)
              v88 = 0.0;
          }
          v89 = v85 + v87;
          v77 = (float)(v85 + v87) <= 8191.0;
          v90 = 8191.0;
          if (v77)
          {
            v90 = v89;
            if (v89 < 0.0)
              v90 = 0.0;
          }
          v91 = v86 + v87;
          v92 = 8191.0;
          if (v91 <= 8191.0)
          {
            v92 = v91;
            if (v91 < 0.0)
              v92 = 0.0;
          }
          _H0 = *((_WORD *)result + llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          _H5 = *((_WORD *)result + llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm
          {
            FCVT            S0, H0
            FCVT            S5, H5
          }
          _H24 = *((_WORD *)result + llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          v102 = llroundf(fminf(fmaxf(v88, 0.0), 8191.0));
          __asm { FCVT            S6, H24 }
          _H24 = *((_WORD *)result + v102);
          __asm { FCVT            S24, H24 }
          _H4 = *((_WORD *)result + llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H26 = *((_WORD *)result + llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          v110 = (float)((float)(v47 * _S5) + (float)(_S0 * v45)) + (float)(_S6 * v46);
          v111 = (float)((float)(v49 * _S5) + (float)(_S0 * v48)) + (float)(_S6 * v50);
          _S0 = (float)((float)(v52 * _S5) + (float)(_S0 * v51)) + (float)(_S6 * v53);
          v113 = (float)((float)(v47 * _S4) + (float)(_S24 * v45)) + (float)(_S26 * v46);
          _S6 = (float)((float)(v49 * _S4) + (float)(_S24 * v48)) + (float)(_S26 * v50);
          _S4 = (float)((float)(v52 * _S4) + (float)(_S24 * v51)) + (float)(_S26 * v53);
          LOWORD(_S24) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v110, 0.0), 8191.0)));
          LOWORD(_S26) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v111, 0.0), 8191.0)));
          __asm
          {
            FCVT            S24, H24
            FCVT            S26, H26
          }
          LOWORD(_S0) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          v118 = llroundf(fminf(fmaxf(v113, 0.0), 8191.0));
          __asm { FCVT            S5, H0 }
          LOWORD(_S0) = *(_WORD *)(v54 + 2 * v118);
          __asm { FCVT            S0, H0 }
          LOWORD(_S6) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          LOWORD(_S4) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(_S4, 0.0), 8191.0)));
          __asm { FCVT            S25, H4 }
          v123 = (float)((float)((float)(v43 * _S26) + (float)(v42 * _S24)) + (float)(v44 * _S5)) + v37;
          v124 = (float)((float)((float)(v43 * _S6) + (float)(v42 * _S0)) + (float)(v44 * _S25)) + v37;
          if (v123 < v37)
            v125 = v37;
          else
            v125 = (float)((float)((float)(v43 * _S26) + (float)(v42 * _S24)) + (float)(v44 * _S5)) + v37;
          if (v123 <= v39)
            v126 = v125;
          else
            v126 = v39;
          *v69 = llroundf(v126);
          if (v124 < v37)
            v127 = v37;
          else
            v127 = (float)((float)((float)(v43 * _S6) + (float)(v42 * _S0)) + (float)(v44 * _S25)) + v37;
          if (v124 > v39)
            v127 = v39;
          v69[1] = llroundf(v127);
          v128 = _S24 + _S0;
          v129 = _S26 + _S6;
          v130 = _S5 + _S25;
          v131 = (float)((float)(v38 + (float)(v128 * v145)) + (float)((float)(_S26 + _S6) * v144))
               + (float)(v130 * v143);
          v132 = v41;
          if (v131 <= v41)
          {
            v132 = v131;
            if (v131 < v40)
              v132 = v40;
          }
          v133 = (float)((float)(v38 + (float)(v128 * v142)) + (float)(v129 * v141)) + (float)(v130 * v140);
          *(_BYTE *)(v59 + v66) = llroundf(v132);
          v134 = v41;
          if (v133 <= v41)
          {
            v134 = v133;
            if (v133 < v40)
              v134 = v40;
          }
          *(_BYTE *)(v59 + v66 + 1) = llroundf(v134);
          v66 += 2;
          v67 += 2;
          v69 += 2;
        }
        while (v10 > v66);
      }
      v64 += v21;
      v63 += v22;
      v60 += v26;
      v59 += v27;
      ++v9;
    }
    while (v9 != v13);
    if (v24 && v29)
    {
      v135 = 0;
      do
      {
        if (v10)
        {
          v136 = v10;
          v137 = v30;
          v138 = (unsigned __int16 *)v25;
          do
          {
            v139 = *v138++;
            *v137++ = llroundf((float)v139 * 0.0038911);
            --v136;
          }
          while (v136);
        }
        v25 += v23;
        v30 += v28;
        ++v135;
      }
      while (v135 != v13);
    }
    else if (v29)
    {
      do
      {
        if (v10)
          result = memset(v30, 255, v10);
        v30 += v28;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_rgb_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v20 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v18 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_rgb_422vf_GCD);
  return 0;
}

_QWORD *vt_Copy_xf444_rgb_422vf_GCD(_QWORD *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  unsigned int v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  size_t v69;
  unsigned __int16 *v70;
  unsigned __int16 *v71;
  _BYTE *v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  uint64_t v102;
  size_t v103;
  _BYTE *v104;
  unsigned __int16 *v105;
  unsigned int v106;

  v10 = *(_QWORD *)((char *)result + 28);
  v11 = *(unsigned __int8 *)result;
  v12 = v10 * a2 / v11;
  v13 = (v10 + v10 * a2) / v11;
  if (v13 == v12)
    return result;
  v14 = 0;
  v15 = *(_QWORD *)((char *)result + 20);
  v16 = *(_QWORD *)((char *)result + 36);
  v17 = v12 + *(_QWORD *)((char *)result + 44);
  v18 = v13 - v12;
  v19 = result[14];
  v20 = (uint64_t *)result[16];
  v21 = result[13] * a2 / v11 + result[15];
  v22 = result[19];
  v23 = (uint64_t *)result[7];
  v24 = (uint64_t *)result[8];
  v25 = (uint64_t *)result[17];
  v26 = *v24;
  v27 = v24[1];
  v28 = v24[2];
  v29 = v23[2];
  v30 = v29 + v28 * v17 + 2 * v16;
  v31 = *v25;
  v32 = v25[1];
  v33 = v25[2];
  v34 = v20[2];
  v35 = (_BYTE *)(v34 + v33 * v21 + v19);
  LOWORD(a5) = *(_WORD *)(v22 + 140);
  LOWORD(a6) = *(_WORD *)(v22 + 142);
  v36 = (float)*(unsigned int *)(v22 + 136) / (float)*(unsigned int *)(v22 + 128);
  v37 = (float)LODWORD(a5);
  v38 = (float)LODWORD(a6);
  v39 = v36 * *(float *)v22;
  v40 = v36 * *(float *)(v22 + 8);
  v41 = v36 * *(float *)(v22 + 16);
  v42 = v36 * *(float *)(v22 + 20);
  v43 = *(float *)(v22 + 28);
  v44 = v36 * v43;
  LOWORD(v43) = *(_WORD *)(v22 + 144);
  v45 = (float)LODWORD(v43);
  LOWORD(v6) = *(_WORD *)(v22 + 146);
  v46 = (float)v6;
  LOWORD(v7) = *(_WORD *)(v22 + 148);
  v47 = (float)v7;
  LOWORD(v8) = *(_WORD *)(v22 + 150);
  v48 = (float)v8;
  LOWORD(v9) = *(_WORD *)(v22 + 152);
  v49 = (float)v9;
  v50 = *(float *)(v22 + 36);
  v51 = *(float *)(v22 + 40);
  v52 = *(float *)(v22 + 44);
  v53 = *(float *)(v22 + 48) * 0.5;
  v54 = *(float *)(v22 + 52) * 0.5;
  v55 = *(float *)(v22 + 56) * 0.5;
  v56 = *(float *)(v22 + 60) * 0.5;
  v57 = *(float *)(v22 + 64) * 0.5;
  v58 = *(float *)(v22 + 68) * 0.5;
  v59 = *(unsigned __int8 *)(v22 + 124);
  v60 = 16 - v59;
  if (v59 >= 0x11)
    v60 = 0;
  v62 = *v20;
  v61 = v20[1];
  v63 = v61 + v32 * v21 + v19;
  if (!v61)
    v63 = 0;
  result = (_QWORD *)(v62 + v31 * v21 + v19);
  v65 = *v23;
  v64 = v23[1];
  v66 = v64 + v27 * v17 + 2 * v16;
  if (!v64)
    v66 = 0;
  v67 = v65 + v26 * v17 + 2 * v16;
  v68 = v60;
  do
  {
    if (v15)
    {
      v69 = 0;
      v70 = (unsigned __int16 *)v67;
      v71 = (unsigned __int16 *)v66;
      v72 = result;
      while (1)
      {
        v73 = 0.0;
        if (!v71)
          break;
        v74 = (float)(*v71 >> v68) - v38;
        v75 = (float)(v71[1] >> v68) - v38;
        v71 += 2;
        v76 = v40 * v75;
        v77 = (float)(v42 * v75) + (float)(v74 * v41);
        v78 = v44 * v74;
        if (!v71)
          goto LABEL_15;
        v79 = (float)(*v71 >> v68) - v38;
        v80 = (float)(v71[1] >> v68) - v38;
        v71 += 2;
        v81 = v40 * v80;
        v82 = (float)(v42 * v80) + (float)(v79 * v41);
        v73 = v44 * v79;
LABEL_16:
        v83 = v39 * (float)((float)(*v70 >> v68) - v37);
        v84 = v76 + v83;
        v85 = v77 + v83;
        v86 = v78 + v83;
        v87 = v39 * (float)((float)(v70[1] >> v68) - v37);
        v88 = v81 + v87;
        v89 = v82 + v87;
        v90 = v73 + v87;
        v91 = (float)((float)((float)(v51 * v85) + (float)(v50 * v84)) + (float)(v52 * v86)) + v45;
        v92 = (float)((float)((float)(v51 * v89) + (float)(v50 * v88)) + (float)(v52 * v90)) + v45;
        if (v91 < v45)
          v93 = v45;
        else
          v93 = (float)((float)((float)(v51 * v85) + (float)(v50 * v84)) + (float)(v52 * v86)) + v45;
        if (v91 <= v47)
          v94 = v93;
        else
          v94 = v47;
        *v72 = llroundf(v94);
        if (v92 < v45)
          v95 = v45;
        else
          v95 = (float)((float)((float)(v51 * v89) + (float)(v50 * v88)) + (float)(v52 * v90)) + v45;
        if (v92 > v47)
          v95 = v47;
        v72[1] = llroundf(v95);
        v96 = v84 + v88;
        v97 = v85 + v89;
        v98 = (float)((float)(v46 + (float)((float)(v84 + v88) * v53)) + (float)((float)(v85 + v89) * v54))
            + (float)((float)(v86 + v90) * v55);
        v99 = v49;
        if (v98 <= v49)
        {
          v99 = v98;
          if (v98 < v48)
            v99 = v48;
        }
        v100 = (float)((float)(v46 + (float)(v96 * v56)) + (float)(v97 * v57)) + (float)((float)(v86 + v90) * v58);
        *(_BYTE *)(v63 + v69) = llroundf(v99);
        v101 = v49;
        if (v100 <= v49)
        {
          v101 = v100;
          if (v100 < v48)
            v101 = v48;
        }
        *(_BYTE *)(v63 + v69 + 1) = llroundf(v101);
        v69 += 2;
        v70 += 2;
        v72 += 2;
        if (v15 <= v69)
          goto LABEL_34;
      }
      v78 = 0.0;
      v77 = 0.0;
      v76 = 0.0;
LABEL_15:
      v82 = 0.0;
      v81 = 0.0;
      goto LABEL_16;
    }
LABEL_34:
    v67 += v26;
    v66 += v27;
    result = (_QWORD *)((char *)result + v31);
    v63 += v32;
    ++v14;
  }
  while (v14 != v18);
  if (v29 && v34)
  {
    v102 = 0;
    do
    {
      if (v15)
      {
        v103 = v15;
        v104 = v35;
        v105 = (unsigned __int16 *)v30;
        do
        {
          v106 = *v105++;
          *v104++ = llroundf((float)v106 * 0.0038911);
          --v103;
        }
        while (v103);
      }
      v30 += v28;
      v35 += v33;
      ++v102;
    }
    while (v102 != v18);
  }
  else if (v34)
  {
    do
    {
      if (v15)
        result = memset(v35, 255, v15);
      v35 += v33;
      --v18;
    }
    while (v18);
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Tone_Mat_TRC_2vuyf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Tone_Mat_TRC_2vuyf_GCD);
  return 0;
}

_QWORD *vt_Copy_xf444_TRC_Tone_Mat_TRC_2vuyf_GCD(_QWORD *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  _WORD *v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  float v33;
  float v34;
  unsigned int v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  uint64_t v44;
  unsigned int v45;
  char v46;
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v55;
  uint64_t v56;
  char v57;
  float v58;
  float v59;
  float v60;
  float v61;
  size_t v62;
  unsigned __int16 *v63;
  unsigned __int16 *v64;
  _WORD *v65;
  _BYTE *v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  BOOL v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  unsigned int v99;
  float v106;
  float v107;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v120;
  float v123;
  float v124;
  float v126;
  float v127;
  float v128;
  float v130;
  float v131;
  unsigned int v137;
  float v138;
  float v140;
  float v141;
  float v142;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  char v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  uint64_t v155;
  size_t v156;
  _BYTE *v157;
  unsigned __int16 *v158;
  unsigned int v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;

  v5 = *(_QWORD *)((char *)result + 28);
  v6 = *(unsigned __int8 *)result;
  v7 = v5 * a2 / v6;
  v8 = v5 + v5 * a2;
  v9 = result[14];
  v10 = (_QWORD *)result[16];
  v11 = result[13] * a2 / v6 + result[15];
  v12 = (uint64_t *)result[17];
  v13 = v12[1];
  v14 = v10[1];
  v15 = (_BYTE *)(v14 + v13 * v11 + v9);
  v16 = v8 / v6;
  if (v14)
    v17 = (_WORD *)(v14 + v13 * v11 + v9);
  else
    v17 = 0;
  if (v16 != v7)
  {
    v18 = 0;
    v19 = *(_QWORD *)((char *)result + 20);
    v20 = *(_QWORD *)((char *)result + 36);
    v21 = v7 + *(_QWORD *)((char *)result + 44);
    v22 = v16 - v7;
    v23 = result[19];
    v24 = (_QWORD *)result[7];
    v25 = (uint64_t *)result[8];
    v26 = *v25;
    v27 = v25[1];
    v28 = v25[2];
    v29 = v24[2];
    v30 = v29 + v28 * v21 + 2 * v20;
    v31 = *v12;
    LOWORD(a4) = *(_WORD *)(v23 + 140);
    LOWORD(a5) = *(_WORD *)(v23 + 142);
    v32 = 8191.0 / (float)*(unsigned int *)(v23 + 128);
    v33 = (float)LODWORD(a4);
    v34 = v32 * *(float *)v23;
    v179 = v32 * *(float *)(v23 + 16);
    v180 = v32 * *(float *)(v23 + 8);
    v178 = v32 * *(float *)(v23 + 20);
    *(float *)&v35 = v32 * *(float *)(v23 + 28);
    v176 = (float)LODWORD(a5);
    v177 = *(float *)&v35;
    LOWORD(v35) = *(_WORD *)(v23 + 144);
    v36 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v23 + 146);
    v37 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v23 + 148);
    v38 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v23 + 150);
    v39 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v23 + 152);
    v40 = (float)v35;
    v41 = *(float *)(v23 + 36);
    v42 = *(float *)(v23 + 40);
    v43 = *(float *)(v23 + 44);
    v175 = *(float *)(v23 + 48) * 0.5;
    v173 = *(float *)(v23 + 56) * 0.5;
    v174 = *(float *)(v23 + 52) * 0.5;
    v171 = *(float *)(v23 + 64) * 0.5;
    v172 = *(float *)(v23 + 60) * 0.5;
    v169 = *(float *)(v23 + 68) * 0.5;
    v170 = *(float *)(v23 + 72);
    v167 = *(float *)(v23 + 80);
    v168 = *(float *)(v23 + 76);
    v165 = *(float *)(v23 + 88);
    v166 = *(float *)(v23 + 84);
    v163 = *(float *)(v23 + 96);
    v164 = *(float *)(v23 + 92);
    v161 = *(float *)(v23 + 104);
    v162 = *(float *)(v23 + 100);
    v44 = v23 + 164;
    v45 = *(unsigned __int8 *)(v23 + 124);
    v46 = 16 - v45;
    _CF = v45 >= 0x11;
    result = (_QWORD *)(v23 + 16548);
    v48 = *v10 + v31 * v11;
    v49 = v23 + 32932;
    if (_CF)
      v46 = 0;
    v50 = (_BYTE *)(v48 + v9);
    v53 = v24;
    v52 = *v24;
    v51 = v53[1];
    _ZF = v51 == 0;
    v55 = v51 + v27 * v21 + 2 * v20;
    if (_ZF)
      v55 = 0;
    v56 = v52 + v26 * v21 + 2 * v20;
    v57 = v46;
    v58 = *(float *)(v23 + 108);
    v59 = *(float *)(v23 + 112);
    v60 = *(float *)(v23 + 116);
    v61 = *(float *)(v23 + 120);
    v160 = v39;
    do
    {
      if (v19)
      {
        v62 = 0;
        v63 = (unsigned __int16 *)v56;
        v64 = (unsigned __int16 *)v55;
        v65 = v17;
        v66 = v50;
        do
        {
          if (v64)
          {
            v67 = (float)(*v64 >> v57) - v176;
            v68 = (float)(v64[1] >> v57) - v176;
            v64 += 2;
            v69 = v180 * v68;
            v70 = (float)(v178 * v68) + (float)(v67 * v179);
            v71 = v177 * v67;
          }
          else
          {
            v71 = 0.0;
            v70 = 0.0;
            v69 = 0.0;
          }
          v72 = v34 * (float)((float)(*v63 >> v57) - v33);
          v73 = v69 + v72;
          v74 = (float)(v69 + v72) <= 8191.0;
          v75 = 8191.0;
          if (v74)
          {
            v75 = v73;
            if (v73 < 0.0)
              v75 = 0.0;
          }
          v76 = v70 + v72;
          v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            v77 = v76;
            if (v76 < 0.0)
              v77 = 0.0;
          }
          v78 = v71 + v72;
          v74 = (float)(v71 + v72) <= 8191.0;
          v79 = 8191.0;
          if (v74)
          {
            v79 = v78;
            if (v78 < 0.0)
              v79 = 0.0;
          }
          if (v64)
          {
            v80 = (float)(*v64 >> v57) - v176;
            v81 = (float)(v64[1] >> v57) - v176;
            v64 += 2;
            v82 = v180 * v81;
            v83 = (float)(v178 * v81) + (float)(v80 * v179);
            v84 = v177 * v80;
          }
          else
          {
            v84 = 0.0;
            v83 = 0.0;
            v82 = 0.0;
          }
          v85 = v33;
          v86 = v34;
          v87 = v34 * (float)((float)(v63[1] >> v57) - v33);
          v88 = v82 + v87;
          v74 = (float)(v82 + v87) <= 8191.0;
          v89 = 8191.0;
          if (v74)
          {
            v89 = v88;
            if (v88 < 0.0)
              v89 = 0.0;
          }
          v90 = v83 + v87;
          v74 = (float)(v83 + v87) <= 8191.0;
          v91 = 8191.0;
          if (v74)
          {
            v91 = v90;
            if (v90 < 0.0)
              v91 = 0.0;
          }
          v92 = v84 + v87;
          v93 = 8191.0;
          if (v92 <= 8191.0)
          {
            v93 = v92;
            if (v92 < 0.0)
              v93 = 0.0;
          }
          _H0 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          _H7 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          v99 = llroundf(fminf(fmaxf(v79, 0.0), 8191.0));
          __asm { FCVT            S4, H7 }
          _H7 = *(_WORD *)(v44 + 2 * v99);
          __asm { FCVT            S7, H7 }
          _H6 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          v106 = (float)((float)((float)(v59 * _S4) + (float)(v58 * _S0)) + (float)(v60 * _S7))
               + (float)(v61 * fmaxf(_S0, fmaxf(_S4, _S7)));
          v107 = 8191.0;
          if (v106 <= 8191.0)
          {
            v107 = v106;
            if (v106 < 0.0)
              v107 = 0.0;
          }
          __asm
          {
            FCVT            S3, H6
            FCVT            S6, H1
            FCVT            S30, H30
          }
          _H1 = *((_WORD *)result + llroundf(v107));
          __asm { FCVT            S1, H1 }
          v113 = _S0 * _S1;
          v114 = _S4 * _S1;
          v115 = _S7 * _S1;
          v116 = (float)((float)((float)(v59 * _S6) + (float)(v58 * _S3)) + (float)(v60 * _S30))
               + (float)(v61 * fmaxf(_S3, fmaxf(_S6, _S30)));
          v117 = 8191.0;
          if (v116 <= 8191.0)
          {
            v117 = v116;
            if (v116 < 0.0)
              v117 = 0.0;
          }
          _H7 = *((_WORD *)result + llroundf(v117));
          __asm { FCVT            S7, H7 }
          v120 = _S3 * _S7;
          _S6 = _S6 * _S7;
          _S7 = _S30 * _S7;
          v123 = (float)((float)(v168 * v114) + (float)(v113 * v170)) + (float)(v115 * v167);
          v124 = (float)((float)(v165 * v114) + (float)(v113 * v166)) + (float)(v115 * v164);
          _S0 = (float)((float)(v162 * v114) + (float)(v113 * v163)) + (float)(v115 * v161);
          v126 = (float)(v168 * _S6) + (float)(v120 * v170);
          v127 = (float)(v165 * _S6) + (float)(v120 * v166);
          v128 = (float)(v162 * _S6) + (float)(v120 * v163);
          _S1 = v126 + (float)(_S7 * v167);
          v130 = v127 + (float)(_S7 * v164);
          LOWORD(_S6) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v123, 0.0), 8191.0)));
          v131 = v128 + (float)(_S7 * v161);
          __asm { FCVT            S6, H6 }
          LOWORD(_S7) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v124, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          LOWORD(_S0) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          __asm { FCVT            S17, H0 }
          LOWORD(_S0) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          LOWORD(_S1) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v130, 0.0), 8191.0)));
          __asm { FCVT            S4, H1 }
          v137 = llroundf(fminf(fmaxf(v131, 0.0), 8191.0));
          v138 = (float)(v42 * _S7) + (float)(v41 * _S6);
          _S1 = _S6 + _S0;
          v140 = _S7 + _S4;
          v141 = (float)(v37 + (float)((float)(_S6 + _S0) * v175)) + (float)(v140 * v174);
          v142 = (float)(v37 + (float)(_S1 * v172)) + (float)(v140 * v171);
          LOWORD(_S1) = *(_WORD *)(v49 + 2 * v137);
          __asm { FCVT            S1, H1 }
          v144 = v138 + (float)(v43 * _S17);
          v145 = v141 + (float)((float)(_S17 + _S1) * v173);
          v146 = v142 + (float)((float)(_S17 + _S1) * v169);
          if (v145 < v160)
            v147 = v160;
          else
            v147 = v145;
          v74 = v145 <= v40;
          v148 = v144 + v36;
          if (!v74)
            v147 = v40;
          v149 = llroundf(v147);
          if (v148 < v36)
            v150 = v36;
          else
            v150 = v144 + v36;
          *v66 = v149;
          if (v148 <= v38)
            v151 = v150;
          else
            v151 = v38;
          v66[1] = llroundf(v151);
          v152 = v40;
          if (v146 <= v40)
          {
            v152 = v146;
            if (v146 < v160)
              v152 = v160;
          }
          v153 = (float)((float)((float)(v42 * _S4) + (float)(v41 * _S0)) + (float)(v43 * _S1)) + v36;
          v66[2] = llroundf(v152);
          v154 = v38;
          v33 = v85;
          v34 = v86;
          if (v153 <= v38)
          {
            v154 = v153;
            if (v153 < v36)
              v154 = v36;
          }
          v66[3] = llroundf(v154);
          if (v65)
            *v65++ = 0;
          v62 += 2;
          v63 += 2;
          v66 += 4;
        }
        while (v19 > v62);
      }
      v56 += v26;
      v55 += v27;
      v50 += v31;
      ++v18;
    }
    while (v18 != v22);
    if (v29 && v17)
    {
      v155 = 0;
      do
      {
        if (v19)
        {
          v156 = v19;
          v157 = v15;
          v158 = (unsigned __int16 *)v30;
          do
          {
            v159 = *v158++;
            *v157++ = llroundf((float)v159 * 0.0038911);
            --v156;
          }
          while (v156);
        }
        v30 += v28;
        v15 += v13;
        ++v155;
      }
      while (v155 != v22);
    }
    else if (v17)
    {
      do
      {
        if (v19)
          result = memset(v15, 255, v19);
        v15 += v13;
        --v22;
      }
      while (v22);
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Mat_TRC_2vuyf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Mat_TRC_2vuyf_GCD);
  return 0;
}

_QWORD *vt_Copy_xf444_TRC_Mat_TRC_2vuyf_GCD(_QWORD *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  _WORD *v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  unsigned int v55;
  char v56;
  uint64_t v58;
  char v59;
  _BYTE *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  size_t v65;
  unsigned __int16 *v66;
  unsigned __int16 *v67;
  _WORD *v68;
  _BYTE *v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  BOOL v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v107;
  float v109;
  float v110;
  float v114;
  float v115;
  float v121;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  char v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  uint64_t v134;
  size_t v135;
  _BYTE *v136;
  unsigned __int16 *v137;
  unsigned int v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;

  v5 = *(_QWORD *)((char *)result + 28);
  v6 = *(unsigned __int8 *)result;
  v7 = v5 * a2 / v6;
  v8 = v5 + v5 * a2;
  v9 = result[14];
  v10 = (_QWORD *)result[16];
  v11 = result[13] * a2 / v6 + result[15];
  v12 = (uint64_t *)result[17];
  v13 = v12[1];
  v14 = v10[1];
  v15 = (_BYTE *)(v14 + v13 * v11 + v9);
  v16 = v8 / v6;
  if (v14)
    v17 = (_WORD *)(v14 + v13 * v11 + v9);
  else
    v17 = 0;
  if (v16 != v7)
  {
    v18 = 0;
    v19 = *(_QWORD *)((char *)result + 20);
    v20 = *(_QWORD *)((char *)result + 36);
    v21 = v7 + *(_QWORD *)((char *)result + 44);
    v22 = v16 - v7;
    v23 = result[19];
    v24 = (_QWORD *)result[7];
    v25 = (uint64_t *)result[8];
    v26 = *v25;
    v27 = v25[1];
    v28 = v25[2];
    v29 = v24[2];
    v30 = v29 + v28 * v21 + 2 * v20;
    v31 = *v12;
    LOWORD(a4) = *(_WORD *)(v23 + 140);
    LOWORD(a5) = *(_WORD *)(v23 + 142);
    *(float *)&v32 = 8191.0 / (float)*(unsigned int *)(v23 + 128);
    v33 = (float)LODWORD(a4);
    v34 = (float)LODWORD(a5);
    v35 = *(float *)&v32 * *(float *)v23;
    v146 = *(float *)&v32 * *(float *)(v23 + 16);
    v147 = *(float *)&v32 * *(float *)(v23 + 8);
    v36 = *(float *)&v32 * *(float *)(v23 + 20);
    v37 = *(float *)&v32 * *(float *)(v23 + 28);
    LOWORD(v32) = *(_WORD *)(v23 + 144);
    v38 = (float)v32;
    LOWORD(v32) = *(_WORD *)(v23 + 146);
    v39 = (float)v32;
    LOWORD(v32) = *(_WORD *)(v23 + 148);
    v40 = (float)v32;
    LOWORD(v32) = *(_WORD *)(v23 + 150);
    v41 = (float)v32;
    LOWORD(v32) = *(_WORD *)(v23 + 152);
    v42 = (float)v32;
    v43 = *(float *)(v23 + 36);
    v44 = *(float *)(v23 + 40);
    v45 = *(float *)(v23 + 44);
    v144 = *(float *)(v23 + 48) * 0.5;
    v145 = v36;
    v142 = *(float *)(v23 + 56) * 0.5;
    v143 = *(float *)(v23 + 52) * 0.5;
    v140 = *(float *)(v23 + 64) * 0.5;
    v141 = *(float *)(v23 + 60) * 0.5;
    v46 = *(float *)(v23 + 72);
    v139 = *(float *)(v23 + 68) * 0.5;
    v48 = *(float *)(v23 + 76);
    v47 = *(float *)(v23 + 80);
    v49 = *(float *)(v23 + 84);
    v50 = *(float *)(v23 + 88);
    v51 = *(float *)(v23 + 92);
    v52 = *(float *)(v23 + 96);
    v53 = *(float *)(v23 + 100);
    v54 = *(float *)(v23 + 104);
    v55 = *(unsigned __int8 *)(v23 + 124);
    v56 = 16 - v55;
    _CF = v55 >= 0x11;
    v58 = v23 + 16548;
    result = (_QWORD *)(v23 + 164);
    if (_CF)
      v59 = 0;
    else
      v59 = v56;
    v60 = (_BYTE *)(*v10 + v31 * v11 + v9);
    v61 = v24[1];
    if (v61)
      v62 = v61 + v27 * v21 + 2 * v20;
    else
      v62 = 0;
    v63 = *v24 + v26 * v21 + 2 * v20;
    v64 = v59;
    do
    {
      if (v19)
      {
        v65 = 0;
        v66 = (unsigned __int16 *)v63;
        v67 = (unsigned __int16 *)v62;
        v68 = v17;
        v69 = v60;
        do
        {
          if (v67)
          {
            v70 = (float)(*v67 >> v64) - v34;
            v71 = (float)(v67[1] >> v64) - v34;
            v67 += 2;
            v72 = v147 * v71;
            v73 = (float)(v145 * v71) + (float)(v70 * v146);
            v74 = v37 * v70;
          }
          else
          {
            v74 = 0.0;
            v73 = 0.0;
            v72 = 0.0;
          }
          v75 = v35 * (float)((float)(*v66 >> v64) - v33);
          v76 = v72 + v75;
          v77 = (float)(v72 + v75) <= 8191.0;
          v78 = 8191.0;
          if (v77)
          {
            v78 = v76;
            if (v76 < 0.0)
              v78 = 0.0;
          }
          v79 = v73 + v75;
          v80 = 8191.0;
          if (v79 <= 8191.0)
          {
            v80 = v79;
            if (v79 < 0.0)
              v80 = 0.0;
          }
          v81 = 8191.0;
          if ((float)(v74 + v75) <= 8191.0)
          {
            v81 = v74 + v75;
            if ((float)(v74 + v75) < 0.0)
              v81 = 0.0;
          }
          if (v67)
          {
            v82 = (float)(*v67 >> v64) - v34;
            v83 = (float)(v67[1] >> v64) - v34;
            v67 += 2;
            v84 = v147 * v83;
            v85 = (float)(v145 * v83) + (float)(v82 * v146);
            v86 = v37 * v82;
          }
          else
          {
            v86 = 0.0;
            v85 = 0.0;
            v84 = 0.0;
          }
          v87 = v35 * (float)((float)(v66[1] >> v64) - v33);
          v88 = 8191.0;
          if ((float)(v84 + v87) <= 8191.0)
          {
            v88 = v84 + v87;
            if ((float)(v84 + v87) < 0.0)
              v88 = 0.0;
          }
          v89 = v85 + v87;
          v77 = (float)(v85 + v87) <= 8191.0;
          v90 = 8191.0;
          if (v77)
          {
            v90 = v89;
            if (v89 < 0.0)
              v90 = 0.0;
          }
          v91 = v86 + v87;
          v92 = 8191.0;
          if (v91 <= 8191.0)
          {
            v92 = v91;
            if (v91 < 0.0)
              v92 = 0.0;
          }
          _H0 = *((_WORD *)result + llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          _H5 = *((_WORD *)result + llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H24 = *((_WORD *)result + llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          _H6 = *((_WORD *)result + llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H4 = *((_WORD *)result + llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _S26 = (float)((float)(v48 * _S5) + (float)(_S0 * v46)) + (float)(_S24 * v47);
          v107 = (float)((float)(v50 * _S5) + (float)(_S0 * v49)) + (float)(_S24 * v51);
          _S0 = (float)((float)(v53 * _S5) + (float)(_S0 * v52)) + (float)(_S24 * v54);
          v109 = (float)(v48 * _S4) + (float)(_S6 * v46);
          v110 = (float)(v50 * _S4) + (float)(_S6 * v49);
          _S4 = (float)(v53 * _S4) + (float)(_S6 * v52);
          LOWORD(_S6) = *((_WORD *)result + llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _S5 = v109 + (float)(_S6 * v47);
          v114 = v110 + (float)(_S6 * v51);
          LOWORD(_S26) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(_S26, 0.0), 8191.0)));
          v115 = _S4 + (float)(_S6 * v54);
          __asm { FCVT            S26, H26 }
          LOWORD(_S4) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v107, 0.0), 8191.0)));
          __asm { FCVT            S28, H4 }
          LOWORD(_S0) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          __asm { FCVT            S30, H0 }
          LOWORD(_S0) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          LOWORD(_S4) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v114, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          v121 = (float)(v39 + (float)((float)(_S26 + _S0) * v141)) + (float)((float)(_S28 + _S4) * v140);
          LOWORD(_S5) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v115, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          v123 = (float)((float)(v44 * _S28) + (float)(v43 * _S26)) + (float)(v45 * _S30);
          v124 = (float)((float)(v39 + (float)((float)(_S26 + _S0) * v144)) + (float)((float)(_S28 + _S4) * v143))
               + (float)((float)(_S30 + _S5) * v142);
          v125 = v121 + (float)((float)(_S30 + _S5) * v139);
          if (v124 < v41)
            v126 = v41;
          else
            v126 = v124;
          v127 = v123 + v38;
          if (v124 > v42)
            v126 = v42;
          v128 = llroundf(v126);
          if (v127 < v38)
            v129 = v38;
          else
            v129 = v127;
          *v69 = v128;
          if (v127 <= v40)
            v130 = v129;
          else
            v130 = v40;
          v69[1] = llroundf(v130);
          v131 = v42;
          if (v125 <= v42)
          {
            v131 = v125;
            if (v125 < v41)
              v131 = v41;
          }
          v132 = (float)((float)((float)(v44 * _S4) + (float)(v43 * _S0)) + (float)(v45 * _S5)) + v38;
          v69[2] = llroundf(v131);
          v133 = v40;
          if (v132 <= v40)
          {
            v133 = v132;
            if (v132 < v38)
              v133 = v38;
          }
          v69[3] = llroundf(v133);
          if (v68)
            *v68++ = 0;
          v65 += 2;
          v66 += 2;
          v69 += 4;
        }
        while (v19 > v65);
      }
      v63 += v26;
      v62 += v27;
      v60 += v31;
      ++v18;
    }
    while (v18 != v22);
    if (v29 && v17)
    {
      v134 = 0;
      do
      {
        if (v19)
        {
          v135 = v19;
          v136 = v15;
          v137 = (unsigned __int16 *)v30;
          do
          {
            v138 = *v137++;
            *v136++ = llroundf((float)v138 * 0.0038911);
            --v135;
          }
          while (v135);
        }
        v30 += v28;
        v15 += v13;
        ++v134;
      }
      while (v134 != v22);
    }
    else if (v17)
    {
      do
      {
        if (v19)
          result = memset(v15, 255, v19);
        v15 += v13;
        --v22;
      }
      while (v22);
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_rgb_2vuyf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_rgb_2vuyf_GCD);
  return 0;
}

_QWORD *vt_Copy_xf444_rgb_2vuyf_GCD(_QWORD *result, uint64_t a2, double a3, double a4, double a5, float a6, float a7)
{
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  _WORD *v24;
  uint64_t v25;
  size_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  char v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  char v74;
  _BYTE *v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  size_t v79;
  unsigned __int16 *v80;
  unsigned __int16 *v81;
  _WORD *v82;
  _BYTE *v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  uint64_t v115;
  size_t v116;
  _BYTE *v117;
  unsigned __int16 *v118;
  unsigned int v119;

  v12 = *(_QWORD *)((char *)result + 28);
  v13 = *(unsigned __int8 *)result;
  v14 = v12 * a2 / v13;
  v15 = v12 + v12 * a2;
  v16 = result[14];
  v17 = (_QWORD *)result[16];
  v18 = result[13] * a2 / v13 + result[15];
  v19 = (uint64_t *)result[17];
  v20 = v19[1];
  v21 = v17[1];
  v22 = (_BYTE *)(v21 + v20 * v18 + v16);
  v23 = v15 / v13;
  if (v21)
    v24 = (_WORD *)(v21 + v20 * v18 + v16);
  else
    v24 = 0;
  if (v23 == v14)
    return result;
  v25 = 0;
  v26 = *(_QWORD *)((char *)result + 20);
  v27 = *(_QWORD *)((char *)result + 36);
  v28 = v14 + *(_QWORD *)((char *)result + 44);
  v29 = v23 - v14;
  v30 = result[19];
  v31 = (_QWORD *)result[7];
  v32 = (uint64_t *)result[8];
  v33 = *v32;
  v34 = v32[1];
  v35 = v32[2];
  v36 = v31[2];
  LOWORD(a6) = *(_WORD *)(v30 + 140);
  LOWORD(a7) = *(_WORD *)(v30 + 142);
  v37 = (float)*(unsigned int *)(v30 + 136) / (float)*(unsigned int *)(v30 + 128);
  v38 = *(float *)v30;
  v39 = *(float *)(v30 + 8);
  v40 = *(float *)(v30 + 16);
  v41 = *(float *)(v30 + 20);
  v42 = *(float *)(v30 + 28);
  LOWORD(v7) = *(_WORD *)(v30 + 144);
  LOWORD(v8) = *(_WORD *)(v30 + 146);
  LOWORD(v9) = *(_WORD *)(v30 + 148);
  LOWORD(v10) = *(_WORD *)(v30 + 150);
  LOWORD(v11) = *(_WORD *)(v30 + 152);
  v43 = *(float *)(v30 + 36);
  v44 = *(float *)(v30 + 40);
  v45 = *(float *)(v30 + 44);
  v46 = *(float *)(v30 + 48);
  v47 = *(float *)(v30 + 52);
  v48 = *(float *)(v30 + 56);
  v49 = *(float *)(v30 + 60);
  v50 = *(float *)(v30 + 64);
  v51 = *(float *)(v30 + 68);
  LODWORD(v30) = *(unsigned __int8 *)(v30 + 124);
  v52 = 16 - v30;
  v53 = v30 >= 0x11;
  v54 = v36 + v35 * v28 + 2 * v27;
  v55 = *v19;
  v56 = (float)LODWORD(a6);
  v57 = (float)LODWORD(a7);
  v58 = v37 * v38;
  v59 = v37 * v39;
  v60 = v37 * v40;
  v61 = v37 * v41;
  v62 = v37 * v42;
  v63 = (float)v7;
  v64 = (float)v8;
  v65 = (float)v9;
  v66 = (float)v10;
  v67 = (float)v11;
  v68 = v46 * 0.5;
  v69 = v47 * 0.5;
  v70 = v48 * 0.5;
  v71 = v49 * 0.5;
  v72 = v50 * 0.5;
  v73 = v51 * 0.5;
  if (v53)
    v74 = 0;
  else
    v74 = v52;
  v75 = (_BYTE *)(*v17 + v55 * v18 + v16);
  v76 = v31[1];
  if (v76)
    v77 = v76 + v34 * v28 + 2 * v27;
  else
    v77 = 0;
  result = (_QWORD *)(*v31 + v33 * v28 + 2 * v27);
  v78 = v74;
  do
  {
    if (v26)
    {
      v79 = 0;
      v80 = (unsigned __int16 *)result;
      v81 = (unsigned __int16 *)v77;
      v82 = v24;
      v83 = v75;
      while (1)
      {
        v84 = 0.0;
        if (!v81)
          break;
        v85 = (float)(*v81 >> v78) - v57;
        v86 = (float)(v81[1] >> v78) - v57;
        v81 += 2;
        v87 = v59 * v86;
        v88 = (float)(v61 * v86) + (float)(v85 * v60);
        v89 = v62 * v85;
        if (!v81)
          goto LABEL_18;
        v90 = (float)(*v81 >> v78) - v57;
        v91 = (float)(v81[1] >> v78) - v57;
        v81 += 2;
        v92 = v59 * v91;
        v93 = (float)(v61 * v91) + (float)(v90 * v60);
        v84 = v62 * v90;
LABEL_19:
        v94 = v58 * (float)((float)(*v80 >> v78) - v56);
        v95 = v87 + v94;
        v96 = v88 + v94;
        v97 = v89 + v94;
        v98 = v58 * (float)((float)(v80[1] >> v78) - v56);
        v99 = v92 + v98;
        v100 = v93 + v98;
        v101 = v84 + v98;
        v102 = (float)((float)((float)(v44 * v96) + (float)(v43 * v95)) + (float)(v45 * v97)) + v63;
        v103 = v95 + (float)(v92 + v98);
        v104 = v96 + v100;
        v105 = v97 + v101;
        v106 = (float)((float)(v64 + (float)(v103 * v68)) + (float)(v104 * v69)) + (float)(v105 * v70);
        v107 = (float)((float)(v64 + (float)(v103 * v71)) + (float)(v104 * v72)) + (float)(v105 * v73);
        if (v106 < v66)
          v108 = v66;
        else
          v108 = v106;
        if (v106 <= v67)
          v109 = v108;
        else
          v109 = v67;
        *v83 = llroundf(v109);
        if (v102 < v63)
          v110 = v63;
        else
          v110 = v102;
        if (v102 <= v65)
          v111 = v110;
        else
          v111 = v65;
        v83[1] = llroundf(v111);
        v112 = v67;
        if (v107 <= v67)
        {
          v112 = v107;
          if (v107 < v66)
            v112 = v66;
        }
        v113 = (float)((float)((float)(v44 * v100) + (float)(v43 * v99)) + (float)(v45 * v101)) + v63;
        v83[2] = llroundf(v112);
        v114 = v65;
        if (v113 <= v65)
        {
          v114 = v113;
          if (v113 < v63)
            v114 = v63;
        }
        v83[3] = llroundf(v114);
        if (v82)
          *v82++ = 0;
        v79 += 2;
        v80 += 2;
        v83 += 4;
        if (v26 <= v79)
          goto LABEL_40;
      }
      v89 = 0.0;
      v88 = 0.0;
      v87 = 0.0;
LABEL_18:
      v93 = 0.0;
      v92 = 0.0;
      goto LABEL_19;
    }
LABEL_40:
    result = (_QWORD *)((char *)result + v33);
    v77 += v34;
    v75 += v55;
    ++v25;
  }
  while (v25 != v29);
  if (v36 && v24)
  {
    v115 = 0;
    do
    {
      if (v26)
      {
        v116 = v26;
        v117 = v22;
        v118 = (unsigned __int16 *)v54;
        do
        {
          v119 = *v118++;
          *v117++ = llroundf((float)v119 * 0.0038911);
          --v116;
        }
        while (v116);
      }
      v54 += v35;
      v22 += v20;
      ++v115;
    }
    while (v115 != v29);
  }
  else if (v24)
  {
    do
    {
      if (v26)
        result = memset(v22, 255, v26);
      v22 += v20;
      --v29;
    }
    while (v29);
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Tone_Mat_TRC_yuvsf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Tone_Mat_TRC_yuvsf_GCD);
  return 0;
}

_QWORD *vt_Copy_xf444_TRC_Tone_Mat_TRC_yuvsf_GCD(_QWORD *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  _WORD *v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  unsigned int v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  uint64_t v53;
  unsigned int v54;
  char v55;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v64;
  uint64_t v65;
  char v66;
  float v67;
  float v68;
  float v69;
  float v70;
  size_t v71;
  unsigned __int16 *v72;
  unsigned __int16 *v73;
  _WORD *v74;
  _BYTE *v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  BOOL v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  unsigned int v107;
  float v114;
  float v115;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v128;
  float v130;
  float v131;
  float v132;
  float v136;
  unsigned int v137;
  unsigned int v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  char v156;
  float v157;
  char v158;
  float v159;
  float v160;
  float v161;
  float v162;
  uint64_t v163;
  size_t v164;
  _BYTE *v165;
  unsigned __int16 *v166;
  unsigned int v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;

  v5 = *(_QWORD *)((char *)result + 28);
  v6 = *(unsigned __int8 *)result;
  v7 = v5 * a2 / v6;
  v8 = v5 + v5 * a2;
  v9 = result[14];
  v10 = (_QWORD *)result[16];
  v11 = result[13] * a2 / v6 + result[15];
  v12 = (uint64_t *)result[17];
  v13 = v12[1];
  v14 = v10[1];
  v15 = (_BYTE *)(v14 + v13 * v11 + v9);
  v16 = v8 / v6;
  if (v14)
    v17 = (_WORD *)(v14 + v13 * v11 + v9);
  else
    v17 = 0;
  if (v16 != v7)
  {
    v18 = 0;
    v19 = *(_QWORD *)((char *)result + 20);
    v20 = *(_QWORD *)((char *)result + 36);
    v21 = v7 + *(_QWORD *)((char *)result + 44);
    v22 = v16 - v7;
    v23 = result[19];
    v24 = (_QWORD *)result[7];
    v25 = (uint64_t *)result[8];
    v26 = *v25;
    v27 = v25[1];
    v28 = v25[2];
    v29 = v24[2];
    v30 = v29 + v28 * v21 + 2 * v20;
    v31 = *v12;
    LOWORD(a4) = *(_WORD *)(v23 + 140);
    LOWORD(a5) = *(_WORD *)(v23 + 142);
    v32 = 8191.0 / (float)*(unsigned int *)(v23 + 128);
    v33 = (float)LODWORD(a4);
    v34 = (float)LODWORD(a5);
    v35 = v32 * *(float *)v23;
    v179 = v32 * *(float *)(v23 + 16);
    v180 = v32 * *(float *)(v23 + 8);
    v36 = v32 * *(float *)(v23 + 20);
    *(float *)&v37 = v32 * *(float *)(v23 + 28);
    v177 = *(float *)&v37;
    v178 = v36;
    LOWORD(v37) = *(_WORD *)(v23 + 144);
    v38 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v23 + 146);
    v39 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v23 + 148);
    v40 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v23 + 150);
    v41 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v23 + 152);
    v42 = (float)v37;
    v175 = *(float *)(v23 + 36);
    v176 = v39;
    v43 = *(float *)(v23 + 44);
    v173 = *(float *)(v23 + 48) * 0.5;
    v174 = *(float *)(v23 + 40);
    v171 = *(float *)(v23 + 56) * 0.5;
    v172 = *(float *)(v23 + 52) * 0.5;
    v169 = *(float *)(v23 + 64) * 0.5;
    v170 = *(float *)(v23 + 60) * 0.5;
    v44 = *(float *)(v23 + 72);
    v168 = *(float *)(v23 + 68) * 0.5;
    v46 = *(float *)(v23 + 76);
    v45 = *(float *)(v23 + 80);
    v47 = *(float *)(v23 + 84);
    v48 = *(float *)(v23 + 88);
    v49 = *(float *)(v23 + 92);
    v50 = *(float *)(v23 + 96);
    v51 = *(float *)(v23 + 100);
    v52 = *(float *)(v23 + 104);
    v53 = v23 + 164;
    v54 = *(unsigned __int8 *)(v23 + 124);
    v55 = 16 - v54;
    _CF = v54 >= 0x11;
    result = (_QWORD *)(v23 + 16548);
    v57 = *v10 + v31 * v11;
    v58 = v23 + 32932;
    if (_CF)
      v55 = 0;
    v59 = (_BYTE *)(v57 + v9);
    v62 = v24;
    v61 = *v24;
    v60 = v62[1];
    _ZF = v60 == 0;
    v64 = v60 + v27 * v21 + 2 * v20;
    if (_ZF)
      v64 = 0;
    v65 = v61 + v26 * v21 + 2 * v20;
    v66 = v55;
    v67 = *(float *)(v23 + 108);
    v68 = *(float *)(v23 + 112);
    v69 = *(float *)(v23 + 116);
    v70 = *(float *)(v23 + 120);
    do
    {
      if (v19)
      {
        v71 = 0;
        v72 = (unsigned __int16 *)v65;
        v73 = (unsigned __int16 *)v64;
        v74 = v17;
        v75 = v59;
        do
        {
          if (v73)
          {
            v76 = (float)(*v73 >> v66) - v34;
            v77 = (float)(v73[1] >> v66) - v34;
            v73 += 2;
            v78 = v180 * v77;
            v79 = (float)(v178 * v77) + (float)(v76 * v179);
            v80 = v177 * v76;
          }
          else
          {
            v80 = 0.0;
            v79 = 0.0;
            v78 = 0.0;
          }
          v81 = v35 * (float)((float)(*v72 >> v66) - v33);
          v82 = v78 + v81;
          v83 = (float)(v78 + v81) <= 8191.0;
          v84 = 8191.0;
          if (v83)
          {
            v84 = v82;
            if (v82 < 0.0)
              v84 = 0.0;
          }
          v85 = v79 + v81;
          v86 = 8191.0;
          if (v85 <= 8191.0)
          {
            v86 = v85;
            if (v85 < 0.0)
              v86 = 0.0;
          }
          v87 = v80 + v81;
          v83 = (float)(v80 + v81) <= 8191.0;
          v88 = 8191.0;
          if (v83)
          {
            v88 = v87;
            if (v87 < 0.0)
              v88 = 0.0;
          }
          if (v73)
          {
            v89 = (float)(*v73 >> v66) - v34;
            v90 = (float)(v73[1] >> v66) - v34;
            v73 += 2;
            v91 = v180 * v90;
            v92 = (float)(v178 * v90) + (float)(v89 * v179);
            v93 = v177 * v89;
          }
          else
          {
            v93 = 0.0;
            v92 = 0.0;
            v91 = 0.0;
          }
          v94 = v33;
          v95 = v35 * (float)((float)(v72[1] >> v66) - v33);
          v96 = v91 + v95;
          v83 = (float)(v91 + v95) <= 8191.0;
          v97 = 8191.0;
          if (v83)
          {
            v97 = v96;
            if (v96 < 0.0)
              v97 = 0.0;
          }
          v98 = v92 + v95;
          v83 = (float)(v92 + v95) <= 8191.0;
          v99 = 8191.0;
          if (v83)
          {
            v99 = v98;
            if (v98 < 0.0)
              v99 = 0.0;
          }
          v100 = v93 + v95;
          v101 = 8191.0;
          if (v100 <= 8191.0)
          {
            v101 = v100;
            if (v100 < 0.0)
              v101 = 0.0;
          }
          _H0 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          _H7 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          v107 = llroundf(fminf(fmaxf(v88, 0.0), 8191.0));
          __asm { FCVT            S4, H7 }
          _H7 = *(_WORD *)(v53 + 2 * v107);
          __asm { FCVT            S7, H7 }
          _H6 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v97, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v99, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v101, 0.0), 8191.0)));
          v114 = (float)((float)((float)(v68 * _S4) + (float)(v67 * _S0)) + (float)(v69 * _S7))
               + (float)(v70 * fmaxf(_S0, fmaxf(_S4, _S7)));
          v115 = 8191.0;
          if (v114 <= 8191.0)
          {
            v115 = v114;
            if (v114 < 0.0)
              v115 = 0.0;
          }
          __asm
          {
            FCVT            S3, H6
            FCVT            S6, H1
            FCVT            S30, H30
          }
          _H1 = *((_WORD *)result + llroundf(v115));
          __asm { FCVT            S1, H1 }
          v121 = _S0 * _S1;
          v122 = _S4 * _S1;
          v123 = _S7 * _S1;
          v124 = (float)((float)((float)(v68 * _S6) + (float)(v67 * _S3)) + (float)(v69 * _S30))
               + (float)(v70 * fmaxf(_S3, fmaxf(_S6, _S30)));
          v125 = 8191.0;
          if (v124 <= 8191.0)
          {
            v125 = v124;
            if (v124 < 0.0)
              v125 = 0.0;
          }
          _H7 = *((_WORD *)result + llroundf(v125));
          __asm { FCVT            S7, H7 }
          v128 = _S3 * _S7;
          _S6 = _S6 * _S7;
          v130 = _S30 * _S7;
          v131 = (float)((float)(v46 * v122) + (float)(v121 * v44)) + (float)(v123 * v45);
          v132 = (float)((float)(v48 * v122) + (float)(v121 * v47)) + (float)(v123 * v49);
          _S0 = (float)((float)(v51 * v122) + (float)(v121 * v50)) + (float)(v123 * v52);
          _S1 = (float)(v46 * _S6) + (float)(v128 * v44);
          _S4 = (float)(v48 * _S6) + (float)(v128 * v47);
          v136 = (float)((float)(v51 * _S6) + (float)(v128 * v50)) + (float)(v130 * v52);
          LOWORD(_S6) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v131, 0.0), 8191.0)));
          v137 = llroundf(fminf(fmaxf(_S0, 0.0), 8191.0));
          LOWORD(_S0) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v132, 0.0), 8191.0)));
          __asm
          {
            FCVT            S6, H6
            FCVT            S0, H0
          }
          LOWORD(_S1) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(_S1 + (float)(v130 * v45), 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          LOWORD(_S4) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(_S4 + (float)(v130 * v49), 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          v142 = llroundf(fminf(fmaxf(v136, 0.0), 8191.0));
          v143 = (float)(v174 * _S0) + (float)(v175 * _S6);
          v144 = (float)(v174 * _S4) + (float)(v175 * _S1);
          v145 = _S6 + _S1;
          LOWORD(_S6) = *(_WORD *)(v58 + 2 * v137);
          v146 = _S0 + _S4;
          LOWORD(_S4) = *(_WORD *)(v58 + 2 * v142);
          __asm
          {
            FCVT            S6, H6
            FCVT            S4, H4
          }
          v149 = (float)(v143 + (float)(v43 * _S6)) + v38;
          v150 = v144 + (float)(v43 * _S4);
          v151 = _S6 + _S4;
          v152 = (float)(v176 + (float)(v145 * v173)) + (float)(v146 * v172);
          v153 = (float)(v176 + (float)(v145 * v170)) + (float)(v146 * v169);
          if (v149 < v38)
            v154 = v38;
          else
            v154 = v149;
          v83 = v149 <= v40;
          v155 = v152 + (float)(v151 * v171);
          if (!v83)
            v154 = v40;
          v156 = llroundf(v154);
          if (v155 < v41)
            v157 = v41;
          else
            v157 = v152 + (float)(v151 * v171);
          if (v155 > v42)
            v157 = v42;
          v158 = llroundf(v157);
          v159 = v153 + (float)(v151 * v168);
          if ((float)(v150 + v38) < v38)
            v160 = v38;
          else
            v160 = v150 + v38;
          *v75 = v156;
          v75[1] = v158;
          if ((float)(v150 + v38) <= v40)
            v161 = v160;
          else
            v161 = v40;
          v75[2] = llroundf(v161);
          v162 = v42;
          if (v159 <= v42)
          {
            v162 = v159;
            if (v159 < v41)
              v162 = v41;
          }
          v75[3] = llroundf(v162);
          v33 = v94;
          if (v74)
            *v74++ = 0;
          v71 += 2;
          v72 += 2;
          v75 += 4;
        }
        while (v19 > v71);
      }
      v65 += v26;
      v64 += v27;
      v59 += v31;
      ++v18;
    }
    while (v18 != v22);
    if (v29 && v17)
    {
      v163 = 0;
      do
      {
        if (v19)
        {
          v164 = v19;
          v165 = v15;
          v166 = (unsigned __int16 *)v30;
          do
          {
            v167 = *v166++;
            *v165++ = llroundf((float)v167 * 0.0038911);
            --v164;
          }
          while (v164);
        }
        v30 += v28;
        v15 += v13;
        ++v163;
      }
      while (v163 != v22);
    }
    else if (v17)
    {
      do
      {
        if (v19)
          result = memset(v15, 255, v19);
        v15 += v13;
        --v22;
      }
      while (v22);
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Mat_TRC_yuvsf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Mat_TRC_yuvsf_GCD);
  return 0;
}

_QWORD *vt_Copy_xf444_TRC_Mat_TRC_yuvsf_GCD(_QWORD *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  _WORD *v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  unsigned int v55;
  char v56;
  uint64_t v58;
  char v59;
  _BYTE *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  size_t v65;
  unsigned __int16 *v66;
  unsigned __int16 *v67;
  _WORD *v68;
  _BYTE *v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  BOOL v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v106;
  float v107;
  float v109;
  float v110;
  float v111;
  float v115;
  unsigned int v116;
  unsigned int v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  char v135;
  float v136;
  float v137;
  char v138;
  float v139;
  float v140;
  float v141;
  float v142;
  uint64_t v143;
  size_t v144;
  _BYTE *v145;
  unsigned __int16 *v146;
  unsigned int v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;

  v5 = *(_QWORD *)((char *)result + 28);
  v6 = *(unsigned __int8 *)result;
  v7 = v5 * a2 / v6;
  v8 = v5 + v5 * a2;
  v9 = result[14];
  v10 = (_QWORD *)result[16];
  v11 = result[13] * a2 / v6 + result[15];
  v12 = (uint64_t *)result[17];
  v13 = v12[1];
  v14 = v10[1];
  v15 = (_BYTE *)(v14 + v13 * v11 + v9);
  v16 = v8 / v6;
  if (v14)
    v17 = (_WORD *)(v14 + v13 * v11 + v9);
  else
    v17 = 0;
  if (v16 != v7)
  {
    v18 = 0;
    v19 = *(_QWORD *)((char *)result + 20);
    v20 = *(_QWORD *)((char *)result + 36);
    v21 = v7 + *(_QWORD *)((char *)result + 44);
    v22 = v16 - v7;
    v23 = result[19];
    v24 = (_QWORD *)result[7];
    v25 = (uint64_t *)result[8];
    v26 = *v25;
    v27 = v25[1];
    v28 = v25[2];
    v29 = v24[2];
    v30 = v29 + v28 * v21 + 2 * v20;
    v31 = *v12;
    LOWORD(a4) = *(_WORD *)(v23 + 140);
    LOWORD(a5) = *(_WORD *)(v23 + 142);
    *(float *)&v32 = 8191.0 / (float)*(unsigned int *)(v23 + 128);
    v33 = (float)LODWORD(a4);
    v34 = (float)LODWORD(a5);
    v35 = *(float *)&v32 * *(float *)v23;
    v155 = *(float *)&v32 * *(float *)(v23 + 16);
    v156 = *(float *)&v32 * *(float *)(v23 + 8);
    v36 = *(float *)&v32 * *(float *)(v23 + 20);
    v37 = *(float *)&v32 * *(float *)(v23 + 28);
    LOWORD(v32) = *(_WORD *)(v23 + 144);
    v38 = (float)v32;
    LOWORD(v32) = *(_WORD *)(v23 + 146);
    v39 = (float)v32;
    LOWORD(v32) = *(_WORD *)(v23 + 148);
    v40 = (float)v32;
    LOWORD(v32) = *(_WORD *)(v23 + 150);
    v41 = (float)v32;
    LOWORD(v32) = *(_WORD *)(v23 + 152);
    v42 = (float)v32;
    v43 = *(float *)(v23 + 36);
    v44 = *(float *)(v23 + 40);
    v45 = *(float *)(v23 + 44);
    v153 = *(float *)(v23 + 48) * 0.5;
    v154 = v36;
    v151 = *(float *)(v23 + 56) * 0.5;
    v152 = *(float *)(v23 + 52) * 0.5;
    v149 = *(float *)(v23 + 64) * 0.5;
    v150 = *(float *)(v23 + 60) * 0.5;
    v46 = *(float *)(v23 + 72);
    v148 = *(float *)(v23 + 68) * 0.5;
    v48 = *(float *)(v23 + 76);
    v47 = *(float *)(v23 + 80);
    v49 = *(float *)(v23 + 84);
    v50 = *(float *)(v23 + 88);
    v51 = *(float *)(v23 + 92);
    v52 = *(float *)(v23 + 96);
    v53 = *(float *)(v23 + 100);
    v54 = *(float *)(v23 + 104);
    v55 = *(unsigned __int8 *)(v23 + 124);
    v56 = 16 - v55;
    _CF = v55 >= 0x11;
    v58 = v23 + 16548;
    result = (_QWORD *)(v23 + 164);
    if (_CF)
      v59 = 0;
    else
      v59 = v56;
    v60 = (_BYTE *)(*v10 + v31 * v11 + v9);
    v61 = v24[1];
    if (v61)
      v62 = v61 + v27 * v21 + 2 * v20;
    else
      v62 = 0;
    v63 = *v24 + v26 * v21 + 2 * v20;
    v64 = v59;
    do
    {
      if (v19)
      {
        v65 = 0;
        v66 = (unsigned __int16 *)v63;
        v67 = (unsigned __int16 *)v62;
        v68 = v17;
        v69 = v60;
        do
        {
          if (v67)
          {
            v70 = (float)(*v67 >> v64) - v34;
            v71 = (float)(v67[1] >> v64) - v34;
            v67 += 2;
            v72 = v156 * v71;
            v73 = (float)(v154 * v71) + (float)(v70 * v155);
            v74 = v37 * v70;
          }
          else
          {
            v74 = 0.0;
            v73 = 0.0;
            v72 = 0.0;
          }
          v75 = v35 * (float)((float)(*v66 >> v64) - v33);
          v76 = v72 + v75;
          v77 = (float)(v72 + v75) <= 8191.0;
          v78 = 8191.0;
          if (v77)
          {
            v78 = v76;
            if (v76 < 0.0)
              v78 = 0.0;
          }
          v79 = v73 + v75;
          v80 = 8191.0;
          if (v79 <= 8191.0)
          {
            v80 = v79;
            if (v79 < 0.0)
              v80 = 0.0;
          }
          v81 = 8191.0;
          if ((float)(v74 + v75) <= 8191.0)
          {
            v81 = v74 + v75;
            if ((float)(v74 + v75) < 0.0)
              v81 = 0.0;
          }
          if (v67)
          {
            v82 = (float)(*v67 >> v64) - v34;
            v83 = (float)(v67[1] >> v64) - v34;
            v67 += 2;
            v84 = v156 * v83;
            v85 = (float)(v154 * v83) + (float)(v82 * v155);
            v86 = v37 * v82;
          }
          else
          {
            v86 = 0.0;
            v85 = 0.0;
            v84 = 0.0;
          }
          v87 = v35 * (float)((float)(v66[1] >> v64) - v33);
          v88 = 8191.0;
          if ((float)(v84 + v87) <= 8191.0)
          {
            v88 = v84 + v87;
            if ((float)(v84 + v87) < 0.0)
              v88 = 0.0;
          }
          v89 = v85 + v87;
          v77 = (float)(v85 + v87) <= 8191.0;
          v90 = 8191.0;
          if (v77)
          {
            v90 = v89;
            if (v89 < 0.0)
              v90 = 0.0;
          }
          v91 = v86 + v87;
          v92 = 8191.0;
          if (v91 <= 8191.0)
          {
            v92 = v91;
            if (v91 < 0.0)
              v92 = 0.0;
          }
          _H0 = *((_WORD *)result + llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          _H5 = *((_WORD *)result + llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H24 = *((_WORD *)result + llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          _H6 = *((_WORD *)result + llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H4 = *((_WORD *)result + llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          v106 = (float)((float)(v48 * _S5) + (float)(_S0 * v46)) + (float)(_S24 * v47);
          v107 = (float)((float)(v50 * _S5) + (float)(_S0 * v49)) + (float)(_S24 * v51);
          _S0 = (float)((float)(v53 * _S5) + (float)(_S0 * v52)) + (float)(_S24 * v54);
          v109 = (float)(v48 * _S4) + (float)(_S6 * v46);
          v110 = (float)(v50 * _S4) + (float)(_S6 * v49);
          v111 = (float)(v53 * _S4) + (float)(_S6 * v52);
          LOWORD(_S6) = *((_WORD *)result + llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _S5 = v109 + (float)(_S6 * v47);
          _S24 = v110 + (float)(_S6 * v51);
          v115 = v111 + (float)(_S6 * v54);
          LOWORD(_S6) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v106, 0.0), 8191.0)));
          v116 = llroundf(fminf(fmaxf(_S0, 0.0), 8191.0));
          LOWORD(_S0) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v107, 0.0), 8191.0)));
          __asm
          {
            FCVT            S6, H6
            FCVT            S0, H0
          }
          LOWORD(_S5) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          LOWORD(_S24) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(_S24, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          v121 = llroundf(fminf(fmaxf(v115, 0.0), 8191.0));
          v122 = (float)(v44 * _S0) + (float)(v43 * _S6);
          v123 = (float)(v44 * _S24) + (float)(v43 * _S5);
          v124 = _S6 + _S5;
          LOWORD(_S6) = *(_WORD *)(v58 + 2 * v116);
          v125 = _S0 + _S24;
          LOWORD(_S24) = *(_WORD *)(v58 + 2 * v121);
          __asm
          {
            FCVT            S6, H6
            FCVT            S24, H24
          }
          v128 = (float)(v122 + (float)(v45 * _S6)) + v38;
          v129 = v123 + (float)(v45 * _S24);
          v130 = _S6 + _S24;
          v131 = (float)(v39 + (float)(v124 * v153)) + (float)(v125 * v152);
          v132 = (float)(v39 + (float)(v124 * v150)) + (float)(v125 * v149);
          if (v128 < v38)
            v133 = v38;
          else
            v133 = v128;
          v77 = v128 <= v40;
          v134 = v131 + (float)(v130 * v151);
          if (!v77)
            v133 = v40;
          v135 = llroundf(v133);
          if (v134 < v41)
            v136 = v41;
          else
            v136 = v131 + (float)(v130 * v151);
          if (v134 <= v42)
            v137 = v136;
          else
            v137 = v42;
          v138 = llroundf(v137);
          v139 = v132 + (float)(v130 * v148);
          if ((float)(v129 + v38) < v38)
            v140 = v38;
          else
            v140 = v129 + v38;
          *v69 = v135;
          v69[1] = v138;
          if ((float)(v129 + v38) <= v40)
            v141 = v140;
          else
            v141 = v40;
          v69[2] = llroundf(v141);
          v142 = v42;
          if (v139 <= v42)
          {
            v142 = v139;
            if (v139 < v41)
              v142 = v41;
          }
          v69[3] = llroundf(v142);
          if (v68)
            *v68++ = 0;
          v65 += 2;
          v66 += 2;
          v69 += 4;
        }
        while (v19 > v65);
      }
      v63 += v26;
      v62 += v27;
      v60 += v31;
      ++v18;
    }
    while (v18 != v22);
    if (v29 && v17)
    {
      v143 = 0;
      do
      {
        if (v19)
        {
          v144 = v19;
          v145 = v15;
          v146 = (unsigned __int16 *)v30;
          do
          {
            v147 = *v146++;
            *v145++ = llroundf((float)v147 * 0.0038911);
            --v144;
          }
          while (v144);
        }
        v30 += v28;
        v15 += v13;
        ++v143;
      }
      while (v143 != v22);
    }
    else if (v17)
    {
      do
      {
        if (v19)
          result = memset(v15, 255, v19);
        v15 += v13;
        --v22;
      }
      while (v22);
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_rgb_yuvsf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_rgb_yuvsf_GCD);
  return 0;
}

_QWORD *vt_Copy_xf444_rgb_yuvsf_GCD(_QWORD *result, uint64_t a2, double a3, double a4, double a5, float a6, float a7)
{
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  _WORD *v24;
  uint64_t v25;
  size_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  char v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  char v74;
  _BYTE *v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  size_t v79;
  unsigned __int16 *v80;
  unsigned __int16 *v81;
  _WORD *v82;
  _BYTE *v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  uint64_t v115;
  size_t v116;
  _BYTE *v117;
  unsigned __int16 *v118;
  unsigned int v119;

  v12 = *(_QWORD *)((char *)result + 28);
  v13 = *(unsigned __int8 *)result;
  v14 = v12 * a2 / v13;
  v15 = v12 + v12 * a2;
  v16 = result[14];
  v17 = (_QWORD *)result[16];
  v18 = result[13] * a2 / v13 + result[15];
  v19 = (uint64_t *)result[17];
  v20 = v19[1];
  v21 = v17[1];
  v22 = (_BYTE *)(v21 + v20 * v18 + v16);
  v23 = v15 / v13;
  if (v21)
    v24 = (_WORD *)(v21 + v20 * v18 + v16);
  else
    v24 = 0;
  if (v23 == v14)
    return result;
  v25 = 0;
  v26 = *(_QWORD *)((char *)result + 20);
  v27 = *(_QWORD *)((char *)result + 36);
  v28 = v14 + *(_QWORD *)((char *)result + 44);
  v29 = v23 - v14;
  v30 = result[19];
  v31 = (_QWORD *)result[7];
  v32 = (uint64_t *)result[8];
  v33 = *v32;
  v34 = v32[1];
  v35 = v32[2];
  v36 = v31[2];
  LOWORD(a6) = *(_WORD *)(v30 + 140);
  LOWORD(a7) = *(_WORD *)(v30 + 142);
  v37 = (float)*(unsigned int *)(v30 + 136) / (float)*(unsigned int *)(v30 + 128);
  v38 = *(float *)v30;
  v39 = *(float *)(v30 + 8);
  v40 = *(float *)(v30 + 16);
  v41 = *(float *)(v30 + 20);
  v42 = *(float *)(v30 + 28);
  LOWORD(v7) = *(_WORD *)(v30 + 144);
  LOWORD(v8) = *(_WORD *)(v30 + 146);
  LOWORD(v9) = *(_WORD *)(v30 + 148);
  LOWORD(v10) = *(_WORD *)(v30 + 150);
  LOWORD(v11) = *(_WORD *)(v30 + 152);
  v43 = *(float *)(v30 + 36);
  v44 = *(float *)(v30 + 40);
  v45 = *(float *)(v30 + 44);
  v46 = *(float *)(v30 + 48);
  v47 = *(float *)(v30 + 52);
  v48 = *(float *)(v30 + 56);
  v49 = *(float *)(v30 + 60);
  v50 = *(float *)(v30 + 64);
  v51 = *(float *)(v30 + 68);
  LODWORD(v30) = *(unsigned __int8 *)(v30 + 124);
  v52 = 16 - v30;
  v53 = v30 >= 0x11;
  v54 = v36 + v35 * v28 + 2 * v27;
  v55 = *v19;
  v56 = (float)LODWORD(a6);
  v57 = (float)LODWORD(a7);
  v58 = v37 * v38;
  v59 = v37 * v39;
  v60 = v37 * v40;
  v61 = v37 * v41;
  v62 = v37 * v42;
  v63 = (float)v7;
  v64 = (float)v8;
  v65 = (float)v9;
  v66 = (float)v10;
  v67 = (float)v11;
  v68 = v46 * 0.5;
  v69 = v47 * 0.5;
  v70 = v48 * 0.5;
  v71 = v49 * 0.5;
  v72 = v50 * 0.5;
  v73 = v51 * 0.5;
  if (v53)
    v74 = 0;
  else
    v74 = v52;
  v75 = (_BYTE *)(*v17 + v55 * v18 + v16);
  v76 = v31[1];
  if (v76)
    v77 = v76 + v34 * v28 + 2 * v27;
  else
    v77 = 0;
  result = (_QWORD *)(*v31 + v33 * v28 + 2 * v27);
  v78 = v74;
  do
  {
    if (v26)
    {
      v79 = 0;
      v80 = (unsigned __int16 *)result;
      v81 = (unsigned __int16 *)v77;
      v82 = v24;
      v83 = v75;
      while (1)
      {
        v84 = 0.0;
        if (!v81)
          break;
        v85 = (float)(*v81 >> v78) - v57;
        v86 = (float)(v81[1] >> v78) - v57;
        v81 += 2;
        v87 = v59 * v86;
        v88 = (float)(v61 * v86) + (float)(v85 * v60);
        v89 = v62 * v85;
        if (!v81)
          goto LABEL_18;
        v90 = (float)(*v81 >> v78) - v57;
        v91 = (float)(v81[1] >> v78) - v57;
        v81 += 2;
        v92 = v59 * v91;
        v93 = (float)(v61 * v91) + (float)(v90 * v60);
        v84 = v62 * v90;
LABEL_19:
        v94 = v58 * (float)((float)(*v80 >> v78) - v56);
        v95 = v87 + v94;
        v96 = v88 + v94;
        v97 = v89 + v94;
        v98 = v58 * (float)((float)(v80[1] >> v78) - v56);
        v99 = v92 + v98;
        v100 = v93 + v98;
        v101 = v84 + v98;
        v102 = (float)((float)((float)(v44 * v96) + (float)(v43 * v95)) + (float)(v45 * v97)) + v63;
        v103 = (float)((float)((float)(v44 * v100) + (float)(v43 * v99)) + (float)(v45 * v101)) + v63;
        v104 = v95 + v99;
        v105 = v96 + v100;
        v106 = v97 + v101;
        v107 = (float)((float)(v64 + (float)(v104 * v68)) + (float)(v105 * v69)) + (float)(v106 * v70);
        v108 = (float)(v64 + (float)(v104 * v71)) + (float)(v105 * v72);
        if (v102 < v63)
          v109 = v63;
        else
          v109 = v102;
        if (v102 > v65)
          v109 = v65;
        v110 = v108 + (float)(v106 * v73);
        *v83 = llroundf(v109);
        if (v107 < v66)
          v111 = v66;
        else
          v111 = v107;
        if (v107 <= v67)
          v112 = v111;
        else
          v112 = v67;
        v83[1] = llroundf(v112);
        if (v103 < v63)
          v113 = v63;
        else
          v113 = v103;
        if (v103 > v65)
          v113 = v65;
        v83[2] = llroundf(v113);
        v114 = v67;
        if (v110 <= v67)
        {
          v114 = v110;
          if (v110 < v66)
            v114 = v66;
        }
        v83[3] = llroundf(v114);
        if (v82)
          *v82++ = 0;
        v79 += 2;
        v80 += 2;
        v83 += 4;
        if (v26 <= v79)
          goto LABEL_41;
      }
      v89 = 0.0;
      v88 = 0.0;
      v87 = 0.0;
LABEL_18:
      v93 = 0.0;
      v92 = 0.0;
      goto LABEL_19;
    }
LABEL_41:
    result = (_QWORD *)((char *)result + v33);
    v77 += v34;
    v75 += v55;
    ++v25;
  }
  while (v25 != v29);
  if (v36 && v24)
  {
    v115 = 0;
    do
    {
      if (v26)
      {
        v116 = v26;
        v117 = v22;
        v118 = (unsigned __int16 *)v54;
        do
        {
          v119 = *v118++;
          *v117++ = llroundf((float)v119 * 0.0038911);
          --v116;
        }
        while (v116);
      }
      v54 += v35;
      v22 += v20;
      ++v115;
    }
    while (v115 != v29);
  }
  else if (v24)
  {
    do
    {
      if (v26)
        result = memset(v22, 255, v26);
      v22 += v20;
      --v29;
    }
    while (v29);
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Tone_Mat_TRC_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v20 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v18 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Tone_Mat_TRC_xf422_GCD);
  return 0;
}

_QWORD *vt_Copy_xf444_TRC_Tone_Mat_TRC_xf422_GCD(_QWORD *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  unsigned int v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  char v53;
  unsigned int v54;
  char v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _WORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  char v67;
  float v68;
  float v69;
  float v70;
  float v71;
  unint64_t v72;
  unsigned __int16 *v73;
  unsigned __int16 *v74;
  _WORD *v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  BOOL v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  unsigned int v106;
  float v113;
  float v114;
  float v115;
  float v116;
  float v121;
  float v122;
  float v125;
  float v126;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v144;
  float v145;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  _WORD *v156;
  float v157;
  float v158;
  size_t v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;

  v5 = *(_QWORD *)((char *)result + 28);
  v6 = *(unsigned __int8 *)result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)((char *)result + 20);
    v11 = *(_QWORD *)((char *)result + 36);
    v12 = v7 + *(_QWORD *)((char *)result + 44);
    v13 = v8 - v7;
    v14 = result[14];
    v15 = (_QWORD *)result[16];
    v16 = result[13] * a2 / v6 + result[15];
    v17 = result[19];
    v18 = (uint64_t *)result[7];
    v19 = (uint64_t *)result[8];
    v20 = (uint64_t *)result[17];
    v21 = *v19;
    v22 = v19[1];
    v23 = v19[2];
    v24 = v18[2];
    v25 = (char *)(v24 + v23 * v12 + 2 * v11);
    v26 = *v20;
    v27 = v20[1];
    v28 = v20[2];
    v29 = v15[2];
    v30 = (char *)(v29 + v28 * v16 + 2 * v14);
    LOWORD(a4) = *(_WORD *)(v17 + 140);
    LOWORD(a5) = *(_WORD *)(v17 + 142);
    v31 = 8191.0 / (float)*(unsigned int *)(v17 + 128);
    v32 = (float)LODWORD(a4);
    v33 = (float)LODWORD(a5);
    v34 = v31 * *(float *)v17;
    v172 = v31 * *(float *)(v17 + 16);
    v173 = v31 * *(float *)(v17 + 8);
    v35 = v31 * *(float *)(v17 + 20);
    *(float *)&v36 = v31 * *(float *)(v17 + 28);
    v170 = *(float *)&v36;
    v171 = v35;
    LOWORD(v36) = *(_WORD *)(v17 + 144);
    v37 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v17 + 146);
    v38 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v17 + 148);
    v39 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v17 + 150);
    v40 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v17 + 152);
    v41 = (float)v36;
    v42 = *(float *)(v17 + 36);
    v174 = v40;
    v175 = *(float *)(v17 + 40);
    v43 = *(float *)(v17 + 44);
    v168 = *(float *)(v17 + 48) * 0.5;
    v169 = v38;
    v166 = *(float *)(v17 + 56) * 0.5;
    v167 = *(float *)(v17 + 52) * 0.5;
    v164 = *(float *)(v17 + 64) * 0.5;
    v165 = *(float *)(v17 + 60) * 0.5;
    v162 = *(float *)(v17 + 68) * 0.5;
    v163 = *(float *)(v17 + 72);
    v44 = *(float *)(v17 + 84);
    v160 = *(float *)(v17 + 80);
    v161 = *(float *)(v17 + 76);
    v45 = *(float *)(v17 + 88);
    v46 = *(float *)(v17 + 92);
    v47 = *(float *)(v17 + 96);
    v48 = *(float *)(v17 + 100);
    v49 = *(float *)(v17 + 104);
    v50 = v17 + 164;
    v51 = v17 + 16548;
    v52 = *(unsigned __int8 *)(v17 + 132);
    v53 = 16 - v52;
    if (v52 >= 0x11)
      v53 = 0;
    v54 = *(unsigned __int8 *)(v17 + 124);
    v55 = 16 - v54;
    if (v54 >= 0x11)
      v55 = 0;
    v56 = v15[1];
    _ZF = v56 == 0;
    v58 = v56 + v27 * v16;
    v59 = *v15 + v26 * v16;
    result = (_QWORD *)(v17 + 32932);
    v60 = v58 + 2 * v14;
    if (_ZF)
      v60 = 0;
    v61 = (_WORD *)(v59 + 2 * v14);
    v63 = *v18;
    v62 = v18[1];
    v64 = v62 + v22 * v12 + 2 * v11;
    if (!v62)
      v64 = 0;
    v65 = v63 + v21 * v12 + 2 * v11;
    v66 = v55;
    v67 = v53;
    v68 = *(float *)(v17 + 108);
    v69 = *(float *)(v17 + 112);
    v70 = *(float *)(v17 + 116);
    v71 = *(float *)(v17 + 120);
    do
    {
      if (v10)
      {
        v72 = 0;
        v73 = (unsigned __int16 *)v65;
        v74 = (unsigned __int16 *)v64;
        v75 = v61;
        do
        {
          if (v74)
          {
            v76 = (float)(*v74 >> v66) - v33;
            v77 = (float)(v74[1] >> v66) - v33;
            v74 += 2;
            v78 = v173 * v77;
            v79 = (float)(v171 * v77) + (float)(v76 * v172);
            v80 = v170 * v76;
          }
          else
          {
            v80 = 0.0;
            v79 = 0.0;
            v78 = 0.0;
          }
          v81 = v34 * (float)((float)(*v73 >> v66) - v32);
          v82 = v78 + v81;
          v83 = (float)(v78 + v81) <= 8191.0;
          v84 = 8191.0;
          if (v83)
          {
            v84 = v82;
            if (v82 < 0.0)
              v84 = 0.0;
          }
          v85 = 8191.0;
          if ((float)(v79 + v81) <= 8191.0)
          {
            v85 = v79 + v81;
            if ((float)(v79 + v81) < 0.0)
              v85 = 0.0;
          }
          v86 = v80 + v81;
          v87 = 8191.0;
          if (v86 <= 8191.0)
          {
            v87 = v86;
            if (v86 < 0.0)
              v87 = 0.0;
          }
          if (v74)
          {
            v88 = (float)(*v74 >> v66) - v33;
            v89 = (float)(v74[1] >> v66) - v33;
            v74 += 2;
            v90 = v173 * v89;
            v91 = (float)(v171 * v89) + (float)(v88 * v172);
            v92 = v170 * v88;
          }
          else
          {
            v92 = 0.0;
            v91 = 0.0;
            v90 = 0.0;
          }
          v93 = v34 * (float)((float)(v73[1] >> v66) - v32);
          v94 = v90 + v93;
          v83 = (float)(v90 + v93) <= 8191.0;
          v95 = 8191.0;
          if (v83)
          {
            v95 = v94;
            if (v94 < 0.0)
              v95 = 0.0;
          }
          v96 = v91 + v93;
          v83 = (float)(v91 + v93) <= 8191.0;
          v97 = 8191.0;
          if (v83)
          {
            v97 = v96;
            if (v96 < 0.0)
              v97 = 0.0;
          }
          v98 = v92 + v93;
          v99 = 8191.0;
          if (v98 <= 8191.0)
          {
            v99 = v98;
            if (v98 < 0.0)
              v99 = 0.0;
          }
          _H0 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          _H1 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          v106 = llroundf(fminf(fmaxf(v87, 0.0), 8191.0));
          __asm { FCVT            S4, H1 }
          _H1 = *(_WORD *)(v50 + 2 * v106);
          __asm { FCVT            S30, H1 }
          _H1 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v95, 0.0), 8191.0)));
          _H6 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v97, 0.0), 8191.0)));
          _H7 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v99, 0.0), 8191.0)));
          v113 = fmaxf(_S0, fmaxf(_S4, _S30));
          v114 = (float)((float)((float)(v69 * _S4) + (float)(v68 * _S0)) + (float)(v70 * _S30)) + (float)(v71 * v113);
          v115 = 8191.0;
          if (v114 <= 8191.0)
          {
            v115 = (float)((float)((float)(v69 * _S4) + (float)(v68 * _S0)) + (float)(v70 * _S30)) + (float)(v71 * v113);
            if (v114 < 0.0)
              v115 = 0.0;
          }
          v116 = v42;
          __asm
          {
            FCVT            S1, H1
            FCVT            S6, H6
            FCVT            S7, H7
          }
          _H19 = *(_WORD *)(v51 + 2 * llroundf(v115));
          v121 = (float)((float)((float)(v69 * _S6) + (float)(v68 * _S1)) + (float)(v70 * _S7))
               + (float)(v71 * fmaxf(_S1, fmaxf(_S6, _S7)));
          v122 = 8191.0;
          if (v121 <= 8191.0)
          {
            v122 = v121;
            if (v121 < 0.0)
              v122 = 0.0;
          }
          __asm { FCVT            S3, H19 }
          _S0 = _S0 * _S3;
          v125 = _S4 * _S3;
          v126 = _S30 * _S3;
          _H17 = *(_WORD *)(v51 + 2 * llroundf(v122));
          __asm { FCVT            S17, H17 }
          _S1 = _S1 * _S17;
          v130 = _S6 * _S17;
          v131 = _S7 * _S17;
          v132 = (float)((float)(v161 * v125) + (float)(_S0 * v163)) + (float)(v126 * v160);
          v133 = (float)((float)(v45 * v125) + (float)(_S0 * v44)) + (float)(v126 * v46);
          v134 = (float)((float)(v48 * v125) + (float)(_S0 * v47)) + (float)(v126 * v49);
          v135 = (float)((float)(v161 * v130) + (float)(_S1 * v163)) + (float)(v131 * v160);
          v136 = (float)((float)(v45 * v130) + (float)(_S1 * v44)) + (float)(v131 * v46);
          v137 = (float)((float)(v48 * v130) + (float)(_S1 * v47)) + (float)(v131 * v49);
          LOWORD(_S0) = *((_WORD *)result + llroundf(fminf(fmaxf(v132, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          LOWORD(_S1) = *((_WORD *)result + llroundf(fminf(fmaxf(v133, 0.0), 8191.0)));
          __asm { FCVT            S4, H1 }
          LOWORD(_S1) = *((_WORD *)result + llroundf(fminf(fmaxf(v134, 0.0), 8191.0)));
          __asm { FCVT            S30, H1 }
          _H1 = *((_WORD *)result + llroundf(fminf(fmaxf(v135, 0.0), 8191.0)));
          _H6 = *((_WORD *)result + llroundf(fminf(fmaxf(v136, 0.0), 8191.0)));
          _H19 = *((_WORD *)result + llroundf(fminf(fmaxf(v137, 0.0), 8191.0)));
          v42 = v116;
          v144 = (float)((float)((float)(v175 * _S4) + (float)(v116 * _S0)) + (float)(v43 * _S30)) + v37;
          v145 = v39;
          if (v144 <= v39)
          {
            v145 = (float)((float)((float)(v175 * _S4) + (float)(v116 * _S0)) + (float)(v43 * _S30)) + v37;
            if (v144 < v37)
              v145 = v37;
          }
          __asm
          {
            FCVT            S7, H1
            FCVT            S6, H6
            FCVT            S1, H19
          }
          v149 = (float)((float)((float)(v175 * _S6) + (float)(v116 * _S7)) + (float)(v43 * _S1)) + v37;
          *v75 = llroundf(v145) << v67;
          v150 = v39;
          if (v149 <= v39)
          {
            v150 = (float)((float)((float)(v175 * _S6) + (float)(v116 * _S7)) + (float)(v43 * _S1)) + v37;
            if (v149 < v37)
              v150 = v37;
          }
          v75[1] = llroundf(v150) << v67;
          v151 = _S0 + _S7;
          v152 = _S4 + _S6;
          v153 = _S30 + _S1;
          v154 = (float)((float)(v169 + (float)(v151 * v168)) + (float)(v152 * v167)) + (float)(v153 * v166);
          v155 = v41;
          if (v154 <= v41)
          {
            v155 = (float)((float)(v169 + (float)(v151 * v168)) + (float)(v152 * v167)) + (float)(v153 * v166);
            if (v154 < v174)
              v155 = v174;
          }
          v156 = (_WORD *)(v60 + 2 * v72);
          v157 = (float)((float)(v169 + (float)(v151 * v165)) + (float)(v152 * v164)) + (float)(v153 * v162);
          *v156 = llroundf(v155) << v67;
          v158 = v41;
          if (v157 <= v41)
          {
            v158 = v157;
            if (v157 < v174)
              v158 = v174;
          }
          v156[1] = llroundf(v158) << v67;
          v72 += 2;
          v73 += 2;
          v75 += 2;
        }
        while (v10 > v72);
      }
      v65 += v21;
      v64 += v22;
      v61 = (_WORD *)((char *)v61 + v26);
      v60 += v27;
      ++v9;
    }
    while (v9 != v13);
    if (v24 && v29)
    {
      v159 = 2 * v10;
      do
      {
        result = memcpy(v30, v25, v159);
        v25 += v23;
        v30 += v28;
        --v13;
      }
      while (v13);
    }
    else if (v29)
    {
      do
      {
        if (v10)
          result = memset(v30, 255, 2 * v10);
        v30 += v28;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Mat_TRC_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v20 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v18 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Mat_TRC_xf422_GCD);
  return 0;
}

_QWORD *vt_Copy_xf444_TRC_Mat_TRC_xf422_GCD(_QWORD *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  unsigned int v36;
  float v37;
  float v38;
  float v39;
  unsigned int v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  char v58;
  char v59;
  unsigned int v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  char v73;
  unint64_t v74;
  unsigned __int16 *v75;
  unsigned __int16 *v76;
  _WORD *v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  BOOL v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v127;
  float v128;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  _WORD *v139;
  float v140;
  float v141;
  size_t v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;

  v5 = *(_QWORD *)((char *)result + 28);
  v6 = *(unsigned __int8 *)result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)((char *)result + 20);
    v11 = *(_QWORD *)((char *)result + 36);
    v12 = v7 + *(_QWORD *)((char *)result + 44);
    v13 = v8 - v7;
    v14 = result[14];
    v15 = (_QWORD *)result[16];
    v16 = result[13] * a2 / v6 + result[15];
    v17 = result[19];
    v18 = (_QWORD *)result[7];
    v19 = (uint64_t *)result[8];
    v20 = (uint64_t *)result[17];
    v21 = *v19;
    v22 = v19[1];
    v23 = v19[2];
    v24 = v18[2];
    v25 = (char *)(v24 + v23 * v12 + 2 * v11);
    v26 = *v20;
    v27 = v20[1];
    v28 = v20[2];
    v29 = v15[2];
    v30 = (char *)(v29 + v28 * v16 + 2 * v14);
    LOWORD(a4) = *(_WORD *)(v17 + 140);
    LOWORD(a5) = *(_WORD *)(v17 + 142);
    v31 = 8191.0 / (float)*(unsigned int *)(v17 + 128);
    v32 = (float)LODWORD(a4);
    v33 = (float)LODWORD(a5);
    v34 = v31 * *(float *)v17;
    v151 = v31 * *(float *)(v17 + 16);
    v152 = v31 * *(float *)(v17 + 8);
    v35 = v31 * *(float *)(v17 + 20);
    *(float *)&v36 = v31 * *(float *)(v17 + 28);
    v149 = *(float *)&v36;
    v150 = v35;
    LOWORD(v36) = *(_WORD *)(v17 + 144);
    v37 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v17 + 146);
    v38 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v17 + 148);
    v39 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v17 + 150);
    *(float *)&v40 = (float)v36;
    v153 = *(float *)&v40;
    LOWORD(v40) = *(_WORD *)(v17 + 152);
    v41 = (float)v40;
    v42 = *(float *)(v17 + 36);
    v43 = *(float *)(v17 + 40);
    v44 = *(float *)(v17 + 44);
    v147 = *(float *)(v17 + 52) * 0.5;
    v148 = *(float *)(v17 + 48) * 0.5;
    v145 = *(float *)(v17 + 60) * 0.5;
    v146 = *(float *)(v17 + 56) * 0.5;
    v45 = *(float *)(v17 + 72);
    v143 = *(float *)(v17 + 68) * 0.5;
    v144 = *(float *)(v17 + 64) * 0.5;
    v47 = *(float *)(v17 + 76);
    v46 = *(float *)(v17 + 80);
    v48 = *(float *)(v17 + 84);
    v49 = *(float *)(v17 + 88);
    v50 = *(float *)(v17 + 92);
    v51 = *(float *)(v17 + 96);
    v52 = *(float *)(v17 + 100);
    v53 = *(float *)(v17 + 104);
    v54 = v17 + 164;
    v55 = v17 + 16548;
    v56 = *(unsigned __int8 *)(v17 + 132);
    _CF = v56 >= 0x11;
    v58 = 16 - v56;
    if (_CF)
      v59 = 0;
    else
      v59 = v58;
    v60 = *(unsigned __int8 *)(v17 + 124);
    v61 = 16 - v60;
    if (v60 >= 0x11)
      v61 = 0;
    v64 = v15;
    v63 = *v15;
    v62 = v64[1];
    _ZF = v62 == 0;
    result = (_QWORD *)(v62 + v27 * v16 + 2 * v14);
    if (_ZF)
      result = 0;
    v66 = v63 + v26 * v16 + 2 * v14;
    v69 = v18;
    v68 = *v18;
    v67 = v69[1];
    if (v67)
      v70 = v67 + v22 * v12 + 2 * v11;
    else
      v70 = 0;
    v71 = v68 + v21 * v12 + 2 * v11;
    v72 = v61;
    v73 = v59;
    do
    {
      if (v10)
      {
        v74 = 0;
        v75 = (unsigned __int16 *)v71;
        v76 = (unsigned __int16 *)v70;
        v77 = (_WORD *)v66;
        do
        {
          if (v76)
          {
            v78 = (float)(*v76 >> v72) - v33;
            v79 = (float)(v76[1] >> v72) - v33;
            v76 += 2;
            v80 = v152 * v79;
            v81 = (float)(v150 * v79) + (float)(v78 * v151);
            v82 = v149 * v78;
          }
          else
          {
            v82 = 0.0;
            v81 = 0.0;
            v80 = 0.0;
          }
          v83 = v34 * (float)((float)(*v75 >> v72) - v32);
          v84 = v80 + v83;
          v85 = (float)(v80 + v83) <= 8191.0;
          v86 = 8191.0;
          if (v85)
          {
            v86 = v84;
            if (v84 < 0.0)
              v86 = 0.0;
          }
          v87 = v81 + v83;
          v88 = 8191.0;
          if (v87 <= 8191.0)
          {
            v88 = v87;
            if (v87 < 0.0)
              v88 = 0.0;
          }
          v89 = 8191.0;
          if ((float)(v82 + v83) <= 8191.0)
          {
            v89 = v82 + v83;
            if ((float)(v82 + v83) < 0.0)
              v89 = 0.0;
          }
          if (v76)
          {
            v90 = (float)(*v76 >> v72) - v33;
            v91 = (float)(v76[1] >> v72) - v33;
            v76 += 2;
            v92 = v152 * v91;
            v93 = (float)(v150 * v91) + (float)(v90 * v151);
            v94 = v149 * v90;
          }
          else
          {
            v94 = 0.0;
            v93 = 0.0;
            v92 = 0.0;
          }
          v95 = v34 * (float)((float)(v75[1] >> v72) - v32);
          v96 = 8191.0;
          if ((float)(v92 + v95) <= 8191.0)
          {
            v96 = v92 + v95;
            if ((float)(v92 + v95) < 0.0)
              v96 = 0.0;
          }
          v97 = v93 + v95;
          v85 = (float)(v93 + v95) <= 8191.0;
          v98 = 8191.0;
          if (v85)
          {
            v98 = v97;
            if (v97 < 0.0)
              v98 = 0.0;
          }
          v99 = v94 + v95;
          v100 = 8191.0;
          if (v99 <= 8191.0)
          {
            v100 = v99;
            if (v99 < 0.0)
              v100 = 0.0;
          }
          _H0 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          _H5 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H24 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          _H6 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v96, 0.0), 8191.0)));
          _H4 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          __asm
          {
            FCVT            S6, H6
            FCVT            S4, H4
          }
          _H26 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v100, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          v115 = (float)((float)(v47 * _S5) + (float)(_S0 * v45)) + (float)(_S24 * v46);
          v116 = (float)((float)(v49 * _S5) + (float)(_S0 * v48)) + (float)(_S24 * v50);
          v117 = (float)((float)(v52 * _S5) + (float)(_S0 * v51)) + (float)(_S24 * v53);
          v118 = (float)((float)(v47 * _S4) + (float)(_S6 * v45)) + (float)(_S26 * v46);
          v119 = (float)((float)(v49 * _S4) + (float)(_S6 * v48)) + (float)(_S26 * v50);
          v120 = (float)((float)(v52 * _S4) + (float)(_S6 * v51)) + (float)(_S26 * v53);
          LOWORD(_S0) = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v115, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          LOWORD(_S4) = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v116, 0.0), 8191.0)));
          __asm { FCVT            S24, H4 }
          LOWORD(_S4) = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v117, 0.0), 8191.0)));
          __asm { FCVT            S26, H4 }
          _H4 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v118, 0.0), 8191.0)));
          _H5 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v119, 0.0), 8191.0)));
          _H28 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v120, 0.0), 8191.0)));
          v127 = (float)((float)((float)(v43 * _S24) + (float)(v42 * _S0)) + (float)(v44 * _S26)) + v37;
          v128 = v39;
          if (v127 <= v39)
          {
            v128 = (float)((float)((float)(v43 * _S24) + (float)(v42 * _S0)) + (float)(v44 * _S26)) + v37;
            if (v127 < v37)
              v128 = v37;
          }
          __asm
          {
            FCVT            S25, H4
            FCVT            S5, H5
            FCVT            S4, H28
          }
          v132 = (float)((float)((float)(v43 * _S5) + (float)(v42 * _S25)) + (float)(v44 * _S4)) + v37;
          *v77 = llroundf(v128) << v73;
          v133 = v39;
          if (v132 <= v39)
          {
            v133 = (float)((float)((float)(v43 * _S5) + (float)(v42 * _S25)) + (float)(v44 * _S4)) + v37;
            if (v132 < v37)
              v133 = v37;
          }
          v77[1] = llroundf(v133) << v73;
          v134 = _S0 + _S25;
          v135 = _S24 + _S5;
          v136 = _S26 + _S4;
          v137 = (float)((float)(v38 + (float)(v134 * v148)) + (float)(v135 * v147)) + (float)(v136 * v146);
          v138 = v41;
          if (v137 <= v41)
          {
            v138 = (float)((float)(v38 + (float)(v134 * v148)) + (float)(v135 * v147)) + (float)(v136 * v146);
            if (v137 < v153)
              v138 = v153;
          }
          v139 = (_WORD *)result + v74;
          v140 = (float)((float)(v38 + (float)(v134 * v145)) + (float)(v135 * v144)) + (float)(v136 * v143);
          *v139 = llroundf(v138) << v73;
          v141 = v41;
          if (v140 <= v41)
          {
            v141 = v140;
            if (v140 < v153)
              v141 = v153;
          }
          v139[1] = llroundf(v141) << v73;
          v74 += 2;
          v75 += 2;
          v77 += 2;
        }
        while (v10 > v74);
      }
      v71 += v21;
      v70 += v22;
      v66 += v26;
      result = (_QWORD *)((char *)result + v27);
      ++v9;
    }
    while (v9 != v13);
    if (v24 && v29)
    {
      v142 = 2 * v10;
      do
      {
        result = memcpy(v30, v25, v142);
        v25 += v23;
        v30 += v28;
        --v13;
      }
      while (v13);
    }
    else if (v29)
    {
      do
      {
        if (v10)
          result = memset(v30, 255, 2 * v10);
        v30 += v28;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_rgb_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v20 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v18 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_rgb_xf422_GCD);
  return 0;
}

_QWORD *vt_Copy_xf444_rgb_xf422_GCD(_QWORD *result, uint64_t a2, double a3, double a4, float a5)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  unsigned int v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  unsigned int v59;
  BOOL v60;
  char v61;
  char v62;
  unsigned int v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  char v73;
  unint64_t v74;
  unsigned __int16 *v75;
  unsigned __int16 *v76;
  _WORD *v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  _WORD *v105;
  float v106;
  float v107;
  size_t v108;

  v9 = *(_QWORD *)((char *)result + 28);
  v10 = *(unsigned __int8 *)result;
  v11 = v9 * a2 / v10;
  v12 = (v9 + v9 * a2) / v10;
  if (v12 == v11)
    return result;
  v13 = 0;
  v14 = *(_QWORD *)((char *)result + 20);
  v15 = *(_QWORD *)((char *)result + 36);
  v16 = v11 + *(_QWORD *)((char *)result + 44);
  v17 = v12 - v11;
  v18 = result[14];
  v19 = (uint64_t *)result[16];
  v20 = result[13] * a2 / v10 + result[15];
  v21 = result[19];
  v23 = (uint64_t *)result[7];
  v22 = (uint64_t *)result[8];
  v24 = (uint64_t *)result[17];
  v25 = *v22;
  v26 = v22[1];
  v27 = v22[2];
  v28 = v23[2];
  v29 = (char *)(v28 + v27 * v16 + 2 * v15);
  v30 = *v24;
  v31 = v24[1];
  v32 = v24[2];
  v33 = v19[2];
  v34 = (char *)(v33 + v32 * v20 + 2 * v18);
  *(float *)&v35 = (float)*(unsigned int *)(v21 + 136);
  LOWORD(a5) = *(_WORD *)(v21 + 140);
  v36 = *(float *)&v35 / (float)*(unsigned int *)(v21 + 128);
  v37 = (float)LODWORD(a5);
  LOWORD(v35) = *(_WORD *)(v21 + 142);
  v38 = (float)v35;
  v39 = v36 * *(float *)v21;
  v40 = v36 * *(float *)(v21 + 8);
  v41 = v36 * *(float *)(v21 + 16);
  v42 = v36 * *(float *)(v21 + 20);
  v43 = *(float *)(v21 + 28);
  v44 = v36 * v43;
  LOWORD(v43) = *(_WORD *)(v21 + 144);
  v45 = (float)LODWORD(v43);
  LOWORD(v5) = *(_WORD *)(v21 + 146);
  v46 = (float)v5;
  LOWORD(v6) = *(_WORD *)(v21 + 148);
  v47 = (float)v6;
  LOWORD(v7) = *(_WORD *)(v21 + 150);
  v48 = (float)v7;
  LOWORD(v8) = *(_WORD *)(v21 + 152);
  v49 = (float)v8;
  v50 = *(float *)(v21 + 36);
  v51 = *(float *)(v21 + 40);
  v52 = *(float *)(v21 + 44);
  v53 = *(float *)(v21 + 48) * 0.5;
  v54 = *(float *)(v21 + 52) * 0.5;
  v55 = *(float *)(v21 + 56) * 0.5;
  v56 = *(float *)(v21 + 60) * 0.5;
  v57 = *(float *)(v21 + 64) * 0.5;
  v58 = *(float *)(v21 + 68) * 0.5;
  v59 = *(unsigned __int8 *)(v21 + 132);
  v60 = v59 >= 0x11;
  v61 = 16 - v59;
  if (v60)
    v62 = 0;
  else
    v62 = v61;
  v63 = *(unsigned __int8 *)(v21 + 124);
  v64 = 16 - v63;
  if (v63 >= 0x11)
    v64 = 0;
  v66 = *v19;
  v65 = v19[1];
  v67 = v65 + v31 * v20 + 2 * v18;
  if (!v65)
    v67 = 0;
  v68 = v66 + v30 * v20 + 2 * v18;
  v70 = *v23;
  v69 = v23[1];
  v71 = v69 + v26 * v16 + 2 * v15;
  if (!v69)
    v71 = 0;
  result = (_QWORD *)(v70 + v25 * v16 + 2 * v15);
  v72 = v64;
  v73 = v62;
  do
  {
    if (v14)
    {
      v74 = 0;
      v75 = (unsigned __int16 *)result;
      v76 = (unsigned __int16 *)v71;
      v77 = (_WORD *)v68;
      do
      {
        v78 = 0.0;
        if (v76)
        {
          v79 = (float)(*v76 >> v72) - v38;
          v80 = (float)(v76[1] >> v72) - v38;
          v76 += 2;
          v81 = v40 * v80;
          v82 = (float)(v42 * v80) + (float)(v79 * v41);
          v83 = v44 * v79;
          if (v76)
          {
            v84 = (float)(*v76 >> v72) - v38;
            v85 = (float)(v76[1] >> v72) - v38;
            v76 += 2;
            v86 = v40 * v85;
            v87 = (float)(v42 * v85) + (float)(v84 * v41);
            v78 = v44 * v84;
            goto LABEL_19;
          }
        }
        else
        {
          v83 = 0.0;
          v82 = 0.0;
          v81 = 0.0;
        }
        v87 = 0.0;
        v86 = 0.0;
LABEL_19:
        v88 = v39 * (float)((float)(*v75 >> v72) - v37);
        v89 = v81 + v88;
        v90 = v82 + v88;
        v91 = v83 + v88;
        v92 = (float)((float)((float)(v51 * v90) + (float)(v50 * v89)) + (float)(v52 * v91)) + v45;
        v93 = v47;
        if (v92 <= v47)
        {
          v93 = (float)((float)((float)(v51 * v90) + (float)(v50 * v89)) + (float)(v52 * v91)) + v45;
          if (v92 < v45)
            v93 = v45;
        }
        v94 = v39 * (float)((float)(v75[1] >> v72) - v37);
        v95 = v86 + v94;
        v96 = v87 + v94;
        v97 = v78 + v94;
        v98 = (float)((float)((float)(v51 * v96) + (float)(v50 * v95)) + (float)(v52 * v97)) + v45;
        *v77 = llroundf(v93) << v73;
        v99 = v47;
        if (v98 <= v47)
        {
          v99 = (float)((float)((float)(v51 * v96) + (float)(v50 * v95)) + (float)(v52 * v97)) + v45;
          if (v98 < v45)
            v99 = v45;
        }
        v77[1] = llroundf(v99) << v73;
        v100 = v89 + v95;
        v101 = v90 + v96;
        v102 = v91 + v97;
        v103 = (float)((float)(v46 + (float)(v100 * v53)) + (float)(v101 * v54)) + (float)(v102 * v55);
        v104 = v49;
        if (v103 <= v49)
        {
          v104 = (float)((float)(v46 + (float)(v100 * v53)) + (float)(v101 * v54)) + (float)(v102 * v55);
          if (v103 < v48)
            v104 = v48;
        }
        v105 = (_WORD *)(v67 + 2 * v74);
        v106 = (float)((float)(v46 + (float)(v100 * v56)) + (float)(v101 * v57)) + (float)(v102 * v58);
        *v105 = llroundf(v104) << v73;
        v107 = v49;
        if (v106 <= v49)
        {
          v107 = v106;
          if (v106 < v48)
            v107 = v48;
        }
        v105[1] = llroundf(v107) << v73;
        v74 += 2;
        v75 += 2;
        v77 += 2;
      }
      while (v14 > v74);
    }
    result = (_QWORD *)((char *)result + v25);
    v71 += v26;
    v68 += v30;
    v67 += v31;
    ++v13;
  }
  while (v13 != v17);
  if (v28 && v33)
  {
    v108 = 2 * v14;
    do
    {
      result = memcpy(v34, v29, v108);
      v29 += v27;
      v34 += v32;
      --v17;
    }
    while (v17);
  }
  else if (v33)
  {
    do
    {
      if (v14)
        result = memset(v34, 255, 2 * v14);
      v34 += v32;
      --v17;
    }
    while (v17);
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Tone_Mat_TRC_v216(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Tone_Mat_TRC_v216_GCD);
  return 0;
}

_QWORD *vt_Copy_xf444_TRC_Tone_Mat_TRC_v216_GCD(_QWORD *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  float v33;
  float v34;
  float v35;
  unsigned int v36;
  float v37;
  float v38;
  float v39;
  unsigned int v40;
  float v41;
  float v42;
  float v43;
  float v44;
  uint64_t v45;
  unsigned int v46;
  char v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  char v57;
  float v58;
  float v59;
  float v60;
  float v61;
  unint64_t v62;
  unsigned __int16 *v63;
  unsigned __int16 *v64;
  _DWORD *v65;
  _WORD *v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  BOOL v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  unsigned int v99;
  float v106;
  float v107;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v120;
  float v123;
  float v124;
  float v126;
  float v127;
  float v128;
  float v130;
  float v131;
  unsigned int v137;
  float v138;
  float v140;
  float v141;
  float v142;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  __int16 v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  size_t v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;

  v5 = *(_QWORD *)((char *)result + 28);
  v6 = *(unsigned __int8 *)result;
  v7 = v5 * a2 / v6;
  v8 = v5 + v5 * a2;
  v9 = result[14];
  v10 = result[13] * a2 / v6;
  v11 = (_QWORD *)result[16];
  v12 = v10 + result[15];
  v13 = (uint64_t *)result[17];
  v14 = v13[1];
  v15 = v11[1];
  v16 = (char *)(v15 + v14 * v12 + 2 * v9);
  v17 = v8 / v6;
  if (v15)
    v18 = v15 + v14 * v12 + 2 * v9;
  else
    v18 = 0;
  if (v17 != v7)
  {
    v19 = 0;
    v20 = *(_QWORD *)((char *)result + 20);
    v21 = *(_QWORD *)((char *)result + 36);
    v22 = v7 + *(_QWORD *)((char *)result + 44);
    v23 = v17 - v7;
    v24 = result[19];
    v25 = (_QWORD *)result[7];
    v26 = (uint64_t *)result[8];
    v27 = *v26;
    v28 = v26[1];
    v29 = v26[2];
    v30 = v25[2];
    v31 = (char *)(v30 + v29 * v22 + 2 * v21);
    v32 = *v13;
    LOWORD(a4) = *(_WORD *)(v24 + 140);
    LOWORD(a5) = *(_WORD *)(v24 + 142);
    v33 = 8191.0 / (float)*(unsigned int *)(v24 + 128);
    v34 = (float)LODWORD(a4);
    v35 = v33 * *(float *)v24;
    v174 = v33 * *(float *)(v24 + 16);
    v175 = v33 * *(float *)(v24 + 8);
    v173 = v33 * *(float *)(v24 + 20);
    *(float *)&v36 = v33 * *(float *)(v24 + 28);
    v171 = (float)LODWORD(a5);
    v172 = *(float *)&v36;
    LOWORD(v36) = *(_WORD *)(v24 + 144);
    v37 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v24 + 146);
    v38 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v24 + 148);
    v39 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v24 + 150);
    *(float *)&v40 = (float)v36;
    v176 = *(float *)&v40;
    LOWORD(v40) = *(_WORD *)(v24 + 152);
    v41 = (float)v40;
    v42 = *(float *)(v24 + 36);
    v43 = *(float *)(v24 + 40);
    v44 = *(float *)(v24 + 44);
    v170 = *(float *)(v24 + 48) * 0.5;
    v168 = *(float *)(v24 + 56) * 0.5;
    v169 = *(float *)(v24 + 52) * 0.5;
    v166 = *(float *)(v24 + 64) * 0.5;
    v167 = *(float *)(v24 + 60) * 0.5;
    v164 = *(float *)(v24 + 68) * 0.5;
    v165 = *(float *)(v24 + 72);
    v162 = *(float *)(v24 + 80);
    v163 = *(float *)(v24 + 76);
    v160 = *(float *)(v24 + 88);
    v161 = *(float *)(v24 + 84);
    v158 = *(float *)(v24 + 96);
    v159 = *(float *)(v24 + 92);
    v156 = *(float *)(v24 + 104);
    v157 = *(float *)(v24 + 100);
    v45 = v24 + 164;
    v46 = *(unsigned __int8 *)(v24 + 124);
    v47 = 16 - v46;
    _CF = v46 >= 0x11;
    v49 = v24 + 16548;
    v50 = *v11 + v32 * v12;
    v51 = v24 + 32932;
    if (_CF)
      v52 = 0;
    else
      v52 = v47;
    result = (_QWORD *)(v50 + 2 * v9);
    v53 = v25[1];
    _ZF = v53 == 0;
    v55 = v53 + v28 * v22 + 2 * v21;
    if (_ZF)
      v55 = 0;
    v56 = *v25 + v27 * v22 + 2 * v21;
    v57 = v52;
    v58 = *(float *)(v24 + 108);
    v59 = *(float *)(v24 + 112);
    v60 = *(float *)(v24 + 116);
    v61 = *(float *)(v24 + 120);
    do
    {
      if (v20)
      {
        v62 = 0;
        v63 = (unsigned __int16 *)v56;
        v64 = (unsigned __int16 *)v55;
        v65 = (_DWORD *)v18;
        v66 = result;
        do
        {
          if (v64)
          {
            v67 = (float)(*v64 >> v57) - v171;
            v68 = (float)(v64[1] >> v57) - v171;
            v64 += 2;
            v69 = v175 * v68;
            v70 = (float)(v173 * v68) + (float)(v67 * v174);
            v71 = v172 * v67;
          }
          else
          {
            v71 = 0.0;
            v70 = 0.0;
            v69 = 0.0;
          }
          v72 = v35 * (float)((float)(*v63 >> v57) - v34);
          v73 = v69 + v72;
          v74 = (float)(v69 + v72) <= 8191.0;
          v75 = 8191.0;
          if (v74)
          {
            v75 = v73;
            if (v73 < 0.0)
              v75 = 0.0;
          }
          v76 = v70 + v72;
          v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            v77 = v76;
            if (v76 < 0.0)
              v77 = 0.0;
          }
          v78 = v71 + v72;
          v74 = (float)(v71 + v72) <= 8191.0;
          v79 = 8191.0;
          if (v74)
          {
            v79 = v78;
            if (v78 < 0.0)
              v79 = 0.0;
          }
          if (v64)
          {
            v80 = (float)(*v64 >> v57) - v171;
            v81 = (float)(v64[1] >> v57) - v171;
            v64 += 2;
            v82 = v175 * v81;
            v83 = (float)(v173 * v81) + (float)(v80 * v174);
            v84 = v172 * v80;
          }
          else
          {
            v84 = 0.0;
            v83 = 0.0;
            v82 = 0.0;
          }
          v85 = v34;
          v86 = v35;
          v87 = v35 * (float)((float)(v63[1] >> v57) - v34);
          v88 = v82 + v87;
          v74 = (float)(v82 + v87) <= 8191.0;
          v89 = 8191.0;
          if (v74)
          {
            v89 = v88;
            if (v88 < 0.0)
              v89 = 0.0;
          }
          v90 = v83 + v87;
          v74 = (float)(v83 + v87) <= 8191.0;
          v91 = 8191.0;
          if (v74)
          {
            v91 = v90;
            if (v90 < 0.0)
              v91 = 0.0;
          }
          v92 = v84 + v87;
          v93 = 8191.0;
          if (v92 <= 8191.0)
          {
            v93 = v92;
            if (v92 < 0.0)
              v93 = 0.0;
          }
          _H0 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          _H7 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          v99 = llroundf(fminf(fmaxf(v79, 0.0), 8191.0));
          __asm { FCVT            S4, H7 }
          _H7 = *(_WORD *)(v45 + 2 * v99);
          __asm { FCVT            S7, H7 }
          _H6 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          v106 = (float)((float)((float)(v59 * _S4) + (float)(v58 * _S0)) + (float)(v60 * _S7))
               + (float)(v61 * fmaxf(_S0, fmaxf(_S4, _S7)));
          v107 = 8191.0;
          if (v106 <= 8191.0)
          {
            v107 = v106;
            if (v106 < 0.0)
              v107 = 0.0;
          }
          __asm
          {
            FCVT            S3, H6
            FCVT            S6, H1
            FCVT            S30, H30
          }
          _H1 = *(_WORD *)(v49 + 2 * llroundf(v107));
          __asm { FCVT            S1, H1 }
          v113 = _S0 * _S1;
          v114 = _S4 * _S1;
          v115 = _S7 * _S1;
          v116 = (float)((float)((float)(v59 * _S6) + (float)(v58 * _S3)) + (float)(v60 * _S30))
               + (float)(v61 * fmaxf(_S3, fmaxf(_S6, _S30)));
          v117 = 8191.0;
          if (v116 <= 8191.0)
          {
            v117 = v116;
            if (v116 < 0.0)
              v117 = 0.0;
          }
          _H7 = *(_WORD *)(v49 + 2 * llroundf(v117));
          __asm { FCVT            S7, H7 }
          v120 = _S3 * _S7;
          _S6 = _S6 * _S7;
          _S7 = _S30 * _S7;
          v123 = (float)((float)(v163 * v114) + (float)(v113 * v165)) + (float)(v115 * v162);
          v124 = (float)((float)(v160 * v114) + (float)(v113 * v161)) + (float)(v115 * v159);
          _S0 = (float)((float)(v157 * v114) + (float)(v113 * v158)) + (float)(v115 * v156);
          v126 = (float)(v163 * _S6) + (float)(v120 * v165);
          v127 = (float)(v160 * _S6) + (float)(v120 * v161);
          v128 = (float)(v157 * _S6) + (float)(v120 * v158);
          _S1 = v126 + (float)(_S7 * v162);
          v130 = v127 + (float)(_S7 * v159);
          LOWORD(_S6) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v123, 0.0), 8191.0)));
          v131 = v128 + (float)(_S7 * v156);
          __asm { FCVT            S6, H6 }
          LOWORD(_S7) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v124, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          LOWORD(_S0) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          __asm { FCVT            S17, H0 }
          LOWORD(_S0) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          LOWORD(_S1) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v130, 0.0), 8191.0)));
          __asm { FCVT            S4, H1 }
          v137 = llroundf(fminf(fmaxf(v131, 0.0), 8191.0));
          v138 = (float)(v43 * _S7) + (float)(v42 * _S6);
          _S1 = _S6 + _S0;
          v140 = _S7 + _S4;
          v141 = (float)(v38 + (float)((float)(_S6 + _S0) * v170)) + (float)(v140 * v169);
          v142 = (float)(v38 + (float)(_S1 * v167)) + (float)(v140 * v166);
          LOWORD(_S1) = *(_WORD *)(v51 + 2 * v137);
          __asm { FCVT            S1, H1 }
          v144 = v138 + (float)(v44 * _S17);
          v145 = v141 + (float)((float)(_S17 + _S1) * v168);
          v146 = v142 + (float)((float)(_S17 + _S1) * v164);
          if (v145 < v37)
            v147 = v37;
          else
            v147 = v145;
          v74 = v145 <= v39;
          v148 = v144 + v37;
          if (!v74)
            v147 = v39;
          v149 = llroundf(v147);
          v150 = v176;
          if (v148 >= v176)
            v150 = v144 + v37;
          *v66 = v149;
          if (v148 <= v41)
            v151 = v150;
          else
            v151 = v41;
          v66[1] = llroundf(v151);
          v152 = v39;
          if (v146 <= v39)
          {
            v152 = v146;
            if (v146 < v37)
              v152 = v37;
          }
          v153 = (float)((float)((float)(v43 * _S4) + (float)(v42 * _S0)) + (float)(v44 * _S1)) + v37;
          v66[2] = llroundf(v152);
          v154 = v41;
          v34 = v85;
          v35 = v86;
          if (v153 <= v41)
          {
            v154 = v153;
            if (v153 < v176)
              v154 = v176;
          }
          v66[3] = llroundf(v154);
          if (v65)
            *v65++ = 0;
          v62 += 2;
          v63 += 2;
          v66 += 4;
        }
        while (v20 > v62);
      }
      v56 += v27;
      v55 += v28;
      result = (_QWORD *)((char *)result + v32);
      ++v19;
    }
    while (v19 != v23);
    if (v30 && v18)
    {
      v155 = 2 * v20;
      do
      {
        result = memcpy(v16, v31, v155);
        v31 += v29;
        v16 += v14;
        --v23;
      }
      while (v23);
    }
    else if (v18)
    {
      do
      {
        if (v20)
          result = memset(v16, 255, 2 * v20);
        v16 += v14;
        --v23;
      }
      while (v23);
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Mat_TRC_v216(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Mat_TRC_v216_GCD);
  return 0;
}

_QWORD *vt_Copy_xf444_TRC_Mat_TRC_v216_GCD(_QWORD *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  unsigned int v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  unsigned int v55;
  char v56;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  unint64_t v65;
  unsigned __int16 *v66;
  unsigned __int16 *v67;
  _DWORD *v68;
  _WORD *v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  BOOL v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v107;
  float v109;
  float v110;
  float v114;
  float v115;
  float v121;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  __int16 v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  size_t v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;

  v5 = *(_QWORD *)((char *)result + 28);
  v6 = *(unsigned __int8 *)result;
  v7 = v5 * a2 / v6;
  v8 = v5 + v5 * a2;
  v9 = result[14];
  v10 = (_QWORD *)result[16];
  v11 = result[13] * a2 / v6 + result[15];
  v12 = (uint64_t *)result[17];
  v13 = v12[1];
  v14 = v10[1];
  v15 = (char *)(v14 + v13 * v11 + 2 * v9);
  v16 = v8 / v6;
  if (v14)
    v17 = v14 + v13 * v11 + 2 * v9;
  else
    v17 = 0;
  if (v16 != v7)
  {
    v18 = 0;
    v19 = *(_QWORD *)((char *)result + 20);
    v20 = *(_QWORD *)((char *)result + 36);
    v21 = v7 + *(_QWORD *)((char *)result + 44);
    v22 = v16 - v7;
    v23 = result[19];
    v24 = (_QWORD *)result[7];
    v25 = (uint64_t *)result[8];
    v26 = *v25;
    v27 = v25[1];
    v28 = v25[2];
    v29 = v24[2];
    v30 = (char *)(v29 + v28 * v21 + 2 * v20);
    v31 = *v12;
    LOWORD(a4) = *(_WORD *)(v23 + 140);
    LOWORD(a5) = *(_WORD *)(v23 + 142);
    *(float *)&v32 = 8191.0 / (float)*(unsigned int *)(v23 + 128);
    v33 = (float)LODWORD(a4);
    v34 = (float)LODWORD(a5);
    v35 = *(float *)&v32 * *(float *)v23;
    v142 = *(float *)&v32 * *(float *)(v23 + 16);
    v143 = *(float *)&v32 * *(float *)(v23 + 8);
    v36 = *(float *)&v32 * *(float *)(v23 + 20);
    v37 = *(float *)&v32 * *(float *)(v23 + 28);
    LOWORD(v32) = *(_WORD *)(v23 + 144);
    v38 = (float)v32;
    LOWORD(v32) = *(_WORD *)(v23 + 146);
    v39 = (float)v32;
    LOWORD(v32) = *(_WORD *)(v23 + 148);
    v40 = (float)v32;
    LOWORD(v32) = *(_WORD *)(v23 + 150);
    v41 = (float)v32;
    LOWORD(v32) = *(_WORD *)(v23 + 152);
    v42 = (float)v32;
    v43 = *(float *)(v23 + 36);
    v44 = *(float *)(v23 + 40);
    v45 = *(float *)(v23 + 44);
    v140 = *(float *)(v23 + 48) * 0.5;
    v141 = v36;
    v138 = *(float *)(v23 + 56) * 0.5;
    v139 = *(float *)(v23 + 52) * 0.5;
    v136 = *(float *)(v23 + 64) * 0.5;
    v137 = *(float *)(v23 + 60) * 0.5;
    v46 = *(float *)(v23 + 72);
    v135 = *(float *)(v23 + 68) * 0.5;
    v48 = *(float *)(v23 + 76);
    v47 = *(float *)(v23 + 80);
    v49 = *(float *)(v23 + 84);
    v50 = *(float *)(v23 + 88);
    v51 = *(float *)(v23 + 92);
    v52 = *(float *)(v23 + 96);
    v53 = *(float *)(v23 + 100);
    v54 = *(float *)(v23 + 104);
    v55 = *(unsigned __int8 *)(v23 + 124);
    v56 = 16 - v55;
    _CF = v55 >= 0x11;
    v58 = v23 + 16548;
    v59 = v23 + 164;
    if (_CF)
      v60 = 0;
    else
      v60 = v56;
    v61 = *v10 + v31 * v11 + 2 * v9;
    v62 = v24[1];
    if (v62)
      result = (_QWORD *)(v62 + v27 * v21 + 2 * v20);
    else
      result = 0;
    v63 = *v24 + v26 * v21 + 2 * v20;
    v64 = v60;
    do
    {
      if (v19)
      {
        v65 = 0;
        v66 = (unsigned __int16 *)v63;
        v67 = (unsigned __int16 *)result;
        v68 = (_DWORD *)v17;
        v69 = (_WORD *)v61;
        do
        {
          if (v67)
          {
            v70 = (float)(*v67 >> v64) - v34;
            v71 = (float)(v67[1] >> v64) - v34;
            v67 += 2;
            v72 = v143 * v71;
            v73 = (float)(v141 * v71) + (float)(v70 * v142);
            v74 = v37 * v70;
          }
          else
          {
            v74 = 0.0;
            v73 = 0.0;
            v72 = 0.0;
          }
          v75 = v35 * (float)((float)(*v66 >> v64) - v33);
          v76 = v72 + v75;
          v77 = (float)(v72 + v75) <= 8191.0;
          v78 = 8191.0;
          if (v77)
          {
            v78 = v76;
            if (v76 < 0.0)
              v78 = 0.0;
          }
          v79 = v73 + v75;
          v80 = 8191.0;
          if (v79 <= 8191.0)
          {
            v80 = v79;
            if (v79 < 0.0)
              v80 = 0.0;
          }
          v81 = 8191.0;
          if ((float)(v74 + v75) <= 8191.0)
          {
            v81 = v74 + v75;
            if ((float)(v74 + v75) < 0.0)
              v81 = 0.0;
          }
          if (v67)
          {
            v82 = (float)(*v67 >> v64) - v34;
            v83 = (float)(v67[1] >> v64) - v34;
            v67 += 2;
            v84 = v143 * v83;
            v85 = (float)(v141 * v83) + (float)(v82 * v142);
            v86 = v37 * v82;
          }
          else
          {
            v86 = 0.0;
            v85 = 0.0;
            v84 = 0.0;
          }
          v87 = v35 * (float)((float)(v66[1] >> v64) - v33);
          v88 = 8191.0;
          if ((float)(v84 + v87) <= 8191.0)
          {
            v88 = v84 + v87;
            if ((float)(v84 + v87) < 0.0)
              v88 = 0.0;
          }
          v89 = v85 + v87;
          v77 = (float)(v85 + v87) <= 8191.0;
          v90 = 8191.0;
          if (v77)
          {
            v90 = v89;
            if (v89 < 0.0)
              v90 = 0.0;
          }
          v91 = v86 + v87;
          v92 = 8191.0;
          if (v91 <= 8191.0)
          {
            v92 = v91;
            if (v91 < 0.0)
              v92 = 0.0;
          }
          _H0 = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          _H5 = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H24 = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          _H6 = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H4 = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _S26 = (float)((float)(v48 * _S5) + (float)(_S0 * v46)) + (float)(_S24 * v47);
          v107 = (float)((float)(v50 * _S5) + (float)(_S0 * v49)) + (float)(_S24 * v51);
          _S0 = (float)((float)(v53 * _S5) + (float)(_S0 * v52)) + (float)(_S24 * v54);
          v109 = (float)(v48 * _S4) + (float)(_S6 * v46);
          v110 = (float)(v50 * _S4) + (float)(_S6 * v49);
          _S4 = (float)(v53 * _S4) + (float)(_S6 * v52);
          LOWORD(_S6) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _S5 = v109 + (float)(_S6 * v47);
          v114 = v110 + (float)(_S6 * v51);
          LOWORD(_S26) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(_S26, 0.0), 8191.0)));
          v115 = _S4 + (float)(_S6 * v54);
          __asm { FCVT            S26, H26 }
          LOWORD(_S4) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v107, 0.0), 8191.0)));
          __asm { FCVT            S28, H4 }
          LOWORD(_S0) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          __asm { FCVT            S30, H0 }
          LOWORD(_S0) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          LOWORD(_S4) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v114, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          v121 = (float)(v39 + (float)((float)(_S26 + _S0) * v137)) + (float)((float)(_S28 + _S4) * v136);
          LOWORD(_S5) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v115, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          v123 = (float)((float)(v44 * _S28) + (float)(v43 * _S26)) + (float)(v45 * _S30);
          v124 = (float)((float)(v39 + (float)((float)(_S26 + _S0) * v140)) + (float)((float)(_S28 + _S4) * v139))
               + (float)((float)(_S30 + _S5) * v138);
          v125 = v121 + (float)((float)(_S30 + _S5) * v135);
          if (v124 < v38)
            v126 = v38;
          else
            v126 = v124;
          v127 = v123 + v38;
          if (v124 > v40)
            v126 = v40;
          v128 = llroundf(v126);
          if (v127 < v41)
            v129 = v41;
          else
            v129 = v127;
          *v69 = v128;
          if (v127 <= v42)
            v130 = v129;
          else
            v130 = v42;
          v69[1] = llroundf(v130);
          v131 = v40;
          if (v125 <= v40)
          {
            v131 = v125;
            if (v125 < v38)
              v131 = v38;
          }
          v132 = (float)((float)((float)(v44 * _S4) + (float)(v43 * _S0)) + (float)(v45 * _S5)) + v38;
          v69[2] = llroundf(v131);
          v133 = v42;
          if (v132 <= v42)
          {
            v133 = v132;
            if (v132 < v41)
              v133 = v41;
          }
          v69[3] = llroundf(v133);
          if (v68)
            *v68++ = 0;
          v65 += 2;
          v66 += 2;
          v69 += 4;
        }
        while (v19 > v65);
      }
      v63 += v26;
      result = (_QWORD *)((char *)result + v27);
      v61 += v31;
      ++v18;
    }
    while (v18 != v22);
    if (v29 && v17)
    {
      v134 = 2 * v19;
      do
      {
        result = memcpy(v15, v30, v134);
        v30 += v28;
        v15 += v13;
        --v22;
      }
      while (v22);
    }
    else if (v17)
    {
      do
      {
        if (v19)
          result = memset(v15, 255, 2 * v19);
        v15 += v13;
        --v22;
      }
      while (v22);
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_rgb_v216(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_rgb_v216_GCD);
  return 0;
}

_QWORD *vt_Copy_xf444_rgb_v216_GCD(_QWORD *result, uint64_t a2, double a3, double a4, double a5, float a6, float a7)
{
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  float v37;
  float v38;
  float v39;
  unsigned int v40;
  char *v41;
  uint64_t v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  unsigned __int16 *v66;
  unsigned __int16 *v67;
  _DWORD *v68;
  _WORD *v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  size_t v101;

  v12 = *(_QWORD *)((char *)result + 28);
  v13 = *(unsigned __int8 *)result;
  v14 = v12 * a2 / v13;
  v15 = result[14];
  v16 = (_QWORD *)result[16];
  v17 = result[13] * a2 / v13 + result[15];
  v18 = (uint64_t *)result[17];
  v19 = v18[1];
  v20 = v16[1];
  v21 = (char *)(v20 + v19 * v17 + 2 * v15);
  v22 = (v12 + v12 * a2) / v13;
  if (v20)
    v23 = v20 + v19 * v17 + 2 * v15;
  else
    v23 = 0;
  if (v22 == v14)
    return result;
  v24 = 0;
  v25 = *(_QWORD *)((char *)result + 20);
  v26 = *(_QWORD *)((char *)result + 36);
  v27 = v14 + *(_QWORD *)((char *)result + 44);
  v28 = v22 - v14;
  v29 = result[19];
  v30 = (_QWORD *)result[7];
  v31 = (uint64_t *)result[8];
  v32 = *v31;
  v33 = v31[1];
  v34 = v31[2];
  v35 = v30[2];
  LOWORD(a6) = *(_WORD *)(v29 + 140);
  LOWORD(a7) = *(_WORD *)(v29 + 142);
  v36 = (float)*(unsigned int *)(v29 + 136) / (float)*(unsigned int *)(v29 + 128);
  LOWORD(v7) = *(_WORD *)(v29 + 144);
  LOWORD(v8) = *(_WORD *)(v29 + 146);
  LOWORD(v9) = *(_WORD *)(v29 + 148);
  LOWORD(v10) = *(_WORD *)(v29 + 150);
  LOWORD(v11) = *(_WORD *)(v29 + 152);
  v37 = *(float *)(v29 + 36);
  v38 = *(float *)(v29 + 40);
  v39 = *(float *)(v29 + 44);
  v40 = *(unsigned __int8 *)(v29 + 124);
  v41 = (char *)(v35 + v34 * v27 + 2 * v26);
  v42 = *v18;
  v43 = (float)LODWORD(a6);
  v44 = (float)LODWORD(a7);
  v45 = v36 * *(float *)v29;
  v46 = v36 * *(float *)(v29 + 8);
  v47 = v36 * *(float *)(v29 + 16);
  v48 = v36 * *(float *)(v29 + 20);
  v49 = v36 * *(float *)(v29 + 28);
  v50 = (float)v7;
  v51 = (float)v8;
  v52 = (float)v9;
  v53 = (float)v10;
  v54 = (float)v11;
  v55 = *(float *)(v29 + 48) * 0.5;
  v56 = *(float *)(v29 + 52) * 0.5;
  v57 = *(float *)(v29 + 56) * 0.5;
  v58 = *(float *)(v29 + 60) * 0.5;
  v59 = *(float *)(v29 + 64) * 0.5;
  v60 = *(float *)(v29 + 68) * 0.5;
  if (v40 >= 0x11)
    result = 0;
  else
    result = (_QWORD *)(16 - v40);
  v61 = *v16 + v42 * v17 + 2 * v15;
  v62 = v30[1];
  if (v62)
    v63 = v62 + v33 * v27 + 2 * v26;
  else
    v63 = 0;
  v64 = *v30 + v32 * v27 + 2 * v26;
  v65 = (char)result;
  do
  {
    if (v25)
    {
      result = 0;
      v66 = (unsigned __int16 *)v64;
      v67 = (unsigned __int16 *)v63;
      v68 = (_DWORD *)v23;
      v69 = (_WORD *)v61;
      while (1)
      {
        v70 = 0.0;
        if (!v67)
          break;
        v71 = (float)(*v67 >> v65) - v44;
        v72 = (float)(v67[1] >> v65) - v44;
        v67 += 2;
        v73 = v46 * v72;
        v74 = (float)(v48 * v72) + (float)(v71 * v47);
        v75 = v49 * v71;
        if (!v67)
          goto LABEL_18;
        v76 = (float)(*v67 >> v65) - v44;
        v77 = (float)(v67[1] >> v65) - v44;
        v67 += 2;
        v78 = v46 * v77;
        v79 = (float)(v48 * v77) + (float)(v76 * v47);
        v70 = v49 * v76;
LABEL_19:
        v80 = v45 * (float)((float)(*v66 >> v65) - v43);
        v81 = v73 + v80;
        v82 = v74 + v80;
        v83 = v75 + v80;
        v84 = v45 * (float)((float)(v66[1] >> v65) - v43);
        v85 = v78 + v84;
        v86 = v79 + v84;
        v87 = v70 + v84;
        v88 = (float)((float)((float)(v38 * v82) + (float)(v37 * v81)) + (float)(v39 * v83)) + v50;
        v89 = v81 + (float)(v78 + v84);
        v90 = v82 + v86;
        v91 = v83 + v87;
        v92 = (float)((float)(v51 + (float)(v89 * v55)) + (float)(v90 * v56)) + (float)(v91 * v57);
        v93 = (float)((float)(v51 + (float)(v89 * v58)) + (float)(v90 * v59)) + (float)(v91 * v60);
        if (v92 < v50)
          v94 = v50;
        else
          v94 = v92;
        if (v92 <= v52)
          v95 = v94;
        else
          v95 = v52;
        *v69 = llroundf(v95);
        if (v88 < v53)
          v96 = v53;
        else
          v96 = v88;
        if (v88 <= v54)
          v97 = v96;
        else
          v97 = v54;
        v69[1] = llroundf(v97);
        v98 = v52;
        if (v93 <= v52)
        {
          v98 = v93;
          if (v93 < v50)
            v98 = v50;
        }
        v99 = (float)((float)((float)(v38 * v86) + (float)(v37 * v85)) + (float)(v39 * v87)) + v50;
        v69[2] = llroundf(v98);
        v100 = v54;
        if (v99 <= v54)
        {
          v100 = v99;
          if (v99 < v53)
            v100 = v53;
        }
        v69[3] = llroundf(v100);
        if (v68)
          *v68++ = 0;
        result = (_QWORD *)((char *)result + 2);
        v66 += 2;
        v69 += 4;
        if (v25 <= (unint64_t)result)
          goto LABEL_40;
      }
      v75 = 0.0;
      v74 = 0.0;
      v73 = 0.0;
LABEL_18:
      v79 = 0.0;
      v78 = 0.0;
      goto LABEL_19;
    }
LABEL_40:
    v64 += v32;
    v63 += v33;
    v61 += v42;
    ++v24;
  }
  while (v24 != v28);
  if (v35 && v23)
  {
    v101 = 2 * v25;
    do
    {
      result = memcpy(v21, v41, v101);
      v41 += v34;
      v21 += v19;
      --v28;
    }
    while (v28);
  }
  else if (v23)
  {
    do
    {
      if (v25)
        result = memset(v21, 255, 2 * v25);
      v21 += v19;
      --v28;
    }
    while (v28);
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Tone_Mat_TRC_444vf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Tone_Mat_TRC_444vf_GCD);
  return 0;
}

_QWORD *vt_Copy_xf444_TRC_Tone_Mat_TRC_444vf_GCD(_QWORD *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  unsigned int v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  uint64_t v55;
  unsigned int v56;
  char v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  float v70;
  float v71;
  float v72;
  float v73;
  size_t v74;
  unsigned __int16 *v75;
  unsigned __int16 *v76;
  _BYTE *v77;
  _BYTE *i;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  unsigned int v84;
  float v85;
  float v86;
  float v87;
  float v88;
  BOOL v89;
  float v90;
  float v91;
  float v92;
  float v102;
  float v103;
  float v108;
  float v109;
  float v110;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  uint64_t v122;
  size_t v123;
  _BYTE *v124;
  unsigned __int16 *v125;
  unsigned int v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;

  v5 = *(_QWORD *)((char *)result + 28);
  v6 = *(unsigned __int8 *)result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)((char *)result + 20);
    v11 = *(_QWORD *)((char *)result + 36);
    v12 = v7 + *(_QWORD *)((char *)result + 44);
    v13 = v8 - v7;
    v14 = result[14];
    v15 = (_QWORD *)result[16];
    v16 = result[13] * a2 / v6 + result[15];
    v17 = result[19];
    v18 = (uint64_t *)result[7];
    v19 = (uint64_t *)result[8];
    v20 = (uint64_t *)result[17];
    v21 = *v19;
    v22 = v19[1];
    v23 = v19[2];
    v24 = v18[2];
    v25 = v24 + v23 * v12 + 2 * v11;
    v26 = *v20;
    v27 = v20[1];
    v28 = v20[2];
    v29 = v15[2];
    v30 = (_BYTE *)(v29 + v28 * v16 + v14);
    LOWORD(a4) = *(_WORD *)(v17 + 140);
    LOWORD(a5) = *(_WORD *)(v17 + 142);
    v31 = 8191.0 / (float)*(unsigned int *)(v17 + 128);
    v32 = (float)LODWORD(a4);
    v33 = (float)LODWORD(a5);
    v34 = v31 * *(float *)v17;
    v134 = v31 * *(float *)(v17 + 16);
    v135 = v31 * *(float *)(v17 + 8);
    v35 = v31 * *(float *)(v17 + 20);
    *(float *)&v36 = v31 * *(float *)(v17 + 28);
    v132 = *(float *)&v36;
    v133 = v35;
    LOWORD(v36) = *(_WORD *)(v17 + 144);
    v37 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v17 + 146);
    v38 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v17 + 148);
    v39 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v17 + 150);
    v40 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v17 + 152);
    v41 = (float)v36;
    v42 = *(float *)(v17 + 36);
    v43 = *(float *)(v17 + 40);
    v44 = *(float *)(v17 + 44);
    v130 = *(float *)(v17 + 52);
    v131 = *(float *)(v17 + 48);
    v128 = *(float *)(v17 + 60);
    v129 = *(float *)(v17 + 56);
    v45 = *(float *)(v17 + 68);
    v127 = *(float *)(v17 + 64);
    v46 = *(float *)(v17 + 72);
    v47 = *(float *)(v17 + 76);
    v48 = *(float *)(v17 + 80);
    v49 = *(float *)(v17 + 84);
    v50 = *(float *)(v17 + 88);
    v51 = *(float *)(v17 + 92);
    v52 = *(float *)(v17 + 96);
    v53 = *(float *)(v17 + 100);
    v54 = *(float *)(v17 + 104);
    v55 = v17 + 164;
    result = (_QWORD *)(v17 + 16548);
    v56 = *(unsigned __int8 *)(v17 + 124);
    if (v56 >= 0x11)
      v57 = 0;
    else
      v57 = 16 - v56;
    v58 = v15[1];
    _ZF = v58 == 0;
    v60 = v58 + v27 * v16;
    v61 = *v15 + v26 * v16;
    v62 = v17 + 32932;
    v63 = (_BYTE *)(v60 + v14);
    if (_ZF)
      v63 = 0;
    v64 = (_BYTE *)(v61 + v14);
    v66 = *v18;
    v65 = v18[1];
    v67 = v65 + v22 * v12 + 2 * v11;
    if (!v65)
      v67 = 0;
    v68 = v66 + v21 * v12 + 2 * v11;
    v69 = v57;
    v71 = *(float *)(v17 + 108);
    v70 = *(float *)(v17 + 112);
    v72 = *(float *)(v17 + 116);
    v73 = *(float *)(v17 + 120);
    do
    {
      v74 = v10;
      v75 = (unsigned __int16 *)v68;
      v76 = (unsigned __int16 *)v67;
      v77 = v63;
      for (i = v64; v74; --v74)
      {
        if (v76)
        {
          v79 = (float)(*v76 >> v69) - v33;
          v80 = (float)(v76[1] >> v69) - v33;
          v76 += 2;
          v81 = v135 * v80;
          v82 = (float)(v133 * v80) + (float)(v79 * v134);
          v83 = v132 * v79;
        }
        else
        {
          v83 = 0.0;
          v82 = 0.0;
          v81 = 0.0;
        }
        v84 = *v75++;
        v85 = v34 * (float)((float)(int)(v84 >> v69) - v32);
        v86 = v81 + v85;
        v87 = 8191.0;
        if (v86 <= 8191.0)
        {
          v87 = v86;
          if (v86 < 0.0)
            v87 = 0.0;
        }
        v88 = v82 + v85;
        v89 = (float)(v82 + v85) <= 8191.0;
        v90 = 8191.0;
        if (v89)
        {
          v90 = v88;
          if (v88 < 0.0)
            v90 = 0.0;
        }
        v91 = v83 + v85;
        v92 = 8191.0;
        if (v91 <= 8191.0)
        {
          v92 = v91;
          if (v91 < 0.0)
            v92 = 0.0;
        }
        _H0 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
        __asm { FCVT            S24, H0 }
        _H0 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
        __asm { FCVT            S25, H0 }
        _H0 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
        __asm { FCVT            S26, H0 }
        v102 = (float)((float)((float)(v70 * _S25) + (float)(v71 * _S24)) + (float)(v72 * _S26))
             + (float)(v73 * fmaxf(_S24, fmaxf(_S25, _S26)));
        v103 = 8191.0;
        if (v102 <= 8191.0)
        {
          v103 = v102;
          if (v102 < 0.0)
            v103 = 0.0;
        }
        _H0 = *((_WORD *)result + llroundf(v103));
        __asm { FCVT            S0, H0 }
        _S24 = _S24 * _S0;
        _S25 = _S25 * _S0;
        v108 = _S26 * _S0;
        v109 = (float)((float)(v47 * _S25) + (float)(_S24 * v46)) + (float)(v108 * v48);
        v110 = (float)((float)(v50 * _S25) + (float)(_S24 * v49)) + (float)(v108 * v51);
        _S0 = (float)((float)(v53 * _S25) + (float)(_S24 * v52)) + (float)(v108 * v54);
        LOWORD(_S24) = *(_WORD *)(v62 + 2 * llroundf(fminf(fmaxf(v109, 0.0), 8191.0)));
        __asm { FCVT            S24, H24 }
        LOWORD(_S25) = *(_WORD *)(v62 + 2 * llroundf(fminf(fmaxf(v110, 0.0), 8191.0)));
        __asm { FCVT            S25, H25 }
        LOWORD(_S0) = *(_WORD *)(v62 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
        __asm { FCVT            S26, H0 }
        v115 = (float)((float)((float)(v43 * _S25) + (float)(v42 * _S24)) + (float)(v44 * _S26)) + v37;
        v116 = v39;
        if (v115 <= v39)
        {
          v116 = (float)((float)((float)(v43 * _S25) + (float)(v42 * _S24)) + (float)(v44 * _S26)) + v37;
          if (v115 < v37)
            v116 = v37;
        }
        *i++ = llroundf(v116);
        if (v77)
        {
          v117 = (float)((float)(v38 + (float)(_S24 * v131)) + (float)(_S25 * v130)) + (float)(_S26 * v129);
          v118 = v41;
          if (v117 <= v41)
          {
            v118 = (float)((float)(v38 + (float)(_S24 * v131)) + (float)(_S25 * v130)) + (float)(_S26 * v129);
            if (v117 < v40)
              v118 = v40;
          }
          v119 = (float)(v38 + (float)(_S24 * v128)) + (float)(_S25 * v127);
          v120 = v119 + (float)(_S26 * v45);
          *v77 = llroundf(v118);
          v121 = v41;
          if (v120 <= v41)
          {
            v121 = v119 + (float)(_S26 * v45);
            if (v120 < v40)
              v121 = v40;
          }
          v77[1] = llroundf(v121);
          v77 += 2;
        }
      }
      v68 += v21;
      v67 += v22;
      v64 += v26;
      v63 += v27;
      ++v9;
    }
    while (v9 != v13);
    if (v24 && v29)
    {
      v122 = 0;
      do
      {
        if (v10)
        {
          v123 = v10;
          v124 = v30;
          v125 = (unsigned __int16 *)v25;
          do
          {
            v126 = *v125++;
            *v124++ = llroundf((float)v126 * 0.0038911);
            --v123;
          }
          while (v123);
        }
        v25 += v23;
        v30 += v28;
        ++v122;
      }
      while (v122 != v13);
    }
    else if (v29)
    {
      do
      {
        if (v10)
          result = memset(v30, 255, v10);
        v30 += v28;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Mat_TRC_444vf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Mat_TRC_444vf_GCD);
  return 0;
}

_QWORD *vt_Copy_xf444_TRC_Mat_TRC_444vf_GCD(_QWORD *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  unsigned int v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  uint64_t v60;
  unsigned int v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  size_t v72;
  unsigned __int16 *v73;
  unsigned __int16 *v74;
  _BYTE *v75;
  _BYTE *i;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  unsigned int v82;
  float v83;
  float v84;
  float v85;
  float v86;
  BOOL v87;
  float v88;
  float v89;
  float v90;
  float v101;
  float v102;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  uint64_t v114;
  size_t v115;
  _BYTE *v116;
  unsigned __int16 *v117;
  unsigned int v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;

  v5 = *(_QWORD *)((char *)result + 28);
  v6 = *(unsigned __int8 *)result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)((char *)result + 20);
    v11 = *(_QWORD *)((char *)result + 36);
    v12 = v7 + *(_QWORD *)((char *)result + 44);
    v13 = v8 - v7;
    v14 = result[14];
    v15 = result[13] * a2 / v6;
    v16 = (uint64_t *)result[16];
    v17 = v15 + result[15];
    v18 = result[19];
    v19 = (uint64_t *)result[7];
    v20 = (uint64_t *)result[8];
    v21 = (uint64_t *)result[17];
    v22 = *v20;
    v23 = v20[1];
    v24 = v20[2];
    v25 = v19[2];
    v26 = v25 + v24 * v12 + 2 * v11;
    v27 = *v21;
    v28 = v21[1];
    v29 = v21[2];
    v30 = v16[2];
    v31 = (_BYTE *)(v30 + v29 * v17 + v14);
    LOWORD(a4) = *(_WORD *)(v18 + 140);
    LOWORD(a5) = *(_WORD *)(v18 + 142);
    v32 = 8191.0 / (float)*(unsigned int *)(v18 + 128);
    v33 = (float)LODWORD(a4);
    v34 = (float)LODWORD(a5);
    v35 = v32 * *(float *)v18;
    v122 = v32 * *(float *)(v18 + 16);
    v123 = v32 * *(float *)(v18 + 8);
    v36 = v32 * *(float *)(v18 + 20);
    *(float *)&v37 = v32 * *(float *)(v18 + 28);
    v120 = *(float *)&v37;
    v121 = v36;
    LOWORD(v37) = *(_WORD *)(v18 + 144);
    v38 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v18 + 146);
    v39 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v18 + 148);
    v40 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v18 + 150);
    v41 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v18 + 152);
    v42 = (float)v37;
    v43 = *(float *)(v18 + 36);
    v44 = *(float *)(v18 + 40);
    v45 = *(float *)(v18 + 44);
    v119 = *(float *)(v18 + 48);
    v46 = *(float *)(v18 + 52);
    v47 = *(float *)(v18 + 56);
    v48 = *(float *)(v18 + 60);
    v49 = *(float *)(v18 + 64);
    v50 = *(float *)(v18 + 68);
    v51 = *(float *)(v18 + 72);
    v53 = *(float *)(v18 + 76);
    v52 = *(float *)(v18 + 80);
    v54 = *(float *)(v18 + 84);
    v55 = *(float *)(v18 + 88);
    v56 = *(float *)(v18 + 92);
    v57 = *(float *)(v18 + 96);
    v58 = *(float *)(v18 + 100);
    v59 = *(float *)(v18 + 104);
    v60 = v18 + 164;
    result = (_QWORD *)(v18 + 16548);
    v61 = *(unsigned __int8 *)(v18 + 124);
    if (v61 >= 0x11)
      v62 = 0;
    else
      v62 = 16 - v61;
    v64 = *v16;
    v63 = v16[1];
    v65 = (_BYTE *)(v63 + v28 * v17 + v14);
    if (!v63)
      v65 = 0;
    v66 = (_BYTE *)(v64 + v27 * v17 + v14);
    v68 = *v19;
    v67 = v19[1];
    v69 = v67 + v23 * v12 + 2 * v11;
    if (!v67)
      v69 = 0;
    v70 = v68 + v22 * v12 + 2 * v11;
    v71 = v62;
    do
    {
      v72 = v10;
      v73 = (unsigned __int16 *)v70;
      v74 = (unsigned __int16 *)v69;
      v75 = v65;
      for (i = v66; v72; --v72)
      {
        if (v74)
        {
          v77 = (float)(*v74 >> v71) - v34;
          v78 = (float)(v74[1] >> v71) - v34;
          v74 += 2;
          v79 = v123 * v78;
          v80 = (float)(v121 * v78) + (float)(v77 * v122);
          v81 = v120 * v77;
        }
        else
        {
          v81 = 0.0;
          v80 = 0.0;
          v79 = 0.0;
        }
        v82 = *v73++;
        v83 = v35 * (float)((float)(int)(v82 >> v71) - v33);
        v84 = v79 + v83;
        v85 = 8191.0;
        if (v84 <= 8191.0)
        {
          v85 = v84;
          if (v84 < 0.0)
            v85 = 0.0;
        }
        v86 = v80 + v83;
        v87 = (float)(v80 + v83) <= 8191.0;
        v88 = 8191.0;
        if (v87)
        {
          v88 = v86;
          if (v86 < 0.0)
            v88 = 0.0;
        }
        v89 = v81 + v83;
        v87 = (float)(v81 + v83) <= 8191.0;
        v90 = 8191.0;
        if (v87)
        {
          v90 = v89;
          if (v89 < 0.0)
            v90 = 0.0;
        }
        _H0 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
        __asm { FCVT            S0, H0 }
        _H5 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
        __asm { FCVT            S5, H5 }
        _H4 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
        __asm { FCVT            S4, H4 }
        v101 = (float)((float)(v53 * _S5) + (float)(_S0 * v51)) + (float)(_S4 * v52);
        v102 = (float)((float)(v55 * _S5) + (float)(_S0 * v54)) + (float)(_S4 * v56);
        _S0 = (float)((float)(v58 * _S5) + (float)(_S0 * v57)) + (float)(_S4 * v59);
        LOWORD(_S4) = *((_WORD *)result + llroundf(fminf(fmaxf(v101, 0.0), 8191.0)));
        __asm { FCVT            S4, H4 }
        LOWORD(_S5) = *((_WORD *)result + llroundf(fminf(fmaxf(v102, 0.0), 8191.0)));
        __asm { FCVT            S5, H5 }
        LOWORD(_S0) = *((_WORD *)result + llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
        __asm { FCVT            S6, H0 }
        v107 = (float)((float)((float)(v44 * _S5) + (float)(v43 * _S4)) + (float)(v45 * _S6)) + v38;
        v108 = v40;
        if (v107 <= v40)
        {
          v108 = (float)((float)((float)(v44 * _S5) + (float)(v43 * _S4)) + (float)(v45 * _S6)) + v38;
          if (v107 < v38)
            v108 = v38;
        }
        *i++ = llroundf(v108);
        if (v75)
        {
          v109 = (float)((float)(v39 + (float)(_S4 * v119)) + (float)(_S5 * v46)) + (float)(_S6 * v47);
          v110 = v42;
          if (v109 <= v42)
          {
            v110 = (float)((float)(v39 + (float)(_S4 * v119)) + (float)(_S5 * v46)) + (float)(_S6 * v47);
            if (v109 < v41)
              v110 = v41;
          }
          v111 = (float)(v39 + (float)(_S4 * v48)) + (float)(_S5 * v49);
          v112 = v111 + (float)(_S6 * v50);
          *v75 = llroundf(v110);
          v113 = v42;
          if (v112 <= v42)
          {
            v113 = v111 + (float)(_S6 * v50);
            if (v112 < v41)
              v113 = v41;
          }
          v75[1] = llroundf(v113);
          v75 += 2;
        }
      }
      v70 += v22;
      v69 += v23;
      v66 += v27;
      v65 += v28;
      ++v9;
    }
    while (v9 != v13);
    if (v25 && v30)
    {
      v114 = 0;
      do
      {
        if (v10)
        {
          v115 = v10;
          v116 = v31;
          v117 = (unsigned __int16 *)v26;
          do
          {
            v118 = *v117++;
            *v116++ = llroundf((float)v118 * 0.0038911);
            --v115;
          }
          while (v115);
        }
        v26 += v24;
        v31 += v29;
        ++v114;
      }
      while (v114 != v13);
    }
    else if (v30)
    {
      do
      {
        if (v10)
          result = memset(v31, 255, v10);
        v31 += v29;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_rgb_444vf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_rgb_444vf_GCD);
  return 0;
}

_QWORD *vt_Copy_xf444_rgb_444vf_GCD(_QWORD *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  unsigned int v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  size_t v69;
  unsigned __int16 *v70;
  unsigned __int16 *v71;
  _BYTE *v72;
  _BYTE *i;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  unsigned int v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  uint64_t v90;
  size_t v91;
  _BYTE *v92;
  unsigned __int16 *v93;
  unsigned int v94;

  v10 = *(_QWORD *)((char *)result + 28);
  v11 = *(unsigned __int8 *)result;
  v12 = v10 * a2 / v11;
  v13 = (v10 + v10 * a2) / v11;
  if (v13 != v12)
  {
    v14 = 0;
    v15 = *(_QWORD *)((char *)result + 20);
    v16 = *(_QWORD *)((char *)result + 36);
    v17 = v12 + *(_QWORD *)((char *)result + 44);
    v18 = v13 - v12;
    v19 = result[14];
    v20 = (uint64_t *)result[16];
    v21 = result[13] * a2 / v11 + result[15];
    v22 = result[19];
    v23 = (uint64_t *)result[7];
    v24 = (uint64_t *)result[8];
    v25 = (uint64_t *)result[17];
    v26 = *v24;
    v27 = v24[1];
    v28 = v24[2];
    v29 = v23[2];
    v30 = v29 + v28 * v17 + 2 * v16;
    v31 = *v25;
    v32 = v25[1];
    v33 = v25[2];
    v34 = v20[2];
    v35 = (_BYTE *)(v34 + v33 * v21 + v19);
    LOWORD(a5) = *(_WORD *)(v22 + 140);
    LOWORD(a6) = *(_WORD *)(v22 + 142);
    v36 = (float)*(unsigned int *)(v22 + 136) / (float)*(unsigned int *)(v22 + 128);
    v37 = (float)LODWORD(a5);
    v38 = (float)LODWORD(a6);
    v39 = v36 * *(float *)v22;
    v40 = v36 * *(float *)(v22 + 8);
    v41 = v36 * *(float *)(v22 + 16);
    v42 = v36 * *(float *)(v22 + 20);
    v43 = *(float *)(v22 + 28);
    v44 = v36 * v43;
    LOWORD(v43) = *(_WORD *)(v22 + 144);
    v45 = (float)LODWORD(v43);
    LOWORD(v6) = *(_WORD *)(v22 + 146);
    v46 = (float)v6;
    LOWORD(v7) = *(_WORD *)(v22 + 148);
    v47 = (float)v7;
    LOWORD(v8) = *(_WORD *)(v22 + 150);
    v48 = (float)v8;
    LOWORD(v9) = *(_WORD *)(v22 + 152);
    v49 = (float)v9;
    v50 = *(float *)(v22 + 36);
    v51 = *(float *)(v22 + 40);
    v52 = *(float *)(v22 + 44);
    v53 = *(float *)(v22 + 48);
    v54 = *(float *)(v22 + 52);
    v55 = *(float *)(v22 + 56);
    v56 = *(float *)(v22 + 60);
    v57 = *(float *)(v22 + 64);
    v58 = *(float *)(v22 + 68);
    v59 = *(unsigned __int8 *)(v22 + 124);
    v60 = 16 - v59;
    if (v59 >= 0x11)
      v60 = 0;
    v62 = *v20;
    v61 = v20[1];
    v63 = (_BYTE *)(v61 + v32 * v21 + v19);
    if (!v61)
      v63 = 0;
    result = (_QWORD *)(v62 + v31 * v21 + v19);
    v65 = *v23;
    v64 = v23[1];
    v66 = v64 + v27 * v17 + 2 * v16;
    if (!v64)
      v66 = 0;
    v67 = v65 + v26 * v17 + 2 * v16;
    v68 = v60;
    do
    {
      v69 = v15;
      v70 = (unsigned __int16 *)v67;
      v71 = (unsigned __int16 *)v66;
      v72 = v63;
      for (i = result; v69; --v69)
      {
        if (v71)
        {
          v74 = (float)(*v71 >> v68) - v38;
          v75 = (float)(v71[1] >> v68) - v38;
          v71 += 2;
          v76 = v40 * v75;
          v77 = (float)(v42 * v75) + (float)(v74 * v41);
          v78 = v44 * v74;
        }
        else
        {
          v78 = 0.0;
          v77 = 0.0;
          v76 = 0.0;
        }
        v79 = *v70++;
        v80 = v39 * (float)((float)(int)(v79 >> v68) - v37);
        v81 = v76 + v80;
        v82 = v77 + v80;
        v83 = v78 + v80;
        v84 = (float)((float)((float)(v51 * v82) + (float)(v50 * v81)) + (float)(v52 * v83)) + v45;
        v85 = v47;
        if (v84 <= v47)
        {
          v85 = (float)((float)((float)(v51 * v82) + (float)(v50 * v81)) + (float)(v52 * v83)) + v45;
          if (v84 < v45)
            v85 = v45;
        }
        *i++ = llroundf(v85);
        if (v72)
        {
          v86 = (float)((float)(v46 + (float)(v81 * v53)) + (float)(v82 * v54)) + (float)(v83 * v55);
          v87 = v49;
          if (v86 <= v49)
          {
            v87 = (float)((float)(v46 + (float)(v81 * v53)) + (float)(v82 * v54)) + (float)(v83 * v55);
            if (v86 < v48)
              v87 = v48;
          }
          v88 = (float)((float)(v46 + (float)(v81 * v56)) + (float)(v82 * v57)) + (float)(v83 * v58);
          *v72 = llroundf(v87);
          v89 = v49;
          if (v88 <= v49)
          {
            v89 = v88;
            if (v88 < v48)
              v89 = v48;
          }
          v72[1] = llroundf(v89);
          v72 += 2;
        }
      }
      v67 += v26;
      v66 += v27;
      result = (_QWORD *)((char *)result + v31);
      v63 += v32;
      ++v14;
    }
    while (v14 != v18);
    if (v29 && v34)
    {
      v90 = 0;
      do
      {
        if (v15)
        {
          v91 = v15;
          v92 = v35;
          v93 = (unsigned __int16 *)v30;
          do
          {
            v94 = *v93++;
            *v92++ = llroundf((float)v94 * 0.0038911);
            --v91;
          }
          while (v91);
        }
        v30 += v28;
        v35 += v33;
        ++v90;
      }
      while (v90 != v18);
    }
    else if (v34)
    {
      do
      {
        if (v15)
          result = memset(v35, 255, v15);
        v35 += v33;
        --v18;
      }
      while (v18);
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Tone_Mat_TRC_xf444(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Tone_Mat_TRC_xf444_GCD);
  return 0;
}

_QWORD *vt_Copy_xf444_TRC_Tone_Mat_TRC_xf444_GCD(_QWORD *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  unsigned int v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  char v59;
  unsigned int v60;
  char v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _WORD *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  char v74;
  float v75;
  float v76;
  float v77;
  float v78;
  uint64_t v79;
  unsigned __int16 *v80;
  unsigned __int16 *v81;
  _WORD *v82;
  _WORD *i;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  unsigned int v89;
  float v90;
  float v91;
  float v92;
  float v93;
  BOOL v94;
  float v95;
  float v96;
  float v97;
  float v107;
  float v108;
  float v113;
  float v114;
  float v115;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  size_t v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;

  v5 = *(_QWORD *)((char *)result + 28);
  v6 = *(unsigned __int8 *)result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)((char *)result + 20);
    v11 = *(_QWORD *)((char *)result + 36);
    v12 = v7 + *(_QWORD *)((char *)result + 44);
    v13 = v8 - v7;
    v14 = result[14];
    v15 = result[13] * a2 / v6;
    v16 = (_QWORD *)result[16];
    v17 = v15 + result[15];
    v18 = result[19];
    v19 = (_QWORD *)result[7];
    v20 = (uint64_t *)result[8];
    v21 = (uint64_t *)result[17];
    v22 = *v20;
    v23 = v20[1];
    v24 = v20[2];
    v25 = v19[2];
    v26 = (char *)(v25 + v24 * v12 + 2 * v11);
    v27 = *v21;
    v28 = v21[1];
    v29 = v21[2];
    v30 = v16[2];
    v31 = (char *)(v30 + v29 * v17 + 2 * v14);
    LOWORD(a4) = *(_WORD *)(v18 + 140);
    LOWORD(a5) = *(_WORD *)(v18 + 142);
    v32 = 8191.0 / (float)*(unsigned int *)(v18 + 128);
    v33 = (float)LODWORD(a4);
    v34 = (float)LODWORD(a5);
    v35 = v32 * *(float *)v18;
    v135 = v32 * *(float *)(v18 + 16);
    v136 = v32 * *(float *)(v18 + 8);
    v36 = v32 * *(float *)(v18 + 20);
    *(float *)&v37 = v32 * *(float *)(v18 + 28);
    v133 = *(float *)&v37;
    v134 = v36;
    LOWORD(v37) = *(_WORD *)(v18 + 144);
    v38 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v18 + 146);
    v39 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v18 + 148);
    v40 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v18 + 150);
    v41 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v18 + 152);
    v42 = (float)v37;
    v43 = *(float *)(v18 + 36);
    v44 = *(float *)(v18 + 40);
    v45 = *(float *)(v18 + 44);
    v131 = *(float *)(v18 + 52);
    v132 = *(float *)(v18 + 48);
    v129 = *(float *)(v18 + 60);
    v130 = *(float *)(v18 + 56);
    v46 = *(float *)(v18 + 68);
    v128 = *(float *)(v18 + 64);
    v47 = *(float *)(v18 + 72);
    v48 = *(float *)(v18 + 76);
    v49 = *(float *)(v18 + 80);
    v50 = *(float *)(v18 + 84);
    v51 = *(float *)(v18 + 88);
    v52 = *(float *)(v18 + 92);
    v53 = *(float *)(v18 + 96);
    v54 = *(float *)(v18 + 100);
    v55 = *(float *)(v18 + 104);
    v56 = v18 + 164;
    v57 = v18 + 16548;
    v58 = *(unsigned __int8 *)(v18 + 132);
    v59 = 16 - v58;
    if (v58 >= 0x11)
      v59 = 0;
    v60 = *(unsigned __int8 *)(v18 + 124);
    v61 = 16 - v60;
    if (v60 >= 0x11)
      v61 = 0;
    v62 = v16[1];
    _ZF = v62 == 0;
    v64 = v62 + v28 * v17;
    v65 = *v16 + v27 * v17;
    v66 = v18 + 32932;
    result = (_QWORD *)(v64 + 2 * v14);
    if (_ZF)
      result = 0;
    v67 = (_WORD *)(v65 + 2 * v14);
    v70 = v19;
    v69 = *v19;
    v68 = v70[1];
    _ZF = v68 == 0;
    v71 = v68 + v23 * v12 + 2 * v11;
    if (_ZF)
      v71 = 0;
    v72 = v69 + v22 * v12 + 2 * v11;
    v73 = v61;
    v74 = v59;
    v76 = *(float *)(v18 + 108);
    v75 = *(float *)(v18 + 112);
    v77 = *(float *)(v18 + 116);
    v78 = *(float *)(v18 + 120);
    do
    {
      v79 = v10;
      v80 = (unsigned __int16 *)v72;
      v81 = (unsigned __int16 *)v71;
      v82 = result;
      for (i = v67; v79; --v79)
      {
        if (v81)
        {
          v84 = (float)(*v81 >> v73) - v34;
          v85 = (float)(v81[1] >> v73) - v34;
          v81 += 2;
          v86 = v136 * v85;
          v87 = (float)(v134 * v85) + (float)(v84 * v135);
          v88 = v133 * v84;
        }
        else
        {
          v88 = 0.0;
          v87 = 0.0;
          v86 = 0.0;
        }
        v89 = *v80++;
        v90 = v35 * (float)((float)(int)(v89 >> v73) - v33);
        v91 = v86 + v90;
        v92 = 8191.0;
        if (v91 <= 8191.0)
        {
          v92 = v91;
          if (v91 < 0.0)
            v92 = 0.0;
        }
        v93 = v87 + v90;
        v94 = (float)(v87 + v90) <= 8191.0;
        v95 = 8191.0;
        if (v94)
        {
          v95 = v93;
          if (v93 < 0.0)
            v95 = 0.0;
        }
        v96 = v88 + v90;
        v97 = 8191.0;
        if (v96 <= 8191.0)
        {
          v97 = v96;
          if (v96 < 0.0)
            v97 = 0.0;
        }
        _H0 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
        __asm { FCVT            S24, H0 }
        _H0 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v95, 0.0), 8191.0)));
        __asm { FCVT            S25, H0 }
        _H0 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v97, 0.0), 8191.0)));
        __asm { FCVT            S26, H0 }
        v107 = (float)((float)((float)(v75 * _S25) + (float)(v76 * _S24)) + (float)(v77 * _S26))
             + (float)(v78 * fmaxf(_S24, fmaxf(_S25, _S26)));
        v108 = 8191.0;
        if (v107 <= 8191.0)
        {
          v108 = v107;
          if (v107 < 0.0)
            v108 = 0.0;
        }
        _H0 = *(_WORD *)(v57 + 2 * llroundf(v108));
        __asm { FCVT            S0, H0 }
        _S24 = _S24 * _S0;
        _S25 = _S25 * _S0;
        v113 = _S26 * _S0;
        v114 = (float)((float)(v48 * _S25) + (float)(_S24 * v47)) + (float)(v113 * v49);
        v115 = (float)((float)(v51 * _S25) + (float)(_S24 * v50)) + (float)(v113 * v52);
        _S0 = (float)((float)(v54 * _S25) + (float)(_S24 * v53)) + (float)(v113 * v55);
        LOWORD(_S24) = *(_WORD *)(v66 + 2 * llroundf(fminf(fmaxf(v114, 0.0), 8191.0)));
        __asm { FCVT            S24, H24 }
        LOWORD(_S25) = *(_WORD *)(v66 + 2 * llroundf(fminf(fmaxf(v115, 0.0), 8191.0)));
        __asm { FCVT            S25, H25 }
        LOWORD(_S0) = *(_WORD *)(v66 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
        __asm { FCVT            S26, H0 }
        v120 = (float)((float)((float)(v44 * _S25) + (float)(v43 * _S24)) + (float)(v45 * _S26)) + v38;
        v121 = v40;
        if (v120 <= v40)
        {
          v121 = (float)((float)((float)(v44 * _S25) + (float)(v43 * _S24)) + (float)(v45 * _S26)) + v38;
          if (v120 < v38)
            v121 = v38;
        }
        *i++ = llroundf(v121) << v74;
        if (v82)
        {
          v122 = (float)((float)(v39 + (float)(_S24 * v132)) + (float)(_S25 * v131)) + (float)(_S26 * v130);
          v123 = v42;
          if (v122 <= v42)
          {
            v123 = (float)((float)(v39 + (float)(_S24 * v132)) + (float)(_S25 * v131)) + (float)(_S26 * v130);
            if (v122 < v41)
              v123 = v41;
          }
          v124 = (float)(v39 + (float)(_S24 * v129)) + (float)(_S25 * v128);
          v125 = v124 + (float)(_S26 * v46);
          *v82 = llroundf(v123) << v74;
          v126 = v42;
          if (v125 <= v42)
          {
            v126 = v124 + (float)(_S26 * v46);
            if (v125 < v41)
              v126 = v41;
          }
          v82[1] = llroundf(v126) << v74;
          v82 += 2;
        }
      }
      v72 += v22;
      v71 += v23;
      v67 = (_WORD *)((char *)v67 + v27);
      result = (_QWORD *)((char *)result + v28);
      ++v9;
    }
    while (v9 != v13);
    if (v25 && v30)
    {
      v127 = 2 * v10;
      do
      {
        result = memcpy(v31, v26, v127);
        v26 += v24;
        v31 += v29;
        --v13;
      }
      while (v13);
    }
    else if (v30)
    {
      do
      {
        if (v10)
          result = memset(v31, 255, 2 * v10);
        v31 += v29;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Mat_TRC_xf444(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Mat_TRC_xf444_GCD);
  return 0;
}

_QWORD *vt_Copy_xf444_TRC_Mat_TRC_xf444_GCD(_QWORD *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  unsigned int v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  char v63;
  char v64;
  unsigned int v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  char v75;
  uint64_t v76;
  unsigned __int16 *v77;
  unsigned __int16 *v78;
  _WORD *v79;
  _WORD *i;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  unsigned int v86;
  float v87;
  float v88;
  float v89;
  float v90;
  BOOL v91;
  float v92;
  float v93;
  float v94;
  float v104;
  float v105;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  size_t v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;

  v5 = *(_QWORD *)((char *)result + 28);
  v6 = *(unsigned __int8 *)result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)((char *)result + 20);
    v11 = *(_QWORD *)((char *)result + 36);
    v12 = v7 + *(_QWORD *)((char *)result + 44);
    v13 = v8 - v7;
    v14 = result[14];
    v15 = (uint64_t *)result[16];
    v16 = result[13] * a2 / v6 + result[15];
    v17 = result[19];
    v18 = (uint64_t *)result[7];
    v19 = (uint64_t *)result[8];
    v20 = (uint64_t *)result[17];
    v21 = *v19;
    v22 = v19[1];
    v23 = v19[2];
    v24 = v18[2];
    v25 = (char *)(v24 + v23 * v12 + 2 * v11);
    v26 = *v20;
    v27 = v20[1];
    v28 = v20[2];
    v29 = v15[2];
    v30 = (char *)(v29 + v28 * v16 + 2 * v14);
    LOWORD(a4) = *(_WORD *)(v17 + 140);
    LOWORD(a5) = *(_WORD *)(v17 + 142);
    v31 = 8191.0 / (float)*(unsigned int *)(v17 + 128);
    v32 = (float)LODWORD(a4);
    v33 = (float)LODWORD(a5);
    v34 = v31 * *(float *)v17;
    v121 = v31 * *(float *)(v17 + 16);
    v122 = v31 * *(float *)(v17 + 8);
    v35 = v31 * *(float *)(v17 + 20);
    *(float *)&v36 = v31 * *(float *)(v17 + 28);
    v119 = *(float *)&v36;
    v120 = v35;
    LOWORD(v36) = *(_WORD *)(v17 + 144);
    v37 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v17 + 146);
    v38 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v17 + 148);
    v39 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v17 + 150);
    v40 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v17 + 152);
    v41 = (float)v36;
    v42 = *(float *)(v17 + 36);
    v43 = *(float *)(v17 + 40);
    v44 = *(float *)(v17 + 44);
    v118 = *(float *)(v17 + 48);
    v45 = *(float *)(v17 + 52);
    v46 = *(float *)(v17 + 56);
    v47 = *(float *)(v17 + 60);
    v48 = *(float *)(v17 + 64);
    v49 = *(float *)(v17 + 68);
    v50 = *(float *)(v17 + 72);
    v52 = *(float *)(v17 + 76);
    v51 = *(float *)(v17 + 80);
    v53 = *(float *)(v17 + 84);
    v54 = *(float *)(v17 + 88);
    v55 = *(float *)(v17 + 92);
    v56 = *(float *)(v17 + 96);
    v57 = *(float *)(v17 + 100);
    v58 = *(float *)(v17 + 104);
    v59 = v17 + 164;
    v60 = v17 + 16548;
    v61 = *(unsigned __int8 *)(v17 + 132);
    _CF = v61 >= 0x11;
    v63 = 16 - v61;
    if (_CF)
      v64 = 0;
    else
      v64 = v63;
    v65 = *(unsigned __int8 *)(v17 + 124);
    v66 = 16 - v65;
    if (v65 >= 0x11)
      v66 = 0;
    v68 = *v15;
    v67 = v15[1];
    v69 = v67 + v27 * v16 + 2 * v14;
    if (!v67)
      v69 = 0;
    result = (_QWORD *)(v68 + v26 * v16 + 2 * v14);
    v71 = *v18;
    v70 = v18[1];
    v72 = v70 + v22 * v12 + 2 * v11;
    if (!v70)
      v72 = 0;
    v73 = v71 + v21 * v12 + 2 * v11;
    v74 = v66;
    v75 = v64;
    do
    {
      v76 = v10;
      v77 = (unsigned __int16 *)v73;
      v78 = (unsigned __int16 *)v72;
      v79 = (_WORD *)v69;
      for (i = result; v76; --v76)
      {
        if (v78)
        {
          v81 = (float)(*v78 >> v74) - v33;
          v82 = (float)(v78[1] >> v74) - v33;
          v78 += 2;
          v83 = v122 * v82;
          v84 = (float)(v120 * v82) + (float)(v81 * v121);
          v85 = v119 * v81;
        }
        else
        {
          v85 = 0.0;
          v84 = 0.0;
          v83 = 0.0;
        }
        v86 = *v77++;
        v87 = v34 * (float)((float)(int)(v86 >> v74) - v32);
        v88 = v83 + v87;
        v89 = 8191.0;
        if (v88 <= 8191.0)
        {
          v89 = v88;
          if (v88 < 0.0)
            v89 = 0.0;
        }
        v90 = v84 + v87;
        v91 = (float)(v84 + v87) <= 8191.0;
        v92 = 8191.0;
        if (v91)
        {
          v92 = v90;
          if (v90 < 0.0)
            v92 = 0.0;
        }
        v93 = v85 + v87;
        v91 = (float)(v85 + v87) <= 8191.0;
        v94 = 8191.0;
        if (v91)
        {
          v94 = v93;
          if (v93 < 0.0)
            v94 = 0.0;
        }
        _H0 = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
        __asm { FCVT            S0, H0 }
        _H5 = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
        __asm { FCVT            S5, H5 }
        _H4 = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
        __asm { FCVT            S4, H4 }
        v104 = (float)((float)(v52 * _S5) + (float)(_S0 * v50)) + (float)(_S4 * v51);
        v105 = (float)((float)(v54 * _S5) + (float)(_S0 * v53)) + (float)(_S4 * v55);
        _S0 = (float)((float)(v57 * _S5) + (float)(_S0 * v56)) + (float)(_S4 * v58);
        LOWORD(_S4) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v104, 0.0), 8191.0)));
        __asm { FCVT            S4, H4 }
        LOWORD(_S5) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v105, 0.0), 8191.0)));
        __asm { FCVT            S5, H5 }
        LOWORD(_S0) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
        __asm { FCVT            S6, H0 }
        v110 = (float)((float)((float)(v43 * _S5) + (float)(v42 * _S4)) + (float)(v44 * _S6)) + v37;
        v111 = v39;
        if (v110 <= v39)
        {
          v111 = (float)((float)((float)(v43 * _S5) + (float)(v42 * _S4)) + (float)(v44 * _S6)) + v37;
          if (v110 < v37)
            v111 = v37;
        }
        *i++ = llroundf(v111) << v75;
        if (v79)
        {
          v112 = (float)((float)(v38 + (float)(_S4 * v118)) + (float)(_S5 * v45)) + (float)(_S6 * v46);
          v113 = v41;
          if (v112 <= v41)
          {
            v113 = (float)((float)(v38 + (float)(_S4 * v118)) + (float)(_S5 * v45)) + (float)(_S6 * v46);
            if (v112 < v40)
              v113 = v40;
          }
          v114 = (float)(v38 + (float)(_S4 * v47)) + (float)(_S5 * v48);
          v115 = v114 + (float)(_S6 * v49);
          *v79 = llroundf(v113) << v75;
          v116 = v41;
          if (v115 <= v41)
          {
            v116 = v114 + (float)(_S6 * v49);
            if (v115 < v40)
              v116 = v40;
          }
          v79[1] = llroundf(v116) << v75;
          v79 += 2;
        }
      }
      v73 += v21;
      v72 += v22;
      result = (_QWORD *)((char *)result + v26);
      v69 += v27;
      ++v9;
    }
    while (v9 != v13);
    if (v24 && v29)
    {
      v117 = 2 * v10;
      do
      {
        result = memcpy(v30, v25, v117);
        v25 += v23;
        v30 += v28;
        --v13;
      }
      while (v13);
    }
    else if (v29)
    {
      do
      {
        if (v10)
          result = memset(v30, 255, 2 * v10);
        v30 += v28;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_rgb_xf444(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_rgb_xf444_GCD);
  return 0;
}

_QWORD *vt_Copy_xf444_rgb_xf444_GCD(_QWORD *result, uint64_t a2, double a3, double a4, float a5)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  unsigned int v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  unsigned int v59;
  BOOL v60;
  char v61;
  char v62;
  unsigned int v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  char v73;
  uint64_t v74;
  unsigned __int16 *v75;
  unsigned __int16 *v76;
  _WORD *v77;
  _WORD *i;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  unsigned int v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  size_t v95;

  v9 = *(_QWORD *)((char *)result + 28);
  v10 = *(unsigned __int8 *)result;
  v11 = v9 * a2 / v10;
  v12 = (v9 + v9 * a2) / v10;
  if (v12 != v11)
  {
    v13 = 0;
    v14 = *(_QWORD *)((char *)result + 20);
    v15 = *(_QWORD *)((char *)result + 36);
    v16 = v11 + *(_QWORD *)((char *)result + 44);
    v17 = v12 - v11;
    v18 = result[14];
    v19 = (uint64_t *)result[16];
    v20 = result[13] * a2 / v10 + result[15];
    v21 = result[19];
    v23 = (uint64_t *)result[7];
    v22 = (uint64_t *)result[8];
    v24 = (uint64_t *)result[17];
    v25 = *v22;
    v26 = v22[1];
    v27 = v22[2];
    v28 = v23[2];
    v29 = (char *)(v28 + v27 * v16 + 2 * v15);
    v30 = *v24;
    v31 = v24[1];
    v32 = v24[2];
    v33 = v19[2];
    v34 = (char *)(v33 + v32 * v20 + 2 * v18);
    *(float *)&v35 = (float)*(unsigned int *)(v21 + 136);
    LOWORD(a5) = *(_WORD *)(v21 + 140);
    v36 = *(float *)&v35 / (float)*(unsigned int *)(v21 + 128);
    v37 = (float)LODWORD(a5);
    LOWORD(v35) = *(_WORD *)(v21 + 142);
    v38 = (float)v35;
    v39 = v36 * *(float *)v21;
    v40 = v36 * *(float *)(v21 + 8);
    v41 = v36 * *(float *)(v21 + 16);
    v42 = v36 * *(float *)(v21 + 20);
    v43 = *(float *)(v21 + 28);
    v44 = v36 * v43;
    LOWORD(v43) = *(_WORD *)(v21 + 144);
    v45 = (float)LODWORD(v43);
    LOWORD(v5) = *(_WORD *)(v21 + 146);
    v46 = (float)v5;
    LOWORD(v6) = *(_WORD *)(v21 + 148);
    v47 = (float)v6;
    LOWORD(v7) = *(_WORD *)(v21 + 150);
    v48 = (float)v7;
    LOWORD(v8) = *(_WORD *)(v21 + 152);
    v49 = (float)v8;
    v50 = *(float *)(v21 + 36);
    v51 = *(float *)(v21 + 40);
    v52 = *(float *)(v21 + 44);
    v53 = *(float *)(v21 + 48);
    v54 = *(float *)(v21 + 52);
    v55 = *(float *)(v21 + 56);
    v56 = *(float *)(v21 + 60);
    v57 = *(float *)(v21 + 64);
    v58 = *(float *)(v21 + 68);
    v59 = *(unsigned __int8 *)(v21 + 132);
    v60 = v59 >= 0x11;
    v61 = 16 - v59;
    if (v60)
      v62 = 0;
    else
      v62 = v61;
    v63 = *(unsigned __int8 *)(v21 + 124);
    v64 = 16 - v63;
    if (v63 >= 0x11)
      v64 = 0;
    v66 = *v19;
    v65 = v19[1];
    v67 = v65 + v31 * v20 + 2 * v18;
    if (!v65)
      v67 = 0;
    v68 = v66 + v30 * v20 + 2 * v18;
    v70 = *v23;
    v69 = v23[1];
    v71 = v69 + v26 * v16 + 2 * v15;
    if (!v69)
      v71 = 0;
    result = (_QWORD *)(v70 + v25 * v16 + 2 * v15);
    v72 = v64;
    v73 = v62;
    do
    {
      v74 = v14;
      v75 = (unsigned __int16 *)result;
      v76 = (unsigned __int16 *)v71;
      v77 = (_WORD *)v67;
      for (i = (_WORD *)v68; v74; --v74)
      {
        if (v76)
        {
          v79 = (float)(*v76 >> v72) - v38;
          v80 = (float)(v76[1] >> v72) - v38;
          v76 += 2;
          v81 = v40 * v80;
          v82 = (float)(v42 * v80) + (float)(v79 * v41);
          v83 = v44 * v79;
        }
        else
        {
          v83 = 0.0;
          v82 = 0.0;
          v81 = 0.0;
        }
        v84 = *v75++;
        v85 = v39 * (float)((float)(int)(v84 >> v72) - v37);
        v86 = v81 + v85;
        v87 = v82 + v85;
        v88 = v83 + v85;
        v89 = (float)((float)((float)(v51 * v87) + (float)(v50 * v86)) + (float)(v52 * v88)) + v45;
        v90 = v47;
        if (v89 <= v47)
        {
          v90 = (float)((float)((float)(v51 * v87) + (float)(v50 * v86)) + (float)(v52 * v88)) + v45;
          if (v89 < v45)
            v90 = v45;
        }
        *i++ = llroundf(v90) << v73;
        if (v77)
        {
          v91 = (float)((float)(v46 + (float)(v86 * v53)) + (float)(v87 * v54)) + (float)(v88 * v55);
          v92 = v49;
          if (v91 <= v49)
          {
            v92 = (float)((float)(v46 + (float)(v86 * v53)) + (float)(v87 * v54)) + (float)(v88 * v55);
            if (v91 < v48)
              v92 = v48;
          }
          v93 = (float)((float)(v46 + (float)(v86 * v56)) + (float)(v87 * v57)) + (float)(v88 * v58);
          *v77 = llroundf(v92) << v73;
          v94 = v49;
          if (v93 <= v49)
          {
            v94 = v93;
            if (v93 < v48)
              v94 = v48;
          }
          v77[1] = llroundf(v94) << v73;
          v77 += 2;
        }
      }
      result = (_QWORD *)((char *)result + v25);
      v71 += v26;
      v68 += v30;
      v67 += v31;
      ++v13;
    }
    while (v13 != v17);
    if (v28 && v33)
    {
      v95 = 2 * v14;
      do
      {
        result = memcpy(v34, v29, v95);
        v29 += v27;
        v34 += v32;
        --v17;
      }
      while (v17);
    }
    else if (v33)
    {
      do
      {
        if (v14)
          result = memset(v34, 255, 2 * v14);
        v34 += v32;
        --v17;
      }
      while (v17);
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Tone_Mat_TRC_BGRA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Tone_Mat_TRC_BGRA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf444_TRC_Tone_Mat_TRC_BGRA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unsigned int v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  unsigned __int16 *v63;
  uint64_t v64;
  unsigned __int16 *v65;
  unsigned __int16 *v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  unsigned int v72;
  float v73;
  float v74;
  BOOL v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v90;
  float v94;
  float v95;
  float v98;
  float v99;
  float v100;
  char v102;
  float v104;
  float v105;
  float v106;

  v5 = *(_QWORD *)(result + 28);
  v6 = *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = v7 + *(_QWORD *)(result + 44);
    v12 = v8 - v7;
    v13 = *((_QWORD *)result + 19);
    v14 = (uint64_t *)*((_QWORD *)result + 7);
    v15 = (uint64_t *)*((_QWORD *)result + 8);
    v16 = *v15;
    v17 = v15[1];
    v18 = v15[2];
    v19 = **((_QWORD **)result + 17);
    *(float *)&v20 = (float)*(unsigned int *)(v13 + 128);
    v21 = 8191.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    v22 = (float)v20;
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    v23 = (float)LODWORD(a5);
    v24 = v21 * *(float *)v13;
    v25 = v21 * *(float *)(v13 + 8);
    v26 = v21 * *(float *)(v13 + 16);
    v27 = v21 * *(float *)(v13 + 20);
    v28 = v21 * *(float *)(v13 + 28);
    v29 = *(float *)(v13 + 72);
    v30 = *(float *)(v13 + 76);
    v31 = *(float *)(v13 + 80);
    v32 = *(float *)(v13 + 84);
    v33 = *(float *)(v13 + 88);
    v34 = *(float *)(v13 + 92);
    v35 = *(float *)(v13 + 96);
    v36 = *(float *)(v13 + 100);
    v37 = v13 + 164;
    v38 = v13 + 16548;
    v39 = v13 + 32932;
    v40 = *(float *)(v13 + 104);
    v41 = *(float *)(v13 + 108);
    v42 = *(float *)(v13 + 112);
    v43 = *(float *)(v13 + 116);
    v44 = *(float *)(v13 + 120);
    v45 = (_QWORD *)*((_QWORD *)result + 16);
    v46 = *((_QWORD *)result + 14);
    v47 = *((_QWORD *)result + 13) * a2 / v6 + *((_QWORD *)result + 15);
    v48 = *(_QWORD *)(result + 36);
    v49 = *(unsigned __int8 *)(v13 + 124);
    if (v49 >= 0x11)
      v50 = 0;
    else
      v50 = 16 - v49;
    result = (unsigned __int8 *)*(unsigned __int8 *)(v13 + 161);
    v51 = *(unsigned __int8 *)(v13 + 160);
    v52 = *(unsigned __int8 *)(v13 + 159);
    v53 = *(unsigned __int8 *)(v13 + 158);
    v54 = *v45 + v47 * v19 + 4 * v46;
    v55 = v14[2];
    if (v55)
      v56 = v55 + v18 * v11 + 2 * v48;
    else
      v56 = 0;
    v58 = *v14;
    v57 = v14[1];
    v59 = v57 + v17 * v11 + 2 * v48;
    if (!v57)
      v59 = 0;
    v60 = v58 + v16 * v11 + 2 * v48;
    v61 = v50;
    do
    {
      if (v10)
      {
        v62 = v10;
        v63 = (unsigned __int16 *)v60;
        v64 = v54;
        v65 = (unsigned __int16 *)v56;
        v66 = (unsigned __int16 *)v59;
        do
        {
          if (v66)
          {
            v67 = (float)(*v66 >> v61) - v23;
            v68 = (float)(v66[1] >> v61) - v23;
            v66 += 2;
            v69 = v25 * v68;
            v70 = (float)(v27 * v68) + (float)(v67 * v26);
            v71 = v28 * v67;
          }
          else
          {
            v71 = 0.0;
            v70 = 0.0;
            v69 = 0.0;
          }
          v72 = *v63++;
          v73 = v24 * (float)((float)(int)(v72 >> v61) - v22);
          v74 = v69 + v73;
          v75 = (float)(v69 + v73) <= 8191.0;
          v76 = 8191.0;
          if (v75)
          {
            v76 = v74;
            if (v74 < 0.0)
              v76 = 0.0;
          }
          v77 = v70 + v73;
          v75 = (float)(v70 + v73) <= 8191.0;
          v78 = 8191.0;
          if (v75)
          {
            v78 = v77;
            if (v77 < 0.0)
              v78 = 0.0;
          }
          v79 = v71 + v73;
          v80 = 8191.0;
          if (v79 <= 8191.0)
          {
            v80 = v79;
            if (v79 < 0.0)
              v80 = 0.0;
          }
          if (v65)
          {
            v82 = *v65++;
            v81 = v82;
          }
          else
          {
            v81 = 0;
          }
          _H31 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S31, H31 }
          _H9 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          v90 = llroundf(fminf(fmaxf(v80, 0.0), 8191.0));
          __asm { FCVT            S8, H9 }
          _H9 = *(_WORD *)(v37 + 2 * v90);
          __asm { FCVT            S10, H9 }
          v94 = (float)((float)((float)(v42 * _S8) + (float)(v41 * _S31)) + (float)(v43 * _S10))
              + (float)(v44 * fmaxf(_S31, fmaxf(_S8, _S10)));
          v95 = 8191.0;
          if (v94 <= 8191.0)
          {
            v95 = v94;
            if (v94 < 0.0)
              v95 = 0.0;
          }
          _H9 = *(_WORD *)(v38 + 2 * llroundf(v95));
          __asm { FCVT            S11, H9 }
          v98 = _S31 * _S11;
          v99 = _S8 * _S11;
          v100 = _S10 * _S11;
          _H10 = *(_WORD *)(v39
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v30 * v99) + (float)(v98 * v29)) + (float)((float)(_S10 * _S11) * v31), 0.0), 8191.0)));
          v102 = llroundf((float)v81 * 0.0038911);
          if (!v65)
            v102 = -1;
          __asm { FCVT            S11, H10 }
          v104 = 255.0;
          if (_S11 <= 255.0)
          {
            v104 = _S11;
            if (_S11 < 0.0)
              v104 = 0.0;
          }
          v105 = (float)((float)(v33 * v99) + (float)(v98 * v32)) + (float)(v100 * v34);
          v106 = (float)((float)(v36 * v99) + (float)(v98 * v35)) + (float)(v100 * v40);
          _H8 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v105, 0.0), 8191.0)));
          _H31 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v106, 0.0), 8191.0)));
          *(_BYTE *)(v64 + v53) = llroundf(v104);
          __asm { FCVT            S10, H8 }
          _S9 = 255.0;
          if (_S10 <= 255.0)
          {
            if (_S10 >= 0.0)
              __asm { FCVT            S9, H8 }
            else
              _S9 = 0.0;
          }
          *(_BYTE *)(v64 + v52) = llroundf(_S9);
          __asm { FCVT            S9, H31 }
          _S8 = 255.0;
          if (_S9 <= 255.0)
          {
            if (_S9 >= 0.0)
              __asm { FCVT            S8, H31 }
            else
              _S8 = 0.0;
          }
          *(_BYTE *)(v64 + v51) = llroundf(_S8);
          result[v64] = v102;
          v64 += 4;
          --v62;
        }
        while (v62);
      }
      v60 += v16;
      v59 += v17;
      v56 += v18;
      v54 += v19;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Mat_TRC_BGRA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Mat_TRC_BGRA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf444_TRC_Mat_TRC_BGRA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unsigned int v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  unsigned __int16 *v58;
  uint64_t v59;
  unsigned __int16 *v60;
  unsigned __int16 *v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  unsigned int v67;
  float v68;
  float v69;
  BOOL v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  unsigned int v76;
  unsigned int v77;
  char v89;
  float v91;
  float v92;
  float v93;

  v5 = *(_QWORD *)(result + 28);
  v6 = *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = v7 + *(_QWORD *)(result + 44);
    v12 = v8 - v7;
    v13 = *((_QWORD *)result + 19);
    v14 = (uint64_t *)*((_QWORD *)result + 7);
    v15 = (uint64_t *)*((_QWORD *)result + 8);
    v16 = *v15;
    v17 = v15[1];
    v18 = v15[2];
    v19 = **((_QWORD **)result + 17);
    *(float *)&v20 = (float)*(unsigned int *)(v13 + 128);
    v21 = 8191.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    v22 = (float)v20;
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    v23 = (float)LODWORD(a5);
    v24 = v21 * *(float *)v13;
    v25 = v21 * *(float *)(v13 + 8);
    v26 = v21 * *(float *)(v13 + 16);
    v27 = v21 * *(float *)(v13 + 20);
    v28 = v21 * *(float *)(v13 + 28);
    v29 = *(float *)(v13 + 72);
    v30 = *(float *)(v13 + 76);
    v31 = *(float *)(v13 + 80);
    v32 = *(float *)(v13 + 84);
    v33 = *(float *)(v13 + 88);
    v34 = *(float *)(v13 + 92);
    v35 = *(float *)(v13 + 96);
    v36 = *(float *)(v13 + 100);
    v37 = *(float *)(v13 + 104);
    v38 = v13 + 164;
    v39 = v13 + 16548;
    v40 = (_QWORD *)*((_QWORD *)result + 16);
    v41 = *((_QWORD *)result + 14);
    v42 = *((_QWORD *)result + 13) * a2 / v6 + *((_QWORD *)result + 15);
    v43 = *(_QWORD *)(result + 36);
    v44 = *(unsigned __int8 *)(v13 + 124);
    if (v44 >= 0x11)
      v45 = 0;
    else
      v45 = 16 - v44;
    v46 = *(unsigned __int8 *)(v13 + 161);
    result = (unsigned __int8 *)*(unsigned __int8 *)(v13 + 160);
    v47 = *(unsigned __int8 *)(v13 + 159);
    v48 = *(unsigned __int8 *)(v13 + 158);
    v49 = *v40 + v42 * v19 + 4 * v41;
    v50 = v14[2];
    if (v50)
      v51 = v50 + v18 * v11 + 2 * v43;
    else
      v51 = 0;
    v53 = *v14;
    v52 = v14[1];
    v54 = v52 + v17 * v11 + 2 * v43;
    if (!v52)
      v54 = 0;
    v55 = v53 + v16 * v11 + 2 * v43;
    v56 = v45;
    do
    {
      if (v10)
      {
        v57 = v10;
        v58 = (unsigned __int16 *)v55;
        v59 = v49;
        v60 = (unsigned __int16 *)v51;
        v61 = (unsigned __int16 *)v54;
        do
        {
          if (v61)
          {
            v62 = (float)(*v61 >> v56) - v23;
            v63 = (float)(v61[1] >> v56) - v23;
            v61 += 2;
            v64 = v25 * v63;
            v65 = (float)(v27 * v63) + (float)(v62 * v26);
            v66 = v28 * v62;
          }
          else
          {
            v66 = 0.0;
            v65 = 0.0;
            v64 = 0.0;
          }
          v67 = *v58++;
          v68 = v24 * (float)((float)(int)(v67 >> v56) - v22);
          v69 = v64 + v68;
          v70 = (float)(v64 + v68) <= 8191.0;
          v71 = 8191.0;
          if (v70)
          {
            v71 = v69;
            if (v69 < 0.0)
              v71 = 0.0;
          }
          v72 = v65 + v68;
          v70 = (float)(v65 + v68) <= 8191.0;
          v73 = 8191.0;
          if (v70)
          {
            v73 = v72;
            if (v72 < 0.0)
              v73 = 0.0;
          }
          v74 = v66 + v68;
          v75 = 8191.0;
          if (v74 <= 8191.0)
          {
            v75 = v74;
            if (v74 < 0.0)
              v75 = 0.0;
          }
          if (v60)
          {
            v77 = *v60++;
            v76 = v77;
          }
          else
          {
            v76 = 0;
          }
          _H27 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          _H28 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm
          {
            FCVT            S27, H27
            FCVT            S28, H28
          }
          _H29 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          _H30 = *(_WORD *)(v39
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v30 * _S28) + (float)(_S27 * v29)) + (float)(_S29 * v31), 0.0), 8191.0)));
          v89 = llroundf((float)v76 * 0.0038911);
          if (!v60)
            v89 = -1;
          __asm { FCVT            S31, H30 }
          v91 = 255.0;
          if (_S31 <= 255.0)
          {
            v91 = _S31;
            if (_S31 < 0.0)
              v91 = 0.0;
          }
          v92 = (float)((float)(v33 * _S28) + (float)(_S27 * v32)) + (float)(_S29 * v34);
          v93 = (float)((float)(v36 * _S28) + (float)(_S27 * v35)) + (float)(_S29 * v37);
          _H28 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          *(_BYTE *)(v59 + v48) = llroundf(v91);
          __asm { FCVT            S30, H28 }
          _S29 = 255.0;
          if (_S30 <= 255.0)
          {
            if (_S30 >= 0.0)
              __asm { FCVT            S29, H28 }
            else
              _S29 = 0.0;
          }
          *(_BYTE *)(v59 + v47) = llroundf(_S29);
          __asm { FCVT            S29, H27 }
          _S28 = 255.0;
          if (_S29 <= 255.0)
          {
            if (_S29 >= 0.0)
              __asm { FCVT            S28, H27 }
            else
              _S28 = 0.0;
          }
          result[v59] = llroundf(_S28);
          *(_BYTE *)(v59 + v46) = v89;
          v59 += 4;
          --v57;
        }
        while (v57);
      }
      v55 += v16;
      v54 += v17;
      v51 += v18;
      v49 += v19;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_xf444_rgb_BGRA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_rgb_BGRA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf444_rgb_BGRA_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  unsigned __int16 *v45;
  uint64_t v46;
  unsigned __int16 *v47;
  unsigned __int16 *v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  float v57;
  char v58;
  float v59;
  float v60;
  unsigned __int8 v61;
  float v62;
  float v63;
  char v64;
  float v65;
  float v66;

  v2 = *(_QWORD *)(result + 28);
  v3 = *result;
  v4 = v2 * a2 / v3;
  v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    v6 = 0;
    v7 = *(_QWORD *)(result + 20);
    v8 = v4 + *(_QWORD *)(result + 44);
    v9 = v5 - v4;
    v10 = *((_QWORD *)result + 19);
    v11 = (uint64_t *)*((_QWORD *)result + 7);
    v12 = (uint64_t *)*((_QWORD *)result + 8);
    v13 = *v12;
    v14 = v12[1];
    v15 = v12[2];
    v16 = **((_QWORD **)result + 17);
    *(float *)&v17 = (float)*(unsigned int *)(v10 + 128);
    *(float *)&v18 = (float)*(unsigned int *)(v10 + 136);
    v19 = *(float *)&v18 / *(float *)&v17;
    LOWORD(v17) = *(_WORD *)(v10 + 140);
    v20 = (float)v17;
    LOWORD(v18) = *(_WORD *)(v10 + 142);
    v21 = (float)v18;
    v22 = v19 * *(float *)v10;
    v23 = v19 * *(float *)(v10 + 8);
    v24 = v19 * *(float *)(v10 + 16);
    v25 = v19 * *(float *)(v10 + 20);
    v26 = v19 * *(float *)(v10 + 28);
    v27 = (_QWORD *)*((_QWORD *)result + 16);
    v28 = *((_QWORD *)result + 14);
    v29 = *((_QWORD *)result + 13) * a2 / v3 + *((_QWORD *)result + 15);
    v30 = *(_QWORD *)(result + 36);
    v31 = *(unsigned __int8 *)(v10 + 124);
    if (v31 >= 0x11)
      v32 = 0;
    else
      v32 = 16 - v31;
    v33 = *(unsigned __int8 *)(v10 + 161);
    v34 = *(unsigned __int8 *)(v10 + 160);
    v35 = *(unsigned __int8 *)(v10 + 159);
    result = (unsigned __int8 *)*(unsigned __int8 *)(v10 + 158);
    v36 = *v27 + v29 * v16 + 4 * v28;
    v37 = v11[2];
    if (v37)
      v38 = v37 + v15 * v8 + 2 * v30;
    else
      v38 = 0;
    v40 = *v11;
    v39 = v11[1];
    v41 = v39 + v14 * v8 + 2 * v30;
    if (!v39)
      v41 = 0;
    v42 = v40 + v13 * v8 + 2 * v30;
    v43 = v32;
    while (!v7)
    {
LABEL_30:
      v42 += v13;
      v41 += v14;
      v38 += v15;
      v36 += v16;
      if (++v6 == v9)
        return result;
    }
    v44 = v7;
    v45 = (unsigned __int16 *)v42;
    v46 = v36;
    v47 = (unsigned __int16 *)v38;
    v48 = (unsigned __int16 *)v41;
    while (1)
    {
      if (v48)
      {
        v49 = (float)(*v48 >> v43) - v21;
        v50 = (float)(v48[1] >> v43) - v21;
        v48 += 2;
        v51 = v23 * v50;
        v52 = (float)(v25 * v50) + (float)(v49 * v24);
        v53 = v26 * v49;
        if (!v47)
          goto LABEL_17;
      }
      else
      {
        v53 = 0.0;
        v52 = 0.0;
        v51 = 0.0;
        if (!v47)
        {
LABEL_17:
          v54 = 0;
          goto LABEL_18;
        }
      }
      v55 = *v47++;
      v54 = v55;
LABEL_18:
      v56 = *v45++;
      v57 = v22 * (float)((float)(int)(v56 >> v43) - v20);
      v58 = llroundf((float)v54 * 0.0038911);
      v59 = v51 + v57;
      if (!v47)
        v58 = -1;
      v60 = 255.0;
      if (v59 <= 255.0)
      {
        v60 = v59;
        if (v59 < 0.0)
          v60 = 0.0;
      }
      v61 = llroundf(v60);
      v62 = v52 + v57;
      result[v46] = v61;
      v63 = 255.0;
      if (v62 <= 255.0)
      {
        v63 = v62;
        if (v62 < 0.0)
          v63 = 0.0;
      }
      v64 = llroundf(v63);
      v65 = v53 + v57;
      *(_BYTE *)(v46 + v35) = v64;
      v66 = 255.0;
      if (v65 <= 255.0)
      {
        v66 = v65;
        if (v65 < 0.0)
          v66 = 0.0;
      }
      *(_BYTE *)(v46 + v34) = llroundf(v66);
      *(_BYTE *)(v46 + v33) = v58;
      v46 += 4;
      if (!--v44)
        goto LABEL_30;
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Tone_Mat_TRC_l10r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Tone_Mat_TRC_l10r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf444_TRC_Tone_Mat_TRC_l10r_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  uint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  unsigned int v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int16 *v62;
  unsigned int *v63;
  unsigned __int16 *v64;
  unsigned __int16 *v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  unsigned int v71;
  float v72;
  float v73;
  BOOL v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v89;
  float v93;
  float v94;
  float v95;
  unsigned int v96;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v108;
  float v109;
  float v111;
  float v112;
  float v114;
  float v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  float v119;

  v5 = *(_QWORD *)(result + 28);
  v6 = *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = v7 + *(_QWORD *)(result + 44);
    v12 = v8 - v7;
    v13 = *((_QWORD *)result + 19);
    v14 = (_QWORD *)*((_QWORD *)result + 7);
    v15 = (uint64_t *)*((_QWORD *)result + 8);
    v16 = *v15;
    v17 = v15[1];
    v18 = v15[2];
    v19 = **((_QWORD **)result + 17);
    *(float *)&v20 = (float)*(unsigned int *)(v13 + 128);
    v21 = 8191.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    v22 = (float)v20;
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    v23 = (float)LODWORD(a5);
    v24 = v21 * *(float *)v13;
    v25 = v21 * *(float *)(v13 + 8);
    v26 = v21 * *(float *)(v13 + 16);
    v27 = v21 * *(float *)(v13 + 20);
    v28 = *(float *)(v13 + 28);
    v29 = v21 * v28;
    LOWORD(v28) = *(_WORD *)(v13 + 144);
    v30 = (float)LODWORD(v28);
    v31 = *(float *)(v13 + 72);
    v32 = *(float *)(v13 + 76);
    v33 = *(float *)(v13 + 80);
    v34 = *(float *)(v13 + 84);
    v35 = *(float *)(v13 + 88);
    v36 = *(float *)(v13 + 92);
    v37 = *(float *)(v13 + 96);
    v38 = *(float *)(v13 + 100);
    v39 = v13 + 164;
    v40 = v13 + 16548;
    v41 = v13 + 32932;
    v42 = *(float *)(v13 + 104);
    v43 = *(float *)(v13 + 108);
    v44 = *(float *)(v13 + 112);
    v45 = *(float *)(v13 + 116);
    v46 = *(float *)(v13 + 120);
    v47 = *((_QWORD *)result + 14);
    v48 = *((_QWORD *)result + 13) * a2 / v6;
    v49 = (_QWORD *)*((_QWORD *)result + 16);
    v50 = v48 + *((_QWORD *)result + 15);
    v51 = *(_QWORD *)(result + 36);
    v52 = *(unsigned __int8 *)(v13 + 124);
    v53 = 16 - v52;
    if (v52 >= 0x11)
      v53 = 0;
    result = (unsigned __int8 *)(*v49 + v50 * v19 + 16 * v47);
    v54 = v14[2];
    if (v54)
      v55 = v54 + v18 * v11 + 2 * v51;
    else
      v55 = 0;
    v58 = v14;
    v57 = *v14;
    v56 = v58[1];
    if (v56)
      v59 = v56 + v17 * v11 + 2 * v51;
    else
      v59 = 0;
    v60 = v57 + v16 * v11 + 2 * v51;
    do
    {
      if (v10)
      {
        v61 = v10;
        v62 = (unsigned __int16 *)v60;
        v63 = (unsigned int *)result;
        v64 = (unsigned __int16 *)v55;
        v65 = (unsigned __int16 *)v59;
        do
        {
          if (v65)
          {
            v66 = (float)(*v65 >> v53) - v23;
            v67 = (float)(v65[1] >> v53) - v23;
            v65 += 2;
            v68 = v25 * v67;
            v69 = (float)(v27 * v67) + (float)(v66 * v26);
            v70 = v29 * v66;
          }
          else
          {
            v70 = 0.0;
            v69 = 0.0;
            v68 = 0.0;
          }
          v71 = *v62++;
          v72 = v24 * (float)((float)(int)(v71 >> v53) - v22);
          v73 = v68 + v72;
          v74 = (float)(v68 + v72) <= 8191.0;
          v75 = 8191.0;
          if (v74)
          {
            v75 = v73;
            if (v73 < 0.0)
              v75 = 0.0;
          }
          v76 = v69 + v72;
          v74 = (float)(v69 + v72) <= 8191.0;
          v77 = 8191.0;
          if (v74)
          {
            v77 = v76;
            if (v76 < 0.0)
              v77 = 0.0;
          }
          v78 = v70 + v72;
          v79 = 8191.0;
          if (v78 <= 8191.0)
          {
            v79 = v78;
            if (v78 < 0.0)
              v79 = 0.0;
          }
          if (v64)
          {
            v81 = *v64++;
            v80 = v81;
          }
          else
          {
            v80 = 0;
          }
          _H10 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          _H12 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          v89 = llroundf(fminf(fmaxf(v79, 0.0), 8191.0));
          __asm { FCVT            S11, H12 }
          _H12 = *(_WORD *)(v39 + 2 * v89);
          __asm { FCVT            S12, H12 }
          v93 = (float)((float)((float)(v44 * _S11) + (float)(v43 * _S10)) + (float)(v45 * _S12))
              + (float)(v46 * fmaxf(_S10, fmaxf(_S11, _S12)));
          v94 = 8191.0;
          if (v93 <= 8191.0)
          {
            v94 = v93;
            if (v93 < 0.0)
              v94 = 0.0;
          }
          if (v64)
          {
            v95 = (double)v80 * 3.0 / 65535.0;
            v96 = llroundf(v95);
          }
          else
          {
            v96 = 3;
          }
          _H13 = *(_WORD *)(v40 + 2 * llroundf(v94));
          __asm { FCVT            S13, H13 }
          v99 = _S10 * _S13;
          v100 = _S11 * _S13;
          v101 = _S12 * _S13;
          v102 = (float)((float)(v32 * v100) + (float)(v99 * v31)) + (float)(v101 * v33);
          v103 = (float)((float)(v35 * v100) + (float)(v99 * v34)) + (float)(v101 * v36);
          _S10 = (float)((float)(v38 * v100) + (float)(v99 * v37)) + (float)(v101 * v42);
          _H11 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v102, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v103, 0.0), 8191.0)));
          LOWORD(_S10) = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(_S10, 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          v108 = v30 + _S10;
          v74 = (float)(v30 + _S10) <= 1023.0;
          v109 = 1023.0;
          if (v74)
          {
            v109 = v108;
            if (v108 < 0.0)
              v109 = 0.0;
          }
          __asm { FCVT            S12, H12 }
          v111 = v30 + _S12;
          v74 = (float)(v30 + _S12) <= 1023.0;
          v112 = 1023.0;
          if (v74)
          {
            v112 = v111;
            if (v111 < 0.0)
              v112 = 0.0;
          }
          __asm { FCVT            S11, H11 }
          v114 = v30 + _S11;
          v74 = (float)(v30 + _S11) <= 1023.0;
          v115 = 1023.0;
          if (v74)
          {
            v115 = v114;
            if (v114 < 0.0)
              v115 = 0.0;
          }
          v116 = llroundf(v109);
          v117 = llroundf(v112) << 10;
          v118 = llroundf(v115);
          v119 = (float)v96;
          if ((float)v96 > 3.0)
            v119 = 3.0;
          *v63++ = v117 | v116 | (llroundf(v119) << 30) | (v118 << 20);
          --v61;
        }
        while (v61);
      }
      v60 += v16;
      v59 += v17;
      v55 += v18;
      result += v19;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Mat_TRC_l10r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Mat_TRC_l10r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf444_TRC_Mat_TRC_l10r_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  uint64_t v46;
  unsigned int v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int16 *v57;
  unsigned int *v58;
  unsigned __int16 *v59;
  unsigned __int16 *v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  unsigned int v66;
  float v67;
  float v68;
  BOOL v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  unsigned int v75;
  unsigned int v76;
  float v77;
  unsigned int v78;
  unsigned int v80;
  float v92;
  float v93;
  float v94;
  float v98;
  float v99;
  float v101;
  float v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  float v106;

  v5 = *(_QWORD *)(result + 28);
  v6 = *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = v7 + *(_QWORD *)(result + 44);
    v12 = v8 - v7;
    v13 = *((_QWORD *)result + 19);
    v14 = (_QWORD *)*((_QWORD *)result + 7);
    v15 = (uint64_t *)*((_QWORD *)result + 8);
    v16 = *v15;
    v17 = v15[1];
    v18 = v15[2];
    v19 = **((_QWORD **)result + 17);
    *(float *)&v20 = (float)*(unsigned int *)(v13 + 128);
    v21 = 8191.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    v22 = (float)v20;
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    v23 = (float)LODWORD(a5);
    v24 = v21 * *(float *)v13;
    v25 = v21 * *(float *)(v13 + 8);
    v26 = v21 * *(float *)(v13 + 16);
    v27 = v21 * *(float *)(v13 + 20);
    v28 = *(float *)(v13 + 28);
    v29 = v21 * v28;
    LOWORD(v28) = *(_WORD *)(v13 + 144);
    v30 = (float)LODWORD(v28);
    v31 = *(float *)(v13 + 72);
    v32 = *(float *)(v13 + 76);
    v33 = *(float *)(v13 + 80);
    v34 = *(float *)(v13 + 84);
    v35 = *(float *)(v13 + 88);
    v36 = *(float *)(v13 + 92);
    v37 = *(float *)(v13 + 96);
    v38 = *(float *)(v13 + 100);
    v39 = *(float *)(v13 + 104);
    v40 = v13 + 164;
    v41 = v13 + 16548;
    v42 = *((_QWORD *)result + 14);
    v43 = *((_QWORD *)result + 13) * a2 / v6;
    v44 = (_QWORD *)*((_QWORD *)result + 16);
    v45 = v43 + *((_QWORD *)result + 15);
    v46 = *(_QWORD *)(result + 36);
    v47 = *(unsigned __int8 *)(v13 + 124);
    v48 = 16 - v47;
    if (v47 >= 0x11)
      v48 = 0;
    v49 = *v44 + v45 * v19 + 16 * v42;
    v50 = v14[2];
    if (v50)
      result = (unsigned __int8 *)(v50 + v18 * v11 + 2 * v46);
    else
      result = 0;
    v53 = v14;
    v52 = *v14;
    v51 = v53[1];
    if (v51)
      v54 = v51 + v17 * v11 + 2 * v46;
    else
      v54 = 0;
    v55 = v52 + v16 * v11 + 2 * v46;
    do
    {
      if (v10)
      {
        v56 = v10;
        v57 = (unsigned __int16 *)v55;
        v58 = (unsigned int *)v49;
        v59 = (unsigned __int16 *)result;
        v60 = (unsigned __int16 *)v54;
        do
        {
          if (v60)
          {
            v61 = (float)(*v60 >> v48) - v23;
            v62 = (float)(v60[1] >> v48) - v23;
            v60 += 2;
            v63 = v25 * v62;
            v64 = (float)(v27 * v62) + (float)(v61 * v26);
            v65 = v29 * v61;
          }
          else
          {
            v65 = 0.0;
            v64 = 0.0;
            v63 = 0.0;
          }
          v66 = *v57++;
          v67 = v24 * (float)((float)(int)(v66 >> v48) - v22);
          v68 = v63 + v67;
          v69 = (float)(v63 + v67) <= 8191.0;
          v70 = 8191.0;
          if (v69)
          {
            v70 = v68;
            if (v68 < 0.0)
              v70 = 0.0;
          }
          v71 = v64 + v67;
          v69 = (float)(v64 + v67) <= 8191.0;
          v72 = 8191.0;
          if (v69)
          {
            v72 = v71;
            if (v71 < 0.0)
              v72 = 0.0;
          }
          v73 = v65 + v67;
          v74 = 8191.0;
          if (v73 <= 8191.0)
          {
            v74 = v73;
            if (v73 < 0.0)
              v74 = 0.0;
          }
          if (v59 && (v76 = *v59, ++v59, v75 = v76, v59))
          {
            v77 = (double)v75 * 3.0 / 65535.0;
            v78 = llroundf(v77);
          }
          else
          {
            v78 = 3;
          }
          _H31 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          v80 = llroundf(fminf(fmaxf(v72, 0.0), 8191.0));
          __asm { FCVT            S8, H31 }
          _H31 = *(_WORD *)(v40 + 2 * v80);
          __asm { FCVT            S10, H31 }
          _H31 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          __asm { FCVT            S9, H31 }
          _H31 = *(_WORD *)(v41
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v38 * _S10) + (float)(_S8 * v37)) + (float)(_S9 * v39), 0.0), 8191.0)));
          __asm { FCVT            S31, H31 }
          v92 = v30 + _S31;
          v69 = (float)(v30 + _S31) <= 1023.0;
          v93 = 1023.0;
          if (v69)
          {
            v93 = v92;
            if (v92 < 0.0)
              v93 = 0.0;
          }
          v94 = (float)((float)(v32 * _S10) + (float)(_S8 * v31)) + (float)(_S9 * v33);
          _S8 = (float)((float)(v35 * _S10) + (float)(_S8 * v34)) + (float)(_S9 * v36);
          _H9 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          LOWORD(_S8) = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(_S8, 0.0), 8191.0)));
          __asm { FCVT            S8, H8 }
          v98 = v30 + _S8;
          v69 = (float)(v30 + _S8) <= 1023.0;
          v99 = 1023.0;
          if (v69)
          {
            v99 = v98;
            if (v98 < 0.0)
              v99 = 0.0;
          }
          __asm { FCVT            S9, H9 }
          v101 = v30 + _S9;
          v69 = (float)(v30 + _S9) <= 1023.0;
          v102 = 1023.0;
          if (v69)
          {
            v102 = v101;
            if (v101 < 0.0)
              v102 = 0.0;
          }
          v103 = llroundf(v93);
          v104 = llroundf(v99) << 10;
          v105 = llroundf(v102);
          v106 = (float)v78;
          if ((float)v78 > 3.0)
            v106 = 3.0;
          *v58++ = v104 | v103 | (llroundf(v106) << 30) | (v105 << 20);
          --v56;
        }
        while (v56);
      }
      v55 += v16;
      v54 += v17;
      result += v18;
      v49 += v19;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_xf444_rgb_l10r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_rgb_l10r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf444_rgb_l10r_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  unsigned __int16 *v43;
  unsigned int *v44;
  unsigned __int16 *v45;
  unsigned __int16 *v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  unsigned int v52;
  float v53;
  unsigned int v54;
  unsigned int v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  float v66;

  v2 = *(_QWORD *)(result + 28);
  v3 = *result;
  v4 = v2 * a2 / v3;
  v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    v6 = 0;
    v7 = *(_QWORD *)(result + 20);
    v8 = v4 + *(_QWORD *)(result + 44);
    v9 = v5 - v4;
    v10 = *((_QWORD *)result + 19);
    v12 = (uint64_t *)*((_QWORD *)result + 7);
    v11 = (uint64_t *)*((_QWORD *)result + 8);
    v13 = *v11;
    v14 = v11[1];
    v15 = v11[2];
    v16 = **((_QWORD **)result + 17);
    *(float *)&v17 = (float)*(unsigned int *)(v10 + 128);
    *(float *)&v18 = (float)*(unsigned int *)(v10 + 136);
    v19 = *(float *)&v18 / *(float *)&v17;
    LOWORD(v17) = *(_WORD *)(v10 + 140);
    v20 = (float)v17;
    LOWORD(v18) = *(_WORD *)(v10 + 142);
    v21 = (float)v18;
    v22 = v19 * *(float *)v10;
    v23 = v19 * *(float *)(v10 + 8);
    v24 = v19 * *(float *)(v10 + 16);
    v25 = v19 * *(float *)(v10 + 20);
    v26 = *(float *)(v10 + 28);
    v27 = v19 * v26;
    LOWORD(v26) = *(_WORD *)(v10 + 144);
    v28 = (float)LODWORD(v26);
    v29 = *((_QWORD *)result + 14);
    v30 = *((_QWORD *)result + 13) * a2 / v3;
    v31 = (_QWORD *)*((_QWORD *)result + 16);
    v32 = v30 + *((_QWORD *)result + 15);
    v33 = *(_QWORD *)(result + 36);
    LODWORD(v10) = *(unsigned __int8 *)(v10 + 124);
    v34 = 16 - v10;
    if (v10 >= 0x11)
      v34 = 0;
    v35 = *v31 + v32 * v16 + 16 * v29;
    v36 = v12[2];
    if (v36)
      v37 = v36 + v15 * v8 + 2 * v33;
    else
      v37 = 0;
    v39 = *v12;
    v38 = v12[1];
    v40 = v38 + v14 * v8 + 2 * v33;
    if (!v38)
      v40 = 0;
    result = (unsigned __int8 *)(v39 + v13 * v8 + 2 * v33);
    v41 = v34;
    while (!v7)
    {
LABEL_29:
      result += v13;
      v40 += v14;
      v37 += v15;
      v35 += v16;
      if (++v6 == v9)
        return result;
    }
    v42 = v7;
    v43 = (unsigned __int16 *)result;
    v44 = (unsigned int *)v35;
    v45 = (unsigned __int16 *)v37;
    v46 = (unsigned __int16 *)v40;
    while (1)
    {
      if (v46)
      {
        v47 = (float)(*v46 >> v41) - v21;
        v48 = (float)(v46[1] >> v41) - v21;
        v46 += 2;
        v49 = v23 * v48;
        v50 = (float)(v25 * v48) + (float)(v47 * v24);
        v51 = v27 * v47;
        if (v45)
          goto LABEL_14;
      }
      else
      {
        v51 = 0.0;
        v50 = 0.0;
        v49 = 0.0;
        if (v45)
        {
LABEL_14:
          v52 = *v45++;
          v53 = (double)v52 * 3.0 / 65535.0;
          v54 = llroundf(v53);
          goto LABEL_17;
        }
      }
      v54 = 3;
LABEL_17:
      v55 = *v43++;
      v56 = v22 * (float)((float)(int)(v55 >> v41) - v20);
      v57 = (float)(v51 + v56) + v28;
      v58 = 1023.0;
      if (v57 <= 1023.0)
      {
        v58 = v57;
        if (v57 < 0.0)
          v58 = 0.0;
      }
      v59 = (float)(v50 + v56) + v28;
      v60 = 1023.0;
      if (v59 <= 1023.0)
      {
        v60 = v59;
        if (v59 < 0.0)
          v60 = 0.0;
      }
      v61 = (float)(v49 + v56) + v28;
      v62 = 1023.0;
      if (v61 <= 1023.0)
      {
        v62 = v61;
        if (v61 < 0.0)
          v62 = 0.0;
      }
      v63 = llroundf(v58);
      v64 = llroundf(v60) << 10;
      v65 = llroundf(v62);
      v66 = (float)v54;
      if ((float)v54 > 3.0)
        v66 = 3.0;
      *v44++ = v64 | v63 | (llroundf(v66) << 30) | (v65 << 20);
      if (!--v42)
        goto LABEL_29;
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Tone_Mat_TRC_l64r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Tone_Mat_TRC_l64r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf444_TRC_Tone_Mat_TRC_l64r_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  uint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  uint64_t v49;
  unsigned int v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int16 *v60;
  _WORD *v61;
  __int16 *v62;
  unsigned __int16 *v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  unsigned int v69;
  float v70;
  float v71;
  BOOL v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  __int16 v78;
  __int16 v79;
  unsigned int v87;
  float v91;
  float v92;
  float v95;
  float v96;
  float v97;
  float v100;
  float v102;
  float v103;
  float v107;
  float v110;

  v5 = *(_QWORD *)(result + 28);
  v6 = *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = v7 + *(_QWORD *)(result + 44);
    v12 = v8 - v7;
    v13 = *((_QWORD *)result + 19);
    v14 = (_QWORD *)*((_QWORD *)result + 7);
    v15 = (uint64_t *)*((_QWORD *)result + 8);
    v16 = *v15;
    v17 = v15[1];
    v18 = v15[2];
    v19 = **((_QWORD **)result + 17);
    *(float *)&v20 = (float)*(unsigned int *)(v13 + 128);
    v21 = 8191.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    v22 = (float)v20;
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    v23 = (float)LODWORD(a5);
    v24 = v21 * *(float *)v13;
    v25 = v21 * *(float *)(v13 + 8);
    v26 = v21 * *(float *)(v13 + 16);
    v27 = v21 * *(float *)(v13 + 20);
    v28 = v21 * *(float *)(v13 + 28);
    v29 = *(float *)(v13 + 72);
    v30 = *(float *)(v13 + 76);
    v31 = *(float *)(v13 + 80);
    v32 = *(float *)(v13 + 84);
    v33 = *(float *)(v13 + 88);
    v34 = *(float *)(v13 + 92);
    v35 = *(float *)(v13 + 96);
    v36 = *(float *)(v13 + 100);
    v37 = v13 + 164;
    v38 = v13 + 16548;
    v39 = v13 + 32932;
    v40 = *(float *)(v13 + 104);
    v41 = *(float *)(v13 + 108);
    v42 = *(float *)(v13 + 112);
    v43 = *(float *)(v13 + 116);
    v44 = *(float *)(v13 + 120);
    v45 = *((_QWORD *)result + 14);
    v46 = *((_QWORD *)result + 13) * a2 / v6;
    v47 = (_QWORD *)*((_QWORD *)result + 16);
    v48 = v46 + *((_QWORD *)result + 15);
    v49 = *(_QWORD *)(result + 36);
    v50 = *(unsigned __int8 *)(v13 + 124);
    v51 = 16 - v50;
    if (v50 >= 0x11)
      v51 = 0;
    result = (unsigned __int8 *)(*v47 + v48 * v19 + 8 * v45);
    v52 = v14[2];
    if (v52)
      v53 = v52 + v18 * v11 + 2 * v49;
    else
      v53 = 0;
    v56 = v14;
    v55 = *v14;
    v54 = v56[1];
    if (v54)
      v57 = v54 + v17 * v11 + 2 * v49;
    else
      v57 = 0;
    v58 = v55 + v16 * v11 + 2 * v49;
    do
    {
      if (v10)
      {
        v59 = v10;
        v60 = (unsigned __int16 *)v58;
        v61 = result;
        v62 = (__int16 *)v53;
        v63 = (unsigned __int16 *)v57;
        do
        {
          if (v63)
          {
            v64 = (float)(*v63 >> v51) - v23;
            v65 = (float)(v63[1] >> v51) - v23;
            v63 += 2;
            v66 = v25 * v65;
            v67 = (float)(v27 * v65) + (float)(v64 * v26);
            v68 = v28 * v64;
          }
          else
          {
            v68 = 0.0;
            v67 = 0.0;
            v66 = 0.0;
          }
          v69 = *v60++;
          v70 = v24 * (float)((float)(int)(v69 >> v51) - v22);
          v71 = v66 + v70;
          v72 = (float)(v66 + v70) <= 8191.0;
          v73 = 8191.0;
          if (v72)
          {
            v73 = v71;
            if (v71 < 0.0)
              v73 = 0.0;
          }
          v74 = v67 + v70;
          v72 = (float)(v67 + v70) <= 8191.0;
          v75 = 8191.0;
          if (v72)
          {
            v75 = v74;
            if (v74 < 0.0)
              v75 = 0.0;
          }
          v76 = v68 + v70;
          v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            v77 = v76;
            if (v76 < 0.0)
              v77 = 0.0;
          }
          if (v62)
          {
            v79 = *v62++;
            v78 = v79;
          }
          else
          {
            v78 = 0;
          }
          _H31 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S31, H31 }
          _H9 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          v87 = llroundf(fminf(fmaxf(v77, 0.0), 8191.0));
          __asm { FCVT            S8, H9 }
          _H9 = *(_WORD *)(v37 + 2 * v87);
          __asm { FCVT            S10, H9 }
          v91 = (float)((float)((float)(v42 * _S8) + (float)(v41 * _S31)) + (float)(v43 * _S10))
              + (float)(v44 * fmaxf(_S31, fmaxf(_S8, _S10)));
          v92 = 8191.0;
          if (v91 <= 8191.0)
          {
            v92 = v91;
            if (v91 < 0.0)
              v92 = 0.0;
          }
          _H9 = *(_WORD *)(v38 + 2 * llroundf(v92));
          __asm { FCVT            S11, H9 }
          v95 = _S31 * _S11;
          v96 = _S8 * _S11;
          v97 = _S10 * _S11;
          _H12 = *(_WORD *)(v39
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v30 * v96) + (float)(v95 * v29)) + (float)((float)(_S10 * _S11) * v31), 0.0), 8191.0)));
          __asm { FCVT            S11, H12 }
          if (!v62)
            v78 = -1;
          v100 = 65535.0;
          if (_S11 <= 65535.0)
          {
            __asm { FCVT            S10, H12 }
            _NF = _S10 < 0.0;
            v100 = _S11;
            if (_NF)
              v100 = 0.0;
          }
          v102 = (float)((float)(v33 * v96) + (float)(v95 * v32)) + (float)(v97 * v34);
          v103 = (float)((float)(v36 * v96) + (float)(v95 * v35)) + (float)(v97 * v40);
          _H8 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v102, 0.0), 8191.0)));
          _H31 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v103, 0.0), 8191.0)));
          __asm { FCVT            S11, H8 }
          *v61 = llroundf(v100);
          v107 = 65535.0;
          if (_S11 <= 65535.0)
          {
            __asm { FCVT            S8, H8 }
            v107 = _S11;
            if (_S8 < 0.0)
              v107 = 0.0;
          }
          __asm { FCVT            S10, H31 }
          v61[1] = llroundf(v107);
          v110 = 65535.0;
          if (_S10 <= 65535.0)
          {
            __asm { FCVT            S31, H31 }
            v110 = _S10;
            if (_S31 < 0.0)
              v110 = 0.0;
          }
          v61[2] = llroundf(v110);
          v61[3] = v78;
          v61 += 4;
          --v59;
        }
        while (v59);
      }
      v58 += v16;
      v57 += v17;
      v53 += v18;
      result += v19;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Mat_TRC_l64r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Mat_TRC_l64r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf444_TRC_Mat_TRC_l64r_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  unsigned int v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int16 *v55;
  _WORD *v56;
  __int16 *v57;
  unsigned __int16 *v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  unsigned int v64;
  float v65;
  float v66;
  BOOL v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  __int16 v73;
  __int16 v74;
  float v87;
  float v89;
  float v90;
  float v94;
  float v97;

  v5 = *(_QWORD *)(result + 28);
  v6 = *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = v7 + *(_QWORD *)(result + 44);
    v12 = v8 - v7;
    v13 = *((_QWORD *)result + 19);
    v14 = (_QWORD *)*((_QWORD *)result + 7);
    v15 = (uint64_t *)*((_QWORD *)result + 8);
    v16 = *v15;
    v17 = v15[1];
    v18 = v15[2];
    v19 = **((_QWORD **)result + 17);
    *(float *)&v20 = (float)*(unsigned int *)(v13 + 128);
    v21 = 8191.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    v22 = (float)v20;
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    v23 = (float)LODWORD(a5);
    v24 = v21 * *(float *)v13;
    v25 = v21 * *(float *)(v13 + 8);
    v26 = v21 * *(float *)(v13 + 16);
    v27 = v21 * *(float *)(v13 + 20);
    v28 = v21 * *(float *)(v13 + 28);
    v29 = *(float *)(v13 + 72);
    v30 = *(float *)(v13 + 76);
    v31 = *(float *)(v13 + 80);
    v32 = *(float *)(v13 + 84);
    v33 = *(float *)(v13 + 88);
    v34 = *(float *)(v13 + 92);
    v35 = *(float *)(v13 + 96);
    v36 = *(float *)(v13 + 100);
    v37 = *(float *)(v13 + 104);
    v38 = v13 + 164;
    v39 = v13 + 16548;
    v40 = *((_QWORD *)result + 14);
    v41 = *((_QWORD *)result + 13) * a2 / v6;
    v42 = (_QWORD *)*((_QWORD *)result + 16);
    v43 = v41 + *((_QWORD *)result + 15);
    v44 = *(_QWORD *)(result + 36);
    v45 = *(unsigned __int8 *)(v13 + 124);
    v46 = 16 - v45;
    if (v45 >= 0x11)
      v46 = 0;
    v47 = *v42 + v43 * v19 + 8 * v40;
    v48 = v14[2];
    if (v48)
      result = (unsigned __int8 *)(v48 + v18 * v11 + 2 * v44);
    else
      result = 0;
    v51 = v14;
    v50 = *v14;
    v49 = v51[1];
    if (v49)
      v52 = v49 + v17 * v11 + 2 * v44;
    else
      v52 = 0;
    v53 = v50 + v16 * v11 + 2 * v44;
    do
    {
      if (v10)
      {
        v54 = v10;
        v55 = (unsigned __int16 *)v53;
        v56 = (_WORD *)v47;
        v57 = (__int16 *)result;
        v58 = (unsigned __int16 *)v52;
        do
        {
          if (v58)
          {
            v59 = (float)(*v58 >> v46) - v23;
            v60 = (float)(v58[1] >> v46) - v23;
            v58 += 2;
            v61 = v25 * v60;
            v62 = (float)(v27 * v60) + (float)(v59 * v26);
            v63 = v28 * v59;
          }
          else
          {
            v63 = 0.0;
            v62 = 0.0;
            v61 = 0.0;
          }
          v64 = *v55++;
          v65 = v24 * (float)((float)(int)(v64 >> v46) - v22);
          v66 = v61 + v65;
          v67 = (float)(v61 + v65) <= 8191.0;
          v68 = 8191.0;
          if (v67)
          {
            v68 = v66;
            if (v66 < 0.0)
              v68 = 0.0;
          }
          v69 = v62 + v65;
          v67 = (float)(v62 + v65) <= 8191.0;
          v70 = 8191.0;
          if (v67)
          {
            v70 = v69;
            if (v69 < 0.0)
              v70 = 0.0;
          }
          v71 = v63 + v65;
          v72 = 8191.0;
          if (v71 <= 8191.0)
          {
            v72 = v71;
            if (v71 < 0.0)
              v72 = 0.0;
          }
          if (v57)
          {
            v74 = *v57++;
            v73 = v74;
          }
          else
          {
            v73 = 0;
          }
          _H27 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v68, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          __asm
          {
            FCVT            S27, H27
            FCVT            S29, H29
          }
          _H28 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm { FCVT            S28, H28 }
          _H8 = *(_WORD *)(v39
                         + 2
                         * llroundf(fminf(fmaxf((float)((float)(v30 * _S29) + (float)(_S27 * v29)) + (float)(_S28 * v31), 0.0), 8191.0)));
          __asm { FCVT            S31, H8 }
          if (!v57)
            v73 = -1;
          v87 = 65535.0;
          if (_S31 <= 65535.0)
          {
            __asm { FCVT            S30, H8 }
            _NF = _S30 < 0.0;
            v87 = _S31;
            if (_NF)
              v87 = 0.0;
          }
          v89 = (float)((float)(v33 * _S29) + (float)(_S27 * v32)) + (float)(_S28 * v34);
          v90 = (float)((float)(v36 * _S29) + (float)(_S27 * v35)) + (float)(_S28 * v37);
          _H28 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          __asm { FCVT            S31, H28 }
          *v56 = llroundf(v87);
          v94 = 65535.0;
          if (_S31 <= 65535.0)
          {
            __asm { FCVT            S28, H28 }
            v94 = _S31;
            if (_S28 < 0.0)
              v94 = 0.0;
          }
          __asm { FCVT            S30, H27 }
          v56[1] = llroundf(v94);
          v97 = 65535.0;
          if (_S30 <= 65535.0)
          {
            __asm { FCVT            S27, H27 }
            v97 = _S30;
            if (_S27 < 0.0)
              v97 = 0.0;
          }
          v56[2] = llroundf(v97);
          v56[3] = v73;
          v56 += 4;
          --v54;
        }
        while (v54);
      }
      v53 += v16;
      v52 += v17;
      result += v18;
      v47 += v19;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_xf444_rgb_l64r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_rgb_l64r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf444_rgb_l64r_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  unsigned __int16 *v41;
  _WORD *v42;
  __int16 *v43;
  unsigned __int16 *v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  __int16 v50;
  __int16 v51;
  unsigned int v52;
  float v53;
  float v54;
  float v55;
  float v56;
  BOOL v57;
  float v58;
  float v59;
  float v60;

  v2 = *(_QWORD *)(result + 28);
  v3 = *result;
  v4 = v2 * a2 / v3;
  v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    v6 = 0;
    v7 = *(_QWORD *)(result + 20);
    v8 = v4 + *(_QWORD *)(result + 44);
    v9 = v5 - v4;
    v10 = *((_QWORD *)result + 19);
    v12 = (uint64_t *)*((_QWORD *)result + 7);
    v11 = (uint64_t *)*((_QWORD *)result + 8);
    v13 = *v11;
    v14 = v11[1];
    v15 = v11[2];
    v16 = **((_QWORD **)result + 17);
    *(float *)&v17 = (float)*(unsigned int *)(v10 + 128);
    *(float *)&v18 = (float)*(unsigned int *)(v10 + 136);
    v19 = *(float *)&v18 / *(float *)&v17;
    LOWORD(v17) = *(_WORD *)(v10 + 140);
    v20 = (float)v17;
    LOWORD(v18) = *(_WORD *)(v10 + 142);
    v21 = (float)v18;
    v22 = v19 * *(float *)v10;
    v23 = v19 * *(float *)(v10 + 8);
    v24 = v19 * *(float *)(v10 + 16);
    v25 = v19 * *(float *)(v10 + 20);
    v26 = v19 * *(float *)(v10 + 28);
    v27 = *((_QWORD *)result + 14);
    v28 = *((_QWORD *)result + 13) * a2 / v3;
    v29 = (_QWORD *)*((_QWORD *)result + 16);
    v30 = v28 + *((_QWORD *)result + 15);
    v31 = *(_QWORD *)(result + 36);
    LODWORD(v10) = *(unsigned __int8 *)(v10 + 124);
    v32 = 16 - v10;
    if (v10 >= 0x11)
      v32 = 0;
    v33 = *v29 + v30 * v16 + 8 * v27;
    v34 = v12[2];
    if (v34)
      v35 = v34 + v15 * v8 + 2 * v31;
    else
      v35 = 0;
    v37 = *v12;
    v36 = v12[1];
    v38 = v36 + v14 * v8 + 2 * v31;
    if (!v36)
      v38 = 0;
    result = (unsigned __int8 *)(v37 + v13 * v8 + 2 * v31);
    v39 = v32;
    while (!v7)
    {
LABEL_31:
      result += v13;
      v38 += v14;
      v35 += v15;
      v33 += v16;
      if (++v6 == v9)
        return result;
    }
    v40 = v7;
    v41 = (unsigned __int16 *)result;
    v42 = (_WORD *)v33;
    v43 = (__int16 *)v35;
    v44 = (unsigned __int16 *)v38;
    while (1)
    {
      if (v44)
      {
        v45 = (float)(*v44 >> v39) - v21;
        v46 = (float)(v44[1] >> v39) - v21;
        v44 += 2;
        v47 = v23 * v46;
        v48 = (float)(v25 * v46) + (float)(v45 * v24);
        v49 = v26 * v45;
        if (!v43)
          goto LABEL_16;
      }
      else
      {
        v49 = 0.0;
        v48 = 0.0;
        v47 = 0.0;
        if (!v43)
        {
LABEL_16:
          v50 = 0;
          goto LABEL_17;
        }
      }
      v51 = *v43++;
      v50 = v51;
LABEL_17:
      v52 = *v41++;
      v53 = v22 * (float)((float)(int)(v52 >> v39) - v20);
      v54 = v47 + v53;
      if (!v43)
        v50 = -1;
      v55 = 65535.0;
      if (v54 <= 65535.0)
      {
        v55 = v54;
        if (v54 < 0.0)
          v55 = 0.0;
      }
      v56 = v48 + v53;
      *v42 = llroundf(v55);
      v57 = (float)(v48 + v53) <= 65535.0;
      v58 = 65535.0;
      if (v57)
      {
        v58 = v56;
        if (v56 < 0.0)
          v58 = 0.0;
      }
      v59 = v49 + v53;
      v42[1] = llroundf(v58);
      v57 = (float)(v49 + v53) <= 65535.0;
      v60 = 65535.0;
      if (v57)
      {
        v60 = v59;
        if (v59 < 0.0)
          v60 = 0.0;
      }
      v42[2] = llroundf(v60);
      v42[3] = v50;
      v42 += 4;
      if (!--v40)
        goto LABEL_31;
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Tone_Mat_TRC_b64a(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Tone_Mat_TRC_b64a_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf444_TRC_Tone_Mat_TRC_b64a_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  uint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  uint64_t v49;
  unsigned int v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int16 *v60;
  _WORD *v61;
  unsigned __int16 *v62;
  unsigned __int16 *v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  unsigned int v69;
  float v70;
  float v71;
  BOOL v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v87;
  float v91;
  float v92;
  float v95;
  float v96;
  float v97;
  float v100;
  float v102;
  float v103;
  float v107;
  float v110;

  v5 = *(_QWORD *)(result + 28);
  v6 = *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = v7 + *(_QWORD *)(result + 44);
    v12 = v8 - v7;
    v13 = *((_QWORD *)result + 19);
    v14 = (_QWORD *)*((_QWORD *)result + 7);
    v15 = (uint64_t *)*((_QWORD *)result + 8);
    v16 = *v15;
    v17 = v15[1];
    v18 = v15[2];
    v19 = **((_QWORD **)result + 17);
    *(float *)&v20 = (float)*(unsigned int *)(v13 + 128);
    v21 = 8191.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    v22 = (float)v20;
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    v23 = (float)LODWORD(a5);
    v24 = v21 * *(float *)v13;
    v25 = v21 * *(float *)(v13 + 8);
    v26 = v21 * *(float *)(v13 + 16);
    v27 = v21 * *(float *)(v13 + 20);
    v28 = v21 * *(float *)(v13 + 28);
    v29 = *(float *)(v13 + 72);
    v30 = *(float *)(v13 + 76);
    v31 = *(float *)(v13 + 80);
    v32 = *(float *)(v13 + 84);
    v33 = *(float *)(v13 + 88);
    v34 = *(float *)(v13 + 92);
    v35 = *(float *)(v13 + 96);
    v36 = *(float *)(v13 + 100);
    v37 = v13 + 164;
    v38 = v13 + 16548;
    v39 = v13 + 32932;
    v40 = *(float *)(v13 + 104);
    v41 = *(float *)(v13 + 108);
    v42 = *(float *)(v13 + 112);
    v43 = *(float *)(v13 + 116);
    v44 = *(float *)(v13 + 120);
    v45 = *((_QWORD *)result + 14);
    v46 = *((_QWORD *)result + 13) * a2 / v6;
    v47 = (_QWORD *)*((_QWORD *)result + 16);
    v48 = v46 + *((_QWORD *)result + 15);
    v49 = *(_QWORD *)(result + 36);
    v50 = *(unsigned __int8 *)(v13 + 124);
    v51 = 16 - v50;
    if (v50 >= 0x11)
      v51 = 0;
    result = (unsigned __int8 *)(*v47 + v48 * v19 + 8 * v45);
    v52 = v14[2];
    if (v52)
      v53 = v52 + v18 * v11 + 2 * v49;
    else
      v53 = 0;
    v56 = v14;
    v55 = *v14;
    v54 = v56[1];
    if (v54)
      v57 = v54 + v17 * v11 + 2 * v49;
    else
      v57 = 0;
    v58 = v55 + v16 * v11 + 2 * v49;
    do
    {
      if (v10)
      {
        v59 = v10;
        v60 = (unsigned __int16 *)v58;
        v61 = result;
        v62 = (unsigned __int16 *)v53;
        v63 = (unsigned __int16 *)v57;
        do
        {
          if (v63)
          {
            v64 = (float)(*v63 >> v51) - v23;
            v65 = (float)(v63[1] >> v51) - v23;
            v63 += 2;
            v66 = v25 * v65;
            v67 = (float)(v27 * v65) + (float)(v64 * v26);
            v68 = v28 * v64;
          }
          else
          {
            v68 = 0.0;
            v67 = 0.0;
            v66 = 0.0;
          }
          v69 = *v60++;
          v70 = v24 * (float)((float)(int)(v69 >> v51) - v22);
          v71 = v66 + v70;
          v72 = (float)(v66 + v70) <= 8191.0;
          v73 = 8191.0;
          if (v72)
          {
            v73 = v71;
            if (v71 < 0.0)
              v73 = 0.0;
          }
          v74 = v67 + v70;
          v72 = (float)(v67 + v70) <= 8191.0;
          v75 = 8191.0;
          if (v72)
          {
            v75 = v74;
            if (v74 < 0.0)
              v75 = 0.0;
          }
          v76 = v68 + v70;
          v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            v77 = v76;
            if (v76 < 0.0)
              v77 = 0.0;
          }
          if (v62)
          {
            v79 = *v62++;
            v78 = v79;
          }
          else
          {
            v78 = 0;
          }
          _H31 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S31, H31 }
          _H9 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          v87 = llroundf(fminf(fmaxf(v77, 0.0), 8191.0));
          __asm { FCVT            S8, H9 }
          _H9 = *(_WORD *)(v37 + 2 * v87);
          __asm { FCVT            S11, H9 }
          v91 = (float)((float)((float)(v42 * _S8) + (float)(v41 * _S31)) + (float)(v43 * _S11))
              + (float)(v44 * fmaxf(_S31, fmaxf(_S8, _S11)));
          v92 = 8191.0;
          if (v91 <= 8191.0)
          {
            v92 = v91;
            if (v91 < 0.0)
              v92 = 0.0;
          }
          _H9 = *(_WORD *)(v38 + 2 * llroundf(v92));
          __asm { FCVT            S12, H9 }
          v95 = _S31 * _S12;
          v96 = _S8 * _S12;
          v97 = _S11 * _S12;
          _H12 = *(_WORD *)(v39
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v30 * v96) + (float)((float)(_S31 * _S12) * v29))+ (float)((float)(_S11 * _S12) * v31), 0.0), 8191.0)));
          __asm { FCVT            S11, H12 }
          if (!v62)
            v78 = -1;
          v100 = 65535.0;
          if (_S11 <= 65535.0)
          {
            __asm { FCVT            S31, H12 }
            _NF = _S31 < 0.0;
            v100 = _S11;
            if (_NF)
              v100 = 0.0;
          }
          v102 = (float)((float)(v33 * v96) + (float)(v95 * v32)) + (float)(v97 * v34);
          v103 = (float)(v36 * v96) + (float)(v95 * v35);
          _H11 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v102, 0.0), 8191.0)));
          __asm { FCVT            S10, H11 }
          _H9 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v103 + (float)(v97 * v40), 0.0), 8191.0)));
          v107 = 65535.0;
          if (_S10 <= 65535.0)
          {
            __asm { FCVT            S8, H11 }
            _NF = _S8 < 0.0;
            v107 = _S10;
            if (_NF)
              v107 = 0.0;
          }
          __asm { FCVT            S11, H9 }
          v110 = 65535.0;
          if (_S11 <= 65535.0)
          {
            __asm { FCVT            S9, H9 }
            v110 = _S11;
            if (_S9 < 0.0)
              v110 = 0.0;
          }
          *v61 = bswap32(v78) >> 16;
          v61[1] = __rev16(llroundf(v100));
          v61[2] = __rev16(llroundf(v107));
          v61[3] = __rev16(llroundf(v110));
          v61 += 4;
          --v59;
        }
        while (v59);
      }
      v58 += v16;
      v57 += v17;
      v53 += v18;
      result += v19;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Mat_TRC_b64a(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Mat_TRC_b64a_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf444_TRC_Mat_TRC_b64a_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  unsigned int v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int16 *v55;
  _WORD *v56;
  unsigned __int16 *v57;
  unsigned __int16 *v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  unsigned int v64;
  float v65;
  float v66;
  BOOL v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  unsigned int v73;
  unsigned int v74;
  float v87;
  float v91;
  float v95;

  v5 = *(_QWORD *)(result + 28);
  v6 = *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = v7 + *(_QWORD *)(result + 44);
    v12 = v8 - v7;
    v13 = *((_QWORD *)result + 19);
    v14 = (_QWORD *)*((_QWORD *)result + 7);
    v15 = (uint64_t *)*((_QWORD *)result + 8);
    v16 = *v15;
    v17 = v15[1];
    v18 = v15[2];
    v19 = **((_QWORD **)result + 17);
    *(float *)&v20 = (float)*(unsigned int *)(v13 + 128);
    v21 = 8191.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    v22 = (float)v20;
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    v23 = (float)LODWORD(a5);
    v24 = v21 * *(float *)v13;
    v25 = v21 * *(float *)(v13 + 8);
    v26 = v21 * *(float *)(v13 + 16);
    v27 = v21 * *(float *)(v13 + 20);
    v28 = v21 * *(float *)(v13 + 28);
    v29 = *(float *)(v13 + 72);
    v30 = *(float *)(v13 + 76);
    v31 = *(float *)(v13 + 80);
    v32 = *(float *)(v13 + 84);
    v33 = *(float *)(v13 + 88);
    v34 = *(float *)(v13 + 92);
    v35 = *(float *)(v13 + 96);
    v36 = *(float *)(v13 + 100);
    v37 = *(float *)(v13 + 104);
    v38 = v13 + 164;
    v39 = v13 + 16548;
    v40 = *((_QWORD *)result + 14);
    v41 = *((_QWORD *)result + 13) * a2 / v6;
    v42 = (_QWORD *)*((_QWORD *)result + 16);
    v43 = v41 + *((_QWORD *)result + 15);
    v44 = *(_QWORD *)(result + 36);
    v45 = *(unsigned __int8 *)(v13 + 124);
    v46 = 16 - v45;
    if (v45 >= 0x11)
      v46 = 0;
    v47 = *v42 + v43 * v19 + 8 * v40;
    v48 = v14[2];
    if (v48)
      result = (unsigned __int8 *)(v48 + v18 * v11 + 2 * v44);
    else
      result = 0;
    v51 = v14;
    v50 = *v14;
    v49 = v51[1];
    if (v49)
      v52 = v49 + v17 * v11 + 2 * v44;
    else
      v52 = 0;
    v53 = v50 + v16 * v11 + 2 * v44;
    do
    {
      if (v10)
      {
        v54 = v10;
        v55 = (unsigned __int16 *)v53;
        v56 = (_WORD *)v47;
        v57 = (unsigned __int16 *)result;
        v58 = (unsigned __int16 *)v52;
        do
        {
          if (v58)
          {
            v59 = (float)(*v58 >> v46) - v23;
            v60 = (float)(v58[1] >> v46) - v23;
            v58 += 2;
            v61 = v25 * v60;
            v62 = (float)(v27 * v60) + (float)(v59 * v26);
            v63 = v28 * v59;
          }
          else
          {
            v63 = 0.0;
            v62 = 0.0;
            v61 = 0.0;
          }
          v64 = *v55++;
          v65 = v24 * (float)((float)(int)(v64 >> v46) - v22);
          v66 = v61 + v65;
          v67 = (float)(v61 + v65) <= 8191.0;
          v68 = 8191.0;
          if (v67)
          {
            v68 = v66;
            if (v66 < 0.0)
              v68 = 0.0;
          }
          v69 = v62 + v65;
          v67 = (float)(v62 + v65) <= 8191.0;
          v70 = 8191.0;
          if (v67)
          {
            v70 = v69;
            if (v69 < 0.0)
              v70 = 0.0;
          }
          v71 = v63 + v65;
          v72 = 8191.0;
          if (v71 <= 8191.0)
          {
            v72 = v71;
            if (v71 < 0.0)
              v72 = 0.0;
          }
          if (v57)
          {
            v74 = *v57++;
            v73 = v74;
          }
          else
          {
            v73 = 0;
          }
          _H27 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v68, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          __asm
          {
            FCVT            S28, H27
            FCVT            S29, H29
          }
          _H27 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm { FCVT            S30, H27 }
          _H8 = *(_WORD *)(v39
                         + 2
                         * llroundf(fminf(fmaxf((float)((float)(v30 * _S29) + (float)(_S28 * v29)) + (float)(_S30 * v31), 0.0), 8191.0)));
          __asm { FCVT            S31, H8 }
          if (!v57)
            v73 = -1;
          v87 = 65535.0;
          if (_S31 <= 65535.0)
          {
            __asm { FCVT            S27, H8 }
            _NF = _S27 < 0.0;
            v87 = _S31;
            if (_NF)
              v87 = 0.0;
          }
          _H9 = *(_WORD *)(v39
                         + 2
                         * llroundf(fminf(fmaxf((float)((float)(v33 * _S29) + (float)(_S28 * v32)) + (float)(_S30 * v34), 0.0), 8191.0)));
          __asm { FCVT            S8, H9 }
          v91 = 65535.0;
          if (_S8 <= 65535.0)
          {
            __asm { FCVT            S31, H9 }
            _NF = _S31 < 0.0;
            v91 = _S8;
            if (_NF)
              v91 = 0.0;
          }
          _H30 = *(_WORD *)(v39
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v36 * _S29) + (float)(_S28 * v35)) + (float)(_S30 * v37), 0.0), 8191.0)));
          __asm { FCVT            S29, H30 }
          v95 = 65535.0;
          if (_S29 <= 65535.0)
          {
            __asm { FCVT            S28, H30 }
            _NF = _S28 < 0.0;
            v95 = _S29;
            if (_NF)
              v95 = 0.0;
          }
          *v56 = bswap32(v73) >> 16;
          v56[1] = __rev16(llroundf(v87));
          v56[2] = __rev16(llroundf(v91));
          v56[3] = __rev16(llroundf(v95));
          v56 += 4;
          --v54;
        }
        while (v54);
      }
      v53 += v16;
      v52 += v17;
      result += v18;
      v47 += v19;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_xf444_rgb_b64a(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_rgb_b64a_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf444_rgb_b64a_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  unsigned __int16 *v41;
  _WORD *v42;
  unsigned __int16 *v43;
  unsigned __int16 *v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  float v53;
  float v54;
  float v55;
  float v56;
  BOOL v57;
  float v58;
  float v59;
  float v60;

  v2 = *(_QWORD *)(result + 28);
  v3 = *result;
  v4 = v2 * a2 / v3;
  v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    v6 = 0;
    v7 = *(_QWORD *)(result + 20);
    v8 = v4 + *(_QWORD *)(result + 44);
    v9 = v5 - v4;
    v10 = *((_QWORD *)result + 19);
    v12 = (uint64_t *)*((_QWORD *)result + 7);
    v11 = (uint64_t *)*((_QWORD *)result + 8);
    v13 = *v11;
    v14 = v11[1];
    v15 = v11[2];
    v16 = **((_QWORD **)result + 17);
    *(float *)&v17 = (float)*(unsigned int *)(v10 + 128);
    *(float *)&v18 = (float)*(unsigned int *)(v10 + 136);
    v19 = *(float *)&v18 / *(float *)&v17;
    LOWORD(v17) = *(_WORD *)(v10 + 140);
    v20 = (float)v17;
    LOWORD(v18) = *(_WORD *)(v10 + 142);
    v21 = (float)v18;
    v22 = v19 * *(float *)v10;
    v23 = v19 * *(float *)(v10 + 8);
    v24 = v19 * *(float *)(v10 + 16);
    v25 = v19 * *(float *)(v10 + 20);
    v26 = v19 * *(float *)(v10 + 28);
    v27 = *((_QWORD *)result + 14);
    v28 = *((_QWORD *)result + 13) * a2 / v3;
    v29 = (_QWORD *)*((_QWORD *)result + 16);
    v30 = v28 + *((_QWORD *)result + 15);
    v31 = *(_QWORD *)(result + 36);
    LODWORD(v10) = *(unsigned __int8 *)(v10 + 124);
    v32 = 16 - v10;
    if (v10 >= 0x11)
      v32 = 0;
    v33 = *v29 + v30 * v16 + 8 * v27;
    v34 = v12[2];
    if (v34)
      v35 = v34 + v15 * v8 + 2 * v31;
    else
      v35 = 0;
    v37 = *v12;
    v36 = v12[1];
    v38 = v36 + v14 * v8 + 2 * v31;
    if (!v36)
      v38 = 0;
    result = (unsigned __int8 *)(v37 + v13 * v8 + 2 * v31);
    v39 = v32;
    while (!v7)
    {
LABEL_30:
      result += v13;
      v38 += v14;
      v35 += v15;
      v33 += v16;
      if (++v6 == v9)
        return result;
    }
    v40 = v7;
    v41 = (unsigned __int16 *)result;
    v42 = (_WORD *)v33;
    v43 = (unsigned __int16 *)v35;
    v44 = (unsigned __int16 *)v38;
    while (1)
    {
      if (v44)
      {
        v45 = (float)(*v44 >> v39) - v21;
        v46 = (float)(v44[1] >> v39) - v21;
        v44 += 2;
        v47 = v23 * v46;
        v48 = (float)(v25 * v46) + (float)(v45 * v24);
        v49 = v26 * v45;
        if (!v43)
          goto LABEL_16;
      }
      else
      {
        v49 = 0.0;
        v48 = 0.0;
        v47 = 0.0;
        if (!v43)
        {
LABEL_16:
          v50 = 0;
          goto LABEL_17;
        }
      }
      v51 = *v43++;
      v50 = v51;
LABEL_17:
      v52 = *v41++;
      v53 = v22 * (float)((float)(int)(v52 >> v39) - v20);
      v54 = v47 + v53;
      if (!v43)
        v50 = -1;
      v55 = 65535.0;
      if (v54 <= 65535.0)
      {
        v55 = v54;
        if (v54 < 0.0)
          v55 = 0.0;
      }
      v56 = v48 + v53;
      v57 = (float)(v48 + v53) <= 65535.0;
      v58 = 65535.0;
      if (v57)
      {
        v58 = v56;
        if (v56 < 0.0)
          v58 = 0.0;
      }
      v59 = v49 + v53;
      v60 = 65535.0;
      if (v59 <= 65535.0)
      {
        v60 = v59;
        if (v59 < 0.0)
          v60 = 0.0;
      }
      *v42 = bswap32(v50) >> 16;
      v42[1] = __rev16(llroundf(v55));
      v42[2] = __rev16(llroundf(v58));
      v42[3] = __rev16(llroundf(v60));
      v42 += 4;
      if (!--v40)
        goto LABEL_30;
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Tone_Mat_TRC_RGhA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Tone_Mat_TRC_RGhA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf444_TRC_Tone_Mat_TRC_RGhA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  float v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  unsigned int v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int16 *v61;
  _WORD *v62;
  unsigned __int16 *v63;
  unsigned __int16 *v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  unsigned int v70;
  float v71;
  float v72;
  BOOL v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v88;
  float v92;
  float v93;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v103;

  v6 = *(_QWORD *)(result + 28);
  v7 = *result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)(result + 20);
    v12 = v8 + *(_QWORD *)(result + 44);
    v13 = v9 - v8;
    v14 = *((_QWORD *)result + 19);
    v15 = (_QWORD *)*((_QWORD *)result + 7);
    v16 = (uint64_t *)*((_QWORD *)result + 8);
    v17 = *v16;
    v18 = v16[1];
    v19 = v16[2];
    v20 = **((_QWORD **)result + 17);
    *(float *)&v21 = (float)*(unsigned int *)(v14 + 128);
    v22 = 8191.0 / *(float *)&v21;
    LOWORD(v21) = *(_WORD *)(v14 + 140);
    v23 = (float)v21;
    LOWORD(a5) = *(_WORD *)(v14 + 142);
    v24 = (float)LODWORD(a5);
    v25 = v22 * *(float *)v14;
    v26 = v22 * *(float *)(v14 + 8);
    v27 = v22 * *(float *)(v14 + 16);
    v28 = v22 * *(float *)(v14 + 20);
    v29 = v22 * *(float *)(v14 + 28);
    v30 = *(float *)(v14 + 72);
    v31 = *(float *)(v14 + 76);
    v32 = *(float *)(v14 + 80);
    v33 = *(float *)(v14 + 84);
    v34 = *(float *)(v14 + 88);
    v35 = *(float *)(v14 + 92);
    v36 = *(float *)(v14 + 96);
    v37 = *(float *)(v14 + 100);
    v38 = v14 + 164;
    v39 = v14 + 16548;
    v40 = v14 + 32932;
    v41 = *(float *)(v14 + 104);
    v42 = *(float *)(v14 + 108);
    v43 = *(float *)(v14 + 112);
    v44 = *(float *)(v14 + 116);
    v45 = *(float *)(v14 + 120);
    v46 = *((_QWORD *)result + 14);
    v47 = *((_QWORD *)result + 13) * a2 / v7;
    v48 = (_QWORD *)*((_QWORD *)result + 16);
    v49 = v47 + *((_QWORD *)result + 15);
    v50 = *(_QWORD *)(result + 36);
    v51 = *(unsigned __int8 *)(v14 + 124);
    v52 = 16 - v51;
    if (v51 >= 0x11)
      v52 = 0;
    result = (unsigned __int8 *)(*v48 + v49 * v20 + 8 * v46);
    v53 = v15[2];
    if (v53)
      v54 = v53 + v19 * v12 + 2 * v50;
    else
      v54 = 0;
    v57 = v15;
    v56 = *v15;
    v55 = v57[1];
    if (v55)
      v58 = v55 + v18 * v12 + 2 * v50;
    else
      v58 = 0;
    v59 = v56 + v17 * v12 + 2 * v50;
    LOWORD(v5) = 15360;
    do
    {
      if (v11)
      {
        v60 = v11;
        v61 = (unsigned __int16 *)v59;
        v62 = result;
        v63 = (unsigned __int16 *)v54;
        v64 = (unsigned __int16 *)v58;
        do
        {
          if (v64)
          {
            v65 = (float)(*v64 >> v52) - v24;
            v66 = (float)(v64[1] >> v52) - v24;
            v64 += 2;
            v67 = v26 * v66;
            v68 = (float)(v28 * v66) + (float)(v65 * v27);
            v69 = v29 * v65;
          }
          else
          {
            v69 = 0.0;
            v68 = 0.0;
            v67 = 0.0;
          }
          v70 = *v61++;
          v71 = v25 * (float)((float)(int)(v70 >> v52) - v23);
          v72 = v67 + v71;
          v73 = (float)(v67 + v71) <= 8191.0;
          v74 = 8191.0;
          if (v73)
          {
            v74 = v72;
            if (v72 < 0.0)
              v74 = 0.0;
          }
          v75 = v68 + v71;
          v73 = (float)(v68 + v71) <= 8191.0;
          v76 = 8191.0;
          if (v73)
          {
            v76 = v75;
            if (v75 < 0.0)
              v76 = 0.0;
          }
          v77 = v69 + v71;
          v78 = 8191.0;
          if (v77 <= 8191.0)
          {
            v78 = v77;
            if (v77 < 0.0)
              v78 = 0.0;
          }
          if (v63)
          {
            v80 = *v63++;
            v79 = v80;
          }
          else
          {
            v79 = 0;
          }
          _H8 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          __asm { FCVT            S8, H8 }
          _H10 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          v88 = llroundf(fminf(fmaxf(v78, 0.0), 8191.0));
          __asm { FCVT            S9, H10 }
          _H10 = *(_WORD *)(v38 + 2 * v88);
          __asm { FCVT            S10, H10 }
          v92 = (float)((float)((float)(v43 * _S9) + (float)(v42 * _S8)) + (float)(v44 * _S10))
              + (float)(v45 * fmaxf(_S8, fmaxf(_S9, _S10)));
          v93 = 8191.0;
          if (v92 <= 8191.0)
          {
            v93 = v92;
            if (v92 < 0.0)
              v93 = 0.0;
          }
          _H11 = *(_WORD *)(v39 + 2 * llroundf(v93));
          __asm { FCVT            S11, H11 }
          v96 = _S8 * _S11;
          v97 = _S9 * _S11;
          v98 = _S10 * _S11;
          v99 = (float)((float)(v31 * v97) + (float)(v96 * v30)) + (float)(v98 * v32);
          v100 = (float)((float)(v34 * v97) + (float)(v96 * v33)) + (float)(v98 * v35);
          v101 = (float)((float)(v37 * v97) + (float)(v96 * v36)) + (float)(v98 * v41);
          LOWORD(v97) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v99, 0.0), 8191.0)));
          LOWORD(v98) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v100, 0.0), 8191.0)));
          LOWORD(v101) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v101, 0.0), 8191.0)));
          _S11 = (float)v79 * 0.000015259;
          __asm { FCVT            H11, S11 }
          *v62 = LOWORD(v97);
          v62[1] = LOWORD(v98);
          v62[2] = LOWORD(v101);
          if (v63)
            v103 = _S11;
          else
            v103 = v5;
          v62[3] = LOWORD(v103);
          v62 += 4;
          --v60;
        }
        while (v60);
      }
      v59 += v17;
      v58 += v18;
      v54 += v19;
      result += v20;
      ++v10;
    }
    while (v10 != v13);
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Mat_TRC_RGhA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Mat_TRC_RGhA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf444_TRC_Mat_TRC_RGhA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  float v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  unsigned int v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int16 *v56;
  _WORD *v57;
  unsigned __int16 *v58;
  unsigned __int16 *v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  unsigned int v65;
  float v66;
  float v67;
  BOOL v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  unsigned int v74;
  unsigned int v75;
  float v86;
  float v87;
  float v88;
  float v90;

  v6 = *(_QWORD *)(result + 28);
  v7 = *result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)(result + 20);
    v12 = v8 + *(_QWORD *)(result + 44);
    v13 = v9 - v8;
    v14 = *((_QWORD *)result + 19);
    v15 = (_QWORD *)*((_QWORD *)result + 7);
    v16 = (uint64_t *)*((_QWORD *)result + 8);
    v17 = *v16;
    v18 = v16[1];
    v19 = v16[2];
    v20 = **((_QWORD **)result + 17);
    *(float *)&v21 = (float)*(unsigned int *)(v14 + 128);
    v22 = 8191.0 / *(float *)&v21;
    LOWORD(v21) = *(_WORD *)(v14 + 140);
    v23 = (float)v21;
    LOWORD(a5) = *(_WORD *)(v14 + 142);
    v24 = (float)LODWORD(a5);
    v25 = v22 * *(float *)v14;
    v26 = v22 * *(float *)(v14 + 8);
    v27 = v22 * *(float *)(v14 + 16);
    v28 = v22 * *(float *)(v14 + 20);
    v29 = v22 * *(float *)(v14 + 28);
    v30 = *(float *)(v14 + 72);
    v31 = *(float *)(v14 + 76);
    v32 = *(float *)(v14 + 80);
    v33 = *(float *)(v14 + 84);
    v34 = *(float *)(v14 + 88);
    v35 = *(float *)(v14 + 92);
    v36 = *(float *)(v14 + 96);
    v37 = *(float *)(v14 + 100);
    v38 = *(float *)(v14 + 104);
    v39 = v14 + 164;
    v40 = v14 + 16548;
    v41 = *((_QWORD *)result + 14);
    v42 = *((_QWORD *)result + 13) * a2 / v7;
    v43 = (_QWORD *)*((_QWORD *)result + 16);
    v44 = v42 + *((_QWORD *)result + 15);
    v45 = *(_QWORD *)(result + 36);
    v46 = *(unsigned __int8 *)(v14 + 124);
    v47 = 16 - v46;
    if (v46 >= 0x11)
      v47 = 0;
    v48 = *v43 + v44 * v20 + 8 * v41;
    v49 = v15[2];
    if (v49)
      result = (unsigned __int8 *)(v49 + v19 * v12 + 2 * v45);
    else
      result = 0;
    v52 = v15;
    v51 = *v15;
    v50 = v52[1];
    if (v50)
      v53 = v50 + v18 * v12 + 2 * v45;
    else
      v53 = 0;
    v54 = v51 + v17 * v12 + 2 * v45;
    LOWORD(v5) = 15360;
    do
    {
      if (v11)
      {
        v55 = v11;
        v56 = (unsigned __int16 *)v54;
        v57 = (_WORD *)v48;
        v58 = (unsigned __int16 *)result;
        v59 = (unsigned __int16 *)v53;
        do
        {
          if (v59)
          {
            v60 = (float)(*v59 >> v47) - v24;
            v61 = (float)(v59[1] >> v47) - v24;
            v59 += 2;
            v62 = v26 * v61;
            v63 = (float)(v28 * v61) + (float)(v60 * v27);
            v64 = v29 * v60;
          }
          else
          {
            v64 = 0.0;
            v63 = 0.0;
            v62 = 0.0;
          }
          v65 = *v56++;
          v66 = v25 * (float)((float)(int)(v65 >> v47) - v23);
          v67 = v62 + v66;
          v68 = (float)(v62 + v66) <= 8191.0;
          v69 = 8191.0;
          if (v68)
          {
            v69 = v67;
            if (v67 < 0.0)
              v69 = 0.0;
          }
          v70 = v63 + v66;
          v68 = (float)(v63 + v66) <= 8191.0;
          v71 = 8191.0;
          if (v68)
          {
            v71 = v70;
            if (v70 < 0.0)
              v71 = 0.0;
          }
          v72 = v64 + v66;
          v73 = 8191.0;
          if (v72 <= 8191.0)
          {
            v73 = v72;
            if (v72 < 0.0)
              v73 = 0.0;
          }
          if (v58)
          {
            v75 = *v58++;
            v74 = v75;
          }
          else
          {
            v74 = 0;
          }
          _H28 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v69, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          __asm
          {
            FCVT            S28, H28
            FCVT            S30, H30
          }
          _H29 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          v86 = (float)((float)(v31 * _S30) + (float)(_S28 * v30)) + (float)(_S29 * v32);
          v87 = (float)((float)(v34 * _S30) + (float)(_S28 * v33)) + (float)(_S29 * v35);
          v88 = (float)((float)(v37 * _S30) + (float)(_S28 * v36)) + (float)(_S29 * v38);
          LOWORD(_S29) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          LOWORD(_S30) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          LOWORD(v88) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          _S31 = (float)v74 * 0.000015259;
          __asm { FCVT            H31, S31 }
          *v57 = LOWORD(_S29);
          v57[1] = LOWORD(_S30);
          v57[2] = LOWORD(v88);
          if (v58)
            v90 = _S31;
          else
            v90 = v5;
          v57[3] = LOWORD(v90);
          v57 += 4;
          --v55;
        }
        while (v55);
      }
      v54 += v17;
      v53 += v18;
      result += v19;
      v48 += v20;
      ++v10;
    }
    while (v10 != v13);
  }
  return result;
}

uint64_t vt_Copy_xf444_rgb_RGhA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_rgb_RGhA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf444_rgb_RGhA_GCD(unsigned __int8 *result, uint64_t a2)
{
  float v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  unsigned __int16 *v42;
  _WORD *v43;
  unsigned __int16 *v44;
  unsigned __int16 *v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  float v54;
  float v63;

  v3 = *(_QWORD *)(result + 28);
  v4 = *result;
  v5 = v3 * a2 / v4;
  v6 = (v3 + v3 * a2) / v4;
  if (v6 != v5)
  {
    v7 = 0;
    v8 = *(_QWORD *)(result + 20);
    v9 = v5 + *(_QWORD *)(result + 44);
    v10 = v6 - v5;
    v11 = *((_QWORD *)result + 19);
    v13 = (uint64_t *)*((_QWORD *)result + 7);
    v12 = (uint64_t *)*((_QWORD *)result + 8);
    v14 = *v12;
    v15 = v12[1];
    v16 = v12[2];
    v17 = **((_QWORD **)result + 17);
    *(float *)&v18 = (float)*(unsigned int *)(v11 + 128);
    v19 = 1.0;
    v20 = 1.0 / *(float *)&v18;
    LOWORD(v18) = *(_WORD *)(v11 + 140);
    v21 = (float)v18;
    LOWORD(v19) = *(_WORD *)(v11 + 142);
    v22 = (float)v19;
    v23 = v20 * *(float *)v11;
    v24 = v20 * *(float *)(v11 + 8);
    v25 = v20 * *(float *)(v11 + 16);
    v26 = v20 * *(float *)(v11 + 20);
    v27 = v20 * *(float *)(v11 + 28);
    v28 = *((_QWORD *)result + 14);
    v29 = *((_QWORD *)result + 13) * a2 / v4;
    v30 = (_QWORD *)*((_QWORD *)result + 16);
    v31 = v29 + *((_QWORD *)result + 15);
    v32 = *(_QWORD *)(result + 36);
    LODWORD(v11) = *(unsigned __int8 *)(v11 + 124);
    v33 = 16 - v11;
    if (v11 >= 0x11)
      v33 = 0;
    v34 = *v30 + v31 * v17 + 8 * v28;
    v35 = v13[2];
    if (v35)
      v36 = v35 + v16 * v9 + 2 * v32;
    else
      v36 = 0;
    v38 = *v13;
    v37 = v13[1];
    v39 = v37 + v15 * v9 + 2 * v32;
    if (!v37)
      v39 = 0;
    result = (unsigned __int8 *)(v38 + v14 * v9 + 2 * v32);
    v40 = v33;
    LOWORD(v2) = 15360;
    while (!v8)
    {
LABEL_21:
      result += v14;
      v39 += v15;
      v36 += v16;
      v34 += v17;
      if (++v7 == v10)
        return result;
    }
    v41 = v8;
    v42 = (unsigned __int16 *)result;
    v43 = (_WORD *)v34;
    v44 = (unsigned __int16 *)v36;
    v45 = (unsigned __int16 *)v39;
    while (1)
    {
      if (v45)
      {
        v46 = (float)(*v45 >> v40) - v22;
        v47 = (float)(v45[1] >> v40) - v22;
        v45 += 2;
        v48 = v24 * v47;
        v49 = (float)(v26 * v47) + (float)(v46 * v25);
        v50 = v27 * v46;
        if (!v44)
          goto LABEL_16;
      }
      else
      {
        v50 = 0.0;
        v49 = 0.0;
        v48 = 0.0;
        if (!v44)
        {
LABEL_16:
          v51 = 0;
          goto LABEL_17;
        }
      }
      v52 = *v44++;
      v51 = v52;
LABEL_17:
      v53 = *v42++;
      v54 = v23 * (float)((float)(int)(v53 >> v40) - v21);
      _S19 = v48 + v54;
      _S18 = v49 + v54;
      _S17 = v50 + v54;
      _S20 = (float)v51 * 0.000015259;
      __asm
      {
        FCVT            H20, S20
        FCVT            H19, S19
      }
      *v43 = LOWORD(_S19);
      __asm { FCVT            H18, S18 }
      v43[1] = LOWORD(_S18);
      __asm { FCVT            H17, S17 }
      v43[2] = LOWORD(_S17);
      if (v44)
        v63 = _S20;
      else
        v63 = v2;
      v43[3] = LOWORD(v63);
      v43 += 4;
      if (!--v41)
        goto LABEL_21;
    }
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Tone_Mat_TRC_RGfA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Tone_Mat_TRC_RGfA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf444_TRC_Tone_Mat_TRC_RGfA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  uint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  uint64_t v49;
  unsigned int v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int16 *v60;
  unsigned __int8 *v61;
  unsigned __int16 *v62;
  unsigned __int16 *v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  unsigned int v69;
  float v70;
  float v71;
  BOOL v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v87;
  float v91;
  float v92;
  float v95;
  float v98;
  float v99;
  float v104;

  v5 = *(_QWORD *)(result + 28);
  v6 = *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = v7 + *(_QWORD *)(result + 44);
    v12 = v8 - v7;
    v13 = *((_QWORD *)result + 19);
    v14 = (_QWORD *)*((_QWORD *)result + 7);
    v15 = (uint64_t *)*((_QWORD *)result + 8);
    v16 = *v15;
    v17 = v15[1];
    v18 = v15[2];
    v19 = **((_QWORD **)result + 17);
    *(float *)&v20 = (float)*(unsigned int *)(v13 + 128);
    v21 = 8191.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    v22 = (float)v20;
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    v23 = (float)LODWORD(a5);
    v24 = v21 * *(float *)v13;
    v25 = v21 * *(float *)(v13 + 8);
    v26 = v21 * *(float *)(v13 + 16);
    v27 = v21 * *(float *)(v13 + 20);
    v28 = v21 * *(float *)(v13 + 28);
    v29 = *(float *)(v13 + 72);
    v30 = *(float *)(v13 + 76);
    v31 = *(float *)(v13 + 80);
    v32 = *(float *)(v13 + 84);
    v33 = *(float *)(v13 + 88);
    v34 = *(float *)(v13 + 92);
    v35 = *(float *)(v13 + 96);
    v36 = *(float *)(v13 + 100);
    v37 = v13 + 164;
    v38 = v13 + 16548;
    v39 = v13 + 32932;
    v40 = *(float *)(v13 + 104);
    v41 = *(float *)(v13 + 108);
    v42 = *(float *)(v13 + 112);
    v43 = *(float *)(v13 + 116);
    v44 = *(float *)(v13 + 120);
    v45 = *((_QWORD *)result + 14);
    v46 = *((_QWORD *)result + 13) * a2 / v6;
    v47 = (_QWORD *)*((_QWORD *)result + 16);
    v48 = v46 + *((_QWORD *)result + 15);
    v49 = *(_QWORD *)(result + 36);
    v50 = *(unsigned __int8 *)(v13 + 124);
    v51 = 16 - v50;
    if (v50 >= 0x11)
      v51 = 0;
    result = (unsigned __int8 *)(*v47 + v48 * v19 + 16 * v45);
    v52 = v14[2];
    if (v52)
      v53 = v52 + v18 * v11 + 2 * v49;
    else
      v53 = 0;
    v56 = v14;
    v55 = *v14;
    v54 = v56[1];
    if (v54)
      v57 = v54 + v17 * v11 + 2 * v49;
    else
      v57 = 0;
    v58 = v55 + v16 * v11 + 2 * v49;
    do
    {
      if (v10)
      {
        v59 = v10;
        v60 = (unsigned __int16 *)v58;
        v61 = result;
        v62 = (unsigned __int16 *)v53;
        v63 = (unsigned __int16 *)v57;
        do
        {
          if (v63)
          {
            v64 = (float)(*v63 >> v51) - v23;
            v65 = (float)(v63[1] >> v51) - v23;
            v63 += 2;
            v66 = v25 * v65;
            v67 = (float)(v27 * v65) + (float)(v64 * v26);
            v68 = v28 * v64;
          }
          else
          {
            v68 = 0.0;
            v67 = 0.0;
            v66 = 0.0;
          }
          v69 = *v60++;
          v70 = v24 * (float)((float)(int)(v69 >> v51) - v22);
          v71 = v66 + v70;
          v72 = (float)(v66 + v70) <= 8191.0;
          v73 = 8191.0;
          if (v72)
          {
            v73 = v71;
            if (v71 < 0.0)
              v73 = 0.0;
          }
          v74 = v67 + v70;
          v72 = (float)(v67 + v70) <= 8191.0;
          v75 = 8191.0;
          if (v72)
          {
            v75 = v74;
            if (v74 < 0.0)
              v75 = 0.0;
          }
          v76 = v68 + v70;
          v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            v77 = v76;
            if (v76 < 0.0)
              v77 = 0.0;
          }
          if (v62)
          {
            v79 = *v62++;
            v78 = v79;
          }
          else
          {
            v78 = 0;
          }
          _H8 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S8, H8 }
          _H10 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          v87 = llroundf(fminf(fmaxf(v77, 0.0), 8191.0));
          __asm { FCVT            S9, H10 }
          _H10 = *(_WORD *)(v37 + 2 * v87);
          __asm { FCVT            S10, H10 }
          v91 = (float)((float)((float)(v42 * _S9) + (float)(v41 * _S8)) + (float)(v43 * _S10))
              + (float)(v44 * fmaxf(_S8, fmaxf(_S9, _S10)));
          v92 = 8191.0;
          if (v91 <= 8191.0)
          {
            v92 = v91;
            if (v91 < 0.0)
              v92 = 0.0;
          }
          _H11 = *(_WORD *)(v38 + 2 * llroundf(v92));
          __asm { FCVT            S11, H11 }
          v95 = _S8 * _S11;
          _S9 = _S9 * _S11;
          _S10 = _S10 * _S11;
          v98 = (float)((float)(v30 * _S9) + (float)(v95 * v29)) + (float)(_S10 * v31);
          v99 = (float)((float)(v33 * _S9) + (float)(v95 * v32)) + (float)(_S10 * v34);
          _S8 = (float)((float)(v36 * _S9) + (float)(v95 * v35)) + (float)(_S10 * v40);
          LOWORD(_S9) = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          __asm { FCVT            S9, H9 }
          LOWORD(_S10) = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v99, 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          LOWORD(_S8) = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(_S8, 0.0), 8191.0)));
          __asm { FCVT            S8, H8 }
          *(_DWORD *)v61 = _S9;
          *((_DWORD *)v61 + 1) = _S10;
          if (v62)
            v104 = (float)v78 * 0.000015259;
          else
            v104 = 1.0;
          *((_DWORD *)v61 + 2) = _S8;
          *((float *)v61 + 3) = v104;
          v61 += 16;
          --v59;
        }
        while (v59);
      }
      v58 += v16;
      v57 += v17;
      v53 += v18;
      result += v19;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_xf444_TRC_Mat_TRC_RGfA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_TRC_Mat_TRC_RGfA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf444_TRC_Mat_TRC_RGfA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  unsigned int v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int16 *v55;
  uint64_t v56;
  unsigned __int16 *v57;
  unsigned __int16 *v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  unsigned int v64;
  float v65;
  float v66;
  BOOL v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  unsigned int v73;
  unsigned int v74;
  float v85;
  float v86;
  float v91;

  v5 = *(_QWORD *)(result + 28);
  v6 = *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = v7 + *(_QWORD *)(result + 44);
    v12 = v8 - v7;
    v13 = *((_QWORD *)result + 19);
    v14 = (_QWORD *)*((_QWORD *)result + 7);
    v15 = (uint64_t *)*((_QWORD *)result + 8);
    v16 = *v15;
    v17 = v15[1];
    v18 = v15[2];
    v19 = **((_QWORD **)result + 17);
    *(float *)&v20 = (float)*(unsigned int *)(v13 + 128);
    v21 = 8191.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    v22 = (float)v20;
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    v23 = (float)LODWORD(a5);
    v24 = v21 * *(float *)v13;
    v25 = v21 * *(float *)(v13 + 8);
    v26 = v21 * *(float *)(v13 + 16);
    v27 = v21 * *(float *)(v13 + 20);
    v28 = v21 * *(float *)(v13 + 28);
    v29 = *(float *)(v13 + 72);
    v30 = *(float *)(v13 + 76);
    v31 = *(float *)(v13 + 80);
    v32 = *(float *)(v13 + 84);
    v33 = *(float *)(v13 + 88);
    v34 = *(float *)(v13 + 92);
    v35 = *(float *)(v13 + 96);
    v36 = *(float *)(v13 + 100);
    v37 = *(float *)(v13 + 104);
    v38 = v13 + 164;
    v39 = v13 + 16548;
    v40 = *((_QWORD *)result + 14);
    v41 = *((_QWORD *)result + 13) * a2 / v6;
    v42 = (_QWORD *)*((_QWORD *)result + 16);
    v43 = v41 + *((_QWORD *)result + 15);
    v44 = *(_QWORD *)(result + 36);
    v45 = *(unsigned __int8 *)(v13 + 124);
    v46 = 16 - v45;
    if (v45 >= 0x11)
      v46 = 0;
    v47 = *v42 + v43 * v19 + 16 * v40;
    v48 = v14[2];
    if (v48)
      result = (unsigned __int8 *)(v48 + v18 * v11 + 2 * v44);
    else
      result = 0;
    v51 = v14;
    v50 = *v14;
    v49 = v51[1];
    if (v49)
      v52 = v49 + v17 * v11 + 2 * v44;
    else
      v52 = 0;
    v53 = v50 + v16 * v11 + 2 * v44;
    do
    {
      if (v10)
      {
        v54 = v10;
        v55 = (unsigned __int16 *)v53;
        v56 = v47;
        v57 = (unsigned __int16 *)result;
        v58 = (unsigned __int16 *)v52;
        do
        {
          if (v58)
          {
            v59 = (float)(*v58 >> v46) - v23;
            v60 = (float)(v58[1] >> v46) - v23;
            v58 += 2;
            v61 = v25 * v60;
            v62 = (float)(v27 * v60) + (float)(v59 * v26);
            v63 = v28 * v59;
          }
          else
          {
            v63 = 0.0;
            v62 = 0.0;
            v61 = 0.0;
          }
          v64 = *v55++;
          v65 = v24 * (float)((float)(int)(v64 >> v46) - v22);
          v66 = v61 + v65;
          v67 = (float)(v61 + v65) <= 8191.0;
          v68 = 8191.0;
          if (v67)
          {
            v68 = v66;
            if (v66 < 0.0)
              v68 = 0.0;
          }
          v69 = v62 + v65;
          v67 = (float)(v62 + v65) <= 8191.0;
          v70 = 8191.0;
          if (v67)
          {
            v70 = v69;
            if (v69 < 0.0)
              v70 = 0.0;
          }
          v71 = v63 + v65;
          v72 = 8191.0;
          if (v71 <= 8191.0)
          {
            v72 = v71;
            if (v71 < 0.0)
              v72 = 0.0;
          }
          if (v57)
          {
            v74 = *v57++;
            v73 = v74;
          }
          else
          {
            v73 = 0;
          }
          _H28 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v68, 0.0), 8191.0)));
          __asm { FCVT            S28, H28 }
          _H30 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          __asm { FCVT            S30, H30 }
          _H29 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          v85 = (float)((float)(v30 * _S30) + (float)(_S28 * v29)) + (float)(_S29 * v31);
          v86 = (float)((float)(v33 * _S30) + (float)(_S28 * v32)) + (float)(_S29 * v34);
          _S28 = (float)((float)(v36 * _S30) + (float)(_S28 * v35)) + (float)(_S29 * v37);
          LOWORD(_S29) = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          LOWORD(_S30) = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          __asm { FCVT            S30, H30 }
          LOWORD(_S28) = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(_S28, 0.0), 8191.0)));
          __asm { FCVT            S28, H28 }
          *(_DWORD *)v56 = _S29;
          *(_DWORD *)(v56 + 4) = _S30;
          if (v57)
            v91 = (float)v73 * 0.000015259;
          else
            v91 = 1.0;
          *(_DWORD *)(v56 + 8) = _S28;
          *(float *)(v56 + 12) = v91;
          v56 += 16;
          --v54;
        }
        while (v54);
      }
      v53 += v16;
      v52 += v17;
      result += v18;
      v47 += v19;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_xf444_rgb_RGfA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_xf444_rgb_RGfA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf444_rgb_RGfA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  unsigned __int16 *v43;
  float *v44;
  unsigned __int16 *v45;
  unsigned __int16 *v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  float v55;
  float v56;
  float v57;

  v5 = *(_QWORD *)(result + 28);
  v6 = *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = v7 + *(_QWORD *)(result + 44);
    v12 = v8 - v7;
    v13 = *((_QWORD *)result + 19);
    v15 = (uint64_t *)*((_QWORD *)result + 7);
    v14 = (uint64_t *)*((_QWORD *)result + 8);
    v16 = *v14;
    v17 = v14[1];
    v18 = v14[2];
    v19 = **((_QWORD **)result + 17);
    *(float *)&v20 = (float)*(unsigned int *)(v13 + 128);
    v21 = 1.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    v22 = (float)v20;
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    v23 = (float)LODWORD(a5);
    v24 = v21 * *(float *)v13;
    v25 = v21 * *(float *)(v13 + 8);
    v26 = v21 * *(float *)(v13 + 16);
    v27 = v21 * *(float *)(v13 + 20);
    v28 = v21 * *(float *)(v13 + 28);
    v29 = *((_QWORD *)result + 14);
    v30 = *((_QWORD *)result + 13) * a2 / v6;
    v31 = (_QWORD *)*((_QWORD *)result + 16);
    v32 = v30 + *((_QWORD *)result + 15);
    v33 = *(_QWORD *)(result + 36);
    LODWORD(v13) = *(unsigned __int8 *)(v13 + 124);
    v34 = 16 - v13;
    if (v13 >= 0x11)
      v34 = 0;
    v35 = *v31 + v32 * v19 + 16 * v29;
    v36 = v15[2];
    if (v36)
      v37 = v36 + v18 * v11 + 2 * v33;
    else
      v37 = 0;
    v39 = *v15;
    v38 = v15[1];
    v40 = v38 + v17 * v11 + 2 * v33;
    if (!v38)
      v40 = 0;
    result = (unsigned __int8 *)(v39 + v16 * v11 + 2 * v33);
    v41 = v34;
    while (!v10)
    {
LABEL_21:
      result += v16;
      v40 += v17;
      v37 += v18;
      v35 += v19;
      if (++v9 == v12)
        return result;
    }
    v42 = v10;
    v43 = (unsigned __int16 *)result;
    v44 = (float *)v35;
    v45 = (unsigned __int16 *)v37;
    v46 = (unsigned __int16 *)v40;
    while (1)
    {
      if (v46)
      {
        v47 = (float)(*v46 >> v41) - v23;
        v48 = (float)(v46[1] >> v41) - v23;
        v46 += 2;
        v49 = v25 * v48;
        v50 = (float)(v27 * v48) + (float)(v47 * v26);
        v51 = v28 * v47;
        if (!v45)
          goto LABEL_16;
      }
      else
      {
        v51 = 0.0;
        v50 = 0.0;
        v49 = 0.0;
        if (!v45)
        {
LABEL_16:
          v52 = 0;
          goto LABEL_17;
        }
      }
      v53 = *v45++;
      v52 = v53;
LABEL_17:
      v54 = *v43++;
      v55 = v24 * (float)((float)(int)(v54 >> v41) - v22);
      v56 = v51 + v55;
      *v44 = v49 + v55;
      v44[1] = v50 + v55;
      if (v45)
        v57 = (float)v52 * 0.000015259;
      else
        v57 = 1.0;
      v44[2] = v56;
      v44[3] = v57;
      v44 += 4;
      if (!--v42)
        goto LABEL_21;
    }
  }
  return result;
}

uint64_t MuxedAlphaEncoder_CreateInstance()
{
  uint64_t result;

  VTVideoEncoderGetClassID();
  result = CMDerivedObjectCreate();
  if (!(_DWORD)result)
    return FigSignalErrorAt();
  return result;
}

uint64_t MuxedAlphaEncoder_Invalidate()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  OpaqueVTCompressionSession *v2;
  OpaqueVTCompressionSession *v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)DerivedStorage)
  {
    v1 = DerivedStorage;
    *(_BYTE *)DerivedStorage = 1;
    v2 = *(OpaqueVTCompressionSession **)(DerivedStorage + 64);
    if (v2)
      VTCompressionSessionInvalidate(v2);
    v3 = *(OpaqueVTCompressionSession **)(v1 + 112);
    if (v3)
      VTCompressionSessionInvalidate(v3);
  }
  return 0;
}

void MuxedAlphaEncoder_Finalize()
{
  _QWORD *DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  NSObject *v16;
  NSObject *v17;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  DerivedStorage[1] = 0;
  v1 = (const void *)DerivedStorage[3];
  if (v1)
  {
    CFRelease(v1);
    DerivedStorage[3] = 0;
  }
  v2 = (const void *)DerivedStorage[4];
  if (v2)
  {
    CFRelease(v2);
    DerivedStorage[4] = 0;
  }
  v3 = (const void *)DerivedStorage[6];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[6] = 0;
  }
  v4 = (const void *)DerivedStorage[7];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[7] = 0;
  }
  v5 = (const void *)DerivedStorage[8];
  if (v5)
  {
    CFRelease(v5);
    DerivedStorage[8] = 0;
  }
  v6 = (const void *)DerivedStorage[13];
  if (v6)
  {
    CFRelease(v6);
    DerivedStorage[13] = 0;
  }
  v7 = (const void *)DerivedStorage[14];
  if (v7)
  {
    CFRelease(v7);
    DerivedStorage[14] = 0;
  }
  v8 = (const void *)DerivedStorage[9];
  if (v8)
  {
    CFRelease(v8);
    DerivedStorage[9] = 0;
  }
  v9 = (const void *)DerivedStorage[15];
  if (v9)
  {
    CFRelease(v9);
    DerivedStorage[15] = 0;
  }
  v10 = (const void *)DerivedStorage[10];
  if (v10)
  {
    CFRelease(v10);
    DerivedStorage[10] = 0;
  }
  v11 = (const void *)DerivedStorage[11];
  if (v11)
  {
    CFRelease(v11);
    DerivedStorage[11] = 0;
  }
  v12 = (const void *)DerivedStorage[12];
  if (v12)
  {
    CFRelease(v12);
    DerivedStorage[12] = 0;
  }
  v13 = (const void *)DerivedStorage[16];
  if (v13)
  {
    CFRelease(v13);
    DerivedStorage[16] = 0;
  }
  v14 = (const void *)DerivedStorage[17];
  if (v14)
  {
    CFRelease(v14);
    DerivedStorage[17] = 0;
  }
  v15 = (const void *)DerivedStorage[18];
  if (v15)
  {
    CFRelease(v15);
    DerivedStorage[18] = 0;
  }
  v16 = DerivedStorage[20];
  if (v16)
  {
    dispatch_release(v16);
    DerivedStorage[20] = 0;
  }
  v17 = DerivedStorage[19];
  if (v17)
  {
    dispatch_release(v17);
    DerivedStorage[19] = 0;
  }
}

__CFString *MuxedAlphaEncoder_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<MuxedAlphaVideoEncoder %p>"), a1);
  return Mutable;
}

uint64_t MuxedAlphaEncoder_CopyProperty(uint64_t a1, const __CFString *a2, const __CFAllocator *a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  const CFStringRef *v8;
  CFStringRef v9;
  CFTypeRef v10;
  uint64_t result;
  const void *v12;
  const __CFString *v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!CFEqual(a2, CFSTR("AlphaChannelMode")))
  {
    if (CFEqual(a2, CFSTR("SublayerEncoderSpecification")))
    {
      v9 = *(CFStringRef *)(DerivedStorage + 48);
      if (v9)
        goto LABEL_9;
    }
    else if (CFEqual(a2, CFSTR("MVHEVCVideoLayerIDs")))
    {
      v9 = *(CFStringRef *)(DerivedStorage + 80);
      if (v9)
        goto LABEL_9;
    }
    else if (CFEqual(a2, CFSTR("MVHEVCViewIDs")))
    {
      v9 = *(CFStringRef *)(DerivedStorage + 88);
      if (v9)
        goto LABEL_9;
    }
    else
    {
      if (!CFEqual(a2, CFSTR("MVHEVCLeftAndRightViewIDs")))
      {
        if (!*(_QWORD *)(DerivedStorage + 64) || !*(_QWORD *)(DerivedStorage + 112))
          return 4294954393;
        if (CFEqual(a2, CFSTR("TargetQualityForAlpha")))
        {
          v12 = *(const void **)(DerivedStorage + 112);
          v13 = CFSTR("Quality");
        }
        else
        {
          v12 = *(const void **)(DerivedStorage + 64);
          v13 = a2;
        }
        return VTSessionCopyProperty(v12, v13, a3, a4);
      }
      v9 = *(CFStringRef *)(DerivedStorage + 96);
      if (v9)
      {
LABEL_9:
        v10 = CFRetain(v9);
LABEL_10:
        result = 0;
        *a4 = v10;
        return result;
      }
    }
    v10 = 0;
    goto LABEL_10;
  }
  if (*(_BYTE *)(DerivedStorage + 40) || *(_BYTE *)(DerivedStorage + 41))
  {
    v8 = &kVTAlphaChannelMode_StraightAlpha;
    if (*(_BYTE *)(DerivedStorage + 42))
      v8 = &kVTAlphaChannelMode_PremultipliedAlpha;
    v9 = *v8;
    goto LABEL_9;
  }
  result = 0;
  *a4 = 0;
  return result;
}

uint64_t MuxedAlphaEncoder_SetProperty(uint64_t a1, const __CFString *a2, const void *a3)
{
  uint64_t DerivedStorage;
  CFTypeID v7;
  uint64_t v8;
  const void *v9;
  uint64_t result;
  int SInt32;
  int v12;
  int v13;
  CFTypeID v14;
  const void *v15;
  CFTypeID v16;
  const void *v17;
  CFTypeID v18;
  CFTypeID v19;
  CFTypeID v20;
  const void *v21;
  CFTypeID v22;
  const void *v23;
  const void *v24;
  const __CFString *v25;
  const void *v26;
  unsigned int v27;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, CFSTR("ProfileLevel")))
  {
    if (!a3 || (v7 = CFGetTypeID(a3), v7 == CFStringGetTypeID()))
    {
      v8 = a1;
      v9 = a3;
      return alphaencoder_configureSubEncodersByProfile(v8, v9);
    }
    return FigSignalErrorAt();
  }
  if (!CFEqual(a2, CFSTR("OutputBitDepth")))
  {
    if (CFEqual(a2, CFSTR("AlphaChannelMode")))
    {
      if (!a3)
      {
        if (!*(_BYTE *)(DerivedStorage + 41))
        {
          result = 0;
          *(_BYTE *)(DerivedStorage + 42) = 1;
          *(_BYTE *)(DerivedStorage + 40) = 0;
          return result;
        }
        return FigSignalErrorAt();
      }
      if (CFEqual(a3, CFSTR("StraightAlpha")))
      {
        v13 = 0;
      }
      else
      {
        if (!CFEqual(a3, CFSTR("PremultipliedAlpha")))
          return FigSignalErrorAt();
        v13 = 1;
      }
      if (!*(_BYTE *)(DerivedStorage + 41) || *(unsigned __int8 *)(DerivedStorage + 42) == v13)
      {
        result = 0;
        *(_BYTE *)(DerivedStorage + 42) = v13;
        *(_BYTE *)(DerivedStorage + 40) = 1;
        return result;
      }
      return FigSignalErrorAt();
    }
    if (CFEqual(a2, CFSTR("SublayerEncoderSpecification")))
    {
      if (!a3)
        return FigSignalErrorAt();
      v14 = CFGetTypeID(a3);
      if (v14 != CFDictionaryGetTypeID())
        return FigSignalErrorAt();
      v15 = *(const void **)(DerivedStorage + 48);
      *(_QWORD *)(DerivedStorage + 48) = a3;
      CFRetain(a3);
      if (v15)
        CFRelease(v15);
      return 0;
    }
    if (CFEqual(a2, CFSTR("BaseLayerProperties")))
    {
      if (!a3)
        return FigSignalErrorAt();
      v16 = CFGetTypeID(a3);
      if (v16 != CFDictionaryGetTypeID())
        return FigSignalErrorAt();
      v17 = *(const void **)(DerivedStorage + 64);
    }
    else
    {
      if (!CFEqual(a2, CFSTR("AlphaLayerProperties")))
      {
        if (CFEqual(a2, CFSTR("MVHEVCVideoLayerIDs")))
        {
          if ((_os_feature_enabled_impl() & 1) == 0)
            return FigSignalErrorAt();
          if (!a3)
          {
            result = *(_QWORD *)(DerivedStorage + 80);
            if (result)
            {
              CFRelease((CFTypeRef)result);
              result = 0;
              *(_QWORD *)(DerivedStorage + 80) = 0;
            }
            return result;
          }
          v19 = CFGetTypeID(a3);
          if (v19 == CFArrayGetTypeID())
          {
            FigCFArrayGetInt32AtIndex();
            FigCFArrayGetInt32AtIndex();
            v26 = *(const void **)(DerivedStorage + 80);
            if (v26)
            {
              CFRelease(v26);
              *(_QWORD *)(DerivedStorage + 80) = 0;
            }
            *(_QWORD *)(DerivedStorage + 80) = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFArrayRef)a3);
            result = alphaencoder_setVideoLayerIDsToMVHEVCColorAlphaEncoder();
            if (!(_DWORD)result)
              return alphaencoder_configureSubEncodersByProfile(a1, *(const void **)(DerivedStorage + 72));
            return result;
          }
        }
        else if (CFEqual(a2, CFSTR("MVHEVCViewIDs")))
        {
          if ((_os_feature_enabled_impl() & 1) == 0)
            return FigSignalErrorAt();
          if (!a3)
          {
            result = *(_QWORD *)(DerivedStorage + 88);
            if (result)
            {
              CFRelease((CFTypeRef)result);
              result = 0;
              *(_QWORD *)(DerivedStorage + 88) = 0;
            }
            return result;
          }
          v20 = CFGetTypeID(a3);
          if (v20 == CFArrayGetTypeID())
          {
            v21 = *(const void **)(DerivedStorage + 88);
            if (v21)
            {
              CFRelease(v21);
              *(_QWORD *)(DerivedStorage + 88) = 0;
            }
            *(_QWORD *)(DerivedStorage + 88) = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFArrayRef)a3);
            result = alphaencoder_setViewIDsToMVHEVCColorAlphaEncoder();
            if (!(_DWORD)result)
              goto LABEL_11;
            return result;
          }
        }
        else
        {
          if (!CFEqual(a2, CFSTR("MVHEVCLeftAndRightViewIDs")))
          {
            if (!*(_QWORD *)(DerivedStorage + 64) || !*(_QWORD *)(DerivedStorage + 112))
              return 4294954393;
            if (CFEqual(a2, CFSTR("TargetQualityForAlpha")))
            {
              v24 = *(const void **)(DerivedStorage + 112);
              v25 = CFSTR("Quality");
            }
            else
            {
              if (!CFEqual(a2, CFSTR("AverageBitRate"))
                && !CFEqual(a2, CFSTR("AverageDataRate"))
                && !CFEqual(a2, CFSTR("RelaxAverageBitRateTarget")))
              {
                v27 = VTSessionSetProperty(*(VTSessionRef *)(DerivedStorage + 64), a2, a3);
                VTSessionSetProperty(*(VTSessionRef *)(DerivedStorage + 112), a2, a3);
                if (v27)
                {
                  if (CFEqual(a2, CFSTR("SourceFrameCount")))
                    return 0;
                  else
                    return v27;
                }
                return 0;
              }
              v24 = *(const void **)(DerivedStorage + 64);
              v25 = a2;
            }
            return VTSessionSetProperty(v24, v25, a3);
          }
          if ((_os_feature_enabled_impl() & 1) == 0)
            return FigSignalErrorAt();
          if (!a3)
          {
            result = *(_QWORD *)(DerivedStorage + 96);
            if (result)
            {
              CFRelease((CFTypeRef)result);
              result = 0;
              *(_QWORD *)(DerivedStorage + 96) = 0;
            }
            return result;
          }
          v22 = CFGetTypeID(a3);
          if (v22 == CFArrayGetTypeID())
          {
            v23 = *(const void **)(DerivedStorage + 96);
            if (v23)
            {
              CFRelease(v23);
              *(_QWORD *)(DerivedStorage + 96) = 0;
            }
            *(_QWORD *)(DerivedStorage + 96) = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFArrayRef)a3);
            result = alphaencoder_setLeftAndRightViewIDsToMVHEVCColorAlphaEncoder();
            if (!(_DWORD)result)
              goto LABEL_11;
            return result;
          }
        }
        return 4294954394;
      }
      if (!a3)
        return FigSignalErrorAt();
      v18 = CFGetTypeID(a3);
      if (v18 != CFDictionaryGetTypeID())
        return FigSignalErrorAt();
      v17 = *(const void **)(DerivedStorage + 112);
    }
    return alphaencoder_setSessionPropertiesInListFromDictionaryIfPresent(v17, (CFDictionaryRef)a3);
  }
  if (!a3)
    return FigSignalErrorAt();
  SInt32 = FigCFNumberGetSInt32();
  if ((SInt32 | 2) != 0xA)
    return FigSignalErrorAt();
  v12 = SInt32;
  result = VTSessionSetProperty(*(VTSessionRef *)(DerivedStorage + 64), CFSTR("OutputBitDepth"), a3);
  if (!(_DWORD)result)
  {
    *(_DWORD *)(DerivedStorage + 176) = v12;
LABEL_11:
    v9 = *(const void **)(DerivedStorage + 72);
    v8 = a1;
    return alphaencoder_configureSubEncodersByProfile(v8, v9);
  }
  return result;
}

uint64_t alphaencoder_configureSubEncodersByProfile(uint64_t a1, const void *a2)
{
  _QWORD *DerivedStorage;
  _QWORD *v4;
  _BOOL4 v5;
  const __CFString *v6;
  const __CFString *v7;
  const __CFString *v8;
  int v9;
  int v10;
  uint64_t v11;
  const void *v12;
  const void *v13;
  uint64_t PixelBufferAttributesDictionary;
  CFTypeRef v15;
  CFTypeRef cf;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v4 = DerivedStorage;
  cf = 0;
  v5 = DerivedStorage[10] || DerivedStorage[11] || DerivedStorage[12] != 0;
  v6 = CFSTR("HEVC_Main_AutoLevel");
  if (!a2 || CFEqual(a2, CFSTR("HEVC_Main_AutoLevel")))
  {
    *((_DWORD *)v4 + 43) = 1982882104;
    v7 = CFSTR("HEVC_Main_AutoLevel");
    v8 = CFSTR("HEVC_Main_AutoLevel");
    goto LABEL_18;
  }
  v7 = CFSTR("HEVC_Main444_AutoLevel");
  if (CFEqual(a2, CFSTR("HEVC_Main444_AutoLevel")))
  {
    v9 = 1982882104;
LABEL_9:
    v10 = v9 | 0x40000;
LABEL_17:
    *((_DWORD *)v4 + 43) = v10;
    v8 = CFSTR("HEVC_Monochrome_AutoLevel");
LABEL_18:
    if (!v5)
      v6 = v8;
    if (!CFEqual((CFTypeRef)v4[9], v7))
    {
      v11 = VTSessionSetProperty((VTSessionRef)v4[8], CFSTR("ProfileLevel"), v7);
      if ((_DWORD)v11)
        return v11;
      v12 = (const void *)v4[9];
      v4[9] = v7;
      if (v7)
        CFRetain(v7);
      if (v12)
        CFRelease(v12);
    }
    if (!CFEqual((CFTypeRef)v4[15], v6))
    {
      VTSessionSetProperty((VTSessionRef)v4[14], CFSTR("ProfileLevel"), v6);
      v13 = (const void *)v4[15];
      v4[15] = v6;
      if (v6)
        CFRetain(v6);
      if (v13)
        CFRelease(v13);
    }
    PixelBufferAttributesDictionary = alphaencoder_createPixelBufferAttributesDictionary(*((unsigned int *)v4 + 4), *((unsigned int *)v4 + 5), (uint64_t)v4 + 172, 1, (CFMutableDictionaryRef *)&cf);
    v15 = cf;
    if (!(_DWORD)PixelBufferAttributesDictionary)
      VTEncoderSessionSetPixelBufferAttributes((uint64_t *)v4[1], cf);
    if (v15)
      CFRelease(v15);
    return PixelBufferAttributesDictionary;
  }
  v7 = CFSTR("HEVC_Main10_AutoLevel");
  if (CFEqual(a2, CFSTR("HEVC_Main10_AutoLevel")))
  {
    v10 = 2016436536;
    goto LABEL_17;
  }
  v7 = CFSTR("HEVC_Main42210_AutoLevel");
  if (CFEqual(a2, CFSTR("HEVC_Main42210_AutoLevel")))
  {
    if (*((_DWORD *)v4 + 44) == 8)
      v10 = 1983013176;
    else
      v10 = 2016567608;
    goto LABEL_17;
  }
  v7 = CFSTR("HEVC_Main44410_AutoLevel");
  if (CFEqual(a2, CFSTR("HEVC_Main44410_AutoLevel")))
  {
    v9 = 2016436536;
    goto LABEL_9;
  }
  return FigSignalErrorAt();
}

uint64_t alphaencoder_setSessionPropertiesInListFromDictionaryIfPresent(const void *a1, CFDictionaryRef theDict)
{
  CFIndex Count;
  uint64_t v5;
  uint64_t v6;
  const __CFString *v7;
  const void *Value;
  unsigned int v9;
  const void *v10;

  Count = CFDictionaryGetCount(theDict);
  v5 = 0;
  v6 = 0;
  do
  {
    v7 = *kMuxedAlphaEncoderSublayerCompressionPropertyKeyAllowList[v5];
    Value = CFDictionaryGetValue(theDict, v7);
    if (Value)
    {
      --Count;
      v9 = VTSessionSetProperty(a1, v7, Value);
      if ((_DWORD)v6)
        v6 = v6;
      else
        v6 = v9;
    }
    ++v5;
  }
  while (v5 != 5);
  if (Count > 0)
  {
    v10 = (const void *)FigCFCopyCompactDescription();
    if (v10)
      CFRelease(v10);
  }
  return v6;
}

uint64_t alphaencoder_setVideoLayerIDsToMVHEVCColorAlphaEncoder()
{
  VTSessionRef *DerivedStorage;
  const __CFArray *v1;
  const __CFAllocator *v2;
  CFMutableArrayRef Mutable;
  const __CFArray *v4;
  VTSessionRef v5;
  CFArrayRef Copy;
  uint64_t v7;
  uint64_t v8;

  DerivedStorage = (VTSessionRef *)CMBaseObjectGetDerivedStorage();
  v1 = (const __CFArray *)DerivedStorage[10];
  if (!v1)
    return FigSignalErrorAt();
  if (CFArrayGetCount(v1) != 2)
    return FigSignalErrorAt();
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
    return FigSignalErrorAt();
  v4 = Mutable;
  FigCFArrayGetInt32AtIndex();
  FigCFArrayGetInt32AtIndex();
  FigCFArrayAppendInt32();
  FigCFArrayAppendInt32();
  v5 = DerivedStorage[16];
  if (v5)
  {
    CFRelease(v5);
    DerivedStorage[16] = 0;
  }
  Copy = CFArrayCreateCopy(v2, v4);
  DerivedStorage[16] = Copy;
  if (Copy)
  {
    v7 = VTSessionSetProperty(DerivedStorage[8], CFSTR("MVHEVCVideoLayerIDs"), DerivedStorage[10]);
    if (!(_DWORD)v7)
    {
      v7 = VTSessionSetProperty(DerivedStorage[8], CFSTR("RequiredMVHEVCSequenceParameterSetIDs"), DerivedStorage[10]);
      if (!(_DWORD)v7)
      {
        v7 = VTSessionSetProperty(DerivedStorage[8], CFSTR("RequiredMVHEVCPictureParameterSetIDs"), DerivedStorage[10]);
        if (!(_DWORD)v7)
        {
          v7 = VTSessionSetProperty(DerivedStorage[8], CFSTR("RequiredMVHEVCVideoParameterSetAlphaVideoLayerIDs"), DerivedStorage[16]);
          if (!(_DWORD)v7)
          {
            v7 = VTSessionSetProperty(DerivedStorage[14], CFSTR("MVHEVCVideoLayerIDs"), DerivedStorage[10]);
            if (!(_DWORD)v7)
            {
              v7 = VTSessionSetProperty(DerivedStorage[14], CFSTR("RequiredMVHEVCSequenceParameterSetIDs"), DerivedStorage[16]);
              if (!(_DWORD)v7)
                v7 = VTSessionSetProperty(DerivedStorage[14], CFSTR("RequiredMVHEVCPictureParameterSetIDs"), DerivedStorage[16]);
            }
          }
        }
      }
    }
  }
  else
  {
    v7 = FigSignalErrorAt();
  }
  v8 = v7;
  CFRelease(v4);
  return v8;
}

uint64_t alphaencoder_setViewIDsToMVHEVCColorAlphaEncoder()
{
  uint64_t DerivedStorage;
  const __CFArray *v1;
  const __CFAllocator *v2;
  CFMutableArrayRef Mutable;
  const __CFArray *v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  const void *v8;
  CFArrayRef Copy;
  uint64_t v10;
  uint64_t v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const __CFArray **)(DerivedStorage + 88);
  if (v1)
  {
    if (CFArrayGetCount(v1) == 2)
    {
      v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
      if (Mutable)
      {
        v4 = Mutable;
        v5 = 0;
        v6 = 2;
        v7 = 1;
        do
        {
          while (FigCFArrayContainsInt())
          {
            ++v6;
            if (!v7)
              goto LABEL_9;
          }
          FigCFArrayAppendInt32();
          ++v6;
          v7 = v5++ == 0;
        }
        while (v5 != 2);
LABEL_9:
        v8 = *(const void **)(DerivedStorage + 136);
        if (v8)
        {
          CFRelease(v8);
          *(_QWORD *)(DerivedStorage + 136) = 0;
        }
        Copy = CFArrayCreateCopy(v2, v4);
        *(_QWORD *)(DerivedStorage + 136) = Copy;
        if (Copy)
        {
          v10 = VTSessionSetProperty(*(VTSessionRef *)(DerivedStorage + 64), CFSTR("MVHEVCViewIDs"), *(CFTypeRef *)(DerivedStorage + 88));
          if (!(_DWORD)v10)
          {
            v10 = VTSessionSetProperty(*(VTSessionRef *)(DerivedStorage + 112), CFSTR("MVHEVCViewIDs"), *(CFTypeRef *)(DerivedStorage + 136));
            if (!(_DWORD)v10)
            {
              if (*(_QWORD *)(DerivedStorage + 96))
                alphaencoder_setLeftAndRightViewIDsToMVHEVCColorAlphaEncoder();
              v11 = 0;
              goto LABEL_17;
            }
          }
        }
        else
        {
          v10 = FigSignalErrorAt();
        }
        v11 = v10;
LABEL_17:
        CFRelease(v4);
        return v11;
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t alphaencoder_setLeftAndRightViewIDsToMVHEVCColorAlphaEncoder()
{
  uint64_t DerivedStorage;
  const __CFArray *v1;
  const __CFArray *v2;
  const __CFAllocator *v3;
  CFMutableArrayRef Mutable;
  const __CFArray *v5;
  const void *v6;
  CFArrayRef Copy;
  uint64_t v8;
  uint64_t v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const __CFArray **)(DerivedStorage + 96);
  if (!v1 || CFArrayGetCount(v1) != 2)
    return FigSignalErrorAt();
  v2 = *(const __CFArray **)(DerivedStorage + 88);
  if (!v2 || CFArrayGetCount(v2) != 2)
    return 0;
  FigCFArrayGetIntAtIndex();
  FigCFArrayGetIntAtIndex();
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
    return FigSignalErrorAt();
  v5 = Mutable;
  FigCFArrayGetIntAtIndex();
  FigCFArrayGetIntAtIndex();
  FigCFArrayAppendInt();
  FigCFArrayAppendInt();
  v6 = *(const void **)(DerivedStorage + 144);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(DerivedStorage + 144) = 0;
  }
  Copy = CFArrayCreateCopy(v3, v5);
  *(_QWORD *)(DerivedStorage + 144) = Copy;
  if (Copy)
  {
    v8 = VTSessionSetProperty(*(VTSessionRef *)(DerivedStorage + 64), CFSTR("MVHEVCLeftAndRightViewIDs"), *(CFTypeRef *)(DerivedStorage + 96));
    if (!(_DWORD)v8)
      v8 = VTSessionSetProperty(*(VTSessionRef *)(DerivedStorage + 112), CFSTR("MVHEVCLeftAndRightViewIDs"), *(CFTypeRef *)(DerivedStorage + 144));
  }
  else
  {
    v8 = FigSignalErrorAt();
  }
  v9 = v8;
  CFRelease(v5);
  return v9;
}

uint64_t alphaencoder_createPixelBufferAttributesDictionary(uint64_t a1, uint64_t a2, uint64_t a3, int a4, CFMutableDictionaryRef *a5)
{
  const __CFAllocator *v8;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v10;
  CFMutableArrayRef v11;
  uint64_t v12;
  uint64_t appended;
  uint64_t v14;
  CFDictionaryRef v15;

  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return FigSignalErrorAt();
  v10 = Mutable;
  v11 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  if (!v11)
  {
    appended = FigSignalErrorAt();
    goto LABEL_16;
  }
  if (a4 >= 1)
  {
    v12 = a4;
    while (1)
    {
      a3 += 4;
      appended = FigCFArrayAppendInt32();
      if ((_DWORD)appended)
        break;
      if (!--v12)
      {
        v14 = 0;
        goto LABEL_9;
      }
    }
LABEL_16:
    v14 = appended;
    CFRelease(v10);
    v15 = 0;
    if (!v11)
      goto LABEL_11;
    goto LABEL_10;
  }
  v14 = 4294954392;
LABEL_9:
  CFDictionarySetValue(v10, (const void *)*MEMORY[0x1E0CA9040], v11);
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  v15 = CFDictionaryCreate(v8, 0, 0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(v10, (const void *)*MEMORY[0x1E0CA8FF0], v15);
  *a5 = v10;
LABEL_10:
  CFRelease(v11);
LABEL_11:
  if (v15)
    CFRelease(v15);
  return v14;
}

uint64_t MuxedAlphaEncoder_StartSession(uint64_t a1, uint64_t a2, unint64_t a3, const void *a4)
{
  uint64_t v7;
  uint64_t DerivedStorage;
  const __CFAllocator *v9;
  CFNumberRef v10;
  CFNumberRef v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  uint64_t PixelBufferAttributesDictionary;
  VTSessionRef *v17;
  uint64_t v18;
  const void *v19;
  uint64_t v20;
  VTSessionRef *v21;
  uint64_t v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  const __CFNumber *cf;
  const void *Float32;
  int v29;
  int valuePtr;
  CFDictionaryRef v31;
  CFDictionaryRef sourceImageBufferAttributes;
  CFTypeRef v33;
  _QWORD v34[2];

  v34[1] = *MEMORY[0x1E0C80C00];
  v7 = HIDWORD(a3);
  VTVideoEncoderGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v33 = 0;
  v34[0] = 0x4C30303834323066;
  v31 = 0;
  sourceImageBufferAttributes = 0;
  valuePtr = 0;
  v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v10 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  v29 = 1;
  v11 = CFNumberCreate(v9, kCFNumberSInt32Type, &v29);
  Float32 = (const void *)FigCFNumberCreateFloat32();
  *(_QWORD *)(DerivedStorage + 8) = a2;
  *(_DWORD *)(DerivedStorage + 16) = a3;
  *(_DWORD *)(DerivedStorage + 20) = v7;
  v12 = *(const void **)(DerivedStorage + 72);
  *(_QWORD *)(DerivedStorage + 72) = CFSTR("HEVC_Main_AutoLevel");
  if (CFSTR("HEVC_Main_AutoLevel"))
    CFRetain(CFSTR("HEVC_Main_AutoLevel"));
  if (v12)
    CFRelease(v12);
  v13 = *(const void **)(DerivedStorage + 120);
  *(_QWORD *)(DerivedStorage + 120) = CFSTR("HEVC_Main_AutoLevel");
  if (CFSTR("HEVC_Main_AutoLevel"))
    CFRetain(CFSTR("HEVC_Main_AutoLevel"));
  if (v13)
    CFRelease(v13);
  *(_DWORD *)(DerivedStorage + 172) = 1982882104;
  v14 = *(const void **)(DerivedStorage + 24);
  *(_QWORD *)(DerivedStorage + 24) = a4;
  if (a4)
    CFRetain(a4);
  if (v14)
    CFRelease(v14);
  v15 = *(const void **)(DerivedStorage + 32);
  if (v15)
  {
    CFRelease(v15);
    *(_QWORD *)(DerivedStorage + 32) = 0;
  }
  PixelBufferAttributesDictionary = alphaencoder_createPixelBufferAttributesDictionary(a3, v7, DerivedStorage + 172, 1, (CFMutableDictionaryRef *)&v33);
  if ((_DWORD)PixelBufferAttributesDictionary
    || (VTEncoderSessionSetPixelBufferAttributes(*(uint64_t **)(DerivedStorage + 8), v33),
        PixelBufferAttributesDictionary = alphaencoder_createPixelBufferAttributesDictionary(a3, v7, (uint64_t)&unk_1928E28D8, 6, &sourceImageBufferAttributes), (_DWORD)PixelBufferAttributesDictionary)|| (v17 = (VTSessionRef *)(DerivedStorage + 64), PixelBufferAttributesDictionary = VTCompressionSessionCreate(v9, a3, v7, 0x68766331u, *(CFDictionaryRef *)(DerivedStorage + 48), sourceImageBufferAttributes, v9, 0, 0, (VTCompressionSessionRef *)(DerivedStorage + 64)), (_DWORD)PixelBufferAttributesDictionary))
  {
    v25 = PixelBufferAttributesDictionary;
    v23 = Float32;
    goto LABEL_29;
  }
  v18 = VTSessionSetProperty(*(VTSessionRef *)(DerivedStorage + 64), CFSTR("ProfileLevel"), *(CFTypeRef *)(DerivedStorage + 72));
  if ((_DWORD)v18
    || (v18 = VTSessionSetProperty(*v17, CFSTR("RequiredHEVCSequenceParameterSetID"), v10), (_DWORD)v18)
    || (v18 = VTSessionSetProperty(*v17, CFSTR("RequiredHEVCPictureParameterSetID"), v10), (_DWORD)v18))
  {
    v25 = v18;
LABEL_45:
    v23 = Float32;
    goto LABEL_29;
  }
  cf = v10;
  VTSessionSetProperty(*v17, CFSTR("RequiredHEVCVideoParameterSetAlphaLayerID"), v11);
  v19 = (const void *)*MEMORY[0x1E0C9AE50];
  v20 = VTSessionSetProperty(*v17, CFSTR("RequireDeterministicDependencyAndReordering"), (CFTypeRef)*MEMORY[0x1E0C9AE50]);
  if ((_DWORD)v20
    || (v20 = alphaencoder_createPixelBufferAttributesDictionary(a3, v7, (uint64_t)v34, 2, &v31), (_DWORD)v20)
    || (v21 = (VTSessionRef *)(DerivedStorage + 112),
        v20 = VTCompressionSessionCreate(v9, a3, v7, 0x68766331u, *(CFDictionaryRef *)(DerivedStorage + 48), v31, v9, 0, 0, (VTCompressionSessionRef *)(DerivedStorage + 112)), (_DWORD)v20))
  {
    v25 = v20;
    v10 = cf;
    goto LABEL_45;
  }
  v22 = VTSessionSetProperty(*(VTSessionRef *)(DerivedStorage + 112), CFSTR("ProfileLevel"), *(CFTypeRef *)(DerivedStorage + 120));
  v23 = Float32;
  if ((_DWORD)v22)
  {
    v25 = v22;
    v10 = cf;
  }
  else
  {
    v24 = VTSessionSetProperty(*v21, CFSTR("RequiredHEVCSequenceParameterSetID"), v11);
    if (!(_DWORD)v24)
    {
      v24 = VTSessionSetProperty(*v21, CFSTR("RequiredHEVCPictureParameterSetID"), v11);
      if (!(_DWORD)v24)
      {
        VTSessionSetProperty(*v21, CFSTR("EncodesAlpha"), v19);
        VTSessionSetProperty(*v21, CFSTR("Quality"), Float32);
        v24 = VTSessionSetProperty(*v21, CFSTR("RequireDeterministicDependencyAndReordering"), v19);
      }
    }
    v25 = v24;
    v10 = cf;
  }
LABEL_29:
  if (v23)
    CFRelease(v23);
  if (v10)
    CFRelease(v10);
  if (v11)
    CFRelease(v11);
  if (v33)
    CFRelease(v33);
  if (sourceImageBufferAttributes)
    CFRelease(sourceImageBufferAttributes);
  if (v31)
    CFRelease(v31);
  return v25;
}

uint64_t MuxedAlphaEncoder_EncodeFrame(uint64_t a1, const void *a2, __CVBuffer *a3, CMTime *a4, CMTime *a5, const __CFDictionary *a6, _DWORD *a7)
{
  uint64_t v13;
  uint64_t DerivedStorage;
  const __CFAllocator **v15;
  uint64_t MutableCopy;
  uint64_t v17;
  CMTime *v18;
  CMTime *v19;
  __CVBuffer *v20;
  uint64_t v21;
  const void *v22;
  const __CFDictionary *Value;
  const __CFDictionary *v24;
  CFTypeID v25;
  BOOL v26;
  const __CFDictionary *v27;
  const __CFDictionary *v28;
  __CVBuffer *v29;
  CMTime *v30;
  CMTime *v31;
  uint64_t v32;
  const void *v33;
  const __CFAllocator **v34;
  CFTypeID v35;
  uint64_t v36;
  NSObject *v37;
  const __CFAllocator *v38;
  __CVPixelBufferPool *PixelBufferPool;
  uint64_t PixelBuffer;
  __CVPixelBufferPool *v41;
  CVPixelBufferRef *v42;
  CVPixelBufferRef v43;
  __CVBuffer *v44;
  OpaqueVTCompressionSession *v45;
  const __CFDictionary *v46;
  uint64_t v47;
  CVPixelBufferRef *v48;
  CVPixelBufferRef v49;
  __CVBuffer *v50;
  OpaqueVTCompressionSession *v51;
  const __CFDictionary *v52;
  uint64_t v53;
  CVPixelBufferRef v54;
  CVPixelBufferRef v55;
  CVPixelBufferRef v56;
  CVPixelBufferRef v57;
  _DWORD *v59;
  _QWORD v60[11];
  CMTime duration;
  CMTime presentationTimeStamp;
  _QWORD outputHandler[6];
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  CVPixelBufferRef *v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  CVPixelBufferRef *v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;

  v13 = a1;
  VTVideoEncoderGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v73 = 0;
  v74 = (CVPixelBufferRef *)&v73;
  v75 = 0x3800000000;
  v76 = 0u;
  v77 = 0u;
  v68 = 0;
  v69 = (CVPixelBufferRef *)&v68;
  v70 = 0x3800000000;
  v71 = 0u;
  v72 = 0u;
  v64 = 0;
  v65 = &v64;
  v66 = 0x2000000000;
  v67 = 0;
  v15 = (const __CFAllocator **)MEMORY[0x1E0C9AE00];
  if (a6)
  {
    MutableCopy = FigCFDictionaryCreateMutableCopy();
    v74[4] = (CVPixelBufferRef)MutableCopy;
    if (!MutableCopy || (v17 = FigCFDictionaryCreateMutableCopy(), (v69[4] = (CVPixelBufferRef)v17) == 0))
    {
      v36 = FigSignalErrorAt();
LABEL_39:
      v53 = v36;
      v37 = 0;
      goto LABEL_40;
    }
    v59 = a7;
    v18 = a4;
    v19 = a5;
    v20 = a3;
    v21 = v13;
    v22 = a2;
    Value = (const __CFDictionary *)CFDictionaryGetValue(a6, CFSTR("BaseLayerOptions"));
    if (Value)
    {
      v24 = Value;
      v25 = CFGetTypeID(Value);
      v26 = v25 == CFDictionaryGetTypeID();
      v15 = (const __CFAllocator **)MEMORY[0x1E0C9AE00];
      if (v26)
      {
        alphaencoder_setKeysInListFromDictionaryIfPresent(v24, (const void ***)kMuxedAlphaEncoderSublayerFrameOptionsKeyAllowList, 6, v74[4]);
        CFDictionaryRemoveValue(v74[4], CFSTR("BaseLayerOptions"));
        CFDictionaryRemoveValue(v69[4], CFSTR("BaseLayerOptions"));
      }
    }
    v27 = (const __CFDictionary *)CFDictionaryGetValue(a6, CFSTR("AlphaLayerOptions"));
    a2 = v22;
    v13 = v21;
    a3 = v20;
    a5 = v19;
    a4 = v18;
    a7 = v59;
    if (v27)
    {
      v28 = v27;
      v29 = a3;
      v30 = a4;
      v31 = a5;
      v32 = v13;
      v33 = a2;
      v34 = v15;
      v35 = CFGetTypeID(v27);
      v26 = v35 == CFDictionaryGetTypeID();
      v15 = v34;
      a2 = v33;
      v13 = v32;
      a5 = v31;
      a4 = v30;
      a3 = v29;
      if (v26)
      {
        alphaencoder_setKeysInListFromDictionaryIfPresent(v28, (const void ***)kMuxedAlphaEncoderSublayerFrameOptionsKeyAllowList, 6, v69[4]);
        CFDictionaryRemoveValue(v74[4], CFSTR("AlphaLayerOptions"));
        CFDictionaryRemoveValue(v69[4], CFSTR("AlphaLayerOptions"));
      }
    }
  }
  if (*a7)
    *a7 = *((_DWORD *)v65 + 6);
  dispatch_group_enter(*(dispatch_group_t *)(DerivedStorage + 160));
  ++*(_DWORD *)(DerivedStorage + 168);
  v36 = alphaencoder_validateThatPixelBufferUsesConsistentPremultiplicationMode(v13, a3);
  if ((_DWORD)v36)
    goto LABEL_39;
  v37 = dispatch_group_create();
  v38 = *v15;
  PixelBufferPool = VTCompressionSessionGetPixelBufferPool(*(VTCompressionSessionRef *)(DerivedStorage + 64));
  PixelBuffer = CVPixelBufferPoolCreatePixelBuffer(v38, PixelBufferPool, v74 + 3);
  if ((_DWORD)PixelBuffer)
    goto LABEL_37;
  v41 = VTCompressionSessionGetPixelBufferPool(*(VTCompressionSessionRef *)(DerivedStorage + 112));
  PixelBuffer = CVPixelBufferPoolCreatePixelBuffer(v38, v41, v69 + 3);
  if ((_DWORD)PixelBuffer)
    goto LABEL_37;
  PixelBuffer = alphaencoder_demuxBaseAndAlpha(a3, v74[3], v69[3]);
  if ((_DWORD)PixelBuffer)
    goto LABEL_37;
  dispatch_retain(v37);
  dispatch_group_enter(v37);
  v42 = v74;
  v43 = v74[3];
  if (v43)
  {
    CFRetain(v43);
    v42 = v74;
    v44 = v74[3];
  }
  else
  {
    v44 = 0;
  }
  v45 = *(OpaqueVTCompressionSession **)(DerivedStorage + 64);
  v46 = v42[4];
  v47 = MEMORY[0x1E0C809B0];
  outputHandler[0] = MEMORY[0x1E0C809B0];
  outputHandler[1] = 0x40000000;
  outputHandler[2] = __MuxedAlphaEncoder_EncodeFrame_block_invoke;
  outputHandler[3] = &unk_1E2F63810;
  outputHandler[4] = &v73;
  outputHandler[5] = v37;
  presentationTimeStamp = *a4;
  duration = *a5;
  PixelBuffer = VTCompressionSessionEncodeFrameWithOutputHandler(v45, v44, &presentationTimeStamp, &duration, v46, 0, outputHandler);
  if ((_DWORD)PixelBuffer)
  {
LABEL_37:
    v53 = PixelBuffer;
LABEL_40:
    alphaencoder_emitEncodedFrame(v13, a2, v53, 0, 0);
    goto LABEL_26;
  }
  dispatch_retain(v37);
  v48 = v69;
  v49 = v69[3];
  if (v49)
  {
    CFRetain(v49);
    v48 = v69;
    v50 = v69[3];
  }
  else
  {
    v50 = 0;
  }
  v51 = *(OpaqueVTCompressionSession **)(DerivedStorage + 112);
  v52 = v48[4];
  v60[0] = v47;
  v60[1] = 0x40000000;
  v60[2] = __MuxedAlphaEncoder_EncodeFrame_block_invoke_2;
  v60[3] = &unk_1E2F63860;
  v60[4] = &v68;
  v60[5] = &v73;
  v60[8] = DerivedStorage;
  v60[9] = v13;
  v60[10] = a2;
  v60[6] = &v64;
  v60[7] = v37;
  presentationTimeStamp = *a4;
  duration = *a5;
  v53 = VTCompressionSessionEncodeFrameWithOutputHandler(v51, v50, &presentationTimeStamp, &duration, v52, 0, v60);
LABEL_26:
  v54 = v74[4];
  if (v54)
    CFRelease(v54);
  v55 = v69[4];
  if (v55)
    CFRelease(v55);
  v56 = v74[3];
  if (v56)
    CFRelease(v56);
  v57 = v69[3];
  if (v57)
    CFRelease(v57);
  if (v37)
    dispatch_release(v37);
  _Block_object_dispose(&v64, 8);
  _Block_object_dispose(&v68, 8);
  _Block_object_dispose(&v73, 8);
  return v53;
}

uint64_t MuxedAlphaEncoder_CompleteFrames(uint64_t a1, CMTime *a2)
{
  _QWORD *DerivedStorage;
  OpaqueVTCompressionSession *v4;
  uint64_t v5;
  OpaqueVTCompressionSession *v6;
  uint64_t v7;
  NSObject *v8;
  dispatch_time_t v9;
  CMTime v11;

  VTVideoEncoderGetCMBaseObject(a1);
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v4 = (OpaqueVTCompressionSession *)DerivedStorage[8];
  v11 = *a2;
  v5 = VTCompressionSessionCompleteFrames(v4, &v11);
  v6 = (OpaqueVTCompressionSession *)DerivedStorage[14];
  v11 = *a2;
  VTCompressionSessionCompleteFrames(v6, &v11);
  if (DerivedStorage[20])
  {
    v7 = 2;
    do
    {
      v8 = DerivedStorage[20];
      v9 = dispatch_time(0, 1000000000 * v7);
      v7 *= 2;
    }
    while (dispatch_group_wait(v8, v9));
  }
  return v5;
}

uint64_t MuxedAlphaEncoder_CopySupportedPropertyDictionary(uint64_t a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v2;
  CFDictionaryRef v3;
  uint64_t v4;
  __CFDictionary *MutableCopy;
  __CFArray *Mutable;
  uint64_t i;
  const void *v8;
  uint64_t v9;
  CFDictionaryRef v10;
  CFDictionaryRef v11;
  __CFDictionary *v12;
  CFArrayRef v13;
  CFArrayRef v14;
  uint64_t v15;
  CFDictionaryRef v16;
  CFDictionaryRef v17;
  CFDictionaryRef supportedPropertyDictionaryOut;
  _QWORD v20[5];
  void *values[2];
  __int128 v22;
  void *keys[2];
  __int128 v24;
  __CFDictionary *v25;
  __CFDictionary *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  VTVideoEncoderGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  supportedPropertyDictionaryOut = 0;
  v25 = 0;
  v26 = 0;
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v3 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *(_OWORD *)keys = 0u;
  v24 = 0u;
  *(_OWORD *)values = 0u;
  v22 = 0u;
  v4 = VTSessionCopySupportedPropertyDictionary(*(VTSessionRef *)(DerivedStorage + 64), &supportedPropertyDictionaryOut);
  if ((_DWORD)v4)
  {
    MutableCopy = 0;
    v12 = 0;
  }
  else
  {
    MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
    CFDictionaryRemoveValue(MutableCopy, CFSTR("MultiPassStorage"));
    FigCFDictionaryGetValue();
    if (FigCFDictionaryGetArrayValue())
    {
      v20[0] = CFSTR("HEVC_Main_AutoLevel");
      v20[1] = CFSTR("HEVC_Main444_AutoLevel");
      v20[2] = CFSTR("HEVC_Main10_AutoLevel");
      v20[3] = CFSTR("HEVC_Main42210_AutoLevel");
      v20[4] = CFSTR("HEVC_Main44410_AutoLevel");
      Mutable = CFArrayCreateMutable(v2, 5, MEMORY[0x1E0C9B378]);
      for (i = 0; i != 5; ++i)
      {
        v8 = (const void *)v20[i];
        if (FigCFArrayContainsValue())
          CFArrayAppendValue(Mutable, v8);
      }
      v4 = 0;
      if (Mutable)
        goto LABEL_9;
    }
    values[0] = CFSTR("HEVC_Main_AutoLevel");
    Mutable = CFArrayCreate(v2, (const void **)values, 1, MEMORY[0x1E0C9B378]);
    if (Mutable)
    {
LABEL_9:
      keys[0] = CFSTR("SupportedValueList");
      keys[1] = CFSTR("PropertyType");
      values[0] = Mutable;
      values[1] = CFSTR("Enumeration");
      *(_QWORD *)&v24 = CFSTR("ReadWriteStatus");
      *((_QWORD *)&v24 + 1) = CFSTR("ShouldBeSerialized");
      v9 = *MEMORY[0x1E0C9AE40];
      *(_QWORD *)&v22 = CFSTR("ReadWrite");
      *((_QWORD *)&v22 + 1) = v9;
      v10 = CFDictionaryCreate(v2, (const void **)keys, (const void **)values, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (v10)
      {
        v11 = v10;
        CFDictionarySetValue(MutableCopy, CFSTR("ProfileLevel"), v10);
        CFRelease(v11);
      }
      CFRelease(Mutable);
    }
    v12 = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E0C9AEB8], MEMORY[0x1E0C9B3A0]);
    values[0] = CFSTR("StraightAlpha");
    values[1] = CFSTR("PremultipliedAlpha");
    v13 = CFArrayCreate(v2, (const void **)values, 2, MEMORY[0x1E0C9B378]);
    if (v13)
    {
      v14 = v13;
      keys[0] = CFSTR("SupportedValueList");
      keys[1] = CFSTR("PropertyType");
      values[0] = v13;
      values[1] = CFSTR("Enumeration");
      *(_QWORD *)&v24 = CFSTR("ReadWriteStatus");
      *((_QWORD *)&v24 + 1) = CFSTR("ShouldBeSerialized");
      v15 = *MEMORY[0x1E0C9AE40];
      *(_QWORD *)&v22 = CFSTR("ReadWrite");
      *((_QWORD *)&v22 + 1) = v15;
      v16 = CFDictionaryCreate(v2, (const void **)keys, (const void **)values, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (v16)
      {
        v17 = v16;
        CFDictionarySetValue(MutableCopy, CFSTR("AlphaChannelMode"), v16);
        CFRelease(v17);
      }
      CFRelease(v14);
    }
    CFDictionarySetValue(v12, CFSTR("SublayerEncoderSpecification"), v3);
    CFDictionarySetValue(v12, CFSTR("SourceFrameCount"), v3);
    CFDictionarySetValue(v12, CFSTR("BaseLayerProperties"), v3);
    CFDictionarySetValue(v12, CFSTR("AlphaLayerProperties"), v3);
    if (CFDictionaryContainsKey(MutableCopy, CFSTR("Quality")))
      CFDictionarySetValue(v12, CFSTR("TargetQualityForAlpha"), v3);
    v25 = MutableCopy;
    v26 = v12;
    FigCFCreateCombinedDictionary();
  }
  if (supportedPropertyDictionaryOut)
    CFRelease(supportedPropertyDictionaryOut);
  if (MutableCopy)
    CFRelease(MutableCopy);
  if (v12)
    CFRelease(v12);
  if (v3)
    CFRelease(v3);
  return v4;
}

uint64_t MuxedAlphaEncoder_EncodeMultiImageFrame(uint64_t a1, const void *a2, OpaqueCMTaggedBufferGroup *a3, CMTime *a4, CMTime *a5, const __CFDictionary *a6, _DWORD *a7)
{
  uint64_t DerivedStorage;
  CFAllocatorRef *v13;
  uint64_t MutableCopy;
  uint64_t v15;
  const __CFDictionary *Value;
  const __CFDictionary *v17;
  CFTypeID v18;
  const __CFDictionary *v19;
  const __CFDictionary *v20;
  CFTypeID v21;
  CMItemCount Count;
  CFIndex v23;
  __CVBuffer *CVPixelBufferAtIndex;
  uint64_t v25;
  NSObject *v26;
  const __CFAllocator *v27;
  __CFArray *Mutable;
  __CFArray *v29;
  uint64_t v30;
  unsigned int UInt32;
  CMTag v32;
  uint64_t v33;
  __CVPixelBufferPool *PixelBufferPool;
  uint64_t v35;
  unsigned int v36;
  CMTag v37;
  __CVPixelBufferPool *v38;
  OpaqueCMTaggedBufferGroup *v39;
  OpaqueCMTaggedBufferGroup *v40;
  CMItemCount v41;
  CMItemCount v42;
  CFIndex v43;
  __CVBuffer *v44;
  __CVBuffer *v45;
  __CVBuffer *v46;
  uint64_t v47;
  uint64_t *v48;
  const void *v49;
  OpaqueCMTaggedBufferGroup *v50;
  uint64_t v51;
  OpaqueVTCompressionSession *v52;
  const __CFDictionary *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  const void *v57;
  OpaqueCMTaggedBufferGroup *v58;
  OpaqueVTCompressionSession *v59;
  const __CFDictionary *v60;
  const void *v61;
  const void *v62;
  const void *v63;
  const void *v64;
  NSObject *object;
  const void *v69;
  uint64_t v70;
  _QWORD v71[11];
  CMTime duration;
  CMTime tags;
  _QWORD outputHandler[6];
  CVPixelBufferRef pixelBufferOut;
  CMTagCollectionRef newCollectionOut;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;

  VTVideoEncoderGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v86 = 0;
  v87 = &v86;
  v88 = 0x3800000000;
  v89 = 0u;
  v90 = 0u;
  v81 = 0;
  v82 = &v81;
  v83 = 0x3800000000;
  v84 = 0u;
  v85 = 0u;
  v77 = 0;
  v78 = &v77;
  v79 = 0x2000000000;
  v80 = 0;
  pixelBufferOut = 0;
  newCollectionOut = 0;
  v70 = a1;
  if ((_os_feature_enabled_impl() & 1) == 0)
    goto LABEL_75;
  v13 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (a6)
  {
    MutableCopy = FigCFDictionaryCreateMutableCopy();
    v87[4] = MutableCopy;
    if (MutableCopy)
    {
      v15 = FigCFDictionaryCreateMutableCopy();
      v82[4] = v15;
      if (v15)
      {
        Value = (const __CFDictionary *)CFDictionaryGetValue(a6, CFSTR("BaseLayerOptions"));
        if (Value)
        {
          v17 = Value;
          v18 = CFGetTypeID(Value);
          if (v18 == CFDictionaryGetTypeID())
          {
            alphaencoder_setKeysInListFromDictionaryIfPresent(v17, (const void ***)kMuxedAlphaEncoderSublayerFrameOptionsKeyAllowList, 6, (__CFDictionary *)v87[4]);
            CFDictionaryRemoveValue((CFMutableDictionaryRef)v87[4], CFSTR("BaseLayerOptions"));
            CFDictionaryRemoveValue((CFMutableDictionaryRef)v82[4], CFSTR("BaseLayerOptions"));
          }
        }
        v19 = (const __CFDictionary *)CFDictionaryGetValue(a6, CFSTR("AlphaLayerOptions"));
        if (v19)
        {
          v20 = v19;
          v21 = CFGetTypeID(v19);
          if (v21 == CFDictionaryGetTypeID())
          {
            alphaencoder_setKeysInListFromDictionaryIfPresent(v20, (const void ***)kMuxedAlphaEncoderSublayerFrameOptionsKeyAllowList, 6, (__CFDictionary *)v82[4]);
            CFDictionaryRemoveValue((CFMutableDictionaryRef)v87[4], CFSTR("AlphaLayerOptions"));
            CFDictionaryRemoveValue((CFMutableDictionaryRef)v82[4], CFSTR("AlphaLayerOptions"));
          }
        }
        goto LABEL_11;
      }
    }
LABEL_75:
    v51 = FigSignalErrorAt();
    Mutable = 0;
    v29 = 0;
    v26 = 0;
    goto LABEL_45;
  }
LABEL_11:
  v69 = a2;
  if (*a7)
    *a7 = *((_DWORD *)v78 + 6);
  dispatch_group_enter(*(dispatch_group_t *)(DerivedStorage + 160));
  ++*(_DWORD *)(DerivedStorage + 168);
  Count = CMTaggedBufferGroupGetCount(a3);
  if (Count >= 1)
  {
    v23 = 0;
    while (1)
    {
      CVPixelBufferAtIndex = CMTaggedBufferGroupGetCVPixelBufferAtIndex(a3, v23);
      v25 = alphaencoder_validateThatPixelBufferUsesConsistentPremultiplicationMode(a1, CVPixelBufferAtIndex);
      if ((_DWORD)v25)
        break;
      if (Count == ++v23)
        goto LABEL_17;
    }
    v51 = v25;
    Mutable = 0;
    v29 = 0;
    v26 = 0;
    goto LABEL_74;
  }
LABEL_17:
  v26 = dispatch_group_create();
  v27 = *v13;
  Mutable = CFArrayCreateMutable(*v13, 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
  {
    v51 = FigSignalErrorAt();
    v29 = 0;
    goto LABEL_74;
  }
  v29 = CFArrayCreateMutable(v27, 0, MEMORY[0x1E0C9B378]);
  if (Count >= 1)
  {
    v30 = 0;
    do
    {
      FigCFArrayGetValueAtIndex();
      tags.value = 0;
      *(_QWORD *)&tags.timescale = 0;
      UInt32 = FigCFNumberGetUInt32();
      v32 = CMTagMakeWithSInt64Value(kCMTagCategory_VideoLayerID, UInt32);
      tags.value = *(_QWORD *)&v32.category;
      *(_QWORD *)&tags.timescale = v32.value;
      v33 = CMTagCollectionCreate(v27, (const CMTag *)&tags, 1, &newCollectionOut);
      if ((_DWORD)v33)
        goto LABEL_73;
      PixelBufferPool = VTCompressionSessionGetPixelBufferPool(*(VTCompressionSessionRef *)(DerivedStorage + 64));
      v33 = CVPixelBufferPoolCreatePixelBuffer(v27, PixelBufferPool, &pixelBufferOut);
      if ((_DWORD)v33)
        goto LABEL_73;
      CFArrayAppendValue(Mutable, pixelBufferOut);
      CFArrayAppendValue(v29, newCollectionOut);
      if (newCollectionOut)
      {
        CFRelease(newCollectionOut);
        newCollectionOut = 0;
      }
      if (pixelBufferOut)
      {
        CFRelease(pixelBufferOut);
        pixelBufferOut = 0;
      }
    }
    while (Count != ++v30);
  }
  MEMORY[0x1940271DC](v27, v29, Mutable, v87 + 3);
  if (!v87[3])
    goto LABEL_72;
  CFArrayRemoveAllValues(v29);
  CFArrayRemoveAllValues(Mutable);
  if (Count >= 1)
  {
    v35 = 0;
    do
    {
      FigCFArrayGetValueAtIndex();
      tags.value = 0;
      *(_QWORD *)&tags.timescale = 0;
      v36 = FigCFNumberGetUInt32();
      v37 = CMTagMakeWithSInt64Value(kCMTagCategory_VideoLayerID, v36);
      tags.value = *(_QWORD *)&v37.category;
      *(_QWORD *)&tags.timescale = v37.value;
      v33 = CMTagCollectionCreate(v27, (const CMTag *)&tags, 1, &newCollectionOut);
      if ((_DWORD)v33)
        goto LABEL_73;
      v38 = VTCompressionSessionGetPixelBufferPool(*(VTCompressionSessionRef *)(DerivedStorage + 112));
      v33 = CVPixelBufferPoolCreatePixelBuffer(v27, v38, &pixelBufferOut);
      if ((_DWORD)v33)
        goto LABEL_73;
      CFArrayAppendValue(Mutable, pixelBufferOut);
      CFArrayAppendValue(v29, newCollectionOut);
      if (newCollectionOut)
      {
        CFRelease(newCollectionOut);
        newCollectionOut = 0;
      }
      if (pixelBufferOut)
      {
        CFRelease(pixelBufferOut);
        pixelBufferOut = 0;
      }
    }
    while (Count != ++v35);
  }
  MEMORY[0x1940271DC](v27, v29, Mutable, v82 + 3);
  v39 = (OpaqueCMTaggedBufferGroup *)v82[3];
  if (!v39)
  {
LABEL_72:
    v33 = FigSignalErrorAt();
LABEL_73:
    v51 = v33;
LABEL_74:
    a2 = v69;
LABEL_45:
    alphaencoder_emitEncodedFrame(v70, a2, v51, 0, 0);
    goto LABEL_52;
  }
  object = v26;
  v40 = (OpaqueCMTaggedBufferGroup *)v87[3];
  v41 = CMTaggedBufferGroupGetCount(a3);
  if (v41 >= 1)
  {
    v42 = v41;
    v43 = 0;
    while (1)
    {
      v44 = CMTaggedBufferGroupGetCVPixelBufferAtIndex(a3, v43);
      v45 = CMTaggedBufferGroupGetCVPixelBufferAtIndex(v40, v43);
      v46 = CMTaggedBufferGroupGetCVPixelBufferAtIndex(v39, v43);
      v47 = alphaencoder_demuxBaseAndAlpha(v44, v45, v46);
      if ((_DWORD)v47)
        break;
      if (v42 == ++v43)
        goto LABEL_42;
    }
    v51 = v47;
    v26 = object;
    a2 = v69;
    goto LABEL_45;
  }
LABEL_42:
  v26 = object;
  dispatch_retain(object);
  dispatch_group_enter(object);
  v48 = v87;
  v49 = (const void *)v87[3];
  if (v49)
  {
    CFRetain(v49);
    v48 = v87;
    v50 = (OpaqueCMTaggedBufferGroup *)v87[3];
  }
  else
  {
    v50 = 0;
  }
  a2 = v69;
  v52 = *(OpaqueVTCompressionSession **)(DerivedStorage + 64);
  v53 = (const __CFDictionary *)v48[4];
  v54 = MEMORY[0x1E0C809B0];
  outputHandler[0] = MEMORY[0x1E0C809B0];
  outputHandler[1] = 0x40000000;
  outputHandler[2] = __MuxedAlphaEncoder_EncodeMultiImageFrame_block_invoke;
  outputHandler[3] = &unk_1E2F638D0;
  outputHandler[4] = &v86;
  outputHandler[5] = object;
  tags = *a4;
  duration = *a5;
  v55 = VTCompressionSessionEncodeMultiImageFrameWithOutputHandler(v52, v50, &tags, &duration, v53, 0, outputHandler);
  if ((_DWORD)v55)
  {
    v51 = v55;
    goto LABEL_45;
  }
  dispatch_retain(object);
  v56 = v82;
  v57 = (const void *)v82[3];
  if (v57)
  {
    CFRetain(v57);
    v56 = v82;
    v58 = (OpaqueCMTaggedBufferGroup *)v82[3];
  }
  else
  {
    v58 = 0;
  }
  v59 = *(OpaqueVTCompressionSession **)(DerivedStorage + 112);
  v60 = (const __CFDictionary *)v56[4];
  v71[0] = v54;
  v71[1] = 0x40000000;
  v71[2] = __MuxedAlphaEncoder_EncodeMultiImageFrame_block_invoke_2;
  v71[3] = &unk_1E2F63920;
  v71[4] = &v81;
  v71[5] = &v86;
  v71[8] = DerivedStorage;
  v71[9] = v70;
  v71[10] = v69;
  v71[6] = &v77;
  v71[7] = object;
  tags = *a4;
  duration = *a5;
  v51 = VTCompressionSessionEncodeMultiImageFrameWithOutputHandler(v59, v58, &tags, &duration, v60, 0, v71);
LABEL_52:
  v61 = (const void *)v87[4];
  if (v61)
    CFRelease(v61);
  v62 = (const void *)v82[4];
  if (v62)
    CFRelease(v62);
  v63 = (const void *)v87[3];
  if (v63)
    CFRelease(v63);
  v64 = (const void *)v82[3];
  if (v64)
    CFRelease(v64);
  if (newCollectionOut)
    CFRelease(newCollectionOut);
  if (v29)
    CFRelease(v29);
  if (pixelBufferOut)
    CFRelease(pixelBufferOut);
  if (Mutable)
    CFRelease(Mutable);
  if (v26)
    dispatch_release(v26);
  _Block_object_dispose(&v77, 8);
  _Block_object_dispose(&v81, 8);
  _Block_object_dispose(&v86, 8);
  return v51;
}

void alphaencoder_setKeysInListFromDictionaryIfPresent(const __CFDictionary *a1, const void ***a2, uint64_t a3, __CFDictionary *a4)
{
  CFIndex Count;
  const void *v9;
  const void *Value;
  const void *v11;

  Count = CFDictionaryGetCount(a1);
  if (a3 >= 1)
  {
    do
    {
      v9 = **a2;
      Value = CFDictionaryGetValue(a1, v9);
      if (Value)
      {
        --Count;
        CFDictionarySetValue(a4, v9, Value);
      }
      ++a2;
      --a3;
    }
    while (a3);
  }
  if (Count > 0)
  {
    v11 = (const void *)FigCFCopyCompactDescription();
    if (v11)
      CFRelease(v11);
  }
}

uint64_t alphaencoder_validateThatPixelBufferUsesConsistentPremultiplicationMode(uint64_t a1, __CVBuffer *a2)
{
  _BYTE *DerivedStorage;
  CFTypeRef v4;
  const void *v5;
  int v6;
  uint64_t v7;

  VTVideoEncoderGetCMBaseObject(a1);
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  v4 = CVBufferCopyAttachment(a2, (CFStringRef)*MEMORY[0x1E0CA8CB0], 0);
  if (v4)
  {
    v5 = v4;
    if (CFEqual((CFTypeRef)*MEMORY[0x1E0CA8CB8], v4))
    {
      v6 = 1;
    }
    else
    {
      if (!CFEqual((CFTypeRef)*MEMORY[0x1E0CA8CC0], v5))
      {
LABEL_10:
        v7 = FigSignalErrorAt();
LABEL_13:
        CFRelease(v5);
        return v7;
      }
      v6 = 0;
    }
    if (DerivedStorage[41] || DerivedStorage[40])
    {
      if (v6 != DerivedStorage[42])
        goto LABEL_10;
    }
    else
    {
      DerivedStorage[42] = v6;
    }
    v7 = 0;
    DerivedStorage[41] = 1;
    goto LABEL_13;
  }
  v7 = 0;
  DerivedStorage[41] = 1;
  return v7;
}

uint64_t alphaencoder_demuxBaseAndAlpha(__CVBuffer *a1, __CVBuffer *a2, __CVBuffer *a3)
{
  signed int PixelFormatType;
  uint64_t v7;
  int v8;
  const __CFDictionary *DescriptionWithPixelFormatType;
  const __CFArray *Value;
  const __CFArray *v11;
  CFTypeID v12;
  uint64_t v14;

  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  CVPixelBufferGetPixelFormatType(a2);
  CVPixelBufferGetPixelFormatType(a3);
  v7 = 4294954394;
  if (PixelFormatType <= 2016436535)
  {
    if (PixelFormatType != 1982882104 && PixelFormatType != 1983013176)
    {
      v8 = 1983144248;
      goto LABEL_8;
    }
LABEL_9:
    CVPixelBufferGetWidth(a1);
    CVPixelBufferGetHeight(a1);
    DescriptionWithPixelFormatType = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
    if (DescriptionWithPixelFormatType
      && (Value = (const __CFArray *)CFDictionaryGetValue(DescriptionWithPixelFormatType, (const void *)*MEMORY[0x1E0CA91B0])) != 0&& (v11 = Value, v12 = CFGetTypeID(Value), v12 == CFArrayGetTypeID())&& CFArrayGetCount(v11) > 1)
    {
      CFArrayGetValueAtIndex(v11, 0);
      FigCFDictionaryGetInt32IfPresent();
      CFArrayGetValueAtIndex(v11, 1);
      FigCFDictionaryGetInt32IfPresent();
    }
    else
    {
      v14 = FigSignalErrorAt();
      if ((_DWORD)v14)
        return v14;
    }
    return FigSignalErrorAt();
  }
  if (PixelFormatType == 2016436536 || PixelFormatType == 2016698680)
    goto LABEL_9;
  v8 = 2016567608;
LABEL_8:
  if (PixelFormatType == v8)
    goto LABEL_9;
  return v7;
}

void alphaencoder_emitEncodedFrame(uint64_t a1, const void *a2, uint64_t a3, unsigned int a4, opaqueCMSampleBuffer *a5)
{
  uint64_t DerivedStorage;

  VTVideoEncoderGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  VTEncoderSessionEmitEncodedFrame(*(uint64_t **)(DerivedStorage + 8), a2, a3, a4, a5);
  --*(_DWORD *)(DerivedStorage + 168);
  dispatch_group_leave(*(dispatch_group_t *)(DerivedStorage + 160));
}

uint64_t alphaencoder_transferPlane(__CVBuffer *a1, size_t a2, __CVBuffer *a3, size_t a4, uint64_t a5)
{
  size_t WidthOfPlane;
  size_t HeightOfPlane;
  char *BaseAddressOfPlane;
  size_t BytesPerRowOfPlane;
  char *v14;
  size_t v15;
  size_t v16;
  size_t v17;

  WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, a2);
  HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, a2);
  if (CVPixelBufferGetWidthOfPlane(a3, a4) != WidthOfPlane)
    return FigSignalErrorAt();
  if (CVPixelBufferGetHeightOfPlane(a3, a4) != HeightOfPlane)
    return FigSignalErrorAt();
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, a2);
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, a2);
  v14 = (char *)CVPixelBufferGetBaseAddressOfPlane(a3, a4);
  v15 = CVPixelBufferGetBytesPerRowOfPlane(a3, a4);
  v16 = WidthOfPlane * a5;
  if (v16 > BytesPerRowOfPlane)
    return FigSignalErrorAt();
  v17 = v15;
  if (v16 > v15)
    return FigSignalErrorAt();
  for (; HeightOfPlane; --HeightOfPlane)
  {
    memcpy(v14, BaseAddressOfPlane, v16);
    BaseAddressOfPlane += BytesPerRowOfPlane;
    v14 += v17;
  }
  return 0;
}

const __CFArray *alphaencoder_getSampleBufferSampleAttachment(opaqueCMSampleBuffer *a1, const void *a2)
{
  const __CFArray *result;
  const __CFDictionary *ValueAtIndex;

  result = CMSampleBufferGetSampleAttachmentsArray(a1, 0);
  if (result)
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(result, 0);
    return (const __CFArray *)CFDictionaryGetValue(ValueAtIndex, a2);
  }
  return result;
}

uint64_t alphaencoder_createDerivedSampleBuffer(opaqueCMSampleBuffer *a1, opaqueCMSampleBuffer *a2, CMBlockBufferRef theBuffer, const opaqueCMFormatDescription *a4, CMSampleBufferRef *a5)
{
  uint64_t SampleTimingInfo;
  const __CFAllocator *v11;
  uint64_t v12;
  CMSampleBufferRef v13;
  const __CFArray *SampleAttachmentsArray;
  const __CFDictionary *ValueAtIndex;
  const __CFArray *v16;
  void *v17;
  const __CFArray *v18;
  const __CFDictionary *v19;
  __CFDictionary *Mutable;
  __CFDictionary *v21;
  OpaqueCMBlockBuffer *DataBuffer;
  uint64_t v23;
  size_t sampleSizeArray;
  CMSampleTimingInfo timingInfoOut;
  CMSampleBufferRef sampleBufferOut;

  sampleBufferOut = 0;
  *(_OWORD *)&timingInfoOut.duration.value = *MEMORY[0x1E0CA2E18];
  timingInfoOut.duration.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  timingInfoOut.presentationTimeStamp = timingInfoOut.duration;
  timingInfoOut.decodeTimeStamp = timingInfoOut.duration;
  sampleSizeArray = CMBlockBufferGetDataLength(theBuffer);
  SampleTimingInfo = CMSampleBufferGetSampleTimingInfo(a1, 0, &timingInfoOut);
  if ((_DWORD)SampleTimingInfo)
    return SampleTimingInfo;
  v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v12 = CMSampleBufferCreateReady((CFAllocatorRef)*MEMORY[0x1E0C9AE00], theBuffer, a4, 1, 1, &timingInfoOut, 1, &sampleSizeArray, &sampleBufferOut);
  v13 = sampleBufferOut;
  if ((_DWORD)v12)
  {
    v23 = v12;
  }
  else
  {
    CMPropagateAttachments(a1, sampleBufferOut);
    SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(a1, 0);
    if (!SampleAttachmentsArray
      || (ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0),
          v16 = CMSampleBufferGetSampleAttachmentsArray(sampleBufferOut, 1u),
          v17 = (void *)CFArrayGetValueAtIndex(v16, 0),
          CFDictionaryApplyFunction(ValueAtIndex, (CFDictionaryApplierFunction)alphaencoder_dictionarySetValue, v17),
          (v18 = CMSampleBufferGetSampleAttachmentsArray(a2, 0)) == 0))
    {
      v23 = 0;
      *a5 = sampleBufferOut;
      return v23;
    }
    v19 = (const __CFDictionary *)CFArrayGetValueAtIndex(v18, 0);
    Mutable = CFDictionaryCreateMutable(v11, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v21 = Mutable;
      alphaencoder_setKeysInListFromDictionaryIfPresent(v19, (const void ***)kMuxedAlphaEncoderAlphaLayerSampleAttachmentKeyAllowList, 9, Mutable);
      DataBuffer = CMSampleBufferGetDataBuffer(a2);
      CMBlockBufferGetDataLength(DataBuffer);
      FigCFDictionarySetInt32();
      CFDictionarySetValue((CFMutableDictionaryRef)v17, CFSTR("AlphaLayerAttachments"), v21);
      *a5 = sampleBufferOut;
      sampleBufferOut = 0;
      CFRelease(v21);
      return 0;
    }
    v23 = FigSignalErrorAt();
    v13 = sampleBufferOut;
  }
  if (v13)
    CFRelease(v13);
  return v23;
}

void alphaencoder_dictionarySetValue(void *key, void *value, CFMutableDictionaryRef theDict)
{
  CFDictionarySetValue(theDict, key, value);
}

uint64_t VTPixelBufferAttributesMediatorGetTypeID()
{
  if (VTPixelBufferAttributesMediatorGetTypeID_sRegisterVTPixelBufferAtributesMediatorTypeOnce != -1)
    dispatch_once_f(&VTPixelBufferAttributesMediatorGetTypeID_sRegisterVTPixelBufferAtributesMediatorTypeOnce, 0, (dispatch_function_t)RegisterVTPixelBufferAtributesMediatorIDType);
  return sVTPixelBufferAtributesMediatorID;
}

uint64_t RegisterVTPixelBufferAtributesMediatorIDType()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sVTPixelBufferAtributesMediatorID = result;
  return result;
}

uint64_t VTPixelBufferAttributesMediatorCreate(const __CFAllocator *a1, uint64_t *a2)
{
  uint64_t Instance;
  uint64_t v5;
  uint64_t v6;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v8;
  CFMutableDictionaryRef v9;
  uint64_t v11;

  if (VTPixelBufferAttributesMediatorGetTypeID_sRegisterVTPixelBufferAtributesMediatorTypeOnce != -1)
    dispatch_once_f(&VTPixelBufferAttributesMediatorGetTypeID_sRegisterVTPixelBufferAtributesMediatorTypeOnce, 0, (dispatch_function_t)RegisterVTPixelBufferAtributesMediatorIDType);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v5 = Instance;
  v6 = FigSimpleMutexCreate();
  *(_QWORD *)(v5 + 16) = v6;
  if (v6
    && (Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]), (*(_QWORD *)(v5 + 24) = Mutable) != 0)
    && (v8 = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]), (*(_QWORD *)(v5 + 32) = v8) != 0)
    && (v9 = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]),
        (*(_QWORD *)(v5 + 40) = v9) != 0))
  {
    *(_BYTE *)(v5 + 49) = 1;
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRegisterForBarrierSupport();
    *a2 = v5;
    return 0;
  }
  else
  {
    v11 = FigSignalErrorAt();
    CFRelease((CFTypeRef)v5);
    return v11;
  }
}

uint64_t VTPixelBufferAttributesMediatorCopyProperty(uint64_t a1, CFTypeRef cf1, uint64_t a3, __CFDictionary **a4)
{
  CFTypeRef *v7;
  int v8;
  void *v9;
  uint64_t v10;
  const __CFAllocator *v12;
  const __CFArray *v13;
  _BOOL4 v14;
  const __CFArray *v15;
  CFIndex Count;
  __CFArray *v17;
  __CFArray *v18;
  CFIndex i;
  const void *ValueAtIndex;
  const void *v21;
  __CFDictionary *v22;
  const __CFDictionary *v23;
  CFMutableDictionaryRef MutableCopy;
  uint64_t j;
  __CFArray *v26;
  CFMutableArrayRef Mutable;
  CFIndex v28;
  const void *v29;
  const __CFAllocator *v30;
  const CFArrayCallBacks *v31;
  const void *v32;
  const __CFDictionary *v33;
  const void *v34;
  const void *v35;
  CFMutableArrayRef v36;
  CFMutableArrayRef v37;
  __CFDictionary *v38;
  __CFDictionary *v39;
  const void *v40;
  CFTypeID v41;
  CFTypeID v42;
  CFIndex v43;
  __CFDictionary *v44;
  CFIndex v45;
  const void *v46;
  const __CFDictionary *v47;
  __CFDictionary *v48;
  __CFDictionary *v49;
  __CFDictionary *v50;
  const __CFAllocator *allocator;
  __CFArray *v52;
  const __CFAllocator *v53;
  __CFArray *theArray;
  void *key;
  _BOOL4 v56;
  void *value;
  CFDictionaryRef resolvedDictionaryOut;
  CFDictionaryRef theDict[4];
  CFRange v60;

  theDict[3] = *(CFDictionaryRef *)MEMORY[0x1E0C80C00];
  *a4 = 0;
  if (CFEqual(cf1, CFSTR("LayersAreSuppressed")))
  {
    MEMORY[0x1940280C4](*(_QWORD *)(a1 + 16));
    v7 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    v8 = *(unsigned __int8 *)(a1 + 48);
LABEL_5:
    if (!v8)
      v7 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    v9 = (void *)*v7;
    if (*v7)
      v9 = (void *)CFRetain(v9);
    *a4 = (__CFDictionary *)v9;
    MEMORY[0x1940280D0](*(_QWORD *)(a1 + 16));
    return 0;
  }
  if (CFEqual(cf1, CFSTR("AlwaysVendNonNULLAttributes")))
  {
    MEMORY[0x1940280C4](*(_QWORD *)(a1 + 16));
    v7 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    v8 = *(unsigned __int8 *)(a1 + 49);
    goto LABEL_5;
  }
  if (!CFEqual(cf1, CFSTR("MediatedPixelBufferAttributes")))
    return 4294954396;
  resolvedDictionaryOut = 0;
  v12 = CFGetAllocator((CFTypeRef)a1);
  MEMORY[0x1940280C4](*(_QWORD *)(a1 + 16));
  if (vtPixelBufferAttributesMediatorCopyMediatedPixelBufferAttributes_onceToken != -1)
    dispatch_once_f(&vtPixelBufferAttributesMediatorCopyMediatedPixelBufferAttributes_onceToken, 0, (dispatch_function_t)vtPixelBufferAttributesMediatorCreateCALayerDesiredAttributes);
  if (!vtPixelBufferAttributesMediatorCALayerDesiredAttributes)
    goto LABEL_91;
  v13 = *(const __CFArray **)(a1 + 24);
  v14 = v13 && CFArrayGetCount(v13) >= 1 && *(_BYTE *)(a1 + 48) == 0;
  v15 = *(const __CFArray **)(a1 + 32);
  if (!v15)
  {
    Mutable = CFArrayCreateMutable(v12, 0, MEMORY[0x1E0C9B378]);
    if (Mutable)
    {
      v18 = Mutable;
      goto LABEL_37;
    }
LABEL_91:
    v10 = FigSignalErrorAt();
    v18 = 0;
LABEL_92:
    MEMORY[0x1940280D0](*(_QWORD *)(a1 + 16));
    goto LABEL_87;
  }
  Count = CFArrayGetCount(v15);
  v17 = CFArrayCreateMutable(v12, 0, MEMORY[0x1E0C9B378]);
  if (!v17)
    goto LABEL_91;
  v18 = v17;
  if (Count < 1)
  {
LABEL_37:
    v26 = 0;
LABEL_38:
    if (*(_BYTE *)(a1 + 49) && vtPixelBufferAttributesMediatorCALayerDesiredAttributes)
      v22 = (__CFDictionary *)CFRetain((CFTypeRef)vtPixelBufferAttributesMediatorCALayerDesiredAttributes);
    else
      v22 = 0;
    goto LABEL_84;
  }
  if (v14)
    CFArrayAppendValue(v17, (const void *)vtPixelBufferAttributesMediatorCALayerDesiredAttributes);
  for (i = 0; i != Count; ++i)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), i);
    v21 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), ValueAtIndex);
    CFArrayAppendValue(v18, v21);
  }
  CVPixelBufferCreateResolvedAttributesDictionary(v12, v18, &resolvedDictionaryOut);
  v22 = resolvedDictionaryOut;
  if (resolvedDictionaryOut)
  {
    if (!v14)
    {
      v26 = 0;
      goto LABEL_83;
    }
    v23 = (const __CFDictionary *)*MEMORY[0x1E0CA8FD8];
    theDict[0] = *(CFDictionaryRef *)MEMORY[0x1E0CA90E0];
    theDict[1] = v23;
    theDict[2] = *(CFDictionaryRef *)MEMORY[0x1E0CA8F98];
    MutableCopy = CFDictionaryCreateMutableCopy(v12, 0, resolvedDictionaryOut);
    if (MutableCopy)
    {
      v22 = MutableCopy;
      for (j = 0; j != 3; ++j)
        CFDictionaryRemoveValue(v22, theDict[j]);
      if (resolvedDictionaryOut)
        CFRelease(resolvedDictionaryOut);
      v26 = 0;
      resolvedDictionaryOut = v22;
LABEL_72:
      if (v22)
        goto LABEL_83;
      goto LABEL_38;
    }
    goto LABEL_94;
  }
  v52 = v18;
  CFArrayRemoveAllValues(v18);
  allocator = v12;
  theArray = CFArrayCreateMutable(v12, 0, MEMORY[0x1E0C9B378]);
  if (!theArray)
  {
LABEL_94:
    v10 = FigSignalErrorAt();
    goto LABEL_92;
  }
  v28 = 0;
  v29 = (const void *)*MEMORY[0x1E0CA9040];
  v30 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v31 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
  v56 = v14;
  v53 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  key = (void *)*MEMORY[0x1E0CA9040];
  do
  {
    v32 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), v28);
    v33 = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), v32);
    value = 0;
    if (!CFDictionaryGetValueIfPresent(v33, v29, (const void **)&value))
      goto LABEL_65;
    v34 = value;
    if (!v14)
    {
      if (value)
      {
        v34 = CFRetain(value);
        if (v34)
        {
LABEL_60:
          v41 = CFGetTypeID(v34);
          if (v41 == CFArrayGetTypeID())
          {
            v60.length = CFArrayGetCount((CFArrayRef)v34);
            v60.location = 0;
            CFArrayAppendArray(theArray, (CFArrayRef)v34, v60);
          }
          else
          {
            v42 = CFGetTypeID(v34);
            if (v42 == CFNumberGetTypeID())
              CFArrayAppendValue(theArray, v34);
          }
        }
      }
      CFRelease(v34);
      goto LABEL_65;
    }
    v35 = (const void *)vtPixelBufferAttributesMediatorCALayerDesiredAttributes;
    theDict[0] = 0;
    v36 = CFArrayCreateMutable(v30, 2, v31);
    if (!v36)
    {
      v14 = v56;
      goto LABEL_65;
    }
    v37 = v36;
    v38 = CFDictionaryCreateMutable(v30, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!v38)
    {
      CFRelease(v37);
      v14 = v56;
      v29 = key;
      goto LABEL_65;
    }
    v39 = v38;
    CFDictionaryAddValue(v38, key, v34);
    CFArrayAppendValue(v37, v35);
    CFArrayAppendValue(v37, v39);
    CVPixelBufferCreateResolvedAttributesDictionary(v30, v37, theDict);
    if (theDict[0])
    {
      v40 = CFDictionaryGetValue(theDict[0], key);
      v34 = v40;
      if (v40)
        CFRetain(v40);
      v14 = v56;
      v31 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
      if (theDict[0])
        CFRelease(theDict[0]);
    }
    else
    {
      v34 = 0;
      v14 = v56;
      v31 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    }
    CFRelease(v39);
    CFRelease(v37);
    v30 = v53;
    v29 = key;
    if (v34)
      goto LABEL_60;
LABEL_65:
    ++v28;
  }
  while (Count != v28);
  v26 = theArray;
  if (CFArrayGetCount(theArray) <= 0)
  {
    v22 = resolvedDictionaryOut;
    v18 = v52;
    goto LABEL_72;
  }
  v18 = v52;
  if (v56)
  {
    v43 = CFDictionaryGetCount((CFDictionaryRef)vtPixelBufferAttributesMediatorCALayerDesiredAttributes);
    v44 = CFDictionaryCreateMutableCopy(allocator, v43 + 1, (CFDictionaryRef)vtPixelBufferAttributesMediatorCALayerDesiredAttributes);
    if (!v44)
      goto LABEL_93;
LABEL_82:
    v22 = v44;
    CFDictionarySetValue(v44, v29, theArray);
LABEL_83:
    resolvedDictionaryOut = 0;
LABEL_84:
    v10 = 0;
    *a4 = v22;
  }
  else
  {
    v45 = 0;
    while (1)
    {
      v46 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), v45);
      v47 = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), v46);
      v48 = CFDictionaryCreateMutableCopy(allocator, 0, v47);
      if (!v48)
        break;
      v49 = v48;
      CFDictionaryRemoveValue(v48, v29);
      CFArrayAppendValue(v52, v49);
      CFRelease(v49);
      if (Count == ++v45)
      {
        CVPixelBufferCreateResolvedAttributesDictionary(allocator, v52, &resolvedDictionaryOut);
        if (resolvedDictionaryOut)
        {
          v50 = CFDictionaryCreateMutableCopy(allocator, 0, resolvedDictionaryOut);
          if (!v50)
            break;
          v22 = v50;
          CFDictionarySetValue(v50, v29, theArray);
          if (resolvedDictionaryOut)
            CFRelease(resolvedDictionaryOut);
          goto LABEL_83;
        }
        v44 = CFDictionaryCreateMutable(allocator, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (!v44)
          break;
        goto LABEL_82;
      }
    }
LABEL_93:
    v10 = FigSignalErrorAt();
  }
  MEMORY[0x1940280D0](*(_QWORD *)(a1 + 16));
  if (v26)
    CFRelease(v26);
LABEL_87:
  if (resolvedDictionaryOut)
    CFRelease(resolvedDictionaryOut);
  if (v18)
    CFRelease(v18);
  return v10;
}

uint64_t VTPixelBufferAttributesMediatorSetProperty(uint64_t a1, CFTypeRef cf1, const void *a3)
{
  CFTypeID v6;
  CFTypeID v7;

  if (CFEqual(cf1, CFSTR("LayersAreSuppressed")))
  {
    if (a3)
    {
      v6 = CFGetTypeID(a3);
      if (v6 == CFBooleanGetTypeID())
      {
        MEMORY[0x1940280C4](*(_QWORD *)(a1 + 16));
        *(_BYTE *)(a1 + 48) = CFBooleanGetValue((CFBooleanRef)a3);
LABEL_9:
        MEMORY[0x1940280D0](*(_QWORD *)(a1 + 16));
        return 0;
      }
    }
  }
  else
  {
    if (!CFEqual(cf1, CFSTR("AlwaysVendNonNULLAttributes")))
      return 4294954396;
    if (a3)
    {
      v7 = CFGetTypeID(a3);
      if (v7 == CFBooleanGetTypeID())
      {
        MEMORY[0x1940280C4](*(_QWORD *)(a1 + 16));
        *(_BYTE *)(a1 + 49) = CFBooleanGetValue((CFBooleanRef)a3);
        goto LABEL_9;
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t VTPixelBufferAttributesMediatorNotificationBarrier()
{
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterBarrier();
}

uint64_t VTPixelBufferAttributesMediatorSetRequestedPixelBufferAttributesForKey(uint64_t a1, const void *a2, const void *a3)
{
  MEMORY[0x1940280C4](*(_QWORD *)(a1 + 16));
  if (a2)
  {
    if (!CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 40), a3))
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), a3);
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), a3, a2);
  }
  MEMORY[0x1940280D0](*(_QWORD *)(a1 + 16));
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t VTPixelBufferAttributesMediatorAddLayer(uint64_t a1, const void *a2)
{
  MEMORY[0x1940280C4](*(_QWORD *)(a1 + 16));
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 24), a2);
  MEMORY[0x1940280D0](*(_QWORD *)(a1 + 16));
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t VTPixelBufferAttributesMediatorRemoveRequestedPixelBufferAttributesForKey(uint64_t a1, const void *a2)
{
  const __CFArray *v4;
  CFIndex FirstIndexOfValue;
  CFRange v7;

  MEMORY[0x1940280C4](*(_QWORD *)(a1 + 16));
  v4 = *(const __CFArray **)(a1 + 32);
  v7.length = CFArrayGetCount(v4);
  v7.location = 0;
  FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v4, v7, a2);
  if (FirstIndexOfValue != -1)
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 32), FirstIndexOfValue);
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 40), a2);
  MEMORY[0x1940280D0](*(_QWORD *)(a1 + 16));
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t VTPixelBufferAttributesMediatorRemoveLayer(uint64_t a1, const void *a2)
{
  const __CFArray *v4;
  CFIndex FirstIndexOfValue;
  CFRange v7;

  MEMORY[0x1940280C4](*(_QWORD *)(a1 + 16));
  v4 = *(const __CFArray **)(a1 + 24);
  v7.length = CFArrayGetCount(v4);
  v7.location = 0;
  FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v4, v7, a2);
  if (FirstIndexOfValue != -1)
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 24), FirstIndexOfValue);
  MEMORY[0x1940280D0](*(_QWORD *)(a1 + 16));
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

double vtPixelBufferAttributesMediatorInit(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

uint64_t vtPixelBufferAttributesMediatorFinalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  v2 = (const void *)a1[3];
  if (v2)
  {
    CFRelease(v2);
    a1[3] = 0;
  }
  v3 = (const void *)a1[4];
  if (v3)
  {
    CFRelease(v3);
    a1[4] = 0;
  }
  v4 = (const void *)a1[5];
  if (v4)
  {
    CFRelease(v4);
    a1[5] = 0;
  }
  FigSimpleMutexDestroy();
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterUnregisterForBarrierSupport();
}

__CFString *vtPixelBufferAttributesMediatorCopyDesc(uint64_t a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  const char *v4;
  const __CFArray *v5;
  CFIndex Count;
  uint64_t v7;
  const char *v8;
  CFIndex v9;
  const __CFString *v10;
  const void *ValueAtIndex;
  const char *v12;
  const __CFArray *v13;
  CFIndex v14;
  uint64_t v15;
  const char *v16;
  CFIndex v17;
  const __CFString *v18;
  const void *v19;
  uint64_t v20;
  const void *v21;
  const char *v22;

  v2 = CFGetAllocator((CFTypeRef)a1);
  Mutable = CFStringCreateMutable(v2, 0);
  MEMORY[0x1940280C4](*(_QWORD *)(a1 + 16));
  if (*(_BYTE *)(a1 + 48))
    v4 = "";
  else
    v4 = "not ";
  CFStringAppendFormat(Mutable, 0, CFSTR("<VTPixelBufferAttributesMediatorRef %p, layers %ssuppressed"), a1, v4);
  v5 = *(const __CFArray **)(a1 + 24);
  if (v5 && (Count = CFArrayGetCount(v5)) != 0)
  {
    v7 = Count;
    v8 = "s";
    if (Count <= 1)
      v8 = "";
    CFStringAppendFormat(Mutable, 0, CFSTR(", %lld layer%s: ["), Count, v8);
    if (v7 < 1)
    {
      v10 = CFSTR("]");
    }
    else
    {
      v9 = 0;
      v10 = CFSTR("]");
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), v9);
        if (v9)
          v12 = ", ";
        else
          v12 = "";
        CFStringAppendFormat(Mutable, 0, CFSTR("%s%@"), v12, ValueAtIndex);
        ++v9;
      }
      while (v7 != v9);
    }
  }
  else
  {
    v10 = CFSTR(", no layers");
  }
  CFStringAppend(Mutable, v10);
  v13 = *(const __CFArray **)(a1 + 32);
  if (v13 && (v14 = CFArrayGetCount(v13)) != 0)
  {
    v15 = v14;
    v16 = "s";
    if (v14 <= 1)
      v16 = "";
    CFStringAppendFormat(Mutable, 0, CFSTR(", %lld stakeholder%s: {"), v14, v16);
    if (v15 < 1)
    {
      v18 = CFSTR("}");
    }
    else
    {
      v17 = 0;
      v18 = CFSTR("}");
      do
      {
        v19 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), v17);
        CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), v19);
        v20 = FigCFCopyCompactDescription();
        v21 = (const void *)v20;
        if (v17)
          v22 = ", ";
        else
          v22 = "";
        CFStringAppendFormat(Mutable, 0, CFSTR("%s%@: %@"), v22, v19, v20);
        if (v21)
          CFRelease(v21);
        ++v17;
      }
      while (v15 != v17);
    }
  }
  else
  {
    v18 = CFSTR(", no stakeholders");
  }
  CFStringAppend(Mutable, v18);
  CFStringAppend(Mutable, CFSTR(">"));
  MEMORY[0x1940280D0](*(_QWORD *)(a1 + 16));
  return Mutable;
}

void vtPixelBufferAttributesMediatorCreateCALayerDesiredAttributes()
{
  __CFDictionary *Mutable;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA8FE8], (const void *)*MEMORY[0x1E0C9AE50]);
  vtPixelBufferAttributesMediatorCALayerDesiredAttributes = (uint64_t)Mutable;
}

__CFString *vtCopyVTMTSRenderPassDescriptorFormattingDescWithTabCount(const void *a1, int a2)
{
  const __CFAllocator *v4;
  __CFString *Mutable;
  void *v6;
  const __CFAllocator *v7;
  __CFString *v8;
  CFAllocatorRef v9;

  v4 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v4, 0);
  v6 = (void *)MEMORY[0x194028B74]();
  v7 = CFGetAllocator(a1);
  v8 = CFStringCreateMutable(v7, 0);
  if (a2 >= 1)
  {
    do
    {
      CFStringAppend(v8, CFSTR("\t"));
      --a2;
    }
    while (a2);
  }
  v9 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<VTMTSRenderPassDescriptor %p [%p]>{"), a1, v9);
  CFStringAppendFormat(Mutable, 0, CFSTR("%@}"), v8);
  if (v8)
    CFRelease(v8);
  objc_autoreleasePoolPop(v6);
  return Mutable;
}

__CFString *vtCopyVTMTSRenderPassBarrierFormattingDescWithTabCount(const void *a1, int a2)
{
  const __CFAllocator *v4;
  __CFString *Mutable;
  const __CFAllocator *v6;
  __CFString *v7;
  CFAllocatorRef v8;

  v4 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v4, 0);
  v6 = CFGetAllocator(a1);
  v7 = CFStringCreateMutable(v6, 0);
  if (a2 >= 1)
  {
    do
    {
      CFStringAppend(v7, CFSTR("\t"));
      --a2;
    }
    while (a2);
  }
  v8 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<VTMTSRenderPassBarrier %p [%p]>{}"), a1, v8);
  if (v7)
    CFRelease(v7);
  return Mutable;
}

uint64_t VTMetalTransferSessionCopySupportedPropertyDictionary(uint64_t a1, CFTypeRef *a2)
{
  void *v3;
  uint64_t v4;

  v3 = (void *)MEMORY[0x194028B74]();
  MEMORY[0x1940281CC](&sCreateSupportedPropertyDictionaryOnce_2, vtMetalTransferSessionCreateSupportedPropertyDictionary);
  if (a2 && sVTMetalTransferSessionSupportedPropertyDictionary)
  {
    v4 = 0;
    *a2 = CFRetain((CFTypeRef)sVTMetalTransferSessionSupportedPropertyDictionary);
  }
  else
  {
    v4 = FigSignalErrorAt();
  }
  objc_autoreleasePoolPop(v3);
  return v4;
}

void vtMetalTransferSessionCreateSupportedPropertyDictionary()
{
  void *v0;
  const __CFAllocator *v1;
  CFDictionaryRef v2;
  CFDictionaryRef v3;
  void *values;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  void *keys;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v0 = (void *)MEMORY[0x194028B74]();
  v38 = 0u;
  v37 = 0u;
  v36 = 0u;
  v35 = 0u;
  v34 = 0u;
  v33 = 0u;
  v32 = 0u;
  v31 = 0u;
  v30 = 0u;
  v29 = 0u;
  v28 = 0u;
  v27 = 0u;
  v26 = 0u;
  v25 = 0u;
  v24 = 0u;
  v23 = 0u;
  v21 = 0;
  v20 = 0u;
  v19 = 0u;
  v18 = 0u;
  v17 = 0u;
  v16 = 0u;
  v15 = 0u;
  v14 = 0u;
  v13 = 0u;
  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  v5 = 0u;
  v6 = 0u;
  v39 = 0;
  keys = CFSTR("ReadWriteStatus");
  values = CFSTR("ReadWrite");
  v1 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v2 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v2)
  {
    v3 = v2;
    keys = CFSTR("PreferRenderKernel");
    *(_QWORD *)&v23 = CFSTR("AllowLowQualityScaling");
    values = v2;
    *(_QWORD *)&v5 = v2;
    *((_QWORD *)&v23 + 1) = CFSTR("RequireDeviceRegistryID");
    *(_QWORD *)&v24 = CFSTR("ShouldWaitToComplete");
    *((_QWORD *)&v5 + 1) = v2;
    *(_QWORD *)&v6 = v2;
    *((_QWORD *)&v24 + 1) = CFSTR("WriteBlackPixelsOutsideDestRect");
    *((_QWORD *)&v6 + 1) = v2;
    sVTMetalTransferSessionSupportedPropertyDictionary = (uint64_t)CFDictionaryCreate(v1, (const void **)&keys, (const void **)&values, 5, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!sVTMetalTransferSessionSupportedPropertyDictionary)
      FigSignalErrorAt();
    CFRelease(v3);
  }
  else
  {
    FigSignalErrorAt();
  }
  objc_autoreleasePoolPop(v0);
}

uint64_t VTMetalTransferSessionCopyProperty(const void *a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  void *v7;
  uint64_t DerivedStorage;
  uint64_t v9;
  CFTypeID v10;
  uint64_t v11;
  const void **v13;
  int v14;
  const void **v15;
  const void *UInt64;

  v7 = (void *)MEMORY[0x194028B74]();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *a4 = 0;
  if (a1)
  {
    v9 = DerivedStorage;
    if (DerivedStorage)
    {
      v10 = CFGetTypeID(a1);
      if (v10 == VTPixelTransferNodeGetTypeID() && !*(_BYTE *)(v9 + 20))
      {
        if (CFEqual(a2, CFSTR("PreferRenderKernel")))
        {
          v13 = (const void **)MEMORY[0x1E0C9AE50];
          v14 = *(unsigned __int8 *)(v9 + 1352);
        }
        else if (CFEqual(a2, CFSTR("AllowLowQualityScaling")))
        {
          v13 = (const void **)MEMORY[0x1E0C9AE50];
          v14 = *(unsigned __int8 *)(v9 + 1353);
        }
        else
        {
          if (CFEqual(a2, CFSTR("RequireDeviceRegistryID")))
          {
            UInt64 = (const void *)FigCFNumberCreateUInt64();
            goto LABEL_16;
          }
          if (CFEqual(a2, CFSTR("MostRecentElapsedGPUTime")))
          {
            UInt64 = (const void *)FigCFNumberCreateFloat64();
            goto LABEL_16;
          }
          if (!CFEqual(a2, CFSTR("ShouldWaitToComplete")))
          {
            if (!CFEqual(a2, CFSTR("WriteBlackPixelsOutsideDestRect")))
            {
              if (CFEqual(a2, CFSTR("PQEOTFOpticalScale")))
              {
                UInt64 = *(const void **)(v9 + 1376);
                if (!UInt64)
                  goto LABEL_16;
              }
              else if (CFEqual(a2, CFSTR("PQInvEOTFOpticalScale")))
              {
                UInt64 = *(const void **)(v9 + 1384);
                if (!UInt64)
                  goto LABEL_16;
              }
              else if (CFEqual(a2, CFSTR("HLGOETFOpticalScale")))
              {
                UInt64 = *(const void **)(v9 + 1392);
                if (!UInt64)
                  goto LABEL_16;
              }
              else if (CFEqual(a2, CFSTR("HLGInvOETFOpticalScale")))
              {
                UInt64 = *(const void **)(v9 + 1400);
                if (!UInt64)
                  goto LABEL_16;
              }
              else
              {
                if (!FigCFEqual())
                {
                  v11 = 4294954396;
                  goto LABEL_6;
                }
                UInt64 = *(const void **)(v9 + 1344);
                if (!UInt64)
                  goto LABEL_16;
              }
              goto LABEL_15;
            }
            v13 = (const void **)MEMORY[0x1E0C9AE40];
            v14 = *(unsigned __int8 *)(v9 + 1354);
            v15 = (const void **)MEMORY[0x1E0C9AE50];
LABEL_12:
            if (!v14)
              v13 = v15;
            UInt64 = *v13;
LABEL_15:
            UInt64 = CFRetain(UInt64);
LABEL_16:
            v11 = 0;
            *a4 = UInt64;
            goto LABEL_6;
          }
          v13 = (const void **)MEMORY[0x1E0C9AE50];
          v14 = *(unsigned __int8 *)(v9 + 1368);
        }
        v15 = (const void **)MEMORY[0x1E0C9AE40];
        goto LABEL_12;
      }
    }
  }
  v11 = FigSignalErrorAt();
LABEL_6:
  objc_autoreleasePoolPop(v7);
  return v11;
}

uint64_t VTMetalTransferSessionSetProperty(const void *a1, const void *a2, const void *a3)
{
  void *v6;
  uint64_t DerivedStorage;
  uint64_t v8;
  CFTypeID v9;
  uint64_t TypeID;
  uint64_t v11;
  CFTypeID v12;
  uint64_t v13;
  const void **v14;
  CFTypeID v15;
  CFTypeID v16;
  CFTypeID v17;
  const void *v18;
  CFTypeID v19;
  const void *v20;
  CFTypeID v21;
  const void *v23;
  const void *v24;
  const void *v25;
  CFTypeID v26;

  v6 = (void *)MEMORY[0x194028B74]();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a1)
    goto LABEL_26;
  v8 = DerivedStorage;
  v9 = CFGetTypeID(a1);
  TypeID = VTPixelTransferNodeGetTypeID();
  v11 = 4294954394;
  if (a2 && v9 == TypeID)
  {
    v12 = CFGetTypeID(a2);
    if (v12 == CFStringGetTypeID())
    {
      v13 = CMBaseObjectGetDerivedStorage();
      if (FigCFEqual())
      {
        v14 = (const void **)(v13 + 1432);
LABEL_9:
        v15 = CFStringGetTypeID();
        goto LABEL_10;
      }
      if (FigCFEqual())
      {
        v14 = (const void **)(v13 + 1440);
        goto LABEL_9;
      }
      if (FigCFEqual())
      {
        v14 = (const void **)(v13 + 1448);
        v15 = CFDataGetTypeID();
        goto LABEL_10;
      }
      if (FigCFEqual())
      {
        v14 = (const void **)(v13 + 1456);
        goto LABEL_9;
      }
      if (FigCFEqual())
      {
        v14 = (const void **)(v13 + 1408);
LABEL_20:
        v15 = CFBooleanGetTypeID();
        goto LABEL_10;
      }
      if (FigCFEqual())
      {
        v14 = (const void **)(v13 + 1416);
        goto LABEL_20;
      }
      if (FigCFEqual())
      {
        v14 = (const void **)(v13 + 1424);
        v15 = CFNumberGetTypeID();
LABEL_10:
        if (vtSetPropertyOrArrayOfType(v14, a3, v15, (_BYTE *)(v13 + 64)))
        {
LABEL_11:
          v11 = FigSignalErrorAt();
          goto LABEL_76;
        }
        goto LABEL_75;
      }
      if (FigCFEqual())
      {
        if (FigCFEqual())
        {
          v11 = 0;
          *(_BYTE *)(v8 + 1352) = 1;
          goto LABEL_76;
        }
        if (!a3 || FigCFEqual())
        {
          v11 = 0;
          *(_BYTE *)(v8 + 1352) = 0;
          goto LABEL_76;
        }
        goto LABEL_11;
      }
      if (FigCFEqual())
      {
        if (FigCFEqual())
        {
          v11 = 0;
          *(_BYTE *)(v8 + 1353) = 1;
          goto LABEL_76;
        }
        if (!a3 || FigCFEqual())
        {
          v11 = 0;
          *(_BYTE *)(v8 + 1353) = 0;
          goto LABEL_76;
        }
        goto LABEL_11;
      }
      if (FigCFEqual())
      {
        if (FigCFEqual())
        {
          v11 = 0;
          *(_BYTE *)(v8 + 1368) = 1;
          goto LABEL_76;
        }
        if (!a3 || FigCFEqual())
        {
          v11 = 0;
          *(_BYTE *)(v8 + 1368) = 0;
          goto LABEL_76;
        }
        goto LABEL_11;
      }
      if (FigCFEqual())
      {
        if (FigCFEqual())
        {
          v11 = 0;
          *(_BYTE *)(v8 + 1354) = 0;
          goto LABEL_76;
        }
        if (!a3 || FigCFEqual())
        {
          v11 = 0;
          *(_BYTE *)(v8 + 1354) = 1;
          goto LABEL_76;
        }
        goto LABEL_11;
      }
      if (FigCFEqual())
      {
        if (!a3)
        {
          v18 = *(const void **)(v8 + 1376);
          if (v18)
          {
            CFRelease(v18);
            v11 = 0;
            *(_QWORD *)(v8 + 1376) = 0;
            goto LABEL_76;
          }
          goto LABEL_75;
        }
        v16 = CFGetTypeID(a3);
        if (v16 != CFNumberGetTypeID())
          goto LABEL_11;
        if (!FigCFEqual())
        {
          v11 = *(_QWORD *)(v8 + 1376);
          *(_QWORD *)(v8 + 1376) = a3;
LABEL_73:
          CFRetain(a3);
          if (!v11)
            goto LABEL_76;
          CFRelease((CFTypeRef)v11);
        }
      }
      else if (FigCFEqual())
      {
        if (!a3)
        {
          v20 = *(const void **)(v8 + 1384);
          if (v20)
          {
            CFRelease(v20);
            v11 = 0;
            *(_QWORD *)(v8 + 1384) = 0;
            goto LABEL_76;
          }
          goto LABEL_75;
        }
        v17 = CFGetTypeID(a3);
        if (v17 != CFNumberGetTypeID())
          goto LABEL_11;
        if (!FigCFEqual())
        {
          v11 = *(_QWORD *)(v8 + 1384);
          *(_QWORD *)(v8 + 1384) = a3;
          goto LABEL_73;
        }
      }
      else if (FigCFEqual())
      {
        if (!a3)
        {
          v23 = *(const void **)(v8 + 1392);
          if (v23)
          {
            CFRelease(v23);
            v11 = 0;
            *(_QWORD *)(v8 + 1392) = 0;
            goto LABEL_76;
          }
          goto LABEL_75;
        }
        v19 = CFGetTypeID(a3);
        if (v19 != CFNumberGetTypeID())
          goto LABEL_11;
        if (!FigCFEqual())
        {
          v11 = *(_QWORD *)(v8 + 1392);
          *(_QWORD *)(v8 + 1392) = a3;
          goto LABEL_73;
        }
      }
      else if (FigCFEqual())
      {
        if (!a3)
        {
          v25 = *(const void **)(v8 + 1400);
          if (v25)
          {
            CFRelease(v25);
            v11 = 0;
            *(_QWORD *)(v8 + 1400) = 0;
            goto LABEL_76;
          }
          goto LABEL_75;
        }
        v21 = CFGetTypeID(a3);
        if (v21 != CFNumberGetTypeID())
          goto LABEL_11;
        if (!FigCFEqual())
        {
          v11 = *(_QWORD *)(v8 + 1400);
          *(_QWORD *)(v8 + 1400) = a3;
          goto LABEL_73;
        }
      }
      else
      {
        if (!FigCFEqual())
          goto LABEL_11;
        if (!a3 || CFEqual(a3, (CFTypeRef)*MEMORY[0x1E0C9B0D0]))
        {
          v24 = *(const void **)(v8 + 1344);
          if (v24)
          {
            CFRelease(v24);
            v11 = 0;
            *(_QWORD *)(v8 + 1344) = 0;
            goto LABEL_76;
          }
          goto LABEL_75;
        }
        v26 = CFGetTypeID(a3);
        if (v26 != CFStringGetTypeID())
          goto LABEL_11;
        if (!FigCFEqual())
        {
          v11 = *(_QWORD *)(v8 + 1344);
          *(_QWORD *)(v8 + 1344) = a3;
          goto LABEL_73;
        }
      }
LABEL_75:
      v11 = 0;
      goto LABEL_76;
    }
LABEL_26:
    v11 = 4294954394;
  }
LABEL_76:
  objc_autoreleasePoolPop(v6);
  return v11;
}

uint64_t VTMetalTransferSessionCreatePixelBufferDescription(__CVBuffer *a1, __CFDictionary **a2)
{
  return vtMetalTransferSessionCreatePixelBufferDescriptionWithOptions(a1, 0, a2);
}

uint64_t vtMetalTransferSessionCreatePixelBufferDescriptionWithOptions(__CVBuffer *a1, uint64_t a2, __CFDictionary **a3)
{
  IOSurfaceRef IOSurface;
  __IOSurface *v6;
  __CFDictionary *Mutable;
  CFTypeRef v8;
  const void *v9;
  const void *v10;
  CFTypeRef v11;
  const void *v12;
  CFTypeRef v13;
  const void *v14;
  const void *v15;
  CFTypeRef v16;
  const void *v17;
  CFTypeRef v18;
  const void *v19;
  CFTypeRef v20;
  const void *v21;
  CFTypeRef v22;
  const void *v23;
  CFTypeRef v24;
  const void *v25;
  BOOL v26;
  void *v28;
  void *key;
  CFTypeRef cf;
  OSType PixelFormatType;
  __CFDictionary **v32;

  IOSurface = CVPixelBufferGetIOSurface(a1);
  if (!a3)
    return FigSignalErrorAt();
  if (a1)
  {
    v6 = IOSurface;
    v32 = a3;
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
    FigCFDictionarySetInt32();
    CVPixelBufferGetWidth(a1);
    FigCFDictionarySetCFIndex();
    CVPixelBufferGetHeight(a1);
    FigCFDictionarySetCFIndex();
    if (FigCFDictionaryGetInt32IfPresent())
      FigCFDictionarySetCFIndex();
    if (FigCFDictionaryGetInt32IfPresent())
      FigCFDictionarySetCFIndex();
    if (FigCFDictionaryGetInt32IfPresent())
      FigCFDictionarySetCFIndex();
    if (FigCFDictionaryGetInt32IfPresent())
      FigCFDictionarySetCFIndex();
    v8 = IOSurfaceCopyValue(v6, (CFStringRef)*MEMORY[0x1E0CBBFA0]);
    v9 = (const void *)*MEMORY[0x1E0CBC078];
    cf = v8;
    if (FigCFDictionaryGetBooleanIfPresent())
      CFDictionarySetValue(Mutable, v9, (const void *)*MEMORY[0x1E0C9AE50]);
    v10 = (const void *)*MEMORY[0x1E0CA8D68];
    v11 = CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8D68], 0);
    v12 = (const void *)*MEMORY[0x1E0CA8E98];
    v13 = CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8E98], 0);
    v14 = v13;
    if (v11 && v13)
    {
      CFDictionarySetValue(Mutable, v10, v11);
      CFDictionarySetValue(Mutable, v12, v14);
    }
    v28 = (void *)v12;
    key = (void *)v10;
    v15 = (const void *)*MEMORY[0x1E0CA8CD8];
    v16 = CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8CD8], 0);
    if (v16)
      CFDictionarySetValue(Mutable, v15, v16);
    v17 = (const void *)*MEMORY[0x1E0CA8E40];
    v18 = CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8E40], 0);
    if (v18)
      CFDictionarySetValue(Mutable, v17, v18);
    v19 = (const void *)*MEMORY[0x1E0CA8EE8];
    v20 = CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8EE8], 0);
    if (v20)
      CFDictionarySetValue(Mutable, v19, v20);
    v21 = (const void *)*MEMORY[0x1E0CA8CA8];
    v22 = CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8CA8], 0);
    if (v22)
      CFDictionarySetValue(Mutable, v21, v22);
    v23 = (const void *)*MEMORY[0x1E0CA90D8];
    v24 = CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA90D8], 0);
    v25 = v24;
    v26 = PixelFormatType == 1651521076 || PixelFormatType == 1647392369;
    if (v26 && v24)
    {
      CFDictionarySetValue(Mutable, v23, v24);
      CFDictionaryRemoveValue(Mutable, v15);
      CFDictionarySetValue(Mutable, key, (const void *)*MEMORY[0x1E0CA8D80]);
      CFDictionarySetValue(Mutable, v28, (const void *)*MEMORY[0x1E0CA8EB8]);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA8E90], (const void *)*MEMORY[0x1E0C9AE50]);
    }
    *v32 = Mutable;
    if (cf)
      CFRelease(cf);
    if (v11)
      CFRelease(v11);
    if (v14)
      CFRelease(v14);
    if (v20)
      CFRelease(v20);
    if (v16)
      CFRelease(v16);
    if (v18)
      CFRelease(v18);
    if (v22)
      CFRelease(v22);
    if (v25)
      CFRelease(v25);
  }
  return 0;
}

uint64_t VTMetalTransferSessionCreate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;

  v4 = (void *)MEMORY[0x194028B74]();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  MEMORY[0x1940281CC](&sReadDebugOverrideAllDefaultsOnce_0, ReadDebugOverrideAllDefaults_0);
  if (a3)
  {
    VTPixelTransferNodeGetClassID();
    v5 = CMDerivedObjectCreate();
    FigSignalErrorAt();
  }
  else
  {
    v5 = FigSignalErrorAt();
  }
  objc_autoreleasePoolPop(v4);
  return v5;
}

double ReadDebugOverrideAllDefaults_0()
{
  double result;

  globalVTMTSDebug = 0uLL;
  *(_DWORD *)((char *)&qword_1ECED9238 + 7) = 0;
  qword_1ECED9238 = 0;
  *(_QWORD *)&result = 16842753;
  *(_DWORD *)&byte_1ECED9243 = 16842753;
  byte_1ECED9247 = 0;
  return result;
}

void *checkForDisableWriteCombine(void *result)
{
  int v1;

  if (result)
  {
    objc_msgSend((id)objc_msgSend(result, "vendorName"), "uppercaseString");
    v1 = FigCFEqual();
    return (void *)((FigCFEqual() | v1) != 0);
  }
  return result;
}

void vtmtsCreateDefaultDevice(_QWORD *a1, _BYTE *a2)
{
  id v4;
  id v5;

  v4 = MTLCreateSystemDefaultDevice();
  v5 = v4;
  if (a2)
    *a2 = checkForDisableWriteCombine(v4);
  *a1 = v5;

}

void *vtmtsCacheSupportedPixelformats(void *result, BOOL *a2)
{
  void *v3;
  BOOL v4;
  char v5;

  if (result && a2)
  {
    v3 = (void *)objc_msgSend(result, "name");
    v4 = v3 && (objc_msgSend(v3, "containsString:", CFSTR("Intel")) & 1) != 0;
    *a2 = v4;
    MTLPixelFormatGetInfoForDevice();
    a2[2] = (v5 & 4) != 0;
    a2[3] = (v5 & 0x10) != 0;
    a2[4] = (v5 & 2) != 0;
    MTLPixelFormatGetInfoForDevice();
    a2[5] = (v5 & 4) != 0;
    a2[6] = (v5 & 0x10) != 0;
    a2[7] = (v5 & 2) != 0;
    MTLPixelFormatGetInfoForDevice();
    a2[8] = (v5 & 4) != 0;
    a2[9] = (v5 & 0x10) != 0;
    a2[10] = (v5 & 2) != 0;
    MTLPixelFormatGetInfoForDevice();
    a2[11] = (v5 & 4) != 0;
    a2[12] = (v5 & 0x10) != 0;
    a2[13] = (v5 & 2) != 0;
    MTLPixelFormatGetInfoForDevice();
    a2[14] = (v5 & 4) != 0;
    a2[15] = (v5 & 0x10) != 0;
    a2[16] = (v5 & 2) != 0;
    MTLPixelFormatGetInfoForDevice();
    a2[17] = (v5 & 4) != 0;
    a2[18] = (v5 & 0x10) != 0;
    a2[19] = (v5 & 2) != 0;
    MTLPixelFormatGetInfoForDevice();
    a2[20] = (v5 & 4) != 0;
    a2[21] = (v5 & 0x10) != 0;
    a2[22] = (v5 & 2) != 0;
    MTLPixelFormatGetInfoForDevice();
    a2[23] = (v5 & 4) != 0;
    MTLPixelFormatGetInfoForDevice();
    a2[24] = (v5 & 4) != 0;
    a2[25] = (v5 & 0x10) != 0;
    a2[26] = (v5 & 2) != 0;
    MTLPixelFormatGetInfoForDevice();
    a2[27] = (v5 & 4) != 0;
    a2[28] = (v5 & 0x10) != 0;
    a2[29] = (v5 & 2) != 0;
    MTLPixelFormatGetInfoForDevice();
    a2[30] = (v5 & 4) != 0;
    a2[31] = (v5 & 0x10) != 0;
    a2[32] = (v5 & 2) != 0;
    MTLPixelFormatGetInfoForDevice();
    a2[33] = (v5 & 4) != 0;
    a2[34] = (v5 & 0x10) != 0;
    a2[35] = (v5 & 2) != 0;
    MTLPixelFormatGetInfoForDevice();
    a2[36] = (v5 & 4) != 0;
    a2[37] = (v5 & 0x10) != 0;
    a2[38] = (v5 & 2) != 0;
    MTLPixelFormatGetInfoForDevice();
    a2[39] = (v5 & 4) != 0;
    a2[40] = (v5 & 0x10) != 0;
    a2[41] = (v5 & 2) != 0;
    MTLPixelFormatGetInfoForDevice();
    a2[42] = (v5 & 4) != 0;
    a2[43] = (v5 & 0x10) != 0;
    a2[44] = (v5 & 2) != 0;
    MTLPixelFormatGetInfoForDevice();
    a2[45] = (v5 & 4) != 0;
    a2[46] = (v5 & 0x10) != 0;
    a2[47] = (v5 & 2) != 0;
    MTLPixelFormatGetInfoForDevice();
    a2[48] = (v5 & 0x10) != 0;
    MTLPixelFormatGetInfoForDevice();
    a2[49] = (v5 & 0x10) != 0;
    MTLPixelFormatGetInfoForDevice();
    a2[50] = (v5 & 0x10) != 0;
    MTLPixelFormatGetInfoForDevice();
    a2[51] = (v5 & 4) != 0;
    a2[52] = (v5 & 0x10) != 0;
    a2[53] = (v5 & 2) != 0;
    MTLPixelFormatGetInfoForDevice();
    a2[54] = (v5 & 4) != 0;
    a2[55] = (v5 & 0x10) != 0;
    a2[56] = (v5 & 2) != 0;
    result = (void *)MTLPixelFormatGetInfoForDevice();
    a2[57] = (v5 & 4) != 0;
    a2[58] = (v5 & 0x10) != 0;
    a2[59] = (v5 & 2) != 0;
  }
  return result;
}

uint64_t vtPixelTransferAppendMetalNodeCallback(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v10;
  CFTypeRef v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  char v17;
  uint64_t CurrentDimensions;
  CFNumberRef v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *Value;
  const void *v24;
  const void *v25;
  const void *v26;
  const void **DerivedStorage;
  const void *v28;
  CFTypeRef v29;
  uint64_t v30;
  int valuePtr;
  VTSessionRef session;
  CFTypeRef cf;
  __int128 v35;
  __int128 v36;

  v10 = (void *)MEMORY[0x194028B74]();
  cf = 0;
  v11 = *(CFTypeRef *)(a6 + 176);
  if (v11)
    v11 = CFRetain(v11);
  session = v11;
  v12 = *((unsigned __int8 *)a2 + 4) ^ *(unsigned __int8 *)(a1 + 4);
  v13 = (v12 >> 4) & 1;
  v14 = (v12 >> 3) & 1;
  valuePtr = 0;
  v15 = v12 & 0x18;
  if ((v12 & 4) != 0)
  {
    v17 = 0;
    if (v15 == 24)
    {
      v14 = 0;
      v16 = 90;
    }
    else
    {
      if (!v13)
      {
        valuePtr = 90;
        v14 = (v12 & 8) == 0;
        goto LABEL_13;
      }
      v13 = 0;
      v14 = 0;
      v16 = 270;
    }
LABEL_12:
    valuePtr = v16;
    goto LABEL_13;
  }
  if (v15 == 24)
  {
    v17 = 0;
    v13 = 0;
    v14 = 0;
    v16 = 180;
    goto LABEL_12;
  }
  v17 = 1;
LABEL_13:
  v35 = 0u;
  v36 = 0u;
  if (v11)
    goto LABEL_16;
  CurrentDimensions = VTMetalTransferSessionCreate(0, *(_QWORD *)(a6 + 200), (uint64_t)&session);
  if ((_DWORD)CurrentDimensions)
  {
LABEL_42:
    v30 = CurrentDimensions;
    goto LABEL_43;
  }
  v11 = session;
  if (session)
  {
LABEL_16:
    if ((v17 & 1) != 0)
    {
      VTSessionSetProperty(v11, CFSTR("Rotation"), 0);
    }
    else
    {
      v19 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
      VTSessionSetProperty(session, CFSTR("Rotation"), v19);
      if (v19)
        CFRelease(v19);
    }
    v20 = (const void *)*MEMORY[0x1E0C9AE50];
    if (v13)
      v21 = (const void *)*MEMORY[0x1E0C9AE50];
    else
      v21 = 0;
    VTSessionSetProperty(session, CFSTR("FlipHorizontalOrientation"), v21);
    if (v14)
      v22 = v20;
    else
      v22 = 0;
    VTSessionSetProperty(session, CFSTR("FlipVerticalOrientation"), v22);
    if (((*((unsigned __int8 *)a2 + 4) ^ *(unsigned __int8 *)(a1 + 4)) & 2) != 0)
    {
      Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a6 + 160), (const void *)*MEMORY[0x1E0CA8D68]);
      v24 = CFDictionaryGetValue(*(CFDictionaryRef *)(a6 + 160), (const void *)*MEMORY[0x1E0CA8E98]);
      v25 = CFDictionaryGetValue(*(CFDictionaryRef *)(a6 + 160), (const void *)*MEMORY[0x1E0CA8EE8]);
      v26 = CFDictionaryGetValue(*(CFDictionaryRef *)(a6 + 160), (const void *)*MEMORY[0x1E0CA8E40]);
      if (Value)
        VTSessionSetProperty(session, CFSTR("DestinationColorPrimaries"), Value);
      if (v24)
        VTSessionSetProperty(session, CFSTR("DestinationTransferFunction"), v24);
      if (v25)
        VTSessionSetProperty(session, CFSTR("DestinationYCbCrMatrix"), v25);
      if (v26)
        VTSessionSetProperty(session, CFSTR("DestinationICCProfile"), v26);
    }
    DerivedStorage = (const void **)CMBaseObjectGetDerivedStorage();
    CurrentDimensions = VTPixelTransferGraphGetCurrentDimensions(a1, (uint64_t)a2, a3, a6, 0, (uint64_t)&v35);
    if (!(_DWORD)CurrentDimensions)
    {
      CurrentDimensions = VTPixelTransferChainCreatePixelBufferPoolAttributes(*a2, (unint64_t)*(double *)&v36, (unint64_t)*((double *)&v36 + 1), (CFMutableDictionaryRef *)&cf);
      if (!(_DWORD)CurrentDimensions)
      {
        v28 = *DerivedStorage;
        v29 = cf;
        *DerivedStorage = cf;
        if (v29)
          CFRetain(v29);
        if (v28)
          CFRelease(v28);
        CurrentDimensions = VTPixelTransferChainAppendNode(*(_QWORD *)a6, session);
      }
    }
    goto LABEL_42;
  }
  v30 = 0;
LABEL_43:
  if (cf)
    CFRelease(cf);
  if (session)
    CFRelease(session);
  objc_autoreleasePoolPop(v10);
  return v30;
}

void VTMetalTransferSessionInitializeDestinationArray(_QWORD *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t DerivedStorage;
  uint64_t v9;
  __int16 v10;

  v2 = (void *)MEMORY[0x194028B74]();
  if (a1 && a1[22])
  {
    v3 = CFAllocatorAllocate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 992, 0);
    a1[23] = v3;
    if (v3)
    {
      v4 = 0;
      v5 = 0;
      do
      {
        v6 = *(unsigned int *)&sDstPixelFormatArray[v4];
        v7 = a1[22];
        v10 = 0;
        if (v7)
        {
          DerivedStorage = CMBaseObjectGetDerivedStorage();
          getKernelTypeCapabilities_destination((_BYTE *)(DerivedStorage + 1633), v6, (_BYTE *)&v10 + 1, (char *)&v10);
          if (v10 | HIBYTE(v10))
          {
            v9 = a1[23] + 8 * v5;
            *(_DWORD *)v9 = v6;
            if (getPixelFormatCharacteristics(v6, (_BYTE *)(v9 + 4), (_BYTE *)(v9 + 5)))
              ++v5;
          }
        }
        v4 += 4;
      }
      while (v4 != 496);
    }
    else
    {
      v5 = 0;
    }
    a1[24] = v5;
  }
  objc_autoreleasePoolPop(v2);
}

void VTMetalTransferSessionCleanupDestinationArray(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = (void *)MEMORY[0x194028B74]();
  if (a1)
  {
    v3 = *(void **)(a1 + 184);
    if (v3)
      CFAllocatorDeallocate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v3);
  }
  objc_autoreleasePoolPop(v2);
}

uint64_t VTPixelTransferSessionGetNextMetalBlitter(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  int v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char *v21;

  v10 = (void *)MEMORY[0x194028B74]();
  if (*(_BYTE *)(a4 + 48) || *(_BYTE *)(a4 + 49))
  {
    v11 = *(_QWORD *)(a4 + 32);
    v12 = *(_QWORD *)(a5 + 192);
    if (v11 < v12)
    {
      v13 = *(_QWORD *)(a4 + 40) < 0x40uLL;
      while (!v13)
      {
LABEL_10:
        *(_QWORD *)(a4 + 32) = ++v11;
        *(_QWORD *)(a4 + 40) = 0;
        v13 = 1;
        if (v11 >= v12)
          goto LABEL_11;
      }
      while (1)
      {
        v14 = *(_QWORD *)(a5 + 184) + 8 * *(_QWORD *)(a4 + 32);
        v15 = *(_DWORD *)v14;
        v16 = *(_BYTE *)(v14 + 5);
        *(_DWORD *)a2 = v15;
        *(_BYTE *)(a2 + 6) = *(_BYTE *)(*(_QWORD *)(a5 + 184) + 8 * *(_QWORD *)(a4 + 32) + 4);
        *(_BYTE *)(a2 + 7) = *(_BYTE *)(*(_QWORD *)(a5 + 184) + 8 * *(_QWORD *)(a4 + 32) + 5);
        v17 = a1[4] & 0x1F;
        *(_BYTE *)(a2 + 4) = v17;
        v18 = *(_QWORD *)(a4 + 40);
        if ((v18 & ~(unint64_t)*(unsigned __int8 *)(a5 + 20)) == 0 && (v18 & a1[4]) == 0)
          break;
        *(_QWORD *)(a4 + 40) = v18 + 1;
        if ((unint64_t)(v18 + 1) >= 0x40)
        {
          v11 = *(_QWORD *)(a4 + 32);
          v12 = *(_QWORD *)(a5 + 192);
          goto LABEL_10;
        }
      }
      if ((v18 & 1) != 0 && *(_BYTE *)(a4 + 49))
      {
        v17 |= 1u;
        *(_BYTE *)(a2 + 4) = v17;
        v18 = *(_QWORD *)(a4 + 40);
      }
      if ((v18 & 2) != 0)
      {
        v17 |= 2u;
        *(_BYTE *)(a2 + 4) = v17;
        v18 = *(_QWORD *)(a4 + 40);
        if ((v18 & 4) == 0)
        {
LABEL_17:
          if ((v18 & 8) == 0)
            goto LABEL_18;
          goto LABEL_24;
        }
      }
      else if ((v18 & 4) == 0)
      {
        goto LABEL_17;
      }
      v17 |= 4u;
      *(_BYTE *)(a2 + 4) = v17;
      v18 = *(_QWORD *)(a4 + 40);
      if ((v18 & 8) == 0)
      {
LABEL_18:
        if ((v18 & 0x10) == 0)
          goto LABEL_20;
        goto LABEL_19;
      }
LABEL_24:
      v17 |= 8u;
      *(_BYTE *)(a2 + 4) = v17;
      v18 = *(_QWORD *)(a4 + 40);
      if ((v18 & 0x10) == 0)
      {
LABEL_20:
        *(_QWORD *)(a4 + 40) = v18 + 1;
        if ((v16 & 2) == 0)
        {
          v20 = 0;
LABEL_32:
          *(_BYTE *)(a2 + 5) = v20;
          *(_QWORD *)a3 = vtPixelTransferAppendMetalNodeCallback;
          *(_DWORD *)(a3 + 40) = 2;
          *(int64x2_t *)(a3 + 48) = vdupq_n_s64(0xC8uLL);
          *(_BYTE *)(a3 + 64) = 0;
          v19 = 1;
          goto LABEL_33;
        }
        if ((*(_BYTE *)(a5 + 23) & 3) == 1)
        {
          if ((a1[7] & 2) == 0)
          {
            v20 = 1;
            goto LABEL_32;
          }
          v21 = a1 + 5;
        }
        else
        {
          v21 = (char *)(a5 + 21);
        }
        v20 = *v21;
        goto LABEL_32;
      }
LABEL_19:
      *(_BYTE *)(a2 + 4) = v17 | 0x10;
      v18 = *(_QWORD *)(a4 + 40);
      goto LABEL_20;
    }
  }
LABEL_11:
  v19 = 0;
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_QWORD *)(a4 + 32) = 0;
LABEL_33:
  objc_autoreleasePoolPop(v10);
  return v19;
}

uint64_t VTMetalTransferSessionConfigureForSourceAndDest(const void *a1, void *a2, void *a3, const __CFDictionary *a4)
{
  void *v8;
  CFTypeID v9;
  CFTypeID v10;
  CFTypeID v11;
  CFTypeID v12;
  uint64_t DerivedStorage;
  uint64_t v14;
  const __CFAllocator *v15;
  const CFArrayCallBacks *v16;
  const __CFArray *v17;
  const __CFArray *v18;
  uint64_t v19;
  void *v21;
  void *values[2];

  values[1] = *(void **)MEMORY[0x1E0C80C00];
  v8 = (void *)MEMORY[0x194028B74]();
  if (a1
    && (v9 = CFGetTypeID(a1), v9 == VTPixelTransferNodeGetTypeID())
    && a2
    && (v10 = CFGetTypeID(a2), v10 == CFDictionaryGetTypeID())
    && a3
    && (v11 = CFGetTypeID(a3), v11 == CFDictionaryGetTypeID())
    && (!a4 || (v12 = CFGetTypeID(a4), v12 == CFDictionaryGetTypeID()))
    && (DerivedStorage = CMBaseObjectGetDerivedStorage(), !*(_BYTE *)(DerivedStorage + 21)))
  {
    v14 = DerivedStorage;
    values[0] = a2;
    v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v16 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    v17 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)values, 1, MEMORY[0x1E0C9B378]);
    v21 = a3;
    v18 = CFArrayCreate(v15, (const void **)&v21, 1, v16);
    *(_DWORD *)(v14 + 24) = 1;
    v19 = vtMetalTransferSessionConfigureForManySourcesAndManyDests((uint64_t)a1, v17, v18, a4);
    if (v17)
      CFRelease(v17);
    if (v18)
      CFRelease(v18);
  }
  else
  {
    v19 = FigSignalErrorAt();
  }
  objc_autoreleasePoolPop(v8);
  return v19;
}

uint64_t vtMetalTransferSessionConfigureForManySourcesAndManyDests(uint64_t a1, const __CFArray *a2, const __CFArray *a3, const __CFDictionary *a4)
{
  const void *Value;
  const void *v9;
  CFTypeID v10;
  CFTypeID v11;
  const __CFAllocator *v12;
  CFMutableArrayRef Mutable;
  __CFArray *v14;
  CFIndex Count;
  CFIndex v16;
  __CFArray *v17;
  CFIndex i;
  const __CFDictionary *ValueAtIndex;
  CFMutableDictionaryRef MutableCopy;
  CFMutableDictionaryRef v21;
  CFTypeID v22;
  CFTypeID TypeID;
  const __CFDictionary *v24;
  CFTypeID v25;
  const __CFArray *v26;
  CFTypeID v27;
  const __CFArray *v28;
  CFTypeID v29;
  const __CFArray *v30;
  CFTypeID v31;
  __CFArray *v32;
  const __CFArray *v33;
  const __CFArray *v34;
  CFTypeID v35;
  CFIndex v36;
  CFIndex v37;
  CFIndex v38;
  const void *v39;
  const void *v40;
  const void *v41;
  CFTypeID v42;
  CFMutableDictionaryRef v43;
  CFMutableDictionaryRef v44;
  CFTypeID v45;
  const __CFArray *v46;
  const void *v47;
  CFTypeID v48;
  CFTypeID v49;
  const __CFArray *v50;
  CFTypeID v51;
  const __CFArray *v52;
  CFTypeID v53;
  const __CFBoolean *v54;
  const __CFBoolean *v55;
  CFTypeID v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  const __CFArray *v62;
  __CFArray *v63;
  void *v64;
  CFDictionaryRef theDict;
  CFDictionaryRef theDicta;
  void *key;
  void *v68;
  void *v69;
  void *v70;
  CFAllocatorRef allocator;
  const __CFAllocator *allocatora;
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a4)
  {
    v14 = 0;
    v32 = 0;
    goto LABEL_83;
  }
  Value = CFDictionaryGetValue(a4, CFSTR("SourceAmendments"));
  if (Value
    && ((v9 = Value, v10 = CFGetTypeID(Value), v10 == CFArrayGetTypeID())
     || (v11 = CFGetTypeID(v9), v11 == CFDictionaryGetTypeID())))
  {
    v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    if (!Mutable)
      return 0;
    v14 = Mutable;
    if (a2 && (Count = CFArrayGetCount(a2), Count >= 1))
    {
      v16 = Count;
      theDict = a4;
      v17 = v14;
      v69 = (void *)a1;
      allocator = a3;
      for (i = 0; i != v16; ++i)
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a2, i);
        MutableCopy = CFDictionaryCreateMutableCopy(v12, 0, ValueAtIndex);
        if (!MutableCopy)
        {
          v32 = 0;
          v59 = 0;
          v14 = v17;
          goto LABEL_90;
        }
        v21 = MutableCopy;
        v22 = CFGetTypeID(v9);
        TypeID = CFDictionaryGetTypeID();
        v24 = (const __CFDictionary *)v9;
        if (v22 != TypeID)
        {
          v25 = CFGetTypeID(v9);
          if (v25 == CFArrayGetTypeID())
            v24 = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)v9, i);
          else
            v24 = 0;
        }
        CFDictionaryApplyFunction(v24, (CFDictionaryApplierFunction)dictConcatApplier, v21);
        if (!CFDictionaryGetValue(v21, CFSTR("FlipHorizontalOrientation")))
        {
          v26 = *(const __CFArray **)(DerivedStorage + 1408);
          if (v26)
          {
            v27 = CFGetTypeID(*(CFTypeRef *)(DerivedStorage + 1408));
            if (v27 == CFArrayGetTypeID() && i < CFArrayGetCount(v26))
              CFArrayGetValueAtIndex(v26, i);
          }
          FigCFDictionarySetValue();
        }
        if (!CFDictionaryGetValue(v21, CFSTR("FlipVerticalOrientation")))
        {
          v28 = *(const __CFArray **)(DerivedStorage + 1416);
          if (v28)
          {
            v29 = CFGetTypeID(*(CFTypeRef *)(DerivedStorage + 1416));
            if (v29 == CFArrayGetTypeID() && i < CFArrayGetCount(v28))
              CFArrayGetValueAtIndex(v28, i);
          }
          FigCFDictionarySetValue();
        }
        if (!CFDictionaryGetValue(v21, CFSTR("Rotation")))
        {
          v30 = *(const __CFArray **)(DerivedStorage + 1424);
          if (v30)
          {
            v31 = CFGetTypeID(*(CFTypeRef *)(DerivedStorage + 1424));
            if (v31 == CFArrayGetTypeID() && i < CFArrayGetCount(v30))
              CFArrayGetValueAtIndex(v30, i);
          }
          FigCFDictionarySetValue();
        }
        CFArrayAppendValue(v17, v21);
        CFRelease(v21);
      }
      v14 = v17;
      a2 = v17;
      a1 = (uint64_t)v69;
      a3 = allocator;
      a4 = theDict;
    }
    else
    {
      a2 = v14;
    }
  }
  else
  {
    v14 = 0;
  }
  v33 = (const __CFArray *)CFDictionaryGetValue(a4, CFSTR("DestinationAmendments"));
  if (!v33 || (v34 = v33, v35 = CFGetTypeID(v33), v35 != CFArrayGetTypeID()))
  {
    v32 = 0;
LABEL_80:
    v54 = (const __CFBoolean *)CFDictionaryGetValue(a4, CFSTR("SetGPUPriorityLow"));
    v55 = v54;
    if (!v54)
    {
LABEL_84:
      v57 = CMBaseObjectGetDerivedStorage();
      if (!*(_BYTE *)(v57 + 64)
        || (v58 = v57, !FigCFEqual())
        || !FigCFEqual()
        || *(unsigned __int8 *)(v58 + 1632) != (_DWORD)v55)
      {
        v60 = (void *)MEMORY[0x194028B74]();
        v59 = vtMetalTransferSessionRebuild(a1, a2, a3, (int)v55);
        objc_autoreleasePoolPop(v60);
        goto LABEL_90;
      }
LABEL_88:
      v59 = 0;
      goto LABEL_90;
    }
    v56 = CFGetTypeID(v54);
    if (v56 == CFBooleanGetTypeID())
    {
      LODWORD(v55) = CFBooleanGetValue(v55);
      goto LABEL_84;
    }
LABEL_83:
    LODWORD(v55) = 0;
    goto LABEL_84;
  }
  allocatora = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v32 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (!v32)
    goto LABEL_88;
  if (!a3 || (v36 = CFArrayGetCount(a3), v36 < 1))
  {
    a3 = v32;
    goto LABEL_80;
  }
  v37 = v36;
  theDicta = a4;
  v62 = a2;
  v63 = v14;
  v38 = 0;
  key = (void *)*MEMORY[0x1E0CA8D68];
  v64 = (void *)*MEMORY[0x1E0CA8E98];
  v70 = (void *)*MEMORY[0x1E0CA8E40];
  v68 = (void *)*MEMORY[0x1E0CA8EE8];
  while (1)
  {
    v39 = CFArrayGetValueAtIndex(a3, v38);
    v40 = CFArrayGetValueAtIndex(v34, v38);
    if (v39)
    {
      v41 = v40;
      v42 = CFGetTypeID(v39);
      if (v42 == CFDictionaryGetTypeID())
        break;
    }
LABEL_76:
    if (v37 == ++v38)
    {
      a3 = v32;
      a2 = v62;
      v14 = v63;
      a4 = theDicta;
      goto LABEL_80;
    }
  }
  v43 = CFDictionaryCreateMutableCopy(allocatora, 0, (CFDictionaryRef)v39);
  if (v43)
  {
    v44 = v43;
    if (v41)
    {
      v45 = CFGetTypeID(v41);
      if (v45 == CFDictionaryGetTypeID())
        CFDictionaryApplyFunction((CFDictionaryRef)v41, (CFDictionaryApplierFunction)dictConcatApplier, v44);
    }
    if (!CFDictionaryGetValue(v44, key) && !CFDictionaryGetValue(v44, v64))
    {
      v46 = *(const __CFArray **)(DerivedStorage + 1432);
      v47 = *(const void **)(DerivedStorage + 1440);
      if (v46)
      {
        v48 = CFGetTypeID(*(CFTypeRef *)(DerivedStorage + 1432));
        if (v48 == CFArrayGetTypeID() && v38 < CFArrayGetCount(v46))
        {
          if (v47)
          {
            v49 = CFGetTypeID(v47);
            if (v49 == CFArrayGetTypeID() && v38 < CFArrayGetCount((CFArrayRef)v47))
            {
              CFArrayGetValueAtIndex(v46, v38);
              CFArrayGetValueAtIndex((CFArrayRef)v47, v38);
            }
          }
        }
      }
      if (!FigCFEqual() && !FigCFEqual())
      {
        FigCFDictionarySetValue();
        FigCFDictionarySetValue();
      }
    }
    if (!CFDictionaryGetValue(v44, v70))
    {
      v50 = *(const __CFArray **)(DerivedStorage + 1448);
      if (v50)
      {
        v51 = CFGetTypeID(*(CFTypeRef *)(DerivedStorage + 1448));
        if (v51 == CFArrayGetTypeID() && v38 < CFArrayGetCount(v50))
          CFArrayGetValueAtIndex(v50, v38);
      }
      if (!FigCFEqual())
        FigCFDictionarySetValue();
    }
    if (!CFDictionaryGetValue(v44, v68))
    {
      v52 = *(const __CFArray **)(DerivedStorage + 1456);
      if (v52)
      {
        v53 = CFGetTypeID(*(CFTypeRef *)(DerivedStorage + 1456));
        if (v53 == CFArrayGetTypeID() && v38 < CFArrayGetCount(v52))
          CFArrayGetValueAtIndex(v52, v38);
      }
      if (!FigCFEqual())
        FigCFDictionarySetValue();
    }
    CFArrayAppendValue(v32, v44);
    CFRelease(v44);
    goto LABEL_76;
  }
  v59 = 0;
  v14 = v63;
LABEL_90:
  if (v14)
    CFRelease(v14);
  if (v32)
    CFRelease(v32);
  return v59;
}

uint64_t VTMetalTransferSessionTransferImageSync(const __CFArray *a1, void *a2, void *a3, const __CFDictionary *a4)
{
  void *v8;
  CFTypeID v9;
  CFTypeID v10;
  CFTypeID v11;
  uint64_t DerivedStorage;
  uint64_t v13;
  CFTypeID v14;
  const __CFAllocator *v15;
  const CFArrayCallBacks *v16;
  const __CFArray *v17;
  const __CFArray *v18;
  uint64_t v19;
  void *v21;
  void *values[2];

  values[1] = *(void **)MEMORY[0x1E0C80C00];
  v8 = (void *)MEMORY[0x194028B74]();
  v21 = a3;
  values[0] = a2;
  if (a1
    && (v9 = CFGetTypeID(a1), v9 == VTPixelTransferNodeGetTypeID())
    && a2
    && (v10 = CFGetTypeID(a2), v10 == CVPixelBufferGetTypeID())
    && a3
    && (v11 = CFGetTypeID(a3), v11 == CVPixelBufferGetTypeID())
    && (DerivedStorage = CMBaseObjectGetDerivedStorage(), !*(_BYTE *)(DerivedStorage + 21))
    && ((v13 = DerivedStorage, !a4) || (v14 = CFGetTypeID(a4), v14 == CFDictionaryGetTypeID())))
  {
    v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v16 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    v17 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)values, 1, MEMORY[0x1E0C9B378]);
    v18 = CFArrayCreate(v15, (const void **)&v21, 1, v16);
    *(_DWORD *)(v13 + 24) = 1;
    v19 = vtMetalTransferSessionTransferImageCommonSync(a1, v17, v18, a4);
    if (v17)
      CFRelease(v17);
    if (v18)
      CFRelease(v18);
  }
  else
  {
    v19 = FigSignalErrorAt();
  }
  objc_autoreleasePoolPop(v8);
  return v19;
}

uint64_t vtMetalTransferSessionTransferImageCommonSync(const __CFArray *a1, const __CFArray *a2, const __CFArray *a3, const __CFDictionary *a4)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v9;
  const void *Value;
  const void *v11;
  CFIndex v12;
  CFMutableArrayRef v13;
  __CFArray *v14;
  CFIndex i;
  __CVBuffer *v16;
  CFTypeID v17;
  CFTypeID v18;
  const void *v19;
  CFTypeID v20;
  const __CFArray *v21;
  CFIndex Count;
  const __CFArray *v23;
  CFIndex v24;
  __CVBuffer *v25;
  CFTypeID v26;
  CFTypeID TypeID;
  const void *v28;
  CFTypeID v29;
  uint64_t v30;
  uint64_t v31;
  const __CFArray *v32;
  uint64_t v33;
  uint64_t v34;
  const __CFArray *v35;
  __CFArray *v36;
  int32x2_t v38;
  const __CFArray *v39;
  CFIndex v40;
  int v41;
  const void *v46;
  const void *v47;
  CFTypeID v48;
  const __CFArray *v49;
  CFIndex v50;
  int v51;
  MTLPixelFormat *v52;
  MTLPixelFormat *v53;
  int v54;
  __CVBuffer *v55;
  int ProhibitUseCount;
  const __CFDictionary **v57;
  const __CFDictionary *v58;
  const void *v59;
  OSType PixelFormatType;
  uint64_t v61;
  uint64_t v62;
  const __CFData *v63;
  const __CFData *v64;
  CFTypeID v65;
  __int128 v66;
  uint64_t v67;
  CVMetalTextureRef *v68;
  uint64_t j;
  float v70;
  const __CFData *v71;
  const __CFData *v72;
  CFTypeID v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  uint64_t k;
  int v78;
  int v79;
  unsigned int v80;
  float32x2_t v81;
  __CFArray *v82;
  uint64_t v83;
  size_t v84;
  size_t HeightOfPlane;
  size_t WidthOfPlane;
  __IOSurface *IOSurface;
  size_t BytesPerElementOfPlane;
  id Texture;
  const __CFDictionary **v91;
  const __CFDictionary **v92;
  const __CFArray *v93;
  CFIndex v94;
  void *v95;
  void *v96;
  _OWORD *v97;
  void *v98;
  uint64_t v99;
  void *v100;
  const __CFArray *v101;
  CFIndex v102;
  int v103;
  unsigned int v104;
  int *v105;
  int *v106;
  CFTypeID v107;
  const void *v108;
  const __CFString *v109;
  CFTypeID v110;
  const void *v111;
  CFTypeID v112;
  CFTypeID v113;
  CFIndex v114;
  const __CFArray *v115;
  const __CFArray *v116;
  void *v117;
  const __CFArray *v118;
  CFIndex v119;
  unsigned int v120;
  _DWORD *v121;
  void *v122;
  const __CFString *v123;
  const __CFArray *v124;
  CFIndex v125;
  unsigned int v126;
  unsigned int *v127;
  unsigned int *v128;
  unsigned int v129;
  const void *v130;
  uint64_t v131;
  uint64_t v132;
  const __CFString *v133;
  CFTypeID v134;
  const void *v135;
  CFTypeID v136;
  CFTypeID v137;
  CFIndex v138;
  const __CFArray *v139;
  void *v140;
  const __CFString *v141;
  const __CFArray *v142;
  CFIndex v143;
  unsigned int v144;
  unsigned int *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  double v150;
  double v151;
  double v152;
  double v153;
  double v154;
  uint64_t v155;
  const __CFDictionary **v156;
  __int32 v157;
  const __CFString *v158;
  const __CFString *key;
  const __CFString *v160;
  const __CFString *v161;
  const __CFString *v162;
  const __CFString *v163;
  const __CFString *v164;
  const __CFString *v165;
  const __CFDictionary *v166;
  const __CFDictionary **v167;
  uint64_t v168;
  const __CFDictionary **v169;
  const __CFDictionary **v170;
  int v171;
  __CFArray *v172;
  const __CFArray *v173;
  __CFArray *v174;
  int v175;
  const void *v176;
  const __CFArray *v177;
  CFArrayRef v178;
  uint64_t v179;
  void *v180;
  int v181;
  unsigned int v182;
  int v183;
  int v184;
  void *v185;
  CFArrayRef theArray;
  const __CFArray *theArraya;
  const __CFAllocator *allocator;
  CFAllocatorRef allocatora;
  __CFArray *Mutable;
  CFTypeRef *v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  _OWORD v198[2];
  CFTypeRef ValueAtIndex;
  CFTypeRef cf;
  UInt8 buffer[16];
  __int128 v202;
  __int128 v203;
  uint64_t v204;
  CVMetalTextureRef textureOut[2];
  __int128 v206;
  int v207;
  uint64_t v208;
  CFRange v209;
  CFRange v210;

  v208 = *MEMORY[0x1E0C80C00];
  ValueAtIndex = 0;
  cf = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (*(_BYTE *)(DerivedStorage + 21) || !*(_DWORD *)(DerivedStorage + 24))
  {
    v34 = FigSignalErrorAt();
    v35 = 0;
    v36 = 0;
    goto LABEL_44;
  }
  theArray = a1;
  if (a4)
  {
    Value = CFDictionaryGetValue(a4, CFSTR("SourceAmendments"));
    v11 = CFDictionaryGetValue(a4, CFSTR("DestinationAmendments"));
  }
  else
  {
    Value = 0;
    v11 = 0;
  }
  v191 = (CFTypeRef *)DerivedStorage;
  allocator = v9;
  if (!a2)
  {
    v21 = CFArrayCreateMutable(v9, 0, MEMORY[0x1E0C9B378]);
    if (!a3)
      goto LABEL_38;
LABEL_18:
    Count = CFArrayGetCount(a3);
    v23 = CFArrayCreateMutable(v9, 0, MEMORY[0x1E0C9B378]);
    if (Count < 1)
    {
LABEL_28:
      v30 = (uint64_t)theArray;
      theArraya = v23;
      v31 = vtMetalTransferSessionConfigureForManySourcesAndManyDests(v30, v21, v23, a4);
      if ((_DWORD)v31)
        goto LABEL_39;
      if (Count == 1)
      {
        LODWORD(textureOut[0]) = 0;
        *(_QWORD *)&v192 = 0;
        *(_QWORD *)buffer = 0;
        DerivedStorage = (uint64_t)v191;
        if (*v191)
        {
          CFRelease(*v191);
          *v191 = 0;
        }
        ValueAtIndex = CFArrayGetValueAtIndex(v23, 0);
        FigCFDictionaryGetInt32IfPresent();
        v9 = allocator;
        if (!FigCFDictionaryGetInt64IfPresent())
          FigCFDictionaryGetInt64IfPresent();
        if (!FigCFDictionaryGetInt64IfPresent())
          FigCFDictionaryGetInt64IfPresent();
        VTPixelTransferChainCreatePixelBufferPoolAttributes(LODWORD(textureOut[0]), v192, *(uint64_t *)buffer, (CFMutableDictionaryRef *)v191);
      }
      else
      {
        DerivedStorage = (uint64_t)v191;
        v9 = allocator;
      }
      goto LABEL_58;
    }
    v24 = 0;
    while (1)
    {
      if (ValueAtIndex)
        CFRelease(ValueAtIndex);
      v25 = (__CVBuffer *)CFArrayGetValueAtIndex(a3, v24);
      if (!v11)
        break;
      v26 = CFGetTypeID(v11);
      TypeID = CFDictionaryGetTypeID();
      v28 = v11;
      if (v26 != TypeID)
      {
        v29 = CFGetTypeID(v11);
        if (v29 != CFArrayGetTypeID())
          break;
        v28 = CFArrayGetValueAtIndex((CFArrayRef)v11, v24);
      }
LABEL_27:
      vtMetalTransferSessionCreatePixelBufferDescriptionWithOptions(v25, (uint64_t)v28, (__CFDictionary **)&ValueAtIndex);
      CFArrayAppendValue(v23, ValueAtIndex);
      if (Count == ++v24)
        goto LABEL_28;
    }
    v28 = 0;
    goto LABEL_27;
  }
  v12 = CFArrayGetCount(a2);
  v13 = CFArrayCreateMutable(v9, 0, MEMORY[0x1E0C9B378]);
  v14 = v13;
  if (v12 < 1)
  {
    v21 = v13;
    if (!a3)
      goto LABEL_38;
    goto LABEL_18;
  }
  for (i = 0; i != v12; ++i)
  {
    if (cf)
      CFRelease(cf);
    v16 = (__CVBuffer *)CFArrayGetValueAtIndex(a2, i);
    if (!Value)
      goto LABEL_15;
    v17 = CFGetTypeID(Value);
    v18 = CFDictionaryGetTypeID();
    v19 = Value;
    if (v17 == v18)
      goto LABEL_16;
    v20 = CFGetTypeID(Value);
    if (v20 == CFArrayGetTypeID())
      v19 = CFArrayGetValueAtIndex((CFArrayRef)Value, i);
    else
LABEL_15:
      v19 = 0;
LABEL_16:
    vtMetalTransferSessionCreatePixelBufferDescriptionWithOptions(v16, (uint64_t)v19, (__CFDictionary **)&cf);
    CFArrayAppendValue(v14, cf);
  }
  v21 = v14;
  DerivedStorage = (uint64_t)v191;
  v9 = allocator;
  if (a3)
    goto LABEL_18;
LABEL_38:
  v32 = CFArrayCreateMutable(v9, 0, MEMORY[0x1E0C9B378]);
  v33 = (uint64_t)theArray;
  theArraya = v32;
  v31 = vtMetalTransferSessionConfigureForManySourcesAndManyDests(v33, v21, v32, a4);
  if ((_DWORD)v31)
  {
LABEL_39:
    v34 = v31;
    v35 = 0;
    goto LABEL_40;
  }
LABEL_58:
  if (*(_QWORD *)(DerivedStorage + 1616))
  {
    v197 = 0u;
    memset(v198, 0, 28);
    v195 = 0u;
    v196 = 0u;
    v193 = 0u;
    v194 = 0u;
    v192 = 0u;
    v172 = CFArrayCreateMutable(v9, 0, MEMORY[0x1E0C9B378]);
    v39 = *(const __CFArray **)(DerivedStorage + 1616);
    if (v39)
    {
      v40 = 0;
      v41 = 0;
      v155 = DerivedStorage + 136;
      v156 = (const __CFDictionary **)(DerivedStorage + 128);
      v168 = DerivedStorage + 104;
      v169 = (const __CFDictionary **)(DerivedStorage + 96);
      v170 = (const __CFDictionary **)(DerivedStorage + 120);
      v167 = (const __CFDictionary **)(DerivedStorage + 88);
      v164 = (const __CFString *)*MEMORY[0x1E0CA9080];
      v165 = (const __CFString *)*MEMORY[0x1E0CA90C0];
      v162 = (const __CFString *)*MEMORY[0x1E0CA90B0];
      v163 = (const __CFString *)*MEMORY[0x1E0CA9090];
      v160 = (const __CFString *)*MEMORY[0x1E0CA90A8];
      v161 = (const __CFString *)*MEMORY[0x1E0CA90B8];
      key = (const __CFString *)*MEMORY[0x1E0CA90A0];
      v158 = (const __CFString *)*MEMORY[0x1E0CA9088];
      v38.i32[0] = 1101703851;
      __asm { FMOV            V13.2S, #1.0 }
      v157 = vdup_lane_s32(v38, 0).i32[1];
      v177 = v21;
      v173 = a2;
      do
      {
        if (CFArrayGetCount(v39) <= v40)
          break;
        v181 = v41;
        v46 = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 1616), v40);
        if (v46)
        {
          v47 = v46;
          v48 = CFGetTypeID(v46);
          MEMORY[0x1940281CC](&VTMTSRenderPassDescriptorGetTypeID_sRegisterVTMTSRenderPassDescriptorOnce, RegisterVTMTSRenderPassDescriptor);
          if (v48 == sVTMTSRenderPassDescriptorID)
          {
            v36 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
            v179 = objc_msgSend(*((id *)v47 + 9), "contents");
            v49 = (const __CFArray *)*((_QWORD *)v47 + 25);
            if (v49)
            {
              v50 = 0;
              v51 = 0;
              v175 = 0;
              v171 = -1;
              v174 = v36;
              do
              {
                if (CFArrayGetCount(v49) <= v50)
                  break;
                v52 = (MTLPixelFormat *)CFArrayGetValueAtIndex(*((CFArrayRef *)v47 + 25), v50);
                v53 = v52;
                v54 = *((_DWORD *)v52 + 4);
                if (v54 == 2)
                {
                  v55 = (__CVBuffer *)CFArrayGetValueAtIndex(a3, *((unsigned int *)v52 + 5));
                  v58 = 0;
                  v59 = 0;
                  if (v55)
                    goto LABEL_108;
                }
                else if (v54 == 1)
                {
                  v55 = (__CVBuffer *)CFArrayGetValueAtIndex(a3, *((unsigned int *)v52 + 5));
                  if (CVPixelBufferGetIOSurface(v55) && IOSurfaceGetProhibitUseCount())
                  {
                    _ZF = *((_DWORD *)v47 + 4) == 2;
                    v92 = (const __CFDictionary **)v155;
                    v91 = v156;
                  }
                  else
                  {
                    _ZF = *((_DWORD *)v47 + 4) == 2;
                    v92 = (const __CFDictionary **)v168;
                    v91 = v169;
                  }
                  if (!_ZF)
                    v91 = v92;
                  v58 = *v91;
                  v59 = CFArrayGetValueAtIndex(theArraya, *((unsigned int *)v53 + 5));
                  if (v55)
                    goto LABEL_108;
                }
                else
                {
                  if (v54)
                  {
                    v59 = 0;
                    goto LABEL_130;
                  }
                  v55 = (__CVBuffer *)CFArrayGetValueAtIndex(a2, *((unsigned int *)v52 + 5));
                  if (!CVPixelBufferGetIOSurface(v55)
                    || (ProhibitUseCount = IOSurfaceGetProhibitUseCount(), v57 = v170, !ProhibitUseCount))
                  {
                    v57 = v167;
                  }
                  v58 = *v57;
                  v59 = CFArrayGetValueAtIndex(v177, *((unsigned int *)v53 + 5));
                  if (v55)
                  {
                    PixelFormatType = CVPixelBufferGetPixelFormatType(v55);
                    if (PixelFormatType == 1651521076 || PixelFormatType == 1647392369)
                    {
                      v183 = v51;
                      v166 = v58;
                      if (v171 != -1 && v171 != *((_DWORD *)v53 + 5))
                      {
                        v34 = FigSignalErrorAt();
                        goto LABEL_230;
                      }
                      v61 = objc_msgSend(*((id *)v47 + 11), "contents");
                      v62 = v61;
                      if (v61)
                      {
                        vtGetBufferAttachmentInt32IfPresent(v55, v165, (_DWORD *)(v61 + 4));
                        vtGetBufferAttachmentInt32IfPresent(v55, v164, (_DWORD *)v62);
                        vtGetBufferAttachmentFloatIfPresent(v55, v163, (_DWORD *)(v62 + 44));
                        vtGetBufferAttachmentFloatIfPresent(v55, v162, (_DWORD *)(v62 + 56));
                        vtGetBufferAttachmentFloatIfPresent(v55, v161, (_DWORD *)(v62 + 48));
                        vtGetBufferAttachmentFloatIfPresent(v55, v160, (_DWORD *)(v62 + 52));
                        vtGetBufferAttachmentFloatIfPresent(v55, CFSTR("ProResRAW_LargestDCQSS"), (_DWORD *)(v62 + 60));
                        v63 = (const __CFData *)CVBufferCopyAttachment(v55, key, 0);
                        v64 = v63;
                        if (v63)
                        {
                          v65 = CFGetTypeID(v63);
                          _ZF = v65 == CFDataGetTypeID();
                          v36 = v174;
                          if (_ZF)
                          {
                            if (CFDataGetLength(v64) == 32)
                            {
                              v209.location = 0;
                              v209.length = 32;
                              CFDataGetBytes(v64, v209, buffer);
                              v66 = v202;
                              *(_OWORD *)(v62 + 92) = *(_OWORD *)buffer;
                              *(_OWORD *)(v62 + 108) = v66;
                            }
                            else
                            {
                              FigSignalErrorAt();
                            }
                          }
                        }
                        v67 = 0;
                        v68 = textureOut;
                        do
                        {
                          for (j = 0; j != 3; ++j)
                          {
                            if (v67 == j)
                              v70 = 1.0;
                            else
                              v70 = 0.0;
                            *((float *)v68 + j) = v70;
                          }
                          ++v67;
                          v68 = (CVMetalTextureRef *)((char *)v68 + 12);
                        }
                        while (v67 != 3);
                        v176 = v59;
                        v71 = (const __CFData *)CVBufferCopyAttachment(v55, v158, 0);
                        v72 = v71;
                        if (v71)
                        {
                          v73 = CFGetTypeID(v71);
                          _ZF = v73 == CFDataGetTypeID();
                          v36 = v174;
                          if (_ZF && (unint64_t)CFDataGetLength(v72) >= 0x24)
                          {
                            v210.location = 0;
                            v210.length = 36;
                            CFDataGetBytes(v72, v210, buffer);
                            *(_OWORD *)textureOut = *(_OWORD *)buffer;
                            v206 = v202;
                            v207 = v203;
                          }
                        }
                        v74 = v62 + 8;
                        matrixMultiply(setUpProResParametersForPixelBuffer_kXYZToRGB_2020, (float *)textureOut, (float *)(v62 + 8));
                        v75 = 0;
                        v76 = *(float *)(v62 + 44) / 0.9;
                        *(float *)&v76 = v76;
                        do
                        {
                          for (k = 0; k != 12; k += 4)
                            *(float *)(v74 + k) = *(float *)(v74 + k) * *(float *)&v76;
                          ++v75;
                          v74 += 12;
                        }
                        while (v75 != 3);
                        v78 = *(_DWORD *)v62;
                        v79 = *(_DWORD *)(v62 + 4) - *(_DWORD *)v62;
                        *(float *)&v76 = (float)v79;
                        if (!v79)
                          *(float *)&v76 = 65535.0;
                        *(float *)&v80 = (float)((float)(*(float *)(v62 + 60) * *(float *)(v62 + 60)) * 5.0) + 21.333;
                        *(float *)(v62 + 64) = 1.0 / *(float *)&v76;
                        *(float *)(v62 + 76) = *(float *)&v80 / 150990000.0;
                        v81 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v76, 0);
                        v81.f32[0] = *(float *)&v76 * 256.0;
                        *(float32x2_t *)(v62 + 80) = vdiv_f32((float32x2_t)__PAIR64__(v157, v80), vmul_n_f32(v81, *(float *)&v76));
                        *(int8x8_t *)(v62 + 68) = vbsl_s8((int8x8_t)vceqz_f32(*(float32x2_t *)(v62 + 48)), (int8x8_t)_D13, (int8x8_t)vdiv_f32(_D13, *(float32x2_t *)(v62 + 48)));
                        *(float *)(v62 + 88) = (float)v78 / *(float *)&v76;
                        if (v72)
                          CFRelease(v72);
                        DerivedStorage = (uint64_t)v191;
                        v59 = v176;
                        if (v64)
                          CFRelease(v64);
                      }
                      v196 = *(_OWORD *)(v62 + 64);
                      v197 = *(_OWORD *)(v62 + 80);
                      v198[0] = *(_OWORD *)(v62 + 96);
                      *(_OWORD *)((char *)v198 + 12) = *(_OWORD *)(v62 + 108);
                      v192 = *(_OWORD *)v62;
                      v193 = *(_OWORD *)(v62 + 16);
                      v194 = *(_OWORD *)(v62 + 32);
                      v195 = *(_OWORD *)(v62 + 48);
                      v171 = *((_DWORD *)v53 + 5);
                      v175 = 1;
                      v58 = v166;
                      v51 = v183;
                    }
LABEL_108:
                    v184 = v51;
                    v82 = v36;
                    v83 = (uint64_t)v59;
                    textureOut[0] = 0;
                    v84 = CVPixelBufferGetWidthOfPlane(v55, *((unsigned int *)v53 + 6)) / *((unsigned int *)v53 + 10);
                    HeightOfPlane = CVPixelBufferGetHeightOfPlane(v55, *((unsigned int *)v53 + 6));
                    if (!*((_DWORD *)v53 + 6) && *((_DWORD *)v53 + 14) == 2 && *((_DWORD *)v53 + 10) == 1)
                    {
                      WidthOfPlane = CVPixelBufferGetWidthOfPlane(v55, 0);
                      _ZF = WidthOfPlane == CVPixelBufferGetWidth(v55);
                      v82 = v174;
                      if (_ZF)
                        v84 = CVPixelBufferGetWidthOfPlane(v55, *((unsigned int *)v53 + 6)) >> 1;
                    }
                    if (*((_DWORD *)v53 + 16) != 1)
                      setBufferExtents((float *)(v179 + 16 * *((unsigned int *)v53 + 11)), v53, v83, v84, HeightOfPlane, *(_BYTE *)(DerivedStorage + 1354) == 0);
                    v204 = 0;
                    v202 = 0u;
                    v203 = 0u;
                    *(_OWORD *)buffer = 0u;
                    MTLPixelFormatGetInfoForDevice();
                    IOSurface = CVPixelBufferGetIOSurface(v55);
                    BytesPerElementOfPlane = IOSurfaceGetBytesPerElementOfPlane(IOSurface, *((unsigned int *)v53 + 6));
                    if (*((_QWORD *)&v202 + 1) > BytesPerElementOfPlane * *((unsigned int *)v53 + 10))
                    {
                      CVPixelBufferGetPixelFormatType(v55);
                      v34 = FigSignalErrorAt();
                      v36 = v82;
                      goto LABEL_230;
                    }
                    CVMetalTextureCacheCreateTextureFromImage(allocator, *(CVMetalTextureCacheRef *)(DerivedStorage + 48), v55, v58, v53[4], v84, HeightOfPlane, *((unsigned int *)v53 + 6), textureOut);
                    v36 = v82;
                    if (!textureOut[0])
                      goto LABEL_228;
                    CFArrayAppendValue(Mutable, textureOut[0]);
                    Texture = CVMetalTextureGetTexture(textureOut[0]);
                    CFArrayAppendValue(v82, Texture);
                    if (textureOut[0])
                      CFRelease(textureOut[0]);
                    a2 = v173;
                    v51 = v184;
                    goto LABEL_139;
                  }
                }
                v54 = *((_DWORD *)v53 + 4);
LABEL_130:
                if (v54 == 3)
                {
                  v93 = *(const __CFArray **)(DerivedStorage + 80);
                  if (!v93
                    || (v94 = *((unsigned int *)v53 + 5), CFArrayGetCount(v93) <= v94)
                    || (v95 = (void *)CFArrayGetValueAtIndex(v93, v94)) == 0)
                  {
LABEL_228:
                    v34 = 4294954392;
LABEL_230:
                    v21 = v177;
                    v35 = v172;
                    if (!v177)
                      goto LABEL_42;
LABEL_41:
                    CFRelease(v21);
                    goto LABEL_42;
                  }
                  v96 = v95;
                  CFArrayAppendValue(v36, v95);
                  setBufferExtents((float *)(v179 + 16 * *((unsigned int *)v53 + 11)), v53, (uint64_t)v59, objc_msgSend(v96, "width"), objc_msgSend(v96, "height"), 0);
                  if (*((_DWORD *)v47 + 508))
                  {
                    DerivedStorage = (uint64_t)v191;
                    if (!v175)
                    {
                      v97 = (_OWORD *)objc_msgSend(*((id *)v47 + 11), "contents");
                      v175 = 0;
                      v97[4] = v196;
                      v97[5] = v197;
                      v97[6] = v198[0];
                      *(_OWORD *)((char *)v97 + 108) = *(_OWORD *)((char *)v198 + 12);
                      *v97 = v192;
                      v97[1] = v193;
                      v97[2] = v194;
                      v97[3] = v195;
                    }
                  }
                  else
                  {
                    DerivedStorage = (uint64_t)v191;
                  }
                  v36 = v174;
                }
LABEL_139:
                v50 = (v51 + 1);
                v49 = (const __CFArray *)*((_QWORD *)v47 + 25);
                ++v51;
              }
              while (v49);
            }
            CFArrayAppendValue(v172, v36);
            v21 = v177;
            if (v36)
              CFRelease(v36);
          }
        }
        v40 = (v181 + 1);
        v39 = *(const __CFArray **)(DerivedStorage + 1616);
        v41 = v181 + 1;
      }
      while (v39);
    }
    v35 = v172;
  }
  else
  {
    v35 = 0;
  }
  if (!*(_BYTE *)(DerivedStorage + 64))
  {
    v34 = FigSignalErrorAt();
    v154 = 0.0;
    goto LABEL_226;
  }
  v98 = (void *)MEMORY[0x194028B74]();
  v99 = objc_msgSend(*(id *)(DerivedStorage + 1480), "commandBuffer");
  if (!v99)
  {
    v34 = 4294954392;
LABEL_221:
    objc_autoreleasePoolPop(v98);
LABEL_40:
    v36 = 0;
    if (!v21)
      goto LABEL_42;
    goto LABEL_41;
  }
  v100 = (void *)v99;
  v101 = *(const __CFArray **)(DerivedStorage + 1616);
  if (!v101)
  {
    v154 = 0.0;
    goto LABEL_225;
  }
  v185 = v100;
  v178 = v21;
  v180 = v98;
  v102 = 0;
  v103 = 0;
  v104 = 0;
  allocatora = (CFAllocatorRef)(DerivedStorage + 144);
  while (2)
  {
    if (CFArrayGetCount(v101) > v102)
    {
      v105 = (int *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 1616), v102);
      if (v105)
      {
        v106 = v105;
        v107 = CFGetTypeID(v105);
        MEMORY[0x1940281CC](&VTMTSRenderPassDescriptorGetTypeID_sRegisterVTMTSRenderPassDescriptorOnce, RegisterVTMTSRenderPassDescriptor);
        if (v107 == sVTMTSRenderPassDescriptorID)
        {
          v108 = CFArrayGetValueAtIndex(v35, v104);
          if (*((_QWORD *)v106 + 4))
          {
            v109 = *(const __CFString **)(DerivedStorage + 1344);
            v110 = CFGetTypeID(v106);
            MEMORY[0x1940281CC](&VTMTSRenderPassDescriptorGetTypeID_sRegisterVTMTSRenderPassDescriptorOnce, RegisterVTMTSRenderPassDescriptor);
            if (v110 == sVTMTSRenderPassDescriptorID)
            {
              v111 = (const void *)*((_QWORD *)v106 + 25);
              if (v111)
              {
                v112 = CFGetTypeID(v111);
                if (v112 == CFArrayGetTypeID())
                {
                  if (v108)
                  {
                    v113 = CFGetTypeID(v108);
                    if (v113 == CFArrayGetTypeID())
                    {
                      v114 = CFArrayGetCount((CFArrayRef)v108);
                      v115 = (const __CFArray *)*((_QWORD *)v106 + 25);
                      if (v115)
                        v115 = (const __CFArray *)CFArrayGetCount(v115);
                      if ((const __CFArray *)v114 == v115)
                      {
                        v182 = v104;
                        v116 = v35;
                        v117 = (void *)objc_msgSend(MEMORY[0x1E0CC6B50], "renderPassDescriptor");
                        v118 = (const __CFArray *)*((_QWORD *)v106 + 25);
                        if (v118)
                        {
                          v119 = 0;
                          v120 = 1;
                          do
                          {
                            if (CFArrayGetCount(v118) <= v119)
                              break;
                            v121 = CFArrayGetValueAtIndex(*((CFArrayRef *)v106 + 25), v119);
                            if (v121[16] == 1)
                              objc_msgSend((id)objc_msgSend((id)objc_msgSend(v117, "colorAttachments"), "objectAtIndexedSubscript:", v121[11]), "setTexture:", CFArrayGetValueAtIndex((CFArrayRef)v108, v119));
                            v119 = v120;
                            v118 = (const __CFArray *)*((_QWORD *)v106 + 25);
                            ++v120;
                          }
                          while (v118);
                        }
                        v122 = (void *)objc_msgSend(v185, "renderCommandEncoderWithDescriptor:", v117);
                        objc_msgSend(v122, "setVertexBuffer:offset:atIndex:", *((_QWORD *)v106 + 5), 0, 0);
                        objc_msgSend(v122, "setVertexBuffer:offset:atIndex:", *((_QWORD *)v106 + 6), 0, 1);
                        objc_msgSend(v122, "setFragmentBuffer:offset:atIndex:", *((_QWORD *)v106 + 8), 0, 0);
                        objc_msgSend(v122, "setFragmentBuffer:offset:atIndex:", *((_QWORD *)v106 + 9), 0, 1);
                        objc_msgSend(v122, "setFragmentBuffer:offset:atIndex:", *((_QWORD *)v106 + 10), 0, 2);
                        if (v109)
                          v123 = v109;
                        else
                          v123 = CFSTR("com.apple.VideoToolbox.VTMetalTransferSession");
                        objc_msgSend(v122, "setLabel:", v123);
                        v124 = (const __CFArray *)*((_QWORD *)v106 + 25);
                        if (v124)
                        {
                          v125 = 0;
                          v126 = 1;
                          do
                          {
                            if (CFArrayGetCount(v124) <= v125)
                              break;
                            v127 = (unsigned int *)CFArrayGetValueAtIndex(*((CFArrayRef *)v106 + 25), v125);
                            if (!v127[16])
                            {
                              v128 = v127;
                              v129 = v127[12];
                              v130 = CFArrayGetValueAtIndex((CFArrayRef)v108, v125);
                              v131 = v128[11];
                              if (v129)
                                objc_msgSend(v122, "setFragmentTexture:atTextureIndex:samplerState:atSamplerIndex:", v130, v131, *((_QWORD *)allocatora + v128[12]), v128[13]);
                              else
                                objc_msgSend(v122, "setFragmentTexture:atIndex:", v130, v131);
                            }
                            v125 = v126;
                            v124 = (const __CFArray *)*((_QWORD *)v106 + 25);
                            ++v126;
                          }
                          while (v124);
                        }
                        v132 = *((_QWORD *)v106 + 256);
                        DerivedStorage = (uint64_t)v191;
                        v35 = v116;
                        if (v132)
                          objc_msgSend(v122, "setFragmentTexture:atIndex:", v132, v106[77]);
                        objc_msgSend(v122, "setRenderPipelineState:", *((_QWORD *)v106 + 4));
                        objc_msgSend(v122, "drawPrimitives:vertexStart:vertexCount:", 4, 0, 4);
                        v104 = v182;
                        if (!v122)
                          goto LABEL_210;
LABEL_209:
                        objc_msgSend(v122, "endEncoding");
                        goto LABEL_210;
                      }
                    }
                  }
                }
              }
            }
LABEL_213:
            v149 = FigSignalErrorAt();
            if ((_DWORD)v149)
            {
              v34 = v149;
              v21 = v178;
              v98 = v180;
              goto LABEL_221;
            }
          }
          else
          {
            if (!*((_QWORD *)v106 + 7))
              goto LABEL_210;
            v133 = *(const __CFString **)(DerivedStorage + 1344);
            v134 = CFGetTypeID(v106);
            MEMORY[0x1940281CC](&VTMTSRenderPassDescriptorGetTypeID_sRegisterVTMTSRenderPassDescriptorOnce, RegisterVTMTSRenderPassDescriptor);
            if (v134 != sVTMTSRenderPassDescriptorID)
              goto LABEL_213;
            v135 = (const void *)*((_QWORD *)v106 + 25);
            if (!v135)
              goto LABEL_213;
            v136 = CFGetTypeID(v135);
            if (v136 != CFArrayGetTypeID())
              goto LABEL_213;
            if (!v108)
              goto LABEL_213;
            v137 = CFGetTypeID(v108);
            if (v137 != CFArrayGetTypeID())
              goto LABEL_213;
            v138 = CFArrayGetCount((CFArrayRef)v108);
            v139 = (const __CFArray *)*((_QWORD *)v106 + 25);
            if (v139)
              v139 = (const __CFArray *)CFArrayGetCount(v139);
            if ((const __CFArray *)v138 != v139)
              goto LABEL_213;
            v140 = (void *)objc_msgSend(v185, "computeCommandEncoder");
            v122 = v140;
            if (v133)
              v141 = v133;
            else
              v141 = CFSTR("com.apple.VideoToolbox.VTMetalTransferSession");
            objc_msgSend(v140, "setLabel:", v141);
            objc_msgSend(v122, "setComputePipelineState:", *((_QWORD *)v106 + 7));
            objc_msgSend(v122, "setBuffer:offset:atIndex:", *((_QWORD *)v106 + 8), 0, 0);
            objc_msgSend(v122, "setBuffer:offset:atIndex:", *((_QWORD *)v106 + 9), 0, 1);
            objc_msgSend(v122, "setBuffer:offset:atIndex:", *((_QWORD *)v106 + 10), 0, 2);
            objc_msgSend(v122, "setBuffer:offset:atIndex:", *((_QWORD *)v106 + 11), 0, 3);
            v142 = (const __CFArray *)*((_QWORD *)v106 + 25);
            if (v142)
            {
              v143 = 0;
              v144 = 1;
              do
              {
                if (CFArrayGetCount(v142) <= v143)
                  break;
                v145 = (unsigned int *)CFArrayGetValueAtIndex(*((CFArrayRef *)v106 + 25), v143);
                if (!v145[16])
                  objc_msgSend(v122, "setTexture:atIndex:", CFArrayGetValueAtIndex((CFArrayRef)v108, v143), v145[11]);
                v146 = v145[12];
                if ((_DWORD)v146)
                  objc_msgSend(v122, "setSamplerState:atIndex:", *((_QWORD *)allocatora + v146), v145[13]);
                v143 = v144;
                v142 = (const __CFArray *)*((_QWORD *)v106 + 25);
                ++v144;
              }
              while (v142);
            }
            v147 = *((_QWORD *)v106 + 256);
            if (v147)
              objc_msgSend(v122, "setTexture:atIndex:", v147, v106[77]);
            v148 = *((_QWORD *)v106 + 257);
            DerivedStorage = (uint64_t)v191;
            if (v148)
              objc_msgSend(v122, "setTexture:atIndex:", v148, v106[78]);
            v192 = *((_OWORD *)v106 + 11);
            *(_QWORD *)&v193 = *((_QWORD *)v106 + 24);
            *(_OWORD *)buffer = *(_OWORD *)(v106 + 38);
            *(_QWORD *)&v202 = *((_QWORD *)v106 + 21);
            objc_msgSend(v122, "dispatchThreadgroups:threadsPerThreadgroup:", &v192, buffer);
            if (v122)
              goto LABEL_209;
          }
LABEL_210:
          ++v104;
        }
      }
      v102 = (v103 + 1);
      v101 = *(const __CFArray **)(DerivedStorage + 1616);
      ++v103;
      if (!v101)
        break;
      continue;
    }
    break;
  }
  if ((objc_msgSend(v185, "commitAndWaitUntilSubmitted") & 1) == 0)
    objc_msgSend(v185, "waitUntilScheduled");
  v21 = v178;
  v98 = v180;
  if (*(_BYTE *)(DerivedStorage + 1368))
    objc_msgSend(v185, "waitUntilCompleted");
  objc_msgSend(v185, "GPUEndTime");
  v151 = v150;
  objc_msgSend(v185, "GPUStartTime");
  v153 = v152;
  if (objc_msgSend(v185, "error"))
  {
    v34 = 4294954394;
    goto LABEL_221;
  }
  v154 = v151 - v153 + 0.0;
LABEL_225:
  objc_autoreleasePoolPop(v98);
  v34 = 0;
LABEL_226:
  v36 = 0;
  *(double *)(DerivedStorage + 1624) = v154;
  if (v21)
    goto LABEL_41;
LABEL_42:
  if (theArraya)
    CFRelease(theArraya);
LABEL_44:
  if (cf)
    CFRelease(cf);
  if (ValueAtIndex)
    CFRelease(ValueAtIndex);
  if (v35)
    CFRelease(v35);
  if (v36)
    CFRelease(v36);
  if (Mutable)
    CFRelease(Mutable);
  return v34;
}

uint64_t VTMetalTransferSessionCompositeImageSync(const __CFArray *a1, const __CFArray *a2, const void *a3, const __CFDictionary *a4)
{
  void *v8;
  CFTypeID v9;
  CFTypeID v10;
  CFTypeID v11;
  uint64_t DerivedStorage;
  uint64_t v13;
  CFTypeID v14;
  const __CFArray *v15;
  uint64_t v16;
  const void *v18[2];

  v18[1] = *(const void **)MEMORY[0x1E0C80C00];
  v8 = (void *)MEMORY[0x194028B74]();
  v18[0] = a3;
  if (a1
    && (v9 = CFGetTypeID(a1), v9 == VTPixelTransferNodeGetTypeID())
    && a2
    && (v10 = CFGetTypeID(a2), v10 == CFArrayGetTypeID())
    && a3
    && (v11 = CFGetTypeID(a3), v11 == CVPixelBufferGetTypeID())
    && (DerivedStorage = CMBaseObjectGetDerivedStorage(), !*(_BYTE *)(DerivedStorage + 21))
    && ((v13 = DerivedStorage, !a4) || (v14 = CFGetTypeID(a4), v14 == CFDictionaryGetTypeID())))
  {
    v15 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v18, 1, MEMORY[0x1E0C9B378]);
    *(_DWORD *)(v13 + 24) = 2;
    v16 = vtMetalTransferSessionTransferImageCommonSync(a1, a2, v15, a4);
    if (v15)
      CFRelease(v15);
  }
  else
  {
    v16 = FigSignalErrorAt();
  }
  objc_autoreleasePoolPop(v8);
  return v16;
}

uint64_t VTMetalTransferSessionGetRequiredAlignment(uint64_t a1, uint64_t *a2)
{
  void *v3;
  uint64_t DerivedStorage;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (void *)MEMORY[0x194028B74]();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage && (v5 = *(id *)(DerivedStorage + 1464)) != 0)
  {
    v6 = 0;
  }
  else
  {
    v5 = MTLCreateSystemDefaultDevice();
    v6 = v5;
    if (!v5)
    {
      v7 = 0;
      v8 = 4294954389;
      goto LABEL_7;
    }
  }
  v7 = objc_msgSend(v5, "iosurfaceTextureAlignmentBytes");
  v8 = 0;
LABEL_7:
  *a2 = v7;

  objc_autoreleasePoolPop(v3);
  return v8;
}

uint64_t VTMetalTransferSessionStartPerformanceCapture()
{
  objc_autoreleasePoolPop((void *)MEMORY[0x194028B74]());
  return 0;
}

uint64_t VTMetalTransferSessionStopPerformanceCapture()
{
  objc_autoreleasePoolPop((void *)MEMORY[0x194028B74]());
  return 0;
}

uint64_t VTMetalTransferSessionGenerateColorBars(void *a1)
{
  void *v2;
  CFTypeID v3;
  CFTypeID TypeID;
  uint64_t v5;
  CFTypeID v6;
  const __CFArray *v7;
  uint64_t v8;
  CFTypeRef cf;
  void *values[2];

  values[1] = *(void **)MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x194028B74]();
  cf = 0;
  values[0] = a1;
  if (!a1 || (v3 = CFGetTypeID(a1), TypeID = CVPixelBufferGetTypeID(), v3 != TypeID))
  {
LABEL_12:
    v5 = FigSignalErrorAt();
    goto LABEL_13;
  }
  v5 = VTMetalTransferSessionCreate(TypeID, 0, (uint64_t)&cf);
  if (!(_DWORD)v5)
  {
    if (cf)
    {
      v6 = CFGetTypeID(cf);
      if (v6 == VTPixelTransferNodeGetTypeID())
      {
        v7 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)values, 1, MEMORY[0x1E0C9B378]);
        *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 24) = 1;
        v8 = vtMetalTransferSessionTransferImageCommonSync((const __CFArray *)cf, 0, v7, 0);
        goto LABEL_7;
      }
    }
    goto LABEL_12;
  }
LABEL_13:
  v8 = v5;
  v7 = 0;
LABEL_7:
  if (cf)
    CFRelease(cf);
  if (v7)
    CFRelease(v7);
  objc_autoreleasePoolPop(v2);
  return v8;
}

uint64_t VTMetalTransferSessionCanDoHighQualityScaling(uint64_t a1, int a2)
{
  void *v3;
  uint64_t DerivedStorage;
  unsigned int v5;
  uint64_t v6;

  v3 = (void *)MEMORY[0x194028B74]();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x1940281CC](&sReadDebugOverrideAllDefaultsOnce_0, ReadDebugOverrideAllDefaults_0);
  v5 = byte_1ECED9243;
  if (byte_1ECED9243)
  {
    if (vtmtsGetIntermediateScalingFormat((unsigned __int8 *)(DerivedStorage + 1633), a2, 0, 0, 0, 0))v6 = 0;
    else
      v6 = v5;
  }
  else
  {
    v6 = 0;
  }
  objc_autoreleasePoolPop(v3);
  return v6;
}

uint64_t vtmtsGetIntermediateScalingFormat(unsigned __int8 *a1, int a2, int *a3, uint64_t a4, int a5, int *a6)
{
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t result;
  int v25;
  __int16 v26;

  v26 = 0;
  if (a2 > 1380411456)
  {
    if (a2 > 1983013175)
    {
      if (a2 > 2019964015)
      {
        if (a2 > 2037741157)
        {
          if (a2 > 2084075055)
          {
            if (a2 <= 2088265263)
            {
              if (a2 != 2084075056)
              {
                v10 = 2084718401;
                goto LABEL_159;
              }
              goto LABEL_124;
            }
            if (a2 == 2088265264)
              goto LABEL_226;
            v16 = 2088269360;
            goto LABEL_219;
          }
          if (a2 == 2037741158)
            goto LABEL_167;
          if (a2 == 2037741171)
            goto LABEL_172;
          v11 = 2084070960;
LABEL_187:
          if (a2 != v11)
            goto LABEL_321;
          goto LABEL_188;
        }
        if (a2 <= 2021078067)
        {
          if (a2 == 2019964016)
            goto LABEL_180;
          if (a2 == 2021077552)
          {
            if (a4)
            {
              *(_OWORD *)a4 = xmmword_1928E2970;
              *(_QWORD *)(a4 + 16) = 0;
              *(_QWORD *)(a4 + 24) = 0;
            }
            if (!a3 || a5 != 1)
              goto LABEL_317;
            v21 = 1114112;
            v22 = 2019963440;
LABEL_274:
            v13 = v22 | v21;
            goto LABEL_316;
          }
          if (a2 != 2021077554)
            goto LABEL_321;
          if (a4)
          {
            *(_OWORD *)a4 = xmmword_1928E2970;
            *(_QWORD *)(a4 + 16) = 0;
            *(_QWORD *)(a4 + 24) = 0;
          }
          if (a3 && a5 == 1)
          {
            v13 = 2021077554;
LABEL_316:
            *a3 = v13;
          }
LABEL_317:
          result = 0;
          if (!a6)
            return result;
          v25 = 1;
          goto LABEL_319;
        }
        if (a2 == 2021078068 || a2 == 2021078128)
        {
          if (a4)
          {
            *(_OWORD *)a4 = xmmword_1928E2970;
            *(_QWORD *)(a4 + 16) = 0;
            *(_QWORD *)(a4 + 24) = 0;
          }
          if (!a3)
            goto LABEL_317;
          v13 = 2021078068;
          goto LABEL_316;
        }
        if (a2 != 2033463606)
          goto LABEL_321;
LABEL_149:
        if (a4)
        {
          *(_QWORD *)a4 = 110;
          *(_QWORD *)(a4 + 8) = 0;
          *(_QWORD *)(a4 + 16) = 0;
          *(_QWORD *)(a4 + 24) = 0;
        }
        if (!a3)
          goto LABEL_309;
        v17 = 2033463606;
        goto LABEL_308;
      }
      if (a2 <= 2016687155)
      {
        if (a2 <= 2016567666)
        {
          if (a2 == 1983013176)
          {
            if (a4)
            {
              *(_OWORD *)a4 = xmmword_1928E2970;
              *(_OWORD *)(a4 + 16) = xmmword_1928E29A0;
            }
            if (!a3 || a5 != 1)
              goto LABEL_317;
            v13 = 1983013176;
            goto LABEL_316;
          }
          if (a2 == 1983144248)
          {
            if (a4)
            {
              *(_OWORD *)a4 = xmmword_1928E2970;
              *(_OWORD *)(a4 + 16) = xmmword_1928E29A0;
            }
            if (!a3)
              goto LABEL_317;
            v13 = 1983144248;
            goto LABEL_316;
          }
          v10 = 1999843442;
          goto LABEL_159;
        }
        if (a2 == 2016567667)
        {
          if (a4)
          {
            *(_OWORD *)a4 = xmmword_1928E2970;
            *(_OWORD *)(a4 + 16) = xmmword_1928E29A0;
          }
          if (!a3 || a5 != 1)
            goto LABEL_317;
          v13 = 2016567667;
          goto LABEL_316;
        }
        if (a2 == 2016686640)
          goto LABEL_221;
        if (a2 != 2016686642)
          goto LABEL_321;
        if (a4)
        {
          *(_OWORD *)a4 = xmmword_1928E2970;
          *(_QWORD *)(a4 + 16) = 0;
          *(_QWORD *)(a4 + 24) = 0;
        }
        if (!a3 || a5 != 1)
          goto LABEL_317;
        v18 = 2016686640;
LABEL_303:
        v13 = v18 | 2;
        goto LABEL_316;
      }
      if (a2 > 2019963439)
      {
        if (a2 == 2019963440)
        {
LABEL_227:
          if (a4)
          {
            *(_OWORD *)a4 = xmmword_1928E2970;
            *(_QWORD *)(a4 + 16) = 0;
            *(_QWORD *)(a4 + 24) = 0;
          }
          if (!a3 || a5 != 1)
            goto LABEL_317;
          v13 = 2019963440;
          goto LABEL_316;
        }
        if (a2 != 2019963442)
        {
          if (a2 != 2019963956)
            goto LABEL_321;
          goto LABEL_180;
        }
        if (a4)
        {
          *(_OWORD *)a4 = xmmword_1928E2970;
          *(_QWORD *)(a4 + 16) = 0;
          *(_QWORD *)(a4 + 24) = 0;
        }
        if (!a3 || a5 != 1)
          goto LABEL_317;
        v18 = 2019963440;
        goto LABEL_303;
      }
      if (a2 == 2016687156 || a2 == 2016687216)
      {
LABEL_202:
        if (a4)
        {
          *(_OWORD *)a4 = xmmword_1928E2970;
          *(_QWORD *)(a4 + 16) = 0;
          *(_QWORD *)(a4 + 24) = 0;
        }
        if (!a3)
          goto LABEL_317;
        v23 = 2016686640;
        goto LABEL_279;
      }
      if (a2 != 2016698739)
        goto LABEL_321;
      if (a4)
      {
        *(_OWORD *)a4 = xmmword_1928E2970;
        *(_OWORD *)(a4 + 16) = xmmword_1928E29A0;
      }
      if (!a3)
        goto LABEL_309;
      v17 = 2016698739;
LABEL_308:
      *a3 = v17;
      goto LABEL_309;
    }
    if (a2 <= 1932681586)
    {
      if (a2 > 1751528499)
      {
        if (a2 <= 1882468911)
        {
          if (a2 != 1751528500)
          {
            if (a2 != 1815162994)
            {
              v15 = 1815491698;
              goto LABEL_212;
            }
            goto LABEL_160;
          }
          if (a4)
          {
            *(_OWORD *)a4 = xmmword_1928E2970;
            *(_QWORD *)(a4 + 16) = 0;
            *(_QWORD *)(a4 + 24) = 0;
          }
          if (!a3)
            goto LABEL_317;
          v23 = 1751527984;
          goto LABEL_279;
        }
        if (a2 == 1882468912)
          goto LABEL_220;
        if (a2 == 1885745712)
          goto LABEL_226;
        v10 = 1915892016;
        goto LABEL_159;
      }
      if (a2 > 1651521075)
      {
        if (a2 != 1651521076)
        {
          if (a2 == 1751527984)
          {
            if (a4)
            {
              *(_OWORD *)a4 = xmmword_1928E2970;
              *(_QWORD *)(a4 + 16) = 0;
              *(_QWORD *)(a4 + 24) = 0;
            }
            if (!a3 || a5 != 1)
              goto LABEL_317;
            v13 = 1751527984;
            goto LABEL_316;
          }
          if (a2 != 1751527986)
            goto LABEL_321;
          if (a4)
          {
            *(_OWORD *)a4 = xmmword_1928E2970;
            *(_QWORD *)(a4 + 16) = 0;
            *(_QWORD *)(a4 + 24) = 0;
          }
          if (!a3 || a5 != 1)
            goto LABEL_317;
          v18 = 1751527984;
          goto LABEL_303;
        }
      }
      else
      {
        if (a2 == 1380411457)
          goto LABEL_160;
        if (a2 != 1647392369)
        {
          v10 = 1647534392;
          goto LABEL_159;
        }
      }
      if (a4)
      {
        *(_QWORD *)a4 = 115;
        *(_QWORD *)(a4 + 8) = 0;
        *(_QWORD *)(a4 + 16) = 0;
        *(_QWORD *)(a4 + 24) = 0;
      }
      if (!a3)
        goto LABEL_309;
      v17 = 1380411457;
      goto LABEL_308;
    }
    if (a2 > 1937125937)
    {
      if (a2 <= 1949589874)
      {
        if (a2 != 1937125938)
        {
          if (a2 == 1937126452)
          {
            if (a4)
            {
              *(_OWORD *)a4 = xmmword_1928E2980;
              *(_QWORD *)(a4 + 16) = 0;
              *(_QWORD *)(a4 + 24) = 0;
            }
            if (!a3)
              goto LABEL_309;
            v17 = 1937126452;
            goto LABEL_308;
          }
          if (a2 != 1949458803)
            goto LABEL_321;
          if (a4)
          {
            *(_OWORD *)a4 = xmmword_1928E2980;
            *(_OWORD *)(a4 + 16) = xmmword_1928E2990;
          }
          if (!a3 || a5 != 1)
            goto LABEL_309;
          v17 = 1949458803;
          goto LABEL_308;
        }
LABEL_197:
        if (a4)
        {
          *(_OWORD *)a4 = xmmword_1928E2980;
          *(_QWORD *)(a4 + 16) = 0;
          *(_QWORD *)(a4 + 24) = 0;
        }
        if (!a3 || a5 != 1)
          goto LABEL_309;
        v17 = 1937125938;
        goto LABEL_308;
      }
      if (a2 == 1949589875)
      {
        if (a4)
        {
          *(_OWORD *)a4 = xmmword_1928E2980;
          *(_OWORD *)(a4 + 16) = xmmword_1928E2990;
        }
        if (!a3)
          goto LABEL_309;
        v17 = 1949589875;
        goto LABEL_308;
      }
      if (a2 == 1982882104)
      {
        if (a4)
        {
          *(_OWORD *)a4 = xmmword_1928E2970;
          *(_OWORD *)(a4 + 16) = xmmword_1928E29A0;
        }
        if (!a3 || a5 != 1)
          goto LABEL_317;
        v13 = 1982882104;
        goto LABEL_316;
      }
      v20 = 1983000886;
    }
    else
    {
      if (a2 <= 1936077361)
      {
        if (a2 == 1932681587)
        {
          if (a4)
          {
            *(_OWORD *)a4 = xmmword_1928E2980;
            *(_OWORD *)(a4 + 16) = xmmword_1928E2990;
          }
          if (!a3 || a5 != 1)
            goto LABEL_309;
          v17 = 1932681587;
          goto LABEL_308;
        }
        if (a2 == 1932812659)
          goto LABEL_149;
        if (a2 != 1936077360)
          goto LABEL_321;
LABEL_237:
        if (a4)
        {
          *(_OWORD *)a4 = xmmword_1928E2980;
          *(_QWORD *)(a4 + 16) = 0;
          *(_QWORD *)(a4 + 24) = 0;
        }
        if (!a3 || a5 != 1)
          goto LABEL_309;
        v17 = 1936077362;
        goto LABEL_308;
      }
      if (a2 == 1936077362)
        goto LABEL_237;
      if (a2 == 1936077876)
      {
        if (a4)
        {
          *(_OWORD *)a4 = xmmword_1928E2980;
          *(_QWORD *)(a4 + 16) = 0;
          *(_QWORD *)(a4 + 24) = 0;
        }
        if (!a3)
          goto LABEL_309;
        v17 = 1936077876;
        goto LABEL_308;
      }
      v20 = 1937125936;
    }
    if (a2 != v20)
      goto LABEL_321;
    goto LABEL_197;
  }
  if (a2 <= 758674991)
  {
    if (a2 <= 642527287)
    {
      if (a2 <= 641230385)
      {
        if (a2 <= 590902831)
        {
          if (a2 == 32)
            goto LABEL_160;
          if (a2 == 40)
            goto LABEL_102;
          v11 = 590898736;
          goto LABEL_187;
        }
        if (a2 == 590902832)
          goto LABEL_124;
        if (a2 != 640955504)
        {
          v11 = 641230384;
          goto LABEL_187;
        }
        goto LABEL_202;
      }
      if (a2 <= 641234481)
      {
        if (a2 == 641230386)
          goto LABEL_167;
        if (a2 == 641230388)
          goto LABEL_242;
        v14 = 641234480;
LABEL_123:
        if (a2 != v14)
          goto LABEL_321;
        goto LABEL_124;
      }
      if (a2 == 641234482)
        goto LABEL_172;
      if (a2 == 641234484)
        goto LABEL_250;
      v10 = 641877825;
LABEL_159:
      if (a2 != v10)
        goto LABEL_321;
      goto LABEL_160;
    }
    if (a2 <= 644232303)
    {
      if (a2 <= 642527541)
      {
        if (a2 != 642527288 && a2 != 642527336)
        {
          v12 = 642527536;
          goto LABEL_101;
        }
        goto LABEL_102;
      }
      if (a2 == 642527542)
        goto LABEL_206;
      if (a2 != 642934849)
      {
        v10 = 643969848;
        goto LABEL_159;
      }
      goto LABEL_160;
    }
    if (a2 > 645424687)
    {
      if (a2 == 645424688)
        goto LABEL_226;
      if (a2 == 645428784)
        goto LABEL_220;
      v11 = 758670896;
      goto LABEL_187;
    }
    if (a2 != 644232304)
    {
      if (a2 != 644624754)
      {
        v10 = 645346162;
        goto LABEL_159;
      }
      goto LABEL_160;
    }
LABEL_180:
    if (a4)
    {
      *(_OWORD *)a4 = xmmword_1928E2970;
      *(_QWORD *)(a4 + 16) = 0;
      *(_QWORD *)(a4 + 24) = 0;
    }
    if (!a3)
      goto LABEL_317;
    v23 = 2019963440;
LABEL_279:
    v13 = v23 + 516;
    goto LABEL_316;
  }
  if (a2 <= 875704437)
  {
    if (a2 <= 792872768)
    {
      if (a2 <= 762869295)
      {
        if (a2 != 758674992)
        {
          if (a2 != 759318337)
          {
            if (a2 != 762865200)
              goto LABEL_321;
LABEL_226:
            getKernelTypeCapabilities_source(a1, a2, (char *)&v26 + 1, (char *)&v26);
            if ((_BYTE)v26)
              goto LABEL_227;
            return 4294954391;
          }
LABEL_160:
          if (a4)
          {
            *(_QWORD *)a4 = 115;
            *(_QWORD *)(a4 + 8) = 0;
            *(_QWORD *)(a4 + 16) = 0;
            *(_QWORD *)(a4 + 24) = 0;
          }
          if (!a3)
            goto LABEL_317;
          v13 = 1380411457;
          goto LABEL_316;
        }
LABEL_124:
        if (a4)
        {
          *(_OWORD *)a4 = xmmword_1928E2970;
          *(_QWORD *)(a4 + 16) = 0;
          *(_QWORD *)(a4 + 24) = 0;
        }
        if (!a3 || a5 != 1)
          goto LABEL_317;
        v19 = 875704422;
        goto LABEL_254;
      }
      if (a2 != 762869296)
      {
        if (a2 != 792225328)
        {
          v14 = 792229424;
          goto LABEL_123;
        }
LABEL_188:
        if (a4)
        {
          *(_OWORD *)a4 = xmmword_1928E2970;
          *(_QWORD *)(a4 + 16) = 0;
          *(_QWORD *)(a4 + 24) = 0;
        }
        if (!a3 || a5 != 1)
          goto LABEL_317;
        v13 = 875704422;
        goto LABEL_316;
      }
      goto LABEL_220;
    }
    if (a2 <= 846624101)
    {
      if (a2 == 792872769)
        goto LABEL_160;
      if (a2 == 796419632)
        goto LABEL_226;
      v16 = 796423728;
LABEL_219:
      if (a2 != v16)
        goto LABEL_321;
LABEL_220:
      getKernelTypeCapabilities_source(a1, a2, (char *)&v26 + 1, (char *)&v26);
      if (!(_BYTE)v26)
        return 4294954391;
LABEL_221:
      if (a4)
      {
        *(_OWORD *)a4 = xmmword_1928E2970;
        *(_QWORD *)(a4 + 16) = 0;
        *(_QWORD *)(a4 + 24) = 0;
      }
      if (!a3 || a5 != 1)
        goto LABEL_317;
      v13 = 2016686640;
      goto LABEL_316;
    }
    if (a2 == 846624102)
      goto LABEL_167;
    if (a2 == 846624121)
      goto LABEL_172;
    v11 = 875704422;
    goto LABEL_187;
  }
  if (a2 > 1278226487)
  {
    if (a2 > 1278226735)
    {
      if (a2 <= 1378955370)
      {
        if (a2 != 1278226736)
        {
          if (a2 != 1278226742)
            goto LABEL_321;
          goto LABEL_206;
        }
        goto LABEL_102;
      }
      if (a2 != 1378955371)
      {
        v15 = 1380410945;
LABEL_212:
        if (a2 != v15)
          goto LABEL_321;
        if (a4)
        {
          *(_QWORD *)a4 = 125;
          *(_QWORD *)(a4 + 8) = 0;
          *(_QWORD *)(a4 + 16) = 0;
          *(_QWORD *)(a4 + 24) = 0;
        }
        if (a3)
        {
          v17 = 1380410945;
          goto LABEL_308;
        }
LABEL_309:
        result = 0;
        if (!a6)
          return result;
        v25 = 2;
        goto LABEL_319;
      }
      goto LABEL_160;
    }
    if (a2 != 1278226488)
    {
      if (a2 != 1278226534)
      {
        v12 = 1278226536;
LABEL_101:
        if (a2 != v12)
          goto LABEL_321;
        goto LABEL_102;
      }
LABEL_206:
      if (a4)
      {
        *(_QWORD *)a4 = 55;
        *(_QWORD *)(a4 + 8) = 0;
        *(_QWORD *)(a4 + 16) = 0;
        *(_QWORD *)(a4 + 24) = 0;
      }
      if (!a3)
        goto LABEL_309;
      v17 = 1278226534;
      goto LABEL_308;
    }
LABEL_102:
    if (a4)
    {
      *(_QWORD *)a4 = 25;
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      *(_QWORD *)(a4 + 24) = 0;
    }
    if (!a3)
      goto LABEL_317;
    v13 = 1278226536;
    goto LABEL_316;
  }
  if (a2 > 875836517)
  {
    if (a2 != 875836518)
    {
      if (a2 != 875836534)
      {
        v10 = 1111970369;
        goto LABEL_159;
      }
LABEL_250:
      if (a4)
      {
        *(_OWORD *)a4 = xmmword_1928E2970;
        *(_QWORD *)(a4 + 16) = 0;
        *(_QWORD *)(a4 + 24) = 0;
      }
      if (!a3)
        goto LABEL_317;
      v19 = 875836518;
LABEL_254:
      v13 = v19 | 0x10;
      goto LABEL_316;
    }
LABEL_242:
    if (a4)
    {
      *(_OWORD *)a4 = xmmword_1928E2970;
      *(_QWORD *)(a4 + 16) = 0;
      *(_QWORD *)(a4 + 24) = 0;
    }
    if (!a3)
      goto LABEL_317;
    v13 = 875836518;
    goto LABEL_316;
  }
  switch(a2)
  {
    case 875704438:
      goto LABEL_124;
    case 875704934:
LABEL_167:
      if (a4)
      {
        *(_OWORD *)a4 = xmmword_1928E2970;
        *(_QWORD *)(a4 + 16) = 0;
        *(_QWORD *)(a4 + 24) = 0;
      }
      if (!a3 || a5 != 1)
        goto LABEL_317;
      v13 = 875704934;
      goto LABEL_316;
    case 875704950:
LABEL_172:
      if (a4)
      {
        *(_OWORD *)a4 = xmmword_1928E2970;
        *(_QWORD *)(a4 + 16) = 0;
        *(_QWORD *)(a4 + 24) = 0;
      }
      if (!a3 || a5 != 1)
        goto LABEL_317;
      v21 = 528;
      v22 = 875704422;
      goto LABEL_274;
  }
LABEL_321:
  if (a4)
  {
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  if (a3)
    *a3 = 0;
  result = 4294954391;
  if (a6)
  {
    v25 = 0;
LABEL_319:
    *a6 = v25;
  }
  return result;
}

BOOL VTMetalTransferSessionCanAcceptSource1xWithSession(uint64_t a1, int a2)
{
  void *v4;
  uint64_t DerivedStorage;
  _BOOL8 v6;
  __int16 v8;

  v4 = (void *)MEMORY[0x194028B74]();
  v8 = 0;
  if (a1)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    getKernelTypeCapabilities_source((unsigned __int8 *)(DerivedStorage + 1633), a2, (char *)&v8 + 1, (char *)&v8);
    v6 = (v8 | HIBYTE(v8)) != 0;
  }
  else
  {
    v6 = 0;
  }
  objc_autoreleasePoolPop(v4);
  return v6;
}

unsigned __int8 *getKernelTypeCapabilities_source(unsigned __int8 *result, int a2, char *a3, char *a4)
{
  int v4;
  int v5;
  int v6;
  int v7;
  unsigned __int16 v8;
  unsigned __int16 v9;
  unsigned __int16 v10;
  int v11;
  int v12;
  unsigned __int16 v13;
  int v14;
  unsigned __int16 v15;
  int v16;
  unsigned __int16 v17;
  char v18;
  int v19;
  unsigned __int16 v20;
  unsigned __int16 v21;
  unsigned __int16 v22;
  unsigned __int16 v23;
  unsigned __int16 v24;
  unsigned int v25;
  int v26;
  int v27;
  char v28;

  if (a2 > 1647534391)
  {
    if (a2 > 1953903151)
    {
      if (a2 > 2019964015)
      {
        if (a2 > 2037741170)
        {
          if (a2 > 2088265263)
          {
            if (a2 > 2088269359)
            {
              if (a2 == 2088269360)
                goto LABEL_203;
              v24 = 30258;
            }
            else
            {
              if (a2 == 2088265264)
                goto LABEL_203;
              v24 = 26162;
            }
            v19 = v24 | 0x7C780000;
            goto LABEL_229;
          }
          if (a2 > 2084075055)
          {
            if (a2 == 2084075056)
              goto LABEL_183;
            v12 = 2084718401;
LABEL_172:
            if (a2 != v12)
              return result;
            goto LABEL_196;
          }
          if (a2 != 2037741171)
          {
            v4 = 2084070960;
            goto LABEL_182;
          }
        }
        else
        {
          if (a2 <= 2021078127)
          {
            if (a2 > 2021077553)
            {
              if (a2 == 2021077554)
                goto LABEL_219;
              v9 = 13364;
            }
            else
            {
              if (a2 == 2019964016)
                goto LABEL_177;
              v9 = 12848;
            }
            v5 = v9 | 0x78770000;
            goto LABEL_218;
          }
          if (a2 <= 2033463605)
          {
            if (a2 != 2021078128)
            {
              if (a2 != 2033463352)
                return result;
              v18 = result[27];
              goto LABEL_231;
            }
            goto LABEL_177;
          }
          if (a2 == 2033463606)
          {
LABEL_225:
            v18 = result[33];
            goto LABEL_231;
          }
          if (a2 != 2037741158)
            return result;
        }
        v18 = result[42];
        goto LABEL_231;
      }
      if (a2 <= 2016686639)
      {
        if (a2 > 1983013175)
        {
          if (a2 <= 1999843441)
          {
            if (a2 == 1983013176)
              goto LABEL_183;
            v4 = 1983144248;
            goto LABEL_182;
          }
          if (a2 == 1999843442)
            goto LABEL_177;
          v5 = 2016567667;
          goto LABEL_218;
        }
        if (a2 > 1953903667)
        {
          if (a2 != 1953903668)
          {
            v26 = 1983000886;
            goto LABEL_224;
          }
        }
        else if (a2 != 1953903152)
        {
          v5 = 1953903154;
          goto LABEL_218;
        }
LABEL_219:
        v18 = result[8];
        if (!v18)
          goto LABEL_231;
        v27 = result[11];
        goto LABEL_221;
      }
      if (a2 > 2016698738)
      {
        if (a2 > 2019963441)
        {
          if (a2 == 2019963442)
            goto LABEL_219;
          v21 = 13364;
        }
        else
        {
          if (a2 == 2016698739)
            goto LABEL_219;
          v21 = 12848;
        }
        v5 = v21 | 0x78660000;
        goto LABEL_218;
      }
      if (a2 <= 2016687155)
      {
        if (a2 == 2016686640)
          goto LABEL_219;
        v5 = 2016686642;
LABEL_218:
        if (a2 != v5)
          return result;
        goto LABEL_219;
      }
      if (a2 == 2016687156)
        goto LABEL_219;
      v16 = 2016687216;
LABEL_176:
      if (a2 != v16)
        return result;
      goto LABEL_177;
    }
    if (a2 <= 1886859825)
    {
      if (a2 > 1815491697)
      {
        if (a2 <= 1885745711)
        {
          if (a2 <= 1882468913)
          {
            if (a2 != 1815491698)
            {
              v11 = 1882468912;
              goto LABEL_202;
            }
            goto LABEL_225;
          }
          if (a2 == 1882468914)
            goto LABEL_230;
          v7 = 1882469428;
          goto LABEL_213;
        }
        if (a2 <= 1885746227)
        {
          if (a2 != 1885745712)
          {
            v19 = 1885745714;
            goto LABEL_229;
          }
          goto LABEL_203;
        }
        if (a2 != 1885746228)
        {
          v11 = 1886859824;
LABEL_202:
          if (a2 != v11)
            return result;
          goto LABEL_203;
        }
        goto LABEL_214;
      }
      if (a2 > 1751527983)
      {
        if (a2 > 1751528499)
        {
          if (a2 != 1751528500)
          {
            v16 = 1815162994;
            goto LABEL_176;
          }
        }
        else if (a2 != 1751527984 && a2 != 1751527986)
        {
          return result;
        }
        v18 = result[14];
        if (!v18)
          goto LABEL_231;
        v27 = result[17];
        goto LABEL_221;
      }
      if (a2 == 1647534392)
      {
LABEL_144:
        v18 = result[30];
        if (!v18)
          goto LABEL_231;
        v27 = result[2];
LABEL_221:
        v18 = v27 != 0;
        goto LABEL_231;
      }
      if (a2 != 1647719521)
      {
        v26 = 1651521076;
        goto LABEL_224;
      }
    }
    else
    {
      if (a2 > 1937125935)
      {
        if (a2 > 1949589874)
        {
          if (a2 > 1952854577)
          {
            if (a2 == 1952854578)
              goto LABEL_219;
            v23 = 13364;
          }
          else
          {
            if (a2 == 1949589875)
              goto LABEL_219;
            v23 = 12848;
          }
          v5 = v23 | 0x74660000;
        }
        else if (a2 > 1937126451)
        {
          if (a2 == 1937126452)
            goto LABEL_219;
          v5 = 1949458803;
        }
        else
        {
          if (a2 == 1937125936)
            goto LABEL_219;
          v5 = 1937125938;
        }
        goto LABEL_218;
      }
      if (a2 > 1932812658)
      {
        if (a2 > 1936077361)
        {
          if (a2 == 1936077362)
            goto LABEL_219;
          v17 = 13364;
        }
        else
        {
          if (a2 == 1932812659)
            goto LABEL_219;
          v17 = 12848;
        }
        v5 = v17 | 0x73660000;
        goto LABEL_218;
      }
      if (a2 <= 1915892015)
      {
        if (a2 == 1886859826)
          goto LABEL_230;
        v7 = 1886860340;
        goto LABEL_213;
      }
      if (a2 != 1915892016)
      {
        v5 = 1932681587;
        goto LABEL_218;
      }
    }
LABEL_148:
    v18 = 0;
    goto LABEL_239;
  }
  if (a2 <= 758670895)
  {
    if (a2 <= 642527535)
    {
      if (a2 > 641230383)
      {
        if (a2 <= 641234479)
        {
          v10 = -26160;
        }
        else
        {
          if (a2 > 641877824)
          {
            if (a2 == 641877825)
              goto LABEL_196;
            if (a2 == 642527288)
              goto LABEL_195;
            v14 = 642527336;
LABEL_129:
            if (a2 != v14)
              return result;
            v18 = result[14];
LABEL_231:
            v28 = v18;
            if (!a3)
              goto LABEL_233;
            goto LABEL_232;
          }
          v10 = -30256;
        }
        v25 = a2 + (v10 | 0xD9C70000);
        if (v25 <= 4 && ((1 << v25) & 0x15) != 0)
          goto LABEL_183;
        return result;
      }
      if (a2 <= 590898735)
      {
        if (a2)
        {
          if (a2 == 32)
            goto LABEL_196;
          if (a2 != 40)
            return result;
          goto LABEL_195;
        }
        v18 = 1;
LABEL_239:
        v28 = 1;
        if (!a3)
        {
LABEL_233:
          if (a4)
            *a4 = v28;
          return result;
        }
LABEL_232:
        *a3 = v18;
        goto LABEL_233;
      }
      if (a2 == 590898736 || a2 == 590902832)
        goto LABEL_183;
      v16 = 640955504;
      goto LABEL_176;
    }
    if (a2 <= 645424689)
    {
      if (a2 <= 644232303)
      {
        if (a2 <= 642934848)
        {
          if (a2 != 642527536)
          {
            v6 = 642527542;
            goto LABEL_168;
          }
LABEL_169:
          v18 = result[8];
          goto LABEL_231;
        }
        if (a2 == 642934849)
          goto LABEL_236;
        if (a2 != 643969848)
          return result;
        goto LABEL_144;
      }
      if (a2 <= 645346161)
      {
        if (a2 != 644232304)
        {
          v16 = 644624754;
          goto LABEL_176;
        }
LABEL_177:
        v18 = result[30];
        goto LABEL_231;
      }
      if (a2 == 645346162)
        goto LABEL_177;
      v22 = 26160;
      goto LABEL_189;
    }
    if (a2 <= 645428787)
    {
      if (a2 <= 645428783)
      {
        if (a2 == 645424690)
          goto LABEL_230;
        v13 = 26164;
        goto LABEL_212;
      }
      if (a2 == 645428784)
        goto LABEL_203;
      v19 = 645428786;
LABEL_229:
      if (a2 != v19)
        return result;
      goto LABEL_230;
    }
    if (a2 > 645429041)
    {
      if (a2 == 645429042)
        goto LABEL_230;
      v13 = 30516;
LABEL_212:
      v7 = v13 | 0x26780000;
LABEL_213:
      if (a2 != v7)
        return result;
      goto LABEL_214;
    }
    if (a2 != 645428788)
    {
      v22 = 30512;
LABEL_189:
      v11 = v22 | 0x26780000;
      goto LABEL_202;
    }
LABEL_214:
    v18 = result[57];
    goto LABEL_231;
  }
  if (a2 > 875704421)
  {
    if (a2 <= 1278226533)
    {
      if (a2 <= 875836517)
      {
        if (a2 > 875704933)
        {
          if (a2 == 875704934)
            goto LABEL_183;
          v8 = 12918;
        }
        else
        {
          if (a2 == 875704422)
            goto LABEL_183;
          v8 = 12406;
        }
        v4 = v8 | 0x34320000;
LABEL_182:
        if (a2 != v4)
          return result;
        goto LABEL_183;
      }
      if (a2 <= 1111970368)
      {
        if (a2 == 875836518)
          goto LABEL_183;
        v4 = 875836534;
        goto LABEL_182;
      }
      if (a2 == 1111970369)
        goto LABEL_196;
      if (a2 != 1278226488)
        return result;
LABEL_195:
      v18 = result[2];
      goto LABEL_231;
    }
    if (a2 <= 1378955370)
    {
      if (a2 <= 1278226735)
      {
        if (a2 == 1278226534)
        {
          v18 = result[20];
          goto LABEL_231;
        }
        v14 = 1278226536;
        goto LABEL_129;
      }
      if (a2 != 1278226736)
      {
        v6 = 1278226742;
LABEL_168:
        if (a2 != v6)
          return result;
        goto LABEL_169;
      }
      goto LABEL_169;
    }
    if (a2 <= 1380411456)
    {
      if (a2 != 1378955371)
      {
        if (a2 != 1380410945)
          return result;
        v18 = result[39];
        goto LABEL_231;
      }
      goto LABEL_148;
    }
    if (a2 != 1380411457)
    {
      v26 = 1647392369;
LABEL_224:
      if (a2 != v26)
        return result;
      goto LABEL_225;
    }
LABEL_236:
    v18 = result[36];
    goto LABEL_231;
  }
  if (a2 <= 792229423)
  {
    if (a2 <= 762865201)
    {
      if (a2 <= 759318336)
      {
        if (a2 != 758670896)
        {
          v4 = 758674992;
          goto LABEL_182;
        }
LABEL_183:
        v18 = result[2];
        if (!v18)
          goto LABEL_231;
        v27 = result[5];
        goto LABEL_221;
      }
      if (a2 != 759318337)
      {
        v15 = 26160;
        goto LABEL_139;
      }
LABEL_196:
      v18 = result[24];
      goto LABEL_231;
    }
    if (a2 <= 762869297)
    {
      if (a2 != 762865202)
      {
        v15 = 30256;
LABEL_139:
        v11 = v15 | 0x2D780000;
        goto LABEL_202;
      }
      goto LABEL_230;
    }
    if (a2 != 762869298)
    {
      v4 = 792225328;
      goto LABEL_182;
    }
LABEL_230:
    v18 = result[54];
    goto LABEL_231;
  }
  if (a2 <= 796423727)
  {
    if (a2 <= 796419631)
    {
      if (a2 == 792229424)
        goto LABEL_183;
      v12 = 792872769;
      goto LABEL_172;
    }
    if (a2 != 796419632)
    {
      v20 = 26162;
      goto LABEL_159;
    }
    goto LABEL_203;
  }
  if (a2 <= 846624101)
  {
    if (a2 != 796423728)
    {
      v20 = 30258;
LABEL_159:
      v19 = v20 | 0x2F780000;
      goto LABEL_229;
    }
LABEL_203:
    v18 = result[51];
    goto LABEL_231;
  }
  if (a2 == 846624102 || a2 == 846624121)
  {
    v18 = result[45];
    goto LABEL_231;
  }
  return result;
}

BOOL VTMetalTransferSessionCanTransferWithSession(uint64_t a1, int a2, int a3, int a4, const __CFDictionary *a5)
{
  void *v10;
  uint64_t DerivedStorage;
  uint64_t v12;
  int v13;
  _BOOL8 v14;
  __int16 v16;

  v10 = (void *)MEMORY[0x194028B74]();
  v16 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v12 = DerivedStorage;
  if (!a1)
  {
    MEMORY[0x1940281CC](&sReadDebugOverrideAllDefaultsOnce_0, ReadDebugOverrideAllDefaults_0);
    v13 = 0;
    if (!a5)
      goto LABEL_4;
    goto LABEL_3;
  }
  v13 = *(unsigned __int8 *)(DerivedStorage + 1353);
  if (a5)
LABEL_3:
    VTPixelTransferChainNodeSessionSetProperties(a1, a5);
LABEL_4:
  getKernelTypeCapabilities((unsigned __int8 *)(v12 + 1633), a2, a3, (char *)&v16 + 1, (char *)&v16);
  v14 = (a4 || v13 || VTMetalTransferSessionCanDoHighQualityScaling(a1, a2))
     && (v16 | HIBYTE(v16)) != 0;
  objc_autoreleasePoolPop(v10);
  return v14;
}

_BYTE *getKernelTypeCapabilities(unsigned __int8 *a1, int a2, int a3, char *a4, char *a5)
{
  _BYTE *result;
  BOOL v10;
  char v11;
  BOOL v12;
  char v13;
  __int16 v14;
  __int16 v15;

  v15 = 0;
  v14 = 0;
  getKernelTypeCapabilities_source(a1, a2, (char *)&v15 + 1, (char *)&v14 + 1);
  result = getKernelTypeCapabilities_destination(a1, a3, &v15, (char *)&v14);
  if (a4)
  {
    if (HIBYTE(v15))
      v10 = v15 == 0;
    else
      v10 = 1;
    v11 = !v10;
    *a4 = v11;
  }
  if (a5)
  {
    if (HIBYTE(v14))
      v12 = v14 == 0;
    else
      v12 = 1;
    v13 = !v12;
    *a5 = v13;
  }
  return result;
}

BOOL VTMetalTransferSessionCanTransfer(int a1, int a2, char a3)
{
  void *v6;
  void *v7;
  _BOOL8 v8;
  __int16 v10;
  void *v11;
  char v12;
  _OWORD v13[4];

  v6 = (void *)MEMORY[0x194028B74]();
  memset(v13, 0, 60);
  v12 = 0;
  v11 = 0;
  vtmtsCreateDefaultDevice(&v11, &v12);
  v7 = v11;
  vtmtsCacheSupportedPixelformats(v11, (BOOL *)v13);
  if ((a3 & 1) != 0)
  {
    v10 = 0;
    getKernelTypeCapabilities_destination(v13, a2, (_BYTE *)&v10 + 1, (char *)&v10);
    if (HIBYTE(v10) | v10)
    {
      MEMORY[0x1940281CC](&sReadDebugOverrideAllDefaultsOnce_0, ReadDebugOverrideAllDefaults_0);
      if (byte_1ECED9243)
        vtmtsGetIntermediateScalingFormat((unsigned __int8 *)v13, a1, 0, 0, 0, 0);
    }
    v8 = 0;
  }
  else
  {
    v10 = 0;
    getKernelTypeCapabilities((unsigned __int8 *)v13, a1, a2, (char *)&v10 + 1, (char *)&v10);
    v8 = (HIBYTE(v10) | v10) != 0;
  }

  objc_autoreleasePoolPop(v6);
  return v8;
}

_BYTE *getKernelTypeCapabilities_destination(_BYTE *result, int a2, _BYTE *a3, char *a4)
{
  char v4;
  char v5;
  int v6;
  unsigned __int16 v7;
  unsigned __int16 v8;
  int v9;
  int v10;
  int v11;
  unsigned __int16 v12;
  int v13;
  int v14;
  unsigned __int16 v15;
  int v16;
  unsigned __int16 v17;
  int v18;
  int v19;
  unsigned __int16 v20;
  unsigned __int16 v21;
  unsigned __int16 v22;
  unsigned __int16 v23;
  int v24;
  int v25;
  int v26;
  int v27;

  v4 = 0;
  v5 = 1;
  if (a2 <= 1647534391)
  {
    if (a2 <= 758670895)
    {
      if (a2 > 642527541)
      {
        if (a2 <= 645424689)
        {
          if (a2 <= 644624753)
          {
            if (a2 <= 643969847)
            {
              if (a2 != 642527542)
              {
                if (a2 != 642934849)
                  return result;
                v5 = 0;
                v4 = result[37];
                goto LABEL_260;
              }
LABEL_215:
              v5 = 0;
              v4 = result[9];
              goto LABEL_260;
            }
            if (a2 != 643969848)
            {
              v13 = 644232304;
LABEL_141:
              if (a2 != v13)
                return result;
              goto LABEL_199;
            }
            v4 = result[3];
            if (v4)
              v4 = result[31] != 0;
LABEL_219:
            v5 = 0;
            goto LABEL_260;
          }
          if (a2 <= 645346161)
          {
            if (a2 != 644624754)
            {
              v9 = 645279800;
              goto LABEL_125;
            }
LABEL_199:
            v5 = 0;
            v4 = result[31];
            goto LABEL_260;
          }
          if (a2 == 645346162)
            goto LABEL_199;
          v12 = 26160;
          goto LABEL_229;
        }
        if (a2 > 645428787)
        {
          if (a2 > 645429041)
          {
            if (a2 != 645429042)
            {
              v12 = 30516;
              goto LABEL_229;
            }
            goto LABEL_247;
          }
          if (a2 != 645428788)
          {
            v12 = 30512;
            goto LABEL_229;
          }
        }
        else
        {
          if (a2 <= 645428783)
          {
            if (a2 != 645424690)
            {
              v12 = 26164;
LABEL_229:
              v10 = v12 | 0x26780000;
LABEL_230:
              if (a2 != v10)
                return result;
              goto LABEL_231;
            }
LABEL_247:
            v5 = 0;
            v4 = result[55];
            goto LABEL_260;
          }
          if (a2 != 645428784)
          {
            v26 = 645428786;
            goto LABEL_246;
          }
        }
LABEL_231:
        v5 = 0;
        v4 = result[52];
        goto LABEL_260;
      }
      if (a2 > 641230387)
      {
        if (a2 <= 641877824)
        {
          if (a2 <= 641234481)
          {
            if (a2 != 641230388)
            {
              v9 = 641234480;
              goto LABEL_125;
            }
LABEL_156:
            v5 = 0;
            v4 = result[50];
            goto LABEL_260;
          }
          if (a2 != 641234482)
          {
            if (a2 != 641234484)
              return result;
            goto LABEL_156;
          }
LABEL_180:
          v5 = 0;
          v4 = result[49];
          goto LABEL_260;
        }
        if (a2 > 642527335)
        {
          if (a2 == 642527336)
          {
            v5 = 0;
            v4 = result[15];
            goto LABEL_260;
          }
          if (a2 != 642527536)
            return result;
          goto LABEL_215;
        }
        if (a2 != 641877825)
        {
          if (a2 != 642527288)
            return result;
          v5 = 0;
          v4 = result[3];
          goto LABEL_260;
        }
LABEL_177:
        v5 = 0;
        v4 = result[25];
        goto LABEL_260;
      }
      if (a2 > 590902831)
      {
        if (a2 <= 641230383)
        {
          if (a2 != 590902832)
          {
            v13 = 640955504;
            goto LABEL_141;
          }
          goto LABEL_126;
        }
        if (a2 != 641230384)
        {
          if (a2 != 641230386)
            return result;
          goto LABEL_180;
        }
LABEL_126:
        v5 = 0;
        v4 = result[48];
        goto LABEL_260;
      }
      if (a2 != 32)
      {
        if (a2 != 40)
        {
          v9 = 590898736;
LABEL_125:
          if (a2 != v9)
            return result;
          goto LABEL_126;
        }
LABEL_248:
        v4 = result[3];
        v5 = result[4];
        goto LABEL_260;
      }
LABEL_204:
      v4 = result[25];
      v5 = result[26];
      goto LABEL_260;
    }
    if (a2 > 846624120)
    {
      if (a2 > 1278226487)
      {
        if (a2 > 1278226741)
        {
          if (a2 > 1380410944)
          {
            if (a2 == 1380410945)
            {
              v4 = result[40];
              v5 = result[41];
            }
            else
            {
              if (a2 != 1380411457)
                return result;
              v4 = result[37];
              v5 = result[38];
            }
            goto LABEL_260;
          }
          if (a2 != 1278226742)
          {
            if (a2 != 1378955371)
              return result;
            goto LABEL_260;
          }
        }
        else
        {
          if (a2 <= 1278226535)
          {
            if (a2 != 1278226488)
            {
              if (a2 != 1278226534)
                return result;
              v4 = result[21];
              v5 = result[22];
              goto LABEL_260;
            }
            goto LABEL_248;
          }
          if (a2 == 1278226536)
          {
            v4 = result[15];
            v5 = result[16];
            goto LABEL_260;
          }
          if (a2 != 1278226736)
            return result;
        }
        v4 = result[9];
        v5 = result[10];
        goto LABEL_260;
      }
      if (a2 <= 875704949)
      {
        if (a2 > 875704437)
        {
          if (a2 == 875704438)
            goto LABEL_149;
          v7 = 12902;
LABEL_148:
          if (a2 != (v7 | 0x34320000))
            return result;
LABEL_149:
          if (result[4])
          {
            v24 = result[7];
            goto LABEL_193;
          }
          goto LABEL_194;
        }
        if (a2 != 846624121)
        {
          v7 = 12390;
          goto LABEL_148;
        }
        goto LABEL_222;
      }
      if (a2 > 875836533)
      {
        if (a2 != 875836534)
        {
          if (a2 != 1111970369)
            return result;
          goto LABEL_204;
        }
        goto LABEL_205;
      }
      if (a2 == 875704950)
        goto LABEL_149;
      v16 = 875836518;
LABEL_91:
      if (a2 != v16)
        return result;
LABEL_205:
      v4 = result[3];
      if (v4)
        v4 = result[6] != 0;
      v5 = result[4];
      if (!v5)
        goto LABEL_260;
      v27 = result[7];
      goto LABEL_239;
    }
    if (a2 > 792225327)
    {
      if (a2 > 796419633)
      {
        if (a2 > 796423729)
        {
          if (a2 == 796423730)
            goto LABEL_247;
          if (a2 != 846624102)
            return result;
LABEL_222:
          v4 = result[46];
          goto LABEL_223;
        }
        if (a2 == 796419634)
          goto LABEL_247;
        v20 = 30256;
      }
      else
      {
        if (a2 <= 792872768)
        {
          if (a2 != 792225328)
          {
            v9 = 792229424;
            goto LABEL_125;
          }
          goto LABEL_126;
        }
        if (a2 == 792872769)
          goto LABEL_177;
        v20 = 26160;
      }
      v10 = v20 | 0x2F780000;
      goto LABEL_230;
    }
    if (a2 > 762865199)
    {
      if (a2 > 762869295)
      {
        if (a2 == 762869296)
          goto LABEL_231;
        v15 = 30258;
      }
      else
      {
        if (a2 == 762865200)
          goto LABEL_231;
        v15 = 26162;
      }
      v26 = v15 | 0x2D780000;
LABEL_246:
      if (a2 != v26)
        return result;
      goto LABEL_247;
    }
    if (a2 == 758670896 || a2 == 758674992)
      goto LABEL_126;
    v25 = 759318337;
LABEL_176:
    if (a2 != v25)
      return result;
    goto LABEL_177;
  }
  if (a2 > 1953903667)
  {
    if (a2 > 2019964015)
    {
      if (a2 > 2037741170)
      {
        if (a2 > 2088265263)
        {
          if (a2 > 2088269359)
          {
            if (a2 == 2088269360)
              goto LABEL_231;
            v23 = 30258;
          }
          else
          {
            if (a2 == 2088265264)
              goto LABEL_231;
            v23 = 26162;
          }
          v26 = v23 | 0x7C780000;
          goto LABEL_246;
        }
        if (a2 > 2084075055)
        {
          if (a2 == 2084075056)
            goto LABEL_126;
          v25 = 2084718401;
          goto LABEL_176;
        }
        if (a2 != 2037741171)
        {
          v9 = 2084070960;
          goto LABEL_125;
        }
      }
      else
      {
        if (a2 <= 2021078127)
        {
          if (a2 > 2021077553)
          {
            if (a2 == 2021077554)
              goto LABEL_235;
            v8 = 13364;
            goto LABEL_153;
          }
          if (a2 != 2019964016)
          {
            v8 = 12848;
LABEL_153:
            v11 = v8 | 0x78770000;
            goto LABEL_234;
          }
LABEL_196:
          v4 = result[31];
          v5 = result[32];
          goto LABEL_260;
        }
        if (a2 > 2033463605)
        {
          if (a2 == 2033463606)
          {
LABEL_249:
            v4 = result[34];
            goto LABEL_250;
          }
          v18 = 2037741158;
        }
        else
        {
          if (a2 == 2021078128)
            goto LABEL_196;
          v18 = 2033463352;
        }
        if (a2 != v18)
          return result;
      }
      v4 = result[28];
LABEL_223:
      v5 = result[29];
      goto LABEL_260;
    }
    if (a2 > 2016686639)
    {
      if (a2 > 2016698738)
      {
        if (a2 > 2019963441)
        {
          if (a2 == 2019963442)
            goto LABEL_235;
          v21 = 13364;
        }
        else
        {
          if (a2 == 2016698739)
            goto LABEL_191;
          v21 = 12848;
        }
        v11 = v21 | 0x78660000;
        goto LABEL_234;
      }
      if (a2 <= 2016687155)
      {
        if (a2 != 2016686640)
        {
          v11 = 2016686642;
          goto LABEL_234;
        }
        goto LABEL_235;
      }
      if (a2 == 2016687156)
        goto LABEL_235;
      v14 = 2016687216;
      goto LABEL_164;
    }
    if (a2 <= 1983013175)
    {
      if (a2 == 1953903668)
        goto LABEL_235;
      if (a2 == 1982882104)
        goto LABEL_149;
      if (a2 != 1983000886)
        return result;
      v4 = 0;
LABEL_250:
      v5 = result[35];
      goto LABEL_260;
    }
    if (a2 <= 1999843441)
    {
      if (a2 == 1983013176)
        goto LABEL_149;
      v16 = 1983144248;
      goto LABEL_91;
    }
    if (a2 != 1999843442)
    {
      v6 = 2016567667;
      goto LABEL_190;
    }
    goto LABEL_196;
  }
  if (a2 <= 1915892015)
  {
    if (a2 > 1882468913)
    {
      if (a2 > 1885746227)
      {
        if (a2 > 1886859825)
        {
          if (a2 != 1886859826)
          {
            v10 = 1886860340;
            goto LABEL_230;
          }
LABEL_218:
          v4 = 0;
          goto LABEL_219;
        }
        if (a2 == 1885746228)
          goto LABEL_231;
        v19 = 1886859824;
      }
      else
      {
        if (a2 <= 1885745711)
        {
          if (a2 != 1882468914)
          {
            v10 = 1882469428;
            goto LABEL_230;
          }
          goto LABEL_218;
        }
        if (a2 == 1885745712)
          goto LABEL_218;
        v19 = 1885745714;
      }
LABEL_183:
      if (a2 != v19)
        return result;
      goto LABEL_218;
    }
    if (a2 <= 1751528499)
    {
      if (a2 == 1647534392)
      {
        v4 = result[3];
        if (v4)
          v4 = result[31] != 0;
        v5 = result[4];
        if (!v5)
          goto LABEL_260;
        v27 = result[32];
LABEL_239:
        v5 = v27 != 0;
        goto LABEL_260;
      }
      if (a2 != 1751527984 && a2 != 1751527986)
        return result;
      goto LABEL_130;
    }
    if (a2 <= 1815491697)
    {
      if (a2 != 1751528500)
      {
        v14 = 1815162994;
LABEL_164:
        if (a2 != v14)
          return result;
        goto LABEL_196;
      }
LABEL_130:
      if (result[16])
      {
        v24 = result[19];
LABEL_193:
        v5 = v24 != 0;
LABEL_195:
        v4 = 0;
        goto LABEL_260;
      }
LABEL_194:
      v5 = 0;
      goto LABEL_195;
    }
    if (a2 != 1815491698)
    {
      v19 = 1882468912;
      goto LABEL_183;
    }
    goto LABEL_249;
  }
  if (a2 > 1937126451)
  {
    if (a2 > 1952854577)
    {
      if (a2 > 1953903151)
      {
        if (a2 == 1953903152)
          goto LABEL_235;
        v11 = 1953903154;
        goto LABEL_234;
      }
      if (a2 == 1952854578)
        goto LABEL_235;
      v22 = 13364;
    }
    else
    {
      if (a2 <= 1949589874)
      {
        if (a2 == 1937126452)
          goto LABEL_235;
        v6 = 1949458803;
LABEL_190:
        if (a2 != v6)
          return result;
LABEL_191:
        if (result[10])
        {
          v24 = result[13];
          goto LABEL_193;
        }
        goto LABEL_194;
      }
      if (a2 == 1949589875)
        goto LABEL_191;
      v22 = 12848;
    }
    v11 = v22 | 0x74660000;
    goto LABEL_234;
  }
  if (a2 > 1936077361)
  {
    if (a2 <= 1937125935)
    {
      if (a2 != 1936077362)
      {
        v17 = 13364;
LABEL_145:
        v11 = v17 | 0x73660000;
        goto LABEL_234;
      }
LABEL_235:
      v4 = result[9];
      if (v4)
        v4 = result[12] != 0;
      v5 = result[10];
      if (!v5)
        goto LABEL_260;
      v27 = result[13];
      goto LABEL_239;
    }
    if (a2 == 1937125936)
      goto LABEL_235;
    v11 = 1937125938;
LABEL_234:
    if (a2 != v11)
      return result;
    goto LABEL_235;
  }
  if (a2 > 1932812658)
  {
    if (a2 == 1932812659)
      goto LABEL_191;
    v17 = 12848;
    goto LABEL_145;
  }
  if (a2 != 1915892016)
  {
    v6 = 1932681587;
    goto LABEL_190;
  }
LABEL_260:
  if (a3)
    *a3 = v4;
  if (a4)
    *a4 = v5;
  return result;
}

uint64_t VTMetalTransferSessionComposeImageWithAffineMatrix(const void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, uint64_t a8, CFTypeRef cf)
{
  void *v14;
  CFTypeID v15;
  CFTypeID v16;
  const __CFAllocator *v17;
  __CFArray *Mutable;
  int v19;
  CFMutableDictionaryRef v20;
  __CFArray *v21;
  uint64_t v22;
  const void *v23;
  CFTypeID v24;
  CFMutableDictionaryRef v25;
  __CFArray *v26;
  CFMutableDictionaryRef v27;
  __CFDictionary *v28;
  __CFArray *v29;
  uint64_t v30;
  const __CFArray *v32;
  void *context;

  v14 = (void *)MEMORY[0x194028B74]();
  if (!a1
    || (v15 = CFGetTypeID(a1), v15 != VTPixelTransferNodeGetTypeID())
    || !a3
    || !cf
    || (v16 = CFGetTypeID(cf), v16 != CVPixelBufferGetTypeID()))
  {
    v30 = FigSignalErrorAt();
    goto LABEL_49;
  }
  v32 = (const __CFArray *)a1;
  context = v14;
  v17 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (a2 >= 1)
  {
    v19 = 0;
    v20 = 0;
    v21 = 0;
    LODWORD(v22) = a2;
    while (1)
    {
      if (v20)
        CFRelease(v20);
      v22 = (v22 - 1);
      v23 = *(const void **)(a3 + 8 * v22);
      if (!v23 || (v24 = CFGetTypeID(v23), v24 != CVPixelBufferGetTypeID()))
      {
        v30 = FigSignalErrorAt();
        v28 = 0;
        v20 = 0;
        goto LABEL_51;
      }
      CFArrayAppendValue(Mutable, *(const void **)(a3 + 8 * v22));
      if (a4)
        break;
      if (a5)
        goto LABEL_17;
      FigCFDictionarySetFloat32();
      v20 = 0;
LABEL_24:
      ++v19;
      if ((int)v22 <= 0)
      {
        if (a8)
          goto LABEL_29;
        v25 = 0;
        v26 = 0;
        v27 = 0;
        v28 = 0;
        v29 = 0;
        if (v21)
          goto LABEL_30;
        goto LABEL_37;
      }
    }
    v20 = CFDictionaryCreateMutable(v17, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    FigCFDictionarySetFloat32();
    FigCFDictionarySetFloat32();
    FigCFDictionarySetFloat32();
    FigCFDictionarySetFloat32();
    if (a5)
    {
      if (!v20)
LABEL_17:
        v20 = CFDictionaryCreateMutable(v17, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      FigCFDictionarySetFloat32();
      FigCFDictionarySetFloat32();
      FigCFDictionarySetFloat32();
      FigCFDictionarySetFloat32();
      FigCFDictionarySetFloat32();
      FigCFDictionarySetFloat32();
    }
    FigCFDictionarySetFloat32();
    if (v20)
    {
      if (!v21)
      {
        v21 = CFArrayCreateMutable(v17, 0, MEMORY[0x1E0C9B378]);
        if (v19)
        {
          v30 = FigSignalErrorAt();
          v28 = 0;
LABEL_51:
          v29 = 0;
          v27 = 0;
          if (Mutable)
            goto LABEL_38;
          goto LABEL_39;
        }
      }
      CFArrayAppendValue(v21, v20);
    }
    goto LABEL_24;
  }
  v20 = 0;
  v21 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  if (a8)
  {
LABEL_29:
    v25 = CFDictionaryCreateMutable(v17, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    FigCFDictionarySetFloat();
    FigCFDictionarySetFloat();
    FigCFDictionarySetFloat();
    FigCFDictionarySetFloat();
    if (v21)
    {
LABEL_30:
      v28 = CFDictionaryCreateMutable(v17, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      CFDictionarySetValue(v28, CFSTR("SourceAmendments"), v21);
      if (!v25)
      {
        v27 = 0;
        v29 = 0;
        v26 = v21;
        goto LABEL_37;
      }
      if (v28)
        goto LABEL_35;
      goto LABEL_34;
    }
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    if (v25)
    {
LABEL_34:
      v28 = CFDictionaryCreateMutable(v17, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
LABEL_35:
      v29 = CFArrayCreateMutable(v17, 0, MEMORY[0x1E0C9B378]);
      CFArrayAppendValue(v29, v25);
      CFDictionarySetValue(v28, CFSTR("DestinationAmendments"), v29);
      v26 = v21;
      v27 = v25;
    }
  }
LABEL_37:
  v30 = VTMetalTransferSessionCompositeImageSync(v32, Mutable, cf, v28);
  v21 = v26;
  if (Mutable)
LABEL_38:
    CFRelease(Mutable);
LABEL_39:
  if (v28)
    CFRelease(v28);
  if (v21)
    CFRelease(v21);
  if (v29)
    CFRelease(v29);
  v14 = context;
  if (v27)
    CFRelease(v27);
  if (v20)
    CFRelease(v20);
LABEL_49:
  objc_autoreleasePoolPop(v14);
  return v30;
}

uint64_t VTMetalTransferSessionFlush(uint64_t a1, CVOptionFlags a2)
{
  void *v4;
  uint64_t v5;

  v4 = (void *)MEMORY[0x194028B74]();
  v5 = VTMetalTransferSessionDoFlush(a1, a2);
  objc_autoreleasePoolPop(v4);
  return v5;
}

uint64_t VTMetalTransferSessionDoFlush(uint64_t a1, CVOptionFlags a2)
{
  __CVMetalTextureCache *v4;

  v4 = *(__CVMetalTextureCache **)(CMBaseObjectGetDerivedStorage() + 48);
  if (v4)
    CVMetalTextureCacheFlush(v4, a2);
  return VTPixelTransferNodeBaseDoFlush(a1, a2);
}

BOOL VTMetalTransferSessionIsPixelFormatTypeSupportedOnDestination(int a1)
{
  void *v2;
  _BOOL8 v4;

  v2 = (void *)MEMORY[0x194028B74]();
  v4 = a1 != 2033463856 && a1 != 1714696752;
  objc_autoreleasePoolPop(v2);
  return v4;
}

uint64_t vtSetPropertyOrArrayOfType(const void **a1, CFTypeRef cf, uint64_t a3, _BYTE *a4)
{
  uint64_t result;
  CFTypeID TypeID;
  CFIndex Count;
  CFIndex v11;
  CFIndex v12;
  const void *v13;
  const void *ValueAtIndex;
  const void *v15;

  if (cf)
  {
    if (CFGetTypeID(cf) == a3)
    {
      if (FigCFEqual())
        return 0;
      goto LABEL_14;
    }
    TypeID = CFArrayGetTypeID();
    if (TypeID == CFGetTypeID(cf))
    {
      Count = CFArrayGetCount((CFArrayRef)cf);
      if (Count >= 1)
      {
        v11 = Count;
        v12 = 0;
        v13 = (const void *)*MEMORY[0x1E0C9B0D0];
        while (1)
        {
          ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)cf, v12);
          if (ValueAtIndex)
          {
            if (ValueAtIndex != v13 && CFGetTypeID(ValueAtIndex) != a3)
              break;
          }
          if (v11 == ++v12)
            goto LABEL_14;
        }
        result = 4294954394;
        goto LABEL_17;
      }
LABEL_14:
      v15 = *a1;
      *a1 = cf;
      CFRetain(cf);
      if (v15)
        CFRelease(v15);
      result = 0;
LABEL_17:
      *a4 = 0;
      return result;
    }
    return 4294954394;
  }
  else
  {
    result = (uint64_t)*a1;
    if (*a1)
    {
      CFRelease((CFTypeRef)result);
      result = 0;
      *a1 = 0;
    }
  }
  return result;
}

uint64_t RegisterVTMTSRenderPassDescriptor()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sVTMTSRenderPassDescriptorID = result;
  return result;
}

double vtMTSRenderPassDescriptorInit(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  double result;
  __int128 v6;

  bzero((void *)(a1 + 16), 0x800uLL);
  v2 = 0;
  *(_QWORD *)&v3 = -1;
  *((_QWORD *)&v3 + 1) = -1;
  do
  {
    *(_OWORD *)(a1 + v2 + 212) = v3;
    v4 = a1 + v2 + 212;
    *(_DWORD *)(v4 - 4) = 0;
    *(_OWORD *)(v4 + 16) = v3;
    *(_OWORD *)(v4 + 32) = v3;
    *(_OWORD *)(v4 + 48) = v3;
    *(_OWORD *)(v4 + 64) = v3;
    *(_OWORD *)(v4 + 80) = v3;
    *(_QWORD *)(v4 + 96) = -1;
    *(_DWORD *)(v4 + 104) = 0;
    *(_BYTE *)(v4 + 108) = 0;
    *(_WORD *)(v4 + 111) = 0;
    *(_BYTE *)(v4 + 113) = 0;
    *(_DWORD *)(v4 + 128) = 0;
    *(_QWORD *)(v4 + 136) = 0;
    *(_DWORD *)(v4 + 144) = 0;
    *(_QWORD *)(v4 + 116) = 0;
    v2 += 152;
    *(_WORD *)(v4 + 124) = 0;
  }
  while (v2 != 1216);
  result = 0.0;
  *(_QWORD *)(a1 + 1424) = 0;
  *(_QWORD *)(a1 + 1496) = -1;
  *(_QWORD *)&v6 = -1;
  *((_QWORD *)&v6 + 1) = -1;
  *(_OWORD *)(a1 + 1432) = v6;
  *(_OWORD *)(a1 + 1448) = v6;
  *(_OWORD *)(a1 + 1464) = v6;
  *(_OWORD *)(a1 + 1480) = v6;
  *(_DWORD *)(a1 + 1520) = 0;
  *(_BYTE *)(a1 + 1524) = 0;
  *(_DWORD *)(a1 + 1528) = 0;
  *(_QWORD *)(a1 + 1536) = 0;
  *(_DWORD *)(a1 + 1544) = 0;
  *(_QWORD *)(a1 + 1504) = 0;
  *(_QWORD *)(a1 + 1510) = 0;
  return result;
}

void vtMTSRenderPassDescriptorFinalize(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 24);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 24) = 0;
  }

  v3 = *(const void **)(a1 + 200);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 200) = 0;
  }

}

__CFString *vtCopyVTMTSRenderPassDescriptorFormattingDesc(const void *a1)
{
  return vtCopyVTMTSRenderPassDescriptorFormattingDescWithTabCount(a1, 0);
}

uint64_t RegisterVTMTSRenderPassBarrier()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sVTMTSRenderPassBarrierID = result;
  return result;
}

__CFString *vtCopyVTMTSRenderPassBarrierFormattingDesc(const void *a1)
{
  return vtCopyVTMTSRenderPassBarrierFormattingDescWithTabCount(a1, 0);
}

void VTMetalTransferSessionFinalize(uint64_t a1)
{
  void *v2;
  uint64_t DerivedStorage;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  uint64_t v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  const void *v28;
  const void *v29;

  v2 = (void *)MEMORY[0x194028B74]();
  if (a1)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v4 = *(const void **)(DerivedStorage + 32);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(DerivedStorage + 32) = 0;
    }
    v5 = *(const void **)(DerivedStorage + 40);
    if (v5)
    {
      CFRelease(v5);
      *(_QWORD *)(DerivedStorage + 40) = 0;
    }
    v6 = *(const void **)(DerivedStorage + 56);
    if (v6)
    {
      CFRelease(v6);
      *(_QWORD *)(DerivedStorage + 56) = 0;
    }
    v7 = *(const void **)(DerivedStorage + 1616);
    if (v7)
    {
      CFRelease(v7);
      *(_QWORD *)(DerivedStorage + 1616) = 0;
    }

    *(_QWORD *)(DerivedStorage + 1464) = 0;
    v8 = CMBaseObjectGetDerivedStorage();
    v9 = *(const void **)(v8 + 48);
    if (v9)
    {
      CFRelease(v9);
      *(_QWORD *)(v8 + 48) = 0;
    }
    v10 = *(const void **)(v8 + 80);
    if (v10)
    {
      CFRelease(v10);
      *(_QWORD *)(v8 + 80) = 0;
    }

    *(_QWORD *)(v8 + 1480) = 0;
    *(_QWORD *)(v8 + 1560) = 0;

    *(_QWORD *)(v8 + 1568) = 0;
    *(_QWORD *)(v8 + 1576) = 0;

    *(_QWORD *)(v8 + 1584) = 0;
    *(_QWORD *)(v8 + 1488) = 0;

    *(_QWORD *)(v8 + 1504) = 0;
    *(_QWORD *)(v8 + 1496) = 0;

    *(_QWORD *)(v8 + 152) = 0;
    *(_QWORD *)(v8 + 160) = 0;

    *(_QWORD *)(v8 + 168) = 0;
    *(_QWORD *)(v8 + 176) = 0;

    *(_QWORD *)(v8 + 1592) = 0;
    *(_QWORD *)(v8 + 1600) = 0;
    v11 = *(const void **)(DerivedStorage + 1344);
    if (v11)
    {
      CFRelease(v11);
      *(_QWORD *)(DerivedStorage + 1344) = 0;
    }
    v12 = *(const void **)(DerivedStorage + 1376);
    if (v12)
    {
      CFRelease(v12);
      *(_QWORD *)(DerivedStorage + 1376) = 0;
    }
    v13 = *(const void **)(DerivedStorage + 1384);
    if (v13)
    {
      CFRelease(v13);
      *(_QWORD *)(DerivedStorage + 1384) = 0;
    }
    v14 = *(const void **)(DerivedStorage + 1392);
    if (v14)
    {
      CFRelease(v14);
      *(_QWORD *)(DerivedStorage + 1392) = 0;
    }
    v15 = *(const void **)(DerivedStorage + 1400);
    if (v15)
    {
      CFRelease(v15);
      *(_QWORD *)(DerivedStorage + 1400) = 0;
    }
    v16 = *(const void **)(DerivedStorage + 1408);
    if (v16)
    {
      CFRelease(v16);
      *(_QWORD *)(DerivedStorage + 1408) = 0;
    }
    v17 = *(const void **)(DerivedStorage + 1416);
    if (v17)
    {
      CFRelease(v17);
      *(_QWORD *)(DerivedStorage + 1416) = 0;
    }
    v18 = *(const void **)(DerivedStorage + 1424);
    if (v18)
    {
      CFRelease(v18);
      *(_QWORD *)(DerivedStorage + 1424) = 0;
    }
    v19 = *(const void **)(DerivedStorage + 1432);
    if (v19)
    {
      CFRelease(v19);
      *(_QWORD *)(DerivedStorage + 1432) = 0;
    }
    v20 = *(const void **)(DerivedStorage + 1440);
    if (v20)
    {
      CFRelease(v20);
      *(_QWORD *)(DerivedStorage + 1440) = 0;
    }
    v21 = *(const void **)(DerivedStorage + 1448);
    if (v21)
    {
      CFRelease(v21);
      *(_QWORD *)(DerivedStorage + 1448) = 0;
    }
    v22 = *(const void **)(DerivedStorage + 1456);
    if (v22)
    {
      CFRelease(v22);
      *(_QWORD *)(DerivedStorage + 1456) = 0;
    }
    v23 = *(const void **)(DerivedStorage + 88);
    if (v23)
    {
      CFRelease(v23);
      *(_QWORD *)(DerivedStorage + 88) = 0;
    }
    v24 = *(const void **)(DerivedStorage + 96);
    if (v24)
    {
      CFRelease(v24);
      *(_QWORD *)(DerivedStorage + 96) = 0;
    }
    v25 = *(const void **)(DerivedStorage + 104);
    if (v25)
    {
      CFRelease(v25);
      *(_QWORD *)(DerivedStorage + 104) = 0;
    }
    v26 = *(const void **)(DerivedStorage + 112);
    if (v26)
    {
      CFRelease(v26);
      *(_QWORD *)(DerivedStorage + 112) = 0;
    }
    v27 = *(const void **)(DerivedStorage + 120);
    if (v27)
    {
      CFRelease(v27);
      *(_QWORD *)(DerivedStorage + 120) = 0;
    }
    v28 = *(const void **)(DerivedStorage + 128);
    if (v28)
    {
      CFRelease(v28);
      *(_QWORD *)(DerivedStorage + 128) = 0;
    }
    v29 = *(const void **)(DerivedStorage + 136);
    if (v29)
    {
      CFRelease(v29);
      *(_QWORD *)(DerivedStorage + 136) = 0;
    }
  }
  VTPixelTransferNodeBaseFinalize();
  objc_autoreleasePoolPop(v2);
}

__CFString *VTMetalTransferSessionCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v1;
  __CFString *Mutable;
  void *v3;
  const void *DerivedStorage;
  CFAllocatorRef v5;

  v1 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v1, 0);
  v3 = (void *)MEMORY[0x194028B74]();
  DerivedStorage = (const void *)CMBaseObjectGetDerivedStorage();
  v5 = CFGetAllocator(DerivedStorage);
  CFStringAppendFormat(Mutable, 0, CFSTR("<VTMetalTransferSession %p [%p]>{}"), DerivedStorage, v5);
  objc_autoreleasePoolPop(v3);
  return Mutable;
}

uint64_t VTMetalTransferSessionDoTransfer(const __CFArray *a1, void *a2, uint64_t a3, void *a4)
{
  const __CFAllocator *v6;
  const CFDictionaryKeyCallBacks *v7;
  const CFDictionaryValueCallBacks *v8;
  __CFDictionary *Mutable;
  CFMutableDictionaryRef v10;
  CFMutableDictionaryRef v11;
  uint64_t v12;

  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v7 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v8 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v10 = CFDictionaryCreateMutable(v6, 0, v7, v8);
  v11 = CFDictionaryCreateMutable(v6, 0, v7, v8);
  FigCFDictionarySetCFIndex();
  FigCFDictionarySetCFIndex();
  FigCFDictionarySetCFIndex();
  FigCFDictionarySetCFIndex();
  CFDictionarySetValue(Mutable, CFSTR("SourceAmendments"), v10);
  FigCFDictionarySetCFIndex();
  FigCFDictionarySetCFIndex();
  FigCFDictionarySetCFIndex();
  FigCFDictionarySetCFIndex();
  CFDictionarySetValue(Mutable, CFSTR("DestinationAmendments"), v11);
  v12 = VTMetalTransferSessionTransferImageSync(a1, a2, a4, Mutable);
  if (v10)
    CFRelease(v10);
  if (v11)
    CFRelease(v11);
  if (Mutable)
    CFRelease(Mutable);
  return v12;
}

void dictConcatApplier(void *key, void *value, CFMutableDictionaryRef theDict)
{
  CFDictionarySetValue(theDict, key, value);
}

uint64_t vtMetalTransferSessionRebuild(uint64_t a1, const __CFArray *a2, const __CFArray *a3, int a4)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v8;
  const __CFArray *Copy;
  const __CFArray *v10;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v12;
  CFTypeID v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const __CFString *v24;
  void *v25;
  const __CFString *v26;
  void *v27;
  uint64_t v28;
  CFIndex v29;
  unsigned int v30;
  void *v31;
  const void *v32;
  uint64_t v33;
  BOOL v34;
  CFIndex v35;
  unsigned int v36;
  void *v37;
  const void *v38;
  void *v39;
  int v40;
  __CFArray *Mutable;
  const __CFDictionary *DescriptionWithPixelFormatType;
  _BOOL4 v43;
  int v44;
  const __CFDictionary *v45;
  const void *v46;
  char v47;
  uint64_t v48;
  uint64_t appended;
  const __CFDictionary *v50;
  const __CFDictionary *v51;
  const void *v52;
  const void *v53;
  int64x2_t *v54;
  int v55;
  int v56;
  void *v57;
  const __CFString *v58;
  void *v59;
  const __CFString *v60;
  uint64_t VTMTSRenderPass;
  const __CFArray *v62;
  BOOL v63;
  int v64;
  _BOOL4 v65;
  _BOOL4 v67;
  int v68;
  BOOL v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t TexDescGlobalSample;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  uint64_t v85;
  int Count;
  CFTypeRef v87;
  void *v88;
  const __CFString *v89;
  uint64_t v90;
  uint64_t v91;
  unsigned __int8 v92;
  unsigned __int8 v93;
  int v94;
  double v95;
  double v96;
  int v97;
  int v98;
  int v99;
  _BOOL4 v100;
  int64x2_t v101;
  __int128 v102;
  void *v103;
  const void *Instance;
  char v105;
  char v106;
  void *v107;
  const __CFString *v108;
  void *v109;
  const __CFString *v110;
  int *v111;
  unsigned int v112;
  int *v113;
  unsigned int v114;
  int v115;
  BOOL v116;
  _BOOL4 v117;
  _BOOL4 v118;
  _BOOL4 v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  const __CFArray *v125;
  int v126;
  int v127;
  int v128;
  uint64_t IntermediateScalingFormat;
  int v130;
  int v131;
  int v132;
  uint64_t v133;
  int v134;
  CFDictionaryRef v135;
  CFDictionaryRef v136;
  const __CFArray *Value;
  const __CFArray *v138;
  CFTypeID v139;
  int v140;
  BOOL v141;
  int v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t *v146;
  int v147;
  int v148;
  int v150;
  int v151;
  uint64_t MetalTextureForList;
  int v153;
  const void *v154;
  _DWORD *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  int v168;
  int v169;
  uint64_t v170;
  int v171;
  int v172;
  uint64_t v173;
  CFTypeRef v174;
  void *v175;
  const __CFString *v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  int v180;
  char v181;
  BOOL v182;
  _BOOL4 v183;
  int v184;
  int v185;
  _BOOL4 v186;
  int64x2_t v187;
  int8x8_t v188;
  __int128 v189;
  int v190;
  int v191;
  int v192;
  CFIndex v193;
  const __CFArray *MutableCopy;
  uint64_t v195;
  CFMutableDictionaryRef v196;
  CFMutableDictionaryRef v197;
  uint64_t v198;
  __CFArray *v199;
  const __CFDictionary *v200;
  int v201;
  CFIndex v202;
  unint64_t v203;
  uint64_t v204;
  unint64_t v205;
  unint64_t v206;
  __CFArray *v207;
  _BOOL4 v208;
  const void *v209;
  const __CFDictionary *v210;
  char *v211;
  const __CFDictionary *v212;
  uint64_t v213;
  const void *v214;
  CFIndex v215;
  uint64_t (*v216)();
  const void *v217;
  const void *v218;
  CFTypeID v219;
  const __CFArray *v220;
  CFIndex v221;
  CFIndex v222;
  void *v223;
  const __CFString *v224;
  void *v225;
  const __CFString *v226;
  void *v227;
  char v228;
  int v229;
  void *v230;
  void *v231;
  void *v232;
  int v233;
  const __CFString *v234;
  id v235;
  void *v236;
  void *v237;
  const __CFString *v238;
  void *v239;
  void *v240;
  unint64_t v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  void *v245;
  const __CFArray *v246;
  CFIndex v247;
  _QWORD *v248;
  uint64_t (*v249)();
  uint64_t v250;
  void *v251;
  uint64_t v252;
  const void *v253;
  const void *v254;
  const void *v255;
  void *v256;
  void *v257;
  void *v258;
  void *v259;
  void *v260;
  void *v261;
  void *v262;
  const void *v263;
  const void *v264;
  uint64_t v266;
  int64x2_t v267;
  const __CFDictionary *v268;
  const __CFDictionary *v269;
  int v270;
  BOOL v271;
  _BYTE *v272;
  int v273;
  int v274;
  const __CFArray *v275;
  int v276;
  int v277;
  const __CFArray *v278;
  _BOOL4 v279;
  __CFArray *v280;
  const __CFAllocator *allocator;
  unsigned __int8 *v282;
  _BYTE *v283;
  BOOL v284;
  char v285;
  int v286;
  int v287;
  const __CFDictionary *v288;
  int v289;
  BOOL v290;
  void *v291;
  int v292;
  void *v293;
  CFTypeRef cf;
  _DWORD *cfa;
  CFMutableDictionaryRef cfb;
  int v297;
  CFMutableDictionaryRef v298;
  int v299;
  int v300;
  const __CFArray *theArray;
  const __CFString **v302;
  void *v303;
  uint64_t v304;
  void *v305;
  void *v306;
  _BYTE __src[1104];
  int v308[4];
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  _OWORD v313[2];
  __int128 v314;
  int v315[4];
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  uint64_t v320;
  CFDictionaryRef theDict[2];
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  int v326[4];
  __int128 v327;
  __int128 v328;
  _OWORD v329[3];
  __int128 v330;
  __int128 v331;
  _BYTE v332[32];
  __int128 v333;
  BOOL v334;
  OSType pixelFormat[4];
  __int128 v336;
  int v337[4];
  __int128 v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  int v346[4];
  __int128 v347;
  uint64_t v348;
  int v349[4];
  __int128 v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  int v356[4];
  __int128 v357;
  __int128 v358;
  uint64_t v359;

  bzero(__src, 0x450uLL);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (a2)
    Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2);
  else
    Copy = 0;
  v10 = CFArrayCreateCopy(v8, a3);
  ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v10, 0);
  if (!ValueAtIndex)
    goto LABEL_577;
  v12 = ValueAtIndex;
  v13 = CFGetTypeID(ValueAtIndex);
  if (v13 != CFDictionaryGetTypeID())
    goto LABEL_577;
  *(_WORD *)(DerivedStorage + 64) = 0;
  if (*(_QWORD *)(DerivedStorage + 1600))
  {
    if (!*(_QWORD *)(DerivedStorage + 1480))
    {
      if (!Copy)
        goto LABEL_39;
LABEL_31:
      if (CFArrayGetCount(Copy) >= 1)
      {
        v29 = 0;
        v30 = 1;
        while (1)
        {
          v31 = *(void **)(DerivedStorage + 1464);
          v32 = CFArrayGetCount(Copy) <= v29 ? 0 : CFArrayGetValueAtIndex(Copy, v29);
          v33 = vtCheckTextureLimits(v31, (uint64_t)v32);
          if ((_DWORD)v33)
            break;
          v29 = v30;
          v34 = CFArrayGetCount(Copy) <= v30++;
          if (v34)
            goto LABEL_39;
        }
LABEL_578:
        appended = v33;
        goto LABEL_496;
      }
LABEL_39:
      if (v10 && CFArrayGetCount(v10) >= 1)
      {
        v35 = 0;
        v36 = 1;
        do
        {
          v37 = *(void **)(DerivedStorage + 1464);
          v38 = CFArrayGetCount(v10) <= v35 ? 0 : CFArrayGetValueAtIndex(v10, v35);
          v33 = vtCheckTextureLimits(v37, (uint64_t)v38);
          if ((_DWORD)v33)
            goto LABEL_578;
          v35 = v36;
          v34 = CFArrayGetCount(v10) <= v36++;
        }
        while (!v34);
      }
      v39 = *(void **)(DerivedStorage + 1464);
      v282 = (unsigned __int8 *)(DerivedStorage + 1633);
      v274 = *(_DWORD *)(DerivedStorage + 24);
      theArray = *(const __CFArray **)(DerivedStorage + 80);
      v302 = (const __CFString **)(DerivedStorage + 1344);
      v40 = *(unsigned __int8 *)(DerivedStorage + 1472);
      memset(v329, 0, 40);
      v328 = 0u;
      v327 = 0u;
      *(_OWORD *)v326 = 0u;
      v325 = 0u;
      v324 = 0u;
      v323 = 0u;
      v322 = 0u;
      *(_OWORD *)theDict = 0u;
      Mutable = CFArrayCreateMutable(v8, 0, MEMORY[0x1E0C9B378]);
      v305 = v39;
      *(_QWORD *)&v327 = v39;
      v272 = (_BYTE *)(DerivedStorage + 1288);
      *((_QWORD *)&v327 + 1) = DerivedStorage + 1288;
      LOBYTE(v329[1]) = v40 == 0;
      pixelFormat[0] = 0;
      FigCFDictionaryGetInt32IfPresent();
      LODWORD(theDict[0]) = pixelFormat[0];
      theDict[1] = v12;
      DescriptionWithPixelFormatType = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
      DWORD1(v329[0]) = getNativeTextureTypeForPixelFormat((int)theDict[0]);
      getSubsamplingFromPixelDescription(DescriptionWithPixelFormatType, (_DWORD *)v329 + 2, (_DWORD *)v329 + 3);
      *(_OWORD *)((char *)&v329[1] + 4) = xmmword_1928E29B0;
      v278 = v10;
      v283 = (_BYTE *)DerivedStorage;
      v43 = FigCFDictionaryGetFloatIfPresent()
         && FigCFDictionaryGetFloatIfPresent()
         && FigCFDictionaryGetFloatIfPresent()
         && FigCFDictionaryGetFloatIfPresent()
         || *(_BYTE *)(DerivedStorage + 1354) == 0;
      v279 = v43;
      v349[0] = v326[2];
      *(_DWORD *)v332 = v326[3];
      LODWORD(v330) = HIDWORD(v325);
      LODWORD(v331) = DWORD2(v325);
      FigCFDictionaryGetInt32IfPresent();
      FigCFDictionaryGetInt32IfPresent();
      pixelFormat[0] = v349[0];
      v308[0] = *(_DWORD *)v332;
      FigCFDictionaryGetInt32IfPresent();
      FigCFDictionaryGetInt32IfPresent();
      FigCFDictionaryGetInt32IfPresent();
      FigCFDictionaryGetInt32IfPresent();
      v326[0] = pixelFormat[0];
      v326[1] = v308[0];
      *((_QWORD *)&v325 + 1) = __PAIR64__(v330, v331);
      v326[2] = v349[0];
      v326[3] = *(_DWORD *)v332;
      v275 = Copy;
      v280 = Mutable;
      allocator = v8;
      if (v274 == 1)
      {
        if (Copy)
        {
LABEL_61:
          v45 = DescriptionWithPixelFormatType;
          if (CFArrayGetCount(Copy) < 1)
          {
            v47 = 0;
            v46 = 0;
          }
          else
          {
            v46 = CFArrayGetValueAtIndex(Copy, 0);
            v47 = 0;
          }
LABEL_68:
          v319 = 0u;
          v320 = 0;
          v318 = 0u;
          *(_QWORD *)&v316 = 0;
          *(_OWORD *)v315 = 0u;
          v314 = 0u;
          v312 = 0u;
          memset(v313, 0, sizeof(v313));
          v311 = 0u;
          v310 = 0u;
          v309 = 0u;
          *(_OWORD *)v308 = 0u;
          HIDWORD(v319) = 1065353216;
          *((_QWORD *)&v316 + 1) = v305;
          v317 = (unint64_t)v272;
          BYTE8(v312) = 1;
          if (*((_QWORD *)&v325 + 1) || v326[0] != v326[2] || v326[1] != v326[3])
            BYTE8(v312) = 0;
          if (!v46)
            goto LABEL_79;
          LOBYTE(v349[0]) = 1;
          pixelFormat[0] = 0;
          FigCFDictionaryGetInt32IfPresent();
          v308[0] = pixelFormat[0];
          v288 = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
          FigCFDictionaryGetBooleanIfPresent();
          FigCFDictionaryGetBooleanIfPresent();
          FigCFDictionaryGetIntIfPresent();
          if (FigCFDictionaryGetBooleanIfPresent() && LOBYTE(v349[0]))
            BYTE8(v312) = 0;
          if (v288)
          {
            FigCFDictionaryGetBooleanIfPresent();
            CFDictionaryGetValue(v288, (const void *)*MEMORY[0x1E0CA8CA8]);
            v50 = v45;
            if (FigCFEqual())
              LOBYTE(v319) = 0;
          }
          else
          {
LABEL_79:
            v288 = 0;
            v50 = v45;
          }
          if (v50)
            FigCFDictionaryGetBooleanIfPresent();
          v269 = v50;
          if ((v47 & 1) != 0 || CFArrayGetCount(Copy) < 1)
            v51 = 0;
          else
            v51 = (const __CFDictionary *)CFArrayGetValueAtIndex(Copy, 0);
          vtmtsLoadColorFunctionConstantValues(v51, v12, v288, v50, (int *)&v318 + 1, (int *)&v318, (int *)&v317 + 2, (int *)&v318 + 2, (int *)&v328 + 3, (int *)&v328 + 2, (int *)&v328, (int *)v329);
          HIDWORD(v318) = getNativeTextureTypeForPixelFormat(v308[0]);
          getSubsamplingFromPixelDescription(v288, (_DWORD *)&v319 + 1, (_DWORD *)&v319 + 2);
          if ((v47 & 1) != 0 || CFArrayGetCount(Copy) < 1)
            v52 = 0;
          else
            v52 = CFArrayGetValueAtIndex(Copy, 0);
          vtmtsGetSrcCropDimensions((uint64_t)v52, &v315[2], &v315[3], v315, &v315[1], (int *)&v316, (int *)&v316 + 1, (uint64_t)v313, (_BYTE *)&v312 + 10);
          if (*(float *)v315 != 0.0 || *(float *)&v315[1] != 0.0 || *(_QWORD *)&v315[2] != (_QWORD)v316)
            LOBYTE(v320) = 1;
          if ((v47 & 1) != 0 || CFArrayGetCount(Copy) < 1)
            v53 = 0;
          else
            v53 = CFArrayGetValueAtIndex(Copy, 0);
          *(_QWORD *)&v308[2] = v53;
          FigCFDictionaryGetFloatIfPresent();
          v54 = (int64x2_t *)&unk_1928E2000;
          if (v308[0] == 1647392369 || v308[0] == 1651521076)
          {
            v290 = 0;
            v299 = 0;
            v297 = 0;
            v55 = 0;
            if (v308[0] == 1647392369)
              v56 = 2;
            else
              v56 = 4;
            v276 = v308[0];
            while (1)
            {
              v286 = v55;
              v57 = (void *)objc_msgSend(v305, "newBufferWithLength:options:", 4, 0, v266);
              if (*v302)
                v58 = *v302;
              else
                v58 = CFSTR("com.apple.VideoToolbox.VTMetalTransferSession");
              cf = v57;
              objc_msgSend(v57, "setLabel:", v58);
              v59 = (void *)objc_msgSend(v305, "newBufferWithLength:options:", 124, 0);
              if (*v302)
                v60 = *v302;
              else
                v60 = CFSTR("com.apple.VideoToolbox.VTMetalTransferSession");
              v303 = v59;
              objc_msgSend(v59, "setLabel:", v60);
              v357 = v329[0];
              v358 = v329[1];
              v359 = *(_QWORD *)&v329[2];
              v353 = v325;
              v354 = *(_OWORD *)v326;
              *(_OWORD *)v356 = v328;
              v355 = v327;
              *(_OWORD *)v349 = *(_OWORD *)theDict;
              v350 = v322;
              v352 = v324;
              v351 = v323;
              v345 = v317;
              *(_OWORD *)v346 = v318;
              v347 = v319;
              v348 = v320;
              v341 = v313[1];
              v342 = v314;
              v343 = *(_OWORD *)v315;
              v344 = v316;
              *(_OWORD *)v337 = v310;
              v338 = v311;
              v339 = v312;
              v340 = v313[0];
              *(_OWORD *)pixelFormat = *(_OWORD *)v308;
              v336 = v309;
              v334 = 0;
              VTMTSRenderPass = vtCreateVTMTSRenderPass();
              *(_BYTE *)(VTMTSRenderPass + 1558) = 0;
              v62 = CFArrayCreateMutable(v8, 0, MEMORY[0x1E0C9B378]);
              v63 = v315[2] == v326[0] && v315[3] == v326[1];
              v64 = !v63;
              v65 = 1;
              if (!HIDWORD(v320) && !*(_WORD *)((char *)&v320 + 1))
                v65 = BYTE10(v312) != 0;
              if (((1 << v56) & 0x1A) != 0 && (v64 | v65) != 1)
                break;
              v67 = (int)VTGetBitsPerComponentFromPixelFormatType((int)theDict[0]) > 12
                 && LODWORD(theDict[0]) != 1380411457;
              v68 = *(unsigned __int8 *)(DerivedStorage + 1656);
              if (*(_BYTE *)(DerivedStorage + 1656))
                v68 = *(_BYTE *)(DerivedStorage + 1672) != 0;
              v69 = (v67 & v68) == 0;
              if ((v67 & v68) != 0)
                v70 = 1380410945;
              else
                v70 = 1380411457;
              v349[0] = v70;
              *((int32x2_t *)&v353 + 1) = vcvt_s32_f32(*(float32x2_t *)&v343);
              DWORD1(v344) = v315[3];
              *(_QWORD *)&v354 = *(_QWORD *)&v315[2];
              *((_QWORD *)&v354 + 1) = *(_QWORD *)&v315[2];
              v71 = 65;
              if (!v69)
                v71 = 105;
              v72 = 115;
              if (!v69)
                v72 = 125;
              if (v56 == 2)
                v73 = v71;
              else
                v73 = v72;
              *(_QWORD *)v337 = v73;
              *(_QWORD *)&v337[2] = 0;
              LODWORD(v344) = v315[2];
              LODWORD(v339) = 2;
              LODWORD(v353) = 2;
              v356[0] = DWORD2(v345);
              v356[2] = v346[0];
              LODWORD(v357) = v346[2];
              v351 = (unint64_t)v73;
              if (!vtAllocateMetalTextureForList(v305, v315[2], v315[3], v73, v297, theArray))
                goto LABEL_142;
LABEL_144:
              v74 = v351;
              v284 = (_QWORD)v351 == 0;
              v292 = DWORD2(v350);
              if (!(_QWORD)v351)
              {
                v75 = vtmtsSetUpProcessingNeeds(v305, v308[0], v349[0], (const __CFDictionary **)&v308[2], *(const __CFDictionary **)&v349[2], v288, v269, &v346[1], v346, (int *)&v345 + 2, v346[2], v356[3], v356[2], v356[0], v357, v302, v272, VTMTSRenderPass + 208, (_DWORD *)&v317 + 3,
                        &v356[1],
                        (uint64_t)cf,
                        (_QWORD *)(VTMTSRenderPass + 2056),
                        (_BYTE *)&v312 + 9,
                        &v334);
                if ((_DWORD)v75)
                  goto LABEL_219;
              }
              if ((_QWORD)v310)
              {
                v76 = 0;
                *(_DWORD *)(VTMTSRenderPass + 208) = v308[0];
                do
                {
                  v77 = *((_QWORD *)&v310 + v76);
                  if (!v77)
                    break;
                  LODWORD(v266) = v76;
                  TexDescGlobalSample = vtCreateTexDescGlobalSample((uint64_t)v305, (uint64_t)v62, VTMTSRenderPass + 208, v308[0], v77, v312);
                  if ((_DWORD)TexDescGlobalSample)
                  {
                    appended = TexDescGlobalSample;
                    goto LABEL_217;
                  }
                  ++v76;
                }
                while (v76 != 4);
                v79 = v76 + v299;
                v8 = allocator;
              }
              else
              {
                v75 = vtmtsBuildSource(v305, v308, 0, VTMTSRenderPass + 208, v62);
                v79 = v299;
                if ((_DWORD)v75)
                  goto LABEL_219;
              }
              v289 = v79;
              if (!(_QWORD)v351)
              {
                if (v62)
                  Count = CFArrayGetCount(v62);
                else
                  Count = 0;
                v349[1] = Count;
                v75 = vtmtsBuildDestination(v305, (unsigned int *)v349, *(unsigned __int8 *)(VTMTSRenderPass + 316), VTMTSRenderPass + 208, v62, theArray);
                if (!(_DWORD)v75)
                {
LABEL_166:
                  if (v62)
                    v87 = CFRetain(v62);
                  else
                    v87 = 0;
                  *(_QWORD *)(VTMTSRenderPass + 200) = v87;
                  vtmtsFixUpProcessingShortcuts(VTMTSRenderPass + 208, v334);
                  *(_QWORD *)(VTMTSRenderPass + 348) = v318;
                  *(_DWORD *)(VTMTSRenderPass + 340) = DWORD2(v317);
                  *(_DWORD *)(VTMTSRenderPass + 356) = DWORD2(v318);
                  *(_QWORD *)(VTMTSRenderPass + 1536) = *(_QWORD *)&v356[2];
                  *(_DWORD *)(VTMTSRenderPass + 1528) = v356[0];
                  *(_DWORD *)(VTMTSRenderPass + 1544) = v357;

                  v88 = (void *)objc_msgSend(v305, "newBufferWithLength:options:", 512, 0);
                  *(_QWORD *)(VTMTSRenderPass + 64) = v88;
                  if (*v302)
                    v89 = *v302;
                  else
                    v89 = CFSTR("com.apple.VideoToolbox.VTMetalTransferSession");
                  objc_msgSend(v88, "setLabel:", v89, v266);
                  v90 = objc_msgSend(*(id *)(VTMTSRenderPass + 64), "contents");
                  v91 = v90;
                  if (v74)
                  {
                    v92 = 0;
                    v93 = 0;
                    v94 = 0;
                    v331 = 0uLL;
                    v95 = 1.0;
                    v96 = 1.0;
                    v330 = 0uLL;
                  }
                  else
                  {
                    v331 = *(_OWORD *)((char *)v313 + 8);
                    v96 = *(double *)v313;
                    v95 = *((double *)&v313[1] + 1);
                    v330 = v314;
                    v92 = BYTE1(v320);
                    v93 = BYTE2(v320);
                    v94 = HIDWORD(v320);
                  }
                  DerivedStorage = (uint64_t)v283;
                  if (BYTE10(v312))
                  {
                    v97 = *(unsigned __int8 *)(VTMTSRenderPass + 323);
                    *(_OWORD *)&v332[8] = v331;
                    *(double *)v332 = v96;
                    *(double *)&v332[24] = v95;
                    v333 = v330;
                    setupAffine(0, v97, v332, (int)*(float *)v315, (int)*(float *)&v315[1], v315[2], v315[3], v316, DWORD1(v316), v90);
                    *(_BYTE *)(VTMTSRenderPass + 320) = 0;
                  }
                  else
                  {
                    setupRenderRotationAndCrop(v305, v282, v302, 0, v308[0], v283[1354], v292 == 2, *(unsigned __int8 *)(VTMTSRenderPass + 320), v283[1353], *(_BYTE *)(VTMTSRenderPass + 323), v92, v93, v94, (int)*(float *)v315, (int)*(float *)&v315[1], v315[2], v315[3], v316, SDWORD1(v316),
                      SDWORD2(v353),
                      SHIDWORD(v353),
                      v354,
                      SDWORD1(v354),
                      SDWORD2(v354),
                      SHIDWORD(v354),
                      (_QWORD *)(VTMTSRenderPass + 40),
                      (_QWORD *)(VTMTSRenderPass + 48),
                      v90,
                      (id *)(VTMTSRenderPass + 2048));
                  }
                  if (v279)
                  {
                    *(_DWORD *)v332 = 0;
                    if ((_QWORD)v350)
                    {
                      FigCFDictionaryGetInt32IfPresent();
                      v98 = *(_DWORD *)v332;
                    }
                    else
                    {
                      v98 = 0;
                    }
                    setupBackgroundColor(*((float32_t *)&v358 + 1), *((float *)&v358 + 2), *((float *)&v358 + 3), *(float *)&v359, v308[0], *(_DWORD *)(VTMTSRenderPass + 316), SDWORD2(v317), SDWORD2(v318), v98, *(void **)(VTMTSRenderPass + 64));
                    *(_BYTE *)(VTMTSRenderPass + 1559) = 1;
                    *(_DWORD *)(v91 + 64) = HIDWORD(v319);
                  }
                  if (v62)
                    v99 = CFArrayGetCount(v62);
                  else
                    v99 = 0;
                  if (*(_QWORD *)(VTMTSRenderPass + 2048))
                    *(_DWORD *)(VTMTSRenderPass + 308) = v99++;
                  if (*(_QWORD *)(VTMTSRenderPass + 2056))
                    *(_DWORD *)(VTMTSRenderPass + 312) = v99;
                  if (*(_BYTE *)(VTMTSRenderPass + 320) && !*(_BYTE *)(VTMTSRenderPass + 324))
                  {
                    v100 = 0;
                    if (!*(_BYTE *)(VTMTSRenderPass + 1508) && DWORD1(v319) == 1)
                    {
                      v100 = 0;
                      if (__PAIR64__(DWORD2(v319), 1) == (DWORD2(v357) | 0x100000000))
                        v100 = HIDWORD(v357) == 1;
                    }
                  }
                  else
                  {
                    v100 = 0;
                  }
                  if (v292 == 3)
                  {
                    if (!v100)
                    {
                      VTMTSRenderPassDescriptorSetFunctionName(VTMTSRenderPass, CFSTR("VTMTSComputeFunction"));
                      goto LABEL_205;
                    }
                    VTMTSRenderPassDescriptorSetFunctionName(VTMTSRenderPass, CFSTR("VTMTSComputeFunction1x1"));
                  }
                  else
                  {
                    if (v292 == 2)
                      VTMTSRenderPassDescriptorSetFunctionName(VTMTSRenderPass, CFSTR("VTMTSFragmentFunction"));
                    if (!v100)
                    {
LABEL_205:
                      v101 = (int64x2_t)xmmword_1928E29C0;
LABEL_206:
                      *(int64x2_t *)(VTMTSRenderPass + 128) = v101;
                      *(_QWORD *)(VTMTSRenderPass + 144) = 1;
                      *(_QWORD *)&v102 = (int)v354;
                      *((_QWORD *)&v102 + 1) = SDWORD1(v354);
                      *(_OWORD *)(VTMTSRenderPass + 104) = v102;
                      *(_QWORD *)(VTMTSRenderPass + 120) = 1;
                      HIDWORD(v347) = 1065353216;
                      pixelFormat[0] = v349[0];
                      v310 = *(_OWORD *)v337;
                      v311 = v338;
                      v312 = v339;
                      v313[0] = v340;
                      v317 = v345;
                      v318 = *(_OWORD *)v346;
                      v319 = v347;
                      v320 = v348;
                      *(_OWORD *)v315 = v343;
                      v316 = v344;
                      v314 = v342;
                      v313[1] = v341;
                      v309 = v336;
                      *(_OWORD *)v308 = *(_OWORD *)pixelFormat;
                      CFArrayAppendValue(Mutable, (const void *)VTMTSRenderPass);
                      appended = 0;
                      *(_QWORD *)(VTMTSRenderPass + 80) = cf;
                      *(_QWORD *)(VTMTSRenderPass + 88) = v303;
                      v290 = v284;
                      v303 = 0;
                      v103 = 0;
LABEL_207:
                      CFRelease((CFTypeRef)VTMTSRenderPass);
                      v299 = v289;
                      goto LABEL_208;
                    }
                  }
                  v101 = vdupq_n_s64(1uLL);
                  goto LABEL_206;
                }
LABEL_219:
                appended = v75;
                v289 = v299;
                DerivedStorage = (uint64_t)v283;
                v103 = (void *)cf;
                goto LABEL_207;
              }
              v80 = 0;
              while (1)
              {
                v81 = *((_QWORD *)&v351 + v80);
                if (!v81)
                {
LABEL_161:
                  v297 += v80;
                  Copy = v275;
                  v10 = v278;
                  Mutable = v280;
                  v8 = allocator;
                  goto LABEL_166;
                }
                v82 = v349[0];
                v83 = v353;
                v84 = v62 ? CFArrayGetCount(v62) : 0;
                v85 = vtCreateTexDescGlobalWrite((uint64_t)v305, v82, v62, VTMTSRenderPass + 1428, v82, v81, v83, v297 + (int)v80, v80, v84, SDWORD2(v357), SHIDWORD(v357));
                if ((_DWORD)v85)
                  break;
                if (++v80 == 4)
                  goto LABEL_161;
              }
              appended = v85;
              Copy = v275;
              v10 = v278;
              Mutable = v280;
LABEL_217:
              v289 = v299;
              DerivedStorage = (uint64_t)v283;
              v8 = allocator;
              v103 = (void *)cf;
              if (VTMTSRenderPass)
                goto LABEL_207;
LABEL_208:
              if (v62)
                CFRelease(v62);

              v288 = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
              if (!v290)
              {
                MEMORY[0x1940281CC](&VTMTSRenderPassBarrierGetTypeID_sRegisterVTMTSRenderPassBarrierOnce, RegisterVTMTSRenderPassBarrier);
                Instance = (const void *)_CFRuntimeCreateInstance();
                CFArrayAppendValue(Mutable, Instance);
                if (Instance)
                  CFRelease(Instance);
              }
              v56 = 3;
              v55 = 1;
              if (((v276 == 1647392369) & ~v286) == 0)
              {
                if (!(_DWORD)appended)
                {
                  v54 = (int64x2_t *)&unk_1928E2000;
                  if (v290)
                    goto LABEL_497;
                  goto LABEL_226;
                }
LABEL_494:
                if (Mutable)
                  CFRelease(Mutable);
LABEL_496:
                Mutable = 0;
                goto LABEL_569;
              }
            }
            *((_QWORD *)&v343 + 1) = *(_QWORD *)&v315[2];
LABEL_142:
            v332[0] = 0;
            getKernelTypeCapabilities_source(v282, v308[0], 0, v332);
            if (v332[0])
            {
              DWORD1(v312) = 3;
              DWORD2(v350) = 3;
              *(_DWORD *)(VTMTSRenderPass + 16) = 3;
              FigCFDictionaryGetIntIfPresent();
              *(_DWORD *)(VTMTSRenderPass + 2032) = v56;
              *(_BYTE *)(VTMTSRenderPass + 320) = 1;
              *(_BYTE *)(VTMTSRenderPass + 323) = 0;
            }
            else
            {
              FigSignalErrorAt();
            }
            goto LABEL_144;
          }
          v297 = 0;
          v299 = 0;
LABEL_226:
          v267 = v54[156];
          v105 = 1;
          while (1)
          {
            v106 = v105;
            v107 = (void *)objc_msgSend(v305, "newBufferWithLength:options:", 4, 0, v266);
            if (*v302)
              v108 = *v302;
            else
              v108 = CFSTR("com.apple.VideoToolbox.VTMetalTransferSession");
            v293 = v107;
            objc_msgSend(v107, "setLabel:", v108);
            v109 = (void *)objc_msgSend(v305, "newBufferWithLength:options:", 124, 0);
            if (*v302)
              v110 = *v302;
            else
              v110 = CFSTR("com.apple.VideoToolbox.VTMetalTransferSession");
            v291 = v109;
            objc_msgSend(v109, "setLabel:", v110);
            v357 = v329[0];
            v358 = v329[1];
            v359 = *(_QWORD *)&v329[2];
            v353 = v325;
            v354 = *(_OWORD *)v326;
            *(_OWORD *)v356 = v328;
            v355 = v327;
            *(_OWORD *)v349 = *(_OWORD *)theDict;
            v350 = v322;
            v352 = v324;
            v351 = v323;
            v345 = v317;
            *(_OWORD *)v346 = v318;
            v347 = v319;
            v348 = v320;
            v341 = v313[1];
            v342 = v314;
            v343 = *(_OWORD *)v315;
            v344 = v316;
            *(_OWORD *)v337 = v310;
            v338 = v311;
            v339 = v312;
            v340 = v313[0];
            *(_OWORD *)pixelFormat = *(_OWORD *)v308;
            v336 = v309;
            v111 = &v315[2];
            if (HIDWORD(v320))
            {
              v111 = &v315[2];
              if (HIDWORD(v320) != 180)
                v111 = &v315[3];
            }
            v112 = *v111;
            v113 = &v315[3];
            if (HIDWORD(v320))
            {
              v113 = &v315[3];
              if (HIDWORD(v320) != 180)
                v113 = &v315[2];
            }
            v114 = *v113;
            v115 = HIDWORD(v320) | BYTE1(v320) | BYTE2(v320);
            v116 = v115 == 0;
            v285 = v106;
            if (v115)
              v117 = 1;
            else
              v117 = *(_BYTE *)(DerivedStorage + 1353) != 0;
            v118 = v112 != 0;
            if (v112 == v326[0])
              v118 = 0;
            v119 = v114 != 0;
            if (v114 == v326[1])
              v119 = 0;
            v271 = v117;
            v120 = v118 && !v117;
            if (BYTE10(v312))
              v121 = 0;
            else
              v121 = v120;
            if (BYTE10(v312))
              v122 = 0;
            else
              v122 = v119 && !v117;
            if (v114 > v326[1])
              v123 = v122;
            else
              v123 = 0;
            BYTE8(v312) = v116;
            LOBYTE(v331) = 0;
            v287 = *(unsigned __int8 *)(DerivedStorage + 1354);
            if (v112 > v326[0])
              v124 = v121;
            else
              v124 = 0;
            cfa = (_DWORD *)vtCreateVTMTSRenderPass();
            cfa[387] = 1;
            if (v274 == 2 && ((_BYTE)v319 || *((float *)&v319 + 3) < 1.0))
            {
              *((_BYTE *)cfa + 1558) = 1;
              BYTE8(v312) = 0;
            }
            v277 = v123 | v124;
            v125 = CFArrayCreateMutable(v8, 0, MEMORY[0x1E0C9B378]);
            if (v121 && v122)
            {
              v126 = v308[0];
              LODWORD(v354) = v315[2];
              *((_QWORD *)&v354 + 1) = __PAIR64__(DWORD1(v354), v315[2]);
              *(_QWORD *)&v344 = __PAIR64__(DWORD1(v354), v315[2]);
              HIDWORD(v343) = DWORD1(v354);
              *(_QWORD *)&v343 = 0;
              *((_QWORD *)&v353 + 1) = 0;
              *((_QWORD *)&v357 + 1) = *(_QWORD *)((char *)&v319 + 4);
              LOBYTE(v330) = 0;
              v334 = 0;
              getKernelTypeCapabilities_source(v282, v308[0], (char *)&v330, (char *)&v334);
              v127 = 2 * ((_BYTE)v330 != 0);
              if (v334)
                v127 = 3;
              if (*(_BYTE *)(DerivedStorage + 1289))
                v128 = 2;
              else
                v128 = v127;
              DWORD1(v312) = v128;
              cfa[4] = v128;
              v273 = v128;
              DWORD2(v350) = v128;
              IntermediateScalingFormat = vtmtsGetIntermediateScalingFormat(v282, v126, (int *)pixelFormat, (uint64_t)v337, 1, (int *)&v339);
              appended = IntermediateScalingFormat;
              if ((v277 & 1) != 0)
              {
                v130 = 2;
                LODWORD(v339) = 2;
              }
              else
              {
                v130 = v339;
              }
              v349[0] = pixelFormat[0];
              LODWORD(v353) = v130;
              v133 = (uint64_t)cfa;
              if ((_DWORD)IntermediateScalingFormat)
                goto LABEL_336;
              v135 = CVPixelFormatDescriptionCreateWithPixelFormatType(v8, pixelFormat[0]);
              if (v135)
              {
                v136 = v135;
                v332[0] = 0;
                FigCFDictionaryGetBooleanIfPresent();
                if (v332[0])
                {
                  Value = (const __CFArray *)FigCFDictionaryGetValue();
                  if (Value)
                  {
                    v138 = Value;
                    v139 = CFGetTypeID(Value);
                    if (v139 == CFArrayGetTypeID())
                      LODWORD(Value) = CFArrayGetCount(v138);
                    else
                      LODWORD(Value) = 0;
                  }
                  if ((_DWORD)Value)
                    v140 = (_DWORD)Value - 1;
                  else
                    v140 = 0;
                }
                else
                {
                  v140 = -1;
                }
                CFRelease(v136);
              }
              else
              {
                FigSignalErrorAt();
                v140 = -1;
              }
              v144 = 0;
              v145 = *(_QWORD *)v337;
              v146 = (uint64_t *)&v351;
              do
              {
                v147 = v354;
                v148 = DWORD1(v354);
                *v146 = v145;
                if (v144)
                {
                  if (DWORD2(v357) == 2 && v140 != v144)
                  {
                    v150 = (int)v354 >= -1 ? v354 + 1 : (int)v354 + 2;
                    v147 = v150 >> 1;
                    if (HIDWORD(v357) == 2)
                    {
                      if (SDWORD1(v354) >= -1)
                        v151 = DWORD1(v354) + 1;
                      else
                        v151 = DWORD1(v354) + 2;
                      v148 = v151 >> 1;
                    }
                  }
                }
                MetalTextureForList = vtAllocateMetalTextureForList(v305, v147, v148, v145, (v297 + v144), theArray);
                if ((_DWORD)MetalTextureForList)
                {
                  appended = MetalTextureForList;
                  v10 = v278;
                  Mutable = v280;
                  goto LABEL_338;
                }
                if (v144 == 3)
                  goto LABEL_334;
                v145 = *(_QWORD *)&v337[2 * v144 + 2];
                ++v146;
                ++v144;
              }
              while (v145);
              if ((v144 - 1) <= 2)
              {
                v153 = 3 - v144;
                if (v144 > 3)
                  v153 = 0;
                bzero(v146, (8 * v153 + 8));
              }
LABEL_334:
              v122 = 0;
              v133 = (uint64_t)cfa;
              v287 = 1;
              *((_BYTE *)cfa + 322) = 1;
              v10 = v278;
              DerivedStorage = (uint64_t)v283;
              if (!cfa[4])
              {
LABEL_335:
                appended = 4294954391;
LABEL_336:
                Mutable = v280;
                goto LABEL_428;
              }
            }
            else
            {
              if (v121)
              {
                v332[0] = 0;
                LOBYTE(v330) = 0;
                v131 = v349[0];
                getKernelTypeCapabilities(v282, v308[0], v349[0], v332, (char *)&v330);
                v132 = 2 * (v332[0] != 0);
                if ((_BYTE)v330)
                  v132 = 3;
                if (*(_BYTE *)(DerivedStorage + 1289))
                  v132 = 2;
                if (v332[0] && *(_BYTE *)(DerivedStorage + 1352))
                  v132 = 2;
                v121 = 0;
                DWORD1(v312) = v132;
                cfa[4] = v132;
                *((_BYTE *)cfa + 321) = 1;
                LODWORD(v344) = v354;
                DWORD2(v350) = v132;
                DWORD2(v354) = v326[2];
                DWORD2(v343) = v354;
                pixelFormat[0] = v131;
                v133 = (uint64_t)cfa;
              }
              else if (v122)
              {
                v332[0] = 0;
                LOBYTE(v330) = 0;
                v134 = v349[0];
                getKernelTypeCapabilities(v282, v308[0], v349[0], v332, (char *)&v330);
                v132 = 2 * (v332[0] != 0);
                if ((_BYTE)v330)
                  v132 = 3;
                if (*(_BYTE *)(DerivedStorage + 1289))
                  v132 = 2;
                if (v332[0] && *(_BYTE *)(DerivedStorage + 1352))
                  v132 = 2;
                v121 = 0;
                v122 = 0;
                DWORD1(v312) = v132;
                cfa[4] = v132;
                *((_BYTE *)cfa + 322) = 1;
                DWORD1(v344) = DWORD1(v354);
                DWORD2(v350) = v132;
                HIDWORD(v354) = DWORD1(v354);
                HIDWORD(v343) = DWORD1(v354);
                pixelFormat[0] = v134;
                v133 = (uint64_t)cfa;
              }
              else
              {
                v332[0] = 0;
                LOBYTE(v330) = 0;
                getKernelTypeCapabilities(v282, v308[0], v349[0], v332, (char *)&v330);
                v132 = 2 * (v332[0] != 0);
                if ((_BYTE)v330)
                  v132 = 3;
                if (*(_BYTE *)(DerivedStorage + 1289))
                  v132 = 2;
                if (v332[0] && *(_BYTE *)(DerivedStorage + 1352))
                  v132 = 2;
                v141 = 0;
                DWORD1(v312) = v132;
                cfa[4] = v132;
                DWORD2(v350) = v132;
                v142 = v326[0];
                v143 = v326[1];
                if (v112 == v326[0] && v114 == v326[1])
                {
                  if (*(_BYTE *)(DerivedStorage + 1302))
                    v141 = 0;
                  else
                    v141 = BYTE10(v312) == 0;
                  v143 = v114;
                }
                v121 = 0;
                v122 = 0;
                v133 = (uint64_t)cfa;
                *((_BYTE *)cfa + 320) = v141;
                *((_BYTE *)cfa + 323) = *(_BYTE *)(DerivedStorage + 1303);
                *((_QWORD *)&v343 + 1) = __PAIR64__(v143, v142);
              }
              v273 = v132;
              if (!v132)
                goto LABEL_335;
            }
            v155 = (_DWORD *)(v133 + 208);
            if (!v121 && !v122)
            {
              v156 = vtmtsSetUpProcessingNeeds(v305, v308[0], v349[0], (const __CFDictionary **)&v308[2], *(const __CFDictionary **)&v349[2], v288, v269, &v346[1], v346, (int *)&v345 + 2, v346[2], v356[3], v356[2], v356[0], v357, v302, v272, v133 + 208, (_DWORD *)&v317 + 3,
                       &v356[1],
                       (uint64_t)v293,
                       (_QWORD *)(v133 + 2056),
                       (_BYTE *)&v312 + 9,
                       (BOOL *)&v331);
              if ((_DWORD)v156)
              {
                appended = v156;
                DerivedStorage = (uint64_t)v283;
                goto LABEL_336;
              }
            }
            if ((_QWORD)v310)
            {
              v157 = 0;
              *v155 = v308[0];
              Mutable = v280;
              do
              {
                v158 = *((_QWORD *)&v310 + v157);
                if (!v158)
                  break;
                LODWORD(v266) = v157;
                v159 = vtCreateTexDescGlobalSample((uint64_t)v305, (uint64_t)v125, (uint64_t)v155, v308[0], v158, v312);
                if ((_DWORD)v159)
                {
                  appended = v159;
                  goto LABEL_338;
                }
                ++v157;
              }
              while (v157 != 4);
              v160 = v157 + v299;
              v133 = (uint64_t)cfa;
            }
            else
            {
              if ((_BYTE)v331)
                v161 = 1;
              else
                v161 = v277;
              v162 = vtmtsBuildSource(v305, v308, v161, v133 + 208, v125);
              v160 = v299;
              Mutable = v280;
              if ((_DWORD)v162)
              {
                appended = v162;
                DerivedStorage = (uint64_t)v283;
                goto LABEL_428;
              }
            }
            v270 = v160;
            if (!(_QWORD)v351)
              break;
            v163 = 0;
            v164 = v133 + 1428;
            while (1)
            {
              v165 = *((_QWORD *)&v351 + v163);
              if (!v165)
              {
LABEL_374:
                v133 = (uint64_t)cfa;
                v297 += v163;
                v10 = v278;
                Mutable = v280;
                v8 = allocator;
                goto LABEL_382;
              }
              v166 = v308[0];
              v167 = v349[0];
              v168 = v353;
              v169 = v125 ? CFArrayGetCount(v125) : 0;
              v170 = vtCreateTexDescGlobalWrite((uint64_t)v305, v166, v125, v164, v167, v165, v168, v297 + (int)v163, v163, v169, SDWORD2(v357), SHIDWORD(v357));
              if ((_DWORD)v170)
                break;
              if (++v163 == 4)
                goto LABEL_374;
            }
            appended = v170;
            v10 = v278;
            Mutable = v280;
            v8 = allocator;
LABEL_338:
            v133 = (uint64_t)cfa;
LABEL_339:
            DerivedStorage = (uint64_t)v283;
            if (!v133)
            {
              if (v125)
                goto LABEL_341;
              goto LABEL_342;
            }
LABEL_428:
            CFRelease((CFTypeRef)v133);
            if (v125)
LABEL_341:
              CFRelease(v125);
LABEL_342:

            if ((_DWORD)appended)
              goto LABEL_494;
            if (v315[2] != v326[0] || v315[3] != v326[1])
            {
              MEMORY[0x1940281CC](&VTMTSRenderPassBarrierGetTypeID_sRegisterVTMTSRenderPassBarrierOnce, RegisterVTMTSRenderPassBarrier);
              v154 = (const void *)_CFRuntimeCreateInstance();
              CFArrayAppendValue(Mutable, v154);
              if (v154)
                CFRelease(v154);
              v105 = 0;
              if ((v285 & 1) != 0)
                continue;
            }
            goto LABEL_497;
          }
          if (v125)
            v171 = CFArrayGetCount(v125);
          else
            v171 = 0;
          v349[1] = v171;
          if ((_BYTE)v331)
            v172 = 1;
          else
            v172 = v277;
          v173 = vtmtsBuildDestination(v305, (unsigned int *)v349, v172, (uint64_t)v155, v125, theArray);
          if ((_DWORD)v173)
          {
            appended = v173;
            goto LABEL_339;
          }
LABEL_382:
          if (v125)
            v174 = CFRetain(v125);
          else
            v174 = 0;
          *(_QWORD *)(v133 + 200) = v174;
          vtmtsFixUpProcessingShortcuts((uint64_t)v155, v331);
          *(_QWORD *)(v133 + 348) = v318;
          *(_DWORD *)(v133 + 340) = DWORD2(v317);
          *(_DWORD *)(v133 + 356) = DWORD2(v318);
          *(_QWORD *)(v133 + 1536) = *(_QWORD *)&v356[2];
          *(_DWORD *)(v133 + 1528) = v356[0];
          *(_DWORD *)(v133 + 1544) = v357;

          v175 = (void *)objc_msgSend(v305, "newBufferWithLength:options:", 512, 0);
          *(_QWORD *)(v133 + 64) = v175;
          if (*v302)
            v176 = *v302;
          else
            v176 = CFSTR("com.apple.VideoToolbox.VTMetalTransferSession");
          objc_msgSend(v175, "setLabel:", v176, v266);
          v177 = objc_msgSend(*(id *)(v133 + 64), "contents");
          v178 = v177;
          if (BYTE10(v312))
          {
            v179 = *(unsigned __int8 *)(v133 + 323);
            *(_OWORD *)v332 = v313[0];
            *(_OWORD *)&v332[16] = v313[1];
            v333 = v314;
            setupAffine(0, v179, v332, (int)*(float *)v315, (int)*(float *)&v315[1], v315[2], v315[3], v316, DWORD1(v316), v177);
            *(_BYTE *)(v133 + 320) = 0;
            DerivedStorage = (uint64_t)v283;
            v180 = v287;
          }
          else
          {
            DerivedStorage = (uint64_t)v283;
            v181 = v271 || v283[1302] != 0;
            v180 = v287;
            setupRenderRotationAndCrop(v305, v282, v302, 0, v308[0], v287, v273 == 2, *(unsigned __int8 *)(v133 + 320), v181, *(_BYTE *)(v133 + 323), BYTE1(v320), BYTE2(v320), SHIDWORD(v320), (int)*(float *)v315, (int)*(float *)&v315[1], v315[2], v315[3], v316, SDWORD1(v316),
              SDWORD2(v353),
              SHIDWORD(v353),
              v354,
              SDWORD1(v354),
              SDWORD2(v354),
              SHIDWORD(v354),
              (_QWORD *)(v133 + 40),
              (_QWORD *)(v133 + 48),
              v177,
              (id *)(v133 + 2048));
          }
          v182 = v274 == 2 || v180 == 0;
          v183 = v279;
          if (!v182)
            v183 = 0;
          if (v183)
          {
            *(_DWORD *)v332 = 0;
            if ((_QWORD)v350)
            {
              FigCFDictionaryGetInt32IfPresent();
              v184 = *(_DWORD *)v332;
            }
            else
            {
              v184 = 0;
            }
            setupBackgroundColor(*((float32_t *)&v358 + 1), *((float *)&v358 + 2), *((float *)&v358 + 3), *(float *)&v359, v308[0], *(_DWORD *)(v133 + 316), SDWORD2(v317), SDWORD2(v318), v184, *(void **)(v133 + 64));
            *(_BYTE *)(v133 + 1559) = 1;
            *(_DWORD *)(v178 + 64) = HIDWORD(v319);
          }
          if (v125)
            v185 = CFArrayGetCount(v125);
          else
            v185 = 0;
          if (*(_QWORD *)(v133 + 2048))
            *(_DWORD *)(v133 + 308) = v185++;
          if (*(_QWORD *)(v133 + 2056))
            *(_DWORD *)(v133 + 312) = v185;
          if (*(_BYTE *)(v133 + 320) && !*(_BYTE *)(v133 + 324))
          {
            v186 = 0;
            if (!*(_BYTE *)(v133 + 1508) && DWORD1(v319) == 1)
            {
              v186 = 0;
              if (__PAIR64__(DWORD2(v319), 1) == (DWORD2(v357) | 0x100000000))
                v186 = HIDWORD(v357) == 1;
            }
          }
          else
          {
            v186 = 0;
          }
          if (v273 == 3)
          {
            if (!v186)
            {
              VTMTSRenderPassDescriptorSetFunctionName(v133, CFSTR("VTMTSComputeFunction"));
LABEL_426:
              v187 = v267;
              goto LABEL_427;
            }
            VTMTSRenderPassDescriptorSetFunctionName(v133, CFSTR("VTMTSComputeFunction1x1"));
          }
          else
          {
            if (v273 == 2)
              VTMTSRenderPassDescriptorSetFunctionName(v133, CFSTR("VTMTSFragmentFunction"));
            if (!v186)
              goto LABEL_426;
          }
          v187 = vdupq_n_s64(1uLL);
LABEL_427:
          *(int64x2_t *)(v133 + 128) = v187;
          *(_QWORD *)(v133 + 144) = 1;
          v188 = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v287 == 0), 0x1FuLL)), *(int8x8_t *)((char *)&v354 + 8), *(int8x8_t *)&v354);
          *(_QWORD *)&v189 = v188.i32[0];
          *((_QWORD *)&v189 + 1) = v188.i32[1];
          *(_OWORD *)(v133 + 104) = v189;
          *(_QWORD *)(v133 + 120) = 1;
          HIDWORD(v347) = 1065353216;
          v310 = *(_OWORD *)v337;
          v311 = v338;
          v312 = v339;
          v313[0] = v340;
          *(_OWORD *)v308 = *(_OWORD *)pixelFormat;
          v309 = v336;
          v320 = v348;
          v318 = *(_OWORD *)v346;
          v317 = v345;
          *(_OWORD *)v315 = v343;
          v316 = v344;
          v314 = v342;
          v313[1] = v341;
          v319 = v347;
          CFArrayAppendValue(Mutable, (const void *)v133);
          appended = 0;
          *(_QWORD *)(v133 + 80) = v293;
          *(_QWORD *)(v133 + 88) = v291;
          v299 = v270;
          v291 = 0;
          v293 = 0;
          goto LABEL_428;
        }
LABEL_65:
        v45 = DescriptionWithPixelFormatType;
        v46 = 0;
        v47 = 1;
        goto LABEL_68;
      }
      if (v274 == 2)
      {
        if (Copy)
        {
          if (CFArrayGetCount(Copy) > 1)
          {
            v268 = DescriptionWithPixelFormatType;
            v44 = CFArrayGetCount(Copy);
            LOBYTE(v308[0]) = 0;
            LOBYTE(v349[0]) = 0;
            if (CFArrayGetCount(Copy) >= 1)
              CFArrayGetValueAtIndex(Copy, 0);
            pixelFormat[0] = 0;
            FigCFDictionaryGetInt32IfPresent();
            v190 = pixelFormat[0];
            pixelFormat[0] = 0;
            FigCFDictionaryGetInt32IfPresent();
            getKernelTypeCapabilities(v282, v190, pixelFormat[0], (char *)v308, (char *)v349);
            if (LOBYTE(v349[0]))
              v191 = 3;
            else
              v191 = 2 * (LOBYTE(v308[0]) != 0);
            if (*(_BYTE *)(DerivedStorage + 1289))
              v192 = 2;
            else
              v192 = v191;
            if (LOBYTE(v308[0]) && *(_BYTE *)(DerivedStorage + 1352))
              v192 = 2;
            if (v44 <= 8)
            {
              appended = vtmtsAppendCompositePass(v305, v282, Copy, 0, 0, (unsigned int *)theDict, v268, v192, theArray, (uint64_t)v302, v272, Mutable);
              goto LABEL_493;
            }
            v193 = CFArrayGetCount(Copy);
            *(_QWORD *)&v345 = 0;
            v344 = 0u;
            v343 = 0u;
            v342 = 0u;
            v341 = 0u;
            v340 = 0u;
            v339 = 0u;
            v338 = 0u;
            *(_OWORD *)v337 = 0u;
            v336 = 0u;
            *(_OWORD *)pixelFormat = 0u;
            v304 = v193;
            MutableCopy = CFArrayCreateMutableCopy(v8, v193, Copy);
            v195 = vtAllocateMetalTextureForList(v305, v326[2], v326[3], 115, 0, theArray);
            if ((_DWORD)v195)
            {
              appended = v195;
              v298 = 0;
              v196 = 0;
            }
            else
            {
              v196 = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              if (v196)
              {
                FigCFDictionarySetFloat();
                FigCFDictionarySetInt32();
                FigCFDictionarySetInt32();
                FigCFDictionarySetInt32();
                FigCFDictionarySetInt32();
                FigCFDictionarySetInt32();
                FigCFDictionarySetInt32();
                FigCFDictionarySetInt32();
                FigCFDictionarySetFloat();
                FigCFDictionarySetFloat();
                FigCFDictionarySetFloat();
                FigCFDictionarySetFloat();
                FigCFDictionarySetFloat();
                FigCFDictionarySetFloat();
              }
              v197 = CFDictionaryCreateMutableCopy(v8, 0, theDict[1]);
              if (v197)
                FigCFDictionarySetInt32();
              v298 = v197;
              v198 = v304;
              if (v304 >= 1)
              {
                v300 = v192;
                v199 = 0;
                v201 = 0;
                cfb = v196;
                v202 = v304;
                while (1)
                {
                  v203 = v202;
                  if (v199)
                    CFRelease(v199);
                  v204 = v198;
                  if (v203 == v198)
                    v205 = 8;
                  else
                    v205 = 7;
                  if ((uint64_t)v205 >= (uint64_t)v203)
                    v206 = v203;
                  else
                    v206 = v205;
                  v207 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
                  v199 = v207;
                  v63 = v203 == v204;
                  v208 = v203 != v204;
                  if (!v63)
                    CFArrayAppendValue(v207, cfb);
                  do
                  {
                    v209 = CFArrayGetValueAtIndex(MutableCopy, 0);
                    CFArrayAppendValue(v199, v209);
                    CFArrayRemoveValueAtIndex(MutableCopy, 0);
                    --v206;
                  }
                  while (v206);
                  if (v203 <= v205)
                  {
                    v211 = (char *)theDict;
                    v212 = v268;
                  }
                  else
                  {
                    v343 = v329[0];
                    v344 = v329[1];
                    *(_QWORD *)&v345 = *(_QWORD *)&v329[2];
                    v339 = v325;
                    v340 = *(_OWORD *)v326;
                    v342 = v328;
                    v341 = v327;
                    pixelFormat[1] = HIDWORD(theDict[0]);
                    v336 = v322;
                    v338 = v324;
                    *(_OWORD *)v337 = v323;
                    pixelFormat[0] = 1380411457;
                    *(_QWORD *)&pixelFormat[2] = v298;
                    v210 = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
                    *(_QWORD *)&v336 = v210;
                    *(_QWORD *)v337 = 115;
                    LODWORD(v339) = 2;
                    DWORD1(v343) = getNativeTextureTypeForPixelFormat(pixelFormat[0]);
                    getSubsamplingFromPixelDescription(v210, (_DWORD *)&v343 + 2, (_DWORD *)&v343 + 3);
                    v211 = (char *)pixelFormat;
                    v212 = (const __CFDictionary *)v336;
                  }
                  v200 = (const __CFDictionary *)CFRetain(v212);
                  if (v203 != v304)
                  {
                    *(_QWORD *)(v211 + 156) = 0;
                    *(_QWORD *)(v211 + 148) = 0;
                  }
                  v213 = vtmtsAppendCompositePass(v305, v282, v199, v208, v201, (unsigned int *)v211, v200, v300, theArray, (uint64_t)v302, v272, v280);
                  if ((_DWORD)v213)
                    break;
                  if (MutableCopy)
                    v202 = CFArrayGetCount(MutableCopy);
                  else
                    v202 = 0;
                  Mutable = v280;
                  if (v203 > v205)
                  {
                    MEMORY[0x1940281CC](&VTMTSRenderPassBarrierGetTypeID_sRegisterVTMTSRenderPassBarrierOnce, RegisterVTMTSRenderPassBarrier);
                    v214 = (const void *)_CFRuntimeCreateInstance();
                    CFArrayAppendValue(v280, v214);
                    if (v214)
                      CFRelease(v214);
                  }
                  v198 = v304;
                  v201 = v304 + ~(_DWORD)v202;
                  if (v202 <= 0)
                  {
                    appended = 0;
                    v10 = v278;
                    goto LABEL_482;
                  }
                }
                appended = v213;
                v10 = v278;
                Mutable = v280;
LABEL_482:
                v196 = cfb;
                goto LABEL_483;
              }
              appended = 0;
            }
            v199 = 0;
            v200 = 0;
LABEL_483:
            if (MutableCopy)
              CFRelease(MutableCopy);
            if (v199)
              CFRelease(v199);
            if (v200)
              CFRelease(v200);
            if (v196)
              CFRelease(v196);
            DerivedStorage = (uint64_t)v283;
            if (v298)
              CFRelease(v298);
LABEL_493:
            if (!(_DWORD)appended)
              goto LABEL_497;
            goto LABEL_494;
          }
          goto LABEL_61;
        }
        goto LABEL_65;
      }
      v48 = FigSignalErrorAt();
      if ((_DWORD)v48)
      {
        appended = v48;
        goto LABEL_569;
      }
LABEL_497:
      if (Mutable)
      {
        if (CFArrayGetCount(Mutable) >= 1)
        {
          v215 = 0;
          v216 = RegisterVTMTSRenderPassDescriptor;
          do
          {
            v217 = CFArrayGetValueAtIndex(Mutable, v215);
            if (!v217)
              goto LABEL_545;
            v218 = v217;
            v219 = CFGetTypeID(v217);
            MEMORY[0x1940281CC](&VTMTSRenderPassDescriptorGetTypeID_sRegisterVTMTSRenderPassDescriptorOnce, v216);
            if (v219 != sVTMTSRenderPassDescriptorID)
              goto LABEL_545;
            v220 = (const __CFArray *)*((_QWORD *)v218 + 25);
            if (v220)
            {
              v221 = CFArrayGetCount(v220);
              if (v221)
              {
                v222 = v221;

                v223 = (void *)objc_msgSend(*(id *)(DerivedStorage + 1464), "newBufferWithLength:options:", 16 * v222, 0);
                *((_QWORD *)v218 + 9) = v223;
                if (*(_QWORD *)(DerivedStorage + 1344))
                  v224 = *(const __CFString **)(DerivedStorage + 1344);
                else
                  v224 = CFSTR("com.apple.VideoToolbox.VTMetalTransferSession");
                objc_msgSend(v223, "setLabel:", v224, v266);
              }
            }
            v225 = *(void **)(DerivedStorage + 1464);
            v226 = *(const __CFString **)(DerivedStorage + 1344);
            v227 = *(void **)(DerivedStorage + 1600);
            v228 = *(_BYTE *)(DerivedStorage + 1317);
            *((_BYTE *)v218 + 1556) = 0;
            *((_BYTE *)v218 + 1557) = v228;
            v229 = *((_DWORD *)v218 + 4);
            if (v229 == 3)
            {

              *(_QWORD *)pixelFormat = 0;
              *(_QWORD *)v308 = 0;
              if (*((_DWORD *)v218 + 4) == 3)
              {
                loadMTLFunctionConstants((unsigned int *)v218 + 52, (id *)pixelFormat);
                v235 = *(id *)pixelFormat;
                v236 = (void *)objc_msgSend(v227, "newFunctionWithName:constantValues:error:", *((_QWORD *)v218 + 3), *(_QWORD *)pixelFormat, v308);
                v237 = v236;
                if (v236)
                {
                  if (v226)
                    v238 = v226;
                  else
                    v238 = CFSTR("com.apple.VideoToolbox.VTMetalTransferSession");
                  objc_msgSend(v236, "setLabel:", v238, v266);
                  v239 = (void *)objc_msgSend(v225, "newComputePipelineStateWithFunction:error:", v237, v308);
                  v240 = v239;
                  if (!*(_QWORD *)v308)
                  {
                    v241 = objc_msgSend(v239, "threadExecutionWidth");
                    v242 = objc_msgSend(v240, "maxTotalThreadsPerThreadgroup");
                    appended = 0;
                    v243 = (v241
                          + (unint64_t)(*((_QWORD *)v218 + 13) + *((_QWORD *)v218 + 16) - 1)
                          / *((_QWORD *)v218 + 16)
                          - 1)
                         / v241;
                    v244 = v242 / v241
                         + (unint64_t)(*((_QWORD *)v218 + 14) + *((_QWORD *)v218 + 17) - 1)
                         / *((_QWORD *)v218 + 17)
                         - 1;
                    *((_QWORD *)v218 + 19) = v241;
                    *((_QWORD *)v218 + 20) = v242 / v241;
                    *((_QWORD *)v218 + 21) = 1;
                    *((_QWORD *)v218 + 22) = v243;
                    *((_QWORD *)v218 + 23) = v244 / (v242 / v241);
                    *((_QWORD *)v218 + 24) = 1;
                    *((_QWORD *)v218 + 7) = v240;
                    goto LABEL_524;
                  }
                }
                else
                {
                  v240 = 0;
                }
                appended = 4294954394;
              }
              else
              {
                appended = FigSignalErrorAt();
                v235 = 0;
                v237 = 0;
LABEL_524:
                v240 = 0;
              }

              goto LABEL_544;
            }
            if (v229 != 2)
              goto LABEL_545;

            *(_QWORD *)pixelFormat = 0;
            *(_QWORD *)v308 = 0;
            if (*((_DWORD *)v218 + 4) != 2)
            {
              appended = FigSignalErrorAt();
              v306 = 0;
              v232 = 0;
              v245 = 0;
              v235 = 0;
              v231 = 0;
              goto LABEL_543;
            }
            loadMTLFunctionConstants((unsigned int *)v218 + 52, (id *)pixelFormat);
            v230 = *(void **)pixelFormat;
            v231 = (void *)objc_msgSend(v227, "newFunctionWithName:constantValues:error:", CFSTR("VTMTSVertexFunction"), *(_QWORD *)pixelFormat, v308);
            v232 = v231;
            v306 = v230;
            if (v231)
            {
              if (!v226)
                v226 = CFSTR("com.apple.VideoToolbox.VTMetalTransferSession");
              objc_msgSend(v231, "setLabel:", v226, v266);
              v233 = *((_DWORD *)v218 + 376);
              if (v233 == 1)
              {
                v234 = CFSTR("VTMTSFragmentFunction");
              }
              else
              {
                if (v233 != 2)
                {
                  v245 = 0;
                  v235 = 0;
                  v231 = 0;
                  goto LABEL_541;
                }
                v234 = CFSTR("VTMTSFragmentFunctionf");
              }
              v231 = (void *)objc_msgSend(v227, "newFunctionWithName:constantValues:error:", v234, v230, v308);
              v245 = v231;
              if (v231)
              {
                objc_msgSend(v231, "setLabel:", v226);
                v235 = objc_alloc_init(MEMORY[0x1E0CC6B68]);
                objc_msgSend(v235, "setVertexFunction:", v232);
                objc_msgSend(v235, "setFragmentFunction:", v245);
                v246 = (const __CFArray *)*((_QWORD *)v218 + 25);
                if (v246)
                {
                  v247 = 0;
                  do
                  {
                    if (CFArrayGetCount(v246) <= v247)
                      break;
                    v248 = CFArrayGetValueAtIndex(*((CFArrayRef *)v218 + 25), v247);
                    if (*((_DWORD *)v248 + 16) == 1)
                    {
                      v249 = v216;
                      v250 = v248[4];
                      v251 = (void *)objc_msgSend((id)objc_msgSend(v235, "colorAttachments"), "objectAtIndexedSubscript:", *((unsigned int *)v248 + 11));
                      v252 = v250;
                      v216 = v249;
                      objc_msgSend(v251, "setPixelFormat:", v252);
                    }
                    ++v247;
                    v246 = (const __CFArray *)*((_QWORD *)v218 + 25);
                  }
                  while (v246);
                }
                v231 = (void *)objc_msgSend(v225, "newRenderPipelineStateWithDescriptor:error:", v235, v308);
                if (*(_QWORD *)v308)
                {
                  appended = 4294954394;
                }
                else
                {
                  appended = 0;
                  *((_QWORD *)v218 + 4) = v231;
                  v231 = 0;
                }
                goto LABEL_543;
              }
            }
            else
            {
              v245 = 0;
            }
            v235 = 0;
LABEL_541:
            appended = 4294954394;
LABEL_543:

LABEL_544:
            Copy = v275;
            DerivedStorage = (uint64_t)v283;
            Mutable = v280;
            if ((_DWORD)appended)
            {
              v10 = v278;
              goto LABEL_569;
            }
LABEL_545:
            ++v215;
          }
          while (CFArrayGetCount(Mutable) > v215);
        }
        v253 = *(const void **)(DerivedStorage + 1616);
        *(_QWORD *)(DerivedStorage + 1616) = Mutable;
        CFRetain(Mutable);
        if (v253)
          CFRelease(v253);
        v254 = *(const void **)(DerivedStorage + 32);
        *(_QWORD *)(DerivedStorage + 32) = Copy;
        v10 = v278;
        if (Copy)
          CFRetain(Copy);
        if (v254)
          CFRelease(v254);
        v255 = *(const void **)(DerivedStorage + 40);
        *(_QWORD *)(DerivedStorage + 40) = v278;
        if (v278)
          CFRetain(v278);
        if (v255)
          CFRelease(v255);
      }
      else
      {
        v256 = *(void **)(DerivedStorage + 1560);
        *(_QWORD *)(DerivedStorage + 1560) = 0;

        v257 = *(void **)(DerivedStorage + 1568);
        *(_QWORD *)(DerivedStorage + 1568) = 0;

        v258 = *(void **)(DerivedStorage + 1576);
        *(_QWORD *)(DerivedStorage + 1576) = 0;

        v259 = *(void **)(DerivedStorage + 1584);
        *(_QWORD *)(DerivedStorage + 1584) = 0;

        v260 = *(void **)(DerivedStorage + 1504);
        *(_QWORD *)(DerivedStorage + 1504) = 0;

        v261 = *(void **)(DerivedStorage + 1488);
        *(_QWORD *)(DerivedStorage + 1488) = 0;

        v262 = *(void **)(DerivedStorage + 1496);
        *(_QWORD *)(DerivedStorage + 1496) = 0;

        v263 = *(const void **)(DerivedStorage + 32);
        *(_QWORD *)(DerivedStorage + 32) = Copy;
        if (Copy)
          CFRetain(Copy);
        if (v263)
          CFRelease(v263);
        v264 = *(const void **)(DerivedStorage + 40);
        *(_QWORD *)(DerivedStorage + 40) = v10;
        if (v10)
          CFRetain(v10);
        if (v264)
          CFRelease(v264);
        memcpy((void *)(DerivedStorage + 184), __src, 0x450uLL);
      }
      appended = 0;
      *(_BYTE *)(DerivedStorage + 64) = 1;
      goto LABEL_569;
    }
LABEL_25:
    pixelFormat[0] = 0;
    getpid();
    if (proc_can_use_foreground_hw() || pixelFormat[0] == 13)
    {
      v27 = *(void **)(DerivedStorage + 1480);
      if (!a4)
      {
        v28 = 1;
LABEL_30:
        objc_msgSend(v27, "setGPUPriority:", v28);
        *(_BYTE *)(DerivedStorage + 1632) = a4;
        if (!Copy)
          goto LABEL_39;
        goto LABEL_31;
      }
    }
    else
    {
      v27 = *(void **)(DerivedStorage + 1480);
    }
    v28 = 2;
    goto LABEL_30;
  }
  *(_QWORD *)pixelFormat = 0;
  v14 = CMBaseObjectGetDerivedStorage();
  v15 = v14;
  v16 = *(void **)(v14 + 1464);
  if ((v16
     || (vtmtsCreateDefaultDevice((_QWORD *)(v14 + 1464), (_BYTE *)(v14 + 1472)), (v16 = *(void **)(v15 + 1464)) != 0))
    && (CVMetalTextureCacheCreate(v8, 0, v16, 0, (CVMetalTextureCacheRef *)(v15 + 48)), *(_QWORD *)(v15 + 48)))
  {
    v17 = objc_alloc_init(MEMORY[0x1E0CC6B80]);
    v18 = v17;
    if (v17)
    {
      *(_QWORD *)(v15 + 144) = 0;
      objc_msgSend(v17, "setMagFilter:", 1);
      objc_msgSend(v18, "setMinFilter:", 1);
      objc_msgSend(v18, "setNormalizedCoordinates:", 0);
      v19 = objc_msgSend(*(id *)(v15 + 1464), "newSamplerStateWithDescriptor:", v18);
      *(_QWORD *)(v15 + 160) = v19;
      if (v19)
      {
        objc_msgSend(v18, "setNormalizedCoordinates:", 1);
        v20 = objc_msgSend(*(id *)(v15 + 1464), "newSamplerStateWithDescriptor:", v18);
        *(_QWORD *)(v15 + 176) = v20;
        if (v20)
        {
          objc_msgSend(v18, "setMagFilter:", 0);
          objc_msgSend(v18, "setMinFilter:", 0);
          objc_msgSend(v18, "setNormalizedCoordinates:", 0);
          v21 = objc_msgSend(*(id *)(v15 + 1464), "newSamplerStateWithDescriptor:", v18);
          *(_QWORD *)(v15 + 152) = v21;
          if (v21)
          {
            objc_msgSend(v18, "setNormalizedCoordinates:", 1);
            v22 = objc_msgSend(*(id *)(v15 + 1464), "newSamplerStateWithDescriptor:", v18);
            *(_QWORD *)(v15 + 168) = v22;
            if (v22)
            {
              *(_QWORD *)(v15 + 1592) = 0;
              v23 = (void *)objc_msgSend(*(id *)(v15 + 1464), "newDefaultLibraryWithBundle:error:", objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", objc_opt_class()), pixelFormat);
              *(_QWORD *)(v15 + 1600) = v23;
              if (*(_QWORD *)(v15 + 1344))
                v24 = *(const __CFString **)(v15 + 1344);
              else
                v24 = CFSTR("com.apple.VideoToolbox.VTMetalTransferSession");
              objc_msgSend(v23, "setLabel:", v24);
              v25 = (void *)objc_msgSend(*(id *)(v15 + 1464), "newCommandQueue");
              *(_QWORD *)(v15 + 1480) = v25;
              if (*(_QWORD *)(v15 + 1344))
                v26 = *(const __CFString **)(v15 + 1344);
              else
                v26 = CFSTR("com.apple.VideoToolbox.VTMetalTransferSession");
              objc_msgSend(v25, "setLabel:", v26);

              if (*(_QWORD *)(DerivedStorage + 1480))
                goto LABEL_25;
LABEL_577:
              v33 = FigSignalErrorAt();
              goto LABEL_578;
            }
          }
        }
      }
    }
  }
  else
  {
    v18 = 0;
  }

  Mutable = 0;
  appended = 4294954392;
LABEL_569:
  if (Copy)
    CFRelease(Copy);
  if (v10)
    CFRelease(v10);
  if (Mutable)
    CFRelease(Mutable);
  return appended;
}

uint64_t vtCheckTextureLimits(void *a1, uint64_t a2)
{
  if (a1 && a2)
  {
    FigCFDictionaryGetInt32IfPresent();
    FigCFDictionaryGetInt32IfPresent();
    objc_msgSend(a1, "maxTextureWidth2D");
    objc_msgSend(a1, "maxTextureHeight2D");
  }
  return 0;
}

uint64_t getNativeTextureTypeForPixelFormat(int a1)
{
  uint64_t result;
  int v3;
  unsigned __int16 v4;
  unsigned __int16 v5;
  int v6;
  unsigned int v7;

  result = 0;
  if (a1 > 1380410944)
  {
    if (a1 > 2016567666)
    {
      if (a1 <= 2021078067)
      {
        if (a1 > 2019963439)
        {
          if (a1 > 2019964015)
          {
            if (a1 == 2019964016 || a1 == 2021077552)
              return 5;
            v3 = 2021077554;
          }
          else
          {
            if (a1 == 2019963440 || a1 == 2019963442)
              return 5;
            v3 = 2019963956;
          }
        }
        else
        {
          if (a1 > 2016687155)
          {
            if (a1 == 2016687156 || a1 == 2016687216)
              return 5;
            v5 = 24947;
          }
          else
          {
            if (a1 == 2016567667 || a1 == 2016686640)
              return 5;
            v5 = 12850;
          }
          v3 = v5 | 0x78340000;
        }
        goto LABEL_132;
      }
      if (a1 > 2084070959)
      {
        if (a1 <= 2088265263)
        {
          if (a1 == 2084070960 || a1 == 2084075056)
            return 5;
          v3 = 2084718401;
        }
        else
        {
          if (a1 > 2088269359)
          {
            if (a1 == 2088269360)
              return 5;
            v4 = 30258;
          }
          else
          {
            if (a1 == 2088265264)
              return 5;
            v4 = 26162;
          }
          v3 = v4 | 0x7C780000;
        }
        goto LABEL_132;
      }
      if (a1 <= 2033463605)
      {
        if (a1 == 2021078068 || a1 == 2021078128)
          return 5;
        v3 = 2033463352;
        goto LABEL_132;
      }
      if (a1 != 2033463606)
      {
        if (a1 == 2037741158)
          return 5;
        v3 = 2037741171;
        goto LABEL_132;
      }
    }
    else if (a1 <= 1886859823)
    {
      if (a1 > 1882468911)
      {
        if (a1 > 1885745711)
        {
          if (a1 == 1885745712 || a1 == 1885745714)
            return 5;
          v3 = 1885746228;
        }
        else
        {
          if (a1 == 1882468912 || a1 == 1882468914)
            return 5;
          v3 = 1882469428;
        }
        goto LABEL_132;
      }
      if (a1 <= 1647719520)
      {
        if (a1 != 1380410945 && a1 != 1380411457)
        {
          v3 = 1647534392;
          goto LABEL_132;
        }
        return 1;
      }
      if (a1 != 1647719521)
      {
        if (a1 == 1815162994)
          return 5;
        if (a1 != 1815491698)
          return result;
      }
    }
    else
    {
      if (a1 <= 1949458802)
      {
        if (a1 > 1915892015)
        {
          if (a1 == 1915892016 || a1 == 1932681587)
            return 5;
          v3 = 1932812659;
        }
        else
        {
          if (a1 == 1886859824 || a1 == 1886859826)
            return 5;
          v3 = 1886860340;
        }
        goto LABEL_132;
      }
      if (a1 <= 1983000885)
      {
        if (a1 == 1949458803 || a1 == 1949589875)
          return 5;
        v3 = 1982882104;
        goto LABEL_132;
      }
      if (a1 > 1983144247)
      {
        if (a1 == 1983144248)
          return 5;
        v3 = 1999843442;
        goto LABEL_132;
      }
      if (a1 != 1983000886)
      {
        v3 = 1983013176;
        goto LABEL_132;
      }
    }
    return 4;
  }
  if (a1 > 758670895)
  {
    if (a1 > 796423727)
    {
      if (a1 > 875704933)
      {
        if (a1 > 875836533)
        {
          if (a1 == 875836534 || a1 == 1111970369)
            return 5;
          v3 = 1378955371;
        }
        else
        {
          if (a1 == 875704934 || a1 == 875704950)
            return 5;
          v3 = 875836518;
        }
      }
      else if (a1 > 846624120)
      {
        if (a1 == 846624121 || a1 == 875704422)
          return 5;
        v3 = 875704438;
      }
      else
      {
        if (a1 == 796423728 || a1 == 796423730)
          return 5;
        v3 = 846624102;
      }
    }
    else if (a1 > 762869297)
    {
      if (a1 > 792872768)
      {
        if (a1 == 792872769 || a1 == 796419632)
          return 5;
        v3 = 796419634;
      }
      else
      {
        if (a1 == 762869298 || a1 == 792225328)
          return 5;
        v3 = 792229424;
      }
    }
    else if (a1 > 762865199)
    {
      if (a1 == 762865200 || a1 == 762865202)
        return 5;
      v3 = 762869296;
    }
    else
    {
      if (a1 == 758670896 || a1 == 758674992)
        return 5;
      v3 = 759318337;
    }
    goto LABEL_132;
  }
  if (a1 <= 644232303)
  {
    if (a1 <= 641234479)
    {
      if (a1 > 640955503)
      {
        if ((a1 - 641230384) > 4 || ((1 << (a1 - 48)) & 0x15) == 0)
        {
          v3 = 640955504;
          goto LABEL_132;
        }
        return 5;
      }
      if (a1 == 32 || a1 == 590898736)
        return 5;
      v3 = 590902832;
LABEL_132:
      if (a1 != v3)
        return result;
      return 5;
    }
    if (a1 <= 641877824)
    {
      v6 = -641234480;
      goto LABEL_64;
    }
    if (a1 == 641877825)
      return 5;
    if (a1 != 642934849)
    {
      v3 = 643969848;
      goto LABEL_132;
    }
    return 1;
  }
  if (a1 <= 645424687)
  {
    if (a1 > 645279799)
    {
      if (a1 == 645279800)
        return 5;
      v3 = 645346162;
    }
    else
    {
      if (a1 == 644232304)
        return 5;
      v3 = 644624754;
    }
    goto LABEL_132;
  }
  if ((a1 - 645424688) <= 4 && ((1 << (a1 - 48)) & 0x15) != 0
    || (a1 - 645428784) <= 4 && ((1 << (a1 - 48)) & 0x15) != 0)
  {
    return 5;
  }
  v6 = -645429040;
LABEL_64:
  v7 = a1 + v6;
  if (v7 <= 4 && ((1 << v7) & 0x15) != 0)
    return 5;
  return result;
}

uint64_t getSubsamplingFromPixelDescription(const __CFDictionary *a1, _DWORD *a2, _DWORD *a3)
{
  int IntIfPresent;
  uint64_t result;
  const __CFArray *v9;
  CFTypeID v10;
  CFIndex i;
  const void *ValueAtIndex;
  CFTypeID v13;

  IntIfPresent = FigCFDictionaryGetIntIfPresent();
  result = FigCFDictionaryGetIntIfPresent();
  if (a1)
  {
    if (!IntIfPresent && (_DWORD)result == 0)
    {
      result = (uint64_t)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E0CA91B0]);
      if (result)
      {
        v9 = (const __CFArray *)result;
        v10 = CFGetTypeID((CFTypeRef)result);
        result = CFArrayGetTypeID();
        if (v10 == result)
        {
          result = CFArrayGetCount(v9);
          if (result >= 1)
          {
            for (i = 0; i < result; ++i)
            {
              ValueAtIndex = CFArrayGetValueAtIndex(v9, i);
              if (ValueAtIndex)
              {
                v13 = CFGetTypeID(ValueAtIndex);
                if (v13 == CFDictionaryGetTypeID())
                {
                  FigCFDictionaryGetIntIfPresent();
                  FigCFDictionaryGetIntIfPresent();
                }
              }
              result = CFArrayGetCount(v9);
            }
          }
        }
      }
    }
  }
  *a2 = 1;
  *a3 = 1;
  return result;
}

const __CFDictionary *getCharacteristicsFromPixelDescription(const __CFDictionary *theDict, uint64_t a2, uint64_t a3, uint64_t a4, int *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFDictionary *v14;
  int v15;

  if (theDict)
  {
    v14 = theDict;
    if (a3)
      theDict = (const __CFDictionary *)FigCFDictionaryGetBooleanIfPresent();
    if (a2)
      theDict = (const __CFDictionary *)FigCFDictionaryGetBooleanIfPresent();
    if (a4)
      theDict = (const __CFDictionary *)FigCFDictionaryGetBooleanIfPresent();
    if (a5)
    {
      CFDictionaryGetValue(v14, (const void *)*MEMORY[0x1E0CA9120]);
      theDict = (const __CFDictionary *)FigCFEqual();
      if ((_DWORD)theDict)
      {
        v15 = 1;
      }
      else
      {
        theDict = (const __CFDictionary *)FigCFEqual();
        if ((_DWORD)theDict)
          v15 = 3;
        else
          v15 = 2;
      }
      *a5 = v15;
    }
    if (a6)
      theDict = (const __CFDictionary *)FigCFDictionaryGetBooleanIfPresent();
    if (a7)
      theDict = (const __CFDictionary *)FigCFDictionaryGetBooleanIfPresent();
    if (a8)
      return (const __CFDictionary *)FigCFDictionaryGetInt32IfPresent();
  }
  return theDict;
}

void vtmtsLoadColorFunctionConstantValues(const __CFDictionary *a1, const __CFDictionary *a2, CFDictionaryRef theDict, const __CFDictionary *a4, int *a5, int *a6, int *a7, int *a8, int *a9, int *a10, int *a11, int *a12)
{
  const void *Value;
  const void *v17;
  const void *v18;
  _BOOL4 v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  const void *v28;
  const void *v29;
  const void *v30;
  const void *v31;
  const void *v32;
  unint64_t v33;
  const void *v34;
  const void *v35;
  const __CFString *v36;
  const __CFDictionary *v37;
  const __CFString *v38;
  const __CFString *v39;
  const __CFDictionary *v40;
  const __CFString *v41;
  int *v42;
  CFStringRef v43;
  const void *v44;
  const void *v45;
  unint64_t v46;
  CFStringRef yCbCrMatrixString;
  CFStringRef v50;
  __int16 v51;
  __int16 v52;
  __int16 v53;
  __CFDictionary *v54;
  __CFDictionary *v55;

  v54 = 0;
  v55 = 0;
  v53 = 0;
  v52 = 0;
  v51 = 0;
  v50 = 0;
  yCbCrMatrixString = 0;
  getCharacteristicsFromPixelDescription(theDict, (uint64_t)&v53 + 1, (uint64_t)&v52 + 1, (uint64_t)&v51 + 1, a8, 0, 0, 0);
  getCharacteristicsFromPixelDescription(a4, (uint64_t)&v53, (uint64_t)&v52, (uint64_t)&v51, a12, 0, 0, 0);
  Value = 0;
  v17 = (const void *)*MEMORY[0x1E0CA8EE8];
  if (a1 && v17)
    Value = CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E0CA8EE8]);
  v18 = 0;
  v19 = (HIBYTE(v52) | HIBYTE(v51)) != 0;
  if (a2 && v17)
    v18 = CFDictionaryGetValue(a2, v17);
  VTCreateYCbCrCFStringsAndProvideDefaults(Value, v19, v18, (v52 | v51) != 0, &v50, &yCbCrMatrixString);
  v20 = 0;
  v21 = (const void *)*MEMORY[0x1E0CA8CD8];
  if (a1 && v21)
    v20 = CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E0CA8CD8]);
  v22 = 0;
  v23 = (const void *)*MEMORY[0x1E0CA8E40];
  v42 = a7;
  if (a1 && v23)
    v22 = CFDictionaryGetValue(a1, v23);
  v24 = 0;
  v25 = (const void *)*MEMORY[0x1E0CA8D68];
  if (a1 && v25)
    v24 = CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E0CA8D68]);
  v45 = v24;
  v26 = 0;
  v27 = (const void *)*MEMORY[0x1E0CA8E98];
  v46 = (unint64_t)v22;
  if (a1 && v27)
    v26 = CFDictionaryGetValue(a1, v27);
  v28 = 0;
  v29 = (const void *)*MEMORY[0x1E0CA8E48];
  v44 = v26;
  if (a1 && v29)
    v28 = CFDictionaryGetValue(a1, v29);
  v30 = 0;
  v43 = v50;
  if (a2 && v21)
    v30 = CFDictionaryGetValue(a2, v21);
  v31 = 0;
  if (a2 && v23)
    v31 = CFDictionaryGetValue(a2, v23);
  v32 = 0;
  v33 = (unint64_t)v20;
  if (a2 && v25)
    v32 = CFDictionaryGetValue(a2, v25);
  v34 = 0;
  if (a2 && v27)
    v34 = CFDictionaryGetValue(a2, v27);
  v35 = 0;
  if (a2 && v29)
    v35 = CFDictionaryGetValue(a2, v29);
  VTCreateColorAttachments(v33, v46, v45, v44, v28, v43, 0, (unint64_t)v30, (unint64_t)v31, v32, v34, (uint64_t)v35, 0, 0, 0, &v55, &v54);
  v36 = 0;
  v37 = v55;
  if (v25 && v55)
  {
    v36 = (const __CFString *)CFDictionaryGetValue(v55, v25);
    v37 = v55;
  }
  v38 = 0;
  if (v27 && v37)
    v38 = (const __CFString *)CFDictionaryGetValue(v37, v27);
  v39 = 0;
  v40 = v54;
  if (v25 && v54)
  {
    v39 = (const __CFString *)CFDictionaryGetValue(v54, v25);
    v40 = v54;
  }
  v41 = 0;
  if (v27 && v40)
    v41 = (const __CFString *)CFDictionaryGetValue(v40, v27);
  if (a5)
    *a5 = CVColorPrimariesGetIntegerCodePointForString(v36);
  if (a6)
    *a6 = CVTransferFunctionGetIntegerCodePointForString(v38);
  if (v42)
    *v42 = CVYCbCrMatrixGetIntegerCodePointForString(v50);
  if (a9)
    *a9 = CVColorPrimariesGetIntegerCodePointForString(v39);
  if (a10)
    *a10 = CVTransferFunctionGetIntegerCodePointForString(v41);
  if (a11)
    *a11 = CVYCbCrMatrixGetIntegerCodePointForString(yCbCrMatrixString);
  if (v55)
    CFRelease(v55);
  if (v54)
    CFRelease(v54);
  if (v50)
    CFRelease(v50);
  if (yCbCrMatrixString)
    CFRelease(yCbCrMatrixString);
}

uint64_t vtmtsGetSrcCropDimensions(uint64_t result, _DWORD *a2, _DWORD *a3, int *a4, int *a5, int *a6, int *a7, uint64_t a8, _BYTE *a9)
{
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;

  if (a6)
    v16 = *a6;
  else
    v16 = 0;
  v23 = v16;
  if (a7)
    v17 = *a7;
  else
    v17 = 0;
  v22 = v17;
  v18 = 0;
  v19 = 0;
  if (a4)
    v19 = *a4;
  v21 = v19;
  if (a5)
    v18 = *a5;
  v20 = v18;
  if (result)
  {
    FigCFDictionaryGetInt32IfPresent();
    FigCFDictionaryGetInt32IfPresent();
    FigCFDictionaryGetInt32IfPresent();
    FigCFDictionaryGetInt32IfPresent();
    FigCFDictionaryGetFloat32IfPresent();
    result = FigCFDictionaryGetFloat32IfPresent();
    if (a2)
      *a2 = v23;
    if (a3)
      *a3 = v22;
    if (a4)
      *a4 = v21;
    if (a5)
      *a5 = v20;
    if (a6)
      *a6 = v23;
    if (a7)
      *a7 = v22;
    if (a8)
    {
      if (a9)
      {
        *a9 = FigCFDictionaryGetCGFloatIfPresent();
        *a9 = FigCFDictionaryGetCGFloatIfPresent();
        *a9 = FigCFDictionaryGetCGFloatIfPresent();
        *a9 = FigCFDictionaryGetCGFloatIfPresent();
        *a9 = FigCFDictionaryGetCGFloatIfPresent();
        result = FigCFDictionaryGetCGFloatIfPresent();
        *a9 = result;
      }
    }
  }
  return result;
}

uint64_t vtmtsAppendCompositePass(void *a1, unsigned __int8 *a2, const __CFArray *a3, int a4, int a5, unsigned int *a6, const __CFDictionary *a7, int a8, const __CFArray *a9, uint64_t a10, _BYTE *a11, __CFArray *a12)
{
  void *v15;
  const void *v16;
  const __CFString *v17;
  uint64_t VTMTSRenderPass;
  _DWORD *v19;
  __CFArray *Mutable;
  unsigned int Count;
  void *v22;
  const __CFString *v23;
  void *v24;
  CFIndex v25;
  _DWORD *v26;
  const void *ValueAtIndex;
  const __CFDictionary *DescriptionWithPixelFormatType;
  unsigned __int16 v29;
  const void *v30;
  _DWORD *v31;
  const __CFDictionary *v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  CFIndex v42;
  _DWORD *v43;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v52;
  id *v53;
  _QWORD *v54;
  _QWORD *v55;
  const __CFArray *v58;
  _QWORD *v59;
  _QWORD *v60;
  const void *v61;
  unsigned int *v62;
  uint64_t v65;
  int v66;
  const __CFArray *theArray;
  _DWORD *v69;
  uint64_t v70;
  _OWORD v71[3];
  int v72[4];
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  int v83[4];
  __int128 v84;
  uint64_t v85;
  BOOL v86;

  v15 = (void *)objc_msgSend(a1, "newBufferWithLength:options:", 4, 0);
  v16 = v15;
  if (*(_QWORD *)a10)
    v17 = *(const __CFString **)a10;
  else
    v17 = CFSTR("com.apple.VideoToolbox.VTMetalTransferSession");
  objc_msgSend(v15, "setLabel:", v17);
  v86 = 0;
  VTMTSRenderPass = vtCreateVTMTSRenderPass();
  v19 = (_DWORD *)VTMTSRenderPass;
  *(_DWORD *)(VTMTSRenderPass + 16) = a8;
  v66 = a8;
  if (a8 == 3)
    VTMTSRenderPassDescriptorSetFunctionName(VTMTSRenderPass, CFSTR("VTMTSComputeComposite"));
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  *((_BYTE *)v19 + 323) = a11[15];
  theArray = Mutable;
  if (a3)
  {
    Count = CFArrayGetCount(a3);
    v19[387] = Count;
    if (Count >= 9)
    {
      v41 = FigSignalErrorAt();
      goto LABEL_65;
    }
    v62 = v19 + 387;
  }
  else
  {
    v62 = v19 + 387;
    v19[387] = 0;
  }
  v70 = (uint64_t)(v19 + 52);

  v22 = (void *)objc_msgSend(a1, "newBufferWithLength:options:", 512, 0);
  *((_QWORD *)v19 + 8) = v22;
  if (*(_QWORD *)a10)
    v23 = *(const __CFString **)a10;
  else
    v23 = CFSTR("com.apple.VideoToolbox.VTMetalTransferSession");
  v24 = a1;
  objc_msgSend(v22, "setLabel:", v23);
  v65 = objc_msgSend(*((id *)v19 + 8), "contents");
  if (v19[387])
  {
    v25 = 0;
    v60 = v19 + 87;
    v59 = v19 + 514;
    v54 = v19 + 12;
    v55 = v19 + 10;
    v53 = (id *)(v19 + 512);
    v26 = (_DWORD *)(v65 + 64);
    v58 = a3;
    v69 = v19;
    v61 = v16;
    do
    {
      *(_OWORD *)v83 = 0u;
      v84 = 0u;
      v85 = 0;
      v81 = 0u;
      v82 = 0u;
      v79 = 0u;
      v80 = 0u;
      v77 = 0u;
      v78 = 0u;
      v75 = 0u;
      v76 = 0u;
      v73 = 0u;
      v74 = 0u;
      *(_OWORD *)v72 = 0u;
      HIDWORD(v84) = 1065353216;
      ValueAtIndex = CFArrayGetValueAtIndex(a3, v25);
      *(_QWORD *)&v72[2] = ValueAtIndex;
      WORD4(v76) = 256;
      *((_QWORD *)&v81 + 1) = v24;
      *(_QWORD *)&v82 = a11;
      DWORD1(v76) = v66;
      DWORD2(v73) = v25;
      LODWORD(v71[0]) = 0;
      FigCFDictionaryGetInt32IfPresent();
      v72[0] = v71[0];
      FigCFDictionaryGetFloatIfPresent();
      DescriptionWithPixelFormatType = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
      if (v72[0] > 1380411456)
      {
        if (v72[0] == 1815162994)
          goto LABEL_21;
        v29 = 26689;
      }
      else
      {
        if (v72[0] == 1111970369)
          goto LABEL_21;
        v29 = 26177;
      }
      if (v72[0] != (v29 | 0x52470000))
        goto LABEL_57;
LABEL_21:
      v83[3] = 2;
      getSubsamplingFromPixelDescription(DescriptionWithPixelFormatType, (_DWORD *)&v84 + 1, (_DWORD *)&v84 + 2);
      vtmtsGetSrcCropDimensions((uint64_t)ValueAtIndex, (_DWORD *)&v80 + 2, (_DWORD *)&v80 + 3, (int *)&v80, (int *)&v80 + 1, (int *)&v81, (int *)&v81 + 1, (uint64_t)&v77, (_BYTE *)&v76 + 10);
      if (a3)
      {
        v30 = v61;
        v31 = v26;
        if (CFArrayGetCount(a3) <= v25)
          v32 = 0;
        else
          v32 = (const __CFDictionary *)CFArrayGetValueAtIndex(a3, v25);
      }
      else
      {
        v31 = v26;
        v32 = 0;
        v30 = v61;
      }
      vtmtsLoadColorFunctionConstantValues(v32, *((const __CFDictionary **)a6 + 1), DescriptionWithPixelFormatType, a7, &v83[1], v83, (int *)&v82 + 2, &v83[2], (int *)a6 + 31, (int *)a6 + 30, (int *)a6 + 28, (int *)a6 + 32);
      *v60 = *(_QWORD *)v83;
      v33 = v72[0];
      v69[85] = DWORD2(v82);
      v34 = v83[2];
      v69[89] = v83[2];
      v35 = a6[31];
      v69[385] = v35;
      v36 = a6[30];
      v69[384] = v36;
      v37 = a6[28];
      v69[382] = v37;
      v38 = a6[32];
      v69[386] = v38;
      v16 = v30;
      v52 = (uint64_t)v30;
      v24 = a1;
      v39 = vtmtsSetUpProcessingNeeds(a1, v33, *a6, (const __CFDictionary **)&v72[2], *((const __CFDictionary **)a6 + 1), DescriptionWithPixelFormatType, a7, &v83[1], v83, (int *)&v82 + 2, v34, v35, v36, v37, v38, (_QWORD *)a10, a11, v70, (_DWORD *)&v82 + 3,
              (int *)a6 + 29,
              v52,
              v59,
              (_BYTE *)&v76 + 9,
              &v86);
      if ((_DWORD)v39)
      {
        v50 = v39;
        v19 = v69;
        goto LABEL_58;
      }
      v40 = v31;
      if (!a4 || v25)
      {
        v41 = vtmtsBuildSource(a1, v72, 1, v70, theArray);
        a3 = v58;
        v19 = v69;
        if ((_DWORD)v41)
          goto LABEL_65;
        Mutable = theArray;
        if (a5)
        {
          if (!theArray || (v42 = CFArrayGetCount(theArray), v42 < 2))
          {
LABEL_57:
            v50 = FigSignalErrorAt();
            v16 = v61;
            goto LABEL_58;
          }
          v43 = CFArrayGetValueAtIndex(theArray, v42 - 1);
          v43[5] += a5;
        }
      }
      else
      {
        Mutable = theArray;
        vtCreateTexDescGlobalSample((uint64_t)a1, (uint64_t)theArray, v70, v72[0], 115, 2);
        a3 = v58;
        v19 = v69;
      }
      if (BYTE10(v76))
      {
        v44 = *((unsigned __int8 *)v19 + 323);
        v71[0] = v77;
        v71[1] = v78;
        v71[2] = v79;
        setupAffine(v25, v44, v71, (int)*(float *)&v80, (int)*((float *)&v80 + 1), DWORD2(v80), HIDWORD(v80), v81, DWORD1(v81), v65);
      }
      else
      {
        setupRenderRotationAndCrop(a1, a2, (const __CFString **)a10, v25, v72[0], *(unsigned __int8 *)(a10 + 10), v66 == 2, *((unsigned __int8 *)v19 + 320), *(_BYTE *)(a10 + 9), *((_BYTE *)v19 + 323), 0, 0, 0, (int)*(float *)&v80, (int)*((float *)&v80 + 1), SDWORD2(v80), SHIDWORD(v80), v81, SDWORD1(v81),
          *(_OWORD *)(a6 + 18),
          HIDWORD(*((_QWORD *)a6 + 9)),
          *((_QWORD *)a6 + 10),
          HIDWORD(*(_OWORD *)(a6 + 18)),
          a6[22],
          a6[23],
          v55,
          v54,
          v65,
          v53);
      }
      *((_BYTE *)v19 + 320) = 0;
      if (!v25)
      {
        LODWORD(v71[0]) = 0;
        if (*((_QWORD *)a6 + 2))
        {
          FigCFDictionaryGetInt32IfPresent();
          v45 = v71[0];
        }
        else
        {
          v45 = 0;
        }
        setupBackgroundColor(*((float32_t *)a6 + 37), *((float *)a6 + 38), *((float *)a6 + 39), *((float *)a6 + 40), v72[0], v19[79], SDWORD2(v82), v83[2], v45, *((void **)v19 + 8));
        *((_BYTE *)v19 + 1559) = 1;
      }
      *v40 = HIDWORD(v84);
      v26 = v40 + 15;
      ++v25;
    }
    while (v25 < (unint64_t)*v62);
  }
  a6[1] = 8;
  v46 = *((_QWORD *)a6 + 4);
  if (!v46)
  {
    v41 = vtmtsBuildDestination(v24, a6, *((unsigned __int8 *)v19 + 316), v70, Mutable, a9);
    if (!(_DWORD)v41)
      goto LABEL_49;
LABEL_65:
    v50 = v41;
    goto LABEL_58;
  }
  v41 = vtCreateTexDescGlobalWrite((uint64_t)v24, *a6, Mutable, (uint64_t)(v19 + 357), *a6, v46, a6[16], 0, 0, 8, a6[34], a6[35]);
  if ((_DWORD)v41)
    goto LABEL_65;
LABEL_49:
  if ((v19[376] - 3) <= 2)
    *((_BYTE *)v19 + 1524) = 1;
  if (theArray)
  {
    *((_QWORD *)v19 + 25) = CFRetain(theArray);
    v19[356] = v19[79];
    vtmtsFixUpProcessingShortcuts(v70, v86);
    v47 = CFArrayGetCount(theArray);
  }
  else
  {
    *((_QWORD *)v19 + 25) = 0;
    v19[356] = v19[79];
    vtmtsFixUpProcessingShortcuts(v70, v86);
    v47 = 0;
  }
  if (*((_QWORD *)v19 + 257))
    v19[78] = v47;
  *(_OWORD *)(v19 + 34) = xmmword_1928E29D0;
  v48 = *((_QWORD *)a6 + 10);
  *(_QWORD *)&v49 = (int)v48;
  *((_QWORD *)&v49 + 1) = SHIDWORD(v48);
  *(_OWORD *)(v19 + 26) = v49;
  *(_OWORD *)(v19 + 30) = xmmword_1928E29E0;
  CFArrayAppendValue(a12, v19);
  v50 = 0;
  *((_QWORD *)v19 + 10) = v16;
  v16 = 0;
LABEL_58:
  CFRelease(v19);
  if (theArray)
    CFRelease(theArray);
  if (v16)
    CFRelease(v16);
  return v50;
}

uint64_t vtCreateVTMTSRenderPass()
{
  uint64_t result;
  uint64_t i;
  uint64_t v2;

  MEMORY[0x1940281CC](&VTMTSRenderPassDescriptorGetTypeID_sRegisterVTMTSRenderPassDescriptorOnce, RegisterVTMTSRenderPassDescriptor);
  result = _CFRuntimeCreateInstance();
  for (i = 0; i != 468; i += 52)
  {
    v2 = result + i;
    *(_DWORD *)(v2 + 1560) = -1;
    *(_BYTE *)(v2 + 1600) = 0;
    *(_QWORD *)(result + i + 1604) = 0x7F7FFFFFFF7FFFFFLL;
  }
  *(_QWORD *)(result + 2028) = 0;
  *(_DWORD *)(result + 1552) = 1000;
  return result;
}

uint64_t vtmtsSetUpProcessingNeeds(void *a1, int a2, int a3, const __CFDictionary **a4, const __CFDictionary *a5, CFDictionaryRef theDict, const __CFDictionary *a7, int *a8, int *a9, int *a10, int a11, int a12, int a13, int a14, int a15, _QWORD *a16, _BYTE *a17, uint64_t a18, _DWORD *a19, int *a20,uint64_t a21,_QWORD *a22,_BYTE *a23,BOOL *a24)
{
  char v26;
  int v27;
  BOOL v29;
  _BYTE *v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  const void *v36;
  const void *v37;
  const void *v38;
  const void *v39;
  const void *v40;
  const void *v41;
  const void *v42;
  __CFDictionary *Mutable;
  const void *v44;
  const void *v45;
  const void *v46;
  const void *v47;
  CGColorConversionInfoRef v48;
  int v49;
  int v50;
  BOOL v51;
  int v52;
  uint64_t i;
  uint64_t v54;
  id v55;
  void *v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  _DWORD *v65;
  _DWORD *v66;
  _DWORD *v67;
  _DWORD *v68;
  char *v69;
  BOOL v70;
  BOOL v71;
  BOOL v72;
  BOOL v73;
  BOOL v74;
  BOOL v75;
  BOOL v76;
  char v77;
  int v78;
  float *v79;
  int v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  int v86;
  BOOL v88;
  BOOL v90;
  BOOL v92;
  uint64_t v93;
  int NativeTextureTypeForPixelFormat;
  BOOL v96;
  int v100;
  int v101;
  BOOL v102;
  char v103;
  int v104;
  int v105;
  void *value;
  const __CFAllocator *allocator;
  void *v108;
  void *v109;
  void *v110;
  void *key;
  _BOOL8 v112;
  const void *v113;
  uint64_t v114;
  void *v115;
  const __CFDictionary *theDicta;
  CFTypeRef cf;
  int v119;
  uint64_t v120;
  int v121;
  int v122;
  int v123;
  int v124;
  __int16 v125;
  __int16 v126;
  __int16 v127;
  __int16 v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t (*v131)(uint64_t, uint64_t, uint64_t);
  void *v132;
  uint64_t *v133;
  uint64_t v134;
  _BOOL8 v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t (*v139)(uint64_t, uint64_t);
  void *v140;
  int *v141;
  CGColorSpaceRef v142;
  CGColorSpaceRef v143;
  CFTypeRef v144;
  CFTypeRef v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  int v149;
  float32x4_t v150;
  uint64_t (*v151)(_QWORD *, uint64_t, uint64_t, uint64_t);
  char *v152;
  uint64_t *v153;
  _BOOL8 v154;
  uint64_t v155;
  CFTypeRef *p_cf;
  int v157;
  _BYTE v158[40];
  uint64_t v159;
  _BOOL8 v160;
  int v161;
  uint64_t v162;

  v26 = 0;
  v162 = *MEMORY[0x1E0C80C00];
  theDicta = *a4;
  v27 = *a8;
  v100 = *a9;
  v101 = *a10;
  v128 = 0;
  v127 = 0;
  v126 = 0;
  v125 = 0;
  v124 = 1;
  v123 = 1;
  v122 = 1;
  v121 = 1;
  v120 = 0;
  v119 = 0;
  v29 = a2 != 1751528500 && (a2 & 0xFFFFFFFD) != 1751527984;
  cf = 0;
  if (a3 != 1751527984 && a3 != 1751527986 && a3 != 1751528500)
    v26 = 1;
  if (a21)
  {
    v103 = v26;
    v104 = v27;
    v102 = v29;
    getCharacteristicsFromPixelDescription(theDict, (uint64_t)&v128 + 1, (uint64_t)&v127 + 1, (uint64_t)&v126 + 1, 0, 0, (uint64_t)&v125 + 1, (uint64_t)&v120 + 4);
    getCharacteristicsFromPixelDescription(a7, (uint64_t)&v128, (uint64_t)&v127, (uint64_t)&v126, 0, 0, (uint64_t)&v125, (uint64_t)&v120);
    getSubsamplingFromPixelDescription(theDict, &v124, &v123);
    getSubsamplingFromPixelDescription(a7, &v122, &v121);
    v30 = a23;
    v31 = a17;
    v32 = a18;
    if (a5 && a17[30] && theDicta)
    {
      v33 = 0;
      if (HIBYTE(v127))
        v34 = 8;
      else
        v34 = 9;
      v105 = v34 - ((_BYTE)v127 != 0);
      key = (void *)*MEMORY[0x1E0CA8CD8];
      v110 = (void *)*MEMORY[0x1E0CA8E40];
      v108 = (void *)*MEMORY[0x1E0CA8E98];
      v109 = (void *)*MEMORY[0x1E0CA8D68];
      value = (void *)*MEMORY[0x1E0C9AE50];
      allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v115 = (void *)*MEMORY[0x1E0C9AE40];
      do
      {
        v35 = HIBYTE(v127);
        v114 = v33;
        v146 = 0;
        v147 = &v146;
        v148 = 0x2020000000;
        v149 = 0;
        v36 = CFDictionaryGetValue(theDicta, key);
        v37 = CFDictionaryGetValue(a5, key);
        v38 = CFDictionaryGetValue(theDicta, v110);
        v39 = CFDictionaryGetValue(a5, v110);
        v113 = CFDictionaryGetValue(theDicta, v109);
        v40 = CFDictionaryGetValue(a5, v109);
        v41 = CFDictionaryGetValue(theDicta, v108);
        v42 = CFDictionaryGetValue(a5, v108);
        v112 = v35 != 0;
        v144 = 0;
        v145 = 0;
        v142 = 0;
        v143 = 0;
        if (cf)
        {
          CFRelease(cf);
          cf = 0;
        }
        Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        CFDictionarySetValue(Mutable, CFSTR("kCGUseLegacyHDREcosystem"), value);
        CFDictionarySetValue(Mutable, CFSTR("kCGPQEETF3DLut"), v115);
        CFDictionarySetValue(Mutable, CFSTR("kCGHLGSceneMapping3DLut"), v115);
        v44 = (const void *)a16[4];
        if (v44)
          CFDictionarySetValue(Mutable, CFSTR("kCGPQEOTFOpticalScale"), v44);
        v45 = (const void *)a16[5];
        if (v45)
          CFDictionarySetValue(Mutable, CFSTR("kCGPQInvEOTFOpticalScale"), v45);
        v46 = (const void *)a16[6];
        if (v46)
          CFDictionarySetValue(Mutable, CFSTR("kCGHLGOETFOpticalScale"), v46);
        v47 = (const void *)a16[7];
        if (v47)
          CFDictionarySetValue(Mutable, CFSTR("kCGHLGInvOETFOpticalScale"), v47);
        if ((v36 && v37 || v38 && v39 || v113 && v40 && v41 && v42 && FigCFEqual())
          && FigCFEqual()
          || (v49 = VTCreateColorAttachments((unint64_t)v36, (unint64_t)v38, v113, v41, 0, 0, 0, (unint64_t)v37, (unint64_t)v39, v40, v42, 0, 0, 0, 0, (__CFDictionary **)&v145, (__CFDictionary **)&v144), (*((_DWORD *)v147 + 6) = v49) != 0)|| (v50 = VTCreateColorSpacesFromDictionaries((CFDictionaryRef)v145, (CFDictionaryRef)v144, &v143, &v142),
              (*((_DWORD *)v147 + 6) = v50) != 0))
        {
          v48 = 0;
        }
        else
        {
          v51 = (CGColorSpaceIsHDR(v143) || CGColorSpaceIsHDR(v142)) && FigCFEqual() == 0;
          *a24 = v51;
          v48 = CGColorConversionInfoCreateFromList(Mutable, v143, kCGColorConversionTransformFromSpace, kCGRenderingIntentDefault, v142, 1, 0, 0);
          v137 = MEMORY[0x1E0C809B0];
          v138 = 3221225472;
          v139 = __VTPopulateColorPrimariesAndTransferFunctionValuesModern_block_invoke;
          v140 = &__block_descriptor_40_e132_B92__0_CGColorConversionIteratorData_Iqqqqqq___CGColorTRCData____CGColorMatrixData____CGColorNxMTransformData__8____CFDictionary__84l;
          v141 = &v119;
          *(_QWORD *)v158 = MEMORY[0x1E0C809B0];
          *(_QWORD *)&v158[8] = 3221225472;
          *(_QWORD *)&v158[16] = __VTPopulateColorPrimariesAndTransferFunctionValuesModern_block_invoke_2;
          *(_QWORD *)&v158[24] = &unk_1E2F63BA8;
          v161 = v105;
          v159 = a18 + 1352;
          v160 = v112;
          *(_QWORD *)&v158[32] = &v146;
          v129 = MEMORY[0x1E0C809B0];
          v130 = 3221225472;
          v131 = __VTPopulateColorPrimariesAndTransferFunctionValuesModern_block_invoke_3;
          v132 = &unk_1E2F63BD0;
          v133 = &v146;
          v136 = v105;
          v134 = a18 + 1352;
          v135 = v112;
          v150.i64[0] = MEMORY[0x1E0C809B0];
          v150.i64[1] = 3221225472;
          v151 = __VTPopulateColorPrimariesAndTransferFunctionValuesModern_block_invoke_4;
          v152 = (char *)&unk_1E2F63BF8;
          v157 = v105;
          v154 = v112;
          v153 = &v146;
          v155 = a18 + 1352;
          p_cf = &cf;
          CGColorConversionInfoIterateFunctionsWithCallbacks();
        }
        if (v145)
          CFRelease(v145);
        if (v144)
          CFRelease(v144);
        if (v143)
          CFRelease(v143);
        if (v142)
          CFRelease(v142);
        if (v48)
          CFRelease(v48);
        if (Mutable)
          CFRelease(Mutable);
        v52 = *((_DWORD *)v147 + 6);
        _Block_object_dispose(&v146, 8);
        if (!v52 && v119 <= v105)
        {
          v30 = a23;
          v31 = a17;
          v32 = a18;
          if (cf)
          {
            memset(v158, 0, 36);
            CGColorNxMTransformGetTransform();
            v55 = objc_alloc_init(MEMORY[0x1E0CC6BB0]);
            objc_msgSend(v55, "setPixelFormat:", 125);
            objc_msgSend(v55, "setTextureType:", 7);
            objc_msgSend(v55, "setWidth:", *(_QWORD *)&v158[20]);
            objc_msgSend(v55, "setHeight:", *(_QWORD *)&v158[20]);
            objc_msgSend(v55, "setDepth:", *(_QWORD *)&v158[20]);
            objc_msgSend(v55, "setMipmapLevelCount:", 1);
            v56 = (void *)objc_msgSend(a1, "newTextureWithDescriptor:", v55);
            v57 = (char *)malloc_type_malloc(16 * *(_QWORD *)&v158[20] * *(_QWORD *)&v158[20] * *(_QWORD *)&v158[20], 0xE899FA43uLL);
            v58 = v57;
            v59 = *(char **)&v158[20];
            v60 = 16 * *(_QWORD *)&v158[20];
            if (*(_QWORD *)&v158[20])
            {
              v61 = 0;
              v62 = *(_QWORD *)&v158[28] + 8;
              v63 = v57 + 8;
              do
              {
                v64 = 0;
                v65 = v63;
                v66 = (_DWORD *)v62;
                do
                {
                  v67 = v65;
                  v68 = v66;
                  v69 = v59;
                  do
                  {
                    *(v67 - 2) = *v68;
                    *(v67 - 1) = *(v68 - 1);
                    *v67 = *(v68 - 2);
                    v67[1] = 1065353216;
                    v68 += 3;
                    v67 += 4;
                    --v69;
                  }
                  while (v69);
                  ++v64;
                  v66 += 3 * (_QWORD)v59;
                  v65 = (_DWORD *)((char *)v65 + v60);
                }
                while (v64 != v59);
                ++v61;
                v62 += 12 * (_QWORD)v59 * (_QWORD)v59;
                v63 += 16 * (_QWORD)v59 * (_QWORD)v59;
              }
              while (v61 != v59);
            }
            v150 = 0uLL;
            v151 = 0;
            v152 = v59;
            v153 = (uint64_t *)v59;
            v154 = (_BOOL8)v59;
            objc_msgSend(v56, "replaceRegion:mipmapLevel:slice:withBytes:bytesPerRow:bytesPerImage:", &v150, 0, 0, v58);
            *a22 = v56;
            if (v58)
              free(v58);

            v30 = a23;
            v31 = a17;
            v32 = a18;
          }
          goto LABEL_80;
        }
        for (i = 0; i != 468; i += 52)
          *(_DWORD *)(a18 + 1352 + i) = -1;
        if (cf)
        {
          CFRelease(cf);
          cf = 0;
        }
        v33 = v114 + 1;
      }
      while (v114 != 2);
      v30 = a23;
      v31 = a17;
      v32 = a18;
      if (v52)
      {
        v54 = FigSignalErrorAt();
        goto LABEL_175;
      }
LABEL_80:
      if (v119 >= 1)
      {
        *(_BYTE *)(v32 + 1303) = 1;
        *(_WORD *)(v32 + 128) = 257;
        *v30 = 1;
      }
    }
    if (v104 != a12 || v31[26])
    {
      *(_BYTE *)(v32 + 124) = (*(_DWORD *)(v32 + 108) - 3) < 0xFFFFFFFE;
      v70 = a11 != 2 || HIBYTE(v128) == 0;
      v71 = v102;
      if (!v70)
        v71 = 0;
      *(_BYTE *)(v32 + 126) = v71;
      *(_BYTE *)(v32 + 127) = (HIBYTE(v127) | HIBYTE(v126)) != 0;
      if (v31[30])
        goto LABEL_109;
      *(_BYTE *)(v32 + 128) = v100 != 8;
      *(_BYTE *)(v32 + 129) = 1;
LABEL_91:
      *(_BYTE *)(v32 + 1303) = a13 != 8;
LABEL_109:
      *(_BYTE *)(v32 + 1305) = (v127 | v126) != 0;
      v76 = a15 != 2 || v128 == 0;
      v77 = v103;
      if (!v76)
        v77 = 0;
      *(_BYTE *)(v32 + 1306) = v77;
      *(_BYTE *)(v32 + 1316) = (*(_DWORD *)(v32 + 1296) - 3) < 0xFFFFFFFE;
      goto LABEL_115;
    }
    if (v100 != a13 || v31[25])
    {
      *(_BYTE *)(v32 + 124) = (*(_DWORD *)(v32 + 108) - 3) < 0xFFFFFFFE;
      v72 = a11 != 2 || HIBYTE(v128) == 0;
      v73 = v102;
      if (!v72)
        v73 = 0;
      *(_BYTE *)(v32 + 126) = v73;
      *(_BYTE *)(v32 + 127) = (HIBYTE(v127) | HIBYTE(v126)) != 0;
      if (v31[30])
        goto LABEL_109;
      *(_BYTE *)(v32 + 128) = v100 != 8;
      goto LABEL_91;
    }
    if (v101 != a14 || v31[24])
    {
      *(_BYTE *)(v32 + 124) = (*(_DWORD *)(v32 + 108) - 3) < 0xFFFFFFFE;
      v74 = a11 != 2 || HIBYTE(v128) == 0;
      v75 = v102;
      if (!v74)
        v75 = 0;
      *(_BYTE *)(v32 + 126) = v75;
      *(_BYTE *)(v32 + 127) = (HIBYTE(v127) | HIBYTE(v126)) != 0;
      goto LABEL_109;
    }
    if (a11 != a15)
    {
      *(_BYTE *)(v32 + 124) = 1;
      v90 = a11 != 2 || HIBYTE(v128) == 0;
      *(_BYTE *)(v32 + 126) = v90;
      v92 = a15 != 2 || v128 == 0;
      *(_BYTE *)(v32 + 1306) = v92;
      goto LABEL_161;
    }
    if (a2 == 1751527984 || a2 == 1751528500 || a2 == 1751527986)
    {
      if (a3 == 1751527984 || a3 == 1751527986 || a3 == 1751528500)
      {
        v86 = a2;
        goto LABEL_162;
      }
      v96 = a11 != 2 || v128 == 0;
      *(_BYTE *)(v32 + 1306) = v96;
      *(_BYTE *)(v32 + 1316) = (*(_DWORD *)(v32 + 1296) - 3) < 0xFFFFFFFE;
    }
    else
    {
      if (a3 != 1751527984 && a3 != 1751528500)
      {
        v86 = a2;
        if (a3 != 1751527986)
        {
LABEL_162:
          v93 = v32;
          NativeTextureTypeForPixelFormat = getNativeTextureTypeForPixelFormat(v86);
          if (NativeTextureTypeForPixelFormat != getNativeTextureTypeForPixelFormat(a3)
            || v122 < v124
            || v121 < v123)
          {
            v32 = v93;
            *(_BYTE *)(v93 + 124) = (*(_DWORD *)(v93 + 108) - 3) < 0xFFFFFFFE;
            *(_BYTE *)(v93 + 1316) = (*(_DWORD *)(v93 + 1296) - 3) < 0xFFFFFFFE;
            *(_BYTE *)(v93 + 1308) = HIDWORD(v120) != (_DWORD)v120;
            v30 = a23;
LABEL_115:
            *v30 = 1;
            goto LABEL_116;
          }
          v30 = a23;
          v32 = v93;
          if (HIDWORD(v120) != (_DWORD)v120)
          {
            *(_BYTE *)(v93 + 124) = (*(_DWORD *)(v93 + 108) - 3) < 0xFFFFFFFE;
LABEL_161:
            *(_BYTE *)(v32 + 1316) = (*(_DWORD *)(v32 + 1296) - 3) < 0xFFFFFFFE;
          }
LABEL_116:
          v78 = *(unsigned __int8 *)(v32 + 127);
          if (*(_BYTE *)(v32 + 127))
          {
            v79 = (float *)(v32 + 1356);
            if (*(_BYTE *)(v32 + 1305) && !v119)
            {
              *(_DWORD *)(v32 + 1352) = 40;
              v80 = v120;
              vtmtsPopulateYCbCrToRGBMatrix(v101, a11, SHIDWORD(v120), &v150);
              vtmtsPopulateRGBToYCbCrMatrix(a14, a15, v80, (uint64_t)v158);
              matrixMultiply((float *)v158, v150.f32, v79);
              v30 = a23;
              *a23 = 1;
LABEL_123:
              if (v124 <= v122 && v123 <= v121)
              {
                v84 = 0;
              }
              else
              {
                v84 = 0;
                *v30 = 1;
              }
              goto LABEL_127;
            }
            *a19 = 0;
            *(_DWORD *)(v32 + 1352) = 40;
            v81 = v32;
            vtmtsPopulateYCbCrToRGBMatrix(v101, a11, SHIDWORD(v120), (float32x4_t *)(v32 + 1356));
            v32 = v81;
            v78 = 1;
            v30 = a23;
            *a23 = 1;
          }
          if (*(_BYTE *)(v32 + 1305))
          {
            v82 = v119 + v78;
            *a20 = v82;
            v83 = v32 + 52 * v82;
            *(_DWORD *)(v83 + 1352) = 40;
            vtmtsPopulateRGBToYCbCrMatrix(a14, a15, v120, v83 + 1356);
            v30 = a23;
          }
          goto LABEL_123;
        }
      }
      *(_BYTE *)(v32 + 124) = 1;
      v88 = a11 != 2 || HIBYTE(v128) == 0;
      *(_BYTE *)(v32 + 126) = v88;
    }
    v30 = a23;
    goto LABEL_116;
  }
  v54 = FigSignalErrorAt();
LABEL_175:
  v84 = v54;
LABEL_127:
  if (cf)
    CFRelease(cf);
  return v84;
}

void sub_1928488E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a66;

  _Block_object_dispose(&a66, 8);
  _Unwind_Resume(a1);
}

uint64_t vtCreateTexDescGlobalSample(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  if (!a1 || !a3 || (a6 - 3) <= 0xFFFFFFFD)
    return FigSignalErrorAt();
  if (a2)
  {
    if (a5)
      MTLPixelFormatGetInfoForDevice();
  }
  return 4294954391;
}

uint64_t vtmtsBuildSource(void *a1, int *a2, int a3, uint64_t a4, const __CFArray *a5)
{
  int v10;
  int EquivalentUncompressedPixelFormat;
  void *v12;
  _BOOL4 v13;
  const __CFDictionary *DescriptionWithPixelFormatType;
  const __CFArray *Value;
  const __CFArray *v16;
  CFTypeID v17;
  int v18;
  uint64_t result;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  unsigned __int16 v28;
  int v29;
  unsigned __int16 v30;
  int v32;
  int appended;
  int v34;
  unsigned __int16 v35;
  int v36;
  int v37;
  __int128 v38;
  int v39;
  unsigned __int16 v40;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int16 v45;
  unsigned __int16 v46;
  __int128 v47;
  uint64_t v48;
  unsigned __int16 v49;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  const __CFArray *v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v81;
  uint64_t v82;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  int v97;
  int v98;
  uint64_t v99[2];
  __int128 v100;
  uint64_t v101;
  int v102;
  uint64_t v103[3];
  int v104;
  uint64_t v105[3];
  int v106;

  v10 = *a2;
  EquivalentUncompressedPixelFormat = getEquivalentUncompressedPixelFormat(*a2);
  v12 = (void *)objc_msgSend(a1, "familyName");
  v13 = !v12 || !objc_msgSend(v12, "containsString:", CFSTR("A8")) || a2[17] != 3;
  DescriptionWithPixelFormatType = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
  if (DescriptionWithPixelFormatType)
  {
    Value = (const __CFArray *)CFDictionaryGetValue(DescriptionWithPixelFormatType, (const void *)*MEMORY[0x1E0CA91B0]);
    if (Value)
    {
      v16 = Value;
      v17 = CFGetTypeID(Value);
      if (v17 == CFArrayGetTypeID())
      {
        CFArrayGetValueAtIndex(v16, 0);
        FigCFDictionaryGetInt32IfPresent();
      }
    }
  }
  v18 = *a2;
  if (a4)
    *(_DWORD *)(a4 + 152 * a2[6]) = v18;
  result = 4294954391;
  if (v18 > 1647534391)
  {
    if (v18 > 1953903151)
    {
      if (v18 <= 2019964015)
      {
        if (v18 <= 2016686639)
        {
          if (v18 <= 1983013175)
          {
            if (v18 > 1953903667)
            {
              if (v18 != 1953903668)
              {
                if (v18 != 1983000886)
                  return result;
                if (!a4)
                  return 0;
                v106 = 0;
                v54 = 0x100000000;
                v55 = 110;
                v56 = 60;
LABEL_432:
                v105[1] = v55;
                v105[2] = v54;
                v105[0] = v56;
                v104 = 0;
                v103[2] = 0;
                v47 = 0uLL;
LABEL_507:
                *(_OWORD *)v103 = v47;
                v102 = 0;
                v101 = 0x400000000;
                v100 = v47;
LABEL_508:
                *(_OWORD *)v99 = v47;
                v64 = (uint64_t)a2;
                v36 = 2;
                goto LABEL_509;
              }
            }
            else if (v18 != 1953903152)
            {
              v21 = 1953903154;
              goto LABEL_429;
            }
LABEL_430:
            if (!a4)
              return 0;
            v106 = 0;
            v54 = 0x100000001;
            v55 = 60;
            v56 = 20;
            goto LABEL_432;
          }
          if (v18 <= 1999843441)
          {
            if (v18 == 1983013176 || v18 == 1983144248)
            {
              if (!a4)
                return 0;
              if (a2[17] == 2 || a3 == 0)
                v32 = 1;
              else
                v32 = 2;
              appended = appendSrcTextureDescriptions_4PlaneSample((uint64_t)a2, v32, a4, a5, 10, 30, 10, 0, 0);
LABEL_513:
              v98 = appended;
              result = 0;
              if (!v98)
                return result;
              return 4294954391;
            }
            return result;
          }
          if (v18 == 1999843442)
            goto LABEL_297;
          v57 = 2016567667;
          goto LABEL_291;
        }
        if (v18 <= 2016698738)
        {
          if (v18 <= 2016687155)
          {
            if (v18 != 2016686640)
            {
              if (v18 != 2016686642)
                return result;
              goto LABEL_397;
            }
LABEL_138:
            if (!a4)
              return 0;
            if (a2[17] == 2 || a3 == 0)
              v36 = 1;
            else
              v36 = 2;
            v42 = !v13;
            if (v13)
              v43 = 505;
            else
              v43 = 0;
            v44 = 543;
            goto LABEL_408;
          }
          if (v18 != 2016687156)
          {
            if (v18 != 2016687216)
              return result;
            goto LABEL_243;
          }
LABEL_386:
          if (!a4)
            return 0;
          if (a2[17] == 2 || a3 == 0)
            v36 = 1;
          else
            v36 = 2;
          v42 = !v13;
          if (v13)
            v43 = 507;
          else
            v43 = 0;
          v44 = 545;
          goto LABEL_408;
        }
        if (v18 <= 2019963441)
        {
          if (v18 == 2016698739)
            goto LABEL_292;
          v24 = 2019963440;
          goto LABEL_137;
        }
        if (v18 != 2019963442)
        {
          v59 = 2019963956;
LABEL_385:
          if (v18 != v59)
            return result;
          goto LABEL_386;
        }
        goto LABEL_397;
      }
      if (v18 > 2037741170)
      {
        if (v18 > 2088265263)
        {
          if (v18 > 2088269359)
          {
            if (v18 == 2088269360)
              goto LABEL_359;
            v49 = 30258;
          }
          else
          {
            if (v18 == 2088265264)
              goto LABEL_359;
            v49 = 26162;
          }
          v39 = v49 | 0x7C780000;
          goto LABEL_439;
        }
        if (v18 > 2084075055)
        {
          if (v18 == 2084075056)
            goto LABEL_266;
          v27 = 2084718401;
LABEL_239:
          if (v18 != v27)
            return result;
LABEL_310:
          if (!a4)
            return 0;
          if (a3)
            v73 = 2;
          else
            v73 = 1;
          if (v10 == EquivalentUncompressedPixelFormat)
            v74 = 123;
          else
            v74 = 0;
          v75 = 53;
          if (v10 != EquivalentUncompressedPixelFormat)
            v75 = 0;
          appended = appendSrcTextureDescriptions((uint64_t)a2, v73, a4, a5, 0, 0, 0, v74, 0, 0, 0, 1, 0, 0, 0, 4, 0, v75, 0,
                       0,
                       0,
                       1,
                       80,
                       0,
                       0,
                       0,
                       0);
          goto LABEL_513;
        }
        if (v18 != 2037741171)
        {
          v20 = 2084070960;
          goto LABEL_265;
        }
LABEL_322:
        if (a4)
        {
          if (a2[17] == 2 || a3 == 0)
            v36 = 1;
          else
            v36 = 2;
          if (v13)
            v43 = 501;
          else
            v43 = 0;
          if (v13)
            v51 = 240;
          else
            v51 = 0;
          if (v10 == EquivalentUncompressedPixelFormat)
            v68 = 103;
          else
            v68 = 0;
          v77 = 33;
          if (v10 != EquivalentUncompressedPixelFormat)
            v77 = 0;
          v78 = 30;
          if (v10 != EquivalentUncompressedPixelFormat)
            v78 = 0;
          v106 = 0;
          v105[1] = 70;
          v105[2] = 0x100000000;
          v105[0] = v78;
          v104 = 0;
          v103[1] = 53;
          v103[2] = 0x100000000;
          v103[0] = v77;
          v102 = 0;
          v101 = 0x400000000;
          v100 = 0u;
          *(_OWORD *)v99 = 0u;
          goto LABEL_288;
        }
        return 0;
      }
      if (v18 <= 2021078127)
      {
        if (v18 <= 2021077553)
        {
          if (v18 == 2019964016)
            goto LABEL_243;
          v24 = 2021077552;
LABEL_137:
          if (v18 != v24)
            return result;
          goto LABEL_138;
        }
        if (v18 != 2021077554)
        {
          v59 = 2021078068;
          goto LABEL_385;
        }
LABEL_397:
        if (!a4)
          return 0;
        if (a2[17] == 2 || a3 == 0)
          v36 = 1;
        else
          v36 = 2;
        v42 = !v13;
        if (v13)
          v43 = 506;
        else
          v43 = 0;
        v44 = 544;
LABEL_408:
        if (v42)
          v51 = 0;
        else
          v51 = v44;
        v106 = 0;
        v61 = 60;
        v62 = 20;
LABEL_412:
        v105[1] = v61;
        v105[2] = 0x100000001;
        v105[0] = v62;
        v104 = 0;
        v53 = 0uLL;
        memset(v103, 0, sizeof(v103));
        goto LABEL_413;
      }
      if (v18 <= 2033463605)
      {
        if (v18 != 2021078128)
        {
          if (v18 != 2033463352)
            return result;
          if (!a4)
            return 0;
          if (a3)
            v36 = 2;
          else
            v36 = 1;
          v37 = 2;
          v106 = 2;
          v38 = 0uLL;
          *(_OWORD *)&v105[1] = 0u;
          v105[0] = 70;
LABEL_458:
          v104 = v37;
          *(_OWORD *)&v103[1] = v38;
          v91 = 53;
LABEL_501:
          v103[0] = v91;
          goto LABEL_502;
        }
        goto LABEL_243;
      }
      if (v18 != 2033463606)
      {
        if (v18 != 2037741158)
          return result;
        goto LABEL_322;
      }
      if (!a4)
        return 0;
      v106 = 2;
LABEL_505:
      v47 = 0uLL;
      *(_OWORD *)&v105[1] = 0u;
      v48 = 110;
LABEL_506:
      v105[0] = v48;
      v104 = 0;
      v103[2] = 0;
      goto LABEL_507;
    }
    if (v18 <= 1886859825)
    {
      if (v18 > 1815491697)
      {
        if (v18 <= 1885745711)
        {
          if (v18 <= 1882468913)
          {
            if (v18 != 1815491698)
            {
              v26 = 1882468912;
              goto LABEL_358;
            }
            if (!a4)
              return 0;
            v106 = 0;
            v47 = 0uLL;
            *(_OWORD *)&v105[1] = 0u;
            v105[0] = 110;
            v104 = 0;
            memset(v103, 0, sizeof(v103));
            v102 = 0;
            v101 = 0x100000000;
            v100 = 0x35uLL;
            goto LABEL_508;
          }
          if (v18 == 1882468914)
            goto LABEL_440;
          v23 = 1882469428;
          goto LABEL_417;
        }
        if (v18 <= 1885746227)
        {
          if (v18 == 1885745712)
            goto LABEL_359;
          v39 = 1885745714;
          goto LABEL_439;
        }
        if (v18 != 1885746228)
        {
          v26 = 1886859824;
LABEL_358:
          if (v18 != v26)
            return result;
LABEL_359:
          if (a4)
          {
            if (a2[17] == 2 || a3 == 0)
              v36 = 1;
            else
              v36 = 2;
            v81 = !v13;
            v82 = 546;
LABEL_448:
            if (v81)
              v51 = 0;
            else
              v51 = v82;
            v106 = 0;
            memset(v105, 0, sizeof(v105));
            v104 = 0;
            memset(v103, 0, sizeof(v103));
            v102 = 0;
            v101 = 0x400000000;
            v100 = 0u;
            *(_OWORD *)v99 = 0u;
            v64 = (uint64_t)a2;
            v65 = a4;
            v66 = a5;
            v43 = 0;
            goto LABEL_452;
          }
          return 0;
        }
        goto LABEL_418;
      }
      if (v18 > 1751527983)
      {
        if (v18 > 1751528499)
        {
          if (v18 != 1751528500)
          {
            v34 = 1815162994;
LABEL_256:
            if (v18 != v34)
              return result;
            goto LABEL_297;
          }
        }
        else if (v18 != 1751527984 && v18 != 1751527986)
        {
          return result;
        }
        if (!a4)
          return 0;
        if (a3)
          v36 = 2;
        else
          v36 = 1;
        v106 = 0;
        v105[1] = 65;
        v105[2] = 0x100000001;
        v105[0] = 25;
        v104 = 0;
        v103[2] = 0;
        v38 = 0uLL;
        goto LABEL_470;
      }
      if (v18 == 1647534392)
        goto LABEL_297;
      if (v18 == 1647719521)
      {
        if (!a4)
          return 0;
        if (a3)
          v36 = 2;
        else
          v36 = 1;
        v106 = 0;
        v38 = 0uLL;
        memset(v105, 0, sizeof(v105));
        v104 = 0;
        *(_OWORD *)&v103[1] = 0u;
        v91 = 103;
        goto LABEL_501;
      }
      if (v18 != 1651521076)
        return result;
      if (!a4)
        return 0;
      v106 = 0;
      goto LABEL_505;
    }
    if (v18 > 1937125935)
    {
      if (v18 > 1949589874)
      {
        if (v18 > 1952854577)
        {
          if (v18 == 1952854578)
            goto LABEL_430;
          v46 = 13364;
        }
        else
        {
          if (v18 == 1949589875)
            goto LABEL_292;
          v46 = 12848;
        }
        v21 = v46 | 0x74660000;
      }
      else
      {
        if (v18 > 1937126451)
        {
          if (v18 == 1937126452)
            goto LABEL_430;
          v57 = 1949458803;
          goto LABEL_291;
        }
        if (v18 == 1937125936)
          goto LABEL_430;
        v21 = 1937125938;
      }
    }
    else
    {
      if (v18 <= 1932812658)
      {
        if (v18 <= 1915892015)
        {
          if (v18 == 1886859826)
            goto LABEL_440;
          v23 = 1886860340;
          goto LABEL_417;
        }
        if (v18 == 1915892016)
        {
LABEL_453:
          if (!a4)
            return 0;
          v37 = 1;
          if (a3)
            v36 = 2;
          else
            v36 = 1;
          v106 = 0;
          v38 = 0uLL;
          memset(v105, 0, sizeof(v105));
          goto LABEL_458;
        }
        v57 = 1932681587;
LABEL_291:
        if (v18 != v57)
          return result;
LABEL_292:
        if (a4)
        {
          appended = appendSrcTextureDescriptions_4PlaneSample((uint64_t)a2, 2, a4, a5, 20, 60, 20, 0, 0);
          goto LABEL_513;
        }
        return 0;
      }
      if (v18 > 1936077361)
      {
        if (v18 == 1936077362)
          goto LABEL_430;
        v35 = 13364;
      }
      else
      {
        if (v18 == 1932812659)
          goto LABEL_292;
        v35 = 12848;
      }
      v21 = v35 | 0x73660000;
    }
LABEL_429:
    if (v18 != v21)
      return result;
    goto LABEL_430;
  }
  if (v18 > 758670895)
  {
    if (v18 <= 875704421)
    {
      if (v18 <= 792229423)
      {
        if (v18 <= 762865201)
        {
          if (v18 <= 759318336)
          {
            if (v18 == 758670896)
              goto LABEL_266;
            v20 = 758674992;
            goto LABEL_265;
          }
          if (v18 != 759318337)
          {
            v30 = 26160;
            goto LABEL_190;
          }
          goto LABEL_310;
        }
        if (v18 <= 762869297)
        {
          if (v18 != 762865202)
          {
            v30 = 30256;
LABEL_190:
            v26 = v30 | 0x2D780000;
            goto LABEL_358;
          }
LABEL_440:
          if (a4)
          {
            if (a2[17] == 2 || a3 == 0)
              v36 = 1;
            else
              v36 = 2;
            v81 = !v13;
            v82 = 547;
            goto LABEL_448;
          }
          return 0;
        }
        if (v18 == 762869298)
          goto LABEL_440;
        v20 = 792225328;
LABEL_265:
        if (v18 != v20)
          return result;
LABEL_266:
        if (a4)
        {
          if (a2[17] == 2 || a3 == 0)
            v36 = 1;
          else
            v36 = 2;
          if (v13)
            v43 = 500;
          else
            v43 = 0;
          if (v13)
            v51 = 540;
          else
            v51 = 0;
          if (v10 == EquivalentUncompressedPixelFormat)
            v68 = 53;
          else
            v68 = 0;
          if (v10 == EquivalentUncompressedPixelFormat)
            v69 = 70;
          else
            v69 = 0;
          v70 = 13;
          if (v10 != EquivalentUncompressedPixelFormat)
            v70 = 0;
          v106 = 0;
          v105[1] = 30;
          v105[2] = 0x100000001;
          v105[0] = 10;
          v104 = 0;
          v103[1] = 33;
          v103[2] = 0x100000001;
          v103[0] = v70;
          v102 = 2;
          *((_QWORD *)&v100 + 1) = 70;
          v101 = 0x400000001;
          *(_QWORD *)&v100 = v69;
          v99[0] = 53;
          v99[1] = 0x200000001;
LABEL_288:
          v64 = (uint64_t)a2;
          v65 = a4;
          v66 = a5;
          v71 = 3;
LABEL_512:
          appended = appendSrcTextureDescriptions(v64, v36, v65, v66, v43, v51, v71, v68, v99[0], v99[1], SHIDWORD(v99[1]), 0, v100, *((uint64_t *)&v100 + 1), v101, SHIDWORD(v101), v102, v103[0], v103[1],
                       v103[2],
                       SHIDWORD(v103[2]),
                       v104,
                       v105[0],
                       v105[1],
                       v105[2],
                       SHIDWORD(v105[2]),
                       v106);
          goto LABEL_513;
        }
        return 0;
      }
      if (v18 <= 796423727)
      {
        if (v18 <= 796419631)
        {
          if (v18 == 792229424)
            goto LABEL_266;
          v27 = 792872769;
          goto LABEL_239;
        }
        if (v18 == 796419632)
          goto LABEL_359;
        v40 = 26162;
        goto LABEL_224;
      }
      if (v18 <= 846624101)
      {
        if (v18 == 796423728)
          goto LABEL_359;
        v40 = 30258;
LABEL_224:
        v39 = v40 | 0x2F780000;
LABEL_439:
        if (v18 != v39)
          return result;
        goto LABEL_440;
      }
      if (v18 == 846624102 || v18 == 846624121)
      {
        if (!a4)
          return 0;
        if (a2[17] == 2 || a3 == 0)
          v84 = 1;
        else
          v84 = 2;
        if (v13)
          v85 = 562;
        else
          v85 = 0;
        if (v13)
          v86 = 241;
        else
          v86 = 0;
        appended = appendSrcTextureDescriptions((uint64_t)a2, v84, a4, a5, v85, v86, 3, 103, 0, 0, 0, 0, 0, 0, 0, 4, 0, 33, 53,
                     0,
                     1,
                     0,
                     30,
                     70,
                     0,
                     1,
                     0);
        goto LABEL_513;
      }
      return result;
    }
    if (v18 <= 1278226533)
    {
      if (v18 <= 875836517)
      {
        if (v18 <= 875704933)
        {
          if (v18 == 875704422)
            goto LABEL_266;
          v20 = 875704438;
          goto LABEL_265;
        }
        if (v18 == 875704934)
          goto LABEL_206;
        v58 = 875704950;
        goto LABEL_205;
      }
      if (v18 <= 1111970368)
      {
        if (v18 == 875836518)
        {
LABEL_163:
          if (!a4)
            return 0;
          if (a2[17] == 2 || a3 == 0)
            v36 = 1;
          else
            v36 = 2;
          if (v13)
            v43 = 503;
          else
            v43 = 0;
          if (v13)
            v51 = 542;
          else
            v51 = 0;
          v52 = 13;
          if (v10 != EquivalentUncompressedPixelFormat)
            v52 = 0;
          v106 = 0;
          v105[1] = 30;
          v105[2] = 0x100000001;
          v105[0] = 10;
          v104 = 0;
          v103[2] = 0x100000001;
          v103[0] = v52;
          v103[1] = 33;
          v53 = 0uLL;
LABEL_413:
          v102 = 0;
          v101 = 0x400000000;
          v100 = v53;
          *(_OWORD *)v99 = v53;
          v64 = (uint64_t)a2;
          v65 = a4;
          v66 = a5;
LABEL_452:
          v71 = 3;
LABEL_511:
          v68 = 0;
          goto LABEL_512;
        }
        v25 = 875836534;
LABEL_115:
        if (v18 != v25)
          return result;
        goto LABEL_163;
      }
      if (v18 == 1111970369)
        goto LABEL_310;
      if (v18 != 1278226488)
        return result;
      goto LABEL_351;
    }
    if (v18 <= 1378955370)
    {
      if (v18 <= 1278226735)
      {
        if (v18 != 1278226534)
        {
          v29 = 1278226536;
          goto LABEL_345;
        }
        if (!a4)
          return result;
        v106 = 0;
        v47 = 0uLL;
        *(_OWORD *)&v105[1] = 0u;
        v48 = 55;
        goto LABEL_506;
      }
      if (v18 != 1278226736)
      {
        v22 = 1278226742;
LABEL_234:
        if (v18 != v22 || !a4)
          return result;
        v106 = 0;
        v47 = 0uLL;
        *(_OWORD *)&v105[1] = 0u;
        v48 = 20;
        goto LABEL_506;
      }
      goto LABEL_459;
    }
    if (v18 <= 1380411456)
    {
      if (v18 != 1378955371)
      {
        if (v18 != 1380410945)
          return result;
        if (!a4)
          return 0;
        v106 = 0;
        v47 = 0uLL;
        *(_OWORD *)&v105[1] = 0u;
        v48 = 125;
        goto LABEL_506;
      }
      goto LABEL_453;
    }
    if (v18 != 1380411457)
    {
      if (v18 == 1647392369)
        return appendSrcTextureDescriptions_4PlaneSample((uint64_t)a2, 2, a4, a5, 20, 20, 20, 20, 1);
      return result;
    }
LABEL_464:
    if (!a4)
      return 0;
    if (a3)
      v36 = 2;
    else
      v36 = 1;
    v106 = 0;
    v38 = 0uLL;
    *(_OWORD *)&v105[1] = 0u;
    v79 = 115;
    goto LABEL_469;
  }
  if (v18 > 642527535)
  {
    if (v18 <= 645424689)
    {
      if (v18 <= 644232303)
      {
        if (v18 <= 642934848)
        {
          if (v18 != 642527536)
          {
            v22 = 642527542;
            goto LABEL_234;
          }
LABEL_459:
          if (!a4)
            return result;
          if (a3)
            v36 = 2;
          else
            v36 = 1;
          v106 = 0;
          v38 = 0uLL;
          *(_OWORD *)&v105[1] = 0u;
          v79 = 20;
          goto LABEL_469;
        }
        if (v18 == 642934849)
          goto LABEL_464;
        v34 = 643969848;
        goto LABEL_256;
      }
      if (v18 <= 645346161)
      {
        if (v18 != 644232304)
        {
          v34 = 644624754;
          goto LABEL_256;
        }
LABEL_243:
        if (!a4)
          return 0;
        if (a2[17] == 2 || a3 == 0)
          v36 = 1;
        else
          v36 = 2;
        if (v13)
          v43 = 504;
        else
          v43 = 0;
        v106 = 0;
        *(_OWORD *)&v105[1] = 0u;
        v105[0] = 90;
        v104 = 0;
        memset(v103, 0, sizeof(v103));
        v102 = 0;
        v101 = 0x400000000;
        v100 = 0u;
        *(_OWORD *)v99 = 0u;
        v64 = (uint64_t)a2;
        v65 = a4;
        v66 = a5;
LABEL_510:
        v51 = 0;
        v71 = 0;
        goto LABEL_511;
      }
      if (v18 != 645346162)
      {
        v45 = 26160;
        goto LABEL_296;
      }
LABEL_297:
      if (!a4)
        return 0;
      if (v18 == 1647534392 || v18 == 643969848)
      {
        if (a3)
          v72 = 2;
        else
          v72 = 1;
        result = appendSrcTextureDescriptions((uint64_t)a2, v72, a4, a5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0,
                   0,
                   0,
                   0,
                   90,
                   10,
                   1,
                   1,
                   1);
      }
      else
      {
        if (a3)
          v92 = 2;
        else
          v92 = 1;
        if (v10 == EquivalentUncompressedPixelFormat)
          v93 = 123;
        else
          v93 = 0;
        v94 = 53;
        if (v10 != EquivalentUncompressedPixelFormat)
          v94 = 0;
        result = appendSrcTextureDescriptions((uint64_t)a2, v92, a4, a5, 0, 0, 0, v93, 0, 0, 0, 1, 0, 0, 0, 4, 0, v94, 0,
                   0,
                   0,
                   1,
                   90,
                   0,
                   0,
                   0,
                   1);
      }
      if ((_DWORD)result)
        return 4294954391;
      return result;
    }
    if (v18 <= 645428787)
    {
      if (v18 > 645428783)
      {
        if (v18 == 645428784)
          goto LABEL_359;
        v39 = 645428786;
        goto LABEL_439;
      }
      if (v18 == 645424690)
        goto LABEL_440;
      v28 = 26164;
      goto LABEL_416;
    }
    if (v18 > 645429041)
    {
      if (v18 == 645429042)
        goto LABEL_440;
      v28 = 30516;
LABEL_416:
      v23 = v28 | 0x26780000;
LABEL_417:
      if (v18 != v23)
        return result;
      goto LABEL_418;
    }
    if (v18 != 645428788)
    {
      v45 = 30512;
LABEL_296:
      v26 = v45 | 0x26780000;
      goto LABEL_358;
    }
LABEL_418:
    if (a4)
    {
      if (a2[17] == 2 || a3 == 0)
        v36 = 1;
      else
        v36 = 2;
      v81 = !v13;
      v82 = 548;
      goto LABEL_448;
    }
    return 0;
  }
  if (v18 > 641230385)
  {
    if (v18 <= 641234483)
    {
      if (v18 > 641234479)
      {
        if (v18 == 641234480)
          goto LABEL_266;
        v58 = 641234482;
LABEL_205:
        if (v18 != v58)
          return result;
        goto LABEL_206;
      }
      if (v18 == 641230386)
      {
LABEL_206:
        if (!a4)
          return 0;
        if (a2[17] == 2 || a3 == 0)
          v36 = 1;
        else
          v36 = 2;
        if (v13)
          v43 = 502;
        else
          v43 = 0;
        if (v13)
          v51 = 541;
        else
          v51 = 0;
        v106 = 0;
        v61 = 30;
        v62 = 10;
        goto LABEL_412;
      }
      v25 = 641230388;
      goto LABEL_115;
    }
    if (v18 <= 642527287)
    {
      if (v18 != 641234484)
      {
        v27 = 641877825;
        goto LABEL_239;
      }
      goto LABEL_163;
    }
    if (v18 == 642527288)
      goto LABEL_351;
    v29 = 642527336;
LABEL_345:
    if (v18 != v29 || !a4)
      return result;
    if (a3)
      v36 = 2;
    else
      v36 = 1;
    v106 = 0;
    v38 = 0uLL;
    *(_OWORD *)&v105[1] = 0u;
    v79 = 25;
    goto LABEL_469;
  }
  if (v18 > 590898735)
  {
    if (v18 <= 640955503)
    {
      if (v18 == 590898736)
        goto LABEL_266;
      v20 = 590902832;
      goto LABEL_265;
    }
    if (v18 != 640955504)
    {
      v20 = 641230384;
      goto LABEL_265;
    }
    goto LABEL_243;
  }
  switch(v18)
  {
    case 0:
      if (!a4)
        return 0;
      result = 0;
      if (a3)
        v95 = 2;
      else
        v95 = 1;
      v96 = a4 + 152 * a2[6];
      *(_DWORD *)(v96 + 108) = v95;
      *(_BYTE *)(v96 + 112) = 1;
      *(_WORD *)(v96 + 115) = 0;
      *(_BYTE *)(v96 + 117) = 0;
      *(_BYTE *)(v96 + 124) = 0;
      *(_DWORD *)(v96 + 126) = 0;
      *(_BYTE *)(a4 + 1304) = 0;
      return result;
    case 32:
      if (!a4)
        return 0;
      if (a3)
        v97 = 2;
      else
        v97 = 1;
      appended = appendSrcTextureDescriptions((uint64_t)a2, v97, a4, a5, 0, 0, 0, 123, 0, 0, 0, 2, 0, 0, 0, 4, 0, 53, 0,
                   0,
                   0,
                   2,
                   70,
                   0,
                   0,
                   0,
                   2);
      goto LABEL_513;
    case 40:
LABEL_351:
      if (!a4)
        return result;
      if (a3)
        v36 = 2;
      else
        v36 = 1;
      v106 = 0;
      v38 = 0uLL;
      *(_OWORD *)&v105[1] = 0u;
      v79 = 10;
LABEL_469:
      v105[0] = v79;
      v104 = 0;
      v103[2] = 0;
LABEL_470:
      *(_OWORD *)v103 = v38;
LABEL_502:
      v102 = 0;
      v101 = 0x400000000;
      v100 = v38;
      *(_OWORD *)v99 = v38;
      v64 = (uint64_t)a2;
LABEL_509:
      v65 = a4;
      v66 = a5;
      v43 = 0;
      goto LABEL_510;
  }
  return result;
}

uint64_t vtCreateTexDescGlobalWrite(uint64_t a1, uint64_t a2, __CFArray *a3, uint64_t a4, int a5, uint64_t a6, int a7, int a8, unsigned int a9, int a10, int a11, int a12)
{
  uint64_t Instance;
  _DWORD *v19;

  if (a1 && a4 && (a7 - 3) > 0xFFFFFFFD)
  {
    if (!a3 || !returnMetalFormatIfWritable(a1, a2, a6))
      return 4294954391;
    MEMORY[0x1940281CC](&VTMTSTextureDescriptorGetTypeID_sRegisterVTMTSTextureDescriptorOnce, RegisterVTMTSTextureDescriptor);
    Instance = _CFRuntimeCreateInstance();
    *(_DWORD *)(Instance + 16) = 3;
    *(_DWORD *)(Instance + 20) = a8;
    *(_DWORD *)(Instance + 24) = 0;
    *(_QWORD *)(Instance + 32) = a6;
    *(_DWORD *)(Instance + 40) = 1;
    *(_DWORD *)(Instance + 44) = a10;
    *(_DWORD *)(Instance + 48) = 0;
    *(_DWORD *)(Instance + 60) = a12;
    *(_DWORD *)(Instance + 64) = 0;
    *(_DWORD *)(Instance + 56) = a11;
    CFArrayAppendValue(a3, (const void *)Instance);
    if (a7 == 1)
    {
      v19 = (_DWORD *)(a4 + 4 * a9 + 40);
    }
    else
    {
      if (a7 != 2)
      {
LABEL_12:
        *(_DWORD *)a4 = a5;
        *(_BYTE *)(a4 + 96) = 0;
        CFRelease((CFTypeRef)Instance);
        return 0;
      }
      v19 = (_DWORD *)(a4 + 4 * a9 + 64);
    }
    *v19 = a10;
    *(_DWORD *)(a4 + 76) = a7;
    goto LABEL_12;
  }
  return FigSignalErrorAt();
}

uint64_t vtmtsBuildDestination(void *a1, unsigned int *a2, int a3, uint64_t a4, __CFArray *a5, const __CFArray *a6)
{
  unsigned int v12;
  int EquivalentUncompressedPixelFormat;
  int v14;
  uint64_t result;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  __int128 v25;
  unsigned __int16 v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  unsigned __int16 v33;
  unsigned __int16 v34;
  __int128 v35;
  uint64_t v36;
  int v37;
  unsigned int *v38;
  __int128 v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __CFArray *v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  int appended;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  int v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  BOOL v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  _BYTE v88[24];
  __int128 v89;
  _OWORD v90[2];
  __int128 v91;
  int v92;
  _BYTE v93[24];
  __int128 v94;
  _OWORD v95[2];
  __int128 v96;
  uint64_t v97;

  v12 = *a2;
  EquivalentUncompressedPixelFormat = getEquivalentUncompressedPixelFormat(*a2);
  v14 = *a2;
  if (a4)
    *(_DWORD *)(a4 + 1220) = v14;
  result = 4294954391;
  if (v14 > 1647719520)
  {
    if (v14 <= 1953903667)
    {
      if (v14 > 1915892015)
      {
        if (v14 <= 1937126451)
        {
          if (v14 <= 1936077361)
          {
            if (v14 <= 1932812658)
            {
              if (v14 == 1915892016)
                goto LABEL_384;
              v16 = 1932681587;
              goto LABEL_248;
            }
            if (v14 != 1932812659)
            {
              v26 = 12848;
              goto LABEL_170;
            }
LABEL_249:
            if (!a4)
              return 0;
            v97 = 1;
            *(_QWORD *)&v96 = 0x200000001;
            *((_QWORD *)&v96 + 1) = 0x100000001;
            *(_QWORD *)&v95[1] = 60;
            *((_QWORD *)&v95[1] + 1) = 20;
            *(_QWORD *)&v95[0] = 0;
            *((_QWORD *)&v95[0] + 1) = 20;
            v39 = 0uLL;
            v94 = 0u;
            memset(v93, 0, sizeof(v93));
            v92 = 4;
            *(_QWORD *)&v91 = 0x200000001;
            *((_QWORD *)&v91 + 1) = 0x200000004;
            *(_QWORD *)&v90[1] = 110;
            *((_QWORD *)&v90[1] + 1) = 110;
            *(_QWORD *)&v90[0] = 0;
            *((_QWORD *)&v90[0] + 1) = 110;
            v89 = 0u;
            goto LABEL_360;
          }
          if (v14 <= 1937125935)
          {
            if (v14 != 1936077362)
            {
              v26 = 13364;
LABEL_170:
              v47 = v26 | 0x73660000;
              goto LABEL_356;
            }
LABEL_357:
            if (!a4)
              return 0;
            *((_QWORD *)&v96 + 1) = 0x100000001;
            v97 = 0;
            *(_QWORD *)&v96 = 1;
            v95[1] = 0x3CuLL;
            *(_QWORD *)&v95[0] = 0;
            *((_QWORD *)&v95[0] + 1) = 20;
            v39 = 0uLL;
            v94 = 0u;
            memset(v93, 0, sizeof(v93));
LABEL_359:
            v92 = 0;
            v90[1] = v39;
            v91 = v39;
            v89 = v39;
            v90[0] = v39;
LABEL_360:
            *(_QWORD *)&v88[16] = 0;
            *(_OWORD *)v88 = v39;
            v87 = 0;
            v38 = a2;
            v24 = 2;
            goto LABEL_361;
          }
          if (v14 == 1937125936)
            goto LABEL_357;
          v47 = 1937125938;
LABEL_356:
          if (v14 != v47)
            return result;
          goto LABEL_357;
        }
        if (v14 > 1952854577)
        {
          if (v14 > 1953903151)
          {
            if (v14 == 1953903152)
              goto LABEL_357;
            v47 = 1953903154;
            goto LABEL_356;
          }
          if (v14 == 1952854578)
            goto LABEL_357;
          v34 = 13364;
        }
        else
        {
          if (v14 <= 1949589874)
          {
            if (v14 == 1937126452)
              goto LABEL_357;
            v16 = 1949458803;
LABEL_248:
            if (v14 != v16)
              return result;
            goto LABEL_249;
          }
          if (v14 == 1949589875)
            goto LABEL_249;
          v34 = 12848;
        }
        v47 = v34 | 0x74660000;
        goto LABEL_356;
      }
      if (v14 > 1882468913)
      {
        if (v14 <= 1885746227)
        {
          if (v14 <= 1885745711)
          {
            if (v14 != 1882468914)
            {
              v19 = 1882469428;
LABEL_203:
              if (v14 != v19)
                return result;
              if (!a4)
                return 0;
              if (a3)
                v24 = 2;
              else
                v24 = 1;
              v97 = 0;
              v96 = 0u;
              v94 = 0u;
              memset(v95, 0, sizeof(v95));
              memset(v93, 0, sizeof(v93));
              v92 = 0;
              v91 = 0u;
              v89 = 0u;
              memset(v90, 0, sizeof(v90));
              memset(v88, 0, sizeof(v88));
              v87 = 3;
              v38 = a2;
              v43 = a4;
              v44 = a5;
              v45 = 1;
              v46 = 510;
              v56 = 3;
LABEL_353:
              v77 = 548;
LABEL_455:
              appended = appendDstTextureDescriptions(v38, v24, v43, v44, v45, v46, v56, v77, v87, *(uint64_t *)v88, *(uint64_t *)&v88[8], *(uint64_t *)&v88[16], v89, SDWORD1(v89), SDWORD2(v89), SHIDWORD(v89), v90[0], SDWORD1(v90[0]), *((uint64_t *)&v90[0] + 1),
                           *(uint64_t *)&v90[1],
                           *((uint64_t *)&v90[1] + 1),
                           v91,
                           SDWORD1(v91),
                           SDWORD2(v91),
                           SHIDWORD(v91),
                           v92,
                           *(uint64_t *)v93,
                           *(uint64_t *)&v93[8],
                           *(uint64_t *)&v93[16],
                           v94,
                           SDWORD1(v94),
                           SDWORD2(v94),
                           SHIDWORD(v94),
                           v95[0],
                           SDWORD1(v95[0]),
                           *((uint64_t *)&v95[0] + 1),
                           *(uint64_t *)&v95[1],
                           *((uint64_t *)&v95[1] + 1),
                           v96,
                           SDWORD1(v96),
                           SDWORD2(v96),
                           SHIDWORD(v96),
                           v97,
                           SHIDWORD(v97));
              goto LABEL_456;
            }
LABEL_372:
            if (!a4)
              return 0;
            if (a3)
              v24 = 2;
            else
              v24 = 1;
            v97 = 0;
            v96 = 0u;
            v94 = 0u;
            memset(v95, 0, sizeof(v95));
            memset(v93, 0, sizeof(v93));
            v92 = 0;
            v91 = 0u;
            v89 = 0u;
            memset(v90, 0, sizeof(v90));
            memset(v88, 0, sizeof(v88));
            v87 = 3;
            v38 = a2;
            v43 = a4;
            v44 = a5;
            v45 = 1;
            v46 = 509;
            v56 = 3;
LABEL_377:
            v77 = 547;
            goto LABEL_455;
          }
          if (v14 != 1885745712)
          {
            v37 = 1885745714;
            goto LABEL_254;
          }
          goto LABEL_260;
        }
        if (v14 > 1886859825)
        {
          if (v14 != 1886859826)
          {
            if (v14 != 1886860340)
              return result;
            goto LABEL_348;
          }
          goto LABEL_255;
        }
        if (v14 == 1885746228)
          goto LABEL_348;
        v29 = 1886859824;
LABEL_150:
        if (v14 != v29)
          return result;
        goto LABEL_260;
      }
      if (v14 <= 1751528499)
      {
        if (v14 == 1647719521)
        {
          if (!a4)
            return 0;
          v97 = 0;
          v35 = 0uLL;
          v96 = 0u;
          memset(v95, 0, sizeof(v95));
          *(_QWORD *)&v94 = 0;
          *((_QWORD *)&v94 + 1) = 1;
          *(_OWORD *)&v93[8] = 0u;
          *(_QWORD *)v93 = 103;
LABEL_450:
          v92 = 0;
          v90[1] = v35;
          v91 = v35;
          v89 = v35;
          v90[0] = v35;
          *(_QWORD *)&v88[16] = 0;
          *(_OWORD *)v88 = v35;
          v87 = 0;
          v38 = a2;
          v24 = 2;
          goto LABEL_451;
        }
        if (v14 != 1751527984 && v14 != 1751527986)
          return result;
LABEL_141:
        if (!a4)
          return 0;
        if (a3)
          v24 = 2;
        else
          v24 = 1;
        *((_QWORD *)&v96 + 1) = 0x100000001;
        v97 = 0;
        *(_QWORD *)&v96 = 1;
        v95[1] = 0x41uLL;
        *(_QWORD *)&v95[0] = 0;
        *((_QWORD *)&v95[0] + 1) = 25;
        v25 = 0uLL;
        v94 = 0u;
        memset(v93, 0, sizeof(v93));
        v92 = 0;
        goto LABEL_146;
      }
      if (v14 <= 1815491697)
      {
        if (v14 != 1751528500)
        {
          v23 = 1815162994;
          goto LABEL_364;
        }
        goto LABEL_141;
      }
      if (v14 != 1815491698)
      {
        v21 = 1882468912;
LABEL_242:
        if (v14 != v21)
          return result;
        goto LABEL_378;
      }
      if (!a4)
        return 0;
      *((_QWORD *)&v96 + 1) = 1;
      v97 = 0;
LABEL_448:
      *(_QWORD *)&v96 = 0;
      v35 = 0uLL;
      v95[1] = 0u;
      v36 = 110;
      goto LABEL_449;
    }
    if (v14 > 2019964015)
    {
      if (v14 > 2037741170)
      {
        if (v14 > 2088265263)
        {
          if (v14 <= 2088269359)
          {
            if (v14 != 2088265264)
            {
              v37 = 2088265266;
              goto LABEL_254;
            }
            goto LABEL_260;
          }
          if (v14 == 2088269360)
          {
LABEL_378:
            if (!a4)
              return 0;
            if (a3)
              v24 = 2;
            else
              v24 = 1;
            v97 = 0;
            v96 = 0u;
            v94 = 0u;
            memset(v95, 0, sizeof(v95));
            memset(v93, 0, sizeof(v93));
            v92 = 0;
            v91 = 0u;
            v89 = 0u;
            memset(v90, 0, sizeof(v90));
            memset(v88, 0, sizeof(v88));
            v87 = 3;
            v38 = a2;
            v43 = a4;
            v44 = a5;
            v45 = 1;
            v46 = 508;
            v56 = 3;
LABEL_383:
            v77 = 546;
            goto LABEL_455;
          }
          v30 = 2088269362;
          goto LABEL_371;
        }
        if (v14 > 2084075055)
        {
          if (v14 == 2084075056)
            goto LABEL_330;
          v20 = 2084718401;
          goto LABEL_218;
        }
        if (v14 != 2037741171)
        {
          v17 = 2084070960;
          goto LABEL_329;
        }
      }
      else
      {
        if (v14 <= 2021078127)
        {
          if (v14 <= 2021077553)
          {
            if (v14 == 2019964016)
              goto LABEL_159;
            v18 = 2021077552;
LABEL_115:
            if (v14 != v18)
              return result;
            goto LABEL_116;
          }
          if (v14 != 2021077554)
          {
            v49 = 2021078068;
            goto LABEL_314;
          }
          goto LABEL_322;
        }
        if (v14 <= 2033463605)
        {
          if (v14 == 2021078128)
          {
            if (!a4)
              return 0;
            if (a3)
              v24 = 2;
            else
              v24 = 1;
            v91 = 0uLL;
            *((_QWORD *)&v96 + 1) = 0x100000001;
            v97 = 0;
            *(_QWORD *)&v96 = 0;
            v95[1] = 0u;
            *(_QWORD *)&v95[0] = 0;
            *((_QWORD *)&v95[0] + 1) = 90;
            *(_QWORD *)&v94 = 0;
            *((_QWORD *)&v94 + 1) = 0x100000001;
            *(_OWORD *)&v93[8] = 0u;
            *(_QWORD *)v93 = 53;
            v92 = 0;
            memset(v90, 0, sizeof(v90));
            *(_QWORD *)&v89 = 0;
            *((_QWORD *)&v89 + 1) = 0x200000004;
            *(_OWORD *)&v88[8] = 0u;
            *(_QWORD *)v88 = 123;
            v87 = 0;
LABEL_427:
            v38 = a2;
            v43 = a4;
            v44 = a5;
            v45 = 0;
            v46 = 504;
            v56 = 3;
LABEL_454:
            v77 = 0;
            goto LABEL_455;
          }
          if (v14 != 2033463352)
            return result;
          goto LABEL_403;
        }
        if (v14 == 2033463606)
        {
          if (!a4)
            return 0;
          *((_QWORD *)&v96 + 1) = 1;
          v97 = 0x200000000;
          goto LABEL_448;
        }
        if (v14 != 2037741158)
          return result;
      }
      if (a4)
      {
        if (a3)
          v24 = 2;
        else
          v24 = 1;
        v67 = v12 == EquivalentUncompressedPixelFormat;
        v68 = 103;
        if (!v67)
          v68 = 0;
        v69 = 53;
        if (!v67)
          v69 = 0;
        v91 = 0uLL;
        *((_QWORD *)&v96 + 1) = 2;
        v97 = 0;
        *(_QWORD *)&v96 = 0;
        v95[1] = 0u;
        *(_QWORD *)&v95[0] = 0;
        *((_QWORD *)&v95[0] + 1) = 70;
        *(_QWORD *)&v94 = 0;
        *((_QWORD *)&v94 + 1) = 2;
        *(_OWORD *)&v93[8] = 0u;
        v92 = 0;
        memset(v90, 0, sizeof(v90));
        *(_QWORD *)&v89 = 0;
        *((_QWORD *)&v89 + 1) = 4;
        *(_OWORD *)&v88[8] = 0u;
        v87 = 0;
        *(_QWORD *)v93 = v69;
        *(_QWORD *)v88 = v68;
        v38 = a2;
        v43 = a4;
        v44 = a5;
        v45 = 1;
        v46 = 501;
        goto LABEL_453;
      }
      return 0;
    }
    if (v14 <= 2016686639)
    {
      if (v14 <= 1983013175)
      {
        if (v14 != 1953903668)
        {
          if (v14 == 1982882104)
          {
            if (!a4)
              return 0;
            if (a3)
              v82 = 2;
            else
              v82 = 1;
            if (v12 == EquivalentUncompressedPixelFormat)
              v83 = 53;
            else
              v83 = 0;
            if (v12 == EquivalentUncompressedPixelFormat)
              v84 = 70;
            else
              v84 = 0;
            if (v12 == EquivalentUncompressedPixelFormat)
              v85 = 13;
            else
              v85 = 0;
            v72 = appendDstTextureDescriptions(a2, v82, a4, a5, 1, 0, 0, 0, 0, v83, 53, 53, 1, 2, 4, 2, 4, 0, v84,
                    70,
                    70,
                    1,
                    2,
                    4,
                    2,
                    4,
                    v85,
                    23,
                    13,
                    1,
                    2,
                    1,
                    1,
                    1,
                    0,
                    10,
                    30,
                    10,
                    1,
                    2,
                    1,
                    1,
                    1,
                    0);
            goto LABEL_343;
          }
          if (v14 != 1983000886)
            return result;
          if (!a4)
            return 0;
          *((_QWORD *)&v96 + 1) = 2;
          v97 = 0;
          *(_QWORD *)&v96 = 0;
          v39 = 0uLL;
          v95[1] = 0u;
          *(_QWORD *)&v95[0] = 0;
          *((_QWORD *)&v95[0] + 1) = 110;
          *(_QWORD *)&v94 = 0;
          *((_QWORD *)&v94 + 1) = 2;
          *(_OWORD *)&v93[8] = 0u;
          *(_QWORD *)v93 = 103;
          goto LABEL_359;
        }
        goto LABEL_357;
      }
      if (v14 > 1999843441)
      {
        if (v14 == 1999843442)
          goto LABEL_365;
        v16 = 2016567667;
        goto LABEL_248;
      }
      if (v14 != 1983013176 && v14 != 1983144248)
        return result;
      if (!a4)
        return 0;
      if (a3)
        v24 = 2;
      else
        v24 = 1;
      *((_QWORD *)&v96 + 1) = 0x100000001;
      v97 = 1;
      *((_QWORD *)&v95[1] + 1) = 10;
      *(_QWORD *)&v96 = 0x200000001;
      *((_QWORD *)&v95[0] + 1) = 10;
      *(_QWORD *)&v95[1] = 30;
      *((_QWORD *)&v94 + 1) = 0x100000001;
      *(_QWORD *)&v95[0] = 1;
      *(_QWORD *)&v93[16] = 13;
      *(_QWORD *)&v94 = 0x200000001;
      *(_QWORD *)v93 = 13;
      *(_QWORD *)&v93[8] = 23;
      v92 = 0;
      v25 = 0uLL;
LABEL_146:
      v90[1] = v25;
      v91 = v25;
      v89 = v25;
      v90[0] = v25;
      *(_QWORD *)&v88[16] = 0;
      *(_OWORD *)v88 = v25;
      v87 = 0;
      v38 = a2;
LABEL_361:
      v43 = a4;
      v44 = a5;
      v45 = 1;
LABEL_452:
      v46 = 0;
LABEL_453:
      v56 = 0;
      goto LABEL_454;
    }
    if (v14 > 2016698738)
    {
      if (v14 <= 2019963441)
      {
        if (v14 == 2016698739)
          goto LABEL_249;
        v18 = 2019963440;
        goto LABEL_115;
      }
      if (v14 != 2019963442)
      {
        v49 = 2019963956;
LABEL_314:
        if (v14 != v49)
          return result;
        goto LABEL_315;
      }
    }
    else
    {
      if (v14 > 2016687155)
      {
        if (v14 != 2016687156)
        {
          v22 = 2016687216;
          goto LABEL_191;
        }
LABEL_315:
        if (a4)
        {
          if (a3)
            v70 = 2;
          else
            v70 = 1;
          if (appendDstTextureDescriptions(a2, v70, a4, a5, 1, 507, 3, 545, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110,
                               110,
                               0,
                               1,
                               0,
                               4,
                               2,
                               0,
                               0,
                               0,
                               0,
                               0,
                               0,
                               0,
                               0,
                               0,
                               0,
                               20,
                               60,
                               0,
                               1,
                               0,
                               1,
                               1,
                               0,
                               0))
            return 4294954391;
          else
            return 0;
        }
        return 0;
      }
      if (v14 == 2016686640)
      {
LABEL_116:
        if (!a4)
          return 0;
        if (a3)
          v31 = 2;
        else
          v31 = 1;
        v32 = appendDstTextureDescriptions(a2, v31, a4, a5, 1, 505, 3, 543, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110,
                110,
                0,
                1,
                0,
                4,
                2,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                20,
                60,
                0,
                1,
                0,
                1,
                1,
                0,
                0);
        goto LABEL_236;
      }
      if (v14 != 2016686642)
        return result;
    }
LABEL_322:
    if (!a4)
      return 0;
    if (a3)
      v71 = 2;
    else
      v71 = 1;
    v72 = appendDstTextureDescriptions(a2, v71, a4, a5, 1, 506, 3, 544, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110,
            110,
            0,
            1,
            0,
            4,
            2,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            20,
            60,
            0,
            1,
            0,
            1,
            1,
            0,
            0);
LABEL_343:
    if (!v72)
    {
      if (a2[6] == 2 && !*(_BYTE *)(a4 + 1301))
      {
        result = vtAllocateMetalTextureForList(a1, (int)a2[20], (int)a2[21], 30, 0, a6);
        if ((_DWORD)result)
          return 4294954391;
        return result;
      }
      return 0;
    }
    return 4294954391;
  }
  if (v14 <= 758674991)
  {
    if (v14 > 642527541)
    {
      if (v14 <= 645424691)
      {
        if (v14 <= 644624753)
        {
          if (v14 <= 643969847)
          {
            if (v14 != 642527542)
            {
              if (v14 != 642934849)
                return result;
LABEL_394:
              if (a4)
              {
                if (a3)
                  v24 = 2;
                else
                  v24 = 1;
                *((_QWORD *)&v96 + 1) = 1;
                v97 = 0;
                *(_QWORD *)&v96 = 0;
                v61 = 0uLL;
                v95[1] = 0u;
                v62 = 115;
LABEL_399:
                *(_QWORD *)&v95[0] = 0;
                *((_QWORD *)&v95[0] + 1) = v62;
LABEL_400:
                v94 = v61;
                *(_QWORD *)&v93[16] = 0;
                *(_OWORD *)v93 = v61;
LABEL_401:
                v92 = 0;
                v90[1] = v61;
                v91 = v61;
                v89 = v61;
                v90[0] = v61;
                *(_QWORD *)&v88[16] = 0;
                *(_OWORD *)v88 = v61;
LABEL_402:
                v87 = 0;
LABEL_419:
                v38 = a2;
LABEL_451:
                v43 = a4;
                v44 = a5;
                v45 = 0;
                goto LABEL_452;
              }
              return 0;
            }
            goto LABEL_214;
          }
          if (v14 != 643969848)
          {
            if (v14 != 644232304)
              return result;
LABEL_159:
            if (a4)
            {
              if (a3)
                v24 = 2;
              else
                v24 = 1;
              v40 = v12 == EquivalentUncompressedPixelFormat;
              v41 = 123;
              if (!v40)
                v41 = 0;
              v42 = 53;
              if (!v40)
                v42 = 0;
              v91 = 0uLL;
              *((_QWORD *)&v96 + 1) = 0x100000001;
              v97 = 0;
              *(_QWORD *)&v96 = 0;
              v95[1] = 0u;
              *(_QWORD *)&v95[0] = 0;
              *((_QWORD *)&v95[0] + 1) = 90;
              *(_QWORD *)&v94 = 0;
              *((_QWORD *)&v94 + 1) = 0x100000001;
              *(_OWORD *)&v93[8] = 0u;
              v92 = 0;
              memset(v90, 0, sizeof(v90));
              *(_QWORD *)&v89 = 0;
              *((_QWORD *)&v89 + 1) = 0x200000004;
              *(_OWORD *)&v88[8] = 0u;
              v87 = 0;
              *(_QWORD *)v93 = v42;
              *(_QWORD *)v88 = v41;
              v38 = a2;
              v43 = a4;
              v44 = a5;
              v45 = 0;
              v46 = 504;
              goto LABEL_453;
            }
            return 0;
          }
LABEL_365:
          if (!a4)
            return 0;
          if (v14 > 1815162993)
          {
            if (v14 == 1999843442)
              goto LABEL_411;
            v78 = 1815162994;
          }
          else
          {
            if (v14 == 644624754)
              goto LABEL_411;
            v78 = 645346162;
          }
          if (v14 != v78)
          {
            if (a3)
              v24 = 2;
            else
              v24 = 1;
            *((_QWORD *)&v96 + 1) = 0x100000001;
            v97 = 0x100000000;
            *(_QWORD *)&v96 = 1;
            v95[1] = 0xAuLL;
            *(_QWORD *)&v95[0] = 0;
            *((_QWORD *)&v95[0] + 1) = 90;
            v61 = 0uLL;
            goto LABEL_400;
          }
LABEL_411:
          if (a3)
            v24 = 2;
          else
            v24 = 1;
          v79 = v12 == EquivalentUncompressedPixelFormat;
          v80 = 123;
          if (!v79)
            v80 = 0;
          v81 = 53;
          if (!v79)
            v81 = 0;
          v91 = 0uLL;
          *((_QWORD *)&v96 + 1) = 1;
          v97 = 0x100000000;
          *(_QWORD *)&v96 = 0;
          v95[1] = 0u;
          *(_QWORD *)&v95[0] = 0x100000000;
          *((_QWORD *)&v95[0] + 1) = 90;
          *(_QWORD *)&v94 = 0;
          *((_QWORD *)&v94 + 1) = 1;
          *(_OWORD *)&v93[8] = 0u;
          v92 = 0;
          memset((char *)v90 + 8, 0, 24);
          *((_QWORD *)&v89 + 1) = 4;
          *(_QWORD *)&v90[0] = 0x100000000;
          *(_QWORD *)&v89 = 0;
          *(_OWORD *)&v88[8] = 0u;
          v87 = 0;
          *(_QWORD *)v93 = v81;
          *(_QWORD *)v88 = v80;
          goto LABEL_419;
        }
        if (v14 <= 645424687)
        {
          if (v14 == 644624754)
            goto LABEL_365;
          v23 = 645346162;
          goto LABEL_364;
        }
        if (v14 != 645424688)
        {
          v33 = 26162;
          goto LABEL_253;
        }
        goto LABEL_260;
      }
      if (v14 <= 645429039)
      {
        if (v14 <= 645428785)
        {
          if (v14 != 645424692)
          {
            v21 = 645428784;
            goto LABEL_242;
          }
          goto LABEL_348;
        }
        if (v14 != 645428786)
        {
          v19 = 645428788;
          goto LABEL_203;
        }
        goto LABEL_372;
      }
      if (v14 <= 645429043)
      {
        if (v14 != 645429040)
        {
          v33 = 30514;
LABEL_253:
          v37 = v33 | 0x26780000;
LABEL_254:
          if (v14 != v37)
            return result;
          goto LABEL_255;
        }
        goto LABEL_260;
      }
      if (v14 != 645429044)
      {
        v17 = 758670896;
LABEL_329:
        if (v14 != v17)
          return result;
        goto LABEL_330;
      }
LABEL_348:
      if (!a4)
        return 0;
      if (a3)
        v24 = 2;
      else
        v24 = 1;
      v97 = 0;
      v96 = 0u;
      v94 = 0u;
      memset(v95, 0, sizeof(v95));
      memset(v93, 0, sizeof(v93));
      v92 = 0;
      v91 = 0u;
      v89 = 0u;
      memset(v90, 0, sizeof(v90));
      memset(v88, 0, sizeof(v88));
      v87 = 3;
      v38 = a2;
      v43 = a4;
      v44 = a5;
      v45 = 1;
      v46 = 0;
      v56 = 0;
      goto LABEL_353;
    }
    if (v14 > 641230387)
    {
      if (v14 <= 641877824)
      {
        if (v14 <= 641234481)
        {
          if (v14 != 641230388)
          {
            v17 = 641234480;
            goto LABEL_329;
          }
          goto LABEL_178;
        }
        if (v14 != 641234482)
        {
          v27 = 641234484;
LABEL_177:
          if (v14 != v27)
            return result;
          goto LABEL_178;
        }
        goto LABEL_223;
      }
      if (v14 <= 642527335)
      {
        if (v14 != 641877825)
        {
          v28 = 642527288;
          goto LABEL_269;
        }
        goto LABEL_275;
      }
      if (v14 != 642527336)
      {
        if (v14 != 642527536)
          return result;
        goto LABEL_297;
      }
LABEL_389:
      if (a4)
      {
        if (a3)
          v24 = 2;
        else
          v24 = 1;
        *((_QWORD *)&v96 + 1) = 1;
        v97 = 0;
        *(_QWORD *)&v96 = 0;
        v61 = 0uLL;
        v95[1] = 0u;
        v62 = 25;
        goto LABEL_399;
      }
      return 0;
    }
    if (v14 > 590902831)
    {
      if (v14 <= 641230383)
      {
        if (v14 != 590902832)
        {
          v22 = 640955504;
LABEL_191:
          if (v14 != v22)
            return result;
          if (!a4)
            return 0;
          if (a3)
            v24 = 2;
          else
            v24 = 1;
          v53 = v12 == EquivalentUncompressedPixelFormat;
          v54 = 123;
          if (!v53)
            v54 = 0;
          v55 = 53;
          if (!v53)
            v55 = 0;
          v91 = 0uLL;
          *((_QWORD *)&v96 + 1) = 0x100000001;
          v97 = 0;
          *(_QWORD *)&v96 = 0;
          v95[1] = 0u;
          *(_QWORD *)&v95[0] = 0;
          *((_QWORD *)&v95[0] + 1) = 90;
          *(_QWORD *)&v94 = 0;
          *((_QWORD *)&v94 + 1) = 0x100000001;
          *(_OWORD *)&v93[8] = 0u;
          v92 = 0;
          memset(v90, 0, sizeof(v90));
          *(_QWORD *)&v89 = 0;
          *((_QWORD *)&v89 + 1) = 0x200000004;
          *(_OWORD *)&v88[8] = 0u;
          v87 = 0;
          *(_QWORD *)v93 = v55;
          *(_QWORD *)v88 = v54;
          goto LABEL_427;
        }
LABEL_330:
        if (!a4)
          return 0;
        if (a3)
          v73 = 2;
        else
          v73 = 1;
        if (v12 == EquivalentUncompressedPixelFormat)
          v74 = 53;
        else
          v74 = 0;
        if (v12 == EquivalentUncompressedPixelFormat)
          v75 = 70;
        else
          v75 = 0;
        v76 = 13;
        if (v12 != EquivalentUncompressedPixelFormat)
          v76 = 0;
        v72 = appendDstTextureDescriptions(a2, v73, a4, a5, 1, 500, 3, 540, 3, v74, 53, 0, 1, 0, 4, 2, 0, 0, v75,
                70,
                0,
                1,
                0,
                4,
                2,
                0,
                v76,
                23,
                0,
                1,
                0,
                1,
                1,
                0,
                0,
                10,
                30,
                0,
                1,
                0,
                1,
                1,
                0,
                0);
        goto LABEL_343;
      }
      if (v14 == 641230384)
        goto LABEL_330;
      v48 = 641230386;
      goto LABEL_222;
    }
    if (v14 != 32)
    {
      if (v14 != 40)
      {
        v17 = 590898736;
        goto LABEL_329;
      }
LABEL_270:
      if (a4)
      {
        if (a3)
          v24 = 2;
        else
          v24 = 1;
        *((_QWORD *)&v96 + 1) = 1;
        v97 = 0;
        *(_QWORD *)&v96 = 0;
        v61 = 0uLL;
        v95[1] = 0u;
        v62 = 10;
        goto LABEL_399;
      }
      return 0;
    }
LABEL_403:
    if (a4)
    {
      if (a3)
        v24 = 2;
      else
        v24 = 1;
      v91 = 0uLL;
      *((_QWORD *)&v96 + 1) = 1;
      v97 = 0x200000000;
      *(_QWORD *)&v96 = 0;
      v95[1] = 0u;
      *(_QWORD *)&v95[0] = 0x200000000;
      *((_QWORD *)&v95[0] + 1) = 70;
      *(_QWORD *)&v94 = 0;
      *((_QWORD *)&v94 + 1) = 1;
      *(_OWORD *)&v93[8] = 0u;
      *(_QWORD *)v93 = 53;
      v92 = 0;
      memset((char *)v90 + 8, 0, 24);
      *((_QWORD *)&v89 + 1) = 4;
      *(_QWORD *)&v90[0] = 0x200000000;
      *(_QWORD *)&v89 = 0;
      *(_OWORD *)&v88[8] = 0u;
      *(_QWORD *)v88 = 123;
      goto LABEL_402;
    }
    return 0;
  }
  if (v14 <= 875704421)
  {
    if (v14 > 792229423)
    {
      if (v14 <= 796423727)
      {
        if (v14 <= 796419631)
        {
          if (v14 == 792229424)
            goto LABEL_330;
          v20 = 792872769;
LABEL_218:
          if (v14 != v20)
            return result;
          goto LABEL_275;
        }
        if (v14 != 796419632)
        {
          v37 = 796419634;
          goto LABEL_254;
        }
LABEL_260:
        if (!a4)
          return 0;
        if (a3)
          v24 = 2;
        else
          v24 = 1;
        v97 = 0;
        v96 = 0u;
        v94 = 0u;
        memset(v95, 0, sizeof(v95));
        memset(v93, 0, sizeof(v93));
        v92 = 0;
        v91 = 0u;
        v89 = 0u;
        memset(v90, 0, sizeof(v90));
        memset(v88, 0, sizeof(v88));
        v87 = 3;
        v38 = a2;
        v43 = a4;
        v44 = a5;
        v45 = 1;
        v46 = 0;
        v56 = 0;
        goto LABEL_383;
      }
      if (v14 > 846624101)
      {
        if (v14 != 846624102 && v14 != 846624121)
          return result;
        if (a4)
        {
          if (a3)
            v24 = 2;
          else
            v24 = 1;
          v91 = 0uLL;
          *((_QWORD *)&v96 + 1) = 2;
          v97 = 0;
          *(_QWORD *)&v96 = 0;
          v95[1] = 0u;
          *(_QWORD *)&v95[0] = 0;
          *((_QWORD *)&v95[0] + 1) = 70;
          *(_QWORD *)&v94 = 0;
          *((_QWORD *)&v94 + 1) = 2;
          *(_OWORD *)&v93[8] = 0u;
          *(_QWORD *)v93 = 53;
          v92 = 0;
          memset(v90, 0, sizeof(v90));
          *(_QWORD *)&v89 = 0;
          *((_QWORD *)&v89 + 1) = 4;
          *(_OWORD *)&v88[8] = 0u;
          *(_QWORD *)v88 = 103;
          v87 = 0;
          v38 = a2;
          v43 = a4;
          v44 = a5;
          v45 = 1;
          v46 = 562;
          goto LABEL_453;
        }
        return 0;
      }
      if (v14 == 796423728)
        goto LABEL_378;
      v30 = 796423730;
LABEL_371:
      if (v14 != v30)
        return result;
      goto LABEL_372;
    }
    if (v14 > 762865201)
    {
      if (v14 > 762869297)
      {
        if (v14 == 762869298)
          goto LABEL_372;
        v17 = 792225328;
        goto LABEL_329;
      }
      if (v14 != 762865202)
      {
        v21 = 762869296;
        goto LABEL_242;
      }
LABEL_255:
      if (!a4)
        return 0;
      if (a3)
        v24 = 2;
      else
        v24 = 1;
      v97 = 0;
      v96 = 0u;
      v94 = 0u;
      memset(v95, 0, sizeof(v95));
      memset(v93, 0, sizeof(v93));
      v92 = 0;
      v91 = 0u;
      v89 = 0u;
      memset(v90, 0, sizeof(v90));
      memset(v88, 0, sizeof(v88));
      v87 = 3;
      v38 = a2;
      v43 = a4;
      v44 = a5;
      v45 = 1;
      v46 = 0;
      v56 = 0;
      goto LABEL_377;
    }
    if (v14 == 758674992)
      goto LABEL_330;
    if (v14 == 759318337)
      goto LABEL_275;
    v29 = 762865200;
    goto LABEL_150;
  }
  if (v14 > 1278226533)
  {
    if (v14 <= 1378955370)
    {
      if (v14 > 1278226735)
      {
        if (v14 != 1278226736)
        {
          if (v14 != 1278226742)
            return result;
LABEL_214:
          if (!a4)
            return 0;
          *((_QWORD *)&v96 + 1) = 1;
          v97 = 0;
          *(_QWORD *)&v96 = 0;
          v35 = 0uLL;
          v95[1] = 0u;
          v36 = 20;
          goto LABEL_449;
        }
LABEL_297:
        if (a4)
        {
          if (a3)
            v24 = 2;
          else
            v24 = 1;
          *((_QWORD *)&v96 + 1) = 1;
          v97 = 0;
          *(_QWORD *)&v96 = 0;
          v61 = 0uLL;
          v95[1] = 0u;
          v62 = 20;
          goto LABEL_399;
        }
        return 0;
      }
      if (v14 != 1278226534)
      {
        if (v14 != 1278226536)
          return result;
        goto LABEL_389;
      }
      if (!a4)
        return 0;
      *((_QWORD *)&v96 + 1) = 1;
      v97 = 0;
      *(_QWORD *)&v96 = 0;
      v35 = 0uLL;
      v95[1] = 0u;
      v36 = 55;
LABEL_449:
      *(_QWORD *)&v95[0] = 0;
      *((_QWORD *)&v95[0] + 1) = v36;
      v94 = v35;
      *(_QWORD *)&v93[16] = 0;
      *(_OWORD *)v93 = v35;
      goto LABEL_450;
    }
    if (v14 <= 1380411456)
    {
      if (v14 != 1378955371)
      {
        if (v14 != 1380410945)
          return result;
        if (!a4)
          return 0;
        *((_QWORD *)&v96 + 1) = 1;
        v97 = 0;
        *(_QWORD *)&v96 = 0;
        v35 = 0uLL;
        v95[1] = 0u;
        v36 = 125;
        goto LABEL_449;
      }
LABEL_384:
      if (a4)
      {
        if (a3)
          v24 = 2;
        else
          v24 = 1;
        v97 = 0;
        v61 = 0uLL;
        v96 = 0u;
        memset((char *)v95 + 8, 0, 24);
        *((_QWORD *)&v94 + 1) = 1;
        *(_QWORD *)&v95[0] = 0x100000000;
        *(_QWORD *)&v94 = 0;
        *(_OWORD *)&v93[8] = 0u;
        *(_QWORD *)v93 = 53;
        goto LABEL_401;
      }
      return 0;
    }
    if (v14 == 1380411457)
      goto LABEL_394;
    v23 = 1647534392;
LABEL_364:
    if (v14 != v23)
      return result;
    goto LABEL_365;
  }
  if (v14 <= 875836517)
  {
    if (v14 <= 875704933)
    {
      if (v14 != 875704422)
      {
        v17 = 875704438;
        goto LABEL_329;
      }
      goto LABEL_330;
    }
    if (v14 == 875704934)
    {
LABEL_223:
      if (!a4)
        return 0;
      if (a3)
        v57 = 2;
      else
        v57 = 1;
      if (v12 == EquivalentUncompressedPixelFormat)
        v58 = 53;
      else
        v58 = 0;
      if (v12 == EquivalentUncompressedPixelFormat)
        v59 = 70;
      else
        v59 = 0;
      v60 = 13;
      if (v12 != EquivalentUncompressedPixelFormat)
        v60 = 0;
      v32 = appendDstTextureDescriptions(a2, v57, a4, a5, 1, 502, 3, 541, 3, v58, 53, 0, 1, 0, 4, 2, 0, 0, v59,
              70,
              0,
              1,
              0,
              4,
              2,
              0,
              v60,
              23,
              0,
              1,
              0,
              1,
              1,
              0,
              0,
              10,
              30,
              0,
              1,
              0,
              1,
              1,
              0,
              0);
LABEL_236:
      if (!v32)
      {
        if (a2[6] == 2 && !*(_BYTE *)(a4 + 1301))
          return vtAllocateMetalTextureForList(a1, (int)a2[20], (int)a2[21], 30, 0, a6);
        return 0;
      }
      return 4294954391;
    }
    v48 = 875704950;
LABEL_222:
    if (v14 != v48)
      return result;
    goto LABEL_223;
  }
  if (v14 > 1111970368)
  {
    if (v14 != 1111970369)
    {
      v28 = 1278226488;
LABEL_269:
      if (v14 != v28)
        return result;
      goto LABEL_270;
    }
LABEL_275:
    if (!a4)
      return 0;
    if (a3)
      v63 = 2;
    else
      v63 = 1;
    v64 = v12 == EquivalentUncompressedPixelFormat;
    v65 = 123;
    if (!v64)
      v65 = 0;
    v66 = 53;
    if (!v64)
      v66 = 0;
    appended = appendDstTextureDescriptions(a2, v63, a4, a5, 0, 0, 0, 80, 0, v65, 0, 0, 0, 0, 4, 0, 0, 1, 0,
                 0,
                 0,
                 0,
                 0,
                 0,
                 (unsigned __int128)0 >> 96,
                 0,
                 v66,
                 0,
                 0,
                 0,
                 0,
                 1,
                 0,
                 0,
                 1,
                 80,
                 0,
                 0,
                 0,
                 0,
                 1,
                 0,
                 0,
                 0);
    goto LABEL_456;
  }
  if (v14 != 875836518)
  {
    v27 = 875836534;
    goto LABEL_177;
  }
LABEL_178:
  if (!a4)
    return 0;
  if (a3)
    v50 = 2;
  else
    v50 = 1;
  v40 = v12 == EquivalentUncompressedPixelFormat;
  v51 = 13;
  if (!v40)
    v51 = 0;
  appended = appendDstTextureDescriptions(a2, v50, a4, a5, 1, 503, 3, 542, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               v51,
               23,
               0,
               1,
               0,
               1,
               1,
               0,
               0,
               10,
               30,
               0,
               1,
               0,
               1,
               1,
               0,
               0);
LABEL_456:
  v86 = appended;
  result = 0;
  if (v86)
    return 4294954391;
  return result;
}

uint64_t vtmtsFixUpProcessingShortcuts(uint64_t result, int a2)
{
  uint64_t v3;
  char v4;
  int v5;
  int v6;
  int v7;

  v3 = result;
  v4 = *(_BYTE *)(result + 127);
  if (v4)
  {
    if (*(_BYTE *)(result + 128) || *(_BYTE *)(result + 129) || *(_BYTE *)(result + 1303))
    {
      v4 = 1;
    }
    else
    {
      v4 = 1;
      if (*(_BYTE *)(result + 1305))
      {
        *(_BYTE *)(result + 127) = 0;
        *(_WORD *)(result + 1304) = 1;
        v4 = 0;
      }
    }
  }
  if (*(_BYTE *)(result + 126))
  {
    if ((v4 & 1) == 0
      && !*(_BYTE *)(result + 128)
      && !*(_BYTE *)(result + 129)
      && !*(_BYTE *)(result + 1303)
      && !*(_BYTE *)(result + 1304)
      && !*(_BYTE *)(result + 1305))
    {
      if (*(_BYTE *)(result + 1306))
      {
        result = formatSupportsChangeRange(*(_DWORD *)result);
        if ((_DWORD)result)
        {
          result = formatSupportsChangeRange(*(_DWORD *)(v3 + 1220));
          if ((_DWORD)result)
          {
            *(_BYTE *)(v3 + 126) = 0;
            *(_BYTE *)(v3 + 1306) = 0;
            *(_BYTE *)(v3 + 1308) = 1;
          }
        }
      }
    }
  }
  if (a2)
  {
    v5 = 2;
    *(_DWORD *)(v3 + 1216) = 2;
    v6 = *(_DWORD *)(v3 + 108);
  }
  else
  {
    v6 = *(_DWORD *)(v3 + 108);
    v7 = *(_DWORD *)(v3 + 1296);
    if (v6 == v7 && !*(_BYTE *)(v3 + 124))
    {
      *(_DWORD *)(v3 + 1216) = v6;
      goto LABEL_26;
    }
    if (v6 == 2 || v6 == 4 || v7 == 4 || v7 == 2)
      v5 = 2;
    else
      v5 = 1;
    *(_DWORD *)(v3 + 1216) = v5;
  }
  if (v6 != v5)
    *(_BYTE *)(v3 + 124) = 1;
  v6 = v5;
LABEL_26:
  if (*(_DWORD *)(v3 + 1296) != v6)
    *(_BYTE *)(v3 + 1316) = 1;
  return result;
}

float32x2_t setupAffine(int a1, int a2, _OWORD *a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, unsigned int a9, uint64_t a10)
{
  __int128 v17;
  uint64_t v18;
  float32x2_t v24;
  float64x2_t v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x2_t v29;
  float32x2_t v30;
  float32x2_t v31;
  float32x2_t result;
  CGAffineTransform v34;
  CGAffineTransform v35;

  v17 = a3[1];
  *(_OWORD *)&v34.a = *a3;
  *(_OWORD *)&v34.c = v17;
  *(_OWORD *)&v34.tx = a3[2];
  memset(&v35, 0, sizeof(v35));
  CGAffineTransformInvert(&v35, &v34);
  v18 = a10 + 60 * a1;
  __asm { FMOV            V2.2S, #1.0 }
  v24 = (float32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(a2 == 0), 0x1FuLL)), _D2, (int8x8_t)vcvt_f32_s32((int32x2_t)__PAIR64__(a9, a8)));
  v25 = vcvtq_f64_f32(v24);
  v26 = vcvt_f32_f64(vdivq_f64(*(float64x2_t *)&v35.a, v25));
  v27 = vcvt_f32_f64(vdivq_f64(*(float64x2_t *)&v35.c, v25));
  *(float32x2_t *)(v18 + 32) = v26;
  *(float32x2_t *)(v18 + 40) = v27;
  __asm { FMOV            V5.2D, #0.5 }
  *(float32x2_t *)(v18 + 48) = vcvt_f32_f64(vaddq_f64(vmlaq_f64(vmulq_f64(vcvtq_f64_f32(v27), _Q5), _Q5, vcvtq_f64_f32(v26)), vcvtq_f64_f32(vcvt_f32_f64(vdivq_f64(*(float64x2_t *)&v35.tx, v25)))));
  v29 = vcvt_f32_s32((int32x2_t)__PAIR64__(a7, a4));
  v30 = vcvt_f32_s32((int32x2_t)__PAIR64__(a5, a6));
  v31 = vadd_f32(v30, v29);
  v29.i32[1] = v30.i32[1];
  *(float32x2_t *)(v18 + 68) = vdiv_f32(v29, v24);
  __asm { FMOV            V2.2D, #-0.25 }
  result = vcvt_f32_f64(vdivq_f64(vaddq_f64(vcvtq_f64_f32(v31), _Q2), v25));
  *(float32x2_t *)(v18 + 76) = result;
  *(_DWORD *)(v18 + 56) = a8;
  *(_DWORD *)(v18 + 60) = a9;
  return result;
}

void setupRenderRotationAndCrop(void *a1, unsigned __int8 *a2, const __CFString **a3, int a4, int a5, int a6, int a7, int a8, char a9, char a10, unsigned __int8 a11, unsigned __int8 a12, int a13, int a14, int a15, int a16, int a17, int a18, int a19, int a20,int a21,int a22,int a23,int a24,int a25,_QWORD *a26,_QWORD *a27,uint64_t a28,id *a29)
{
  int v30;
  int v31;
  int v32;
  BOOL v33;
  int v34;
  int v35;
  float v36;
  float v37;
  unsigned int v38;
  float v39;
  float v40;
  int v41;
  int v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  float v52;
  int v53;
  float v54;
  int v55;
  float v56;
  uint64_t v57;
  float v58;
  int v59;
  int v60;
  float v61;
  int v62;
  float v63;
  float v64;
  float v65;
  uint64_t v66;
  float v67;
  float v68;
  float v69;
  int v70;
  int v71;
  int v72;
  int v73;
  float v74;
  float v75;
  float v76;
  float *v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  void *v84;
  void *v85;
  float v86;
  __int128 v87;
  __int128 v88;
  void *v89;
  const __CFString *v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  void *v101;
  const __CFString *v102;
  int v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v109;
  int v111;
  uint64_t v113;
  id v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123[8];
  _OWORD v124[2];
  uint64_t v125;

  v30 = a13;
  v31 = a12;
  v32 = a11;
  v125 = *MEMORY[0x1E0C80C00];
  v113 = 0;
  v114 = 0;
  if (a13)
    v33 = a13 == 180;
  else
    v33 = 1;
  if (v33)
    v34 = a16;
  else
    v34 = a17;
  v111 = v34;
  if (v33)
    v35 = a17;
  else
    v35 = a16;
  v103 = v35;
  v104 = (float)a19;
  v105 = (float)a18;
  if (a10)
    v36 = (float)a19;
  else
    v36 = 1.0;
  if (a10)
    v37 = (float)a18;
  else
    v37 = 1.0;
  if (a13)
  {
    if (a13 == 90)
    {
      v38 = 6;
    }
    else if (a13 == 180)
    {
      v38 = 0;
      v30 = 0;
      v32 = a11 == 0;
      v31 = a12 == 0;
    }
    else
    {
      v38 = 2 * (a13 == 270);
    }
  }
  else
  {
    v38 = 0;
  }
  if (v32)
    v39 = -1.0;
  else
    v39 = 1.0;
  if (v31)
    v40 = -1.0;
  else
    v40 = 1.0;
  if (a16)
    v41 = a16;
  else
    v41 = a22;
  if (a17)
    v42 = a17;
  else
    v42 = a23;
  v106 = v39;
  v107 = v40;
  if (v30)
  {
    if (v30 == 90 || v30 == 270)
    {
      v43 = 1.0;
      if (v30 != 90)
        v43 = -1.0;
      v44 = (float)v42;
      v45 = (float)((float)v42 / (float)a22) * (float)-(float)(v39 * v43);
      v46 = (float)v41;
      v47 = (float)((float)v41 / (float)a23) * (float)(v43 * v40);
      v48 = a4;
      v49 = a28 + 60 * a4;
      *(_DWORD *)(v49 + 32) = 0;
      v50 = v49 + 32;
      *(_DWORD *)(v50 + 12) = 0;
      v51 = a14 + v41 - 1;
      if (v47 > 0.0)
        v51 = a14;
      v52 = (float)v51;
      v53 = a15 + v42 - 1;
      if (v45 > 0.0)
        v53 = a15;
      v54 = (float)v53;
      if (!a6)
      {
        v52 = v52 - (float)(v47 * (float)a21);
        v54 = v54 - (float)(v45 * (float)a20);
      }
      v55 = a8;
      *(float *)(v50 + 16) = v52 / v37;
      *(float *)(v50 + 20) = v54 / v36;
      *(float *)(v50 + 4) = v45 / v36;
      *(float *)(v50 + 8) = v47 / v37;
    }
    else
    {
      v55 = a8;
      v48 = a4;
      v46 = (float)v41;
      v44 = (float)v42;
    }
  }
  else
  {
    v46 = (float)v41;
    v56 = (float)((float)v41 / (float)a22) * v39;
    v48 = a4;
    v57 = a28 + 60 * a4;
    *(_DWORD *)(v57 + 36) = 0;
    *(_DWORD *)(v57 + 40) = 0;
    v44 = (float)v42;
    v58 = (float)((float)v42 / (float)a23) * v40;
    v59 = a14 + v41 - 1;
    if (v32)
      v60 = v59;
    else
      v60 = a14;
    v61 = (float)v60;
    if (v31)
      v62 = a15 + v42 - 1;
    else
      v62 = a15;
    v63 = (float)v62;
    if (!a6)
    {
      v61 = v61 - (float)(v56 * (float)a20);
      v63 = v63 - (float)(v58 * (float)a21);
    }
    v55 = a8;
    *(float *)(v57 + 48) = v61 / v37;
    *(float *)(v57 + 52) = v63 / v36;
    *(float *)(v57 + 32) = v56 / v37;
    *(float *)(v57 + 44) = v58 / v36;
  }
  v64 = (float)a14;
  v65 = 0.0;
  v66 = a28 + 60 * v48;
  v67 = (float)a15;
  *(float *)(v66 + 68) = fmaxf((float)a14 / v37, 0.0);
  *(float *)(v66 + 72) = fmaxf((float)a15 / v36, 0.0);
  v68 = ((float)(fmaxf((float)a14, 0.0) + v46) + -0.25) / v37;
  v109 = v44;
  v69 = ((float)(fmaxf((float)a15, 0.0) + v44) + -0.25) / v36;
  *(float *)(v66 + 76) = v68;
  *(float *)(v66 + 80) = v69;
  *(_DWORD *)(v66 + 56) = a18;
  *(_DWORD *)(v66 + 60) = a19;
  if (a6)
    v70 = a20;
  else
    v70 = 0;
  if (a6)
    v71 = a21;
  else
    v71 = 0;
  *(_DWORD *)(a28 + 8) = v70;
  *(_DWORD *)(a28 + 12) = v71;
  v72 = a24;
  v73 = a25;
  if (a6)
  {
    v72 = a22;
    v73 = a23;
  }
  *(_DWORD *)a28 = v72;
  *(_DWORD *)(a28 + 4) = v73;
  if (!a9 && a29 && !vtmtsGetIntermediateScalingFormat(a2, a5, 0, 0, 0, 0))
  {
    if (v111 == a22)
    {
      v74 = 0.0;
      if (v103 == a23)
        goto LABEL_76;
      vtmtsBuildScalingTable(a1, a7 == 0, (float *)&v113, &v114, (_DWORD *)(a28 + 84), (_DWORD *)(a28 + 88), (float)a23 / v109, 1.0 / v36);
      v76 = *(float *)&v113;
      v77 = (float *)(a28 + 52);
      v74 = 0.0;
      v65 = *(float *)&v113;
    }
    else
    {
      vtmtsBuildScalingTable(a1, a7 == 0, (float *)&v113 + 1, &v114, (_DWORD *)(a28 + 84), (_DWORD *)(a28 + 88), (float)a22 / v46, 1.0 / v37);
      v76 = *((float *)&v113 + 1);
      v77 = (float *)(a28 + 48);
      v74 = *((float *)&v113 + 1);
    }
    *v77 = v76 + *v77;
    goto LABEL_76;
  }
  v114 = 0;
  v74 = 0.0;
  if (!v55)
  {
    v75 = 0.0;
    if (a9)
      goto LABEL_79;
  }
LABEL_76:
  if (v111 == a22)
  {
    if (a10)
    {
      v75 = v74;
      if (v103 == a23)
      {
LABEL_79:
        v78 = 0.5 / v37 + *(float *)(a28 + 48);
        v79 = 0.5 / v36 + *(float *)(a28 + 52);
        *(float *)(a28 + 48) = v78;
        *(float *)(a28 + 52) = v79;
        v74 = v75;
      }
    }
  }
  if (a7)
  {
    if (a6)
    {
      v80 = v64 + (float)(v74 * v37);
      v81 = v67 + (float)(v65 * v36);
      v82 = v80 + v46;
      v83 = v81 + v109;
    }
    else
    {
      if (v30)
      {
        v80 = (float)(v64 - (float)((float)(v46 * (float)a21) / (float)a23)) + (float)(v65 * v36);
        v81 = (float)(v67 - (float)((float)(v109 * (float)a20) / (float)a22)) + (float)(v74 * v37);
        v82 = (float)((float)(v46 * (float)a25) / (float)a23) + v80;
        v86 = (float)(v109 * (float)a24) / (float)a22;
      }
      else
      {
        v80 = (float)(v64 - (float)((float)(v46 * (float)a20) / (float)a22)) + (float)(v74 * v37);
        v81 = (float)(v67 - (float)((float)(v109 * (float)a21) / (float)a23)) + (float)(v65 * v36);
        v82 = (float)((float)(v46 * (float)a24) / (float)a22) + v80;
        v86 = (float)(v109 * (float)a25) / (float)a23;
      }
      v83 = v86 + v81;
    }
    v115 = v80;
    v116 = v81;
    v117 = v80;
    v118 = v83;
    v119 = v82;
    v120 = v83;
    v121 = v82;
    v122 = v81;
    if (a10)
    {
      v115 = v80 / v105;
      v116 = v81 / v104;
      v117 = v80 / v105;
      v118 = v83 / v104;
      v119 = v82 / v105;
      v120 = v83 / v104;
      v121 = v82 / v105;
      v122 = v81 / v104;
    }
    *(_QWORD *)&v87 = *(_QWORD *)(&v115 + v38);
    *((_QWORD *)&v87 + 1) = *(_QWORD *)(&v115 + (((_BYTE)v38 + 6) & 6));
    *(_QWORD *)&v88 = *(_QWORD *)(&v115 + (((_BYTE)v38 + 2) & 6));
    *((_QWORD *)&v88 + 1) = *(_QWORD *)(&v115 + (((_BYTE)v38 + 4) & 6));
    v124[0] = v87;
    v124[1] = v88;
    v89 = (void *)objc_msgSend(a1, "newBufferWithBytes:length:options:", v124, 32, 0);
    v85 = v89;
    if (*a3)
      v90 = *a3;
    else
      v90 = CFSTR("com.apple.VideoToolbox.VTMetalTransferSession");
    objc_msgSend(v89, "setLabel:", v90);
    v91 = 0.0;
    if (a6)
      v92 = (float)a20;
    else
      v92 = 0.0;
    if (a6)
      v91 = (float)a21;
    v93 = (float)a20 + (float)a22;
    v94 = (float)a24;
    if (!a6)
      v93 = (float)a24;
    v95 = (float)a21 + (float)a23;
    v96 = (float)a25;
    if (!a6)
      v95 = (float)a25;
    v97 = (float)(v92 / v94) * 2.0 + -1.0;
    v98 = 1.0 - (float)(v91 / v96) * 2.0;
    v99 = (float)(v93 / v94) * 2.0 + -1.0;
    v100 = 1.0 - (float)(v95 / v96) * 2.0;
    v123[0] = v106 * v97;
    v123[1] = v107 * v98;
    v123[2] = v106 * v99;
    v123[3] = v107 * v98;
    v123[4] = v106 * v97;
    v123[5] = v107 * v100;
    v123[6] = v106 * v99;
    v123[7] = v107 * v100;
    v101 = (void *)objc_msgSend(a1, "newBufferWithBytes:length:options:", v123, 32, 0);
    v84 = v101;
    if (*a3)
      v102 = *a3;
    else
      v102 = CFSTR("com.apple.VideoToolbox.VTMetalTransferSession");
    objc_msgSend(v101, "setLabel:", v102);
  }
  else
  {
    v84 = 0;
    v85 = 0;
  }
  *a26 = v84;
  *a27 = v85;
  if (a29)
  {

    if (v114)
    {
      *a29 = v114;
      v114 = 0;
    }
  }

}

void setupBackgroundColor(float32_t a1, float a2, float a3, float a4, uint64_t a5, int a6, int a7, int a8, int a9, void *a10)
{
  uint64_t v14;
  const __CFDictionary *DescriptionWithPixelFormatType;
  float32_t v16;
  float32x4_t v17;
  float v18;
  float v19;
  unsigned int v20;
  __int16 v21;
  float32x4_t v22;
  int v28;
  unsigned int v29;
  __int16 v30;
  int v31;
  unsigned int v32;
  __int16 v33;
  int v34;
  unsigned int v35;
  __int16 v36;
  int v37;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  if (a10)
  {
    v14 = objc_msgSend(a10, "contents");
    DescriptionWithPixelFormatType = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
    if (DescriptionWithPixelFormatType
      && (CFDictionaryGetValue(DescriptionWithPixelFormatType, (const void *)*MEMORY[0x1E0CA9188]),
          FigCFEqual()))
    {
      vtmtsPopulateRGBToYCbCrMatrix(a7, a8, a9, (uint64_t)&v42);
      if (a8 == 1)
      {
        v16 = (float)((float)((float)(v43 * a2) + (float)(a1 * v42)) + (float)(a3 * v44)) + 0.062745098;
        v17.f32[0] = v16;
      }
      else
      {
        v17.f32[0] = (float)((float)(v43 * a2) + (float)(a1 * v42)) + (float)(a3 * v44);
      }
      v18 = (float)((float)((float)(v46 * a2) + (float)(a1 * v45)) + (float)(a3 * v47)) + 0.5;
      v19 = (float)((float)((float)(v49 * a2) + (float)(a1 * v48)) + (float)(a3 * v50)) + 0.5;
    }
    else
    {
      v18 = a2;
      v19 = a3;
      v17.f32[0] = a1;
    }
    switch(a6)
    {
      case 1:
        v20 = ((unsigned __int32)v17.i32[0] >> 23);
        if (v20 >= 0x70)
        {
          v28 = 127 - v20;
          if (v28 <= -15)
            LOWORD(v28) = -15;
          v21 = 15360 - ((_WORD)v28 << 10);
        }
        else
        {
          v21 = 0;
        }
        *(_WORD *)(v14 + 16) = v17.i16[1] & 0x8000 | ((unsigned __int32)v17.i32[0] >> 13) & 0x3FF | v21;
        v29 = (LODWORD(v18) >> 23);
        if (v29 >= 0x70)
        {
          v31 = 127 - v29;
          if (v31 <= -15)
            LOWORD(v31) = -15;
          v30 = 15360 - ((_WORD)v31 << 10);
        }
        else
        {
          v30 = 0;
        }
        *(_WORD *)(v14 + 18) = HIWORD(v18) & 0x8000 | (LODWORD(v18) >> 13) & 0x3FF | v30;
        v32 = (LODWORD(v19) >> 23);
        if (v32 >= 0x70)
        {
          v34 = 127 - v32;
          if (v34 <= -15)
            LOWORD(v34) = -15;
          v33 = 15360 - ((_WORD)v34 << 10);
        }
        else
        {
          v33 = 0;
        }
        *(_WORD *)(v14 + 20) = HIWORD(v19) & 0x8000 | (LODWORD(v19) >> 13) & 0x3FF | v33;
        v35 = (LODWORD(a4) >> 23);
        if (v35 >= 0x70)
        {
          v37 = 127 - v35;
          if (v37 <= -15)
            LOWORD(v37) = -15;
          v36 = 15360 - ((_WORD)v37 << 10);
        }
        else
        {
          v36 = 0;
        }
        *(_WORD *)(v14 + 22) = HIWORD(a4) & 0x8000 | (LODWORD(a4) >> 13) & 0x3FF | v36;
        break;
      case 2:
        *(_DWORD *)(v14 + 16) = v17.i32[0];
        *(float *)(v14 + 20) = v18;
        *(float *)(v14 + 24) = v19;
        *(float *)(v14 + 28) = a4;
        break;
      case 4:
        v17.f32[1] = v18;
        v17.i64[1] = __PAIR64__(LODWORD(a4), LODWORD(v19));
        v22 = vmulq_f32(v17, (float32x4_t)vdupq_n_s32(0x477FFF00u));
        __asm { FMOV            V2.2D, #0.5 }
        *(int16x4_t *)(v14 + 16) = vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v22.f32), _Q2))), (int16x4_t)vmovn_s64(vcvtq_s64_f64(vaddq_f64(vcvt_hight_f64_f32(v22), _Q2))));
        break;
      case 5:
        *(_BYTE *)(v14 + 16) = (int)(v17.f32[0] * 255.0 + 0.5);
        *(_BYTE *)(v14 + 17) = (int)(v18 * 255.0 + 0.5);
        *(_BYTE *)(v14 + 18) = (int)(v19 * 255.0 + 0.5);
        *(_BYTE *)(v14 + 19) = (int)(a4 * 255.0 + 0.5);
        break;
      default:
        return;
    }
  }
  else
  {
    FigSignalErrorAt();
  }
}

void VTMTSRenderPassDescriptorSetFunctionName(uint64_t a1, CFTypeRef cf)
{
  const void *v2;

  v2 = *(const void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = cf;
  if (cf)
    CFRetain(cf);
  if (v2)
    CFRelease(v2);
}

uint64_t vtAllocateMetalTextureForList(void *a1, unint64_t a2, unint64_t a3, uint64_t a4, CFIndex a5, CFArrayRef theArray)
{
  unint64_t v12;
  void *v13;
  uint64_t v14;
  void *ValueAtIndex;
  void *v17;
  void *v18;
  uint64_t v19;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (!theArray || CFArrayGetCount(theArray) < (unint64_t)a5 || !a1)
    goto LABEL_22;
  if (!a2)
    goto LABEL_8;
  v12 = objc_msgSend(a1, "maxTextureWidth2D");
  v13 = 0;
  v14 = 0;
  if (!a3 || v12 < a2)
    goto LABEL_10;
  if (objc_msgSend(a1, "maxTextureHeight2D") < a3
    || CFArrayGetCount(theArray) > a5
    && (ValueAtIndex = (void *)CFArrayGetValueAtIndex(theArray, a5)) != 0
    && (v17 = ValueAtIndex, objc_msgSend(ValueAtIndex, "width") == a2)
    && objc_msgSend(v17, "height") == a3
    && objc_msgSend(v17, "pixelFormat") == a4)
  {
LABEL_8:
    v14 = 0;
LABEL_9:
    v13 = 0;
    goto LABEL_10;
  }
  v18 = (void *)objc_msgSend(MEMORY[0x1E0CC6BB0], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", a4, a2, a3, 0);
  objc_msgSend(v18, "setUsage:", 3);
  v19 = objc_msgSend(a1, "newTextureWithDescriptor:", v18);
  if (!v19)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_22:
    v14 = FigSignalErrorAt();
    goto LABEL_9;
  }
  v13 = (void *)v19;
  if (CFArrayGetCount(theArray) == a5)
    CFArrayAppendValue(theArray, v13);
  else
    CFArraySetValueAtIndex(theArray, a5, v13);
  v14 = 0;
LABEL_10:

  return v14;
}

float vtmtsPopulateYCbCrToRGBMatrix(int a1, int a2, int a3, float32x4_t *a4)
{
  __int128 *v4;
  int32x4_t v5;
  __int128 v6;
  int v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float *f32;
  int v12;

  if ((a1 - 5) > 1)
  {
    a4[2].i32[0] = 0;
    if (a1 == 9)
      v4 = &YUVToRGBFull2020Matrix;
    else
      v4 = &YUVToRGBFull709Matrix;
  }
  else
  {
    a4[2].i32[0] = 0;
    v4 = &YUVToRGBFull601Matrix;
  }
  v5 = (int32x4_t)*v4;
  v6 = v4[1];
  *a4 = (float32x4_t)*v4;
  a4[1] = (float32x4_t)v6;
  if (a2 == 3)
  {
    if (a3 >= 16)
      v12 = 16;
    else
      v12 = a3;
    if (v12 <= 8)
      LOBYTE(v12) = 8;
    *(float *)v5.i32 = (float)~(-1 << (v12 - 1)) / (float)~(-1 << v12);
    a4->f32[0] = a4->f32[0] / *(float *)v5.i32;
    a4->f32[3] = a4->f32[3] / *(float *)v5.i32;
    f32 = &a4[1].f32[2];
    goto LABEL_20;
  }
  if (a2 == 1)
  {
    if (a3 >= 16)
      v7 = 16;
    else
      v7 = a3;
    if (v7 <= 8)
      v7 = 8;
    *(float *)v5.i32 = (float)~(-1 << v7);
    *(float32x2_t *)v5.i8 = vdiv_f32(vcvt_f32_s32(vadd_s32((int32x2_t)vshl_u32((uint32x2_t)0xE0000000DBLL, (uint32x2_t)vdup_n_s32(v7 - 8)), (int32x2_t)-1)), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v5.i8, 0));
    v8 = vdivq_f32(*a4, (float32x4_t)vzip1q_s32(v5, vrev64q_s32(v5)));
    v9 = (float32x4_t)vextq_s8((int8x16_t)vzip1q_s32(v5, v5), (int8x16_t)v5, 8uLL);
    v5.i32[0] = v5.i32[1];
    v10 = vdivq_f32(a4[1], v9);
    *a4 = v8;
    a4[1] = v10;
    f32 = a4[2].f32;
LABEL_20:
    *(float *)v5.i32 = *f32 / *(float *)v5.i32;
    *f32 = *(float *)v5.i32;
  }
  return *(float *)v5.i32;
}

double vtmtsPopulateRGBToYCbCrMatrix(int a1, int a2, int a3, uint64_t a4)
{
  __int128 *v4;
  __int128 v5;
  int32x4_t v6;
  int v7;
  float32x4_t v8;
  float v9;
  float *v10;
  unsigned int v11;
  int v12;
  uint64_t v13;

  if ((a1 - 5) > 1)
  {
    if (a1 == 9)
    {
      *(_DWORD *)(a4 + 32) = -1121666948;
      v4 = &RGBToYUVFull2020Matrix;
    }
    else
    {
      *(_DWORD *)(a4 + 32) = -1120155120;
      v4 = &RGBToYUVFull709Matrix;
    }
  }
  else
  {
    *(_DWORD *)(a4 + 32) = -1113159960;
    v4 = &RGBToYUVFull601Matrix;
  }
  v5 = *v4;
  v6 = (int32x4_t)v4[1];
  *(_OWORD *)a4 = *v4;
  *(int32x4_t *)(a4 + 16) = v6;
  if (a2 == 3)
  {
    v11 = 0;
    if (a3 >= 16)
      v12 = 16;
    else
      v12 = a3;
    if (v12 <= 8)
      LOBYTE(v12) = 8;
    v9 = (float)~(-1 << (v12 - 1)) / (float)~(-1 << v12);
    v10 = (float *)a4;
    goto LABEL_20;
  }
  if (a2 == 1)
  {
    if (a3 >= 16)
      v7 = 16;
    else
      v7 = a3;
    if (v7 <= 8)
      v7 = 8;
    *(float *)&v5 = (float)~(-1 << v7);
    *(float32x2_t *)v6.i8 = vdiv_f32(vcvt_f32_s32(vadd_s32((int32x2_t)vshl_u32((uint32x2_t)0xE0000000DBLL, (uint32x2_t)vdup_n_s32(v7 - 8)), (int32x2_t)-1)), (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v5, 0));
    v8 = (float32x4_t)vzip1q_s32(v6, v6);
    v8.i32[2] = v6.i32[0];
    *(float32x4_t *)a4 = vmulq_f32(v8, *(float32x4_t *)a4);
    v9 = *(float *)&v6.i32[1];
    *(float32x2_t *)(a4 + 16) = vmul_lane_f32(*(float32x2_t *)(a4 + 16), *(float32x2_t *)v6.i8, 1);
    v10 = (float *)(a4 + 24);
    v11 = 2;
LABEL_20:
    *v10 = v9 * *v10;
    v13 = a4 + 12 * v11;
    *(float32x2_t *)&v5 = vmul_n_f32(*(float32x2_t *)(v13 + 4), v9);
    *(_QWORD *)(v13 + 4) = v5;
  }
  return *(double *)&v5;
}

float matrixMultiply(float *a1, float *a2, float *a3)
{
  float result;

  *a3 = (float)((float)(a1[1] * a2[3]) + (float)(*a1 * *a2)) + (float)(a1[2] * a2[6]);
  a3[1] = (float)((float)(a1[1] * a2[4]) + (float)(*a1 * a2[1])) + (float)(a1[2] * a2[7]);
  a3[2] = (float)((float)(a1[1] * a2[5]) + (float)(*a1 * a2[2])) + (float)(a1[2] * a2[8]);
  a3[3] = (float)((float)(a1[4] * a2[3]) + (float)(a1[3] * *a2)) + (float)(a1[5] * a2[6]);
  a3[4] = (float)((float)(a1[4] * a2[4]) + (float)(a1[3] * a2[1])) + (float)(a1[5] * a2[7]);
  a3[5] = (float)((float)(a1[4] * a2[5]) + (float)(a1[3] * a2[2])) + (float)(a1[5] * a2[8]);
  a3[6] = (float)((float)(a1[7] * a2[3]) + (float)(a1[6] * *a2)) + (float)(a1[8] * a2[6]);
  a3[7] = (float)((float)(a1[7] * a2[4]) + (float)(a1[6] * a2[1])) + (float)(a1[8] * a2[7]);
  result = (float)((float)(a1[7] * a2[5]) + (float)(a1[6] * a2[2])) + (float)(a1[8] * a2[8]);
  a3[8] = result;
  return result;
}

uint64_t returnMetalFormatIfSamplable(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  if (a1 && a2)
  {
    MTLPixelFormatGetInfoForDevice();
    return 0;
  }
  return v2;
}

uint64_t RegisterVTMTSTextureDescriptor()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sVTMTSTextureDescriptorID = result;
  return result;
}

double vtMTSTextureDescriptorInit(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 64) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

__CFString *vtCopyVTMTSTextureDescriptorFormattingDesc(const void *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  void *v4;
  const __CFAllocator *v5;
  CFMutableStringRef v6;
  CFAllocatorRef v7;

  v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  v4 = (void *)MEMORY[0x194028B74]();
  v5 = CFGetAllocator(a1);
  v6 = CFStringCreateMutable(v5, 0);
  v7 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<VTMTSTextureDescriptor %p [%p]>{"), a1, v7);
  CFStringAppendFormat(Mutable, 0, CFSTR("\n%@}"), v6);
  if (v6)
    CFRelease(v6);
  objc_autoreleasePoolPop(v4);
  return Mutable;
}

uint64_t getEquivalentUncompressedPixelFormat(uint64_t a1)
{
  const __CFDictionary *DescriptionWithPixelFormatType;
  const __CFArray *Value;
  const __CFArray *v4;
  CFTypeID v5;
  int valuePtr;

  DescriptionWithPixelFormatType = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
  valuePtr = a1;
  if (DescriptionWithPixelFormatType)
  {
    Value = (const __CFArray *)CFDictionaryGetValue(DescriptionWithPixelFormatType, (const void *)*MEMORY[0x1E0CA91B0]);
    if (Value)
    {
      v4 = Value;
      v5 = CFGetTypeID(Value);
      if (v5 == CFArrayGetTypeID())
      {
        CFArrayGetValueAtIndex(v4, 0);
        FigCFDictionaryGetInt32IfPresent();
      }
    }
  }
  return a1;
}

uint64_t appendSrcTextureDescriptions(uint64_t a1, int a2, uint64_t a3, CFArrayRef theArray, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, int a10, int a11, int a12, uint64_t a13, uint64_t a14, int a15, int a16, int a17, uint64_t a18, uint64_t a19, int a20,int a21,int a22,uint64_t a23,uint64_t a24,int a25,int a26,int a27)
{
  unsigned __int8 *v33;
  int v34;
  const __CFDictionary *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int appended;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t result;
  _BYTE *v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  BOOL v54;
  float v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  char v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  __CFArray *v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  uint64_t v76;
  int v77;
  int v78;
  uint64_t v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  int Count;
  _DWORD *v92;
  uint64_t v93;
  int v94;
  int v95;
  int v96;
  __CFArray *v97;
  uint64_t v98;
  __int16 v99;
  int v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;

  v98 = a8;
  if (theArray)
    Count = CFArrayGetCount(theArray);
  else
    Count = 0;
  v33 = *(unsigned __int8 **)(a1 + 160);
  if (v33[18] || !*(_BYTE *)(a1 + 72))
  {
    v98 = 0;
    a9 = 0;
  }
  if (v33[19] || !*(_BYTE *)(a1 + 72))
    a13 = 0;
  v97 = theArray;
  v96 = a2;
  if (v33[16])
  {
    a18 = 0;
    a19 = 0;
  }
  v34 = *(_DWORD *)(a1 + 24);
  v35 = *(const __CFDictionary **)(a1 + 16);
  v36 = *(_QWORD *)(a1 + 152);
  v93 = a1;
  v37 = a3 + 152 * v34;
  v38 = *(_DWORD *)(a1 + 172);
  v92 = (_DWORD *)(v37 + 120);
  v100 = 0;
  v99 = 0;
  getCharacteristicsFromPixelDescription(v35, 0, (uint64_t)&v99 + 1, 0, &v100, (uint64_t)&v99, 0, 0);
  if (v33[6])
  {
    *(_QWORD *)&v101 = 0;
    if (!selectFunctionConstantForMetalDevice(v36, a5, a2, v37 + 52, v37 + 84, &v101, (int *)(v37 + 108)))
    {
      v43 = v93;
      v42 = a3;
      v41 = a2;
      goto LABEL_27;
    }
    appended = vtAppendTexDescSample(v36, theArray, (_DWORD *)v101, a5, 4, 0, 1, v34, 0, 0, 1, 1u);
    v40 = 0;
    if (!appended)
    {
      *(_BYTE *)(v37 + 127) = 0;
      *(_DWORD *)(a3 + 52 * v38 + 1352) = -1;
      *(_BYTE *)(v37 + 126) = 0;
      *v92 = 0;
      v40 = 1;
    }
  }
  else
  {
    v40 = 0;
  }
  v41 = a2;
  if ((v33[7] || a6 && !(v33[4] | v40))
    && (*(_QWORD *)&v101 = 0,
        selectFunctionConstantForMetalDevice(v36, a6, a2, v37 + 52, v37 + 84, &v101, (int *)(v37 + 108))))
  {
    v43 = v93;
    v42 = a3;
    if (!vtAppendTexDescSample(v36, v97, (_DWORD *)v101, a6, 4, 0, 1, v34, 0, 0, 1, 1u))
    {
      *v92 = a7;
      v40 = 1;
    }
    if (v40)
      goto LABEL_24;
  }
  else
  {
    v43 = v93;
    v42 = a3;
    if (v40)
    {
LABEL_24:
      result = 0;
      v45 = (_BYTE *)(v42 + 152 * *(int *)(v43 + 24));
      v45[115] = 1;
      v45[117] = 1;
      v45[112] = 0;
      v45[124] = 0;
      return result;
    }
  }
LABEL_27:
  v46 = a25;
  v47 = a26;
  v49 = a23;
  v48 = a24;
  ensureReadableFormatPair(*(_QWORD *)(v43 + 152), &v98, &a9);
  ensureReadableFormatPair(*(_QWORD *)(v43 + 152), &a13, &a14);
  ensureReadableFormatPair(*(_QWORD *)(v43 + 152), &a18, &a19);
  v95 = v46;
  if (!*(_QWORD *)(v43 + 152))
    goto LABEL_51;
  if (v49)
  {
    v104 = 0;
    v102 = 0u;
    v103 = 0u;
    v101 = 0u;
    MTLPixelFormatGetInfoForDevice();
    if ((BYTE8(v101) & 4) != 0)
      v50 = v49;
    else
      v50 = 0;
    if (v48)
      goto LABEL_33;
LABEL_37:
    v51 = 0;
    goto LABEL_38;
  }
  v50 = 0;
  if (!v48)
    goto LABEL_37;
LABEL_33:
  v104 = 0;
  v102 = 0u;
  v103 = 0u;
  v101 = 0u;
  MTLPixelFormatGetInfoForDevice();
  if ((BYTE8(v101) & 4) != 0)
    v51 = v48;
  else
    v51 = 0;
LABEL_38:
  if (v51)
    v52 = 1;
  else
    v52 = v48 == 0;
  if (v52)
    v53 = v50;
  else
    v53 = 0;
  if (v53)
    v54 = 1;
  else
    v54 = v49 == 0;
  if (v54)
    v48 = v51;
  else
    v48 = 0;
  v49 = v53;
LABEL_51:
  v55 = fmodf(*(float *)(v43 + 128), 4.0);
  v56 = a13;
  v57 = v98;
  if (*(_DWORD *)(v43 + 68) != 3)
    goto LABEL_56;
  v58 = Count;
  if (!(v98 | a13))
  {
    v66 = 0;
    goto LABEL_68;
  }
  v59 = *(_DWORD *)(v43 + 24);
  if (!*(_BYTE *)(v43 + 208))
  {
    v60 = *(_BYTE *)(v42 + 152 * v59 + 112);
    if (!v60)
      goto LABEL_55;
    if (v55 < 0.001 || v55 > 3.99)
    {
      v60 = (*(_BYTE *)(v43 + 136) & 3) == 0;
      goto LABEL_55;
    }
  }
  v60 = 0;
LABEL_55:
  *(_BYTE *)(v42 + 152 * v59 + 116) = v60;
LABEL_56:
  v61 = a14;
  *(_QWORD *)&v101 = 0;
  if (!v56
    || (v62 = *(_DWORD *)(v43 + 24), !*(_BYTE *)(v42 + 152 * v62 + 116))
    || v57 && !*(_BYTE *)(v42 + 152 * v62 + 124)
    || !selectFunctionConstantForMetalDevice(*(_QWORD *)(v43 + 152), v48, v41, v42 + 152 * v62 + 36, v42 + 152 * v62 + 68, &v101, 0))
  {
    v66 = 0;
    v58 = Count;
LABEL_68:
    if (v98)
    {
      if (!*(_BYTE *)(v43 + 73))
      {
        v78 = *(_DWORD *)(v43 + 24);
        if (*(_BYTE *)(v42 + 152 * v78 + 116))
        {
          if (!*(_BYTE *)(v42 + 152 * v78 + 124))
          {
            v79 = a9;
            result = vtAppendTexDescRead(*(_QWORD *)(v43 + 152), v97, (_DWORD *)(v42 + 152 * v78 + 4), v98, 0, 4, v78, v58, 1, 1);
            if ((_DWORD)result)
              return result;
            v80 = a12;
            v81 = *(_DWORD *)(v43 + 24);
            v82 = v42 + 152 * v81;
            *(_DWORD *)(v82 + 108) = *(_DWORD *)(v43 + 188);
            *(_DWORD *)(v82 + 120) = v80;
            if (v79)
            {
              result = vtAppendTexDescRead(*(_QWORD *)(v43 + 152), v97, (_DWORD *)(v42 + 152 * v81 + 8), v79, a10, a11, v81, v58 + 1, *(_DWORD *)(v43 + 196), *(_DWORD *)(v43 + 200));
              if ((_DWORD)result)
                return result;
              v81 = *(_DWORD *)(v43 + 24);
            }
            if (!*(_BYTE *)(v42 + 152 * v81 + 112))
            {
              result = 0;
              *(_DWORD *)(v42 + 152 * v81 + 108) = v41;
              return result;
            }
            return 0;
          }
        }
      }
    }
    v67 = a18;
    *(_QWORD *)&v101 = 0;
    if (!v49)
    {
LABEL_71:
      v68 = a19;
      *(_QWORD *)&v101 = 0;
      if (!v67)
        return 4294954391;
      v94 = v47;
      result = vtAppendTexDescRead(*(_QWORD *)(v43 + 152), v97, (_DWORD *)(v42 + 152 * *(int *)(v43 + 24) + 20), v67, 0, 1, *(_DWORD *)(v43 + 24), v58, 1, 1);
      if ((_DWORD)result)
        return result;
      v72 = a22;
      v73 = v58;
      v74 = v58 + 1;
      v75 = *(_DWORD *)(v43 + 24);
      v76 = v42 + 152 * v75;
      *(_DWORD *)(v76 + 108) = *(_DWORD *)(v43 + 188);
      *(_DWORD *)(v76 + 120) = v72;
      *(_BYTE *)(v76 + 116) = 0;
      if (v68)
      {
        result = vtAppendTexDescRead(*(_QWORD *)(v43 + 152), v97, (_DWORD *)(v42 + 152 * v75 + 24), v68, a20, a21, v75, v74, *(_DWORD *)(v43 + 196), *(_DWORD *)(v43 + 200));
        v77 = v96;
        if ((_DWORD)result)
          return result;
        v74 = v73 + 2;
        v75 = *(_DWORD *)(v43 + 24);
      }
      else
      {
        v77 = v96;
      }
      if (v48)
      {
        if (!selectFunctionConstantForMetalDevice(*(_QWORD *)(v43 + 152), v48, v77, v42 + 152 * v75 + 52, v42 + 152 * v75 + 84, &v101, 0))return 4294954391;
        v86 = *(_DWORD *)(v43 + 24);
        if (*(_BYTE *)(v42 + 152 * v86 + 112))
          v87 = 1;
        else
          v87 = 2;
        result = vtAppendTexDescSample(*(_QWORD *)(v43 + 152), v97, (_DWORD *)v101, v49, v87, 0, 1, v86, v74, v66, 1, 1u);
        if ((_DWORD)result)
          return result;
        v88 = v42 + 152 * *(int *)(v43 + 24);
        if (!selectFunctionConstantForMetalDevice(*(_QWORD *)(v43 + 152), v48, v77, v88 + 56, v88 + 88, &v101, 0))return 4294954391;
        result = vtAppendTexDescSample(*(_QWORD *)(v43 + 152), v97, (_DWORD *)v101, v48, 2, v95, v94, *(_DWORD *)(v43 + 24), v74 + 1, v66 + 1, *(_DWORD *)(v43 + 196), *(_DWORD *)(v43 + 200));
        if ((_DWORD)result)
          return result;
        v75 = *(_DWORD *)(v43 + 24);
      }
      if (!*(_BYTE *)(v42 + 152 * v75 + 112))
      {
        result = 0;
        *(_DWORD *)(v42 + 152 * v75 + 108) = v77;
        return result;
      }
      return 0;
    }
    v69 = *(_DWORD *)(v43 + 24);
    if ((!a18
       || *(_BYTE *)(v42 + 152 * v69 + 124)
       || *(_DWORD *)(v43 + 68) == 2
       || !*(_BYTE *)(v42 + 152 * v69 + 112)
       || *(_BYTE *)(v43 + 73))
      && selectFunctionConstantForMetalDevice(*(_QWORD *)(v43 + 152), v49, v41, v42 + 152 * v69 + 52, v42 + 152 * v69 + 84, &v101, (int *)(v42 + 152 * v69 + 108)))
    {
      v70 = *(_DWORD *)(v43 + 24);
      if (*(_BYTE *)(v42 + 152 * v70 + 112))
      {
        v71 = 1;
      }
      else if (*(_BYTE *)(v42 + 152 * v70 + 115))
      {
        v71 = 4;
      }
      else
      {
        v71 = 2;
      }
      result = vtAppendTexDescSample(*(_QWORD *)(v43 + 152), v97, (_DWORD *)v101, v49, v71, 0, 1, v70, v58, v66, 1, 1u);
      if ((_DWORD)result)
        return result;
      if (!v48)
      {
LABEL_100:
        result = 0;
        v84 = a27;
        v85 = v42 + 152 * *(int *)(v43 + 24);
        *(_BYTE *)(v85 + 124) = 0;
        *(_DWORD *)(v85 + 120) = v84;
        *(_BYTE *)(v85 + 116) = 0;
        return result;
      }
      ++v58;
      ++v66;
      v83 = v42 + 152 * *(int *)(v43 + 24);
      if (selectFunctionConstantForMetalDevice(*(_QWORD *)(v43 + 152), v48, v41, v83 + 56, v83 + 88, &v101, (int *)(v83 + 108)))
      {
        result = vtAppendTexDescSample(*(_QWORD *)(v43 + 152), v97, (_DWORD *)v101, v48, 2, v95, v47, *(_DWORD *)(v43 + 24), v58, v66, *(_DWORD *)(v43 + 196), *(_DWORD *)(v43 + 200));
        if ((_DWORD)result)
          return result;
        goto LABEL_100;
      }
    }
    v67 = a18;
    goto LABEL_71;
  }
  result = vtAppendTexDescRead(*(_QWORD *)(v43 + 152), v97, (_DWORD *)v101, v56, 0, a16, *(_DWORD *)(v43 + 24), Count, 1, 1);
  if ((_DWORD)result)
    return result;
  v63 = *(_DWORD *)(v43 + 24);
  v64 = v42 + 152 * v63;
  *(_BYTE *)(v64 + 124) = 0;
  *(_DWORD *)(v64 + 120) = 0;
  if (v61)
  {
    v65 = v97;
    if (*(_BYTE *)(v43 + 73))
    {
      v58 = Count + 1;
      if (!v48)
        return 0;
    }
    else
    {
      if (!selectFunctionConstantForMetalDevice(*(_QWORD *)(v43 + 152), v48, v41, v42 + 152 * v63 + 40, v42 + 152 * v63 + 72, &v101, (int *)(v42 + 152 * v63 + 108)))
      {
        v66 = 1;
        v58 = Count + 1;
        goto LABEL_68;
      }
      result = vtAppendTexDescRead(*(_QWORD *)(v43 + 152), v97, (_DWORD *)v101, v61, a15, a17, *(_DWORD *)(v43 + 24), Count + 1, *(_DWORD *)(v43 + 196), *(_DWORD *)(v43 + 200));
      if ((_DWORD)result)
        return result;
      v58 = Count + 2;
      if (!v48)
        return 0;
    }
  }
  else
  {
    v58 = Count + 1;
    v65 = v97;
    if (!v48)
      return 0;
  }
  if (!*(_BYTE *)(v43 + 73))
    return 0;
  v89 = v42 + 152 * *(int *)(v43 + 24);
  v66 = 1;
  if (!selectFunctionConstantForMetalDevice(*(_QWORD *)(v43 + 152), v48, v41, v89 + 56, v89 + 88, &v101, (int *)(v89 + 108)))goto LABEL_68;
  result = vtAppendTexDescSample(*(_QWORD *)(v43 + 152), v65, (_DWORD *)v101, v48, 2, v95, v47, *(_DWORD *)(v43 + 24), v58, 1, *(_DWORD *)(v43 + 196), *(_DWORD *)(v43 + 200));
  if (!(_DWORD)result)
    return 0;
  return result;
}

uint64_t appendSrcTextureDescriptions_4PlaneSample(uint64_t a1, int a2, uint64_t a3, CFArrayRef theArray, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  int Count;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t result;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  int v27;
  int v28;
  _QWORD v29[5];

  v29[4] = *MEMORY[0x1E0C80C00];
  if (theArray)
    Count = CFArrayGetCount(theArray);
  else
    Count = 0;
  v18 = 0;
  v25 = 0;
  v29[0] = a5;
  v29[1] = a6;
  v29[2] = a7;
  v29[3] = a8;
  v19 = a3 + 52;
  v20 = Count;
  v27 = 1;
  v28 = a9;
  v26 = 0x100000001;
  while (1)
  {
    v21 = v29[v18];
    if (!v21)
    {
LABEL_9:
      result = 0;
      v24 = a3 + 152 * *(int *)(a1 + 24);
      *(_BYTE *)(v24 + 124) = 0;
      *(_DWORD *)(v24 + 120) = 0;
      *(_BYTE *)(v24 + 116) = 0;
      return result;
    }
    v22 = *((_DWORD *)&v26 + v18);
    result = selectFunctionConstantForMetalDevice(*(_QWORD *)(a1 + 152), v29[v18], a2, v19 + 152 * *(int *)(a1 + 24), v19 + 152 * *(int *)(a1 + 24) + 32, &v25, (int *)(a3 + 152 * *(int *)(a1 + 24) + 108));
    if (!(_DWORD)result)
      return result;
    if (vtAppendTexDescSample(*(_QWORD *)(a1 + 152), theArray, v25, v21, 2, v18, v22, *(_DWORD *)(a1 + 24), v20 + (int)v18, v18, 1, 1u))return 4294954391;
    ++v18;
    v19 += 4;
    if (v18 == 4)
      goto LABEL_9;
  }
}

uint64_t ensureReadableFormatPair(uint64_t result, _QWORD *a2, uint64_t *a3)
{
  uint64_t v5;

  if (result && a2 && a3)
  {
    v5 = *a3;
    if (*a2)
    {
      result = MTLPixelFormatGetInfoForDevice();
      if (!v5)
      {
LABEL_8:
        *a2 = 0;
        *a3 = 0;
        return result;
      }
    }
    else if (!v5)
    {
      goto LABEL_8;
    }
    result = MTLPixelFormatGetInfoForDevice();
    goto LABEL_8;
  }
  return result;
}

uint64_t selectFunctionConstantForMetalDevice(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, _QWORD *a6, int *a7)
{
  uint64_t result;
  int v14;
  _BYTE v15[3];

  result = 0;
  if (!a1 || !a2)
    return result;
  MTLPixelFormatGetInfoForDevice();
  if ((*(_DWORD *)v15 & 0x20000) != 0)
  {
    result = 1;
    v14 = 1;
    if (a3 == 1 || (v15[2] & 1) == 0)
      goto LABEL_9;
    goto LABEL_8;
  }
  if ((v15[2] & 1) != 0)
  {
LABEL_8:
    v14 = 2;
    result = 1;
    a4 = a5;
    goto LABEL_9;
  }
  result = 0;
  a4 = 0;
  v14 = 0;
LABEL_9:
  if (a6)
    *a6 = a4;
  if (a7)
    *a7 = v14;
  return result;
}

uint64_t vtAppendTexDescSample(uint64_t a1, __CFArray *a2, _DWORD *a3, uint64_t a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, unsigned int a12)
{
  uint64_t Instance;

  if (!a2)
    return 4294954391;
  if (!returnMetalFormatIfSamplable(a1, a4))
    return 4294954391;
  MEMORY[0x1940281CC](&VTMTSTextureDescriptorGetTypeID_sRegisterVTMTSTextureDescriptorOnce, RegisterVTMTSTextureDescriptor);
  Instance = _CFRuntimeCreateInstance();
  *(_DWORD *)(Instance + 16) = 0;
  *(_DWORD *)(Instance + 20) = a8;
  *(_DWORD *)(Instance + 24) = a6;
  *(_QWORD *)(Instance + 32) = a4;
  *(_DWORD *)(Instance + 40) = a7;
  *(_DWORD *)(Instance + 44) = a9;
  *(_DWORD *)(Instance + 48) = a5;
  *(_DWORD *)(Instance + 52) = a10;
  *(_DWORD *)(Instance + 56) = a11;
  *(_QWORD *)(Instance + 60) = a12;
  CFArrayAppendValue(a2, (const void *)Instance);
  if (a3)
    *a3 = a9;
  CFRelease((CFTypeRef)Instance);
  return 0;
}

uint64_t vtAppendTexDescRead(uint64_t a1, __CFArray *a2, _DWORD *a3, uint64_t a4, int a5, int a6, int a7, int a8, int a9, int a10)
{
  uint64_t Instance;

  if (!a2)
    return 4294954391;
  if (a1)
  {
    if (a4)
      MTLPixelFormatGetInfoForDevice();
    return 4294954391;
  }
  if (!a4)
    return 4294954391;
  MEMORY[0x1940281CC](&VTMTSTextureDescriptorGetTypeID_sRegisterVTMTSTextureDescriptorOnce, RegisterVTMTSTextureDescriptor);
  Instance = _CFRuntimeCreateInstance();
  *(_DWORD *)(Instance + 16) = 0;
  *(_DWORD *)(Instance + 20) = a7;
  *(_DWORD *)(Instance + 24) = a5;
  *(_QWORD *)(Instance + 32) = a4;
  *(_DWORD *)(Instance + 40) = a6;
  *(_DWORD *)(Instance + 44) = a8;
  *(_DWORD *)(Instance + 48) = 0;
  *(_DWORD *)(Instance + 60) = a10;
  *(_DWORD *)(Instance + 64) = 0;
  *(_DWORD *)(Instance + 56) = a9;
  CFArrayAppendValue(a2, (const void *)Instance);
  if (a3)
    *a3 = a8;
  CFRelease((CFTypeRef)Instance);
  return 0;
}

uint64_t returnMetalFormatIfWritable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const __CFDictionary *DescriptionWithPixelFormatType;
  const __CFArray *Value;
  const __CFArray *v7;
  CFTypeID v8;

  DescriptionWithPixelFormatType = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
  if (DescriptionWithPixelFormatType)
  {
    Value = (const __CFArray *)CFDictionaryGetValue(DescriptionWithPixelFormatType, (const void *)*MEMORY[0x1E0CA91B0]);
    if (Value)
    {
      v7 = Value;
      v8 = CFGetTypeID(Value);
      if (v8 == CFArrayGetTypeID())
      {
        CFArrayGetValueAtIndex(v7, 0);
        FigCFDictionaryGetInt32IfPresent();
      }
    }
  }
  if (!a1)
    return a3;
  if (a3)
    MTLPixelFormatGetInfoForDevice();
  return 0;
}

uint64_t appendDstTextureDescriptions(unsigned int *a1, int a2, uint64_t a3, __CFArray *a4, int a5, uint64_t a6, int a7, uint64_t a8, int a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, int a15, int a16, int a17, int a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,int a23,int a24,int a25,int a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,int a31,int a32,int a33,int a34,int a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,int a40,int a41,int a42,int a43,int a44)
{
  int v46;
  int v51;
  _BYTE *v52;
  unsigned int v53;
  const __CFDictionary *v54;
  uint64_t v55;
  char v56;
  char v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  uint64_t result;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  uint64_t v68;
  int v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  unsigned int v85;
  int v86;
  _BYTE *v87;
  uint64_t v88;
  int v89;
  int v90;
  uint64_t v91;
  int v92;
  int v93;
  int v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  signed int v103;
  uint64_t v105;
  int v107;
  __int16 v108;
  int v109;
  _DWORD *v110;
  _DWORD *v111[2];

  v46 = a5;
  v51 = a1[1];
  v52 = (_BYTE *)*((_QWORD *)a1 + 13);
  if (v52[22] || *((_BYTE *)a1 + 68))
  {
    a10 = 0;
    a11 = 0;
    a12 = 0;
  }
  if (v52[23] || *((_BYTE *)a1 + 68))
  {
    a19 = 0;
    a20 = 0;
    a21 = 0;
  }
  if (v52[20])
  {
    a27 = 0;
    a28 = 0;
    a29 = 0;
  }
  if (v52[21])
  {
    a36 = 0;
    a37 = 0;
    a38 = 0;
  }
  v53 = a1[6];
  if (v53 == 2)
  {
    v54 = (const __CFDictionary *)*((_QWORD *)a1 + 2);
    v55 = *((_QWORD *)a1 + 12);
    v103 = a1[29];
    v109 = 0;
    v108 = 0;
    getCharacteristicsFromPixelDescription(v54, 0, (uint64_t)&v108 + 1, 0, &v109, (uint64_t)&v108, 0, 0);
    v56 = v52[12];
    v107 = a2;
    if (v56)
    {
      if (!selectFunctionConstantForMetalDevice(v55, a6, a2, 0, 0, 0, (int *)(a3 + 1296)))
      {
LABEL_26:
        v53 = a1[6];
        v46 = a5;
        a2 = v107;
        goto LABEL_27;
      }
      v57 = 1;
      if (vtAppendTexDescRender(v55, a4, a6, 0, 1, 0, 1, 1))
      {
        v56 = 0;
      }
      else
      {
        v57 = 0;
        *(_WORD *)(a3 + 1305) = 0;
        *(_DWORD *)(a3 + 52 * v103 + 1352) = -1;
        *(_DWORD *)(a3 + 1312) = a7;
        v56 = 1;
      }
    }
    else
    {
      v57 = 1;
    }
    if (!v52[13])
    {
      if (v52[10])
        v56 = 1;
      if (!a8 || (v56 & 1) != 0)
        goto LABEL_25;
    }
    if (selectFunctionConstantForMetalDevice(v55, a8, v107, 0, 0, 0, (int *)(a3 + 1296))
      && !vtAppendTexDescRender(v55, a4, a8, 0, 1, 0, 1, 1))
    {
      *(_DWORD *)(a3 + 1312) = a9;
    }
    else
    {
LABEL_25:
      if ((v57 & 1) != 0)
        goto LABEL_26;
    }
    result = 0;
    *(_BYTE *)(a3 + 1301) = 1;
LABEL_56:
    *(_BYTE *)(a3 + 1316) = 0;
    return result;
  }
LABEL_27:
  v58 = *((_QWORD *)a1 + 12);
  if (v53 == 3)
  {
    ensureWritableFormatTriple(v58, *a1, &a10, &a11, &a12);
    ensureWritableFormatTriple(*((_QWORD *)a1 + 12), *a1, &a19, &a20, &a21);
    ensureWritableFormatTriple(*((_QWORD *)a1 + 12), *a1, &a27, &a28, &a29);
    ensureWritableFormatTriple(*((_QWORD *)a1 + 12), *a1, &a36, &a37, &a38);
  }
  else
  {
    ensureRenderableFormatTriple(v58, &a10, &a11, &a12);
    ensureRenderableFormatTriple(*((_QWORD *)a1 + 12), &a19, &a20, &a21);
    ensureRenderableFormatTriple(*((_QWORD *)a1 + 12), &a27, &a28, &a29);
    ensureRenderableFormatTriple(*((_QWORD *)a1 + 12), &a36, &a37, &a38);
  }
  v59 = a1[6];
  v60 = a19;
  v61 = a10;
  if (v59 == 3)
  {
    if (!(a10 | a19))
      goto LABEL_58;
    if (*((_BYTE *)a1 + 144))
    {
      v62 = (a1[18] & 3) == 0 && (a1[20] & 3) == 0;
      *(_BYTE *)(a3 + 1300) = v62;
    }
  }
  v65 = a20;
  v64 = a21;
  v110 = 0;
  if (v59 == 2 || !v60 || !*(_BYTE *)(a3 + 1300) || v61 && !*(_BYTE *)(a3 + 1316))
    goto LABEL_58;
  *(_BYTE *)(a3 + 1316) = 0;
  *(_DWORD *)(a3 + 1312) = 0;
  if (!selectFunctionConstantForMetalDevice(*((_QWORD *)a1 + 12), v60, a2, a3 + 1248, a3 + 1272, &v110, (int *)(a3 + 1296)))goto LABEL_58;
  result = vtAppendTexDescWrite(*((_QWORD *)a1 + 12), *a1, a4, v110, v60, 0, a24, v51, 1, 1);
  if ((_DWORD)result)
    return result;
  if (!v65)
    goto LABEL_55;
  if (!selectFunctionConstantForMetalDevice(*((_QWORD *)a1 + 12), v65, a2, a3 + 1252, a3 + 1276, &v110, (int *)(a3 + 1296)))
  {
    ++v51;
    goto LABEL_58;
  }
  if (v46 == 1)
  {
    v66 = a1[34];
    v67 = a1[35];
  }
  else
  {
    v66 = 1;
    v67 = 1;
  }
  result = vtAppendTexDescWrite(*((_QWORD *)a1 + 12), *a1, a4, v110, v65, a22, a25, v51 + 1, v66, v67);
  if ((_DWORD)result)
    return result;
  if (!v64)
  {
LABEL_55:
    result = 0;
    goto LABEL_56;
  }
  v51 += 2;
  if (!selectFunctionConstantForMetalDevice(*((_QWORD *)a1 + 12), v64, a2, a3 + 1256, a3 + 1280, &v110, (int *)(a3 + 1296)))
  {
LABEL_58:
    v68 = a10;
    if (a10 && a1[6] != 2 && *(_BYTE *)(a3 + 1300))
    {
      v69 = v46;
      v70 = a15;
      v71 = a18;
      v73 = a11;
      v72 = a12;
      *(_DWORD *)(a3 + 1296) = a1[33];
      *(_DWORD *)(a3 + 1312) = v71;
      result = vtAppendTexDescWrite(*((_QWORD *)a1 + 12), *a1, a4, (_DWORD *)(a3 + 1224), v68, 0, v70, v51, 1, 1);
      if (!(_DWORD)result)
      {
        if (!v73)
          return 0;
        if (v69 == 1)
        {
          v74 = a1[34];
          v75 = a1[35];
        }
        else
        {
          v74 = 1;
          v75 = 1;
        }
        result = vtAppendTexDescWrite(*((_QWORD *)a1 + 12), *a1, a4, (_DWORD *)(a3 + 1228), v73, a13, a16, v51 + 1, v74, v75);
        if (!(_DWORD)result)
        {
          if (!v72)
            return 0;
          result = vtAppendTexDescWrite(*((_QWORD *)a1 + 12), *a1, a4, (_DWORD *)(a3 + 1232), v72, a14, a17, v51 + 2, 1, 1);
          if (!(_DWORD)result)
            return 0;
        }
      }
      return result;
    }
    v76 = a2;
    v77 = a36;
    v78 = a37;
    v111[0] = 0;
    if (!a36)
      goto LABEL_99;
    v105 = a38;
    v80 = a41;
    v79 = a42;
    v82 = a39;
    v81 = a40;
    v84 = a43;
    v83 = a44;
    if (a27)
    {
      v85 = a1[6];
      if (!*(_BYTE *)(a3 + 1316))
      {
        if (v85 == 2)
        {
          v86 = a42;
          v101 = a40;
          v102 = a43;
          v87 = (_BYTE *)(a3 + 1316);
          *(_DWORD *)(a3 + 1296) = v76;
          *(_BYTE *)(a3 + 1316) = 0;
          *(_BYTE *)(a3 + 1300) = 0;
          *(_DWORD *)(a3 + 1312) = v83;
          v88 = *((_QWORD *)a1 + 12);
LABEL_73:
          result = vtAppendTexDescRender(v88, a4, v77, 0, v80, 0, 1, 1);
          if ((_DWORD)result)
            return result;
          if (v78)
          {
            result = vtAppendTexDescRender(*((_QWORD *)a1 + 12), a4, v78, v82, v86, 1, a1[34], a1[35]);
            if ((_DWORD)result)
              return result;
            if (v105)
            {
              result = vtAppendTexDescRender(*((_QWORD *)a1 + 12), a4, v105, v101, v102, 2, a1[34], a1[35]);
              if ((_DWORD)result)
                return result;
            }
          }
LABEL_97:
          result = 0;
          *v87 = 0;
          return result;
        }
        goto LABEL_99;
      }
    }
    else
    {
      v85 = a1[6];
    }
    *(_DWORD *)(a3 + 1296) = v76;
    *(_BYTE *)(a3 + 1316) = 0;
    *(_BYTE *)(a3 + 1300) = 0;
    *(_DWORD *)(a3 + 1312) = v83;
    v88 = *((_QWORD *)a1 + 12);
    v101 = v81;
    v102 = v84;
    if (v85 == 2)
    {
      v86 = v79;
      v87 = (_BYTE *)(a3 + 1316);
      goto LABEL_73;
    }
    v100 = v79;
    if (selectFunctionConstantForMetalDevice(v88, v77, v76, a3 + 1260, a3 + 1284, v111, (int *)(a3 + 1296)))
    {
      result = vtAppendTexDescWrite(*((_QWORD *)a1 + 12), *a1, a4, v111[0], v77, 0, v80, v51, 1, 1);
      if ((_DWORD)result)
        return result;
      if (!v78)
        goto LABEL_96;
      if (!selectFunctionConstantForMetalDevice(*((_QWORD *)a1 + 12), v78, v76, a3 + 1264, a3 + 1288, v111, (int *)(a3 + 1296)))
      {
        ++v51;
        goto LABEL_99;
      }
      if (v46 == 1)
      {
        v89 = a1[34];
        v90 = a1[35];
      }
      else
      {
        v89 = 1;
        v90 = 1;
      }
      result = vtAppendTexDescWrite(*((_QWORD *)a1 + 12), *a1, a4, v111[0], v78, v82, v100, v51 + 1, v89, v90);
      if ((_DWORD)result)
        return result;
      if (!v105)
      {
LABEL_96:
        v87 = (_BYTE *)(a3 + 1316);
        goto LABEL_97;
      }
      v51 += 2;
      if (selectFunctionConstantForMetalDevice(*((_QWORD *)a1 + 12), v105, v76, a3 + 1268, a3 + 1292, v111, (int *)(a3 + 1296)))
      {
        result = vtAppendTexDescWrite(*((_QWORD *)a1 + 12), *a1, a4, v111[0], v105, v101, v102, v51, 1, 1);
        v87 = (_BYTE *)(a3 + 1316);
        if ((_DWORD)result)
          return result;
        goto LABEL_97;
      }
    }
LABEL_99:
    v91 = a27;
    if (a27 && a1[6] != 2)
    {
      v93 = v46;
      v94 = a32;
      v95 = a35;
      v97 = a28;
      v96 = a29;
      *(_DWORD *)(a3 + 1296) = a1[33];
      *(_DWORD *)(a3 + 1312) = v95;
      *(_BYTE *)(a3 + 1300) = 0;
      LODWORD(result) = vtAppendTexDescWrite(*((_QWORD *)a1 + 12), *a1, a4, (_DWORD *)(a3 + 1236), v91, 0, v94, v51, 1, 1);
      if ((_DWORD)result
        || v97
        && (v93 != 1 ? (v98 = 1, v99 = 1) : (v98 = a1[34], v99 = a1[35]),
            (LODWORD(result) = vtAppendTexDescWrite(*((_QWORD *)a1 + 12), *a1, a4, (_DWORD *)(a3 + 1240), v97, a30, a33, v51 + 1, v98, v99), (_DWORD)result)|| v96&& (LODWORD(result) = vtAppendTexDescWrite(*((_QWORD *)a1 + 12), *a1, a4, (_DWORD *)(a3 + 1244), v96, a31,
                                 a34,
                                 v51 + 2,
                                 1,
                                 1),
             (_DWORD)result)))
      {
        v92 = 0;
      }
      else
      {
        LODWORD(result) = 0;
        v92 = 1;
      }
    }
    else
    {
      v92 = 0;
      LODWORD(result) = 0;
    }
    if ((_DWORD)result)
      v92 = 1;
    if (v92)
      return result;
    else
      return 4294954391;
  }
  result = vtAppendTexDescWrite(*((_QWORD *)a1 + 12), *a1, a4, v110, v64, a23, a26, v51, 1, 1);
  if (!(_DWORD)result)
    goto LABEL_55;
  return result;
}

uint64_t ensureWritableFormatTriple(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;

  if (result && a3 && a4 && a5)
  {
    v9 = result;
    v10 = *a3;
    v11 = *a4;
    v12 = *a5;
    v13 = returnMetalFormatIfWritable(result, a2, *a3);
    v14 = returnMetalFormatIfWritable(v9, a2, v11);
    result = returnMetalFormatIfWritable(v9, a2, v12);
    if (v10)
      v15 = v13 == 0;
    else
      v15 = 0;
    v16 = !v15;
    if (v15)
      v17 = 0;
    else
      v17 = v14;
    if (v11)
      v18 = v17 == 0;
    else
      v18 = 0;
    v19 = !v18;
    if ((v19 & v16) != 0)
      v20 = result;
    else
      v20 = 0;
    if (v12)
      v21 = v20 == 0;
    else
      v21 = 0;
    v22 = !v21;
    v23 = v22 & v19;
    if (!v23)
      v17 = 0;
    if ((v16 & v23) != 0)
      v24 = v13;
    else
      v24 = 0;
    *a3 = v24;
    if (v22)
      v25 = v20;
    else
      v25 = 0;
    *a4 = v17;
    *a5 = v25;
  }
  return result;
}

uint64_t ensureRenderableFormatTriple(uint64_t result, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;

  if (result && a2 && a3 && a4)
  {
    v7 = *a3;
    v8 = *a4;
    if (*a2)
    {
      result = MTLPixelFormatGetInfoForDevice();
      if (v7)
        goto LABEL_7;
    }
    else if (v7)
    {
LABEL_7:
      result = MTLPixelFormatGetInfoForDevice();
      if (!v8)
      {
LABEL_11:
        *a2 = 0;
        *a3 = 0;
        *a4 = 0;
        return result;
      }
LABEL_8:
      result = MTLPixelFormatGetInfoForDevice();
      goto LABEL_11;
    }
    if (!v8)
      goto LABEL_11;
    goto LABEL_8;
  }
  return result;
}

uint64_t vtAppendTexDescRender(uint64_t a1, __CFArray *a2, uint64_t a3, int a4, int a5, int a6, int a7, int a8)
{
  uint64_t Instance;

  if (!a2)
    return 4294954391;
  if (!returnMetalFormatIfRenderable(a1, a3))
    return 4294954391;
  MEMORY[0x1940281CC](&VTMTSTextureDescriptorGetTypeID_sRegisterVTMTSTextureDescriptorOnce, RegisterVTMTSTextureDescriptor);
  Instance = _CFRuntimeCreateInstance();
  *(_QWORD *)(Instance + 16) = 1;
  *(_DWORD *)(Instance + 24) = a4;
  *(_QWORD *)(Instance + 32) = a3;
  *(_DWORD *)(Instance + 40) = a5;
  *(_DWORD *)(Instance + 44) = a6;
  *(_DWORD *)(Instance + 48) = 0;
  *(_DWORD *)(Instance + 60) = a8;
  *(_DWORD *)(Instance + 64) = 1;
  *(_DWORD *)(Instance + 56) = a7;
  CFArrayAppendValue(a2, (const void *)Instance);
  CFRelease((CFTypeRef)Instance);
  return 0;
}

uint64_t returnMetalFormatIfRenderable(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  if (a1 && a2)
  {
    MTLPixelFormatGetInfoForDevice();
    return 0;
  }
  return v2;
}

uint64_t vtAppendTexDescWrite(uint64_t a1, uint64_t a2, __CFArray *a3, _DWORD *a4, uint64_t a5, int a6, int a7, int a8, int a9, int a10)
{
  uint64_t Instance;

  if (!a3)
    return 4294954391;
  if (!returnMetalFormatIfWritable(a1, a2, a5))
    return 4294954391;
  MEMORY[0x1940281CC](&VTMTSTextureDescriptorGetTypeID_sRegisterVTMTSTextureDescriptorOnce, RegisterVTMTSTextureDescriptor);
  Instance = _CFRuntimeCreateInstance();
  *(_QWORD *)(Instance + 16) = 1;
  *(_DWORD *)(Instance + 24) = a6;
  *(_QWORD *)(Instance + 32) = a5;
  *(_DWORD *)(Instance + 40) = a7;
  *(_DWORD *)(Instance + 44) = a8;
  *(_DWORD *)(Instance + 48) = 0;
  *(_DWORD *)(Instance + 60) = a10;
  *(_DWORD *)(Instance + 64) = 0;
  *(_DWORD *)(Instance + 56) = a9;
  CFArrayAppendValue(a3, (const void *)Instance);
  if (a4)
    *a4 = a8;
  CFRelease((CFTypeRef)Instance);
  return 0;
}

uint64_t formatSupportsChangeRange(int a1)
{
  uint64_t result;
  int v3;
  unsigned __int16 v4;
  unsigned __int16 v5;
  unsigned __int16 v6;
  unsigned __int16 v7;

  result = 0;
  if (a1 > 1952855091)
  {
    if (a1 <= 2019963441)
    {
      if (a1 <= 1982882103)
      {
        if (a1 > 1953903153)
        {
          if (a1 == 1953903154)
            return 1;
          v6 = 13364;
        }
        else
        {
          if (a1 == 1952855092)
            return 1;
          v6 = 12848;
        }
        v3 = v6 | 0x74760000;
        goto LABEL_58;
      }
      if (a1 <= 2016686641)
      {
        if (a1 == 1982882104)
          return 1;
        v3 = 2016686640;
        goto LABEL_58;
      }
      if (a1 == 2016686642 || a1 == 2016687156)
        return 1;
      v5 = 12848;
    }
    else
    {
      if (a1 > 2021077551)
      {
        if (a1 <= 2021078067)
        {
          if (a1 == 2021077552)
            return 1;
          v3 = 2021077554;
        }
        else
        {
          if (a1 == 2021078068 || a1 == 2037741171)
            return 1;
          v3 = 2037741158;
        }
        goto LABEL_58;
      }
      if (a1 > 2020619315)
      {
        if (a1 == 2020619316 || a1 == 2020632116)
          return 1;
        v3 = 2020636468;
        goto LABEL_58;
      }
      if (a1 == 2019963442)
        return 1;
      v5 = 13364;
    }
    v3 = v5 | 0x78660000;
    goto LABEL_58;
  }
  if (a1 <= 1751527985)
  {
    if (a1 > 875704933)
    {
      if (a1 > 875836517)
      {
        if (a1 == 875836518 || a1 == 875836534)
          return 1;
        v4 = 12848;
LABEL_40:
        v3 = v4 | 0x68660000;
        goto LABEL_58;
      }
      if (a1 == 875704934)
        return 1;
      v7 = 12918;
      goto LABEL_54;
    }
    if (a1 > 875704421)
    {
      if (a1 == 875704422)
        return 1;
      v7 = 12406;
LABEL_54:
      v3 = v7 | 0x34320000;
      goto LABEL_58;
    }
    if (a1 == 846624102)
      return 1;
    v3 = 846624121;
LABEL_58:
    if (a1 != v3)
      return result;
    return 1;
  }
  if (a1 > 1937125935)
  {
    if (a1 <= 1937126451)
    {
      if (a1 == 1937125936)
        return 1;
      v3 = 1937125938;
    }
    else
    {
      if (a1 == 1937126452 || a1 == 1952854576)
        return 1;
      v3 = 1952854578;
    }
    goto LABEL_58;
  }
  if (a1 <= 1936077359)
  {
    if (a1 == 1751527986)
      return 1;
    v4 = 13364;
    goto LABEL_40;
  }
  if (a1 != 1936077360 && a1 != 1936077362)
  {
    v3 = 1936077876;
    goto LABEL_58;
  }
  return 1;
}

void vtmtsBuildScalingTable(void *a1, int a2, float *a3, _QWORD *a4, _DWORD *a5, _DWORD *a6, float a7, float a8)
{
  float *v8;
  float v9;
  float v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  float *v14;
  unint64_t v15;
  float v16;
  float v17;
  float v18;
  float *v19;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  double v29;
  float v30;
  uint64_t v31;
  float *v33;
  _QWORD v41[4];
  __int128 v42;

  v8 = 0;
  if (a7 >= -1.0)
    v9 = a7;
  else
    v9 = -1.0;
  if (a7 <= 1.0)
    v10 = v9;
  else
    v10 = 1.0;
  if (a3 && a1 && a4 && a5 && a6)
  {
    if (a7 <= 0.001 && a7 >= -0.001)
    {
      v8 = 0;
    }
    else
    {
      v11 = (int)(fabsf(3.0 / v10) * 2.0 + 0.5);
      if (v11 <= 6)
        v12 = 6;
      else
        v12 = v11;
      v13 = (v12 + 3);
      v31 = v13 & 0x7FFFFFFC;
      v14 = (float *)malloc_type_malloc(4 * ((_DWORD)v31 << 6), 0x100004052888210uLL);
      v15 = 0;
      v16 = 1.0;
      v33 = v14;
      do
      {
        v17 = (float)((float)((float)(int)v12 * -0.5) + 1.0) + (float)((float)v15 * -0.015625);
        v18 = 0.0;
        v19 = v14;
        v20 = v12;
        do
        {
          v21 = v10 * v17;
          v22 = fabsf(v10 * v17);
          v23 = 0.0;
          if (v22 < 3.0)
          {
            v23 = 1.0;
            if (v22 >= 0.000000059605)
            {
              v24 = sinf(v21 * 3.1416);
              v25 = sinf((float)(v21 * 3.1416) / 3.0);
              v16 = 1.0;
              v23 = (float)(v24 * v25) / (float)((float)(v21 * (float)((float)(v21 * 3.1416) * 3.1416)) / 3.0);
            }
          }
          *v19++ = v23;
          v18 = v18 + v23;
          v17 = v17 + v16;
          --v20;
        }
        while (v20);
        v26 = 0;
        do
        {
          v14[v26] = (float)(v16 / v18) * v14[v26];
          ++v26;
        }
        while (v12 != v26);
        ++v15;
        v14 = (float *)((char *)v14 + ((4 * v13) & 0x3FFFFFFF0));
      }
      while (v15 != 64);
      v27 = v13 >> 2;
      v28 = (void *)objc_msgSend(a1, "newTextureWithDescriptor:", objc_msgSend(MEMORY[0x1E0CC6BB0], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", 125, v27, 64, 0));
      memset(v41, 0, 24);
      v41[3] = v27;
      v42 = xmmword_1928E29F0;
      v8 = v33;
      objc_msgSend(v28, "replaceRegion:mipmapLevel:withBytes:bytesPerRow:", v41, 0, v33, 4 * v31);
      v29 = (float)(0.5 / a7) - (double)(int)v12 * 0.5 + 0.5;
      if (!a2)
        v29 = 0.5 - (double)(int)v12 * 0.5;
      v30 = v29;
      *a3 = v30 * a8;
      *a5 = v12;
      *a6 = 64;
      *a4 = v28;
    }
  }
  free(v8);
}

uint64_t loadMTLFunctionConstants(unsigned int *a1, id *a2)
{
  uint64_t result;
  void *v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  unsigned int *v11;
  int v12;
  int v13;
  int EquivalentUncompressedPixelFormat;

  *a2 = 0;
  result = objc_opt_new();
  v5 = (void *)result;
  if (a1)
  {
    EquivalentUncompressedPixelFormat = getEquivalentUncompressedPixelFormat(*a1);
    v13 = getEquivalentUncompressedPixelFormat(a1[38]);
    v12 = getEquivalentUncompressedPixelFormat(a1[305]);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", &EquivalentUncompressedPixelFormat, 33, 0);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", &v13, 33, 1);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", &v12, 33, 2);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 9, 29, 3);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 10, 29, 4);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 11, 29, 5);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 12, 29, 6);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 13, 29, 7);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 14, 29, 8);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 15, 29, 9);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 16, 29, 10);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 17, 29, 11);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 18, 29, 12);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 19, 29, 13);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 20, 29, 14);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 21, 29, 15);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 22, 29, 16);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 23, 29, 17);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 24, 29, 18);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 1, 29, 19);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 2, 29, 20);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 3, 29, 21);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 4, 29, 22);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 5, 29, 23);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 6, 29, 24);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 7, 29, 25);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 8, 29, 26);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 47, 29, 27);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 48, 29, 28);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 51, 29, 29);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 52, 29, 30);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 55, 29, 31);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 56, 29, 32);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 59, 29, 33);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 60, 29, 34);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 39, 29, 35);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 40, 29, 36);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 43, 29, 37);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 44, 29, 38);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 312, 29, 39);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 313, 29, 40);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 314, 29, 41);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 315, 29, 42);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 316, 29, 43);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 317, 29, 44);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 318, 29, 45);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 319, 29, 46);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 320, 29, 47);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 321, 29, 48);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 322, 29, 49);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 323, 29, 50);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 306, 29, 51);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 307, 29, 52);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 308, 29, 53);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 309, 29, 54);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 310, 29, 55);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 311, 29, 56);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 25, 29, 57);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 26, 29, 58);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 64, 29, 59);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 27, 29, 60);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 65, 29, 61);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 304, 29, 62);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 324, 29, 63);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 28, 53, 64);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", (char *)a1 + 113, 53, 65);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", (char *)a1 + 114, 53, 66);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", (char *)a1 + 115, 53, 67);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 29, 53, 68);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", (char *)a1 + 117, 53, 69);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 66, 53, 70);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", (char *)a1 + 265, 53, 71);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", (char *)a1 + 266, 53, 72);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", (char *)a1 + 267, 53, 73);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 67, 53, 74);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", (char *)a1 + 269, 53, 75);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 325, 53, 76);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", (char *)a1 + 1301, 53, 77);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 30, 29, 78);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 31, 53, 79);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", (char *)a1 + 125, 53, 80);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", (char *)a1 + 126, 53, 81);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", (char *)a1 + 127, 53, 82);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 32, 53, 83);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", (char *)a1 + 129, 53, 84);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 68, 29, 85);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 69, 53, 86);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", (char *)a1 + 277, 53, 87);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", (char *)a1 + 278, 53, 88);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", (char *)a1 + 279, 53, 89);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 70, 53, 90);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", (char *)a1 + 281, 53, 91);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", (char *)a1 + 1303, 53, 92);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 326, 53, 93);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", (char *)a1 + 1305, 53, 94);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", (char *)a1 + 1307, 53, 95);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 327, 53, 96);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", (char *)a1 + 1309, 53, 97);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", (char *)a1 + 1306, 53, 98);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 328, 29, 99);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 329, 53, 100);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 33, 29, 102);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 35, 29, 103);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 36, 29, 104);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 37, 29, 105);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 71, 29, 106);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 73, 29, 107);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 74, 29, 108);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 75, 29, 109);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 330, 29, 110);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 332, 29, 111);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 333, 29, 112);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 334, 29, 113);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 335, 33, 114);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 336, 29, 101);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 337, 53, 115);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", (char *)a1 + 1349, 53, 116);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", (char *)a1 + 1350, 53, 117);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", (char *)a1 + 1351, 53, 118);
    v6 = 0;
    v7 = a1 + 339;
    v8 = 123;
    do
    {
      v9 = &a1[13 * v6];
      objc_msgSend(v5, "setConstantValue:type:atIndex:", v9 + 338, 29, 13 * v6 + 119);
      objc_msgSend(v5, "setConstantValue:type:atIndex:", v9 + 348, 53, 13 * v6 + 120);
      objc_msgSend(v5, "setConstantValue:type:atIndex:", v9 + 349, 3, 13 * v6 + 121);
      objc_msgSend(v5, "setConstantValue:type:atIndex:", v9 + 350, 3, 13 * v6 + 122);
      v10 = 0;
      v11 = v7;
      do
        objc_msgSend(v5, "setConstantValue:type:atIndex:", v11++, 3, v8 + v10++);
      while (v10 != 9);
      ++v6;
      v7 += 13;
      v8 += 13;
    }
    while (v6 != 9);
    objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 455, 29, 236);
    result = objc_msgSend(v5, "setConstantValue:type:atIndex:", a1 + 456, 29, 237);
  }
  *a2 = v5;
  return result;
}

float *setBufferExtents(float *result, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  float *v10;
  float v11;
  float v12;
  float v13;
  float v14;
  int v15;
  int v16;

  v10 = result;
  v15 = a5;
  v16 = a4;
  if (a6 && a2[4] == 1)
  {
    *result = 0.0;
LABEL_8:
    v10[1] = 0.0;
LABEL_13:
    v10[2] = (float)(unint64_t)(a4 - 1);
LABEL_14:
    v11 = (float)(unint64_t)(a5 - 1);
LABEL_15:
    v10[3] = v11;
    return result;
  }
  if (a2[14])
    result = (float *)FigCFDictionaryGetInt32IfPresent();
  *v10 = 0.0;
  if (a6 && a2[4] == 1)
    goto LABEL_8;
  if (a2[15])
    result = (float *)FigCFDictionaryGetInt32IfPresent();
  v10[1] = 0.0;
  if (a6 && a2[4] == 1)
    goto LABEL_13;
  if (!a2[14] || (result = (float *)FigCFDictionaryGetInt32IfPresent(), !(_DWORD)result))
  {
    v13 = (float)(unint64_t)(a4 - 1);
LABEL_22:
    v10[2] = v13;
    if (!a6)
      goto LABEL_24;
    goto LABEL_23;
  }
  v12 = (float)(((v16 + a2[10] - 1) / a2[10] + a2[14] - 1) / a2[14] - 1);
  v10[2] = v12;
  v13 = (float)(unint64_t)(a4 - 1);
  if (v12 > v13)
    goto LABEL_22;
  if (!a6)
    goto LABEL_24;
LABEL_23:
  if (a2[4] == 1)
    goto LABEL_14;
LABEL_24:
  if (!a2[15])
    goto LABEL_14;
  result = (float *)FigCFDictionaryGetInt32IfPresent();
  if (!(_DWORD)result)
    goto LABEL_14;
  v14 = (float)((v15 + a2[15] - 1) / a2[15] - 1);
  v10[3] = v14;
  v11 = (float)(unint64_t)(a5 - 1);
  if (v14 > v11)
    goto LABEL_15;
  return result;
}

void vtGetBufferAttachmentInt32IfPresent(__CVBuffer *a1, const __CFString *a2, _DWORD *a3)
{
  CFTypeRef v4;
  const void *v5;
  CFTypeID v6;
  int SInt32;

  v4 = CVBufferCopyAttachment(a1, a2, 0);
  if (v4)
  {
    v5 = v4;
    v6 = CFGetTypeID(v4);
    if (v6 == CFNumberGetTypeID())
    {
      SInt32 = FigCFNumberGetSInt32();
      if (a3)
        *a3 = SInt32;
    }
    CFRelease(v5);
  }
}

void vtGetBufferAttachmentFloatIfPresent(__CVBuffer *a1, const __CFString *a2, _DWORD *a3)
{
  CFTypeRef v4;
  const void *v5;
  CFTypeID v6;
  int v7;

  v4 = CVBufferCopyAttachment(a1, a2, 0);
  if (v4)
  {
    v5 = v4;
    v6 = CFGetTypeID(v4);
    if (v6 == CFNumberGetTypeID())
    {
      FigCFNumberGetFloat32();
      if (a3)
        *a3 = v7;
    }
    CFRelease(v5);
  }
}

uint64_t VTDecompressionSessionRemoteServer_EnableMIO(uint64_t a1)
{
  void *outputMultiImageRefcon;

  outputMultiImageRefcon = 0;
  if (!vtdss_findAndRetainClientFromCommandPort(a1, (uint64_t)&outputMultiImageRefcon))
    VTDecompressionSessionSetMultiImageCallback(*((VTDecompressionSessionRef *)outputMultiImageRefcon + 3), (VTDecompressionOutputMultiImageCallback)vtdss_enqueueTaggedBufferGroup, outputMultiImageRefcon);
  if (outputMultiImageRefcon)
    CFRelease(outputMultiImageRefcon);
  return 0;
}

uint64_t vtdss_findAndRetainClientFromCommandPort(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = FigRPCLookupClientConnection();
  if (!(_DWORD)result)
  {
    result = FigRPCGetConnectionInfo();
    if (!(_DWORD)result)
    {
      if (a2)
      {
        result = 4294954393;
        if (*(_QWORD *)a2)
        {
          if (*(_BYTE *)(*(_QWORD *)a2 + 185))
            return 4294954393;
          else
            return 0;
        }
      }
      else
      {
        return 4294954393;
      }
    }
  }
  return result;
}

void vtdss_enqueueTaggedBufferGroup(uint64_t a1, uint64_t a2, int a3, int a4, const void *a5, __int128 *a6, __int128 *a7)
{
  _QWORD *v14;
  uint64_t v15;
  CFTypeRef v16;
  __int128 v17;
  __int128 v18;

  if (!*(_BYTE *)(a1 + 184) && !*(_BYTE *)(a1 + 186))
  {
    v14 = malloc_type_calloc(1uLL, 0x58uLL, 0x10A00404D8A4D16uLL);
    if (v14)
    {
      v15 = (uint64_t)v14;
      v14[1] = a2;
      *((_DWORD *)v14 + 4) = a3;
      *((_DWORD *)v14 + 5) = a4;
      if (a5)
        v16 = CFRetain(a5);
      else
        v16 = 0;
      *(_QWORD *)(v15 + 32) = v16;
      v17 = *a6;
      *(_QWORD *)(v15 + 56) = *((_QWORD *)a6 + 2);
      *(_OWORD *)(v15 + 40) = v17;
      v18 = *a7;
      *(_QWORD *)(v15 + 80) = *((_QWORD *)a7 + 2);
      *(_OWORD *)(v15 + 64) = v18;
      vtdss_enqueueFrame(a1, v15);
    }
    else
    {
      FigSignalErrorAt();
    }
  }
}

uint64_t VTDecompressionSessionServerStart()
{
  FigKTraceInit();
  VTVideoCodecService_ShouldUseSeparateCodecProcessForDecode();
  return FigRPCStartServerUsingMachChannel();
}

uint64_t vtdss_createTimeoutDebugContext(uint64_t a1)
{
  uint64_t v1;
  CFTypeRef cf;

  cf = 0;
  vtdss_findAndRetainClientFromCommandPort(a1, (uint64_t)&cf);
  if (!cf)
    return 0;
  v1 = FigCFWeakReferenceHolderCreateWithReferencedObject();
  if (cf)
    CFRelease(cf);
  return v1;
}

void vtdss_freeTimeoutDebugContext(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

void vtdss_collectTimeoutDebugInfo(uint64_t a1, char *__str, size_t __size)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const __CFAllocator *v8;
  uint64_t v9;
  uint64_t UInt32;
  uint64_t v11;
  uint64_t UInt64;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const opaqueCMFormatDescription *v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Float64 Seconds;
  Float64 v24;
  Float64 v25;
  char *v26;
  const char *v27;
  size_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  Float64 v35;
  Float64 v36;
  Float64 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  CMTime time;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  CMTime v48;
  CMTime v49;
  CFDictionaryRef v50;
  CFDictionaryRef v51;
  CFTypeRef v52[2];

  v51 = 0;
  v52[0] = 0;
  v50 = 0;
  v49 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v48 = v49;
  v46 = 0;
  v47 = 0;
  v45 = 0;
  if (!a1)
  {
    snprintf(__str, __size, "debugContext is NULL");
    goto LABEL_15;
  }
  v5 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v5)
  {
    snprintf(__str, __size, "iClient is NULL");
    goto LABEL_15;
  }
  v6 = v5;
  v7 = *(_QWORD *)(v5 + 24);
  if (v7)
  {
    v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v9 = VTDecompressionSessionCopyProperty(*(_QWORD *)(v5 + 24), CFSTR("NumberOfFramesBeingDecoded"), (const __CFAllocator *)*MEMORY[0x1E0C9AE00], (uint64_t *)v52);
    if ((_DWORD)v9)
    {
      v29 = v9;
      v27 = "failed to get pending frame count: err = %d";
    }
    else
    {
      UInt32 = FigCFNumberGetUInt32();
      if (VTDecompressionSessionCopyProperty(v7, CFSTR("MinOutputPresentationTimeStampOfFramesBeingDecoded"), v8, (uint64_t *)&v51))
      {
        v27 = "failed to get minOutputPTS of pending frames";
      }
      else
      {
        CMTimeMakeFromDictionary(&v49, v51);
        if (VTDecompressionSessionCopyProperty(v7, CFSTR("MaxOutputPresentationTimeStampOfFramesBeingDecoded"), v8, (uint64_t *)&v50))
        {
          v27 = "failed to get maxOutputPTS of pending frames";
        }
        else
        {
          CMTimeMakeFromDictionary(&v48, v50);
          v11 = VTDecompressionSessionCopyProperty(v7, CFSTR("NumberOfFramesInDecoder"), v8, &v47);
          if ((_DWORD)v11)
          {
            v29 = v11;
            v27 = "failed to get frames in decoder count: err = %d";
          }
          else
          {
            UInt64 = FigCFNumberGetUInt64();
            v13 = VTDecompressionSessionCopyProperty(v7, CFSTR("MinFrameIDOfFramesInDecoder"), v8, &v46);
            if ((_DWORD)v13)
            {
              v29 = v13;
              v27 = "failed to get MinFrameIDOfFramesInDecoder: err = %d";
            }
            else
            {
              v14 = FigCFNumberGetUInt64();
              v15 = VTDecompressionSessionCopyProperty(v7, CFSTR("MaxFrameIDOfFramesInDecoder"), v8, &v45);
              if (!(_DWORD)v15)
              {
                v43 = UInt32;
                v16 = FigCFNumberGetUInt64();
                v17 = *(const opaqueCMFormatDescription **)(v6 + 40);
                v42 = __str;
                v18 = __size;
                if (v17)
                  LODWORD(v17) = CMFormatDescriptionGetMediaSubType(v17);
                v19 = v17 >> 24;
                v20 = BYTE2(v17);
                v21 = BYTE1(v17);
                v22 = v17;
                time = v49;
                Seconds = CMTimeGetSeconds(&time);
                time = v48;
                v24 = CMTimeGetSeconds(&time);
                time = *(CMTime *)(v6 + 224);
                v25 = CMTimeGetSeconds(&time);
                v40 = v14;
                v41 = v16;
                v38 = *(_QWORD *)(v6 + 248);
                v39 = UInt64;
                v36 = v24;
                v37 = v25;
                v35 = Seconds;
                v26 = v42;
                v33 = v22;
                v34 = v43;
                v27 = "session[%p]: codecType: '%c%c%c%c' pendingFramesCount: %d, (minPTS: %1.3f, maxPTS: %1.3f), last De"
                      "codeFrame PTS: %1.3f (frameID: %llu), framesInDecoder: %llu, (minFrameID: %llu, maxFrameID: %llu)";
                v31 = v20;
                v32 = v21;
                v29 = v7;
                v30 = v19;
                v28 = v18;
                goto LABEL_13;
              }
              v29 = v15;
              v27 = "failed to get MaxFrameIDOfFramesInDecoder: err = %d";
            }
          }
        }
      }
    }
  }
  else
  {
    v27 = "decompressionSession is NULL";
  }
  v26 = __str;
  v28 = __size;
LABEL_13:
  snprintf(v26, v28, v27, v29, v30, v31, v32, v33, v34, *(_QWORD *)&v35, *(_QWORD *)&v36, *(_QWORD *)&v37, v38, v39, v40, v41);
  CFRelease((CFTypeRef)v6);
  if (v52[0])
    CFRelease(v52[0]);
LABEL_15:
  if (v51)
    CFRelease(v51);
  if (v50)
    CFRelease(v50);
}

uint64_t VTDecompressionSessionRemoteServer_Destroy(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  _QWORD v5[5];
  uint64_t v6;

  v6 = 0;
  vtdss_findAndRetainClientFromCommandPort(a1, (uint64_t)&v6);
  v1 = v6;
  if (v6)
  {
    *(_BYTE *)(v6 + 184) = 1;
    if (*(_QWORD *)(v1 + 160) && *(_QWORD *)(v1 + 168))
    {
      FigSemaphoreSignal();
      dispatch_group_wait(*(dispatch_group_t *)(v6 + 168), 0xFFFFFFFFFFFFFFFFLL);
    }
    FigRPCDisposeClientConnection();
    v2 = v6;
    *(_QWORD *)(v6 + 16) = 0;
    if (*(_QWORD *)(v2 + 24))
    {
      VTDecompressionSessionInvalidate(*(VTDecompressionSessionRef *)(v2 + 24));
      v2 = v6;
    }
    if (*(_QWORD *)(v2 + 32))
    {
      VTTileDecompressionSessionInvalidate(*(_QWORD *)(v2 + 32));
      v2 = v6;
    }
    v3 = *(NSObject **)(v2 + 144);
    if (v3)
    {
      v5[0] = MEMORY[0x1E0C809B0];
      v5[1] = 0x40000000;
      v5[2] = __VTDecompressionSessionRemoteServer_Destroy_block_invoke;
      v5[3] = &__block_descriptor_tmp_19;
      v5[4] = v2;
      dispatch_sync(v3, v5);
      v2 = v6;
    }
    CFRelease((CFTypeRef)v2);
  }
  return 0;
}

uint64_t VTDecompressionSessionRemoteServer_Create(uint64_t a1, int a2, _OWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, unsigned int a8, uint64_t a9, unsigned int a10, const char *a11, _DWORD *a12, _QWORD *a13, uint64_t *a14, int *a15)
{
  uint64_t v19;
  __int128 v20;
  uint64_t ClientPIDFromAuditToken;
  const __CFAllocator *v22;
  CFStringRef v23;
  int FormatDescriptionArrayFromSerializedAtomData;
  const opaqueCMFormatDescription *ValueAtIndex;
  CFTypeRef *Instance;
  CFTypeRef *v27;
  _QWORD *v28;
  __int128 v29;
  int v30;
  __int128 v31;
  __SecTask *v32;
  __CFDictionary *MutableCopy;
  OSStatus v34;
  int v35;
  uint64_t v36;
  int v37;
  CFNumberRef v38;
  int v39;
  unsigned int *v40;
  uint64_t v42;
  uint64_t v44;
  CFStringRef cf;
  unsigned int v47;
  VTDecompressionOutputCallbackRecord outputCallback;
  CFArrayRef theArray;
  VTDecompressionSessionRef decompressionSessionOut;
  audit_token_t token;

  v19 = a9;
  v20 = a3[1];
  *(_OWORD *)token.val = *a3;
  *(_OWORD *)&token.val[4] = v20;
  ClientPIDFromAuditToken = FigServer_GetClientPIDFromAuditToken();
  theArray = 0;
  decompressionSessionOut = 0;
  outputCallback = (VTDecompressionOutputCallbackRecord)xmmword_1E2F63C98;
  *a12 = 0;
  *a13 = 0;
  *a14 = 0;
  v22 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (a11)
    v23 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a11, 0x8000100u);
  else
    v23 = 0;
  cf = v23;
  FigProcessInfoCreateWithDetails();
  v44 = a6;
  FormatDescriptionArrayFromSerializedAtomData = FigRemote_CreateFormatDescriptionArrayFromSerializedAtomData();
  v47 = a8;
  if (FormatDescriptionArrayFromSerializedAtomData)
    goto LABEL_37;
  if (CFArrayGetCount(theArray) < 1)
  {
    v27 = 0;
    MutableCopy = 0;
    v39 = -12902;
LABEL_41:
    v36 = v44;
    goto LABEL_26;
  }
  ValueAtIndex = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(theArray, 0);
  FormatDescriptionArrayFromSerializedAtomData = FigCreateCFPropertyListFromData();
  if (FormatDescriptionArrayFromSerializedAtomData
    || (FormatDescriptionArrayFromSerializedAtomData = FigCreateCFPropertyListFromData()) != 0)
  {
LABEL_37:
    v39 = FormatDescriptionArrayFromSerializedAtomData;
    v27 = 0;
LABEL_40:
    MutableCopy = 0;
    goto LABEL_41;
  }
  if (DecompressionSessionClient_GetTypeID_sRegisterDecompressionSessionClientTypeOnce != -1)
    dispatch_once_f(&DecompressionSessionClient_GetTypeID_sRegisterDecompressionSessionClientTypeOnce, &DecompressionSessionClient_GetTypeID_sDecompressionSessionClientID, (dispatch_function_t)DecompressionSessionClient_RegisterType);
  Instance = (CFTypeRef *)_CFRuntimeCreateInstance();
  v27 = Instance;
  if (!Instance)
  {
    v39 = FigSignalErrorAt();
    goto LABEL_40;
  }
  outputCallback.decompressionOutputRefCon = Instance;
  v28 = Instance + 13;
  v29 = a3[1];
  *(_OWORD *)token.val = *a3;
  *(_OWORD *)&token.val[4] = v29;
  v30 = VTFigAudioSessionCreate(&token, ClientPIDFromAuditToken, (uint64_t)CFSTR("VTDecompressionSessionClient"), Instance + 13);
  if (v30)
  {
    v39 = v30;
    MutableCopy = 0;
    v19 = a9;
    goto LABEL_41;
  }
  v42 = a7;
  v31 = a3[1];
  *(_OWORD *)token.val = *a3;
  *(_OWORD *)&token.val[4] = v31;
  v32 = SecTaskCreateWithAuditToken(v22, &token);
  MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (!VTIsSecTaskEntitledForSpecifyingVP9Decode(v32))
  {
    if (VTIsSecTaskEntitledForVP9Decode(v32))
    {
      CFDictionarySetValue(MutableCopy, CFSTR("AllowAlternateDecoderSelection"), (const void *)*MEMORY[0x1E0C9AE50]);
    }
    else if (CFDictionaryContainsKey(MutableCopy, CFSTR("AllowAlternateDecoderSelection")))
    {
      CFDictionaryRemoveValue(MutableCopy, CFSTR("AllowAlternateDecoderSelection"));
    }
  }
  v34 = VTDecompressionSessionCreate(v22, ValueAtIndex, MutableCopy, 0, &outputCallback, &decompressionSessionOut);
  if (v34)
  {
    v39 = v34;
    v19 = a9;
    v36 = v44;
  }
  else
  {
    v35 = vtdss_initializeClient((uint64_t)v27, decompressionSessionOut, 0, a2, a4, ClientPIDFromAuditToken, 0, (int)a12, a13);
    if (v35)
    {
      v39 = v35;
      v19 = a9;
      v36 = v44;
    }
    else
    {
      v36 = v44;
      if (*v28 && (CMNotificationCenterGetDefaultLocalCenter(), (v37 = FigNotificationCenterAddWeakListener()) != 0))
      {
        v39 = v37;
      }
      else
      {
        token.val[0] = ClientPIDFromAuditToken;
        v38 = CFNumberCreate(v22, kCFNumberSInt32Type, &token);
        VTSessionSetProperty(decompressionSessionOut, CFSTR("ClientPID"), v38);
        CFRelease(v38);
        v39 = 0;
        *a14 = FigRemote_GetServerTimeoutToken();
      }
      v19 = a9;
    }
  }
  if (v32)
    CFRelease(v32);
  a7 = v42;
LABEL_26:
  if (cf)
    CFRelease(cf);
  if (decompressionSessionOut)
    CFRelease(decompressionSessionOut);
  if (theArray)
    CFRelease(theArray);
  if (MutableCopy)
    CFRelease(MutableCopy);
  if (v27)
    CFRelease(v27);
  FigMachPortReleaseSendRight_();
  v40 = (unsigned int *)MEMORY[0x1E0C83DA0];
  MEMORY[0x194029090](*MEMORY[0x1E0C83DA0], a5, v36);
  MEMORY[0x194029090](*v40, a7, v47);
  MEMORY[0x194029090](*v40, v19, a10);
  *a15 = v39;
  return 0;
}

void DecompressionOutputCallback_0(uint64_t a1, uint64_t a2, int a3, int a4, const void *a5, __int128 *a6, __int128 *a7)
{
  _QWORD *v14;
  uint64_t v15;
  CFTypeRef v16;
  __int128 v17;
  __int128 v18;

  if (!*(_BYTE *)(a1 + 184) && !*(_BYTE *)(a1 + 186))
  {
    v14 = malloc_type_calloc(1uLL, 0x58uLL, 0x10A00404D8A4D16uLL);
    if (v14)
    {
      v15 = (uint64_t)v14;
      v14[1] = a2;
      *((_DWORD *)v14 + 4) = a3;
      *((_DWORD *)v14 + 5) = a4;
      if (a5)
        v16 = CFRetain(a5);
      else
        v16 = 0;
      *(_QWORD *)(v15 + 24) = v16;
      v17 = *a6;
      *(_QWORD *)(v15 + 56) = *((_QWORD *)a6 + 2);
      *(_OWORD *)(v15 + 40) = v17;
      v18 = *a7;
      *(_QWORD *)(v15 + 80) = *((_QWORD *)a7 + 2);
      *(_OWORD *)(v15 + 64) = v18;
      vtdss_enqueueFrame(a1, v15);
    }
    else
    {
      FigSignalErrorAt();
    }
  }
}

uint64_t vtdss_initializeClient(uint64_t a1, const void *a2, const void *a3, int a4, uint64_t a5, int a6, CFTypeRef cf, int a8, _QWORD *a9)
{
  CFTypeRef v14;
  CFTypeRef v15;
  CFTypeRef v16;
  NSObject *initially_inactive;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_DWORD *)(a1 + 88) = a6;
  if (cf)
    v14 = CFRetain(cf);
  else
    v14 = 0;
  *(_QWORD *)(a1 + 96) = v14;
  if (a2)
    v15 = CFRetain(a2);
  else
    v15 = 0;
  *(_QWORD *)(a1 + 24) = v15;
  if (a3)
    v16 = CFRetain(a3);
  else
    v16 = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 32) = v16;
  *(_DWORD *)(a1 + 56) = a4;
  *(_QWORD *)(a1 + 64) = a5;
  *(_QWORD *)(a1 + 128) = a1 + 120;
  *(_QWORD *)(a1 + 144) = dispatch_queue_create("DecompressionSessionQueuedFrames", 0);
  *(_BYTE *)(a1 + 152) = 1;
  *(_QWORD *)(a1 + 168) = dispatch_group_create();
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v18 = dispatch_queue_create("DecompressionSessionMessageQueue", initially_inactive);
  *(_QWORD *)(a1 + 176) = v18;
  dispatch_set_qos_class_floor(v18, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(*(dispatch_object_t *)(a1 + 176));
  *(_QWORD *)(a1 + 160) = FigSemaphoreCreate();
  if (*(_QWORD *)(a1 + 256) || (v19 = FigOSTransactionCreate(), (*(_QWORD *)(a1 + 256) = v19) != 0))
  {
    v20 = FigRPCCreateClientConnection();
    if ((_DWORD)v20)
    {
      v21 = v20;
    }
    else
    {
      v21 = FigRPCGetConnectionInfo();
      if (!(_DWORD)v21)
        *a9 = 0;
    }
  }
  else
  {
    v21 = FigSignalErrorAt();
  }
  FigMachPortReleaseSendRight_();
  return v21;
}

void vtdss_appStateChangeListener(int a1, uint64_t a2, int a3, int a4, CFDictionaryRef theDict)
{
  const __CFNumber *Value;
  const void *v7;
  CFTypeRef v8;
  const void *v9;
  CFTypeRef v10;
  NSObject *v11;
  unsigned int valuePtr;

  valuePtr = 0;
  Value = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0D492C8]);
  if (!Value)
    goto LABEL_7;
  CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
  if (valuePtr > 0x20)
  {
LABEL_16:
    *(_DWORD *)(a2 + 112) = valuePtr;
    return;
  }
  if (((1 << valuePtr) & 0x100000016) == 0)
  {
    if (((1 << valuePtr) & 0x10101) != 0)
    {
LABEL_7:
      *(_DWORD *)(a2 + 112) = 8;
      return;
    }
    goto LABEL_16;
  }
  v7 = *(const void **)(a2 + 24);
  if (v7)
    v8 = CFRetain(v7);
  else
    v8 = 0;
  v9 = *(const void **)(a2 + 32);
  if (!v9)
  {
    v10 = 0;
    if (!v8)
      goto LABEL_13;
LABEL_15:
    v11 = *(NSObject **)(a2 + 176);
    dispatch_retain(*(dispatch_object_t *)(a2 + 168));
    dispatch_retain(v11);
    *(_DWORD *)(a2 + 112) = valuePtr;
    *(_BYTE *)(a2 + 185) = 1;
    FigRPCExecuteByServerAsync();
    return;
  }
  v10 = CFRetain(v9);
  if (v8)
    goto LABEL_15;
LABEL_13:
  if (valuePtr == 1 && v10)
    goto LABEL_15;
  if (v10)
    CFRelease(v10);
}

uint64_t VTDecompressionSessionRemoteServer_Invalidate(uint64_t a1)
{
  CFTypeRef v1;
  CFTypeRef cf;

  cf = 0;
  if (!vtdss_findAndRetainClientFromCommandPort(a1, (uint64_t)&cf))
  {
    v1 = cf;
    *((_BYTE *)cf + 186) = 1;
    if (*((_QWORD *)v1 + 20) && *((_QWORD *)v1 + 21))
    {
      FigSemaphoreSignal();
      dispatch_group_wait(*((dispatch_group_t *)cf + 21), 0xFFFFFFFFFFFFFFFFLL);
      v1 = cf;
    }
    if (*((_QWORD *)v1 + 3))
    {
      VTDecompressionSessionInvalidate(*((VTDecompressionSessionRef *)v1 + 3));
      v1 = cf;
    }
    if (!*((_QWORD *)v1 + 4))
      goto LABEL_10;
    VTTileDecompressionSessionInvalidate(*((_QWORD *)v1 + 4));
  }
  v1 = cf;
  if (cf)
LABEL_10:
    CFRelease(v1);
  return 0;
}

void vtdss_freeQueuedFrame(_QWORD *a1)
{
  const void *v2;
  const void *v3;

  if (a1)
  {
    v2 = (const void *)a1[3];
    if (v2)
    {
      CFRelease(v2);
      a1[3] = 0;
    }
    v3 = (const void *)a1[4];
    if (v3)
      CFRelease(v3);
    free(a1);
  }
}

uint64_t VTDecompressionSessionRemoteServer_DecodeFrame(uint64_t a1, int a2, uint64_t a3, unsigned int a4, int a5, uint64_t a6, unsigned int a7, uint64_t a8, int a9)
{
  int v16;
  int SampleBufferFromSerializedAtomData;
  const void *v18;
  OpaqueVTDecompressionSession *v19;
  NSObject *v20;
  NSObject *v21;
  int v23;
  unsigned int *v24;
  _QWORD v25[9];
  int v26;
  int v27;
  unsigned int v28;
  CFTypeRef cf;
  uint64_t v30;
  void *v31;

  v30 = 0;
  v31 = 0;
  cf = 0;
  v16 = vtdss_findAndRetainClientFromCommandPort(a1, (uint64_t)&v31);
  if (v16)
  {
    v23 = v16;
  }
  else
  {
    SampleBufferFromSerializedAtomData = FigRemote_CreateSampleBufferFromSerializedAtomData();
    if (!SampleBufferFromSerializedAtomData
      && (!a7 || (SampleBufferFromSerializedAtomData = FigCreateCFPropertyListFromData()) == 0))
    {
      v18 = v31;
      if (a9)
      {
        v19 = (OpaqueVTDecompressionSession *)*((_QWORD *)v31 + 3);
        if (!*((_QWORD *)v19 + 14))
        {
          VTDecompressionSessionSetMultiImageCallback(v19, (VTDecompressionOutputMultiImageCallback)vtdss_enqueueTaggedBufferGroup, v31);
          v18 = v31;
        }
      }
      CFRetain(v18);
      v20 = *((_QWORD *)v31 + 21);
      v21 = *((_QWORD *)v31 + 22);
      v25[0] = MEMORY[0x1E0C809B0];
      v25[1] = 0x40000000;
      v25[2] = __VTDecompressionSessionRemoteServer_DecodeFrame_block_invoke;
      v25[3] = &__block_descriptor_tmp_4_2;
      v25[4] = v31;
      v25[5] = v30;
      v25[6] = a8;
      v25[7] = cf;
      v26 = a5;
      v27 = a2;
      v28 = a7;
      v25[8] = a6;
      dispatch_group_async(v20, v21, v25);
      goto LABEL_9;
    }
    v23 = SampleBufferFromSerializedAtomData;
    a4 = 0;
  }
  if (a2)
    FigMachPortReleaseSendRight_();
  v24 = (unsigned int *)MEMORY[0x1E0C83DA0];
  if (a4)
    MEMORY[0x194029090](*MEMORY[0x1E0C83DA0], a3, a4);
  if (a7)
    MEMORY[0x194029090](*v24, a6, a7);
  if (v31)
  {
    VTDecompressionSessionRemoteCallbackClient_DecodeFrameReturn(*((_DWORD *)v31 + 14), *((_QWORD *)v31 + 8), 0, 0, v23);
LABEL_9:
    if (v31)
      CFRelease(v31);
  }
  return 0;
}

uint64_t VTDecompressionSessionRemoteServer_DequeueNextPendingFrame(uint64_t a1, _DWORD *a2, _QWORD *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _QWORD *a7, _DWORD *a8, __int128 a9, __int128 a10, __int128 a11, __int128 a12, __int128 a13, __int128 a14, __int128 a15, __int128 a16, __int128 a17, __int128 a18, __int128 a19, __int128 a20,uint64_t a21,_QWORD *a22,_QWORD *a23,_DWORD *a24,_DWORD *a25)
{
  _DWORD *v25;
  _QWORD *v26;
  _DWORD *v27;
  _DWORD *v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t *v33;
  _QWORD *v34;
  int v35;
  BOOL v36;
  int v37;
  NSObject *v38;
  uint64_t v39;
  int SerializedAtomDataForPixelBuffer;
  const __CFData *v41;
  int v42;
  OpaqueCMTaggedBufferGroup *v43;
  CMItemCount Count;
  CMItemCount v45;
  CFIndex v46;
  uint64_t v47;
  _OWORD *v48;
  CMTagCollectionRef TagCollectionAtIndex;
  const __CFData *v50;
  CFIndex Length;
  vm_address_t *v52;
  int v53;
  int v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  _DWORD *v59;
  _QWORD *v60;
  _DWORD *v61;
  _DWORD *v62;
  _DWORD *v63;
  int v65;
  CFTypeRef cf;
  _QWORD block[7];
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  _OWORD v78[11];
  uint64_t v79;
  uint64_t v80;
  CFRange v81;

  v25 = a8;
  v26 = a7;
  v27 = a6;
  v31 = a24;
  v30 = a25;
  v80 = *MEMORY[0x1E0C80C00];
  cf = 0;
  v77 = a9;
  v78[0] = a10;
  v78[1] = a11;
  v78[2] = a12;
  v78[3] = a13;
  v78[4] = a14;
  v78[5] = a15;
  v78[6] = a16;
  v78[7] = a17;
  v78[8] = a18;
  v78[9] = a19;
  v78[10] = a20;
  v79 = a21;
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  *a7 = 0;
  v32 = 32;
  *a8 = 0;
  do
  {
    v33 = (&v74)[(unint64_t)v32 / 8];
    **(_DWORD **)((char *)&v73 + v32) = 0;
    *v33 = 0;
    v34 = *(_QWORD **)((char *)&v76 + v32);
    **(_DWORD **)((char *)&v75 + v32) = 0;
    *v34 = 0;
    **(_DWORD **)((char *)&v78[-1] + v32) = 0;
    v32 += 40;
  }
  while (v32 != 232);
  *a22 = 0;
  a22[1] = 0;
  a22[2] = 0;
  *a23 = 0;
  a23[1] = 0;
  a23[2] = 0;
  *a24 = 0;
  v35 = vtdss_findAndRetainClientFromCommandPort(a1, (uint64_t)&cf);
  v36 = v35 != -12903 || cf == 0;
  if (!v36 || (v37 = v35) == 0)
  {
    v63 = a4;
    v73 = 0;
    v74 = &v73;
    v75 = 0x2000000000;
    v76 = 0;
    v69 = 0;
    v70 = &v69;
    v71 = 0x2000000000;
    v72 = 0;
    v38 = *((_QWORD *)cf + 18);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __vtdss_dequeueFrame_block_invoke;
    block[3] = &unk_1E2F63E68;
    block[5] = &v69;
    block[6] = cf;
    block[4] = &v73;
    dispatch_sync(v38, block);
    v65 = *((unsigned __int8 *)v70 + 24);
    v39 = v74[3];
    _Block_object_dispose(&v69, 8);
    _Block_object_dispose(&v73, 8);
    if (v39)
    {
      v62 = a5;
      if (*(_QWORD *)(v39 + 24))
      {
        SerializedAtomDataForPixelBuffer = FigRemote_CreateSerializedAtomDataForPixelBuffer();
        if (SerializedAtomDataForPixelBuffer)
        {
          v37 = SerializedAtomDataForPixelBuffer;
          v41 = 0;
          *((_QWORD *)cf + 9) = 0;
          goto LABEL_29;
        }
        *((_QWORD *)cf + 9) = (*MEMORY[0x1E0C85AD8] - 1) & -*MEMORY[0x1E0C85AD8];
      }
      v59 = v27;
      v60 = v26;
      v61 = v25;
      v43 = *(OpaqueCMTaggedBufferGroup **)(v39 + 32);
      if (v43)
      {
        Count = CMTaggedBufferGroupGetCount(v43);
        if (Count > 5)
        {
LABEL_40:
          v37 = FigSignalErrorAt();
          v41 = 0;
LABEL_37:
          v26 = v60;
          v25 = v61;
          v27 = v59;
          v30 = a25;
          goto LABEL_29;
        }
        v45 = Count;
        if (Count >= 1)
        {
          v46 = 0;
          v47 = *MEMORY[0x1E0C9AE00];
          v48 = v78;
          while (1)
          {
            TagCollectionAtIndex = CMTaggedBufferGroupGetTagCollectionAtIndex(*(CMTaggedBufferGroupRef *)(v39 + 32), v46);
            v50 = (const __CFData *)MEMORY[0x19402810C](TagCollectionAtIndex, v47);
            v41 = v50;
            if (!v50)
              break;
            Length = CFDataGetLength(v50);
            v52 = (vm_address_t *)*((_QWORD *)v48 + 1);
            v53 = vm_allocate(*MEMORY[0x1E0C83DA0], v52, Length, 1543503873);
            if (v53)
              goto LABEL_39;
            v81.location = 0;
            v81.length = Length;
            CFDataGetBytes(v41, v81, (UInt8 *)*v52);
            **((_DWORD **)v48 + 2) = Length;
            CFRelease(v41);
            if (!FigTaggedBufferGroupGetCVPixelBufferAtIndex())
              goto LABEL_40;
            block[0] = 0;
            v54 = FigRemote_CreateSerializedAtomDataForPixelBuffer();
            v55 = block[0];
            **(_DWORD **)v48 = block[0];
            if (v54)
            {
              v37 = v54;
              v41 = 0;
              *((_QWORD *)cf + 9) = 0;
              goto LABEL_37;
            }
            *((_QWORD *)cf + 9) = (v55 + *MEMORY[0x1E0C85AD8] - 1) & -*MEMORY[0x1E0C85AD8];
            ++v46;
            v48 = (_OWORD *)((char *)v48 + 40);
            if (v45 == v46)
              goto LABEL_24;
          }
          v53 = FigSignalErrorAt();
LABEL_39:
          v37 = v53;
          goto LABEL_37;
        }
      }
LABEL_24:
      *a2 = 1;
      *a3 = *(_QWORD *)(v39 + 8);
      *v63 = *(_DWORD *)(v39 + 16);
      *v62 = *(_DWORD *)(v39 + 20);
      if (a22)
      {
        v56 = *(_OWORD *)(v39 + 40);
        a22[2] = *(_QWORD *)(v39 + 56);
        *(_OWORD *)a22 = v56;
      }
      v26 = v60;
      v25 = v61;
      v27 = v59;
      v30 = a25;
      v31 = a24;
      v42 = v65;
      if (a23)
      {
        v57 = *(_OWORD *)(v39 + 64);
        a23[2] = *(_QWORD *)(v39 + 80);
        *(_OWORD *)a23 = v57;
      }
    }
    else
    {
      *a2 = 0;
      v42 = v65;
    }
    v41 = 0;
    v37 = 0;
    *v31 = v42;
    goto LABEL_29;
  }
  v41 = 0;
  v39 = 0;
LABEL_29:
  vtdss_freeQueuedFrame((_QWORD *)v39);
  *v27 = 0;
  *v26 = 0;
  *v25 = 0;
  if (v30)
    *v30 = v37;
  if (v41)
    CFRelease(v41);
  if (cf)
    CFRelease(cf);
  return 0;
}

uint64_t VTDecompressionSessionRemoteServer_CopySupportedPropertyDictionary(uint64_t a1, _QWORD *a2, _DWORD *a3, kern_return_t *a4)
{
  kern_return_t CFDataFromCFPropertyList;
  uint64_t v8;
  kern_return_t v9;
  uint64_t v10;
  kern_return_t v11;
  vm_size_t Length;
  kern_return_t v13;
  void *v14;
  const UInt8 *BytePtr;
  vm_address_t v17;
  CFDataRef theData;
  CFTypeRef cf;
  CFTypeRef v20;

  cf = 0;
  v20 = 0;
  v17 = 0;
  theData = 0;
  *a2 = 0;
  *a3 = 0;
  CFDataFromCFPropertyList = vtdss_findAndRetainClientFromCommandPort(a1, (uint64_t)&v20);
  if (CFDataFromCFPropertyList)
    goto LABEL_20;
  v8 = *((_QWORD *)v20 + 3);
  if (v8)
  {
    v9 = VTDecompressionSessionCopySupportedPropertyDictionary(v8, &cf);
  }
  else
  {
    v10 = *((_QWORD *)v20 + 4);
    if (v10)
      v9 = VTTileDecompressionSessionCopySupportedPropertyDictionary(v10, &cf);
    else
      v9 = FigSignalErrorAt();
  }
  v11 = v9;
  if (v9)
    goto LABEL_21;
  CFDataFromCFPropertyList = FigCreateCFDataFromCFPropertyList();
  if (CFDataFromCFPropertyList)
  {
LABEL_20:
    v11 = CFDataFromCFPropertyList;
LABEL_21:
    LODWORD(Length) = 0;
    goto LABEL_11;
  }
  Length = CFDataGetLength(theData);
  v13 = vm_allocate(*MEMORY[0x1E0C83DA0], &v17, Length, 1560281089);
  if (v13)
  {
    v11 = v13;
  }
  else
  {
    v14 = (void *)v17;
    BytePtr = CFDataGetBytePtr(theData);
    memcpy(v14, BytePtr, Length);
    v11 = 0;
  }
LABEL_11:
  if (cf)
    CFRelease(cf);
  if (theData)
    CFRelease(theData);
  *a2 = v17;
  *a3 = Length;
  if (a4)
    *a4 = v11;
  if (v20)
    CFRelease(v20);
  return 0;
}

uint64_t VTDecompressionSessionRemoteServer_CopySerializableProperties(uint64_t a1, _QWORD *a2, _DWORD *a3, kern_return_t *a4)
{
  kern_return_t CFDataFromCFPropertyList;
  uint64_t v8;
  kern_return_t v9;
  uint64_t v10;
  kern_return_t v11;
  vm_size_t Length;
  kern_return_t v13;
  void *v14;
  const UInt8 *BytePtr;
  vm_address_t v17;
  CFDataRef theData;
  CFTypeRef cf;
  CFTypeRef v20;

  cf = 0;
  v20 = 0;
  v17 = 0;
  theData = 0;
  *a2 = 0;
  *a3 = 0;
  CFDataFromCFPropertyList = vtdss_findAndRetainClientFromCommandPort(a1, (uint64_t)&v20);
  if (CFDataFromCFPropertyList)
    goto LABEL_20;
  v8 = *((_QWORD *)v20 + 3);
  if (v8)
  {
    v9 = VTDecompressionSessionCopySerializableProperties(v8, *MEMORY[0x1E0C9AE00], &cf);
  }
  else
  {
    v10 = *((_QWORD *)v20 + 4);
    if (v10)
      v9 = VTTileDecompressionSessionCopySerializableProperties(v10, *MEMORY[0x1E0C9AE00], &cf);
    else
      v9 = FigSignalErrorAt();
  }
  v11 = v9;
  if (v9)
    goto LABEL_21;
  CFDataFromCFPropertyList = FigCreateCFDataFromCFPropertyList();
  if (CFDataFromCFPropertyList)
  {
LABEL_20:
    v11 = CFDataFromCFPropertyList;
LABEL_21:
    LODWORD(Length) = 0;
    goto LABEL_11;
  }
  Length = CFDataGetLength(theData);
  v13 = vm_allocate(*MEMORY[0x1E0C83DA0], &v17, Length, 1560281089);
  if (v13)
  {
    v11 = v13;
  }
  else
  {
    v14 = (void *)v17;
    BytePtr = CFDataGetBytePtr(theData);
    memcpy(v14, BytePtr, Length);
    v11 = 0;
  }
LABEL_11:
  if (cf)
    CFRelease(cf);
  if (theData)
    CFRelease(theData);
  *a2 = v17;
  *a3 = Length;
  if (a4)
    *a4 = v11;
  if (v20)
    CFRelease(v20);
  return 0;
}

uint64_t VTDecompressionSessionRemoteServer_CopyProperty(uint64_t a1, const char *a2, _QWORD *a3, _DWORD *a4, kern_return_t *a5)
{
  kern_return_t v9;
  const __CFAllocator *v10;
  CFStringRef v11;
  CFStringRef v12;
  uint64_t v13;
  kern_return_t v14;
  uint64_t v15;
  kern_return_t v16;
  vm_size_t Length;
  kern_return_t CFDataFromCFPropertyList;
  kern_return_t v19;
  void *v20;
  const UInt8 *BytePtr;
  vm_address_t v23;
  CFDataRef theData;
  CFTypeRef cf;
  CFTypeRef v26;

  cf = 0;
  v26 = 0;
  v23 = 0;
  theData = 0;
  *a3 = 0;
  *a4 = 0;
  v9 = vtdss_findAndRetainClientFromCommandPort(a1, (uint64_t)&v26);
  if (v9)
    goto LABEL_23;
  v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v11 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0);
  if (!v11)
  {
    v9 = FigSignalErrorAt();
LABEL_23:
    v16 = v9;
    LODWORD(Length) = 0;
    goto LABEL_15;
  }
  v12 = v11;
  v13 = *((_QWORD *)v26 + 3);
  if (v13)
  {
    v14 = VTDecompressionSessionCopyProperty(v13, v12, v10, (uint64_t *)&cf);
  }
  else
  {
    v15 = *((_QWORD *)v26 + 4);
    if (v15)
      v14 = VTTileDecompressionSessionCopyProperty(v15, v12, v10, &cf);
    else
      v14 = FigSignalErrorAt();
  }
  v16 = v14;
  if (v14)
    goto LABEL_9;
  CFDataFromCFPropertyList = FigCreateCFDataFromCFPropertyList();
  if (CFDataFromCFPropertyList)
  {
    v16 = CFDataFromCFPropertyList;
LABEL_9:
    LODWORD(Length) = 0;
    goto LABEL_13;
  }
  Length = CFDataGetLength(theData);
  v19 = vm_allocate(*MEMORY[0x1E0C83DA0], &v23, Length, 1560281089);
  if (v19)
  {
    v16 = v19;
  }
  else
  {
    v20 = (void *)v23;
    BytePtr = CFDataGetBytePtr(theData);
    memcpy(v20, BytePtr, Length);
    v16 = 0;
  }
LABEL_13:
  CFRelease(v12);
  if (cf)
    CFRelease(cf);
LABEL_15:
  if (theData)
    CFRelease(theData);
  *a3 = v23;
  *a4 = Length;
  if (a5)
    *a5 = v16;
  if (v26)
    CFRelease(v26);
  return 0;
}

uint64_t VTDecompressionSessionRemoteServer_SetProperty(uint64_t a1, const char *a2, uint64_t a3, unsigned int a4, _DWORD *a5)
{
  int v9;
  __CFString *v10;
  int CFPropertyListFromData;
  int v12;
  _QWORD *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  CFTypeRef v19;

  v19 = 0;
  v9 = vtdss_findAndRetainClientFromCommandPort(a1, (uint64_t)&v19);
  if (!v9)
  {
    v10 = (__CFString *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0);
    if (!v10)
      goto LABEL_11;
    CFPropertyListFromData = FigCreateCFPropertyListFromData();
    if (CFPropertyListFromData)
      goto LABEL_12;
    v12 = FigCFEqual();
    v13 = v19;
    if (v12)
    {
      v14 = (const void *)*((_QWORD *)v19 + 24);
      if (v14)
      {
        CFRelease(v14);
        v13 = v19;
        *((_QWORD *)v19 + 24) = 0;
      }
    }
    v15 = v13[3];
    if (v15)
    {
      CFPropertyListFromData = VTDecompressionSessionSetProperty(v15, v10, 0);
      goto LABEL_12;
    }
    v16 = v13[4];
    if (v16)
      CFPropertyListFromData = VTTileDecompressionSessionSetProperty(v16, v10, 0);
    else
LABEL_11:
      CFPropertyListFromData = FigSignalErrorAt();
LABEL_12:
    v17 = CFPropertyListFromData;
    if (!a4)
      goto LABEL_14;
    goto LABEL_13;
  }
  v17 = v9;
  v10 = 0;
  if (a4)
LABEL_13:
    MEMORY[0x194029090](*MEMORY[0x1E0C83DA0], a3, a4);
LABEL_14:
  if (v10)
    CFRelease(v10);
  if (a5)
    *a5 = v17;
  if (v19)
    CFRelease(v19);
  return 0;
}

uint64_t VTDecompressionSessionRemoteServer_SetProperties(uint64_t a1, uint64_t a2, unsigned int a3, _DWORD *a4)
{
  int CFPropertyListFromData;
  CFTypeID TypeID;
  uint64_t v9;
  uint64_t v10;
  int v11;
  CFTypeRef v13;

  v13 = 0;
  CFPropertyListFromData = vtdss_findAndRetainClientFromCommandPort(a1, (uint64_t)&v13);
  if (!CFPropertyListFromData)
  {
    CFPropertyListFromData = FigCreateCFPropertyListFromData();
    if (!CFPropertyListFromData)
    {
      TypeID = CFDictionaryGetTypeID();
      if (TypeID != CFGetTypeID(0))
        goto LABEL_8;
      v9 = *((_QWORD *)v13 + 3);
      if (v9)
      {
        CFPropertyListFromData = VTDecompressionSessionSetProperties(v9, 0);
        goto LABEL_9;
      }
      v10 = *((_QWORD *)v13 + 4);
      if (v10)
        CFPropertyListFromData = VTTileDecompressionSessionSetProperties(v10, 0);
      else
LABEL_8:
        CFPropertyListFromData = FigSignalErrorAt();
    }
  }
LABEL_9:
  v11 = CFPropertyListFromData;
  if (a3)
    MEMORY[0x194029090](*MEMORY[0x1E0C83DA0], a2, a3);
  if (a4)
    *a4 = v11;
  if (v13)
    CFRelease(v13);
  return 0;
}

uint64_t VTDecompressionSessionRemoteServer_FinishDelayedFrames(uint64_t a1)
{
  int v1;
  NSObject *v2;
  NSObject *v3;
  _QWORD v5[5];
  CFTypeRef v6;

  v6 = 0;
  v1 = vtdss_findAndRetainClientFromCommandPort(a1, (uint64_t)&v6);
  if (v1)
  {
    if (!v6)
      return 0;
    VTDecompressionSessionRemoteCallbackClient_FinishDelayedFramesReturn(*((_DWORD *)v6 + 14), *((_QWORD *)v6 + 8), v1);
  }
  else
  {
    CFRetain(v6);
    v2 = *((_QWORD *)v6 + 21);
    v3 = *((_QWORD *)v6 + 22);
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 0x40000000;
    v5[2] = __VTDecompressionSessionRemoteServer_FinishDelayedFrames_block_invoke;
    v5[3] = &__block_descriptor_tmp_5_2;
    v5[4] = v6;
    dispatch_group_async(v2, v3, v5);
  }
  if (v6)
    CFRelease(v6);
  return 0;
}

uint64_t VTDecompressionSessionRemoteServer_CanAcceptFormatDescription(uint64_t a1, uint64_t a2, unsigned int a3, _DWORD *a4)
{
  const opaqueCMFormatDescription *ValueAtIndex;
  int CanAcceptFormatDescription;
  CFTypeRef cf;

  cf = 0;
  *a4 = 0;
  if (vtdss_findAndRetainClientFromCommandPort(a1, (uint64_t)&cf))
  {
    *a4 = 0;
  }
  else
  {
    if (FigRemote_CreateFormatDescriptionArrayFromSerializedAtomData() || CFArrayGetCount(0) < 1)
    {
      CanAcceptFormatDescription = 0;
    }
    else
    {
      ValueAtIndex = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(0, 0);
      CanAcceptFormatDescription = VTDecompressionSessionCanAcceptFormatDescription(*((VTDecompressionSessionRef *)cf + 3), ValueAtIndex);
    }
    *a4 = CanAcceptFormatDescription;
  }
  MEMORY[0x194029090](*MEMORY[0x1E0C83DA0], a2, a3);
  if (cf)
    CFRelease(cf);
  return 0;
}

uint64_t VTDecompressionSessionRemoteServer_CopyBlackPixelBuffer(uint64_t a1, _DWORD *a2, _QWORD *a3, _DWORD *a4, _DWORD *a5)
{
  int SerializedAtomDataForPixelBuffer;
  CVPixelBufferRef pixelBufferOut;
  CFTypeRef cf;

  pixelBufferOut = 0;
  cf = 0;
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  SerializedAtomDataForPixelBuffer = vtdss_findAndRetainClientFromCommandPort(a1, (uint64_t)&cf);
  if (!SerializedAtomDataForPixelBuffer)
  {
    SerializedAtomDataForPixelBuffer = VTDecompressionSessionCopyBlackPixelBuffer(*((VTDecompressionSessionRef *)cf + 3), &pixelBufferOut);
    if (!SerializedAtomDataForPixelBuffer)
    {
      SerializedAtomDataForPixelBuffer = FigRemote_CreateSerializedAtomDataForPixelBuffer();
      if (SerializedAtomDataForPixelBuffer)
        *((_QWORD *)cf + 10) = 0;
      else
        *((_QWORD *)cf + 10) = (*MEMORY[0x1E0C85AD8] - 1) & -*MEMORY[0x1E0C85AD8];
    }
  }
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  if (a5)
    *a5 = SerializedAtomDataForPixelBuffer;
  if (cf)
    CFRelease(cf);
  if (pixelBufferOut)
    CFRelease(pixelBufferOut);
  return 0;
}

uint64_t VTDecompressionSessionRemoteServer_GetMinOutputPresentationTimeStampOfFramesBeingDecoded(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;
  NSObject *v4;
  uint64_t v5;
  _QWORD v7[6];
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  _QWORD *v15;

  v15 = 0;
  v10 = 0;
  v11 = &v10;
  v12 = 0x3000000000;
  v13 = *MEMORY[0x1E0CA2E18];
  v14 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (!vtdss_findAndRetainClientFromCommandPort(a1, (uint64_t)&v15))
  {
    VTDecompressionSessionGetMinOutputPresentationTimeStampOfFramesBeingDecoded(v15[3], &v8);
    v3 = v11;
    *(_OWORD *)(v11 + 3) = v8;
    v3[5] = v9;
    v4 = v15[18];
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 0x40000000;
    v7[2] = __VTDecompressionSessionRemoteServer_GetMinOutputPresentationTimeStampOfFramesBeingDecoded_block_invoke;
    v7[3] = &unk_1E2F63D10;
    v7[4] = &v10;
    v7[5] = v15;
    dispatch_sync(v4, v7);
  }
  if (a2)
  {
    v5 = v11[5];
    *(_OWORD *)a2 = *(_OWORD *)(v11 + 3);
    a2[2] = v5;
  }
  if (v15)
    CFRelease(v15);
  _Block_object_dispose(&v10, 8);
  return 0;
}

uint64_t VTDecompressionSessionRemoteServer_GetMinAndMaxOutputPresentationTimeStampOfFramesBeingDecoded(uint64_t a1, _QWORD *a2, _QWORD *a3, _DWORD *a4)
{
  int MinAndMaxOutputPresentationTimeStampOfFramesBeingDecoded;
  NSObject *v8;
  CMTimeEpoch epoch;
  CMTimeEpoch v10;
  _QWORD v12[7];
  uint64_t v13;
  CMTime *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  CMTime *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  _QWORD *v23;

  v23 = 0;
  v18 = 0;
  v19 = (CMTime *)&v18;
  v20 = 0x3000000000;
  v21 = *MEMORY[0x1E0CA2E18];
  v22 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v13 = 0;
  v14 = (CMTime *)&v13;
  v15 = 0x3000000000;
  v16 = v21;
  v17 = v22;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  MinAndMaxOutputPresentationTimeStampOfFramesBeingDecoded = vtdss_findAndRetainClientFromCommandPort(a1, (uint64_t)&v23);
  if (!MinAndMaxOutputPresentationTimeStampOfFramesBeingDecoded)
  {
    MinAndMaxOutputPresentationTimeStampOfFramesBeingDecoded = VTDecompressionSessionGetMinAndMaxOutputPresentationTimeStampOfFramesBeingDecoded(v23[3], v19 + 1, v14 + 1);
    if (!MinAndMaxOutputPresentationTimeStampOfFramesBeingDecoded)
    {
      v8 = v23[18];
      v12[0] = MEMORY[0x1E0C809B0];
      v12[1] = 0x40000000;
      v12[2] = __VTDecompressionSessionRemoteServer_GetMinAndMaxOutputPresentationTimeStampOfFramesBeingDecoded_block_invoke;
      v12[3] = &unk_1E2F63D38;
      v12[4] = &v18;
      v12[5] = &v13;
      v12[6] = v23;
      dispatch_sync(v8, v12);
      if (a2)
      {
        epoch = v19[1].epoch;
        *(_OWORD *)a2 = *(_OWORD *)&v19[1].value;
        a2[2] = epoch;
      }
      MinAndMaxOutputPresentationTimeStampOfFramesBeingDecoded = 0;
      if (a3)
      {
        v10 = v14[1].epoch;
        *(_OWORD *)a3 = *(_OWORD *)&v14[1].value;
        a3[2] = v10;
      }
    }
  }
  if (a4)
    *a4 = MinAndMaxOutputPresentationTimeStampOfFramesBeingDecoded;
  if (v23)
    CFRelease(v23);
  _Block_object_dispose(&v13, 8);
  _Block_object_dispose(&v18, 8);
  return 0;
}

uint64_t VTDecompressionSessionRemoteServer_TileCreate(uint64_t a1, int a2, _OWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, unsigned int a8, const char *a9, _DWORD *a10, _QWORD *a11, uint64_t *a12, int *a13)
{
  __int128 v16;
  int ClientPIDFromAuditToken;
  const __CFAllocator *v18;
  CFStringRef v19;
  int FormatDescriptionArrayFromSerializedAtomData;
  void *ValueAtIndex;
  _QWORD *Instance;
  uint64_t v23;
  int v24;
  int v25;
  CFNumberRef v26;
  unsigned int *v27;
  uint64_t v30;
  uint64_t v31;
  int valuePtr;
  CFTypeRef v35;
  CFTypeRef cf;
  CFArrayRef theArray;
  VTSessionRef session[2];
  __int128 v39;

  v16 = a3[1];
  *(_OWORD *)session = *a3;
  v39 = v16;
  ClientPIDFromAuditToken = FigServer_GetClientPIDFromAuditToken();
  theArray = 0;
  session[0] = 0;
  v35 = 0;
  cf = 0;
  *a10 = 0;
  *a11 = 0;
  *a12 = 0;
  v18 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (a9)
    v19 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a9, 0x8000100u);
  else
    v19 = 0;
  FigProcessInfoCreateWithDetails();
  v30 = a6;
  FormatDescriptionArrayFromSerializedAtomData = FigRemote_CreateFormatDescriptionArrayFromSerializedAtomData();
  v31 = a7;
  if (FormatDescriptionArrayFromSerializedAtomData)
    goto LABEL_27;
  if (CFArrayGetCount(theArray) < 1)
  {
    Instance = 0;
    v25 = -12902;
    goto LABEL_14;
  }
  ValueAtIndex = (void *)CFArrayGetValueAtIndex(theArray, 0);
  FormatDescriptionArrayFromSerializedAtomData = FigCreateCFPropertyListFromData();
  if (FormatDescriptionArrayFromSerializedAtomData)
  {
LABEL_27:
    v25 = FormatDescriptionArrayFromSerializedAtomData;
    Instance = 0;
    goto LABEL_14;
  }
  if (DecompressionSessionClient_GetTypeID_sRegisterDecompressionSessionClientTypeOnce != -1)
    dispatch_once_f(&DecompressionSessionClient_GetTypeID_sRegisterDecompressionSessionClientTypeOnce, &DecompressionSessionClient_GetTypeID_sDecompressionSessionClientID, (dispatch_function_t)DecompressionSessionClient_RegisterType);
  Instance = (_QWORD *)_CFRuntimeCreateInstance();
  if (!Instance || (v23 = FigOSTransactionCreate(), (Instance[32] = v23) == 0))
  {
    v24 = FigSignalErrorAt();
    goto LABEL_30;
  }
  v24 = VTTileDecompressionSessionCreate((uint64_t)v18, ValueAtIndex, cf, (uint64_t)TileDecompressionOutputCallback_0, (uint64_t)Instance, (uint64_t *)session);
  if (v24)
  {
LABEL_30:
    v25 = v24;
    goto LABEL_14;
  }
  v25 = vtdss_initializeClient((uint64_t)Instance, 0, session[0], a2, a4, ClientPIDFromAuditToken, v35, (int)a10, a11);
  if (!v25)
  {
    valuePtr = ClientPIDFromAuditToken;
    v26 = CFNumberCreate(v18, kCFNumberSInt32Type, &valuePtr);
    VTSessionSetProperty(session[0], CFSTR("ClientPID"), v26);
    CFRelease(v26);
    *a12 = FigRemote_GetServerTimeoutToken();
  }
LABEL_14:
  if (session[0])
    CFRelease(session[0]);
  if (theArray)
    CFRelease(theArray);
  if (cf)
    CFRelease(cf);
  if (v19)
    CFRelease(v19);
  if (Instance)
    CFRelease(Instance);
  if (v35)
    CFRelease(v35);
  FigMachPortReleaseSendRight_();
  v27 = (unsigned int *)MEMORY[0x1E0C83DA0];
  MEMORY[0x194029090](*MEMORY[0x1E0C83DA0], a5, v30);
  MEMORY[0x194029090](*v27, v31, a8);
  *a13 = v25;
  return 0;
}

void TileDecompressionOutputCallback_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8)
{
  _QWORD *v12;

  if (!*(_BYTE *)(a1 + 184) && !*(_BYTE *)(a1 + 186))
  {
    v12 = malloc_type_calloc(1uLL, 0x58uLL, 0x10A00404D8A4D16uLL);
    if (v12)
    {
      v12[1] = a2;
      *((_DWORD *)v12 + 4) = a7;
      *((_DWORD *)v12 + 5) = a8;
      v12[3] = 0;
      vtdss_enqueueFrame(a1, (uint64_t)v12);
    }
    else
    {
      FigSignalErrorAt();
    }
  }
}

uint64_t VTDecompressionSessionRemoteServer_DecodeTile(uint64_t a1, int a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, unsigned int a9, uint64_t a10, int a11, uint64_t a12)
{
  int v19;
  int SampleBufferFromSerializedAtomData;
  _BYTE *v21;
  CFTypeRef v22;
  const void *v23;
  CFTypeRef v24;
  CFTypeRef v25;
  NSObject *v26;
  NSObject *v27;
  int v29;
  unsigned int *v30;
  _QWORD block[11];
  int v32;
  int v33;
  int v34;
  CFTypeRef cf;
  CFTypeRef v36;
  CFTypeRef v37[2];

  v36 = 0;
  v37[0] = 0;
  cf = 0;
  v19 = vtdss_findAndRetainClientFromCommandPort(a1, (uint64_t)v37);
  if (v19)
  {
    v29 = v19;
    goto LABEL_25;
  }
  SampleBufferFromSerializedAtomData = FigRemote_CreateSampleBufferFromSerializedAtomData();
  if (!SampleBufferFromSerializedAtomData)
  {
    if (!(a9 | a7))
    {
      v22 = (CFTypeRef)*((_QWORD *)v37[0] + 24);
      if (v22)
        v22 = CFRetain(v22);
      cf = v22;
      goto LABEL_15;
    }
    SampleBufferFromSerializedAtomData = FigRemote_CreatePixelBufferFromSerializedAtomData();
    if (!SampleBufferFromSerializedAtomData)
    {
      v21 = v37[0];
      if (FigDebugIsInternalBuild())
        v21[220] = 0;
      v23 = (const void *)*((_QWORD *)v37[0] + 24);
      v24 = cf;
      *((_QWORD *)v37[0] + 24) = cf;
      if (v24)
        CFRetain(v24);
      if (v23)
        CFRelease(v23);
      v22 = cf;
LABEL_15:
      if (v22)
      {
        v25 = v37[0];
        if (*((_BYTE *)v37[0] + 220))
          ++*((_DWORD *)v37[0] + 50);
        CFRetain(v25);
        v26 = *((_QWORD *)v37[0] + 21);
        v27 = *((_QWORD *)v37[0] + 22);
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 0x40000000;
        block[2] = __VTDecompressionSessionRemoteServer_DecodeTile_block_invoke;
        block[3] = &__block_descriptor_tmp_9_4;
        block[4] = v37[0];
        block[5] = v36;
        block[8] = a5;
        block[9] = a6;
        block[10] = a10;
        block[6] = cf;
        block[7] = a12;
        v32 = a11;
        v33 = a2;
        v34 = a7;
        dispatch_group_async(v26, v27, block);
        goto LABEL_19;
      }
      SampleBufferFromSerializedAtomData = FigSignalErrorAt();
    }
  }
  v29 = SampleBufferFromSerializedAtomData;
  a4 = 0;
LABEL_25:
  v30 = (unsigned int *)MEMORY[0x1E0C83DA0];
  if (a9)
    MEMORY[0x194029090](*MEMORY[0x1E0C83DA0], a8, a9);
  if (!v29)
    goto LABEL_19;
  if (a2)
    FigMachPortReleaseSendRight_();
  if (a7)
    FigMachPortReleaseSendRight_();
  if (a4)
    MEMORY[0x194029090](*v30, a3, a4);
  if (v36)
    CFRelease(v36);
  if (cf)
    CFRelease(cf);
  if (v37[0])
  {
    VTDecompressionSessionRemoteCallbackClient_DecodeFrameReturn(*((_DWORD *)v37[0] + 14), *((_QWORD *)v37[0] + 8), 0, 0, v29);
LABEL_19:
    if (v37[0])
      CFRelease(v37[0]);
  }
  return 0;
}

uint64_t VTDecompressionSessionRemoteServer_FinishDelayedTiles(uint64_t a1)
{
  int v1;
  NSObject *v2;
  NSObject *v3;
  _QWORD v5[5];
  CFTypeRef v6;

  v6 = 0;
  v1 = vtdss_findAndRetainClientFromCommandPort(a1, (uint64_t)&v6);
  if (v1)
  {
    if (!v6)
      return 0;
    VTDecompressionSessionRemoteCallbackClient_FinishDelayedFramesReturn(*((_DWORD *)v6 + 14), *((_QWORD *)v6 + 8), v1);
  }
  else
  {
    CFRetain(v6);
    v2 = *((_QWORD *)v6 + 21);
    v3 = *((_QWORD *)v6 + 22);
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 0x40000000;
    v5[2] = __VTDecompressionSessionRemoteServer_FinishDelayedTiles_block_invoke;
    v5[3] = &__block_descriptor_tmp_10_4;
    v5[4] = v6;
    dispatch_group_async(v2, v3, v5);
  }
  if (v6)
    CFRelease(v6);
  return 0;
}

uint64_t VTDecompressionSessionRemoteServer_GetNextPendingNotification(uint64_t a1, _DWORD *a2, _QWORD *a3, char *a4, vm_address_t *a5, unsigned int *a6)
{
  uint64_t PendingNotification;
  const char *CStringPtrAndBufferToFree;
  unsigned int Length;
  uint64_t v12;
  void *v13;
  const UInt8 *BytePtr;
  CFTypeRef v16;
  void *v17;
  CFDataRef theData;
  CFTypeRef v19;
  CFTypeRef cf;

  v16 = 0;
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  vtdss_findAndRetainClientFromCommandPort(a1, (uint64_t)&v16);
  if (!v16)
    return 0;
  v19 = 0;
  cf = 0;
  v17 = 0;
  theData = 0;
  PendingNotification = FigRPCFetchNextPendingNotification();
  if ((_DWORD)PendingNotification)
  {
    v12 = PendingNotification;
  }
  else
  {
    FigCreateCFDataFromCFPropertyList();
    CStringPtrAndBufferToFree = (const char *)FigCFStringGetCStringPtrAndBufferToFree();
    if (CStringPtrAndBufferToFree)
      strlcpy(a4, CStringPtrAndBufferToFree, 0x200uLL);
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    if (v19)
    {
      CFRelease(v19);
      v19 = 0;
    }
    if (theData)
    {
      Length = CFDataGetLength(theData);
      *a6 = Length;
      v12 = vm_allocate(*MEMORY[0x1E0C83DA0], a5, Length, 1560281089);
      if (!(_DWORD)v12)
      {
        v13 = (void *)*a5;
        BytePtr = CFDataGetBytePtr(theData);
        memcpy(v13, BytePtr, *a6);
      }
    }
    else
    {
      v12 = 0;
      *a5 = 0;
      *a6 = 0;
    }
  }
  free(v17);
  if (theData)
    CFRelease(theData);
  if (v16)
    CFRelease(v16);
  return v12;
}

void vtdss_enqueueFrame(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  _QWORD block[7];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 0;
  v3 = *(NSObject **)(a1 + 144);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __vtdss_enqueueFrame_block_invoke;
  block[3] = &unk_1E2F63DA0;
  block[5] = a2;
  block[6] = a1;
  block[4] = &v5;
  dispatch_sync(v3, block);
  if (!*(_BYTE *)(a1 + 184) && !*(_BYTE *)(a1 + 186))
  {
    if (*((_BYTE *)v6 + 24))
      VTDecompressionSessionRemoteCallbackClient_FrameIsPending(*(_DWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
    if (*(_BYTE *)(a1 + 152))
    {
      while (!*(_BYTE *)(a1 + 184)
           && !*(_BYTE *)(a1 + 186)
           && !*(_BYTE *)(a1 + 185)
           && FigSemaphoreWaitRelative() == -12792)
        ;
    }
  }
  _Block_object_dispose(&v5, 8);
}

uint64_t __vtdss_enqueueFrame_block_invoke(uint64_t result)
{
  **(_QWORD **)(result + 40) = 0;
  **(_QWORD **)(*(_QWORD *)(result + 48) + 128) = *(_QWORD *)(result + 40);
  *(_QWORD *)(*(_QWORD *)(result + 48) + 128) = *(_QWORD *)(result + 40);
  if (!*(_BYTE *)(*(_QWORD *)(result + 48) + 136))
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
    *(_BYTE *)(*(_QWORD *)(result + 48) + 136) = 1;
  }
  return result;
}

uint64_t DecompressionSessionClient_RegisterType(uint64_t *a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

double DecompressionSessionClient_Init(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 256) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void DecompressionSessionClient_Finalize(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  void *v12;

  FigRPCDisposeClientConnection();
  *(_QWORD *)(a1 + 16) = 0;
  if (*(_BYTE *)(a1 + 220))
    *(_BYTE *)(a1 + 220) = 0;
  if (*(_QWORD *)(a1 + 104))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    v2 = *(const void **)(a1 + 104);
    if (v2)
    {
      CFRelease(v2);
      *(_QWORD *)(a1 + 104) = 0;
    }
  }
  v3 = *(const void **)(a1 + 24);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 24) = 0;
  }
  v4 = *(const void **)(a1 + 32);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 32) = 0;
  }
  v5 = *(NSObject **)(a1 + 144);
  if (v5)
    dispatch_release(v5);
  v6 = *(NSObject **)(a1 + 168);
  if (v6)
    dispatch_release(v6);
  v7 = *(NSObject **)(a1 + 176);
  if (v7)
    dispatch_release(v7);
  FigSemaphoreDestroy();
  v8 = *(const void **)(a1 + 40);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(a1 + 40) = 0;
  }
  v9 = *(const void **)(a1 + 192);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(a1 + 192) = 0;
  }
  v10 = *(const void **)(a1 + 48);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(a1 + 48) = 0;
  }
  FigServer_RememberProcessInfoForAFewSeconds();
  v11 = *(const void **)(a1 + 96);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(a1 + 96) = 0;
  }
  v12 = *(void **)(a1 + 256);
  if (v12)
  {
    os_release(v12);
    *(_QWORD *)(a1 + 256) = 0;
  }
}

__CFString *DecompressionSessionClient_CopyDebugDesc(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("DecompressionSessionClient %p"), a1);
  return Mutable;
}

void __vtdss_appStateChangeListener_block_invoke(uint64_t a1)
{
  NSObject *v1;
  NSObject *v2;
  _QWORD v3[4];
  __int128 v4;
  NSObject *v5;
  NSObject *v6;

  v2 = *(NSObject **)(a1 + 32);
  v1 = *(NSObject **)(a1 + 40);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = __vtdss_appStateChangeListener_block_invoke_2;
  v3[3] = &__block_descriptor_tmp_30;
  v4 = *(_OWORD *)(a1 + 48);
  v5 = v2;
  v6 = v1;
  dispatch_group_async(v2, v1, v3);
}

void __vtdss_appStateChangeListener_block_invoke_2(uint64_t a1)
{
  const void *v2;
  const void *v3;
  NSObject *v4;
  NSObject *v5;

  VTDecompressionSessionInvalidate(*(VTDecompressionSessionRef *)(a1 + 32));
  VTTileDecompressionSessionInvalidate(*(_QWORD *)(a1 + 40));
  v2 = *(const void **)(a1 + 32);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    CFRelease(v3);
  v4 = *(NSObject **)(a1 + 48);
  if (v4)
    dispatch_release(v4);
  v5 = *(NSObject **)(a1 + 56);
  if (v5)
    dispatch_release(v5);
}

uint64_t __vtdss_dequeueFrame_block_invoke(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *(_QWORD *)(*(_QWORD *)(result + 48) + 120);
  v1 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24);
  if (v1)
  {
    v2 = result;
    v3 = *(_QWORD *)(result + 48);
    v4 = *(uint64_t **)(v3 + 120);
    if (v4 == v1)
    {
      v8 = *v1;
      *(_QWORD *)(v3 + 120) = v8;
      if (v8)
        goto LABEL_9;
      v7 = *(_QWORD *)(result + 48);
      v5 = (uint64_t *)(v7 + 120);
    }
    else
    {
      do
      {
        v5 = v4;
        v4 = (uint64_t *)*v4;
      }
      while (v4 != v1);
      v6 = *v1;
      *v5 = v6;
      if (v6)
        goto LABEL_9;
      v7 = *(_QWORD *)(result + 48);
    }
    *(_QWORD *)(v7 + 128) = v5;
LABEL_9:
    result = FigSemaphoreSignal();
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 24) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 120) != 0;
    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 24))
      *(_BYTE *)(*(_QWORD *)(v2 + 48) + 136) = 0;
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Tone_Mat_TRC_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Tone_Mat_TRC_420vf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_RGfA_TRC_Tone_Mat_TRC_420vf_GCD(unsigned __int8 *result, uint64_t a2, float a3, float a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  float v19;
  unsigned int v20;
  float v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  float v27;
  float v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float32x2_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  _BYTE *v44;
  unsigned __int8 *v45;
  unint64_t v46;
  _BYTE *v47;
  _BYTE *v48;
  unsigned __int8 *v49;
  float32x2_t v50;
  unsigned __int8 *v52;
  int32x2_t v60;
  float v62;
  float v63;
  float v64;
  float32x2_t v67;
  float v71;
  float v72;
  float32x2_t v73;
  unsigned __int8 *v75;
  int32x2_t v80;
  float v82;
  float v83;
  float32x2_t v86;
  float v91;
  float v92;
  float v93;
  char v94;
  char v95;
  char v96;
  char v97;
  float v100;
  float v101;
  float v102;
  float v105;
  float v106;
  float v111;
  float v112;
  float v114;
  float v116;
  float v118;
  float v121;
  float v122;
  float v124;
  float v126;
  float v127;
  float v128;
  float v141;
  float v142;
  BOOL v143;
  float v144;
  char v145;
  float v146;
  float v147;
  char v148;
  float v149;
  float v150;
  char v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float v182;
  float v183;
  float v184;
  float v185;
  float v186;
  float v187;

  v4 = *(_QWORD *)(result + 28);
  v5 = 2 * *result;
  v6 = v4 * a2 / v5;
  v7 = (v4 + v4 * a2) / v5;
  if (2 * v7 != 2 * v6)
  {
    v8 = 0;
    v9 = *(_QWORD *)(result + 20);
    v10 = *(_QWORD *)(result + 44) + 2 * v6;
    v165 = 2 * v7 - 2 * v6;
    v11 = *((_QWORD *)result + 19);
    v12 = (uint64_t *)*((_QWORD *)result + 17);
    v13 = **((_QWORD **)result + 8);
    v14 = *v12;
    v15 = v12[1];
    v16 = v12[2];
    LOWORD(a3) = *(_WORD *)(v11 + 144);
    v17 = (float)LODWORD(a3);
    LOWORD(a4) = *(_WORD *)(v11 + 146);
    v18 = (float)LODWORD(a4);
    LOWORD(a4) = *(_WORD *)(v11 + 148);
    v19 = (float)LODWORD(a4);
    LOWORD(a4) = *(_WORD *)(v11 + 150);
    *(float *)&v20 = (float)LODWORD(a4);
    v186 = *(float *)&v20;
    v187 = v18;
    LOWORD(v20) = *(_WORD *)(v11 + 152);
    v21 = (float)v20;
    v184 = *(float *)(v11 + 40);
    v185 = *(float *)(v11 + 36);
    v182 = *(float *)(v11 + 48) * 0.25;
    v183 = *(float *)(v11 + 44);
    v180 = *(float *)(v11 + 56) * 0.25;
    v181 = *(float *)(v11 + 52) * 0.25;
    v178 = *(float *)(v11 + 64) * 0.25;
    v179 = *(float *)(v11 + 60) * 0.25;
    v176 = *(float *)(v11 + 68) * 0.25;
    v177 = *(float *)(v11 + 72);
    v174 = *(float *)(v11 + 80);
    v175 = *(float *)(v11 + 76);
    v172 = *(float *)(v11 + 88);
    v173 = *(float *)(v11 + 84);
    v170 = *(float *)(v11 + 96);
    v171 = *(float *)(v11 + 92);
    v22 = *(float *)(v11 + 108);
    v168 = *(float *)(v11 + 104);
    v169 = *(float *)(v11 + 100);
    v23 = v11 + 164;
    v24 = v11 + 16548;
    v25 = v11 + 32932;
    v27 = *(float *)(v11 + 112);
    v26 = *(float *)(v11 + 116);
    v28 = *(float *)(v11 + 120);
    v29 = *((_QWORD *)result + 14);
    v30 = (_QWORD *)*((_QWORD *)result + 16);
    v31 = *((_QWORD *)result + 15) + 2 * (*((_QWORD *)result + 13) * a2 / v5);
    result = (unsigned __int8 *)(**((_QWORD **)result + 7) + v13 * v10 + 16 * *(_QWORD *)(result + 36));
    v32 = v30[1];
    v33 = (_BYTE *)(*v30 + v31 * v14 + v29);
    v34 = v30[2];
    if (v34)
      v35 = (_BYTE *)(v34 + v31 * v16 + v29);
    else
      v35 = 0;
    v36 = *(unsigned __int8 *)(v11 + 157);
    v37 = *(unsigned __int8 *)(v11 + 156);
    if (v31 >= 0)
      v38 = v31;
    else
      v38 = v31 + 1;
    v162 = v15;
    v39 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    v40 = *(unsigned __int8 *)(v11 + 155);
    v41 = *(unsigned __int8 *)(v11 + 154);
    v42 = v32 + (v38 >> 1) * v15 + v29;
    v166 = *(float *)(v11 + 112);
    v167 = *(float *)(v11 + 108);
    v163 = v14;
    v164 = v13;
    v161 = v16;
    do
    {
      v43 = &v35[v16];
      v44 = &v33[v14];
      v45 = &result[v13];
      if (v9)
      {
        v46 = 0;
        v47 = &v35[v16];
        v48 = &v33[v14];
        v49 = &result[v13];
        do
        {
          v50.i32[0] = *(_DWORD *)&result[4 * v41];
          v50.i32[1] = *(_DWORD *)&result[4 * v40];
          _D1 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v50, v39), 0), v39)));
          v52 = result + 16;
          _D1.i16[0] = *(_WORD *)(v23 + 2 * _D1.u32[0]);
          __asm { FCVT            S15, H1 }
          _D1.i16[0] = *(_WORD *)(v23 + 2 * _D1.u32[1]);
          _D3.i32[0] = *(_DWORD *)&result[4 * v37];
          _D3.i32[1] = *(_DWORD *)&result[4 * v41 + 16];
          __asm { FCVT            S16, H1 }
          v60 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(_D3, v39), 0), v39)));
          _D3.i16[0] = *(_WORD *)(v23 + 2 * v60.u32[0]);
          __asm { FCVT            S17, H3 }
          v62 = fmaxf(_S15, fmaxf(_S16, _S17));
          v63 = (float)((float)((float)(v27 * _S16) + (float)(v22 * _S15)) + (float)(v26 * _S17)) + (float)(v28 * v62);
          v64 = 8191.0;
          if (v63 <= 8191.0)
          {
            v64 = (float)((float)((float)(v27 * _S16) + (float)(v22 * _S15)) + (float)(v26 * _S17)) + (float)(v28 * v62);
            if (v63 < 0.0)
              v64 = 0.0;
          }
          _H1 = *(_WORD *)(v23 + 2 * v60.u32[1]);
          __asm { FCVT            S19, H1 }
          v67.i32[0] = *(_DWORD *)&v52[4 * v40];
          v67.i32[1] = *(_DWORD *)&v52[4 * v37];
          _D1 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v67, v39), 0), v39)));
          _D1.i16[0] = *(_WORD *)(v23 + 2 * _D1.u32[0]);
          __asm { FCVT            S20, H1 }
          _D1.i16[0] = *(_WORD *)(v23 + 2 * _D1.u32[1]);
          __asm { FCVT            S22, H1 }
          v71 = (float)((float)((float)(v27 * _S20) + (float)(v22 * _S19)) + (float)(v26 * _S22))
              + (float)(v28 * fmaxf(_S19, fmaxf(_S20, _S22)));
          v72 = 8191.0;
          if (v71 <= 8191.0)
          {
            v72 = v71;
            if (v71 < 0.0)
              v72 = 0.0;
          }
          v73.i32[0] = *(_DWORD *)&v49[4 * v41];
          v73.i32[1] = *(_DWORD *)&v49[4 * v40];
          _D1 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v73, v39), 0), v39)));
          v75 = v49 + 16;
          _D1.i16[0] = *(_WORD *)(v23 + 2 * _D1.u32[0]);
          __asm { FCVT            S1, H1 }
          _H4 = *(_WORD *)(v23 + 2 * _D1.u32[1]);
          _D5.i32[0] = *(_DWORD *)&v49[4 * v37];
          _D5.i32[1] = *(_DWORD *)&v49[4 * v41 + 16];
          __asm { FCVT            S12, H4 }
          v80 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(_D5, v39), 0), v39)));
          _D5.i16[0] = *(_WORD *)(v23 + 2 * v80.u32[0]);
          __asm { FCVT            S5, H5 }
          v82 = (float)((float)((float)(v27 * _S12) + (float)(v22 * _S1)) + (float)(v26 * _S5))
              + (float)(v28 * fmaxf(_S1, fmaxf(_S12, _S5)));
          v83 = 8191.0;
          if (v82 <= 8191.0)
          {
            v83 = v82;
            if (v82 < 0.0)
              v83 = 0.0;
          }
          _H4 = *(_WORD *)(v23 + 2 * v80.u32[1]);
          __asm { FCVT            S7, H4 }
          v86.i32[0] = *(_DWORD *)&v75[4 * v40];
          v86.i32[1] = *(_DWORD *)&v75[4 * v37];
          _D4 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v86, v39), 0), v39)));
          _D4.i16[0] = *(_WORD *)(v23 + 2 * _D4.u32[0]);
          __asm { FCVT            S4, H4 }
          _H21 = *(_WORD *)(v23 + 2 * _D4.u32[1]);
          __asm { FCVT            S21, H21 }
          v91 = (float)((float)((float)(v27 * _S4) + (float)(v22 * _S7)) + (float)(v26 * _S21))
              + (float)(v28 * fmaxf(_S7, fmaxf(_S4, _S21)));
          v92 = 8191.0;
          if (v91 <= 8191.0)
          {
            v92 = v91;
            if (v91 < 0.0)
              v92 = 0.0;
          }
          if (v35)
          {
            v93 = *(float *)&v75[4 * v36];
            v94 = llroundf(*(float *)&result[4 * v36] * 255.0);
            v95 = llroundf(*(float *)&v52[4 * v36] * 255.0);
            v96 = llroundf(*(float *)&v49[4 * v36] * 255.0);
            v97 = llroundf(v93 * 255.0);
          }
          else
          {
            v96 = 0;
            v94 = 0;
            v95 = 0;
            v97 = 0;
          }
          _H18 = *(_WORD *)(v24 + 2 * llroundf(v64));
          __asm { FCVT            S18, H18 }
          v100 = _S15 * _S18;
          v101 = _S16 * _S18;
          v102 = _S17 * _S18;
          _H3 = *(_WORD *)(v24 + 2 * llroundf(v72));
          __asm { FCVT            S3, H3 }
          v105 = _S19 * _S3;
          v106 = _S20 * _S3;
          _S3 = _S22 * _S3;
          _H6 = *(_WORD *)(v24 + 2 * llroundf(v83));
          __asm { FCVT            S6, H6 }
          _S1 = _S1 * _S6;
          v111 = _S12 * _S6;
          v112 = _S5 * _S6;
          LOWORD(_S6) = *(_WORD *)(v24 + 2 * llroundf(v92));
          __asm { FCVT            S6, H6 }
          v114 = _S7 * _S6;
          _S4 = _S4 * _S6;
          v116 = _S21 * _S6;
          _S21 = (float)((float)(v175 * v101) + (float)(v100 * v177)) + (float)(v102 * v174);
          v118 = (float)((float)(v172 * v101) + (float)(v100 * v173)) + (float)(v102 * v171);
          _S16 = (float)((float)(v169 * v101) + (float)(v100 * v170)) + (float)(v102 * v168);
          _S17 = (float)((float)(v175 * v106) + (float)(v105 * v177)) + (float)(_S3 * v174);
          v121 = (float)((float)(v172 * v106) + (float)(v105 * v173)) + (float)(_S3 * v171);
          v122 = (float)((float)(v169 * v106) + (float)(v105 * v170)) + (float)(_S3 * v168);
          _S19 = (float)((float)(v175 * v111) + (float)(_S1 * v177)) + (float)(v112 * v174);
          v124 = (float)((float)(v172 * v111) + (float)(_S1 * v173)) + (float)(v112 * v171);
          _S20 = (float)((float)(v169 * v111) + (float)(_S1 * v170)) + (float)(v112 * v168);
          v126 = (float)((float)(v175 * _S4) + (float)(v114 * v177)) + (float)(v116 * v174);
          v127 = (float)((float)(v172 * _S4) + (float)(v114 * v173)) + (float)(v116 * v171);
          v128 = (float)((float)(v169 * _S4) + (float)(v114 * v170)) + (float)(v116 * v168);
          LOWORD(_S1) = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(_S21, 0.0), 8191.0)));
          __asm { FCVT            S5, H1 }
          LOWORD(_S1) = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v118, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          LOWORD(_S3) = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(_S16, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          LOWORD(_S4) = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(_S17, 0.0), 8191.0)));
          __asm { FCVT            S6, H4 }
          LOWORD(_S4) = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v121, 0.0), 8191.0)));
          LOWORD(_S16) = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v122, 0.0), 8191.0)));
          __asm
          {
            FCVT            S7, H4
            FCVT            S4, H16
          }
          LOWORD(_S16) = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0)));
          __asm { FCVT            S18, H16 }
          LOWORD(_S16) = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v124, 0.0), 8191.0)));
          __asm { FCVT            S16, H16 }
          LOWORD(_S17) = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(_S20, 0.0), 8191.0)));
          __asm { FCVT            S17, H17 }
          LOWORD(_S19) = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v126, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          LOWORD(_S20) = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v127, 0.0), 8191.0)));
          LOWORD(_S21) = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v128, 0.0), 8191.0)));
          __asm
          {
            FCVT            S20, H20
            FCVT            S21, H21
          }
          v141 = (float)((float)((float)(v184 * _S1) + (float)(v185 * _S5)) + (float)(v183 * _S3)) + v17;
          if (v141 < v17)
            v142 = v17;
          else
            v142 = (float)((float)((float)(v184 * _S1) + (float)(v185 * _S5)) + (float)(v183 * _S3)) + v17;
          v143 = v141 <= v19;
          v144 = (float)((float)((float)(v184 * _S7) + (float)(v185 * _S6)) + (float)(v183 * _S4)) + v17;
          if (!v143)
            v142 = v19;
          v145 = llroundf(v142);
          if (v144 < v17)
            v146 = v17;
          else
            v146 = (float)((float)((float)(v184 * _S7) + (float)(v185 * _S6)) + (float)(v183 * _S4)) + v17;
          v143 = v144 <= v19;
          v147 = (float)((float)((float)(v184 * _S16) + (float)(v185 * _S18)) + (float)(v183 * _S17)) + v17;
          if (!v143)
            v146 = v19;
          v148 = llroundf(v146);
          if (v147 < v17)
            v149 = v17;
          else
            v149 = (float)((float)((float)(v184 * _S16) + (float)(v185 * _S18)) + (float)(v183 * _S17)) + v17;
          v143 = v147 <= v19;
          v150 = (float)((float)((float)(v184 * _S20) + (float)(v185 * _S19)) + (float)(v183 * _S21)) + v17;
          if (!v143)
            v149 = v19;
          v151 = llroundf(v149);
          if (v150 < v17)
            v152 = v17;
          else
            v152 = (float)((float)((float)(v184 * _S20) + (float)(v185 * _S19)) + (float)(v183 * _S21)) + v17;
          if (v150 <= v19)
            v153 = v152;
          else
            v153 = v19;
          v154 = (float)((float)(_S5 + _S6) + _S18) + _S19;
          v155 = (float)((float)(_S1 + _S7) + _S16) + _S20;
          *v33 = v145;
          v33[1] = v148;
          *v48 = v151;
          v48[1] = llroundf(v153);
          v156 = (float)((float)(_S3 + _S4) + _S17) + _S21;
          v157 = (float)((float)(v187 + (float)(v154 * v182)) + (float)(v155 * v181)) + (float)(v156 * v180);
          v158 = v21;
          if (v157 <= v21)
          {
            v158 = (float)((float)(v187 + (float)(v154 * v182)) + (float)(v155 * v181)) + (float)(v156 * v180);
            if (v157 < v186)
              v158 = v186;
          }
          v159 = (float)((float)(v187 + (float)(v154 * v179)) + (float)(v155 * v178)) + (float)(v156 * v176);
          *(_BYTE *)(v42 + v46) = llroundf(v158);
          v160 = v21;
          v27 = v166;
          v22 = v167;
          if (v159 <= v21)
          {
            v160 = v159;
            if (v159 < v186)
              v160 = v186;
          }
          *(_BYTE *)(v42 + v46 + 1) = llroundf(v160);
          if (v35)
          {
            *v35 = v94;
            v35[1] = v95;
            v35 += 2;
            *v47 = v96;
            v47[1] = v97;
            v47 += 2;
          }
          result += 32;
          v49 += 32;
          v33 += 2;
          v48 += 2;
          v46 += 2;
        }
        while (v9 > v46);
      }
      v14 = v163;
      v13 = v164;
      result = &v45[v164];
      v33 = &v44[v163];
      v16 = v161;
      v42 += v162;
      v35 = &v43[v161];
      v8 += 2;
    }
    while (v165 > v8);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Mat_TRC_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Mat_TRC_420vf_GCD);
  return 0;
}

unint64_t vt_Copy_RGfA_TRC_Mat_TRC_420vf_GCD(unint64_t result, uint64_t a2, float a3, float a4, float a5, float a6)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  unsigned int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  float32x2_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _BYTE *v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  char v52;
  char v53;
  char v54;
  float32x2_t v55;
  float32x2_t v70;
  float32x2_t v73;
  float32x2_t v77;
  float v83;
  float v84;
  float v86;
  float v87;
  float v101;
  float v102;
  BOOL v103;
  float v104;
  char v105;
  float v106;
  float v107;
  char v108;
  float v109;
  float v110;
  char v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  _BYTE *v127;
  _BYTE *v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;

  v6 = *(_QWORD *)(result + 28);
  v7 = 2 * *(unsigned __int8 *)result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (2 * v9 != 2 * v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)(result + 20);
    v12 = *(_QWORD *)(result + 44) + 2 * v8;
    v125 = 2 * v9 - 2 * v8;
    v13 = *(_QWORD *)(result + 152);
    v14 = *(uint64_t **)(result + 136);
    v15 = **(_QWORD **)(result + 64);
    v17 = *v14;
    v16 = v14[1];
    v18 = v14[2];
    LOWORD(a3) = *(_WORD *)(v13 + 144);
    v19 = (float)LODWORD(a3);
    LOWORD(a4) = *(_WORD *)(v13 + 146);
    *(float *)&v20 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v13 + 148);
    v21 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v13 + 150);
    v140 = (float)LODWORD(a4);
    v141 = (float)LODWORD(a6);
    LOWORD(v20) = *(_WORD *)(v13 + 152);
    v138 = *(float *)(v13 + 36);
    v139 = (float)v20;
    v136 = *(float *)(v13 + 44);
    v137 = *(float *)(v13 + 40);
    v134 = *(float *)(v13 + 52) * 0.25;
    v135 = *(float *)(v13 + 48) * 0.25;
    v132 = *(float *)(v13 + 60) * 0.25;
    v133 = *(float *)(v13 + 56) * 0.25;
    v130 = *(float *)(v13 + 72);
    v131 = *(float *)(v13 + 64) * 0.25;
    v129 = *(float *)(v13 + 68) * 0.25;
    v22 = *(float *)(v13 + 76);
    v23 = *(float *)(v13 + 80);
    v24 = *(float *)(v13 + 84);
    v25 = *(float *)(v13 + 88);
    v26 = *(float *)(v13 + 92);
    v27 = *(float *)(v13 + 96);
    v28 = *(float *)(v13 + 100);
    v29 = *(float *)(v13 + 104);
    v30 = v13 + 164;
    v31 = v13 + 16548;
    v32 = *(_QWORD *)(result + 112);
    v33 = *(_QWORD **)(result + 128);
    v34 = *(_QWORD *)(result + 120) + 2 * (*(_QWORD *)(result + 104) * a2 / v7);
    v35 = **(_QWORD **)(result + 56) + v15 * v12 + 16 * *(_QWORD *)(result + 36);
    v36 = (_BYTE *)(*v33 + v34 * v17 + v32);
    v37 = v33[2];
    if (v37)
      v38 = (_BYTE *)(v37 + v34 * v18 + v32);
    else
      v38 = 0;
    result = *(unsigned __int8 *)(v13 + 157);
    v39 = *(unsigned __int8 *)(v13 + 156);
    v122 = v16;
    v40 = v33[1] + v34 / 2 * v16;
    v41 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    v42 = *(unsigned __int8 *)(v13 + 155);
    v43 = *(unsigned __int8 *)(v13 + 154);
    v44 = v40 + v32;
    v123 = v17;
    v124 = v15;
    v121 = v18;
    do
    {
      v128 = &v38[v18];
      v127 = &v36[v17];
      v126 = v35 + v15;
      if (v11)
      {
        v45 = 0;
        v47 = &v36[v17];
        v46 = &v38[v18];
        v48 = v35 + v15;
        do
        {
          v49 = v35 + 16;
          v50 = v48 + 16;
          if (v38)
          {
            v51 = llroundf(*(float *)(v35 + 4 * result) * 255.0);
            v52 = llroundf(*(float *)(v49 + 4 * result) * 255.0);
            v53 = llroundf(*(float *)(v48 + 4 * result) * 255.0);
            v54 = llroundf(*(float *)(v50 + 4 * result) * 255.0);
          }
          else
          {
            v53 = 0;
            v51 = 0;
            v52 = 0;
            v54 = 0;
          }
          v55.i32[0] = *(_DWORD *)(v35 + 4 * v43);
          v55.i32[1] = *(_DWORD *)(v35 + 4 * v42);
          _D16 = (float32x2_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v55, v41), 0), v41)));
          _D16.i16[0] = *(_WORD *)(v30 + 2 * _D16.u32[0]);
          _H17 = *(_WORD *)(v30 + 2 * _D16.u32[1]);
          __asm { FCVT            S11, H16 }
          _D16.i32[0] = *(_DWORD *)(v35 + 4 * v39);
          _D16.i32[1] = *(_DWORD *)(v49 + 4 * v43);
          _D16 = (float32x2_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(_D16, v41), 0), v41)));
          __asm { FCVT            S12, H17 }
          _D16.i16[0] = *(_WORD *)(v30 + 2 * _D16.u32[0]);
          _H17 = *(_WORD *)(v30 + 2 * _D16.u32[1]);
          __asm { FCVT            S13, H16 }
          _D16.i32[0] = *(_DWORD *)(v49 + 4 * v42);
          _D16.i32[1] = *(_DWORD *)(v49 + 4 * v39);
          _D18 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(_D16, v41), 0), v41)));
          __asm { FCVT            S16, H17 }
          _H17 = *(_WORD *)(v30 + 2 * _D18.u32[0]);
          _D18.i16[0] = *(_WORD *)(v30 + 2 * _D18.u32[1]);
          __asm { FCVT            S14, H17 }
          v70.i32[0] = *(_DWORD *)(v48 + 4 * v43);
          v70.i32[1] = *(_DWORD *)(v48 + 4 * v42);
          _D17 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v70, v41), 0), v41)));
          __asm { FCVT            S18, H18 }
          _D17.i16[0] = *(_WORD *)(v30 + 2 * _D17.u32[0]);
          _H15 = *(_WORD *)(v30 + 2 * _D17.u32[1]);
          __asm { FCVT            S17, H17 }
          v73.i32[0] = *(_DWORD *)(v48 + 4 * v39);
          v73.i32[1] = *(_DWORD *)(v50 + 4 * v43);
          _D19 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v73, v41), 0), v41)));
          __asm { FCVT            S15, H15 }
          _D19.i16[0] = *(_WORD *)(v30 + 2 * _D19.u32[0]);
          _H20 = *(_WORD *)(v30 + 2 * _D19.u32[1]);
          __asm { FCVT            S19, H19 }
          v77.i32[0] = *(_DWORD *)(v50 + 4 * v42);
          v77.i32[1] = *(_DWORD *)(v50 + 4 * v39);
          _D22 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v77, v41), 0), v41)));
          __asm { FCVT            S20, H20 }
          _D22.i16[0] = *(_WORD *)(v30 + 2 * _D22.u32[0]);
          _H3 = *(_WORD *)(v30 + 2 * _D22.u32[1]);
          __asm
          {
            FCVT            S22, H22
            FCVT            S3, H3
          }
          _S1 = (float)((float)(v22 * _S12) + (float)(_S11 * v130)) + (float)(_S13 * v23);
          v83 = (float)((float)(v25 * _S12) + (float)(_S11 * v24)) + (float)(_S13 * v26);
          v84 = (float)((float)(v28 * _S12) + (float)(_S11 * v27)) + (float)(_S13 * v29);
          _S5 = (float)((float)(v22 * _S14) + (float)(_D16.f32[0] * v130)) + (float)(*(float *)_D18.i32 * v23);
          v86 = (float)((float)(v25 * _S14) + (float)(_D16.f32[0] * v24)) + (float)(*(float *)_D18.i32 * v26);
          _D16.f32[0] = (float)((float)(v28 * _S14) + (float)(_D16.f32[0] * v27)) + (float)(*(float *)_D18.i32 * v29);
          *(float *)_D18.i32 = (float)((float)(v22 * _S15) + (float)(*(float *)_D17.i32 * v130))
                             + (float)(*(float *)_D19.i32 * v23);
          v87 = (float)((float)(v25 * _S15) + (float)(*(float *)_D17.i32 * v24)) + (float)(*(float *)_D19.i32 * v26);
          *(float *)_D19.i32 = (float)((float)(v28 * _S15) + (float)(*(float *)_D17.i32 * v27))
                             + (float)(*(float *)_D19.i32 * v29);
          LOWORD(_S1) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          __asm { FCVT            S13, H1 }
          LOWORD(_S1) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          __asm { FCVT            S11, H1 }
          LOWORD(_S1) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm { FCVT            S12, H1 }
          LOWORD(_S1) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S14, H1 }
          LOWORD(_S1) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          LOWORD(_S5) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(_D16.f32[0], 0.0), 8191.0)));
          __asm
          {
            FCVT            S16, H1
            FCVT            S15, H5
          }
          LOWORD(_S1) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(*(float *)_D18.i32, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          LOWORD(_S5) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          __asm { FCVT            S17, H5 }
          LOWORD(_S5) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(*(float *)_D19.i32, 0.0), 8191.0)));
          __asm { FCVT            S18, H5 }
          _H4 = *(_WORD *)(v31
                         + 2
                         * llroundf(fminf(fmaxf((float)((float)(v22 * *(float *)_D22.i32) + (float)(_S20 * v130)) + (float)(_S3 * v23), 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          LOWORD(_S5) = *(_WORD *)(v31
                                 + 2
                                 * llroundf(fminf(fmaxf((float)((float)(v25 * *(float *)_D22.i32) + (float)(_S20 * v24))+ (float)(_S3 * v26), 0.0), 8191.0)));
          LOWORD(_S3) = *(_WORD *)(v31
                                 + 2
                                 * llroundf(fminf(fmaxf((float)((float)(v28 * *(float *)_D22.i32) + (float)(_S20 * v27))+ (float)(_S3 * v29), 0.0), 8191.0)));
          __asm
          {
            FCVT            S5, H5
            FCVT            S3, H3
          }
          v101 = (float)((float)((float)(v137 * _S11) + (float)(v138 * _S13)) + (float)(v136 * _S12)) + v19;
          if (v101 < v19)
            v102 = v19;
          else
            v102 = (float)((float)((float)(v137 * _S11) + (float)(v138 * _S13)) + (float)(v136 * _S12)) + v19;
          v103 = v101 <= v21;
          v104 = (float)((float)((float)(v137 * _S16) + (float)(v138 * _S14)) + (float)(v136 * _S15)) + v19;
          if (!v103)
            v102 = v21;
          v105 = llroundf(v102);
          if (v104 < v19)
            v106 = v19;
          else
            v106 = (float)((float)((float)(v137 * _S16) + (float)(v138 * _S14)) + (float)(v136 * _S15)) + v19;
          v103 = v104 <= v21;
          v107 = (float)((float)((float)(v137 * _S17) + (float)(v138 * _S1)) + (float)(v136 * _S18)) + v19;
          if (!v103)
            v106 = v21;
          v108 = llroundf(v106);
          if (v107 < v19)
            v109 = v19;
          else
            v109 = (float)((float)((float)(v137 * _S17) + (float)(v138 * _S1)) + (float)(v136 * _S18)) + v19;
          v103 = v107 <= v21;
          v110 = (float)((float)((float)(v137 * _S5) + (float)(v138 * _S4)) + (float)(v136 * _S3)) + v19;
          if (!v103)
            v109 = v21;
          v111 = llroundf(v109);
          if (v110 < v19)
            v112 = v19;
          else
            v112 = (float)((float)((float)(v137 * _S5) + (float)(v138 * _S4)) + (float)(v136 * _S3)) + v19;
          if (v110 <= v21)
            v113 = v112;
          else
            v113 = v21;
          v114 = (float)((float)(_S13 + _S14) + _S1) + _S4;
          v115 = (float)((float)(_S11 + _S16) + _S17) + _S5;
          *v36 = v105;
          v36[1] = v108;
          *v47 = v111;
          v47[1] = llroundf(v113);
          v116 = (float)((float)(_S12 + _S15) + _S18) + _S3;
          v117 = (float)((float)(v140 + (float)(v114 * v135)) + (float)(v115 * v134)) + (float)(v116 * v133);
          v118 = v139;
          if (v117 <= v139)
          {
            v118 = (float)((float)(v140 + (float)(v114 * v135)) + (float)(v115 * v134)) + (float)(v116 * v133);
            if (v117 < v141)
              v118 = v141;
          }
          v119 = (float)((float)(v140 + (float)(v114 * v132)) + (float)(v115 * v131)) + (float)(v116 * v129);
          *(_BYTE *)(v44 + v45) = llroundf(v118);
          v120 = v139;
          if (v119 <= v139)
          {
            v120 = v119;
            if (v119 < v141)
              v120 = v141;
          }
          *(_BYTE *)(v44 + v45 + 1) = llroundf(v120);
          if (v38)
          {
            *v38 = v51;
            v38[1] = v52;
            v38 += 2;
            *v46 = v53;
            v46[1] = v54;
            v46 += 2;
          }
          v35 += 32;
          v48 += 32;
          v36 += 2;
          v47 += 2;
          v45 += 2;
        }
        while (v11 > v45);
      }
      v17 = v123;
      v15 = v124;
      v35 = v126 + v124;
      v36 = &v127[v123];
      v18 = v121;
      v44 += v122;
      v38 = &v128[v121];
      v10 += 2;
    }
    while (v125 > v10);
  }
  return result;
}

uint64_t vt_Copy_RGfA_rgb_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_rgb_420vf_GCD);
  return 0;
}

unint64_t vt_Copy_RGfA_rgb_420vf_GCD(unint64_t result, uint64_t a2, double a3, float a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  _BYTE *v50;
  uint64_t v51;
  unint64_t v52;
  _BYTE *v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  char v60;
  char v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  char v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;

  v8 = *(_QWORD *)(result + 28);
  v9 = 2 * *(unsigned __int8 *)result;
  v10 = v8 * a2 / v9;
  v11 = (v8 + v8 * a2) / v9;
  if (2 * v11 != 2 * v10)
  {
    v12 = 0;
    v13 = *(_QWORD *)(result + 20);
    v14 = *(_QWORD *)(result + 44) + 2 * v10;
    v15 = 2 * v11 - 2 * v10;
    v16 = *(_QWORD *)(result + 152);
    v17 = *(uint64_t **)(result + 136);
    v18 = **(_QWORD **)(result + 64);
    v19 = *v17;
    v20 = v17[1];
    v21 = v17[2];
    v22 = (float)*(unsigned int *)(v16 + 136);
    LOWORD(a4) = *(_WORD *)(v16 + 144);
    v23 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v16 + 146);
    v24 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v16 + 148);
    v25 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v16 + 150);
    v26 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v16 + 152);
    v27 = (float)LODWORD(a8);
    v28 = *(float *)(v16 + 36);
    v29 = *(float *)(v16 + 40);
    v30 = *(float *)(v16 + 44);
    v31 = *(float *)(v16 + 48) * 0.25;
    v32 = *(float *)(v16 + 52) * 0.25;
    v33 = *(float *)(v16 + 56) * 0.25;
    v34 = *(float *)(v16 + 60) * 0.25;
    v35 = *(float *)(v16 + 64) * 0.25;
    v36 = *(float *)(v16 + 68) * 0.25;
    v37 = *(_QWORD *)(result + 112);
    v38 = *(_QWORD **)(result + 128);
    v39 = *(_QWORD *)(result + 120) + 2 * (*(_QWORD *)(result + 104) * a2 / v9);
    v40 = **(_QWORD **)(result + 56) + v18 * v14 + 16 * *(_QWORD *)(result + 36);
    v41 = (_BYTE *)(*v38 + v39 * v19 + v37);
    v42 = v38[2];
    if (v42)
      v43 = (_BYTE *)(v42 + v39 * v21 + v37);
    else
      v43 = 0;
    v44 = *(unsigned __int8 *)(v16 + 157);
    result = *(unsigned __int8 *)(v16 + 156);
    v45 = v38[1] + v39 / 2 * v20;
    v46 = *(unsigned __int8 *)(v16 + 155);
    v47 = *(unsigned __int8 *)(v16 + 154);
    v48 = v45 + v37;
    do
    {
      v49 = &v43[v21];
      v50 = &v41[v19];
      v51 = v40 + v18;
      if (v13)
      {
        v52 = 0;
        v53 = &v43[v21];
        v54 = &v41[v19];
        v55 = v40 + v18;
        do
        {
          v56 = v40 + 16;
          v57 = v55 + 16;
          if (v43)
          {
            v58 = llroundf(*(float *)(v40 + 4 * v44) * 255.0);
            v59 = llroundf(*(float *)(v56 + 4 * v44) * 255.0);
            v60 = llroundf(*(float *)(v55 + 4 * v44) * 255.0);
            v61 = llroundf(*(float *)(v57 + 4 * v44) * 255.0);
          }
          else
          {
            v60 = 0;
            v58 = 0;
            v59 = 0;
            v61 = 0;
          }
          v62 = *(float *)(v40 + 4 * v47) * v22;
          v63 = *(float *)(v40 + 4 * v46) * v22;
          v64 = *(float *)(v40 + 4 * result) * v22;
          v65 = *(float *)(v56 + 4 * v47) * v22;
          v66 = *(float *)(v56 + 4 * v46) * v22;
          v67 = *(float *)(v56 + 4 * result) * v22;
          v68 = *(float *)(v55 + 4 * v47) * v22;
          v69 = *(float *)(v55 + 4 * v46) * v22;
          v70 = *(float *)(v55 + 4 * result) * v22;
          v71 = *(float *)(v57 + 4 * v47) * v22;
          v72 = *(float *)(v57 + 4 * v46) * v22;
          v73 = *(float *)(v57 + 4 * result) * v22;
          v74 = (float)((float)((float)(v29 * v63) + (float)(v28 * v62)) + (float)(v30 * v64)) + v23;
          v75 = (float)((float)((float)(v29 * v66) + (float)(v28 * v65)) + (float)(v30 * v67)) + v23;
          v76 = (float)((float)((float)(v29 * v69) + (float)(v28 * v68)) + (float)(v30 * v70)) + v23;
          v77 = (float)((float)((float)(v29 * v72) + (float)(v28 * v71)) + (float)(v30 * v73)) + v23;
          if (v74 < v23)
            v78 = v23;
          else
            v78 = (float)((float)((float)(v29 * v63) + (float)(v28 * v62)) + (float)(v30 * v64)) + v23;
          if (v74 <= v25)
            v79 = v78;
          else
            v79 = v25;
          v80 = llroundf(v79);
          if (v75 < v23)
            v81 = v23;
          else
            v81 = (float)((float)((float)(v29 * v66) + (float)(v28 * v65)) + (float)(v30 * v67)) + v23;
          if (v75 > v25)
            v81 = v25;
          *v41 = v80;
          v41[1] = llroundf(v81);
          if (v76 < v23)
            v82 = v23;
          else
            v82 = (float)((float)((float)(v29 * v69) + (float)(v28 * v68)) + (float)(v30 * v70)) + v23;
          if (v76 > v25)
            v82 = v25;
          *v54 = llroundf(v82);
          if (v77 < v23)
            v83 = v23;
          else
            v83 = (float)((float)((float)(v29 * v72) + (float)(v28 * v71)) + (float)(v30 * v73)) + v23;
          if (v77 > v25)
            v83 = v25;
          v54[1] = llroundf(v83);
          v84 = (float)((float)(v62 + v65) + v68) + v71;
          v85 = (float)((float)(v63 + v66) + v69) + v72;
          v86 = (float)((float)(v64 + v67) + v70) + v73;
          v87 = (float)((float)(v24 + (float)(v84 * v31)) + (float)(v85 * v32)) + (float)(v86 * v33);
          v88 = v27;
          if (v87 <= v27)
          {
            v88 = (float)((float)(v24 + (float)(v84 * v31)) + (float)(v85 * v32)) + (float)(v86 * v33);
            if (v87 < v26)
              v88 = v26;
          }
          v89 = (float)((float)(v24 + (float)(v84 * v34)) + (float)(v85 * v35)) + (float)(v86 * v36);
          *(_BYTE *)(v48 + v52) = llroundf(v88);
          v90 = v27;
          if (v89 <= v27)
          {
            v90 = v89;
            if (v89 < v26)
              v90 = v26;
          }
          *(_BYTE *)(v48 + v52 + 1) = llroundf(v90);
          if (v43)
          {
            *v43 = v58;
            v43[1] = v59;
            v43 += 2;
            *v53 = v60;
            v53[1] = v61;
            v53 += 2;
          }
          v40 += 32;
          v55 += 32;
          v41 += 2;
          v54 += 2;
          v52 += 2;
        }
        while (v13 > v52);
      }
      v40 = v51 + v18;
      v41 = &v50[v19];
      v48 += v20;
      v43 = &v49[v21];
      v12 += 2;
    }
    while (v15 > v12);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Tone_Mat_TRC_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Tone_Mat_TRC_xf420_GCD);
  return 0;
}

unint64_t vt_Copy_RGfA_TRC_Tone_Mat_TRC_xf420_GCD(unint64_t result, uint64_t a2, float a3, float a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  float v26;
  float v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  unsigned int v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  float32x2_t v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  float32x2_t v49;
  uint64_t v51;
  int32x2_t v59;
  float v61;
  float v62;
  float v63;
  float32x2_t v66;
  float v70;
  float v71;
  float32x2_t v72;
  uint64_t v74;
  int32x2_t v79;
  float v81;
  float v82;
  float v83;
  float32x2_t v86;
  float v91;
  float v92;
  float v93;
  float v96;
  float v97;
  float v98;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v108;
  float v109;
  float v110;
  float v111;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  unsigned int v138;
  float v141;
  float v142;
  BOOL v143;
  float v144;
  unsigned int v145;
  float v146;
  float v147;
  unsigned int v148;
  float v149;
  float v150;
  unsigned int v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  _WORD *v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float v182;
  float v183;
  float v184;
  float v185;

  v4 = *(_QWORD *)(result + 28);
  v5 = 2 * *(unsigned __int8 *)result;
  v6 = v4 * a2 / v5;
  v7 = (v4 + v4 * a2) / v5;
  if (2 * v7 != 2 * v6)
  {
    v8 = 0;
    v9 = *(_QWORD *)(result + 20);
    v10 = *(_QWORD *)(result + 44) + 2 * v6;
    v11 = 2 * v7 - 2 * v6;
    v12 = *(_QWORD *)(result + 152);
    v13 = *(uint64_t **)(result + 136);
    v14 = **(_QWORD **)(result + 64);
    v15 = *v13;
    v16 = v13[1];
    LOWORD(a3) = *(_WORD *)(v12 + 144);
    v17 = (float)LODWORD(a3);
    LOWORD(a4) = *(_WORD *)(v12 + 146);
    v18 = (float)LODWORD(a4);
    LOWORD(a4) = *(_WORD *)(v12 + 148);
    v19 = (float)LODWORD(a4);
    LOWORD(a4) = *(_WORD *)(v12 + 150);
    v20 = (float)LODWORD(a4);
    v185 = v20;
    LOWORD(v20) = *(_WORD *)(v12 + 152);
    v181 = *(float *)(v12 + 40);
    v182 = *(float *)(v12 + 36);
    v179 = *(float *)(v12 + 48) * 0.25;
    v180 = *(float *)(v12 + 44);
    v177 = *(float *)(v12 + 56) * 0.25;
    v178 = *(float *)(v12 + 52) * 0.25;
    v175 = *(float *)(v12 + 64) * 0.25;
    v176 = *(float *)(v12 + 60) * 0.25;
    v173 = *(float *)(v12 + 68) * 0.25;
    v174 = *(float *)(v12 + 72);
    v171 = *(float *)(v12 + 80);
    v172 = *(float *)(v12 + 76);
    v169 = *(float *)(v12 + 88);
    v170 = *(float *)(v12 + 84);
    v167 = *(float *)(v12 + 96);
    v168 = *(float *)(v12 + 92);
    v21 = *(float *)(v12 + 108);
    v165 = *(float *)(v12 + 104);
    v166 = *(float *)(v12 + 100);
    v22 = v12 + 164;
    v23 = v12 + 16548;
    v24 = v12 + 32932;
    v25 = *(float *)(v12 + 112);
    v26 = *(float *)(v12 + 116);
    v27 = *(float *)(v12 + 120);
    v28 = *(_QWORD *)(result + 112);
    v29 = *(_QWORD *)(result + 104) * a2 / v5;
    v30 = *(_QWORD **)(result + 128);
    v31 = *(_QWORD *)(result + 120) + 2 * v29;
    v32 = **(_QWORD **)(result + 56) + v14 * v10 + 16 * *(_QWORD *)(result + 36);
    v33 = v30[1];
    v34 = (char *)(*v30 + v31 * v15 + 2 * v28);
    v35 = *(unsigned __int8 *)(v12 + 132);
    if (v35 >= 0x11)
      v36 = 0;
    else
      v36 = 16 - v35;
    result = *(unsigned __int8 *)(v12 + 156);
    if (v31 >= 0)
      v37 = v31;
    else
      v37 = v31 + 1;
    v38 = v33 + (v37 >> 1) * v16;
    v39 = *(unsigned __int8 *)(v12 + 155);
    v40 = *(unsigned __int8 *)(v12 + 154);
    v41 = v38 + 2 * v28;
    v42 = v36;
    v43 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    v183 = (float)LODWORD(v20);
    v184 = v18;
    v163 = v21;
    v164 = v25;
    v162 = v26;
    do
    {
      v44 = &v34[v15];
      v45 = v32 + v14;
      if (v9)
      {
        v46 = 0;
        v47 = v32 + v14;
        v48 = &v34[v15];
        do
        {
          v49.i32[0] = *(_DWORD *)(v32 + 4 * v40);
          v49.i32[1] = *(_DWORD *)(v32 + 4 * v39);
          _D1 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v49, v43), 0), v43)));
          v51 = v32 + 16;
          _D1.i16[0] = *(_WORD *)(v22 + 2 * _D1.u32[0]);
          __asm { FCVT            S15, H1 }
          _D1.i16[0] = *(_WORD *)(v22 + 2 * _D1.u32[1]);
          _D3.i32[0] = *(_DWORD *)(v32 + 4 * result);
          _D3.i32[1] = *(_DWORD *)(v32 + 16 + 4 * v40);
          __asm { FCVT            S16, H1 }
          v59 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(_D3, v43), 0), v43)));
          _D3.i16[0] = *(_WORD *)(v22 + 2 * v59.u32[0]);
          __asm { FCVT            S17, H3 }
          v61 = fmaxf(_S15, fmaxf(_S16, _S17));
          v62 = (float)((float)((float)(v25 * _S16) + (float)(v21 * _S15)) + (float)(v26 * _S17)) + (float)(v27 * v61);
          v63 = 8191.0;
          if (v62 <= 8191.0)
          {
            v63 = (float)((float)((float)(v25 * _S16) + (float)(v21 * _S15)) + (float)(v26 * _S17)) + (float)(v27 * v61);
            if (v62 < 0.0)
              v63 = 0.0;
          }
          _H1 = *(_WORD *)(v22 + 2 * v59.u32[1]);
          __asm { FCVT            S19, H1 }
          v66.i32[0] = *(_DWORD *)(v51 + 4 * v39);
          v66.i32[1] = *(_DWORD *)(v51 + 4 * result);
          _D1 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v66, v43), 0), v43)));
          _D1.i16[0] = *(_WORD *)(v22 + 2 * _D1.u32[0]);
          __asm { FCVT            S20, H1 }
          _D1.i16[0] = *(_WORD *)(v22 + 2 * _D1.u32[1]);
          __asm { FCVT            S22, H1 }
          v70 = (float)((float)((float)(v25 * _S20) + (float)(v21 * _S19)) + (float)(v26 * _S22))
              + (float)(v27 * fmaxf(_S19, fmaxf(_S20, _S22)));
          v71 = 8191.0;
          if (v70 <= 8191.0)
          {
            v71 = v70;
            if (v70 < 0.0)
              v71 = 0.0;
          }
          v72.i32[0] = *(_DWORD *)(v47 + 4 * v40);
          v72.i32[1] = *(_DWORD *)(v47 + 4 * v39);
          _D1 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v72, v43), 0), v43)));
          v74 = v47 + 16;
          _D1.i16[0] = *(_WORD *)(v22 + 2 * _D1.u32[0]);
          __asm { FCVT            S1, H1 }
          _H4 = *(_WORD *)(v22 + 2 * _D1.u32[1]);
          _D5.i32[0] = *(_DWORD *)(v47 + 4 * result);
          _D5.i32[1] = *(_DWORD *)(v47 + 16 + 4 * v40);
          __asm { FCVT            S12, H4 }
          v79 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(_D5, v43), 0), v43)));
          _D5.i16[0] = *(_WORD *)(v22 + 2 * v79.u32[0]);
          __asm { FCVT            S5, H5 }
          v81 = fmaxf(_S1, fmaxf(_S12, _S5));
          v82 = (float)((float)((float)(v25 * _S12) + (float)(v21 * _S1)) + (float)(v26 * _S5)) + (float)(v27 * v81);
          v83 = 8191.0;
          if (v82 <= 8191.0)
          {
            v83 = (float)((float)((float)(v25 * _S12) + (float)(v21 * _S1)) + (float)(v26 * _S5)) + (float)(v27 * v81);
            if (v82 < 0.0)
              v83 = 0.0;
          }
          _H4 = *(_WORD *)(v22 + 2 * v79.u32[1]);
          __asm { FCVT            S6, H4 }
          v86.i32[0] = *(_DWORD *)(v74 + 4 * v39);
          v86.i32[1] = *(_DWORD *)(v74 + 4 * result);
          _D4 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v86, v43), 0), v43)));
          _D4.i16[0] = *(_WORD *)(v22 + 2 * _D4.u32[0]);
          __asm { FCVT            S23, H4 }
          _D4.i16[0] = *(_WORD *)(v22 + 2 * _D4.u32[1]);
          __asm { FCVT            S24, H4 }
          _D4.i16[0] = *(_WORD *)(v23 + 2 * llroundf(v63));
          __asm { FCVT            S7, H4 }
          v91 = _S15 * _S7;
          v92 = _S16 * _S7;
          v93 = _S17 * _S7;
          _H3 = *(_WORD *)(v23 + 2 * llroundf(v71));
          __asm { FCVT            S3, H3 }
          v96 = _S19 * _S3;
          v97 = _S20 * _S3;
          v98 = _S22 * _S3;
          LOWORD(_S3) = *(_WORD *)(v23 + 2 * llroundf(v83));
          __asm { FCVT            S3, H3 }
          v100 = _S1 * _S3;
          v101 = _S12 * _S3;
          v102 = _S5 * _S3;
          v103 = (float)((float)((float)(v25 * _S23) + (float)(v21 * _S6)) + (float)(v26 * _S24))
               + (float)(v27 * fmaxf(_S6, fmaxf(_S23, _S24)));
          v104 = 8191.0;
          if (v103 <= 8191.0)
          {
            v104 = v103;
            if (v103 < 0.0)
              v104 = 0.0;
          }
          _H5 = *(_WORD *)(v23 + 2 * llroundf(v104));
          __asm { FCVT            S5, H5 }
          _S6 = _S6 * _S5;
          v108 = _S23 * _S5;
          v109 = _S24 * _S5;
          v110 = (float)((float)(v172 * v92) + (float)(v91 * v174)) + (float)(v93 * v171);
          v111 = (float)((float)(v169 * v92) + (float)(v91 * v170)) + (float)(v93 * v168);
          _S4 = (float)((float)(v166 * v92) + (float)(v91 * v167)) + (float)(v93 * v165);
          v113 = (float)((float)(v172 * v97) + (float)(v96 * v174)) + (float)(v98 * v171);
          v114 = (float)((float)(v169 * v97) + (float)(v96 * v170)) + (float)(v98 * v168);
          v115 = (float)((float)(v166 * v97) + (float)(v96 * v167)) + (float)(v98 * v165);
          v116 = (float)((float)(v172 * v101) + (float)(v100 * v174)) + (float)(v102 * v171);
          v117 = (float)((float)(v169 * v101) + (float)(v100 * v170)) + (float)(v102 * v168);
          v118 = (float)((float)(v166 * v101) + (float)(v100 * v167)) + (float)(v102 * v165);
          v119 = (float)((float)(v172 * v108) + (float)(_S6 * v174)) + (float)(v109 * v171);
          v120 = (float)((float)(v169 * v108) + (float)(_S6 * v170)) + (float)(v109 * v168);
          v121 = (float)((float)(v166 * v108) + (float)(_S6 * v167)) + (float)(v109 * v165);
          _H1 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v110, 0.0), 8191.0)));
          __asm { FCVT            S16, H1 }
          _H1 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v111, 0.0), 8191.0)));
          __asm { FCVT            S17, H1 }
          _H1 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(_S4, 0.0), 8191.0)));
          LOWORD(_S4) = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v113, 0.0), 8191.0)));
          __asm
          {
            FCVT            S3, H1
            FCVT            S18, H4
          }
          _H1 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v114, 0.0), 8191.0)));
          __asm { FCVT            S20, H1 }
          _H1 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v115, 0.0), 8191.0)));
          __asm { FCVT            S19, H1 }
          _H1 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v116, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          LOWORD(_S4) = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v117, 0.0), 8191.0)));
          __asm { FCVT            S22, H4 }
          LOWORD(_S4) = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v118, 0.0), 8191.0)));
          LOWORD(_S6) = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v119, 0.0), 8191.0)));
          __asm
          {
            FCVT            S12, H4
            FCVT            S4, H6
          }
          LOWORD(_S6) = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v120, 0.0), 8191.0)));
          v138 = llroundf(fminf(fmaxf(v121, 0.0), 8191.0));
          __asm { FCVT            S5, H6 }
          LOWORD(_S6) = *(_WORD *)(v24 + 2 * v138);
          __asm { FCVT            S6, H6 }
          v141 = (float)((float)((float)(v181 * _S17) + (float)(v182 * _S16)) + (float)(v180 * _S3)) + v17;
          if (v141 < v17)
            v142 = v17;
          else
            v142 = (float)((float)((float)(v181 * _S17) + (float)(v182 * _S16)) + (float)(v180 * _S3)) + v17;
          v143 = v141 <= v19;
          v144 = (float)((float)((float)(v181 * _S20) + (float)(v182 * _S18)) + (float)(v180 * _S19)) + v17;
          if (!v143)
            v142 = v19;
          v145 = llroundf(v142);
          if (v144 < v17)
            v146 = v17;
          else
            v146 = (float)((float)((float)(v181 * _S20) + (float)(v182 * _S18)) + (float)(v180 * _S19)) + v17;
          v143 = v144 <= v19;
          v147 = (float)((float)((float)(v181 * _S22) + (float)(v182 * _S1)) + (float)(v180 * _S12)) + v17;
          if (!v143)
            v146 = v19;
          v148 = llroundf(v146);
          if (v147 < v17)
            v149 = v17;
          else
            v149 = (float)((float)((float)(v181 * _S22) + (float)(v182 * _S1)) + (float)(v180 * _S12)) + v17;
          v143 = v147 <= v19;
          v150 = (float)((float)((float)(v181 * _S5) + (float)(v182 * _S4)) + (float)(v180 * _S6)) + v17;
          if (!v143)
            v149 = v19;
          v151 = llroundf(v149);
          if (v150 < v17)
            v152 = v17;
          else
            v152 = (float)((float)((float)(v181 * _S5) + (float)(v182 * _S4)) + (float)(v180 * _S6)) + v17;
          if (v150 <= v19)
            v153 = v152;
          else
            v153 = v19;
          v154 = (float)((float)(_S16 + _S18) + _S1) + _S4;
          v155 = (float)((float)(_S17 + _S20) + _S22) + _S5;
          *(_WORD *)v34 = v145 << v42;
          *((_WORD *)v34 + 1) = v148 << v42;
          *(_WORD *)v48 = v151 << v42;
          *((_WORD *)v48 + 1) = llroundf(v153) << v42;
          v156 = (float)((float)(_S3 + _S19) + _S12) + _S6;
          v157 = (float)((float)(v184 + (float)(v154 * v179)) + (float)(v155 * v178)) + (float)(v156 * v177);
          v158 = v183;
          if (v157 <= v183)
          {
            v158 = (float)((float)(v184 + (float)(v154 * v179)) + (float)(v155 * v178)) + (float)(v156 * v177);
            if (v157 < v185)
              v158 = v185;
          }
          v159 = (_WORD *)(v41 + 2 * v46);
          v160 = (float)((float)(v184 + (float)(v154 * v176)) + (float)(v155 * v175)) + (float)(v156 * v173);
          *v159 = llroundf(v158) << v42;
          v161 = v183;
          if (v160 <= v183)
          {
            v161 = v160;
            if (v160 < v185)
              v161 = v185;
          }
          v32 += 32;
          v47 += 32;
          v34 += 4;
          v48 += 4;
          v159[1] = llroundf(v161) << v42;
          v46 += 2;
          v21 = v163;
          v25 = v164;
          v26 = v162;
        }
        while (v9 > v46);
      }
      v32 = v45 + v14;
      v34 = &v44[v15];
      v41 += v16;
      v8 += 2;
    }
    while (v11 > v8);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Mat_TRC_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Mat_TRC_xf420_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_RGfA_TRC_Mat_TRC_xf420_GCD(unsigned __int8 *result, uint64_t a2, float a3, float a4, float a5, float a6, float a7)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  float32x2_t v48;
  unsigned __int8 *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unsigned __int8 *v53;
  float32x2_t v54;
  float32x2_t v67;
  float32x2_t v71;
  float32x2_t v75;
  float v80;
  float v81;
  float v83;
  float v84;
  float v85;
  float v86;
  unsigned int v91;
  unsigned int v100;
  float v104;
  float v105;
  BOOL v106;
  float v107;
  unsigned int v108;
  float v109;
  float v110;
  unsigned int v111;
  float v112;
  float v113;
  unsigned int v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  _WORD *v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;

  v7 = *(_QWORD *)(result + 28);
  v8 = 2 * *result;
  v9 = v7 * a2 / v8;
  v10 = (v7 + v7 * a2) / v8;
  if (2 * v10 != 2 * v9)
  {
    v11 = 0;
    v12 = *(_QWORD *)(result + 20);
    v13 = *(_QWORD *)(result + 44) + 2 * v9;
    v14 = 2 * v10 - 2 * v9;
    v15 = *((_QWORD *)result + 19);
    v16 = (uint64_t *)*((_QWORD *)result + 17);
    v17 = **((_QWORD **)result + 8);
    v18 = *v16;
    v19 = v16[1];
    LOWORD(a3) = *(_WORD *)(v15 + 144);
    v20 = (float)LODWORD(a3);
    LOWORD(a4) = *(_WORD *)(v15 + 146);
    LOWORD(a5) = *(_WORD *)(v15 + 148);
    v21 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v15 + 150);
    LOWORD(a7) = *(_WORD *)(v15 + 152);
    v137 = (float)LODWORD(a7);
    v138 = (float)LODWORD(a4);
    v135 = *(float *)(v15 + 36);
    v136 = (float)LODWORD(a6);
    v133 = *(float *)(v15 + 44);
    v134 = *(float *)(v15 + 40);
    v131 = *(float *)(v15 + 52) * 0.25;
    v132 = *(float *)(v15 + 48) * 0.25;
    v129 = *(float *)(v15 + 60) * 0.25;
    v130 = *(float *)(v15 + 56) * 0.25;
    v127 = *(float *)(v15 + 72);
    v128 = *(float *)(v15 + 64) * 0.25;
    v126 = *(float *)(v15 + 68) * 0.25;
    v22 = *(float *)(v15 + 76);
    v23 = *(float *)(v15 + 80);
    v24 = *(float *)(v15 + 84);
    v25 = *(float *)(v15 + 88);
    v26 = *(float *)(v15 + 92);
    v27 = *(float *)(v15 + 96);
    v28 = *(float *)(v15 + 100);
    v29 = *(float *)(v15 + 104);
    v30 = v15 + 164;
    v31 = v15 + 16548;
    v32 = *((_QWORD *)result + 14);
    v33 = *((_QWORD *)result + 13) * a2 / v8;
    v34 = (uint64_t *)*((_QWORD *)result + 16);
    v35 = *((_QWORD *)result + 15) + 2 * v33;
    v36 = **((_QWORD **)result + 7) + v17 * v13 + 16 * *(_QWORD *)(result + 36);
    v38 = *v34;
    v37 = v34[1];
    result = (unsigned __int8 *)(v38 + v35 * v18 + 2 * v32);
    v39 = *(unsigned __int8 *)(v15 + 132);
    if (v39 >= 0x11)
      v40 = 0;
    else
      v40 = 16 - v39;
    v41 = *(unsigned __int8 *)(v15 + 156);
    if (v35 >= 0)
      v42 = v35;
    else
      v42 = v35 + 1;
    v43 = v37 + (v42 >> 1) * v19;
    v44 = *(unsigned __int8 *)(v15 + 155);
    v45 = *(unsigned __int8 *)(v15 + 154);
    v46 = v43 + 2 * v32;
    v47 = v40;
    v48 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      v49 = &result[v18];
      v50 = v36 + v17;
      if (v12)
      {
        v51 = 0;
        v52 = v36 + v17;
        v53 = &result[v18];
        do
        {
          v54.i32[0] = *(_DWORD *)(v36 + 4 * v45);
          v54.i32[1] = *(_DWORD *)(v36 + 4 * v44);
          _D16 = (float32x2_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v54, v48), 0), v48)));
          _D16.i16[0] = *(_WORD *)(v30 + 2 * _D16.u32[0]);
          __asm { FCVT            S11, H16 }
          _D16.i16[0] = *(_WORD *)(v30 + 2 * _D16.u32[1]);
          __asm { FCVT            S12, H16 }
          _D16.i32[0] = *(_DWORD *)(v36 + 4 * v41);
          _D16.i32[1] = *(_DWORD *)(v36 + 16 + 4 * v45);
          _D16 = (float32x2_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(_D16, v48), 0), v48)));
          _D16.i16[0] = *(_WORD *)(v30 + 2 * _D16.u32[0]);
          __asm { FCVT            S14, H16 }
          _D16.i16[0] = *(_WORD *)(v30 + 2 * _D16.u32[1]);
          __asm { FCVT            S13, H16 }
          _D16.i32[0] = *(_DWORD *)(v36 + 16 + 4 * v44);
          _D16.i32[1] = *(_DWORD *)(v36 + 16 + 4 * v41);
          _D16 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(_D16, v48), 0), v48)));
          _D16.i16[0] = *(_WORD *)(v30 + 2 * _D16.u32[0]);
          __asm { FCVT            S17, H16 }
          _D16.i16[0] = *(_WORD *)(v30 + 2 * _D16.u32[1]);
          __asm { FCVT            S16, H16 }
          v67.i32[0] = *(_DWORD *)(v52 + 4 * v45);
          v67.i32[1] = *(_DWORD *)(v52 + 4 * v44);
          _D18 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v67, v48), 0), v48)));
          _D18.i16[0] = *(_WORD *)(v30 + 2 * _D18.u32[0]);
          __asm { FCVT            S18, H18 }
          _H19 = *(_WORD *)(v30 + 2 * _D18.u32[1]);
          __asm { FCVT            S19, H19 }
          v71.i32[0] = *(_DWORD *)(v52 + 4 * v41);
          v71.i32[1] = *(_DWORD *)(v52 + 16 + 4 * v45);
          _D15 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v71, v48), 0), v48)));
          _D15.i16[0] = *(_WORD *)(v30 + 2 * _D15.u32[0]);
          __asm { FCVT            S15, H15 }
          _H20 = *(_WORD *)(v30 + 2 * _D15.u32[1]);
          __asm { FCVT            S20, H20 }
          v75.i32[0] = *(_DWORD *)(v52 + 16 + 4 * v44);
          v75.i32[1] = *(_DWORD *)(v52 + 16 + 4 * v41);
          _D22 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v75, v48), 0), v48)));
          _D22.i16[0] = *(_WORD *)(v30 + 2 * _D22.u32[0]);
          __asm { FCVT            S22, H22 }
          _H3 = *(_WORD *)(v30 + 2 * _D22.u32[1]);
          __asm { FCVT            S3, H3 }
          _S1 = (float)((float)(v22 * _S12) + (float)(_S11 * v127)) + (float)(_S14 * v23);
          v80 = (float)((float)(v25 * _S12) + (float)(_S11 * v24)) + (float)(_S14 * v26);
          v81 = (float)((float)(v28 * _S12) + (float)(_S11 * v27)) + (float)(_S14 * v29);
          _S5 = (float)((float)(v22 * _S17) + (float)(_S13 * v127)) + (float)(*(float *)_D16.i32 * v23);
          v83 = (float)((float)(v25 * _S17) + (float)(_S13 * v24)) + (float)(*(float *)_D16.i32 * v26);
          *(float *)_D16.i32 = (float)((float)(v28 * _S17) + (float)(_S13 * v27)) + (float)(*(float *)_D16.i32 * v29);
          v84 = (float)((float)(v22 * _S19) + (float)(*(float *)_D18.i32 * v127)) + (float)(*(float *)_D15.i32 * v23);
          v85 = (float)((float)(v25 * _S19) + (float)(*(float *)_D18.i32 * v24)) + (float)(*(float *)_D15.i32 * v26);
          v86 = (float)((float)(v28 * _S19) + (float)(*(float *)_D18.i32 * v27)) + (float)(*(float *)_D15.i32 * v29);
          LOWORD(_S1) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          __asm { FCVT            S11, H1 }
          LOWORD(_S1) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S12, H1 }
          LOWORD(_S1) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          LOWORD(_S5) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm
          {
            FCVT            S13, H1
            FCVT            S14, H5
          }
          LOWORD(_S1) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          v91 = llroundf(fminf(fmaxf(*(float *)_D16.i32, 0.0), 8191.0));
          __asm { FCVT            S16, H1 }
          LOWORD(_S1) = *(_WORD *)(v31 + 2 * v91);
          __asm { FCVT            S15, H1 }
          LOWORD(_S1) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm { FCVT            S17, H1 }
          LOWORD(_S1) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          __asm { FCVT            S18, H1 }
          LOWORD(_S1) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          _H4 = *(_WORD *)(v31
                         + 2
                         * llroundf(fminf(fmaxf((float)((float)(v22 * *(float *)_D22.i32) + (float)(_S20 * v127)) + (float)(_S3 * v23), 0.0), 8191.0)));
          __asm
          {
            FCVT            S19, H1
            FCVT            S1, H4
          }
          _H4 = *(_WORD *)(v31
                         + 2
                         * llroundf(fminf(fmaxf((float)((float)(v25 * *(float *)_D22.i32) + (float)(_S20 * v24)) + (float)(_S3 * v26), 0.0), 8191.0)));
          v100 = llroundf(fminf(fmaxf((float)((float)(v28 * *(float *)_D22.i32) + (float)(_S20 * v27)) + (float)(_S3 * v29), 0.0), 8191.0));
          __asm { FCVT            S3, H4 }
          _H4 = *(_WORD *)(v31 + 2 * v100);
          __asm { FCVT            S4, H4 }
          v104 = (float)((float)((float)(v134 * _S12) + (float)(v135 * _S11)) + (float)(v133 * _S13)) + v20;
          if (v104 < v20)
            v105 = v20;
          else
            v105 = (float)((float)((float)(v134 * _S12) + (float)(v135 * _S11)) + (float)(v133 * _S13)) + v20;
          v106 = v104 <= v21;
          v107 = (float)((float)((float)(v134 * _S16) + (float)(v135 * _S14)) + (float)(v133 * _S15)) + v20;
          if (!v106)
            v105 = v21;
          v108 = llroundf(v105);
          if (v107 < v20)
            v109 = v20;
          else
            v109 = (float)((float)((float)(v134 * _S16) + (float)(v135 * _S14)) + (float)(v133 * _S15)) + v20;
          v106 = v107 <= v21;
          v110 = (float)((float)((float)(v134 * _S18) + (float)(v135 * _S17)) + (float)(v133 * _S19)) + v20;
          if (!v106)
            v109 = v21;
          v111 = llroundf(v109);
          if (v110 < v20)
            v112 = v20;
          else
            v112 = (float)((float)((float)(v134 * _S18) + (float)(v135 * _S17)) + (float)(v133 * _S19)) + v20;
          v106 = v110 <= v21;
          v113 = (float)((float)((float)(v134 * _S3) + (float)(v135 * _S1)) + (float)(v133 * _S4)) + v20;
          if (!v106)
            v112 = v21;
          v114 = llroundf(v112);
          if (v113 < v20)
            v115 = v20;
          else
            v115 = (float)((float)((float)(v134 * _S3) + (float)(v135 * _S1)) + (float)(v133 * _S4)) + v20;
          if (v113 <= v21)
            v116 = v115;
          else
            v116 = v21;
          v117 = (float)((float)(_S11 + _S14) + _S17) + _S1;
          v118 = (float)((float)(_S12 + _S16) + _S18) + _S3;
          *(_WORD *)result = v108 << v47;
          *((_WORD *)result + 1) = v111 << v47;
          *(_WORD *)v53 = v114 << v47;
          *((_WORD *)v53 + 1) = llroundf(v116) << v47;
          v119 = (float)(_S13 + _S15) + _S19;
          v120 = v137;
          v121 = v119 + _S4;
          v122 = (float)((float)(v138 + (float)(v117 * v132)) + (float)(v118 * v131))
               + (float)((float)(v119 + _S4) * v130);
          if (v122 <= v137)
          {
            v120 = (float)((float)(v138 + (float)(v117 * v132)) + (float)(v118 * v131)) + (float)(v121 * v130);
            if (v122 < v136)
              v120 = v136;
          }
          v123 = (_WORD *)(v46 + 2 * v51);
          v124 = (float)((float)(v138 + (float)(v117 * v129)) + (float)(v118 * v128)) + (float)(v121 * v126);
          *v123 = llroundf(v120) << v47;
          v125 = v137;
          if (v124 <= v137)
          {
            v125 = v124;
            if (v124 < v136)
              v125 = v136;
          }
          v36 += 32;
          v52 += 32;
          result += 4;
          v53 += 4;
          v123[1] = llroundf(v125) << v47;
          v51 += 2;
        }
        while (v12 > v51);
      }
      v36 = v50 + v17;
      result = &v49[v18];
      v46 += v19;
      v11 += 2;
    }
    while (v14 > v11);
  }
  return result;
}

uint64_t vt_Copy_RGfA_rgb_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_rgb_xf420_GCD);
  return 0;
}

unint64_t vt_Copy_RGfA_rgb_xf420_GCD(unint64_t result, uint64_t a2, double a3, float a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  unsigned int v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  _WORD *v82;
  float v83;
  float v84;

  v8 = *(_QWORD *)(result + 28);
  v9 = 2 * *(unsigned __int8 *)result;
  v10 = v8 * a2 / v9;
  v11 = (v8 + v8 * a2) / v9;
  if (2 * v11 != 2 * v10)
  {
    v12 = 0;
    v13 = *(_QWORD *)(result + 20);
    v14 = *(_QWORD *)(result + 44) + 2 * v10;
    v15 = 2 * v11 - 2 * v10;
    v16 = *(_QWORD *)(result + 152);
    v17 = *(uint64_t **)(result + 136);
    v18 = **(_QWORD **)(result + 64);
    v19 = *v17;
    v20 = v17[1];
    v21 = (float)*(unsigned int *)(v16 + 136);
    LOWORD(a4) = *(_WORD *)(v16 + 144);
    v22 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v16 + 146);
    v23 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v16 + 148);
    v24 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v16 + 150);
    v25 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v16 + 152);
    v26 = (float)LODWORD(a8);
    v27 = *(float *)(v16 + 36);
    v28 = *(float *)(v16 + 40);
    v29 = *(float *)(v16 + 44);
    v30 = *(float *)(v16 + 48) * 0.25;
    v31 = *(float *)(v16 + 52) * 0.25;
    v32 = *(float *)(v16 + 56) * 0.25;
    v33 = *(float *)(v16 + 60) * 0.25;
    v34 = *(float *)(v16 + 64) * 0.25;
    v35 = *(float *)(v16 + 68) * 0.25;
    v36 = *(_QWORD *)(result + 112);
    v37 = *(uint64_t **)(result + 128);
    v38 = *(_QWORD *)(result + 120) + 2 * (*(_QWORD *)(result + 104) * a2 / v9);
    v39 = **(_QWORD **)(result + 56) + v18 * v14 + 16 * *(_QWORD *)(result + 36);
    v40 = *v37;
    v41 = v37[1];
    v42 = (char *)(v40 + v38 * v19 + 2 * v36);
    v43 = *(unsigned __int8 *)(v16 + 132);
    if (v43 >= 0x11)
      v44 = 0;
    else
      v44 = 16 - v43;
    v45 = *(unsigned __int8 *)(v16 + 156);
    if (v38 >= 0)
      v46 = v38;
    else
      v46 = v38 + 1;
    v47 = v41 + (v46 >> 1) * v20;
    v48 = *(unsigned __int8 *)(v16 + 155);
    result = *(unsigned __int8 *)(v16 + 154);
    v49 = v47 + 2 * v36;
    v50 = v44;
    do
    {
      v51 = &v42[v19];
      v52 = v39 + v18;
      if (v13)
      {
        v53 = 0;
        v54 = v39 + v18;
        v55 = &v42[v19];
        do
        {
          v56 = *(float *)(v39 + 4 * result) * v21;
          v57 = *(float *)(v39 + 4 * v48) * v21;
          v58 = *(float *)(v39 + 4 * v45) * v21;
          v59 = *(float *)(v39 + 16 + 4 * result) * v21;
          v60 = *(float *)(v39 + 16 + 4 * v48) * v21;
          v61 = *(float *)(v39 + 16 + 4 * v45) * v21;
          v62 = *(float *)(v54 + 4 * result) * v21;
          v63 = *(float *)(v54 + 4 * v48) * v21;
          v64 = *(float *)(v54 + 4 * v45) * v21;
          v65 = *(float *)(v54 + 16 + 4 * result) * v21;
          v66 = *(float *)(v54 + 16 + 4 * v48) * v21;
          v67 = *(float *)(v54 + 16 + 4 * v45) * v21;
          v68 = (float)((float)((float)(v28 * v57) + (float)(v27 * v56)) + (float)(v29 * v58)) + v22;
          v69 = (float)((float)((float)(v28 * v60) + (float)(v27 * v59)) + (float)(v29 * v61)) + v22;
          v70 = (float)((float)((float)(v28 * v63) + (float)(v27 * v62)) + (float)(v29 * v64)) + v22;
          v71 = (float)((float)((float)(v28 * v66) + (float)(v27 * v65)) + (float)(v29 * v67)) + v22;
          if (v68 < v22)
            v72 = v22;
          else
            v72 = (float)((float)((float)(v28 * v57) + (float)(v27 * v56)) + (float)(v29 * v58)) + v22;
          if (v68 <= v24)
            v73 = v72;
          else
            v73 = v24;
          *(_WORD *)v42 = llroundf(v73) << v50;
          if (v69 < v22)
            v74 = v22;
          else
            v74 = (float)((float)((float)(v28 * v60) + (float)(v27 * v59)) + (float)(v29 * v61)) + v22;
          if (v69 > v24)
            v74 = v24;
          *((_WORD *)v42 + 1) = llroundf(v74) << v50;
          if (v70 < v22)
            v75 = v22;
          else
            v75 = (float)((float)((float)(v28 * v63) + (float)(v27 * v62)) + (float)(v29 * v64)) + v22;
          if (v70 > v24)
            v75 = v24;
          *(_WORD *)v55 = llroundf(v75) << v50;
          if (v71 < v22)
            v76 = v22;
          else
            v76 = (float)((float)((float)(v28 * v66) + (float)(v27 * v65)) + (float)(v29 * v67)) + v22;
          if (v71 > v24)
            v76 = v24;
          *((_WORD *)v55 + 1) = llroundf(v76) << v50;
          v77 = (float)((float)(v56 + v59) + v62) + v65;
          v78 = (float)((float)(v57 + v60) + v63) + v66;
          v79 = (float)((float)(v58 + v61) + v64) + v67;
          v80 = (float)((float)(v23 + (float)(v77 * v30)) + (float)(v78 * v31)) + (float)(v79 * v32);
          v81 = v26;
          if (v80 <= v26)
          {
            v81 = (float)((float)(v23 + (float)(v77 * v30)) + (float)(v78 * v31)) + (float)(v79 * v32);
            if (v80 < v25)
              v81 = v25;
          }
          v82 = (_WORD *)(v49 + 2 * v53);
          v83 = (float)((float)(v23 + (float)(v77 * v33)) + (float)(v78 * v34)) + (float)(v79 * v35);
          *v82 = llroundf(v81) << v50;
          v84 = v26;
          if (v83 <= v26)
          {
            v84 = v83;
            if (v83 < v25)
              v84 = v25;
          }
          v39 += 32;
          v54 += 32;
          v42 += 4;
          v55 += 4;
          v82[1] = llroundf(v84) << v50;
          v53 += 2;
        }
        while (v13 > v53);
      }
      v39 = v52 + v18;
      v42 = &v51[v19];
      v49 += v20;
      v12 += 2;
    }
    while (v15 > v12);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Tone_Mat_TRC_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v20 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v18 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Tone_Mat_TRC_422vf_GCD);
  return 0;
}

unint64_t vt_Copy_RGfA_TRC_Tone_Mat_TRC_422vf_GCD(unint64_t result, uint64_t a2, float a3, float a4, float a5, float a6)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  float v40;
  float v41;
  float v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  float32x2_t v56;
  uint64_t v57;
  unint64_t v58;
  _BYTE *v59;
  _BYTE *v60;
  uint64_t v61;
  float v62;
  float32x2_t v63;
  uint64_t v65;
  float32x2_t v71;
  int32x2_t v73;
  float v75;
  float v76;
  float v77;
  float32x2_t v80;
  float v84;
  float v85;
  float v86;
  char v87;
  char v88;
  float v91;
  float v92;
  float v93;
  float v98;
  float v99;
  float v100;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;

  v6 = *(_QWORD *)(result + 28);
  v7 = *(unsigned __int8 *)result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)(result + 20);
    v12 = v8 + *(_QWORD *)(result + 44);
    v13 = v9 - v8;
    v14 = *(_QWORD *)(result + 152);
    v15 = *(uint64_t **)(result + 136);
    v16 = *(_QWORD **)(result + 56);
    v17 = **(_QWORD **)(result + 64);
    v18 = *v15;
    v19 = v15[1];
    v20 = v15[2];
    LOWORD(a3) = *(_WORD *)(v14 + 144);
    v21 = (float)LODWORD(a3);
    LOWORD(a4) = *(_WORD *)(v14 + 146);
    v22 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v14 + 148);
    v23 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v14 + 150);
    v24 = (float)LODWORD(a6);
    LOWORD(a6) = *(_WORD *)(v14 + 152);
    v25 = (float)LODWORD(a6);
    v130 = *(float *)(v14 + 36);
    v131 = v24;
    v26 = *(float *)(v14 + 44);
    v128 = *(float *)(v14 + 48) * 0.5;
    v129 = *(float *)(v14 + 40);
    v126 = *(float *)(v14 + 56) * 0.5;
    v127 = *(float *)(v14 + 52) * 0.5;
    v124 = *(float *)(v14 + 64) * 0.5;
    v125 = *(float *)(v14 + 60) * 0.5;
    v27 = *(float *)(v14 + 72);
    v123 = *(float *)(v14 + 68) * 0.5;
    v28 = *(float *)(v14 + 76);
    v29 = *(float *)(v14 + 80);
    v30 = *(float *)(v14 + 84);
    v31 = *(float *)(v14 + 88);
    v32 = *(float *)(v14 + 92);
    v33 = *(float *)(v14 + 96);
    v34 = *(float *)(v14 + 100);
    v35 = *(float *)(v14 + 104);
    v36 = v14 + 164;
    v37 = v14 + 16548;
    v38 = v14 + 32932;
    v40 = *(float *)(v14 + 108);
    v39 = *(float *)(v14 + 112);
    v41 = *(float *)(v14 + 116);
    v42 = *(float *)(v14 + 120);
    v43 = *(uint64_t **)(result + 128);
    v44 = *(_QWORD *)(result + 112);
    v45 = *(_QWORD *)(result + 104) * a2 / v7 + *(_QWORD *)(result + 120);
    v46 = *(_QWORD *)(result + 36);
    result = *(unsigned __int8 *)(v14 + 157);
    v47 = *(unsigned __int8 *)(v14 + 156);
    v48 = *(unsigned __int8 *)(v14 + 155);
    v49 = *(unsigned __int8 *)(v14 + 154);
    v50 = v43[2];
    if (v50)
      v51 = (_BYTE *)(v50 + v45 * v20 + v44);
    else
      v51 = 0;
    v53 = *v43;
    v52 = v43[1];
    v54 = v52 + v45 * v19 + v44;
    if (!v52)
      v54 = 0;
    v55 = (_BYTE *)(v53 + v45 * v18 + v44);
    v56 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    v57 = *v16 + v17 * v12 + 16 * v46;
    do
    {
      if (v11)
      {
        v58 = 0;
        v59 = v51;
        v60 = v55;
        v61 = v57;
        do
        {
          v62 = v22;
          v63.i32[0] = *(_DWORD *)(v61 + 4 * v49);
          v63.i32[1] = *(_DWORD *)(v61 + 4 * v48);
          _D3 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v63, v56), 0), v56)));
          v65 = v61 + 16;
          _D3.i16[0] = *(_WORD *)(v36 + 2 * _D3.u32[0]);
          __asm { FCVT            S15, H3 }
          _D3.i16[0] = *(_WORD *)(v36 + 2 * _D3.u32[1]);
          v71.i32[0] = *(_DWORD *)(v61 + 4 * v47);
          v71.i32[1] = *(_DWORD *)(v61 + 16 + 4 * v49);
          __asm { FCVT            S16, H3 }
          v73 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v71, v56), 0), v56)));
          _D3.i16[0] = *(_WORD *)(v36 + 2 * v73.u32[0]);
          __asm { FCVT            S17, H3 }
          v75 = fmaxf(_S15, fmaxf(_S16, _S17));
          v76 = (float)((float)((float)(v39 * _S16) + (float)(v40 * _S15)) + (float)(v41 * _S17)) + (float)(v42 * v75);
          v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            v77 = (float)((float)((float)(v39 * _S16) + (float)(v40 * _S15)) + (float)(v41 * _S17)) + (float)(v42 * v75);
            if (v76 < 0.0)
              v77 = 0.0;
          }
          _H18 = *(_WORD *)(v36 + 2 * v73.u32[1]);
          __asm { FCVT            S19, H18 }
          v80.i32[0] = *(_DWORD *)(v65 + 4 * v48);
          v80.i32[1] = *(_DWORD *)(v65 + 4 * v47);
          _D18 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v80, v56), 0), v56)));
          _D18.i16[0] = *(_WORD *)(v36 + 2 * _D18.u32[0]);
          __asm { FCVT            S20, H18 }
          _D18.i16[0] = *(_WORD *)(v36 + 2 * _D18.u32[1]);
          __asm { FCVT            S22, H18 }
          v84 = (float)((float)((float)(v39 * _S20) + (float)(v40 * _S19)) + (float)(v41 * _S22))
              + (float)(v42 * fmaxf(_S19, fmaxf(_S20, _S22)));
          v85 = 8191.0;
          if (v84 <= 8191.0)
          {
            v85 = v84;
            if (v84 < 0.0)
              v85 = 0.0;
          }
          if (v59)
          {
            v86 = *(float *)(v65 + 4 * result);
            v87 = llroundf(*(float *)(v61 + 4 * result) * 255.0);
            v88 = llroundf(v86 * 255.0);
          }
          else
          {
            v87 = 0;
            v88 = 0;
          }
          v22 = v62;
          _H1 = *(_WORD *)(v37 + 2 * llroundf(v77));
          __asm { FCVT            S1, H1 }
          v91 = _S15 * _S1;
          v92 = _S16 * _S1;
          v93 = _S17 * _S1;
          _H16 = *(_WORD *)(v37 + 2 * llroundf(v85));
          __asm { FCVT            S16, H16 }
          _S17 = _S19 * _S16;
          _S18 = _S20 * _S16;
          v98 = _S22 * _S16;
          v99 = (float)((float)(v28 * v92) + (float)(v91 * v27)) + (float)(v93 * v29);
          v100 = (float)((float)(v31 * v92) + (float)(v91 * v30)) + (float)(v93 * v32);
          _S1 = (float)((float)(v34 * v92) + (float)(v91 * v33)) + (float)(v93 * v35);
          _S3 = (float)((float)(v28 * _S18) + (float)(_S17 * v27)) + (float)(v98 * v29);
          _S5 = (float)((float)(v31 * _S18) + (float)(_S17 * v30)) + (float)(v98 * v32);
          _S16 = (float)((float)(v34 * _S18) + (float)(_S17 * v33)) + (float)(v98 * v35);
          LOWORD(_S17) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v99, 0.0), 8191.0)));
          LOWORD(_S18) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v100, 0.0), 8191.0)));
          __asm
          {
            FCVT            S17, H17
            FCVT            S18, H18
          }
          LOWORD(_S1) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          LOWORD(_S3) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          LOWORD(_S5) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          LOWORD(_S16) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S16, 0.0), 8191.0)));
          __asm { FCVT            S19, H16 }
          v111 = (float)((float)((float)(v129 * _S18) + (float)(v130 * _S17)) + (float)(v26 * _S1)) + v21;
          v112 = (float)((float)((float)(v129 * _S5) + (float)(v130 * _S3)) + (float)(v26 * _S19)) + v21;
          if (v111 < v21)
            v113 = v21;
          else
            v113 = (float)((float)((float)(v129 * _S18) + (float)(v130 * _S17)) + (float)(v26 * _S1)) + v21;
          if (v111 <= v23)
            v114 = v113;
          else
            v114 = v23;
          *v60 = llroundf(v114);
          if (v112 < v21)
            v115 = v21;
          else
            v115 = (float)((float)((float)(v129 * _S5) + (float)(v130 * _S3)) + (float)(v26 * _S19)) + v21;
          if (v112 > v23)
            v115 = v23;
          v60[1] = llroundf(v115);
          v116 = _S17 + _S3;
          v117 = _S18 + _S5;
          v118 = _S1 + _S19;
          v119 = (float)((float)(v62 + (float)(v116 * v128)) + (float)((float)(_S18 + _S5) * v127))
               + (float)((float)(_S1 + _S19) * v126);
          v120 = v25;
          if (v119 <= v25)
          {
            v120 = v119;
            if (v119 < v131)
              v120 = v131;
          }
          v121 = (float)((float)(v62 + (float)(v116 * v125)) + (float)(v117 * v124)) + (float)(v118 * v123);
          *(_BYTE *)(v54 + v58) = llroundf(v120);
          v122 = v25;
          if (v121 <= v25)
          {
            v122 = v121;
            if (v121 < v131)
              v122 = v131;
          }
          *(_BYTE *)(v54 + v58 + 1) = llroundf(v122);
          if (v59)
          {
            *v59 = v87;
            v59[1] = v88;
            v59 += 2;
          }
          v61 += 32;
          v58 += 2;
          v60 += 2;
        }
        while (v11 > v58);
      }
      v57 += v17;
      v55 += v18;
      v54 += v19;
      v51 += v20;
      ++v10;
    }
    while (v10 != v13);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Mat_TRC_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v20 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v18 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Mat_TRC_422vf_GCD);
  return 0;
}

unint64_t vt_Copy_RGfA_TRC_Mat_TRC_422vf_GCD(unint64_t result, uint64_t a2, float a3, float a4, float a5, float a6, float a7)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  float32x2_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  _BYTE *v60;
  _BYTE *v61;
  uint64_t v62;
  char v63;
  char v64;
  float32x2_t v65;
  float32x2_t v73;
  float32x2_t v77;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;

  v7 = *(_QWORD *)(result + 28);
  v8 = *(unsigned __int8 *)result;
  v9 = v7 * a2 / v8;
  v10 = (v7 + v7 * a2) / v8;
  if (v10 != v9)
  {
    v11 = 0;
    v12 = *(_QWORD *)(result + 20);
    v13 = v9 + *(_QWORD *)(result + 44);
    v14 = v10 - v9;
    v15 = *(_QWORD *)(result + 152);
    v16 = *(uint64_t **)(result + 136);
    v17 = *(_QWORD **)(result + 56);
    v18 = **(_QWORD **)(result + 64);
    v19 = *v16;
    v20 = v16[1];
    v21 = v16[2];
    LOWORD(a3) = *(_WORD *)(v15 + 144);
    v22 = (float)LODWORD(a3);
    LOWORD(a4) = *(_WORD *)(v15 + 146);
    v23 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v15 + 148);
    v24 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v15 + 150);
    v25 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v15 + 152);
    v26 = (float)LODWORD(a7);
    v27 = *(float *)(v15 + 36);
    v28 = *(float *)(v15 + 40);
    v29 = *(float *)(v15 + 44);
    v104 = *(float *)(v15 + 52) * 0.5;
    v105 = *(float *)(v15 + 48) * 0.5;
    v102 = *(float *)(v15 + 60) * 0.5;
    v103 = *(float *)(v15 + 56) * 0.5;
    v30 = *(float *)(v15 + 64) * 0.5;
    v31 = *(float *)(v15 + 72);
    v32 = *(float *)(v15 + 68) * 0.5;
    v33 = *(float *)(v15 + 76);
    v34 = *(float *)(v15 + 80);
    v35 = *(float *)(v15 + 84);
    v36 = *(float *)(v15 + 88);
    v37 = *(float *)(v15 + 92);
    v38 = *(float *)(v15 + 96);
    v39 = *(float *)(v15 + 100);
    v40 = *(float *)(v15 + 104);
    v41 = v15 + 164;
    v42 = v15 + 16548;
    v43 = *(uint64_t **)(result + 128);
    v44 = *(_QWORD *)(result + 112);
    v45 = *(_QWORD *)(result + 104) * a2 / v8 + *(_QWORD *)(result + 120);
    v46 = *(_QWORD *)(result + 36);
    v47 = *(unsigned __int8 *)(v15 + 157);
    result = *(unsigned __int8 *)(v15 + 156);
    v48 = *(unsigned __int8 *)(v15 + 155);
    v49 = *(unsigned __int8 *)(v15 + 154);
    v50 = v43[2];
    if (v50)
      v51 = (_BYTE *)(v50 + v45 * v21 + v44);
    else
      v51 = 0;
    v53 = *v43;
    v52 = v43[1];
    v54 = v52 + v45 * v20 + v44;
    if (!v52)
      v54 = 0;
    v55 = (_BYTE *)(v53 + v45 * v19 + v44);
    v56 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    v57 = *v17 + v18 * v13 + 16 * v46;
    do
    {
      if (v12)
      {
        v58 = 0;
        v59 = v57;
        v60 = v51;
        v61 = v55;
        do
        {
          v62 = v59 + 16;
          if (v60)
          {
            v63 = llroundf(*(float *)(v59 + 4 * v47) * 255.0);
            v64 = llroundf(*(float *)(v62 + 4 * v47) * 255.0);
          }
          else
          {
            v63 = 0;
            v64 = 0;
          }
          v65.i32[0] = *(_DWORD *)(v59 + 4 * v49);
          v65.i32[1] = *(_DWORD *)(v59 + 4 * v48);
          _D11 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v65, v56), 0), v56)));
          _D11.i16[0] = *(_WORD *)(v41 + 2 * _D11.u32[0]);
          __asm { FCVT            S11, H11 }
          _H12 = *(_WORD *)(v41 + 2 * _D11.u32[1]);
          __asm { FCVT            S12, H12 }
          v73.i32[0] = *(_DWORD *)(v59 + 4 * result);
          v73.i32[1] = *(_DWORD *)(v62 + 4 * v49);
          _D13 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v73, v56), 0), v56)));
          _D13.i16[0] = *(_WORD *)(v41 + 2 * _D13.u32[0]);
          __asm { FCVT            S13, H13 }
          _H14 = *(_WORD *)(v41 + 2 * _D13.u32[1]);
          __asm { FCVT            S14, H14 }
          v77.i32[0] = *(_DWORD *)(v62 + 4 * v48);
          v77.i32[1] = *(_DWORD *)(v62 + 4 * result);
          _D15 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v77, v56), 0), v56)));
          _D15.i16[0] = *(_WORD *)(v41 + 2 * _D15.u32[0]);
          __asm { FCVT            S15, H15 }
          _H16 = *(_WORD *)(v41 + 2 * _D15.u32[1]);
          __asm { FCVT            S16, H16 }
          _S17 = (float)((float)(v33 * _S12) + (float)(*(float *)_D11.i32 * v31)) + (float)(*(float *)_D13.i32 * v34);
          _S18 = (float)((float)(v36 * _S12) + (float)(*(float *)_D11.i32 * v35)) + (float)(*(float *)_D13.i32 * v37);
          *(float *)_D11.i32 = (float)((float)(v39 * _S12) + (float)(*(float *)_D11.i32 * v38))
                             + (float)(*(float *)_D13.i32 * v40);
          _S12 = (float)((float)(v33 * *(float *)_D15.i32) + (float)(_S14 * v31)) + (float)(_S16 * v34);
          *(float *)_D13.i32 = (float)((float)(v36 * *(float *)_D15.i32) + (float)(_S14 * v35)) + (float)(_S16 * v37);
          _S16 = (float)((float)(v39 * *(float *)_D15.i32) + (float)(_S14 * v38)) + (float)(_S16 * v40);
          LOWORD(_S17) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(_S17, 0.0), 8191.0)));
          LOWORD(_S18) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(_S18, 0.0), 8191.0)));
          __asm
          {
            FCVT            S17, H17
            FCVT            S18, H18
          }
          _D11.i16[0] = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(*(float *)_D11.i32, 0.0), 8191.0)));
          __asm { FCVT            S14, H11 }
          _D11.i16[0] = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(_S12, 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          LOWORD(_S12) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(*(float *)_D13.i32, 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          LOWORD(_S16) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(_S16, 0.0), 8191.0)));
          __asm { FCVT            S16, H16 }
          v91 = (float)((float)((float)(v28 * _S18) + (float)(v27 * _S17)) + (float)(v29 * _S14)) + v22;
          v92 = (float)((float)((float)(v28 * _S12) + (float)(v27 * _S11)) + (float)(v29 * _S16)) + v22;
          if (v91 < v22)
            v93 = v22;
          else
            v93 = (float)((float)((float)(v28 * _S18) + (float)(v27 * _S17)) + (float)(v29 * _S14)) + v22;
          if (v91 > v24)
            v93 = v24;
          *v61 = llroundf(v93);
          if (v92 < v22)
            v94 = v22;
          else
            v94 = (float)((float)((float)(v28 * _S12) + (float)(v27 * _S11)) + (float)(v29 * _S16)) + v22;
          if (v92 > v24)
            v94 = v24;
          v61[1] = llroundf(v94);
          v95 = _S17 + _S11;
          v96 = _S18 + _S12;
          v97 = _S14 + _S16;
          v98 = (float)((float)(v23 + (float)(v95 * v105)) + (float)(v96 * v104)) + (float)((float)(_S14 + _S16) * v103);
          v99 = v26;
          if (v98 <= v26)
          {
            v99 = (float)((float)(v23 + (float)(v95 * v105)) + (float)(v96 * v104)) + (float)(v97 * v103);
            if (v98 < v25)
              v99 = v25;
          }
          v100 = (float)((float)(v23 + (float)(v95 * v102)) + (float)(v96 * v30)) + (float)(v97 * v32);
          *(_BYTE *)(v54 + v58) = llroundf(v99);
          v101 = v26;
          if (v100 <= v26)
          {
            v101 = v100;
            if (v100 < v25)
              v101 = v25;
          }
          *(_BYTE *)(v54 + v58 + 1) = llroundf(v101);
          if (v60)
          {
            *v60 = v63;
            v60[1] = v64;
            v60 += 2;
          }
          v59 += 32;
          v58 += 2;
          v61 += 2;
        }
        while (v12 > v58);
      }
      v57 += v18;
      v55 += v19;
      v54 += v20;
      v51 += v21;
      ++v11;
    }
    while (v11 != v14);
  }
  return result;
}

uint64_t vt_Copy_RGfA_rgb_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v20 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v18 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_rgb_422vf_GCD);
  return 0;
}

unint64_t vt_Copy_RGfA_rgb_422vf_GCD(unint64_t result, uint64_t a2, double a3, float a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  BOOL v50;
  uint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  _BYTE *v57;
  uint64_t v58;
  char v59;
  char v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;

  v8 = *(_QWORD *)(result + 28);
  v9 = *(unsigned __int8 *)result;
  v10 = v8 * a2 / v9;
  v11 = (v8 + v8 * a2) / v9;
  if (v11 != v10)
  {
    v12 = 0;
    v13 = *(_QWORD *)(result + 20);
    v14 = v10 + *(_QWORD *)(result + 44);
    v15 = v11 - v10;
    v16 = *(_QWORD *)(result + 152);
    v17 = *(uint64_t **)(result + 136);
    v18 = *(_QWORD **)(result + 56);
    v19 = **(_QWORD **)(result + 64);
    v20 = *v17;
    v21 = v17[1];
    v22 = v17[2];
    v23 = (float)*(unsigned int *)(v16 + 136);
    LOWORD(a4) = *(_WORD *)(v16 + 144);
    v24 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v16 + 146);
    v25 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v16 + 148);
    v26 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v16 + 150);
    v27 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v16 + 152);
    v28 = (float)LODWORD(a8);
    v29 = *(float *)(v16 + 36);
    v30 = *(float *)(v16 + 40);
    v31 = *(float *)(v16 + 44);
    v32 = *(float *)(v16 + 48) * 0.5;
    v33 = *(float *)(v16 + 52) * 0.5;
    v34 = *(float *)(v16 + 56) * 0.5;
    v35 = *(float *)(v16 + 60) * 0.5;
    v36 = *(float *)(v16 + 64) * 0.5;
    v37 = *(float *)(v16 + 68) * 0.5;
    v38 = *(_QWORD **)(result + 128);
    v39 = *(_QWORD *)(result + 112);
    v40 = *(_QWORD *)(result + 104) * a2 / v9 + *(_QWORD *)(result + 120);
    v41 = *(_QWORD *)(result + 36);
    v42 = *(unsigned __int8 *)(v16 + 157);
    v43 = *(unsigned __int8 *)(v16 + 156);
    v44 = *(unsigned __int8 *)(v16 + 155);
    result = *(unsigned __int8 *)(v16 + 154);
    v45 = v38[2];
    if (v45)
      v46 = (_BYTE *)(v45 + v40 * v22 + v39);
    else
      v46 = 0;
    v49 = v38;
    v48 = *v38;
    v47 = v49[1];
    v50 = v47 == 0;
    v51 = v47 + v40 * v21 + v39;
    if (v50)
      v51 = 0;
    v52 = (_BYTE *)(v48 + v40 * v20 + v39);
    v53 = *v18 + v19 * v14 + 16 * v41;
    do
    {
      if (v13)
      {
        v54 = 0;
        v55 = v53;
        v56 = v46;
        v57 = v52;
        do
        {
          v58 = v55 + 16;
          if (v56)
          {
            v59 = llroundf(*(float *)(v55 + 4 * v42) * 255.0);
            v60 = llroundf(*(float *)(v58 + 4 * v42) * 255.0);
          }
          else
          {
            v59 = 0;
            v60 = 0;
          }
          v61 = *(float *)(v55 + 4 * result) * v23;
          v62 = *(float *)(v55 + 4 * v44) * v23;
          v63 = *(float *)(v55 + 4 * v43) * v23;
          v64 = *(float *)(v58 + 4 * result) * v23;
          v65 = *(float *)(v58 + 4 * v44) * v23;
          v66 = *(float *)(v58 + 4 * v43) * v23;
          v67 = (float)((float)((float)(v30 * v62) + (float)(v29 * v61)) + (float)(v31 * v63)) + v24;
          v68 = (float)((float)((float)(v30 * v65) + (float)(v29 * v64)) + (float)(v31 * v66)) + v24;
          if (v67 < v24)
            v69 = v24;
          else
            v69 = (float)((float)((float)(v30 * v62) + (float)(v29 * v61)) + (float)(v31 * v63)) + v24;
          if (v67 <= v26)
            v70 = v69;
          else
            v70 = v26;
          *v57 = llroundf(v70);
          if (v68 < v24)
            v71 = v24;
          else
            v71 = (float)((float)((float)(v30 * v65) + (float)(v29 * v64)) + (float)(v31 * v66)) + v24;
          if (v68 > v26)
            v71 = v26;
          v57[1] = llroundf(v71);
          v72 = v61 + v64;
          v73 = v62 + v65;
          v74 = v63 + v66;
          v75 = (float)((float)(v25 + (float)(v72 * v32)) + (float)(v73 * v33)) + (float)(v74 * v34);
          v76 = v28;
          if (v75 <= v28)
          {
            v76 = (float)((float)(v25 + (float)(v72 * v32)) + (float)(v73 * v33)) + (float)(v74 * v34);
            if (v75 < v27)
              v76 = v27;
          }
          v77 = (float)((float)(v25 + (float)(v72 * v35)) + (float)(v73 * v36)) + (float)(v74 * v37);
          *(_BYTE *)(v51 + v54) = llroundf(v76);
          v78 = v28;
          if (v77 <= v28)
          {
            v78 = v77;
            if (v77 < v27)
              v78 = v27;
          }
          *(_BYTE *)(v51 + v54 + 1) = llroundf(v78);
          if (v56)
          {
            *v56 = v59;
            v56[1] = v60;
            v56 += 2;
          }
          v55 += 32;
          v54 += 2;
          v57 += 2;
        }
        while (v13 > v54);
      }
      v53 += v19;
      v52 += v20;
      v51 += v21;
      v46 += v22;
      ++v12;
    }
    while (v12 != v15);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Tone_Mat_TRC_2vuyf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Tone_Mat_TRC_2vuyf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_RGfA_TRC_Tone_Mat_TRC_2vuyf_GCD(unsigned __int8 *result, uint64_t a2, float a3, float a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  float v42;
  float v43;
  float v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  float32x2_t v49;
  uint64_t v50;
  unint64_t v51;
  _BYTE *v52;
  _BYTE *v53;
  uint64_t v54;
  float v55;
  float v56;
  float v57;
  float32x2_t v58;
  uint64_t v60;
  float32x2_t v66;
  int32x2_t v68;
  float v70;
  float v71;
  float v72;
  float32x2_t v75;
  float v79;
  float v80;
  float v81;
  char v82;
  char v83;
  float v86;
  float v87;
  float v88;
  float v91;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v101;
  float v102;
  unsigned int v104;
  float v109;
  float v111;
  float v112;
  float v113;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  char v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;

  v4 = *(_QWORD *)(result + 28);
  v5 = *result;
  v6 = v4 * a2 / v5;
  v7 = *((_QWORD *)result + 14);
  v8 = (_QWORD *)*((_QWORD *)result + 16);
  v9 = *((_QWORD *)result + 13) * a2 / v5 + *((_QWORD *)result + 15);
  v10 = (uint64_t *)*((_QWORD *)result + 17);
  v11 = (v4 + v4 * a2) / v5;
  v12 = (_BYTE *)v8[1];
  if (v12)
    v12 += v10[1] * v9 + v7;
  if (v11 != v6)
  {
    v13 = 0;
    v14 = *(_QWORD *)(result + 44);
    v15 = v6 + v14;
    v16 = **((_QWORD **)result + 8);
    v17 = *v10;
    v18 = *((_QWORD *)result + 19);
    v19 = *v8 + v17 * v9;
    v20 = *(_QWORD *)(result + 20);
    v21 = v11 + v14;
    v22 = **((_QWORD **)result + 7) + v16 * v15 + 16 * *(_QWORD *)(result + 36);
    v23 = (_BYTE *)(v19 + v7);
    v24 = v21 - v15;
    LOWORD(a3) = *(_WORD *)(v18 + 144);
    v25 = (float)LODWORD(a3);
    LOWORD(a4) = *(_WORD *)(v18 + 146);
    v26 = (float)LODWORD(a4);
    LOWORD(a4) = *(_WORD *)(v18 + 148);
    v27 = (float)LODWORD(a4);
    LOWORD(a4) = *(_WORD *)(v18 + 150);
    v28 = (float)LODWORD(a4);
    LOWORD(a4) = *(_WORD *)(v18 + 152);
    v29 = (float)LODWORD(a4);
    v31 = *(float *)(v18 + 36);
    v30 = *(float *)(v18 + 40);
    v32 = *(float *)(v18 + 44);
    v132 = *(float *)(v18 + 48) * 0.5;
    v133 = v26;
    v130 = *(float *)(v18 + 56) * 0.5;
    v131 = *(float *)(v18 + 52) * 0.5;
    v128 = *(float *)(v18 + 64) * 0.5;
    v129 = *(float *)(v18 + 60) * 0.5;
    v126 = *(float *)(v18 + 68) * 0.5;
    v127 = *(float *)(v18 + 72);
    v33 = *(float *)(v18 + 80);
    v125 = *(float *)(v18 + 76);
    v34 = *(float *)(v18 + 84);
    v35 = *(float *)(v18 + 88);
    v36 = *(float *)(v18 + 92);
    v37 = *(float *)(v18 + 96);
    v38 = *(float *)(v18 + 100);
    v39 = *(float *)(v18 + 104);
    v40 = v18 + 164;
    v41 = v18 + 16548;
    result = (unsigned __int8 *)(v18 + 32932);
    v43 = *(float *)(v18 + 108);
    v42 = *(float *)(v18 + 112);
    v44 = *(float *)(v18 + 116);
    v45 = *(float *)(v18 + 120);
    v46 = *(unsigned __int8 *)(v18 + 157);
    v47 = *(unsigned __int8 *)(v18 + 156);
    v48 = *(unsigned __int8 *)(v18 + 155);
    v49 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    v50 = *(unsigned __int8 *)(v18 + 154);
    do
    {
      if (v20)
      {
        v51 = 0;
        v52 = v12;
        v53 = v23;
        v54 = v22;
        do
        {
          v55 = v32;
          v56 = v30;
          v57 = v31;
          v58.i32[0] = *(_DWORD *)(v54 + 4 * v50);
          v58.i32[1] = *(_DWORD *)(v54 + 4 * v48);
          _D1 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v58, v49), 0), v49)));
          v60 = v54 + 16;
          _D1.i16[0] = *(_WORD *)(v40 + 2 * _D1.u32[0]);
          __asm { FCVT            S15, H1 }
          _D1.i16[0] = *(_WORD *)(v40 + 2 * _D1.u32[1]);
          v66.i32[0] = *(_DWORD *)(v54 + 4 * v47);
          v66.i32[1] = *(_DWORD *)(v54 + 16 + 4 * v50);
          __asm { FCVT            S16, H1 }
          v68 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v66, v49), 0), v49)));
          _D1.i16[0] = *(_WORD *)(v40 + 2 * v68.u32[0]);
          __asm { FCVT            S17, H1 }
          v70 = fmaxf(_S15, fmaxf(_S16, _S17));
          v71 = (float)((float)((float)(v42 * _S16) + (float)(v43 * _S15)) + (float)(v44 * _S17)) + (float)(v45 * v70);
          v72 = 8191.0;
          if (v71 <= 8191.0)
          {
            v72 = (float)((float)((float)(v42 * _S16) + (float)(v43 * _S15)) + (float)(v44 * _S17)) + (float)(v45 * v70);
            if (v71 < 0.0)
              v72 = 0.0;
          }
          _H18 = *(_WORD *)(v40 + 2 * v68.u32[1]);
          __asm { FCVT            S19, H18 }
          v75.i32[0] = *(_DWORD *)(v60 + 4 * v48);
          v75.i32[1] = *(_DWORD *)(v60 + 4 * v47);
          _D18 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v75, v49), 0), v49)));
          _D18.i16[0] = *(_WORD *)(v40 + 2 * _D18.u32[0]);
          __asm { FCVT            S20, H18 }
          _D18.i16[0] = *(_WORD *)(v40 + 2 * _D18.u32[1]);
          __asm { FCVT            S22, H18 }
          v79 = (float)((float)((float)(v42 * _S20) + (float)(v43 * _S19)) + (float)(v44 * _S22))
              + (float)(v45 * fmaxf(_S19, fmaxf(_S20, _S22)));
          v80 = 8191.0;
          if (v79 <= 8191.0)
          {
            v80 = v79;
            if (v79 < 0.0)
              v80 = 0.0;
          }
          if (v52)
          {
            v81 = *(float *)(v60 + 4 * v46);
            v82 = llroundf(*(float *)(v54 + 4 * v46) * 255.0);
            v83 = llroundf(v81 * 255.0);
          }
          else
          {
            v82 = 0;
            v83 = 0;
          }
          v31 = v57;
          v30 = v56;
          v32 = v55;
          _H1 = *(_WORD *)(v41 + 2 * llroundf(v72));
          __asm { FCVT            S1, H1 }
          v86 = _S15 * _S1;
          v87 = _S16 * _S1;
          v88 = _S17 * _S1;
          _H16 = *(_WORD *)(v41 + 2 * llroundf(v80));
          __asm { FCVT            S16, H16 }
          v91 = _S19 * _S16;
          _S18 = _S20 * _S16;
          _S16 = _S22 * _S16;
          v94 = (float)((float)(v125 * v87) + (float)(v86 * v127)) + (float)(v88 * v33);
          v95 = (float)((float)(v35 * v87) + (float)(v86 * v34)) + (float)(v88 * v36);
          v96 = (float)((float)(v38 * v87) + (float)(v86 * v37)) + (float)(v88 * v39);
          v97 = (float)(v125 * _S18) + (float)(v91 * v127);
          v98 = (float)(v35 * _S18) + (float)(v91 * v34);
          v99 = (float)(v38 * _S18) + (float)(v91 * v37);
          _S5 = v97 + (float)(_S16 * v33);
          v101 = v98 + (float)(_S16 * v36);
          LOWORD(_S18) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0))];
          v102 = v99 + (float)(_S16 * v39);
          __asm { FCVT            S18, H18 }
          LOWORD(_S16) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v95, 0.0), 8191.0))];
          v104 = llroundf(fminf(fmaxf(v96, 0.0), 8191.0));
          __asm { FCVT            S1, H16 }
          LOWORD(_S16) = *(_WORD *)&result[2 * v104];
          __asm { FCVT            S20, H16 }
          LOWORD(_S5) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0))];
          __asm { FCVT            S16, H5 }
          LOWORD(_S5) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v101, 0.0), 8191.0))];
          __asm { FCVT            S17, H5 }
          v109 = (float)(v30 * _S1) + (float)(v31 * _S18);
          _S6 = _S18 + _S16;
          v111 = _S1 + _S17;
          v112 = (float)(v133 + (float)((float)(_S18 + _S16) * v132)) + (float)(v111 * v131);
          v113 = (float)(v133 + (float)(_S6 * v129)) + (float)(v111 * v128);
          LOWORD(_S6) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v102, 0.0), 8191.0))];
          __asm { FCVT            S19, H6 }
          v115 = v109 + (float)(v55 * _S20);
          v116 = v112 + (float)((float)(_S20 + _S19) * v130);
          v117 = v113 + (float)((float)(_S20 + _S19) * v126);
          if (v116 < v28)
            v118 = v28;
          else
            v118 = v116;
          v119 = v115 + v25;
          if (v116 > v29)
            v118 = v29;
          v120 = llroundf(v118);
          if (v119 < v25)
            v121 = v25;
          else
            v121 = v119;
          *v53 = v120;
          if (v119 > v27)
            v121 = v27;
          v53[1] = llroundf(v121);
          v122 = v29;
          if (v117 <= v29)
          {
            v122 = v117;
            if (v117 < v28)
              v122 = v28;
          }
          v123 = (float)((float)((float)(v30 * _S17) + (float)(v31 * _S16)) + (float)(v55 * _S19)) + v25;
          v53[2] = llroundf(v122);
          v124 = v27;
          if (v123 <= v27)
          {
            v124 = v123;
            if (v123 < v25)
              v124 = v25;
          }
          v53[3] = llroundf(v124);
          if (v52)
          {
            *v52 = v82;
            v52[1] = v83;
            v52 += 2;
          }
          v54 += 32;
          v51 += 2;
          v53 += 4;
        }
        while (v20 > v51);
      }
      v22 += v16;
      v23 += v17;
      ++v13;
    }
    while (v13 != v24);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Mat_TRC_2vuyf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Mat_TRC_2vuyf_GCD);
  return 0;
}

unint64_t vt_Copy_RGfA_TRC_Mat_TRC_2vuyf_GCD(unint64_t result, uint64_t a2, float a3, float a4, float a5, float a6, float a7)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  float32x2_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  _BYTE *v57;
  uint64_t v58;
  char v59;
  char v60;
  float32x2_t v61;
  float32x2_t v69;
  float32x2_t v73;
  float v77;
  float v78;
  float v80;
  unsigned int v85;
  float v86;
  float v87;
  float v89;
  float v90;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  char v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;

  v7 = *(_QWORD *)(result + 28);
  v8 = *(unsigned __int8 *)result;
  v9 = v7 * a2 / v8;
  v10 = *(_QWORD *)(result + 112);
  v11 = *(_QWORD **)(result + 128);
  v12 = *(_QWORD *)(result + 104) * a2 / v8 + *(_QWORD *)(result + 120);
  v13 = *(uint64_t **)(result + 136);
  v14 = (v7 + v7 * a2) / v8;
  v15 = (_BYTE *)v11[1];
  if (v15)
    v15 += v13[1] * v12 + v10;
  if (v14 != v9)
  {
    v16 = 0;
    v17 = *(_QWORD *)(result + 44);
    v18 = v9 + v17;
    v19 = **(_QWORD **)(result + 64);
    v20 = *v13;
    v21 = *(_QWORD *)(result + 152);
    v22 = *v11 + v20 * v12;
    v23 = *(_QWORD *)(result + 20);
    v24 = v14 + v17;
    v25 = **(_QWORD **)(result + 56) + v19 * v18 + 16 * *(_QWORD *)(result + 36);
    v26 = (_BYTE *)(v22 + v10);
    v27 = v24 - v18;
    LOWORD(a3) = *(_WORD *)(v21 + 144);
    v28 = (float)LODWORD(a3);
    LOWORD(a4) = *(_WORD *)(v21 + 146);
    v29 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v21 + 148);
    v30 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v21 + 150);
    v31 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v21 + 152);
    v32 = (float)LODWORD(a7);
    v33 = *(float *)(v21 + 36);
    v34 = *(float *)(v21 + 40);
    v35 = *(float *)(v21 + 44);
    v103 = *(float *)(v21 + 52) * 0.5;
    v104 = *(float *)(v21 + 48) * 0.5;
    v102 = *(float *)(v21 + 56) * 0.5;
    v36 = *(float *)(v21 + 60) * 0.5;
    v37 = *(float *)(v21 + 64) * 0.5;
    v38 = *(float *)(v21 + 72);
    v39 = *(float *)(v21 + 68) * 0.5;
    v40 = *(float *)(v21 + 76);
    v41 = *(float *)(v21 + 80);
    v42 = *(float *)(v21 + 84);
    v43 = *(float *)(v21 + 88);
    v44 = *(float *)(v21 + 92);
    v45 = *(float *)(v21 + 96);
    v46 = *(float *)(v21 + 100);
    v47 = *(float *)(v21 + 104);
    v48 = v21 + 164;
    v49 = v21 + 16548;
    result = *(unsigned __int8 *)(v21 + 157);
    v50 = *(unsigned __int8 *)(v21 + 156);
    v51 = *(unsigned __int8 *)(v21 + 155);
    v52 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    v53 = *(unsigned __int8 *)(v21 + 154);
    do
    {
      if (v23)
      {
        v54 = 0;
        v55 = v25;
        v56 = v15;
        v57 = v26;
        do
        {
          v58 = v55 + 16;
          if (v56)
          {
            v59 = llroundf(*(float *)(v55 + 4 * result) * 255.0);
            v60 = llroundf(*(float *)(v58 + 4 * result) * 255.0);
          }
          else
          {
            v59 = 0;
            v60 = 0;
          }
          v61.i32[0] = *(_DWORD *)(v55 + 4 * v53);
          v61.i32[1] = *(_DWORD *)(v55 + 4 * v51);
          _D11 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v61, v52), 0), v52)));
          _D11.i16[0] = *(_WORD *)(v48 + 2 * _D11.u32[0]);
          __asm { FCVT            S11, H11 }
          _H12 = *(_WORD *)(v48 + 2 * _D11.u32[1]);
          __asm { FCVT            S12, H12 }
          v69.i32[0] = *(_DWORD *)(v55 + 4 * v50);
          v69.i32[1] = *(_DWORD *)(v58 + 4 * v53);
          _D13 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v69, v52), 0), v52)));
          _D13.i16[0] = *(_WORD *)(v48 + 2 * _D13.u32[0]);
          __asm { FCVT            S13, H13 }
          _H14 = *(_WORD *)(v48 + 2 * _D13.u32[1]);
          __asm { FCVT            S14, H14 }
          v73.i32[0] = *(_DWORD *)(v58 + 4 * v51);
          v73.i32[1] = *(_DWORD *)(v58 + 4 * v50);
          _D15 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v73, v52), 0), v52)));
          _D15.i16[0] = *(_WORD *)(v48 + 2 * _D15.u32[0]);
          __asm { FCVT            S15, H15 }
          _S16 = (float)((float)(v40 * _S12) + (float)(*(float *)_D11.i32 * v38)) + (float)(*(float *)_D13.i32 * v41);
          _S17 = (float)((float)(v43 * _S12) + (float)(*(float *)_D11.i32 * v42)) + (float)(*(float *)_D13.i32 * v44);
          *(float *)_D11.i32 = (float)((float)(v46 * _S12) + (float)(*(float *)_D11.i32 * v45))
                             + (float)(*(float *)_D13.i32 * v47);
          v77 = (float)(v40 * *(float *)_D15.i32) + (float)(_S14 * v38);
          *(float *)_D13.i32 = (float)(v43 * *(float *)_D15.i32) + (float)(_S14 * v42);
          v78 = (float)(v46 * *(float *)_D15.i32) + (float)(_S14 * v45);
          _D15.i16[0] = *(_WORD *)(v48 + 2 * _D15.u32[1]);
          __asm { FCVT            S15, H15 }
          _S12 = v77 + (float)(*(float *)_D15.i32 * v41);
          *(float *)_D13.i32 = *(float *)_D13.i32 + (float)(*(float *)_D15.i32 * v44);
          LOWORD(_S16) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(_S16, 0.0), 8191.0)));
          v80 = v78 + (float)(*(float *)_D15.i32 * v47);
          __asm { FCVT            S16, H16 }
          LOWORD(_S17) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(_S17, 0.0), 8191.0)));
          __asm { FCVT            S17, H17 }
          _D11.i16[0] = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(*(float *)_D11.i32, 0.0), 8191.0)));
          __asm { FCVT            S15, H11 }
          _D11.i16[0] = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(_S12, 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          LOWORD(_S12) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(*(float *)_D13.i32, 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          v85 = llroundf(fminf(fmaxf(v80, 0.0), 8191.0));
          v86 = (float)(v34 * _S17) + (float)(v33 * _S16);
          v87 = _S16 + _S11;
          _S17 = _S17 + _S12;
          v89 = (float)(v29 + (float)(v87 * v104)) + (float)(_S17 * v103);
          v90 = (float)(v29 + (float)(v87 * v36)) + (float)(_S17 * v37);
          LOWORD(_S17) = *(_WORD *)(v49 + 2 * v85);
          __asm { FCVT            S13, H17 }
          v92 = v86 + (float)(v35 * *(float *)_D15.i32);
          v93 = v89 + (float)((float)(*(float *)_D15.i32 + _S13) * v102);
          v94 = v90 + (float)((float)(*(float *)_D15.i32 + _S13) * v39);
          if (v93 < v31)
            v95 = v31;
          else
            v95 = v93;
          v96 = v92 + v28;
          if (v93 > v32)
            v95 = v32;
          v97 = llroundf(v95);
          if (v96 < v28)
            v98 = v28;
          else
            v98 = v96;
          *v57 = v97;
          if (v96 > v30)
            v98 = v30;
          v57[1] = llroundf(v98);
          v99 = v32;
          if (v94 <= v32)
          {
            v99 = v94;
            if (v94 < v31)
              v99 = v31;
          }
          v100 = (float)((float)((float)(v34 * _S12) + (float)(v33 * _S11)) + (float)(v35 * _S13)) + v28;
          v57[2] = llroundf(v99);
          v101 = v30;
          if (v100 <= v30)
          {
            v101 = v100;
            if (v100 < v28)
              v101 = v28;
          }
          v57[3] = llroundf(v101);
          if (v56)
          {
            *v56 = v59;
            v56[1] = v60;
            v56 += 2;
          }
          v55 += 32;
          v54 += 2;
          v57 += 4;
        }
        while (v23 > v54);
      }
      v25 += v19;
      v26 += v20;
      ++v16;
    }
    while (v16 != v27);
  }
  return result;
}

uint64_t vt_Copy_RGfA_rgb_2vuyf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_rgb_2vuyf_GCD);
  return 0;
}

unint64_t vt_Copy_RGfA_rgb_2vuyf_GCD(unint64_t result, uint64_t a2, double a3, float a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  _BYTE *v50;
  uint64_t v51;
  char v52;
  char v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;

  v8 = *(_QWORD *)(result + 28);
  v9 = *(unsigned __int8 *)result;
  v10 = v8 * a2 / v9;
  v11 = *(_QWORD *)(result + 112);
  v12 = *(_QWORD **)(result + 128);
  v13 = *(_QWORD *)(result + 104) * a2 / v9 + *(_QWORD *)(result + 120);
  v14 = *(uint64_t **)(result + 136);
  v15 = (v8 + v8 * a2) / v9;
  v16 = (_BYTE *)v12[1];
  if (v16)
    v16 += v14[1] * v13 + v11;
  if (v15 != v10)
  {
    v17 = 0;
    v18 = *(_QWORD *)(result + 44);
    v19 = v10 + v18;
    v20 = **(_QWORD **)(result + 64);
    v21 = *v14;
    v22 = *v12 + v21 * v13;
    v23 = *(_QWORD *)(result + 152);
    v24 = *(_QWORD *)(result + 20);
    v25 = v15 + v18;
    v26 = **(_QWORD **)(result + 56) + v20 * v19 + 16 * *(_QWORD *)(result + 36);
    v27 = (_BYTE *)(v22 + v11);
    v28 = v25 - v19;
    v29 = (float)*(unsigned int *)(v23 + 136);
    LOWORD(a4) = *(_WORD *)(v23 + 144);
    v30 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v23 + 146);
    v31 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v23 + 148);
    v32 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v23 + 150);
    v33 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v23 + 152);
    v34 = (float)LODWORD(a8);
    v35 = *(float *)(v23 + 36);
    v36 = *(float *)(v23 + 40);
    v37 = *(float *)(v23 + 44);
    v38 = *(float *)(v23 + 48) * 0.5;
    v39 = *(float *)(v23 + 52) * 0.5;
    v40 = *(float *)(v23 + 56) * 0.5;
    v41 = *(float *)(v23 + 60) * 0.5;
    v42 = *(float *)(v23 + 64) * 0.5;
    v43 = *(float *)(v23 + 68) * 0.5;
    v44 = *(unsigned __int8 *)(v23 + 157);
    v45 = *(unsigned __int8 *)(v23 + 156);
    result = *(unsigned __int8 *)(v23 + 155);
    v46 = *(unsigned __int8 *)(v23 + 154);
    do
    {
      if (v24)
      {
        v47 = 0;
        v48 = v26;
        v49 = v16;
        v50 = v27;
        do
        {
          v51 = v48 + 16;
          if (v49)
          {
            v52 = llroundf(*(float *)(v48 + 4 * v44) * 255.0);
            v53 = llroundf(*(float *)(v51 + 4 * v44) * 255.0);
          }
          else
          {
            v52 = 0;
            v53 = 0;
          }
          v54 = *(float *)(v48 + 4 * v46) * v29;
          v55 = *(float *)(v48 + 4 * result) * v29;
          v56 = *(float *)(v48 + 4 * v45) * v29;
          v57 = *(float *)(v51 + 4 * v46) * v29;
          v58 = *(float *)(v51 + 4 * result) * v29;
          v59 = *(float *)(v51 + 4 * v45) * v29;
          v60 = (float)((float)((float)(v36 * v55) + (float)(v35 * v54)) + (float)(v37 * v56)) + v30;
          v61 = v54 + v57;
          v62 = v55 + v58;
          v63 = v56 + v59;
          v64 = (float)((float)(v31 + (float)(v61 * v38)) + (float)(v62 * v39)) + (float)(v63 * v40);
          v65 = (float)((float)(v31 + (float)(v61 * v41)) + (float)(v62 * v42)) + (float)(v63 * v43);
          if (v64 < v33)
            v66 = v33;
          else
            v66 = v64;
          if (v64 > v34)
            v66 = v34;
          *v50 = llroundf(v66);
          if (v60 < v30)
            v67 = v30;
          else
            v67 = v60;
          if (v60 > v32)
            v67 = v32;
          v50[1] = llroundf(v67);
          v68 = v34;
          if (v65 <= v34)
          {
            v68 = v65;
            if (v65 < v33)
              v68 = v33;
          }
          v69 = (float)((float)((float)(v36 * v58) + (float)(v35 * v57)) + (float)(v37 * v59)) + v30;
          v50[2] = llroundf(v68);
          v70 = v32;
          if (v69 <= v32)
          {
            v70 = v69;
            if (v69 < v30)
              v70 = v30;
          }
          v50[3] = llroundf(v70);
          if (v49)
          {
            *v49 = v52;
            v49[1] = v53;
            v49 += 2;
          }
          v48 += 32;
          v47 += 2;
          v50 += 4;
        }
        while (v24 > v47);
      }
      v26 += v20;
      v27 += v21;
      ++v17;
    }
    while (v17 != v28);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Tone_Mat_TRC_yuvsf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Tone_Mat_TRC_yuvsf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_RGfA_TRC_Tone_Mat_TRC_yuvsf_GCD(unsigned __int8 *result, uint64_t a2, float a3, float a4, float a5, float a6)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  float v43;
  float v44;
  float v45;
  float v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  float32x2_t v50;
  uint64_t v51;
  unint64_t v52;
  _BYTE *v53;
  _BYTE *v54;
  uint64_t v55;
  float32x2_t v56;
  uint64_t v58;
  float32x2_t v64;
  int32x2_t v66;
  float v68;
  float v69;
  float v70;
  float32x2_t v73;
  float v77;
  float v78;
  float v79;
  char v80;
  char v81;
  float v84;
  float v85;
  float v87;
  float v89;
  float v90;
  float v92;
  float v93;
  float v97;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;

  v6 = *(_QWORD *)(result + 28);
  v7 = *result;
  v8 = v6 * a2 / v7;
  v9 = *((_QWORD *)result + 14);
  v10 = (_QWORD *)*((_QWORD *)result + 16);
  v11 = *((_QWORD *)result + 13) * a2 / v7 + *((_QWORD *)result + 15);
  v12 = (uint64_t *)*((_QWORD *)result + 17);
  v13 = (v6 + v6 * a2) / v7;
  v14 = (_BYTE *)v10[1];
  if (v14)
    v14 += v12[1] * v11 + v9;
  if (v13 != v8)
  {
    v15 = 0;
    v16 = *(_QWORD *)(result + 44);
    v17 = v8 + v16;
    v18 = **((_QWORD **)result + 8);
    v19 = *v12;
    v20 = *((_QWORD *)result + 19);
    v21 = *v10 + v19 * v11;
    v22 = *(_QWORD *)(result + 20);
    v23 = v13 + v16;
    v24 = **((_QWORD **)result + 7) + v18 * v17 + 16 * *(_QWORD *)(result + 36);
    v25 = (_BYTE *)(v21 + v9);
    v26 = v23 - v17;
    LOWORD(a3) = *(_WORD *)(v20 + 144);
    v27 = (float)LODWORD(a3);
    LOWORD(a4) = *(_WORD *)(v20 + 146);
    LOWORD(a5) = *(_WORD *)(v20 + 148);
    v28 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v20 + 150);
    v122 = (float)LODWORD(a6);
    LOWORD(a6) = *(_WORD *)(v20 + 152);
    v29 = (float)LODWORD(a6);
    v30 = *(float *)(v20 + 40);
    v123 = *(float *)(v20 + 36);
    v124 = (float)LODWORD(a4);
    v31 = *(float *)(v20 + 44);
    v120 = *(float *)(v20 + 52) * 0.5;
    v121 = *(float *)(v20 + 48) * 0.5;
    v118 = *(float *)(v20 + 60) * 0.5;
    v119 = *(float *)(v20 + 56) * 0.5;
    v32 = *(float *)(v20 + 72);
    v116 = *(float *)(v20 + 68) * 0.5;
    v117 = *(float *)(v20 + 64) * 0.5;
    v33 = *(float *)(v20 + 76);
    v34 = *(float *)(v20 + 80);
    v35 = *(float *)(v20 + 84);
    v36 = *(float *)(v20 + 88);
    v37 = *(float *)(v20 + 92);
    v38 = *(float *)(v20 + 96);
    v39 = *(float *)(v20 + 100);
    v40 = *(float *)(v20 + 104);
    v41 = v20 + 164;
    v42 = v20 + 16548;
    result = (unsigned __int8 *)(v20 + 32932);
    v44 = *(float *)(v20 + 108);
    v43 = *(float *)(v20 + 112);
    v45 = *(float *)(v20 + 116);
    v46 = *(float *)(v20 + 120);
    v47 = *(unsigned __int8 *)(v20 + 157);
    v48 = *(unsigned __int8 *)(v20 + 156);
    v49 = *(unsigned __int8 *)(v20 + 155);
    v50 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    v51 = *(unsigned __int8 *)(v20 + 154);
    do
    {
      if (v22)
      {
        v52 = 0;
        v53 = v14;
        v54 = v25;
        v55 = v24;
        do
        {
          v56.i32[0] = *(_DWORD *)(v55 + 4 * v51);
          v56.i32[1] = *(_DWORD *)(v55 + 4 * v49);
          _D3 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v56, v50), 0), v50)));
          v58 = v55 + 16;
          _D3.i16[0] = *(_WORD *)(v41 + 2 * _D3.u32[0]);
          __asm { FCVT            S15, H3 }
          _D3.i16[0] = *(_WORD *)(v41 + 2 * _D3.u32[1]);
          v64.i32[0] = *(_DWORD *)(v55 + 4 * v48);
          v64.i32[1] = *(_DWORD *)(v55 + 16 + 4 * v51);
          __asm { FCVT            S16, H3 }
          v66 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v64, v50), 0), v50)));
          _D3.i16[0] = *(_WORD *)(v41 + 2 * v66.u32[0]);
          __asm { FCVT            S17, H3 }
          v68 = fmaxf(_S15, fmaxf(_S16, _S17));
          v69 = (float)((float)((float)(v43 * _S16) + (float)(v44 * _S15)) + (float)(v45 * _S17)) + (float)(v46 * v68);
          v70 = 8191.0;
          if (v69 <= 8191.0)
          {
            v70 = (float)((float)((float)(v43 * _S16) + (float)(v44 * _S15)) + (float)(v45 * _S17)) + (float)(v46 * v68);
            if (v69 < 0.0)
              v70 = 0.0;
          }
          _H18 = *(_WORD *)(v41 + 2 * v66.u32[1]);
          __asm { FCVT            S19, H18 }
          v73.i32[0] = *(_DWORD *)(v58 + 4 * v49);
          v73.i32[1] = *(_DWORD *)(v58 + 4 * v48);
          _D18 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v73, v50), 0), v50)));
          _D18.i16[0] = *(_WORD *)(v41 + 2 * _D18.u32[0]);
          __asm { FCVT            S20, H18 }
          _D18.i16[0] = *(_WORD *)(v41 + 2 * _D18.u32[1]);
          __asm { FCVT            S22, H18 }
          v77 = (float)((float)((float)(v43 * _S20) + (float)(v44 * _S19)) + (float)(v45 * _S22))
              + (float)(v46 * fmaxf(_S19, fmaxf(_S20, _S22)));
          v78 = 8191.0;
          if (v77 <= 8191.0)
          {
            v78 = v77;
            if (v77 < 0.0)
              v78 = 0.0;
          }
          if (v53)
          {
            v79 = *(float *)(v58 + 4 * v47);
            v80 = llroundf(*(float *)(v55 + 4 * v47) * 255.0);
            v81 = llroundf(v79 * 255.0);
          }
          else
          {
            v80 = 0;
            v81 = 0;
          }
          _H1 = *(_WORD *)(v42 + 2 * llroundf(v70));
          __asm { FCVT            S1, H1 }
          v84 = _S15 * _S1;
          v85 = _S16 * _S1;
          _H16 = *(_WORD *)(v42 + 2 * llroundf(v78));
          v87 = _S17 * _S1;
          __asm { FCVT            S16, H16 }
          v89 = _S19 * _S16;
          v90 = _S20 * _S16;
          _S16 = _S22 * _S16;
          v92 = (float)((float)(v33 * v85) + (float)(v84 * v32)) + (float)(v87 * v34);
          v93 = (float)((float)(v36 * v85) + (float)(v84 * v35)) + (float)(v87 * v37);
          _S1 = (float)((float)(v39 * v85) + (float)(v84 * v38)) + (float)(v87 * v40);
          _S3 = (float)((float)(v33 * v90) + (float)(v89 * v32)) + (float)(_S16 * v34);
          _S5 = (float)((float)(v36 * v90) + (float)(v89 * v35)) + (float)(_S16 * v37);
          v97 = (float)((float)(v39 * v90) + (float)(v89 * v38)) + (float)(_S16 * v40);
          LOWORD(_S16) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0))];
          __asm { FCVT            S18, H16 }
          LOWORD(_S16) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0))];
          LOWORD(_S1) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0))];
          __asm
          {
            FCVT            S20, H16
            FCVT            S1, H1
          }
          LOWORD(_S3) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0))];
          __asm { FCVT            S3, H3 }
          LOWORD(_S5) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0))];
          __asm { FCVT            S16, H5 }
          LOWORD(_S5) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v97, 0.0), 8191.0))];
          __asm { FCVT            S17, H5 }
          v104 = (float)((float)((float)(v30 * _S20) + (float)(v123 * _S18)) + (float)(v31 * _S1)) + v27;
          v106 = _S20 + _S16;
          v107 = _S1 + _S17;
          v108 = (float)((float)(v124 + (float)((float)(_S18 + _S3) * v121)) + (float)(v106 * v120))
               + (float)((float)(_S1 + _S17) * v119);
          if (v104 < v27)
            v109 = v27;
          else
            v109 = v104;
          if (v104 > v28)
            v109 = v28;
          *v54 = llroundf(v109);
          v110 = v29;
          if (v108 <= v29)
          {
            v110 = (float)((float)(v124 + (float)((float)(_S18 + _S3) * v121)) + (float)(v106 * v120))
                 + (float)(v107 * v119);
            if (v108 < v122)
              v110 = v122;
          }
          v111 = (float)((float)((float)(v30 * _S16) + (float)(v123 * _S3)) + (float)(v31 * _S17)) + v27;
          v105 = _S18 + _S3;
          v112 = (float)((float)(v124 + (float)((float)(_S18 + _S3) * v118)) + (float)(v106 * v117))
               + (float)(v107 * v116);
          v54[1] = llroundf(v110);
          if (v111 < v27)
            v113 = v27;
          else
            v113 = v111;
          if (v111 <= v28)
            v114 = v113;
          else
            v114 = v28;
          v54[2] = llroundf(v114);
          v115 = v29;
          if (v112 <= v29)
          {
            v115 = (float)((float)(v124 + (float)(v105 * v118)) + (float)(v106 * v117)) + (float)(v107 * v116);
            if (v112 < v122)
              v115 = v122;
          }
          v54[3] = llroundf(v115);
          if (v53)
          {
            *v53 = v80;
            v53[1] = v81;
            v53 += 2;
          }
          v55 += 32;
          v52 += 2;
          v54 += 4;
        }
        while (v22 > v52);
      }
      v24 += v18;
      v25 += v19;
      ++v15;
    }
    while (v15 != v26);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Mat_TRC_yuvsf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Mat_TRC_yuvsf_GCD);
  return 0;
}

unint64_t vt_Copy_RGfA_TRC_Mat_TRC_yuvsf_GCD(unint64_t result, uint64_t a2, float a3, float a4, float a5, float a6, float a7)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float32x2_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  _BYTE *v56;
  uint64_t v57;
  char v58;
  char v59;
  float32x2_t v60;
  float32x2_t v67;
  float32x2_t v71;
  float v76;
  float v77;
  float v79;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;

  v7 = *(_QWORD *)(result + 28);
  v8 = *(unsigned __int8 *)result;
  v9 = v7 * a2 / v8;
  v10 = *(_QWORD *)(result + 112);
  v11 = *(_QWORD **)(result + 128);
  v12 = *(_QWORD *)(result + 104) * a2 / v8 + *(_QWORD *)(result + 120);
  v13 = *(uint64_t **)(result + 136);
  v14 = (v7 + v7 * a2) / v8;
  v15 = (_BYTE *)v11[1];
  if (v15)
    v15 += v13[1] * v12 + v10;
  if (v14 != v9)
  {
    v16 = 0;
    v17 = *(_QWORD *)(result + 44);
    v18 = v9 + v17;
    v19 = **(_QWORD **)(result + 64);
    v20 = *v13;
    v21 = *(_QWORD *)(result + 152);
    v22 = *v11 + v20 * v12;
    v23 = *(_QWORD *)(result + 20);
    v24 = v14 + v17;
    v25 = **(_QWORD **)(result + 56) + v19 * v18 + 16 * *(_QWORD *)(result + 36);
    v26 = (_BYTE *)(v22 + v10);
    v27 = v24 - v18;
    LOWORD(a3) = *(_WORD *)(v21 + 144);
    v28 = (float)LODWORD(a3);
    LOWORD(a4) = *(_WORD *)(v21 + 146);
    v29 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v21 + 148);
    v30 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v21 + 150);
    v31 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v21 + 152);
    v32 = (float)LODWORD(a7);
    v33 = *(float *)(v21 + 36);
    v34 = *(float *)(v21 + 40);
    v35 = *(float *)(v21 + 44);
    v101 = *(float *)(v21 + 48) * 0.5;
    v100 = *(float *)(v21 + 52) * 0.5;
    v99 = *(float *)(v21 + 56) * 0.5;
    v98 = *(float *)(v21 + 60) * 0.5;
    v36 = *(float *)(v21 + 64) * 0.5;
    v37 = *(float *)(v21 + 72);
    v38 = *(float *)(v21 + 68) * 0.5;
    v39 = *(float *)(v21 + 76);
    v40 = *(float *)(v21 + 80);
    v41 = *(float *)(v21 + 84);
    v42 = *(float *)(v21 + 88);
    v43 = *(float *)(v21 + 92);
    v44 = *(float *)(v21 + 96);
    v45 = *(float *)(v21 + 100);
    v46 = *(float *)(v21 + 104);
    v47 = v21 + 164;
    v48 = v21 + 16548;
    result = *(unsigned __int8 *)(v21 + 157);
    v49 = *(unsigned __int8 *)(v21 + 156);
    v50 = *(unsigned __int8 *)(v21 + 155);
    v51 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    v52 = *(unsigned __int8 *)(v21 + 154);
    do
    {
      if (v23)
      {
        v53 = 0;
        v54 = v25;
        v55 = v15;
        v56 = v26;
        do
        {
          v57 = v54 + 16;
          if (v55)
          {
            v58 = llroundf(*(float *)(v54 + 4 * result) * 255.0);
            v59 = llroundf(*(float *)(v57 + 4 * result) * 255.0);
          }
          else
          {
            v58 = 0;
            v59 = 0;
          }
          v60.i32[0] = *(_DWORD *)(v54 + 4 * v52);
          v60.i32[1] = *(_DWORD *)(v54 + 4 * v50);
          _D4 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v60, v51), 0), v51)));
          _D4.i16[0] = *(_WORD *)(v47 + 2 * _D4.u32[0]);
          __asm { FCVT            S4, H4 }
          _H16 = *(_WORD *)(v47 + 2 * _D4.u32[1]);
          v67.i32[0] = *(_DWORD *)(v54 + 4 * v49);
          v67.i32[1] = *(_DWORD *)(v57 + 4 * v52);
          _D17 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v67, v51), 0), v51)));
          _D17.i16[0] = *(_WORD *)(v47 + 2 * _D17.u32[0]);
          __asm
          {
            FCVT            S16, H16
            FCVT            S17, H17
          }
          _H11 = *(_WORD *)(v47 + 2 * _D17.u32[1]);
          v71.i32[0] = *(_DWORD *)(v57 + 4 * v50);
          v71.i32[1] = *(_DWORD *)(v57 + 4 * v49);
          _D12 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v71, v51), 0), v51)));
          _D12.i16[0] = *(_WORD *)(v47 + 2 * _D12.u32[0]);
          __asm
          {
            FCVT            S11, H11
            FCVT            S12, H12
          }
          _H13 = *(_WORD *)(v47 + 2 * _D12.u32[1]);
          __asm { FCVT            S13, H13 }
          v76 = (float)((float)(v39 * _S16) + (float)(*(float *)_D4.i32 * v37)) + (float)(*(float *)_D17.i32 * v40);
          v77 = (float)((float)(v42 * _S16) + (float)(*(float *)_D4.i32 * v41)) + (float)(*(float *)_D17.i32 * v43);
          *(float *)_D4.i32 = (float)((float)(v45 * _S16) + (float)(*(float *)_D4.i32 * v44))
                            + (float)(*(float *)_D17.i32 * v46);
          _S16 = (float)((float)(v39 * *(float *)_D12.i32) + (float)(_S11 * v37)) + (float)(_S13 * v40);
          *(float *)_D17.i32 = (float)((float)(v42 * *(float *)_D12.i32) + (float)(_S11 * v41)) + (float)(_S13 * v43);
          v79 = (float)((float)(v45 * *(float *)_D12.i32) + (float)(_S11 * v44)) + (float)(_S13 * v46);
          LOWORD(_S11) = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S14, H11 }
          LOWORD(_S11) = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          _D4.i16[0] = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(*(float *)_D4.i32, 0.0), 8191.0)));
          __asm
          {
            FCVT            S15, H11
            FCVT            S4, H4
          }
          LOWORD(_S16) = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(_S16, 0.0), 8191.0)));
          __asm { FCVT            S11, H16 }
          LOWORD(_S16) = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(*(float *)_D17.i32, 0.0), 8191.0)));
          __asm { FCVT            S12, H16 }
          LOWORD(_S16) = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          __asm { FCVT            S13, H16 }
          v85 = (float)((float)((float)(v34 * _S15) + (float)(v33 * _S14)) + (float)(v35 * *(float *)_D4.i32)) + v28;
          v86 = _S14 + _S11;
          v87 = _S15 + _S12;
          v88 = *(float *)_D4.i32 + _S13;
          v89 = (float)((float)(v29 + (float)(v86 * v101)) + (float)(v87 * v100))
              + (float)((float)(*(float *)_D4.i32 + _S13) * v99);
          if (v85 < v28)
            v90 = v28;
          else
            v90 = v85;
          if (v85 <= v30)
            v91 = v90;
          else
            v91 = v30;
          *v56 = llroundf(v91);
          v92 = v32;
          if (v89 <= v32)
          {
            v92 = v89;
            if (v89 < v31)
              v92 = v31;
          }
          v93 = (float)((float)((float)(v34 * _S12) + (float)(v33 * _S11)) + (float)(v35 * _S13)) + v28;
          v94 = (float)((float)(v29 + (float)(v86 * v98)) + (float)(v87 * v36)) + (float)(v88 * v38);
          v56[1] = llroundf(v92);
          if (v93 < v28)
            v95 = v28;
          else
            v95 = (float)((float)((float)(v34 * _S12) + (float)(v33 * _S11)) + (float)(v35 * _S13)) + v28;
          if (v93 <= v30)
            v96 = v95;
          else
            v96 = v30;
          v56[2] = llroundf(v96);
          v97 = v32;
          if (v94 <= v32)
          {
            v97 = v94;
            if (v94 < v31)
              v97 = v31;
          }
          v56[3] = llroundf(v97);
          if (v55)
          {
            *v55 = v58;
            v55[1] = v59;
            v55 += 2;
          }
          v54 += 32;
          v53 += 2;
          v56 += 4;
        }
        while (v23 > v53);
      }
      v25 += v19;
      v26 += v20;
      ++v16;
    }
    while (v16 != v27);
  }
  return result;
}

uint64_t vt_Copy_RGfA_rgb_yuvsf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_rgb_yuvsf_GCD);
  return 0;
}

unint64_t vt_Copy_RGfA_rgb_yuvsf_GCD(unint64_t result, uint64_t a2, double a3, float a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  _BYTE *v50;
  uint64_t v51;
  char v52;
  char v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;

  v8 = *(_QWORD *)(result + 28);
  v9 = *(unsigned __int8 *)result;
  v10 = v8 * a2 / v9;
  v11 = *(_QWORD *)(result + 112);
  v12 = *(_QWORD **)(result + 128);
  v13 = *(_QWORD *)(result + 104) * a2 / v9 + *(_QWORD *)(result + 120);
  v14 = *(uint64_t **)(result + 136);
  v15 = (v8 + v8 * a2) / v9;
  v16 = (_BYTE *)v12[1];
  if (v16)
    v16 += v14[1] * v13 + v11;
  if (v15 != v10)
  {
    v17 = 0;
    v18 = *(_QWORD *)(result + 44);
    v19 = v10 + v18;
    v20 = **(_QWORD **)(result + 64);
    v21 = *v14;
    v22 = *v12 + v21 * v13;
    v23 = *(_QWORD *)(result + 152);
    v24 = *(_QWORD *)(result + 20);
    v25 = v15 + v18;
    v26 = **(_QWORD **)(result + 56) + v20 * v19 + 16 * *(_QWORD *)(result + 36);
    v27 = (_BYTE *)(v22 + v11);
    v28 = v25 - v19;
    v29 = (float)*(unsigned int *)(v23 + 136);
    LOWORD(a4) = *(_WORD *)(v23 + 144);
    v30 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v23 + 146);
    v31 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v23 + 148);
    v32 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v23 + 150);
    v33 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v23 + 152);
    v34 = (float)LODWORD(a8);
    v35 = *(float *)(v23 + 36);
    v36 = *(float *)(v23 + 40);
    v37 = *(float *)(v23 + 44);
    v38 = *(float *)(v23 + 48) * 0.5;
    v39 = *(float *)(v23 + 52) * 0.5;
    v40 = *(float *)(v23 + 56) * 0.5;
    v41 = *(float *)(v23 + 60) * 0.5;
    v42 = *(float *)(v23 + 64) * 0.5;
    v43 = *(float *)(v23 + 68) * 0.5;
    v44 = *(unsigned __int8 *)(v23 + 157);
    v45 = *(unsigned __int8 *)(v23 + 156);
    result = *(unsigned __int8 *)(v23 + 155);
    v46 = *(unsigned __int8 *)(v23 + 154);
    do
    {
      if (v24)
      {
        v47 = 0;
        v48 = v26;
        v49 = v16;
        v50 = v27;
        do
        {
          v51 = v48 + 16;
          if (v49)
          {
            v52 = llroundf(*(float *)(v48 + 4 * v44) * 255.0);
            v53 = llroundf(*(float *)(v51 + 4 * v44) * 255.0);
          }
          else
          {
            v52 = 0;
            v53 = 0;
          }
          v54 = *(float *)(v48 + 4 * v46) * v29;
          v55 = *(float *)(v48 + 4 * result) * v29;
          v56 = *(float *)(v48 + 4 * v45) * v29;
          v57 = *(float *)(v51 + 4 * v46) * v29;
          v58 = *(float *)(v51 + 4 * result) * v29;
          v59 = *(float *)(v51 + 4 * v45) * v29;
          v60 = (float)((float)((float)(v36 * v55) + (float)(v35 * v54)) + (float)(v37 * v56)) + v30;
          v61 = (float)((float)((float)(v36 * v58) + (float)(v35 * v57)) + (float)(v37 * v59)) + v30;
          v62 = v54 + v57;
          v63 = v55 + v58;
          v64 = v56 + v59;
          v65 = (float)((float)(v31 + (float)(v62 * v38)) + (float)(v63 * v39)) + (float)(v64 * v40);
          v66 = (float)(v31 + (float)(v62 * v41)) + (float)(v63 * v42);
          if (v60 < v30)
            v67 = v30;
          else
            v67 = v60;
          if (v60 > v32)
            v67 = v32;
          v68 = v66 + (float)(v64 * v43);
          *v50 = llroundf(v67);
          if (v65 < v33)
            v69 = v33;
          else
            v69 = v65;
          if (v65 > v34)
            v69 = v34;
          v50[1] = llroundf(v69);
          if (v61 < v30)
            v70 = v30;
          else
            v70 = v61;
          if (v61 > v32)
            v70 = v32;
          v50[2] = llroundf(v70);
          v71 = v34;
          if (v68 <= v34)
          {
            v71 = v68;
            if (v68 < v33)
              v71 = v33;
          }
          v50[3] = llroundf(v71);
          if (v49)
          {
            *v49 = v52;
            v49[1] = v53;
            v49 += 2;
          }
          v48 += 32;
          v47 += 2;
          v50 += 4;
        }
        while (v24 > v47);
      }
      v26 += v20;
      v27 += v21;
      ++v17;
    }
    while (v17 != v28);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Tone_Mat_TRC_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v20 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v18 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Tone_Mat_TRC_xf422_GCD);
  return 0;
}

unint64_t vt_Copy_RGfA_TRC_Tone_Mat_TRC_xf422_GCD(unint64_t result, uint64_t a2, float a3, float a4, float a5, float a6)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  float v40;
  float v41;
  float v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unsigned int v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  float32x2_t v59;
  char v60;
  unint64_t v61;
  _WORD *v62;
  _WORD *v63;
  uint64_t v64;
  float v65;
  float32x2_t v66;
  uint64_t v68;
  float32x2_t v74;
  int32x2_t v76;
  float v78;
  float v79;
  float v80;
  float32x2_t v83;
  float v87;
  float v88;
  float v89;
  __int16 v90;
  __int16 v91;
  float v94;
  float v95;
  float v96;
  float v101;
  float v102;
  float v103;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  _WORD *v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;

  v6 = *(_QWORD *)(result + 28);
  v7 = *(unsigned __int8 *)result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)(result + 20);
    v12 = v8 + *(_QWORD *)(result + 44);
    v13 = v9 - v8;
    v14 = *(_QWORD *)(result + 152);
    v15 = *(uint64_t **)(result + 136);
    v16 = *(_QWORD **)(result + 56);
    v17 = **(_QWORD **)(result + 64);
    v18 = *v15;
    v19 = v15[1];
    v20 = v15[2];
    LOWORD(a3) = *(_WORD *)(v14 + 144);
    v21 = (float)LODWORD(a3);
    LOWORD(a4) = *(_WORD *)(v14 + 146);
    v22 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v14 + 148);
    v23 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v14 + 150);
    v24 = (float)LODWORD(a6);
    LOWORD(a6) = *(_WORD *)(v14 + 152);
    v25 = (float)LODWORD(a6);
    v134 = *(float *)(v14 + 36);
    v135 = v24;
    v26 = *(float *)(v14 + 44);
    v132 = *(float *)(v14 + 48) * 0.5;
    v133 = *(float *)(v14 + 40);
    v130 = *(float *)(v14 + 56) * 0.5;
    v131 = *(float *)(v14 + 52) * 0.5;
    v128 = *(float *)(v14 + 64) * 0.5;
    v129 = *(float *)(v14 + 60) * 0.5;
    v27 = *(float *)(v14 + 72);
    v127 = *(float *)(v14 + 68) * 0.5;
    v28 = *(float *)(v14 + 76);
    v29 = *(float *)(v14 + 80);
    v30 = *(float *)(v14 + 84);
    v31 = *(float *)(v14 + 88);
    v32 = *(float *)(v14 + 92);
    v33 = *(float *)(v14 + 96);
    v34 = *(float *)(v14 + 100);
    v35 = *(float *)(v14 + 104);
    v36 = v14 + 164;
    v37 = v14 + 16548;
    v38 = v14 + 32932;
    v40 = *(float *)(v14 + 108);
    v39 = *(float *)(v14 + 112);
    v41 = *(float *)(v14 + 116);
    v42 = *(float *)(v14 + 120);
    v43 = *(uint64_t **)(result + 128);
    v44 = *(_QWORD *)(result + 112);
    v45 = *(_QWORD *)(result + 104) * a2 / v7 + *(_QWORD *)(result + 120);
    v46 = *(_QWORD *)(result + 36);
    v47 = *(unsigned __int8 *)(v14 + 132);
    if (v47 >= 0x11)
      v48 = 0;
    else
      v48 = 16 - v47;
    result = *(unsigned __int8 *)(v14 + 157);
    v49 = *(unsigned __int8 *)(v14 + 156);
    v50 = *(unsigned __int8 *)(v14 + 155);
    v51 = *(unsigned __int8 *)(v14 + 154);
    v52 = v43[2];
    if (v52)
      v53 = v52 + v45 * v20 + 2 * v44;
    else
      v53 = 0;
    v55 = *v43;
    v54 = v43[1];
    v56 = v54 + v45 * v19 + 2 * v44;
    if (!v54)
      v56 = 0;
    v57 = v55 + v45 * v18 + 2 * v44;
    v58 = *v16 + v17 * v12 + 16 * v46;
    v59 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    v60 = v48;
    do
    {
      if (v11)
      {
        v61 = 0;
        v62 = (_WORD *)v53;
        v63 = (_WORD *)v57;
        v64 = v58;
        do
        {
          v65 = v22;
          v66.i32[0] = *(_DWORD *)(v64 + 4 * v51);
          v66.i32[1] = *(_DWORD *)(v64 + 4 * v50);
          _D3 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v66, v59), 0), v59)));
          v68 = v64 + 16;
          _D3.i16[0] = *(_WORD *)(v36 + 2 * _D3.u32[0]);
          __asm { FCVT            S15, H3 }
          _D3.i16[0] = *(_WORD *)(v36 + 2 * _D3.u32[1]);
          v74.i32[0] = *(_DWORD *)(v64 + 4 * v49);
          v74.i32[1] = *(_DWORD *)(v64 + 16 + 4 * v51);
          __asm { FCVT            S16, H3 }
          v76 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v74, v59), 0), v59)));
          _D3.i16[0] = *(_WORD *)(v36 + 2 * v76.u32[0]);
          __asm { FCVT            S17, H3 }
          v78 = fmaxf(_S15, fmaxf(_S16, _S17));
          v79 = (float)((float)((float)(v39 * _S16) + (float)(v40 * _S15)) + (float)(v41 * _S17)) + (float)(v42 * v78);
          v80 = 8191.0;
          if (v79 <= 8191.0)
          {
            v80 = (float)((float)((float)(v39 * _S16) + (float)(v40 * _S15)) + (float)(v41 * _S17)) + (float)(v42 * v78);
            if (v79 < 0.0)
              v80 = 0.0;
          }
          _H18 = *(_WORD *)(v36 + 2 * v76.u32[1]);
          __asm { FCVT            S19, H18 }
          v83.i32[0] = *(_DWORD *)(v68 + 4 * v50);
          v83.i32[1] = *(_DWORD *)(v68 + 4 * v49);
          _D18 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v83, v59), 0), v59)));
          _D18.i16[0] = *(_WORD *)(v36 + 2 * _D18.u32[0]);
          __asm { FCVT            S20, H18 }
          _D18.i16[0] = *(_WORD *)(v36 + 2 * _D18.u32[1]);
          __asm { FCVT            S22, H18 }
          v87 = (float)((float)((float)(v39 * _S20) + (float)(v40 * _S19)) + (float)(v41 * _S22))
              + (float)(v42 * fmaxf(_S19, fmaxf(_S20, _S22)));
          v88 = 8191.0;
          if (v87 <= 8191.0)
          {
            v88 = v87;
            if (v87 < 0.0)
              v88 = 0.0;
          }
          if (v62)
          {
            v89 = *(float *)(v68 + 4 * result);
            v90 = llroundf(*(float *)(v64 + 4 * result) * 65535.0);
            v91 = llroundf(v89 * 65535.0);
          }
          else
          {
            v90 = 0;
            v91 = 0;
          }
          v22 = v65;
          _H1 = *(_WORD *)(v37 + 2 * llroundf(v80));
          __asm { FCVT            S1, H1 }
          v94 = _S15 * _S1;
          v95 = _S16 * _S1;
          v96 = _S17 * _S1;
          _H16 = *(_WORD *)(v37 + 2 * llroundf(v88));
          __asm { FCVT            S16, H16 }
          _S17 = _S19 * _S16;
          _S18 = _S20 * _S16;
          v101 = _S22 * _S16;
          v102 = (float)((float)(v28 * v95) + (float)(v94 * v27)) + (float)(v96 * v29);
          v103 = (float)((float)(v31 * v95) + (float)(v94 * v30)) + (float)(v96 * v32);
          _S1 = (float)((float)(v34 * v95) + (float)(v94 * v33)) + (float)(v96 * v35);
          _S3 = (float)((float)(v28 * _S18) + (float)(_S17 * v27)) + (float)(v101 * v29);
          _S5 = (float)((float)(v31 * _S18) + (float)(_S17 * v30)) + (float)(v101 * v32);
          _S16 = (float)((float)(v34 * _S18) + (float)(_S17 * v33)) + (float)(v101 * v35);
          LOWORD(_S17) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v102, 0.0), 8191.0)));
          __asm { FCVT            S17, H17 }
          LOWORD(_S18) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v103, 0.0), 8191.0)));
          __asm { FCVT            S18, H18 }
          LOWORD(_S1) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          LOWORD(_S3) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          __asm
          {
            FCVT            S1, H1
            FCVT            S3, H3
          }
          LOWORD(_S5) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          LOWORD(_S16) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S16, 0.0), 8191.0)));
          __asm { FCVT            S19, H16 }
          v114 = (float)((float)((float)(v133 * _S18) + (float)(v134 * _S17)) + (float)(v26 * _S1)) + v21;
          v115 = (float)((float)((float)(v133 * _S5) + (float)(v134 * _S3)) + (float)(v26 * _S19)) + v21;
          if (v114 < v21)
            v116 = v21;
          else
            v116 = (float)((float)((float)(v133 * _S18) + (float)(v134 * _S17)) + (float)(v26 * _S1)) + v21;
          if (v114 <= v23)
            v117 = v116;
          else
            v117 = v23;
          *v63 = llroundf(v117) << v60;
          if (v115 < v21)
            v118 = v21;
          else
            v118 = (float)((float)((float)(v133 * _S5) + (float)(v134 * _S3)) + (float)(v26 * _S19)) + v21;
          if (v115 > v23)
            v118 = v23;
          v63[1] = llroundf(v118) << v60;
          v119 = _S17 + _S3;
          v120 = _S18 + _S5;
          v121 = _S1 + _S19;
          v122 = (float)((float)(v65 + (float)(v119 * v132)) + (float)((float)(_S18 + _S5) * v131))
               + (float)((float)(_S1 + _S19) * v130);
          v123 = v25;
          if (v122 <= v25)
          {
            v123 = v122;
            if (v122 < v135)
              v123 = v135;
          }
          v124 = (_WORD *)(v56 + 2 * v61);
          v125 = (float)((float)(v65 + (float)(v119 * v129)) + (float)(v120 * v128)) + (float)(v121 * v127);
          *v124 = llroundf(v123) << v60;
          v126 = v25;
          if (v125 <= v25)
          {
            v126 = v125;
            if (v125 < v135)
              v126 = v135;
          }
          v124[1] = llroundf(v126) << v60;
          if (v62)
          {
            *v62 = v90;
            v62[1] = v91;
            v62 += 2;
          }
          v64 += 32;
          v61 += 2;
          v63 += 2;
        }
        while (v11 > v61);
      }
      v58 += v17;
      v57 += v18;
      v56 += v19;
      v53 += v20;
      ++v10;
    }
    while (v10 != v13);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Mat_TRC_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v20 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v18 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Mat_TRC_xf422_GCD);
  return 0;
}

unint64_t vt_Copy_RGfA_TRC_Mat_TRC_xf422_GCD(unint64_t result, uint64_t a2, float a3, float a4, float a5, float a6, float a7)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unsigned int v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  float32x2_t v59;
  char v60;
  unint64_t v61;
  uint64_t v62;
  _WORD *v63;
  _WORD *v64;
  uint64_t v65;
  __int16 v66;
  __int16 v67;
  float32x2_t v68;
  float32x2_t v76;
  float32x2_t v80;
  float v87;
  unsigned int v92;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  _WORD *v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;

  v7 = *(_QWORD *)(result + 28);
  v8 = *(unsigned __int8 *)result;
  v9 = v7 * a2 / v8;
  v10 = (v7 + v7 * a2) / v8;
  if (v10 != v9)
  {
    v11 = 0;
    v12 = *(_QWORD *)(result + 20);
    v13 = v9 + *(_QWORD *)(result + 44);
    v14 = v10 - v9;
    v15 = *(_QWORD *)(result + 152);
    v16 = *(uint64_t **)(result + 136);
    v17 = *(_QWORD **)(result + 56);
    v18 = **(_QWORD **)(result + 64);
    v19 = *v16;
    v20 = v16[1];
    v21 = v16[2];
    LOWORD(a3) = *(_WORD *)(v15 + 144);
    v22 = (float)LODWORD(a3);
    LOWORD(a4) = *(_WORD *)(v15 + 146);
    v23 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v15 + 148);
    v24 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v15 + 150);
    v25 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v15 + 152);
    v26 = (float)LODWORD(a7);
    v27 = *(float *)(v15 + 36);
    v28 = *(float *)(v15 + 40);
    v29 = *(float *)(v15 + 44);
    v108 = *(float *)(v15 + 52) * 0.5;
    v109 = *(float *)(v15 + 48) * 0.5;
    v106 = *(float *)(v15 + 60) * 0.5;
    v107 = *(float *)(v15 + 56) * 0.5;
    v30 = *(float *)(v15 + 64) * 0.5;
    v31 = *(float *)(v15 + 72);
    v32 = *(float *)(v15 + 68) * 0.5;
    v33 = *(float *)(v15 + 76);
    v34 = *(float *)(v15 + 80);
    v35 = *(float *)(v15 + 84);
    v36 = *(float *)(v15 + 88);
    v37 = *(float *)(v15 + 92);
    v38 = *(float *)(v15 + 96);
    v39 = *(float *)(v15 + 100);
    v40 = *(float *)(v15 + 104);
    v41 = v15 + 164;
    v42 = v15 + 16548;
    v43 = *(uint64_t **)(result + 128);
    v44 = *(_QWORD *)(result + 112);
    v45 = *(_QWORD *)(result + 104) * a2 / v8 + *(_QWORD *)(result + 120);
    v46 = *(_QWORD *)(result + 36);
    v47 = *(unsigned __int8 *)(v15 + 132);
    if (v47 >= 0x11)
      v48 = 0;
    else
      v48 = 16 - v47;
    v49 = *(unsigned __int8 *)(v15 + 157);
    result = *(unsigned __int8 *)(v15 + 156);
    v50 = *(unsigned __int8 *)(v15 + 155);
    v51 = *(unsigned __int8 *)(v15 + 154);
    v52 = v43[2];
    if (v52)
      v53 = v52 + v45 * v21 + 2 * v44;
    else
      v53 = 0;
    v55 = *v43;
    v54 = v43[1];
    v56 = v54 + v45 * v20 + 2 * v44;
    if (!v54)
      v56 = 0;
    v57 = v55 + v45 * v19 + 2 * v44;
    v58 = *v17 + v18 * v13 + 16 * v46;
    v59 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    v60 = v48;
    do
    {
      if (v12)
      {
        v61 = 0;
        v62 = v58;
        v63 = (_WORD *)v53;
        v64 = (_WORD *)v57;
        do
        {
          v65 = v62 + 16;
          if (v63)
          {
            v66 = llroundf(*(float *)(v62 + 4 * v49) * 65535.0);
            v67 = llroundf(*(float *)(v65 + 4 * v49) * 65535.0);
          }
          else
          {
            v66 = 0;
            v67 = 0;
          }
          v68.i32[0] = *(_DWORD *)(v62 + 4 * v51);
          v68.i32[1] = *(_DWORD *)(v62 + 4 * v50);
          _D11 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v68, v59), 0), v59)));
          _D11.i16[0] = *(_WORD *)(v41 + 2 * _D11.u32[0]);
          __asm { FCVT            S11, H11 }
          _H12 = *(_WORD *)(v41 + 2 * _D11.u32[1]);
          __asm { FCVT            S12, H12 }
          v76.i32[0] = *(_DWORD *)(v62 + 4 * result);
          v76.i32[1] = *(_DWORD *)(v65 + 4 * v51);
          _D13 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v76, v59), 0), v59)));
          _D13.i16[0] = *(_WORD *)(v41 + 2 * _D13.u32[0]);
          __asm { FCVT            S13, H13 }
          _H14 = *(_WORD *)(v41 + 2 * _D13.u32[1]);
          __asm { FCVT            S14, H14 }
          v80.i32[0] = *(_DWORD *)(v65 + 4 * v50);
          v80.i32[1] = *(_DWORD *)(v65 + 4 * result);
          _D15 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v80, v59), 0), v59)));
          _D15.i16[0] = *(_WORD *)(v41 + 2 * _D15.u32[0]);
          __asm { FCVT            S15, H15 }
          _H16 = *(_WORD *)(v41 + 2 * _D15.u32[1]);
          __asm { FCVT            S16, H16 }
          _S17 = (float)((float)(v33 * _S12) + (float)(*(float *)_D11.i32 * v31)) + (float)(*(float *)_D13.i32 * v34);
          _S18 = (float)((float)(v36 * _S12) + (float)(*(float *)_D11.i32 * v35)) + (float)(*(float *)_D13.i32 * v37);
          *(float *)_D11.i32 = (float)((float)(v39 * _S12) + (float)(*(float *)_D11.i32 * v38))
                             + (float)(*(float *)_D13.i32 * v40);
          _S12 = (float)((float)(v33 * *(float *)_D15.i32) + (float)(_S14 * v31)) + (float)(_S16 * v34);
          *(float *)_D13.i32 = (float)((float)(v36 * *(float *)_D15.i32) + (float)(_S14 * v35)) + (float)(_S16 * v37);
          v87 = (float)((float)(v39 * *(float *)_D15.i32) + (float)(_S14 * v38)) + (float)(_S16 * v40);
          LOWORD(_S17) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(_S17, 0.0), 8191.0)));
          __asm { FCVT            S17, H17 }
          LOWORD(_S18) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(_S18, 0.0), 8191.0)));
          __asm { FCVT            S18, H18 }
          _D11.i16[0] = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(*(float *)_D11.i32, 0.0), 8191.0)));
          LOWORD(_S12) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(_S12, 0.0), 8191.0)));
          __asm
          {
            FCVT            S14, H11
            FCVT            S11, H12
          }
          LOWORD(_S12) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(*(float *)_D13.i32, 0.0), 8191.0)));
          v92 = llroundf(fminf(fmaxf(v87, 0.0), 8191.0));
          __asm { FCVT            S16, H12 }
          LOWORD(_S12) = *(_WORD *)(v42 + 2 * v92);
          __asm { FCVT            S13, H12 }
          v95 = (float)((float)((float)(v28 * _S18) + (float)(v27 * _S17)) + (float)(v29 * _S14)) + v22;
          v96 = (float)((float)((float)(v28 * _S16) + (float)(v27 * _S11)) + (float)(v29 * _S13)) + v22;
          if (v95 < v22)
            v97 = v22;
          else
            v97 = (float)((float)((float)(v28 * _S18) + (float)(v27 * _S17)) + (float)(v29 * _S14)) + v22;
          if (v95 > v24)
            v97 = v24;
          *v64 = llroundf(v97) << v60;
          if (v96 < v22)
            v98 = v22;
          else
            v98 = (float)((float)((float)(v28 * _S16) + (float)(v27 * _S11)) + (float)(v29 * _S13)) + v22;
          if (v96 > v24)
            v98 = v24;
          v64[1] = llroundf(v98) << v60;
          v99 = _S17 + _S11;
          v100 = _S14 + _S13;
          v101 = (float)((float)(v23 + (float)(v99 * v109)) + (float)((float)(_S18 + _S16) * v108))
               + (float)(v100 * v107);
          v102 = v26;
          if (v101 <= v26)
          {
            v102 = (float)((float)(v23 + (float)(v99 * v109)) + (float)((float)(_S18 + _S16) * v108))
                 + (float)(v100 * v107);
            if (v101 < v25)
              v102 = v25;
          }
          v103 = (_WORD *)(v56 + 2 * v61);
          v104 = (float)((float)(v23 + (float)(v99 * v106)) + (float)((float)(_S18 + _S16) * v30)) + (float)(v100 * v32);
          *v103 = llroundf(v102) << v60;
          v105 = v26;
          if (v104 <= v26)
          {
            v105 = v104;
            if (v104 < v25)
              v105 = v25;
          }
          v103[1] = llroundf(v105) << v60;
          if (v63)
          {
            *v63 = v66;
            v63[1] = v67;
            v63 += 2;
          }
          v62 += 32;
          v61 += 2;
          v64 += 2;
        }
        while (v12 > v61);
      }
      v58 += v18;
      v57 += v19;
      v56 += v20;
      v53 += v21;
      ++v11;
    }
    while (v11 != v14);
  }
  return result;
}

uint64_t vt_Copy_RGfA_rgb_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v20 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v18 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_rgb_xf422_GCD);
  return 0;
}

unint64_t vt_Copy_RGfA_rgb_xf422_GCD(unint64_t result, uint64_t a2, double a3, float a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned int v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  unint64_t v57;
  uint64_t v58;
  _WORD *v59;
  _WORD *v60;
  uint64_t v61;
  __int16 v62;
  __int16 v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  _WORD *v79;
  float v80;
  float v81;

  v8 = *(_QWORD *)(result + 28);
  v9 = *(unsigned __int8 *)result;
  v10 = v8 * a2 / v9;
  v11 = (v8 + v8 * a2) / v9;
  if (v11 != v10)
  {
    v12 = 0;
    v13 = *(_QWORD *)(result + 20);
    v14 = v10 + *(_QWORD *)(result + 44);
    v15 = v11 - v10;
    v16 = *(_QWORD *)(result + 152);
    v17 = *(uint64_t **)(result + 136);
    v18 = *(_QWORD **)(result + 56);
    v19 = **(_QWORD **)(result + 64);
    v20 = *v17;
    v21 = v17[1];
    v22 = v17[2];
    v23 = (float)*(unsigned int *)(v16 + 136);
    LOWORD(a4) = *(_WORD *)(v16 + 144);
    v24 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v16 + 146);
    v25 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v16 + 148);
    v26 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v16 + 150);
    v27 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v16 + 152);
    v28 = (float)LODWORD(a8);
    v29 = *(float *)(v16 + 36);
    v30 = *(float *)(v16 + 40);
    v31 = *(float *)(v16 + 44);
    v32 = *(float *)(v16 + 48) * 0.5;
    v33 = *(float *)(v16 + 52) * 0.5;
    v34 = *(float *)(v16 + 56) * 0.5;
    v35 = *(float *)(v16 + 60) * 0.5;
    v36 = *(float *)(v16 + 64) * 0.5;
    v37 = *(float *)(v16 + 68) * 0.5;
    v38 = *(_QWORD **)(result + 128);
    v39 = *(_QWORD *)(result + 112);
    v40 = *(_QWORD *)(result + 104) * a2 / v9 + *(_QWORD *)(result + 120);
    v41 = *(_QWORD *)(result + 36);
    v42 = *(unsigned __int8 *)(v16 + 132);
    if (v42 >= 0x11)
      v43 = 0;
    else
      v43 = 16 - v42;
    v44 = *(unsigned __int8 *)(v16 + 157);
    v45 = *(unsigned __int8 *)(v16 + 156);
    v46 = *(unsigned __int8 *)(v16 + 155);
    result = *(unsigned __int8 *)(v16 + 154);
    v47 = v38[2];
    if (v47)
      v48 = v47 + v40 * v22 + 2 * v39;
    else
      v48 = 0;
    v51 = v38;
    v50 = *v38;
    v49 = v51[1];
    v52 = v49 == 0;
    v53 = v49 + v40 * v21 + 2 * v39;
    if (v52)
      v53 = 0;
    v54 = v50 + v40 * v20 + 2 * v39;
    v55 = *v18 + v19 * v14 + 16 * v41;
    v56 = v43;
    do
    {
      if (v13)
      {
        v57 = 0;
        v58 = v55;
        v59 = (_WORD *)v48;
        v60 = (_WORD *)v54;
        do
        {
          v61 = v58 + 16;
          if (v59)
          {
            v62 = llroundf(*(float *)(v58 + 4 * v44) * 65535.0);
            v63 = llroundf(*(float *)(v61 + 4 * v44) * 65535.0);
          }
          else
          {
            v62 = 0;
            v63 = 0;
          }
          v64 = *(float *)(v58 + 4 * result) * v23;
          v65 = *(float *)(v58 + 4 * v46) * v23;
          v66 = *(float *)(v58 + 4 * v45) * v23;
          v67 = (float)((float)((float)(v30 * v65) + (float)(v29 * v64)) + (float)(v31 * v66)) + v24;
          v68 = v26;
          if (v67 <= v26)
          {
            v68 = (float)((float)((float)(v30 * v65) + (float)(v29 * v64)) + (float)(v31 * v66)) + v24;
            if (v67 < v24)
              v68 = v24;
          }
          v69 = *(float *)(v61 + 4 * result) * v23;
          v70 = *(float *)(v61 + 4 * v46) * v23;
          v71 = *(float *)(v61 + 4 * v45) * v23;
          v72 = (float)((float)((float)(v30 * v70) + (float)(v29 * v69)) + (float)(v31 * v71)) + v24;
          *v60 = llroundf(v68) << v56;
          v73 = v26;
          if (v72 <= v26)
          {
            v73 = (float)((float)((float)(v30 * v70) + (float)(v29 * v69)) + (float)(v31 * v71)) + v24;
            if (v72 < v24)
              v73 = v24;
          }
          v60[1] = llroundf(v73) << v56;
          v74 = v64 + v69;
          v75 = v65 + v70;
          v76 = v66 + v71;
          v77 = (float)((float)(v25 + (float)(v74 * v32)) + (float)(v75 * v33)) + (float)(v76 * v34);
          v78 = v28;
          if (v77 <= v28)
          {
            v78 = (float)((float)(v25 + (float)(v74 * v32)) + (float)(v75 * v33)) + (float)(v76 * v34);
            if (v77 < v27)
              v78 = v27;
          }
          v79 = (_WORD *)(v53 + 2 * v57);
          v80 = (float)((float)(v25 + (float)(v74 * v35)) + (float)(v75 * v36)) + (float)(v76 * v37);
          *v79 = llroundf(v78) << v56;
          v81 = v28;
          if (v80 <= v28)
          {
            v81 = v80;
            if (v80 < v27)
              v81 = v27;
          }
          v79[1] = llroundf(v81) << v56;
          if (v59)
          {
            *v59 = v62;
            v59[1] = v63;
            v59 += 2;
          }
          v58 += 32;
          v57 += 2;
          v60 += 2;
        }
        while (v13 > v57);
      }
      v55 += v19;
      v54 += v20;
      v53 += v21;
      v48 += v22;
      ++v12;
    }
    while (v12 != v15);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Tone_Mat_TRC_v216(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Tone_Mat_TRC_v216_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_RGfA_TRC_Tone_Mat_TRC_v216_GCD(unsigned __int8 *result, uint64_t a2, float a3, float a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  _WORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  uint64_t v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  float v42;
  float v43;
  float v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  float32x2_t v49;
  uint64_t v50;
  unint64_t v51;
  _WORD *v52;
  _WORD *v53;
  uint64_t v54;
  float v55;
  float v56;
  float v57;
  float32x2_t v58;
  uint64_t v60;
  float32x2_t v66;
  int32x2_t v68;
  float v70;
  float v71;
  float v72;
  float32x2_t v75;
  float v79;
  float v80;
  float v81;
  __int16 v82;
  __int16 v83;
  float v86;
  float v87;
  float v88;
  float v91;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v101;
  float v102;
  unsigned int v104;
  float v109;
  float v111;
  float v112;
  float v113;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  __int16 v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;

  v4 = *(_QWORD *)(result + 28);
  v5 = *result;
  v6 = v4 * a2 / v5;
  v7 = *((_QWORD *)result + 14);
  v8 = (_QWORD *)*((_QWORD *)result + 16);
  v9 = *((_QWORD *)result + 13) * a2 / v5 + *((_QWORD *)result + 15);
  v10 = (uint64_t *)*((_QWORD *)result + 17);
  v11 = (v4 + v4 * a2) / v5;
  v12 = (_WORD *)v8[1];
  if (v12)
    v12 = (_WORD *)((char *)v12 + 2 * v7 + v10[1] * v9);
  if (v11 != v6)
  {
    v13 = 0;
    v14 = *(_QWORD *)(result + 44);
    v15 = v6 + v14;
    v16 = **((_QWORD **)result + 8);
    v17 = *v10;
    v18 = *((_QWORD *)result + 19);
    v19 = *v8 + v17 * v9;
    v20 = *(_QWORD *)(result + 20);
    v21 = v11 + v14;
    v22 = **((_QWORD **)result + 7) + v16 * v15 + 16 * *(_QWORD *)(result + 36);
    v23 = (_WORD *)(v19 + 2 * v7);
    v24 = v21 - v15;
    LOWORD(a3) = *(_WORD *)(v18 + 144);
    v25 = (float)LODWORD(a3);
    LOWORD(a4) = *(_WORD *)(v18 + 146);
    v26 = (float)LODWORD(a4);
    LOWORD(a4) = *(_WORD *)(v18 + 148);
    v27 = (float)LODWORD(a4);
    LOWORD(a4) = *(_WORD *)(v18 + 150);
    v28 = (float)LODWORD(a4);
    LOWORD(a4) = *(_WORD *)(v18 + 152);
    v29 = (float)LODWORD(a4);
    v31 = *(float *)(v18 + 36);
    v30 = *(float *)(v18 + 40);
    v32 = *(float *)(v18 + 44);
    v132 = *(float *)(v18 + 48) * 0.5;
    v133 = v26;
    v130 = *(float *)(v18 + 56) * 0.5;
    v131 = *(float *)(v18 + 52) * 0.5;
    v128 = *(float *)(v18 + 64) * 0.5;
    v129 = *(float *)(v18 + 60) * 0.5;
    v126 = *(float *)(v18 + 68) * 0.5;
    v127 = *(float *)(v18 + 72);
    v33 = *(float *)(v18 + 80);
    v125 = *(float *)(v18 + 76);
    v34 = *(float *)(v18 + 84);
    v35 = *(float *)(v18 + 88);
    v36 = *(float *)(v18 + 92);
    v37 = *(float *)(v18 + 96);
    v38 = *(float *)(v18 + 100);
    v39 = *(float *)(v18 + 104);
    v40 = v18 + 164;
    v41 = v18 + 16548;
    result = (unsigned __int8 *)(v18 + 32932);
    v43 = *(float *)(v18 + 108);
    v42 = *(float *)(v18 + 112);
    v44 = *(float *)(v18 + 116);
    v45 = *(float *)(v18 + 120);
    v46 = *(unsigned __int8 *)(v18 + 157);
    v47 = *(unsigned __int8 *)(v18 + 156);
    v48 = *(unsigned __int8 *)(v18 + 155);
    v49 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    v50 = *(unsigned __int8 *)(v18 + 154);
    do
    {
      if (v20)
      {
        v51 = 0;
        v52 = v12;
        v53 = v23;
        v54 = v22;
        do
        {
          v55 = v32;
          v56 = v30;
          v57 = v31;
          v58.i32[0] = *(_DWORD *)(v54 + 4 * v50);
          v58.i32[1] = *(_DWORD *)(v54 + 4 * v48);
          _D1 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v58, v49), 0), v49)));
          v60 = v54 + 16;
          _D1.i16[0] = *(_WORD *)(v40 + 2 * _D1.u32[0]);
          __asm { FCVT            S15, H1 }
          _D1.i16[0] = *(_WORD *)(v40 + 2 * _D1.u32[1]);
          v66.i32[0] = *(_DWORD *)(v54 + 4 * v47);
          v66.i32[1] = *(_DWORD *)(v54 + 16 + 4 * v50);
          __asm { FCVT            S16, H1 }
          v68 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v66, v49), 0), v49)));
          _D1.i16[0] = *(_WORD *)(v40 + 2 * v68.u32[0]);
          __asm { FCVT            S17, H1 }
          v70 = fmaxf(_S15, fmaxf(_S16, _S17));
          v71 = (float)((float)((float)(v42 * _S16) + (float)(v43 * _S15)) + (float)(v44 * _S17)) + (float)(v45 * v70);
          v72 = 8191.0;
          if (v71 <= 8191.0)
          {
            v72 = (float)((float)((float)(v42 * _S16) + (float)(v43 * _S15)) + (float)(v44 * _S17)) + (float)(v45 * v70);
            if (v71 < 0.0)
              v72 = 0.0;
          }
          _H18 = *(_WORD *)(v40 + 2 * v68.u32[1]);
          __asm { FCVT            S19, H18 }
          v75.i32[0] = *(_DWORD *)(v60 + 4 * v48);
          v75.i32[1] = *(_DWORD *)(v60 + 4 * v47);
          _D18 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v75, v49), 0), v49)));
          _D18.i16[0] = *(_WORD *)(v40 + 2 * _D18.u32[0]);
          __asm { FCVT            S20, H18 }
          _D18.i16[0] = *(_WORD *)(v40 + 2 * _D18.u32[1]);
          __asm { FCVT            S22, H18 }
          v79 = (float)((float)((float)(v42 * _S20) + (float)(v43 * _S19)) + (float)(v44 * _S22))
              + (float)(v45 * fmaxf(_S19, fmaxf(_S20, _S22)));
          v80 = 8191.0;
          if (v79 <= 8191.0)
          {
            v80 = v79;
            if (v79 < 0.0)
              v80 = 0.0;
          }
          if (v52)
          {
            v81 = *(float *)(v60 + 4 * v46);
            v82 = llroundf(*(float *)(v54 + 4 * v46) * 65535.0);
            v83 = llroundf(v81 * 65535.0);
          }
          else
          {
            v82 = 0;
            v83 = 0;
          }
          v31 = v57;
          v30 = v56;
          v32 = v55;
          _H1 = *(_WORD *)(v41 + 2 * llroundf(v72));
          __asm { FCVT            S1, H1 }
          v86 = _S15 * _S1;
          v87 = _S16 * _S1;
          v88 = _S17 * _S1;
          _H16 = *(_WORD *)(v41 + 2 * llroundf(v80));
          __asm { FCVT            S16, H16 }
          v91 = _S19 * _S16;
          _S18 = _S20 * _S16;
          _S16 = _S22 * _S16;
          v94 = (float)((float)(v125 * v87) + (float)(v86 * v127)) + (float)(v88 * v33);
          v95 = (float)((float)(v35 * v87) + (float)(v86 * v34)) + (float)(v88 * v36);
          v96 = (float)((float)(v38 * v87) + (float)(v86 * v37)) + (float)(v88 * v39);
          v97 = (float)(v125 * _S18) + (float)(v91 * v127);
          v98 = (float)(v35 * _S18) + (float)(v91 * v34);
          v99 = (float)(v38 * _S18) + (float)(v91 * v37);
          _S5 = v97 + (float)(_S16 * v33);
          v101 = v98 + (float)(_S16 * v36);
          LOWORD(_S18) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0))];
          v102 = v99 + (float)(_S16 * v39);
          __asm { FCVT            S18, H18 }
          LOWORD(_S16) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v95, 0.0), 8191.0))];
          v104 = llroundf(fminf(fmaxf(v96, 0.0), 8191.0));
          __asm { FCVT            S1, H16 }
          LOWORD(_S16) = *(_WORD *)&result[2 * v104];
          __asm { FCVT            S20, H16 }
          LOWORD(_S5) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0))];
          __asm { FCVT            S16, H5 }
          LOWORD(_S5) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v101, 0.0), 8191.0))];
          __asm { FCVT            S17, H5 }
          v109 = (float)(v30 * _S1) + (float)(v31 * _S18);
          _S6 = _S18 + _S16;
          v111 = _S1 + _S17;
          v112 = (float)(v133 + (float)((float)(_S18 + _S16) * v132)) + (float)(v111 * v131);
          v113 = (float)(v133 + (float)(_S6 * v129)) + (float)(v111 * v128);
          LOWORD(_S6) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v102, 0.0), 8191.0))];
          __asm { FCVT            S19, H6 }
          v115 = v109 + (float)(v55 * _S20);
          v116 = v112 + (float)((float)(_S20 + _S19) * v130);
          v117 = v113 + (float)((float)(_S20 + _S19) * v126);
          if (v116 < v25)
            v118 = v25;
          else
            v118 = v116;
          v119 = v115 + v25;
          if (v116 > v27)
            v118 = v27;
          v120 = llroundf(v118);
          if (v119 < v28)
            v121 = v28;
          else
            v121 = v119;
          *v53 = v120;
          if (v119 > v29)
            v121 = v29;
          v53[1] = llroundf(v121);
          v122 = v27;
          if (v117 <= v27)
          {
            v122 = v117;
            if (v117 < v25)
              v122 = v25;
          }
          v123 = (float)((float)((float)(v30 * _S17) + (float)(v31 * _S16)) + (float)(v55 * _S19)) + v25;
          v53[2] = llroundf(v122);
          v124 = v29;
          if (v123 <= v29)
          {
            v124 = v123;
            if (v123 < v28)
              v124 = v28;
          }
          v53[3] = llroundf(v124);
          if (v52)
          {
            *v52 = v82;
            v52[1] = v83;
            v52 += 2;
          }
          v54 += 32;
          v51 += 2;
          v53 += 4;
        }
        while (v20 > v51);
      }
      v22 += v16;
      v23 = (_WORD *)((char *)v23 + v17);
      ++v13;
    }
    while (v13 != v24);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Mat_TRC_v216(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Mat_TRC_v216_GCD);
  return 0;
}

unint64_t vt_Copy_RGfA_TRC_Mat_TRC_v216_GCD(unint64_t result, uint64_t a2, float a3, float a4, float a5, float a6, float a7)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  _WORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _WORD *v26;
  uint64_t v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  float32x2_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _WORD *v56;
  _WORD *v57;
  uint64_t v58;
  __int16 v59;
  __int16 v60;
  float32x2_t v61;
  float32x2_t v69;
  float32x2_t v73;
  float v77;
  float v78;
  float v80;
  unsigned int v85;
  float v86;
  float v87;
  float v89;
  float v90;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  __int16 v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;

  v7 = *(_QWORD *)(result + 28);
  v8 = *(unsigned __int8 *)result;
  v9 = v7 * a2 / v8;
  v10 = *(_QWORD *)(result + 112);
  v11 = *(_QWORD **)(result + 128);
  v12 = *(_QWORD *)(result + 104) * a2 / v8 + *(_QWORD *)(result + 120);
  v13 = *(uint64_t **)(result + 136);
  v14 = (v7 + v7 * a2) / v8;
  v15 = (_WORD *)v11[1];
  if (v15)
    v15 = (_WORD *)((char *)v15 + 2 * v10 + v13[1] * v12);
  if (v14 != v9)
  {
    v16 = 0;
    v17 = *(_QWORD *)(result + 44);
    v18 = v9 + v17;
    v19 = **(_QWORD **)(result + 64);
    v20 = *v13;
    v21 = *(_QWORD *)(result + 152);
    v22 = *v11 + v20 * v12;
    v23 = *(_QWORD *)(result + 20);
    v24 = v14 + v17;
    v25 = **(_QWORD **)(result + 56) + v19 * v18 + 16 * *(_QWORD *)(result + 36);
    v26 = (_WORD *)(v22 + 2 * v10);
    v27 = v24 - v18;
    LOWORD(a3) = *(_WORD *)(v21 + 144);
    v28 = (float)LODWORD(a3);
    LOWORD(a4) = *(_WORD *)(v21 + 146);
    v29 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v21 + 148);
    v30 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v21 + 150);
    v31 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v21 + 152);
    v32 = (float)LODWORD(a7);
    v33 = *(float *)(v21 + 36);
    v34 = *(float *)(v21 + 40);
    v35 = *(float *)(v21 + 44);
    v103 = *(float *)(v21 + 52) * 0.5;
    v104 = *(float *)(v21 + 48) * 0.5;
    v102 = *(float *)(v21 + 56) * 0.5;
    v36 = *(float *)(v21 + 60) * 0.5;
    v37 = *(float *)(v21 + 64) * 0.5;
    v38 = *(float *)(v21 + 72);
    v39 = *(float *)(v21 + 68) * 0.5;
    v40 = *(float *)(v21 + 76);
    v41 = *(float *)(v21 + 80);
    v42 = *(float *)(v21 + 84);
    v43 = *(float *)(v21 + 88);
    v44 = *(float *)(v21 + 92);
    v45 = *(float *)(v21 + 96);
    v46 = *(float *)(v21 + 100);
    v47 = *(float *)(v21 + 104);
    v48 = v21 + 164;
    v49 = v21 + 16548;
    result = *(unsigned __int8 *)(v21 + 157);
    v50 = *(unsigned __int8 *)(v21 + 156);
    v51 = *(unsigned __int8 *)(v21 + 155);
    v52 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    v53 = *(unsigned __int8 *)(v21 + 154);
    do
    {
      if (v23)
      {
        v54 = 0;
        v55 = v25;
        v56 = v15;
        v57 = v26;
        do
        {
          v58 = v55 + 16;
          if (v56)
          {
            v59 = llroundf(*(float *)(v55 + 4 * result) * 65535.0);
            v60 = llroundf(*(float *)(v58 + 4 * result) * 65535.0);
          }
          else
          {
            v59 = 0;
            v60 = 0;
          }
          v61.i32[0] = *(_DWORD *)(v55 + 4 * v53);
          v61.i32[1] = *(_DWORD *)(v55 + 4 * v51);
          _D11 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v61, v52), 0), v52)));
          _D11.i16[0] = *(_WORD *)(v48 + 2 * _D11.u32[0]);
          __asm { FCVT            S11, H11 }
          _H12 = *(_WORD *)(v48 + 2 * _D11.u32[1]);
          __asm { FCVT            S12, H12 }
          v69.i32[0] = *(_DWORD *)(v55 + 4 * v50);
          v69.i32[1] = *(_DWORD *)(v58 + 4 * v53);
          _D13 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v69, v52), 0), v52)));
          _D13.i16[0] = *(_WORD *)(v48 + 2 * _D13.u32[0]);
          __asm { FCVT            S13, H13 }
          _H14 = *(_WORD *)(v48 + 2 * _D13.u32[1]);
          __asm { FCVT            S14, H14 }
          v73.i32[0] = *(_DWORD *)(v58 + 4 * v51);
          v73.i32[1] = *(_DWORD *)(v58 + 4 * v50);
          _D15 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v73, v52), 0), v52)));
          _D15.i16[0] = *(_WORD *)(v48 + 2 * _D15.u32[0]);
          __asm { FCVT            S15, H15 }
          _S16 = (float)((float)(v40 * _S12) + (float)(*(float *)_D11.i32 * v38)) + (float)(*(float *)_D13.i32 * v41);
          _S17 = (float)((float)(v43 * _S12) + (float)(*(float *)_D11.i32 * v42)) + (float)(*(float *)_D13.i32 * v44);
          *(float *)_D11.i32 = (float)((float)(v46 * _S12) + (float)(*(float *)_D11.i32 * v45))
                             + (float)(*(float *)_D13.i32 * v47);
          v77 = (float)(v40 * *(float *)_D15.i32) + (float)(_S14 * v38);
          *(float *)_D13.i32 = (float)(v43 * *(float *)_D15.i32) + (float)(_S14 * v42);
          v78 = (float)(v46 * *(float *)_D15.i32) + (float)(_S14 * v45);
          _D15.i16[0] = *(_WORD *)(v48 + 2 * _D15.u32[1]);
          __asm { FCVT            S15, H15 }
          _S12 = v77 + (float)(*(float *)_D15.i32 * v41);
          *(float *)_D13.i32 = *(float *)_D13.i32 + (float)(*(float *)_D15.i32 * v44);
          LOWORD(_S16) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(_S16, 0.0), 8191.0)));
          v80 = v78 + (float)(*(float *)_D15.i32 * v47);
          __asm { FCVT            S16, H16 }
          LOWORD(_S17) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(_S17, 0.0), 8191.0)));
          __asm { FCVT            S17, H17 }
          _D11.i16[0] = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(*(float *)_D11.i32, 0.0), 8191.0)));
          __asm { FCVT            S15, H11 }
          _D11.i16[0] = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(_S12, 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          LOWORD(_S12) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(*(float *)_D13.i32, 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          v85 = llroundf(fminf(fmaxf(v80, 0.0), 8191.0));
          v86 = (float)(v34 * _S17) + (float)(v33 * _S16);
          v87 = _S16 + _S11;
          _S17 = _S17 + _S12;
          v89 = (float)(v29 + (float)(v87 * v104)) + (float)(_S17 * v103);
          v90 = (float)(v29 + (float)(v87 * v36)) + (float)(_S17 * v37);
          LOWORD(_S17) = *(_WORD *)(v49 + 2 * v85);
          __asm { FCVT            S13, H17 }
          v92 = v86 + (float)(v35 * *(float *)_D15.i32);
          v93 = v89 + (float)((float)(*(float *)_D15.i32 + _S13) * v102);
          v94 = v90 + (float)((float)(*(float *)_D15.i32 + _S13) * v39);
          if (v93 < v28)
            v95 = v28;
          else
            v95 = v93;
          v96 = v92 + v28;
          if (v93 > v30)
            v95 = v30;
          v97 = llroundf(v95);
          if (v96 < v31)
            v98 = v31;
          else
            v98 = v96;
          *v57 = v97;
          if (v96 > v32)
            v98 = v32;
          v57[1] = llroundf(v98);
          v99 = v30;
          if (v94 <= v30)
          {
            v99 = v94;
            if (v94 < v28)
              v99 = v28;
          }
          v100 = (float)((float)((float)(v34 * _S12) + (float)(v33 * _S11)) + (float)(v35 * _S13)) + v28;
          v57[2] = llroundf(v99);
          v101 = v32;
          if (v100 <= v32)
          {
            v101 = v100;
            if (v100 < v31)
              v101 = v31;
          }
          v57[3] = llroundf(v101);
          if (v56)
          {
            *v56 = v59;
            v56[1] = v60;
            v56 += 2;
          }
          v55 += 32;
          v54 += 2;
          v57 += 4;
        }
        while (v23 > v54);
      }
      v25 += v19;
      v26 = (_WORD *)((char *)v26 + v20);
      ++v16;
    }
    while (v16 != v27);
  }
  return result;
}

uint64_t vt_Copy_RGfA_rgb_v216(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_rgb_v216_GCD);
  return 0;
}

unint64_t vt_Copy_RGfA_rgb_v216_GCD(unint64_t result, uint64_t a2, double a3, float a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  _WORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _WORD *v27;
  uint64_t v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _WORD *v49;
  _WORD *v50;
  uint64_t v51;
  __int16 v52;
  __int16 v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;

  v8 = *(_QWORD *)(result + 28);
  v9 = *(unsigned __int8 *)result;
  v10 = v8 * a2 / v9;
  v11 = *(_QWORD *)(result + 112);
  v12 = *(_QWORD **)(result + 128);
  v13 = *(_QWORD *)(result + 104) * a2 / v9 + *(_QWORD *)(result + 120);
  v14 = *(uint64_t **)(result + 136);
  v15 = (v8 + v8 * a2) / v9;
  v16 = (_WORD *)v12[1];
  if (v16)
    v16 = (_WORD *)((char *)v16 + 2 * v11 + v14[1] * v13);
  if (v15 != v10)
  {
    v17 = 0;
    v18 = *(_QWORD *)(result + 44);
    v19 = v10 + v18;
    v20 = **(_QWORD **)(result + 64);
    v21 = *v14;
    v22 = *v12 + v21 * v13;
    v23 = *(_QWORD *)(result + 152);
    v24 = *(_QWORD *)(result + 20);
    v25 = v15 + v18;
    v26 = **(_QWORD **)(result + 56) + v20 * v19 + 16 * *(_QWORD *)(result + 36);
    v27 = (_WORD *)(v22 + 2 * v11);
    v28 = v25 - v19;
    v29 = (float)*(unsigned int *)(v23 + 136);
    LOWORD(a4) = *(_WORD *)(v23 + 144);
    v30 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v23 + 146);
    v31 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v23 + 148);
    v32 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v23 + 150);
    v33 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v23 + 152);
    v34 = (float)LODWORD(a8);
    v35 = *(float *)(v23 + 36);
    v36 = *(float *)(v23 + 40);
    v37 = *(float *)(v23 + 44);
    v38 = *(float *)(v23 + 48) * 0.5;
    v39 = *(float *)(v23 + 52) * 0.5;
    v40 = *(float *)(v23 + 56) * 0.5;
    v41 = *(float *)(v23 + 60) * 0.5;
    v42 = *(float *)(v23 + 64) * 0.5;
    v43 = *(float *)(v23 + 68) * 0.5;
    v44 = *(unsigned __int8 *)(v23 + 157);
    v45 = *(unsigned __int8 *)(v23 + 156);
    result = *(unsigned __int8 *)(v23 + 155);
    v46 = *(unsigned __int8 *)(v23 + 154);
    do
    {
      if (v24)
      {
        v47 = 0;
        v48 = v26;
        v49 = v16;
        v50 = v27;
        do
        {
          v51 = v48 + 16;
          if (v49)
          {
            v52 = llroundf(*(float *)(v48 + 4 * v44) * 65535.0);
            v53 = llroundf(*(float *)(v51 + 4 * v44) * 65535.0);
          }
          else
          {
            v52 = 0;
            v53 = 0;
          }
          v54 = *(float *)(v48 + 4 * v46) * v29;
          v55 = *(float *)(v48 + 4 * result) * v29;
          v56 = *(float *)(v48 + 4 * v45) * v29;
          v57 = *(float *)(v51 + 4 * v46) * v29;
          v58 = *(float *)(v51 + 4 * result) * v29;
          v59 = *(float *)(v51 + 4 * v45) * v29;
          v60 = (float)((float)((float)(v36 * v55) + (float)(v35 * v54)) + (float)(v37 * v56)) + v30;
          v61 = v54 + v57;
          v62 = v55 + v58;
          v63 = v56 + v59;
          v64 = (float)((float)(v31 + (float)(v61 * v38)) + (float)(v62 * v39)) + (float)(v63 * v40);
          v65 = (float)((float)(v31 + (float)(v61 * v41)) + (float)(v62 * v42)) + (float)(v63 * v43);
          if (v64 < v30)
            v66 = v30;
          else
            v66 = v64;
          if (v64 > v32)
            v66 = v32;
          *v50 = llroundf(v66);
          if (v60 < v33)
            v67 = v33;
          else
            v67 = v60;
          if (v60 > v34)
            v67 = v34;
          v50[1] = llroundf(v67);
          v68 = v32;
          if (v65 <= v32)
          {
            v68 = v65;
            if (v65 < v30)
              v68 = v30;
          }
          v69 = (float)((float)((float)(v36 * v58) + (float)(v35 * v57)) + (float)(v37 * v59)) + v30;
          v50[2] = llroundf(v68);
          v70 = v34;
          if (v69 <= v34)
          {
            v70 = v69;
            if (v69 < v33)
              v70 = v33;
          }
          v50[3] = llroundf(v70);
          if (v49)
          {
            *v49 = v52;
            v49[1] = v53;
            v49 += 2;
          }
          v48 += 32;
          v47 += 2;
          v50 += 4;
        }
        while (v24 > v47);
      }
      v26 += v20;
      v27 = (_WORD *)((char *)v27 + v21);
      ++v17;
    }
    while (v17 != v28);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Tone_Mat_TRC_444vf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Tone_Mat_TRC_444vf_GCD);
  return 0;
}

unint64_t vt_Copy_RGfA_TRC_Tone_Mat_TRC_444vf_GCD(unint64_t result, uint64_t a2, float a3, float a4, float a5, float a6, float a7)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  float v45;
  float v46;
  float v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  _BYTE *v60;
  uint64_t v61;
  float32x2_t v62;
  uint64_t v63;
  _BYTE *v64;
  _BYTE *v65;
  _BYTE *v66;
  uint64_t v67;
  float32x2_t v68;
  float v77;
  float v78;
  float v79;
  float v83;
  float v84;
  float v85;
  float v86;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;

  v7 = *(_QWORD *)(result + 28);
  v8 = *(unsigned __int8 *)result;
  v9 = v7 * a2 / v8;
  v10 = (v7 + v7 * a2) / v8;
  if (v10 != v9)
  {
    v11 = 0;
    v12 = *(_QWORD *)(result + 20);
    v13 = v9 + *(_QWORD *)(result + 44);
    v14 = v10 - v9;
    v15 = *(_QWORD *)(result + 152);
    v16 = *(uint64_t **)(result + 136);
    v17 = *(_QWORD **)(result + 56);
    v18 = **(_QWORD **)(result + 64);
    v19 = *v16;
    v20 = v16[1];
    v21 = v16[2];
    LOWORD(a3) = *(_WORD *)(v15 + 144);
    v22 = (float)LODWORD(a3);
    LOWORD(a4) = *(_WORD *)(v15 + 146);
    v23 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v15 + 148);
    v24 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v15 + 150);
    v25 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v15 + 152);
    v26 = (float)LODWORD(a7);
    v27 = *(float *)(v15 + 36);
    v28 = *(float *)(v15 + 40);
    v29 = *(float *)(v15 + 44);
    v101 = *(float *)(v15 + 48);
    v100 = *(float *)(v15 + 52);
    v99 = *(float *)(v15 + 56);
    v30 = *(float *)(v15 + 64);
    v98 = *(float *)(v15 + 60);
    v31 = *(float *)(v15 + 68);
    v32 = *(float *)(v15 + 72);
    v33 = *(float *)(v15 + 76);
    v34 = *(float *)(v15 + 80);
    v35 = *(float *)(v15 + 84);
    v36 = *(float *)(v15 + 88);
    v37 = *(float *)(v15 + 92);
    v38 = *(float *)(v15 + 96);
    v39 = *(float *)(v15 + 100);
    v40 = *(float *)(v15 + 104);
    v41 = v15 + 164;
    v42 = v15 + 16548;
    v43 = v15 + 32932;
    v45 = *(float *)(v15 + 108);
    v44 = *(float *)(v15 + 112);
    v46 = *(float *)(v15 + 116);
    v47 = *(float *)(v15 + 120);
    v48 = *(uint64_t **)(result + 128);
    v49 = *(_QWORD *)(result + 112);
    v50 = *(_QWORD *)(result + 104) * a2 / v8 + *(_QWORD *)(result + 120);
    v51 = *(_QWORD *)(result + 36);
    result = *(unsigned __int8 *)(v15 + 157);
    v52 = *(unsigned __int8 *)(v15 + 156);
    v53 = *(unsigned __int8 *)(v15 + 155);
    v54 = *(unsigned __int8 *)(v15 + 154);
    v55 = v48[2];
    if (v55)
      v56 = (_BYTE *)(v55 + v50 * v21 + v49);
    else
      v56 = 0;
    v58 = *v48;
    v57 = v48[1];
    v59 = (_BYTE *)(v57 + v50 * v20 + v49);
    if (!v57)
      v59 = 0;
    v60 = (_BYTE *)(v58 + v50 * v19 + v49);
    v61 = *v17 + v18 * v13 + 16 * v51;
    v62 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v12)
      {
        v63 = v12;
        v64 = v56;
        v65 = v59;
        v66 = v60;
        v67 = v61;
        do
        {
          v68.i32[0] = *(_DWORD *)(v67 + 4 * v54);
          v68.i32[1] = *(_DWORD *)(v67 + 4 * v53);
          _D4 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v68, v62), 0), v62)));
          _D4.i16[0] = *(_WORD *)(v41 + 2 * _D4.u32[0]);
          __asm { FCVT            S16, H4 }
          _D4.i16[0] = *(_WORD *)(v41 + 2 * _D4.u32[1]);
          __asm { FCVT            S17, H4 }
          _D4.i16[0] = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(*(float *)(v67 + 4 * v52) * 8191.0, 0.0), 8191.0)));
          __asm { FCVT            S13, H4 }
          v77 = fmaxf(_S16, fmaxf(_S17, _S13));
          v78 = (float)((float)((float)(v44 * _S17) + (float)(v45 * _S16)) + (float)(v46 * _S13)) + (float)(v47 * v77);
          v79 = 8191.0;
          if (v78 <= 8191.0)
          {
            v79 = (float)((float)((float)(v44 * _S17) + (float)(v45 * _S16)) + (float)(v46 * _S13)) + (float)(v47 * v77);
            if (v78 < 0.0)
              v79 = 0.0;
          }
          _H4 = *(_WORD *)(v42 + 2 * llroundf(v79));
          __asm { FCVT            S4, H4 }
          _S16 = _S16 * _S4;
          v83 = _S17 * _S4;
          v84 = _S13 * _S4;
          v85 = (float)((float)(v33 * v83) + (float)(_S16 * v32)) + (float)(v84 * v34);
          v86 = (float)((float)(v36 * v83) + (float)(_S16 * v35)) + (float)(v84 * v37);
          _S4 = (float)((float)(v39 * v83) + (float)(_S16 * v38)) + (float)(v84 * v40);
          LOWORD(_S16) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          __asm { FCVT            S13, H16 }
          LOWORD(_S16) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          __asm { FCVT            S16, H16 }
          LOWORD(_S4) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(_S4, 0.0), 8191.0)));
          __asm { FCVT            S17, H4 }
          v91 = (float)((float)((float)(v28 * _S16) + (float)(v27 * _S13)) + (float)(v29 * _S17)) + v22;
          v92 = v24;
          if (v91 <= v24)
          {
            v92 = (float)((float)((float)(v28 * _S16) + (float)(v27 * _S13)) + (float)(v29 * _S17)) + v22;
            if (v91 < v22)
              v92 = v22;
          }
          v93 = *(float *)(v67 + 4 * result);
          *v66++ = llroundf(v92);
          if (v65)
          {
            v94 = (float)((float)(v23 + (float)(_S13 * v101)) + (float)(_S16 * v100)) + (float)(_S17 * v99);
            v95 = v26;
            if (v94 <= v26)
            {
              v95 = (float)((float)(v23 + (float)(_S13 * v101)) + (float)(_S16 * v100)) + (float)(_S17 * v99);
              if (v94 < v25)
                v95 = v25;
            }
            v96 = (float)((float)(v23 + (float)(_S13 * v98)) + (float)(_S16 * v30)) + (float)(_S17 * v31);
            *v65 = llroundf(v95);
            v97 = v26;
            if (v96 <= v26)
            {
              v97 = v96;
              if (v96 < v25)
                v97 = v25;
            }
            v65[1] = llroundf(v97);
            v65 += 2;
          }
          if (v64)
            *v64++ = llroundf(v93 * 255.0);
          v67 += 16;
          --v63;
        }
        while (v63);
      }
      v61 += v18;
      v60 += v19;
      v59 += v20;
      v56 += v21;
      ++v11;
    }
    while (v11 != v14);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Mat_TRC_444vf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Mat_TRC_444vf_GCD);
  return 0;
}

unint64_t vt_Copy_RGfA_TRC_Mat_TRC_444vf_GCD(unint64_t result, uint64_t a2, float a3, float a4, float a5, float a6, float a7)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  _BYTE *v59;
  uint64_t v60;
  float32x2_t v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  _BYTE *v65;
  _BYTE *v66;
  float32x2_t v67;
  float v77;
  float v78;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;

  v7 = *(_QWORD *)(result + 28);
  v8 = *(unsigned __int8 *)result;
  v9 = v7 * a2 / v8;
  v10 = (v7 + v7 * a2) / v8;
  if (v10 != v9)
  {
    v11 = 0;
    v12 = *(_QWORD *)(result + 20);
    v13 = v9 + *(_QWORD *)(result + 44);
    v14 = v10 - v9;
    v15 = *(_QWORD *)(result + 152);
    v16 = *(uint64_t **)(result + 136);
    v17 = *(_QWORD **)(result + 56);
    v18 = **(_QWORD **)(result + 64);
    v19 = *v16;
    v20 = v16[1];
    v21 = v16[2];
    LOWORD(a3) = *(_WORD *)(v15 + 144);
    v22 = (float)LODWORD(a3);
    LOWORD(a4) = *(_WORD *)(v15 + 146);
    v23 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v15 + 148);
    v24 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v15 + 150);
    v25 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v15 + 152);
    v26 = (float)LODWORD(a7);
    v27 = *(float *)(v15 + 36);
    v28 = *(float *)(v15 + 40);
    v29 = *(float *)(v15 + 44);
    v30 = *(float *)(v15 + 48);
    v31 = *(float *)(v15 + 52);
    v32 = *(float *)(v15 + 56);
    v33 = *(float *)(v15 + 60);
    v34 = *(float *)(v15 + 64);
    v35 = *(float *)(v15 + 68);
    v36 = *(float *)(v15 + 72);
    v37 = *(float *)(v15 + 76);
    v38 = *(float *)(v15 + 80);
    v39 = *(float *)(v15 + 84);
    v40 = *(float *)(v15 + 88);
    v41 = *(float *)(v15 + 92);
    v42 = *(float *)(v15 + 96);
    v43 = *(float *)(v15 + 100);
    v44 = *(float *)(v15 + 104);
    v45 = v15 + 164;
    v46 = v15 + 16548;
    v47 = *(uint64_t **)(result + 128);
    v48 = *(_QWORD *)(result + 112);
    v49 = *(_QWORD *)(result + 104) * a2 / v8 + *(_QWORD *)(result + 120);
    v50 = *(_QWORD *)(result + 36);
    v51 = *(unsigned __int8 *)(v15 + 157);
    result = *(unsigned __int8 *)(v15 + 156);
    v52 = *(unsigned __int8 *)(v15 + 155);
    v53 = *(unsigned __int8 *)(v15 + 154);
    v54 = v47[2];
    if (v54)
      v55 = (_BYTE *)(v54 + v49 * v21 + v48);
    else
      v55 = 0;
    v57 = *v47;
    v56 = v47[1];
    v58 = (_BYTE *)(v56 + v49 * v20 + v48);
    if (!v56)
      v58 = 0;
    v59 = (_BYTE *)(v57 + v49 * v19 + v48);
    v60 = *v17 + v18 * v13 + 16 * v50;
    v61 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v12)
      {
        v62 = v12;
        v63 = v60;
        v64 = v55;
        v65 = v58;
        v66 = v59;
        do
        {
          v67.i32[0] = *(_DWORD *)(v63 + 4 * v53);
          v67.i32[1] = *(_DWORD *)(v63 + 4 * v52);
          _D4 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v67, v61), 0), v61)));
          _D4.i16[0] = *(_WORD *)(v45 + 2 * _D4.u32[0]);
          __asm { FCVT            S4, H4 }
          _H12 = *(_WORD *)(v45 + 2 * _D4.u32[1]);
          __asm { FCVT            S12, H12 }
          _H11 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(*(float *)(v63 + 4 * result) * 8191.0, 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          v77 = (float)((float)(v37 * _S12) + (float)(*(float *)_D4.i32 * v36)) + (float)(_S11 * v38);
          v78 = (float)((float)(v40 * _S12) + (float)(*(float *)_D4.i32 * v39)) + (float)(_S11 * v41);
          *(float *)_D4.i32 = (float)((float)(v43 * _S12) + (float)(*(float *)_D4.i32 * v42)) + (float)(_S11 * v44);
          LOWORD(_S11) = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          __asm { FCVT            S12, H11 }
          LOWORD(_S11) = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          __asm { FCVT            S13, H11 }
          _D4.i16[0] = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(*(float *)_D4.i32, 0.0), 8191.0)));
          __asm { FCVT            S14, H4 }
          v82 = (float)((float)((float)(v28 * _S13) + (float)(v27 * _S12)) + (float)(v29 * _S14)) + v22;
          v83 = v24;
          if (v82 <= v24)
          {
            v83 = (float)((float)((float)(v28 * _S13) + (float)(v27 * _S12)) + (float)(v29 * _S14)) + v22;
            if (v82 < v22)
              v83 = v22;
          }
          v84 = *(float *)(v63 + 4 * v51);
          *v66++ = llroundf(v83);
          if (v65)
          {
            v85 = (float)((float)(v23 + (float)(_S12 * v30)) + (float)(_S13 * v31)) + (float)(_S14 * v32);
            v86 = v26;
            if (v85 <= v26)
            {
              v86 = (float)((float)(v23 + (float)(_S12 * v30)) + (float)(_S13 * v31)) + (float)(_S14 * v32);
              if (v85 < v25)
                v86 = v25;
            }
            v87 = (float)((float)(v23 + (float)(_S12 * v33)) + (float)(_S13 * v34)) + (float)(_S14 * v35);
            *v65 = llroundf(v86);
            v88 = v26;
            if (v87 <= v26)
            {
              v88 = v87;
              if (v87 < v25)
                v88 = v25;
            }
            v65[1] = llroundf(v88);
            v65 += 2;
          }
          if (v64)
            *v64++ = llroundf(v84 * 255.0);
          v63 += 16;
          --v62;
        }
        while (v62);
      }
      v60 += v18;
      v59 += v19;
      v58 += v20;
      v55 += v21;
      ++v11;
    }
    while (v11 != v14);
  }
  return result;
}

uint64_t vt_Copy_RGfA_rgb_444vf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_rgb_444vf_GCD);
  return 0;
}

unint64_t vt_Copy_RGfA_rgb_444vf_GCD(unint64_t result, uint64_t a2, double a3, float a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  BOOL v50;
  _BYTE *v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  _BYTE *v57;
  _BYTE *v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;

  v8 = *(_QWORD *)(result + 28);
  v9 = *(unsigned __int8 *)result;
  v10 = v8 * a2 / v9;
  v11 = (v8 + v8 * a2) / v9;
  if (v11 != v10)
  {
    v12 = 0;
    v13 = *(_QWORD *)(result + 20);
    v14 = v10 + *(_QWORD *)(result + 44);
    v15 = v11 - v10;
    v16 = *(_QWORD *)(result + 152);
    v17 = *(uint64_t **)(result + 136);
    v18 = *(_QWORD **)(result + 56);
    v19 = **(_QWORD **)(result + 64);
    v20 = *v17;
    v21 = v17[1];
    v22 = v17[2];
    v23 = (float)*(unsigned int *)(v16 + 136);
    LOWORD(a4) = *(_WORD *)(v16 + 144);
    v24 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v16 + 146);
    v25 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v16 + 148);
    v26 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v16 + 150);
    v27 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v16 + 152);
    v28 = (float)LODWORD(a8);
    v29 = *(float *)(v16 + 36);
    v30 = *(float *)(v16 + 40);
    v31 = *(float *)(v16 + 44);
    v32 = *(float *)(v16 + 48);
    v33 = *(float *)(v16 + 52);
    v34 = *(float *)(v16 + 56);
    v35 = *(float *)(v16 + 60);
    v36 = *(float *)(v16 + 64);
    v37 = *(float *)(v16 + 68);
    v38 = *(_QWORD **)(result + 128);
    v39 = *(_QWORD *)(result + 112);
    v40 = *(_QWORD *)(result + 104) * a2 / v9 + *(_QWORD *)(result + 120);
    v41 = *(_QWORD *)(result + 36);
    v42 = *(unsigned __int8 *)(v16 + 157);
    v43 = *(unsigned __int8 *)(v16 + 156);
    v44 = *(unsigned __int8 *)(v16 + 155);
    result = *(unsigned __int8 *)(v16 + 154);
    v45 = v38[2];
    if (v45)
      v46 = (_BYTE *)(v45 + v40 * v22 + v39);
    else
      v46 = 0;
    v49 = v38;
    v48 = *v38;
    v47 = v49[1];
    v50 = v47 == 0;
    v51 = (_BYTE *)(v47 + v40 * v21 + v39);
    if (v50)
      v51 = 0;
    v52 = (_BYTE *)(v48 + v40 * v20 + v39);
    v53 = *v18 + v19 * v14 + 16 * v41;
    do
    {
      if (v13)
      {
        v54 = v13;
        v55 = v53;
        v56 = v46;
        v57 = v51;
        v58 = v52;
        do
        {
          v59 = *(float *)(v55 + 4 * result) * v23;
          v60 = *(float *)(v55 + 4 * v44) * v23;
          v61 = *(float *)(v55 + 4 * v43) * v23;
          v62 = (float)((float)((float)(v30 * v60) + (float)(v29 * v59)) + (float)(v31 * v61)) + v24;
          v63 = v26;
          if (v62 <= v26)
          {
            v63 = (float)((float)((float)(v30 * v60) + (float)(v29 * v59)) + (float)(v31 * v61)) + v24;
            if (v62 < v24)
              v63 = v24;
          }
          v64 = *(float *)(v55 + 4 * v42);
          *v58++ = llroundf(v63);
          if (v57)
          {
            v65 = (float)((float)(v25 + (float)(v59 * v32)) + (float)(v60 * v33)) + (float)(v61 * v34);
            v66 = v28;
            if (v65 <= v28)
            {
              v66 = (float)((float)(v25 + (float)(v59 * v32)) + (float)(v60 * v33)) + (float)(v61 * v34);
              if (v65 < v27)
                v66 = v27;
            }
            v67 = (float)((float)(v25 + (float)(v59 * v35)) + (float)(v60 * v36)) + (float)(v61 * v37);
            *v57 = llroundf(v66);
            v68 = v28;
            if (v67 <= v28)
            {
              v68 = v67;
              if (v67 < v27)
                v68 = v27;
            }
            v57[1] = llroundf(v68);
            v57 += 2;
          }
          if (v56)
            *v56++ = llroundf(v64 * 255.0);
          v55 += 16;
          --v54;
        }
        while (v54);
      }
      v53 += v19;
      v52 += v20;
      v51 += v21;
      v46 += v22;
      ++v12;
    }
    while (v12 != v15);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Tone_Mat_TRC_xf444(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Tone_Mat_TRC_xf444_GCD);
  return 0;
}

unint64_t vt_Copy_RGfA_TRC_Tone_Mat_TRC_xf444_GCD(unint64_t result, uint64_t a2, float a3, float a4, float a5, float a6, float a7)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  float v45;
  float v46;
  float v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unsigned int v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  float32x2_t v65;
  uint64_t v66;
  _WORD *v67;
  _WORD *v68;
  _WORD *v69;
  uint64_t v70;
  float32x2_t v71;
  float v80;
  float v81;
  float v82;
  float v86;
  float v87;
  float v88;
  float v89;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;

  v7 = *(_QWORD *)(result + 28);
  v8 = *(unsigned __int8 *)result;
  v9 = v7 * a2 / v8;
  v10 = (v7 + v7 * a2) / v8;
  if (v10 != v9)
  {
    v11 = 0;
    v12 = *(_QWORD *)(result + 20);
    v13 = v9 + *(_QWORD *)(result + 44);
    v14 = v10 - v9;
    v15 = *(_QWORD *)(result + 152);
    v16 = *(uint64_t **)(result + 136);
    v17 = *(_QWORD **)(result + 56);
    v18 = **(_QWORD **)(result + 64);
    v19 = *v16;
    v20 = v16[1];
    v21 = v16[2];
    LOWORD(a3) = *(_WORD *)(v15 + 144);
    v22 = (float)LODWORD(a3);
    LOWORD(a4) = *(_WORD *)(v15 + 146);
    v23 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v15 + 148);
    v24 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v15 + 150);
    v25 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v15 + 152);
    v26 = (float)LODWORD(a7);
    v27 = *(float *)(v15 + 36);
    v28 = *(float *)(v15 + 40);
    v29 = *(float *)(v15 + 44);
    v104 = *(float *)(v15 + 48);
    v103 = *(float *)(v15 + 52);
    v102 = *(float *)(v15 + 56);
    v30 = *(float *)(v15 + 64);
    v101 = *(float *)(v15 + 60);
    v31 = *(float *)(v15 + 68);
    v32 = *(float *)(v15 + 72);
    v33 = *(float *)(v15 + 76);
    v34 = *(float *)(v15 + 80);
    v35 = *(float *)(v15 + 84);
    v36 = *(float *)(v15 + 88);
    v37 = *(float *)(v15 + 92);
    v38 = *(float *)(v15 + 96);
    v39 = *(float *)(v15 + 100);
    v40 = *(float *)(v15 + 104);
    v41 = v15 + 164;
    v42 = v15 + 16548;
    v43 = v15 + 32932;
    v45 = *(float *)(v15 + 108);
    v44 = *(float *)(v15 + 112);
    v46 = *(float *)(v15 + 116);
    v47 = *(float *)(v15 + 120);
    v48 = *(uint64_t **)(result + 128);
    v49 = *(_QWORD *)(result + 112);
    v50 = *(_QWORD *)(result + 104) * a2 / v8 + *(_QWORD *)(result + 120);
    v51 = *(_QWORD *)(result + 36);
    v52 = *(unsigned __int8 *)(v15 + 132);
    if (v52 >= 0x11)
      v53 = 0;
    else
      v53 = 16 - v52;
    result = *(unsigned __int8 *)(v15 + 157);
    v54 = *(unsigned __int8 *)(v15 + 156);
    v55 = *(unsigned __int8 *)(v15 + 155);
    v56 = *(unsigned __int8 *)(v15 + 154);
    v57 = v48[2];
    if (v57)
      v58 = v57 + v50 * v21 + 2 * v49;
    else
      v58 = 0;
    v60 = *v48;
    v59 = v48[1];
    v61 = v59 + v50 * v20 + 2 * v49;
    if (!v59)
      v61 = 0;
    v62 = v60 + v50 * v19 + 2 * v49;
    v63 = *v17 + v18 * v13 + 16 * v51;
    v64 = v53;
    v65 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v12)
      {
        v66 = v12;
        v67 = (_WORD *)v58;
        v68 = (_WORD *)v61;
        v69 = (_WORD *)v62;
        v70 = v63;
        do
        {
          v71.i32[0] = *(_DWORD *)(v70 + 4 * v56);
          v71.i32[1] = *(_DWORD *)(v70 + 4 * v55);
          _D4 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v71, v65), 0), v65)));
          _D4.i16[0] = *(_WORD *)(v41 + 2 * _D4.u32[0]);
          __asm { FCVT            S16, H4 }
          _D4.i16[0] = *(_WORD *)(v41 + 2 * _D4.u32[1]);
          __asm { FCVT            S17, H4 }
          _D4.i16[0] = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(*(float *)(v70 + 4 * v54) * 8191.0, 0.0), 8191.0)));
          __asm { FCVT            S13, H4 }
          v80 = fmaxf(_S16, fmaxf(_S17, _S13));
          v81 = (float)((float)((float)(v44 * _S17) + (float)(v45 * _S16)) + (float)(v46 * _S13)) + (float)(v47 * v80);
          v82 = 8191.0;
          if (v81 <= 8191.0)
          {
            v82 = (float)((float)((float)(v44 * _S17) + (float)(v45 * _S16)) + (float)(v46 * _S13)) + (float)(v47 * v80);
            if (v81 < 0.0)
              v82 = 0.0;
          }
          _H4 = *(_WORD *)(v42 + 2 * llroundf(v82));
          __asm { FCVT            S4, H4 }
          _S16 = _S16 * _S4;
          v86 = _S17 * _S4;
          v87 = _S13 * _S4;
          v88 = (float)((float)(v33 * v86) + (float)(_S16 * v32)) + (float)(v87 * v34);
          v89 = (float)((float)(v36 * v86) + (float)(_S16 * v35)) + (float)(v87 * v37);
          _S4 = (float)((float)(v39 * v86) + (float)(_S16 * v38)) + (float)(v87 * v40);
          LOWORD(_S16) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          __asm { FCVT            S13, H16 }
          LOWORD(_S16) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          __asm { FCVT            S16, H16 }
          LOWORD(_S4) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(_S4, 0.0), 8191.0)));
          __asm { FCVT            S17, H4 }
          v94 = (float)((float)((float)(v28 * _S16) + (float)(v27 * _S13)) + (float)(v29 * _S17)) + v22;
          v95 = v24;
          if (v94 <= v24)
          {
            v95 = (float)((float)((float)(v28 * _S16) + (float)(v27 * _S13)) + (float)(v29 * _S17)) + v22;
            if (v94 < v22)
              v95 = v22;
          }
          v96 = *(float *)(v70 + 4 * result);
          *v69++ = llroundf(v95) << v64;
          if (v68)
          {
            v97 = (float)((float)(v23 + (float)(_S13 * v104)) + (float)(_S16 * v103)) + (float)(_S17 * v102);
            v98 = v26;
            if (v97 <= v26)
            {
              v98 = (float)((float)(v23 + (float)(_S13 * v104)) + (float)(_S16 * v103)) + (float)(_S17 * v102);
              if (v97 < v25)
                v98 = v25;
            }
            v99 = (float)((float)(v23 + (float)(_S13 * v101)) + (float)(_S16 * v30)) + (float)(_S17 * v31);
            *v68 = llroundf(v98) << v64;
            v100 = v26;
            if (v99 <= v26)
            {
              v100 = v99;
              if (v99 < v25)
                v100 = v25;
            }
            v68[1] = llroundf(v100) << v64;
            v68 += 2;
          }
          if (v67)
            *v67++ = llroundf(v96 * 65535.0);
          v70 += 16;
          --v66;
        }
        while (v66);
      }
      v63 += v18;
      v62 += v19;
      v61 += v20;
      v58 += v21;
      ++v11;
    }
    while (v11 != v14);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Mat_TRC_xf444(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Mat_TRC_xf444_GCD);
  return 0;
}

unint64_t vt_Copy_RGfA_TRC_Mat_TRC_xf444_GCD(unint64_t result, uint64_t a2, float a3, float a4, float a5, float a6, float a7)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unsigned int v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  float32x2_t v63;
  uint64_t v64;
  uint64_t v65;
  _WORD *v66;
  _WORD *v67;
  _WORD *v68;
  float32x2_t v69;
  float v79;
  float v80;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;

  v7 = *(_QWORD *)(result + 28);
  v8 = *(unsigned __int8 *)result;
  v9 = v7 * a2 / v8;
  v10 = (v7 + v7 * a2) / v8;
  if (v10 != v9)
  {
    v11 = 0;
    v12 = *(_QWORD *)(result + 20);
    v13 = v9 + *(_QWORD *)(result + 44);
    v14 = v10 - v9;
    v15 = *(_QWORD *)(result + 152);
    v16 = *(uint64_t **)(result + 136);
    v17 = *(_QWORD **)(result + 56);
    v18 = **(_QWORD **)(result + 64);
    v19 = *v16;
    v20 = v16[1];
    v21 = v16[2];
    LOWORD(a3) = *(_WORD *)(v15 + 144);
    v22 = (float)LODWORD(a3);
    LOWORD(a4) = *(_WORD *)(v15 + 146);
    v23 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v15 + 148);
    v24 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v15 + 150);
    v25 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v15 + 152);
    v26 = (float)LODWORD(a7);
    v27 = *(float *)(v15 + 36);
    v28 = *(float *)(v15 + 40);
    v29 = *(float *)(v15 + 44);
    v91 = *(float *)(v15 + 48);
    v30 = *(float *)(v15 + 52);
    v31 = *(float *)(v15 + 56);
    v32 = *(float *)(v15 + 60);
    v33 = *(float *)(v15 + 64);
    v34 = *(float *)(v15 + 68);
    v35 = *(float *)(v15 + 72);
    v36 = *(float *)(v15 + 76);
    v37 = *(float *)(v15 + 80);
    v38 = *(float *)(v15 + 84);
    v39 = *(float *)(v15 + 88);
    v40 = *(float *)(v15 + 92);
    v41 = *(float *)(v15 + 96);
    v42 = *(float *)(v15 + 100);
    v43 = *(float *)(v15 + 104);
    v44 = v15 + 164;
    v45 = v15 + 16548;
    v46 = *(uint64_t **)(result + 128);
    v47 = *(_QWORD *)(result + 112);
    v48 = *(_QWORD *)(result + 104) * a2 / v8 + *(_QWORD *)(result + 120);
    v49 = *(_QWORD *)(result + 36);
    v50 = *(unsigned __int8 *)(v15 + 132);
    if (v50 >= 0x11)
      v51 = 0;
    else
      v51 = 16 - v50;
    v52 = *(unsigned __int8 *)(v15 + 157);
    result = *(unsigned __int8 *)(v15 + 156);
    v53 = *(unsigned __int8 *)(v15 + 155);
    v54 = *(unsigned __int8 *)(v15 + 154);
    v55 = v46[2];
    if (v55)
      v56 = v55 + v48 * v21 + 2 * v47;
    else
      v56 = 0;
    v58 = *v46;
    v57 = v46[1];
    v59 = v57 + v48 * v20 + 2 * v47;
    if (!v57)
      v59 = 0;
    v60 = v58 + v48 * v19 + 2 * v47;
    v61 = *v17 + v18 * v13 + 16 * v49;
    v62 = v51;
    v63 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v12)
      {
        v64 = v12;
        v65 = v61;
        v66 = (_WORD *)v56;
        v67 = (_WORD *)v59;
        v68 = (_WORD *)v60;
        do
        {
          v69.i32[0] = *(_DWORD *)(v65 + 4 * v54);
          v69.i32[1] = *(_DWORD *)(v65 + 4 * v53);
          _D4 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v69, v63), 0), v63)));
          _D4.i16[0] = *(_WORD *)(v44 + 2 * _D4.u32[0]);
          __asm { FCVT            S4, H4 }
          _H12 = *(_WORD *)(v44 + 2 * _D4.u32[1]);
          __asm { FCVT            S12, H12 }
          _H9 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(*(float *)(v65 + 4 * result) * 8191.0, 0.0), 8191.0)));
          __asm { FCVT            S9, H9 }
          v79 = (float)((float)(v36 * _S12) + (float)(*(float *)_D4.i32 * v35)) + (float)(_S9 * v37);
          v80 = (float)((float)(v39 * _S12) + (float)(*(float *)_D4.i32 * v38)) + (float)(_S9 * v40);
          *(float *)_D4.i32 = (float)((float)(v42 * _S12) + (float)(*(float *)_D4.i32 * v41)) + (float)(_S9 * v43);
          LOWORD(_S9) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          __asm { FCVT            S13, H9 }
          LOWORD(_S9) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S14, H9 }
          _D4.i16[0] = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(*(float *)_D4.i32, 0.0), 8191.0)));
          __asm { FCVT            S15, H4 }
          v84 = (float)((float)((float)(v28 * _S14) + (float)(v27 * _S13)) + (float)(v29 * _S15)) + v22;
          v85 = v24;
          if (v84 <= v24)
          {
            v85 = (float)((float)((float)(v28 * _S14) + (float)(v27 * _S13)) + (float)(v29 * _S15)) + v22;
            if (v84 < v22)
              v85 = v22;
          }
          v86 = *(float *)(v65 + 4 * v52);
          *v68++ = llroundf(v85) << v62;
          if (v67)
          {
            v87 = (float)((float)(v23 + (float)(_S13 * v91)) + (float)(_S14 * v30)) + (float)(_S15 * v31);
            v88 = v26;
            if (v87 <= v26)
            {
              v88 = (float)((float)(v23 + (float)(_S13 * v91)) + (float)(_S14 * v30)) + (float)(_S15 * v31);
              if (v87 < v25)
                v88 = v25;
            }
            v89 = (float)((float)(v23 + (float)(_S13 * v32)) + (float)(_S14 * v33)) + (float)(_S15 * v34);
            *v67 = llroundf(v88) << v62;
            v90 = v26;
            if (v89 <= v26)
            {
              v90 = v89;
              if (v89 < v25)
                v90 = v25;
            }
            v67[1] = llroundf(v90) << v62;
            v67 += 2;
          }
          if (v66)
            *v66++ = llroundf(v86 * 65535.0);
          v65 += 16;
          --v64;
        }
        while (v64);
      }
      v61 += v18;
      v60 += v19;
      v59 += v20;
      v56 += v21;
      ++v11;
    }
    while (v11 != v14);
  }
  return result;
}

uint64_t vt_Copy_RGfA_rgb_xf444(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_rgb_xf444_GCD);
  return 0;
}

unint64_t vt_Copy_RGfA_rgb_xf444_GCD(unint64_t result, uint64_t a2, double a3, float a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned int v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  _WORD *v59;
  _WORD *v60;
  _WORD *v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;

  v8 = *(_QWORD *)(result + 28);
  v9 = *(unsigned __int8 *)result;
  v10 = v8 * a2 / v9;
  v11 = (v8 + v8 * a2) / v9;
  if (v11 != v10)
  {
    v12 = 0;
    v13 = *(_QWORD *)(result + 20);
    v14 = v10 + *(_QWORD *)(result + 44);
    v15 = v11 - v10;
    v16 = *(_QWORD *)(result + 152);
    v17 = *(uint64_t **)(result + 136);
    v18 = *(_QWORD **)(result + 56);
    v19 = **(_QWORD **)(result + 64);
    v20 = *v17;
    v21 = v17[1];
    v22 = v17[2];
    v23 = (float)*(unsigned int *)(v16 + 136);
    LOWORD(a4) = *(_WORD *)(v16 + 144);
    v24 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v16 + 146);
    v25 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v16 + 148);
    v26 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v16 + 150);
    v27 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v16 + 152);
    v28 = (float)LODWORD(a8);
    v29 = *(float *)(v16 + 36);
    v30 = *(float *)(v16 + 40);
    v31 = *(float *)(v16 + 44);
    v32 = *(float *)(v16 + 48);
    v33 = *(float *)(v16 + 52);
    v34 = *(float *)(v16 + 56);
    v35 = *(float *)(v16 + 60);
    v36 = *(float *)(v16 + 64);
    v37 = *(float *)(v16 + 68);
    v38 = *(_QWORD **)(result + 128);
    v39 = *(_QWORD *)(result + 112);
    v40 = *(_QWORD *)(result + 104) * a2 / v9 + *(_QWORD *)(result + 120);
    v41 = *(_QWORD *)(result + 36);
    v42 = *(unsigned __int8 *)(v16 + 132);
    if (v42 >= 0x11)
      v43 = 0;
    else
      v43 = 16 - v42;
    v44 = *(unsigned __int8 *)(v16 + 157);
    v45 = *(unsigned __int8 *)(v16 + 156);
    v46 = *(unsigned __int8 *)(v16 + 155);
    result = *(unsigned __int8 *)(v16 + 154);
    v47 = v38[2];
    if (v47)
      v48 = v47 + v40 * v22 + 2 * v39;
    else
      v48 = 0;
    v51 = v38;
    v50 = *v38;
    v49 = v51[1];
    v52 = v49 == 0;
    v53 = v49 + v40 * v21 + 2 * v39;
    if (v52)
      v53 = 0;
    v54 = v50 + v40 * v20 + 2 * v39;
    v55 = *v18 + v19 * v14 + 16 * v41;
    v56 = v43;
    do
    {
      if (v13)
      {
        v57 = v13;
        v58 = v55;
        v59 = (_WORD *)v48;
        v60 = (_WORD *)v53;
        v61 = (_WORD *)v54;
        do
        {
          v62 = *(float *)(v58 + 4 * result) * v23;
          v63 = *(float *)(v58 + 4 * v46) * v23;
          v64 = *(float *)(v58 + 4 * v45) * v23;
          v65 = (float)((float)((float)(v30 * v63) + (float)(v29 * v62)) + (float)(v31 * v64)) + v24;
          v66 = v26;
          if (v65 <= v26)
          {
            v66 = (float)((float)((float)(v30 * v63) + (float)(v29 * v62)) + (float)(v31 * v64)) + v24;
            if (v65 < v24)
              v66 = v24;
          }
          v67 = *(float *)(v58 + 4 * v44);
          *v61++ = llroundf(v66) << v56;
          if (v60)
          {
            v68 = (float)((float)(v25 + (float)(v62 * v32)) + (float)(v63 * v33)) + (float)(v64 * v34);
            v69 = v28;
            if (v68 <= v28)
            {
              v69 = (float)((float)(v25 + (float)(v62 * v32)) + (float)(v63 * v33)) + (float)(v64 * v34);
              if (v68 < v27)
                v69 = v27;
            }
            v70 = (float)((float)(v25 + (float)(v62 * v35)) + (float)(v63 * v36)) + (float)(v64 * v37);
            *v60 = llroundf(v69) << v56;
            v71 = v28;
            if (v70 <= v28)
            {
              v71 = v70;
              if (v70 < v27)
                v71 = v27;
            }
            v60[1] = llroundf(v71) << v56;
            v60 += 2;
          }
          if (v59)
            *v59++ = llroundf(v67 * 65535.0);
          v58 += 16;
          --v57;
        }
        while (v57);
      }
      v55 += v19;
      v54 += v20;
      v53 += v21;
      v48 += v22;
      ++v12;
    }
    while (v12 != v15);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Tone_Mat_TRC_BGRA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Tone_Mat_TRC_BGRA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_RGfA_TRC_Tone_Mat_TRC_BGRA_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float32x2_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  float32x2_t v48;
  float v59;
  float v60;
  float v63;
  float v64;
  float v65;
  float v68;
  float v69;
  float v70;
  float v71;

  v2 = *(_QWORD *)(result + 28);
  v3 = *result;
  v4 = v2 * a2 / v3;
  v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    v6 = 0;
    v7 = *(_QWORD *)(result + 20);
    v8 = v4 + *(_QWORD *)(result + 44);
    v9 = v5 - v4;
    v10 = *((_QWORD *)result + 19);
    v11 = (_QWORD *)*((_QWORD *)result + 7);
    v12 = **((_QWORD **)result + 8);
    v13 = **((_QWORD **)result + 17);
    v14 = *(float *)(v10 + 72);
    v15 = *(float *)(v10 + 76);
    v16 = *(float *)(v10 + 80);
    v17 = *(float *)(v10 + 84);
    v18 = *(float *)(v10 + 88);
    v19 = *(float *)(v10 + 92);
    v20 = *(float *)(v10 + 96);
    v21 = *(float *)(v10 + 100);
    v22 = v10 + 164;
    v23 = v10 + 16548;
    v24 = v10 + 32932;
    v25 = *(float *)(v10 + 104);
    v26 = *(float *)(v10 + 108);
    v27 = *(float *)(v10 + 112);
    v28 = *(float *)(v10 + 116);
    v29 = *(float *)(v10 + 120);
    v30 = (_QWORD *)*((_QWORD *)result + 16);
    v31 = *((_QWORD *)result + 14);
    v32 = *((_QWORD *)result + 13) * a2 / v3 + *((_QWORD *)result + 15);
    v33 = *(_QWORD *)(result + 36);
    v34 = *(unsigned __int8 *)(v10 + 161);
    v35 = *(unsigned __int8 *)(v10 + 160);
    result = (unsigned __int8 *)*(unsigned __int8 *)(v10 + 159);
    v36 = *(unsigned __int8 *)(v10 + 158);
    v37 = *(unsigned __int8 *)(v10 + 157);
    v38 = *(unsigned __int8 *)(v10 + 156);
    v39 = *v30 + v32 * v13;
    v40 = *(unsigned __int8 *)(v10 + 155);
    v41 = *(unsigned __int8 *)(v10 + 154);
    v42 = v39 + 4 * v31;
    v43 = *v11 + v12 * v8 + 16 * v33;
    v44 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v7)
      {
        v45 = v7;
        v46 = v43;
        v47 = v42;
        do
        {
          v48.i32[0] = *(_DWORD *)(v46 + 4 * v41);
          v48.i32[1] = *(_DWORD *)(v46 + 4 * v40);
          _D25 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v48, v44), 0), v44)));
          _D25.i16[0] = *(_WORD *)(v22 + 2 * _D25.u32[0]);
          __asm { FCVT            S25, H25 }
          _H27 = *(_WORD *)(v22 + 2 * _D25.u32[1]);
          __asm { FCVT            S26, H27 }
          _H27 = *(_WORD *)(v22 + 2 * llroundf(fminf(fmaxf(*(float *)(v46 + 4 * v38) * 8191.0, 0.0), 8191.0)));
          __asm { FCVT            S28, H27 }
          v59 = (float)((float)((float)(v27 * _S26) + (float)(v26 * _S25)) + (float)(v28 * _S28))
              + (float)(v29 * fmaxf(_S25, fmaxf(_S26, _S28)));
          v60 = 8191.0;
          if (v59 <= 8191.0)
          {
            v60 = v59;
            if (v59 < 0.0)
              v60 = 0.0;
          }
          _H27 = *(_WORD *)(v23 + 2 * llroundf(v60));
          __asm { FCVT            S30, H27 }
          v63 = _S25 * _S30;
          v64 = _S26 * _S30;
          v65 = _S28 * _S30;
          _H26 = *(_WORD *)(v24
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v15 * (float)(_S26 * _S30)) + (float)((float)(_S25 * _S30) * v14))+ (float)(v65 * v16), 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          v68 = 255.0;
          if (_S26 <= 255.0)
          {
            v68 = _S26;
            if (_S26 < 0.0)
              v68 = 0.0;
          }
          v69 = *(float *)(v46 + 4 * v37);
          v70 = (float)((float)(v18 * v64) + (float)(v63 * v17)) + (float)(v65 * v19);
          v71 = (float)((float)(v21 * v64) + (float)(v63 * v20)) + (float)(v65 * v25);
          _H28 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          *(_BYTE *)(v47 + v36) = llroundf(v68);
          __asm { FCVT            S30, H28 }
          _S29 = 255.0;
          if (_S30 <= 255.0)
          {
            if (_S30 >= 0.0)
              __asm { FCVT            S29, H28 }
            else
              _S29 = 0.0;
          }
          result[v47] = llroundf(_S29);
          __asm { FCVT            S29, H27 }
          _S28 = 255.0;
          if (_S29 <= 255.0)
          {
            if (_S29 >= 0.0)
              __asm { FCVT            S28, H27 }
            else
              _S28 = 0.0;
          }
          v46 += 16;
          *(_BYTE *)(v47 + v35) = llroundf(_S28);
          *(_BYTE *)(v47 + v34) = llroundf(v69 * 255.0);
          v47 += 4;
          --v45;
        }
        while (v45);
      }
      v43 += v12;
      v42 += v13;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Mat_TRC_BGRA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Mat_TRC_BGRA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_RGfA_TRC_Mat_TRC_BGRA_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float32x2_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float32x2_t v43;
  float v55;
  float v56;
  float v57;
  float v58;

  v2 = *(_QWORD *)(result + 28);
  v3 = *result;
  v4 = v2 * a2 / v3;
  v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    v6 = 0;
    v7 = *(_QWORD *)(result + 20);
    v8 = v4 + *(_QWORD *)(result + 44);
    v9 = v5 - v4;
    v10 = *((_QWORD *)result + 19);
    v11 = (_QWORD *)*((_QWORD *)result + 16);
    v12 = (_QWORD *)*((_QWORD *)result + 7);
    v13 = **((_QWORD **)result + 8);
    v14 = **((_QWORD **)result + 17);
    v15 = *(float *)(v10 + 72);
    v16 = *(float *)(v10 + 76);
    v17 = *(float *)(v10 + 80);
    v18 = *(float *)(v10 + 84);
    v19 = *(float *)(v10 + 88);
    v20 = *(float *)(v10 + 92);
    v21 = *(float *)(v10 + 96);
    v22 = *(float *)(v10 + 100);
    v23 = *(float *)(v10 + 104);
    v24 = v10 + 164;
    v25 = v10 + 16548;
    v26 = *((_QWORD *)result + 14);
    v27 = *((_QWORD *)result + 13) * a2 / v3 + *((_QWORD *)result + 15);
    v28 = *(_QWORD *)(result + 36);
    v29 = *(unsigned __int8 *)(v10 + 161);
    v30 = *(unsigned __int8 *)(v10 + 160);
    v31 = *(unsigned __int8 *)(v10 + 159);
    result = (unsigned __int8 *)*(unsigned __int8 *)(v10 + 158);
    v32 = *(unsigned __int8 *)(v10 + 157);
    v33 = *(unsigned __int8 *)(v10 + 156);
    v34 = *v11 + v27 * v14;
    v35 = *(unsigned __int8 *)(v10 + 155);
    v36 = *(unsigned __int8 *)(v10 + 154);
    v37 = v34 + 4 * v26;
    v38 = *v12 + v13 * v8 + 16 * v28;
    v39 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v7)
      {
        v40 = v7;
        v41 = v38;
        v42 = v37;
        do
        {
          v43.i32[0] = *(_DWORD *)(v41 + 4 * v36);
          v43.i32[1] = *(_DWORD *)(v41 + 4 * v35);
          _D21 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v43, v39), 0), v39)));
          _D21.i16[0] = *(_WORD *)(v24 + 2 * _D21.u32[0]);
          _H24 = *(_WORD *)(v24 + 2 * _D21.u32[1]);
          __asm
          {
            FCVT            S23, H21
            FCVT            S24, H24
          }
          _D21.i16[0] = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(*(float *)(v41 + 4 * v33) * 8191.0, 0.0), 8191.0)));
          __asm { FCVT            S25, H21 }
          _H22 = *(_WORD *)(v25
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v16 * _S24) + (float)(_S23 * v15)) + (float)(_S25 * v17), 0.0), 8191.0)));
          __asm { FCVT            S22, H22 }
          v55 = 255.0;
          if (_S22 <= 255.0)
          {
            v55 = _S22;
            if (_S22 < 0.0)
              v55 = 0.0;
          }
          v56 = *(float *)(v41 + 4 * v32);
          v57 = (float)((float)(v19 * _S24) + (float)(_S23 * v18)) + (float)(_S25 * v20);
          v58 = (float)((float)(v22 * _S24) + (float)(_S23 * v21)) + (float)(_S25 * v23);
          _H24 = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v57, 0.0), 8191.0)));
          _H23 = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v58, 0.0), 8191.0)));
          result[v42] = llroundf(v55);
          __asm { FCVT            S26, H24 }
          _S25 = 255.0;
          if (_S26 <= 255.0)
          {
            if (_S26 >= 0.0)
              __asm { FCVT            S25, H24 }
            else
              _S25 = 0.0;
          }
          *(_BYTE *)(v42 + v31) = llroundf(_S25);
          __asm { FCVT            S25, H23 }
          _S24 = 255.0;
          if (_S25 <= 255.0)
          {
            if (_S25 >= 0.0)
              __asm { FCVT            S24, H23 }
            else
              _S24 = 0.0;
          }
          v41 += 16;
          *(_BYTE *)(v42 + v30) = llroundf(_S24);
          *(_BYTE *)(v42 + v29) = llroundf(v56 * 255.0);
          v42 += 4;
          --v40;
        }
        while (v40);
      }
      v38 += v13;
      v37 += v14;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_RGfA_rgb_BGRA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_rgb_BGRA_GCD);
  return 0;
}

unint64_t vt_Copy_RGfA_rgb_BGRA_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  char v38;
  float v39;
  float v40;

  v2 = *(_QWORD *)(result + 28);
  v3 = *(unsigned __int8 *)result;
  v4 = v2 * a2 / v3;
  v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    v6 = 0;
    v7 = *(_QWORD *)(result + 20);
    v8 = v4 + *(_QWORD *)(result + 44);
    v9 = v5 - v4;
    v10 = *(_QWORD *)(result + 152);
    v11 = *(_QWORD **)(result + 128);
    v12 = *(_QWORD **)(result + 56);
    v13 = **(_QWORD **)(result + 64);
    v14 = **(_QWORD **)(result + 136);
    v15 = (float)*(unsigned int *)(v10 + 136);
    v16 = *(_QWORD *)(result + 112);
    v17 = *(_QWORD *)(result + 104) * a2 / v3 + *(_QWORD *)(result + 120);
    v18 = *(_QWORD *)(result + 36);
    v19 = *(unsigned __int8 *)(v10 + 161);
    v20 = *(unsigned __int8 *)(v10 + 160);
    v21 = *(unsigned __int8 *)(v10 + 159);
    v22 = *(unsigned __int8 *)(v10 + 158);
    v23 = *(unsigned __int8 *)(v10 + 157);
    result = *(unsigned __int8 *)(v10 + 156);
    v24 = *v11 + v17 * v14;
    v25 = *(unsigned __int8 *)(v10 + 155);
    v26 = *(unsigned __int8 *)(v10 + 154);
    v27 = v24 + 4 * v16;
    v28 = *v12 + v13 * v8 + 16 * v18;
    do
    {
      if (v7)
      {
        v29 = v7;
        v30 = v28;
        v31 = v27;
        do
        {
          v32 = *(float *)(v30 + 4 * v26) * v15;
          v33 = 255.0;
          if (v32 <= 255.0)
          {
            v33 = *(float *)(v30 + 4 * v26) * v15;
            if (v32 < 0.0)
              v33 = 0.0;
          }
          v34 = *(float *)(v30 + 4 * result);
          v35 = *(float *)(v30 + 4 * v23);
          v36 = *(float *)(v30 + 4 * v25) * v15;
          *(_BYTE *)(v31 + v22) = llroundf(v33);
          v37 = 255.0;
          if (v36 <= 255.0)
          {
            v37 = v36;
            if (v36 < 0.0)
              v37 = 0.0;
          }
          v38 = llroundf(v37);
          v39 = v34 * v15;
          *(_BYTE *)(v31 + v21) = v38;
          v40 = 255.0;
          if (v39 <= 255.0)
          {
            v40 = v39;
            if (v39 < 0.0)
              v40 = 0.0;
          }
          v30 += 16;
          *(_BYTE *)(v31 + v20) = llroundf(v40);
          *(_BYTE *)(v31 + v19) = llroundf(v35 * 255.0);
          v31 += 4;
          --v29;
        }
        while (v29);
      }
      v28 += v13;
      v27 += v14;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Tone_Mat_TRC_l10r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Tone_Mat_TRC_l10r_GCD);
  return 0;
}

unint64_t vt_Copy_RGfA_TRC_Tone_Mat_TRC_l10r_GCD(unint64_t result, uint64_t a2, float a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  uint64_t v40;
  float32x2_t v41;
  uint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  float32x2_t v45;
  float v56;
  float v57;
  float v60;
  float v61;
  float v62;
  float v65;
  BOOL v66;
  float v67;
  float v70;
  float v71;
  float v74;
  float v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  float v80;

  v3 = *(_QWORD *)(result + 28);
  v4 = *(unsigned __int8 *)result;
  v5 = v3 * a2 / v4;
  v6 = (v3 + v3 * a2) / v4;
  if (v6 != v5)
  {
    v7 = 0;
    v8 = *(_QWORD *)(result + 20);
    v9 = v5 + *(_QWORD *)(result + 44);
    v10 = v6 - v5;
    v11 = *(_QWORD *)(result + 152);
    v12 = *(_QWORD **)(result + 56);
    v13 = **(_QWORD **)(result + 64);
    v14 = **(_QWORD **)(result + 136);
    LOWORD(a3) = *(_WORD *)(v11 + 144);
    v15 = (float)LODWORD(a3);
    v16 = *(float *)(v11 + 72);
    v17 = *(float *)(v11 + 76);
    v18 = *(float *)(v11 + 80);
    v19 = *(float *)(v11 + 84);
    v20 = *(float *)(v11 + 88);
    v21 = *(float *)(v11 + 92);
    v22 = *(float *)(v11 + 96);
    v23 = *(float *)(v11 + 100);
    v24 = v11 + 164;
    v25 = v11 + 16548;
    v26 = v11 + 32932;
    v27 = *(float *)(v11 + 104);
    v28 = *(float *)(v11 + 108);
    v29 = *(float *)(v11 + 112);
    v30 = *(float *)(v11 + 116);
    v31 = *(float *)(v11 + 120);
    v32 = *(_QWORD *)(result + 112);
    v33 = *(_QWORD *)(result + 104) * a2 / v4 + *(_QWORD *)(result + 120);
    v34 = *(_QWORD *)(result + 36);
    v35 = *(unsigned __int8 *)(v11 + 157);
    v36 = *(unsigned __int8 *)(v11 + 156);
    v37 = **(_QWORD **)(result + 128) + v33 * v14;
    result = *(unsigned __int8 *)(v11 + 155);
    v38 = *(unsigned __int8 *)(v11 + 154);
    v39 = (unsigned int *)(v37 + 16 * v32);
    v40 = *v12 + v13 * v9 + 16 * v34;
    v41 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v8)
      {
        v42 = v8;
        v43 = v39;
        v44 = v40;
        do
        {
          v45.i32[0] = *(_DWORD *)(v44 + 4 * v38);
          v45.i32[1] = *(_DWORD *)(v44 + 4 * result);
          _D28 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v45, v41), 0), v41)));
          _D28.i16[0] = *(_WORD *)(v24 + 2 * _D28.u32[0]);
          __asm { FCVT            S28, H28 }
          _H30 = *(_WORD *)(v24 + 2 * _D28.u32[1]);
          __asm { FCVT            S30, H30 }
          _H29 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(*(float *)(v44 + 4 * v36) * 8191.0, 0.0), 8191.0)));
          __asm { FCVT            S8, H29 }
          v56 = (float)((float)((float)(v29 * _S30) + (float)(v28 * _S28)) + (float)(v30 * _S8))
              + (float)(v31 * fmaxf(_S28, fmaxf(_S30, _S8)));
          v57 = 8191.0;
          if (v56 <= 8191.0)
          {
            v57 = v56;
            if (v56 < 0.0)
              v57 = 0.0;
          }
          _H29 = *(_WORD *)(v25 + 2 * llroundf(v57));
          __asm { FCVT            S9, H29 }
          v60 = _S28 * _S9;
          v61 = _S30 * _S9;
          v62 = _S8 * _S9;
          _H28 = *(_WORD *)(v26
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v23 * v61) + (float)((float)(_S28 * _S9) * v22))+ (float)((float)(_S8 * _S9) * v27), 0.0), 8191.0)));
          __asm { FCVT            S28, H28 }
          v65 = v15 + _S28;
          v66 = (float)(v15 + _S28) <= 1023.0;
          v67 = 1023.0;
          if (v66)
          {
            v67 = v65;
            if (v65 < 0.0)
              v67 = 0.0;
          }
          _H8 = *(_WORD *)(v26
                         + 2
                         * llroundf(fminf(fmaxf((float)((float)(v20 * v61) + (float)(v60 * v19)) + (float)(v62 * v21), 0.0), 8191.0)));
          __asm { FCVT            S8, H8 }
          v70 = v15 + _S8;
          v66 = (float)(v15 + _S8) <= 1023.0;
          v71 = 1023.0;
          if (v66)
          {
            v71 = v70;
            if (v70 < 0.0)
              v71 = 0.0;
          }
          _H29 = *(_WORD *)(v26
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v17 * v61) + (float)(v60 * v16)) + (float)(v62 * v18), 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          v74 = v15 + _S29;
          v66 = (float)(v15 + _S29) <= 1023.0;
          v75 = 1023.0;
          if (v66)
          {
            v75 = v74;
            if (v74 < 0.0)
              v75 = 0.0;
          }
          v76 = llroundf(*(float *)(v44 + 4 * v35) * 3.0);
          v77 = llroundf(v67);
          v44 += 16;
          v78 = llroundf(v71) << 10;
          v79 = llroundf(v75);
          v80 = (float)v76;
          if ((float)v76 > 3.0)
            v80 = 3.0;
          *v43++ = v78 | v77 | (llroundf(v80) << 30) | (v79 << 20);
          --v42;
        }
        while (v42);
      }
      v40 += v13;
      v39 = (unsigned int *)((char *)v39 + v14);
      ++v7;
    }
    while (v7 != v10);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Mat_TRC_l10r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Mat_TRC_l10r_GCD);
  return 0;
}

unint64_t vt_Copy_RGfA_TRC_Mat_TRC_l10r_GCD(unint64_t result, uint64_t a2, float a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  uint64_t v35;
  float32x2_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  float32x2_t v40;
  float v49;
  BOOL v50;
  float v51;
  float v54;
  float v55;
  float v58;
  float v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  float v64;

  v3 = *(_QWORD *)(result + 28);
  v4 = *(unsigned __int8 *)result;
  v5 = v3 * a2 / v4;
  v6 = (v3 + v3 * a2) / v4;
  if (v6 != v5)
  {
    v7 = 0;
    v8 = *(_QWORD *)(result + 20);
    v9 = v5 + *(_QWORD *)(result + 44);
    v10 = v6 - v5;
    v11 = *(_QWORD *)(result + 152);
    v12 = *(_QWORD **)(result + 56);
    v13 = **(_QWORD **)(result + 64);
    v14 = **(_QWORD **)(result + 136);
    LOWORD(a3) = *(_WORD *)(v11 + 144);
    v15 = (float)LODWORD(a3);
    v16 = *(float *)(v11 + 72);
    v17 = *(float *)(v11 + 76);
    v18 = *(float *)(v11 + 80);
    v19 = *(float *)(v11 + 84);
    v20 = *(float *)(v11 + 88);
    v21 = *(float *)(v11 + 92);
    v22 = *(float *)(v11 + 96);
    v23 = *(float *)(v11 + 100);
    v24 = *(float *)(v11 + 104);
    v25 = v11 + 164;
    v26 = v11 + 16548;
    v27 = *(_QWORD *)(result + 112);
    v28 = *(_QWORD *)(result + 104) * a2 / v4 + *(_QWORD *)(result + 120);
    v29 = *(_QWORD *)(result + 36);
    v30 = *(unsigned __int8 *)(v11 + 157);
    v31 = *(unsigned __int8 *)(v11 + 156);
    v32 = **(_QWORD **)(result + 128) + v28 * v14;
    v33 = *(unsigned __int8 *)(v11 + 155);
    result = *(unsigned __int8 *)(v11 + 154);
    v34 = (unsigned int *)(v32 + 16 * v27);
    v35 = *v12 + v13 * v9 + 16 * v29;
    v36 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v8)
      {
        v37 = v8;
        v38 = v35;
        v39 = v34;
        do
        {
          v40.i32[0] = *(_DWORD *)(v38 + 4 * result);
          v40.i32[1] = *(_DWORD *)(v38 + 4 * v33);
          _D24 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v40, v36), 0), v36)));
          _D24.i16[0] = *(_WORD *)(v25 + 2 * _D24.u32[0]);
          __asm { FCVT            S25, H24 }
          _D24.i16[0] = *(_WORD *)(v25 + 2 * _D24.u32[1]);
          __asm { FCVT            S26, H24 }
          _D24.i16[0] = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(*(float *)(v38 + 4 * v31) * 8191.0, 0.0), 8191.0)));
          __asm { FCVT            S27, H24 }
          _D24.i16[0] = *(_WORD *)(v26
                                 + 2
                                 * llroundf(fminf(fmaxf((float)((float)(v23 * _S26) + (float)(_S25 * v22)) + (float)(_S27 * v24), 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          v49 = v15 + *(float *)_D24.i32;
          v50 = (float)(v15 + *(float *)_D24.i32) <= 1023.0;
          v51 = 1023.0;
          if (v50)
          {
            v51 = v49;
            if (v49 < 0.0)
              v51 = 0.0;
          }
          _H28 = *(_WORD *)(v26
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v20 * _S26) + (float)(_S25 * v19)) + (float)(_S27 * v21), 0.0), 8191.0)));
          __asm { FCVT            S28, H28 }
          v54 = v15 + _S28;
          v50 = (float)(v15 + _S28) <= 1023.0;
          v55 = 1023.0;
          if (v50)
          {
            v55 = v54;
            if (v54 < 0.0)
              v55 = 0.0;
          }
          _H25 = *(_WORD *)(v26
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v17 * _S26) + (float)(_S25 * v16)) + (float)(_S27 * v18), 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          v58 = v15 + _S25;
          v50 = (float)(v15 + _S25) <= 1023.0;
          v59 = 1023.0;
          if (v50)
          {
            v59 = v58;
            if (v58 < 0.0)
              v59 = 0.0;
          }
          v60 = llroundf(*(float *)(v38 + 4 * v30) * 3.0);
          v61 = llroundf(v51);
          v38 += 16;
          v62 = llroundf(v55) << 10;
          v63 = llroundf(v59);
          v64 = (float)v60;
          if ((float)v60 > 3.0)
            v64 = 3.0;
          *v39++ = v62 | v61 | (llroundf(v64) << 30) | (v63 << 20);
          --v37;
        }
        while (v37);
      }
      v35 += v13;
      v34 = (unsigned int *)((char *)v34 + v14);
      ++v7;
    }
    while (v7 != v10);
  }
  return result;
}

uint64_t vt_Copy_RGfA_rgb_l10r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_rgb_l10r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_RGfA_rgb_l10r_GCD(unsigned __int8 *result, uint64_t a2, double a3, float a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned int *v25;
  unsigned int v26;
  float v27;
  float v28;
  float v29;
  unsigned int v30;
  float v31;
  float v32;
  float v33;
  unsigned int v34;
  float v35;
  float v36;
  float v37;
  float v38;
  unsigned int v39;
  float v40;

  v4 = *(_QWORD *)(result + 28);
  v5 = *result;
  v6 = v4 * a2 / v5;
  v7 = (v4 + v4 * a2) / v5;
  if (v7 != v6)
  {
    v8 = 0;
    v9 = *(_QWORD *)(result + 20);
    v10 = v6 + *(_QWORD *)(result + 44);
    v11 = v7 - v6;
    v12 = *((_QWORD *)result + 19);
    v13 = **((_QWORD **)result + 8);
    v14 = **((_QWORD **)result + 17);
    v15 = (float)*(unsigned int *)(v12 + 136);
    LOWORD(a4) = *(_WORD *)(v12 + 144);
    v16 = (float)LODWORD(a4);
    v17 = *((_QWORD *)result + 13) * a2 / v5 + *((_QWORD *)result + 15);
    v18 = *(unsigned __int8 *)(v12 + 157);
    v19 = *(unsigned __int8 *)(v12 + 156);
    v20 = *(unsigned __int8 *)(v12 + 155);
    v21 = *(unsigned __int8 *)(v12 + 154);
    v22 = **((_QWORD **)result + 16) + v17 * v14 + 16 * *((_QWORD *)result + 14);
    result = (unsigned __int8 *)(**((_QWORD **)result + 7) + v13 * v10 + 16 * *(_QWORD *)(result + 36));
    do
    {
      if (v9)
      {
        v23 = v9;
        v24 = result;
        v25 = (unsigned int *)v22;
        do
        {
          v26 = llroundf(*(float *)&v24[4 * v18] * 3.0);
          v27 = (float)(*(float *)&v24[4 * v19] * v15) + v16;
          if (v27 < 0.0)
            v28 = 0.0;
          else
            v28 = (float)(*(float *)&v24[4 * v19] * v15) + v16;
          if (v27 <= 1023.0)
            v29 = v28;
          else
            v29 = 1023.0;
          v30 = llroundf(v29);
          v31 = (float)(*(float *)&v24[4 * v20] * v15) + v16;
          if (v31 < 0.0)
            v32 = 0.0;
          else
            v32 = (float)(*(float *)&v24[4 * v20] * v15) + v16;
          if (v31 <= 1023.0)
            v33 = v32;
          else
            v33 = 1023.0;
          v34 = llroundf(v33);
          v35 = (float)(*(float *)&v24[4 * v21] * v15) + v16;
          if (v35 < 0.0)
            v36 = 0.0;
          else
            v36 = (float)(*(float *)&v24[4 * v21] * v15) + v16;
          if (v35 <= 1023.0)
            v37 = v36;
          else
            v37 = 1023.0;
          v38 = (float)v26;
          v39 = llroundf(v37);
          v24 += 16;
          if (v38 <= 3.0)
            v40 = v38;
          else
            v40 = 3.0;
          *v25++ = (v34 << 10) | v30 | (llroundf(v40) << 30) | (v39 << 20);
          --v23;
        }
        while (v23);
      }
      result += v13;
      v22 += v14;
      ++v8;
    }
    while (v8 != v11);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Tone_Mat_TRC_l64r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Tone_Mat_TRC_l64r_GCD);
  return 0;
}

unint64_t vt_Copy_RGfA_TRC_Tone_Mat_TRC_l64r_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _WORD *v37;
  uint64_t v38;
  float32x2_t v39;
  uint64_t v40;
  uint64_t v41;
  _WORD *v42;
  float32x2_t v43;
  float v54;
  float v55;
  float v58;
  float v59;
  float v60;
  float v63;
  float v65;
  float v66;
  float v67;
  float v71;
  float v74;

  v2 = *(_QWORD *)(result + 28);
  v3 = *(unsigned __int8 *)result;
  v4 = v2 * a2 / v3;
  v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    v6 = 0;
    v7 = *(_QWORD *)(result + 20);
    v8 = v4 + *(_QWORD *)(result + 44);
    v9 = v5 - v4;
    v10 = *(_QWORD *)(result + 152);
    v11 = *(_QWORD **)(result + 56);
    v12 = **(_QWORD **)(result + 64);
    v13 = **(_QWORD **)(result + 136);
    v14 = *(float *)(v10 + 72);
    v15 = *(float *)(v10 + 76);
    v16 = *(float *)(v10 + 80);
    v17 = *(float *)(v10 + 84);
    v18 = *(float *)(v10 + 88);
    v19 = *(float *)(v10 + 92);
    v20 = *(float *)(v10 + 96);
    v21 = *(float *)(v10 + 100);
    v22 = v10 + 164;
    v23 = v10 + 16548;
    v24 = v10 + 32932;
    v25 = *(float *)(v10 + 104);
    v26 = *(float *)(v10 + 108);
    v27 = *(float *)(v10 + 112);
    v28 = *(float *)(v10 + 116);
    v29 = *(float *)(v10 + 120);
    v30 = *(_QWORD *)(result + 112);
    v31 = *(_QWORD *)(result + 104) * a2 / v3 + *(_QWORD *)(result + 120);
    v32 = *(_QWORD *)(result + 36);
    v33 = *(unsigned __int8 *)(v10 + 157);
    v34 = *(unsigned __int8 *)(v10 + 156);
    v35 = **(_QWORD **)(result + 128) + v31 * v13;
    result = *(unsigned __int8 *)(v10 + 155);
    v36 = *(unsigned __int8 *)(v10 + 154);
    v37 = (_WORD *)(v35 + 8 * v30);
    v38 = *v11 + v12 * v8 + 16 * v32;
    v39 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v7)
      {
        v40 = v7;
        v41 = v38;
        v42 = v37;
        do
        {
          v43.i32[0] = *(_DWORD *)(v41 + 4 * v36);
          v43.i32[1] = *(_DWORD *)(v41 + 4 * result);
          _D26 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v43, v39), 0), v39)));
          _D26.i16[0] = *(_WORD *)(v22 + 2 * _D26.u32[0]);
          __asm { FCVT            S26, H26 }
          _H28 = *(_WORD *)(v22 + 2 * _D26.u32[1]);
          __asm { FCVT            S28, H28 }
          _H27 = *(_WORD *)(v22 + 2 * llroundf(fminf(fmaxf(*(float *)(v41 + 4 * v34) * 8191.0, 0.0), 8191.0)));
          __asm { FCVT            S30, H27 }
          v54 = (float)((float)((float)(v27 * _S28) + (float)(v26 * _S26)) + (float)(v28 * _S30))
              + (float)(v29 * fmaxf(_S26, fmaxf(_S28, _S30)));
          v55 = 8191.0;
          if (v54 <= 8191.0)
          {
            v55 = v54;
            if (v54 < 0.0)
              v55 = 0.0;
          }
          _H27 = *(_WORD *)(v23 + 2 * llroundf(v55));
          __asm { FCVT            S31, H27 }
          v58 = _S26 * _S31;
          v59 = _S28 * _S31;
          v60 = _S30 * _S31;
          _H31 = *(_WORD *)(v24
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v15 * v59) + (float)((float)(_S26 * _S31) * v14))+ (float)((float)(_S30 * _S31) * v16), 0.0), 8191.0)));
          __asm { FCVT            S26, H31 }
          v63 = 65535.0;
          if (_S26 <= 65535.0)
          {
            __asm { FCVT            S30, H31 }
            _NF = _S30 < 0.0;
            v63 = _S26;
            if (_NF)
              v63 = 0.0;
          }
          v65 = *(float *)(v41 + 4 * v33);
          v66 = (float)((float)(v18 * v59) + (float)(v58 * v17)) + (float)(v60 * v19);
          v67 = (float)((float)(v21 * v59) + (float)(v58 * v20)) + (float)(v60 * v25);
          _H28 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v66, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v67, 0.0), 8191.0)));
          __asm { FCVT            S31, H28 }
          *v42 = llroundf(v63);
          v71 = 65535.0;
          if (_S31 <= 65535.0)
          {
            __asm { FCVT            S28, H28 }
            v71 = _S31;
            if (_S28 < 0.0)
              v71 = 0.0;
          }
          __asm { FCVT            S30, H27 }
          v42[1] = llroundf(v71);
          v74 = 65535.0;
          if (_S30 <= 65535.0)
          {
            __asm { FCVT            S27, H27 }
            v74 = _S30;
            if (_S27 < 0.0)
              v74 = 0.0;
          }
          v41 += 16;
          v42[2] = llroundf(v74);
          v42[3] = llroundf(v65 * 65535.0);
          v42 += 4;
          --v40;
        }
        while (v40);
      }
      v38 += v12;
      v37 = (_WORD *)((char *)v37 + v13);
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Mat_TRC_l64r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Mat_TRC_l64r_GCD);
  return 0;
}

unint64_t vt_Copy_RGfA_TRC_Mat_TRC_l64r_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _WORD *v32;
  uint64_t v33;
  float32x2_t v34;
  uint64_t v35;
  uint64_t v36;
  _WORD *v37;
  float32x2_t v38;
  float v49;
  float v51;
  float v52;
  float v53;
  float v57;
  float v60;

  v2 = *(_QWORD *)(result + 28);
  v3 = *(unsigned __int8 *)result;
  v4 = v2 * a2 / v3;
  v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    v6 = 0;
    v7 = *(_QWORD *)(result + 20);
    v8 = v4 + *(_QWORD *)(result + 44);
    v9 = v5 - v4;
    v10 = *(_QWORD *)(result + 152);
    v11 = *(_QWORD **)(result + 56);
    v12 = **(_QWORD **)(result + 64);
    v13 = **(_QWORD **)(result + 136);
    v14 = *(float *)(v10 + 72);
    v15 = *(float *)(v10 + 76);
    v16 = *(float *)(v10 + 80);
    v17 = *(float *)(v10 + 84);
    v18 = *(float *)(v10 + 88);
    v19 = *(float *)(v10 + 92);
    v20 = *(float *)(v10 + 96);
    v21 = *(float *)(v10 + 100);
    v22 = *(float *)(v10 + 104);
    v23 = v10 + 164;
    v24 = v10 + 16548;
    v25 = *(_QWORD *)(result + 112);
    v26 = *(_QWORD *)(result + 104) * a2 / v3 + *(_QWORD *)(result + 120);
    v27 = *(_QWORD *)(result + 36);
    v28 = *(unsigned __int8 *)(v10 + 157);
    v29 = *(unsigned __int8 *)(v10 + 156);
    v30 = **(_QWORD **)(result + 128) + v26 * v13;
    v31 = *(unsigned __int8 *)(v10 + 155);
    result = *(unsigned __int8 *)(v10 + 154);
    v32 = (_WORD *)(v30 + 8 * v25);
    v33 = *v11 + v12 * v8 + 16 * v27;
    v34 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v7)
      {
        v35 = v7;
        v36 = v33;
        v37 = v32;
        do
        {
          v38.i32[0] = *(_DWORD *)(v36 + 4 * result);
          v38.i32[1] = *(_DWORD *)(v36 + 4 * v31);
          _D22 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v38, v34), 0), v34)));
          _D22.i16[0] = *(_WORD *)(v23 + 2 * _D22.u32[0]);
          __asm { FCVT            S23, H22 }
          _D22.i16[0] = *(_WORD *)(v23 + 2 * _D22.u32[1]);
          __asm { FCVT            S24, H22 }
          _D22.i16[0] = *(_WORD *)(v23 + 2 * llroundf(fminf(fmaxf(*(float *)(v36 + 4 * v29) * 8191.0, 0.0), 8191.0)));
          __asm { FCVT            S25, H22 }
          _H27 = *(_WORD *)(v24
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v15 * _S24) + (float)(_S23 * v14)) + (float)(_S25 * v16), 0.0), 8191.0)));
          __asm { FCVT            S22, H27 }
          v49 = 65535.0;
          if (_S22 <= 65535.0)
          {
            __asm { FCVT            S26, H27 }
            _NF = _S26 < 0.0;
            v49 = _S22;
            if (_NF)
              v49 = 0.0;
          }
          v51 = *(float *)(v36 + 4 * v28);
          v52 = (float)((float)(v18 * _S24) + (float)(_S23 * v17)) + (float)(_S25 * v19);
          v53 = (float)((float)(v21 * _S24) + (float)(_S23 * v20)) + (float)(_S25 * v22);
          _H24 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v52, 0.0), 8191.0)));
          _H23 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v53, 0.0), 8191.0)));
          __asm { FCVT            S27, H24 }
          *v37 = llroundf(v49);
          v57 = 65535.0;
          if (_S27 <= 65535.0)
          {
            __asm { FCVT            S24, H24 }
            v57 = _S27;
            if (_S24 < 0.0)
              v57 = 0.0;
          }
          __asm { FCVT            S26, H23 }
          v37[1] = llroundf(v57);
          v60 = 65535.0;
          if (_S26 <= 65535.0)
          {
            __asm { FCVT            S23, H23 }
            v60 = _S26;
            if (_S23 < 0.0)
              v60 = 0.0;
          }
          v36 += 16;
          v37[2] = llroundf(v60);
          v37[3] = llroundf(v51 * 65535.0);
          v37 += 4;
          --v35;
        }
        while (v35);
      }
      v33 += v12;
      v32 = (_WORD *)((char *)v32 + v13);
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_RGfA_rgb_l64r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_rgb_l64r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_RGfA_rgb_l64r_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  _WORD *v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  BOOL v30;
  float v31;

  v2 = *(_QWORD *)(result + 28);
  v3 = *result;
  v4 = v2 * a2 / v3;
  v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    v6 = 0;
    v7 = *(_QWORD *)(result + 20);
    v8 = v4 + *(_QWORD *)(result + 44);
    v9 = v5 - v4;
    v10 = *((_QWORD *)result + 19);
    v11 = **((_QWORD **)result + 8);
    v12 = **((_QWORD **)result + 17);
    v13 = (float)*(unsigned int *)(v10 + 136);
    v14 = *((_QWORD *)result + 13) * a2 / v3 + *((_QWORD *)result + 15);
    v15 = *(unsigned __int8 *)(v10 + 157);
    v16 = *(unsigned __int8 *)(v10 + 156);
    v17 = *(unsigned __int8 *)(v10 + 155);
    v18 = *(unsigned __int8 *)(v10 + 154);
    v19 = **((_QWORD **)result + 16) + v14 * v12 + 8 * *((_QWORD *)result + 14);
    result = (unsigned __int8 *)(**((_QWORD **)result + 7) + v11 * v8 + 16 * *(_QWORD *)(result + 36));
    do
    {
      if (v7)
      {
        v20 = v7;
        v21 = result;
        v22 = (_WORD *)v19;
        do
        {
          v23 = *(float *)&v21[4 * v18] * v13;
          v24 = 65535.0;
          if (v23 <= 65535.0)
          {
            v24 = *(float *)&v21[4 * v18] * v13;
            if (v23 < 0.0)
              v24 = 0.0;
          }
          v25 = *(float *)&v21[4 * v16];
          v26 = *(float *)&v21[4 * v15];
          v27 = *(float *)&v21[4 * v17] * v13;
          *v22 = llroundf(v24);
          v28 = 65535.0;
          if (v27 <= 65535.0)
          {
            v28 = v27;
            if (v27 < 0.0)
              v28 = 0.0;
          }
          v29 = v25 * v13;
          v22[1] = llroundf(v28);
          v30 = (float)(v25 * v13) <= 65535.0;
          v31 = 65535.0;
          if (v30)
          {
            v31 = v29;
            if (v29 < 0.0)
              v31 = 0.0;
          }
          v21 += 16;
          v22[2] = llroundf(v31);
          v22[3] = llroundf(v26 * 65535.0);
          v22 += 4;
          --v20;
        }
        while (v20);
      }
      result += v11;
      v19 += v12;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Tone_Mat_TRC_b64a(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Tone_Mat_TRC_b64a_GCD);
  return 0;
}

unint64_t vt_Copy_RGfA_TRC_Tone_Mat_TRC_b64a_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _WORD *v37;
  uint64_t v38;
  float32x2_t v39;
  uint64_t v40;
  uint64_t v41;
  _WORD *v42;
  float32x2_t v43;
  float v54;
  float v55;
  float v58;
  float v59;
  float v60;
  float v63;
  float v67;
  float v71;
  float v73;

  v2 = *(_QWORD *)(result + 28);
  v3 = *(unsigned __int8 *)result;
  v4 = v2 * a2 / v3;
  v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    v6 = 0;
    v7 = *(_QWORD *)(result + 20);
    v8 = v4 + *(_QWORD *)(result + 44);
    v9 = v5 - v4;
    v10 = *(_QWORD *)(result + 152);
    v11 = *(_QWORD **)(result + 56);
    v12 = **(_QWORD **)(result + 64);
    v13 = **(_QWORD **)(result + 136);
    v14 = *(float *)(v10 + 72);
    v15 = *(float *)(v10 + 76);
    v16 = *(float *)(v10 + 80);
    v17 = *(float *)(v10 + 84);
    v18 = *(float *)(v10 + 88);
    v19 = *(float *)(v10 + 92);
    v20 = *(float *)(v10 + 96);
    v21 = *(float *)(v10 + 100);
    v22 = v10 + 164;
    v23 = v10 + 16548;
    v24 = v10 + 32932;
    v25 = *(float *)(v10 + 104);
    v26 = *(float *)(v10 + 108);
    v27 = *(float *)(v10 + 112);
    v28 = *(float *)(v10 + 116);
    v29 = *(float *)(v10 + 120);
    v30 = *(_QWORD *)(result + 112);
    v31 = *(_QWORD *)(result + 104) * a2 / v3 + *(_QWORD *)(result + 120);
    v32 = *(_QWORD *)(result + 36);
    v33 = *(unsigned __int8 *)(v10 + 157);
    v34 = *(unsigned __int8 *)(v10 + 156);
    v35 = **(_QWORD **)(result + 128) + v31 * v13;
    result = *(unsigned __int8 *)(v10 + 155);
    v36 = *(unsigned __int8 *)(v10 + 154);
    v37 = (_WORD *)(v35 + 8 * v30);
    v38 = *v11 + v12 * v8 + 16 * v32;
    v39 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v7)
      {
        v40 = v7;
        v41 = v38;
        v42 = v37;
        do
        {
          v43.i32[0] = *(_DWORD *)(v41 + 4 * v36);
          v43.i32[1] = *(_DWORD *)(v41 + 4 * result);
          _D26 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v43, v39), 0), v39)));
          _D26.i16[0] = *(_WORD *)(v22 + 2 * _D26.u32[0]);
          __asm { FCVT            S26, H26 }
          _H28 = *(_WORD *)(v22 + 2 * _D26.u32[1]);
          __asm { FCVT            S28, H28 }
          _H27 = *(_WORD *)(v22 + 2 * llroundf(fminf(fmaxf(*(float *)(v41 + 4 * v34) * 8191.0, 0.0), 8191.0)));
          __asm { FCVT            S30, H27 }
          v54 = (float)((float)((float)(v27 * _S28) + (float)(v26 * _S26)) + (float)(v28 * _S30))
              + (float)(v29 * fmaxf(_S26, fmaxf(_S28, _S30)));
          v55 = 8191.0;
          if (v54 <= 8191.0)
          {
            v55 = v54;
            if (v54 < 0.0)
              v55 = 0.0;
          }
          _H27 = *(_WORD *)(v23 + 2 * llroundf(v55));
          __asm { FCVT            S31, H27 }
          v58 = _S26 * _S31;
          v59 = _S28 * _S31;
          v60 = _S30 * _S31;
          _H31 = *(_WORD *)(v24
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v15 * v59) + (float)((float)(_S26 * _S31) * v14))+ (float)((float)(_S30 * _S31) * v16), 0.0), 8191.0)));
          __asm { FCVT            S30, H31 }
          v63 = 65535.0;
          if (_S30 <= 65535.0)
          {
            __asm { FCVT            S26, H31 }
            _NF = _S26 < 0.0;
            v63 = _S30;
            if (_NF)
              v63 = 0.0;
          }
          _H8 = *(_WORD *)(v24
                         + 2
                         * llroundf(fminf(fmaxf((float)((float)(v18 * v59) + (float)(v58 * v17)) + (float)(v60 * v19), 0.0), 8191.0)));
          __asm { FCVT            S31, H8 }
          v67 = 65535.0;
          if (_S31 <= 65535.0)
          {
            __asm { FCVT            S30, H8 }
            _NF = _S30 < 0.0;
            v67 = _S31;
            if (_NF)
              v67 = 0.0;
          }
          _H29 = *(_WORD *)(v24
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v21 * v59) + (float)(v58 * v20)) + (float)(v60 * v25), 0.0), 8191.0)));
          __asm { FCVT            S28, H29 }
          v71 = 65535.0;
          if (_S28 <= 65535.0)
          {
            __asm { FCVT            S27, H29 }
            _NF = _S27 < 0.0;
            v71 = _S28;
            if (_NF)
              v71 = 0.0;
          }
          v73 = *(float *)(v41 + 4 * v33);
          v41 += 16;
          *v42 = __rev16(llroundf(v73 * 65535.0));
          v42[1] = __rev16(llroundf(v63));
          v42[2] = __rev16(llroundf(v67));
          v42[3] = __rev16(llroundf(v71));
          v42 += 4;
          --v40;
        }
        while (v40);
      }
      v38 += v12;
      v37 = (_WORD *)((char *)v37 + v13);
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Mat_TRC_b64a(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Mat_TRC_b64a_GCD);
  return 0;
}

unint64_t vt_Copy_RGfA_TRC_Mat_TRC_b64a_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _WORD *v32;
  uint64_t v33;
  float32x2_t v34;
  uint64_t v35;
  uint64_t v36;
  _WORD *v37;
  float32x2_t v38;
  float v49;
  float v53;
  float v57;
  float v59;

  v2 = *(_QWORD *)(result + 28);
  v3 = *(unsigned __int8 *)result;
  v4 = v2 * a2 / v3;
  v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    v6 = 0;
    v7 = *(_QWORD *)(result + 20);
    v8 = v4 + *(_QWORD *)(result + 44);
    v9 = v5 - v4;
    v10 = *(_QWORD *)(result + 152);
    v11 = *(_QWORD **)(result + 56);
    v12 = **(_QWORD **)(result + 64);
    v13 = **(_QWORD **)(result + 136);
    v14 = *(float *)(v10 + 72);
    v15 = *(float *)(v10 + 76);
    v16 = *(float *)(v10 + 80);
    v17 = *(float *)(v10 + 84);
    v18 = *(float *)(v10 + 88);
    v19 = *(float *)(v10 + 92);
    v20 = *(float *)(v10 + 96);
    v21 = *(float *)(v10 + 100);
    v22 = *(float *)(v10 + 104);
    v23 = v10 + 164;
    v24 = v10 + 16548;
    v25 = *(_QWORD *)(result + 112);
    v26 = *(_QWORD *)(result + 104) * a2 / v3 + *(_QWORD *)(result + 120);
    v27 = *(_QWORD *)(result + 36);
    v28 = *(unsigned __int8 *)(v10 + 157);
    v29 = *(unsigned __int8 *)(v10 + 156);
    v30 = **(_QWORD **)(result + 128) + v26 * v13;
    v31 = *(unsigned __int8 *)(v10 + 155);
    result = *(unsigned __int8 *)(v10 + 154);
    v32 = (_WORD *)(v30 + 8 * v25);
    v33 = *v11 + v12 * v8 + 16 * v27;
    v34 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v7)
      {
        v35 = v7;
        v36 = v33;
        v37 = v32;
        do
        {
          v38.i32[0] = *(_DWORD *)(v36 + 4 * result);
          v38.i32[1] = *(_DWORD *)(v36 + 4 * v31);
          _D22 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v38, v34), 0), v34)));
          _D22.i16[0] = *(_WORD *)(v23 + 2 * _D22.u32[0]);
          __asm { FCVT            S23, H22 }
          _D22.i16[0] = *(_WORD *)(v23 + 2 * _D22.u32[1]);
          __asm { FCVT            S24, H22 }
          _D22.i16[0] = *(_WORD *)(v23 + 2 * llroundf(fminf(fmaxf(*(float *)(v36 + 4 * v29) * 8191.0, 0.0), 8191.0)));
          __asm { FCVT            S25, H22 }
          _H27 = *(_WORD *)(v24
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v15 * _S24) + (float)(_S23 * v14)) + (float)(_S25 * v16), 0.0), 8191.0)));
          __asm { FCVT            S26, H27 }
          v49 = 65535.0;
          if (_S26 <= 65535.0)
          {
            __asm { FCVT            S22, H27 }
            _NF = _S22 < 0.0;
            v49 = _S26;
            if (_NF)
              v49 = 0.0;
          }
          _H28 = *(_WORD *)(v24
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v18 * _S24) + (float)(_S23 * v17)) + (float)(_S25 * v19), 0.0), 8191.0)));
          __asm { FCVT            S27, H28 }
          v53 = 65535.0;
          if (_S27 <= 65535.0)
          {
            __asm { FCVT            S26, H28 }
            _NF = _S26 < 0.0;
            v53 = _S27;
            if (_NF)
              v53 = 0.0;
          }
          _H25 = *(_WORD *)(v24
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v21 * _S24) + (float)(_S23 * v20)) + (float)(_S25 * v22), 0.0), 8191.0)));
          __asm { FCVT            S24, H25 }
          v57 = 65535.0;
          if (_S24 <= 65535.0)
          {
            __asm { FCVT            S23, H25 }
            _NF = _S23 < 0.0;
            v57 = _S24;
            if (_NF)
              v57 = 0.0;
          }
          v59 = *(float *)(v36 + 4 * v28);
          v36 += 16;
          *v37 = __rev16(llroundf(v59 * 65535.0));
          v37[1] = __rev16(llroundf(v49));
          v37[2] = __rev16(llroundf(v53));
          v37[3] = __rev16(llroundf(v57));
          v37 += 4;
          --v35;
        }
        while (v35);
      }
      v33 += v12;
      v32 = (_WORD *)((char *)v32 + v13);
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_RGfA_rgb_b64a(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_rgb_b64a_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_RGfA_rgb_b64a_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  _WORD *v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;

  v2 = *(_QWORD *)(result + 28);
  v3 = *result;
  v4 = v2 * a2 / v3;
  v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    v6 = 0;
    v7 = *(_QWORD *)(result + 20);
    v8 = v4 + *(_QWORD *)(result + 44);
    v9 = v5 - v4;
    v10 = *((_QWORD *)result + 19);
    v11 = **((_QWORD **)result + 8);
    v12 = **((_QWORD **)result + 17);
    v13 = (float)*(unsigned int *)(v10 + 136);
    v14 = *((_QWORD *)result + 13) * a2 / v3 + *((_QWORD *)result + 15);
    v15 = *(unsigned __int8 *)(v10 + 157);
    v16 = *(unsigned __int8 *)(v10 + 156);
    v17 = *(unsigned __int8 *)(v10 + 155);
    v18 = *(unsigned __int8 *)(v10 + 154);
    v19 = **((_QWORD **)result + 16) + v14 * v12 + 8 * *((_QWORD *)result + 14);
    result = (unsigned __int8 *)(**((_QWORD **)result + 7) + v11 * v8 + 16 * *(_QWORD *)(result + 36));
    do
    {
      if (v7)
      {
        v20 = v7;
        v21 = result;
        v22 = (_WORD *)v19;
        do
        {
          v23 = *(float *)&v21[4 * v18] * v13;
          v24 = 65535.0;
          if (v23 <= 65535.0)
          {
            v24 = *(float *)&v21[4 * v18] * v13;
            if (v23 < 0.0)
              v24 = 0.0;
          }
          v25 = *(float *)&v21[4 * v17] * v13;
          v26 = 65535.0;
          if (v25 <= 65535.0)
          {
            v26 = *(float *)&v21[4 * v17] * v13;
            if (v25 < 0.0)
              v26 = 0.0;
          }
          v27 = *(float *)&v21[4 * v16] * v13;
          v28 = 65535.0;
          if (v27 <= 65535.0)
          {
            v28 = *(float *)&v21[4 * v16] * v13;
            if (v27 < 0.0)
              v28 = 0.0;
          }
          v29 = *(float *)&v21[4 * v15];
          v21 += 16;
          *v22 = __rev16(llroundf(v29 * 65535.0));
          v22[1] = __rev16(llroundf(v24));
          v22[2] = __rev16(llroundf(v26));
          v22[3] = __rev16(llroundf(v28));
          v22 += 4;
          --v20;
        }
        while (v20);
      }
      result += v11;
      v19 += v12;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Tone_Mat_TRC_RGhA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Tone_Mat_TRC_RGhA_GCD);
  return 0;
}

unint64_t vt_Copy_RGfA_TRC_Tone_Mat_TRC_RGhA_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _WORD *v37;
  uint64_t v38;
  float32x2_t v39;
  uint64_t v40;
  uint64_t v41;
  _WORD *v42;
  float32x2_t v43;
  float v54;
  float v55;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;

  v2 = *(_QWORD *)(result + 28);
  v3 = *(unsigned __int8 *)result;
  v4 = v2 * a2 / v3;
  v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    v6 = 0;
    v7 = *(_QWORD *)(result + 20);
    v8 = v4 + *(_QWORD *)(result + 44);
    v9 = v5 - v4;
    v10 = *(_QWORD *)(result + 152);
    v11 = *(_QWORD **)(result + 56);
    v12 = **(_QWORD **)(result + 64);
    v13 = **(_QWORD **)(result + 136);
    v14 = *(float *)(v10 + 72);
    v15 = *(float *)(v10 + 76);
    v16 = *(float *)(v10 + 80);
    v17 = *(float *)(v10 + 84);
    v18 = *(float *)(v10 + 88);
    v19 = *(float *)(v10 + 92);
    v20 = *(float *)(v10 + 96);
    v21 = *(float *)(v10 + 100);
    v22 = v10 + 164;
    v23 = v10 + 16548;
    v24 = v10 + 32932;
    v25 = *(float *)(v10 + 104);
    v26 = *(float *)(v10 + 108);
    v27 = *(float *)(v10 + 112);
    v28 = *(float *)(v10 + 116);
    v29 = *(float *)(v10 + 120);
    v30 = *(_QWORD *)(result + 112);
    v31 = *(_QWORD *)(result + 104) * a2 / v3 + *(_QWORD *)(result + 120);
    v32 = *(_QWORD *)(result + 36);
    v33 = *(unsigned __int8 *)(v10 + 157);
    v34 = *(unsigned __int8 *)(v10 + 156);
    v35 = **(_QWORD **)(result + 128) + v31 * v13;
    result = *(unsigned __int8 *)(v10 + 155);
    v36 = *(unsigned __int8 *)(v10 + 154);
    v37 = (_WORD *)(v35 + 8 * v30);
    v38 = *v11 + v12 * v8 + 16 * v32;
    v39 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v7)
      {
        v40 = v7;
        v41 = v38;
        v42 = v37;
        do
        {
          v43.i32[0] = *(_DWORD *)(v41 + 4 * v36);
          v43.i32[1] = *(_DWORD *)(v41 + 4 * result);
          _D25 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v43, v39), 0), v39)));
          _D25.i16[0] = *(_WORD *)(v22 + 2 * _D25.u32[0]);
          __asm { FCVT            S25, H25 }
          _H27 = *(_WORD *)(v22 + 2 * _D25.u32[1]);
          __asm { FCVT            S26, H27 }
          _H27 = *(_WORD *)(v22 + 2 * llroundf(fminf(fmaxf(*(float *)(v41 + 4 * v34) * 8191.0, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          v54 = (float)((float)((float)(v27 * _S26) + (float)(v26 * _S25)) + (float)(v28 * _S27))
              + (float)(v29 * fmaxf(_S25, fmaxf(_S26, _S27)));
          v55 = 8191.0;
          if (v54 <= 8191.0)
          {
            v55 = v54;
            if (v54 < 0.0)
              v55 = 0.0;
          }
          _S29 = *(_DWORD *)(v41 + 4 * v33);
          v41 += 16;
          _H28 = *(_WORD *)(v23 + 2 * llroundf(v55));
          __asm { FCVT            S28, H28 }
          v59 = _S25 * _S28;
          v60 = _S26 * _S28;
          v61 = _S27 * _S28;
          v62 = (float)((float)(v15 * v60) + (float)(v59 * v14)) + (float)(v61 * v16);
          v63 = (float)((float)(v18 * v60) + (float)(v59 * v17)) + (float)(v61 * v19);
          _S25 = (float)((float)(v21 * v60) + (float)(v59 * v20)) + (float)(v61 * v25);
          LOWORD(v61) = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v63, 0.0), 8191.0)));
          LOWORD(_S25) = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(_S25, 0.0), 8191.0)));
          *v42 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v62, 0.0), 8191.0)));
          v42[1] = LOWORD(v61);
          v42[2] = LOWORD(_S25);
          __asm { FCVT            H25, S29 }
          v42[3] = LOWORD(_S25);
          v42 += 4;
          --v40;
        }
        while (v40);
      }
      v38 += v12;
      v37 = (_WORD *)((char *)v37 + v13);
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Mat_TRC_RGhA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Mat_TRC_RGhA_GCD);
  return 0;
}

unint64_t vt_Copy_RGfA_TRC_Mat_TRC_RGhA_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _WORD *v32;
  uint64_t v33;
  float32x2_t v34;
  uint64_t v35;
  uint64_t v36;
  _WORD *v37;
  __int32 *v38;
  float32x2_t v41;
  float v50;
  float v51;

  v2 = *(_QWORD *)(result + 28);
  v3 = *(unsigned __int8 *)result;
  v4 = v2 * a2 / v3;
  v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    v6 = 0;
    v7 = *(_QWORD *)(result + 20);
    v8 = v4 + *(_QWORD *)(result + 44);
    v9 = v5 - v4;
    v10 = *(_QWORD *)(result + 152);
    v11 = *(_QWORD **)(result + 56);
    v12 = **(_QWORD **)(result + 64);
    v13 = **(_QWORD **)(result + 136);
    v14 = *(float *)(v10 + 72);
    v15 = *(float *)(v10 + 76);
    v16 = *(float *)(v10 + 80);
    v17 = *(float *)(v10 + 84);
    v18 = *(float *)(v10 + 88);
    v19 = *(float *)(v10 + 92);
    v20 = *(float *)(v10 + 96);
    v21 = *(float *)(v10 + 100);
    v22 = *(float *)(v10 + 104);
    v23 = v10 + 164;
    v24 = v10 + 16548;
    v25 = *(_QWORD *)(result + 112);
    v26 = *(_QWORD *)(result + 104) * a2 / v3 + *(_QWORD *)(result + 120);
    v27 = *(_QWORD *)(result + 36);
    v28 = *(unsigned __int8 *)(v10 + 157);
    v29 = *(unsigned __int8 *)(v10 + 156);
    v30 = **(_QWORD **)(result + 128) + v26 * v13;
    v31 = *(unsigned __int8 *)(v10 + 155);
    result = *(unsigned __int8 *)(v10 + 154);
    v32 = (_WORD *)(v30 + 8 * v25);
    v33 = *v11 + v12 * v8 + 16 * v27;
    v34 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v7)
      {
        v35 = v7;
        v36 = v33;
        v37 = v32;
        do
        {
          v38 = (__int32 *)(v36 + 4 * v31);
          _S21 = *(float *)(v36 + 4 * v29);
          _S22 = *(_DWORD *)(v36 + 4 * v28);
          v41.i32[0] = *(_DWORD *)(v36 + 4 * result);
          v36 += 16;
          v41.i32[1] = *v38;
          _D23 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v41, v34), 0), v34)));
          _D23.i16[0] = *(_WORD *)(v23 + 2 * _D23.u32[0]);
          _H24 = *(_WORD *)(v23 + 2 * _D23.u32[1]);
          __asm { FCVT            S24, H24 }
          LOWORD(_S21) = *(_WORD *)(v23 + 2 * llroundf(fminf(fmaxf(_S21 * 8191.0, 0.0), 8191.0)));
          __asm
          {
            FCVT            S23, H23
            FCVT            S21, H21
          }
          v50 = (float)((float)(v15 * _S24) + (float)(*(float *)_D23.i32 * v14)) + (float)(_S21 * v16);
          v51 = (float)((float)(v18 * _S24) + (float)(*(float *)_D23.i32 * v17)) + (float)(_S21 * v19);
          _S21 = (float)((float)(v21 * _S24) + (float)(*(float *)_D23.i32 * v20)) + (float)(_S21 * v22);
          _D23.i16[0] = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v51, 0.0), 8191.0)));
          LOWORD(_S21) = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(_S21, 0.0), 8191.0)));
          *v37 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v50, 0.0), 8191.0)));
          v37[1] = _D23.i16[0];
          v37[2] = LOWORD(_S21);
          __asm { FCVT            H21, S22 }
          v37[3] = LOWORD(_S21);
          v37 += 4;
          --v35;
        }
        while (v35);
      }
      v33 += v12;
      v32 = (_WORD *)((char *)v32 + v13);
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_RGfA_rgb_RGhA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_rgb_RGhA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_RGfA_rgb_RGhA_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  _WORD *v21;

  v2 = *(_QWORD *)(result + 28);
  v3 = *result;
  v4 = v2 * a2 / v3;
  v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    v6 = 0;
    v7 = *(_QWORD *)(result + 20);
    v8 = v4 + *(_QWORD *)(result + 44);
    v9 = v5 - v4;
    v10 = **((_QWORD **)result + 8);
    v11 = **((_QWORD **)result + 17);
    v12 = (unsigned __int8 *)*((_QWORD *)result + 19);
    v13 = *((_QWORD *)result + 13) * a2 / v3 + *((_QWORD *)result + 15);
    v14 = v12[157];
    v15 = v12[156];
    v16 = v12[155];
    v17 = v12[154];
    v18 = **((_QWORD **)result + 16) + v13 * v11 + 8 * *((_QWORD *)result + 14);
    result = (unsigned __int8 *)(**((_QWORD **)result + 7) + v10 * v8 + 16 * *(_QWORD *)(result + 36));
    do
    {
      if (v7)
      {
        v19 = v7;
        v20 = result;
        v21 = (_WORD *)v18;
        do
        {
          _S0 = *(_DWORD *)&v20[4 * v17];
          _S1 = *(_DWORD *)&v20[4 * v16];
          _S2 = *(_DWORD *)&v20[4 * v15];
          _S3 = *(_DWORD *)&v20[4 * v14];
          v20 += 16;
          __asm { FCVT            H0, S0 }
          *v21 = _S0;
          __asm { FCVT            H0, S1 }
          v21[1] = _S0;
          __asm { FCVT            H0, S2 }
          v21[2] = _S0;
          __asm { FCVT            H0, S3 }
          v21[3] = _S0;
          v21 += 4;
          --v19;
        }
        while (v19);
      }
      result += v10;
      v18 += v11;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Tone_Mat_TRC_RGfA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Tone_Mat_TRC_RGfA_GCD);
  return 0;
}

unint64_t vt_Copy_RGfA_TRC_Tone_Mat_TRC_RGfA_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  float32x2_t v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  float32x2_t v43;
  float v54;
  float v55;
  int v56;
  float v59;
  float v62;
  float v63;

  v2 = *(_QWORD *)(result + 28);
  v3 = *(unsigned __int8 *)result;
  v4 = v2 * a2 / v3;
  v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    v6 = 0;
    v7 = *(_QWORD *)(result + 20);
    v8 = v4 + *(_QWORD *)(result + 44);
    v9 = v5 - v4;
    v10 = *(_QWORD *)(result + 152);
    v11 = *(_QWORD **)(result + 56);
    v12 = **(_QWORD **)(result + 64);
    v13 = **(_QWORD **)(result + 136);
    v14 = *(float *)(v10 + 72);
    v15 = *(float *)(v10 + 76);
    v16 = *(float *)(v10 + 80);
    v17 = *(float *)(v10 + 84);
    v18 = *(float *)(v10 + 88);
    v19 = *(float *)(v10 + 92);
    v20 = *(float *)(v10 + 96);
    v21 = *(float *)(v10 + 100);
    v22 = v10 + 164;
    v23 = v10 + 16548;
    v24 = v10 + 32932;
    v25 = *(float *)(v10 + 104);
    v26 = *(float *)(v10 + 108);
    v27 = *(float *)(v10 + 112);
    v28 = *(float *)(v10 + 116);
    v29 = *(float *)(v10 + 120);
    v30 = *(_QWORD *)(result + 112);
    v31 = *(_QWORD *)(result + 104) * a2 / v3 + *(_QWORD *)(result + 120);
    v32 = *(_QWORD *)(result + 36);
    v33 = *(unsigned __int8 *)(v10 + 157);
    v34 = *(unsigned __int8 *)(v10 + 156);
    v35 = **(_QWORD **)(result + 128) + v31 * v13;
    result = *(unsigned __int8 *)(v10 + 155);
    v36 = *(unsigned __int8 *)(v10 + 154);
    v37 = (_DWORD *)(v35 + 16 * v30);
    v38 = *v11 + v12 * v8 + 16 * v32;
    v39 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v7)
      {
        v40 = v7;
        v41 = v38;
        v42 = v37;
        do
        {
          v43.i32[0] = *(_DWORD *)(v41 + 4 * v36);
          v43.i32[1] = *(_DWORD *)(v41 + 4 * result);
          _D25 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v43, v39), 0), v39)));
          _D25.i16[0] = *(_WORD *)(v22 + 2 * _D25.u32[0]);
          __asm { FCVT            S25, H25 }
          _H27 = *(_WORD *)(v22 + 2 * _D25.u32[1]);
          __asm { FCVT            S26, H27 }
          _H27 = *(_WORD *)(v22 + 2 * llroundf(fminf(fmaxf(*(float *)(v41 + 4 * v34) * 8191.0, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          v54 = (float)((float)((float)(v27 * _S26) + (float)(v26 * _S25)) + (float)(v28 * _S27))
              + (float)(v29 * fmaxf(_S25, fmaxf(_S26, _S27)));
          v55 = 8191.0;
          if (v54 <= 8191.0)
          {
            v55 = v54;
            if (v54 < 0.0)
              v55 = 0.0;
          }
          v56 = *(_DWORD *)(v41 + 4 * v33);
          v41 += 16;
          _H28 = *(_WORD *)(v23 + 2 * llroundf(v55));
          __asm { FCVT            S28, H28 }
          v59 = _S25 * _S28;
          _S26 = _S26 * _S28;
          _S27 = _S27 * _S28;
          v62 = (float)((float)(v15 * _S26) + (float)(v59 * v14)) + (float)(_S27 * v16);
          v63 = (float)((float)(v18 * _S26) + (float)(v59 * v17)) + (float)(_S27 * v19);
          _S25 = (float)((float)(v21 * _S26) + (float)(v59 * v20)) + (float)(_S27 * v25);
          LOWORD(_S26) = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v62, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          LOWORD(_S27) = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v63, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          LOWORD(_S25) = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(_S25, 0.0), 8191.0)));
          *v42 = _S26;
          v42[1] = _S27;
          __asm { FCVT            S25, H25 }
          v42[2] = _S25;
          v42[3] = v56;
          v42 += 4;
          --v40;
        }
        while (v40);
      }
      v38 += v12;
      v37 = (_DWORD *)((char *)v37 + v13);
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Mat_TRC_RGfA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Mat_TRC_RGfA_GCD);
  return 0;
}

unint64_t vt_Copy_RGfA_TRC_Mat_TRC_RGfA_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  float32x2_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  float32x2_t v39;
  int v40;
  float v49;
  float v50;

  v2 = *(_QWORD *)(result + 28);
  v3 = *(unsigned __int8 *)result;
  v4 = v2 * a2 / v3;
  v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    v6 = 0;
    v7 = *(_QWORD *)(result + 20);
    v8 = v4 + *(_QWORD *)(result + 44);
    v9 = v5 - v4;
    v10 = *(_QWORD *)(result + 152);
    v11 = *(_QWORD **)(result + 56);
    v12 = **(_QWORD **)(result + 64);
    v13 = **(_QWORD **)(result + 136);
    v14 = *(float *)(v10 + 72);
    v15 = *(float *)(v10 + 76);
    v16 = *(float *)(v10 + 80);
    v17 = *(float *)(v10 + 84);
    v18 = *(float *)(v10 + 88);
    v19 = *(float *)(v10 + 92);
    v20 = *(float *)(v10 + 96);
    v21 = *(float *)(v10 + 100);
    v22 = *(float *)(v10 + 104);
    v23 = v10 + 164;
    v24 = v10 + 16548;
    v25 = *(_QWORD *)(result + 112);
    v26 = *(_QWORD *)(result + 104) * a2 / v3 + *(_QWORD *)(result + 120);
    v27 = *(_QWORD *)(result + 36);
    v28 = *(unsigned __int8 *)(v10 + 157);
    v29 = *(unsigned __int8 *)(v10 + 156);
    v30 = **(_QWORD **)(result + 128) + v26 * v13;
    v31 = *(unsigned __int8 *)(v10 + 155);
    result = *(unsigned __int8 *)(v10 + 154);
    v32 = (_DWORD *)(v30 + 16 * v25);
    v33 = *v11 + v12 * v8 + 16 * v27;
    v34 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v7)
      {
        v35 = v7;
        v36 = v33;
        v37 = v32;
        do
        {
          _S21 = *(float *)(v36 + 4 * v29);
          v39.i32[0] = *(_DWORD *)(v36 + 4 * result);
          v39.i32[1] = *(_DWORD *)(v36 + 4 * v31);
          v40 = *(_DWORD *)(v36 + 4 * v28);
          v36 += 16;
          _D22 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v39, v34), 0), v34)));
          _D22.i16[0] = *(_WORD *)(v23 + 2 * _D22.u32[0]);
          __asm { FCVT            S22, H22 }
          _H24 = *(_WORD *)(v23 + 2 * _D22.u32[1]);
          __asm { FCVT            S24, H24 }
          LOWORD(_S21) = *(_WORD *)(v23 + 2 * llroundf(fminf(fmaxf(_S21 * 8191.0, 0.0), 8191.0)));
          __asm { FCVT            S21, H21 }
          v49 = (float)((float)(v15 * _S24) + (float)(*(float *)_D22.i32 * v14)) + (float)(_S21 * v16);
          v50 = (float)((float)(v18 * _S24) + (float)(*(float *)_D22.i32 * v17)) + (float)(_S21 * v19);
          _S21 = (float)((float)(v21 * _S24) + (float)(*(float *)_D22.i32 * v20)) + (float)(_S21 * v22);
          _D22.i16[0] = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v49, 0.0), 8191.0)));
          __asm { FCVT            S22, H22 }
          LOWORD(_S24) = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v50, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          LOWORD(_S21) = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(_S21, 0.0), 8191.0)));
          *v37 = _D22.i32[0];
          v37[1] = _S24;
          __asm { FCVT            S21, H21 }
          v37[2] = _S21;
          v37[3] = v40;
          v37 += 4;
          --v35;
        }
        while (v35);
      }
      v33 += v12;
      v32 = (_DWORD *)((char *)v32 + v13);
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_RGfA_rgb_RGfA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  NSObject *global_queue;
  _BYTE v16[56];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  memset(v16, 0, sizeof(v16));
  v16[0] = *(_BYTE *)(a1 + 162);
  v9 = a2[2];
  v10 = *a6;
  v11 = a6[2];
  v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  v20 = v10;
  v21 = *(_OWORD *)&v16[20];
  v22 = v11;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v23 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_rgb_RGfA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_RGfA_rgb_RGfA_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  _DWORD *v21;
  int v22;
  int v23;
  int v24;
  int v25;

  v2 = *(_QWORD *)(result + 28);
  v3 = *result;
  v4 = v2 * a2 / v3;
  v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    v6 = 0;
    v7 = *(_QWORD *)(result + 20);
    v8 = v4 + *(_QWORD *)(result + 44);
    v9 = v5 - v4;
    v10 = **((_QWORD **)result + 8);
    v11 = **((_QWORD **)result + 17);
    v12 = (unsigned __int8 *)*((_QWORD *)result + 19);
    v13 = *((_QWORD *)result + 13) * a2 / v3 + *((_QWORD *)result + 15);
    v14 = v12[157];
    v15 = v12[156];
    v16 = v12[155];
    v17 = v12[154];
    v18 = **((_QWORD **)result + 16) + v13 * v11 + 16 * *((_QWORD *)result + 14);
    result = (unsigned __int8 *)(**((_QWORD **)result + 7) + v10 * v8 + 16 * *(_QWORD *)(result + 36));
    do
    {
      if (v7)
      {
        v19 = v7;
        v20 = result;
        v21 = (_DWORD *)v18;
        do
        {
          v22 = *(_DWORD *)&v20[4 * v17];
          v23 = *(_DWORD *)&v20[4 * v16];
          v24 = *(_DWORD *)&v20[4 * v15];
          v25 = *(_DWORD *)&v20[4 * v14];
          v20 += 16;
          *v21 = v22;
          v21[1] = v23;
          v21[2] = v24;
          v21[3] = v25;
          v21 += 4;
          --v19;
        }
        while (v19);
      }
      result += v10;
      v18 += v11;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Tone_Mat_TRC_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Tone_Mat_TRC_420vf_GCD);
  return 0;
}

_QWORD *vt_Copy_xf422_TRC_Tone_Mat_TRC_420vf_GCD(_QWORD *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  unsigned int v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  unsigned int v44;
  char v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  char v56;
  unsigned __int16 *v57;
  float v58;
  float v59;
  float v60;
  float v61;
  _BYTE *v62;
  char *v63;
  size_t v64;
  unsigned __int16 *v65;
  char *v66;
  _BYTE *v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  BOOL v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  unsigned int v110;
  float v123;
  float v124;
  float v125;
  float v130;
  float v131;
  float v136;
  float v137;
  float v138;
  float v143;
  float v144;
  float v145;
  float v147;
  float v148;
  float v149;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v158;
  float v161;
  float v162;
  float v163;
  float v164;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v193;
  float v194;
  float v195;
  char v196;
  float v197;
  float v198;
  char v199;
  float v200;
  float v201;
  char v202;
  float v203;
  float v204;
  float v205;
  float v206;
  float v207;
  float v208;
  float v209;
  float v210;
  float v211;
  uint64_t v212;
  size_t v213;
  _BYTE *v214;
  unsigned __int16 *v215;
  unsigned int v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  float v220;
  float v221;
  float v222;
  float v223;
  float v224;
  float v225;
  float v226;
  float v227;
  float v228;
  float v229;
  float v230;
  float v231;
  float v232;
  float v233;
  float v234;
  float v235;
  float v236;
  float v237;
  float v238;
  float v239;
  float v240;
  float v241;
  float v242;
  float v243;
  float v244;
  float v245;
  float v246;
  float v247;
  float v248;
  float v249;
  float v250;

  v5 = *(_QWORD *)((char *)result + 28);
  v6 = 2 * *(unsigned __int8 *)result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)((char *)result + 20);
    v11 = *(_QWORD *)((char *)result + 36);
    v12 = *(_QWORD *)((char *)result + 44) + 2 * v7;
    v13 = 2 * v8 - 2 * v7;
    v14 = result[14];
    v15 = (uint64_t *)result[16];
    v16 = result[15] + 2 * (result[13] * a2 / v6);
    v17 = result[19];
    v18 = (_QWORD *)result[7];
    v19 = (uint64_t *)result[8];
    v20 = (uint64_t *)result[17];
    v21 = *v19;
    v22 = v19[1];
    v217 = v19[2];
    v219 = v18[2];
    v23 = v219 + v217 * v12 + 2 * v11;
    v24 = *v20;
    v25 = v20[1];
    v26 = v20[2];
    v218 = v15[2];
    v27 = (_BYTE *)(v218 + v26 * v16 + v14);
    *(float *)&v28 = 8191.0 / (float)*(unsigned int *)(v17 + 128);
    LOWORD(a5) = *(_WORD *)(v17 + 140);
    v29 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v17 + 142);
    v30 = (float)LODWORD(a5);
    v31 = *(float *)&v28 * *(float *)v17;
    v32 = *(float *)&v28 * *(float *)(v17 + 8);
    v33 = *(float *)&v28 * *(float *)(v17 + 16);
    v34 = *(float *)&v28 * *(float *)(v17 + 20);
    v35 = *(float *)&v28 * *(float *)(v17 + 28);
    LOWORD(v28) = *(_WORD *)(v17 + 144);
    v36 = (float)v28;
    LOWORD(v28) = *(_WORD *)(v17 + 146);
    v37 = (float)v28;
    LOWORD(v28) = *(_WORD *)(v17 + 148);
    v38 = (float)v28;
    LOWORD(v28) = *(_WORD *)(v17 + 150);
    v39 = (float)v28;
    v250 = v39;
    v240 = *(float *)(v17 + 40);
    v241 = *(float *)(v17 + 36);
    v238 = *(float *)(v17 + 48) * 0.25;
    v239 = *(float *)(v17 + 44);
    v236 = *(float *)(v17 + 56) * 0.25;
    v237 = *(float *)(v17 + 52) * 0.25;
    v234 = *(float *)(v17 + 64) * 0.25;
    v235 = *(float *)(v17 + 60) * 0.25;
    v232 = *(float *)(v17 + 68) * 0.25;
    v233 = *(float *)(v17 + 72);
    v230 = *(float *)(v17 + 80);
    v231 = *(float *)(v17 + 76);
    v228 = *(float *)(v17 + 88);
    v229 = *(float *)(v17 + 84);
    v226 = *(float *)(v17 + 96);
    v227 = *(float *)(v17 + 92);
    v224 = *(float *)(v17 + 104);
    v225 = *(float *)(v17 + 100);
    v40 = v17 + 164;
    result = (_QWORD *)(v17 + 16548);
    v41 = v18[1];
    v42 = (char *)(*v18 + *v19 * v12 + 2 * v11);
    v43 = v41 + v22 * v12 + 2 * v11;
    if (!v41)
      v43 = 0;
    v44 = *(unsigned __int8 *)(v17 + 124);
    v45 = 16 - v44;
    _CF = v44 >= 0x11;
    v47 = *v15;
    v48 = v15[1];
    v49 = v47 + v24 * v16;
    if (_CF)
      v50 = 0;
    else
      v50 = v45;
    if (v16 >= 0)
      v51 = v16;
    else
      v51 = v16 + 1;
    v52 = v48 + v25 * (v51 >> 1);
    v53 = v17 + 32932;
    v54 = (_BYTE *)(v49 + v14);
    v55 = v52 + v14;
    v56 = v50;
    v57 = (unsigned __int16 *)(v43 + 2);
    v58 = *(float *)(v17 + 108);
    v59 = *(float *)(v17 + 112);
    v61 = *(float *)(v17 + 116);
    v60 = *(float *)(v17 + 120);
    v248 = (float)LODWORD(a5);
    v249 = v29;
    v246 = v32;
    v247 = v31;
    v244 = v34;
    v245 = v33;
    LOWORD(v39) = *(_WORD *)(v17 + 152);
    v242 = (float)LODWORD(v39);
    v243 = v37;
    v222 = v59;
    v223 = v35;
    v220 = v61;
    v221 = v58;
    do
    {
      v62 = &v54[v24];
      v63 = &v42[v21];
      if (v10)
      {
        v64 = 0;
        v65 = v57;
        v66 = &v42[v21];
        v67 = &v54[v24];
        do
        {
          v68 = (float)(*v65 >> v56) - v30;
          v69 = v32 * v68;
          v70 = v31 * (float)((float)(*(unsigned __int16 *)v42 >> v56) - v29);
          v71 = (float)(v32 * v68) + v70;
          v72 = 8191.0;
          if (v71 <= 8191.0)
          {
            v72 = (float)(v32 * v68) + v70;
            if (v71 < 0.0)
              v72 = 0.0;
          }
          v73 = (float)(*(v65 - 1) >> v56) - v30;
          v74 = (float)(v34 * v68) + (float)(v73 * v33);
          v75 = 8191.0;
          if ((float)(v70 + v74) <= 8191.0)
          {
            v75 = v70 + v74;
            if ((float)(v70 + v74) < 0.0)
              v75 = 0.0;
          }
          v76 = v35 * v73;
          v77 = v76 + v70;
          v78 = 8191.0;
          if (v77 <= 8191.0)
          {
            v78 = v77;
            if (v77 < 0.0)
              v78 = 0.0;
          }
          v79 = v31 * (float)((float)(*((unsigned __int16 *)v42 + 1) >> v56) - v29);
          v80 = v69 + v79;
          v81 = 8191.0;
          if (v80 <= 8191.0)
          {
            v81 = v80;
            if (v80 < 0.0)
              v81 = 0.0;
          }
          v82 = 8191.0;
          if ((float)(v74 + v79) <= 8191.0)
          {
            v82 = v74 + v79;
            if ((float)(v74 + v79) < 0.0)
              v82 = 0.0;
          }
          v83 = v76 + v79;
          v84 = (float)(v76 + v79) <= 8191.0;
          v85 = 8191.0;
          if (v84)
          {
            v85 = v83;
            if (v83 < 0.0)
              v85 = 0.0;
          }
          v86 = (float)(*(unsigned __int16 *)((char *)v65 + v22) >> v56) - v30;
          v87 = v32 * v86;
          v88 = v31 * (float)((float)(*(unsigned __int16 *)v66 >> v56) - v29);
          v89 = (float)(v32 * v86) + v88;
          v90 = 8191.0;
          if (v89 <= 8191.0)
          {
            v90 = v89;
            if (v89 < 0.0)
              v90 = 0.0;
          }
          v91 = (float)(*(unsigned __int16 *)((char *)v65 + v22 - 2) >> v56) - v30;
          v92 = (float)(v34 * v86) + (float)(v91 * v33);
          v93 = 8191.0;
          if ((float)(v88 + v92) <= 8191.0)
          {
            v93 = v88 + v92;
            if ((float)(v88 + v92) < 0.0)
              v93 = 0.0;
          }
          v94 = v35 * v91;
          v95 = (float)(v35 * v91) + v88;
          v96 = 8191.0;
          if (v95 <= 8191.0)
          {
            v96 = v95;
            if (v95 < 0.0)
              v96 = 0.0;
          }
          v97 = v31 * (float)((float)(*((unsigned __int16 *)v66 + 1) >> v56) - v29);
          v98 = v87 + v97;
          v84 = (float)(v87 + v97) <= 8191.0;
          v99 = 8191.0;
          if (v84)
          {
            v99 = v98;
            if (v98 < 0.0)
              v99 = 0.0;
          }
          v100 = v92 + v97;
          v84 = (float)(v92 + v97) <= 8191.0;
          v101 = 8191.0;
          if (v84)
          {
            v101 = v100;
            if (v100 < 0.0)
              v101 = 0.0;
          }
          v102 = v94 + v97;
          v103 = 8191.0;
          if (v102 <= 8191.0)
          {
            v103 = v102;
            if (v102 < 0.0)
              v103 = 0.0;
          }
          _H20 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm { FCVT            S28, H20 }
          _H20 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          v110 = llroundf(fminf(fmaxf(v78, 0.0), 8191.0));
          __asm { FCVT            S19, H20 }
          _H20 = *(_WORD *)(v40 + 2 * v110);
          __asm { FCVT            S30, H20 }
          _H22 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          _H23 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          _H20 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          _H5 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          _H6 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          _H7 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v96, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v99, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v101, 0.0), 8191.0)));
          _H4 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v103, 0.0), 8191.0)));
          v123 = fmaxf(_S28, fmaxf(_S19, _S30));
          v124 = (float)((float)((float)(v59 * _S19) + (float)(v58 * _S28)) + (float)(v61 * _S30)) + (float)(v60 * v123);
          v125 = 8191.0;
          if (v124 <= 8191.0)
          {
            v125 = (float)((float)((float)(v59 * _S19) + (float)(v58 * _S28)) + (float)(v61 * _S30))
                 + (float)(v60 * v123);
            if (v124 < 0.0)
              v125 = 0.0;
          }
          __asm
          {
            FCVT            S3, H22
            FCVT            S17, H23
            FCVT            S21, H20
          }
          _H22 = *((_WORD *)result + llroundf(v125));
          v130 = (float)((float)((float)(v59 * _S17) + (float)(v58 * _S3)) + (float)(v61 * _S21))
               + (float)(v60 * fmaxf(_S3, fmaxf(_S17, _S21)));
          v131 = 8191.0;
          if (v130 <= 8191.0)
          {
            v131 = v130;
            if (v130 < 0.0)
              v131 = 0.0;
          }
          __asm
          {
            FCVT            S8, H5
            FCVT            S9, H6
            FCVT            S10, H7
          }
          _H5 = *((_WORD *)result + llroundf(v131));
          v136 = fmaxf(_S8, fmaxf(_S9, _S10));
          v137 = (float)((float)((float)(v59 * _S9) + (float)(v58 * _S8)) + (float)(v61 * _S10)) + (float)(v60 * v136);
          v138 = 8191.0;
          if (v137 <= 8191.0)
          {
            v138 = (float)((float)((float)(v59 * _S9) + (float)(v58 * _S8)) + (float)(v61 * _S10)) + (float)(v60 * v136);
            if (v137 < 0.0)
              v138 = 0.0;
          }
          __asm
          {
            FCVT            S23, H1
            FCVT            S29, H2
            FCVT            S31, H4
            FCVT            S1, H22
          }
          v143 = _S28 * _S1;
          v144 = _S19 * _S1;
          v145 = _S30 * _S1;
          __asm { FCVT            S1, H5 }
          v147 = _S3 * _S1;
          v148 = _S17 * _S1;
          v149 = _S21 * _S1;
          LOWORD(_S1) = *((_WORD *)result + llroundf(v138));
          __asm { FCVT            S2, H1 }
          v151 = _S8 * _S2;
          v152 = _S9 * _S2;
          v153 = _S10 * _S2;
          v154 = (float)((float)((float)(v59 * _S29) + (float)(v58 * _S23)) + (float)(v61 * _S31))
               + (float)(v60 * fmaxf(_S23, fmaxf(_S29, _S31)));
          v155 = 8191.0;
          if (v154 <= 8191.0)
          {
            v155 = v154;
            if (v154 < 0.0)
              v155 = 0.0;
          }
          _H17 = *((_WORD *)result + llroundf(v155));
          __asm { FCVT            S17, H17 }
          v158 = _S23 * _S17;
          _S22 = _S29 * _S17;
          _S17 = _S31 * _S17;
          v161 = (float)((float)(v231 * v144) + (float)(v143 * v233)) + (float)(v145 * v230);
          v162 = (float)((float)(v228 * v144) + (float)(v143 * v229)) + (float)(v145 * v227);
          v163 = (float)((float)(v225 * v144) + (float)(v143 * v226)) + (float)(v145 * v224);
          v164 = (float)((float)(v231 * v148) + (float)(v147 * v233)) + (float)(v149 * v230);
          _S20 = (float)((float)(v228 * v148) + (float)(v147 * v229)) + (float)(v149 * v227);
          v166 = (float)((float)(v225 * v148) + (float)(v147 * v226)) + (float)(v149 * v224);
          v167 = (float)((float)(v231 * v152) + (float)(v151 * v233)) + (float)(v153 * v230);
          v168 = (float)((float)(v228 * v152) + (float)(v151 * v229)) + (float)(v153 * v227);
          v169 = (float)((float)(v225 * v152) + (float)(v151 * v226)) + (float)(v153 * v224);
          v170 = (float)((float)(v231 * _S22) + (float)(v158 * v233)) + (float)(_S17 * v230);
          v171 = (float)((float)(v228 * _S22) + (float)(v158 * v229)) + (float)(_S17 * v227);
          _S21 = (float)((float)(v225 * _S22) + (float)(v158 * v226)) + (float)(_S17 * v224);
          _H1 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v161, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          _H2 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v162, 0.0), 8191.0)));
          __asm { FCVT            S4, H2 }
          _H2 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v163, 0.0), 8191.0)));
          __asm { FCVT            S5, H2 }
          _H2 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v164, 0.0), 8191.0)));
          __asm { FCVT            S6, H2 }
          _H2 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(_S20, 0.0), 8191.0)));
          _H3 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v166, 0.0), 8191.0)));
          __asm
          {
            FCVT            S2, H2
            FCVT            S7, H3
          }
          _H3 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v167, 0.0), 8191.0)));
          __asm { FCVT            S19, H3 }
          _H3 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v168, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          LOWORD(_S17) = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v169, 0.0), 8191.0)));
          __asm { FCVT            S17, H17 }
          LOWORD(_S20) = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v170, 0.0), 8191.0)));
          __asm { FCVT            S20, H20 }
          LOWORD(_S22) = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v171, 0.0), 8191.0)));
          LOWORD(_S21) = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(_S21, 0.0), 8191.0)));
          __asm
          {
            FCVT            S22, H22
            FCVT            S21, H21
          }
          v193 = (float)((float)((float)(v240 * _S4) + (float)(v241 * _S1)) + (float)(v239 * _S5)) + v36;
          if (v193 < v36)
            v194 = v36;
          else
            v194 = (float)((float)((float)(v240 * _S4) + (float)(v241 * _S1)) + (float)(v239 * _S5)) + v36;
          v84 = v193 <= v38;
          v195 = (float)((float)((float)(v240 * _S2) + (float)(v241 * _S6)) + (float)(v239 * _S7)) + v36;
          if (!v84)
            v194 = v38;
          v196 = llroundf(v194);
          if (v195 < v36)
            v197 = v36;
          else
            v197 = (float)((float)((float)(v240 * _S2) + (float)(v241 * _S6)) + (float)(v239 * _S7)) + v36;
          v84 = v195 <= v38;
          v198 = (float)((float)((float)(v240 * _S3) + (float)(v241 * _S19)) + (float)(v239 * _S17)) + v36;
          if (!v84)
            v197 = v38;
          v199 = llroundf(v197);
          if (v198 < v36)
            v200 = v36;
          else
            v200 = (float)((float)((float)(v240 * _S3) + (float)(v241 * _S19)) + (float)(v239 * _S17)) + v36;
          v84 = v198 <= v38;
          v201 = (float)((float)((float)(v240 * _S22) + (float)(v241 * _S20)) + (float)(v239 * _S21)) + v36;
          if (!v84)
            v200 = v38;
          v202 = llroundf(v200);
          if (v201 < v36)
            v203 = v36;
          else
            v203 = (float)((float)((float)(v240 * _S22) + (float)(v241 * _S20)) + (float)(v239 * _S21)) + v36;
          if (v201 <= v38)
            v204 = v203;
          else
            v204 = v38;
          v205 = (float)((float)(_S1 + _S6) + _S19) + _S20;
          v206 = (float)((float)(_S4 + _S2) + _S3) + _S22;
          *v54 = v196;
          v54[1] = v199;
          *v67 = v202;
          v67[1] = llroundf(v204);
          v207 = (float)((float)(_S5 + _S7) + _S17) + _S21;
          v208 = (float)((float)(v243 + (float)(v205 * v238)) + (float)(v206 * v237)) + (float)(v207 * v236);
          v209 = v242;
          if (v208 <= v242)
          {
            v209 = (float)((float)(v243 + (float)(v205 * v238)) + (float)(v206 * v237)) + (float)(v207 * v236);
            if (v208 < v250)
              v209 = v250;
          }
          v210 = (float)((float)(v243 + (float)(v205 * v235)) + (float)(v206 * v234)) + (float)(v207 * v232);
          *(_BYTE *)(v55 + v64) = llroundf(v209);
          v211 = v242;
          v30 = v248;
          v29 = v249;
          v32 = v246;
          v31 = v247;
          v34 = v244;
          v33 = v245;
          v35 = v223;
          if (v210 <= v242)
          {
            v211 = v210;
            if (v210 < v250)
              v211 = v250;
          }
          v42 += 4;
          v65 += 2;
          v66 += 4;
          v54 += 2;
          v67 += 2;
          *(_BYTE *)(v55 + v64 + 1) = llroundf(v211);
          v64 += 2;
          v58 = v221;
          v59 = v222;
          v61 = v220;
        }
        while (v10 > v64);
      }
      v42 = &v63[v21];
      v54 = &v62[v24];
      v55 += v25;
      v9 += 2;
      v57 += v22;
    }
    while (v13 > v9);
    if (v219 && v218)
    {
      v212 = 0;
      do
      {
        if (v10)
        {
          v213 = v10;
          v214 = v27;
          v215 = (unsigned __int16 *)v23;
          do
          {
            v216 = *v215++;
            *v214++ = llroundf((float)v216 * 0.0038911);
            --v213;
          }
          while (v213);
        }
        v23 += v217;
        v27 += v26;
        ++v212;
      }
      while (v212 != v13);
    }
    else if (v218)
    {
      do
      {
        if (v10)
          result = memset(v27, 255, v10);
        v27 += v26;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Mat_TRC_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Mat_TRC_420vf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf422_TRC_Mat_TRC_420vf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  unsigned int v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  char v55;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  char v61;
  unsigned __int16 *v62;
  _BYTE *v63;
  unsigned __int8 *v64;
  size_t v65;
  unsigned __int16 *v66;
  unsigned __int8 *v67;
  _BYTE *v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  BOOL v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  unsigned int v120;
  float v132;
  float v133;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v141;
  float v142;
  float v156;
  float v157;
  float v158;
  char v159;
  float v160;
  float v161;
  char v162;
  float v163;
  float v164;
  char v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  uint64_t v175;
  size_t v176;
  _BYTE *v177;
  unsigned __int16 *v178;
  unsigned int v179;
  uint64_t v180;
  uint64_t v181;
  float v182;
  float v183;
  float v184;
  float v185;
  float v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float v198;

  v5 = *(_QWORD *)(result + 28);
  v6 = 2 * *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = *(_QWORD *)(result + 36);
    v12 = *(_QWORD *)(result + 44) + 2 * v7;
    v13 = 2 * v8 - 2 * v7;
    v14 = *((_QWORD *)result + 14);
    v15 = (uint64_t *)*((_QWORD *)result + 16);
    v16 = *((_QWORD *)result + 15) + 2 * (*((_QWORD *)result + 13) * a2 / v6);
    v17 = *((_QWORD *)result + 19);
    v18 = (_QWORD *)*((_QWORD *)result + 7);
    v19 = (uint64_t *)*((_QWORD *)result + 8);
    v20 = (uint64_t *)*((_QWORD *)result + 17);
    v21 = *v19;
    v22 = v19[1];
    v23 = v19[2];
    v181 = v18[2];
    v24 = v181 + v23 * v12 + 2 * v11;
    v25 = *v20;
    v26 = v20[1];
    v27 = v20[2];
    v180 = v15[2];
    v28 = (_BYTE *)(v180 + v27 * v16 + v14);
    *(float *)&v29 = 8191.0 / (float)*(unsigned int *)(v17 + 128);
    LOWORD(a5) = *(_WORD *)(v17 + 140);
    v30 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v17 + 142);
    v31 = (float)LODWORD(a5);
    v32 = *(float *)&v29 * *(float *)v17;
    v33 = *(float *)&v29 * *(float *)(v17 + 8);
    v34 = *(float *)&v29 * *(float *)(v17 + 16);
    v35 = *(float *)&v29 * *(float *)(v17 + 20);
    v36 = *(float *)&v29 * *(float *)(v17 + 28);
    LOWORD(v29) = *(_WORD *)(v17 + 144);
    v37 = (float)v29;
    LOWORD(v29) = *(_WORD *)(v17 + 146);
    v38 = (float)v29;
    LOWORD(v29) = *(_WORD *)(v17 + 148);
    v39 = (float)v29;
    LOWORD(v29) = *(_WORD *)(v17 + 150);
    v40 = (float)v29;
    v198 = v40;
    LOWORD(v40) = *(_WORD *)(v17 + 152);
    v190 = *(float *)(v17 + 40);
    v191 = *(float *)(v17 + 36);
    v188 = *(float *)(v17 + 48) * 0.25;
    v189 = *(float *)(v17 + 44);
    v186 = *(float *)(v17 + 56) * 0.25;
    v187 = *(float *)(v17 + 52) * 0.25;
    v184 = *(float *)(v17 + 64) * 0.25;
    v185 = *(float *)(v17 + 60) * 0.25;
    v182 = *(float *)(v17 + 68) * 0.25;
    v183 = *(float *)(v17 + 72);
    v42 = *(float *)(v17 + 76);
    v41 = *(float *)(v17 + 80);
    v43 = *(float *)(v17 + 84);
    v44 = *(float *)(v17 + 88);
    v45 = *(float *)(v17 + 92);
    v46 = *(float *)(v17 + 96);
    v47 = *(float *)(v17 + 100);
    v48 = *(float *)(v17 + 104);
    v49 = v17 + 164;
    v50 = v18[1];
    result = (unsigned __int8 *)(*v18 + v21 * v12 + 2 * v11);
    v51 = v50 + v22 * v12 + 2 * v11;
    v52 = v17 + 16548;
    if (v50)
      v53 = v51;
    else
      v53 = 0;
    v54 = *(unsigned __int8 *)(v17 + 124);
    v55 = 16 - v54;
    _CF = v54 >= 0x11;
    v57 = *v15;
    v58 = v15[1];
    v59 = (_BYTE *)(v57 + v25 * v16 + v14);
    if (_CF)
      v55 = 0;
    v60 = v58 + v20[1] * (v16 / 2) + v14;
    v61 = v55;
    v62 = (unsigned __int16 *)(v53 + 2);
    v196 = v33;
    v197 = (float)LODWORD(a5);
    v194 = v36;
    v195 = v34;
    v192 = (float)LODWORD(v40);
    v193 = v38;
    do
    {
      v63 = &v59[v25];
      v64 = &result[v21];
      if (v10)
      {
        v65 = 0;
        v66 = v62;
        v67 = &result[v21];
        v68 = &v59[v25];
        do
        {
          v69 = (float)(*v66 >> v61) - v31;
          v70 = v33 * v69;
          v71 = v32 * (float)((float)(*(unsigned __int16 *)result >> v61) - v30);
          v72 = (float)(v33 * v69) + v71;
          v73 = 8191.0;
          if (v72 <= 8191.0)
          {
            v73 = (float)(v33 * v69) + v71;
            if (v72 < 0.0)
              v73 = 0.0;
          }
          v74 = (float)(*(v66 - 1) >> v61) - v31;
          v75 = (float)(v35 * v69) + (float)(v74 * v34);
          v76 = 8191.0;
          if ((float)(v71 + v75) <= 8191.0)
          {
            v76 = v71 + v75;
            if ((float)(v71 + v75) < 0.0)
              v76 = 0.0;
          }
          v77 = v36 * v74;
          v78 = 8191.0;
          if ((float)(v77 + v71) <= 8191.0)
          {
            v78 = v77 + v71;
            if ((float)(v77 + v71) < 0.0)
              v78 = 0.0;
          }
          v79 = v32 * (float)((float)(*((unsigned __int16 *)result + 1) >> v61) - v30);
          v80 = 8191.0;
          if ((float)(v70 + v79) <= 8191.0)
          {
            v80 = v70 + v79;
            if ((float)(v70 + v79) < 0.0)
              v80 = 0.0;
          }
          v81 = 8191.0;
          if ((float)(v75 + v79) <= 8191.0)
          {
            v81 = v75 + v79;
            if ((float)(v75 + v79) < 0.0)
              v81 = 0.0;
          }
          v82 = 8191.0;
          if ((float)(v77 + v79) <= 8191.0)
          {
            v82 = v77 + v79;
            if ((float)(v77 + v79) < 0.0)
              v82 = 0.0;
          }
          v83 = (float)(*(unsigned __int16 *)((char *)v66 + v22) >> v61) - v31;
          v84 = v33 * v83;
          v85 = v32 * (float)((float)(*(unsigned __int16 *)v67 >> v61) - v30);
          v86 = (float)(v33 * v83) + v85;
          v87 = 8191.0;
          if (v86 <= 8191.0)
          {
            v87 = v86;
            if (v86 < 0.0)
              v87 = 0.0;
          }
          v88 = (float)(*(unsigned __int16 *)((char *)v66 + v22 - 2) >> v61) - v31;
          v89 = (float)(v35 * v83) + (float)(v88 * v34);
          v90 = 8191.0;
          if ((float)(v85 + v89) <= 8191.0)
          {
            v90 = v85 + v89;
            if ((float)(v85 + v89) < 0.0)
              v90 = 0.0;
          }
          v91 = v36 * v88;
          v92 = v91 + v85;
          v93 = (float)(v91 + v85) <= 8191.0;
          v94 = 8191.0;
          if (v93)
          {
            v94 = v92;
            if (v92 < 0.0)
              v94 = 0.0;
          }
          v95 = v32 * (float)((float)(*((unsigned __int16 *)v67 + 1) >> v61) - v30);
          v96 = v84 + v95;
          v97 = 8191.0;
          if (v96 <= 8191.0)
          {
            v97 = v96;
            if (v96 < 0.0)
              v97 = 0.0;
          }
          v98 = v89 + v95;
          v93 = (float)(v89 + v95) <= 8191.0;
          v99 = 8191.0;
          if (v93)
          {
            v99 = v98;
            if (v98 < 0.0)
              v99 = 0.0;
          }
          v100 = v32;
          v101 = v30;
          v102 = v91 + v95;
          v103 = 8191.0;
          if (v102 <= 8191.0)
          {
            v103 = v102;
            if (v102 < 0.0)
              v103 = 0.0;
          }
          _H1 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          _H6 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H24 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          _H25 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          _H26 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          __asm
          {
            FCVT            S26, H26
            FCVT            S27, H27
          }
          _H19 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          v120 = llroundf(fminf(fmaxf(v90, 0.0), 8191.0));
          __asm { FCVT            S4, H19 }
          _H19 = *(_WORD *)(v49 + 2 * v120);
          __asm { FCVT            S19, H19 }
          _H5 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H2 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v97, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H7 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v99, 0.0), 8191.0)));
          _H17 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v103, 0.0), 8191.0)));
          __asm
          {
            FCVT            S7, H7
            FCVT            S17, H17
          }
          v132 = (float)((float)(v42 * _S6) + (float)(_S1 * v183)) + (float)(_S24 * v41);
          v133 = (float)((float)(v44 * _S6) + (float)(_S1 * v43)) + (float)(_S24 * v45);
          _S1 = (float)((float)(v47 * _S6) + (float)(_S1 * v46)) + (float)(_S24 * v48);
          v135 = (float)((float)(v42 * _S26) + (float)(_S25 * v183)) + (float)(_S27 * v41);
          v136 = (float)((float)(v44 * _S26) + (float)(_S25 * v43)) + (float)(_S27 * v45);
          v137 = (float)((float)(v47 * _S26) + (float)(_S25 * v46)) + (float)(_S27 * v48);
          v138 = (float)((float)(v42 * _S19) + (float)(_S4 * v183)) + (float)(_S5 * v41);
          v139 = (float)((float)(v44 * _S19) + (float)(_S4 * v43)) + (float)(_S5 * v45);
          _S3 = (float)((float)(v47 * _S19) + (float)(_S4 * v46)) + (float)(_S5 * v48);
          v141 = (float)((float)(v42 * _S7) + (float)(_S2 * v183)) + (float)(_S17 * v41);
          v142 = (float)((float)(v44 * _S7) + (float)(_S2 * v43)) + (float)(_S17 * v45);
          _S2 = (float)((float)(v47 * _S7) + (float)(_S2 * v46)) + (float)(_S17 * v48);
          LOWORD(_S4) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v132, 0.0), 8191.0)));
          __asm { FCVT            S19, H4 }
          LOWORD(_S4) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v133, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          LOWORD(_S1) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          __asm { FCVT            S5, H1 }
          LOWORD(_S1) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v135, 0.0), 8191.0)));
          __asm { FCVT            S6, H1 }
          LOWORD(_S1) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v136, 0.0), 8191.0)));
          LOWORD(_S7) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v137, 0.0), 8191.0)));
          __asm
          {
            FCVT            S25, H1
            FCVT            S24, H7
          }
          LOWORD(_S1) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v138, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          LOWORD(_S7) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v139, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          LOWORD(_S3) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          __asm { FCVT            S26, H3 }
          LOWORD(_S3) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v141, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          LOWORD(_S17) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v142, 0.0), 8191.0)));
          LOWORD(_S2) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S2, 0.0), 8191.0)));
          __asm
          {
            FCVT            S17, H17
            FCVT            S2, H2
          }
          v156 = (float)((float)((float)(v190 * _S4) + (float)(v191 * _S19)) + (float)(v189 * _S5)) + v37;
          if (v156 < v37)
            v157 = v37;
          else
            v157 = (float)((float)((float)(v190 * _S4) + (float)(v191 * _S19)) + (float)(v189 * _S5)) + v37;
          v93 = v156 <= v39;
          v158 = (float)((float)((float)(v190 * _S25) + (float)(v191 * _S6)) + (float)(v189 * _S24)) + v37;
          if (!v93)
            v157 = v39;
          v159 = llroundf(v157);
          if (v158 < v37)
            v160 = v37;
          else
            v160 = (float)((float)((float)(v190 * _S25) + (float)(v191 * _S6)) + (float)(v189 * _S24)) + v37;
          v93 = v158 <= v39;
          v161 = (float)((float)((float)(v190 * _S7) + (float)(v191 * _S1)) + (float)(v189 * _S26)) + v37;
          if (!v93)
            v160 = v39;
          v162 = llroundf(v160);
          if (v161 < v37)
            v163 = v37;
          else
            v163 = (float)((float)((float)(v190 * _S7) + (float)(v191 * _S1)) + (float)(v189 * _S26)) + v37;
          v93 = v161 <= v39;
          v164 = (float)((float)((float)(v190 * _S17) + (float)(v191 * _S3)) + (float)(v189 * _S2)) + v37;
          if (!v93)
            v163 = v39;
          v165 = llroundf(v163);
          if (v164 < v37)
            v166 = v37;
          else
            v166 = (float)((float)((float)(v190 * _S17) + (float)(v191 * _S3)) + (float)(v189 * _S2)) + v37;
          if (v164 <= v39)
            v167 = v166;
          else
            v167 = v39;
          v168 = (float)((float)(_S19 + _S6) + _S1) + _S3;
          v169 = (float)((float)(_S4 + _S25) + _S7) + _S17;
          *v59 = v159;
          v59[1] = v162;
          *v68 = v165;
          v68[1] = llroundf(v167);
          v170 = (float)((float)(_S5 + _S24) + _S26) + _S2;
          v171 = (float)((float)(v193 + (float)(v168 * v188)) + (float)(v169 * v187)) + (float)(v170 * v186);
          v172 = v192;
          if (v171 <= v192)
          {
            v172 = (float)((float)(v193 + (float)(v168 * v188)) + (float)(v169 * v187)) + (float)(v170 * v186);
            if (v171 < v198)
              v172 = v198;
          }
          v173 = (float)((float)(v193 + (float)(v168 * v185)) + (float)(v169 * v184)) + (float)(v170 * v182);
          *(_BYTE *)(v60 + v65) = llroundf(v172);
          v174 = v192;
          v30 = v101;
          v33 = v196;
          v31 = v197;
          v32 = v100;
          if (v173 <= v192)
          {
            v174 = v173;
            if (v173 < v198)
              v174 = v198;
          }
          result += 4;
          v66 += 2;
          v67 += 4;
          v59 += 2;
          v68 += 2;
          *(_BYTE *)(v60 + v65 + 1) = llroundf(v174);
          v65 += 2;
          v36 = v194;
          v34 = v195;
        }
        while (v10 > v65);
      }
      result = &v64[v21];
      v59 = &v63[v25];
      v60 += v26;
      v9 += 2;
      v62 += v22;
    }
    while (v13 > v9);
    if (v181 && v180)
    {
      v175 = 0;
      do
      {
        if (v10)
        {
          v176 = v10;
          v177 = v28;
          v178 = (unsigned __int16 *)v24;
          do
          {
            v179 = *v178++;
            *v177++ = llroundf((float)v179 * 0.0038911);
            --v176;
          }
          while (v176);
        }
        v24 += v23;
        v28 += v27;
        ++v175;
      }
      while (v175 != v13);
    }
    else if (v180)
    {
      do
      {
        if (v10)
          result = (unsigned __int8 *)memset(v28, 255, v10);
        v28 += v27;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_rgb_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_rgb_420vf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf422_rgb_420vf_GCD(unsigned __int8 *result, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  _BYTE *v30;
  unsigned int v31;
  unsigned int v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  uint64_t v52;
  unsigned int v53;
  char v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  float v58;
  uint64_t v59;
  unsigned __int16 *v60;
  unsigned __int8 *v61;
  char *v62;
  size_t v63;
  unsigned __int16 *v64;
  char *v65;
  unsigned __int8 *v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  uint64_t v112;
  size_t v113;
  _BYTE *v114;
  unsigned __int16 *v115;
  unsigned int v116;
  uint64_t v117;
  float v118;
  float v119;
  float v120;
  float v121;

  v4 = *(_QWORD *)(result + 28);
  v5 = 2 * *result;
  v6 = v4 * a2 / v5;
  v7 = (v4 + v4 * a2) / v5;
  if (2 * v7 != 2 * v6)
  {
    v8 = 0;
    v9 = *(_QWORD *)(result + 20);
    v10 = *(_QWORD *)(result + 36);
    v11 = *(_QWORD *)(result + 44) + 2 * v6;
    v12 = 2 * v7 - 2 * v6;
    v13 = *((_QWORD *)result + 14);
    v14 = (uint64_t *)*((_QWORD *)result + 16);
    v15 = *((_QWORD *)result + 15) + 2 * (*((_QWORD *)result + 13) * a2 / v5);
    v16 = *((_QWORD *)result + 19);
    v18 = (_QWORD *)*((_QWORD *)result + 7);
    v17 = (uint64_t *)*((_QWORD *)result + 8);
    v19 = (uint64_t *)*((_QWORD *)result + 17);
    v20 = *v17;
    v21 = v17[1];
    v22 = v17[2];
    v23 = v18[1];
    v117 = v18[2];
    v24 = v117 + v22 * v11 + 2 * v10;
    v25 = *v19;
    v26 = v19[1];
    v27 = v19[2];
    v28 = v14[2];
    v29 = (char *)(*v18 + v20 * v11 + 2 * v10);
    v30 = (_BYTE *)(v28 + v27 * v15 + v13);
    *(float *)&v31 = (float)*(unsigned int *)(v16 + 128);
    *(float *)&v32 = (float)*(unsigned int *)(v16 + 136);
    v33 = *(float *)&v32 / *(float *)&v31;
    LOWORD(v31) = *(_WORD *)(v16 + 140);
    v34 = (float)v31;
    LOWORD(v32) = *(_WORD *)(v16 + 142);
    v35 = (float)v32;
    v36 = v33 * *(float *)v16;
    v37 = v33 * *(float *)(v16 + 8);
    v38 = v33 * *(float *)(v16 + 16);
    v39 = v33 * *(float *)(v16 + 20);
    v40 = *(float *)(v16 + 28);
    v41 = v33 * v40;
    LOWORD(v40) = *(_WORD *)(v16 + 144);
    v42 = (float)LODWORD(v40);
    LOWORD(v2) = *(_WORD *)(v16 + 146);
    v43 = (float)v2;
    LOWORD(v3) = *(_WORD *)(v16 + 148);
    v44 = (float)v3;
    LOWORD(v3) = *(_WORD *)(v16 + 150);
    v45 = (float)v3;
    LOWORD(v3) = *(_WORD *)(v16 + 152);
    v46 = (float)v3;
    v47 = *(float *)(v16 + 36);
    v48 = *(float *)(v16 + 40);
    v49 = *(float *)(v16 + 44);
    v120 = *(float *)(v16 + 52) * 0.25;
    v121 = *(float *)(v16 + 48) * 0.25;
    v118 = *(float *)(v16 + 60) * 0.25;
    v119 = *(float *)(v16 + 56) * 0.25;
    v50 = *(float *)(v16 + 64) * 0.25;
    v51 = *(float *)(v16 + 68);
    if (v23)
      v52 = v23 + v21 * v11 + 2 * v10;
    else
      v52 = 0;
    v53 = *(unsigned __int8 *)(v16 + 124);
    v54 = 16 - v53;
    v55 = v53 >= 0x11;
    v56 = *v14;
    v57 = v14[1];
    result = (unsigned __int8 *)(v56 + v25 * v15 + v13);
    if (v55)
      v54 = 0;
    v58 = v51 * 0.25;
    v59 = v57 + v26 * (v15 / 2) + v13;
    v60 = (unsigned __int16 *)(v52 + 2);
    do
    {
      v61 = &result[v25];
      v62 = &v29[v20];
      if (v9)
      {
        v63 = 0;
        v64 = v60;
        v65 = &v29[v20];
        v66 = &result[v25];
        do
        {
          v67 = (float)(*(v64 - 1) >> v54) - v35;
          v68 = (float)(*v64 >> v54) - v35;
          v69 = v37 * v68;
          v70 = (float)(v39 * v68) + (float)(v67 * v38);
          v71 = v41 * v67;
          v72 = v36 * (float)((float)(*(unsigned __int16 *)v29 >> v54) - v34);
          v73 = v69 + v72;
          v74 = v72 + v70;
          v75 = v71 + v72;
          v76 = (float)((float)((float)(v48 * (float)(v72 + v70)) + (float)(v47 * (float)(v69 + v72)))
                      + (float)(v49 * (float)(v71 + v72)))
              + v42;
          v77 = v44;
          if (v76 <= v44)
          {
            v77 = v76;
            if (v76 < v42)
              v77 = v42;
          }
          v78 = v36 * (float)((float)(*((unsigned __int16 *)v29 + 1) >> v54) - v34);
          v79 = v69 + v78;
          v80 = v70 + v78;
          v81 = v71 + v78;
          v82 = *(unsigned __int16 *)((char *)v64 + v21 - 2);
          v83 = *(unsigned __int16 *)((char *)v64 + v21);
          v84 = *(unsigned __int16 *)v65;
          v85 = *((unsigned __int16 *)v65 + 1);
          v86 = (float)((float)((float)(v48 * v80) + (float)(v47 * v79)) + (float)(v49 * (float)(v71 + v78))) + v42;
          *result = llroundf(v77);
          v87 = v44;
          if (v86 <= v44)
          {
            v87 = v86;
            if (v86 < v42)
              v87 = v42;
          }
          v88 = (float)(int)(v82 >> v54) - v35;
          v89 = (float)(int)(v83 >> v54) - v35;
          v90 = v37 * v89;
          v91 = (float)(v39 * v89) + (float)(v88 * v38);
          v92 = v41 * v88;
          v93 = v36 * (float)((float)(int)(v84 >> v54) - v34);
          v94 = v90 + v93;
          v95 = v93 + v91;
          v96 = v92 + v93;
          v97 = (float)((float)((float)(v48 * (float)(v93 + v91)) + (float)(v47 * (float)(v90 + v93)))
                      + (float)(v49 * (float)(v92 + v93)))
              + v42;
          result[1] = llroundf(v87);
          v98 = v44;
          if (v97 <= v44)
          {
            v98 = v97;
            if (v97 < v42)
              v98 = v42;
          }
          v99 = v36 * (float)((float)(int)(v85 >> v54) - v34);
          v100 = v90 + v99;
          v101 = v91 + v99;
          v102 = v92 + v99;
          v103 = (float)((float)((float)(v48 * (float)(v91 + v99)) + (float)(v47 * v100)) + (float)(v49 * v102)) + v42;
          *v66 = llroundf(v98);
          v104 = v44;
          if (v103 <= v44)
          {
            v104 = v103;
            if (v103 < v42)
              v104 = v42;
          }
          v66[1] = llroundf(v104);
          v105 = (float)((float)(v73 + v79) + v94) + v100;
          v106 = (float)((float)(v74 + v80) + v95) + v101;
          v107 = (float)((float)(v75 + v81) + v96) + v102;
          v108 = (float)((float)(v43 + (float)(v105 * v121)) + (float)(v106 * v120)) + (float)(v107 * v119);
          v109 = v46;
          if (v108 <= v46)
          {
            v109 = (float)((float)(v43 + (float)(v105 * v121)) + (float)(v106 * v120)) + (float)(v107 * v119);
            if (v108 < v45)
              v109 = v45;
          }
          v110 = (float)((float)(v43 + (float)(v105 * v118)) + (float)(v106 * v50)) + (float)(v107 * v58);
          *(_BYTE *)(v59 + v63) = llroundf(v109);
          v111 = v46;
          if (v110 <= v46)
          {
            v111 = v110;
            if (v110 < v45)
              v111 = v45;
          }
          v29 += 4;
          v65 += 4;
          v64 += 2;
          result += 2;
          v66 += 2;
          *(_BYTE *)(v59 + v63 + 1) = llroundf(v111);
          v63 += 2;
        }
        while (v9 > v63);
      }
      v29 = &v62[v20];
      result = &v61[v25];
      v59 += v26;
      v8 += 2;
      v60 += v21;
    }
    while (v12 > v8);
    if (v117 && v28)
    {
      v112 = 0;
      do
      {
        if (v9)
        {
          v113 = v9;
          v114 = v30;
          v115 = (unsigned __int16 *)v24;
          do
          {
            v116 = *v115++;
            *v114++ = llroundf((float)v116 * 0.0038911);
            --v113;
          }
          while (v113);
        }
        v24 += v22;
        v30 += v27;
        ++v112;
      }
      while (v112 != v12);
    }
    else if (v28)
    {
      do
      {
        if (v9)
          result = (unsigned __int8 *)memset(v30, 255, v9);
        v30 += v27;
        --v12;
      }
      while (v12);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Tone_Mat_TRC_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Tone_Mat_TRC_xf420_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf422_TRC_Tone_Mat_TRC_xf420_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  unsigned int v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  char v46;
  unsigned int v47;
  char v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char v52;
  char v53;
  unsigned __int16 *v54;
  float v55;
  float v56;
  float v57;
  float v58;
  char *v59;
  unsigned __int8 *v60;
  unint64_t v61;
  unsigned __int16 *v62;
  unsigned __int8 *v63;
  char *v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  BOOL v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  unsigned int v108;
  float v121;
  float v122;
  float v123;
  float v128;
  float v129;
  float v134;
  float v135;
  float v136;
  float v141;
  float v142;
  float v143;
  float v145;
  float v146;
  float v147;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v156;
  float v158;
  float v159;
  float v160;
  float v161;
  float v164;
  float v165;
  float v166;
  float v168;
  float v169;
  float v170;
  unsigned int v188;
  float v191;
  float v192;
  float v193;
  unsigned int v194;
  float v195;
  float v196;
  unsigned int v197;
  float v198;
  float v199;
  unsigned int v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  float v206;
  float v207;
  _WORD *v208;
  float v209;
  float v210;
  size_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  float v216;
  float v217;
  float v218;
  float v219;
  float v220;
  float v221;
  float v222;
  float v223;
  float v224;
  float v225;
  float v226;
  float v227;
  float v228;
  float v229;
  float v230;
  float v231;
  float v232;
  float v233;
  float v234;
  float v235;
  float v236;
  float v237;
  float v238;
  float v239;
  float v240;
  float v241;
  float v242;
  float v243;
  float v244;
  float v245;

  v5 = *(_QWORD *)(result + 28);
  v6 = 2 * *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = *(_QWORD *)(result + 36);
    v12 = *(_QWORD *)(result + 44) + 2 * v7;
    v13 = 2 * v8 - 2 * v7;
    v14 = *((_QWORD *)result + 14);
    v15 = *((_QWORD *)result + 13) * a2 / v6;
    v16 = (_QWORD *)*((_QWORD *)result + 16);
    v17 = *((_QWORD *)result + 15) + 2 * v15;
    v18 = *((_QWORD *)result + 19);
    v19 = (_QWORD *)*((_QWORD *)result + 7);
    v20 = (uint64_t *)*((_QWORD *)result + 8);
    v21 = (uint64_t *)*((_QWORD *)result + 17);
    v22 = *v20;
    v23 = v20[1];
    v212 = v20[2];
    v215 = v19[2];
    v24 = (char *)(v215 + v212 * v12 + 2 * v11);
    v25 = *v21;
    v26 = v21[1];
    v213 = v21[2];
    v214 = v16[2];
    v27 = (char *)(v214 + v213 * v17 + 2 * v14);
    *(float *)&v28 = 8191.0 / (float)*(unsigned int *)(v18 + 128);
    LOWORD(a5) = *(_WORD *)(v18 + 140);
    v29 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v18 + 142);
    v30 = (float)LODWORD(a5);
    v31 = *(float *)&v28 * *(float *)v18;
    v32 = *(float *)&v28 * *(float *)(v18 + 8);
    v33 = *(float *)&v28 * *(float *)(v18 + 16);
    v34 = *(float *)&v28 * *(float *)(v18 + 20);
    v35 = *(float *)&v28 * *(float *)(v18 + 28);
    LOWORD(v28) = *(_WORD *)(v18 + 144);
    v36 = (float)v28;
    LOWORD(v28) = *(_WORD *)(v18 + 146);
    v37 = (float)v28;
    LOWORD(v28) = *(_WORD *)(v18 + 148);
    v38 = (float)v28;
    LOWORD(v28) = *(_WORD *)(v18 + 150);
    v39 = (float)v28;
    v245 = v39;
    v235 = *(float *)(v18 + 40);
    v236 = *(float *)(v18 + 36);
    v233 = *(float *)(v18 + 48) * 0.25;
    v234 = *(float *)(v18 + 44);
    v231 = *(float *)(v18 + 56) * 0.25;
    v232 = *(float *)(v18 + 52) * 0.25;
    v229 = *(float *)(v18 + 64) * 0.25;
    v230 = *(float *)(v18 + 60) * 0.25;
    v227 = *(float *)(v18 + 68) * 0.25;
    v228 = *(float *)(v18 + 72);
    v225 = *(float *)(v18 + 80);
    v226 = *(float *)(v18 + 76);
    v223 = *(float *)(v18 + 88);
    v224 = *(float *)(v18 + 84);
    v221 = *(float *)(v18 + 96);
    v222 = *(float *)(v18 + 92);
    v219 = *(float *)(v18 + 104);
    v220 = *(float *)(v18 + 100);
    v40 = v18 + 164;
    v41 = v18 + 16548;
    v42 = v18 + 32932;
    v43 = v19[1];
    result = (unsigned __int8 *)(*v19 + *v20 * v12 + 2 * v11);
    v44 = v43 + v23 * v12 + 2 * v11;
    if (!v43)
      v44 = 0;
    v45 = *(unsigned __int8 *)(v18 + 132);
    if (v45 >= 0x11)
      v46 = 0;
    else
      v46 = 16 - v45;
    v47 = *(unsigned __int8 *)(v18 + 124);
    v48 = 16 - v47;
    v49 = v16[1];
    v50 = (char *)(*v16 + v25 * v17 + 2 * v14);
    if (v47 >= 0x11)
      v48 = 0;
    v51 = v49 + v26 * (v17 / 2) + 2 * v14;
    v52 = v48;
    v53 = v46;
    v54 = (unsigned __int16 *)(v44 + 2);
    v55 = *(float *)(v18 + 108);
    v56 = *(float *)(v18 + 112);
    v57 = *(float *)(v18 + 116);
    v58 = *(float *)(v18 + 120);
    v243 = (float)LODWORD(a5);
    v244 = v29;
    v241 = v32;
    v242 = v31;
    v239 = v34;
    v240 = v33;
    LOWORD(v39) = *(_WORD *)(v18 + 152);
    v237 = (float)LODWORD(v39);
    v238 = v37;
    v217 = v56;
    v218 = v35;
    v216 = v55;
    do
    {
      v59 = &v50[v25];
      v60 = &result[v22];
      if (v10)
      {
        v61 = 0;
        v62 = v54;
        v63 = &result[v22];
        v64 = &v50[v25];
        do
        {
          v65 = (float)(*v62 >> v52) - v30;
          v66 = v32 * v65;
          v67 = v31 * (float)((float)(*(unsigned __int16 *)result >> v52) - v29);
          v68 = (float)(v32 * v65) + v67;
          v69 = 8191.0;
          if (v68 <= 8191.0)
          {
            v69 = (float)(v32 * v65) + v67;
            if (v68 < 0.0)
              v69 = 0.0;
          }
          v70 = (float)(*(v62 - 1) >> v52) - v30;
          v71 = (float)(v34 * v65) + (float)(v70 * v33);
          v72 = 8191.0;
          if ((float)(v67 + v71) <= 8191.0)
          {
            v72 = v67 + v71;
            if ((float)(v67 + v71) < 0.0)
              v72 = 0.0;
          }
          v73 = v35 * v70;
          v74 = v73 + v67;
          v75 = 8191.0;
          if (v74 <= 8191.0)
          {
            v75 = v74;
            if (v74 < 0.0)
              v75 = 0.0;
          }
          v76 = v31 * (float)((float)(*((unsigned __int16 *)result + 1) >> v52) - v29);
          v77 = v66 + v76;
          v78 = 8191.0;
          if (v77 <= 8191.0)
          {
            v78 = v77;
            if (v77 < 0.0)
              v78 = 0.0;
          }
          v79 = 8191.0;
          if ((float)(v71 + v76) <= 8191.0)
          {
            v79 = v71 + v76;
            if ((float)(v71 + v76) < 0.0)
              v79 = 0.0;
          }
          v80 = v73 + v76;
          v81 = (float)(v73 + v76) <= 8191.0;
          v82 = 8191.0;
          if (v81)
          {
            v82 = v80;
            if (v80 < 0.0)
              v82 = 0.0;
          }
          v83 = (float)(*(unsigned __int16 *)((char *)v62 + v23) >> v52) - v30;
          v84 = v32 * v83;
          v85 = v31 * (float)((float)(*(unsigned __int16 *)v63 >> v52) - v29);
          v86 = (float)(v32 * v83) + v85;
          v87 = 8191.0;
          if (v86 <= 8191.0)
          {
            v87 = v86;
            if (v86 < 0.0)
              v87 = 0.0;
          }
          v88 = (float)(*(unsigned __int16 *)((char *)v62 + v23 - 2) >> v52) - v30;
          v89 = (float)(v34 * v83) + (float)(v88 * v33);
          v90 = 8191.0;
          if ((float)(v85 + v89) <= 8191.0)
          {
            v90 = v85 + v89;
            if ((float)(v85 + v89) < 0.0)
              v90 = 0.0;
          }
          v91 = v35 * v88;
          v92 = (float)(v35 * v88) + v85;
          v93 = 8191.0;
          if (v92 <= 8191.0)
          {
            v93 = v92;
            if (v92 < 0.0)
              v93 = 0.0;
          }
          v94 = v31 * (float)((float)(*((unsigned __int16 *)v63 + 1) >> v52) - v29);
          v95 = v84 + v94;
          v81 = (float)(v84 + v94) <= 8191.0;
          v96 = 8191.0;
          if (v81)
          {
            v96 = v95;
            if (v95 < 0.0)
              v96 = 0.0;
          }
          v97 = v89 + v94;
          v81 = (float)(v89 + v94) <= 8191.0;
          v98 = 8191.0;
          if (v81)
          {
            v98 = v97;
            if (v97 < 0.0)
              v98 = 0.0;
          }
          v99 = v91 + v94;
          v100 = 8191.0;
          if (v99 <= 8191.0)
          {
            v100 = v99;
            if (v99 < 0.0)
              v100 = 0.0;
          }
          _H20 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v69, 0.0), 8191.0)));
          __asm { FCVT            S28, H20 }
          _H20 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          v108 = llroundf(fminf(fmaxf(v75, 0.0), 8191.0));
          __asm { FCVT            S19, H20 }
          _H20 = *(_WORD *)(v40 + 2 * v108);
          __asm { FCVT            S30, H20 }
          _H22 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          _H23 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          _H20 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          _H5 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          _H6 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          _H7 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v96, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          _H4 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v100, 0.0), 8191.0)));
          v121 = fmaxf(_S28, fmaxf(_S19, _S30));
          v122 = (float)((float)((float)(v56 * _S19) + (float)(v55 * _S28)) + (float)(v57 * _S30)) + (float)(v58 * v121);
          v123 = 8191.0;
          if (v122 <= 8191.0)
          {
            v123 = (float)((float)((float)(v56 * _S19) + (float)(v55 * _S28)) + (float)(v57 * _S30))
                 + (float)(v58 * v121);
            if (v122 < 0.0)
              v123 = 0.0;
          }
          __asm
          {
            FCVT            S3, H22
            FCVT            S17, H23
            FCVT            S21, H20
          }
          _H22 = *(_WORD *)(v41 + 2 * llroundf(v123));
          v128 = (float)((float)((float)(v56 * _S17) + (float)(v55 * _S3)) + (float)(v57 * _S21))
               + (float)(v58 * fmaxf(_S3, fmaxf(_S17, _S21)));
          v129 = 8191.0;
          if (v128 <= 8191.0)
          {
            v129 = v128;
            if (v128 < 0.0)
              v129 = 0.0;
          }
          __asm
          {
            FCVT            S8, H5
            FCVT            S9, H6
            FCVT            S10, H7
          }
          _H5 = *(_WORD *)(v41 + 2 * llroundf(v129));
          v134 = fmaxf(_S8, fmaxf(_S9, _S10));
          v135 = (float)((float)((float)(v56 * _S9) + (float)(v55 * _S8)) + (float)(v57 * _S10)) + (float)(v58 * v134);
          v136 = 8191.0;
          if (v135 <= 8191.0)
          {
            v136 = (float)((float)((float)(v56 * _S9) + (float)(v55 * _S8)) + (float)(v57 * _S10)) + (float)(v58 * v134);
            if (v135 < 0.0)
              v136 = 0.0;
          }
          __asm
          {
            FCVT            S23, H1
            FCVT            S29, H2
            FCVT            S31, H4
            FCVT            S1, H22
          }
          v141 = _S28 * _S1;
          v142 = _S19 * _S1;
          v143 = _S30 * _S1;
          __asm { FCVT            S1, H5 }
          v145 = _S3 * _S1;
          v146 = _S17 * _S1;
          v147 = _S21 * _S1;
          LOWORD(_S1) = *(_WORD *)(v41 + 2 * llroundf(v136));
          __asm { FCVT            S2, H1 }
          v149 = _S8 * _S2;
          v150 = _S9 * _S2;
          v151 = _S10 * _S2;
          v152 = (float)((float)((float)(v56 * _S29) + (float)(v55 * _S23)) + (float)(v57 * _S31))
               + (float)(v58 * fmaxf(_S23, fmaxf(_S29, _S31)));
          v153 = 8191.0;
          if (v152 <= 8191.0)
          {
            v153 = v152;
            if (v152 < 0.0)
              v153 = 0.0;
          }
          _H17 = *(_WORD *)(v41 + 2 * llroundf(v153));
          __asm { FCVT            S17, H17 }
          v156 = _S23 * _S17;
          _S22 = _S29 * _S17;
          v158 = _S31 * _S17;
          v159 = (float)((float)(v226 * v142) + (float)(v141 * v228)) + (float)(v143 * v225);
          v160 = (float)((float)(v223 * v142) + (float)(v141 * v224)) + (float)(v143 * v222);
          v161 = (float)((float)(v220 * v142) + (float)(v141 * v221)) + (float)(v143 * v219);
          _S19 = (float)((float)(v226 * v146) + (float)(v145 * v228)) + (float)(v147 * v225);
          _S20 = (float)((float)(v223 * v146) + (float)(v145 * v224)) + (float)(v147 * v222);
          v164 = (float)((float)(v220 * v146) + (float)(v145 * v221)) + (float)(v147 * v219);
          v165 = (float)((float)(v226 * v150) + (float)(v149 * v228)) + (float)(v151 * v225);
          v166 = (float)((float)(v223 * v150) + (float)(v149 * v224)) + (float)(v151 * v222);
          _S3 = (float)((float)(v220 * v150) + (float)(v149 * v221)) + (float)(v151 * v219);
          v168 = (float)((float)(v226 * _S22) + (float)(v156 * v228)) + (float)(v158 * v225);
          v169 = (float)((float)(v223 * _S22) + (float)(v156 * v224)) + (float)(v158 * v222);
          v170 = (float)((float)(v220 * _S22) + (float)(v156 * v221)) + (float)(v158 * v219);
          _H1 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v159, 0.0), 8191.0)));
          __asm { FCVT            S4, H1 }
          _H1 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v160, 0.0), 8191.0)));
          __asm { FCVT            S5, H1 }
          _H1 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v161, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0)));
          __asm
          {
            FCVT            S1, H1
            FCVT            S6, H2
          }
          _H2 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(_S20, 0.0), 8191.0)));
          __asm { FCVT            S17, H2 }
          _H2 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v164, 0.0), 8191.0)));
          __asm { FCVT            S7, H2 }
          _H2 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v165, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          LOWORD(_S19) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v166, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          LOWORD(_S3) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          LOWORD(_S20) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v168, 0.0), 8191.0)));
          __asm
          {
            FCVT            S3, H3
            FCVT            S20, H20
          }
          LOWORD(_S22) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v169, 0.0), 8191.0)));
          v188 = llroundf(fminf(fmaxf(v170, 0.0), 8191.0));
          __asm { FCVT            S21, H22 }
          LOWORD(_S22) = *(_WORD *)(v42 + 2 * v188);
          __asm { FCVT            S22, H22 }
          v191 = (float)((float)((float)(v235 * _S5) + (float)(v236 * _S4)) + (float)(v234 * _S1)) + v36;
          if (v191 < v36)
            v192 = v36;
          else
            v192 = (float)((float)((float)(v235 * _S5) + (float)(v236 * _S4)) + (float)(v234 * _S1)) + v36;
          v81 = v191 <= v38;
          v193 = (float)((float)((float)(v235 * _S17) + (float)(v236 * _S6)) + (float)(v234 * _S7)) + v36;
          if (!v81)
            v192 = v38;
          v194 = llroundf(v192);
          if (v193 < v36)
            v195 = v36;
          else
            v195 = (float)((float)((float)(v235 * _S17) + (float)(v236 * _S6)) + (float)(v234 * _S7)) + v36;
          v81 = v193 <= v38;
          v196 = (float)((float)((float)(v235 * _S19) + (float)(v236 * _S2)) + (float)(v234 * _S3)) + v36;
          if (!v81)
            v195 = v38;
          v197 = llroundf(v195);
          if (v196 < v36)
            v198 = v36;
          else
            v198 = (float)((float)((float)(v235 * _S19) + (float)(v236 * _S2)) + (float)(v234 * _S3)) + v36;
          v81 = v196 <= v38;
          v199 = (float)((float)((float)(v235 * _S21) + (float)(v236 * _S20)) + (float)(v234 * _S22)) + v36;
          if (!v81)
            v198 = v38;
          v200 = llroundf(v198);
          if (v199 < v36)
            v201 = v36;
          else
            v201 = (float)((float)((float)(v235 * _S21) + (float)(v236 * _S20)) + (float)(v234 * _S22)) + v36;
          if (v199 <= v38)
            v202 = v201;
          else
            v202 = v38;
          v203 = (float)((float)(_S4 + _S6) + _S2) + _S20;
          v204 = (float)((float)(_S5 + _S17) + _S19) + _S21;
          *(_WORD *)v50 = v194 << v53;
          *((_WORD *)v50 + 1) = v197 << v53;
          *(_WORD *)v64 = v200 << v53;
          *((_WORD *)v64 + 1) = llroundf(v202) << v53;
          v205 = (float)((float)(_S1 + _S7) + _S3) + _S22;
          v206 = (float)((float)(v238 + (float)(v203 * v233)) + (float)(v204 * v232)) + (float)(v205 * v231);
          v207 = v237;
          if (v206 <= v237)
          {
            v207 = (float)((float)(v238 + (float)(v203 * v233)) + (float)(v204 * v232)) + (float)(v205 * v231);
            if (v206 < v245)
              v207 = v245;
          }
          v208 = (_WORD *)(v51 + 2 * v61);
          v209 = (float)((float)(v238 + (float)(v203 * v230)) + (float)(v204 * v229)) + (float)(v205 * v227);
          *v208 = llroundf(v207) << v53;
          v210 = v237;
          v30 = v243;
          v29 = v244;
          v32 = v241;
          v31 = v242;
          v34 = v239;
          v33 = v240;
          v35 = v218;
          if (v209 <= v237)
          {
            v210 = v209;
            if (v209 < v245)
              v210 = v245;
          }
          result += 4;
          v62 += 2;
          v63 += 4;
          v50 += 4;
          v64 += 4;
          v208[1] = llroundf(v210) << v53;
          v61 += 2;
          v55 = v216;
          v56 = v217;
        }
        while (v10 > v61);
      }
      result = &v60[v22];
      v50 = &v59[v25];
      v51 += v26;
      v9 += 2;
      v54 += v23;
    }
    while (v13 > v9);
    if (v215 && v214)
    {
      v211 = 2 * v10;
      do
      {
        result = (unsigned __int8 *)memcpy(v27, v24, v211);
        v24 += v212;
        v27 += v213;
        --v13;
      }
      while (v13);
    }
    else if (v214)
    {
      do
      {
        if (v10)
          result = (unsigned __int8 *)memset(v27, 255, 2 * v10);
        v27 += v213;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Mat_TRC_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Mat_TRC_xf420_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf422_TRC_Mat_TRC_xf420_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  unsigned int v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  char v49;
  unsigned int v50;
  char v51;
  uint64_t v52;
  unsigned __int16 *v53;
  unsigned __int8 *v54;
  char *v55;
  unint64_t v56;
  unsigned __int16 *v57;
  char *v58;
  unsigned __int8 *v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  BOOL v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v121;
  float v122;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  unsigned int v137;
  unsigned int v144;
  float v147;
  float v148;
  float v149;
  unsigned int v150;
  float v151;
  float v152;
  unsigned int v153;
  float v154;
  float v155;
  unsigned int v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  _WORD *v164;
  float v165;
  float v166;
  size_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float v182;
  float v183;
  float v184;
  float v185;
  float v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;
  float v195;

  v5 = *(_QWORD *)(result + 28);
  v6 = 2 * *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = *(_QWORD *)(result + 36);
    v12 = *(_QWORD *)(result + 44) + 2 * v7;
    v13 = 2 * v8 - 2 * v7;
    v14 = *((_QWORD *)result + 14);
    v15 = (uint64_t *)*((_QWORD *)result + 16);
    v16 = *((_QWORD *)result + 15) + 2 * (*((_QWORD *)result + 13) * a2 / v6);
    v17 = *((_QWORD *)result + 19);
    v19 = (_QWORD *)*((_QWORD *)result + 7);
    v18 = (uint64_t *)*((_QWORD *)result + 8);
    v20 = (uint64_t *)*((_QWORD *)result + 17);
    v21 = *v18;
    v22 = v18[1];
    v168 = v18[2];
    v170 = v19[2];
    v23 = (char *)(v170 + v168 * v12 + 2 * v11);
    v24 = *v20;
    v25 = v20[1];
    v26 = v20[2];
    v169 = v15[2];
    v27 = (char *)(v169 + v26 * v16 + 2 * v14);
    *(float *)&v28 = 8191.0 / (float)*(unsigned int *)(v17 + 128);
    LOWORD(a5) = *(_WORD *)(v17 + 140);
    v29 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v17 + 142);
    v30 = (float)LODWORD(a5);
    v31 = *(float *)&v28 * *(float *)v17;
    v32 = *(float *)&v28 * *(float *)(v17 + 8);
    v33 = *(float *)&v28 * *(float *)(v17 + 16);
    v34 = *(float *)&v28 * *(float *)(v17 + 20);
    v35 = *(float *)&v28 * *(float *)(v17 + 28);
    LOWORD(v28) = *(_WORD *)(v17 + 144);
    v36 = (float)v28;
    LOWORD(v28) = *(_WORD *)(v17 + 146);
    v37 = (float)v28;
    LOWORD(v28) = *(_WORD *)(v17 + 148);
    v38 = (float)v28;
    LOWORD(v28) = *(_WORD *)(v17 + 150);
    v39 = (float)v28;
    v195 = v39;
    LOWORD(v39) = *(_WORD *)(v17 + 152);
    v188 = *(float *)(v17 + 40);
    v189 = *(float *)(v17 + 36);
    v186 = *(float *)(v17 + 48) * 0.25;
    v187 = *(float *)(v17 + 44);
    v184 = *(float *)(v17 + 56) * 0.25;
    v185 = *(float *)(v17 + 52) * 0.25;
    v182 = *(float *)(v17 + 64) * 0.25;
    v183 = *(float *)(v17 + 60) * 0.25;
    v180 = *(float *)(v17 + 68) * 0.25;
    v181 = *(float *)(v17 + 72);
    v178 = *(float *)(v17 + 80);
    v179 = *(float *)(v17 + 76);
    v176 = *(float *)(v17 + 88);
    v177 = *(float *)(v17 + 84);
    v174 = *(float *)(v17 + 96);
    v175 = *(float *)(v17 + 92);
    v172 = *(float *)(v17 + 104);
    v173 = *(float *)(v17 + 100);
    v40 = v17 + 164;
    v41 = v17 + 16548;
    v42 = v19[1];
    v43 = (char *)(*v19 + *v18 * v12 + 2 * v11);
    v44 = v42 + v22 * v12 + 2 * v11;
    if (!v42)
      v44 = 0;
    v45 = *v15;
    v46 = v15[1];
    result = (unsigned __int8 *)(v45 + v24 * v16 + 2 * v14);
    v47 = *(unsigned __int8 *)(v17 + 132);
    _CF = v47 >= 0x11;
    v49 = 16 - v47;
    if (_CF)
      v49 = 0;
    v50 = *(unsigned __int8 *)(v17 + 124);
    if (v50 >= 0x11)
      v51 = 0;
    else
      v51 = 16 - v50;
    v52 = v46 + v20[1] * (v16 / 2) + 2 * v14;
    v53 = (unsigned __int16 *)(v44 + 2);
    v193 = v31;
    v194 = (float)LODWORD(a5);
    v191 = v37;
    v192 = v32;
    v190 = (float)LODWORD(v39);
    v171 = v35;
    do
    {
      v54 = &result[v24];
      v55 = &v43[v21];
      if (v10)
      {
        v56 = 0;
        v57 = v53;
        v58 = &v43[v21];
        v59 = &result[v24];
        do
        {
          v60 = (float)(*v57 >> v51) - v30;
          v61 = v32 * v60;
          v62 = v31 * (float)((float)(*(unsigned __int16 *)v43 >> v51) - v29);
          v63 = (float)(v32 * v60) + v62;
          v64 = 8191.0;
          if (v63 <= 8191.0)
          {
            v64 = (float)(v32 * v60) + v62;
            if (v63 < 0.0)
              v64 = 0.0;
          }
          v65 = (float)(*(v57 - 1) >> v51) - v30;
          v66 = (float)(v34 * v60) + (float)(v65 * v33);
          v67 = 8191.0;
          if ((float)(v62 + v66) <= 8191.0)
          {
            v67 = v62 + v66;
            if ((float)(v62 + v66) < 0.0)
              v67 = 0.0;
          }
          v68 = v35 * v65;
          v69 = 8191.0;
          if ((float)(v68 + v62) <= 8191.0)
          {
            v69 = v68 + v62;
            if ((float)(v68 + v62) < 0.0)
              v69 = 0.0;
          }
          v70 = v31 * (float)((float)(*((unsigned __int16 *)v43 + 1) >> v51) - v29);
          v71 = 8191.0;
          if ((float)(v61 + v70) <= 8191.0)
          {
            v71 = v61 + v70;
            if ((float)(v61 + v70) < 0.0)
              v71 = 0.0;
          }
          v72 = 8191.0;
          if ((float)(v66 + v70) <= 8191.0)
          {
            v72 = v66 + v70;
            if ((float)(v66 + v70) < 0.0)
              v72 = 0.0;
          }
          v73 = 8191.0;
          if ((float)(v68 + v70) <= 8191.0)
          {
            v73 = v68 + v70;
            if ((float)(v68 + v70) < 0.0)
              v73 = 0.0;
          }
          v74 = (float)(*(unsigned __int16 *)((char *)v57 + v22) >> v51) - v30;
          v75 = v32 * v74;
          v76 = v31 * (float)((float)(*(unsigned __int16 *)v58 >> v51) - v29);
          v77 = (float)(v32 * v74) + v76;
          v78 = 8191.0;
          if (v77 <= 8191.0)
          {
            v78 = v77;
            if (v77 < 0.0)
              v78 = 0.0;
          }
          v79 = (float)(*(unsigned __int16 *)((char *)v57 + v22 - 2) >> v51) - v30;
          v80 = (float)(v34 * v74) + (float)(v79 * v33);
          v81 = 8191.0;
          if ((float)(v76 + v80) <= 8191.0)
          {
            v81 = v76 + v80;
            if ((float)(v76 + v80) < 0.0)
              v81 = 0.0;
          }
          v82 = v35 * v79;
          v83 = v82 + v76;
          v84 = (float)(v82 + v76) <= 8191.0;
          v85 = 8191.0;
          if (v84)
          {
            v85 = v83;
            if (v83 < 0.0)
              v85 = 0.0;
          }
          v86 = v31 * (float)((float)(*((unsigned __int16 *)v58 + 1) >> v51) - v29);
          v87 = v75 + v86;
          v88 = 8191.0;
          if (v87 <= 8191.0)
          {
            v88 = v87;
            if (v87 < 0.0)
              v88 = 0.0;
          }
          v89 = v80 + v86;
          v84 = (float)(v80 + v86) <= 8191.0;
          v90 = 8191.0;
          if (v84)
          {
            v90 = v89;
            if (v89 < 0.0)
              v90 = 0.0;
          }
          v91 = v29;
          v92 = v82 + v86;
          v93 = 8191.0;
          if (v92 <= 8191.0)
          {
            v93 = v92;
            if (v92 < 0.0)
              v93 = 0.0;
          }
          _H1 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v64, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          _H6 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v67, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H24 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v69, 0.0), 8191.0)));
          _H25 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          __asm
          {
            FCVT            S24, H24
            FCVT            S25, H25
          }
          _H26 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          _H19 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          _H4 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H5 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          __asm
          {
            FCVT            S5, H5
            FCVT            S2, H2
          }
          _H7 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          _H17 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          __asm { FCVT            S17, H17 }
          v121 = (float)((float)(v179 * _S6) + (float)(_S1 * v181)) + (float)(_S24 * v178);
          v122 = (float)((float)(v176 * _S6) + (float)(_S1 * v177)) + (float)(_S24 * v175);
          _S1 = (float)((float)(v173 * _S6) + (float)(_S1 * v174)) + (float)(_S24 * v172);
          _S6 = (float)((float)(v179 * _S26) + (float)(_S25 * v181)) + (float)(_S27 * v178);
          _S3 = (float)((float)(v176 * _S26) + (float)(_S25 * v177)) + (float)(_S27 * v175);
          v126 = (float)((float)(v173 * _S26) + (float)(_S25 * v174)) + (float)(_S27 * v172);
          v127 = (float)((float)(v179 * _S4) + (float)(_S19 * v181)) + (float)(_S5 * v178);
          v128 = (float)((float)(v176 * _S4) + (float)(_S19 * v177)) + (float)(_S5 * v175);
          v129 = (float)((float)(v173 * _S4) + (float)(_S19 * v174)) + (float)(_S5 * v172);
          v130 = (float)((float)(v179 * _S7) + (float)(_S2 * v181)) + (float)(_S17 * v178);
          v131 = (float)((float)(v176 * _S7) + (float)(_S2 * v177)) + (float)(_S17 * v175);
          v132 = (float)((float)(v173 * _S7) + (float)(_S2 * v174)) + (float)(_S17 * v172);
          LOWORD(_S4) = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v121, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          LOWORD(_S5) = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v122, 0.0), 8191.0)));
          __asm { FCVT            S19, H5 }
          LOWORD(_S1) = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          LOWORD(_S6) = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          __asm
          {
            FCVT            S5, H1
            FCVT            S24, H6
          }
          LOWORD(_S1) = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          v137 = llroundf(fminf(fmaxf(v126, 0.0), 8191.0));
          __asm { FCVT            S25, H1 }
          LOWORD(_S1) = *(_WORD *)(v41 + 2 * v137);
          __asm { FCVT            S6, H1 }
          LOWORD(_S1) = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v127, 0.0), 8191.0)));
          __asm { FCVT            S7, H1 }
          LOWORD(_S1) = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v128, 0.0), 8191.0)));
          __asm { FCVT            S26, H1 }
          LOWORD(_S1) = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v129, 0.0), 8191.0)));
          LOWORD(_S3) = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v130, 0.0), 8191.0)));
          __asm
          {
            FCVT            S27, H1
            FCVT            S1, H3
          }
          LOWORD(_S3) = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v131, 0.0), 8191.0)));
          v144 = llroundf(fminf(fmaxf(v132, 0.0), 8191.0));
          __asm { FCVT            S2, H3 }
          LOWORD(_S3) = *(_WORD *)(v41 + 2 * v144);
          __asm { FCVT            S3, H3 }
          v147 = (float)((float)((float)(v188 * _S19) + (float)(v189 * _S4)) + (float)(v187 * _S5)) + v36;
          if (v147 < v36)
            v148 = v36;
          else
            v148 = (float)((float)((float)(v188 * _S19) + (float)(v189 * _S4)) + (float)(v187 * _S5)) + v36;
          v84 = v147 <= v38;
          v149 = (float)((float)((float)(v188 * _S25) + (float)(v189 * _S24)) + (float)(v187 * _S6)) + v36;
          if (!v84)
            v148 = v38;
          v150 = llroundf(v148);
          if (v149 < v36)
            v151 = v36;
          else
            v151 = (float)((float)((float)(v188 * _S25) + (float)(v189 * _S24)) + (float)(v187 * _S6)) + v36;
          v84 = v149 <= v38;
          v152 = (float)((float)((float)(v188 * _S26) + (float)(v189 * _S7)) + (float)(v187 * _S27)) + v36;
          if (!v84)
            v151 = v38;
          v153 = llroundf(v151);
          if (v152 < v36)
            v154 = v36;
          else
            v154 = (float)((float)((float)(v188 * _S26) + (float)(v189 * _S7)) + (float)(v187 * _S27)) + v36;
          v84 = v152 <= v38;
          v155 = (float)((float)((float)(v188 * _S2) + (float)(v189 * _S1)) + (float)(v187 * _S3)) + v36;
          if (!v84)
            v154 = v38;
          v156 = llroundf(v154);
          if (v155 < v36)
            v157 = v36;
          else
            v157 = (float)((float)((float)(v188 * _S2) + (float)(v189 * _S1)) + (float)(v187 * _S3)) + v36;
          if (v155 <= v38)
            v158 = v157;
          else
            v158 = v38;
          v159 = (float)((float)(_S4 + _S24) + _S7) + _S1;
          v160 = (float)((float)(_S19 + _S25) + _S26) + _S2;
          *(_WORD *)result = v150 << v49;
          *((_WORD *)result + 1) = v153 << v49;
          *(_WORD *)v59 = v156 << v49;
          *((_WORD *)v59 + 1) = llroundf(v158) << v49;
          v161 = (float)((float)(_S5 + _S6) + _S27) + _S3;
          v162 = (float)((float)(v191 + (float)(v159 * v186)) + (float)(v160 * v185)) + (float)(v161 * v184);
          v163 = v190;
          if (v162 <= v190)
          {
            v163 = (float)((float)(v191 + (float)(v159 * v186)) + (float)(v160 * v185)) + (float)(v161 * v184);
            if (v162 < v195)
              v163 = v195;
          }
          v164 = (_WORD *)(v52 + 2 * v56);
          v165 = (float)((float)(v191 + (float)(v159 * v183)) + (float)(v160 * v182)) + (float)(v161 * v180);
          *v164 = llroundf(v163) << v49;
          v166 = v190;
          v29 = v91;
          v30 = v194;
          v32 = v192;
          v35 = v171;
          if (v165 <= v190)
          {
            v166 = v165;
            if (v165 < v195)
              v166 = v195;
          }
          v43 += 4;
          v57 += 2;
          v58 += 4;
          result += 4;
          v59 += 4;
          v164[1] = llroundf(v166) << v49;
          v56 += 2;
          v31 = v193;
        }
        while (v10 > v56);
      }
      v43 = &v55[v21];
      result = &v54[v24];
      v52 += v25;
      v9 += 2;
      v53 += v22;
    }
    while (v13 > v9);
    if (v170 && v169)
    {
      v167 = 2 * v10;
      do
      {
        result = (unsigned __int8 *)memcpy(v27, v23, v167);
        v23 += v168;
        v27 += v26;
        --v13;
      }
      while (v13);
    }
    else if (v169)
    {
      do
      {
        if (v10)
          result = (unsigned __int8 *)memset(v27, 255, 2 * v10);
        v27 += v26;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_rgb_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  v12 = a2[5];
  v13 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  v15 = a6[3];
  v17 = a6[4];
  v18 = a6[5];
  if ((v18 & 1) != 0)
  {
    ++v18;
    ++v12;
    if ((v15 & 1) != 0)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  v19 = a2[2];
  v20 = a2[4];
  if ((v17 & 1) != 0)
  {
    ++v17;
    ++v20;
    if ((v16 & 1) != 0)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9)
    v21 = v19;
  else
    v21 = v9 - v20;
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13)
    v16 = v13 - v17;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v12 + v11 > v10)
    v11 = v10 - v12;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v18 + v15 <= v14)
    v23 = v15;
  else
    v23 = v14 - v18;
  if (v21 >= v16)
    v24 = v16;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v20;
  *(_QWORD *)&v27[44] = v12;
  v31 = v13;
  v32 = v14;
  v33 = v24;
  v34 = v23;
  v35 = v17;
  v36 = v18;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_rgb_xf420_GCD);
  return 0;
}

unint64_t vt_Copy_xf422_rgb_xf420_GCD(unint64_t result, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  unsigned int v28;
  unsigned int v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  unsigned int v53;
  BOOL v54;
  char v55;
  char v56;
  uint64_t v57;
  float v58;
  char v59;
  unsigned __int16 *v60;
  char *v61;
  char *v62;
  unint64_t v63;
  unsigned __int16 *v64;
  char *v65;
  char *v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  _WORD *v110;
  float v111;
  float v112;
  size_t v113;
  uint64_t v114;
  uint64_t v115;
  float v116;
  float v117;
  float v118;
  float v119;

  v4 = *(_QWORD *)(result + 28);
  v5 = 2 * *(unsigned __int8 *)result;
  v6 = v4 * a2 / v5;
  v7 = (v4 + v4 * a2) / v5;
  if (2 * v7 != 2 * v6)
  {
    v8 = 0;
    v9 = *(_QWORD *)(result + 20);
    v10 = *(_QWORD *)(result + 36);
    v11 = *(_QWORD *)(result + 44) + 2 * v6;
    v12 = 2 * v7 - 2 * v6;
    v13 = *(_QWORD *)(result + 112);
    v14 = *(_QWORD **)(result + 128);
    v15 = *(_QWORD *)(result + 120) + 2 * (*(_QWORD *)(result + 104) * a2 / v5);
    v16 = *(_QWORD *)(result + 152);
    v18 = *(_QWORD **)(result + 56);
    v17 = *(uint64_t **)(result + 64);
    v19 = *(uint64_t **)(result + 136);
    v20 = *v17;
    v21 = v17[1];
    v22 = v17[2];
    v115 = v18[2];
    v23 = (char *)(v115 + v22 * v11 + 2 * v10);
    v24 = *v19;
    v25 = v19[1];
    v26 = v19[2];
    v114 = v14[2];
    v27 = (char *)(v114 + v26 * v15 + 2 * v13);
    *(float *)&v28 = (float)*(unsigned int *)(v16 + 128);
    *(float *)&v29 = (float)*(unsigned int *)(v16 + 136);
    v30 = *(float *)&v29 / *(float *)&v28;
    LOWORD(v28) = *(_WORD *)(v16 + 140);
    v31 = (float)v28;
    LOWORD(v29) = *(_WORD *)(v16 + 142);
    v32 = (float)v29;
    v33 = v30 * *(float *)v16;
    v34 = v30 * *(float *)(v16 + 8);
    v35 = v30 * *(float *)(v16 + 16);
    v36 = v30 * *(float *)(v16 + 20);
    v37 = *(float *)(v16 + 28);
    v38 = v30 * v37;
    LOWORD(v37) = *(_WORD *)(v16 + 144);
    v39 = (float)LODWORD(v37);
    LOWORD(v2) = *(_WORD *)(v16 + 146);
    v40 = (float)v2;
    LOWORD(v3) = *(_WORD *)(v16 + 148);
    v41 = (float)v3;
    LOWORD(v3) = *(_WORD *)(v16 + 150);
    v42 = (float)v3;
    LOWORD(v3) = *(_WORD *)(v16 + 152);
    v43 = (float)v3;
    v44 = *(float *)(v16 + 36);
    v45 = *(float *)(v16 + 40);
    v46 = *(float *)(v16 + 44);
    v118 = *(float *)(v16 + 52) * 0.25;
    v119 = *(float *)(v16 + 48) * 0.25;
    v116 = *(float *)(v16 + 60) * 0.25;
    v117 = *(float *)(v16 + 56) * 0.25;
    v47 = *(float *)(v16 + 64) * 0.25;
    v48 = v18[1];
    v49 = (char *)(*v18 + *v17 * v11 + 2 * v10);
    v50 = v48 + v21 * v11 + 2 * v10;
    if (!v48)
      v50 = 0;
    v51 = v14[1];
    v52 = (char *)(*v14 + v24 * v15 + 2 * v13);
    v53 = *(unsigned __int8 *)(v16 + 132);
    v54 = v53 >= 0x11;
    v55 = 16 - v53;
    if (v54)
      v56 = 0;
    else
      v56 = v55;
    LODWORD(result) = *(unsigned __int8 *)(v16 + 124);
    if (result >= 0x11)
      LOBYTE(result) = 0;
    else
      LOBYTE(result) = 16 - result;
    v57 = v51 + v19[1] * (v15 / 2) + 2 * v13;
    v58 = *(float *)(v16 + 68) * 0.25;
    result = result;
    v59 = v56;
    v60 = (unsigned __int16 *)(v50 + 2);
    do
    {
      v61 = &v52[v24];
      v62 = &v49[v20];
      if (v9)
      {
        v63 = 0;
        v64 = v60;
        v65 = &v49[v20];
        v66 = &v52[v24];
        do
        {
          v67 = (float)(*(v64 - 1) >> result) - v32;
          v68 = (float)(*v64 >> result) - v32;
          v69 = v34 * v68;
          v70 = (float)(v36 * v68) + (float)(v67 * v35);
          v71 = v38 * v67;
          v72 = v33 * (float)((float)(*(unsigned __int16 *)v49 >> result) - v31);
          v73 = v69 + v72;
          v74 = v72 + v70;
          v75 = v71 + v72;
          v76 = (float)((float)((float)(v45 * (float)(v72 + v70)) + (float)(v44 * (float)(v69 + v72)))
                      + (float)(v46 * (float)(v71 + v72)))
              + v39;
          v77 = v41;
          if (v76 <= v41)
          {
            v77 = v76;
            if (v76 < v39)
              v77 = v39;
          }
          v78 = v33 * (float)((float)(*((unsigned __int16 *)v49 + 1) >> result) - v31);
          v79 = v69 + v78;
          v80 = v70 + v78;
          v81 = v71 + v78;
          v82 = *(unsigned __int16 *)((char *)v64 + v21 - 2);
          v83 = *(unsigned __int16 *)((char *)v64 + v21);
          v84 = *(unsigned __int16 *)v65;
          v85 = *((unsigned __int16 *)v65 + 1);
          v86 = (float)((float)((float)(v45 * v80) + (float)(v44 * v79)) + (float)(v46 * (float)(v71 + v78))) + v39;
          *(_WORD *)v52 = llroundf(v77) << v59;
          v87 = v41;
          if (v86 <= v41)
          {
            v87 = v86;
            if (v86 < v39)
              v87 = v39;
          }
          v88 = (float)(int)(v82 >> result) - v32;
          v89 = (float)(int)(v83 >> result) - v32;
          v90 = v34 * v89;
          v91 = (float)(v36 * v89) + (float)(v88 * v35);
          v92 = v38 * v88;
          v93 = v33 * (float)((float)(int)(v84 >> result) - v31);
          v94 = v90 + v93;
          v95 = v93 + v91;
          v96 = v92 + v93;
          v97 = (float)((float)((float)(v45 * (float)(v93 + v91)) + (float)(v44 * (float)(v90 + v93)))
                      + (float)(v46 * (float)(v92 + v93)))
              + v39;
          *((_WORD *)v52 + 1) = llroundf(v87) << v59;
          v98 = v41;
          if (v97 <= v41)
          {
            v98 = v97;
            if (v97 < v39)
              v98 = v39;
          }
          v99 = v33 * (float)((float)(int)(v85 >> result) - v31);
          v100 = v90 + v99;
          v101 = v91 + v99;
          v102 = v92 + v99;
          v103 = (float)((float)((float)(v45 * v101) + (float)(v44 * v100)) + (float)(v46 * (float)(v92 + v99))) + v39;
          *(_WORD *)v66 = llroundf(v98) << v59;
          v104 = v41;
          if (v103 <= v41)
          {
            v104 = v103;
            if (v103 < v39)
              v104 = v39;
          }
          *((_WORD *)v66 + 1) = llroundf(v104) << v59;
          v105 = (float)((float)(v73 + v79) + v94) + v100;
          v106 = (float)((float)(v74 + v80) + v95) + v101;
          v107 = (float)((float)(v75 + v81) + v96) + v102;
          v108 = (float)((float)(v40 + (float)(v105 * v119)) + (float)(v106 * v118)) + (float)(v107 * v117);
          v109 = v43;
          if (v108 <= v43)
          {
            v109 = (float)((float)(v40 + (float)(v105 * v119)) + (float)(v106 * v118)) + (float)(v107 * v117);
            if (v108 < v42)
              v109 = v42;
          }
          v110 = (_WORD *)(v57 + 2 * v63);
          v111 = (float)((float)(v40 + (float)(v105 * v116)) + (float)(v106 * v47)) + (float)(v107 * v58);
          *v110 = llroundf(v109) << v59;
          v112 = v43;
          if (v111 <= v43)
          {
            v112 = v111;
            if (v111 < v42)
              v112 = v42;
          }
          v49 += 4;
          v65 += 4;
          v64 += 2;
          v52 += 4;
          v66 += 4;
          v110[1] = llroundf(v112) << v59;
          v63 += 2;
        }
        while (v9 > v63);
      }
      v49 = &v62[v20];
      v52 = &v61[v24];
      v57 += v25;
      v8 += 2;
      v60 += v21;
    }
    while (v12 > v8);
    if (v115 && v114)
    {
      v113 = 2 * v9;
      do
      {
        result = (unint64_t)memcpy(v27, v23, v113);
        v23 += v22;
        v27 += v26;
        --v12;
      }
      while (v12);
    }
    else if (v114)
    {
      do
      {
        if (v9)
          result = (unint64_t)memset(v27, 255, 2 * v9);
        v27 += v26;
        --v12;
      }
      while (v12);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Tone_Mat_TRC_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v20 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v18 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Tone_Mat_TRC_422vf_GCD);
  return 0;
}

_QWORD *vt_Copy_xf422_TRC_Tone_Mat_TRC_422vf_GCD(_QWORD *result, uint64_t a2, double a3, float a4, double a5, float a6)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  float v32;
  float v33;
  float v34;
  unsigned int v35;
  float v36;
  float v37;
  float v38;
  unsigned int v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  uint64_t v53;
  unsigned int v54;
  char v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  float v68;
  float v69;
  float v70;
  float v71;
  size_t v72;
  unsigned __int16 *v73;
  _BYTE *v74;
  unsigned __int16 *v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  BOOL v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v108;
  float v109;
  float v110;
  float v115;
  float v116;
  float v118;
  float v119;
  float v120;
  float v125;
  float v126;
  float v127;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  uint64_t v150;
  size_t v151;
  _BYTE *v152;
  unsigned __int16 *v153;
  unsigned int v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;

  v6 = *(_QWORD *)((char *)result + 28);
  v7 = *(unsigned __int8 *)result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)((char *)result + 20);
    v12 = *(_QWORD *)((char *)result + 36);
    v13 = v8 + *(_QWORD *)((char *)result + 44);
    v14 = v9 - v8;
    v15 = result[14];
    v16 = (_QWORD *)result[16];
    v17 = result[13] * a2 / v7 + result[15];
    v18 = result[19];
    v19 = (uint64_t *)result[7];
    v20 = (uint64_t *)result[8];
    v21 = (uint64_t *)result[17];
    v22 = *v20;
    v23 = v20[1];
    v24 = v20[2];
    v25 = v19[2];
    v26 = v25 + v24 * v13 + 2 * v12;
    v27 = *v21;
    v28 = v21[1];
    v29 = v21[2];
    v30 = v16[2];
    v31 = (_BYTE *)(v30 + v29 * v17 + v15);
    LOWORD(a4) = *(_WORD *)(v18 + 140);
    LOWORD(a6) = *(_WORD *)(v18 + 142);
    v32 = 8191.0 / (float)*(unsigned int *)(v18 + 128);
    v33 = (float)LODWORD(a6);
    v166 = v32 * *(float *)v18;
    v167 = (float)LODWORD(a4);
    v163 = v32 * *(float *)(v18 + 16);
    v164 = v32 * *(float *)(v18 + 8);
    v34 = v32 * *(float *)(v18 + 20);
    *(float *)&v35 = v32 * *(float *)(v18 + 28);
    v161 = *(float *)&v35;
    v162 = v34;
    LOWORD(v35) = *(_WORD *)(v18 + 144);
    v36 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v18 + 146);
    v37 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v18 + 148);
    v38 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v18 + 150);
    *(float *)&v39 = (float)v35;
    v165 = *(float *)&v39;
    LOWORD(v39) = *(_WORD *)(v18 + 152);
    v40 = (float)v39;
    v41 = *(float *)(v18 + 36);
    v42 = *(float *)(v18 + 40);
    v43 = *(float *)(v18 + 44);
    v159 = *(float *)(v18 + 52) * 0.5;
    v160 = *(float *)(v18 + 48) * 0.5;
    v157 = *(float *)(v18 + 60) * 0.5;
    v158 = *(float *)(v18 + 56) * 0.5;
    v44 = *(float *)(v18 + 72);
    v155 = *(float *)(v18 + 68) * 0.5;
    v156 = *(float *)(v18 + 64) * 0.5;
    v46 = *(float *)(v18 + 76);
    v45 = *(float *)(v18 + 80);
    v47 = *(float *)(v18 + 84);
    v48 = *(float *)(v18 + 88);
    v49 = *(float *)(v18 + 92);
    v50 = *(float *)(v18 + 96);
    v51 = *(float *)(v18 + 100);
    v52 = *(float *)(v18 + 104);
    v53 = v18 + 164;
    result = (_QWORD *)(v18 + 16548);
    v54 = *(unsigned __int8 *)(v18 + 124);
    if (v54 >= 0x11)
      v55 = 0;
    else
      v55 = 16 - v54;
    v56 = v16[1];
    _ZF = v56 == 0;
    v58 = v56 + v28 * v17;
    v59 = *v16 + v27 * v17;
    v60 = v18 + 32932;
    v61 = v58 + v15;
    if (_ZF)
      v61 = 0;
    v62 = (_BYTE *)(v59 + v15);
    v64 = *v19;
    v63 = v19[1];
    v65 = v63 + v23 * v13 + 2 * v12;
    if (!v63)
      v65 = 0;
    v66 = v64 + v22 * v13 + 2 * v12;
    v67 = v55;
    v69 = *(float *)(v18 + 108);
    v68 = *(float *)(v18 + 112);
    v70 = *(float *)(v18 + 116);
    v71 = *(float *)(v18 + 120);
    do
    {
      if (v11)
      {
        v72 = 0;
        v73 = (unsigned __int16 *)v66;
        v74 = v62;
        do
        {
          v75 = (unsigned __int16 *)(v65 + 2 * v72);
          v76 = (float)(v75[1] >> v67) - v33;
          v77 = v164 * v76;
          v78 = v166 * (float)((float)(*v73 >> v67) - v167);
          v79 = (float)(v164 * v76) + v78;
          v80 = 8191.0;
          if (v79 <= 8191.0)
          {
            v80 = (float)(v164 * v76) + v78;
            if (v79 < 0.0)
              v80 = 0.0;
          }
          v81 = v33;
          v82 = (float)(*v75 >> v67) - v33;
          v83 = (float)(v162 * v76) + (float)(v82 * v163);
          v84 = 8191.0;
          if ((float)(v78 + v83) <= 8191.0)
          {
            v84 = v78 + v83;
            if ((float)(v78 + v83) < 0.0)
              v84 = 0.0;
          }
          v85 = v161 * v82;
          v86 = v85 + v78;
          v87 = (float)(v85 + v78) <= 8191.0;
          v88 = 8191.0;
          if (v87)
          {
            v88 = v86;
            if (v86 < 0.0)
              v88 = 0.0;
          }
          v89 = v166 * (float)((float)(v73[1] >> v67) - v167);
          v90 = v77 + v89;
          v87 = (float)(v77 + v89) <= 8191.0;
          v91 = 8191.0;
          if (v87)
          {
            v91 = v90;
            if (v90 < 0.0)
              v91 = 0.0;
          }
          v92 = v83 + v89;
          v87 = (float)(v83 + v89) <= 8191.0;
          v93 = 8191.0;
          if (v87)
          {
            v93 = v92;
            if (v92 < 0.0)
              v93 = 0.0;
          }
          v94 = v85 + v89;
          v87 = (float)(v85 + v89) <= 8191.0;
          v95 = 8191.0;
          if (v87)
          {
            v95 = v94;
            if (v94 < 0.0)
              v95 = 0.0;
          }
          _H0 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S24, H0 }
          _H0 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm { FCVT            S25, H0 }
          _H0 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          __asm { FCVT            S26, H0 }
          _H19 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          _H28 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v95, 0.0), 8191.0)));
          v108 = fmaxf(_S24, fmaxf(_S25, _S26));
          v109 = (float)((float)((float)(v68 * _S25) + (float)(v69 * _S24)) + (float)(v70 * _S26)) + (float)(v71 * v108);
          v110 = 8191.0;
          if (v109 <= 8191.0)
          {
            v110 = (float)((float)((float)(v68 * _S25) + (float)(v69 * _S24)) + (float)(v70 * _S26))
                 + (float)(v71 * v108);
            if (v109 < 0.0)
              v110 = 0.0;
          }
          __asm
          {
            FCVT            S27, H19
            FCVT            S28, H28
            FCVT            S30, H30
          }
          _H19 = *((_WORD *)result + llroundf(v110));
          v115 = (float)((float)((float)(v68 * _S28) + (float)(v69 * _S27)) + (float)(v70 * _S30))
               + (float)(v71 * fmaxf(_S27, fmaxf(_S28, _S30)));
          v116 = 8191.0;
          if (v115 <= 8191.0)
          {
            v116 = v115;
            if (v115 < 0.0)
              v116 = 0.0;
          }
          __asm { FCVT            S0, H19 }
          v118 = _S24 * _S0;
          v119 = _S25 * _S0;
          v120 = _S26 * _S0;
          _H1 = *((_WORD *)result + llroundf(v116));
          __asm { FCVT            S1, H1 }
          _S25 = _S27 * _S1;
          _S26 = _S28 * _S1;
          v125 = _S30 * _S1;
          v126 = (float)((float)(v46 * v119) + (float)(v118 * v44)) + (float)(v120 * v45);
          v127 = (float)((float)(v48 * v119) + (float)(v118 * v47)) + (float)(v120 * v49);
          _S0 = (float)((float)(v51 * v119) + (float)(v118 * v50)) + (float)(v120 * v52);
          _S19 = (float)((float)(v46 * _S26) + (float)(_S25 * v44)) + (float)(v125 * v45);
          _S24 = (float)((float)(v48 * _S26) + (float)(_S25 * v47)) + (float)(v125 * v49);
          _S1 = (float)((float)(v51 * _S26) + (float)(_S25 * v50)) + (float)(v125 * v52);
          LOWORD(_S25) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v126, 0.0), 8191.0)));
          LOWORD(_S26) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v127, 0.0), 8191.0)));
          __asm
          {
            FCVT            S25, H25
            FCVT            S26, H26
          }
          LOWORD(_S0) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          LOWORD(_S19) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          LOWORD(_S24) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S24, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          LOWORD(_S1) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          v138 = (float)((float)((float)(v42 * _S26) + (float)(v41 * _S25)) + (float)(v43 * _S0)) + v36;
          v139 = (float)((float)((float)(v42 * _S24) + (float)(v41 * _S19)) + (float)(v43 * _S1)) + v36;
          if (v138 < v36)
            v140 = v36;
          else
            v140 = (float)((float)((float)(v42 * _S26) + (float)(v41 * _S25)) + (float)(v43 * _S0)) + v36;
          if (v138 <= v38)
            v141 = v140;
          else
            v141 = v38;
          *v74 = llroundf(v141);
          if (v139 < v36)
            v142 = v36;
          else
            v142 = (float)((float)((float)(v42 * _S24) + (float)(v41 * _S19)) + (float)(v43 * _S1)) + v36;
          if (v139 > v38)
            v142 = v38;
          v74[1] = llroundf(v142);
          v143 = _S25 + _S19;
          v144 = _S26 + _S24;
          v145 = _S0 + _S1;
          v146 = (float)((float)(v37 + (float)(v143 * v160)) + (float)(v144 * v159))
               + (float)((float)(_S0 + _S1) * v158);
          v147 = v40;
          if (v146 <= v40)
          {
            v147 = v146;
            if (v146 < v165)
              v147 = v165;
          }
          v148 = (float)((float)(v37 + (float)(v143 * v157)) + (float)(v144 * v156)) + (float)(v145 * v155);
          *(_BYTE *)(v61 + v72) = llroundf(v147);
          v149 = v40;
          if (v148 <= v40)
          {
            v149 = v148;
            if (v148 < v165)
              v149 = v165;
          }
          *(_BYTE *)(v61 + v72 + 1) = llroundf(v149);
          v72 += 2;
          v73 += 2;
          v74 += 2;
          v33 = v81;
        }
        while (v11 > v72);
      }
      v66 += v22;
      v65 += v23;
      v62 += v27;
      v61 += v28;
      ++v10;
    }
    while (v10 != v14);
    if (v25 && v30)
    {
      v150 = 0;
      do
      {
        if (v11)
        {
          v151 = v11;
          v152 = v31;
          v153 = (unsigned __int16 *)v26;
          do
          {
            v154 = *v153++;
            *v152++ = llroundf((float)v154 * 0.0038911);
            --v151;
          }
          while (v151);
        }
        v26 += v24;
        v31 += v29;
        ++v150;
      }
      while (v150 != v14);
    }
    else if (v30)
    {
      do
      {
        if (v11)
          result = memset(v31, 255, v11);
        v31 += v29;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Mat_TRC_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v20 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v18 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Mat_TRC_422vf_GCD);
  return 0;
}

_QWORD *vt_Copy_xf422_TRC_Mat_TRC_422vf_GCD(_QWORD *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  float v33;
  float v34;
  float v35;
  float v36;
  unsigned int v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  uint64_t v56;
  unsigned int v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  size_t v68;
  unsigned __int16 *v69;
  _BYTE *v70;
  unsigned __int16 *v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  BOOL v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v107;
  float v108;
  float v112;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  uint64_t v131;
  size_t v132;
  _BYTE *v133;
  unsigned __int16 *v134;
  unsigned int v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;

  v6 = *(_QWORD *)((char *)result + 28);
  v7 = *(unsigned __int8 *)result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)((char *)result + 20);
    v12 = *(_QWORD *)((char *)result + 36);
    v13 = v8 + *(_QWORD *)((char *)result + 44);
    v14 = v9 - v8;
    v15 = result[14];
    v16 = result[13] * a2 / v7;
    v17 = (uint64_t *)result[16];
    v18 = v16 + result[15];
    v19 = result[19];
    v20 = (uint64_t *)result[7];
    v21 = (uint64_t *)result[8];
    v22 = (uint64_t *)result[17];
    v23 = *v21;
    v24 = v21[1];
    v25 = v21[2];
    v26 = v20[2];
    v27 = v26 + v25 * v13 + 2 * v12;
    v28 = *v22;
    v29 = v22[1];
    v30 = v22[2];
    v31 = v17[2];
    v32 = (_BYTE *)(v31 + v30 * v18 + v15);
    LOWORD(a5) = *(_WORD *)(v19 + 140);
    LOWORD(a6) = *(_WORD *)(v19 + 142);
    v33 = 8191.0 / (float)*(unsigned int *)(v19 + 128);
    v34 = (float)LODWORD(a5);
    v35 = (float)LODWORD(a6);
    v36 = v33 * *(float *)v19;
    v143 = v33 * *(float *)(v19 + 16);
    v144 = v33 * *(float *)(v19 + 8);
    v141 = v33 * *(float *)(v19 + 28);
    *(float *)&v37 = v141;
    v142 = v33 * *(float *)(v19 + 20);
    LOWORD(v37) = *(_WORD *)(v19 + 144);
    v38 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v19 + 146);
    v39 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v19 + 148);
    v40 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v19 + 150);
    v41 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v19 + 152);
    v42 = (float)v37;
    v43 = *(float *)(v19 + 36);
    v44 = *(float *)(v19 + 40);
    v45 = *(float *)(v19 + 44);
    v139 = *(float *)(v19 + 52) * 0.5;
    v140 = *(float *)(v19 + 48) * 0.5;
    v137 = *(float *)(v19 + 60) * 0.5;
    v138 = *(float *)(v19 + 56) * 0.5;
    v136 = *(float *)(v19 + 64) * 0.5;
    v46 = *(float *)(v19 + 72);
    v47 = *(float *)(v19 + 68) * 0.5;
    v49 = *(float *)(v19 + 76);
    v48 = *(float *)(v19 + 80);
    v50 = *(float *)(v19 + 84);
    v51 = *(float *)(v19 + 88);
    v52 = *(float *)(v19 + 92);
    v53 = *(float *)(v19 + 96);
    v54 = *(float *)(v19 + 100);
    v55 = *(float *)(v19 + 104);
    v56 = v19 + 164;
    result = (_QWORD *)(v19 + 16548);
    v57 = *(unsigned __int8 *)(v19 + 124);
    if (v57 >= 0x11)
      v58 = 0;
    else
      v58 = 16 - v57;
    v60 = *v17;
    v59 = v17[1];
    v61 = v59 + v29 * v18 + v15;
    if (!v59)
      v61 = 0;
    v62 = (_BYTE *)(v60 + v28 * v18 + v15);
    v64 = *v20;
    v63 = v20[1];
    v65 = v63 + v24 * v13 + 2 * v12;
    if (!v63)
      v65 = 0;
    v66 = v64 + v23 * v13 + 2 * v12;
    v67 = v58;
    do
    {
      if (v11)
      {
        v68 = 0;
        v69 = (unsigned __int16 *)v66;
        v70 = v62;
        do
        {
          v71 = (unsigned __int16 *)(v65 + 2 * v68);
          v72 = (float)(v71[1] >> v67) - v35;
          v73 = v144 * v72;
          v74 = v36 * (float)((float)(*v69 >> v67) - v34);
          v75 = (float)(v144 * v72) + v74;
          v76 = 8191.0;
          if (v75 <= 8191.0)
          {
            v76 = (float)(v144 * v72) + v74;
            if (v75 < 0.0)
              v76 = 0.0;
          }
          v77 = (float)(*v71 >> v67) - v35;
          v78 = (float)(v142 * v72) + (float)(v77 * v143);
          v79 = 8191.0;
          if ((float)(v74 + v78) <= 8191.0)
          {
            v79 = v74 + v78;
            if ((float)(v74 + v78) < 0.0)
              v79 = 0.0;
          }
          v80 = v141 * v77;
          v81 = v80 + v74;
          v82 = (float)(v80 + v74) <= 8191.0;
          v83 = 8191.0;
          if (v82)
          {
            v83 = v81;
            if (v81 < 0.0)
              v83 = 0.0;
          }
          v84 = v36 * (float)((float)(v69[1] >> v67) - v34);
          v85 = v73 + v84;
          v86 = 8191.0;
          if (v85 <= 8191.0)
          {
            v86 = v85;
            if (v85 < 0.0)
              v86 = 0.0;
          }
          v87 = v78 + v84;
          v82 = (float)(v78 + v84) <= 8191.0;
          v88 = 8191.0;
          if (v82)
          {
            v88 = v87;
            if (v87 < 0.0)
              v88 = 0.0;
          }
          v89 = v80 + v84;
          v82 = (float)(v80 + v84) <= 8191.0;
          v90 = 8191.0;
          if (v82)
          {
            v90 = v89;
            if (v89 < 0.0)
              v90 = 0.0;
          }
          _H4 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          _H5 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          __asm
          {
            FCVT            S4, H4
            FCVT            S5, H5
          }
          _H6 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H7 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          _H24 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          _H25 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          v107 = (float)((float)(v49 * _S5) + (float)(_S4 * v46)) + (float)(_S6 * v48);
          v108 = (float)((float)(v51 * _S5) + (float)(_S4 * v50)) + (float)(_S6 * v52);
          _S4 = (float)((float)(v54 * _S5) + (float)(_S4 * v53)) + (float)(_S6 * v55);
          _S5 = (float)((float)(v49 * _S24) + (float)(_S7 * v46)) + (float)(_S25 * v48);
          _S6 = (float)((float)(v51 * _S24) + (float)(_S7 * v50)) + (float)(_S25 * v52);
          v112 = (float)((float)(v54 * _S24) + (float)(_S7 * v53)) + (float)(_S25 * v55);
          LOWORD(_S24) = *((_WORD *)result + llroundf(fminf(fmaxf(v107, 0.0), 8191.0)));
          LOWORD(_S25) = *((_WORD *)result + llroundf(fminf(fmaxf(v108, 0.0), 8191.0)));
          __asm
          {
            FCVT            S24, H24
            FCVT            S25, H25
          }
          LOWORD(_S4) = *((_WORD *)result + llroundf(fminf(fmaxf(_S4, 0.0), 8191.0)));
          __asm { FCVT            S26, H4 }
          LOWORD(_S4) = *((_WORD *)result + llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          LOWORD(_S5) = *((_WORD *)result + llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = *((_WORD *)result + llroundf(fminf(fmaxf(v112, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          v119 = (float)((float)((float)(v44 * _S25) + (float)(v43 * _S24)) + (float)(v45 * _S26)) + v38;
          v120 = (float)((float)((float)(v44 * _S5) + (float)(v43 * _S4)) + (float)(v45 * _S6)) + v38;
          if (v119 < v38)
            v121 = v38;
          else
            v121 = (float)((float)((float)(v44 * _S25) + (float)(v43 * _S24)) + (float)(v45 * _S26)) + v38;
          if (v119 <= v40)
            v122 = v121;
          else
            v122 = v40;
          *v70 = llroundf(v122);
          if (v120 < v38)
            v123 = v38;
          else
            v123 = (float)((float)((float)(v44 * _S5) + (float)(v43 * _S4)) + (float)(v45 * _S6)) + v38;
          if (v120 > v40)
            v123 = v40;
          v70[1] = llroundf(v123);
          v124 = _S24 + _S4;
          v125 = _S25 + _S5;
          v126 = _S26 + _S6;
          v127 = (float)((float)(v39 + (float)(v124 * v140)) + (float)(v125 * v139)) + (float)(v126 * v138);
          v128 = v42;
          if (v127 <= v42)
          {
            v128 = (float)((float)(v39 + (float)(v124 * v140)) + (float)(v125 * v139)) + (float)(v126 * v138);
            if (v127 < v41)
              v128 = v41;
          }
          v129 = (float)((float)(v39 + (float)(v124 * v137)) + (float)(v125 * v136)) + (float)(v126 * v47);
          *(_BYTE *)(v61 + v68) = llroundf(v128);
          v130 = v42;
          if (v129 <= v42)
          {
            v130 = v129;
            if (v129 < v41)
              v130 = v41;
          }
          *(_BYTE *)(v61 + v68 + 1) = llroundf(v130);
          v68 += 2;
          v69 += 2;
          v70 += 2;
        }
        while (v11 > v68);
      }
      v66 += v23;
      v65 += v24;
      v62 += v28;
      v61 += v29;
      ++v10;
    }
    while (v10 != v14);
    if (v26 && v31)
    {
      v131 = 0;
      do
      {
        if (v11)
        {
          v132 = v11;
          v133 = v32;
          v134 = (unsigned __int16 *)v27;
          do
          {
            v135 = *v134++;
            *v133++ = llroundf((float)v135 * 0.0038911);
            --v132;
          }
          while (v132);
        }
        v27 += v25;
        v32 += v30;
        ++v131;
      }
      while (v131 != v14);
    }
    else if (v31)
    {
      do
      {
        if (v11)
          result = memset(v32, 255, v11);
        v32 += v30;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_rgb_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v20 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v18 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_rgb_422vf_GCD);
  return 0;
}

_QWORD *vt_Copy_xf422_rgb_422vf_GCD(_QWORD *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  unsigned int v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  size_t v69;
  unsigned __int16 *v70;
  _BYTE *v71;
  unsigned __int16 *v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  uint64_t v97;
  size_t v98;
  _BYTE *v99;
  unsigned __int16 *v100;
  unsigned int v101;

  v10 = *(_QWORD *)((char *)result + 28);
  v11 = *(unsigned __int8 *)result;
  v12 = v10 * a2 / v11;
  v13 = (v10 + v10 * a2) / v11;
  if (v13 != v12)
  {
    v14 = 0;
    v15 = *(_QWORD *)((char *)result + 20);
    v16 = *(_QWORD *)((char *)result + 36);
    v17 = v12 + *(_QWORD *)((char *)result + 44);
    v18 = v13 - v12;
    v19 = result[14];
    v20 = (uint64_t *)result[16];
    v21 = result[13] * a2 / v11 + result[15];
    v22 = result[19];
    v23 = (uint64_t *)result[7];
    v24 = (uint64_t *)result[8];
    v25 = (uint64_t *)result[17];
    v26 = *v24;
    v27 = v24[1];
    v28 = v24[2];
    v29 = v23[2];
    v30 = v29 + v28 * v17 + 2 * v16;
    v31 = *v25;
    v32 = v25[1];
    v33 = v25[2];
    v34 = v20[2];
    v35 = (_BYTE *)(v34 + v33 * v21 + v19);
    LOWORD(a5) = *(_WORD *)(v22 + 140);
    LOWORD(a6) = *(_WORD *)(v22 + 142);
    v36 = (float)*(unsigned int *)(v22 + 136) / (float)*(unsigned int *)(v22 + 128);
    v37 = (float)LODWORD(a5);
    v38 = (float)LODWORD(a6);
    v39 = v36 * *(float *)v22;
    v40 = v36 * *(float *)(v22 + 8);
    v41 = v36 * *(float *)(v22 + 16);
    v42 = v36 * *(float *)(v22 + 20);
    v43 = *(float *)(v22 + 28);
    v44 = v36 * v43;
    LOWORD(v43) = *(_WORD *)(v22 + 144);
    v45 = (float)LODWORD(v43);
    LOWORD(v6) = *(_WORD *)(v22 + 146);
    v46 = (float)v6;
    LOWORD(v7) = *(_WORD *)(v22 + 148);
    v47 = (float)v7;
    LOWORD(v8) = *(_WORD *)(v22 + 150);
    v48 = (float)v8;
    LOWORD(v9) = *(_WORD *)(v22 + 152);
    v49 = (float)v9;
    v50 = *(float *)(v22 + 36);
    v51 = *(float *)(v22 + 40);
    v52 = *(float *)(v22 + 44);
    v53 = *(float *)(v22 + 48) * 0.5;
    v54 = *(float *)(v22 + 52) * 0.5;
    v55 = *(float *)(v22 + 56) * 0.5;
    v56 = *(float *)(v22 + 60) * 0.5;
    v57 = *(float *)(v22 + 64) * 0.5;
    v58 = *(float *)(v22 + 68) * 0.5;
    v59 = *(unsigned __int8 *)(v22 + 124);
    v60 = 16 - v59;
    if (v59 >= 0x11)
      v60 = 0;
    v62 = *v20;
    v61 = v20[1];
    v63 = v61 + v32 * v21 + v19;
    if (!v61)
      v63 = 0;
    result = (_QWORD *)(v62 + v31 * v21 + v19);
    v65 = *v23;
    v64 = v23[1];
    v66 = v64 + v27 * v17 + 2 * v16;
    if (!v64)
      v66 = 0;
    v67 = v65 + v26 * v17 + 2 * v16;
    v68 = v60;
    do
    {
      if (v15)
      {
        v69 = 0;
        v70 = (unsigned __int16 *)v67;
        v71 = result;
        do
        {
          v72 = (unsigned __int16 *)(v66 + 2 * v69);
          v73 = (float)(*v72 >> v68) - v38;
          v74 = (float)(v72[1] >> v68) - v38;
          v75 = v40 * v74;
          v76 = (float)(v42 * v74) + (float)(v73 * v41);
          v77 = v44 * v73;
          v78 = v39 * (float)((float)(*v70 >> v68) - v37);
          v79 = (float)(v40 * v74) + v78;
          v80 = v78 + v76;
          v81 = v77 + v78;
          v82 = (float)((float)((float)(v51 * v80) + (float)(v50 * v79)) + (float)(v52 * v81)) + v45;
          v83 = v47;
          if (v82 <= v47)
          {
            v83 = (float)((float)((float)(v51 * v80) + (float)(v50 * v79)) + (float)(v52 * v81)) + v45;
            if (v82 < v45)
              v83 = v45;
          }
          v84 = v39 * (float)((float)(v70[1] >> v68) - v37);
          v85 = v75 + v84;
          v86 = v76 + v84;
          v87 = v77 + v84;
          v88 = (float)((float)((float)(v51 * v86) + (float)(v50 * v85)) + (float)(v52 * (float)(v77 + v84))) + v45;
          *v71 = llroundf(v83);
          v89 = v47;
          if (v88 <= v47)
          {
            v89 = v88;
            if (v88 < v45)
              v89 = v45;
          }
          v71[1] = llroundf(v89);
          v90 = v79 + v85;
          v91 = v80 + v86;
          v92 = v81 + v87;
          v93 = (float)((float)(v46 + (float)(v90 * v53)) + (float)(v91 * v54)) + (float)(v92 * v55);
          v94 = v49;
          if (v93 <= v49)
          {
            v94 = (float)((float)(v46 + (float)(v90 * v53)) + (float)(v91 * v54)) + (float)(v92 * v55);
            if (v93 < v48)
              v94 = v48;
          }
          v95 = (float)((float)(v46 + (float)(v90 * v56)) + (float)(v91 * v57)) + (float)(v92 * v58);
          *(_BYTE *)(v63 + v69) = llroundf(v94);
          v96 = v49;
          if (v95 <= v49)
          {
            v96 = v95;
            if (v95 < v48)
              v96 = v48;
          }
          *(_BYTE *)(v63 + v69 + 1) = llroundf(v96);
          v69 += 2;
          v70 += 2;
          v71 += 2;
        }
        while (v15 > v69);
      }
      v67 += v26;
      v66 += v27;
      result = (_QWORD *)((char *)result + v31);
      v63 += v32;
      ++v14;
    }
    while (v14 != v18);
    if (v29 && v34)
    {
      v97 = 0;
      do
      {
        if (v15)
        {
          v98 = v15;
          v99 = v35;
          v100 = (unsigned __int16 *)v30;
          do
          {
            v101 = *v100++;
            *v99++ = llroundf((float)v101 * 0.0038911);
            --v98;
          }
          while (v98);
        }
        v30 += v28;
        v35 += v33;
        ++v97;
      }
      while (v97 != v18);
    }
    else if (v34)
    {
      do
      {
        if (v15)
          result = memset(v35, 255, v15);
        v35 += v33;
        --v18;
      }
      while (v18);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Tone_Mat_TRC_2vuyf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Tone_Mat_TRC_2vuyf_GCD);
  return 0;
}

_QWORD *vt_Copy_xf422_TRC_Tone_Mat_TRC_2vuyf_GCD(_QWORD *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  _WORD *v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  float v33;
  float v34;
  unsigned int v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  uint64_t v53;
  unsigned int v54;
  char v55;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  char v64;
  float v65;
  float v66;
  float v67;
  float v68;
  size_t v69;
  unsigned __int16 *v70;
  _WORD *v71;
  _BYTE *v72;
  unsigned __int16 *v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  BOOL v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v105;
  float v106;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v119;
  float v120;
  float v121;
  float v123;
  float v125;
  float v126;
  float v129;
  float v130;
  unsigned int v136;
  float v137;
  float v139;
  float v140;
  float v141;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  char v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  uint64_t v156;
  size_t v157;
  _BYTE *v158;
  unsigned __int16 *v159;
  unsigned int v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;

  v5 = *(_QWORD *)((char *)result + 28);
  v6 = *(unsigned __int8 *)result;
  v7 = v5 * a2 / v6;
  v8 = v5 + v5 * a2;
  v9 = result[14];
  v10 = (_QWORD *)result[16];
  v11 = result[13] * a2 / v6 + result[15];
  v12 = (uint64_t *)result[17];
  v13 = v12[1];
  v14 = v10[1];
  v15 = (_BYTE *)(v14 + v13 * v11 + v9);
  v16 = v8 / v6;
  if (v14)
    v17 = (_WORD *)(v14 + v13 * v11 + v9);
  else
    v17 = 0;
  if (v16 != v7)
  {
    v18 = 0;
    v19 = *(_QWORD *)((char *)result + 20);
    v20 = *(_QWORD *)((char *)result + 36);
    v21 = v7 + *(_QWORD *)((char *)result + 44);
    v22 = v16 - v7;
    v23 = result[19];
    v24 = (_QWORD *)result[7];
    v25 = (uint64_t *)result[8];
    v26 = *v25;
    v27 = v25[1];
    v28 = v25[2];
    v29 = v24[2];
    v30 = v29 + v28 * v21 + 2 * v20;
    v31 = *v12;
    LOWORD(a4) = *(_WORD *)(v23 + 140);
    LOWORD(a5) = *(_WORD *)(v23 + 142);
    v32 = 8191.0 / (float)*(unsigned int *)(v23 + 128);
    v33 = (float)LODWORD(a5);
    v172 = v32 * *(float *)v23;
    v173 = (float)LODWORD(a4);
    v170 = v32 * *(float *)(v23 + 16);
    v171 = v32 * *(float *)(v23 + 8);
    v34 = v32 * *(float *)(v23 + 20);
    *(float *)&v35 = v32 * *(float *)(v23 + 28);
    v168 = *(float *)&v35;
    v169 = v34;
    LOWORD(v35) = *(_WORD *)(v23 + 144);
    v36 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v23 + 146);
    v37 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v23 + 148);
    v38 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v23 + 150);
    v39 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v23 + 152);
    v40 = (float)v35;
    v41 = *(float *)(v23 + 36);
    v42 = *(float *)(v23 + 40);
    v43 = *(float *)(v23 + 44);
    v166 = *(float *)(v23 + 48) * 0.5;
    v167 = v37;
    v164 = *(float *)(v23 + 56) * 0.5;
    v165 = *(float *)(v23 + 52) * 0.5;
    v162 = *(float *)(v23 + 64) * 0.5;
    v163 = *(float *)(v23 + 60) * 0.5;
    v44 = *(float *)(v23 + 72);
    v161 = *(float *)(v23 + 68) * 0.5;
    v46 = *(float *)(v23 + 76);
    v45 = *(float *)(v23 + 80);
    v47 = *(float *)(v23 + 84);
    v48 = *(float *)(v23 + 88);
    v49 = *(float *)(v23 + 92);
    v50 = *(float *)(v23 + 96);
    v51 = *(float *)(v23 + 100);
    v52 = *(float *)(v23 + 104);
    v53 = v23 + 164;
    v54 = *(unsigned __int8 *)(v23 + 124);
    v55 = 16 - v54;
    _CF = v54 >= 0x11;
    v57 = v23 + 16548;
    v58 = *v10 + v31 * v11;
    result = (_QWORD *)(v23 + 32932);
    if (_CF)
      v55 = 0;
    v59 = (_BYTE *)(v58 + v9);
    v60 = v24[1];
    _ZF = v60 == 0;
    v62 = v60 + v27 * v21 + 2 * v20;
    if (_ZF)
      v62 = 0;
    v63 = *v24 + v26 * v21 + 2 * v20;
    v64 = v55;
    v66 = *(float *)(v23 + 108);
    v65 = *(float *)(v23 + 112);
    v67 = *(float *)(v23 + 116);
    v68 = *(float *)(v23 + 120);
    do
    {
      if (v19)
      {
        v69 = 0;
        v70 = (unsigned __int16 *)v63;
        v71 = v17;
        v72 = v59;
        do
        {
          v73 = (unsigned __int16 *)(v62 + 2 * v69);
          v74 = (float)(v73[1] >> v64) - v33;
          v75 = v171 * v74;
          v76 = v172 * (float)((float)(*v70 >> v64) - v173);
          v77 = (float)(v171 * v74) + v76;
          v78 = 8191.0;
          if (v77 <= 8191.0)
          {
            v78 = (float)(v171 * v74) + v76;
            if (v77 < 0.0)
              v78 = 0.0;
          }
          v79 = v33;
          v80 = (float)(*v73 >> v64) - v33;
          v81 = (float)(v169 * v74) + (float)(v80 * v170);
          v82 = 8191.0;
          if ((float)(v76 + v81) <= 8191.0)
          {
            v82 = v76 + v81;
            if ((float)(v76 + v81) < 0.0)
              v82 = 0.0;
          }
          v83 = v168 * v80;
          v84 = (float)(v168 * v80) + v76;
          v85 = 8191.0;
          if (v84 <= 8191.0)
          {
            v85 = v84;
            if (v84 < 0.0)
              v85 = 0.0;
          }
          v86 = v172 * (float)((float)(v70[1] >> v64) - v173);
          v87 = v75 + v86;
          v88 = (float)(v75 + v86) <= 8191.0;
          v89 = 8191.0;
          if (v88)
          {
            v89 = v87;
            if (v87 < 0.0)
              v89 = 0.0;
          }
          v90 = v81 + v86;
          v88 = (float)(v81 + v86) <= 8191.0;
          v91 = 8191.0;
          if (v88)
          {
            v91 = v90;
            if (v90 < 0.0)
              v91 = 0.0;
          }
          v92 = v83 + v86;
          v88 = (float)(v83 + v86) <= 8191.0;
          v93 = 8191.0;
          if (v88)
          {
            v93 = v92;
            if (v92 < 0.0)
              v93 = 0.0;
          }
          _H0 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          __asm { FCVT            S24, H0 }
          _H0 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          __asm { FCVT            S25, H0 }
          _H0 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          __asm { FCVT            S26, H0 }
          _H1 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          v105 = (float)((float)((float)(v65 * _S25) + (float)(v66 * _S24)) + (float)(v67 * _S26))
               + (float)(v68 * fmaxf(_S24, fmaxf(_S25, _S26)));
          v106 = 8191.0;
          if (v105 <= 8191.0)
          {
            v106 = v105;
            if (v105 < 0.0)
              v106 = 0.0;
          }
          __asm
          {
            FCVT            S28, H1
            FCVT            S30, H27
            FCVT            S1, H2
          }
          _H0 = *(_WORD *)(v57 + 2 * llroundf(v106));
          __asm { FCVT            S0, H0 }
          v112 = _S24 * _S0;
          v113 = _S25 * _S0;
          v114 = _S26 * _S0;
          v115 = (float)((float)((float)(v65 * _S30) + (float)(v66 * _S28)) + (float)(v67 * _S1))
               + (float)(v68 * fmaxf(_S28, fmaxf(_S30, _S1)));
          v116 = 8191.0;
          if (v115 <= 8191.0)
          {
            v116 = v115;
            if (v115 < 0.0)
              v116 = 0.0;
          }
          _H0 = *(_WORD *)(v57 + 2 * llroundf(v116));
          __asm { FCVT            S0, H0 }
          v119 = _S28 * _S0;
          v120 = _S30 * _S0;
          v121 = _S1 * _S0;
          _S1 = (float)((float)(v46 * v113) + (float)(v112 * v44)) + (float)(v114 * v45);
          v123 = (float)((float)(v48 * v113) + (float)(v112 * v47)) + (float)(v114 * v49);
          _S24 = (float)((float)(v51 * v113) + (float)(v112 * v50)) + (float)(v114 * v52);
          v125 = (float)(v46 * v120) + (float)(v119 * v44);
          v126 = (float)(v48 * v120) + (float)(v119 * v47);
          _S2 = (float)(v51 * v120) + (float)(v119 * v50);
          _S25 = v125 + (float)(v121 * v45);
          v129 = v126 + (float)(v121 * v49);
          LOWORD(_S1) = *((_WORD *)result + llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          v130 = _S2 + (float)(v121 * v52);
          __asm { FCVT            S1, H1 }
          LOWORD(_S2) = *((_WORD *)result + llroundf(fminf(fmaxf(v123, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          LOWORD(_S24) = *((_WORD *)result + llroundf(fminf(fmaxf(_S24, 0.0), 8191.0)));
          __asm { FCVT            S27, H24 }
          LOWORD(_S24) = *((_WORD *)result + llroundf(fminf(fmaxf(_S25, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          LOWORD(_S25) = *((_WORD *)result + llroundf(fminf(fmaxf(v129, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          v136 = llroundf(fminf(fmaxf(v130, 0.0), 8191.0));
          v137 = (float)(v42 * _S2) + (float)(v41 * _S1);
          _S1 = _S1 + _S24;
          v139 = _S2 + _S25;
          v140 = (float)(v167 + (float)(_S1 * v166)) + (float)(v139 * v165);
          v141 = (float)(v167 + (float)(_S1 * v163)) + (float)(v139 * v162);
          LOWORD(_S1) = *((_WORD *)result + v136);
          __asm { FCVT            S1, H1 }
          v143 = v137 + (float)(v43 * _S27);
          v144 = _S27 + _S1;
          v145 = v140 + (float)(v144 * v164);
          v146 = v141 + (float)(v144 * v161);
          if (v145 < v39)
            v147 = v39;
          else
            v147 = v145;
          v148 = v143 + v36;
          if (v145 <= v40)
            v149 = v147;
          else
            v149 = v40;
          v150 = llroundf(v149);
          if (v148 < v36)
            v151 = v36;
          else
            v151 = v148;
          *v72 = v150;
          if (v148 <= v38)
            v152 = v151;
          else
            v152 = v38;
          v72[1] = llroundf(v152);
          v153 = v40;
          if (v146 <= v40)
          {
            v153 = v146;
            if (v146 < v39)
              v153 = v39;
          }
          v154 = (float)((float)((float)(v42 * _S25) + (float)(v41 * _S24)) + (float)(v43 * _S1)) + v36;
          v72[2] = llroundf(v153);
          v155 = v38;
          if (v154 <= v38)
          {
            v155 = v154;
            if (v154 < v36)
              v155 = v36;
          }
          v72[3] = llroundf(v155);
          v33 = v79;
          if (v71)
            *v71++ = 0;
          v69 += 2;
          v70 += 2;
          v72 += 4;
        }
        while (v19 > v69);
      }
      v63 += v26;
      v62 += v27;
      v59 += v31;
      ++v18;
    }
    while (v18 != v22);
    if (v29 && v17)
    {
      v156 = 0;
      do
      {
        if (v19)
        {
          v157 = v19;
          v158 = v15;
          v159 = (unsigned __int16 *)v30;
          do
          {
            v160 = *v159++;
            *v158++ = llroundf((float)v160 * 0.0038911);
            --v157;
          }
          while (v157);
        }
        v30 += v28;
        v15 += v13;
        ++v156;
      }
      while (v156 != v22);
    }
    else if (v17)
    {
      do
      {
        if (v19)
          result = memset(v15, 255, v19);
        v15 += v13;
        --v22;
      }
      while (v22);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Mat_TRC_2vuyf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Mat_TRC_2vuyf_GCD);
  return 0;
}

_QWORD *vt_Copy_xf422_TRC_Mat_TRC_2vuyf_GCD(_QWORD *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  unint64_t v17;
  _WORD *v18;
  uint64_t v19;
  size_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  float v34;
  float v35;
  float v36;
  unsigned int v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  unsigned int v57;
  char v58;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  size_t v67;
  unsigned __int16 *v68;
  _WORD *v69;
  _BYTE *v70;
  unsigned __int16 *v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  BOOL v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  unsigned int v104;
  float v106;
  float v108;
  float v109;
  float v110;
  float v113;
  float v114;
  unsigned int v120;
  float v121;
  float v123;
  float v124;
  float v125;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  char v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  uint64_t v138;
  size_t v139;
  _BYTE *v140;
  unsigned __int16 *v141;
  unsigned int v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;

  v6 = *(_QWORD *)((char *)result + 28);
  v7 = *(unsigned __int8 *)result;
  v8 = v6 * a2 / v7;
  v9 = v6 + v6 * a2;
  v10 = result[14];
  v11 = (_QWORD *)result[16];
  v12 = result[13] * a2 / v7 + result[15];
  v13 = (uint64_t *)result[17];
  v14 = v13[1];
  v15 = v11[1];
  v16 = (_BYTE *)(v15 + v14 * v12 + v10);
  v17 = v9 / v7;
  if (v15)
    v18 = (_WORD *)(v15 + v14 * v12 + v10);
  else
    v18 = 0;
  if (v17 != v8)
  {
    v19 = 0;
    v20 = *(_QWORD *)((char *)result + 20);
    v21 = *(_QWORD *)((char *)result + 36);
    v22 = v8 + *(_QWORD *)((char *)result + 44);
    v23 = v17 - v8;
    v24 = result[19];
    v25 = (_QWORD *)result[7];
    v26 = (uint64_t *)result[8];
    v27 = *v26;
    v28 = v26[1];
    v29 = v26[2];
    v30 = v25[2];
    v31 = v30 + v29 * v22 + 2 * v21;
    v32 = *v13;
    LOWORD(a5) = *(_WORD *)(v24 + 140);
    LOWORD(a6) = *(_WORD *)(v24 + 142);
    v33 = 8191.0 / (float)*(unsigned int *)(v24 + 128);
    v34 = (float)LODWORD(a5);
    v35 = (float)LODWORD(a6);
    v36 = v33 * *(float *)v24;
    v149 = v33 * *(float *)(v24 + 16);
    v150 = v33 * *(float *)(v24 + 8);
    v147 = v33 * *(float *)(v24 + 28);
    *(float *)&v37 = v147;
    v148 = v33 * *(float *)(v24 + 20);
    LOWORD(v37) = *(_WORD *)(v24 + 144);
    v38 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v24 + 146);
    v39 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v24 + 148);
    v40 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v24 + 150);
    v41 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v24 + 152);
    v42 = (float)v37;
    v43 = *(float *)(v24 + 36);
    v44 = *(float *)(v24 + 40);
    v45 = *(float *)(v24 + 44);
    v145 = *(float *)(v24 + 52) * 0.5;
    v146 = *(float *)(v24 + 48) * 0.5;
    v143 = *(float *)(v24 + 60) * 0.5;
    v144 = *(float *)(v24 + 56) * 0.5;
    v46 = *(float *)(v24 + 64) * 0.5;
    v47 = *(float *)(v24 + 72);
    v48 = *(float *)(v24 + 68) * 0.5;
    v50 = *(float *)(v24 + 76);
    v49 = *(float *)(v24 + 80);
    v51 = *(float *)(v24 + 84);
    v52 = *(float *)(v24 + 88);
    v53 = *(float *)(v24 + 92);
    v54 = *(float *)(v24 + 96);
    v55 = *(float *)(v24 + 100);
    v56 = *(float *)(v24 + 104);
    v57 = *(unsigned __int8 *)(v24 + 124);
    v58 = 16 - v57;
    _CF = v57 >= 0x11;
    v60 = v24 + 16548;
    v61 = v24 + 164;
    if (_CF)
      v62 = 0;
    else
      v62 = v58;
    result = (_QWORD *)(*v11 + v32 * v12 + v10);
    v63 = v25[1];
    if (v63)
      v64 = v63 + v28 * v22 + 2 * v21;
    else
      v64 = 0;
    v65 = *v25 + v27 * v22 + 2 * v21;
    v66 = v62;
    do
    {
      if (v20)
      {
        v67 = 0;
        v68 = (unsigned __int16 *)v65;
        v69 = v18;
        v70 = result;
        do
        {
          v71 = (unsigned __int16 *)(v64 + 2 * v67);
          v72 = (float)(v71[1] >> v66) - v35;
          v73 = v150 * v72;
          v74 = v36 * (float)((float)(*v68 >> v66) - v34);
          v75 = (float)(v150 * v72) + v74;
          v76 = 8191.0;
          if (v75 <= 8191.0)
          {
            v76 = (float)(v150 * v72) + v74;
            if (v75 < 0.0)
              v76 = 0.0;
          }
          v77 = (float)(*v71 >> v66) - v35;
          v78 = (float)(v148 * v72) + (float)(v77 * v149);
          v79 = 8191.0;
          if ((float)(v74 + v78) <= 8191.0)
          {
            v79 = v74 + v78;
            if ((float)(v74 + v78) < 0.0)
              v79 = 0.0;
          }
          v80 = v147 * v77;
          v81 = v80 + v74;
          v82 = (float)(v80 + v74) <= 8191.0;
          v83 = 8191.0;
          if (v82)
          {
            v83 = v81;
            if (v81 < 0.0)
              v83 = 0.0;
          }
          v84 = v36 * (float)((float)(v68[1] >> v66) - v34);
          v85 = v73 + v84;
          v86 = 8191.0;
          if (v85 <= 8191.0)
          {
            v86 = v85;
            if (v85 < 0.0)
              v86 = 0.0;
          }
          v87 = v78 + v84;
          v82 = (float)(v78 + v84) <= 8191.0;
          v88 = 8191.0;
          if (v82)
          {
            v88 = v87;
            if (v87 < 0.0)
              v88 = 0.0;
          }
          v89 = v80 + v84;
          v82 = (float)(v80 + v84) <= 8191.0;
          v90 = 8191.0;
          if (v82)
          {
            v90 = v89;
            if (v89 < 0.0)
              v90 = 0.0;
          }
          _H4 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H5 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H6 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H7 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          _H24 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          v104 = llroundf(fminf(fmaxf(v90, 0.0), 8191.0));
          _S25 = (float)((float)(v50 * _S5) + (float)(_S4 * v47)) + (float)(_S6 * v49);
          v106 = (float)((float)(v52 * _S5) + (float)(_S4 * v51)) + (float)(_S6 * v53);
          _S4 = (float)((float)(v55 * _S5) + (float)(_S4 * v54)) + (float)(_S6 * v56);
          v108 = (float)(v50 * _S24) + (float)(_S7 * v47);
          v109 = (float)(v52 * _S24) + (float)(_S7 * v51);
          v110 = (float)(v55 * _S24) + (float)(_S7 * v54);
          LOWORD(_S24) = *(_WORD *)(v61 + 2 * v104);
          __asm { FCVT            S24, H24 }
          _S5 = v108 + (float)(_S24 * v49);
          v113 = v109 + (float)(_S24 * v53);
          LOWORD(_S25) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S25, 0.0), 8191.0)));
          v114 = v110 + (float)(_S24 * v56);
          __asm { FCVT            S24, H25 }
          LOWORD(_S25) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v106, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          LOWORD(_S4) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S4, 0.0), 8191.0)));
          __asm { FCVT            S26, H4 }
          LOWORD(_S4) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          LOWORD(_S5) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v113, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          v120 = llroundf(fminf(fmaxf(v114, 0.0), 8191.0));
          v121 = (float)(v44 * _S25) + (float)(v43 * _S24);
          _S6 = _S24 + _S4;
          v123 = _S25 + _S5;
          v124 = (float)(v39 + (float)((float)(_S24 + _S4) * v146)) + (float)(v123 * v145);
          v125 = (float)(v39 + (float)(_S6 * v143)) + (float)(v123 * v46);
          LOWORD(_S6) = *(_WORD *)(v60 + 2 * v120);
          __asm { FCVT            S6, H6 }
          v127 = v121 + (float)(v45 * _S26);
          v128 = v124 + (float)((float)(_S26 + _S6) * v144);
          v129 = v125 + (float)((float)(_S26 + _S6) * v48);
          if (v128 < v41)
            v130 = v41;
          else
            v130 = v128;
          v82 = v128 <= v42;
          v131 = v127 + v38;
          if (!v82)
            v130 = v42;
          v132 = llroundf(v130);
          if (v131 < v38)
            v133 = v38;
          else
            v133 = v127 + v38;
          *v70 = v132;
          if (v131 <= v40)
            v134 = v133;
          else
            v134 = v40;
          v70[1] = llroundf(v134);
          v135 = v42;
          if (v129 <= v42)
          {
            v135 = v129;
            if (v129 < v41)
              v135 = v41;
          }
          v136 = (float)((float)((float)(v44 * _S5) + (float)(v43 * _S4)) + (float)(v45 * _S6)) + v38;
          v70[2] = llroundf(v135);
          v137 = v40;
          if (v136 <= v40)
          {
            v137 = v136;
            if (v136 < v38)
              v137 = v38;
          }
          v70[3] = llroundf(v137);
          if (v69)
            *v69++ = 0;
          v67 += 2;
          v68 += 2;
          v70 += 4;
        }
        while (v20 > v67);
      }
      v65 += v27;
      v64 += v28;
      result = (_QWORD *)((char *)result + v32);
      ++v19;
    }
    while (v19 != v23);
    if (v30 && v18)
    {
      v138 = 0;
      do
      {
        if (v20)
        {
          v139 = v20;
          v140 = v16;
          v141 = (unsigned __int16 *)v31;
          do
          {
            v142 = *v141++;
            *v140++ = llroundf((float)v142 * 0.0038911);
            --v139;
          }
          while (v139);
        }
        v31 += v29;
        v16 += v14;
        ++v138;
      }
      while (v138 != v23);
    }
    else if (v18)
    {
      do
      {
        if (v20)
          result = memset(v16, 255, v20);
        v16 += v14;
        --v23;
      }
      while (v23);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_rgb_2vuyf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_rgb_2vuyf_GCD);
  return 0;
}

_QWORD *vt_Copy_xf422_rgb_2vuyf_GCD(_QWORD *result, uint64_t a2, double a3, double a4, double a5, float a6, float a7)
{
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  _WORD *v24;
  uint64_t v25;
  size_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  char v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  char v74;
  _BYTE *v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  size_t v79;
  unsigned __int16 *v80;
  _BYTE *v81;
  _WORD *v82;
  unsigned __int16 *v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  uint64_t v111;
  size_t v112;
  _BYTE *v113;
  unsigned __int16 *v114;
  unsigned int v115;

  v12 = *(_QWORD *)((char *)result + 28);
  v13 = *(unsigned __int8 *)result;
  v14 = v12 * a2 / v13;
  v15 = v12 + v12 * a2;
  v16 = result[14];
  v17 = (_QWORD *)result[16];
  v18 = result[13] * a2 / v13 + result[15];
  v19 = (uint64_t *)result[17];
  v20 = v19[1];
  v21 = v17[1];
  v22 = (_BYTE *)(v21 + v20 * v18 + v16);
  v23 = v15 / v13;
  if (v21)
    v24 = (_WORD *)(v21 + v20 * v18 + v16);
  else
    v24 = 0;
  if (v23 != v14)
  {
    v25 = 0;
    v26 = *(_QWORD *)((char *)result + 20);
    v27 = *(_QWORD *)((char *)result + 36);
    v28 = v14 + *(_QWORD *)((char *)result + 44);
    v29 = v23 - v14;
    v30 = result[19];
    v31 = (_QWORD *)result[7];
    v32 = (uint64_t *)result[8];
    v33 = *v32;
    v34 = v32[1];
    v35 = v32[2];
    v36 = v31[2];
    LOWORD(a6) = *(_WORD *)(v30 + 140);
    LOWORD(a7) = *(_WORD *)(v30 + 142);
    v37 = (float)*(unsigned int *)(v30 + 136) / (float)*(unsigned int *)(v30 + 128);
    v38 = *(float *)v30;
    v39 = *(float *)(v30 + 8);
    v40 = *(float *)(v30 + 16);
    v41 = *(float *)(v30 + 20);
    v42 = *(float *)(v30 + 28);
    LOWORD(v7) = *(_WORD *)(v30 + 144);
    LOWORD(v8) = *(_WORD *)(v30 + 146);
    LOWORD(v9) = *(_WORD *)(v30 + 148);
    LOWORD(v10) = *(_WORD *)(v30 + 150);
    LOWORD(v11) = *(_WORD *)(v30 + 152);
    v43 = *(float *)(v30 + 36);
    v44 = *(float *)(v30 + 40);
    v45 = *(float *)(v30 + 44);
    v46 = *(float *)(v30 + 48);
    v47 = *(float *)(v30 + 52);
    v48 = *(float *)(v30 + 56);
    v49 = *(float *)(v30 + 60);
    v50 = *(float *)(v30 + 64);
    v51 = *(float *)(v30 + 68);
    LODWORD(v30) = *(unsigned __int8 *)(v30 + 124);
    v52 = 16 - v30;
    v53 = v30 >= 0x11;
    v54 = v36 + v35 * v28 + 2 * v27;
    v55 = *v19;
    v56 = (float)LODWORD(a6);
    v57 = (float)LODWORD(a7);
    v58 = v37 * v38;
    v59 = v37 * v39;
    v60 = v37 * v40;
    v61 = v37 * v41;
    v62 = v37 * v42;
    v63 = (float)v7;
    v64 = (float)v8;
    v65 = (float)v9;
    v66 = (float)v10;
    v67 = (float)v11;
    v68 = v46 * 0.5;
    v69 = v47 * 0.5;
    v70 = v48 * 0.5;
    v71 = v49 * 0.5;
    v72 = v50 * 0.5;
    v73 = v51 * 0.5;
    if (v53)
      v74 = 0;
    else
      v74 = v52;
    v75 = (_BYTE *)(*v17 + v55 * v18 + v16);
    v76 = v31[1];
    if (v76)
      v77 = v76 + v34 * v28 + 2 * v27;
    else
      v77 = 0;
    result = (_QWORD *)(*v31 + v33 * v28 + 2 * v27);
    v78 = v74;
    do
    {
      if (v26)
      {
        v79 = 0;
        v80 = (unsigned __int16 *)result;
        v81 = v75;
        v82 = v24;
        do
        {
          v83 = (unsigned __int16 *)(v77 + 2 * v79);
          v84 = (float)(*v83 >> v78) - v57;
          v85 = (float)(v83[1] >> v78) - v57;
          v86 = v59 * v85;
          v87 = (float)(v61 * v85) + (float)(v84 * v60);
          v88 = v62 * v84;
          v89 = v58 * (float)((float)(*v80 >> v78) - v56);
          v90 = v58 * (float)((float)(v80[1] >> v78) - v56);
          v91 = v86 + v89;
          v92 = v89 + v87;
          v93 = v88 + v89;
          v94 = v86 + v90;
          v95 = v87 + v90;
          v96 = v88 + v90;
          v97 = (float)((float)((float)(v44 * v92) + (float)(v43 * v91)) + (float)(v45 * v93)) + v63;
          v98 = (float)((float)((float)(v44 * v95) + (float)(v43 * v94)) + (float)(v45 * v96)) + v63;
          v99 = v91 + v94;
          v100 = v92 + v95;
          v101 = (float)(v64 + (float)(v99 * v68)) + (float)(v100 * v69);
          v102 = v93 + v96;
          v103 = v101 + (float)(v102 * v70);
          v104 = (float)(v64 + (float)(v99 * v71)) + (float)(v100 * v72);
          if (v103 < v66)
            v105 = v66;
          else
            v105 = v101 + (float)(v102 * v70);
          if (v103 > v67)
            v105 = v67;
          v106 = v104 + (float)(v102 * v73);
          *v81 = llroundf(v105);
          if (v97 < v63)
            v107 = v63;
          else
            v107 = v97;
          if (v97 > v65)
            v107 = v65;
          v81[1] = llroundf(v107);
          if (v106 < v66)
            v108 = v66;
          else
            v108 = v106;
          if (v106 <= v67)
            v109 = v108;
          else
            v109 = v67;
          v81[2] = llroundf(v109);
          v110 = v65;
          if (v98 <= v65)
          {
            v110 = v98;
            if (v98 < v63)
              v110 = v63;
          }
          v81[3] = llroundf(v110);
          if (v82)
            *v82++ = 0;
          v79 += 2;
          v80 += 2;
          v81 += 4;
        }
        while (v26 > v79);
      }
      result = (_QWORD *)((char *)result + v33);
      v77 += v34;
      v75 += v55;
      ++v25;
    }
    while (v25 != v29);
    if (v36 && v24)
    {
      v111 = 0;
      do
      {
        if (v26)
        {
          v112 = v26;
          v113 = v22;
          v114 = (unsigned __int16 *)v54;
          do
          {
            v115 = *v114++;
            *v113++ = llroundf((float)v115 * 0.0038911);
            --v112;
          }
          while (v112);
        }
        v54 += v35;
        v22 += v20;
        ++v111;
      }
      while (v111 != v29);
    }
    else if (v24)
    {
      do
      {
        if (v26)
          result = memset(v22, 255, v26);
        v22 += v20;
        --v29;
      }
      while (v29);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Tone_Mat_TRC_yuvsf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Tone_Mat_TRC_yuvsf_GCD);
  return 0;
}

_QWORD *vt_Copy_xf422_TRC_Tone_Mat_TRC_yuvsf_GCD(_QWORD *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  _WORD *v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  float v33;
  float v34;
  unsigned int v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  uint64_t v53;
  unsigned int v54;
  char v55;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  char v64;
  float v65;
  float v66;
  float v67;
  float v68;
  size_t v69;
  unsigned __int16 *v70;
  _WORD *v71;
  _BYTE *v72;
  unsigned __int16 *v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  BOOL v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v105;
  float v106;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v119;
  float v120;
  float v121;
  float v123;
  float v125;
  float v126;
  float v129;
  float v130;
  unsigned int v133;
  unsigned int v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  char v150;
  float v151;
  float v152;
  char v153;
  float v154;
  float v155;
  float v156;
  float v157;
  uint64_t v158;
  size_t v159;
  _BYTE *v160;
  unsigned __int16 *v161;
  unsigned int v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;

  v5 = *(_QWORD *)((char *)result + 28);
  v6 = *(unsigned __int8 *)result;
  v7 = v5 * a2 / v6;
  v8 = v5 + v5 * a2;
  v9 = result[14];
  v10 = (_QWORD *)result[16];
  v11 = result[13] * a2 / v6 + result[15];
  v12 = (uint64_t *)result[17];
  v13 = v12[1];
  v14 = v10[1];
  v15 = (_BYTE *)(v14 + v13 * v11 + v9);
  v16 = v8 / v6;
  if (v14)
    v17 = (_WORD *)(v14 + v13 * v11 + v9);
  else
    v17 = 0;
  if (v16 != v7)
  {
    v18 = 0;
    v19 = *(_QWORD *)((char *)result + 20);
    v20 = *(_QWORD *)((char *)result + 36);
    v21 = v7 + *(_QWORD *)((char *)result + 44);
    v22 = v16 - v7;
    v23 = result[19];
    v24 = (_QWORD *)result[7];
    v25 = (uint64_t *)result[8];
    v26 = *v25;
    v27 = v25[1];
    v28 = v25[2];
    v29 = v24[2];
    v30 = v29 + v28 * v21 + 2 * v20;
    v31 = *v12;
    LOWORD(a4) = *(_WORD *)(v23 + 140);
    LOWORD(a5) = *(_WORD *)(v23 + 142);
    v32 = 8191.0 / (float)*(unsigned int *)(v23 + 128);
    v33 = (float)LODWORD(a5);
    v174 = v32 * *(float *)v23;
    v175 = (float)LODWORD(a4);
    v172 = v32 * *(float *)(v23 + 16);
    v173 = v32 * *(float *)(v23 + 8);
    v34 = v32 * *(float *)(v23 + 20);
    *(float *)&v35 = v32 * *(float *)(v23 + 28);
    v170 = *(float *)&v35;
    v171 = v34;
    LOWORD(v35) = *(_WORD *)(v23 + 144);
    v36 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v23 + 146);
    v37 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v23 + 148);
    v38 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v23 + 150);
    v39 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v23 + 152);
    v40 = (float)v35;
    v41 = *(float *)(v23 + 36);
    v42 = *(float *)(v23 + 40);
    v43 = *(float *)(v23 + 44);
    v168 = *(float *)(v23 + 48) * 0.5;
    v169 = v37;
    v166 = *(float *)(v23 + 56) * 0.5;
    v167 = *(float *)(v23 + 52) * 0.5;
    v164 = *(float *)(v23 + 64) * 0.5;
    v165 = *(float *)(v23 + 60) * 0.5;
    v44 = *(float *)(v23 + 72);
    v163 = *(float *)(v23 + 68) * 0.5;
    v46 = *(float *)(v23 + 76);
    v45 = *(float *)(v23 + 80);
    v47 = *(float *)(v23 + 84);
    v48 = *(float *)(v23 + 88);
    v49 = *(float *)(v23 + 92);
    v50 = *(float *)(v23 + 96);
    v51 = *(float *)(v23 + 100);
    v52 = *(float *)(v23 + 104);
    v53 = v23 + 164;
    v54 = *(unsigned __int8 *)(v23 + 124);
    v55 = 16 - v54;
    _CF = v54 >= 0x11;
    v57 = v23 + 16548;
    v58 = *v10 + v31 * v11;
    result = (_QWORD *)(v23 + 32932);
    if (_CF)
      v55 = 0;
    v59 = (_BYTE *)(v58 + v9);
    v60 = v24[1];
    _ZF = v60 == 0;
    v62 = v60 + v27 * v21 + 2 * v20;
    if (_ZF)
      v62 = 0;
    v63 = *v24 + v26 * v21 + 2 * v20;
    v64 = v55;
    v66 = *(float *)(v23 + 108);
    v65 = *(float *)(v23 + 112);
    v67 = *(float *)(v23 + 116);
    v68 = *(float *)(v23 + 120);
    do
    {
      if (v19)
      {
        v69 = 0;
        v70 = (unsigned __int16 *)v63;
        v71 = v17;
        v72 = v59;
        do
        {
          v73 = (unsigned __int16 *)(v62 + 2 * v69);
          v74 = (float)(v73[1] >> v64) - v33;
          v75 = v173 * v74;
          v76 = v174 * (float)((float)(*v70 >> v64) - v175);
          v77 = (float)(v173 * v74) + v76;
          v78 = 8191.0;
          if (v77 <= 8191.0)
          {
            v78 = (float)(v173 * v74) + v76;
            if (v77 < 0.0)
              v78 = 0.0;
          }
          v79 = v33;
          v80 = (float)(*v73 >> v64) - v33;
          v81 = (float)(v171 * v74) + (float)(v80 * v172);
          v82 = 8191.0;
          if ((float)(v76 + v81) <= 8191.0)
          {
            v82 = v76 + v81;
            if ((float)(v76 + v81) < 0.0)
              v82 = 0.0;
          }
          v83 = v170 * v80;
          v84 = (float)(v170 * v80) + v76;
          v85 = 8191.0;
          if (v84 <= 8191.0)
          {
            v85 = v84;
            if (v84 < 0.0)
              v85 = 0.0;
          }
          v86 = v174 * (float)((float)(v70[1] >> v64) - v175);
          v87 = v75 + v86;
          v88 = (float)(v75 + v86) <= 8191.0;
          v89 = 8191.0;
          if (v88)
          {
            v89 = v87;
            if (v87 < 0.0)
              v89 = 0.0;
          }
          v90 = v81 + v86;
          v88 = (float)(v81 + v86) <= 8191.0;
          v91 = 8191.0;
          if (v88)
          {
            v91 = v90;
            if (v90 < 0.0)
              v91 = 0.0;
          }
          v92 = v83 + v86;
          v88 = (float)(v83 + v86) <= 8191.0;
          v93 = 8191.0;
          if (v88)
          {
            v93 = v92;
            if (v92 < 0.0)
              v93 = 0.0;
          }
          _H0 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          __asm { FCVT            S24, H0 }
          _H0 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          __asm { FCVT            S25, H0 }
          _H0 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          __asm { FCVT            S26, H0 }
          _H1 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          v105 = (float)((float)((float)(v65 * _S25) + (float)(v66 * _S24)) + (float)(v67 * _S26))
               + (float)(v68 * fmaxf(_S24, fmaxf(_S25, _S26)));
          v106 = 8191.0;
          if (v105 <= 8191.0)
          {
            v106 = v105;
            if (v105 < 0.0)
              v106 = 0.0;
          }
          __asm
          {
            FCVT            S28, H1
            FCVT            S30, H27
            FCVT            S1, H2
          }
          _H0 = *(_WORD *)(v57 + 2 * llroundf(v106));
          __asm { FCVT            S0, H0 }
          v112 = _S24 * _S0;
          v113 = _S25 * _S0;
          v114 = _S26 * _S0;
          v115 = (float)((float)((float)(v65 * _S30) + (float)(v66 * _S28)) + (float)(v67 * _S1))
               + (float)(v68 * fmaxf(_S28, fmaxf(_S30, _S1)));
          v116 = 8191.0;
          if (v115 <= 8191.0)
          {
            v116 = v115;
            if (v115 < 0.0)
              v116 = 0.0;
          }
          _H0 = *(_WORD *)(v57 + 2 * llroundf(v116));
          __asm { FCVT            S0, H0 }
          v119 = _S28 * _S0;
          v120 = _S30 * _S0;
          v121 = _S1 * _S0;
          _S1 = (float)((float)(v46 * v113) + (float)(v112 * v44)) + (float)(v114 * v45);
          v123 = (float)((float)(v48 * v113) + (float)(v112 * v47)) + (float)(v114 * v49);
          _S24 = (float)((float)(v51 * v113) + (float)(v112 * v50)) + (float)(v114 * v52);
          v125 = (float)(v46 * v120) + (float)(v119 * v44);
          v126 = (float)(v48 * v120) + (float)(v119 * v47);
          _S2 = (float)(v51 * v120) + (float)(v119 * v50);
          _S25 = v125 + (float)(v121 * v45);
          v129 = v126 + (float)(v121 * v49);
          v130 = _S2 + (float)(v121 * v52);
          LOWORD(_S1) = *((_WORD *)result + llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          LOWORD(_S2) = *((_WORD *)result + llroundf(fminf(fmaxf(v123, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          v133 = llroundf(fminf(fmaxf(_S24, 0.0), 8191.0));
          LOWORD(_S24) = *((_WORD *)result + llroundf(fminf(fmaxf(_S25, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          LOWORD(_S25) = *((_WORD *)result + llroundf(fminf(fmaxf(v129, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          v136 = llroundf(fminf(fmaxf(v130, 0.0), 8191.0));
          v137 = (float)(v42 * _S2) + (float)(v41 * _S1);
          v138 = (float)(v42 * _S25) + (float)(v41 * _S24);
          v139 = _S1 + _S24;
          LOWORD(_S24) = *((_WORD *)result + v133);
          v140 = _S2 + _S25;
          LOWORD(_S25) = *((_WORD *)result + v136);
          __asm
          {
            FCVT            S24, H24
            FCVT            S25, H25
          }
          v143 = (float)(v137 + (float)(v43 * _S24)) + v36;
          v144 = v138 + (float)(v43 * _S25);
          v145 = _S24 + _S25;
          v146 = (float)(v169 + (float)(v139 * v168)) + (float)(v140 * v167);
          v147 = (float)(v169 + (float)(v139 * v165)) + (float)(v140 * v164);
          if (v143 < v36)
            v148 = v36;
          else
            v148 = v143;
          v88 = v143 <= v38;
          v149 = v146 + (float)(v145 * v166);
          if (!v88)
            v148 = v38;
          v150 = llroundf(v148);
          if (v149 < v39)
            v151 = v39;
          else
            v151 = v146 + (float)(v145 * v166);
          if (v149 <= v40)
            v152 = v151;
          else
            v152 = v40;
          v153 = llroundf(v152);
          v154 = v147 + (float)(v145 * v163);
          if ((float)(v144 + v36) < v36)
            v155 = v36;
          else
            v155 = v144 + v36;
          *v72 = v150;
          v72[1] = v153;
          if ((float)(v144 + v36) <= v38)
            v156 = v155;
          else
            v156 = v38;
          v72[2] = llroundf(v156);
          v157 = v40;
          if (v154 <= v40)
          {
            v157 = v154;
            if (v154 < v39)
              v157 = v39;
          }
          v72[3] = llroundf(v157);
          v33 = v79;
          if (v71)
            *v71++ = 0;
          v69 += 2;
          v70 += 2;
          v72 += 4;
        }
        while (v19 > v69);
      }
      v63 += v26;
      v62 += v27;
      v59 += v31;
      ++v18;
    }
    while (v18 != v22);
    if (v29 && v17)
    {
      v158 = 0;
      do
      {
        if (v19)
        {
          v159 = v19;
          v160 = v15;
          v161 = (unsigned __int16 *)v30;
          do
          {
            v162 = *v161++;
            *v160++ = llroundf((float)v162 * 0.0038911);
            --v159;
          }
          while (v159);
        }
        v30 += v28;
        v15 += v13;
        ++v158;
      }
      while (v158 != v22);
    }
    else if (v17)
    {
      do
      {
        if (v19)
          result = memset(v15, 255, v19);
        v15 += v13;
        --v22;
      }
      while (v22);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Mat_TRC_yuvsf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Mat_TRC_yuvsf_GCD);
  return 0;
}

_QWORD *vt_Copy_xf422_TRC_Mat_TRC_yuvsf_GCD(_QWORD *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  unint64_t v17;
  _WORD *v18;
  uint64_t v19;
  size_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  float v34;
  float v35;
  float v36;
  unsigned int v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  unsigned int v57;
  char v58;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  size_t v67;
  unsigned __int16 *v68;
  _WORD *v69;
  _BYTE *v70;
  unsigned __int16 *v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  BOOL v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  unsigned int v104;
  float v106;
  float v108;
  float v109;
  float v110;
  float v113;
  float v114;
  unsigned int v117;
  unsigned int v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  char v134;
  float v135;
  char v136;
  float v137;
  float v138;
  float v139;
  float v140;
  uint64_t v141;
  size_t v142;
  _BYTE *v143;
  unsigned __int16 *v144;
  unsigned int v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;

  v6 = *(_QWORD *)((char *)result + 28);
  v7 = *(unsigned __int8 *)result;
  v8 = v6 * a2 / v7;
  v9 = v6 + v6 * a2;
  v10 = result[14];
  v11 = (_QWORD *)result[16];
  v12 = result[13] * a2 / v7 + result[15];
  v13 = (uint64_t *)result[17];
  v14 = v13[1];
  v15 = v11[1];
  v16 = (_BYTE *)(v15 + v14 * v12 + v10);
  v17 = v9 / v7;
  if (v15)
    v18 = (_WORD *)(v15 + v14 * v12 + v10);
  else
    v18 = 0;
  if (v17 != v8)
  {
    v19 = 0;
    v20 = *(_QWORD *)((char *)result + 20);
    v21 = *(_QWORD *)((char *)result + 36);
    v22 = v8 + *(_QWORD *)((char *)result + 44);
    v23 = v17 - v8;
    v24 = result[19];
    v25 = (_QWORD *)result[7];
    v26 = (uint64_t *)result[8];
    v27 = *v26;
    v28 = v26[1];
    v29 = v26[2];
    v30 = v25[2];
    v31 = v30 + v29 * v22 + 2 * v21;
    v32 = *v13;
    LOWORD(a5) = *(_WORD *)(v24 + 140);
    LOWORD(a6) = *(_WORD *)(v24 + 142);
    v33 = 8191.0 / (float)*(unsigned int *)(v24 + 128);
    v34 = (float)LODWORD(a5);
    v35 = (float)LODWORD(a6);
    v36 = v33 * *(float *)v24;
    v152 = v33 * *(float *)(v24 + 16);
    v153 = v33 * *(float *)(v24 + 8);
    v150 = v33 * *(float *)(v24 + 28);
    *(float *)&v37 = v150;
    v151 = v33 * *(float *)(v24 + 20);
    LOWORD(v37) = *(_WORD *)(v24 + 144);
    v38 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v24 + 146);
    v39 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v24 + 148);
    v40 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v24 + 150);
    v41 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v24 + 152);
    v42 = (float)v37;
    v43 = *(float *)(v24 + 36);
    v44 = *(float *)(v24 + 40);
    v45 = *(float *)(v24 + 44);
    v148 = *(float *)(v24 + 52) * 0.5;
    v149 = *(float *)(v24 + 48) * 0.5;
    v146 = *(float *)(v24 + 60) * 0.5;
    v147 = *(float *)(v24 + 56) * 0.5;
    v46 = *(float *)(v24 + 64) * 0.5;
    v47 = *(float *)(v24 + 72);
    v48 = *(float *)(v24 + 68) * 0.5;
    v50 = *(float *)(v24 + 76);
    v49 = *(float *)(v24 + 80);
    v51 = *(float *)(v24 + 84);
    v52 = *(float *)(v24 + 88);
    v53 = *(float *)(v24 + 92);
    v54 = *(float *)(v24 + 96);
    v55 = *(float *)(v24 + 100);
    v56 = *(float *)(v24 + 104);
    v57 = *(unsigned __int8 *)(v24 + 124);
    v58 = 16 - v57;
    _CF = v57 >= 0x11;
    v60 = v24 + 16548;
    v61 = v24 + 164;
    if (_CF)
      v62 = 0;
    else
      v62 = v58;
    result = (_QWORD *)(*v11 + v32 * v12 + v10);
    v63 = v25[1];
    if (v63)
      v64 = v63 + v28 * v22 + 2 * v21;
    else
      v64 = 0;
    v65 = *v25 + v27 * v22 + 2 * v21;
    v66 = v62;
    do
    {
      if (v20)
      {
        v67 = 0;
        v68 = (unsigned __int16 *)v65;
        v69 = v18;
        v70 = result;
        do
        {
          v71 = (unsigned __int16 *)(v64 + 2 * v67);
          v72 = (float)(v71[1] >> v66) - v35;
          v73 = v153 * v72;
          v74 = v36 * (float)((float)(*v68 >> v66) - v34);
          v75 = (float)(v153 * v72) + v74;
          v76 = 8191.0;
          if (v75 <= 8191.0)
          {
            v76 = (float)(v153 * v72) + v74;
            if (v75 < 0.0)
              v76 = 0.0;
          }
          v77 = (float)(*v71 >> v66) - v35;
          v78 = (float)(v151 * v72) + (float)(v77 * v152);
          v79 = 8191.0;
          if ((float)(v74 + v78) <= 8191.0)
          {
            v79 = v74 + v78;
            if ((float)(v74 + v78) < 0.0)
              v79 = 0.0;
          }
          v80 = v150 * v77;
          v81 = v80 + v74;
          v82 = (float)(v80 + v74) <= 8191.0;
          v83 = 8191.0;
          if (v82)
          {
            v83 = v81;
            if (v81 < 0.0)
              v83 = 0.0;
          }
          v84 = v36 * (float)((float)(v68[1] >> v66) - v34);
          v85 = v73 + v84;
          v86 = 8191.0;
          if (v85 <= 8191.0)
          {
            v86 = v85;
            if (v85 < 0.0)
              v86 = 0.0;
          }
          v87 = v78 + v84;
          v82 = (float)(v78 + v84) <= 8191.0;
          v88 = 8191.0;
          if (v82)
          {
            v88 = v87;
            if (v87 < 0.0)
              v88 = 0.0;
          }
          v89 = v80 + v84;
          v82 = (float)(v80 + v84) <= 8191.0;
          v90 = 8191.0;
          if (v82)
          {
            v90 = v89;
            if (v89 < 0.0)
              v90 = 0.0;
          }
          _H4 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H5 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H6 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H7 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          _H24 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          v104 = llroundf(fminf(fmaxf(v90, 0.0), 8191.0));
          _S25 = (float)((float)(v50 * _S5) + (float)(_S4 * v47)) + (float)(_S6 * v49);
          v106 = (float)((float)(v52 * _S5) + (float)(_S4 * v51)) + (float)(_S6 * v53);
          _S4 = (float)((float)(v55 * _S5) + (float)(_S4 * v54)) + (float)(_S6 * v56);
          v108 = (float)(v50 * _S24) + (float)(_S7 * v47);
          v109 = (float)(v52 * _S24) + (float)(_S7 * v51);
          v110 = (float)(v55 * _S24) + (float)(_S7 * v54);
          LOWORD(_S24) = *(_WORD *)(v61 + 2 * v104);
          __asm { FCVT            S24, H24 }
          _S5 = v108 + (float)(_S24 * v49);
          v113 = v109 + (float)(_S24 * v53);
          v114 = v110 + (float)(_S24 * v56);
          LOWORD(_S24) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S25, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          LOWORD(_S25) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v106, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          v117 = llroundf(fminf(fmaxf(_S4, 0.0), 8191.0));
          LOWORD(_S4) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          LOWORD(_S5) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v113, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          v120 = llroundf(fminf(fmaxf(v114, 0.0), 8191.0));
          v121 = (float)(v44 * _S25) + (float)(v43 * _S24);
          v122 = (float)(v44 * _S5) + (float)(v43 * _S4);
          v123 = _S24 + _S4;
          LOWORD(_S24) = *(_WORD *)(v60 + 2 * v117);
          v124 = _S25 + _S5;
          LOWORD(_S25) = *(_WORD *)(v60 + 2 * v120);
          __asm
          {
            FCVT            S24, H24
            FCVT            S25, H25
          }
          v127 = (float)(v121 + (float)(v45 * _S24)) + v38;
          v128 = v122 + (float)(v45 * _S25);
          v129 = _S24 + _S25;
          v130 = (float)(v39 + (float)(v123 * v149)) + (float)(v124 * v148);
          v131 = (float)(v39 + (float)(v123 * v146)) + (float)(v124 * v46);
          if (v127 < v38)
            v132 = v38;
          else
            v132 = v127;
          v82 = v127 <= v40;
          v133 = v130 + (float)(v129 * v147);
          if (!v82)
            v132 = v40;
          v134 = llroundf(v132);
          if (v133 < v41)
            v135 = v41;
          else
            v135 = v130 + (float)(v129 * v147);
          if (v133 > v42)
            v135 = v42;
          v136 = llroundf(v135);
          v137 = v131 + (float)(v129 * v48);
          if ((float)(v128 + v38) < v38)
            v138 = v38;
          else
            v138 = v128 + v38;
          *v70 = v134;
          v70[1] = v136;
          if ((float)(v128 + v38) <= v40)
            v139 = v138;
          else
            v139 = v40;
          v70[2] = llroundf(v139);
          v140 = v42;
          if (v137 <= v42)
          {
            v140 = v137;
            if (v137 < v41)
              v140 = v41;
          }
          v70[3] = llroundf(v140);
          if (v69)
            *v69++ = 0;
          v67 += 2;
          v68 += 2;
          v70 += 4;
        }
        while (v20 > v67);
      }
      v65 += v27;
      v64 += v28;
      result = (_QWORD *)((char *)result + v32);
      ++v19;
    }
    while (v19 != v23);
    if (v30 && v18)
    {
      v141 = 0;
      do
      {
        if (v20)
        {
          v142 = v20;
          v143 = v16;
          v144 = (unsigned __int16 *)v31;
          do
          {
            v145 = *v144++;
            *v143++ = llroundf((float)v145 * 0.0038911);
            --v142;
          }
          while (v142);
        }
        v31 += v29;
        v16 += v14;
        ++v141;
      }
      while (v141 != v23);
    }
    else if (v18)
    {
      do
      {
        if (v20)
          result = memset(v16, 255, v20);
        v16 += v14;
        --v23;
      }
      while (v23);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_rgb_yuvsf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_rgb_yuvsf_GCD);
  return 0;
}

_QWORD *vt_Copy_xf422_rgb_yuvsf_GCD(_QWORD *result, uint64_t a2, double a3, double a4, double a5, float a6, float a7)
{
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  _WORD *v24;
  uint64_t v25;
  size_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  char v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  char v74;
  _BYTE *v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  size_t v79;
  unsigned __int16 *v80;
  _BYTE *v81;
  _WORD *v82;
  unsigned __int16 *v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  uint64_t v110;
  size_t v111;
  _BYTE *v112;
  unsigned __int16 *v113;
  unsigned int v114;

  v12 = *(_QWORD *)((char *)result + 28);
  v13 = *(unsigned __int8 *)result;
  v14 = v12 * a2 / v13;
  v15 = v12 + v12 * a2;
  v16 = result[14];
  v17 = (_QWORD *)result[16];
  v18 = result[13] * a2 / v13 + result[15];
  v19 = (uint64_t *)result[17];
  v20 = v19[1];
  v21 = v17[1];
  v22 = (_BYTE *)(v21 + v20 * v18 + v16);
  v23 = v15 / v13;
  if (v21)
    v24 = (_WORD *)(v21 + v20 * v18 + v16);
  else
    v24 = 0;
  if (v23 != v14)
  {
    v25 = 0;
    v26 = *(_QWORD *)((char *)result + 20);
    v27 = *(_QWORD *)((char *)result + 36);
    v28 = v14 + *(_QWORD *)((char *)result + 44);
    v29 = v23 - v14;
    v30 = result[19];
    v31 = (_QWORD *)result[7];
    v32 = (uint64_t *)result[8];
    v33 = *v32;
    v34 = v32[1];
    v35 = v32[2];
    v36 = v31[2];
    LOWORD(a6) = *(_WORD *)(v30 + 140);
    LOWORD(a7) = *(_WORD *)(v30 + 142);
    v37 = (float)*(unsigned int *)(v30 + 136) / (float)*(unsigned int *)(v30 + 128);
    v38 = *(float *)v30;
    v39 = *(float *)(v30 + 8);
    v40 = *(float *)(v30 + 16);
    v41 = *(float *)(v30 + 20);
    v42 = *(float *)(v30 + 28);
    LOWORD(v7) = *(_WORD *)(v30 + 144);
    LOWORD(v8) = *(_WORD *)(v30 + 146);
    LOWORD(v9) = *(_WORD *)(v30 + 148);
    LOWORD(v10) = *(_WORD *)(v30 + 150);
    LOWORD(v11) = *(_WORD *)(v30 + 152);
    v43 = *(float *)(v30 + 36);
    v44 = *(float *)(v30 + 40);
    v45 = *(float *)(v30 + 44);
    v46 = *(float *)(v30 + 48);
    v47 = *(float *)(v30 + 52);
    v48 = *(float *)(v30 + 56);
    v49 = *(float *)(v30 + 60);
    v50 = *(float *)(v30 + 64);
    v51 = *(float *)(v30 + 68);
    LODWORD(v30) = *(unsigned __int8 *)(v30 + 124);
    v52 = 16 - v30;
    v53 = v30 >= 0x11;
    v54 = v36 + v35 * v28 + 2 * v27;
    v55 = *v19;
    v56 = (float)LODWORD(a6);
    v57 = (float)LODWORD(a7);
    v58 = v37 * v38;
    v59 = v37 * v39;
    v60 = v37 * v40;
    v61 = v37 * v41;
    v62 = v37 * v42;
    v63 = (float)v7;
    v64 = (float)v8;
    v65 = (float)v9;
    v66 = (float)v10;
    v67 = (float)v11;
    v68 = v46 * 0.5;
    v69 = v47 * 0.5;
    v70 = v48 * 0.5;
    v71 = v49 * 0.5;
    v72 = v50 * 0.5;
    v73 = v51 * 0.5;
    if (v53)
      v74 = 0;
    else
      v74 = v52;
    v75 = (_BYTE *)(*v17 + v55 * v18 + v16);
    v76 = v31[1];
    if (v76)
      v77 = v76 + v34 * v28 + 2 * v27;
    else
      v77 = 0;
    result = (_QWORD *)(*v31 + v33 * v28 + 2 * v27);
    v78 = v74;
    do
    {
      if (v26)
      {
        v79 = 0;
        v80 = (unsigned __int16 *)result;
        v81 = v75;
        v82 = v24;
        do
        {
          v83 = (unsigned __int16 *)(v77 + 2 * v79);
          v84 = (float)(*v83 >> v78) - v57;
          v85 = (float)(v83[1] >> v78) - v57;
          v86 = v59 * v85;
          v87 = (float)(v61 * v85) + (float)(v84 * v60);
          v88 = v62 * v84;
          v89 = v58 * (float)((float)(*v80 >> v78) - v56);
          v90 = v58 * (float)((float)(v80[1] >> v78) - v56);
          v91 = v86 + v89;
          v92 = v89 + v87;
          v93 = v88 + v89;
          v94 = v86 + v90;
          v95 = v87 + v90;
          v96 = v88 + v90;
          v97 = (float)((float)((float)(v44 * v92) + (float)(v43 * v91)) + (float)(v45 * (float)(v88 + v89))) + v63;
          v98 = (float)((float)((float)(v44 * v95) + (float)(v43 * v94)) + (float)(v45 * v96)) + v63;
          v99 = v91 + v94;
          v100 = v92 + v95;
          v101 = (float)(v64 + (float)((float)(v91 + v94) * v68)) + (float)(v100 * v69);
          v102 = v93 + v96;
          v103 = v101 + (float)((float)(v93 + v96) * v70);
          if (v97 < v63)
            v104 = v63;
          else
            v104 = v97;
          if (v97 > v65)
            v104 = v65;
          *v81 = llroundf(v104);
          if (v103 < v66)
            v105 = v66;
          else
            v105 = v103;
          if (v103 <= v67)
            v106 = v105;
          else
            v106 = v67;
          v81[1] = llroundf(v106);
          v107 = v65;
          if (v98 <= v65)
          {
            v107 = v98;
            if (v98 < v63)
              v107 = v63;
          }
          v108 = (float)((float)(v64 + (float)(v99 * v71)) + (float)(v100 * v72)) + (float)(v102 * v73);
          v81[2] = llroundf(v107);
          v109 = v67;
          if (v108 <= v67)
          {
            v109 = v108;
            if (v108 < v66)
              v109 = v66;
          }
          v81[3] = llroundf(v109);
          if (v82)
            *v82++ = 0;
          v79 += 2;
          v80 += 2;
          v81 += 4;
        }
        while (v26 > v79);
      }
      result = (_QWORD *)((char *)result + v33);
      v77 += v34;
      v75 += v55;
      ++v25;
    }
    while (v25 != v29);
    if (v36 && v24)
    {
      v110 = 0;
      do
      {
        if (v26)
        {
          v111 = v26;
          v112 = v22;
          v113 = (unsigned __int16 *)v54;
          do
          {
            v114 = *v113++;
            *v112++ = llroundf((float)v114 * 0.0038911);
            --v111;
          }
          while (v111);
        }
        v54 += v35;
        v22 += v20;
        ++v110;
      }
      while (v110 != v29);
    }
    else if (v24)
    {
      do
      {
        if (v26)
          result = memset(v22, 255, v26);
        v22 += v20;
        --v29;
      }
      while (v29);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Tone_Mat_TRC_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v20 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v18 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Tone_Mat_TRC_xf422_GCD);
  return 0;
}

_QWORD *vt_Copy_xf422_TRC_Tone_Mat_TRC_xf422_GCD(_QWORD *result, uint64_t a2, double a3, float a4, double a5, float a6)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  float v33;
  float v34;
  float v35;
  unsigned int v36;
  float v37;
  float v38;
  float v39;
  unsigned int v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  char v57;
  unsigned int v58;
  char v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _WORD *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  char v72;
  float v73;
  float v74;
  float v75;
  float v76;
  unint64_t v77;
  unsigned __int16 *v78;
  _WORD *v79;
  unsigned __int16 *v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  BOOL v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v113;
  float v114;
  float v119;
  float v120;
  float v122;
  float v124;
  float v128;
  float v129;
  float v130;
  float v131;
  float v133;
  float v134;
  float v135;
  float v142;
  float v143;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  _WORD *v154;
  float v155;
  float v156;
  size_t v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;

  v6 = *(_QWORD *)((char *)result + 28);
  v7 = *(unsigned __int8 *)result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)((char *)result + 20);
    v12 = *(_QWORD *)((char *)result + 36);
    v13 = v8 + *(_QWORD *)((char *)result + 44);
    v14 = v9 - v8;
    v15 = result[14];
    v16 = result[13] * a2 / v7;
    v17 = (_QWORD *)result[16];
    v18 = v16 + result[15];
    v19 = result[19];
    v20 = (_QWORD *)result[7];
    v21 = (uint64_t *)result[8];
    v22 = (uint64_t *)result[17];
    v23 = *v21;
    v24 = v21[1];
    v25 = v21[2];
    v26 = v20[2];
    v27 = (char *)(v26 + v25 * v13 + 2 * v12);
    v28 = *v22;
    v29 = v22[1];
    v30 = v22[2];
    v31 = v17[2];
    v32 = (char *)(v31 + v30 * v18 + 2 * v15);
    LOWORD(a4) = *(_WORD *)(v19 + 140);
    LOWORD(a6) = *(_WORD *)(v19 + 142);
    v33 = 8191.0 / (float)*(unsigned int *)(v19 + 128);
    v34 = (float)LODWORD(a6);
    v169 = v33 * *(float *)v19;
    v170 = (float)LODWORD(a4);
    v166 = v33 * *(float *)(v19 + 16);
    v167 = v33 * *(float *)(v19 + 8);
    v35 = v33 * *(float *)(v19 + 20);
    *(float *)&v36 = v33 * *(float *)(v19 + 28);
    v164 = *(float *)&v36;
    v165 = v35;
    LOWORD(v36) = *(_WORD *)(v19 + 144);
    v37 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v19 + 146);
    v38 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v19 + 148);
    v39 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v19 + 150);
    *(float *)&v40 = (float)v36;
    v168 = *(float *)&v40;
    LOWORD(v40) = *(_WORD *)(v19 + 152);
    v41 = (float)v40;
    v42 = *(float *)(v19 + 36);
    v43 = *(float *)(v19 + 40);
    v44 = *(float *)(v19 + 44);
    v162 = *(float *)(v19 + 52) * 0.5;
    v163 = *(float *)(v19 + 48) * 0.5;
    v160 = *(float *)(v19 + 60) * 0.5;
    v161 = *(float *)(v19 + 56) * 0.5;
    v45 = *(float *)(v19 + 72);
    v158 = *(float *)(v19 + 68) * 0.5;
    v159 = *(float *)(v19 + 64) * 0.5;
    v47 = *(float *)(v19 + 76);
    v46 = *(float *)(v19 + 80);
    v48 = *(float *)(v19 + 84);
    v49 = *(float *)(v19 + 88);
    v50 = *(float *)(v19 + 92);
    v51 = *(float *)(v19 + 96);
    v52 = *(float *)(v19 + 100);
    v53 = *(float *)(v19 + 104);
    v54 = v19 + 164;
    v55 = v19 + 16548;
    v56 = *(unsigned __int8 *)(v19 + 132);
    v57 = 16 - v56;
    if (v56 >= 0x11)
      v57 = 0;
    v58 = *(unsigned __int8 *)(v19 + 124);
    v59 = 16 - v58;
    if (v58 >= 0x11)
      v59 = 0;
    v60 = v17[1];
    _ZF = v60 == 0;
    v62 = v60 + v29 * v18;
    v63 = *v17 + v28 * v18;
    v64 = v19 + 32932;
    result = (_QWORD *)(v62 + 2 * v15);
    if (_ZF)
      result = 0;
    v65 = (_WORD *)(v63 + 2 * v15);
    v68 = v20;
    v67 = *v20;
    v66 = v68[1];
    _ZF = v66 == 0;
    v69 = v66 + v24 * v13 + 2 * v12;
    if (_ZF)
      v69 = 0;
    v70 = v67 + v23 * v13 + 2 * v12;
    v71 = v59;
    v72 = v57;
    v74 = *(float *)(v19 + 108);
    v73 = *(float *)(v19 + 112);
    v75 = *(float *)(v19 + 116);
    v76 = *(float *)(v19 + 120);
    do
    {
      if (v11)
      {
        v77 = 0;
        v78 = (unsigned __int16 *)v70;
        v79 = v65;
        do
        {
          v80 = (unsigned __int16 *)(v69 + 2 * v77);
          v81 = (float)(v80[1] >> v71) - v34;
          v82 = v167 * v81;
          v83 = v169 * (float)((float)(*v78 >> v71) - v170);
          v84 = (float)(v167 * v81) + v83;
          v85 = 8191.0;
          if (v84 <= 8191.0)
          {
            v85 = (float)(v167 * v81) + v83;
            if (v84 < 0.0)
              v85 = 0.0;
          }
          v86 = v34;
          v87 = (float)(*v80 >> v71) - v34;
          v88 = (float)(v165 * v81) + (float)(v87 * v166);
          v89 = 8191.0;
          if ((float)(v83 + v88) <= 8191.0)
          {
            v89 = v83 + v88;
            if ((float)(v83 + v88) < 0.0)
              v89 = 0.0;
          }
          v90 = v164 * v87;
          v91 = v90 + v83;
          v92 = (float)(v90 + v83) <= 8191.0;
          v93 = 8191.0;
          if (v92)
          {
            v93 = v91;
            if (v91 < 0.0)
              v93 = 0.0;
          }
          v94 = v169 * (float)((float)(v78[1] >> v71) - v170);
          v95 = v82 + v94;
          v96 = 8191.0;
          if (v95 <= 8191.0)
          {
            v96 = v95;
            if (v95 < 0.0)
              v96 = 0.0;
          }
          v97 = v88 + v94;
          v92 = (float)(v88 + v94) <= 8191.0;
          v98 = 8191.0;
          if (v92)
          {
            v98 = v97;
            if (v97 < 0.0)
              v98 = 0.0;
          }
          v99 = v90 + v94;
          v92 = (float)(v90 + v94) <= 8191.0;
          v100 = 8191.0;
          if (v92)
          {
            v100 = v99;
            if (v99 < 0.0)
              v100 = 0.0;
          }
          _H0 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          __asm { FCVT            S24, H0 }
          _H0 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          __asm { FCVT            S25, H0 }
          _H0 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          __asm { FCVT            S26, H0 }
          _H19 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v96, 0.0), 8191.0)));
          _H28 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v100, 0.0), 8191.0)));
          v113 = (float)((float)((float)(v73 * _S25) + (float)(v74 * _S24)) + (float)(v75 * _S26))
               + (float)(v76 * fmaxf(_S24, fmaxf(_S25, _S26)));
          v114 = 8191.0;
          if (v113 <= 8191.0)
          {
            v114 = v113;
            if (v113 < 0.0)
              v114 = 0.0;
          }
          __asm
          {
            FCVT            S27, H19
            FCVT            S28, H28
            FCVT            S30, H30
          }
          _H19 = *(_WORD *)(v55 + 2 * llroundf(v114));
          v119 = (float)((float)((float)(v73 * _S28) + (float)(v74 * _S27)) + (float)(v75 * _S30))
               + (float)(v76 * fmaxf(_S27, fmaxf(_S28, _S30)));
          v120 = 8191.0;
          if (v119 <= 8191.0)
          {
            v120 = v119;
            if (v119 < 0.0)
              v120 = 0.0;
          }
          __asm { FCVT            S18, H19 }
          v122 = _S24 * _S18;
          _S24 = _S25 * _S18;
          v124 = _S26 * _S18;
          _H0 = *(_WORD *)(v55 + 2 * llroundf(v120));
          __asm { FCVT            S0, H0 }
          _S25 = _S27 * _S0;
          v128 = _S28 * _S0;
          v129 = _S30 * _S0;
          v130 = (float)((float)(v47 * _S24) + (float)(v122 * v45)) + (float)(v124 * v46);
          v131 = (float)((float)(v49 * _S24) + (float)(v122 * v48)) + (float)(v124 * v50);
          _S18 = (float)((float)(v52 * _S24) + (float)(v122 * v51)) + (float)(v124 * v53);
          v133 = (float)((float)(v47 * v128) + (float)(_S25 * v45)) + (float)(v129 * v46);
          v134 = (float)((float)(v49 * v128) + (float)(_S25 * v48)) + (float)(v129 * v50);
          v135 = (float)((float)(v52 * v128) + (float)(_S25 * v51)) + (float)(v129 * v53);
          LOWORD(_S24) = *(_WORD *)(v64 + 2 * llroundf(fminf(fmaxf(v130, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          LOWORD(_S25) = *(_WORD *)(v64 + 2 * llroundf(fminf(fmaxf(v131, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          LOWORD(_S18) = *(_WORD *)(v64 + 2 * llroundf(fminf(fmaxf(_S18, 0.0), 8191.0)));
          __asm { FCVT            S26, H18 }
          _H19 = *(_WORD *)(v64 + 2 * llroundf(fminf(fmaxf(v133, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v64 + 2 * llroundf(fminf(fmaxf(v134, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v64 + 2 * llroundf(fminf(fmaxf(v135, 0.0), 8191.0)));
          v142 = (float)((float)((float)(v43 * _S25) + (float)(v42 * _S24)) + (float)(v44 * _S26)) + v37;
          v143 = v39;
          if (v142 <= v39)
          {
            v143 = (float)((float)((float)(v43 * _S25) + (float)(v42 * _S24)) + (float)(v44 * _S26)) + v37;
            if (v142 < v37)
              v143 = v37;
          }
          __asm
          {
            FCVT            S28, H19
            FCVT            S27, H27
            FCVT            S19, H30
          }
          v147 = (float)((float)((float)(v43 * _S27) + (float)(v42 * _S28)) + (float)(v44 * _S19)) + v37;
          *v79 = llroundf(v143) << v72;
          v148 = v39;
          if (v147 <= v39)
          {
            v148 = (float)((float)((float)(v43 * _S27) + (float)(v42 * _S28)) + (float)(v44 * _S19)) + v37;
            if (v147 < v37)
              v148 = v37;
          }
          v79[1] = llroundf(v148) << v72;
          v149 = _S24 + _S28;
          v150 = _S25 + _S27;
          v151 = _S26 + _S19;
          v152 = (float)((float)(v38 + (float)(v149 * v163)) + (float)(v150 * v162)) + (float)(v151 * v161);
          v153 = v41;
          if (v152 <= v41)
          {
            v153 = (float)((float)(v38 + (float)(v149 * v163)) + (float)(v150 * v162)) + (float)(v151 * v161);
            if (v152 < v168)
              v153 = v168;
          }
          v154 = (_WORD *)result + v77;
          v155 = (float)((float)(v38 + (float)(v149 * v160)) + (float)(v150 * v159)) + (float)(v151 * v158);
          *v154 = llroundf(v153) << v72;
          v156 = v41;
          if (v155 <= v41)
          {
            v156 = v155;
            if (v155 < v168)
              v156 = v168;
          }
          v154[1] = llroundf(v156) << v72;
          v77 += 2;
          v78 += 2;
          v79 += 2;
          v34 = v86;
        }
        while (v11 > v77);
      }
      v70 += v23;
      v69 += v24;
      v65 = (_WORD *)((char *)v65 + v28);
      result = (_QWORD *)((char *)result + v29);
      ++v10;
    }
    while (v10 != v14);
    if (v26 && v31)
    {
      v157 = 2 * v11;
      do
      {
        result = memcpy(v32, v27, v157);
        v27 += v25;
        v32 += v30;
        --v14;
      }
      while (v14);
    }
    else if (v31)
    {
      do
      {
        if (v11)
          result = memset(v32, 255, 2 * v11);
        v32 += v30;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Mat_TRC_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v20 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v18 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Mat_TRC_xf422_GCD);
  return 0;
}

_QWORD *vt_Copy_xf422_TRC_Mat_TRC_xf422_GCD(_QWORD *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  float v32;
  float v33;
  float v34;
  float v35;
  unsigned int v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  char v58;
  char v59;
  unsigned int v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  char v70;
  unint64_t v71;
  unsigned __int16 *v72;
  _WORD *v73;
  unsigned __int16 *v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  BOOL v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v109;
  float v110;
  float v112;
  float v113;
  float v114;
  float v121;
  float v122;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  _WORD *v133;
  float v134;
  float v135;
  size_t v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;

  v6 = *(_QWORD *)((char *)result + 28);
  v7 = *(unsigned __int8 *)result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)((char *)result + 20);
    v12 = *(_QWORD *)((char *)result + 36);
    v13 = v8 + *(_QWORD *)((char *)result + 44);
    v14 = v9 - v8;
    v15 = result[14];
    v16 = (uint64_t *)result[16];
    v17 = result[13] * a2 / v7 + result[15];
    v18 = result[19];
    v19 = (uint64_t *)result[7];
    v20 = (uint64_t *)result[8];
    v21 = (uint64_t *)result[17];
    v22 = *v20;
    v23 = v20[1];
    v24 = v20[2];
    v25 = v19[2];
    v26 = (char *)(v25 + v24 * v13 + 2 * v12);
    v27 = *v21;
    v28 = v21[1];
    v29 = v21[2];
    v30 = v16[2];
    v31 = (char *)(v30 + v29 * v17 + 2 * v15);
    LOWORD(a5) = *(_WORD *)(v18 + 140);
    LOWORD(a6) = *(_WORD *)(v18 + 142);
    v32 = 8191.0 / (float)*(unsigned int *)(v18 + 128);
    v33 = (float)LODWORD(a5);
    v34 = (float)LODWORD(a6);
    v35 = v32 * *(float *)v18;
    v145 = v32 * *(float *)(v18 + 16);
    v146 = v32 * *(float *)(v18 + 8);
    v143 = v32 * *(float *)(v18 + 28);
    *(float *)&v36 = v143;
    v144 = v32 * *(float *)(v18 + 20);
    LOWORD(v36) = *(_WORD *)(v18 + 144);
    v37 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v18 + 146);
    v38 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v18 + 148);
    v39 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v18 + 150);
    v40 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v18 + 152);
    v41 = (float)v36;
    v42 = *(float *)(v18 + 36);
    v43 = *(float *)(v18 + 40);
    v44 = *(float *)(v18 + 44);
    v141 = *(float *)(v18 + 52) * 0.5;
    v142 = *(float *)(v18 + 48) * 0.5;
    v139 = *(float *)(v18 + 60) * 0.5;
    v140 = *(float *)(v18 + 56) * 0.5;
    v45 = *(float *)(v18 + 72);
    v137 = *(float *)(v18 + 68) * 0.5;
    v138 = *(float *)(v18 + 64) * 0.5;
    v47 = *(float *)(v18 + 76);
    v46 = *(float *)(v18 + 80);
    v48 = *(float *)(v18 + 84);
    v49 = *(float *)(v18 + 88);
    v50 = *(float *)(v18 + 92);
    v51 = *(float *)(v18 + 96);
    v52 = *(float *)(v18 + 100);
    v53 = *(float *)(v18 + 104);
    v54 = v18 + 164;
    v55 = v18 + 16548;
    v56 = *(unsigned __int8 *)(v18 + 132);
    _CF = v56 >= 0x11;
    v58 = 16 - v56;
    if (_CF)
      v59 = 0;
    else
      v59 = v58;
    v60 = *(unsigned __int8 *)(v18 + 124);
    v61 = 16 - v60;
    if (v60 >= 0x11)
      v61 = 0;
    v63 = *v16;
    v62 = v16[1];
    v64 = v62 + v28 * v17 + 2 * v15;
    if (!v62)
      v64 = 0;
    result = (_QWORD *)(v63 + v27 * v17 + 2 * v15);
    v66 = *v19;
    v65 = v19[1];
    v67 = v65 + v23 * v13 + 2 * v12;
    if (!v65)
      v67 = 0;
    v68 = v66 + v22 * v13 + 2 * v12;
    v69 = v61;
    v70 = v59;
    do
    {
      if (v11)
      {
        v71 = 0;
        v72 = (unsigned __int16 *)v68;
        v73 = result;
        do
        {
          v74 = (unsigned __int16 *)(v67 + 2 * v71);
          v75 = (float)(v74[1] >> v69) - v34;
          v76 = v146 * v75;
          v77 = v35 * (float)((float)(*v72 >> v69) - v33);
          v78 = (float)(v146 * v75) + v77;
          v79 = 8191.0;
          if (v78 <= 8191.0)
          {
            v79 = (float)(v146 * v75) + v77;
            if (v78 < 0.0)
              v79 = 0.0;
          }
          v80 = (float)(*v74 >> v69) - v34;
          v81 = (float)(v144 * v75) + (float)(v80 * v145);
          v82 = 8191.0;
          if ((float)(v77 + v81) <= 8191.0)
          {
            v82 = v77 + v81;
            if ((float)(v77 + v81) < 0.0)
              v82 = 0.0;
          }
          v83 = v143 * v80;
          v84 = v83 + v77;
          v85 = (float)(v83 + v77) <= 8191.0;
          v86 = 8191.0;
          if (v85)
          {
            v86 = v84;
            if (v84 < 0.0)
              v86 = 0.0;
          }
          v87 = v35 * (float)((float)(v72[1] >> v69) - v33);
          v88 = v76 + v87;
          v85 = (float)(v76 + v87) <= 8191.0;
          v89 = 8191.0;
          if (v85)
          {
            v89 = v88;
            if (v88 < 0.0)
              v89 = 0.0;
          }
          v90 = v81 + v87;
          v85 = (float)(v81 + v87) <= 8191.0;
          v91 = 8191.0;
          if (v85)
          {
            v91 = v90;
            if (v90 < 0.0)
              v91 = 0.0;
          }
          v92 = v83 + v87;
          v85 = (float)(v83 + v87) <= 8191.0;
          v93 = 8191.0;
          if (v85)
          {
            v93 = v92;
            if (v92 < 0.0)
              v93 = 0.0;
          }
          _H4 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H5 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H6 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H7 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          _H18 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          __asm
          {
            FCVT            S7, H7
            FCVT            S18, H18
          }
          _H24 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          v109 = (float)((float)(v47 * _S5) + (float)(_S4 * v45)) + (float)(_S6 * v46);
          v110 = (float)((float)(v49 * _S5) + (float)(_S4 * v48)) + (float)(_S6 * v50);
          _S6 = (float)((float)(v52 * _S5) + (float)(_S4 * v51)) + (float)(_S6 * v53);
          v112 = (float)((float)(v47 * _S18) + (float)(_S7 * v45)) + (float)(_S24 * v46);
          v113 = (float)((float)(v49 * _S18) + (float)(_S7 * v48)) + (float)(_S24 * v50);
          v114 = (float)((float)(v52 * _S18) + (float)(_S7 * v51)) + (float)(_S24 * v53);
          LOWORD(_S4) = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v109, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          LOWORD(_S5) = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v110, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H7 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v112, 0.0), 8191.0)));
          _H24 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v113, 0.0), 8191.0)));
          _H26 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v114, 0.0), 8191.0)));
          v121 = (float)((float)((float)(v43 * _S5) + (float)(v42 * _S4)) + (float)(v44 * _S6)) + v37;
          v122 = v39;
          if (v121 <= v39)
          {
            v122 = (float)((float)((float)(v43 * _S5) + (float)(v42 * _S4)) + (float)(v44 * _S6)) + v37;
            if (v121 < v37)
              v122 = v37;
          }
          __asm
          {
            FCVT            S25, H7
            FCVT            S24, H24
            FCVT            S7, H26
          }
          v126 = (float)((float)((float)(v43 * _S24) + (float)(v42 * _S25)) + (float)(v44 * _S7)) + v37;
          *v73 = llroundf(v122) << v70;
          v127 = v39;
          if (v126 <= v39)
          {
            v127 = (float)((float)((float)(v43 * _S24) + (float)(v42 * _S25)) + (float)(v44 * _S7)) + v37;
            if (v126 < v37)
              v127 = v37;
          }
          v73[1] = llroundf(v127) << v70;
          v128 = _S4 + _S25;
          v129 = _S5 + _S24;
          v130 = _S6 + _S7;
          v131 = (float)((float)(v38 + (float)(v128 * v142)) + (float)(v129 * v141)) + (float)(v130 * v140);
          v132 = v41;
          if (v131 <= v41)
          {
            v132 = (float)((float)(v38 + (float)(v128 * v142)) + (float)(v129 * v141)) + (float)(v130 * v140);
            if (v131 < v40)
              v132 = v40;
          }
          v133 = (_WORD *)(v64 + 2 * v71);
          v134 = (float)((float)(v38 + (float)(v128 * v139)) + (float)(v129 * v138)) + (float)(v130 * v137);
          *v133 = llroundf(v132) << v70;
          v135 = v41;
          if (v134 <= v41)
          {
            v135 = v134;
            if (v134 < v40)
              v135 = v40;
          }
          v133[1] = llroundf(v135) << v70;
          v71 += 2;
          v72 += 2;
          v73 += 2;
        }
        while (v11 > v71);
      }
      v68 += v22;
      v67 += v23;
      result = (_QWORD *)((char *)result + v27);
      v64 += v28;
      ++v10;
    }
    while (v10 != v14);
    if (v25 && v30)
    {
      v136 = 2 * v11;
      do
      {
        result = memcpy(v31, v26, v136);
        v26 += v24;
        v31 += v29;
        --v14;
      }
      while (v14);
    }
    else if (v30)
    {
      do
      {
        if (v11)
          result = memset(v31, 255, 2 * v11);
        v31 += v29;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_rgb_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v20 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v18 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_rgb_xf422_GCD);
  return 0;
}

_QWORD *vt_Copy_xf422_rgb_xf422_GCD(_QWORD *result, uint64_t a2, double a3, double a4, float a5)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  unsigned int v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  unsigned int v59;
  BOOL v60;
  char v61;
  char v62;
  unsigned int v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  char v73;
  unint64_t v74;
  unsigned __int16 *v75;
  _WORD *v76;
  unsigned __int16 *v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  _WORD *v100;
  float v101;
  float v102;
  size_t v103;

  v9 = *(_QWORD *)((char *)result + 28);
  v10 = *(unsigned __int8 *)result;
  v11 = v9 * a2 / v10;
  v12 = (v9 + v9 * a2) / v10;
  if (v12 != v11)
  {
    v13 = 0;
    v14 = *(_QWORD *)((char *)result + 20);
    v15 = *(_QWORD *)((char *)result + 36);
    v16 = v11 + *(_QWORD *)((char *)result + 44);
    v17 = v12 - v11;
    v18 = result[14];
    v19 = (uint64_t *)result[16];
    v20 = result[13] * a2 / v10 + result[15];
    v21 = result[19];
    v23 = (uint64_t *)result[7];
    v22 = (uint64_t *)result[8];
    v24 = (uint64_t *)result[17];
    v25 = *v22;
    v26 = v22[1];
    v27 = v22[2];
    v28 = v23[2];
    v29 = (char *)(v28 + v27 * v16 + 2 * v15);
    v30 = *v24;
    v31 = v24[1];
    v32 = v24[2];
    v33 = v19[2];
    v34 = (char *)(v33 + v32 * v20 + 2 * v18);
    *(float *)&v35 = (float)*(unsigned int *)(v21 + 136);
    LOWORD(a5) = *(_WORD *)(v21 + 140);
    v36 = *(float *)&v35 / (float)*(unsigned int *)(v21 + 128);
    v37 = (float)LODWORD(a5);
    LOWORD(v35) = *(_WORD *)(v21 + 142);
    v38 = (float)v35;
    v39 = v36 * *(float *)v21;
    v40 = v36 * *(float *)(v21 + 8);
    v41 = v36 * *(float *)(v21 + 16);
    v42 = v36 * *(float *)(v21 + 20);
    v43 = *(float *)(v21 + 28);
    v44 = v36 * v43;
    LOWORD(v43) = *(_WORD *)(v21 + 144);
    v45 = (float)LODWORD(v43);
    LOWORD(v5) = *(_WORD *)(v21 + 146);
    v46 = (float)v5;
    LOWORD(v6) = *(_WORD *)(v21 + 148);
    v47 = (float)v6;
    LOWORD(v7) = *(_WORD *)(v21 + 150);
    v48 = (float)v7;
    LOWORD(v8) = *(_WORD *)(v21 + 152);
    v49 = (float)v8;
    v50 = *(float *)(v21 + 36);
    v51 = *(float *)(v21 + 40);
    v52 = *(float *)(v21 + 44);
    v53 = *(float *)(v21 + 48) * 0.5;
    v54 = *(float *)(v21 + 52) * 0.5;
    v55 = *(float *)(v21 + 56) * 0.5;
    v56 = *(float *)(v21 + 60) * 0.5;
    v57 = *(float *)(v21 + 64) * 0.5;
    v58 = *(float *)(v21 + 68) * 0.5;
    v59 = *(unsigned __int8 *)(v21 + 132);
    v60 = v59 >= 0x11;
    v61 = 16 - v59;
    if (v60)
      v62 = 0;
    else
      v62 = v61;
    v63 = *(unsigned __int8 *)(v21 + 124);
    v64 = 16 - v63;
    if (v63 >= 0x11)
      v64 = 0;
    v66 = *v19;
    v65 = v19[1];
    v67 = v65 + v31 * v20 + 2 * v18;
    if (!v65)
      v67 = 0;
    v68 = v66 + v30 * v20 + 2 * v18;
    v70 = *v23;
    v69 = v23[1];
    v71 = v69 + v26 * v16 + 2 * v15;
    if (!v69)
      v71 = 0;
    result = (_QWORD *)(v70 + v25 * v16 + 2 * v15);
    v72 = v64;
    v73 = v62;
    do
    {
      if (v14)
      {
        v74 = 0;
        v75 = (unsigned __int16 *)result;
        v76 = (_WORD *)v68;
        do
        {
          v77 = (unsigned __int16 *)(v71 + 2 * v74);
          v78 = (float)(*v77 >> v72) - v38;
          v79 = (float)(v77[1] >> v72) - v38;
          v80 = v40 * v79;
          v81 = (float)(v42 * v79) + (float)(v78 * v41);
          v82 = v44 * v78;
          v83 = v39 * (float)((float)(*v75 >> v72) - v37);
          v84 = (float)(v40 * v79) + v83;
          v85 = v83 + v81;
          v86 = v82 + v83;
          v87 = (float)((float)((float)(v51 * v85) + (float)(v50 * v84)) + (float)(v52 * v86)) + v45;
          v88 = v47;
          if (v87 <= v47)
          {
            v88 = (float)((float)((float)(v51 * v85) + (float)(v50 * v84)) + (float)(v52 * v86)) + v45;
            if (v87 < v45)
              v88 = v45;
          }
          v89 = v39 * (float)((float)(v75[1] >> v72) - v37);
          v90 = v80 + v89;
          v91 = v81 + v89;
          v92 = v82 + v89;
          v93 = (float)((float)((float)(v51 * v91) + (float)(v50 * v90)) + (float)(v52 * (float)(v82 + v89))) + v45;
          *v76 = llroundf(v88) << v73;
          v94 = v47;
          if (v93 <= v47)
          {
            v94 = v93;
            if (v93 < v45)
              v94 = v45;
          }
          v76[1] = llroundf(v94) << v73;
          v95 = v84 + v90;
          v96 = v85 + v91;
          v97 = v86 + v92;
          v98 = (float)((float)(v46 + (float)(v95 * v53)) + (float)(v96 * v54)) + (float)(v97 * v55);
          v99 = v49;
          if (v98 <= v49)
          {
            v99 = (float)((float)(v46 + (float)(v95 * v53)) + (float)(v96 * v54)) + (float)(v97 * v55);
            if (v98 < v48)
              v99 = v48;
          }
          v100 = (_WORD *)(v67 + 2 * v74);
          v101 = (float)((float)(v46 + (float)(v95 * v56)) + (float)(v96 * v57)) + (float)(v97 * v58);
          *v100 = llroundf(v99) << v73;
          v102 = v49;
          if (v101 <= v49)
          {
            v102 = v101;
            if (v101 < v48)
              v102 = v48;
          }
          v100[1] = llroundf(v102) << v73;
          v74 += 2;
          v75 += 2;
          v76 += 2;
        }
        while (v14 > v74);
      }
      result = (_QWORD *)((char *)result + v25);
      v71 += v26;
      v68 += v30;
      v67 += v31;
      ++v13;
    }
    while (v13 != v17);
    if (v28 && v33)
    {
      v103 = 2 * v14;
      do
      {
        result = memcpy(v34, v29, v103);
        v29 += v27;
        v34 += v32;
        --v17;
      }
      while (v17);
    }
    else if (v33)
    {
      do
      {
        if (v14)
          result = memset(v34, 255, 2 * v14);
        v34 += v32;
        --v17;
      }
      while (v17);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Tone_Mat_TRC_v216(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Tone_Mat_TRC_v216_GCD);
  return 0;
}

_QWORD *vt_Copy_xf422_TRC_Tone_Mat_TRC_v216_GCD(_QWORD *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  float v33;
  float v34;
  float v35;
  unsigned int v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  uint64_t v54;
  unsigned int v55;
  char v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  _WORD *v62;
  uint64_t v63;
  uint64_t v65;
  char v66;
  float v67;
  float v68;
  float v69;
  float v70;
  unint64_t v71;
  unsigned __int16 *v72;
  _DWORD *v73;
  _WORD *v74;
  unsigned __int16 *v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  BOOL v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v107;
  float v108;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v121;
  float v122;
  float v123;
  float v125;
  float v127;
  float v128;
  float v131;
  float v132;
  unsigned int v138;
  float v139;
  float v141;
  float v142;
  float v143;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  __int16 v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  size_t v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;

  v5 = *(_QWORD *)((char *)result + 28);
  v6 = *(unsigned __int8 *)result;
  v7 = v5 * a2 / v6;
  v8 = v5 + v5 * a2;
  v9 = result[14];
  v10 = result[13] * a2 / v6;
  v11 = (_QWORD *)result[16];
  v12 = v10 + result[15];
  v13 = (uint64_t *)result[17];
  v14 = v13[1];
  v15 = v11[1];
  v16 = (char *)(v15 + v14 * v12 + 2 * v9);
  v17 = v8 / v6;
  if (v15)
    v18 = v15 + v14 * v12 + 2 * v9;
  else
    v18 = 0;
  if (v17 != v7)
  {
    v19 = 0;
    v20 = *(_QWORD *)((char *)result + 20);
    v21 = *(_QWORD *)((char *)result + 36);
    v22 = v7 + *(_QWORD *)((char *)result + 44);
    v23 = v17 - v7;
    v24 = result[19];
    v25 = (_QWORD *)result[7];
    v26 = (uint64_t *)result[8];
    v27 = *v26;
    v28 = v26[1];
    v29 = v26[2];
    v30 = v25[2];
    v31 = (char *)(v30 + v29 * v22 + 2 * v21);
    v32 = *v13;
    LOWORD(a4) = *(_WORD *)(v24 + 140);
    LOWORD(a5) = *(_WORD *)(v24 + 142);
    v33 = 8191.0 / (float)*(unsigned int *)(v24 + 128);
    v34 = (float)LODWORD(a5);
    v170 = v33 * *(float *)v24;
    v171 = (float)LODWORD(a4);
    v168 = v33 * *(float *)(v24 + 16);
    v169 = v33 * *(float *)(v24 + 8);
    v35 = v33 * *(float *)(v24 + 20);
    *(float *)&v36 = v33 * *(float *)(v24 + 28);
    v166 = *(float *)&v36;
    v167 = v35;
    LOWORD(v36) = *(_WORD *)(v24 + 144);
    v37 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v24 + 146);
    v38 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v24 + 148);
    v39 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v24 + 150);
    v40 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v24 + 152);
    v41 = (float)v36;
    v42 = *(float *)(v24 + 36);
    v43 = *(float *)(v24 + 40);
    v44 = *(float *)(v24 + 44);
    v164 = *(float *)(v24 + 48) * 0.5;
    v165 = v38;
    v162 = *(float *)(v24 + 56) * 0.5;
    v163 = *(float *)(v24 + 52) * 0.5;
    v160 = *(float *)(v24 + 64) * 0.5;
    v161 = *(float *)(v24 + 60) * 0.5;
    v45 = *(float *)(v24 + 72);
    v159 = *(float *)(v24 + 68) * 0.5;
    v47 = *(float *)(v24 + 76);
    v46 = *(float *)(v24 + 80);
    v48 = *(float *)(v24 + 84);
    v49 = *(float *)(v24 + 88);
    v50 = *(float *)(v24 + 92);
    v51 = *(float *)(v24 + 96);
    v52 = *(float *)(v24 + 100);
    v53 = *(float *)(v24 + 104);
    v54 = v24 + 164;
    v55 = *(unsigned __int8 *)(v24 + 124);
    v56 = 16 - v55;
    _CF = v55 >= 0x11;
    v58 = v24 + 16548;
    v59 = *v11 + v32 * v12;
    v60 = v24 + 32932;
    if (_CF)
      v61 = 0;
    else
      v61 = v56;
    v62 = (_WORD *)(v59 + 2 * v9);
    v63 = v25[1];
    _ZF = v63 == 0;
    result = (_QWORD *)(v63 + v28 * v22 + 2 * v21);
    if (_ZF)
      result = 0;
    v65 = *v25 + v27 * v22 + 2 * v21;
    v66 = v61;
    v68 = *(float *)(v24 + 108);
    v67 = *(float *)(v24 + 112);
    v69 = *(float *)(v24 + 116);
    v70 = *(float *)(v24 + 120);
    do
    {
      if (v20)
      {
        v71 = 0;
        v72 = (unsigned __int16 *)v65;
        v73 = (_DWORD *)v18;
        v74 = v62;
        do
        {
          v75 = (unsigned __int16 *)result + v71;
          v76 = (float)(v75[1] >> v66) - v34;
          v77 = v169 * v76;
          v78 = v170 * (float)((float)(*v72 >> v66) - v171);
          v79 = (float)(v169 * v76) + v78;
          v80 = 8191.0;
          if (v79 <= 8191.0)
          {
            v80 = (float)(v169 * v76) + v78;
            if (v79 < 0.0)
              v80 = 0.0;
          }
          v81 = v34;
          v82 = (float)(*v75 >> v66) - v34;
          v83 = (float)(v167 * v76) + (float)(v82 * v168);
          v84 = 8191.0;
          if ((float)(v78 + v83) <= 8191.0)
          {
            v84 = v78 + v83;
            if ((float)(v78 + v83) < 0.0)
              v84 = 0.0;
          }
          v85 = v166 * v82;
          v86 = (float)(v166 * v82) + v78;
          v87 = 8191.0;
          if (v86 <= 8191.0)
          {
            v87 = v86;
            if (v86 < 0.0)
              v87 = 0.0;
          }
          v88 = v170 * (float)((float)(v72[1] >> v66) - v171);
          v89 = v77 + v88;
          v90 = (float)(v77 + v88) <= 8191.0;
          v91 = 8191.0;
          if (v90)
          {
            v91 = v89;
            if (v89 < 0.0)
              v91 = 0.0;
          }
          v92 = v83 + v88;
          v90 = (float)(v83 + v88) <= 8191.0;
          v93 = 8191.0;
          if (v90)
          {
            v93 = v92;
            if (v92 < 0.0)
              v93 = 0.0;
          }
          v94 = v85 + v88;
          v90 = (float)(v85 + v88) <= 8191.0;
          v95 = 8191.0;
          if (v90)
          {
            v95 = v94;
            if (v94 < 0.0)
              v95 = 0.0;
          }
          _H0 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S24, H0 }
          _H0 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm { FCVT            S25, H0 }
          _H0 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          __asm { FCVT            S26, H0 }
          _H1 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v95, 0.0), 8191.0)));
          v107 = (float)((float)((float)(v67 * _S25) + (float)(v68 * _S24)) + (float)(v69 * _S26))
               + (float)(v70 * fmaxf(_S24, fmaxf(_S25, _S26)));
          v108 = 8191.0;
          if (v107 <= 8191.0)
          {
            v108 = v107;
            if (v107 < 0.0)
              v108 = 0.0;
          }
          __asm
          {
            FCVT            S28, H1
            FCVT            S30, H27
            FCVT            S1, H2
          }
          _H0 = *(_WORD *)(v58 + 2 * llroundf(v108));
          __asm { FCVT            S0, H0 }
          v114 = _S24 * _S0;
          v115 = _S25 * _S0;
          v116 = _S26 * _S0;
          v117 = (float)((float)((float)(v67 * _S30) + (float)(v68 * _S28)) + (float)(v69 * _S1))
               + (float)(v70 * fmaxf(_S28, fmaxf(_S30, _S1)));
          v118 = 8191.0;
          if (v117 <= 8191.0)
          {
            v118 = v117;
            if (v117 < 0.0)
              v118 = 0.0;
          }
          _H0 = *(_WORD *)(v58 + 2 * llroundf(v118));
          __asm { FCVT            S0, H0 }
          v121 = _S28 * _S0;
          v122 = _S30 * _S0;
          v123 = _S1 * _S0;
          _S1 = (float)((float)(v47 * v115) + (float)(v114 * v45)) + (float)(v116 * v46);
          v125 = (float)((float)(v49 * v115) + (float)(v114 * v48)) + (float)(v116 * v50);
          _S24 = (float)((float)(v52 * v115) + (float)(v114 * v51)) + (float)(v116 * v53);
          v127 = (float)(v47 * v122) + (float)(v121 * v45);
          v128 = (float)(v49 * v122) + (float)(v121 * v48);
          _S2 = (float)(v52 * v122) + (float)(v121 * v51);
          _S25 = v127 + (float)(v123 * v46);
          v131 = v128 + (float)(v123 * v50);
          LOWORD(_S1) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          v132 = _S2 + (float)(v123 * v53);
          __asm { FCVT            S1, H1 }
          LOWORD(_S2) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v125, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          LOWORD(_S24) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S24, 0.0), 8191.0)));
          __asm { FCVT            S27, H24 }
          LOWORD(_S24) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S25, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          LOWORD(_S25) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v131, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          v138 = llroundf(fminf(fmaxf(v132, 0.0), 8191.0));
          v139 = (float)(v43 * _S2) + (float)(v42 * _S1);
          _S1 = _S1 + _S24;
          v141 = _S2 + _S25;
          v142 = (float)(v165 + (float)(_S1 * v164)) + (float)(v141 * v163);
          v143 = (float)(v165 + (float)(_S1 * v161)) + (float)(v141 * v160);
          LOWORD(_S1) = *(_WORD *)(v60 + 2 * v138);
          __asm { FCVT            S1, H1 }
          v145 = v139 + (float)(v44 * _S27);
          v146 = _S27 + _S1;
          v147 = v142 + (float)(v146 * v162);
          v148 = v143 + (float)(v146 * v159);
          if (v147 < v37)
            v149 = v37;
          else
            v149 = v147;
          v150 = v145 + v37;
          if (v147 <= v39)
            v151 = v149;
          else
            v151 = v39;
          v152 = llroundf(v151);
          if (v150 < v40)
            v153 = v40;
          else
            v153 = v150;
          *v74 = v152;
          if (v150 <= v41)
            v154 = v153;
          else
            v154 = v41;
          v74[1] = llroundf(v154);
          v155 = v39;
          if (v148 <= v39)
          {
            v155 = v148;
            if (v148 < v37)
              v155 = v37;
          }
          v156 = (float)((float)((float)(v43 * _S25) + (float)(v42 * _S24)) + (float)(v44 * _S1)) + v37;
          v74[2] = llroundf(v155);
          v157 = v41;
          if (v156 <= v41)
          {
            v157 = v156;
            if (v156 < v40)
              v157 = v40;
          }
          v74[3] = llroundf(v157);
          v34 = v81;
          if (v73)
            *v73++ = 0;
          v71 += 2;
          v72 += 2;
          v74 += 4;
        }
        while (v20 > v71);
      }
      v65 += v27;
      result = (_QWORD *)((char *)result + v28);
      v62 = (_WORD *)((char *)v62 + v32);
      ++v19;
    }
    while (v19 != v23);
    if (v30 && v18)
    {
      v158 = 2 * v20;
      do
      {
        result = memcpy(v16, v31, v158);
        v31 += v29;
        v16 += v14;
        --v23;
      }
      while (v23);
    }
    else if (v18)
    {
      do
      {
        if (v20)
          result = memset(v16, 255, 2 * v20);
        v16 += v14;
        --v23;
      }
      while (v23);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Mat_TRC_v216(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Mat_TRC_v216_GCD);
  return 0;
}

_QWORD *vt_Copy_xf422_TRC_Mat_TRC_v216_GCD(_QWORD *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  float v34;
  float v35;
  float v36;
  float v37;
  unsigned int v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  unsigned int v58;
  char v59;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  unint64_t v68;
  unsigned __int16 *v69;
  _DWORD *v70;
  _WORD *v71;
  unsigned __int16 *v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  BOOL v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  unsigned int v105;
  float v107;
  float v109;
  float v110;
  float v111;
  float v114;
  float v115;
  unsigned int v121;
  float v122;
  float v124;
  float v125;
  float v126;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  __int16 v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  size_t v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;

  v6 = *(_QWORD *)((char *)result + 28);
  v7 = *(unsigned __int8 *)result;
  v8 = v6 * a2 / v7;
  v9 = v6 + v6 * a2;
  v10 = result[14];
  v11 = result[13] * a2 / v7;
  v12 = (_QWORD *)result[16];
  v13 = v11 + result[15];
  v14 = (uint64_t *)result[17];
  v15 = v14[1];
  v16 = v12[1];
  v17 = (char *)(v16 + v15 * v13 + 2 * v10);
  v18 = v9 / v7;
  if (v16)
    v19 = v16 + v15 * v13 + 2 * v10;
  else
    v19 = 0;
  if (v18 != v8)
  {
    v20 = 0;
    v21 = *(_QWORD *)((char *)result + 20);
    v22 = *(_QWORD *)((char *)result + 36);
    v23 = v8 + *(_QWORD *)((char *)result + 44);
    v24 = v18 - v8;
    v25 = result[19];
    v26 = (_QWORD *)result[7];
    v27 = (uint64_t *)result[8];
    v28 = *v27;
    v29 = v27[1];
    v30 = v27[2];
    v31 = v26[2];
    v32 = (char *)(v31 + v30 * v23 + 2 * v22);
    v33 = *v14;
    LOWORD(a5) = *(_WORD *)(v25 + 140);
    LOWORD(a6) = *(_WORD *)(v25 + 142);
    v34 = 8191.0 / (float)*(unsigned int *)(v25 + 128);
    v35 = (float)LODWORD(a5);
    v36 = (float)LODWORD(a6);
    v37 = v34 * *(float *)v25;
    v146 = v34 * *(float *)(v25 + 16);
    v147 = v34 * *(float *)(v25 + 8);
    v144 = v34 * *(float *)(v25 + 28);
    *(float *)&v38 = v144;
    v145 = v34 * *(float *)(v25 + 20);
    LOWORD(v38) = *(_WORD *)(v25 + 144);
    v39 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v25 + 146);
    v40 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v25 + 148);
    v41 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v25 + 150);
    v42 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v25 + 152);
    v43 = (float)v38;
    v44 = *(float *)(v25 + 36);
    v45 = *(float *)(v25 + 40);
    v46 = *(float *)(v25 + 44);
    v142 = *(float *)(v25 + 52) * 0.5;
    v143 = *(float *)(v25 + 48) * 0.5;
    v140 = *(float *)(v25 + 60) * 0.5;
    v141 = *(float *)(v25 + 56) * 0.5;
    v47 = *(float *)(v25 + 64) * 0.5;
    v48 = *(float *)(v25 + 72);
    v49 = *(float *)(v25 + 68) * 0.5;
    v51 = *(float *)(v25 + 76);
    v50 = *(float *)(v25 + 80);
    v52 = *(float *)(v25 + 84);
    v53 = *(float *)(v25 + 88);
    v54 = *(float *)(v25 + 92);
    v55 = *(float *)(v25 + 96);
    v56 = *(float *)(v25 + 100);
    v57 = *(float *)(v25 + 104);
    v58 = *(unsigned __int8 *)(v25 + 124);
    v59 = 16 - v58;
    _CF = v58 >= 0x11;
    v61 = v25 + 16548;
    v62 = v25 + 164;
    if (_CF)
      v63 = 0;
    else
      v63 = v59;
    v64 = *v12 + v33 * v13 + 2 * v10;
    v65 = v26[1];
    if (v65)
      v66 = v65 + v29 * v23 + 2 * v22;
    else
      v66 = 0;
    result = (_QWORD *)(*v26 + v28 * v23 + 2 * v22);
    v67 = v63;
    do
    {
      if (v21)
      {
        v68 = 0;
        v69 = (unsigned __int16 *)result;
        v70 = (_DWORD *)v19;
        v71 = (_WORD *)v64;
        do
        {
          v72 = (unsigned __int16 *)(v66 + 2 * v68);
          v73 = (float)(v72[1] >> v67) - v36;
          v74 = v147 * v73;
          v75 = v37 * (float)((float)(*v69 >> v67) - v35);
          v76 = (float)(v147 * v73) + v75;
          v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            v77 = (float)(v147 * v73) + v75;
            if (v76 < 0.0)
              v77 = 0.0;
          }
          v78 = (float)(*v72 >> v67) - v36;
          v79 = (float)(v145 * v73) + (float)(v78 * v146);
          v80 = 8191.0;
          if ((float)(v75 + v79) <= 8191.0)
          {
            v80 = v75 + v79;
            if ((float)(v75 + v79) < 0.0)
              v80 = 0.0;
          }
          v81 = v144 * v78;
          v82 = v81 + v75;
          v83 = (float)(v81 + v75) <= 8191.0;
          v84 = 8191.0;
          if (v83)
          {
            v84 = v82;
            if (v82 < 0.0)
              v84 = 0.0;
          }
          v85 = v37 * (float)((float)(v69[1] >> v67) - v35);
          v86 = v74 + v85;
          v87 = 8191.0;
          if (v86 <= 8191.0)
          {
            v87 = v86;
            if (v86 < 0.0)
              v87 = 0.0;
          }
          v88 = v79 + v85;
          v83 = (float)(v79 + v85) <= 8191.0;
          v89 = 8191.0;
          if (v83)
          {
            v89 = v88;
            if (v88 < 0.0)
              v89 = 0.0;
          }
          v90 = v81 + v85;
          v83 = (float)(v81 + v85) <= 8191.0;
          v91 = 8191.0;
          if (v83)
          {
            v91 = v90;
            if (v90 < 0.0)
              v91 = 0.0;
          }
          _H4 = *(_WORD *)(v62 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H5 = *(_WORD *)(v62 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H6 = *(_WORD *)(v62 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H7 = *(_WORD *)(v62 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          _H24 = *(_WORD *)(v62 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          v105 = llroundf(fminf(fmaxf(v91, 0.0), 8191.0));
          _S25 = (float)((float)(v51 * _S5) + (float)(_S4 * v48)) + (float)(_S6 * v50);
          v107 = (float)((float)(v53 * _S5) + (float)(_S4 * v52)) + (float)(_S6 * v54);
          _S4 = (float)((float)(v56 * _S5) + (float)(_S4 * v55)) + (float)(_S6 * v57);
          v109 = (float)(v51 * _S24) + (float)(_S7 * v48);
          v110 = (float)(v53 * _S24) + (float)(_S7 * v52);
          v111 = (float)(v56 * _S24) + (float)(_S7 * v55);
          LOWORD(_S24) = *(_WORD *)(v62 + 2 * v105);
          __asm { FCVT            S24, H24 }
          _S5 = v109 + (float)(_S24 * v50);
          v114 = v110 + (float)(_S24 * v54);
          LOWORD(_S25) = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(_S25, 0.0), 8191.0)));
          v115 = v111 + (float)(_S24 * v57);
          __asm { FCVT            S24, H25 }
          LOWORD(_S25) = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v107, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          LOWORD(_S4) = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(_S4, 0.0), 8191.0)));
          __asm { FCVT            S26, H4 }
          LOWORD(_S4) = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          LOWORD(_S5) = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v114, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          v121 = llroundf(fminf(fmaxf(v115, 0.0), 8191.0));
          v122 = (float)(v45 * _S25) + (float)(v44 * _S24);
          _S6 = _S24 + _S4;
          v124 = _S25 + _S5;
          v125 = (float)(v40 + (float)((float)(_S24 + _S4) * v143)) + (float)(v124 * v142);
          v126 = (float)(v40 + (float)(_S6 * v140)) + (float)(v124 * v47);
          LOWORD(_S6) = *(_WORD *)(v61 + 2 * v121);
          __asm { FCVT            S6, H6 }
          v128 = v122 + (float)(v46 * _S26);
          v129 = v125 + (float)((float)(_S26 + _S6) * v141);
          v130 = v126 + (float)((float)(_S26 + _S6) * v49);
          if (v129 < v39)
            v131 = v39;
          else
            v131 = v129;
          v83 = v129 <= v41;
          v132 = v128 + v39;
          if (!v83)
            v131 = v41;
          v133 = llroundf(v131);
          if (v132 < v42)
            v134 = v42;
          else
            v134 = v128 + v39;
          *v71 = v133;
          if (v132 <= v43)
            v135 = v134;
          else
            v135 = v43;
          v71[1] = llroundf(v135);
          v136 = v41;
          if (v130 <= v41)
          {
            v136 = v130;
            if (v130 < v39)
              v136 = v39;
          }
          v137 = (float)((float)((float)(v45 * _S5) + (float)(v44 * _S4)) + (float)(v46 * _S6)) + v39;
          v71[2] = llroundf(v136);
          v138 = v43;
          if (v137 <= v43)
          {
            v138 = v137;
            if (v137 < v42)
              v138 = v42;
          }
          v71[3] = llroundf(v138);
          if (v70)
            *v70++ = 0;
          v68 += 2;
          v69 += 2;
          v71 += 4;
        }
        while (v21 > v68);
      }
      result = (_QWORD *)((char *)result + v28);
      v66 += v29;
      v64 += v33;
      ++v20;
    }
    while (v20 != v24);
    if (v31 && v19)
    {
      v139 = 2 * v21;
      do
      {
        result = memcpy(v17, v32, v139);
        v32 += v30;
        v17 += v15;
        --v24;
      }
      while (v24);
    }
    else if (v19)
    {
      do
      {
        if (v21)
          result = memset(v17, 255, 2 * v21);
        v17 += v15;
        --v24;
      }
      while (v24);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_rgb_v216(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_rgb_v216_GCD);
  return 0;
}

unint64_t vt_Copy_xf422_rgb_v216_GCD(unint64_t result, uint64_t a2, double a3, double a4, double a5, float a6, float a7)
{
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  float v37;
  float v38;
  float v39;
  unsigned int v40;
  char *v41;
  uint64_t v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  unsigned __int16 *v66;
  _WORD *v67;
  _DWORD *v68;
  unsigned __int16 *v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  size_t v97;

  v12 = *(_QWORD *)(result + 28);
  v13 = *(unsigned __int8 *)result;
  v14 = v12 * a2 / v13;
  v15 = *(_QWORD *)(result + 112);
  v16 = *(_QWORD **)(result + 128);
  v17 = *(_QWORD *)(result + 104) * a2 / v13 + *(_QWORD *)(result + 120);
  v18 = *(uint64_t **)(result + 136);
  v19 = v18[1];
  v20 = v16[1];
  v21 = (char *)(v20 + v19 * v17 + 2 * v15);
  v22 = (v12 + v12 * a2) / v13;
  if (v20)
    v23 = v20 + v19 * v17 + 2 * v15;
  else
    v23 = 0;
  if (v22 != v14)
  {
    v24 = 0;
    v25 = *(_QWORD *)(result + 20);
    v26 = *(_QWORD *)(result + 36);
    v27 = v14 + *(_QWORD *)(result + 44);
    v28 = v22 - v14;
    v29 = *(_QWORD *)(result + 152);
    v30 = *(_QWORD **)(result + 56);
    v31 = *(uint64_t **)(result + 64);
    v32 = *v31;
    v33 = v31[1];
    v34 = v31[2];
    v35 = v30[2];
    LOWORD(a6) = *(_WORD *)(v29 + 140);
    LOWORD(a7) = *(_WORD *)(v29 + 142);
    v36 = (float)*(unsigned int *)(v29 + 136) / (float)*(unsigned int *)(v29 + 128);
    LOWORD(v7) = *(_WORD *)(v29 + 144);
    LOWORD(v8) = *(_WORD *)(v29 + 146);
    LOWORD(v9) = *(_WORD *)(v29 + 148);
    LOWORD(v10) = *(_WORD *)(v29 + 150);
    LOWORD(v11) = *(_WORD *)(v29 + 152);
    v37 = *(float *)(v29 + 36);
    v38 = *(float *)(v29 + 40);
    v39 = *(float *)(v29 + 44);
    v40 = *(unsigned __int8 *)(v29 + 124);
    v41 = (char *)(v35 + v34 * v27 + 2 * v26);
    v42 = *v18;
    v43 = (float)LODWORD(a6);
    v44 = (float)LODWORD(a7);
    v45 = v36 * *(float *)v29;
    v46 = v36 * *(float *)(v29 + 8);
    v47 = v36 * *(float *)(v29 + 16);
    v48 = v36 * *(float *)(v29 + 20);
    v49 = v36 * *(float *)(v29 + 28);
    v50 = (float)v7;
    v51 = (float)v8;
    v52 = (float)v9;
    v53 = (float)v10;
    v54 = (float)v11;
    v55 = *(float *)(v29 + 48) * 0.5;
    v56 = *(float *)(v29 + 52) * 0.5;
    v57 = *(float *)(v29 + 56) * 0.5;
    v58 = *(float *)(v29 + 60) * 0.5;
    v59 = *(float *)(v29 + 64) * 0.5;
    v60 = *(float *)(v29 + 68) * 0.5;
    if (v40 >= 0x11)
      result = 0;
    else
      result = 16 - v40;
    v61 = *v16 + v42 * v17 + 2 * v15;
    v62 = v30[1];
    if (v62)
      v63 = v62 + v33 * v27 + 2 * v26;
    else
      v63 = 0;
    v64 = *v30 + v32 * v27 + 2 * v26;
    v65 = result;
    do
    {
      if (v25)
      {
        result = 0;
        v66 = (unsigned __int16 *)v64;
        v67 = (_WORD *)v61;
        v68 = (_DWORD *)v23;
        do
        {
          v69 = (unsigned __int16 *)(v63 + 2 * result);
          v70 = (float)(*v69 >> v65) - v44;
          v71 = (float)(v69[1] >> v65) - v44;
          v72 = v46 * v71;
          v73 = (float)(v48 * v71) + (float)(v70 * v47);
          v74 = v49 * v70;
          v75 = v45 * (float)((float)(*v66 >> v65) - v43);
          v76 = v45 * (float)((float)(v66[1] >> v65) - v43);
          v77 = v72 + v75;
          v78 = v75 + v73;
          v79 = v74 + v75;
          v80 = v72 + v76;
          v81 = v73 + v76;
          v82 = v74 + v76;
          v83 = (float)((float)((float)(v38 * v78) + (float)(v37 * v77)) + (float)(v39 * v79)) + v50;
          v84 = (float)((float)((float)(v38 * v81) + (float)(v37 * v80)) + (float)(v39 * v82)) + v50;
          v85 = v77 + v80;
          v86 = v78 + v81;
          v87 = (float)(v51 + (float)(v85 * v55)) + (float)(v86 * v56);
          v88 = v79 + v82;
          v89 = v87 + (float)(v88 * v57);
          v90 = (float)(v51 + (float)(v85 * v58)) + (float)(v86 * v59);
          if (v89 < v50)
            v91 = v50;
          else
            v91 = v87 + (float)(v88 * v57);
          if (v89 > v52)
            v91 = v52;
          v92 = v90 + (float)(v88 * v60);
          *v67 = llroundf(v91);
          if (v83 < v53)
            v93 = v53;
          else
            v93 = v83;
          if (v83 > v54)
            v93 = v54;
          v67[1] = llroundf(v93);
          if (v92 < v50)
            v94 = v50;
          else
            v94 = v92;
          if (v92 <= v52)
            v95 = v94;
          else
            v95 = v52;
          v67[2] = llroundf(v95);
          v96 = v54;
          if (v84 <= v54)
          {
            v96 = v84;
            if (v84 < v53)
              v96 = v53;
          }
          v67[3] = llroundf(v96);
          if (v68)
            *v68++ = 0;
          result += 2;
          v66 += 2;
          v67 += 4;
        }
        while (v25 > result);
      }
      v64 += v32;
      v63 += v33;
      v61 += v42;
      ++v24;
    }
    while (v24 != v28);
    if (v35 && v23)
    {
      v97 = 2 * v25;
      do
      {
        result = (unint64_t)memcpy(v21, v41, v97);
        v41 += v34;
        v21 += v19;
        --v28;
      }
      while (v28);
    }
    else if (v23)
    {
      do
      {
        if (v25)
          result = (unint64_t)memset(v21, 255, 2 * v25);
        v21 += v19;
        --v28;
      }
      while (v28);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Tone_Mat_TRC_444vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Tone_Mat_TRC_444vf_GCD);
  return 0;
}

_QWORD *vt_Copy_xf422_TRC_Tone_Mat_TRC_444vf_GCD(_QWORD *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  float v31;
  float v32;
  float v33;
  unsigned int v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  uint64_t v52;
  unsigned int v53;
  char v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE *v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  float v67;
  float v68;
  float v69;
  float v70;
  size_t v71;
  unsigned __int16 *v72;
  _BYTE *v73;
  _BYTE *v74;
  unsigned __int16 *v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  BOOL v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v108;
  float v109;
  float v110;
  float v115;
  float v116;
  float v118;
  float v119;
  float v120;
  float v124;
  float v125;
  float v126;
  float v127;
  float v129;
  float v130;
  float v131;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  uint64_t v153;
  size_t v154;
  _BYTE *v155;
  unsigned __int16 *v156;
  unsigned int v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;

  v5 = *(_QWORD *)((char *)result + 28);
  v6 = *(unsigned __int8 *)result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)((char *)result + 20);
    v11 = *(_QWORD *)((char *)result + 36);
    v12 = v7 + *(_QWORD *)((char *)result + 44);
    v13 = v8 - v7;
    v14 = result[14];
    v15 = (_QWORD *)result[16];
    v16 = result[13] * a2 / v6 + result[15];
    v17 = result[19];
    v18 = (uint64_t *)result[7];
    v19 = (uint64_t *)result[8];
    v20 = (uint64_t *)result[17];
    v21 = *v19;
    v22 = v19[1];
    v23 = v19[2];
    v24 = v18[2];
    v25 = v24 + v23 * v12 + 2 * v11;
    v26 = *v20;
    v27 = v20[1];
    v28 = v20[2];
    v29 = v15[2];
    v30 = (_BYTE *)(v29 + v28 * v16 + v14);
    LOWORD(a4) = *(_WORD *)(v17 + 140);
    LOWORD(a5) = *(_WORD *)(v17 + 142);
    v31 = 8191.0 / (float)*(unsigned int *)(v17 + 128);
    v32 = (float)LODWORD(a5);
    v169 = v31 * *(float *)v17;
    v170 = (float)LODWORD(a4);
    v160 = v31 * *(float *)(v17 + 16);
    v161 = v31 * *(float *)(v17 + 8);
    v33 = v31 * *(float *)(v17 + 20);
    *(float *)&v34 = v31 * *(float *)(v17 + 28);
    v158 = *(float *)&v34;
    v159 = v33;
    LOWORD(v34) = *(_WORD *)(v17 + 144);
    v35 = (float)v34;
    LOWORD(v34) = *(_WORD *)(v17 + 146);
    v36 = (float)v34;
    LOWORD(v34) = *(_WORD *)(v17 + 148);
    v37 = (float)v34;
    LOWORD(v34) = *(_WORD *)(v17 + 150);
    v38 = (float)v34;
    LOWORD(v34) = *(_WORD *)(v17 + 152);
    v39 = (float)v34;
    v40 = *(float *)(v17 + 36);
    v41 = *(float *)(v17 + 40);
    v42 = *(float *)(v17 + 44);
    v167 = *(float *)(v17 + 48);
    v168 = v38;
    v165 = *(float *)(v17 + 56);
    v166 = *(float *)(v17 + 52);
    v163 = *(float *)(v17 + 64);
    v164 = *(float *)(v17 + 60);
    v43 = *(float *)(v17 + 72);
    v162 = *(float *)(v17 + 68);
    v45 = *(float *)(v17 + 76);
    v44 = *(float *)(v17 + 80);
    v46 = *(float *)(v17 + 84);
    v47 = *(float *)(v17 + 88);
    v48 = *(float *)(v17 + 92);
    v49 = *(float *)(v17 + 96);
    v50 = *(float *)(v17 + 100);
    v51 = *(float *)(v17 + 104);
    v52 = v17 + 164;
    result = (_QWORD *)(v17 + 16548);
    v53 = *(unsigned __int8 *)(v17 + 124);
    if (v53 >= 0x11)
      v54 = 0;
    else
      v54 = 16 - v53;
    v55 = v15[1];
    _ZF = v55 == 0;
    v57 = v55 + v27 * v16;
    v58 = *v15 + v26 * v16;
    v59 = v17 + 32932;
    v60 = (_BYTE *)(v57 + v14);
    if (_ZF)
      v60 = 0;
    v61 = (_BYTE *)(v58 + v14);
    v63 = *v18;
    v62 = v18[1];
    v64 = v62 + v22 * v12 + 2 * v11;
    if (!v62)
      v64 = 0;
    v65 = v63 + v21 * v12 + 2 * v11;
    v66 = v54;
    v68 = *(float *)(v17 + 108);
    v67 = *(float *)(v17 + 112);
    v69 = *(float *)(v17 + 116);
    v70 = *(float *)(v17 + 120);
    do
    {
      if (v10)
      {
        v71 = 0;
        v72 = (unsigned __int16 *)v65;
        v73 = v61;
        v74 = v60;
        do
        {
          v75 = (unsigned __int16 *)(v64 + 2 * v71);
          v76 = (float)(v75[1] >> v66) - v32;
          v77 = v161 * v76;
          v78 = v169 * (float)((float)(*v72 >> v66) - v170);
          v79 = (float)(v161 * v76) + v78;
          v80 = 8191.0;
          if (v79 <= 8191.0)
          {
            v80 = (float)(v161 * v76) + v78;
            if (v79 < 0.0)
              v80 = 0.0;
          }
          v81 = v32;
          v82 = (float)(*v75 >> v66) - v32;
          v83 = (float)(v159 * v76) + (float)(v82 * v160);
          v84 = 8191.0;
          if ((float)(v78 + v83) <= 8191.0)
          {
            v84 = v78 + v83;
            if ((float)(v78 + v83) < 0.0)
              v84 = 0.0;
          }
          v85 = v158 * v82;
          v86 = v85 + v78;
          v87 = (float)(v85 + v78) <= 8191.0;
          v88 = 8191.0;
          if (v87)
          {
            v88 = v86;
            if (v86 < 0.0)
              v88 = 0.0;
          }
          v89 = v169 * (float)((float)(v72[1] >> v66) - v170);
          v90 = v77 + v89;
          v87 = (float)(v77 + v89) <= 8191.0;
          v91 = 8191.0;
          if (v87)
          {
            v91 = v90;
            if (v90 < 0.0)
              v91 = 0.0;
          }
          v92 = v83 + v89;
          v87 = (float)(v83 + v89) <= 8191.0;
          v93 = 8191.0;
          if (v87)
          {
            v93 = v92;
            if (v92 < 0.0)
              v93 = 0.0;
          }
          v94 = v85 + v89;
          v87 = (float)(v85 + v89) <= 8191.0;
          v95 = 8191.0;
          if (v87)
          {
            v95 = v94;
            if (v94 < 0.0)
              v95 = 0.0;
          }
          _H0 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S1, H0 }
          _H0 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm { FCVT            S2, H0 }
          _H0 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          __asm { FCVT            S26, H0 }
          _H19 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          _H28 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v95, 0.0), 8191.0)));
          v108 = fmaxf(_S1, fmaxf(_S2, _S26));
          v109 = (float)((float)((float)(v67 * _S2) + (float)(v68 * _S1)) + (float)(v69 * _S26)) + (float)(v70 * v108);
          v110 = 8191.0;
          if (v109 <= 8191.0)
          {
            v110 = (float)((float)((float)(v67 * _S2) + (float)(v68 * _S1)) + (float)(v69 * _S26)) + (float)(v70 * v108);
            if (v109 < 0.0)
              v110 = 0.0;
          }
          __asm
          {
            FCVT            S27, H19
            FCVT            S28, H28
            FCVT            S29, H29
          }
          _H19 = *((_WORD *)result + llroundf(v110));
          v115 = (float)((float)((float)(v67 * _S28) + (float)(v68 * _S27)) + (float)(v69 * _S29))
               + (float)(v70 * fmaxf(_S27, fmaxf(_S28, _S29)));
          v116 = 8191.0;
          if (v115 <= 8191.0)
          {
            v116 = v115;
            if (v115 < 0.0)
              v116 = 0.0;
          }
          __asm { FCVT            S0, H19 }
          v118 = _S1 * _S0;
          v119 = _S2 * _S0;
          v120 = _S26 * _S0;
          _H19 = *((_WORD *)result + llroundf(v116));
          __asm { FCVT            S19, H19 }
          _S24 = _S27 * _S19;
          v124 = _S28 * _S19;
          v125 = _S29 * _S19;
          v126 = (float)((float)(v45 * v119) + (float)(v118 * v43)) + (float)(v120 * v44);
          v127 = (float)((float)(v47 * v119) + (float)(v118 * v46)) + (float)(v120 * v48);
          _S0 = (float)((float)(v50 * v119) + (float)(v118 * v49)) + (float)(v120 * v51);
          v129 = (float)((float)(v45 * v124) + (float)(_S24 * v43)) + (float)(v125 * v44);
          v130 = (float)((float)(v47 * v124) + (float)(_S24 * v46)) + (float)(v125 * v48);
          v131 = (float)((float)(v50 * v124) + (float)(_S24 * v49)) + (float)(v125 * v51);
          LOWORD(_S24) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v126, 0.0), 8191.0)));
          __asm { FCVT            S27, H24 }
          LOWORD(_S24) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v127, 0.0), 8191.0)));
          __asm { FCVT            S28, H24 }
          LOWORD(_S0) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          __asm { FCVT            S29, H0 }
          _H0 = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v129, 0.0), 8191.0)));
          _H24 = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v130, 0.0), 8191.0)));
          _H26 = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v131, 0.0), 8191.0)));
          v138 = (float)((float)((float)(v41 * _S28) + (float)(v40 * _S27)) + (float)(v42 * _S29)) + v35;
          v139 = v37;
          if (v138 <= v37)
          {
            v139 = (float)((float)((float)(v41 * _S28) + (float)(v40 * _S27)) + (float)(v42 * _S29)) + v35;
            if (v138 < v35)
              v139 = v35;
          }
          *v73 = llroundf(v139);
          if (v74)
          {
            v140 = (float)((float)(v36 + (float)(_S27 * v167)) + (float)(_S28 * v166)) + (float)(_S29 * v165);
            v141 = v39;
            if (v140 <= v39)
            {
              v141 = (float)((float)(v36 + (float)(_S27 * v167)) + (float)(_S28 * v166)) + (float)(_S29 * v165);
              if (v140 < v168)
                v141 = v168;
            }
            v142 = (float)((float)(v36 + (float)(_S27 * v164)) + (float)(_S28 * v163)) + (float)(_S29 * v162);
            *v74 = llroundf(v141);
            v143 = v39;
            if (v142 <= v39)
            {
              v143 = (float)((float)(v36 + (float)(_S27 * v164)) + (float)(_S28 * v163)) + (float)(_S29 * v162);
              if (v142 < v168)
                v143 = v168;
            }
            v74[1] = llroundf(v143);
            v74 += 2;
          }
          v32 = v81;
          __asm
          {
            FCVT            S0, H0
            FCVT            S2, H24
            FCVT            S26, H26
          }
          v147 = (float)((float)((float)(v41 * _S2) + (float)(v40 * _S0)) + (float)(v42 * _S26)) + v35;
          v148 = v37;
          if (v147 <= v37)
          {
            v148 = (float)((float)((float)(v41 * _S2) + (float)(v40 * _S0)) + (float)(v42 * _S26)) + v35;
            if (v147 < v35)
              v148 = v35;
          }
          v73[1] = llroundf(v148);
          if (v74)
          {
            v149 = (float)((float)(v36 + (float)(_S0 * v167)) + (float)(_S2 * v166)) + (float)(_S26 * v165);
            v150 = v39;
            if (v149 <= v39)
            {
              v150 = (float)((float)(v36 + (float)(_S0 * v167)) + (float)(_S2 * v166)) + (float)(_S26 * v165);
              if (v149 < v168)
                v150 = v168;
            }
            v151 = (float)((float)(v36 + (float)(_S0 * v164)) + (float)(_S2 * v163)) + (float)(_S26 * v162);
            *v74 = llroundf(v150);
            v152 = v39;
            if (v151 <= v39)
            {
              v152 = v151;
              if (v151 < v168)
                v152 = v168;
            }
            v74[1] = llroundf(v152);
            v74 += 2;
          }
          v71 += 2;
          v72 += 2;
          v73 += 2;
        }
        while (v10 > v71);
      }
      v65 += v21;
      v64 += v22;
      v61 += v26;
      v60 += v27;
      ++v9;
    }
    while (v9 != v13);
    if (v24 && v29)
    {
      v153 = 0;
      do
      {
        if (v10)
        {
          v154 = v10;
          v155 = v30;
          v156 = (unsigned __int16 *)v25;
          do
          {
            v157 = *v156++;
            *v155++ = llroundf((float)v157 * 0.0038911);
            --v154;
          }
          while (v154);
        }
        v25 += v23;
        v30 += v28;
        ++v153;
      }
      while (v153 != v13);
    }
    else if (v29)
    {
      do
      {
        if (v10)
          result = memset(v30, 255, v10);
        v30 += v28;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Mat_TRC_444vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Mat_TRC_444vf_GCD);
  return 0;
}

_QWORD *vt_Copy_xf422_TRC_Mat_TRC_444vf_GCD(_QWORD *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  float v33;
  float v34;
  float v35;
  float v36;
  unsigned int v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  uint64_t v56;
  unsigned int v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  size_t v68;
  unsigned __int16 *v69;
  _BYTE *v70;
  _BYTE *v71;
  unsigned __int16 *v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  BOOL v88;
  float v89;
  float v90;
  float v91;
  unsigned int v92;
  float v93;
  float v104;
  float v105;
  float v110;
  float v111;
  float v118;
  float v119;
  float v120;
  float v124;
  float v125;
  float v126;
  float v127;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  uint64_t v137;
  size_t v138;
  _BYTE *v139;
  unsigned __int16 *v140;
  unsigned int v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;

  v6 = *(_QWORD *)((char *)result + 28);
  v7 = *(unsigned __int8 *)result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)((char *)result + 20);
    v12 = *(_QWORD *)((char *)result + 36);
    v13 = v8 + *(_QWORD *)((char *)result + 44);
    v14 = v9 - v8;
    v15 = result[14];
    v16 = result[13] * a2 / v7;
    v17 = (uint64_t *)result[16];
    v18 = v16 + result[15];
    v19 = result[19];
    v20 = (uint64_t *)result[7];
    v21 = (uint64_t *)result[8];
    v22 = (uint64_t *)result[17];
    v23 = *v21;
    v24 = v21[1];
    v25 = v21[2];
    v26 = v20[2];
    v27 = v26 + v25 * v13 + 2 * v12;
    v28 = *v22;
    v29 = v22[1];
    v30 = v22[2];
    v31 = v17[2];
    v32 = (_BYTE *)(v31 + v30 * v18 + v15);
    LOWORD(a5) = *(_WORD *)(v19 + 140);
    LOWORD(a6) = *(_WORD *)(v19 + 142);
    v33 = 8191.0 / (float)*(unsigned int *)(v19 + 128);
    v34 = (float)LODWORD(a5);
    v35 = (float)LODWORD(a6);
    v36 = v33 * *(float *)v19;
    v144 = v33 * *(float *)(v19 + 16);
    v145 = v33 * *(float *)(v19 + 8);
    v142 = v33 * *(float *)(v19 + 28);
    *(float *)&v37 = v142;
    v143 = v33 * *(float *)(v19 + 20);
    LOWORD(v37) = *(_WORD *)(v19 + 144);
    v38 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v19 + 146);
    v39 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v19 + 148);
    v40 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v19 + 150);
    v41 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v19 + 152);
    v42 = (float)v37;
    v43 = *(float *)(v19 + 36);
    v44 = *(float *)(v19 + 40);
    v45 = *(float *)(v19 + 44);
    v149 = *(float *)(v19 + 52);
    v150 = *(float *)(v19 + 48);
    v147 = *(float *)(v19 + 60);
    v148 = *(float *)(v19 + 56);
    v46 = *(float *)(v19 + 68);
    v146 = *(float *)(v19 + 64);
    v47 = *(float *)(v19 + 72);
    v48 = *(float *)(v19 + 76);
    v49 = *(float *)(v19 + 80);
    v50 = *(float *)(v19 + 84);
    v51 = *(float *)(v19 + 88);
    v52 = *(float *)(v19 + 92);
    v53 = *(float *)(v19 + 96);
    v54 = *(float *)(v19 + 100);
    v55 = *(float *)(v19 + 104);
    v56 = v19 + 164;
    result = (_QWORD *)(v19 + 16548);
    v57 = *(unsigned __int8 *)(v19 + 124);
    if (v57 >= 0x11)
      v58 = 0;
    else
      v58 = 16 - v57;
    v60 = *v17;
    v59 = v17[1];
    v61 = (_BYTE *)(v59 + v29 * v18 + v15);
    if (!v59)
      v61 = 0;
    v62 = (_BYTE *)(v60 + v28 * v18 + v15);
    v64 = *v20;
    v63 = v20[1];
    v65 = v63 + v24 * v13 + 2 * v12;
    if (!v63)
      v65 = 0;
    v66 = v64 + v23 * v13 + 2 * v12;
    v67 = v58;
    do
    {
      if (v11)
      {
        v68 = 0;
        v69 = (unsigned __int16 *)v66;
        v70 = v62;
        v71 = v61;
        do
        {
          v72 = (unsigned __int16 *)(v65 + 2 * v68);
          v73 = (float)(v72[1] >> v67) - v35;
          v74 = v145 * v73;
          v75 = v36 * (float)((float)(*v69 >> v67) - v34);
          v76 = (float)(v145 * v73) + v75;
          v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            v77 = (float)(v145 * v73) + v75;
            if (v76 < 0.0)
              v77 = 0.0;
          }
          v78 = (float)(*v72 >> v67) - v35;
          v79 = (float)(v143 * v73) + (float)(v78 * v144);
          v80 = 8191.0;
          if ((float)(v75 + v79) <= 8191.0)
          {
            v80 = v75 + v79;
            if ((float)(v75 + v79) < 0.0)
              v80 = 0.0;
          }
          v81 = v142 * v78;
          v82 = (float)(v142 * v78) + v75;
          v83 = 8191.0;
          if (v82 <= 8191.0)
          {
            v83 = v82;
            if (v82 < 0.0)
              v83 = 0.0;
          }
          v84 = v36 * (float)((float)(v69[1] >> v67) - v34);
          v85 = v74 + v84;
          v86 = 8191.0;
          if (v85 <= 8191.0)
          {
            v86 = v85;
            if (v85 < 0.0)
              v86 = 0.0;
          }
          v87 = v79 + v84;
          v88 = (float)(v79 + v84) <= 8191.0;
          v89 = 8191.0;
          if (v88)
          {
            v89 = v87;
            if (v87 < 0.0)
              v89 = 0.0;
          }
          v90 = v81 + v84;
          if ((float)(v81 + v84) < 0.0)
            v91 = 0.0;
          else
            v91 = v81 + v84;
          v92 = llroundf(fminf(fmaxf(v77, 0.0), 8191.0));
          if (v90 <= 8191.0)
            v93 = v91;
          else
            v93 = 8191.0;
          _H4 = *(_WORD *)(v56 + 2 * v92);
          __asm { FCVT            S4, H4 }
          _H5 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H6 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          v104 = (float)((float)(v48 * _S5) + (float)(_S4 * v47)) + (float)(_S6 * v49);
          v105 = (float)((float)(v51 * _S5) + (float)(_S4 * v50)) + (float)(_S6 * v52);
          _S5 = (float)((float)(v54 * _S5) + (float)(_S4 * v53)) + (float)(_S6 * v55);
          LOWORD(_S4) = *((_WORD *)result + llroundf(fminf(fmaxf(v104, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          LOWORD(_S6) = *((_WORD *)result + llroundf(fminf(fmaxf(v105, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          LOWORD(_S5) = *((_WORD *)result + llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S7, H5 }
          v110 = (float)((float)((float)(v44 * _S6) + (float)(v43 * _S4)) + (float)(v45 * _S7)) + v38;
          v111 = v40;
          if (v110 <= v40)
          {
            v111 = (float)((float)((float)(v44 * _S6) + (float)(v43 * _S4)) + (float)(v45 * _S7)) + v38;
            if (v110 < v38)
              v111 = v38;
          }
          _H5 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H24 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          _H25 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          v118 = (float)((float)(v48 * _S24) + (float)(_S5 * v47)) + (float)(_S25 * v49);
          v119 = (float)((float)(v51 * _S24) + (float)(_S5 * v50)) + (float)(_S25 * v52);
          v120 = (float)((float)(v54 * _S24) + (float)(_S5 * v53)) + (float)(_S25 * v55);
          _H5 = *((_WORD *)result + llroundf(fminf(fmaxf(v118, 0.0), 8191.0)));
          _H24 = *((_WORD *)result + llroundf(fminf(fmaxf(v119, 0.0), 8191.0)));
          _H25 = *((_WORD *)result + llroundf(fminf(fmaxf(v120, 0.0), 8191.0)));
          *v70 = llroundf(v111);
          if (v71)
          {
            v124 = (float)((float)(v39 + (float)(_S4 * v150)) + (float)(_S6 * v149)) + (float)(_S7 * v148);
            v125 = v42;
            if (v124 <= v42)
            {
              v125 = (float)((float)(v39 + (float)(_S4 * v150)) + (float)(_S6 * v149)) + (float)(_S7 * v148);
              if (v124 < v41)
                v125 = v41;
            }
            v126 = (float)((float)(v39 + (float)(_S4 * v147)) + (float)(_S6 * v146)) + (float)(_S7 * v46);
            *v71 = llroundf(v125);
            v127 = v42;
            if (v126 <= v42)
            {
              v127 = v126;
              if (v126 < v41)
                v127 = v41;
            }
            v71[1] = llroundf(v127);
            v71 += 2;
          }
          __asm
          {
            FCVT            S4, H5
            FCVT            S5, H24
            FCVT            S6, H25
          }
          v131 = (float)((float)((float)(v44 * _S5) + (float)(v43 * _S4)) + (float)(v45 * _S6)) + v38;
          v132 = v40;
          if (v131 <= v40)
          {
            v132 = (float)((float)((float)(v44 * _S5) + (float)(v43 * _S4)) + (float)(v45 * _S6)) + v38;
            if (v131 < v38)
              v132 = v38;
          }
          v70[1] = llroundf(v132);
          if (v71)
          {
            v133 = (float)((float)(v39 + (float)(_S4 * v150)) + (float)(_S5 * v149)) + (float)(_S6 * v148);
            v134 = v42;
            if (v133 <= v42)
            {
              v134 = (float)((float)(v39 + (float)(_S4 * v150)) + (float)(_S5 * v149)) + (float)(_S6 * v148);
              if (v133 < v41)
                v134 = v41;
            }
            v135 = (float)((float)(v39 + (float)(_S4 * v147)) + (float)(_S5 * v146)) + (float)(_S6 * v46);
            *v71 = llroundf(v134);
            v136 = v42;
            if (v135 <= v42)
            {
              v136 = v135;
              if (v135 < v41)
                v136 = v41;
            }
            v71[1] = llroundf(v136);
            v71 += 2;
          }
          v68 += 2;
          v69 += 2;
          v70 += 2;
        }
        while (v11 > v68);
      }
      v66 += v23;
      v65 += v24;
      v62 += v28;
      v61 += v29;
      ++v10;
    }
    while (v10 != v14);
    if (v26 && v31)
    {
      v137 = 0;
      do
      {
        if (v11)
        {
          v138 = v11;
          v139 = v32;
          v140 = (unsigned __int16 *)v27;
          do
          {
            v141 = *v140++;
            *v139++ = llroundf((float)v141 * 0.0038911);
            --v138;
          }
          while (v138);
        }
        v27 += v25;
        v32 += v30;
        ++v137;
      }
      while (v137 != v14);
    }
    else if (v31)
    {
      do
      {
        if (v11)
          result = memset(v32, 255, v11);
        v32 += v30;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_rgb_444vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_rgb_444vf_GCD);
  return 0;
}

_QWORD *vt_Copy_xf422_rgb_444vf_GCD(_QWORD *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  unsigned int v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  size_t v69;
  unsigned __int16 *v70;
  _BYTE *v71;
  _BYTE *v72;
  unsigned __int16 *v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  unsigned int v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  uint64_t v100;
  size_t v101;
  _BYTE *v102;
  unsigned __int16 *v103;
  unsigned int v104;

  v10 = *(_QWORD *)((char *)result + 28);
  v11 = *(unsigned __int8 *)result;
  v12 = v10 * a2 / v11;
  v13 = (v10 + v10 * a2) / v11;
  if (v13 != v12)
  {
    v14 = 0;
    v15 = *(_QWORD *)((char *)result + 20);
    v16 = *(_QWORD *)((char *)result + 36);
    v17 = v12 + *(_QWORD *)((char *)result + 44);
    v18 = v13 - v12;
    v19 = result[14];
    v20 = (uint64_t *)result[16];
    v21 = result[13] * a2 / v11 + result[15];
    v22 = result[19];
    v23 = (uint64_t *)result[7];
    v24 = (uint64_t *)result[8];
    v25 = (uint64_t *)result[17];
    v26 = *v24;
    v27 = v24[1];
    v28 = v24[2];
    v29 = v23[2];
    v30 = v29 + v28 * v17 + 2 * v16;
    v31 = *v25;
    v32 = v25[1];
    v33 = v25[2];
    v34 = v20[2];
    v35 = (_BYTE *)(v34 + v33 * v21 + v19);
    LOWORD(a5) = *(_WORD *)(v22 + 140);
    LOWORD(a6) = *(_WORD *)(v22 + 142);
    v36 = (float)*(unsigned int *)(v22 + 136) / (float)*(unsigned int *)(v22 + 128);
    v37 = (float)LODWORD(a5);
    v38 = (float)LODWORD(a6);
    v39 = v36 * *(float *)v22;
    v40 = v36 * *(float *)(v22 + 8);
    v41 = v36 * *(float *)(v22 + 16);
    v42 = v36 * *(float *)(v22 + 20);
    v43 = *(float *)(v22 + 28);
    v44 = v36 * v43;
    LOWORD(v43) = *(_WORD *)(v22 + 144);
    v45 = (float)LODWORD(v43);
    LOWORD(v6) = *(_WORD *)(v22 + 146);
    v46 = (float)v6;
    LOWORD(v7) = *(_WORD *)(v22 + 148);
    v47 = (float)v7;
    LOWORD(v8) = *(_WORD *)(v22 + 150);
    v48 = (float)v8;
    LOWORD(v9) = *(_WORD *)(v22 + 152);
    v49 = (float)v9;
    v50 = *(float *)(v22 + 36);
    v51 = *(float *)(v22 + 40);
    v52 = *(float *)(v22 + 44);
    v53 = *(float *)(v22 + 48);
    v54 = *(float *)(v22 + 52);
    v55 = *(float *)(v22 + 56);
    v56 = *(float *)(v22 + 60);
    v57 = *(float *)(v22 + 64);
    v58 = *(float *)(v22 + 68);
    v59 = *(unsigned __int8 *)(v22 + 124);
    v60 = 16 - v59;
    if (v59 >= 0x11)
      v60 = 0;
    v62 = *v20;
    v61 = v20[1];
    v63 = (_BYTE *)(v61 + v32 * v21 + v19);
    if (!v61)
      v63 = 0;
    result = (_QWORD *)(v62 + v31 * v21 + v19);
    v65 = *v23;
    v64 = v23[1];
    v66 = v64 + v27 * v17 + 2 * v16;
    if (!v64)
      v66 = 0;
    v67 = v65 + v26 * v17 + 2 * v16;
    v68 = v60;
    do
    {
      if (v15)
      {
        v69 = 0;
        v70 = (unsigned __int16 *)v67;
        v71 = result;
        v72 = v63;
        do
        {
          v73 = (unsigned __int16 *)(v66 + 2 * v69);
          v74 = (float)(*v73 >> v68) - v38;
          v75 = (float)(v73[1] >> v68) - v38;
          v76 = v40 * v75;
          v77 = (float)(v42 * v75) + (float)(v74 * v41);
          v78 = v44 * v74;
          v79 = v39 * (float)((float)(*v70 >> v68) - v37);
          v80 = v76 + v79;
          v81 = v79 + v77;
          v82 = v78 + v79;
          v83 = (float)((float)((float)(v51 * v81) + (float)(v50 * v80)) + (float)(v52 * v82)) + v45;
          v84 = v47;
          if (v83 <= v47)
          {
            v84 = (float)((float)((float)(v51 * v81) + (float)(v50 * v80)) + (float)(v52 * v82)) + v45;
            if (v83 < v45)
              v84 = v45;
          }
          v85 = v70[1];
          *v71 = llroundf(v84);
          if (v72)
          {
            v86 = (float)((float)(v46 + (float)(v80 * v53)) + (float)(v81 * v54)) + (float)(v82 * v55);
            v87 = v49;
            if (v86 <= v49)
            {
              v87 = (float)((float)(v46 + (float)(v80 * v53)) + (float)(v81 * v54)) + (float)(v82 * v55);
              if (v86 < v48)
                v87 = v48;
            }
            v88 = (float)((float)(v46 + (float)(v80 * v56)) + (float)(v81 * v57)) + (float)(v82 * v58);
            *v72 = llroundf(v87);
            v89 = v49;
            if (v88 <= v49)
            {
              if (v88 < v48)
                v89 = v48;
              else
                v89 = v88;
            }
            v72[1] = llroundf(v89);
            v72 += 2;
          }
          v90 = v39 * (float)((float)(int)(v85 >> v68) - v37);
          v91 = v76 + v90;
          v92 = v77 + v90;
          v93 = v78 + v90;
          v94 = (float)((float)((float)(v51 * v92) + (float)(v50 * v91)) + (float)(v52 * v93)) + v45;
          v95 = v47;
          if (v94 <= v47)
          {
            v95 = (float)((float)((float)(v51 * v92) + (float)(v50 * v91)) + (float)(v52 * v93)) + v45;
            if (v94 < v45)
              v95 = v45;
          }
          v71[1] = llroundf(v95);
          if (v72)
          {
            v96 = (float)((float)(v46 + (float)(v91 * v53)) + (float)(v92 * v54)) + (float)(v93 * v55);
            v97 = v49;
            if (v96 <= v49)
            {
              v97 = (float)((float)(v46 + (float)(v91 * v53)) + (float)(v92 * v54)) + (float)(v93 * v55);
              if (v96 < v48)
                v97 = v48;
            }
            v98 = (float)((float)(v46 + (float)(v91 * v56)) + (float)(v92 * v57)) + (float)(v93 * v58);
            *v72 = llroundf(v97);
            v99 = v49;
            if (v98 <= v49)
            {
              v99 = v98;
              if (v98 < v48)
                v99 = v48;
            }
            v72[1] = llroundf(v99);
            v72 += 2;
          }
          v69 += 2;
          v70 += 2;
          v71 += 2;
        }
        while (v15 > v69);
      }
      v67 += v26;
      v66 += v27;
      result = (_QWORD *)((char *)result + v31);
      v63 += v32;
      ++v14;
    }
    while (v14 != v18);
    if (v29 && v34)
    {
      v100 = 0;
      do
      {
        if (v15)
        {
          v101 = v15;
          v102 = v35;
          v103 = (unsigned __int16 *)v30;
          do
          {
            v104 = *v103++;
            *v102++ = llroundf((float)v104 * 0.0038911);
            --v101;
          }
          while (v101);
        }
        v30 += v28;
        v35 += v33;
        ++v100;
      }
      while (v100 != v18);
    }
    else if (v34)
    {
      do
      {
        if (v15)
          result = memset(v35, 255, v15);
        v35 += v33;
        --v18;
      }
      while (v18);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Tone_Mat_TRC_xf444(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Tone_Mat_TRC_xf444_GCD);
  return 0;
}

_QWORD *vt_Copy_xf422_TRC_Tone_Mat_TRC_xf444_GCD(_QWORD *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  float v32;
  float v33;
  float v34;
  unsigned int v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  char v56;
  unsigned int v57;
  char v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _WORD *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  char v71;
  float v72;
  float v73;
  float v74;
  float v75;
  unint64_t v76;
  unsigned __int16 *v77;
  _WORD *v78;
  _WORD *v79;
  unsigned __int16 *v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  BOOL v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v113;
  float v114;
  float v115;
  float v120;
  float v121;
  float v123;
  float v124;
  float v125;
  float v129;
  float v130;
  float v131;
  float v132;
  float v134;
  float v135;
  float v136;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  size_t v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;

  v5 = *(_QWORD *)((char *)result + 28);
  v6 = *(unsigned __int8 *)result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)((char *)result + 20);
    v11 = *(_QWORD *)((char *)result + 36);
    v12 = v7 + *(_QWORD *)((char *)result + 44);
    v13 = v8 - v7;
    v14 = result[14];
    v15 = result[13] * a2 / v6;
    v16 = (_QWORD *)result[16];
    v17 = v15 + result[15];
    v18 = result[19];
    v19 = (_QWORD *)result[7];
    v20 = (uint64_t *)result[8];
    v21 = (uint64_t *)result[17];
    v22 = *v20;
    v23 = v20[1];
    v24 = v20[2];
    v25 = v19[2];
    v26 = (char *)(v25 + v24 * v12 + 2 * v11);
    v27 = *v21;
    v28 = v21[1];
    v29 = v21[2];
    v30 = v16[2];
    v31 = (char *)(v30 + v29 * v17 + 2 * v14);
    LOWORD(a4) = *(_WORD *)(v18 + 140);
    LOWORD(a5) = *(_WORD *)(v18 + 142);
    v32 = 8191.0 / (float)*(unsigned int *)(v18 + 128);
    v33 = (float)LODWORD(a5);
    v170 = v32 * *(float *)v18;
    v171 = (float)LODWORD(a4);
    v161 = v32 * *(float *)(v18 + 16);
    v162 = v32 * *(float *)(v18 + 8);
    v34 = v32 * *(float *)(v18 + 20);
    *(float *)&v35 = v32 * *(float *)(v18 + 28);
    v159 = *(float *)&v35;
    v160 = v34;
    LOWORD(v35) = *(_WORD *)(v18 + 144);
    v36 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v18 + 146);
    v37 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v18 + 148);
    v38 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v18 + 150);
    v39 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v18 + 152);
    v40 = (float)v35;
    v41 = *(float *)(v18 + 36);
    v42 = *(float *)(v18 + 40);
    v43 = *(float *)(v18 + 44);
    v168 = *(float *)(v18 + 48);
    v169 = v39;
    v166 = *(float *)(v18 + 56);
    v167 = *(float *)(v18 + 52);
    v164 = *(float *)(v18 + 64);
    v165 = *(float *)(v18 + 60);
    v44 = *(float *)(v18 + 72);
    v163 = *(float *)(v18 + 68);
    v46 = *(float *)(v18 + 76);
    v45 = *(float *)(v18 + 80);
    v47 = *(float *)(v18 + 84);
    v48 = *(float *)(v18 + 88);
    v49 = *(float *)(v18 + 92);
    v50 = *(float *)(v18 + 96);
    v51 = *(float *)(v18 + 100);
    v52 = *(float *)(v18 + 104);
    v53 = v18 + 164;
    v54 = v18 + 16548;
    v55 = *(unsigned __int8 *)(v18 + 132);
    v56 = 16 - v55;
    if (v55 >= 0x11)
      v56 = 0;
    v57 = *(unsigned __int8 *)(v18 + 124);
    v58 = 16 - v57;
    if (v57 >= 0x11)
      v58 = 0;
    v59 = v16[1];
    _ZF = v59 == 0;
    v61 = v59 + v28 * v17;
    v62 = *v16 + v27 * v17;
    v63 = v18 + 32932;
    result = (_QWORD *)(v61 + 2 * v14);
    if (_ZF)
      result = 0;
    v64 = (_WORD *)(v62 + 2 * v14);
    v67 = v19;
    v66 = *v19;
    v65 = v67[1];
    _ZF = v65 == 0;
    v68 = v65 + v23 * v12 + 2 * v11;
    if (_ZF)
      v68 = 0;
    v69 = v66 + v22 * v12 + 2 * v11;
    v70 = v58;
    v71 = v56;
    v73 = *(float *)(v18 + 108);
    v72 = *(float *)(v18 + 112);
    v74 = *(float *)(v18 + 116);
    v75 = *(float *)(v18 + 120);
    do
    {
      if (v10)
      {
        v76 = 0;
        v77 = (unsigned __int16 *)v69;
        v78 = v64;
        v79 = result;
        do
        {
          v80 = (unsigned __int16 *)(v68 + 2 * v76);
          v81 = (float)(v80[1] >> v70) - v33;
          v82 = v162 * v81;
          v83 = v170 * (float)((float)(*v77 >> v70) - v171);
          v84 = (float)(v162 * v81) + v83;
          v85 = 8191.0;
          if (v84 <= 8191.0)
          {
            v85 = (float)(v162 * v81) + v83;
            if (v84 < 0.0)
              v85 = 0.0;
          }
          v86 = v33;
          v87 = (float)(*v80 >> v70) - v33;
          v88 = (float)(v160 * v81) + (float)(v87 * v161);
          v89 = 8191.0;
          if ((float)(v83 + v88) <= 8191.0)
          {
            v89 = v83 + v88;
            if ((float)(v83 + v88) < 0.0)
              v89 = 0.0;
          }
          v90 = v159 * v87;
          v91 = v90 + v83;
          v92 = (float)(v90 + v83) <= 8191.0;
          v93 = 8191.0;
          if (v92)
          {
            v93 = v91;
            if (v91 < 0.0)
              v93 = 0.0;
          }
          v94 = v170 * (float)((float)(v77[1] >> v70) - v171);
          v95 = v82 + v94;
          v92 = (float)(v82 + v94) <= 8191.0;
          v96 = 8191.0;
          if (v92)
          {
            v96 = v95;
            if (v95 < 0.0)
              v96 = 0.0;
          }
          v97 = v88 + v94;
          v92 = (float)(v88 + v94) <= 8191.0;
          v98 = 8191.0;
          if (v92)
          {
            v98 = v97;
            if (v97 < 0.0)
              v98 = 0.0;
          }
          v99 = v90 + v94;
          v92 = (float)(v90 + v94) <= 8191.0;
          v100 = 8191.0;
          if (v92)
          {
            v100 = v99;
            if (v99 < 0.0)
              v100 = 0.0;
          }
          _H0 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          __asm { FCVT            S1, H0 }
          _H0 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          __asm { FCVT            S2, H0 }
          _H0 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          __asm { FCVT            S26, H0 }
          _H19 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v96, 0.0), 8191.0)));
          _H28 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v100, 0.0), 8191.0)));
          v113 = fmaxf(_S1, fmaxf(_S2, _S26));
          v114 = (float)((float)((float)(v72 * _S2) + (float)(v73 * _S1)) + (float)(v74 * _S26)) + (float)(v75 * v113);
          v115 = 8191.0;
          if (v114 <= 8191.0)
          {
            v115 = (float)((float)((float)(v72 * _S2) + (float)(v73 * _S1)) + (float)(v74 * _S26)) + (float)(v75 * v113);
            if (v114 < 0.0)
              v115 = 0.0;
          }
          __asm
          {
            FCVT            S27, H19
            FCVT            S28, H28
            FCVT            S29, H29
          }
          _H19 = *(_WORD *)(v54 + 2 * llroundf(v115));
          v120 = (float)((float)((float)(v72 * _S28) + (float)(v73 * _S27)) + (float)(v74 * _S29))
               + (float)(v75 * fmaxf(_S27, fmaxf(_S28, _S29)));
          v121 = 8191.0;
          if (v120 <= 8191.0)
          {
            v121 = v120;
            if (v120 < 0.0)
              v121 = 0.0;
          }
          __asm { FCVT            S0, H19 }
          v123 = _S1 * _S0;
          v124 = _S2 * _S0;
          v125 = _S26 * _S0;
          _H19 = *(_WORD *)(v54 + 2 * llroundf(v121));
          __asm { FCVT            S19, H19 }
          _S24 = _S27 * _S19;
          v129 = _S28 * _S19;
          v130 = _S29 * _S19;
          v131 = (float)((float)(v46 * v124) + (float)(v123 * v44)) + (float)(v125 * v45);
          v132 = (float)((float)(v48 * v124) + (float)(v123 * v47)) + (float)(v125 * v49);
          _S0 = (float)((float)(v51 * v124) + (float)(v123 * v50)) + (float)(v125 * v52);
          v134 = (float)((float)(v46 * v129) + (float)(_S24 * v44)) + (float)(v130 * v45);
          v135 = (float)((float)(v48 * v129) + (float)(_S24 * v47)) + (float)(v130 * v49);
          v136 = (float)((float)(v51 * v129) + (float)(_S24 * v50)) + (float)(v130 * v52);
          LOWORD(_S24) = *(_WORD *)(v63 + 2 * llroundf(fminf(fmaxf(v131, 0.0), 8191.0)));
          __asm { FCVT            S27, H24 }
          LOWORD(_S24) = *(_WORD *)(v63 + 2 * llroundf(fminf(fmaxf(v132, 0.0), 8191.0)));
          __asm { FCVT            S28, H24 }
          LOWORD(_S0) = *(_WORD *)(v63 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          __asm { FCVT            S29, H0 }
          _H0 = *(_WORD *)(v63 + 2 * llroundf(fminf(fmaxf(v134, 0.0), 8191.0)));
          _H24 = *(_WORD *)(v63 + 2 * llroundf(fminf(fmaxf(v135, 0.0), 8191.0)));
          _H26 = *(_WORD *)(v63 + 2 * llroundf(fminf(fmaxf(v136, 0.0), 8191.0)));
          v143 = (float)((float)((float)(v42 * _S28) + (float)(v41 * _S27)) + (float)(v43 * _S29)) + v36;
          v144 = v38;
          if (v143 <= v38)
          {
            v144 = (float)((float)((float)(v42 * _S28) + (float)(v41 * _S27)) + (float)(v43 * _S29)) + v36;
            if (v143 < v36)
              v144 = v36;
          }
          *v78 = llroundf(v144) << v71;
          if (v79)
          {
            v145 = (float)((float)(v37 + (float)(_S27 * v168)) + (float)(_S28 * v167)) + (float)(_S29 * v166);
            v146 = v40;
            if (v145 <= v40)
            {
              v146 = (float)((float)(v37 + (float)(_S27 * v168)) + (float)(_S28 * v167)) + (float)(_S29 * v166);
              if (v145 < v169)
                v146 = v169;
            }
            v147 = (float)((float)(v37 + (float)(_S27 * v165)) + (float)(_S28 * v164)) + (float)(_S29 * v163);
            *v79 = llroundf(v146) << v71;
            v148 = v40;
            if (v147 <= v40)
            {
              v148 = (float)((float)(v37 + (float)(_S27 * v165)) + (float)(_S28 * v164)) + (float)(_S29 * v163);
              if (v147 < v169)
                v148 = v169;
            }
            v79[1] = llroundf(v148) << v71;
            v79 += 2;
          }
          v33 = v86;
          __asm
          {
            FCVT            S0, H0
            FCVT            S2, H24
            FCVT            S26, H26
          }
          v152 = (float)((float)((float)(v42 * _S2) + (float)(v41 * _S0)) + (float)(v43 * _S26)) + v36;
          v153 = v38;
          if (v152 <= v38)
          {
            v153 = (float)((float)((float)(v42 * _S2) + (float)(v41 * _S0)) + (float)(v43 * _S26)) + v36;
            if (v152 < v36)
              v153 = v36;
          }
          v78[1] = llroundf(v153) << v71;
          if (v79)
          {
            v154 = (float)((float)(v37 + (float)(_S0 * v168)) + (float)(_S2 * v167)) + (float)(_S26 * v166);
            v155 = v40;
            if (v154 <= v40)
            {
              v155 = (float)((float)(v37 + (float)(_S0 * v168)) + (float)(_S2 * v167)) + (float)(_S26 * v166);
              if (v154 < v169)
                v155 = v169;
            }
            v156 = (float)((float)(v37 + (float)(_S0 * v165)) + (float)(_S2 * v164)) + (float)(_S26 * v163);
            *v79 = llroundf(v155) << v71;
            v157 = v40;
            if (v156 <= v40)
            {
              v157 = v156;
              if (v156 < v169)
                v157 = v169;
            }
            v79[1] = llroundf(v157) << v71;
            v79 += 2;
          }
          v76 += 2;
          v77 += 2;
          v78 += 2;
        }
        while (v10 > v76);
      }
      v69 += v22;
      v68 += v23;
      v64 = (_WORD *)((char *)v64 + v27);
      result = (_QWORD *)((char *)result + v28);
      ++v9;
    }
    while (v9 != v13);
    if (v25 && v30)
    {
      v158 = 2 * v10;
      do
      {
        result = memcpy(v31, v26, v158);
        v26 += v24;
        v31 += v29;
        --v13;
      }
      while (v13);
    }
    else if (v30)
    {
      do
      {
        if (v10)
          result = memset(v31, 255, 2 * v10);
        v31 += v29;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Mat_TRC_xf444(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Mat_TRC_xf444_GCD);
  return 0;
}

_QWORD *vt_Copy_xf422_TRC_Mat_TRC_xf444_GCD(_QWORD *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  float v32;
  float v33;
  float v34;
  float v35;
  unsigned int v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  char v59;
  char v60;
  unsigned int v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  char v71;
  unint64_t v72;
  unsigned __int16 *v73;
  _WORD *v74;
  _WORD *v75;
  unsigned __int16 *v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  BOOL v92;
  float v93;
  float v94;
  float v95;
  unsigned int v96;
  float v97;
  float v107;
  float v108;
  float v113;
  float v114;
  float v121;
  float v122;
  float v123;
  float v127;
  float v128;
  float v129;
  float v130;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  size_t v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;

  v6 = *(_QWORD *)((char *)result + 28);
  v7 = *(unsigned __int8 *)result;
  v8 = v6 * a2 / v7;
  v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    v10 = 0;
    v11 = *(_QWORD *)((char *)result + 20);
    v12 = *(_QWORD *)((char *)result + 36);
    v13 = v8 + *(_QWORD *)((char *)result + 44);
    v14 = v9 - v8;
    v15 = result[14];
    v16 = (uint64_t *)result[16];
    v17 = result[13] * a2 / v7 + result[15];
    v18 = result[19];
    v19 = (uint64_t *)result[7];
    v20 = (uint64_t *)result[8];
    v21 = (uint64_t *)result[17];
    v22 = *v20;
    v23 = v20[1];
    v24 = v20[2];
    v25 = v19[2];
    v26 = (char *)(v25 + v24 * v13 + 2 * v12);
    v27 = *v21;
    v28 = v21[1];
    v29 = v21[2];
    v30 = v16[2];
    v31 = (char *)(v30 + v29 * v17 + 2 * v15);
    LOWORD(a5) = *(_WORD *)(v18 + 140);
    LOWORD(a6) = *(_WORD *)(v18 + 142);
    v32 = 8191.0 / (float)*(unsigned int *)(v18 + 128);
    v33 = (float)LODWORD(a5);
    v34 = (float)LODWORD(a6);
    v35 = v32 * *(float *)v18;
    v143 = v32 * *(float *)(v18 + 16);
    v144 = v32 * *(float *)(v18 + 8);
    v141 = v32 * *(float *)(v18 + 28);
    *(float *)&v36 = v141;
    v142 = v32 * *(float *)(v18 + 20);
    LOWORD(v36) = *(_WORD *)(v18 + 144);
    v37 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v18 + 146);
    v38 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v18 + 148);
    v39 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v18 + 150);
    v40 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v18 + 152);
    v41 = (float)v36;
    v42 = *(float *)(v18 + 36);
    v43 = *(float *)(v18 + 40);
    v44 = *(float *)(v18 + 44);
    v148 = *(float *)(v18 + 52);
    v149 = *(float *)(v18 + 48);
    v146 = *(float *)(v18 + 60);
    v147 = *(float *)(v18 + 56);
    v45 = *(float *)(v18 + 68);
    v145 = *(float *)(v18 + 64);
    v46 = *(float *)(v18 + 72);
    v47 = *(float *)(v18 + 76);
    v48 = *(float *)(v18 + 80);
    v49 = *(float *)(v18 + 84);
    v50 = *(float *)(v18 + 88);
    v51 = *(float *)(v18 + 92);
    v52 = *(float *)(v18 + 96);
    v53 = *(float *)(v18 + 100);
    v54 = *(float *)(v18 + 104);
    v55 = v18 + 164;
    v56 = v18 + 16548;
    v57 = *(unsigned __int8 *)(v18 + 132);
    _CF = v57 >= 0x11;
    v59 = 16 - v57;
    if (_CF)
      v60 = 0;
    else
      v60 = v59;
    v61 = *(unsigned __int8 *)(v18 + 124);
    v62 = 16 - v61;
    if (v61 >= 0x11)
      v62 = 0;
    v64 = *v16;
    v63 = v16[1];
    v65 = v63 + v28 * v17 + 2 * v15;
    if (!v63)
      v65 = 0;
    result = (_QWORD *)(v64 + v27 * v17 + 2 * v15);
    v67 = *v19;
    v66 = v19[1];
    v68 = v66 + v23 * v13 + 2 * v12;
    if (!v66)
      v68 = 0;
    v69 = v67 + v22 * v13 + 2 * v12;
    v70 = v62;
    v71 = v60;
    do
    {
      if (v11)
      {
        v72 = 0;
        v73 = (unsigned __int16 *)v69;
        v74 = result;
        v75 = (_WORD *)v65;
        do
        {
          v76 = (unsigned __int16 *)(v68 + 2 * v72);
          v77 = (float)(v76[1] >> v70) - v34;
          v78 = v144 * v77;
          v79 = v35 * (float)((float)(*v73 >> v70) - v33);
          v80 = (float)(v144 * v77) + v79;
          v81 = 8191.0;
          if (v80 <= 8191.0)
          {
            v81 = (float)(v144 * v77) + v79;
            if (v80 < 0.0)
              v81 = 0.0;
          }
          v82 = (float)(*v76 >> v70) - v34;
          v83 = (float)(v142 * v77) + (float)(v82 * v143);
          v84 = 8191.0;
          if ((float)(v79 + v83) <= 8191.0)
          {
            v84 = v79 + v83;
            if ((float)(v79 + v83) < 0.0)
              v84 = 0.0;
          }
          v85 = v141 * v82;
          v86 = (float)(v141 * v82) + v79;
          v87 = 8191.0;
          if (v86 <= 8191.0)
          {
            v87 = v86;
            if (v86 < 0.0)
              v87 = 0.0;
          }
          v88 = v35 * (float)((float)(v73[1] >> v70) - v33);
          v89 = v78 + v88;
          v90 = 8191.0;
          if (v89 <= 8191.0)
          {
            v90 = v89;
            if (v89 < 0.0)
              v90 = 0.0;
          }
          v91 = v83 + v88;
          v92 = (float)(v83 + v88) <= 8191.0;
          v93 = 8191.0;
          if (v92)
          {
            v93 = v91;
            if (v91 < 0.0)
              v93 = 0.0;
          }
          v94 = v85 + v88;
          if ((float)(v85 + v88) < 0.0)
            v95 = 0.0;
          else
            v95 = v85 + v88;
          v96 = llroundf(fminf(fmaxf(v81, 0.0), 8191.0));
          if (v94 <= 8191.0)
            v97 = v95;
          else
            v97 = 8191.0;
          _H4 = *(_WORD *)(v55 + 2 * v96);
          __asm { FCVT            S4, H4 }
          _H5 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H6 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          v107 = (float)((float)(v47 * _S5) + (float)(_S4 * v46)) + (float)(_S6 * v48);
          v108 = (float)((float)(v50 * _S5) + (float)(_S4 * v49)) + (float)(_S6 * v51);
          _S5 = (float)((float)(v53 * _S5) + (float)(_S4 * v52)) + (float)(_S6 * v54);
          LOWORD(_S4) = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v107, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          LOWORD(_S6) = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v108, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          LOWORD(_S5) = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S7, H5 }
          v113 = (float)((float)((float)(v43 * _S6) + (float)(v42 * _S4)) + (float)(v44 * _S7)) + v37;
          v114 = v39;
          if (v113 <= v39)
          {
            v114 = (float)((float)((float)(v43 * _S6) + (float)(v42 * _S4)) + (float)(v44 * _S7)) + v37;
            if (v113 < v37)
              v114 = v37;
          }
          _H5 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H24 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          _H25 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v97, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          v121 = (float)((float)(v47 * _S24) + (float)(_S5 * v46)) + (float)(_S25 * v48);
          v122 = (float)((float)(v50 * _S24) + (float)(_S5 * v49)) + (float)(_S25 * v51);
          v123 = (float)((float)(v53 * _S24) + (float)(_S5 * v52)) + (float)(_S25 * v54);
          _H5 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v121, 0.0), 8191.0)));
          _H24 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v122, 0.0), 8191.0)));
          _H25 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v123, 0.0), 8191.0)));
          *v74 = llroundf(v114) << v71;
          if (v75)
          {
            v127 = (float)((float)(v38 + (float)(_S4 * v149)) + (float)(_S6 * v148)) + (float)(_S7 * v147);
            v128 = v41;
            if (v127 <= v41)
            {
              v128 = (float)((float)(v38 + (float)(_S4 * v149)) + (float)(_S6 * v148)) + (float)(_S7 * v147);
              if (v127 < v40)
                v128 = v40;
            }
            v129 = (float)((float)(v38 + (float)(_S4 * v146)) + (float)(_S6 * v145)) + (float)(_S7 * v45);
            *v75 = llroundf(v128) << v71;
            v130 = v41;
            if (v129 <= v41)
            {
              v130 = v129;
              if (v129 < v40)
                v130 = v40;
            }
            v75[1] = llroundf(v130) << v71;
            v75 += 2;
          }
          __asm
          {
            FCVT            S4, H5
            FCVT            S5, H24
            FCVT            S6, H25
          }
          v134 = (float)((float)((float)(v43 * _S5) + (float)(v42 * _S4)) + (float)(v44 * _S6)) + v37;
          v135 = v39;
          if (v134 <= v39)
          {
            v135 = (float)((float)((float)(v43 * _S5) + (float)(v42 * _S4)) + (float)(v44 * _S6)) + v37;
            if (v134 < v37)
              v135 = v37;
          }
          v74[1] = llroundf(v135) << v71;
          if (v75)
          {
            v136 = (float)((float)(v38 + (float)(_S4 * v149)) + (float)(_S5 * v148)) + (float)(_S6 * v147);
            v137 = v41;
            if (v136 <= v41)
            {
              v137 = (float)((float)(v38 + (float)(_S4 * v149)) + (float)(_S5 * v148)) + (float)(_S6 * v147);
              if (v136 < v40)
                v137 = v40;
            }
            v138 = (float)((float)(v38 + (float)(_S4 * v146)) + (float)(_S5 * v145)) + (float)(_S6 * v45);
            *v75 = llroundf(v137) << v71;
            v139 = v41;
            if (v138 <= v41)
            {
              v139 = v138;
              if (v138 < v40)
                v139 = v40;
            }
            v75[1] = llroundf(v139) << v71;
            v75 += 2;
          }
          v72 += 2;
          v73 += 2;
          v74 += 2;
        }
        while (v11 > v72);
      }
      v69 += v22;
      v68 += v23;
      result = (_QWORD *)((char *)result + v27);
      v65 += v28;
      ++v10;
    }
    while (v10 != v14);
    if (v25 && v30)
    {
      v140 = 2 * v11;
      do
      {
        result = memcpy(v31, v26, v140);
        v26 += v24;
        v31 += v29;
        --v14;
      }
      while (v14);
    }
    else if (v30)
    {
      do
      {
        if (v11)
          result = memset(v31, 255, 2 * v11);
        v31 += v29;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_rgb_xf444(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_rgb_xf444_GCD);
  return 0;
}

_QWORD *vt_Copy_xf422_rgb_xf444_GCD(_QWORD *result, uint64_t a2, double a3, double a4, float a5)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  unsigned int v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  unsigned int v59;
  BOOL v60;
  char v61;
  char v62;
  unsigned int v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  char v73;
  unint64_t v74;
  unsigned __int16 *v75;
  _WORD *v76;
  _WORD *v77;
  unsigned __int16 *v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  unsigned int v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  size_t v105;

  v9 = *(_QWORD *)((char *)result + 28);
  v10 = *(unsigned __int8 *)result;
  v11 = v9 * a2 / v10;
  v12 = (v9 + v9 * a2) / v10;
  if (v12 != v11)
  {
    v13 = 0;
    v14 = *(_QWORD *)((char *)result + 20);
    v15 = *(_QWORD *)((char *)result + 36);
    v16 = v11 + *(_QWORD *)((char *)result + 44);
    v17 = v12 - v11;
    v18 = result[14];
    v19 = (uint64_t *)result[16];
    v20 = result[13] * a2 / v10 + result[15];
    v21 = result[19];
    v23 = (uint64_t *)result[7];
    v22 = (uint64_t *)result[8];
    v24 = (uint64_t *)result[17];
    v25 = *v22;
    v26 = v22[1];
    v27 = v22[2];
    v28 = v23[2];
    v29 = (char *)(v28 + v27 * v16 + 2 * v15);
    v30 = *v24;
    v31 = v24[1];
    v32 = v24[2];
    v33 = v19[2];
    v34 = (char *)(v33 + v32 * v20 + 2 * v18);
    *(float *)&v35 = (float)*(unsigned int *)(v21 + 136);
    LOWORD(a5) = *(_WORD *)(v21 + 140);
    v36 = *(float *)&v35 / (float)*(unsigned int *)(v21 + 128);
    v37 = (float)LODWORD(a5);
    LOWORD(v35) = *(_WORD *)(v21 + 142);
    v38 = (float)v35;
    v39 = v36 * *(float *)v21;
    v40 = v36 * *(float *)(v21 + 8);
    v41 = v36 * *(float *)(v21 + 16);
    v42 = v36 * *(float *)(v21 + 20);
    v43 = *(float *)(v21 + 28);
    v44 = v36 * v43;
    LOWORD(v43) = *(_WORD *)(v21 + 144);
    v45 = (float)LODWORD(v43);
    LOWORD(v5) = *(_WORD *)(v21 + 146);
    v46 = (float)v5;
    LOWORD(v6) = *(_WORD *)(v21 + 148);
    v47 = (float)v6;
    LOWORD(v7) = *(_WORD *)(v21 + 150);
    v48 = (float)v7;
    LOWORD(v8) = *(_WORD *)(v21 + 152);
    v49 = (float)v8;
    v50 = *(float *)(v21 + 36);
    v51 = *(float *)(v21 + 40);
    v52 = *(float *)(v21 + 44);
    v53 = *(float *)(v21 + 48);
    v54 = *(float *)(v21 + 52);
    v55 = *(float *)(v21 + 56);
    v56 = *(float *)(v21 + 60);
    v57 = *(float *)(v21 + 64);
    v58 = *(float *)(v21 + 68);
    v59 = *(unsigned __int8 *)(v21 + 132);
    v60 = v59 >= 0x11;
    v61 = 16 - v59;
    if (v60)
      v62 = 0;
    else
      v62 = v61;
    v63 = *(unsigned __int8 *)(v21 + 124);
    v64 = 16 - v63;
    if (v63 >= 0x11)
      v64 = 0;
    v66 = *v19;
    v65 = v19[1];
    v67 = v65 + v31 * v20 + 2 * v18;
    if (!v65)
      v67 = 0;
    v68 = v66 + v30 * v20 + 2 * v18;
    v70 = *v23;
    v69 = v23[1];
    v71 = v69 + v26 * v16 + 2 * v15;
    if (!v69)
      v71 = 0;
    result = (_QWORD *)(v70 + v25 * v16 + 2 * v15);
    v72 = v64;
    v73 = v62;
    do
    {
      if (v14)
      {
        v74 = 0;
        v75 = (unsigned __int16 *)result;
        v76 = (_WORD *)v68;
        v77 = (_WORD *)v67;
        do
        {
          v78 = (unsigned __int16 *)(v71 + 2 * v74);
          v79 = (float)(*v78 >> v72) - v38;
          v80 = (float)(v78[1] >> v72) - v38;
          v81 = v40 * v80;
          v82 = (float)(v42 * v80) + (float)(v79 * v41);
          v83 = v44 * v79;
          v84 = v39 * (float)((float)(*v75 >> v72) - v37);
          v85 = v81 + v84;
          v86 = v84 + v82;
          v87 = v83 + v84;
          v88 = (float)((float)((float)(v51 * v86) + (float)(v50 * v85)) + (float)(v52 * v87)) + v45;
          v89 = v47;
          if (v88 <= v47)
          {
            v89 = (float)((float)((float)(v51 * v86) + (float)(v50 * v85)) + (float)(v52 * v87)) + v45;
            if (v88 < v45)
              v89 = v45;
          }
          v90 = v75[1];
          *v76 = llroundf(v89) << v73;
          if (v77)
          {
            v91 = (float)((float)(v46 + (float)(v85 * v53)) + (float)(v86 * v54)) + (float)(v87 * v55);
            v92 = v49;
            if (v91 <= v49)
            {
              v92 = (float)((float)(v46 + (float)(v85 * v53)) + (float)(v86 * v54)) + (float)(v87 * v55);
              if (v91 < v48)
                v92 = v48;
            }
            v93 = (float)((float)(v46 + (float)(v85 * v56)) + (float)(v86 * v57)) + (float)(v87 * v58);
            *v77 = llroundf(v92) << v73;
            v94 = v49;
            if (v93 <= v49)
            {
              if (v93 < v48)
                v94 = v48;
              else
                v94 = v93;
            }
            v77[1] = llroundf(v94) << v73;
            v77 += 2;
          }
          v95 = v39 * (float)((float)(int)(v90 >> v72) - v37);
          v96 = v81 + v95;
          v97 = v82 + v95;
          v98 = v83 + v95;
          v99 = (float)((float)((float)(v51 * v97) + (float)(v50 * v96)) + (float)(v52 * v98)) + v45;
          v100 = v47;
          if (v99 <= v47)
          {
            v100 = (float)((float)((float)(v51 * v97) + (float)(v50 * v96)) + (float)(v52 * v98)) + v45;
            if (v99 < v45)
              v100 = v45;
          }
          v76[1] = llroundf(v100) << v73;
          if (v77)
          {
            v101 = (float)((float)(v46 + (float)(v96 * v53)) + (float)(v97 * v54)) + (float)(v98 * v55);
            v102 = v49;
            if (v101 <= v49)
            {
              v102 = (float)((float)(v46 + (float)(v96 * v53)) + (float)(v97 * v54)) + (float)(v98 * v55);
              if (v101 < v48)
                v102 = v48;
            }
            v103 = (float)((float)(v46 + (float)(v96 * v56)) + (float)(v97 * v57)) + (float)(v98 * v58);
            *v77 = llroundf(v102) << v73;
            v104 = v49;
            if (v103 <= v49)
            {
              v104 = v103;
              if (v103 < v48)
                v104 = v48;
            }
            v77[1] = llroundf(v104) << v73;
            v77 += 2;
          }
          v74 += 2;
          v75 += 2;
          v76 += 2;
        }
        while (v14 > v74);
      }
      result = (_QWORD *)((char *)result + v25);
      v71 += v26;
      v68 += v30;
      v67 += v31;
      ++v13;
    }
    while (v13 != v17);
    if (v28 && v33)
    {
      v105 = 2 * v14;
      do
      {
        result = memcpy(v34, v29, v105);
        v29 += v27;
        v34 += v32;
        --v17;
      }
      while (v17);
    }
    else if (v33)
    {
      do
      {
        if (v14)
          result = memset(v34, 255, 2 * v14);
        v34 += v32;
        --v17;
      }
      while (v17);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Tone_Mat_TRC_BGRA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Tone_Mat_TRC_BGRA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf422_TRC_Tone_Mat_TRC_BGRA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unsigned int v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  unint64_t v62;
  unsigned __int16 *v63;
  uint64_t v64;
  unsigned __int16 *v65;
  unsigned __int16 *v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  BOOL v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  unsigned int v86;
  unsigned int v87;
  float v89;
  float v102;
  float v103;
  float v108;
  float v109;
  float v111;
  float v112;
  float v113;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  char v131;
  char v132;
  float v134;
  uint64_t v141;

  v5 = *(_QWORD *)(result + 28);
  v6 = *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = v7 + *(_QWORD *)(result + 44);
    v12 = v8 - v7;
    v13 = *((_QWORD *)result + 19);
    v14 = (uint64_t *)*((_QWORD *)result + 7);
    v15 = (uint64_t *)*((_QWORD *)result + 8);
    v16 = *v15;
    v17 = v15[1];
    v18 = v15[2];
    v19 = **((_QWORD **)result + 17);
    *(float *)&v20 = (float)*(unsigned int *)(v13 + 128);
    v21 = 8191.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    v22 = (float)v20;
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    v23 = (float)LODWORD(a5);
    v24 = v21 * *(float *)v13;
    v25 = v21 * *(float *)(v13 + 8);
    v26 = v21 * *(float *)(v13 + 16);
    v27 = v21 * *(float *)(v13 + 20);
    v28 = v21 * *(float *)(v13 + 28);
    v29 = *(float *)(v13 + 72);
    v30 = *(float *)(v13 + 76);
    v31 = *(float *)(v13 + 80);
    v32 = *(float *)(v13 + 84);
    v33 = *(float *)(v13 + 88);
    v34 = *(float *)(v13 + 92);
    v35 = *(float *)(v13 + 96);
    v36 = *(float *)(v13 + 100);
    v37 = v13 + 164;
    v38 = v13 + 16548;
    v39 = v13 + 32932;
    v40 = *(float *)(v13 + 104);
    v41 = *(float *)(v13 + 108);
    v42 = *(float *)(v13 + 112);
    v43 = *(float *)(v13 + 116);
    v44 = *(float *)(v13 + 120);
    v45 = (_QWORD *)*((_QWORD *)result + 16);
    v46 = *((_QWORD *)result + 14);
    v47 = *((_QWORD *)result + 13) * a2 / v6 + *((_QWORD *)result + 15);
    v48 = *(_QWORD *)(result + 36);
    v49 = *(unsigned __int8 *)(v13 + 124);
    if (v49 >= 0x11)
      v50 = 0;
    else
      v50 = 16 - v49;
    result = (unsigned __int8 *)*(unsigned __int8 *)(v13 + 161);
    v51 = *(unsigned __int8 *)(v13 + 160);
    v52 = *(unsigned __int8 *)(v13 + 159);
    v53 = *(unsigned __int8 *)(v13 + 158);
    v54 = *v45 + v47 * v19 + 4 * v46;
    v55 = v14[2];
    if (v55)
      v56 = v55 + v18 * v11 + 2 * v48;
    else
      v56 = 0;
    v58 = *v14;
    v57 = v14[1];
    v59 = v57 + v17 * v11 + 2 * v48;
    if (!v57)
      v59 = 0;
    v60 = v58 + v16 * v11 + 2 * v48;
    v61 = v50;
    do
    {
      if (v10)
      {
        v62 = 0;
        v63 = (unsigned __int16 *)v60;
        v64 = v54;
        v65 = (unsigned __int16 *)v56;
        do
        {
          v66 = (unsigned __int16 *)(v59 + 2 * v62);
          v67 = (float)(v66[1] >> v61) - v23;
          v68 = v25 * v67;
          v69 = v24 * (float)((float)(*v63 >> v61) - v22);
          v70 = (float)(v25 * v67) + v69;
          v71 = 8191.0;
          if (v70 <= 8191.0)
          {
            v71 = (float)(v25 * v67) + v69;
            if (v70 < 0.0)
              v71 = 0.0;
          }
          v72 = (float)(*v66 >> v61) - v23;
          v73 = (float)(v27 * v67) + (float)(v72 * v26);
          v74 = 8191.0;
          if ((float)(v69 + v73) <= 8191.0)
          {
            v74 = v69 + v73;
            if ((float)(v69 + v73) < 0.0)
              v74 = 0.0;
          }
          v75 = v28 * v72;
          v76 = (float)(v28 * v72) + v69;
          v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            v77 = v76;
            if (v76 < 0.0)
              v77 = 0.0;
          }
          v78 = v24 * (float)((float)(v63[1] >> v61) - v22);
          v79 = v68 + v78;
          v80 = (float)(v68 + v78) <= 8191.0;
          v81 = 8191.0;
          if (v80)
          {
            v81 = v79;
            if (v79 < 0.0)
              v81 = 0.0;
          }
          v82 = v73 + v78;
          v83 = 8191.0;
          if (v82 <= 8191.0)
          {
            v83 = v82;
            if (v82 < 0.0)
              v83 = 0.0;
          }
          v84 = v75 + v78;
          v80 = (float)(v75 + v78) <= 8191.0;
          v85 = 8191.0;
          if (v80)
          {
            v85 = v84;
            if (v84 < 0.0)
              v85 = 0.0;
          }
          if (v65)
          {
            v86 = *v65;
            v87 = v65[1];
            v65 += 2;
          }
          else
          {
            v86 = 0;
            v87 = 0;
          }
          _S10 = fmaxf(v71, 0.0);
          v89 = 8191.0;
          LOWORD(_S10) = *(_WORD *)(v37 + 2 * llroundf(fminf(_S10, 8191.0)));
          __asm { FCVT            S10, H10 }
          _H31 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          __asm { FCVT            S31, H31 }
          _H8 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          __asm { FCVT            S8, H8 }
          _H9 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          v102 = (float)((float)((float)(v42 * _S31) + (float)(v41 * _S10)) + (float)(v43 * _S8))
               + (float)(v44 * fmaxf(_S10, fmaxf(_S31, _S8)));
          v103 = 8191.0;
          if (v102 <= 8191.0)
          {
            v103 = v102;
            if (v102 < 0.0)
              v103 = 0.0;
          }
          __asm
          {
            FCVT            S9, H9
            FCVT            S11, H11
            FCVT            S12, H12
          }
          _H13 = *(_WORD *)(v38 + 2 * llroundf(v103));
          v108 = fmaxf(_S9, fmaxf(_S11, _S12));
          v109 = (float)((float)((float)(v42 * _S11) + (float)(v41 * _S9)) + (float)(v43 * _S12)) + (float)(v44 * v108);
          if (v109 <= 8191.0)
          {
            v89 = (float)((float)((float)(v42 * _S11) + (float)(v41 * _S9)) + (float)(v43 * _S12)) + (float)(v44 * v108);
            if (v109 < 0.0)
              v89 = 0.0;
          }
          __asm { FCVT            S13, H13 }
          v111 = _S10 * _S13;
          v112 = _S31 * _S13;
          v113 = _S8 * _S13;
          _H30 = *(_WORD *)(v38 + 2 * llroundf(v89));
          __asm { FCVT            S30, H30 }
          v116 = _S9 * _S30;
          v117 = _S11 * _S30;
          v118 = _S12 * _S30;
          v119 = (float)((float)(v30 * v112) + (float)(v111 * v29)) + (float)(v113 * v31);
          v120 = (float)((float)(v33 * v112) + (float)(v111 * v32)) + (float)(v113 * v34);
          v121 = (float)((float)(v36 * v112) + (float)(v111 * v35)) + (float)(v113 * v40);
          v122 = (float)((float)(v30 * v117) + (float)(v116 * v29)) + (float)(v118 * v31);
          v123 = (float)((float)(v33 * v117) + (float)(v116 * v32)) + (float)(v118 * v34);
          v124 = (float)((float)(v36 * v117) + (float)(v116 * v35)) + (float)(v118 * v40);
          _H11 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v119, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v120, 0.0), 8191.0)));
          _H9 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v121, 0.0), 8191.0)));
          _H8 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v122, 0.0), 8191.0)));
          _H31 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v123, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v124, 0.0), 8191.0)));
          v131 = llroundf((float)v86 * 0.0038911);
          v132 = llroundf((float)v87 * 0.0038911);
          if (!v65)
          {
            v131 = -1;
            v132 = -1;
          }
          __asm { FCVT            S12, H11 }
          v134 = 255.0;
          if (_S12 <= 255.0)
          {
            v134 = _S12;
            if (_S12 < 0.0)
              v134 = 0.0;
          }
          *(_BYTE *)(v64 + v53) = llroundf(v134);
          __asm { FCVT            S12, H10 }
          _S11 = 255.0;
          if (_S12 <= 255.0)
          {
            if (_S12 >= 0.0)
              __asm { FCVT            S11, H10 }
            else
              _S11 = 0.0;
          }
          *(_BYTE *)(v64 + v52) = llroundf(_S11);
          __asm { FCVT            S11, H9 }
          _S10 = 255.0;
          if (_S11 <= 255.0)
          {
            if (_S11 >= 0.0)
              __asm { FCVT            S10, H9 }
            else
              _S10 = 0.0;
          }
          *(_BYTE *)(v64 + v51) = llroundf(_S10);
          result[v64] = v131;
          __asm { FCVT            S10, H8 }
          _S9 = 255.0;
          if (_S10 <= 255.0)
          {
            if (_S10 >= 0.0)
              __asm { FCVT            S9, H8 }
            else
              _S9 = 0.0;
          }
          v141 = v64 + 4;
          *(_BYTE *)(v64 + 4 + v53) = llroundf(_S9);
          __asm { FCVT            S9, H31 }
          _S8 = 255.0;
          if (_S9 <= 255.0)
          {
            if (_S9 >= 0.0)
              __asm { FCVT            S8, H31 }
            else
              _S8 = 0.0;
          }
          *(_BYTE *)(v141 + v52) = llroundf(_S8);
          __asm { FCVT            S8, H30 }
          _S31 = 255.0;
          if (_S8 <= 255.0)
          {
            if (_S8 >= 0.0)
              __asm { FCVT            S31, H30 }
            else
              _S31 = 0.0;
          }
          *(_BYTE *)(v141 + v51) = llroundf(_S31);
          result[v141] = v132;
          v64 += 8;
          v62 += 2;
          v63 += 2;
        }
        while (v10 > v62);
      }
      v60 += v16;
      v59 += v17;
      v56 += v18;
      v54 += v19;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Mat_TRC_BGRA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Mat_TRC_BGRA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf422_TRC_Mat_TRC_BGRA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unsigned int v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  unint64_t v57;
  unsigned __int16 *v58;
  uint64_t v59;
  unsigned __int16 *v60;
  unsigned __int16 *v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  BOOL v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  unsigned int v81;
  unsigned int v82;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  char v111;
  char v112;
  float v114;
  uint64_t v121;

  v5 = *(_QWORD *)(result + 28);
  v6 = *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = v7 + *(_QWORD *)(result + 44);
    v12 = v8 - v7;
    v13 = *((_QWORD *)result + 19);
    v14 = (uint64_t *)*((_QWORD *)result + 7);
    v15 = (uint64_t *)*((_QWORD *)result + 8);
    v16 = *v15;
    v17 = v15[1];
    v18 = v15[2];
    v19 = **((_QWORD **)result + 17);
    *(float *)&v20 = (float)*(unsigned int *)(v13 + 128);
    v21 = 8191.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    v22 = (float)v20;
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    v23 = (float)LODWORD(a5);
    v24 = v21 * *(float *)v13;
    v25 = v21 * *(float *)(v13 + 8);
    v26 = v21 * *(float *)(v13 + 16);
    v27 = v21 * *(float *)(v13 + 20);
    v28 = v21 * *(float *)(v13 + 28);
    v29 = *(float *)(v13 + 72);
    v30 = *(float *)(v13 + 76);
    v31 = *(float *)(v13 + 80);
    v32 = *(float *)(v13 + 84);
    v33 = *(float *)(v13 + 88);
    v34 = *(float *)(v13 + 92);
    v35 = *(float *)(v13 + 96);
    v36 = *(float *)(v13 + 100);
    v37 = *(float *)(v13 + 104);
    v38 = v13 + 164;
    v39 = v13 + 16548;
    v40 = (_QWORD *)*((_QWORD *)result + 16);
    v41 = *((_QWORD *)result + 14);
    v42 = *((_QWORD *)result + 13) * a2 / v6 + *((_QWORD *)result + 15);
    v43 = *(_QWORD *)(result + 36);
    v44 = *(unsigned __int8 *)(v13 + 124);
    if (v44 >= 0x11)
      v45 = 0;
    else
      v45 = 16 - v44;
    v46 = *(unsigned __int8 *)(v13 + 161);
    result = (unsigned __int8 *)*(unsigned __int8 *)(v13 + 160);
    v47 = *(unsigned __int8 *)(v13 + 159);
    v48 = *(unsigned __int8 *)(v13 + 158);
    v49 = *v40 + v42 * v19 + 4 * v41;
    v50 = v14[2];
    if (v50)
      v51 = v50 + v18 * v11 + 2 * v43;
    else
      v51 = 0;
    v53 = *v14;
    v52 = v14[1];
    v54 = v52 + v17 * v11 + 2 * v43;
    if (!v52)
      v54 = 0;
    v55 = v53 + v16 * v11 + 2 * v43;
    v56 = v45;
    do
    {
      if (v10)
      {
        v57 = 0;
        v58 = (unsigned __int16 *)v55;
        v59 = v49;
        v60 = (unsigned __int16 *)v51;
        do
        {
          v61 = (unsigned __int16 *)(v54 + 2 * v57);
          v62 = (float)(v61[1] >> v56) - v23;
          v63 = v25 * v62;
          v64 = v24 * (float)((float)(*v58 >> v56) - v22);
          v65 = (float)(v25 * v62) + v64;
          v66 = 8191.0;
          if (v65 <= 8191.0)
          {
            v66 = (float)(v25 * v62) + v64;
            if (v65 < 0.0)
              v66 = 0.0;
          }
          v67 = (float)(*v61 >> v56) - v23;
          v68 = (float)(v27 * v62) + (float)(v67 * v26);
          v69 = 8191.0;
          if ((float)(v64 + v68) <= 8191.0)
          {
            v69 = v64 + v68;
            if ((float)(v64 + v68) < 0.0)
              v69 = 0.0;
          }
          v70 = v28 * v67;
          v71 = v70 + v64;
          v72 = (float)(v70 + v64) <= 8191.0;
          v73 = 8191.0;
          if (v72)
          {
            v73 = v71;
            if (v71 < 0.0)
              v73 = 0.0;
          }
          v74 = v24 * (float)((float)(v58[1] >> v56) - v22);
          v75 = v63 + v74;
          v72 = (float)(v63 + v74) <= 8191.0;
          v76 = 8191.0;
          if (v72)
          {
            v76 = v75;
            if (v75 < 0.0)
              v76 = 0.0;
          }
          v77 = v68 + v74;
          v72 = (float)(v68 + v74) <= 8191.0;
          v78 = 8191.0;
          if (v72)
          {
            v78 = v77;
            if (v77 < 0.0)
              v78 = 0.0;
          }
          v79 = v70 + v74;
          v80 = 8191.0;
          if (v79 <= 8191.0)
          {
            v80 = v79;
            if (v79 < 0.0)
              v80 = 0.0;
          }
          if (v60)
          {
            v81 = *v60;
            v82 = v60[1];
            v60 += 2;
          }
          else
          {
            v81 = 0;
            v82 = 0;
          }
          _H26 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v66, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v69, 0.0), 8191.0)));
          __asm
          {
            FCVT            S26, H26
            FCVT            S27, H27
          }
          _H28 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S28, H28 }
          _H29 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          _H30 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          __asm { FCVT            S30, H30 }
          _H31 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S31, H31 }
          v99 = (float)((float)(v30 * _S27) + (float)(_S26 * v29)) + (float)(_S28 * v31);
          v100 = (float)((float)(v33 * _S27) + (float)(_S26 * v32)) + (float)(_S28 * v34);
          v101 = (float)((float)(v36 * _S27) + (float)(_S26 * v35)) + (float)(_S28 * v37);
          v102 = (float)((float)(v30 * _S30) + (float)(_S29 * v29)) + (float)(_S31 * v31);
          v103 = (float)((float)(v33 * _S30) + (float)(_S29 * v32)) + (float)(_S31 * v34);
          v104 = (float)((float)(v36 * _S30) + (float)(_S29 * v35)) + (float)(_S31 * v37);
          _H8 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v99, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v100, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v101, 0.0), 8191.0)));
          _H28 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v102, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v103, 0.0), 8191.0)));
          _H26 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v104, 0.0), 8191.0)));
          v111 = llroundf((float)v81 * 0.0038911);
          v112 = llroundf((float)v82 * 0.0038911);
          if (!v60)
          {
            v111 = -1;
            v112 = -1;
          }
          __asm { FCVT            S8, H8 }
          v114 = 255.0;
          if (_S8 <= 255.0)
          {
            v114 = _S8;
            if (_S8 < 0.0)
              v114 = 0.0;
          }
          *(_BYTE *)(v59 + v48) = llroundf(v114);
          __asm { FCVT            S8, H30 }
          _S31 = 255.0;
          if (_S8 <= 255.0)
          {
            if (_S8 >= 0.0)
              __asm { FCVT            S31, H30 }
            else
              _S31 = 0.0;
          }
          *(_BYTE *)(v59 + v47) = llroundf(_S31);
          __asm { FCVT            S31, H29 }
          _S30 = 255.0;
          if (_S31 <= 255.0)
          {
            if (_S31 >= 0.0)
              __asm { FCVT            S30, H29 }
            else
              _S30 = 0.0;
          }
          result[v59] = llroundf(_S30);
          *(_BYTE *)(v59 + v46) = v111;
          __asm { FCVT            S30, H28 }
          _S29 = 255.0;
          if (_S30 <= 255.0)
          {
            if (_S30 >= 0.0)
              __asm { FCVT            S29, H28 }
            else
              _S29 = 0.0;
          }
          v121 = v59 + 4;
          *(_BYTE *)(v59 + 4 + v48) = llroundf(_S29);
          __asm { FCVT            S29, H27 }
          _S28 = 255.0;
          if (_S29 <= 255.0)
          {
            if (_S29 >= 0.0)
              __asm { FCVT            S28, H27 }
            else
              _S28 = 0.0;
          }
          *(_BYTE *)(v121 + v47) = llroundf(_S28);
          __asm { FCVT            S28, H26 }
          _S27 = 255.0;
          if (_S28 <= 255.0)
          {
            if (_S28 >= 0.0)
              __asm { FCVT            S27, H26 }
            else
              _S27 = 0.0;
          }
          result[v121] = llroundf(_S27);
          *(_BYTE *)(v121 + v46) = v112;
          v59 += 8;
          v57 += 2;
          v58 += 2;
        }
        while (v10 > v57);
      }
      v55 += v16;
      v54 += v17;
      v51 += v18;
      v49 += v19;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_xf422_rgb_BGRA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_rgb_BGRA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf422_rgb_BGRA_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unint64_t v44;
  unsigned __int16 *v45;
  uint64_t v46;
  unsigned __int16 *v47;
  unsigned int v48;
  unsigned int v49;
  unsigned __int16 *v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  unsigned int v56;
  float v57;
  char v58;
  char v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  uint64_t v72;
  float v73;
  float v74;

  v2 = *(_QWORD *)(result + 28);
  v3 = *result;
  v4 = v2 * a2 / v3;
  v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    v6 = 0;
    v7 = *(_QWORD *)(result + 20);
    v8 = v4 + *(_QWORD *)(result + 44);
    v9 = v5 - v4;
    v10 = *((_QWORD *)result + 19);
    v11 = (uint64_t *)*((_QWORD *)result + 7);
    v12 = (uint64_t *)*((_QWORD *)result + 8);
    v13 = *v12;
    v14 = v12[1];
    v15 = v12[2];
    v16 = **((_QWORD **)result + 17);
    *(float *)&v17 = (float)*(unsigned int *)(v10 + 128);
    *(float *)&v18 = (float)*(unsigned int *)(v10 + 136);
    v19 = *(float *)&v18 / *(float *)&v17;
    LOWORD(v17) = *(_WORD *)(v10 + 140);
    v20 = (float)v17;
    LOWORD(v18) = *(_WORD *)(v10 + 142);
    v21 = (float)v18;
    v22 = v19 * *(float *)v10;
    v23 = v19 * *(float *)(v10 + 8);
    v24 = v19 * *(float *)(v10 + 16);
    v25 = v19 * *(float *)(v10 + 20);
    v26 = v19 * *(float *)(v10 + 28);
    v27 = (_QWORD *)*((_QWORD *)result + 16);
    v28 = *((_QWORD *)result + 14);
    v29 = *((_QWORD *)result + 13) * a2 / v3 + *((_QWORD *)result + 15);
    v30 = *(_QWORD *)(result + 36);
    v31 = *(unsigned __int8 *)(v10 + 124);
    if (v31 >= 0x11)
      v32 = 0;
    else
      v32 = 16 - v31;
    v33 = *(unsigned __int8 *)(v10 + 161);
    v34 = *(unsigned __int8 *)(v10 + 160);
    v35 = *(unsigned __int8 *)(v10 + 159);
    result = (unsigned __int8 *)*(unsigned __int8 *)(v10 + 158);
    v36 = *v27 + v29 * v16 + 4 * v28;
    v37 = v11[2];
    if (v37)
      v38 = v37 + v15 * v8 + 2 * v30;
    else
      v38 = 0;
    v40 = *v11;
    v39 = v11[1];
    v41 = v39 + v14 * v8 + 2 * v30;
    if (!v39)
      v41 = 0;
    v42 = v40 + v13 * v8 + 2 * v30;
    v43 = v32;
    do
    {
      if (v7)
      {
        v44 = 0;
        v45 = (unsigned __int16 *)v42;
        v46 = v36;
        v47 = (unsigned __int16 *)v38;
        do
        {
          if (v47)
          {
            v48 = *v47;
            v49 = v47[1];
            v47 += 2;
          }
          else
          {
            v48 = 0;
            v49 = 0;
          }
          v50 = (unsigned __int16 *)(v41 + 2 * v44);
          v51 = (float)(*v50 >> v43) - v21;
          v52 = (float)(v50[1] >> v43) - v21;
          v53 = v23 * v52;
          v54 = (float)(v25 * v52) + (float)(v51 * v24);
          v55 = v22 * (float)((float)(*v45 >> v43) - v20);
          v56 = v45[1];
          v57 = v53 + v55;
          v58 = llroundf((float)v48 * 0.0038911);
          if (!v47)
            v58 = -1;
          v59 = llroundf((float)v49 * 0.0038911);
          if (!v47)
            v59 = -1;
          if (v57 < 0.0)
            v60 = 0.0;
          else
            v60 = v53 + v55;
          if (v57 <= 255.0)
            v61 = v60;
          else
            v61 = 255.0;
          result[v46] = llroundf(v61);
          v62 = 255.0;
          if ((float)(v55 + v54) <= 255.0)
          {
            v62 = v55 + v54;
            if ((float)(v55 + v54) < 0.0)
              v62 = 0.0;
          }
          v63 = v26 * v51;
          v64 = v22 * (float)((float)(int)(v56 >> v43) - v20);
          v65 = v63 + v55;
          v66 = v53 + v64;
          *(_BYTE *)(v46 + v35) = llroundf(v62);
          v67 = v54 + v64;
          if (v65 < 0.0)
            v68 = 0.0;
          else
            v68 = v65;
          if (v65 <= 255.0)
            v69 = v68;
          else
            v69 = 255.0;
          *(_BYTE *)(v46 + v34) = llroundf(v69);
          *(_BYTE *)(v46 + v33) = v58;
          if (v66 < 0.0)
            v70 = 0.0;
          else
            v70 = v66;
          if (v66 <= 255.0)
            v71 = v70;
          else
            v71 = 255.0;
          v72 = v46 + 4;
          result[v46 + 4] = llroundf(v71);
          v73 = 255.0;
          if (v67 <= 255.0)
          {
            v73 = v67;
            if (v67 < 0.0)
              v73 = 0.0;
          }
          *(_BYTE *)(v72 + v35) = llroundf(v73);
          v74 = 255.0;
          if ((float)(v63 + v64) <= 255.0)
          {
            v74 = v63 + v64;
            if ((float)(v63 + v64) < 0.0)
              v74 = 0.0;
          }
          *(_BYTE *)(v72 + v34) = llroundf(v74);
          *(_BYTE *)(v72 + v33) = v59;
          v46 += 8;
          v44 += 2;
          v45 += 2;
        }
        while (v7 > v44);
      }
      v42 += v13;
      v41 += v14;
      v38 += v15;
      v36 += v16;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Tone_Mat_TRC_l10r(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Tone_Mat_TRC_l10r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf422_TRC_Tone_Mat_TRC_l10r_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  uint64_t v48;
  unsigned int v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unsigned __int16 *v59;
  unsigned int *v60;
  unsigned __int16 *v61;
  unsigned __int16 *v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  BOOL v76;
  float v77;
  float v78;
  float v79;
  float v80;
  unsigned int v81;
  unsigned int v82;
  float v84;
  float v95;
  float v96;
  float v101;
  float v102;
  float v104;
  float v105;
  float v106;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v124;
  unsigned int v125;
  float v126;
  unsigned int v127;
  float v129;
  float v130;
  float v131;
  float v133;
  float v134;
  float v136;
  float v137;
  unsigned int v139;
  unsigned int v140;
  float v141;
  unsigned int v142;
  float v143;
  float v144;
  float v146;
  float v147;
  float v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  float v153;
  float v154;
  float v155;

  v5 = *(_QWORD *)(result + 28);
  v6 = *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = v7 + *(_QWORD *)(result + 44);
    v12 = v8 - v7;
    v13 = *((_QWORD *)result + 19);
    v14 = (_QWORD *)*((_QWORD *)result + 7);
    v15 = (uint64_t *)*((_QWORD *)result + 8);
    v16 = *v15;
    v17 = v15[1];
    v18 = v15[2];
    v19 = **((_QWORD **)result + 17);
    *(float *)&v20 = (float)*(unsigned int *)(v13 + 128);
    *(float *)&v21 = 8191.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    v22 = (float)v20;
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    v23 = (float)LODWORD(a5);
    v24 = *(float *)&v21 * *(float *)v13;
    v154 = *(float *)&v21 * *(float *)(v13 + 16);
    v155 = *(float *)&v21 * *(float *)(v13 + 8);
    v25 = *(float *)&v21 * *(float *)(v13 + 20);
    v26 = *(float *)&v21 * *(float *)(v13 + 28);
    LOWORD(v21) = *(_WORD *)(v13 + 144);
    v27 = (float)v21;
    v28 = *(float *)(v13 + 72);
    v29 = *(float *)(v13 + 76);
    v30 = *(float *)(v13 + 80);
    v31 = *(float *)(v13 + 84);
    v32 = *(float *)(v13 + 88);
    v33 = *(float *)(v13 + 92);
    v34 = *(float *)(v13 + 96);
    v35 = *(float *)(v13 + 100);
    v36 = v13 + 164;
    v37 = v13 + 16548;
    v38 = v13 + 32932;
    v39 = *(float *)(v13 + 104);
    v40 = *(float *)(v13 + 108);
    v41 = *(float *)(v13 + 112);
    v42 = *(float *)(v13 + 116);
    v43 = *(float *)(v13 + 120);
    v44 = *((_QWORD *)result + 14);
    v45 = *((_QWORD *)result + 13) * a2 / v6;
    v46 = (_QWORD *)*((_QWORD *)result + 16);
    v47 = v45 + *((_QWORD *)result + 15);
    v48 = *(_QWORD *)(result + 36);
    v49 = *(unsigned __int8 *)(v13 + 124);
    v50 = 16 - v49;
    if (v49 >= 0x11)
      v50 = 0;
    result = (unsigned __int8 *)(*v46 + v47 * v19 + 16 * v44);
    v51 = v14[2];
    if (v51)
      v52 = v51 + v18 * v11 + 2 * v48;
    else
      v52 = 0;
    v55 = v14;
    v54 = *v14;
    v53 = v55[1];
    if (v53)
      v56 = v53 + v17 * v11 + 2 * v48;
    else
      v56 = 0;
    v57 = v54 + v16 * v11 + 2 * v48;
    do
    {
      if (v10)
      {
        v58 = 0;
        v59 = (unsigned __int16 *)v57;
        v60 = (unsigned int *)result;
        v61 = (unsigned __int16 *)v52;
        do
        {
          v62 = (unsigned __int16 *)(v56 + 2 * v58);
          v63 = (float)(v62[1] >> v50) - v23;
          v64 = v155 * v63;
          v65 = v24 * (float)((float)(*v59 >> v50) - v22);
          v66 = (float)(v155 * v63) + v65;
          v67 = 8191.0;
          if (v66 <= 8191.0)
          {
            v67 = (float)(v155 * v63) + v65;
            if (v66 < 0.0)
              v67 = 0.0;
          }
          v68 = (float)(*v62 >> v50) - v23;
          v69 = (float)(v25 * v63) + (float)(v68 * v154);
          v70 = 8191.0;
          if ((float)(v65 + v69) <= 8191.0)
          {
            v70 = v65 + v69;
            if ((float)(v65 + v69) < 0.0)
              v70 = 0.0;
          }
          v71 = v26 * v68;
          v72 = (float)(v26 * v68) + v65;
          v73 = 8191.0;
          if (v72 <= 8191.0)
          {
            v73 = v72;
            if (v72 < 0.0)
              v73 = 0.0;
          }
          v74 = v24 * (float)((float)(v59[1] >> v50) - v22);
          v75 = v64 + v74;
          v76 = (float)(v64 + v74) <= 8191.0;
          v77 = 8191.0;
          if (v76)
          {
            v77 = v75;
            if (v75 < 0.0)
              v77 = 0.0;
          }
          v78 = 8191.0;
          if ((float)(v69 + v74) <= 8191.0)
          {
            v78 = v69 + v74;
            if ((float)(v69 + v74) < 0.0)
              v78 = 0.0;
          }
          v79 = v71 + v74;
          v76 = (float)(v71 + v74) <= 8191.0;
          v80 = 8191.0;
          if (v76)
          {
            v80 = v79;
            if (v79 < 0.0)
              v80 = 0.0;
          }
          if (v61)
          {
            v81 = *v61;
            v82 = v61[1];
            v61 += 2;
          }
          else
          {
            v81 = 0;
            v82 = 0;
          }
          _S4 = fmaxf(v67, 0.0);
          v84 = 8191.0;
          LOWORD(_S4) = *(_WORD *)(v36 + 2 * llroundf(fminf(_S4, 8191.0)));
          __asm { FCVT            S13, H4 }
          LOWORD(_S4) = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          __asm { FCVT            S10, H4 }
          LOWORD(_S4) = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S11, H4 }
          _H8 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          _H14 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          _H15 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          v95 = (float)((float)((float)(v41 * _S10) + (float)(v40 * _S13)) + (float)(v42 * _S11))
              + (float)(v43 * fmaxf(_S13, fmaxf(_S10, _S11)));
          v96 = 8191.0;
          if (v95 <= 8191.0)
          {
            v96 = v95;
            if (v95 < 0.0)
              v96 = 0.0;
          }
          __asm
          {
            FCVT            S12, H8
            FCVT            S14, H14
            FCVT            S15, H15
          }
          _H8 = *(_WORD *)(v37 + 2 * llroundf(v96));
          v101 = fmaxf(_S12, fmaxf(_S14, _S15));
          v102 = (float)((float)((float)(v41 * _S14) + (float)(v40 * _S12)) + (float)(v42 * _S15)) + (float)(v43 * v101);
          if (v102 <= 8191.0)
          {
            v84 = (float)((float)((float)(v41 * _S14) + (float)(v40 * _S12)) + (float)(v42 * _S15))
                + (float)(v43 * v101);
            if (v102 < 0.0)
              v84 = 0.0;
          }
          __asm { FCVT            S4, H8 }
          v104 = _S13 * _S4;
          v105 = _S10 * _S4;
          v106 = _S11 * _S4;
          _H9 = *(_WORD *)(v37 + 2 * llroundf(v84));
          __asm { FCVT            S9, H9 }
          v109 = _S12 * _S9;
          v110 = _S14 * _S9;
          v111 = _S15 * _S9;
          v112 = (float)((float)(v29 * v105) + (float)(v104 * v28)) + (float)(v106 * v30);
          v113 = (float)((float)(v32 * v105) + (float)(v104 * v31)) + (float)(v106 * v33);
          v114 = (float)((float)(v35 * v105) + (float)(v104 * v34)) + (float)(v106 * v39);
          v115 = (float)((float)(v29 * v110) + (float)(v109 * v28)) + (float)(v111 * v30);
          v116 = (float)((float)(v32 * v110) + (float)(v109 * v31)) + (float)(v111 * v33);
          v117 = (float)((float)(v35 * v110) + (float)(v109 * v34)) + (float)(v111 * v39);
          _H12 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v112, 0.0), 8191.0)));
          _H14 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v113, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v114, 0.0), 8191.0)));
          _H9 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v115, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v116, 0.0), 8191.0)));
          _H13 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v117, 0.0), 8191.0)));
          if (v61)
          {
            v124 = (double)v81 * 3.0 / 65535.0;
            v125 = llroundf(v124);
            v126 = (double)v82 * 3.0 / 65535.0;
            v127 = llroundf(v126);
          }
          else
          {
            v125 = 3;
            v127 = 3;
          }
          __asm { FCVT            S4, H11 }
          v129 = v27 + _S4;
          v130 = 1023.0;
          v131 = 1023.0;
          if (v129 <= 1023.0)
          {
            v131 = v129;
            if (v129 < 0.0)
              v131 = 0.0;
          }
          __asm { FCVT            S4, H14 }
          v133 = v27 + _S4;
          v134 = 1023.0;
          if (v133 <= 1023.0)
          {
            v134 = v133;
            if (v133 < 0.0)
              v134 = 0.0;
          }
          __asm { FCVT            S4, H12 }
          v136 = v27 + _S4;
          v137 = 1023.0;
          if (v136 <= 1023.0)
          {
            v137 = v136;
            if (v136 < 0.0)
              v137 = 0.0;
          }
          __asm { FCVT            S4, H13 }
          v139 = llroundf(v131);
          v140 = llroundf(v137);
          v141 = (float)v125;
          v142 = llroundf(v134) << 10;
          if (v141 > 3.0)
            v141 = 3.0;
          *v60 = v142 | v139 | (llroundf(v141) << 30) | (v140 << 20);
          v143 = v27 + _S4;
          v144 = 1023.0;
          if (v143 <= 1023.0)
          {
            v144 = v143;
            if (v143 < 0.0)
              v144 = 0.0;
          }
          __asm { FCVT            S4, H10 }
          v146 = v27 + _S4;
          v147 = 1023.0;
          if (v146 <= 1023.0)
          {
            v147 = v146;
            if (v146 < 0.0)
              v147 = 0.0;
          }
          __asm { FCVT            S4, H9 }
          v149 = v27 + _S4;
          if (v149 <= 1023.0)
          {
            v130 = v149;
            if (v149 < 0.0)
              v130 = 0.0;
          }
          v150 = llroundf(v144);
          v151 = llroundf(v147) << 10;
          v152 = llroundf(v130);
          v153 = (float)v127;
          if ((float)v127 > 3.0)
            v153 = 3.0;
          v60[1] = v151 | v150 | (llroundf(v153) << 30) | (v152 << 20);
          v58 += 2;
          v59 += 2;
          v60 += 2;
        }
        while (v10 > v58);
      }
      v57 += v16;
      v56 += v17;
      v52 += v18;
      result += v19;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Mat_TRC_l10r(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Mat_TRC_l10r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf422_TRC_Mat_TRC_l10r_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  uint64_t v46;
  unsigned int v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unsigned __int16 *v57;
  _DWORD *v58;
  unsigned __int16 *v59;
  unsigned __int16 *v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  BOOL v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  unsigned int v80;
  unsigned int v81;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v110;
  unsigned int v111;
  float v112;
  unsigned int v113;
  float v115;
  float v116;
  float v117;
  float v119;
  float v120;
  float v122;
  float v123;
  unsigned int v125;
  unsigned int v126;
  float v127;
  unsigned int v128;
  float v129;
  float v130;
  float v132;
  float v133;
  float v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  float v139;

  v5 = *(_QWORD *)(result + 28);
  v6 = *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = v7 + *(_QWORD *)(result + 44);
    v12 = v8 - v7;
    v13 = *((_QWORD *)result + 19);
    v14 = (_QWORD *)*((_QWORD *)result + 7);
    v15 = (uint64_t *)*((_QWORD *)result + 8);
    v16 = *v15;
    v17 = v15[1];
    v18 = v15[2];
    v19 = **((_QWORD **)result + 17);
    *(float *)&v20 = (float)*(unsigned int *)(v13 + 128);
    v21 = 8191.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    v22 = (float)v20;
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    v23 = (float)LODWORD(a5);
    v24 = v21 * *(float *)v13;
    v25 = v21 * *(float *)(v13 + 8);
    v26 = v21 * *(float *)(v13 + 16);
    v27 = v21 * *(float *)(v13 + 20);
    v28 = *(float *)(v13 + 28);
    v29 = v21 * v28;
    LOWORD(v28) = *(_WORD *)(v13 + 144);
    v30 = (float)LODWORD(v28);
    v31 = *(float *)(v13 + 72);
    v32 = *(float *)(v13 + 76);
    v33 = *(float *)(v13 + 80);
    v34 = *(float *)(v13 + 84);
    v35 = *(float *)(v13 + 88);
    v36 = *(float *)(v13 + 92);
    v37 = *(float *)(v13 + 96);
    v38 = *(float *)(v13 + 100);
    v39 = *(float *)(v13 + 104);
    v40 = v13 + 164;
    v41 = v13 + 16548;
    v42 = *((_QWORD *)result + 14);
    v43 = *((_QWORD *)result + 13) * a2 / v6;
    v44 = (_QWORD *)*((_QWORD *)result + 16);
    v45 = v43 + *((_QWORD *)result + 15);
    v46 = *(_QWORD *)(result + 36);
    v47 = *(unsigned __int8 *)(v13 + 124);
    v48 = 16 - v47;
    if (v47 >= 0x11)
      v48 = 0;
    v49 = *v44 + v45 * v19 + 16 * v42;
    v50 = v14[2];
    if (v50)
      result = (unsigned __int8 *)(v50 + v18 * v11 + 2 * v46);
    else
      result = 0;
    v53 = v14;
    v52 = *v14;
    v51 = v53[1];
    if (v51)
      v54 = v51 + v17 * v11 + 2 * v46;
    else
      v54 = 0;
    v55 = v52 + v16 * v11 + 2 * v46;
    do
    {
      if (v10)
      {
        v56 = 0;
        v57 = (unsigned __int16 *)v55;
        v58 = (_DWORD *)v49;
        v59 = (unsigned __int16 *)result;
        do
        {
          v60 = (unsigned __int16 *)(v54 + 2 * v56);
          v61 = (float)(v60[1] >> v48) - v23;
          v62 = v25 * v61;
          v63 = v24 * (float)((float)(*v57 >> v48) - v22);
          v64 = (float)(v25 * v61) + v63;
          v65 = 8191.0;
          if (v64 <= 8191.0)
          {
            v65 = (float)(v25 * v61) + v63;
            if (v64 < 0.0)
              v65 = 0.0;
          }
          v66 = (float)(*v60 >> v48) - v23;
          v67 = (float)(v27 * v61) + (float)(v66 * v26);
          v68 = 8191.0;
          if ((float)(v63 + v67) <= 8191.0)
          {
            v68 = v63 + v67;
            if ((float)(v63 + v67) < 0.0)
              v68 = 0.0;
          }
          v69 = v29 * v66;
          v70 = v69 + v63;
          v71 = (float)(v69 + v63) <= 8191.0;
          v72 = 8191.0;
          if (v71)
          {
            v72 = v70;
            if (v70 < 0.0)
              v72 = 0.0;
          }
          v73 = v24 * (float)((float)(v57[1] >> v48) - v22);
          v74 = v62 + v73;
          v71 = (float)(v62 + v73) <= 8191.0;
          v75 = 8191.0;
          if (v71)
          {
            v75 = v74;
            if (v74 < 0.0)
              v75 = 0.0;
          }
          v76 = v67 + v73;
          v71 = (float)(v67 + v73) <= 8191.0;
          v77 = 8191.0;
          if (v71)
          {
            v77 = v76;
            if (v76 < 0.0)
              v77 = 0.0;
          }
          v78 = v69 + v73;
          v79 = 8191.0;
          if (v78 <= 8191.0)
          {
            v79 = v78;
            if (v78 < 0.0)
              v79 = 0.0;
          }
          if (v59)
          {
            v80 = *v59;
            v81 = v59[1];
            v59 += 2;
          }
          else
          {
            v80 = 0;
            v81 = 0;
          }
          _H29 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v65, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v68, 0.0), 8191.0)));
          __asm
          {
            FCVT            S29, H29
            FCVT            S30, H30
          }
          _H31 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm { FCVT            S31, H31 }
          _H8 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          __asm { FCVT            S8, H8 }
          _H9 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          __asm { FCVT            S9, H9 }
          _H10 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          v98 = (float)((float)(v32 * _S30) + (float)(_S29 * v31)) + (float)(_S31 * v33);
          v99 = (float)((float)(v35 * _S30) + (float)(_S29 * v34)) + (float)(_S31 * v36);
          v100 = (float)((float)(v38 * _S30) + (float)(_S29 * v37)) + (float)(_S31 * v39);
          v101 = (float)((float)(v32 * _S9) + (float)(_S8 * v31)) + (float)(_S10 * v33);
          v102 = (float)((float)(v35 * _S9) + (float)(_S8 * v34)) + (float)(_S10 * v36);
          v103 = (float)((float)(v38 * _S9) + (float)(_S8 * v37)) + (float)(_S10 * v39);
          _H8 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v99, 0.0), 8191.0)));
          _H31 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v100, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v101, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v102, 0.0), 8191.0)));
          _H9 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v103, 0.0), 8191.0)));
          if (v59)
          {
            v110 = (double)v80 * 3.0 / 65535.0;
            v111 = llroundf(v110);
            v112 = (double)v81 * 3.0 / 65535.0;
            v113 = llroundf(v112);
          }
          else
          {
            v111 = 3;
            v113 = 3;
          }
          __asm { FCVT            S31, H31 }
          v115 = v30 + _S31;
          v116 = 1023.0;
          v117 = 1023.0;
          if (v115 <= 1023.0)
          {
            v117 = v115;
            if (v115 < 0.0)
              v117 = 0.0;
          }
          __asm { FCVT            S10, H10 }
          v119 = v30 + _S10;
          v71 = (float)(v30 + _S10) <= 1023.0;
          v120 = 1023.0;
          if (v71)
          {
            v120 = v119;
            if (v119 < 0.0)
              v120 = 0.0;
          }
          __asm { FCVT            S8, H8 }
          v122 = v30 + _S8;
          v71 = (float)(v30 + _S8) <= 1023.0;
          v123 = 1023.0;
          if (v71)
          {
            v123 = v122;
            if (v122 < 0.0)
              v123 = 0.0;
          }
          __asm { FCVT            S9, H9 }
          v125 = llroundf(v117);
          v126 = llroundf(v123);
          v127 = (float)v111;
          v128 = llroundf(v120) << 10;
          if (v127 > 3.0)
            v127 = 3.0;
          *v58 = v128 | v125 | (llroundf(v127) << 30) | (v126 << 20);
          v129 = v30 + _S9;
          v130 = 1023.0;
          if (v129 <= 1023.0)
          {
            v130 = v129;
            if (v129 < 0.0)
              v130 = 0.0;
          }
          __asm { FCVT            S30, H30 }
          v132 = v30 + _S30;
          v71 = (float)(v30 + _S30) <= 1023.0;
          v133 = 1023.0;
          if (v71)
          {
            v133 = v132;
            if (v132 < 0.0)
              v133 = 0.0;
          }
          __asm { FCVT            S29, H29 }
          v135 = v30 + _S29;
          if (v135 <= 1023.0)
          {
            v116 = v135;
            if (v135 < 0.0)
              v116 = 0.0;
          }
          v136 = llroundf(v130);
          v137 = llroundf(v133) << 10;
          v138 = llroundf(v116);
          v139 = (float)v113;
          if ((float)v113 > 3.0)
            v139 = 3.0;
          v58[1] = v137 | v136 | (llroundf(v139) << 30) | (v138 << 20);
          v56 += 2;
          v57 += 2;
          v58 += 2;
        }
        while (v10 > v56);
      }
      v55 += v16;
      v54 += v17;
      result += v18;
      v49 += v19;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_xf422_rgb_l10r(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_rgb_l10r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf422_rgb_l10r_GCD(unsigned __int8 *result, uint64_t a2)
{
  double v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unint64_t v44;
  unsigned __int16 *v45;
  _DWORD *v46;
  _WORD *v47;
  float v48;
  unsigned int v49;
  unsigned int v50;
  unsigned __int16 *v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  unsigned int v65;
  unsigned int v66;
  float v67;
  float v68;
  float v69;
  unsigned int v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;

  v4 = *(_QWORD *)(result + 28);
  v5 = *result;
  v6 = v4 * a2 / v5;
  v7 = (v4 + v4 * a2) / v5;
  if (v7 != v6)
  {
    v8 = 0;
    v9 = *(_QWORD *)(result + 20);
    v10 = v6 + *(_QWORD *)(result + 44);
    v11 = v7 - v6;
    v12 = *((_QWORD *)result + 19);
    v14 = (uint64_t *)*((_QWORD *)result + 7);
    v13 = (uint64_t *)*((_QWORD *)result + 8);
    v15 = *v13;
    v16 = v13[1];
    v17 = v13[2];
    v18 = **((_QWORD **)result + 17);
    *(float *)&v19 = (float)*(unsigned int *)(v12 + 128);
    *(float *)&v20 = (float)*(unsigned int *)(v12 + 136);
    v21 = *(float *)&v20 / *(float *)&v19;
    LOWORD(v19) = *(_WORD *)(v12 + 140);
    v22 = (float)v19;
    LOWORD(v20) = *(_WORD *)(v12 + 142);
    v23 = (float)v20;
    v24 = v21 * *(float *)v12;
    v25 = v21 * *(float *)(v12 + 8);
    v26 = v21 * *(float *)(v12 + 16);
    v27 = v21 * *(float *)(v12 + 20);
    v28 = *(float *)(v12 + 28);
    v29 = v21 * v28;
    LOWORD(v28) = *(_WORD *)(v12 + 144);
    v30 = (float)LODWORD(v28);
    v31 = *((_QWORD *)result + 14);
    v32 = *((_QWORD *)result + 13) * a2 / v5;
    v33 = (_QWORD *)*((_QWORD *)result + 16);
    v34 = v32 + *((_QWORD *)result + 15);
    v35 = *(_QWORD *)(result + 36);
    LODWORD(v12) = *(unsigned __int8 *)(v12 + 124);
    v36 = 16 - v12;
    if (v12 >= 0x11)
      v36 = 0;
    v37 = *v33 + v34 * v18 + 16 * v31;
    v38 = v14[2];
    if (v38)
      v39 = v38 + v17 * v10 + 2 * v35;
    else
      v39 = 0;
    v41 = *v14;
    v40 = v14[1];
    v42 = v40 + v16 * v10 + 2 * v35;
    if (!v40)
      v42 = 0;
    result = (unsigned __int8 *)(v41 + v15 * v10 + 2 * v35);
    v43 = v36;
    do
    {
      if (v9)
      {
        v44 = 0;
        v45 = (unsigned __int16 *)result;
        v46 = (_DWORD *)v37;
        v47 = (_WORD *)v39;
        do
        {
          if (v47)
          {
            LOWORD(v2) = *v47;
            LOWORD(v3) = v47[1];
            v47 += 2;
            v48 = (double)*(unint64_t *)&v2 * 3.0 / 65535.0;
            v49 = llroundf(v48);
            v2 = (double)v3 * 3.0 / 65535.0;
            *(float *)&v2 = v2;
            v50 = llroundf(*(float *)&v2);
          }
          else
          {
            v49 = 3;
            v50 = 3;
          }
          v51 = (unsigned __int16 *)(v42 + 2 * v44);
          v52 = (float)(*v51 >> v43) - v23;
          v53 = v29 * v52;
          v54 = v24 * (float)((float)(*v45 >> v43) - v22);
          v55 = (float)((float)(v29 * v52) + v54) + v30;
          v56 = 1023.0;
          if (v55 <= 1023.0)
          {
            v56 = (float)((float)(v29 * v52) + v54) + v30;
            if (v55 < 0.0)
              v56 = 0.0;
          }
          v57 = (float)(v51[1] >> v43) - v23;
          v58 = (float)(v27 * v57) + (float)(v52 * v26);
          v59 = (float)(v54 + v58) + v30;
          v60 = 1023.0;
          if (v59 <= 1023.0)
          {
            v60 = (float)(v54 + v58) + v30;
            if (v59 < 0.0)
              v60 = 0.0;
          }
          v61 = v25 * v57;
          v62 = v24 * (float)((float)(v45[1] >> v43) - v22);
          v63 = v58 + v62;
          v64 = v53 + v62;
          v65 = llroundf(v56);
          v66 = llroundf(v60) << 10;
          v67 = (float)(v61 + v54) + v30;
          if (v67 < 0.0)
            v68 = 0.0;
          else
            v68 = v67;
          if (v67 <= 1023.0)
            v69 = v68;
          else
            v69 = 1023.0;
          v70 = llroundf(v69);
          v71 = (float)v49;
          if ((float)v49 > 3.0)
            v71 = 3.0;
          *v46 = v66 | v65 | (llroundf(v71) << 30) | (v70 << 20);
          v72 = v64 + v30;
          if (v72 < 0.0)
            v73 = 0.0;
          else
            v73 = v72;
          if (v72 <= 1023.0)
            v74 = v73;
          else
            v74 = 1023.0;
          LODWORD(v3) = 1149222912;
          if ((float)(v63 + v30) <= 1023.0)
          {
            *(float *)&v3 = v63 + v30;
            if ((float)(v63 + v30) < 0.0)
              LODWORD(v3) = 0;
          }
          v75 = (float)(v61 + v62) + v30;
          v76 = 1023.0;
          if (v75 <= 1023.0)
          {
            v76 = v75;
            if (v75 < 0.0)
              v76 = 0.0;
          }
          v77 = llroundf(v74);
          v78 = llroundf(*(float *)&v3) << 10;
          v79 = llroundf(v76);
          *(float *)&v2 = (float)v50;
          if ((float)v50 > 3.0)
            *(float *)&v2 = 3.0;
          v46[1] = v78 | v77 | (llroundf(*(float *)&v2) << 30) | (v79 << 20);
          v44 += 2;
          v45 += 2;
          v46 += 2;
        }
        while (v9 > v44);
      }
      result += v15;
      v42 += v16;
      v39 += v17;
      v37 += v18;
      ++v8;
    }
    while (v8 != v11);
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Tone_Mat_TRC_l64r(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Tone_Mat_TRC_l64r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf422_TRC_Tone_Mat_TRC_l64r_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  uint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  uint64_t v49;
  unsigned int v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unsigned __int16 *v60;
  _WORD *v61;
  __int16 *v62;
  unsigned __int16 *v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  BOOL v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  __int16 v83;
  __int16 v84;
  float v86;
  unsigned int v93;
  float v100;
  float v101;
  float v106;
  float v107;
  float v109;
  float v110;
  float v112;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  __int16 v130;
  __int16 v131;
  float v132;
  float v133;
  float v136;
  float v139;
  float v142;
  float v145;

  v5 = *(_QWORD *)(result + 28);
  v6 = *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = v7 + *(_QWORD *)(result + 44);
    v12 = v8 - v7;
    v13 = *((_QWORD *)result + 19);
    v14 = (_QWORD *)*((_QWORD *)result + 7);
    v15 = (uint64_t *)*((_QWORD *)result + 8);
    v16 = *v15;
    v17 = v15[1];
    v18 = v15[2];
    v19 = **((_QWORD **)result + 17);
    *(float *)&v20 = (float)*(unsigned int *)(v13 + 128);
    v21 = 8191.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    v22 = (float)v20;
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    v23 = (float)LODWORD(a5);
    v24 = v21 * *(float *)v13;
    v25 = v21 * *(float *)(v13 + 8);
    v26 = v21 * *(float *)(v13 + 16);
    v27 = v21 * *(float *)(v13 + 20);
    v28 = v21 * *(float *)(v13 + 28);
    v29 = *(float *)(v13 + 72);
    v30 = *(float *)(v13 + 76);
    v31 = *(float *)(v13 + 80);
    v32 = *(float *)(v13 + 84);
    v33 = *(float *)(v13 + 88);
    v34 = *(float *)(v13 + 92);
    v35 = *(float *)(v13 + 96);
    v36 = *(float *)(v13 + 100);
    v37 = v13 + 164;
    v38 = v13 + 16548;
    v39 = v13 + 32932;
    v40 = *(float *)(v13 + 104);
    v41 = *(float *)(v13 + 108);
    v42 = *(float *)(v13 + 112);
    v43 = *(float *)(v13 + 116);
    v44 = *(float *)(v13 + 120);
    v45 = *((_QWORD *)result + 14);
    v46 = *((_QWORD *)result + 13) * a2 / v6;
    v47 = (_QWORD *)*((_QWORD *)result + 16);
    v48 = v46 + *((_QWORD *)result + 15);
    v49 = *(_QWORD *)(result + 36);
    v50 = *(unsigned __int8 *)(v13 + 124);
    v51 = 16 - v50;
    if (v50 >= 0x11)
      v51 = 0;
    result = (unsigned __int8 *)(*v47 + v48 * v19 + 8 * v45);
    v52 = v14[2];
    if (v52)
      v53 = v52 + v18 * v11 + 2 * v49;
    else
      v53 = 0;
    v56 = v14;
    v55 = *v14;
    v54 = v56[1];
    if (v54)
      v57 = v54 + v17 * v11 + 2 * v49;
    else
      v57 = 0;
    v58 = v55 + v16 * v11 + 2 * v49;
    do
    {
      if (v10)
      {
        v59 = 0;
        v60 = (unsigned __int16 *)v58;
        v61 = result;
        v62 = (__int16 *)v53;
        do
        {
          v63 = (unsigned __int16 *)(v57 + 2 * v59);
          v64 = (float)(v63[1] >> v51) - v23;
          v65 = v25 * v64;
          v66 = v24 * (float)((float)(*v60 >> v51) - v22);
          v67 = (float)(v25 * v64) + v66;
          v68 = 8191.0;
          if (v67 <= 8191.0)
          {
            v68 = (float)(v25 * v64) + v66;
            if (v67 < 0.0)
              v68 = 0.0;
          }
          v69 = (float)(*v63 >> v51) - v23;
          v70 = (float)(v27 * v64) + (float)(v69 * v26);
          v71 = 8191.0;
          if ((float)(v66 + v70) <= 8191.0)
          {
            v71 = v66 + v70;
            if ((float)(v66 + v70) < 0.0)
              v71 = 0.0;
          }
          v72 = v28 * v69;
          v73 = (float)(v28 * v69) + v66;
          v74 = 8191.0;
          if (v73 <= 8191.0)
          {
            v74 = v73;
            if (v73 < 0.0)
              v74 = 0.0;
          }
          v75 = v24 * (float)((float)(v60[1] >> v51) - v22);
          v76 = v65 + v75;
          v77 = (float)(v65 + v75) <= 8191.0;
          v78 = 8191.0;
          if (v77)
          {
            v78 = v76;
            if (v76 < 0.0)
              v78 = 0.0;
          }
          v79 = v70 + v75;
          v80 = 8191.0;
          if (v79 <= 8191.0)
          {
            v80 = v79;
            if (v79 < 0.0)
              v80 = 0.0;
          }
          v81 = v72 + v75;
          v77 = (float)(v72 + v75) <= 8191.0;
          v82 = 8191.0;
          if (v77)
          {
            v82 = v81;
            if (v81 < 0.0)
              v82 = 0.0;
          }
          if (v62)
          {
            v83 = *v62;
            v84 = v62[1];
            v62 += 2;
          }
          else
          {
            v83 = 0;
            v84 = 0;
          }
          _S10 = fmaxf(v68, 0.0);
          v86 = 8191.0;
          LOWORD(_S10) = *(_WORD *)(v37 + 2 * llroundf(fminf(_S10, 8191.0)));
          __asm { FCVT            S10, H10 }
          _H31 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          v93 = llroundf(fminf(fmaxf(v74, 0.0), 8191.0));
          __asm { FCVT            S8, H31 }
          _H31 = *(_WORD *)(v37 + 2 * v93);
          __asm { FCVT            S31, H31 }
          _H9 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          v100 = (float)((float)((float)(v42 * _S8) + (float)(v41 * _S10)) + (float)(v43 * _S31))
               + (float)(v44 * fmaxf(_S10, fmaxf(_S8, _S31)));
          v101 = 8191.0;
          if (v100 <= 8191.0)
          {
            v101 = v100;
            if (v100 < 0.0)
              v101 = 0.0;
          }
          __asm
          {
            FCVT            S9, H9
            FCVT            S11, H11
            FCVT            S12, H12
          }
          _H13 = *(_WORD *)(v38 + 2 * llroundf(v101));
          v106 = fmaxf(_S9, fmaxf(_S11, _S12));
          v107 = (float)((float)((float)(v42 * _S11) + (float)(v41 * _S9)) + (float)(v43 * _S12)) + (float)(v44 * v106);
          if (v107 <= 8191.0)
          {
            v86 = (float)((float)((float)(v42 * _S11) + (float)(v41 * _S9)) + (float)(v43 * _S12)) + (float)(v44 * v106);
            if (v107 < 0.0)
              v86 = 0.0;
          }
          __asm { FCVT            S13, H13 }
          v109 = _S10 * _S13;
          v110 = _S8 * _S13;
          _H30 = *(_WORD *)(v38 + 2 * llroundf(v86));
          v112 = _S31 * _S13;
          __asm { FCVT            S30, H30 }
          v114 = _S9 * _S30;
          v115 = _S11 * _S30;
          v116 = _S12 * _S30;
          v117 = (float)((float)(v30 * v110) + (float)(v109 * v29)) + (float)(v112 * v31);
          v118 = (float)((float)(v33 * v110) + (float)(v109 * v32)) + (float)(v112 * v34);
          v119 = (float)((float)(v36 * v110) + (float)(v109 * v35)) + (float)(v112 * v40);
          v120 = (float)((float)(v30 * v115) + (float)(v114 * v29)) + (float)(v116 * v31);
          v121 = (float)((float)(v33 * v115) + (float)(v114 * v32)) + (float)(v116 * v34);
          v122 = (float)((float)(v36 * v115) + (float)(v114 * v35)) + (float)(v116 * v40);
          _H13 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v117, 0.0), 8191.0)));
          __asm { FCVT            S12, H13 }
          _H11 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v118, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v119, 0.0), 8191.0)));
          _H9 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v120, 0.0), 8191.0)));
          _H8 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v121, 0.0), 8191.0)));
          _H31 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v122, 0.0), 8191.0)));
          if (v62)
            v130 = v83;
          else
            v130 = -1;
          if (v62)
            v131 = v84;
          else
            v131 = -1;
          v132 = 65535.0;
          v133 = 65535.0;
          if (_S12 <= 65535.0)
          {
            __asm { FCVT            S13, H13 }
            v133 = _S12;
            if (_S13 < 0.0)
              v133 = 0.0;
          }
          __asm { FCVT            S13, H11 }
          *v61 = llroundf(v133);
          v136 = 65535.0;
          if (_S13 <= 65535.0)
          {
            __asm { FCVT            S11, H11 }
            v136 = _S13;
            if (_S11 < 0.0)
              v136 = 0.0;
          }
          __asm { FCVT            S13, H10 }
          v61[1] = llroundf(v136);
          v139 = 65535.0;
          if (_S13 <= 65535.0)
          {
            __asm { FCVT            S10, H10 }
            v139 = _S13;
            if (_S10 < 0.0)
              v139 = 0.0;
          }
          __asm { FCVT            S10, H9 }
          v61[2] = llroundf(v139);
          v61[3] = v130;
          v142 = 65535.0;
          if (_S10 <= 65535.0)
          {
            __asm { FCVT            S9, H9 }
            v142 = _S10;
            if (_S9 < 0.0)
              v142 = 0.0;
          }
          __asm { FCVT            S10, H8 }
          v61[4] = llroundf(v142);
          v145 = 65535.0;
          if (_S10 <= 65535.0)
          {
            __asm { FCVT            S8, H8 }
            v145 = _S10;
            if (_S8 < 0.0)
              v145 = 0.0;
          }
          __asm { FCVT            S8, H31 }
          v61[5] = llroundf(v145);
          if (_S8 <= 65535.0)
          {
            __asm { FCVT            S30, H31 }
            _NF = _S30 < 0.0;
            v132 = _S8;
            if (_NF)
              v132 = 0.0;
          }
          v61[6] = llroundf(v132);
          v61[7] = v131;
          v59 += 2;
          v60 += 2;
          v61 += 8;
        }
        while (v10 > v59);
      }
      v58 += v16;
      v57 += v17;
      v53 += v18;
      result += v19;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Mat_TRC_l64r(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Mat_TRC_l64r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf422_TRC_Mat_TRC_l64r_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  unsigned int v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unsigned __int16 *v55;
  _WORD *v56;
  __int16 *v57;
  unsigned __int16 *v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  BOOL v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  __int16 v78;
  __int16 v79;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  __int16 v109;
  __int16 v110;
  float v111;
  float v112;
  float v115;
  float v118;
  float v121;
  float v124;

  v5 = *(_QWORD *)(result + 28);
  v6 = *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = v7 + *(_QWORD *)(result + 44);
    v12 = v8 - v7;
    v13 = *((_QWORD *)result + 19);
    v14 = (_QWORD *)*((_QWORD *)result + 7);
    v15 = (uint64_t *)*((_QWORD *)result + 8);
    v16 = *v15;
    v17 = v15[1];
    v18 = v15[2];
    v19 = **((_QWORD **)result + 17);
    *(float *)&v20 = (float)*(unsigned int *)(v13 + 128);
    v21 = 8191.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    v22 = (float)v20;
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    v23 = (float)LODWORD(a5);
    v24 = v21 * *(float *)v13;
    v25 = v21 * *(float *)(v13 + 8);
    v26 = v21 * *(float *)(v13 + 16);
    v27 = v21 * *(float *)(v13 + 20);
    v28 = v21 * *(float *)(v13 + 28);
    v29 = *(float *)(v13 + 72);
    v30 = *(float *)(v13 + 76);
    v31 = *(float *)(v13 + 80);
    v32 = *(float *)(v13 + 84);
    v33 = *(float *)(v13 + 88);
    v34 = *(float *)(v13 + 92);
    v35 = *(float *)(v13 + 96);
    v36 = *(float *)(v13 + 100);
    v37 = *(float *)(v13 + 104);
    v38 = v13 + 164;
    v39 = v13 + 16548;
    v40 = *((_QWORD *)result + 14);
    v41 = *((_QWORD *)result + 13) * a2 / v6;
    v42 = (_QWORD *)*((_QWORD *)result + 16);
    v43 = v41 + *((_QWORD *)result + 15);
    v44 = *(_QWORD *)(result + 36);
    v45 = *(unsigned __int8 *)(v13 + 124);
    v46 = 16 - v45;
    if (v45 >= 0x11)
      v46 = 0;
    v47 = *v42 + v43 * v19 + 8 * v40;
    v48 = v14[2];
    if (v48)
      result = (unsigned __int8 *)(v48 + v18 * v11 + 2 * v44);
    else
      result = 0;
    v51 = v14;
    v50 = *v14;
    v49 = v51[1];
    if (v49)
      v52 = v49 + v17 * v11 + 2 * v44;
    else
      v52 = 0;
    v53 = v50 + v16 * v11 + 2 * v44;
    do
    {
      if (v10)
      {
        v54 = 0;
        v55 = (unsigned __int16 *)v53;
        v56 = (_WORD *)v47;
        v57 = (__int16 *)result;
        do
        {
          v58 = (unsigned __int16 *)(v52 + 2 * v54);
          v59 = (float)(v58[1] >> v46) - v23;
          v60 = v25 * v59;
          v61 = v24 * (float)((float)(*v55 >> v46) - v22);
          v62 = (float)(v25 * v59) + v61;
          v63 = 8191.0;
          if (v62 <= 8191.0)
          {
            v63 = (float)(v25 * v59) + v61;
            if (v62 < 0.0)
              v63 = 0.0;
          }
          v64 = (float)(*v58 >> v46) - v23;
          v65 = (float)(v27 * v59) + (float)(v64 * v26);
          v66 = 8191.0;
          if ((float)(v61 + v65) <= 8191.0)
          {
            v66 = v61 + v65;
            if ((float)(v61 + v65) < 0.0)
              v66 = 0.0;
          }
          v67 = v28 * v64;
          v68 = v67 + v61;
          v69 = (float)(v67 + v61) <= 8191.0;
          v70 = 8191.0;
          if (v69)
          {
            v70 = v68;
            if (v68 < 0.0)
              v70 = 0.0;
          }
          v71 = v24 * (float)((float)(v55[1] >> v46) - v22);
          v72 = v60 + v71;
          v69 = (float)(v60 + v71) <= 8191.0;
          v73 = 8191.0;
          if (v69)
          {
            v73 = v72;
            if (v72 < 0.0)
              v73 = 0.0;
          }
          v74 = v65 + v71;
          v69 = (float)(v65 + v71) <= 8191.0;
          v75 = 8191.0;
          if (v69)
          {
            v75 = v74;
            if (v74 < 0.0)
              v75 = 0.0;
          }
          v76 = v67 + v71;
          v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            v77 = v76;
            if (v76 < 0.0)
              v77 = 0.0;
          }
          if (v57)
          {
            v78 = *v57;
            v79 = v57[1];
            v57 += 2;
          }
          else
          {
            v78 = 0;
            v79 = 0;
          }
          _H26 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v63, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v66, 0.0), 8191.0)));
          _H28 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          __asm
          {
            FCVT            S27, H27
            FCVT            S28, H28
          }
          _H29 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          _H30 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          __asm { FCVT            S30, H30 }
          _H31 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          __asm { FCVT            S31, H31 }
          v96 = (float)((float)(v30 * _S27) + (float)(_S26 * v29)) + (float)(_S28 * v31);
          v97 = (float)((float)(v33 * _S27) + (float)(_S26 * v32)) + (float)(_S28 * v34);
          v98 = (float)((float)(v36 * _S27) + (float)(_S26 * v35)) + (float)(_S28 * v37);
          v99 = (float)((float)(v30 * _S30) + (float)(_S29 * v29)) + (float)(_S31 * v31);
          v100 = (float)((float)(v33 * _S30) + (float)(_S29 * v32)) + (float)(_S31 * v34);
          v101 = (float)((float)(v36 * _S30) + (float)(_S29 * v35)) + (float)(_S31 * v37);
          _H9 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v96, 0.0), 8191.0)));
          __asm { FCVT            S8, H9 }
          _H31 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v97, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v99, 0.0), 8191.0)));
          _H28 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v100, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v101, 0.0), 8191.0)));
          if (v57)
            v109 = v78;
          else
            v109 = -1;
          if (v57)
            v110 = v79;
          else
            v110 = -1;
          v111 = 65535.0;
          v112 = 65535.0;
          if (_S8 <= 65535.0)
          {
            __asm { FCVT            S9, H9 }
            v112 = _S8;
            if (_S9 < 0.0)
              v112 = 0.0;
          }
          __asm { FCVT            S9, H31 }
          *v56 = llroundf(v112);
          v115 = 65535.0;
          if (_S9 <= 65535.0)
          {
            __asm { FCVT            S31, H31 }
            v115 = _S9;
            if (_S31 < 0.0)
              v115 = 0.0;
          }
          __asm { FCVT            S9, H30 }
          v56[1] = llroundf(v115);
          v118 = 65535.0;
          if (_S9 <= 65535.0)
          {
            __asm { FCVT            S30, H30 }
            v118 = _S9;
            if (_S30 < 0.0)
              v118 = 0.0;
          }
          __asm { FCVT            S30, H29 }
          v56[2] = llroundf(v118);
          v56[3] = v109;
          v121 = 65535.0;
          if (_S30 <= 65535.0)
          {
            __asm { FCVT            S29, H29 }
            v121 = _S30;
            if (_S29 < 0.0)
              v121 = 0.0;
          }
          __asm { FCVT            S30, H28 }
          v56[4] = llroundf(v121);
          v124 = 65535.0;
          if (_S30 <= 65535.0)
          {
            __asm { FCVT            S28, H28 }
            v124 = _S30;
            if (_S28 < 0.0)
              v124 = 0.0;
          }
          __asm { FCVT            S28, H27 }
          v56[5] = llroundf(v124);
          if (_S28 <= 65535.0)
          {
            __asm { FCVT            S26, H27 }
            _NF = _S26 < 0.0;
            v111 = _S28;
            if (_NF)
              v111 = 0.0;
          }
          v56[6] = llroundf(v111);
          v56[7] = v110;
          v54 += 2;
          v55 += 2;
          v56 += 8;
        }
        while (v10 > v54);
      }
      v53 += v16;
      v52 += v17;
      result += v18;
      v47 += v19;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_xf422_rgb_l64r(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_rgb_l64r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf422_rgb_l64r_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  unint64_t v40;
  unsigned __int16 *v41;
  _WORD *v42;
  __int16 *v43;
  __int16 v44;
  __int16 v45;
  unsigned __int16 *v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  unsigned int v52;
  float v53;
  float v54;
  __int16 v55;
  __int16 v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;

  v2 = *(_QWORD *)(result + 28);
  v3 = *result;
  v4 = v2 * a2 / v3;
  v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    v6 = 0;
    v7 = *(_QWORD *)(result + 20);
    v8 = v4 + *(_QWORD *)(result + 44);
    v9 = v5 - v4;
    v10 = *((_QWORD *)result + 19);
    v12 = (uint64_t *)*((_QWORD *)result + 7);
    v11 = (uint64_t *)*((_QWORD *)result + 8);
    v13 = *v11;
    v14 = v11[1];
    v15 = v11[2];
    v16 = **((_QWORD **)result + 17);
    *(float *)&v17 = (float)*(unsigned int *)(v10 + 128);
    *(float *)&v18 = (float)*(unsigned int *)(v10 + 136);
    v19 = *(float *)&v18 / *(float *)&v17;
    LOWORD(v17) = *(_WORD *)(v10 + 140);
    v20 = (float)v17;
    LOWORD(v18) = *(_WORD *)(v10 + 142);
    v21 = (float)v18;
    v22 = v19 * *(float *)v10;
    v23 = v19 * *(float *)(v10 + 8);
    v24 = v19 * *(float *)(v10 + 16);
    v25 = v19 * *(float *)(v10 + 20);
    v26 = v19 * *(float *)(v10 + 28);
    v27 = *((_QWORD *)result + 14);
    v28 = *((_QWORD *)result + 13) * a2 / v3;
    v29 = (_QWORD *)*((_QWORD *)result + 16);
    v30 = v28 + *((_QWORD *)result + 15);
    v31 = *(_QWORD *)(result + 36);
    LODWORD(v10) = *(unsigned __int8 *)(v10 + 124);
    v32 = 16 - v10;
    if (v10 >= 0x11)
      v32 = 0;
    v33 = *v29 + v30 * v16 + 8 * v27;
    v34 = v12[2];
    if (v34)
      v35 = v34 + v15 * v8 + 2 * v31;
    else
      v35 = 0;
    v37 = *v12;
    v36 = v12[1];
    v38 = v36 + v14 * v8 + 2 * v31;
    if (!v36)
      v38 = 0;
    result = (unsigned __int8 *)(v37 + v13 * v8 + 2 * v31);
    v39 = v32;
    do
    {
      if (v7)
      {
        v40 = 0;
        v41 = (unsigned __int16 *)result;
        v42 = (_WORD *)v33;
        v43 = (__int16 *)v35;
        do
        {
          if (v43)
          {
            v44 = *v43;
            v45 = v43[1];
            v43 += 2;
          }
          else
          {
            v44 = 0;
            v45 = 0;
          }
          v46 = (unsigned __int16 *)(v38 + 2 * v40);
          v47 = (float)(*v46 >> v39) - v21;
          v48 = (float)(v46[1] >> v39) - v21;
          v49 = v23 * v48;
          v50 = (float)(v25 * v48) + (float)(v47 * v24);
          v51 = v22 * (float)((float)(*v41 >> v39) - v20);
          v52 = v41[1];
          v53 = v49 + v51;
          v54 = v51 + v50;
          if (v43)
            v55 = v44;
          else
            v55 = -1;
          if (v43)
            v56 = v45;
          else
            v56 = -1;
          if (v53 < 0.0)
            v57 = 0.0;
          else
            v57 = v49 + v51;
          if (v53 <= 65535.0)
            v58 = v57;
          else
            v58 = 65535.0;
          *v42 = llroundf(v58);
          v59 = 65535.0;
          if (v54 <= 65535.0)
          {
            v59 = v51 + v50;
            if (v54 < 0.0)
              v59 = 0.0;
          }
          v60 = v26 * v47;
          v61 = v22 * (float)((float)(int)(v52 >> v39) - v20);
          v62 = v60 + v51;
          v63 = v49 + v61;
          v42[1] = llroundf(v59);
          if (v62 < 0.0)
            v64 = 0.0;
          else
            v64 = v62;
          if (v62 <= 65535.0)
            v65 = v64;
          else
            v65 = 65535.0;
          v66 = v50 + v61;
          v42[2] = llroundf(v65);
          v42[3] = v55;
          if (v63 < 0.0)
            v67 = 0.0;
          else
            v67 = v63;
          if (v63 <= 65535.0)
            v68 = v67;
          else
            v68 = 65535.0;
          v42[4] = llroundf(v68);
          v69 = 65535.0;
          if (v66 <= 65535.0)
          {
            v69 = v66;
            if (v66 < 0.0)
              v69 = 0.0;
          }
          v70 = v60 + v61;
          v42[5] = llroundf(v69);
          v71 = 65535.0;
          if (v70 <= 65535.0)
          {
            v71 = v70;
            if (v70 < 0.0)
              v71 = 0.0;
          }
          v42[6] = llroundf(v71);
          v42[7] = v56;
          v40 += 2;
          v41 += 2;
          v42 += 8;
        }
        while (v7 > v40);
      }
      result += v13;
      v38 += v14;
      v35 += v15;
      v33 += v16;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Tone_Mat_TRC_b64a(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Tone_Mat_TRC_b64a_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf422_TRC_Tone_Mat_TRC_b64a_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  uint64_t v48;
  unsigned int v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unsigned __int16 *v59;
  _WORD *v60;
  unsigned __int16 *v61;
  unsigned __int16 *v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  BOOL v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  unsigned int v82;
  unsigned int v83;
  float v85;
  unsigned int v92;
  float v99;
  float v100;
  float v105;
  float v106;
  float v108;
  float v109;
  float v111;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  unsigned int v129;
  unsigned int v130;
  float v131;
  float v132;
  float v135;
  float v138;
  unsigned int v140;
  float v142;
  float v145;
  float v149;

  v5 = *(_QWORD *)(result + 28);
  v6 = *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = v7 + *(_QWORD *)(result + 44);
    v12 = v8 - v7;
    v13 = *((_QWORD *)result + 19);
    v14 = (_QWORD *)*((_QWORD *)result + 7);
    v15 = (uint64_t *)*((_QWORD *)result + 8);
    v16 = *v15;
    v17 = v15[1];
    v18 = v15[2];
    v19 = **((_QWORD **)result + 17);
    *(float *)&v20 = (float)*(unsigned int *)(v13 + 128);
    v21 = 8191.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    v22 = (float)v20;
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    v23 = (float)LODWORD(a5);
    v24 = v21 * *(float *)v13;
    v149 = v21 * *(float *)(v13 + 8);
    v25 = v21 * *(float *)(v13 + 16);
    v26 = v21 * *(float *)(v13 + 20);
    v27 = v21 * *(float *)(v13 + 28);
    v28 = *(float *)(v13 + 72);
    v29 = *(float *)(v13 + 76);
    v30 = *(float *)(v13 + 80);
    v31 = *(float *)(v13 + 84);
    v32 = *(float *)(v13 + 88);
    v33 = *(float *)(v13 + 92);
    v34 = *(float *)(v13 + 96);
    v35 = *(float *)(v13 + 100);
    v36 = v13 + 164;
    v37 = v13 + 16548;
    v38 = v13 + 32932;
    v39 = *(float *)(v13 + 104);
    v40 = *(float *)(v13 + 108);
    v41 = *(float *)(v13 + 112);
    v42 = *(float *)(v13 + 116);
    v43 = *(float *)(v13 + 120);
    v44 = *((_QWORD *)result + 14);
    v45 = *((_QWORD *)result + 13) * a2 / v6;
    v46 = (_QWORD *)*((_QWORD *)result + 16);
    v47 = v45 + *((_QWORD *)result + 15);
    v48 = *(_QWORD *)(result + 36);
    v49 = *(unsigned __int8 *)(v13 + 124);
    v50 = 16 - v49;
    if (v49 >= 0x11)
      v50 = 0;
    result = (unsigned __int8 *)(*v46 + v47 * v19 + 8 * v44);
    v51 = v14[2];
    if (v51)
      v52 = v51 + v18 * v11 + 2 * v48;
    else
      v52 = 0;
    v55 = v14;
    v54 = *v14;
    v53 = v55[1];
    if (v53)
      v56 = v53 + v17 * v11 + 2 * v48;
    else
      v56 = 0;
    v57 = v54 + v16 * v11 + 2 * v48;
    do
    {
      if (v10)
      {
        v58 = 0;
        v59 = (unsigned __int16 *)v57;
        v60 = result;
        v61 = (unsigned __int16 *)v52;
        do
        {
          v62 = (unsigned __int16 *)(v56 + 2 * v58);
          v63 = (float)(v62[1] >> v50) - v23;
          v64 = v149 * v63;
          v65 = v24 * (float)((float)(*v59 >> v50) - v22);
          v66 = (float)(v149 * v63) + v65;
          v67 = 8191.0;
          if (v66 <= 8191.0)
          {
            v67 = (float)(v149 * v63) + v65;
            if (v66 < 0.0)
              v67 = 0.0;
          }
          v68 = (float)(*v62 >> v50) - v23;
          v69 = (float)(v26 * v63) + (float)(v68 * v25);
          v70 = 8191.0;
          if ((float)(v65 + v69) <= 8191.0)
          {
            v70 = v65 + v69;
            if ((float)(v65 + v69) < 0.0)
              v70 = 0.0;
          }
          v71 = v27 * v68;
          v72 = (float)(v27 * v68) + v65;
          v73 = 8191.0;
          if (v72 <= 8191.0)
          {
            v73 = v72;
            if (v72 < 0.0)
              v73 = 0.0;
          }
          v74 = v24 * (float)((float)(v59[1] >> v50) - v22);
          v75 = v64 + v74;
          v76 = (float)(v64 + v74) <= 8191.0;
          v77 = 8191.0;
          if (v76)
          {
            v77 = v75;
            if (v75 < 0.0)
              v77 = 0.0;
          }
          v78 = v69 + v74;
          v79 = 8191.0;
          if (v78 <= 8191.0)
          {
            v79 = v78;
            if (v78 < 0.0)
              v79 = 0.0;
          }
          v80 = v71 + v74;
          v76 = (float)(v71 + v74) <= 8191.0;
          v81 = 8191.0;
          if (v76)
          {
            v81 = v80;
            if (v80 < 0.0)
              v81 = 0.0;
          }
          if (v61)
          {
            v82 = *v61;
            v83 = v61[1];
            v61 += 2;
          }
          else
          {
            v82 = 0;
            v83 = 0;
          }
          _S10 = fmaxf(v67, 0.0);
          v85 = 8191.0;
          LOWORD(_S10) = *(_WORD *)(v36 + 2 * llroundf(fminf(_S10, 8191.0)));
          __asm { FCVT            S10, H10 }
          _H31 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          v92 = llroundf(fminf(fmaxf(v73, 0.0), 8191.0));
          __asm { FCVT            S8, H31 }
          _H31 = *(_WORD *)(v36 + 2 * v92);
          __asm { FCVT            S31, H31 }
          _H9 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          v99 = (float)((float)((float)(v41 * _S8) + (float)(v40 * _S10)) + (float)(v42 * _S31))
              + (float)(v43 * fmaxf(_S10, fmaxf(_S8, _S31)));
          v100 = 8191.0;
          if (v99 <= 8191.0)
          {
            v100 = v99;
            if (v99 < 0.0)
              v100 = 0.0;
          }
          __asm
          {
            FCVT            S9, H9
            FCVT            S11, H11
            FCVT            S12, H12
          }
          _H13 = *(_WORD *)(v37 + 2 * llroundf(v100));
          v105 = fmaxf(_S9, fmaxf(_S11, _S12));
          v106 = (float)((float)((float)(v41 * _S11) + (float)(v40 * _S9)) + (float)(v42 * _S12)) + (float)(v43 * v105);
          if (v106 <= 8191.0)
          {
            v85 = (float)((float)((float)(v41 * _S11) + (float)(v40 * _S9)) + (float)(v42 * _S12)) + (float)(v43 * v105);
            if (v106 < 0.0)
              v85 = 0.0;
          }
          __asm { FCVT            S13, H13 }
          v108 = _S10 * _S13;
          v109 = _S8 * _S13;
          _H30 = *(_WORD *)(v37 + 2 * llroundf(v85));
          v111 = _S31 * _S13;
          __asm { FCVT            S30, H30 }
          v113 = _S9 * _S30;
          v114 = _S11 * _S30;
          v115 = _S12 * _S30;
          v116 = (float)((float)(v29 * v109) + (float)(v108 * v28)) + (float)(v111 * v30);
          v117 = (float)((float)(v32 * v109) + (float)(v108 * v31)) + (float)(v111 * v33);
          v118 = (float)((float)(v35 * v109) + (float)(v108 * v34)) + (float)(v111 * v39);
          v119 = (float)((float)(v29 * v114) + (float)(v113 * v28)) + (float)(v115 * v30);
          v120 = (float)((float)(v32 * v114) + (float)(v113 * v31)) + (float)(v115 * v33);
          v121 = (float)((float)(v35 * v114) + (float)(v113 * v34)) + (float)(v115 * v39);
          _H14 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v116, 0.0), 8191.0)));
          __asm { FCVT            S13, H14 }
          _H12 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v117, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v118, 0.0), 8191.0)));
          _H9 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v119, 0.0), 8191.0)));
          _H8 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v120, 0.0), 8191.0)));
          _H31 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v121, 0.0), 8191.0)));
          if (v61)
            v129 = v82;
          else
            v129 = -1;
          if (v61)
            v130 = v83;
          else
            v130 = -1;
          v131 = 65535.0;
          v132 = 65535.0;
          if (_S13 <= 65535.0)
          {
            __asm { FCVT            S4, H14 }
            v132 = _S13;
            if (_S4 < 0.0)
              v132 = 0.0;
          }
          __asm { FCVT            S14, H12 }
          v135 = 65535.0;
          if (_S14 <= 65535.0)
          {
            __asm { FCVT            S4, H12 }
            v135 = _S14;
            if (_S4 < 0.0)
              v135 = 0.0;
          }
          __asm { FCVT            S14, H10 }
          v138 = 65535.0;
          if (_S14 <= 65535.0)
          {
            __asm { FCVT            S4, H10 }
            v138 = _S14;
            if (_S4 < 0.0)
              v138 = 0.0;
          }
          v140 = llroundf(v132);
          __asm { FCVT            S11, H9 }
          *v60 = bswap32(v129) >> 16;
          v60[1] = __rev16(v140);
          v60[2] = __rev16(llroundf(v135));
          v60[3] = __rev16(llroundf(v138));
          v142 = 65535.0;
          if (_S11 <= 65535.0)
          {
            __asm { FCVT            S4, H9 }
            v142 = _S11;
            if (_S4 < 0.0)
              v142 = 0.0;
          }
          __asm { FCVT            S11, H8 }
          v145 = 65535.0;
          if (_S11 <= 65535.0)
          {
            __asm { FCVT            S4, H8 }
            v145 = _S11;
            if (_S4 < 0.0)
              v145 = 0.0;
          }
          __asm { FCVT            S8, H31 }
          if (_S8 <= 65535.0)
          {
            __asm { FCVT            S4, H31 }
            v131 = _S8;
            if (_S4 < 0.0)
              v131 = 0.0;
          }
          v60[4] = bswap32(v130) >> 16;
          v60[5] = __rev16(llroundf(v142));
          v60[6] = __rev16(llroundf(v145));
          v60[7] = __rev16(llroundf(v131));
          v58 += 2;
          v59 += 2;
          v60 += 8;
        }
        while (v10 > v58);
      }
      v57 += v16;
      v56 += v17;
      v52 += v18;
      result += v19;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Mat_TRC_b64a(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Mat_TRC_b64a_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf422_TRC_Mat_TRC_b64a_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  unsigned int v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unsigned __int16 *v55;
  _WORD *v56;
  unsigned __int16 *v57;
  unsigned __int16 *v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  BOOL v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  unsigned int v78;
  unsigned int v79;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  unsigned int v109;
  unsigned int v110;
  float v111;
  float v112;
  float v115;
  float v118;
  unsigned int v120;
  float v122;
  float v125;

  v5 = *(_QWORD *)(result + 28);
  v6 = *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = v7 + *(_QWORD *)(result + 44);
    v12 = v8 - v7;
    v13 = *((_QWORD *)result + 19);
    v14 = (_QWORD *)*((_QWORD *)result + 7);
    v15 = (uint64_t *)*((_QWORD *)result + 8);
    v16 = *v15;
    v17 = v15[1];
    v18 = v15[2];
    v19 = **((_QWORD **)result + 17);
    *(float *)&v20 = (float)*(unsigned int *)(v13 + 128);
    v21 = 8191.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    v22 = (float)v20;
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    v23 = (float)LODWORD(a5);
    v24 = v21 * *(float *)v13;
    v25 = v21 * *(float *)(v13 + 8);
    v26 = v21 * *(float *)(v13 + 16);
    v27 = v21 * *(float *)(v13 + 20);
    v28 = v21 * *(float *)(v13 + 28);
    v29 = *(float *)(v13 + 72);
    v30 = *(float *)(v13 + 76);
    v31 = *(float *)(v13 + 80);
    v32 = *(float *)(v13 + 84);
    v33 = *(float *)(v13 + 88);
    v34 = *(float *)(v13 + 92);
    v35 = *(float *)(v13 + 96);
    v36 = *(float *)(v13 + 100);
    v37 = *(float *)(v13 + 104);
    v38 = v13 + 164;
    v39 = v13 + 16548;
    v40 = *((_QWORD *)result + 14);
    v41 = *((_QWORD *)result + 13) * a2 / v6;
    v42 = (_QWORD *)*((_QWORD *)result + 16);
    v43 = v41 + *((_QWORD *)result + 15);
    v44 = *(_QWORD *)(result + 36);
    v45 = *(unsigned __int8 *)(v13 + 124);
    v46 = 16 - v45;
    if (v45 >= 0x11)
      v46 = 0;
    v47 = *v42 + v43 * v19 + 8 * v40;
    v48 = v14[2];
    if (v48)
      result = (unsigned __int8 *)(v48 + v18 * v11 + 2 * v44);
    else
      result = 0;
    v51 = v14;
    v50 = *v14;
    v49 = v51[1];
    if (v49)
      v52 = v49 + v17 * v11 + 2 * v44;
    else
      v52 = 0;
    v53 = v50 + v16 * v11 + 2 * v44;
    do
    {
      if (v10)
      {
        v54 = 0;
        v55 = (unsigned __int16 *)v53;
        v56 = (_WORD *)v47;
        v57 = (unsigned __int16 *)result;
        do
        {
          v58 = (unsigned __int16 *)(v52 + 2 * v54);
          v59 = (float)(v58[1] >> v46) - v23;
          v60 = v25 * v59;
          v61 = v24 * (float)((float)(*v55 >> v46) - v22);
          v62 = (float)(v25 * v59) + v61;
          v63 = 8191.0;
          if (v62 <= 8191.0)
          {
            v63 = (float)(v25 * v59) + v61;
            if (v62 < 0.0)
              v63 = 0.0;
          }
          v64 = (float)(*v58 >> v46) - v23;
          v65 = (float)(v27 * v59) + (float)(v64 * v26);
          v66 = 8191.0;
          if ((float)(v61 + v65) <= 8191.0)
          {
            v66 = v61 + v65;
            if ((float)(v61 + v65) < 0.0)
              v66 = 0.0;
          }
          v67 = v28 * v64;
          v68 = v67 + v61;
          v69 = (float)(v67 + v61) <= 8191.0;
          v70 = 8191.0;
          if (v69)
          {
            v70 = v68;
            if (v68 < 0.0)
              v70 = 0.0;
          }
          v71 = v24 * (float)((float)(v55[1] >> v46) - v22);
          v72 = v60 + v71;
          v69 = (float)(v60 + v71) <= 8191.0;
          v73 = 8191.0;
          if (v69)
          {
            v73 = v72;
            if (v72 < 0.0)
              v73 = 0.0;
          }
          v74 = v65 + v71;
          v69 = (float)(v65 + v71) <= 8191.0;
          v75 = 8191.0;
          if (v69)
          {
            v75 = v74;
            if (v74 < 0.0)
              v75 = 0.0;
          }
          v76 = v67 + v71;
          v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            v77 = v76;
            if (v76 < 0.0)
              v77 = 0.0;
          }
          if (v57)
          {
            v78 = *v57;
            v79 = v57[1];
            v57 += 2;
          }
          else
          {
            v78 = 0;
            v79 = 0;
          }
          _H26 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v63, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v66, 0.0), 8191.0)));
          _H28 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          __asm
          {
            FCVT            S27, H27
            FCVT            S28, H28
          }
          _H29 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          _H30 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          __asm { FCVT            S30, H30 }
          _H31 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          __asm { FCVT            S31, H31 }
          v96 = (float)((float)(v30 * _S27) + (float)(_S26 * v29)) + (float)(_S28 * v31);
          v97 = (float)((float)(v33 * _S27) + (float)(_S26 * v32)) + (float)(_S28 * v34);
          v98 = (float)((float)(v36 * _S27) + (float)(_S26 * v35)) + (float)(_S28 * v37);
          v99 = (float)((float)(v30 * _S30) + (float)(_S29 * v29)) + (float)(_S31 * v31);
          v100 = (float)((float)(v33 * _S30) + (float)(_S29 * v32)) + (float)(_S31 * v34);
          v101 = (float)((float)(v36 * _S30) + (float)(_S29 * v35)) + (float)(_S31 * v37);
          _H10 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v96, 0.0), 8191.0)));
          __asm { FCVT            S9, H10 }
          _H8 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v97, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v99, 0.0), 8191.0)));
          _H28 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v100, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v101, 0.0), 8191.0)));
          if (v57)
            v109 = v78;
          else
            v109 = -1;
          if (v57)
            v110 = v79;
          else
            v110 = -1;
          v111 = 65535.0;
          v112 = 65535.0;
          if (_S9 <= 65535.0)
          {
            __asm { FCVT            S31, H10 }
            _NF = _S31 < 0.0;
            v112 = _S9;
            if (_NF)
              v112 = 0.0;
          }
          __asm { FCVT            S10, H8 }
          v115 = 65535.0;
          if (_S10 <= 65535.0)
          {
            __asm { FCVT            S8, H8 }
            v115 = _S10;
            if (_S8 < 0.0)
              v115 = 0.0;
          }
          __asm { FCVT            S10, H30 }
          v118 = 65535.0;
          if (_S10 <= 65535.0)
          {
            __asm { FCVT            S30, H30 }
            v118 = _S10;
            if (_S30 < 0.0)
              v118 = 0.0;
          }
          v120 = llroundf(v112);
          __asm { FCVT            S31, H29 }
          *v56 = bswap32(v109) >> 16;
          v56[1] = __rev16(v120);
          v56[2] = __rev16(llroundf(v115));
          v56[3] = __rev16(llroundf(v118));
          v122 = 65535.0;
          if (_S31 <= 65535.0)
          {
            __asm { FCVT            S29, H29 }
            v122 = _S31;
            if (_S29 < 0.0)
              v122 = 0.0;
          }
          __asm { FCVT            S31, H28 }
          v125 = 65535.0;
          if (_S31 <= 65535.0)
          {
            __asm { FCVT            S28, H28 }
            v125 = _S31;
            if (_S28 < 0.0)
              v125 = 0.0;
          }
          __asm { FCVT            S28, H27 }
          if (_S28 <= 65535.0)
          {
            __asm { FCVT            S26, H27 }
            _NF = _S26 < 0.0;
            v111 = _S28;
            if (_NF)
              v111 = 0.0;
          }
          v56[4] = bswap32(v110) >> 16;
          v56[5] = __rev16(llroundf(v122));
          v56[6] = __rev16(llroundf(v125));
          v56[7] = __rev16(llroundf(v111));
          v54 += 2;
          v55 += 2;
          v56 += 8;
        }
        while (v10 > v54);
      }
      v53 += v16;
      v52 += v17;
      result += v18;
      v47 += v19;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_xf422_rgb_b64a(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_rgb_b64a_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf422_rgb_b64a_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  unint64_t v40;
  unsigned __int16 *v41;
  _WORD *v42;
  unsigned __int16 *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned __int16 *v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  unsigned int v54;
  unsigned int v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  unsigned int v63;
  float v64;
  unsigned int v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;

  v2 = *(_QWORD *)(result + 28);
  v3 = *result;
  v4 = v2 * a2 / v3;
  v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    v6 = 0;
    v7 = *(_QWORD *)(result + 20);
    v8 = v4 + *(_QWORD *)(result + 44);
    v9 = v5 - v4;
    v10 = *((_QWORD *)result + 19);
    v12 = (uint64_t *)*((_QWORD *)result + 7);
    v11 = (uint64_t *)*((_QWORD *)result + 8);
    v13 = *v11;
    v14 = v11[1];
    v15 = v11[2];
    v16 = **((_QWORD **)result + 17);
    *(float *)&v17 = (float)*(unsigned int *)(v10 + 128);
    *(float *)&v18 = (float)*(unsigned int *)(v10 + 136);
    v19 = *(float *)&v18 / *(float *)&v17;
    LOWORD(v17) = *(_WORD *)(v10 + 140);
    v20 = (float)v17;
    LOWORD(v18) = *(_WORD *)(v10 + 142);
    v21 = (float)v18;
    v22 = v19 * *(float *)v10;
    v23 = v19 * *(float *)(v10 + 8);
    v24 = v19 * *(float *)(v10 + 16);
    v25 = v19 * *(float *)(v10 + 20);
    v26 = v19 * *(float *)(v10 + 28);
    v27 = *((_QWORD *)result + 14);
    v28 = *((_QWORD *)result + 13) * a2 / v3;
    v29 = (_QWORD *)*((_QWORD *)result + 16);
    v30 = v28 + *((_QWORD *)result + 15);
    v31 = *(_QWORD *)(result + 36);
    LODWORD(v10) = *(unsigned __int8 *)(v10 + 124);
    v32 = 16 - v10;
    if (v10 >= 0x11)
      v32 = 0;
    v33 = *v29 + v30 * v16 + 8 * v27;
    v34 = v12[2];
    if (v34)
      v35 = v34 + v15 * v8 + 2 * v31;
    else
      v35 = 0;
    v37 = *v12;
    v36 = v12[1];
    v38 = v36 + v14 * v8 + 2 * v31;
    if (!v36)
      v38 = 0;
    result = (unsigned __int8 *)(v37 + v13 * v8 + 2 * v31);
    v39 = v32;
    do
    {
      if (v7)
      {
        v40 = 0;
        v41 = (unsigned __int16 *)result;
        v42 = (_WORD *)v33;
        v43 = (unsigned __int16 *)v35;
        do
        {
          if (v43)
          {
            v44 = *v43;
            v45 = v43[1];
            v43 += 2;
          }
          else
          {
            v44 = 0;
            v45 = 0;
          }
          v46 = (unsigned __int16 *)(v38 + 2 * v40);
          v47 = (float)(*v46 >> v39) - v21;
          v48 = (float)(v46[1] >> v39) - v21;
          v49 = v23 * v48;
          v50 = (float)(v25 * v48) + (float)(v47 * v24);
          v51 = v22 * (float)((float)(*v41 >> v39) - v20);
          v52 = v49 + v51;
          v53 = v51 + v50;
          if (v43)
            v54 = v44;
          else
            v54 = -1;
          if (v43)
            v55 = v45;
          else
            v55 = -1;
          if (v52 < 0.0)
            v56 = 0.0;
          else
            v56 = v49 + v51;
          if (v52 <= 65535.0)
            v57 = v56;
          else
            v57 = 65535.0;
          v58 = 65535.0;
          if (v53 <= 65535.0)
          {
            v58 = v51 + v50;
            if (v53 < 0.0)
              v58 = 0.0;
          }
          v59 = v26 * v47;
          v60 = v22 * (float)((float)(v41[1] >> v39) - v20);
          v61 = v59 + v51;
          v62 = v49 + v60;
          v63 = llroundf(v57);
          v64 = v50 + v60;
          v65 = llroundf(v58);
          if (v61 < 0.0)
            v66 = 0.0;
          else
            v66 = v61;
          if (v61 > 65535.0)
            v66 = 65535.0;
          *v42 = bswap32(v54) >> 16;
          v42[1] = __rev16(v63);
          v42[2] = __rev16(v65);
          v42[3] = __rev16(llroundf(v66));
          if (v62 < 0.0)
            v67 = 0.0;
          else
            v67 = v62;
          if (v62 > 65535.0)
            v67 = 65535.0;
          v68 = 65535.0;
          if (v64 <= 65535.0)
          {
            v68 = v64;
            if (v64 < 0.0)
              v68 = 0.0;
          }
          v69 = v59 + v60;
          v70 = 65535.0;
          if (v69 <= 65535.0)
          {
            v70 = v69;
            if (v69 < 0.0)
              v70 = 0.0;
          }
          v42[4] = bswap32(v55) >> 16;
          v42[5] = __rev16(llroundf(v67));
          v42[6] = __rev16(llroundf(v68));
          v42[7] = __rev16(llroundf(v70));
          v40 += 2;
          v41 += 2;
          v42 += 8;
        }
        while (v7 > v40);
      }
      result += v13;
      v38 += v14;
      v35 += v15;
      v33 += v16;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Tone_Mat_TRC_RGhA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Tone_Mat_TRC_RGhA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf422_TRC_Tone_Mat_TRC_RGhA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  uint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  uint64_t v49;
  unsigned int v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unsigned __int16 *v60;
  _WORD *v61;
  unsigned __int16 *v62;
  unsigned __int16 *v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  BOOL v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  unsigned int v83;
  unsigned int v84;
  float v86;
  float v99;
  float v100;
  float v105;
  float v106;
  float v108;
  float v109;
  float v110;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  __int16 v122;
  __int16 v123;
  __int16 v124;
  float v127;
  float v128;
  float v129;

  v5 = *(_QWORD *)(result + 28);
  v6 = *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = v7 + *(_QWORD *)(result + 44);
    v12 = v8 - v7;
    v13 = *((_QWORD *)result + 19);
    v14 = (_QWORD *)*((_QWORD *)result + 7);
    v15 = (uint64_t *)*((_QWORD *)result + 8);
    v16 = *v15;
    v17 = v15[1];
    v18 = v15[2];
    v19 = **((_QWORD **)result + 17);
    *(float *)&v20 = (float)*(unsigned int *)(v13 + 128);
    v21 = 8191.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    v22 = (float)v20;
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    v23 = (float)LODWORD(a5);
    v24 = v21 * *(float *)v13;
    v25 = v21 * *(float *)(v13 + 8);
    v26 = v21 * *(float *)(v13 + 16);
    v27 = v21 * *(float *)(v13 + 20);
    v28 = v21 * *(float *)(v13 + 28);
    v29 = *(float *)(v13 + 72);
    v30 = *(float *)(v13 + 76);
    v31 = *(float *)(v13 + 80);
    v32 = *(float *)(v13 + 84);
    v33 = *(float *)(v13 + 88);
    v34 = *(float *)(v13 + 92);
    v35 = *(float *)(v13 + 96);
    v36 = *(float *)(v13 + 100);
    v37 = v13 + 164;
    v38 = v13 + 16548;
    v39 = v13 + 32932;
    v40 = *(float *)(v13 + 104);
    v41 = *(float *)(v13 + 108);
    v42 = *(float *)(v13 + 112);
    v43 = *(float *)(v13 + 116);
    v44 = *(float *)(v13 + 120);
    v45 = *((_QWORD *)result + 14);
    v46 = *((_QWORD *)result + 13) * a2 / v6;
    v47 = (_QWORD *)*((_QWORD *)result + 16);
    v48 = v46 + *((_QWORD *)result + 15);
    v49 = *(_QWORD *)(result + 36);
    v50 = *(unsigned __int8 *)(v13 + 124);
    v51 = 16 - v50;
    if (v50 >= 0x11)
      v51 = 0;
    result = (unsigned __int8 *)(*v47 + v48 * v19 + 8 * v45);
    v52 = v14[2];
    if (v52)
      v53 = v52 + v18 * v11 + 2 * v49;
    else
      v53 = 0;
    v56 = v14;
    v55 = *v14;
    v54 = v56[1];
    if (v54)
      v57 = v54 + v17 * v11 + 2 * v49;
    else
      v57 = 0;
    v58 = v55 + v16 * v11 + 2 * v49;
    do
    {
      if (v10)
      {
        v59 = 0;
        v60 = (unsigned __int16 *)v58;
        v61 = result;
        v62 = (unsigned __int16 *)v53;
        do
        {
          v63 = (unsigned __int16 *)(v57 + 2 * v59);
          v64 = (float)(v63[1] >> v51) - v23;
          v65 = v25 * v64;
          v66 = v24 * (float)((float)(*v60 >> v51) - v22);
          v67 = (float)(v25 * v64) + v66;
          v68 = 8191.0;
          if (v67 <= 8191.0)
          {
            v68 = (float)(v25 * v64) + v66;
            if (v67 < 0.0)
              v68 = 0.0;
          }
          v69 = (float)(*v63 >> v51) - v23;
          v70 = (float)(v27 * v64) + (float)(v69 * v26);
          v71 = 8191.0;
          if ((float)(v66 + v70) <= 8191.0)
          {
            v71 = v66 + v70;
            if ((float)(v66 + v70) < 0.0)
              v71 = 0.0;
          }
          v72 = v28 * v69;
          v73 = (float)(v28 * v69) + v66;
          v74 = 8191.0;
          if (v73 <= 8191.0)
          {
            v74 = v73;
            if (v73 < 0.0)
              v74 = 0.0;
          }
          v75 = v24 * (float)((float)(v60[1] >> v51) - v22);
          v76 = v65 + v75;
          v77 = (float)(v65 + v75) <= 8191.0;
          v78 = 8191.0;
          if (v77)
          {
            v78 = v76;
            if (v76 < 0.0)
              v78 = 0.0;
          }
          v79 = v70 + v75;
          v80 = 8191.0;
          if (v79 <= 8191.0)
          {
            v80 = v79;
            if (v79 < 0.0)
              v80 = 0.0;
          }
          v81 = v72 + v75;
          v77 = (float)(v72 + v75) <= 8191.0;
          v82 = 8191.0;
          if (v77)
          {
            v82 = v81;
            if (v81 < 0.0)
              v82 = 0.0;
          }
          if (v62)
          {
            v83 = *v62;
            v84 = v62[1];
            v62 += 2;
          }
          else
          {
            v83 = 0;
            v84 = 0;
          }
          _S10 = fmaxf(v68, 0.0);
          v86 = 8191.0;
          LOWORD(_S10) = *(_WORD *)(v37 + 2 * llroundf(fminf(_S10, 8191.0)));
          __asm { FCVT            S10, H10 }
          _H31 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          __asm { FCVT            S31, H31 }
          _H8 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          __asm { FCVT            S8, H8 }
          _H9 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          v99 = (float)((float)((float)(v42 * _S31) + (float)(v41 * _S10)) + (float)(v43 * _S8))
              + (float)(v44 * fmaxf(_S10, fmaxf(_S31, _S8)));
          v100 = 8191.0;
          if (v99 <= 8191.0)
          {
            v100 = v99;
            if (v99 < 0.0)
              v100 = 0.0;
          }
          __asm
          {
            FCVT            S9, H9
            FCVT            S11, H11
            FCVT            S12, H12
          }
          _H13 = *(_WORD *)(v38 + 2 * llroundf(v100));
          v105 = fmaxf(_S9, fmaxf(_S11, _S12));
          v106 = (float)((float)((float)(v42 * _S11) + (float)(v41 * _S9)) + (float)(v43 * _S12)) + (float)(v44 * v105);
          if (v106 <= 8191.0)
          {
            v86 = (float)((float)((float)(v42 * _S11) + (float)(v41 * _S9)) + (float)(v43 * _S12)) + (float)(v44 * v105);
            if (v106 < 0.0)
              v86 = 0.0;
          }
          __asm { FCVT            S13, H13 }
          v108 = _S10 * _S13;
          v109 = _S31 * _S13;
          v110 = _S8 * _S13;
          _H30 = *(_WORD *)(v38 + 2 * llroundf(v86));
          __asm { FCVT            S30, H30 }
          v113 = _S9 * _S30;
          v114 = _S11 * _S30;
          v115 = _S12 * _S30;
          v116 = (float)((float)(v30 * v109) + (float)(v108 * v29)) + (float)(v110 * v31);
          v117 = (float)((float)(v33 * v109) + (float)(v108 * v32)) + (float)(v110 * v34);
          v118 = (float)((float)(v36 * v109) + (float)(v108 * v35)) + (float)(v110 * v40);
          v119 = (float)((float)(v30 * v114) + (float)(v113 * v29)) + (float)(v115 * v31);
          v120 = (float)((float)(v33 * v114) + (float)(v113 * v32)) + (float)(v115 * v34);
          v121 = (float)((float)(v36 * v114) + (float)(v113 * v35)) + (float)(v115 * v40);
          LOWORD(v113) = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v116, 0.0), 8191.0)));
          LOWORD(v114) = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v117, 0.0), 8191.0)));
          v127 = fminf(fmaxf(v118, 0.0), 8191.0);
          LOWORD(v127) = *(_WORD *)(v39 + 2 * llroundf(v127));
          v122 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v119, 0.0), 8191.0)));
          v123 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v120, 0.0), 8191.0)));
          v124 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v121, 0.0), 8191.0)));
          _S12 = (float)v83 * 0.000015259;
          __asm { FCVT            H12, S12 }
          _S13 = (float)v84 * 0.000015259;
          __asm { FCVT            H13, S13 }
          *v61 = LOWORD(v113);
          v61[1] = LOWORD(v114);
          v61[2] = LOWORD(v127);
          LOWORD(v127) = 15360;
          if (v62)
            v128 = _S12;
          else
            v128 = v127;
          v61[3] = LOWORD(v128);
          v61[4] = v122;
          v61[5] = v123;
          v61[6] = v124;
          if (v62)
            v129 = _S13;
          else
            v129 = v127;
          v61[7] = LOWORD(v129);
          v59 += 2;
          v60 += 2;
          v61 += 8;
        }
        while (v10 > v59);
      }
      v58 += v16;
      v57 += v17;
      v53 += v18;
      result += v19;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Mat_TRC_RGhA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Mat_TRC_RGhA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf422_TRC_Mat_TRC_RGhA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  unsigned int v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unsigned __int16 *v55;
  _WORD *v56;
  unsigned __int16 *v57;
  unsigned __int16 *v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  BOOL v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  unsigned int v78;
  unsigned int v79;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  __int16 v102;
  __int16 v103;
  __int16 v104;
  float v107;
  float v108;

  v5 = *(_QWORD *)(result + 28);
  v6 = *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = v7 + *(_QWORD *)(result + 44);
    v12 = v8 - v7;
    v13 = *((_QWORD *)result + 19);
    v14 = (_QWORD *)*((_QWORD *)result + 7);
    v15 = (uint64_t *)*((_QWORD *)result + 8);
    v16 = *v15;
    v17 = v15[1];
    v18 = v15[2];
    v19 = **((_QWORD **)result + 17);
    *(float *)&v20 = (float)*(unsigned int *)(v13 + 128);
    v21 = 8191.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    v22 = (float)v20;
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    v23 = (float)LODWORD(a5);
    v24 = v21 * *(float *)v13;
    v25 = v21 * *(float *)(v13 + 8);
    v26 = v21 * *(float *)(v13 + 16);
    v27 = v21 * *(float *)(v13 + 20);
    v28 = v21 * *(float *)(v13 + 28);
    v29 = *(float *)(v13 + 72);
    v30 = *(float *)(v13 + 76);
    v31 = *(float *)(v13 + 80);
    v32 = *(float *)(v13 + 84);
    v33 = *(float *)(v13 + 88);
    v34 = *(float *)(v13 + 92);
    v35 = *(float *)(v13 + 96);
    v36 = *(float *)(v13 + 100);
    v37 = *(float *)(v13 + 104);
    v38 = v13 + 164;
    v39 = v13 + 16548;
    v40 = *((_QWORD *)result + 14);
    v41 = *((_QWORD *)result + 13) * a2 / v6;
    v42 = (_QWORD *)*((_QWORD *)result + 16);
    v43 = v41 + *((_QWORD *)result + 15);
    v44 = *(_QWORD *)(result + 36);
    v45 = *(unsigned __int8 *)(v13 + 124);
    v46 = 16 - v45;
    if (v45 >= 0x11)
      v46 = 0;
    v47 = *v42 + v43 * v19 + 8 * v40;
    v48 = v14[2];
    if (v48)
      result = (unsigned __int8 *)(v48 + v18 * v11 + 2 * v44);
    else
      result = 0;
    v51 = v14;
    v50 = *v14;
    v49 = v51[1];
    if (v49)
      v52 = v49 + v17 * v11 + 2 * v44;
    else
      v52 = 0;
    v53 = v50 + v16 * v11 + 2 * v44;
    do
    {
      if (v10)
      {
        v54 = 0;
        v55 = (unsigned __int16 *)v53;
        v56 = (_WORD *)v47;
        v57 = (unsigned __int16 *)result;
        do
        {
          v58 = (unsigned __int16 *)(v52 + 2 * v54);
          v59 = (float)(v58[1] >> v46) - v23;
          v60 = v25 * v59;
          v61 = v24 * (float)((float)(*v55 >> v46) - v22);
          v62 = (float)(v25 * v59) + v61;
          v63 = 8191.0;
          if (v62 <= 8191.0)
          {
            v63 = (float)(v25 * v59) + v61;
            if (v62 < 0.0)
              v63 = 0.0;
          }
          v64 = (float)(*v58 >> v46) - v23;
          v65 = (float)(v27 * v59) + (float)(v64 * v26);
          v66 = 8191.0;
          if ((float)(v61 + v65) <= 8191.0)
          {
            v66 = v61 + v65;
            if ((float)(v61 + v65) < 0.0)
              v66 = 0.0;
          }
          v67 = v28 * v64;
          v68 = v67 + v61;
          v69 = (float)(v67 + v61) <= 8191.0;
          v70 = 8191.0;
          if (v69)
          {
            v70 = v68;
            if (v68 < 0.0)
              v70 = 0.0;
          }
          v71 = v24 * (float)((float)(v55[1] >> v46) - v22);
          v72 = v60 + v71;
          v69 = (float)(v60 + v71) <= 8191.0;
          v73 = 8191.0;
          if (v69)
          {
            v73 = v72;
            if (v72 < 0.0)
              v73 = 0.0;
          }
          v74 = v65 + v71;
          v69 = (float)(v65 + v71) <= 8191.0;
          v75 = 8191.0;
          if (v69)
          {
            v75 = v74;
            if (v74 < 0.0)
              v75 = 0.0;
          }
          v76 = v67 + v71;
          v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            v77 = v76;
            if (v76 < 0.0)
              v77 = 0.0;
          }
          if (v57)
          {
            v78 = *v57;
            v79 = v57[1];
            v57 += 2;
          }
          else
          {
            v78 = 0;
            v79 = 0;
          }
          _H26 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v63, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v66, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          _H28 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm
          {
            FCVT            S28, H28
            FCVT            S29, H29
          }
          _H30 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          __asm { FCVT            S30, H30 }
          _H31 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          __asm { FCVT            S31, H31 }
          v96 = (float)((float)(v30 * _S27) + (float)(_S26 * v29)) + (float)(_S28 * v31);
          v97 = (float)((float)(v33 * _S27) + (float)(_S26 * v32)) + (float)(_S28 * v34);
          v98 = (float)((float)(v36 * _S27) + (float)(_S26 * v35)) + (float)(_S28 * v37);
          v99 = (float)((float)(v30 * _S30) + (float)(_S29 * v29)) + (float)(_S31 * v31);
          v100 = (float)((float)(v33 * _S30) + (float)(_S29 * v32)) + (float)(_S31 * v34);
          v101 = (float)((float)(v36 * _S30) + (float)(_S29 * v35)) + (float)(_S31 * v37);
          LOWORD(_S30) = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v96, 0.0), 8191.0)));
          LOWORD(_S31) = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v97, 0.0), 8191.0)));
          v107 = fminf(fmaxf(v98, 0.0), 8191.0);
          LOWORD(v107) = *(_WORD *)(v39 + 2 * llroundf(v107));
          v102 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v99, 0.0), 8191.0)));
          v103 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v100, 0.0), 8191.0)));
          v104 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v101, 0.0), 8191.0)));
          _S8 = (float)v78 * 0.000015259;
          __asm { FCVT            H8, S8 }
          _S9 = (float)v79 * 0.000015259;
          __asm { FCVT            H9, S9 }
          *v56 = LOWORD(_S30);
          v56[1] = LOWORD(_S31);
          v56[2] = LOWORD(v107);
          LOWORD(v107) = 15360;
          if (v57)
            v108 = _S8;
          else
            v108 = v107;
          v56[3] = LOWORD(v108);
          v56[4] = v102;
          v56[5] = v103;
          v56[6] = v104;
          if (v57)
            v107 = _S9;
          v56[7] = LOWORD(v107);
          v54 += 2;
          v55 += 2;
          v56 += 8;
        }
        while (v10 > v54);
      }
      v53 += v16;
      v52 += v17;
      result += v18;
      v47 += v19;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_xf422_rgb_RGhA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_rgb_RGhA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf422_rgb_RGhA_GCD(unsigned __int8 *result, uint64_t a2)
{
  float v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  unsigned __int16 *v42;
  _WORD *v43;
  unsigned __int16 *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned __int16 *v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v67;
  float v71;

  v3 = *(_QWORD *)(result + 28);
  v4 = *result;
  v5 = v3 * a2 / v4;
  v6 = (v3 + v3 * a2) / v4;
  if (v6 != v5)
  {
    v7 = 0;
    v8 = *(_QWORD *)(result + 20);
    v9 = v5 + *(_QWORD *)(result + 44);
    v10 = v6 - v5;
    v11 = *((_QWORD *)result + 19);
    v13 = (uint64_t *)*((_QWORD *)result + 7);
    v12 = (uint64_t *)*((_QWORD *)result + 8);
    v14 = *v12;
    v15 = v12[1];
    v16 = v12[2];
    v17 = **((_QWORD **)result + 17);
    *(float *)&v18 = (float)*(unsigned int *)(v11 + 128);
    v19 = 1.0;
    v20 = 1.0 / *(float *)&v18;
    LOWORD(v18) = *(_WORD *)(v11 + 140);
    v21 = (float)v18;
    LOWORD(v19) = *(_WORD *)(v11 + 142);
    v22 = (float)v19;
    v23 = v20 * *(float *)v11;
    v24 = v20 * *(float *)(v11 + 8);
    v25 = v20 * *(float *)(v11 + 16);
    v26 = v20 * *(float *)(v11 + 20);
    v27 = v20 * *(float *)(v11 + 28);
    v28 = *((_QWORD *)result + 14);
    v29 = *((_QWORD *)result + 13) * a2 / v4;
    v30 = (_QWORD *)*((_QWORD *)result + 16);
    v31 = v29 + *((_QWORD *)result + 15);
    v32 = *(_QWORD *)(result + 36);
    LODWORD(v11) = *(unsigned __int8 *)(v11 + 124);
    v33 = 16 - v11;
    if (v11 >= 0x11)
      v33 = 0;
    v34 = *v30 + v31 * v17 + 8 * v28;
    v35 = v13[2];
    if (v35)
      v36 = v35 + v16 * v9 + 2 * v32;
    else
      v36 = 0;
    v38 = *v13;
    v37 = v13[1];
    v39 = v37 + v15 * v9 + 2 * v32;
    if (!v37)
      v39 = 0;
    result = (unsigned __int8 *)(v38 + v14 * v9 + 2 * v32);
    v40 = v33;
    LOWORD(v2) = 15360;
    do
    {
      if (v8)
      {
        v41 = 0;
        v42 = (unsigned __int16 *)result;
        v43 = (_WORD *)v34;
        v44 = (unsigned __int16 *)v36;
        do
        {
          if (v44)
          {
            v45 = *v44;
            v46 = v44[1];
            v44 += 2;
          }
          else
          {
            v45 = 0;
            v46 = 0;
          }
          v47 = (unsigned __int16 *)(v39 + 2 * v41);
          v48 = (float)(*v47 >> v40) - v22;
          v49 = (float)(v47[1] >> v40) - v22;
          v50 = v24 * v49;
          v51 = (float)(v26 * v49) + (float)(v48 * v25);
          v52 = v27 * v48;
          v53 = v23 * (float)((float)(*v42 >> v40) - v21);
          v54 = v23 * (float)((float)(v42[1] >> v40) - v21);
          _S22 = v50 + v53;
          _S23 = v53 + v51;
          _S20 = v52 + v53;
          _S19 = v50 + v54;
          _S18 = v51 + v54;
          _S17 = v52 + v54;
          _S21 = (float)v45 * 0.000015259;
          __asm { FCVT            H21, S21 }
          _S24 = (float)v46 * 0.000015259;
          __asm
          {
            FCVT            H24, S24
            FCVT            H22, S22
          }
          *v43 = LOWORD(_S22);
          __asm { FCVT            H22, S23 }
          v43[1] = LOWORD(_S22);
          __asm { FCVT            H20, S20 }
          v43[2] = LOWORD(_S20);
          if (v44)
            v67 = _S21;
          else
            v67 = v2;
          v43[3] = LOWORD(v67);
          __asm { FCVT            H19, S19 }
          v43[4] = _H19;
          __asm { FCVT            H18, S18 }
          v43[5] = _H18;
          __asm { FCVT            H17, S17 }
          v43[6] = _H17;
          if (_ZF)
            v71 = v2;
          else
            v71 = _S24;
          v43[7] = LOWORD(v71);
          v41 += 2;
          v42 += 2;
          v43 += 8;
        }
        while (v8 > v41);
      }
      result += v14;
      v39 += v15;
      v36 += v16;
      v34 += v17;
      ++v7;
    }
    while (v7 != v10);
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Tone_Mat_TRC_RGfA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Tone_Mat_TRC_RGfA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf422_TRC_Tone_Mat_TRC_RGfA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  uint64_t v48;
  unsigned int v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unsigned __int16 *v59;
  unsigned __int8 *v60;
  unsigned __int16 *v61;
  unsigned __int16 *v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  BOOL v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  unsigned int v82;
  unsigned int v83;
  float v85;
  float v98;
  float v99;
  float v104;
  float v105;
  float v107;
  float v108;
  float v109;
  float v114;
  float v115;
  float v116;
  float v127;
  float v128;
  float v129;

  v5 = *(_QWORD *)(result + 28);
  v6 = *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = v7 + *(_QWORD *)(result + 44);
    v12 = v8 - v7;
    v13 = *((_QWORD *)result + 19);
    v14 = (_QWORD *)*((_QWORD *)result + 7);
    v15 = (uint64_t *)*((_QWORD *)result + 8);
    v16 = *v15;
    v17 = v15[1];
    v18 = v15[2];
    v19 = **((_QWORD **)result + 17);
    *(float *)&v20 = (float)*(unsigned int *)(v13 + 128);
    v21 = 8191.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    v22 = (float)v20;
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    v23 = (float)LODWORD(a5);
    v24 = v21 * *(float *)v13;
    v129 = v21 * *(float *)(v13 + 8);
    v25 = v21 * *(float *)(v13 + 16);
    v26 = v21 * *(float *)(v13 + 20);
    v27 = v21 * *(float *)(v13 + 28);
    v28 = *(float *)(v13 + 72);
    v29 = *(float *)(v13 + 76);
    v30 = *(float *)(v13 + 80);
    v31 = *(float *)(v13 + 84);
    v32 = *(float *)(v13 + 88);
    v33 = *(float *)(v13 + 92);
    v34 = *(float *)(v13 + 96);
    v35 = *(float *)(v13 + 100);
    v36 = v13 + 164;
    v37 = v13 + 16548;
    v38 = v13 + 32932;
    v39 = *(float *)(v13 + 104);
    v40 = *(float *)(v13 + 108);
    v41 = *(float *)(v13 + 112);
    v42 = *(float *)(v13 + 116);
    v43 = *(float *)(v13 + 120);
    v44 = *((_QWORD *)result + 14);
    v45 = *((_QWORD *)result + 13) * a2 / v6;
    v46 = (_QWORD *)*((_QWORD *)result + 16);
    v47 = v45 + *((_QWORD *)result + 15);
    v48 = *(_QWORD *)(result + 36);
    v49 = *(unsigned __int8 *)(v13 + 124);
    v50 = 16 - v49;
    if (v49 >= 0x11)
      v50 = 0;
    result = (unsigned __int8 *)(*v46 + v47 * v19 + 16 * v44);
    v51 = v14[2];
    if (v51)
      v52 = v51 + v18 * v11 + 2 * v48;
    else
      v52 = 0;
    v55 = v14;
    v54 = *v14;
    v53 = v55[1];
    if (v53)
      v56 = v53 + v17 * v11 + 2 * v48;
    else
      v56 = 0;
    v57 = v54 + v16 * v11 + 2 * v48;
    do
    {
      if (v10)
      {
        v58 = 0;
        v59 = (unsigned __int16 *)v57;
        v60 = result;
        v61 = (unsigned __int16 *)v52;
        do
        {
          v62 = (unsigned __int16 *)(v56 + 2 * v58);
          v63 = (float)(v62[1] >> v50) - v23;
          v64 = v129 * v63;
          v65 = v24 * (float)((float)(*v59 >> v50) - v22);
          v66 = (float)(v129 * v63) + v65;
          v67 = 8191.0;
          if (v66 <= 8191.0)
          {
            v67 = (float)(v129 * v63) + v65;
            if (v66 < 0.0)
              v67 = 0.0;
          }
          v68 = (float)(*v62 >> v50) - v23;
          v69 = (float)(v26 * v63) + (float)(v68 * v25);
          v70 = 8191.0;
          if ((float)(v65 + v69) <= 8191.0)
          {
            v70 = v65 + v69;
            if ((float)(v65 + v69) < 0.0)
              v70 = 0.0;
          }
          v71 = v27 * v68;
          v72 = (float)(v27 * v68) + v65;
          v73 = 8191.0;
          if (v72 <= 8191.0)
          {
            v73 = v72;
            if (v72 < 0.0)
              v73 = 0.0;
          }
          v74 = v24 * (float)((float)(v59[1] >> v50) - v22);
          v75 = v64 + v74;
          v76 = (float)(v64 + v74) <= 8191.0;
          v77 = 8191.0;
          if (v76)
          {
            v77 = v75;
            if (v75 < 0.0)
              v77 = 0.0;
          }
          v78 = v69 + v74;
          v79 = 8191.0;
          if (v78 <= 8191.0)
          {
            v79 = v78;
            if (v78 < 0.0)
              v79 = 0.0;
          }
          v80 = v71 + v74;
          v76 = (float)(v71 + v74) <= 8191.0;
          v81 = 8191.0;
          if (v76)
          {
            v81 = v80;
            if (v80 < 0.0)
              v81 = 0.0;
          }
          if (v61)
          {
            v82 = *v61;
            v83 = v61[1];
            v61 += 2;
          }
          else
          {
            v82 = 0;
            v83 = 0;
          }
          _S11 = fmaxf(v67, 0.0);
          v85 = 8191.0;
          LOWORD(_S11) = *(_WORD *)(v36 + 2 * llroundf(fminf(_S11, 8191.0)));
          __asm { FCVT            S11, H11 }
          _H8 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          __asm { FCVT            S8, H8 }
          _H9 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S9, H9 }
          _H10 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          _H13 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          v98 = (float)((float)((float)(v41 * _S8) + (float)(v40 * _S11)) + (float)(v42 * _S9))
              + (float)(v43 * fmaxf(_S11, fmaxf(_S8, _S9)));
          v99 = 8191.0;
          if (v98 <= 8191.0)
          {
            v99 = v98;
            if (v98 < 0.0)
              v99 = 0.0;
          }
          __asm
          {
            FCVT            S10, H10
            FCVT            S12, H12
            FCVT            S13, H13
          }
          _H14 = *(_WORD *)(v37 + 2 * llroundf(v99));
          v104 = fmaxf(_S10, fmaxf(_S12, _S13));
          v105 = (float)((float)((float)(v41 * _S12) + (float)(v40 * _S10)) + (float)(v42 * _S13)) + (float)(v43 * v104);
          if (v105 <= 8191.0)
          {
            v85 = (float)((float)((float)(v41 * _S12) + (float)(v40 * _S10)) + (float)(v42 * _S13))
                + (float)(v43 * v104);
            if (v105 < 0.0)
              v85 = 0.0;
          }
          __asm { FCVT            S4, H14 }
          v107 = _S11 * _S4;
          v108 = _S8 * _S4;
          v109 = _S9 * _S4;
          _H31 = *(_WORD *)(v37 + 2 * llroundf(v85));
          __asm { FCVT            S31, H31 }
          _S9 = _S10 * _S31;
          _S10 = _S12 * _S31;
          v114 = _S13 * _S31;
          v115 = (float)((float)(v29 * v108) + (float)(v107 * v28)) + (float)(v109 * v30);
          v116 = (float)((float)(v32 * v108) + (float)(v107 * v31)) + (float)(v109 * v33);
          _S4 = (float)((float)(v35 * v108) + (float)(v107 * v34)) + (float)(v109 * v39);
          _S8 = (float)((float)(v29 * _S10) + (float)(_S9 * v28)) + (float)(v114 * v30);
          _S11 = (float)((float)(v32 * _S10) + (float)(_S9 * v31)) + (float)(v114 * v33);
          _S31 = (float)((float)(v35 * _S10) + (float)(_S9 * v34)) + (float)(v114 * v39);
          LOWORD(_S9) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v115, 0.0), 8191.0)));
          __asm { FCVT            S9, H9 }
          LOWORD(_S10) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v116, 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          LOWORD(_S4) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S4, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          LOWORD(_S8) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S8, 0.0), 8191.0)));
          __asm { FCVT            S8, H8 }
          LOWORD(_S11) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S11, 0.0), 8191.0)));
          LOWORD(_S31) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S31, 0.0), 8191.0)));
          __asm
          {
            FCVT            S11, H11
            FCVT            S31, H31
          }
          v127 = (float)v82 * 0.000015259;
          if (!v61)
            v127 = 1.0;
          *(_DWORD *)v60 = _S9;
          *((_DWORD *)v60 + 1) = _S10;
          *((_DWORD *)v60 + 2) = _S4;
          *((float *)v60 + 3) = v127;
          if (v61)
            v128 = (float)v83 * 0.000015259;
          else
            v128 = 1.0;
          *((_DWORD *)v60 + 4) = _S8;
          *((_DWORD *)v60 + 5) = _S11;
          *((_DWORD *)v60 + 6) = _S31;
          *((float *)v60 + 7) = v128;
          v58 += 2;
          v59 += 2;
          v60 += 32;
        }
        while (v10 > v58);
      }
      v57 += v16;
      v56 += v17;
      v52 += v18;
      result += v19;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Mat_TRC_RGfA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Mat_TRC_RGfA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf422_TRC_Mat_TRC_RGfA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  unsigned int v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unsigned __int16 *v55;
  uint64_t v56;
  unsigned __int16 *v57;
  unsigned __int16 *v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  BOOL v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  unsigned int v78;
  unsigned int v79;
  float v96;
  float v97;
  float v108;
  float v109;

  v5 = *(_QWORD *)(result + 28);
  v6 = *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = v7 + *(_QWORD *)(result + 44);
    v12 = v8 - v7;
    v13 = *((_QWORD *)result + 19);
    v14 = (_QWORD *)*((_QWORD *)result + 7);
    v15 = (uint64_t *)*((_QWORD *)result + 8);
    v16 = *v15;
    v17 = v15[1];
    v18 = v15[2];
    v19 = **((_QWORD **)result + 17);
    *(float *)&v20 = (float)*(unsigned int *)(v13 + 128);
    v21 = 8191.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    v22 = (float)v20;
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    v23 = (float)LODWORD(a5);
    v24 = v21 * *(float *)v13;
    v25 = v21 * *(float *)(v13 + 8);
    v26 = v21 * *(float *)(v13 + 16);
    v27 = v21 * *(float *)(v13 + 20);
    v28 = v21 * *(float *)(v13 + 28);
    v29 = *(float *)(v13 + 72);
    v30 = *(float *)(v13 + 76);
    v31 = *(float *)(v13 + 80);
    v32 = *(float *)(v13 + 84);
    v33 = *(float *)(v13 + 88);
    v34 = *(float *)(v13 + 92);
    v35 = *(float *)(v13 + 96);
    v36 = *(float *)(v13 + 100);
    v37 = *(float *)(v13 + 104);
    v38 = v13 + 164;
    v39 = v13 + 16548;
    v40 = *((_QWORD *)result + 14);
    v41 = *((_QWORD *)result + 13) * a2 / v6;
    v42 = (_QWORD *)*((_QWORD *)result + 16);
    v43 = v41 + *((_QWORD *)result + 15);
    v44 = *(_QWORD *)(result + 36);
    v45 = *(unsigned __int8 *)(v13 + 124);
    v46 = 16 - v45;
    if (v45 >= 0x11)
      v46 = 0;
    v47 = *v42 + v43 * v19 + 16 * v40;
    v48 = v14[2];
    if (v48)
      result = (unsigned __int8 *)(v48 + v18 * v11 + 2 * v44);
    else
      result = 0;
    v51 = v14;
    v50 = *v14;
    v49 = v51[1];
    if (v49)
      v52 = v49 + v17 * v11 + 2 * v44;
    else
      v52 = 0;
    v53 = v50 + v16 * v11 + 2 * v44;
    do
    {
      if (v10)
      {
        v54 = 0;
        v55 = (unsigned __int16 *)v53;
        v56 = v47;
        v57 = (unsigned __int16 *)result;
        do
        {
          v58 = (unsigned __int16 *)(v52 + 2 * v54);
          v59 = (float)(v58[1] >> v46) - v23;
          v60 = v25 * v59;
          v61 = v24 * (float)((float)(*v55 >> v46) - v22);
          v62 = (float)(v25 * v59) + v61;
          v63 = 8191.0;
          if (v62 <= 8191.0)
          {
            v63 = (float)(v25 * v59) + v61;
            if (v62 < 0.0)
              v63 = 0.0;
          }
          v64 = (float)(*v58 >> v46) - v23;
          v65 = (float)(v27 * v59) + (float)(v64 * v26);
          v66 = 8191.0;
          if ((float)(v61 + v65) <= 8191.0)
          {
            v66 = v61 + v65;
            if ((float)(v61 + v65) < 0.0)
              v66 = 0.0;
          }
          v67 = v28 * v64;
          v68 = v67 + v61;
          v69 = (float)(v67 + v61) <= 8191.0;
          v70 = 8191.0;
          if (v69)
          {
            v70 = v68;
            if (v68 < 0.0)
              v70 = 0.0;
          }
          v71 = v24 * (float)((float)(v55[1] >> v46) - v22);
          v72 = v60 + v71;
          v69 = (float)(v60 + v71) <= 8191.0;
          v73 = 8191.0;
          if (v69)
          {
            v73 = v72;
            if (v72 < 0.0)
              v73 = 0.0;
          }
          v74 = v65 + v71;
          v69 = (float)(v65 + v71) <= 8191.0;
          v75 = 8191.0;
          if (v69)
          {
            v75 = v74;
            if (v74 < 0.0)
              v75 = 0.0;
          }
          v76 = v67 + v71;
          v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            v77 = v76;
            if (v76 < 0.0)
              v77 = 0.0;
          }
          if (v57)
          {
            v78 = *v57;
            v79 = v57[1];
            v57 += 2;
          }
          else
          {
            v78 = 0;
            v79 = 0;
          }
          _H27 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v63, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          _H28 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v66, 0.0), 8191.0)));
          __asm { FCVT            S28, H28 }
          _H29 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          _H30 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S30, H30 }
          _H31 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          _H8 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          __asm
          {
            FCVT            S31, H31
            FCVT            S8, H8
          }
          v96 = (float)((float)(v30 * _S28) + (float)(_S27 * v29)) + (float)(_S29 * v31);
          v97 = (float)((float)(v33 * _S28) + (float)(_S27 * v32)) + (float)(_S29 * v34);
          _S27 = (float)((float)(v36 * _S28) + (float)(_S27 * v35)) + (float)(_S29 * v37);
          _S28 = (float)((float)(v30 * _S31) + (float)(_S30 * v29)) + (float)(_S8 * v31);
          _S29 = (float)((float)(v33 * _S31) + (float)(_S30 * v32)) + (float)(_S8 * v34);
          _S30 = (float)((float)(v36 * _S31) + (float)(_S30 * v35)) + (float)(_S8 * v37);
          LOWORD(_S31) = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v96, 0.0), 8191.0)));
          __asm { FCVT            S31, H31 }
          LOWORD(_S8) = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v97, 0.0), 8191.0)));
          __asm { FCVT            S8, H8 }
          LOWORD(_S27) = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(_S27, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          LOWORD(_S28) = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(_S28, 0.0), 8191.0)));
          __asm { FCVT            S28, H28 }
          LOWORD(_S29) = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(_S29, 0.0), 8191.0)));
          LOWORD(_S30) = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(_S30, 0.0), 8191.0)));
          __asm
          {
            FCVT            S29, H29
            FCVT            S30, H30
          }
          v108 = (float)v78 * 0.000015259;
          if (!v57)
            v108 = 1.0;
          *(_DWORD *)v56 = _S31;
          *(_DWORD *)(v56 + 4) = _S8;
          *(_DWORD *)(v56 + 8) = _S27;
          *(float *)(v56 + 12) = v108;
          if (v57)
            v109 = (float)v79 * 0.000015259;
          else
            v109 = 1.0;
          *(_DWORD *)(v56 + 16) = _S28;
          *(_DWORD *)(v56 + 20) = _S29;
          *(_DWORD *)(v56 + 24) = _S30;
          *(float *)(v56 + 28) = v109;
          v54 += 2;
          v55 += 2;
          v56 += 32;
        }
        while (v10 > v54);
      }
      v53 += v16;
      v52 += v17;
      result += v18;
      v47 += v19;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_xf422_rgb_RGfA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  _BYTE v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if ((v13 & 1) != 0)
  {
    ++v20;
    ++v13;
    if ((v12 & 1) != 0)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9)
    v21 = v12;
  else
    v21 = v9 - v13;
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15)
    v18 = v15 - v20;
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(_BYTE *)(a1 + 162);
  if (v14 + v11 > v10)
    v11 = v10 - v14;
  *(_QWORD *)&v27[4] = v9;
  *(_QWORD *)&v27[12] = v10;
  if (v19 + v17 <= v16)
    v23 = v17;
  else
    v23 = v16 - v19;
  if (v21 >= v18)
    v24 = v18;
  else
    v24 = v21;
  *(_QWORD *)&v27[20] = v24;
  if (v11 < v23)
    v23 = v11;
  *(_QWORD *)&v27[28] = v23;
  *(_QWORD *)&v27[36] = v13;
  *(_QWORD *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_rgb_RGfA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf422_rgb_RGfA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  unsigned __int16 *v43;
  float *v44;
  unsigned __int16 *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned __int16 *v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;

  v5 = *(_QWORD *)(result + 28);
  v6 = *result;
  v7 = v5 * a2 / v6;
  v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = *(_QWORD *)(result + 20);
    v11 = v7 + *(_QWORD *)(result + 44);
    v12 = v8 - v7;
    v13 = *((_QWORD *)result + 19);
    v15 = (uint64_t *)*((_QWORD *)result + 7);
    v14 = (uint64_t *)*((_QWORD *)result + 8);
    v16 = *v14;
    v17 = v14[1];
    v18 = v14[2];
    v19 = **((_QWORD **)result + 17);
    *(float *)&v20 = (float)*(unsigned int *)(v13 + 128);
    v21 = 1.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    v22 = (float)v20;
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    v23 = (float)LODWORD(a5);
    v24 = v21 * *(float *)v13;
    v25 = v21 * *(float *)(v13 + 8);
    v26 = v21 * *(float *)(v13 + 16);
    v27 = v21 * *(float *)(v13 + 20);
    v28 = v21 * *(float *)(v13 + 28);
    v29 = *((_QWORD *)result + 14);
    v30 = *((_QWORD *)result + 13) * a2 / v6;
    v31 = (_QWORD *)*((_QWORD *)result + 16);
    v32 = v30 + *((_QWORD *)result + 15);
    v33 = *(_QWORD *)(result + 36);
    LODWORD(v13) = *(unsigned __int8 *)(v13 + 124);
    v34 = 16 - v13;
    if (v13 >= 0x11)
      v34 = 0;
    v35 = *v31 + v32 * v19 + 16 * v29;
    v36 = v15[2];
    if (v36)
      v37 = v36 + v18 * v11 + 2 * v33;
    else
      v37 = 0;
    v39 = *v15;
    v38 = v15[1];
    v40 = v38 + v17 * v11 + 2 * v33;
    if (!v38)
      v40 = 0;
    result = (unsigned __int8 *)(v39 + v16 * v11 + 2 * v33);
    v41 = v34;
    do
    {
      if (v10)
      {
        v42 = 0;
        v43 = (unsigned __int16 *)result;
        v44 = (float *)v35;
        v45 = (unsigned __int16 *)v37;
        do
        {
          if (v45)
          {
            v46 = *v45;
            v47 = v45[1];
            v45 += 2;
          }
          else
          {
            v46 = 0;
            v47 = 0;
          }
          v48 = (unsigned __int16 *)(v40 + 2 * v42);
          v49 = (float)(*v48 >> v41) - v23;
          v50 = (float)(v48[1] >> v41) - v23;
          v51 = v25 * v50;
          v52 = (float)(v27 * v50) + (float)(v49 * v26);
          v53 = v28 * v49;
          v54 = v24 * (float)((float)(*v43 >> v41) - v22);
          v55 = v24 * (float)((float)(v43[1] >> v41) - v22);
          v56 = v51 + v54;
          v57 = v54 + v52;
          v58 = v53 + v54;
          v59 = v51 + v55;
          v60 = v52 + v55;
          v61 = v53 + v55;
          v62 = (float)v46 * 0.000015259;
          if (!v45)
            v62 = 1.0;
          *v44 = v56;
          v44[1] = v57;
          v44[2] = v58;
          v44[3] = v62;
          if (v45)
            v63 = (float)v47 * 0.000015259;
          else
            v63 = 1.0;
          v44[4] = v59;
          v44[5] = v60;
          v44[6] = v61;
          v44[7] = v63;
          v42 += 2;
          v43 += 2;
          v44 += 8;
        }
        while (v10 > v42);
      }
      result += v16;
      v40 += v17;
      v37 += v18;
      v35 += v19;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

void VTTileDecompressionSessionInvalidate(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t CMBaseObject;
  uint64_t v5;
  void (*v6)(uint64_t);
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v8;

  if (a1 && !*(_BYTE *)(a1 + 160))
  {
    v2 = *(_QWORD *)(a1 + 144);
    if (v2)
    {
      VTDecompressionSessionRemoteBridge_Invalidate(v2);
      *(_BYTE *)(a1 + 160) = 1;
    }
    else
    {
      v3 = *(_QWORD *)(a1 + 72);
      if (v3 && *(_QWORD *)(a1 + 128))
      {
        VTTileDecompressionSessionFinishDelayedTiles(a1);
        v3 = *(_QWORD *)(a1 + 72);
      }
      CMBaseObject = VTVideoDecoderGetCMBaseObject(v3);
      if (CMBaseObject)
      {
        v5 = CMBaseObject;
        v6 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
        if (v6)
          v6(v5);
      }
      *(_BYTE *)(a1 + 160) = 1;
      if (*(_DWORD *)(a1 + 184))
      {
        Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (Mutable)
        {
          v8 = Mutable;
          CMFormatDescriptionGetMediaSubType(*(CMFormatDescriptionRef *)(a1 + 32));
          FigVideoFormatDescriptionContainsHDR();
          CMVideoFormatDescriptionGetDimensions(*(CMVideoFormatDescriptionRef *)(a1 + 32));
          CFAbsoluteTimeGetCurrent();
          FigCFDictionarySetInt32();
          FigCFDictionarySetInt32();
          FigCFDictionarySetInt32();
          FigCFDictionarySetInt32();
          FigCFDictionarySetInt32();
          FigCFDictionarySetInt32();
          FigCFDictionarySetInt32();
          FigCFDictionarySetInt32();
          FigPlaybackLogPowerEvent();
          CFRelease(v8);
        }
      }
    }
  }
}

uint64_t VTTileDecompressionSessionFinishDelayedTiles(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v4)(uint64_t);

  if (!a1)
    return 4294954394;
  if (*(_BYTE *)(a1 + 160) == 1)
    return 4294954393;
  if (*(_QWORD *)(a1 + 144))
    return VTDecompressionSessionRemoteBridge_FinishDelayedTiles(*(_QWORD *)(a1 + 144));
  v2 = *(_QWORD *)(a1 + 72);
  v3 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
  if (*v3 >= 3uLL && (v4 = (uint64_t (*)(uint64_t))v3[10]) != 0)
    return v4(v2);
  else
    return 4294954514;
}

uint64_t VTTileDecompressionSessionGetTypeID()
{
  MEMORY[0x1940281CC](&VTTileDecompressionSessionGetTypeID_sRegisterVTTileDecompressionSessionOnce, RegisterVTTileDecompressionSession);
  return sVTTileDecompressionSessionID;
}

void RegisterVTTileDecompressionSession()
{
  sVTTileDecompressionSessionID = _CFRuntimeRegisterClass();
  sVTTileDecompressionSessionPropertyCallbacks = 0;
  *(_QWORD *)algn_1ECED9288 = VTTileDecompressionSessionCopySupportedPropertyDictionary;
  qword_1ECED9290 = (uint64_t)VTTileDecompressionSessionSetProperty;
  unk_1ECED9298 = VTTileDecompressionSessionCopyProperty;
  qword_1ECED92A0 = (uint64_t)VTTileDecompressionSessionSetProperties;
  unk_1ECED92A8 = VTTileDecompressionSessionCopySerializableProperties;
  VTSessionRegisterCallbacksForTypeID(&sVTTileDecompressionSessionPropertyCallbacks, (const void *)sVTTileDecompressionSessionID);
}

uint64_t VTTileDecompressionSessionCopySupportedPropertyDictionary(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, CFTypeRef *);
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CFTypeRef cf;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x1E0C80C00];
  cf = 0;
  v14[0] = 0;
  v14[1] = 0;
  if (!a2 || (*a2 = 0, !a1) || *(_BYTE *)(a1 + 160) == 1)
  {
    v11 = FigSignalErrorAt();
LABEL_18:
    v12 = v11;
    goto LABEL_19;
  }
  v3 = *(_QWORD *)(a1 + 144);
  if (v3)
    return VTDecompressionSessionRemoteBridge_CopySupportedPropertyDictionary(v3);
  v5 = *(_QWORD *)(a1 + 72);
  v6 = *(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v6 || ((v7 = v6(v5, &cf), (_DWORD)v7 != -12782) ? (v8 = (_DWORD)v7 == 0) : (v8 = 1), v8))
  {
    if (cf)
    {
      v14[0] = cf;
      v9 = 1;
    }
    else
    {
      v9 = 0;
    }
    v10 = *(_QWORD *)(a1 + 136);
    if (v10)
      v14[v9] = v10;
    v11 = FigCFCreateCombinedDictionary();
    goto LABEL_18;
  }
  v12 = v7;
  FigSignalErrorAt();
LABEL_19:
  if (cf)
    CFRelease(cf);
  return v12;
}

uint64_t VTTileDecompressionSessionSetProperty(uint64_t a1, void *key, const __CFNumber *a3)
{
  uint64_t v6;
  const __CFDictionary *v8;
  uint64_t v9;
  uint64_t CMBaseObject;
  uint64_t (*v11)(uint64_t, void *, const __CFNumber *);

  if (!a1 || *(_BYTE *)(a1 + 160) == 1)
    return FigSignalErrorAt();
  v6 = *(_QWORD *)(a1 + 144);
  if (v6)
    return VTDecompressionSessionRemoteBridge_SetProperty(v6, (uint64_t)key, (uint64_t)a3);
  v8 = *(const __CFDictionary **)(a1 + 136);
  if (v8 && CFDictionaryContainsKey(v8, key))
  {
    if (CFEqual(CFSTR("CanvasPixelBufferAttributes"), key) || CFEqual(CFSTR("TileDecoderRequirements"), key))
    {
      v9 = FigSignalErrorAt();
    }
    else
    {
      if (CFEqual(CFSTR("ClientPID"), key))
        CFNumberGetValue(a3, kCFNumberSInt32Type, (void *)(a1 + 184));
      v9 = 0;
    }
  }
  else
  {
    v9 = 4294954396;
  }
  if (vtTileDecompressionSessionIsPropertyHandledByVideoDecoder(a1, key))
  {
    CMBaseObject = VTVideoDecoderGetCMBaseObject(*(_QWORD *)(a1 + 72));
    v11 = *(uint64_t (**)(uint64_t, void *, const __CFNumber *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v11)
      return v11(CMBaseObject, key, a3);
    return 4294954514;
  }
  return v9;
}

BOOL vtTileDecompressionSessionIsPropertyHandledByVideoDecoder(uint64_t a1, const void *a2)
{
  uint64_t v3;
  void (*v4)(uint64_t, CFDictionaryRef *);
  _BOOL8 v5;
  CFDictionaryRef theDict;

  theDict = 0;
  v3 = *(_QWORD *)(a1 + 72);
  v4 = *(void (**)(uint64_t, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v4)
    return 0;
  v4(v3, &theDict);
  if (!theDict)
    return 0;
  v5 = CFDictionaryContainsKey(theDict, a2) != 0;
  if (theDict)
    CFRelease(theDict);
  return v5;
}

uint64_t VTTileDecompressionSessionCopyProperty(uint64_t a1, CFTypeRef cf1, const __CFAllocator *a3, _QWORD *a4)
{
  uint64_t result;
  const __CFDictionary *v9;
  CFTypeRef v10;
  uint64_t CMBaseObject;
  uint64_t (*v12)(uint64_t, CFTypeRef, const __CFAllocator *, _QWORD *);

  if (!a4)
    return FigSignalErrorAt();
  *a4 = 0;
  if (!a1 || *(_BYTE *)(a1 + 160) == 1)
    return FigSignalErrorAt();
  if (!*(_QWORD *)(a1 + 144))
  {
    v9 = *(const __CFDictionary **)(a1 + 136);
    if (!v9 || !CFDictionaryContainsKey(v9, cf1))
    {
      if (!vtTileDecompressionSessionIsPropertyHandledByVideoDecoder(a1, cf1))
        return 4294954396;
      CMBaseObject = VTVideoDecoderGetCMBaseObject(*(_QWORD *)(a1 + 72));
      v12 = *(uint64_t (**)(uint64_t, CFTypeRef, const __CFAllocator *, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 48);
      if (v12)
        return v12(CMBaseObject, cf1, a3, a4);
      else
        return 4294954514;
    }
    if (CFEqual(CFSTR("CanvasPixelBufferAttributes"), cf1))
    {
      FigReadWriteLockLockForRead();
      v10 = *(CFTypeRef *)(a1 + 88);
      if (!v10)
      {
LABEL_12:
        *a4 = v10;
        FigReadWriteLockUnlockForRead();
        return 0;
      }
LABEL_11:
      v10 = CFRetain(v10);
      goto LABEL_12;
    }
    if (CFEqual(CFSTR("TileDecoderRequirements"), cf1))
    {
      FigReadWriteLockLockForRead();
      v10 = *(CFTypeRef *)(a1 + 96);
      if (!v10)
        goto LABEL_12;
      goto LABEL_11;
    }
    result = CFEqual(CFSTR("ForgetCachedIOSurfaces"), cf1);
    if (!(_DWORD)result)
      return result;
    return FigSignalErrorAt();
  }
  if (CFEqual(cf1, CFSTR("PixelBufferPool")))
    return 4294954396;
  return VTDecompressionSessionRemoteBridge_CopyProperty(*(_QWORD *)(a1 + 144), cf1, a3, a4);
}

uint64_t VTTileDecompressionSessionSetProperties(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, CFTypeRef *);
  int v8;
  BOOL v9;
  int v10;
  const __CFDictionary *v11;
  const __CFDictionary *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, const __CFDictionary *);
  uint64_t v15;
  uint64_t v16;
  uint64_t context;
  CFTypeRef cf;
  const __CFDictionary *v19;
  const __CFDictionary *v20;

  v15 = a1;
  v16 = 0;
  if (!a1 || *(_BYTE *)(a1 + 160) == 1)
  {
    LODWORD(v16) = FigSignalErrorAt();
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 144);
    if (v4)
      return VTDecompressionSessionRemoteBridge_SetProperties(v4, (uint64_t)a2);
    if (a2)
    {
      v19 = 0;
      v20 = 0;
      context = *(_QWORD *)(a1 + 136);
      cf = 0;
      v6 = *(_QWORD *)(a1 + 72);
      v7 = *(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
      if (!v7 || ((v8 = v7(v6, &cf), v8 != -12782) ? (v9 = v8 == 0) : (v9 = 1), v9))
      {
        CFDictionaryApplyFunction(a2, (CFDictionaryApplierFunction)vtTileDecompressionSessionAddPropertyToPartition, &context);
        v10 = 0;
        v11 = v19;
        v12 = v20;
      }
      else
      {
        v10 = v8;
        FigSignalErrorAt();
        v11 = 0;
        v12 = 0;
      }
      if (cf)
        CFRelease(cf);
      LODWORD(v16) = v10;
      if (!v10)
      {
        if (v11)
          CFDictionaryApplyFunction(v11, (CFDictionaryApplierFunction)vtTileCompressionSessionSetOneProperty, &v15);
        if (v12)
        {
          v13 = *(_QWORD *)(a1 + 72);
          v14 = *(uint64_t (**)(uint64_t, const __CFDictionary *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                          + 32);
          if (!v14 || (LODWORD(v16) = v14(v13, v12), (_DWORD)v16 == -12782))
          {
            LODWORD(v16) = 0;
            CFDictionaryApplyFunction(v12, (CFDictionaryApplierFunction)vtTileCompressionSessionSetOneProperty, &v15);
          }
        }
      }
    }
  }
  return v16;
}

uint64_t vtTileCompressionSessionSetOneProperty(void *key, const __CFNumber *a2, uint64_t a3)
{
  uint64_t result;

  result = VTTileDecompressionSessionSetProperty(*(_QWORD *)a3, key, a2);
  if (!*(_DWORD *)(a3 + 8))
    *(_DWORD *)(a3 + 8) = result;
  return result;
}

uint64_t VTTileDecompressionSessionCopySerializableProperties(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, _QWORD *);

  if (!a3)
    return FigSignalErrorAt();
  *a3 = 0;
  if (!a1 || *(_BYTE *)(a1 + 160) == 1)
    return FigSignalErrorAt();
  if (*(_QWORD *)(a1 + 144))
    return VTDecompressionSessionRemoteBridge_CopySerializableProperties(*(_QWORD *)(a1 + 144), a2, a3);
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (!v7)
    return 0;
  result = v7(v6, a2, a3);
  if ((_DWORD)result == -12782)
    return 0;
  return result;
}

uint64_t VTTileDecompressionSessionCreate(uint64_t a1, void *a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t Instance;
  uint64_t v14;
  CFTypeRef v16;
  const __CFAllocator *v17;
  CFDictionaryRef v18;
  CFDictionaryRef v19;
  __CFDictionary *Mutable;
  __CFDictionary *v21;
  int v22;
  int v23;
  uint64_t v24;

  v6 = 4294954394;
  if (a4 && a2 && a6)
  {
    *a6 = 0;
    MEMORY[0x1940281CC](&VTTileDecompressionSessionGetTypeID_sRegisterVTTileDecompressionSessionOnce, RegisterVTTileDecompressionSession);
    Instance = _CFRuntimeCreateInstance();
    if (!Instance)
      return FigSignalErrorAt();
    v14 = Instance;
    if (VTVideoCodecService_ShouldUseSeparateCodecProcessForDecode())
    {
      if (FigServer_IsVideocodecd() || FigServer_IsVideoDecodeService())
        goto LABEL_13;
    }
    else if (FigServer_IsServerProcess())
    {
      goto LABEL_13;
    }
    if (VTShouldRunVideoDecodersInProcess())
    {
LABEL_13:
      *(_QWORD *)(v14 + 32) = CFRetain(a2);
      if (a3)
        v16 = CFRetain(a3);
      else
        v16 = 0;
      *(_QWORD *)(v14 + 40) = v16;
      *(_QWORD *)(v14 + 48) = a4;
      *(_QWORD *)(v14 + 56) = a5;
      *(_DWORD *)(v14 + 16) = CMFormatDescriptionGetMediaSubType((CMFormatDescriptionRef)a2);
      *(_QWORD *)(v14 + 120) = FigReadWriteLockCreate();
      *(_QWORD *)(v14 + 128) = 0;
      *(_QWORD *)(v14 + 104) = FigReadWriteLockCreate();
      v17 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v18 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (v18)
      {
        v19 = v18;
        Mutable = CFDictionaryCreateMutable(v17, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        v21 = Mutable;
        if (Mutable)
        {
          CFDictionarySetValue(Mutable, CFSTR("CanvasPixelBufferAttributes"), v19);
          CFDictionarySetValue(v21, CFSTR("ForgetCachedIOSurfaces"), v19);
          CFDictionarySetValue(v21, CFSTR("TileDecoderRequirements"), v19);
          CFDictionarySetValue(v21, CFSTR("ClientPID"), v19);
        }
        CFRelease(v19);
      }
      else
      {
        v21 = 0;
      }
      *(_QWORD *)(v14 + 136) = v21;
      v22 = *(_DWORD *)(v14 + 16);
      v23 = CFGetAllocator((CFTypeRef)v14);
      VTSelectAndCreateVideoDecoderInstanceInternal(v22, v23, 0, *(CFDictionaryRef *)(v14 + 40));
    }
    v24 = VTTileDecompressionSessionRemoteBridge_Create(v14, a1, a2, (const __CFDictionary *)a3, a4, a5, (uint64_t *)(v14 + 144));
    if ((_DWORD)v24)
    {
      v6 = v24;
      CFRelease((CFTypeRef)v14);
    }
    else
    {
      v6 = 0;
      *(CFAbsoluteTime *)(v14 + 168) = CFAbsoluteTimeGetCurrent();
      *a6 = v14;
    }
  }
  return v6;
}

uint64_t VTTileDecompressionSessionDecodeTile(uint64_t a1, opaqueCMSampleBuffer *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9)
{
  uint64_t v17;
  uint64_t result;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  CFTypeRef v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t (*v26)(uint64_t, uint64_t, opaqueCMSampleBuffer *, uint64_t, uint64_t, void *, uint64_t, uint64_t, int *);
  int v27;

  v27 = 0;
  if (a1)
  {
    if (*(_BYTE *)(a1 + 160) == 1)
    {
      result = 4294954393;
    }
    else
    {
      v17 = *(_QWORD *)(a1 + 144);
      if (v17)
        return VTDecompressionSessionRemoteBridge_DecodeTile(v17, a2, a3, a4, a5, a6, a7, a8, a9);
      FigReadWriteLockLockForWrite();
      v19 = (uint64_t *)malloc_type_calloc(1uLL, 0x38uLL, 0x10A004086CAA5EDuLL);
      if (v19)
      {
        v20 = v19;
        v21 = *(_QWORD *)(a1 + 112);
        *(_QWORD *)(a1 + 112) = v21 + 1;
        *v19 = v21;
        v19[1] = a8;
        v19[2] = a3;
        v19[3] = a4;
        if (a5)
        {
          v22 = CFRetain(a5);
          v23 = *v20;
        }
        else
        {
          v23 = v21;
          v22 = 0;
        }
        v20[4] = (uint64_t)v22;
        v20[5] = a6;
        v20[6] = *(_QWORD *)(a1 + 128);
        *(_QWORD *)(a1 + 128) = v20;
        FigReadWriteLockUnlockForWrite();
        if ((a7 & 2) == 0)
          ++*(_DWORD *)(a1 + 180);
        v24 = *(_QWORD *)(a1 + 72);
        v25 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
        if (*v25 < 3uLL
          || (v26 = (uint64_t (*)(uint64_t, uint64_t, opaqueCMSampleBuffer *, uint64_t, uint64_t, void *, uint64_t, uint64_t, int *))v25[9]) == 0
          || (result = v26(v24, v23, a2, a3, a4, a5, a6, a7, &v27), (_DWORD)result))
        {
          FigSignalErrorAt();
          result = 0;
        }
      }
      else
      {
        FigReadWriteLockUnlockForWrite();
        result = 4294954392;
      }
    }
  }
  else
  {
    result = 4294954394;
  }
  if (a9)
    *a9 = v27;
  return result;
}

uint64_t VTTileDecoderSessionEmitDecodedTile(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  const void *v15;

  if (!a1)
    goto LABEL_9;
  v5 = *a1;
  if (!*a1)
    goto LABEL_9;
  if (*(_BYTE *)(v5 + 160) == 1)
  {
    v12 = 0;
    v13 = 4294954393;
    goto LABEL_19;
  }
  FigReadWriteLockLockForWrite();
  v11 = (_QWORD *)(v5 + 128);
  v10 = *(_QWORD **)(v5 + 128);
  if (!v10)
  {
LABEL_8:
    FigReadWriteLockUnlockForWrite();
LABEL_9:
    v12 = 0;
    v13 = 4294954394;
    goto LABEL_19;
  }
  v12 = *(_QWORD **)(v5 + 128);
  while (*v12 != a2)
  {
    v12 = (_QWORD *)v12[6];
    if (!v12)
      goto LABEL_8;
  }
  if (v10 != v12)
  {
    do
    {
      v14 = v10;
      v10 = (_QWORD *)v10[6];
    }
    while (v10 != v12);
    v11 = v14 + 6;
    v10 = v12;
  }
  *v11 = v10[6];
  FigReadWriteLockUnlockForWrite();
  if (a5 || (a5 = v12[4]) != 0)
    ++*(_DWORD *)(v5 + 176);
  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 48))(*(_QWORD *)(v5 + 56), v12[1], v12[2], v12[3], a5, v12[5], a3, a4);
  v15 = (const void *)v12[4];
  if (v15)
  {
    CFRelease(v15);
    v13 = 0;
    v12[4] = 0;
  }
  else
  {
    v13 = 0;
  }
LABEL_19:
  free(v12);
  return v13;
}

uint64_t VTTileDecoderSessionCleanUpAfterDecode()
{
  return 0;
}

uint64_t VTTileDecoderSessionSetTileDecodeRequirements(uint64_t *a1, const void *a2, const void *a3)
{
  uint64_t v3;
  const void *v6;
  const void *v7;

  if (!a1)
    return 4294954394;
  v3 = *a1;
  if (!*a1)
    return 4294954394;
  if (*(_BYTE *)(v3 + 160) == 1)
    return 4294954393;
  FigReadWriteLockLockForWrite();
  v6 = *(const void **)(v3 + 88);
  *(_QWORD *)(v3 + 88) = a2;
  if (a2)
    CFRetain(a2);
  if (v6)
    CFRelease(v6);
  v7 = *(const void **)(v3 + 96);
  *(_QWORD *)(v3 + 96) = a3;
  if (a3)
    CFRetain(a3);
  if (v7)
    CFRelease(v7);
  FigReadWriteLockUnlockForWrite();
  return 0;
}

double vtTileDecompressionSessionInit(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[1] = 0u;
  return result;
}

void vtTileDecompressionSessionFinalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;

  VTTileDecompressionSessionInvalidate((uint64_t)a1);
  FigReadWriteLockDestroy();
  FigReadWriteLockDestroy();
  v2 = (const void *)a1[9];
  if (v2)
  {
    CFRelease(v2);
    a1[9] = 0;
  }
  v3 = (const void *)a1[4];
  if (v3)
  {
    CFRelease(v3);
    a1[4] = 0;
  }
  v4 = (const void *)a1[5];
  if (v4)
  {
    CFRelease(v4);
    a1[5] = 0;
  }
  v5 = (const void *)a1[17];
  if (v5)
  {
    CFRelease(v5);
    a1[17] = 0;
  }
  v6 = (const void *)a1[12];
  if (v6)
  {
    CFRelease(v6);
    a1[12] = 0;
  }
  v7 = (const void *)a1[11];
  if (v7)
  {
    CFRelease(v7);
    a1[11] = 0;
  }
  v8 = (const void *)a1[18];
  if (v8)
  {
    CFRelease(v8);
    a1[18] = 0;
  }
}

CFTypeRef vtTileDecompressionSessionCopyFormattingDesc()
{
  return CFRetain(CFSTR("[VTTileDecompressionSession]"));
}

__CFString *vtTileDecompressionSessionCopyDebugDesc(uint64_t a1)
{
  unsigned int v2;
  const __CFAllocator *v3;
  __CFString *Mutable;
  uint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  CFAllocatorRef v9;

  v2 = *(_DWORD *)(a1 + 16);
  v3 = CFGetAllocator((CFTypeRef)a1);
  Mutable = CFStringCreateMutable(v3, 0);
  if (v2 > 0xA)
  {
    if (v2 > 0x28)
    {
      v2 = bswap32(v2);
      v6 = v2 >> 8;
      v5 = BYTE2(v2);
      LOBYTE(v7) = v2;
    }
    else
    {
      v5 = 0;
      v8 = *(_DWORD *)(a1 + 16);
      v7 = v8 / 0xA + 48;
      v6 = (v8 % 0xA) | 0x30;
    }
  }
  else
  {
    v5 = 0;
    LOBYTE(v6) = 0;
    v7 = *(_DWORD *)(a1 + 16) + 48;
  }
  v9 = CFGetAllocator((CFTypeRef)a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<VTTileDecompressionSession %p [%p]>{'%c%c%c%c',videoDecoder:%p, }"), a1, v9, HIBYTE(v2), v5, v6, v7, *(_QWORD *)(a1 + 72));
  return Mutable;
}

void vtTileDecompressionSessionAddPropertyToPartition(void *key, const void *a2, CFDictionaryRef *a3)
{
  __CFDictionary *Mutable;
  const __CFDictionary *v7;

  if (*a3 && CFDictionaryContainsKey(*a3, key))
  {
    Mutable = a3[2];
    if (!Mutable)
    {
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      a3[2] = Mutable;
    }
LABEL_9:
    CFDictionarySetValue(Mutable, key, a2);
    return;
  }
  v7 = a3[1];
  if (v7 && CFDictionaryContainsKey(v7, key))
  {
    Mutable = a3[3];
    if (!Mutable)
    {
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      a3[3] = Mutable;
    }
    goto LABEL_9;
  }
}

uint64_t AppleJPEGVideoDecoder_CreateInstance()
{
  uint64_t v0;

  VTVideoDecoderGetClassID();
  v0 = CMDerivedObjectCreate();
  FigSignalErrorAt();
  return v0;
}

uint64_t AppleJPEGVideoDecoder_Invalidate()
{
  *(_BYTE *)CMBaseObjectGetDerivedStorage() = 1;
  return 0;
}

void AppleJPEGVideoDecoder_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)(DerivedStorage + 24) = 0;
  v1 = *(const void **)(DerivedStorage + 40);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 40) = 0;
  }
}

__CFString *AppleJPEGVideoDecoder_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<AppleJPEGVideoDecoder %p>"), a1);
  return Mutable;
}

uint64_t AppleJPEGVideoDecoder_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  CFNumberRef v7;
  const void *v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, CFSTR("ReducedFrameDelivery")))
  {
    v7 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberDoubleType, (const void *)(DerivedStorage + 8));
    *a4 = v7;
    if (v7)
      return 0;
LABEL_6:
    FigSignalErrorAt();
    return 0;
  }
  if (CFEqual(a2, CFSTR("SuggestedQualityOfServiceTiers")))
  {
    MEMORY[0x1940281CC](&sCreateSuggestedQualityOfServiceTiersOnce_0, applejpegCreateSuggestedQualityOfServiceTiers);
    v8 = (const void *)gJPEGVideoDecoderSuggestedQualityOfServiceTiers;
    if (!gJPEGVideoDecoderSuggestedQualityOfServiceTiers)
      goto LABEL_6;
LABEL_9:
    *a4 = CFRetain(v8);
    return 0;
  }
  if (CFEqual(a2, CFSTR("ContentHasInterframeDependencies")))
  {
    v8 = (const void *)*MEMORY[0x1E0C9AE40];
    goto LABEL_9;
  }
  return FigSignalErrorAt();
}

uint64_t AppleJPEGVideoDecoder_SetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  CFTypeID TypeID;
  uint64_t result;
  double valuePtr;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!CFEqual(a2, CFSTR("ReducedFrameDelivery")))
  {
    CFEqual(a2, CFSTR("SuggestedQualityOfServiceTiers"));
    return FigSignalErrorAt();
  }
  if (!a3)
    return FigSignalErrorAt();
  TypeID = CFNumberGetTypeID();
  if (TypeID != CFGetTypeID(a3))
    return FigSignalErrorAt();
  valuePtr = 1.0;
  CFNumberGetValue((CFNumberRef)a3, kCFNumberDoubleType, &valuePtr);
  if (valuePtr < 0.0 || valuePtr > 1.0)
    return FigSignalErrorAt();
  result = 0;
  *(double *)(DerivedStorage + 8) = valuePtr;
  return result;
}

void applejpegCreateSuggestedQualityOfServiceTiers()
{
  uint64_t v0;
  const CFDictionaryKeyCallBacks *v1;
  const CFDictionaryValueCallBacks *v2;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v4;
  uint64_t i;
  const void *v6;
  _OWORD v7[2];
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v9 = xmmword_1928E2D10;
  v10 = xmmword_1928E2D20;
  v11 = 0x3FB999999999999ALL;
  v8 = 0;
  memset(v7, 0, sizeof(v7));
  gJPEGVideoDecoderSuggestedQualityOfServiceTiers = (uint64_t)CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (gJPEGVideoDecoderSuggestedQualityOfServiceTiers)
  {
    v0 = 0;
    v1 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
    v2 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
    while (1)
    {
      Mutable = CFDictionaryCreateMutable(0, 0, v1, v2);
      *(_QWORD *)((char *)v7 + v0) = Mutable;
      if (!Mutable)
        break;
      v4 = Mutable;
      if (!FigCFDictionarySetDouble())
      {
        CFArrayAppendValue((CFMutableArrayRef)gJPEGVideoDecoderSuggestedQualityOfServiceTiers, v4);
        CFRelease(v4);
        *(_QWORD *)((char *)v7 + v0) = 0;
        v0 += 8;
        if (v0 != 40)
          continue;
      }
      goto LABEL_6;
    }
  }
  FigSignalErrorAt();
LABEL_6:
  for (i = 0; i != 40; i += 8)
  {
    v6 = *(const void **)((char *)v7 + i);
    if (v6)
      CFRelease(v6);
  }
}

uint64_t AppleJPEGVideoDecoder_StartSession(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  const opaqueCMFormatDescription *v4;
  CMVideoDimensions Dimensions;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v7;
  CFMutableArrayRef v8;
  CFMutableArrayRef v9;
  uint64_t i;
  uint64_t v11;

  VTVideoDecoderGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)(DerivedStorage + 24) = a2;
  FigFormatDescriptionRelease();
  v4 = (const opaqueCMFormatDescription *)FigFormatDescriptionRetain();
  *(_QWORD *)(DerivedStorage + 40) = v4;
  Dimensions = CMVideoFormatDescriptionGetDimensions(v4);
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v7 = Mutable;
    v8 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    if (v8)
    {
      v9 = v8;
      for (i = 0; i != 24; i += 4)
        FigCFArrayAppendInt32();
      CFDictionarySetValue(v7, (const void *)*MEMORY[0x1E0CA9040], v9);
      CFRelease(v9);
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      if ((-Dimensions.width & 0xF) != 0)
        FigCFDictionarySetInt32();
      if ((-Dimensions.height & 0xF) != 0)
        FigCFDictionarySetInt32();
      VTDecoderSessionSetPixelBufferAttributes(*(uint64_t **)(DerivedStorage + 24), v7);
      CFRelease(v7);
      return 0;
    }
    v11 = FigSignalErrorAt();
    CFRelease(v7);
  }
  else
  {
    v11 = FigSignalErrorAt();
  }
  if (!(_DWORD)v11)
    VTDecoderSessionSetPixelBufferAttributes(*(uint64_t **)(DerivedStorage + 24), 0);
  return v11;
}

uint64_t AppleJPEGVideoDecoder_DecodeFrame(uint64_t a1, const void *a2, CMSampleBufferRef sbuf, uint64_t a4, _DWORD *a5)
{
  OpaqueCMBlockBuffer *DataBuffer;
  size_t DataLength;
  uint64_t DerivedStorage;
  const __CFArray *SampleAttachmentsArray;
  const __CFDictionary *ValueAtIndex;
  const void *Value;
  const void *v15;
  CFTypeID TypeID;
  double v17;
  uint64_t v18;
  double v19;
  OpaqueCMBlockBuffer *v20;
  uint64_t Contiguous;
  __CVPixelBufferPool *PixelBufferPool;
  uint64_t v23;
  signed int PixelFormatType;
  int IsPlanar;
  int v26;
  int PlaneCount;
  size_t v28;
  uint64_t v29;
  CMBlockBufferRef *v30;
  size_t BytesPerRowOfPlane;
  size_t HeightOfPlane;
  OpaqueCMBlockBuffer *BaseAddressOfPlane;
  size_t v34;
  size_t BytesPerRow;
  size_t Height;
  int v37;
  __CVBuffer *v38;
  size_t extraRowsOnBottom;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  size_t v45;
  __int128 v46;
  __int128 v47;
  _OWORD v48[6];
  uint64_t v49;
  CVPixelBufferRef pixelBufferOut;
  char *dataPointerOut;
  CMBlockBufferRef blockBufferOut[9];

  blockBufferOut[7] = *(CMBlockBufferRef *)MEMORY[0x1E0C80C00];
  DataBuffer = CMSampleBufferGetDataBuffer(sbuf);
  DataLength = CMBlockBufferGetDataLength(DataBuffer);
  dataPointerOut = 0;
  blockBufferOut[0] = 0;
  pixelBufferOut = 0;
  v49 = 0;
  memset(v48, 0, sizeof(v48));
  v46 = 0u;
  v47 = 0u;
  v44 = 0;
  v45 = 0;
  v43 = 0;
  VTVideoDecoderGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v41 = xmmword_1E2F63FC0;
  v42 = 0;
  SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(sbuf, 0);
  if (SampleAttachmentsArray
    && (ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0)) != 0
    && (Value = CFDictionaryGetValue(ValueAtIndex, (const void *)*MEMORY[0x1E0CA25D8])) != 0
    && (v15 = Value, TypeID = CFBooleanGetTypeID(), TypeID == CFGetTypeID(v15))
    && CFBooleanGetValue((CFBooleanRef)v15)
    || (v17 = *(double *)(DerivedStorage + 8) + *(double *)(DerivedStorage + 16),
        *(double *)(DerivedStorage + 16) = v17,
        v17 < 1.0))
  {
    v18 = 0;
    *a5 |= 2u;
    goto LABEL_53;
  }
  v19 = v17 + -1.0;
  if (v19 >= 1.0)
    v19 = 1.0;
  *(double *)(DerivedStorage + 16) = v19;
  if (CMBlockBufferIsRangeContiguous(DataBuffer, 0, 0))
  {
    v20 = (OpaqueCMBlockBuffer *)CFRetain(DataBuffer);
    blockBufferOut[0] = v20;
  }
  else
  {
    Contiguous = CMBlockBufferCreateContiguous((CFAllocatorRef)*MEMORY[0x1E0C9AE00], DataBuffer, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, DataLength, 0, blockBufferOut);
    if ((_DWORD)Contiguous)
      goto LABEL_57;
    v20 = blockBufferOut[0];
  }
  CMBlockBufferGetDataPointer(v20, 0, 0, 0, &dataPointerOut);
  v44 = dataPointerOut;
  v45 = DataLength;
  PixelBufferPool = (__CVPixelBufferPool *)VTDecoderSessionGetPixelBufferPool(*(uint64_t **)(DerivedStorage + 24));
  v23 = CVPixelBufferPoolCreatePixelBuffer(0, PixelBufferPool, &pixelBufferOut);
  if ((_DWORD)v23)
  {
    v18 = v23;
    FigSignalErrorAt();
    goto LABEL_61;
  }
  VTDecoderSessionTrace(*(_QWORD *)(DerivedStorage + 24));
  Contiguous = CVPixelBufferLockBaseAddress(pixelBufferOut, 0);
  if ((_DWORD)Contiguous)
  {
LABEL_57:
    v18 = Contiguous;
LABEL_61:
    v37 = 0;
    goto LABEL_46;
  }
  if (!applejpeg_decode_create())
  {
    v18 = 4294954392;
    goto LABEL_45;
  }
  if (applejpeg_decode_open_jpeg_dib())
  {
    v18 = 4294954392;
    goto LABEL_44;
  }
  if (*(_QWORD *)(DerivedStorage + 40))
  {
    if (applejpeg_decode_get_image_info())
    {
LABEL_56:
      v18 = 4294954394;
LABEL_59:
      v37 = 1;
LABEL_41:
      applejpeg_decode_destroy();
      if (!(_DWORD)v18)
        goto LABEL_47;
      goto LABEL_46;
    }
    if (CMVideoFormatDescriptionGetDimensions(*(CMVideoFormatDescriptionRef *)(DerivedStorage + 40)))
    {
      v18 = FigSignalErrorAt();
      goto LABEL_59;
    }
  }
  extraRowsOnBottom = 0;
  memset(&blockBufferOut[1], 0, 48);
  PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBufferOut);
  IsPlanar = CVPixelBufferIsPlanar(pixelBufferOut);
  CVPixelBufferGetExtendedPixels(pixelBufferOut, 0, 0, 0, &extraRowsOnBottom);
  applejpeg_decode_options_init();
  if (PixelFormatType <= 1278555700)
  {
    v26 = 10;
    if (PixelFormatType != 875704422 && PixelFormatType != 875704438)
    {
      if (PixelFormatType == 1111970369)
      {
        v26 = 4;
        goto LABEL_32;
      }
      goto LABEL_43;
    }
LABEL_32:
    DWORD2(v46) = v26;
    if (IsPlanar)
    {
      PlaneCount = CVPixelBufferGetPlaneCount(pixelBufferOut);
      if (PlaneCount >= 1)
      {
        v28 = 0;
        v29 = PlaneCount;
        v30 = &blockBufferOut[2];
        do
        {
          BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBufferOut, v28);
          HeightOfPlane = CVPixelBufferGetHeightOfPlane(pixelBufferOut, v28);
          BaseAddressOfPlane = (OpaqueCMBlockBuffer *)CVPixelBufferGetBaseAddressOfPlane(pixelBufferOut, v28);
          v34 = (extraRowsOnBottom + HeightOfPlane) * BytesPerRowOfPlane;
          *(v30 - 1) = BaseAddressOfPlane;
          *v30 = (CMBlockBufferRef)v34;
          *((_QWORD *)v48 + ++v28) = BytesPerRowOfPlane;
          v30 += 2;
        }
        while (v29 != v28);
      }
    }
    else
    {
      BytesPerRow = CVPixelBufferGetBytesPerRow(pixelBufferOut);
      Height = CVPixelBufferGetHeight(pixelBufferOut);
      blockBufferOut[1] = (CMBlockBufferRef)CVPixelBufferGetBaseAddress(pixelBufferOut);
      blockBufferOut[2] = (CMBlockBufferRef)((extraRowsOnBottom + Height) * BytesPerRow);
      *((_QWORD *)&v48[0] + 1) = BytesPerRow;
    }
    if (!applejpeg_decode_set_options() && !applejpeg_decode_image_all())
    {
      CVPixelBufferUnlockBaseAddress(pixelBufferOut, 0);
      VTDecoderSessionTrace(*(_QWORD *)(DerivedStorage + 24));
      v37 = 0;
      v18 = 0;
      goto LABEL_41;
    }
    goto LABEL_56;
  }
  switch(PixelFormatType)
  {
    case 1278555701:
      v26 = 2;
      goto LABEL_32;
    case 1380401729:
      v26 = 3;
      goto LABEL_32;
    case 2037741158:
      v26 = 7;
      goto LABEL_32;
  }
LABEL_43:
  v18 = 4294954394;
LABEL_44:
  applejpeg_decode_destroy();
LABEL_45:
  v37 = 1;
LABEL_46:
  FigSignalErrorAt();
LABEL_47:
  v38 = pixelBufferOut;
  if (v37)
  {
    CVPixelBufferUnlockBaseAddress(pixelBufferOut, 0);
    v38 = pixelBufferOut;
  }
  if (v38
    && (CVPixelBufferGetPixelFormatType(v38) == 1111970369 || CVPixelBufferGetPixelFormatType(pixelBufferOut) == 32))
  {
    CVBufferSetAttachment(pixelBufferOut, (CFStringRef)*MEMORY[0x1E0CA8CA8], (CFTypeRef)*MEMORY[0x1E0C9AE50], kCVAttachmentMode_ShouldPropagate);
  }
LABEL_53:
  VTDecoderSessionEmitDecodedFrame(*(uint64_t **)(DerivedStorage + 24), a2, v18, *a5, pixelBufferOut);
  if (blockBufferOut[0])
    CFRelease(blockBufferOut[0]);
  CVPixelBufferRelease(pixelBufferOut);
  return v18;
}

uint64_t AppleJPEGVideoDecoder_CopySupportedPropertyDictionary(uint64_t a1, CFTypeRef *a2)
{
  MEMORY[0x1940281CC](&gCreateSupportedPropertyDictionaryOnce, applejpegCreateSupportedPropertyDictionary);
  if (!a2 || !gJPEGVideoDecoderSupportedPropertyDictionary)
    return FigSignalErrorAt();
  *a2 = CFRetain((CFTypeRef)gJPEGVideoDecoderSupportedPropertyDictionary);
  return 0;
}

void *_applejpeg_alloc(size_t a1)
{
  return malloc_type_malloc(a1, 0x1FDA2139uLL);
}

void applejpegCreateSupportedPropertyDictionary()
{
  __CFDictionary *Mutable;
  __CFDictionary *v1;
  CFMutableDictionaryRef v2;
  CFMutableDictionaryRef v3;
  __CFDictionary *v4;
  __CFDictionary *v5;
  __CFDictionary *v6;
  __CFDictionary *v7;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    FigSignalErrorAt();
    return;
  }
  v1 = Mutable;
  CFDictionarySetValue(Mutable, CFSTR("PropertyType"), CFSTR("Number"));
  CFDictionarySetValue(v1, CFSTR("ReadWriteStatus"), CFSTR("ReadWrite"));
  if (FigCFDictionarySetInt32() || FigCFDictionarySetInt32())
  {
LABEL_15:
    v7 = v1;
    goto LABEL_10;
  }
  v2 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v2)
  {
    FigSignalErrorAt();
    goto LABEL_15;
  }
  v3 = v2;
  v4 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v5 = v4;
  if (v4
    && (CFDictionarySetValue(v4, CFSTR("PropertyType"), CFSTR("Boolean")),
        CFDictionarySetValue(v5, CFSTR("ReadWriteStatus"), CFSTR("ReadOnly")),
        v6 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]),
        (gJPEGVideoDecoderSupportedPropertyDictionary = (uint64_t)v6) != 0))
  {
    CFDictionarySetValue(v6, CFSTR("ReducedFrameDelivery"), v1);
    CFDictionarySetValue((CFMutableDictionaryRef)gJPEGVideoDecoderSupportedPropertyDictionary, CFSTR("SuggestedQualityOfServiceTiers"), v3);
    CFDictionarySetValue((CFMutableDictionaryRef)gJPEGVideoDecoderSupportedPropertyDictionary, CFSTR("ContentHasInterframeDependencies"), v5);
  }
  else
  {
    FigSignalErrorAt();
  }
  CFRelease(v1);
  CFRelease(v3);
  if (v5)
  {
    v7 = v5;
LABEL_10:
    CFRelease(v7);
  }
}

uint64_t VTPixelTransferChainNodeSessionSetProperties(uint64_t a1, CFDictionaryRef theDict)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a1;
  if (!theDict)
    return 0;
  v4 = 0;
  CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)VTPixelTransferChainNodeSessionSetOneProperty, &v3);
  return v4;
}

uint64_t VTPixelTransferChainNodeSessionSetOneProperty(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t result;

  v6 = *a3;
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v7)
    result = v7(v6, a1, a2);
  else
    result = 4294954514;
  if (!*((_DWORD *)a3 + 2))
    *((_DWORD *)a3 + 2) = result;
  return result;
}

uint64_t VTPixelTransferNodeGetTypeID()
{
  MEMORY[0x1940281CC](&VTPixelTransferNodeGetClassID_sRegisterVTPixelTransferNodeTypeOnce, RegisterVTPixelTransferNodeType);
  return CMBaseClassGetCFTypeID();
}

uint64_t VTPixelTransferNodeGetClassID()
{
  MEMORY[0x1940281CC](&VTPixelTransferNodeGetClassID_sRegisterVTPixelTransferNodeTypeOnce, RegisterVTPixelTransferNodeType);
  return sVTPixelTransferNodeClassID;
}

uint64_t VTPixelTransferNodeBaseDoFlush(uint64_t a1, CVPixelBufferPoolFlushFlags a2)
{
  __CVPixelBufferPool *v3;

  v3 = *(__CVPixelBufferPool **)(CMBaseObjectGetDerivedStorage() + 8);
  if (v3)
    CVPixelBufferPoolFlush(v3, a2);
  return 0;
}

void VTPixelTransferNodeBaseFinalize()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
}

void RegisterVTPixelTransferNodeType()
{
  const void *CFTypeID;

  CMBaseGetClassID();
  FigBaseClassRegisterClass();
  sVTSessionPropertyCallbacks = 0;
  *(_QWORD *)algn_1ECED92C8 = VTPixelTransferChainNodeSessionCopySupportedPropertyDictionary;
  qword_1ECED92D0 = (uint64_t)VTPixelTransferChainNodeSessionSetProperty;
  unk_1ECED92D8 = VTPixelTransferChainNodeSessionCopyProperty;
  qword_1ECED92E0 = (uint64_t)VTPixelTransferChainNodeSessionSetProperties;
  unk_1ECED92E8 = VTPixelTransferChainNodeSessionCopySerializableProperties;
  CFTypeID = (const void *)CMBaseClassGetCFTypeID();
  VTSessionRegisterCallbacksForTypeID(&sVTSessionPropertyCallbacks, CFTypeID);
}

uint64_t VTPixelTransferChainDoTransfer(uint64_t a1, const void *a2, __int128 *a3, const void *a4, __int128 *a5)
{
  const __CFArray *v6;
  CFIndex Count;
  CFIndex v12;
  __int128 v13;
  __int128 v14;
  CFIndex v15;
  CFIndex v17;
  uint64_t v18;
  const void *ValueAtIndex;
  const void *v20;
  __CVBuffer *v21;
  uint64_t DerivedStorage;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t (*v26)(const void *, const void *, __int128 *, __CVBuffer *, __int128 *);
  uint64_t v27;
  const __CFAllocator *allocator;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  CVPixelBufferRef pixelBufferOut;

  pixelBufferOut = 0;
  v6 = *(const __CFArray **)(a1 + 16);
  if (!v6)
    return 0;
  Count = CFArrayGetCount(v6);
  if (Count >= 1)
  {
    v12 = Count;
    if (a2)
      a2 = CFRetain(a2);
    v13 = a3[1];
    v33 = *a3;
    v34 = v13;
    v35 = a3[2];
    v14 = a5[1];
    v30 = *a5;
    v31 = v14;
    v15 = (v12 - 1);
    v32 = a5[2];
    if ((int)v12 >= 2)
    {
      do
      {
        if (CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), v15) && !*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 16))
          goto LABEL_11;
      }
      while (v15-- > 1);
      LODWORD(v15) = 0;
    }
LABEL_11:
    v17 = 0;
    allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v18 = v15;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), v17);
      v20 = ValueAtIndex;
      if (v17)
      {
        a2 = pixelBufferOut;
        v33 = v30;
        v34 = v31;
        v35 = v32;
      }
      pixelBufferOut = 0;
      if (v18 == v17)
        break;
      if (ValueAtIndex && *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 16))
      {
        if (a2)
          v21 = (__CVBuffer *)CFRetain(a2);
        else
          v21 = 0;
        pixelBufferOut = v21;
        v30 = v33;
        v31 = v34;
        v25 = v35;
        goto LABEL_27;
      }
      pixelBufferOut = 0;
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      v23 = CVPixelBufferPoolCreatePixelBuffer(allocator, *(CVPixelBufferPoolRef *)(DerivedStorage + 8), &pixelBufferOut);
      if ((_DWORD)v23)
        goto LABEL_39;
      *(_QWORD *)&v30 = CVPixelBufferGetWidth(pixelBufferOut);
      *((_QWORD *)&v30 + 1) = CVPixelBufferGetHeight(pixelBufferOut);
      v31 = 0uLL;
      *(double *)&v32 = (double)(uint64_t)v30;
      *((double *)&v32 + 1) = (double)*((uint64_t *)&v30 + 1);
      v21 = pixelBufferOut;
LABEL_28:
      v26 = *(uint64_t (**)(const void *, const void *, __int128 *, __CVBuffer *, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (!v26)
      {
        v27 = 4294954514;
        if (!a2)
          goto LABEL_36;
        goto LABEL_35;
      }
      v23 = v26(v20, a2, &v33, v21, &v30);
      if ((_DWORD)v23)
      {
LABEL_39:
        v27 = v23;
        if (!a2)
          goto LABEL_36;
LABEL_35:
        CFRelease(a2);
        goto LABEL_36;
      }
      if (a2)
        CFRelease(a2);
      a2 = 0;
      if (v12 == ++v17)
        goto LABEL_33;
    }
    if (a4)
      v21 = (__CVBuffer *)CFRetain(a4);
    else
      v21 = 0;
    pixelBufferOut = v21;
    v24 = a5[1];
    v30 = *a5;
    v31 = v24;
    v25 = a5[2];
LABEL_27:
    v32 = v25;
    goto LABEL_28;
  }
LABEL_33:
  v27 = 0;
LABEL_36:
  if (pixelBufferOut)
    CFRelease(pixelBufferOut);
  return v27;
}

uint64_t VTPixelTransferChainRemoveAllNodes(uint64_t a1)
{
  __CFArray *v1;

  if (a1)
  {
    v1 = *(__CFArray **)(a1 + 16);
    if (v1)
      CFArrayRemoveAllValues(v1);
  }
  return 0;
}

uint64_t VTPixelTransferChainFlush(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  CFIndex Count;
  CFIndex v6;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t (*v9)(const void *, uint64_t);

  result = *(_QWORD *)(a1 + 16);
  if (result)
  {
    Count = CFArrayGetCount((CFArrayRef)result);
    if (Count < 1)
    {
      return 0;
    }
    else
    {
      v6 = Count;
      for (i = 0; i != v6; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), i);
        v9 = *(uint64_t (**)(const void *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
        if (v9)
          result = v9(ValueAtIndex, a2);
        else
          result = 4294954514;
      }
    }
  }
  return result;
}

const __CFArray *VTPixelTransferChainHasNodes(const __CFArray *result)
{
  if (result)
  {
    result = (const __CFArray *)*((_QWORD *)result + 2);
    if (result)
      return (const __CFArray *)(CFArrayGetCount(result) != 0);
  }
  return result;
}

uint64_t RegisterVTPixelTransferChain()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sVTPixelTransferChainID = result;
  return result;
}

uint64_t VTPixelTransferChainAppendNode(uint64_t a1, const void *a2)
{
  CFIndex Count;
  uint64_t result;
  uint64_t v6;
  uint64_t DerivedStorage;

  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 16));
  result = CMBaseObjectGetDerivedStorage();
  if (result)
  {
    if (!Count
      || (v6 = result, !CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), Count - 1))
      || (DerivedStorage = CMBaseObjectGetDerivedStorage(), *(_BYTE *)(DerivedStorage + 16))
      || *(_BYTE *)(v6 + 16)
      || (result = CVPixelBufferPoolCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, *(CFDictionaryRef *)DerivedStorage, (CVPixelBufferPoolRef *)(DerivedStorage + 8)), !(_DWORD)result))
    {
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 16), a2);
      return 0;
    }
  }
  return result;
}

uint64_t VTPixelTransferChainCreate(uint64_t a1, uint64_t *a2)
{
  uint64_t Instance;
  uint64_t v4;
  CFMutableArrayRef Mutable;
  uint64_t result;

  if (!a2)
    return FigSignalErrorAt();
  MEMORY[0x1940281CC](&VTPixelTransferChainGetTypeID_sRegisterVTPixelTransferChainOnce, RegisterVTPixelTransferChain);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return 4294954392;
  v4 = Instance;
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  result = 0;
  *(_QWORD *)(v4 + 16) = Mutable;
  *a2 = v4;
  return result;
}

uint64_t VTPixelTransferChainCreatePixelBufferPoolAttributes(uint64_t a1, uint64_t a2, uint64_t a3, CFMutableDictionaryRef *a4)
{
  const __CFAllocator *v5;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v7;
  CFMutableDictionaryRef v8;
  CFMutableDictionaryRef v9;
  uint64_t v10;
  uint64_t v11;

  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return 4294954392;
  v7 = Mutable;
  v8 = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v8)
  {
    v11 = 4294954392;
    v9 = v7;
    goto LABEL_7;
  }
  v9 = v8;
  v10 = FigCFDictionarySetInt32();
  if ((_DWORD)v10 || (v10 = FigCFDictionarySetInt64(), (_DWORD)v10))
  {
    v11 = v10;
    goto LABEL_10;
  }
  v11 = FigCFDictionarySetInt64();
  if ((_DWORD)v11)
  {
LABEL_10:
    CFRelease(v7);
    goto LABEL_7;
  }
  FigCFDictionarySetValue();
  *a4 = v7;
LABEL_7:
  CFRelease(v9);
  return v11;
}

uint64_t VTPixelTransferChainCopyFirstNodeProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int Count;
  CFIndex v10;
  uint64_t v11;
  const void *ValueAtIndex;
  const void *v13;
  uint64_t (*v14)(const void *, uint64_t, uint64_t, uint64_t);
  uint64_t v15;

  v4 = 0;
  if (a1 && a2 && a4)
  {
    Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 16));
    if (Count < 1)
    {
      return 0;
    }
    else
    {
      v10 = 0;
      v4 = 0;
      v11 = Count;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), v10);
        if (ValueAtIndex)
        {
          v13 = ValueAtIndex;
          v14 = *(uint64_t (**)(const void *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
          if (!v14)
            return 4294954514;
          v15 = v14(v13, a2, a3, a4);
          v4 = 4294954396;
          if ((_DWORD)v15 != -12900)
            break;
        }
        if (v11 == ++v10)
          return v4;
      }
      return v15;
    }
  }
  return v4;
}

__CFArray *VTPixelTransferChainCopyDescriptionChain(uint64_t a1)
{
  CFIndex v2;
  CFStringRef v3;
  __CFArray *Mutable;
  const __CFAllocator *v5;
  const CFArrayCallBacks *v6;
  const void *ValueAtIndex;

  if (CFArrayGetCount(*(CFArrayRef *)(a1 + 16)) < 1)
    return 0;
  v2 = 0;
  v3 = 0;
  Mutable = 0;
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v6 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
  do
  {
    if (v3)
      CFRelease(v3);
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), v2);
    if (ValueAtIndex)
    {
      v3 = CFCopyDescription(ValueAtIndex);
      if (v3)
      {
        if (!Mutable)
        {
          Mutable = CFArrayCreateMutable(v5, 0, v6);
          if (!Mutable)
            goto LABEL_13;
        }
        CFArrayAppendValue(Mutable, v3);
      }
    }
    else
    {
      v3 = 0;
    }
    ++v2;
  }
  while (CFArrayGetCount(*(CFArrayRef *)(a1 + 16)) > v2);
  if (!v3)
    return Mutable;
LABEL_13:
  CFRelease(v3);
  return Mutable;
}

uint64_t VTPixelTransferChainNodeSessionSetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);

  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v6)
    return v6(a1, a2, a3);
  else
    return 4294954514;
}

uint64_t VTPixelTransferChainNodeSessionCopySupportedPropertyDictionary(uint64_t a1, uint64_t a2)
{
  uint64_t (*v4)(uint64_t, uint64_t);

  v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v4)
    return v4(a1, a2);
  else
    return 4294954514;
}

uint64_t VTPixelTransferChainNodeSessionCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);

  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v8)
    return v8(a1, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t VTPixelTransferChainNodeSessionCopySerializableProperties()
{
  return FigSignalErrorAt();
}

CFTypeRef VTPixelTransferNodeCopyFormattingDesc()
{
  return CFRetain(CFSTR("[VTPixelTransferNode]"));
}

uint64_t vtPixelTransferChainInit(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  return result;
}

void vtPixelTransferChainFinalize(uint64_t a1)
{
  const void *v2;

  if (a1)
  {
    v2 = *(const void **)(a1 + 16);
    if (v2)
    {
      CFRelease(v2);
      *(_QWORD *)(a1 + 16) = 0;
    }
  }
}

CFTypeRef vtPixelTransferChain_CopyFormattingDesc()
{
  return CFRetain(CFSTR("[VTPixelTransferChain]"));
}

__CFString *vtPixelTransferChainCopyDebugDesc(CFArrayRef *a1)
{
  CFArrayRef v2;
  CFTypeID v3;
  const __CFAllocator *v4;
  __CFString *Mutable;
  CFAllocatorRef v6;

  if (!a1)
    return 0;
  v2 = a1[2];
  if (!v2)
    return 0;
  v3 = CFGetTypeID(v2);
  if (v3 != CFArrayGetTypeID())
    return 0;
  CFArrayGetCount(a1[2]);
  v4 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v4, 0);
  v6 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<VTPixelTransferChain %p [%p]>{"), a1, v6);
  CFStringAppendFormat(Mutable, 0, CFSTR("\n}"));
  return Mutable;
}

uint64_t VTTestMotionEstimationProcessor_CreateInstance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (!a3)
    return 4294954394;
  VTMotionEstimationProcessorGetClassID();
  v3 = CMDerivedObjectCreate();
  FigSignalErrorAt();
  return v3;
}

uint64_t VTTestMotionEstimationProcessor_Invalidate(const void *a1)
{
  CFTypeID v1;
  _BYTE *DerivedStorage;
  uint64_t result;

  if (!a1)
    return 4294954394;
  v1 = CFGetTypeID(a1);
  if (v1 != VTMotionEstimationProcessorGetTypeID())
    return 4294954394;
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  result = 0;
  *DerivedStorage = 1;
  return result;
}

void VTTestMotionEstimationProcessor_Finalize(const void *a1)
{
  CFTypeID v1;
  uint64_t DerivedStorage;
  const void *v3;

  if (a1)
  {
    v1 = CFGetTypeID(a1);
    if (v1 == VTMotionEstimationProcessorGetTypeID())
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      *(_QWORD *)(DerivedStorage + 16) = 0;
      v3 = *(const void **)(DerivedStorage + 8);
      if (v3)
        CFRelease(v3);
    }
  }
}

__CFString *VTTestMotionEstimationProcessor_CopyDebugDescription(const void *a1)
{
  __CFString *Mutable;
  CFTypeID v3;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (a1)
  {
    v3 = CFGetTypeID(a1);
    if (v3 == VTMotionEstimationProcessorGetTypeID())
      CFStringAppendFormat(Mutable, 0, CFSTR("<VTTestMotionEstimationProcessor %p>"), a1);
  }
  return Mutable;
}

uint64_t VTTestMotionEstimationProcessor_CopyProperty(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v5;
  uint64_t TypeID;

  if (!a1)
    return 4294954394;
  v5 = CFGetTypeID(a1);
  TypeID = VTMotionEstimationProcessorGetTypeID();
  if (!a4 || v5 != TypeID)
    return 4294954394;
  CMBaseObjectGetDerivedStorage();
  return FigSignalErrorAt();
}

uint64_t VTTestMotionEstimationProcessor_SetProperty(const void *a1, const void *a2)
{
  CFTypeID v3;
  uint64_t TypeID;
  CFTypeID v5;

  if (!a1)
    return 4294954394;
  v3 = CFGetTypeID(a1);
  TypeID = VTMotionEstimationProcessorGetTypeID();
  if (!a2)
    return 4294954394;
  if (v3 != TypeID)
    return 4294954394;
  v5 = CFGetTypeID(a2);
  if (v5 != CFStringGetTypeID())
    return 4294954394;
  CMBaseObjectGetDerivedStorage();
  return FigSignalErrorAt();
}

uint64_t VTTestMotionEstimationProcessor_StartSession(const void *a1, uint64_t a2, _QWORD *a3)
{
  CFTypeID v5;
  uint64_t TypeID;
  uint64_t v7;
  uint64_t DerivedStorage;
  const __CFAllocator *v9;
  CFMutableDictionaryRef Mutable;
  uint64_t v11;
  CFMutableDictionaryRef v12;
  uint64_t v13;

  if (!a1)
    return 4294954394;
  v5 = CFGetTypeID(a1);
  TypeID = VTMotionEstimationProcessorGetTypeID();
  v7 = 4294954394;
  if (a3 && v5 == TypeID && (_DWORD)a2 && HIDWORD(a2))
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v11 = FigCFDictionarySetInt32();
    if ((_DWORD)v11
      || (v11 = FigCFDictionarySetInt32(), (_DWORD)v11)
      || (v11 = FigCFDictionarySetInt32(), (_DWORD)v11)
      || (v11 = VTMotionEstimationProcessorSessionSetSourcePixelBufferAttributes(a3, Mutable), (_DWORD)v11))
    {
      v7 = v11;
      v12 = 0;
    }
    else
    {
      v12 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v13 = FigCFDictionarySetInt32();
      if ((_DWORD)v13
        || (v13 = FigCFDictionarySetInt32(), (_DWORD)v13)
        || (v13 = FigCFDictionarySetInt32(), (_DWORD)v13))
      {
        v7 = v13;
      }
      else
      {
        v7 = VTMotionEstimationProcessorSessionSetMotionVectorPixelBufferAttributes((uint64_t)a3, v12);
        if (!(_DWORD)v7)
          *(_QWORD *)(DerivedStorage + 16) = a3;
      }
    }
    if (Mutable)
      CFRelease(Mutable);
    if (v12)
      CFRelease(v12);
  }
  return v7;
}

uint64_t VTTestMotionEstimationProcessor_ProcessFrame(const void *a1, const void *a2, const void *a3, const void *a4, uint64_t a5, const void *a6)
{
  CFTypeID v10;
  uint64_t TypeID;
  uint64_t v12;
  CFTypeID v13;
  CFTypeID v14;
  CFTypeID v15;
  CFTypeID v16;
  uint64_t DerivedStorage;
  CFTypeRef cf;

  cf = 0;
  if (!a1)
    return 4294954394;
  v10 = CFGetTypeID(a1);
  TypeID = VTMotionEstimationProcessorGetTypeID();
  v12 = 4294954394;
  if (!a3)
    return v12;
  if (v10 != TypeID)
    return v12;
  v13 = CFGetTypeID(a3);
  v14 = CVPixelBufferGetTypeID();
  if (!a4 || v13 != v14)
    return v12;
  v15 = CFGetTypeID(a4);
  if (v15 != CVPixelBufferGetTypeID())
    return 4294954394;
  if (a6)
  {
    v16 = CFGetTypeID(a6);
    if (v16 != CFDictionaryGetTypeID())
      return 4294954394;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (VTMotionEstimationProcessorSessionCreateMotionVectorPixelBuffer(*(_QWORD *)(DerivedStorage + 16), (CVPixelBufferRef *)&cf)&& cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  v12 = VTMotionEstimationProcessorSessionEmitMotionVectors(*(_QWORD *)(DerivedStorage + 16), a2);
  if (cf)
    CFRelease(cf);
  return v12;
}

uint64_t VTTestMotionEstimationProcessor_CompleteFrames(const void *a1)
{
  CFTypeID v1;

  if (a1 && (v1 = CFGetTypeID(a1), v1 == VTMotionEstimationProcessorGetTypeID()))
    return 0;
  else
    return 4294954394;
}

uint64_t VTTestMotionEstimationProcessor_CopySupportedPropertyDictionary(const void *a1, _QWORD *a2)
{
  CFTypeID v4;
  uint64_t TypeID;
  uint64_t result;
  CFTypeRef v7;

  MEMORY[0x1940281CC](&sCreateSupportedPropertyDictionaryOnce_3, vtTestMotionEstimationProcessor_createSupportedPropertyDictionary);
  if (!a1)
    return 4294954394;
  v4 = CFGetTypeID(a1);
  TypeID = VTMotionEstimationProcessorGetTypeID();
  result = 4294954394;
  if (a2 && v4 == TypeID)
  {
    if (sVTTestMotionEstimationProcessorSupportedPropertyDictionary)
    {
      v7 = CFRetain((CFTypeRef)sVTTestMotionEstimationProcessorSupportedPropertyDictionary);
      result = 0;
      *a2 = v7;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

void vtTestMotionEstimationProcessor_createSupportedPropertyDictionary()
{
  void *v0;
  const __CFAllocator *v1;
  CFArrayRef v2;
  CFDictionaryRef v3;
  const CFDictionaryKeyCallBacks *v4;
  const CFDictionaryValueCallBacks *v5;
  CFDictionaryRef v6;
  void *v7[2];
  void *v8[2];
  void *values[2];
  void *v10;
  const __CFString *v11;
  CFArrayRef v12;
  void *keys;
  const __CFString *v14;
  const __CFString *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v8[0] = 0;
  v8[1] = 0;
  v7[0] = 0;
  v7[1] = 0;
  v0 = (void *)*MEMORY[0x1E0C9AE50];
  values[0] = *(void **)MEMORY[0x1E0C9AE40];
  values[1] = v0;
  v1 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v2 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)values, 2, MEMORY[0x1E0C9B378]);
  keys = CFSTR("PropertyType");
  v14 = CFSTR("ReadWriteStatus");
  v10 = CFSTR("Boolean");
  v11 = CFSTR("ReadWrite");
  v15 = CFSTR("SupportedValueList");
  v12 = v2;
  v3 = CFDictionaryCreate(v1, (const void **)&keys, (const void **)&v10, 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v2)
    CFRelease(v2);
  keys = CFSTR("PropertyType");
  v14 = CFSTR("ReadWriteStatus");
  v10 = CFSTR("Enumeration");
  v11 = CFSTR("ReadWrite");
  v15 = CFSTR("SupportedValueList");
  v12 = 0;
  v4 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v5 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v6 = CFDictionaryCreate(v1, (const void **)&keys, (const void **)&v10, 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  sVTTestMotionEstimationProcessorSupportedPropertyDictionary = (uint64_t)CFDictionaryCreate(v1, (const void **)v8, (const void **)v7, 0, v4, v5);
  if (!sVTTestMotionEstimationProcessorSupportedPropertyDictionary)
    FigSignalErrorAt();
  if (v3)
    CFRelease(v3);
  if (v6)
    CFRelease(v6);
}

uint64_t DolbyVisionDecoder_CreateInstance()
{
  uint64_t v0;

  VTVideoDecoderGetClassID();
  v0 = CMDerivedObjectCreate();
  FigSignalErrorAt();
  return v0;
}

uint64_t DolbyVisionDecoder_Invalidate()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  dispatch_time_t v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)DerivedStorage)
  {
    v1 = DerivedStorage;
    *(_BYTE *)DerivedStorage = 1;
    if (*(_QWORD *)(DerivedStorage + 72))
    {
      v2 = 2;
      do
      {
        v3 = *(NSObject **)(v1 + 72);
        v4 = dispatch_time(0, 1000000000 * v2);
        v2 *= 2;
      }
      while (dispatch_group_wait(v3, v4));
    }
  }
  return 0;
}

void DolbyVisionDecoder_Finalize()
{
  _QWORD *DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  NSObject *v6;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  DerivedStorage[1] = 0;
  v1 = (const void *)DerivedStorage[2];
  if (v1)
  {
    CFRelease(v1);
    DerivedStorage[2] = 0;
  }
  v2 = (const void *)DerivedStorage[4];
  if (v2)
  {
    CFRelease(v2);
    DerivedStorage[4] = 0;
  }
  v3 = (const void *)DerivedStorage[5];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[5] = 0;
  }
  v4 = (const void *)DerivedStorage[6];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[6] = 0;
  }
  v5 = (const void *)DerivedStorage[8];
  if (v5)
  {
    CFRelease(v5);
    DerivedStorage[8] = 0;
  }
  v6 = DerivedStorage[9];
  if (v6)
  {
    dispatch_release(v6);
    DerivedStorage[9] = 0;
  }
}

__CFString *DolbyVisionDecoder_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<DolbyVisionDecoder %p>"), a1);
  return Mutable;
}

uint64_t DolbyVisionDecoder_CopyProperty(uint64_t a1, const __CFString *a2, const __CFAllocator *a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  const void *v8;
  CFTypeRef v9;
  const void **v10;
  uint64_t result;
  const void *v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, CFSTR("SublayerDecoderSpecification")))
  {
    v8 = *(const void **)(DerivedStorage + 48);
    if (!v8)
    {
      v9 = 0;
LABEL_9:
      result = 0;
      *a4 = v9;
      return result;
    }
LABEL_8:
    v9 = CFRetain(v8);
    goto LABEL_9;
  }
  if (CFEqual(a2, CFSTR("PropagatePerFrameHDRDisplayMetadata")))
  {
    v10 = (const void **)MEMORY[0x1E0C9AE40];
    if (*(_BYTE *)(DerivedStorage + 56))
      v10 = (const void **)MEMORY[0x1E0C9AE50];
    v8 = *v10;
    goto LABEL_8;
  }
  v12 = *(const void **)(DerivedStorage + 40);
  if (v12)
    return VTSessionCopyProperty(v12, a2, a3, a4);
  else
    return 4294954393;
}

uint64_t DolbyVisionDecoder_SetProperty(uint64_t a1, const __CFString *a2, const void *a3)
{
  uint64_t DerivedStorage;
  CFTypeID v6;
  const void *v7;
  uint64_t result;
  CFTypeID v9;
  Boolean Value;
  CFTypeID v11;
  const void *v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!CFEqual(a2, CFSTR("SublayerDecoderSpecification")))
  {
    if (CFEqual(a2, CFSTR("PropagatePerFrameHDRDisplayMetadata")))
    {
      if (a3)
      {
        v9 = CFGetTypeID(a3);
        if (v9 == CFBooleanGetTypeID())
        {
          Value = CFBooleanGetValue((CFBooleanRef)a3);
          result = 0;
          *(_BYTE *)(DerivedStorage + 56) = Value;
          return result;
        }
      }
    }
    else
    {
      if (!CFEqual(a2, CFSTR("DecompressionSessionOptions")))
      {
        v12 = *(const void **)(DerivedStorage + 40);
        if (v12)
          return VTSessionSetProperty(v12, a2, a3);
        else
          return 4294954393;
      }
      if (a3)
      {
        v11 = CFGetTypeID(a3);
        if (v11 == CFDictionaryGetTypeID())
        {
          v7 = *(const void **)(DerivedStorage + 64);
          *(_QWORD *)(DerivedStorage + 64) = a3;
          goto LABEL_5;
        }
      }
    }
    return FigSignalErrorAt();
  }
  if (!a3)
    return FigSignalErrorAt();
  v6 = CFGetTypeID(a3);
  if (v6 != CFDictionaryGetTypeID())
    return FigSignalErrorAt();
  v7 = *(const void **)(DerivedStorage + 48);
  *(_QWORD *)(DerivedStorage + 48) = a3;
LABEL_5:
  CFRetain(a3);
  if (v7)
    CFRelease(v7);
  return 0;
}

uint64_t DolbyVisionDecoder_StartSession(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  const __CFString *v8;
  const __CFString *v9;
  int v10;
  const void *v11;
  uint64_t v12;
  const void *v13;
  const __CFDictionary *Extension;
  const __CFDictionary *v15;
  CFTypeID v16;
  const void *Value;
  const void *v18;
  const void *v19;
  CFTypeID v20;
  const UInt8 *BytePtr;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  CMVideoCodecType v34;
  unsigned __int16 v35;
  int v36;
  CMVideoDimensions Dimensions;
  const __CFDictionary *Extensions;
  CFAllocatorRef *v39;
  const __CFDictionary *v40;
  const __CFDictionary *v41;
  const __CFDictionary *v42;
  const __CFAllocator *v43;
  CFMutableDictionaryRef MutableCopy;
  CFMutableDictionaryRef v45;
  __CFDictionary *v46;
  __CFDictionary *v47;
  const __CFString *v48;
  const void *v49;
  uint64_t v50;
  CFAllocatorRef v51;
  uint64_t v52;
  const __CFDictionary *v53;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v55;
  const void *v56;
  __CFDictionary *v57;
  const void *v58;
  const opaqueCMFormatDescription *v59;
  const void *v60;
  const __CFDictionary *v61;
  uint64_t *v62;
  uint64_t v63;
  const __CFDictionary *v64;
  const void *v66;
  int v67;
  int v68;
  uint64_t v69;
  __int128 v70;

  VTVideoDecoderGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  VTVideoDecoderGetCMBaseObject(a1);
  v7 = CMBaseObjectGetDerivedStorage();
  CFPreferencesAppSynchronize(CFSTR("com.apple.coremedia"));
  v8 = (const __CFString *)CFPreferencesCopyAppValue(CFSTR("dovi_bsd_output_pixel_format"), CFSTR("com.apple.coremedia"));
  if (v8)
  {
    v9 = v8;
    v10 = 2016686640;
    if (CFStringCompare(v8, CFSTR("x420"), 0))
    {
      if (CFStringCompare(v9, CFSTR("xf20"), 0) == kCFCompareEqualTo)
      {
LABEL_6:
        v10 += 3276800;
        goto LABEL_7;
      }
      v10 = 1882468912;
      if (CFStringCompare(v9, CFSTR("p420"), 0))
      {
        if (CFStringCompare(v9, CFSTR("pf20"), 0))
        {
LABEL_8:
          CFRelease(v9);
          goto LABEL_9;
        }
        goto LABEL_6;
      }
    }
LABEL_7:
    *(_DWORD *)(v7 + 96) = v10;
    goto LABEL_8;
  }
LABEL_9:
  v11 = *(const void **)(DerivedStorage + 16);
  *(_QWORD *)(DerivedStorage + 8) = a2;
  *(_QWORD *)(DerivedStorage + 16) = a3;
  if (a3)
    CFRetain(a3);
  if (v11)
    CFRelease(v11);
  VTVideoDecoderGetCMBaseObject(a1);
  v12 = CMBaseObjectGetDerivedStorage();
  v13 = (const void *)*MEMORY[0x1E0CA2240];
  Extension = (const __CFDictionary *)CMFormatDescriptionGetExtension((CMFormatDescriptionRef)a3, (CFStringRef)*MEMORY[0x1E0CA2240]);
  if (Extension)
  {
    v15 = Extension;
    v16 = CFGetTypeID(Extension);
    if (v16 == CFDictionaryGetTypeID())
    {
      Value = CFDictionaryGetValue(v15, CFSTR("dvcC"));
      if (Value)
      {
        v18 = Value;
        *(_DWORD *)(v12 + 100) = 1;
        *(_BYTE *)(v12 + 113) = 1;
        *(_DWORD *)(v12 + 108) = 1;
      }
      else
      {
        v19 = CFDictionaryGetValue(v15, CFSTR("dvvC"));
        if (!v19)
          goto LABEL_49;
        v18 = v19;
        *(_BYTE *)(v12 + 112) = 1;
      }
      v20 = CFGetTypeID(v18);
      if (v20 != CFDataGetTypeID())
        goto LABEL_49;
      if (CFDataGetLength((CFDataRef)v18) < 9)
        goto LABEL_119;
      BytePtr = CFDataGetBytePtr((CFDataRef)v18);
      v22 = *BytePtr;
      v23 = BytePtr[2];
      v24 = BytePtr[4];
      v25 = BytePtr[3];
      if (v23 >= 2)
        v26 = v23 >> 1;
      else
        v26 = (v25 >> 3) & 0xFFFFFFDF | (32 * (v23 & 1));
      if (v26 == 20)
      {
        if (v22 != 3)
          goto LABEL_119;
      }
      else if (v22 != 1)
      {
        goto LABEL_119;
      }
      if (!BytePtr[1] && (v25 & 1) != 0 && !(v25 & 2 | v24 & 0xC))
      {
        *(_WORD *)(v12 + 24) = v26;
        *(_BYTE *)(v12 + 26) = (v25 & 4) != 0;
        if (v26 == 5)
        {
          v28 = 1;
          *(_BYTE *)(v12 + 104) = 1;
          goto LABEL_43;
        }
        v27 = v24 >> 4;
        if (v26 != 10)
        {
          if (v26 == 8)
          {
            if (v27 != 4)
            {
              if (v27 != 2)
              {
                if (v27 != 1)
                  goto LABEL_50;
                *(_DWORD *)(v12 + 100) = 5;
                *(_WORD *)(v12 + 104) = 256;
                goto LABEL_44;
              }
              v68 = 3;
LABEL_118:
              *(_DWORD *)(v12 + 100) = v68;
              v29 = (_QWORD *)MEMORY[0x1E0CA8EB0];
              goto LABEL_45;
            }
            *(_BYTE *)(v12 + 104) = 1;
            v67 = 4;
LABEL_116:
            *(_DWORD *)(v12 + 100) = v67;
            v29 = (_QWORD *)MEMORY[0x1E0CA2318];
            goto LABEL_45;
          }
          if (v26 != 20)
            goto LABEL_50;
          *(_BYTE *)(v12 + 104) = 1;
          v28 = 10;
LABEL_43:
          *(_DWORD *)(v12 + 100) = v28;
LABEL_44:
          v29 = (_QWORD *)MEMORY[0x1E0CA2338];
LABEL_45:
          *(_QWORD *)(v12 + 120) = *v29;
          goto LABEL_50;
        }
        if (v24 <= 0xF)
        {
          *(_BYTE *)(v12 + 104) = 1;
          v28 = 6;
          goto LABEL_43;
        }
        if (v27 == 4)
        {
          *(_BYTE *)(v12 + 104) = 1;
          v67 = 9;
          goto LABEL_116;
        }
        if (v27 == 2)
        {
          v68 = 8;
          goto LABEL_118;
        }
        if (v27 != 1)
        {
LABEL_50:
          if (*(_DWORD *)(v12 + 100))
            goto LABEL_51;
          goto LABEL_119;
        }
LABEL_49:
        *(_DWORD *)(v12 + 100) = 5;
        *(_QWORD *)(v12 + 120) = *MEMORY[0x1E0CA2338];
        *(_BYTE *)(v12 + 105) = 1;
        goto LABEL_50;
      }
    }
  }
LABEL_119:
  v69 = FigSignalErrorAt();
  if ((_DWORD)v69)
    return v69;
LABEL_51:
  VTVideoDecoderGetCMBaseObject(a1);
  v30 = CMBaseObjectGetDerivedStorage();
  v31 = v30;
  v32 = *(_DWORD *)(v30 + 4);
  v33 = 4294954394;
  if (v32 <= 1902403957)
  {
    if (v32 > 1684895095)
    {
      switch(v32)
      {
        case 1684895096:
          v34 = 1836415073;
          break;
        case 1685481521:
          v34 = 1752589105;
          break;
        case 1685481573:
          v34 = 1751479857;
          break;
        default:
          return v33;
      }
      goto LABEL_74;
    }
    if (v32 != 1667524657)
    {
      if (v32 != 1684108849)
        return v33;
      v34 = 1635135537;
      goto LABEL_76;
    }
    v34 = 1667790435;
LABEL_74:
    v36 = 1;
LABEL_77:
    *(_DWORD *)(v30 + 108) = v36;
    goto LABEL_78;
  }
  if (v32 <= 1902405732)
  {
    if (v32 == 1902403958)
    {
      v34 = 1902212657;
LABEL_76:
      v36 = 2;
      goto LABEL_77;
    }
    if (v32 != 1902405681)
      return v33;
    v35 = 30307;
    goto LABEL_71;
  }
  if (v32 == 1902405733)
  {
    v35 = 25974;
LABEL_71:
    v34 = v35 | 0x71680000;
    goto LABEL_74;
  }
  if (v32 == 1902407032)
  {
    v34 = 1902998904;
    goto LABEL_74;
  }
  if (v32 != 2053400625)
    return v33;
  v34 = 2053666403;
LABEL_78:
  Dimensions = CMVideoFormatDescriptionGetDimensions(*(CMVideoFormatDescriptionRef *)(v30 + 16));
  Extensions = CMFormatDescriptionGetExtensions(*(CMFormatDescriptionRef *)(v31 + 16));
  v39 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (!Extensions
    || (v40 = Extensions, (v41 = (const __CFDictionary *)CFDictionaryGetValue(Extensions, v13)) == 0)
    || (v42 = v41, v43 = *v39, (MutableCopy = CFDictionaryCreateMutableCopy(*v39, 0, v40)) == 0))
  {
    v33 = FigSignalErrorAt();
    goto LABEL_93;
  }
  v45 = MutableCopy;
  v46 = CFDictionaryCreateMutableCopy(v43, 0, v42);
  if (!v46)
  {
    v33 = FigSignalErrorAt();
    CFRelease(v45);
    goto LABEL_93;
  }
  v47 = v46;
  if (*(_BYTE *)(v31 + 113))
  {
    v48 = CFSTR("dvcC");
LABEL_89:
    CFDictionaryRemoveValue(v46, v48);
    goto LABEL_90;
  }
  if (*(_BYTE *)(v31 + 112))
  {
    CFDictionaryRemoveValue(v46, CFSTR("dvvC"));
    if (*(_DWORD *)(v31 + 100) != 2)
      goto LABEL_90;
    goto LABEL_88;
  }
  if (*(_DWORD *)(v31 + 100) == 5)
  {
LABEL_88:
    CFDictionaryRemoveValue(v45, (const void *)*MEMORY[0x1E0CA2220]);
    v48 = (const __CFString *)*MEMORY[0x1E0CA21A8];
    v46 = v45;
    goto LABEL_89;
  }
LABEL_90:
  CFDictionarySetValue(v45, v13, v47);
  CFDictionaryRemoveValue(v45, (const void *)*MEMORY[0x1E0CA2278]);
  CFDictionaryRemoveValue(v45, (const void *)*MEMORY[0x1E0CA2270]);
  v49 = *(const void **)(v31 + 120);
  if (v49)
    CFDictionarySetValue(v45, (const void *)*MEMORY[0x1E0CA8E98], v49);
  v33 = CMVideoFormatDescriptionCreate(v43, v34, Dimensions.width, Dimensions.height, v45, (CMVideoFormatDescriptionRef *)(v31 + 32));
  CFRelease(v45);
  CFRelease(v47);
  v39 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
LABEL_93:
  if (!(_DWORD)v33)
  {
    VTVideoDecoderGetCMBaseObject(a1);
    v50 = CMBaseObjectGetDerivedStorage();
    VTDecoderSessionGetDestinationPixelBufferAttributes(a2);
    v51 = *v39;
    v52 = FigCFDictionaryCreateMutableCopy();
    if (!v52)
      return FigSignalErrorAt();
    v53 = (const __CFDictionary *)v52;
    Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    if (!Mutable)
    {
      v33 = FigSignalErrorAt();
      v64 = v53;
LABEL_103:
      CFRelease(v64);
      return v33;
    }
    v55 = Mutable;
    if (*(_DWORD *)(v50 + 96))
    {
      FigCFArrayAppendInt32();
      v56 = (const void *)*MEMORY[0x1E0CA9040];
      v57 = v53;
    }
    else
    {
      v58 = (const void *)*MEMORY[0x1E0CA9040];
      if (CFDictionaryGetValue(v53, (const void *)*MEMORY[0x1E0CA9040]))
        goto LABEL_100;
      LOBYTE(v70) = 0;
      FigCFDictionaryGetBooleanIfPresent();
      if (CelestialShouldAllowHTPCIOSurfacesForHDRPlaybackToCA())
      {
        v66 = (const void *)*MEMORY[0x1E0C9AE50];
        if (v66 == CFDictionaryGetValue(v53, (const void *)*MEMORY[0x1E0CA8FE0]))
        {
          FigCFArrayAppendInt32();
          FigCFArrayAppendInt32();
        }
      }
      if (dovi_shouldAllowInterchangeCompressedPixelFormatForHDRPlaybackToCA())
        FigCFArrayAppendInt32();
      if (dovi_shouldAllowInterchangeCompressedPixelFormatForHDRPlaybackToCA())
        FigCFArrayAppendInt32();
      CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
      FigCFArrayAppendInt32();
      CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
      FigCFArrayAppendInt32();
      v57 = v53;
      v56 = v58;
    }
    CFDictionarySetValue(v57, v56, v55);
LABEL_100:
    v70 = xmmword_1E2F641A8;
    v59 = *(const opaqueCMFormatDescription **)(v50 + 32);
    v60 = *(const void **)(v50 + 48);
    v61 = *(const __CFDictionary **)(v50 + 64);
    v62 = (uint64_t *)(v50 + 40);
    v63 = VTDecompressionSessionCreateWithOptions((uint64_t)v51, v59, v60, v53, &v70, v61, v62);
    if (!(_DWORD)v63)
      v63 = VTDecompressionSessionSetMultiImageCallback((VTDecompressionSessionRef)*v62, (VTDecompressionOutputMultiImageCallback)dovi_multiImageDecompressionOutput, 0);
    v33 = v63;
    CFRelease(v53);
    v64 = v55;
    goto LABEL_103;
  }
  return v33;
}

uint64_t DolbyVisionDecoder_DecodeFrame(uint64_t a1, const void *a2, opaqueCMSampleBuffer *a3, VTDecodeFrameFlags a4, VTDecodeInfoFlags *a5)
{
  uint64_t v9;
  uint64_t DerivedStorage;
  int v11;
  OpaqueCMBlockBuffer *v12;
  OpaqueCMBlockBuffer *v13;
  size_t v14;
  const __CFAllocator *v15;
  uint64_t v16;
  size_t v17;
  const __CFAllocator *v18;
  uint64_t appended;
  unsigned int v20;
  unint64_t v21;
  OpaqueCMBlockBuffer *v22;
  size_t v23;
  OpaqueCMBlockBuffer *v24;
  size_t v25;
  size_t v26;
  char *v27;
  char *v28;
  size_t v29;
  __CFData *Mutable;
  __CFData *v31;
  OpaqueCMBlockBuffer *v32;
  UInt8 *MutableBytePtr;
  uint64_t v34;
  OpaqueCMBlockBuffer *v35;
  uint64_t v36;
  OpaqueCMBlockBuffer *v37;
  OpaqueCMBlockBuffer *DataBuffer;
  OpaqueCMBlockBuffer *v39;
  size_t DataLength;
  uint64_t DataPointer;
  uint64_t v42;
  OpaqueCMBlockBuffer *v43;
  uint64_t DerivedSampleBuffer;
  int v45;
  OpaqueCMBlockBuffer *v46;
  const void *v47;
  size_t v48;
  const __CFAllocator *v49;
  uint64_t v50;
  size_t v51;
  uint64_t v52;
  uint64_t v53;
  size_t v54;
  size_t v55;
  __CFData *v56;
  __CFData *v57;
  OpaqueCMBlockBuffer *v58;
  UInt8 *v59;
  uint64_t v60;
  OpaqueCMBlockBuffer *v61;
  OpaqueCMBlockBuffer *v62;
  size_t v63;
  uint64_t v64;
  opaqueCMSampleBuffer *v65;
  OpaqueCMBlockBuffer *v66;
  uint64_t v67;
  _QWORD *v68;
  __CFData *v69;
  const __CFAllocator *allocator;
  const void *v72;
  VTDecodeFrameFlags v73;
  VTDecodeFrameFlags v74;
  VTDecodeInfoFlags *v75;
  VTDecodeInfoFlags *v76;
  uint64_t v77;
  uint64_t v78;
  int v79[2];
  int v80[2];
  __CFData *v81;
  CFTypeRef cf;
  char v83;
  size_t totalLengthOut;
  char *destination;
  CMBlockBufferRef theBuffer;
  CMBlockBufferRef blockBufferOut;

  v9 = a1;
  VTVideoDecoderGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v81 = 0;
  cf = 0;
  dispatch_group_enter(*(dispatch_group_t *)(DerivedStorage + 72));
  ++*(_DWORD *)(DerivedStorage + 80);
  if (!CMSampleBufferDataIsReady(a3))
  {
    v34 = FigSignalErrorAt();
    goto LABEL_134;
  }
  if (!*(_BYTE *)(DerivedStorage + 104))
  {
LABEL_38:
    v35 = 0;
    goto LABEL_48;
  }
  v11 = *(_DWORD *)(DerivedStorage + 108);
  if (v11 == 2)
  {
    DataBuffer = CMSampleBufferGetDataBuffer(a3);
    blockBufferOut = 0;
    destination = 0;
    theBuffer = 0;
    totalLengthOut = 0;
    if (DataBuffer)
    {
      v39 = DataBuffer;
      DataLength = CMBlockBufferGetDataLength(DataBuffer);
      CMBlockBufferCreateContiguous((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v39, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, DataLength, 0, &theBuffer);
      DataPointer = CMBlockBufferGetDataPointer(theBuffer, 0, 0, &totalLengthOut, &destination);
      if ((_DWORD)DataPointer)
      {
        v34 = DataPointer;
        FigSignalErrorAt();
LABEL_43:
        if (theBuffer)
          CFRelease(theBuffer);
        if (!(_DWORD)v34)
        {
          v43 = CMSampleBufferGetDataBuffer(a3);
          DerivedSampleBuffer = dovi_createDerivedSampleBuffer(a3, v43, *(const opaqueCMFormatDescription **)(DerivedStorage + 32), (CMSampleBufferRef *)&cf);
          v37 = 0;
          if ((_DWORD)DerivedSampleBuffer)
          {
            v34 = DerivedSampleBuffer;
            v35 = 0;
            goto LABEL_111;
          }
          v35 = 0;
          goto LABEL_48;
        }
LABEL_134:
        v37 = 0;
        v35 = 0;
        goto LABEL_111;
      }
      v42 = FigAV1Bridge_CopyITU_T_T35MetadataDolbyVisionRPURawByteSequence();
    }
    else
    {
      v42 = FigSignalErrorAt();
    }
    v34 = v42;
    goto LABEL_43;
  }
  if (v11 != 1)
    goto LABEL_38;
  *(_QWORD *)v79 = a3;
  v12 = CMSampleBufferGetDataBuffer(a3);
  blockBufferOut = 0;
  theBuffer = 0;
  if (!v12)
  {
    v16 = FigSignalErrorAt();
LABEL_140:
    v34 = v16;
    v31 = 0;
    goto LABEL_132;
  }
  v13 = v12;
  v14 = CMBlockBufferGetDataLength(v12);
  v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v16 = CMBlockBufferCreateEmpty((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, &blockBufferOut);
  if ((_DWORD)v16)
    goto LABEL_140;
  allocator = v15;
  v16 = CMBlockBufferCreateEmpty(v15, 0, 0, &theBuffer);
  if ((_DWORD)v16)
    goto LABEL_140;
  v73 = a4;
  v75 = a5;
  v77 = v9;
  v72 = a2;
  if (v14)
  {
    v17 = 0;
    v18 = (const __CFAllocator *)*MEMORY[0x1E0C9AE10];
    while (v17 + 5 <= v14)
    {
      LODWORD(destination) = 0;
      LOBYTE(totalLengthOut) = 0;
      v83 = 0;
      appended = CMBlockBufferCopyDataBytes(v13, v17, 4uLL, &destination);
      if ((_DWORD)appended)
        goto LABEL_122;
      if (!(_DWORD)destination || (v20 = bswap32(destination), v21 = v17 + 4 + v20, v21 > v14))
      {
LABEL_121:
        appended = FigSignalErrorAt();
LABEL_122:
        v34 = appended;
        a2 = v72;
        a5 = v75;
        v9 = v77;
        a4 = v73;
        a3 = *(opaqueCMSampleBuffer **)v79;
        v31 = 0;
        goto LABEL_123;
      }
      appended = CMBlockBufferCopyDataBytes(v13, v17 + 4, 1uLL, &totalLengthOut);
      if ((_DWORD)appended)
        goto LABEL_122;
      if (totalLengthOut == 124)
      {
        v23 = v20 + 4;
        if (v23 < 7)
          goto LABEL_121;
        appended = CMBlockBufferCopyDataBytes(v13, v17 + 5, 1uLL, &v83);
        if ((_DWORD)appended)
          goto LABEL_122;
        if (v83 != 1)
          goto LABEL_121;
        if (v21 < v14)
        {
          v27 = (char *)malloc_type_malloc(v20 + 4, 0x430E3EC6uLL);
          if (!v27)
            goto LABEL_121;
          v28 = v27;
          *v27 = HIBYTE(v20);
          v27[1] = BYTE2(v20);
          v27[2] = BYTE1(v20);
          v27[3] = v20;
          *((_WORD *)v27 + 2) = 332;
          memset(v27 + 6, 255, v23 - 7);
          v28[v23 - 1] = 0x80;
          appended = CMBlockBufferAppendMemoryBlock(blockBufferOut, v28, v20 + 4, v18, 0, 0, v20 + 4, 0);
          if ((_DWORD)appended)
            goto LABEL_122;
        }
        v26 = v20 - 2;
        v22 = theBuffer;
        v25 = v17 + 6;
        v24 = v13;
      }
      else
      {
        if (totalLengthOut == 126)
          goto LABEL_121;
        v22 = blockBufferOut;
        v23 = v20 + 4;
        v24 = v13;
        v25 = v17;
        v26 = v23;
      }
      appended = CMBlockBufferAppendBufferReference(v22, v24, v25, v26, 0);
      if ((_DWORD)appended)
        goto LABEL_122;
      v17 += v23;
      if (v17 >= v14)
        goto LABEL_27;
    }
    v34 = FigSignalErrorAt();
    v31 = 0;
  }
  else
  {
LABEL_27:
    v29 = CMBlockBufferGetDataLength(theBuffer);
    Mutable = CFDataCreateMutable(allocator, v29);
    v31 = Mutable;
    if (Mutable)
    {
      CFDataSetLength(Mutable, v29);
      v32 = theBuffer;
      MutableBytePtr = CFDataGetMutableBytePtr(v31);
      v34 = CMBlockBufferCopyDataBytes(v32, 0, v29, MutableBytePtr);
      if (!(_DWORD)v34)
      {
        v35 = blockBufferOut;
        blockBufferOut = 0;
        v81 = v31;
        v31 = 0;
        a2 = v72;
        a5 = v75;
        v9 = v77;
        a4 = v73;
        a3 = *(opaqueCMSampleBuffer **)v79;
        goto LABEL_30;
      }
    }
    else
    {
      v34 = FigSignalErrorAt();
    }
  }
  a2 = v72;
  a5 = v75;
  v9 = v77;
  a4 = v73;
LABEL_132:
  a3 = *(opaqueCMSampleBuffer **)v79;
LABEL_123:
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  v35 = 0;
LABEL_30:
  if (theBuffer)
    CFRelease(theBuffer);
  if (v31)
    CFRelease(v31);
  if ((_DWORD)v34)
    goto LABEL_37;
  v36 = dovi_createDerivedSampleBuffer(a3, v35, *(const opaqueCMFormatDescription **)(DerivedStorage + 32), (CMSampleBufferRef *)&cf);
  if (!(_DWORD)v36)
  {
LABEL_48:
    if (!*(_BYTE *)(DerivedStorage + 105))
    {
      v37 = 0;
      goto LABEL_108;
    }
    v45 = *(_DWORD *)(DerivedStorage + 108);
    if (v45 != 2)
    {
      if (v45 != 1)
      {
        v37 = 0;
LABEL_106:
        v65 = (opaqueCMSampleBuffer *)cf;
        if (cf)
          goto LABEL_109;
        v66 = CMSampleBufferGetDataBuffer(a3);
        v67 = dovi_createDerivedSampleBuffer(a3, v66, *(const opaqueCMFormatDescription **)(DerivedStorage + 32), (CMSampleBufferRef *)&cf);
        if ((_DWORD)v67)
        {
LABEL_136:
          v34 = v67;
          goto LABEL_111;
        }
LABEL_108:
        v65 = (opaqueCMSampleBuffer *)cf;
        if (!cf)
        {
LABEL_135:
          v67 = FigSignalErrorAt();
          goto LABEL_136;
        }
LABEL_109:
        v68 = malloc_type_malloc(0x20uLL, 0x60040FFD3A10EuLL);
        if (v68)
        {
          *v68 = v9;
          v68[1] = a2;
          v69 = v81;
          v81 = 0;
          v68[2] = v69;
          v68[3] = v37;
          v34 = VTDecompressionSessionDecodeFrame(*(VTDecompressionSessionRef *)(DerivedStorage + 40), v65, a4, v68, a5);
          v37 = 0;
          if (!(_DWORD)v34)
            goto LABEL_112;
          goto LABEL_111;
        }
        goto LABEL_135;
      }
      *(_QWORD *)v80 = a3;
      v46 = CMSampleBufferGetDataBuffer(a3);
      v37 = v46;
      blockBufferOut = 0;
      theBuffer = 0;
      if (v46)
      {
        v74 = a4;
        v76 = a5;
        v78 = v9;
        v47 = a2;
        v48 = CMBlockBufferGetDataLength(v46);
        v49 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v50 = CMBlockBufferCreateEmpty((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, &blockBufferOut);
        if ((_DWORD)v50)
        {
LABEL_129:
          v34 = v50;
          v37 = 0;
          goto LABEL_96;
        }
        if (v48)
        {
          v51 = 0;
          while (v51 + 5 <= v48)
          {
            LODWORD(destination) = 0;
            v52 = CMBlockBufferCopyDataBytes(v37, v51, 4uLL, &destination);
            if ((_DWORD)v52)
              goto LABEL_127;
            if (!(_DWORD)destination || (v53 = bswap32(destination), v51 + 4 + v53 > v48))
            {
              v52 = FigSignalErrorAt();
LABEL_127:
              v34 = v52;
              a2 = v47;
              a5 = v76;
              v9 = v78;
              a4 = v74;
              v37 = 0;
              goto LABEL_99;
            }
            LOBYTE(totalLengthOut) = 0;
            if (!CMBlockBufferCopyDataBytes(v37, v51 + 4, 1uLL, &totalLengthOut)
              && totalLengthOut == 78)
            {
              LOBYTE(totalLengthOut) = 0;
              if (!CMBlockBufferCopyDataBytes(v37, v51 + 5, 1uLL, &totalLengthOut)
                && totalLengthOut == 1)
              {
                LOBYTE(totalLengthOut) = 0;
                if (!CMBlockBufferCopyDataBytes(v37, v51 + 6, 1uLL, &totalLengthOut)
                  && totalLengthOut == 4)
                {
                  LOBYTE(totalLengthOut) = 0;
                  if (!CMBlockBufferCopyDataBytes(v37, v51 + 8, 1uLL, &totalLengthOut)
                    && totalLengthOut == 181)
                  {
                    LOBYTE(totalLengthOut) = 0;
                    if (!CMBlockBufferCopyDataBytes(v37, v51 + 9, 1uLL, &totalLengthOut) && !(_BYTE)totalLengthOut)
                    {
                      LOBYTE(totalLengthOut) = 0;
                      if (!CMBlockBufferCopyDataBytes(v37, v51 + 10, 1uLL, &totalLengthOut)
                        && totalLengthOut == 60)
                      {
                        LOBYTE(totalLengthOut) = 0;
                        if (!CMBlockBufferCopyDataBytes(v37, v51 + 11, 1uLL, &totalLengthOut) && !(_BYTE)totalLengthOut)
                        {
                          LOBYTE(totalLengthOut) = 0;
                          if (!CMBlockBufferCopyDataBytes(v37, v51 + 12, 1uLL, &totalLengthOut)
                            && totalLengthOut == 1)
                          {
                            LOBYTE(totalLengthOut) = 0;
                            if (!CMBlockBufferCopyDataBytes(v37, v51 + 13, 1uLL, &totalLengthOut)
                              && totalLengthOut == 4)
                            {
                              v50 = CMBlockBufferAppendBufferReference(blockBufferOut, v37, v51 + 6, (v53 - 2), 0);
                              if ((_DWORD)v50)
                                goto LABEL_129;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            v51 += (v53 + 4);
            if (v51 >= v48)
              goto LABEL_79;
          }
          v50 = FigSignalErrorAt();
          goto LABEL_129;
        }
LABEL_79:
        v54 = CMBlockBufferGetDataLength(blockBufferOut);
        if (!v54)
        {
          v37 = 0;
          v34 = 0;
LABEL_96:
          v57 = 0;
LABEL_97:
          a2 = v47;
          a5 = v76;
          v9 = v78;
          a4 = v74;
          goto LABEL_100;
        }
        v55 = v54;
        v56 = CFDataCreateMutable(v49, v54);
        v57 = v56;
        if (v56)
        {
          CFDataSetLength(v56, v55);
          v58 = blockBufferOut;
          v59 = CFDataGetMutableBytePtr(v57);
          v60 = CMBlockBufferCopyDataBytes(v58, 0, v55, v59);
          if (!(_DWORD)v60)
          {
            a2 = v47;
            a5 = v76;
            v9 = v78;
            a4 = v74;
            if (FigH264Bridge_CopyDataWithEmulationPreventionBytesRemoved())
            {
              v34 = FigSignalErrorAt();
              if (theBuffer)
                CFRelease(theBuffer);
              v37 = 0;
              goto LABEL_100;
            }
            v37 = theBuffer;
            if (theBuffer)
            {
              v34 = 0;
              theBuffer = 0;
LABEL_100:
              if (blockBufferOut)
                CFRelease(blockBufferOut);
              if (v57)
                CFRelease(v57);
              a3 = *(opaqueCMSampleBuffer **)v80;
              goto LABEL_105;
            }
            v34 = 0;
            v37 = v57;
LABEL_99:
            v57 = 0;
            goto LABEL_100;
          }
        }
        else
        {
          v60 = FigSignalErrorAt();
        }
        v34 = v60;
        v37 = 0;
        goto LABEL_97;
      }
      v34 = FigSignalErrorAt();
      goto LABEL_99;
    }
    v61 = CMSampleBufferGetDataBuffer(a3);
    blockBufferOut = 0;
    destination = 0;
    theBuffer = 0;
    totalLengthOut = 0;
    if (v61)
    {
      v62 = v61;
      v63 = CMBlockBufferGetDataLength(v61);
      v64 = CMBlockBufferCreateContiguous((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v62, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, v63, 0, &theBuffer);
      if ((_DWORD)v64)
        goto LABEL_138;
      if (theBuffer)
      {
        v64 = CMBlockBufferGetDataPointer(theBuffer, 0, 0, &totalLengthOut, &destination);
        if (!(_DWORD)v64)
        {
          v34 = FigAV1Bridge_CopyITU_T_T35MetadataHDR10PlusMetadata();
          if (!(_DWORD)v34)
          {
            v37 = blockBufferOut;
            blockBufferOut = 0;
            goto LABEL_92;
          }
          FigSignalErrorAt();
          if (blockBufferOut)
            CFRelease(blockBufferOut);
LABEL_148:
          v37 = 0;
LABEL_92:
          if (theBuffer)
            CFRelease(theBuffer);
LABEL_105:
          if ((_DWORD)v34)
            goto LABEL_111;
          goto LABEL_106;
        }
LABEL_138:
        v34 = v64;
        FigSignalErrorAt();
        goto LABEL_148;
      }
    }
    v34 = FigSignalErrorAt();
    goto LABEL_148;
  }
  v34 = v36;
LABEL_37:
  v37 = 0;
LABEL_111:
  dovi_emitDecodedFrame(v9, a2, v34, 0, 0);
LABEL_112:
  if (v35)
    CFRelease(v35);
  if (cf)
    CFRelease(cf);
  if (v81)
    CFRelease(v81);
  if (v37)
    CFRelease(v37);
  return v34;
}

uint64_t DolbyVisionDecoder_CopySupportedPropertyDictionary(uint64_t a1, uint64_t a2)
{
  const __CFAllocator *v4;
  CFDictionaryRef v5;
  uint64_t DerivedStorage;
  const void *v7;
  uint64_t v8;
  __CFDictionary *Mutable;
  CFTypeRef cf;
  CFTypeRef v12;
  __CFDictionary *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  cf = 0;
  v12 = 0;
  v13 = 0;
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v5 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  VTVideoDecoderGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
  {
    v8 = FigSignalErrorAt();
LABEL_13:
    Mutable = 0;
    goto LABEL_5;
  }
  v7 = *(const void **)(DerivedStorage + 40);
  if (v7)
  {
    v8 = VTSessionCopySupportedPropertyDictionary(v7, (CFDictionaryRef *)&cf);
    if (!(_DWORD)v8)
    {
      Mutable = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E0C9AEB8], MEMORY[0x1E0C9B3A0]);
      CFDictionarySetValue(Mutable, CFSTR("SublayerDecoderSpecification"), v5);
      CFDictionarySetValue(Mutable, CFSTR("PropagatePerFrameHDRDisplayMetadata"), v5);
      CFDictionarySetValue(Mutable, CFSTR("PixelTransferProperties"), v5);
      v12 = cf;
      v13 = Mutable;
      FigCFCreateCombinedDictionary();
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  Mutable = 0;
  v8 = 4294954393;
LABEL_5:
  if (cf)
    CFRelease(cf);
  if (Mutable)
    CFRelease(Mutable);
  if (v5)
    CFRelease(v5);
  return v8;
}

const __CFDictionary *dovi_shouldAllowInterchangeCompressedPixelFormatForHDRPlaybackToCA()
{
  const __CFDictionary *result;
  const __CFArray *v1;
  CFTypeID v2;

  result = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
  if (result)
  {
    result = (const __CFDictionary *)CFDictionaryGetValue(result, (const void *)*MEMORY[0x1E0CA91B0]);
    if (result)
    {
      v1 = result;
      v2 = CFGetTypeID(result);
      if (v2 == CFArrayGetTypeID())
      {
        CFArrayGetValueAtIndex(v1, 0);
        FigCFDictionaryGetInt32IfPresent();
      }
      return 0;
    }
  }
  return result;
}

void dovi_singleImageDecompressionOutput(uint64_t a1, uint64_t a2, uint64_t a3, int a4, __CVBuffer *a5)
{
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  __CVBuffer *v9;
  const void *v12;
  const void *v13;

  if ((_DWORD)a3)
  {
    v6 = *(_QWORD *)a2;
    v7 = *(const void **)(a2 + 8);
    v8 = 0;
    v9 = 0;
  }
  else
  {
    if (a5)
      dovi_attachMetadataToPixelBuffer(*(_QWORD *)a2, *(const void **)(a2 + 16), *(const void **)(a2 + 24), a5);
    v6 = *(_QWORD *)a2;
    v7 = *(const void **)(a2 + 8);
    v8 = a4 | 0x1000000u;
    a3 = 0;
    v9 = a5;
  }
  dovi_emitDecodedFrame(v6, v7, a3, v8, v9);
  v12 = *(const void **)(a2 + 16);
  if (v12)
    CFRelease(v12);
  v13 = *(const void **)(a2 + 24);
  if (v13)
    CFRelease(v13);
  free((void *)a2);
}

void dovi_multiImageDecompressionOutput(int a1, uint64_t a2, uint64_t a3, int a4, CMTaggedBufferGroupRef group)
{
  CMItemCount Count;
  CMItemCount v9;
  uint64_t i;
  __CVBuffer *CVPixelBufferAtIndex;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  OpaqueCMTaggedBufferGroup *v15;
  const void *v16;
  const void *v17;

  if ((_DWORD)a3 || !group)
  {
    v12 = *(_QWORD *)a2;
    v13 = *(const void **)(a2 + 8);
    v14 = 0;
    v15 = 0;
  }
  else
  {
    Count = CMTaggedBufferGroupGetCount(group);
    if (Count >= 1)
    {
      v9 = Count;
      for (i = 0; i != v9; ++i)
      {
        CVPixelBufferAtIndex = (__CVBuffer *)FigTaggedBufferGroupGetCVPixelBufferAtIndex();
        if (CVPixelBufferAtIndex)
          dovi_attachMetadataToPixelBuffer(*(_QWORD *)a2, *(const void **)(a2 + 16), *(const void **)(a2 + 24), CVPixelBufferAtIndex);
      }
    }
    v12 = *(_QWORD *)a2;
    v13 = *(const void **)(a2 + 8);
    v14 = a4 | 0x1000000u;
    a3 = 0;
    v15 = group;
  }
  dovi_emitDecodedMultiImageFrame(v12, v13, a3, v14, v15);
  v16 = *(const void **)(a2 + 16);
  if (v16)
    CFRelease(v16);
  v17 = *(const void **)(a2 + 24);
  if (v17)
    CFRelease(v17);
  free((void *)a2);
}

void dovi_emitDecodedFrame(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, __CVBuffer *a5)
{
  uint64_t DerivedStorage;

  VTVideoDecoderGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  VTDecoderSessionEmitDecodedFrame(*(uint64_t **)(DerivedStorage + 8), a2, a3, a4, a5);
  --*(_DWORD *)(DerivedStorage + 80);
  dispatch_group_leave(*(dispatch_group_t *)(DerivedStorage + 72));
}

void dovi_attachMetadataToPixelBuffer(uint64_t a1, const void *a2, const void *a3, __CVBuffer *a4)
{
  uint64_t DerivedStorage;
  unsigned int v8;
  BOOL v9;
  int v10;

  VTVideoDecoderGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = *(_DWORD *)(DerivedStorage + 100);
  v9 = v8 > 0xA;
  v10 = (1 << v8) & 0x446;
  if (!v9 && v10 != 0)
    CVBufferSetAttachment(a4, (CFStringRef)*MEMORY[0x1E0CA8E98], (CFTypeRef)*MEMORY[0x1E0CA8EC8], kCVAttachmentMode_ShouldPropagate);
  if (!*(_BYTE *)(DerivedStorage + 57) && *(_BYTE *)(DerivedStorage + 56))
  {
    if (a2)
    {
      if (*(_BYTE *)(DerivedStorage + 104))
      {
        CVBufferSetAttachment(a4, (CFStringRef)*MEMORY[0x1E0CA8DC0], a2, kCVAttachmentMode_ShouldPropagate);
        if (*(_DWORD *)(DerivedStorage + 100) == 2)
          CVBufferSetAttachment(a4, (CFStringRef)*MEMORY[0x1E0CA8DB8], CFSTR("1"), kCVAttachmentMode_ShouldPropagate);
      }
    }
    if (a3)
    {
      if (*(_BYTE *)(DerivedStorage + 105))
        CVBufferSetAttachment(a4, (CFStringRef)*MEMORY[0x1E0CA8E00], a3, kCVAttachmentMode_ShouldPropagate);
    }
  }
}

void dovi_emitDecodedMultiImageFrame(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, OpaqueCMTaggedBufferGroup *a5)
{
  uint64_t DerivedStorage;

  VTVideoDecoderGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  VTDecoderSessionEmitDecodedMultiImageFrame(*(uint64_t **)(DerivedStorage + 8), a2, a3, a4, a5);
  --*(_DWORD *)(DerivedStorage + 80);
  dispatch_group_leave(*(dispatch_group_t *)(DerivedStorage + 72));
}

uint64_t dovi_createDerivedSampleBuffer(opaqueCMSampleBuffer *a1, CMBlockBufferRef theBuffer, const opaqueCMFormatDescription *a3, CMSampleBufferRef *a4)
{
  const __CFAllocator *v8;
  uint64_t v9;
  const __CFArray *SampleAttachmentsArray;
  const __CFDictionary *ValueAtIndex;
  const __CFArray *v12;
  void *v13;
  int64_t SampleSize;
  int64_t v15;
  uint64_t v16;
  const void *v17;
  const __CFData *Value;
  const __CFData *v19;
  unint64_t Length;
  unint64_t v21;
  __CFData *MutableCopy;
  __CFData *v23;
  UInt8 *v24;
  UInt8 *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  opaqueCMSampleBuffer *v29;
  CMTime outputPresentationTimeStamp;
  size_t sampleSizeArray;
  CMSampleBufferRef sbuf;
  CMSampleTimingInfo timingInfoOut;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  sbuf = 0;
  memset(&timingInfoOut, 0, sizeof(timingInfoOut));
  sampleSizeArray = CMBlockBufferGetDataLength(theBuffer);
  CMSampleBufferGetSampleTimingInfo(a1, 0, &timingInfoOut);
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v9 = CMSampleBufferCreateReady((CFAllocatorRef)*MEMORY[0x1E0C9AE00], theBuffer, a3, 1, 1, &timingInfoOut, 1, &sampleSizeArray, &sbuf);
  if ((_DWORD)v9)
  {
    v28 = v9;
  }
  else
  {
    CMPropagateAttachments(a1, sbuf);
    SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(a1, 0);
    if (!SampleAttachmentsArray)
      goto LABEL_16;
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0);
    v12 = CMSampleBufferGetSampleAttachmentsArray(sbuf, 1u);
    v13 = (void *)CFArrayGetValueAtIndex(v12, 0);
    CFDictionaryApplyFunction(ValueAtIndex, (CFDictionaryApplierFunction)dovi_dictionarySetValue, v13);
    SampleSize = CMSampleBufferGetSampleSize(a1, 0);
    v15 = CMSampleBufferGetSampleSize(sbuf, 0);
    v16 = SampleSize - v15;
    if (SampleSize == v15)
      goto LABEL_16;
    if (SampleSize >= v15)
    {
      v17 = (const void *)*MEMORY[0x1E0CA25C0];
      Value = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)v13, (const void *)*MEMORY[0x1E0CA25C0]);
      if (!Value)
        goto LABEL_16;
      v19 = Value;
      Length = CFDataGetLength(Value);
      if ((Length & 7) == 0)
      {
        v21 = Length;
        if (Length > 7)
        {
          MutableCopy = CFDataCreateMutableCopy(v8, 0, v19);
          if (MutableCopy)
          {
            v23 = MutableCopy;
            v24 = &CFDataGetMutableBytePtr(MutableCopy)[8 * (v21 >> 3)];
            v27 = *((_DWORD *)v24 - 2);
            v25 = v24 - 8;
            v26 = v27;
            if (v16 > v27)
            {
              v28 = FigSignalErrorAt();
            }
            else
            {
              *(_DWORD *)v25 = v26 - v16;
              CFDictionarySetValue((CFMutableDictionaryRef)v13, v17, v23);
              v28 = 0;
            }
            CFRelease(v23);
            if ((_DWORD)v28)
              goto LABEL_12;
LABEL_16:
            FigSampleBufferGetDecryptor();
            FigSampleBufferSetDecryptor();
            v29 = sbuf;
            CMSampleBufferGetOutputPresentationTimeStamp(&outputPresentationTimeStamp, a1);
            CMSampleBufferSetOutputPresentationTimeStamp(v29, &outputPresentationTimeStamp);
            v28 = 0;
            *a4 = sbuf;
            return v28;
          }
        }
      }
    }
    v28 = FigSignalErrorAt();
    if (!(_DWORD)v28)
      goto LABEL_16;
  }
LABEL_12:
  if (sbuf)
    CFRelease(sbuf);
  return v28;
}

void dovi_dictionarySetValue(void *key, void *value, CFMutableDictionaryRef theDict)
{
  CFDictionarySetValue(theDict, key, value);
}

void VTTileCompressionSessionInvalidate(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t CMBaseObject;
  uint64_t v5;
  void (*v6)(uint64_t);
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v8;

  if (a1 && !*(_BYTE *)(a1 + 168))
  {
    v2 = *(_QWORD **)(a1 + 160);
    if (v2)
    {
      VTCompressionSessionRemote_Invalidate(v2);
      *(_BYTE *)(a1 + 168) = 1;
    }
    else
    {
      v3 = *(_QWORD *)(a1 + 72);
      if (v3 && *(_QWORD *)(a1 + 136))
      {
        VTTileCompressionSessionCompleteTiles(a1);
        v3 = *(_QWORD *)(a1 + 72);
      }
      CMBaseObject = VTVideoEncoderGetCMBaseObject(v3);
      if (CMBaseObject)
      {
        v5 = CMBaseObject;
        v6 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
        if (v6)
          v6(v5);
      }
      *(_BYTE *)(a1 + 168) = 1;
      if (*(_DWORD *)(a1 + 172))
      {
        Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (Mutable)
        {
          v8 = Mutable;
          CFAbsoluteTimeGetCurrent();
          FigCFDictionarySetInt32();
          FigCFDictionarySetInt32();
          FigCFDictionarySetInt32();
          FigCFDictionarySetInt32();
          FigCFDictionarySetInt32();
          FigCFDictionarySetInt32();
          FigCFDictionarySetInt32();
          FigCFDictionarySetInt32();
          FigPlaybackLogPowerEvent();
          CFRelease(v8);
        }
      }
    }
  }
}

uint64_t VTTileCompressionSessionCompleteTiles(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v4)(uint64_t);

  if (!a1)
    return 4294954394;
  if (*(_BYTE *)(a1 + 168) == 1)
    return 4294954393;
  if (*(_QWORD *)(a1 + 160))
    return VTTileCompressionSessionRemote_CompleteTiles(*(_QWORD *)(a1 + 160));
  v2 = *(_QWORD *)(a1 + 72);
  v3 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
  if (*v3 >= 3uLL && (v4 = (uint64_t (*)(uint64_t))v3[20]) != 0)
    return v4(v2);
  else
    return 4294954514;
}

uint64_t VTTileCompressionSessionGetTypeID()
{
  MEMORY[0x1940281CC](&VTTileCompressionSessionGetTypeID_sRegisterVTTileCompressionSessionOnce, RegisterVTTileCompressionSession);
  return sVTTileCompressionSessionID;
}

void RegisterVTTileCompressionSession()
{
  sVTTileCompressionSessionID = _CFRuntimeRegisterClass();
  sVTTileCompressionSessionPropertyCallbacks = 0;
  unk_1ECED9300 = VTTileCompressionSessionCopySupportedPropertyDictionary;
  qword_1ECED9308 = (uint64_t)VTTileCompressionSessionSetProperty;
  unk_1ECED9310 = VTTileCompressionSessionCopyProperty;
  qword_1ECED9318 = (uint64_t)VTTileCompressionSessionSetProperties;
  unk_1ECED9320 = VTTileCompressionSessionCopySerializableProperties;
  VTSessionRegisterCallbacksForTypeID(&sVTTileCompressionSessionPropertyCallbacks, (const void *)sVTTileCompressionSessionID);
}

uint64_t VTTileCompressionSessionCopySupportedPropertyDictionary(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, CFTypeRef *);
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CFTypeRef cf;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x1E0C80C00];
  cf = 0;
  v14[0] = 0;
  v14[1] = 0;
  if (!a2 || (*a2 = 0, !a1) || *(_BYTE *)(a1 + 168) == 1)
  {
    v11 = FigSignalErrorAt();
LABEL_18:
    v12 = v11;
    goto LABEL_19;
  }
  v3 = *(_QWORD *)(a1 + 160);
  if (v3)
    return VTCompressionSessionRemote_CopySupportedPropertyDictionary(v3);
  v5 = *(_QWORD *)(a1 + 72);
  v6 = *(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (!v6 || ((v7 = v6(v5, &cf), (_DWORD)v7 != -12782) ? (v8 = (_DWORD)v7 == 0) : (v8 = 1), v8))
  {
    if (cf)
    {
      v14[0] = cf;
      v9 = 1;
    }
    else
    {
      v9 = 0;
    }
    v10 = *(_QWORD *)(a1 + 152);
    if (v10)
      v14[v9] = v10;
    v11 = FigCFCreateCombinedDictionary();
    goto LABEL_18;
  }
  v12 = v7;
  FigSignalErrorAt();
LABEL_19:
  if (cf)
    CFRelease(cf);
  return v12;
}

uint64_t VTTileCompressionSessionSetProperty(uint64_t a1, void *key, const __CFNumber *a3)
{
  uint64_t v6;
  const __CFDictionary *v8;
  uint64_t v9;
  uint64_t CMBaseObject;
  uint64_t (*v11)(uint64_t, void *, const __CFNumber *);

  if (!a1 || *(_BYTE *)(a1 + 168) == 1)
    return FigSignalErrorAt();
  v6 = *(_QWORD *)(a1 + 160);
  if (v6)
    return VTCompressionSessionRemote_SetProperty(v6, key, (uint64_t)a3);
  v8 = *(const __CFDictionary **)(a1 + 152);
  if (v8 && CFDictionaryContainsKey(v8, key))
  {
    if (CFEqual(CFSTR("VideoEncoderPixelBufferAttributes"), key)
      || CFEqual(CFSTR("CanvasPixelBufferAttributes"), key)
      || CFEqual(CFSTR("TileEncoderRequirements"), key))
    {
      v9 = FigSignalErrorAt();
    }
    else
    {
      if (CFEqual(CFSTR("ClientPID"), key))
        CFNumberGetValue(a3, kCFNumberSInt32Type, (void *)(a1 + 172));
      v9 = 0;
    }
  }
  else
  {
    v9 = 4294954396;
  }
  if (vtTileCompressionSessionIsPropertyHandledByVideoEncoder(a1, key))
  {
    CMBaseObject = VTVideoEncoderGetCMBaseObject(*(_QWORD *)(a1 + 72));
    v11 = *(uint64_t (**)(uint64_t, void *, const __CFNumber *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v11)
      return v11(CMBaseObject, key, a3);
    return 4294954514;
  }
  return v9;
}

BOOL vtTileCompressionSessionIsPropertyHandledByVideoEncoder(uint64_t a1, const void *a2)
{
  uint64_t v3;
  void (*v4)(uint64_t, CFDictionaryRef *);
  _BOOL8 v5;
  CFDictionaryRef theDict;

  theDict = 0;
  v3 = *(_QWORD *)(a1 + 72);
  v4 = *(void (**)(uint64_t, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (!v4)
    return 0;
  v4(v3, &theDict);
  if (!theDict)
    return 0;
  v5 = CFDictionaryContainsKey(theDict, a2) != 0;
  if (theDict)
    CFRelease(theDict);
  return v5;
}

uint64_t VTTileCompressionSessionCopyProperty(uint64_t a1, void *key, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t result;
  const __CFDictionary *v10;
  NSObject *v11;
  _QWORD *v12;
  uint64_t CMBaseObject;
  uint64_t (*v14)(uint64_t, void *, uint64_t, _QWORD *);
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];

  if (!a4)
    return FigSignalErrorAt();
  *a4 = 0;
  if (!a1 || *(_BYTE *)(a1 + 168) == 1)
    return FigSignalErrorAt();
  v8 = *(_QWORD *)(a1 + 160);
  if (v8)
    return VTCompressionSessionRemote_CopyProperty(v8);
  v10 = *(const __CFDictionary **)(a1 + 152);
  if (v10 && CFDictionaryContainsKey(v10, key))
  {
    if (CFEqual(CFSTR("VideoEncoderPixelBufferAttributes"), key))
    {
      v11 = *(NSObject **)(a1 + 144);
      v17[0] = MEMORY[0x1E0C809B0];
      v17[1] = 0x40000000;
      v17[2] = __VTTileCompressionSessionCopyProperty_block_invoke;
      v17[3] = &__block_descriptor_tmp_20;
      v17[4] = a4;
      v17[5] = a1;
      v12 = v17;
    }
    else if (CFEqual(CFSTR("CanvasPixelBufferAttributes"), key))
    {
      v11 = *(NSObject **)(a1 + 144);
      v16[0] = MEMORY[0x1E0C809B0];
      v16[1] = 0x40000000;
      v16[2] = __VTTileCompressionSessionCopyProperty_block_invoke_2;
      v16[3] = &__block_descriptor_tmp_1;
      v16[4] = a4;
      v16[5] = a1;
      v12 = v16;
    }
    else
    {
      result = CFEqual(CFSTR("TileEncoderRequirements"), key);
      if (!(_DWORD)result)
        return result;
      v11 = *(NSObject **)(a1 + 144);
      v15[0] = MEMORY[0x1E0C809B0];
      v15[1] = 0x40000000;
      v15[2] = __VTTileCompressionSessionCopyProperty_block_invoke_3;
      v15[3] = &__block_descriptor_tmp_2;
      v15[4] = a4;
      v15[5] = a1;
      v12 = v15;
    }
    dispatch_sync(v11, v12);
    return 0;
  }
  else if (vtTileCompressionSessionIsPropertyHandledByVideoEncoder(a1, key))
  {
    CMBaseObject = VTVideoEncoderGetCMBaseObject(*(_QWORD *)(a1 + 72));
    v14 = *(uint64_t (**)(uint64_t, void *, uint64_t, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v14)
      return v14(CMBaseObject, key, a3, a4);
    else
      return 4294954514;
  }
  else
  {
    return 4294954396;
  }
}

uint64_t VTTileCompressionSessionSetProperties(uint64_t a1, CFDictionaryRef theDict)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, CFTypeRef *);
  int v8;
  BOOL v9;
  int v10;
  const void *v11;
  const __CFDictionary *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, const __CFDictionary *);
  uint64_t v15;
  uint64_t v16;
  uint64_t context;
  CFTypeRef cf;
  const void *v19;
  const __CFDictionary *v20;

  v15 = a1;
  v16 = 0;
  if (!a1 || *(_BYTE *)(a1 + 168) == 1)
  {
    LODWORD(v16) = FigSignalErrorAt();
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 160);
    if (v4)
      return VTCompressionSessionRemote_SetProperties(v4, theDict);
    if (theDict)
    {
      v19 = 0;
      v20 = 0;
      context = *(_QWORD *)(a1 + 152);
      cf = 0;
      v6 = *(_QWORD *)(a1 + 72);
      v7 = *(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
      if (!v7 || ((v8 = v7(v6, &cf), v8 != -12782) ? (v9 = v8 == 0) : (v9 = 1), v9))
      {
        CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)vtTileCompressionSessionAddPropertyToPartition, &context);
        v10 = 0;
        v11 = v19;
        v12 = v20;
      }
      else
      {
        v10 = v8;
        FigSignalErrorAt();
        v11 = 0;
        v12 = 0;
      }
      if (cf)
        CFRelease(cf);
      LODWORD(v16) = v10;
      if (v10)
      {
        if (!v12)
        {
LABEL_23:
          if (v11)
            CFRelease(v11);
          return v16;
        }
      }
      else
      {
        if (v11)
          CFDictionaryApplyFunction((CFDictionaryRef)v11, (CFDictionaryApplierFunction)vtTileCompressionSessionSetOneProperty_0, &v15);
        if (!v12)
          goto LABEL_23;
        v13 = *(_QWORD *)(a1 + 72);
        v14 = *(uint64_t (**)(uint64_t, const __CFDictionary *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 40);
        if (!v14 || (LODWORD(v16) = v14(v13, v12), (_DWORD)v16 == -12782))
        {
          LODWORD(v16) = 0;
          CFDictionaryApplyFunction(v12, (CFDictionaryApplierFunction)vtTileCompressionSessionSetOneProperty_0, &v15);
        }
      }
      CFRelease(v12);
      goto LABEL_23;
    }
  }
  return v16;
}

uint64_t vtTileCompressionSessionSetOneProperty_0(void *key, const __CFNumber *a2, uint64_t a3)
{
  uint64_t result;

  result = VTTileCompressionSessionSetProperty(*(_QWORD *)a3, key, a2);
  if (!*(_DWORD *)(a3 + 8))
    *(_DWORD *)(a3 + 8) = result;
  return result;
}

uint64_t VTTileCompressionSessionCopySerializableProperties(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, _QWORD *);

  if (!a3)
    return FigSignalErrorAt();
  *a3 = 0;
  if (!a1 || *(_BYTE *)(a1 + 168) == 1)
    return FigSignalErrorAt();
  if (*(_QWORD *)(a1 + 160))
    return VTCompressionSessionRemote_CopySerializableProperties(*(_QWORD *)(a1 + 160));
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (!v7)
    return 0;
  result = v7(v6, a2, a3);
  if ((_DWORD)result == -12782)
    return 0;
  return result;
}

uint64_t VTTileCompressionSessionCreate(uint64_t a1, unint64_t a2, uint64_t a3, const void *a4, const void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  unint64_t v10;
  BOOL v11;
  uint64_t Instance;
  uint64_t v20;
  CFTypeRef v22;
  CFTypeRef v23;
  const __CFAllocator *v24;
  __CFDictionary *Mutable;
  CFDictionaryRef v26;
  CFDictionaryRef v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char *label;

  v10 = HIDWORD(a2);
  if (a9)
    v11 = (int)a2 < 1;
  else
    v11 = 1;
  if (v11 || SHIDWORD(a2) < 1)
    return 4294954394;
  *a9 = 0;
  MEMORY[0x1940281CC](&VTTileCompressionSessionGetTypeID_sRegisterVTTileCompressionSessionOnce, RegisterVTTileCompressionSession);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v20 = Instance;
  if (VTVideoCodecService_ShouldUseSeparateCodecProcessForEncode())
  {
    if (FigServer_IsVideocodecd())
      goto LABEL_15;
  }
  else if (FigServer_IsServerProcess())
  {
    goto LABEL_15;
  }
  if (VTShouldRunVideoEncodersInProcess())
  {
LABEL_15:
    *(_DWORD *)(v20 + 20) = a2;
    *(_DWORD *)(v20 + 24) = v10;
    *(_DWORD *)(v20 + 16) = a3;
    if (a4)
      v22 = CFRetain(a4);
    else
      v22 = 0;
    *(_QWORD *)(v20 + 32) = v22;
    if (a5)
      v23 = CFRetain(a5);
    else
      v23 = 0;
    *(_QWORD *)(v20 + 40) = v23;
    *(_QWORD *)(v20 + 48) = a7;
    *(_QWORD *)(v20 + 56) = a8;
    label = 0;
    asprintf(&label, "vttile-encoder-pending-tile-queue-%p", (const void *)v20);
    *(_QWORD *)(v20 + 128) = dispatch_queue_create(label, 0);
    free(label);
    *(_QWORD *)(v20 + 136) = 0;
    asprintf(&label, "vttile-encoder-callback-access-queue-%p", (const void *)v20);
    *(_QWORD *)(v20 + 144) = dispatch_queue_create(label, 0);
    free(label);
    v24 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable && (v26 = CFDictionaryCreate(v24, 0, 0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0])) != 0)
    {
      v27 = v26;
      CFDictionaryAddValue(Mutable, CFSTR("VideoEncoderPixelBufferAttributes"), v26);
      CFDictionaryAddValue(Mutable, CFSTR("CanvasPixelBufferAttributes"), v27);
      CFDictionaryAddValue(Mutable, CFSTR("ForgetCachedIOSurfaces"), v27);
      CFDictionaryAddValue(Mutable, CFSTR("TileEncoderRequirements"), v27);
      CFDictionarySetValue(Mutable, CFSTR("ClientPID"), v27);
      CFRelease(v27);
    }
    else
    {
      FigSignalErrorAt();
    }
    *(_QWORD *)(v20 + 152) = Mutable;
    v28 = CFGetAllocator((CFTypeRef)v20);
    VTSelectAndCreateVideoEncoderInstanceInternal(a3, v28, 0, *(CFTypeRef *)(v20 + 32), 0, v20 + 72, 0, v20 + 80, 0);
  }
  v29 = VTTileCompressionSessionRemote_Create(v20, a1, a2, a3, (const __CFDictionary *)a4, (uint64_t)a5, a6, a7, a8, (uint64_t *)(v20 + 160));
  if ((_DWORD)v29)
  {
    v30 = v29;
    CFRelease((CFTypeRef)v20);
  }
  else
  {
    v30 = 0;
    *(CFAbsoluteTime *)(v20 + 176) = CFAbsoluteTimeGetCurrent();
    *a9 = v20;
  }
  return v30;
}

uint64_t VTTileCompressionSessionPrepareToEncodeTiles(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  uint64_t (*v10)(uint64_t, uint64_t);

  if (!a1)
    return 4294954394;
  if (*(_BYTE *)(a1 + 168) == 1)
    return 4294954393;
  v6 = *(_QWORD *)(a1 + 160);
  if (v6)
    return VTTileCompressionSessionRemote_PrepareToEncodeTiles(v6, a2, a3);
  v8 = *(_QWORD *)(a1 + 72);
  v9 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
  if (*v9 >= 3uLL && (v10 = (uint64_t (*)(uint64_t, uint64_t))v9[18]) != 0)
  {
    result = v10(v8, a2);
    if (!a3)
      return result;
  }
  else
  {
    result = 4294954514;
    if (!a3)
      return result;
  }
  *a3 = *(_QWORD *)(a1 + 96);
  return result;
}

uint64_t VTTileCompressionSessionEncodeTile(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _DWORD *a7)
{
  uint64_t v13;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t (*v20)(uint64_t, uint64_t, const void *, uint64_t, uint64_t, uint64_t, _DWORD *);
  uint64_t v21;
  _QWORD block[10];
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;

  v21 = 0;
  if (!a1)
    return 4294954394;
  if (*(_BYTE *)(a1 + 168) == 1)
    return 4294954393;
  v13 = *(_QWORD *)(a1 + 160);
  if (v13)
    return VTTileCompressionSessionRemote_EncodeTile(v13, a2, a3, a4, a5, a6, a7);
  v23 = 0;
  v24 = &v23;
  v25 = 0x2000000000;
  v26 = 0;
  v15 = *(NSObject **)(a1 + 128);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __vtTileCompressionSessionTrackTileEnteringEncoder_block_invoke;
  block[3] = &unk_1E2F642C0;
  block[8] = a3;
  block[9] = a4;
  block[6] = a1;
  block[7] = &v21;
  block[4] = &v23;
  block[5] = a6;
  dispatch_sync(v15, block);
  v16 = *((unsigned int *)v24 + 6);
  _Block_object_dispose(&v23, 8);
  if (!(_DWORD)v16)
  {
    v17 = *(_QWORD *)(a1 + 72);
    v18 = v21;
    v19 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
    if (*v19 >= 3uLL
      && (v20 = (uint64_t (*)(uint64_t, uint64_t, const void *, uint64_t, uint64_t, uint64_t, _DWORD *))v19[19]) != 0)
    {
      v16 = v20(v17, v18, a2, a3, a4, a5, a7);
    }
    else
    {
      v16 = 4294954514;
    }
    ++*(_DWORD *)(a1 + 188);
  }
  return v16;
}

uint64_t VTTileEncoderSessionSetTileAttributes(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  NSObject *v4;
  _QWORD block[7];

  if (!a1)
    return 4294954394;
  v3 = *a1;
  if (!*a1)
    return 4294954394;
  if (*(_BYTE *)(v3 + 168) == 1)
    return 4294954393;
  v4 = *(NSObject **)(v3 + 144);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __VTTileEncoderSessionSetTileAttributes_block_invoke;
  block[3] = &__block_descriptor_tmp_5_3;
  block[4] = v3;
  block[5] = a3;
  block[6] = a2;
  dispatch_sync(v4, block);
  return 0;
}

uint64_t VTTileEncoderSessionCreateVideoFormatDescription(_BYTE **a1, CMVideoCodecType a2, int32_t a3, int32_t a4, const __CFDictionary *a5, CMVideoFormatDescriptionRef *a6)
{
  _BYTE *v6;
  const __CFAllocator *v12;

  if (!a1)
    return 4294954394;
  v6 = *a1;
  if (!v6)
    return 4294954394;
  if (v6[168] == 1)
    return 4294954393;
  v12 = CFGetAllocator(v6);
  return CMVideoFormatDescriptionCreate(v12, a2, a3, a4, a5, a6);
}

